URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/coda/Web/docdir/bnoble-thesis.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/coda/Web/docs-ody.html
Root-URL: 
Title: Mobile Data Access  
Author: Brian D. Noble M. Satyanarayanan, Chair Daniel P. Siewiorek Hui Zhang Randy H. Katz, Brian D. Noble 
Degree: Thesis Committee:  Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy  
Note: Copyright c 1998  This research was sponsored by the Defense Advanced Research Projects Agency (DARPA), Air Force Materiel Command, USAF under agreement numbers F19628-96-C-0061 and F19628-93-C-0193, the Intel Corporation, the National Science Foundation, AT&T, and Lucent Technologies. The views and conclusions contained herein are those of the author and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of Intel, NSF, AT&T, Lucent, DARPA, or the U.S. Government.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  University of California, Berkeley  
Date: May 11, 1998  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. F. Abdelzaher, E. M. Atkins, and K. Shin. </author> <title> QoS Negotiation in Real-Time Systems and its Application to Automated Flight Control. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: If the range is very narrow, the application will be forced to renegotiate frequently. Such renegotiations are expensive, though Campbell has made progress for the special case of cell handoff [13]. Another approach that has arisen from the real-time community is to make market-based decisions; Abdelzaher <ref> [1] </ref> provides an example of such a market-based system. In these systems, a new application declares the qualities of data it is prepared to accept, and associates a utility with each of these qualities.
Reference: [2] <author> J. S. Ahn, P. B. Danzig, Z. Liu, and L. Yan. </author> <title> Evaluation of TCP Vegas: Emulation and Experiment. </title> <journal> Computer Communication Review, </journal> <volume> 25(4):185195, </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: The other approach, which was rejected in the interests of minimal system perturbation, would be to raise the frequency of clock interrupts as described by Ahn et al <ref> [2] </ref>. 6.3. TRACE MODULATION 89 Delay Compensation Modulation attempts to provide symmetric delay of inbound and outbound traffic; that is, for a fixed set of modulation parameters, inbound traffic should perform exactly the same as outbound traffic. <p> RELATED WORK The network emulation tool most similar to our modulation kernel is hitbox, which was used in evaluating the performance of the Vegas variant of TCP <ref> [2] </ref>. Hitbox is an in-kernel modulation layer meant to emulate long-haul network characteristics. Each hitbox host is configured with a single set latency and bandwidth parameters; when connected together in a testbed, they implicitly re-create some desired end-to-end properties.
Reference: [3] <author> D. K. Anand. </author> <title> Introduction to Control Systems, </title> <booktitle> volume 8 of International Series on Systems and Control. </booktitle> <publisher> Pergamon Press, </publisher> <address> Oxford OX3 0BW, England, </address> <year> 1984. </year>
Reference-contexts: The chapter begins in Section 6.1 describes two key features of wireless networks that render them unsuitable for comparative experimentation: their behavior is complex, and not repeatable. To cope with these challenges, the evaluation instead relies on the technique of transient response analysis, more commonly used in control systems, <ref> [3] </ref>; this technique is introduced in Section 6.2. The chapter then describes a technique called trace modulation. In trace modulation, a small layer capable of delaying or dropping all packets to or from a host is inserted in that host's networking stack.
Reference: [4] <institution> Apple Computer, Inc. Inside Macintosh: </institution> <address> QuickTime. </address> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: The main data type used by this player in the context of Odyssey is QuickTime, a standard video format defined by Apple Computer <ref> [4] </ref>; this format has an explicit time base in which the video stream is encoded, and provides facilities for many different representations. 5.2.1 Integration with Odyssey Dushyanth Narayanan split this single application into a client, warden, and server.
Reference: [5] <institution> Apple Computer Inc., Cupertino, CA. Newton Message Pad Handbook, </institution> <year> 1993. </year>
Reference-contexts: Although this ability is taken for granted on desktop systems, there continues to be skepticism about its value in mobile clients. This skepticism is fueled by the popularity of devices such as the Pilot and other PDAs <ref> [5] </ref>, which execute only one application at a time. Despite the success of such devices, it seems clear that many mobile users will find it valuable to run background applications in addition to the foreground application that dominates their attention.
Reference: [6] <institution> AT&T Global Information Solutions Company. Architecture Specification for Wave-LAN Air Interface. </institution>
Reference-contexts: Instead of physical control, one could imagine that, if all devices operating in the relevant frequency ranges cooperated, these devices could be logically restrained from interfering. However, many different kinds of wireless devices make use of the same unlicensed frequency ranges. For example, the WaveLAN wireless devices <ref> [6] </ref> operate in the 900 MHz range; many cordless phones use this range as well. These phones have no concept of media access protocol, and cannot be party to cooperative scheme to avoid interference.
Reference: [7] <author> H. Balakrishnan, V. N. Padmanabhan, and R. H. Katz. </author> <title> The Effects of Asymmetry on TCP Performance. </title> <booktitle> In Proceedings of the Third Annual ACM/IEEE International Conference on Mobile Computing and Networking, </booktitle> <address> Budapest, Hungary, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Odyssey's design currently encompasses only a single value for bandwidth and latency between a client and a particular server, rather than different measures for inbound and outbound quality. Thus, Odyssey implicitly assumes that network performance is symmetric. The problem of asymmetry in networks, both mobile <ref> [7, 54] </ref> and wired [41], is a topic of recent interest. Despite this, the assumption of symmetry has proven adequate thus far. 3.3.3 Resource Requests: Expressing Expectations Applications do not need continuous knowledge of all resources.
Reference: [8] <author> G. Banga, F. Douglis, and M. Rabinovich. </author> <title> Optimistic Deltas for WWW Latency Reduction. </title> <booktitle> In Proceedings of the USENIX 1997 Annual Technical Conference, </booktitle> <address> Anaheim, CA, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: For example, compressing data before shipping spends processing power to save bandwidth. A similar trade-off between computation and bandwidth is to ship only deltas of slowly changing data rather than re-ship the entire item with each change. Such a scheme is used in Banga's optimistic Web deltas <ref> [8] </ref>. Techniques that trade resources for one another are transparent to applications and users. The data delivered to them is the same, whether or not the trade-off is made.
Reference: [9] <author> J. F. Bartlett. </author> <title> W4 The Wireless World Wide Web. </title> <booktitle> In Proceedings of the IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Decem-ber </month> <year> 1994. </year>
Reference-contexts: The Bayou project applied similar techniques to databases [77]. It was the recognition that consistency represented only a single dimension of the broader concept of fidelity that led to the design of Odyssey. Several systems served as the background to the taxonomy of adaptive systems. Mobi-saic [81], W4 <ref> [9] </ref>, and Dynamic Documents [36] all cope with mobility within the context of a single application a web browser. Many similar stand-alone applications exist in the commercial marketplace, due to the inability to modify the operating system.
Reference: [10] <author> B. J. Bennington and C. R. Bartel. Wireless Andrew: </author> <title> Experience Building a High Speed, Campus-Wide Wireless Data Network. </title> <booktitle> In Proceedings of the Third Annual ACM/IEEE International Conference on Mobile Computing and Networking, </booktitle> <address> Bu-dapest, Hungary, </address> <month> September </month> <year> 1997. </year> <note> 145 146 BIBLIOGRAPHY </note>
Reference-contexts: However, only the AT&T WaveLAN packet radio device was available to the author at the time of this writing. This device operates in the 900MHz region, and offers a nominal bandwidth of 2 Mb/s. The static infrastructure for our WaveLAN network, Wireless Andrew <ref> [10] </ref>, consists of a collection of base stations called WavePoints that serve as bridges to an Ethernet. A 6.4. EMPIRICAL GENERATION 93 roaming protocol triggers handoffs between WavePoints as a WaveLAN host moves.
Reference: [11] <author> V. Bharghavan and V. Gupta. </author> <title> A Framework for Application Adaptation in Moblie Computing Environments. </title> <booktitle> In Proceedings of the Twenty-First Annual International Computer Software and Applications Conference, </booktitle> <address> Bethesda, MD, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: This strategy is questionable in a mobile environment, where bandwidth is likely to be scarce. 8.2.3 Similar Approaches A number of researchers examining the problem of mobile data access have taken Odyssey's ideas as a starting point. In Prayer <ref> [11] </ref>, Bharghavan uses many of the ideas originating in Odyssey: the split between policy and mechanism in application-aware adaptation, a central authority to monitor resource availability, and the basing of adaptation decisions on ranges of availability.
Reference: [12] <author> S. Brabner. X.500: </author> <title> a Global Directory Standard. </title> <journal> Telecommunications (International Edition), </journal> <volume> 23(2), </volume> <month> Februrary </month> <year> 1989. </year>
Reference-contexts: For example, a single directory cannot contain both video clips and map data; such exposure of type in the name space is obviously undesirable. However, adding a layer of indirection for naming, such as X.500 <ref> [12] </ref>, or making use of aggregating objects, such as HTML documents, which name other objects transparently, would decouple naming from types, while preserving both the benefits of a convenient unit of administration as well as some logical directory structure. An example name space of six tomes appears in Figure 3.2. <p> While the tome structure itself is critical to preserving administrative scalability, this coupling needlessly complicates the handling of composite or container objects for example, a multimedia object that contains synchronized video and audio streams. Combining tomes with some other naming structure, such as X.500 <ref> [12] </ref>, and explicitly supporting an aggregation type would be useful. The third area of the system to improve is the algorithm that divides total bandwidth amongst multiple connections. The current practice of weighting based on recent use results in some undesirable effects.
Reference: [13] <author> A. Campbell, R.-F. Liao, and Y. Shobatake. </author> <title> QoS Controlled Handoff in Wireless ATM Networks. </title> <booktitle> In Sixth WINLAB Workshop on Third Generation Wireless Information Networks, </booktitle> <address> New Brunswick, NJ, </address> <month> March 20-21 </month> <year> 1997. </year>
Reference-contexts: If the range is very narrow, the application will be forced to renegotiate frequently. Such renegotiations are expensive, though Campbell has made progress for the special case of cell handoff <ref> [13] </ref>. Another approach that has arisen from the real-time community is to make market-based decisions; Abdelzaher [1] provides an example of such a market-based system. In these systems, a new application declares the qualities of data it is prepared to accept, and associates a utility with each of these qualities.
Reference: [14] <author> S. Cen. </author> <title> A Software Feedback Toolkit and its Application In Adaptive Multimedia Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute of Science and Technology, </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: RELATED WORK 8.2.2 Software Feedback Systems Another approach to coping with mobility is the use of software feedback within an application; the two most prominent examples of this are the video player based on McCanne's Receiver-driven Layered Multicast [44], and the video player based on Cen's software feedback framework <ref> [14, 31] </ref>. Such systems monitor their own performance and react to changes in it. They scale back quality, and hence resource consumption, when application performance is poor, and attempt to discover additional resources by optimistically scaling up usage from time to time. <p> Finally, the current state of the art in building adaptive software systems is a black art. Developing systematic principles for their design, as well as techniques for analyzing their agility and stability before they are built, would be valuable. Cen's work <ref> [14] </ref> is a promising start along these lines, but much remains to be done. 9.3 Concluding Remarks Ever more capable mobile hardware and wireless networking services combine to make the problem of mobile data access increasingly important.
Reference: [15] <author> D. D. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1985. </year>
Reference-contexts: Additionally, the genesis of many of the individual ideas in Odyssey can be traced to earlier work. Upcalls were first proposed by Clark in the Swift operating system <ref> [15] </ref>. The idea of having type-specific behaviors for the standard file interface is a more general form of the extensible name resolution provided by the Semantic File System [25].
Reference: [16] <author> N. Davies, G. S. Blair, K. Cheverst, and A. Friday. </author> <title> A Network Emulator to Support the Development of Adaptive Applications. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Mobile and Location Independent Computing, </booktitle> <month> April 10-11 </month> <year> 1995. </year>
Reference-contexts: Unlike trace modulation, these layers are driven only by synthetic models, not by empirically derived ones; however, there is no reason why such models could not be used. The Lancaster emulator <ref> [16] </ref> uses a central server rather than an emulation layer in each host. This has the advantage that shared-media models can be implemented. However, as with Probe/Fault Injection, this emulator uses only synthetic models. More broadly, the use of user-level libraries for network emulation is widespread. <p> Extending trace modulation techniques to multiple hosts using a shared medium is of obvious value. This problem has been addressed by the Lan-caster emulator <ref> [16] </ref>, which is a library implementation that must be linked with specific applications, providing delays based on purely synthetic models.
Reference: [17] <author> S. Dawson and F. Jahanian. </author> <title> Probing and Fault Injection of Dependable Distributed Protocols. </title> <journal> The Computer Jouranl, </journal> <volume> 38(4), </volume> <year> 1995. </year>
Reference-contexts: Also, since the individual per-packet delays imposed by hitbox tend to be smaller than those in trace modulation, the clock interrupts on hitbox hosts are more frequent than in the default case, causing some small perturbation in experimental results. A considerably more flexible system, the Probe/Fault Injection Tool <ref> [17] </ref>, allows any protocol or application layer to be encapsulated by layers above and below. Layers above can be used to generate a test workload, while layers below can be used to perturb existing traffic according to some model.
Reference: [18] <author> R. P. Draves. </author> <title> A Revised IPC Interface. </title> <booktitle> In Proceedings of the USENIX Mach Conference, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: First, they are unreliably delivered; most UNIX implementations promise at-most-once delivery rather than exactly-once. Second, they do not provide any convenient way to pass arguments with them; such arguments are required for resource notification. IPC mechanisms, such as UNIX-domain sockets or Mach's messages <ref> [18] </ref>, provide exactly-once delivery and the passing of arguments. Unfortunately, they also require the application to either frequently select on some set of file descriptors, or to make use of a particular thread model.
Reference: [19] <author> D. Duchamp. </author> <title> Issues in Wireless Mobile Computing. </title> <booktitle> In Proceedings of the Third Workshop on Workstation Operating Systems, </booktitle> <address> Key Biscayne, FL, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: The client must react to decreased resource availability, and should take advantage of increases. Such reaction, adapting to changes in the supply of resources, is widely recognized as central to the support of mobile computing <ref> [19, 23, 66, 78, 85] </ref>. This notion of adaptation is defined in Section 2.3. 2.2 Demands on Mobile Clients The demands placed on a mobile client are a function of the applications run by that client.
Reference: [20] <author> M.R. Ebling and M. Satyanarayanan. SynRGen: </author> <title> An Extensible File Reference Generator. </title> <booktitle> In Proceedings of the 1994 ACM SIGMETRICS Conference, </booktitle> <address> Nashville, TN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The final scenario is intended to capture the effect of interfering wireless traffic rather than physical motion. The trace collection host is placed in a room with five other laptops also using WaveLAN. Each of the other laptops continuously executes a workload produced by SynRGen <ref> [20] </ref>, a synthetic file reference generator. The synthetic workload models a user in a edit-debug cycle on files stored on a remote NFS file server. This scenario, called Chatterbox, is depicted in Figure 6.12.
Reference: [21] <author> D. Eckhardt and P. Steenkiste. </author> <title> Measurement and Analysis of the Error Characteristics of an In-Building Wireless Network. </title> <journal> Computer Communication Review, </journal> <volume> 26(4):243 254, </volume> <month> October </month> <year> 1996. </year>
Reference-contexts: Likewise, as different obstructions pass through the path between base station and mobile client, signal propagation can change dramatically. These difficulties present two challenges to experiments carried out over wireless networks. First, the highly variable performance of wireless networks is difficult to describe and understand <ref> [21] </ref>. Analyzing the behavior of an adaptive system on top of such chaotic performance would be a daunting task. Good evaluation of Odyssey requires a testbed that provides performance that is more easily analyzed.
Reference: [22] <author> R. Fielding, J. Gettys, J. Mogul, H. Frystyk, and T. Berners-Lee. </author> <title> Hypertext Transfer Protocol HTTP/1.1. Internet RFC 2068, </title> <month> January </month> <year> 1997. </year>
Reference-contexts: Through it, Netscape can route all of its HTTP <ref> [22] </ref> requests for data through a designated process. This process is commonly on a remote host; such a remote process might act as a gateway that is exempt from firewall restrictions, or a caching proxy for a group of machines [43].
Reference: [23] <author> G. H. Forman and J. Zahorjan. </author> <title> The Challenges of Mobile Computing. </title> <journal> IEEE Computer, </journal> <volume> 27(4), </volume> <month> April </month> <year> 1994. </year> <note> BIBLIOGRAPHY 147 </note>
Reference-contexts: The client must react to decreased resource availability, and should take advantage of increases. Such reaction, adapting to changes in the supply of resources, is widely recognized as central to the support of mobile computing <ref> [19, 23, 66, 78, 85] </ref>. This notion of adaptation is defined in Section 2.3. 2.2 Demands on Mobile Clients The demands placed on a mobile client are a function of the applications run by that client.
Reference: [24] <author> A. Fox, S. D. Gribble, E. A. Brewer, and E. Amir. </author> <title> Adapting to Network and Client Variability via On-Demand Dynamic Distillation. </title> <booktitle> In Proceedings of the Seventh International ACM Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> Cambridge, MA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: It stores each movie as a number of pre-computed versions called tracks; each at a different fidelity. One could as easily use an on-line scheme, that degraded video images on the fly <ref> [24] </ref>; at present, our QuickTime server does not do so. The number and sizes of tracks available for each movie are part of that movie's meta-data. The meta-data also specifies, for each track, the sizes and offsets of each frame in that track. <p> However, as reported in [48], more than half of all image bytes served are from GIF images. Furthermore, JPEG to JPEG distillation has been fruitfully pursued by Fox <ref> [24] </ref>; extending Odyssey's distillation engine should therefore be straightforward. 5.4. SPEECH RECOGNIZER: JANUS 77 data, called simply headers. <p> Many similar stand-alone applications exist in the commercial marketplace, due to the inability to modify the operating system. These applications, such as the Eudora mail client [60], have met with substantial success. Finally, toolkits such as Rover [34] and Fox's dynamic distillation infrastructure <ref> [24] </ref> also take an application-only approach to mobility. The key feature missing from all these systems, with the possible exception of Rover, is the centralized management of resources.
Reference: [25] <author> D. K. Gifford, P. Jouvelot, M. A. Sheldon, and J. W. O'Toole Jr. </author> <title> Semantic File Systems. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating System Principles, </booktitle> <year> 1991. </year>
Reference-contexts: For example, the video database tome in Figure 3.2 provides a query-based naming scheme, while the World Wide Web tome uses URLs as names. Such extensions to the name space are similar in spirit to the Semantic File System <ref> [25] </ref>. The mechanism supporting these extensions is described in Section 3.3.6. 3.3.2 Resources: Naming the Environment As they execute, applications adapt to their environment. To do so, they must have some way of naming salient features of the environment to which they adapt. <p> Upcalls were first proposed by Clark in the Swift operating system [15]. The idea of having type-specific behaviors for the standard file interface is a more general form of the extensible name resolution provided by the Semantic File System <ref> [25] </ref>. While Web proxies were originally intended to deal with firewalls and provide caching [43], they were used in Rover and Dynamic Documents to add functionality to the browser.
Reference: [26] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1993. </year>
Reference-contexts: Finally, the installation of pieces of code at low levels of the system to encapsulate specialized knowledge about different data types is a common practice in databases <ref> [26] </ref>. The primary purpose of such code is to improve disk management.
Reference: [27] <author> J. S. Heidemann and G. J. Popek. </author> <title> File-system Development with Stackable Layers. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1), </volume> <year> 1994. </year>
Reference-contexts: IMPLEMENTATION the operations are commonly implemented by all underlying file systems. This structure is illustrated in Figure 4.2. The original VFS implementation required each underlying file system type to implement each of the vnode operations. BSD 4.4 included an extension to VFS called stackable layers <ref> [27] </ref>. This extension allowed each file system to implement a different subset of all vnode operations; a file system's particular subset was determined at boot time from a descriptor provided by the file system.
Reference: [28] <author> J. H. Howard, M. L. Kazar, S. G. Menees, D. A. Nichols, M. Satyanarayanan, R. N. Sidebotham, and M. J. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: This section first describes these guiding principles and how they affect Odyssey's design. It then describes what design elements were borrowed from Odyssey's philosophical ancestors, AFS <ref> [28] </ref> and Coda. 3.1.1 Guiding Principles There are three principles that influenced the design of Odyssey. The first principle is minimalism. Rather than using a clean-sheet approach, Odyssey was designed as a minimal set of extensions to an existing system. <p> It is designed to highlight any potential asymmetry in network performance, especially important given the assumption of network symmetry forced by the lack of synchronized clocks during trace collection, as discussed in Section 6.4.1. The third benchmark is the Andrew Benchmark <ref> [28] </ref> run on NFS [64], a commonly-used network file system. Since NFS was not designed for a mobile environment, it makes no special attempt to defer or eliminate traffic on networks of low quality. The NFS cache is flushed before each trial of the experiment.
Reference: [29] <author> L. Huston and P. Honeyman. </author> <title> Partially Connected Operation. </title> <booktitle> In Proceedings of the Second USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Since there may be many factors that make up the quality of a particular data item, fidelity has potentially many different dimensions. One dimension of fidelity that applies to all data items is consistency. Systems such as Coda, Ficus [59], and Little Work <ref> [29] </ref> cope with mobility solely by relaxing the consistency of files in a file system. Bayou applies similar techniques to the very different consistency model of databases.
Reference: [30] <author> D. B. Ingham and G. D. Parrington. Delayline: </author> <title> A Wide-Area Network Emulation Tool. </title> <journal> Computing Systems, </journal> <volume> 7(3), </volume> <year> 1994. </year>
Reference-contexts: This has the advantage that shared-media models can be implemented. However, as with Probe/Fault Injection, this emulator uses only synthetic models. More broadly, the use of user-level libraries for network emulation is widespread. Examples include the Lancaster emulator, Delayline <ref> [30] </ref>, and the slow mechanism of RPC2 [65].
Reference: [31] <author> J. Inouye, S. Cen, C. Pu, and J. Walpole. </author> <title> System Support for Mobile Multimedia Applications. </title> <booktitle> In Proceedings of the 7th International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> St. Louis, MO, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: This approach, referred to as laissez-faire adaptation, has been taken by commercial software such as Eudora [60]. More recently, it has been pursued by research systems such as McCanne's RLM [44] and Cen's video player <ref> [31] </ref>. In such systems, applications monitor the availability of resources, and make their own adaptation decisions in isolation of other applications or the system. The laissez-faire approach provides two substantial benefits. <p> RELATED WORK 8.2.2 Software Feedback Systems Another approach to coping with mobility is the use of software feedback within an application; the two most prominent examples of this are the video player based on McCanne's Receiver-driven Layered Multicast [44], and the video player based on Cen's software feedback framework <ref> [14, 31] </ref>. Such systems monitor their own performance and react to changes in it. They scale back quality, and hence resource consumption, when application performance is poor, and attempt to discover additional resources by optimistically scaling up usage from time to time.
Reference: [32] <author> Intel Corporation, </author> <title> Hillsboro, OR. Smart Battery Specifications, 1994. Co-produced by Duracell, </title> <publisher> Inc., </publisher> <address> Bethel, CT. </address>
Reference-contexts: This estimation is relatively simple for resources under direct client control, such as disk space. Tools for measuring resources of more recent interest, such as battery power, are being integrated with current hardware <ref> [32] </ref>. However, for resources not entirely the province of the client, such as network bandwidth, the case for purely local estimation is less clear. <p> The others more challenging. The estimation of available CPU cycles must be in platform-independent units, such as SPECint95 ratings, or they will be unusable. Correctly estimating battery power depends on hardware support, such as that provided by Intel's smart battery <ref> [32] </ref>. Monetary costs are likely to be the most difficult to calculate and use, given the number and complexity of possible rate structures. One feature of the current design that could be eliminated is the tight coupling between names and types.
Reference: [33] <author> V. Jacobson, C. Leres, and S. McCanne. </author> <title> The Tcpdump Manual Page. </title> <institution> Lawrence Berkeley Laboratory, Berkeley, </institution> <address> CA. </address>
Reference-contexts: This in-kernel trace collection is similar to other network data collection platforms <ref> [33, 45] </ref>, in that it provides accurate timing of network events with modest overheads. Hooks are placed in the input and output routines of traced devices to allow the tracing software access to packets. <p> The best-known system for tracing network behavior is the Berkeley Packet Filter [45], which is typically used in conjunction with tcpdump <ref> [33] </ref>. This architecture is efficient, more flexible than that of trace modulation, and has rightly found great favor with the networking community. Trace modulation's collection mechanism differs from the Berkeley Packet Filter in that it records device characteristics in addition to traffic information.
Reference: [34] <author> A. D. Joseph, A. F. deLespinasse, J. A. Tauber, D. K. Gifford, and M. F. Kaashoek. </author> <title> Rover: A Toolkit for Mobile Information Access. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating System Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Many similar stand-alone applications exist in the commercial marketplace, due to the inability to modify the operating system. These applications, such as the Eudora mail client [60], have met with substantial success. Finally, toolkits such as Rover <ref> [34] </ref> and Fox's dynamic distillation infrastructure [24] also take an application-only approach to mobility. The key feature missing from all these systems, with the possible exception of Rover, is the centralized management of resources.
Reference: [35] <author> ISO/IEC JTC1/SC29/WG11. </author> <title> Coding of Moving Pictures and Associated Audio for Digital Storage Media up to 1.5 Mbit/s. MPEG, International Standard, </title> <type> ISO 11172. </type>
Reference-contexts: This is because each frame can be rendered in isolation, without need for some reference frame. However, one could easily extend this notion to a format with inter-frame compression, such as MPEG <ref> [35] </ref>, by restriction track changes to points in the track with stand-alone frames. 5.3 Web Browser: Netscape The second application to be modified to make use of application-aware adaptation was Netscape Navigator, or more simply Netscape. Netscape allows the retrieval and display of HTML [62], a hypertext mark-up language.
Reference: [36] <author> M. F. Kaashoek, T. Pinckney, and J. A. Tauber. </author> <title> Dynamic Documents: </title> <booktitle> Mobile Wireless Access to the WWW. In Proceedings of the IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December </month> <year> 1994. </year> <note> 148 BIBLIOGRAPHY </note>
Reference-contexts: It was the recognition that consistency represented only a single dimension of the broader concept of fidelity that led to the design of Odyssey. Several systems served as the background to the taxonomy of adaptive systems. Mobi-saic [81], W4 [9], and Dynamic Documents <ref> [36] </ref> all cope with mobility within the context of a single application a web browser. Many similar stand-alone applications exist in the commercial marketplace, due to the inability to modify the operating system. These applications, such as the Eudora mail client [60], have met with substantial success.
Reference: [37] <author> R. H. Katz and E. A. Brewer. </author> <title> The Case for Wireless Overlay Networks. </title> <booktitle> In SPIE Multimedia and Networking Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: This is due to the overlay argument, which was first applied by Katz and Brewer <ref> [37] </ref> to wireless networks. This section recounts their basic argument, and then broadens it to apply to elements of a mobile infrastructure generally. Mobile devices must rely on wireless networks for connectivity while in transit or outdoors, and often will take advantage of them while in-building.
Reference: [38] <author> S. Keshav. </author> <note> Packet-Pair Flow Control. To appear in IEEE/ACM Transactions on Networking. </note>
Reference-contexts: Because Odyssey may often be used in weakly-connected environments, we rely on purely passive observation; Odyssey adds no traffic whatsoever to that already present. This is in contrast to active approaches, such as Keshav's packet-pair protocol <ref> [38] </ref>. The details of estimation are presented in Chapter 4. This estimation is built upon that performed in Coda, designed in collaboration with Mummert [49]. As a side effect, RPC2 records the sizes and times of requests and responses between client and server. <p> The period used in the current prototype is 500 milliseconds. Estimation is also purely passive; it depends only on observing traffic already present on the client. This is in contrast to approaches such as Keshav's packet-pair protocol <ref> [38] </ref>, which add traffic to the network for the purposes of estimation. There are pros and cons to each approach. <p> The notion of reducing complex network observations to simple parameters through controlled workloads is commonly used in modelling physical channels. The technique used to determine bottleneck bandwidth two ECHO packets sent back-to-back is quite similar to the packet-pair approach used by Keshav <ref> [38] </ref>. As in the empirical modulation workload, packet-pair also assumes a symmetric network.
Reference: [39] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: Finally, Section 8.4 concludes with two systems that include techniques of possible use in Odyssey. 8.1 Design and Implementation Heritage Many systems have contributed to the design and construction of Odyssey. The largest such contribution is from Coda <ref> [39, 50, 67] </ref>, which first demonstrated that client resources could be used to insulate users and applications from the vagaries of mobile information access. As detailed in Chapters 3 and 4, many aspects of Odyssey including its implementation 131 132 CHAPTER 8.
Reference: [40] <author> S. R. Kleiman. Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX. </title> <booktitle> In Summer Usenix Conference Proceedings, </booktitle> <address> Atlanta, GA, </address> <year> 1986. </year>
Reference-contexts: However, as discussed in Section 3.3.1 the name space is no longer entirely seamless; it is exposed through these tomes. In both Coda and AFS, the global name space is mounted in the client's local name space as a new VFS file system <ref> [40] </ref>. Clients cache copies of files from servers, and then operate on them locally. Updated files are shipped back to servers as bandwidth permits. This process is managed by a local cache manager called Venus in both systems. <p> The trampoline then calls the actual signal handler as the third step. 4.2.2 VFS: Virtual File System The BSD 4.4 file system, along with the file system of several other kernels, uses the Virtual File System, commonly known as VFS <ref> [40] </ref>, to glue together several distinct file systems under a unified layer. The VFS layer presents a unified front to the file I/O system calls, as well as a framework within which each of the individual file system types can be implemented, as shown in Figure 4.1.
Reference: [41] <author> T. V. Lakshman, U. Madhow, and B. Suter. </author> <title> Window-based error recovery and flow control with a slow acknoledgement channel: a study of TCP/IP performance. </title> <booktitle> In Proceedings of the IEEE INFOCOM '97 Conference on Computer Communications, </booktitle> <address> Kobe, Japan, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: Odyssey's design currently encompasses only a single value for bandwidth and latency between a client and a particular server, rather than different measures for inbound and outbound quality. Thus, Odyssey implicitly assumes that network performance is symmetric. The problem of asymmetry in networks, both mobile [7, 54] and wired <ref> [41] </ref>, is a topic of recent interest. Despite this, the assumption of symmetry has proven adequate thus far. 3.3.3 Resource Requests: Expressing Expectations Applications do not need continuous knowledge of all resources. It is likely that any given application will be concerned only with a small subset of all resources.
Reference: [42] <author> S. Lu, K.-W. Lee, and V. Bharghavan. </author> <title> Adaptive Service in Mobile Computing Environments. </title> <booktitle> In Fifth IFIP International Workshop on Quality of Service, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Therefore, the real-time community has applied reservation techniques to the problem of mobile data access with two modifications <ref> [42, 58] </ref>. First, rather than reserving a particular quantity of a resource, they reserve a range; the underlying system transparently adapts within the range. Second, if the range is exceeded or the client moves, a renegotiation involving some or all of the end-to-end path is initiated.
Reference: [43] <author> A. Luotonen and K. Altis. </author> <title> World-Wide Web Proxies. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 27, </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: Through it, Netscape can route all of its HTTP [22] requests for data through a designated process. This process is commonly on a remote host; such a remote process might act as a gateway that is exempt from firewall restrictions, or a caching proxy for a group of machines <ref> [43] </ref>. Instead, Odyssey places the proxy, called the cellophane, between Netscape and Odyssey, redirecting Netscape's requests through the file system to Odyssey. The cellophane is quite small, at three thousand lines of code. It is this re-routing that ensures that Netscape's network traffic will be visible to the viceroy. <p> The idea of having type-specific behaviors for the standard file interface is a more general form of the extensible name resolution provided by the Semantic File System [25]. While Web proxies were originally intended to deal with firewalls and provide caching <ref> [43] </ref>, they were used in Rover and Dynamic Documents to add functionality to the browser. Finally, the installation of pieces of code at low levels of the system to encapsulate specialized knowledge about different data types is a common practice in databases [26].
Reference: [44] <author> S. McCanne, V. Jacobsen, and M. Vetterli. </author> <title> Receiver-driven Layered Multicast. </title> <booktitle> In Proceedings of the ACM SIGCOMM'96 Conference, </booktitle> <address> Stanford, CA, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: This approach, referred to as laissez-faire adaptation, has been taken by commercial software such as Eudora [60]. More recently, it has been pursued by research systems such as McCanne's RLM <ref> [44] </ref> and Cen's video player [31]. In such systems, applications monitor the availability of resources, and make their own adaptation decisions in isolation of other applications or the system. The laissez-faire approach provides two substantial benefits. <p> RELATED WORK 8.2.2 Software Feedback Systems Another approach to coping with mobility is the use of software feedback within an application; the two most prominent examples of this are the video player based on McCanne's Receiver-driven Layered Multicast <ref> [44] </ref>, and the video player based on Cen's software feedback framework [14, 31]. Such systems monitor their own performance and react to changes in it.
Reference: [45] <author> S. McCanne and V. Jacobson. </author> <title> The BSD Packet Filter: A New Architecture for User-level Packet Capture. </title> <booktitle> In Proceedings of the 1993 Winter USENIX Technical Conference, </booktitle> <address> San Deigo, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: This in-kernel trace collection is similar to other network data collection platforms <ref> [33, 45] </ref>, in that it provides accurate timing of network events with modest overheads. Hooks are placed in the input and output routines of traced devices to allow the tracing software access to packets. <p> While each of these has been explored in isolation by other researchers, the author is not aware of any previous work, published or unpublished, that combines these ideas in a similar manner. The best-known system for tracing network behavior is the Berkeley Packet Filter <ref> [45] </ref>, which is typically used in conjunction with tcpdump [33]. This architecture is efficient, more flexible than that of trace modulation, and has rightly found great favor with the networking community. <p> However, empirically capturing such performance would require fine-grained, synchronized clocks. More practically, the tool itself can be improved and simplified. Rather than having an ad hoc trace collection mechanism, it should be relatively easy to make use of the Berke-ley Packet Filter <ref> [45] </ref> to make collection more flexible. It should also be possible to re-implement the trace replay mechanism as a piece of code that can be dynamically loaded into the kernel, further simplifying its use.
Reference: [46] <author> M. K. McKusick, K. Bostic, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.4BSD Operating System. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: This reduces the number 17 18 CHAPTER 3. DESIGN of fundamentally new abstractions that an application must accept in order to make use of application-aware adaptation. The base system in which Odyssey has been built is NetBSD, a variant of the 4.4 BSD UNIX operating system <ref> [46] </ref>. NetBSD source code is publicly available without encumbrance, thus allowing free distribution of derivatives. The 4.4 BSD family of operating systems are very similar. They have a close, common ancestor in the 4.4BSD-Lite release, and have collectively met with wide acceptance in the systems research community. <p> This section provides a brief summary of these two, intended to give enough context the remainder of the chapter. For more details on these mechanisms, the interested reader is directed toward McKusick's text <ref> [46] </ref>. 4.2.1 Signal Delivery The UNIX signal mechanism provides a fashion of software interrupt. Signals can be used to notify a process, asynchronously, of some exceptional condition. By default, most signals terminate the process to which they are sent, though some pause the process and others are simply ignored.
Reference: [47] <author> C. W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor Capacity Reserves for Multimedia Operating Systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Such techniques have been an important focus of the high-performance networking community, and have more recently been applied to CPU scheduling <ref> [47] </ref> and other 8.2. COMPARABLE SYSTEMS 133 resources. The basic ideas in real-time systems are admission control and resource reservation. When a new task enters the system, it specifies both the workload it will present and the performance it will demand.
Reference: [48] <author> J. Mogul, F. Douglis, A. Feldmann, and B. Krishnamurthy. </author> <title> Potential benefits of delta encoding and data compression for HTTP. In Proceedings of the ACM SIGCOMM'97 Conference, </title> <address> Cannes, France, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: First, they make up a majority of all bytes served on the Web <ref> [48] </ref>. Second, there exists a natural degradation method JPEG compression that gives good size reductions while yielding tolerable quality. <p> To pass these request headers to the Web warden, an application uses the webw sethdr operation. Each page can have associated with it a separate set of meta 1 Presently, the distillation server distills only GIF images, not JPEG images. However, as reported in <ref> [48] </ref>, more than half of all image bytes served are from GIF images. Furthermore, JPEG to JPEG distillation has been fruitfully pursued by Fox [24]; extending Odyssey's distillation engine should therefore be straightforward. 5.4. SPEECH RECOGNIZER: JANUS 77 data, called simply headers.
Reference: [49] <author> L. B. Mummert. </author> <title> Exploiting Weak Connectivity in a Distributed File System. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1993. </year> <note> CMU-CS-96-195. BIBLIOGRAPHY 149 </note>
Reference-contexts: This is in contrast to active approaches, such as Keshav's packet-pair protocol [38]. The details of estimation are presented in Chapter 4. This estimation is built upon that performed in Coda, designed in collaboration with Mummert <ref> [49] </ref>. As a side effect, RPC2 records the sizes and times of requests and responses between client and server. These observations are recorded in two logs per connection, one for remote procedure call and one for bulk transfer. <p> This section presents a brief overview of these logs. The details of how RPC2 calculates RTT and correspondingly adjusts retransmission timers has been described by Mummert <ref> [49] </ref>. On a client, each unique (host, service) pair maintains two separate logs: one for remote procedure call traffic, and one for bulk transfer. Multiple connections to the same (host, service) pair share logs. Each log contains observations in a fixed-size circular buffer.
Reference: [50] <author> L. B. Mummert, M. R. Ebling, and M. Satyanarayanan. </author> <title> Exploiting Weak Connectivity for Mobile File Access. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Prinicples, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Stale files are not replaced, nor are conflicts detected, until the client is re-connected. When connectivity is present, but too weak to maintain strict consistency, the window of vulnerability for stale reads and conflicting updates widens adaptively with network speed <ref> [50] </ref>. Since the quality of data is type-dependent, other dimensions of fidelity are also dependent on the type of data to be degraded. For example, video data has at least two dimensions 2.3. ADAPTATION 11 in addition to consistency: frame rate and image quality of individual frames. <p> Finally, Section 8.4 concludes with two systems that include techniques of possible use in Odyssey. 8.1 Design and Implementation Heritage Many systems have contributed to the design and construction of Odyssey. The largest such contribution is from Coda <ref> [39, 50, 67] </ref>, which first demonstrated that client resources could be used to insulate users and applications from the vagaries of mobile information access. As detailed in Chapters 3 and 4, many aspects of Odyssey including its implementation 131 132 CHAPTER 8.
Reference: [51] <author> G. Nguyen, R. Katz, B. Noble, and M. Satyanarayanan. </author> <title> A Trace-Based Approach for Modelling Wireless Channel Behavior. </title> <booktitle> In Proceedings of the Winter Simulation Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Even if the relevant region's wireless spectrum could be isolated from interference from other devices, obtaining predictable, reproducible results remains a challenge. Wireless propagation is affected by environmental factors that are both spatially <ref> [51] </ref> and temporally [79] dependent; small changes in the path taken through an area of wireless coverage can have large impacts on performance. For example, multipath effects are extremely sensitive to small changes in position. <p> Trace modulation's collection mechanism differs from the Berkeley Packet Filter in that it records device characteristics in addition to traffic information. While not strictly necessary for trace modulation, such a record of device behavior is invaluable for a better understanding of wireless networks <ref> [51] </ref>. The notion of reducing complex network observations to simple parameters through controlled workloads is commonly used in modelling physical channels. The technique used to determine bottleneck bandwidth two ECHO packets sent back-to-back is quite similar to the packet-pair approach used by Keshav [38]. <p> The second artifact is the trace modulation tool suite. It has been used for both the evaluation of Odyssey as well as measuring and modelling a wireless installation <ref> [51] </ref>. The tool can be used to provide either a purely synthetic testbed, or one that closely approximates a live wireless network. Using the tool is no more difficult than traditional, wired network experiments. It can potentially become a widely-used tool in the mobile systems community.
Reference: [52] <author> B. Noble, G. Nguyen, M. Satyanarayanan, and R. Katz. </author> <title> Mobile Network Tracing. Internet RFC 2041, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: Since the kernel buffer is limited in size, it may be overrun. In that case, the collection tool is careful to keep track of the number and type of lost records. Packet, device, and lost record information is collected in a trace format defined elsewhere <ref> [52] </ref>; the details are beyond the scope of this document. The format is designed for flexibility and extensibility, but is fully self-descriptive. Collection is controlled by a user-level daemon, which interacts with the kernel buffer through a pseudo-device, for which the kernel supports open, close, and read operations.
Reference: [53] <author> B. D. Noble, M. Price, and M. Satyanarayanan. </author> <title> A Programming Interface for Application-Aware Adaptation in Mobile Computing. </title> <booktitle> In Proceedings for the Second USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <address> Ann Arbor, Michigan, </address> <month> April </month> <year> 1995. </year> <note> Also as technical report CMU-CS-95-119, </note> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: The primary purpose of such code is to improve disk management. The use of wardens in Odyssey resembles this practice, but differs in that wardens support multiple fidelity levels. 8.2 Comparable Systems Since the first publication of Odyssey's philosophy and design <ref> [53, 69] </ref>, several other researchers have built systems providing some form of mobile data access.
Reference: [54] <author> B. D. Noble, M. Satyanarayanan, G. T. Nguyen, and R. H. Katz. </author> <title> Trace-Based Mobile Network Emulation. </title> <booktitle> In Proceedings of the 1997 ACM SIGCOMM Conference, </booktitle> <address> Canne, France, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Odyssey's design currently encompasses only a single value for bandwidth and latency between a client and a particular server, rather than different measures for inbound and outbound quality. Thus, Odyssey implicitly assumes that network performance is symmetric. The problem of asymmetry in networks, both mobile <ref> [7, 54] </ref> and wired [41], is a topic of recent interest. Despite this, the assumption of symmetry has proven adequate thus far. 3.3.3 Resource Requests: Expressing Expectations Applications do not need continuous knowledge of all resources.
Reference: [55] <author> J. K. Ousterhout. </author> <title> Why Threads are a Bad Idea (for most purposes). Invited talk, </title> <booktitle> 1996 USENIX Technical Conference, </booktitle> <month> January 25, </month> <year> 1996. </year> <note> As of this writing, slides for this talk are available at http://www.sunlabs.com/ ouster/. </note>
Reference-contexts: Of course, if the operating system itself supported threads, upcalls could be done away with. Since the application would already be party to the kernel's threading model, the Odyssey run-time library could spawn a thread meant only to handle resource notifications. However, it has been argued by Ousterhout <ref> [55] </ref> that simple event-handling mechanisms, such as upcalls, are preferable to threads when the full power of the latter is not necessary. Handling Upcalls To receive a particular upcall, a process must first declare its intention to handle it. This is done through the upcall reg system call.
Reference: [56] <author> S. K. Park and K. W. Miller. </author> <title> Random Number Generators: Good Ones are Hard to Find. </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> 31, </volume> <month> October </month> <year> 1988. </year>
Reference-contexts: The quantities V b ; V r ; F; and L are all from a network quality tuple, s 2 S. NetBSD, and is defined by the following recurrence relation <ref> [56] </ref>: x n+1 = (7 5 x n ) mod (2 31 1) (6.5) All packets contribute to the calculation of free, whether or not they are dropped.
Reference: [57] <author> M. Podlipec. </author> <title> The XAnim Home Page. At the time of this writing, the document is available only through the World Wide Web at http://xanim.va.pubnix.com/home.html. </title>
Reference-contexts: It then defines the fidelity and performance metrics, and the fidelity policy of the application. 5.2 Video Player: XAnim The first application to be added to Odyssey was XAnim, a video player whose source code is publicly available <ref> [57] </ref>. In its original form, XAnim reads a movie file from a local disk and plays it back to the screen, skipping late frames to maintain pace through the file; it was approximately 57 thousand lines of code in total.
Reference: [58] <author> S. Pope and P. Webster. </author> <title> QoS Support for Mobile Computing. </title> <booktitle> In Fifth IFIP International Workshop on Quality of Service, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Therefore, the real-time community has applied reservation techniques to the problem of mobile data access with two modifications <ref> [42, 58] </ref>. First, rather than reserving a particular quantity of a resource, they reserve a range; the underlying system transparently adapts within the range. Second, if the range is exceeded or the client moves, a renegotiation involving some or all of the end-to-end path is initiated.
Reference: [59] <author> G. J. Popek, R. G. Guy, T. W. Page, and J. S. Heidemann. </author> <title> Replication in Ficus Distributed File Systems. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <address> Houston, TX, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Since there may be many factors that make up the quality of a particular data item, fidelity has potentially many different dimensions. One dimension of fidelity that applies to all data items is consistency. Systems such as Coda, Ficus <ref> [59] </ref>, and Little Work [29] cope with mobility solely by relaxing the consistency of files in a file system. Bayou applies similar techniques to the very different consistency model of databases. <p> The threading and remote procedure call packages were taken from Coda without modification. The notion of trading file consistency for availability and performance was put forth by systems such as Coda and Ficus <ref> [59] </ref>. The Bayou project applied similar techniques to databases [77]. It was the recognition that consistency represented only a single dimension of the broader concept of fidelity that led to the design of Odyssey. Several systems served as the background to the taxonomy of adaptive systems.
Reference: [60] <institution> Qualcomm Inc., </institution> <address> San Diego, CA. </address> <publisher> Eudora Macintosh User Manual, </publisher> <year> 1993. </year>
Reference-contexts: Laissez-Faire Adaptation At the opposite end of the spectrum, applications are solely responsible for coping with the consequences of mobility. This approach, referred to as laissez-faire adaptation, has been taken by commercial software such as Eudora <ref> [60] </ref>. More recently, it has been pursued by research systems such as McCanne's RLM [44] and Cen's video player [31]. In such systems, applications monitor the availability of resources, and make their own adaptation decisions in isolation of other applications or the system. The laissez-faire approach provides two substantial benefits. <p> Mobi-saic [81], W4 [9], and Dynamic Documents [36] all cope with mobility within the context of a single application a web browser. Many similar stand-alone applications exist in the commercial marketplace, due to the inability to modify the operating system. These applications, such as the Eudora mail client <ref> [60] </ref>, have met with substantial success. Finally, toolkits such as Rover [34] and Fox's dynamic distillation infrastructure [24] also take an application-only approach to mobility. The key feature missing from all these systems, with the possible exception of Rover, is the centralized management of resources.
Reference: [61] <author> L. Rabiner and B.-H. Juang. </author> <title> Fundamentals of Speech Recognition. </title> <publisher> Prentice Hall Signal Processing Series. Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey 07632, </address> <year> 1993. </year> <editor> A. V. Oppenheim, Series Editor. </editor> <publisher> 150 BIBLIOGRAPHY </publisher>
Reference-contexts: This process is very expensive in both CPU cycles and virtual memory. Since the mobile host is relatively underpow-ered compared to a similarly-priced desktop workstation, it would be useful to offload this computation whenever possible. The recognition process has two interesting phases. The first is vector quantization <ref> [61] </ref>, a signal processing step that transforms the raw speech utterance into a much more compact representation. This phase is relatively inexpensive to compute. The second phase consists of the remainder of recognition, and comprises the bulk of the processing required in recognition. 78 CHAPTER 5.
Reference: [62] <author> D. Raggett. </author> <title> HTML 3.2 Reference Specification. Recommendation REC-html32, World Wide Web Consortium, </title> <month> January </month> <year> 1997. </year>
Reference-contexts: Netscape allows the retrieval and display of HTML <ref> [62] </ref>, a hypertext mark-up language. At the time of its adoption, the source for Netscape was not publicly available.
Reference: [63] <author> J. H. Saltzer, D. P. Reed, and D. D. Clark. </author> <title> End-To-End Arguments in System Design. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(4), </volume> <month> November </month> <year> 1984. </year>
Reference-contexts: Without some amount of central coordination, it is unlikely that these two video players can seamlessly coexist. Application-Aware Adaptation The middle ground between these two extremes is a collaborative effort between system and applications. The nature of this partnership is a consequence of end-to-end considerations <ref> [63] </ref>. The system is best positioned to know what is available to the mobile client. Thus, is responsible for monitoring resource availability, enforcing resource allocation decisions, and optimizing the use of client-wide resources. An individual application, how 2.3.
Reference: [64] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> In Usenix Conference Proceedings, </booktitle> <month> Summer </month> <year> 1985. </year>
Reference-contexts: It is designed to highlight any potential asymmetry in network performance, especially important given the assumption of network symmetry forced by the lack of synchronized clocks during trace collection, as discussed in Section 6.4.1. The third benchmark is the Andrew Benchmark [28] run on NFS <ref> [64] </ref>, a commonly-used network file system. Since NFS was not designed for a mobile environment, it makes no special attempt to defer or eliminate traffic on networks of low quality. The NFS cache is flushed before each trial of the experiment.
Reference: [65] <author> M. Satyanarayanan. </author> <title> RPC2 User Guide and Reference Manual. </title> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: It also handles connection creation, destruction, and automatic re-establishment of broken connections; it is called the connection manager. Connections are named by &lt;host, service, number&gt;, allowing multiple connections to the same service if necessary. They are based on RPC2 <ref> [65] </ref>, which provides 3.3. DETAILED DESIGN 29 both traditional remote procedure call as well as a sliding-window, selective-acknowledgement protocol for bulk transfer. All communication on behalf of Odyssey is expected to make use of the connection manager; without doing so, there is no single point of network control. <p> This has the advantage that shared-media models can be implemented. However, as with Probe/Fault Injection, this emulator uses only synthetic models. More broadly, the use of user-level libraries for network emulation is widespread. Examples include the Lancaster emulator, Delayline [30], and the slow mechanism of RPC2 <ref> [65] </ref>. While useful, such libraries have two shortcomings: they require recompilation or relinking of applications, and they only influence traffic to or from the instrumented applications, not the entire host. 8.4 Systems with Potential Contributions There are two systems that have invented techniques of some use to Odyssey.
Reference: [66] <author> M. Satyanarayanan. </author> <title> Mobile computing: Past, present, and future. </title> <booktitle> In Proceedings of the IBM Workshop on Mobile Computing, </booktitle> <address> Austin, TX, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: The client must react to decreased resource availability, and should take advantage of increases. Such reaction, adapting to changes in the supply of resources, is widely recognized as central to the support of mobile computing <ref> [19, 23, 66, 78, 85] </ref>. This notion of adaptation is defined in Section 2.3. 2.2 Demands on Mobile Clients The demands placed on a mobile client are a function of the applications run by that client.
Reference: [67] <author> M. Satyanarayanan, J. J. Kistler, P. Kumar, M. E. Okasaki, E. H. Siegel, and D. C. Steere. Coda: </author> <title> A Highly Available File System for a Distributed Workstation Environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4), </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: However, taking advantage of connectivity whenever possible is to the client's advantage. Both the commercial and research worlds have turned to this often-connected model for applications such as package tracking, the Coda File System <ref> [67] </ref>, and Bayou [77]. These systems use bandwidth when it is available, but can cope with disconnection when it is not. The overlay argument easily extends to mobile infrastructure in general. Consider printer availability. <p> Finally, Section 8.4 concludes with two systems that include techniques of possible use in Odyssey. 8.1 Design and Implementation Heritage Many systems have contributed to the design and construction of Odyssey. The largest such contribution is from Coda <ref> [39, 50, 67] </ref>, which first demonstrated that client resources could be used to insulate users and applications from the vagaries of mobile information access. As detailed in Chapters 3 and 4, many aspects of Odyssey including its implementation 131 132 CHAPTER 8.
Reference: [68] <author> M. Satyanarayanan, H. H. Mashburn, P. Kumar, D. C. Steere, and J. J. Kistler. </author> <title> Lightweight Recoverable Virtual Memory. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1):3357, </volume> <month> February </month> <year> 1994. </year> <title> Corrigendum: </title> <journal> May 1994, </journal> <volume> Vol. 12, No. 2, </volume> <pages> pp. 165-172. </pages>
Reference-contexts: The use of two numbers for object identification within a tome was inherited from AFS and Coda. These systems used vnode numbers for efficient object access by re-using slots in persistent data structures rather than resort to dynamic management of a persistent heap <ref> [68] </ref>. These systems also encoded semantic information in vnode numbers, using the low-order bit to distinguish between directories and leaf nodes. Operation Dispatch All operation requests forwarded from the interceptor are fielded by the viceroy.
Reference: [69] <author> M. Satyanarayanan, B. Noble, P. Kumar, and M. Price. </author> <title> Application-aware Adaptation for Mobile Computing. </title> <booktitle> In Proceedings of the 6th ACM SIGOPS European Workshop, </booktitle> <address> Dagstuhl, Germany, </address> <month> September </month> <year> 1994. </year> <note> Also as technical report CMU-CS-95-183, </note> <institution> School of Computer Science, Carnegie Mellon University, </institution> <note> and in Operating Systems Review, 29 (1), </note> <month> January </month> <year> 1995. </year>
Reference-contexts: The primary purpose of such code is to improve disk management. The use of wardens in Odyssey resembles this practice, but differs in that wardens support multiple fidelity levels. 8.2 Comparable Systems Since the first publication of Odyssey's philosophy and design <ref> [53, 69] </ref>, several other researchers have built systems providing some form of mobile data access.
Reference: [70] <author> S. Sheng, A. Chandrakasan, and R. Broderson. </author> <title> A Portable Multimedia Terminal. </title> <journal> IEEE Communications Magazine, </journal> <volume> 30(12):6476, </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: Mobile clients must be capable of operating disconnected, perhaps for extended periods of time. This eliminates systems that assume constant connectivity such as Wit [84] and the Infopad <ref> [70] </ref>. While such systems provide interesting in-building or campus-area solutions, they do not apply to wider use. Systems such as the Pilot [80] are designed to operate isolated almost exclusively, with only infrequent connection to a network. However, taking advantage of connectivity whenever possible is to the client's advantage.
Reference: [71] <author> B. Shneiderman. </author> <title> Designing the User Interface: Strategies for Effective Human-Computer Interaction. </title> <publisher> Addison-Wesley, </publisher> <year> 1998. </year> <note> third edition. </note>
Reference-contexts: hoc decomposition of functionality in the speech recognition application be generalized? Fourth, how can the construction of adaptive systems be brought from an ad hoc activity to a principled, engineering discipline? Studies have shown that variability in response time is an annoyance to users that can make tasks more difficult <ref> [71] </ref>. It is not difficult to imagine that large, frequent variations in quality would also be troubling. Thus, while very agile applications obtain the best possible quality within performance bounds, such instability is not clearly preferable. Furthermore, consider the case of two applications competing for scarce bandwidth.
Reference: [72] <author> R. Sidebotham. </author> <title> Volumes: The Andrew File System Data Structuring Primitive. </title> <booktitle> In European Unix User Group Conference Proceedings, </booktitle> <month> August </month> <year> 1986. </year> <note> Also available as Tech. Rep. </note> <institution> CMU-ITC-053, Carnegie Mellon University, Information Technology Center. </institution>
Reference-contexts: This global name space is mounted at the same point in each client's local name space. Such uniformity provides name portability across machines and users. This single, global name space is broken into subtrees called volumes <ref> [72] </ref>. A volume is a collection of files that are viewed as a unit for administrative purposes. It is the unit for which quotas are enforced, is stored on a single server, and is backed up or relocated as a unit.
Reference: [73] <author> A. Smailagic and D. P. Siewiorek. </author> <title> Modalities of Interaction with CMU Wearable Computers. </title> <journal> IEEE Personal Communications, </journal> <volume> 3(1), </volume> <month> February </month> <year> 1996. </year>
Reference-contexts: Despite the fact that Janus is not strictly a data access application, it presents both considerable potential as well as challenge for mobile systems. It is especially useful when mobile since it leaves the user's eyes and hands free for other activities <ref> [73] </ref>. However, the resource requirements for high-accuracy speech recognition are substantial, especially when mobile, since background noise is often high.
Reference: [74] <author> D. C. Steere. </author> <title> Using Dynamic Sets to Reduce the Aggregate Latency of Data Access. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1996. </year> <note> BIBLIOGRAPHY 151 </note>
Reference-contexts: The 96 CHAPTER 6. EVALUATION METHODOLOGY benchmark performance over live and modulated networks is compared in Section 6.5.3 to see how faithfully the latter reproduced the former. 6.5.1 Benchmarks The first benchmark involves a World Wide-Web browsing workload <ref> [74] </ref>. In this benchmark, Web reference traces of five users performing search tasks are replayed as fast as possible on a modified Mosaic v2.6 browser.
Reference: [75] <author> D. C. Steere. </author> <title> Exploiting Non-Determinism in Set Iterators to Reduce I/O Latency. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating System Principles, </booktitle> <address> St. Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: One compelling use of the ability to decide between function and data shipping is the searching of distributed repositories. Search tasks exhibit little or no temporal locality, rendering caching ineffective in compensating for a lack of bandwidth. One could address this problem by combining the power of dynamic sets <ref> [75] </ref> with dynamic function vs. data shipping decisions. Finally, the current state of the art in building adaptive software systems is a black art. Developing systematic principles for their design, as well as techniques for analyzing their agility and stability before they are built, would be valuable.
Reference: [76] <author> D. C. Steere, J. J. Kistler, and M. Satyanarayanan. </author> <title> Efficient User-Level File Cache Management on the Sun Vnode Interface. </title> <booktitle> In Summer Usenix Conference Proceedings, </booktitle> <address> Anaheim, CA, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: The in-kernel interceptor forwards Odyssey requests to the viceroy, and also implements the extensions to the system call interface. It was ported from the Coda Mini 4.4. BASIC COMPONENTS 43 Cache <ref> [76] </ref>, which was twelve thousand lines of code. In this port, approximately four thousand lines were removed; other than changing the names of routines and structures, approximately one thousand lines of code were added or changed. <p> If it is not found, the interceptor forwards the request to the viceroy, and enters the newly-discovered onode into the cache. Since UNIX processes show a high degree of pathname locality, the cache can eliminate most of the name translation overhead <ref> [76] </ref>. Once an onode is in the cache, attribute and symbolic link information also can be filled in. On receiving either a getattr or readlink operation, the interceptor first checks 4.5. VICEROY 49 the cached onode for the information.
Reference: [77] <author> D. B. Terry, M. M. Theimer, K. Petersen, and A. J. Demers. </author> <title> Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating System Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: However, taking advantage of connectivity whenever possible is to the client's advantage. Both the commercial and research worlds have turned to this often-connected model for applications such as package tracking, the Coda File System [67], and Bayou <ref> [77] </ref>. These systems use bandwidth when it is available, but can cope with disconnection when it is not. The overlay argument easily extends to mobile infrastructure in general. Consider printer availability. <p> The threading and remote procedure call packages were taken from Coda without modification. The notion of trading file consistency for availability and performance was put forth by systems such as Coda and Ficus [59]. The Bayou project applied similar techniques to databases <ref> [77] </ref>. It was the recognition that consistency represented only a single dimension of the broader concept of fidelity that led to the design of Odyssey. Several systems served as the background to the taxonomy of adaptive systems.
Reference: [78] <author> M. Theimer, A. Demers, and B. Welch. </author> <title> Operating System Issues for PDAs. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems. IEEE, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: The client must react to decreased resource availability, and should take advantage of increases. Such reaction, adapting to changes in the supply of resources, is widely recognized as central to the support of mobile computing <ref> [19, 23, 66, 78, 85] </ref>. This notion of adaptation is defined in Section 2.3. 2.2 Demands on Mobile Clients The demands placed on a mobile client are a function of the applications run by that client.
Reference: [79] <author> T. E. Truman and R. W. Broderson. </author> <title> A Measurement-based Characterization of the Time Variation of an Indoor Wireless Channel. </title> <booktitle> In IEEE International Conference on Universal Personal Communications, </booktitle> <address> San Diego, CA, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Even if the relevant region's wireless spectrum could be isolated from interference from other devices, obtaining predictable, reproducible results remains a challenge. Wireless propagation is affected by environmental factors that are both spatially [51] and temporally <ref> [79] </ref> dependent; small changes in the path taken through an area of wireless coverage can have large impacts on performance. For example, multipath effects are extremely sensitive to small changes in position.
Reference: [80] <institution> U.S. Robotics, Inc., </institution> <address> Los Altos, CA. </address> <note> Pilot Handbook, </note> <year> 1996. </year> <title> Part Number 423-0001. </title>
Reference-contexts: This eliminates systems that assume constant connectivity such as Wit [84] and the Infopad [70]. While such systems provide interesting in-building or campus-area solutions, they do not apply to wider use. Systems such as the Pilot <ref> [80] </ref> are designed to operate isolated almost exclusively, with only infrequent connection to a network. However, taking advantage of connectivity whenever possible is to the client's advantage.
Reference: [81] <author> G. M. Voelker and B. N. Bershad. Mobisaic: </author> <title> An Information System for a Mobile Wireless Computing Environment. </title> <booktitle> In Proceedings of the IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The Bayou project applied similar techniques to databases [77]. It was the recognition that consistency represented only a single dimension of the broader concept of fidelity that led to the design of Odyssey. Several systems served as the background to the taxonomy of adaptive systems. Mobi-saic <ref> [81] </ref>, W4 [9], and Dynamic Documents [36] all cope with mobility within the context of a single application a web browser. Many similar stand-alone applications exist in the commercial marketplace, due to the inability to modify the operating system.
Reference: [82] <author> A. Waibel. </author> <title> Interactive Translation of Conversational Speech. </title> <journal> IEEE Computer, </journal> <volume> 29(7), </volume> <month> July </month> <year> 1996. </year>
Reference-contexts: As the bandwidth between the warden and distillation server changes, the cellophane adjusts the distillation level of images served. 5.4 Speech Recognizer: Janus The final application modified to take advantage of Odyssey is Janus <ref> [82] </ref>, a speech recognition system. Janus takes as input a raw, sampled speech utterance collected from a microphone, and returns the words it recognizes in the utterance. This process is very expensive in both CPU cycles and virtual memory.
Reference: [83] <author> G. K. Wallace. </author> <title> The JPEG Still Picture Compression Standard. </title> <journal> Communications of the ACM, </journal> <volume> 34(4), </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: Conversely, lower-quality frames are discarded and the requested higher-quality ones are fetched on demand. 5.2.2 Metrics and Policy In the experiments reported in Chapter 7, each movie has three tracks. These three versions are: JPEG-compressed <ref> [83] </ref> color at quality 99, JPEG-compressed color at quality 50, and black-and-white. Each track is encoded at ten frames per second. The overhead for this extra storage is modest: typically 60% more space than storing only the highest-fidelity track.
Reference: [84] <author> T. Watson. </author> <title> Effective Wireless Communication through Application Partitioning. </title> <booktitle> In Proceedings of the Fifth IEEE Hot Topics in Operating Systems Workshop, </booktitle> <address> Orcas Island, WA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Mobile clients must be capable of operating disconnected, perhaps for extended periods of time. This eliminates systems that assume constant connectivity such as Wit <ref> [84] </ref> and the Infopad [70]. While such systems provide interesting in-building or campus-area solutions, they do not apply to wider use. Systems such as the Pilot [80] are designed to operate isolated almost exclusively, with only infrequent connection to a network.
Reference: [85] <author> M. Weiser. </author> <title> Some Computer Science Issues in Ubiquitous Computing. </title> <booktitle> Communictions of the ACM, </booktitle> <address> 36(7):7584, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: The client must react to decreased resource availability, and should take advantage of increases. Such reaction, adapting to changes in the supply of resources, is widely recognized as central to the support of mobile computing <ref> [19, 23, 66, 78, 85] </ref>. This notion of adaptation is defined in Section 2.3. 2.2 Demands on Mobile Clients The demands placed on a mobile client are a function of the applications run by that client.
Reference: [86] <author> G. Welling and B. R. Badrinath. </author> <title> A Framework for Environment Aware Mobile Applications. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <address> Baltimore, MD, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: EVALUATION METHODOLOGY 135 handler. The authors claim that such adaptation blocks simplify the construction of adaptive applications compared to Odyssey. At present, the Prayer implementation is a user-level prototype; the authors have not yet presented its evaluation. In <ref> [86] </ref>, Welling also starts with the collaborative approach inherent in application-aware adaptation. The main focus of this work is on the notification subsystem, a more general form of Odyssey's upcalls. In it, different events may be delivered with different policies, and these are separate from the mechanism of event delivery.
References-found: 86

