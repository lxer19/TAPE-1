URL: http://www.cs.purdue.edu/research/PaCS/ps/wsc94.ps
Refering-URL: http://www.cs.purdue.edu/research/PaCS/eclipse.html
Root-URL: http://www.cs.purdue.edu
Title: AN INTRODUCTION TO FAULT TOLERANT PARALLEL SIMULATION WITH EcliPSe  
Author: Felipe Knop V. S. Sunderam Edward Mascarenhas Vernon Rego 
Address: Atlanta, Georgia 30322, U.S.A.  West Lafayette, Indiana 47907, U.S.A.  
Affiliation: Department of Math and Computer Science Emory University Department of Computer Sciences  Purdue University  
Abstract: This paper presents an overview of the ACES parallel software system and, in particular, an introduction to the EcliPSe layer of the system. The ACES system is a fault-tolerant, layered software system for heterogeneous-network based cluster computing. The EcliPSe toolkit, which resides on an upper layer, was constructed specifically for replication-based and domain-decomposition based simulation applications. It is not, however, restricted to simulations and supports any message-passing form of parallel processing. By taking advantage of networks of heterogeneous machines, generally idle workstations, EcliPSe programs can achieve supercomputer level performance with little programming effort that is, low programming effort was a motivating factor in EcliPSe's design. We present an overview of key application-level features in EcliPSe, support for fault-tolerant simulation, and performance results for three simple but large scale and representative experiments. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Biles, B., D. Daniels, and T. O'Donnell. </author> <year> 1985. </year> <title> Statistical considerations in simulation on a network of microcomputers. </title> <booktitle> In Proceedings of the Winter Simulation Conference, </booktitle> <pages> 388-393. </pages>
Reference-contexts: An alternate but complementary approach to model distribution is model replication, which is the approach adopted by the EcliPSe toolkit. This fact was already recognized by simulation researchers investigating the statistical consequences of parallel sampling (e.g., see <ref> (Biles et al 1985) </ref> and (Heidelberger 1988)). Instead of distributing a single model over a number (say n) of processors, n replications of the same model are made to run on the n distinct processors.
Reference: <author> Chung, K., J. Sang, and V. Rego. </author> <year> 1993. </year> <title> Sol-es: An object-oriented platform for event-scheduled simulations. </title> <booktitle> In Proceedings of The Summer Simulation Conference. </booktitle>
Reference-contexts: The Sol (Simulation Object Library) system, which is resident at the uppermost layer, is a C++ based library that facilitates the construction of simulation models and other parallel applications in a variety of domains <ref> (Chung, Sang, and Rego 1993) </ref>. The remainder of the paper is focused on the EcliPSe layer, which is responsible for providing the base for efficient fault-tolerant simulations.
Reference: <author> Fujimoto, R. M. </author> <year> 1990. </year> <title> Optimistic approaches to parallel discrete event simulation. </title> <journal> Transactions of the society for computer simulation, </journal> <volume> 7(2) </volume> <pages> 153-191. </pages>
Reference-contexts: Considerable atten tion has been given to distributing a model over a number of processors in order to speed up the generation of a single sample path, in particular for discrete-event simulation. Examples of this approach include the conservative (Misra 1986) and the optimistic <ref> (Fujimoto 1990) </ref> protocols of distributed simulation. In addition to the complexities of application-level and system-level software development for distributed simulation, performance is often adversely affected by synchronization overheads intrinsic to distributed systems.
Reference: <author> Heidelberger, P. </author> <year> 1988. </year> <title> Discrete event simulations and parallel processing: statistical properties. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 9 </volume> <pages> 1114-1132. </pages>
Reference-contexts: An alternate but complementary approach to model distribution is model replication, which is the approach adopted by the EcliPSe toolkit. This fact was already recognized by simulation researchers investigating the statistical consequences of parallel sampling (e.g., see (Biles et al 1985) and <ref> (Heidelberger 1988) </ref>). Instead of distributing a single model over a number (say n) of processors, n replications of the same model are made to run on the n distinct processors.
Reference: <author> Knop, F., V. Rego, and V. Sunderam. </author> <year> 1994a. </year> <title> EcliPSe: A system for fault-tolerant replicative computations. </title> <booktitle> In Proceedings of the IEEE/USP International Symposium on High-Performance Computing. </booktitle>
Reference-contexts: The details of how this is accomplished are presented in (Knop, Rego, and Sunderam 1994b). 4 PERFORMANCE MEASUREMENT EcliPSe applications support a variety of computation structures (see <ref> (Knop, Rego, and Sunderam 1994a) </ref>) and execute on a number of machine environments. Bottlenecks in a distributed application, however, may impair execution performance, resulting in a waste of computational resources.
Reference: <author> Knop, F., V. Rego, and V. Sunderam. </author> <year> 1994b. </year> <title> Failure-resilient computations in the EcliPSe system. </title> <booktitle> To appear in Proceedings of the International Conference on Parallel Processing. </booktitle>
Reference-contexts: By taking advantage of the application's structure, EcliPSe programs can often achieve an almost negligible checkpoint overhead, which in turn drastically reduces the fault tolerance performance penalty. The details of how this is accomplished are presented in <ref> (Knop, Rego, and Sunderam 1994b) </ref>. 4 PERFORMANCE MEASUREMENT EcliPSe applications support a variety of computation structures (see (Knop, Rego, and Sunderam 1994a)) and execute on a number of machine environments. Bottlenecks in a distributed application, however, may impair execution performance, resulting in a waste of computational resources.
Reference: <author> Knop, F., E. Mascarenhas, V. Rego, and V. Sunderam. </author> <year> 1994. </year> <title> Fail-safe concurrent simulation with EcliPSe: an introduction. </title> <note> Submitted for publication. </note>
Reference-contexts: Figure 3 shows an example of a histogram plotted for the CPU occupation-level of an M/GI/1 queue application utilizing eight samplers and one monitor (node # 0). More details about the performance tool can be found in <ref> (Knop et al. 1994) </ref>. 5 EXPERIMENTS To give the user an idea of EcliPSe's performance on easily understandable examples, we present the results of a few experiments.
Reference: <author> Mascarenhas, E., et al. </author> <year> 1994. </year> <title> GenA: A Gui for Generation of ACES Applications. </title> <type> Technical report, </type> <institution> Purdue University (in preparation). </institution>
Reference-contexts: Such programs are fairly easy to understand and modify, and perform very well in a multi-machine run. This indicates the effectiveness of EcliPSe in speeding up the execution of model replication applications. Working with EcliPSe also gives us a feel for possible improvements. A graphical tool is being designed <ref> (Mascarenhas et al 1994) </ref> to allow the user to specify the monitor in a high level manner, with the entire monitor function produced automatically. Also, our experiences and empirical results with EcliPSe indicate that automating the virtual machine configuration procedure may result in improved application performance.
Reference: <author> Misra, J. </author> <year> 1986. </year> <title> Distributed discrete-event simulation. </title> <journal> Computing surveys, </journal> <volume> 18(1) </volume> <pages> 39-65. </pages>
Reference-contexts: Considerable atten tion has been given to distributing a model over a number of processors in order to speed up the generation of a single sample path, in particular for discrete-event simulation. Examples of this approach include the conservative <ref> (Misra 1986) </ref> and the optimistic (Fujimoto 1990) protocols of distributed simulation. In addition to the complexities of application-level and system-level software development for distributed simulation, performance is often adversely affected by synchronization overheads intrinsic to distributed systems.
Reference: <author> Nakanishi, H., V. Rego, and V. Sunderam. </author> <year> 1992. </year> <title> Super-concurrent simulation of polymer chains on heterogeneous networks. 1992 Gordon Bell Prize Paper, </title> <booktitle> Proceedings of the Fifth High-Performance Computing and Communications Conference: Supercomputing '92. </booktitle>
Reference-contexts: Indeed, an early prototype demonstrated prize-winning performance in the investigation of universal constants in a polymer physics application which executed on a countrywide network of 192 processors <ref> (Nakanishi, Rego, and Sunderam 1992) </ref>. Simulation is known to be computationally intensive, with typical applications often executing for hours or days on fast scalar supercomputers. To reduce execution times, researchers have suggested various techniques for multiprocessor-based simulation.
Reference: <author> Rego, V. J., and V. S. Sunderam. </author> <year> 1992. </year> <title> Experiments in concurrent stochastic simulation: the EcliPSe paradigm. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 14(1) </volume> <pages> 66-84. </pages>
Reference-contexts: Indeed, an early prototype demonstrated prize-winning performance in the investigation of universal constants in a polymer physics application which executed on a countrywide network of 192 processors <ref> (Nakanishi, Rego, and Sunderam 1992) </ref>. Simulation is known to be computationally intensive, with typical applications often executing for hours or days on fast scalar supercomputers. To reduce execution times, researchers have suggested various techniques for multiprocessor-based simulation. <p> The remainder of the paper is focused on the EcliPSe layer, which is responsible for providing the base for efficient fault-tolerant simulations. The present version of EcliPSe is a robust and re-engineered version of prototype presented in <ref> (Rego and Sunderam 1992) </ref> and (Sunderam and Rego 1991), and has already been used in production applications, such as the work described in (Rin-toul, Moon, and Nakanishi 1994). Section 2 presents an overview of EcliPSe, highlighting the main features. <p> Based on batch-means, the statistics sent to the monitor include mean system delay and maximum number of customers found in the queue. The regenerative method may also be used (as was done in <ref> (Rego and Sun-deram 1992) </ref>) to estimate these quantities. The monitor utilizes results from independent parallel replications to build a confidence interval for both statistics. Though times between the reporting of samples can be large, the monitor may be overworked if a large number of processes is used.
Reference: <author> Rintoul, M. D., J. Moon, and H. Nakanishi. </author> <year> 1994. </year> <title> Statistics of self-avoiding walks on randomly diluted lattice. </title> <note> (to appear) Phys. Rev. E. </note>
Reference: <author> Sunderam, V. S., and V. J. Rego. </author> <year> 1991. </year> <title> EcliPSe: A system for high performance concurrent simulation. </title> <journal> Software-Practice and Experience, </journal> <volume> 21(11) </volume> <pages> 1189-1219. </pages>
Reference-contexts: 1 INTRODUCTION The EcliPSe software system was originally designed to support straightforward and semi-automatic concurrent execution of stochastic simulation applications in a variety of parallel and distributed environments <ref> (Sunderam and Rego 1991) </ref>. Since its inception, EcliPSe has been successful in demonstrating the practical viability of executing replication-based or domain-decomposition based simulations on heterogeneous networks of processors. <p> The remainder of the paper is focused on the EcliPSe layer, which is responsible for providing the base for efficient fault-tolerant simulations. The present version of EcliPSe is a robust and re-engineered version of prototype presented in (Rego and Sunderam 1992) and <ref> (Sunderam and Rego 1991) </ref>, and has already been used in production applications, such as the work described in (Rin-toul, Moon, and Nakanishi 1994). Section 2 presents an overview of EcliPSe, highlighting the main features.

Reference: <author> V. S. SUNDERAM, </author> <type> Ph.D., </type> <institution> University of Kent, </institution> <year> 1986, </year> <title> is an Associate Professor in the Dept. of Math. and CS at Emory University, Atlanta. His research interests include parallel processing paradigms, specifications and tools, heterogeneous distributed systems, communication protocols and simulation. He was awarded the 1992 Gordon Bell Prize for parallel processing. </title>
References-found: 14

