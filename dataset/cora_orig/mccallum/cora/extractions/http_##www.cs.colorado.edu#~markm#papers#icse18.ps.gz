URL: http://www.cs.colorado.edu/~markm/papers/icse18.ps.gz
Refering-URL: http://www.cs.colorado.edu/~markm/listpub.html
Root-URL: http://www.cs.colorado.edu
Title: Multilanguage Interoperability in Distributed Systems: Experience Report  
Author: Mark J. Maybee Dennis M. Heimbigner Leon J. Osterweil 
Address: Boulder, CO 80309-0430 Amherst, MA 01003-4610  
Affiliation: Department of Computer Science Department of Computer Science University of Colorado University of Massachusetts  
Abstract: The Q system provides interoperability support for multilingual, heterogeneous component-based software systems. Initial development of Q began in 1988, and was driven by the very pragmatic need for a communication mechanism between a client program written in Ada and a server written in C. The initial design was driven by language features present in C, but not in Ada, or vice-versa. In time our needs and aspirations grew and Q evolved to support other languages, such as C++, Lisp, Prolog, Java, and Tcl. As a result of pervasive usage by the Arcadia SDE research project, usage levels and modes of the Q system grew and so more emphasis was placed upon portability, reliability, and performance. In that context we identified specific ways in which programming language support systems can directly impede effective interoperability. This necessitated extensive changes to both our conceptual model and our implementation of the Q system. We also discovered the need to support modes of interoperability far more complex than the usual client-server. The continued evolution of Q has allowed the architecture of Arcadia software to become highly distributed and component-based, exploiting components written in a variety of languages. In addition to becoming an Arcadia project mainstay, Q has also been made available to over 100 other sites, and it is currently in use in a variety of other projects. This paper summarizes key points that have been learned from this considerable base of experience. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Open Software Foundation. </author> <title> OSF DCE Application Development Guide. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <note> Revision 1.0. </note>
Reference-contexts: As Arcadia grows so too will Q: modern software architectures appear to be more and more like the Arcadia environment. This trend implies uses for Q beyond the Software Development Environment arena which spawned it. 6 Related Work 6.1 DCE The Distributed Computing Environment <ref> [1] </ref> is an integrated set of services designed to support distributed applications. These services include Remote Procedure Call, Directory Service, Time Service, Security Service, and Threads Service. The remote procedure call services were developed specifically to provide simplicity, performance, portability, and platform independence.
Reference: [2] <author> Dennis Heimbigner. </author> <title> The arctic reference manual. </title> <type> Technical Report CU-ARCADIA-106-94, </type> <institution> University of Colorado Arcadia Project, Boulder, </institution> <address> CO 80309-0430, </address> <note> Revised 25 December 1994. Version 0.1. </note>
Reference-contexts: These are mostly based upon the version 1.2 definition of the standard, but all are evolving to support the new standard. Q, in fact, can use an alternative implementation of Arpc, named Arctic <ref> [2] </ref>, to provide it with CORBA 2.0 compatibility. Like DCE, CORBA is based on an RPC model of interoperability. Like other RPC mechanisms, this provides support for platform-independent interoperability. CORBA also provides what is claimed to be a target language neutral interface definition language (IDL).
Reference: [3] <author> Dennis Heimbigner. ARPC: </author> <title> An augmented remote procedure call system. </title> <type> Technical Report CU-ARCADIA-100-94, </type> <institution> University of Colorado Arcadia Project, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: The resulting behavior was unpredictable, and usually erroneous. What was required was an IO multiplexing capability to resolve multiple requests for IO availability into a single select call. To facilitate this the ONC/RPC infrastructure was re-engineered and extended to produce the Augmented Remote Procedure Call (Arpc) interface <ref> [3] </ref>. Among other things, the new infrastructure exposed a message passing interface for client/server interactions. Where previously a client made a single call to clnt call, now the client took two steps: message send followed by message receive.
Reference: [4] <author> Dennis Heimbigner. </author> <title> Why CORBA Doesn't Cut It or Experiences with Distributed Objects. </title> <type> Technical Report CU-ARCADIA-108-95, </type> <institution> University of Colorado Arcadia Project, Boulder, </institution> <address> CO 80309-0430, </address> <month> 30 June </month> <year> 1995. </year> <month> ftp://ftp.cs.colorado.edu/pub/cs/techreports/arcadia/Misc/sett.ps.Z. </month>
Reference-contexts: CORBA (and technically, DCE) does not support direct marshaling of such pre-defined types. Instead, one is required to define a duplicate type system in IDL and translate at run-time between the pre-defined types and the IDL types. The CORBA type system suffers from other deficiencies (See <ref> [4] </ref> for more detailed discussions). The CORBA model is object-oriented. Its interface definition language closely resembles C++. Q, on the other hand, is derived from the ONC model which predates the distributed object approach. But Q can closely approximate an object-oriented view by mapping server interfaces to class interfaces.
Reference: [5] <author> M. Herlihy and B. H. Liskov. </author> <title> A value transmission method for abstract data types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(4) </volume> <pages> 527-551, </pages> <month> October </month> <year> 1982. </year>
Reference-contexts: This lack of flexibility/portability and the sparse usage of Mach make Matchmaker unsuitable as a solution to the interoperability needs of most contemporary software development environments. 6.5 Mercury The work done at MIT on a value transmission method for abstract data types <ref> [10, 5] </ref> was designed to support communicating abstract data types that are interoperable between regions of a system using different data value representations. This method defines call-by-value semantics for communicating values over a network of different computers. A canonical representation for each type used in communications is defined.
Reference: [6] <author> Michael B. Jones and Richard F. Rashid. </author> <title> Mach and matchmaker: Kernel and language support for object-oriented distributed systems. </title> <type> Technical Report CMU-CS-87-150, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1986. </year>
Reference-contexts: It is fair to say that this means that COM will have the same merits and demerits as DCE. 6.4 Matchmaker When supported by the capability-based inter-process communications found in the Mach kernel, Matchmaker <ref> [6] </ref> provides a heterogeneous, distributed, object-oriented programming facility. Currently the Mach/Matchmaker system supports the generation of interfaces between C, Common Lisp, Ada, and Pas-cal. The Matchmaker language defines the type model within which the supported languages may exchange data objects.
Reference: [7] <author> R. Kadia. </author> <title> Issues encountered in building a flexible software development environment: Lessons learned from the Arcadia project. </title> <booktitle> In Proceedings of ACM SIGSOFT '92: Fifth Symposium on Software Development Environments, </booktitle> <address> Tyson's Corner, Virginia, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: Distribution also facilitates this. 1.1 Motivation for Q Q has evolved over a period of years to provide the infrastructure for distributed objects within the Arcadia environment project <ref> [8, 7] </ref>. That evolution was driven by a cycle involving experience with Q leading to a crisis in handling some important problem, fol lowed by extending and modifying Q to address the problem successfully.
Reference: [8] <author> R. Kadia. </author> <title> Lessons learned from the Arcadia project. </title> <booktitle> In DARPA Software Technology Conference, </booktitle> <address> Los Angeles, California, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Distribution also facilitates this. 1.1 Motivation for Q Q has evolved over a period of years to provide the infrastructure for distributed objects within the Arcadia environment project <ref> [8, 7] </ref>. That evolution was driven by a cycle involving experience with Q leading to a crisis in handling some important problem, fol lowed by extending and modifying Q to address the problem successfully.
Reference: [9] <author> Rudolf K. Keller, Mary Cameron, Richard N. Taylor, and Dennis B. Troup. </author> <title> User interface development and software environments: </title> <booktitle> The Chiron-1 system. In Proceedings of the Thirteenth International Conference on Software Engineering, </booktitle> <pages> pages 208-218, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: The first behavior was demonstrated in the GEM implementation discussed above. The second type of behavior is frequent in user interface applications, where it is desirable that the interface remain responsive even while engaged in lengthy service operations. 3.3 Experience with Version 2 Chiron <ref> [9] </ref> is a user interface development system (UIDS) supporting the user interface needs of the Arcadia environment. It emphasizes the value of separating the application from the graphical user interface (GUI) by means of a client/server split. Figure 6 depicts the Chiron architecture for achieving this separation.
Reference: [10] <author> B. H. Liskov, T. Bloom, D. Gifford, R. Scheifler, and W. Weihl. </author> <title> Communication in the mercury system. </title> <booktitle> In Proceedings of the 21st Annual Hawaii Conference on System Sciences, </booktitle> <pages> pages 178-187. </pages> <publisher> IEEE, </publisher> <month> January </month> <year> 1988. </year>
Reference-contexts: This lack of flexibility/portability and the sparse usage of Mach make Matchmaker unsuitable as a solution to the interoperability needs of most contemporary software development environments. 6.5 Mercury The work done at MIT on a value transmission method for abstract data types <ref> [10, 5] </ref> was designed to support communicating abstract data types that are interoperable between regions of a system using different data value representations. This method defines call-by-value semantics for communicating values over a network of different computers. A canonical representation for each type used in communications is defined.
Reference: [11] <author> Microsoft/Object Management Group. </author> <title> Draft Component Object Model Specification, </title> <month> 6 March </month> <year> 1995. </year>
Reference-contexts: The C++ and Java language bindings provide just such a mapping. The naming support in Q remains somewhat clumsy, however, since this support is limited by the services provided the standard ONC name server (the portmapper). 6.3 OLE Microsoft's COM/OLE <ref> [11] </ref> has grown over time to provide support for distributed objects. Strictly speaking, COM (component object model) is the lowest layer in OLE, but is the part that is most analogous to Q, CORBA, and DCE.
Reference: [12] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <month> 29 December </month> <year> 1993. </year>
Reference-contexts: As a result, it is difficult to rehost DCE onto platforms with different thread models, and even more difficult to embed DCE into languages like Ada that provide a significantly different model of concurrency. 6.2 CORBA CORBA <ref> [12] </ref> is an evolving application interoperability standard. The newest version, 2.0, was released in late 1994. As an evolving standard it is a moving target. There are a number of systems which claim to comply with this standard (e.g., DSOM, Orbix tm , ORBeline tm , etc.).
Reference: [13] <author> Object Management Group. </author> <title> The Common Object Services Specification, Volume I, </title> <month> 1 March </month> <year> 1994. </year>
Reference-contexts: Instead they simply emit messages based upon internal events which might be of interest to others and receive messages for events which they have registered an interest in. It should be noted that event broadcast services can be constructed from RPC services <ref> [13] </ref>. 7 Future Directions While the Arcadia environment is composed of autonomous components, there are a number of interdependencies implicit in the interoperation of those components.
Reference: [14] <author> John K. Ousterhout. </author> <title> An Introduction to Tcl and Tk. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: Feedback continues to be quite positive, however there is ever increasing demand for more supported platforms and languages. Recent interest in the Tcl/Tk <ref> [14] </ref> and Java [18] languages spurred efforts to provide Q interfaces for these languages. In the space of a few weeks interfaces for both of these languages were constructed and tested. Support for Tcl/Tk was challenging because the language already provides IO event management services.
Reference: [15] <author> Steven. P. Reiss. </author> <title> Connecting tools using message passing in the field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Typical examples of BMSs are FIELD <ref> [15] </ref>, and Sun Microsystems' ToolTalk tm . The principal idea behind a BMS is to allow existing tools, third party tools, and newly developed tools to cooperate. The component model is a tool rather than a server, and the communication mechanism is message broadcasts rather than RPC.
Reference: [16] <author> Sun Microsystems. XDR: </author> <title> External data representation standard. </title> <type> Technical Report RFC-1014, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: the development of Q need to be duplicated in CORBA to shape its future if it is to also be successful in meeting these same needs. 2 Q Version 1 For largely pragmatic reasons the Open Network Computing (ONC) specifications for Remote Procedure Call (RPC) and External Data Representation (XDR) <ref> [17, 16] </ref> were chosen in 1988 as a basis for the construction of our language-heterogeneous interoperability mechanism. The then newly available, version 4.0 release of RPC/XDR from Sun Microsys-tems was a public domain implementation that included the source code. This made modifications easy.
Reference: [17] <author> Sun Microsystems. </author> <title> RPC: Remote procedure call protocol specification. </title> <type> Technical Report RFC-1057, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: the development of Q need to be duplicated in CORBA to shape its future if it is to also be successful in meeting these same needs. 2 Q Version 1 For largely pragmatic reasons the Open Network Computing (ONC) specifications for Remote Procedure Call (RPC) and External Data Representation (XDR) <ref> [17, 16] </ref> were chosen in 1988 as a basis for the construction of our language-heterogeneous interoperability mechanism. The then newly available, version 4.0 release of RPC/XDR from Sun Microsys-tems was a public domain implementation that included the source code. This made modifications easy.
Reference: [18] <author> Sun Microsystems Computer Corporation. </author> <title> The Java Language Specification, </title> <month> 11 May </month> <year> 1995. </year>
Reference-contexts: Feedback continues to be quite positive, however there is ever increasing demand for more supported platforms and languages. Recent interest in the Tcl/Tk [14] and Java <ref> [18] </ref> languages spurred efforts to provide Q interfaces for these languages. In the space of a few weeks interfaces for both of these languages were constructed and tested. Support for Tcl/Tk was challenging because the language already provides IO event management services.
Reference: [19] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. </author> <title> Language constructs for managing change in process-centered environments. </title> <booktitle> In Proceedings of ACM SIGSOFT '90: Fourth Symposium on Software Development Environments, </booktitle> <pages> pages 206-217, </pages> <address> Irvine, CA, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Note that while this approach provides the ability to marshal arbitrarily complex type structures, it does not provide any support for conveying the semantics associated with them. 2.3 Experience with Version 1 APPL/A <ref> [19] </ref> is a software-process programming language designed as an extension of the Ada programming language. It adds constructs to the Ada language designed to support change management in process-centered environments. APPL/A's extensions to Ada include persistent relations, triggers, enforcible predicates, and transactions.
Reference: [20] <institution> United States Department of Defense. </institution> <note> Refer--ence Manual for the Ada Programming Language, 1983. ANSI/MIL-STD-1815A-1983. </note>
Reference-contexts: Floating point is signed 64 bit value whose precise representation is defined in the IEEE standard on floating point numbers. Fixed point is a 32 bit value whose precise representation is defined in the Ada language reference manual <ref> [20] </ref>. Enumeration is technically a type constructor, but is represented as an integer denoting the position of the data value in the enumeration set. Boolean is an enumeration type. False is represented as the integer 0 and True is represented as the integer 1.
References-found: 20

