URL: http://ptolemy.eecs.berkeley.edu/papers/97/tcltk-97/tcltk97.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/97/tcltk-97/
Root-URL: 
Email: fcxh,eal,johnrg@eecs.berkeley.edu  
Title: The Tycho User Interface System  
Author: Christopher Hylands, Edward A. Lee, H. John Reekie 
Address: Berkeley CA 94720  
Affiliation: School of Electrical Engineering and Computer Sciences University of California Berkeley  
Abstract: Tycho is the next-generation user-interface system we are building for the Ptolemy project. It is a complete [incr Tcl] application structured as an extensible class library. Our goal is to make it easy to extend this basic application with functionality and a user interface for specialized applications such as electronic design and simulation. The Ty-cho library includes a selection of general-purpose widgets, syntax-sensitive text editors, and graphical editing support. It incorporates architectural features that make it easy for different editors and viewers to share data and screen space. Finally, structured support for incorporating C and Java packages into this framework allows us to use those languages to complement the scripting and user-interface features of Tcl/Tk. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Joseph T. Buck, Soonhoi Ha, Edward A. Lee, and David. G. Messerschmitt. Ptolemy: </author> <title> A framework for simulating and prototyping heterogeneous systems. </title> <journal> Int. Journal of Computer Simulation, </journal> <volume> 4, </volume> <month> April </month> <year> 1994. </year> <title> Special issue on Simulation Software Development. </title>
Reference-contexts: 1 Introduction Tycho [7] has grown from our frustration with the user-interface facilities of the present version of Ptolemy, a large C++ software package that is used to design, simulate, and generate signal processing and communications systems <ref> [6, 8, 1] </ref>. In the summer of 1995, we began to explore [incr Tcl]/[incr Tk] [11] (then at version 1.5) as a potential candidate for replacement of the Ptolemy user interface.
Reference: [2] <author> Dave Collins. </author> <title> Designing Object-Oriented User Interfaces. </title> <address> Benjamin/Cummings, </address> <year> 1995. </year>
Reference-contexts: where appropriate, and have written on-line tutorials for most of the user-interface support classes, which can be executed by reading and clicking. 4 Architectural patterns 4.1 The Model-View pattern Model-view is a derivation of Smalltalk's model-view-controller (MVC) architecture; the model-view derivation combines MVC's view and controller into a single abstraction <ref> [2] </ref>. In Tycho, we have implemented a Model class that provides a publish-and-subscribe mechanism, unbounded history, a simple but flexible external structured file format called TIM (Tycho Information Models), and a simple serialization mechanism.
Reference: [3] <author> Sven Delmas and Juergen Nickelsen. </author> <note> Information on TkSteal. http://www.cimetrix.com/ sven/tksteal.html. </note>
Reference-contexts: Although there is some overhead in this approach, the interface is much cleaner than that provided by the Tcl-Java interface alone. With the Tcl8.0 byte-compiler, we think this style of interface will probably be needed to take advantage of Tcl native types. As an alternative experiment, we used tksteal <ref> [3] </ref> to re-parent the Java appletviewer program into itkwish, but found that appletviewer didn't have the proper command-line interface to make this work smoothly.
Reference: [4] <author> Lisa Friendly. </author> <title> The design of distributed hyper-linked programming documentation. </title> <booktitle> In International Workshop on Hypermedia Design '95. </booktitle> <publisher> Sun Microsys-tems, Inc, </publisher> <year> 1995. </year> <note> http://www.javasoft.com/ doc/api documentation.html#javadoc. </note>
Reference-contexts: This class inherits from the TclShell class and overrides just one method: evalCommand, which processes the text of an input command. A great deal of Tycho's documentation is extracted from its source code. We use a similar scheme to Sun's Javadoc system <ref> [4] </ref>, which extracts documentation from comments preceding class and method declarations, and uses special tags to distinguish different fields of the comment text. Text within comments is formatted in HTML, as is the generated documentation and indexes.
Reference: [5] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reuse in Object Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: TIM (for a dataflow graph) is: vertex a - port out -tokencount 2 -type output - vertex b - port in-0 port in-1 port out -type output - edge a out b in-0 -initialdelay 0 Models contain a straight-forward implementation of the publish-and-subscribe pattern (also known as the Observer pattern <ref> [5] </ref>): any view that is interested in a model can subscribe to it, and will be notified of any updates to the model. The prototype graph editor in figure 3, for example, has two models: one for the graph, and one for the canvas layout.
Reference: [6] <institution> The Ptolemy Group. The Ptolemy home page. </institution> <note> http://ptolemy.eecs.berkeley.edu/. </note>
Reference-contexts: 1 Introduction Tycho [7] has grown from our frustration with the user-interface facilities of the present version of Ptolemy, a large C++ software package that is used to design, simulate, and generate signal processing and communications systems <ref> [6, 8, 1] </ref>. In the summer of 1995, we began to explore [incr Tcl]/[incr Tk] [11] (then at version 1.5) as a potential candidate for replacement of the Ptolemy user interface.
Reference: [7] <institution> The Ptolemy Group. The Tycho home page. </institution> <note> http://ptolemy.eecs.berkeley.edu/tycho/. </note>
Reference-contexts: 1 Introduction Tycho <ref> [7] </ref> has grown from our frustration with the user-interface facilities of the present version of Ptolemy, a large C++ software package that is used to design, simulate, and generate signal processing and communications systems [6, 8, 1].
Reference: [8] <author> Edward A. Lee and David G. Messerschmitt et al. </author> <title> An overview of the Ptolemy project. </title> <address> http://ptolemy.eecs.berkeley.edu/ papers/overview/, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Tycho [7] has grown from our frustration with the user-interface facilities of the present version of Ptolemy, a large C++ software package that is used to design, simulate, and generate signal processing and communications systems <ref> [6, 8, 1] </ref>. In the summer of 1995, we began to explore [incr Tcl]/[incr Tk] [11] (then at version 1.5) as a potential candidate for replacement of the Ptolemy user interface.
Reference: [9] <author> Karl Lehenbauer and Mark Diekhans. </author> <title> The TclX distribution. </title> <address> http://www.neosoft.com/ tcl/ftparchive/TclX/. </address>
Reference-contexts: The second is a set of complete graphical editors. The editors are still early in development, but already include a simple finite-state-machine editor, a graphical class hierarchy display, and a graphical interface to the Tcl profiler from the TclX package <ref> [9] </ref> (see figures 1 and 3). As much as possible, we have tried to capture functionality needed by typical graphical editors in Itcl classes. Tycho's enhanced canvas, which we call a slate, adds hierarchical items to Tk's standard canvas. <p> We have maintained a strong resistance to packages that require compilation to binaries, allowing this only if a) it is essential to gaining certain functionality and b) it is not going to significantly affect Tycho's cross-platform portability. The Tcl profiler from TclX <ref> [9] </ref>, which we load into Tycho to work behind a graphical profile display, is a good example. Another example of a C-coded package that adds useful (but not essential) functionality is support for integrating a Tycho-based custom user interface to a C program generated by Ptolemy.
Reference: [10] <author> Udi Manber, Sun Wu, and Burra Gopal. Glimpse: </author> <title> A tool to search entire file systems. </title> <address> http://glimpse.cs.arizona.edu/. </address>
Reference-contexts: To this end, we have incorporated interfaces to a few of the "most useful" development tools into Tycho. All of Tycho and Ptolemy is indexed by Glimpse <ref> [10] </ref>, and this can be brought up from any Tycho window.
Reference: [11] <author> Michael J. McLennan. </author> <title> The [incr Tcl] home page. </title> <address> http://www.tcltk.com/itcl/. </address>
Reference-contexts: In the summer of 1995, we began to explore [incr Tcl]/[incr Tk] <ref> [11] </ref> (then at version 1.5) as a potential candidate for replacement of the Ptolemy user interface.
Reference: [12] <author> Brad A. Myers. </author> <title> A new model for handling input. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 289-320, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: make up the icon: if the mouse is dragged over a terminal, a new arrowed line is drawn to be connected to another terminal, whereas dragging the mouse on any other part of the item moves the whole icon, including the terminals and the ends of connected lines. called interactors <ref> [12] </ref>. Each interactor captures a particular pattern of interaction. For example, a Follower class follows the mouse by default, attaching an interactor to a canvas tag with a statement like $follower bind icon will make all items tagged "icon" draggable with the mouse.
Reference: [13] <editor> Jan Nijtmans. Dashed and stippled outlines in Tk8.0a2 (Tk4.2p2, Itcl2.2). </editor> <address> http:// www.cogsci.kun.nl/~nijtmans/tcl/ patch.html. </address>
Reference-contexts: Tycho's enhanced canvas, which we call a slate, adds hierarchical items to Tk's standard canvas. The slate is implemented entirely in Itcl, and so should work with other canvas extensions such as the Dash patch <ref> [13] </ref>. The slate uses canvas tags to enable a collection of canvas items to be treated as a single complex item. All canvas commands functions correctly with single canvas items or complex slate items.
Reference: [14] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Models are based on TIM (Tycho Information Models), which is a meta-data format that is intended to encourage clean representations of data, both in in-memory objects and in an external file representation. It is loosely based on the concepts of Object Modeling Technique (OMT) <ref> [14] </ref>: a model is a collection of entities and links between entities. Each entity and link has a unique name, value, and a list of attributes. Entities can be nested, so TIM is naturally hierarchical.
Reference: [15] <author> Scott Stanton and Ken Corey. </author> <title> The TclJava demonstration. </title> <publisher> ftp://ftp.sunlabs.com/ pub/tcl/tcljava0.4.tar.gz. </publisher>
Reference-contexts: Members of the Ptolemy group are currently implementing an exploratory dataflow simulation engine in Java, which will be accessed from a Tycho graphical interface. We based our Tycho-Java interface on version 0.4 of Sun's experimental Tcl-Java interface <ref> [15] </ref>. Not all features of Tcl work correctly in this implementation|exec, for example, is broken, and the exception handling does not work correctly with JDK1.1 but it works well enough for us to explore the integration of Tcl and Java.
Reference: [16] <author> Sue Yockey, Mark Ulferts, Bret Schuh-macher, John Sigler, and Alfredo Jahn. </author> <note> [incr Widgets]. http://www.tcltk.com/iwidgets/ index.html/. </note>
Reference-contexts: This kind of extensibility is one of the great strengths of the object-oriented approach. Throughout Tycho's development, we have faced the decision on whether to use existing widgets or to develop our own. The most suitable library is [incr widgets], or Iwidgets <ref> [16] </ref>, a library of widgets written in [incr Tcl] that includes labeled widgets, scrolled canvas and text widgets, dialog boxes, a tabbed notebook, button and radio boxes, and so on. Other libraries, such as Tix and BLT, clashed with our "no-binaries" policy.
References-found: 16

