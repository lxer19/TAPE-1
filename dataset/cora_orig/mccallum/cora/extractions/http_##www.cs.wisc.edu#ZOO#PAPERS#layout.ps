URL: http://www.cs.wisc.edu/ZOO/PAPERS/layout.ps
Refering-URL: 
Root-URL: 
Email: fyannis,miron,bao,haberg@cs.wisc.edu  
Title: User-Oriented Visual Layout at Multiple Granularities  
Author: Yannis Ioannidis Miron Livny Jian Bao Eben M. Haber 
Address: Wisconsin, Madison, WI 53706  
Affiliation: Department of Computer Sciences, University of  
Abstract: Among existing tools for laying out large collections of visual objects, some perform automatic layouts, possibly following some rules prespecified by the user, e.g., graph layout tools, while others let users specify layouts manually, e.g., CAD design tools. Most of them can only deal with specific types of visualizations, e.g., graphs, and some of them allow users to view visual objects at various levels of detail, e.g., tree-structure visualization tools. In this paper, we develop techniques that strike a balance between user specification and automatic generation of layouts, work at multiple granu-larities, and are generally applicable. In particular, we introduce a general framework and layout algorithm that (a) deals with arbitrary types of visual objects, (b) allows objects to be viewed in any one of several different visual representations (at different levels of detail), and (c) uses a small number of user-specified layouts to guide heuristic decisions for automatically deriving many other layouts in a manner that attempts to be consistent with the user's preferences. The algorithm has been implemented within the OPOSSUM database schema manager and has been rather effective in capturing the intuition of scientists from several disciplines who have used it to design their database and experiment schemas. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Bartram, R. Ovans, J. Dill, M. Dyck, A. Ho, and W. S. Havens. </author> <title> Contextual assistance in user interfaces to complex, time-critical systems: </title> <booktitle> The intelligent zoom. In Proc. Conference on Graphics Interfaces, </booktitle> <year> 1994. </year>
Reference-contexts: Groups of instances can be represented by their type class when there is insufficient space to display all the instances. Finally, work has been done on applying multiple-focus fisheye views to allow different parts of a hierarchically organized visualization to be seen with certain groups collapsed and others expanded <ref> [1] </ref>. The main limitation of this effort is that it only considers visualizations where everything fits on the screen at once, and whenever something gets larger, everything else must get smaller (or collapse).
Reference: [2] <author> B. B. Bederson, L. Stead, and J. D. Hollan. </author> <title> Pad++: Ad vances in multiscale interfaces. </title> <booktitle> In Proc. CHI94 Companion to the Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 315-316, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: It requires these constraints for each spatial relationship, whereas we use user-provided information to infer layout guidelines. Also related is work on showing different amounts of detail in visualizations. Pad++, demonstrates improved approaches to zooming <ref> [2] </ref>. Fisheye views of graphs [11, 13] allow zooming of one part of a graph more than others. Neither approach offers abstractions when detail is removed. Magic lenses [14] offer different amounts of detail, but without layout management to prevent sparse or overlapping information.
Reference: [3] <author> K. Bohringer and F. N. Paulisch. </author> <title> Using constraints to achieve stability in automatic graph layout algorithms. </title> <booktitle> In Proc. CHI90 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 43-51, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: On the other hand, there has been considerable work on automated layout of graphs and trees [5, 9, 10]. Only [10] considers user-specified location information, and that is in the context of trees (maintaining user-specified ordering of siblings). The EDGE system <ref> [3] </ref> uses user-provided information for graph layout, but this is in the form of explicit constraints to restrict or supplement decisions made by the automatic layout algorithm. It requires these constraints for each spatial relationship, whereas we use user-provided information to infer layout guidelines.
Reference: [4] <author> M. P. Consens and A. O. Mendelzon. </author> <title> Hy+: A hygraph based query and visualization system. </title> <type> Technical Report CSRI-285, </type> <institution> Computer Systems Research Institute, University of Toronto, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Fisheye views of graphs [11, 13] allow zooming of one part of a graph more than others. Neither approach offers abstractions when detail is removed. Magic lenses [14] offer different amounts of detail, but without layout management to prevent sparse or overlapping information. Hy++ <ref> [4] </ref> uses limited abstraction to better visualize graphs describing relationships between instances in a logical database. Groups of instances can be represented by their type class when there is insufficient space to display all the instances.
Reference: [5] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: An annotated bibliography. Computational Geometry: </title> <journal> Theory and Applications, </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: On the other hand, there has been considerable work on automated layout of graphs and trees <ref> [5, 9, 10] </ref>. Only [10] considers user-specified location information, and that is in the context of trees (maintaining user-specified ordering of siblings).
Reference: [6] <author> E. Haber, Y. Ioannidis, and M. Livny. Opossum: </author> <title> Desk top schema management through customizable visualization. </title> <booktitle> In Proc. 21st International VLDB Conference, </booktitle> <pages> pages 527-538, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: In this paper, we introduce techniques that deal with layouts of large collections of objects with multiple visual representations in the context of Requirements R1 and R2. These have emerged out of our efforts to build a generic and intuitive database schema manager (OPOSSUM <ref> [6] </ref>) that can be used by scientists to lay out designs of their database and experiment schemas. <p> each such action may be analyzed into individual object creations and deletions, which can then be dealt with directly by the general algorithm. 5 Implementation and Experience 5.1 Implementation The entire framework and algorithms described above, including the generalizations of Section 4, have been implemented in the OPOSSUM visualization tool <ref> [6] </ref>, which is part of the user interface of the ZOO Experiment Management System [8]. ZOO is a system under development whose goal is to allow scientists from arbitrary disciplines manage all phases of their experimental studies using a single tool. <p> Screendumps of the OPOSSUM display showing a large object-oriented schema in graph form, at two configurations with respect to groups being expanded or collapsed, are shown below <ref> [6] </ref>.
Reference: [7] <author> T. Igarashi, S. Matsuoka, and T. Masui. </author> <title> Adaptive recog nition of implicit structures in human-organized layouts. </title> <booktitle> In Proc. of the 11th Symposium on Visual Lan guages, </booktitle> <pages> pages 258-266, </pages> <address> Darmstadt, Germany, </address> <month> Septem-ber </month> <year> 1995. </year>
Reference-contexts: Understanding users' preferences and intended meaning underlying any given spatial placement of visual objects is a difficult problem, as these can be based on a wide variety of spatial characteristics <ref> [7] </ref>. In our approach, we consider relative or absolute angles of vectors connecting visual objects between them or to a fixed origin as the key features that characterize the relative placement of objects. Thus, our heuristics are based on some form of an approximate angular in-variance.
Reference: [8] <author> Y. Ioannidis, M. Livny, E. Haber, R. Miller, O. Tsatalos, and J. Wiener. </author> <title> Desktop experiment management. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 16(1) </volume> <pages> 19-23, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: then be dealt with directly by the general algorithm. 5 Implementation and Experience 5.1 Implementation The entire framework and algorithms described above, including the generalizations of Section 4, have been implemented in the OPOSSUM visualization tool [6], which is part of the user interface of the ZOO Experiment Management System <ref> [8] </ref>. ZOO is a system under development whose goal is to allow scientists from arbitrary disciplines manage all phases of their experimental studies using a single tool.
Reference: [9] <author> E. B. Messinger, L. A. Rowe, and R. H. Henry. </author> <title> A divide-and-conquer algorithm for the automatic layout of large directed graphs. </title> <journal> IEEE Trans. on Systems, Man, and Cybernetics, </journal> <volume> 21(1) </volume> <pages> 1-12, </pages> <year> 1991. </year>
Reference-contexts: On the other hand, there has been considerable work on automated layout of graphs and trees <ref> [5, 9, 10] </ref>. Only [10] considers user-specified location information, and that is in the context of trees (maintaining user-specified ordering of siblings).
Reference: [10] <author> S. Moen. </author> <title> Drawing dynamic trees. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 21-28, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: On the other hand, there has been considerable work on automated layout of graphs and trees <ref> [5, 9, 10] </ref>. Only [10] considers user-specified location information, and that is in the context of trees (maintaining user-specified ordering of siblings). <p> On the other hand, there has been considerable work on automated layout of graphs and trees [5, 9, 10]. Only <ref> [10] </ref> considers user-specified location information, and that is in the context of trees (maintaining user-specified ordering of siblings). The EDGE system [3] uses user-provided information for graph layout, but this is in the form of explicit constraints to restrict or supplement decisions made by the automatic layout algorithm.
Reference: [11] <author> E. Noik. </author> <title> Exploring large hyperdocuments: Fisheye views of netsted networks. </title> <type> Technical Report CSRI-28, </type> <institution> Computer Systems Research Institute, University of Toronto, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: It requires these constraints for each spatial relationship, whereas we use user-provided information to infer layout guidelines. Also related is work on showing different amounts of detail in visualizations. Pad++, demonstrates improved approaches to zooming [2]. Fisheye views of graphs <ref> [11, 13] </ref> allow zooming of one part of a graph more than others. Neither approach offers abstractions when detail is removed. Magic lenses [14] offer different amounts of detail, but without layout management to prevent sparse or overlapping information.
Reference: [12] <author> J. Ousterhout. </author> <title> Corner stitching: A data structuring technique for vlsi layout tools. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 3(1) </volume> <pages> 87-100, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: Also note that point 4 remains essentially the same as in the naive algorithm, since it did not introduce any major costs. One may argue that the system should not reject object placements that violate Requirement R1, but instead should employ a plowing-like algorithm <ref> [12] </ref> to push visual objects so that all overlap is removed.
Reference: [13] <author> M. Sarkar and M. H. Brown. </author> <title> Graphical fisheye views of graphs. </title> <booktitle> In Proc. CHI92 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 83-91, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: It requires these constraints for each spatial relationship, whereas we use user-provided information to infer layout guidelines. Also related is work on showing different amounts of detail in visualizations. Pad++, demonstrates improved approaches to zooming [2]. Fisheye views of graphs <ref> [11, 13] </ref> allow zooming of one part of a graph more than others. Neither approach offers abstractions when detail is removed. Magic lenses [14] offer different amounts of detail, but without layout management to prevent sparse or overlapping information.
Reference: [14] <author> M. C. Stone, K. Fishkin, and E. A. Bier. </author> <title> The movable filter as a user interface tool. </title> <booktitle> In Proc. CHI94 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 306-312, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Also related is work on showing different amounts of detail in visualizations. Pad++, demonstrates improved approaches to zooming [2]. Fisheye views of graphs [11, 13] allow zooming of one part of a graph more than others. Neither approach offers abstractions when detail is removed. Magic lenses <ref> [14] </ref> offer different amounts of detail, but without layout management to prevent sparse or overlapping information. Hy++ [4] uses limited abstraction to better visualize graphs describing relationships between instances in a logical database.
References-found: 14

