URL: http://www.cs.umn.edu/Users/dept/users/padma/declustering/latin94.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/padma/declustering/
Root-URL: http://www.cs.umn.edu
Title: Latin Hypercubes: A Class of Multidimensional Declustering Techniques  
Author: Bhaskar Himatsingka Jaideep Srivastava Jiang-Zong Li Doron Rotem 
Address: Minneapolis, MN55455  
Affiliation: Department of Computer Science University of Minnesota  
Abstract: The I/O subsystem is widely accepted as one of the principal bottlenecks for high performance parallel databases systems. The emergence of parallel I/O architectures has made the problem of data declustering, i.e. fragmenting a file of records and allocating the pieces to different disks, one of prime importance. This is evident from the growing activity in this area. In this study we focus only on multi-attribute declustering methods which are based on some type of grid-based partitioning of the data space. Since the multidimensional range query is the main workhorse for applications accessing such data, the focus is to provide efficient support for it. We first show that there exists no declustering method that is strictly optimal for range queries if the number of disks is greater than 5. Thus the focus is on using declustering methods which provides good average case performance and are also optimal for a large class of queries. A class of multidimensional declustering methods, called Latin Hypercubes, is proposed. Conditions under which this class is optimal are derived. Also provided are the worst case and average case bounds on multidimensional range query performance. A detailed experimental evaluation is carried out to see how the class compares with other declustering methods. Parameters that are varied are shape and size of queries, database size, number of attributes and the number of disks. Our findings (theoretical and experimental) show that latin hypercubes do very well for large queries (near optimal), and partial match queries, and are within reasonable bounds of other declustering methods for small queries. Since it is not possible to have a declustering method which performs optimally for all possible range queries, our findings help decide when to use this class of methods. Finally, since there is no clear winner, parallel database systems must support a number of declustering methods and Latin Hypercubes would invariably have to be one of them. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Denes and A. D. Keedwell. </author> <title> Latin squares and their applications. </title> <address> New York: </address> <publisher> Academic, </publisher> <year> 1974. </year>
Reference-contexts: prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declus-tering for range queries exist iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: This follows directly from the proof of Lemma 2. 3 Latin Hypercube Declustering Methods (LHDM) Latin Squares <ref> [1] </ref> are two-dimensional structures which show very good properties, and have been widely used in experimental designs to ensure least redundancy and maximum coverage for the minimal experimental effort. We generalize Latin Squares into higher dimensions and define a class of declustering methods called Latin Hypercube Declustering Methods (LHDM). <p> case performance 13 results for this class of methods. 3.1 Latin Hypercube Properties Definition 9 [Latin Squares] A Latin Square of order n is an n fi n square composed of symbols from 0 to n 1 such that no symbol appears more than once in a row or column <ref> [1] </ref> [16]. Zhou et al discuss some properties of declustering methods using Latin squares in [26].
Reference: [2] <author> D.J. DeWitt and J. Gray. </author> <title> Parallel database systems: The future of high performance database systems. </title> <journal> Communications of ACM, </journal> <pages> pages 85-98, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The fact that disk I/O is the main bottleneck in a database environment has been a consensus according to researchers <ref> [2] </ref>. The rapid increase in processor speeds in recent years [25] has made the problem acute, with a compounding effect being added by massively parallel architectures [20]. 1 Heilongjiang University, P. R. China. 2 Computer Science Research Department, Lawrence Berkeley Laboratory, University of California, Berkeley. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [6] [8] [9] [5] [15]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] <ref> [2] </ref>, where the most frequently queried attribute is used for declustering. Discussion of single-attribute declustering methods is not the focus of this paper since these do not provide any benefit to query predicates not on the declustering attribute. <p> Definition 4 [Point Query] A point query Q is a range query such that <ref> [(8i 2 f1; 2; :::; dg)(L i = U i )] </ref>. Definition 5 [Length of Query] Let Q = ([L 1 ; U 1 ); [L 2 ; L 3 ); ; [L d ; U d )) be a range query.
Reference: [3] <author> H.C. Du. </author> <title> Disk allocation for binary cartesian product files. </title> <journal> B.I.T, </journal> <volume> 26 </volume> <pages> 138-147, </pages> <year> 1986. </year>
Reference-contexts: Variations of this method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method proposed by Du <ref> [3] </ref>. The GDM method has been shown to be strictly optimal with respect to partial match queries when the attribute domains satisfy certain conditions [4]. Li et al [14] have analyzed query properties and derived (sufficient) conditions on query shape which ensure optimality. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] <ref> [3] </ref> [6] [17] [24] [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 23 4 Evaluation Parameters and Experimental Design We believe that while theoretical studies such as [15] [4] <ref> [3] </ref> [17] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [4] <author> H.C. Du and J.S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple disk systems. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes. While most proposals have been in the first category <ref> [4] </ref> [17] [6] [14] [5], there have been some proposals in the second category [11]. Though the question of whether regular or irregular partitions are better is by no means settled, our focus here is to find a good declustering method for regular grid-based partitioning. <p> The declustering problem as posed above is also referred to as the Cartesian Product file declus-tering problem. Since Du's disk modulo (DM) proposal <ref> [4] </ref> a decade ago, a number of techniques have have been proposed for this problem. Du generalized his original proposal to the generalized disk modulo (GDM) method. Both of these approaches are based on numbering the partitions on each dimension of the data space by integers. <p> These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. 2.2.1 Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski <ref> [4] </ref> and coordinate modulo declustering by Li et al [14] are similar approaches. <p> Variations of this method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method proposed by Du [3]. The GDM method has been shown to be strictly optimal with respect to partial match queries when the attribute domains satisfy certain conditions <ref> [4] </ref>. Li et al [14] have analyzed query properties and derived (sufficient) conditions on query shape which ensure optimality. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [3] [6] [17] [24] [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [3] [6] [17] [24] [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries. <p> integral multiple of M FX power of 2 None PM: Exactly one field unspecified Power of 2 PM: with an unspecified attribute s.t. d i M ECC power of 2 power of 2 None derived HCAM None None None derived 2.3.1 Partial Match Queries and Optimality Disk Modulo (DM) schemes <ref> [4] </ref> and their variants, e.g. CMD [14], have been shown to be optimal for all partial match queries with exactly one unspecified attribute. <p> They have also been shown to be optimal for all partial match queries with at least one unspecified attribute such that (9i)(d i mod M = 0) [14]. A variant termed generalized disk modulo (GDM) was proposed and sufficient conditions for its strict optimality were derived <ref> [4] </ref>. Du et al [4] showed that if integers p i ; 1 i d, each relatively prime to M can be found, and appropriate d i , the domain partition sizes are chosen, then all partial match queries will be query optimal for GDM. <p> A variant termed generalized disk modulo (GDM) was proposed and sufficient conditions for its strict optimality were derived <ref> [4] </ref>. Du et al [4] showed that if integers p i ; 1 i d, each relatively prime to M can be found, and appropriate d i , the domain partition sizes are chosen, then all partial match queries will be query optimal for GDM. <p> Since the declustering is row optimal, therefore the basic hypercube is a Latin Hypercube. Since it is periodic, the basic latin hypercube is replicated along each dimension which makes it a latin hypercube declustering method. Q.E.D. Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [17], and Latin Squares [26], each have been shown to be row optimal and periodic in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> Since it is periodic, the basic latin hypercube is replicated along each dimension which makes it a latin hypercube declustering method. Q.E.D. Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [17], and Latin Squares [26], each have been shown to be row optimal and periodic in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 23 4 Evaluation Parameters and Experimental Design We believe that while theoretical studies such as [15] <ref> [4] </ref> [3] [17] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [5] <author> C. Faloutsos and P. Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> Parallel and Distributed Information Systems, </booktitle> <pages> pages 18-25, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [6] [8] [9] <ref> [5] </ref> [15]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] [2], where the most frequently queried attribute is used for declustering. <p> Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes. While most proposals have been in the first category [4] [17] [6] [14] <ref> [5] </ref>, there have been some proposals in the second category [11]. Though the question of whether regular or irregular partitions are better is by no means settled, our focus here is to find a good declustering method for regular grid-based partitioning. <p> A method based on representing partition co-ordinates in binary and taking their bit-wise exclusive-or (FX) was proposed by Kim et al [17]. Faloutsos et al proposed an approach based on error-correcting codes (ECC) in [6] and recently an approach based on space-filling Hilbert curves (HCAM) <ref> [5] </ref>. The co-ordinate modulo declustering (CMD) approach, based on the DM scheme has been recently proposed in [14] whose main contribution is a detailed theoretical analysis of the disk modulo method. All these methods and the class of methods proposed in this paper work well for read-only databases. <p> We give a brief survey of these methods in section 2.2. 2.1 Problem Definition Before comparing various declustering techniques proposed, we define some terminology which is used through out this paper. These definitions are similar to those used by Faloutsos et al <ref> [5] </ref>. 4 Symbol Definitions Symbol Definition M Number of disks d Number of attributes D i Domain of i -th attribute d i Number of Intervals of the domain of the i -th attribute diskOf () Function that maps bucket-ids to disks Definition 1 [Cartesian Product File] Let D i denote <p> This method was shown to have good overall average performance for partial match queries. 2.2.4 Hilbert Curve Method (HCAM) A declustering method based on space filling curves was recently proposed by Faloutsos and Bhag-wat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. <p> The Hilbert Curve has been shown to have good clustering properties by Jagdish [13] and hence the intuition is that two buckets far away in the linear ordering would be far away in the k -dimensional grid too <ref> [5] </ref>. Thus, if H is the function which imposes the linear ordering generated by the Hilbert Curve on the grid points (buckets) then diskOf (i 1 ; i 2 ; :::; i k ) = H (&lt; i 1 ; i 2 ; :::; i k &gt;)modM . <p> This method was shown to have good performance on square range queries of small size <ref> [5] </ref>. 2.3 Declustering and Optimality Ideally, we would like a declustering method to be strictly optimal. Queries can vary from being completely specified, partial match, range queries, correlational (diagonal) queries, etc.. Consider a cartesian product file F which has N; N &gt; M total grid-blocks. <p> The query size was varied from area = 1 to area = 1024. Experiment 2: Effect of Query Shape: Various theoretical analyses have posed specific conditions on the lengths of queries on attribute dimensions to derive optimality conditions. A recent study <ref> [5] </ref> has carried out an experimental evaluation of square queries. Since in general queries can have any arbitrary shape, we decided to vary the full range from a square to a line by varying the aspect ratio from 1:1 to 1:M. <p> Experiment 3: The Effect of Increasing the Number of Attributes: Since in general queries can be on any number of attributes, we wanted to examine the effect of increasing the number of attributes. Since all our other experiments, as well as those reported in <ref> [5] </ref>, are on two attributes, for this experiment we considered 3 attributes. The intuition we wanted to test here 26 was that as the number of dimensions is increased, the fraction of a query on which a declustering method is sub-optimal becomes almost negligibly small. <p> For small queries, the performance of ECC and HCAM is the best, followed by those of FX and CMD/DM, respectively. These observations are consistent with those reported in <ref> [5] </ref>. However, as we move to the large query region, the picture changes as the behaviour of all the methods becomes closer to each other. FX becomes the best scheme from size 12 onwards and remains so from then on.
Reference: [6] <author> C. Faloutsos and D. Metaxas. </author> <title> Disk allocation methods using error correcting codes. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 907-914, </pages> <month> August </month> <year> 1991. </year> <month> 35 </month>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] <ref> [6] </ref> [8] [9] [5] [15]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] [2], where the most frequently queried attribute is used for declustering. <p> Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes. While most proposals have been in the first category [4] [17] <ref> [6] </ref> [14] [5], there have been some proposals in the second category [11]. Though the question of whether regular or irregular partitions are better is by no means settled, our focus here is to find a good declustering method for regular grid-based partitioning. <p> A method based on representing partition co-ordinates in binary and taking their bit-wise exclusive-or (FX) was proposed by Kim et al [17]. Faloutsos et al proposed an approach based on error-correcting codes (ECC) in <ref> [6] </ref> and recently an approach based on space-filling Hilbert curves (HCAM) [5]. The co-ordinate modulo declustering (CMD) approach, based on the DM scheme has been recently proposed in [14] whose main contribution is a detailed theoretical analysis of the disk modulo method. <p> This is based on the assumption that though the data file may not be static, the data distribution tends to remain fairly stable and thus the allocation of buckets remains fixed over time. Faloutsos et al <ref> [6] </ref> give a survey of such declustering techniques. We give a brief survey of these methods in section 2.2. 2.1 Problem Definition Before comparing various declustering techniques proposed, we define some terminology which is used through out this paper. <p> In this paper we consider FX when the number of partitions are greater than the number of disks and ExFX otherwise. 6 2.2.3 Error Correcting Codes (ECC) A declustering approach based on using error correcting codes was proposed by Faloutsos et al <ref> [6] </ref>. It works for binary attributes or an attribute where the number of partitions on it, d i , is a power of 2. For the binary case the problem is reduced to grouping the 2 k binary strings on k bits in M groups of dissimilar strings. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [3] <ref> [6] </ref> [17] [24] [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries. <p> The ECC method provides reasonable performance even when the above conditions don't hold, and at the cost of optimality of queries, good average performance is achieved <ref> [6] </ref>. However, this method is applicable only when the number of disks and the number of partitions on a declustering attribute are each powers of 2 [6]. <p> method provides reasonable performance even when the above conditions don't hold, and at the cost of optimality of queries, good average performance is achieved <ref> [6] </ref>. However, this method is applicable only when the number of disks and the number of partitions on a declustering attribute are each powers of 2 [6]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are greater than the number of disks.
Reference: [7] <author> T. Fujiwara, M. Ito, T. Kasami, M. Kataoka, and J. Okui. </author> <title> Performance analysis of disk allocation method using error correcting code. </title> <journal> IEEE Transactions on Information Theory, </journal> <pages> pages 379-384, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [3] [6] [17] [24] <ref> [7] </ref>. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries.
Reference: [8] <author> S. Ghanderharizadeh and D.J. DeWitt. </author> <title> A multiuser performance analysis of alternative declus-tering strategies. </title> <booktitle> Proceedings of Data Engineering Conference, </booktitle> <month> Feb </month> <year> 1990. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [6] <ref> [8] </ref> [9] [5] [15]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] [2], where the most frequently queried attribute is used for declustering. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [6] <ref> [8] </ref> [9] [5] [15]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] [2], where the most frequently queried attribute is used for declustering. Discussion of single-attribute declustering methods is not the focus of this paper since these do not provide any benefit to query predicates not on the declustering attribute.
Reference: [9] <author> S. Ghanderharizadeh and D.J. DeWitt. </author> <title> A performance analysis of alternative multi-attribute declustering strategies. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 29-38, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [6] [8] <ref> [9] </ref> [5] [15]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] [2], where the most frequently queried attribute is used for declustering.
Reference: [10] <author> G.A. Gibson. </author> <title> Tutorial: Performance and reliability in redundant disk arrays. </title> <booktitle> Goddard Conference on Mass Storage Systems and Technologies, </booktitle> <pages> pages 163-202, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: It is highly unlikely that the performance of individual disk units will improve significantly in the near future [20]. This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth <ref> [10] </ref> [23] [18]. The introduction of database technology to data intensive applications such as scientific analysis, marketing survey and study, demographic studies, image analysis, etc., with their storage and bandwidth needs makes it necessary to use parallel I/O subsystems.
Reference: [11] <author> L. Harada, M. Nakano, M. Kitsuregawa, and M. Takagi. </author> <title> Query processing method for multi-attribute clustered relations. </title> <booktitle> Proceedings of International Conference on VLDB, </booktitle> <pages> pages 59-70, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: While most proposals have been in the first category [4] [17] [6] [14] [5], there have been some proposals in the second category <ref> [11] </ref>. Though the question of whether regular or irregular partitions are better is by no means settled, our focus here is to find a good declustering method for regular grid-based partitioning.
Reference: [12] <institution> DB2 V2R2 performance report. IBM International Technical Support Centers, </institution> <year> 1989. </year>
Reference-contexts: Furthermore a range query with predicates on 2 or 3 attributes on a relation seems fairly typical <ref> [12] </ref> 24 the semantics of the domain, something which just cannot be removed. No declustering techniques which deal well with correlated data are known.
Reference: [13] <author> H.V. </author> <title> Jagdish. Linear clustering of objects with multiple attributes. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 173-182, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve <ref> [13] </ref> to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion. The Hilbert Curve has been shown to have good clustering properties by Jagdish [13] and hence the intuition is that two buckets far away in the linear ordering would be far <p> The authors use such a curve, called the Hilbert Curve <ref> [13] </ref> to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion. The Hilbert Curve has been shown to have good clustering properties by Jagdish [13] and hence the intuition is that two buckets far away in the linear ordering would be far away in the k -dimensional grid too [5].
Reference: [14] <author> Li Jianzhong, J. Srivastava, and D. Rotem. CMD: </author> <title> A multidimensional declustering method for parallel database systems. </title> <booktitle> Proceedings of International Conference on VLDB, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes. While most proposals have been in the first category [4] [17] [6] <ref> [14] </ref> [5], there have been some proposals in the second category [11]. Though the question of whether regular or irregular partitions are better is by no means settled, our focus here is to find a good declustering method for regular grid-based partitioning. <p> Faloutsos et al proposed an approach based on error-correcting codes (ECC) in [6] and recently an approach based on space-filling Hilbert curves (HCAM) [5]. The co-ordinate modulo declustering (CMD) approach, based on the DM scheme has been recently proposed in <ref> [14] </ref> whose main contribution is a detailed theoretical analysis of the disk modulo method. All these methods and the class of methods proposed in this paper work well for read-only databases. They also handle well behaved updates, though further study is required in this area. <p> Thus most database machines use some form of declustering to improve performance. A number of declustering methods have been proposed in the past, aimed at achieving good performance for partial match queries that have predicates on several attributes. Li et al <ref> [14] </ref> show the need for declustering techniques which also perform well for range queries. Almost all methods are based on cartesian product files. Most of them assume that the allocation of buckets to disks does not change over time. <p> These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. 2.2.1 Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski [4] and coordinate modulo declustering by Li et al <ref> [14] </ref> are similar approaches. A bucket &lt; i 1 ; i 2 ; :::; i k &gt; is assigned to the disk unit diskOf (i 1 ; i 2 ; :::; i k ) = (i 1 ; i 2 ; :::; i k ) mod M . <p> Variations of this method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method proposed by Du [3]. The GDM method has been shown to be strictly optimal with respect to partial match queries when the attribute domains satisfy certain conditions [4]. Li et al <ref> [14] </ref> have analyzed query properties and derived (sufficient) conditions on query shape which ensure optimality. <p> CMD <ref> [14] </ref>, have been shown to be optimal for all partial match queries with exactly one unspecified attribute. They have also been shown to be optimal for all partial match queries with at least one unspecified attribute such that (9i)(d i mod M = 0) [14]. <p> CMD <ref> [14] </ref>, have been shown to be optimal for all partial match queries with exactly one unspecified attribute. They have also been shown to be optimal for all partial match queries with at least one unspecified attribute such that (9i)(d i mod M = 0) [14]. A variant termed generalized disk modulo (GDM) was proposed and sufficient conditions for its strict optimality were derived [4]. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 23 4 Evaluation Parameters and Experimental Design We believe that while theoretical studies such as [15] [4] [3] [17] <ref> [14] </ref> and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation. <p> Only in small regions is it bested by any other scheme, once by FX and another time by ECC. DM/CMD uniformly has the worst performance in this scenario, which is consistent with the results shown in <ref> [14] </ref> for small queries. For large queries, however, the picture changes completely. As shown in Figure 5 (b), DM/CMD and FX consistently out-perform HCAM. ECC becomes better than HCAM from about 14 disks onwards. From about 25 disks onwards ECC performs better than DM/CMD. FX is consistently the best performer.
Reference: [15] <author> A. S. Abdel-Ghaffar Khaled and Amr El Abbadi. </author> <title> Optimal disk allocation for partial match queries. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 132-156, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [6] [8] [9] [5] <ref> [15] </ref>. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] [2], where the most frequently queried attribute is used for declustering. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [3] [6] [17] [24] [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] <ref> [15] </ref>. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries. <p> However, this method is applicable only when the number of disks and the number of partitions on a declustering attribute are each powers of 2 [6]. Recent work <ref> [15] </ref> has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are greater than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). <p> Recent work <ref> [15] </ref> has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are greater than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 23 4 Evaluation Parameters and Experimental Design We believe that while theoretical studies such as <ref> [15] </ref> [4] [3] [17] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [16] <author> Kichul Kim and Viktor K. Prasanna. </author> <title> Latin squares for parallel array access. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <pages> pages 361-370, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: performance 13 results for this class of methods. 3.1 Latin Hypercube Properties Definition 9 [Latin Squares] A Latin Square of order n is an n fi n square composed of symbols from 0 to n 1 such that no symbol appears more than once in a row or column [1] <ref> [16] </ref>. Zhou et al discuss some properties of declustering methods using Latin squares in [26].
Reference: [17] <author> M.H. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match queries. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 173-182, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in <ref> [17] </ref> [6] [8] [9] [5] [15]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [8] [2], where the most frequently queried attribute is used for declustering. <p> Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes. While most proposals have been in the first category [4] <ref> [17] </ref> [6] [14] [5], there have been some proposals in the second category [11]. Though the question of whether regular or irregular partitions are better is by no means settled, our focus here is to find a good declustering method for regular grid-based partitioning. <p> A method based on representing partition co-ordinates in binary and taking their bit-wise exclusive-or (FX) was proposed by Kim et al <ref> [17] </ref>. Faloutsos et al proposed an approach based on error-correcting codes (ECC) in [6] and recently an approach based on space-filling Hilbert curves (HCAM) [5]. <p> While the bound increases with the number of disks, it decreases rapidly with query size as well as the number of attributes. 2.2.2 Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik <ref> [17] </ref> with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [3] [6] <ref> [17] </ref> [24] [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [3] [6] <ref> [17] </ref> [24] [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries. <p> Unfortunately there is no easy way to achieve the sufficient conditions, and also there is no guarantee that this can always be done. These results were improved by the FX method under certain limitations on number of disks 8 (power of 2) <ref> [17] </ref>. It has been shown to be optimal for partial match queries with exactly one unspecified attribute [17]. <p> These results were improved by the FX method under certain limitations on number of disks 8 (power of 2) <ref> [17] </ref>. It has been shown to be optimal for partial match queries with exactly one unspecified attribute [17]. Also, any partial match query with two or more unspecified attributes is optimal if there exists an unspecified attribute such that d i &gt; M and the domain partitions are powers of two [17]. <p> It has been shown to be optimal for partial match queries with exactly one unspecified attribute <ref> [17] </ref>. Also, any partial match query with two or more unspecified attributes is optimal if there exists an unspecified attribute such that d i &gt; M and the domain partitions are powers of two [17]. The extended FX method (ExFX) which works even when some d i &lt; M , was shown to be optimal for a larger subclass of partial match queries [17]. <p> optimal if there exists an unspecified attribute such that d i &gt; M and the domain partitions are powers of two <ref> [17] </ref>. The extended FX method (ExFX) which works even when some d i &lt; M , was shown to be optimal for a larger subclass of partial match queries [17]. It was shown to be query optimal for partial match queries, when the product of the domain partition sizes of two of the unspecified attributes was greater than M , etc.. <p> Since it is periodic, the basic latin hypercube is replicated along each dimension which makes it a latin hypercube declustering method. Q.E.D. Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX <ref> [17] </ref>, and Latin Squares [26], each have been shown to be row optimal and periodic in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 23 4 Evaluation Parameters and Experimental Design We believe that while theoretical studies such as [15] [4] [3] <ref> [17] </ref> [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [18] <author> D. Kotz. </author> <title> Multiprocessor file system interfaces. </title> <booktitle> Parallel and Distributed Information Systems, </booktitle> <pages> pages 194-201, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth [10] [23] <ref> [18] </ref>. The introduction of database technology to data intensive applications such as scientific analysis, marketing survey and study, demographic studies, image analysis, etc., with their storage and bandwidth needs makes it necessary to use parallel I/O subsystems.
Reference: [19] <author> J. Nievergelt, H. Hinterberger, and K.C. Sevcik. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 38-71, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Thus, we do not consider techniques where a data subspace can be assigned to more than one disk. Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file <ref> [19] </ref> type partitioning, or irregular shapes. While most proposals have been in the first category [4] [17] [6] [14] [5], there have been some proposals in the second category [11].
Reference: [20] <author> D.A. Patterson. </author> <title> Massive parallelism and massive storage: Trends and predictions for 1995-2000, keynote address. </title> <booktitle> Parallel and Distributed Information Systems, </booktitle> <pages> pages 5-6, </pages> <month> Jan </month> <year> 1993. </year> <month> 36 </month>
Reference-contexts: 1 Introduction The fact that disk I/O is the main bottleneck in a database environment has been a consensus according to researchers [2]. The rapid increase in processor speeds in recent years [25] has made the problem acute, with a compounding effect being added by massively parallel architectures <ref> [20] </ref>. 1 Heilongjiang University, P. R. China. 2 Computer Science Research Department, Lawrence Berkeley Laboratory, University of California, Berkeley. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [20]. <p> recent years [25] has made the problem acute, with a compounding effect being added by massively parallel architectures <ref> [20] </ref>. 1 Heilongjiang University, P. R. China. 2 Computer Science Research Department, Lawrence Berkeley Laboratory, University of California, Berkeley. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [20]. It is highly unlikely that the performance of individual disk units will improve significantly in the near future [20]. <p> R. China. 2 Computer Science Research Department, Lawrence Berkeley Laboratory, University of California, Berkeley. While the capacity of disks has increased dramatically, bandwidth increases have been marginal <ref> [20] </ref>. It is highly unlikely that the performance of individual disk units will improve significantly in the near future [20]. This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth [10] [23] [18].
Reference: [21] <author> D.A. Patterson, G. Gibson, and R. H. Katz. </author> <title> A case for redundant arrays of inexpensive disks(raid). </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 109-116, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Discussion of single-attribute declustering methods is not the focus of this paper since these do not provide any benefit to query predicates not on the declustering attribute. While assigning a data block to multiple disks in parallel I/O systems has been considered at the disk block level, for reliability <ref> [21] </ref> purposes, no corresponding data replication approaches have been proposed for data declustering. Thus, we do not consider techniques where a data subspace can be assigned to more than one disk.
Reference: [22] <author> F.M. Reza. </author> <title> An Introduction to Information Theory. </title> <publisher> McGraw-Hill, </publisher> <year> 1961. </year>
Reference-contexts: Thus if each d i can be represented as a binary string of length m then we need to construct an ECC on km bits out of which log 2 M bits will be parity check bits while the rest will be information bits. Tables in Reza <ref> [22] </ref> give the appropriate parity check equations. These are of the form a 1 + a 2 + ::: = c i for 1 i log 2 M . Assign the solution strings (buckets) to disk 0.
Reference: [23] <author> J.A. Solworth and U.C. Orji. </author> <title> Distorted mirrors. </title> <booktitle> Parallel and Distributed Information Systems, </booktitle> <pages> pages 10-17, </pages> <month> Dec </month> <year> 1991. </year>
Reference-contexts: This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth [10] <ref> [23] </ref> [18]. The introduction of database technology to data intensive applications such as scientific analysis, marketing survey and study, demographic studies, image analysis, etc., with their storage and bandwidth needs makes it necessary to use parallel I/O subsystems.
Reference: [24] <author> Y.Y. Sung. </author> <title> Performance analysis of disk modulo allocation method for cartesian product files. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1018-1026, </pages> <month> Sept </month> <year> 1988. </year>
Reference-contexts: Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [3] [6] [17] <ref> [24] </ref> [7]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [17] [15]. However, a number of theoretical issues still remain open for range queries.
Reference: [25] <author> R.M. Supnik. </author> <title> Digital's alpha project. </title> <journal> Communications of ACM, </journal> <pages> pages 30-81, </pages> <month> Feb </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The fact that disk I/O is the main bottleneck in a database environment has been a consensus according to researchers [2]. The rapid increase in processor speeds in recent years <ref> [25] </ref> has made the problem acute, with a compounding effect being added by massively parallel architectures [20]. 1 Heilongjiang University, P. R. China. 2 Computer Science Research Department, Lawrence Berkeley Laboratory, University of California, Berkeley. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [20].
Reference: [26] <author> Yvonne Zhou, Shashi Shekhar, and Mark Coyle. </author> <title> Disk allocation methods for parallelizing grid files. </title> <note> To be published in International Conference on Data Engineering, </note> <month> Feb </month> <year> 1994. </year> <month> 37 </month>
Reference-contexts: Zhou et al discuss some properties of declustering methods using Latin squares in <ref> [26] </ref>. Definition 10 [Latin Hypercubes] A Latin Hypercube of dimension d and order n is an n fi n fi ::: fi n hypercube of dimension d composed of symbols from 0 to n 1 such that no symbol appears more than once in any row for all dimensions. <p> Since it is periodic, the basic latin hypercube is replicated along each dimension which makes it a latin hypercube declustering method. Q.E.D. Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [17], and Latin Squares <ref> [26] </ref>, each have been shown to be row optimal and periodic in the respective papers. Using Theorem 2, all these methods belong to the class LHDM.
References-found: 26

