URL: file://theory.lcs.mit.edu/pub/people/rosario/master.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~rosario/research.html
Root-URL: 
Title: On the definitions and the properties of Zero-Knowledge arguments  
Author: by Rosario Gennaro Silvio Micali Campbell L. Searle 
Degree: Laurea in  (1989) Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science at the  c Rosario Gennaro, 1992. All rights reserved. The author hereby grants to MIT permission to reproduce and distribute publicly paper and electronic copies of this thesis document in whole or in part, and to grant others the right to do so. Author  Certified by  Professor of Computer Science Thesis Supervisor Accepted by  Chairman, Departmental Committee on Graduate Students  
Date: February 1993  December 10, 1992  
Affiliation: Matematica, Universita di Catania  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> D.Angluin, </author> <title> Lecture notes on the complexity of some problems in number theory, </title> <institution> De partment of Computer Science, Yale University, </institution> <type> Tech. Rep. 243, </type> <year> 1982 </year>
Reference-contexts: An integer x 2 Z fl n is called a quadratic residue modulo n (x 2 QR n ) if there exists a y 2 Z fl n such that x = y 2 mod n. If n = p is a prime, testing quadratic residuosity is easy <ref> [1] </ref>, and with the Legendre symbol we define the number ( n ) = 1 if x is a quadratic residue ( n ) = 1 otherwise If n = k i=1 p i then for all x 2 Z fl n we define the Jacobi symbol of x as the <p> a quadratic residue ( n ) = 1 otherwise If n = k i=1 p i then for all x 2 Z fl n we define the Jacobi symbol of x as the number J n (x) = k x ) The following facts are well known in number theory <ref> [1] </ref>: Fact 1 Given n 2 N and x 2 Z fl n , J n (x) can be computed in time polynomial in jxj. Fact 2 If J n (x) = 1 then x is a quadratic nonresidue modulo n.
Reference: [2] <author> M.Bellare, S.Micali, R.Ostrovsky, </author> <title> The (true) complexity of statistical zero-knowledge, </title> <booktitle> in Proceedings of STOC 1990, </booktitle> <address> pp.482-493 </address>
Reference-contexts: The proof of zero-knowledge is very similar to the one in [17] with the only difference that in this case the commitment of the colors by the Prover does not convey any information in a strong sense and so we can achieve perfect zero-knowledge. 3.3 ZKA and Witness Indistinguishability In <ref> [2, 13] </ref> the concept of witness indistinguishability was independently introduced with the following definition: Definition 12 A proof system (P; V ) is witness indistinguishable (WI) for R if for any V 0 , any large input x 2 L R and any y 1 ; y 2 2 R x
Reference: [3] <author> M.Ben-Or, O.Goldreich, S.Goldwasser, J.Hastad, J.Kilian, S.Micali, P. Rogaway, </author> <title> Ev erything provable is provable in Zero-knowledge in Proceedings of CRYPTO 1988, </title> <publisher> LNCS Vol.403, </publisher> <pages> pp. 37-56 </pages>
Reference-contexts: Given the NP-completeness of this problem [14] this result implies that all the languages in NP have a zero-knowledge proof system. Eventually in <ref> [3] </ref> they prove that all IP (i.e. all PSPACE) has computational zero-knowledge proof system. In this section we will review the ZK proof for graph 3-coloring since we will need it in the following.
Reference: [4] <author> R.Boppana, J.Hastad, S.Zachos, </author> <title> Does co-NP have short interactive proofs?, </title> <journal> Inf. Proc. Lett. Vol.37, No.2, </journal> <volume> pp.127-132, </volume> <year> 1987 </year>
Reference-contexts: In fact it is still unknown if the class of languages that have perfect zero-knowledge proof systems is a strict subset of the class of languages that have statistical ones or if they are equal. Combining results by Boppana, Hastad and Zachos <ref> [4] </ref> and Fortnow [11] it has been proven that if an NP-complete language had perfect or statistical zero-knowledge proof system then the polynomial time hierarchy would collapse. 14 Chapter 2 Proofs of knowledge 2.1 Introduction If we look back at the zero-knowledge proof system for 3-coloring in the previous chapter we
Reference: [5] <author> G.Brassard, </author> <title> The Cryptology Column, </title> <journal> SIGACT News, Vol.22, No.1, </journal> <volume> pp.5-12, </volume> <year> 1991 </year>
Reference-contexts: Another name proposed in [12] was zero-knowledge proofs of knowledge that makes evident how in this kind of protocols the Prover is engaged in proving to the Verifier that indeed he knows a witness. 1 Still another name was proposed by Chaum and Brassard <ref> [5] </ref>: zero-knowledge computationally convincing proofs. This name instead refers to the fact that these kind of proofs are valid only in a computational sense i.e. a powerful Prover would disrupt the validity of the proof (as we will see in the following).
Reference: [6] <author> G.Brassard, D.Chaum, C.Crepeau, </author> <title> Minimum Disclosure Proofs of Knowledge, </title> <journal> J. of Computer and System Sciences, Vol.37, No.2, </journal> <volume> pp.156-189, </volume> <year> 1988 </year>
Reference-contexts: This point suggested to some researchers a possible modification to the original model of Goldwasser, Micali and Rackoff in the following way: the Prover is not infinite power, but he is a polynomial time machine that "knows" a particular witness of the NP-statement he wants to prove to the Verifier <ref> [6, 7, 10] </ref>. Using these ideas Brassard and Crepeau [8] devised a zero-knowledge protocol for SAT (and then for all NP) that has the property of not releasing any knowledge to the Verifier in a strong information-theoretic sense i.e. using the terminology of [19] is a perfect zero-knowledge protocol. <p> The first example of a zero-knowledge argument for an NP-complete problem is a protocol for SAT described in <ref> [6] </ref>; here instead we present a simpler one for graph 3-colorability based on the zero-knowledge proof system in [17] that we described in Section 1.4.
Reference: [7] <author> G.Brassard, C.Crepeau, </author> <title> Zero-knowledge simulation of Boolean circuits, </title> <booktitle> in Proceedings of CRYPTO 1986, </booktitle> <publisher> LNCS Vol.263, pp.223-233 </publisher>
Reference-contexts: This point suggested to some researchers a possible modification to the original model of Goldwasser, Micali and Rackoff in the following way: the Prover is not infinite power, but he is a polynomial time machine that "knows" a particular witness of the NP-statement he wants to prove to the Verifier <ref> [6, 7, 10] </ref>. Using these ideas Brassard and Crepeau [8] devised a zero-knowledge protocol for SAT (and then for all NP) that has the property of not releasing any knowledge to the Verifier in a strong information-theoretic sense i.e. using the terminology of [19] is a perfect zero-knowledge protocol.
Reference: [8] <author> G.Brassard, C.Crepeau, </author> <title> Non-transitive transfer of confidence: a perfect zero-knowledge interactive protocol for SAT and beyond, </title> <booktitle> in Proceedings of FOCS 1986, </booktitle> <address> pp.188-195 </address>
Reference-contexts: Using these ideas Brassard and Crepeau <ref> [8] </ref> devised a zero-knowledge protocol for SAT (and then for all NP) that has the property of not releasing any knowledge to the Verifier in a strong information-theoretic sense i.e. using the terminology of [19] is a perfect zero-knowledge protocol.
Reference: [9] <author> G.Brassard, C.Crepeau, </author> <title> Sorting out zero-knowledge, </title> <booktitle> in Proceedings of EUROCRYPT 1989, </booktitle> <publisher> LNCS Vol.434 </publisher>
Reference-contexts: It is clear that his result does not apply to the other model and some confusion was raising from the misuse of terminology. Brassard and Crepeau "sorted out" the situation proposing in <ref> [9] </ref> the name of zero-knowledge arguments for their protocols.
Reference: [10] <author> D.Chaum, </author> <title> Demonstrating that a public predicate can be satisfied without revealing any information about how, </title> <booktitle> in Proceedings of CRYPTO 1986, </booktitle> <publisher> LNCS Vol.263, </publisher> <address> pp.195-199 30 </address>
Reference-contexts: This point suggested to some researchers a possible modification to the original model of Goldwasser, Micali and Rackoff in the following way: the Prover is not infinite power, but he is a polynomial time machine that "knows" a particular witness of the NP-statement he wants to prove to the Verifier <ref> [6, 7, 10] </ref>. Using these ideas Brassard and Crepeau [8] devised a zero-knowledge protocol for SAT (and then for all NP) that has the property of not releasing any knowledge to the Verifier in a strong information-theoretic sense i.e. using the terminology of [19] is a perfect zero-knowledge protocol.
Reference: [11] <author> L.Fortnow, </author> <title> The complexity of perfect zero-knowledge, </title> <booktitle> in Proceedings of STOC 1987, </booktitle> <address> pp.204-209 </address>
Reference-contexts: In fact it is still unknown if the class of languages that have perfect zero-knowledge proof systems is a strict subset of the class of languages that have statistical ones or if they are equal. Combining results by Boppana, Hastad and Zachos [4] and Fortnow <ref> [11] </ref> it has been proven that if an NP-complete language had perfect or statistical zero-knowledge proof system then the polynomial time hierarchy would collapse. 14 Chapter 2 Proofs of knowledge 2.1 Introduction If we look back at the zero-knowledge proof system for 3-coloring in the previous chapter we can notice that <p> At the beginning the differences between the two models were not entirely noticed and the name of zero-knowledge proof system was used to denote even this kind of protocols. The publication of the paper by Fortnow <ref> [11] </ref> that states that if an NP-complete problem had a perfect zero-knowledge proof system then the polynomial time hierarchy would collapse posed people in front of this question: or the hierarchy really collapsed or instead the protocols a la Brassard were not zero-knowledge proof systems (not at least as defined by
Reference: [12] <author> U.Feige, A.Fiat, A.Shamir, </author> <title> Zero-Knowledge proofs of identity, </title> <journal> J. of Cryptology, Vol.1, </journal> <volume> pp.77-94, </volume> <year> 1988 </year>
Reference-contexts: It is clear that his result does not apply to the other model and some confusion was raising from the misuse of terminology. Brassard and Crepeau "sorted out" the situation proposing in [9] the name of zero-knowledge arguments for their protocols. Another name proposed in <ref> [12] </ref> was zero-knowledge proofs of knowledge that makes evident how in this kind of protocols the Prover is engaged in proving to the Verifier that indeed he knows a witness. 1 Still another name was proposed by Chaum and Brassard [5]: zero-knowledge computationally convincing proofs. <p> In this thesis we will follow this convention. The question that was not settled down instead was the one of finding a good definition for this kind of protocol. The firsts that tried to formalize the properties of proofs of knowledge were Feige, Fiat and Shamir in <ref> [12] </ref>. <p> In fact an infinite power Prover could factor n and disclose whichever color he likes in the last step. 2.3 A first approach to the definition In this section we will describe the definition of zero-knowledge proofs of knowledge proposed by Feige, Fiat and Shamir in <ref> [12] </ref> and we will point out the bugs contained in their formalization. <p> This problem was solved in <ref> [12] </ref> with the following idea: if a machine A "knows" something then there is some other machine that will be able to extract this knowledge from A. This machine was called knowledge extractor. <p> This machine was called knowledge extractor. More precisely: A knows a string s if there is some polynomial time Turing machine M with complete control over A which outputs s as a result of its interaction with A. In <ref> [12] </ref> they reformulated the soundness condition in the following way soundness whenever a Prover convinces the Verifier with non negligible probability then he must know a proof of the theorem and then it is possible to extract this knowledge from him. <p> Writing everything in a more formal language the definition in <ref> [12] </ref> becomes: Definition 9 A pair of interacting polynomial time Turing machine (P; V ) is an interactive proof system of knowledge for the polynomially bounded relationship R if completeness 8x; y such that (x; y) 2 R, 8h P rob [(P (y); V (h))(x) accepts ] = 1 soundness 8k <p> We will define the View of the protocol in the same way as in [19] (see section 1.3) and denote it with V iew (P (y);V (h)) (x) to stress the fact that y is private to P and h to V . According to <ref> [12] </ref> (see also [13]) the zero-knowledge condition goes as following: zero-knowledge 8V 0 probabilistic polynomial time interactive Turing machine, 8h, 9S V 0 probabilistic polynomial time Turing machine such that 8 (x; y) 2 R, we have S V 0 (x; h) ~ = V iew (P (y);V 0 (h)) (x) <p> This protocol (P G ; V ) is obviously not zero-knowledge according to our intuition since it reveals the coloring on certain inputs. It satisfies the conditions in <ref> [12] </ref> though. In fact the particular conversation in which the coloring is revealed need not to be simulated according to their definition since the Prover does not have a witness in his private tape. <p> We will show how this definition correctly handles the examples given in the previous chapter that instead raised problems with the definition of <ref> [12] </ref>. Finally, as an example of what kind of mistakes can spring from dealing with incorrect formalizations, we will talk briefly about the relationship between zero-knowledge arguments and witness indistinguishable protocols. This topic was first brought up by Feige and Shamir in [13]. <p> Next section we will return to the zero-knowledge part. As we saw in Section 2.3.1 Goldreich in [16] suggested that the problem with the previous formalization of <ref> [12] </ref> was that it requires nothing in the case in which the Prover does not convince the Verifier with non-negligible probability. The problem was in the formalization of the soundness condition in [12]; the way we reformulated it is still due to Goldreich. 25 Definition 11 Let f : N ! <p> As we saw in Section 2.3.1 Goldreich in [16] suggested that the problem with the previous formalization of <ref> [12] </ref> was that it requires nothing in the case in which the Prover does not convince the Verifier with non-negligible probability. The problem was in the formalization of the soundness condition in [12]; the way we reformulated it is still due to Goldreich. 25 Definition 11 Let f : N ! R be a function. We say that f is negligible if 8c &gt; 0 and all sufficiently large n we have f (n) &lt; 1 n c . <p> If this probability is non-negligible then the knowledge extractor runs in expected polynomial time and in this case the definition of Goldreich agrees with the one in <ref> [12] </ref>. This soundness condition however is more general as it is valid in the cases in which the previous one does not suffice. <p> Interested readers may refer to Goldreich paper [16] for a very interesting discussion about these topics. 3.2.2 Redefining the zero-knowledge condition Besides the soundness condition, the other difference between our definition and the definition in <ref> [12] </ref> is in the additional "honesty" condition that we require to our Prover. <p> In fact in [19] the simulation of the protocol is required only when x 2 L. The Prover in Example 2 would not pass the honesty condition and then he would not be zero-knowledge according to our definition. As we noticed before he would instead satisfy the definition in <ref> [12] </ref>. 3.2.3 3-coloring revisited The protocol for 3-colorability described in Section 2.2 is actually a ZKA once we add at the beginning an extra step in which the Prover would stop if he does not have a 3-coloring of the graph G in his private tape.
Reference: [13] <author> U.Feige, A.Shamir, </author> <title> Witness Indistinguishable and Witness Hiding Protocols, </title> <note> in Pro ceedings of STOC 1990, pp.416-426 </note>
Reference-contexts: We will define the View of the protocol in the same way as in [19] (see section 1.3) and denote it with V iew (P (y);V (h)) (x) to stress the fact that y is private to P and h to V . According to [12] (see also <ref> [13] </ref>) the zero-knowledge condition goes as following: zero-knowledge 8V 0 probabilistic polynomial time interactive Turing machine, 8h, 9S V 0 probabilistic polynomial time Turing machine such that 8 (x; y) 2 R, we have S V 0 (x; h) ~ = V iew (P (y);V 0 (h)) (x) where ~ = <p> Finally, as an example of what kind of mistakes can spring from dealing with incorrect formalizations, we will talk briefly about the relationship between zero-knowledge arguments and witness indistinguishable protocols. This topic was first brought up by Feige and Shamir in <ref> [13] </ref>. Unfortunately their result is in some way affected by the wrong definitions they refer to. <p> The proof of zero-knowledge is very similar to the one in [17] with the only difference that in this case the commitment of the colors by the Prover does not convey any information in a strong sense and so we can achieve perfect zero-knowledge. 3.3 ZKA and Witness Indistinguishability In <ref> [2, 13] </ref> the concept of witness indistinguishability was independently introduced with the following definition: Definition 12 A proof system (P; V ) is witness indistinguishable (WI) for R if for any V 0 , any large input x 2 L R and any y 1 ; y 2 2 R x <p> The theorem is still true though once it is reformulated in the following way: Theorem 3 Let (P; V ) a statistical zero-knowledge argument for R. Then (P,V) is a witness indistinguishable protocol for R. Sketch of Proof The idea of the proof is the same as in <ref> [13] </ref>. Let J be an unlimited power judge that outputs 1 with probability p on views of the ZKA (P; V ) when P is using y 1 as witness. Then J outputs 1 with the same probability if he has been given the simulated view output by S.
Reference: [14] <author> M.Garey, D.Johnson, </author> <title> Computers and Intractability: A guide to the theory of NP completeness, </title> <publisher> Freeman, </publisher> <year> 1979 </year>
Reference-contexts: Given the NP-completeness of this problem <ref> [14] </ref> this result implies that all the languages in NP have a zero-knowledge proof system. Eventually in [3] they prove that all IP (i.e. all PSPACE) has computational zero-knowledge proof system.
Reference: [15] <author> R.Gennaro, </author> <title> A note on the definitions and the properties of zero-knowledge arguments and witness indistinguishable protocols, </title> <type> manuscript, </type> <year> 1992 </year>
Reference-contexts: This point of the definition was criticized by the author in <ref> [15] </ref>. To understand the problems with this formulation consider the following: Example 2: Let G be a 3-colorable graph and P G a Prover for 3-colorability that has hardwired a 3-coloring of G.
Reference: [16] <author> O.Goldreich, </author> <title> On defining proofs of knowledge, </title> <type> manuscript, </type> <year> 1991 </year>
Reference-contexts: 8k 2 , 8P 0 provers, 9k 3 , 8x with jxj &gt; k 3 , 8y, 8h P rob [(P 0 (y); V (h))(x) accepts ] &gt; 1 then P rob [M (P 0 ; x; y) outputs y 0 2 R x ] &gt; 1 1 Goldreich in <ref> [16] </ref> considers this definition not general enough. In fact he notices that the above scheme requires nothing in the case in which the Prover does not convince the Verifier with non negligible probability. <p> This is not the same of saying that this Prover convinces the Verifier with negligible probability, in which case we should not worry about it. An example of this subtle point is the following (still due to Goldreich in <ref> [16] </ref>): Example 1: Consider a Prover P and a Verifier V on an infinite sequence of CNF formulas f n : n 2 N g. <p> Next section we will return to the zero-knowledge part. As we saw in Section 2.3.1 Goldreich in <ref> [16] </ref> suggested that the problem with the previous formalization of [12] was that it requires nothing in the case in which the Prover does not convince the Verifier with non-negligible probability. <p> This soundness condition however is more general as it is valid in the cases in which the previous one does not suffice. Interested readers may refer to Goldreich paper <ref> [16] </ref> for a very interesting discussion about these topics. 3.2.2 Redefining the zero-knowledge condition Besides the soundness condition, the other difference between our definition and the definition in [12] is in the additional "honesty" condition that we require to our Prover.
Reference: [17] <author> O.Goldreich, S.Micali, A.Wigderson, </author> <title> Proofs that yield nothing but their validity and a methodology of cryptographic protocol design, in Proceedings of FOCS 1986, pp.174-187 final version: Proofs that yield nothing but their validity or all languages in NP have zero-knowledge proof systems, </title> <journal> J. of the ACM, Vol.38, </journal> <volume> No.1, </volume> <pages> pp. 691-729, </pages> <year> 1991 </year>
Reference-contexts: The class of languages that have interactive proof systems is called IP (Interactive Polynomial time). Clearly NP IP. The first example of language in IP, but not known to be in NP was given by Goldreich, Micali and Wigderson in <ref> [17] </ref> with an interactive proof system for graph non-isomorphism. Shamir in [24] proved that IP=PSPACE. <p> In [19] a perfect zero-knowledge proof system is given for QR and a statistical one for QN R. A big breakthrough came with the paper by Goldreich, Micali and Wigderson <ref> [17] </ref> where zero-knowledge proofs are given for the following problems: * Graph isomorphism: a perfect ZK protocol is given for the following language f (G; H) : G Hg This was the first example of ZK proof for something not known to be in NP " co-NP outside from the domain <p> could be able to break the encryption function i.e. to distinguish between the encryption of a false coloring where c u 6= c v from one where c r 6= c s for any other edge e 0 = (r; s) 2 E (a detailed proof can be found in <ref> [17] </ref>). So each round will be completed successfully after expected m trials, so S V 0 will complete after expected m 3 rounds. Each round is polynomial time since V 0 is. <p> Again a complete proof can be found in <ref> [17] </ref>. 13 1.5 Some results about Zero-Knowledge Proof Systems In the description of the protocol for 3COL in Section 1.4 we note that for the Prover it suffices to have a bit commitment scheme to be sure of releasing no knowledge to the Verifier. <p> So Theorem 1 can be restated with the simpler assumption of the existence of one-way function. We said that in [19] they give a statistical zero-knowledge proof system for the problem of quadratic non-residuosity. Similarly in <ref> [17] </ref> they give a statistical zero-knowledge proof system for the problem of graph non-isomorphism. In both papers a way to transform these protocols in perfect zero-knowledge ones is indicated. <p> The first example of a zero-knowledge argument for an NP-complete problem is a protocol for SAT described in [6]; here instead we present a simpler one for graph 3-colorability based on the zero-knowledge proof system in <ref> [17] </ref> that we described in Section 1.4. <p> and the Prover knows a 3-coloring of the nodes then he can always perform his part of the protocol and convince the Verifier with probability 1. soundness If the graph is not 3-colorable or if the Prover does not know the 3-coloring then an analysis similar to the one in <ref> [17] </ref> shows that any Prover who cannot change the coloring to which he has committed in the second step, succeeds in convincing the Verifier only with probability e jEj . In our case these are all the probabilistic 27 polynomial time provers who cannot factor n. <p> So in this case the probability that the Prover convinces the Verifier is always 1 or negligible so we do not have to worry about the running time of the knowledge extractor. zero-knowledge The proof of zero-knowledge is very similar to the one in <ref> [17] </ref> with the only difference that in this case the commitment of the colors by the Prover does not convey any information in a strong sense and so we can achieve perfect zero-knowledge. 3.3 ZKA and Witness Indistinguishability In [2, 13] the concept of witness indistinguishability was independently introduced with the
Reference: [18] <author> S.Goldwasser, S.Micali, </author> <title> Probabilistic Encryption, </title> <journal> J. of Computer and System Sciences, Vol.18, No.1, pp.186-208 </journal>
Reference-contexts: The Verifier accepts after repeating this basic protocol m 2 times. Of course in a digital implementation of this protocol we cannot use boxes and keys as means to hide information, but using the result of Goldwasser and Micali in <ref> [18] </ref> we can simulate them by using secure encryption schemes Definition 7 An encryption function is a polynomial time computable function f : M fi f0; 1g fl ! f0; 1g fl (M is the message space) such that 8x 6= y 2 M; 8r; s 2 f0; 1g fl f
Reference: [19] <author> S.Goldwasser, S.Micali, C.Rackoff, </author> <title> The knowledge complexity of interactive proof sys tems, </title> <booktitle> in Proceedings of STOC 1985, </booktitle> <pages> pp. </pages> <note> 291-304 final version: The knowledge complexity of interactive proof systems, in SIAM J. </note> <editor> Com-put. </editor> <booktitle> Vol.18 No.1, </booktitle> <pages> pp 186-208, </pages> <year> 1989. </year>
Reference-contexts: I hope I can make you proud of me. 4 Chapter 1 Zero-Knowledge protocols 1.1 Introduction In this chapter we will introduce the notion of interactive proof systems and the concept of zero-knowledge protocols as they were initially defined in the seminal paper by Goldwasser, Micali and Rackoff <ref> [19] </ref>. Informally an interactive proof system for a given language L is a two-parties protocol in which one of the parties (called the Prover) tries to convince the other one (the Verifier) that a certain input string x is in L. <p> A cheating Verifier may try to use h to obtain extra knowledge from the Prover. Of course we have to formalize these ideas in a satisfactory way. According to <ref> [19] </ref> we define what the Verifier "sees" as the View of the protocol. <p> L if 8V 0 verifier, 9S V 0 probabilistic polynomial time Turing machine such that 8x 2 L 8h S V 0 (x) is a random value as well, by ~ = we mean that the two distributions may be equal or statistically indistinguishable or computationally indistinguishable as defined in <ref> [19] </ref>. According to the case we have perfect or statistical or computational zero-knowledge. <p> In these cases the Verifier would not need the interaction with the Prover to decide if x 2 L. 1.4 Examples of Zero-Knowledge Proof Systems The first examples of zero-knowledge proof systems were given in <ref> [19] </ref> with two protocols for the languages 1 QR n = fx 2 Z fl n and x is a square g and n ; J n (x) = 1 and x is not a square g Those problems are well known to be in NP " co-NP, but no probabilistic <p> In <ref> [19] </ref> a perfect zero-knowledge proof system is given for QR and a statistical one for QN R. <p> So Theorem 1 can be restated with the simpler assumption of the existence of one-way function. We said that in <ref> [19] </ref> they give a statistical zero-knowledge proof system for the problem of quadratic non-residuosity. Similarly in [17] they give a statistical zero-knowledge proof system for the problem of graph non-isomorphism. In both papers a way to transform these protocols in perfect zero-knowledge ones is indicated. <p> Using these ideas Brassard and Crepeau [8] devised a zero-knowledge protocol for SAT (and then for all NP) that has the property of not releasing any knowledge to the Verifier in a strong information-theoretic sense i.e. using the terminology of <ref> [19] </ref> is a perfect zero-knowledge protocol. The correctness of the protocol relies though on the limited power of the Prover i.e. a Prover that could, for example, factor would be able to cheat on the Verifier. <p> She sends n; s to A. * B proves to A in zero-knowledge that s is indeed a square mod n using the protocol of <ref> [19] </ref>. * A chooses a random y 2 Z fl n and set m = y 2 s b and sends m to B reveal stage * A just sends y to B This is a valid bit commitment scheme, in fact 1. <p> She sends n; s to P . * V proves to P in zero-knowledge that s is indeed a square mod n using the protocol of <ref> [19] </ref>. * P selects a random permutation of the colors of the node of the graph. <p> We will define the View of the protocol in the same way as in <ref> [19] </ref> (see section 1.3) and denote it with V iew (P (y);V (h)) (x) to stress the fact that y is private to P and h to V . <p> With (P (y); V (h))(x) we denote the output of the interaction on public input x and y (resp. h) private input for the Prover (resp. Verifier) and with V iew (P (y);V 0 (h)) (x) the view (as defined in <ref> [19] </ref>) of the protocol. 24 Definition 10 Given a polynomially bounded relationship R (see section 2.3.1) we say that (P; V ) is a Zero-Knowledge argument (ZKA) for R if the following conditions are met honesty 8x; y 0 such that (x; y 0 ) =2 R then P (x; y <p> If we look at the zero-knowledge condition we see that requesting that the conversation is simulatable we basically ask that whatever the Verifier sees she could have computed it by herself and then she learns nothing from the conversation. This is the same notion as in <ref> [19] </ref>, but notice that we here ask the conversation to be simulatable when (x; y) 2 R. <p> This is analogous to the case of zero-knowledge proof systems where a Prover should not attempt to prove that x 2 L when actually x =2 L if he wants to be sure to not release any knowledge to the Verifier. In fact in <ref> [19] </ref> the simulation of the protocol is required only when x 2 L. The Prover in Example 2 would not pass the honesty condition and then he would not be zero-knowledge according to our definition.
Reference: [20] <author> S.Goldwasser, M.Sipser, </author> <title> Private coins versus public coins in interactive proof systems, </title> <booktitle> in Proceedings of STOC 1986, </booktitle> <pages> pp. 59-68. </pages>
Reference-contexts: Shamir in [24] proved that IP=PSPACE. The proof of this fact uses a quite surprising result by Goldwasser and Sipser <ref> [20] </ref> that states that the secrecy of the coin tosses does not affect the class of languages recognized by interactive proof systems.
Reference: [21] <author> R.Impagliazzo, L.Levin, M.Luby, </author> <title> Pseudorandom generation from one-way functions, </title> <booktitle> in Proceedings of STOC 1989, </booktitle> <address> pp.12-24. </address>
Reference-contexts: At the revealing stage A can only reveal one possible value. If she tries to cheat and reveal a different value than the one she committed to, she will be caught with probability 1 1 p (k) Using recent results by Naor [22] and Impagliazzo, Levin and Luby <ref> [21] </ref> the existence of bit commitment schemes is equivalent to the existence of one-way functions. So Theorem 1 can be restated with the simpler assumption of the existence of one-way function. We said that in [19] they give a statistical zero-knowledge proof system for the problem of quadratic non-residuosity.
Reference: [22] <author> M.Naor, </author> <title> Bit commitment using pseudorandomness, </title> <booktitle> In Proceedings of CRYPTO 1989, LNCS Vol.435, pp.128-137. </booktitle> <pages> 31 </pages>
Reference-contexts: At the revealing stage A can only reveal one possible value. If she tries to cheat and reveal a different value than the one she committed to, she will be caught with probability 1 1 p (k) Using recent results by Naor <ref> [22] </ref> and Impagliazzo, Levin and Luby [21] the existence of bit commitment schemes is equivalent to the existence of one-way functions. So Theorem 1 can be restated with the simpler assumption of the existence of one-way function.
Reference: [23] <author> M.Rabin, </author> <title> Digitalized signatures and public-key functions as intractable as factorization, </title> <address> MIT-LCS-TR212, Cambridge MA, </address> <year> 1979. </year>
Reference-contexts: However if J n (x) = 1 there is no polynomial time algorithm known to tell if x is or not a quadratic residue modulo n. If n = pq is the product of two odd primes then extracting square roots is computation-ally equivalent to factoring <ref> [23] </ref>. We assume that when the primes are large, factoring n is computationally infeasible, and then even extracting square roots modulo n. Now we can describe the bit commitment scheme based on the problem of quadratic residuosity: party A has a bit b and she wants to commit to it.
Reference: [24] <author> A.Shamir, </author> <title> IP = P SP ACE, </title> <booktitle> in Proceedings of FOCS 1990, pp.11-15. </booktitle> <pages> 32 </pages>
Reference-contexts: Clearly NP IP. The first example of language in IP, but not known to be in NP was given by Goldreich, Micali and Wigderson in [17] with an interactive proof system for graph non-isomorphism. Shamir in <ref> [24] </ref> proved that IP=PSPACE. The proof of this fact uses a quite surprising result by Goldwasser and Sipser [20] that states that the secrecy of the coin tosses does not affect the class of languages recognized by interactive proof systems.
References-found: 24

