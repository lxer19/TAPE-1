URL: http://www.cs.cornell.edu/kozen/papers/ratnotes.ps
Refering-URL: http://www.cs.cornell.edu/kozen/papers/papers.html
Root-URL: 
Email: e-mail:facheng,kozeng@cs.cornell.edu  
Title: Some Notes on Rational Spaces  
Author: Allan Cheng and Dexter Kozen 
Address: Ithaca, New York 14853, USA  
Affiliation: Computer Science Department Cornell University  
Abstract: Set constraints are inclusions between expressions denoting sets of ground terms over a finite ranked alphabet . Rational spaces are topological spaces obtained as spaces of runs of topological - hypergraphs. They were introduced by Kozen in [Koz95], where the topological structure of the spaces of solutions to systems of set constraints was given in terms of rational spaces. In this paper we continue the investigation of rational spaces. We give a Myhill-Nerode like characterization of rational points, which in turn is used to re-derive results about the rational points of finitary rational spaces. We define congruences on -hypergraphs, investigate their interplay with the Myhill-Nerode characterization, and finally we determine the computational complexity of some decision problems related to rational spaces.
Abstract-found: 1
Intro-found: 1
Reference: [AKVW93] <author> Alexander Aiken, Dexter Kozen, Moshe Vardi, and Edward Wimmers. </author> <title> The complexity of set constraints. </title> <editor> In E. Borger, Y. Gurevich, and K. Meinke, editors, </editor> <booktitle> Proc. 1993 Conf. Computer Science Logic (CSL'93), volume 832 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 1-17. </pages> <institution> Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure.
Reference: [AKW95] <author> Alexander Aiken, Dexter Kozen, and Edward Wimmers. </author> <title> Decidability of systems of set constraints with negative constraints. </title> <journal> Infor. and Comput., </journal> <volume> 122(1) </volume> <pages> 30-44, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Given a finite D and a d 2 D. The accessibility problem is NP-hard. Proof. This follows from an easy modification of the proof of Lemma 26. Lemma 29. Given a finite D and a d 2 D. The accessibility problem lies in NP. Proof. From <ref> [AKW95] </ref> it follows that the problem can be reduced in time polynomial in the size of D to the Nonlinear Reachability Problem (NRP). Since the NRP is NP-complete [Ste94b] it follows that the accessibility problem is in NP. The following lemma provides a useful characterization of rational embed-dings. Lemma 30.
Reference: [AM91a] <author> A. Aiken and B. Murphy. </author> <title> Implementing regular tree expressions. </title> <booktitle> In Proc. 1991 Conf. Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 427-447, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [AM91b] <author> A. Aiken and B. Murphy. </author> <title> Static type inference in a dynamically typed language. </title> <booktitle> In Proc. 18th Symp. Principles of Programming Languages, </booktitle> <pages> pages 279-290. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [AW92] <author> A. Aiken and E. Wimmers. </author> <title> Solving systems of set constraints. </title> <booktitle> In Proc. 7th Symp. Logic in Computer Science, </booktitle> <pages> pages 329-340. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1992. </year> <month> 18 </month>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure.
Reference: [BGW93] <author> L. Bachmair, H. Ganzinger, and U. Waldmann. </author> <title> Set constraints are the monadic class. </title> <booktitle> In Proc. 8th Symp. Logic in Computer Science, </booktitle> <pages> pages 75-83. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic <ref> [BGW93, CP94a] </ref>, Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95]. Many results in the literature on set constraints are topological in flavor.
Reference: [CP94a] <author> W. Charatonik and L. Pacholski. </author> <title> Negative set constraints with equality. </title> <booktitle> In Proc. 9th Symp. Logic in Computer Science, </booktitle> <pages> pages 128-136. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic <ref> [BGW93, CP94a] </ref>, Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95]. Many results in the literature on set constraints are topological in flavor.
Reference: [CP94b] <author> W. Charatonik and L. Pacholski. </author> <title> Set constraints with projections are in NEXPTIME . In Proc. </title> <booktitle> 35th Symp. Foundations of Computer Science, </booktitle> <pages> pages 642-653. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure.
Reference: [GTT93a] <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints using tree automata. </title> <journal> In Proc. Symp. Theor. Aspects of Comput. Sci., </journal> <volume> volume 665, </volume> <pages> pages 505-514. </pages> <note> Springer-Verlag Lect. Notes in Comput. Sci., </note> <month> February </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory <ref> [GTT93a, GTT93b] </ref>, type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95].
Reference: [GTT93b] <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints with negated subset relationships. </title> <booktitle> In Proc. 34th Symp. Foundations of Comput. Sci., </booktitle> <pages> pages 372-380. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory <ref> [GTT93a, GTT93b] </ref>, type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95].
Reference: [Hei92] <author> Nevin Heintze. </author> <title> Set Based Program Analysis. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [HJ90a] <author> N. Heintze and J. Jaffar. </author> <title> A decision procedure for a class of set constraints. </title> <booktitle> In Proc. 5th Symp. Logic in Computer Science, </booktitle> <pages> pages 42-51. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure.
Reference: [HJ90b] <author> N. Heintze and J. Jaffar. </author> <title> A finite presentation theorem for approximating logic programs. </title> <booktitle> In Proc. 17th Symp. Principles of Programming Languages, </booktitle> <pages> pages 197-209. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [HU79] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1979. </year>
Reference-contexts: Definition 25. Given D. The non-emptiness problem is the problem of deciding whether or not R (D) 6= ;. 2 Lemma 26. Given a finite D. The problem of deciding if R (D) 6= ; is NP-complete. Proof. To show NP-hardness, we reduce the NP-complete 3-CNF satisfiability problem <ref> [HU79] </ref> to the accessibility problem. We assume the reader is familiar with 3-CNF satisfiability.
Reference: [JM79] <author> N. D. Jones and S. S. Muchnick. </author> <title> Flow analysis and optimization of LISP-like structures. </title> <booktitle> In Proc. 6th Symp. Principles of Programming Languages, </booktitle> <pages> pages 244-256. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1979. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [JNW93] <author> Andre Joyal, Mogens Nielsen, and Glynn Winskel. </author> <title> Bisimulation and open maps. </title> <booktitle> In Proc. LICS'93, Eighth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 418-427, </pages> <year> 1993. </year>
Reference-contexts: Rational equivalence, which is defined i terms of spans of refinments, could possibly be recasted using Joyal, Nielsen, and Winskel's theory of open maps <ref> [JNW93] </ref>. Also, one could try to close the gap in Theorem 33.
Reference: [JT51] <author> B. Jonsson and A. Tarski. </author> <title> Boolean algebras with operators. </title> <journal> Amer. J. Math., </journal> <volume> 73 </volume> <pages> 891-939, </pages> <year> 1951. </year>
Reference-contexts: Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators <ref> [JT51, JT52] </ref>, and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95]. Many results in the literature on set constraints are topological in flavor.
Reference: [JT52] <author> B. Jonsson and A. Tarski. </author> <title> Boolean algebras with operators. </title> <journal> Amer. J. Math., </journal> <volume> 74 </volume> <pages> 127-162, </pages> <year> 1952. </year>
Reference-contexts: Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators <ref> [JT51, JT52] </ref>, and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95]. Many results in the literature on set constraints are topological in flavor.
Reference: [Koz93] <author> Dexter Kozen. </author> <title> Logical aspects of set constraints. </title> <editor> In E. Borger, Y. Gurevich, and K. Meinke, editors, </editor> <booktitle> Proc. 1993 Conf. Computer Science Logic (CSL'93), volume 832 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 175-188. </pages> <institution> Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic <ref> [Koz93] </ref>. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95]. Many results in the literature on set constraints are topological in flavor. <p> There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality <ref> [Koz93, Koz95] </ref>. Many results in the literature on set constraints are topological in flavor.
Reference: [Koz94] <author> Dexter Kozen. </author> <title> Set constraints and logic programming (abstract). </title> <editor> In J.-P. Jouannaud, editor, </editor> <booktitle> Proc. First Conf. Constraints in Computational Logics (CCL'94), volume 845 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 302-303. </pages> <publisher> ESPRIT, Springer, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain <ref> [Koz94] </ref>. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. <p> We investigate congruences in -hypergraphs and their interplay with the Myhill-Nerode characterization. Congruences in rational spaces are strongly related to the notion of bisimulation [Mil89] in models of concurrency and a similar notion has appeared in <ref> [Koz94] </ref> in the context of efficient constraint solving. We also determine the computational complexity of some decision problems related to rational embeddings. The rest of the paper is organized as follows. In x2 we review the basic definitions of -hypergraphs and rational spaces.
Reference: [Koz95] <author> Dexter Kozen. </author> <title> Rational spaces and set constraints. </title> <editor> In Peter D. Mosses, Mogens Nielsen, and Michael I. Schwartzbach, editors, </editor> <booktitle> Proc. Sixth Int. Joint Conf. Theory and Practice of Software Develop. (TAPSOFT'95), volume 915 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 42-61. </pages> <publisher> Springer, </publisher> <month> May </month> <year> 1995. </year> <month> 19 </month>
Reference-contexts: There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality <ref> [Koz93, Koz95] </ref>. Many results in the literature on set constraints are topological in flavor. <p> There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95]. Many results in the literature on set constraints are topological in flavor. In <ref> [Koz95] </ref>, Kozen defines rational spaces, develops the basic theory, and shows how many results in the literature can be re-derived by general topological principles. fl Visiting from Aarhus, BRICS, Basic Research in Computer Science, Center of the Danish National Research Foundation. e-mail:acheng@daimi.aau.dk Kozen also gives a complete characterization of the sets <p> In this paper we continue the investigation of rational spaces. We give a Myhill-Nerode like characterization of rational points and, based on this characterization, we give a simple and direct proof that the rational points of a finitary rational space are dense <ref> [Koz95] </ref>. We show that the rational points in finitary rational spaces in some sense exactly capture the topological structure of the spaces. We investigate congruences in -hypergraphs and their interplay with the Myhill-Nerode characterization. <p> n ) 2 T , (f (t 1 ; : : :; t n )) 2 E f ((t 1 ); : : : ; (t n )) : (2) The set of runs of D is denoted R (D). 2 2.2 Rational Spaces We recall the basic definitions from <ref> [Koz95] </ref>. Definition 3. <p> The space R (D) of runs of D is a subspace of this space. The topology is thus generated by subbasic open sets (4) restricted to R (D). Proposition 5. <ref> [Koz95] </ref> If D is finite and discrete, then R (D) is a complete metric space (all Cauchy sequences converge) under the metric d (; 0 ) = 2 depth (t) ; (5) where t is a term of minimal depth on which and 0 differ, or 0 if no such term <p> Definition 6. A rational space is a space of runs R (D) such that D is Hausdorff and compact. 2 3 In <ref> [Koz95] </ref> it is proved that if D is Hausdorff and/or compact, then so is the space of runs R (D). Hence, every rational space is Hausdorff and compact. Also, if a rational space R (D) is finitary, then the topology on D is discrete. <p> Since (t) = h ([t] = ) = ( b h ())(t), is a rational point of R (D). We continue by giving simple proofs of two results from <ref> [Koz95] </ref>. Theorem 13. The rational points of any finitary rational space R (D) are dense. Proof. Recall that R (D) is a complete metric space under the metric (5). Let be any point of R (D), D = (D; E). <p> The map : T ! D=, defined by (t) = [(t)] is a run in R (D=), from which can be extracted. Hence, bg () = b h () = 0 , and bg is onto. 5 Complexity of Rational Embeddings In <ref> [Koz95] </ref> it is shown that for a finite set of variables X, one can define finitary rational spaces R (2 F ; S), given a finite system of set constraints S and a subset of set term F satisfying certain closure properties. <p> s (d 0 ;d 0 0 ) ) of a (given) nondeterministic polynomial time Turing machine solving the accessibility problem, given the encoding (s D fl ; s (d 0 ;d 0 0 ) ). 6 Conclusion In this paper we continued the investigation of the rational spaces introduced in <ref> [Koz95] </ref>. We gave a Myhill-Nerode-like characterization of rational points and results that suggest that rational points in an essential way captures the topological structure of finitary rational spaces. Furthermore, congruences on -hypergraphs were investigated as well as complexity issues for rational maps.
Reference: [KPS93] <author> Dexter Kozen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Efficient re-cursive subtyping. </title> <booktitle> In Proc. 20th Symp. Princip. Programming Lang., </booktitle> <pages> pages 419-428. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory <ref> [KPS93, KPS94] </ref>, first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95].
Reference: [KPS94] <author> Dexter Kozen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Efficient inference of partial types. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 49(2) </volume> <pages> 306-324, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory <ref> [KPS93, KPS94] </ref>, first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95].
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall International Series In Computer Science, </publisher> <editor> C. A. R. Hoare series editor, </editor> <year> 1989. </year>
Reference-contexts: We show that the rational points in finitary rational spaces in some sense exactly capture the topological structure of the spaces. We investigate congruences in -hypergraphs and their interplay with the Myhill-Nerode characterization. Congruences in rational spaces are strongly related to the notion of bisimulation <ref> [Mil89] </ref> in models of concurrency and a similar notion has appeared in [Koz94] in the context of efficient constraint solving. We also determine the computational complexity of some decision problems related to rational embeddings. The rest of the paper is organized as follows. <p> In this case the largest D-congruence, ~, has the following relation to Milner's strong bisimulation <ref> [Mil89] </ref>: ~ is the largest strong bisimulation with the additional property that d ~ d 0 if and only if d and d 0 labeled identically (with respect to the constants). Definition 19. Let D = (D; E) be a hypergraph and be a D-congruence.
Reference: [Mis84] <author> P. Mishra. </author> <title> Towards a theory of types in PROLOG. </title> <booktitle> In Proc. 1st Symp. Logic Programming, </booktitle> <pages> pages 289-298. </pages> <publisher> IEEE, </publisher> <year> 1984. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [MR85] <author> P. Mishra and U. Reddy. </author> <title> Declaration-free type checking. </title> <booktitle> In Proc. 12th Symp. Principles of Programming Languages, </booktitle> <pages> pages 7-21. </pages> <publisher> ACM, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [Rey69] <author> J. C. Reynolds. </author> <title> Automatic computation of data set definitions. </title> <booktitle> In Information Processing 68, </booktitle> <pages> pages 456-461. </pages> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
Reference: [Ste94a] <author> K. Stefansson. </author> <title> Systems of set constraints with negative constraints are NEXPTIME-complete. </title> <booktitle> In Proc. 9th Symp. Logic in Computer Science, </booktitle> <pages> pages 137-141. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure.
Reference: [Ste94b] <author> K. Stefansson. </author> <title> Systems of set constraints with negative constraints are NEXPTIME-complete. </title> <booktitle> In Proc. LICS'94, Ninth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 137-141, </pages> <year> 1994. </year>
Reference-contexts: Lemma 29. Given a finite D and a d 2 D. The accessibility problem lies in NP. Proof. From [AKW95] it follows that the problem can be reduced in time polynomial in the size of D to the Nonlinear Reachability Problem (NRP). Since the NRP is NP-complete <ref> [Ste94b] </ref> it follows that the accessibility problem is in NP. The following lemma provides a useful characterization of rational embed-dings. Lemma 30. Given a rational map b h : R (D) ! R (D 0 ) between finitary rational spaces.
Reference: [YO88] <author> J. Young and P. O'Keefe. </author> <title> Experience with a type evaluator. </title> <editor> In D. Bjtrner, A. P. Ershov, and N. D. Jones, editors, </editor> <booktitle> Partial Evaluation and Mixed Computation, </booktitle> <pages> pages 573-581. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year> <title> This article was processed using the L A T E X macro package LLNCS style 20 </title>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei92, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the computational complexity of the satis-fiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94a].
References-found: 30

