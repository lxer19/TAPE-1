URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/UW-CSE-90-05-01.PS.Z
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/
Root-URL: http://www.cs.berkeley.edu
Email: bcn@cs.washington.edu  
Title: The Virtual System Model: A Scalable Approach to Organizing Large Systems problems, but these approaches
Author: B. Clifford Neuman 
Degree: A Thesis Proposal  
Note: In recent years, several approaches have been devised to address these  propose to cover in the dissertation. This research was supported in part by the National Science Foundation (Grants No. DCR-8420945 and CCR 8611390), US WEST Advanced Technologies, and Digital Equipment Corporation.  
Date: May, 1990 1 Motivation  
Address: FR-35 Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Pubnum: Technical Report 90-05-01  
Abstract: In recent years, many researchers have explored mechanisms that allow systems to span large networks. Few, however, have looked at the problems that will confront the users of these highly distributed systems. There will be a huge amount of information available within such a system, and that information will be scattered about. Even if users can access it all, there will be so much that is irrelevant that it will be difficult to identify the pieces that are of interest. This problem has two aspects. First, users must be able to keep track of objects about which they already know and in which they have indicated an interest. Second, users must be able to identify objects of potential interest about which they do not already know. The mechanisms that solve the two sub-problems should work together; users are often willing to spend time organizing information for their own use, and it should be possible for the meta-information, so specified, to be shared with others. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Luis-Felipe Cabrera and Jim Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: As noted earlier, there are two major goals: to allow each user to organize objects that are known, and to identify objects of potential interest. The user-centered namespace <ref> [1, 2] </ref> is the predominant approach used to address the first problem. A user-centered namespace allows each user's view of the system-wide namespace to be organized according to the user's preferences.
Reference: [2] <author> Douglas Comer and Thomas P. Murtagh. </author> <title> The Tilde file naming scheme. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 509-514, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: As noted earlier, there are two major goals: to allow each user to organize objects that are known, and to identify objects of potential interest. The user-centered namespace <ref> [1, 2] </ref> is the predominant approach used to address the first problem. A user-centered namespace allows each user's view of the system-wide namespace to be organized according to the user's preferences.
Reference: [3] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: This approach requires that the right cross-references be in place before the query is made, negating one of the advantages of attribute-based systems, i.e., that the links corresponding to a particular query need not be in place ahead of time. Several recent systems support a uniform global namespace <ref> [3, 7, 11] </ref>. A uniform namespace facilitates sharing since each user uses the same name to refer to an object. While this helps users identify and find the objects about which they have learned (e.g., from other users), it does not directly help them discover objects of potential interest. <p> I would like to implement Prospero in (through) the kernel. This would solve several problems, and would result in automatic support for Prospero by all applications. A kernel implementation would be best handled by incorporating the upcall mechanism from AFS <ref> [3] </ref>, and placing the Prospero resolver in an application process. The hard part has already been done by others. Finally, Prospero must be made robust enough so that it can be used by others.
Reference: [4] <author> B. Clifford Neuman. </author> <title> The need for closure in large distributed systems. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 28-30, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: As indicated earlier, the fact that the same name may refer to different objects at different times can make a user-centered namespace confusing, and can hinder sharing. To address this problem, the Virtual System Model includes the concept of closure <ref> [4, 9] </ref>. Each object has an associated namespace. In this way, the context within which a name is to be resolved is automatically passed along with the object specifying the name. Although the same name may refer to different objects within different contexts, the correct context is always known.
Reference: [5] <author> B. Clifford Neuman. </author> <title> The Virtual System Model for large distributed operating systems. </title> <type> Technical Report 89-01-07, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: The next section describes a model for organizing large systems that supplies the needed direction. 3 The Virtual System Model My approach to the problems of object organization and discovery is embodied in the Virtual System Model <ref> [5, 6] </ref>. In the Virtual System Model, each user creates a set of virtual systems. Each virtual system defines a different, customized view of the underlying system. This allows users to organize the objects and information about which they already know in multiple ways.
Reference: [6] <author> B. Clifford Neuman. </author> <title> Workstations and the Virtual System Model. </title> <booktitle> In Proceeding of the 2nd IEEE Workshop on Workstation Operating Systems, </booktitle> <pages> pages 91-95, </pages> <month> September </month> <year> 1989. </year> <journal> Also appears in the Newsletter of the IEEE Technical Committee on Operating Systems, </journal> <volume> Volume 3, Number 3, </volume> <month> Fall </month> <year> 1989. </year>
Reference-contexts: The next section describes a model for organizing large systems that supplies the needed direction. 3 The Virtual System Model My approach to the problems of object organization and discovery is embodied in the Virtual System Model <ref> [5, 6] </ref>. In the Virtual System Model, each user creates a set of virtual systems. Each virtual system defines a different, customized view of the underlying system. This allows users to organize the objects and information about which they already know in multiple ways.
Reference: [7] <author> John K. Ousterhout, Andrew R. Cherenson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch. </author> <title> The Sprite network operating system. </title> <journal> Computer, </journal> <volume> 21(2) </volume> <pages> 23-35, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: This approach requires that the right cross-references be in place before the query is made, negating one of the advantages of attribute-based systems, i.e., that the links corresponding to a particular query need not be in place ahead of time. Several recent systems support a uniform global namespace <ref> [3, 7, 11] </ref>. A uniform namespace facilitates sharing since each user uses the same name to refer to an object. While this helps users identify and find the objects about which they have learned (e.g., from other users), it does not directly help them discover objects of potential interest.
Reference: [8] <author> Larry L. Peterson. </author> <title> The Profile naming service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: It should be pointed out that the other approaches that I will describe are all, in some sense, databases, but that they are specialized to the task at hand. An approach related to the database approach is attribute-based <ref> [8] </ref> naming. In attribute-based naming, objects are named by a collection of attributes. In specifying an object, attributes may be omitted, and only enough attributes to uniquely identify the object must be provided. One problem with attribute-based naming is that the attributes must be registered ahead of time. <p> One attribute-based naming system, Profile <ref> [8] </ref>, restricts the set of name servers that are queried, and relies on cross-references to direct queries to servers that were not included in the original set.
Reference: [9] <author> Jerome H. Saltzer. </author> <title> Operating Systems: an advanced course, </title> <booktitle> volume 60 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1978. </year> <note> Chapter on naming. </note>
Reference-contexts: As indicated earlier, the fact that the same name may refer to different objects at different times can make a user-centered namespace confusing, and can hinder sharing. To address this problem, the Virtual System Model includes the concept of closure <ref> [4, 9] </ref>. Each object has an associated namespace. In this way, the context within which a name is to be resolved is automatically passed along with the object specifying the name. Although the same name may refer to different objects within different contexts, the correct context is always known.
Reference: [10] <author> M. F. Schwartz. </author> <title> The networked resource discovery project. </title> <booktitle> In Proceedings of the IFIP XI World Congress, </booktitle> <pages> pages 827-832, </pages> <month> August </month> <year> 1989. </year> <note> San Francisco. </note>
Reference-contexts: Below that level, all names remain the same as in the primary hierarchy. There are other approaches that have been proposed for identifying objects of potential interest. Schwartz proposes the use of resource discovery agents <ref> [10] </ref> which accept queries from users and use the information provided by the user to find objects in which the user is interested. In Schwartz's 3 design, the information needed to direct a query to the appropriate agent evolves over time.
Reference: [11] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The Locus distributed operating system. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 49-70, </pages> <month> October </month> <year> 1983. </year> <month> 9 </month>
Reference-contexts: This approach requires that the right cross-references be in place before the query is made, negating one of the advantages of attribute-based systems, i.e., that the links corresponding to a particular query need not be in place ahead of time. Several recent systems support a uniform global namespace <ref> [3, 7, 11] </ref>. A uniform namespace facilitates sharing since each user uses the same name to refer to an object. While this helps users identify and find the objects about which they have learned (e.g., from other users), it does not directly help them discover objects of potential interest.
References-found: 11

