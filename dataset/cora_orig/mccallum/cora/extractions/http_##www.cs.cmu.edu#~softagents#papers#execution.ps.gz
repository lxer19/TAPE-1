URL: http://www.cs.cmu.edu/~softagents/papers/execution.ps.gz
Refering-URL: http://www.cs.cmu.edu/~softagents/publications_old.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (mikew,decker,sycara)@cs.cmu.edu  
Title: Executing Decision-theoretic Plans in Multi-agent Environments (Extended Abstract)  
Author: Mike Williamson and Keith Decker and Katia Sycara 
Date: April 15, 1996  
Address: 5000 Forbes Ave., Pittsburgh, PA 15213  
Affiliation: The Robotics Institute, Carnegie-Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J Ambros-Ingerson and S. Steel. </author> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> pages 735-740, </pages> <year> 1988. </year>
Reference-contexts: See [10] for a complete description of our representation. 7 Provisions are a generalization of parameters and "runtime variables" <ref> [1, 4, 8] </ref>. 8 send the query to the other agent and process the reply when it arrives. 8 If the chosen agent is unable to answer the query, a "DOWN" outcome will be propagated upwards to "Query Agent," thereby reactivating the "Find Agent" task.
Reference: [2] <author> K.S. Decker, V.R. Lesser, M.V. Nagendra Prasad, and T. Wagner. MACRON: </author> <title> an architecture for multi-agent cooperative information gathering. </title> <booktitle> In Proccedings of the CIKM-95 Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year>
Reference-contexts: The generic software components are common to all agents, from the simple information agents to more complex task agents and interface agents. Our current agent architecture is an instantiation of the DECAF (Distributed, Environment-Centered Agent Framework) architecture <ref> [2] </ref> (Figure 2). The control process for agents includes steps for planning to achieve local or non-local objectives, scheduling the actions within these plans, and actually carrying out these actions. These control processes can be thought of as occurring concurrently, although they are serialized in our implementation.
Reference: [3] <author> K. Erol, J. Hendler, and D. Nau. UMCP: </author> <title> A sound and complete procedure for hierarchical task-network planning. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 249-254, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The objectives collectively provide a basis for the definition of 4 the agent's utility function. The agent's hierarchical task network (HTN) planning process <ref> [3] </ref> takes as input the agent's current set of objectives, the current set of task structures, and a library of task reduction schemas.
Reference: [4] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1992. </year> <note> Morgan Kaufmann. Available via FTP from pub/ai/ at ftp.cs.washington.edu. 12 </note>
Reference-contexts: See [10] for a complete description of our representation. 7 Provisions are a generalization of parameters and "runtime variables" <ref> [1, 4, 8] </ref>. 8 send the query to the other agent and process the reply when it arrives. 8 If the chosen agent is unable to answer the query, a "DOWN" outcome will be propagated upwards to "Query Agent," thereby reactivating the "Find Agent" task.
Reference: [5] <author> T. Finin, R. Fritzson, D. McKay, and R. McEntire. </author> <title> KQML as an agent communication language. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: This information exchange is managed by a well-known "matchmaker" agent. The system's organization can change over time in response to the arrival of new agents, the departure of agents, and the creation of new 2 Warren agents use KQML for inter-agent communication <ref> [5] </ref>. 3 relationships between agents (as the user and agents respond to new information or changes in the environment). However, the organization can also remain relatively static for extended periods (for example, while monitoring currently held investments during stable market periods).
Reference: [6] <author> R.J. Firby. </author> <title> Task networks for controlling continuous processes. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <year> 1994. </year>
Reference-contexts: ask and querying that agent. (Finding an agent is itself a complicated process, that involves sending a (different) query to the matchmaker agent.) "Query Agent" is reduced to two primitive actions, which 6 Our task network formalism also incorporates features of reactive task architectures such as TCA [9] and RAPS <ref> [6] </ref>.
Reference: [7] <author> M.R. Genesereth and S.P. Katchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) 48-53,147, </volume> <year> 1994. </year>
Reference-contexts: Rigid organizational structures such as this one offer a number of tradeoffs. One pos 9 For robustness and scalability, the matchmaking duties could be distributed among many agents, instead of centralized in one. 10 Brokers are very similar to facilitators <ref> [7] </ref>. 11 Assuming there is always at least one ticker agent able to meet the portfolio agent's needs. 11 itive attribute is that such structures allow for load balancing and other efficient uses of network resources.
Reference: [8] <author> C. Knoblock. </author> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proc. 15th Int. Joint Conf. on A.I., </booktitle> <pages> pages 1686-1693, </pages> <year> 1995. </year>
Reference-contexts: See [10] for a complete description of our representation. 7 Provisions are a generalization of parameters and "runtime variables" <ref> [1, 4, 8] </ref>. 8 send the query to the other agent and process the reply when it arrives. 8 If the chosen agent is unable to answer the query, a "DOWN" outcome will be propagated upwards to "Query Agent," thereby reactivating the "Find Agent" task.
Reference: [9] <author> R. Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: an agent to ask and querying that agent. (Finding an agent is itself a complicated process, that involves sending a (different) query to the matchmaker agent.) "Query Agent" is reduced to two primitive actions, which 6 Our task network formalism also incorporates features of reactive task architectures such as TCA <ref> [9] </ref> and RAPS [6].
Reference: [10] <author> M. Williamson, K. Decker, and K. Sycara. </author> <title> Unified information and control flow in hierarchical task networks. </title> <booktitle> Submitted to AAAI-96 workshop on Theories of Planning, Action, and Control, </booktitle> <year> 1996. </year> <month> 13 </month>
Reference-contexts: See <ref> [10] </ref> for a complete description of our representation. 7 Provisions are a generalization of parameters and "runtime variables" [1, 4, 8]. 8 send the query to the other agent and process the reply when it arrives. 8 If the chosen agent is unable to answer the query, a "DOWN" outcome will
References-found: 10

