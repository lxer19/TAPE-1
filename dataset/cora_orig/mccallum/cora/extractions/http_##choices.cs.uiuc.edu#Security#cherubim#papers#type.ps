URL: http://choices.cs.uiuc.edu/Security/cherubim/papers/type.ps
Refering-URL: http://choices.cs.uiuc.edu/Security/cherubim/papers/
Root-URL: http://www.cs.uiuc.edu
Title: Secure Type System and Information Flow in Cherubim's Bootstrapping Process  
Abstract: The bootstrapping process of Cherubim security system uses smartcard to allow Cherubim client to universally access remote standard service. In order to prevent any leakage of sensitive data, we apply a secure flow type system to the bootstrapping source codes. The type system guarantees that well-typed programs satisfy a noninterference security property. This means the program does not "leak" sensitive data. The type system also produces principal types for type-correct programs that characterize how programs can be called securely. The analysis demonstrate that the type system is very useful to many emerging Internet application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. A. Arbaugh, D. J. Farber, and J. M. Smith. </author> <title> A secure and reliable boostrap architecture. </title> <booktitle> In Proc. of the 1997 IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: These classes are loaded using a Cherubim policy that is located on the user's home machine. The initial booting of the Cherubim System proceeds as follows: 1. Client machine boots its Operating System and Java Virtual Machine (this may be done with AEGIS <ref> [1] </ref> or a similar system) 2. User runs Boot program 2 3. Boot program prompts for passphrase 4. Boot program hashes passphrase using SHA-1 to an IDEA symmetric key 5. Boot program uses IDEA key to decrypt smartcard (including private keys) 6.
Reference: [2] <author> D. Bell and L. LaPadula. </author> <title> Secure computer systems: Mathematical foundations and model. </title> <type> Technical Report M74-244, </type> <institution> MITRE Corp., </institution> <year> 1973. </year>
Reference-contexts: 1 Introduction To prevent unintentional leakage of data is an important issue in bootstrapping process using smartcard in security system. The problem of secure information flow within systems having different sensitivity levels has been recognized widely and studied extensively. The early work was by Bell and LaPadula <ref> [2] </ref>, and it was extended by Denning's lattice-model [3, 4]. Denning used program certification, an efficient form of static analysis that could be incorporated into a compiler to verify secure information flow in programs.
Reference: [3] <author> D. E. Denning. </author> <title> A lattice model of secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 236-242, </pages> <year> 1976. </year>
Reference-contexts: The problem of secure information flow within systems having different sensitivity levels has been recognized widely and studied extensively. The early work was by Bell and LaPadula [2], and it was extended by Denning's lattice-model <ref> [3, 4] </ref>. Denning used program certification, an efficient form of static analysis that could be incorporated into a compiler to verify secure information flow in programs. Other more recent efforts tried to extend the analysis to special language features like procedures and nondeterminism, while others focused on integrity only.
Reference: [4] <author> D. E. Denning and P. Denning. </author> <title> Certification of programs for secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 20(7) </volume> <pages> 504-513, </pages> <year> 1977. </year>
Reference-contexts: The problem of secure information flow within systems having different sensitivity levels has been recognized widely and studied extensively. The early work was by Bell and LaPadula [2], and it was extended by Denning's lattice-model <ref> [3, 4] </ref>. Denning used program certification, an efficient form of static analysis that could be incorporated into a compiler to verify secure information flow in programs. Other more recent efforts tried to extend the analysis to special language features like procedures and nondeterminism, while others focused on integrity only. <p> It has been show that the secure flow problem for a typical programming language is undecidable <ref> [4] </ref>. Therefore any sound and recursive logic for proving that programs have no secure flow violations is incomplete. This partly explains the previous problems, such as randomness and proper classifications of information. There are other things that the current secure type system doesn't handle.
Reference: [5] <author> J. Goguen and J. Meseguer. </author> <title> Security polities and security models. </title> <booktitle> In Proc. of the 1982 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 11-20, </pages> <year> 1982. </year>
Reference-contexts: Although Denning provides some intuitive argument and some account of information flow in terms of classical information theory, no formal soundness proof is attempted. Recently, Volpano et. al [6, 8] took a type-based approach to the analysis and proved soundness which resembles traditional noninterference <ref> [5] </ref>. The certification conditions of Denning's analysis are formulated as a simple type system. Basically a type system is a formal system of type inference rules for making judgments about programs. Traditionally, they are used to reason about type correctness of strongly-typed programs.
Reference: [6] <author> D. Volpano and C. </author> <title> Irvine. Secure flow typing. </title> <journal> Computer and Security, </journal> <volume> 16(2) </volume> <pages> 137-144, </pages> <year> 1997. </year>
Reference-contexts: Although Denning provides some intuitive argument and some account of information flow in terms of classical information theory, no formal soundness proof is attempted. Recently, Volpano et. al <ref> [6, 8] </ref> took a type-based approach to the analysis and proved soundness which resembles traditional noninterference [5]. The certification conditions of Denning's analysis are formulated as a simple type system. Basically a type system is a formal system of type inference rules for making judgments about programs. <p> A type inference algorithm not only proves whether a procedure is typable, or free of illegal flows, but it also produces a principal type <ref> [7, 6] </ref>, which succinctly conveys how the program can be executed securely. A principal type is a constrained type scheme with a constraint set of flat subtype inequalities among security levels. <p> So the principal type make a procedure effectively parameterized on the security classes of its formal parameters. In this sense, it is polymorphic. As an example from <ref> [6] </ref>, consider the library decryption procedure in Figure 1. The encrypted character array cipher is decrypted using key and stored in clear. The actual decryption is done by D and the cost of doing the decryption is stored in variable charge.
Reference: [7] <author> D. Volpano and G. Smith. </author> <title> A type-based approach to program security. </title> <booktitle> In Proc. Theory and Practice of Software Development, volume of 1214 of Lecture Notes in Computer Science, </booktitle> <pages> pages 607-621, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: A type inference algorithm not only proves whether a procedure is typable, or free of illegal flows, but it also produces a principal type <ref> [7, 6] </ref>, which succinctly conveys how the program can be executed securely. A principal type is a constrained type scheme with a constraint set of flat subtype inequalities among security levels.
Reference: [8] <author> D. Volpano, G. Smith, and C. </author> <title> Irvine. A sound type system for secure flow analysis. </title> <journal> Journal of Computer Security, </journal> <volume> 4(2,3):167-187, </volume> <year> 1996. </year>
Reference-contexts: Although Denning provides some intuitive argument and some account of information flow in terms of classical information theory, no formal soundness proof is attempted. Recently, Volpano et. al <ref> [6, 8] </ref> took a type-based approach to the analysis and proved soundness which resembles traditional noninterference [5]. The certification conditions of Denning's analysis are formulated as a simple type system. Basically a type system is a formal system of type inference rules for making judgments about programs. <p> Similarly, the rule for the condition is as: fl ` c : t cmd; fl ` if e then c else c 0 : t cmd and for the while loop: fl ` e : t; fl ` while e do c : t cmd The reference <ref> [8] </ref> gives more complete treatment of inference rules.

References-found: 8

