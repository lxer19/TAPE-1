URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/TCS.rpoPSN.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/
Root-URL: http://www.win.tue.nl
Email: bloo@win.tue.nl  herman@win.tue.nl  
Title: Explicit Substitution: on the Edge of Strong Normalization  
Author: Roel Bloo Herman Geuvers 
Abstract: We use the Recursive Path Ordering (RPO) technique of semantic labelling to show the Preservation of Strong Normalization (PSN) property for several calculi of explicit substitution. Preservation of Strong Normalization states that if a term M is strongly normalizing under ordinary fi-reduction (using `global' substitutions), then it is strongly normalizing if the substitution is made explicit (`local'). There are different ways of making global substitution explicit and PSN is a quite natural and desirable property for the explicit substitution calculus. Our method for proving PSN is very general and applies to several known systems of explicit substitutions, both with named variables and with De Bruijn indices: AE of Lescanne et al., s of Kamareddine and Rios and x of Rose and Bloo. We also look at two small extensions of the explicit substitution calculus that allow to permute substitutions. For one of these extensions PSN fails (using the counterexample in [Mellies 95]). For the other we can prove PSN using our method, thus showing the subtlety of the subject and the generality of our method. One of the key ideas behind our proof is that, for x the set of terms of the explicit substitution calculus, we look at the set x &lt;1 , consisting of the terms A such that the substitution-normal-form of each subterm of A is fi-SN. This is a kind of `induction loading': if we prove that x-reduction is SN on the set x &lt;1 , then we have proved PSN for x. To prove x-SN on the set x &lt;1 , we define the fi-size of a term A 2 x &lt;1 as the maximum length of a fi-reduction path from the substitution-normal-form of A. Using this fi-size, we define a translation from x &lt;1 to some well-founded order &gt; rpo on labelled terms, such that any infinite x-reduction path starting from an A 2 x &lt;1 translates to an infinite &gt; rpo -descending sequence. The well-founded order &gt; rpo is defined by using the technique of semantic labelling. Keywords: lambda-calculus, explicit substitution, recursive path order. 
Abstract-found: 1
Intro-found: 1
Reference: [Abadi et al. 90] <author> Abadi, M., Cardelli, L., Curien, P.-L., and Levy, J.-J., </author> <title> Explicit substitutions, </title> <booktitle> in POPL '90|Seventeenth Annual ACM Symposium on Principles of Programming Languages (San Francisco, </booktitle> <address> California, </address> <month> jan. </month> <year> 1990). </year>
Reference-contexts: 1 Introduction Explicit Substitution was first studied by Abadi, Cardelli, Curien and Levy in <ref> [Abadi et al. 90] </ref>. They proposed a calculus oe of explicit substitutions which can compose substitutions. Mellies has shown that simply typable terms can have infinite reduction paths in oe ([Mellies 95]). <p> Now, PSN is obtained from the fact that =fl and ! x are strongly normalizing. To show the flexibility of our proof method we use it for different calculi of explicit substitution. We start off with a calculus with named variables (different from, e.g. <ref> [Abadi et al. 90] </ref>, where De Bruijn-indices are used). We have chosen to use named variables because this makes the presentation better accessible for non-specialists. Moreover, it makes it easier to single out the places where the difficulties arise in the calculus of [Abadi et al. 90]. <p> calculus with named variables (different from, e.g. <ref> [Abadi et al. 90] </ref>, where De Bruijn-indices are used). We have chosen to use named variables because this makes the presentation better accessible for non-specialists. Moreover, it makes it easier to single out the places where the difficulties arise in the calculus of [Abadi et al. 90]. Hence, it helps clarifying the problem of PSN. It should be remarked that it is not always straightforward how to turn a calculus without named variables into a calculus with names, e.g. for oe this is complicated because of the complex notion of scope. <p> The calculus oe of <ref> [Abadi et al. 90] </ref> was designed to be able to compose substitutions. The price however is not having PSN (cf. [Mellies 95]). Since x has no composition but does have PSN, it is an interesting question where the borderline is between PSN and composition of substitutions. <p> Since x has no composition but does have PSN, it is an interesting question where the borderline is between PSN and composition of substitutions. We start with a short discussion of oe. For the precise definition of oe, the reader is referred to <ref> [Abadi et al. 90] </ref>. The composition of substitutions in oe is mainly performed by two rules, Comp and Map.
Reference: [Abramsky et al. 1992] <editor> Abramsky, S., Gabbay, Dov M., and Maibaum, T. S. E. (eds.), </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> II , Oxford University Press, </publisher> <year> 1992. </year>
Reference: [BBLR 95] <author> Benaissa, Z.E.A., Briaud, D., Lescanne, P. and Rouyer-Degli, J., AE, </author> <title> a calculus of explicit substitutions which preserves strong normalization, </title> <journal> Journal of Functional Programming, </journal> <volume> vol. 6, nr. 5, </volume> <year> 1996. </year>
Reference-contexts: 1 Introduction Explicit Substitution was first studied by Abadi, Cardelli, Curien and Levy in [Abadi et al. 90]. They proposed a calculus oe of explicit substitutions which can compose substitutions. Mellies has shown that simply typable terms can have infinite reduction paths in oe ([Mellies 95]). Several people (see <ref> [BBLR 95] </ref>, [Bloo & Rose 95], [Bloo 95], [Kamareddine & Rios 95], [Munoz 96]) have succeeded in defining calculi of explicit substitutions which have the nice property that every term which is strongly normalizing for fi-reduction is also strongly normalizing in the explicit substitution calculus. <p> Then A 2 x &lt;1 , so A 2 SN x , using the first item. 2 5 AE, s and extensions In this section we show that our method is general enough to show PSN for other calculi of explicit substitutions such as AE of <ref> [BBLR 95] </ref> and s of [Kamareddine & Rios 95], and also some extensions of x. <p> explain these intuitive motivations is the following. (For reasons of legibility we have removed some brackets.) (((12)))(11) ! AEBeta ((12))[11=] ! AE ((12)[* (11=)]) ! AE (12 [* (11=)]) ! AE (1 (11)["]) ! AE (1 (22)) For a detailed explanation and motivation of the system AE we refer to <ref> [BBLR 95] </ref>. Definition 5.2 Terms and substitutions of s are defined by the following abstract syntaxes: a ::= n (aa) (a) (OE i where n; i range over IN + and j ranges over IN. <p> In <ref> [BBLR 95] </ref> it is shown that AE has PSN by contradicting the existence of a minimal infinite AE-reduction of a term which is SN for ! fi ; in [Kamareddine & Rios 95] PSN is shown to hold for s in a similar way.
Reference: [Bloo 95] <author> Bloo, R., </author> <title> Preservation of Strong Normalization for Explicit Substitution, </title> <institution> Computing Science Report 95-08, Eindhoven University of Technology. </institution>
Reference-contexts: They proposed a calculus oe of explicit substitutions which can compose substitutions. Mellies has shown that simply typable terms can have infinite reduction paths in oe ([Mellies 95]). Several people (see [BBLR 95], [Bloo & Rose 95], <ref> [Bloo 95] </ref>, [Kamareddine & Rios 95], [Munoz 96]) have succeeded in defining calculi of explicit substitutions which have the nice property that every term which is strongly normalizing for fi-reduction is also strongly normalizing in the explicit substitution calculus. We call this property: PSN (Preservation of Strong Normalization). <p> The problem is that if A ! Beta B then sometimes x (A) j x (B), as in xhy:=(z:C)Di ! Beta xhy:=Chz:=Dii. A proof of PSN by analyzing what can happen inside `void' substitutions such as in this example is given in <ref> [Bloo 95] </ref> and in [Bloo & Rose 95]. Lemma 2.9 (Soundness) For all pure terms A; B, if A ! fi B then A !! x B. Proof: Induction on the structure of A, using Lemma 2.7 (substitution).
Reference: [Bloo & Rose 95] <author> Bloo, R., and Rose, K. H., </author> <title> Preservation of Strong Normalization in Named Lambda Calculi with Explicit Substitution and Garbage Collection, </title> <editor> in: J.C. van Vliet, ed., </editor> <booktitle> Proceedings of CSN'95 (Computing Science in the Netherlands), </booktitle> <address> ISBN 90 6196 460 1, </address> <note> also available as technical report via WWW; URL: ftp://ftp.diku.dk/diku/semantics/papers/D-246.ps. </note>
Reference-contexts: They proposed a calculus oe of explicit substitutions which can compose substitutions. Mellies has shown that simply typable terms can have infinite reduction paths in oe ([Mellies 95]). Several people (see [BBLR 95], <ref> [Bloo & Rose 95] </ref>, [Bloo 95], [Kamareddine & Rios 95], [Munoz 96]) have succeeded in defining calculi of explicit substitutions which have the nice property that every term which is strongly normalizing for fi-reduction is also strongly normalizing in the explicit substitution calculus. <p> The problem is that if A ! Beta B then sometimes x (A) j x (B), as in xhy:=(z:C)Di ! Beta xhy:=Chz:=Dii. A proof of PSN by analyzing what can happen inside `void' substitutions such as in this example is given in [Bloo 95] and in <ref> [Bloo & Rose 95] </ref>. Lemma 2.9 (Soundness) For all pure terms A; B, if A ! fi B then A !! x B. Proof: Induction on the structure of A, using Lemma 2.7 (substitution).
Reference: [Bloo & Rose 96] <author> Bloo, R., and Rose, K. H., </author> <title> Combinatory Reduction Systems with Explicit Substitution that Preserve Strong Normalization, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 1103, </volume> <booktitle> Rewrite Techniques and Applications '96, </booktitle> <pages> pages 169-183 , Springer-Verlag, </pages> <year> 1996. </year>
Reference-contexts: Further applications of this method that are under investigation: * give a maximal strategy for x-reduction and an inductive characterization of the set x &lt;1 . * give a general PSN proof for combinatory reduction systems with explicit substitution (cf. [Rose 95], <ref> [Bloo & Rose 96] </ref>) * give a (first order) calculus with explicit substitution which has PSN as well as confluence on open terms. 8 Acknowledgements Thanks to Thomas Arts for making us aware of current notations for the recursive path orders, using semantic labelling.
Reference: [Dershowitz 79] <author> Dershowitz, N., </author> <title> A note on simplification orderings, </title> <journal> Inf. Proc. </journal> <volume> Letters 9 (5): </volume> <pages> 212-215, </pages> <year> 1979 </year>
Reference-contexts: For a more detailed description and proofs, the reader is referred to <ref> [Dershowitz 79] </ref>, [Zantema 95] and [Ferreira & Zantema 95]. Definition 3.1 Let F be a set of function symbols, X a set of variables such that F " X = ;, let T (F ; X ) be the set of (open) terms over F and X . <p> Then &gt; rpo is well-founded () fl is well-founded Proof: see <ref> [Dershowitz 79] </ref> or [Ferreira & Zantema 95]. 2 4 PSN for x In this section we use the recursive path order to show that x has PSN.
Reference: [Ferreira & Zantema 95] <author> Ferreira, M.C.F., and Zantema, H., </author> <title> Well-foundedness of Term Orderings, </title> <booktitle> proceedings of CTRS-94, Springer, 1995, </booktitle> <volume> LNCS vol. 968, </volume> <pages> pp. 106-123. </pages>
Reference-contexts: The first author was supported by the Netherlands Computer Science Research Foundation (SION) with financial support from the Netherlands Organization for Scientific Research (NWO). the substitution part of oe [Zantema 95], but the technique he used doesn't apply to show PSN. We use a stronger technique called semantic labelling <ref> [Ferreira & Zantema 95] </ref> to show PSN for all explicit substitution calculi known to have the PSN property. We also show why our method doesn't work for oe. <p> For a more detailed description and proofs, the reader is referred to [Dershowitz 79], [Zantema 95] and <ref> [Ferreira & Zantema 95] </ref>. Definition 3.1 Let F be a set of function symbols, X a set of variables such that F " X = ;, let T (F ; X ) be the set of (open) terms over F and X . <p> In <ref> [Ferreira & Zantema 95] </ref>, o is called status function. <p> Then &gt; rpo is well-founded () fl is well-founded Proof: see [Dershowitz 79] or <ref> [Ferreira & Zantema 95] </ref>. 2 4 PSN for x In this section we use the recursive path order to show that x has PSN.
Reference: [FKP 97] <author> Ferreira, Kesner and Puel, </author> <title> -calculi with explicit substitutions and composition which preserve fi-strong normalization (Extended Abstract), </title> <editor> in: Hanus, M., and Rodriguez-Artalejo, M. (eds.), </editor> <booktitle> Proceedings of Algebraic and Logic Programming '96, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 1139, </volume> <pages> pages 284-298, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We call this property: PSN (Preservation of Strong Normalization). In this paper we present a method to prove PSN for explicit substitution calculi based on the recursive path order. In contrast to the work of Ferreira, Kesner and Puel (cf. <ref> [FKP 97] </ref>), our method is applicable to named calculi as well as to calculi based on De Bruijn indices. Furthermore, it yields direct proofs of PSN instead of reducing PSN for a new calculus to PSN for an old calculus.
Reference: [Kamareddine & Nederpelt 93] <author> Kamareddine, F., and Nederpelt, </author> <title> R.P., On stepwise explicit substitution, </title> <booktitle> International Journal of Foundations of Computer Science 4 (3), </booktitle> <pages> 197-240, </pages> <year> 1993. </year> <month> 16 </month>
Reference-contexts: The first glues two substitutions together: a [s][t] Comp ! a [sffit], while Map allows the distribution of the second substitution over the first: (bcs 0 )ffit Map ! b [t]((cs 0 )ffit) Map ! b [t]c [t](s 0 ffit). As was pointed out in <ref> [Kamareddine & Nederpelt 93] </ref>, the substitutions of oe are roughly the same as simultaneous parallel substitutions in the following extension of x: terms t ::= x tt x:t th~x:= ~ ti where h~x:= ~ ti is shorthand for hx 1 ; : : : ; x m :=t 1 ; :
Reference: [Kamareddine & Rios 95] <author> Kamareddine, F., and Rios, A., </author> <title> -calculus a la de Bruijn & explicit substitu-tion, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 982, </volume> <booktitle> 7th international symposium on Programming Languages: Implementations, Logics and Programs, PLILP '95, </booktitle> <pages> pages 45-62 , Springer-Verlag, </pages> <year> 1995. </year>
Reference-contexts: They proposed a calculus oe of explicit substitutions which can compose substitutions. Mellies has shown that simply typable terms can have infinite reduction paths in oe ([Mellies 95]). Several people (see [BBLR 95], [Bloo & Rose 95], [Bloo 95], <ref> [Kamareddine & Rios 95] </ref>, [Munoz 96]) have succeeded in defining calculi of explicit substitutions which have the nice property that every term which is strongly normalizing for fi-reduction is also strongly normalizing in the explicit substitution calculus. We call this property: PSN (Preservation of Strong Normalization). <p> A 2 x &lt;1 , so A 2 SN x , using the first item. 2 5 AE, s and extensions In this section we show that our method is general enough to show PSN for other calculi of explicit substitutions such as AE of [BBLR 95] and s of <ref> [Kamareddine & Rios 95] </ref>, and also some extensions of x. <p> = i OE i k+1 a) k (a 1 a 2 ) ! s (OE i k a 2 ) k n ! s n + i 1 if n &gt; k Again, we don't give a detailed explanation and motivation for the rules of this calculus, but refer to <ref> [Kamareddine & Rios 95] </ref>. Some initial intuition: oe i (b) stands for the substitution of b for i, OE i k (a) stands for `raise all the numbers n &gt; k in the term a with i 1'. <p> In [BBLR 95] it is shown that AE has PSN by contradicting the existence of a minimal infinite AE-reduction of a term which is SN for ! fi ; in <ref> [Kamareddine & Rios 95] </ref> PSN is shown to hold for s in a similar way. We show that AE and s are PSN by using the labelled calculus l . The proof is very similar to the proof of PSN for x that we gave in the previous section.
Reference: [Klop 92] <author> Klop, J. W., </author> <title> Term rewrite systems, </title> <editor> in: [Abramsky et al. </editor> <year> 1992]. </year>
Reference-contexts: So, x has the PSN property, because every -term that is fi-strongly-normalizing is an element of x &lt;1 . For those more familiar with the RPO technique in the way it has been presented in <ref> [Klop 92] </ref>, we also present, in the final section, a translation T from x &lt;1 to commutative labelled trees. This translation is also reduction preserving in the following way (slightly different from the situation for T ). <p> If M ! x N , then T (M ) =fl fl T (N ) and if M ! Beta N , then T (M ) =fl + T (N ). Here, =fl is the rpo-reduction on commutative labelled trees, as defined in <ref> [Klop 92] </ref>, and =fl + and =fl fl are, respectively, its transitive and transitive reflexive closure. Now, PSN is obtained from the fact that =fl and ! x are strongly normalizing. To show the flexibility of our proof method we use it for different calculi of explicit substitution. <p> and SN xc are the same and hence we conclude that PSN holds for xc . 2 that been 6 Proof of PSN using labelled trees In this section we outline a proof of PSN, again using the RPO technique, but now in the way it has been presented in <ref> [Klop 92] </ref>. One then looks at the collection of commutative finite labelled trees Tree (i.e. trees are identified upto permutation of branches: there is no order from left to right in the subtrees). The labels are taken from IN. <p> As usual, the relation =fl + denotes the transitive closure of =fl and =fl fl denotes the transitive reflexive closure of =fl. For examples on the use of these rules we refer to <ref> [Klop 92] </ref>. we just mention the main result, which will be applied here to the problem of PSN for explicit substituion. Theorem 6.2 ([Klop 92],[Dershowitz 79]) The relation =fl + is well-founded on Tree (the set of trees without markers).
Reference: [Mellies 95] <author> Mellies, P.-A., </author> <title> Typed -calculi with explicit substitutions may not terminate, </title> <booktitle> in: Proceedings of TLCA'95 , Lecture Notes in Computer Science, </booktitle> <volume> Vol. 902, </volume> <editor> eds. M. Dezani-Ciancaglini and G. </editor> <publisher> Plotkin. </publisher>
Reference-contexts: Furthermore, we discuss some extensions of x, giving a counterexample to PSN similar to the one of <ref> [Mellies 95] </ref>, but less involved. 5.1 The calculi AE and s Definition 5.1 Terms and substitutions of AE are defined by the following abstract syntaxes. a ::= n (aa) (a) (a [s]); where n ranges over IN + . <p> The calculus oe of [Abadi et al. 90] was designed to be able to compose substitutions. The price however is not having PSN (cf. <ref> [Mellies 95] </ref>). Since x has no composition but does have PSN, it is an interesting question where the borderline is between PSN and composition of substitutions. We start with a short discussion of oe. For the precise definition of oe, the reader is referred to [Abadi et al. 90]. <p> m :=t 1 ; : : : ; t m i; reductions are similar as for x plus the composition rule ah~x:= ~ bih~y:=~ci ! ah~x; ~y:=b 1 h~y:=~ci; : : : ; b m h~y:=~ci; ~ci In this calculus one can imitate the counterexample to PSN of oe (cf <ref> [Mellies 95] </ref>). In fact, even the calculus x extended with the rule ahx:=bihy:=ci ! ahx:=bhy:=cii if y =2 F V (a) (no simultaneous substitutions required) doesn't have PSN. We give an infinite derivation starting from the term . <p> <ref> [Mellies 95] </ref>). In fact, even the calculus x extended with the rule ahx:=bihy:=ci ! ahx:=bhy:=cii if y =2 F V (a) (no simultaneous substitutions required) doesn't have PSN. We give an infinite derivation starting from the term . Note that this term is even simpler than the term used in [Mellies 95].
Reference: [Munoz 96] <author> Mu~noz, C., </author> <title> Confluence and Preservation of Strong Normalization in an Explicit Substitutions Calculus, </title> <booktitle> in: Proceedings of LICS '96, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: They proposed a calculus oe of explicit substitutions which can compose substitutions. Mellies has shown that simply typable terms can have infinite reduction paths in oe ([Mellies 95]). Several people (see [BBLR 95], [Bloo & Rose 95], [Bloo 95], [Kamareddine & Rios 95], <ref> [Munoz 96] </ref>) have succeeded in defining calculi of explicit substitutions which have the nice property that every term which is strongly normalizing for fi-reduction is also strongly normalizing in the explicit substitution calculus. We call this property: PSN (Preservation of Strong Normalization).
Reference: [Rose 95] <author> Rose, K.H., </author> <title> Combinator Reduction Systems with Explicit Substitution, </title> <booktitle> in: Proceedings of HOA'95, (Second International Workshop on Higher-Order Algebra, Logic and Term Rewriting), Paderborn, </booktitle> <address> Germany, </address> <year> 1995, </year> <note> also available as technical report via WWW; URL: ftp://ftp.diku.dk/diku/semantics/papers/D-247.ps. </note>
Reference-contexts: Further applications of this method that are under investigation: * give a maximal strategy for x-reduction and an inductive characterization of the set x &lt;1 . * give a general PSN proof for combinatory reduction systems with explicit substitution (cf. <ref> [Rose 95] </ref>, [Bloo & Rose 96]) * give a (first order) calculus with explicit substitution which has PSN as well as confluence on open terms. 8 Acknowledgements Thanks to Thomas Arts for making us aware of current notations for the recursive path orders, using semantic labelling.
Reference: [Zantema 95] <author> Zantema, H., </author> <title> Termination of Term Rewriting by Semantic Labelling, </title> <journal> Fundamenta Infor-maticae, </journal> <volume> Vol. 24 (1,2), </volume> <pages> pp. 89-105, </pages> <year> 1995 </year> <month> 17 </month>
Reference-contexts: The first author was supported by the Netherlands Computer Science Research Foundation (SION) with financial support from the Netherlands Organization for Scientific Research (NWO). the substitution part of oe <ref> [Zantema 95] </ref>, but the technique he used doesn't apply to show PSN. We use a stronger technique called semantic labelling [Ferreira & Zantema 95] to show PSN for all explicit substitution calculi known to have the PSN property. We also show why our method doesn't work for oe. <p> For a more detailed description and proofs, the reader is referred to [Dershowitz 79], <ref> [Zantema 95] </ref> and [Ferreira & Zantema 95]. Definition 3.1 Let F be a set of function symbols, X a set of variables such that F " X = ;, let T (F ; X ) be the set of (open) terms over F and X . <p> The last two rules are called Decr in <ref> [Zantema 95] </ref> and are necessary to decrease the labels of applications and substitutions if inside of them a ! Beta -reduction is performed.
References-found: 16

