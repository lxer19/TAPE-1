URL: http://www-sqi.cit.gu.edu.au/publications/SPQ-Theory.ps
Refering-URL: http://www-sqi.cit.gu.edu.au/publications/
Root-URL: 
Title: SOFTWARE PRODUCT QUALITY: Theory, Model, and Practice  
Author: R. Geoff. Dromey, 
Keyword: Software product quality models, quality attributes, ISO-9126, quality-carrying properties, large-scale software projects.  
Address: AUSTRALIA  
Affiliation: Software Quality Institute, Griffith University, Nathan, Brisbane, QLD 4111  
Note: Software Quality Institute 09/03/98 15:02  
Abstract: Existing proposals for software product quality have not been underpinned by the sort of empirical theory and supporting models that are found in most scientific endeavours. The present proposal provides a set of axioms and supporting software and quality models needed to construct a comprehensive model for software product quality. This model has been developed using a requirements-design-implementation strategy to ensure that it meets the needs of a number of different interest groups. A significant advantage of the proposed model is that it allows the problem of software product quality to be broken down into intellectually manageable chunks. Other important features of the model are that it has enough structure to characterize software product quality for large and complex systems and it will support practical specification and verification of quality requirements. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Kitchenham, B., </author> <title> (1987) Towards A Constructive Quality Model, </title> <journal> Soft. Eng. Journal, pp105-112. </journal>
Reference-contexts: Evaluation And Comparison With Other Models Work by Kitchenham <ref> [1] </ref> has sought to use a systematic approach to evaluate, compare, rationalise and refine earlier software product quality model proposals. Noting Kitchenham and Pfleegers [1,3] criticisms, we have sought to build on and refine earlier proposals using a constructive, systematic approach.
Reference: 2. <author> Deutsch, M, Willis, R. </author> <title> (1988) Software Quality Engineering, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address>
Reference-contexts: if not followed, in trying to define software product quality has been to provide a high level characterisation using quality attributes and software characteristics and then to proceed to identify a rich and accurate set of tangible quality-carrying properties that help define software characteristics like fault-tolerance, machine-independence, and so on <ref> [2, 7] </ref>. There is no doubt that information arranged in this way is certainly helpful but it does not directly link to components (this issue is addressed in section 5.3). <p> We are currently carrying out this exercise as a basis for building up a comprehensive model for software product quality. A very good starting set of quality-carrying properties can be found in the appendix of reference <ref> [2] </ref> 5.4 Defining Software Characteristics What we have presented thus far is a framework that allows us to specify sets of tangible quality-carrying properties that are chosen to ensure that a range of high-level quality requirements are satisfied for chosen sets of statement, module and data components. <p> This process needs to be done systematically for each of the software characteristics in our model. A useful selection of such determinates can be found in Deutsch and Willis <ref> [2] </ref>. Our task when specifying the quality requirements of a particular classified module is then to consult the properties associated with the relevant software characteristics and select those tangible properties that need to be included in the module-type being specified.
Reference: 3. <author> Kitchenham, B., Pfleeger, </author> <title> S.L., (1996) Software Quality: The Elusive Target, </title> <journal> IEEE Software, </journal> <volume> vol. 13(1), </volume> <pages> pp. 12-21. </pages>
Reference-contexts: be described from five perspectives: transcendental view quality is recognisable but not definable user view quality means fitness-for-purpose manufacturing view quality means conformance to specification product view quality is tied to inherent characteristics of product value-based quality is dependent on how much customer is willing to pay Kitchenham and Pfleeger <ref> [3] </ref> have recently discussed Garvins approach in the context of software product quality.
Reference: 4. <author> Russell, </author> <title> B.,(1917) Mysticism and Logic, </title> <publisher> Routledge and Kegan, London </publisher>
Reference-contexts: Construction of these models will now be described. 4.1 Quality Model Background for what we will discuss on quality models has a long historic basis that dates back to the Ancient Greek philosophers. Russells doctrine <ref> [4] </ref> of logical constructions and what Price [5] calls the Philosophy of Universals, (which is based on Aristotles theory of universalia in rebus) and the Philosophy of Resemblances provides some useful insights.
Reference: 5. <author> Price, H.H., </author> <title> (1969) Thinking and Experience, </title> <address> 3 rd Edition, </address> <publisher> Hutchinson, London. </publisher>
Reference-contexts: Construction of these models will now be described. 4.1 Quality Model Background for what we will discuss on quality models has a long historic basis that dates back to the Ancient Greek philosophers. Russells doctrine [4] of logical constructions and what Price <ref> [5] </ref> calls the Philosophy of Universals, (which is based on Aristotles theory of universalia in rebus) and the Philosophy of Resemblances provides some useful insights. What this latter theory tells us about the world is that there exists a phenomenon called recurrence of characteristics.
Reference: 6. <author> Garvin, D. </author> <title> (1984) What Does Product Quality Really Mean?, Sloan Management Review, </title> <booktitle> Fall 1984, </booktitle> <pages> pp. 25-45. </pages>
Reference-contexts: number of levels by the different interest groups involved with software, to serve as a vehicle for advancing our knowledge of software product quality Software Product Quality 6 Software Quality Institute 09/03/98 15:02 In providing a set of requirements for a quality model it is also instructive to revisit Garvins <ref> [6] </ref> views on quality. <p> Noting Kitchenham and Pfleegers [1,3] criticisms, we have sought to build on and refine earlier proposals using a constructive, systematic approach. In evaluating and comparing the different models for software product quality we will use Garvins criteria <ref> [6] </ref> together with the following questions as criteria.
Reference: 7. <institution> Software Product Evaluation Quality Characteristics And Guidelines For Their Use, ISO/IEC Standard, ISO-9126, Intl Organization For Standardization, Geneva, </institution> <note> 1991 and Revised Draft, </note> <month> February </month> <year> 1997. </year>
Reference-contexts: Below we show a mapping onto a modified/extended version of ISO-9126 <ref> [7] </ref>. The primary interests of clients/sponsors are in the suitability of a software system for its intended purposes. The behaviours, functionality, reliability and efficiency provide an accurate high-level characterisation Software Product Quality 13 Software Quality Institute 09/03/98 15:02 of suitability. <p> Our knowledge of software and experience with its use allows us to instantiate such a framework. Example: One possible instantiation, an augmentation of the ISO-9126 Standard <ref> [7] </ref>, was shown earlier and is again shown below. Third Axiom of Software Product Quality Tangible quality-carrying properties of software components contribute to one or more intangible, high-level quality attributes of software. <p> if not followed, in trying to define software product quality has been to provide a high level characterisation using quality attributes and software characteristics and then to proceed to identify a rich and accurate set of tangible quality-carrying properties that help define software characteristics like fault-tolerance, machine-independence, and so on <ref> [2, 7] </ref>. There is no doubt that information arranged in this way is certainly helpful but it does not directly link to components (this issue is addressed in section 5.3). <p> Models like McCalls violate these selection criteria. McCalls model [1,3] has eleven high-level quality attributes. It also includes properties like correctness which is clearly a product property (software characteristic) rather than a quality attribute. The international standard, ISO-9126 <ref> [7] </ref> conforms better to these selection criteria. Software Product Quality 30 Software Quality Institute 09/03/98 15:02 6.3 Principles For Definition The definitions we have used for quality attributes, software characteristics, and their defining terms are all essentially based on causal relations .
Reference: 8. <author> Dromey, R.G., </author> <title> (1995) A Model For Software Product Quality, </title> <journal> IEEE Trans. Soft. Eng., </journal> <pages> pp 146-162 </pages>
Reference: 9. <author> Dromey, </author> <title> R.G (1996) Cornering The Chimera, </title> <journal> IEEE Software, </journal> <pages> Vo1.3(1) pp 33-43. </pages>
Reference-contexts: We may also link each quality-carrying property to its parent software characteristic and/or high-level quality attribute. Characterisations for the statement components, variable and expression are shown below. A more detailed treatment of these components, including a discussion of their various quality-carrying properties is given elsewhere <ref> [9] </ref>. <p> Like most of the other quality models we have concentrated on quality attributes that pertain to software designs and implementations but not requirements or other software products (elsewhere we have dealt with requirements <ref> [9] </ref>). The other important principle we have used to select quality attributes has been to ask the question is a given candidate attribute a behaviour or a use according to our definitions of these two terms?. Models like McCalls violate these selection criteria.
Reference: 10. <author> Dromey, R.G. </author> <title> (1997) Software Product Quality For Large Projects, (unpublished results) </title>
Reference-contexts: Interoperability analysability maintainability, functionality Data reps. in message comply with nominated, contract specified standard (xx) Interoperability,analysability maintainability functionality Each specified data item in message is set Correctness functionality Commun Ication Data Software Product Quality 26 Software Quality Institute 09/03/98 15:02 Elsewhere we have provided a comprehensive process for module classification <ref> [10] </ref>. This whole proposal for module categorisation has two advantages. First, modules in a system can be put into these different high-level and qualified categories and then tangible properties (including functionality to satisfy the quality requirements) can be assigned. <p> Hence there is a need for the module classification framework to be hierarchical. The same sort of reasoning applies for data and architectures. Elsewhere <ref> [10] </ref> we have set up descriptions for other types of modules and data. Each of these different types of module and data can be specified in a similar way to the examples above.
Reference: 11. <author> Dromey,R.G, McGettrick, </author> <title> A.D (1992) On Specifying Software Quality, </title> <journal> Software Quality Journal, </journal> <volume> vol 1(1), </volume> <pages> pp. 45-74. </pages>
Reference: 12. <author> Dodd, T. </author> <booktitle> (1978) Design and Technology in the School Curriculum, Hodder and Stoughton, </booktitle> <address> London </address>
Reference: 13. <author> Ogden, C.K., Richards, </author> <title> I.A., (1969) The Meaning of Meaning, </title> <publisher> Routledge and Kegan Paul, London. </publisher>
Reference-contexts: Similarly, application independence causes or facilitates the use, reusability ; machine independence contributes to the use, portability , and so on. Definitions based on causal relations are widely used in many disciplines and are advocated in the classic work on the theory of definition <ref> [13] </ref>. In formulating definitions we have employed both top-down and bottom-up strategies. Subordinate behaviours and uses and contributing software characteristics are employed.
Reference: 14. <author> Pan, S., R.G.Dromey, </author> <title> Beyond Structured Programming, </title> <address> ICSE-17, Berlin, </address> <year> 1996. </year>
References-found: 14

