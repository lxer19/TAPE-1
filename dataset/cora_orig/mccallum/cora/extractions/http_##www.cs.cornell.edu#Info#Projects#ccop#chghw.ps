URL: http://www.cs.cornell.edu/Info/Projects/ccop/chghw.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/ccop/reports.html
Root-URL: 
Email: Email: chudak@cs.cornell.edu.  Email: goemans@math.mit.edu.  Email: dorit@hochbaum.berkeley.edu.  Email: dpw@watson.ibm.com.  
Title: A Primal-Dual Interpretation of Two 2-Approximation Algorithms for the Feedback Vertex Set Problem in Undirected
Author: Fabian A. Chudak Michel X. Goemans Dorit S. Hochbaum David P. Williamson 
Keyword: Approximation algorithms, combinatorial optimization, feedback vertex set  
Address: Ithaca, NY 14853.  Room 2-382, M.I.T., Cambridge, MA 02139.  IEOR, 4135 Etcheverry Hall, Berkeley, CA 94720.  Room 33-219, P.O. Box 218, Yorktown Heights, NY, 10598.  
Note: Given  such Address:  Research partially supported by NSF grants CCR-9307391 and DMI-9157199. Address:  Research supported in part by NSF contract 9302476-CCR, DARPA contract N00014-92-J-1799, and a Sloan fellowship. Address:  Research supported in part by ONR contract N00014-91-J-1241. Address:  
Affiliation: Cornell University  M.I.T.  U.C. Berkeley  IBM Watson  School of Operations Research and Industrial Engineering, Cornell University,  Dept. of Mathematics,  University of California, Department of  IBM T.J. Watson Research Center,  
Abstract: Recently, Becker and Geiger [3] and Bafna, Berman, and Fujito [1] gave 2-approximation algorithms for the feedback vertex set problem in undirected graphs. We show how their algorithms can be explained in terms of the primal-dual method for approximation algorithms, which has been used to derive approximation algorithms for network design problems [7]. In the process, we give a new integer programming formulation for the feedback vertex set problem whose integrality gap is at worst a factor of two; the well-known cycle formulation has an integrality gap of fi(log n) [4]. We also give a new 2-approximation algorithm for the problem which is a simplification of the Bafna et al. algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Bafna, P. Berman, and T. Fujito. </author> <title> Constant ratio approximation of the weighted feedback vertex set problem for undirected graphs. </title> <editor> In J. Staples, P. Eades, N. Katoh, and A. Moffat, editors, </editor> <booktitle> ISAAC '95 Algorithms and Computation, number 1004 in Lecture Notes in Computer Science, </booktitle> <pages> pages 142-151. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 11 </month>
Reference-contexts: We say that an fvs F is minimal if for any v 2 F , F v is not an fvs. An fvs F is almost minimal if there is at most one v 2 F such that F v is an fvs. Following Bafna et al. <ref> [1] </ref>, we say that a cycle is semidisjoint if it contains at most one vertex of degree greater than 2. We can now state our theorem. Theorem 1.1 Let F denote any fvs of a graph G = (V; E), where E 6= ;. <p> Inequalities (2) and (1) will be used in giving new integer programming formulations, while inequalities (4) and (3) will be used to prove the performance guarantees of the various algorithms. Inequality (1) is stated in Lemma 3 of Bafna et al. <ref> [1] </ref>, while inequality (4) is a 3 strengthening of their Lemma 4. Inequality (5) is Theorem 4 of Becker and Geiger [3]. Our proofs here are somewhat different from those given in [1] and [3]. Proof : Inequality (2) clearly follows from inequality (1). <p> Inequality (1) is stated in Lemma 3 of Bafna et al. <ref> [1] </ref>, while inequality (4) is a 3 strengthening of their Lemma 4. Inequality (5) is Theorem 4 of Becker and Geiger [3]. Our proofs here are somewhat different from those given in [1] and [3]. Proof : Inequality (2) clearly follows from inequality (1). To prove (1), we consider two cases. If F = V then the hypothesis that E 6= ; ensures that the inequality holds. <p> We now choose some set S that corresponds to a violated constraint of (IP ); we call S a "violated set". To choose S, we call the subroutine Violation. In Bafna et al. <ref> [1] </ref>, there are two cases for a choice of S. The subroutine first looks for a semidisjoint cycle in (V 0 ; E 0 ). If it finds such a cycle, it lets S correspond to the vertices of the cycle, and returns S.
Reference: [2] <author> R. Bar-Yehuda, D. Geiger, J. Naor, and R. M. Roth. </author> <title> Approximation algorithms for the vertex feedback set problem with applications to constraint satisfaction and Bayesian inference. </title> <booktitle> In Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 344-354, </pages> <year> 1994. </year>
Reference-contexts: Even, Naor, Schieber, and Zosin [4] have shown that the integrality gap of this integer program is (log n); Bar-Yehuda, Geiger, Naor, and Roth <ref> [2] </ref> had previously shown that it was O (log n). Observe that if F is a feedback vertex set for G, then clearly F " S is a feedback vertex set for G [S].
Reference: [3] <author> A. Becker and D. Geiger. </author> <title> Approximation algorithms for the loop cutset problem. </title> <booktitle> In Proceedings of the 10th Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> pages 60-68, </pages> <year> 1994. </year>
Reference-contexts: Inequality (1) is stated in Lemma 3 of Bafna et al. [1], while inequality (4) is a 3 strengthening of their Lemma 4. Inequality (5) is Theorem 4 of Becker and Geiger <ref> [3] </ref>. Our proofs here are somewhat different from those given in [1] and [3]. Proof : Inequality (2) clearly follows from inequality (1). To prove (1), we consider two cases. If F = V then the hypothesis that E 6= ; ensures that the inequality holds. <p> Inequality (1) is stated in Lemma 3 of Bafna et al. [1], while inequality (4) is a 3 strengthening of their Lemma 4. Inequality (5) is Theorem 4 of Becker and Geiger <ref> [3] </ref>. Our proofs here are somewhat different from those given in [1] and [3]. Proof : Inequality (2) clearly follows from inequality (1). To prove (1), we consider two cases. If F = V then the hypothesis that E 6= ; ensures that the inequality holds. If F 6= V , observe that the removal of F from G gives an acyclic subgraph.
Reference: [4] <author> G. Even, J. Naor, B. Schieber, and L. Zosin. </author> <title> Approximating minimum subset feedback sets in undirected graphs with applications. </title> <booktitle> In Proceedings of the Fourth Israel Symposium on Theory of Computing and Systems, </booktitle> <pages> pages 78-88, </pages> <year> 1996. </year>
Reference-contexts: The standard cycle formulation of the problem is as follows: Min v2V subject to: (CY C) v2C x v 2 f0; 1g v 2 V; where C is the set of all node sets C of all cycles of the graph. Even, Naor, Schieber, and Zosin <ref> [4] </ref> have shown that the integrality gap of this integer program is (log n); Bar-Yehuda, Geiger, Naor, and Roth [2] had previously shown that it was O (log n).
Reference: [5] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference: [6] <author> M. X. Goemans and D. P. Williamson. </author> <title> Primal-dual approximation algorithms for feedback problems in planar graphs. </title> <editor> In W. H. Cunningham, S. T. McCormick, and M. Queyranne, editors, </editor> <title> Integer Programming and Combinatorial Optimization, </title> <booktitle> number 1084 in Lecture Notes in Computer Science, </booktitle> <pages> pages 147-161. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The primal-dual structure of this algorithm (i.e., increasing duals, choosing the solution elements corresponding to the tight dual constraints, performing a final "clean-up" step in reverse) is the same as that used in a number of other algorithms for rather different problems (e.g., <ref> [9, 10, 6] </ref>). It is not hard to see that this algorithm is effectively equivalent to the following: Start with F = ; and the graph G. Look first for a semidisjoint cycle S; if none is found, set S to be the remaining vertices.
Reference: [7] <author> M. X. Goemans and D. P. Williamson. </author> <title> The primal-dual method for approximation algorithms and its application to network design problems. </title> <editor> In D. S. Hochbaum, editor, </editor> <title> Approximation Algorithms for NP-hard Problems, chapter 4. </title> <address> PWS, Boston, </address> <year> 1996. </year>
Reference: [8] <author> D. S. Hochbaum. </author> <title> Approximating covering and packing problems: Set cover, vertex cover, independent set, and related problems. </title> <editor> In D. S. Hochbaum, editor, </editor> <title> Approximation Algorithms for NP-hard Problems, chapter 3. </title> <address> PWS, Boston, </address> <year> 1996. </year>
Reference: [9] <author> P. Klein and R. Ravi. </author> <title> When cycles collapse: A general approximation technique for constrained two-connectivity problems. </title> <booktitle> In Proceedings of the Third MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 39-55, </pages> <year> 1993. </year> <note> Also appears as Brown University Technical Report CS-92-30. To appear in Algorithmica. </note>
Reference-contexts: The primal-dual structure of this algorithm (i.e., increasing duals, choosing the solution elements corresponding to the tight dual constraints, performing a final "clean-up" step in reverse) is the same as that used in a number of other algorithms for rather different problems (e.g., <ref> [9, 10, 6] </ref>). It is not hard to see that this algorithm is effectively equivalent to the following: Start with F = ; and the graph G. Look first for a semidisjoint cycle S; if none is found, set S to be the remaining vertices.
Reference: [10] <author> D. P. Williamson, M. X. Goemans, M. Mihail, and V. V. Vazirani. </author> <title> A primal-dual approximation algorithm for generalized Steiner network problems. </title> <journal> Combinatorica, </journal> <volume> 15 </volume> <pages> 435-454, </pages> <year> 1995. </year>
Reference-contexts: The primal-dual structure of this algorithm (i.e., increasing duals, choosing the solution elements corresponding to the tight dual constraints, performing a final "clean-up" step in reverse) is the same as that used in a number of other algorithms for rather different problems (e.g., <ref> [9, 10, 6] </ref>). It is not hard to see that this algorithm is effectively equivalent to the following: Start with F = ; and the graph G. Look first for a semidisjoint cycle S; if none is found, set S to be the remaining vertices.
References-found: 10

