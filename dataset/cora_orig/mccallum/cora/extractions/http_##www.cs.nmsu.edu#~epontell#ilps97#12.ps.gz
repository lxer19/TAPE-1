URL: http://www.cs.nmsu.edu/~epontell/ilps97/12.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/ilps97/programme.html
Root-URL: http://www.cs.nmsu.edu
Email: fnf,vscg@oat.ncc.up.pt ines@cos.ufrj.br  
Title: VisAll: A new Tool to Visualise Parallel Execution of Logic Programs explore the implicit parallelism
Author: Nuno Fonseca and Vitor Santos Costa In^es de Castro Dutra 
Note: grams in a transparent manner. Several systems were developed to  logic programming systems. VisAll can  
Address: COPPE/UFRJ  
Affiliation: LIACC, Universidade do Porto  
Abstract: among processors. This paper describes VisAll, a new tool to visualise the parallel execution of logic programs, whose main objective is to help users to develop parallel
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Khayri A. M. Ali and Roland Karlsson. </author> <title> The Muse or-parallel Prolog Model and its Performance. </title> <booktitle> In Proceedings of the 1990 North American Conference on Logic Programming, </booktitle> <pages> pages 757-776. </pages> <publisher> MIT Press, </publisher> <month> October </month> <year> 1990. </year>
Reference-contexts: Several forms of paralellism can be exploited in logic programming systems. The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog [12] and &-Ace [11, 9], or-parallelism in systems such as Aurora [14] and Muse <ref> [1] </ref>, and dependent and-parallelism in systems such as KLIC [22], Parlog [3] and DASWAM [21]. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA [2], Penny [17], ParAKL [18] and the EAM [24]. <p> In the following sections we show how VisAll is applied to some well known parallel logic programming systems. 2.1. Visualising Or-parallel Execution For or-parallel systems VisAll can display, but is not limited to, parallel execution of the Muse <ref> [1] </ref> and Aurora [14] systems. Or-parallelism arises in applications when one executable goal matches more than one clause in the database. Or-parallel execution can be described through or-trees. Implementors of or-parallel systems must deal with problems such as side-effects, that sequentialise execution, and work distribution.
Reference: [2] <author> Manuel Eduardo Correia, Vtor Santos Costa, and Fernando Silva. </author> <title> The SBA: Exploiting Orthogonality in AND-OR Parallel Systems. In ILPS'97, Port Jefferson, </title> <address> NY, USA,, </address> <year> 1997. </year>
Reference-contexts: More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA <ref> [2] </ref>, Penny [17], ParAKL [18] and the EAM [24]. Experience from these systems has shown that the development of efficient parallel logic programming systems is not an easy task. System implementors need to tackle hard problems such as parallel debugging and dynamic distribution of varied sized work among processors. <p> The main goals of VisAll are (i) to allow developers to identify points of the parallel implementation that need to be optimised for the target parallel architecture used; and (ii) to help in parallel debugging. Initially, the system was designed to help the development of SBA <ref> [2] </ref>, a parallel logic programming system that exploits both or-parallelism and independent and-parallelism. Currently, VisAll is capable of visualising synthetic tracefiles for the target SBA system and also other tracefiles taken from parallel systems such as Muse, Aurora and &-Prolog. <p> In this representation, each position in the shared stacks is shadowed by each active or-parallel branch binding stack, so that the complex problems of memory management for independent and-parallel systems need only to be resolved for the shared area. The SBA system <ref> [2] </ref> is being developed at LIACC. VisAll is being developed in the context of the same project and therefore should be able to visualise parallel execution of the model subsumed by the SBA system.
Reference: [3] <author> J. A. Crammond. </author> <title> The Abstract Machine and Implementation of Parallel Parlog. </title> <type> Technical report, </type> <institution> Dept. of Computing, Imperial College, </institution> <address> London, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog [12] and &-Ace [11, 9], or-parallelism in systems such as Aurora [14] and Muse [1], and dependent and-parallelism in systems such as KLIC [22], Parlog <ref> [3] </ref> and DASWAM [21]. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA [2], Penny [17], ParAKL [18] and the EAM [24].
Reference: [4] <editor> Doug DeGroot. Restricted And-Parallelism. In Hideo Aiso, editor, </editor> <booktitle> Proceedings of the 1984 International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 471-478. </pages> <institution> Institute for New Generation Computing, </institution> <address> Tokyo, </address> <year> 1984. </year>
Reference-contexts: The second by taking b2 and running h in parallel with it. Notice that differently from VisAndOr and VACE, VisAll represents join nodes. These joins connect and-goals that can be executed in parallel inside a CGE (Conditional Graph Expression) <ref> [4] </ref>. They are particularly useful when the and-parallel computation is not the last goal in a clause. Workshop on Parallelism and Implementation Technology 9 3. VisAll Implementation One of the objectives of VisAll was to allow developers of parallel logic programming systems to debug and optimize their implementations.
Reference: [5] <author> Terrence Disz and Ewing Lusk. </author> <title> A Graphical Tool for Observing the Behavior of Parallel Logic Programs. </title> <booktitle> In Proceedings of the 1987 International Logic Programming Symposium, </booktitle> <pages> pages 46-53, </pages> <year> 1987. </year>
Reference-contexts: It is universal in that VisAll is capable of visualising all major forms of parallelism that are exploited in parallel logic programming systems. Our systems follows other visualisation tools have been developed to parallel logic programming systems, such as WAMtrace <ref> [5] </ref>, VisAndOr [7], ViMust, and VACE [23]. Each of these systems supports a different parallel logic programming system. VisAll is the first attempt at unifying the visualisation paradigms exhibited by the other visualisation tools whilst adding the extra features important to system optimisation and debugging.
Reference: [6] <author> I. C. Dutra. </author> <title> Distributing And- and Or-Work in the Andorra-I Parallel Logic Programming System. </title> <type> PhD thesis, </type> <institution> University of Bristol, Department of Computer Science, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: In the example, the map indicates some load imbalance, especially at the beginning and end of the execution. 2.3. Visualising both And-parallelism and Or-parallelism Andorra-I <ref> [26, 20, 25, 6] </ref> is a system that exploits or-parallelism and determinate and-parallelism. By determinate and-parallelism we mean that the system only allows parallel execution of goals when they match at most one clause in the database.
Reference: [7] <author> Luis Gomez, Manuel Carro, and Manuel Hermenegildo. </author> <title> Some Paradigms for Visualising Parallel Execution of Logic Programs. </title> <booktitle> In Proceedings of the Tenth International Conference on Logic Programming, </booktitle> <pages> pages 184-202, </pages> <year> 1993. </year>
Reference-contexts: It is universal in that VisAll is capable of visualising all major forms of parallelism that are exploited in parallel logic programming systems. Our systems follows other visualisation tools have been developed to parallel logic programming systems, such as WAMtrace [5], VisAndOr <ref> [7] </ref>, ViMust, and VACE [23]. Each of these systems supports a different parallel logic programming system. VisAll is the first attempt at unifying the visualisation paradigms exhibited by the other visualisation tools whilst adding the extra features important to system optimisation and debugging. The paper is organised as follows.
Reference: [8] <author> Gopal Gupta, M. Hermenegildo, and V. Santos Costa. </author> <title> And-Or Parallel Prolog: A Recomputation based Approach. New Generation Computing, </title> <address> 11(3,4):770-782, </address> <year> 1993. </year>
Reference-contexts: The Create C-Node events corresponds to a a set of and-parallel goals which can have both and and or-parallelism according to the Composition tree model <ref> [8] </ref>. The Create CGE event corresponds to starting a traditional and-parallel conjunction for independent and-parallelism. Start and Finish Goal correspond to and parallel goals. Last, Join corresponds to the end of parallel conjunction execution. The next events correspond to or-parallelism.
Reference: [9] <author> Gopal Gupta and M. V. Hermenegildo. </author> <title> ACE: And/Or-parallel Copying-based Execution of Logic Programs. </title> <booktitle> In LNCS 569, ICLP'91 Pre-Conference Workshop on Parallel Execution of Logic Programs, </booktitle> <pages> pages 146-158. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: Several forms of paralellism can be exploited in logic programming systems. The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog [12] and &-Ace <ref> [11, 9] </ref>, or-parallelism in systems such as Aurora [14] and Muse [1], and dependent and-parallelism in systems such as KLIC [22], Parlog [3] and DASWAM [21]. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism.
Reference: [10] <author> Gopal Gupta, M. V. Hermenegildo, E. Pontelli, and V. Santos Costa. </author> <title> ACE: And/Or-parallel Copying-based Execution of Logic Programs. </title> <booktitle> In Proceedings of the Eleventh International Conference on Logic Programming, </booktitle> <address> Italy, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE <ref> [10] </ref>, SBA [2], Penny [17], ParAKL [18] and the EAM [24]. Experience from these systems has shown that the development of efficient parallel logic programming systems is not an easy task.
Reference: [11] <author> Gopal Gupta, Enrico Pontelli, and Manuel Hermenegildo. </author> <title> &ACE: A High Performance Parallel Pro-log System. </title> <booktitle> In Proceedings of the First International Symposium on Parallel Symbolic Computation, </booktitle> <address> PASCO'94, </address> <year> 1994. </year>
Reference-contexts: Several forms of paralellism can be exploited in logic programming systems. The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog [12] and &-Ace <ref> [11, 9] </ref>, or-parallelism in systems such as Aurora [14] and Muse [1], and dependent and-parallelism in systems such as KLIC [22], Parlog [3] and DASWAM [21]. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism.
Reference: [12] <author> M. V. Hermenegildo and K. Greene. </author> <title> &-Prolog and its Performance: Exploiting Independent And-Parallelism. </title> <booktitle> In Proceedings of the Seventh International Conference on Logic Programming, </booktitle> <pages> pages 253-268. </pages> <publisher> MIT Press, </publisher> <month> June </month> <year> 1990. </year> <booktitle> Workshop on Parallelism and Implementation Technology 13 </booktitle>
Reference-contexts: 1. Introduction One of the most important advantages of logic programming is that it allows the transparent exploitation of parallelism. Several forms of paralellism can be exploited in logic programming systems. The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog <ref> [12] </ref> and &-Ace [11, 9], or-parallelism in systems such as Aurora [14] and Muse [1], and dependent and-parallelism in systems such as KLIC [22], Parlog [3] and DASWAM [21]. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism.
Reference: [13] <author> Manuel Hermenegildo. </author> <title> An Abstract Machine for Restricted And-Parallel Execution of Logic Programs. </title> <editor> In Ehud Shapiro, editor, </editor> <booktitle> Proceedings of the Third International Conference on Logic Programming, </booktitle> <pages> pages 25-39. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Visualising And-parallelism And-parallelism arises in applications where several sub-goals can execute in parallel. VisAll can vi-sualise parallel execution of systems that exploit dependent and independent and-parallelism. We next concentrate on independent and-parallelism, as in &-Prolog <ref> [13] </ref>. In these systems goals that do not share variables are allowed to execute in parallel. Independent and-parallelism arises in divide and conquer problems, for example. as the ones for VisAndOr and can be converted to the VisAll format.
Reference: [14] <editor> Ewing Lusk, David H. D. Warren, Seif Haridi, et al. </editor> <title> The Aurora Or-parallel Prolog System. New Generation Computing, </title> <address> 7(2,3):243-271, </address> <year> 1990. </year>
Reference-contexts: Several forms of paralellism can be exploited in logic programming systems. The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog [12] and &-Ace [11, 9], or-parallelism in systems such as Aurora <ref> [14] </ref> and Muse [1], and dependent and-parallelism in systems such as KLIC [22], Parlog [3] and DASWAM [21]. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. <p> In the following sections we show how VisAll is applied to some well known parallel logic programming systems. 2.1. Visualising Or-parallel Execution For or-parallel systems VisAll can display, but is not limited to, parallel execution of the Muse [1] and Aurora <ref> [14] </ref> systems. Or-parallelism arises in applications when one executable goal matches more than one clause in the database. Or-parallel execution can be described through or-trees. Implementors of or-parallel systems must deal with problems such as side-effects, that sequentialise execution, and work distribution. <p> Figure 2 shows the same trace file as visualised by VisAndOr. We do not compare VisAll with ViMust in this work, since the dynamic part of VisAll is not yet implemented. Aurora <ref> [14] </ref>, as Muse, exploits or-parallelism in logic programming applications. Aurora and Muse have major differences in their design. They use different data structures to manage conditional bindings and use different or-scheduling techniques.
Reference: [15] <author> M.Hermenegildo M. Carro, L. Gomez. </author> <title> Implementation of an event driven scheme for visualizing parallel execution of logic programs. </title>
Reference-contexts: In section 4. we compare VisAll with two other well-known visualisation tools. Finally, section 5. gives some conclusions and future work. 2. VisAll In Operation In this section we present some terminology used throughout this paper and demonstrate some VisAll applications. We borrow terminology from VisAndOr <ref> [15] </ref> whenever possible. VisAll is a trace-based event-driven visualisation tool. An event describes a relevant point in the execution, together with the information needed to distinguish it from other event in the same execution.
Reference: [16] <author> M.Hermenegildo M. Carro, L. Gomez. </author> <title> Some paradigms for visualizing parallel execution of logic programs. </title> <year> 1993. </year>
Reference-contexts: It is sufficient to click on the worker bar in order to obtain the position where the worker is in the tree. 4. Related Work To the best of our knowledge, VisAndOr <ref> [16] </ref> was the first system that attempted to visualise parallel logic programming execution. It was originally designed for &-Prolog, and then extended to support Aurora, Muse, and Andorra-I.
Reference: [17] <author> Johan Montelius. Penny, </author> <title> A Parallel Implementation of AKL. </title> <type> PhD thesis, </type> <institution> Swedish Institute for Computer Science, SICS, Sweden, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA [2], Penny <ref> [17] </ref>, ParAKL [18] and the EAM [24]. Experience from these systems has shown that the development of efficient parallel logic programming systems is not an easy task. System implementors need to tackle hard problems such as parallel debugging and dynamic distribution of varied sized work among processors.
Reference: [18] <author> Remco Moolenaar and Bart Demoen. </author> <title> Hybrid tree search in the Andorra Model. </title> <editor> In Pascal Van Hentenryck, editor, </editor> <booktitle> Proceedings of the Eleventh International Conference on Logic Programming, </booktitle> <pages> pages 110-123. </pages> <publisher> MIT Press, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA [2], Penny [17], ParAKL <ref> [18] </ref> and the EAM [24]. Experience from these systems has shown that the development of efficient parallel logic programming systems is not an easy task. System implementors need to tackle hard problems such as parallel debugging and dynamic distribution of varied sized work among processors.
Reference: [19] <author> V. Santos Costa, D. H. D. Warren, and R. Yang. Andorra-I: </author> <title> A Parallel Prolog System that Transparently Exploits both And- and Or-Parallelism. </title> <booktitle> In Third ACM SIGPLAN Symposium on Principles & Practice of Parallel Programming, </booktitle> <pages> pages 83-93. </pages> <publisher> ACM press, </publisher> <month> April </month> <year> 1991. </year> <journal> SIGPLAN Notices vol 26(7), </journal> <month> July </month> <year> 1991. </year>
Reference-contexts: More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I <ref> [19] </ref>, ACE [10], SBA [2], Penny [17], ParAKL [18] and the EAM [24]. Experience from these systems has shown that the development of efficient parallel logic programming systems is not an easy task.
Reference: [20] <author> Vitor Santos Costa, David H. D. Warren, and Rong Yang. </author> <title> The Andorra-I Preprocessor: Supporting full Prolog on the Basic Andorra model. </title> <booktitle> In Proceedings of the Eighth International Conference on Logic Programming, </booktitle> <pages> pages 443-456. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: In the example, the map indicates some load imbalance, especially at the beginning and end of the execution. 2.3. Visualising both And-parallelism and Or-parallelism Andorra-I <ref> [26, 20, 25, 6] </ref> is a system that exploits or-parallelism and determinate and-parallelism. By determinate and-parallelism we mean that the system only allows parallel execution of goals when they match at most one clause in the database.
Reference: [21] <author> Kish Shen. </author> <title> Memory Management and Goal Scheduling for Parallel Execution Revisited. </title> <type> Internal Report, </type> <institution> Bristol University, </institution> <year> 1993. </year>
Reference-contexts: The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog [12] and &-Ace [11, 9], or-parallelism in systems such as Aurora [14] and Muse [1], and dependent and-parallelism in systems such as KLIC [22], Parlog [3] and DASWAM <ref> [21] </ref>. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA [2], Penny [17], ParAKL [18] and the EAM [24].
Reference: [22] <author> T. Chikayama, T. and Fujise, and H. Yashiro. </author> <title> A Portable and Reasonably Efficient Implementation of KL1. </title> <booktitle> In Proceedings of the Eleventh International Conference on Logic Programming, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: The major forms are or-parallelism, independent and-parallelism and dependent and-parallelism. Independent and-parallelism was exploited in systems such as &-Prolog [12] and &-Ace [11, 9], or-parallelism in systems such as Aurora [14] and Muse [1], and dependent and-parallelism in systems such as KLIC <ref> [22] </ref>, Parlog [3] and DASWAM [21]. More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA [2], Penny [17], ParAKL [18] and the EAM [24].
Reference: [23] <author> Richard S. Vaupel. </author> <title> Vace a visualization system for ace. </title> <type> Internal Report, </type> <institution> New Mexico State University, </institution> <year> 1995. </year>
Reference-contexts: It is universal in that VisAll is capable of visualising all major forms of parallelism that are exploited in parallel logic programming systems. Our systems follows other visualisation tools have been developed to parallel logic programming systems, such as WAMtrace [5], VisAndOr [7], ViMust, and VACE <ref> [23] </ref>. Each of these systems supports a different parallel logic programming system. VisAll is the first attempt at unifying the visualisation paradigms exhibited by the other visualisation tools whilst adding the extra features important to system optimisation and debugging. The paper is organised as follows.
Reference: [24] <author> David H. D. Warren. </author> <title> The Extended Andorra Model with Implicit Control. </title> <booktitle> Presented at ICLP'90 Workshop on Parallel Logic Programming, </booktitle> <address> Eilat, Israel, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: More recently, parallel logic programming systems have been developed to exploit a combination of these forms of parallelism. These include Andorra-I [19], ACE [10], SBA [2], Penny [17], ParAKL [18] and the EAM <ref> [24] </ref>. Experience from these systems has shown that the development of efficient parallel logic programming systems is not an easy task. System implementors need to tackle hard problems such as parallel debugging and dynamic distribution of varied sized work among processors.
Reference: [25] <author> Rong Yang, Tony Beaumont, In^es Dutra, Vitor Santos Costa, and David H. D. Warren. </author> <title> Performance of the Compiler-Based Andorra-I System. </title> <booktitle> In Proceedings of the Tenth International Conference on Logic Programming, </booktitle> <pages> pages 150-166. </pages> <publisher> MIT Press, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: In the example, the map indicates some load imbalance, especially at the beginning and end of the execution. 2.3. Visualising both And-parallelism and Or-parallelism Andorra-I <ref> [26, 20, 25, 6] </ref> is a system that exploits or-parallelism and determinate and-parallelism. By determinate and-parallelism we mean that the system only allows parallel execution of goals when they match at most one clause in the database.
Reference: [26] <author> Rong Yang, Vitor Santos Costa, and David H. D. Warren. </author> <title> The Andorra-I Engine: A parallel implementation of the Basic Andorra model. </title> <booktitle> In Proceedings of the Eighth International Conference on Logic Programming, </booktitle> <pages> pages 825-839. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year> <booktitle> Workshop on Parallelism and Implementation Technology 14 Workshop on Parallelism and Implementation Technology 15 </booktitle>
Reference-contexts: In the example, the map indicates some load imbalance, especially at the beginning and end of the execution. 2.3. Visualising both And-parallelism and Or-parallelism Andorra-I <ref> [26, 20, 25, 6] </ref> is a system that exploits or-parallelism and determinate and-parallelism. By determinate and-parallelism we mean that the system only allows parallel execution of goals when they match at most one clause in the database.
References-found: 26

