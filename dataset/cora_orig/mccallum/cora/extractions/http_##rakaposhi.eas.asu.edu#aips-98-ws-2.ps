URL: http://rakaposhi.eas.asu.edu/aips-98-ws-2.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: famol.mali, raog@asu.edu  
Title: Refinement-based Planning As Satisfiability  
Author: Amol D. Mali, Subbarao Kambhampati 
Address: Tempe, AZ 85287-5406.  
Affiliation: Dept. of computer science Engg. Arizona state university,  
Abstract: It has been shown recently that planning problems are easier to solve when they are cast as model finding problems. Some schemes for automated generation of the encodings of the planning problems in propositional logic have been designed. However these schemes lack several of the refinements that traditional split & prune type planners do. We show that it is possible to transfer these refinements into the encodings. Since no single encoding has been shown to have the smallest size and the best performance, it is necessary to know what the space of the encodings is. Knowing this space makes a more flexible and efficient design of encodings possible. We show how refinements can be used to generate one such space of encodings. We examine this space and provide the asymptotic sizes of the encodings. This inclusion of refinements into the encodings results in more flexible encodings, some of which are smaller. Our work bridges the gap between the previous research in planning (planning as search) and the recent exciting developments (planning as model finding) and shows how satisfiability-based planning can be integrated with refinement planning. 
Abstract-found: 1
Intro-found: 1
Reference: [Blum & Furst 95] <author> Avrim Blum and Merrick Furst, </author> <title> Fast planning via planning graph analysis, Procs. </title> <booktitle> of IJCAI-95. </booktitle>
Reference-contexts: by O (kfl (j O j 2 j O 0 j 2 )+kfl (j O j fl j j j O 0 j fl j 0 j)) and O (k fl (j O j j O 0 j) + k fl (j j j 0 j)) respectively. 5.2 Plan Graph <ref> [Blum & Furst 95] </ref> reported a planner that applied actions in parallel and propagated constraints to find a valid plan. This planner did not introduce the traditional planners' branching in its search space. The resulting structure that contains actions, propositions and causal links is called plan graph.
Reference: [Kambhampati & Srivastava 95] <author> Subbarao Kambhampati and Biplav Srivastava, </author> <title> Universal classical planner: An algorithm for unifying state space and plan space planning, </title> <booktitle> Preprints of the EWSP, </booktitle> <pages> 81-94. </pages>
Reference-contexts: The performance of both state space and plan space planners can be improved with the use of heuristics. There are planners that interleave the state space and plan space refinements like the universal classical planner <ref> [Kambhampati & Srivastava 95] </ref>. These planners create different branches for different extensions of an incomplete plan, and hence are also termed as "split & prune" planners. These planners are also called refinement planners since they start with a null plan and refine it by adding constraints to it.
Reference: [Kautz, McAllester & Selman 96] <author> Henry Kautz, David McAllester and Bart Selman, </author> <title> Encoding plans in propositional logic, </title> <booktitle> Proc. of KRR-96. </booktitle>
Reference-contexts: Various types of planning algorithms lead to various types of encodings. State space encodings of planning problems have been tried in previous literature [Kautz & Selman 96]. Plan space (causal) encodings have been proposed in <ref> [Kautz, McAllester & Selman 96] </ref>. Different encodings generally have different number of clauses and variables. It is believed that these factors affect the hardness of solving an encoding. <p> Different encodings generally have different number of clauses and variables. It is believed that these factors affect the hardness of solving an encoding. Though it is desirable to have an encoding that is as small as possible (has fewer clauses and fewer variables), the smallest encodings in <ref> [Kautz, McAllester & Selman 96] </ref> are not the easiest ones to solve. This points out the importance of generating and exploring a space of the encodings. This motivates our work. There are a number of properties of split & prune refinement planners that the current plan encodings lack. <p> The step p i occurs after time t. Ground encodings use instantiated actions (e.g. move (A; B; C)), as opposed to variablized actions (e.g. move (?x; ?y; ?z)). 3 State Space Encodings <ref> [Kautz, McAllester & Selman 96] </ref> report encodings based on the traditional state space planning. There are two categories of these encodings linear and parallel. In linear encodings, only one action occurs at a time step. <p> It also says that if some precondition of an action is false at a time, the action cannot occur at that time. This captures the key idea in forward state space refinement. The corresponding linear encoding schema of <ref> [Kautz, McAllester & Selman 96] </ref> states that if an action occurs at time t, the preconditions must be true at t. Schema 4 states that if an action occurs at time t, the effects of the action hold at time (t + 1). <p> These schemas can be used to generate a purely causal encoding for an arbitrary number of steps by making some minor variations to them. The schemas for causal part here are a variation of the schemas for purely causal encoding of <ref> [Kautz, McAllester & Selman 96] </ref> and we do this variation to make the causal component compatible with the linear component of the encoding. Schema 7 says that each plan step in the causal part of the encoding can be mapped to any of the available actions, including the no-ops. <p> Let the set of actions in a plan graph be denoted by O 0 , j O 0 jj O j. A parallel state space encoding can be generated, based on this structure (one such encoding is proposed in <ref> [Kautz, McAllester & Selman 96] </ref>). This encoding refers to fewer actions and fewer propositions and has a smaller size. 5.3 Occurrence Bounds In many cases, it is possible to tell that certain types of actions will not be required more than a certain number of times.
Reference: [Kautz & Selman 96] <author> Henry Kautz and Bart Sel-man, </author> <title> Pushing the envelope: Planning, Propositional logic and Stochastic search, </title> <booktitle> Proc. of AAAI-96. </booktitle>
Reference-contexts: There will be a solution of n or less steps for the given planning problem if and only if there exists a model of this formula. We refer this formula in conjunctive normal form (CNF), as a plan encoding. <ref> [Kautz & Selman 96] </ref> reported very impressive results by casting planning as satisfiability. Various types of planning algorithms lead to various types of encodings. State space encodings of planning problems have been tried in previous literature [Kautz & Selman 96]. <p> We refer this formula in conjunctive normal form (CNF), as a plan encoding. <ref> [Kautz & Selman 96] </ref> reported very impressive results by casting planning as satisfiability. Various types of planning algorithms lead to various types of encodings. State space encodings of planning problems have been tried in previous literature [Kautz & Selman 96]. Plan space (causal) encodings have been proposed in [Kautz, McAllester & Selman 96]. Different encodings generally have different number of clauses and variables. It is believed that these factors affect the hardness of solving an encoding.
Reference: [McAllester & Rosenblitt 91] <author> D. McAllester and D. Rosenblitt, </author> <title> Systematic non-linear planning, Procs. </title> <booktitle> of AAAI-91, </booktitle> <pages> 634-639. </pages>
Reference-contexts: There are planning algorithms that search in the space of plans rather than states. They impose partial order on the plan steps. These planners are also called least commitment or plan space or causal link planners, e.g. SNLP <ref> [McAllester & Rosenblitt 91] </ref>. They lack the notion of state of a world. Any step sequence that leads from I to G and is consistent with the precedence orderings and some other constraints is a valid plan.
Reference: [Smith & Peot 96] <author> David Smith and Mark Peot, </author> <title> Suspending recursion in causal-link planning, Procs. </title> <booktitle> of AIPS-96, </booktitle> <pages> 182-190. </pages>
Reference-contexts: Knowing this a priori does reduce the search space and allows the planner to focus on more relevant actions. Also, if a planning problem is unsolvable, pre-processing can detect that. We discuss the popular pre-processing strategies below. 5.1 Operator Graphs <ref> [Smith & Peot 96] </ref> propose a representation called operator graphs, which contain all actions relevant to a planning problem (the term operator is used to refer to a variablized action, however, the operator graphs can be formed for ground actions as well).
References-found: 6

