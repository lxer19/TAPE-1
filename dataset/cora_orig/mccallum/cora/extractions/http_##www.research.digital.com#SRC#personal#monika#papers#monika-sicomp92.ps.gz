URL: http://www.research.digital.com/SRC/personal/monika/papers/monika-sicomp92.ps.gz
Refering-URL: http://www.research.digital.com/SRC/personal/monika/papers.html
Root-URL: http://www.research.digital.com
Title: VERIFICATION AND SENSITIVITY ANALYSIS OF MINIMUM SPANNING TREES IN LINEAR TIME 1  
Author: BRANDON DIXON ; MONIKA RAUCH ; AND ROBERT E. TARJAN ; 
Abstract: Komlos has devised a way to use a linear number of binary comparisons to test whether a given spanning tree of a graph with edge costs is a minimum spanning tree. The total computational work required by his method is much larger than linear, however. We describe a linear-time algorithm for verifying a minimum spanning tree. Our algorithm combines the result of Komlos with a preprocessing and table look-up method for small subproblems and with a previously known almost-linear-time algorithm. Additionally, we present an optimal deterministic algorithm and a linear-time randomized algorithm for sensitivity analysis of minimum spanning trees. 1. Introduction. Suppose we wish to solve some problem for which we know in advance the 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ben-Or, D. Kozen, and J. Reif, </author> <title> The Complexity of Elementary Algebra and Geometry, </title> <journal> J. Comput. System Sci. </journal> <note> 32(2) (1986) pp. 251-264. </note>
Reference-contexts: We can allow arithmetic operations in the decision trees used to solve the subproblems. Testing the correctness of such a decision tree amounts to testing the validity of a first-order sentence about the real numbers. Such sentences can be tested in double-exponential time <ref> [1] </ref>, which suffices for the use of the method: we merely reduce the size of the subproblems to double-logarithmic, triple-logarithmic, or further, as needed.
Reference: [2] <author> H. Booth and J. Westbrook, </author> <title> Linear Algorithms for Analysis of Minimum Spanning and Shortest Path Trees in Planar Graphs, </title> <institution> Yale University, Department of Computer Science, TR-768, </institution> <month> Feb. </month> <note> 1990; also Algorithmica, to appear. </note>
Reference-contexts: Tarjan [18] has extended his verification algorithm to an algorithm that solves the sensitivity analysis problem in O (mff (m; n)) time. For the special case of planar graphs, Booth and Westbrook <ref> [2] </ref> have given an algorithm running in O (m) time.
Reference: [3] <author> B. Chazelle, </author> <title> Efficient Polygon Triangulation, </title> <institution> Princeton University, CS-TR-249-90, </institution> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: As an example, the technique can be applied to the O (n log fl n)-time algorithm of Chazelle <ref> [3] </ref> for triangulating a simple n-sided polygon, to produce an algorithm running in time minimum to within a constant factor. The bound for this algorithm is in fact O (n), because of the even more recent result of Chazelle [4] giving an explicitly linear-time algorithm. Further applications remain to be discovered.
Reference: [4] <author> B. Chazelle, </author> <title> Triangulating a Simple Polygon in Linear Time, </title> <booktitle> in Proc. 31 st Annual IEEE Sympos. on Foundations in Comput. Sci., 1990, </booktitle> <volume> Vol. 1, </volume> <pages> pp. </pages> <note> 220-230; also Discrete and Computational Geometry 6(5) (1991), to appear. </note>
Reference-contexts: The bound for this algorithm is in fact O (n), because of the even more recent result of Chazelle <ref> [4] </ref> giving an explicitly linear-time algorithm. Further applications remain to be discovered.
Reference: [5] <author> M.L. Fredman, </author> <title> New Bounds on the Complexity of the Shortest Path Problem, </title> <note> SIAM J. Comput. 5(1) (1976) pp. 83-89. </note>
Reference-contexts: Related techniques were used by Gabow and Tarjan [8] to solve a disjoint set union problem, by Harel and Tarjan [12] to find nearest common ancestors in a tree, and by Fredman <ref> [5] </ref> to solve the all pairs shortest path problem. We present an algorithm that verifies a minimum spanning tree in an n-vertex, m-edge graph in O (m) time.
Reference: [6] <author> M.L. Fredman and D.E. Willard, </author> <title> Trans-dichotomous Algorithms for Minimum Spanning Trees and Shortest Paths, </title> <booktitle> in Proc. 31 st Annual IEEE Sympos. on Foundations in Comput. Sci., 1990, </booktitle> <volume> Vol. 2, </volume> <pages> pp. 719-725. </pages>
Reference-contexts: In particular, Harel [11] showed that if the edge costs are integers polynomially bounded in n , then on a unit-cost random-access machine the minimum spanning tree verification and sensitivity analysis problems can be solved deterministically in linear time. More recently Fredman and Willard <ref> [6] </ref> showed that if the edge costs are single-precision integers, then a minimum spanning a 1 Department of Computer Science, Princeton University, Princeton, New Jersey 08544. 2 Research partially supported by a National Science Foundation Graduate Fellowship. 3 Research supported by the German Fellowship Foundation, Studienstiftung des deutschen Volkes. 4 NEC
Reference: [7] <author> H.N. Gabow, Z. Galil, T. Spencer, and R.E. Tarjan, </author> <title> Efficient Algorithms for Finding Minimum Spanning Trees in Undirected and Directed Graphs, </title> <journal> Combinatorica 6(2) (1986) pp. </journal> <pages> 109-122. </pages>
Reference-contexts: The fastest known algorithm for finding a minimum spanning tree is that of Gabow, et al. <ref> [7] </ref>, which runs in O (m log fi (m; n)) time, where fi (m; n) = minfi j log (i) n m=ng, and log (i) n is defined recursively by log (0) n = n ; log (i+1) n = log log (i) n.
Reference: [8] <author> H.N. Gabow and R.E. Tarjan, </author> <title> A Linear-Time Algorithm for a Special Case of Disjoint Set Union, </title> <journal> J. Comput. System Sci. </journal> <note> 30(2) (1985) pp. 209-221. </note>
Reference-contexts: This paper presents an application of this general technique to two problems concerning minimum spanning trees. This approach was first proposed explicitly by Larmore [15], who used it to solve a convex matrix searching problem. Related techniques were used by Gabow and Tarjan <ref> [8] </ref> to solve a disjoint set union problem, by Harel and Tarjan [12] to find nearest common ancestors in a tree, and by Fredman [5] to solve the all pairs shortest path problem.
Reference: [9] <author> W. Goddard, V. King, and L. Schulman, </author> <title> Optimal Randomized Algorithms for Local Sorting and Set-Maxima, </title> <booktitle> in Proc. 22 nd Annual ACM Sympos. on Theory of Computing, </booktitle> <year> 1990, </year> <pages> pp. 45-53. </pages>
Reference-contexts: The verification algorithm uses the comparison bound of Komlos [14] for the subproblems and Tarjan's O (mff (m; n)) algorithm [17] for the reduced problem. For sensitivity analysis we solve the subprob-lems using a result of Goddard, King, and Schulman <ref> [9] </ref> in the randomized case and enumeration of all possible algorithms in the deterministic case. In both cases Tarjan's O (mff (m; n))-time sensitivity analysis algorithm [18] processes the reduced problem. We describe the algorithms in Sections 2 and 3. Section 4 contains concluding remarks. <p> Goddard, King and Shulman <ref> [9] </ref> have found a randomized algorithm to compute the maxima of n subsets of an ordered universe of size n in O (n) comparisions on the average.
Reference: [10] <author> R.L. Graham and P. Hell, </author> <title> On the History of the Minimum Spanning Tree Problem, </title> <journal> Ann. Hist. Comput. </journal> <note> 7(1) (1985) pp. 43-47. 6 </note>
Reference-contexts: Several results concerning the minimum spanning tree verification problem are known. There are many efficient algorithms for finding a minimum spanning tree, given only the graph G and the edge costs; see the survey paper by Graham and Hell <ref> [10] </ref> or the monograph by Tarjan [19, Chapter 6].
Reference: [11] <author> D. Harel, </author> <title> A Linear Time Algorithm for Finding Dominators in Flow Graphs and Related Problems, </title> <booktitle> in Proc. 17 th Annual ACM Sympos. on Theory of Computing, </booktitle> <year> 1985, </year> <pages> pp. 185-194. </pages>
Reference-contexts: In a more powerful model in which bit manipulation of the edge costs is possible, better results can be obtained using table lookup and other ideas. In particular, Harel <ref> [11] </ref> showed that if the edge costs are integers polynomially bounded in n , then on a unit-cost random-access machine the minimum spanning tree verification and sensitivity analysis problems can be solved deterministically in linear time.
Reference: [12] <author> D. Harel and R.E. Tarjan, </author> <title> Fast Algorithms for Finding Nearest Common Ancestors, </title> <note> SIAM J. Comput. 13(2) (1984) pp. 338-355. </note>
Reference-contexts: This approach was first proposed explicitly by Larmore [15], who used it to solve a convex matrix searching problem. Related techniques were used by Gabow and Tarjan [8] to solve a disjoint set union problem, by Harel and Tarjan <ref> [12] </ref> to find nearest common ancestors in a tree, and by Fredman [5] to solve the all pairs shortest path problem. We present an algorithm that verifies a minimum spanning tree in an n-vertex, m-edge graph in O (m) time.
Reference: [13] <author> V. King, </author> <type> personal communication. </type>
Reference-contexts: Goddard, King and Shulman [9] have found a randomized algorithm to compute the maxima of n subsets of an ordered universe of size n in O (n) comparisions on the average. Their result, together with the observation of King <ref> [13] </ref> that their algorithm needs only O (n) random bits on the average, implies the existence of a randomized decision tree of average depth O (m) for the sensitivity analysis problem.
Reference: [14] <author> J. Komlos, </author> <title> Linear Verification for Spanning Trees, </title> <journal> Combinatorica 5 (1985) pp. </journal> <pages> 57-65. </pages>
Reference-contexts: Our model of computation allows edge costs to be compared, added, or subtracted at unit cost, and side computations to be performed on a unit-cost random-access machine with word size (log n) bits. The verification algorithm uses the comparison bound of Komlos <ref> [14] </ref> for the subproblems and Tarjan's O (mff (m; n)) algorithm [17] for the reduced problem. For sensitivity analysis we solve the subprob-lems using a result of Goddard, King, and Schulman [9] in the randomized case and enumeration of all possible algorithms in the deterministic case. <p> The verification problem was considered by Tarjan [17] and subsequently by Komlos <ref> [14] </ref>. Tarjan proposed a verification algorithm running in O (mff (m; n)) time, where ff is a functional inverse of Ackermann's function. Komlos showed that a minimum spanning tree can be verified in O (m) binary comparisons between edge costs. <p> Consider a connected graph with at most g vertices and e &lt; g 2 =2 edges and having a specified spanning tree T fl . The result of Komlos <ref> [14] </ref> implies that there is a decision tree D whose nodes represent binary comparisons of edge costs that will verify the minimality of T fl and has a depth of at most c 1 e, for some sufficiently large c 1 .
Reference: [15] <author> L.L. Larmore, </author> <title> An Optimal Algorithm with Unknown Time Complexity for Convex Matrix Searching, </title> <journal> Information Processing Letters, </journal> <note> to appear. </note>
Reference-contexts: This paper presents an application of this general technique to two problems concerning minimum spanning trees. This approach was first proposed explicitly by Larmore <ref> [15] </ref>, who used it to solve a convex matrix searching problem. <p> This is the case for our deterministic minimum spanning tree sensitivity analysis algorithm and for Larmore's convex matrix searching algorithm <ref> [15] </ref>; both have running times somewhere between linear and an inverse Ackerman function times linear. Providing tight analysis of these algorithms amounts to bounding the number of comparisons needed to solve the corresponding problems. Obtaining tight bounds remains open.
Reference: [16] <author> B. Schieber and U. Vishkin, </author> <title> On Finding Lowest Common Ancestors: Simplification and Paral-lelization, </title> <note> SIAM J. Comput. 17(6) (1988) pp. 1253-1262. </note>
Reference: [17] <author> R.E. Tarjan, </author> <title> Applications of Path Compressions on Balanced Trees, </title> <journal> J. Assoc. Comput. Mach. </journal> <note> 26(4) (1979) pp. 690-715. </note>
Reference-contexts: The verification algorithm uses the comparison bound of Komlos [14] for the subproblems and Tarjan's O (mff (m; n)) algorithm <ref> [17] </ref> for the reduced problem. For sensitivity analysis we solve the subprob-lems using a result of Goddard, King, and Schulman [9] in the randomized case and enumeration of all possible algorithms in the deterministic case. <p> The verification problem was considered by Tarjan <ref> [17] </ref> and subsequently by Komlos [14]. Tarjan proposed a verification algorithm running in O (mff (m; n)) time, where ff is a functional inverse of Ackermann's function. Komlos showed that a minimum spanning tree can be verified in O (m) binary comparisons between edge costs. <p> To verify the minimality of T 0 we use the algorithm of Tarjan <ref> [17] </ref>, which runs in O (mff (m; n 0 )) time, where n 0 is the number of vertices in T 0 .
Reference: [18] <author> R.E. Tarjan, </author> <title> Sensitivity Analysis of Minimum Spanning Trees and Shortest Path Trees, </title> <note> Information Processing Letters 14(1) (1982) pp. 30-33. Corrigendum, Ibid 23(4) (1986), p.219. </note>
Reference-contexts: For sensitivity analysis we solve the subprob-lems using a result of Goddard, King, and Schulman [9] in the randomized case and enumeration of all possible algorithms in the deterministic case. In both cases Tarjan's O (mff (m; n))-time sensitivity analysis algorithm <ref> [18] </ref> processes the reduced problem. We describe the algorithms in Sections 2 and 3. Section 4 contains concluding remarks. It is important to note that our computational model allows only very simple operations on the edge costs, namely binary comparison, addition, and subtraction. <p> Let G be an undirected graph with edge costs and let T be a minimum spanning tree of G. The sensitivity analysis problem is to compute, for each edge fv; wg of G, by how much c (v; w) can change without affecting the minimality of G. Tarjan <ref> [18] </ref> has extended his verification algorithm to an algorithm that solves the sensitivity analysis problem in O (mff (m; n)) time. For the special case of planar graphs, Booth and Westbrook [2] have given an algorithm running in O (m) time. <p> Let b (v; w) = min fc (x; y) j fx; yg is a non-tree edgesuch that fv; wg 2 T (x; y)g. Then T remains minimum until the edge cost of fv; wg increases by more than b (v; w) c (v; w). (See <ref> [18] </ref>.) The value of a (v; w) for every nontree edge fv; wg can be computed in O (m) time by a simple extension of the verification algorithm in Section 2: instead of verifying that c (v; w) a (v; w), we compute a (v; w) explicitly. <p> All the b 0 -values can be computed in O (mff (m; n 0 )) time by applying the sensitivity analysis algorithm of Tarjan <ref> [18] </ref> to the graph G 0 and the tree T 0 . <p> The algorithm of Tarjan <ref> [18] </ref> implies the existence of an O (mff (m; n))-depth decision tree for the sensitivity analysis of an n-vertex, m-edge graph and given spanning tree. Since ff (g 2 ; g) = O (1) [19], these decision trees have depth O (g 2 ).
Reference: [19] <author> R.E. Tarjan, </author> <title> Data Structures and Network Algorithms, </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, PA, </address> <year> 1983. </year> <month> 7 </month>
Reference-contexts: Several results concerning the minimum spanning tree verification problem are known. There are many efficient algorithms for finding a minimum spanning tree, given only the graph G and the edge costs; see the survey paper by Graham and Hell [10] or the monograph by Tarjan <ref> [19, Chapter 6] </ref>. <p> We compute the collection of subtrees in O (n) time, as follows. We process all the vertices except r in postorder <ref> [19] </ref>. (This order guarantees that a parent is processed after all of its children.) When processing a vertex v, we compute an integer value s (v) for it; and, in addition, we may mark it as a subtree root. <p> During the traversal of the subtree rooted at a vertex u, we maintain the path of edges from u to the currently visited vertex as a stack with heap order <ref> [19] </ref>; the values that are heap-ordered are the edge costs, and the high-values are computed using find-max operations. This data structure requires O (1) amortized time per push, pop, or find-max operation [19]. Hence the total time to compute all high-values is O (n). <p> maintain the path of edges from u to the currently visited vertex as a stack with heap order <ref> [19] </ref>; the values that are heap-ordered are the edge costs, and the high-values are computed using find-max operations. This data structure requires O (1) amortized time per push, pop, or find-max operation [19]. Hence the total time to compute all high-values is O (n). <p> If g = (log (i) n) for any fixed positive integer i, then n 0 = O (n= log (i) n), and ff (m; n 0 ) = O (1) <ref> [19] </ref>. Thus verifying the minimality of T 0 takes O (m) time. The remaining edges that must be tested are the fu; r 2 g-replacement edges. Each such edge has u and r 2 in the same microtree. <p> The algorithm of Tarjan [18] implies the existence of an O (mff (m; n))-depth decision tree for the sensitivity analysis of an n-vertex, m-edge graph and given spanning tree. Since ff (g 2 ; g) = O (1) <ref> [19] </ref>, these decision trees have depth O (g 2 ). For each possible connected graph with no more than g vertices and specified spanning tree, we construct a minimum-depth decision tree for sensitivity analysis by brute-force enumeration.
References-found: 19

