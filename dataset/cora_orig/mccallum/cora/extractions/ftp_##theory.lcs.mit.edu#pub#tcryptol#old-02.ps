URL: ftp://theory.lcs.mit.edu/pub/tcryptol/old-02.ps
Refering-URL: http://theory.lcs.mit.edu/~tcryptol/old.html
Root-URL: 
Email: e-mail: canetti@theory.lcs.mit.edu.  e-mail: shaih@theory.lcs.mit.edu.  e-mail: amir@watson.ibm.com  
Title: How to Maintain Authenticated Communication in the Presence of Break-ins (Extended Abstract)  
Author: Ran Canetti Shai Halevi Amir Herzberg 
Keyword: Authentication protocols, break ins, recovery, distributed signatures, proactive proto cols.  
Note: Part of this research was done while visiting  
Address: NE43-336, 545 Tech. Square, Cambridge MA 02139, USA.  NE43-344, 545 Tech. Square, Cambridge MA 02139, USA.  POB 704, Yorktown Heights, NY 10598,  
Affiliation: LCS MIT,  IBM T.J. Watson Research Center. LCS MIT,  IBM T.J. Watson Research Center,  
Date: May 8, 1996  
Abstract: Cryptography provides authenticated communication over untrusted channels, as long as the secret keys are not exposed. However, attacks by hackers and insiders often expose secret keys. Such break-in attacks often control the systems only for a limited time, and therefore security may be regained, provided new keys can be selected and installed securely. This proactive recovery operation must be invoked periodically, since the exposure may remain undetected. We consider a highly adversarial scenario where the adversary has complete control over the network, and can also occasionally break into parties, expose and modify their keys. In this setting we present a mechanism which manages to maintain authenticated communication. Using our scheme as a stepping stone, general "higher level" applications for secure multiparty computation, distributed databases, secret sharing , etc., can be performed in this scenario. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Beaver. </author> <title> Foundation of secure interactive computing. </title> <booktitle> Proceedings of CRYPTO`91. </booktitle>
Reference-contexts: This notion draws from definitions of secure multiparty computation <ref> [17, 1, 9] </ref>.) We formalize this notion as follows. 3 The error probability is determined by a security parameter.
Reference: [2] <author> Mihir Bellare and Phil Rogaway. </author> <title> Entity authentication and key distribution. </title> <booktitle> Proceedings of CRYPTO`93, </booktitle> <pages> pages 232-249, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: We measure the quality of an emulator by how powerful an adversary can be tolerated while maintaining simulatability or awareness. We remark that our problem is related to the problem of entity and session authentication <ref> [2, 5, 7, 3] </ref>. There authentication was defined as a goal by itself, with emphasis on the ability to run multiple authenticated sessions at the same time.
Reference: [3] <author> Mihir Bellare and Phil Rogaway. </author> <title> Provably secure session key distribution | the three party case. </title> <booktitle> in proceedings of STOC'95, </booktitle> <pages> pages 57-66. </pages>
Reference-contexts: We measure the quality of an emulator by how powerful an adversary can be tolerated while maintaining simulatability or awareness. We remark that our problem is related to the problem of entity and session authentication <ref> [2, 5, 7, 3] </ref>. There authentication was defined as a goal by itself, with emphasis on the ability to run multiple authenticated sessions at the same time.
Reference: [4] <author> E. Berlekamp and L. </author> <title> Welch Error Correction of Algebraic Block Codes. </title> <type> US Patent Number 4,633,470. </type>
Reference-contexts: Upon receiving all the signature-parts, the verifier first finds the majority value for r. Then it takes the vector of s i 's (some of which may be corrupted), and applies to it the Berlekamp-Welch decoding procedure <ref> [4] </ref>. This procedure is guaranteed to compute the coefficients of the polynomial S () as long as no more than (n t)=2 of the s i 's are corrupted. After finding S (), the verifier computes s S (0) (mod p 1).
Reference: [5] <author> Ray Bird, Inder Gopal, Amir Herzberg, Phil Janson, Shay Kutten, Refik Molva, and Moti Yung. </author> <title> Systematic design of two-party authentication protocols. </title> <booktitle> In proceedings of CRYPTO 91, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: We measure the quality of an emulator by how powerful an adversary can be tolerated while maintaining simulatability or awareness. We remark that our problem is related to the problem of entity and session authentication <ref> [2, 5, 7, 3] </ref>. There authentication was defined as a goal by itself, with emphasis on the ability to run multiple authenticated sessions at the same time.
Reference: [6] <author> W. Diffie, P. C. Van Oorschot and M. J. Weiner. </author> <title> Authentication and Authenticated Key Exchanges. Designs, </title> <booktitle> Codes and Cryptography 2, </booktitle> <pages> pages 107-125, </pages> <year> 1992. </year>
Reference-contexts: The receiving party will verify the certificate and then verify the signature using the attached verification key. If any verifi cation fails then the receiver outputs alert. (Alternatively, each pair of communicating parties can use the certified keys to exchange symmetric session keys, say using <ref> [6] </ref>, and use those to authenticate their communication.) 4 Of course, this key can be replaced using manual intervention, which must be carried out in all parties during the same time-unit. 5 Since selecting new signature and verification keys at each refreshment phase is required, it is preferable to use a
Reference: [7] <author> Ray Bird, Inder Gopal, Amir Herzberg, Phil Janson, Shay Kutten, Refik Molva, and Moti Yung. </author> <title> Systematic design of a family of attack-resistant authentication protocols. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(5) </volume> <pages> 679-693, </pages> <month> June </month> <year> 1993. </year> <note> Special issue on Secure Communications. </note>
Reference-contexts: We measure the quality of an emulator by how powerful an adversary can be tolerated while maintaining simulatability or awareness. We remark that our problem is related to the problem of entity and session authentication <ref> [2, 5, 7, 3] </ref>. There authentication was defined as a goal by itself, with emphasis on the ability to run multiple authenticated sessions at the same time.
Reference: [8] <author> M. Ben-Or, S. Goldwasser and A. Wigderson. </author> <title> Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation. </title> <booktitle> proceedings of 20th STOC, </booktitle> <pages> pp. 1-10, </pages> <year> 1988. </year>
Reference-contexts: In other schemes (e.g., [19, 20]) the correctness of each individual signature-part was verified before inclusion in the global computation. Instead, we make use of error-correcting codes to correct erroneous or missing signature parts. (This technique draws from <ref> [8] </ref>.) That is, we construct the signature parts in a way that correct signature parts form a codeword.
Reference: [9] <author> R. Canetti. </author> <title> Studies in secure multiparty computation and applications. </title> <type> Ph.D. thesis, </type> <institution> The Wiezmann Inst. of Science, </institution> <year> 1995. </year>
Reference-contexts: This notion draws from definitions of secure multiparty computation <ref> [17, 1, 9] </ref>.) We formalize this notion as follows. 3 The error probability is determined by a security parameter.
Reference: [10] <author> R. Canetti and A. Herzberg. </author> <title> Maintaining security in the presence of transient faults. </title> <booktitle> In Proceedings of CRYPTO'94. </booktitle>
Reference-contexts: We only assume, then, that not too many parties are broken into at the same time. Following the proactive approach in <ref> [18, 10, 15] </ref> we introduce periodical, short refreshment phases, during which the parties jointly try to refresh their keys and regain security. Let a time-unit denote the time between two consecutive refreshment phases.
Reference: [11] <author> S. Even, O. Goldreich and S. Micali. </author> <title> On-line/off-line digital schemes. </title> <booktitle> In proceedings of Advances in Cryptology CRYPTO'89, </booktitle> <editor> G. Brassard, editor. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol 435, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year> <pages> Pages 263-277. 11 </pages>
Reference-contexts: scheme is that almost all the work can be done off-line (i.e., independently of the message to be signed), where the on-line part (i.e., the part which depends on the message) is minimal, and in particular non-interactive. (Off-line . on-line work was first studied with respect to signature schemes in <ref> [11] </ref>.) This property will be used in our scenario as follows. The off-line part of 9 the signing process of a new personal verification key will be carried out at the end of the previous refreshment phase.
Reference: [12] <author> P. Feldman. </author> <title> A practical scheme for non-interactive verifiable secret sharing. </title> <booktitle> In proceedings of 28th FOCS, IEEE, </booktitle> <year> 1987. </year>
Reference-contexts: Sharing k and x. To share k; x the parties execute a protocol which is similar to the share-renewal protocol in [15]. This protocol uses Feldman's t-out-of-n Verifiable-Secret-Sharing procedure <ref> [12] </ref>.
Reference: [13] <author> R. Gennaro, S. Jarecky, H. Krawczyk and T. Rabin. </author> <title> Robust Threshold DSS Signatures. </title> <note> Proceedings of EUROCRYPT 96, to appear. </note>
Reference-contexts: On the practical level, we present a surprisingly effective solution to this problem. Our solution involves a novel use of distributed signature schemes, such as the ones recently suggested in <ref> [19, 20, 13] </ref>. The problem. We consider parties that communicate via a network that is "totally unreliable". This is modeled by assuming that an adversary has full control over the network. <p> For our construction we can use several known proactive signature schemes, such as the ones described in <ref> [19, 20, 13] </ref>. We also describe yet another proactive signature scheme, that is simple and specially tailored to our needs. (In fact, our scheme may be of independent interest and useful in other scenarios as well). Organization. <p> That is, V v (m; S ~s (m)) = 1. Furthermore, any adversary of the considered type should be unable to generate a new message m 0 and a signature x such that V v (m 0 ; x) = 1. See <ref> [13] </ref> for a more complete definition. In a proactive distributed signature protocol the parties engage, in each refreshment phase, in a protocol for refreshing their shares of the signature key. <p> However, we stress that the global verification key must remain unchanged throughout. (This is the crux of our solution: since the verification key is unchanging, it can be kept in a ROM and can thus be protected against malicious modifications.) Several proactive distributed signature schemes were proposed recently <ref> [19, 20, 13] </ref>. Also, in Section 5 we describe yet another such scheme, that is especially tailored for our needs.
Reference: [14] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> How to play any mental game. </title> <booktitle> In Proceedings of the 19 th STOC, </booktitle> <address> New York City, </address> <pages> pages 218-229, </pages> <year> 1987. </year>
Reference: [15] <author> A. Herzberg, S. Jarecki, H. Krawczyk and M. Yung. </author> <title> Proactive Secret Sharing or: How to Cope with Perpetual Leakage. </title> <booktitle> In Proceedings of CRYPTO`95. </booktitle>
Reference-contexts: We only assume, then, that not too many parties are broken into at the same time. Following the proactive approach in <ref> [18, 10, 15] </ref> we introduce periodical, short refreshment phases, during which the parties jointly try to refresh their keys and regain security. Let a time-unit denote the time between two consecutive refreshment phases. <p> Sharing k and x. To share k; x the parties execute a protocol which is similar to the share-renewal protocol in <ref> [15] </ref>. This protocol uses Feldman's t-out-of-n Verifiable-Secret-Sharing procedure [12].
Reference: [16] <author> P. Karn and W. A. Simpson, </author> <title> "The Photuris Session Key Management Protocol", Internet Draft draft-ietf-ipsec-photuris-09.txt, </title> <month> January </month> <year> 1996. </year>
Reference: [17] <author> S. Micali and P. Rogaway. </author> <title> Secure Computation. </title> <booktitle> In Proceedings of CRYPTO'91. </booktitle>
Reference-contexts: This notion draws from definitions of secure multiparty computation <ref> [17, 1, 9] </ref>.) We formalize this notion as follows. 3 The error probability is determined by a security parameter.
Reference: [18] <author> R. Ostrovsky and M. Yung. </author> <title> How to withstand mobile virus attacks. </title> <booktitle> In Proceedings of the 10 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Montreal, Quebec, Canada, </address> <pages> pages 51-59, </pages> <year> 1991. </year>
Reference-contexts: We only assume, then, that not too many parties are broken into at the same time. Following the proactive approach in <ref> [18, 10, 15] </ref> we introduce periodical, short refreshment phases, during which the parties jointly try to refresh their keys and regain security. Let a time-unit denote the time between two consecutive refreshment phases.
Reference: [19] <author> S. Jarecki. </author> <title> Proactive Secret Sharing and Public Key Cryptosystems. </title> <type> M.Eng. thesis, </type> <institution> MIT, </institution> <year> 1995 </year>
Reference-contexts: On the practical level, we present a surprisingly effective solution to this problem. Our solution involves a novel use of distributed signature schemes, such as the ones recently suggested in <ref> [19, 20, 13] </ref>. The problem. We consider parties that communicate via a network that is "totally unreliable". This is modeled by assuming that an adversary has full control over the network. <p> For our construction we can use several known proactive signature schemes, such as the ones described in <ref> [19, 20, 13] </ref>. We also describe yet another proactive signature scheme, that is simple and specially tailored to our needs. (In fact, our scheme may be of independent interest and useful in other scenarios as well). Organization. <p> However, we stress that the global verification key must remain unchanged throughout. (This is the crux of our solution: since the verification key is unchanging, it can be kept in a ROM and can thus be protected against malicious modifications.) Several proactive distributed signature schemes were proposed recently <ref> [19, 20, 13] </ref>. Also, in Section 5 we describe yet another such scheme, that is especially tailored for our needs. <p> Faulty parties may refuse to send their signature parts, or even send corrupted parts which may prevent us from combining the parts into a valid signature. In other schemes (e.g., <ref> [19, 20] </ref>) the correctness of each individual signature-part was verified before inclusion in the global computation. <p> Overview. The scheme is based on a known variant of El-Gamal signatures (which is also used in <ref> [19, 20] </ref>). As in any El-Gamal signature, the verification key is a triplet p; g; y, where p is a large prime, g is a generator in Z fl p and y is another element in Z fl p .
Reference: [20] <institution> Proactive public key and signature systems. </institution> <note> submitted to this conference </note>
Reference-contexts: On the practical level, we present a surprisingly effective solution to this problem. Our solution involves a novel use of distributed signature schemes, such as the ones recently suggested in <ref> [19, 20, 13] </ref>. The problem. We consider parties that communicate via a network that is "totally unreliable". This is modeled by assuming that an adversary has full control over the network. <p> For our construction we can use several known proactive signature schemes, such as the ones described in <ref> [19, 20, 13] </ref>. We also describe yet another proactive signature scheme, that is simple and specially tailored to our needs. (In fact, our scheme may be of independent interest and useful in other scenarios as well). Organization. <p> However, we stress that the global verification key must remain unchanged throughout. (This is the crux of our solution: since the verification key is unchanging, it can be kept in a ROM and can thus be protected against malicious modifications.) Several proactive distributed signature schemes were proposed recently <ref> [19, 20, 13] </ref>. Also, in Section 5 we describe yet another such scheme, that is especially tailored for our needs. <p> Faulty parties may refuse to send their signature parts, or even send corrupted parts which may prevent us from combining the parts into a valid signature. In other schemes (e.g., <ref> [19, 20] </ref>) the correctness of each individual signature-part was verified before inclusion in the global computation. <p> Overview. The scheme is based on a known variant of El-Gamal signatures (which is also used in <ref> [19, 20] </ref>). As in any El-Gamal signature, the verification key is a triplet p; g; y, where p is a large prime, g is a generator in Z fl p and y is another element in Z fl p .
References-found: 20

