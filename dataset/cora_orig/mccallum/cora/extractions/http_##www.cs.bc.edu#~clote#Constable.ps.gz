URL: http://www.cs.bc.edu/~clote/Constable.ps.gz
Refering-URL: http://www.cs.bc.edu/techreps.html
Root-URL: http://www.cs.bc.edu
Email: clote@informatik.uni-muenchen.de  
Title: A Note on the Relation between Polynomial Time Functionals and Constable's Class K  
Author: P. Clote 
Address: D-80333 Munchen.  
Affiliation: Institut fur Informatik, Ludwig-Maximilians-Universitat Munchen, Theresienstr. 39,  
Abstract: A result claimed without proof by R. Constable in a STOC73 paper is here corrected: a strictly increasing function f is presented for which Constable's class K(f) is properly contained in F P (f), the collection of functions polynomial time computable in f . 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Allen. </author> <title> Arithmetizing uniform N C. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 53(1) </volume> <pages> 1-50, </pages> <year> 1991. </year>
Reference-contexts: Since Cobham's seminal work, a number of other complexity classes have been characterized by function algebras, such as linear space [18] 3 , logspace [15], polynomial space [20], exponential time [17], certain general complexity classes [22], AC 0 , AC k , N C <ref> [9, 1] </ref>, ACC (2), ACC (6), T C 0 [7], etc. 4 One of the first persons to consider type 2 functional computational complexity was R. Constable, who in [11] introduced a type 2 machine model and related programming language, and then studied polynomial time reducibilities between functions.
Reference: 2. <author> D. Mix Barrington, N. Immerman, and H. Straubing. </author> <title> On uniformity in N C 1 . Journal of Computer and System Science, </title> <booktitle> 41(3) </booktitle> <pages> 274-306, </pages> <year> 1990. </year>
Reference-contexts: ; fi m ) AC A k is the collection of all languages computed by a logtime uniform family hff n : n 2 Ni of oracle boolean circuits, where s (ff n ) = n O (1) and depth d (ff n ) = O (log k (n)) (see <ref> [2] </ref>). N C A k is similarly defined, but where ^-gates and _ gates are restricted to be of fan-in 2. <p> Then K (f L ) A (f L ) = A (c L ) = F N C L ae F P L = L (c L ) = L (f L ): 3 Complexity classes contained in K In <ref> [2] </ref>, T C 0 is defined as the class of logtime uniform, constant depth, polynomial size threshold circuits. Theorem 17. T C 0 K. <p> Since modular counting f (x; y; m) = ( ijxj g (i; y)) mod m is definable in K, it follows that ACC K (see <ref> [2] </ref> for definition of ACC). More over, note that the majority quantifier of [2] is directly definable by c ( P ijxj g (i); x 2 ). <p> Since modular counting f (x; y; m) = ( ijxj g (i; y)) mod m is definable in K, it follows that ACC K (see <ref> [2] </ref> for definition of ACC). More over, note that the majority quantifier of [2] is directly definable by c ( P ijxj g (i); x 2 ).
Reference: 3. <author> P. Clote. </author> <title> Polynomial size frege proofs of certain combinatorial principles. </title> <editor> In P. Clote and J. Krajicek, editors, </editor> <booktitle> Arithmetic, Proof Theory and Computational Complexity, </booktitle> <pages> pages 162 - 184. </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: On p. 166 of <ref> [3] </ref>, the functions pair, lef t, right, fi were shown to belong to A 0 . (For a systematic presentation of details, see [4].) It is then straightforward to show that a sequence concatenation function _ exists in A 0 for which if s = hs 1 ; : : : <p> More over, note that the majority quantifier of [2] is directly definable by c ( P ijxj g (i); x 2 ). Question 18. (i) ALOGT IM E K? (ii) FLOGSP ACE K? (iii) To what complexity class does K correspond? 13 By <ref> [3, 7] </ref>, ALOGT IM E and FLOGSP ACE are characterized by function alge bras involving respectively k-bounded recursion on notation f (0; y) = g (y) f (s 1 (x); y) = h 1 (x; y; f (x; y)) where f (x; y) is bounded by the constant k, and length
Reference: 4. <author> P. Clote. </author> <title> Computation models and function algebras. </title> <editor> In E. Griffor, editor, </editor> <title> Handbook of Recursion Theory. </title> <note> in preparation. </note>
Reference-contexts: Edmonds [12] independently isolated the notion of good (i.e. polynomial time) algorithm. 3 Ritchie's work was actually prior to that of Cobham. 4 For a survey, see chapter 10 of [23] or <ref> [4] </ref>. <p> On p. 166 of [3], the functions pair, lef t, right, fi were shown to belong to A 0 . (For a systematic presentation of details, see <ref> [4] </ref>.) It is then straightforward to show that a sequence concatenation function _ exists in A 0 for which if s = hs 1 ; : : : ; s n i and t = ht 1 ; : : : ; t m i then s _ t = hs
Reference: 5. <author> P. Clote, B. Kapron, and A. Ignjatovic. </author> <title> Parallel computable higher type func-tionals. </title> <type> Technical Report BCCS-94-04, </type> <institution> Department of Computer Science, Boston College, </institution> <month> June </month> <year> 1994. </year>
Reference: 6. <author> P. Clote, B. Kapron, and A. Ignjatovic. </author> <title> Parallel computable higher type function-als. </title> <booktitle> In Proceedings of IEEE 34th Annual Symposium on Foundations of Computer Science, </booktitle> <address> Nov 3-5, 1993. Palo Alto CA. </address> <pages> pp. 72-83. </pages>
Reference-contexts: B. Kapron, A. Ignjatovic and the author <ref> [6] </ref> then characterized type 2 AC 0 functionals and gave a characterization of type 2 N C functionals. 10 The plan of this paper is as follows. In section 1 basic definitions and background results are given. <p> This class of functionals was then studied by M. Townsend [21], who called them P OLY , and later by B. Kapron and S. Cook [14], who first denoted this class as BF F , the basic feasible functionals of type 2. 10 The characterization of N C in <ref> [6] </ref> extended Mehlhorn's approach; the parallel ana logue of [14] will appear in the journal version of [6]. <p> Kapron and S. Cook [14], who first denoted this class as BF F , the basic feasible functionals of type 2. 10 The characterization of N C in <ref> [6] </ref> extended Mehlhorn's approach; the parallel ana logue of [14] will appear in the journal version of [6]. <p> In particular, it would be interesting to know the answers of the questions below. For economy of space, we refer the reader to <ref> [6] </ref> for definitions of the functional complexity classes A 0 , A which are respectively the type 2 analogues of A 0 , A, as BF F below is the type 2 analogue of F P . Definition 19 Townsend [21]. <p> Q jxj Definition 20. The class K is the smallest class of type 2 functionals containing 0,s 0 ,s 1 ,i n k ,+, . , fi, bx=yc,Ap and closed under functional composition, expan sion, functional substitution, WSUM and WPROD. Recall the following result from <ref> [6] </ref>. Theorem 21. A 0 ae A ae BF F . It follows from this paper that A 0 ae K A ae BF F . Question 22.
Reference: 7. <author> P. Clote and G. Takeuti. </author> <title> First order bounded arithmetic and small boolean circuit complexity classes. </title> <editor> In P. Clote and J. Remmel, editors, </editor> <booktitle> Feasible Mathematics II, </booktitle> <pages> pages 154-218. </pages> <publisher> Birkhauser Boston Inc., </publisher> <year> 1995. </year>
Reference-contexts: work, a number of other complexity classes have been characterized by function algebras, such as linear space [18] 3 , logspace [15], polynomial space [20], exponential time [17], certain general complexity classes [22], AC 0 , AC k , N C [9, 1], ACC (2), ACC (6), T C 0 <ref> [7] </ref>, etc. 4 One of the first persons to consider type 2 functional computational complexity was R. Constable, who in [11] introduced a type 2 machine model and related programming language, and then studied polynomial time reducibilities between functions. <p> Thus F (z; x; y) = hf (0; x; y); : : : ; f (jzj1; x; y)i. Define G (z; x; y) = F (jzj; x; y). In <ref> [7] </ref> it was shown that if g 2 A 0 , then the maximum function m g (x; y) = maxfg (i; y) : i jxjg belongs to A 0 . It follows that if g 2 A, then m g 2 A. <p> Theorem 17. T C 0 K. Proof By <ref> [7] </ref>, T C 0 = [0; I; s 0 ; s 1 ; jxj; bit; #; fi; comp; crn]: By definition, K = [0; I; s 0 ; s 1 ; +; . ; fi; bx=yc; comp; wsum; wprod]: We begin by showing that the initial functions of T C 0 <p> More over, note that the majority quantifier of [2] is directly definable by c ( P ijxj g (i); x 2 ). Question 18. (i) ALOGT IM E K? (ii) FLOGSP ACE K? (iii) To what complexity class does K correspond? 13 By <ref> [3, 7] </ref>, ALOGT IM E and FLOGSP ACE are characterized by function alge bras involving respectively k-bounded recursion on notation f (0; y) = g (y) f (s 1 (x); y) = h 1 (x; y; f (x; y)) where f (x; y) is bounded by the constant k, and length
Reference: 8. <author> Peter Clote and Evangelos Kranakis. </author> <title> Boolean functions, invariance groups and parallel complexity. </title> <journal> SIAM J. Comput. </journal> <volume> 20 </volume> <pages> 553-590, </pages> <year> 1991. </year>
Reference-contexts: defined to be [0; I; s 0 ; s 1 ; bit; jxj; #; comp; crn; wbrn]: The algebra A (f ) is defined to be [0; I; s 0 ; s 1 ; bit; jxj; #; f ; comp; crn; wbrn]: Part (a) of the following theorem appears in <ref> [8] </ref>. Part (b) is straightforward from the techniques there developed. Theorem 11 (P. Clote [8]). (a) F N C = A. (b) For all L N, F N C L = A (c L ). 2 Main results Lemma 12. A is closed under wsum. <p> comp; crn; wbrn]: The algebra A (f ) is defined to be [0; I; s 0 ; s 1 ; bit; jxj; #; f ; comp; crn; wbrn]: Part (a) of the following theorem appears in <ref> [8] </ref>. Part (b) is straightforward from the techniques there developed. Theorem 11 (P. Clote [8]). (a) F N C = A. (b) For all L N, F N C L = A (c L ). 2 Main results Lemma 12. A is closed under wsum. Proof Let f (x; y) = P ijxj g (i; y), where g 2 A.
Reference: 9. <author> P.G. Clote. </author> <title> Sequential, machine-independent characterizations of the parallel complexity classes ALOGT IME; AC k ; N C k and N C. </title> <editor> In P.J. Scott S.R. Buss, editor, </editor> <booktitle> Feasible Mathematics, </booktitle> <pages> pages 49-70. </pages> <publisher> Birkhauser, </publisher> <year> 1990. </year>
Reference-contexts: Since Cobham's seminal work, a number of other complexity classes have been characterized by function algebras, such as linear space [18] 3 , logspace [15], polynomial space [20], exponential time [17], certain general complexity classes [22], AC 0 , AC k , N C <ref> [9, 1] </ref>, ACC (2), ACC (6), T C 0 [7], etc. 4 One of the first persons to consider type 2 functional computational complexity was R. Constable, who in [11] introduced a type 2 machine model and related programming language, and then studied polynomial time reducibilities between functions. <p> Q jxj Define the algebras K = [0; I; s 0 ; s 1 ; +; . ; fi; bx=yc; comp; wsum; wprod] K (f ) = [0; I; s 0 ; s 1 ; +; . ; fi; bx=yc; f ; comp; wsum; wprod]: Definition 8 (P. Clote <ref> [9] </ref>). Assume that h 0 (x; y); h 1 (x; y) 1. <p> The idea is to formalize using crn and wbrn the "addition tree", a binary tree where values g (i; y) are placed at the leaves and internal nodes have as values the sum of their two children. To do so, we proceed as follows. In <ref> [9] </ref> explicit definitions of a number of functions were given in the algebra A 0 . <p> Define a pairing function pair (x; y) = 2 max (jxj;jyj)+1 (2 max (jxj;jyj) + y) + (2 max (jxj;jyj) + x): and its projections lef t (pair (x; y)) = x right (pair (x; y)) = y Following <ref> [9] </ref>, to encode the sequence (t 1 ; : : : ; t n ), let m be the least power of 2 greater than or equal to jt i j + 1, for i n. <p> In <ref> [9] </ref> it is shown that the function M SP (x; y) = bx=2 jyj c belongs to A 0 . <p> by product, the proof of the previous lemma can immediately be modified to yield that A is closed under wprod. 12 The initial functions 0, I, s 0 , s 1 , +, fi of K all belong to A | the first three belong to A by definition; in <ref> [9] </ref>, it was shown that + 2 A 0 A; fi is known to belong to N C (even N C 1 ), hence by Theorem 11 belongs to A. The algebra A is closed under composition, and by the previous lemma, under wsum and wprod.
Reference: 10. <author> A. Cobham. </author> <title> The intrinsic computational difficulty of functions. </title> <editor> In Y. Bar-Hillel, editor, </editor> <booktitle> Logic, Methodology and Philosophy of Science II, </booktitle> <pages> pages 24-30. </pages> <publisher> North-Holland, </publisher> <year> 1965. </year>
Reference-contexts: Introduction In <ref> [10] </ref> A. Cobham 2 was the first to isolate the notion of polynomial time computable function. <p> While part (a) is clearly true, the purpose of this note is to present a counterexample to part (b). On the same page of [11], the following claim is stated as a corollary without proof. Claim II K = L. Since Cobham <ref> [10] </ref> had characterized the polynomial time computable functions F P by the function algebra L, this corollary would have given a very elegant characterization of F P . <p> Definition 4. The function f is defined by composition (comp) from functions h; g 1 ; : : : ; g m if Definition 5 (A. Cobham <ref> [10] </ref>). <p> Define the algebras L = [0; I; s 0 ; s 1 ; #; comp; brn] L (f ) = [0; I; f; s 0 ; s 1 ; #; comp; brn]: The class F P consists of the collection of polynomial time computable functions. Theorem 6 A. Cobham <ref> [10] </ref>. F P = L. See [19] for a detailed proof of Cobham's theorem. Definition 7 (R. Constable [11]). The function f is defined by weak summation (wsum) [resp. weak product (wprod)] from g if f (x; y) equals jxj X g (i; y) [resp.
Reference: 11. <author> R. Constable. </author> <title> Type 2 computational complexity. </title> <booktitle> In 5th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1973. </year> <pages> pp. 108-121. </pages>
Reference-contexts: Constable, who in <ref> [11] </ref> introduced a type 2 machine model and related programming language, and then studied polynomial time reducibilities between functions. On p. 118 of [11], Constable defined the class L (f ) to be the collection of functions of the form xF (f; x), where F is a type 2 polynomial time <p> Constable, who in <ref> [11] </ref> introduced a type 2 machine model and related programming language, and then studied polynomial time reducibilities between functions. On p. 118 of [11], Constable defined the class L (f ) to be the collection of functions of the form xF (f; x), where F is a type 2 polynomial time computable operator; i.e. L (f ) is the collection of all functions polynomial time computable in f . <p> The class K is defined as previously, but without the initial function f . 6 On page 118 of <ref> [11] </ref>, the following claim is stated as a theorem without proof. Claim I (a) For all f , K (f ) L (f ). (b) For all non-decreasing f , K (f ) = L (f ). <p> While part (a) is clearly true, the purpose of this note is to present a counterexample to part (b). On the same page of <ref> [11] </ref>, the following claim is stated as a corollary without proof. Claim II K = L. Since Cobham [10] had characterized the polynomial time computable functions F P by the function algebra L, this corollary would have given a very elegant characterization of F P . <p> R. Constable's work <ref> [11] </ref> was quite seminal. K. <p> It is known that this class coincides with those functions computable in time (or space) bounded by a finite stack of 2's topped by the length of the input. 6 In the terminology of <ref> [11] </ref>, K (f ()) = [+; ; fi; bx=yc; f (); Os; P Q 7 All unexplained notation is later introduced. 8 [16] contains results from Mehlhorn's Ph.D. dissertation written under the direction of R. <p> In section 3 we show K contains T C 0 and ACC, and pose the question whether K contains ALOGT IM E and LOGSP ACE. 1 Definitions 1.1 Oracle Turing machine In <ref> [11] </ref>, R. Constable introduced a natural programming language including function oracle calls, and with respect to this model defined the notion of polynomial time type 2 functional. In [14], B. Kapron and S. <p> Theorem 6 A. Cobham [10]. F P = L. See [19] for a detailed proof of Cobham's theorem. Definition 7 (R. Constable <ref> [11] </ref>). The function f is defined by weak summation (wsum) [resp. weak product (wprod)] from g if f (x; y) equals jxj X g (i; y) [resp.
Reference: 12. <author> J. Edmonds. </author> <title> Paths, trees, flowers. </title> <journal> Canad. J. Math., </journal> <volume> 17 </volume> <pages> 449-467, </pages> <year> 1965. </year>
Reference-contexts: Edmonds <ref> [12] </ref> independently isolated the notion of good (i.e. polynomial time) algorithm. 3 Ritchie's work was actually prior to that of Cobham. 4 For a survey, see chapter 10 of [23] or [4].
Reference: 13. <editor> L. Kalmar. Egyszeru pelda eldonthetetlen aritmetikai problemara. Mate es Fizikai Lapok, </editor> <volume> 50 </volume> <pages> 1-23, </pages> <year> 1943. </year> <title> [In Hungarian with German abstract]. </title>
Reference-contexts: R. Constable's work [11] was quite seminal. K. Mehlhorn [16] 8 subsequently studied polynomial time reducibility between functions, and (essentially) defined the collection BF F of basic feasible type 2 functionals as the straightforward extension of Cobham's machine-independent characterization of the polynomial 5 The elementary functions <ref> [13] </ref> form the smallest class containing certain initial functions including 2 x and closed under composition, bounded addition g (x; y) = P x i=0 h (i; y), and bounded multiplication g (x; y) = Q x i=0 h (i; y).
Reference: 14. <author> B. Kapron and S. Cook. </author> <title> A new characterization of Mehlhorn's poly time function-als. </title> <booktitle> In Proceedings of IEEE 32th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages pp. 342-347, </pages> <year> 1991. </year> <note> Journal version in SIAM J. on Comput. </note>
Reference-contexts: L (f ) is the collection of all functions polynomial time computable in f . From subsequent work of K. Mehlhorn [16] and especially of B. Kapron and S. Cook <ref> [14] </ref>, it is known that Constable's class L (f ) can alternately be defined in a machine independent manner as the smallest class of functions containing Cobham's initial functions together with f , and closed under composition and bounded recursion on notation. ? Part of this research supported by NSF CCR-9408090 <p> Mehlhorn measured the cost for function oracle calls as 1 (unit cost). In <ref> [14] </ref>, B. Kapron and S. Cook proved a difficult extension of Mehlhorn's theorem. <p> Constable introduced a natural programming language including function oracle calls, and with respect to this model defined the notion of polynomial time type 2 functional. In <ref> [14] </ref>, B. Kapron and S. Cook defined the notion of norm (or length) of a function, and studied polynomial time (function) oracle machines, running in second order polynomial time. Definition 1. The length of x in binary satisfies jxj = dlog 2 (x + 1)e. <p> This class of functionals was then studied by M. Townsend [21], who called them P OLY , and later by B. Kapron and S. Cook <ref> [14] </ref>, who first denoted this class as BF F , the basic feasible functionals of type 2. 10 The characterization of N C in [6] extended Mehlhorn's approach; the parallel ana logue of [14] will appear in the journal version of [6]. <p> Townsend [21], who called them P OLY , and later by B. Kapron and S. Cook <ref> [14] </ref>, who first denoted this class as BF F , the basic feasible functionals of type 2. 10 The characterization of N C in [6] extended Mehlhorn's approach; the parallel ana logue of [14] will appear in the journal version of [6]. <p> Here, the cost for a function oracle call f (y) is jf (y)j. The main result of <ref> [14] </ref> was a characterization of type 2 polynomial time computable functionals | the function algebra BF F of basic feasible functionals equals the type 2 polynomial time computable functionals. <p> The formal definition of BF F , given in Definition 19, is a straightforward type 2 generalization of Cob-ham's function algebra L. It immediately follows from <ref> [14] </ref> that R.
Reference: 15. <author> J.C. Lind. </author> <title> Computing in logarithmic space. </title> <type> Technical Report Project MAC Technical Memorandum 52, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1974. </year>
Reference-contexts: Since Cobham's seminal work, a number of other complexity classes have been characterized by function algebras, such as linear space [18] 3 , logspace <ref> [15] </ref>, polynomial space [20], exponential time [17], certain general complexity classes [22], AC 0 , AC k , N C [9, 1], ACC (2), ACC (6), T C 0 [7], etc. 4 One of the first persons to consider type 2 functional computational complexity was R.
Reference: 16. <author> K. Mehlhorn. </author> <title> Polynomial and abstract subrecursive classes. </title> <journal> Journal of Computer and System Science, </journal> <volume> 12 </volume> <pages> 147-178, </pages> <year> 1976. </year>
Reference-contexts: L (f ) is the collection of all functions polynomial time computable in f . From subsequent work of K. Mehlhorn <ref> [16] </ref> and especially of B. Kapron and S. <p> R. Constable's work [11] was quite seminal. K. Mehlhorn <ref> [16] </ref> 8 subsequently studied polynomial time reducibility between functions, and (essentially) defined the collection BF F of basic feasible type 2 functionals as the straightforward extension of Cobham's machine-independent characterization of the polynomial 5 The elementary functions [13] form the smallest class containing certain initial functions including 2 x and closed <p> coincides with those functions computable in time (or space) bounded by a finite stack of 2's topped by the length of the input. 6 In the terminology of [11], K (f ()) = [+; ; fi; bx=yc; f (); Os; P Q 7 All unexplained notation is later introduced. 8 <ref> [16] </ref> contains results from Mehlhorn's Ph.D. dissertation written under the direction of R.
Reference: 17. <author> B. Monien. </author> <title> A recursive and grammatical characterization of exponential time languages. </title> <journal> Theoretical Computer Science, </journal> <volume> 3 </volume> <pages> 61-74, </pages> <year> 1977. </year>
Reference-contexts: Since Cobham's seminal work, a number of other complexity classes have been characterized by function algebras, such as linear space [18] 3 , logspace [15], polynomial space [20], exponential time <ref> [17] </ref>, certain general complexity classes [22], AC 0 , AC k , N C [9, 1], ACC (2), ACC (6), T C 0 [7], etc. 4 One of the first persons to consider type 2 functional computational complexity was R.
Reference: 18. <author> R.W. Ritchie. </author> <title> Classes of predictably computable functions. </title> <journal> Trans. Am. Math. Soc., </journal> <volume> 106 </volume> <pages> 139-173, </pages> <year> 1963. </year>
Reference-contexts: Since Cobham's seminal work, a number of other complexity classes have been characterized by function algebras, such as linear space <ref> [18] </ref> 3 , logspace [15], polynomial space [20], exponential time [17], certain general complexity classes [22], AC 0 , AC k , N C [9, 1], ACC (2), ACC (6), T C 0 [7], etc. 4 One of the first persons to consider type 2 functional computational complexity was R.
Reference: 19. <author> H. E. Rose. Subrecursion: </author> <title> Function and Hierarchies, </title> <booktitle> volume 9 of Oxford Logic Guides. </booktitle> <publisher> Clarendon Press, Oxford, </publisher> <year> 1984. </year> <pages> 191 pages. </pages>
Reference-contexts: Theorem 6 A. Cobham [10]. F P = L. See <ref> [19] </ref> for a detailed proof of Cobham's theorem. Definition 7 (R. Constable [11]). The function f is defined by weak summation (wsum) [resp. weak product (wprod)] from g if f (x; y) equals jxj X g (i; y) [resp.
Reference: 20. <author> D.B. Thompson. Subrecursiveness: </author> <title> machine independent notions of computability in restricted time and storage. </title> <journal> Math. Systems Theory, </journal> <volume> 6 </volume> <pages> 3-15, </pages> <year> 1972. </year>
Reference-contexts: Since Cobham's seminal work, a number of other complexity classes have been characterized by function algebras, such as linear space [18] 3 , logspace [15], polynomial space <ref> [20] </ref>, exponential time [17], certain general complexity classes [22], AC 0 , AC k , N C [9, 1], ACC (2), ACC (6), T C 0 [7], etc. 4 One of the first persons to consider type 2 functional computational complexity was R.
Reference: 21. <author> M. Townsend. </author> <title> Complexity for type-2 relations. </title> <journal> Notre Dame Journal of Formal Logic, </journal> <volume> 31 </volume> <pages> 241-262, </pages> <year> 1990. </year>
Reference-contexts: This class of functionals was then studied by M. Townsend <ref> [21] </ref>, who called them P OLY , and later by B. Kapron and S. <p> For economy of space, we refer the reader to [6] for definitions of the functional complexity classes A 0 , A which are respectively the type 2 analogues of A 0 , A, as BF F below is the type 2 analogue of F P . Definition 19 Townsend <ref> [21] </ref>.
Reference: 22. <author> K. Wagner. </author> <title> Bounded recursion and complexity classes. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 74, </volume> <pages> pages 492-498. </pages> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Since Cobham's seminal work, a number of other complexity classes have been characterized by function algebras, such as linear space [18] 3 , logspace [15], polynomial space [20], exponential time [17], certain general complexity classes <ref> [22] </ref>, AC 0 , AC k , N C [9, 1], ACC (2), ACC (6), T C 0 [7], etc. 4 One of the first persons to consider type 2 functional computational complexity was R.
Reference: 23. <author> K. Wagner and G. Wechsung. </author> <title> Computational Complexity. </title> <publisher> Reidel Publishing Co., </publisher> <year> 1986. </year>
Reference-contexts: Edmonds [12] independently isolated the notion of good (i.e. polynomial time) algorithm. 3 Ritchie's work was actually prior to that of Cobham. 4 For a survey, see chapter 10 of <ref> [23] </ref> or [4]. <p> L ae FP L = L (f ) and hence that K (f ) ae L (f ) for a particular non-decreasing function. 7 I believe it is worth clarifying the status of these claims (for which no proofs can be found in the literature), since on page 194 of <ref> [23] </ref>, Claim II is stated as Theorem 10.27 again without proof. R. Constable's work [11] was quite seminal. K.
Reference: 24. <author> C. Wilson. </author> <title> Relativized nc. </title> <journal> Math. Systems Theory, </journal> <volume> 20 </volume> <pages> 13-29, </pages> <year> 1987. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The algebra A is closed under composition, and by the previous lemma, under wsum and wprod. It follows that K A. The same proof, in the presence of an additional initial function f , yields the inclusion K (f ) A (f ). ut In <ref> [24] </ref>, C. Wilson relativized the bounded fan-in boolean circuit model to allow oracle gates (see section 1.2), and for this model constructed an oracle L for which the class N C L is properly contained in polynomial time P L . <p> Oracle calls cost blog 2 kc depth, where k is the size of the query x. Theorem 14 C. Wilson <ref> [24] </ref>. There is an oracle L ae N, for which N C L ae P L . It easily follows from this theorem that there exists L N, such that F N C L ae F P L . Definition 15. <p> Question 23. Is it the case that A 0 &lt; K &lt; A &lt; BF F ? I would like to thank Chris Wilson for email correspondence and for sending a copy of <ref> [24] </ref>.
References-found: 24

