URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~kolbe/crc.ps.Z
Refering-URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~kolbe/
Root-URL: 
Email: e-mail: fkolbejwaltherg@inferenzsysteme.informatik.th-darmstadt.de  
Title: Proof Management and Retrieval  
Author: Thomas Kolbe Christoph Walther 
Address: Alexanderstr. 10, D-64283 Darmstadt, Germany  
Affiliation: Fachbereich Informatik, Technische Hochschule Darmstadt  
Abstract: 1 Automated theorem provers might be improved if they reuse previously computed proofs. Our approach for reuse is based on so-called proof shells which are obtained from computed proofs by second-order generalization. Each proof shell represents a schematic proof of a schematic conjecture and applies for each instance of the schematic conjecture yielding (first-order) proof obligations justifying a successful proof reuse. But since there may be different proofs for different instances of a schematic conjecture, we have to select a reusable proof shell among the applicable proof shells for a new conjecture. For supporting such a retrieval efficiently, the set of computed proof shells is organized by so-called proof volumes and a proof dictionary. All applicable proof shells can be accessed by searching for the right proof volume in the proof dictionary, if the applicability of proof shells is determined by so-called simple second-order match ers.
Abstract-found: 1
Intro-found: 1
Reference: [ Brock et al., 1988 ] <author> Bishop Brock, Shaun Cooper, and William Pierce. </author> <title> Analogical Reasoning and Proof Discovery. </title> <booktitle> In Proceedings of the 9th International Conference on Automated Deduction, Argonne, </booktitle> <pages> pages 454-468. </pages> <year> 1988. </year>
Reference-contexts: While we only solve basic problems and generalize their solutions, in `pure' abstraction the more difficult task of solving generalized problems is attempted. Reasoning by analogy <ref> [ Hall, 1989; Brock et al., 1988; Owen, 1990 ] </ref> maps problems and solutions from a source into a target domain, where the structure of the source proof is used for guiding a target proof.
Reference: [ Bundy et al., 1993 ] <author> Alan Bundy, Andrew Stevens, Frank van Harmelen, Andrew Ireland, and Alan Smaill. Rippling: </author> <title> A Heuristic for Guiding Inductive Proofs. </title> <journal> Artificial Intelligence, </journal> <volume> 62 </volume> <pages> 183-253, </pages> <year> 1993. </year>
Reference-contexts: Induction formulas are proved by modifying the induction conclusion IC using axioms until the induction hypothesis IH is applicable. Despite this regularity the search problem of deciding when and where to apply which axiom is a main challenge in automated mathematical induction <ref> [ Hutter, 1990; Bundy et al., 1993; Walther, 1994 ] </ref> . In our approach we attempt to reuse the whole (first-order part of an) induction formula's proof, i.e. we do not deal with the `matching' problem of identifying a (maximal) reusable part of a proof.
Reference: [ DeJong and Mooney, 1986 ] <author> Gerald DeJong and Ray-mond Mooney. </author> <title> Explanation-based Learning: An Alternative View. </title> <journal> Machine Learning, </journal> <volume> 1 </volume> <pages> 145-176, </pages> <year> 1986. </year>
Reference: [ Ellman, 1989 ] <author> Thomas Ellman. </author> <title> Explanation-Based Learning: A Survey of Programs and Perspectives. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(2) </volume> <pages> 163-221, </pages> <year> 1989. </year>
Reference: [ Giunchiglia and Walsh, 1992 ] <author> Fausto Giunchiglia and Toby Walsh. </author> <title> A Theory of Abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 323-389, </pages> <year> 1992. </year>
Reference-contexts: However, EBL merely provides a reformulation of a solution at the same level which is not very successful in the domain of theorem proving, cf. [ Nie and Plaisted, 1989 ] . Therefore it is advantageous to use abstraction techniques <ref> [ Giunchiglia and Walsh, 1992; Plaisted, 1981 ] </ref> which distinguish a basic and an abstract level of problems and their solutions, like we did by introducing second-order terms.
Reference: [ Hall, 1989 ] <author> Rogers P. Hall. </author> <title> Computational Approaches to Analogical Reasoning: A Comparative Analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 39 </volume> <pages> 39-120, </pages> <year> 1989. </year>
Reference-contexts: While we only solve basic problems and generalize their solutions, in `pure' abstraction the more difficult task of solving generalized problems is attempted. Reasoning by analogy <ref> [ Hall, 1989; Brock et al., 1988; Owen, 1990 ] </ref> maps problems and solutions from a source into a target domain, where the structure of the source proof is used for guiding a target proof.
Reference: [ Hutter, 1990 ] <author> Dieter Hutter. </author> <title> Guiding Induction Proofs. </title> <booktitle> In Proceedings of the 10th International Conference on Automated Deduction, Kaiserslautern, </booktitle> <pages> pages 147-161, </pages> <year> 1990. </year>
Reference-contexts: Induction formulas are proved by modifying the induction conclusion IC using axioms until the induction hypothesis IH is applicable. Despite this regularity the search problem of deciding when and where to apply which axiom is a main challenge in automated mathematical induction <ref> [ Hutter, 1990; Bundy et al., 1993; Walther, 1994 ] </ref> . In our approach we attempt to reuse the whole (first-order part of an) induction formula's proof, i.e. we do not deal with the `matching' problem of identifying a (maximal) reusable part of a proof.
Reference: [ Kolbe and Walther, 1994 ] <author> Thomas Kolbe and Christoph Walther. </author> <title> Reusing Proofs. </title> <editor> In A. Cohn, editor, </editor> <booktitle> Proceedings of the 11th European Conference on Artificial Intelligence, Amsterdam, </booktitle> <pages> pages 80-84. </pages> <publisher> John Wiley & Sons, Ltd., </publisher> <year> 1994. </year>
Reference-contexts: Wa652/4-1,2,3 by the Deutsche Forschungsgemeinschaft as part of the focus program "Deduktion". 2 A Method for Reusing Proofs Our approach for reusing proofs is organized into the following steps (cf. <ref> [ Kolbe and Walther, 1994 ] </ref> for a more detailed account): Analysis: Assume that the prover has computed a proof p for a conjecture ' from a set of axioms AX , written AX ` p '. <p> Note that the refined proof analysis <ref> [ Kolbe and Walther, 1994 ] </ref> yields a proof (catch) for this indexed conjecture. of a proof of a conjecture where no function symbol occurs more than once in . <p> (P V ) [ fG (c)gig, if P V 2 P D s-applies for where G ( ) = root (P V ). 2 The described formal approach is applicable for managing the proofs of arbitrary conjectures ' if these proofs are analyzed using the refined proof analysis method, cf. <ref> [ Kolbe and Walther, 1994 ] </ref> . In this case it is guaranteed that the hypothesis of Theorem 4.8 is satisfied, because different occurrences of function symbols in the conjecture are distinguished by indexing.
Reference: [ Kolbe and Walther, 1995a ] <author> Thomas Kolbe and Christoph Walther. </author> <title> Patching Proofs for Reuse. </title> <editor> In Nada Lavrac and Stefan Wrobel, editors, </editor> <booktitle> Proc. Eu-ropean Conf. on Machine Learning, Heraklion, </booktitle> <pages> pages 303 - 306, </pages> <year> 1995. </year>
Reference-contexts: AX ` ((C)), cf. [ Kolbe and Walther, 1995b ] . If successful then is proved by reuse because the semantical consequence relation is invariant w.r.t. (second-order) instantiation, i.e. C j= implies t (C) j= t () for each second-order substitution t , cf. <ref> [ Kolbe and Walther, 1995a ] </ref> . <p> Different from this our reuse method is based on the axioms used in the proof from which the proof itself can always be constructed in a uniform way <ref> [ Kolbe and Walther, 1995a ] </ref> . The application domain for our reuse method is conceptually independent from mathematical induction. Thus any area of (automated) first-order reasoning which provides some regularity for successful reuse attempts is appropriate.
Reference: [ Kolbe and Walther, 1995b ] <author> Thomas Kolbe and Christoph Walther. </author> <title> Second-Order Matching modulo Evaluation | A Technique for Reusing Proofs. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: C, but not in . Hence we have to find a fur-ther second-order substitution replacing the remaining function variables such that the resulting proof obligations, i.e. all formulas in the instantiated schematic catch ((C)), are provable from AX , i.e. AX ` ((C)), cf. <ref> [ Kolbe and Walther, 1995b ] </ref> . If successful then is proved by reuse because the semantical consequence relation is invariant w.r.t. (second-order) instantiation, i.e. C j= implies t (C) j= t () for each second-order substitution t , cf. [ Kolbe and Walther, 1995a ] . <p> Although each applicable proof volume P V is uniquely determined, there may be several matchers via which P V s-applies for . Here we use heuristics developed in <ref> [ Kolbe and Walther, 1995b ] </ref> for rating the matchers and choosing one of them. For efficiency reasons, this heuris-tical selection is embedded into the matching procedure.
Reference: [ Mitchell et al., 1986 ] <author> Tom M. Mitchell, Richard M. Keller, and Smadar T. Kedar-Cabelli. </author> <title> Explanation-based Generalization: A Unifying View. </title> <journal> Machine Learning, </journal> <volume> 1 </volume> <pages> 47-80, </pages> <year> 1986. </year>
Reference: [ Nie and Plaisted, 1989 ] <author> Xumin Nie and David A. Plaisted. </author> <title> Application of Explanation-Based Generalization in Resolution Theorem Proving. </title> <editor> In Z. Ras, editor, </editor> <booktitle> Methodologies for Intelligent Systems 4, </booktitle> <pages> pages 226-233. </pages> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: However, EBL merely provides a reformulation of a solution at the same level which is not very successful in the domain of theorem proving, cf. <ref> [ Nie and Plaisted, 1989 ] </ref> . Therefore it is advantageous to use abstraction techniques [ Giunchiglia and Walsh, 1992; Plaisted, 1981 ] which distinguish a basic and an abstract level of problems and their solutions, like we did by introducing second-order terms.
Reference: [ Owen, 1990 ] <author> Stephen Owen. </author> <title> Analogy for Automated Reasoning. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: While we only solve basic problems and generalize their solutions, in `pure' abstraction the more difficult task of solving generalized problems is attempted. Reasoning by analogy <ref> [ Hall, 1989; Brock et al., 1988; Owen, 1990 ] </ref> maps problems and solutions from a source into a target domain, where the structure of the source proof is used for guiding a target proof.
Reference: [ Plaisted, 1981 ] <author> David A. Plaisted. </author> <title> Theorem Proving with Abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 16 </volume> <pages> 47-108, </pages> <year> 1981. </year>
Reference-contexts: However, EBL merely provides a reformulation of a solution at the same level which is not very successful in the domain of theorem proving, cf. [ Nie and Plaisted, 1989 ] . Therefore it is advantageous to use abstraction techniques <ref> [ Giunchiglia and Walsh, 1992; Plaisted, 1981 ] </ref> which distinguish a basic and an abstract level of problems and their solutions, like we did by introducing second-order terms.
Reference: [ Walther, 1994 ] <author> Christoph Walther. </author> <title> Mathematical Induction. </title> <editor> In D. M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 2, </volume> <pages> pages 127-227. </pages> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Automated theorem provers might be improved if they are enabled to reuse previously computed proofs. We investigate the reuse of proofs within the domain of automated mathematical induction <ref> [ Walther, 1994 ] </ref> where similar conjectures often have similar proofs: An induction formula IH ! IC is either a step formula or a base formula in which case IH equals true. <p> Induction formulas are proved by modifying the induction conclusion IC using axioms until the induction hypothesis IH is applicable. Despite this regularity the search problem of deciding when and where to apply which axiom is a main challenge in automated mathematical induction <ref> [ Hutter, 1990; Bundy et al., 1993; Walther, 1994 ] </ref> . In our approach we attempt to reuse the whole (first-order part of an) induction formula's proof, i.e. we do not deal with the `matching' problem of identifying a (maximal) reusable part of a proof.
References-found: 15

