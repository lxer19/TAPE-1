URL: ftp://ftp.cs.columbia.edu/reports/reports-1994/cucs-027-94.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1994.html
Root-URL: http://www.cs.columbia.edu
Title: Expanding the Repertoire of Process-based Tool Integration  
Author: MS Thesis Giuseppe Valetto Gail E. Kaiser and Kathy McKeown 
Degree: Thesis Committee:  
Date: November 23, 1994  
Note: Professors  c fl1994 Giuseppe Valetto  
Address: 500 West 120th St. New York, N.Y. 10027  
Affiliation: Department of Computer Science Columbia University  
Pubnum: Technical Report CUCS-027-94  
Abstract: The purpose of this thesis is to design and implement a new protocol for Black Box tool enveloping, in the context of the Oz Process Centered Environment, as an auxiliary mechanism that deals with additional families of tools, whose character prevents a thoroughly satisfactory service by the current encapsulation method. We mean to address interpretive and query systems, multi-user collaborative and non-collaborative tools, and programs that allow incremental binding of parameters after start-up and storing of intermediate and/or partial results. Our goal is to support a greater amount of interaction between multiple human operators, the tools and the environment, in the context of complex software development and management tasks. During the realization of this project, we introduced several concepts related to integration of Commercial Off-The-Shelf tools into Software Development Environments: an approach based on multiple enveloping protocols, a categorization of tools according to their multi-tasking and multi-user capabilities, the ideas of loose wrapping (as opposed to the usual tight wrapping) and of persistent tools (with respect to the duration of a single task), and a functional extension of some intrinsically single-user applications to a (limited) form of collaboration. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: The PSL at Columbia University has been working on PCEs for several years and Oz is its most recent effort. The system benefits of course from our previous experience, most specifically the one gained in developing and testing the Marvel 3.x PCE [5] <ref> [1] </ref>, to which Oz is intended to be the successor. While Oz inherited from Marvel most of its main features, some crucial enhancements have been planned and implemented.
Reference: [2] <author> Noureddine Belkhatir, Jacky Estublier, and Walcelio L. Melo. </author> <title> Adele 2: A support to large software development process. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 159-170, </pages> <address> Re-dondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Some examples are GRAS [30], based on an extension of the classic Entity-Relationship data model, and Damokles [11], that employs schemas in the form of attributed graphs. Adele [15] <ref> [2] </ref> enhances this methodology by implementing a system of triggers connected to the state of the database, so that data modification by one tool is recognized and may cause the invocation of other ones, leading to further action.
Reference: [3] <author> Israel Z. Ben-Shaul. </author> <title> Oz: A Decentralized Process Centered Environment. </title> <type> Technical Report CUCS-024-94, </type> <institution> Columbia University Department of Computer Science, </institution> <month> December </month> <year> 1994. </year> <type> PhD Thesis. </type>
Reference-contexts: we discuss in more detail tool enveloping for PCEs; moreover, we outline some issues relevant to building wrappers for various classes of tools and examine the different options; we also present an implementation of envelopes for long-lived, large size, interpretive and multi-user tools in the context of the Oz [4] <ref> [3] </ref> PCE, being developed by the Programming Systems Laboratory of Columbia University. 2 Motivation Among the characteristic features of PCEs is their modularity and most specifically the replacibility of the process model loaded inside their central engine. <p> However, they already have given us valuable feedback on what are the strong points and the limits of MTP and suggested future research lines. 14 This feature was developed by Israel Ben-Shaul for his PhD thesis <ref> [3] </ref>. 74 For example, we could see that our method still falls short | under certain points of view | with regard to an easy Black Box integration of multi-user systems via the MULTI NO QUEUE paradigm.
Reference: [4] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: sections, we discuss in more detail tool enveloping for PCEs; moreover, we outline some issues relevant to building wrappers for various classes of tools and examine the different options; we also present an implementation of envelopes for long-lived, large size, interpretive and multi-user tools in the context of the Oz <ref> [4] </ref> [3] PCE, being developed by the Programming Systems Laboratory of Columbia University. 2 Motivation Among the characteristic features of PCEs is their modularity and most specifically the replacibility of the process model loaded inside their central engine.
Reference: [5] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An Architecture for Multi-User Software Development Environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: The PSL at Columbia University has been working on PCEs for several years and Oz is its most recent effort. The system benefits of course from our previous experience, most specifically the one gained in developing and testing the Marvel 3.x PCE <ref> [5] </ref> [1], to which Oz is intended to be the successor. While Oz inherited from Marvel most of its main features, some crucial enhancements have been planned and implemented.
Reference: [6] <author> Christian Bremeau. </author> <title> The PCTE Contribution to Ada Programming Support Environments (APSE). </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-166, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: The goal of PCTE is to create a set of services and facilities, called a public tool interface, complete enough to support tool writers in very different situations and domains; many SDE prototypes and projects [51] <ref> [6] </ref> [19] in Europe as well as in the USA already exploit this facility. Another proposed standard that exploits an object oriented repository for its integration mechanism is the Ada-specific CAIS-A [36].
Reference: [7] <author> Geoffrey Clemm and Leon Osterweil. </author> <title> A mechanism for environment integration. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(1) </volume> <pages> 1-25, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Tool fragmentation is the basic integration principle of several systems, like RPDE [23] [37], Odin <ref> [7] </ref> and IDL [47] [48]. RPDE maintains tables that represent its tool fragments as the cross-product of objects (i.e. structural components that can be manipulated by applications) and roles and methods (i.e. procedural components used to act upon objects).
Reference: [8] <author> Michael DeBellis, Kanth Miriyala, Sudin Bhat William, C. Sasso, and Owen Rambow. </author> <title> KBSA Concept Demo. </title> <type> Technical Report RL-TR-93-38, </type> <institution> Rome Laboratory, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: be well representative of MULTI NO QUEUE). * Tool-kits that support collaboration within some set of software activities, like the abovementioned FLECSE, which employs various dedicated groupware tools, all built on the common framework provided by Suite [9]. * Complex and large-size knowledge-based CASE tools and systems, as Concept Demo <ref> [8] </ref>, that employs AI planning formalisms to guide the process of developing software artifacts, or Refine, that proposes a programming language, a data repository in the form of a knowledge base, and a set of dedicated utilities, all aimed to the production of Lisp applications. 9 Contribution 9.1 Outcome of This
Reference: [9] <author> Prasun Dewan and Rajiv Choudary. </author> <title> A High-level and Flexible Framework for Implementing Multiuser User Interfaces. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(4) </volume> <pages> 345-380, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: the LBL Whiteboard, a public domain product (all of these collaborative applications can be well representative of MULTI NO QUEUE). * Tool-kits that support collaboration within some set of software activities, like the abovementioned FLECSE, which employs various dedicated groupware tools, all built on the common framework provided by Suite <ref> [9] </ref>. * Complex and large-size knowledge-based CASE tools and systems, as Concept Demo [8], that employs AI planning formalisms to guide the process of developing software artifacts, or Refine, that proposes a programming language, a data repository in the form of a knowledge base, and a set of dedicated utilities, all
Reference: [10] <author> Prasun Dewan and John Riedl. </author> <title> Toward Computer-Supported Concurrent Software Engineering. </title> <journal> Computer, </journal> <volume> 26(1) </volume> <pages> 17-27, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: A simple example is that of a multi-user editor, employed in the context of a groupware task, as the one described by Dewan and Riedl for their FLECSE <ref> [10] </ref> toolset; the program itself permits and is able to deal with concurrent modification of its internal data, but for the environment's data repository managed by Oz it is necessary to come up with an ad hoc concurrency control policy that allows multiple write locks on the object containing the edited
Reference: [11] <author> Klaus R. Dittrich, Willi Gotthard, and Peter C. Lockemann. </author> <title> DAMOKLES | a database system for software engineering environments. </title> <editor> In Reidar Conradi, Tor M. Didriksen, and Dag H. Wanvik, editors, </editor> <booktitle> Advanced Programming Environments, volume 244 of Lecture Notes in Computer Science, </booktitle> <pages> pages 353-371. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1986. </year> <month> 93 </month>
Reference-contexts: Some examples are GRAS [30], based on an extension of the classic Entity-Relationship data model, and Damokles <ref> [11] </ref>, that employs schemas in the form of attributed graphs. Adele [15] [2] enhances this methodology by implementing a system of triggers connected to the state of the database, so that data modification by one tool is recognized and may cause the invocation of other ones, leading to further action.
Reference: [12] <author> Mark Dowson. </author> <title> ISTAR | an integrated project support environment. </title> <booktitle> In ACM SIG--SOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 27-33, </pages> <address> Palo Alto, CA, </address> <month> December </month> <year> 1986. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 22(1), </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: It is generally recognized that the initiator of studies along these lines has been the IS-TAR [13] <ref> [12] </ref> system.
Reference: [13] <author> Mark Dowson. </author> <title> Integrated project support with ISTAR. </title> <journal> IEEE Software, </journal> <volume> 4(6) </volume> <pages> 6-15, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The concept of envelopes has been introduced and exploited for the first time in the Istar SDE <ref> [13] </ref>. <p> It is generally recognized that the initiator of studies along these lines has been the IS-TAR <ref> [13] </ref> [12] system.
Reference: [14] <author> Anthony Earl. </author> <title> Principles of a Reference Model for Computer Aided Software Engineering Environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 115-129, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: While the principles on which such systems are built upon, their architectures and their use can greatly vary, the need to integrate tools and exploit them for the users' purposes is a common trait of SDEs [52] <ref> [14] </ref>. <p> tools' operation, and using such informa tion to guide the development process. * Process: it realizes the support of a well-defined software development process, by defining and tracking its steps. (According to this categorization, the work presented in this thesis would be categorized mainly as Control integration.) 10 Moreover, Earl <ref> [14] </ref> proposed a well known reference model for Computer Aided Software Engineering Environments (CASEEs, another term for addressing SDEs), sometimes referred to as the "Toaster Model", in which a lot of emphasis is on the issues of portability and interoperability of tools.
Reference: [15] <author> J. Estublier, S. Ghoul, and S. Krakowiak. </author> <title> Preliminary experience with a configuration control system for modular programs. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> ACM SIG-SOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 149-156, </pages> <address> Pittsburgh PA, </address> <month> April </month> <year> 1984. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 19(5), </volume> <month> May </month> <year> 1984. </year>
Reference-contexts: Some examples are GRAS [30], based on an extension of the classic Entity-Relationship data model, and Damokles [11], that employs schemas in the form of attributed graphs. Adele <ref> [15] </ref> [2] enhances this methodology by implementing a system of triggers connected to the state of the database, so that data modification by one tool is recognized and may cause the invocation of other ones, leading to further action.
Reference: [16] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: As we already pointed out in Sections 2 and 3 Marvel and Oz both employ shell-script envelopes for executing their activities (i.e. process-related tasks) and abstractly represent external programs as objects in a toolbase. Another example is offered by ProcessWEAVER <ref> [16] </ref>, a commercial system embracing Black Box integration and combining together a broadcast message server and a process engine.
Reference: [17] <author> F. Gallo, G. Boudier, and I. Thomas. </author> <title> Overview of PCTE and PCTE+. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 24(2), </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: PCTE [50] <ref> [17] </ref> is probably the most representative and generally accepted example of such standards.
Reference: [18] <author> David Garlan and Ehsan Ilias. </author> <title> Low-cost, adaptable tool integration policies for integrated environments. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 1-10, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Another interesting issue is in our opinion the loose wrapping approach to enveloping, that could be seen as an hybrid between conventional envelopes and a broadcast message server, as in Field, or its proposed extension Forest <ref> [18] </ref> 17 , in which the attention is shifted from the external program as a whole, to single meaningful events caused within the environment by its use. This kind of monitoring can be a precious information resource not only for a specific SDE, but in general.
Reference: [19] <author> Mari Georges and Claude Koemmer. </author> <title> Use and Extension of PCTE: The SPMMS Information System. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 271-282, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: The goal of PCTE is to create a set of services and facilities, called a public tool interface, complete enough to support tool writers in very different situations and domains; many SDE prototypes and projects [51] [6] <ref> [19] </ref> in Europe as well as in the USA already exploit this facility. Another proposed standard that exploits an object oriented repository for its integration mechanism is the Ada-specific CAIS-A [36].
Reference: [20] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a Tool Integration Language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manifacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: While the original protocol (named Shell Envelope Protocol, or SEL <ref> [20] </ref>), adequately services in a rather simple and elegant way a wide range of conventional Unix utilities (as explained in the Section 5), we found it falling short when it comes to several categories of programs; therefore we tried to address some of these shortcomings with a new mechanism, complementary to
Reference: [21] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80 The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1983. </year>
Reference-contexts: set of custom tools, all managed by a common framework designed ad hoc; typical and well-known examples of such frameworks are the language-based editors in Gandalf [22], which integrate those programming activities specifically oriented towards the coding and building of a complex software project, or interpretive systems such as Smalltalk <ref> [21] </ref> or Refine [40], in which all the tools are combined together at run-time in the memory space of the interpreter.
Reference: [22] <author> A.N. Habermann and D. Notkin. </author> <title> Gandalf: Software Development Environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(12):1117-1127, </volume> <month> December </month> <year> 1986. </year> <month> 94 </month>
Reference-contexts: An extreme approach in this sense is the realization of a set of custom tools, all managed by a common framework designed ad hoc; typical and well-known examples of such frameworks are the language-based editors in Gandalf <ref> [22] </ref>, which integrate those programming activities specifically oriented towards the coding and building of a complex software project, or interpretive systems such as Smalltalk [21] or Refine [40], in which all the tools are combined together at run-time in the memory space of the interpreter.
Reference: [23] <author> William Harrison. </author> <title> RPDE 3 : A Framework for Integrating dtool fragments. </title> <journal> IEEE Soft--ware, </journal> <volume> 4(6) </volume> <pages> 46-56, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Tool fragmentation is the basic integration principle of several systems, like RPDE <ref> [23] </ref> [37], Odin [7] and IDL [47] [48]. RPDE maintains tables that represent its tool fragments as the cross-product of objects (i.e. structural components that can be manipulated by applications) and roles and methods (i.e. procedural components used to act upon objects).
Reference: [24] <author> George T. Heineman. </author> <title> Process modeling with cooperative agents. </title> <editor> In Brian Warboys, editor, </editor> <booktitle> 3rd European Workshop on Software Process Technology, volume 772 of Lecture Notes in Computer Science, </booktitle> <pages> pages 75-89, </pages> <institution> Villard de Lans (Grenoble), France, </institution> <month> February </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: name of Rivendell, other new features implemented or planned for Oz are support for disconnected and low bandwidth operation [46], automatic maintenance of user agendas as "to do" lists [53], delegation of process steps as a collaboration facility between users, and an advanced rule-based language for specifying concurrency control policies <ref> [24] </ref>. 4 Related work As we pointed out in the previous sections, tool integration is of central importance to every effort to build efficient and practical SDEs; therefore many studies have concentrated on defining and exploring the meaning and the dimensions of the term integration as applied to SDEs. <p> Such overhead could be avoided, if the tool could outlive the single rules that exploit it. * The SEL paradigm generally assumes that rules fired by each single user and their associated activities have limited or no impact on the work of others: Oz's concurrency control mechanism <ref> [24] </ref>, tailorable for each rule signature, controls the sharing of the data among users; beside that, Oz assumes that each activity is carried on substantially in isolation. <p> Such flexibility must be provided by the PCE with some feature (in Oz it can be achieved by defining and loading appropriate control rules for the environment <ref> [24] </ref>); this is not in the strictest sense a part of the wrapping facility, but is nevertheless essential, in order to be able to take advantage of the integration of this class of tools.
Reference: [25] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule Chaining in Marvel: Dynamic Binding of Parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Also informations about tools is abstracted by objects of the special class TOOL. * Rule-Based Process Model: the process (and consequently the behavior of the environment) is described by a set of rules. Each rule can either be invoked by an human agent or automatically instantiated by the process <ref> [25] </ref>, and consists of several different parts (see Figure 2): The signature: a name and a list of typed parameters the rule accepts; the user invokes the rule by name and provides all its arguments with correct types; The condition section: first, additional objects related to the ones bound via the
Reference: [26] <author> G. E. Kaiser, N. S. Barghouti, and M. H. Sokolsky. </author> <title> Preliminary Experience with Process Modeling in the Marvel Software Development Environment Kernel. </title> <booktitle> In 23rd Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 131-140, </pages> <address> Kona HI, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: In the context of PCEs and considering all of the above, we believe that tool enveloping is one of the most promising options to address the integration problem. It certainly accounts for the necessary flexibility at a very low cost, because it realizes what we call a Black Box <ref> [26] </ref> protocol for integration, since it is not concerned with the internal structure and nature of the wrapped program and no modifications to its code are required. (On the opposite side, we qualify an approach as White Box if the code needs to be manipulated, as for example in most message-passing
Reference: [27] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: This is the approach followed also in the case of our PCE, Oz, which has been equipped with a protocol for envelopes inherited from the Marvel system <ref> [27] </ref> (also a project by the PSL of Columbia University), to which it is intended to be the successor.
Reference: [28] <author> Alain Karsenty, Cristophe Tronche, and Michel Beaudouin-Lafon. GroupDesign: </author> <title> Shared Editing in a Heterogeneous Environment. </title> <journal> Computing Systems, </journal> <volume> 6(2) </volume> <pages> 167-195, </pages> <year> 1993. </year>
Reference-contexts: resources (single-user databases can be instances of UNI QUEUE or MULTI QUEUE, while multi-user ones can be classified as non-collaborative MULTI NO QUEUE). * Single groupware applications aimed to the production of documents or of program source code, as for example DistEdit [31] that deals with group editing, or GroupDesign <ref> [28] </ref> that is oriented towards drawing in structured graphics, as is the LBL Whiteboard, a public domain product (all of these collaborative applications can be well representative of MULTI NO QUEUE). * Tool-kits that support collaboration within some set of software activities, like the abovementioned FLECSE, which employs various dedicated groupware
Reference: [29] <author> Brian W. Kernighan and John R. Mashey. </author> <title> The UNIX programming environment. </title> <journal> Computer, </journal> <volume> 12(4) </volume> <pages> 25-34, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: Systems and methods are quite numerous, even when one decides | as we will do in the rest of this Section | to neglect the wide category including all the organic collections of tools that (as for example in the case of UNIX <ref> [29] </ref>) are sometimes claimed as being SDEs in themselves and that mostly realize only platform integration.
Reference: [30] <author> N. Kiesel, A. Schurr, and B. Westfechtel. </author> <title> GRAS, a graph-oriented database system for software engineering applications. </title> <editor> In Hing-Yang Lee, Thomas F. Reid, and Stan Jarz-abek, editors, </editor> <booktitle> 6th International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 272-286, </pages> <address> Singapore, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Some examples are GRAS <ref> [30] </ref>, based on an extension of the classic Entity-Relationship data model, and Damokles [11], that employs schemas in the form of attributed graphs.
Reference: [31] <author> Michael J. Knister and Atul Prakash. DistEdit: </author> <title> A Distributed Toolkit for Supporting Multiple Group Editors. </title> <booktitle> In CSCW90: Conference on Computer-Suppported Cooperative Work, </booktitle> <pages> pages 342-355, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: that are quite demanding with respect to computational resources (single-user databases can be instances of UNI QUEUE or MULTI QUEUE, while multi-user ones can be classified as non-collaborative MULTI NO QUEUE). * Single groupware applications aimed to the production of documents or of program source code, as for example DistEdit <ref> [31] </ref> that deals with group editing, or GroupDesign [28] that is oriented towards drawing in structured graphics, as is the LBL Whiteboard, a public domain product (all of these collaborative applications can be well representative of MULTI NO QUEUE). * Tool-kits that support collaboration within some set of software activities, like
Reference: [32] <author> S. G. Kochan and P. H. Wood, </author> <title> editors. UNIX Shell Programming. </title> <publisher> Hayden Books, </publisher> <address> Indianapolis, </address> <year> 1988. </year>
Reference-contexts: It is in this context that Black Box tool integration takes place and envelopes are employed. In the wrapping protocol inherited from Marvel, exploiting the abovementioned SEL language, envelopes are implemented as augmented versions of normal shell scripts <ref> [32] </ref>; they handle the passing of parameters to the envelope from the environment, invoke the tool inside the script, customize its execution using the parameters as arguments and return to the system the results of the 7 8 &lt;rule-name&gt; [param-1, param-2, ...]: condition section - activity section - effect 1; effect
Reference: [33] <author> Balachander Krishnamurthy and Naser S. Barghouti. Provence: </author> <title> A process visualization and enactment environment. </title> <editor> In Ian Sommerville and Manfred Paul, editors, </editor> <booktitle> 4th European Software Engineering Conference, number 717 in Lecture Notes in Computer Science, </booktitle> <pages> pages 451-465, </pages> <address> Garmisch-Partenkirchen, Germany, </address> <month> September </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference-contexts: By embracing this approach, it can also be possible to conceptually identify what such important events are, from the point of view of a system requiring Black Box integration (Some work addressing similar theoretical issues and involving Marvel has been carried out in the context of the Provence <ref> [33] </ref> project.) * In connection with loose wrapping, the idea of interfacing our envelopes with preexisting, long-lived instances of the programs (i.e. persistent tools) rather than with new ones, initiated ad hoc for the processing needs of the single activities. * The extension of some intrinsically single-user tools to partial multi-user
Reference: [34] <institution> Programming Systems Laboratory. </institution> <note> Marvel 3.0 administrator's manual. Technical Report CUCS-032-91, </note> <institution> Columbia University Department of Computer Science, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: The process model and the data definition are written by the process designer (also referred to as the Administrator) using the Marvel Strategy Language (MSL) <ref> [34] </ref>. * Rule Chaining: This is the process' assistance model, the way in which process en-action is carried on.
Reference: [35] <author> David Notkin and William G. Griswold. </author> <title> Extension and Software Development. </title> <booktitle> In 10th International Conference on Software Engineering, </booktitle> <pages> pages 274-283, </pages> <address> Ra*es City, Singapore, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: Unfortunately, relatively few commercial applications are equipped with features that allow to build arbitrary functional interfaces to the engine of an SDE. An attempt to address this limitation is presented by Notkin 13 and Griswold <ref> [35] </ref>, who proposed a mechanism to dynamically and incrementally extend the functionality of generic software systems, without modifying the underlying source code.
Reference: [36] <author> Robert Munckand Patricia Oberndorf, Erhard Ploedereder, and Richard Thall. </author> <title> An Overview of the DOD-STD-1838A (proposed), The Common APSE Interface Set, </title> <editor> Revision A. In Peter Henderson, editor, </editor> <booktitle> ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 235-247, </pages> <address> Boston MA, </address> <month> November </month> <year> 1988. </year> <journal> ACM Press. Special issues of Software Engineering Notes, 13(5), November 1988 and SIGPLAN Notices, </journal> <volume> 24(2), </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: Another proposed standard that exploits an object oriented repository for its integration mechanism is the Ada-specific CAIS-A <ref> [36] </ref>. A different approach to the White Box paradigm, that is intended to be more cost-efficient than building custom toolsets around a given framework is represented by the class of systems based on event notification, whose stress is on control integration.
Reference: [37] <author> Harold Ossher and William Harrison. </author> <title> Support for change in RPDE 3 . In Richard N. </title> <editor> Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 218-228, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Tool fragmentation is the basic integration principle of several systems, like RPDE [23] <ref> [37] </ref>, Odin [7] and IDL [47] [48]. RPDE maintains tables that represent its tool fragments as the cross-product of objects (i.e. structural components that can be manipulated by applications) and roles and methods (i.e. procedural components used to act upon objects).
Reference: [38] <author> Steven S. Popovich and Gail E. Kaiser. </author> <title> An architectural survey of object management systems. </title> <journal> International Journal of Intelligent & Cooperative Information Systems, </journal> 1(3&4):515-577, December 1992. 
Reference-contexts: Oz is a multi-user PCE that employs a rule-based approach to realize the process description and stores all the data, the software components and their mutual relations in an object-oriented repository, called the objectbase <ref> [38] </ref>. The PSL at Columbia University has been working on PCEs for several years and Oz is its most recent effort.
Reference: [39] <author> James M. Purtilo and Pankaj Jalote. </author> <title> An Environment for Developing Fault-Tolerant Software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(2) </volume> <pages> 153-159, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: In response to an event recognition YEAST takes the actions that have been previously associated to that event. Polylith <ref> [39] </ref> combines an event-driven approach with another technique in the spectrum of White Box integration: tool fragmentation.
Reference: [40] <institution> Reasoning Systems, Palo Alto CA. Refine Software Development Tool, </institution> <year> 1986. </year>
Reference-contexts: tools, all managed by a common framework designed ad hoc; typical and well-known examples of such frameworks are the language-based editors in Gandalf [22], which integrate those programming activities specifically oriented towards the coding and building of a complex software project, or interpretive systems such as Smalltalk [21] or Refine <ref> [40] </ref>, in which all the tools are combined together at run-time in the memory space of the interpreter.
Reference: [41] <author> Steven P. Reiss. </author> <title> Connecting Tools Using Message Passing in the Field Program Development Environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: One of the first and most well-known examples is Field <ref> [41] </ref>, developed at Brown University: its basic principle is the addition of interface modules that send and receive codified messages to the code of generic tools.
Reference: [42] <author> David S. Rosenblum and Balachander Krishnamurthy. </author> <title> An Event-Based Model of Software Configuration Management. </title> <editor> In Peter H. Feiler, editor, </editor> <booktitle> 3rd International Workshop on Software Configuration Management, </booktitle> <pages> pages 94-97. </pages> <publisher> ACM Press, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: The server elaborates them and produces further information that is sent to other tools, in order to coordinate their operation according to a given working model kept in the server. Another system using a form of event notification is Yeast <ref> [42] </ref>: it has a client-server structure, in which the server process accepts from the clients event pattern definitions linked to action specifications; it is also able to recognize the occurrences of events, in a 12 computer system, such as time passing, timestamp modifications etc., or can be notified of such occurrence,
Reference: [43] <author> Wilhelm Schafer, </author> <title> editor. </title> <booktitle> 8th International Software Process Workshop: State of the Practice in Process Technology, </booktitle> <address> Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <booktitle> IEEE Computer Society Press. [44] 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The main concern of this work is to investigate some options for tool enveloping in the context of Process Centered Environments (PCEs) <ref> [43] </ref> [44]. These are a class of SDEs that rely on a built-in process modeling formalism (e.g. a dedicated language) to define, enforce and support a variety of customizable software processes.
Reference: [45] <author> Peter D. Skopp. </author> <title> Process centered software development on mobile hosts. </title> <type> Technical Report CUCS-035-93, </type> <institution> Columbia University Department of Computer Science, </institution> <month> October </month> <year> 1993. </year> <type> MS Thesis Proposal. </type>
Reference-contexts: To reach this goal, we relied on a new kind of client, which is being developed by our team for a different project in the Oz context, aiming to support low-bandwidth and disconnected operation by the environment's users <ref> [45] </ref>. On that experience we built what we qualify as Special Purpose Clients (SPCs), as opposed to Oz's usual ones (that we will call from now on General Purpose Clients | or GPCs), because their only functionality is MTP enveloping.
Reference: [46] <author> Peter D. Skopp and Gail E. Kaiser. </author> <title> Disconnected operation in a multi-user software development environment. </title> <editor> In Bharat Bhargava, editor, </editor> <booktitle> IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <pages> pages 146-151, </pages> <address> Princeton NJ, </address> <month> October </month> <year> 1993. </year> <month> 96 </month>
Reference-contexts: Besides the project aiming to the construction of a new tool integration protocol that is the object of this thesis and to which we gave the name of Rivendell, other new features implemented or planned for Oz are support for disconnected and low bandwidth operation <ref> [46] </ref>, automatic maintenance of user agendas as "to do" lists [53], delegation of process steps as a collaboration facility between users, and an advanced rule-based language for specifying concurrency control policies [24]. 4 Related work As we pointed out in the previous sections, tool integration is of central importance to every <p> For example, the delegation to an SPC of a certain process fragment 16 The design and implementation of this system component has be carried out in close collaboration with Peter Skopp, of the PSL at Columbia University, who has been developing a "proxy" client for Laputa <ref> [46] </ref>.
Reference: [47] <author> Richard Snodgrass and Karen Shannon. </author> <title> Supporting flexible and efficient tool integra-tion. </title> <editor> In Reidar Conradi, Tor M. Didriksen, and Dag H. Wanvik, editors, </editor> <booktitle> Advanced Programming Environments, volume 244 of Lecture Notes in Computer Science, </booktitle> <pages> pages 290-313. </pages> <publisher> Springer-Verlag, </publisher> <address> Trondheim, Norway, </address> <year> 1986. </year>
Reference-contexts: Tool fragmentation is the basic integration principle of several systems, like RPDE [23] [37], Odin [7] and IDL <ref> [47] </ref> [48]. RPDE maintains tables that represent its tool fragments as the cross-product of objects (i.e. structural components that can be manipulated by applications) and roles and methods (i.e. procedural components used to act upon objects).
Reference: [48] <author> Richard Snodgrass and Karen Shannon. </author> <title> Fine grained data management to achieve evolution resilience in a software development environment. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 144-156, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Tool fragmentation is the basic integration principle of several systems, like RPDE [23] [37], Odin [7] and IDL [47] <ref> [48] </ref>. RPDE maintains tables that represent its tool fragments as the cross-product of objects (i.e. structural components that can be manipulated by applications) and roles and methods (i.e. procedural components used to act upon objects).
Reference: [49] <author> E. Solomita, J. Kempf, and D. Duchamp. Xmove: </author> <title> A pseudoserver for X window movement. The X Resource, </title> <booktitle> 1(11) </booktitle> <pages> 143-170, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: To obtain this, we employed a utility, also developed at Columbia University in the context of a separate project, called xmove <ref> [49] </ref>, which allows the GUI of a program to be transferred across hosts and terminals. Also xmove has a client-server structure, in which the server accepts commands from the client and performs the corresponding operations on the windows it controls.
Reference: [50] <author> Ian Thomas. </author> <title> PCTE Interfaces: Supporting Tools in Software-Engineering Environments. </title> <journal> IEEE Software, </journal> <volume> 6(6) </volume> <pages> 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: PCTE <ref> [50] </ref> [17] is probably the most representative and generally accepted example of such standards.
Reference: [51] <author> Ian Thomas. </author> <title> Tool Integration in the PACT Environment. </title> <booktitle> In 11th International Conference on Software Engineering, </booktitle> <pages> pages 13-22, </pages> <address> Pittsburgh PA, May 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The goal of PCTE is to create a set of services and facilities, called a public tool interface, complete enough to support tool writers in very different situations and domains; many SDE prototypes and projects <ref> [51] </ref> [6] [19] in Europe as well as in the USA already exploit this facility. Another proposed standard that exploits an object oriented repository for its integration mechanism is the Ada-specific CAIS-A [36].
Reference: [52] <author> Ian Thomas and Brian A. Nejmeh. </author> <title> Definitions of Tool Integration for Environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 29-35, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: While the principles on which such systems are built upon, their architectures and their use can greatly vary, the need to integrate tools and exploit them for the users' purposes is a common trait of SDEs <ref> [52] </ref> [14].
Reference: [53] <author> Andrew Z. Tong, Gail E. Kaiser, and Steven S. Popovich. </author> <title> A flexible rule-chaining engine for process-based software engineering. </title> <booktitle> In 9th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 79-88, </pages> <address> Monterey CA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: the construction of a new tool integration protocol that is the object of this thesis and to which we gave the name of Rivendell, other new features implemented or planned for Oz are support for disconnected and low bandwidth operation [46], automatic maintenance of user agendas as "to do" lists <ref> [53] </ref>, delegation of process steps as a collaboration facility between users, and an advanced rule-based language for specifying concurrency control policies [24]. 4 Related work As we pointed out in the previous sections, tool integration is of central importance to every effort to build efficient and practical SDEs; therefore many studies
Reference: [54] <author> A. I. Wasserman. </author> <title> Tool Integration in Software Engineering Environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments: International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 137-149, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. 97 </note>
Reference-contexts: Wasserman <ref> [54] </ref> for example identified five different kinds of integration: * Platform: it is concerned with interoperability of tools, achieved through the use of a common set of system services, such as networking and operating system facilities; * Presentation: the stress is on giving to a toolkit the same "look-and-feel", via common
References-found: 53

