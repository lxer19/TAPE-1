URL: ftp://ftp.cs.colorado.edu/users/andre/papers/ICSE18.ps
Refering-URL: http://www.cs.colorado.edu/~andre/papers.html
Root-URL: http://www.cs.colorado.edu
Email: fandre,dennis,alwg@cs.colorado.edu  
Title: A Generic, Peer-to-Peer Repository for Distributed Configuration Management  
Author: Andre van der Hoek, Dennis Heimbigner, and Alexander L. Wolf 
Address: Boulder, CO 80309 USA  
Affiliation: Software Engineering Research Laboratory Department of Computer Science University of Colorado  
Date: March 25-29, 1996  
Note: From the Proceedings of the 18th Inter. Conf. on Software Engineering, Berlin, Germany,  
Abstract: Distributed configuration management is intended to support the activities of projects that span multiple sites. NUCM is a testbed that we are developing to help us explore the issues of distributed configuration management. NUCM separates configuration management repositories (i.e., the stores for versions of artifacts) from configuration management policies (i.e., the procedures by which the versions are manipulated) by providing a generic model of a distributed repository and an associated programmatic interface. This paper describes the model and the interface, presents an initial repository distribution mechanism, and sketches how NUCM can be used to implement two, rather different, configuration management policies, namely check-in/check-out and change sets. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Allen, G. Fernandez, K. Kane, D. Leblang, D. Mi-nard, and J. Posner. ClearCase MultiSite: </author> <title> Supporting Geographically-Distributed Software Development. In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, </booktitle> <year> 1995. </year>
Reference-contexts: In Mistral, a simple heuristic is employed: add whatever does not exist. This is not always the best choice in a CM setting, and users must be aware of this (implicit) merging behavior. ClearCase MultiSite The ClearCase system [2] has recently been extended with MultiSite <ref> [1] </ref>, an op 309 tional product for distributed CM. Rather than hav-ing a single, central repository, MultiSite replicates the repository at remote sites. The replicas are instrumented in such a way that development at each site is performed on a different branch of a global version tree.
Reference: [2] <institution> Atria Software, Natick, Massachusetts. ClearCase Product Summary, </institution> <year> 1994. </year>
Reference-contexts: In Mistral, a simple heuristic is employed: add whatever does not exist. This is not always the best choice in a CM setting, and users must be aware of this (implicit) merging behavior. ClearCase MultiSite The ClearCase system <ref> [2] </ref> has recently been extended with MultiSite [1], an op 309 tional product for distributed CM. Rather than hav-ing a single, central repository, MultiSite replicates the repository at remote sites.
Reference: [3] <author> B. Berliner. CVS II: </author> <title> Parallelizing Software Development. </title> <booktitle> In Proceedings of 1990 Winter USENIX Conference, </booktitle> <address> Washington, D.C., </address> <year> 1990. </year>
Reference-contexts: Clearly, DRCS is best suited for use in a centralized local-area network, not in a setting of wide-area distribution. Distributed CVS Distributed CVS (DCVS) [12] is an extension of the CVS system <ref> [3] </ref>, a variant of RCS designed to better handle configurations of whole systems. Similar to DRCS, DCVS employs the notion of a central repository to which remote CVS clients connect. As opposed to transporting files, DCVS transports entire configurations to a remote user workspace. <p> We are currently designing an interface function to explicitly exchange versions within a collection. 313 icy like CVS <ref> [3] </ref> to be built on top of NUCM, locking is provided separately from versioning. The following locking functions are provided in NUCM: Lock, Lock-Version, Unlock, and UnlockVersion. The semantics of the locking functions are straightforward.
Reference: [4] <institution> Continuus Software Corporation, Irvine, California. Continuus Task Reference, </institution> <year> 1994. </year>
Reference-contexts: In addition, the fact that there must be one main workspace can be an organizational, as well as a performance, bottleneck. Continuus/CM A hybrid of the ClearCase Mul-tiSite and Endevor Workspace approaches to distributed CM is followed in Continuus/CM <ref> [4] </ref>. Repositories are replicated across sites, and a central repository acts as the main repository to which all changes eventually must be committed. Thus, the repositories act as high-level "workspaces" for the various sites.
Reference: [5] <author> Legent Corporation. </author> <title> Endevor WSX Product Overview. </title> <note> Available on the world wide web at http://www.sv.legent.com/Info/Ewsx/Ewsx.html. </note>
Reference-contexts: These branches, which have more to do with project structure than configuration management, must eventually be merged by the users themselves into a single baseline version. This can be a serious burden, especially if the attributes and relationships on the artifacts have changed as well. Endevor's Workspaces Endevor/WSX <ref> [5] </ref> is a CM system centered around the notion of user workspaces. A workspace is "spun off" from another workspace, and from then on provides the owner of the child workspace with a private copy of the artifacts in the parent workspace.
Reference: [6] <institution> W.H. Davidow and M.S. Malone. The Virtual Corporation. Harper Business, </institution> <year> 1992. </year>
Reference-contexts: In the extreme case, multiple companies in multiple countries form temporary alliances, sometimes called virtual corporations <ref> [6] </ref>, for the purpose of producing a specific product. And while these companies might This work was supported in part by the Air Force Material Command, Rome Laboratory, and the Advanced Research Projects Agency under Contract Number F30602-94-C-0253.
Reference: [7] <institution> Digital Equipment Corporation, Hewlett-Packard Company, HyperDesk Corporation, NCR Corporation, </institution> <note> Object Design, </note> <author> Inc., and SunSoft, Inc. </author> <title> The Common Object Request Broker: Architecture and Specification. Object Management Group, </title> <address> Framing-ham, Massachusetts, </address> <month> December </month> <year> 1993. </year> <note> version 1.2. </note>
Reference-contexts: Section 5 briefly discusses our initial distribution mechanism, which is based on the CORBA distributed object programming standard <ref> [7] </ref>. We show in Section 6 how two, rather different, CM policies can be implemented using NUCM and conclude in Section 7 with a brief look at future work. 2 Related Work in Distributed CM Distribution is a relatively new feature in CM systems. <p> One could even consider building something from scratch. Our approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming <ref> [7] </ref>, using the Orbeline CORBA engine [18]. The resulting architecture of our implementation of NUCM is shown in Figure 3. Within the oval, a group of NUCM access servers provides access to a group 314 of repositories of artifacts.
Reference: [8] <author> J. Estublier and R. Casallas. </author> <title> The Adele Configuration Manager. </title> <editor> In W. Tichy, editor, </editor> <booktitle> Software Configuration Management, number 2 in Trends in Software, </booktitle> <pages> pages 99-134. </pages> <publisher> Wiley, </publisher> <address> London, </address> <year> 1994. </year>
Reference-contexts: This approach suffers from the same performance drawbacks as DRCS, but to a worse degree because of the heavier amount of traffic implicit in transporting configurations. Again, DCVS is best suited for use in a local-area network. Adele Adele <ref> [8] </ref> has been enhanced for distribution through a tool called Mistral [11]. Mistral helps a user manage the replication of an Adele database.
Reference: [9] <author> P.H. Feiler. </author> <title> Configuration Management Models in Commercial Environments. </title> <type> Technical Report SEI-91-TR-07, </type> <institution> Software Engineering Institute, Pittsburgh, Pennsylvania, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: This includes configurations themselves. 2 Feiler <ref> [9] </ref> provides a survey of some basic CM policies. 0270-5257/96 $5.00 c fl 1996 IEEE 308 This paper presents our experiences to date in de-signing, building, and using NUCM. We begin in Section 2 by discussing related work in the area of distributed CM. <p> Less than 10% of the total code written for NUCM is dedicated to handling distribution. Clearly, there is a big advantage in using a CORBA-based implementation. 6 Implementing Two CM Policies Feiler <ref> [9] </ref> classifies CM systems into the following four broad categories: check-in/check-out, composition, long transaction, and change set. Each category represents a different CM policy. Thus, a good test of NUCM's flexibility and usability is to implement a CM system from each category.
Reference: [10] <author> P.H. Feiler and G. Downey. </author> <title> Transaction-Oriented Configuration Management: A Case Study. </title> <type> Technical Report CMU/SEI-90-TR-23, </type> <institution> Software Engineering Institute, Pittsburgh, Pennsylvania, </institution> <year> 1990. </year>
Reference-contexts: In fact, many of the most widely known commercial and research systems, such as ADC [22], CCC/Harvest [21], NSE <ref> [10] </ref>, EPOS [15], and ShapeTools [14] do not yet provide any real support for distribution. Those that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture. Typically, the CM system is augmented with a simple client/server interface.
Reference: [11] <author> C. Gadonna. </author> <title> MISTRAL User Manual V1. </title> <address> LGI, </address> <month> May </month> <year> 1995. </year> <title> ESPRIT Project 5327, </title> <publisher> REBOOT. </publisher>
Reference-contexts: Again, DCVS is best suited for use in a local-area network. Adele Adele [8] has been enhanced for distribution through a tool called Mistral <ref> [11] </ref>. Mistral helps a user manage the replication of an Adele database. Using Mistral, an Adele user at one site assembles a database delta, which compactly represents the changes made to artifacts at that site, and ships the delta to users at other sites.
Reference: [12] <author> T. Hung and P.F. Kunz. </author> <title> UNIX Code Management and Distribution. </title> <type> Technical Report SLAC-PUB-5923, </type> <institution> Stanford Linear Accelerator Center, Stanford, Cali-fornia, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: Clearly, DRCS is best suited for use in a centralized local-area network, not in a setting of wide-area distribution. Distributed CVS Distributed CVS (DCVS) <ref> [12] </ref> is an extension of the CVS system [3], a variant of RCS designed to better handle configurations of whole systems. Similar to DRCS, DCVS employs the notion of a central repository to which remote CVS clients connect.
Reference: [13] <author> Y.-J. Lin and S.P. Reiss. </author> <title> Configuration Management with Logical Structures. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering. </booktitle> <institution> Association for Computer Machinery, </institution> <month> March </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: In another setting, a client CM system could provide a specialized browser or editor, hiding the details of the NUCM view from the user altogether. For example, the CM model described by Lin and Reiss <ref> [13] </ref> could use NUCM in such a way that its software units map to atoms, its aggregate modules are expressed using collections, and its specialized browser is used to present the contents of views. 3.3 Distribution Model NUCM provides the concepts of both physical and logical repositories.
Reference: [14] <author> A. Mahler and A. Lampen. </author> <title> An Integrated Toolset for Engineering Software Configurations. </title> <booktitle> In Proceedings of the ACM SOFSOFT/SIGPLAN Software Engineering Symposium on Practical Software Engineering Environments, </booktitle> <pages> pages 191-200, </pages> <address> Boston, Mas-sachusetts, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: In fact, many of the most widely known commercial and research systems, such as ADC [22], CCC/Harvest [21], NSE [10], EPOS [15], and ShapeTools <ref> [14] </ref> do not yet provide any real support for distribution. Those that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture. Typically, the CM system is augmented with a simple client/server interface.
Reference: [15] <author> B.P. Munch. </author> <title> Versioning in a Software Engineering Database|the Change Oriented Way. </title> <type> PhD thesis, </type> <address> DCST, NTH, Trondheim, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: In fact, many of the most widely known commercial and research systems, such as ADC [22], CCC/Harvest [21], NSE [10], EPOS <ref> [15] </ref>, and ShapeTools [14] do not yet provide any real support for distribution. Those that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture. Typically, the CM system is augmented with a simple client/server interface.
Reference: [16] <author> B.C. Neuman. </author> <title> The Prospero File System: A Global File System Based on the Virtual System Model. </title> <booktitle> Usenix Association, File Systems Workshop. </booktitle>
Reference-contexts: The next question is, what is an appropriate way to realize the model and interface? There are some obvious candidates, including a distributed file system (e.g., Jade [19] or Prospero <ref> [16] </ref>), a distributed database [20], or an advanced operating system environment (e.g., PCTE [23]). One could even consider building something from scratch. Our approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [7], using the Orbeline CORBA engine [18].
Reference: [17] <author> B. O'Donovan and J.B. </author> <title> Grimson. A Distributed Version Control System for Wide Area Networks. </title> <journal> Software Engineering Journal, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: This inhibits flexibility both in how artifacts are distributed and in what CM policies can be employed. Below we describe the distribution aspects of several prominent and representative CM systems, illustrating these problems in more detail. Distributed RCS Distributed RCS (DRCS) <ref> [17] </ref> is an extension of the popular RCS system [24]. All artifacts, including the individual versions of a file, the version tree, and the descriptive file attributes, are stored in a central repository. Distribution is achieved by establishing a client/server relationship among remote RCS clients and the central repository.
Reference: [18] <institution> PostModern Computing Technologies, Inc, Mountain View, California. </institution> <note> Orbeline User's Guide, </note> <year> 1994. </year>
Reference-contexts: One could even consider building something from scratch. Our approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [7], using the Orbeline CORBA engine <ref> [18] </ref>. The resulting architecture of our implementation of NUCM is shown in Figure 3. Within the oval, a group of NUCM access servers provides access to a group 314 of repositories of artifacts.
Reference: [19] <author> H. Rao and L.L. Peterson. </author> <title> Accessing Files in an Internet: The Jade File ystem. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 19(6) </volume> <pages> 613-624, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The next question is, what is an appropriate way to realize the model and interface? There are some obvious candidates, including a distributed file system (e.g., Jade <ref> [19] </ref> or Prospero [16]), a distributed database [20], or an advanced operating system environment (e.g., PCTE [23]). One could even consider building something from scratch. Our approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [7], using the Orbeline CORBA engine [18].
Reference: [20] <author> J.B. Rothnie, P.A. Bernstein, S. Fox, N. Goodman, M. Hammer, T.A Landers, C. Reeve, D.W. Shipman, and E. Wong. </author> <title> Introduction to a System for Distributed Databases (SDD-1). </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 5(1) </volume> <pages> 1-17, </pages> <month> March </month> <year> 1980. </year>
Reference-contexts: The next question is, what is an appropriate way to realize the model and interface? There are some obvious candidates, including a distributed file system (e.g., Jade [19] or Prospero [16]), a distributed database <ref> [20] </ref>, or an advanced operating system environment (e.g., PCTE [23]). One could even consider building something from scratch. Our approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [7], using the Orbeline CORBA engine [18].
Reference: [21] <institution> Softool Corp., Goleta, California. </institution> <month> CCC/Manager, </month> <title> Managing the Software Life Cycle across the Complete Enterprise, </title> <year> 1994. </year>
Reference-contexts: In fact, many of the most widely known commercial and research systems, such as ADC [22], CCC/Harvest <ref> [21] </ref>, NSE [10], EPOS [15], and ShapeTools [14] do not yet provide any real support for distribution. Those that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture.
Reference: [22] <institution> Software Maintenance & Development Systems, Inc, Concord, Massachusetts. Aide de Camp Product Overview, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: In fact, many of the most widely known commercial and research systems, such as ADC <ref> [22] </ref>, CCC/Harvest [21], NSE [10], EPOS [15], and ShapeTools [14] do not yet provide any real support for distribution. Those that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture. <p> No special handling is needed to adapt the nci and nco programs to a distributed setting, since NUCM already provides distribution transparently to client systems. 6.2 Change Sets As a change-set CM policy, we have implemented something similar to Aide de Camp <ref> [22] </ref>, where first a base version of a configuration is put in NUCM, followed by sets of changes to the whole configuration as the system evolves.
Reference: [23] <author> I. Thomas. </author> <title> PCTE Interfaces: Supporting Tools in Software-Engineering Environments. </title> <journal> IEEE Software, </journal> <pages> pages 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The next question is, what is an appropriate way to realize the model and interface? There are some obvious candidates, including a distributed file system (e.g., Jade [19] or Prospero [16]), a distributed database [20], or an advanced operating system environment (e.g., PCTE <ref> [23] </ref>). One could even consider building something from scratch. Our approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [7], using the Orbeline CORBA engine [18]. The resulting architecture of our implementation of NUCM is shown in Figure 3.
Reference: [24] <author> W.F. Tichy. RCS, </author> <title> A System for Version Control. </title> <journal> Software|Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Below we describe the distribution aspects of several prominent and representative CM systems, illustrating these problems in more detail. Distributed RCS Distributed RCS (DRCS) [17] is an extension of the popular RCS system <ref> [24] </ref>. All artifacts, including the individual versions of a file, the version tree, and the descriptive file attributes, are stored in a central repository. Distribution is achieved by establishing a client/server relationship among remote RCS clients and the central repository. <p> the collection will be present in the repository, with the newer version containing the new version of a.c and the older version containing the old version of a.c, as shown in Figure 2e. 4.3 Locking Functions As stated above, in order to allow both a lock-based CM policy like RCS <ref> [24] </ref> and a merge-based CM pol 3 This current mechanism for accessing an older (or newer) version forces the access to be cast in terms of a change to an artifact. <p> Therefore, although the two policies have not been integrated, these examples demonstrate the flexibility and appropriateness of the abstraction provided by the interface. 6.1 Check-in/Check-out The check-in/check-out policy is a simple scheme in which versions are managed by locking files during changes. RCS <ref> [24] </ref> is an example of a CM system that uses check-in/check-out to maintain versions of files. For each file, RCS builds a version tree, which is used to capture revisions (temporal successors) and variants (alternative branches).
Reference: [25] <author> A. van der Hoek, D. Heimbigner, and A.L. Wolf. </author> <title> Does Configuration Management Research have a Future? In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <pages> pages 305-309. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 317 </month>
Reference-contexts: New research directions are now beginning to emerge in the area <ref> [25] </ref>, and the issues of supporting multiple engineers at multiple sites appears to be at the forefront. We are using NUCM to begin an exploration of distributed configuration management.
References-found: 25

