URL: ftp://ftp.cs.colorado.edu/pub/distribs/Nutt/flexibleWF.ps
Refering-URL: http://www.cs.colorado.edu/~nutt/Home.html
Root-URL: http://www.cs.colorado.edu
Title: The evolution toward flexible workflow systems  
Author: Gary J. Nutt 
Address: Boulder, CO 80309-0430 USA  
Affiliation: Department of Computer Science, CB 430 University of Colorado  
Abstract: The simultaneous evolution of personal computing tools and networks has focused attention on the notion of harnessing computer technology to assist in human collaboration on group work. While personal productivity tool technology and use have reached a high level of sophistication, the most basic ideas for how computer technology should assist in collaboration across the network have not yet converged. The approaches range from ones where coordination of work is uniquely human-controlled, to workflow-based approaches where the computer is involved in scheduling the group's work. This survey paper describes how workflow technology has evolved from a modeling focus to flexible model-based systems to support collaborative work across this range of work styles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Ellis, S. J. Gibbs, and G. L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <volume> 34(1) </volume> <pages> 38-58, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Today, workflow researchers have come to realize that the technology must address issues that span anthropology, ethnography, organizational psychology, sociology of office work, as well as computer science technology <ref> [1] </ref>. This paper is a survey of workflow technology (not a survey of commercial workflow systems such as can be found in [5, 9, 20, 21]). It describes an evolution in which technology has relaxed its strict coordination approach. <p> By formalizing the coordination and step definition, there are fewer opportunities for human workers to compensate for inadequacies in the process. State-of-the-art workflow enactment systems [5, 21] do not address the issues described here <ref> [1, 2, 12, 19, 62] </ref>. One solution to this problem is to remove the coordination component from the system; this amounts to taking the situated work approach. However, all organizations impose at least some minimal set of procedural guidelines on how its workers perform their work.
Reference: [2] <author> Jonathan Grudin. </author> <title> Groupware and social dynamics: Eight challenges for developers. </title> <journal> Communications of the ACM, </journal> <volume> 37(1) </volume> <pages> 93-105, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The impact of the technology on the behavior of the workers can be so severe as to cause workflow systems to completely fail (e.g., see <ref> [2] </ref>). Situated work advocates argue that the coordination component of workflow | the aspect that distinguishes it from systems supporting situated work | is incompatible with social models used in the workplace. Manifestations of the Issues. <p> By formalizing the coordination and step definition, there are fewer opportunities for human workers to compensate for inadequacies in the process. State-of-the-art workflow enactment systems [5, 21] do not address the issues described here <ref> [1, 2, 12, 19, 62] </ref>. One solution to this problem is to remove the coordination component from the system; this amounts to taking the situated work approach. However, all organizations impose at least some minimal set of procedural guidelines on how its workers perform their work. <p> The rationale for extending the model over the conventional workflow approach is to be able to address different points in the space of solutions shown in Figure 7. The empirical evidence reported in [60] and in <ref> [2] </ref> as well as in countless CSCW papers argues that CSCW systems should support various points in the space. We find most of these arguments to be creditable, though each is driven by a particular scenario or set of circumstances.
Reference: [3] <institution> Special Issue of IEEE Computer on Computer-Supported Cooperative Work, </institution> <note> May 1994. </note> <author> James D. Palmer and N. </author> <title> Ann Fields, Guest Editor. </title>
Reference: [4] <author> Clarence A. Ellis and Gary J. Nutt. </author> <title> Modeling and enactment of workflow systems. </title> <booktitle> In Advances in Petri Nets 93, </booktitle> <pages> pages 1-16, </pages> <month> June </month> <year> 1993. </year> <type> Invited paper. </type>
Reference-contexts: Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1. <p> FlowPATH provides another form of flexibility for dealing with coordination. The sendTo operation allows the system's users to violate the coordination model at times when that was allowed (regions in which the conformance parameter is low), and in which it makes sense <ref> [4] </ref> (InConcert provides a similar ability [29]). These ideas can be extended with models such as goal-based ICNs, contextual assistance, and suitable virtual environment. People vary in how they would like a CSCW system to behave in terms of this characteristic.
Reference: [5] <author> Dimitrios Georgakopoulos, Mark Hornick, and Amith Sheth. </author> <title> An overview of workflow management: From process modeling to workflow automation infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 117-153, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: This paper is a survey of workflow technology (not a survey of commercial workflow systems such as can be found in <ref> [5, 9, 20, 21] </ref>). It describes an evolution in which technology has relaxed its strict coordination approach. In the last part of the paper, we show how this evolution will continue so that the next generation of workflow systems can be designed to fit naturally into modern organizations of people. <p> Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1. <p> Coordination Languages The coordination language specifies how a workcase passes from step-to-step <ref> [5, 8] </ref>; this is an identifying characteristic of workflow languages. Coordination languages can use a spectrum of techniques to accomplish their task, ranging from rule-based approaches (e.g., see [32, 33]) to explicit precedence (see below). In his thesis, Zisman combined the two to define the coordination scheme [17]. <p> Workflow Enactment Workflow enactment refers to the situation where a procedure is encoded into a set of directives that will be executed by some combination of humans and computers in a workflow management systems <ref> [5] </ref>. <p> The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations). Also see <ref> [5, 9, 20, 21] </ref> for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product [49]. FlowPATH uses a logically centralized server with a relational database to store the model and the data for the procedures. <p> Social organizations recognize where there are flaws in a procedure and the team members compensate for failures in the procedure through informal activity. By formalizing the coordination and step definition, there are fewer opportunities for human workers to compensate for inadequacies in the process. State-of-the-art workflow enactment systems <ref> [5, 21] </ref> do not address the issues described here [1, 2, 12, 19, 62]. One solution to this problem is to remove the coordination component from the system; this amounts to taking the situated work approach.
Reference: [6] <author> Jintae Lee, Gregg Yost, </author> <title> and the PIF Working Group. The PIF process interchange format and framework. </title> <type> Technical report, </type> <institution> University of Hawaii Information and Computer Science Department, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1. <p> The tool enables end users to construct a speech-act model of the work that can be used to describe the work to all interested parties, and to perform basic analyses. The Process Handbook and PIF. The PIF effort <ref> [6] </ref> provides a metalanguage in which one can represent different coordination and computation models. Malone, et al., use PIF as the basis for the Process Handbook to describe different procedures that might be reused in different environments [7]. 12 2.4. <p> Actors may be people or computers; their roles identify a set of activities that the actor is capable of performing (i.e, an actor represents one "processing entity," so it can only do one thing at a time) <ref> [6, 8, 11] </ref>. In modern workflow enactment languages, tokens represent only transactions (workcases) while resources, including processing agents, are represented using role and actor constructs. <p> Some Example Enactment Systems There are many examples of workflow enactment systems, including Prominand [57], Domino [58], the C&Co enhancement to C [26], Visual WorkFlo [44]. The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF <ref> [6] </ref> and Process Handbook [59] are also concerned with uniform representations). Also see [5, 9, 20, 21] for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product [49].
Reference: [7] <author> Thomas W. Malone, Kevin Crowston, Jintae Lee, and Brian Pentland. </author> <title> Tools for inventing organizations: Toward a handbook of organizational processes. </title> <booktitle> In Workflow 95 Conference Proceedings, </booktitle> <pages> pages 57-78, </pages> <year> 1995. </year> <booktitle> Also appears in Proceedings of 2nd IEEE Workshop on Enabling Technologies Infrastructure for Collaborative Enterprises, </booktitle> <month> April, </month> <year> 1993, </year> <title> and as MIT Sloan School technical report CCS WP No. </title> <type> 141, </type> <institution> Sloan School WP No. </institution> <month> 3562-93. </month>
Reference-contexts: Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1. <p> The Process Handbook and PIF. The PIF effort [6] provides a metalanguage in which one can represent different coordination and computation models. Malone, et al., use PIF as the basis for the Process Handbook to describe different procedures that might be reused in different environments <ref> [7] </ref>. 12 2.4. A Model of the Purchasing Procedure models in the commercial systems mentioned above are semantically similar to the model described here. In ICNs, circles represent steps in the procedure, and solid edges represent precedence among the tasks.
Reference: [8] <author> Ronni T. Marshak. </author> <title> Characteristics of a workflow system. </title> <journal> Workgroup Computing Report, </journal> <volume> 16(5) </volume> <pages> 2-3, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1. <p> Coordination Languages The coordination language specifies how a workcase passes from step-to-step <ref> [5, 8] </ref>; this is an identifying characteristic of workflow languages. Coordination languages can use a spectrum of techniques to accomplish their task, ranging from rule-based approaches (e.g., see [32, 33]) to explicit precedence (see below). In his thesis, Zisman combined the two to define the coordination scheme [17]. <p> Actors may be people or computers; their roles identify a set of activities that the actor is capable of performing (i.e, an actor represents one "processing entity," so it can only do one thing at a time) <ref> [6, 8, 11] </ref>. In modern workflow enactment languages, tokens represent only transactions (workcases) while resources, including processing agents, are represented using role and actor constructs. <p> The domain for which descriptive and analytic workflow models (e.g, [45, 65]) was intended is the plane defined by 0x1, 0y1, and z=1. Conventional workflow enactment systems <ref> [8, 49, 21, 56, 44] </ref> could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1.
Reference: [9] <author> B. Silver. </author> <title> Bis guide to workflow software. </title> <type> Technical report, BIS Strategic Decisions, </type> <month> September </month> <year> 1995. </year>
Reference-contexts: This paper is a survey of workflow technology (not a survey of commercial workflow systems such as can be found in <ref> [5, 9, 20, 21] </ref>). It describes an evolution in which technology has relaxed its strict coordination approach. In the last part of the paper, we show how this evolution will continue so that the next generation of workflow systems can be designed to fit naturally into modern organizations of people. <p> The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations). Also see <ref> [5, 9, 20, 21] </ref> for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product [49]. FlowPATH uses a logically centralized server with a relational database to store the model and the data for the procedures.
Reference: [10] <author> Keith D. Swenson and Kent Irwin. </author> <title> Workflow technology: Tradeoffs for business process re-engineering. </title> <booktitle> In Conference on Organizational Computing Systems, </booktitle> <pages> pages 22-29, </pages> <year> 1995. </year>
Reference-contexts: Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1.
Reference: [11] <author> WFMC Members. </author> <title> A workflow management coalition specification: Glossary and document of understanding. Technical Report Document Number TC00-0011, Workflow Management Coalition, </title> <address> Brussells, Belgium, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1. <p> Actors may be people or computers; their roles identify a set of activities that the actor is capable of performing (i.e, an actor represents one "processing entity," so it can only do one thing at a time) <ref> [6, 8, 11] </ref>. In modern workflow enactment languages, tokens represent only transactions (workcases) while resources, including processing agents, are represented using role and actor constructs. <p> Some Example Enactment Systems There are many examples of workflow enactment systems, including Prominand [57], Domino [58], the C&Co enhancement to C [26], Visual WorkFlo [44]. The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings <ref> [11] </ref> (the PIF [6] and Process Handbook [59] are also concerned with uniform representations). Also see [5, 9, 20, 21] for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product [49].
Reference: [12] <author> Lucy A. Suchman. </author> <title> Office procedure as practical action: Models of work and system design. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 1(4) </volume> <pages> 320-328, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: By formalizing the coordination and step definition, there are fewer opportunities for human workers to compensate for inadequacies in the process. State-of-the-art workflow enactment systems [5, 21] do not address the issues described here <ref> [1, 2, 12, 19, 62] </ref>. One solution to this problem is to remove the coordination component from the system; this amounts to taking the situated work approach. However, all organizations impose at least some minimal set of procedural guidelines on how its workers perform their work. <p> Leverage is gained from computers through computation support and incremental "micro level automation" by which various tasks in the environment are accomplished using software 33 tools <ref> [12] </ref>. This fits well with the trend in personal productivity tool development. In general, the z-axis of Figure 8 represents the nature of automation of the coordination model in a CSCW system. Situated work tends to minimize the importance of automatic coordination, so we place it near the origin.
Reference: [13] <institution> Special Issue of Communications of the ACM, </institution> <month> September </month> <year> 1995. </year> <title> Lucy Suchman, Guest Editor. </title>
Reference: [14] <author> Mike Robinson and Liam Bannon. </author> <title> Questioning representations. </title> <booktitle> In Proceedings of the Second European Conference on Computer-Supported Cooperative Work | ECSCW 91, </booktitle> <pages> pages 219-233. </pages> <publisher> Kluwer Academic Publications, </publisher> <year> 1991. </year>
Reference: [15] <author> Thomas W. Malone and Kevin Crowston. </author> <title> The interdisciplinary study of coordination. </title> <journal> ACM Computing Surveys, </journal> <volume> 26(1) </volume> <pages> 87-119, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Manual coordination refers to systems providing tools to enable the group to coordinate their activities, including shared memory, shared resources, and synchronization mechanism such as locks. In contrast to the situated work proponents, Malone and Crowston argue that computers should explicitly be used to coordinate tasks <ref> [15] </ref>. Workflow models are one approach for doing this, though there are other models for accomplishing this task.
Reference: [16] <author> M. Hammer, W. G. Howe, V. J. Kruskal, and I. Wladawsky. </author> <title> A very high level programming language for data processing applications. </title> <journal> Communications of the ACM, </journal> 20(11) 832-840, November 1977. <volume> 36 </volume>
Reference: [17] <author> Michael D. Zisman. </author> <title> Representation, Specification, and Automation of Office Procedures. </title> <type> PhD thesis, </type> <institution> Wharton School, University of Pennsylvania, </institution> <year> 1977. </year>
Reference-contexts: Coordination languages can use a spectrum of techniques to accomplish their task, ranging from rule-based approaches (e.g., see [32, 33]) to explicit precedence (see below). In his thesis, Zisman combined the two to define the coordination scheme <ref> [17] </ref>. Since precedence-based coordination languages dominate in contemporary workflow systems, we base our discussion on this approach. For workflow, each step | such as "select a vendor" | is represented by a node in a graph; execution precedence is established defining edges between the nodes. <p> It should be noted that in pure Petri nets, the choice of paths through which tokens flow in an "execution" of the net is nondeterministic. In variants such as WooRKS [40], control flow path selection is made deterministic through the addition of supplementary information. Zisman's Petri net model <ref> [17] </ref> uses rules to augment the normal Petri net coordination specification, though not explicitly to achieve deterministic control flow as is the case with E-nets [41] and other timed/colored Petri nets [42]. 2.2.
Reference: [18] <author> Clarence A. Ellis and Gary J. </author> <title> Nutt. </title> <journal> Office information systems and computer science. ACM Computing Surveys, </journal> <volume> 12(1) </volume> <pages> 27-60, </pages> <month> March </month> <year> 1980. </year>
Reference-contexts: No system was ever built to support E-nets. ICNs. The information-control net (ICN) language was explicitly designed as a workflow language to represent and analyze office procedures <ref> [45, 18] </ref>. The ICN had a control flow graph (isomorphic to the E-net coordination language), coupled with an information flow graph.
Reference: [19] <author> Jonathan Grudin. </author> <title> Why CSCW applications fail. </title> <booktitle> In Proceedings of the CSCW88 Conference, </booktitle> <year> 1988. </year>
Reference-contexts: The technological hopes, schemes, and promises for "office automation" met the realities of the requirements of industrial-strength products by the mid 1980s. Workflow did not meet the expectations of business users, and began to be roundly criticized as a solution for supporting collaborative work, e.g., see <ref> [19] </ref>. Today, workflow researchers have come to realize that the technology must address issues that span anthropology, ethnography, organizational psychology, sociology of office work, as well as computer science technology [1]. <p> By formalizing the coordination and step definition, there are fewer opportunities for human workers to compensate for inadequacies in the process. State-of-the-art workflow enactment systems [5, 21] do not address the issues described here <ref> [1, 2, 12, 19, 62] </ref>. One solution to this problem is to remove the coordination component from the system; this amounts to taking the situated work approach. However, all organizations impose at least some minimal set of procedural guidelines on how its workers perform their work.
Reference: [20] <author> Esther Dyson. </author> <title> Workflow. </title> <type> Technical report, </type> <institution> EDventure Holdings, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: This paper is a survey of workflow technology (not a survey of commercial workflow systems such as can be found in <ref> [5, 9, 20, 21] </ref>). It describes an evolution in which technology has relaxed its strict coordination approach. In the last part of the paper, we show how this evolution will continue so that the next generation of workflow systems can be designed to fit naturally into modern organizations of people. <p> The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations). Also see <ref> [5, 9, 20, 21] </ref> for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product [49]. FlowPATH uses a logically centralized server with a relational database to store the model and the data for the procedures.
Reference: [21] <author> C. Mohan. </author> <title> Tutorial: State of the art in workflow management system research and products. </title> <booktitle> a tutorial at the ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: This paper is a survey of workflow technology (not a survey of commercial workflow systems such as can be found in <ref> [5, 9, 20, 21] </ref>). It describes an evolution in which technology has relaxed its strict coordination approach. In the last part of the paper, we show how this evolution will continue so that the next generation of workflow systems can be designed to fit naturally into modern organizations of people. <p> IBM FlowMark, FileNet Visual WorkFlo, and Action Technologies Action Workflow are full workflow enactment products that have a modeling language and system component. IBM FlowMark. Models in FlowMark are a combined data and control flow graph <ref> [21, 28] </ref>. The control flow graph specifies activities, processes, connectors, transition conditions; the data flow graph represents input and output containers with data mappings to activities. There is a formal underlying language, the FlowMark Description Language, for each visual model constructed in the system. <p> Therefore, modern workflow systems use the analogue of a Petri net token to represent a workcase, then represent actors using other model atoms, e.g., see <ref> [21, 28, 55, 56] </ref>. Actors may be people or computers; their roles identify a set of activities that the actor is capable of performing (i.e, an actor represents one "processing entity," so it can only do one thing at a time) [6, 8, 11]. <p> The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations). Also see <ref> [5, 9, 20, 21] </ref> for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product [49]. FlowPATH uses a logically centralized server with a relational database to store the model and the data for the procedures. <p> The workflow approach was the crucial vision for the system design, but the majority of the engineering effort was invested in technologies needed to support any interactive, distributed software. FlowMark. We previously introduced IBM FlowMark in Section 2 <ref> [28, 21] </ref>. As an enactment system, FlowMark is a distributed system with a server to store the model and common data, and clients to manage the "buildtime" (modeling) tools, the "runtime" tools, and the "administration" tools. <p> Social organizations recognize where there are flaws in a procedure and the team members compensate for failures in the procedure through informal activity. By formalizing the coordination and step definition, there are fewer opportunities for human workers to compensate for inadequacies in the process. State-of-the-art workflow enactment systems <ref> [5, 21] </ref> do not address the issues described here [1, 2, 12, 19, 62]. One solution to this problem is to remove the coordination component from the system; this amounts to taking the situated work approach. <p> The domain for which descriptive and analytic workflow models (e.g, [45, 65]) was intended is the plane defined by 0x1, 0y1, and z=1. Conventional workflow enactment systems <ref> [8, 49, 21, 56, 44] </ref> could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1.
Reference: [22] <author> Gary J. Nutt. </author> <title> Using workflow in contemporary IS applications. </title> <type> Technical Report CU-CS-663-93, </type> <institution> Department of Computer Science University of Colorado, Boulder, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: We use an example that has small cases to represent a spectrum of procedure types. There is an expanded discussion of the example in <ref> [22] </ref>. In most corporations, government agencies, and universities, there is a standard procedure by which an employee can purchase goods from an external vendor. The 4 employee fills-out a purchase requisition (also informally called a "PR"), then has it approved by his or her supervisor. <p> If the node has AND logic, copies of the token are placed on all output branches. The runtime environment provides a variety of facilities to support step interpretations, including graph manipulation and interpretation, workflow entity management, workcase manipulation, and scheduling (see <ref> [22] </ref> for more details for ICN-Olympus, or vendor materials for other systems). 3.5. Issues in Workflow Enactment The Nature of the Specification.
Reference: [23] <author> Shi-Kuo Chang, Tadao Ichikawa, and Panos A. Ligomenides. </author> <title> Visual Languages. </title> <publisher> Plenum Press, </publisher> <year> 1986. </year>
Reference-contexts: If it easily represents essential aspects of the way a procedure is to be defined, it is potentially a useful model design language. 2.1. Workflow Modeling Language There is an extensive history in discrete system modeling language development, ranging from computer simulation languages to iconic visual languages <ref> [23, 24, 25] </ref>. Many of these languages, including workflow modeling languages, adopt a data/control flow perspective. A workflow model represents how a unit of work (also called a workcase or job) flows from one processing step (also called an activity or task) to another.
Reference: [24] <institution> Special Issue of IEEE Computer on Visualization in Computing, </institution> <month> October </month> <year> 1989. </year> <editor> Allen L. Ambler and Margaret M. </editor> <title> Burnett, Guest Editors. </title>
Reference-contexts: If it easily represents essential aspects of the way a procedure is to be defined, it is potentially a useful model design language. 2.1. Workflow Modeling Language There is an extensive history in discrete system modeling language development, ranging from computer simulation languages to iconic visual languages <ref> [23, 24, 25] </ref>. Many of these languages, including workflow modeling languages, adopt a data/control flow perspective. A workflow model represents how a unit of work (also called a workcase or job) flows from one processing step (also called an activity or task) to another.
Reference: [25] <editor> Steven Tanimoto, editor. </editor> <booktitle> Proceedings of the 1992 IEEE Workshop on Visual Languages. IEEE, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: If it easily represents essential aspects of the way a procedure is to be defined, it is potentially a useful model design language. 2.1. Workflow Modeling Language There is an extensive history in discrete system modeling language development, ranging from computer simulation languages to iconic visual languages <ref> [23, 24, 25] </ref>. Many of these languages, including workflow modeling languages, adopt a data/control flow perspective. A workflow model represents how a unit of work (also called a workcase or job) flows from one processing step (also called an activity or task) to another.
Reference: [26] <author> Alexander Forst, Eva K-uhn, and Omran Bukhres. </author> <title> General purpose work flow languages. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 187-218, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Thus, a workflow language contains constructs to define a set of steps to represent units of work, a sequential computation language to provide an interpretation for each step, and a coordination language to define how the work flows among the steps <ref> [4, 5, 6, 7, 8, 10, 11, 26] </ref>. In workflow modeling languages, the modeling domain determines the nature of the computation language, though the same coordination language can be used across different modeling domains. 2.1.1. <p> Step Computation Step computations are general-purpose computations, implemented either as unattended or interactive processes.y As a result, the computation language needs to incorporate facilities for general-purpose computation (e.g., arithmetic and control flow) <ref> [26] </ref>. All workflow processes execute on network elements, so the step computation specification needs to use network protocols to access information within the workflow environment. Interactive processes must incorporate software to implement a human-computer interface, allowing a user to control step execution. <p> When the step has completed its computation on the workcase, the result is reported back to the coordination model interpreter for subsequent scheduling. 3.3. Some Example Enactment Systems There are many examples of workflow enactment systems, including Prominand [57], Domino [58], the C&Co enhancement to C <ref> [26] </ref>, Visual WorkFlo [44]. The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations). Also see [5, 9, 20, 21] for surveys of commercial products. FlowPATH.
Reference: [27] <author> P. David Stotts and Richard Furata. ffTrellis: </author> <title> A system for writing and browsing petri-net-based hypertext. </title> <editor> In G. Rozenburg, editor, </editor> <booktitle> Advances in Petri Nets '90, </booktitle> <pages> pages 471-490. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: This type of computation language concentrates on features that can be used to provide clear and intuitive explanations, 6 e.g., the language may be a set of hypertext explanations for each step <ref> [27] </ref>. In the purchase order processing example, a step such as "select a vendor" could be defined by an explanation of the factors the agent uses in choosing the vendor for a particular part.
Reference: [28] <author> F. Leymann and W. Altenhuber. </author> <title> Managing business processes as an information resource. </title> <journal> IBM Systems Journal, </journal> <volume> 33(2), </volume> <year> 1994. </year>
Reference-contexts: An analysis computation language must allow the user to quantify various aspects of a step's execution, e.g., it may provide tools to specify arrival and service time distributions, a way to stochastically choose from among a set of alternative control flow paths, and a way to instrument executable (simulation) models <ref> [28, 29, 30] </ref>. In the purchase order processing example, a step such as "select a vendor" might have a service time distribution to represent the amount of time it takes to select a vendor. <p> A modeling system provides facilities for creating and browsing a representation model, for applying various algorithms to an analysis model, and for collaborative interaction and information archiving for design models (see Figure 2) <ref> [28, 29, 38, 43, 44] </ref>. The modeling system is first an editing environment in which a workflow specification can be prepared. Visual workflow models are most often supported by providing a point-and-select graph editor. <p> IBM FlowMark, FileNet Visual WorkFlo, and Action Technologies Action Workflow are full workflow enactment products that have a modeling language and system component. IBM FlowMark. Models in FlowMark are a combined data and control flow graph <ref> [21, 28] </ref>. The control flow graph specifies activities, processes, connectors, transition conditions; the data flow graph represents input and output containers with data mappings to activities. There is a formal underlying language, the FlowMark Description Language, for each visual model constructed in the system. <p> Therefore, modern workflow systems use the analogue of a Petri net token to represent a workcase, then represent actors using other model atoms, e.g., see <ref> [21, 28, 55, 56] </ref>. Actors may be people or computers; their roles identify a set of activities that the actor is capable of performing (i.e, an actor represents one "processing entity," so it can only do one thing at a time) [6, 8, 11]. <p> The workflow approach was the crucial vision for the system design, but the majority of the engineering effort was invested in technologies needed to support any interactive, distributed software. FlowMark. We previously introduced IBM FlowMark in Section 2 <ref> [28, 21] </ref>. As an enactment system, FlowMark is a distributed system with a server to store the model and common data, and clients to manage the "buildtime" (modeling) tools, the "runtime" tools, and the "administration" tools.
Reference: [29] <author> Inconcert 3.0: </author> <title> Adaptive workflow software for continuous process improvement, </title> <month> August </month> <year> 1996. </year>
Reference-contexts: An analysis computation language must allow the user to quantify various aspects of a step's execution, e.g., it may provide tools to specify arrival and service time distributions, a way to stochastically choose from among a set of alternative control flow paths, and a way to instrument executable (simulation) models <ref> [28, 29, 30] </ref>. In the purchase order processing example, a step such as "select a vendor" might have a service time distribution to represent the amount of time it takes to select a vendor. <p> A modeling system provides facilities for creating and browsing a representation model, for applying various algorithms to an analysis model, and for collaborative interaction and information archiving for design models (see Figure 2) <ref> [28, 29, 38, 43, 44] </ref>. The modeling system is first an editing environment in which a workflow specification can be prepared. Visual workflow models are most often supported by providing a point-and-select graph editor. <p> Like FlowPATH, there is a significant set of underlying software available to step execution software via a packaged application programming interface. Actors and roles are also used as part of the runtime system's scheduling information. InConcert. The Xerox XSoft InConcert workflow product provides similar capabilities to FlowPATH <ref> [56, 29] </ref>. It is based on a workflow graphic model to define steps and their coordination model, including the flow of information and the role of people in the procedure, to define an enactment system. <p> FlowPATH provides another form of flexibility for dealing with coordination. The sendTo operation allows the system's users to violate the coordination model at times when that was allowed (regions in which the conformance parameter is low), and in which it makes sense [4] (InConcert provides a similar ability <ref> [29] </ref>). These ideas can be extended with models such as goal-based ICNs, contextual assistance, and suitable virtual environment. People vary in how they would like a CSCW system to behave in terms of this characteristic.
Reference: [30] <author> Shirish S. Hardikar. </author> <title> Analyzing your processes before automating. </title> <booktitle> In Workflow 95 Conference Proceedings, </booktitle> <pages> pages 91-108, </pages> <year> 1995. </year>
Reference-contexts: An analysis computation language must allow the user to quantify various aspects of a step's execution, e.g., it may provide tools to specify arrival and service time distributions, a way to stochastically choose from among a set of alternative control flow paths, and a way to instrument executable (simulation) models <ref> [28, 29, 30] </ref>. In the purchase order processing example, a step such as "select a vendor" might have a service time distribution to represent the amount of time it takes to select a vendor.
Reference: [31] <author> P. Zave and W. Schell. </author> <title> Salient features fof an executable specification language and its environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12:312-325, </volume> <month> February </month> <year> 1986. </year>
Reference-contexts: Design languages are widely-used in software engineering to capture requirements, constraints, relationships, and algorithms for implementing an individual software component. In environments supporting executable specifications, the design language can also be the implementation language <ref> [31] </ref>. In the purchase order processing example, a step such as "select a vendor" might have an architecture for how a database is used to screen vendors, how the agent reviews a vendor's offerings using a web page, etc. 2.1.2.
Reference: [32] <author> W. Bruce Croft and Lawrence S. Lefkowitz. </author> <title> Task support in an office system. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 2(3) </volume> <pages> 197-212, </pages> <year> 1984. </year>
Reference-contexts: Coordination Languages The coordination language specifies how a workcase passes from step-to-step [5, 8]; this is an identifying characteristic of workflow languages. Coordination languages can use a spectrum of techniques to accomplish their task, ranging from rule-based approaches (e.g., see <ref> [32, 33] </ref>) to explicit precedence (see below). In his thesis, Zisman combined the two to define the coordination scheme [17]. Since precedence-based coordination languages dominate in contemporary workflow systems, we base our discussion on this approach. <p> Conventional workflow enactment systems [8, 49, 21, 56, 44] could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1. Goal-based systems (e.g. <ref> [32, 66, 63] </ref>) are in a domain in which z=0, but x and y vary according to the specifics of the model; e.g., an inferencing system assumes that y&lt;1. 4.2.
Reference: [33] <author> Kum-Yew Lai, Thomas W. Malone, and Keh-Chiang Yu. </author> <title> Object lens: A `spreadsheet' for cooperative work. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4) </volume> <pages> 332-353, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Coordination Languages The coordination language specifies how a workcase passes from step-to-step [5, 8]; this is an identifying characteristic of workflow languages. Coordination languages can use a spectrum of techniques to accomplish their task, ranging from rule-based approaches (e.g., see <ref> [32, 33] </ref>) to explicit precedence (see below). In his thesis, Zisman combined the two to define the coordination scheme [17]. Since precedence-based coordination languages dominate in contemporary workflow systems, we base our discussion on this approach.
Reference: [34] <author> M. Broy. </author> <title> Control Flow and Data Flow: Concepts of Distributed Programming. </title> <publisher> Springer Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Traditional precedence graphs are not expressive enough to easily represent all the coordination paradigms that normally arise in office procedures. Therefore, the coordination language is embellished to explicitly represent disjunctive and conjunctive control flow <ref> [34] </ref>. Disjunctive ("exclusive-OR") control flow represents the situation where a workcase 7 may flow from step x to step y or to another step z (but not both). <p> A Petri net [35, 36] is a control flow model that explicitly represents sequence, OR-flow, and AND-flow, thus Petri nets (or their logical equivalent, again see <ref> [34] </ref>) are often the underlying coordination model in a workflow language. In general, a workflow coordination model can be defined as a directed graph, (N, E), with a node set N representing individual steps in the procedure and an edge set E representing the coordination structure among the tasks.
Reference: [35] <author> Tadao Murata. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(4) </volume> <pages> 541-580, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Following the conventional use of the term "concurrency" that is associated with the AND control flow in distributed software, the y and z parts of the procedure might be executed simultaneously or in either order. A Petri net <ref> [35, 36] </ref> is a control flow model that explicitly represents sequence, OR-flow, and AND-flow, thus Petri nets (or their logical equivalent, again see [34]) are often the underlying coordination model in a workflow language.
Reference: [36] <author> James L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1981. </year>
Reference-contexts: Following the conventional use of the term "concurrency" that is associated with the AND control flow in distributed software, the y and z parts of the procedure might be executed simultaneously or in either order. A Petri net <ref> [35, 36] </ref> is a control flow model that explicitly represents sequence, OR-flow, and AND-flow, thus Petri nets (or their logical equivalent, again see [34]) are often the underlying coordination model in a workflow language. <p> sufficient, they can sometimes be difficult to use to represent a specific situation, e.g., where one would like to fire a transition if a condition is false rather than true. (In the Petri net research community, this problem was addressed by adding inhibitor arcs in some variants of the language <ref> [36] </ref>.) Some users continue to feel unduly constrained by the language syntax, though their concerns can sometimes be addressed by revising the syntax of the underlying model [37]. Handling Detail. Workflow modeling languages are frequently visual to enhance their utility, causing scaling to be a major concern.
Reference: [37] <author> Jeffrey D. McWhirter and Gary J. Nutt. Escalante: </author> <title> An environment for the rapid construction of visual language applications. </title> <booktitle> In Proceedings of the 1994 Symposium on Visual Languages, </booktitle> <pages> pages 15-22, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Graph models provide a formal basis for defining control flow; they also provide a set of natural graphic representations. It can be shown that for graphs such as Petri nets, there are many different graphic visualizations <ref> [37] </ref>. <p> rather than true. (In the Petri net research community, this problem was addressed by adding inhibitor arcs in some variants of the language [36].) Some users continue to feel unduly constrained by the language syntax, though their concerns can sometimes be addressed by revising the syntax of the underlying model <ref> [37] </ref>. Handling Detail. Workflow modeling languages are frequently visual to enhance their utility, causing scaling to be a major concern. Scaling can be addressed by using hierarchical descriptions.
Reference: [38] <author> Gary J. Nutt. </author> <title> An experimental distributed modeling system. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 1(2) </volume> <pages> 117-142, </pages> <month> April </month> <year> 1983. </year>
Reference-contexts: By looking at a sequence of snapshots, e.g., creating a new snapshot each time a token moves from 9 one node to another, it is easy to animate a display of the static graph to illustrate the dynamic behavior of workflow in the procedure <ref> [38, 39] </ref>. It should be noted that in pure Petri nets, the choice of paths through which tokens flow in an "execution" of the net is nondeterministic. In variants such as WooRKS [40], control flow path selection is made deterministic through the addition of supplementary information. <p> A modeling system provides facilities for creating and browsing a representation model, for applying various algorithms to an analysis model, and for collaborative interaction and information archiving for design models (see Figure 2) <ref> [28, 29, 38, 43, 44] </ref>. The modeling system is first an editing environment in which a workflow specification can be prepared. Visual workflow models are most often supported by providing a point-and-select graph editor. <p> The Quinault modeling system was designed to support the representation and 11 analysis of ICNs [39]. Quinault was a point-and-select, visual systems enabling its user to create, edit, and animate ICNs. The follow-on system extended Quinault's functionality across a network of workstations, establishing the basis for collaborative model design <ref> [38] </ref>. Olympus is a more recent distributed analysis and design system supporting ICNs [47, 48]. ICNs were ultimately used as the base language for the Group Bull FlowPATH workflow enactment product [49], described further in Section 3.
Reference: [39] <author> Gary J. Nutt and Paul A. Ricci. Quinault: </author> <title> An office environment simulator. </title> <journal> IEEE Computer, </journal> <volume> 37 14(5) </volume> <pages> 41-57, </pages> <month> MAY </month> <year> 1981. </year>
Reference-contexts: By looking at a sequence of snapshots, e.g., creating a new snapshot each time a token moves from 9 one node to another, it is easy to animate a display of the static graph to illustrate the dynamic behavior of workflow in the procedure <ref> [38, 39] </ref>. It should be noted that in pure Petri nets, the choice of paths through which tokens flow in an "execution" of the net is nondeterministic. In variants such as WooRKS [40], control flow path selection is made deterministic through the addition of supplementary information. <p> The Quinault modeling system was designed to support the representation and 11 analysis of ICNs <ref> [39] </ref>. Quinault was a point-and-select, visual systems enabling its user to create, edit, and animate ICNs. The follow-on system extended Quinault's functionality across a network of workstations, establishing the basis for collaborative model design [38]. Olympus is a more recent distributed analysis and design system supporting ICNs [47, 48].
Reference: [40] <author> Jacques Bicard-Mandel, Martin Ader, and Josep Monguio. COP: </author> <title> A Petri net based coordination mechanism for scheduling production workflows. In Computer-Supported Cooperative Work, </title> <booktitle> Petri Nets and Related Formalisms (a workshop at Petri Nets 93), </booktitle> <pages> pages 42-55, </pages> <year> 1993. </year>
Reference-contexts: It should be noted that in pure Petri nets, the choice of paths through which tokens flow in an "execution" of the net is nondeterministic. In variants such as WooRKS <ref> [40] </ref>, control flow path selection is made deterministic through the addition of supplementary information.
Reference: [41] <author> Gary J. Nutt. </author> <title> The Formulation and Application of Evaluation Nets. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1972. </year>
Reference-contexts: In variants such as WooRKS [40], control flow path selection is made deterministic through the addition of supplementary information. Zisman's Petri net model [17] uses rules to augment the normal Petri net coordination specification, though not explicitly to achieve deterministic control flow as is the case with E-nets <ref> [41] </ref> and other timed/colored Petri nets [42]. 2.2. Workflow Modeling System The use of workflow languages for representation, analysis, and design has led naturally to the need for computer support. <p> Some Example Modeling Languages and Systems People have built many different modeling languages and systems using Petri net coordination language with various computation languages. E-Nets. Our own earliest example of a language combining a computation and a coordination model was the E-net modeling language <ref> [41] </ref>. It used timed Petri nets with a special-purpose, interpreted computation language explicitly intended to represent systems. An E-net could be analyzed for various performance characteristics. The application domain for E-nets was computer simulation rather than office procedures, but the underlying technology was the same as for workflow languages.
Reference: [42] <author> Kurt Jensen. </author> <title> Coloured Petri Nets: Basic Concepts, Analysis Methods, and Practical Use, Volume 1. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Zisman's Petri net model [17] uses rules to augment the normal Petri net coordination specification, though not explicitly to achieve deterministic control flow as is the case with E-nets [41] and other timed/colored Petri nets <ref> [42] </ref>. 2.2. Workflow Modeling System The use of workflow languages for representation, analysis, and design has led naturally to the need for computer support. <p> Note that the details of the strategy depend on the semantics of the coordination model; e.g., colored Petri net semantics ensure that as different workcases flow through a set of steps, they do not interact with one another, (synchronization operations only apply to conjunctive control flow within a single workcase) <ref> [42] </ref>. 3.2. Workflow System Organization interpreter is the centralized component of the system that decides how work will be scheduled for the rest of the system on the basis of the coordination model specification, the actor resources available, and the work load (workcases).
Reference: [43] <author> Raul Medina-Mora, Terry Winograd, Rodrigo Flores, and Fernando Flores. </author> <title> The action workflow approach to workflow management technology. </title> <booktitle> In Proceedings of the Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 281-297. </pages> <publisher> ACM, </publisher> <year> 1992. </year>
Reference-contexts: A modeling system provides facilities for creating and browsing a representation model, for applying various algorithms to an analysis model, and for collaborative interaction and information archiving for design models (see Figure 2) <ref> [28, 29, 38, 43, 44] </ref>. The modeling system is first an editing environment in which a workflow specification can be prepared. Visual workflow models are most often supported by providing a point-and-select graph editor. <p> Action Workflow. The ActionWorkflow product <ref> [43, 51] </ref> has earned a reputation for supporting workflow technology based on its underlying "speech-act" model of how people work with one another [52]. <p> The system is designed on the premise that when work is to be conducted, there is someone who wants the work done, and someone else who will perform the work <ref> [43] </ref>. The Workflow Analyst is the component of the system that is used to model procedures. The tool enables end users to construct a speech-act model of the work that can be used to describe the work to all interested parties, and to perform basic analyses. <p> InConcert also allows its users to integrate their preferred productivity tools, and to override the default flow pattern. ActionWorkflow. ActionWorkflow supports the design of the speech-act model of work (see Section 2) as a composite model of standard interactions <ref> [43] </ref>. Once the model is designed, the management system supports the enactment of the model by moving work requests to work suppliers, by providing the proper tools and information to accomplish the work, then by routing the work to the next supplier.
Reference: [44] <institution> Filenet visual workflo software, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: A modeling system provides facilities for creating and browsing a representation model, for applying various algorithms to an analysis model, and for collaborative interaction and information archiving for design models (see Figure 2) <ref> [28, 29, 38, 43, 44] </ref>. The modeling system is first an editing environment in which a workflow specification can be prepared. Visual workflow models are most often supported by providing a point-and-select graph editor. <p> There is a formal underlying language, the FlowMark Description Language, for each visual model constructed in the system. The model can be used for representation, analysis, and design. FileNet Visual WorkFlo. This commercial product has been around for several years, and is especially well-known for its early distributed technology <ref> [44, 50] </ref>. The Visual WorkFlo/Composer is a graphical package used to define and analyze business procedures using a precedence flow graph. <p> When the step has completed its computation on the workcase, the result is reported back to the coordination model interpreter for subsequent scheduling. 3.3. Some Example Enactment Systems There are many examples of workflow enactment systems, including Prominand [57], Domino [58], the C&Co enhancement to C [26], Visual WorkFlo <ref> [44] </ref>. The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations). Also see [5, 9, 20, 21] for surveys of commercial products. FlowPATH. <p> The domain for which descriptive and analytic workflow models (e.g, [45, 65]) was intended is the plane defined by 0x1, 0y1, and z=1. Conventional workflow enactment systems <ref> [8, 49, 21, 56, 44] </ref> could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1.
Reference: [45] <author> Clarence A. Ellis. </author> <title> Information control nets: A mathematical model of office information flow. </title> <booktitle> In Proceedings of the 1979 ACM Conference on Simulation, Measurement and Modeling of Computer Systems, </booktitle> <year> 1979. </year>
Reference-contexts: No system was ever built to support E-nets. ICNs. The information-control net (ICN) language was explicitly designed as a workflow language to represent and analyze office procedures <ref> [45, 18] </ref>. The ICN had a control flow graph (isomorphic to the E-net coordination language), coupled with an information flow graph. <p> In 26 this domain, models that represent only structured or explicit work (e.g., [49, 64]) are in a subspace where x!1, y!1, and z!1; systems intended to address unstructured work are in a space where x!0, y!0, and z!0. The domain for which descriptive and analytic workflow models (e.g, <ref> [45, 65] </ref>) was intended is the plane defined by 0x1, 0y1, and z=1. Conventional workflow enactment systems [8, 49, 21, 56, 44] could be characterized as a line segment in the space with x=1, y!1, and z = 1.
Reference: [46] <author> C. A. Ellis and P. A. Morris. </author> <title> The information control nets model. Performance Evaluation Review, </title> <type> 8(3), </type> <month> November </month> <year> 1979. </year>
Reference-contexts: As we derived ICNs from E-nets, we were concerned about how natural these models might be for uninitiated office workers to use. Ellis and Morris conducted an extensive field study to determine acceptable visualizations to represent the coordination formalisms, resulting in the specific visual appearance of the ICN model <ref> [46] </ref>. In these field studies, it also quickly became clear that even though colored Petri nets were sufficient to represent every situation we could think of, office workers felt much more comfortable with subsidiary data flow graph described in the previous paragraph.
Reference: [47] <author> Gary J. Nutt. </author> <title> A Simulation System Architecture for Graph Models. </title> <editor> In G. Rozenburg, editor, </editor> <booktitle> Advances in Petri Nets '90, </booktitle> <pages> pages 417-435. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Quinault was a point-and-select, visual systems enabling its user to create, edit, and animate ICNs. The follow-on system extended Quinault's functionality across a network of workstations, establishing the basis for collaborative model design [38]. Olympus is a more recent distributed analysis and design system supporting ICNs <ref> [47, 48] </ref>. ICNs were ultimately used as the base language for the Group Bull FlowPATH workflow enactment product [49], described further in Section 3. IBM FlowMark, FileNet Visual WorkFlo, and Action Technologies Action Workflow are full workflow enactment products that have a modeling language and system component. IBM FlowMark.
Reference: [48] <author> Gary J. Nutt, A. Beguelin, I. Demeure, S. Elliott, J. McWhirter, and B. Sanders. Olympus: </author> <title> An Interactive Simulation System. </title> <booktitle> In 1989 Winter Simulation Conference, </booktitle> <pages> pages 601-611, </pages> <address> Washington, D.C., </address> <month> December </month> <year> 1989. </year>
Reference-contexts: Quinault was a point-and-select, visual systems enabling its user to create, edit, and animate ICNs. The follow-on system extended Quinault's functionality across a network of workstations, establishing the basis for collaborative model design [38]. Olympus is a more recent distributed analysis and design system supporting ICNs <ref> [47, 48] </ref>. ICNs were ultimately used as the base language for the Group Bull FlowPATH workflow enactment product [49], described further in Section 3. IBM FlowMark, FileNet Visual WorkFlo, and Action Technologies Action Workflow are full workflow enactment products that have a modeling language and system component. IBM FlowMark.
Reference: [49] <author> Bull S. A. </author> <title> Introduction to FlowPATH, </title> <month> May </month> <year> 1992. </year> <note> Manual No. 44 A2 60XM. </note>
Reference-contexts: The follow-on system extended Quinault's functionality across a network of workstations, establishing the basis for collaborative model design [38]. Olympus is a more recent distributed analysis and design system supporting ICNs [47, 48]. ICNs were ultimately used as the base language for the Group Bull FlowPATH workflow enactment product <ref> [49] </ref>, described further in Section 3. IBM FlowMark, FileNet Visual WorkFlo, and Action Technologies Action Workflow are full workflow enactment products that have a modeling language and system component. IBM FlowMark. Models in FlowMark are a combined data and control flow graph [21, 28]. <p> Also see [5, 9, 20, 21] for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product <ref> [49] </ref>. FlowPATH uses a logically centralized server with a relational database to store the model and the data for the procedures. Step interpretations are executed as processes in client workstations. <p> In 26 this domain, models that represent only structured or explicit work (e.g., <ref> [49, 64] </ref>) are in a subspace where x!1, y!1, and z!1; systems intended to address unstructured work are in a space where x!0, y!0, and z!0. The domain for which descriptive and analytic workflow models (e.g, [45, 65]) was intended is the plane defined by 0x1, 0y1, and z=1. <p> The domain for which descriptive and analytic workflow models (e.g, [45, 65]) was intended is the plane defined by 0x1, 0y1, and z=1. Conventional workflow enactment systems <ref> [8, 49, 21, 56, 44] </ref> could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1. <p> Workflow models are one approach for doing this, though there are other models for accomplishing this task. In our characterization, we differentiate between workflow system that provide suggestions of work to be performed by human users versus systems that automatically schedule work for the human worker (such as FlowPATH <ref> [49] </ref>). FlowPATH provides another form of flexibility for dealing with coordination. The sendTo operation allows the system's users to violate the coordination model at times when that was allowed (regions in which the conformance parameter is low), and in which it makes sense [4] (InConcert provides a similar ability [29]).
Reference: [50] <author> David A. Edwards and Martin S. McKendry. </author> <title> Exploiting read-mostly workloads in the filenet file system. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 58-70, </pages> <year> 1989. </year>
Reference-contexts: There is a formal underlying language, the FlowMark Description Language, for each visual model constructed in the system. The model can be used for representation, analysis, and design. FileNet Visual WorkFlo. This commercial product has been around for several years, and is especially well-known for its early distributed technology <ref> [44, 50] </ref>. The Visual WorkFlo/Composer is a graphical package used to define and analyze business procedures using a precedence flow graph.
Reference: [51] <author> Ronni T. Marshak. </author> <title> Action technologies workflow products. </title> <journal> Workgroup Computing Report, </journal> <volume> 16(5) </volume> <pages> 4-11, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Action Workflow. The ActionWorkflow product <ref> [43, 51] </ref> has earned a reputation for supporting workflow technology based on its underlying "speech-act" model of how people work with one another [52].
Reference: [52] <author> Fernando Flores, Michael Graves, Brad Hartfield, and Terry Winograd. </author> <title> Computer systems and the design of organizational interaction. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(2) </volume> <pages> 153-172, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Action Workflow. The ActionWorkflow product [43, 51] has earned a reputation for supporting workflow technology based on its underlying "speech-act" model of how people work with one another <ref> [52] </ref>. The system is designed on the premise that when work is to be conducted, there is someone who wants the work done, and someone else who will perform the work [43]. The Workflow Analyst is the component of the system that is used to model procedures.
Reference: [53] <author> D. Harel. Statecharts: </author> <title> a Visual Formalism for Complex Systems. </title> <journal> Science of Computer Programming - North-Holland, </journal> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: Scaling can be addressed by using hierarchical descriptions. The modeler identifies steps in the procedure, then provides an interpretation of the step through a conventional linear computation language, or through a nested single-entry single-exit graph model (e.g., see <ref> [53, 54] </ref>). If flow detail is important in the representation of the model, it is reflected as a set of steps within the coordination model; if it is desirable to ignore detail within the context, detail is abstracted into a single step in the model.
Reference: [54] <author> Peter Newton and James C. Browne. </author> <title> The code 2.0 graphical programming programming language. </title> <booktitle> In Proceedings of the ACM Conference on Supercomputing. ACM, </booktitle> <month> July, </month> <year> 1992. </year>
Reference-contexts: Scaling can be addressed by using hierarchical descriptions. The modeler identifies steps in the procedure, then provides an interpretation of the step through a conventional linear computation language, or through a nested single-entry single-exit graph model (e.g., see <ref> [53, 54] </ref>). If flow detail is important in the representation of the model, it is reflected as a set of steps within the coordination model; if it is desirable to ignore detail within the context, detail is abstracted into a single step in the model.
Reference: [55] <author> Narayanan Krishnakumar and Amith Sheth. </author> <title> Managing heterogeneous multi-system tasks to support enterprise-wide operations. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 155-186, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Therefore, modern workflow systems use the analogue of a Petri net token to represent a workcase, then represent actors using other model atoms, e.g., see <ref> [21, 28, 55, 56] </ref>. Actors may be people or computers; their roles identify a set of activities that the actor is capable of performing (i.e, an actor represents one "processing entity," so it can only do one thing at a time) [6, 8, 11].
Reference: [56] <author> D. R. McCarthy and S. K. </author> <title> Sarin. </title> <journal> Workflow and transactions in inconcert. IEEE Data Engineering, </journal> <volume> 16(2) </volume> <pages> 53-56, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Therefore, modern workflow systems use the analogue of a Petri net token to represent a workcase, then represent actors using other model atoms, e.g., see <ref> [21, 28, 55, 56] </ref>. Actors may be people or computers; their roles identify a set of activities that the actor is capable of performing (i.e, an actor represents one "processing entity," so it can only do one thing at a time) [6, 8, 11]. <p> Like FlowPATH, there is a significant set of underlying software available to step execution software via a packaged application programming interface. Actors and roles are also used as part of the runtime system's scheduling information. InConcert. The Xerox XSoft InConcert workflow product provides similar capabilities to FlowPATH <ref> [56, 29] </ref>. It is based on a workflow graphic model to define steps and their coordination model, including the flow of information and the role of people in the procedure, to define an enactment system. <p> The domain for which descriptive and analytic workflow models (e.g, [45, 65]) was intended is the plane defined by 0x1, 0y1, and z=1. Conventional workflow enactment systems <ref> [8, 49, 21, 56, 44] </ref> could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1.
Reference: [57] <author> B. Karbe, N. Rampserger, and P. Weiss. </author> <title> Support of cooperative work by electronic circulation folders. </title> <booktitle> In Proceedings of the ACM COIS '90, </booktitle> <pages> pages 109-117, </pages> <year> 1990. </year>
Reference-contexts: When the step has completed its computation on the workcase, the result is reported back to the coordination model interpreter for subsequent scheduling. 3.3. Some Example Enactment Systems There are many examples of workflow enactment systems, including Prominand <ref> [57] </ref>, Domino [58], the C&Co enhancement to C [26], Visual WorkFlo [44]. The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations).
Reference: [58] <author> Thomas Kreifelts, Elke Hinrichs, Karl-Heinz Klein, Peter Seufferet, and Gerd Woetzel. </author> <title> Experiences with the DOMINO office procedure system. </title> <booktitle> In Proceedings of the Second European Conference 38 on Computer-Supported Cooperative Work | ECSCW 91, </booktitle> <pages> pages 117-130. </pages> <publisher> Kluwer Academic Publications, </publisher> <year> 1991. </year>
Reference-contexts: When the step has completed its computation on the workcase, the result is reported back to the coordination model interpreter for subsequent scheduling. 3.3. Some Example Enactment Systems There are many examples of workflow enactment systems, including Prominand [57], Domino <ref> [58] </ref>, the C&Co enhancement to C [26], Visual WorkFlo [44]. The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook [59] are also concerned with uniform representations).
Reference: [59] <author> Thomas W. Malone, Kevin Crowston, Jintae Lee, and Brian Pentland. </author> <title> Tools for inventing organizations: Toward a handbook of organizational processes. </title> <type> Technical Report CCS WP No. 141, </type> <institution> Sloan School WP No. 3562-93, M.I.T., Sloan School of Mangement, </institution> <year> 1993. </year>
Reference-contexts: The Workflow Management Group is a manufacturer consortium organized to negotiate common ground on the various commercial offerings [11] (the PIF [6] and Process Handbook <ref> [59] </ref> are also concerned with uniform representations). Also see [5, 9, 20, 21] for surveys of commercial products. FlowPATH. As mentioned earlier, the ICN model was used as the basis of the Group Bull FlowPATH workflow product [49].
Reference: [60] <author> Ronald M. Baecker. </author> <title> Readings in Groupware and Computer-Supported Cooperative Work. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1993. </year>
Reference-contexts: There is overwhelming evidence that a pure workflow approach dramatically influences the social model among an organization's workers, (see Parts I and II of <ref> [60] </ref>). The impact of the technology on the behavior of the workers can be so severe as to cause workflow systems to completely fail (e.g., see [2]). <p> The rationale for extending the model over the conventional workflow approach is to be able to address different points in the space of solutions shown in Figure 7. The empirical evidence reported in <ref> [60] </ref> and in [2] as well as in countless CSCW papers argues that CSCW systems should support various points in the space. We find most of these arguments to be creditable, though each is driven by a particular scenario or set of circumstances. <p> Some systems add a layer to electronic mail so it can be used to capture some of the context of a domain. For example, the mail system delivers work to a person, and routes work onto others once one person has finished with it (see Chapter 8 in <ref> [60] </ref> as well as various commercial products). Electronic meeting rooms represent a higher level of immersion into the computer system. One class of electronic meeting rooms is an extension of conventional desktop window systems to embrace windows for images, audio streams, video streams, etc. (e.g., see [68]).
Reference: [61] <author> Heikki Saastamoinen, Markku Markkanen, and Vesa Savolainen. </author> <title> Survey on exceptions in office information systems. </title> <type> Technical Report CU-CS-712-95, </type> <institution> Department of Computer Science - University of Colorado, Boulder, </institution> <year> 1994. </year>
Reference-contexts: Exceptions occur because the procedure is an incomplete specification of the intended processing, because the intended procedure itself is incomplete, or because the procedure is completely inappropriate for the work <ref> [61] </ref> Change. A workflow procedure is specified, but the procedure must change frequently due to changes in the nature of workcases or the computing environment. Workflow as fiction. <p> Conventional workflow enactment systems [8, 49, 21, 56, 44] could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling <ref> [61] </ref> are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1. Goal-based systems (e.g. [32, 66, 63]) are in a domain in which z=0, but x and y vary according to the specifics of the model; e.g., an inferencing system assumes that y&lt;1. 4.2.
Reference: [62] <author> Kenneth L. Kraemer and John Leslie King. </author> <title> Computer-based systems for cooperative work and group decision making. </title> <journal> ACM Computing Surveys, </journal> <volume> 20(2) </volume> <pages> 115-146, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: By formalizing the coordination and step definition, there are fewer opportunities for human workers to compensate for inadequacies in the process. State-of-the-art workflow enactment systems [5, 21] do not address the issues described here <ref> [1, 2, 12, 19, 62] </ref>. One solution to this problem is to remove the coordination component from the system; this amounts to taking the situated work approach. However, all organizations impose at least some minimal set of procedural guidelines on how its workers perform their work.
Reference: [63] <author> Lawrence S. Lefkowitz and W. Bruce Croft. </author> <title> Planning and execution of tasks in cooperative work environments. </title> <booktitle> In IEEE AI Conference, </booktitle> <pages> pages 256-261, </pages> <year> 1989. </year>
Reference-contexts: Conversely, planning systems sometimes make heavy use of declarational specifications that can be analyzed to infer 23 the step computation, and, depending on the extent of the specification, even infer the coordination of the steps (e.g., see Polymer <ref> [63] </ref>). 4.1. Generalizing the Enactment Language It is clear that there must be workflow languages that can address a variety of approaches along different dimensions. <p> Conventional workflow enactment systems [8, 49, 21, 56, 44] could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1. Goal-based systems (e.g. <ref> [32, 66, 63] </ref>) are in a domain in which z=0, but x and y vary according to the specifics of the model; e.g., an inferencing system assumes that y&lt;1. 4.2.
Reference: [64] <author> Patricia Sachs. </author> <title> Transforming work: Collaboration, learning, and design. </title> <journal> Communications of the ACM, </journal> <volume> 38(9) </volume> <pages> 36-44, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In 26 this domain, models that represent only structured or explicit work (e.g., <ref> [49, 64] </ref>) are in a subspace where x!1, y!1, and z!1; systems intended to address unstructured work are in a space where x!0, y!0, and z!0. The domain for which descriptive and analytic workflow models (e.g, [45, 65]) was intended is the plane defined by 0x1, 0y1, and z=1.
Reference: [65] <author> Clarence A. Ellis and Najah Naffah. </author> <title> Design of Office Information Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: In 26 this domain, models that represent only structured or explicit work (e.g., [49, 64]) are in a subspace where x!1, y!1, and z!1; systems intended to address unstructured work are in a space where x!0, y!0, and z!0. The domain for which descriptive and analytic workflow models (e.g, <ref> [45, 65] </ref>) was intended is the plane defined by 0x1, 0y1, and z=1. Conventional workflow enactment systems [8, 49, 21, 56, 44] could be characterized as a line segment in the space with x=1, y!1, and z = 1.
Reference: [66] <author> Clarence A. Ellis and Jacques Wainer. </author> <title> Goal based models of collaboration. </title> <journal> Collaborative Computing, </journal> <volume> 1 </volume> <pages> 61-86, </pages> <year> 1994. </year>
Reference-contexts: Conventional workflow enactment systems [8, 49, 21, 56, 44] could be characterized as a line segment in the space with x=1, y!1, and z = 1. Systems that focus on exception handling [61] are in a space where x1-k, (0&lt;k&lt;1) and 0y1 and 0z1. Goal-based systems (e.g. <ref> [32, 66, 63] </ref>) are in a domain in which z=0, but x and y vary according to the specifics of the model; e.g., an inferencing system assumes that y&lt;1. 4.2.
Reference: [67] <author> Clarence A. Ellis and Gary J. Nutt. </author> <title> The modeling and analysis of coordination systems. </title> <booktitle> In ACM 1992 Conference on Computer-Supported Cooperative Work, </booktitle> <year> 1992. </year> <note> workshop position paper. </note>
Reference-contexts: Extending the ICN Model Based on the observation that people sometimes prefer to work through goals rather than through procedures, we introduced goal nodes into our ICN model <ref> [67] </ref>; a goal node represents a part of the procedure with an unstructured work specification.
Reference: [68] <author> Ian E. Smith, Scott E. Hudson, Elizabeth D. Mynatt, and John R. Selbie. </author> <title> Applying cryptographic techniques to problems in media space security. </title> <booktitle> In Proceedings of ACM 1995 Conference on Organizational Computing Systems, </booktitle> <pages> pages 190-196. </pages> <publisher> ACM, </publisher> <year> 1995. </year>
Reference-contexts: Electronic meeting rooms represent a higher level of immersion into the computer system. One class of electronic meeting rooms is an extension of conventional desktop window systems to embrace windows for images, audio streams, video streams, etc. (e.g., see <ref> [68] </ref>). The fundamental extension is the incorporation of a more diverse set of media into the desktop environment than existed in first generation window systems. Another class of electronic meeting rooms employ a collection of geographically distributed physical rooms augmented with computer-based tools (e.g, see [69, 70].
Reference: [69] <author> Clarence A. Ellis and et al. Project nick: </author> <title> Meeting analysis and augmentation. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(2), </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: The fundamental extension is the incorporation of a more diverse set of media into the desktop environment than existed in first generation window systems. Another class of electronic meeting rooms employ a collection of geographically distributed physical rooms augmented with computer-based tools (e.g, see <ref> [69, 70] </ref>. Participants assemble in the individual meeting rooms, and are logically gathered across the physical meeting rooms by the computer and network facilities. The emphasis in these projects is to provide effective means for extending normal "meeting tools" across the physically distributed rooms.
Reference: [70] <author> J. F. Nunamaker, Alan R. Dennis, Joseph S. Valacich, Douglas R. Vogel, and Joey F. George. </author> <title> Electronic meeting systems to support group work. </title> <journal> Communications of the ACM, </journal> <volume> 34(7) </volume> <pages> 40-61, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The fundamental extension is the incorporation of a more diverse set of media into the desktop environment than existed in first generation window systems. Another class of electronic meeting rooms employ a collection of geographically distributed physical rooms augmented with computer-based tools (e.g, see <ref> [69, 70] </ref>. Participants assemble in the individual meeting rooms, and are logically gathered across the physical meeting rooms by the computer and network facilities. The emphasis in these projects is to provide effective means for extending normal "meeting tools" across the physically distributed rooms.
Reference: [71] <author> Lennart E. Fahlen, Charles Grant Brown, Olov Stahl, and Christer Carlsson. </author> <title> A space based model for user interaction in shared synthetic environments. </title> <booktitle> In Proceedings of Interchi '93, </booktitle> <pages> pages 43-48, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Participants assemble in the individual meeting rooms, and are logically gathered across the physical meeting rooms by the computer and network facilities. The emphasis in these projects is to provide effective means for extending normal "meeting tools" across the physically distributed rooms. Virtual environment systems such as Dive <ref> [71] </ref>, Rapport, VMM, and Archways [72], and RING [73] create another level of immersion into the work by virtualizing a shared room and its artifacts, including its participants. A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants.
Reference: [72] <author> David A. Berkley and J. Robert Ensor. </author> <title> Multimedia research platforms. </title> <journal> AT&T Technical Journal, </journal> <volume> 74(5) </volume> <pages> 34-45, </pages> <month> September/October </month> <year> 1995. </year>
Reference-contexts: The emphasis in these projects is to provide effective means for extending normal "meeting tools" across the physically distributed rooms. Virtual environment systems such as Dive [71], Rapport, VMM, and Archways <ref> [72] </ref>, and RING [73] create another level of immersion into the work by virtualizing a shared room and its artifacts, including its participants. A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants.
Reference: [73] <author> Thomas A. Funkhouser. </author> <title> RING: A client-server system for multi-user virtual environments. </title> <booktitle> In 1995 Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 85-92. </pages> <publisher> ACM, </publisher> <year> 1995. </year>
Reference-contexts: The emphasis in these projects is to provide effective means for extending normal "meeting tools" across the physically distributed rooms. Virtual environment systems such as Dive [71], Rapport, VMM, and Archways [72], and RING <ref> [73] </ref> create another level of immersion into the work by virtualizing a shared room and its artifacts, including its participants. A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants.
Reference: [74] <institution> Special Issue of AT&T Technical Journal on Multimedia, </institution> <note> September/October 1995. Nikil Jayant, Technical Reviewing Editor. </note>
Reference-contexts: A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants. There is considerable contemporary literature describing virtual environments to support electronic meetings <ref> [74, 75, 76, 77, 78] </ref>. Office workers usually build up a social model with other workers that they interact with while performing "company business" on the telephone.
Reference: [75] <author> Duane K. Boman. </author> <title> International survey: Virtual environment research. </title> <journal> IEEE Computer, </journal> <volume> 28(6) </volume> <pages> 57-65, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants. There is considerable contemporary literature describing virtual environments to support electronic meetings <ref> [74, 75, 76, 77, 78] </ref>. Office workers usually build up a social model with other workers that they interact with while performing "company business" on the telephone.
Reference: [76] <author> Domenica Ferrari, </author> <title> editor. </title> <booktitle> Proceedings of the Second ACM International Conference on Multimedia. ACM, </booktitle> <year> 1994. </year>
Reference-contexts: A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants. There is considerable contemporary literature describing virtual environments to support electronic meetings <ref> [74, 75, 76, 77, 78] </ref>. Office workers usually build up a social model with other workers that they interact with while performing "company business" on the telephone.
Reference: [77] <institution> Special Issue of IEEE Computer on Virtual Environments, </institution> <month> July </month> <year> 1995. </year> <editor> David R. Pratt, Michael Zyda, and Kristen Kelleher. </editor> <volume> 39 </volume>
Reference-contexts: A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants. There is considerable contemporary literature describing virtual environments to support electronic meetings <ref> [74, 75, 76, 77, 78] </ref>. Office workers usually build up a social model with other workers that they interact with while performing "company business" on the telephone.
Reference: [78] <institution> Special Issue of IEEE Computer on Multimedia Systems and Applications, </institution> <month> May </month> <year> 1995. </year> <editor> Arturo A. Rodriguez and Lawrence A. </editor> <title> Rowe, Guest Editors. </title>
Reference-contexts: A participant has a virtualization that is placed in the environment where it interacts directly with shared objects, including other participants. There is considerable contemporary literature describing virtual environments to support electronic meetings <ref> [74, 75, 76, 77, 78] </ref>. Office workers usually build up a social model with other workers that they interact with while performing "company business" on the telephone.
Reference: [79] <author> Gary J. Nutt. </author> <title> Model-based virtual environments for collaboration. </title> <type> Technical Report CU-CS-799-95, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Our conjecture is consistent with the rationale for any electronic meeting room or virtual environment study. An Experimental Model-Based Virtual Environment. The Model-Based Virtual Environment (MBVE) is a virtual environment to support extended ICNs <ref> [79, 80] </ref>. The 30 rationale for extended ICNs is described in Section 4; we can summarize our approach by noting that besides the addition of goal nodes, we expect the language to identify regions in the 3-space model of Figure 7 in which the corresponding steps should be executed.
Reference: [80] <author> Gary J. Nutt, Joe Antell, Scott Brandt, Chris Gantz, Adam Griff, and Jim Mankovich. </author> <title> Software support for a virtual planning room. </title> <type> Technical Report CU-CS-800-95, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Our conjecture is consistent with the rationale for any electronic meeting room or virtual environment study. An Experimental Model-Based Virtual Environment. The Model-Based Virtual Environment (MBVE) is a virtual environment to support extended ICNs <ref> [79, 80] </ref>. The 30 rationale for extended ICNs is described in Section 4; we can summarize our approach by noting that besides the addition of goal nodes, we expect the language to identify regions in the 3-space model of Figure 7 in which the corresponding steps should be executed.
Reference: [81] <author> Richard Blumenthal and Gary J. Nutt. </author> <title> Supporting unstructured workflow activities in the Bramble ICN system. </title> <booktitle> In Proceedings of ACM 1995 Conference on Organizational Computing Systems, </booktitle> <pages> pages 130-137, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The nature of such information can vary from simple to complex: we characterize types of contextual information in 5 levels <ref> [81] </ref>: * Static Information. The coordination model implicitly contains information that can be useful to the human actor, e.g., it can provide a view of the coordination model so that the actor can see what should have already been done. <p> The Bramble contextual assistance systems allows an analyst to design workflow system that support static, scripted, dynamic, and computes information <ref> [81] </ref>. CSCW researchers generally favor higher levels of computer support for collaborative work. While our placement of contextual assistance on the computation axis may be arguable, the notion of increasing levels of support for computation is well-accepted.
References-found: 81

