URL: http://seclab.cs.ucdavis.edu/papers/bd96.ps
Refering-URL: http://seclab.cs.ucdavis.edu/papers.html
Root-URL: http://www.cs.ucdavis.edu
Title: Checking for Race Conditions in File Accesses  
Author: Matt Bishop Michael Dilger 
Address: Davis, CA 95616-8562  
Affiliation: Department of Computer Science University of California at Davis  
Note: To appear in Computing Systems Page 1 of 20  
Abstract: Flaws due to race conditions in which the binding of a name to an object changes between repeated references occur in many programs. We examine one type of this aw in the UNIX operating system, and describe a semantic method for detecting possible instances of this problem. We present the results of one such analysis in which a previously undiscovered race condition aw was found. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abbott, R. P., Chin, J. S., Donnelley, J. E., Konigsford, W. L., Tokubo, S., and Webb, D. A., </author> <title> Security Analysis and Enhancements of Computer Operating Systems, </title> <type> NBSIR 761041, </type> <institution> Institute for Computer Sciences and Technology, National Bureau of Standards (Apr. </institution> <year> 1976). </year>
Reference-contexts: This particular aw has a distinguished lineage, being described by both the Program Analysis (PA) project [3] and the Research Into Secure Operating Systems (RISOS) project <ref> [1] </ref> as a subclass of the class of timing or synchronization aws. A subclass of TOCTTOU aws, which we call TOCTTOU binding aws , arise when object identifiers are fallaciously assumed to remain bound to an object.
Reference: [2] <author> Bach, M. J., </author> <booktitle> The Design of the UNIX Operating System , Prentice-Hall, </booktitle> <address> Englewood Cliffs, NJ (1987). </address>
Reference: [3] <author> Bisbey, R. II and Hollingsworth, D., </author> <title> Protection Analysis Project Final Report, </title> <institution> ISI/RR-78-13, DTIC AD A056816, USC/Information Sciences Institute (May, </institution> <year> 1978). </year>
Reference-contexts: A TOCTTOU aw occurs when a program checks for a particular characteristic of an object, and then takes some action that assumes the characteristic still holds when in fact it does not. This particular aw has a distinguished lineage, being described by both the Program Analysis (PA) project <ref> [3] </ref> and the Research Into Secure Operating Systems (RISOS) project [1] as a subclass of the class of timing or synchronization aws. A subclass of TOCTTOU aws, which we call TOCTTOU binding aws , arise when object identifiers are fallaciously assumed to remain bound to an object.
Reference: [4] <author> Bishop, M. and Klein, D., </author> <title> Improving System Security via Proactive Password Checking, Computers & Security </title>
Reference: [5] <author> Denning, D., </author> <title> An Intrusion Detection Model, </title> <journal> IEEE Transactions on Software Engineering (2) pp. </journal> <month> 222232 (Feb. </month> <year> 1987). </year> <note> [6] 8LGM, [8lgm]-Advisory-7.UNIX.passwd.11-May-1994, available from fileserv@bag-puss.demon.co.uk (May 1994) [7] 8LGM, [8lgm]-Advisory-5.UNIX.mail.24-Jan-1992, available from fileserv@bag puss.demon.co.uk (Jan 1992) </note>
Reference: [8] <author> Fink, G. and Levitt, K., </author> <title> Property-Based Testing of Privileged Programs, </title> <booktitle> Proceedings of the Tenth Annual Computer Security Applications Conference , pp. </booktitle> <month> 154163 (Dec. </month> <year> 1994). </year>
Reference: [9] <author> Garvey, T. D. and Lunt, T. F., </author> <title> Model-Based Intrusion Detection, </title> <booktitle> Proceedings of the Four teenth National Computer Security Conference , pp. </booktitle> <address> 372385 (Oct. </address> <year> 1991). </year>
Reference: [10] <author> Hennie, F., </author> <title> Introduction to Computability , Addison-Wesley, </title> <address> Reading, MA (1977). </address>
Reference-contexts: Appendix 3 shows the typescript of a sample attack. 5. Analysis Limits Given an arbitrary program, consider the existence of exploitable TOCTTOU binding aws in a program to be a property. Then this property holds for at least one computable program. By Rices theorem <ref> [10] </ref>, the set of programs for which this property holds is undecidable, so no 4. The command (1) lists the system calls in object files, among other externally defined labels.
Reference: [11] <author> Ko, C., Fink, G., and Levitt, K., </author> <title> Automated Detection of Vulnerabilities in Privileged Pro grams by Execution Monitoring, </title> <booktitle> Proceedings of the Tenth Annual Computer Security Applications Conference , pp. </booktitle> <month> 134144 (Dec. </month> <year> 1994). </year>
Reference: [12] <author> Landwehr, C. E., Bull, A. R., McDermott, J. P., and Choi, W. S., </author> <title> A Taxonomy of Computer Program Security Flaws, </title> <journal> Computing Surveys (3) pp. </journal> <month> 211255 (Sep. </month> <year> 1994). </year>
Reference-contexts: By contrast, security holes or vulnerabilities enable a user (called an attacker ) to gain privileges, access to data, or the ability to interfere with others work via by exploitation. Much research, especially in the field of intrusion detection [5][9], draws on characteristics of these attacks <ref> [12] </ref>. But many attacks can exploit a single vulnerability, implying that the characteristics of the aws themselves are more fundemental and should be of interest. This work focuses on a semantic characteristic of one class of the time-of-check-to-time-of-use (TOCTTOU) aws.
Reference: [13] <author> Lefer, S. J., McKusick, M. K., Karels, M. J., and Quarterman, J. S., </author> <title> The Design and Implementation of the 4.3 BSD UNIX Operating System , Addison-Wesley, </title> <address> Reading, MA (1989). </address>
Reference: [14] <author> Ritchie, D. M. and Thompson, K., </author> <title> The UNIX Time-Sharing System, </title> <journal> Communications of the ACM (7) pp. </journal> <month> 365375 (July </month> <year> 1974). </year>
Reference-contexts: Although such a privileged user violates basic security design principles [15], it eases problems of administration. Access to these users requires either a password or use of a mechanism by which the privileged user delegates privilege to a set of utilities. The UNIX operating system <ref> [14] </ref> is one of the better-known, and most widely-used, systems to use this scheme. As the delegation of rights creates potential security problems, analyzing these utilities to which rights have been delegated will provide insight into vulnerabilities on the systems where they appear.
Reference: [15] <author> Saltzer and Schroeder, </author> <title> Protection in Computer Systems, </title> <journal> Proceedings of the IEEE (1975). </journal> <note> To appear in Computing Systems Page 16 of 20 </note>
Reference-contexts: Demonstration of the Problem The analysis in this paper focuses on application-level programs rather than on the operating system. Many operating systems allow some trusted user complete control over the system. Although such a privileged user violates basic security design principles <ref> [15] </ref>, it eases problems of administration. Access to these users requires either a password or use of a mechanism by which the privileged user delegates privilege to a set of utilities. The UNIX operating system [14] is one of the better-known, and most widely-used, systems to use this scheme.
Reference: [16] <author> Scheier, R. W. and Gettys, J., </author> <title> The X Window System, </title> <journal> ACM Transactions on Graphics (2) pp. </journal> <month> 79109 (Apr. </month> <year> 1987). </year> <note> [17] Sun Sendmail Vulnerability , CERT Advisory CA-90:01 (Jan. 1990), available from cert.org via anonymous ftp. Sendmail Vulnerability , CERT Advisory CA-93:16 (Nov. 1993), available from cert.org via anonymous ftp. Sendmail Vulnerability (Supplement) , CERT Advisory CA-93:16a (Jan. 1994), available from cert.org via anonymous ftp. Sendmail Vulnerabilities , CERT Advisory CA-94:12 (July 1994), available from cert.org via anonymous ftp. Sendmail Vulnerabilities , CERT Advisory CA-95:05 (Feb. 1995), available from cert.org via anonymous ftp. </note>
Reference-contexts: Figure 1b shows this, with the dashed arrow indicating which data is actually read and the solid arrow indi cating the name given to open . The unprivileged process can then write to the protected password file. Several versions of the terminal emulation program xterm (1) <ref> [16] </ref> suffer from this aw, which arises when logging sessions to a file. Another instance of this aw occurs on SunOS and HP/UX systems. The program passwd allows the user to name the password file as a parameter.
References-found: 14

