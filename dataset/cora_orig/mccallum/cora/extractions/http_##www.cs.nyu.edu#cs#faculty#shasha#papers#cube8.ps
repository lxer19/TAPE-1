URL: http://www.cs.nyu.edu/cs/faculty/shasha/papers/cube8.ps
Refering-URL: http://www.cs.nyu.edu/cs/faculty/shasha/papers/papers.html
Root-URL: http://www.cs.nyu.edu
Title: Hierarchically Split Cube Forests for Decision Support: description and tuned design  
Author: Theodore Johnson Dennis Shasha 
Abstract: The paradigmatic view of data in decision support consists of a set of dimensions (e.g., location, product, time period, ...), each encoding a hierarchy (e.g., location has hemisphere, country, state/province, ..., block). Typical queries consist of aggregates over a quantifiable attribute (e.g., sales) as a function of at most one attribute in each dimension of this "data cube." For example, find the sum of all sales of blue polo shirts in Palm Beach during the last quarter. In this paper, we introduce an index structure for storing and indexing aggregates, called cube forests, to support such cube queries efficiently | one index search is usually enough. In their most general form, cube forests require a lot of space. So, we present an optimized structure, called hierarchically split cube forests that exploit the hierarchical nature of the data to save space. We then present a model and algorithms to arrive at designs that further reduce update time, but suffer an increase in query time. Our experiments bear out the model and show that the structure has promise for decision support applications in read-intensive environments. Disclaimer: This paper has been submitted for publication. We welcome comments. If you find it necessary to refer to it, please do so as a "Personal Communication." Thanks.
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> Latha S. Colby, Nancy L. Martin and Robert M. Wehrmeister. </author> <title> "Query Processing for Decision Support: The SQLmpp Solution". </title> <booktitle> In Proceedings of the Third International Conference on Parallel and Distributed Information Systems, 1994, </booktitle> <address> Austin, Texas, </address> <pages> pp. </pages> <month> 121-130. </month> <title> [2] "Method and Apparatus for Storing and Retrieving Multi-dimensional data in Computer Memory", 05359724, </title> <editor> Robert J. </editor> <publisher> Earle. </publisher>
Reference-contexts: Red Brick is reputed to make heavy use of join indexes. 3. massive parallelism on specialized processors and/or networks | Teradata and Tandem use this approach, making use of techniques for parallelizing the various database operators such as select, joins, and aggregates over horizontally partitioned data. Masspar <ref> [1] </ref> by contrast uses a SIMD model and specialized query processing methods. We introduce a new data structure for this problem called cube forests. Like bit vectors and two dimensional indexes, cube forests are oriented towards a batch-load-then-read-intensively system.
Reference: [3] <author> Maurice Frank, </author> <title> "A Drill-down Analysis of Multidimensional Databases " DBMS, </title> <journal> vol. </journal> <volume> 7, no. 8, </volume> <pages> pp. </pages> <month> 60ff July </month> <year> 1994. </year>
Reference-contexts: The data at their disposal is too vast to understand in its raw form, so they must consider it in summarized form, e.g. the trend of sales of such and such a brand over the last few time periods <ref> [3] </ref>. "Decision support" software to help them is often optimized for read-only complex queries. Companies such as Red Brick Systems, Teradata, Tandem, Masspar, Sybase, Praxis, and smaller companies such as Arbor Software all have products that cater to this market often using proprietary data structures.
Reference: [4] <author> Jim Gray, Adam Bosworth, Andrew Layman and Hamid Pirahesh "Data Cube: </author> <title> a relational aggregation operator generalizing group-by, cross-tab, and sub-totals" Personal communication, </title> <booktitle> Summer, </booktitle> <year> 1995. </year>
Reference: [5] <author> T. Johnson, D. Shasha, </author> <title> "2Q: A Low Overhead High Performance Buffer Management Replacement Algorithm" In Proceedings of the 20th International Conference on Very Large Data Bases, </title> <booktitle> 1994, Santiago, </booktitle> <pages> Chile pp. 439-450. </pages>
Reference-contexts: Our optimizer found this arrangement to have the lowest update cost. We implemented the cube forest algorithms on top of a B-tree, with a buffer manager that uses the 2Q caching algorithm <ref> [5] </ref>. Because of the small scale of the experiments, the B-tree uses small nodes, with space for 10 entries in each node. To test the performance of clustered updates, we initialize the forest by performing 20 batches of 100 updates.
Reference: [6] <author> V.Y. </author> <title> Lum, </title> <journal> "Multi-attribute Retrieval with Combined Indexes" Communications of the ACM, </journal> <volume> vol. 13m no 11 Nov. </volume> <year> 1970 </year> <month> pg. </month> <pages> 660-665. </pages>
Reference-contexts: This second feature leads to a tree topology for the template as shown in the left side of Figure 2. (The idea of using sequential combinations of attribute indexes as in our linear cube trees, though without aggregates, first appeared in Lum's insufficiently recognized work <ref> [6] </ref>.) Let n be a node in a cube tree template. We define attrib (n) to be the attributes indexed by n. Next, we define pathattrib (n) to be the union of attrib (m) for every m on the path from the root of the cube tree to n (inclusive).
Reference: [7] <author> Patrick O'Neil, </author> <title> "Model 204: </title> <booktitle> Architecture and Performance" High Performance Transaction Systems Lecture Notes in Computer Science Number 359, </booktitle> <month> September, </month> <year> 1987. </year> <editor> Springer-Verlag, eds. D. Gawlick, M. Haynie, A. </editor> <publisher> Reuters </publisher>
Reference-contexts: Multiple conjunctive selections (e.g., on product, date, and location) result in multiple bit vectors which are bitwise Anded. The resulting vector is used to select out values to be aggregated. Praxis <ref> [7] </ref> and the Sybase index accelerator use this approach. Bit vector ideas can be extended across tables by using join indexes.
Reference: [8] <author> Betty Salzberg and Andreas Reuter, </author> <title> "Indexing for Aggregation" personal communication, </title> <month> May </month> <year> 1995, </year> <note> to be published. </note>
Reference-contexts: Note that the instantiation is a tree even though the template is linear. sional search structure over the corresponding attributes. (We took the idea of incorporating multidimensional structures from Reuter and Salzberg <ref> [8] </ref> who explore many interesting variations of this idea.) Second, an interior node may have several children. In this case, each entry in a leaf of an index in the instantiation corresponding to the node has a pointer to a subindex for each template child of the node.

References-found: 8

