URL: http://www.cs.indiana.edu/database/Exodus/sm3doc.ps
Refering-URL: http://www.cs.indiana.edu/database/Exodus/Exodus.html
Root-URL: http://www.cs.indiana.edu
Title: Using the EXODUS Storage Manager  
Note: The Exodus software was developed primarily with funds provided by by the Defense Advanced Research Projects Agency under contracts N00014-85-K-0788, N00014-88-K-0303, and DAABO7-92-C-Q508 and monitored by the US Army Research Laboratory. Additional support was provided by Texas Instruments, Digital Equipment Corporation, and Apple Computer.  
Date: (Last revision: November, 1993)  
Pubnum: V3.1  
Abstract-found: 0
Intro-found: 1
Reference: [Care86] <author> M. Carey, D. DeWitt, J. Richardson, and E. Shekita, </author> <title> Object and File Management in the EXODUS Extensible Database System, </title> <booktitle> Proc. of the 1986 VLDB Conf., </booktitle> <address> Kyoto, Japan, </address> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: The header of a large object serves as the root of a B + tree index structure that is used to access the object's data <ref> [Care86, Care89] </ref>. For space efficiency, a large object header can share a disk page with small objects and other large object headers. The data pages and the pages that make up the index structure of a large object are not shared, however.
Reference: [Care89] <author> M. Carey, D. DeWitt, E. Shekita, </author> <title> Storage Management for Objects in EXODUS, Object-Oriented Concepts, Databases, and Applications, </title> <editor> W. Kim and F. Lochov-sky, eds., </editor> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The header of a large object serves as the root of a B + tree index structure that is used to access the object's data <ref> [Care86, Care89] </ref>. For space efficiency, a large object header can share a disk page with small objects and other large object headers. The data pages and the pages that make up the index structure of a large object are not shared, however. <p> When the large object version is updated, the affected portions of the original object are copied to prevent the original object from being affected by the update <ref> [Care89] </ref>. Although the version support described here is primitive, essentially providing copy-on-write objects, it has been purposefully designed that way so that a variety of applicationspecific versioning schemes can be implemented on top of the Storage Manager. 2.2.3. Files Objects are allocated in files, which are collections of related objects.
Reference: [Chou85] <author> H. Chou and D. Dewitt, </author> <title> An Evaluation of Buffer Management Strategies for Relational Database Systems, </title> <booktitle> Proc. of the 1985 VLDB Conf., </booktitle> <address> Stockholm, Sweden, </address> <month> Aug. </month> <year> 1985. </year>
Reference-contexts: Buffer Operations The Storage Manager buffer manager implements the concept of a buffer group, as proposed in the DBMIN buffer management algorithm <ref> [Chou85] </ref>. The essence of the DBMIN algorithm is that competing uses of the buffer pool may be allocated their own buffers, to minimize competition for the buffers and to eliminate thrashing in the buffer pool. All uses of the buffer pool are made through a buffer group.
Reference: [Fran92] <author> M. Franklin, M. Zwilling, C.K.Tan, M. Carey, and D. DeWitt, </author> <title> Crash Recovery in Client-Server EXODUS, </title> <booktitle> Proc. of the ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: In the last phase, the undo phase, the server aborts the transactions that were active at the time of the crash. The volumes are dismounted, and a checkpoint is taken. For details of recovery in the Storage Manager, see <ref> [Fran92] </ref>. 54 5.3. Tuning the Server There are several tuning parameters in the Storage Manager server. The following sections describe each one. 5.3.1.1.
Reference: [Gray78] <author> J. N. Gray, </author> <booktitle> Notes on Database Operating Systems, Lecture Notes in Computer Science 60, Advanced course on Operating Systems, </booktitle> <editor> ed. G. Seegmuller, </editor> <publisher> Springer Verlag, </publisher> <address> New York 1978. </address>
Reference-contexts: Transactions that use data on more than one server are committed using a distributed two-phase commit protocol [Moha83]. 2.2.7. Concurrency Control Concurrency control allow multiple client applications safely to use data simultaneously. Con-currency control is based on the standard hierarchical two-phase locking protocol providing degree-three consistency (see <ref> [Gray78, Gray88] </ref>). The lock hierarchy contains two granularities: file-level, and page-level. Locking for index operations is performed with a non-two-phase protocol, which allows multiple clients to read and update the same index. Deadlocks involving more than one server are resolved through timeouts. 2.2.8.
Reference: [Gray88] <author> J. Gray, R. Lorie, G. Putzolu, I. Traiger, </author> <title> Granularity of Locks and Degrees of Consistency in a Shared Data Base, Readings in Database Systems, </title> <editor> ed. M. Stone-braker, </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Ca., </address> <year> 1988. </year>
Reference-contexts: Transactions that use data on more than one server are committed using a distributed two-phase commit protocol [Moha83]. 2.2.7. Concurrency Control Concurrency control allow multiple client applications safely to use data simultaneously. Con-currency control is based on the standard hierarchical two-phase locking protocol providing degree-three consistency (see <ref> [Gray78, Gray88] </ref>). The lock hierarchy contains two granularities: file-level, and page-level. Locking for index operations is performed with a non-two-phase protocol, which allows multiple clients to read and update the same index. Deadlocks involving more than one server are resolved through timeouts. 2.2.8.
Reference: [Litw88] <author> W. Litwin, </author> <title> Linear Hashing: A New Tool for File and Table Addressing, Readings in Database Systems, </title> <editor> ed. M. Stonebraker, </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Ca., </address> <year> 1988. </year>
Reference-contexts: B + tree provides fast index lookup on all kinds of queries, especially range queries. Linear hashing provides even faster index lookup and supports linear space growth for dynamically growing indexes, but it supports only exact-match queries. More information about linear hashing can be found in <ref> [Litw88] </ref>. A key is fully described by the KEY structure: typedef struct - TWO length; /* length of the key */ void* valuePtr; /* pointer to value of the key */ KEY; Index keys are compared according to the key type given when the index is created. <p> The default load factor, 75%, yields the best access time and space utilization. See <ref> [Litw88] </ref> for information about linear hashing and when it might be useful to change the load factor. The load factor can be set only on a newly created index. 4.10.2. Inserting and Removing Index Elements hhhhhhhhhhhhhhhhhhhhhhhhhhhhh 3 Indexes on temporary volumes are not implemented. (Section 5.1.3, Temporary Volumes).
Reference: [Moha83] <author> C. Mohan, B. Lindsay, </author> <title> Efficient Commit Protocols for the Tree of Processes Model of Distributed Transactions, </title> <booktitle> Proc. 2nd ACM SIGACT/SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <address> Montreal, Canada, </address> <month> August, </month> <year> 1983. </year>
Reference-contexts: Updates made by aborted transactions are not reflected on stable storage. Transactions that use data on more than one server are committed using a distributed two-phase commit protocol <ref> [Moha83] </ref>. 2.2.7. Concurrency Control Concurrency control allow multiple client applications safely to use data simultaneously. Con-currency control is based on the standard hierarchical two-phase locking protocol providing degree-three consistency (see [Gray78, Gray88]). The lock hierarchy contains two granularities: file-level, and page-level. <p> More sample programs are included with the software release. 4.3. Transactions The Storage Manager supports transactions, including concurrency control and recovery. Transactions may involve data managed by several Exodus Storage Manager servers, in which case a two-phase commit protocol, based on Presumed Abort <ref> [Moha83] </ref>, determines the fate of the transaction when the application commits the transaction. The fact that such a transaction is distributed over several servers is invisible to the application.
Reference: [Moha89] <author> C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and P. Schwarz, </author> <title> ARIES: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 17, No 1, </volume> <month> March </month> <year> 1992. </year>
Reference: [Rich87] <author> J. Richardson and M. Carey, </author> <title> Programming Constructs for Database System Implementation in EXODUS, </title> <booktitle> Proc. of the ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>

References-found: 10

