URL: http://www-ccs.cs.umass.edu/db/publications/ICDE98.ps
Refering-URL: http://www-ccs.cs.umass.edu/db/publications/
Root-URL: 
Email: (kamath,krithi)@cs.umass.edu  
Title: Failure Handling and Coordinated Execution of Concurrent Workflows  
Author: Mohan Kamath and Krithi Ramamritham 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Workflow management systems (WFMSs) coordinate the execution of applications distributed over networks. In WFMSs, data inconsistencies can arise due to (i) the interaction between steps of concurrent threads within a workflow (intra-workflow coordination) (ii) the interaction between steps of concurrent workflows (inter-workflow coordination) and (iii) the presence of failures. Since these problems have not received adequate attention, this paper focuses on developing the necessary concepts and infrastructure to handle them. First, to deal with inter- and intra- workflow coordination requirements we have identified a set of high level building blocks. Secondly, to handle failures we propose a novel and pragmatic approach called opportunistic compensation and re-execution that allows a work-flow designer to customize workflow recovery from correctness as well as performance perspectives. Thirdly, based on these concepts we have designed a workflow specification language that expresses new requirements for workflow executions and implemented a run-time system for managing workflow executions while satisfying the new requirements. These ideas are geared towards improving the modeling and correctness properties offered by WFMSs and making them more robust and flexible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alonso, D. Agrawal, and A. El Abbadi. </author> <title> Process synchronization in workflow management systems. </title> <booktitle> In 8th IEEE Symposium on Parallel and Distributed Processing (SPDS'97), </booktitle> <address> New Orleans, Louisiana, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Also, none of the above discuss the race conditions created due to failures along parallel threads of execution within a workflow. The need for mutual exclusion of steps from concurrent workflow processes to ensure correct interleavings has also been discussed in <ref> [1] </ref> where a history based protocol is proposed to dynamically impose access restrictions. In contrast, we have developed a uniform set of low level mechanisms to handle different type of coordinated execution requirements by dynamically modifying workflow RuleSets.
Reference: [2] <author> G. Alonso, D. Agrawal, A. El Abbadi, M. Kamath, R. Guen-thoer, and C. Mohan. </author> <title> Advanced Transaction Models in Work-flow Contexts. </title> <booktitle> In Proc. of Intl. Conference on Data Engineering (ICDE), </booktitle> <year> 1996. </year>
Reference-contexts: A detailed discussion on how concepts from advanced transaction models such as sagas and flex transactions can be used to handle workflow step failures is provided in <ref> [2] </ref>. Another transaction oriented approach for handling workflow exceptions is presented in [10]. A three layer error model for exception handling in the METEOR system is presented in [25] for handling exceptions where different corrective action is taken depending on the specific reason of failure.
Reference: [3] <author> G. Alonso, M Kamath, D. Agrawal, A. El Abbadi, R. Gunthor, and C. Mohan. </author> <title> Failure Handling in Large Scale Workflow Management Systems. </title> <type> Technical Report RJ 9913(87293), </type> <institution> IBM Almaden Research Center, </institution> <year> 1994. </year>
Reference-contexts: The WFDB provides the persistence necessary to facilitate forward recovery in case of failure of the workflow engine. Failures can occur in workflow system components and they have to be handled efficiently to improve WFMS availability. Strategies for handling failures of the workflow server are discussed in <ref> [3] </ref> and for the failure of the workflow database are discussed in [19].
Reference: [4] <author> P. C. Attie, M. P. Singh, A. Sheth, and M. Rusinkiewicz. </author> <title> Specifying and Enforcing Intertask Dependencies. </title> <booktitle> In Proc. Intl' Conf. on Very Large Data Bases, </booktitle> <pages> page 134, </pages> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference: [5] <author> F. Casati, S. Ceri, B. Pernici, and G. Pozzi. </author> <title> Conceptual modeling of workflows. </title> <booktitle> In Proceedings of OO-ER Conference, Cold Coast, </booktitle> <address> Australia, </address> <year> 1995. </year>
Reference-contexts: Thus, the core infrastructure we have developed for scheduling steps is efficient. Rule-based approaches to handle workflow executions have also been used by others <ref> [5] </ref>. The CREW environment contains nodes of heterogeneous architectures. To achieve total portability the LAWS compiler and a subset of CREW run-time environment have been implemented using the Java programming language.
Reference: [6] <author> Q. Chen and U. Dayal. </author> <title> Failure Handling for Transaction Hierarchies. </title> <booktitle> In Proc. of Intl. Conference on Data Engineering (ICDE), </booktitle> <year> 1997. </year>
Reference-contexts: In contrast, our opportunistic compensation and re-execution technique takes an integrated look at workflow rollback and re-execution both from correctness and performance perspective. There has also been some recent work on failure handling in transaction hierarchies <ref> [6] </ref>. While our work focuses on modeling and system support for custom handling of workflow failures, other general strategies particularly those discussed in advanced transaction models can be used to handle workflow step failures.
Reference: [7] <author> Panos Chrysanthis and Krithi Ramamritham. </author> <title> Synthesis of Extended Transaction Models Using ACTA. </title> <journal> ACM Trans. on Database Sys., </journal> <volume> 19(3) </volume> <pages> 450-491, </pages> <year> 1994. </year>
Reference: [8] <author> C. T. Davies. </author> <title> Data Processing Spheres of Control. </title> <journal> IBM Systems Journal, </journal> <volume> 17(2) </volume> <pages> 179-198, </pages> <year> 1978. </year>
Reference-contexts: ConTracts deals with issues related to coordinated execution across long computations using the notion of invariants. However they do not address the type of coordinated execution requirements discussed in this paper. They provide a high-level discussion on how rollback dependency can be handled if spheres of control <ref> [8] </ref> are available in a system. Also, none of the above discuss the race conditions created due to failures along parallel threads of execution within a workflow.
Reference: [9] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing Long-running Activities with Triggers and Transactions. </title> <booktitle> In Proceedings of ACM SIGMOD 1990 International Conference on Management of Data, </booktitle> <pages> pages 204-214, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Later several extended transaction models were proposed [11] and formalisms/languages/environments developed to realized extended transaction models. Notably, work on long running activities <ref> [9] </ref>, ConTracts [24], inter-task (inter-step) dependencies [7,4], and customized transaction models (TSME) [14] have all focussed primarily on coordinating sub-transactions based on the significant events like begin, commit, abort of sub-transactions. They all assume access to the various transaction managers to get transaction related information.
Reference: [10] <author> J. Eder and W. Liebhart. </author> <title> The workflow activity model wamo. </title> <booktitle> In Proceedings of 3rd Intl Conference on Cooperative Information Systems, </booktitle> <address> Vienna, Austria, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: A detailed discussion on how concepts from advanced transaction models such as sagas and flex transactions can be used to handle workflow step failures is provided in [2]. Another transaction oriented approach for handling workflow exceptions is presented in <ref> [10] </ref>. A three layer error model for exception handling in the METEOR system is presented in [25] for handling exceptions where different corrective action is taken depending on the specific reason of failure.
Reference: [11] <editor> A. Elmagarmid, editor. </editor> <title> Transaction Models for Advanced Database Applications. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The data input to step S8 may be incorrect since the two threads flowing into step S8 used information from different executions of step S2. Hence, the interaction of forward execution and rollbacks within a workflow can cause data inconsistencies. This problem is relevant to customized transaction models <ref> [11] </ref> as well. 4 Overview of Our Approach In this section we briefly describe the CREW approach to handle the different problems we motivated in the previous section. Details of our approach are presented in the rest of the sections of the paper. <p> Additional details of the implementation can be found in [18]. 8 Related Work Sagas [12] was one of the first proposals to integrate several transactional activities into a large application. Later several extended transaction models were proposed <ref> [11] </ref> and formalisms/languages/environments developed to realized extended transaction models. Notably, work on long running activities [9], ConTracts [24], inter-task (inter-step) dependencies [7,4], and customized transaction models (TSME) [14] have all focussed primarily on coordinating sub-transactions based on the significant events like begin, commit, abort of sub-transactions.
Reference: [12] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proc. 1987 SIG-MOD International Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: If it has a dependency with respect to step S5 then S3 has to be compensated before the execution of step S5. These are complex rollback and compensation requirements and providing a default semantics is not enough. Hence the extended transaction model (say, Sagas <ref> [12] </ref>) based approach requiring the compensation of all previously executed steps and aborting the workflow may be impractical in several scenarios. Also since the steps of workflows are often loosely related it is not necessary to always compensate the steps in the reverse execution order. <p> The CREW environment contains nodes of heterogeneous architectures. To achieve total portability the LAWS compiler and a subset of CREW run-time environment have been implemented using the Java programming language. Additional details of the implementation can be found in [18]. 8 Related Work Sagas <ref> [12] </ref> was one of the first proposals to integrate several transactional activities into a large application. Later several extended transaction models were proposed [11] and formalisms/languages/environments developed to realized extended transaction models.
Reference: [13] <author> D. Georgakopolous, M. Hornick, and A. Sheth. </author> <title> An Overview of Workflow Management: From Process Modelling to Work-flow Automation Infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 119-152, </pages> <year> 1995. </year>
Reference: [14] <author> D. Georgakopoulos, M. F. Hornick, and F. Manola. </author> <title> Customizing Transaction Models and Mechanisms in a Programmable Environment Supporting Reliable Workflow Automation. </title> <journal> IEEE Trans. on Knowledge and Data Eng., </journal> <year> 1995. </year>
Reference-contexts: Later several extended transaction models were proposed [11] and formalisms/languages/environments developed to realized extended transaction models. Notably, work on long running activities [9], ConTracts [24], inter-task (inter-step) dependencies [7,4], and customized transaction models (TSME) <ref> [14] </ref> have all focussed primarily on coordinating sub-transactions based on the significant events like begin, commit, abort of sub-transactions. They all assume access to the various transaction managers to get transaction related information. This is not the case in workflow environments which attempt to integrate independently developed applications.
Reference: [15] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: But building a system for maintaining spheres of control is not an easy task <ref> [15] </ref>.
Reference: [16] <author> D. Hollingsworth. </author> <title> Workflow Management Reference Model, 1994. The Workflow Management Coalition, </title> <note> Accessible via: http://www.aiai.ed.ac.uk/WfMC/. </note>
Reference-contexts: Compile-time actions are discussed in Section 6 and run-time support is discussed in Section 7. Related work is discussed in Section 8 and Section 9 summarizes the paper and discusses future work. 2 Workflow Management Systems As described by the Workflow Management Coalition (WfMC) <ref> [16] </ref>, a WFMS consists mainly of a workflow engine and application agents. In addition, there are other components for modeling, administration and monitoring. The workflow engine and the tools communicate with a workflow database (WFDB) to store and update workflow state data.
Reference: [17] <author> M. </author> <title> Hsu. </title> <journal> Special Issue on Workflow Systems. Bulletin of the Technical Committee on Data Engineering, IEEE, </journal> <volume> 18(1), </volume> <year> 1995. </year>
Reference: [18] <author> M. Kamath. </author> <title> Improving Correctness And Failure Handling In Workflow Management Systems. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Massachusetts, </institution> <month> February </month> <year> 1998. </year>
Reference-contexts: The compilation process that translates these requirements into lower level implementation primitives is described in section 6. Additional details of implementation of the low level primitives is provided in section 7. Additional details of the techniques presented in this paper can be found in <ref> [18] </ref>. 5 Language Support In this section, we describe the different components of LAWS ( LAnguage for Workflow Specification). <p> Techniques to automate the specification of conflict dependencies and coordinated execution requirements based on step level information have been suggested elsewhere <ref> [18] </ref>. Note that our strategies have been developed for production (or repetitive) workflows and may need enhancements to handle ad-hoc requirements/changes in workflows. 6 Compile-Time Actions The compiler for LAWS works in two phases. During the first phase, it parses the schema and performs extensive syntax and semantic error checking. <p> Physical messages are exchanged when the instances under consideration are under the control of different engines or agents. A discussion on this can be found in <ref> [18] </ref>. An alternative way to manage rollback dependency is using the spheres of control approach where the database system tracks the dependency between the transactions and determines which other transactions have to be rolledback if a certain transaction rolls back. <p> The CREW environment contains nodes of heterogeneous architectures. To achieve total portability the LAWS compiler and a subset of CREW run-time environment have been implemented using the Java programming language. Additional details of the implementation can be found in <ref> [18] </ref>. 8 Related Work Sagas [12] was one of the first proposals to integrate several transactional activities into a large application. Later several extended transaction models were proposed [11] and formalisms/languages/environments developed to realized extended transaction models. <p> Our work is an important step in this direction. Since centralized workflow control can be a performance bottleneck, we have extended our work to support parallel and distributed workflow control architectures <ref> [18] </ref>. Also, the CREW run-time environment has been extended to implement WorldFlow, a WFMS that can be used to develop Web based electronic commerce workflows. In these workflows, one or more of the steps read/update data directly communicating with Web servers.
Reference: [19] <author> M. Kamath, G. Alonso, R. Gunthor, and C. Mohan. </author> <title> Providing High Availability in Workflow Management Systems. </title> <booktitle> In Proceedings of the Fifth International Conference on Extending Database Technology (EDBT-96), </booktitle> <address> Avi-gnon, France, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Failures can occur in workflow system components and they have to be handled efficiently to improve WFMS availability. Strategies for handling failures of the workflow server are discussed in [3] and for the failure of the workflow database are discussed in <ref> [19] </ref>.
Reference: [20] <author> M. Kamath and K. Ramamritham. </author> <title> Correctness Issues in Work-flow Management. </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 3(4) </volume> <pages> 213-221, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: So far, adequate attention has not been paid to many issues related to fl This material is based upon work supported by the National Science Foundation under grant IRI - 9619588. y Current Address: Oracle Corporation, 500 Oracle Pkwy, Redwood Shores CA 94065 email: mkamath@us.oracle.com correctness <ref> [20] </ref>. To support failure handling and coordinated execution of workflows, as part of the CREW (Correct & Reliable Execution of Workflows) Project at UMass, we have developed the necessary concepts and infrastructure.
Reference: [21] <author> F. Leymann. </author> <title> Supporting Business Transactions via Partial Backward Recovery in Workflow Management. </title> <booktitle> In Proc. of BTW'95, </booktitle> <address> Dresden, Germany, 1995. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Recovering from failures by compensating (reversing the effect of) all the completed steps of a workflow and aborting the workflow may be very conservative and sometimes impractical. Strategies such as spheres of joint compensation <ref> [21] </ref> are geared specifically towards workflow rollbacks but do not deal with the effects of the rollbacks on the re-execution of workflows. Hence an integrated approach is needed to handle workflow rollback and re-execution. <p> The notion of CD sets is different from the notion of spheres of joint compensation <ref> [21] </ref>. The former is used to specify the order of step compensation in the context of our opportunistic compensation and re-execution strategy. The semantics of the latter is that when a step belonging to a sphere fails, immediately all other steps that belong to the sphere are compensated. <p> In contrast, we have developed a uniform set of low level mechanisms to handle different type of coordinated execution requirements by dynamically modifying workflow RuleSets. Handling of logical failures of steps in workflows has received more importance recently. Failure handling of steps is discussed in <ref> [21] </ref> using the notion of spheres of joint compensation. Although it provides a systematic way of partially rolling back a workflow using cascaded rollback of spheres, it does not deal with the interactions between rollback and forward execution of other steps in a workflow.
Reference: [22] <author> C. Mohan. </author> <title> State of the Art in Workflow Management Systems Research and Products, </title> <booktitle> 1996. Tutorial presented at ACM SIG-MOD International Conference on Management of Data, </booktitle> <year> 1996. </year>
Reference: [23] <author> A. Sheth and M. Rusinkiewicz. </author> <title> On Transactional Workflows. </title> <journal> Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: In practice they have found limited applicability since not all steps that make up a workflow are transactions. On the other hand, traditional WFMSs just allow the specification of step level details and data/control flow requirements in a workflow schema. Our approach falls in the category of transactional workflows <ref> [23] </ref> where additional correctness requirements can be specified on top of traditional workflows specifications. These requirements specify additional constraints on workflow execution schedules. To specify how failure handling and coordinated execution is to be performed we provide additional capability in our workflow specification language.
Reference: [24] <author> H. Waechter and A. Reuter. </author> <title> The ConTract Model. </title> <editor> In Ahmed K. Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <booktitle> chapter 7, </booktitle> <pages> pages 219-263. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: Later several extended transaction models were proposed [11] and formalisms/languages/environments developed to realized extended transaction models. Notably, work on long running activities [9], ConTracts <ref> [24] </ref>, inter-task (inter-step) dependencies [7,4], and customized transaction models (TSME) [14] have all focussed primarily on coordinating sub-transactions based on the significant events like begin, commit, abort of sub-transactions. They all assume access to the various transaction managers to get transaction related information.
Reference: [25] <author> D. Worah. </author> <title> Error Handling and Recovery For The ORBWork Workflow Enactment Service in METEOR. </title> <type> Master's project, </type> <institution> University of Georgia, Computer Science Department, </institution> <year> 1997. </year>
Reference-contexts: Another transaction oriented approach for handling workflow exceptions is presented in [10]. A three layer error model for exception handling in the METEOR system is presented in <ref> [25] </ref> for handling exceptions where different corrective action is taken depending on the specific reason of failure. <p> In contrast, our focus has been on generic problems that can occur at the workflow (application) level, focusing on the effect of a step failure on other concurrent steps within the same workflow and across workflows. Hence, the solutions we have developed and in <ref> [25] </ref> complement each other. 9 Conclusions Commercial/prototype WFMSs and current research literature do not adequately address problems arising from interaction between steps executed concurrently both within and across workflows and the presence of failures.
References-found: 25

