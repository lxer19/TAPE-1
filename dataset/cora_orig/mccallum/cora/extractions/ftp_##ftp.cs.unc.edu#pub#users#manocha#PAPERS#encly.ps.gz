URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/encly.ps.gz
Refering-URL: http://www.cs.unc.edu/~lin/papers.html
Root-URL: http://www.cs.unc.edu
Title: APPLIED COMPUTATIONAL GEOMETRY  
Author: Ming C. Lin and Dinesh Manocha 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Cohen, M. Lin, D. Manocha, and M. Ponamgi. I-collide: </author> <title> An interactive and exact collision detection system for large-scale environments. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 189-196, </pages> <year> 1995. </year>
Reference-contexts: The geometric models used in these applications are represented using large number of polygons, curved surfaces (e.g. parametric splines and algebraic surfaces) or deformable models. The goal is to develop efficient and accurate algorithms to compute all contacts between moving objects composed of a large number of primitives. Recently, <ref> [9, 1, 5] </ref> have used techniques from Computational Geometry to develop fast algorithms and systems to accurately compute the contacts between polygonal models in large environments. <p> It checks the axis-aligned bounding boxes for overlap to reduce the number of object pair interactions to only those pairs within close proximity of each other <ref> [1] </ref>. The resulting algorithm exploits spatial and temporal coherence. Its runtime is linear in terms of number of objects and number of object pairs in close proximity.
Reference: [2] <author> J. Cohen, A. Varshney, D. Manocha, and G. Turk et al. </author> <title> Simplification envelopes. </title> <booktitle> In Proc. of ACM Siggraph'96, </booktitle> <pages> pages 119-128, </pages> <year> 1996. </year>
Reference-contexts: Most of these solutions neither 8 guarantee preservation of global topology nor restrict the approximation to be within some error bound of the original solution. Recently, Cohen et al. have utilized techniques from Computational Geometry and proposed the idea of simplification envelopes as a solution to this problem <ref> [2] </ref>. A simplification envelope is a modified version of the well-known offset surfaces in geometric modeling. Given some constant, epsilon, the algorithms generate a simplification envelope by displacing every vertex of the input surface in the direction of its normal vector by a distance less than or equal to epsilon.
Reference: [3] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: Some of the well-studied problems include computing convex hulls, Voronoi regions, triangulation, point location, interference detection, linear programming, arrangements, convex decomposition and randomized algorithms. More information about these problems and algorithms can be found in <ref> [15, 3, 12, 14] </ref>. Despite the wealth and abundance of literature and research in computational geometry, the intended technology transfer to the application areas has been slow and limited.
Reference: [4] <author> B. Chazelle et al. </author> <title> Application challenges to computational geometry: Computational Geometry Impact Task Force Report. </title> <type> Technical Report TR-521-96, </type> <institution> Department of Computer Science, Princeton University, </institution> <year> 1996. </year>
Reference-contexts: Then, we highlight several applications of computational geometry in computer graphics, modeling, robotics, vision, molecular modeling and manufacturing. Finally, we present three case studies of applied computational geometry. More details on these topics can be found in <ref> [4, 10] </ref>. ROBUST COMPUTING Most of the geometric algorithms assume that the input data is in general position and that the existing computing machinery provides reliable exact real number arithmetic.
Reference: [5] <author> S. Gottschalk, M. Lin, and D. Manocha. Obb-tree: </author> <title> A hierarchical structure for rapid interference detection. </title> <booktitle> In Proc. of ACM Siggraph'96, </booktitle> <pages> pages 171-180, </pages> <year> 1996. </year>
Reference-contexts: The geometric models used in these applications are represented using large number of polygons, curved surfaces (e.g. parametric splines and algebraic surfaces) or deformable models. The goal is to develop efficient and accurate algorithms to compute all contacts between moving objects composed of a large number of primitives. Recently, <ref> [9, 1, 5] </ref> have used techniques from Computational Geometry to develop fast algorithms and systems to accurately compute the contacts between polygonal models in large environments.
Reference: [6] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: Geometric and Solid Modeling The fields of geometric and solid modeling deal with representations of curves, surfaces and solids and their manipulation based on geometric operations <ref> [6] </ref>. A number of geometric techniques have been successfully employed for intersection computations, converting from one representation to another, boolean operations (e.g. set-union, intersection and difference), generating linear approximations for higher order primitives, as well as surface fitting.
Reference: [7] <author> S. Kumar. </author> <title> Interactive Rendering of Parametric Spline Surfaces. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of N. Carolina at Chapel Hill, </institution> <year> 1996. </year>
Reference-contexts: This places high demand on computational resources. Recently, Kumar et al. have utilized techniques from Computational Geometry for dynamic tessellation and interactive display of tens of thousands of parametric spline surfaces on current graphics systems <ref> [8, 7] </ref>. The main components of the algorithm are: * Visibility Computations: Use bounds on surface coordinates and normals to determine if a given patch is not visible from the given viewpoint.
Reference: [8] <author> S. Kumar, D. Manocha, and A. Lastra. </author> <title> Interactive display of large scale nurbs models. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 51-58, </pages> <year> 1995. </year>
Reference-contexts: This places high demand on computational resources. Recently, Kumar et al. have utilized techniques from Computational Geometry for dynamic tessellation and interactive display of tens of thousands of parametric spline surfaces on current graphics systems <ref> [8, 7] </ref>. The main components of the algorithm are: * Visibility Computations: Use bounds on surface coordinates and normals to determine if a given patch is not visible from the given viewpoint.
Reference: [9] <author> M.C. Lin. </author> <title> Efficient Collision Detection for Animation and Robotics. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: The geometric models used in these applications are represented using large number of polygons, curved surfaces (e.g. parametric splines and algebraic surfaces) or deformable models. The goal is to develop efficient and accurate algorithms to compute all contacts between moving objects composed of a large number of primitives. Recently, <ref> [9, 1, 5] </ref> have used techniques from Computational Geometry to develop fast algorithms and systems to accurately compute the contacts between polygonal models in large environments.
Reference: [10] <author> M.C. Lin and D. Manocha. </author> <title> Applied Computational Geometry: Towards Geometric Engineering. LNCS State-of-the-Art Survey. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Then, we highlight several applications of computational geometry in computer graphics, modeling, robotics, vision, molecular modeling and manufacturing. Finally, we present three case studies of applied computational geometry. More details on these topics can be found in <ref> [4, 10] </ref>. ROBUST COMPUTING Most of the geometric algorithms assume that the input data is in general position and that the existing computing machinery provides reliable exact real number arithmetic.
Reference: [11] <author> K. Mehlhorn and S. Naher. LEDA: </author> <title> a platform for combinatorial and geometric computing. </title> <journal> Commun. ACM, </journal> <volume> 38 </volume> <pages> 96-102, </pages> <year> 1995. </year>
Reference-contexts: Programs must be correct at all times. This involves handling of geometric degeneracies and numerical problems due to finite precision arithmetic. Many libraries like LEDA <ref> [11] </ref> achieve this goal by developing a robust kernel using exact arithmetic. The kernel consists of underlying geometric routines for line intersections, convex hulls, Voronoi regions, triangulations, boolean operations, etc.
Reference: [12] <author> K. Mulmuley. </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference-contexts: Some of the well-studied problems include computing convex hulls, Voronoi regions, triangulation, point location, interference detection, linear programming, arrangements, convex decomposition and randomized algorithms. More information about these problems and algorithms can be found in <ref> [15, 3, 12, 14] </ref>. Despite the wealth and abundance of literature and research in computational geometry, the intended technology transfer to the application areas has been slow and limited.
Reference: [13] <author> E. Nicolson and R. Fearing. </author> <title> Dynamic simulation of a part-mating problem: Threaded fastener insertion. </title> <booktitle> In Proceedings, IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <pages> pages 30-37, </pages> <year> 1991. </year>
Reference: [14] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: Some of the well-studied problems include computing convex hulls, Voronoi regions, triangulation, point location, interference detection, linear programming, arrangements, convex decomposition and randomized algorithms. More information about these problems and algorithms can be found in <ref> [15, 3, 12, 14] </ref>. Despite the wealth and abundance of literature and research in computational geometry, the intended technology transfer to the application areas has been slow and limited.
Reference: [15] <author> F.P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Some of the well-studied problems include computing convex hulls, Voronoi regions, triangulation, point location, interference detection, linear programming, arrangements, convex decomposition and randomized algorithms. More information about these problems and algorithms can be found in <ref> [15, 3, 12, 14] </ref>. Despite the wealth and abundance of literature and research in computational geometry, the intended technology transfer to the application areas has been slow and limited.
Reference: [16] <author> Peter Schorn. </author> <title> Implementing the XYZ GeoBench: A programming environment for geometric algorithms. In Computational Geometry | Methods, </title> <booktitle> Algorithms and Applications: Proc. Internat. Workshop Comput. Geom. CG '91, volume 553 of Lecture Notes in Computer Science, </booktitle> <pages> pages 187-202. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <month> 14 </month>
Reference-contexts: There has been considerable progress on this front and a number of researchers worldwide have developed libraries as well as efficient and robust implementations of certain geometric algorithms (e.g. convex hulls, triangulation). Several geometric software packages are available in the public domain. A few like XYZ-GeoBench <ref> [16] </ref> have also been used for educational purposes besides research and development. 4 APPLICATIONS Computational geometry has been successfully used in designing efficient algorithms for many problems in different application areas. In this section, we briefly highlight several problems in application areas.
References-found: 16

