URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR461.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Email: g@cs.indiana.edu  
Title: Collective Objects: An Object-Oriented Tool for Collective Operations in Distributed Parallel Computation  
Author: Katarzyna Keahey Dennis Gannon fkksiazek, gannon 
Date: May 6, 1996  
Address: 215 Lindley Hall Bloomington, IN 47401  
Affiliation: Indiana University  
Abstract: This paper describes the collective object, a new abstraction providing support for collective operations common in parallel programming. The collective object is introduced in the context of research aiming to produce a design of a distributed object-oriented environment suitable for parallel computation, and will constitute a part of the object model of this environment. We give a formal definition of the collective object and supporting constructs and conclude with some examples and preliminary results concerning application of the collective object. 
Abstract-found: 1
Intro-found: 1
Reference: [For95] <author> Message Passing Interface Forum, </author> <title> MPI:A Message-Passing Interface Standard, </title> <month> June </month> <year> 1995. </year>
Reference-contexts: Library designers have recognized this problem and efforts have been made to relax the rigidity of fixed library interfaces <ref> [For95] </ref>, but still within the narrow limits of a library. The collective object offers the programmer a flexible tool for developing his or her own collective operations.
Reference: [GK96] <author> Dennis Gannon and Katarzyna Keahey, </author> <title> Distributed parallel environment | a sketch, </title> <booktitle> POOMA '96 Abstracts, </booktitle> <month> February </month> <year> 1996. </year>
Reference: [Gri93] <author> Andrew S. Grimshaw, </author> <title> The Mentat Computation Model Data-Driven Support for Object-Oriented Parallel Processing, </title> <type> Tech. Report CS-93-30, </type> <institution> University of Virginia, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The programmer can decide to cause the return of the out or inout arguments before the method completes its execution by invoking CAreturn on the corresponding argument structure. This mechanism is similar to rtf in Mentat <ref> [Gri93] </ref>. 3.5 Examples This section will present a few examples of programming with the CAs.
Reference: [Hal85] <author> Robert H. Halstead, </author> <title> Multilisp: A Language for Concurrent Symbolic Computation, </title> <journal> ACM Transactions on Programming Languages and Systems 7 (1985), </journal> <volume> no. 4, </volume> <pages> 501-538. </pages>
Reference-contexts: It is useful to associate each client reference in a CA with a semaphore which indicates if a given client has already instantiated its argument value. The association of argument value and semaphore, induced in this way, corresponds to the concept of a future <ref> [Hal85] </ref> and allows the programmer to write non-synchronized collective operations without the need to explicitly check for argument instantiation; any attempt to access non-instantiated argument value will simply cause the CAs to block until the responsible client instantiates that value.
Reference: [HO92] <author> L. Hernquist and J.P. Ostriker, </author> <title> A Self-Consistent Field Method for Galactic Dynamics, </title> <journal> The Astrophysical Journal 386 (1992), </journal> <pages> 375-397. </pages>
Reference-contexts: SCF <ref> [HO92] </ref> simulates the interaction of galaxies by performing N-body computation on their gravitational fields. The computation is data-parallel in character, and in its distributed version it consists of several components distributed over different supercomputers.
Reference: [KGGK94] <author> V. Kumar, A. Grama, A. Gupta, and G. Karypis, </author> <title> Introduction to parallel computing, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: The exchange operation permutes the elements of the in_array according to the key provided in exchange_index (both are in arguments). The results are returned in the out_array (an out argument). This operation can be used for data exchange, for example in the binary-exchange fast Fourier transform <ref> [KGGK94] </ref>. void exchange (CA&lt;array&gt; in_array, CA&lt;array&gt;& out_array, CA&lt;int&gt; exchange_index) - for (int i=0; i&lt;number_of_clients; i++) out_array (i) = in_array (ex_index (i)); out_array.CAreturn (); - 4 Implementation We will consider two implementations of a collective object: a centralized implementation, where the collective object is associated with only one context, understood as a
Reference: [NBB + 96] <author> Michal L. Norman, Peter Beckman, Greg L. Bryan, John Dubinski, Dennis Gannon, Lars Hernquist, Kate Keahey, Jeremiah P. Ostriker, John Shalf, Joel Welling, and Shelby Yang, </author> <title> Galaxies Collide on the I-WAY: An Example of Heterogenous Wide-Area Collaborative Supercomputing, </title> <note> accpted for publication by The International Journal of Supercomputer Applications (1996). </note>
Reference-contexts: semaphores prevents accessing uninstantiated arguments and lets the programmer write code without having to worry about the asynchronous nature of collective entry. 2 Motivation This research grew out of our experiences in distributed parallel programming, in particular the work on the distributed version of the Self Consistent Field (SCF) program <ref> [NBB + 96] </ref> which was part of the I-WAY project presented at SuperComputing '95. SCF [HO92] simulates the interaction of galaxies by performing N-body computation on their gravitational fields. The computation is data-parallel in character, and in its distributed version it consists of several components distributed over different supercomputers. <p> During our experiments with distributed SCF, in the perfectly balanced case, time spent on remote collective operation constituted 15% of total computation <ref> [NBB + 96] </ref>. Additional resources for collective object computations were available, and in fact used.
Reference: [OMG95] <author> OMG, </author> <title> The Common Object Request Broker: Architecture and Specification. Revision 2.0, OMG Document, </title> <month> June </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Challenging object-oriented technology to create interoperability between distributed and heterogeneous modules has lead to the development of the Common Object Request Broker (CORBA) <ref> [OMG95] </ref> standard from The Object Management Group (OMG). The success of CORBA relies on the introduction of an object model which allows the designers of distributed, heterogeneous applications to express their programs completely in terms of object interactions. <p> These signatures are bound by the following relationship: an argument or return type T in the external signature is represented as a CAs referring to T in the internal signature. The CORBA tie mechanism <ref> [OMG95] </ref> can be used to associate the client invocation with the collective method in the general case. Following the CORBA model of argument passing, the collective object supports argument transfer in three modes: in,out and inout.
Reference: [WO95] <author> Gregory Wilson and William O'Farrell, </author> <title> An Introduction to ABC++, 1995, draft. 11 double while to the collective method it appears as CAs referring to type double. </title> <type> 12 </type>
References-found: 9

