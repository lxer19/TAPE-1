URL: ftp://rtcl.eecs.umich.edu/outgoing/ccchou/table94.ps.Z
Refering-URL: http://www.eecs.umich.edu/RTCL/harts/
Root-URL: http://www.cs.umich.edu
Title: A Distributed Table-Driven Route Selection Scheme for Establishing Real-Time Video Channels  
Author: Chih-Che Chou and Kang G. Shin 
Keyword: Index Terms real-time communication, real-time channel, video channels, routing tables, end-to-end communication delay bounds. ICDCS Category Communication Protocols  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Email: Email: fccchou,kgshing@eecs.umich.edu;  
Phone: 313-763-0391 (voice); 313-763-4617 (Fax)  
Date: September 30, 1994  
Abstract: To guarantee the delivery of real-time messages before their deadline, a real-time channel or connection must be established before the transmission of any real-time messages. During this channel-establishment phase, one must first select a route between the source and destination of this channel and then reserve sufficient resources along this route so that the worst-case end-to-end delay over the selected route may not exceed the user-specified delay bound. We propose a table-driven distributed route-selection scheme that is guaranteed to find a "qualified" route, if any, that meets the performance requirement of the requested channel without compromising any of the existing guarantees. The proposed scheme uses the Bellman-Ford shortest path algorithm to build real-time delay tables, and hence, can solve the route-selection problem by a simple table look-up. Several examples are presented to demonstrate the effectiveness of the proposed distributed route-selection scheme. The work described in this paper was supported in part by the Office of Naval Research under Grant N00014-J-92-1080 and the National Science Foundation under Grant MIP-9203895. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the view of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, S. Y. Tzou, R. Wahbe, R. Govindan, and M. Andrews, </author> <title> "Support for continuous media in the dash system," </title> <booktitle> Proc. 10-th Int'l. Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 54-61, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The underlying network is an arbitrary point-to-point network. As in <ref> [1, 7, 10, 11, 15, 18] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded model that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages).
Reference: [2] <author> D. Bertsekas and R. Gallager, </author> <title> Data Networks, </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1987. </year>
Reference-contexts: Basically, the scheme uses the algorithm proposed in [10, 11] to estimate the minimum worst-case response time (MWRT) of a real-time channel over each link of a route under consideration. By using MWRTs, we then applied the Bellman-Ford algorithm <ref> [2, 19] </ref> to solve the distributed route-selection problem. However, this scheme suffers the problem of over-estimating link delays. <p> This channel's MWRT on this link is therefore 6, i.e., the delay of this link is 6 ms. 2 3.2 Building Real-Time Delay Tables Based on the above definition of link delay, we can apply the Bellman-Ford algorithm <ref> [2, 19] </ref> and a loop-free version of the APARNET's previous routing strategy (APRS) [3, 13, 14, 17] to build real-time delay tables on each node.
Reference: [3] <author> C. C. Cheng, S. P. R. Kumar, and J. J. Garcia-Luna-Aceves, </author> <title> "A distributed loop-free routing algorithm suitable for arbitrary link weights," </title> <type> Technical Report CSS-89-05, </type> <institution> Dept. Electrical Engineering and Computer Science, Northwestern Univ., </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: channel's MWRT on this link is therefore 6, i.e., the delay of this link is 6 ms. 2 3.2 Building Real-Time Delay Tables Based on the above definition of link delay, we can apply the Bellman-Ford algorithm [2, 19] and a loop-free version of the APARNET's previous routing strategy (APRS) <ref> [3, 13, 14, 17] </ref> to build real-time delay tables on each node. <p> Thus, for every destination-neighbor pair, the information is kept in a 3-tuple form (destination; neighbor; delay). Other information may be needed for the loop-free version of APRS, but we will not discuss this issue here. (See <ref> [3, 13, 14, 17] </ref> for a detailed account of this.) These 3-tuples are divided into groups based on the destination node. Within a group, they are listed in the ascending order of delay.
Reference: [4] <author> C.-C. Chou and K. G. Shin. </author> <title> Multiplexing Statistical Real-Time Channels on a Multiaccess Network. </title> <note> Submitted for publication. </note>
Reference-contexts: There are basically two approaches to the route-selection problem: centralized or distributed. Most existing channel-establishment schemes are centralized <ref> [4, 5, 9, 10, 16] </ref>. They simply assume the existence of a global network manager which maintains the information about all the established real-time channels, the topology and resource distribution & commitment of the underlying network, and can thus select an appropriate route for each real-time channel requested.
Reference: [5] <author> C.-C. Chou and K. G. Shin. </author> <title> Statistical Real-Time Channels on Multiaccess Networks. </title> <note> Submitted for publication. </note>
Reference-contexts: There are basically two approaches to the route-selection problem: centralized or distributed. Most existing channel-establishment schemes are centralized <ref> [4, 5, 9, 10, 16] </ref>. They simply assume the existence of a global network manager which maintains the information about all the established real-time channels, the topology and resource distribution & commitment of the underlying network, and can thus select an appropriate route for each real-time channel requested.
Reference: [6] <author> C.-C. Chou and K. G. Shin, </author> <title> "Statistical real-time video channels over a multiaccess network," </title> <booktitle> Proc. High-Speed Networking and Multimedia Computing Symposium,IS&T/SPIE Symposium on Electronic Imaging Science and Technology, </booktitle> <month> February </month> <year> 1994. </year>
Reference: [7] <author> R. L. Cruz, </author> <title> A Calculus for Network Delay and a Note on Topologies of Interconnection Networks, </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1987. </year>
Reference-contexts: The underlying network is an arbitrary point-to-point network. As in <ref> [1, 7, 10, 11, 15, 18] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded model that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages).
Reference: [8] <author> D. Ferrari and D. C. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. SAC-8, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 Introduction An increasing number of applications such as interactive video and computer-integrated manufacturing require real-time networking services. Among the several real-time communication protocols proposed thus far to meet this requirement, the communication abstraction called the "real-time channel" <ref> [8] </ref> has received considerable attention due to its conceptual simplicity. A real-time channel is a unidirectional virtual circuit which, once established, is guaranteed to meet user-specified performance requirements as long as the user does not violate his a priori specified traffic-generation characteristics [8]. <p> requirement, the communication abstraction called the "real-time channel" <ref> [8] </ref> has received considerable attention due to its conceptual simplicity. A real-time channel is a unidirectional virtual circuit which, once established, is guaranteed to meet user-specified performance requirements as long as the user does not violate his a priori specified traffic-generation characteristics [8]. There are two distinct phases with the realization of a real-time channel: off-line channel establishment and run-time message scheduling.
Reference: [9] <author> D. D. Kandlur and K. G. Shin, </author> <title> "Design of a communication subsystem for HARTS," </title> <type> Technical Report CSE-TR-109-91, </type> <institution> CSE Division, Department of Electrical Engineering and Computer Science, The University of Michigan, </institution> <year> 1991. </year>
Reference-contexts: There are basically two approaches to the route-selection problem: centralized or distributed. Most existing channel-establishment schemes are centralized <ref> [4, 5, 9, 10, 16] </ref>. They simply assume the existence of a global network manager which maintains the information about all the established real-time channels, the topology and resource distribution & commitment of the underlying network, and can thus select an appropriate route for each real-time channel requested.
Reference: [10] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <booktitle> Proc. 11-th Int'l. Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 300-307, </pages> <year> 1991. </year>
Reference-contexts: There are basically two approaches to the route-selection problem: centralized or distributed. Most existing channel-establishment schemes are centralized <ref> [4, 5, 9, 10, 16] </ref>. They simply assume the existence of a global network manager which maintains the information about all the established real-time channels, the topology and resource distribution & commitment of the underlying network, and can thus select an appropriate route for each real-time channel requested. <p> In a recent paper [15], we have proposed a generic distributed route-selection scheme which is guaranteed to find a qualified route, if any, for each real-time channel-establishment request. Basically, the scheme uses the algorithm proposed in <ref> [10, 11] </ref> to estimate the minimum worst-case response time (MWRT) of a real-time channel over each link of a route under consideration. By using MWRTs, we then applied the Bellman-Ford algorithm [2, 19] to solve the distributed route-selection problem. However, this scheme suffers the problem of over-estimating link delays. <p> The underlying network is an arbitrary point-to-point network. As in <ref> [1, 7, 10, 11, 15, 18] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded model that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages). <p> Based on this message arrival model, the authors of <ref> [10, 11] </ref> proposed a scheme to estimate the worst-case delay on each link and a run-time scheduling algorithm for real-time messages. 1 allowing jitters 5 By adding the worst-case delays of all links that a channel runs through, one can calculate the worst-case end-to-end delivery delay. <p> In addition to the linear bounded model, we further assume that the number of possible combinations of frame-generation rates and maximum-frame sizes is small, since we are only interested in standardized interactive video applications. Based on the link delay calculated with the delay-estimation method in <ref> [10, 11] </ref> and the above assumptions, we will develop a scheme which builds real-time channel delay tables on each node so that a qualified route may be found with a simple table look-up. 3.1 Link-Delay Estimation Since real-time messages are given priority over non real-time ones, we will ignore the effects <p> We will thus assess the delay of a link based only on real-time traffic. Since the algorithm in <ref> [10, 11] </ref> will be used to estimate link delays, we will briefly introduce it first. The goal of the algorithm in [10, 11] is to compute the minimum worst-case delay on a link of each candidate route for a new real-time channel to be added without compromising the performance guarantee of <p> We will thus assess the delay of a link based only on real-time traffic. Since the algorithm in <ref> [10, 11] </ref> will be used to estimate link delays, we will briefly introduce it first. The goal of the algorithm in [10, 11] is to compute the minimum worst-case delay on a link of each candidate route for a new real-time channel to be added without compromising the performance guarantee of any of the existing channels on the link. <p> Note that the inequality d i p i must hold for the algorithm in <ref> [10, 11] </ref> to work correctly. Given a new channel M k+1 = (C k+1 ; p k+1 ) to be established, the authors of [10, 11] proposed an algorithm for computing the minimum worst-case response time (MWRT), r k+1 , on each link of M k+1 's route without compromising the <p> Note that the inequality d i p i must hold for the algorithm in <ref> [10, 11] </ref> to work correctly. Given a new channel M k+1 = (C k+1 ; p k+1 ) to be established, the authors of [10, 11] proposed an algorithm for computing the minimum worst-case response time (MWRT), r k+1 , on each link of M k+1 's route without compromising the performance guarantees of other existing channels. <p> MWRT for a new channel on link ` based on the traffic-generation characteristics (C and p) of the channel, when C (maximum service time for a message), p (minimum message inter-arrival time) and d (maximum permissible delay over link `) for all existing channels are available. 6 The method in <ref> [10, 11] </ref> does not include those channels pending for final confirmation in the calculation of MWRT for the new channel-establishment request, but we will treat pending channels differently in two situations. <p> So, we lower the priority of this new request below channel 1 but above channel 2. With this new priority assignment, no existing guarantees will be violated, because the following schedulability test holds for any channel i whose priority is lower than the requested channel <ref> [10, 11] </ref>. 9t 2 B i = fd i g [ fkp j : j 2 A i ; 0 &lt; k b p j W i (t) = j2A i t e + C i t; where A i is the set of channels (including the requested channel) whose priority <p> As discussed in Example 1, in order to be consistent with the way channel priorities are assigned for the link-delay estimation <ref> [10, 11] </ref>, these entries are placed in ascending order of d values. When the source node wishes to establish a real-time channel to another node, say B, it will try to find the current least-MWRT route by considering the traffic of all existing channels. <p> In such a case, the authors of <ref> [10, 11, 15] </ref> proposed that Dd a be divided evenly into hops parts by the destination node and distributed to all links along the path. <p> However, since this method may make the link-delay deadline unnecessarily small over a link which has small MWRT we will adopt the method proposed in <ref> [10, 11, 15] </ref>.
Reference: [11] <author> D. D. Kandlur, </author> <title> Networking in Distributed Real-Time Systems, </title> <type> PhD thesis, </type> <institution> University of Michi-gan, </institution> <year> 1991. </year>
Reference-contexts: In a recent paper [15], we have proposed a generic distributed route-selection scheme which is guaranteed to find a qualified route, if any, for each real-time channel-establishment request. Basically, the scheme uses the algorithm proposed in <ref> [10, 11] </ref> to estimate the minimum worst-case response time (MWRT) of a real-time channel over each link of a route under consideration. By using MWRTs, we then applied the Bellman-Ford algorithm [2, 19] to solve the distributed route-selection problem. However, this scheme suffers the problem of over-estimating link delays. <p> The underlying network is an arbitrary point-to-point network. As in <ref> [1, 7, 10, 11, 15, 18] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded model that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages). <p> Based on this message arrival model, the authors of <ref> [10, 11] </ref> proposed a scheme to estimate the worst-case delay on each link and a run-time scheduling algorithm for real-time messages. 1 allowing jitters 5 By adding the worst-case delays of all links that a channel runs through, one can calculate the worst-case end-to-end delivery delay. <p> In addition to the linear bounded model, we further assume that the number of possible combinations of frame-generation rates and maximum-frame sizes is small, since we are only interested in standardized interactive video applications. Based on the link delay calculated with the delay-estimation method in <ref> [10, 11] </ref> and the above assumptions, we will develop a scheme which builds real-time channel delay tables on each node so that a qualified route may be found with a simple table look-up. 3.1 Link-Delay Estimation Since real-time messages are given priority over non real-time ones, we will ignore the effects <p> We will thus assess the delay of a link based only on real-time traffic. Since the algorithm in <ref> [10, 11] </ref> will be used to estimate link delays, we will briefly introduce it first. The goal of the algorithm in [10, 11] is to compute the minimum worst-case delay on a link of each candidate route for a new real-time channel to be added without compromising the performance guarantee of <p> We will thus assess the delay of a link based only on real-time traffic. Since the algorithm in <ref> [10, 11] </ref> will be used to estimate link delays, we will briefly introduce it first. The goal of the algorithm in [10, 11] is to compute the minimum worst-case delay on a link of each candidate route for a new real-time channel to be added without compromising the performance guarantee of any of the existing channels on the link. <p> Note that the inequality d i p i must hold for the algorithm in <ref> [10, 11] </ref> to work correctly. Given a new channel M k+1 = (C k+1 ; p k+1 ) to be established, the authors of [10, 11] proposed an algorithm for computing the minimum worst-case response time (MWRT), r k+1 , on each link of M k+1 's route without compromising the <p> Note that the inequality d i p i must hold for the algorithm in <ref> [10, 11] </ref> to work correctly. Given a new channel M k+1 = (C k+1 ; p k+1 ) to be established, the authors of [10, 11] proposed an algorithm for computing the minimum worst-case response time (MWRT), r k+1 , on each link of M k+1 's route without compromising the performance guarantees of other existing channels. <p> MWRT for a new channel on link ` based on the traffic-generation characteristics (C and p) of the channel, when C (maximum service time for a message), p (minimum message inter-arrival time) and d (maximum permissible delay over link `) for all existing channels are available. 6 The method in <ref> [10, 11] </ref> does not include those channels pending for final confirmation in the calculation of MWRT for the new channel-establishment request, but we will treat pending channels differently in two situations. <p> So, we lower the priority of this new request below channel 1 but above channel 2. With this new priority assignment, no existing guarantees will be violated, because the following schedulability test holds for any channel i whose priority is lower than the requested channel <ref> [10, 11] </ref>. 9t 2 B i = fd i g [ fkp j : j 2 A i ; 0 &lt; k b p j W i (t) = j2A i t e + C i t; where A i is the set of channels (including the requested channel) whose priority <p> As discussed in Example 1, in order to be consistent with the way channel priorities are assigned for the link-delay estimation <ref> [10, 11] </ref>, these entries are placed in ascending order of d values. When the source node wishes to establish a real-time channel to another node, say B, it will try to find the current least-MWRT route by considering the traffic of all existing channels. <p> In such a case, the authors of <ref> [10, 11, 15] </ref> proposed that Dd a be divided evenly into hops parts by the destination node and distributed to all links along the path. <p> However, since this method may make the link-delay deadline unnecessarily small over a link which has small MWRT we will adopt the method proposed in <ref> [10, 11, 15] </ref>.
Reference: [12] <author> P. Pancha and M. E. Zarki, </author> <title> "A look at the MPEG video coding standard for variable bit rate video transmission," </title> <booktitle> INFOCOM, </booktitle> <year> 1992. </year>
Reference-contexts: For example, 30 frames per second is the frame rate for live interactive video and the MPEG Video Simulation Model Three (SM3) suggests 352 by 288 pixels per frame for achieving video tape quality <ref> [12] </ref>. Note that a standardized resolution implies a standardized maximum-frame size.
Reference: [13] <author> K. G. Shin and M.-S. Chen, </author> <title> "Performance analysis of distributed routing strategies free of ping-pong-type looping," </title> <journal> IEEE Trans. Comput., </journal> <volume> vol. C-36, no. 7, </volume> <pages> pp. 129-137, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: channel's MWRT on this link is therefore 6, i.e., the delay of this link is 6 ms. 2 3.2 Building Real-Time Delay Tables Based on the above definition of link delay, we can apply the Bellman-Ford algorithm [2, 19] and a loop-free version of the APARNET's previous routing strategy (APRS) <ref> [3, 13, 14, 17] </ref> to build real-time delay tables on each node. <p> Thus, for every destination-neighbor pair, the information is kept in a 3-tuple form (destination; neighbor; delay). Other information may be needed for the loop-free version of APRS, but we will not discuss this issue here. (See <ref> [3, 13, 14, 17] </ref> for a detailed account of this.) These 3-tuples are divided into groups based on the destination node. Within a group, they are listed in the ascending order of delay.
Reference: [14] <author> K. G. Shin and M.-S. Chen, </author> <title> "Minimal order loop-free routing strategy," </title> <journal> IEEE Trans. Comput., </journal> <volume> vol. C-39, no. 5, </volume> <pages> pp. 870-888, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: channel's MWRT on this link is therefore 6, i.e., the delay of this link is 6 ms. 2 3.2 Building Real-Time Delay Tables Based on the above definition of link delay, we can apply the Bellman-Ford algorithm [2, 19] and a loop-free version of the APARNET's previous routing strategy (APRS) <ref> [3, 13, 14, 17] </ref> to build real-time delay tables on each node. <p> Thus, for every destination-neighbor pair, the information is kept in a 3-tuple form (destination; neighbor; delay). Other information may be needed for the loop-free version of APRS, but we will not discuss this issue here. (See <ref> [3, 13, 14, 17] </ref> for a detailed account of this.) These 3-tuples are divided into groups based on the destination node. Within a group, they are listed in the ascending order of delay.
Reference: [15] <author> K. G. Shin and C.-C. Chou. </author> <title> A Distributed Route-Selection Scheme for Establishing Real-Time Channels. </title> <note> Submitted for publication. </note>
Reference-contexts: That is, the distributed approach may reject a channel-establishment request even when it would have been accepted if more routes had been checked. In a recent paper <ref> [15] </ref>, we have proposed a generic distributed route-selection scheme which is guaranteed to find a qualified route, if any, for each real-time channel-establishment request. <p> Another problem with the scheme in <ref> [15] </ref> is that it does not take advantage of the underlying application features, because it was intended for general real-time applications. <p> The first approach, on the other hand, could be very time-consuming for the complete search of all possible routes, and its operational overhead is proportional to K. Considering the advantages and disadvantages of these two approaches, we developed 4 in <ref> [15] </ref> an efficient scheme for selecting a route for each channel-establishment request. <p> The underlying network is an arbitrary point-to-point network. As in <ref> [1, 7, 10, 11, 15, 18] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded model that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages). <p> As will be seen later, because the proposed scheme checks only one least-MWRT route (known thus far) at a time instead of checking all possible routes in parallel (the scheme in <ref> [15] </ref> does this), the over-estimation of MWRT is much less likely to occur. <p> In such a case, the authors of <ref> [10, 11, 15] </ref> proposed that Dd a be divided evenly into hops parts by the destination node and distributed to all links along the path. <p> However, since this method may make the link-delay deadline unnecessarily small over a link which has small MWRT we will adopt the method proposed in <ref> [10, 11, 15] </ref>.
Reference: [16] <author> K. G. Shin and C.-C. Chou, </author> <title> "Design and evaluation of real-time communication for FieldBus based manufacturing systems," </title> <booktitle> 1992 IEEE Local Computer Network Symposium, </booktitle> <pages> pp. 483-492, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: During the channel-establishment phase the system has to select a route between the source and destination of the channel along which sufficient resources can be reserved to meet the user-specified delay and buffer requirements. Although several channel-establishment schemes have been proposed in the literature <ref> [4-6, 8-10, 16] </ref>, very few of them have addressed explicitly (and rigorously) the issue of selecting a route between the source and destination of a channel, despite its importance to the success/failure of channel establishment. <p> There are basically two approaches to the route-selection problem: centralized or distributed. Most existing channel-establishment schemes are centralized <ref> [4, 5, 9, 10, 16] </ref>. They simply assume the existence of a global network manager which maintains the information about all the established real-time channels, the topology and resource distribution & commitment of the underlying network, and can thus select an appropriate route for each real-time channel requested.
Reference: [17] <author> K. G. Shin and C.-C. Chou, </author> <title> "A simple distributed loop-free routing strategy for computer communication networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 4, no. 12, </volume> <pages> pp. 1308-1319, </pages> <month> December </month> <year> 1993. </year> <month> 23 </month>
Reference-contexts: channel's MWRT on this link is therefore 6, i.e., the delay of this link is 6 ms. 2 3.2 Building Real-Time Delay Tables Based on the above definition of link delay, we can apply the Bellman-Ford algorithm [2, 19] and a loop-free version of the APARNET's previous routing strategy (APRS) <ref> [3, 13, 14, 17] </ref> to build real-time delay tables on each node. <p> Thus, for every destination-neighbor pair, the information is kept in a 3-tuple form (destination; neighbor; delay). Other information may be needed for the loop-free version of APRS, but we will not discuss this issue here. (See <ref> [3, 13, 14, 17] </ref> for a detailed account of this.) These 3-tuples are divided into groups based on the destination node. Within a group, they are listed in the ascending order of delay.
Reference: [18] <author> D. C. Verma, </author> <title> Guaranteed Performance Communication in High Speed Networks, </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1991. </year>
Reference-contexts: The underlying network is an arbitrary point-to-point network. As in <ref> [1, 7, 10, 11, 15, 18] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded model that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages).
Reference: [19] <author> J. Walrand, </author> <title> Communication Networks: A First Course, </title> <publisher> Irwin and Aksen Associates, </publisher> <year> 1991. </year> <month> 24 </month>
Reference-contexts: Basically, the scheme uses the algorithm proposed in [10, 11] to estimate the minimum worst-case response time (MWRT) of a real-time channel over each link of a route under consideration. By using MWRTs, we then applied the Bellman-Ford algorithm <ref> [2, 19] </ref> to solve the distributed route-selection problem. However, this scheme suffers the problem of over-estimating link delays. <p> This channel's MWRT on this link is therefore 6, i.e., the delay of this link is 6 ms. 2 3.2 Building Real-Time Delay Tables Based on the above definition of link delay, we can apply the Bellman-Ford algorithm <ref> [2, 19] </ref> and a loop-free version of the APARNET's previous routing strategy (APRS) [3, 13, 14, 17] to build real-time delay tables on each node.
References-found: 19

