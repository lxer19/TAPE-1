URL: http://www.cs.rutgers.edu/~bvickers/672/papers/Jac88.ps.gz
Refering-URL: http://www.cs.rutgers.edu/~bvickers/672/schedule.html
Root-URL: http://www.cs.rutgers.edu
Title: Congestion Avoidance and Control  
Author: Van Jacobson Michael J. Karels 
Date: November, 1988  
Affiliation: Lawrence Berkeley Laboratory  University of California at Berkeley  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aldous, D. J. </author> <title> Ultimate instability of exponential back-off protocol for acknowledgment based transmission control of random access communication channels. </title> <journal> IEEE Transactions on Information Theory IT-33, </journal> <month> 2 (Mar. </month> <year> 1987). </year>
Reference-contexts: Justifying exponential retransmit backoff is the same as showing that no collision backoff slower than an exponential will guarantee stability on an Ethernet. Unfortunately, with an infinite user population even exponential backoff won't guarantee stability (although it `almost' does|see <ref> [1] </ref>).
Reference: [2] <author> Borrelli, R., and Coleman, C. </author> <title> Differential Equations. </title> <publisher> Prentice-Hall Inc., </publisher> <year> 1987. </year>
Reference-contexts: A constant function trivially meets the conditions for Lyapunov stability so the system is stable and any superposition of such systems is stable. (See <ref> [2] </ref>, chap. 11-12 or [20], chap. 9 for excellent introductions to system stability theory.) 2 Slow-start is quite similar to the cute algorithm described in [13]. We didn't know about cute at the time we were developing slow-start but we should have|cute preceded our work by several months.
Reference: [3] <author> Chiu, D.-M., and Jain, R. </author> <title> Networks with a connec-tionless network layer; part iii: Analysis of the increase and decrease algorithms. </title> <type> Tech. Rep. </type> <institution> DEC-TR-509, Digital Equipment Corporation, Stanford, </institution> <address> CA, </address> <month> Aug. </month> <year> 1987. </year>
Reference-contexts: But, because both congestion avoidance and slow-start are triggered by a timeout and both manipulate the congestion window, they are frequently confused. They are actually independent algorithms with completely different objectives. To emphasize the difference, the two algorithms 11 See <ref> [3] </ref> for a complete analysis of these increase and decrease policies. Also see [7] and [8] for a control-theoretic analysis of a similar class of control policies. 12 This increment rule may be less than obvious.
Reference: [4] <author> Clark, D. </author> <title> Window and Acknowlegement Strategy in TCP. Arpanet Working Group Requests for Comment, DDN Network Information Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, </address> <month> July </month> <year> 1982. </year> <month> RFC-813. </month>
Reference-contexts: Once the R estimate is updated, the retransmit timeout interval, rto, for the next packet sent is set to fiR . The parameter fi accounts for rtt variation (see <ref> [4] </ref>, section 5). The suggested fi = 2 can adapt to loads of at most 30%. Above this point, a connection will respond to load increases by retransmitting packets that have only been delayed in transit. <p> To make the algorithm `self-clocked', it's better to increment by a small amount on each ack rather than by a large amount at the end of the interval. (Assuming, of course, the sender has effective silly window avoidance (see <ref> [4] </ref>, section 3) and doesn't attempt to send packet fragments because of the fractionally sized window.) A window of size cwnd packets will generate at most cwnd acks in one R .
Reference: [5] <author> Edge, S. W. </author> <title> An adaptive timeout algorithm for retransmission across a packet switching network. </title> <booktitle> In Proceedings of SIGCOMM '83 (Mar. 1983), ACM. </booktitle>
Reference-contexts: See, for example, <ref> [5] </ref>.
Reference: [6] <author> Feller, W. </author> <title> Probability Theory and its Applications, second ed., vol. II. </title> <publisher> John Wiley & Sons, </publisher> <year> 1971. </year>
Reference-contexts: Without Jeff's interest and patient prodding, this paper would never have existed. 15 These problems stem from the fact that the average time between regeneration points scales like (1 ) 1 and the variance like (1 ) 3 (see Feller <ref> [6] </ref>, chap. VI.9).
Reference: [7] <author> Hajek, B. </author> <title> Stochastic approximation methods for decentralized control of multiaccess communications. </title> <journal> IEEE Transactions on Information Theory IT-31, </journal> <month> 2 (Mar. </month> <year> 1985). </year>
Reference-contexts: That is, it is composed of elements that behave like linear operators | integrators, delays, gain stages, etc. Linear system theory says that if a system is stable, the stability is exponential. This suggests that an unstable system (a network subject 4 See <ref> [7] </ref>. Several authors have shown that backoffs `slower' than exponential are stable given finite populations and knowledge of the global traffic. However, [16] shows that nothing slower than exponential behavior will work in the general case. <p> They are actually independent algorithms with completely different objectives. To emphasize the difference, the two algorithms 11 See [3] for a complete analysis of these increase and decrease policies. Also see <ref> [7] </ref> and [8] for a control-theoretic analysis of a similar class of control policies. 12 This increment rule may be less than obvious. We want to increase the window by at most one packet over a time interval of length R (the round trip time).
Reference: [8] <author> Hajek, B., and Van Loon, T. </author> <title> Decentralized dynamic control of a multiaccess broadcast channel. </title> <journal> IEEE Transactions on Automatic Control AC-27, </journal> <month> 3 (June </month> <year> 1982). </year>
Reference-contexts: They are actually independent algorithms with completely different objectives. To emphasize the difference, the two algorithms 11 See [3] for a complete analysis of these increase and decrease policies. Also see [7] and <ref> [8] </ref> for a control-theoretic analysis of a similar class of control policies. 12 This increment rule may be less than obvious. We want to increase the window by at most one packet over a time interval of length R (the round trip time).
Reference: [9] <institution> Proceedings of the Sixth Internet Engineering Task Force (Boston, </institution> <address> MA, </address> <month> Apr. </month> <year> 1987). </year> <note> Proceedings available as NIC document IETF-87/2P from DDN Network Information Center, </note> <institution> SRI International, </institution> <address> Menlo Park, CA. </address>
Reference-contexts: If experience shows this sensitivity to be a liability, a trivial modification to the algorithm makes it linear in w . An in-progress paper explores this subject in detail. 7 This is not an accident: We copied Jain's scheme after hearing his presentation at <ref> [9] </ref> and realizing that the scheme was, in a sense, universal. 8 See any good control theory text for the relationship between a system model and admissible controls for that system. A nice introduction appears in [20], chap. 8.
Reference: [10] <author> International Organization for Standardization. </author> <title> ISO International Standard 8473, Information Processing Systems | Open Systems Interconnection | Connectionless-mode Network Service Protocol Specification, </title> <month> Mar. </month> <year> 1986. </year> <note> REFERENCES 21 </note>
Reference-contexts: Although a factor of two change in window size seems a large performance penalty, in system terms the cost is negligible: Currently, packets are dropped only when a large queue has formed. Even with the ISO IP `congestion experienced' bit <ref> [10] </ref> to force senders to reduce their windows, we're stuck with the queue because the bottleneck is running at 100% utilization with no excess bandwidth available to dissipate the queue. If a packet is tossed, some sender shuts up for two rtt, exactly the time needed to empty the queue.
Reference: [11] <author> Jacobson, V. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of SIGCOMM '88 (Stanford, </booktitle> <address> CA, </address> <month> Aug. </month> <year> 1988), </year> <note> ACM. </note>
Reference-contexts: The answer to both of these questions was "yes". fl Note: This is a very slightly revised version of a paper originally presented at SIGCOMM '88 <ref> [11] </ref>. If you wish to reference this work, please cite [11]. y This work was supported in part by the U.S. Department of Energy under Contract Number DE-AC03-76SF00098. z This work was supported by the U.S. Department of Commerce, Na tional Bureau of Standards, under Grant Number 60NANB8D0830. <p> The answer to both of these questions was "yes". fl Note: This is a very slightly revised version of a paper originally presented at SIGCOMM '88 <ref> [11] </ref>. If you wish to reference this work, please cite [11]. y This work was supported in part by the U.S. Department of Energy under Contract Number DE-AC03-76SF00098. z This work was supported by the U.S. Department of Commerce, Na tional Bureau of Standards, under Grant Number 60NANB8D0830.
Reference: [12] <author> Jain, R. </author> <title> Divergence of timeout algorithms for packet retransmissions. </title> <booktitle> In Proceedings Fifth Annual International Phoenix Conference on Computers and Communications (Scottsdale, </booktitle> <address> AZ, </address> <month> Mar. </month> <year> 1986). </year>
Reference-contexts: A good round trip time estimator, the core of the retransmit timer, is the single most important feature of any protocol implementation that expects to survive heavy load. And it is frequently botched ([26] and <ref> [12] </ref> describe typical problems). One mistake is not estimating the variation, R , of the round trip time, R . From queuing theory we know that R and the variation in R increase quickly with load.
Reference: [13] <author> Jain, R. </author> <title> A timeout-based congestion control scheme for window flow-controlled networks. </title> <journal> IEEE Journal on Selected Areas in Communications SAC-4, </journal> <month> 7 (Oct. </month> <year> 1986). </year>
Reference-contexts: A constant function trivially meets the conditions for Lyapunov stability so the system is stable and any superposition of such systems is stable. (See [2], chap. 11-12 or [20], chap. 9 for excellent introductions to system stability theory.) 2 Slow-start is quite similar to the cute algorithm described in <ref> [13] </ref>. We didn't know about cute at the time we were developing slow-start but we should have|cute preceded our work by several months.
Reference: [14] <author> Jain, R., Ramakrishnan, K., and Chiu, D.-M. </author> <title> Congestion avoidance in computer networks with a con-nectionless network layer. </title> <type> Tech. Rep. </type> <institution> DEC-TR-506, Digital Equipment Corporation, </institution> <month> Aug. </month> <year> 1987. </year>
Reference-contexts: If the pre-loss size is w , equilibration takes roughly w 2 =3 packets so, for the 3 ADAPTING TO THE PATH: CONGESTION AVOIDANCE 5 A `congestion avoidance' strategy, such as the one proposed in <ref> [14] </ref>, will have two components: The network must be able to signal the transport endpoints that congestion is occurring (or about to occur). And the endpoints must have a policy that decreases utilization if this signal is received and increases utilization if the signal isn't received. <p> If packet loss is (almost) always due to congestion and if a timeout is (almost) always due to a lost packet, we have a good candidate for the `network is congested' signal. Particularly since this signal is delivered automatically by all existing networks, without special modification (as opposed to <ref> [14] </ref> which requires a new bit in the packet headers and a modification to all existing gateways to set this bit). <p> This is the additive increase / multiplicative decrease policy suggested in <ref> [14] </ref> and the policy we've implemented in tcp. The only difference between the two implementations is the choice of constants for d and u. We used 0.5 and 1 for reasons partially explained in appendix D. A more complete analysis is in yet another in-progress paper. <p> If detected early, small adjustments to the senders' windows will cure it. Otherwise massive adjustments are necessary to give the net enough spare capacity to pump out the backlog. But, given the bursty nature of traffic, reliable detection is a non-trivial problem. Jain <ref> [14] </ref> proposes a scheme based on averaging between queue regeneration points. <p> REFERENCES 20 D Window Adjustment Policy A reason for using 1 2 as a the decrease term, as opposed to the 7 8 in <ref> [14] </ref>, was the following handwaving: When a packet is dropped, you're either starting (or restarting after a drop) or steady-state sending. If you're starting, you know that half the current window size `worked', i.e., that a window's worth of packets were exchanged with no drops (slow-start guarantees this). <p> This yields 1 packet increments for a 1% average drop rate. But, since we've done nothing in the gateways, the window we converge to is the maximum the gateway can accept without dropping packets. I.e., in the terms of <ref> [14] </ref>, we are just to the left of the cliff rather than just to the right of the knee.
Reference: [15] <author> Karn, P., and Partridge, C. </author> <title> Estimating round-trip times in reliable transport protocols. </title> <booktitle> In Proceedings of SIGCOMM '87 (Aug. 1987), ACM. </booktitle>
Reference-contexts: This paper is a brief description of (i) - (v) and the rationale behind them. (vi) is an algorithm recently developed by Phil Karn of Bell Communications Research, described in <ref> [15] </ref>. (vii) is described in a soon-to-be-published RFC (Arpanet "Request for Comments"). Algorithms (i) - (v) spring from one observation: The flow on a tcp connection (or iso tp-4 or Xerox ns spp connection) should obey a `conservation of packets' principle.
Reference: [16] <author> Kelly, F. P. </author> <title> Stochastic models of computer communication systems. </title> <journal> Journal of the Royal Statistical Society B 47, </journal> <volume> 3 (1985), </volume> <pages> 379-395. </pages>
Reference-contexts: Linear system theory says that if a system is stable, the stability is exponential. This suggests that an unstable system (a network subject 4 See [7]. Several authors have shown that backoffs `slower' than exponential are stable given finite populations and knowledge of the global traffic. However, <ref> [16] </ref> shows that nothing slower than exponential behavior will work in the general case. To feed your intuition, consider that an IP gateway has essentially the same behavior as the `ether' in an ALOHA net or Ethernet.
Reference: [17] <author> Kleinrock, L. </author> <title> Queueing Systems, vol. II. </title> <publisher> John Wiley & Sons, </publisher> <year> 1976. </year>
Reference-contexts: This is a mistake. The result will oscillate wildly and, on the average, deliver poor throughput. The analytic reason for this has to do with that fact that it is easy to drive the net into saturation but hard for the net to recover (what <ref> [17] </ref>, chap. 2.1, calls the rush-hour effect). 10 Thus 9 I.e., the system behaves like L i flL i1 , a difference equation with the solution L n = fl n L 0 which goes exponentially to infinity for any fl &gt; 1. 10 In fig. 1, note that the `pipesize'
Reference: [18] <author> Kline, C. </author> <title> Supercomputers on the Internet: A case study. </title> <booktitle> In Proceedings of SIGCOMM '87 (Aug. 1987), ACM. </booktitle>
Reference-contexts: But subtracting a constant amount from interval does not result in an additive increase in bandwidth. This approach has been tried, e.g., <ref> [18] </ref> and [24], and appears to oscillate badly. To see why, note that for an inter-packet interval I and decrement c, the bandwidth change of a decrease-interval-by-constant policy is I 1 a non-linear, and destablizing, increase.
Reference: [19] <author> Ljung, L., and S oderstr om, T. </author> <title> Theory and Practice of Recursive Identification. </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference-contexts: In the past 20 years these algorithms have revolutionized estimation and control theory <ref> [19] </ref> and it's probably worth looking at the RFC793 estimator in some detail.
Reference: [20] <author> Luenberger, D. G. </author> <title> Introduction to Dynamic Systems. </title> <publisher> John Wiley & Sons, </publisher> <year> 1979. </year>
Reference-contexts: A constant function trivially meets the conditions for Lyapunov stability so the system is stable and any superposition of such systems is stable. (See [2], chap. 11-12 or <ref> [20] </ref>, chap. 9 for excellent introductions to system stability theory.) 2 Slow-start is quite similar to the cute algorithm described in [13]. We didn't know about cute at the time we were developing slow-start but we should have|cute preceded our work by several months. <p> A nice introduction appears in <ref> [20] </ref>, chap. 8. When the network is congested, fl must be large and the queue lengths will start increasing exponentially. 9 The system will stabilize only if the traffic sources throttle back at least as quickly as the queues are growing.
Reference: [21] <author> Mills, D. </author> <title> Internet Delay Experiments. Arpanet Working Group Requests for Comment, DDN Network Information Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, </address> <month> Dec. </month> <year> 1983. </year> <month> RFC-889. </month>
Reference-contexts: the absolute value in the calculation of v introduces an asymmetry in the timer: Because v has the same sign as an increase and the opposite sign of a decrease, more gain in v makes the timer go up quickly and come down slowly, `automatically' giving the behavior suggested in <ref> [21] </ref>. E.g., see the region between packets 50 and 80 in figure 6. B The combined slow-start with congestion avoidance algorithm The sender keeps two state variables for congestion control: a slow-start/congestion window, cwnd, and a threshold size, ssthresh, to switch between the two algorithms.
Reference: [22] <author> Nagle, J. </author> <title> Congestion Control in IP/TCP Internet-works. Arpanet Working Group Requests for Comment, DDN Network Information Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, </address> <month> Jan. </month> <year> 1984. </year> <month> RFC-896. </month>
Reference-contexts: avoidance If the timers are in good shape, it is possible to state with some confidence that a timeout indicates a lost packet and not 5 The phrase congestion collapse (describing a positive feedback instability due to poor retransmit timers) is again the coinage of John Nagle, this time from <ref> [22] </ref>. a broken timer. At this point, something can be done about (3). Packets get lost for two reasons: they are damaged in transit, or the network is congested and somewhere on the path there was insufficient buffer capacity.
Reference: [23] <author> Postel, J., Ed. </author> <title> Transmission Control Protocol Specification. </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, </address> <month> Sept. </month> <year> 1981. </year> <month> RFC-793. </month>
Reference-contexts: To make this concrete, if the network is running at 75% of capacity, as the Arpanet was in last April's collapse, one should expect round-trip-time to vary by a factor of sixteen ( 2 to +2 ). The tcp protocol specification <ref> [23] </ref> suggests estimating mean round trip time via the low-pass filter R ffR + (1 ff)M where R is the average rtt estimate, M is a round trip time measurement from the most recently acked data packet, and ff is a filter gain constant with a suggested value of 0.9.
Reference: [24] <author> Prue, W., and Postel, J. </author> <title> Something A Host Could Do with Source Quench. Arpanet Working Group Requests for Comment, DDN Network Information Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, </address> <month> July </month> <year> 1987. </year> <month> RFC-1016. </month>
Reference-contexts: But subtracting a constant amount from interval does not result in an additive increase in bandwidth. This approach has been tried, e.g., [18] and <ref> [24] </ref>, and appears to oscillate badly. To see why, note that for an inter-packet interval I and decrement c, the bandwidth change of a decrease-interval-by-constant policy is I 1 a non-linear, and destablizing, increase.
Reference: [25] <author> Romkey, J. </author> <title> A Nonstandard for Transmission of IP Datagrams Over Serial Lines: </title> <type> Slip. </type> <institution> Arpanet Working Group Requests for Comment, DDN Network Information Center, SRI International, </institution> <address> Menlo Park, CA, </address> <month> June </month> <year> 1988. </year> <month> RFC-1055. </month>
Reference-contexts: In reasonable tcp implementations, existing silly-window avoidance code should prevent runt packets but this point should be carefully checked. C Window adjustment interaction with round-trip timing Some tcp connections, particularly those over a very low speed link such as a dial-up SLIP line <ref> [25] </ref>, may experience 19 For tcp this happens automatically since windows are expressed in bytes, not packets.
Reference: [26] <author> Zhang, L. </author> <title> Why TCP timers don't work well. </title> <booktitle> In Proceedings of SIGCOMM '86 (Aug. 1986), ACM. </booktitle>
References-found: 26

