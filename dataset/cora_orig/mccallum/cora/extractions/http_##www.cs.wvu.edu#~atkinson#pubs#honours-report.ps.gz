URL: http://www.cs.wvu.edu/~atkinson/pubs/honours-report.ps.gz
Refering-URL: http://www.cs.wvu.edu/~atkinson/publications.html
Root-URL: http://www.cs.wvu.edu
Title: An Open Architecture Object Store System for Persistent Abstract Syntax Trees 1  
Author: Steve Atkinson Supervisor: Dr Paul A. Bailes 
Note: 1 Project  
Date: November 8, 1993  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Chikofsky, </author> <title> Reverse Engineering and Design Recovery: A Taxonomy, </title> <booktitle> IEEE Software Jan 1990. </booktitle>
Reference-contexts: : : : : : : : : : : : : : 42 4.5 Generated Refine AST Source : : : : : : : : : : : : : : : : : : : : : 43 6 Preface Researchers in the field of software re-engineering <ref> [1] </ref> have recognised that transformations acting upon the abstract syntax trees of source programs are a useful method of preserving the semantics of program constructs whilst changing the language in which they are expressed.
Reference: [2] <author> P. A. Bailes, M. Chilvers, I. Peake, </author> <title> A Generic, Knowledge-Based Re-Engineering Architecture </title>
Reference-contexts: Any re-engineering environment that is to support the notion of source to source translation through abstract syntax tree transformations requires a mechanism to extend the lifetime of abstract syntax tree structures beyond the time of a single interactive session <ref> [2] </ref>. At the same time, the choice of such a mechanism must not unnecessarily constrain the ways in which the abstract syntax trees can be manipulated. Realization of long-term persistent abstract syntax trees can be achieved using object store technology.
Reference: [3] <author> OBST, </author> <title> The OBject system of STONE, A Persistent Object Management System, developed as part of The STONE Project at Forschungszentrum Infor-matik, </title> <note> available from ftp.fzi.de:/pub/OBST </note>
Reference-contexts: Realization of long-term persistent abstract syntax trees can be achieved using object store technology. An object store is a persistent collection of concrete objects which arise from using an object oriented programming environment. Basic features of object stores that exist today (e.g. OBST <ref> [3] </ref>, The Software Refinery 1 ) include abilities to store, browse and retrieve persistent objects. However, these object stores have one major deficiency: they cannot be easily used in conjunction with more than one programming language.
Reference: [4] <author> Steve Atkinson, </author> <title> A Browser for the OOS Object Store System, CS423 Project Report, </title> <year> 1993. </year>
Reference-contexts: The details of this browser system are available in <ref> [4] </ref> 9 For example, consider the following simple domain model specification in Refine, and its corresponding UFS realization. This simple class hierarchy can be modelled in the UFS as shown in Figure 1.1. <p> The execution of the OOSH file will create a domain hierarchy in the H part of the current OOS world. Figure 4.1 shows a browser screenshot of the domain hierarchy created. This screenshot was taken from the OOS browser which has been developed 40 (see <ref> [4] </ref>). This completes all the steps necessary for Joe to communicate the domain model from The Software Refinery to OOS. Now Joe proceeds in the same manner for the abstract syntax tree object instances he parsed into the Refine object base. <p> The execution of the OOSH file of Figure 4.3 will create a AST hierarchy in the H part of the current OOS world. Figure 4.1 shows a browser screenshot of the AST hierarchy created. This screenshot was taken from the OOS browser which has been developed (see <ref> [4] </ref>). <p> Object-Z has class and object entities, and these could be modelled in the UFS in a similar manner to abstract syntax trees. The ability to use the browser (see <ref> [4] </ref>) to browse the specification structure is the main motivation behind this idea the other motivation is that eventually OOS may be able to simulate refinement through transforms of the specifications using OOS as a platform. * further two-way communication bindings with other useful language processing systems besides The Software Refinery
Reference: [5] <author> Bertrand Meyer, </author> <title> Object-oriented software construction, </title> <publisher> Prentice Hall International Series in Computer Science, </publisher> <year> 1988 </year> <month> 46 </month>
Reference-contexts: 2 This section talks about objects in general however the primary use of the system described is storage of abstract syntax objects. 10 1.4.1 Objects in the UFS An object can be modelled in the UFS using the following three rules of correspon dence between the notion of an object <ref> [5] </ref> and the UFS: 1. each object corresponds to a directory; 2. each file name in a directory corresponds to the defined attributes of the object to which that directory corresponds; 3. the contents of the files in a directory correspond to the values of the attributes to which the file
References-found: 5

