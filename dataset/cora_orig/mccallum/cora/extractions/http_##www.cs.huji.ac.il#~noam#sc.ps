URL: http://www.cs.huji.ac.il/~noam/sc.ps
Refering-URL: http://www.cs.huji.ac.il/~noam/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: RL SC  
Author: Noam Nisan 
Date: March 1, 1995  
Abstract: We show that any randomized Logspace algorithm (running in polynomial time, with bounded two-sided error) can be simulated deterministically in polynomial time and O(log 2 n) space. This puts RL in SC, "Steve's Class". In particular, we get a polynomial time O(log 2 n) space algorithm for the st-connectivity problem on undirected graphs.
Abstract-found: 1
Intro-found: 1
Reference: [AKL*79] <author> R. Aleliunas, R.M. Karp, R.J. Lipton, L. Lovasz, and C. Rack-off. </author> <title> Random walks, universal sequences and the complexity of maze problems. </title> <booktitle> In 20 th Annual Symposium on Foundations of Computer Science, </booktitle> <address> San Juan, Puerto Rico, </address> <year> 1979. </year>
Reference-contexts: It is a long standing open problem whether there exists an algorithm for st-connectivity that combines both features: runs in polynomial time and poly-logarithmic space. For st-connectivity in undirected graphs two more types of algorithms are known. In <ref> [AKL*79] </ref> a randomized Logspace (and polynomial time) algorithm is given. A zero-error version of this type of algorithm is given in [BCD*89]. <p> Unfortunately, the running time of the algorithm is a high order polynomial (something like n 45 ). We do not know how to improve the running time significantly. The algorithm is obtained by derandomizing the randomized algorithm of <ref> [AKL*79] </ref>. In fact, the derandomization result is very general. We prove that any problem that can be computed in randomized Logspace has a deterministic algorithm that runs in polynomial time and O (log 2 n) space. <p> of Q (U t 0 ) corresponding to rows of the form &lt; j; 0 &gt; and columns of the form &lt; j; t &gt; gives exactly the matrix A desired. 2 Proof: (of theorem 1): This follows directly from theorem 2, and the fact that st-connectivity is in RL <ref> [AKL*79] </ref>. 2 4 The Simulation 4.1 The Generator Our simulation uses the pseudorandom generator of [Nis92].
Reference: [BR91] <author> G. Barnes, and W.L. Ruzzo. </author> <title> Deterministic algorithms for undi-rected s t connectivity using polynomial time and sublinear space. </title> <booktitle> In Proceedings of the 23 st Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1991. </year>
Reference-contexts: For st-connectivity in undirected graphs two more types of algorithms are known. In [AKL*79] a randomized Logspace (and polynomial time) algorithm is given. A zero-error version of this type of algorithm is given in [BCD*89]. As for deterministic algorithms, Barnes and Ruzzo <ref> [BR91] </ref> recently presented an algorithm for undirected st-connectivity that runs in polynomial time and n * space (for any fixed * &gt; 0). fl Dept. of CS, Hebrew University, Jerusalem.
Reference: [BCD*89] <author> A. Borodin, S.A. Cook, P.W. Dymond, W.L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM J. Comput., </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <year> 1989. </year>
Reference-contexts: For st-connectivity in undirected graphs two more types of algorithms are known. In [AKL*79] a randomized Logspace (and polynomial time) algorithm is given. A zero-error version of this type of algorithm is given in <ref> [BCD*89] </ref>. As for deterministic algorithms, Barnes and Ruzzo [BR91] recently presented an algorithm for undirected st-connectivity that runs in polynomial time and n * space (for any fixed * &gt; 0). fl Dept. of CS, Hebrew University, Jerusalem. <p> by n transition probability matrix M , an integer t, and a rational *. (t and * are given in unary.) Output: A matrix A such that kA M t k *. 1 For an overview of the subtleties involved in the definition of randomized space bounded algorithms see e.g. <ref> [BCD*89, Nis93] </ref>. We follow the notation of [Nis93]. In the notation of [BCD*89] we are talking about BP LP . 2 The algorithm runs in time poly (N ) and space O (log 2 N ), where N = n 2 + t + * 1 is the input size. <p> We follow the notation of [Nis93]. In the notation of <ref> [BCD*89] </ref> we are talking about BP LP . 2 The algorithm runs in time poly (N ) and space O (log 2 N ), where N = n 2 + t + * 1 is the input size.
Reference: [CW79] <author> L. Carter and M. Wegman. </author> <title> Universal hash functions. </title> <journal> J. Comp. and Syst. Sci., </journal> <volume> 18(2) </volume> <pages> 143-154, </pages> <year> 1979. </year>
Reference-contexts: Our aim in thus to find a good approximation of Q (U t ), where t is polynomial in the size of Q. 2.2 Universal Hashing Our generators are based upon universal hash functions <ref> [CW79] </ref>. Formally, let H be a set of functions h : f0; 1g n ! f0; 1g m .
Reference: [Nis92] <author> N. Nisan. </author> <title> Pseudorandom generators for space-bounded computation. </title> <journal> Combinatorica, </journal> <volume> 12(4) </volume> <pages> 449-461, </pages> <year> 1992. </year>
Reference-contexts: The simulation of randomized algorithms is based upon a careful usage of the pseudorandom generators of <ref> [Nis92] </ref>. The main idea of the simulation is to deterministically assign values to most of the input bits of the generator, leaving only O (log n) unassigned input bits. <p> An example of such a family is the set of all linear functions over GF (2 n ). We will require the following lemma from <ref> [Nis92] </ref>: Lemma 1 Let A f0; 1g m , B f0; 1g m , H be a universal family of hash functions h : f0; 1g m ! f0; 1g m , and * &gt; 0, then P r h2H [ jP r x2f0;1g m [x 2 A and h (x) <p> &gt; and columns of the form &lt; j; t &gt; gives exactly the matrix A desired. 2 Proof: (of theorem 1): This follows directly from theorem 2, and the fact that st-connectivity is in RL [AKL*79]. 2 4 The Simulation 4.1 The Generator Our simulation uses the pseudorandom generator of <ref> [Nis92] </ref>. Definition 3 For an integer m and every integer k 0 we define a function G k : f0; 1g m fi H k ! f0; 1g m2 k where H is a universal family of hash functions h : f0; 1g m ! f0; 1g m .
Reference: [Nis93] <author> N. Nisan. </author> <title> On read-once vs. multiple access to randomness in Logspace. </title> <journal> Theoretical Computer Science, </journal> <volume> 107 </volume> <pages> 135-144, </pages> <year> 1993. </year>
Reference-contexts: by n transition probability matrix M , an integer t, and a rational *. (t and * are given in unary.) Output: A matrix A such that kA M t k *. 1 For an overview of the subtleties involved in the definition of randomized space bounded algorithms see e.g. <ref> [BCD*89, Nis93] </ref>. We follow the notation of [Nis93]. In the notation of [BCD*89] we are talking about BP LP . 2 The algorithm runs in time poly (N ) and space O (log 2 N ), where N = n 2 + t + * 1 is the input size. <p> We follow the notation of <ref> [Nis93] </ref>. In the notation of [BCD*89] we are talking about BP LP . 2 The algorithm runs in time poly (N ) and space O (log 2 N ), where N = n 2 + t + * 1 is the input size.
Reference: [Sav70] <author> W.J. Savitch. </author> <title> Relationships between nondeterministic and deterministic space complexities. </title> <journal> J. Comp. and Syst. Sci., </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: The st-connectivity problem in directed graphs is one of the most basic problems in computer science. Using BFS or DFS, st-connectivity can be solved in polynomial (actually even linear) time and linear space. On the other hand, Savitch's <ref> [Sav70] </ref> theorem gives a O (log 2 n)- space algorithm for it, but which requires super-polynomial time. It is a long standing open problem whether there exists an algorithm for st-connectivity that combines both features: runs in polynomial time and poly-logarithmic space.
References-found: 7

