URL: http://www.iscs.nus.sg/~liub/wkshp/leconte.ps
Refering-URL: 
Root-URL: 
Email: email leconte, couronne@ilog.fr email vergamini@ilog.com  
Title: Column Generation Using Cooperating Constraint-Based Solvers  
Author: Michel Leconte, Philippe Couronne, Didier Vergamini 
Web: url http://www.ilog.com  
Address: 9 rue de Verdun, BP 85, F-94253 Gentilly Cedex, FRANCE  
Affiliation: ILOG S.A.  
Abstract: Many real-life optimization problems involve configuration constraints (choice of resources) and other production and marketing constraints (capacity of resources, production to meet a marketing demand). Typically, the configuration constraints are non-linear, whereas the other constraints are linear. Furthermore, solutions need to be integer-valued. In this paper, we use a technique of operations research called column generation to solve this kind of problems. We show that a finite-domain solver is ideally suited for the generation phase, whereas a linear solver is perfect to solve the linear part. We use Ilog Solver as finite-domain constraint-based system and a new add-on to it, namely Ilog Planner, as a linear solver. We report a set of experiments on a bin-packing configuration problem. We focus on the cooperation between a finite-domain propagation solver and a simplex-based linear solver to solve this problem. Results shows that a column-generation method is very effective, especially with respect to the scaling of data about supplies or capacities.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. De Backer, H. Beringer. </author> <title> "Cooperative solvers and global constraints: the case of linear arithmetic constraints" ILPS'95 workshop on Constraints Databases, </title> <address> Portland, Oregon, </address> <year> 1995. </year>
Reference-contexts: Real linear constraints were one of the first domains of computation to be integrated in a CLP language (CLP (R), CHIP, PrologIII). Merging real linear constraint-solving with domain propagation then comes naturally to solve integer problems in the linear programming community [2] and in the CLP community <ref> [1] </ref>. Complete real linear solvers are very often implemented via a simplex algorithm [7]. A feature of this simplex algorithm is that it internally maintains a floating-point solution to the current set of linear constraints. <p> Its design follows a "no box" approach [16] making it easy to define efficient new constraint algorithms. In particular, we have implemented a revised simplex algorithm with explicit bounds as a constraint dedicated to linear ones <ref> [1] </ref> [17] [3]. This linear-constraint solver is the main component of Ilog Planner, a C++ library dedicated to solving production planning problems. We use these constraint-based programming libraries to report results about configuration problems. We show that an approach called "column generation" gives the more easily solvable model.
Reference: [2] <author> A. L. Brearley, G. Mitra, and H. P. Williams. </author> <title> "Analysis of mathematical programming problems prior to applying the simplex algorithm" Mathematical Programming, vol 8, </title> <publisher> North Holland, </publisher> <year> 1975. </year>
Reference-contexts: Real linear constraints were one of the first domains of computation to be integrated in a CLP language (CLP (R), CHIP, PrologIII). Merging real linear constraint-solving with domain propagation then comes naturally to solve integer problems in the linear programming community <ref> [2] </ref> and in the CLP community [1]. Complete real linear solvers are very often implemented via a simplex algorithm [7]. A feature of this simplex algorithm is that it internally maintains a floating-point solution to the current set of linear constraints.
Reference: [3] <author> V. Chvatal. </author> <title> Linear Programming. </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <year> 1983. </year>
Reference-contexts: Its design follows a "no box" approach [16] making it easy to define efficient new constraint algorithms. In particular, we have implemented a revised simplex algorithm with explicit bounds as a constraint dedicated to linear ones [1] [17] <ref> [3] </ref>. This linear-constraint solver is the main component of Ilog Planner, a C++ library dedicated to solving production planning problems. We use these constraint-based programming libraries to report results about configuration problems. We show that an approach called "column generation" gives the more easily solvable model. <p> is hard for the finite-domain solver. 7 A Column Generation Model Our second model is relevant to a classic method from operations research called "column generation." This method is a crucial part of the Dantzig-Wolfe decomposition algorithm; it is also the conventional tool to solve cutting-stock problems. (See for example <ref> [3] </ref>.) In our example, we have to find a number of bins, each of them subject to configuration constraints, in order to satisfy a given demand. Instead of generating sufficient bins as in our first model, we first generate all the possible bins.
Reference: [4] <author> A. Colmerauer. </author> <title> An Introduction to PROLOG III Communications of the ACM, </title> <booktitle> 33(7) </booktitle> <pages> 69-90, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Constraint-based programming systems are nowadays widely used to solve com-binatorially large problems, as exemplified by cc (FD) [18], Chip [6], CLP (BNR) [14], Clp (FD)[5], ECLiPSe [8], Prolog V <ref> [4] </ref>, CLP (R) [9], Ilog Solver [16], and many others. Constraint-based programming systems dissociate the representation of the problem from the algorithms used to solve it.
Reference: [5] <author> D. Diaz, P. Codognet, </author> <title> "A minimal extension of the WAM for clp(FD)," </title> <booktitle> Proceedings of the 10th International Conference on Logic Programming, </booktitle> <year> 1993. </year>
Reference: [6] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <booktitle> The Constraint Logic Programming Language CHIP in Proceedings of the International Conference on Fifth Generation Computer Systems, </booktitle> <address> Tokyo, Japan, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Constraint-based programming systems are nowadays widely used to solve com-binatorially large problems, as exemplified by cc (FD) [18], Chip <ref> [6] </ref>, CLP (BNR) [14], Clp (FD)[5], ECLiPSe [8], Prolog V [4], CLP (R) [9], Ilog Solver [16], and many others. Constraint-based programming systems dissociate the representation of the problem from the algorithms used to solve it.
Reference: [7] <author> G. B. Dantzig. </author> <title> Linear Programming. </title> <publisher> Princeton University Press, </publisher> <year> 1963. </year> <month> 11 </month>
Reference-contexts: Merging real linear constraint-solving with domain propagation then comes naturally to solve integer problems in the linear programming community [2] and in the CLP community [1]. Complete real linear solvers are very often implemented via a simplex algorithm <ref> [7] </ref>. A feature of this simplex algorithm is that it internally maintains a floating-point solution to the current set of linear constraints. This allows the searching process (that is, the enumeration of integer solutions) to be based on the current value of the solution.
Reference: [8] <author> T. Fruehwirth et al. </author> <title> Constraint Logic Programming: An Informal Intro--duction in Logic Programming in Action, </title> <publisher> Springer-Verlag, LNCS 636, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Constraint-based programming systems are nowadays widely used to solve com-binatorially large problems, as exemplified by cc (FD) [18], Chip [6], CLP (BNR) [14], Clp (FD)[5], ECLiPSe <ref> [8] </ref>, Prolog V [4], CLP (R) [9], Ilog Solver [16], and many others. Constraint-based programming systems dissociate the representation of the problem from the algorithms used to solve it.
Reference: [9] <author> J. Jaffar, S. Michaylov, P. Stuckey, and R. Yap. </author> <title> The CLP(R) language and system, </title> <booktitle> ACM Transactions on Programming Languages and Systems 14 </booktitle> (3):339-395, 1992. 
Reference-contexts: 1 Introduction Constraint-based programming systems are nowadays widely used to solve com-binatorially large problems, as exemplified by cc (FD) [18], Chip [6], CLP (BNR) [14], Clp (FD)[5], ECLiPSe [8], Prolog V [4], CLP (R) <ref> [9] </ref>, Ilog Solver [16], and many others. Constraint-based programming systems dissociate the representation of the problem from the algorithms used to solve it.
Reference: [10] <author> J. Jaffar, J. L. Lassez. </author> <title> "Constraint Logic Programming," </title> <booktitle> Proceedings POPL 87, </booktitle> <address> Munchen, </address> <month> January </month> <year> 1987. </year>
Reference: [11] <author> A. D. Kelly, A. Macdonald, K. Marriot, P. Stuckey, R. Yap. </author> <title> "Effectiveness of Optimizing Compilation for CLP(R)", </title> <booktitle> Proceedings of the 1996 Joint International Conference and Symposium of Logic Programming, </booktitle> <address> Bonn, Germany, </address> <year> 1996. </year>
Reference: [12] <author> O. Lhomme. </author> <title> "Consistency Techniques for Numeric CSPs," </title> <booktitle> Proceedings IJCAI93, </booktitle> <address> Chambery, France, </address> <pages> pp. 232-238, </pages> <year> 1993. </year>
Reference: [13] <author> Mack 77 A. K. Mackworth. </author> <title> "Consistency in networks of relations," </title> <booktitle> Art. Int 8, </booktitle> <pages> pp 99-118, </pages> <year> 1977 </year>
Reference: [14] <editor> W. J. Older and F. Benhamou. </editor> <booktitle> Programming in CLP(BNR), Proceedings PPCP'93, </booktitle> <address> Providence, RI, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Constraint-based programming systems are nowadays widely used to solve com-binatorially large problems, as exemplified by cc (FD) [18], Chip [6], CLP (BNR) <ref> [14] </ref>, Clp (FD)[5], ECLiPSe [8], Prolog V [4], CLP (R) [9], Ilog Solver [16], and many others. Constraint-based programming systems dissociate the representation of the problem from the algorithms used to solve it.
Reference: [15] <author> W. J. Older, A. Vellino. </author> <title> Constraint Arithmetic on Real Intervals, Constraint Logic Programming: Selected Research, </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Vellino in the comp.constraint forum as an illustration of the use of Boolean constraints in the CLP (BNR) system <ref> [15] </ref>. We adopted it here because it is representative of many practical configuration problems. Here is the problem: given a supply of components and bins of various types, assign the components to bins so that the assignments satisfy specified constraints.
Reference: [16] <author> J-F. Puget, M. Leconte. </author> <title> Beyond the Glass Box, Constraints as Objects, </title> <booktitle> Proceedings ILPS'95, </booktitle> <address> Portland, Oregon, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Constraint-based programming systems are nowadays widely used to solve com-binatorially large problems, as exemplified by cc (FD) [18], Chip [6], CLP (BNR) [14], Clp (FD)[5], ECLiPSe [8], Prolog V [4], CLP (R) [9], Ilog Solver <ref> [16] </ref>, and many others. Constraint-based programming systems dissociate the representation of the problem from the algorithms used to solve it. With these systems, a problem is defined in terms of its unknowns, that is, its variables, and in terms of the constraints that must be satisfied by these variables. <p> We implemented our models using Ilog Solver. As our finite-domain constraint solver, Ilog Solver (a C++ constraint-based library) handles constraints on integers, reals, sets, and pointers to anything. Its design follows a "no box" approach <ref> [16] </ref> making it easy to define efficient new constraint algorithms. In particular, we have implemented a revised simplex algorithm with explicit bounds as a constraint dedicated to linear ones [1] [17] [3].
Reference: [17] <author> P. Refalo, P. Van Hentenryck. </author> <title> Clp(Rlin) Revised, </title> <booktitle> Proceedings JIC-SLP'96, </booktitle> <address> Bonn, Germany, </address> <year> 1996. </year>
Reference-contexts: Its design follows a "no box" approach [16] making it easy to define efficient new constraint algorithms. In particular, we have implemented a revised simplex algorithm with explicit bounds as a constraint dedicated to linear ones [1] <ref> [17] </ref> [3]. This linear-constraint solver is the main component of Ilog Planner, a C++ library dedicated to solving production planning problems. We use these constraint-based programming libraries to report results about configuration problems. We show that an approach called "column generation" gives the more easily solvable model.
Reference: [18] <author> P. Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming in Logic Programming Series, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1989. </year> <month> 12 </month>
Reference-contexts: 1 Introduction Constraint-based programming systems are nowadays widely used to solve com-binatorially large problems, as exemplified by cc (FD) <ref> [18] </ref>, Chip [6], CLP (BNR) [14], Clp (FD)[5], ECLiPSe [8], Prolog V [4], CLP (R) [9], Ilog Solver [16], and many others. Constraint-based programming systems dissociate the representation of the problem from the algorithms used to solve it.
References-found: 18

