URL: http://www.pdos.lcs.mit.edu/~josh/papers/rover-sosp95.ps
Refering-URL: http://www.pdos.lcs.mit.edu/~josh/
Root-URL: 
Email: kaashoekg@lcs.mit.edu  
Title: Rover: A Toolkit for Mobile Information Access  
Author: Anthony D. Joseph, Alan F. deLespinasse, Joshua A. Tauber, David K. Gifford, and M. Frans Kaashoek fadj, aldel, josh, gifford, 
Address: Cambridge, MA 02139, U.S.A.  
Affiliation: M.I.T. Laboratory for Computer Science  
Abstract: The Rover toolkit combines relocatable dynamic objects and queued remote procedure calls to provide unique services for roving mobile applications. A relocatable dynamic object is an object with a well-defined interface that can be dynamically loaded into a client computer from a server computer (or vice versa) to reduce client-server communication requirements. Queued remote procedure call is a communication system that permits applications to continue to make non-blocking remote procedure call requests even when a host is disconnected, with requests and responses being exchanged upon network reconnection. The challenges of mobile environments include intermittent connectivity, limited bandwidth, and channel-use optimization. Experimental results from a Rover-based mail reader, calendar program, and two non-blocking versions of WorldWide Web browsers show that Rover's services are a good match to these challenges. The Rover toolkit also offers advantages for workstation applications by providing a uniform distributed object architecture for code shipping, object caching, and asynchronous object invocation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adobe Systems. </author> <title> Programming the Display PostScript System with X. </title> <publisher> Addison-Wesley Pub. Co., </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript <ref> [1] </ref>, Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18].
Reference: [2] <author> M.G. Baker. </author> <title> Changing communication environments in MosquitoNet. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 64-68, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: A number of proposals have been made for dealing with the limited communication environments for mobile computers. Katz surveys many of the challenges [27]. Baker describes MosquitoNet, which shares similar goals with Rover, but has not been implemented yet <ref> [2] </ref>. Oracle recently released a product for mobile computers that provides asynchronous communication [15]; unfortunately, details and performance analysis are not available. A number of successful commercial applications have been developed for mobile hosts and limited-bandwidth channels.
Reference: [3] <author> J. Bartlett. </author> <title> W4the Wireless World-Wide Web. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 176-178, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: The key difference between Rover and other code shipping systems is that Rover provides RDOs with a well-defined object-based execution environment that provides a uniform naming scheme, an application-specific replication model, and QRPC. The InfoPad project [34] and W4 <ref> [3] </ref> focus on mobile wireless information access. The Infopad project employs a dumb terminal, and offloads all functionality from the client to the server. W4 employs a similar approach for accessing the Web from a small PDA. Rover, is designed to be more flexible.
Reference: [4] <author> T. Berners-Lee, R. Caillau, A. Luotonen, H. Frystyk, and A. </author> <title> Secret. The world-wide web. </title> <journal> Communications of the ACM, </journal> <volume> 37(8) </volume> <pages> 76-82, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: In addition, we expect that certain applications will be structured as a collection of independent atomic actions [16], where the importing action sets an appropriate application-level lock. Our initial implementation of Rover permits applications full access to the objects of the World-Wide Web (WWW) <ref> [4] </ref>. Objects are named using Universal Resource Names (URNs) [52] and our implementation is fully compatible with the HyperText Transport Protocol (HTTP) [5]. Our research prototype is modular, and favors ease of implementation and experimentation over performance.
Reference: [5] <author> T. Berners-Lee, R. T. Fielding, and H. Frystyk. </author> <title> HyperText Transfer Protocol - HTTP/1.0. IETF HTTP Working Group Draft 02, Best Current Practice, </title> <month> August </month> <year> 1995. </year>
Reference-contexts: Our initial implementation of Rover permits applications full access to the objects of the World-Wide Web (WWW) [4]. Objects are named using Universal Resource Names (URNs) [52] and our implementation is fully compatible with the HyperText Transport Protocol (HTTP) <ref> [5] </ref>. Our research prototype is modular, and favors ease of implementation and experimentation over performance. The Rover toolkit supports several transport protocols (e.g., HTTP and Simple Mail Transport Protocol (SMTP) [45]) over various communication media (e.g., Ethernet, WaveLAN, and phone lines). SMTP allows Rover to exploit E-mail for queued communication.
Reference: [6] <author> A.D. Birrell and B.J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> Feb. </month> <year> 1984. </year>
Reference-contexts: Queued remote procedure call is a communication system that permits applications to continue to make non-blocking remote procedure calls <ref> [6] </ref> even when a host is disconnected: requests and responses are exchanged upon network reconnection. The Rover toolkit offers applications a uniform distributed object system based on a client/server architecture.
Reference: [7] <author> N. S. Borenstein. </author> <title> EMail with a mind of its own: The Safe-Tcl language for enabled mail. </title> <booktitle> In IFIP Transactions C, </booktitle> <pages> pages 389-415, </pages> <address> Barcelona, Spain, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript [1], Safe-Tcl <ref> [7] </ref>, Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18].
Reference: [8] <author> M. H. Brown and R. A. Schillner. DeckScape: </author> <title> An experimental web browser. </title> <type> Technical Report 135a, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: The Rover toolkit and its applications provide functionality that is similar to these proprietary approaches and it does this in an application-independent manner. Using the Rover toolkit, standard workstation applications, such as Exmh and Ical, can be easily turned into roving mobile applications. The DeckScape WWW browser <ref> [8] </ref> is a click-ahead browser that was developed simultaneously with our web browser proxy. However, their approach was to implement a browser from scratch; as such, their approach is not compatible with existing browsers.
Reference: [9] <author> D. H. Crocker. </author> <title> Standard for the format of ARPA internet text messages. </title> <type> RFC 822, </type> <month> Aug </month> <year> 1982. </year>
Reference-contexts: Thus, we can move resources based upon varying requirements (e.g., server load or availability) without exposing such changes to end users. The lower layer consists of a network scheduler and communication protocols. Messages can be sent over both connection-based protocols (e.g., TCP/IP) and connectionless protocols (e.g., SMTP) <ref> [9, 24] </ref> and IP or non-IP based networks. The choice is handled by the network scheduler and is based in part upon the requested quality of service. The implementation of the network scheduler has several queues for different priorities and it chooses a network interface based on availability and quality.
Reference: [10] <author> A. F. deLespinasse. </author> <title> Rover mosaic: E-mail communication for a full-function web browser. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: We do not have an accurate measurement of the time to port Ical as the porting was done concurrently with the initial client and server implementations. 6.3 Rover Web Browser Proxy The Rover Web Browser Proxy <ref> [10] </ref> is a unique application. It will interoperate with most of the popular Web browsers. Using it enabled us to rapidly produce one of the first full-function browsers that allows users to click ahead of the arrived data by requesting multiple new documents before earlier requests have been satisfied.
Reference: [11] <author> A. Demers, K. Petersen, M. Spreitzer, D. Terry, M. Theimer, and B. Welch. </author> <title> The Bayou architecture: Support for data sharing among mobile users. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 2-7, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: The Little Work Project caches files to smooth disconnection from an AFS file system [23]. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [22]. The Bayou project <ref> [11, 54] </ref> defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [55] and session guarantees for weakly-consistent replicated data [53]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database.
Reference: [12] <author> P. Deutsch and C.A. Grant. </author> <title> A flexible measurement tool for software systems. </title> <booktitle> Information Processing 71, </booktitle> <year> 1971. </year>
Reference-contexts: Rover starts as a minimalistic kernel that imports functionality on demand. This feature is particularly important for mobile hosts with limited resources. Implementing RDOs involves three somewhat conflicting goals: (1) safe execution, (2) portability, and (3) efficiency. These goals can be achieved by using approaches such as code inspection <ref> [12] </ref> and sandboxing [58], pointer-safe languages [18, 47], or code interpretation with limited environments (e.g., Safe-Tcl [43]).
Reference: [13] <author> F. Douglis, R. Caceres, F. Kaashoek, K. Li, B. Marsh, and J. A. Tauber. </author> <title> Storage alternatives for mobile computers. </title> <booktitle> In First Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 25-37, </pages> <address> Monterey, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Thus, the flush is on the critical path for message sending. Our prototype implementation favors simplicity over performance: it does not perform any compression on the log [29] and it does not employ efficient techniques for implementing stable storage (e.g., Flash RAM <ref> [13] </ref> or group commit [20]). 5.3 Transport Layer The transport layer is the lowest layer of Rover, and is itself split into two levels.
Reference: [14] <author> F. Douglis and J. Ousterhout. </author> <title> Process migration in the Sprite operating system. </title> <booktitle> In Proc. of the 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 18-25, </pages> <address> Berlin, West Germany, </address> <month> September </month> <year> 1987. </year> <note> IEEE. </note>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [60]. RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration <ref> [14, 46, 51, 56] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18].
Reference: [15] <author> A. Downing, D. Daniels, G. Hallmark, K. Jacobs, and S. Jain. </author> <title> Oracle 7, symmetric replication: Asynchronous distributed technology, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: Katz surveys many of the challenges [27]. Baker describes MosquitoNet, which shares similar goals with Rover, but has not been implemented yet [2]. Oracle recently released a product for mobile computers that provides asynchronous communication <ref> [15] </ref>; unfortunately, details and performance analysis are not available. A number of successful commercial applications have been developed for mobile hosts and limited-bandwidth channels. For example, Qualcomm's Eudora is a mail browser that allows efficient remote access over low-bandwidth links.
Reference: [16] <author> D. K. Gifford and J. E. Donahue. </author> <title> Coordinating independent atomic actions. </title> <booktitle> In Spring Compcon '85, </booktitle> <pages> pages 92-92, </pages> <address> San Francisco, CA, </address> <month> February </month> <year> 1985. </year>
Reference-contexts: Update conflicts are detected at the server, where Rover attempts to reconcile them. Because Rover can employ type-specific concurrency control [62], we expect that many conflicts can be resolved automatically. In addition, we expect that certain applications will be structured as a collection of independent atomic actions <ref> [16] </ref>, where the importing action sets an appropriate application-level lock. Our initial implementation of Rover permits applications full access to the objects of the World-Wide Web (WWW) [4]. Objects are named using Universal Resource Names (URNs) [52] and our implementation is fully compatible with the HyperText Transport Protocol (HTTP) [5].
Reference: [17] <author> D. K. Gifford, R. M. Needham, and M. D. Schroeder. </author> <title> The Cedar file system. </title> <journal> CACM, </journal> <volume> 31(3) </volume> <pages> 288-298, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: The application is a centralized client-server system with one server at DEC SRC that automatically dispatches tasks and collects results. Our research borrows from early work on replication for nonmobile distributed systems. In particular, we borrow from Locus [59] (type-specific conflict resolving) and Cedar <ref> [17] </ref> (check-in, check-out model of data sharing). 3 Rover Programming Model In this section, we discuss the Rover programming model, QRPC, RDOs, user interface issues, and Rover application development. 3.1 Overview The Rover toolkit offers applications a distributed object system based on a client/server architecture.
Reference: [18] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment: </title> <note> A white paper, 1995. http://java.sun.com/whitePaper/- javawhitepaper 1.html. </note>
Reference-contexts: Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java <ref> [18] </ref>. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form 2 of code shipping is orthogonal to the Rover architecture. <p> This feature is particularly important for mobile hosts with limited resources. Implementing RDOs involves three somewhat conflicting goals: (1) safe execution, (2) portability, and (3) efficiency. These goals can be achieved by using approaches such as code inspection [12] and sandboxing [58], pointer-safe languages <ref> [18, 47] </ref>, or code interpretation with limited environments (e.g., Safe-Tcl [43]). In our initial implementation we use interpreted Tcl. 3.4 User Notification Because the mobile environment may rapidly change from moment to moment, it is important to present the user with information about its current state.
Reference: [19] <author> R. Gruber, M. F. Kaashoek, B. Liskov, and L. Shira. </author> <title> Disconnected operation in the Thor object-oriented database system. </title> <booktitle> In Proceeding of the Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 51-56, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: In Thor, objects are updated within transactions that execute entirely within a client cache. However, Thor does not support disconnected operation: clients have to be connected to the server before they can commit. An extension for disconnected operation in Thor has been proposed by Gruber and others <ref> [19] </ref>, but it has not been implemented. Furthermore, it does not provide a mechanism for non-blocking communication, and their proposed object model does not support method execution at the servers. The BNU project implements an RPC-driven application framework on mobile computers.
Reference: [20] <author> R. Hagmann. </author> <title> Reimplementing the Cedar file system using logging and group commit. </title> <booktitle> In Proc of the Eleventh Symposium on Operating Systems Principles (SOSP), </booktitle> <month> December </month> <year> 1987. </year>
Reference-contexts: Thus, the flush is on the critical path for message sending. Our prototype implementation favors simplicity over performance: it does not perform any compression on the log [29] and it does not employ efficient techniques for implementing stable storage (e.g., Flash RAM [13] or group commit <ref> [20] </ref>). 5.3 Transport Layer The transport layer is the lowest layer of Rover, and is itself split into two levels.
Reference: [21] <author> H. Houh, C. Lindblad, and D. Wetherall. </author> <title> Active pages. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 265-270, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages <ref> [21] </ref>, Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form 2 of code shipping is orthogonal to the Rover architecture.
Reference: [22] <author> L. Huston and P. Honeyman. </author> <title> Partially connected operation. </title> <booktitle> In Proceedings of the Second USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 91-97, </pages> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: The Little Work Project caches files to smooth disconnection from an AFS file system [23]. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks <ref> [22] </ref>. The Bayou project [11, 54] defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [55] and session guarantees for weakly-consistent replicated data [53]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database.
Reference: [23] <author> L. B. Huston and P. Honeyman. </author> <title> Disconnected operation for AFS. </title> <booktitle> In Proc. USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 1-10, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: A newer version of Coda also supports low bandwidth networks, as well as intermittent communication [39]. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts [48]. The Little Work Project caches files to smooth disconnection from an AFS file system <ref> [23] </ref>. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [22]. The Bayou project [11, 54] defines an architecture for sharing data among mobile users.
Reference: [24] <author> Information Sciences Institute. </author> <title> Transmission Control Protocol: DARPA Internet Program Protocol Specification. Internet RFC 793, </title> <month> September </month> <year> 1981. </year>
Reference-contexts: Thus, we can move resources based upon varying requirements (e.g., server load or availability) without exposing such changes to end users. The lower layer consists of a network scheduler and communication protocols. Messages can be sent over both connection-based protocols (e.g., TCP/IP) and connectionless protocols (e.g., SMTP) <ref> [9, 24] </ref> and IP or non-IP based networks. The choice is handled by the network scheduler and is based in part upon the requested quality of service. The implementation of the network scheduler has several queues for different priorities and it chooses a network interface based on availability and quality.
Reference: [25] <author> V. Jacobson. </author> <title> Compressing TCP/IP Headers for Low-Speed Serial Links. Internet RFC 1144, </title> <month> February </month> <year> 1990. </year>
Reference-contexts: For lower-bandwidth networks the overhead of writing the log is dwarfed by the underlying communication costs. 3. Caching RDOs reduces latency and bandwidth consumption. A local invocation on an RDO is 56 times faster than sending an RPC over a TCP/CSLIP14.4 <ref> [25] </ref> connection. 4. Migrating RDOs provides Rover applications with excellent performance over moderate bandwidth links (e.g., 14.4 Kbit/s dial-up lines) and in disconnected operation. <p> The clients were IBM ThinkPad 701C laptops (25/75Mhz i80486DX4) running Linux 1.2.8. All of the machines were idle during the tests. The network options consisted of switched 10 Mbit/s Ethernet, 2 Mbit/s wireless AT&T WaveLAN, and Serial Line IP with Van Jacobson TCP/IP header compression (CSLIP) <ref> [25] </ref> over 14.4 Kbit/s and 2.4 Kbit/s dial-up links.
Reference: [26] <author> F. Kaashoek, T. Pinckney, and J. Tauber. </author> <title> Dynamic documents: </title> <booktitle> Mobile wireless access to the WWW. In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 179-184, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents <ref> [26] </ref>, and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form 2 of code shipping is orthogonal to the Rover architecture. <p> If the delay is above a user-specified threshold, documents that are directly accessible from the one requested are prefetched. The design of the proxy is general enough that it will allows us to experiment with using RDOs to dynamically generate web pages (e.g., to ship Dynamic Documents <ref> [26] </ref> or fragments of databases to mobile hosts).
Reference: [27] <author> R. H. Katz. </author> <title> Adaptation and mobility in wireless information systems. </title> <journal> IEEE Personal Communications, </journal> <volume> 1 </volume> <pages> 6-17, </pages> <year> 1994. </year>
Reference-contexts: Depending on the power of the mobile host and the available bandwidth, Rover dynamically adapts and moves functionality between the client and the server. A number of proposals have been made for dealing with the limited communication environments for mobile computers. Katz surveys many of the challenges <ref> [27] </ref>. Baker describes MosquitoNet, which shares similar goals with Rover, but has not been implemented yet [2]. Oracle recently released a product for mobile computers that provides asynchronous communication [15]; unfortunately, details and performance analysis are not available.
Reference: [28] <author> L. Kawell Jr., S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif. </author> <title> Replicated document management in a group communication system. </title> <booktitle> Presented at the Second Conference on Computer-Supported Cooperative Work, </booktitle> <address> Portland, OR, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: A number of successful commercial applications have been developed for mobile hosts and limited-bandwidth channels. For example, Qualcomm's Eudora is a mail browser that allows efficient remote access over low-bandwidth links. Lotus Notes <ref> [28] </ref> is a groupware application that allows users to share data in a weakly-connected environment. Notes supports conflict detection, but reflects all conflicts to the user for resolution.
Reference: [29] <author> J. J. Kistler. </author> <title> Disconnected Operation in a Distributed File System. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Applications can specify whether they will accept tentative data when importing an object. An essential component to accomplishing useful work while disconnected is having the necessary information locally available. This goal is usually accomplished during periods of network connectivity by filling the cache with useful information <ref> [29] </ref>. There are two issues here: when and what to prefetch. Applications decide which objects to prefetch. The usability of Rover will be critically dependent upon simple user interface metaphors for indicating collections of objects to be prefetched. <p> Thus, the flush is on the critical path for message sending. Our prototype implementation favors simplicity over performance: it does not perform any compression on the log <ref> [29] </ref> and it does not employ efficient techniques for implementing stable storage (e.g., Flash RAM [13] or group commit [20]). 5.3 Transport Layer The transport layer is the lowest layer of Rover, and is itself split into two levels.
Reference: [30] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10 </volume> <pages> 3-25, </pages> <year> 1992. </year> <month> 15 </month>
Reference-contexts: The Coda project pioneered the provision of distributed services for mobile clients. In particular, it investigated how to make file systems run well on mobile computers by using optimistic concur-rency control and prefetching <ref> [30, 50] </ref>. Coda logs all updates to the file system during disconnection and replays the log on reconnection. Coda provides automatic conflict resolution mechanisms for directories and files, and uses Unix file naming semantics to invoke application-specific conflict resolution programs at the file system level [31]. <p> Applications can eliminate this window by using application-specific locks or can reduce this window through the use of periodic polling or server callbacks. The Rover shared object model is different from Coda's shared file model <ref> [30] </ref>. In the Rover model, consistency is provided by application-level locking or by using application-specific algorithms to resolve uncoordinated updates to a single object. In the Coda model, concurrency is provided by open/close operations on files, extended with file-specific conflict resolvers [32].
Reference: [31] <author> P. Kumar. </author> <title> Mitigating the Effects of Optimistic Replication in a Distributed File System. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Coda logs all updates to the file system during disconnection and replays the log on reconnection. Coda provides automatic conflict resolution mechanisms for directories and files, and uses Unix file naming semantics to invoke application-specific conflict resolution programs at the file system level <ref> [31] </ref>. A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda also supports low bandwidth networks, as well as intermittent communication [39]. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts [48].
Reference: [32] <author> P. Kumar and M. Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> In Proc. of the Fourth Workshop on Workstation Operating Systems (WWOS-IV), </booktitle> <pages> pages 66-70, </pages> <address> Napa, CA, </address> <year> 1993. </year>
Reference-contexts: In the Rover model, consistency is provided by application-level locking or by using application-specific algorithms to resolve uncoordinated updates to a single object. In the Coda model, concurrency is provided by open/close operations on files, extended with file-specific conflict resolvers <ref> [32] </ref>. The disadvantage of using a file model is that it provides only coarse-grained conflict resolution, since it does not allow for type-specific concur-rency control and replication.
Reference: [33] <editor> J. Landay. </editor> <booktitle> User interface issues in mobile computing. In Proc. of the Fourth Workshop on Workstation Operating Systems (WWOS-IV), </booktitle> <pages> pages 40-47. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: The BNU project implements an RPC-driven application framework on mobile computers. It allows for function shipping by downloading Scheme functions for interpretation [61]. Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces <ref> [33] </ref>. The BNU environment includes proxies on stationary hosts for hiding the mobility of the system. No additional support for disconnected operation, such as Rover's queued RPC, is included in BNU.
Reference: [34] <author> M.T. Le, F. Burghardt, S. Seshan, and J. Rabaey. InfoNet: </author> <booktitle> the networking infrastructure of InfoPad. In Compcon '95, </booktitle> <pages> pages 163-168, </pages> <year> 1995. </year>
Reference-contexts: The key difference between Rover and other code shipping systems is that Rover provides RDOs with a well-defined object-based execution environment that provides a uniform naming scheme, an application-specific replication model, and QRPC. The InfoPad project <ref> [34] </ref> and W4 [3] focus on mobile wireless information access. The Infopad project employs a dumb terminal, and offloads all functionality from the client to the server. W4 employs a similar approach for accessing the Web from a small PDA. Rover, is designed to be more flexible.
Reference: [35] <author> A. K. Lenstra and M. S. Manasse. </author> <title> Factoring by electronic mail. </title> <booktitle> In Advances in Cryptology Eurocrypt '89, </booktitle> <pages> pages 355-371, </pages> <address> Berlin, 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In another project, researchers at DEC SRC used E-mail messages as the transport layer of a project that coordinated more than a thousand independently administered and geographically dispersed nodes to factor integers of more than 100 digits <ref> [35] </ref>. The application is a centralized client-server system with one server at DEC SRC that automatically dispatches tasks and collects results. Our research borrows from early work on replication for nonmobile distributed systems.
Reference: [36] <author> B. Liskov, M. Day, and L. Shrira. </author> <title> Distributed object management in Thor. </title> <editor> In M. Tamer Ozsu, Umesh Dayal, and Patrick Valduriez, editors, </editor> <booktitle> Distributed Object Management. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Rover borrows the notions of tentative data, session guarantees, and the calendar tool example from the Bayou project. Rover extends this work with RDOs and QRPC to deal with intermittent communication, limited bandwidth, and resource poor clients. An alternative to the Rover object model is the Thor object model <ref> [36] </ref>. In Thor, objects are updated within transactions that execute entirely within a client cache. However, Thor does not support disconnected operation: clients have to be connected to the server before they can commit.
Reference: [37] <author> B. Liskov and L. Shrira. </author> <title> Promises: Linguistic support for efficient asynchronous procedure calls. </title> <booktitle> In Proc. SIGPLAN 88 Conf. on Progr. Lang. Design and Impl., </booktitle> <pages> pages 260-267, </pages> <address> Atlanta, GA, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: To import an object, an application calls import and provides the unique identifier for the object, the session identifier, a callback, and arguments. In addition, the application specifies a priority that is used by the network scheduler to reorder QRPCs. Import returns a promise <ref> [37] </ref>. Applications can wait on this promise or continue computation. The callback will be invoked upon arrival of the imported object. The current implementation also has a load operation that is an import combined with a call to create a process.
Reference: [38] <author> J.C. Mallery. </author> <title> A Common LISP hypermedia server. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 239-247, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia <ref> [38] </ref>. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form 2 of code shipping is orthogonal to the Rover architecture.
Reference: [39] <author> L. B. Mummert, M. R. Ebling, and M. Satyanarayanan. </author> <title> Exploiting weak connectivity for mobile file access. </title> <booktitle> In Proc. of the Fifteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <year> 1995. </year>
Reference-contexts: A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda also supports low bandwidth networks, as well as intermittent communication <ref> [39] </ref>. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts [48]. The Little Work Project caches files to smooth disconnection from an AFS file system [23]. Conflicts are detected and reported to the user.
Reference: [40] <institution> National Center for Supercomputing Applications. Common Gateway Interface. University of Illinois in Urbana-Champaign, </institution> <year> 1995. </year>
Reference-contexts: The Rover server is a secure setuid application that authenticates requests from client applications, mediates access to RDOs, and provides a Tcl/Tk execution environment for RDOs from client applications. We provide two implementations of Rover servers. One is compatible with the Common Gateway Interface (CGI) <ref> [40] </ref> of standard, unmodified HTTP compliant servers (e.g., CERN or NCSA's httpd servers). The other implementation is a standalone TCP/IP server which provides a very restricted subset of HTTP. Both servers offer identical functionality and communication interfaces to Rover client applications.
Reference: [41] <institution> National Center for Supercomputing Applications. Mosaic. University of Illinois in Urbana-Champaign, </institution> <year> 1995. </year>
Reference-contexts: Experience with applications developed using Rover shows that it is possible to build interactive applications that isolate a user from the loss of network connectivity and from limited network bandwidth. For example, in the case of NCSA's Mosaic WWW browser <ref> [41] </ref>, Rover delivers information immediately if it is available in the local Rover cache; in the case of a cache miss, it queues a request and returns immediately. The user is later notified when the information arrives. <p> When a connection becomes available, the page is automatically requested. In the meantime, the user can continue to browse already available pages and issue additional requests for pages without waiting. The proxy will also directly control NCSA's Mosaic <ref> [41] </ref> and NCC's Netscape Navigator [42] browsers using their remote control interfaces. Cached Web documents are used whenever possible, to allow for fast access in the absence of a network connection.
Reference: [42] <author> Netscape Communications Corporation. </author> <title> Netscape Navigator. </title> <address> Mountain View, CA, </address> <year> 1995. </year>
Reference-contexts: When a connection becomes available, the page is automatically requested. In the meantime, the user can continue to browse already available pages and issue additional requests for pages without waiting. The proxy will also directly control NCSA's Mosaic [41] and NCC's Netscape Navigator <ref> [42] </ref> browsers using their remote control interfaces. Cached Web documents are used whenever possible, to allow for fast access in the absence of a network connection. If an uncached file is requested and the network is unavailable, an entry is created in a displayed list of outstanding and satisfied requests.
Reference: [43] <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Implementing RDOs involves three somewhat conflicting goals: (1) safe execution, (2) portability, and (3) efficiency. These goals can be achieved by using approaches such as code inspection [12] and sandboxing [58], pointer-safe languages [18, 47], or code interpretation with limited environments (e.g., Safe-Tcl <ref> [43] </ref>). In our initial implementation we use interpreted Tcl. 3.4 User Notification Because the mobile environment may rapidly change from moment to moment, it is important to present the user with information about its current state. <p> The Rover implementation is composed of three primary layers: server and client applications, system support, and transport. We discuss each layer in the following sections. 5.1 Client and Server Application Layer The highest layer in Rover is the client and server application layer. Rover applications consist of Tcl/Tk scripts <ref> [43] </ref> and binary applications. The Tcl/Tk scripts are interpreted using a Tcl/Tk interpreter environment that has some simple C extensions to support RDOs (see Table 1) and linked with a Rover library. The library provides functions for communicating with the Rover access manager.
Reference: [44] <institution> J.K. Ousterhout. The Tcl/Tk project at Sun Labs, </institution> <year> 1995. </year> <note> http://- www.sunlabs.com/research/tcl. </note>
Reference-contexts: Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents <ref> [44] </ref>, and Java [18]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form 2 of code shipping is orthogonal to the Rover architecture.
Reference: [45] <author> J. B. Postel. </author> <title> Simple Mail Transfer Protocol. Internet RFC 821, </title> <month> August </month> <year> 1982. </year>
Reference-contexts: Our research prototype is modular, and favors ease of implementation and experimentation over performance. The Rover toolkit supports several transport protocols (e.g., HTTP and Simple Mail Transport Protocol (SMTP) <ref> [45] </ref>) over various communication media (e.g., Ethernet, WaveLAN, and phone lines). SMTP allows Rover to exploit E-mail for queued communication. We have developed three Rover-based applications: an E-mail reader, a calendar program, and a WWW browser proxy that provides two non-blocking versions of common WWW browsers.
Reference: [46] <author> M. L. Powell and B. P. Miller. </author> <title> Process migration in DEMOS/MP. </title> <booktitle> In Proc. of the Ninth Symposium on Operating System Principles (SOSP), </booktitle> <pages> pages 110-119, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [60]. RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration <ref> [14, 46, 51, 56] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18].
Reference: [47] <editor> J. Rees and W. Clinger. </editor> <title> The revised 3 report on the algorithmic language Scheme. </title> <type> AI Memo 848a, </type> <institution> Massachusetts Institute of Technology Artificial Intelligence Laboratory, Cambridge, Massachusetts, </institution> <month> September </month> <year> 1986. </year>
Reference-contexts: This feature is particularly important for mobile hosts with limited resources. Implementing RDOs involves three somewhat conflicting goals: (1) safe execution, (2) portability, and (3) efficiency. These goals can be achieved by using approaches such as code inspection [12] and sandboxing [58], pointer-safe languages <ref> [18, 47] </ref>, or code interpretation with limited environments (e.g., Safe-Tcl [43]). In our initial implementation we use interpreted Tcl. 3.4 User Notification Because the mobile environment may rapidly change from moment to moment, it is important to present the user with information about its current state.
Reference: [48] <author> P. Reiher, J. Heidemann, D. Ratner, G. Skinner, and G. J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Summer 1994 Technical Conference, </booktitle> <pages> pages 183-195, </pages> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda also supports low bandwidth networks, as well as intermittent communication [39]. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts <ref> [48] </ref>. The Little Work Project caches files to smooth disconnection from an AFS file system [23]. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [22]. The Bayou project [11, 54] defines an architecture for sharing data among mobile users.
Reference: [49] <author> D. Riecken, </author> <title> editor. Intelligent Agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: No additional support for disconnected operation, such as Rover's queued RPC, is included in BNU. A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [60]. RDOs can be viewed as simple Agents <ref> [49] </ref> or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18].
Reference: [50] <author> M. Satyanarayanan, J. J. Kistler, L. B. M., M. R. Ebling, P. Kumar, and Q. Lu. </author> <title> Experience with disconnected operation in a mobile environment. </title> <booktitle> In Proc. USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: The Coda project pioneered the provision of distributed services for mobile clients. In particular, it investigated how to make file systems run well on mobile computers by using optimistic concur-rency control and prefetching <ref> [30, 50] </ref>. Coda logs all updates to the file system during disconnection and replays the log on reconnection. Coda provides automatic conflict resolution mechanisms for directories and files, and uses Unix file naming semantics to invoke application-specific conflict resolution programs at the file system level [31].
Reference: [51] <author> J. M. Smith. </author> <title> A survey of process migration mechanisms. </title> <journal> Operating Systems Review, </journal> <volume> 22(3) </volume> <pages> 28-40, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [60]. RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration <ref> [14, 46, 51, 56] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18].
Reference: [52] <author> K. Sollins and L. Masinter. </author> <title> Functional Requirements for Uniform Resource Names. </title> <institution> Internet RFC1737, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Our initial implementation of Rover permits applications full access to the objects of the World-Wide Web (WWW) [4]. Objects are named using Universal Resource Names (URNs) <ref> [52] </ref> and our implementation is fully compatible with the HyperText Transport Protocol (HTTP) [5]. Our research prototype is modular, and favors ease of implementation and experimentation over performance.
Reference: [53] <author> D. B. Terry, A. J. Demers, K. Petersen, M. J. Spreitzer, M. M. Theimer, and B. B. Welch. </author> <title> Session guarantees for weakly consistent replicated data. </title> <booktitle> In Proc. of the 1994 Symposium on Parallel and Distributed Information Systems, </booktitle> <pages> pages 140-149, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [22]. The Bayou project [11, 54] defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [55] and session guarantees for weakly-consistent replicated data <ref> [53] </ref>. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database. Rover borrows the notions of tentative data, session guarantees, and the calendar tool example from the Bayou project.
Reference: [54] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. </author> <title> Managing update conflicts in a weakly connected replicated storage system. </title> <booktitle> In Proc. of the Fifteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <year> 1995. </year>
Reference-contexts: The Little Work Project caches files to smooth disconnection from an AFS file system [23]. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [22]. The Bayou project <ref> [11, 54] </ref> defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [55] and session guarantees for weakly-consistent replicated data [53]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database.
Reference: [55] <author> M. Theimer, A. Demers, K. Petersen, M. Spreitzer, D. Terry, and B. Welch. </author> <title> Dealing with tentative data values in disconnected work groups. </title> <booktitle> In Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 192-195, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [22]. The Bayou project [11, 54] defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values <ref> [55] </ref> and session guarantees for weakly-consistent replicated data [53]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database. Rover borrows the notions of tentative data, session guarantees, and the calendar tool example from the Bayou project.
Reference: [56] <author> M. Theimer, K. Lantz, and D. Cheriton. </author> <title> Preemptable remote execution facilities for the V-System. </title> <booktitle> In Proc. of the Tenth Symposium on Operating System Principles (SOSP), </booktitle> <pages> pages 2-12, </pages> <address> Orcas Island, WA, </address> <month> December </month> <year> 1985. </year>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [60]. RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration <ref> [14, 46, 51, 56] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript [63], Ousterhout's Tcl agents [44], and Java [18].
Reference: [57] <author> J. Vittal. </author> <title> Active message processing: Messages as messengers. </title> <booktitle> In Proc. of IFIP TC-6 International Symposium on Computer Message Systems, </booktitle> <pages> pages 175-195, </pages> <address> Ottawa, Canada, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: However, their approach was to implement a browser from scratch; as such, their approach is not compatible with existing browsers. Several systems use E-mail messages as a transport medium, and obtain similar benefits as we obtain by using QRPC. The Active Message Processing project <ref> [57] </ref> has developed various applications, including a distributed calendar, which use E-mail messages as a transport medium.
Reference: [58] <author> R. Wahbe, S. Lucco, T. Anderson, and S. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> In Proc. of the Fourteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 203-216, </pages> <address> Asheville, NC, </address> <year> 1993. </year>
Reference-contexts: This feature is particularly important for mobile hosts with limited resources. Implementing RDOs involves three somewhat conflicting goals: (1) safe execution, (2) portability, and (3) efficiency. These goals can be achieved by using approaches such as code inspection [12] and sandboxing <ref> [58] </ref>, pointer-safe languages [18, 47], or code interpretation with limited environments (e.g., Safe-Tcl [43]). In our initial implementation we use interpreted Tcl. 3.4 User Notification Because the mobile environment may rapidly change from moment to moment, it is important to present the user with information about its current state.
Reference: [59] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The LOCUS distributed operating system. </title> <booktitle> In Proc. of the Ninth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 49-70, </pages> <address> Bretton Woods, NH, </address> <year> 1983. </year>
Reference-contexts: The application is a centralized client-server system with one server at DEC SRC that automatically dispatches tasks and collects results. Our research borrows from early work on replication for nonmobile distributed systems. In particular, we borrow from Locus <ref> [59] </ref> (type-specific conflict resolving) and Cedar [17] (check-in, check-out model of data sharing). 3 Rover Programming Model In this section, we discuss the Rover programming model, QRPC, RDOs, user interface issues, and Rover application development. 3.1 Overview The Rover toolkit offers applications a distributed object system based on a client/server architecture.
Reference: [60] <author> T. Watson. </author> <title> Application design for wireless computing. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 91-94, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: No additional support for disconnected operation, such as Rover's queued RPC, is included in BNU. A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions <ref> [60] </ref>. RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38].
Reference: [61] <author> T. Watson and B. Bershad. </author> <title> Local area mobile computing on stock hardware and mostly stock software. </title> <booktitle> In Proc. USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 109-116, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Furthermore, it does not provide a mechanism for non-blocking communication, and their proposed object model does not support method execution at the servers. The BNU project implements an RPC-driven application framework on mobile computers. It allows for function shipping by downloading Scheme functions for interpretation <ref> [61] </ref>. Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces [33]. The BNU environment includes proxies on stationary hosts for hiding the mobility of the system.
Reference: [62] <author> W. Weihl and B. Liskov. </author> <title> Implementation of Resilient, Atomic Data Types. </title> <journal> ACM Trans. Prog. Lang. Syst., </journal> <volume> 7(2) </volume> <pages> 244-269, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In Rover, every object has a home server. A mobile host imports objects into its local cache and exports updated objects back to their home servers. Update conflicts are detected at the server, where Rover attempts to reconcile them. Because Rover can employ type-specific concurrency control <ref> [62] </ref>, we expect that many conflicts can be resolved automatically. In addition, we expect that certain applications will be structured as a collection of independent atomic actions [16], where the importing action sets an appropriate application-level lock.
Reference: [63] <author> J. E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace, </title> <booktitle> 1994. </booktitle> <pages> 16 </pages>
Reference-contexts: RDOs can be viewed as simple Agents [49] or as a light-weight form of process migration [14, 46, 51, 56]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [7], Active Pages [21], Dynamic Documents [26], and LISP Hypermedia [38]. RDOs are probably closest to Telescript <ref> [63] </ref>, Ousterhout's Tcl agents [44], and Java [18]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form 2 of code shipping is orthogonal to the Rover architecture.
References-found: 63

