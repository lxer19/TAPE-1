URL: http://www.cs.washington.edu/homes/tiwary/workshop/giuseppe.menga.ps
Refering-URL: http://www.cs.washington.edu/homes/tiwary/workshop/contacts.html
Root-URL: 
Email: Email menga@polito.it  
Phone: ph. +39-11-564-(7012), fax (7099)  
Title: The G++ Pattern Language: A Framework, a Method and an Environment for the Object Oriented
Author: Giuseppe Menga 
Keyword: and common project repository.  Keywords: Object Oriented Design, Patterns in Programming Languages, Concurrent and Distributed Computing, Proto-typing, CASE Environments.  
Note: This ten year long search has been motivated by the Computer Integrated Manufacturing (CIM) domain and has  as G++.  
Address: Corso Duca degli Abruzzi n. 24 10129 Torino Italy  
Affiliation: Dept. of Automatica e Informatica Politecnico di Torino  
Abstract: Three lessons have been learned by applying the Object Oriented Approach to the design of large concurrent and distributed software systems (programming in the large): * adopt a unitary computational model to favor the use of frameworks of classes; * approach the design with an evolutionary development process, to split in time design decisions and so cope with complexity; * use integrate CASE tools for the automatic transformation through the phases of the design, for the automatic code generation of the implementation from specifications and object model, for documentation 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Alexander. </author> <title> The Timeless Way of Building. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: In this sense our "pattern language" is closer, than any previous work in the OO context, to the original Alexander's idea of pattern language <ref> [1] </ref>, and is the best interpretation that can be offered in such a domain of a standard architecture. The CIM domain by its very nature, as a point of aggregation of heterogeneous elements, is a challenging environment in which to define architectural patterns and frameworks of classes.
Reference: [2] <author> G. Booch. </author> <title> Object-Oriented Design with Applications Benjamin/Cummings, </title> <year> 1991. </year>
Reference-contexts: these connections between patterns, in fact, which creates the language and the use of this language results in the development process which actually is evolutionary, exploiting transformations which first map the analysis into a logical design to be locally prototyped, and then map the logical design into a physical design <ref> [2] </ref> which generates the distributed implementation. As a natural result the approach leads to a CASE environment, which has actually been developed in a time span of ten years, merging a framework of C++ classes supporting the patters and the tools which automate the development induced by the pattern language.
Reference: [3] <author> B. W. Boehm. </author> <title> A Spiral Model of Software Development and Enhancement IEEE Computer, </title> <month> May </month> <year> 1988. </year>
Reference-contexts: Operationally, development from specifications to design, following an evolutionary and eventually spiral model <ref> [3] </ref>, is possible if the repository maintains different representations (spaces) of the object model (analysis, logical design, physical design), and different definitions (let us say versions) of the same entity (prototype, proxy, implementation,..). This is easily guaranteed by an OO data-base.
Reference: [4] <author> P. Coad. </author> <title> Object Oriented Patterns. </title> <journal> Communication of the ACM, </journal> <month> September </month> <year> 1992. </year>
Reference: [5] <author> E. Gamma, R. Helm, R. Johnson, J. Vlissdes. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software Reading, </title> <publisher> MA; Addison-Wesley 1995. </publisher>
Reference-contexts: The former is an example of the Proxy, the latter of the Adapter pattern <ref> [5] </ref>. 4 The CASE Environment The functionalities of a CASE environment for large scale applications derive naturally from the Pattern Language, by the needs of supporting and automating several aspects of the development, in particular the transformations.
Reference: [6] <author> G. Menga, G. Elia, and M. Mancin. G++: </author> <title> An environment for object oriented design and prototyping of manufacturing systems. </title> <editor> In W. Gruver and G. Boudreaux, editors, </editor> <title> Intelligent Manufacturing: Programming Environments for CIM. </title> <publisher> Springer-Verlag Ltd., </publisher> <year> 1993. </year> <month> 7 </month>
Reference-contexts: Examples of application can be found in <ref> [6] </ref>. The computational model (architecture) and design method are contained in the patterns of the language, and are described in the next two sections 2 and 3. The characteristics of the development environment and of the framework of classes are described in the section 4.
Reference: [7] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. </author> <title> Object-Oriented Modeling and Design Prentice Hall, </title> <address> Englewood Cliffs, NJ (USA), </address> <year> 1991. </year>
Reference: [8] <author> R. M. Soley. </author> <title> Object Management Architecture Guide OMG, Inc. 492 Old Connecticut path Framingham, </title> <address> Ma 01701, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Finally to allow the interaction with the external world a design environment for large scale applications should also, and actually G++ does, be able to generate neutral files (e.g. CORBA-IDL/ODMG-ODL <ref> [8, 9] </ref>) for exporting interfaces, or conversely to import neutral files to transform into interface or prototype representations. 4.1 The Frameworks The automatic processing of the specification or of the data contained in the prototype is meaningfull if frameworks of basic classes support the environment, offering low level implementation of the
Reference: [9] <author> R.G.G. Cattell. </author> <title> Object Database Standard: ODMG - 93 S. </title> <publisher> Francisco Morgan Kaufmann Publisher Inc. </publisher> <year> 1994 </year>
Reference-contexts: Finally to allow the interaction with the external world a design environment for large scale applications should also, and actually G++ does, be able to generate neutral files (e.g. CORBA-IDL/ODMG-ODL <ref> [8, 9] </ref>) for exporting interfaces, or conversely to import neutral files to transform into interface or prototype representations. 4.1 The Frameworks The automatic processing of the specification or of the data contained in the prototype is meaningfull if frameworks of basic classes support the environment, offering low level implementation of the
Reference: [10] <author> A. Aarsten, G. Elia, G. Menga. G++: </author> <title> A Pattern Language for Computer Integrated Manufacturing PloP'94 conference 1994, also in Coplien Pattern Language of Program Design - Addison-Wesley 1995. </title>
Reference-contexts: Consistency in the transition from prototype to reality can be guaranteed by exploiting either polymorphism or delegation. The reality seen from the client program may assume different forms: remote object <ref> [10] </ref> either a surrogate or a reference to an external object, as in CORBA, or local object with a remote control [11] a wrapper of an external or remote functionality, such as a (Computerized Numerical Control (CNC) or a Programmable Logical Control (PLC) in shop-floor factory automation, the libraries of a
Reference: [11] <author> A. Aarsten, G. Menga, L. Mosconi. </author> <title> Object Oriented Design Patterns in Reactive Systems PloP'95 Conference Urbana-Champaign 1995. </title> <type> 8 </type>
Reference-contexts: The reality seen from the client program may assume different forms: remote object [10] either a surrogate or a reference to an external object, as in CORBA, or local object with a remote control <ref> [11] </ref> a wrapper of an external or remote functionality, such as a (Computerized Numerical Control (CNC) or a Programmable Logical Control (PLC) in shop-floor factory automation, the libraries of a graphical user interface, or the server of a (non-necessarily OO) DBMS.
References-found: 11

