URL: http://www.cs.jhu.edu/labs/cgc/workshop/full/S200.ps
Refering-URL: http://www.cs.jhu.edu/labs/cgc/cgc_conf.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fdyhsu, latombe, rajeevg@cs.stanford.edu  
Title: Path Planning and Expansive Configuration Spaces  
Author: David Hsu Jean-Claude Latombe Rajeev Motwani 
Address: Stanford, CA 94305  
Affiliation: Department of Computer Science Stanford University  
Abstract: We introduce the notion of expansiveness to characterize a family of robot configuration spaces whose connectivity can be effectively captured by a roadmap of randomly-sampled milestones. The analysis of expansive configuration spaces has inspired us to develop a new randomized planning algorithm. This new algorithm samples only the portion of the configuration space that is relevant to the current query, avoiding the cost of precomputing a roadmap for the entire configuration space. Thus, it is well-suited for problems where only one single query is submitted for a given environment. The algorithm has been implemented and successfully applied to complex assembly maintainability problems from the automotive industry. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 113-120, </pages> <year> 1996. </year> <title> 2 Due to the proprietary nature of these data, we cannot show images here. </title> <type> 9 </type>
Reference-contexts: It has been implemented for articulated robots with up to 12 dofs in both 2-D and 3-D workspaces, and tested on difficult problems. There are other techniques for constructing roadmaps, including using random reflections at C-space obstacles [8], and sampling on contact surfaces in the configuration space <ref> [1] </ref>. Other approaches that exploit randomization include [13], which investigates techniques to limit the search of the configuration space. These randomized planners have demonstrated good performance empirically, but are not complete.
Reference: [2] <author> J. Barraquand, L. Kavraki, J.-C. Latombe, T.-Y. Li, R. Motwani, and P. Raghavan. </author> <title> A random sampling scheme for path planning. </title> <editor> In G. Giralt and G. Hirzinger, editors, </editor> <booktitle> Proc. of the 7th Int. Symp. on Robotics Research, </booktitle> <pages> pages 249-264, </pages> <year> 1996. </year>
Reference-contexts: Recently, randomization has been successfully exploited to provide an efficient and general path-planning scheme for robots with many dofs <ref> [2] </ref>. The Randomized Path Planner (RPP) [3] searches for a path by following the negated gradient of an artificial potential field constructed over the configuration space and uses random walks to escape local minima of the potential function.
Reference: [3] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: Recently, randomization has been successfully exploited to provide an efficient and general path-planning scheme for robots with many dofs [2]. The Randomized Path Planner (RPP) <ref> [3] </ref> searches for a path by following the negated gradient of an artificial potential field constructed over the configuration space and uses random walks to escape local minima of the potential function.
Reference: [4] <author> D. Challou and M. Gini. </author> <title> Parallel robot motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: It has been used in practice with good results, but there are several cases where RPP behaves poorly <ref> [4] </ref>. Usually this happens when the robot is trapped in local minima and the only way to escape is to go through a narrow passage. The probability that a random walk goes through a narrow passage is extremely small.
Reference: [5] <author> H. Chang and T.-Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <year> 1995. </year>
Reference-contexts: A good example would be assembly maintainability problems, where we must determine whether there exists a path to remove a part from an assembly for maintenance <ref> [5] </ref>. For single-query path planning problems, the configuration space may contain many connected components, but at most two of them are relevant to the query being processed. In this setting, it is clearly unreasonable to perform expensive preprocessing to construct a roadmap of the entire configuration space.
Reference: [6] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedure for computing distance between objects in three-dimensional space. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 4(2), </volume> <year> 1988. </year>
Reference-contexts: Our experience seems to indicate that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, notably, <ref> [6, 7, 17] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Assume that clearance computes the distance between a robot and obstacles. Let p and q have clearance and , respectively.
Reference: [7] <author> S. Gottschalk, M. C. Lin, and D. Manocha. OBBtree: </author> <title> A hierarchical structure for rapid interference detection. </title> <booktitle> In SIGGRAPH '96 Proc., </booktitle> <year> 1996. </year>
Reference-contexts: Our experience seems to indicate that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, notably, <ref> [6, 7, 17] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Assume that clearance computes the distance between a robot and obstacles. Let p and q have clearance and , respectively.
Reference: [8] <author> T. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion planning for many degrees of freedom random reflections at c-space obstacles. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 3318-3323, </pages> <year> 1994. </year>
Reference-contexts: It has been implemented for articulated robots with up to 12 dofs in both 2-D and 3-D workspaces, and tested on difficult problems. There are other techniques for constructing roadmaps, including using random reflections at C-space obstacles <ref> [8] </ref>, and sampling on contact surfaces in the configuration space [1]. Other approaches that exploit randomization include [13], which investigates techniques to limit the search of the configuration space. These randomized planners have demonstrated good performance empirically, but are not complete.
Reference: [9] <author> L. Kavraki, M. N. Kolountzakis, and J.-C. Latombe. </author> <title> Analysis of probabilistic roadmaps for path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 3020-3025, </pages> <year> 1996. </year>
Reference-contexts: Note that if no path exists, the planner may never terminate. There have been several attempts to provide theoretical justification for the observed success of these planners. In [14], potential field planners are analyzed based on the study of Markov chains and diffusion processes. In <ref> [9] </ref>, an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists.
Reference: [10] <author> L. Kavraki and J.-C. Latombe. </author> <title> Randomized preprocessing of configurations space for fast path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 2138-2139, </pages> <year> 1994. </year>
Reference-contexts: Usually this happens when the robot is trapped in local minima and the only way to escape is to go through a narrow passage. The probability that a random walk goes through a narrow passage is extremely small. Another planner, described in <ref> [10] </ref>, uses random sampling to construct a roadmap of the configuration space and tries to find a path between any two input configurations by connecting them to the roadmap. After paying a relatively high cost for building the roadmap, it answers queries very quickly. <p> It would not only relieve the user of the burden of specifying intermediate points, but also help in situations where narrow passages are not obvious to the user. We also plan to integrate the new planner with the roadmap planner <ref> [10] </ref> for multiple-query path planning problems. Currently the roadmap planner samples C uniformly at random from the configuration space in order to generate milestones. Typically most of the configurations picked (more than 99:5%) will be in collision with obstacles [10] and discarded. <p> also plan to integrate the new planner with the roadmap planner <ref> [10] </ref> for multiple-query path planning problems. Currently the roadmap planner samples C uniformly at random from the configuration space in order to generate milestones. Typically most of the configurations picked (more than 99:5%) will be in collision with obstacles [10] and discarded. It will be highly desirable to sample collision-free configurations more efficiently. One idea would be to sample uniformly a very small number of configurations from C and use the new planner to expand from these configurations in order to generate additional milestones.
Reference: [11] <author> L. Kavraki, J.-C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Randomized query processing in robot path planning. </title> <booktitle> In ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 353-362, </pages> <year> 1995. </year>
Reference-contexts: In [9], an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists. A variant of the roadmap planner is described in <ref> [11] </ref>, and the connectivity property of the roadmaps that it produces are analyzed under an assumption called *-goodness of the configuration space. Unfortunately this variant assumes the availability of a complete planner, which can be invoked to improve the connectivity of the roadmap. <p> Unlike <ref> [11] </ref>, there is no need for a complete planner here. Although the roadmap planner offers an efficient solution for multiple-query path planning problems, it is not suitable when only a single query is submitted for a given environment.
Reference: [12] <author> L. Kavraki, P. Svestka, J.-C. Latombe, and M. H. Overmars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration space. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <year> 1996. </year>
Reference: [13] <author> K. Kondo. </author> <title> Motion planning with six degrees of freedom by multistrategic bidirectional heuristic free-space enumeration. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 7(3), </volume> <year> 1991. </year>
Reference-contexts: There are other techniques for constructing roadmaps, including using random reflections at C-space obstacles [8], and sampling on contact surfaces in the configuration space [1]. Other approaches that exploit randomization include <ref> [13] </ref>, which investigates techniques to limit the search of the configuration space. These randomized planners have demonstrated good performance empirically, but are not complete. Some of them achieve the weaker notion of probabilistic completeness, i.e., that they find a path with high probability whenever one exists.
Reference: [14] <author> F. Lamiroux and J. P. Laumond. </author> <title> On the expected complexity of random path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 3014-3019, </pages> <year> 1996. </year>
Reference-contexts: Note that if no path exists, the planner may never terminate. There have been several attempts to provide theoretical justification for the observed success of these planners. In <ref> [14] </ref>, potential field planners are analyzed based on the study of Markov chains and diffusion processes. In [9], an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists.
Reference: [15] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Path planning is an important problem in robotics <ref> [15] </ref>. It also has applications in many other fields such as computer graphics, computer aided design and manufacturing, and stereotaxic radio-surgery. Given the geometry of a robot and obstacles, a planner is required to generate a collision-free path between an initial and a goal configuration. <p> Path smoothing. Usually the path generated by this method has too many zig-zags, but it can be smoothed by a simple algorithm <ref> [15, page 248] </ref>. 7 Experimental Results The planner is implemented in C++. Measurements reported in this section are the average of five independent runs for each problem.
Reference: [16] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: If the space is expansive, then it may be argued that the set of randomly sampled configurations indeed converges to the uniform distribution by drawing an analogy to rapidly mixing random walks on expander graphs <ref> [16, pages 143-155] </ref>. Connection. We now have two trees, T init and T goal . In the connection step, the planner tries to establish a path between q init and q goal . The algorithm is given below.
Reference: [17] <author> S. Quinlan. </author> <title> Efficient distance computation between non-convex objects. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pages 3324-3329, </pages> <year> 1994. </year>
Reference-contexts: Our experience seems to indicate that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, notably, <ref> [6, 7, 17] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Assume that clearance computes the distance between a robot and obstacles. Let p and q have clearance and , respectively.
Reference: [18] <author> J. H. Reif. </author> <title> Complexity of the mover's problem and generalizations. </title> <booktitle> In Proc. 20th IEEE Symp. on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 421-427, </pages> <year> 1979. </year>
Reference-contexts: Given the geometry of a robot and obstacles, a planner is required to generate a collision-free path between an initial and a goal configuration. This has been proven to be a hard problem <ref> [18] </ref>. There is strong evidence that a complete planner, i.e., a planner that finds a path whenever one exists and indicates that none exists otherwise, will take time exponential in the number of degrees of freedom (dof) of the robot.
Reference: [19] <author> K. Shoemake. </author> <title> Animating rotation with quaternion curves. </title> <booktitle> In Computer Graphics (SIGGRAPH '85 Proceedings), </booktitle> <volume> volume 19, </volume> <pages> pages 245-254, </pages> <year> 1985. </year> <month> 10 </month>
Reference-contexts: Compared to other representations such as Euler angles or transformation matrix, unit quaternion best reveals the topology of the 3-D rotation space. Its advantages include low memory usage and robustness against floating point errors. Interpolating between two quaternions is also very easy <ref> [19] </ref>. Distance between two configurations. We have used two distance metrics in our algorithm, dist c and dist w .
References-found: 19

