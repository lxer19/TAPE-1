URL: http://www.cs.pitt.edu/~gupta/research/Comp/toplas98.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/analysis.html
Root-URL: http://www.cs.pitt.edu
Title: A Practical Framework for Demand-Driven Interprocedural Data Flow Analysis  
Author: EVELYN DUESTERWALD, RAJIV GUPTA, and MARY LOU SOFFA 
Keyword: Categories and Subject Descriptors: D.3.4 [Programming Languages]: Processors|compilers;optimization; D.2.2 [Software Engineering]: Tools and Techniques; H.3.4 [Information Storage and Retrieval]: Systems and Software|question-answering General Terms: Algorithms, Performance, Experimentation Additional Key Words and Phrases: copy constant propagation, data flow analysis, def-use chains, demand-driven algorithms, distributive data flow frameworks, interprocedural data flow analysis, program optimizations  
Address: Pittsburgh  
Affiliation: University of  
Abstract: The high cost and growing importance of interprocedural data flow analysis have led to an increased interest in demand-driven algorithms. In this article, we present a general framework for developing demand-driven interprocedural data flow analyzers and report our experience in evaluating the performance of this approach. A demand for data flow information is modeled as a set of queries. The framework includes a generic demand-driven algorithm that determines the response to a query by iteratively applying a system of query propagation rules. The propagation rules yield precise responses for the class of distributive finite data flow problems. We also describe a two-phase framework variation to accurately handle nondistributive problems. A performance evaluation of our demand-driven approach is presented for two data flow problems, namely, reaching-definitions and copy constant propagation. Our experiments show that demand-driven analysis performs well in practice, reducing both time and space requirements when compared with exhaustive analysis. 
Abstract-found: 1
Intro-found: 1
Reference: <author> scaled 833Babich, W. and Jazayeri, M. </author> <year> 1978. </year> <title> The method of attributes for data flow analysis: Part II. Demand analysis. </title> <journal> Acta Inf. </journal> <volume> 10, 3 (Oct.), </volume> <pages> 265-272. </pages>
Reference: <author> Blume, W. and Eigenmann, R. </author> <year> 1995. </year> <title> Demand-driven symbolic range propagation. </title> <booktitle> In Proceedings of the Workshop on Languages and Compilers for Parallelism. Lecture Notes in Computer Science, </booktitle> <volume> vol. 1033, </volume> <publisher> Springer Verlag, Berlin, </publisher> <pages> 141-160. </pages>
Reference: <author> Bourdoncle, F. </author> <year> 1993. </year> <title> Abstract debugging of high-order imperative languages. </title> <booktitle> In Proceedings of the SIGPLAN 1993 Conference on Programming Language Design and Implementation. ACM, </booktitle> <address> New York, </address> <pages> 36-45. </pages>
Reference: <author> Burke, M. </author> <year> 1987. </year> <title> An interval analysis approach toward exhaustive and incremental data flow analysis. </title> <type> Tech. Rep. RC 12702, </type> <institution> IBM Thomas J. Watson Research Center, Yorktown Heights, N.Y. 38 Evelyn Duesterwald et al. </institution>
Reference: <author> Choi, J., Cytron, R., and Ferrante, J. </author> <year> 1992. </year> <title> On the efficient engineering of ambitious program analysis. </title> <journal> IEEE Trans. Softw. Eng. </journal> <volume> 20, 2 (Feb.), </volume> <pages> 105-114. </pages>
Reference: <author> Choi, J.-D., Burke, M., and Carini, P. </author> <year> 1993. </year> <title> Efficient flow-sensitive interprocedu-ral computation of pointer-induced aliases and side effects. </title> <booktitle> In Proceedings of the 20th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 232-245. </pages>
Reference: <author> Cooper, K. </author> <year> 1985. </year> <title> Analyzing aliases of reference formal parameters. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 281-290. </pages>
Reference: <author> Cooper, K., Hall, M., and Kennedy, K. </author> <year> 1992. </year> <title> Procedure cloning. </title> <booktitle> In Proceedings of the IEEE 1992 International Conference on Computer Languages. </booktitle> <pages> 96-105. </pages>
Reference: <author> Cooper, K. and Kennedy, K. </author> <year> 1988. </year> <title> Interprocedural side-effect analysis in linear time. </title> <booktitle> Proceedings of the SIGPLAN 1988 Symposium on Compiler Construction, published in SIG-PLAN Not. </booktitle> <volume> 23, </volume> <month> 7 (June), </month> <pages> 57-66. </pages>
Reference: <author> Cousot, P. </author> <year> 1981. </year> <title> Semantic foundations of program analysis. In Program Flow Analysis: Theory and Applications, </title> <editor> S. Muchnick and N. Jones, Eds. </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <pages> 303-342. </pages>
Reference: <author> Cousot, P. and Cousot, R. </author> <year> 1978. </year> <title> Static determination of dynamic properties of recursive procedures. </title> <booktitle> In Proceedings of the IFIP Conference on Programming Concepts, </booktitle> <editor> E. Neuhold, Ed. </editor> <publisher> North-Holland Pub. Co., </publisher> <pages> 237-277. </pages>
Reference: <author> Cytron, R. and Gershbein, R. </author> <year> 1993. </year> <title> Efficient accommodation of may-alias information in SSA form. </title> <booktitle> In Proceedings of the SIGPLAN 1993 Conference on Programming Language Design and Implementation. ACM, </booktitle> <address> New York, </address> <pages> 36-45. </pages>
Reference: <author> Duesterwald, E. </author> <year> 1996. </year> <title> A demand-driven approach for efficient interprocedural data flow analysis. </title> <type> Ph.D. Thesis, </type> <institution> Univ. of Pittsburgh, </institution> <address> Pittsburgh, Pa. </address>
Reference: <author> Duesterwald, E., Gupta, R., and Soffa, M. </author> <year> 1992. </year> <title> Rigorous data flow testing through output influences. </title> <booktitle> In Proceedings of the 2nd Irvine Software Symposium. </booktitle> <pages> 131-145. </pages>
Reference: <author> Duesterwald, E., Gupta, R., and Soffa, M. </author> <year> 1995. </year> <title> Demand-driven computation of interprocedural data flow. </title> <booktitle> In Proceedings of the 22nd ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 37-48. </pages>
Reference: <author> Emami, M., Ghiya, R., and Hendren, L. </author> <year> 1994. </year> <title> Context-sensitive interprocedural points-to analysis on the presence of function pointers. </title> <booktitle> In Proceedings of the SIGPLAN 1994 Conference on Programming Language Design and Implementation. ACM, </booktitle> <address> New York, </address> <pages> 242-256. </pages>
Reference: <author> Frankl, P. and Weyuker, E. </author> <year> 1988. </year> <title> An applicable family of data flow testing criteria. </title> <journal> IEEE Trans. Softw. Eng. SE-14, </journal> <volume> 10 (Oct.), </volume> <pages> 1483-1498. </pages>
Reference: <author> Griswold, W. and Notkin, D. </author> <year> 1993. </year> <title> Automated assistance for program restructuring. </title> <journal> ACM Trans. Softw. Eng. </journal> <volume> 2, </volume> <month> 3 (July), </month> <pages> 228-269. </pages>
Reference: <author> Hankin, C. and LeMetayer, D. </author> <year> 1994. </year> <title> A type-based framework for program analysis. </title> <booktitle> In Proceedings of the 1st International Static Analysis Symposium. </booktitle> <pages> 380-394. </pages>
Reference: <author> Horwitz, S., Reps, T., and Sagiv, M. </author> <year> 1995a. </year> <title> Demand interprocedural dataflow analysis. </title> <booktitle> In Proceedings of the 3rd ACM SIGSOFT Symposium on the Foundations of Software Engineering. ACM, </booktitle> <address> New York. </address>
Reference: <author> Horwitz, S., Reps, T., and Sagiv, M. </author> <year> 1995b. </year> <title> Demand interprocedural dataflow analysis. </title> <type> Tech. Rep. 1283, </type> <institution> Computer Science Dept., Univ. of Wisconsin, Madison, Wisc. </institution> <month> Aug. </month>
Reference: <author> Hughes, J. and Launchbury, J. </author> <year> 1992. </year> <title> Reversing abstract interpretations. </title> <booktitle> In Proceedings of the 4th European Symposium on Programming. Lecture Notes in Computer Science, </booktitle> <volume> vol. 582, </volume> <publisher> Springer Verlag, Berlin, </publisher> <pages> 269-286. </pages>
Reference: <author> Jones, N. and Mycroft, A. </author> <year> 1986. </year> <title> Data flow analysis of applicative programs using minimal function graphs. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 296-306. </pages>
Reference: <author> Kam, J. and Ullman, J. </author> <year> 1977. </year> <title> Monotone data flow analysis frameworks. </title> <journal> Acta Inf. </journal> <volume> 7, </volume> <month> 3 (July), </month> <pages> 305-317. </pages>
Reference: <author> Knoop, J. and Steffen, B. </author> <year> 1992. </year> <title> The interprocedural coincidence theorem. </title> <booktitle> In Proceedings of the 4th International Conference on Compiler Construction. Lecture Notes in Computer Science, </booktitle> <volume> vol. 641, </volume> <publisher> Springer Verlag, Berlin, </publisher> <pages> 125-140. </pages>
References-found: 25

