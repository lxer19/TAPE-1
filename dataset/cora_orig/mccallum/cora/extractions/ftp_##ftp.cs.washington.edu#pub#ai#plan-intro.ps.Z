URL: ftp://ftp.cs.washington.edu/pub/ai/plan-intro.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Email: weld@cs.washington.edu  
Title: An Introduction to Least Commitment Planning  
Author: Daniel S. Weld 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Note: To Appear in AI Magazine, Summer/Fall 1994.  
Abstract: Recent developments have clarified the process of generating partially ordered, partially specified sequences of actions whose execution will achive an agent's goal. This paper summarizes a progression of least commitment planners, starting with one that handles the sim ple strips representation, and ending with one that manages actions with disjunctive precondition, conditional effects and universal quantification over dynamic universes. Along the way we explain how Chapman's formulation of the Modal Truth Criterion is misleading and why his NP-completeness result for reasoning about plans with conditional effects does not apply to our planner. 
Abstract-found: 1
Intro-found: 1
Reference: [ Allen et al., 1990 ] <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: There's much more of interest, but we can't describe it here. See <ref> [ Allen et al., 1990 ] </ref> for the tip of the iceberg.
Reference: [ Ambros-Ingerson and Steel, 1988 ] <author> J Ambros-Ingerson and S. Steel. </author> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> pages 735-740, </pages> <year> 1988. </year>
Reference-contexts: The nec 15 This point (first suggested by <ref> [ Ambros-Ingerson and Steel, 1988 ] </ref> ) is actually rather subtle and other possibilities have been explored.
Reference: [ Barrett and Weld, 1993 ] <author> A. Barrett and D. Weld. </author> <title> Characterizing subgoal interactions for planning. </title> <booktitle> In Proc. 13th Int. Joint Conf. on A.I., </booktitle> <pages> pages 1388-1393, </pages> <month> September </month> <year> 1993. </year>
Reference: [ Barrett and Weld, 1994 ] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: Evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <note> 1994. To appear. Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference: [ Barrett et al., 1993 ] <author> A. Barrett, K. Golden, J.S. Penberthy, and D. Weld. </author> <note> UCPOP user's manual, (version 2.0). Technical Report 93-09-06, </note> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> September </month> <year> 1993. </year> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: Lansky, 1993, Pollack, 1992, Wilkins, 1988b ] for discussion of this topic. 24 This technique was first used in the Gordius planner [ Simmons, 1988a, Simmons, 1992 ] . * A set of domain theories (including those used in this paper and many more) for experimentation. * A users manual <ref> [ Barrett et al., 1993 ] </ref> The planner is available via anonymous FTP on june.cs.washington.edu as the compressed file ftp/pub/ai/ucpop.tar.Z (use binary mode for transfer). 8 Advanced Topics The discussion of Sections 2-7 has been restricted to goals of attainment. <p> These ideas were first explored in the Soar system [ Laird et al., 1987 ] and refined in the Prodigy planner [ Minton et al., 1989b, Minton et al., 1989a ] ; they have also been incorporated in the ucpop implementation as described in <ref> [ Barrett et al., 1993 ] </ref> . Machine learning techniques can be used to automatically derive these production rules.
Reference: [ Bylander, 1991 ] <author> T. Bylander. </author> <title> Complexity results for planning. </title> <booktitle> In Proceedings of IJCAI-91, </booktitle> <pages> pages 274-279, </pages> <year> 1991. </year>
Reference-contexts: Even simple propositional strips planning is PSPACE complete if actions can have more than two conjuncts in their preconditions <ref> [ Bylander, 1991 ] </ref> . In some cases, planning is undecidable [ Erol et al., 1992 ] . As a result, we can't expect any of the planners described in this paper to perform quickly on all problems all of the time.
Reference: [ Chapman, 1987 ] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: Line 3 needs to choose (a real nondeter 11 The pop planner is very similar to McAllester's snlp algorithm [ McAllester and Rosen-blitt, 1991 ] which is an improved formalization of Chapman's tweak planner <ref> [ Chapman, 1987 ] </ref> . The difference between snlp and pop concerns the definition of threat. snlp treats A t as a threat to a link A p Q !A c when A t has Q as an effect as well as when it has :Q as an effect. <p> Disjunctive effects only make sense when describing an action that has nondeterministic (random) effects. For example, the action of flipping a coin might be described with 27 Although the landmark paper "Planning for Conjunctive Goals" <ref> [ Chapman, 1987 ] </ref> clarified the topic of least commitment planning for many readers, it contained a number of results that were misleading. Chapman's central contribution was the Modal Truth Criterion (MTC), a formal specification for a simple version of nonlin's Question Answering algo rithm [ Tate, 1977 ] .
Reference: [ Charniak and McDermott, 1984 ] <author> E. Charniak and D. McDermott. </author> <title> Introduction to Artificial Intelligence. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1984. </year>
Reference: [ Collins and Pryor, 1992 ] <author> G. Collins and L. Pryor. </author> <title> Achieving the functionality of filter conditions in a partial order planner. </title> <booktitle> In Proc. 10th Nat. Conf. on A.I., </booktitle> <month> August </month> <year> 1992. </year>
Reference: [ Cormen et al., 1991 ] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: If a denotes the number of actions in a plan, it takes O (a 3 ) time to compute the transitive closure and O (a 2 ) space to store it, but queries can be answered quickly (see the Floyd-Warshall algorithm and discussion <ref> [ Cormen et al., 1991, p562 ] </ref> ).
Reference: [ Currie and Tate, 1991 ] <author> K. Currie and A. Tate. O-plan: </author> <title> the open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52(1) </volume> <pages> 49-86, </pages> <month> November </month> <year> 1991. </year> <month> 44 </month>
Reference: [ Draper et al., 1994 ] <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic plan-ning with information gathering and contingent execution. </title> <booktitle> In Proc. 2nd Int. Conf. on A.I. Planning Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: this language in [ Pednault, 1988 ] , but noone has implemented a planner for the full language. 25 Many other extensions have been implemented, however, including incomplete information, execution, and sensing operations [ Etzioni et al., 1992, Peot and Smith, 1992, Golden et al., 1994a ] , probabilistic planning <ref> [ Kushmerick et al., 1993, Draper et al., 1994 ] </ref> , decision theoretic specification of goals [ Williamson and Hanks, 1994 ] , and metric time and continuous change [ Penberthy and Weld, 1994 ] .
Reference: [ Drummond, 1989 ] <author> M. Drummond. </author> <title> Situated control rules. </title> <booktitle> In Proceedings of the First International Conference on Knowledge Representation and Reasoning, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: One class of behavioral constraints, called maintenance goals, can be implemented very easily on top of ucpop by an extension of the causal link threat detection meachnism; see [ Etzioni et al., 1992, Weld and Etzioni, 1994 ] . Drummond <ref> [ Drummond, 1989 ] </ref> describes a rich language for expressing goals, including those of maintenance. The Gem-plan planner also handles a wide range of behavioral goals [ Lansky, 1988 ] . zeno synthesizes plans to achieve universally quantified temporal and metric goals [ Penberthy and Weld, 1994 ] .
Reference: [ Erol et al., 1992 ] <author> K. Erol, D. Nau, and V. Subrahmanian. </author> <title> When is planning decidable? In Proc. </title> <booktitle> 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 222-227, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Even simple propositional strips planning is PSPACE complete if actions can have more than two conjuncts in their preconditions [ Bylander, 1991 ] . In some cases, planning is undecidable <ref> [ Erol et al., 1992 ] </ref> . As a result, we can't expect any of the planners described in this paper to perform quickly on all problems all of the time.
Reference: [ Etzioni and Segal, 1992 ] <author> Oren Etzioni and Richard Segal. </author> <title> Softbots as testbeds for machine learning. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Knowledge Assimilation, </booktitle> <address> Menlo Park, CA, 1992. </address> <publisher> AAAI Press. </publisher>
Reference: [ Etzioni et al., 1992 ] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992. </year> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: One class of behavioral constraints, called maintenance goals, can be implemented very easily on top of ucpop by an extension of the causal link threat detection meachnism; see <ref> [ Etzioni et al., 1992, Weld and Etzioni, 1994 ] </ref> . Drummond [ Drummond, 1989 ] describes a rich language for expressing goals, including those of maintenance.
Reference: [ Etzioni et al., 1993 ] <author> Oren Etzioni, Neal Lesh, and Richard Segal. </author> <title> Building softbots for UNIX (preliminary report). </title> <type> Technical Report 93-09-01, </type> <institution> University of Washington, </institution> <year> 1993. </year> <note> Available via anonymous FTP from pub/etzioni/softbots/ at cs.washington.edu. </note>
Reference: [ Etzioni, 1993a ] <author> Oren Etzioni. </author> <title> Acquiring search-control knowledge via static analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 62(2) </volume> <pages> 255-302, </pages> <month> August </month> <year> 1993. </year>
Reference: [ Etzioni, 1993b ] <author> Oren Etzioni. </author> <title> Intelligence without robots (a reply to brooks). </title> <journal> AI Magazine, </journal> <volume> 14(4), </volume> <month> December </month> <year> 1993. </year> <note> Available via anonymous FTP from pub/etzioni/softbots/ at cs.washington.edu. </note>
Reference: [ Etzioni, 1993c ] <author> Oren Etzioni. </author> <title> A structural theory of explanation-based learning. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 93-140, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Machine learning techniques can be used to automatically derive these production rules. Many learning algorithms have been explored, including explanation-based learning [ Minton, 1988 ] , static domain compilation <ref> [ Et zioni, 1993a, Etzioni, 1993c, Smith and Peot, 1993 ] </ref> , abstraction [ Knoblock, 1990 ] , and derivational analogy [ Veloso, 1992 ] .
Reference: [ Fikes and Nilsson, 1971 ] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <year> 1971. </year>
Reference-contexts: This yields a simple block-stacking challenge called the "Sussman Anomaly." 4 3 The acronym "strips" stands for "STanford Research Institute Problem Solver" a very famous and influential planner built in the 1970s to control an unstable mobile robot known affectionately as "Shakey" <ref> [ Fikes and Nilsson, 1971 ] </ref> . 4 The etymology of the name is a bit puzzling since the problem was discovered at MIT in 1973 by Allen Brown who noticed that the hacker problem solver had problems dealing 4 A domain theory, denoted with the Greek letter fl, forms the
Reference: [ Genesereth and Nilsson, 1987 ] <author> M. Genesereth and N. Nilsson. </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, CA, </address> <year> 1987. </year> <month> 45 </month>
Reference: [ Golden et al., 1994a ] <author> K. Golden, O. Etzioni, and D. Weld. </author> <title> Omnipotence without omniscience: Sensor management in planning. </title> <booktitle> In Proc. 12th Nat. Conf. on A.I., </booktitle> <month> July </month> <year> 1994. </year>
Reference: [ Golden et al., 1994b ] <author> K. Golden, O. Etzioni, and D. Weld. </author> <title> To Sense or Not to Sense? (A Planner's Question). </title> <type> Technical Report 94-01-03, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> January </month> <year> 1994. </year> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: See <ref> [ Golden et al., 1994b ] </ref> for more information. 39 (at B home) (at D home) (object D) (object B) (briefcase B) (at B home) ~ (in D B) (at D office) *end* *start* move B home office (briefcase B) (at B home) ~(in D B) (in ?o3 B) (at B
Reference: [ Haddawy and Hanks, 1992 ] <author> P. Haddawy and S. Hanks. </author> <title> Representations for Decision-Theoretic Planning: Utility Functions for Dealine Goals. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <year> 1992. </year>
Reference: [ Hammond, 1990 ] <author> K. Hammond. </author> <title> Explaining and repairing plans that fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45 </volume> <pages> 173-228, </pages> <year> 1990. </year>
Reference-contexts: choice of search space is critical to performance. 2 The Planning Problem Formally a planning algorithm has three inputs: 1. a description of the world in some formal language, 2. a description of the agent's goal (i.e., what behavior is desired) in some formal language, and 2 For example, chef <ref> [ Hammond, 1990 ] </ref> and spa [ Hanks and Weld, 1992 ] are good examples of a transformational case-based planners while prodigy/analogy [ Veloso and Carbonell, 1993 ] and Priar [ Kambhampati and Hendler, 1992 ] are case-based, refinement planners.
Reference: [ Hanks and McDermott, 1994 ] <author> Steve Hanks and Drew McDermott. </author> <title> Modeling a Dynamic and Uncertain World I: Symbolic and Probabilistic Reasoning about Change. </title> <journal> Artificial Intelligence, </journal> <volume> 65(2), </volume> <year> 1994. </year>
Reference: [ Hanks and Weld, 1992 ] <author> Steven Hanks and Daniel Weld. </author> <title> Systematic adaptation for case-based planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Case-Based Transform. on generative, refinement planning. In the next sections, we'll define the planning problem more precisely and then start describing algorithms for solving the problem. We restrict our attention to generative, refinement planning, but our algorithms can be adapted to transformational and case-based approaches <ref> [ Hanks and Weld, 1992 ] </ref> . <p> to performance. 2 The Planning Problem Formally a planning algorithm has three inputs: 1. a description of the world in some formal language, 2. a description of the agent's goal (i.e., what behavior is desired) in some formal language, and 2 For example, chef [ Hammond, 1990 ] and spa <ref> [ Hanks and Weld, 1992 ] </ref> are good examples of a transformational case-based planners while prodigy/analogy [ Veloso and Carbonell, 1993 ] and Priar [ Kambhampati and Hendler, 1992 ] are case-based, refinement planners. All the algorithms presented in the remainder of this paper are generative, refinement algorithms. <p> See also the case-based planner built in the pop (snlp) framework <ref> [ Hanks and Weld, 1992 ] </ref> and a similar system, [ Kambhampati and Hendler, 1992 ] , that was built on a reduction schemata planner.
Reference: [ Hanks, 1990 ] <author> S. Hanks. </author> <title> Practical temporal projection. </title> <booktitle> In Proc. 8th Nat. Conf. on A.I., </booktitle> <pages> pages 158-163, </pages> <month> August </month> <year> 1990. </year>
Reference: [ Kaelbling, 1988 ] <author> Leslie Pack Kaelbling. </author> <title> Goals as parallel program specifications. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [ Kambhampati and Hendler, 1992 ] <author> S. Kambhampati and J. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55 </volume> <pages> 193-258, </pages> <year> 1992. </year>
Reference-contexts: a description of the agent's goal (i.e., what behavior is desired) in some formal language, and 2 For example, chef [ Hammond, 1990 ] and spa [ Hanks and Weld, 1992 ] are good examples of a transformational case-based planners while prodigy/analogy [ Veloso and Carbonell, 1993 ] and Priar <ref> [ Kambhampati and Hendler, 1992 ] </ref> are case-based, refinement planners. All the algorithms presented in the remainder of this paper are generative, refinement algorithms. <p> See also the case-based planner built in the pop (snlp) framework [ Hanks and Weld, 1992 ] and a similar system, <ref> [ Kambhampati and Hendler, 1992 ] </ref> , that was built on a reduction schemata planner. Production-rule control can also be used to implement refinement by hierarchical reduction schemata, a traditional planning method [ Tate, 1977, Currie and Tate, 1991, Charniak and McDermott, 1984, Yang, 1990 ] .
Reference: [ Kambhampati and Nau, 1993 ] <author> S. Kambhampati and D.S. Nau. </author> <title> On the nature and role of modal truth criteria in planning. </title> <type> Technical Report ISR-TR-93-30, </type> <institution> University of Maryland, Inst. for systems research, </institution> <month> March </month> <year> 1993 1993. </year> <note> Submitted to Artificial Intelligence. </note>
Reference-contexts: In other words, the modified pop algorithm pushes the complexity of evaluating the MTC into the size of the search space. For an in depth discussion of this and other aspects of Chapman's results see <ref> [ Kambhampati and Nau, 1993 ] </ref> ; for more information on least commitment planning with conditional effects, see [ Pednault, 1991, Collins and Pryor, 1992, Penberthy and Weld, 1992 ] . a disjunctive effect (or (heads ?x) (tails ?x)).
Reference: [ Kambhampati, 1992 ] <author> S. Kambhampati. </author> <title> Characterizing multi-contributor causal structures for planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 116-125, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The idea of multiple causal support dates back to the nonlin planner [ Tate, 1977 ] , but see <ref> [ Kambhampati, 1992, Kambhampati, June 1992 ] </ref> for a clean formalization. See [ Kambhampati, 1993b ] for an excellent analysis of the different design choices in planning algorithms. It's also possible to build planners that handle even more expressive action languages than the ones described here.
Reference: [ Kambhampati, 1993a ] <author> S. Kambhampati. </author> <title> On the utility of systematicity: Understanding the tradeoffs between redundancy and commitment in partial-order planning. </title> <booktitle> In Proceedings of IJCAI-93, </booktitle> <pages> pages 1380-1385, </pages> <year> 1993. </year> <month> 46 </month>
Reference-contexts: It's widely believed that systematicity is interesting from a technical point of view, but does not necessarily lead to increased planning speed. See <ref> [ Kambhampati, 1993a ] </ref> for a discussion. 15 Algorithm: pop (hA; O; Li, agenda, fl) 1. Termination: If agenda is empty, return hA; O; Li. 2.
Reference: [ Kambhampati, 1993b ] <author> S. Kambhampati. </author> <title> Planning as refinement search: A unified framework for compariitive analysis of search space size and performance. </title> <institution> Department of Computer Science and Engineering TR-93-004, Arizona State University, </institution> <year> 1993. </year>
Reference-contexts: It is also important to note that the pop algorithm represents just one point on the spectrum of possible least commitment planning algorithms. Brevity precludes a discussion of other interesting possibilites, but see <ref> [ Kamb-hampati, 1993a, Kambhampati, 1993b ] </ref> for a survey of approaches and a fascinating taxonomy of design tradeoffs. 5 Action Schemata with Variables Since the idea of least commitment has proven useful, it is natural to wonder if one can take it further. <p> The nec 15 This point (first suggested by [ Ambros-Ingerson and Steel, 1988 ] ) is actually rather subtle and other possibilities have been explored. However, as explained in <ref> [ Peot and Smith, 1993, Kambhampati, 1993b ] </ref> , this approach has the advantage of both simplicity and efficiency. 24 essary operations include: the addition of constraints, testing for consistency, unification, and substitution of ground values. <p> The idea of multiple causal support dates back to the nonlin planner [ Tate, 1977 ] , but see [ Kambhampati, 1992, Kambhampati, June 1992 ] for a clean formalization. See <ref> [ Kambhampati, 1993b ] </ref> for an excellent analysis of the different design choices in planning algorithms. It's also possible to build planners that handle even more expressive action languages than the ones described here.
Reference: [ Kambhampati, June 1992 ] <author> S. Kambhampati. </author> <title> Multi-contributor causal structures for planning: A formalization and evaluation. </title> <type> Technical Report CS TR-92-019, </type> <institution> Dept. of Computer Science and Engg, Arizona State University, </institution> <month> June </month> <year> 1992. </year> <note> (To appear in Artificial Intelligence, Fall 1994). </note>
Reference-contexts: The idea of multiple causal support dates back to the nonlin planner [ Tate, 1977 ] , but see <ref> [ Kambhampati, 1992, Kambhampati, June 1992 ] </ref> for a clean formalization. See [ Kambhampati, 1993b ] for an excellent analysis of the different design choices in planning algorithms. It's also possible to build planners that handle even more expressive action languages than the ones described here.
Reference: [ Knoblock, 1990 ] <author> C. Knoblock. </author> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proc. 8th Nat. Conf. on A.I., </booktitle> <pages> pages 923-928, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Machine learning techniques can be used to automatically derive these production rules. Many learning algorithms have been explored, including explanation-based learning [ Minton, 1988 ] , static domain compilation [ Et zioni, 1993a, Etzioni, 1993c, Smith and Peot, 1993 ] , abstraction <ref> [ Knoblock, 1990 ] </ref> , and derivational analogy [ Veloso, 1992 ] . See also the case-based planner built in the pop (snlp) framework [ Hanks and Weld, 1992 ] and a similar system, [ Kambhampati and Hendler, 1992 ] , that was built on a reduction schemata planner.
Reference: [ Korf, 1988 ] <author> R. Korf. </author> <title> Search: A survey of recent results. </title> <editor> In H. Shrobe, editor, </editor> <booktitle> Exploring Artificial Intelligence, </booktitle> <pages> pages 197-237. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: The advantage of casting planning as a simple search problem is the immediate applicability of all the familiar brute force and heuristic search algorithms <ref> [ Korf, 1988 ] </ref> . For example, one could use depth-first, breadth-first, or iterative deepening A fl search starting from the initial state until the goal is located. Alternatively, more sophisticated, memory bounded algorithms could be used [ Russell, 1992, Korf, 1992 ] .
Reference: [ Korf, 1992 ] <author> R. Korf. </author> <title> Linear-space best-first search: Summary of results. </title> <booktitle> In Proc. 10th Nat. Conf. on A.I., </booktitle> <pages> pages 533-538, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: For example, one could use depth-first, breadth-first, or iterative deepening A fl search starting from the initial state until the goal is located. Alternatively, more sophisticated, memory bounded algorithms could be used <ref> [ Russell, 1992, Korf, 1992 ] </ref> . Since the tradeoffs between these different searching algorithms have been discussed extensively elsewhere, we focus instead on the structure of the search space. A handy way to do this is to specify the planner with a nondeterministic algorithm.
Reference: [ Krebsbach et al., 1992 ] <author> K. Krebsbach, D. Olawsky, and M. Gini. </author> <title> An empirical study of sensing and defaulting in planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 136-144, </pages> <month> June </month> <year> 1992. </year>
Reference: [ Kushmerick et al., 1993 ] <author> N. Kushmerick, S. Hanks, and D. Weld. </author> <title> An Algorithm for Probabilistic Planning. </title> <type> Technical Report 93-06-03, </type> <institution> Univ. of Washington, Dept. of Computer Science and Engineering, </institution> <year> 1993. </year> <note> To appear in Artificial Intelligence. Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: this language in [ Pednault, 1988 ] , but noone has implemented a planner for the full language. 25 Many other extensions have been implemented, however, including incomplete information, execution, and sensing operations [ Etzioni et al., 1992, Peot and Smith, 1992, Golden et al., 1994a ] , probabilistic planning <ref> [ Kushmerick et al., 1993, Draper et al., 1994 ] </ref> , decision theoretic specification of goals [ Williamson and Hanks, 1994 ] , and metric time and continuous change [ Penberthy and Weld, 1994 ] .
Reference: [ Laird et al., 1987 ] <author> J. Laird, A. Newell, and P. Rosenbloom. </author> <title> SOAR: An architecture for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1), </volume> <year> 1987. </year>
Reference-contexts: Acquiring domain-dependent knowledge in this rule 42 like form is much easier, because individual rules refer to local decisions and there is no need to weight the pieces as is required when computing a single metric rank. These ideas were first explored in the Soar system <ref> [ Laird et al., 1987 ] </ref> and refined in the Prodigy planner [ Minton et al., 1989b, Minton et al., 1989a ] ; they have also been incorporated in the ucpop implementation as described in [ Barrett et al., 1993 ] .
Reference: [ Lansky, 1988 ] <author> A. Lansky. </author> <title> Localized event-based reasoning for multiagent domains. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 319-340, </pages> <year> 1988. </year>
Reference-contexts: Drummond [ Drummond, 1989 ] describes a rich language for expressing goals, including those of maintenance. The Gem-plan planner also handles a wide range of behavioral goals <ref> [ Lansky, 1988 ] </ref> . zeno synthesizes plans to achieve universally quantified temporal and metric goals [ Penberthy and Weld, 1994 ] . Even simple propositional strips planning is PSPACE complete if actions can have more than two conjuncts in their preconditions [ Bylander, 1991 ] .
Reference: [ Lansky, 1993 ] <editor> Amy Lansky, editor. </editor> <booktitle> Working Notes of the AAAI Spring Symposium: Foundations of Automatic Planning: The Classical Approach and Beyond, </booktitle> <address> Menlo Park, CA, 1993. </address> <publisher> AAAI Press. </publisher>
Reference: [ McAllester and Rosenblitt, 1991 ] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. 9th Nat. Conf. on A.I., </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year>
Reference: [ McDermott, 1991 ] <author> D. McDermott. </author> <title> Regression planning. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year> <month> 47 </month>
Reference-contexts: Many extensions remain to be investigated, for example, richer utility models [ Haddawy and Hanks, 1992, 25 McDermott's Pedestal planner <ref> [ McDermott, 1991 ] </ref> is a total order planner which handles roughly the same subset of adl as does ucpop. 43 Wellman, 1993 ] , domain axioms, exogeneous events, the generation of "safe" plans [ Weld and Etzioni, 1994 ] , and multiple cooperating agents [ Shoham, 1993 ] .
Reference: [ Minton et al., 1989a ] <author> S. Minton, C. Knoblock, D. Koukka, Y. Gil, R. Joseph, and J. Carbonell. </author> <title> PRODIGY 2.0: The Manual and Tutorial. </title> <institution> CMU-CS-89-146, Carnegie-Mellon University, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: These ideas were first explored in the Soar system [ Laird et al., 1987 ] and refined in the Prodigy planner <ref> [ Minton et al., 1989b, Minton et al., 1989a ] </ref> ; they have also been incorporated in the ucpop implementation as described in [ Barrett et al., 1993 ] . Machine learning techniques can be used to automatically derive these production rules.
Reference: [ Minton et al., 1989b ] <author> Steven Minton, Jaime G. Carbonell, Craig A. Knoblock, Daniel R. Kuokka, Oren Etzioni, and Yolanda Gil. </author> <title> Explanation-based learning: A problem-solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> 40 </volume> <pages> 63-118, </pages> <year> 1989. </year> <note> Available as technical report CMU-CS-89-103. </note>
Reference-contexts: every recursive call, it passes along an argument, path, which is a totally ordered 6 Means-ends analysis, the problem solving strategy used by gps [ Newell and Simon, 1963 ] is especially important, both from a historical perspective and because of its ubiquity in machine learning research on speedup learning <ref> [ Minton, 1988, Minton et al., 1989b ] </ref> . Unfortunately, gps-like planners are incomplete (for example they cannot solve the Suss-man anomaly) which complicates analysis and comparison to the algorithms in this paper. <p> These ideas were first explored in the Soar system [ Laird et al., 1987 ] and refined in the Prodigy planner <ref> [ Minton et al., 1989b, Minton et al., 1989a ] </ref> ; they have also been incorporated in the ucpop implementation as described in [ Barrett et al., 1993 ] . Machine learning techniques can be used to automatically derive these production rules.
Reference: [ Minton et al., 1991 ] <author> S. Minton, J. Bresina, and M. Drummond. </author> <title> Commitment strategies in planning: A comparative analysis. </title> <booktitle> In Proceedings of IJCAI-91, </booktitle> <pages> pages 259-265, </pages> <month> August </month> <year> 1991. </year>
Reference: [ Minton et al., 1992 ] <author> S. Minton, M. Drummond, J. Bresina, and A. Phillips. </author> <title> Total order vs. partial order planning: Factors influencing performance. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992. </year>
Reference: [ Minton, 1988 ] <author> S. Minton. </author> <title> Quantitative results concerning the utility of explanation-based learning. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> pages 564-569, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: every recursive call, it passes along an argument, path, which is a totally ordered 6 Means-ends analysis, the problem solving strategy used by gps [ Newell and Simon, 1963 ] is especially important, both from a historical perspective and because of its ubiquity in machine learning research on speedup learning <ref> [ Minton, 1988, Minton et al., 1989b ] </ref> . Unfortunately, gps-like planners are incomplete (for example they cannot solve the Suss-man anomaly) which complicates analysis and comparison to the algorithms in this paper. <p> Machine learning techniques can be used to automatically derive these production rules. Many learning algorithms have been explored, including explanation-based learning <ref> [ Minton, 1988 ] </ref> , static domain compilation [ Et zioni, 1993a, Etzioni, 1993c, Smith and Peot, 1993 ] , abstraction [ Knoblock, 1990 ] , and derivational analogy [ Veloso, 1992 ] .
Reference: [ Newell and Simon, 1963 ] <author> A. Newell and H. Simon. </author> <title> GPS, a program that simulates human thought. </title> <editor> In E. Feigenbaum and J. Feldman, editors, </editor> <booktitle> Computers and Thought. </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1963. </year>
Reference-contexts: In that case, we can view the familiar RegWS algorithm as isomorphic to a plan-space planner! After all, at every recursive call, it passes along an argument, path, which is a totally ordered 6 Means-ends analysis, the problem solving strategy used by gps <ref> [ Newell and Simon, 1963 ] </ref> is especially important, both from a historical perspective and because of its ubiquity in machine learning research on speedup learning [ Minton, 1988, Minton et al., 1989b ] .
Reference: [ Nilsson, 1980 ] <author> N. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publishing Company, </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year>
Reference-contexts: Another approach, called regression planning [ Waldinger, 1977 ] , is outlined in Figure 5. Instead of searching forward from the initial state (which is what ProgWS does), the RegWS algorithm (adapted from <ref> [ Nilsson, 1980 ] </ref> ) searches backwards from the goal.
Reference: [ Olawsky and Gini, 1990 ] <author> D. Olawsky and M. Gini. </author> <title> Deferred planning and sensor use. In Proceedings, DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference: [ Pednault, 1988 ] <author> E. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: It's also possible to build planners that handle even more expressive action languages than the ones described here. Pednault [ Pednault, 1989 ] describes the adl language, which is slightly more expressive that that handled by ucpop; he discusses the theory behind regression planning for this language in <ref> [ Pednault, 1988 ] </ref> , but noone has implemented a planner for the full language. 25 Many other extensions have been implemented, however, including incomplete information, execution, and sensing operations [ Etzioni et al., 1992, Peot and Smith, 1992, Golden et al., 1994a ] , probabilistic planning [ Kushmerick et al.,
Reference: [ Pednault, 1989 ] <author> E. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proceedings Knowledge Representation Conf.,, </booktitle> <year> 1989. </year>
Reference-contexts: See [ Kambhampati, 1993b ] for an excellent analysis of the different design choices in planning algorithms. It's also possible to build planners that handle even more expressive action languages than the ones described here. Pednault <ref> [ Pednault, 1989 ] </ref> describes the adl language, which is slightly more expressive that that handled by ucpop; he discusses the theory behind regression planning for this language in [ Pednault, 1988 ] , but noone has implemented a planner for the full language. 25 Many other extensions have been implemented,
Reference: [ Pednault, 1991 ] <author> E.. Pednault. </author> <title> Generalizing nonlinear planning to handle complex goals and actions with context-dependent effects. </title> <booktitle> In Proc. 12th Int. Joint Conf. on A.I., </booktitle> <month> July </month> <year> 1991. </year>
Reference: [ Penberthy and Weld, 1992 ] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <month> October </month> <year> 1992. </year> <note> Available via FTP from pub/ai/ at cs.washington.edu. 48 </note>
Reference-contexts: Since universally quantified effects are expanded into their universal base incrementally, the definition of threat must be altered. Although we shall not prove it here (see <ref> [ Penberthy and Weld, 1992 ] </ref> instead), ucpop is both sound and complete for its action representation given the assumptions of the fixed, static universe. 7.4 Confrontation Example To see a concrete example of ucpop in action, recall the move operator defined in Figure 17 which transports a briefcase from location
Reference: [ Penberthy and Weld, 1994 ] <author> J.S. Penberthy and D. Weld. </author> <title> Temporal plan-ning with continuous change. </title> <booktitle> In Proc. 12th Nat. Conf. on A.I., </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: Drummond [ Drummond, 1989 ] describes a rich language for expressing goals, including those of maintenance. The Gem-plan planner also handles a wide range of behavioral goals [ Lansky, 1988 ] . zeno synthesizes plans to achieve universally quantified temporal and metric goals <ref> [ Penberthy and Weld, 1994 ] </ref> . Even simple propositional strips planning is PSPACE complete if actions can have more than two conjuncts in their preconditions [ Bylander, 1991 ] . In some cases, planning is undecidable [ Erol et al., 1992 ] . <p> execution, and sensing operations [ Etzioni et al., 1992, Peot and Smith, 1992, Golden et al., 1994a ] , probabilistic planning [ Kushmerick et al., 1993, Draper et al., 1994 ] , decision theoretic specification of goals [ Williamson and Hanks, 1994 ] , and metric time and continuous change <ref> [ Penberthy and Weld, 1994 ] </ref> .
Reference: [ Peot and Smith, 1992 ] <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference: [ Peot and Smith, 1993 ] <author> M. Peot and D. Smith. </author> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proc. 11th Nat. Conf. on A.I., </booktitle> <pages> pages 492-499, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The nec 15 This point (first suggested by [ Ambros-Ingerson and Steel, 1988 ] ) is actually rather subtle and other possibilities have been explored. However, as explained in <ref> [ Peot and Smith, 1993, Kambhampati, 1993b ] </ref> , this approach has the advantage of both simplicity and efficiency. 24 essary operations include: the addition of constraints, testing for consistency, unification, and substitution of ground values.
Reference: [ Pollack, 1992 ] <author> Martha Pollack. </author> <title> The uses of plans. </title> <journal> Artificial Intelligence, </journal> <volume> 57(1), </volume> <year> 1992. </year>
Reference: [ Reiter, 1980 ] <author> R. Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 81-132, </pages> <year> 1980. </year>
Reference-contexts: literals: C B C blocks world. (on A Table) (on C A) (on B Table) (clear B) (clear C) Since we require the initial state description to be complete, all atomic formulae not explicitly listed in the description are assumed to be false (this is called the "Closed World Assumption" <ref> [ Reiter, 1980 ] </ref> ). This means that (not (on A C)) and (not (clear A)) are implicitly in the initial state description as are a bunch of other negative literals. The strips representation is restricted to goals of attainment.
Reference: [ Russell, 1992 ] <author> S. Russell. </author> <title> Efficient memory-bounded search algorithms. </title> <booktitle> In Proceedings of the Tenth European Conference on Artificial Intelligence, </booktitle> <address> Vienna, 1992. </address> <publisher> Wiley. </publisher>
Reference-contexts: For example, one could use depth-first, breadth-first, or iterative deepening A fl search starting from the initial state until the goal is located. Alternatively, more sophisticated, memory bounded algorithms could be used <ref> [ Russell, 1992, Korf, 1992 ] </ref> . Since the tradeoffs between these different searching algorithms have been discussed extensively elsewhere, we focus instead on the structure of the search space. A handy way to do this is to specify the planner with a nondeterministic algorithm.
Reference: [ Sacerdoti, 1975 ] <author> E. Sacerdoti. </author> <title> The nonlinear nature of plans. </title> <booktitle> In Proceedings of IJCAI-75, </booktitle> <pages> pages 206-214, </pages> <year> 1975. </year>
Reference-contexts: In subsequent years, numerous researchers searched for elegant ways to handle it. Tate's interplan system [ Tate, 1975 ] used more sophisticated reasoning about goal interactions to find an optimal solution and Sacerdoti's noah planner <ref> [ Sacerdoti, 1975 ] </ref> introdcued a more flexible representation to sidestep the problem. Because the planners described in this paper adopt these techniques, they have no problem with the "Anomalous Situation." Still it's worth explaining why the problem flummoxed early researchers.
Reference: [ Schoppers, 1987 ] <author> M. Schoppers. </author> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <pages> pages 1039-1046, </pages> <month> August </month> <year> 1987. </year>
Reference: [ Shoham, 1993 ] <author> Y. Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: 1992, 25 McDermott's Pedestal planner [ McDermott, 1991 ] is a total order planner which handles roughly the same subset of adl as does ucpop. 43 Wellman, 1993 ] , domain axioms, exogeneous events, the generation of "safe" plans [ Weld and Etzioni, 1994 ] , and multiple cooperating agents <ref> [ Shoham, 1993 ] </ref> . There's much more of interest, but we can't describe it here. See [ Allen et al., 1990 ] for the tip of the iceberg.
Reference: [ Simmons, 1988a ] <author> R. Simmons. </author> <title> Combining associational and causal reasoning to solve interpretation and planning problems. </title> <institution> AI-TR-1048, MIT AI Lab, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: See [ Weld and Etzioni, 1994, Lansky, 1993, Pollack, 1992, Wilkins, 1988b ] for discussion of this topic. 24 This technique was first used in the Gordius planner <ref> [ Simmons, 1988a, Simmons, 1992 ] </ref> . * A set of domain theories (including those used in this paper and many more) for experimentation. * A users manual [ Barrett et al., 1993 ] The planner is available via anonymous FTP on june.cs.washington.edu as the compressed file ftp/pub/ai/ucpop.tar.Z (use binary mode
Reference: [ Simmons, 1988b ] <author> R. Simmons. </author> <title> A theory of debugging plans and interpretations. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> pages 94-99, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: All the algorithms presented in the remainder of this paper are generative, refinement algorithms. However, Gordius <ref> [ Simmons, 1988b ] </ref> provides a good example of a generative, transformational planner (although it can be used in case-based mode as well). 2 3. a description of the possible actions that can be performed (again, in some formal language). This last description is often called a domain theory.
Reference: [ Simmons, 1992 ] <author> R. Simmons. </author> <title> The roles of associational and causal reasoning in problem solving. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> pages 159-208, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: See [ Weld and Etzioni, 1994, Lansky, 1993, Pollack, 1992, Wilkins, 1988b ] for discussion of this topic. 24 This technique was first used in the Gordius planner <ref> [ Simmons, 1988a, Simmons, 1992 ] </ref> . * A set of domain theories (including those used in this paper and many more) for experimentation. * A users manual [ Barrett et al., 1993 ] The planner is available via anonymous FTP on june.cs.washington.edu as the compressed file ftp/pub/ai/ucpop.tar.Z (use binary mode
Reference: [ Smith and Peot, 1993 ] <author> D. Smith and M. Peot. </author> <title> Postponing threats in partial-order planning. </title> <booktitle> In Proc. 11th Nat. Conf. on A.I., </booktitle> <pages> pages 500-506, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Machine learning techniques can be used to automatically derive these production rules. Many learning algorithms have been explored, including explanation-based learning [ Minton, 1988 ] , static domain compilation <ref> [ Et zioni, 1993a, Etzioni, 1993c, Smith and Peot, 1993 ] </ref> , abstraction [ Knoblock, 1990 ] , and derivational analogy [ Veloso, 1992 ] .
Reference: [ Tate, 1975 ] <author> A. Tate. </author> <title> Interacting goals and their use. </title> <booktitle> In Proceedings of IJCAI-75, </booktitle> <pages> pages 215-218, </pages> <year> 1975. </year> <month> 49 </month>
Reference-contexts: For example, when given the problem defined by the Sussman with it. Since hacker was the core of Gerald Sussman's Ph.D. thesis, he got stuck with the name. In subsequent years, numerous researchers searched for elegant ways to handle it. Tate's interplan system <ref> [ Tate, 1975 ] </ref> used more sophisticated reasoning about goal interactions to find an optimal solution and Sacerdoti's noah planner [ Sacerdoti, 1975 ] introdcued a more flexible representation to sidestep the problem.
Reference: [ Tate, 1977 ] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. 5th Int. Joint Conf. on A.I., </booktitle> <pages> pages 888-893, </pages> <year> 1977. </year>
Reference-contexts: Future work is needed to investigate the benefits, if any, of the gps approach. 7 In fact, noah didn't actually search the space in any exhaustive manner (i.e. unlike nonlin <ref> [ Tate, 1977 ] </ref> it did no backtracking), but it is still credited with reformulating the space in question. 11 Move A to B Move B to C Move A to B Move A to Table Move A to B Move C to Table Move B to C Move A to <p> A good way of ensuring that the different actions introduced for different goals won't interfere is to record the dependencies between actions explicitly. 8 To record these dependencies, we use a data structure, called a causal link, that was invented by Austin Tate for use in the nonlin planner <ref> [ Tate, 1977 ] </ref> . <p> Chapman's central contribution was the Modal Truth Criterion (MTC), a formal specification for a simple version of nonlin's Question Answering algo rithm <ref> [ Tate, 1977 ] </ref> . In a nutshell, the MTC lists the necessary and sufficient conditions for ensuring that a condition be true at a specific point in time given a partially ordered set of partially specified actions. <p> This can be seen as a violation of least commitment because it demands that the planner respond to threats even in cases when one of the redundant supports is not in jeopardy. The idea of multiple causal support dates back to the nonlin planner <ref> [ Tate, 1977 ] </ref> , but see [ Kambhampati, 1992, Kambhampati, June 1992 ] for a clean formalization. See [ Kambhampati, 1993b ] for an excellent analysis of the different design choices in planning algorithms.
Reference: [ Veloso and Carbonell, 1993 ] <author> M. Veloso and J. Carbonell. </author> <title> Derivational Analogy in prodigy: Automating Case Acquisition, Storage, and Utilization. </title> <journal> Machine Learning, </journal> <volume> 10 </volume> <pages> 249-278, </pages> <year> 1993. </year>
Reference-contexts: of the world in some formal language, 2. a description of the agent's goal (i.e., what behavior is desired) in some formal language, and 2 For example, chef [ Hammond, 1990 ] and spa [ Hanks and Weld, 1992 ] are good examples of a transformational case-based planners while prodigy/analogy <ref> [ Veloso and Carbonell, 1993 ] </ref> and Priar [ Kambhampati and Hendler, 1992 ] are case-based, refinement planners. All the algorithms presented in the remainder of this paper are generative, refinement algorithms.
Reference: [ Veloso, 1992 ] <author> Manuela Veloso. </author> <title> Learning by Analogical Reasoning in General Problem Solving. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1992. </year> <note> Available as technical report CMU-CS-92-174. </note>
Reference-contexts: Many learning algorithms have been explored, including explanation-based learning [ Minton, 1988 ] , static domain compilation [ Et zioni, 1993a, Etzioni, 1993c, Smith and Peot, 1993 ] , abstraction [ Knoblock, 1990 ] , and derivational analogy <ref> [ Veloso, 1992 ] </ref> . See also the case-based planner built in the pop (snlp) framework [ Hanks and Weld, 1992 ] and a similar system, [ Kambhampati and Hendler, 1992 ] , that was built on a reduction schemata planner.
Reference: [ Waldinger, 1977 ] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <booktitle> In Machine Intelligence 8. </booktitle> <publisher> Ellis Horwood Limited, </publisher> <address> Chichester, </address> <year> 1977. </year> <editor> Reprinted in [ Allen et al., </editor> <year> 1990 </year> ] . 
Reference-contexts: Any time a nondeterministic algorithm would find a solution, the breadth-first search version will also (although in the worst case it might take the searching version exponentially longer). 3.2 Regression space of world states. Another approach, called regression planning <ref> [ Waldinger, 1977 ] </ref> , is outlined in Figure 5. Instead of searching forward from the initial state (which is what ProgWS does), the RegWS algorithm (adapted from [ Nilsson, 1980 ] ) searches backwards from the goal.
Reference: [ Warren, 1976 ] <author> D. Warren. </author> <title> Generating Conditional Plans and Programs. </title> <booktitle> In Proceedings of AISB Summer Conference, </booktitle> <pages> pages 344-354, </pages> <institution> University of Edinburgh, </institution> <year> 1976. </year>
Reference: [ Weld and Etzioni, 1994 ] <author> D. Weld and O. Etzioni. </author> <title> The first law of softbotics. </title> <booktitle> In Proc. 12th Nat. Conf. on A.I., </booktitle> <month> July </month> <year> 1994. </year> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: One class of behavioral constraints, called maintenance goals, can be implemented very easily on top of ucpop by an extension of the causal link threat detection meachnism; see <ref> [ Etzioni et al., 1992, Weld and Etzioni, 1994 ] </ref> . Drummond [ Drummond, 1989 ] describes a rich language for expressing goals, including those of maintenance. <p> be investigated, for example, richer utility models [ Haddawy and Hanks, 1992, 25 McDermott's Pedestal planner [ McDermott, 1991 ] is a total order planner which handles roughly the same subset of adl as does ucpop. 43 Wellman, 1993 ] , domain axioms, exogeneous events, the generation of "safe" plans <ref> [ Weld and Etzioni, 1994 ] </ref> , and multiple cooperating agents [ Shoham, 1993 ] . There's much more of interest, but we can't describe it here. See [ Allen et al., 1990 ] for the tip of the iceberg.
Reference: [ Wellman, 1993 ] <author> M. Wellman. </author> <title> Challenges for decision-theoretic planning. </title> <booktitle> In Proceedings of the AAAI 1993 Symposium on Foundations of Automatic Planning: The Classical Approach and Beyond, </booktitle> <month> March </month> <year> 1993. </year>
Reference: [ Wilkins, 1988a ] <author> D. Wilkins. </author> <title> Causal reasoning in planning. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 373-380, </pages> <year> 1988. </year>
Reference-contexts: Production-rule control can also be used to implement refinement by hierarchical reduction schemata, a traditional planning method [ Tate, 1977, Currie and Tate, 1991, Charniak and McDermott, 1984, Yang, 1990 ] . Another form of search control exploits the notion of resources; sipe <ref> [ Wilkins, 1988a, Wilkins, 1990 ] </ref> is an impressive planner that uses sophisticated heuristics to handle domains of industrial complexity. Both the pop and ucpop planners support open conditions with a single causal link, even when other actions in the plan provide redundant support.
Reference: [ Wilkins, 1988b ] <author> D. E. Wilkins. </author> <title> Practical Planning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference: [ Wilkins, 1990 ] <author> D. Wilkins. </author> <title> Can AI planners solve practical problems? Computational Intelligence, </title> <booktitle> 6(4) </booktitle> <pages> 232-246, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Production-rule control can also be used to implement refinement by hierarchical reduction schemata, a traditional planning method [ Tate, 1977, Currie and Tate, 1991, Charniak and McDermott, 1984, Yang, 1990 ] . Another form of search control exploits the notion of resources; sipe <ref> [ Wilkins, 1988a, Wilkins, 1990 ] </ref> is an impressive planner that uses sophisticated heuristics to handle domains of industrial complexity. Both the pop and ucpop planners support open conditions with a single causal link, even when other actions in the plan provide redundant support.
Reference: [ Williamson and Hanks, 1993 ] <author> Mike Williamson and Steve Hanks. </author> <title> Exploiting domain structure to achieve efficient temporal reasoning. </title> <booktitle> In Proc. 13th Int. Joint Conf. on A.I., </booktitle> <pages> pages 152-157, </pages> <month> September </month> <year> 1993. </year>
Reference: [ Williamson and Hanks, 1994 ] <author> M. Williamson and S. Hanks. </author> <title> Optimal planning with a goal-directed utility model. </title> <booktitle> In Proc. 2nd Int. Conf. on A.I. Planning Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: full language. 25 Many other extensions have been implemented, however, including incomplete information, execution, and sensing operations [ Etzioni et al., 1992, Peot and Smith, 1992, Golden et al., 1994a ] , probabilistic planning [ Kushmerick et al., 1993, Draper et al., 1994 ] , decision theoretic specification of goals <ref> [ Williamson and Hanks, 1994 ] </ref> , and metric time and continuous change [ Penberthy and Weld, 1994 ] .
Reference: [ Yang, 1990 ] <author> Q. Yang. </author> <title> Formalizing planning knowledge for hierarchical planning. </title> <journal> Computational Intelligence, </journal> <volume> 6(1) </volume> <pages> 12-24, </pages> <month> February </month> <year> 1990. </year> <month> 50 </month>
References-found: 85

