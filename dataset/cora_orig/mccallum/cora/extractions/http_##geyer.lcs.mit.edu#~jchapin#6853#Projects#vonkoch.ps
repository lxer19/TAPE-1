URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/vonkoch.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/index.html
Root-URL: 
Email: waltvk@mit.edu  
Title: Heterogeneous Database Replication  
Author: Walter vonKoch 
Note: 6.853 Conference Paper, Nov 1997  
Affiliation: Massachusetts Institute of Technology  
Abstract: The SyncEngine replicates contact inform a-tion between heterogeneous commercial contact-management applications. Each a p-plication needs a specific driver that handles data access and data normalization. Thus, the SyncEngine supports a wide range of applications with different capabilities, form read-only flat file systems to relational dat abases. The SyncEngine does not require changes to the databases, but handles ev e-rything from field matching to change ide n-tification. This paper describes the initial implement a-tion, which evolved from a contact inform a-tion gathering application and performance analysis of this system. Future work and optimizations are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Garcia-Molina, H., Hammer, J., Ireland, K., Papakonstantinou, Y., Ullman, J., Widom, J. </author> <title> Integrating and Accessing Heterogeneous Information Sources in TSIMMIS. </title> <institution> Department of Computer Science, Stanford University, </institution> <address> CA. </address>
Reference-contexts: For example, the last name field can be of length 50 in one database but only of length 30 in another. The SyncEngine has to assure co r-rect operation insight of these differences. One approach to deal with heterogeneity is described in the following section. TSIMMIS The TSIMMIS system <ref> [ 1] </ref> provides a good technique for access of heterogeneous data sources. Each data record is converted to a common representation for data accesses comparisons and updates. Mediators repr e-sent the layer between database and data client. They perform the data translation and field masking.
Reference: 2. <author> Gifford, D. </author> <title> Weighted Voting for Repl i-cated Data. </title> <booktitle> In Proceedings of the Se v-enth ACM Symposium on Operating Systems Principles (Dec 1979). </booktitle>
Reference-contexts: Most of them add functionality to the database itself, which is not possible in this project. However, they do add signif i-cant insight into the replication and heter o-geneous data access. Voting A well-known replication method is voting <ref> [2] </ref>, which is a protocol (on top of the tran s-action system) for maintaining consistency of replicated data. A read or write collects a quorum of votes, which are assigned to each copy of a replicated data item. These read and write quorum of votes must satisfy two constraints.
Reference: 3. <author> Hammer, J., Garcia-Moline, H., Cho, J., Aranha, R., Crespo, A. </author> <title> Extracting Semistructured Information from the Web. </title> <institution> Department for Computer Sc i-ence, Stanford University, </institution> <address> CA. </address>
Reference: 4. <author> Hammer, J., Garcia-Moline, H., Ireland, K., Papakonstantinou, Y., Ullman, J., Widom, J. </author> <title> Information Translation, M e-diation, Mosaic-Based Browsing in the TSIMMIS System. </title> <institution> Department for Computer Science, Stanford University, </institution> <address> CA. </address>
Reference: 5. <author> Helal, A., Heddaya, A., Bhargava, B. </author> <title> Replication Techniques in Distributed Systems (1996). </title> <publisher> Kluwer Academic Pu b-lishers, Boston/London/Dordrecht. </publisher>
Reference-contexts: This method has better read performance than the voting scheme, since only the primary copy needs to be read. The write performance might be worse since all backup nodes need to be u p-dated and not only a majority of them. Ho w-ever, as stated in <ref> [5] </ref> reads outnumber writes in general database systems and they can be distributed over several nodes for increased performance. This technique is called as Read-One-Write-All (ROWA). The SyncEngine uses a Primary Copy principle on a per record basis giving the use the flexibility of one application controlling a record.
Reference: 6. <author> Ladin, R., Liskov, B., Shrira, L., Ghemawat, S. </author> <title> Providing High Avai lability Using Lazy Replication. </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> Vol. 10, No. </volume> <month> 4 (Nov </month> <year> 1992). </year>
Reference-contexts: In case that a data source is temporarily offline or ina c-cessible, the log entry will be persisted and the change can be applied when the source becomes available again. This leads into the next category. Lazy Replication Weak consistency requirements in a system allow lazy replication <ref> [ 6] </ref> techniques to be used. The idea is to delay the replication. The replicas communicate new information among themselves by lazily exchanging gossip messages. An update request by an application is immediately returned and the system communicates and updates the dat abase in the background. <p> This is great for data that does not need to be co n-sistent at all times. Examples are news ser v-ers, email, etc. Compared to similar work, <ref> [6] </ref> is superior in that it allows the applic a-tion to choose the ordering semantics. In the forced operation mode, it provides the same order for all updates at all replicas. Ho w-ever, it also allows queries on stale data while ensuring that the information observed respects causality.
Reference: 7. <author> Liskov, B., Ghemawat, S., Gruber, R., Johnson, P., Shrira, L., Williams, M. </author> <title> Replication in the Harp File System. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Pri n-ciples (Oct. 1991). ACM, </booktitle> <address> New York. </address>
Reference-contexts: Hence, voting is an undesirable method for the SyncEngine. Primary Copy Replication The "primary copy" replication technique in <ref> [7] </ref> is based on the idea of hot backups. All operations are performed on the primary node and updates are transparently pe r-formed on the hot backups. Great care is taken to assure consistency between all nodes in case of failures. <p> This technique is called as Read-One-Write-All (ROWA). The SyncEngine uses a Primary Copy principle on a per record basis giving the use the flexibility of one application controlling a record. Log based replication To improve the write latency, <ref> [ 7] </ref> suggests the use of in-memory change-logs thereby relying on a write behind strategy. This method is save and reliable since log entries are not lost in hardware failures. <p> Power ou t-ages are survived because of uninterruptible power supplies (UPS) that give each node enough time to persist the logs to disk. Ind i-vidual node failures are survived because the log exists at several nodes. <ref> [ 7] </ref> assumes that transactions containing several operations are not needed in the problem domain. Once a change is identified, a log entry can be created for all data sources. Once a data source is updated, it is disassociated with the log entry.
Reference: 8. <author> Oki, B. M., Liskov, B. </author> <title> Viewstamped Replication for Highly Available Di s-tributed Systems. </title> <type> Tech. Rep. </type> <institution> MIT/LCS/TR-423, MIT Lab. for Co m-puter Science, </institution> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: Great care is taken to assure consistency between all nodes in case of failures. A fail-over to a hot backup happens transparently to the user, when the primary node fails. One such method is described in <ref> [8] </ref>. This method has better read performance than the voting scheme, since only the primary copy needs to be read. The write performance might be worse since all backup nodes need to be u p-dated and not only a majority of them.
Reference: 9. <author> Petersen, K., Spreitzer, M., Terry, D., Theimer, M., Demeres, A. </author> <title> Flexible U p-date Propagation for Weakly Consistent Replication. </title> <institution> Computer Science Labor a-tory, Xerox Palo Alto Research Center, </institution> <address> CA. </address> <month> 10 </month>
Reference-contexts: Potentially, an application might work on stale data, however, the problem domain does not rely on 100% consistent data. Weakly Consistent Replication The anti-entropy algorithm <ref> [ 9] </ref> also relies on weak consistency requirements and supports arbitrary communication topologies with 4 incremental replication progress while gua r-anteeing eventual consistency. Replication takes place between two replicas and they exchange write operations.
Reference: 10. <author> Howes, T., Smith, M. </author> <title> LDAP Progra m-ming Directory Enabled Application with Lightweight Directory Access Protocol. </title> <type> Macmillan Technical Pu b-lishing, </type> <institution> Indianapolis, Indiana, </institution> <year> 1997. </year>
Reference-contexts: Even most Microsoft products use their own proprietary address-book. Ther e-fore, a central address-books approach will not be the solution. Even the recent intr o-duction of directory servers based on the Lightweight Directory Access Protocol (LDAP) <ref> [ 10] </ref> will not solve the problem, since it is impossible to force every applic a-tion vendor to use one generic and possibly limiting format. A universal synchronization and replication engine that keeps the contact information up to date is the solution.
Reference: 11. <author> Oki, B., Pfluegl, M., Siegel, A., Skeen, D. </author> <title> The Information Bus An Archite c-ture for Extensible Distributed Systems. </title> <booktitle> SIGOPS. ACM, </booktitle> <month> Dec, </month> <year> 1993. </year> <title> ERROR: invalidrestore OFFENDING COMMAND: restore STACK: </title> <note> -savelevel- (%%[ Page: 10 ]%%) (%%[ Page: 9 ]%%) (%%[ Page: 8 ]%%) (%%[ Page: 7 ]%%) (%%[ Page: 6 ]%%) (%%[ Page: 5 ]%%) (%%[ Page: 4 ]%%) (%%[ Page: 3 ]%%) (%%[ Page: 2 ]%%) (%%[ Page: 1 ]%%) -savelevel- </note>
Reference-contexts: Cons e-quently, a driver can choose new SyncE n-gine item names. To make replication us e-ful, the drivers should use common names for first name, last name etc. This is not a requirement. This approach is similar to the subject based addressing of the Information Bus. <ref> [11] </ref> A driver can create a new name for an item and start adding it to the appr o-priate record. Another driver can use this data immediately. There is no need to regi s-ter this item name. For example, Outlook could start replicating calendar information.
References-found: 11

