URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C94-10.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: ying@deakin.edu.au  
Title: Attribute Name Evaluation and Its Implementation*  
Author: Y. Ni 
Note: This work was partly supported by Australian Research Council under Grants A48831034, A49232429 and the Deakin University Research Grant 0504054151.  
Address: Geelong, Victoria 3217  
Affiliation: School of Computing and Mathematics Deakin University  
Date: May 16, 1994  
Pubnum: RHODOS  
Abstract: In this paper a new and original name evaluation method of attribute names is proposed and elaborated. This method allows an attribute name to be presented in a non-hierarchy fashion and to be evaluated using a hierarchical approach. A three-level name model that supports attribute names for objects in a distributed system and the structure of naming contexts which bind attribute names onto objects are presented. The naming contexts are represented intuitively with a context-graph. To be able to meet the requirements generated form the name service semantics, a name evaluation model suitable for different name services, i.e. the conventional service, the selection service and the enquiry service is used. This model allows the name evaluation to be implemented efficiently. Moreover, to achieve the effectiveness and the efficiency in the implementation of the name evaluation, we have developed a set of algorithms, each of which is for a particular name service. 
Abstract-found: 1
Intro-found: 1
Reference: [Afifi and Huitema 1992] <author> H. Afifi and C. Huitema, </author> <title> Solving Names within X.500, </title> <institution> Rapports de Recherche, No.1633, Instiut National de Recherche cn Informatique et en Automatique. </institution>
Reference-contexts: In this case, the program expects that the name evaluation result meets the pre-defined conditions which are imbedded in the program. In practice this precludes the interactive error corrections algorithms that are common in the user oriented interface <ref> [Afifi and Huitema 1992] </ref>. It implies that the ambiguous result will not be accepted by this service.
Reference: [Bowman 1990] <author> M. Bowman, L. peterson and A. Yeatts. Univers: </author> <title> An Attribute-based Name Server. </title> <journal> Software-practice and Experience. </journal> <volume> Vol. 20(4) pp403-424, </volume> <pages> Apl. </pages>
Reference-contexts: Two approaches to attribute name evaluation have been reported [Yeo et al. 1993]. One approach is that a naming facility resembles a relational database. An attribute name is evaluated by making a query to the database, e.g. the Univers Name Server <ref> [Bowman 1990] </ref>. RHODOS May 16, 1994 4 This approach allows that the attributes in the purported name can be presented in an unordered fashion. Another approach treats a purported attribute name like a partitioned name.
Reference: [Bowman et. al 1993] <author> M. Bowman, S. Debray and L. Peterson. </author> <title> Reasoning About Naming System. </title> <journal> acm Transactions on Programming Languages and Systems. </journal> <volume> Vol. 15, No 5. </volume>
Reference-contexts: Furthermore, the result of name evaluation relies on the accuracy of information stored in the naming database. The naming database is constrained by the conditions under which it is implemented <ref> [Bowman et. al 1993] </ref>. For example, if a particular attribute is not entered in the database, the evaluation for this attribute will fail.
Reference: [CCITT 1988] <institution> CCITT-X.500. </institution>
Reference-contexts: They are never obvious, nor natural. People have to rely on human memory as an integral component in the organization of computer-based object names. To improve user-friendliness of object names, attribute names, also known as descriptive names, have been proposed ([Bowman 1990], <ref> [CCITT 1988] </ref>, [Goscinski 1991], [Goscinski and Indulska 1992], [Neufeld 1992], [Peterson 1987], [Peterson 1988] and [Vance and Goscinski 1989]). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991].
Reference: [Gerrity et. al 1991] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey, and W. Zhu. </author> <title> Can We Study Design Issues of Distributed Operating Systems in a Generalized Way? - RHODOS. </title> <booktitle> Proceedings of the 2nd Symposium on Experiences with Distributed and Multiprocessor Systems (SEDMS II), </booktitle> <address> Atlanta, </address> <month> March. </month>
Reference-contexts: This attribute name scheme known as the RHODOS attribute name scheme, is supported by the RHODOS naming facility, which provides a service at the distributed operating system level <ref> [Gerrity et. al 1991] </ref>. The goal of a distributed operating system is to ensure that users view the system as a virtual uniprocessor, rather than a collection of distinct machines connected by a RHODOS May 16, 1994 3 communication system. <p> It has been decided that RHODOS supports a three-level name structure, and appropriate mapping functions between them <ref> [Gerrity et. al 1991] </ref>.
Reference: [Giffors et. al 1991] <author> D. Gifford, P. Jouvelot, M. Sheldon and J. OToole, Jr. </author> <title> Semantic File systems. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <address> pp16-25, Pacific Grove (USA), </address> <month> Oct. </month>
Reference: [Goscinski 1991] <author> A. Goscinski, </author> <title> Distributed Operating Systems: The Logical Design. </title> <publisher> Addition-Wesley. </publisher>
Reference-contexts: They are never obvious, nor natural. People have to rely on human memory as an integral component in the organization of computer-based object names. To improve user-friendliness of object names, attribute names, also known as descriptive names, have been proposed ([Bowman 1990], [CCITT 1988], <ref> [Goscinski 1991] </ref>, [Goscinski and Indulska 1992], [Neufeld 1992], [Peterson 1987], [Peterson 1988] and [Vance and Goscinski 1989]). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991]. <p> been proposed ([Bowman 1990], [CCITT 1988], <ref> [Goscinski 1991] </ref>, [Goscinski and Indulska 1992], [Neufeld 1992], [Peterson 1987], [Peterson 1988] and [Vance and Goscinski 1989]). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991]. Such an attribute name can allow users to refer to an object by giving a description of types and properties of the object they are looking for, instead of giving the precise path name for a name server to locate the object. <p> A naming service of a distributed operating system should hide the underlying communication architecture from users by mapping names to the corresponding addresses and routes. Users should be able to refer to any object within the distributed environment with their names, without knowing the location of them <ref> [Goscinski 1991] </ref>. The RHODOS naming model has been proposed to fulfil these requirements. <p> In the last section, the conclusion of the project is given. 2. RHODOS attribute naming 2.1 RHODOS naming model A name is an linguistic object that singles out a particular object (entity) from among a collection of objects. It denotes or identifies the object to which it is bound <ref> [Goscinski 1991] </ref>. We will use the term object to refer to any entity which deserves a name in the RHODOS environment. A large distributed system contains a variety of user and location-oriented names and mapping between them.
Reference: [Goscinski 1993] <author> A. Goscinski. </author> <title> Supporting User Autonomy and Object Sharing in Distributed Systems: The RHODOS Trading Service. </title> <booktitle> Proceedings of the International Symposium on Autonomous Decentralized Systems ISADS93. </booktitle>
Reference-contexts: (attribute_tag, operator, attribute_value) where attribute_tag is a string which specifies the class of the information given by that attribute, operator is an operator for which meaning is associated with an attribute_tag, and attribute_value is a string which gives a particular instance of the class of information indicated by the attribute_tag <ref> [Goscinski 1993] </ref>. Definition 2.1 A set of attributes, which are known by the system as a, is the UName of an object if all attributes for that object are in a and every attribute in a is an attribute for that object.
Reference: [Goscinski et. al 1994] <author> A. Goscinski, M. Hobbs, P. Joyce and G. Wickham, </author> <title> Message Passing and RPC-based Interprocess Communication Mechanisms in the RHODOS Microkernel. </title> <type> Technical Report, </type> <institution> School of Computing and Mathematics, Deakin University </institution>
Reference-contexts: The mapping between SNames and object addresses is performed by the communication servers of the RHODOS system. The detailed description is given in <ref> [Goscinski et. al 1994] </ref>. user level system level communication UName UName UName UName SName SName SName SName object address object address object address level computer 1 computer 2 computer 3 LAN RHODOS May 16, 1994 6 2.2 Object types and attributes In the RHODOS system, the complete set of resources and
Reference: [Goscinski and Haddock 1993] <author> A. Goscinski and A. Haddock, </author> <title> The Development of a Prototype Attributed Naming and Trading Facility Supporting User Autonomy and Object Sharing, </title> <note> Submitted to Software Practice and Experience. </note>
Reference-contexts: This means that the set of types is not restricted, and a new object type can be created when needed. 2.3 Contexts binding UNames onto SNames It has been proposed in <ref> [Goscinski and Haddock 1993] </ref> and [Goscinski and Indulska 1992] that in order to bind a UName to an object, the concept of a naming context needs to be considered.
Reference: [Goscinski and Haddock 1991] <author> A. Goscinski and A. Haddock, </author> <title> The Development and Experiences with the RHODOS Naming Facility, </title> <type> Technical Report CS37/91, </type> <institution> Department of Computer Science, University College, ADFA, UNSW, </institution> <month> November. </month>
Reference-contexts: However, these proposals are based on existing centralized operating systems, e.g., Unix, or network operating system, e.g., SUN Network File System. An extended attribute naming which covers all manageable objects (resources, services and files) of a distributed operating system has been proposed ([Goscinski 1993], <ref> [Goscinski and Haddock 1991] </ref>, [Goscinski and Indulska 1992] and [Vance and Goscinski 1989]). This attribute name scheme known as the RHODOS attribute name scheme, is supported by the RHODOS naming facility, which provides a service at the distributed operating system level [Gerrity et. al 1991].
Reference: [Goscinski and Indulska 1992] <author> A. Goscinski and J. Indulska, </author> <title> The RHODOS Naming Facility, </title> <journal> IEEE Distributed Processing Technical Committee Newsletter, </journal> <volume> Vol. 14, No. </volume> <pages> 1. </pages>
Reference-contexts: They are never obvious, nor natural. People have to rely on human memory as an integral component in the organization of computer-based object names. To improve user-friendliness of object names, attribute names, also known as descriptive names, have been proposed ([Bowman 1990], [CCITT 1988], [Goscinski 1991], <ref> [Goscinski and Indulska 1992] </ref>, [Neufeld 1992], [Peterson 1987], [Peterson 1988] and [Vance and Goscinski 1989]). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991]. <p> However, these proposals are based on existing centralized operating systems, e.g., Unix, or network operating system, e.g., SUN Network File System. An extended attribute naming which covers all manageable objects (resources, services and files) of a distributed operating system has been proposed ([Goscinski 1993], [Goscinski and Haddock 1991], <ref> [Goscinski and Indulska 1992] </ref> and [Vance and Goscinski 1989]). This attribute name scheme known as the RHODOS attribute name scheme, is supported by the RHODOS naming facility, which provides a service at the distributed operating system level [Gerrity et. al 1991]. <p> In addition to the improvement of user-friendliness of names and providing a conventional name services which maps a well-defined attribute name to an object, RHODOS naming facility can provide an enquiry service which allows a user to obtain information about an object based on some attributes of an object <ref> [Goscinski and Indulska 1992] </ref>. It has been decided that RHODOS supports a three-level name structure, and appropriate mapping functions between them [Gerrity et. al 1991]. <p> The RHODOS naming facility finds a system name for a given user name, which is known as name evaluation. The communication sub-system (not the naming facility) maps system names onto locations, which is known as address resolution <ref> [Goscinski and Indulska 1992] </ref>. To be able to support an attribute naming scheme, an effective and efficient attribute name evaluation mechanism is essential to a naming facility. <p> They are said to belong to the same type. In many cases, a user is interested in the first instance, in a service rather than in an object that the service is build on. This was the reason to group objects into types <ref> [Goscinski and Indulska 1992] </ref>. Objects belonging to the same type are called instances of the type. For example, all objects which are able to provide a printing service belong to the printer type. <p> This means that the set of types is not restricted, and a new object type can be created when needed. 2.3 Contexts binding UNames onto SNames It has been proposed in [Goscinski and Haddock 1993] and <ref> [Goscinski and Indulska 1992] </ref> that in order to bind a UName to an object, the concept of a naming context needs to be considered. According to the RHODOS naming model, a UName in RHODOS stands for an object, and each RHODOS object is referred to by its SName. <p> However, the arbitrariness of order of attributes in a UName adds the complexity to name evaluation and an evaluation process can be time consuming. The name evaluation would be much more efficient if we impose an order on attributes. In <ref> [Goscinski and Indulska 1992] </ref>, the original proposal of the RHODOS naming facility, an attribute order has been proposed. This attribute order is derived from an order of those contexts which are labelled by the attributes of a UName. Definition 2.5 Let C i and C j be contexts. <p> For example, if we want to implement a naming facility which provides different naming services, this name evaluation model needs to be specified in more details. It has been proposed in <ref> [Goscinski and Indulska 1992] </ref> that the RHODOS naming facility should provide the following naming services: conventional service mapping UNames onto SNames. This service is similar to the service provided by a Unix file system, that is, a UName is provided and the corresponding SName is returned.
Reference: [Huitema 1991] <author> C. Huitema, </author> <title> Naming: Strategies and Techniques, </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 23(1991), </volume> <month> pp107-110. </month>
Reference-contexts: The naming facility has to be able to locate an object when being given the object name. In most existing operating systems (centralized and distributed), object names are organized in a hierarchical structure <ref> [Huitema 1991] </ref>. Therefore, most existing naming facilities support partitioned names which are of the hierarchical structure. A partitioned name consists of a series of at names which are delimited by a special separation token, such as / or ..
Reference: [McClennen and Sechrest 1992] <author> M. McClennen and S. Sechrest. </author> <title> Introduction Multi-structured File Naming into Unix. </title> <booktitle> In Proceedings of USENIX File Systems Workshop, </booktitle> <address> pp151-152. RHODOS May 16, </address> <year> 1994 </year> <month> 32 </month>
Reference-contexts: Thus, such attribute names only apply to the users of the network or the resources and services in the public domains, e.g. White Pages and Yellow Pages services. The initially proposed attribute naming has been extended to file systems ([Giffors et. al 1991], <ref> [McClennen and Sechrest 1992] </ref> and [Mogul 1986]). However, these proposals are based on existing centralized operating systems, e.g., Unix, or network operating system, e.g., SUN Network File System.
Reference: [Mogul 1986] <author> J. Mogul. </author> <title> Representing Information about Files. </title> <type> Report No. </type> <institution> STAN-CS-86-1103, Department of Computer Science, Stanford University, </institution> <month> Mar. </month>
Reference-contexts: Thus, such attribute names only apply to the users of the network or the resources and services in the public domains, e.g. White Pages and Yellow Pages services. The initially proposed attribute naming has been extended to file systems ([Giffors et. al 1991], [McClennen and Sechrest 1992] and <ref> [Mogul 1986] </ref>). However, these proposals are based on existing centralized operating systems, e.g., Unix, or network operating system, e.g., SUN Network File System.
Reference: [Neufeld 1992] <author> G. Neufeld. </author> <title> Descriptive Name Resolution. Computer Networks and ISDN Systems, </title> <booktitle> 23 (1992), </booktitle> <address> pp211-227. </address>
Reference-contexts: People have to rely on human memory as an integral component in the organization of computer-based object names. To improve user-friendliness of object names, attribute names, also known as descriptive names, have been proposed ([Bowman 1990], [CCITT 1988], [Goscinski 1991], [Goscinski and Indulska 1992], <ref> [Neufeld 1992] </ref>, [Peterson 1987], [Peterson 1988] and [Vance and Goscinski 1989]). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991]. <p> The order of attributes in the name dictates where each attribute is to be evaluated according to the predefined attribute order, e.g. the name scheme used by X.500. At each stage of the evaluation, an appropriate name context is established to carry out a meaningful matching <ref> [Neufeld 1992] </ref>. We propose a novel approach to attribute name evaluation which combines these two approaches. It allows a name to be presented in a unordered fashion, as in the Univers, and to be evaluated as efficiently as the name were a partitioned name.
Reference: [Peterson 1987] <author> L. Peterson. </author> <title> A Yellow-pages Service for a Local-area Network. </title> <booktitle> Proc. of the SIGCOMM87 Workshop: Frontiers in Computer Communications Technology, </booktitle> <address> pp235-242, Stowe, VT, </address> <month> Aug </month> . 
Reference-contexts: People have to rely on human memory as an integral component in the organization of computer-based object names. To improve user-friendliness of object names, attribute names, also known as descriptive names, have been proposed ([Bowman 1990], [CCITT 1988], [Goscinski 1991], [Goscinski and Indulska 1992], [Neufeld 1992], <ref> [Peterson 1987] </ref>, [Peterson 1988] and [Vance and Goscinski 1989]). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991].
Reference: [Peterson 1988] <author> L. Peterson. </author> <title> The Profile Naming Service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> Nov. </month>
Reference-contexts: People have to rely on human memory as an integral component in the organization of computer-based object names. To improve user-friendliness of object names, attribute names, also known as descriptive names, have been proposed ([Bowman 1990], [CCITT 1988], [Goscinski 1991], [Goscinski and Indulska 1992], [Neufeld 1992], [Peterson 1987], <ref> [Peterson 1988] </ref> and [Vance and Goscinski 1989]). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991].
Reference: [Schwartz 1990] <author> M. </author> <title> Schwartz A Scalable, Non-Hierarchical Resource Discovery Mechanism Based on Probabilistic Protocols, </title> <institution> CU-CS-474-90, Department of Computer Science, University of Colorado. </institution>
Reference-contexts: The attribute naming was initially proposed to implement name services for network users and organizations. These name services were aimed to support the e-mail system and for the purpose of network resources and servers discovery <ref> [Schwartz 1990] </ref>. Thus, such attribute names only apply to the users of the network or the resources and services in the public domains, e.g. White Pages and Yellow Pages services.
Reference: [Saltzer 1977] <author> J. Saltzer, </author> <title> Naming and Binding of Objects, in Operating Systems: An Advanced Course, </title> <editor> Bayer et al.(Eds), </editor> <publisher> Springer Verlag, Berlin, </publisher> <pages> 99-208. </pages>
Reference-contexts: For the name facility it is enough to bind a UName to a SName. The binding of UNames onto SNames is conducted in a relevant naming context, which is the context defined by a particular UName. Saltzer <ref> [Saltzer 1977] </ref> defined a naming context as a particular set of bindings of names to objects. A naming context in RHODOS is slightly different. A RHODOS naming context is a set containing objects which have the same attribute_tag.
Reference: [Vance and Goscinski 1989] <author> C. Vance and A. Goscinski, </author> <title> The Logical Design of a Naming Facility for RODOS, </title> <type> Technical Report CS89/15, </type> <institution> Department of Computer Science, University College, ADFA, UNSW, </institution> <month> August. </month>
Reference-contexts: To improve user-friendliness of object names, attribute names, also known as descriptive names, have been proposed ([Bowman 1990], [CCITT 1988], [Goscinski 1991], [Goscinski and Indulska 1992], [Neufeld 1992], [Peterson 1987], [Peterson 1988] and <ref> [Vance and Goscinski 1989] </ref>). An attribute name consists of a set of attributes, each of which provides a piece of information about an object or describes a particular characteristic of it [Goscinski 1991]. <p> An extended attribute naming which covers all manageable objects (resources, services and files) of a distributed operating system has been proposed ([Goscinski 1993], [Goscinski and Haddock 1991], [Goscinski and Indulska 1992] and <ref> [Vance and Goscinski 1989] </ref>). This attribute name scheme known as the RHODOS attribute name scheme, is supported by the RHODOS naming facility, which provides a service at the distributed operating system level [Gerrity et. al 1991].
Reference: [White 1984] <author> J. White, </author> <title> A User-friendly Naming Convention for Use in Communication Networks, </title> <booktitle> Proceedings of the IFIP WG 6.5 Working Conference on Computer-Based Messages Services, </booktitle> <address> Nottingham, England, </address> <month> May. </month>
Reference-contexts: A user will usually have supplied a partially-evaluated CName to the enquiry service for one of the following reasons <ref> [White 1984] </ref>: (1) to guess an object UName on the basis of information about the object that he/she naturally possesses, which may result in some attributes being incorrectly guessed; (2) to ensure that the naming system has all the information it needs to identify the intended object by supplying extra attributes
Reference: [Wirth 1976] <author> N. Wirth, </author> <title> Algorithms + Data Structures = Programming, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: FIGURE 9. The T Tree structure Like an AVL Tree, rebalance of a T-Tree may occur when inserting or deleting a T-Node. The rebalancing is done using rotations similar to those of an AVL Tree <ref> [Wirth 1976] </ref>, but it is done much less often than in an AVL Tree. Because a T-Node contains many elements, data movement which is required for insertion and deletion is usually needed only within a single node.
Reference: [Yeo et al. 1993] <author> A. Yeo, A. Ananda and E. Koh, </author> <title> A Taxonomy of Issues in Name Systems Design and Implementation, </title> <journal> Operating Systems Review, </journal> <volume> Vol 27, No. 3, </volume> <month> July. </month>
Reference-contexts: Two approaches to attribute name evaluation have been reported <ref> [Yeo et al. 1993] </ref>. One approach is that a naming facility resembles a relational database. An attribute name is evaluated by making a query to the database, e.g. the Univers Name Server [Bowman 1990].
References-found: 24

