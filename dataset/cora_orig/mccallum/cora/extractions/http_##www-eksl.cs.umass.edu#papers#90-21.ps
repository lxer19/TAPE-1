URL: http://www-eksl.cs.umass.edu/papers/90-21.ps
Refering-URL: http://eksl-www.cs.umass.edu/publications.html
Root-URL: 
Title: Envelopes as a Vehicle for Improving the Efficiency of Plan Execution  
Author: David M. Hart, Scott D. Anderson, Paul R. Cohen 
Note: This research was sponsored by DARPA-AFOSR contract F49620-89-C-00113; by the Office of Naval Re search, contract N00014-88-K-0009; and by a grant from the Digital Equipment Corporation.  
Address: Amherst, MA 01003  
Affiliation: Experimental Knowledge Systems Laboratory Department of Computer Science University of Massachusetts  
Pubnum: COINS Technical Report 90-21  
Abstract: Envelopes are structures which capture expectations of the progress of a plan. By comparing expected progress with actual progress, envelopes can notify the planner when the plan violates those expectations. The planner then has the opportunity to modify the plan to increase its efficiency given the unexpected progress. This paper presents a specific example of the construction and use of an envelope, followed by a discussion of the general utility of envelopes for improving the efficiency of plan execution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Paul R. Cohen, Michael Greenberg, David M. Hart, and A.E. Howe. </author> <title> Trial by fire: Understanding the design requirements for agents in complex environments. </title> <journal> AI Magazine, </journal> <month> Fall </month> <year> 1989. </year>
Reference-contexts: But fighting a forest fire can require the efforts of many agents over many days, so that plans execute over long time spans and there is ample time to add and subtract resources. Therefore, in our domain (simulated in a testbed called Phoenix <ref> [1] </ref>), it pays to monitor a plan during its execution. Doyle's work [2] addresses monitoring, but in a robotics domain using a STRIPS-style action model with specified preconditions and postconditions. <p> We will test the utility of envelopes by comparing the 5 For more on Phoenix agents' cognitive structure, see <ref> [1] </ref> 9 performance of agents with and without them. In particular, we will run a number of different fires in the simulator, varying the factors contributing to unexpected success or failure of plans, such as weather, mechanical breakdowns, and obstacles.
Reference: [2] <author> Richard J. Doyle, David J. Atkinson, and Rajkumar S. Doshi. </author> <title> Generating perception re-quests and expectations to verify the execution of plans. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <address> Philadelphia, PA, </address> <year> 1986. </year> <journal> American Association for Artificial Intelligence. </journal>
Reference-contexts: Therefore, in our domain (simulated in a testbed called Phoenix [1]), it pays to monitor a plan during its execution. Doyle's work <ref> [2] </ref> addresses monitoring, but in a robotics domain using a STRIPS-style action model with specified preconditions and postconditions. <p> Monitoring verifies the truth of the preconditions and postconditions: . . . we assume that the successful execution of actions can be verified by instantaneously verifying the action's preconditions before its execution and instantaneously verifying its postconditions after its execution. This approach proves inadequate for some actions. <ref> [2] </ref> 1 Because our plans are structures of one or more actions, we will use the terms interchangeably. 3 Doyle goes on to describe cases that require just the sort of continuous monitoring that envelopes are designed for, such as actions that are extended over time and can fail at any
Reference: [3] <author> Adele E. Howe. </author> <title> Integrating adaptation with planning to improve behavior in unpredictable environments. </title> <booktitle> In Proceedings of AAAI Spring Symposium on Planning in Uncertain, Unpredictable or Changing Environments, </booktitle> <address> Palo Alto, CA, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: We also intend to experiment with the tradeoffs mentioned above, such as balancing the cost of setting up an envelope with the cost of responding to violations. Another line of research views envelope violations as an opportunity for learning <ref> [3] </ref>. En- velopes provide information about plans vulnerable to failure, as well as an opportunity to test ways of repairing plans. These repairs, when successful, can be used to modify the plan library.
Reference: [4] <author> A.E. Howe, David M. Hart, and Paul R. Cohen. </author> <title> Addressing real-time constraints in the design of autonomous agents. </title> <note> To appear in Real-Time Systems, </note> <year> 1990. </year>
Reference-contexts: If we can model these computational tasks so that we can predict their progress well enough to use envelopes, we can control them and increase their efficiency. A brief discussion of the use of envelopes for real-time control appears in <ref> [4] </ref>. 7 Conclusion We have shown an example of how to build and use an envelope for a plan in a fire-fighting domain. This envelope notices when the plan is failing or succeeding too well.
Reference: [5] <author> Gerald M. Powell and Paul R. Cohen. </author> <title> Operational planning and monitoring with envelopes. </title> <booktitle> In Proceedings of the IEEE Fifth AI Systems in Government Conference, </booktitle> <address> Washington, DC, </address> <year> 1990. </year>
Reference-contexts: Agent envelopes free the fireboss from the task of monitoring the progress of component plan steps carried out by other agents|the fireboss assumes the agent's progress is within expectations unless it receives a violation report from the agent. Powell and Cohen <ref> [5] </ref> discuss the use of envelopes to coordinate activities among echelons in multiagent, 7 operational planning. Another way that multiple envelopes occur is when data dependencies exist between envelopes.
Reference: [6] <author> James C. Sanborn and James A. Hendler. </author> <title> Dynamic reaction: Controlling behavior in dynamic domains. </title> <journal> International Journal of Artificial Intelligence in Engineering, </journal> <volume> 3(2), </volume> <month> April </month> <year> 1988. </year> <month> 11 </month>
Reference-contexts: require just the sort of continuous monitoring that envelopes are designed for, such as actions that are extended over time and can fail at any point, and actions involving looping, which can be viewed as extended action. 2 Our work is closest in spirit to that of Sanborn and Hendler <ref> [6] </ref>. Their simulated robot, which tries to cross a busy street, must monitor the objects in the world (cars rushing past) and predict whether they will run over it.
References-found: 6

