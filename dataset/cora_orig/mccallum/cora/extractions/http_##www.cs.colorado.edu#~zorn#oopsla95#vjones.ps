URL: http://www.cs.colorado.edu/~zorn/oopsla95/vjones.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/oopsla95/papers.html
Root-URL: http://www.cs.colorado.edu
Email: Email: fvjones,winslettg@cs.uiuc.edu  
Title: JaDE: Access Control in a Java-Based Object Database  
Author: Vicki E. Jones Marianne Winslett 
Address: 1304 West Springfield Avenue Urbana, IL 61801 USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: In this age of increased networking of computers and larger repositories of data, users more and more often wish to access large amounts of data from remote locations. In this context, a centralized solution to security issues, i.e., enforcing all access control at the server, is not acceptable because it will not scale well with the expected number of users and need for fine-grained control. This new model of database access requires reevaluation of the access control needed to protect data. In turn, anticipated changes to access control features for ODBMSes will warrant reconsideration of current ODBMS architectures, since the typical architecture today relinquishes control of the data to the user application. Using technology enabled by the the new programming language Java, JaDE's goal is to provide object database functionality with enhanced security features, without sacrificing performance.
Abstract-found: 1
Intro-found: 1
Reference: [Ber92] <author> E. Bertino. </author> <title> Data hiding and security in object-oriented databases. </title> <booktitle> In Proceedings of the 1992 Conference on Knowledge and Data Engineering, </booktitle> <year> 1992. </year>
Reference-contexts: Potential access control models for such an environment will depend on the database's object model: fully structural object models preclude the use of encapsulation at the DBMS level for access control while fully behavioral object models, with full encapsulation, theoretically allow access control of arbitrary complexity 1 <ref> [Ber92] </ref>, as encapsulation allows access control at the method level and a method can do anything. In practice, however, methods execute on the client to o*oad the server making it difficult to assure that encapsulation is being enforced.
Reference: [CLFL94] <author> Jeffrey S. Chase, Henry M. Levy, Michael J. Feeley, and Edward D. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(4), </volume> <month> November </month> <year> 1994. </year>
Reference-contexts: For the remainder, servers need assurances that clients cannot bypass server-mandated access control policies once the data reaches the client. To guard against disclosure even to superusers, several research projects <ref> [CLFL94, YBA] </ref> are investigating hardware and operating system level security measures for providing enhanced protection with small performance penalties. Given such low-level support, client applications can be prevented from accidentally or maliciously violating the access control policy by encapsulating the data and controlling the execution of the encapsulating methods.
Reference: [Cor95a] <author> Sun Microsystems Computer Corporation. </author> <title> The Java Language: A White Paper, </title> <year> 1995. </year>
Reference-contexts: Java is architecture neutral: it support applications on a variety of systems with varying CPU and operating system architectures. It shares many language features with C++, the primary difference being that Java has a pointer model that eliminates the possibility of overwriting memory and corrupting data <ref> [Cor95a] </ref>. The Java compiler currently generates byte code instructions which can be easily interpreted 2 (after checking for security violations) and translated into native machine code on the fly (by of the Java runtime system on the client). <p> The bytecode format was designed with machine code generation in mind and Java just-in-time compiled code does automatic register allocation and some standard optimizations <ref> [Cor95a] </ref>. In addition, the Java group is developing a Java compiler that will maintain Java's current security guarantees. 2 and the server, manages in-memory objects within a single process to avoid expensive inter-process commu-nication for messages between objects and uses optimizations to avoid in-memory security checks whenever possible.
Reference: [Cor95b] <author> Sun Microsystems Computer Corporation. </author> <title> The Java Language Specification, </title> <note> 1995. URL: http://java.sun.com/. </note>
Reference-contexts: To address some of the important issues in security for ODBMSes, we have chosen to design and prototype a ODBMS based on the C++-like data model of the programming language and runtime environment of Java <ref> [Cor95b] </ref>. While we considered more obvious choices, including ODL and IDL, the security, distribution, and robustness features of Java (described below) won us over. Java's data model is sufficiently similar to other common data models that the results of our work will be easily adaptable to those environments.
Reference: [YBA] <author> Curtis Yarvin, Richard Bukowski, and Thomas Anderson. Anonymous RPC: </author> <title> Low-latency protection in a 64-bit address space. </title> <type> Technical report, </type> <institution> University of California at Berkeley. </institution> <month> 3 </month>
Reference-contexts: For the remainder, servers need assurances that clients cannot bypass server-mandated access control policies once the data reaches the client. To guard against disclosure even to superusers, several research projects <ref> [CLFL94, YBA] </ref> are investigating hardware and operating system level security measures for providing enhanced protection with small performance penalties. Given such low-level support, client applications can be prevented from accidentally or maliciously violating the access control policy by encapsulating the data and controlling the execution of the encapsulating methods.
References-found: 5

