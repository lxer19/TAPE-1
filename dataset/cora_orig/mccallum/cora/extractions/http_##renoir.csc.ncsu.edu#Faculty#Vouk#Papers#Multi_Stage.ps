URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/Papers/Multi_Stage.ps
Refering-URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/vouk.se.html
Root-URL: http://www.csc.ncsu.edu
Title: Modeling Execution Time of MultiStage N-Version Fault-Tolerant Software 1  
Author: Mladen A. Vouk, Amitkumar M. Paradkar, and David F. McAllister 
Address: Box 8206 Raleigh, N.C. 27695-8206  
Affiliation: North Carolina State University Department of Computer Science,  
Abstract: An N-version system can be subdivided into stages for the purpose of forward error recovery through voting after each stage. In the simplest case at each stage the whole system waits for the slowest version to finish before a vote is taken. A better solution is to use a scheme we call Expedient Voting in which the voting takes place as soon as an adequate number of components have finished in a stage. The concept of a "runahead" is introduced the faster versions are allowed to run ahead of the rest of the slower versions by one or more stages, with synchronized restart in the event of a failure. If the versions are highly reliable, inter-version failure dependence is small, and the difference between the fastest and the slowest successful components in each stage is large, then the execution speedup through Expedient Voting may be substantial. Runaheads exceeding 3 stages offer diminishing returns. Speedup deteriorates with reduction in the version reliability and independence. The advantages and the limitations of Expedient Voting are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Randell, </author> <title> "System structure for software fault-tolerance", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-1, </volume> <pages> 220-232, </pages> <year> 1975. </year>
Reference-contexts: 1. Introduction One approach to assuring adequate reliability of software during its operation is runtime fault-tolerance. There are two major schemes for implementing fault-tolerance in software viz. Recovery Block <ref> [1] </ref> and N-version programming [e.g. 2]. The N-version approach is expected to mask faults through the consensus of results from N&gt;3 diverse versions. Software failures are usually input dependent and a faulty version may work quite well in segments and with other than the inputs from its fail set.
Reference: [2] <author> A. Avizienis and L. Chen, </author> <title> "On the Implementation of N-version Programming for Software Fault-Tolerance During Program Execution", </title> <booktitle> Proc. COMPSAC 77, </booktitle> <pages> 149-155, </pages> <year> 1977. </year>
Reference-contexts: A summary and conclusions are given in Section 5. 2. MultiStage Model In a N-Version strategy we can use each of the N programs as a monolithic unit and vote on the output without taking into account the intermediate program values (or states) <ref> [2] </ref>. This scheme may improve the overall system reliability over that of a single component, provided certain conditions are met [7, 8, 12]. An alternative scheme is subdivision of each version into segments, and testing for correctness of the intermediate results computed by each segment [3, 4, 10].
Reference: [3] <author> K.S. Tso, A. Avizienis, and J.P.J. Kelly, </author> <title> "Error Recovery in Multi-Version Software," </title> <booktitle> Proc. IFAC SAFECOMP '86, Sarlat, France, </booktitle> <pages> 35-41, </pages> <year> 1986. </year>
Reference-contexts: A mechanism that uses staged local and global forward error recovery was proposed by Tso et al. <ref> [3, 4] </ref>. The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. <p> NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint [e.g., 5, 6, 7, 8, 9, 10]. Multistage systems have been investigated to a much smaller extent <ref> [e.g., 3, 10, 11] </ref>. In this paper, we extend the work on multistage systems through a study of multistage N-version software timing performance for a forward error recovery scheme we call Expedient Voting (EV). In section 2 we discuss the multistage N-version model. <p> This scheme may improve the overall system reliability over that of a single component, provided certain conditions are met [7, 8, 12]. An alternative scheme is subdivision of each version into segments, and testing for correctness of the intermediate results computed by each segment <ref> [3, 4, 10] </ref>. The result of the decision is sent back to the versions judged incorrect in order to initiate their recovery. <p> Reliability of Community Error Recovery has been investigated theoretically <ref> [3, 11, 13] </ref> and experimentally [4]. Nicola and Goyal [11] results indicate that the effectiveness of the technique is highly sensitive to, and easily degraded by errors in CER checkpoints and inter-version failure dependence, particularly when very high system reliabilities are targeted (e.g. 0.99999 or more).
Reference: [4] <author> K.S. Tso and A. Avizienis, </author> <title> "Community Error Recovery in N-Version Software: A Design Study with Experimentation", </title> <booktitle> Proc. IEEE 17th Fault-Tolerant Computing Symposium, </booktitle> <address> pp127-133, </address> <year> 1987. </year>
Reference-contexts: A mechanism that uses staged local and global forward error recovery was proposed by Tso et al. <ref> [3, 4] </ref>. The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. <p> This scheme may improve the overall system reliability over that of a single component, provided certain conditions are met [7, 8, 12]. An alternative scheme is subdivision of each version into segments, and testing for correctness of the intermediate results computed by each segment <ref> [3, 4, 10] </ref>. The result of the decision is sent back to the versions judged incorrect in order to initiate their recovery. <p> Reliability of Community Error Recovery has been investigated theoretically [3, 11, 13] and experimentally <ref> [4] </ref>. Nicola and Goyal [11] results indicate that the effectiveness of the technique is highly sensitive to, and easily degraded by errors in CER checkpoints and inter-version failure dependence, particularly when very high system reliabilities are targeted (e.g. 0.99999 or more). <p> However, the prevalence of these faults and the degree of correlation remain an issue of controversy. Experimental information on the reliability offered by CER is sparse and mixed. Results from a partial analysis <ref> [4] </ref> of the functionally equivalent software developed in a multi-version experiment [16] indicate that the approach can be successful, at least in part, in increasing reliability of medium to high reliability versions.
Reference: [5] <author> A. Grnarov, J. Arlat, and A. Avizienis, </author> <title> "On the Performance of Software Fault-Tolerance Strategies," </title> <booktitle> Proc. </booktitle> <volume> FTCS 10, </volume> <pages> pp 251-253, </pages> <year> 1980. </year>
Reference-contexts: The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint <ref> [e.g., 5, 6, 7, 8, 9, 10] </ref>. Multistage systems have been investigated to a much smaller extent [e.g., 3, 10, 11].
Reference: [6] <author> J.-C. Laprie, </author> <title> "Dependability Evaluation of Software Systems in Operation," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-10 (6), </volume> <pages> 701-714, </pages> <year> 1984. </year>
Reference-contexts: The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint <ref> [e.g., 5, 6, 7, 8, 9, 10] </ref>. Multistage systems have been investigated to a much smaller extent [e.g., 3, 10, 11].
Reference: [7] <author> D.E. Eckhardt, Jr. and L.D. Lee, </author> <title> "A Theoretical Basis for the Analysis of Multi-version Software Subject to Coincident Errors", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-11(12), </volume> <pages> 1511-1517, </pages> <year> 1985. </year>
Reference-contexts: The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint <ref> [e.g., 5, 6, 7, 8, 9, 10] </ref>. Multistage systems have been investigated to a much smaller extent [e.g., 3, 10, 11]. <p> This scheme may improve the overall system reliability over that of a single component, provided certain conditions are met <ref> [7, 8, 12] </ref>. An alternative scheme is subdivision of each version into segments, and testing for correctness of the intermediate results computed by each segment [3, 4, 10]. The result of the decision is sent back to the versions judged incorrect in order to initiate their recovery.
Reference: [8] <author> B. Littlewood, and D.R. Miller, </author> <title> "A Conceptual Model of Multi-Version Software," </title> <booktitle> FTCS 17, Digest of Papers, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <pages> pp 150-155, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint <ref> [e.g., 5, 6, 7, 8, 9, 10] </ref>. Multistage systems have been investigated to a much smaller extent [e.g., 3, 10, 11]. <p> This scheme may improve the overall system reliability over that of a single component, provided certain conditions are met <ref> [7, 8, 12] </ref>. An alternative scheme is subdivision of each version into segments, and testing for correctness of the intermediate results computed by each segment [3, 4, 10]. The result of the decision is sent back to the versions judged incorrect in order to initiate their recovery.
Reference: [9] <author> A.K. Deb, and A.L. Goel, </author> <title> "Model for Execution Time Behavior of a Recovery Block,", </title> <booktitle> Proc. COMPSAC 86, </booktitle> <pages> 497-502, </pages> <year> 1986. </year>
Reference-contexts: The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint <ref> [e.g., 5, 6, 7, 8, 9, 10] </ref>. Multistage systems have been investigated to a much smaller extent [e.g., 3, 10, 11].
Reference: [10] <author> A.K. Deb, </author> <title> "Stochastic Modelling for Execution Time and Reliability of Fault-Tolerant Programs Using Recovery Block and N-Version Schemes," </title> <type> Ph.D. Thesis, </type> <institution> Syracuse University, </institution> <year> 1988. </year>
Reference-contexts: The method is called Community Error Recovery (CER). 1 Research supported in part by NASA Grant No. NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint <ref> [e.g., 5, 6, 7, 8, 9, 10] </ref>. Multistage systems have been investigated to a much smaller extent [e.g., 3, 10, 11]. <p> NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint [e.g., 5, 6, 7, 8, 9, 10]. Multistage systems have been investigated to a much smaller extent <ref> [e.g., 3, 10, 11] </ref>. In this paper, we extend the work on multistage systems through a study of multistage N-version software timing performance for a forward error recovery scheme we call Expedient Voting (EV). In section 2 we discuss the multistage N-version model. <p> This scheme may improve the overall system reliability over that of a single component, provided certain conditions are met [7, 8, 12]. An alternative scheme is subdivision of each version into segments, and testing for correctness of the intermediate results computed by each segment <ref> [3, 4, 10] </ref>. The result of the decision is sent back to the versions judged incorrect in order to initiate their recovery.
Reference: [11] <author> V.F. Nicola, and Ambuj Goyal, </author> <title> "Modeling of Correlated Failures and Community Error Recovery in Multi-version Software," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. 16(3), </volume> <pages> pp, </pages> <year> 1990. </year>
Reference-contexts: NAG-1-983 Most of the analytical work in the area of performance of N-version software systems has been done for singlestage systems, i.e. systems equivalent to only one CER checkpoint [e.g., 5, 6, 7, 8, 9, 10]. Multistage systems have been investigated to a much smaller extent <ref> [e.g., 3, 10, 11] </ref>. In this paper, we extend the work on multistage systems through a study of multistage N-version software timing performance for a forward error recovery scheme we call Expedient Voting (EV). In section 2 we discuss the multistage N-version model. <p> Reliability of Community Error Recovery has been investigated theoretically <ref> [3, 11, 13] </ref> and experimentally [4]. Nicola and Goyal [11] results indicate that the effectiveness of the technique is highly sensitive to, and easily degraded by errors in CER checkpoints and inter-version failure dependence, particularly when very high system reliabilities are targeted (e.g. 0.99999 or more). <p> Reliability of Community Error Recovery has been investigated theoretically [3, 11, 13] and experimentally [4]. Nicola and Goyal <ref> [11] </ref> results indicate that the effectiveness of the technique is highly sensitive to, and easily degraded by errors in CER checkpoints and inter-version failure dependence, particularly when very high system reliabilities are targeted (e.g. 0.99999 or more). <p> On the other hand, analyses using a model based on Knight and Leveson [15] data and reported in <ref> [11] </ref> paint a far grimmer picture of the effectiveness of CER in the face of inter-version failure dependence, and checkpoint imperfections.
Reference: [12] <author> K.S. Trivedi, </author> <title> "Probability and Statistics with Reliability, Queueing, </title> <booktitle> and Computer Science Applications, </booktitle> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1982. </year>
Reference-contexts: This scheme may improve the overall system reliability over that of a single component, provided certain conditions are met <ref> [7, 8, 12] </ref>. An alternative scheme is subdivision of each version into segments, and testing for correctness of the intermediate results computed by each segment [3, 4, 10]. The result of the decision is sent back to the versions judged incorrect in order to initiate their recovery. <p> To be specific: T i,1 = min -Q i (t)-, T i,N =max-Q i (t)-, etc. The random variable T i,k is then called the k th order statistic <ref> [12] </ref>. Let the distribution function of T i,k be denoted by F (t). Let P-...- denote probability of event -...-. Also, for simplicity, let F (t) be exponentially 2 distributed with parameter l . <p> E [t i ] = j=0 N 1 ( ) j Since Q i (t) is a vector of continuous random variables T i,1 &lt; T i,2 &lt; ... &lt; T i , N with probability one <ref> [12] </ref>.
Reference: [13] <author> A.M. Paradkar, </author> <title> "Performance Analysis of MultiStage N-Version Fault-Tolerant Software," M.S. </title> <type> Thesis, </type> <institution> North Carolina State University, </institution> <year> 1990. </year>
Reference-contexts: Reliability of Community Error Recovery has been investigated theoretically <ref> [3, 11, 13] </ref> and experimentally [4]. Nicola and Goyal [11] results indicate that the effectiveness of the technique is highly sensitive to, and easily degraded by errors in CER checkpoints and inter-version failure dependence, particularly when very high system reliabilities are targeted (e.g. 0.99999 or more). <p> Nicola and Goyal [11] results indicate that the effectiveness of the technique is highly sensitive to, and easily degraded by errors in CER checkpoints and inter-version failure dependence, particularly when very high system reliabilities are targeted (e.g. 0.99999 or more). CER is more robust at lower target system reliabilities <ref> [13] </ref>. 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 5 0 3 5 100 8 5 8 5 Final Voting Stage Third Voting Stage Second Voting Stage First Voting Stage Final Results Experiments indicate that under current software development strategies it is quite likely <p> Still, in truly parallel computing environments, under conditions of low inter-version failure correlation, with high restart and voting reliability, and with an appropriate voting scheme, a multistage N-version system may not only be more reliable than an equivalent, more traditional, singlestage system, but it may also run faster <ref> [13] </ref>. We now explore the latter possibility. 3. Execution Time In this section we discuss analytical model for the times to completion of multistage N-version fault-tolerant software. For tractability, the analytical solutions are derived under a set of simplifying assumptions.
Reference: [14] <author> P.G. Bishop, D.G. Esp, M. Barnes, P Humphreys, G. Dahl, and J. Lahti, </author> <title> "PODS-A Project on Diverse Software", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-12(9), </volume> <pages> 929-940, </pages> <year> 1986. </year>
Reference: [15] <author> J.C. Knight and N.G. Leveson, </author> <title> "An Experimental Evaluation of the assumption of Independence in Multi-version Programming", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-12(1), </volume> <pages> 96-109, </pages> <year> 1986. </year>
Reference-contexts: 1 5 0 3 5 100 8 5 8 5 Final Voting Stage Third Voting Stage Second Voting Stage First Voting Stage Final Results Experiments indicate that under current software development strategies it is quite likely that at least some of the residual faults in multi-version software will be correlated <ref> [e.g. 14, 15] </ref>. However, the prevalence of these faults and the degree of correlation remain an issue of controversy. Experimental information on the reliability offered by CER is sparse and mixed. <p> On the other hand, analyses using a model based on Knight and Leveson <ref> [15] </ref> data and reported in [11] paint a far grimmer picture of the effectiveness of CER in the face of inter-version failure dependence, and checkpoint imperfections.
Reference: [16] <author> J. Kelly, D. Eckhardt, A. Caglayan, J. Knight, D. McAllister, M. Vouk, </author> <title> "A Large Scale Second Generation Experiment in Multi-Version Software: Description and Early Results", </title> <booktitle> Proc. </booktitle> <volume> FTCS 18, </volume> <pages> pp 9-14, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: However, the prevalence of these faults and the degree of correlation remain an issue of controversy. Experimental information on the reliability offered by CER is sparse and mixed. Results from a partial analysis [4] of the functionally equivalent software developed in a multi-version experiment <ref> [16] </ref> indicate that the approach can be successful, at least in part, in increasing reliability of medium to high reliability versions.
References-found: 16

