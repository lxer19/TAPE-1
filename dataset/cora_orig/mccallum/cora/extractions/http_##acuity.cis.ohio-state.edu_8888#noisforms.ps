URL: http://acuity.cis.ohio-state.edu:8888/noisforms.ps
Refering-URL: http://acuity.cis.ohio-state.edu:8888/input-doc.html
Root-URL: 
Email: fsinha,bowers,mamrakg@cis.ohio-state.edu  
Title: Accessing a Medical Database using WWW-Based User Interfaces  
Author: Saurabh Sinha, S. Kirk Bowers, and Sandra A. Mamrak 
Note: Submitted to the WORLD WIDE WEB in  In revision. 1 This work was supported in part by Grant No. 5 U01 CA50910-08 from the National Cancer Institute.  
Date: DRAFT- January 5, 1998  May, 1997.  
Address: 2015 Neil Avenue Mall  Columbus, OH 43210  
Affiliation: Department of Computer and Information Science  The Ohio State University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Sandra A. Mamrak, John Boyd, and Ivan Ordo nez. </author> <title> Building an information system for collaborative researchers. </title> <journal> Software Practice and Experience, </journal> <volume> 27(3) </volume> <pages> 253-263, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: 1 Introduction We have been serving the data storage and retrieval needs of a national group of brain-tumor researchers for many years by way of an information system designed for this group of collaborators <ref> [1, 2] </ref>. The Neuro-Oncology Information System (NOIS) follows a client-server architecture. The server is implemented as a centralized database and the clients run on heterogeneous platforms with access to the World Wide Web, scattered throughout the United States. The NOIS database server is implemented using Oracle relational database software [3].
Reference: [2] <institution> Department of Computer and Information Science, The Ohio State University, Columbus, Ohio. </institution> <note> Neuro-Oncology Information System Technical Reference, June 1996. Also found at http://www.acuity.cis.ohio-state.edu. </note>
Reference-contexts: 1 Introduction We have been serving the data storage and retrieval needs of a national group of brain-tumor researchers for many years by way of an information system designed for this group of collaborators <ref> [1, 2] </ref>. The Neuro-Oncology Information System (NOIS) follows a client-server architecture. The server is implemented as a centralized database and the clients run on heterogeneous platforms with access to the World Wide Web, scattered throughout the United States. The NOIS database server is implemented using Oracle relational database software [3].
Reference: [3] <author> Oracle Corporation, </author> <title> Redwood City, CA. ORACLE7 Server Application Developer's Guide, </title> <month> December </month> <year> 1992. </year> <note> PN 6695-70-1292. </note>
Reference-contexts: The Neuro-Oncology Information System (NOIS) follows a client-server architecture. The server is implemented as a centralized database and the clients run on heterogeneous platforms with access to the World Wide Web, scattered throughout the United States. The NOIS database server is implemented using Oracle relational database software <ref> [3] </ref>. Originally, the client software also was based on Oracle software: the Oracle Data Browser [4] for query capability and Oracle Forms [5, 6] for input capability. We migrated our client software to Web-based Java code. <p> There are also methods to change user password, and fetch sequence numbers from the database. A sequence is a database object that generates unique, monotonically increasing integers <ref> [3] </ref>. The NOIS database uses such sequences to generate primary key values for relations.
Reference: [4] <institution> Oracle Corporation, </institution> <address> Redwood City, CA. </address> <note> Oracle Data Browser User's Guide, October 1992. (Version 1.0) PN 6480-10-1092. </note>
Reference-contexts: The NOIS database server is implemented using Oracle relational database software [3]. Originally, the client software also was based on Oracle software: the Oracle Data Browser <ref> [4] </ref> for query capability and Oracle Forms [5, 6] for input capability. We migrated our client software to Web-based Java code. In the migration, our goal in the design process was to create an object-oriented framework [7, 8].
Reference: [5] <author> Oracle Corporation, </author> <title> Redwood City, CA. Oracle Forms Reference Manual Volume 1, </title> <month> July </month> <year> 1993. </year> <note> (Version 4.0) PN A11988-1. </note>
Reference-contexts: The NOIS database server is implemented using Oracle relational database software [3]. Originally, the client software also was based on Oracle software: the Oracle Data Browser [4] for query capability and Oracle Forms <ref> [5, 6] </ref> for input capability. We migrated our client software to Web-based Java code. In the migration, our goal in the design process was to create an object-oriented framework [7, 8]. A framework is a reusable, `semi-complete' application that can be specialized to produce custom applications.
Reference: [6] <author> Oracle Corporation, </author> <title> Redwood City, CA. Oracle Forms Reference Manual Volume 2, </title> <month> July </month> <year> 1993. </year> <note> (Version 4.0) PN A11989-1. </note>
Reference-contexts: The NOIS database server is implemented using Oracle relational database software [3]. Originally, the client software also was based on Oracle software: the Oracle Data Browser [4] for query capability and Oracle Forms <ref> [5, 6] </ref> for input capability. We migrated our client software to Web-based Java code. In the migration, our goal in the design process was to create an object-oriented framework [7, 8]. A framework is a reusable, `semi-complete' application that can be specialized to produce custom applications.
Reference: [7] <author> Mohamed E. Fayad and Douglas C. Schmidt. </author> <title> Object-oriented application frameworks. </title> <journal> Communications of the ACM, </journal> <volume> 40(10) </volume> <pages> 32-38, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: We migrated our client software to Web-based Java code. In the migration, our goal in the design process was to create an object-oriented framework <ref> [7, 8] </ref>. A framework is a reusable, `semi-complete' application that can be specialized to produce custom applications.
Reference: [8] <author> Ralph E. Johnson. </author> <title> Frameworks = (components + patterns). </title> <journal> Communications of the ACM, </journal> <volume> 40(10) </volume> <pages> 39-42, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: We migrated our client software to Web-based Java code. In the migration, our goal in the design process was to create an object-oriented framework <ref> [7, 8] </ref>. A framework is a reusable, `semi-complete' application that can be specialized to produce custom applications.
Reference: [9] <institution> Oracle Corporation, </institution> <address> Redwood City, CA. </address> <note> SQL*Net Administrator's Guide, July 1993. (Version 2.0) PN A11325-1. </note>
Reference-contexts: The Oracle Forms Runtime has to be installed on each client machine that wishes to access the database through the user interfaces. The connection between the Forms interface and the database is handled transparently through Oracle's proprietary communication protocol called SQL*Net <ref> [9] </ref>. Versions 1 and 2 of the NOIS input forms were implemented in this manner.
Reference: [10] <author> David H. Friedel Jr. and Anthony Potts. </author> <title> Java Programming Language Handbook. </title> <publisher> Coriolis Group Books, </publisher> <year> 1996. </year>
Reference-contexts: Based on our experience with client-side software installation and maintenance, we also desired a solution that allowed for developing and maintaining only one, machine-independent version of each form, that did not require client-side installation, and that could penetrate firewalls. The Java paradigm <ref> [10, 11] </ref> presented to us a truly compelling, revolutionary solution, having all of the desired characteristics for which we were looking. Java is object-oriented, so could help us manage complexity both in terms of high-level design methods and its reuse capability.
Reference: [11] <author> Jamie Jaworski. </author> <title> Java Developer's Guide. Sams Net, </title> <year> 1996. </year>
Reference-contexts: Based on our experience with client-side software installation and maintenance, we also desired a solution that allowed for developing and maintaining only one, machine-independent version of each form, that did not require client-side installation, and that could penetrate firewalls. The Java paradigm <ref> [10, 11] </ref> presented to us a truly compelling, revolutionary solution, having all of the desired characteristics for which we were looking. Java is object-oriented, so could help us manage complexity both in terms of high-level design methods and its reuse capability.
Reference: [12] <author> Brent B. Welch. </author> <title> Practical Programming in Tcl and Tk. </title> <publisher> Prentice Hall PTR, </publisher> <address> New Jersy, </address> <year> 1995. </year>
Reference-contexts: There is no remote installation requirement (aside from having a WWW browser) and Java applets penetrate most firewalls. We are aware of no other approach to, or toolkit for, user interface design that meets all of our desired criteria. For example, Tk/TCL <ref> [12] </ref> is a scripting language, and not able to easily handle the level of complexity of our forms or to easily support reuse. The X Window System/Motif [13] is tied to Unix platforms only. The Application Environment Specification from the Open Software Foundation [14] must be installed on the client.
Reference: [13] <author> Valerie Quericia and Tim O'Reilly. </author> <title> X Window System User's Guide. </title> <publisher> O'Reilly & Associates, Inc, </publisher> <year> 1991. </year>
Reference-contexts: For example, Tk/TCL [12] is a scripting language, and not able to easily handle the level of complexity of our forms or to easily support reuse. The X Window System/Motif <ref> [13] </ref> is tied to Unix platforms only. The Application Environment Specification from the Open Software Foundation [14] must be installed on the client.
Reference: [14] <author> Open Software Foundation. </author> <title> Application Environment Specification (AES) User Environment Volume. Open Software Foundation, </title> <year> 1990. </year>
Reference-contexts: For example, Tk/TCL [12] is a scripting language, and not able to easily handle the level of complexity of our forms or to easily support reuse. The X Window System/Motif [13] is tied to Unix platforms only. The Application Environment Specification from the Open Software Foundation <ref> [14] </ref> must be installed on the client. Commercial database forms systems typically will not penetrate firewalls (e.g., this is true for Oracle Forms). 2 User Interface Design The NOIS Browser and the various NOIS Input Forms are executed from within a common overall system architecture.
Reference: [15] <author> Shishir Gundavaram. </author> <title> CGI Programming on the World Wide Web. </title> <publisher> O'Reilly & Associates, Inc, </publisher> <year> 1996. </year>
Reference-contexts: These applets are comprised of a `front-end' component and a `back-end' component. The `front-end' manages the interface with which users interact; the `back-end' handles all database accesses. The `back-end' connects to Oracle WebServer with appropriate parameters. The server in turn invokes a CGI <ref> [15] </ref> program that posts a user request to the database. The results from the database are interpreted by the `back-end' and passed on to the `front-end'. 3 The `front-end' includes a graphical user interface for the NOIS Browser and the Input Forms, through which users interact with the system. <p> A fourth option, the one we chose, was to implement the connection mechanism as a series of server processes: an Oracle WebServer to establish a firewall-penetrable URL connection from the client side, paired with a Perl CGI <ref> [15] </ref> program to handle decoding the request and forwarding it on to the database server. The Java components of the `back-end' are grouped under nois.ndbc package, and comprise of two classes: NdbcConn and NdbcTable. These classes define the interface to the `back-end', and execute on the client machines.
Reference: [16] <author> Grady Booch. </author> <title> Object-Oriented Analysis and Design. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Each diagram shows the inheritance and containment relationships among classes. A containment relationship is qualified as either containment-by-value, or containment-by-reference, as suggested by Booch <ref> [16] </ref>. Each of these relationships is shown by a different arrow. The cardinality of a containment-by-value relationship is shown next to the arrow.
Reference: [17] <author> E. F. Codd. </author> <title> A relational model for large shared data banks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1970. </year>
Reference-contexts: It can, therefore, maintain a mapping between an object and a string. 11 3.2 Database Classes The database-related classes provide a useful abstraction for NOIS database objects like tables and views, that are referenced by the Input Forms. The NOIS database schema follows the relational data model <ref> [17, 18] </ref>. It contains a number of relations or base tables that hold records of data. The users of NOIS can update data in most of these tables. A few of them, however, serve as lookup tables a lookup table lists valid values for a field in another table.
Reference: [18] <author> Peter Pin-Shan Chen. </author> <title> The Entity-Relationship Model | Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: It can, therefore, maintain a mapping between an object and a string. 11 3.2 Database Classes The database-related classes provide a useful abstraction for NOIS database objects like tables and views, that are referenced by the Input Forms. The NOIS database schema follows the relational data model <ref> [17, 18] </ref>. It contains a number of relations or base tables that hold records of data. The users of NOIS can update data in most of these tables. A few of them, however, serve as lookup tables a lookup table lists valid values for a field in another table.
Reference: [19] <author> Robert G. Fichman and Chris F. Kemerer. </author> <title> Object technology and reuse: Lessons from early adopters. </title> <booktitle> Computer, </booktitle> <pages> pages 47-58, </pages> <month> October </month> <year> 1997. </year> <month> 24 </month>
Reference-contexts: We are aware of the factors that cause such efforts to fail and found ourselves in a situation in which we are able to avoid most, if not all, of these factors. An emerging consensus in the reuse community is that the primary reuse barriers are nontechnical <ref> [19] </ref>.
References-found: 19

