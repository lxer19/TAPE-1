URL: http://www.cs.unc.edu/~anderson/papers/rtss98c.ps.Z
Refering-URL: http://www.cs.unc.edu/~anderson/papers.html
Root-URL: http://www.cs.unc.edu
Email: -jeffay,smithfd,moorthy,anderson-@cs.unc.edu  
Title: Proportional Share Scheduling of Operating System Services for Real-Time Applications Applications such as interactive multimedia
Author: Kevin Jeffay, F. Donelson Smith, Arun Moorthy, James Anderson 
Address: Chapel Hill, NC 27599-3175  
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  
Note: In: Proceedings of the 19 th IEEE Real-Time Systems Symposium, Madrid, Spain, December 1998, to appear.  1 Introduction  [3, 7, 9, 13]. In a proportional share Work supported by grants from the National Science Foundation (grants CCR-9510156, CCR-9732916) and the IBM Corporation.  
Abstract: While there is currently great interest in the problem of providing real-time services in general purpose operating systems, the issue of real-time scheduling of internal operating system activities has received relatively little attention. Without such real-time scheduling, the system is susceptible to conditions such as receive livelock a situation in which an operating system spends all its time processing arriving network packets, and application processes, even if scheduled with a real-time scheduler, are starved. We investigate the problem of scheduling operating system activities such as network protocol processing in a proportional share manner. We describe a proportional share implementation of the FreeBSD operating system and demonstrate that it solves the receive livelock problem. Packets are processed within the operating system only at the cumulative rate at which the destination applications are prepared to receive them. If packets arrive at a faster rate then they are discarded after consuming minimal system resources. In this manner the performance of well behaved applications is unaffected by misbehaving applications. We demonstrate this effect by running a set of multimedia applications under a variety of network conditions on a set of increasingly sophisticated proportional share implementations of FreeBSD and comparing their performance. This work contributes to our knowledge of system, processes make progress at a precise, uniform rate according to the share of system resources they are to receive. Processes appear to execute on a dedicated virtual processor whose capacity is a fraction of that of the actual processor. Proportional share resource allocation is particularly wellsuited to the problem of providing real-time services within a general purpose operating system because its underlying scheduling mechanism is a quantum-based round-robin-like scheduler and because one can implement a proportional share system without introducing any new application-level concepts or mechanisms. This means that existing applications can be made to execute in a predict able, real-time manner without modifying the application. Previous operating system work in proportional share resource allocation has considered only the problem of scheduling user processes. In particular, the problem of scheduling operating system activity such as network protocol processing has not been addressed. This is significant because much of the processing in the operating system occurs asynchronously with respect to system calls made by applications. If the execution of operating system activities is not managed carefully, the operating system may consume an inordinate amount of resources and nullify the benefits of real-time scheduling for application processes. For example, consider the receive livelock problem described by Druschel and Banga, and by Mogul and Rama-krishnan [6, 23]. In most general purpose operating systems, the processing of inbound network packets is the highest priority activity after the processing of clock interrupts. This is the case because the network interface is arguably the most real-time device on a general purpose computer. Since one cannot typically control the rate at which packets arrive at a computer, when packets are not processed fast enough, it is possible that packets may be lost at the network interface. Said another way, unlike most other devices attached to a computer, the operating system cannot force the network interface to stop generating service requests without running the risk of losing data. On modern highspeed networks, packets can arrive at the engineering of proportional share real-time systems.
Abstract-found: 1
Intro-found: 1
References-found: 0

