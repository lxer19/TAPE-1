URL: http://media-bank.www.media.mit.edu/projects/media-bank/doc/reference/abramson.ps
Refering-URL: http://media-bank.www.media.mit.edu/projects/media-bank/
Root-URL: http://www.media.mit.edu
Title: Context-Sensitive Multimedia  AND PLANNING  
Author: by Nathan Shalom Abramson Walter Bender Stephen A. Benton 
Degree: SUBMITTED TO THE  IN PARTIAL FULFILLMENT OF THE REQUIREMENTS FOR THE DEGREE OF MASTER OF SCIENCE IN VISUAL STUDIES at the  c 1993 MIT All Rights Reserved Signature of Author:  Certified by:  Thesis Supervisor Accepted by:  Chairperson Departmental Committee on Graduate Students  
Date: (1990)  February 1993  September 24, 1992  
Affiliation: S.B., Computer Science and Engineering Massachusetts Institute of Technology  MEDIA ARTS AND SCIENCES SECTION, SCHOOL OF ARCHITECTURE  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Media Arts and Sciences  Principal Research Scientist, MIT Media Lab  
Pubnum: Section  
Abstract-found: 0
Intro-found: 1
Reference: [Abr92a] <author> Nathan S. </author> <title> Abramson. </title> <address> The dsys Library, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Even on the C programming level, there are the Dtype [Abr92b] and dsys <ref> [Abr92a] </ref> libraries to keep networking as far away as possible. This also means that all machine architecture differences have to be abstracted away, which is done mostly through the dsys and Dtype libraries. Remote object location One of the last things to be added onto O is remote object location.
Reference: [Abr92b] <author> Nathan S. </author> <title> Abramson. </title> <address> The Dtype Library, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: On the object level, the programmer must be aware that there are separate machines that the object may be running on, but that is modeled and abstracted so heavily that it can hardly be called network programming. Even on the C programming level, there are the Dtype <ref> [Abr92b] </ref> and dsys [Abr92a] libraries to keep networking as far away as possible. This also means that all machine architecture differences have to be abstracted away, which is done mostly through the dsys and Dtype libraries. <p> Such modules would send messages spontaneously, either according to a timer or else in response to some other activity on the system. 24 All messages are passed using a standardized data structure called a Dtype. The following is a brief description of Dtypes, but the Dtype manual <ref> [Abr92b] </ref> should be consulted for a full description of Dtypes. Dtypes Dtypes are typed data structures, which are used to represent many commonly used data types in a universal format. The data types supported include integers, reals, strings, variable-length lists, and packets of raw bytes.
Reference: [Abr92c] <author> Nathan S. Abramson. </author> <title> The O User's Manual, </title> <month> July </month> <year> 1992. </year>
Reference-contexts: O is designed to implement high-level functional specifications, with the assumption that the O model can expand to include 10 temporally sensitive functions. This chapter outlines the motivation and evolution of O, followed by a detailed description of the O model. Consult <ref> [Abr92c] </ref> for a more complete description of O programming and implementation. 2.1 Glossary The following is a glossary of the terms that will be used throughout this chapter. Dtype Client OModule An OModule class generated by an OServer, which is han dled by a Dtype server. Section 2.4.1.
Reference: [Ber90] <author> Steven V. Bertsche. </author> <title> HyperMedia/Time-based Document (HyTime) and Standard Music Description Language (SMDL) User Needs and Functional Specification. </title> <institution> University of Delaware, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: Object-oriented design is a good first step towards making adaptable objects. With this design, the application can relate the current situation to the object by invoking certain methods, and the object can reconfigure itself as it sees fit. Object-oriented multimedia is slowly appearing in commercial contexts. For example, HyperMedia <ref> [Ber90] </ref> has its own particular scheme for representing objects, a hypercard stack, which can also be used to represent multimedia. These hypercard stacks can easily be shared and reused by other programmers, which is one of the important qualities of object-oriented programming.
Reference: [BF92] <author> Nathaniel Borenstein and Ned Freed. </author> <title> MIME (Multipurpose Internet Mail Extensions): Mechanisms for Specifying and Describing the Format of Internet Message Bodies. </title> <institution> Bellcore and Innosoft, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: This will allow multimedia designers to create presentations that can be used in several applications. "Libraries" of shared multimedia objects can be created, which designers can access to create presentations (assuming copyright laws do not interfere). And multimedia can also be transported using these standards the MIME standard <ref> [BF92] </ref>, for example, is a method for transporting multimedia through Internet mail. As multimedia objects begin to proliferate in this manner, two things will happen. First, multimedia objects will become more complex, with more interactive behavior. <p> What we really wanted was to write one universal server and client, and somehow embed the encoding and decoding instructions into the movie itself (see figure 2.2). The idea of embedding instructions into a multimedia stream is not new. MIME <ref> [BF92] </ref>, for example, specifies a multimedia representation for Internet mail. While MIME supports several encoding schemes, the specification also allows for an application to be included in the mail, where that application may serve as an interpreter for the rest of the mail.
Reference: [Blo92] <author> Alan Blount. Bettyserver: </author> <title> More News Than You Can Beat With a Stick, </title> <month> August </month> <year> 1992. </year>
Reference-contexts: Dtype Client OModules The Dtype package includes a method for quickly writing network servers, and recently several such servers have appeared in the Entertainment and Information Technology group - betty <ref> [Blo92] </ref>, a news server, videovisual, a visual activity server similar to the UNIX "finger" command, digitizesrv, a server for digitizing video from a NeXTDimension board, vpr3srv, a server for remotely controlling a VPR3 1" video machine, and doppelsrv, a forthcoming user-modeling server.
Reference: [ES90] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1990. </year>
Reference-contexts: Common interface Different object oriented systems have different methods of communicating with their objects. A programming language such as C++ <ref> [ES90] </ref> invokes object methods in a manner similar to function calls. O uses message passing, a more dynamic, process-oriented approach. In O, every multimedia object is an OModule, figuratively a "black box" with inputs and outputs. Objects communicate with each other by passing messages from outputs to inputs.
Reference: [Flu90] <institution> Fluent Machines Inc. FM/1 Multimedia Development System, </institution> <year> 1990. </year>
Reference-contexts: Apple's QuickTime [Poo91] and Fluent's FM/1 <ref> [Flu90] </ref>, for example, realize the benefits of encapsulating decoding behaviors, mostly as a means for gracefully extending applications to take advantage of evolving productions. In all cases, however, the application controls and keeps track of every piece of media that runs through the application.
Reference: [IBM91] <institution> IBM. AIX/Visualization Data Explorer/6000, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: While this makes O somewhat large and bulky, it also allows O to be used to explore other topics besides object-oriented multimedia, such as networked digital video. O is patterned after the object-oriented design method espoused by MAX [PZ] and Data Explorer <ref> [IBM91] </ref>. This method is based on the design of a real-time process, where the flow of data is directed between functional modules through a network of connections. <p> C, and in fact most traditional programming languages, are very bad at organizing real-time processes in this manner. Omodules The second method that was attempted was a graphically based process description language, similar to MAX [PZ] from IRCAM and Data Explorer <ref> [IBM91] </ref> from IBM. Here, specific functional elements (modules) are wired together (with connections) in such a way that it is graphically obvious how information is flowing. All activity occurs in a consistent manner, through message passing between objects. With this model, the transportable methods issue becomes simple.
Reference: [Lau91] <author> Brenda Laurel. </author> <title> Computers as Theater. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1991. </year> <month> 98 </month>
Reference-contexts: Metaphorically, the application is a director who sets the stage for the objects, the objects are the players which interact with each other, with the set, and with the director (thanks to Brenda Laurel <ref> [Lau91] </ref> for this analogy). Under this model, the application has less direct control over the objects it is using. Instead, the application communicates with the objects as an equal, as if the application were just another object operating in the environment.
Reference: [Lin92] <author> Christopher J. Lindblad. </author> <title> Thesis Proposal: A Distributed System for the Dynamic Manipulation of Temporally Sensitive Data. </title> <type> PhD thesis, </type> <institution> MIT Laboratory for Computer Science, </institution> <year> 1992. </year>
Reference-contexts: O will continue to evolve, hopefully to incorporate the results of the multimedia research being performed with O. The model for O is similar to the ViewStation project proposed by Chris Lindblad <ref> [Lin92] </ref>, which is also based on a distributed object-oriented environment. ViewSta-tion attempts to integrate the manipulation of temporally sensitive data with temporally insensitive processing by using media entity programming (a form of object-oriented programming), and time-stamped streams to move data around. <p> The next major step for O is to improve its efficiency and begin to move O into "real-time" applications. One possible goal is to enable O to meet temporal specifications (like Chris Lindblad's ViewStation <ref> [Lin92] </ref>) as well as functional specifications. This will require O to perform temporally sensitive functions, such as maintaining a constant bandwidth data stream over the network, and paying closer attention to resource usage.
Reference: [NO90] <author> Adrian Nye and Tim O'Reilly. </author> <title> X Toolkit Intrinsics Programming Manual. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1990. </year>
Reference-contexts: The application level is most straightforward and is designed for interacting with existing multimedia objects. The object level is more complex (and more functional) and is meant for creating multimedia objects. This is similar to the X toolkit programming model <ref> [NO90] </ref>. Widgets are pre-constructed objects, and the interface for using them is relatively simple. However, a lesson can be learned here, because writing widget objects is extremely difficult.
Reference: [Orw91] <author> Jon Orwant. </author> <title> The Doppelganger User Modeling System. In Workshop on Agent Modelling for Intelligent Interaction. </title> <booktitle> International Joint Conference on Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: For example, an article may be written from a different viewpoint if it is being read by a man or a woman. This is possible if the application is combined with a user-modeling system, such as Doppelganger, by Jon Orwant <ref> [Orw91] </ref>. This system maintains user models of several people, where each model is expressed using the same knowledge representation that the content cues use.
Reference: [Poo91] <author> Lon Poole. </author> <title> Quicktime in motion. </title> <type> Macworld, </type> <month> September </month> <year> 1991. </year>
Reference-contexts: For example, HyperMedia [Ber90] has its own particular scheme for representing objects, a hypercard stack, which can also be used to represent multimedia. These hypercard stacks can easily be shared and reused by other programmers, which is one of the important qualities of object-oriented programming. QuickTime from Apple <ref> [Poo91] </ref> also takes a stab at an object-oriented approach for time-based media. QuickTime movie objects can easily be used by a wide variety of Macintosh applications. <p> Context-sensitive multimedia is also a model for building applications which establish and manipulate the contexts in which context-sensitive objects will operate. 1.5 Context-sensitive multimedia and current mul timedia systems As mentioned before, several current multimedia systems are beginning to espouse an object-oriented method in their design. Apple's QuickTime <ref> [Poo91] </ref> and Fluent's FM/1 [Flu90], for example, realize the benefits of encapsulating decoding behaviors, mostly as a means for gracefully extending applications to take advantage of evolving productions. In all cases, however, the application controls and keeps track of every piece of media that runs through the application.
Reference: [PZ] <author> Miller Puckette and David Zicarelli. MAX: </author> <title> An Interactive Graphic Programming Environment. </title> <publisher> OPCODE Systems Inc. </publisher> <pages> 99 </pages>
Reference-contexts: While this makes O somewhat large and bulky, it also allows O to be used to explore other topics besides object-oriented multimedia, such as networked digital video. O is patterned after the object-oriented design method espoused by MAX <ref> [PZ] </ref> and Data Explorer [IBM91]. This method is based on the design of a real-time process, where the flow of data is directed between functional modules through a network of connections. <p> C, and in fact most traditional programming languages, are very bad at organizing real-time processes in this manner. Omodules The second method that was attempted was a graphically based process description language, similar to MAX <ref> [PZ] </ref> from IRCAM and Data Explorer [IBM91] from IBM. Here, specific functional elements (modules) are wired together (with connections) in such a way that it is graphically obvious how information is flowing. All activity occurs in a consistent manner, through message passing between objects.
References-found: 15

