URL: http://www.cs.washington.edu/research/networking/napt/reports/usenix98/mef-usenix98-final.ps
Refering-URL: http://www.cs.washington.edu/research/networking/napt/reports/index.html
Root-URL: http://www.cs.washington.edu
Title: The Design and Implementation of an IPv6/IPv4 Network Address and Protocol Translator  
Author: Marc E. Fiuczynski Vincent K. Lam Brian N. Bershad 
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: IPv6 is a new version of the internetworking protocol designed to address the scalability and service shortcomings of the current standard, IPv4. Unfortunately, IPv4 and IPv6 are not directly compatible, so programs and systems designed to one standard can not communicate with those designed to the other. IPv4 systems, however, are ubiquitous and are not about to go away over night as the IPv6 systems are rolled in. Consequently, it is necessary to develop smooth transition mechanisms that enable applications to continue working while the network is being upgraded. In this paper we present the design and implementation of a transparent transition service that translates packet headers as they cross between IPv4 and IPv6 networks. While several such transition mechanisms have been proposed, ours is the first actual implementation. As a result, we are able to demonstrate and measure a working system, and report on the complexities involved in building and deploying such a system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Deering and R. Hinden. </author> <title> Internet Protocol, </title> <type> Version 6. RFC 1883, </type> <month> December </month> <year> 1995. </year>
Reference: [2] <author> P. Srisuresh and K. Egevang. </author> <title> The IP Network Address Translator (NAT). </title> <type> RFC 1631, </type> <month> May </month> <year> 1994. </year>
Reference-contexts: That is, in requires an IPv4 address that can be routed through the IPv4 Internet. To overcome this limitation a stateful translator could multiplex several IPv6 hosts onto a single, globally unique IPv4 address using the TCP/UDP port translation technique described in <ref> [2] </ref>. communicating with nodes in an IPv6 network. Hosts in the IPv4 site send packets to nodes in the IPv6 network using IPv4 destination addresses assigned by the translator that map to individual IPv6 hosts. <p> and most noteworthy, the integrated approach enables the illusion of an IPv6-only node, as packets stemming from legacy IPv4 applications may be translated to IPv6 before they leave the machine. 5 Related Work In principle the function of IPv6/IPv4 address translation is similar to an IPv4 Network Address Translator (NAT) <ref> [2] </ref>, which converts private internal addresses to globally unique addresses that are passed to the Internet backbone and vice versa. The IPv4 NAT has the following limitations.
Reference: [3] <author> R. Gilligan and E. Nordmark. </author> <title> Transition Mechanisms for IPv6 Hosts and Routers. </title> <booktitle> RFC 1933, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: Consequently, it is necessary to develop transition mechanisms that enable applications to continue working while the hosts and networks are being upgraded. One suggested strategy is to translate IP headers as they cross between IPv4 and IPv6 networks <ref> [3] </ref>. The requirement of header translation is to remain transparent to applications and the network. In this paper we present two variations of IPv6/IPv4 translators that address these difficulties. The first variation uses special IPv6 addresses, as proposed in [4], to easily translate packets transparently for all applications.
Reference: [4] <editor> E. Nordmark. Stateless IP/ICMP Translator (SIIT). </editor> <booktitle> Work In Progress. </booktitle>
Reference-contexts: The requirement of header translation is to remain transparent to applications and the network. In this paper we present two variations of IPv6/IPv4 translators that address these difficulties. The first variation uses special IPv6 addresses, as proposed in <ref> [4] </ref>, to easily translate packets transparently for all applications. Unfortunately, these special IPv6 addresses also require IPv6 routers to contain special routes to them, which is considered to be a bad idea because it creates more state for the router to maintain [4]. <p> variation uses special IPv6 addresses, as proposed in <ref> [4] </ref>, to easily translate packets transparently for all applications. Unfortunately, these special IPv6 addresses also require IPv6 routers to contain special routes to them, which is considered to be a bad idea because it creates more state for the router to maintain [4]. The second variation maintains an explicit mapping between IPv4 and IPv6 addresses, and is therefore able to use standard IPv6 addresses that do not require any special treatment by IPv6 routers. <p> Hosts in the IPv6 site send packets to nodes in the IPv4 network using IPv6 addresses that map to individual IPv4 hosts. For this scenario, a design presented in <ref> [4] </ref> proposes that IPv6 nodes use an IPv4-compatible IPv6 address as their own address and an IPv4-mapped IPv6 address when communicating with IPv4-only nodes. <p> However, it is considered to be a very bad idea to use IPv4-mapped address as it has the drawback of requiring IPv6 routers to contain routes to IPv4-mapped addresses <ref> [4] </ref>. The alternative is to use IPv6-only addresses to refer to IPv4 nodes, which requires the translator to maintain an explicit mapping between IPv4 and IPv6 addresses. For clarity, we introduce an IPxNODEy notation to disambiguate among the types of addresses used in the translation process. <p> It also describes how to incorporate IPv4 NAT style UDP/TCP port number translation. With exception of the port number translation this is similar to the stateful component of our design. A proposal called Stateless IP/ICMP Translation" (SIIT) <ref> [4] </ref> avoids the need for address translation, thereby overcoming the limitations of IPv4 NAT. First, it does not maintain state, and is therefore resilient to network failure. Moreover, multiple stateless translators may be used to scale with larger sites. <p> To this date there are three proposals <ref> [4] </ref>[5][7] submitted to the IETF NGTRANS working group to support the interoperability between IPv6 and IPv4-only nodes. Our work subsumes both the stateless SIIT design described in [4] and the stateful design described in [7]. Despite the limitations of translation (e.g., loss of information) we believe that a translator can adequately fulfill the role of a short-term transition aid from IPv4 to IPv6, since it supports the majority of Internet traffic (HTTP, FTP, sendmail).
Reference: [5] <author> J. </author> <title> Bound. Assignment of IPv4 Global Addresses to IPv6 Hosts (AIIH). </title> <booktitle> Work In Progress. </booktitle>
Reference-contexts: Finally, a proposal called Assignment of IPv4 Global Addresses to IPv6 Hosts (AIIH) <ref> [5] </ref> enables dualstack IPv6/IPv4 nodes to temporarily acquire a global IPv4 address to communicate with other IPv4-only nodes. This approach may be the initial stepping stone to allow sites to configure a large set of IPv6 hosts without having to statically assign each host a globally unique IPv4 address. <p> Based on our experience we conclude that an IPv6/IPv4 network address and protocol translator is complementary to the AIIH <ref> [5] </ref> approach in transitioning from IPv4 to IPv6. In particular, we believe that it will be a valuable tool to developers porting applications from IPv4 to IPv6. For instance, a server application ported to IPv6 can be tested without having to port the client as well.
Reference: [6] <author> R. E. Gilligan, S. Thomson, J. Bound, and W. R. Stevens. </author> <title> Basic Socket Interface Extensions for IPv6. </title> <booktitle> Work In Progress. </booktitle>
Reference: [7] <author> G. Tsirtsis and P. Srisuresh. </author> <title> Network Address Translation Protocol Translation (NAT-PT). </title> <type> IETF Internet Draft, </type> <month> March </month> <year> 1998. </year> <title> Work In Progress. </title>
Reference-contexts: We hope that a similar solution can be used with IPv6 versions of all legacy applications that embed IP address content. If thats not possible, then the translator will need to be complemented with application level gateways to expand the list of supported applications <ref> [7] </ref>. 4.3 Hostname Lookup Before a host can initiate a session with another host it has to lookup its address. This is generally done using host tables or DNS. <p> Second, the site's DNS servers could be modified to request a temporary address from the translator on behalf of its IPv4 clients when encountering an IPv6 DNS record. Finally, an approach proposed in <ref> [7] </ref> suggests that the translator recognize DNS request and response packets and translates them transparently. <p> Any stateful translator shares these limitations. Nevertheless, despite these limitations NATs seem to be widely used. A proposal called Network Address Translation Protocol Translation (NAT-PT) <ref> [7] </ref> presents a stateful IPv6/IPv4 translator design. It also describes how to incorporate IPv4 NAT style UDP/TCP port number translation. With exception of the port number translation this is similar to the stateful component of our design. <p> To this date there are three proposals [4][5]<ref> [7] </ref> submitted to the IETF NGTRANS working group to support the interoperability between IPv6 and IPv4-only nodes. Our work subsumes both the stateless SIIT design described in [4] and the stateful design described in [7]. Despite the limitations of translation (e.g., loss of information) we believe that a translator can adequately fulfill the role of a short-term transition aid from IPv4 to IPv6, since it supports the majority of Internet traffic (HTTP, FTP, sendmail).
Reference: [8] <author> J. Mogul and S. Deering. </author> <note> Path MTU Discovery, RFC 1191, </note> <month> November </month> <year> 1990. </year>
Reference: [9] <author> J. McCann, S. Deering, and J. Mogul. </author> <note> Path MTU Discovery for IP version 6, RFC 1981, </note> <month> Aug. </month> <year> 1996. </year>
Reference: [10] <author> J. Postel. </author> <title> Internet Control Message Protocol. </title> <type> RFC 792, </type> <month> Sep. </month> <year> 1981. </year>
Reference: [11] <author> J. Postel. </author> <title> Internet Protocol. </title> <type> RFC 791, </type> <month> Sept. </month> <year> 1981. </year>
Reference-contexts: 1 Introduction The current internetworking protocol, IPv4 <ref> [11] </ref>, eventually will be unable to adequately support additional nodes or the requirements of new applications. IPv6 is a new network protocol that features improved scalability and routing, security, ease-of-configuration, and higher performance compared to IPv4.
Reference: [12] <author> B. Fink, </author> <title> 6Bone Overview and Links. </title> <address> http://www.6bone.net </address>
Reference-contexts: After completing the initial IPv6 implementation we connected our system to the 6Bone <ref> [12] </ref>. We were interested in accessing services using IPv6, but quickly discovered that there were only a few hosts (roughly 250) accessible via the 6Bone with even fewer IPv6 native services to talk to.
Reference: [13] <author> B. N. Bershad, S. Savage, P. Pardyak, E.G. Sirer, M. E. Fiuczynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Between a pair of IPv6 and IPv4 nodes communicating via the translator, we have measured TCP bandwidth of 7210 Kbytes/second and roundtrip packet latencies of 424 microseconds over 100Mbit/second Ethernet links. 1.1 Motivation Our efforts began with an implementation of the IPv6 protocol for the SPIN <ref> [13] </ref> extensible operating system, which enables the rapid prototyping of kernel extensions. After completing the initial IPv6 implementation we connected our system to the 6Bone [12].
Reference: [14] <author> Y. Rekhter, B. Moskowitz, D. Karrenberg, and G. de Groot. </author> <title> Address Allocation for Private Internets. </title> <type> RFC 1597, </type> <month> March </month> <year> 1994. </year>
Reference-contexts: On the other hand, there is a large pool of roughly 17 million site private IPv4 addresses defined by <ref> [14] </ref>, which can be used by the translator to map to IPv6 addresses. Our translator is designed to support all of the scenarios just described. To enable communication between an IPv4 and IPv6 node, a translator needs to do both address and protocol translation.
Reference: [15] <author> H. Custer. </author> <title> Inside Windows NT. </title> <publisher> Microsoft Press. </publisher> <year> 1993. </year>
Reference-contexts: Its drawback is that IP-addresses embedded in some applications' data stream, such as FTP, must be updated as well for the translation to be completely transparent. We have built an IPv6/IPv4 network address and protocol translator as a device driver running in the Windows NT operating system <ref> [15] </ref>. Our test environment consists of the translator as a gateway between IPv6 and IPv4 hosts connected to separate Ethernet segments, and it incurs little performance overhead.

References-found: 15

