URL: http://choices.cs.uiuc.edu/2k/papers/off-TR.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Email: nemo@gsyc.inf.uc3m.es fckhess, f-kon, royg@cs.uiuc.edu http://choices.cs.uiuc.edu  
Title: The Design and Implementation of the Off and vOff kernels  
Author: Francisco J. Ballesteros Christopher K. Hess Fabio Kon Roy H. Campbell 
Note: This research is supported by a grant from the National Science Foundation, NSF 98-70736.  
Date: March, 1999  
Address: 1304 West Springfield Avenue, Urbana, IL 61801-2987 USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Pubnum: Report No. UIUCDCS-R-99-2086, UILU-ENG-99-1707  
Abstract-found: 0
Intro-found: 1
Reference: [Bal98] <author> Francisco J. Ballesteros. Off - Un Neuvo Envoque en la Construccion de Sistemas Operativos Distruibos. </author> <type> PhD thesis, </type> <institution> Facultad de Informatica. Uiversidad Pilitecnica de Madrid, </institution> <year> 1998. </year>
Reference-contexts: Off ++ also adds new functionalities to the kernel in order to provide basic support for 2K . These new functionalities include support for architecture self-awareness, i.e., system object browsing and inspection, and flexible user-defined domains. This document describes the object oriented design of the Off ++ kernel <ref> [Bal98, BF97, BF96] </ref>. In addition, we describe the implementation of vOff ++, a version which simulates the underlying hardware in software in order to provide a convenient prototyping environment.
Reference: [Bal99] <author> Francisco J. Ballesteros. </author> <title> http://www.gsyc.inf.uc3m.es/~nemo/off/off-full-with-xrefs, 1999. Off++ literate guide web site. </title>
Reference-contexts: However, effort has been made to make the kernel efficient and the use of techniques that impose higher overhead (e.g., virtual functions) has been minimized. This leads to an organized design with high performance. Interested readers are directed to the literate description of Off ++ <ref> [Bal99] </ref>. Further optimizations will be performed to minimize processing time of performance-critical sections. The Off ++ kernel inherits from the exokernel concept in which the only task of the kernel is to export the underlying hardware. Off ++ provides three basic abstractions: shuttles, portals, and DTLBs.
Reference: [BF96] <author> Francisco J. Ballesteros and Luis L Fernandez. </author> <note> http://www.gsyc.inf.uc3m/off, 1996. Off web site. </note>
Reference-contexts: Off ++ also adds new functionalities to the kernel in order to provide basic support for 2K . These new functionalities include support for architecture self-awareness, i.e., system object browsing and inspection, and flexible user-defined domains. This document describes the object oriented design of the Off ++ kernel <ref> [Bal98, BF97, BF96] </ref>. In addition, we describe the implementation of vOff ++, a version which simulates the underlying hardware in software in order to provide a convenient prototyping environment.
Reference: [BF97] <author> Francisco J. Ballesteros and Luis L. Fernandez. </author> <title> The Networking Hardware is the Operating System. </title> <booktitle> In Proceedings of the 6th Hot Topics on Operating Systems (HotOS-VI), </booktitle> <address> Cape Cod, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Off ++ also adds new functionalities to the kernel in order to provide basic support for 2K . These new functionalities include support for architecture self-awareness, i.e., system object browsing and inspection, and flexible user-defined domains. This document describes the object oriented design of the Off ++ kernel <ref> [Bal98, BF97, BF96] </ref>. In addition, we describe the implementation of vOff ++, a version which simulates the underlying hardware in software in order to provide a convenient prototyping environment.
Reference: [BSP + 97] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczynski, D. Becker, S. Engers, and C. Chambers. </author> <title> Extensibility, safety and perfomance in hte SPIN operating system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principals. ACM, </booktitle> <year> 1997. </year>
Reference-contexts: A major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal kernel as a foundation for the operating system <ref> [EKO96, CD94, BSP + 97, FHL + 96] </ref>. If the kernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services. Because they are distributed on top of the kernel, this distribution is not supported by the kernel itself.
Reference: [CD94] <author> D. Cheriton and K. Duda. </author> <title> A caching model of operation system kernel functionality. </title> <booktitle> In Proceedings of the First Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages pages 179-193, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: A major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal kernel as a foundation for the operating system <ref> [EKO96, CD94, BSP + 97, FHL + 96] </ref>. If the kernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services. Because they are distributed on top of the kernel, this distribution is not supported by the kernel itself.
Reference: [CKK95] <author> John B. Carter, Dilip Khandekar, and Linus Kamb. </author> <title> Distributed shared memory: Where we are and where we should be headed. </title> <booktitle> In Proceedings of the 5th Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The fact that it is necessary to modify and/or re-implement existing system services to add new distributed services to a typical kernel based distributed system illustrates this point <ref> [CKK95, TNR90, KNT93] </ref>.
Reference: [EKO96] <author> D. Engler, M. F. Kaashoek, and J. O'Toole. </author> <title> The Operating System Kernel as a Secure Programmable Machine. </title> <booktitle> In Proc. of the 6th SIGOPS European Workshop, </booktitle> <pages> pages pages 62-67, </pages> <address> Wadern, Germany, </address> <month> Sept. </month> <year> 1996. </year> <note> ACM SIGOPTS. </note>
Reference-contexts: A major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal kernel as a foundation for the operating system <ref> [EKO96, CD94, BSP + 97, FHL + 96] </ref>. If the kernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services. Because they are distributed on top of the kernel, this distribution is not supported by the kernel itself.
Reference: [FHL + 96] <author> Bryan Ford, Mike Hibler, Jay Lepreau, Patrick Tullmann, Godmar Back, and Stephen Clawson. </author> <title> Microkernels Meet Recursive Virtual Machines. </title> <booktitle> In Proc. OSDI. ACM, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: A major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal kernel as a foundation for the operating system <ref> [EKO96, CD94, BSP + 97, FHL + 96] </ref>. If the kernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services. Because they are distributed on top of the kernel, this distribution is not supported by the kernel itself.
Reference: [KNT93] <author> Takuro Kitayama, T. Nakajima, and Hideyuki Tokuda. Rt-ipc: </author> <title> An ipc extension for real-time mach. </title> <booktitle> In Proceedings of the 2nd Microkernel and Other Kernel Architectures. USENIX, </booktitle> <year> 1993. </year>
Reference-contexts: The fact that it is necessary to modify and/or re-implement existing system services to add new distributed services to a typical kernel based distributed system illustrates this point <ref> [CKK95, TNR90, KNT93] </ref>.
Reference: [KSC + 98] <author> Fabio Kon, Ashish Singhai, Roy H. Campbell, Dulcineia Carvalho, Robert Moore, and Francisco J. Ballesteros. </author> <title> 2K: A Reflective, Component-Based Operating System for Rapidly Changing Environments. </title> <booktitle> In Proceedings of the ECOOP'98 Workshop on Reflective Object-Oriented Programming and Systems, </booktitle> <address> Brussels, Belgium, </address> <month> July </month> <year> 1998. </year>
Reference-contexts: The fact that it is necessary to modify and/or re-implement existing system services to add new distributed services to a typical kernel based distributed system illustrates this point [CKK95, TNR90, KNT93]. The 2K Operating System <ref> [KSC + 98] </ref> is being built to explore the combination of distribution and adaptability. 2K is built from two main parts: * A distributed adaptable kernel exporting hardware resources available in the network with out imposing any particular OS structure. * A customizable Object Request Broker (ORB) used to combine OS
Reference: [PPTT90] <author> R. Pike, D. Presotto, K. Thompson, and H. Tricky. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> In NKUUG Proceedings of the Summer 19990 Conference, </booktitle> <address> London(England), </address> <month> July </month> <year> 1990. </year>
Reference-contexts: So, why are our distributed operating systems based on kernel which essentially multiplex just local resources? Obviously, system services can be distributed when using a centralized kernel. This can also be achieved with a monolithic system <ref> [PPTT90] </ref>, but this will not change the fact that the underlying system is not actually distributed and is not transparently multiplexing both local and remote resources. A major drawback of current distributed operating systems is their lack of adaptability.
Reference: [RM93] <author> David K. Raila and Jishnu Mukerji. </author> <title> A Prototyping Environment for the Choices Operating System. </title> <type> Technical report, </type> <institution> Unix System Laboratories, </institution> <month> September </month> <year> 1993. </year> <month> 21 </month>
Reference-contexts: Hardware has been simulated using facilities available in the underlying operating system. We call the resulting system vOff ++ (virtual Off ++). This approach has been taken by other operating systems to achieve the same goal <ref> [RM93, TRLC96] </ref>. Since the kernel can now run as a normal process, development can progress more rapidly. Boot time is reduced to seconds rather than typical boot times. In addition, more robust development tools may be used, such as debuggers and memory leak detection software.
Reference: [SG94] <author> Abraham Silberschatz and Peter B. Galvin. </author> <title> Operating System Concepts. </title> <publisher> Addison--Wesley Publishing Company, </publisher> <address> 4th edition, </address> <year> 1994. </year>
Reference-contexts: The DTLBs provide mappings to pages which may reside locally or remotely. Local page mappings may use traditional page tables and TLBs <ref> [SG94] </ref>. Attempts to access remote memory will result in the contents of that memory being transfered to local nodes. 2.4.1 Distributed Memory Manager Each distributed memory manager (DMM) is actually a pool of DTLBs. However, DTLBs are an optional feature.
Reference: [Sun98] <author> Sun Microsystems, Inc. </author> <title> http://docs.sun.com, 1998. Sun product document web site. </title>
Reference-contexts: Therefore, implementing vOff ++ required replacing the machine dependent components that interface to the hardware or are written in assembly language. Our system is developed on the Solaris flavor of unix running on the SPARC architecture. Solaris provides the necessary facilities to implement the virtual hardware <ref> [Sun98] </ref>. These facilities are used to simulate paging, virtual memory, context switching, time slicing, traps and interrupts. The following sections explain the implementation of the these topics. 3.2 Memory Layout The vOff ++ kernel is run as a Solaris process in virtual memory.
Reference: [Tan87] <author> Andrew S. Tanenbaum. </author> <title> Operating Systems: Design and Implementation. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction An operating system may be defined as "the software that securely abstracts and multiplexes physical resources" <ref> [Tan87] </ref>. By no means is it required that those resources must be contained in a single node. So, why are our distributed operating systems based on kernel which essentially multiplex just local resources? Obviously, system services can be distributed when using a centralized kernel.
Reference: [TNR90] <author> H. Tokuda, T. Nakajima, and P. Rao. </author> <title> Real-Time Mach: Towards a Predictable Real-Time System. </title> <booktitle> In Proceedings of the 1st USEMIX Mach Workshop. USENIX, </booktitle> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: The fact that it is necessary to modify and/or re-implement existing system services to add new distributed services to a typical kernel based distributed system illustrates this point <ref> [CKK95, TNR90, KNT93] </ref>.
Reference: [Too98] <institution> The Flux Operating System Toolkit. </institution> <note> http://www.cs.utah.edi/projects/flux/oskit, 1998. OSkit web site. </note>
Reference-contexts: The lowest layer of 2K is built upon the Flux Operating System Toolkit (OSKit) from University of Utah <ref> [Too98] </ref>. The OSKit provides basic low-level functionality for Intel x86 architectures, which is generally tedious to program and is common to most operating systems. These functions include support for page tables, memory management, multi-boot startup, trap handling, and segmentation.
Reference: [TRLC96] <author> S. M. Tan, D. K. Raila, W. S. Liao, and R. H. Campbell. </author> <title> Virtual Hardware for Operating Systems Development. </title> <journal> IEEE TCOS Bulletin, </journal> <note> Spring 1996. 22 </note>
Reference-contexts: Hardware has been simulated using facilities available in the underlying operating system. We call the resulting system vOff ++ (virtual Off ++). This approach has been taken by other operating systems to achieve the same goal <ref> [RM93, TRLC96] </ref>. Since the kernel can now run as a normal process, development can progress more rapidly. Boot time is reduced to seconds rather than typical boot times. In addition, more robust development tools may be used, such as debuggers and memory leak detection software.
References-found: 19

