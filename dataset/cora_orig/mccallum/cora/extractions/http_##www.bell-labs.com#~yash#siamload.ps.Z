URL: http://www.bell-labs.com/~yash/siamload.ps.Z
Refering-URL: http://www.bell-labs.com/~yash/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: THE LOAD, CAPACITY AND AVAILABILITY OF QUORUM SYSTEMS a strategy to pick quorums, the load
Author: MONI NAOR AND AVISHAI WOOL n). 
Keyword: Percolation Theory. Key words. quorum systems, load, fault tolerance, distributed computing, percolation theory, linear programming.  
Note: Given  and  The analysis of this scheme is based on  AMS subject classifications. 60K35, 62N05, 68M10, 68Q22, 68R05, 90A28, 90C05.  
Abstract: A quorum system is a collection of sets (quorums) every two of which intersect. Quorum systems have been used for many applications in the area of distributed systems, including mutual exclusion, data replication and dissemination of information We present four novel constructions of quorum system, all featuring optimal or near optimal load, and high availability. The best construction, based on paths in a grid, has a load of O(1= p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. El-Abbadi, </author> <title> An efficient and fault-tolerant solution for distributed mutual exclusion, </title> <journal> ACM Trans. Comp. Sys., </journal> <volume> 9 (1991), </volume> <pages> pp. 1-20. </pages>
Reference-contexts: In this work the term coterie and the concept of domination are introduced. Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), <ref> [1] </ref> (the Tree system), [5, 25] (using a grid) and [23, 24, 38] (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. <p> Hence, the following definition of [35]. Definition 2.9. A parameterized family of functions g p (n) : N ! <ref> [0; 1] </ref>, for p 2 [0; 1], is said to be Condorcet iff lim n!1 2 , 2 , 2 for all n. <p> Hence, the following definition of [35]. Definition 2.9. A parameterized family of functions g p (n) : N ! <ref> [0; 1] </ref>, for p 2 [0; 1], is said to be Condorcet iff lim n!1 2 , 2 , 2 for all n. If g p (n) has this behavior for p 6= 1 2 but g 1=2 (n) 6= 1 2 , then it is said to be almost Condorcet. 4 3. <p> In other words, a strategy gives the frequency of picking each quorum S j . Definition 3.1. Let a quorum system S = (S 1 ; : : : ; S m ) be given over a universe U . Then w 2 <ref> [0; 1] </ref> m is a strategy for S if it is a probability distribution over the quorums S j 2 S, i.e., P m For every element i 2 U , a strategy w of picking quorums induces the frequency of accessing element i, which we call the load on i. <p> LP : L (S) = min L; s:t: &lt; P m P w j 0; L 0: (iii) Notation: We use (w; L) to denote a tuple of a strategy and a possible load, that together constitute a point in the problem domain <ref> [0; 1] </ref> m+1 . Remark: The program LP is always feasible, since for any quorum system S and strategy w, the point (w; 1) is trivially feasible. <p> Since L (S) is minimal it follows that L (S) 1=-fl (S). Notation: For a vector y 2 <ref> [0; 1] </ref> n and a set S U , let y (S) = P Fact 3.6. Let S be a quorum system as in Definition 3.3. Define a variable y i for each element i 2 U , and an additional variable T . <p> However at the optimum t (S) = T is positive, since T = 0 is feasible for any vector y 2 <ref> [0; 1] </ref> n and DLP is a maximization problem. (ii) The value of t (S) does not change if we require equality in (iv), since we can increase the y i values without violating any inequality in (v) and without changing T . <p> Lemma 3.14. Let S be a quorum system. Then EL p (S) F p (S) for any p 2 <ref> [0; 1] </ref>. Proof. By Definition 3.11, in a configuration x that causes a system failure (i.e., all the quorums are hit) the load is 1. <p> The next proposition shows the correctness of the intuition that if the elements are more fail prone then the load is higher. For the proof we need some notation and two lemmas. Proposition 3.16. EL p (S) is a monotone non-decreasing function of p 2 <ref> [0; 1] </ref> for any S. Notation: For configurations x and z, denote x z if x i z i for all i 2 U . <p> Lemma 3.17. Consider the function L (x) : f0; 1g n 7! <ref> [0; 1] </ref> defined by L (x) = L (S x ) for some quorum system S. If x z then L (x) L (z). Proof. If x z then every element that is functioning in configuration x (with x i = 0) is also functioning in z. <p> Lemma 3.18. Let S be a quorum system, let the elements fail with probabilities p = (p 1 ; : : :; p n ) and let L (x) = L (S x ) be the load over configuration x. Consider the multi-linear function h (p) : <ref> [0; 1] </ref> n 7! [0; 1] defined by h (p) = x2f0;1g n Y p k x k =0 Then @h @p i = h (1 i ; p) h (0 i ; p) = E [L (1 i ; x) L (0 i ; x)]: Proof. <p> Let S be a quorum system, let the elements fail with probabilities p = (p 1 ; : : :; p n ) and let L (x) = L (S x ) be the load over configuration x. Consider the multi-linear function h (p) : <ref> [0; 1] </ref> n 7! [0; 1] defined by h (p) = x2f0;1g n Y p k x k =0 Then @h @p i = h (1 i ; p) h (0 i ; p) = E [L (1 i ; x) L (0 i ; x)]: Proof. <p> Other Measures of Load. In order to measure an intuitive notion of "load" of a quorum system, our definition of L (S) (Definitions 3.2 and 3.3) is not the only one that comes to mind. Here we discuss the shortcomings of some alternatives. Several authors (e.g., <ref> [28, 1] </ref> have emphasized the criterion of having small quorums. This is an important parameter since it captures the message complexity of a protocol using the quorum system. However it does not tell us how to use the quorums so each element is used as infrequently as possible. <p> 4.2 give meaningful lower bounds on the load of some quorum systems. (i) Over an odd-sized universe, all the quorums of the simple majority system Maj are of size (n + 1)=2, therefore by Proposition 4.1, L (Maj) (n + 1)=2n &gt; 1 2 . (ii) In the Tree system <ref> [1] </ref>, the smallest quorums have cardinality log (n + 1). Therefore by Proposition 4.2, L (Tree) 1= log (n + 1). The following proposition shows a tradeoff between the failure probability and the load. Proposition 4.5. <p> Therefore by Proposition 4.2, L (Tree) 1= log (n + 1). The following proposition shows a tradeoff between the failure probability and the load. Proposition 4.5. F p (S) p nL (S) for any quorum system S and any p 2 <ref> [0; 1] </ref>. Proof. Consider a quorum S min with jS min j = c (S). If all the elements of S min fail then by the Intersection property the system fails, therefore F p (S) p c (S) . The claim follows since c (S) nL (S) by Proposition 4.1. <p> Proposition 4.7. Let a quorum system S be given, and let w be a strategy for S with an induced load of L w (S) = L. Then L is the optimal load iff there exists y 2 <ref> [0; 1] </ref> n such that y (U ) = 1 and y (S) L for all S 2 S. Proof. By the premise, (w; L) is a feasible point of LP , with an objective function value of L. <p> Therefore (y; 1 2 ) is a feasible point to program DLP , so L (Vote) &gt; 1 2 by the weak duality of linear programming. 6.3. The Tree System. We have shown in Example 4.4 that the load of the Tree quorum system <ref> [1] </ref> is L (Tree) 1 log (n+1) . In this section we show that the bound is almost tight; the precise load is L (Tree) = 2 log (n+1)+1 . We first show an upper bound by balancing the load on the elements, and then show a matching lower bound.
Reference: [2] <author> R. Aharoni, P. Erd -os, and N. Linial, </author> <title> Dual integer linear programs and the relationship between their optima, </title> <booktitle> in Proc. 17th ACM Symp. Theory of Computing, </booktitle> <year> 1985, </year> <pages> pp. 476-483. </pages>
Reference: [3] <author> M. Aizenman, J. T. Chayes, L. Chayes, J. Fr ohlich, and L. Russo, </author> <title> On a sharp transition from area law to perimeter law in a system of random surfaces, </title> <journal> Comm. Mathematical Physics, </journal> <volume> 92 (1983), </volume> <pages> pp. 19-69. </pages>
Reference: [4] <author> D. Barbara and H. Garcia-Molina, </author> <title> The reliability of vote mechanisms, </title> <journal> IEEE Trans. Com-put., </journal> <volume> C-36 (1987), </volume> <pages> pp. 1197-1208. </pages>
Reference-contexts: Each processor has a number of votes, and a quorum is any set of processors with a combined number of votes exceeding half of the system's total number of votes. The simple majority system is the most obvious voting system. The availability of voting systems is studied in <ref> [4] </ref>. It is shown that in terms of availability, the majority is the best quorum system when p &lt; 1 2 .
Reference: [5] <author> S. Y. Cheung, M. H. Ammar, and M. Ahamad, </author> <title> The grid protocol: A high performance scheme for maintaining replicated data, </title> <booktitle> in Proc. 6th IEEE Int. Conf. Data Engineering, </booktitle> <year> 1990, </year> <pages> pp. 438-445. </pages>
Reference-contexts: In this work the term coterie and the concept of domination are introduced. Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), <ref> [5, 25] </ref> (using a grid) and [23, 24, 38] (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. <p> In fact equality holds in the tighter lower bound of Proposition 4.3 for this system. (iii) The Grid system <ref> [5] </ref> is a (2h 1)-fair system over n = h 2 elements, so L (Grid) = 2h1 h 2 2 p 4.3. Effective Calculation of the Load.
Reference: [6] <author> N. </author> <month> Condorcet, </month> <institution> Essai sur l'application de l'analyse a la probabilite des decisions rendues a la pluralite des voix. Paris, </institution> <month> 1785. </month>
Reference-contexts: S2S E S : When we consider the asymptotic behavior of F p (S n ) for a sequence S n of quorum system over a universe with an increasing size n, we find that for many constructions it is similar to the behavior described by the Condorcet Jury Theorem <ref> [6] </ref>. Hence, the following definition of [35]. Definition 2.9. A parameterized family of functions g p (n) : N ! [0; 1], for p 2 [0; 1], is said to be Condorcet iff lim n!1 2 , 2 , 2 for all n.
Reference: [7] <author> S. B. Davidson, H. Garcia-Molina, and D. Skeen, </author> <title> Consistency in partitioned networks, </title> <journal> ACM Computing Surveys, </journal> <volume> 17 (1985), </volume> <pages> pp. 341-370. </pages>
Reference-contexts: Set systems with the intersection property are known as quorum systems, and the sets in such a system are called quorums. Quorum systems have been used in the study of problems such as mutual exclu sion (cf. [39]), data replication protocols (cf. <ref> [7, 18] </ref>), name servers (cf. [32]), selective dissemination of information (cf. [46]), and distributed access control and signatures (cf. [34]). A protocol template based on quorum systems works as follows.
Reference: [8] <author> M. Dubiner and U. Zwick, </author> <title> Amplification and percolation, </title> <booktitle> in Proc. 33rd IEEE Symp. Foundations of Comp. Sci. (FOCS), </booktitle> <year> 1992, </year> <pages> pp. 258-267. </pages>
Reference-contexts: The analysis does not distinguish between properties of the quorum system and properties of the strategy that chooses which quorum to access. A good reference to percolation theory is [15]. Two successful applications of percolation to questions of computer science are [30] and <ref> [8] </ref>.
Reference: [9] <author> P. Erd -os and L. Lov asz, </author> <title> Problems and results on 3-chromatic hypergraphs and some related questions, in Infinite and Finite Sets, Colloq. </title> <journal> Math. Soc. Janos Bolyai 10, </journal> <year> 1975, </year> <pages> pp. 609-627. </pages>
Reference-contexts: Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), [5, 25] (using a grid) and [23, 24, 38] (hierarchical systems). The triangular system is due to <ref> [26, 9] </ref>. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. The motivation for several of these alternative systems was to find constructions with high availability and low load (which is referred to in most of these papers as quorum systems with small quorums).
Reference: [10] <author> C. M. Fortuin, P. W. Kasteleyn, and J. Ginibre, </author> <title> Correlation inequalities on some partially ordered sets, </title> <journal> Comm. Mathematical Physics, </journal> <volume> 22 (1971), </volume> <pages> pp. 89-103. </pages>
Reference-contexts: From the above discussion and the proof of Corollary 5.6 it follows that P 1=2 (LR) = P 1=2 (T B) = 1 2 . For the upper bound, note that both LR and T B are increasing events, so we can use the FKG inequality <ref> [10] </ref>. Therefore F 1=2 = 1 P 1=2 (LR " T B) 1 P 1=2 (LR)P 1=2 (T B) = 4 For the lower bound, note that Paths is a dominated quorum system.
Reference: [11] <author> G. N. Frederickson, </author> <title> Fast algorithms for shortest paths in planar graphs, with applications, </title> <journal> SIAM J. Computing, </journal> <volume> 16 (1987), </volume> <pages> pp. 1004-1022. </pages>
Reference-contexts: Since the network is planar we can find the flow in time O (n log n) using the algorithm of [20], or in time O (n p log n) by [17] using the methods of <ref> [11] </ref>. Given these path collections, the strategy w is the following: If either k LR = 0 or k T B = 0 then no live quorums exist in configuration x.
Reference: [12] <author> Z. F uredi, </author> <title> Matchings and covers in hypergraphs, Graphs and Combinatorics, </title> <booktitle> 4 (1988), </booktitle> <pages> pp. 115-206. </pages>
Reference-contexts: Clearly, LP is also a bounded linear program, so L (S) is always finite. 5 The next definition and lemma show that the load L (S) is closely related to the well known fractional matching number of a hypergraph (cf. <ref> [12] </ref>, p. 149). Definition 3.4. The fractional matching number of a quorum system, denoted by -fl , is m X f j ; s:t: S j 3i f j 1; for all i 2 U; Lemma 3.5. L (S) = 1=-fl (S) for any quorum system S Proof. <p> Definition 3.8. The capacity of a quorum system S is Cap (S) = lim a (S; k) : In hypergraph theory the quantity a (S; k) is known as the k-matching number of S, and is usually denoted by -k (cf. <ref> [12] </ref> p. 154). Furthermore, Proposition 5.12 of [12] shows that lim k!1 -k =k = -fl , hence by the definition of the capacity and Lemma 3.5 we obtain: Corollary 3.9. Cap (S)= 1/L (S). Therefore all the information regarding the capacity is captured by L (S). <p> Definition 3.8. The capacity of a quorum system S is Cap (S) = lim a (S; k) : In hypergraph theory the quantity a (S; k) is known as the k-matching number of S, and is usually denoted by -k (cf. <ref> [12] </ref> p. 154). Furthermore, Proposition 5.12 of [12] shows that lim k!1 -k =k = -fl , hence by the definition of the capacity and Lemma 3.5 we obtain: Corollary 3.9. Cap (S)= 1/L (S). Therefore all the information regarding the capacity is captured by L (S). <p> Then (y; 1=c (S)) is feasible for program DLP so the claim follows by the weak duality of linear programming. Proposition 4.3. ([2], cf. <ref> [12] </ref> p. 170): Let m (S) be the number of quorums in S. Then L (S) p s c (S) 1 p : Example 4.4. <p> If S is a fair system, then the next proposition shows that we can compute the load and optimal strategy immediately. This is a restatement of Proposition 5.1 of <ref> [12] </ref> using the fact that L (S) = 1=-fl . Proposition 4.10. Let S be an (s; d)-fair quorum system. Then L (S) = s=n = d=m. Example 4.11. The following examples demonstrate the use of Proposition 4.10. <p> Acknowledgments. We are grateful to David Peleg for his encouragement, and to Danny Raz for his careful reading of our manuscript. We thank the anonymous referees, whose remarks have helped us improve our presentation, and for bringing <ref> [12] </ref> and [45] to our attention.
Reference: [13] <author> H. Garcia-Molina and D. Barbara, </author> <title> How to assign votes in a distributed system, </title> <journal> J. ACM, </journal> <volume> 32 (1985), </volume> <pages> pp. 841-860. </pages>
Reference-contexts: The case when the elements fail with different probabilities p i , all less than 1 2 , is addressed in [41]. The first paper to explicitly consider mutual exclusion protocols in the context of intersecting set systems is <ref> [13] </ref>. In this work the term coterie and the concept of domination are introduced. Several basic properties of dominated and non-dominated coteries are proved. <p> By Proposition 6.1 there exist NDC's with loads which are as good or better|but these are more cumbersome to describe explicitly. 6.2. Voting Systems Have High Load. A popular and simple way to construct a quorum system is by weighted voting <ref> [14, 13, 41, 29] </ref>. In this section we show that L (S) &gt; 1 2 for any voting system S, i.e., any voting system is at least as bad as the Maj system in terms of load. Definition 6.2.
Reference: [14] <author> D. K. Gifford, </author> <title> Weighted voting for replicated data, </title> <booktitle> in Proc. 7th Symp. Oper. Sys. </booktitle> <address> Princip., </address> <year> 1979, </year> <pages> pp. 150-159. </pages>
Reference-contexts: Our goal is to investigate these criteria and find quorum systems that perform well according to all three of them. 1.2. Related Work. The first distributed control protocols using quorum systems <ref> [42, 14] </ref> use voting to define the quorums. Each processor has a number of votes, and a quorum is any set of processors with a combined number of votes exceeding half of the system's total number of votes. The simple majority system is the most obvious voting system. <p> By Proposition 6.1 there exist NDC's with loads which are as good or better|but these are more cumbersome to describe explicitly. 6.2. Voting Systems Have High Load. A popular and simple way to construct a quorum system is by weighted voting <ref> [14, 13, 41, 29] </ref>. In this section we show that L (S) &gt; 1 2 for any voting system S, i.e., any voting system is at least as bad as the Maj system in terms of load. Definition 6.2.
Reference: [15] <author> G. R. Grimmett, </author> <title> Percolation, </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: A concept of capacity in voting systems is defined in [21] and some voting systems 2 are compared. The analysis does not distinguish between properties of the quorum system and properties of the strategy that chooses which quorum to access. A good reference to percolation theory is <ref> [15] </ref>. Two successful applications of percolation to questions of computer science are [30] and [8]. <p> A moment's reflection shows that an open left-right path exists in G (d) iff no closed top-bottom path exists in G fl (d), since a dual pair of edges e and e fl have the same state (see discussion in <ref> [15] </ref>, pp. 198-199). Therefore the events LR and T BC are complementary. Since G (d) and G fl (d) are isomorphic, then T B and LRC are also complementary events.
Reference: [16] <author> M. Gr otschel, L. Lov asz, and A. Schrijver, </author> <title> The ellipsoid method and its consequences in combinatorial optimization, </title> <journal> Combinatorica, </journal> <volume> 1 (1981), </volume> <pages> pp. 169-197. 23 </pages>
Reference-contexts: In some cases the linear program formulation of load also allows us to efficiently compute the load of a given quorum system, even if the quorums are not represented explicitly, using the Ellipsoid algorithm adaptation of <ref> [16] </ref>. The behavior of the load when the elements may fail is also studied. We assume the common model that the elements fail independently with probability p. The load then becomes a random variable L p (S). <p> Using the dual program DLP allows us in some cases to compute L (S) even when S is given implicitly, using the Ellipsoid algorithm of <ref> [16, 27] </ref> (see Section 4.3). 3.3. The Capacity of a Quorum System. Each time that a distributed protocol generates an access to a quorum S 2 S, it causes work to be done by the elements of S. <p> LP could be an exponential task since typically m = 2 (n) . Calculating the load quickly is especially important when failures may occur, since the computation needs to be done repeatedly after each configuration change. Instead we make use of the adaptation of the Ellipsoid algorithm of <ref> [16] </ref>. Let d denote the dimension of the problem at hand.
Reference: [17] <author> R. Hassin, </author> <title> Maximum flow in (s; t) planar networks, </title> <journal> Inf. Proc. Letters, </journal> <note> 13 (1981), p. 107. </note>
Reference-contexts: Since the network is planar we can find the flow in time O (n log n) using the algorithm of [20], or in time O (n p log n) by <ref> [17] </ref> using the methods of [11]. Given these path collections, the strategy w is the following: If either k LR = 0 or k T B = 0 then no live quorums exist in configuration x.
Reference: [18] <author> M. P. Herlihy, </author> <title> Replication Methods for Abstract Data Types, </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, MIT/LCS/TR-319, </institution> <year> 1984. </year>
Reference-contexts: Set systems with the intersection property are known as quorum systems, and the sets in such a system are called quorums. Quorum systems have been used in the study of problems such as mutual exclu sion (cf. [39]), data replication protocols (cf. <ref> [7, 18] </ref>), name servers (cf. [32]), selective dissemination of information (cf. [46]), and distributed access control and signatures (cf. [34]). A protocol template based on quorum systems works as follows.
Reference: [19] <author> R. Holzman, Y. Marcus, and D. Peleg, </author> <title> Load balancing in quorum systems, </title> <booktitle> in Proc. 4th Workshop on Algorithms and Data Structures, </booktitle> <address> Kingston, Ont., Canada, </address> <year> 1995, </year> <pages> pp. 38-49. </pages> <note> To appear in SIAM J. Discrete Math. </note>
Reference-contexts: The Wheel system appears in [29]. The CWlog system appears in [37, 36]. The motivation for several of these alternative systems was to find constructions with high availability and low load (which is referred to in most of these papers as quorum systems with small quorums). In <ref> [19] </ref>, the question of how evenly balanced the work load can be is studied. <p> BLP : &lt; P m j=1 w j = 1; (viii) P w j 0; L 0: (x) The program BLP is not always feasible, since finding a solution would imply that S can be perfectly balanced, which cannot be done for all quorum systems <ref> [19] </ref>. Nevertheless, one could hope that such a balancing strategy (if found) would induce the optimal load. The next proposition shows that this is true for a certain subclass of quorum systems. Proposition 4.8. Let S be an s-uniform quorum system.
Reference: [20] <author> A. Itai and Y. Shiloach, </author> <title> Maximum flow in planar networks, </title> <journal> SIAM J. Computing, </journal> <volume> 8 (1979), </volume> <pages> pp. 135-150. </pages>
Reference-contexts: Since the network is planar we can find the flow in time O (n log n) using the algorithm of <ref> [20] </ref>, or in time O (n p log n) by [17] using the methods of [11]. Given these path collections, the strategy w is the following: If either k LR = 0 or k T B = 0 then no live quorums exist in configuration x.
Reference: [21] <author> P. Jalote, S. Rangarajan, and S. K. Tripathi, </author> <title> Capacity of voting systems, </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 19 (1993), </volume> <pages> pp. 698-706. </pages>
Reference-contexts: A concept of capacity in voting systems is defined in <ref> [21] </ref> and some voting systems 2 are compared. The analysis does not distinguish between properties of the quorum system and properties of the strategy that chooses which quorum to access. A good reference to percolation theory is [15].
Reference: [22] <author> H. Kesten, </author> <title> The critical probability of bond percolation on the square lattice equals 1 2 ., Comm. </title> <journal> Mathematical Physics, </journal> <volume> 71 (1980), </volume> <pages> pp. 41-59. </pages>
Reference: [23] <author> A. Kumar, </author> <title> Hierarchical quorum consensus: A new algorithm for managing replicated data, </title> <journal> IEEE Trans. Comput., </journal> <volume> 40 (1991), </volume> <pages> pp. 996-1004. </pages>
Reference-contexts: Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), [5, 25] (using a grid) and <ref> [23, 24, 38] </ref> (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. <p> The Hierarchical Quorum System. In this section we analyze the load and availability of the hierarchical system of <ref> [23] </ref>. In this system the elements are the leaves of a complete ternary tree. The internal nodes are 2-of-3 majority gates.
Reference: [24] <author> A. Kumar and S. Y. Cheung, </author> <title> A high availability p n hierarchical grid algorithm for replicated data, </title> <journal> Inf. Proc. Letters, </journal> <volume> 40 (1991), </volume> <pages> pp. 311-316. </pages>
Reference-contexts: Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), [5, 25] (using a grid) and <ref> [23, 24, 38] </ref> (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. <p> The proof of Lemma 5.19 would still hold for such a system. However the load and failure probability would depend on the specific structure of the function used. (ii) The AndOr system is isomorphic to the hierarchical grid construction of <ref> [24] </ref>, when the grids at all the levels are 2 fi 2 grids. The read-quorum and write-quorum procedures of [24] correspond to our top level activations of the ANDset and ORset procedures, respectively. <p> However the load and failure probability would depend on the specific structure of the function used. (ii) The AndOr system is isomorphic to the hierarchical grid construction of <ref> [24] </ref>, when the grids at all the levels are 2 fi 2 grids. The read-quorum and write-quorum procedures of [24] correspond to our top level activations of the ANDset and ORset procedures, respectively. However ours is a much stronger analysis; we calculate the load, and analyze the rate of decay of F p and the critical probability ff. 6. Load Analyses of some Quorum Systems. 6.1.
Reference: [25] <author> A. Kumar, M. Rabinovich, and R. K. Sinha, </author> <title> A performance study of general grid structures for replicated data, </title> <booktitle> in Proc. 13th Inter. Conf. Dist. Comp. Sys., </booktitle> <year> 1993, </year> <pages> pp. 178-185. </pages>
Reference-contexts: In this work the term coterie and the concept of domination are introduced. Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), <ref> [5, 25] </ref> (using a grid) and [23, 24, 38] (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in [29]. The CWlog system appears in [37, 36].
Reference: [26] <author> L. Lov asz, </author> <title> Coverings and colorings of hypergraphs, </title> <booktitle> in Proc. 4th Southeastern Conf. Combinatorics, Graph Theory and Computing, </booktitle> <year> 1973, </year> <pages> pp. </pages> <month> 3-12. </month> <title> [27] , An Algorithmic Theory of Numbers, Graphs and Convexity, </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1986. </year>
Reference-contexts: Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), [5, 25] (using a grid) and [23, 24, 38] (hierarchical systems). The triangular system is due to <ref> [26, 9] </ref>. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. The motivation for several of these alternative systems was to find constructions with high availability and low load (which is referred to in most of these papers as quorum systems with small quorums).
Reference: [28] <author> M. Maekawa, </author> <title> A p n algorithm for mutual exclusion in decentralized systems, </title> <journal> ACM Trans. Comp. Sys., </journal> <volume> 3 (1985), </volume> <pages> pp. 145-159. </pages>
Reference-contexts: In this work the term coterie and the concept of domination are introduced. Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in <ref> [28] </ref> (using finite projective planes), [1] (the Tree system), [5, 25] (using a grid) and [23, 24, 38] (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. <p> Other Measures of Load. In order to measure an intuitive notion of "load" of a quorum system, our definition of L (S) (Definitions 3.2 and 3.3) is not the only one that comes to mind. Here we discuss the shortcomings of some alternatives. Several authors (e.g., <ref> [28, 1] </ref> have emphasized the criterion of having small quorums. This is an important parameter since it captures the message complexity of a protocol using the quorum system. However it does not tell us how to use the quorums so each element is used as infrequently as possible. <p> the lower bound of Example 4.4 is tight, and the other two show that the optimal load of Proposition 4.3, 1= p n, can be attained. (i) Over an odd-sized universe, Maj is an n+1 2 -fair quorum system, so L (Maj) = n+1 2 . (ii) The FPP system <ref> [28] </ref> is a (t + 1)-fair quorum system over n = t 2 + t + 1 elements, so L (FPP) = t+1 t 2 +t+1 1 p n .
Reference: [29] <author> Y. Marcus and D. Peleg, </author> <title> Construction methods for quorum systems, </title> <type> Tech. Report CS92-33, </type> <institution> The Weizmann Institute of Science, Rehovot, Israel, </institution> <year> 1992. </year>
Reference-contexts: Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), [5, 25] (using a grid) and [23, 24, 38] (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in <ref> [29] </ref>. The CWlog system appears in [37, 36]. The motivation for several of these alternative systems was to find constructions with high availability and low load (which is referred to in most of these papers as quorum systems with small quorums). <p> Having a small quorum size does not give us the whole picture. Looking for systems with small average quorum size can also be misleading. For instance, the average quorum size in the Wheel system <ref> [29] </ref> is very small ( 3) but the load is high: L (Wheel) 1=2. Another tempting definition is that of an average load, rather than the maximum, i.e., AvL (S) = min w n i2U S j 3i w j ; minimizing over strategies w. <p> By Proposition 6.1 there exist NDC's with loads which are as good or better|but these are more cumbersome to describe explicitly. 6.2. Voting Systems Have High Load. A popular and simple way to construct a quorum system is by weighted voting <ref> [14, 13, 41, 29] </ref>. In this section we show that L (S) &gt; 1 2 for any voting system S, i.e., any voting system is at least as bad as the Maj system in terms of load. Definition 6.2.
Reference: [30] <author> T. R. Mathies, </author> <title> Percolation theory and computing with faulty arrays of processors, </title> <booktitle> in Proc. 3rd ACM-SIAM Symp. on Discrete Alg., </booktitle> <year> 1992, </year> <pages> pp. 100-103. </pages>
Reference-contexts: The analysis does not distinguish between properties of the quorum system and properties of the strategy that chooses which quorum to access. A good reference to percolation theory is [15]. Two successful applications of percolation to questions of computer science are <ref> [30] </ref> and [8].
Reference: [31] <author> M. V. Menshikov, </author> <title> Coincidence of critical points in percolation problems, </title> <journal> Soviet Mathematics Doklady, </journal> <volume> 33 (1986), </volume> <pages> pp. 856-859. </pages>
Reference: [32] <author> S. J. Mullender and P. M. B. Vit anyi, </author> <title> Distributed match-making, </title> <journal> Algorithmica, </journal> <volume> 3 (1988), </volume> <pages> pp. 367-391. </pages>
Reference-contexts: Set systems with the intersection property are known as quorum systems, and the sets in such a system are called quorums. Quorum systems have been used in the study of problems such as mutual exclu sion (cf. [39]), data replication protocols (cf. [7, 18]), name servers (cf. <ref> [32] </ref>), selective dissemination of information (cf. [46]), and distributed access control and signatures (cf. [34]). A protocol template based on quorum systems works as follows. In order to per form some action (e.g., update the database, enter a critical section), the user selects a quorum and accesses all its elements.
Reference: [33] <author> M. Naor and A. Wool, </author> <title> The load, capacity and availability of quorum systems, </title> <booktitle> in Proc. 35th IEEE Symp. Foundations of Comp. Sci. (FOCS), </booktitle> <year> 1994, </year> <pages> pp. </pages> <month> 214-225. </month> <title> [34] , Access control and signatures via quorum secret sharing, </title> <booktitle> in Proc. 3rd ACM Conf. Comp. and Comm. Security, </booktitle> <address> New Delhi, India, </address> <year> 1996, </year> <pages> pp. 157-168. </pages> <note> Also available as Theory of Cryptography Library record 96-08, http://theory.lcs.mit.edu/~tcryptol/1996.html. </note>
Reference-contexts: Furthermore, Proposition 5.12 of [12] shows that lim k!1 -k =k = -fl , hence by the definition of the capacity and Lemma 3.5 we obtain: Corollary 3.9. Cap (S)= 1/L (S). Therefore all the information regarding the capacity is captured by L (S). In <ref> [33] </ref> we gave a direct proof of Corollary 3.9 (without using the hypergraph machinery), which indicates how to schedule the quorum accesses so the capacity tends to 1=L (S): select the quorums independently at random using a strategy w which optimizes the load. 3.4. The Load with Failures.
Reference: [35] <author> D. Peleg and A. Wool, </author> <title> The availability of quorum systems, </title> <journal> Information and Computation, </journal> <volume> 123 (1995), </volume> <pages> pp. </pages> <month> 210-223. </month> <title> [36] , The availability of crumbling wall quorum systems, </title> <journal> Discrete Applied Math., </journal> <volume> 74 (1997), </volume> <pages> pp. </pages> <month> 69-83. </month> <title> [37] , Crumbling walls: A class of practical and efficient quorum systems, </title> <booktitle> Distributed Computing, 10 (1997), </booktitle> <pages> pp. 87-98. </pages>
Reference-contexts: The simple majority system is the most obvious voting system. The availability of voting systems is studied in [4]. It is shown that in terms of availability, the majority is the best quorum system when p &lt; 1 2 . In <ref> [35] </ref> the failure probability function F p is characterized, and among other things it is shown that the singleton has the best availability when p &gt; 1 2 . <p> Let fail (S) be the event that all the quorums S 2 S are hit, i.e., fail (S) = T When the failure probabilities are equal, i.e., p = (p; : : : ; p), we use the definition of <ref> [35] </ref> of the global system failure probability of a quorum system S, as follows. Definition 2.8. <p> Hence, the following definition of <ref> [35] </ref>. Definition 2.9. A parameterized family of functions g p (n) : N ! [0; 1], for p 2 [0; 1], is said to be Condorcet iff lim n!1 2 , 2 , 2 for all n. <p> The following examples show that although the FPP quorum system and the Grid system have optimal or near optimal load of O (1= p n) when all the elements are functioning (see Example 4.11), this load is not stable. Example 3.15. In <ref> [35] </ref> it is shown that F p (FPP) ! n!1 1 and F p (Grid) ! n!1 for any p &gt; 0. Therefore Lemma 3.14 gives that EL p (S) ! n!1 1 for both systems. <p> Remark: It is pointless to consider values of p 1 2 since in <ref> [35] </ref> it is proved that F p (S) 1 2 for such p and any quorum system S, so Proposition 4.5 is meaningless asymptotically in this case. 4.2. Conditions for Optimality of the Load. In this section we present several conditions that guarantee the optimality of a strategy w. <p> Therefore F 1=2 = 1 P 1=2 (LR " T B) 1 P 1=2 (LR)P 1=2 (T B) = 4 For the lower bound, note that Paths is a dominated quorum system. Therefore F 1=2 (Paths) &gt; 1 2 by a result of <ref> [35] </ref>. 14 Finally, we show that w.h.p. the load of the Paths system is O ( 1 p n ) in the presence of failures, for any failure probability p &lt; 1 2 . <p> We conclude that when such quorums are found, L p (Paths) 2 fid+1 = O ( 1 p Remark: This is the strongest possible result regarding load with failures, since if p 1 2 then by Lemma 3.14 and a result of <ref> [35] </ref>, EL p (S) F p (S) 1 2 for any quorum system S. Proposition 5.8 guarantees that w.h.p. a good strategy (that induces a load of O (1= n)) exists. <p> Then f (h) obeys the recurrence f (h) = 3f 2 (h 1) 2f 3 (h 1); and f (0) = p. We observe that p = 1 2 is a stable point, so by a result of <ref> [35] </ref> it follows that HQS is non-dominated.
Reference: [38] <author> S. Rangarajan and S. K. Tripathi, </author> <title> A robust distributed mutual exclusion algorithm, </title> <booktitle> in Proc. 5th Inter. Workshop on Dist. Algorithms (WDAG), </booktitle> <publisher> LNCS 579, Springer-Verlag, </publisher> <year> 1991, </year> <pages> pp. 295-308. </pages>
Reference-contexts: Several basic properties of dominated and non-dominated coteries are proved. Alternative protocols based on quorum systems (rather than on voting) appear in [28] (using finite projective planes), [1] (the Tree system), [5, 25] (using a grid) and <ref> [23, 24, 38] </ref> (hierarchical systems). The triangular system is due to [26, 9]. The Wheel system appears in [29]. The CWlog system appears in [37, 36]. <p> A quorum in the system is a set of elements that are a majority in one cell of every row and a majority in every cell of one row (see Figure 4). This system is somewhat similar to that of <ref> [38] </ref>, in which each grid cell contains a distinct set of elements. For simplicity assume that both d and r are odd. Fig. 4. The SC-Grid system over n = 15 elements with width d = 5, h = 3 rows and r = 3 elements per cell.
Reference: [39] <author> M. Raynal, </author> <title> Algorithms for Mutual Exclusion, </title> <publisher> MIT press, </publisher> <year> 1986. </year>
Reference-contexts: Set systems with the intersection property are known as quorum systems, and the sets in such a system are called quorums. Quorum systems have been used in the study of problems such as mutual exclu sion (cf. <ref> [39] </ref>), data replication protocols (cf. [7, 18]), name servers (cf. [32]), selective dissemination of information (cf. [46]), and distributed access control and signatures (cf. [34]). A protocol template based on quorum systems works as follows.
Reference: [40] <author> A. Schrijver, </author> <title> Theory of Linear and Integer Programming, </title> <publisher> John Wiley & Sons, </publisher> <address> Chichester, </address> <year> 1986. </year>
Reference-contexts: A Linear Programming Formulation of the Load. An alternative way to define the load is via a Linear Programming formulation. This formulation shows that the load L (S) can be computed in polynomial time using Linear Programming algorithms (cf. <ref> [40] </ref>) if S is given explicitly. Definition 3.3. Let a quorum system S = (S 1 ; : : : ; S m ) be given over a uni verse U of size n. <p> Effective Calculation of the Load. If a quorum system S is given explicitly, as a list of all m quorums, then program LP of Definition 3.3 can be solved in poly (n; m) time using Linear Programming (cf. <ref> [40] </ref>). However often S is given implicitly, say, via some data structure containing the elements coupled with a polynomial-time procedure to produce a quorum on demand. In such a case just writing program 11 Input a point (y; T ).
Reference: [41] <author> M. Spasojevic and P. Berman, </author> <title> Voting as the optimal static pessimistic scheme for managing replicated data, </title> <journal> IEEE Trans. Par. Dist. Sys., </journal> <volume> 5 (1994), </volume> <pages> pp. 64-73. </pages>
Reference-contexts: The case when the elements fail with different probabilities p i , all less than 1 2 , is addressed in <ref> [41] </ref>. The first paper to explicitly consider mutual exclusion protocols in the context of intersecting set systems is [13]. In this work the term coterie and the concept of domination are introduced. Several basic properties of dominated and non-dominated coteries are proved. <p> By Proposition 6.1 there exist NDC's with loads which are as good or better|but these are more cumbersome to describe explicitly. 6.2. Voting Systems Have High Load. A popular and simple way to construct a quorum system is by weighted voting <ref> [14, 13, 41, 29] </ref>. In this section we show that L (S) &gt; 1 2 for any voting system S, i.e., any voting system is at least as bad as the Maj system in terms of load. Definition 6.2.
Reference: [42] <author> R. H. Thomas, </author> <title> A majority consensus approach to concurrency control for multiple copy databases, </title> <journal> ACM Trans. Database Sys., </journal> <volume> 4 (1979), </volume> <pages> pp. 180-209. </pages>
Reference-contexts: Our goal is to investigate these criteria and find quorum systems that perform well according to all three of them. 1.2. Related Work. The first distributed control protocols using quorum systems <ref> [42, 14] </ref> use voting to define the quorums. Each processor has a number of votes, and a quorum is any set of processors with a combined number of votes exceeding half of the system's total number of votes. The simple majority system is the most obvious voting system.
Reference: [43] <author> L. G. Valiant, </author> <title> Short monotone formulae for the majority function, </title> <journal> J. Algorithms, </journal> <volume> 5 (1984), </volume> <pages> pp. 363-366. </pages>
Reference-contexts: The SC-Grid system has L (SC-Grid) = O ( p 1 2 ffi for some ffi &gt; 0 then F p (SC-Grid) exp (( p n ln n)). The AndOr system uses the AND/OR trees of <ref> [43] </ref>. It has L (AndOr) = O (1= p n), F p (AndOr) exp (( p when p &lt; 1 4 , and F p exp ((n 0:19 )) if p 0:38 (n 0:19 ). <p> Combining with Lemma 5.19 finishes the proof. Proposition 5.21. L (AndOr) = O (1= p Proof. Apply Proposition 4.10 using Lemma 5.20. The following proposition shows the high availability of the AndOr system. The proof is an adaptation of the proof in <ref> [43] </ref>. We include it here for completeness, omitting some of the technical details. Proposition 5.22. Let ff = 3 p 2 0:38. F p (AndOr) exp (( p n)) when p &lt; 1 4 and F p exp ((n 0:19 )) when p ff (n 0:19 ). Proof. <p> When h is odd the bound is similar. 19 Now f O has a stable point at p = ff and f A has a stable point at p = 1 ff. As shown by <ref> [43] </ref>, if there are n = O (d 5:3 ) leaves in the tree and p &lt; ff (d 1 ) &lt; 1 ff (d 1 ), then f A (h) &lt; 2 d1 and the same for f O .
Reference: [44] <author> C. Wu, </author> <title> Replica control protocols that guarantee high availability and low access cost, </title> <type> Tech. Report 1817, </type> <institution> Dept. Computer Science, U. Illinois Urbana-Champaign, Urbana, Illinois, </institution> <year> 1993. </year>
Reference-contexts: Remark: A related construction, using paths on a triangular lattice with elements corresponding to the nodes, was suggested in [45] (see <ref> [44] </ref>). They show that their construction has asymptotically high availability (F p ! 0 when p &lt; 1 2 in our notation). The rate of convergence is not analyzed, and neither is the load (with or without failures).
Reference: [45] <author> C. Wu and G. G. Belford, </author> <title> The triangular lattice protocol: A highly fault tolerant protocol for replicated data, </title> <booktitle> in Proc. 11th IEEE Symp. on Reliable Dist. Sys., </booktitle> <year> 1992, </year> <pages> pp. 66-73. </pages>
Reference-contexts: Remark: A related construction, using paths on a triangular lattice with elements corresponding to the nodes, was suggested in <ref> [45] </ref> (see [44]). They show that their construction has asymptotically high availability (F p ! 0 when p &lt; 1 2 in our notation). The rate of convergence is not analyzed, and neither is the load (with or without failures). <p> Acknowledgments. We are grateful to David Peleg for his encouragement, and to Danny Raz for his careful reading of our manuscript. We thank the anonymous referees, whose remarks have helped us improve our presentation, and for bringing [12] and <ref> [45] </ref> to our attention.

References-found: 41

