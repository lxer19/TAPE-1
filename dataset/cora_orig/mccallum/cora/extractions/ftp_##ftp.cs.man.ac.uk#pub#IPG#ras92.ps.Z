URL: ftp://ftp.cs.man.ac.uk/pub/IPG/ras92.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Title: An Example of Process Change  
Author: Robert Snowdon 
Address: West Avenue, Kidsgrove, Stoke on Trent, ST7 1TL, England  
Affiliation: ICL,  
Abstract: Processes in businesses and other organisations are not set in concrete. They have to be flexible and responsive to stimuli which cause them to change. Process technology must relect these characteristics if it is to find realistic application. This paper illustrates how the evolutionary nature of processes may be supported in a particular process technology, that originally developed in the IPSE 2.5 project. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. F. Bruynooghe, J. M. Parker, and J. S. </author> <title> Rowles. PSS: A System for Process Enactment. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> Proceedings of the First International Conference on the Software Process: Manufacturing Complex Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Change and concurrency are essential elements of this and many other application domains. Such concerns were taken into account in the thinking behind the IPSE 2.5 project [4] and in the process technology originating in that project and subsequently developed as the PS system and the language PML <ref> [1] </ref>. This paper illustrates the particular features of this technology which are concerned with these aspects. It does this by means of a concrete example utilising a particular paradigm of change developed in the IPSE 2.5 project. This paradigm is known as PMMS (Process Model for Management Support).
Reference: 2. <author> Karen E. Huff and Victor R. Lesser. </author> <title> A Plan-based Intelligent Assistant That Supports the Software Development Process. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> Proceedings of the ACM SIG-SOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <month> 28-30 November, </month> <year> 1988, </year> <title> Boston. </title> <publisher> ACM Press 1988. </publisher>
Reference-contexts: The major elements of the structure are four roles. 3 The term plan is used here in the sense of something which might be familiar to a project manager. There are obvious similarities with the technical AI planning paradigm such as described in <ref> [2] </ref>. However, the relationships between such interpretations and a change model such as PMMS are not considered in this paper. 1. managing. This is the hub role. It receives/establishes terms of reference and acts as the initiator of PMMS behaviour. 2. technology.
Reference: 3. <author> M. A. Jackson. </author> <title> System Development. </title> <booktitle> Series in Computer Science. Prentice/Hall International, </booktitle> <year> 1983. </year> <editor> C. A. R. </editor> <booktitle> Hoare, Series Editor. </booktitle>
Reference-contexts: Notice that there are just two roles in simpleBanking. The first, identified as Customer0, represents the customer in a bank, the other, Customer1, represents the handling of the account itself 4 . 4 These names are derived from the scheme used in <ref> [3] </ref> from where the example itself is abstracted. base PMMS 1. managing 2. technology 3. logistics 4. administrating SBdoing simpleBanking 1. Customer0 2. Customer1 Permanent. Initial role in system. Permanent Permanent. Creates simpleBanking instances. Sends reports to managing Created on demand Fig. 3.
Reference: 4. <author> R. A. Snowdon. </author> <title> An Introduction to the IPSE 2.5 Project. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments. Springer-Verlag, Lecture Notes in Computer Science 467, </booktitle> <year> 1990. </year> <note> Also in ICL Technical Journal, May 1989, Vol 6 No 3. </note>
Reference-contexts: Process technology must not be restricted to the simple view if it is to find credible application. Change and concurrency are essential elements of this and many other application domains. Such concerns were taken into account in the thinking behind the IPSE 2.5 project <ref> [4] </ref> and in the process technology originating in that project and subsequently developed as the PS system and the language PML [1]. This paper illustrates the particular features of this technology which are concerned with these aspects.
Reference: 5. <author> Brian Warboys. </author> <title> The IPSE 2.5 Project: Process Modelling as the basis for a Support Environment. </title> <booktitle> In Proc. of the First International Conference on System Development Environments and Factories SDEF'89, </booktitle> <address> 9-11 May 1989, Berlin, </address> <month> May </month> <year> 1989. </year> <title> Acknowledgments Much of the original work on PMMS was carried out during the IPSE 2.5 project by Clive Roberts, </title> <editor> Alun Jones, Keith Harrison-Broninski and David Gourley of Praxis Systems, </editor> <title> Bath, England 5 with encouragement and direction from Mike Tordoff of ICL. 5 Clive Roberts is now with Co-Ordination Systems, </title> <address> Chippenham, England </address>
Reference-contexts: More details of these concepts can be found in, for example, [4],[1] and <ref> [5] </ref>. In PML a process is considered as comprising a number of roles which communicate through interactions. A role can be thought of as being rather like a single-threaded process having a private set of resources and some knowledge of its environment.
References-found: 5

