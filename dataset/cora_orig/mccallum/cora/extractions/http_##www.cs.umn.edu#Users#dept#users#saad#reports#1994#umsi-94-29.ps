URL: http://www.cs.umn.edu/Users/dept/users/saad/reports/1994/umsi-94-29.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/saad/reports/1994/
Root-URL: http://www.cs.umn.edu
Title: Heuristic algorithms for automatic graph partitioning  
Author: T. Goehring and Y. Saad 
Address: Minneapolis 55455  nesota, Minneapolis 55455  
Affiliation: Minnesota Supercomputer Institute. Department of Computer Science, University of Minnesota,  Department of Computer Science, and Minnesota Supercomputer Institute, University of Min  
Note: Work supported in part by ARPA under grant NIST 60NANB2D1272, in part by NSF grant CCR-9214116, and by the  
Date: April 24, 1994  
Abstract: Practical implementations of the Finite Element method on distributed memory multi-computer systems necessitate the use of partitioning tools to subdivide the mesh into sub-meshes of roughly equal size. Graph partitioning algorithms are mandatory when implementing distributed sparse matrix methods or domain decomposition techniques for irregularly structured problems, on parallel computers. We propose a class of algorithms which are based on level set expansions from a number of center nodes. A critical component of these methods is the location of these centers. We present a number of different strategies for finding centers which lead to good-quality partitionings. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stephen T. Barnard and Horst D. Simon. </author> <title> A fast multilevel implementation of recursive spectral bisection for partitioning unstructured problems. </title> <type> Technical Report RNR-92-033, </type> <institution> NASA Ames, Moffett field, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable.
Reference: [2] <author> Marsha J. Berger and Shahid H. Bokhari. </author> <title> A partitioning strategy for nonuniform problems on multiprocessor s. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36:570-580, </volume> <year> 1987. </year>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable.
Reference: [3] <author> N. Chrisochoides, Geoffrey Fox, and Joe Thompson. </author> <title> MENUS-PGG mapping environment for numerical unstructured and structured parallel grid generation. </title> <booktitle> In Proceedings of the seventh international conference on domain decomposition methods in scientific and engineering computing, </booktitle> <year> 1993. </year>
Reference-contexts: Leet, Peyton and Sincovec [9] later extended the algorithm and added to it the capability of handling arbitrary number of partitions and by proposing a parallel implementation. The approach taken by Chrisochoides et al. <ref> [5, 4, 3] </ref> is a geometrical one and exploits the coordinates of the mesh. The algorithm presented by Liu [10] uses graph theory concepts and exploits node separators. It concentrates on heuristics for finding good node separators.
Reference: [4] <author> N. Chrisochoides, C. E. Houstis, E. N. Houstis, P. N. Papachiou, S. K. Korte-sis, and J. Rice. </author> <title> DOMAIN DECOMPOSER: a software tool for mapping PDE computations tp parallel architectures. </title> <editor> In R. Glowinski et. al., editor, </editor> <title> Domain Decomposition Methods for Partial Differential Equations, </title> <address> pages 341-357. </address> <publisher> SIAM publications, </publisher> <year> 1991. </year>
Reference-contexts: Leet, Peyton and Sincovec [9] later extended the algorithm and added to it the capability of handling arbitrary number of partitions and by proposing a parallel implementation. The approach taken by Chrisochoides et al. <ref> [5, 4, 3] </ref> is a geometrical one and exploits the coordinates of the mesh. The algorithm presented by Liu [10] uses graph theory concepts and exploits node separators. It concentrates on heuristics for finding good node separators.
Reference: [5] <author> N. Chrisochoides, E. Houstis, and J. Rice. </author> <title> Mapping algorithms and software environment for data parallel pde iterative solvers. </title> <journal> Journal of Parallel and Distributed Computing. toappear. </journal>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable. <p> Leet, Peyton and Sincovec [9] later extended the algorithm and added to it the capability of handling arbitrary number of partitions and by proposing a parallel implementation. The approach taken by Chrisochoides et al. <ref> [5, 4, 3] </ref> is a geometrical one and exploits the coordinates of the mesh. The algorithm presented by Liu [10] uses graph theory concepts and exploits node separators. It concentrates on heuristics for finding good node separators.
Reference: [6] <author> Yeh-Ching Chung and Sanjay Ranka. </author> <title> Mapping finite element graphs on hyper-cubes. </title> <journal> Journal of Supercomputing, </journal> <volume> 6 </volume> <pages> 257-282, </pages> <year> 1992. </year>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable.
Reference: [7] <author> Charbel Farhat and Michel Lesoinne. </author> <title> Automatic partitioning of unstructured meshes for the parallel solution of problems in computational mechanics. </title> <journal> International Journal for Numerical Methods in Engineering, </journal> <volume> 36 </volume> <pages> 745-764, </pages> <year> 1993. </year>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable.
Reference: [8] <author> J. A. George and J. W. Liu. </author> <title> Computer Solution of Large Sparse Positive Definite Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N. J., </address> <year> 1981. </year>
Reference-contexts: In this paper we will not consider these refinements. 3 One-way and two-way graph partitioning One of the simplest form of graph partitioning is the `one-way dissection' orderings as defined by George and Liu <ref> [8] </ref>. This technique is remarkably simple. It consists of performing a breadth-first search traversal of the graph from a given node and assigning a certain number of consecutive levels to each subdomain. We can also start the Breadth-First Search from a set of nodes instead of a single node. <p> Call One-way partitioner for this subdomain 7. Enddo A critical ingredient in the efficiency of the procedure is the starting node. A well-known procedure for this is a heuristic for finding a so-called pseudo-peripheral node <ref> [8] </ref>. This procedure starts with an arbitrary node x and performs a BFS from this node. It then records the node y that is farthest away from x and the corresponding distance dist (x; y). We then assign x := y and perform a new traversal from x. <p> We should also mention that the algorithm can be regarded as an extension of a standard algorithm used in sparse matrix computations for finding pseudo-peripheral nodes in graphs <ref> [8] </ref>. 5.3 Inverse power algorithm The inverse power algorithm described below is identical to the modified pseudo-extents algorithm with an alteration in the method of measuring distance between a node and a set of nodes that more fully incorporates the global spread between candidate centers.
Reference: [9] <author> C. A. Leet, B. W. Peyton, and R. F. Sincovec. </author> <title> Toward a parallel recursive spectral bisection mapping tool. </title> <type> Technical report, </type> <institution> Oak Ridge National Lab., Knoxville, TN, </institution> <year> 1993. </year>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable. <p> There have been three popular approaches used for partitioning a graph. The algorithm proposed by Pothen, Simon and Liu [11] is a `spectral analysis' algorithm which is based on the concept of eigenvectors of a graph. Leet, Peyton and Sincovec <ref> [9] </ref> later extended the algorithm and added to it the capability of handling arbitrary number of partitions and by proposing a parallel implementation. The approach taken by Chrisochoides et al. [5, 4, 3] is a geometrical one and exploits the coordinates of the mesh.
Reference: [10] <author> J. W. H. Liu. </author> <title> A graph partitioning algorithm by node separators. </title> <journal> ACM Trans. Math. Software, </journal> <volume> 15 </volume> <pages> 198-219, </pages> <year> 1989. </year>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable. <p> The approach taken by Chrisochoides et al. [5, 4, 3] is a geometrical one and exploits the coordinates of the mesh. The algorithm presented by Liu <ref> [10] </ref> uses graph theory concepts and exploits node separators. It concentrates on heuristics for finding good node separators.
Reference: [11] <author> A. Pothen, H. D. Simon, and K. P. Liou. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM J. Matrix. Anal. Appl., </journal> <volume> 11 </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable. <p> Another important criterion that can be used is one which focuses on communication costs. We can attempt to find partitioners that will minimize communication costs during a typical iterative process. There have been three popular approaches used for partitioning a graph. The algorithm proposed by Pothen, Simon and Liu <ref> [11] </ref> is a `spectral analysis' algorithm which is based on the concept of eigenvectors of a graph. Leet, Peyton and Sincovec [9] later extended the algorithm and added to it the capability of handling arbitrary number of partitions and by proposing a parallel implementation. <p> the cases where only the graph is known and coordinate information is not available. 5.1 Using nodes from a 2-way partitioning In general, the two-way partitioning algorithm does not provide as good a splitting of the graph as some of the well-known alternatives such as the Recursive Spectral Bisection technique <ref> [11] </ref>. It is, however, rather inexpensive to obtain. As a result, we can use this partitioning only to get the centers for the Level-Set Expansion. For example we can simply take the middle node in the subdomain as a center.
Reference: [12] <author> Ponnuswamy Sadayappan and Fikret Ercal. </author> <title> Nearest-neighbor mapping of finite element graphs onto processor meshes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36:1408-1424, </volume> <year> 1987. </year> <title> 0 4 8 12 16 20 Partitions Estimated Speedup [Message Startup=100/flops] [Bandwidth=0.125*flops] Scatter Algorithm Recursive Spectral Bisection Inverse Edge Algorithm 1 1.2 1.4 1.6 1.8 2 Partitions Scaled Time Estimate [Message Startup=100/flops] [Bandwidth=0.125*flops] Scatter Algorithm Recursive Spectral Bisection Inverse Edge Algorithm 19 </title>
Reference-contexts: One of the the first steps in implementing domain decomposition type methods is to partition an initial mesh into a number of submeshes and to map these submeshes into the processors. This problem has recently become the focus of much attention <ref> [10, 5, 11, 9, 7, 6, 2, 12, 1] </ref> mainly because a rapid progress in the practical implementations of finite element methods on parallel computers is currently being achieved and such tools are becoming indispensable.
References-found: 12

