URL: http://cs-www.bu.edu/faculty/best/res/papers/icde96.ps
Refering-URL: http://cs-www.bu.edu/faculty/best/res/Home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (best@cs.bu.edu)  
Title: Speculative Data Dissemination and Service to Reduce Server Load, Network Traffic and Service Time in
Author: Azer Bestavros 
Address: Boston University, MA 02215  
Affiliation: Computer Science Department  
Date: March 1996.  
Note: In Proceedings of ICDE'96: The 1996 InternationalConference on Data Engineering, New Orleans, Louisiana,  
Abstract: We present two server-initiated protocols to improve the performance of distributed information systems (e.g. WWW). Our first protocol is a hierarchical data dissemination mechanism that allows information to propagate from its producers to servers that are closer to its consumers. This dissemination reduces network traffic and balances load amongst servers by exploiting geographic and temporal locality of reference properties exhibited in client access patterns. Our second protocol relies on "speculative service", whereby a request for a document is serviced by sending, in addition to the document requested, a number of other documents that the server speculates will be requested in the near future. This speculation reduces service time by exploiting the spatial locality of reference property. We present results of trace-driven simulations that quantify the attainable performance gains for both protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Swarup Acharya and Stanley B. Zdonik. </author> <title> An efficient scheme for dynamic data replication. </title> <type> Technical Report CS-93-43, </type> <institution> Brown University, </institution> <address> Providence, Rhode Island 02912, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Traditionally, this was done in the realms of distributed file systems [13, 17, 14, 18], but have been recently extended to distributed information systems (e.g. FTP and HTTP) <ref> [15, 10, 1, 16, 7, 9, 4] </ref>. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [2] <author> Azer Bestavros. </author> <title> Demand-based document dissemination to reduce traffic and balance load in distributed information systems. </title> <booktitle> In Proceedings of SPDP'95: The 7 th IEEE Symposium on Parallel and Distributed Processing, </booktitle> <address> San Anotonio, Texas, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: Second, the WWW is fully fl This work has been partially supported by NSF (grant CCR-9308344). deployed in thousands of institutions worldwide, which gives us an unparalleled opportunity to apply our findings to an already-existing real-world application. Our first technique (introduced in <ref> [2] </ref>) provides a mechanism whereby "popular" data is disseminated automatically and dynamically towards consumers|the more popular the data, the closer it gets to the clients. <p> smaller than 15%|we call these locally popular documents; 365 documents had a remote-to-local access ratio between 85% and 15%| we call the remaining 365 documents globally popular documents. 1 In this paper we use the term "document" to refer to any multimedia object. 2 These observations have been corroborated in <ref> [2] </ref> by analyzing the HTTP logs of the Rolling Stones web site, serving more than 1GB/day of multimedia data to tens of thousands of clients. <p> This aging mechanism depends highly (among other things) on the frequency and pattern of document updates on the server. The relative stability of P and P fl observed in the above experiments reinforces our findings in <ref> [2] </ref> and the findings of Gwertzman in [11] that for WWW documents the popularity profile tends to be stable and updates tend to be infrequent. Effect of Document Size The benefits of speculation are most pronounced when documents serviced speculatively are small.
Reference: [3] <author> Azer Bestavros. </author> <title> Using speculation to reduce server load and service time on the www. In Proceedings of CIKM'95: </title> <booktitle> The 4 th ACM International Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, Maryland, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Most of the performance improvements seem to result from a minimal level of speculation on traversal dependencies. 3.4 Fine-tuning speculative service In the remainder of this section, we discuss the performance of speculative service under various assumptions and refinements. Detailed experiments and results are described in <ref> [3] </ref>.
Reference: [4] <author> Azer Bestavros, Robert Carter, Mark Crovella, Carlos Cunha, Abdelsalam Heddaya, and Sulaiman Mirdad. </author> <title> Application level document caching in the internet. </title> <booktitle> In IEEE SDNE'96: The Second International Workshop on Services in Distributed and Networked Environments, </booktitle> <address> Whistler, British Columbia, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Traditionally, this was done in the realms of distributed file systems [13, 17, 14, 18], but have been recently extended to distributed information systems (e.g. FTP and HTTP) <ref> [15, 10, 1, 16, 7, 9, 4] </ref>. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact. <p> By controlling the value of SessionTimeout, we can emulate various caching policies. Setting SessionTimeout to 1 emulates a client with an infinite-size multi-session cache (e.g. the LAN cache proposed in <ref> [4] </ref>). Setting SessionTimeout to (say) 60 minutes emulates a client with an infinite-size single-session cache. Setting SessionTimeout to 0 emulates a client with no cache. The cost model we adopted assumes a symmetric network, where the cost of communicating one byte between any server and any client is CommCost. <p> These performance improvements are above and beyond what is achievable by performing caching at the clients <ref> [4] </ref>. Figures 5 and 6 suggest that speculation is most effective when done conservatively. Beyond some point, speculation does not seem to pay off.
Reference: [5] <author> Azer Bestavros and Carlos Cunha. </author> <title> A prefetching protocol using client speculation for the www. Technical Report TR-95-011, </title> <institution> Boston University, CS Dept, </institution> <address> Boston, MA 02215, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Alternately, client-initiated prefetching could be based on user logs (as opposed to server logs). In an on-going study <ref> [5] </ref>, extensive user logs [8] are analyzed to obtain a per-user relationship similar to the P and P fl relationships (i.e. a user profile). Such a relationship is used to initiate document prefetching.
Reference: [6] <author> Azer Bestavros and Carlos Cunha. </author> <title> Replica placement for distributed information systems. </title> <type> Technical Report (In Progress), </type> <institution> Boston University, CS Dept, </institution> <address> Boston, MA 02215, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: For a given home server, we view the WWW clientele (Internet) as a tree rooted at the server. The leaves of that tree are the clients and the internal nodes are the potential proxies. In <ref> [6] </ref>, we describe an efficient technique for building such a tree using the record route option of TCP/IP. <p> In other words, when the proxy becomes overloaded, then B 0 is reduced, thus forcing more of the requests back to the servers. 2.4 Achievable Bandwidth Reduction We performed simulations of our dissemination strategy. Our simulations were driven by the traces of 22-weeks obtained from http://cs-www.bu.edu <ref> [6] </ref>. Figure 3 shows the expected percentage reduction in bandwidth (measured in bytes fi hops) that is achievable by disseminating a percentage of the most "popular" data available on the server. The horizontal axis shows the number of proxies to which this data was disseminated.
Reference: [7] <author> Matthew Addison Blaze. </author> <title> Caching in Large Scale Distributed File Systems. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: Traditionally, this was done in the realms of distributed file systems [13, 17, 14, 18], but have been recently extended to distributed information systems (e.g. FTP and HTTP) <ref> [15, 10, 1, 16, 7, 9, 4] </ref>. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [8] <author> Carlos Cunha, Azer Bestavros, and Mark Crovella. </author> <title> Characteristics of www client-based traces. </title> <type> Technical Report TR-95-010, </type> <institution> Boston University, CS Dept, </institution> <address> Boston, MA 02215, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Alternately, client-initiated prefetching could be based on user logs (as opposed to server logs). In an on-going study [5], extensive user logs <ref> [8] </ref> are analyzed to obtain a per-user relationship similar to the P and P fl relationships (i.e. a user profile). Such a relationship is used to initiate document prefetching.
Reference: [9] <author> Michael D. Dahlin, Randolph Y. Wang, Thomas E. An-derson, and Dacid A. Patterson. </author> <title> Cooperative caching: Using remote client memory to improve file system performance. </title> <booktitle> In First Symposium on Operating systems Design and Implementation (OSDI), </booktitle> <pages> pages 267-280, </pages> <year> 1994. </year>
Reference-contexts: Traditionally, this was done in the realms of distributed file systems [13, 17, 14, 18], but have been recently extended to distributed information systems (e.g. FTP and HTTP) <ref> [15, 10, 1, 16, 7, 9, 4] </ref>. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [10] <author> Peter Danzig, Richard Hall, and Michael Schwartz. </author> <title> A case for cashing file objects inside internetworks. </title> <type> Technical Report CU-CS-642-93, </type> <institution> University of Colorado at Boulder, Boulder, Colorado 80309-430, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Traditionally, this was done in the realms of distributed file systems [13, 17, 14, 18], but have been recently extended to distributed information systems (e.g. FTP and HTTP) <ref> [15, 10, 1, 16, 7, 9, 4] </ref>. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [11] <author> James Gwertzman. </author> <title> Autonomous replication in wide area networks, 1995. </title> <type> Senior Thesis, </type> <institution> Harvard University, DAS. </institution>
Reference-contexts: This aging mechanism depends highly (among other things) on the frequency and pattern of document updates on the server. The relative stability of P and P fl observed in the above experiments reinforces our findings in [2] and the findings of Gwertzman in <ref> [11] </ref> that for WWW documents the popularity profile tends to be stable and updates tend to be infrequent. Effect of Document Size The benefits of speculation are most pronounced when documents serviced speculatively are small.
Reference: [12] <author> James Gwertzman and Margo Seltzer. </author> <title> The case for geographical push-caching. </title> <type> Technical Report HU TR-34-94 (excerpt), </type> <institution> Harvard University, DAS, </institution> <address> Cambridge, MA 02138, </address> <year> 1994. </year>
Reference-contexts: Furthermore, by analyzing the access patterns of clients (as recorded in the server logs), we could optimally locate the set of tree nodes to use as service proxies for that home server. 4 Gwertzman and Seltzer <ref> [12] </ref> sketched an alternative technique for choosing the set of service proxies based on geographical information (such as the distance in actual miles between servers and clients). 3 Multiple updates to a document within one day were counted as one update. 4 This was done for the http://cs-www.bu.edu home server, whose
Reference: [13] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Side-botham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Current research in automated replication techniques concentrate on client-based caching, whereby recently/frequently accessed information is cached at the client (or at a proxy thereof) in anticipation of future accesses to the same information. Traditionally, this was done in the realms of distributed file systems <ref> [13, 17, 14, 18] </ref>, but have been recently extended to distributed information systems (e.g. FTP and HTTP) [15, 10, 1, 16, 7, 9, 4]. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [14] <author> J.H. Morris, M. Satyanarayanan, M.H. Conner, J.H. Howard, D.S.H. Rosenthal, and F.D. Smith. Andrew: </author> <title> a distributed personal computing environment. </title> <journal> Comm. ACM, </journal> <volume> 29(3) </volume> <pages> 184-201, </pages> <month> Mar. </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Current research in automated replication techniques concentrate on client-based caching, whereby recently/frequently accessed information is cached at the client (or at a proxy thereof) in anticipation of future accesses to the same information. Traditionally, this was done in the realms of distributed file systems <ref> [13, 17, 14, 18] </ref>, but have been recently extended to distributed information systems (e.g. FTP and HTTP) [15, 10, 1, 16, 7, 9, 4]. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [15] <author> D. Muntz and P. Honeyman. </author> <title> Multi-level caching in distributed file systems or your cache ain't nuthing but trash. </title> <booktitle> In Proceedings of the Winter 1992 USENIX, </booktitle> <pages> pages 305-313, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Traditionally, this was done in the realms of distributed file systems [13, 17, 14, 18], but have been recently extended to distributed information systems (e.g. FTP and HTTP) <ref> [15, 10, 1, 16, 7, 9, 4] </ref>. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [16] <author> Christos H. Papadimitriou, Srinivas Ramanathan, and P. Venkat Rangan. </author> <title> Information caching for delivery of personalized video programs on home entertainment channels. </title> <booktitle> In Proceedings of the International Confrence on Multimedia Computing and Systems, </booktitle> <pages> pages 214-223, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Traditionally, this was done in the realms of distributed file systems [13, 17, 14, 18], but have been recently extended to distributed information systems (e.g. FTP and HTTP) <ref> [15, 10, 1, 16, 7, 9, 4] </ref>. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [17] <author> R. Sandber, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the sun network file system. </title> <booktitle> In Proceedings of USENIX Summer Conference, </booktitle> <year> 1985. </year>
Reference-contexts: 1 Introduction Current research in automated replication techniques concentrate on client-based caching, whereby recently/frequently accessed information is cached at the client (or at a proxy thereof) in anticipation of future accesses to the same information. Traditionally, this was done in the realms of distributed file systems <ref> [13, 17, 14, 18] </ref>, but have been recently extended to distributed information systems (e.g. FTP and HTTP) [15, 10, 1, 16, 7, 9, 4]. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
Reference: [18] <author> M. Satyanarayanan, J. Kistler, P. Kumar, M. Okasaki, E. Siegel, and D. Streere. Coda: </author> <title> A highly available file system for distributed workstation environments. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4), </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Current research in automated replication techniques concentrate on client-based caching, whereby recently/frequently accessed information is cached at the client (or at a proxy thereof) in anticipation of future accesses to the same information. Traditionally, this was done in the realms of distributed file systems <ref> [13, 17, 14, 18] </ref>, but have been recently extended to distributed information systems (e.g. FTP and HTTP) [15, 10, 1, 16, 7, 9, 4]. We believe that these local (myopic) solutions, focussing exclusively on a particular client or set of clients, are likely to have limited impact.
References-found: 18

