URL: http://www.cs.duke.edu/~jsv/Papers/AVV97.SegmentGIS.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node12.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: External-Memory Algorithms for Processing Line Segments in Geographic Information Systems  
Author: Lars Arge Darren Erik Vengroff Jeffrey Scott Vitter 
Date: September 1996  
Address: Aarhus Providence, RI 02912 Durham, NC 27708-0129 Aarhus, Denmark USA USA  
Affiliation: BRICS Dept. of Computer Science Dept. of Computer Science Dept. of Computer Science Brown University Duke University University of  
Abstract: In the design of algorithms for large-scale applications it is essential to consider the problem of minimizing I/O communication. Geographical information systems (GIS) are good examples of such large-scale applications as they frequently handle huge amounts of spatial data. In this paper we develop efficient new external-memory algorithms for a number of important problems involving line segments in the plane, including trapezoid decomposition, batched planar point location, triangulation, red-blue line segment intersection reporting, and general line segment intersection reporting. In GIS systems, the first three problems are useful for rendering and modeling, and the latter two are frequently used for overlaying maps and extracting information from them.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal and J. S. Vitter. </author> <title> The Input/Output complexity of sorting and related problems. </title> <journal> Communications of the ACM, </journal> <volume> 31(9) </volume> <pages> 1116-1127, </pages> <year> 1988. </year>
Reference-contexts: Large-scale problem instances can be in the range N = 10 10 to N = 10 12 . In order to study the performance of external-memory algorithms, we use the standard notion of I/O complexity <ref> [1, 36] </ref>. We define an input/output operation (or simply I/O for short) to be the process of reading or writing a block of data to or from the disk. The I/O complexity of an algorithm is simply the number of I/Os it performs. <p> theory achieve asymptotic optimality [36] when D is very large, it is often the method of choice in practice for using parallel disks, especially when D is moderately sized [35]. 1.2 Previous Results in I/O-Efficient Computation Early work on I/O algorithms concentrated on algorithms for sorting and permutation related problems <ref> [1, 17, 25, 26, 36] </ref>. External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory. <p> External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory. Work has also been done on matrix algebra and related problems arising in scientific computation <ref> [1, 35, 36] </ref>. More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry [21] and graph theoretic computation [5, 16].
Reference: [2] <author> D. S. Andrews, J. Snoeyink, J. Boritz, T. Chan, G. Denham, J. Harrison, and C. Zhu. </author> <title> Further comparisons of algorithms for geometric intersection problems. </title> <booktitle> In Proc. 6th Int'l. Symp. on Spatial Data Handling, </booktitle> <year> 1994. </year>
Reference-contexts: As mentioned, the red-blue line segment intersection problem is of special interest because it is an abstraction of the important map-overlay problem, which is the core of several vector-based GISs <ref> [2, 3, 28] </ref>. Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem [10, 13, 24, 28].
Reference: [3] <author> ARC/INFO. </author> <title> Understanding GIS|the ARC/INFO method. </title> <address> ARC/INFO, </address> <year> 1993. </year> <note> Rev. 6 for workstations. </note>
Reference-contexts: As mentioned, the red-blue line segment intersection problem is of special interest because it is an abstraction of the important map-overlay problem, which is the core of several vector-based GISs <ref> [2, 3, 28] </ref>. Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem [10, 13, 24, 28]. <p> The smaller branching factor at most about doubles the height of the tree. Segments such as CD that completely span one or more slabs are called long segments. A copy of each long segment is stored in the largest multislab it spans. Thus, CD is stored in <ref> [ 1 ; 3 ] </ref>. All segments that are not long are called short segments and are not stored in any multislab. Instead, they are passed down to lower levels of the tree where they may span recursively defined slabs and be stored.
Reference: [4] <author> L. Arge. </author> <title> The buffer tree: A new technique for optimal I/O-algorithms. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 955, </volume> <pages> pages 334-345, </pages> <year> 1995. </year>
Reference-contexts: More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry [21] and graph theoretic computation [5, 16]. In [6] a general connection between the comparison-complexity and the I/O complexity of a given problem is shown, and in <ref> [4] </ref> alternative solutions for some of the problems in [16] and [21] are derived by developing and using dynamic external-memory data structures. 1.3 Our Results In this paper, we combine and modify in novel ways several of the previously known techniques for designing efficient algorithms for external memory. <p> In particular we use the distribution sweeping and batch filtering paradigms of [21] and the buffer tree data structure of <ref> [4] </ref>. In addition we also develop a powerful new technique that can be regarded as a practical external-memory version of batched fractional cascading on an external-memory version of a segment tree. <p> EPD is a powerful tool for solving other important problems as we will illustrate in Section 2.1. As mentioned in the introduction a number of techniques for designing efficient I/O-efficient algorithms have been developed in recent years, including distribution sweeping, batch filtering [21] and buffer trees <ref> [4] </ref>. However, we do not seem to be able to efficiently solve EPD using these tech 4 () a a above b b b a b y a &gt; y b y b trapezoid decomposition of a simple polygon. segments can be related in four different ways. niques directly. <p> For every endpoint we encounter we also do a search in the tree to identify the segment immediately above the point. In <ref> [4] </ref> a number of external-memory data structures called buffer trees are developed for use in plane-sweep algorithms. <p> Such queries are called stabbing queries. An external-memory segment tree based on the approach in <ref> [4] </ref> is shown in Figure 4. The tree is perfectly balanced over the endpoints of the segments it represents and has branching factor p m=4. Each leaf represents M=2 consecutive segment endpoints. <p> Each leaf represents M=2 consecutive segment endpoints. The first level of the tree partitions the data into p m=4 intervals i |for illustrative reasons we call them slabs|separated by dotted lines on Figure 4. Multislabs are defined as contiguous ranges of slabs, such as for example <ref> [ 1 ; 4 ] </ref>. There are m=8 p m=4 multislabs. The key point is that the number of multislabs is a quadratic function of the branching factor. <p> Because of the size of the nodes and auxiliary multislab data, the buffer tree approach is inefficient for answering single queries. In batch dynamic environments, however, it can be used to develop optimal algorithms. In <ref> [4] </ref>, techniques are developed for using external-memory segment trees in a batch dynamic environment such that inserting N segments in the tree and performing K queries requires O ((n + k) log m n + t) I/Os. <p> The modification requires two significant improvements over existing techniques. First, as discussed in Section 2.3.1, we need to strengthen the definition of the structure, and the tree construction techniques of <ref> [4] </ref> must be modified in order to guarantee optimal performance when the structure is built. <p> In this algorithm, intersections are reported both during the construction of an extended external segment tree and during the filtering of endpoints through the structure. In order to develop the algorithm we need an external-memory priority queue <ref> [4] </ref>. Given m p blocks of internal memory, N insert and delete-min operations can be performed on such a structure in O (n log m p n) I/Os.
Reference: [5] <author> L. Arge. </author> <title> The I/O-complexity of ordered binary-decision diagram manipulation. </title> <booktitle> In Proc. Int. Symp. on Algorithms and Computation, </booktitle> <volume> LNCS 1004, </volume> <pages> pages 82-91, </pages> <year> 1995. </year>
Reference-contexts: Work has also been done on matrix algebra and related problems arising in scientific computation [1, 35, 36]. More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry [21] and graph theoretic computation <ref> [5, 16] </ref>.
Reference: [6] <author> L. Arge, M. Knudsen, and K. Larsen. </author> <title> A general lower bound on the I/O-complexity of comparison-based algorithms. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 709, </volume> <pages> pages 83-94, </pages> <year> 1993. </year>
Reference-contexts: Work has also been done on matrix algebra and related problems arising in scientific computation [1, 35, 36]. More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry [21] and graph theoretic computation [5, 16]. In <ref> [6] </ref> a general connection between the comparison-complexity and the I/O complexity of a given problem is shown, and in [4] alternative solutions for some of the problems in [16] and [21] are derived by developing and using dynamic external-memory data structures. 1.3 Our Results In this paper, we combine and modify
Reference: [7] <author> M. J. Atallah, R. Cole, and M. T. Goodrich. </author> <title> Cascading divide-and-conquer: A technique for designing parallel algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 18(3) </volume> <pages> 499-532, </pages> <year> 1989. </year>
Reference-contexts: These bridges obviate the need for full searches in the lists at the children. We take a similar approach for our external-memory problem, except that we send sample elements from parents to children. Furthermore, we do not use explicit bridges. Our approach uses ideas similar to ones used in <ref> [7, 8] </ref>. As a first step towards a solution based on fractional cascading, we preprocess the extended external segment tree in the following way (corresponding to "building bridges"): For each internal node, starting with the root, we produce a set of sample segments.
Reference: [8] <author> H. Baumgarten, H. Jung, and K. Mehlhorn. </author> <title> Dynamic point location in general subdivisions. </title> <journal> Journal of Algorithms, </journal> <volume> 17 </volume> <pages> 342-380, </pages> <year> 1994. </year>
Reference-contexts: These bridges obviate the need for full searches in the lists at the children. We take a similar approach for our external-memory problem, except that we send sample elements from parents to children. Furthermore, we do not use explicit bridges. Our approach uses ideas similar to ones used in <ref> [7, 8] </ref>. As a first step towards a solution based on fractional cascading, we preprocess the extended external segment tree in the following way (corresponding to "building bridges"): For each internal node, starting with the root, we produce a set of sample segments.
Reference: [9] <author> J. L. Bentley. </author> <title> Algorithms for klee's rectangle problems. </title> <institution> Dept. of Computer Science, Carnegie Mellon Univ., </institution> <note> unpublished notes, </note> <year> 1977. </year>
Reference-contexts: As know techniques fails to solve EPD optimally we are led instead to other approaches as discussed in the next section. 2.3 External-Memory Segment Trees The segment tree <ref> [9, 30] </ref> is a well-known dynamic data structure used to store a set of segments in one dimension, such that given a query point all segments containing the point can be found efficiently. Such queries are called stabbing queries.
Reference: [10] <author> T. M. Chan. </author> <title> A simple trapezoid sweep algorithm for reporting red/blue segment intersections. </title> <booktitle> In Proc. of 6th Canadian Conference on Computational Geometry, </booktitle> <year> 1994. </year>
Reference-contexts: Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem <ref> [10, 13, 24, 28] </ref>. Two of these algorithms [13, 28] are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm.
Reference: [11] <author> B. Chazelle. </author> <title> Triangulating a simple polygon in linear time. </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1990. </year>
Reference-contexts: Such modifications lead to algorithms using O (N log B n) I/Os. For two of the algorithms the known optimal internal-memory algorithms <ref> [11, 12] </ref> are not plane-sweep algorithms and can therefore not be modified in this manner. It is difficult to analyze precisely how those algorithms perform in an I/O environment; however it is easy to realize that they use at least (N ) I/Os. <p> polygon, can all be computed in O (n log m n) I/O operations. 12 It remains open whether a simple polygon can be triangulated in O (n) I/Os when the input vertices are given by their order on the boundary of the polygon, which would match the linear internal-memory bound <ref> [11] </ref>. As a final direct application of our algorithm for EPD we consider the multi-point planar point location problem. This is the problem of reporting the location of K query points in a planar subdivision defined by N line segments.
Reference: [12] <author> B. Chazelle and H. Edelsbrunner. </author> <title> An optimal algorithm for intersecting line segments in the plane. </title> <journal> Journal of the ACM, </journal> <volume> 39 </volume> <pages> 1-54, </pages> <year> 1992. </year>
Reference-contexts: Such modifications lead to algorithms using O (N log B n) I/Os. For two of the algorithms the known optimal internal-memory algorithms <ref> [11, 12] </ref> are not plane-sweep algorithms and can therefore not be modified in this manner. It is difficult to analyze precisely how those algorithms perform in an I/O environment; however it is easy to realize that they use at least (N ) I/Os. <p> As mentioned, the red-blue line segment intersection problem is of special interest because it is an abstraction of the important map-overlay problem, which is the core of several vector-based GISs [2, 3, 28]. Although a time-optimal internal-memory algorithm for the general intersection problem exists <ref> [12] </ref>, a number of simpler solutions have been presented for the red-blue problem [10, 13, 24, 28]. Two of these algorithms [13, 28] are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm.
Reference: [13] <author> B. Chazelle, H. Edelsbrunner, L. J. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line-segment problems and polyhedral terrains. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 116-132, </pages> <year> 1994. </year>
Reference-contexts: Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem <ref> [10, 13, 24, 28] </ref>. Two of these algorithms [13, 28] are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm. <p> Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem [10, 13, 24, 28]. Two of these algorithms <ref> [13, 28] </ref> are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm. The authors of [28] claim that their algorithm will perform well with inadequate internal memory owing to the fact that data are mostly referenced sequentially. <p> To solve the first problem, we will take advantage of the internal memory that is available to us. The second problem is solved with a notion similar to fractional cascading <ref> [13, 14] </ref>. The idea behind fractional cascading on internal-memory segment trees [33] is that instead of searching for the same element in a number of sorted lists of different nodes, we augment the list at a node with sample elements from lists at the node's children.
Reference: [14] <author> B. Chazelle and L. J. Guibas. Fractional cascading: I. </author> <title> A data structuring technique. </title> <journal> Algorith-mica, </journal> <volume> 1 </volume> <pages> 133-162, </pages> <year> 1986. </year>
Reference-contexts: Second, as discussed in Section 2.3.2 the batched query algorithm must be augmented using techniques similar to fractional cascading <ref> [14] </ref>. 2.3.1 Constructing Extended External Segment Trees We will construct what we call an extended external segment tree using an approach based on distribution sweeping. <p> To solve the first problem, we will take advantage of the internal memory that is available to us. The second problem is solved with a notion similar to fractional cascading <ref> [13, 14] </ref>. The idea behind fractional cascading on internal-memory segment trees [33] is that instead of searching for the same element in a number of sorted lists of different nodes, we augment the list at a node with sample elements from lists at the node's children.
Reference: [15] <author> Y.-J. Chiang. </author> <title> Experiments on the practical I/O efficiency of geometric algorithms: Distribution sweep vs. plane sweep. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 955, </volume> <pages> pages 346-357, </pages> <year> 1995. </year>
Reference-contexts: log m n) O (N log B n) Red-blue line segment intersection O (n log m n + t) O (N log B n + t) Line segment intersection O ((n + t) log m n) (N ) structures, following the example of a class of algorithms studied experimentally in <ref> [15] </ref>. Such modifications lead to algorithms using O (N log B n) I/Os. For two of the algorithms the known optimal internal-memory algorithms [11, 12] are not plane-sweep algorithms and can therefore not be modified in this manner.
Reference: [16] <author> Y.-J. Chiang, M. T. Goodrich, E. F. Grove, R. Tamassia, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory graph algorithms. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 139-149, </pages> <year> 1995. </year>
Reference-contexts: Work has also been done on matrix algebra and related problems arising in scientific computation [1, 35, 36]. More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry [21] and graph theoretic computation <ref> [5, 16] </ref>. <p> In [6] a general connection between the comparison-complexity and the I/O complexity of a given problem is shown, and in [4] alternative solutions for some of the problems in <ref> [16] </ref> and [21] are derived by developing and using dynamic external-memory data structures. 1.3 Our Results In this paper, we combine and modify in novel ways several of the previously known techniques for designing efficient algorithms for external memory. <p> To sort the segments we simply have to topologically sort G. As G is a planar s,t-graph of size O (N ) this can be done in O (n log m n) I/Os using an algorithm of <ref> [16] </ref>. 2.2 Buffer Trees and Distribution Sweeping In internal memory EPD can be solved optimally with a simple plane-sweep algorithm; We sweep the plane from left to right with a vertical line, inserting a segment in a search tree when its left endpoint is reached and removing it again when the
Reference: [17] <author> T. H. Cormen, T. Sundquist, and L. F. Wisniewski. </author> <title> Asymptotically tight bounds for per-forming BMMC permutations on parallel disk systems. </title> <type> Technical Report PCS-TR94-223, </type> <institution> Dartmouth College Dept. of Computer Science, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: theory achieve asymptotic optimality [36] when D is very large, it is often the method of choice in practice for using parallel disks, especially when D is moderately sized [35]. 1.2 Previous Results in I/O-Efficient Computation Early work on I/O algorithms concentrated on algorithms for sorting and permutation related problems <ref> [1, 17, 25, 26, 36] </ref>. External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory.
Reference: [18] <author> R. F. Cromp. </author> <title> An intellegent information fusion system for handling the archiving and querying of terabyte-sized spatial databases. </title> <editor> In S. R. Tate ed., </editor> <title> Report on the Workshop on Data and Image Compression Needs and Uses in the Scientific Community, </title> <type> CESDIS Technical Report Series, </type> <month> TR-93-99, </month> <pages> pages 75-84, </pages> <year> 1993. </year>
Reference-contexts: Army Research Office under grant DAAH04-93-G-0076 and DAAH04-96-1-0013. Email: jsv@cs.duke.edu. Acronym for Basic Research in Computer Science, a Center of the Danish National Research Foundation. 1 mineral exploration [22]. In support of these applications, GIS systems store, manipulate, and search through enormous amounts of spatial data <ref> [18, 23, 32, 34] </ref>. <p> Email: jsv@cs.duke.edu. Acronym for Basic Research in Computer Science, a Center of the Danish National Research Foundation. 1 mineral exploration [22]. In support of these applications, GIS systems store, manipulate, and search through enormous amounts of spatial data [18, 23, 32, 34]. NASA's EOS project GIS system <ref> [18] </ref>, for example, is expected to manipulate petabytes (thousands of terabytes, or millions of gigabytes) of data! Typical subproblems that need to be solved in GIS systems include point location, triangulating maps, generating contours from triangulated elevation data, and producing map overlays, all of which require manipulation of line segments.
Reference: [19] <author> H. Edelsbrunner and M. Overmars. </author> <title> Batched dynamic solutions to decomposable searching problems. </title> <journal> Journal of Algorithms, </journal> <volume> 6 </volume> <pages> 515-542, </pages> <year> 1985. </year>
Reference-contexts: The queries that such plane-sweep algorithms ask of their dynamic data structures need not be answered in any particular order; the only requirement on the queries is that they must all eventually be answered. Such problems are known as batch dynamic problems <ref> [19] </ref>. The plane-sweep algorithm for EPD sketched above can be stated as a batched dynamic problem.
Reference: [20] <author> A. Fournier and D. Y. Montuno. </author> <title> Triangulating simple polygons and equivalent problems. </title> <journal> ACM Trans. on Graphics, </journal> <volume> 3(2) </volume> <pages> 153-174, </pages> <year> 1984. </year>
Reference-contexts: Proof : After computing the trapezoid decomposition of a simple polygon, the polygon can be triangulated in O (n) I/Os using a slightly modified version of an algorithm from <ref> [20] </ref>. We define a segment AB in the plane to be above another segment CD if we can intersect both AB and CD with the same vertical line l, such that the intersection between l and AB is above the intersection between l and CD.
Reference: [21] <author> M. T. Goodrich, J.-J. Tsay, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory computational geometry. </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 714-723, </pages> <year> 1993. </year>
Reference-contexts: Work has also been done on matrix algebra and related problems arising in scientific computation [1, 35, 36]. More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry <ref> [21] </ref> and graph theoretic computation [5, 16]. In [6] a general connection between the comparison-complexity and the I/O complexity of a given problem is shown, and in [4] alternative solutions for some of the problems in [16] and [21] are derived by developing and using dynamic external-memory data structures. 1.3 Our <p> a number of problems in different areas, such as in computational geometry <ref> [21] </ref> and graph theoretic computation [5, 16]. In [6] a general connection between the comparison-complexity and the I/O complexity of a given problem is shown, and in [4] alternative solutions for some of the problems in [16] and [21] are derived by developing and using dynamic external-memory data structures. 1.3 Our Results In this paper, we combine and modify in novel ways several of the previously known techniques for designing efficient algorithms for external memory. In particular we use the distribution sweeping and batch filtering paradigms of [21] and <p> and <ref> [21] </ref> are derived by developing and using dynamic external-memory data structures. 1.3 Our Results In this paper, we combine and modify in novel ways several of the previously known techniques for designing efficient algorithms for external memory. In particular we use the distribution sweeping and batch filtering paradigms of [21] and the buffer tree data structure of [4]. In addition we also develop a powerful new technique that can be regarded as a practical external-memory version of batched fractional cascading on an external-memory version of a segment tree. <p> This enables us to improve on existing external-memory algorithms as well as to develop new algorithms and thus partially answer some open problems posed in <ref> [21] </ref>. In Section 2 we introduce the endpoint dominance problem, which is a subproblem of trapezoid decomposition. <p> Our results are summarized in Table 1. For all but the batched planar point location problem, no algorithms specifically designed for external memory were previously known. The batched planar point location algorithm that was previously known <ref> [21] </ref> only works when the planar subdivision is monotone, and the problems of triangulating a simple polygon and reporting intersections between other than orthogonal line segments are stated as open problems in [21]. <p> The batched planar point location algorithm that was previously known <ref> [21] </ref> only works when the planar subdivision is monotone, and the problems of triangulating a simple polygon and reporting intersections between other than orthogonal line segments are stated as open problems in [21]. For the sake of contrast, our results are also compared with modified internal-memory algorithms for the same problems. <p> EPD is a powerful tool for solving other important problems as we will illustrate in Section 2.1. As mentioned in the introduction a number of techniques for designing efficient I/O-efficient algorithms have been developed in recent years, including distribution sweeping, batch filtering <ref> [21] </ref> and buffer trees [4]. <p> For the other problems we are considering in this paper, the known internal-memory plane-sweep solutions cannot be stated as batched dynamic algorithms (since the updates depend on the queries) or else the elements involved are not totally ordered. In <ref> [21] </ref> a powerful external memory version of the plane-sweep paradigm called distribution sweeping is introduced. Unfortunately, direct application of distribution sweeping appears insufficient to solve EPD. In order to illustrate why distribution sweeping is inadequate for the task at hand, let us briefly review how it works. <p> All K queries can be processed through the tree at once using a technique similar to batch filtering <ref> [21] </ref>, in which all queries are pushed through a given level of the tree before moving on to the next level. 9 Unfortunately, the simple approach outlined in the preceding paragraph is not efficient. There are two problems that have to be dealt with. <p> As a final direct application of our algorithm for EPD we consider the multi-point planar point location problem. This is the problem of reporting the location of K query points in a planar subdivision defined by N line segments. In <ref> [21] </ref> an O ((n+k) log m n)-I/O algorithm for this problem is given for monotone subdivisions of the plane. Using Theorem 1 we can immediately extended the result to arbitrary planar subdivisions. <p> Because T r and T b are sorted, we can locate interactions between long and short segments using the distribution-sweeping algorithm used to solve the orthogonal segment intersection problem in <ref> [21] </ref>. We use the algorithm twice and treat long segments of one color as horizontal segments and short segments of the other color as vertical segments. We sketch the algorithm for long red and blue short segments (details can be found in [21]); We sweep from top to bottom by scanning <p> to solve the orthogonal segment intersection problem in <ref> [21] </ref>. We use the algorithm twice and treat long segments of one color as horizontal segments and short segments of the other color as vertical segments. We sketch the algorithm for long red and blue short segments (details can be found in [21]); We sweep from top to bottom by scanning through the sorted list of red segments and blue endpoints T r .
Reference: [22] <author> L. M. Haas and W. F. Cody. </author> <title> Exploiting extensible dbms in integrated geographic information systems. </title> <booktitle> In Proc. of Advances in Spatial Databases, LNCS 525, </booktitle> <year> 1991. </year>
Reference-contexts: Email: dev@cs.brown.edu. x Supported in part by the National Science Foundation under grant CCR-9007851 and by the U.S. Army Research Office under grant DAAH04-93-G-0076 and DAAH04-96-1-0013. Email: jsv@cs.duke.edu. Acronym for Basic Research in Computer Science, a Center of the Danish National Research Foundation. 1 mineral exploration <ref> [22] </ref>. In support of these applications, GIS systems store, manipulate, and search through enormous amounts of spatial data [18, 23, 32, 34].
Reference: [23] <author> R. Laurini and A. D. Thompson. </author> <title> Fundamentals of Spatial Information Systems. A.P.I.C. Series, </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: Army Research Office under grant DAAH04-93-G-0076 and DAAH04-96-1-0013. Email: jsv@cs.duke.edu. Acronym for Basic Research in Computer Science, a Center of the Danish National Research Foundation. 1 mineral exploration [22]. In support of these applications, GIS systems store, manipulate, and search through enormous amounts of spatial data <ref> [18, 23, 32, 34] </ref>.
Reference: [24] <author> H. G. Mairson and J. Stolfi. </author> <title> Reporting and counting intersections between two sets of line segments. </title> <editor> In R. Earnshaw (ed.), </editor> <booktitle> Theoretical Foundation of Computer Graphics and CAD, NATO ASI Series, </booktitle> <volume> Vol. F40, </volume> <pages> pages 307-326, </pages> <year> 1988. </year>
Reference-contexts: Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem <ref> [10, 13, 24, 28] </ref>. Two of these algorithms [13, 28] are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm.
Reference: [25] <author> M. H. Nodine and J. S. Vitter. </author> <title> Large-scale sorting in parallel memories. </title> <booktitle> In Proc. ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 29-39, </pages> <year> 1991. </year>
Reference-contexts: theory achieve asymptotic optimality [36] when D is very large, it is often the method of choice in practice for using parallel disks, especially when D is moderately sized [35]. 1.2 Previous Results in I/O-Efficient Computation Early work on I/O algorithms concentrated on algorithms for sorting and permutation related problems <ref> [1, 17, 25, 26, 36] </ref>. External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory. <p> In this paper we focus our attention on the single disk model. As described in Section 1.1, striping can be used to implement our algorithms on parallel disk systems with D &gt; 1. Additionally, techniques from <ref> [25] </ref> and [27] can be used to extend many of our results to parallel disk systems.
Reference: [26] <author> M. H. Nodine and J. S. Vitter. </author> <title> Deterministic distribution sort in shared and distributed memory multiprocessors. </title> <booktitle> In Proc. ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 120-129, </pages> <year> 1993. </year>
Reference-contexts: theory achieve asymptotic optimality [36] when D is very large, it is often the method of choice in practice for using parallel disks, especially when D is moderately sized [35]. 1.2 Previous Results in I/O-Efficient Computation Early work on I/O algorithms concentrated on algorithms for sorting and permutation related problems <ref> [1, 17, 25, 26, 36] </ref>. External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory.
Reference: [27] <author> M. H. Nodine and J. S. Vitter. </author> <title> Paradigms for optimal sorting with multiple disks. </title> <booktitle> In Proc. of the 26th Hawaii Int. Conf. on Systems Sciences, </booktitle> <year> 1993. </year>
Reference-contexts: In this paper we focus our attention on the single disk model. As described in Section 1.1, striping can be used to implement our algorithms on parallel disk systems with D &gt; 1. Additionally, techniques from [25] and <ref> [27] </ref> can be used to extend many of our results to parallel disk systems.
Reference: [28] <author> L. Palazzi and J. Snoeyink. </author> <title> Counting and reporting red/blue segment intersections. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 709, </volume> <pages> pages 530-540, </pages> <year> 1993. </year>
Reference-contexts: As mentioned, the red-blue line segment intersection problem is of special interest because it is an abstraction of the important map-overlay problem, which is the core of several vector-based GISs <ref> [2, 3, 28] </ref>. Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem [10, 13, 24, 28]. <p> Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem <ref> [10, 13, 24, 28] </ref>. Two of these algorithms [13, 28] are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm. <p> Although a time-optimal internal-memory algorithm for the general intersection problem exists [12], a number of simpler solutions have been presented for the red-blue problem [10, 13, 24, 28]. Two of these algorithms <ref> [13, 28] </ref> are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm. The authors of [28] claim that their algorithm will perform well with inadequate internal memory owing to the fact that data are mostly referenced sequentially. <p> Two of these algorithms [13, 28] are not plane-sweep algorithms, but both sort segments of the same color in a preprocessing step with a plane-sweep algorithm. The authors of <ref> [28] </ref> claim that their algorithm will perform well with inadequate internal memory owing to the fact that data are mostly referenced sequentially.
Reference: [29] <author> Y. N. Patt. </author> <title> The I/O subsystem | a candidate for improvement. Guest Editor's Introduction in IEEE Computer, </title> <booktitle> 27(3) </booktitle> <pages> 15-16, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction The Input/Output communication between fast internal memory and slower external storage is the bottleneck in many large-scale applications. The significance of this bottleneck is increasing as internal computation gets faster, and especially as parallel computing gains popularity <ref> [29] </ref>. Currently, technological advances are increasing CPU speeds at an annual rate of 40-60% while disk transfer rates are only increasing by 7-10% annually [31].
Reference: [30] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: As know techniques fails to solve EPD optimally we are led instead to other approaches as discussed in the next section. 2.3 External-Memory Segment Trees The segment tree <ref> [9, 30] </ref> is a well-known dynamic data structure used to store a set of segments in one dimension, such that given a query point all segments containing the point can be found efficiently. Such queries are called stabbing queries.
Reference: [31] <author> C. Ruemmler and J. Wilkes. </author> <title> An introduction to disk drive modeling. </title> <journal> IEEE Computer, </journal> <volume> 27(3) </volume> <pages> 17-28, </pages> <year> 1994. </year>
Reference-contexts: The significance of this bottleneck is increasing as internal computation gets faster, and especially as parallel computing gains popularity [29]. Currently, technological advances are increasing CPU speeds at an annual rate of 40-60% while disk transfer rates are only increasing by 7-10% annually <ref> [31] </ref>. Internal memory sizes are also increasing, but not nearly fast enough to meet the needs of important large-scale applications, and thus it is essential to consider the problem of minimizing I/O communication.
Reference: [32] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: Army Research Office under grant DAAH04-93-G-0076 and DAAH04-96-1-0013. Email: jsv@cs.duke.edu. Acronym for Basic Research in Computer Science, a Center of the Danish National Research Foundation. 1 mineral exploration [22]. In support of these applications, GIS systems store, manipulate, and search through enormous amounts of spatial data <ref> [18, 23, 32, 34] </ref>.
Reference: [33] <author> V. K. Vaishnavi and D. Wood. </author> <title> Rectilinear line segment intersection, layered segment trees, </title> <journal> and dynamization. Journal of Algorithms, </journal> <volume> 3 </volume> <pages> 160-176, </pages> <year> 1982. </year> <month> 21 </month>
Reference-contexts: To solve the first problem, we will take advantage of the internal memory that is available to us. The second problem is solved with a notion similar to fractional cascading [13, 14]. The idea behind fractional cascading on internal-memory segment trees <ref> [33] </ref> is that instead of searching for the same element in a number of sorted lists of different nodes, we augment the list at a node with sample elements from lists at the node's children.
Reference: [34] <author> M. van Kreveld. </author> <title> Geographic information systems. </title> <institution> Utrecht University, INF/DOC-95-01, </institution> <year> 1995. </year>
Reference-contexts: Army Research Office under grant DAAH04-93-G-0076 and DAAH04-96-1-0013. Email: jsv@cs.duke.edu. Acronym for Basic Research in Computer Science, a Center of the Danish National Research Foundation. 1 mineral exploration [22]. In support of these applications, GIS systems store, manipulate, and search through enormous amounts of spatial data <ref> [18, 23, 32, 34] </ref>. <p> As an illustration, the computation of new scenes or maps from existing information|also called map overlaying|is an important GIS operation. Some existing software packages are completely based on this operation <ref> [34] </ref>. Given two thematic maps (piecewise linear maps with, e.g., indications of lakes, roads, pollution level), the problem is to compute a new map in which the thematic attributes of each location is a function of the thematic attributes of the corresponding locations in the two input maps.
Reference: [35] <author> D. E. Vengroff and J. S. Vitter. </author> <title> I/O-efficient scientific computation using TPIE. </title> <booktitle> In Proc. IEEE Symp. on Parallel and Distributed Computing, </booktitle> <year> 1995. </year> <note> Appears also as Duke University Dept. of Computer Science technical report CS-1995-18. </note>
Reference-contexts: Even though disk striping does not in theory achieve asymptotic optimality [36] when D is very large, it is often the method of choice in practice for using parallel disks, especially when D is moderately sized <ref> [35] </ref>. 1.2 Previous Results in I/O-Efficient Computation Early work on I/O algorithms concentrated on algorithms for sorting and permutation related problems [1, 17, 25, 26, 36]. <p> External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory. Work has also been done on matrix algebra and related problems arising in scientific computation <ref> [1, 35, 36] </ref>. More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry [21] and graph theoretic computation [5, 16].
Reference: [36] <author> J. S. Vitter and E. A. M. Shriver. </author> <title> Algorithms for parallel memory, I: Two-level memories. </title> <journal> Algorithmica, </journal> <volume> 12(2-3):110-147, </volume> <year> 1994. </year> <month> 22 </month>
Reference-contexts: Large-scale problem instances can be in the range N = 10 10 to N = 10 12 . In order to study the performance of external-memory algorithms, we use the standard notion of I/O complexity <ref> [1, 36] </ref>. We define an input/output operation (or simply I/O for short) to be the process of reading or writing a block of data to or from the disk. The I/O complexity of an algorithm is simply the number of I/Os it performs. <p> An increasingly popular approach to further increase the throughput of I/O systems is to use a number of disks in parallel. The number D of disks range up to 10 2 in current disk arrays. One method of using D disks in parallel is disk striping <ref> [36] </ref>, in which the heads of the disks are moved synchronously, so that in a single I/O operation each disk reads or writes a block in the same location as each of the others. <p> In terms of performance, disk striping has the effect of using a single large disk with block size B 0 = DB. Even though disk striping does not in theory achieve asymptotic optimality <ref> [36] </ref> when D is very large, it is often the method of choice in practice for using parallel disks, especially when D is moderately sized [35]. 1.2 Previous Results in I/O-Efficient Computation Early work on I/O algorithms concentrated on algorithms for sorting and permutation related problems [1, 17, 25, 26, 36]. <p> theory achieve asymptotic optimality [36] when D is very large, it is often the method of choice in practice for using parallel disks, especially when D is moderately sized [35]. 1.2 Previous Results in I/O-Efficient Computation Early work on I/O algorithms concentrated on algorithms for sorting and permutation related problems <ref> [1, 17, 25, 26, 36] </ref>. External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory. <p> External sorting requires fi (n log m n) I/Os, 1 which is the external-memory equivalent of the well-known fi (N log N ) time bound for sorting in internal memory. Work has also been done on matrix algebra and related problems arising in scientific computation <ref> [1, 35, 36] </ref>. More recently, researchers have designed external-memory algorithms for a number of problems in different areas, such as in computational geometry [21] and graph theoretic computation [5, 16].
References-found: 36

