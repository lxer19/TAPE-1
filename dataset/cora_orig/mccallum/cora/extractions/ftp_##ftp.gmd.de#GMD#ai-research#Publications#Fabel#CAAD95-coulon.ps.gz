URL: ftp://ftp.gmd.de/GMD/ai-research/Publications/Fabel/CAAD95-coulon.ps.gz
Refering-URL: http://nathan.gmd.de/projects/fabel/fabel-pub2.html
Root-URL: 
Email: e-mail: coulon@gmd.de  
Title: Automatic Indexing, Retrieval and Reuse of Topologies in Architectual Layouts  
Author: C-H. Coulon 
Date: June 29, 1995  
Address: Schlo Birlinghoven, D-53754 Sankt Augustin, FRG,  
Affiliation: German National Research Center for Computer Science (GMD), Artificial Intelligence Research Division,  
Abstract: Former layouts contain much of the know-how of architects. A generic and automatic way to formalize this know-how in order to use it by a computer would save a lot of effort and money. However, there seems to be no such way. The only access to the know-how are the layouts themselves. Developing a generic software tool to reuse former layouts you cannot consider every part of the architectual domain or things like personal style. Tools used today only consider small parts of the architectual domain. Any personal style is ignored. Isn't it possible to build a basic tool which is adjusted by the content of the former layouts, but may be extended incremently by modeling as much of the domain as desirable? This paper will describe a reuse tool to perform this task focusing on topological and geometrical binary relations.
Abstract-found: 1
Intro-found: 1
Reference: [ Babel and Tinhofer, 1990 ] <author> L. Babel and G. Tinhofer. </author> <title> A branch and bound algorithm for the maximum clique problem. </title> <booktitle> ZOR Methods and Models of Operations-Research, </booktitle> <volume> 34 </volume> <pages> 207-217, </pages> <year> 1990. </year>
Reference-contexts: This is done by computing an edge graph representation of the layout and of the query and searching for their largest common subgraph. In order to solve a similar problem, the problem of finding a maximum clique of a graph, various algorithms have been developed <ref> [ Babel and Tinhofer, 1990 ] </ref> . A clique is a completely connected subpart of a graph (every node knows every other).
Reference: [ Barrow and Burstall, 1976 ] <author> H. G. Barrow and R. M. Burstall. </author> <title> Subgraph isomorphism relational structures and maximal cliques. </title> <journal> Information Processing Letters, </journal> <volume> 4 </volume> <pages> 83-84, </pages> <year> 1976. </year>
Reference-contexts: Instead of searching for a common subgraph of two graphs one searches for a maximum clique in another graph that represents all possible matchings between the two graphs, called their "combination graph". A maximum clique is the largest of all cliques of a graph. Using the transformation described in <ref> [ Barrow and Burstall, 1976 ] </ref> the nodes of the combination graph represent all matchings of nodes of equal types of the source graphs. Figure 8 shows an example.
Reference: [ Bartsch-Sporl and Tammer, 1994 ] <author> B. Bartsch-Sporl and E.-C. </author> <title> Tammer. Graph-based approach to structural similarity. </title> <editor> In A. Vo, editor, </editor> <booktitle> Similarity concepts and retrieval methods, </booktitle> <pages> pages 45-58. </pages> <address> GMD, Sankt Augustin, </address> <year> 1994. </year>
Reference-contexts: By using the context it is also possible to determine which B&lt;A d of case 2 correspond to the B&lt;A d of the query. TOPO represents the context in a graph as suggested by <ref> [ Bartsch-Sporl and Tammer, 1994 ] </ref> . Building a graph out of objects and relations, one must decide what should be the nodes and what the edges. Depending on this decision different parts of two similar situations can be identified (Figure 6).
Reference: [ Borner, 1994 ] <author> K. Borner. </author> <title> Structural similarity as guidance in case-based design. </title> <editor> In S. Wess, K.-D. Althoff, and M. M. Richter, editors, </editor> <booktitle> Topics in Case-Based Reasoning: Selected Papers from the First European Workshop on Case-Based Reasoning (EWCBR-93), volume 837 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 197-208. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Instead of comparing all possible subparts a future version of our algorithm will match those abstract elements. The used knowledge will be similar to part of the knowledge used in <ref> [ Borner, 1994 ] </ref> . The difference is that in our approach the content of such abstract chains is not restricted. 6 Comparison to other approaches There are two main features which separate Topo from former concepts to support the layout. 1. Topo uses no domain specific knowledge.
Reference: [ Bron and Kerbosch, 1973 ] <author> C. Bron and J. Kerbosch. </author> <title> Finding all cliques in an undirected graph. </title> <journal> Communications of the ACM, </journal> <volume> 16 </volume> <pages> 575-577, </pages> <year> 1973. </year>
Reference-contexts: The maximum clique in this combination graph and the corresponding maximum subgraphs are marked in black. 4.1.1 A common maximum clique algorithm The algorithm of <ref> [ Bron and Kerbosch, 1973 ] </ref> (for further use called "max-clique BK ") finds all cliques in a graph by enumerating and extending all complete subgraphs.
Reference: [ Coulon et al., 1993 ] <author> C.-H. Coulon, F. van Harmelen, W. Karbach, and A. Vo. </author> <title> Controlling gene rate & test in any time. </title> <booktitle> In Proceedings of GWAI-92, volume 671 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 304-306, </pages> <address> Berlin, 1993. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: possible clique depends on the minimum of the number of relations of the case and the query for each type of relation occurring in the query: X t2T ypesofquerymin (#relations typet (query); #relations typet (case)) Reflective knowledge: The algorithm estimates its own runtime till completion before and du ring running <ref> [ Coulon et al., 1993 ] </ref> . If the runtime is higher than a threshold it asks the user for a strategy in order to reduce the problem. <p> This knowledge will be acquired and added as described in <ref> [ Coulon et al., 1993 ] </ref> . For some of the comparisons the measured runtime was exponentially higher than expected. In these cases the query and the case had chains consisting of identical links.
Reference: [ Coulon, 1995 ] <author> C.-H. Coulon. </author> <title> Automatic Indexing, Retrieval and Reuse of Topologies in Complex Designs. </title> <booktitle> In Proceeding International Conference on Computing in Civil and Building Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: Figure 8 shows an example. As mentioned before we decided to match the topological relations instead of the objects themselves, for reasons described in <ref> [ Coulon, 1995 ] </ref> . Therefore the nodes of the combination graph shown in figure 8 represent all matchings between the relations of the source graph of equal type. The source graphs (f) and (g) contain objects of types a and b connected by directed relations.
Reference: [ et al., 1994 ] <author> V. et al. </author> <title> Retrieval of similar layouts about a very hybrid approach in FABEL. </title> <editor> In J. Gero and F. Sudweeks, editors, </editor> <booktitle> AI in Design'94, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <pages> pages 625-640, </pages> <address> Dordrecht, </address> <year> 1994. </year>
Reference-contexts: After completing the implementation Topo will be integrated in the next prototype of the project FABEL <ref> [ et al., 1994 ] </ref> . In order to test the general applicability it will be tested in different domains of architecture and building engineering. Acknowledgement This research was supported by the German Ministry for Research and Technology (BMFT) within the joint project FABEL under contract no. 01IW104.
Reference: [ Gero and Sudweeks, 1994a ] <editor> J. Gero and F. Sudweeks. </editor> <booktitle> Ai in design. In AI in Design, </booktitle> <address> Lausanne, Switzerland, </address> <year> 1994. </year>
Reference-contexts: Topo uses no domain specific knowledge. It is therefore applicable to all parts of the layout domain. This feature separates Topo from all concepts, which need some kind of model of the domain in order to give any support <ref> [ Gero and Sudweeks, 1994a ] </ref> . The only precondition is, that the layout must be represented in an object oriented way. 2. Topo uses arbitrary layouts for support. It needs no manual modification of former layouts.
Reference: [ Gero and Sudweeks, 1994b ] <editor> J. Gero and F. Sudweeks. </editor> <booktitle> Ai in design. In AI in Design, pages 75-180,609 - 658, </booktitle> <address> Lausanne, Switzerland, </address> <year> 1994. </year>
Reference-contexts: Topo uses arbitrary layouts for support. It needs no manual modification of former layouts. Other concepts which use former layouts need a collection of small specialized situations, cut out of complete layouts, because they cannot find the matching subpart themselves <ref> [ Gero and Sudweeks, 1994b ] </ref> . The result of Topo is a layout which is as good as the used former layout. Due to the lack of domain knowledge no further guarantees can be given.
Reference: [ Lee and Hsu, 1992 ] <author> S.-Y. Lee and F.-J. Hsu. </author> <title> Spatial reasoning and similarity retrieval of images using 2D C-string knowledge representation. </title> <journal> Pattern Recognition, </journal> <volume> 25 </volume> <pages> 305-318, </pages> <year> 1992. </year>
Reference-contexts: The type of a relation is determined by the type of the involved objects and their 3-dimensional relation (Figure 3). The six shown and their opposites. The symbolical representation is like the common representation used in the field of pattern recognition <ref> [ Lee and Hsu, 1992 ] </ref> . In order to use them to reconstruct the position of objects some of them are extended by the parameter d which determines the distance marked in the figure. A 2-dimensional view of an 3-dimensional example is shown in Figure 4.
Reference: [ Russell and Zilberstein, 1991 ] <author> S. Russell and S. Zilberstein. </author> <title> Composing real-time systems. </title> <booktitle> In Pro ceedings of the 12th International Joint Conference on Artificial Intelligence, Sydney, Australia, </booktitle> <volume> volume 1, </volume> <pages> pages 212 - 217, </pages> <address> San Mateo, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: is practically very efficient, but has still an exponential complexity, it provides in addition several features for controlling the runtime: Anytime behaviour: The algorithm can be interrupted by the user at any time and the quality of the result is always better than or equal to the best earlier result <ref> [ Russell and Zilberstein, 1991 ] </ref> . Transparency: In order to help the user to decide if and at which moment he might interrupt the process, TOPO visualizes three indicators during runtime: The progress indicator shows how much of the search space has already beensearched.
References-found: 12

