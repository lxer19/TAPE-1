URL: ftp://ftp.eecs.umich.edu/groups/gasm/iasmabst.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: marcmaia@dcc.ufmg.br  vladimir@dcc.ufmg.br  bigonha@dcc.ufmg.br  
Phone: 2  3  
Title: Interacting Abstract State Machines  
Author: Marcelo de Almeida Maia Vladimir Oliveira Di Iorio and Roberto da Silva Bigonha 
Address: Ouro Preto, Brazil,  Vicosa, Brazil,  Minas Gerais, Brazil,  
Affiliation: 1 Universidade Federal de  Universidade Federal de  Universidade Federal de  
Abstract: In this work we propose an extension to the original model of Abstract State Machines. We focus on the modularization support and on the explicit interaction abstraction between the modules (units of specification). We provide the new language syntax and semantics, and also the specification of the Alternating Bit Protocol using the proposed method. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> K. A. Bartlett, R. A. Scantlebury, and P. T. Wilkinson. </author> <title> A Note on Reliable Full-Duplex transmission over Half-Duplex Links. </title> <journal> Communications of the ACM, </journal> <volume> 12(5) </volume> <pages> 260-261, </pages> <month> May </month> <year> 1969. </year>
Reference-contexts: This value can be used by the internal rules. 4 An example The Alternating Bit Protocol In this section we show a more elaborated example: the specification of the Alternating Bit Protocol <ref> [1] </ref>. The problem consists of transmitting messages through an unreliable channel. The channel delivers messages in the same order they were sent, but can occasionally loose some of them. The specification is composed of three main unit definitions: Sender, Receiver and Channel.
Reference: 2. <author> G. Berry and G. Boudol. </author> <title> The Chemical Abstract Machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 96(1) </volume> <pages> 217-248, </pages> <year> 1992. </year>
Reference-contexts: In the context of ASMs, there is already some work in the direction of pro-viding them with some kind of horizontal abstraction. Glavan and Rosenzweig developed a theory of concurrency [3] that enables the encoding of some traditional calculus as the calculus [9] and the Chemical Abstract Machine <ref> [2] </ref>. However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work.
Reference: 3. <author> P. Glavan and D. Rosenzweig. </author> <title> Communicating Evolving Algebras. </title> <editor> In E. Borger, H. Kleine Buning, G. Jager, S. Martini, and M. M. Richter, editors, </editor> <booktitle> Computer Science Logic, volume 702 of Lecture Notes in Computer Science, </booktitle> <pages> pages 182-215. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: In the context of ASMs, there is already some work in the direction of pro-viding them with some kind of horizontal abstraction. Glavan and Rosenzweig developed a theory of concurrency <ref> [3] </ref> that enables the encoding of some traditional calculus as the calculus [9] and the Chemical Abstract Machine [2]. However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work.
Reference: 4. <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 9-36. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: The most powerful resource to achieve these goals is modularity, which is based upon abstraction and information hiding and it is the only effective way to break down the complexity of large systems. Even though Abstract State Machines <ref> [4] </ref> support abstraction and information hiding, we advocate more powerful abstraction mechanisms. <p> This idea can be thought as a better development of the concept of external functions <ref> [4] </ref>, because the approach provides some environment behavior formalization. It is not necessary to know how the environment behaves internally, but it is necessary to know how it interacts with the system being specified. <p> Whenever readability is not impaired, we give a translational semantics that maps a syntactic domain corresponding to the IASM constructions into the original ASM language defined by Gurevich <ref> [4] </ref>. Whenever the translational semantics turns to be quite complicated we will prefer to give informal semantics, while giving precise definitions about the meaning of the IASM language.
Reference: 5. <author> J. Huggins and R. Mani. </author> <title> The evolving algebra interpreter version 2.0. Manual of the interpreter (http://www.eecs.umich.edu/gasm). </title>
Reference-contexts: false; if waiting (LoosingInQueue) then queue := tail (queue); waiting (LoosingInQueue) := false; if msg = undef and queue &lt;&gt; nil then msg = first (head (queue)); bit = second (head (queue)); queue := tail (queue); endif; end unit This protocol has been previously formalized using the ASM method in <ref> [5] </ref>. In that work, the behaviour of the communication channel was not clearly defined. It was necessary to write identical code for both the communication sender receiver and receiver-sender. For the sake of space economy we will not specify the environment units ClientSender, ClientReceiver, Timer, and Loose.
Reference: 6. <author> M. Maia and R. Bigonha. </author> <title> The Formal Specification of the Interactive Abstract State Machine Language. </title> <type> Technical Report 005/98, </type> <institution> Universidade Federal de Minas Gerais, Brazil, </institution> <year> 1998. </year> <note> http://www.dcc.ufmg.br/~marcmaia/iasmformal.ps.gz. </note>
Reference-contexts: Whenever the translational semantics turns to be quite complicated we will prefer to give informal semantics, while giving precise definitions about the meaning of the IASM language. The interested reader may find the complete translational semantics in <ref> [6] </ref>. 3.1 Unit Definition The U compilation scheme translate unit definitions and is defined as: U , U mod : IASM CON ST RU CT ION S ! ASM RU LES U [[ U 1 ; : : : U n ]] = i=1 U mod [[U i ]] module U
Reference: 7. <author> W. </author> <month> May. </month> <title> Specifying Complex and Structured Systems with Evolving Algebras. </title> <booktitle> In TAPSOFT'97: Theory and Practice of Software Development, 7th International Joint Conference CAAP/FASE, number 1214 in LNCS, </booktitle> <pages> pages 535-549. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work. May <ref> [7] </ref> has developed a work with the same aims as ours, and although it provides some form of encapsulation and information hiding, the usual modularization concepts must be further added to the model. The explicit message passing encoding is not considered too.
Reference: 8. <author> B. Meyer. </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1997. </year>
Reference-contexts: An argument to support this view can be found in <ref> [8] </ref>, where are defined some desired characteristics for good modularization mechanisms such as modular compos-ability, modular decomposability, modular understandability, modular continuity and modular protection. Considering these characteristics, a central theme that affects directly each one of them is the specification of how software modules interact with each other.
Reference: 9. <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: In the context of ASMs, there is already some work in the direction of pro-viding them with some kind of horizontal abstraction. Glavan and Rosenzweig developed a theory of concurrency [3] that enables the encoding of some traditional calculus as the calculus <ref> [9] </ref> and the Chemical Abstract Machine [2]. However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work.
References-found: 9

