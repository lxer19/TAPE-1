URL: file://ftp.cis.ohio-state.edu/pub/hpce/compiler/Papers/LCPC94-incremental.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~chh/Publication/compiler-papers.html
Root-URL: 
Title: Incremental Generation of Index Sets for Array Statement Execution on Distributed-Memory Machines  
Author: S. D. Kaushik, C.-H. Huang, and P. Sadayappan 
Keyword: Array statements, Distributed-memory machine, High Per formance Fortran, Data distribution, Data communication.  
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: In compiling array statements for distributed-memory machines, efficient generation of local index sets and communication sets is important. Several techniques for enumerating these sets for block- cyclically distributed arrays have been presented in the literature. When sufficient compile-time information is not available, generation of the structures which facilitate efficient enumeration of these sets, is performed at run-time. In this paper, we address the incremental generation of local index sets and communication sets to reduce the runtime cost of array statement execution. We develop techniques for performing the incremental generation using the virtual processor approach for execution of array statements involving block-cyclically distributed arrays. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> F. Bodin, P. Beckman, D. Gannon, S. Yang, S. Kesavan, A. Malony, and B. Mohr. </author> <title> Implementing a parallel C++ runtime system for scalable parallel systems. </title> <booktitle> In Supercomputing '93, </booktitle> <pages> pages 588-597, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Languages such as High Performance Fortran (HPF) [5], Fortran-D [6], Vienna Fortran [3], and pC++ <ref> [1] </ref> provide a programming environment which allows annotation of single address space programs with distribution directives specifying the mapping of arrays to processors on a distributed-memory machine. The compiler is responsible for partitioning the arrays and generating node code for the annotated program.
Reference: 2. <author> D. Burton. </author> <title> Elementary Number Theory. </title> <publisher> Allyn and Bacon, Inc, </publisher> <address> Boston, </address> <note> revised printing edition, </note> <year> 1984. </year>
Reference-contexts: Hence, a virtual processor v is active if gcd (s; P fl b)j (v l) and the first element of the intersection lies in the array section <ref> [2] </ref>. The first element can be found by solving the Diophantine equation i fl s c fl P fl b = v l. Let i 1 and c 1 be the solution such that i 1 is the smallest non-negative integer for which the corresponding c 1 is non-negative. <p> The general solution to a solvable linear Diophantine equation vb ks = m + l is found as follows. Let g 1 = gcd (s; b) = u 1 bk 1 s, where u 1 ; k 1 , and g 1 are found using the extended Euclid algorithm <ref> [2] </ref>. The parameterized solution for v is given by v = m+l g 1 u 1 s the smallest non-negative solution for v. Then the set of virtual processors (v f : V P : s g 1 ) are solutions to the equation vb ks = m + l.
Reference: 3. <author> B. M. Chapman, P. Mehrotra, and H. P. Zima. </author> <title> Vienna Fortran a Fortran language extension for distributed memory multiprocessors. </title> <editor> In J. Saltz and P. Mehrotra, editors, </editor> <booktitle> Language, Compilers and Runtime Environments for Distributed Memory Machines, </booktitle> <pages> pages 39-62. </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Languages such as High Performance Fortran (HPF) [5], Fortran-D [6], Vienna Fortran <ref> [3] </ref>, and pC++ [1] provide a programming environment which allows annotation of single address space programs with distribution directives specifying the mapping of arrays to processors on a distributed-memory machine. The compiler is responsible for partitioning the arrays and generating node code for the annotated program.
Reference: 4. <author> S. Chatterjee, J. R. Gilbert, F. J. E. Long, R. Schreiber, and S.-H. Teng. </author> <title> Generating local addresses and communication sets for data parallel programs. </title> <booktitle> In Proc. of ACM Symposium on Principles and Practices of Parallel Programming, </booktitle> <pages> pages 149-158, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Closed forms developed for block and cyclically distributed arrays are used in the virtual processor domain. The problem of local index set identification was addressed by Chatterjee et al. <ref> [4] </ref> using a finite-state machine (FSM) to traverse the local index space. Stichnoth et al. [11] address the problem of index set and processor set identification. The formulation proposed has similarities to an instance of the virtual processor approach. <p> The formulation proposed has similarities to an instance of the virtual processor approach. The implementation of the Fortran-D compiler at Rice University is being extended to handle arrays with block-cyclic distributions [9]. An approach similar to the FSM approach <ref> [4] </ref> for determining the local memory access sequence is used and efficient algorithms for computing the FSM for frequently occuring cases are presented. In general, all the schemes proposed in the literature require computation of additional information at runtime for the efficient execution of the array statements.
Reference: 5. <author> High Performance Fortran Forum. </author> <title> High Performance Fortran langauge specifica-tion version 1.0. </title> <type> Technical Report CRPC-TR92225, </type> <institution> Rice University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Languages such as High Performance Fortran (HPF) <ref> [5] </ref>, Fortran-D [6], Vienna Fortran [3], and pC++ [1] provide a programming environment which allows annotation of single address space programs with distribution directives specifying the mapping of arrays to processors on a distributed-memory machine.
Reference: 6. <author> G. Fox, S. Hiranandani, K. Kennedy, C Koelbel, U. Kremer, C.-W. Tseng, and M. Wu. </author> <title> Fortran-D Language Specification. </title> <type> Technical Report TR-91-170, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Languages such as High Performance Fortran (HPF) [5], Fortran-D <ref> [6] </ref>, Vienna Fortran [3], and pC++ [1] provide a programming environment which allows annotation of single address space programs with distribution directives specifying the mapping of arrays to processors on a distributed-memory machine. The compiler is responsible for partitioning the arrays and generating node code for the annotated program.
Reference: 7. <author> S. K. S. Gupta, S. D. Kaushik, C.-H. Huang, and P. Sadayappan. </author> <title> On compiling array expressions for efficient execution on distributed-memory machines. </title> <type> Technical Report OSU-CISRC-4/9-TR19, </type> <institution> Department of Computer and Information Science, The Ohio State University., </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Several approaches have addressed the efficient execution of array statements involving block-cyclically distributed arrays. A virtual processor approach to efficiently enumerate the data index sets and processor sets is presented in <ref> [7, 8] </ref>. The approach is based on viewing a block-cyclic distribution as a block (or cyclic) distribution on a set of virtual processors, which are cyclically (or block-wise) mapped to physical processors. Closed forms developed for block and cyclically distributed arrays are used in the virtual processor domain. <p> In this paper, we present methods for reusing previously calculated index and communication sets to reduce the runtime cost of calculating additional in-dex and communication sets. The methods are developed in the context of the virtual processor approach <ref> [7, 8] </ref>. For example, consider a portion of the code segment for red-black SOR in Fig. 1. Statement S1, can be expressed in terms of four simple array statements S1 1 , S1 2 , S1 3 , and S1 4 of the form shown in Eq. 1. <p> Since the send and receive data and processor sets are integral to the execution of array assignments, efficient schemes for enumerating these sets are important. For block and cyclic distributions, the send and receive data index and processor sets can be expressed as simple regular sections <ref> [7] </ref>. However, for block-cyclic distributions, these sets cannot be expressed as simple regular sections. In [7], a virtual processor approach is used to combine these forms for block-cyclic distributions. The code for statements involving multiple right hand side array sections is generated by repeating the simple array assignment. <p> For block and cyclic distributions, the send and receive data index and processor sets can be expressed as simple regular sections <ref> [7] </ref>. However, for block-cyclic distributions, these sets cannot be expressed as simple regular sections. In [7], a virtual processor approach is used to combine these forms for block-cyclic distributions. The code for statements involving multiple right hand side array sections is generated by repeating the simple array assignment. Let T 1 and T 2 be temporary arrays with identical distribution as A. <p> We now describe the virtual processor approach for handling block-cyclic distributions. 3 Virtual Processor Approach In this section, we briefly describe the virtual processor approach for efficient execution of array statements involving block-cyclically distributed arrays. For details the reader is referred to <ref> [8, 7] </ref>. For an array statement of the form B (l 2 : u 2 : s 2 ) = F (A (l 1 : u 1 : s 1 )), the virtual processor approach involves: 1. <p> This conversion depends on the virtual views at the source and target block-cyclic distribution and is described in <ref> [7] </ref>. <p> Let c = c 1 s 1 + c 2 . As shown in <ref> [7] </ref>, we have V P Snd (S 1 ; v p ) = (l 2 + (i 1 : min (j 1 ; i 1 + s 2 V P Snd (S 2 ; v p ) = (l 2 + d + (i 0 1 ; i 0 lcm (s <p> The indices of all the array section slices sent by v p to v q can be determined as (k 1 : j 1 : lcm (s 1 ; P s )=s 2 ) (refer <ref> [7] </ref>).
Reference: 8. <author> S. K. S. Gupta, S. D. Kaushik, S. Mufti, S. Sharma, C.-H. Huang, and P. Sadayappan. </author> <title> On compiling array expressions for efficient execution on distributed-memory machines. </title> <booktitle> In Proc. of Intl. Conf. on Parallel Processing, vol-ume II, </booktitle> <pages> pages 301-305, </pages> <year> 1993. </year>
Reference-contexts: If the arrays have only block or cyclic distributions, then the data index sets and the processor sets can be characterized using regular sections for closed forms <ref> [8, 10] </ref>. However, for the general block-cyclic distribution, closed form characterization of these sets using simple regular sections is not possible. Several approaches have addressed the efficient execution of array statements involving block-cyclically distributed arrays. <p> Several approaches have addressed the efficient execution of array statements involving block-cyclically distributed arrays. A virtual processor approach to efficiently enumerate the data index sets and processor sets is presented in <ref> [7, 8] </ref>. The approach is based on viewing a block-cyclic distribution as a block (or cyclic) distribution on a set of virtual processors, which are cyclically (or block-wise) mapped to physical processors. Closed forms developed for block and cyclically distributed arrays are used in the virtual processor domain. <p> In this paper, we present methods for reusing previously calculated index and communication sets to reduce the runtime cost of calculating additional in-dex and communication sets. The methods are developed in the context of the virtual processor approach <ref> [7, 8] </ref>. For example, consider a portion of the code segment for red-black SOR in Fig. 1. Statement S1, can be expressed in terms of four simple array statements S1 1 , S1 2 , S1 3 , and S1 4 of the form shown in Eq. 1. <p> We now describe the virtual processor approach for handling block-cyclic distributions. 3 Virtual Processor Approach In this section, we briefly describe the virtual processor approach for efficient execution of array statements involving block-cyclically distributed arrays. For details the reader is referred to <ref> [8, 7] </ref>. For an array statement of the form B (l 2 : u 2 : s 2 ) = F (A (l 1 : u 1 : s 1 )), the virtual processor approach involves: 1.
Reference: 9. <author> S. Hiranandani, K. Kennedy, J. Mellor-Crummey, and A. Sethi. </author> <title> Advanced compi-lation techniques for Fortran D. </title> <type> Technical Report CRPC-TR-93-338, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Stichnoth et al. [11] address the problem of index set and processor set identification. The formulation proposed has similarities to an instance of the virtual processor approach. The implementation of the Fortran-D compiler at Rice University is being extended to handle arrays with block-cyclic distributions <ref> [9] </ref>. An approach similar to the FSM approach [4] for determining the local memory access sequence is used and efficient algorithms for computing the FSM for frequently occuring cases are presented.
Reference: 10. <author> C. Koelbel. </author> <title> Compile-time generation of communication for scientific programs. </title> <booktitle> In Supercomputing '91, </booktitle> <pages> pages 101-110, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: If the arrays have only block or cyclic distributions, then the data index sets and the processor sets can be characterized using regular sections for closed forms <ref> [8, 10] </ref>. However, for the general block-cyclic distribution, closed form characterization of these sets using simple regular sections is not possible. Several approaches have addressed the efficient execution of array statements involving block-cyclically distributed arrays.
Reference: 11. <author> J. M. Stichnoth. </author> <title> Efficient compilation of array statements for private memory multicomputers. </title> <type> Technical Report CMU-CS-93-109, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> Feb. </month> <year> 1993. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Closed forms developed for block and cyclically distributed arrays are used in the virtual processor domain. The problem of local index set identification was addressed by Chatterjee et al. [4] using a finite-state machine (FSM) to traverse the local index space. Stichnoth et al. <ref> [11] </ref> address the problem of index set and processor set identification. The formulation proposed has similarities to an instance of the virtual processor approach. The implementation of the Fortran-D compiler at Rice University is being extended to handle arrays with block-cyclic distributions [9].
References-found: 11

