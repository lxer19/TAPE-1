URL: http://www.cs.ucsd.edu/users/mihir/papers/2psr.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/complexity-papers.html
Root-URL: http://www.cs.ucsd.edu
Email: E-mail: mihir@cs.ucsd.edu  e-mail: feige@wisdom.weizmann.ac.il  e-mail: joe@research.nj.nec.com  
Title: On the Role of Shared Randomness in Two Prover Proof Systems  
Author: M. Bellare U. Feige J. Kilian 
Address: San Diego, 9500 Gilman Drive, La Jolla, CA 92093.  Rehovot 76100, Israel.  4 Independence Way, Princeton, NJ 08540, USA.  
Affiliation: Department of Computer Science Engineering, Mail Code 0114, University of California at  Department of Applied Mathematics and Computer Science, Weizmann Institute of Science,  NEC Research Institute,  
Date: January 1995  
Note: Appears in Proceedings of the Third Israel Symposium on Theory and Computing Systems, 1995.  
Abstract: In this paper we consider which aspects of the two prover model are necessary for their striking language recognition and zero-knowledge capabilities. We approach this question by looking at an alternative, more symmetric model which we call the double verifier model. We find that in this model the shared randomness of the verifiers is key to the language recognition power: if the verifiers don't share randomness the power is PSPACE; otherwise it is MIP = NEXPTIME. We find that the shared randomness of the provers is necessary for zero-knowledge: if the provers don't share randomness, statistical zero-knowledge These results have immediate implications for the standard two-prover model. We see that correlations between the verifier's queries is crucial for the language recognition power of two prover proofs. In particular, the natural analog of IP = AM does not hold in the two-prover model unless NEXPTIME = PSPACE. Similarly, we see that shared randomness, or correlation of the provers' answers, is necessary for the statistical zero-knowledge of two prover proofs. is only possible for languages in BPP NP ; else it is possible for all of NEXPTIME.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> Proceedings of the Seventeenth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1985. </year>
Reference-contexts: In Arthur-Merlin games <ref> [1, 2] </ref> the challenges are independently chosen random strings. But Goldwasser and Sipser [14] showed that the two models have the same language recognition power. A natural question, posed to us by Goldwasser, is whether this equivalence extends to two-prover interactive proof systems.
Reference: [2] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin Games: A Randomized Proof System, and a Hierarchy of Complexity Classes. </title> <journal> J. Computer and System Sciences 36, </journal> <pages> 254-276, </pages> <year> 1988. </year>
Reference-contexts: In Arthur-Merlin games <ref> [1, 2] </ref> the challenges are independently chosen random strings. But Goldwasser and Sipser [14] showed that the two models have the same language recognition power. A natural question, posed to us by Goldwasser, is whether this equivalence extends to two-prover interactive proof systems. <p> We begin by observing that if L 2 PSPACE then L has a double verifier interactive proof in which the verifiers are independent. Proposition 2.2 PSPACE DVIP iv . Proof: The standard model of one prover interactive proofs <ref> [13, 2] </ref> is a special case of double verifier interactive proofs. In this special case, the predicate accept (x; R V ; r 1 ; t 1 ; r 2 ; t 2 ) ignores the entries R V ; r 2 and t 2 .
Reference: [3] <author> L. Babai, L. Fortnow and C. Lund. </author> <title> Non-Deterministic Exponential Time has Two-Prover Interactive Protocols. </title> <booktitle> Proceedings of the Thirty First Annual Symposium on the Foundations of Computer Science, IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: Clearly if we allow V 1 and V 2 to communicate during the protocol we recover the two prover model. But, in fact, using the shared coins R V in lieu of this communication preserves the language recognition power of the model: it follows from <ref> [3] </ref> that the class DVIP of languages recognized with bounded error by double verifier proof systems equals the class MIP = NEXPTIME (cf. Proposition 2.3). Moreover, it follows from [7] that every language L 2 DVIP has a perfect zero-knowledge double verifier proof. <p> Using this shared random string, there exist perfect zero-knowledge proofs for all of NEXPTIME (combine <ref> [3] </ref> and [4]). In fact, there exist single-round perfect zero-knowledge proofs for all of NEXPTIME with an exponentially small error probability [10]. We note that all of the statistical zero-knowledge interactive proof systems constructed for two-provers use the shared random string in an essential way. <p> For the first, one can use the argument that MIP NEXPTIME, noting that it does indeed apply even when the error is unbounded. On the other hand, the protocol of <ref> [3] </ref> for NEXPTIME does not require the queries to one prover to depend on the answers of the other prover, and hence can be executed in the double verifier model. Details are omitted. <p> Details are omitted. Hence the double verifier model is as powerful as general multiprover models as long as we allow the verifiers to share coins. (It is instructive to think of how the verifiers run the protocol of <ref> [3] </ref> in the above and note that they do use their shared coins). When only a single round of interaction is allowed, it is easy to see that the standard two prover model and the double verifier model are the same. Thus results in the former translate to the latter. <p> Proof: Follows from [10] which in turn built on [17, 11, 7]. Details are omitted. When we disallow the shared coins, the language recognition power is unchanged for the unbounded error case: Proposition 2.5 DVIP u iv = NEXPTIME. Proof: The verifiers follow a <ref> [3] </ref> type proof system for NEXPTIME as indicated above, with V i using r i in the role of the shared coins. When they get together, they reject if r 1 6= r 2 . Else they accept iff the original protocol indicated that they should accept.
Reference: [4] <author> M. Ben-Or, S. Goldwasser, J. Kilian and A. Wigderson. </author> <title> Multi-Prover Interactive Proofs: How to Remove Intractability Assumptions. </title> <booktitle> Proceedings of the Twentieth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1988. </year>
Reference-contexts: Moreover this remains true even if the verifiers are allowed to communicate during the protocol, which will be important in Section 1.3.2. 1.3 Results in the standard model We now note the implications for the model of two provers communicating with a single verifier <ref> [4] </ref>. 1.3.1 Two Merlins are no better than one In the standard notion of interactive proof systems [13], the verifier's challenges to the prover are based on a set of private coins, and hence may be highly nonrandom and correlated. <p> Using this shared random string, there exist perfect zero-knowledge proofs for all of NEXPTIME (combine [3] and <ref> [4] </ref>). In fact, there exist single-round perfect zero-knowledge proofs for all of NEXPTIME with an exponentially small error probability [10]. We note that all of the statistical zero-knowledge interactive proof systems constructed for two-provers use the shared random string in an essential way.
Reference: [5] <author> M. Bellare and E. Petrank. </author> <title> Making Zero-Knowledge Provers Efficient. </title> <booktitle> Proceedings of the Twenty Fourth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1992. </year>
Reference-contexts: The proof of Theorem 1.2 makes use of the efficient, almost uniform generation primitive of <ref> [5] </ref>, and it is this that accounts for the BPP NP complexity. The primitive in question is a probabilistic, polynomial time procedure which given an NP oracle can output an element distributed almost uniformly at random in a set. <p> Finally, we denote by (P 1 ; P 2 ; V )(x) the distribution on the conversations generated by (P 1 ; P 2 ; V ) on input x. We use the efficient, almost uniform generation primitive of <ref> [5] </ref>. Suppose that D is samplable in polynomial time, and P is computable in polynomial time. Then if one is given an oracle for NP, the primitive in question allows ! P D to be approximately sampled in probabilistic polynomial time. <p> Thus, using the result of <ref> [5] </ref>, P fl 1 can be implemented in the desired time-bound. When S (x) is only guaranteed to run in expected polynomial time, the proof is greatly complicated. We first consider the approximate simulator S q (x), where q is a polynomial.
Reference: [6] <author> M. Burmester and Y. Desmedt. </author> <title> Broadcast interactive proofs. </title> <booktitle> Advances in Cryptology - Eurocrypt 91 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 547, </volume> <publisher> Springer-Verlag 1991. </publisher>
Reference-contexts: and given inputs 1 n and ffi &gt; 0, the procedure runs in time poly (n; log ffi 1 ), and outputs a random string from a distribution within (statistical) distance ffi of the uniform distribution on S " f0; 1g n . 1 1.4.4 Related models Burmester and Desmedt <ref> [6] </ref> have also put forth a model of interactive proof systems which features multiple verifiers. In their model, a single prover "broadcasts" to many verifiers. They are primarily concerned with efficiency issues for cryptographic applications. 2 Double Verifier Interactive Proofs We consider the class of double verifier proof systems.
Reference: [7] <author> C. Dwork, U. Feige, J. Kilian, M. Naor and M. Safra. </author> <title> Low communication 2-prover zero-knowledge proofs for NP. </title> <booktitle> Advances in Cryptology - Crypto 92 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 740, </volume> <publisher> Springer-Verlag, </publisher> <editor> E. Brickell, ed., </editor> <year> 1993. </year>
Reference-contexts: Proposition 2.3). Moreover, it follows from <ref> [7] </ref> that every language L 2 DVIP has a perfect zero-knowledge double verifier proof. Thus, we have found a more "symmetric" version of the two prover model which retains its power. 1.2 Results in the DV model We ask ourselves a pair of "dual" questions. <p> One cannot take away the verifier's random coin tosses, since NP is properly contained in NEXPTIME. There does not exist any nontrivial one-sided proof system in which each prover only sends a bit to the verifier <ref> [7] </ref>, though such proof systems exist if the one-sidedness condition is dropped. 1.4.2 The role of randomness in ZK proofs In the single prover model, it was shown by Goldreich and Oren [12] that removal of the randomness of either party trivializes a zero-knowledge proof system. <p> More specifically, only BPP languages can have single prover (computational) zero-knowledge proofs having either of the following properties: (i) the verifier is deterministic, (ii) the prover is deterministic. Dwork, Feige, Kilian, Naor and Safra <ref> [7] </ref> provide some lower bounds on the randomness in two prover, statistical zero-knowledge proofs. <p> We note that our result also holds for protocols that are only zero-knowledge with respect to an honest verifier; the lower-bound in <ref> [7] </ref> doesn't hold for this case. 1.4.3 Techniques Our concept of list strategies bares some similarity to a result of Lipton and Young [18] that in two player games, there exist almost optimal mixed strategies which are a combination of a logarithmic number of pure strategies, and hence that there are <p> Thus results in the former translate to the latter. In particular, we have the following. Proposition 2.4 Every L 2 NEXPTIME has a bounded error, perfect zero-knowledge, double verifier proof system with one round and exponentially small error. Proof: Follows from [10] which in turn built on <ref> [17, 11, 7] </ref>. Details are omitted. When we disallow the shared coins, the language recognition power is unchanged for the unbounded error case: Proposition 2.5 DVIP u iv = NEXPTIME.
Reference: [8] <author> P. Feldman. </author> <title> The optimal prover lives in PSPACE. </title> <type> Manuscript. </type>
Reference-contexts: Now each P fl i is a single prover trying to convince a polynomial time verifier in conjunction with T i x . But this is equivalent to a single-prover proof system with input (x; T i x ). Hence, by the result of <ref> [8] </ref> there exists an optimal P fl i [T i x ] that is computable in PSPACE on input (x; T i x ). 3.4 Eliminating the advice To complete the proof of Theorem 1.1, we show that useful (T 1 x ; T 2 x ) can be generated in
Reference: [9] <author> U. Feige, S. Goldwasser, L. Lov asz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> Proceedings of the Thirty Second Annual Symposium on the Foundations of Computer Science, IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: The motivation is that thereafter, reductions can be used in order to show hardness of approximation results for other problems, following the paradigm of <ref> [9] </ref>. In this context, parameters of the proof system are usually scaled down, so as to obtain NP-hardness results rather than the less interesting NEXPTIME-hardness results. In this context an implication of the difference between bounded and unbounded error for double independent verifiers is given by the following proposition.
Reference: [10] <author> U. Feige and J. Kilian. </author> <title> Two prover protocols Low error at affordable rates. </title> <booktitle> Proceedings of the Twenty Sixth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Using this shared random string, there exist perfect zero-knowledge proofs for all of NEXPTIME (combine [3] and [4]). In fact, there exist single-round perfect zero-knowledge proofs for all of NEXPTIME with an exponentially small error probability <ref> [10] </ref>. We note that all of the statistical zero-knowledge interactive proof systems constructed for two-provers use the shared random string in an essential way. It now becomes clear why this is so. We say that the provers in a two prover proof are independent if they don't share any randomness. <p> Thus results in the former translate to the latter. In particular, we have the following. Proposition 2.4 Every L 2 NEXPTIME has a bounded error, perfect zero-knowledge, double verifier proof system with one round and exponentially small error. Proof: Follows from <ref> [10] </ref> which in turn built on [17, 11, 7]. Details are omitted. When we disallow the shared coins, the language recognition power is unchanged for the unbounded error case: Proposition 2.5 DVIP u iv = NEXPTIME.
Reference: [11] <author> U. Feige, L. Lovasz. </author> <title> Two-prover one-round proof systems, their power and their problems. </title> <booktitle> Proceedings of the Twenty Fourth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1992. </year>
Reference-contexts: Thus results in the former translate to the latter. In particular, we have the following. Proposition 2.4 Every L 2 NEXPTIME has a bounded error, perfect zero-knowledge, double verifier proof system with one round and exponentially small error. Proof: Follows from [10] which in turn built on <ref> [17, 11, 7] </ref>. Details are omitted. When we disallow the shared coins, the language recognition power is unchanged for the unbounded error case: Proposition 2.5 DVIP u iv = NEXPTIME.
Reference: [12] <author> O. Goldreich and Y. Oren. </author> <title> Definitions and properties of zero-knowledge proof systems. </title> <journal> Journal of Cryptology Vol. </journal> <volume> 7, No. 1, </volume> <year> 1994. </year>
Reference-contexts: not exist any nontrivial one-sided proof system in which each prover only sends a bit to the verifier [7], though such proof systems exist if the one-sidedness condition is dropped. 1.4.2 The role of randomness in ZK proofs In the single prover model, it was shown by Goldreich and Oren <ref> [12] </ref> that removal of the randomness of either party trivializes a zero-knowledge proof system. More specifically, only BPP languages can have single prover (computational) zero-knowledge proofs having either of the following properties: (i) the verifier is deterministic, (ii) the prover is deterministic.
Reference: [13] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proofs. </title> <journal> SIAM J. Comput. </journal> <volume> 18 (1), </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: communicate during the protocol, which will be important in Section 1.3.2. 1.3 Results in the standard model We now note the implications for the model of two provers communicating with a single verifier [4]. 1.3.1 Two Merlins are no better than one In the standard notion of interactive proof systems <ref> [13] </ref>, the verifier's challenges to the prover are based on a set of private coins, and hence may be highly nonrandom and correlated. In Arthur-Merlin games [1, 2] the challenges are independently chosen random strings. <p> We begin by observing that if L 2 PSPACE then L has a double verifier interactive proof in which the verifiers are independent. Proposition 2.2 PSPACE DVIP iv . Proof: The standard model of one prover interactive proofs <ref> [13, 2] </ref> is a special case of double verifier interactive proofs. In this special case, the predicate accept (x; R V ; r 1 ; t 1 ; r 2 ; t 2 ) ignores the entries R V ; r 2 and t 2 .
Reference: [14] <author> S. Goldwasser and M. Sipser. </author> <title> Private coins versus public coins in interactive proof systems. Advances in Computing Research (ed. </title> <editor> S. </editor> <volume> Micali) Vol. 18, </volume> <year> 1989. </year>
Reference-contexts: In Arthur-Merlin games [1, 2] the challenges are independently chosen random strings. But Goldwasser and Sipser <ref> [14] </ref> showed that the two models have the same language recognition power. A natural question, posed to us by Goldwasser, is whether this equivalence extends to two-prover interactive proof systems. That is, suppose the verifier's questions are purely random.
Reference: [15] <author> R. Impagliazzo, L. Levin and M. Luby. </author> <title> Pseudo-Random Generation from One-Way Functions. </title> <booktitle> Proceedings of the Twenty First Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1989. </year> <month> 13 </month>
Reference-contexts: We denote by ACCEPT P V (x) the probability that 1 Note one can attain exponentially small error ffi in polynomial time. A primitive for the same task provided in <ref> [15] </ref> runs in time poly (n; ffi 1 ), so that one can only attain polynomially small error in polynomial time: this won't suffice for our application. 5 the verifiers accept in this interaction; the probability is over R V ; r 1 ; r 2 and the coins (shared and
Reference: [16] <author> J. Kilian. </author> <title> Strong separation models of multi-prover interactive proofs. </title> <journal> Analog Science Fic--tion, </journal> <note> to appear. </note>
Reference-contexts: We prove a number of results about this model and then translate them back into implications about the standard two prover model. 1.1 The double verifier model The double verifier (DV) model was suggested by <ref> [16] </ref>. It "separates" the verifier of the two prover model into a pair of verifiers, one for each prover. Thus the system consists of a pair V = (V 1 ; V 2 ) of verifiers and a pair P = (P 1 ; P 2 ) of provers.
Reference: [17] <author> D. Lapidot and A. Shamir. </author> <title> Fully Parallelized Multi-prover protocols for NEXP-time. </title> <booktitle> Proceedings of the Thirty Second Annual Symposium on the Foundations of Computer Science, IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: Thus results in the former translate to the latter. In particular, we have the following. Proposition 2.4 Every L 2 NEXPTIME has a bounded error, perfect zero-knowledge, double verifier proof system with one round and exponentially small error. Proof: Follows from [10] which in turn built on <ref> [17, 11, 7] </ref>. Details are omitted. When we disallow the shared coins, the language recognition power is unchanged for the unbounded error case: Proposition 2.5 DVIP u iv = NEXPTIME.
Reference: [18] <author> R. Lipton and N. Young. </author> <title> Simple Strategies for Large Zero-Sum Games with Applications to Complexity Theory. </title> <booktitle> Proceedings of the Twenty Sixth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: The proof of this theorem is the main technical contribution of this paper and uses the idea of representing a prover strategy by a short "list strategy" (See Section 1.4.3 for a discussion of the related techniques of <ref> [18] </ref>). 1.2.2 The power of independent provers We say that the provers are independent if they don't share any initial randomness R P . We note that as with other kinds of proof system, the optimal prover strategies in a double verifier proof are deterministic. <p> We note that our result also holds for protocols that are only zero-knowledge with respect to an honest verifier; the lower-bound in [7] doesn't hold for this case. 1.4.3 Techniques Our concept of list strategies bares some similarity to a result of Lipton and Young <ref> [18] </ref> that in two player games, there exist almost optimal mixed strategies which are a combination of a logarithmic number of pure strategies, and hence that there are almost optimal mixed strategy whose representation is logarithmic in the size of the largest mixed strategies. However, in the [18] case, the representation <p> Lipton and Young <ref> [18] </ref> that in two player games, there exist almost optimal mixed strategies which are a combination of a logarithmic number of pure strategies, and hence that there are almost optimal mixed strategy whose representation is logarithmic in the size of the largest mixed strategies. However, in the [18] case, the representation of the near optimal mixed strategy is polynomial in the size of representations of pure strategies, whereas in our case we derive near optimal mixed strategy whose representation is polylogarithmic in the size of pure strategies.
Reference: [19] <author> C. Lund, L. Fortnow, H. Karloff and N. Nisan. </author> <title> Algebraic Methods for Interactive Proof Systems. </title> <booktitle> Proceedings of the Thirty First Annual Symposium on the Foundations of Computer Science, IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: In this special case, the predicate accept (x; R V ; r 1 ; t 1 ; r 2 ; t 2 ) ignores the entries R V ; r 2 and t 2 . The result now follows from <ref> [21, 19] </ref>. When the verifiers make use of their shared randomness they can recognize all of NEXPTIME. Moreover, this is true for both the case of bounded error and the case of unbounded error.
Reference: [20] <author> E. Petrank. </author> <title> The hardness of approximation: Gap location. </title> <booktitle> Proceedings of the Second Israel Symposium on Theory and Computing Systems, </booktitle> <year> 1993. </year>
Reference-contexts: We omit the details. The context of approximation sheds more light on the effect of allowing or not allowing the verifiers to share a common random string. When the verifiers do share a random string the acceptance probability exhibits a gap which, in the terminology of <ref> [20] </ref>, is at location 1. Removing the shared random string moves the gap location to something very close to 0. But in both cases the ratio between the boundaries of the gap is exponential, so that approximating the acceptance probability within a multiplicative, exponential factor is NEXPTIME-hard.
Reference: [21] <author> A. Shamir. IP=PSPACE. </author> <booktitle> Proceedings of the Thirty First Annual Symposium on the Foundations of Computer Science, IEEE, </booktitle> <year> 1990. </year> <month> 14 </month>
Reference-contexts: In this special case, the predicate accept (x; R V ; r 1 ; t 1 ; r 2 ; t 2 ) ignores the entries R V ; r 2 and t 2 . The result now follows from <ref> [21, 19] </ref>. When the verifiers make use of their shared randomness they can recognize all of NEXPTIME. Moreover, this is true for both the case of bounded error and the case of unbounded error.
References-found: 21

