URL: http://www.cs.washington.edu/homes/wolf/papers/ijcai.ps
Refering-URL: http://www.cs.washington.edu/homes/wolf/
Root-URL: http://www.cs.washington.edu
Email: fwolf, weldg@cs.washington.edu  
Title: The LPSAT Engine its Application to Resource Planning Tracking Number: J768, Content Area: Challenge-8, Planning,
Author: Steven A. Wolfman Daniel S. Weld 
Note: Submitted to IJCAI'99  
Address: Box 352350 Seattle, WA 98195-2350 USA  
Affiliation: Department of Computer Science Engineering University of Washington,  
Abstract: Compilation to boolean satisfiability has become a powerful paradigm for solving AI problems. However, domains that require metric reasoning cannot be compiled efficiently to SAT even if they would otherwise benefit from compilation. We address this problem by introducing the lcnf representation which combines propositional logic with metric constraints. We present lpsat, an engine which solves lcnf problems by interleaving calls to an incremental simplex algorithm with systematic satisfaction methods. We describe the LiPSyNC compiler which converts metric resource planning problems into lcnf for processing by lpsat. The experimental section of the paper explores several optimizations to lpsat, including learning from constraint failure and randomized cutoffs. 
Abstract-found: 1
Intro-found: 1
Reference: [ Badros & Borning, 1998 ] <author> Badros, G. J., and Borning, A. </author> <year> 1998. </year> <title> The Cassowary Linear Arithmetic Constraint Solving Algorithm: Interface and Implementation. </title> <type> Technical Report 98-06-04, </type> <institution> University of Washington, Department of Computer Science and Engineering. </institution>
Reference-contexts: When lpsat adds the AllLoaded constraint to Cassowary's constraint set, Cassowary initially adds a "slack" version of the constraint which allows error and is thus trivially consistent with the current constraint set. This error is then minimized by the same routine used to minimize the overall objective function <ref> [ Badros & Borning, 1998 ] </ref> . In Figure 4, we show the minimization as a move from the initial solution at the upper left corner point to the solution at the upper right corner point of the shaded region. <p> This paper makes the following contributions: * We defined the lcnf formalism for combining boolean satisfiability with linear (in)equalities. * We implemented the lpsat solver for lcnf by combining the relsat satisfiability solver [ Bayardo & Schrag, 1997 ] with the Cassowary constraint rea soner <ref> [ Badros & Borning, 1998 ] </ref> . * We experimented with three optimizations for lpsat: adapting the splitting heuristic to trigger variables, adding random restarts, and incorporating learning and backjumping.
Reference: [ Bayardo & Schrag, 1997 ] <author> Bayardo, R., and Schrag, R. </author> <year> 1997. </year> <title> Using CSP look-back techniques to solve real-world SAT instances. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> 203-208. </pages> <address> Providence, R.I.: Menlo Park, Calif.: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The metric solver must support incremental modi fications to the constraint set. 3. Since Simplex reasoning is more expensive than sat-isfiability, the propositional solver should minimize modifications to the constraint set. These principles led us to implement the lpsat engine by modifying the relsat satisfiablity engine <ref> [ Bayardo & Schrag, 1997 ] </ref> and combining it with the Cassowary constraint solver [ Borning et al., 1997; Badros & Born-ing, 1998 ] using the method described in [ Nelson & Op-pen, 1979 ] . relsat makes an excellent start for processing lcnf for three reasons. <p> Figure 3 displays pseudocode for the resulting algorithm. 4 Incorporating Learning and Backjumping lpsat inherits methods for learning and backjumping from relsat <ref> [ Bayardo & Schrag, 1997 ] </ref> . lpsat's depth-first search of the propositional search space creates a 2 This restriction falls in line with the pure literal elimination rule if we consider the triggers themselves to be clauses. <p> Thus, given a propositional failure lpsat uses relsat's conflict set discovery mechanism unchanged, learning a set based on two of the clauses which led to the contradiction <ref> [ Bayardo & Schrag, 1997 ] </ref> . For a constraint conflict, however, lpsat identifies an inconsistent subset of the active constraints, and the propositional triggers for these constraint compose the conflict set. We examine two methods for identifying these inconsistent subsets. <p> This paper makes the following contributions: * We defined the lcnf formalism for combining boolean satisfiability with linear (in)equalities. * We implemented the lpsat solver for lcnf by combining the relsat satisfiability solver <ref> [ Bayardo & Schrag, 1997 ] </ref> with the Cassowary constraint rea soner [ Badros & Borning, 1998 ] . * We experimented with three optimizations for lpsat: adapting the splitting heuristic to trigger variables, adding random restarts, and incorporating learning and backjumping.
Reference: [ Blum & Furst, 1995 ] <author> Blum, A., and Furst, M. </author> <year> 1995. </year> <title> Fast planning through planning graph analysis. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1636-1642. </pages> <address> San Francisco, Calif.: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Blackbox uses a translate/solve/decode scheme for planning and satisfiability [ Kautz & Selman, 1998 ] . zeno is a causal link temporal planner which handled resources by calling an incremental Simplex algorithm within the plan-refinement loop [ Penberthy & Weld, 1994 ] . The Graphplan <ref> [ Blum & Furst, 1995 ] </ref> descendant ipp has also been extended to handle metric reasoning in its plan graph [ Koehler, 1998 ] . sipe [ Wilkins, 1990 ] and oplan [ Currie & Tate, 1991 ] are industrial strength planners which include resource planning capabilities. 8 Conclusions and Future
Reference: [ Borning et al., 1997 ] <author> Borning, A., Marriott, K., Stuckey, P., and Xiao, Y. </author> <year> 1997. </year> <title> Solving linear arithmetic constraints for user interface applications. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on User Interface Software and Technology. </booktitle>
Reference-contexts: Since Simplex reasoning is more expensive than sat-isfiability, the propositional solver should minimize modifications to the constraint set. These principles led us to implement the lpsat engine by modifying the relsat satisfiablity engine [ Bayardo & Schrag, 1997 ] and combining it with the Cassowary constraint solver <ref> [ Borning et al., 1997; Badros & Born-ing, 1998 ] </ref> using the method described in [ Nelson & Op-pen, 1979 ] . relsat makes an excellent start for processing lcnf for three reasons.
Reference: [ Cook & Mitchell, 1997 ] <author> Cook, S., and Mitchell, D. </author> <year> 1997. </year> <title> Finding hard instances of the satisfiability problem: A survey. </title> <booktitle> Proceedings of the DIMACS Workshop on Satisfiabil-ity Problems 11-13. </booktitle>
Reference-contexts: See <ref> [ Cook & Mitchell, 1997 ] </ref> for a survey of satisfiability and [ Karloff, 1991 ] for a survey of linear programming. Our work was inspired by the idea of compiling probabilistic planning problems to majsat [ Majercik & Littman, 1998 ] .
Reference: [ Crawford & Auton, 1993 ] <author> Crawford, J., and Auton, L. </author> <year> 1993. </year> <title> Experimental results on the cross-over point in satis-fiability problems. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> 21-27. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI Press. </publisher>
Reference: [ Currie & Tate, 1991 ] <author> Currie, K., and Tate, A. </author> <year> 1991. </year> <title> O-plan: the open planning architecture. </title> <booktitle> Artificial Intelligence 52(1) </booktitle> <pages> 49-86. </pages>
Reference-contexts: The Graphplan [ Blum & Furst, 1995 ] descendant ipp has also been extended to handle metric reasoning in its plan graph [ Koehler, 1998 ] . sipe [ Wilkins, 1990 ] and oplan <ref> [ Currie & Tate, 1991 ] </ref> are industrial strength planners which include resource planning capabilities. 8 Conclusions and Future Work lpsat is a promising new technique that combines the strengths of fast satisfiability methods with an incremental Simplex algorithm to efficiently handle problems involving both propositional and metric reasoning.
Reference: [ Ernst, Millstein, & Weld, 1997 ] <author> Ernst, M., Millstein, T., and Weld, D. </author> <year> 1997. </year> <title> Automatic SAT-compilation of planning problems. </title> <booktitle> In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1169-1176. </pages> <address> San Francisco, Calif.: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: planning problems (encoded in the lpddl language), including a metric version of the ATT Logistics domain [ Kautz & Selman, 1996 ] . 1 Encoding each value as a separate boolean variable is a simple but unwieldy solution; bitwise-encodings produce smaller formulae but ones which appear very hard to solve <ref> [ Ernst, Millstein, & Weld, 1997 ] </ref> . LPDDLfl LCNFfl Valuefl Assgnfl Planfl Decoderfl LfliflPSflyflNCfl Compilerfl Solverfl LPSATfl ponents. <p> changes an object's value by the value of the expression, as in the equation object := object + expression; multiple simultaneous influences are cumulative in their effect [ Falkenhainer & Forbus, 1988 ] . 5.2 LiPSyNC Encoding LiPSyNC uses a regular action representation with explanatory frame axioms and conflict exclusion <ref> [ Ernst, Millstein, & Weld, 1997 ] </ref> . We adopt a standard fluent model in which time takes nonnegative integer values. State-fluents occur at even-numbered times and actions at odd times.
Reference: [ Falkenhainer & Forbus, 1988 ] <author> Falkenhainer, B., and For--bus, K. </author> <year> 1988. </year> <title> Setting up large scale qualitative models. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> 301-306. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI Press. </publisher> <editor> Reprinted in [ Weld & de Kleer, </editor> <year> 1989 </year> ] . 
Reference-contexts: An asserted influence changes an object's value by the value of the expression, as in the equation object := object + expression; multiple simultaneous influences are cumulative in their effect <ref> [ Falkenhainer & Forbus, 1988 ] </ref> . 5.2 LiPSyNC Encoding LiPSyNC uses a regular action representation with explanatory frame axioms and conflict exclusion [ Ernst, Millstein, & Weld, 1997 ] . We adopt a standard fluent model in which time takes nonnegative integer values.
Reference: [ Gomes, Selman, & Kautz, 1998 ] <author> Gomes, C., Selman, B., and Kautz, H. </author> <year> 1998. </year> <title> Boosting combinatorial search through randomization. </title> <booktitle> In Proceedings of the Fifteenth National Conference on Artificial Intelligence, </booktitle> <pages> 431-437. </pages> <address> Madison, WI: Menlo Park, Calif.: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Further experiments will decide the issue. 6.3 Random Restarts Because lpsat uses a randomized backtracking algorithm and because early experimental results showed a small percentage of runs far exceeded the median run-time, we experimented with random restarts using a process similar to the one described in <ref> [ Gomes, Selman, & Kautz, 1998 ] </ref> .
Reference: [ Jaffar et al., 1992 ] <author> Jaffar, J., Michaylov, S., Stuckey, P., and Yap, R. </author> <year> 1992. </year> <title> The CLP(R) Language and System. </title> <journal> ACM Transactions on Programming Languages and Systems 14(3) </journal> <pages> 339-395. </pages>
Reference-contexts: Other researchers have combined logical and constraint reasoning, usually in the context of programming languages. clpr may be thought of as an integration of Prolog and linear programming, and this work introduced the notion of incremental Simplex <ref> [ Jaffar et al., 1992 ] </ref> .
Reference: [ Karloff, 1991 ] <author> Karloff, H. </author> <year> 1991. </year> <title> Linear Programming. </title> <address> Boston: </address> <publisher> Birkhauser. </publisher>
Reference-contexts: See [ Cook & Mitchell, 1997 ] for a survey of satisfiability and <ref> [ Karloff, 1991 ] </ref> for a survey of linear programming. Our work was inspired by the idea of compiling probabilistic planning problems to majsat [ Majercik & Littman, 1998 ] .
Reference: [ Kautz & Selman, 1996 ] <author> Kautz, H., and Selman, B. </author> <year> 1996. </year> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> 1194-1201. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: SAT solving has become so successful that many other difficult tasks are being compiled into propositional form to be solved as SAT problems. For example, SAT-encoded solutions to graph coloring, planning, and circuit verification are among the fastest approaches to these problems <ref> [ Kautz & Selman, 1996; Selman, Kautz, & McAllester, 1997 ] </ref> . But many real-world tasks have a metric aspect. <p> Figure 1 shows how the components fit together. Their performance is impressive: together, LiPSyNC and lpsat solve large resource planning problems (encoded in the lpddl language), including a metric version of the ATT Logistics domain <ref> [ Kautz & Selman, 1996 ] </ref> . 1 Encoding each value as a separate boolean variable is a simple but unwieldy solution; bitwise-encodings produce smaller formulae but ones which appear very hard to solve [ Ernst, Millstein, & Weld, 1997 ] . <p> We report on a sequence of problems in the metric logistics domain, which includes all the features of the ATT logistics domain <ref> [ Kautz & Selman, 1996 ] </ref> : airplanes and trucks moving packages among cities and sites within cities. However, our metric version adds fuel and distances between cities; airplanes and trucks both have a maximum fuel capacity, consume fuel to move, and can refuel at depots.
Reference: [ Kautz & Selman, 1998 ] <author> Kautz, H., and Selman, B. </author> <year> 1998. </year> <title> Blackbox: A new approach to the application of theorem proving to problem solving. In AIPS98 Workshop on Planning as Combinatorial Search, </title> <type> 58-60. </type> <institution> Pittsburgh, Penn.: Carnegie Mellon University. </institution>
Reference-contexts: present a more thorough description of conflict set discovery and prove that our technique will return a minimal conflict set. 5 The Resource Planning Application In order to demonstrate lpsat's utility, we implemented the LiPSyNC compiler (starting from a base of ipp's [ Koehler et al., 1997 ] and Blackbox's <ref> [ Kautz & Selman, 1998 ] </ref> parsers) which translates resource planning problems into lcnf form. After lpsat solves the lcnf problem, a small decoding unit maps the resulting boolean and real-valued assignments into a solution plan (Figure 1). <p> Numerica extends this work by adding a variety of differential equation solvers to the mix [ Van Hentenryck, 1997 ] . Blackbox uses a translate/solve/decode scheme for planning and satisfiability <ref> [ Kautz & Selman, 1998 ] </ref> . zeno is a causal link temporal planner which handled resources by calling an incremental Simplex algorithm within the plan-refinement loop [ Penberthy & Weld, 1994 ] .
Reference: [ Koehler et al., 1997 ] <author> Koehler, J., Nebel, B., Hoffmann, J., and Dimopoulos, Y. </author> <year> 1997. </year> <title> Extending planning graphs to an ADL subset. </title> <booktitle> In Proceedings of the Fourth Euro-pean Conference on Planning, </booktitle> <pages> 273-285. </pages> <address> Berlin, Germany: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The long version of this paper will present a more thorough description of conflict set discovery and prove that our technique will return a minimal conflict set. 5 The Resource Planning Application In order to demonstrate lpsat's utility, we implemented the LiPSyNC compiler (starting from a base of ipp's <ref> [ Koehler et al., 1997 ] </ref> and Blackbox's [ Kautz & Selman, 1998 ] parsers) which translates resource planning problems into lcnf form. After lpsat solves the lcnf problem, a small decoding unit maps the resulting boolean and real-valued assignments into a solution plan (Figure 1).
Reference: [ Koehler, 1998 ] <author> Koehler, J. </author> <year> 1998. </year> <title> Planning under resource constraints. </title> <booktitle> In Proceedings of the Thirteenth European Conference on Artificial Intelligence, </booktitle> <pages> 489-493. </pages> <address> Chichester, UK: </address> <publisher> John Wiley & Sons. </publisher>
Reference-contexts: The Zeno system [ Penberthy & Weld, 1994 ] is more expressive than our system, but Zeno is unable even to complete easy-1, our simplest metric logistics problem. There are only a few results available for Koehler's metric ipp system <ref> [ Koehler, 1998 ] </ref> , and code is not yet available for direct comparisons. In light of this, this section concentrates on displaying results for lpsat in an interesting domain and on describing the heuristics and optimization we used to enhance lpsat's performance. <p> The Graphplan [ Blum & Furst, 1995 ] descendant ipp has also been extended to handle metric reasoning in its plan graph <ref> [ Koehler, 1998 ] </ref> . sipe [ Wilkins, 1990 ] and oplan [ Currie & Tate, 1991 ] are industrial strength planners which include resource planning capabilities. 8 Conclusions and Future Work lpsat is a promising new technique that combines the strengths of fast satisfiability methods with an incremental Simplex algorithm
Reference: [ Li & Anbulagan, 1997 ] <author> Li, C., and Anbulagan. </author> <year> 1997. </year> <title> Heuristics based on unit propagation for satisfiability problems. </title> <booktitle> In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 366-371. </pages> <address> San Fran-cisco, Calif.: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Majercik & Littman, 1998 ] <author> Majercik, S. M., and Littman, M. L. </author> <year> 1998. </year> <title> MAXPLAN: a new approach to probabilistic planning. </title> <booktitle> In Proceedings of the Fourth International Conference on Artificial Intelligence Planning Systems, </booktitle> <pages> 86-93. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: See [ Cook & Mitchell, 1997 ] for a survey of satisfiability and [ Karloff, 1991 ] for a survey of linear programming. Our work was inspired by the idea of compiling probabilistic planning problems to majsat <ref> [ Majercik & Littman, 1998 ] </ref> . It seemed that if one could extend the SAT "virtual machine" to support probabilistic reasoning, then it would be useful to consider the orthogonal extension to handle metric constraints.
Reference: [ McDermott, 1998 ] <author> McDermott, D. </author> <year> 1998. </year> <title> PDDL | The Planning Domain Definition Language. AIPS-98 Competition Committee, </title> <note> draft 1.6 edition. </note>
Reference-contexts: We believe that this translate/solve/decode architecture is effective for a wide variety of problems. 5.1 LPDDL Action Language Our planning problems are specified in an extension of the pddl language <ref> [ McDermott, 1998 ] </ref> ; we support pddl typing, equality, quantified goals and effects, disjunctive preconditions, and conditional effects. In addition, we handle metric values with two new built-in types: float and fluent.
Reference: [ Nelson & Oppen, 1979 ] <author> Nelson, G., and Oppen, D. C. </author> <year> 1979. </year> <title> Simplification by cooperating decision procedures. </title> <journal> ACM Transactions on Programming Languages and Systems 1(2) </journal> <pages> 245-257. </pages>
Reference: [ Penberthy & Weld, 1994 ] <author> Penberthy, J., and Weld, D. </author> <year> 1994. </year> <title> Temporal planning with continuous change. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: In order to make parallel actions arbitrarily serializable, we would have to adopt more restrictive exclusivity conditions and a less expressive format for our test statements. 6 Experimental Results There are currently few available metric planners with which to compare lpsat. The Zeno system <ref> [ Penberthy & Weld, 1994 ] </ref> is more expressive than our system, but Zeno is unable even to complete easy-1, our simplest metric logistics problem. <p> Blackbox uses a translate/solve/decode scheme for planning and satisfiability [ Kautz & Selman, 1998 ] . zeno is a causal link temporal planner which handled resources by calling an incremental Simplex algorithm within the plan-refinement loop <ref> [ Penberthy & Weld, 1994 ] </ref> . <p> Using minimal conflict sets to guide learning and backjumping pro vided four orders of magnitude speedup. * We implemented the LiPSyNC compiler for resource planning problems. Combined LiPSyNC and lpsat performance was much better than that of zeno <ref> [ Penberthy & Weld, 1994 ] </ref> . Much remains to be done. There are many ways we could improve LiPSyNC: improving its runtime by optimizing exclusion detection, exploring new exclusion encodings, optimizing the number of constraints used for influences, and improving our handling of conditional effects.
Reference: [ Saraswat, 1989 ] <author> Saraswat, V. A. </author> <year> 1989. </year> <title> Concurrent Constraint Programming Languages. </title> <type> Ph.D. Dissertation, </type> <institution> Carnegie-Mellon University, Computer Science Department. </institution>
Reference-contexts: Other researchers have combined logical and constraint reasoning, usually in the context of programming languages. clpr may be thought of as an integration of Prolog and linear programming, and this work introduced the notion of incremental Simplex [ Jaffar et al., 1992 ] . Saraswat's thesis <ref> [ Saraswat, 1989 ] </ref> formulates a family of programming languages which operate through the incremental construction of a constraint framework. chip [ Van Hentenryck, 1989 ] augments logic programming with the tools to efficiently solve constraint satisfaction problems (e.g., consistency checking), but deals only with variables over finite domains.
Reference: [ Selman, Kautz, & Cohen, 1996 ] <author> Selman, B., Kautz, H., and Cohen, B. </author> <year> 1996. </year> <title> Local search strategies for satisfiabil-ity testing. </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science 26 </booktitle> <pages> 521-532. </pages>
Reference: [ Selman, Kautz, & McAllester, 1997 ] <author> Selman, B., Kautz, H., and McAllester, D. </author> <year> 1997. </year> <title> Computational challenges in propositional reasoning and search. </title> <booktitle> In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 50-54. </pages> <address> San Francisco, Calif.: </address> <publisher> Morgan Kauf-mann. </publisher>
Reference-contexts: SAT solving has become so successful that many other difficult tasks are being compiled into propositional form to be solved as SAT problems. For example, SAT-encoded solutions to graph coloring, planning, and circuit verification are among the fastest approaches to these problems <ref> [ Kautz & Selman, 1996; Selman, Kautz, & McAllester, 1997 ] </ref> . But many real-world tasks have a metric aspect.
Reference: [ Van Hentenryck, 1989 ] <author> Van Hentenryck, P. </author> <year> 1989. </year> <title> Constraint Satisfaction in Logic Programming. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Saraswat's thesis [ Saraswat, 1989 ] formulates a family of programming languages which operate through the incremental construction of a constraint framework. chip <ref> [ Van Hentenryck, 1989 ] </ref> augments logic programming with the tools to efficiently solve constraint satisfaction problems (e.g., consistency checking), but deals only with variables over finite domains. Numerica extends this work by adding a variety of differential equation solvers to the mix [ Van Hentenryck, 1997 ] .
Reference: [ Van Hentenryck, 1997 ] <author> Van Hentenryck, P. </author> <year> 1997. </year> <title> Numer-ica: A modeling language for global optimization. </title> <booktitle> In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Numerica extends this work by adding a variety of differential equation solvers to the mix <ref> [ Van Hentenryck, 1997 ] </ref> . Blackbox uses a translate/solve/decode scheme for planning and satisfiability [ Kautz & Selman, 1998 ] . zeno is a causal link temporal planner which handled resources by calling an incremental Simplex algorithm within the plan-refinement loop [ Penberthy & Weld, 1994 ] .
Reference: [ Weld & de Kleer, 1989 ] <author> Weld, D., and de Kleer, J., eds. </author> <year> 1989. </year> <title> Readings in Qualitative Reasoning about Physical Systems. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Wilkins, 1990 ] <author> Wilkins, D. </author> <year> 1990. </year> <title> Can AI planners solve practical problems? Computational Intelligence 6(4) </title> <type> 232-246. </type>
Reference-contexts: The Graphplan [ Blum & Furst, 1995 ] descendant ipp has also been extended to handle metric reasoning in its plan graph [ Koehler, 1998 ] . sipe <ref> [ Wilkins, 1990 ] </ref> and oplan [ Currie & Tate, 1991 ] are industrial strength planners which include resource planning capabilities. 8 Conclusions and Future Work lpsat is a promising new technique that combines the strengths of fast satisfiability methods with an incremental Simplex algorithm to efficiently handle problems involving both
References-found: 28

