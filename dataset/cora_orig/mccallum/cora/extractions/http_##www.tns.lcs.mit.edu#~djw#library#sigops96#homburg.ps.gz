URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/homburg.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: fphilip,steen,astg@cs.vu.nl  
Title: An Architecture for A Wide Area Distributed System  
Author: Philip Homburg Maarten van Steen, Andrew S. Tanenbaum 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Birrell, G. Nelson, S. Owicki, and E. Wobber. </author> <title> Network Objects. </title> <booktitle> In Proc. 14th Symposium on Operating Systems Principles, </booktitle> <pages> pp. 217-230, </pages> <address> Asheville, North Carolina, </address> <month> December. </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: Spring [6] provides some flexibility with subcontracts but the interface presented to an application process is basically still a stub. Remote object systems like, for example CORBA [8], and Network Objects <ref> [1] </ref> provide the same functionality as an RPC based system: arguments are shipped to the (remote) object. A system that seems at first glance similar to ours is the combination of Fragmented Objects with SSP chains [9].
Reference: [2] <author> G. Brun-Cottan and M. Makpangou. </author> <title> Adaptable Replicated Objects in Distributed Environments. </title> <type> Technical Report 2593, </type> <institution> INRIA, Rocquencourt (France), </institution> <month> May. </month> <year> 1995. </year>
Reference-contexts: These bindings should be easy to cache or replicate, to modify, or to pass between processes. This means that they should be stored at locations independent of the named object, and independent of processes that use them. A distinction between semantics and replication objects is also made in <ref> [2] </ref>. The paper describes access objects, replicas and consistency managers. Access objects, replicas and consistency managers roughly correspond to our control, semantics, and replication objects, respectively. Our communication object is integrated with the consistency manager.
Reference: [3] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus Task-Parallel Runtime System. </title> <booktitle> In Proc. 1st Int'l Workshop on Parallel Processing, </booktitle> <pages> pp. 457-462. </pages> <publisher> Tata, </publisher> <year> 1994. </year>
Reference-contexts: Distributed systems that are object based include Spring, SOS, and Network Objects. The Globus project is developing basic software infrastructure for computations that integrate geographically distributed computational and information resources. Globus is based on Nexus <ref> [3] </ref>. Legion [5] has a similar goal, and is based on Mentat [4]. Both Globus and Legion are designed with high-performance computing in mind. As such they provide access to remote computing power. However, there is no, or only limited support for replication, migration and persistence of data.
Reference: [4] <author> A. S. Grimshaw. </author> <title> Easy to Use Object-Oriented Parallel Programming with Mentat. </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 3951, </pages> <month> May. </month> <year> 1993. </year>
Reference-contexts: Distributed systems that are object based include Spring, SOS, and Network Objects. The Globus project is developing basic software infrastructure for computations that integrate geographically distributed computational and information resources. Globus is based on Nexus [3]. Legion [5] has a similar goal, and is based on Mentat <ref> [4] </ref>. Both Globus and Legion are designed with high-performance computing in mind. As such they provide access to remote computing power. However, there is no, or only limited support for replication, migration and persistence of data.
Reference: [5] <author> A. S. Grimshaw, W. A. Wulf, J. C. French, A. C. Weaver, and P. F. Reynolds Jr. </author> <title> A Synopsis of the Legion Project. </title> <type> Technical Report CS-94-20, </type> <institution> University of Virginia, </institution> <month> June. </month> <year> 1994. </year>
Reference-contexts: Distributed systems that are object based include Spring, SOS, and Network Objects. The Globus project is developing basic software infrastructure for computations that integrate geographically distributed computational and information resources. Globus is based on Nexus [3]. Legion <ref> [5] </ref> has a similar goal, and is based on Mentat [4]. Both Globus and Legion are designed with high-performance computing in mind. As such they provide access to remote computing power. However, there is no, or only limited support for replication, migration and persistence of data.
Reference: [6] <author> G. Hamilton, M. Powell, and J. Mitchell. Subcontract: </author> <title> A Flexible Base for Distributed Programming. </title> <booktitle> In Proc. 14th Symp. on Operating Systems Principles, </booktitle> <address> Asheville, NC, </address> <month> December. </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: Most related systems provide remote operations on objects or servers that encapsulate an RPC mechanism. The disadvantage of this approach that they enforce a certain implementation of the remote operations: RPC systems (like DCE) always ship the arguments of a function to a remote server. Spring <ref> [6] </ref> provides some flexibility with subcontracts but the interface presented to an application process is basically still a stub. Remote object systems like, for example CORBA [8], and Network Objects [1] provide the same functionality as an RPC based system: arguments are shipped to the (remote) object.
Reference: [7] <author> M. Makpangou, Y. Gourhant, J.-P. Le Narzul, and M. Shapiro. </author> <title> Fragmented Objects for Distributed Abstractions. </title> <editor> In T. L. Casavant and M. Singhal, (eds.), </editor> <booktitle> Readings in Distributed Computing Systems, </booktitle> <pages> pp. 170-186. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: A system that seems at first glance similar to ours is the combination of Fragmented Objects with SSP chains [9]. Fragmented Objects, as described in <ref> [7] </ref> provide a similar model to the user of the object as our model. The internals of fragmented objects are however quite different: fragmented objects consist of fragments that communicate through connective objects. Connective objects can be communication channels or they can be fragmented objects themselves.
Reference: [8] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <note> version 2.0. OMG, </note> <month> July. </month> <year> 1995. </year>
Reference-contexts: Spring [6] provides some flexibility with subcontracts but the interface presented to an application process is basically still a stub. Remote object systems like, for example CORBA <ref> [8] </ref>, and Network Objects [1] provide the same functionality as an RPC based system: arguments are shipped to the (remote) object. A system that seems at first glance similar to ours is the combination of Fragmented Objects with SSP chains [9].
Reference: [9] <author> M. Shapiro. </author> <title> A Binding Protocol for Distributed Shared Objects. </title> <booktitle> In Proc. Int'l. Conf. on Distributed Computing Systems, </booktitle> <address> Poznan (Poland), </address> <month> June. </month> <year> 1994. </year>
Reference-contexts: Remote object systems like, for example CORBA [8], and Network Objects [1] provide the same functionality as an RPC based system: arguments are shipped to the (remote) object. A system that seems at first glance similar to ours is the combination of Fragmented Objects with SSP chains <ref> [9] </ref>. Fragmented Objects, as described in [7] provide a similar model to the user of the object as our model. The internals of fragmented objects are however quite different: fragmented objects consist of fragments that communicate through connective objects.
Reference: [10] <author> M. van Steen, F.J. Hauck, </author> <title> and A.S. Tanenbaum. A Model for Worldwide Tracking of Distributed Objects. </title> <booktitle> In Proc. TINA '96 Conference, </booktitle> <address> Heidelberg (Germany), </address> <month> September. </month> <year> 1996. </year>
Reference-contexts: Each site stores a part of the root node and parts of the regional nodes. The partioning can be done by computing a hash value from the object handle. A more detailed description of our location service can be found in <ref> [10] </ref> 3.3 Scalability Scalability is one of the most important requirements for any wide area system. In Section 2, we defined scalability informally as the ability to support a billion users. <p> For example, it can be expected that the state of the directory objects close to the root will be highly replicated and distributed, and possibly even hierarchically organized as described above. For the scalability of the location service see also <ref> [10] </ref>. 4 Discussion and Related Work In this paper we have presented a novel architecture for a wide area distributed system that provides a single, high- level interface with location and replication transparency. This interface allows efficient implementations, is flexible and does not have inherent scalability problems.
References-found: 10

