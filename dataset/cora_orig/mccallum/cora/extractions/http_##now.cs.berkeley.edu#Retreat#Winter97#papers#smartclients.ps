URL: http://now.cs.berkeley.edu/Retreat/Winter97/papers/smartclients.ps
Refering-URL: http://now.cs.berkeley.edu/Retreat/Winter97/papers.html
Root-URL: 
Title: Using Smart Clients to Build Scalable Services  
Author: Chad Yoshikawa, Brent Chun, Paul Eastham, Amin Vahdat, Thomas Anderson, and David Culler 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California  
Abstract: Individual machines are no longer sufficient to handle the offered load to many Internet sites. To use multiple machines for scalable performance, load balancing, fault transparency, and backward compatibility with URL naming must be addressed. A number of approaches have been developed to provide transparent access to multi-server Internet services including HTTP redirect, DNS aliasing, Magic Routers, and Active Networks. Recently however, portable Java code and lightly loaded client machines allow the migration of certain service functionality onto the client. In this paper, we argue that in many instances, a client-side approach to providing transparent access to Internet services provides increased flexibility and performance over the existing solutions. We describe the design and implementation of Smart Clients and show how our system can be used to provide transparent access to scalable and/or highly available network services, including prototypes for: telnet, FTP, and an Internet chat application. 
Abstract-found: 1
Intro-found: 1
Reference: [Anderson et al. 1995a] <author> T. E. Anderson, D. E. Culler, D. A. Patterson, </author> <title> and the NOW Team. A Case for NOW (Networks of Workstations). </title> <booktitle> IEEE Micro, </booktitle> <month> February </month> <year> 1995. </year>
Reference: [Anderson et al. 1995b] <author> T. E. Anderson, M. D. Dahlin, J. M. Neefe, D. A. Patterson, D. S. Roselli, and R. Y. Wang. </author> <title> Serverless Network File Systems. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 109-126, </pages> <month> December </month> <year> 1995. </year>
Reference: [Anderson et al. 1996] <author> E. Anderson, D. Patterson, and E. Brewer. </author> <title> The Magicrouter, an Application of Fast Packet Interposing. </title> <month> May </month> <year> 1996. </year> <note> Submitted For Publication. Also see http://HTTP.CS.Berkeley.EDU/eanders /magicrouter/. </note>
Reference-contexts: Section 5 evaluates our requirements above in the context of the Smart Client architecture. Section 6 describes related work, and Section 7 concludes. 2 Alternative Solutions Existing architectures include DNS Aliasing [Brisco 1995, Katz et al. 1994], HTTP redirect [Berners-Lee 1995], Magic Routers <ref> [Anderson et al. 1996] </ref>, failsafe TCP [Goldstein & Dale 1995], and Active Networks [Wetherall & Tennenhouse 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions. We will describe each of the existing solutions in turn leading to a description of the Smart Client architecture.
Reference: [Berners-Lee 1995] <author> T. Berners-Lee. </author> <title> Hypertext Transfer Protocol HTTP/1.0, October 1995. HTTP Working Group Internet Draft. </title>
Reference-contexts: Section 5 evaluates our requirements above in the context of the Smart Client architecture. Section 6 describes related work, and Section 7 concludes. 2 Alternative Solutions Existing architectures include DNS Aliasing [Brisco 1995, Katz et al. 1994], HTTP redirect <ref> [Berners-Lee 1995] </ref>, Magic Routers [Anderson et al. 1996], failsafe TCP [Goldstein & Dale 1995], and Active Networks [Wetherall & Tennenhouse 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions.
Reference: [Bhide et al. 1991] <author> A. Bhide, E. N. Elnozahy, and S. P. Morgan. </author> <title> A Highly Available Network File Server. </title> <booktitle> In Proceedings of the 1991 USENIX Winter Conference, </booktitle> <pages> pp. 199-205, </pages> <year> 1991. </year>
Reference-contexts: File systems have used server-side replication of volumes and servers to provide fault transparency in systems such as Deceit [Marzullo et al. 1990], AFS [Howard et al. 1988], and HA-NFS <ref> [Bhide et al. 1991] </ref>. More recently, systems such as xFS [Ander-son et al. 1995b] and Petal [Lee & Thekkath 1996] use client-side techniques to improve overall file system performance.
Reference: [Birman 1993] <author> K. P. Birman. </author> <title> The Proecss Group Ap-praoch to Reliable Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 36-53, </pages> <year> 1993. </year>
Reference-contexts: If it is determined that such semantics are insufficient, well-known dis receiving conversation updates and writes to sending out a message. On a write, the WebFS updates all its clients; the updates are propagated to other servers in a lazy fashion. tribution techniques <ref> [Ladin et al. 1992, Birman 1993] </ref> can be used to provide strong ordering of updates. Since the read requests are idempotent, and the write requests are atomic with respect to WebFS, the chat application is completely tolerant to server crashes. <p> This lightweight nature enables Smart Clients to be downloaded into existing Web browsers to customize existing Internet services. Also related to our systems are ISIS <ref> [Birman 1993] </ref> and gossip architectures [Ladin et al. 1992] which provide a substrate for developing distributed applica tions. ISIS provides reliable group communication to support many of the applications we envision. Gossip architectures use front-ends analogous to Smart Clients to access replicated servers which are kept consistent through lazy updates.
Reference: [Bricker et al. 1991] <author> A. Bricker, M. Litzkow, and M. Livny. </author> <title> Condor Technical Summary. </title> <type> Technical Report 1069, </type> <institution> University of Wisconsin Madison, Computer Science Department, </institution> <month> October </month> <year> 1991. </year>
Reference: [Brisco 1995] <author> T. Brisco. </author> <title> DNS Support for Load Balancing, </title> <month> April </month> <year> 1995. </year> <title> Network Working Group RFC 1794. </title>
Reference-contexts: Section 5 evaluates our requirements above in the context of the Smart Client architecture. Section 6 describes related work, and Section 7 concludes. 2 Alternative Solutions Existing architectures include DNS Aliasing <ref> [Brisco 1995, Katz et al. 1994] </ref>, HTTP redirect [Berners-Lee 1995], Magic Routers [Anderson et al. 1996], failsafe TCP [Goldstein & Dale 1995], and Active Networks [Wetherall & Tennenhouse 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions.
Reference: [Dig 1995] <institution> Digital Equipment Corporation. Alta Vista, </institution> <year> 1995. </year> <note> http://www.altavista.digital.com/. </note>
Reference-contexts: server resources so that clients re ceive the best available quality of service. * Fault Transparency When possible, the service should remain available in the face of server and network upgrades or failures. * Wide Area Service Topology Individual servers comprising a service are increasingly distributed across the wide area <ref> [Net 1994, Dig 1995] </ref>. The server machines that comprise a network service should not be required to have a restricted or static topology. <p> For the service name space, the browser contacts one of many well-known search engines with a query. These well-known search engines serve the same purpose as the root name servers in DNS. Currently, the browser contacts Altavista <ref> [Dig 1995] </ref> with a query requesting an HTML page whose title matches the service name, e.g. now chat ser vice. In this way, Smart Clients leverages highly-available search engines to provide translations from well-known service names to a URL. The URL points to a page containing a service certificate.
Reference: [Douglis & Ousterhout 1991] <author> F. Douglis and J. Ouster-hout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-85, </pages> <month> August </month> <year> 1991. </year>
Reference: [Ghormley et al. 1995] <author> D. Ghormley, A. Vahdat, and T. Anderson. GLUnix: </author> <title> A Global Layer UNIX for NOW. </title> <note> See http://now.cs.berkeley.edu /Glunix/glunix.html, </note> <year> 1995. </year>
Reference-contexts: The implementation of the telnet application is straightforward. The telnet Web page encapsulates the necessary Smart Clients applets. The director applet periodically polls the NOW's operating system, GLUnix <ref> [Ghormley et al. 1995] </ref>, to retrieve the load averages of machines in the cluster through a simple Common Gateway Interface (CGI) program.
Reference: [Goldstein & Dale 1995] <author> I. Goldstein and P. Dale. </author> <title> A Sacalable, Fault Resilient Server for the WWW. OSF ARPA Project Proposal, </title> <year> 1995. </year>
Reference-contexts: Section 5 evaluates our requirements above in the context of the Smart Client architecture. Section 6 describes related work, and Section 7 concludes. 2 Alternative Solutions Existing architectures include DNS Aliasing [Brisco 1995, Katz et al. 1994], HTTP redirect [Berners-Lee 1995], Magic Routers [Anderson et al. 1996], failsafe TCP <ref> [Goldstein & Dale 1995] </ref>, and Active Networks [Wetherall & Tennenhouse 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions. We will describe each of the existing solutions in turn leading to a description of the Smart Client architecture.
Reference: [Gosling & McGilton 1995] <author> J. Gosling and H. McGilton. </author> <title> The Java(tm) Language Environment: A White Paper. </title> <address> http://java.dimensionx.com /whitePaper/java-whitepaper-1.html, </address> <year> 1995. </year>
Reference-contexts: The migration of service functionality onto client machines is enabled by two recent developments. Today, most popular Internet services, such as FTP, HTTP, and search engines are universally accessed through extensible Web browsers. This extensibility allows insertion of service-specific code onto client machines. In addition, the advent of Java <ref> [Gosling & McGilton 1995] </ref> allows such code to be easily distributed to multiple platforms. Next, network latency and bandwidth are increasingly the bottleneck to the performance delivered to clients. Thus, client processors can be left relatively idle.
Reference: [Gray & Reuter 1993] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Mor-gan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Once again, all these systems implement server-side solutions for load balancing and require client intervention to spread jobs among cluster machines. Perhaps most closely related to Smart Clients are Transaction Processing monitors <ref> [Gray & Reuter 1993] </ref> (TP monitors). TP monitors provide functionality similar to Smart Clients for access to databases. The TP monitor functions as the director for transactions to resource managers, accounting for load on machines, the RPC program number, and any affinity between client and server.
Reference: [Howard et al. 1988] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, and M. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-82, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: File systems have used server-side replication of volumes and servers to provide fault transparency in systems such as Deceit [Marzullo et al. 1990], AFS <ref> [Howard et al. 1988] </ref>, and HA-NFS [Bhide et al. 1991]. More recently, systems such as xFS [Ander-son et al. 1995b] and Petal [Lee & Thekkath 1996] use client-side techniques to improve overall file system performance.
Reference: [Jav 1996] <author> JavaSoft. </author> <title> Java RMI Specification, Revision 1.1, </title> <note> 1996. See http://chatsubo.javasoft.com/- current/doc/rmi-spec/rmiTOC.doc.html. </note>
Reference-contexts: While the client interface applet and service-certificate are cached using normal browser disk caching mechanisms, the director state is saved by serializing the director applet (and any relevant instance variables) to disk using Java Object serialization <ref> [Jav 1996] </ref>. Thus, on subsequent service accesses, the director applet need not rely on the initial group membership contained in the service certificate. Instead, it can use the last known service group membership.
Reference: [Katz et al. 1994] <author> E. D. Katz, M. Butler, and R. </author> <note> McGrath. </note>
Reference-contexts: Section 5 evaluates our requirements above in the context of the Smart Client architecture. Section 6 describes related work, and Section 7 concludes. 2 Alternative Solutions Existing architectures include DNS Aliasing <ref> [Brisco 1995, Katz et al. 1994] </ref>, HTTP redirect [Berners-Lee 1995], Magic Routers [Anderson et al. 1996], failsafe TCP [Goldstein & Dale 1995], and Active Networks [Wetherall & Tennenhouse 1995]. Figure 1 describes how Smart Clients fits in the space of existing solutions.
References-found: 17

