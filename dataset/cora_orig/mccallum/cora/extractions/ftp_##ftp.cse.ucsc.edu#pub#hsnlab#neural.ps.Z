URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/neural.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/publications/publications_sorted_by_subject.html
Root-URL: http://www.cse.ucsc.edu
Email: varma@cse.ucsc.edu  
Title: A Neural-Network Controller for Scheduling Packet Transmissions in a Crossbar Switch  
Author: Anujan Varma and Robert Antonucci 
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering Department University of California  
Abstract: A Hopfield neural network is presented for scheduling packets in an input-buffered crossbar switch. The controller has a two-dimensional winner-take-all design and is driven by request signals representing the packets stored in the input buffers. Schemes are presented to support multiple priorities of traffic by changing the binary request signals to multi-valued signals that vary over a limited range. Simulation results show that the controller provides close-to-ideal throughput for switches as large as 32 fi 32. In addition, by varying the relative strength of request signals, the scheme is shown to be able to control jitter effectively in a communication network consisting of multiple switches in series.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. E. Anderson, S. S. Owicki, J. B. Saxe, and C. P. Thacker, </author> <title> "High-speed switch scheduling for local area networks," </title> <type> Technical Report 99, </type> <institution> Digital Systems Research Center, Palo Alto California, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Packet switches based on nonblocking crossbars are used extensively in communications switching. The problem of switching the maximum number of packets in a crossbar with windowed or randomly-accessible queues can be reduced to the matching problem in a bipartite graph <ref> [1] </ref>. Optimal algorithms exist for finding the maximum matchings in a bipartite graph, but are too computationally demanding to be implemented in the controller of a high-speed packet switch. <p> We first examine the performance of our switch in its basic operation. compared to that of an optimal algorithm that always finds a maximal matching, and that of the probabilistic iterative matching algorithm proposed in <ref> [1] </ref>. The request density on the x-axis is the probability of entry (i; j) of the request matrix being a 1. In each of these experiments, (a) (b) an optimal algorithm, and the probabilistic matching algorithm of [1]. (b) The total and per-priority efficiency of the neural network controller compared to <p> a maximal matching, and that of the probabilistic iterative matching algorithm proposed in <ref> [1] </ref>. The request density on the x-axis is the probability of entry (i; j) of the request matrix being a 1. In each of these experiments, (a) (b) an optimal algorithm, and the probabilistic matching algorithm of [1]. (b) The total and per-priority efficiency of the neural network controller compared to that of an optimal scheduling algorithm.
Reference: [2] <author> T. X. Brown and K. Liu, </author> <title> "Neural network design of a banyan network controller," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> Vol. 8, No. 8, </volume> <month> October </month> <year> 1990, </year> <pages> pp. 1428-1438. </pages>
Reference: [3] <author> Y. Park, V. Cherkassky, and G. Lee. </author> <title> "ATM cell scheduling for broadband switching systems by neural network," </title> <booktitle> in Proceedings of the International Workshop on Applications of Neural Networks to Telecommunications, </booktitle> <year> 1993, </year> <pages> pp. 112-118. </pages>
Reference: [4] <author> A. Varma and R. Antonucci, </author> <title> "A neural-network controller for scheduling packet transmissions in a crossbar switch," </title> <type> Technical Report, </type> <institution> University of California, Santa Cruz, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: The network is stable at states that represent maximal matchings and is unstable at ambiguous states or states that represent invalid matchings. By the use of a summing unit in each row and column, the network can be implemented with O (N 2 ) connections <ref> [4] </ref>. <p> We used a genetic algorithm to tune the values of A, B, C, and Bias in the motion equation of the network. Details of the algorithm are given in <ref> [4] </ref>. The values found by the algorithm for an 8 fi 8 switch were A = 4:0, B = 4:9, C = 6:4, and Bias = 1:5. An important feature of our design is the ability to assign weights selectively to the packets in the scheduling process. <p> Because of space constraints, only some representative results are discussed here. More detailed results can be found in <ref> [4] </ref>. Except for some experiments in which we tested the scalability of the switch controller, all experiments were performed on an 8 fi 8 switch. Each switch was simulated with infinite, randomly accessible input queues, and packets were assumed to be of fixed size. <p> We compared the end-to-end delays of packets from different sessions for this scheme with three other schemes | a neural network that biases packets based on only the local queueing delay, probabilistic iterative matching, and an optimal matching algorithm. Detailed results from these simulations are given in <ref> [4] </ref>. The jitter control scheme increaseds the average delay of packets with shorter paths in favor of more control over packets with longer paths. For long paths, the 99.9 percentile delay of the jitter control scheme was significantly better than even that of the optimal algorithm.
References-found: 4

