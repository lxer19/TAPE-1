URL: http://alpha.qmw.ac.uk/~ugah006/gotools/hakone94.ps
Refering-URL: http://alpha.qmw.ac.uk/~ugah006/gotools/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: T.Wolf@maths.qmw.ac.uk  
Title: The program GoTools and its computer-generated tsume go database an exercise modus, to the problem
Author: Thomas Wolf 
Note: and  
Date: November 8, 1996  
Address: Mile End Road London E1 4NS  
Affiliation: School of Mathematical Sciences Queen Mary Westfield College  
Abstract: In this talk the program GoTools, designed for solving life/death problems in Go, will be described and examples will be given. Remarks are made * to the kernel modules for solving problems, * to new features which increase the programs utility value like a playing 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dave Dyer, </author> <title> contribution to the computer go email list computer-go@prg.oxford.ac.uk on 13. </title> <address> Oct. </address> <year> 1993. </year> <month> 12 </month>
Reference-contexts: This module works algorithmicly and is very likely slower than a similar module described by Dave Dyer <ref> [1] </ref> which stores all 560523 possible shapes of eyes of size 7 or less in a database.
Reference: [2] <author> Dave Dyer, </author> <title> `Notes on Searches, tree pruning and tree ordering in Go', contri-bution to the computer go email list computer-go@prg.oxford.ac.uk on 31. </title> <month> May </month> <year> 1994. </year>
Reference-contexts: some forms of dynamic learn ing during the search. * A module to provide a hash database which is able to work with ko-specific results. 1.2 Remarks to the treesearch An excellent explanation of life/death searching in go has been given by Dave Dyer on the computer go email list <ref> [2] </ref>. As here is not the place to repeat most of it, only a few remarks shall be made. As mentioned below, an ff=fi-treesearch with only two states `alive' or 'dead' is performed where seki is treated the same as life. Single and multiple ko's are recognized, see below.
Reference: [3] <author> According to contributions to the computer-go-email-list, </author> <title> programs devoted especially to life/death have been written by Dave Dyer, </title> <editor> Max Golem, </editor> <publisher> Torsten Harling. </publisher>
Reference-contexts: GoTools: x on f1 (12.6 sec) All times given are measured on a PC486 (33MHz) if not otherwise stated. As far as the author knows, is GoTools currently (Sep. 1994) the fastest tsume go program for medium and hard problems (for other programs specialized in tsume go see <ref> [3] </ref> - [7]). Whereas the kernel moduls for solving a problem did not change much over the last year, some new features were added to make the program more user friedly. 1.3 Recently added features Apart from adding a menu- and help-system essentially three new modes of operation are available.
Reference: [4] <author> P. Aroutcheff, </author> <title> `Atari en BASIC', </title> <editor> Jeux et Strategie, </editor> <volume> 31, </volume> <month> 18-19 </month> <year> (1985). </year>
Reference: [5] <author> D.B. Benson, B.R. Hilditch and J.D. Starkey, </author> <title> `Tree Analysis Techniques in Tsumego', </title> <booktitle> IJCAI 79, </booktitle> <pages> 50-52. </pages>
Reference: [6] <author> J. Kraszek, </author> <title> `Heuristics in the Life and Death Algorithm of a Go-playing Program', CG, </title> <booktitle> 9 (Winter 1988-89), </booktitle> <pages> 13-24. </pages>
Reference: [7] <institution> As part of the Japanese 5th Generation Computer Project a computer Go program was developed. </institution> <note> This was lead by Noriaki Sanechika, the tsume go part was written by Shinichi Sei. </note>
Reference-contexts: As far as the author knows, is GoTools currently (Sep. 1994) the fastest tsume go program for medium and hard problems (for other programs specialized in tsume go see [3] - <ref> [7] </ref>). Whereas the kernel moduls for solving a problem did not change much over the last year, some new features were added to make the program more user friedly. 1.3 Recently added features Apart from adding a menu- and help-system essentially three new modes of operation are available.
Reference: [8] <author> T. Wolf, </author> <title> `Tsume go with RisiKo', </title> <booktitle> Proceedings of the Game Festival in Cannes/France, </booktitle> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: 1 About the program GoTools 1.1 Contents of the problem solving part The core of the program, the problem solving modules have been partially described earlier in <ref> [8] </ref>. The following are the important ones. * A module which provides an ordering of the usefulness of moves on a heuristic basis.
Reference: [9] <author> T. Wolf, </author> <title> `Quality improvements in the tsume go mass production', </title> <booktitle> Proceedings of the Game Festival in Cannes/France, </booktitle> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Since then Torsten Harling and Dave Dyer started checking these problems with their own tsume go code. This was and still is quite helpful for improving all involved programs. 2.3.2 Learning from the database A less direct way of learning from the database was described in <ref> [9] </ref> where 64 problems have been solved by humans and the computer and the necessary times for different problems have been plotted against each other to spot in which problems the human player was especially fast and in which the computer was much faster than the player.
Reference: [10] <author> E. Berlekamp and D. Wolfe, </author> <title> `Mathematical Go Endgames', </title> <publisher> Ishi Press. </publisher>
Reference-contexts: In tsume go such a causal independence is provided, e.g. if a strong chain of one color surrounds a given area. Another such situation is the endgame when only local fights can bring a few points. In the book of Berlekamp <ref> [10] </ref> a method is described which is applicable if the local fights are single endgame positions each with just one point to win. If the local fights are about life and death then much more points are on stake and the status of each local fight is more difficult.
Reference: [11] <institution> Korean Go journal Baduk, </institution> <note> no 8 (1992), p.131. </note>
Reference-contexts: In the following examples the old and incorrect solutions are shown in the dia 11 gram. 8 6 4 x x x y y 2 B A y x y y a b c d e f g h Problem A. <ref> [11] </ref> x to move first and live. 8 6 y 4 y y y x fi | 2 y y y x | * y m n o p q r s t Problem B. [12] y to move first. x is alive.
Reference: [12] <editor> The error was found by Richard Arundell using GoTools. </editor> <title> The problem is from Cho Chikun: `All about life and death', </title> <booktitle> vol 1, </booktitle> <address> p.44, </address> <publisher> Ishi Press. </publisher>
Reference-contexts: A y x y y a b c d e f g h Problem A. [11] x to move first and live. 8 6 y 4 y y y x fi | 2 y y y x | * y m n o p q r s t Problem B. <ref> [12] </ref> y to move first. x is alive. In both first cases the first move is right but not the status, as ko's can be reached by continuing to play from outside. In problem A, fi y can play on f1 continued by b2 d1 c2 a2 a1.
Reference: [13] <institution> Deutsche Go Zeitung, </institution> <note> Nr. 7+8/94, p.6, p.39. The error was found by Volkmar Liebscher (Jena/Germany) and checked with GoTools. </note>
Reference-contexts: continued by q1 s2 t2 t1. 15 13 y x x x y 11 y x ffi | fi | fl y y 9 y x * y x x y 7 y y x x x y 5 y f g h i k l m n Problem C. <ref> [13] </ref> y to move first and kill. 19 fl y * y fi | ff y y y 17 x x x x y y 15 Problem D. [14] y to move first and get ko.
Reference: [14] <institution> The error was found by Denis Feldmann (France) using GoTools and published in `L'Aube d'une Ere Nouvelle?', GO, Revue Francaise de GO, </institution> <note> no 66, 2d trimestre 1994, pp. </note> <month> 21-24. </month> <title> The problem is from the Ko Dictionary of the Nihon Ki-in. </title>
Reference-contexts: x x y 7 y y x x x y 5 y f g h i k l m n Problem C. [13] y to move first and kill. 19 fl y * y fi | ff y y y 17 x x x x y y 15 Problem D. <ref> [14] </ref> y to move first and get ko. Differently in problem C., where the status is correct but the first move is wrong. The given first move can be counterproofed with fi | on l11, possibly followed by l10 k11 k10 i10.
References-found: 14

