URL: http://www.cis.ohio-state.edu/~kurzion/papers/polygon.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~kurzion/resume.html
Root-URL: 
Title: An Accurate Method To Voxelize Polygonal Meshes  
Author: Jian Huang Roni Yagel , Vassily Filippov and Yair Kurzion 
Address: Columbus OH 2 BioMediCom Ltd., Jerusalem, Israel  
Affiliation: 1 Department of Computer and Information Science, The Ohio State University,  
Abstract: The process of generating discrete surfaces in a volumetric representation, termed voxelization, is confronted with topological considerations as well as accuracy and efficiency requirements. We introduce a new method for voxelizing planar objects which, unlike existing methods, provides topological conformity through geometric measures. We extend our approach to provide, for the first time, an accurate and coherent method for voxelizing polygon meshes. This method eliminates common voxelization artifacts at edges and vertices. We prove the method's topological attributes and report performance of our implementation. Finally, we demonstrate that this approach forms a basis for a new set of voxelization algorithms by voxelizing an example cubic object. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cohen, D. and Kaufman, A., </author> <title> Scan-Conversion Algorithms for Linear and Quadratic Objects, in Volume Visualization, </title> <editor> A. </editor> <publisher> Kaufman, (ed.), IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1990, </year> <pages> 280-301. </pages>
Reference: [2] <author> Foley, J. D., van Dam, A., Feiner, S. K. and Hughes, J. F., </author> <title> Computer Graphics Principles and Practice, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference: [3] <author> Greene, N., </author> <title> Voxel Space Automata: Modeling with Stochastic Growth Processes in Voxel Space, </title> <journal> Computer Graphics, </journal> <volume> 23, </volume> <month> 3 (July </month> <year> 1989), </year> <pages> 175-184. </pages>
Reference: [4] <author> Kaufman, A. and Shimony, E., </author> <title> 3D Scan-Conversion Algorithms for Voxel-Based Graphics, </title> <booktitle> Proceedings of the 1986 Workshop on Interactive 3D Graphics, </booktitle> <address> Chapel Hill, NC, </address> <month> October </month> <year> 1986, </year> <pages> 45-75. </pages>
Reference: [5] <author> Kaufman, A., </author> <title> An Algorithm for 3D Scan-Conversion of Polygons, </title> <booktitle> Proceedings of EUROGRAPHICS87 Conference, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1987, </year> <pages> 197-208. </pages>
Reference: [6] <author> Kaufman, A., </author> <title> Efficient Algorithms for 3D Scan Convert-p x y z, ,( ) x x 0 ( ) y y 0 ( ) z z 0 ( ) + += 2 256 256 256 2 k 10.0= 256 256 256 ing Polygons, </title> <journal> Computers & Graphics, </journal> <volume> 12, </volume> <month> 2 </month> <year> (1988), </year> <month> 213--219. </month>
Reference: [7] <author> Kong, T. Y. and Rosenfeld, A., </author> <title> Digital Topology: Introduction and Survey, Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 48, </volume> <month> 3 (December </month> <year> 1989), </year> <pages> 357-393. </pages>
Reference-contexts: In discrete space, however, the opposite is possible. Figure 2 shows a 2D discrete 8-connected curve penetrating through another 8-curve without meeting it. In order to avoid this discrepancy between continuous and discrete space, the convention is to define opposite types of connectivity for white and black sets <ref> [7] </ref>. Opposite types in 2D space are 4 and 8, while in 3D space 6 is opposite to 26 and 18. In 3D, however, the situation is much more complex because the connectivity of a surface does not fully characterize its topology.
Reference: [8] <author> Levoy, M., </author> <title> A Hybrid Ray Tracer for Rendering Polygon and Volume Data, </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 10, </volume> <month> 3 (March </month> <year> 1990), </year> <pages> 33-40. </pages>
Reference-contexts: Polygons also serve as the basis for a wide variety of additional capabilities, such as clipping planes and cutting planes. In volumetric graphics, one has to voxelize polygon meshes for graphical purposes [3][10] and for intermixing polygonal objects with sampled data <ref> [8] </ref>. Planar objects are also used for other operations, such as extracting an oblique cut-plane. Some block operations (bitblt) are performed on a sub-volume region bounded by multiple clipping planes. The identification of the voxels belonging to a desired region also involves voxelization of the planar boundaries of the region.
Reference: [9] <author> Newman, W. M. and Sproull, R. F., </author> <title> Principles of Interactive Computer Graphics, (2nd ed.) </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1979. </year>
Reference: [10] <author> Yagel, R., Cohen, D. and Kaufman, A., </author> <title> Discrete Ray Tracing, </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 12, 5 (Sep-tember 1992), </volume> <pages> 19-28. </pages>
Reference: [11] <author> R. Yagel, D.S. Ebert, J. Scott, and Y. </author> <title> Kurzion Grouping Volume Renderers for Enhanced Visualization in Computational Fluid Dynamics, </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> Vol. 1, No. 2, </volume> <month> July </month> <year> 1995, </year> <pages> pp. 117-132. </pages> <month> topologically. </month>
Reference-contexts: Note that our timing results are based on a non optimized scan conversion implementation. An efficient incremental algorithm needs to be devised to achieve even faster voxelization. We used a splatting-based renderer to create our images <ref> [11] </ref>. Visually, the images of 6- and 26- separating models are virtually indistinguishable, as shown in Figure 14. Since 6-separating voxelization takes less time (see Table 2) for display purposes, we choose 6-separating objects for our algorithm.
References-found: 11

