URL: http://www.cs.cmu.edu/afs/cs/user/mmv/www/papers/khaigh96a.ps.gz
Refering-URL: http://www.cs.cmu.edu/~mmv/robo-minds.html
Root-URL: 
Email: khaigh@cs.cmu.edu mmv@cs.cmu.edu  
Title: Interleaving Planning and Robot Execution for Asynchronous User Requests  "Planning with Incomplete Information for Robot Problems"  
Author: Karen Zita Haigh and Manuela Veloso 
Note: In Proceedings of the AAAI-96 Spring Symposium  
Web: http://www.cs.cmu.edu/~khaigh http://www.cs.cmu.edu/~mmv  
Address: Pittsburgh PA 15213-3891  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: This paper describes Rogue, an integrated planning and executing robotic agent. Rogue is designed to be a roving office gopher unit, doing tasks such as picking up & delivering mail and returning & picking up library books, in a setup where users can post tasks for the robot to do. We have been working towards the goal of building a completely autonomous agent which can learn from its experiences and improve upon its own behaviour with time. This paper describes what we have achieved to-date: (1) a system that can generate and execute plans for multiple interacting goals which arrive asynchronously and whose task structure is not known a priori, interrupting and suspending tasks when necessary, and (2) a system which can compensate for minor problems in its domain knowledge, monitoring execution to determine when actions did not achieve expected results, and replanning to correct failures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip E. Agre and David Chapman. Pengi: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <pages> pages 268-272, </pages> <address> San Mateo, CA, 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Integrating planning and real execution by a robot is a complex task that we believe requires learning from prior experience to significantly improve the overall performance of the autonomous agent. Other researchers investigate the problem of interleaving planning and execution (including <ref> [1; 3; 4; 5] </ref>).
Reference: [2] <author> Jaime G. Carbonell, Craig A. Knoblock, and Steven Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. VanLehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hills-dale, NJ, </address> <year> 1990. </year> <note> Also Available as Technical Report CMU-CS-89-189. </note>
Reference-contexts: The simulator also has the ability to replay recorded data, and so actual data collected on the robot can be used by the simulator. Prodigy Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [2; 13] </ref>. Prodigy4.0 is a nonlinear planner that uses means-ends analysis and backward chaining to reason about multiple goals and multiple alternative operators to achieve the goals.
Reference: [3] <author> R. James Firby. </author> <title> Task networks for controlling continuous processes. </title> <booktitle> In Proceedings of AIPS-94, </booktitle> <pages> pages 49-54, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Integrating planning and real execution by a robot is a complex task that we believe requires learning from prior experience to significantly improve the overall performance of the autonomous agent. Other researchers investigate the problem of interleaving planning and execution (including <ref> [1; 3; 4; 5] </ref>).
Reference: [4] <author> Kristian Hammond, Timothy Converse, and Charles Martin. </author> <title> Integrating planning and acting in a case-based framework. </title> <booktitle> In Proceedings AAAI-90, </booktitle> <pages> pages 292-297, </pages> <address> San Mateo, CA, 1990. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Integrating planning and real execution by a robot is a complex task that we believe requires learning from prior experience to significantly improve the overall performance of the autonomous agent. Other researchers investigate the problem of interleaving planning and execution (including <ref> [1; 3; 4; 5] </ref>).
Reference: [5] <author> Drew McDermott. </author> <title> Planning and acting. </title> <journal> Cognitive Science, </journal> <volume> 2, </volume> <year> 1978. </year>
Reference-contexts: Integrating planning and real execution by a robot is a complex task that we believe requires learning from prior experience to significantly improve the overall performance of the autonomous agent. Other researchers investigate the problem of interleaving planning and execution (including <ref> [1; 3; 4; 5] </ref>).
Reference: [6] <author> Joseph O'Sullivan and Karen Zita Haigh. </author> <type> Xavier. </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1994. </year> <note> Manual, Version 0.2, unpublished internal report. </note>
Reference-contexts: Xavier is a robot developed by Reid Simmons at Carnegie Mellon <ref> [6] </ref>. One of the goals of the project is to have the robot move autonomously in an office building reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers [8]. <p> Currently, Rogue's main features are (1) the ability to receive and reason about multiple asynchronous goals, suspending and interrupting actions when necessary, and (2) the ability to reason about and correct simple execution failures. Xavier Xavier is a mobile robot being developed at CMU <ref> [6] </ref> (see Figure 2). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars and a color camera. Control, perception and navigation planning are carried out on two on-board Intel 80486-based machines.
Reference: [7] <author> M. Alicia Perez. </author> <title> Learning Search Control Knowledge to Improve Plan Quality. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1995. </year> <note> Available as Technical Report CMU-CS-95-175. </note>
Reference-contexts: door: : : next time I'll use pure dead-reckoning from somewhere close that I know well", or even something as apparently simple as "I can't do that task given what else I have to do." Prodigy has been successfully used as a test-bed for machine learning research many times (eg. <ref> [7; 14; 12] </ref>), and this is the primary reason why we selected it as the deliberative portion of Rogue. Xavier's TCA architecture supports incremental behaviours and therefore will be a natural mechanism for supporting these learning behaviours.
Reference: [8] <author> Reid Simmons. </author> <title> Becoming increasingly reliable. </title> <booktitle> In Proceedings of AIPS-94, </booktitle> <pages> pages 152-157, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: One of the goals of the project is to have the robot move autonomously in an office building reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers <ref> [8] </ref>. Our on-going contribution to this ultimate goal is at the high-level reasoning of the process, allowing the robot to efficiently handle multiple interacting goals, and to learn from its experience.
Reference: [9] <author> Reid Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: Rogue is intended to be a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Prodigy and Xavier are linked together using the Task Control Architecture <ref> [9; 10] </ref> as shown in Figure 1. Currently, Rogue's main features are (1) the ability to receive and reason about multiple asynchronous goals, suspending and interrupting actions when necessary, and (2) the ability to reason about and correct simple execution failures. <p> To date, Xavier has been operational more than 60 hours, covering almost 20km and completing 90% of its tasks. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [9; 10] </ref>. TCA provides facilities for scheduling and synchronizing tasks, resource allocation, environment monitoring and exception handling. The reactive behaviours enable the robot to handle real-time local navigation, obstacle avoidance, and emergency situations (such as detecting a bump).
Reference: [10] <author> Reid Simmons, Long-Ji Lin, and Chris Fedor. </author> <title> Autonomous task control for mobile robots. </title> <booktitle> In Proceedings of the IEEE Symposium on Reactive Control, </booktitle> <address> Philadelphia, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: Rogue is intended to be a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Prodigy and Xavier are linked together using the Task Control Architecture <ref> [9; 10] </ref> as shown in Figure 1. Currently, Rogue's main features are (1) the ability to receive and reason about multiple asynchronous goals, suspending and interrupting actions when necessary, and (2) the ability to reason about and correct simple execution failures. <p> To date, Xavier has been operational more than 60 hours, covering almost 20km and completing 90% of its tasks. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [9; 10] </ref>. TCA provides facilities for scheduling and synchronizing tasks, resource allocation, environment monitoring and exception handling. The reactive behaviours enable the robot to handle real-time local navigation, obstacle avoidance, and emergency situations (such as detecting a bump).
Reference: [11] <author> Peter Stone and Manuela Veloso. </author> <title> User-guided interleaving of planning and execution. </title> <booktitle> In Pro ceedings of the European Workshop on Planning, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: During the application phase, user-defined code is called which can map the operator to a real-world action sequence <ref> [11] </ref>. Some examples of the use of this feature include shortening combined planning and execution time, acquiring necessary domain knowledge in order to continue planning (e.g. sensing the world), and executing an action in order to know its outcome and handle any failures. 3. <p> This behaviour can effectively be described by the following steps: 1. Select appropriate action that will achieve or partially achieve the goal 2. Execute action 3. If action succeeded Then: Continue planning Else: Goto step 1 The process is described in more detail by Stone <ref> [11] </ref>. In this manner, Rogue is able to detect simple execution failures and compensate for them. The interleaving of planning and execution reduces the need for replan-ning during the execution phase and increases the likelihood of overall plan success.
Reference: [12] <author> Manuela M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, Germany, </address> <month> December </month> <year> 1994. </year> <type> PhD Thesis, </type> <note> also available as Technical Report CMU-CS-92-174, </note> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: door: : : next time I'll use pure dead-reckoning from somewhere close that I know well", or even something as apparently simple as "I can't do that task given what else I have to do." Prodigy has been successfully used as a test-bed for machine learning research many times (eg. <ref> [7; 14; 12] </ref>), and this is the primary reason why we selected it as the deliberative portion of Rogue. Xavier's TCA architecture supports incremental behaviours and therefore will be a natural mechanism for supporting these learning behaviours.
Reference: [13] <author> Manuela M. Veloso, Jaime Carbonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1), </volume> <month> Jan-uary </month> <year> 1995. </year>
Reference-contexts: The simulator also has the ability to replay recorded data, and so actual data collected on the robot can be used by the simulator. Prodigy Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [2; 13] </ref>. Prodigy4.0 is a nonlinear planner that uses means-ends analysis and backward chaining to reason about multiple goals and multiple alternative operators to achieve the goals.
Reference: [14] <author> Xuemei Wang. </author> <title> Learning by observation and practice: An incremental approach for planning operator acquisition. </title> <booktitle> In Proceedings of the Twelfth International Conference on Machine Learning, </booktitle> <address> Tahoe City, CA, </address> <year> 1995. </year>
Reference-contexts: door: : : next time I'll use pure dead-reckoning from somewhere close that I know well", or even something as apparently simple as "I can't do that task given what else I have to do." Prodigy has been successfully used as a test-bed for machine learning research many times (eg. <ref> [7; 14; 12] </ref>), and this is the primary reason why we selected it as the deliberative portion of Rogue. Xavier's TCA architecture supports incremental behaviours and therefore will be a natural mechanism for supporting these learning behaviours.
References-found: 14

