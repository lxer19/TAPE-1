URL: http://www.cs.wisc.edu/condor/doc/dbc.ps
Refering-URL: http://www.cs.wisc.edu/condor/publications.html
Root-URL: 
Email: Email: min@cs.umd.edu Email: kmsalem@uwaterloo.ca Email:miron@cs.wisc.edu  
Title: The DBC: Processing Scientific Data Over the Internet 1  
Author: Chungmin Chen Kenneth Salem Miron Livny 
Date: October, 1995  
Address: College Park, MD 20742 Waterloo, Ontario N2L 3G1 Madison, WI 53706 USA Canada USA  
Affiliation: Dept. of Computer Science Dept. of Computer Science Computer Sciences Dept. University of Maryland University of Waterloo University of Wisconsin-Madison  
Abstract: We present the Distributed Batch Controller (DBC), a system built to support batch processing of large scientific datasets. The DBC implements a federation of autonomous workstation pools, which may be widely-distributed. Individual batch jobs are executed using idle workstations in these pools. Input data are staged to the pool before processing begins. We describe the architecture and implementation of the DBC, and present the results of experiments in which it is used to perform image compression. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Allan Bricker, Michael Litzkow, and Miron Livny. </author> <title> Condor technical summary. </title> <type> Technical Report TR 1069, </type> <institution> Department of Computer Science, University of Wisconsin, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: For the same reason, all critical state information is maintained by the DBC master, and not the workers. Condor The DBC assumes that each pool's resources are managed by Condor <ref> [5, 1] </ref>. Condor is a resource management system that runs on pools of UNIX workstations. Condor harnesses the computational power of unused workstations in the pool. Jobs submitted by Condor users are sent automatically to idle workstations in the pool for processing.
Reference: [2] <author> Al Geist, Adam Beguelin, Jack Dongarra, Weicheng Jiang, Robert Manchek, and Vaidy Sunderam. </author> <title> PVM: parallel virtual machine a user's guide and tutorial for networked parallel computing. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: We also need to provide modules that will 13 allow the DBC to interact with resource managers other than Condor. We are currently developing a new, easier to administer, and more robust implementation of the DBC system. The new implementation uses PVM <ref> [2] </ref> to provide distributed process control and communication. We intend to make this implementation publicly available. Acknowledgments Support for this work has been provided by NASA through its Applied Information Systems research program. The authors are grateful to CESDIS for its cooperation and willingness to provide resources.
Reference: [3] <author> Joseph A. Kaplan and Michael L. Nielson. </author> <title> A comparison of queueing, cluster, and distributed computing systems. </title> <type> Technical Report NASA Technical Memorandum 109025, </type> <institution> NASA Langley Research Center, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Besides Condor, which we discussed in Section 3, these include DQS [12], LoadLeveler, LoadBalancer, LSF (formerly Utopia [14, 13]), and Codine. A discussion and comparison of many of these systems can be found in <ref> [3] </ref>. Each of these systems accepts and queues job requests, and arranges to execute the requested jobs on machines from an available pool. Features of some of these systems include automatic load balancing, prioritized and access-controlled request queues, enforcement of resource consumption limitations, and deferred execution.
Reference: [4] <author> Jagadeesh Kasaraneni, Theodore Johnson, and Paul Avery. </author> <title> Load balancing in a distributed processing system for high-energy physics (UFMulti). </title> <type> Technical Report 95-002, </type> <institution> Department of Computer and Information Science, University of Florida, </institution> <year> 1995. </year>
Reference-contexts: Each of the federated pools remains completely autonomous and capable of administering its own resources. Because files are staged to and from the pools by the DBC, the federated pools are not required to share a common file system. Another related system is UFMulti <ref> [4] </ref>, intended for data processing in high-energy physics. Like the DBC and the systems described above, UFMulti performs data processing using a pool of workstations. UFMulti focuses on multi-stage computations, in which jobs in one stage provide input for jobs at the next.
Reference: [5] <author> M. Litzkow and M. Livny. </author> <title> Experience with the Condor distributed batch system. </title> <booktitle> In Proc. of the IEEE Workshop on Experimental Distributed Systems, </booktitle> <pages> pages 97-101, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: For the same reason, all critical state information is maintained by the DBC master, and not the workers. Condor The DBC assumes that each pool's resources are managed by Condor <ref> [5, 1] </ref>. Condor is a resource management system that runs on pools of UNIX workstations. Condor harnesses the computational power of unused workstations in the pool. Jobs submitted by Condor users are sent automatically to idle workstations in the pool for processing.
Reference: [6] <author> B. Clifford Neuman. Prospero: </author> <title> A tool for organizing internet resources. </title> <journal> Electronic Networking: Research, Applications, and Policy, </journal> <volume> 2(1), </volume> <year> 1992. </year>
Reference-contexts: Unfortunately, we not aware of an existing API for FTP. To implement direct control of FTP file transfers, we can provide an implementation of the FTP protocol within the job monitor itself. Alternatively, we could make use of a wide-area file system such as Jade [9] or Prospero <ref> [6] </ref>. These systems would allow the monitor to transfer files to and from remote FTP servers using the UNIX file system program interface. We are studying these alternatives for the next version of the DBC.
Reference: [7] <author> J. Postel and J. Reynolds. </author> <title> File transfer protocol (FTP). </title> <type> Technical Report RFC-959, </type> <institution> USC Information Sciences Institute, </institution> <year> 1985. </year>
Reference-contexts: The job monitor initiates these steps and monitors their progress. Transfer of input and output files is performed using the File Transfer Protocol (FTP) <ref> [7] </ref>. Both the source and result archives are assumed to be FTP servers. Interaction between the job monitors and the archives is complicated by the fact that there is no standard programming interface for FTP. The monitor transfers files by spawning executions of the UNIX FTP client program.
Reference: [8] <author> Jim Pruyne and Miron Livny. </author> <title> Parallel processing on dynamic resources with CARMI. In Workshop on Job Scheduling Strategies for Parallel Processing, </title> <booktitle> IPPS '95, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: The monitor transfers files by spawning executions of the UNIX FTP client program. For similar reasons, the job monitor submits is job request to Condor by spawning an instance of the condor submit program. An API for Condor, called CARMI <ref> [8] </ref>, has recently become available. We intend to incorporate it into subsequent versions of the DBC. Unfortunately, we not aware of an existing API for FTP. To implement direct control of FTP file transfers, we can provide an implementation of the FTP protocol within the job monitor itself.
Reference: [9] <author> Herman C. Rao and Larry L. Peterson. </author> <title> Accessing files in an internet: The Jade file system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(6) </volume> <pages> 613-624, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Unfortunately, we not aware of an existing API for FTP. To implement direct control of FTP file transfers, we can provide an implementation of the FTP protocol within the job monitor itself. Alternatively, we could make use of a wide-area file system such as Jade <ref> [9] </ref> or Prospero [6]. These systems would allow the monitor to transfer files to and from remote FTP servers using the UNIX file system program interface. We are studying these alternatives for the next version of the DBC.
Reference: [10] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun Network File System. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 119-130, </pages> <month> Summer </month> <year> 1985. </year>
Reference-contexts: Finally, most (with the notable exception of Condor) insist that pool machines share a common filename space. Such access is normally provided by distributed file systems such as NFS <ref> [10] </ref> or AFS [11]. Although it is certainly technically feasible to create such a name space, many systems are not set up that way. In contrast, the DBC does not control resources. Instead, it uses resource allocated to it at various sites.
Reference: [11] <author> Mahadev Satyanarayanan. </author> <title> Scalable, secure, and highly available distributed file access. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 9-21, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Finally, most (with the notable exception of Condor) insist that pool machines share a common filename space. Such access is normally provided by distributed file systems such as NFS [10] or AFS <ref> [11] </ref>. Although it is certainly technically feasible to create such a name space, many systems are not set up that way. In contrast, the DBC does not control resources. Instead, it uses resource allocated to it at various sites.
Reference: [12] <institution> Supercomputer Computations Research Institute, Florida State University, Talahassee, Florida. </institution> <note> DQS User Manual, DQS version 3.1.2.3 edition, </note> <month> June </month> <year> 1995. </year> <month> 14 </month>
Reference-contexts: We intend to explore both of these approaches further as we improve the DBC. 12 6 Related Work There are several systems that support load sharing across pools of workstations. Besides Condor, which we discussed in Section 3, these include DQS <ref> [12] </ref>, LoadLeveler, LoadBalancer, LSF (formerly Utopia [14, 13]), and Codine. A discussion and comparison of many of these systems can be found in [3]. Each of these systems accepts and queues job requests, and arranges to execute the requested jobs on machines from an available pool.
Reference: [13] <author> Jingwen Wang, Songnian Zhou, Khalid Ahmed, and Weihong Long. LSBATCH: </author> <title> A distributed load sharing batch system. </title> <type> Technical Report CSRI-286, </type> <institution> Computer Systems Research Institute, University of Toronto, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: We intend to explore both of these approaches further as we improve the DBC. 12 6 Related Work There are several systems that support load sharing across pools of workstations. Besides Condor, which we discussed in Section 3, these include DQS [12], LoadLeveler, LoadBalancer, LSF (formerly Utopia <ref> [14, 13] </ref>), and Codine. A discussion and comparison of many of these systems can be found in [3]. Each of these systems accepts and queues job requests, and arranges to execute the requested jobs on machines from an available pool.
Reference: [14] <author> Songnian Zhou, Jingwen Wang, Xiahu Zheng, and Pierre Delisle. </author> <title> UTOPIA: A load sharing facility for large, heterogeneous distributed computer systems. </title> <type> Technical Report CSRI-257, </type> <institution> Computer Systems Research Institute, University of Toronto, </institution> <month> April </month> <year> 1992. </year> <month> 15 </month>
Reference-contexts: We intend to explore both of these approaches further as we improve the DBC. 12 6 Related Work There are several systems that support load sharing across pools of workstations. Besides Condor, which we discussed in Section 3, these include DQS [12], LoadLeveler, LoadBalancer, LSF (formerly Utopia <ref> [14, 13] </ref>), and Codine. A discussion and comparison of many of these systems can be found in [3]. Each of these systems accepts and queues job requests, and arranges to execute the requested jobs on machines from an available pool.
References-found: 14

