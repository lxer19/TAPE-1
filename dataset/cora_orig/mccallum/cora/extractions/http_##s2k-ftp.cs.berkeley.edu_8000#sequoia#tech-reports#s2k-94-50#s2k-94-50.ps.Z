URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-94-50/s2k-94-50.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-94-50/
Root-URL: http://www.cs.berkeley.edu
Email: devine@cs.berkeley.edu  
Title: Design and Implementation of DDH: A Distributed Dynamic Hashing Algorithm  
Author: Robert Devine 
Affiliation: University of California at Berkeley EECS Department, Computer Science Division  
Abstract: DDH extends the idea of dynamic hashing algorithms to distributed systems. DDH spreads data across multiple servers in a network using a novel autonomous location discovery algorithm that learns the bucket locations instead of using a centralized directory. We describe the design and implementation of the basic DDH algorithm using networked computers. Performance results show that the prototype of DDH hashing is roughly equivalent to conventional single-node hashing implementations when compared with CPU time or elapsed time. Finally, possible improvements are suggested to the basic DDH algorithm for increased reliability and robustness.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> AT&T, DBM(3X), </author> <title> Unix Programmer's Manual, </title> <booktitle> System V.3, </booktitle> <pages> pp. 506-8, </pages> <year> 1985. </year>
Reference-contexts: Each name was less than 32 bytes long and served as the key field. We compare the performance of the following hashing packages: 1. DDH the distributed hashing algorithm introduced in this paper 2. NDBM the single node hashing package from AT&T <ref> [1] </ref> 3. SELYIT the single node linear hashing package from [9] 4. GDBM the single node dynamic hashing package from GNU freeware 4.1 Environment Multiple DECstation 5000/133 workstations, an approximately 20 SPECmark machine, with ample memory (at least 16 megabytes) were used.
Reference: 2. <author> Ronald Fagin, Jurg Nievergelt, Nicholas Pippenger, and H. Raymond Strong, </author> <title> "Extensible Hashing A Fast Access Method for Dynamic Files", </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Volume 4, No. 3, </volume> <pages> pp. 315-34, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: In addition, if an insertion causes a split, the affected servers must mutually ensure consistency of their parts of the distributed table. 2.1 Previous Work Multiple dynamic hashing methods have been proposed for single nodes with either a single processor <ref> [5, 2, 6] </ref> or with multiple processors [10]. LH* [7] is one proposal for a distributed hashing algorithm. It extends the notion of linear hashing [6] to allow multiple nodes in a network to participate in the same distributed data structure. <p> DDH chooses the method of requiring the server to forward misdirected messages. Collision Resolution: When a bucket is filled, whether to split the bucket is entirely a local decision. Unlike Linear Hashing [6], no order of bucket splitting is necessary. Unlike Extensible Hashing <ref> [2] </ref>, the entire table is not split as one operation. Splitting is an autonomous operation that does not require global knowledge. Skewed data can therefore be efficiently handled with the minimum number of split buckets and no special overflow areas. The implementation of DDH practices an uncontrolled splitting policy. <p> In addition, the GDBM package used an extensible hashing algorithm <ref> [2] </ref> that doubled its directory size periodically. This explains the "knee" in the curves above the 10,000 name pairs point for GDBM. Finally, the user time for DDH is dwarfed by the system time with the ratio being roughly 1:4.
Reference: 3. <author> Richard Golding, </author> <title> "Accessing Replicated Data in a Large-Scale Distributed System", </title> <institution> University of California at Santa Cruz technical report, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: If we restrict the selection of nodes to those that are within a few multiples of an access to a locally mounted disk, then all nodes that are within 50 milliseconds average network time away can be used. Nodes not on the same LAN can be used. From <ref> [3] </ref> it is shown that even many computers on the Internet wide area network have a mean response latency of under 50 milliseconds.
Reference: 4. <author> H. I. Hsiao and David DeWitt, </author> <title> "Chained Declustering: A New Availability Strategy for Multiprocessor Database Machines", </title> <booktitle> Proceedings of the 6th International Conference on Data Engineering, </booktitle> <month> February </month> <year> 1990. </year>
Reference-contexts: Three server locating strategies were compared. Table 1 shows the number of messages that result from addressing errors for a fresh client retrieving records from a 249 bucket hash table <ref> (9000 records stored in buckets holding a maximum of 64 entries) </ref> on 3 servers. The experiment used 3 servers because the value 3 a non-multiple of 2 and therefore causes every bucket split to send records to a different server. <p> The area of distributed data structures introduces several challenging research problems in the areas of concurrency control algorithm, server failure, and supporting variable number of servers. Since servers can fail, some method of using data redundancy or server redundancy should be employed <ref> [4] </ref>. However, the drawback is the increased complexity of dealing with replication or data consistency. The actual case may be more complex due to server failures that are not independent. Dynamic hashing freed hashing from the fixed sized hash tables. Distributed hashing expands hashing from a single node.
Reference: 5. <author> Per Larson, </author> <title> "Dynamic Hashing", </title> <journal> BIT, </journal> <volume> 1978 Vol. 18(2), </volume> <pages> pp. 184-201. </pages>
Reference-contexts: In addition, if an insertion causes a split, the affected servers must mutually ensure consistency of their parts of the distributed table. 2.1 Previous Work Multiple dynamic hashing methods have been proposed for single nodes with either a single processor <ref> [5, 2, 6] </ref> or with multiple processors [10]. LH* [7] is one proposal for a distributed hashing algorithm. It extends the notion of linear hashing [6] to allow multiple nodes in a network to participate in the same distributed data structure.
Reference: 6. <author> Witold Litwin, </author> <title> "Linear Hashing: A New Tool for File and Table Addressing", </title> <booktitle> Proceedings of the 6th International Conference on VLDB, </booktitle> <month> October </month> <year> 1980. </year>
Reference-contexts: In addition, if an insertion causes a split, the affected servers must mutually ensure consistency of their parts of the distributed table. 2.1 Previous Work Multiple dynamic hashing methods have been proposed for single nodes with either a single processor <ref> [5, 2, 6] </ref> or with multiple processors [10]. LH* [7] is one proposal for a distributed hashing algorithm. It extends the notion of linear hashing [6] to allow multiple nodes in a network to participate in the same distributed data structure. <p> LH* [7] is one proposal for a distributed hashing algorithm. It extends the notion of linear hashing <ref> [6] </ref> to allow multiple nodes in a network to participate in the same distributed data structure. LH* is a directoryless algorithm like the single node version of linear hashing. It locates buckets through one of two algorithms based on the current split level and the bucket number. <p> DDH chooses the method of requiring the server to forward misdirected messages. Collision Resolution: When a bucket is filled, whether to split the bucket is entirely a local decision. Unlike Linear Hashing <ref> [6] </ref>, no order of bucket splitting is necessary. Unlike Extensible Hashing [2], the entire table is not split as one operation. Splitting is an autonomous operation that does not require global knowledge. <p> Bucket Addressing Errors Strategy Extra Messages for 249 buckets Heuristic (simple) 1063 Heuristic (complex) 627 Incremental 62 Quick Start 9 replies so that the average would gradually converge on the actual size. Both heuristics assume that the hash table is reasonably well balanced. Like Linear Hashing <ref> [6] </ref>, these are directoryless and neither store definite information about the whole hash table. Therefore they constantly makes the same mistakes and produce more errors than do the directory based strategies.
Reference: 7. <author> Witold Litwin, Marie-Anne Niemat, and Donovan Schneider, </author> <title> "LH* Linear Hashing for Distributed Files", </title> <booktitle> Proceedings of the 1993 ACM SIGMOD. </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: In addition, if an insertion causes a split, the affected servers must mutually ensure consistency of their parts of the distributed table. 2.1 Previous Work Multiple dynamic hashing methods have been proposed for single nodes with either a single processor [5, 2, 6] or with multiple processors [10]. LH* <ref> [7] </ref> is one proposal for a distributed hashing algorithm. It extends the notion of linear hashing [6] to allow multiple nodes in a network to participate in the same distributed data structure. LH* is a directoryless algorithm like the single node version of linear hashing. <p> A client maintains what it thinks is the current split level and highest numbered bucket. Because the table can grow or shrink without the client knowing, the actual bucket may be located elsewhere. As proposed in <ref> [7] </ref>, LH* has some drawbacks: First, each server has only one bucket. The limit is required for bucket location calculations. However, this can be easily overcome by using a logical server numbering scheme that maps to the actual server number (a round robin assignment would work fine).
Reference: 8. <author> John Postel, </author> <title> "User Datagram Protocol", </title> <institution> USC/Information Sciences Institute, Internet RFC 768, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: Because it is unlikely that purely homogeneous clusters of systems would be using DDH, it was implemented as a portable session level service. All communication to the DDH servers uses the Internet User Datagram Protocol (UDP) <ref> [8] </ref> datagram service and messages are encoded in network byte order. The DDH network protocol is designed to the request / response model. Requests messages are sent by clients to servers, and also by servers to other servers during bucket splits and merges.
Reference: 9. <author> Margo Seltzer and Ozan Yigit, </author> <title> "A New Hashing Package for UNIX", </title> <booktitle> USENIX Conference Proceedings Winter '91, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: We compare the performance of the following hashing packages: 1. DDH the distributed hashing algorithm introduced in this paper 2. NDBM the single node hashing package from AT&T [1] 3. SELYIT the single node linear hashing package from <ref> [9] </ref> 4. GDBM the single node dynamic hashing package from GNU freeware 4.1 Environment Multiple DECstation 5000/133 workstations, an approximately 20 SPECmark machine, with ample memory (at least 16 megabytes) were used. The systems were running ULTRIX 4.2a, a variant of BSD UNIX.
Reference: 10. <author> C. Severance, S. Pramanik, and P. Wolberg, </author> <title> "Distributed Linear Hashing and Parallel Projection in Main Memory Databases", </title> <booktitle> Proceedings of the 16th International Conference on VLDB, </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: In addition, if an insertion causes a split, the affected servers must mutually ensure consistency of their parts of the distributed table. 2.1 Previous Work Multiple dynamic hashing methods have been proposed for single nodes with either a single processor [5, 2, 6] or with multiple processors <ref> [10] </ref>. LH* [7] is one proposal for a distributed hashing algorithm. It extends the notion of linear hashing [6] to allow multiple nodes in a network to participate in the same distributed data structure. LH* is a directoryless algorithm like the single node version of linear hashing.
References-found: 10

