URL: http://www.cs.ucsd.edu/users/mihir/papers/poa.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/pok.html
Root-URL: http://www.cs.ucsd.edu
Email: E-mail: mihir@cs.ucsd.edu  e-mail: oded@wisdom.weizmann.ac.il.  
Title: Proving Computational Ability  
Author: Mihir Bellare Oded Goldreich 
Address: San Diego, 9500 Gilman Drive, La Jolla, CA 92093.  Rehovot, Israel.  
Affiliation: Department of Computer Science Engineering, Mail Code 0114, University of California at  Department of Applied Mathematics and Computer Science, Weizmann Institute of Science,  
Note: (Unpublished draft)  Research was partially supported by grant No. 89-00312 from the US-Israel Binational Science Foundation (BSF), Jerusalem, Israel.  
Date: August 1992  
Abstract: We investigate extending the notion of a proof of knowledge to a proof of the ability to perform some computational task. We provide some definitions and protocols for this purpose. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare and O. Goldreich, </author> <title> "On Defining Proofs of Knowledge," </title> <booktitle> Advances in Cryptology - Crypto 92 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 740, </volume> <publisher> Springer-Verlag, </publisher> <editor> E. Brickell, ed., </editor> <year> 1992. </year>
Reference-contexts: A second application is for a party to prove possesion of vast computing power by conducting very difficult tasks (e.g., inverting one-way functions). Related work. This is an extension of our previous work on proofs of knowledge <ref> [1] </ref> in which we try to generalize those ideas to the setting of proving computational ability. Proofs of knowledge are first mentioned in [5] and have been seeing definitional refinements [3, 6, 2] culminating in the notions of [1, 4]. We assume the reader is slightly familiar with the notion. <p> Proofs of knowledge are first mentioned in [5] and have been seeing definitional refinements [3, 6, 2] culminating in the notions of <ref> [1, 4] </ref>. We assume the reader is slightly familiar with the notion. Proofs of computational ability were first discussed by Yung [7]. <p> For example whereas an assumption on the problem hardness is made in [7] it is not made here; we consider notions of distribution-free and distribution-dependent ability; following <ref> [1] </ref> we define an analogue of "knowledge error"; and following [1] we avoid some weaknesses inherited from earlier definitions of proofs of knowledge. 2 Definitions For greater generality, we will consider relations rather than functions. <p> For example whereas an assumption on the problem hardness is made in [7] it is not made here; we consider notions of distribution-free and distribution-dependent ability; following <ref> [1] </ref> we define an analogue of "knowledge error"; and following [1] we avoid some weaknesses inherited from earlier definitions of proofs of knowledge. 2 Definitions For greater generality, we will consider relations rather than functions. <p> For simplicity we restrict our attention to polynomially bounded families; that is, we assume there is a polynomial p such that (z; y) 2 R x implies jzj = jxj and jyj p (jxj). Following the notation used in <ref> [1] </ref>, we denote R x (z) = f y : (z; y) 2 R x g and L R x = f z : 9y such that (z; y) 2 R x g. <p> Definition 2.2 (Proof of ability) Let R = fR x g x2f0;1g fl be a family of relations, and D def be an input distribution for R. Let : f0; 1g fl ! <ref> [0; 1] </ref>. <p> A strong ability extractor is given a single instance, selected according to D x , and is supposed to output a solution to this instances within the specified (expected) time bound. Proofs of knowledge (as per <ref> [1, Definition 3.1] </ref>) are a special case of proofs of ability. To justify this claim, given a binary relation R we define the family of relations R = fR x g so that 3 R x = f (x; y) : (x; y) 2 R g. <p> Definition 2.3 (Distribution-free proof of ability) Let R = fR x g x2f0;1g fl be a family of relations, and let : f0; 1g fl ! <ref> [0; 1] </ref>. * We say that an interactive machine, V , is a distribution-free verifier of the ability to solve R with error if for every input distribution, denoted D, for R, the D-source augmentation of machine V constitutes a verifier of the ability to solve R under D with error
Reference: [2] <author> G. Brassard, C. Crepeau, S. Laplante and C. Leger, </author> <title> "Computationally Convincing Proofs of Knowledge," </title> <booktitle> Proc. of the 8th STACS, </booktitle> <year> 1991. </year>
Reference-contexts: Related work. This is an extension of our previous work on proofs of knowledge [1] in which we try to generalize those ideas to the setting of proving computational ability. Proofs of knowledge are first mentioned in [5] and have been seeing definitional refinements <ref> [3, 6, 2] </ref> culminating in the notions of [1, 4]. We assume the reader is slightly familiar with the notion. Proofs of computational ability were first discussed by Yung [7].
Reference: [3] <author> U. Feige, A. Fiat, and A. Shamir, </author> <title> "Zero-Knowledge Proofs of Identity", </title> <journal> Journal of Cryptology, </journal> <volume> Vol. 1, </volume> <year> 1988, </year> <pages> pp. 77-94. </pages>
Reference-contexts: Related work. This is an extension of our previous work on proofs of knowledge [1] in which we try to generalize those ideas to the setting of proving computational ability. Proofs of knowledge are first mentioned in [5] and have been seeing definitional refinements <ref> [3, 6, 2] </ref> culminating in the notions of [1, 4]. We assume the reader is slightly familiar with the notion. Proofs of computational ability were first discussed by Yung [7].
Reference: [4] <author> U. Feige, and A. Shamir, </author> <title> "Witness Indistinguishability and Witness Hiding Protocols," </title> <booktitle> Proceedings of the Twenty Second Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1990, </year> <pages> pp 416-426. </pages>
Reference-contexts: Proofs of knowledge are first mentioned in [5] and have been seeing definitional refinements [3, 6, 2] culminating in the notions of <ref> [1, 4] </ref>. We assume the reader is slightly familiar with the notion. Proofs of computational ability were first discussed by Yung [7].
Reference: [5] <author> S. Goldwasser, S. Micali, and C. Rackoff, </author> <title> "The Knowledge Complexity of Interactive Proof Systems", </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 18, No. 1, </volume> <year> 1989, </year> <pages> pp. 186-208. </pages> <note> (Preliminary version in the 17th STOC, </note> <year> 1985.) </year>
Reference-contexts: Related work. This is an extension of our previous work on proofs of knowledge [1] in which we try to generalize those ideas to the setting of proving computational ability. Proofs of knowledge are first mentioned in <ref> [5] </ref> and have been seeing definitional refinements [3, 6, 2] culminating in the notions of [1, 4]. We assume the reader is slightly familiar with the notion. Proofs of computational ability were first discussed by Yung [7].
Reference: [6] <author> M. Tompa and H. Woll, </author> <title> "Random Self-Reducibility and Zero-Knowledge Interactive Proofs of Possession of Information," </title> <institution> University of California (San Diego) Computer Science and Engineering Dept. </institution> <note> Technical Report Number CS92-244 (June 1992). (Preliminary version in the 27th FOCS, </note> <year> 1987, </year> <pages> pp. 472-482. </pages> ) 
Reference-contexts: Related work. This is an extension of our previous work on proofs of knowledge [1] in which we try to generalize those ideas to the setting of proving computational ability. Proofs of knowledge are first mentioned in [5] and have been seeing definitional refinements <ref> [3, 6, 2] </ref> culminating in the notions of [1, 4]. We assume the reader is slightly familiar with the notion. Proofs of computational ability were first discussed by Yung [7].
Reference: [7] <author> M. Yung, </author> <title> "Zero-knowledge proofs of computational power," </title> <booktitle> Advances in Cryptology Eu-rocrypt 89 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 434, </volume> <publisher> Springer-Verlag, </publisher> <editor> J-J. Quisquater, J. Vandewille, ed., </editor> <year> 1989. </year> <month> 7 </month>
Reference-contexts: Proofs of knowledge are first mentioned in [5] and have been seeing definitional refinements [3, 6, 2] culminating in the notions of [1, 4]. We assume the reader is slightly familiar with the notion. Proofs of computational ability were first discussed by Yung <ref> [7] </ref>. We adhere to the same basic and natural idea (namely, that computational ability of a prover is certified if some extractor can use the prover as a black box to solve the problem itself) but our approach is more general. <p> For example whereas an assumption on the problem hardness is made in <ref> [7] </ref> it is not made here; we consider notions of distribution-free and distribution-dependent ability; following [1] we define an analogue of "knowledge error"; and following [1] we avoid some weaknesses inherited from earlier definitions of proofs of knowledge. 2 Definitions For greater generality, we will consider relations rather than functions.
References-found: 7

