URL: http://www.cs.ucsb.edu/~murat/OOPSLA93.ps
Refering-URL: http://www.cs.ucsb.edu/~murat/
Root-URL: http://www.cs.ucsb.edu
Email: Email: murat@cs.ucsb.edu, bruno@cs.ucsb.edu  
Title: Design and Implementation Issues for Object-Oriented Concurrency  
Author: Murat Karaorman John Bruno 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California  
Abstract: This paper describes design and implementation issues for introducing concurrency to object-oriented programming. Designing a concurrency class library along with an object-oriented concurrent program design method is presented as the prefered way to extend an existing object-oriented language. A set of classes designed to facilitate concurrent programming using the sequential object-oriented language EIFFEL is proposed without modifying or extending the language or its runtime system.. The main concurrency abstractions provided by the approach are: objects as processes active objects and asynchronous remote method invocation with data-driven synchronization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agha, </author> <title> G.H. ACTORS: A Model of Concurrent Computation in Distributed Systems, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: C++ [7] , CEiffel [16]; 3. extension to the syntax and semantics of the language to support a general concurrency paradigm such as the Actor model <ref> [1] </ref> - e.g. ACT++ [12], Actalk [6]. Our concurrency mechanism, and Colin and Geib's [11] Eiffel Classes, fall in the library approach. The approach of introducing concur-rency via a class definition of Process is also used in the Choices operating system [9] where they use the C++ language.
Reference: [2] <author> Agha, G. </author> <title> Concurrent Object-Oriented Programming. </title> <journal> Communications of the ACM. </journal> <month> 33(9) (September </month> <year> 1990) </year> <month> 125. </month>
Reference-contexts: Design a new concurrent object-oriented lan guage. 2. Extend an existing object-oriented language. 3. Design a Concurrency Library. Use an existing object-oriented language and provide concurrency abstractions through external li braries. Many references and comparative discussions about concurrent object-oriented languages can be found in <ref> [2] </ref>, and [21]. Most of the earlier systems fall into the first approach: design a new object-oriented language with built-in concurrency. Some examples are: Hybrid [19], POOL [3] (and its variants), SR [4], ABCL/1 [22]. These new languages provide powerful concurrency abstractions and general-purpose programming capabilities.
Reference: [3] <author> America, P., POOL-T: </author> <title> A Parallel Object-Oriented Language., Object-Oriented Concurrent Programming, </title> <editor> ed. M. Tokoro, A. </editor> <booktitle> Yonezawa, </booktitle> <pages> pp. 199-220, </pages> <publisher> MIT Press, </publisher> <address> Cam-bridge, Mass. </address> <year> 1987. </year>
Reference-contexts: Many references and comparative discussions about concurrent object-oriented languages can be found in [2], and [21]. Most of the earlier systems fall into the first approach: design a new object-oriented language with built-in concurrency. Some examples are: Hybrid [19], POOL <ref> [3] </ref> (and its variants), SR [4], ABCL/1 [22]. These new languages provide powerful concurrency abstractions and general-purpose programming capabilities. Most of the extensions introduce concurrency to their respective languages using some combination of the following techniques: 1. inheritance from special concurrency classes that the modified compiler recognizes - e.g.
Reference: [4] <author> Andrews, </author> <title> G.R., et.al. An Overview of the SR Language and implementation. </title> <note> ACM Transactions on Programming Languages and Systems.10 (January 1988) 51. </note>
Reference-contexts: Many references and comparative discussions about concurrent object-oriented languages can be found in [2], and [21]. Most of the earlier systems fall into the first approach: design a new object-oriented language with built-in concurrency. Some examples are: Hybrid [19], POOL [3] (and its variants), SR <ref> [4] </ref>, ABCL/1 [22]. These new languages provide powerful concurrency abstractions and general-purpose programming capabilities. Most of the extensions introduce concurrency to their respective languages using some combination of the following techniques: 1. inheritance from special concurrency classes that the modified compiler recognizes - e.g.
Reference: [5] <author> Bershad, </author> <title> B.N., et.al. PRESTO: A System for Object-Oriented Parallel Programming. </title> <journal> Software-Practice and Experience. </journal> <month> 18 (August </month> <year> 1988) </year> <month> 713. </month>
Reference-contexts: These new languages provide powerful concurrency abstractions and general-purpose programming capabilities. Most of the extensions introduce concurrency to their respective languages using some combination of the following techniques: 1. inheritance from special concurrency classes that the modified compiler recognizes - e.g. Eiffel// [10] , PRESTO <ref> [5] </ref> ; 2. special keywords, modifiers or preprocessing techniques to modify or extend the language syntax and semantics - e.g. C++ [7] , CEiffel [16]; 3. extension to the syntax and semantics of the language to support a general concurrency paradigm such as the Actor model [1] - e.g.
Reference: [6] <author> Briot, J-. P. Actalk: </author> <title> A testbed for classifying and designing actor languages in Smalltalk-80 environment. </title> <booktitle> In Proceedings of the Third ECOOP Conference '89.(July 10-4 1989, </booktitle> <address> Nottingham), </address> <publisher> Cambridge University Press, </publisher> <year> 1989, </year> <month> pp.109-129. </month>
Reference-contexts: C++ [7] , CEiffel [16]; 3. extension to the syntax and semantics of the language to support a general concurrency paradigm such as the Actor model [1] - e.g. ACT++ [12], Actalk <ref> [6] </ref>. Our concurrency mechanism, and Colin and Geib's [11] Eiffel Classes, fall in the library approach. The approach of introducing concur-rency via a class definition of Process is also used in the Choices operating system [9] where they use the C++ language.
Reference: [7] <author> Buhr, </author> <title> P.A., et.al. C++: Concurrency in the Object-oriented Language C++. </title> <note> Software-Practice and Experience.22(2) (February 1992) 137. </note>
Reference-contexts: Eiffel// [10] , PRESTO [5] ; 2. special keywords, modifiers or preprocessing techniques to modify or extend the language syntax and semantics - e.g. C++ <ref> [7] </ref> , CEiffel [16]; 3. extension to the syntax and semantics of the language to support a general concurrency paradigm such as the Actor model [1] - e.g. ACT++ [12], Actalk [6]. Our concurrency mechanism, and Colin and Geib's [11] Eiffel Classes, fall in the library approach. <p> Buhr et.al.[8] mention some problems with library design for introducing concurrency, but their arguments are mostly pertaining to the context of the concurrency mechanism they adopted for C++ <ref> [7] </ref>, a C++ extension. 4 A Concurrency Library Design and Im plementation for Eiffel. In this section we briefly describe some properties of our concurrency mechanism for Eiffel . A fuller description, complete with examples, can be found in [14].
Reference: [8] <author> Buhr, P.A., Ditchfield, G. </author> <title> Adding concur-rency to a programming language. </title> <booktitle> In Proceedings of USENIX C++ Technical Conference (August 10-13, 1992, </booktitle> <address> Portland Or.) </address> <publisher> USENIX Association, </publisher> <address> Berkeley, </address> <year> 1992, </year> <pages> pp. 207-223. </pages>
Reference-contexts: Without having explicit control over the scheduling and preemption of multiple threads in a shared-address space many new technical difficulties arise. These difficulties are related with the concurrent execution of an object's methods, and non-reentrant calls. Some of these issues have been mentioned in <ref> [8] </ref>. A concurrency mechanism with multi threaded active objects must satisfactorily address the interference problem with respect to data encapsulation, procedural abstraction, and reusability issues that emerge due to the potential arbitrary interleavings of an object's methods.
Reference: [9] <author> Campbell, R., Islam, N., Madany, P. </author> <title> Choices, Frameworks and Refinement. </title> <booktitle> Computing Systems, </booktitle> <month> 5(3) </month> <year> (1992) </year> <month> 217-257. </month>
Reference-contexts: ACT++ [12], Actalk [6]. Our concurrency mechanism, and Colin and Geib's [11] Eiffel Classes, fall in the library approach. The approach of introducing concur-rency via a class definition of Process is also used in the Choices operating system <ref> [9] </ref> where they use the C++ language. The library based solutions are attractive since they do not replace the existing software development platform. However, the sequential execution semantics of the host language may impose restrictions on providing type-safety and intra-object concurrency.
Reference: [10] <author> Caromel, D. </author> <title> Toward a Method of Object-Oriented Concurrent Programming. </title> <journal> Communications of the ACM. </journal> <month> 37(8) (September </month> <year> 1993), </year> <pages> pp. 90-102. </pages>
Reference-contexts: These new languages provide powerful concurrency abstractions and general-purpose programming capabilities. Most of the extensions introduce concurrency to their respective languages using some combination of the following techniques: 1. inheritance from special concurrency classes that the modified compiler recognizes - e.g. Eiffel// <ref> [10] </ref> , PRESTO [5] ; 2. special keywords, modifiers or preprocessing techniques to modify or extend the language syntax and semantics - e.g. <p> Septem-ber 1993 issue of the Communications of the ACM contains 4 different proposals for introducing concurrency to Eiffel language <ref> [10] </ref>, Page 4 [14], [16], [18], all with quite distinct ap-proaches. <p> The type, T, of return value is the actual type returned by obj's method feature. This is a data-driven synchronization scheme, based on asynchronous message passing, and is referred to as the wait-by-necessity by Caromel <ref> [10] </ref> . The CONCURRENCY class provides two methods to access the result of a remote method invocation. Both of the methods take a single argument, a call id, which is returned by the corresponding remote invocation as a handle to obtain the actual result in the future.
Reference: [11] <author> Colin, J-.F., Geib, J-.M. </author> <title> Eiffel Classes for concurrent programming. </title> <booktitle> In Proceedings of TOOLS-4 '91 Conference. </booktitle> <publisher> Prentice Hall 1991, pp.23-34. </publisher>
Reference-contexts: C++ [7] , CEiffel [16]; 3. extension to the syntax and semantics of the language to support a general concurrency paradigm such as the Actor model [1] - e.g. ACT++ [12], Actalk [6]. Our concurrency mechanism, and Colin and Geib's <ref> [11] </ref> Eiffel Classes, fall in the library approach. The approach of introducing concur-rency via a class definition of Process is also used in the Choices operating system [9] where they use the C++ language. The library based solutions are attractive since they do not replace the existing software development platform.
Reference: [12] <author> Kafura, D.G., Lee, K.H. </author> <title> Inheritance in ACtor based concurrent object-oriented languages. </title> <booktitle> In Proceedings of ECOOP '89(July 10-14, </booktitle> <address> Nottingham). </address> <publisher> Cambridge University Press, </publisher> <year> 1989, </year> <month> pp.131-145. </month>
Reference-contexts: C++ [7] , CEiffel [16]; 3. extension to the syntax and semantics of the language to support a general concurrency paradigm such as the Actor model [1] - e.g. ACT++ <ref> [12] </ref>, Actalk [6]. Our concurrency mechanism, and Colin and Geib's [11] Eiffel Classes, fall in the library approach. The approach of introducing concur-rency via a class definition of Process is also used in the Choices operating system [9] where they use the C++ language.
Reference: [13] <author> Karaorman, M., and Bruno, J. </author> <title> A con-currency mechanism for sequential Eiffel. </title> <booktitle> Page 8 In Proceedings of TOOLS USA '92 Con--ference(Aug. </booktitle> <pages> 3-6, </pages> <address> Santa Barbara, Calif.). </address> <publisher> Prentice Hall 1992, pp.63-77. </publisher>
Reference-contexts: In this paper we report the experiences we gained from introducing concurrency to the object-oriented language, Eiffel [17], by providing a set of Class Libraries <ref> [13] </ref>, and an associated concurrent programming design method [14]. The main concurrency abstractions provided by our mechanism are objects as processes active objects and asynchronous remote method invocation with data-driven synchronization.
Reference: [14] <author> Karaorman, M. and Bruno, J. </author> <title> Introducing Concurrency to a Sequential Language. </title> <journal> Communications of the ACM. </journal> <month> 37(8) (September </month> <year> 1993), </year> <pages> pp. 103-116. </pages>
Reference-contexts: In this paper we report the experiences we gained from introducing concurrency to the object-oriented language, Eiffel [17], by providing a set of Class Libraries [13], and an associated concurrent programming design method <ref> [14] </ref>. The main concurrency abstractions provided by our mechanism are objects as processes active objects and asynchronous remote method invocation with data-driven synchronization. <p> A full description of our concurrency mechanism, and an associated concurrent programming design method describing how a concurrent application can be designed from sequential object specifications, and how this process can be automated, along with some examples can be found in <ref> [14] </ref>. 2 Design Issues for Concurrency Ab stractions. The central abstraction for concurrency in most parallel programming systems is the notion of process or thread of control, which represents a virtual processor executing instructions within a context. <p> Septem-ber 1993 issue of the Communications of the ACM contains 4 different proposals for introducing concurrency to Eiffel language [10], Page 4 <ref> [14] </ref>, [16], [18], all with quite distinct ap-proaches. <p> In this section we briefly describe some properties of our concurrency mechanism for Eiffel . A fuller description, complete with examples, can be found in <ref> [14] </ref>. In our concurrency model we unify the notion of a process and the notion of an object, arriving at the concept of an active object. Objects can become active only if they inherit from the CONCURRENCY Class. <p> Attach is significantly cheaper than split, since it doesn't involve creation of a new address space, Attach is also the Page 5 only mechanism to share active objects. Algo--rithms for split and attach are given in <ref> [14] </ref>. In the sequential object oriented paradigm, method invocation is a synchronous procedure call, and objects are passive entities, doing work only when their methods are invoked. The CONCURRENCY Class implements a non-blocking, asynchronous method invocation mechanism called remote invoke. <p> All the underlying communication is encapsulated and hidden from the application. Since active objects reside in separate address spaces, objects that appear as parameters of remote methods of active objects can not be passed by reference but must be (deep) copied. In <ref> [14] </ref> we prescribe a new design method which provides static-type checking, and variable-size argument passing capabilities for remote invocations which results in a simpler, safer, and more transparent utilization of the remote invoke method.
Reference: [15] <author> Probert, D., Bruno, J., Karaorman, M. </author> <title> SPACE: A New Approach to Operating System Abstraction. </title> <booktitle> In Proceedings of International Workshop on Object Orientation in Operating Systems(October 17-18, </booktitle> <address> 1991 Palo Alto, CA). </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1991, </year> <pages> pp. 133-137. </pages>
Reference-contexts: This points us to an important issue concerning library based language extensions: you cannot do better than what the underlying operating system provides for supporting multiple threads. We have also been investigating how to build better operating Page 7 system abstractions to provide object support in another related study <ref> [15] </ref>. An advantage of library based extensions is the ability to tailor the low-level implementation details to the specific architecture or operating system at hand. Our mechanism can work with a light-weight threads package for better performance, but the newer versions of Eiffel run-time poses difficulties in ensuring correctness.
Reference: [16] <author> Lohr, K.-P. </author> <title> Concurrency Annotations for Reusable Software. </title> <journal> Communications of the ACM. </journal> <month> 37(8) (September </month> <year> 1993), </year> <month> pp.81-89. </month>
Reference-contexts: Eiffel// [10] , PRESTO [5] ; 2. special keywords, modifiers or preprocessing techniques to modify or extend the language syntax and semantics - e.g. C++ [7] , CEiffel <ref> [16] </ref>; 3. extension to the syntax and semantics of the language to support a general concurrency paradigm such as the Actor model [1] - e.g. ACT++ [12], Actalk [6]. Our concurrency mechanism, and Colin and Geib's [11] Eiffel Classes, fall in the library approach. <p> The library approach is most recent, and has been influenced by most of the earlier work on concurrency. The latest trends for object-based concurrency emphasize and address issues such as reusability and compatibility with object-oriented software engineering techniques as fundamental requirements <ref> [16] </ref>, [20]. A major focus of our work has been to address the issues of reusability and compatibility with the object-oriented paradigm. 3 On Designing Libraries to Introduce Concurrency. <p> Septem-ber 1993 issue of the Communications of the ACM contains 4 different proposals for introducing concurrency to Eiffel language [10], Page 4 [14], <ref> [16] </ref>, [18], all with quite distinct ap-proaches.
Reference: [17] <author> Meyer, B., </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice-Hall, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: In this paper we report the experiences we gained from introducing concurrency to the object-oriented language, Eiffel <ref> [17] </ref>, by providing a set of Class Libraries [13], and an associated concurrent programming design method [14]. The main concurrency abstractions provided by our mechanism are objects as processes active objects and asynchronous remote method invocation with data-driven synchronization. Since we did not modify or extend the Eiffel Language [17] or <p> Eiffel <ref> [17] </ref>, by providing a set of Class Libraries [13], and an associated concurrent programming design method [14]. The main concurrency abstractions provided by our mechanism are objects as processes active objects and asynchronous remote method invocation with data-driven synchronization. Since we did not modify or extend the Eiffel Language [17] or its runtime system, the essential principles of sequential object-oriented programming offered by Eiffel are not sacrificed in our work. We present our concurrency abstractions Page 1 as encapsulated behavior of Eiffel objects that can be inherited from the Concurrency Class. <p> Reuse of active objects is supported in a different way. Since most of the synchronization and request-service policy is implemented inside the scheduler method, a concurrent class can be extended via inheritance and redefinition of the scheduler method. The described system is implemented using version 2.2 Eiffel of ISE <ref> [17] </ref>, running on Sun's UNIX based Sun OS 3.0. It is written largely in Eiffel, with the low level operating system and inter-process-communication (IPC) routines written in C language as external Eiffel routines.
Reference: [18] <author> Meyer, B., </author> <title> Systematic Concurrent Object-Oriented Programming. </title> <journal> Communications of the ACM. </journal> <month> 37(8) (September </month> <year> 1993), </year> <pages> pp. 56-80. </pages>
Reference-contexts: Septem-ber 1993 issue of the Communications of the ACM contains 4 different proposals for introducing concurrency to Eiffel language [10], Page 4 [14], [16], <ref> [18] </ref>, all with quite distinct ap-proaches.
Reference: [19] <author> Nierstrasz, O.M. </author> <title> Active Objects in Hybrid. </title> <journal> ACM SIGPLAN Notices. </journal> <note> 22 (Decem-ber 1987) 243. </note>
Reference-contexts: Many references and comparative discussions about concurrent object-oriented languages can be found in [2], and [21]. Most of the earlier systems fall into the first approach: design a new object-oriented language with built-in concurrency. Some examples are: Hybrid <ref> [19] </ref>, POOL [3] (and its variants), SR [4], ABCL/1 [22]. These new languages provide powerful concurrency abstractions and general-purpose programming capabilities.
Reference: [20] <author> Nierstrasz, O.M. </author> <title> Next 700 concurrent object-oriented languages Reflections on the future of object-based concur-rency. In Object Composition, </title> <editor> ed. </editor> <address> D.C. </address> <institution> Tsichritzis, pp.165-187, Centre Universi-taire d'Informatique, University of Geneva, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: The library approach is most recent, and has been influenced by most of the earlier work on concurrency. The latest trends for object-based concurrency emphasize and address issues such as reusability and compatibility with object-oriented software engineering techniques as fundamental requirements [16], <ref> [20] </ref>. A major focus of our work has been to address the issues of reusability and compatibility with the object-oriented paradigm. 3 On Designing Libraries to Introduce Concurrency. <p> Reply scheduling is the control the client has over the delivery of the reply and request scheduling is the control the active object object server has over the acceptance and service of the requests <ref> [20] </ref>. Message acceptance is asynchronous and explicit. Also accepting a message is separated from actually serving the request. Messages delivered to the communication buffer but not yet accepted into the request queue are called pending requests.
Reference: [21] <author> Papathomas, M. </author> <title> Concurrency Issues in Object-Oriented Languages.Object Oriented Development Technical Report, </title> <institution> Cen-tre Universitaire Informatique, University of Geneva, ed. </institution> <address> D. </address> <publisher> Tsichritzis, </publisher> <pages> pp. 207-245, </pages> <year> 1989. </year>
Reference-contexts: Design a new concurrent object-oriented lan guage. 2. Extend an existing object-oriented language. 3. Design a Concurrency Library. Use an existing object-oriented language and provide concurrency abstractions through external li braries. Many references and comparative discussions about concurrent object-oriented languages can be found in [2], and <ref> [21] </ref>. Most of the earlier systems fall into the first approach: design a new object-oriented language with built-in concurrency. Some examples are: Hybrid [19], POOL [3] (and its variants), SR [4], ABCL/1 [22]. These new languages provide powerful concurrency abstractions and general-purpose programming capabilities.
Reference: [22] <author> Yonezawa, A., et.al., </author> <title> Modelling and Programming in an Object-Oriented Concurrent Language ABCL/1. </title> <booktitle> Object-Oriented Concurrent Programming, </booktitle> <pages> pp. 55-89, </pages> <publisher> MIT Press, </publisher> <address> Cambridge, Mass. </address> <year> 1987. </year> <pages> Page 9 </pages>
Reference-contexts: Many references and comparative discussions about concurrent object-oriented languages can be found in [2], and [21]. Most of the earlier systems fall into the first approach: design a new object-oriented language with built-in concurrency. Some examples are: Hybrid [19], POOL [3] (and its variants), SR [4], ABCL/1 <ref> [22] </ref>. These new languages provide powerful concurrency abstractions and general-purpose programming capabilities. Most of the extensions introduce concurrency to their respective languages using some combination of the following techniques: 1. inheritance from special concurrency classes that the modified compiler recognizes - e.g.
References-found: 22

