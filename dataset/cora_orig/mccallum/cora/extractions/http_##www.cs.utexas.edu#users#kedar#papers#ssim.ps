URL: http://www.cs.utexas.edu/users/kedar/papers/ssim.ps
Refering-URL: http://www.cs.utexas.edu/users/kedar/papers/ssim.html
Root-URL: 
Title: A Simple Characterization of Stuttering Bisimulation  
Author: Kedar S. Namjoshi 
Address: Austin, U.S.A.  
Affiliation: Department of Computer Sciences, The University of Texas at  
Abstract: Showing equivalence of two systems at different levels of abstraction often entails mapping a single step in one system to a sequence of steps in the other, where the relevant state information does not change until the last step. In [BCG 88,dNV 90], bisimulations that take into account such "stuttering" are formulated. These definitions are, however, difficult to use in proofs of bisimulation, as they often require one to exhibit a finite, but unbounded sequence of transitions to match a single transition; thus introducing a large number of proof obligations. We present an alternative formulation of bisimulation under stuttering, in terms of a ranking function over a well-founded set. It has the desirable property, shared with strong bisimulation [Mil 90], that it requires matching single transitions only, which considerably reduces the number of proof obligations. This makes proofs of bisimulation short, and easier to demonstrate and understand. We show that the new formulation is equivalent to the original one, and illustrate its use with non-trivial ex amples that have infinite state spaces and exhibit unbounded stuttering.
Abstract-found: 1
Intro-found: 1
Reference: [AO 91] <author> Apt, K. R., Olderog, E-R. </author> <title> Verification of Sequential and Concurrent Programs, </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The use of rank functions and well-founded sets is inspired by their use in replacing operational arguments for termination of do-od loops with a proof rule that is checked for a single generic iteration (cf. <ref> [AO 91] </ref>). To the best of our knowledge, this is the first use of such concepts in a bisimulation definition. It seems possible that the ideas in this paper are applicable to other forms of bisimulation under stuttering, such as weak bisimulation [Mil 90], and branching bisimulation [GW 89].
Reference: [BCG 88] <author> Browne, M. C., Clarke, E. M., Grumberg, O. </author> <title> Characterizing Finite Kripke Structures in Propositional Temporal Logic, </title> <journal> Theor. Comp. Sci., </journal> <volume> vol. 59, </volume> <pages> pp. 115-131, </pages> <year> 1988. </year>
Reference-contexts: Stuttering arises in various contexts, especially as a result of operations that hide information, or refine actions to a finer grain of atomicity. In [BCG 88,dNV 90], bisimulations that take into account such "stuttering" are defined. It is shown in <ref> [BCG 88] </ref> that states related by a stuttering bisimulation ? This work was supported in part by SRC Contract 96-DP-388. The author can be reached at kedar@cs.utexas.edu. satisfy the same formulas of the powerful branching temporal logic CTL fl [EH 82] that do not use the next-time operator, X. <p> We have chosen to focus on stuttering bisimulation because of its close connection to CTL fl . The paper is structured as follows: Section 2 contains the definition of stuttering bisimulation from <ref> [BCG 88] </ref>, and the definition of well-founded bisimulation. The equivalence of the two formulations is shown in Section 3. Applications of the well-founded bisimulation proof rule to the alternating bit protocol and token ring protocols are presented in Section 4, together with a new quotient construction for stuttering bisimulation equivalences. <p> We write s ! t instead of (s; t) 2 !. We only consider transition systems with denumerable branching, i.e., where for every state s, jft j s ! tgj is at most !. fl Definition (Stuttering Bisimulation) (cf. <ref> [BCG 88] </ref> 1 ) Let A = (S; !; L; I; AP ) be a TS. A relation B S fi S is a stuttering bisimu-lation on A iff B is symmetric, and For every s; t such that (s; t) 2 B, 1. <p> The formal definition of match is given in the appendix. States s and t are stuttering bisimilar iff there is a stuttering bisimulation relation B for which (s; t) 2 B. fl Examples: 1 <ref> [BCG 88] </ref> defines "stuttering equivalence" for finite-state, total transition systems, as the limit of a converging sequence of equivalences. For finite-state systems, these are just the Knaster-Tarski approximations to the greatest solution of the symmetric version of this definition. <p> From symmetry arguments (cf. [ES 93,CFJ 93]), a property holds of all processes iff it holds for process 0. The proof given in the paper uses the <ref> [BCG 88] </ref> definition and is quite lengthy; we indicate here how to use well-founded bisimulation. Each process alternates between blocking receive and send token transfer actions, with a finite number of local steps in between.
Reference: [BCG 89] <author> Browne, M. C., Clarke, E. M., Grumberg, O. </author> <title> Reasoning about Networks with Many Identical Finite State Processes, </title> <journal> Information and Computation, </journal> <volume> vol. 81, no. 1, </volume> <pages> pp. 13-31, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: This introduces n proof obligations, and complicates the proof. In contrast, with the new formulation, one need consider only a single transition from t. 4.2 Simple Token Ring Protocols In [EN 95] (cf. <ref> [BCG 89] </ref>), stuttering bisimulation is used to show that for token rings of similar processes, a small cutoff size ring is equivalent to one of any larger size. [EN 95] shows that the computation trees of process 0 in rings of size 2 and of size n, n 2, are stuttering
Reference: [CFJ 93] <author> Clarke, E.M., Filkorn, T., Jha, S. </author> <title> Exploiting Symmetry in Temporal Logic Model Checking, </title> <booktitle> 5th CAV, </booktitle> <publisher> Springer-Verlag LNCS 697. </publisher>
Reference: [EH 82] <author> Emerson, E. A., Halpern, J. Y. </author> <title> "Sometimes" and "Not Never" Revisited: On Branching versus Linear Time Temporal Logic. </title> <booktitle> in POPL, </booktitle> <year> 1982. </year>
Reference-contexts: It is shown in [BCG 88] that states related by a stuttering bisimulation ? This work was supported in part by SRC Contract 96-DP-388. The author can be reached at kedar@cs.utexas.edu. satisfy the same formulas of the powerful branching temporal logic CTL fl <ref> [EH 82] </ref> that do not use the next-time operator, X.
Reference: [EN 95] <author> Emerson, </author> <title> E.A., Namjoshi, K.S. Reasoning about Rings. </title> <booktitle> in POPL, </booktitle> <year> 1995. </year>
Reference-contexts: In this section, we look at several applications of this proof rule. We outline the proofs of well-founded bisimulation for the alternating bit protocol from [Mil 90], and a class of token ring protocols studied in <ref> [EN 95] </ref>. We also present a new quotient construction for a well-founded bisimulation that is an equivalence. In all of these applications, the construction of the appropriate well-founded set and ranking function is quite straightforward. <p> This introduces n proof obligations, and complicates the proof. In contrast, with the new formulation, one need consider only a single transition from t. 4.2 Simple Token Ring Protocols In <ref> [EN 95] </ref> (cf. [BCG 89]), stuttering bisimulation is used to show that for token rings of similar processes, a small cutoff size ring is equivalent to one of any larger size. [EN 95] shows that the computation trees of process 0 in rings of size 2 and of size n, n <p> with the new formulation, one need consider only a single transition from t. 4.2 Simple Token Ring Protocols In <ref> [EN 95] </ref> (cf. [BCG 89]), stuttering bisimulation is used to show that for token rings of similar processes, a small cutoff size ring is equivalent to one of any larger size. [EN 95] shows that the computation trees of process 0 in rings of size 2 and of size n, n 2, are stuttering bisimilar. It follows that a property over process 0 is true of all sizes of rings iff it is true of the ring of size 2.
Reference: [ES 93] <author> Emerson, </author> <title> E.A., Sistla, A.P. Symmetry and Model Checking, </title> <booktitle> 5th CAV, </booktitle> <publisher> Springer-Verlag LNCS 697. </publisher>
Reference: [Fr 86] <author> Francez, N. </author> <title> Fairness, </title> <publisher> Springer-Verlag, </publisher> <year> 1986. </year> <note> [GW 89] van Glabbeek, </note> <author> R. J., Weijland, W. P. </author> <title> Branching time and abstraction in bisimulation semantics. </title> <booktitle> in Information Processing 89, </booktitle> <publisher> Elsevier Science Publishers, North-Holland, </publisher> <year> 1989. </year>
Reference: [GFMdR 83] <author> Grumberg, O., Francez, N., Makowski, J., de Roever, W-P. </author> <title> A proof rule for fair termination, </title> <booktitle> in Information and Control, </booktitle> <year> 1983. </year>
Reference: [KK 91] <author> Klarlund, N., Kozen, D. </author> <title> Rabin measures and their applications to fairness and automata theory. </title> <booktitle> in LICS, </booktitle> <year> 1991. </year>
Reference-contexts: An interesting question is whether a similar characterization can be shown for weak bisimulation [Mil 90]. Many proof rules for temporal properties are based on well-foundedness arguments, especially those for termination of programs under fairness constraints (cf. [GFMdR 83,Fr 86,AO 91]). Vardi [Va 87], and Klarlund and Kozen <ref> [KK 91] </ref> develop such proof rules for very general types of linear temporal properties. Our use of well-foundedness arguments for defining a bisimulation appears to be new, and, we believe, of intrinsic mathematical interest.
Reference: [La 80] <author> Lamport, L. </author> <title> "Sometimes" is Sometimes "Not Never". </title> <booktitle> in POPL, </booktitle> <year> 1980. </year>
Reference-contexts: If the program state is defined by the values of program variables, then the intermediate steps introduce a finite repetition of the same state, a phenomenon called "stuttering" by Lamport <ref> [La 80] </ref>. Stuttering arises in various contexts, especially as a result of operations that hide information, or refine actions to a finer grain of atomicity. In [BCG 88,dNV 90], bisimulations that take into account such "stuttering" are defined.
Reference: [Mil 90] <author> Milner, R. </author> <title> Communication and Concurrency, </title> <booktitle> Prentice-Hall International Series in Computer Science. Edited by C.A.R. Hoare. [dNV 90] de Nicola, </booktitle> <editor> R., Vaandrager, F. </editor> <title> Three logics for branching bisimulation. </title> <note> in LICS, 1990. Full version in Journal of the ACM, </note> <month> 42(2) </month> <pages> 458-487, </pages> <year> 1995. </year>
Reference-contexts: The main contribution of this paper is a simple alternative formulation, called well-founded bisimulation, because is based on the reduction of a rank function over a well-founded set. The new formulation has the pleasant property that, like strong bisimulation <ref> [Mil 90] </ref>, it can be checked by considering single transitions only. <p> To the best of our knowledge, this is the first use of such concepts in a bisimulation definition. It seems possible that the ideas in this paper are applicable to other forms of bisimulation under stuttering, such as weak bisimulation <ref> [Mil 90] </ref>, and branching bisimulation [GW 89]. We have chosen to focus on stuttering bisimulation because of its close connection to CTL fl . The paper is structured as follows: Section 2 contains the definition of stuttering bisimulation from [BCG 88], and the definition of well-founded bisimulation. <p> In this section, we look at several applications of this proof rule. We outline the proofs of well-founded bisimulation for the alternating bit protocol from <ref> [Mil 90] </ref>, and a class of token ring protocols studied in [EN 95]. We also present a new quotient construction for a well-founded bisimulation that is an equivalence. In all of these applications, the construction of the appropriate well-founded set and ranking function is quite straightforward. <p> In all of these applications, the construction of the appropriate well-founded set and ranking function is quite straightforward. We believe that this is the case in other applications of stuttering bisimulation as well. 4.1 The Alternating Bit Protocol A version of the alternating bit protocol is given in <ref> [Mil 90] </ref>, which we follow closely. The protocol has four entities : Sender and Replier processes, and message (Trans) and acknowledgement (Ack) channels. Messages and acknowledge-ments are tagged with bits 0 and 1 alternately. For simplicity, message contents are ignored; both channels are sequences of bits. <p> So clause (2c) holds. ut 5 Related Work and Conclusions Other formulations of bisimulation under stuttering have been proposed; however, they too involve reasoning about finite, but unbounded sequences of transitions. Examples include branching bisimulation [GW 89], divergence sensitive stuttering [dNV 90], and weak bisimulation <ref> [Mil 90] </ref>. We believe that it is possible to characterize branching bisimulation in a manner similar to our characterization of stuttering bisimulation, given the close connection between the two that is pointed out in [dNV 90]. <p> <ref> [Mil 90] </ref>. We believe that it is possible to characterize branching bisimulation in a manner similar to our characterization of stuttering bisimulation, given the close connection between the two that is pointed out in [dNV 90]. An interesting question is whether a similar characterization can be shown for weak bisimulation [Mil 90]. Many proof rules for temporal properties are based on well-foundedness arguments, especially those for termination of programs under fairness constraints (cf. [GFMdR 83,Fr 86,AO 91]). Vardi [Va 87], and Klarlund and Kozen [KK 91] develop such proof rules for very general types of linear temporal properties.
Reference: [Va 87] <author> Vardi, M. </author> <title> Verification of Concurrent Programs The Automata Theoretic Framework. </title> <note> in LICS, 1987. Full version in Annals of Pure and Applied Logic, </note> <month> 51 </month> <pages> 79-98, </pages> <year> 1991. </year>
Reference-contexts: An interesting question is whether a similar characterization can be shown for weak bisimulation [Mil 90]. Many proof rules for temporal properties are based on well-foundedness arguments, especially those for termination of programs under fairness constraints (cf. [GFMdR 83,Fr 86,AO 91]). Vardi <ref> [Va 87] </ref>, and Klarlund and Kozen [KK 91] develop such proof rules for very general types of linear temporal properties. Our use of well-foundedness arguments for defining a bisimulation appears to be new, and, we believe, of intrinsic mathematical interest.
References-found: 13

