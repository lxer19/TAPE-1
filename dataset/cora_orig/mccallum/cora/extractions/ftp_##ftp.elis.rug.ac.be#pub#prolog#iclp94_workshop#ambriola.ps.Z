URL: ftp://ftp.elis.rug.ac.be/pub/prolog/iclp94_workshop/ambriola.ps.Z
Refering-URL: http://www.informatik.uni-trier.de/~ley/db/conf/iclp/iclp94-w1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Proposal to Merge Object Orientation, Logic Programming, and Multiple Tuple Spaces three paradigms do
Author: Vincenzo Ambriola Giovanni A. Cignoni Laura Semini 
Note: These  
Affiliation: Dipartimento di Informatica, Universita di Pisa  
Abstract: We propose to merge in a new programming paradigm object orientation, logic programming, and multiple tuple spaces. The object oriented model supplies a well defined frame for the design of languages to be used for modular development of large systems. Logic programming allows to describe a computation by declarative definition of its properties. Finally, multiple tuple spaces provide a powerful model to describe cooperation of concurrent activities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Ambriola, P. Ciancarini, and C. Montangero. </author> <title> Software Process Enactment in Oikos. </title> <booktitle> In Proc. ACM SIGSOFT 90, 4th Symposium on Software Development Environments, </booktitle> <year> 1990. </year>
Reference-contexts: This merge results from the experience of three years of programming in tuple space logic languages, within the Oikos project at the University of Pisa <ref> [1, 3] </ref>. Objects usually provide an interface that specifies both the messages that are accepted as input and those that are produced as output.
Reference: [2] <author> V. Ambriola, G. A. Cignoni, and L. Semini. </author> <title> The Language eta. </title> <type> Technical Report R/6/108, </type> <institution> Progetto Finalizzato CNR Sistemi Informatici e Calcolo Parallelo, </institution> <year> 1994. </year>
Reference-contexts: The appealing features of this merge prompted us to make the new paradigm concrete by the definition of a programming language. The language eta (Everything buT Assignment) is a multiple tuple space logic language that borrows the programming style of the object oriented paradigm <ref> [2] </ref>. In defining eta, our task is the design of a language for the development of large, real, and distributed systems. As a consequence we also take into consideration notions like control and reliability.
Reference: [3] <author> V. Ambriola and C. Montangero. </author> <title> Modeling the Software Development Process. </title> <editor> In V. Ambriola and G. Tortora, editors, </editor> <booktitle> Proc. Advances in Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 41-72, </pages> <address> Singapore, 1993. </address> <publisher> World Scientific Publishing Company. </publisher>
Reference-contexts: This merge results from the experience of three years of programming in tuple space logic languages, within the Oikos project at the University of Pisa <ref> [1, 3] </ref>. Objects usually provide an interface that specifies both the messages that are accepted as input and those that are produced as output.
Reference: [4] <author> V. Ambriola and L. Semini. </author> <title> Control Specification in Tuple Space Based Languages. </title> <type> Technical Report 19-93, </type> <institution> Dipartimento di Informatica, Universita di Pisa, </institution> <year> 1993. </year>
Reference-contexts: This extension orthogonally combines the shared memory and the message passing paradigms, providing a powerful model to develop large systems as collection of components. Languages based on multiple tuple spaces are Linda-3 [9], ESP [6], PoliS [8], and Pate <ref> [4] </ref>. t 1 ; : : : : : : ; t n ? - A tuple space with two associated agents. fl This work has been partially founded by Progetto Finalizzato Sistemi Informatici e Calcolo Parallelo del CNR, Sottoprogetto 6 : : : + Logic Programming The combination of multiple <p> Finally, bindings in the Prolog program are limited to the single clauses, as usual. Control Path expressions have been introduced in Pate as a mechanism to constrain a wild non-determinism in rules activations <ref> [4] </ref>. In eta they are extended to specify critical regions as well as sequencing, alternation, and rule priority. A path expression is similar to a regular expression.
Reference: [5] <author> A. Brogi and P. Ciancarini. </author> <title> The Concurrent Language Shared Prolog. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(1) </volume> <pages> 99-123, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Multiple Tuple Space Languages Tuple space concurrent languages exploit, for cooperation among processes, the shared memory paradigm. The store (i.e. the tuple space) is a multiset of tuples that represent the cooperation state. Processes (called agents) communicate by reading and writing on it <ref> [7, 5] </ref>. The presence of some configurations of the tuple space causes the agents to react with a transition. A transition is an operation composed of a guarded access to the tuple space, a computation, and a write operation on the tuple space. <p> Shared Prolog <ref> [5] </ref>, as well as ESP, Pate, and PoliS, belong to this model: a tuple is a logical fact and the interaction between the tuple space and the agents is controlled by the unification algorithm.
Reference: [6] <author> A. Bucci, P. Ciancarini, and C. Montangero. </author> <title> A Distributed Logic Language Based on Multiple Tuple Spaces. </title> <booktitle> In Proc. Logic Programming Conference, </booktitle> <address> Tokio, </address> <year> 1991. </year>
Reference-contexts: Tuples are sent through the system from one tuple space to another, exploiting explicit addressing. This extension orthogonally combines the shared memory and the message passing paradigms, providing a powerful model to develop large systems as collection of components. Languages based on multiple tuple spaces are Linda-3 [9], ESP <ref> [6] </ref>, PoliS [8], and Pate [4]. t 1 ; : : : : : : ; t n ? - A tuple space with two associated agents. fl This work has been partially founded by Progetto Finalizzato Sistemi Informatici e Calcolo Parallelo del CNR, Sottoprogetto 6 : : : + Logic
Reference: [7] <author> N. Carriero and D. Gelernter. </author> <title> Coordination Languages and their Significance. </title> <journal> Communications of the ACM, </journal> <volume> 5(2) </volume> <pages> 97-107, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction Multiple Tuple Space Languages Tuple space concurrent languages exploit, for cooperation among processes, the shared memory paradigm. The store (i.e. the tuple space) is a multiset of tuples that represent the cooperation state. Processes (called agents) communicate by reading and writing on it <ref> [7, 5] </ref>. The presence of some configurations of the tuple space causes the agents to react with a transition. A transition is an operation composed of a guarded access to the tuple space, a computation, and a write operation on the tuple space.
Reference: [8] <author> P. Ciancarini. PoliS: </author> <title> a Programming Model for Multiple Tuple Spaces. </title> <booktitle> In Proc. Sixth IEEE International Workshop on Software Specification and Design, </booktitle> <year> 1991. </year>
Reference-contexts: This extension orthogonally combines the shared memory and the message passing paradigms, providing a powerful model to develop large systems as collection of components. Languages based on multiple tuple spaces are Linda-3 [9], ESP [6], PoliS <ref> [8] </ref>, and Pate [4]. t 1 ; : : : : : : ; t n ? - A tuple space with two associated agents. fl This work has been partially founded by Progetto Finalizzato Sistemi Informatici e Calcolo Parallelo del CNR, Sottoprogetto 6 : : : + Logic Programming The
Reference: [9] <author> D. Gelernter. </author> <title> Multiple Tuple Spaces in Linda. </title> <booktitle> In Proc. Parle 89, volume 365 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Tuples are sent through the system from one tuple space to another, exploiting explicit addressing. This extension orthogonally combines the shared memory and the message passing paradigms, providing a powerful model to develop large systems as collection of components. Languages based on multiple tuple spaces are Linda-3 <ref> [9] </ref>, ESP [6], PoliS [8], and Pate [4]. t 1 ; : : : : : : ; t n ? - A tuple space with two associated agents. fl This work has been partially founded by Progetto Finalizzato Sistemi Informatici e Calcolo Parallelo del CNR, Sottoprogetto 6 : : :
Reference: [10] <author> A. Tevanian, R. F. Rashid, D. B. Golub, D. L. Black, E. Cooper, and M. V. Young. </author> <title> Mach Threads and the Unix Kernel: The Battle for Control. </title> <booktitle> In Proc. USENIX Association Conference, </booktitle> <pages> pages 185-197, </pages> <address> Phoenix, </address> <year> 1987. </year>
Reference-contexts: Each form of parallelism refers to a precise cooperation model: shared memory and message passing. These eta features, both with respect to parallelism grain and to cooperation models, look like multitasking implementations commonly used in last generation operating systems, as lightweight and heavyweight processes in Mach <ref> [10] </ref>. In eta these features are independent from any language implementation: they are formalized by language constructs rather than achieved by system calls.
References-found: 10

