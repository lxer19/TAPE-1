URL: http://www.csc.ncsu.edu/faculty/WStewart/Publications/PS_files/san-chapter.ps
Refering-URL: http://www.csc.ncsu.edu/faculty/WStewart/Publications/Publications.html
Root-URL: http://www.csc.ncsu.edu
Title: Stochastic Automata Networks  
Author: Brigitte Plateau and William J. Stewart 
Date: July 7, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. </author> <month> Atif. </month> <institution> Modelisation du Parallelisme et de la Synchronisation. These de Docteur de l'Institut National Polytechnique de Grenoble, </institution> <month> 24 September </month> <year> 1992, </year> <institution> Grenoble, France. </institution>
Reference-contexts: In SANs, it is possible to make use of symmetries as well as lumping and various superpositioning of the automata to reduce the computational burden, <ref> [1, 9, 39] </ref>. Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. <p> An automaton may actually depend on a subset of the automata in its parameter list. Lemma 7.7 (GTP: Pseudo-Commutativity) Let oe be a permutation of the integers <ref> [1; 2; : : : ; N ] </ref>, then there exists a permutation matrix, P oe of order Q N i=1 n i , such that g k=1 A (k) [A (1) ; : : : ; A (N) ] = P oe g k=1 A (oe (k)) [A (1) ; <p> Its descriptor may be written 25 as N+2E X N (i) Let 1; : : : ; N be partitioned in B groups called b 1 ; : : : ; b B , and, without loss of generality, assume that b 1 = <ref> [1; : : : ; c 2 ] </ref>, b 2 = [c 2 + 1; : : :; c 3 ], etc, for some increasing sequence of c i , with c 1 = 0, c B+1 = N .
Reference: [2] <author> W.E. </author> <title> Arnoldi. The principle of minimized iteration in the solution of the matrix eigenvalue problem. </title> <journal> Quart. Appl. Math., </journal> <volume> Vol. 9, </volume> <year> 1951, </year> <pages> pp. 17-29. </pages>
Reference-contexts: An automaton may actually depend on a subset of the automata in its parameter list. Lemma 7.7 (GTP: Pseudo-Commutativity) Let oe be a permutation of the integers <ref> [1; 2; : : : ; N ] </ref>, then there exists a permutation matrix, P oe of order Q N i=1 n i , such that g k=1 A (k) [A (1) ; : : : ; A (N) ] = P oe g k=1 A (oe (k)) [A (1) ;
Reference: [3] <author> F. Baccelli, A. Jean-Marie and I. Mitrani, </author> <title> Editors, Quantitative Methods in Parallel Systems, Part I : Stochastic Process Algebras; Basic Research Series, </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: The development of languages for specifying stochastic process algebras is mainly concerned with structural properties of the nets (compositionality, equivalence, etc.) and with the mapping of these specifications onto Markov chains for the computation of performance measures <ref> [24, 3, 7] </ref>. Although a SAN may be viewed as a stochastic process algebra, its original purpose was to provide an efficient and convenient methodology for computing performance measures rather than a means of deriving algebraic properties of complex systems, [32].
Reference: [4] <author> G. Balbo, S.Bruell and M. Sereno. </author> <title> Arrival Theorems for Product-form Stochastic Petri Nets; Proc. </title> <booktitle> of ACM Sigmetrics Conference 1994, Nashville, </booktitle> <pages> pp. 87-97, </pages> <year> 1994. </year>
Reference-contexts: This is followed in Section 5 with the presentation of a number of sufficient conditions for the existence of product forms in SANs, for in some restricted cases, product forms can indeed be found. We note in passing that in <ref> [4, 6, 14, 19, 22, 28] </ref> product forms have been found in Petri net models, using either the structure of the state space or flow properties.
Reference: [5] <author> C. Berge. Graphes et Hypergraphes. Dunod, Paris, </author> <year> 1970. </year>
Reference-contexts: Let G denote a graph whose nodes are the individual automata of a SAN and whose arcs represent dependencies among the automata within a term of the descriptor. Let T be a cutset of the cycles of G, <ref> [5] </ref>. Then T is a set of nodes of G with the property that G T does not contain a cycle where G T is the graph of G with all arcs that lead into the nodes of T removed.
Reference: [6] <author> R. Boucherie. </author> <title> A Characterization of Independence for Competing Markov Chains with Applications to Stochastic Petri Nets. </title> <journal> IEEE Transactions on Soft. Eng., </journal> <volume> Vol 20, </volume> <pages> pp. 536-544, </pages> <year> 1994. </year>
Reference-contexts: This is followed in Section 5 with the presentation of a number of sufficient conditions for the existence of product forms in SANs, for in some restricted cases, product forms can indeed be found. We note in passing that in <ref> [4, 6, 14, 19, 22, 28] </ref> product forms have been found in Petri net models, using either the structure of the state space or flow properties. <p> Jackson networks, for example, may be represented by a SAN; the reversibility results of Kelly, [26], and the competition conditions of Boucherie, <ref> [6] </ref>, can be applied to SANs leading to product forms. In this section we shall present sufficient conditions for a SAN to have a product form solution. These conditions extend those given by Boucherie and in addition may be shown to be applicable to truncated state spaces. <p> The examples provided in the paper of Boucherie, <ref> [6] </ref>; viz: the dining philosophers problem, locking in a database system, and so on, all fall into case 2. In these examples, the functions f (k) ( i k ) express a reachable state space and yield a uniform multiplicative factor.
Reference: [7] <author> P. Buchholz. </author> <title> Equivalence Relations for Stochastic Automata Networks. Computations with Markov Chains; Proceedings of the 2nd International Meeting on the Numerical Solution of Markov Chains, </title> <editor> W.J. Stewart, Ed., </editor> <publisher> Kluwer International Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: The development of languages for specifying stochastic process algebras is mainly concerned with structural properties of the nets (compositionality, equivalence, etc.) and with the mapping of these specifications onto Markov chains for the computation of performance measures <ref> [24, 3, 7] </ref>. Although a SAN may be viewed as a stochastic process algebra, its original purpose was to provide an efficient and convenient methodology for computing performance measures rather than a means of deriving algebraic properties of complex systems, [32].
Reference: [8] <author> P. Buchholz. </author> <title> Aggregation and Reduction Techniques for Hierarchical GCSPNs. </title> <booktitle> Proceedings of the 5th International Workshop on Petri Nets and Performance Models, </booktitle> <address> Toulouse, France, </address> <publisher> IEEE Press, </publisher> <pages> pp. 216-225, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. For example, in <ref> [8, 9, 10, 18, 38, 40] </ref>, equivalence relations and symmetries are used to decrease the computational burden of obtaining performance indices. In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings.
Reference: [9] <author> P. Buchholz. </author> <title> Hierarchical Markovian Models Symmetries and Aggregation; Modelling Techniques and Tools for Computer Performance Evaluation, </title> <editor> Ed. R. Pooley, J.Hillston, </editor> <publisher> Edinburgh, Scotland, </publisher> <pages> pp. 234-246, </pages> <year> 1992. </year>
Reference-contexts: In SANs, it is possible to make use of symmetries as well as lumping and various superpositioning of the automata to reduce the computational burden, <ref> [1, 9, 39] </ref>. Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. <p> Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. For example, in <ref> [8, 9, 10, 18, 38, 40] </ref>, equivalence relations and symmetries are used to decrease the computational burden of obtaining performance indices. In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings.
Reference: [10] <author> G. Chiola, C. Dutheillet, G. Franceschinis and S. Haddad. </author> <title> Stochastic Well-Formed Colored Nets and Symmetric Modeling Applications. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol 42, No. 11, </volume> <pages> pp. 1343-1360, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. For example, in <ref> [8, 9, 10, 18, 38, 40] </ref>, equivalence relations and symmetries are used to decrease the computational burden of obtaining performance indices. In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings.
Reference: [11] <author> G. Ciardo and K. Trivedi. </author> <title> Solution of Large GSPN Models. Numerical Solution of Markov Chains, </title> <editor> W.J. Stewart, Ed., </editor> <publisher> Marcel Dekker Publisher, </publisher> <address> New York, </address> <pages> pp. 565-595, </pages> <year> 1991. </year> <month> 30 </month>
Reference-contexts: In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings. In <ref> [11] </ref>, nearly independent subnets are exploited in an iterative procedure in which a global solution is obtained from partial solutions.
Reference: [12] <author> M. Davio. </author> <title> Kronecker Products and Shu*e Algebra. </title> <journal> IEEE Trans. Comput, </journal> <volume> Vol. C-30, No. 2, </volume> <pages> pp. 1099-1109, </pages> <year> 1981. </year>
Reference-contexts: Further information concerning the properties of tensor algebra may be found in Davio <ref> [12] </ref>. 3 Stochastic Automata Networks 3.1 Non-Interacting Stochastic Automata Consider the case of a system that may be modelled by two completely independent stochastic automata, each of which may be represented by a discrete-time Markov chain.
Reference: [13] <author> S. Donatelli. </author> <title> Superposed Stochastic Automata: A Class of Stochastic Petri Nets with Parallel Solution and Distributed State Space. </title> <journal> Performance Evaluation, </journal> <volume> Vol. 18, </volume> <pages> pp. 21-36, </pages> <year> 1993. </year>
Reference-contexts: In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings. In [11], nearly independent subnets are exploited in an iterative procedure in which a global solution is obtained from partial solutions. In <ref> [13] </ref> it is shown that the tensor structure of the transition matrix may be extracted from a stochastic Petri net, and in [27] that this can be used efficiently to work with the reachable state space in an iterative procedure.
Reference: [14] <author> S. Donatelli and M. Serano. </author> <title> On the Product Form Solution for Stochastic Petri Nets. </title> <booktitle> Proc. of the 13th International Conference on Applications and Theory of Petri Nets, </booktitle> <address> Sheffield, UK, </address> <pages> pp. 154-172, </pages> <year> 1992. </year>
Reference-contexts: This is followed in Section 5 with the presentation of a number of sufficient conditions for the existence of product forms in SANs, for in some restricted cases, product forms can indeed be found. We note in passing that in <ref> [4, 6, 14, 19, 22, 28] </ref> product forms have been found in Petri net models, using either the structure of the state space or flow properties. <p> In these examples, the functions f (k) ( i k ) express a reachable state space and yield a uniform multiplicative factor. Other examples may be found in <ref> [14, 19, 22, 28] </ref>. 4. Our final example explicitly displays the dependence of the function on i 0 and falls into case 1. Consider a system consisting of P units of resource and N identical processes, each represented by a three-state Markov chain.
Reference: [15] <author> P. Fernandes, B. Plateau and W.J. Stewart. </author> <title> Efficient Descriptor-Vector Multiplications in Stochastic Automata Networks. </title> <note> INRIA Report # 2935. Anonymous ftp ftp ftp.inria.fr/INRIA/Publication/RR. </note>
Reference-contexts: We now present a number of lemmas concerning generalized tensor products. Their proofs may be found in <ref> [15] </ref>. <p> that g k=1 A (k) [A (1) ; : : : ; A (N) ] = P oe g k=1 A (oe (k)) [A (1) ; : : : ; A (N) ]P T These lemmas allow the following theorem to be proven. (The proof itself may be found in <ref> [15] </ref>.) Theorem 7.1 (GTP: Algorithm) The multiplication x fi A (1) g A (2) [A (1) ] g A (3) [A (1) ; A (2) ] g g A (N) [A (1) ; : : :; A (N1) ] where x is a real vector of length Q N i=1 n
Reference: [16] <author> P. Fernandes, B. Plateau and W.J. Stewart. </author> <title> Numerical Issues for Stochastic Automata Networks. </title> <booktitle> PAPM 96, Fourth Process Algebras and Performance Modelling Workshop, </booktitle> <address> Torino, Italy, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: For SANs in discrete-time, [32], it seems that we may not be so fortunate since cycles in the functional dependency graph of the tensor product tend to occur rather more often. Following up on these results, extensive experiments conducted on a set of small examples, and reported in <ref> [16] </ref>, provided a rule of thumb for ordering automata in a network to achieve better performance. <p> In the SAN methodology, the global reachable state space is known in advance and the reachable state space of a group may be computed by means of a simple projection. A series of numerical experiments conducted on the two examples presented in Section 4 was reported in <ref> [16] </ref> and quantity the effect of these simplifications. The goal was to observe the effect on the time required to perform 10 premultiplications of the descriptor by a vector and on the amount of array storage needed.
Reference: [17] <author> J-M. Fourneau and F. Quessette. </author> <title> Graphs and Stochastic Automata Networks. Computations with Markov Chains; Proceedings of the 2nd International Meeting on the Numerical Solution of Markov Chains, </title> <editor> W.J. Stewart, Ed., </editor> <publisher> Kluwer International Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: In SANs, it is possible to make use of symmetries as well as lumping and various superpositioning of the automata to reduce the computational burden, [1, 9, 39]. Furthermore, in <ref> [17] </ref>, structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks.
Reference: [18] <author> G. Franceschinis and R. Muntz. </author> <title> Computing Bounds for the Performance Indices of Quasi-lumpable Stochastic Well-Formed Nets. </title> <booktitle> Proceedings of the 5th International Workshop on Petri Nets and Performance Models, </booktitle> <address> Toulouse, France, </address> <publisher> IEEE Press, </publisher> <pages> pp. 148-157, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. For example, in <ref> [8, 9, 10, 18, 38, 40] </ref>, equivalence relations and symmetries are used to decrease the computational burden of obtaining performance indices. In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings.
Reference: [19] <author> D. Frosh and K. Natarajan. </author> <title> Product Form Solutions for Closed Synchronized Systems of Stochastic Sequential Processes. </title> <booktitle> Proc. of 1992 International Computer Symposium, Taiwan, </booktitle> <pages> pp. 392-402, </pages> <year> 1991 </year>
Reference-contexts: This is followed in Section 5 with the presentation of a number of sufficient conditions for the existence of product forms in SANs, for in some restricted cases, product forms can indeed be found. We note in passing that in <ref> [4, 6, 14, 19, 22, 28] </ref> product forms have been found in Petri net models, using either the structure of the state space or flow properties. <p> In these examples, the functions f (k) ( i k ) express a reachable state space and yield a uniform multiplicative factor. Other examples may be found in <ref> [14, 19, 22, 28] </ref>. 4. Our final example explicitly displays the dependence of the function on i 0 and falls into case 1. Consider a system consisting of P units of resource and N identical processes, each represented by a three-state Markov chain.
Reference: [20] <author> A. Greenbaum, P.F. Dubois and G.H. Rodrique. </author> <title> Approximating the Inverse of a Matrix for use in Iterative Algorithms on Vector Processors. </title> <journal> Computing, </journal> <volume> Vol. 22, </volume> <year> 1979, </year> <pages> pp. 257-268. </pages>
Reference: [21] <author> W. Henderson and D. Lucic. </author> <title> Aggregation and Disaggregation through Insensitivity in Stochastic Petri Nets; Performance Evaluation, </title> <journal> Vol. </journal> <volume> 17, </volume> <pages> pp. 91-114, </pages> <year> 1993. </year>
Reference-contexts: We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. For example, in [8, 9, 10, 18, 38, 40], equivalence relations and symmetries are used to decrease the computational burden of obtaining performance indices. In <ref> [21] </ref>, reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings. In [11], nearly independent subnets are exploited in an iterative procedure in which a global solution is obtained from partial solutions.
Reference: [22] <author> W. Henderson and P.G. Taylor. </author> <title> Embedded Processes in Stochastic Petri Nets. </title> <journal> IEEE Trans. in Software Engineering, </journal> <volume> Vol. 17, </volume> <pages> pp 108-116, </pages> <year> 1991. </year>
Reference-contexts: This is followed in Section 5 with the presentation of a number of sufficient conditions for the existence of product forms in SANs, for in some restricted cases, product forms can indeed be found. We note in passing that in <ref> [4, 6, 14, 19, 22, 28] </ref> product forms have been found in Petri net models, using either the structure of the state space or flow properties. <p> In these examples, the functions f (k) ( i k ) express a reachable state space and yield a uniform multiplicative factor. Other examples may be found in <ref> [14, 19, 22, 28] </ref>. 4. Our final example explicitly displays the dependence of the function on i 0 and falls into case 1. Consider a system consisting of P units of resource and N identical processes, each represented by a three-state Markov chain.
Reference: [23] <author> H. Hermanns and M. Rettelbach. </author> <title> Syntax, Semantics, Equivalences, and Axioms for MTIPP. </title> <booktitle> Proc. of the 2nd Workshop on Process Algebras and Performance Modelling, </booktitle> <editor> U. Herzog, M. Rettelbach, Editors, Arbeitsberichte, </editor> <volume> Band 27, No. 4, </volume> <pages> Erlangen, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Stochastic Automata Networks and the related concept of Stochastic Process Algebras have become a hot topic of research in recent years. This research has focused on areas such as the 1 development of languages for specifying SANs and their ilk, <ref> [23, 24] </ref>, and on the development of suitable solution methods that can operate on a transition matrix given as a compact SAN descriptor.
Reference: [24] <author> J. Hillston. </author> <title> Computational Markovian Modelling using a Process Algebra. Computations with Markov Chains; Proceedings of the 2nd International Meeting on the Numerical Solution of Markov Chains, </title> <editor> W.J. Stewart, Ed., </editor> <publisher> Kluwer International Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: Stochastic Automata Networks and the related concept of Stochastic Process Algebras have become a hot topic of research in recent years. This research has focused on areas such as the 1 development of languages for specifying SANs and their ilk, <ref> [23, 24] </ref>, and on the development of suitable solution methods that can operate on a transition matrix given as a compact SAN descriptor. <p> The development of languages for specifying stochastic process algebras is mainly concerned with structural properties of the nets (compositionality, equivalence, etc.) and with the mapping of these specifications onto Markov chains for the computation of performance measures <ref> [24, 3, 7] </ref>. Although a SAN may be viewed as a stochastic process algebra, its original purpose was to provide an efficient and convenient methodology for computing performance measures rather than a means of deriving algebraic properties of complex systems, [32].
Reference: [25] <author> A. Jennings and W.J. Stewart. </author> <title> Simultaneous iteration for Partial Eigensolution of Real Matrices. </title> <journal> J. Inst. Math. Applics., </journal> <volume> Vol. 15, </volume> <year> 1975, </year> <pages> pp. 351-361. </pages>
Reference-contexts: Projection Methods include the class of methods known as simultaneous iteration or subspace iteration, <ref> [25, 41, 45] </ref>, which iterate continuously with a fixed number of vectors, as well as methods that begin with a single vector and construct a subspace one vector at a time, [36].
Reference: [26] <author> F.P. Kelly. </author> <title> Reversibility and Stochastic Networks. </title> <publisher> Wiley, </publisher> <year> 1979. </year>
Reference-contexts: Jackson networks, for example, may be represented by a SAN; the reversibility results of Kelly, <ref> [26] </ref>, and the competition conditions of Boucherie, [6], can be applied to SANs leading to product forms. In this section we shall present sufficient conditions for a SAN to have a product form solution.
Reference: [27] <author> P. Kemper. </author> <title> Closing the Gap between Classical and Tensor Based Iteration Techniques. Computations with Markov Chains; Proceedings of the 2nd International Meeting on the Numerical Solution of Markov Chains, </title> <editor> W.J. Stewart, Ed., </editor> <publisher> Kluwer International Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: In [11], nearly independent subnets are exploited in an iterative procedure in which a global solution is obtained from partial solutions. In [13] it is shown that the tensor structure of the transition matrix may be extracted from a stochastic Petri net, and in <ref> [27] </ref> that this can be used efficiently to work with the reachable state space in an iterative procedure. Once the number of states has effectively been fixed, the problem of memory and computation time still must be addressed, for the number of states left may still be large.
Reference: [28] <author> A.A. Lazar and T.G. Robertazzi. </author> <title> Markovian Petri Net Protocols with Product Form Solutions. </title> <journal> Performance Evaluation, </journal> <volume> Vol. 12, </volume> <pages> pp. 67-77, </pages> <year> 1991. </year>
Reference-contexts: This is followed in Section 5 with the presentation of a number of sufficient conditions for the existence of product forms in SANs, for in some restricted cases, product forms can indeed be found. We note in passing that in <ref> [4, 6, 14, 19, 22, 28] </ref> product forms have been found in Petri net models, using either the structure of the state space or flow properties. <p> In these examples, the functions f (k) ( i k ) express a reachable state space and yield a uniform multiplicative factor. Other examples may be found in <ref> [14, 19, 22, 28] </ref>. 4. Our final example explicitly displays the dependence of the function on i 0 and falls into case 1. Consider a system consisting of P units of resource and N identical processes, each represented by a three-state Markov chain.
Reference: [29] <author> C.D. Meyer. </author> <title> The Role of the Group Generalized Inverse in the Theory of Finite Markov Chains. </title> <journal> Siam Review, </journal> <volume> Vol. 17, No. 3, </volume> <month> July </month> <year> 1975. </year>
Reference: [30] <author> B. Philippe, Y. Saad and W.J. Stewart. </author> <title> Numerical Methods in Markov Chain Modelling. </title> <journal> Operations Research, Vol.40, </journal> <volume> No. 6, </volume> <year> 1992, </year> <pages> pp. 1156-1179. 31 </pages>
Reference: [31] <author> B. </author> <title> Plateau. On the Stochastic Structure of Parallelism and Synchronization Models for Distributed Algorithms. </title> <booktitle> Proc. ACM Sigmetrics Conference on Measurement and Modelling of Computer Systems, </booktitle> <address> Austin, Texas, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: However, Plateau <ref> [31] </ref> has shown that, by separating local transitions from synchronized transitions, this is not necessarily so; that the global transition rate matrix can still be written as a (sum of) tensor products. To observe this we proceed as follows, using observations 1 through 4 specified above.
Reference: [32] <author> B. Plateau and K. Atif. </author> <title> Stochastic Automata Network for Modelling Parallel Systems. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> Vol. 17, No. 10, </volume> <pages> pp. 1093-1108, </pages> <year> 1991. </year>
Reference-contexts: Although a SAN may be viewed as a stochastic process algebra, its original purpose was to provide an efficient and convenient methodology for computing performance measures rather than a means of deriving algebraic properties of complex systems, <ref> [32] </ref>. Nevertheless, computational results such as those discussed in this chapter can also be applied in the context of stochastic process algebras. There are two overriding concerns in the application of any Markovian modelling methodology, viz., memory requirements and computation time. <p> This shows that Theorem 7.2 is only needed when the routing probabilities associated with a synchronizing event are functional and result in cycles within the functional dependency graph, (which we suspect to be rather rare). For SANs in discrete-time, <ref> [32] </ref>, it seems that we may not be so fortunate since cycles in the functional dependency graph of the tensor product tend to occur rather more often.
Reference: [33] <author> B. Plateau and J.M. Fourneau. </author> <title> A Methodology for Solving Markov Models of Parallel Systems. </title> <journal> Journal of Parallel and Distributed Computing. </journal> <volume> Vol. 12, </volume> <pages> pp. 370-387, </pages> <year> 1991. </year>
Reference-contexts: Nevertheless it is still possible to profit from this unaltered nonzero structure. This is the concept behind the extended (generalized) tensor algebraic approach, <ref> [33] </ref>. The descriptor is still written as in equation (7), but now the elements of Q (i) j may be functions. <p> It is essential that this operation be implemented as efficiently as possible. The following theorem is proven in <ref> [33] </ref>. <p> It is important to note however, that this complexity result is valid only when the stochastic automata contain non-functional rates. A proof is given in <ref> [33] </ref>. An example will help us see this more clearly and at the same time show us where extra multiplications are needed for functional transitions.
Reference: [34] <author> B. Plateau, J.M. Fourneau and K.H. Lee. PEPS: </author> <title> A Package for Solving Complex Markov Models of Parallel Systems. </title> <editor> In R. Puigjaner, D. Potier, Eds., </editor> <title> Modelling Techniques and Tools for Computer Performance Evaluation, </title> <address> Spain, </address> <month> September </month> <year> 1988. </year>
Reference: [35] <author> Y. Saad. </author> <title> Variations on Arnoldi's method for computing eigenelements of large unsymmetric matrices. </title> <journal> Lin. Alg. Appl., </journal> <volume> Vol. 34, </volume> <year> 1980, </year> <pages> pp. 269-295. </pages>
Reference: [36] <author> Y. Saad. </author> <title> Krylov Subspace Methods for Solving Unsymmetric Linear Systems. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 37, </volume> <year> 1981, </year> <pages> pp. 105-126. </pages>
Reference-contexts: Projection Methods include the class of methods known as simultaneous iteration or subspace iteration, [25, 41, 45], which iterate continuously with a fixed number of vectors, as well as methods that begin with a single vector and construct a subspace one vector at a time, <ref> [36] </ref>.
Reference: [37] <author> Y. Saad and M.H. Schultz. </author> <title> GMRES: A generalized minimal residual algorithm for solving nonsymmetric linear systems. </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> Vol. 7, </volume> <year> 1986, </year> <pages> pp. 856-869. </pages>
Reference: [38] <author> W.H. Sanders and J.F. Meyer. </author> <title> Reduced Base Model Construction Methods for Stochastic Activity Networks, </title> <journal> IEEE Jour. on Selected Areas in Communication, </journal> <volume> Vol. 9, No. 1, </volume> <pages> pp. 25-36, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. For example, in <ref> [8, 9, 10, 18, 38, 40] </ref>, equivalence relations and symmetries are used to decrease the computational burden of obtaining performance indices. In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings.
Reference: [39] <author> M. Siegle. </author> <title> On Efficient Markov Modelling. </title> <booktitle> In Proc. QMIPS Workshop on Stochastic Petri Nets, </booktitle> <pages> pp. 213-225, </pages> <address> Sophia-Antipolis, France, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: In SANs, it is possible to make use of symmetries as well as lumping and various superpositioning of the automata to reduce the computational burden, <ref> [1, 9, 39] </ref>. Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks.
Reference: [40] <author> C. Simone and M.A. Marsan. </author> <title> The Application of the EB-Equivalence Rules to the Structural Reduction of GSPN Models. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 15, No. 3, </volume> <pages> pp. 296-302, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, in [17], structural properties of the Markov chain graph (specificially the occurrence of cycles) are used to compute steady state solutions. We point out that similar, and even more extensive results have previously been developed in the context of Petri nets and stochastic activity networks. For example, in <ref> [8, 9, 10, 18, 38, 40] </ref>, equivalence relations and symmetries are used to decrease the computational burden of obtaining performance indices. In [21], reduction techniques for Petri nets are used in conjunction with insensitivity results to enable all computations to be performed on a reduced set of markings.
Reference: [41] <author> G.W. Stewart. </author> <title> Simultaneous iteration for computing invariant subspaces of non-Hermitian matrices. </title> <journal> Numer. Mat., </journal> <volume> Vol. 25, </volume> <year> 1976, </year> <pages> pp. 123-136. </pages>
Reference-contexts: Projection Methods include the class of methods known as simultaneous iteration or subspace iteration, <ref> [25, 41, 45] </ref>, which iterate continuously with a fixed number of vectors, as well as methods that begin with a single vector and construct a subspace one vector at a time, [36].
Reference: [42] <author> W.J. Stewart. </author> <title> An Introduction to the Numerical Solution of Markov Chains, </title> <publisher> Princeton University Press, </publisher> <address> New Jersey, </address> <year> 1994. </year>
Reference-contexts: Let Q be its descriptor, i.e., Q = j=1 i=1 Q j : Our goal is to find the stationary probability vector, i.e., a vector such that Q = 0 and e = 1. (See also Chapter 3.) Of all the numerical solution methods discussed in <ref> [42] </ref>, only those whose interaction with the infinitesimal generator is its product with a vector, are suitable when the coefficient matrix is given in this form. Thus, the power method and the various projection methods are easy to implement.
Reference: [43] <author> W.J. Stewart. marca: </author> <title> Markov Chain Analyzer. </title> <journal> IEEE Computer Repository No. </journal> <volume> R76 232, </volume> <year> 1976. </year> <note> Also IRISA Publication Interne No. 45, </note> <institution> Universite de Rennes, France. </institution>
Reference: [44] <author> W.J. Stewart, K. Atif and B. </author> <title> Plateau. The Numerical Solution of Stochastic Automata Networks. </title> <journal> European Journal of Operations Research, </journal> <volume> Vol. 86, No. 3, </volume> <pages> pp. 503-525, </pages> <year> 1995. </year>
Reference-contexts: When the global infinitesimal generator of a SAN is available only in the form of a 17 SAN descriptor, the most general and suitable methods for obtaining probability distributions are numerical iterative methods, <ref> [44] </ref>. Thus, the underlying operation, whether we wish to compute the stationary distribution, or the transient solution at any time t, is the product of a vector with a matrix. <p> Even with functional rates, which imply that the elements in the matrices change according to their context, this same savings is sometimes possible <ref> [44] </ref>. This leads to an extension of some of the properties of tensor products and to the concept of Generalized Tensor Products (GTPs) as opposed to Ordinary Tensor Products (OTP). 7 Generalized Tensor Products We assume throughout that all matrices are square. <p> Unfortunately, the down side is that, as is apparent from equation (21), it is computationally very expensive to compute an accurate preconditioner. The results of a number of experiments in using this preconditioning approach is provided in <ref> [44] </ref>. Other possibilities for preconditioning involve the computation of incomplete LU factorizations (ILU) and are discussed in Chapter 3.
Reference: [45] <author> W.J. Stewart and A. Jennings. </author> <title> A Simultaneous Iteration Algorithm for Real Matrices. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> Vol. 7, No. 2, </volume> <year> 1981, </year> <pages> pp. 184-198. </pages>
Reference-contexts: Projection Methods include the class of methods known as simultaneous iteration or subspace iteration, <ref> [25, 41, 45] </ref>, which iterate continuously with a fixed number of vectors, as well as methods that begin with a single vector and construct a subspace one vector at a time, [36].
Reference: [46] <author> W.J. Stewart and W. Wu. </author> <title> Numerical Experiments with Iteration and Aggregation for Markov Chains. </title> <journal> ORSA Journal on Computing, </journal> <volume> July/August, </volume> <year> 1992. </year>
Reference: [47] <author> J.H. Wilkinson. </author> <title> The Algebraic Eigenvalue Problem. </title> <publisher> Clarendon Press, </publisher> <address> New York, </address> <year> 1965. </year> <month> 32 </month>
References-found: 47

