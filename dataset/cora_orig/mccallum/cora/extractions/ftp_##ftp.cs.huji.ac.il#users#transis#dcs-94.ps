URL: ftp://ftp.cs.huji.ac.il/users/transis/dcs-94.ps
Refering-URL: http://www.cs.huji.ac.il/labs/transis/abstracts94.html
Root-URL: http://www.cs.huji.ac.il
Title: Extended Virtual Synchrony  
Author: L. E. Moser, Y. Amir, P. M. Melliar-Smith, D. A. Agarwal 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Electrical and Computer Engineering University of California,  
Abstract: We formulate a model of extended virtual synchrony that defines a group communication transport service for multicast and broadcast communication in a distributed system. The model extends the virtual synchrony model of the Isis system to support continued operation in all components of a partitioned network. The significance of extended virtual synchrony is that, during network partitioning and remerging and during process failure and recovery, it maintains a consistent relationship between the delivery of messages and the delivery of configuration changes across all processes in the system and provides well-defined self-delivery and failure atomic-ity properties. We describe an algorithm that implements extended virtual synchrony and construct a filter that reduces extended virtual synchrony to virtual synchrony. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer and D. Malki, "Transis: </author> <title> A communication sub-system for high availability," </title> <booktitle> Proceedings of the 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <address> Boston, MA (July 1992), </address> <pages> pp. 76-84. </pages>
Reference-contexts: 1 Introduction In many applications in distributed systems messages must be disseminated to multiple destinations. To achieve better performance, protocols have been developed to exploit the multicast or broadcast capabilities of existing local-area network hardware <ref> [1, 3, 5, 9, 11, 13] </ref>. The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. <p> In the case of a network partition, however, it is better to display lower quality information from the connected sensors than to do nothing. In the design of the Totem protocol [3, 12], based on our experience with the Trans and Total protocols [11] and the Transis system <ref> [1, 2] </ref>, we have extended the virtual synchrony model [4, 5, 6] of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer and D. Malki, </author> <title> "Membership algorithms in broadcast domains," </title> <booktitle> Proceedings of the 6th International Workshop on Distributed Algorithms, Haifa, Israel (November 1992), Lecture Notes in Computer Science 647, </booktitle> <pages> pp. 292-312. </pages>
Reference-contexts: In the case of a network partition, however, it is better to display lower quality information from the connected sensors than to do nothing. In the design of the Totem protocol [3, 12], based on our experience with the Trans and Total protocols [11] and the Transis system <ref> [1, 2] </ref>, we have extended the virtual synchrony model [4, 5, 6] of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery.
Reference: [3] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal and P. Ciarfella, </author> <title> "Fast message ordering and membership using a logical token-passing ring," </title> <booktitle> Proceedings of the IEEE 13th International Conference on Distributed Computing Systems, </booktitle> <address> Pittsburgh, PA (May 1993), </address> <pages> pp. 551-560. </pages>
Reference-contexts: 1 Introduction In many applications in distributed systems messages must be disseminated to multiple destinations. To achieve better performance, protocols have been developed to exploit the multicast or broadcast capabilities of existing local-area network hardware <ref> [1, 3, 5, 9, 11, 13] </ref>. The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. <p> In the case of a network partition, however, it is better to display lower quality information from the connected sensors than to do nothing. In the design of the Totem protocol <ref> [3, 12] </ref>, based on our experience with the Trans and Total protocols [11] and the Transis system [1, 2], we have extended the virtual synchrony model [4, 5, 6] of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery. <p> The Totem protocol <ref> [3] </ref> incorporates these algorithms and provides extended virtual synchrony. The steps of the extended virtual synchrony algorithm, executed by an individual process, are as follows. 1.
Reference: [4] <author> K. P. Birman and T. A. Joseph, </author> <title> "Exploiting virtual synchrony in distributed systems," </title> <booktitle> Proceedings of the ACM Symposium on Operating System Principles (1987), </booktitle> <pages> pp. 123-138. </pages>
Reference-contexts: The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. Within the process group paradigm, virtual synchrony <ref> [4, 5, 6, 14] </ref> ensures that processes perceive process failures and other configuration changes as occurring at the same logical time. The model of virtual synchrony handles omission faults and fail-stop faults, and regards recovered processes as new processes. <p> In the design of the Totem protocol [3, 12], based on our experience with the Trans and Total protocols [11] and the Transis system [1, 2], we have extended the virtual synchrony model <ref> [4, 5, 6] </ref> of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery.
Reference: [5] <author> K. P. Birman, A. Schiper and P. Stephenson, </author> <title> "Lightweight causal and atomic group multicast," </title> <journal> ACM Transactions on Computer Systems 9, </journal> <month> 3 (August </month> <year> 1991), </year> <pages> pp. 272-314. </pages>
Reference-contexts: 1 Introduction In many applications in distributed systems messages must be disseminated to multiple destinations. To achieve better performance, protocols have been developed to exploit the multicast or broadcast capabilities of existing local-area network hardware <ref> [1, 3, 5, 9, 11, 13] </ref>. The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. <p> The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. Within the process group paradigm, virtual synchrony <ref> [4, 5, 6, 14] </ref> ensures that processes perceive process failures and other configuration changes as occurring at the same logical time. The model of virtual synchrony handles omission faults and fail-stop faults, and regards recovered processes as new processes. <p> In the design of the Totem protocol [3, 12], based on our experience with the Trans and Total protocols [11] and the Transis system [1, 2], we have extended the virtual synchrony model <ref> [4, 5, 6] </ref> of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery.
Reference: [6] <author> K. P. Birman, </author> <title> "Virtual synchrony model," In: Reliable Distributed Computing with the Isis Toolkit, </title> <publisher> IEEE Press. </publisher>
Reference-contexts: The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. Within the process group paradigm, virtual synchrony <ref> [4, 5, 6, 14] </ref> ensures that processes perceive process failures and other configuration changes as occurring at the same logical time. The model of virtual synchrony handles omission faults and fail-stop faults, and regards recovered processes as new processes. <p> In the design of the Totem protocol [3, 12], based on our experience with the Trans and Total protocols [11] and the Transis system [1, 2], we have extended the virtual synchrony model <ref> [4, 5, 6] </ref> of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery. <p> The Totem protocol and the Transis system preserve extended virtual synchrony and contain a membership algorithm that terminates within a bounded time. 4 The Virtual Synchrony Model We now summarize Birman's model of virtual synchrony, as it is presented in <ref> [6] </ref> where more discussion and details can be found. We then show in Section 5 how virtual synchrony can be implemented on top of extended virtual synchrony.
Reference: [7] <author> D. R. Cheriton and W. Zwaenepoel, </author> <title> "Distributed process groups in the V kernel," </title> <journal> ACM Transactions on Computer Systems 3, </journal> <month> 2 (May </month> <year> 1985), </year> <pages> pp. 77-107. </pages>
Reference-contexts: 1 Introduction In many applications in distributed systems messages must be disseminated to multiple destinations. To achieve better performance, protocols have been developed to exploit the multicast or broadcast capabilities of existing local-area network hardware [1, 3, 5, 9, 11, 13]. The process group paradigm <ref> [7] </ref> is a useful and appropriate addressing mechanism for multicast and broadcast communication. Within the process group paradigm, virtual synchrony [4, 5, 6, 14] ensures that processes perceive process failures and other configuration changes as occurring at the same logical time.
Reference: [8] <author> J. Y. Halpern and Y. Moses, </author> <title> "Knowledge and common knowledge in a distributed environment," </title> <journal> Journal of the ACM 37, </journal> <month> 3 (July </month> <year> 1990), </year> <pages> pp. 549-587. </pages>
Reference-contexts: Perfection is not possible as it would require common knowledge <ref> [8] </ref>. The virtual synchrony approach achieves this approximation in uniform multicast by extending the history using the extend mechanism, which assumes that the last few events in a failed process are lost forever and, thus, can impute delivery of a uniform multicast message to a failed process.
Reference: [9] <author> M. F. Kaashoek and A. S. Tanenbaum, </author> <title> "Group communication in the Amoeba distributed operating system," </title> <booktitle> Proceedings of the IEEE 11th International Conference on Distributed Computing Systems (May 1991), </booktitle> <pages> pp. 882-891. </pages>
Reference-contexts: 1 Introduction In many applications in distributed systems messages must be disseminated to multiple destinations. To achieve better performance, protocols have been developed to exploit the multicast or broadcast capabilities of existing local-area network hardware <ref> [1, 3, 5, 9, 11, 13] </ref>. The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication.
Reference: [10] <author> L. Lamport, </author> <title> "Time, clocks, and the ordering of events in a distributed system," </title> <journal> Communications of the ACM (July 1978), </journal> <pages> pp. 558-565. </pages>
Reference-contexts: We then show in Section 5 how virtual synchrony can be implemented on top of extended virtual synchrony. This model of virtual synchrony is based on Lamport's causality relation, !, defined in <ref> [10] </ref>, i.e. the transitive closure of * e ! e 0 , where e and e 0 are local to a process * send (m) ! deliver (m) The events local to a process are send (m), deliver (m) and stop.
Reference: [11] <author> P. M. Melliar-Smith, L. E. Moser and V. Agrawala, </author> <title> "Broadcast protocols for distributed systems," </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1, </journal> <month> 1 (January </month> <year> 1990), </year> <pages> pp. 17-25. </pages>
Reference-contexts: 1 Introduction In many applications in distributed systems messages must be disseminated to multiple destinations. To achieve better performance, protocols have been developed to exploit the multicast or broadcast capabilities of existing local-area network hardware <ref> [1, 3, 5, 9, 11, 13] </ref>. The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. <p> In the case of a network partition, however, it is better to display lower quality information from the connected sensors than to do nothing. In the design of the Totem protocol [3, 12], based on our experience with the Trans and Total protocols <ref> [11] </ref> and the Transis system [1, 2], we have extended the virtual synchrony model [4, 5, 6] of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery.
Reference: [12] <author> P. M. Melliar-Smith, L. E. Moser and D. A. Agar-wal, </author> <title> "Ring-based ordering protocols," </title> <booktitle> Proceedings of the International Conference on Information Engineering, Singapore (December 1991), </booktitle> <pages> pp. 882-891. </pages>
Reference-contexts: In the case of a network partition, however, it is better to display lower quality information from the connected sensors than to do nothing. In the design of the Totem protocol <ref> [3, 12] </ref>, based on our experience with the Trans and Total protocols [11] and the Transis system [1, 2], we have extended the virtual synchrony model [4, 5, 6] of the Isis system to handle network partitioning and remerg-ing, as well as process failure and recovery.
Reference: [13] <author> L. L. Peterson, N. C. Buchholz and R. D. Schlichting, </author> <title> "Preserving and using context information in interprocess communication," </title> <journal> ACM Transactions on Computing Systems 7, </journal> <volume> 3 (Jan-uary 1989), </volume> <pages> pp. 217-246. </pages>
Reference-contexts: 1 Introduction In many applications in distributed systems messages must be disseminated to multiple destinations. To achieve better performance, protocols have been developed to exploit the multicast or broadcast capabilities of existing local-area network hardware <ref> [1, 3, 5, 9, 11, 13] </ref>. The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication.
Reference: [14] <author> A. Schiper and A. Sandoz, </author> <title> "Uniform reliable mul-ticast in a virtually synchronous environment," </title> <booktitle> Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <address> Pittsburgh, PA (May 1993), </address> <pages> pp. 561-568. </pages>
Reference-contexts: The process group paradigm [7] is a useful and appropriate addressing mechanism for multicast and broadcast communication. Within the process group paradigm, virtual synchrony <ref> [4, 5, 6, 14] </ref> ensures that processes perceive process failures and other configuration changes as occurring at the same logical time. The model of virtual synchrony handles omission faults and fail-stop faults, and regards recovered processes as new processes.
References-found: 14

