URL: http://www.cs.purdue.edu/homes/krsul/documents/docs/RivestShamirWagner-timelock.ps
Refering-URL: http://www.cs.purdue.edu/homes/krsul/documents/index.htm
Root-URL: http://www.cs.purdue.edu
Email: frivest,shamirg@theory.lcs.mit.edu, daw@cs.berkeley.edu  
Title: Time-lock puzzles and timed-release Crypto  
Author: Ronald L. Rivest Adi Shamir flfl and David A. Wagner flflfl 
Address: 545 Technology Square, Cambridge, Mass. 02139  Rehovot, Israel  Berkeley, California 94720  
Affiliation: MIT Laboratory for Computer Science  flfl Weizmann Institute of Science Applied Mathematics Department  flflfl Computer Science Department U.C. Berkeley  
Date: Revised March 10, 1996  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Mihir Bellare and Shafi Goldwasser. </author> <title> Verifiable partial key escrow. </title> <type> Technical Report CS95-447, </type> <institution> Dept. of Computer Science and Engineering, U.C. </institution> <address> San Diego, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: At time t, the key K can be reconstructed and C decrypted to yield M . These ideas are discussed briefly by May. Related work on time-lock puzzles and "verifiable partial-key escrow" has been developed by Bellare and Goldwasser <ref> [4, 1] </ref>. We suggest here an alternative, but related, approach that has the following properties and implementation: * The agents are not "escrow agents" as they are in May's proposal: they do not have to store any information that is given to them by the user.
Reference: [2] <author> Shimshon Berkovits. </author> <title> Factoring via superencryption. </title> <journal> Cryptologia, </journal> <volume> 6(3) </volume> <pages> 229-237, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: number generator [3]. (We actually propose a scheme that is a variation on the x 2 mod n generator, but the differences are nonessential, and the original scheme could have been used as well here.) An early version of our paper suggested a different approach based on superencryption in RSA <ref> [10, 12, 8, 13, 2] </ref>; the current approach is considerably simpler. Here is our approach.
Reference: [3] <author> L. Blum, M. Blum, and M. Shub. </author> <title> A simple unpredictable pseudo-random number generator. </title> <journal> SIAM J. Computing, </journal> <volume> 15(2) </volume> <pages> 364-383, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: Our approach can also be viewed as an application of the "random-access" property of the Blum-Blum-Shub "x 2 mod n" pseudo-random number generator <ref> [3] </ref>. (We actually propose a scheme that is a variation on the x 2 mod n generator, but the differences are nonessential, and the original scheme could have been used as well here.) An early version of our paper suggested a different approach based on superencryption in RSA [10, 12, 8, <p> See Blum, Blum, and Shub <ref> [3] </ref> for some relevant discussion. However, choosing p, q, and a randomly should give the desired level of difficulty with overwhelming probability, so that these precautions are not expected to be necessary in practice. Indeed, in practice choosing a fixed value a = 2 should be safe with high probability.
Reference: [4] <author> Shafi Goldwasser, </author> <year> 1996. </year> <type> Personal communication. </type>
Reference-contexts: At time t, the key K can be reconstructed and C decrypted to yield M . These ideas are discussed briefly by May. Related work on time-lock puzzles and "verifiable partial-key escrow" has been developed by Bellare and Goldwasser <ref> [4, 1] </ref>. We suggest here an alternative, but related, approach that has the following properties and implementation: * The agents are not "escrow agents" as they are in May's proposal: they do not have to store any information that is given to them by the user.
Reference: [5] <author> S. Haber and W.S. Stornetta. </author> <title> How to time-stamp a digital document. </title> <journal> Journal of Cryptology, </journal> <volume> 3 </volume> <pages> 99-111, </pages> <year> 1991. </year>
Reference-contexts: that in principle, it is possible, albeit difficult, to prove certain properties of M to a verifier without having to reveal K or M .) Because the agent includes the current time t 0 in his signed reply to an encryption request, he acts as a simple "time-stamping" service (e.g. <ref> [5] </ref>). A user can give the agent the cryptographic hash value h (M ) of some message M , and ask the agent to sign and encrypt it with s it for some value of t.
Reference: [6] <author> Timothy C. </author> <month> May. </month> <note> Timed-release crypto, February 1993. http://www.hks.net/cpunks/cpunks-0/1460.html. </note>
Reference-contexts: The goal is to "send information into the future." This problem was first discussed by Timothy May <ref> [6] </ref>.
Reference: [7] <author> R. C. Merkle. </author> <title> Secure communications over insecure channels. </title> <journal> Communications of the ACM, </journal> <volume> 21 </volume> <pages> 294-299, </pages> <month> April </month> <year> 1978. </year>
Reference-contexts: We save the ciphertext and throw away the key. By using exhaustive search of the key space, a workstation will take about T seconds, on the average, to find the key. We note that Merkle <ref> [7] </ref> was the first to suggest this method of designing puzzles, and was also the first to introduce the notion of a "puzzle," in research that ultimately led to the invention of the concept of public-key cryptography.
Reference: [8] <author> Ronald L. Rivest. </author> <title> Remarks on a proposed cryptanalytic attack of the M.I.T. public-key cryptosystem. </title> <journal> Cryptologia, </journal> <volume> 2(1) </volume> <pages> 62-65, </pages> <month> January </month> <year> 1978. </year> <month> 8 </month>
Reference-contexts: number generator [3]. (We actually propose a scheme that is a variation on the x 2 mod n generator, but the differences are nonessential, and the original scheme could have been used as well here.) An early version of our paper suggested a different approach based on superencryption in RSA <ref> [10, 12, 8, 13, 2] </ref>; the current approach is considerably simpler. Here is our approach.
Reference: [9] <author> Ronald L. Rivest. </author> <title> The RC5 encryption algorithm. </title> <editor> In Bart Preneel, editor, </editor> <booktitle> Fast Software Encryption, </booktitle> <pages> pages 86-96. </pages> <publisher> Springer, </publisher> <year> 1995. </year> <booktitle> (Proceedings Second International Workshop, </booktitle> <address> Dec. 1994, Leuven, Belgium). </address>
Reference-contexts: Let M denote the information to be encrypted for a period of time. Let S denote the speed of a workstation measured in decryptions per second. Then to encrypt M to be decryptable after T seconds, we choose a conventional cryptosystem (say RC5 <ref> [9] </ref>) with a key size of approximately k = lg (2ST ) bits and encrypt M with a k-bit key. We save the ciphertext and throw away the key.
Reference: [10] <author> Ronald L. Rivest, Adi Shamir, and Leonard M. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <year> 1978. </year>
Reference-contexts: number generator [3]. (We actually propose a scheme that is a variation on the x 2 mod n generator, but the differences are nonessential, and the original scheme could have been used as well here.) An early version of our paper suggested a different approach based on superencryption in RSA <ref> [10, 12, 8, 13, 2] </ref>; the current approach is considerably simpler. Here is our approach.
Reference: [11] <author> A. Shamir. </author> <title> How to share a secret. </title> <journal> Communications of the ACM, </journal> <volume> 22 </volume> <pages> 612-613, </pages> <month> November </month> <year> 1979. </year>
Reference-contexts: As an extension of this idea, the message M could be shared among several agents (using standard secret-sharing techniques, such as the one proposed by Shamir <ref> [11] </ref>) who all agree to release their shares at time t. The message M can then be reconstructed from those shares. As a further refinement, the agents can be asked to store shares of a cryptographic key K instead of shares of M.
Reference: [12] <author> Gustavus J. Simmons and Michael J. Norris. </author> <title> Preliminary comments on the MIT public-key cryptosystem. </title> <journal> Cryptologia, </journal> <volume> 1(4) </volume> <pages> 406-414, </pages> <month> October </month> <year> 1977. </year>
Reference-contexts: number generator [3]. (We actually propose a scheme that is a variation on the x 2 mod n generator, but the differences are nonessential, and the original scheme could have been used as well here.) An early version of our paper suggested a different approach based on superencryption in RSA <ref> [10, 12, 8, 13, 2] </ref>; the current approach is considerably simpler. Here is our approach.
Reference: [13] <author> H. C. Williams and B. Schmid. </author> <title> Some remarks concerning the MIT public-key cryp-tosystem. </title> <journal> BIT, </journal> <volume> 19 </volume> <pages> 525-538, </pages> <year> 1979. </year> <month> 9 </month>
Reference-contexts: number generator [3]. (We actually propose a scheme that is a variation on the x 2 mod n generator, but the differences are nonessential, and the original scheme could have been used as well here.) An early version of our paper suggested a different approach based on superencryption in RSA <ref> [10, 12, 8, 13, 2] </ref>; the current approach is considerably simpler. Here is our approach.
References-found: 13

