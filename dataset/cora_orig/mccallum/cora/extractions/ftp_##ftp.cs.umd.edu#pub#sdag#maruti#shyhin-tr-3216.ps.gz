URL: ftp://ftp.cs.umd.edu/pub/sdag/maruti/shyhin-tr-3216.ps.gz
Refering-URL: ftp://ftp.cs.umd.edu/pub/sdag/maruti/index-no-abs.html
Root-URL: 
Title: Optimization in Non-Preemptive Scheduling for Aperiodic Tasks  
Author: Shyh-In Hwang Sheng-Tzong Cheng Ashok K. Agrawala 
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies and Systems Design and Analysis Group Department of Computer Science University of Maryland  
Abstract: Real-time computer systems have become more and more important in many applications, such as robot control, flight control, and other mission-critical jobs. The correctness of the system depends on the temporal correctness as well as the functional correctness of the tasks. We propose a scheduling algorithm based on an analytic model. Our goal is to derive the optimal schedule for a given set of aperiodic tasks such that the number of rejected tasks is minimized, and then the finish time of the schedule is also minimized. The scheduling problem with a nonpreemptive discipline in a uniprocessor system is considered. We first show that if a total ordering is given, this can be done in O(n 2 ) time by dynamic programming technique, where n is the size of the task set. When the restriction of the total ordering is released, it is known fl This work is supported in part by Honeywell under N00014-91-C-0195 and Army/Phillips under DASG-60-92-C-0055. The views, opinions, and/or findings contained in this report are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Honeywell or Army/Phillips. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Dertouzos. </author> <title> Control robotics: The procedural control of physical processes. </title> <booktitle> In Proceedings of the IFIP Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: The approaches adopted to date for scheduling algorithms can be generally classified into two categories. One approach is to assign priorities to tasks so that the tasks can be scheduled according to their priorities <ref> [1, 7, 8, 10, 12, 15, 14] </ref>. This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach [9, 13].
Reference: [2] <author> J. Erschler, G. Fontan, C. Merce, and F. Roubellat. </author> <title> A new dominance concept in scheduling n jobs on a single machine with ready times and due dates. </title> <journal> Operations Research, </journal> <volume> 31(1) </volume> <pages> 114-127, </pages> <month> Jan. </month> <year> 1983. </year>
Reference-contexts: Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3]. Due to the intractability, several search algorithms [11, 17, 19, 20] are proposed for com puting optimal or suboptimal schedules. Analytic techniques may also be used for optimal scheduling. A dominance concept by Erschler et al <ref> [2] </ref> was proposed to reduce the search space for checking the feasibility of task sets. They explored the relations among the tasks 3 and determined the partial orderings of feasible schedules. Yuan and Agrawala [18] proposed decomposition methods to substantially reduce the search space based on the dominance concept. <p> Note that the optimal schedule of the task set is the best one of the optimal schedules of all instances in the task set. Erschler et al <ref> [2] </ref> proposed the dominance concept to reduce the number of permutations that should be examined for the feasibility test of a task set. Yuan and Agrawala [18] proposed the super sequence to further reduce the search space for testing the feasibility of a task set. <p> If T i &lt; T j for all T j belonging to S, then T i &lt; S. The dominance concept is originally developed by Erschler et al <ref> [2] </ref> to reduce the search space for testing the feasibility of a task set. The idea is extended with the super sequence proposed by Yuan and Agrawala [18]. <p> A super sequence is a sequence of tasks, where duplicates of tasks are allowed. The purpose is to extract instances from the super sequence for scheduling. The super sequence is constructed according to the dominant rules <ref> [2, 18] </ref> described below. Whenever a task satisfies one of the conditions specified by the rules, a duplicate of the task is inserted into the super sequence. Note that duplicates can only be generated for nontop tasks. The top tasks appear once and only once in the super sequence. <p> In this section, we prove that if a task set is feasible, there exists an optimal full schedule conforming to the super sequence fl Hence, the super sequence provides a valid and pruned search space for deriving the optimal full schedule of a task set. fl In <ref> [2] </ref>, Erschler et al.'s theorem implied a similar result: if a task set is feasible, there exists a full schedule in the dominant set. Our theorem further shows that there exists such a full schedule, with the minimum finish time among all full schedules, that conforms to the super sequence.
Reference: [3] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability, a Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: A sequence specifies the order in which the tasks are executed. Without confusion, a schedule can be represented as a sequence. How to schedule the tasks so that the timing constraints are met is nontrivial. Many scheduling problems are known to be intractable <ref> [3] </ref> in that finding the optimal schedule requires large amounts of computations to be carried out. The approaches adopted to date for scheduling algorithms can be generally classified into two categories. <p> The other is time based scheduling approach [9, 13]. A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete <ref> [3] </ref>. Due to the intractability, several search algorithms [11, 17, 19, 20] are proposed for com puting optimal or suboptimal schedules. Analytic techniques may also be used for optimal scheduling.
Reference: [4] <author> D. W. Gillies and J. W-S. Liu. </author> <title> Greed in resource scheduling. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 285-294, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined <ref> [4] </ref>. The other is time based scheduling approach [9, 13]. A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3].
Reference: [5] <author> O. Gudmundsson, D. Mosse, K.T. Ko, A.K. Agrawala, and S.K. Tripathi. Maruti: </author> <title> A platform for hard real-time applications. </title> <booktitle> In Workshop on Operating Systems for Mission Critical Computing, </booktitle> <pages> pages C1-C14, </pages> <month> Sep. </month> <year> 1989. </year>
Reference-contexts: The idea is to modify the windows of two partially ordered tasks which are generated by the temporal relations so that more partial orderings of tasks may be generated recursively. The time based model is employed by several real-time operating systems currently being developed, including MARUTI <ref> [5] </ref>, MARS [6], and Spring [16]. In this paper, we study an analytic approach to optimal scheduling under the time based model. When complicated timing constraints and task interdependency are taken into consideration, the schedulability analysis of priority based scheduling algorithms becomes much more difficult.
Reference: [6] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger. </author> <title> Distributed fault tolerant real-time systems: The mars approach. </title> <journal> IEEE Micro, </journal> <volume> 9(1) </volume> <pages> 25-40, </pages> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: The idea is to modify the windows of two partially ordered tasks which are generated by the temporal relations so that more partial orderings of tasks may be generated recursively. The time based model is employed by several real-time operating systems currently being developed, including MARUTI [5], MARS <ref> [6] </ref>, and Spring [16]. In this paper, we study an analytic approach to optimal scheduling under the time based model. When complicated timing constraints and task interdependency are taken into consideration, the schedulability analysis of priority based scheduling algorithms becomes much more difficult.
Reference: [7] <author> J. P. Lehoczky. </author> <title> Fixed priority scheduling of periodic tasks with arbitrary deadlines. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 201-209, </pages> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: The approaches adopted to date for scheduling algorithms can be generally classified into two categories. One approach is to assign priorities to tasks so that the tasks can be scheduled according to their priorities <ref> [1, 7, 8, 10, 12, 15, 14] </ref>. This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach [9, 13].
Reference: [8] <author> J.Y. Leung and J. Whitehead. </author> <title> On the Complexity of Fixed-Priority Scheduling of Periodic, Real-Time Tasks. Performance Evaluation, </title> <booktitle> 2(4) </booktitle> <pages> 237-250, </pages> <year> 1982. </year>
Reference-contexts: The approaches adopted to date for scheduling algorithms can be generally classified into two categories. One approach is to assign priorities to tasks so that the tasks can be scheduled according to their priorities <ref> [1, 7, 8, 10, 12, 15, 14] </ref>. This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach [9, 13].
Reference: [9] <author> S.T. Levi, S.K. Tripathi, </author> <title> S.D. Carson, and A.K. Agrawala. The maruti hard real-time operating system. </title> <journal> ACM SIGOPS, Operating Systems Review, </journal> <volume> 23 </volume> <pages> 90-106, </pages> <month> July </month> <year> 1989. </year> <month> 42 </month>
Reference-contexts: This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach <ref> [9, 13] </ref>. A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3].
Reference: [10] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithm for multiprogramming in a hard real--time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: The approaches adopted to date for scheduling algorithms can be generally classified into two categories. One approach is to assign priorities to tasks so that the tasks can be scheduled according to their priorities <ref> [1, 7, 8, 10, 12, 15, 14] </ref>. This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach [9, 13].
Reference: [11] <author> G. McMahon and M. Florian. </author> <title> On scheduling with ready times and due dates to minimize maximum lateness. </title> <journal> Operations Research, </journal> <volume> 23(3) </volume> <pages> 475-482, </pages> <month> May </month> <year> 1975. </year>
Reference-contexts: A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3]. Due to the intractability, several search algorithms <ref> [11, 17, 19, 20] </ref> are proposed for com puting optimal or suboptimal schedules. Analytic techniques may also be used for optimal scheduling. A dominance concept by Erschler et al [2] was proposed to reduce the search space for checking the feasibility of task sets.
Reference: [12] <author> A. Mok. </author> <title> Fundamental Design Problems of Distributed Systems for the Hard Real-Time Environment. </title> <type> PhD thesis, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: The approaches adopted to date for scheduling algorithms can be generally classified into two categories. One approach is to assign priorities to tasks so that the tasks can be scheduled according to their priorities <ref> [1, 7, 8, 10, 12, 15, 14] </ref>. This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach [9, 13].
Reference: [13] <author> Manas Saksena and Ashok Agrawala. </author> <title> Temporal analysis for static hard-real time scheduling. </title> <booktitle> In Proceedings 12th International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 538-544, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach <ref> [9, 13] </ref>. A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3]. <p> Yuan and Agrawala [18] proposed decomposition methods to substantially reduce the search space based on the dominance concept. A task set is decomposed into subsets so that each subset can be scheduled independently. A super sequence is constructed to reduce search space further. Saksena and Agrawala <ref> [13] </ref> investigated the technique of temporal analysis serving as a pre-processing stage for scheduling. The idea is to modify the windows of two partially ordered tasks which are generated by the temporal relations so that more partial orderings of tasks may be generated recursively.
Reference: [14] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority Inheritance Protocols: An Approach to Real-Time Synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> Sep. </month> <year> 1990. </year>
Reference-contexts: The approaches adopted to date for scheduling algorithms can be generally classified into two categories. One approach is to assign priorities to tasks so that the tasks can be scheduled according to their priorities <ref> [1, 7, 8, 10, 12, 15, 14] </ref>. This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach [9, 13].
Reference: [15] <author> L. Sha, R. Rajkumar, and J.P. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <type> Technical Report CMU-CS-87-181, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1987. </year>
Reference-contexts: The approaches adopted to date for scheduling algorithms can be generally classified into two categories. One approach is to assign priorities to tasks so that the tasks can be scheduled according to their priorities <ref> [1, 7, 8, 10, 12, 15, 14] </ref>. This approach is called priority based scheduling. The priority can be determined by deadline, execution time, resource requirement, laxity, period, or can be programmer-defined [4]. The other is time based scheduling approach [9, 13].
Reference: [16] <author> J.A. Stankovic and K. Ramamritham. </author> <title> The spring kernel: Operating system support for critical, hard real-time systems. </title> <booktitle> In Workshop on Operating Systems for Mission Critical Computing, </booktitle> <pages> pages A1-A9, </pages> <month> Sep. </month> <year> 1989. </year>
Reference-contexts: The time based model is employed by several real-time operating systems currently being developed, including MARUTI [5], MARS [6], and Spring <ref> [16] </ref>. In this paper, we study an analytic approach to optimal scheduling under the time based model. When complicated timing constraints and task interdependency are taken into consideration, the schedulability analysis of priority based scheduling algorithms becomes much more difficult.
Reference: [17] <author> J. Xu and D. L. Parnas. </author> <title> Scheduling processes with release times, deadlines, precedence, and exclusion relations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(3):360-369, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3]. Due to the intractability, several search algorithms <ref> [11, 17, 19, 20] </ref> are proposed for com puting optimal or suboptimal schedules. Analytic techniques may also be used for optimal scheduling. A dominance concept by Erschler et al [2] was proposed to reduce the search space for checking the feasibility of task sets.
Reference: [18] <author> X. Yuan and A. K. Agrawala. </author> <title> A decomposition approach to nonpreemptive scheduling in hard real-time systems. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: A dominance concept by Erschler et al [2] was proposed to reduce the search space for checking the feasibility of task sets. They explored the relations among the tasks 3 and determined the partial orderings of feasible schedules. Yuan and Agrawala <ref> [18] </ref> proposed decomposition methods to substantially reduce the search space based on the dominance concept. A task set is decomposed into subsets so that each subset can be scheduled independently. A super sequence is constructed to reduce search space further. <p> Erschler et al [2] proposed the dominance concept to reduce the number of permutations that should be examined for the feasibility test of a task set. Yuan and Agrawala <ref> [18] </ref> proposed the super sequence to further reduce the search space for testing the feasibility of a task set. In this section, we show that for our optimization problem, the super sequence provides a valid and pruned search space. <p> The dominance concept is originally developed by Erschler et al [2] to reduce the search space for testing the feasibility of a task set. The idea is extended with the super sequence proposed by Yuan and Agrawala <ref> [18] </ref>. An instance I dominates an instance I 0 iff: I 0 f easible ) I f easible: It can be considered that I is a better candidate as a feasible schedule than I 0 . <p> A super sequence is a sequence of tasks, where duplicates of tasks are allowed. The purpose is to extract instances from the super sequence for scheduling. The super sequence is constructed according to the dominant rules <ref> [2, 18] </ref> described below. Whenever a task satisfies one of the conditions specified by the rules, a duplicate of the task is inserted into the super sequence. Note that duplicates can only be generated for nontop tasks. The top tasks appear once and only once in the super sequence. <p> We explore the temporal properties concerning the optimization issues, and present several theorems to formalize the results. The study of temporal properties on a uniprocessor may serve as a base for the more complex cases in multiprocessor systems. For the future work, we propose to incorporate the decomposition technique <ref> [18] </ref> into our scheduling algorithm. Under this approach a task set can be decomposed into subsets, which results in backtracking points to reduce the search space. This has been shown to be 41 useful in reducing the search space substantially when the task set is well decomposable.
Reference: [19] <author> W. Zhao, K. Ramamritham, and J. A. Stankovic. </author> <title> Preemptive scheduling under time and resource constraints. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(8):949-960, </volume> <month> Aug. </month> <year> 1987. </year>
Reference-contexts: A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3]. Due to the intractability, several search algorithms <ref> [11, 17, 19, 20] </ref> are proposed for com puting optimal or suboptimal schedules. Analytic techniques may also be used for optimal scheduling. A dominance concept by Erschler et al [2] was proposed to reduce the search space for checking the feasibility of task sets.
Reference: [20] <author> W. Zhao, K. Ramamritham, and J. A. Stankovic. </author> <title> Scheduling tasks with resource re-quirements in a hard real-time system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(5):564-577, </volume> <month> May </month> <year> 1987. </year> <month> 44 </month>
Reference-contexts: A time based scheduler generates as an output a calendar which specifies the time instants at which the tasks start and finish. Generally speaking, scheduling for aperiodic task sets without preemption is NP-complete [3]. Due to the intractability, several search algorithms <ref> [11, 17, 19, 20] </ref> are proposed for com puting optimal or suboptimal schedules. Analytic techniques may also be used for optimal scheduling. A dominance concept by Erschler et al [2] was proposed to reduce the search space for checking the feasibility of task sets.
References-found: 20

