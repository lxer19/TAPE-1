URL: file://ftp.cis.ohio-state.edu/pub/communication/papers/fgcs-barrier.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~panda/wormhole_pub.html
Root-URL: 
Title: Fast Barrier Synchronization in Wormhole k-ary n-cube Networks with Multidestination Worms A special issue on
Author: Dhabaleswar K. Panda 
Date: Jan 22-25, 1995.  
Note: Future Generation Computer Systems (FGCS), Vol. 11, Nov. 1995, pp. 585-602.  from International Symposium on High Performance Computer Architecture (HPCA '95) held in Raleigh,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. J. Beckmann and C. D. Polychronopoulos. </author> <title> Fast Barrier Synchronization Hardware. </title> <booktitle> In Proceedings of the Supercomputing '90, </booktitle> <address> New York, </address> <pages> pages 180-189, </pages> <month> Nov </month> <year> 1990. </year>
Reference-contexts: It also provides flexibility to achieve better overlapping of computation with synchronization [10]. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors <ref> [1, 15] </ref> with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in [8, 20]. However, very little research has been done to implement fast barrier synchronization on popular k-ary n-cube networks with wormhole routing.
Reference: [2] <author> R. V. Boppana, S. Chalasani, and C. S. Raghavendra. </author> <title> On Multicast Wormhole Routing in Multicomputer Networks. </title> <booktitle> In Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 722-729, </pages> <year> 1994. </year>
Reference-contexts: Hence, this model is quite general and can be used by any routing scheme. A similar but restricted method of using only row-path and column-path in e-cube meshes has also been independently proposed by Boppana, Chalasani, and Raghavendra <ref> [2] </ref>. 2.3 Intrinsic Benefits The significant benefit of the BRCP model comes from the fact that a message can be delivered to multiple destinations with the same overhead as that of sending it to a single destination, if the destinations can be grouped into a single worm under the BRCP model. <p> This alleviates the deadlock problem associated with multidestination gather worms for concurrent and overlapped arbitrary-set barriers. It is to be noted that multidestination broadcast worms may lead to deadlock due to limited number of consumption channels and it can be alleviated by using multiple consumption channels <ref> [2, 19] </ref>. The message field in synchronization buffers, as shown in Fig. 4a, is meant to hold a gather worm during its propagation if it gets blocked. On the current generation systems like IBM SP1/SP2, the router interface has 1K bytes of buffer to support buffered wormhole routing.
Reference: [3] <author> C.-M. Chiang and L. M. Ni. </author> <title> Multi-Address Encoding for Multicast. </title> <booktitle> In Proceedings of the Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pages 146-160, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: We propose using two new worm types, gather and broadcasting, to implement fast barrier synchronization. These worms propagate through paths conformed to the base-routing of the system [19]. A special bit-string encoding of multidestination addresses <ref> [3] </ref> is used by these worms. This limits the size of these worms to only a few flits depending on the system size and the channel width. <p> For a multidestination message, the header consists of multiple destinations and can span multiple flits. The sender node creates the list of destinations as an ordered list, depending on their intended order of traversal, and incorporate it into the header. There are different ways to encode these addresses <ref> [3] </ref> and these worms can have different functionality. To illustrate the concept, in this section, we use all-destination encoding format with broadcast/multicast functionality. In the next section, we propose using bit-string encoding and introduce alternative multidestination worm type like gather. <p> For a multiprogrammed system, some bits of this field should also identify task id so that different tasks running on overlapped partition of the system can barrier synchronize without any ambiguity. The destination addresses are encoded as a bit-string as proposed in <ref> [3] </ref>. For the linear array example being considered, six bits are sufficient to encode the addresses. Assuming processor 0 is identified as bit 0 of this address, the destination bit-string of gather worm initiated by P4 will be 000111.
Reference: [4] <author> A. A. Chien and J. H. Kim. </author> <title> Planar-Adaptive Routing: Low-Cost Adaptive Networks for Multiprocessors. </title> <booktitle> In Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pages 268-277, </pages> <year> 1992. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube [6], planar-adaptive <ref> [4] </ref>, turn-model [9], fully-adaptive [7], or any other routing scheme. <p> It is to be noted that a set of destinations ordered in a column-row manner will be an invalid path under the BRCP model for e-cube systems. Similarly, in a planar adaptive system <ref> [4] </ref>, a multi-destination worm can cover a set of destinations along any diagonal in addition to the flexibility supported by the ecube system. If the underlying routing scheme supports non-minimal west first turn model [9], it can provide further flexibility in covering a lot of destinations using a single worm.
Reference: [5] <author> Cray Research, Inc. </author> <title> Cray T3D System Architecture Overview, </title> <year> 1993. </year>
Reference-contexts: The end processors, P0 and P4, get waken-up by themselves after sending and receiving the broadcast worm, respectively. 3.2 Architectural Supports In order to implement the above gather worm type, we propose the following architectural supports at the router interface. Similar to the concept of barrier registers <ref> [5, 16] </ref>, a set of buffers are provided at each router interface of the system. Figure 4a shows a typical router interface organization with m such buffers.
Reference: [6] <author> W. J. Dally and C. L. Seitz. </author> <title> Deadlock-Free Message Routing in Multiprocessor Interconnection Networks. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube <ref> [6] </ref>, planar-adaptive [4], turn-model [9], fully-adaptive [7], or any other routing scheme. <p> fd 1 ; d 2 ; : : : ; d n1 g can be covered as intermediate nodes on one of the possible paths from s to d n under the routing constraint R. in an ecube system (assuming messages are routed first along row and then along column) <ref> [6] </ref>, a multidestination worm can cover a set of destinations in row/column/row-column order. It is to be noted that a set of destinations ordered in a column-row manner will be an invalid path under the BRCP model for e-cube systems.
Reference: [7] <author> J. Duato. </author> <title> A New Theory of Deadlock-Free Adaptive Routing in Wormhole Networks. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(12) </volume> <pages> 1320-1331, </pages> <year> 1993. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube [6], planar-adaptive [4], turn-model [9], fully-adaptive <ref> [7] </ref>, or any other routing scheme.
Reference: [8] <author> A. Feldmann, T. Gross, D. O'Hallaron, and T. Stricker. </author> <title> Subset Barrier Synchronization on a Private Memory Parallel System. </title> <booktitle> In Proceedings of the Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 209-218, </pages> <year> 1992. </year>
Reference-contexts: It also provides flexibility to achieve better overlapping of computation with synchronization [10]. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors [1, 15] with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in <ref> [8, 20] </ref>. However, very little research has been done to implement fast barrier synchronization on popular k-ary n-cube networks with wormhole routing. One easier way to implement barrier on a k-ary n-cube network is to use software message-passing.
Reference: [9] <author> C. J. Glass and L. Ni. </author> <title> The Turn Model for Adaptive Routing. </title> <booktitle> In Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pages 278-287, </pages> <year> 1992. </year>
Reference-contexts: The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube [6], planar-adaptive [4], turn-model <ref> [9] </ref>, fully-adaptive [7], or any other routing scheme. <p> Similarly, in a planar adaptive system [4], a multi-destination worm can cover a set of destinations along any diagonal in addition to the flexibility supported by the ecube system. If the underlying routing scheme supports non-minimal west first turn model <ref> [9] </ref>, it can provide further flexibility in covering a lot of destinations using a single worm. Hence, this model is quite general and can be used by any routing scheme.
Reference: [10] <author> R. Gupta. </author> <title> The Fuzzy Barrier: A Mechanism for the High Speed Synchronization of Processors. </title> <booktitle> In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 54-63, </pages> <year> 1989. </year>
Reference-contexts: In order to support these paradigms, the systems need fast implementation of barrier synchronization [13]. Reduced overhead for barrier synchronization alleviates the sequential bottleneck in a parallel program leading to better speedup. It also provides flexibility to achieve better overlapping of computation with synchronization <ref> [10] </ref>. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors [1, 15] with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in [8, 20]. <p> We assume static barriers [16] so that the processors participating in a barrier are known at compile time and the associated communication sequence can be generated before the program execution. A split-phase synchronization scheme <ref> [10, 15] </ref> with separate request and report phases is assumed. Figure 5 shows the communication sequence to implement a barrier on a linear array.
Reference: [11] <author> J. L. Hennessy and D. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Mor-gan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: These buffers are accessible by the associated processor using memory-mapped I/O references <ref> [11] </ref>. It is to be noted that by supporting m buffers at every router interface, a system can implement m concurrent barriers for an application at a given point of time. (a) synchronization buffers at a router interface and (b) a typical message format.
Reference: [12] <author> X. Lin and L. M. Ni. </author> <title> Deadlock-free Multicast Wormhole Routing in Multicomputer Networks. </title> <booktitle> In Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pages 116-124, </pages> <year> 1991. </year>
Reference-contexts: To illustrate the concept, in this section, we use all-destination encoding format with broadcast/multicast functionality. In the next section, we propose using bit-string encoding and introduce alternative multidestination worm type like gather. It is to be noted that multidestination mechanism was first introduced by Ni <ref> [12] </ref>. However, it was proposed for multicasting/broadcasting in Hamilto-nian path-based wormhole networks. In [19], we have proposed a generalized multidestination mechanism which can conform to the routing scheme of any wormhole network. We explain this concept later in this section.
Reference: [13] <author> Message Passing Interface Forum. </author> <title> MPI: A Message-Passing Interface Standard, </title> <month> Mar </month> <year> 1994. </year>
Reference-contexts: Intel Paragon, Cray T3D, Ncube, J-Machine, and Stanford DASH are representative systems falling into this category. Such systems are being used for supporting either distributed-memory, shared-memory, or distributed-shared memory programming paradigms. In order to support these paradigms, the systems need fast implementation of barrier synchronization <ref> [13] </ref>. Reduced overhead for barrier synchronization alleviates the sequential bottleneck in a parallel program leading to better speedup. It also provides flexibility to achieve better overlapping of computation with synchronization [10]. <p> Hence, this model opens up an entirely new framework together with its challenges for developing optimal algorithms to implement collective communication operations <ref> [13] </ref> with minimal time. In this paper, we emphasize on this framework by developing and evaluating algorithms for barrier synchronization which is an important collective communication operation. 3 Barrier Synchronization on a Linear Array In this section, we introduce a new multidestination gather worm type.
Reference: [14] <author> L. Ni and P. K. McKinley. </author> <title> A Survey of Wormhole Routing Techniques in Direct Networks. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 62-76, </pages> <month> Feb. </month> <year> 1993. </year> <month> 23 </month>
Reference-contexts: 1 Introduction The wormhole-routing switching technique is becoming the trend in building future parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead <ref> [14] </ref>. Intel Paragon, Cray T3D, Ncube, J-Machine, and Stanford DASH are representative systems falling into this category. Such systems are being used for supporting either distributed-memory, shared-memory, or distributed-shared memory programming paradigms. In order to support these paradigms, the systems need fast implementation of barrier synchronization [13]. <p> However, very little research has been done to implement fast barrier synchronization on popular k-ary n-cube networks with wormhole routing. One easier way to implement barrier on a k-ary n-cube network is to use software message-passing. Traditionally, the wormhole-routed systems have supported only point-to-point (uni-cast) message passing mechanism <ref> [14] </ref>. This mechanism allows a message to have only a single destination. Using unicast-based send and receive message passing primitives, barrier synchronization can easily be achieved using a two-phase procedure: report and wakeup [21]. <p> With bit-string encoding, the router interface needs to absorb all flits before making a routing decision to the next destination. Since the message length is quite small, we propose a virtual cut-through approach instead of strict wormhole routing <ref> [14] </ref>. This alleviates the deadlock problem associated with multidestination gather worms for concurrent and overlapped arbitrary-set barriers. It is to be noted that multidestination broadcast worms may lead to deadlock due to limited number of consumption channels and it can be alleviated by using multiple consumption channels [2, 19].
Reference: [15] <author> M. T. O'Keefe and H. G. Dietz. </author> <title> Hardware Barrier Synchronization: Dynamic Barrier MIMD (DBM). </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <pages> pages I: 43-46, </pages> <month> Aug </month> <year> 1990. </year>
Reference-contexts: It also provides flexibility to achieve better overlapping of computation with synchronization [10]. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors <ref> [1, 15] </ref> with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in [8, 20]. However, very little research has been done to implement fast barrier synchronization on popular k-ary n-cube networks with wormhole routing. <p> We assume static barriers [16] so that the processors participating in a barrier are known at compile time and the associated communication sequence can be generated before the program execution. A split-phase synchronization scheme <ref> [10, 15] </ref> with separate request and report phases is assumed. Figure 5 shows the communication sequence to implement a barrier on a linear array. <p> Consider a subset of nodes in a 2D mesh trying to barrier synchronize as shown in Fig. 8. If all processors belong to a single task then this subset barrier can be implemented as a complete barrier by forcing and ordering all processors to participate in each barrier <ref> [15] </ref>. However, such an assumption is very restrictive. In this section, we propose a general scheme which allows for multiple subset barriers to be executed concurrently in a system and the operation for a given barrier involves only the processors participating in that barrier.
Reference: [16] <author> M. T. O'Keefe and H. G. Dietz. </author> <title> Hardware Barrier Synchronization: Static Barrier MIMD (SBM). </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <pages> pages I: 35-42, </pages> <month> Aug </month> <year> 1990. </year>
Reference-contexts: The end processors, P0 and P4, get waken-up by themselves after sending and receiving the broadcast worm, respectively. 3.2 Architectural Supports In order to implement the above gather worm type, we propose the following architectural supports at the router interface. Similar to the concept of barrier registers <ref> [5, 16] </ref>, a set of buffers are provided at each router interface of the system. Figure 4a shows a typical router interface organization with m such buffers. <p> We will show that, under the current technology, the multidestination addresses can be encoded into a few (1-3) flits. 3.3 Communication Sequence Let us consider the communication sequence for the processors participating in a barrier using gather and broadcast worms. We assume static barriers <ref> [16] </ref> so that the processors participating in a barrier are known at compile time and the associated communication sequence can be generated before the program execution. A split-phase synchronization scheme [10, 15] with separate request and report phases is assumed.
Reference: [17] <author> D. K. Panda. </author> <title> Fast Barrier Synchronization in Wormhole k-ary n-cube Networks with Multidestination Worms. </title> <type> Technical Report OSU-CISRC-8/94-TR41, </type> <institution> Dept. of Computer and Information Science, The Ohio State University, </institution> <year> 1994. </year>
Reference-contexts: It shows that with future improvement in communication link technology and node design, the multidestination scheme will be able to implement faster barrier synchronization than the unicast-based scheme. More simulation results with respect to other system, topology, and technological parameters can be found in <ref> [17] </ref>. link propagation and node delay in a 32x32 mesh (a) 40% nodes participating and (b) 80% nodes participating. 6 Conclusions and Future Research In this paper, we have presented a new approach to implement fast and scalable barrier synchronization in k-ary n-cube wormhole systems using multidestination gather and broadcast worms.
Reference: [18] <author> D. K. Panda. </author> <title> Global Reduction in Wormhole k-ary n-cube Networks with Multidestination Exchange Worms. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <pages> pages 652-659, </pages> <month> Apr </month> <year> 1995. </year>
Reference-contexts: We will be evaluating the scheme for multiple barriers with asynchronous arrival and their impact on overall program execution time. We are also extending our work to other collective communication patterns like global-combine <ref> [18] </ref> and parallel-prefix. As the system size grows, the proposed scheme encounters more delay due to increased path length. We are working on alternative schemes to reduce such impact of path length.
Reference: [19] <author> D. K. Panda, S. Singal, and P. Prabhakaran. </author> <title> Multidestination Message Passing Mechanism Conforming to Base Wormhole Routing Scheme. </title> <booktitle> In Proceedings of the Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pages 131-145, </pages> <year> 1994. </year>
Reference-contexts: In this paper, we take such a challenge and propose a fast, scalable, and cost-effective synchronization scheme for systems using wormhole direct networks. Our solution is based on using multidestination wormhole mechanism which was introduced by us recently <ref> [19] </ref>. We propose using two new worm types, gather and broadcasting, to implement fast barrier synchronization. These worms propagate through paths conformed to the base-routing of the system [19]. A special bit-string encoding of multidestination addresses [3] is used by these worms. <p> Our solution is based on using multidestination wormhole mechanism which was introduced by us recently <ref> [19] </ref>. We propose using two new worm types, gather and broadcasting, to implement fast barrier synchronization. These worms propagate through paths conformed to the base-routing of the system [19]. A special bit-string encoding of multidestination addresses [3] is used by these worms. This limits the size of these worms to only a few flits depending on the system size and the channel width. <p> Simulation experiments and results are presented in section 5. Finally, we conclude the paper with future research directions. 5 2 Overview of Multidestination Mechanism In this section, we summarize wormhole message passing mechanism with multiple destinations <ref> [19] </ref>. Intrinsic benefits of this mechanism over unicast message passing are emphasized. 2.1 The Mechanism A single destination wormhole message consists of a body and a header with its destination number. For a multidestination message, the header consists of multiple destinations and can span multiple flits. <p> In the next section, we propose using bit-string encoding and introduce alternative multidestination worm type like gather. It is to be noted that multidestination mechanism was first introduced by Ni [12]. However, it was proposed for multicasting/broadcasting in Hamilto-nian path-based wormhole networks. In <ref> [19] </ref>, we have proposed a generalized multidestination mechanism which can conform to the routing scheme of any wormhole network. We explain this concept later in this section. In this paper, in addition to multicast/broadcast operations, we show how to use multidestination mechanism for gather/reduction operations. <p> The validity of this worm depends on the underlying routing scheme. Assume the network supports a deadlock-free routing scheme R which can be e-cube [6], planar-adaptive [4], turn-model [9], fully-adaptive [7], or any other routing scheme. The Base-Routing-Conformed-Path (BRCP) model, as defined in <ref> [19] </ref>, is as follows: Definition 1 A multidestination worm with an ordered destination list fd 1 ; d 2 ; : : : ; d n1 ; d n g in a network supporting routing R conforms to this base routing iff the destination set fd 1 ; d 2 ; <p> As the adaptivity of the base routing increases, more and more destinations can be covered by a single multidestination worm. As the number of destinations per source increases in operations like multicast and broadcast, less number of multidestination worms are needed to cover them compared to the unicast-based schemes <ref> [19] </ref>. If the set of destinations demonstrate some spatial organization (row, column, diagonal, or block) then a suitable scheme based on the underlying routing constraint can also be developed to cover them using as few multidestination worms as possible. <p> It can be seen that as the number of participating nodes increases, more and more of them can be grouped together along rows and columns and it reduces the number of column leaders L 2 <ref> [19] </ref>. Hence this scheme allows to reduce synchronization cost as the number of participating nodes increases. Table 1 illustrates the effect of multidestination gather and broadcast on the number of row and column leaders as well as the number of communication steps required for barrier 15 synchronization. <p> This alleviates the deadlock problem associated with multidestination gather worms for concurrent and overlapped arbitrary-set barriers. It is to be noted that multidestination broadcast worms may lead to deadlock due to limited number of consumption channels and it can be alleviated by using multiple consumption channels <ref> [2, 19] </ref>. The message field in synchronization buffers, as shown in Fig. 4a, is meant to hold a gather worm during its propagation if it gets blocked. On the current generation systems like IBM SP1/SP2, the router interface has 1K bytes of buffer to support buffered wormhole routing.
Reference: [20] <author> J. A. Solworth and J. Stamatopoulos. </author> <title> Integrated Network Barriers for D-dimensional Meshes. In Proceedings of the Working Conference on Architectures and Compilation Techniques for Fine and Medium Grain Parallelism, </title> <year> 1992. </year>
Reference-contexts: It also provides flexibility to achieve better overlapping of computation with synchronization [10]. Many hardware, software, and hybrid schemes have been proposed in the literature to efficiently implement barrier synchronization on shared-memory multiprocessors [1, 15] with bus and multistage interconnections. Topology- and routing-specific synchronization schemes have been proposed in <ref> [8, 20] </ref>. However, very little research has been done to implement fast barrier synchronization on popular k-ary n-cube networks with wormhole routing. One easier way to implement barrier on a k-ary n-cube network is to use software message-passing.

References-found: 20

