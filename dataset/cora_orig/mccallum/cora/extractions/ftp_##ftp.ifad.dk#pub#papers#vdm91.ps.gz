URL: ftp://ftp.ifad.dk/pub/papers/vdm91.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Email: E-mail: peter@ifad.dk and poul@ifad.dk  
Title: An Executable Subset of Meta-IV with Loose Specification  
Author: Peter Gorm Larsen and Poul Btgh Lassen 
Address: Munkebjergvnget 17, DK-5230 Odense M, Denmark  
Affiliation: The Institute of Applied Computer Science (IFAD)  
Abstract: In ESPRIT project no. EP5570 called IPTES 1 a methodology and a supporting environment for incremental prototyping of embedded computer systems is developed. As a part of this prototyping tool an interpreter for an executable subset of a VDM dialect is developed. Based on a comparative study of different notations inspired by VDM we have now selected an executable subset of the BSI/VDM-SL 2 notation. This executable subset is interesting because it enables the designer to use loose specification. None of the executable VDM dialects which we have investigated contain as large a part of looseness as our subset does. In this article we will focus mainly on which constructs we have in this subset and how we have dealt with the looseness. Furthermore we will sketch the connection between the semantics of our subset and the semantics for the full BSI/VDM-SL. 
Abstract-found: 1
Intro-found: 1
Reference: [Alexander&90] <author> Heather Alexander and Val Jones. </author> <title> Software Design and Prototyping using Me Too. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: These are the Meta-IV compiler project from Kiel University (see [Ha87]), and the EPROS project where both an interpreter and a compiler for a language called EPROL (strongly inspired by VDM) have been developed (see [Hekmatpour&88]). In addition to these two we have looked at `me too' (see <ref> [Alexander&90] </ref>). The main difference between our executable language and the existing ones is the generality of the pattern matching. None of the existing executable languages inspired by VDM which have been mentioned above contains more than pattern identifiers, tuple patterns, and record patterns.
Reference: [Bjtrner91] <author> Dines Bjtrner. </author> <title> Software Architectures and Programming Systems Design. </title> <note> Submitted to publisher. </note>
Reference-contexts: Statements We have included all the statements from BSI/VDM-SL except for the block statement, the non-deterministic statement, the identity statement, and the exit mechanism. 4 The Semantics of the Executable Subset The semantics presented here is operational, and it is inspired by <ref> [Bjtrner91] </ref> where a stack semantics of a Simple Applicative Language (SAL) is presented. However, we are only using a stack of environments, and not a stack of values. This difference is caused by the fact that the target for the development of the interpreter in [Bjtrner91] was a stack machine, while <p> and it is inspired by <ref> [Bjtrner91] </ref> where a stack semantics of a Simple Applicative Language (SAL) is presented. However, we are only using a stack of environments, and not a stack of values. This difference is caused by the fact that the target for the development of the interpreter in [Bjtrner91] was a stack machine, while our target is a high level programming language (C++). The semantics of the executable subset of BSI/VDM-SL is itself described using the complete version of BSI/VDM-SL 4 . However, expressions in BSI/VDM-SL cannot have side-effects and therefore, operations cannot be called inside expressions.
Reference: [BSIVDM91] <institution> VDM Specification Language - Proto-Standard. </institution> <type> Technical Report, </type> <institution> British Standards Institution, </institution> <year> 1991. </year> <note> BSI IST/5/50. </note>
Reference-contexts: This language is developed in order to harmonize the different VDM dialects into one standard language. This standardization effort is currently done under the auspices of BSI and ISO and it involves the definition of a concrete syntax, an abstract syntax, a static semantics, and a dynamic semantics (see <ref> [BSIVDM91] </ref>). We have taken these four parts as our starting point and have selected a subset of BSI/VDM-SL with minor adjustments to make the language fit the IPTES architecture. An important quality of BSI/VDM-SL is that it contains constructs which can be loosely specified.
Reference: [Ghezzi&91] <author> Carlo Ghezzi, Dino Mandrioli, Sandro Morasca and Mauro Pezze. </author> <title> A Unified High-Level Petri Net Model For Time-Critical Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(2), </volume> <year> 1991. </year>
Reference-contexts: Initially a system is described by means of a high-level graphical specification and design language SA/RT 3 (see [Ward&85]) where BSI/VDM-SL (also called Meta-IV) is used in the so-called mini-specifications to specify sequential components. The SA/RT specifications are made executable by a transformation to high-level timed Petri nets (see <ref> [Ghezzi&91] </ref>), while the mini-specifications are interpreted by an interpreter which is going to conform to the operational semantics as described in this article.
Reference: [Ha87] <author> Manfred Ha. </author> <title> Development and Application of a Meta IV Compiler. In VDM </title> - 
Reference-contexts: In [Plat&89] an overview of existing tool support for VDM is presented. However, only two projects dealing with an executable subset of VDM-SL are given in that overview. These are the Meta-IV compiler project from Kiel University (see <ref> [Ha87] </ref>), and the EPROS project where both an interpreter and a compiler for a language called EPROL (strongly inspired by VDM) have been developed (see [Hekmatpour&88]). In addition to these two we have looked at `me too' (see [Alexander&90]).
References-found: 5

