URL: http://www.cs.nyu.edu/cs/faculty/cole/papers/CGHMP93.ps
Refering-URL: http://www.cs.nyu.edu/cs/faculty/cole/string.html
Root-URL: http://www.cs.nyu.edu
Title: Parallel Two Dimensional Witness Computation  
Author: Richard Cole Zvi Galil Ramesh Hariharan S. Muthukrishnan 
Date: September 18, 1996  
Address: Park  
Affiliation: Kunsoo  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [AB92] <author> A. Amir, G. Benson. </author> <title> Two dimensional periodicity in rectangular arrays. </title> <booktitle> Proc. of the 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 440-452. </pages>
Reference-contexts: parallel algorithm for witness computation used suffix trees and was not optimal; it took O (log m) time using O (m 1 fi m 2 ) processors on a CRCW-PRAM and O (log 2 m) time using O ( m 1 fim 2 log m ) processors on a CREW-PRAM <ref> [AB92] </ref>, where m = maxfm 1 ; m 2 g. We give an algorithm which takes O (log log m) time and O (m 1 fim 2 ) work to compute witnesses for all non-period vectors of the pattern on a CRCW-PRAM.
Reference: [ABF92] <author> A. Amir, G. Benson, M. Farach. </author> <title> Alphabet independent two dimensional matching. </title> <booktitle> Proc. of the 24th ACM Symposium on Theory of Computing, </booktitle> <year> 1992, </year> <pages> pp. 59-68. </pages>
Reference-contexts: 1 Introduction We consider the problem of computing witnesses in parallel for all non-period vectors of a pattern p with m 1 rows and m 2 columns. The significance of this problem is that all known optimal alphabet-independent parallel and sequential algorithms for 2D pattern matching <ref> [ABF92, ABF93, GP92, CGHMR92] </ref> require precomputation of witnesses for all non-period vectors of row length less than m 1 k and column length less than m 2 k , where the value of the constant k affects the text processing time and work by only a constant factor.
Reference: [ABF93] <author> A. Amir, G. Benson, M. Farach. </author> <title> Optimal parallel two dimensional pattern matching. </title> <booktitle> Proc. of the 5th ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1993, </year> <pages> pp. 79-85. </pages>
Reference-contexts: 1 Introduction We consider the problem of computing witnesses in parallel for all non-period vectors of a pattern p with m 1 rows and m 2 columns. The significance of this problem is that all known optimal alphabet-independent parallel and sequential algorithms for 2D pattern matching <ref> [ABF92, ABF93, GP92, CGHMR92] </ref> require precomputation of witnesses for all non-period vectors of row length less than m 1 k and column length less than m 2 k , where the value of the constant k affects the text processing time and work by only a constant factor. <p> In addition, it is said to fall in a sub-block T of p 0 if c 2 T . There are two substeps in Step B. In Substep B.1, all sets of vectors which fall in the same row are processed in parallel. Using an algorithm similar to <ref> [ABF93] </ref>, witnesses are found for some of these vectors in O (log log m) time and O (m 1 fi m 2 ) work. The actual procedure is described in Appendix I. The basic operation in the algorithm of [ABF93] is a duel between a pair of vectors or a pair <p> Using an algorithm similar to <ref> [ABF93] </ref>, witnesses are found for some of these vectors in O (log log m) time and O (m 1 fi m 2 ) work. The actual procedure is described in Appendix I. The basic operation in the algorithm of [ABF93] is a duel between a pair of vectors or a pair of sets of consistent vectors, where vectors v; w are consistent if and only if w v does not have a witness in p 0 . <p> Using these witnesses, all occurrences of U with top left corner in q 0 are found using the pattern matching algorithm of <ref> [ABF93] </ref>. In addition, for each vector v 2 V , if a copy of U placed with top left corner at d v mismatches E at some location, one such point of mismatch is computed. This point is the head of a witness for v. Step 1.3. <p> L B 0 q 0 d v r b r i r i c j 2b 16 c 16 c 16 c All occurrences of L with top left corner in U are found in O (log log m) time and O (jEj) work using the pattern matching algorithm of <ref> [ABF93] </ref>. The witnesses computed in Step 1 are used in this process. If the copy of L with top left corner at d v 0 v mismatches the portion of p it overlaps at some location d, then (d; d + v) is a witness for v. Step 1.4.
Reference: [ABG92] <author> A. Apostolico, D. Breslauer and Z. Galil. </author> <title> Optimal parallel algorithms for periods, palindromes and squares. </title> <booktitle> Proc. of the 19th International Colloquium on Automata, Languages and Programming, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 623, </volume> <year> 1992, </year> <pages> pp. 296-307. </pages>
Reference-contexts: In the second step, witnesses are computed for all non-period vectors. The second step is an extension of the algorithm for the first step. A natural approach to performing these steps is to follow the approach for computing string witnesses <ref> [BG90, ABG92] </ref>. There, witnesses for a string s of length m are found in O (log log m) stages. <p> This simply involves finding witnesses along each row and column of p 0 ; this is done in O (log log m) time and O (m 1 fim 2 ) work using the string witness computation algorithm of <ref> [BG90, ABG92] </ref>. Definition. p 0 is said to be r-oriented if it has a valid horizontal period vector.
Reference: [Ba78] <author> T. J. Baker. </author> <title> A technique for extending rapid exact-match string matching to arrays of more than one dimension. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 7, </volume> <year> 1978, </year> <pages> pp. 533-541. </pages>
Reference: [Bi77] <author> R. S. Bird. </author> <title> Two dimensional pattern matching. </title> <journal> Information Processing Letters, </journal> <volume> Vol. 6, No. 5, </volume> <year> 1977, </year> <pages> pp. 168-170. </pages>
Reference: [BG90] <author> D. Breslauer and Z. Galil. </author> <title> An optimal O(log log m) time parallel string matching algorithm. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 19, </volume> <year> 1990, </year> <pages> pp. 1051-1058. </pages>
Reference-contexts: In the second step, witnesses are computed for all non-period vectors. The second step is an extension of the algorithm for the first step. A natural approach to performing these steps is to follow the approach for computing string witnesses <ref> [BG90, ABG92] </ref>. There, witnesses for a string s of length m are found in O (log log m) stages. <p> This simply involves finding witnesses along each row and column of p 0 ; this is done in O (log log m) time and O (m 1 fim 2 ) work using the string witness computation algorithm of <ref> [BG90, ABG92] </ref>. Definition. p 0 is said to be r-oriented if it has a valid horizontal period vector.
Reference: [BG91] <author> D. Breslauer and Z. Galil. </author> <title> A lower bound for parallel string matching. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 21, </volume> <year> 1992, </year> <pages> pp. 856-862. </pages>
Reference-contexts: Work supported by NSF grants CCR-8902221, CCR-8906949 and CCR-9202900. x Courant Institute, NYU. Work supported by NSF/DARPA grant CCR-89-06949 and NSF grant CCR-91 03953. Department of Computer Engineering, Seoul National University, Seoul 151-742, Korea. 1 time. The lower bound of <ref> [BG91] </ref> for string matching implies that any algorithm for 2D pattern matching requires (log log m) time using a linear number of processors in the comparison model of computing. In fact, this lower bound also holds for square 2D pattern matching as we show in this paper. <p> Stage i finds witnesses for a prefix of s of length l i ; these witnesses are used in Stage i + 1 to find witnesses for the prefix of s of length l i+1 in constant time. The lower bound of <ref> [BG91] </ref> shows that (log log m) stages are required when only O (m) work is allowed. A natural analog of a prefix of a string is a corner sub-block of the 2d pattern p. <p> This presents two problems. Problem 1. Using a construction similar to the string matching lower bound of <ref> [BG91] </ref>, it is possible to show that, if no additional information is at hand, Stage i takes (log log jL i j) time even for the simple case in which all period vectors of L i are parallel.
Reference: [CGGPR93] <author> M. Crochemore, Z. Galil, L. Gasieniec, K. Park, W. Rytter. </author> <title> Constant time Deterministic Sample computation and its applications. </title> <type> Manuscript, </type> <year> 1993. </year> <month> 36 </month>
Reference-contexts: We give an algorithm which takes O (log log m) time and O (m 1 fim 2 ) work to compute witnesses for all non-period vectors of the pattern on a CRCW-PRAM. When combined with [CGHMR92] and <ref> [CGGPR93] </ref>, our result provides a work optimal algorithm for 2D pattern matching; it takes O (log log m) preprocessing time and O (1) text processing fl Courant Institute, NYU. Work supported by NSF grants CCR-8902221, CCR-8906949 and CCR-9202900. y Columbia University and Tel-Aviv University.
Reference: [CGHMR92] <author> M. Crochemore, L. Gasieniec, R. Hariharan, S. Muthukrishnan, W. Rytter. </author> <title> An optimal constant time parallel algorithm for 2D pattern matching. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference-contexts: 1 Introduction We consider the problem of computing witnesses in parallel for all non-period vectors of a pattern p with m 1 rows and m 2 columns. The significance of this problem is that all known optimal alphabet-independent parallel and sequential algorithms for 2D pattern matching <ref> [ABF92, ABF93, GP92, CGHMR92] </ref> require precomputation of witnesses for all non-period vectors of row length less than m 1 k and column length less than m 2 k , where the value of the constant k affects the text processing time and work by only a constant factor. <p> We give an algorithm which takes O (log log m) time and O (m 1 fim 2 ) work to compute witnesses for all non-period vectors of the pattern on a CRCW-PRAM. When combined with <ref> [CGHMR92] </ref> and [CGGPR93], our result provides a work optimal algorithm for 2D pattern matching; it takes O (log log m) preprocessing time and O (1) text processing fl Courant Institute, NYU. Work supported by NSF grants CCR-8902221, CCR-8906949 and CCR-9202900. y Columbia University and Tel-Aviv University.
Reference: [CCG+93] <author> R. Cole, M. Crochemore, Z. Galil, L. Gasieniec, R. Hariharan, S. Muthukrishnan, K. Park, W. Rytter. </author> <title> Optimal parallel algorithms for preprocessing and pattern matching in one and two dimensions. </title> <booktitle> Proc. of the 34rd IEEE Symposium on the Foundations of Computer Science, </booktitle> <year> 1993, </year> <pages> pp. 248-257. </pages>
Reference: [FRW88] <author> F. Fich, R. Ragde, A. Widgerson. </author> <title> Relations between concurrent-write models of parallel computation, </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 17, </volume> <year> 1988, </year> <pages> pp. 606-627. </pages>
Reference-contexts: Topmost, leftmost, rightmost, leftmost topmost, rightmost bottommost etc. are defined analogously. In order to determine such locations, we will repeatedly use the algorithm of <ref> [FRW88] </ref> for finding the leftmost `1' in a binary string s without mention. This algorithm requires constant time and O (jsj) work.
Reference: [GP92] <author> Z. Galil and K. Park. </author> <title> Truly alphabet-independent two dimensional matching. </title> <booktitle> Proc. of the 33rd IEEE Symposium on the Foundations of Computer Science, </booktitle> <year> 1992, </year> <pages> pp. 247-256. </pages>
Reference-contexts: 1 Introduction We consider the problem of computing witnesses in parallel for all non-period vectors of a pattern p with m 1 rows and m 2 columns. The significance of this problem is that all known optimal alphabet-independent parallel and sequential algorithms for 2D pattern matching <ref> [ABF92, ABF93, GP92, CGHMR92] </ref> require precomputation of witnesses for all non-period vectors of row length less than m 1 k and column length less than m 2 k , where the value of the constant k affects the text processing time and work by only a constant factor. <p> The first linear time (i.e., O (m 1 fi m 2 )) sequential algorithm to compute witnesses for all non-period vectors of p of row length less than m 1 4 and column length less than m 2 4 was obtained recently by Galil and Park <ref> [GP92, GP93] </ref>. <p> This remains true if L i is a central rather than a corner sub-block of L i+1 , as in the sequential algorithm of <ref> [GP92, GP93] </ref>. Since there are fi (log log m) stages, this approach leads to an algorithm which takes ((log log m) 2 ) time even for this simple case. But our goal is an O (log log m) time algorithm. Problem 2. <p> Problem 2. For the general case, i.e., when the period vectors of L i are non-parallel, it is not clear how to perform Stage i in O (log log m) or even O (log m) time while preserving work optimality of the overall algorithm. The sequential algorithm of <ref> [GP92, GP93] </ref> performs Stage i by using a sequential algorithm for computing leftmost string witnesses [ML84]. <p> It follows that in all the above three cases, g is above the top boundary of A, a contradiction. 2 Remark. Note that Lemmas 4.1 and 4.2 also appear implicitly in <ref> [GP92, GP93] </ref>. Definitions. Let A 0 be some region of p which contains A.
Reference: [GP93] <author> Z. Galil and K. Park. </author> <title> Alphabet-independent two dimensional witness computation. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: The first linear time (i.e., O (m 1 fi m 2 )) sequential algorithm to compute witnesses for all non-period vectors of p of row length less than m 1 4 and column length less than m 2 4 was obtained recently by Galil and Park <ref> [GP92, GP93] </ref>. <p> This remains true if L i is a central rather than a corner sub-block of L i+1 , as in the sequential algorithm of <ref> [GP92, GP93] </ref>. Since there are fi (log log m) stages, this approach leads to an algorithm which takes ((log log m) 2 ) time even for this simple case. But our goal is an O (log log m) time algorithm. Problem 2. <p> Problem 2. For the general case, i.e., when the period vectors of L i are non-parallel, it is not clear how to perform Stage i in O (log log m) or even O (log m) time while preserving work optimality of the overall algorithm. The sequential algorithm of <ref> [GP92, GP93] </ref> performs Stage i by using a sequential algorithm for computing leftmost string witnesses [ML84]. <p> It follows that in all the above three cases, g is above the top boundary of A, a contradiction. 2 Remark. Note that Lemmas 4.1 and 4.2 also appear implicitly in <ref> [GP92, GP93] </ref>. Definitions. Let A 0 be some region of p which contains A.
Reference: [H92] <author> R. Hariharan. </author> <title> An Optimal parallel algorithm for computing leftmost string witnesses. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference-contexts: Using a similar approach, Stage i can be performed in O (log 2 m (log log m) 3 ) time using the only known optimal parallel algorithm for computing leftmost string witnesses <ref> [H92] </ref>, but this is too slow for our purpose. Our O (log log m) algorithm has the following two key features. First, Problem 2 is solved in O (log log m) time and O (jL i+1 j) work for the general case.
Reference: [Ja91] <author> J. JaJa. </author> <title> Introduction to Parallel Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: We assume the Common CRCW-PRAM model, i.e., simultaneous writes to the same location by several processors are guaranteed to be of the same value <ref> [Ja91] </ref>. We need a primitive called Line (V; R; R 0 ).
Reference: [KLP89] <author> Z. Kedem, G. Landau, K. Palem. </author> <title> Optimal parallel suffix-prefix matching algorithm and application. </title> <booktitle> Proc. of the 1st ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1989, </year> <pages> pp. 388-398. </pages>
Reference: [ML84] <author> M.G. </author> <title> Main and R.J. Lorentz. An O(n log n) algorithm for finding all repetitions in a string. </title> <journal> Journal of Algorithms, </journal> <volume> Vol. 5, </volume> <year> 1984, </year> <pages> pp. 422-432. </pages>
Reference-contexts: The sequential algorithm of [GP92, GP93] performs Stage i by using a sequential algorithm for computing leftmost string witnesses <ref> [ML84] </ref>. Using a similar approach, Stage i can be performed in O (log 2 m (log log m) 3 ) time using the only known optimal parallel algorithm for computing leftmost string witnesses [H92], but this is too slow for our purpose.
Reference: [Ra90] <author> P. Ragde. </author> <title> The parallel simplicity of compaction and chaining. </title> <booktitle> Proc. of the 17th International Colloquium on Automata, Languages and Programming, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 443, </volume> <year> 1990, </year> <pages> pp. 744-751. </pages>
Reference: [Vi85] <author> U. Vishkin. </author> <title> Optimal pattern matching in strings. </title> <journal> Information and Control, </journal> <volume> Vol. 67, </volume> <year> 1985, </year> <pages> pp. 91-113. </pages>
Reference-contexts: This act of finding a witness for one of two vectors using a witness for their difference vector is called a duel <ref> [Vi85] </ref> between the two vectors. Two overlapping copies of p are said to be consistent if the vector joining their top left corners lacks a witness in p; these two copies are then said to be period overlaps of each other.
Reference: [Vi90] <author> U. Vishkin. </author> <title> Deterministic sampling Anew technique for fast pattern matching. </title> <booktitle> Proc. of the 22nd ACM Symposium on Theory of Computing, </booktitle> <year> 1990, </year> <pages> pp. </pages> <month> 170-180. </month> <title> 37 v l V R 0 f </title>
References-found: 21

