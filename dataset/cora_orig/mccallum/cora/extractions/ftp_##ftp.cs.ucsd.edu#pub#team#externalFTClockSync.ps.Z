URL: ftp://ftp.cs.ucsd.edu/pub/team/externalFTClockSync.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Email: e-mail: fcfetzer, flaviug@cs.ucsd.edu  
Title: Integrating External and Internal Clock Synchronization  
Author: Christof Fetzer and Flaviu Cristian 
Date: June 4, 1996  
Web: http://www-cse.ucsd.edu/users/fcfetzer, flaviug  
Address: La Jolla, CA 920930114  
Affiliation: Department of Computer Science Engineering University of California, San Diego  
Abstract: We address the problem of how to integrate fault-tolerant external and internal clock synchronization. In this paper we propose a new external/internal clock synchronization algorithm which provides both external and internal clock synchronization for as long as a majority of the reference time servers (servers with access to reference time) stay correct. When half or more of the reference time servers are faulty, the algorithm degrades to a fault-tolerant internal clock synchronization algorithm. We prove that at least 2F +1 reference time servers are necessary for achieving external clock synchronization when up to F reference time servers can suffer arbitrary failures, thus the proposed algorithm provides maximum fault-tolerance. In this paper we also derive lower bounds for the best maximum external deviation achievable in standard mode and the best drift rate achievable in degraded mode. Our algorithm is optimal with respect to these two bounds: (1) the maximum external deviation is optimal in standard mode, and (2) the drift rate of the clocks is optimal in standard and degraded mode. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Cristian. </author> <title> Probabilistic clock synchronization. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 146-158, </pages> <year> 1989. </year>
Reference-contexts: Clocks can be externally or internally synchronized <ref> [1] </ref>. A clock is externally synchronized if at any point in real-time the distance between its value and reference time is bounded by an a priori given constant called maximum external deviation.
Reference: [2] <author> F. Cristian, B. Dancey, and J. Dehn. </author> <title> Fault-tolerance in the Advanced Automation System. </title> <booktitle> In Proceedings of the Twentieth Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 6-17, </pages> <address> Newcastle-upon-Tyne, UK, </address> <month> Jun </month> <year> 1990. </year>
Reference-contexts: For example, in the Advanced Automation System, the correctness of automated recovery from component failures depends on correct internal clock synchronization <ref> [2] </ref> but the system can continue to function in the absence of external clock synchronization in a degraded way.
Reference: [3] <author> F. Cristian and C. </author> <title> Fetzer. Fault-tolerant internal clock synchronization. </title> <booktitle> In Proceedings of the Thirteenth Symposium on Reliable Distributed Systems, Dana Point, </booktitle> <address> Ca., </address> <month> Oct </month> <year> 1994. </year>
Reference-contexts: Methods for making synchronization algorithms tolerant to remote clock reading failures are proposed in <ref> [3] </ref>. 4 Requirements In this section we will define internal, external, and external/internal clock synchronization more precisely. 4.1 Internal Clock Synchronization The first objective of an internal clock synchronization algorithm is to bound the deviation between any two correct virtual clocks by a constant ffi to be called the maximum internal <p> To optimize the drift rate in degraded mode and the maximum internal deviation, we want to minimize the modification towards the approximation of reference time. The influence of the maximum clock reading error on that modification can actually be eliminated using an interval extension technique <ref> [3] </ref>. <p> We denote the maximum real-time distance be tween two successive adjustments of C q by constant r max . Variable midV is set to the extended fault-tolerant midpoint <ref> [3] </ref> which ensures that there exists two correct virtual clocks C p1 and C p2 such that at local time T , midV is not greater than C p1 and not smaller than C p2 .
Reference: [4] <author> F. Cristian and C. </author> <title> Fetzer. Fault-tolerant internal clock synchronization. </title> <type> Technical Report CS94-367, </type> <institution> Dept of Computer Science and Engineering, University of California, </institution> <address> San Diego, La Jolla, CA, </address> <year> 1994. </year>
Reference-contexts: Since we overestimated the length of I k and the duration of round k in the analysis of case t k+1 p = t k+1 we also overestimated the upper bound for jmid (I k p ) q )j. A detailed analysis (see <ref> [4] </ref>) shows that for t k+1 q the additional error is actually at most fi. Two processes p and q can disagree arbitrarily on their approximation of reference time when half or more of the reference time servers are faulty.
Reference: [5] <author> F. Cristian and C. </author> <title> Fetzer. Fault-tolerant external clock synchronization. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Systems, </booktitle> <address> Vancouver, Canada., </address> <month> May </month> <year> 1995. </year>
Reference-contexts: and the maximum drift rate of the clocks is optimal, and * in degraded mode the maximum drift rate of the clocks is optimal (about twice the maximum drift rate of hardware clocks). 2 Related Work Integration of external and internal clock synchronization has recently been addressed by several authors <ref> [11, 12, 5, 9, 15] </ref>. The paper of Schmid [11, 12] addresses the integration of external and internal clock synchronization in the context of real-time systems. Kopetz et al. [9] addressed the problem of how to integrate external and internal clock synchronization in the context of synchronizing multicluster real-time systems.
Reference: [6] <author> D. Dolev, J. Y. Halpern, and R. </author> <title> Strong. On the possibility and impossibility of achieving clock synchronization. </title> <journal> Journal of Computer and System Science, </journal> <volume> 32(2) </volume> <pages> 230-250, </pages> <year> 1986. </year> <month> 28 </month>
Reference-contexts: In systems without access to reference time and without message authentication, at least 3F +1 time servers are needed to guarantee internal clock synchronization despite F arbitrary time server failures <ref> [6] </ref>. We show below that 2F +1 reference time servers are needed and sufficient to guarantee external synchronization of non-reference time servers in case that up to F reference time servers can suffer arbitrary failures. <p> Achieving this internal synchronization of the servers in R has to be provided by another algorithm, i.e. an internal clock synchronization algorithm. However, the clocks in R cannot be internally synchronized because F of the 2F +1 servers in R can fail <ref> [6] </ref>. When we replace the servers in R by reference time servers, these servers receive external time signals which allow them to synchronize their clocks externally and therefore also internally. <p> Note that 3F N + 1 is the lower bound for the number of non-reference time servers needed to achieve internal clock synchronization (in case there is no access to reference time) <ref> [6] </ref>. Thus, we assume that less than one third of the non-reference time servers are faulty.
Reference: [7] <author> C. Fetzer and F. Cristian. </author> <title> Lower bounds for convergence function based clock synchronization. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Ottawa, CA, </address> <month> Aug </month> <year> 1995. </year>
Reference-contexts: The algorithm guarantees optimal external deviation when the service is in standard mode. The maximum internal deviation of the clocks is close to the optimal internal deviation. It is not optimal even though the used internal clock synchronization protocol provides optimal internal deviation <ref> [8, 7] </ref> because the combination with an external clock synchronization algorithm can increase the internal deviation by a small constant proportional to r max . <p> The upper bound derived for the maximum internal deviation (4fl + 9r max + 2fi) of the proposed external/internal clock synchronization algorithm is close to the optimal maximum internal clock synchronization of 4fl + 4r max <ref> [7, 8] </ref> achievable by convergence function based internal clock synchronization algorithms [14].
Reference: [8] <author> C. Fetzer and F. Cristian. </author> <title> An optimal internal clock synchronization algorithm. </title> <booktitle> In Proceedings of the 10th Annual IEEE Conference on Computer Assurance, </booktitle> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: When all non-reference time servers would know that only a minority of reference time servers are correct, it would be possible to apply an internal clock synchronization algorithm that guarantees an optimal drift rate (e.g. <ref> [8] </ref>): the drift rate would be bounded by . However, the problem is that the non-reference time servers cannot always correctly determine if a majority of the reference time servers are correct (see Figure 10). rate is within of H p 's drift rate. <p> The algorithm guarantees optimal external deviation when the service is in standard mode. The maximum internal deviation of the clocks is close to the optimal internal deviation. It is not optimal even though the used internal clock synchronization protocol provides optimal internal deviation <ref> [8, 7] </ref> because the combination with an external clock synchronization algorithm can increase the internal deviation by a small constant proportional to r max . <p> The upper bound derived for the maximum internal deviation (4fl + 9r max + 2fi) of the proposed external/internal clock synchronization algorithm is close to the optimal maximum internal clock synchronization of 4fl + 4r max <ref> [7, 8] </ref> achievable by convergence function based internal clock synchronization algorithms [14].
Reference: [9] <author> H. Kopetz, A. Kruger, D. Millinger, and A. Schedl. </author> <title> A synchronization strategy for a time-triggered multicluster real-time system. </title> <booktitle> In (Proceedings of the 14th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 154-161, </pages> <address> Bad Neuenahr, Germany, </address> <month> Sept </month> <year> 1995. </year>
Reference-contexts: and the maximum drift rate of the clocks is optimal, and * in degraded mode the maximum drift rate of the clocks is optimal (about twice the maximum drift rate of hardware clocks). 2 Related Work Integration of external and internal clock synchronization has recently been addressed by several authors <ref> [11, 12, 5, 9, 15] </ref>. The paper of Schmid [11, 12] addresses the integration of external and internal clock synchronization in the context of real-time systems. Kopetz et al. [9] addressed the problem of how to integrate external and internal clock synchronization in the context of synchronizing multicluster real-time systems. <p> The paper of Schmid [11, 12] addresses the integration of external and internal clock synchronization in the context of real-time systems. Kopetz et al. <ref> [9] </ref> addressed the problem of how to integrate external and internal clock synchronization in the context of synchronizing multicluster real-time systems. Their paper only considers one reference time server. [15] proposes an external synchronization scheme that degrades to internal synchronization in case reference time servers become unavailable.
Reference: [10] <author> H. Kopetz and W. Ochsenreiter. </author> <title> Interval measurements in distributed real time systems. </title> <booktitle> In 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 292-298, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: Let us also assume that with each event e one can associate its point of occurrence in real-time to (e) <ref> [10] </ref>. Reference time is a granular representation of real-time. It is defined by a sequence of ticks tr i , i 2 f0; 1; 2; :::g and tr i 2 RT (see Figure 2). Tick tr i represents the point in real-time when reference time tr i starts.
Reference: [11] <author> U. Schmid. </author> <title> Synchronized utc for distributed real-time systems. </title> <booktitle> In Proceedings of IFAC Workshop on Real-Time Programming WRTP'94, </booktitle> <pages> pages 101-107, </pages> <year> 1994. </year>
Reference-contexts: and the maximum drift rate of the clocks is optimal, and * in degraded mode the maximum drift rate of the clocks is optimal (about twice the maximum drift rate of hardware clocks). 2 Related Work Integration of external and internal clock synchronization has recently been addressed by several authors <ref> [11, 12, 5, 9, 15] </ref>. The paper of Schmid [11, 12] addresses the integration of external and internal clock synchronization in the context of real-time systems. Kopetz et al. [9] addressed the problem of how to integrate external and internal clock synchronization in the context of synchronizing multicluster real-time systems. <p> The paper of Schmid <ref> [11, 12] </ref> addresses the integration of external and internal clock synchronization in the context of real-time systems. Kopetz et al. [9] addressed the problem of how to integrate external and internal clock synchronization in the context of synchronizing multicluster real-time systems.
Reference: [12] <author> U. Schmid. </author> <title> Synchronized utc for distributed real-time systems. </title> <journal> Control Engineering Practice, </journal> <pages> pages 877-884, </pages> <year> 1995. </year>
Reference-contexts: and the maximum drift rate of the clocks is optimal, and * in degraded mode the maximum drift rate of the clocks is optimal (about twice the maximum drift rate of hardware clocks). 2 Related Work Integration of external and internal clock synchronization has recently been addressed by several authors <ref> [11, 12, 5, 9, 15] </ref>. The paper of Schmid [11, 12] addresses the integration of external and internal clock synchronization in the context of real-time systems. Kopetz et al. [9] addressed the problem of how to integrate external and internal clock synchronization in the context of synchronizing multicluster real-time systems. <p> The paper of Schmid <ref> [11, 12] </ref> addresses the integration of external and internal clock synchronization in the context of real-time systems. Kopetz et al. [9] addressed the problem of how to integrate external and internal clock synchronization in the context of synchronizing multicluster real-time systems.
Reference: [13] <author> F. Schmuck and F. Cristian. </author> <title> Continuous clock amortization need not affect the precision of a clock synchronization algorithm. </title> <booktitle> In Proceedings of Ninth Annual ACM Symposium on Distributed Computing, </booktitle> <year> 1990. </year>
Reference-contexts: The clock synchronization protocols we propose will actually show such a non-monotonic behavior for certain runs. However, the protocols can be extended to provide monotonic clock behavior using continuous clock amortization without increasing the maximum internal deviation nor the maximum external devia tion <ref> [13] </ref>. The idea is that any adjustment of a virtual clock can be spread over some time interval, that is, effectively the speed of a virtual clock is temporarily slowed down or increased.
Reference: [14] <author> F. Schneider. </author> <title> Understanding protocols for Byzan-tine clock synchronization. </title> <type> Technical Report 87-859, </type> <institution> Dept of Computer Science, Cornell University, </institution> <month> Aug </month> <year> 1987. </year>
Reference-contexts: The upper bound derived for the maximum internal deviation (4fl + 9r max + 2fi) of the proposed external/internal clock synchronization algorithm is close to the optimal maximum internal clock synchronization of 4fl + 4r max [7, 8] achievable by convergence function based internal clock synchronization algorithms <ref> [14] </ref>. It is not optimal with respect to what is achievable by an internal clock synchronization algorithm because to achieve external synchronization - at least in the proposed algorithm a process can be forced in some runs to increase the internal deviation above the optimal maximum internal deviation.

References-found: 14

