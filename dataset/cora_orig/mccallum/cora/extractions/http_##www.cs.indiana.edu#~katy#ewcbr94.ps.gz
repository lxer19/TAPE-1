URL: http://www.cs.indiana.edu/~katy/ewcbr94.ps.gz
Refering-URL: http://www.cs.indiana.edu/~katy/katy_pap.html
Root-URL: http://www.cs.indiana.edu
Email: katy@cognition.iig.uni-freiburg.de  dietmar@cognition.iig.uni-freiburg.de  
Title: Case-based Learning for Design  
Author: Katy Borner Dietmar Janetzko 
Address: 79098 Freiburg, FRG  79098 Freiburg, FRG  
Affiliation: University of Freiburg Centre for Cognitive Science  University of Freiburg Centre for Cognitive Science  
Abstract: We present a general framework for an adaptive, user-interactive design support system. Adaptability requires the acquisition and usage of huge amounts of highly structured knowledge. Interactiveness, i.e., the ability to perform and react in tight co-operation with the user, is of special importance in complex domains like industrial building design. Case-based learning will be applied to provide the knowledge necessary to support subgoaling, pre-organization of the case-base, similarity assessment, and adaptation. Prior work (Borner 1994a, Borner 1994b) focused on structural similarity assessment and adaptation. Our main intention here is case-based subgoaling and its interaction and relation to the former via some appropriate knowledge representation. The paper gives the underlying ideas and the basic algorithms of the framework. For its practical evaluation the framework has been partially implemented in SynGraph, a module of the knowledge-based system Fabel-Idea. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Avila, H. M., Paulokat, J. and We, S. </author> <year> (1994). </year> <title> Controlling a nonlinear hierarchical planner using case-based reasoning, </title> <booktitle> 2nd European Workshop on Case-Based Reasoning. </booktitle>
Reference-contexts: Second, the introduced conjunction of subgoaling and design via the representation of states and cases. Third, the two level case representation as basis for computationally effective and structurally selective reasoning. We want to contrast our work to CbC <ref> (Avila, Paulokat and We 1994) </ref> the Cbr component of the planning system CAPlan. In order to do so, we compare the choice points, i.e. the ways how subgoals, cases / operators, and their right adaptations / instantiations are determined.
Reference: <author> Borner, K. </author> <year> (1994a). </year> <title> Structural similarity as guidance in case-based design, </title> <editor> in S. Wess, K.-D. Althoff and M. M. Richter (eds), </editor> <booktitle> Topics in Case-Based Reasoning Selected Papers from the First European Workshop on Case-Based Reasoning (EWCBR-93), Vol. 837 of Lecture Notes in Artificial Intelligence, </booktitle> <publisher> Springer, </publisher> <pages> pp. 197-208. </pages>
Reference-contexts: Using an algebraic approach we rep resent problems and solutions by ground terms (i.e. terms containing no variable like above (a,b)) of some appropriate signature. Structurally, cases are represented by ground terms t in some term algebra T (; ;). See <ref> (Borner 1994a, Borner 1994b) </ref> for a detailed explanation. Assuming the existence of some transformation function OE with its inverse automatically enables to transform attribute-based representations into structural representations and vice versa.
Reference: <author> Borner, K. </author> <year> (1994b). </year> <title> Towards formalizations in case-based reasoning for synthesis, </title> <booktitle> AAAI-94 Workshop on Case-Based Reasoning, </booktitle> <pages> pp. 177-181. </pages> <note> also FABEL Report 22. </note>
Reference-contexts: Given structural similarity the prototypical solution of this case set is transferred to the actual problem. Adaptation proceeds by applying the substitutions, which lead the common prototype. This has been discussed in detail elsewhere (cf. <ref> (Borner 1994b) </ref>).
Reference: <author> Borner, K. and Vo, A. </author> <year> (1994). </year> <title> Applying machine learning to improve innovative design support systems, </title> <booktitle> AID-94 Workshop Machine Learning in Design. </booktitle>
Reference-contexts: 1 Introduction In knowledge acquisition, reasoning, and system development there are strong interactions between the tasks the system has to fulfil, the reasoning methods chosen, and the knowledge needed cf. <ref> (Janetzko, Borner, Jaschke and Strube 1994) </ref>. The application domain used to delineate case-based learning for design is industrial building design. <p> The term t is called least general anti-unifier (Muggleton 1992) or most specific generalization (Plotkin 1970) iff there is no other anti-unifier t0 with t0 = t. 3 Outline of the Framework Taken from <ref> (Borner and Vo 1994) </ref> Fig.3 provides the general outline of the framework. We use a trace of the human-system interaction, which feeds into four algorithms all of which incrementally learn knowledge needed in design support.
Reference: <author> Domeshek, E. A. and Kolodner, J. L. </author> <year> (1992). </year> <title> A case-based design aid for architecture, </title> <booktitle> Proc. Second International Conference on Artificial Intelligence in Design, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <pages> pp. 497-516. </pages>
Reference-contexts: Systems that require an immense effort for knowledge elicitation will hardly succeed. Filling in large forms to label and save each possibly useful experience, as suggested e.g., for the Archie system <ref> (Domeshek and Kolodner 1992) </ref> will not do. There is simply no time to feed in all knowledge required. We believe that highly user-interactive frameworks, which manage knowledge elicitation during the system usage, are a real challenge to enable useful and realizable computer-aided support in design.
Reference: <author> Gentner, D. and Forbus, K. D. </author> <year> (1991). </year> <title> MAC/FAC: A model of similarity-based retrieval, </title> <booktitle> Proceedings of the Cognitive Science Conference, </booktitle> <pages> pp. 504-509. </pages>
Reference-contexts: In Cbr a two-stage similarity assessment <ref> (Gentner and Forbus 1991) </ref> has been widely accepted as an efficient way to case-selection. Taking this stance we advocate for a combination of fast preselection to determine a set of candidate cases CC, followed by structural similarity assessment to derive adapted solutions.
Reference: <author> Goel, A. K. </author> <year> (1989). </year> <title> Integration of case-based reasoning and model-based reasoning for adaptive design problem solving, </title> <type> PhD thesis, </type> <institution> Ohio State University. </institution>
Reference-contexts: Frequently, architects browse through old blueprints reflecting similar designs in order to solve new problems. According to our experience and to the literature as well <ref> (Goel 1989, Hinrichs 1992, Hua and Faltings 1993, Kolodner 1993) </ref>, case-based reasoning (Cbr) seems to be the natural problem solving method. The tasks and Cbr as the main problem solving method force the acquisition of cases and appropriate similarity measures over case-sets.
Reference: <author> Hinrichs, T. R. </author> <year> (1992). </year> <title> Problem solving in open worlds: A case study in design, </title> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference: <author> Hovestadt, L. </author> <year> (1993). </year> <title> A4 digital building extensive computer support for the design, </title> <booktitle> construction, and management of buildings, CAAD Futures '93, Proceedings of the Fifth International Conference on Computer-Aided Architectural Design Futures, </booktitle> <publisher> North-Holland, </publisher> <pages> pp. 405-422. </pages>
Reference-contexts: Formalizations are given in slanted letters. The formalizations are needed to introduce the algorithms for case-based learning and reasoning in the subsequent section. 2.1 Objects To represent CAD-like drawings, we use the representation scheme A4 <ref> (Hovestadt 1993) </ref>. A4 allows to represent objects (e.g., concrete objects like rooms, pipes, chairs etc., but also more abstract objects like areas for the entire house or the climate system, etc.) graphically and attribute-based. The former is used as the main basis for man-machine interaction. <p> The following convention is used here: arrows are employed to denote knowledge processing, squared boxes sketch knowledge examples. As a graphical surface we employ a knowledge-based CAD-system called Dancer <ref> (Hovestadt 1993) </ref>. The user while employing the system like a standard CAD drawing tool designs objects, assigns labels, etc. The design steps and the objects designed are recorded in a trace that provides the input to the support system.
Reference: <author> Hua, K. and Faltings, B. </author> <year> (1993). </year> <title> Exploring case-based building design CADRE, </title> <booktitle> AI EDAM 7(2): </booktitle> <pages> 135-143. </pages>
Reference: <author> Janetzko, D., Borner, K., Jaschke, O. and Strube, G. </author> <year> (1994). </year> <title> Task-oriented knowledge acquisition for design support systems, </title> <booktitle> First European Conference on Cognitive Science in Industry. </booktitle>
Reference-contexts: 1 Introduction In knowledge acquisition, reasoning, and system development there are strong interactions between the tasks the system has to fulfil, the reasoning methods chosen, and the knowledge needed cf. <ref> (Janetzko, Borner, Jaschke and Strube 1994) </ref>. The application domain used to delineate case-based learning for design is industrial building design. <p> Weights w s i OEs j may be used to state the frequency, i.e. preference, of possible state transitions. 2.4 Cases Aiming at a task-oriented user support <ref> (Janetzko et al. 1994) </ref>, the grainsize of cases is identical to the grainsize of tasks. Different design steps, i.e. tasks, require different design strategies. For example, while return air accesses will be connected by using the shortest path, connections for fresh air accesses take curved tracks to achieve noise reduction.
Reference: <author> Kass, A. M., Leake, D. B. and Owens, C. C. </author> <year> (1986). </year> <title> Swale: A program that explains, </title> <editor> in R. </editor> <address> C. </address>
Reference-contexts: Thus the operator choice in CbC is comparable to our selection of appropriate candidate cases. Last but not least the choice of variable instantiation for a selected goal may be compared to our concrete solution instantiation, i.e., adaptation. Again, and contrary to work done, e.g. in case-based explanation <ref> (Kass, Leake and Owens 1986) </ref>, structural similarity assessment and adaptation is done on the basis of the entire set of relevant cases. Taking indexes to retrieve prior experiences and applying adaptation rules separately will not do.
Reference: <editor> Schank (ed.), </editor> <title> Explanation patterns: Understanding mechanically and creatively, </title> <publisher> Lawrence Erlbaum Associates, </publisher> <pages> pp. 232-254. </pages>
Reference: <author> Kolodner, J. L. </author> <year> (1993). </year> <title> Case-based reasoning, </title> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Muggleton, S. </author> <year> (1992). </year> <title> Inductive logic programming, </title> <publisher> Academic Press. </publisher>
Reference-contexts: Given two terms t 1 ; t 2 one is searching for some term t, called anti-unifier, and corresponding substitutions 1 ; 2 satisfying both t 1 = t 1 and t 2 = t 2 . The term t is called least general anti-unifier <ref> (Muggleton 1992) </ref> or most specific generalization (Plotkin 1970) iff there is no other anti-unifier t0 with t0 = t. 3 Outline of the Framework Taken from (Borner and Vo 1994) Fig.3 provides the general outline of the framework. <p> Preselection proceeds by comparing weighted attribute values using oe a . For structural similarity assessment and adaptation prior and actual geometrical attribute-based descriptions are transformed into term-based (or graph-based) ones. Using the underlying term algebra (or graph algebra) and the concept of antiunification <ref> (Muggleton 1992) </ref> we are able to learn inductively about proper substitutions of t i 2 CC represented by oe PT which lead to their common prototype t PT .
Reference: <author> Plotkin, G. D. </author> <year> (1970). </year> <title> A note on inductive generalization, </title> <editor> in B. Meltzer and D. Michie (eds), </editor> <booktitle> Machine Intelligence 5, </booktitle> <publisher> American Elsevier, </publisher> <pages> pp. 153-163. </pages>
Reference-contexts: The term t is called least general anti-unifier (Muggleton 1992) or most specific generalization <ref> (Plotkin 1970) </ref> iff there is no other anti-unifier t0 with t0 = t. 3 Outline of the Framework Taken from (Borner and Vo 1994) Fig.3 provides the general outline of the framework.
Reference: <author> Vo, A. </author> <year> (1994). </year> <title> Similarity concepts and retrieval methods, </title> <type> FABEL-Report 13, </type> <institution> Gesellschaft fur Mathe-matik und Datenverarbeitung mbH, Forschungsbereich Kunstliche Intelligenz. </institution>
Reference-contexts: Thus, s s :D refers to peculiarities of states with its different case-bases and similarity relations. Contrary, s s :G represents specific geometrical attribute values of objects. To determine similarity between cases represented in an attribute-based way we may use standard similarity measures of Cbr. See <ref> (Vo 1994) </ref> for different approaches. Attribute-based Similarity of two problem states s p p k may here be simply defined via the distance of their geometrical attribute values s p p k :G. <p> The term t is called least general anti-unifier (Muggleton 1992) or most specific generalization (Plotkin 1970) iff there is no other anti-unifier t0 with t0 = t. 3 Outline of the Framework Taken from <ref> (Borner and Vo 1994) </ref> Fig.3 provides the general outline of the framework. We use a trace of the human-system interaction, which feeds into four algorithms all of which incrementally learn knowledge needed in design support.
References-found: 17

