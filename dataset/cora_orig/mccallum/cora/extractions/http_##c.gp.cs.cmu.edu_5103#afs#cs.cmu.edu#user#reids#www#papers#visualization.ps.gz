URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/reids/www/papers/visualization.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/reids/www/home/reidhome.html
Root-URL: http://www.cs.cmu.edu
Email: (reids@cs.cmu.edu, whelan@cs.cmu.edu)  
Title: Visualization Tools for Validating Software of Autonomous Spacecraft  
Author: Reid Simmons and Gregory Whelan 
Address: Pittsburgh, PA 15213, USA  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: Spacecraft autonomy is becoming an increasingly important technology. Yet the very nature of autonomy - on-board decision making and largely unattended operation - makes it important that such systems be thoroughly tested and validated. We are developing software visualization tools to assist in the validation process. The tools, which are designed to facilitate human problem solving, combine graphical layout and color to present gestalt views of system execution, together with interactive facilities for browsing, searching, and tracking down potential problems. This paper describes two tools being developed in conjunction with the NASA New Millennium Program one for visualizing inter-process comm-unication and one for visualizing plan execution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Appelbe, J. Stasko, E. Kraemer. </author> <title> Applying Program Visualization Techniques to Aid Parallel and Distributed Program Development. </title> <type> TR GIT-GVU-91-08, </type> <institution> Graphics Visualization and Usability Center, Georgia Institute of Technology, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: The tool is part of a suite of tools that can be used for debugging and performance analysis of multi-threaded programs. A broader discussion of program visualization techniques for parallel and distributed programs is provided in <ref> [1] </ref>. 5. CONCLUSIONS AND FUTURE WORK This paper has presented two visualization tools that aid in the validation of concurrent, distributed autonomous systems.
Reference: [2] <author> D. Bernard and B. Pell. </author> <title> Designed for Autonomy: Remote Agent for the New Millennium Program. </title> <booktitle> In Proc. i-SAIRAS 97, Tokyo Japan (this volume). </booktitle>
Reference-contexts: Creating highly autonomous spacecraft is a high priority of the NASA New Millennium Program, which seeks to ight validate cutting-edge technologies. In particular, the autonomous Remote Agent <ref> [2] </ref> is being developed as part of the Deep Space One mission (an asteroid and comet yby), anticipated to launch in July 1998. Typically, such spacecraft use a concurrent, distributed software architecture that coordinates actions and exchanges information via message passing [9].
Reference: [3] <author> R. P. Bonasso, R. J. Firby, E. Gat, D. Kortenkamp,D. Miller, and M. Slack. </author> <title> A Proven Three-tiered Architecture for Programming Autonomous Robots. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 9:2, </volume> <year> 1997. </year>
Reference-contexts: We are currently starting to address this, and intend to integrate it into the comview framework. 3. VISUALIZING PLAN EXECUTION Nowadays, many autonomous systems are designed with a three-layer architecture, consisting of a behavioral/real-time layer, an executive/sequencing layer, and a planning layer <ref> [3, 9] </ref>. The executive layer is responsible for executing plans produced by the planner, monitoring plan execution, and recovering from exceptional situations. As such, validating this component is essential to ensure the successful operation of the overall system.
Reference: [4] <author> M. Heath, J. Etheridge. </author> <title> Visualizing the Performance of Parallel Programs. </title> <journal> IEEE Software, </journal> <volume> 8(5) </volume> <pages> 29-39, </pages> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Another tool, called planview, visualizes the execution of plans (command sequences). It propagates temporal constraints between plan segments in order to detect constraint violations that signal potential plan failures. Unlike other visualization tools for concurrent systems that focus primarily on automated analysis <ref> [4, 5, 6] </ref>, comview and planview are geared towards human analysis. This inuenced several design decisions. First, emphasis was placed on graphical layout and use of color. <p> The process is dynamic, so that when information changes and new constraint propagations occur, the explanation is automatically updated (for instance, if a different constraint causes the projected start time of a token to be even later than initially expected). 4. RELATED WORK The ParaGraph tool <ref> [4] </ref> provides a variety of visualizations of different aspects of a parallel system. ParaGraph animates trace information from actual runs to display behavior and provide graphical performance summaries. A task Gantt chart depicts the activity of processors with horizontal segments resembling the graphical display of comview.
Reference: [5] <author> S. Kleiman, D. Shah, B. Smaalders. </author> <title> Programming with Threads. </title> <publisher> SunSoft Press, </publisher> <address> Mountain View, Ca., </address> <year> 1996. </year>
Reference-contexts: Another tool, called planview, visualizes the execution of plans (command sequences). It propagates temporal constraints between plan segments in order to detect constraint violations that signal potential plan failures. Unlike other visualization tools for concurrent systems that focus primarily on automated analysis <ref> [4, 5, 6] </ref>, comview and planview are geared towards human analysis. This inuenced several design decisions. First, emphasis was placed on graphical layout and use of color. <p> Specifically, the tools enabled the authors to examine various kernel scheduling algorithms and observe the resulting performance of a matrix multiplication. The work clearly demonstrates the usefulness of a timeline-style visual tool for monitoring, debugging, and performance analysis of a concurrent system. tnfview <ref> [5] </ref> is a tool designed for visualizing threads under Solaris 2 that are traced using logs written in Trace Normal Format. The display shows activities that include thread state transitions and context switching in a timeline-style format.
Reference: [6] <author> T. Lehr, D. Black, Z. Segall, D. Vrsalovic. MKM: </author> <title> Mach Kernel Monitor Description, Examples and Measurements. </title> <type> TR CMU-CS-89-131, </type> <institution> Computer Science Department, Carnegie Mellon University. </institution> <month> Mar. </month> <year> 1989. </year>
Reference-contexts: Another tool, called planview, visualizes the execution of plans (command sequences). It propagates temporal constraints between plan segments in order to detect constraint violations that signal potential plan failures. Unlike other visualization tools for concurrent systems that focus primarily on automated analysis <ref> [4, 5, 6] </ref>, comview and planview are geared towards human analysis. This inuenced several design decisions. First, emphasis was placed on graphical layout and use of color. <p> These features allow the user to step through and closely examine individual communication and task events (and various aspects of those events) and correlate the events with their record in the log file. The combination of the Mach Kernel Monitor and the PIE tool <ref> [6] </ref> demonstrates the visualization of parallel and distributed algorithms and their interaction with the operating system. Specifically, the tools enabled the authors to examine various kernel scheduling algorithms and observe the resulting performance of a matrix multiplication.
Reference: [7] <author> T. Mason and D. Brown. </author> <title> lex & yacc. </title> <publisher> OReilly and Associates, </publisher> <address> Sebastopol, CA, </address> <year> 1990. </year>
Reference-contexts: For portability, maintainability, and ease of development, comview (and planview) are implemented using standard software packages. The graphical user interface and the interactive facilities are implemented with Tcl/Tk library [8]. The log file parser is written using lex and yacc <ref> [7] </ref>. Only a relatively small portion of the tools needed to be written directly in C.
Reference: [8] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: For portability, maintainability, and ease of development, comview (and planview) are implemented using standard software packages. The graphical user interface and the interactive facilities are implemented with Tcl/Tk library <ref> [8] </ref>. The log file parser is written using lex and yacc [7]. Only a relatively small portion of the tools needed to be written directly in C.
Reference: [9] <author> B. Pell, E. Gat, R. Keesing, N. Muscettola, B. Smith. </author> <title> Plan Execution for Autonomous Spacecraft. in 1996 AAAI Fall Symposium on Plan Execution: Problems and Issues, TR FS-96-01, </title> <publisher> AAAI Press. </publisher> <editor> [10]R. Simmons. </editor> <title> Structured Control for Autonomous Robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10:1, </volume> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: In particular, the autonomous Remote Agent [2] is being developed as part of the Deep Space One mission (an asteroid and comet yby), anticipated to launch in July 1998. Typically, such spacecraft use a concurrent, distributed software architecture that coordinates actions and exchanges information via message passing <ref> [9] </ref>. From a software-engineering perspective, such an architecture has great advantages in terms of independent development of modules, data abstraction and data hiding, and software reuse. Validating and debugging such large, concurrent systems can be a nightmare, however. <p> We are currently starting to address this, and intend to integrate it into the comview framework. 3. VISUALIZING PLAN EXECUTION Nowadays, many autonomous systems are designed with a three-layer architecture, consisting of a behavioral/real-time layer, an executive/sequencing layer, and a planning layer <ref> [3, 9] </ref>. The executive layer is responsible for executing plans produced by the planner, monitoring plan execution, and recovering from exceptional situations. As such, validating this component is essential to ensure the successful operation of the overall system. <p> The planview tool is designed to provide that capability for the New Millennium Remote Agent executive. This executive layer uses a plan representation based on timelines and tokens <ref> [9] </ref>. A timeline represents the evolution over time of a state variable of the system (e.g., the state of the main engine).
References-found: 9

