URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/papers/seto.ps
Refering-URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/resources.html
Root-URL: 
Title: On Task Schedulability in Real-Time Control Systems  
Author: D. Seto J. P. Lehoczky L. Sha and K. G. Shin 
Address: Pittsburgh, PA 15213 Ann Arbor, MI 48109  
Affiliation: 1 Software Engineering Institute 3 Real-Time Computing Laboratory 2 Dept. of Statistics Dept. of Electrical Eng. and Computer Sci. Carnegie Mellon University The University of Michigan  
Abstract: Most real-time computer-controlled systems are built in two separate steps, each in isolation: controller design and its digital implementation. Computational tasks that realize the control algorithms are usually scheduled by treating their execution times and periods as unchangeable parameters. Task scheduling therefore depends only on the limited computing resources available. On the other hand, controller design is primarily based on the continuous-time dynamics of the physical system being controlled. The set of tasks resulting from this controller design may not be schedulable with the limited computing resources available. Even if the given set of tasks is schedulable, the overall control performance may not be optimal in the sense that they do not make a full use of computing resource. In this paper, we propose an integrated approach to controller design and task scheduling. Specifically, task frequencies (or periods) are allowed to vary within a certain range as long as such a change doesn't affect critical control functions such as maintenance of system stability. We present an algorithm that optimizes task frequencies and then schedules the resulting tasks with the limited computing resources available. The proposed approach is also applicable to failure recovery and reconfiguration in real-time control systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gerber, R., Hong, S. and Saksena, M., </author> <title> "Guaranteeing end-to-end timing constraints by calibrating Intermediate Processes," </title> <booktitle> Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <address> De-cember, </address> <year> 1994. </year>
Reference-contexts: Still, nearly all of these developments have assumed that the task set characteristics (e.g., computation times, periods and deadlines) are fixed and known. There have been several papers which relate task scheduling and system performance. For example, Gerber, Hong and Saksena <ref> [1] </ref> addressed the issue of task design in relation to system performance; however, their focus was on distributed systems and they did not use the performance index approach we present. Task scheduling and system performance have also been addressed by Locke [3] and other authors using best-effort scheduling. <p> i = 1; :::; p 1 (ln j Q); j = p + 1; :::; n; where f i s are ordered as f mi which are arranged as 1 e fi 1 f m1 2 e fi 2 f m2 n e fi n f mn ; p 2 <ref> [1; ::; n] </ref> is the largest integer such that p X C i f mi + i=p+1 fi i fi p f mp + ln p A; (11) j = C j 1 i=p+1 fi i @ i=1 n X C i ln i A A Proof : See the Appendix.
Reference: [2] <author> Liu, C. L. Layland, J.W., </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment," </title> <journal> Journal of Association for Computing Machinery, </journal> <volume> Vol. 20, No.1, </volume> <month> January </month> <year> 1973, </year> <pages> 46-61. </pages>
Reference-contexts: In this paper we investigate the interaction between control task performance and task scheduling. Task scheduling is a fundamental issue in real-time control algorithm implementation. A seminal contribution was made by Liu and Layland <ref> [2] </ref> who developed optimal static and dynamic priority scheduling algorithms for hard real-time task sets.
Reference: [3] <author> Locke, C. D., </author> <title> "Best-effort decision making for real-time scheduling." </title> <type> Ph.D. Dissertation, </type> <institution> Computer Science Department, Carnegie Mellon University, </institution> <year> 1986. </year>
Reference-contexts: For example, Gerber, Hong and Saksena [1] addressed the issue of task design in relation to system performance; however, their focus was on distributed systems and they did not use the performance index approach we present. Task scheduling and system performance have also been addressed by Locke <ref> [3] </ref> and other authors using best-effort scheduling. This approach is especially designed to handle transient overloads, and its premise is that a task will obtain a value which depends on the time at which it is completed.
Reference: [4] <author> Mangasarian, O. L., </author> <title> Nonlinear Programming. </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1969. </year>
Reference-contexts: As far as the determination of the frequencies is concerned, we only consider the tasks which have variable frequencies and performance indices characterized by Eq. (6). The optimization problem we need to solve is a nonlinear programming problem <ref> [4] </ref>.
Reference: [5] <author> Molini, J. J., Maimon, S. K. and Watson, P. H., </author> <title> "Real-Time System Scenarios," </title> <booktitle> Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1990. </year>
Reference-contexts: To illustrate the function J (f ), we have chosen an actual real-time control application, a bubble control system. Such a system is a simplified model designed to study diving control in submarines. For an example discussion of real-time control systems in real submarines, the reader may refer to <ref> [5] </ref>. 4 The bubble system considered here consists of a tank filled with water and an inverted cup partially filled with air and immersed in the water. Depth control of the cup is achieved by adjusting the air volume inside the cup.
Reference: [6] <author> Sha, L., Rajkumar, R. and Sathaye, S. S., </author> <title> "Generalized rate-monotonic scheduling theory: A framework for developing real-time systems," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 82, No. 1, </volume> <month> January, </month> <year> 1994, </year> <pages> 68-82. </pages>
Reference-contexts: RMA Scheduling: Let t c be the completion time of the first invocation of a periodic task and D be its deadline. By following Theorem 2 and the procedure for checking schedulability in <ref> [6] </ref>, we obtain: A = 1 A = 0:86 A = 0:8575 unit 1 10 50 10 50 10 50 unit 2 25 80 25 80 25 80 unit 3 45 100 45 100 45 100 unit 4 80 125 80 166 80 166 unit 5 155 141 235 245 235
Reference: [7] <author> Shin, K. G., Krishna, C. M. and Lee, Y.-H., </author> <title> "A unified method for evaluating real-time computer controllers and its application," </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> Vol. 30, No. 4, </volume> <month> April, </month> <year> 1985, </year> <pages> 357-366. </pages>
Reference-contexts: In this paper, the algorithm used to choose the task frequencies is developed for a general class of control systems in which the functions J (f ) are monotonically decreasing and convex. Many 5 control systems belong to this class; for example, the aircraft landing control application studied in <ref> [7] </ref> offers a second example.
Reference: [8] <author> Shin, K. G. and H. Kim, H., </author> <title> "Derivation and application of hard deadlines for real-time control systems," </title> <journal> IEEE Transactions on Systems, Manufacturing, and Cybernetics, </journal> <volume> Vol. 22, No. 6, November/December, </volume> <year> 1992, </year> <pages> 1103-1413. </pages>
Reference-contexts: Remark 3.3 Proposition 3.1 is based on the fact that most control systems can have a flexible sampling frequency, provided this frequency is chosen above the lower bound. This feature was defined as the control system deadline and discussed in detail in <ref> [8] </ref> where the authors studied the effect of missing control updates in control systems. Proposition 3.1 provides a method for optimally determining the sampling frequency at each of the given level of CPU utilization such that task schedulability is guaranteed.
References-found: 8

