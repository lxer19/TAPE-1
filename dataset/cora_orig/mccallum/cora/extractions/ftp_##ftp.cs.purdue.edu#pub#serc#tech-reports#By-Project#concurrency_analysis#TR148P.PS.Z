URL: ftp://ftp.cs.purdue.edu/pub/serc/tech-reports/By-Project/concurrency_analysis/TR148P.PS.Z
Refering-URL: http://www.csd.uu.se/~bjornfot/r2.html
Root-URL: 
Title: Re-designing Tasking Structures of Ada Programs for Analysis: A Case Study  
Author: Wei Jen Yeh Michal Young 
Keyword: Design-for-analysis, real-time system design, static analysis, Ada, con currency, reachability analysis, process algebra, compositionality.  
Note: For correspondence, contact either author by physical mail at the address above, or send electronic mail to yeh@cs.purdue.edu or young@cs.purdue.edu. The second author may be reached by phone at (317) 494-6023.  
Date: December 1993  
Address: West Lafayette, IN 47907-1398  
Affiliation: Software Engineering Research Center Department of Computer Sciences Purdue University  
Pubnum: SERC Technical Report TR-148-P  
Abstract: In [YY91, YY93b, Yeh93] we described a compositional (hierarchical) approach to reachability analysis of Ada tasking programs based on process algebra. The abstraction capabilities of process algebra provide an effective means to control state explosion in automated state-space analysis, but only if a design is carefully modularized to encapsulate details of behavior. We report here our experience modifying an existing design (the remote temperature sensor system described in [San89]) to make it more amenable to hierarchical analysis. Redesign for analysis was effective in improving the design in other ways as well: Flaws uncovered in the analysis (and present in the original design) were easy to understand and correct because of the increased understandability of the revised design. This also suggests that these flaws might have been avoided, and the design generally improved, had "design for analysis" been applied from the start. This research was supported in part by the National Science Foundation under grant #CCR-9157629, with additional support from Defense Advanced Research Projects Agency under Grant Number MDA972-91-J-1010 and from the Software Engineering Research Center, an NSF Industry/University Cooperative Research Center. The content of the information does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: [BSW69] <author> K. A. Bartlett, R. A. Scantlebury, and P. T. Wilkinson. </author> <title> A note on reliable full-duplex transmission over half-duplex lines. </title> <journal> Communications of the ACM, </journal> <volume> 12(5) </volume> <pages> 260-261, </pages> <month> May </month> <year> 1969. </year>
Reference-contexts: We opted for the second approach because it does not modify assumptions on the behaviors of the communication medium. For simplicity, the alternating-bit protocol <ref> [BSW69] </ref> was used. Figure 7 gives the new design of the remote temperature sensor system with the client part. alternating-bit protocol to detect and discard duplicate packets. In the new design of the system, the module CP (DP) represents the reliable simplex communication channel for transmitting CP (DP) packets.
Reference: [BvG87] <author> J. C. M. Baeten and R. J. van Glabeek. </author> <title> Another look at abstraction in process algebra. </title> <booktitle> In Proceedings of the 14th International Colloquium on Automata, Languages, and Programming (ICALP), </booktitle> <pages> pages 84-94, </pages> <address> Karlsruhe, Germany, </address> <month> July </month> <year> 1987. </year> <note> Published as Springer-Verlag Lecture Notes in Computer Science 267. </note>
Reference-contexts: Assertions are verified later in the analysis. An example using this feature can be seen in Section 3.2. Pal can perform process graph simplifications based on any of several equivalence relations, including observation equivalence [Mil80], Hennessy's testing equivalence and may/must equivalence [Hen88], ACP-t or ACP- bisimulation equivalence <ref> [BvG87] </ref>. The behavior analysis package can perform comparisons of process graphs according to different equivalence/preorder relations.
Reference: [CES86] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Among techniques for analyzing the synchronization structure of concurrent systems, enumeration of reachable states in a finite-state model (reachability analysis) is attractive because it is simple and relatively straightforward to automate, and can be used in conjunction with model-checking procedures (e.g., <ref> [CES86] </ref>) to check for application-specific as well as general properties. While simple global reachability analysis is limited to very small systems, a compositional approach such as the one we described in [YY91, YY93b, Yeh93, YY93a] presents the prospect of analyzing larger programs and systems in a hierarchical, divide-and-conquer manner.
Reference: [Hen88] <author> Matthew Hennessy. </author> <title> Algebraic Theory of Processes. MIT Press Series in the Foundations of Computing. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1988. </year>
Reference-contexts: Assertions are verified later in the analysis. An example using this feature can be seen in Section 3.2. Pal can perform process graph simplifications based on any of several equivalence relations, including observation equivalence [Mil80], Hennessy's testing equivalence and may/must equivalence <ref> [Hen88] </ref>, ACP-t or ACP- bisimulation equivalence [BvG87]. The behavior analysis package can perform comparisons of process graphs according to different equivalence/preorder relations.
Reference: [Lad79] <author> Richard E. Ladner. </author> <title> The complexity of problems in systems of communicating sequential processes. </title> <booktitle> In Proceedings of the Eleventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 214-223, </pages> <address> Atlanta, GA, </address> <month> April </month> <year> 1979. </year>
Reference-contexts: In the worst case, and in practice for loosely coupled processes, the size of the reachability graph grows as the product of the sizes of individual process graphs. Moreover, basic complexity results <ref> [Lad79, Tay83, Smo84] </ref> imply that there is no universally applicable short-cut. A secondary problem is accuracy, since the details suppressed in building a finite-state model may be essential to the correctness of software. Compositional analysis.
Reference: [Lyn68] <author> W. C. Lynch. </author> <title> Reliable full-duplex transmission over half-duplex telephone lines. </title> <journal> Communications of the ACM, </journal> <volume> 11(6) </volume> <pages> 361-372, </pages> <month> June </month> <year> 1968. </year>
Reference-contexts: Table 1 contains an example trace in which two messages are sent to entry FPACK.NEW INT for a single request received at entry CP OUTPUT.SEND. Discussion of similar communication anomalies caused by not checking duplicate messages can be found in <ref> [Lyn68] </ref>. Note that the problems uncovered are problems in the original design, and are not introduced in restructuring. The re-design made the analysis possible and the design flaws easier to understand and correct. Adding More Layers. There are two solutions to the duplicate packets problem.
Reference: [Mil80] <author> Robin Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: Assertions are verified later in the analysis. An example using this feature can be seen in Section 3.2. Pal can perform process graph simplifications based on any of several equivalence relations, including observation equivalence <ref> [Mil80] </ref>, Hennessy's testing equivalence and may/must equivalence [Hen88], ACP-t or ACP- bisimulation equivalence [BvG87]. The behavior analysis package can perform comparisons of process graphs according to different equivalence/preorder relations.
Reference: [NS87] <author> Kjell W. Nielsen and Ken Shumate. </author> <title> Designing large real-time systems with Ada. </title> <journal> Communications of the ACM, </journal> <volume> 30(8) </volume> <pages> 695-715, </pages> <month> August </month> <year> 1987. </year> <title> Correction in Communications of the ACM, </title> <address> 30(12):1073, </address> <month> December </month> <year> 1987. </year>
Reference-contexts: More detailed description of the hierarchical tracing mechanism can be found in [YY93b]. 3 Application We present in this section our experience in analyzing the remote temperature sensor system originally described in <ref> [NS87] </ref> and later re-designed and presented in [San89]. This example was used in [NS87] and [San89] to illustrate modular design based on different design approaches of real time systems. We first tried to analyze the system presented in [San89] but did not succeed because of state explosion. <p> More detailed description of the hierarchical tracing mechanism can be found in [YY93b]. 3 Application We present in this section our experience in analyzing the remote temperature sensor system originally described in <ref> [NS87] </ref> and later re-designed and presented in [San89]. This example was used in [NS87] and [San89] to illustrate modular design based on different design approaches of real time systems. We first tried to analyze the system presented in [San89] but did not succeed because of state explosion. We then applied several re-designs of the system in an attempt to make it more analyzable. <p> The furnaces are located at a remote site and requests are sent to the sensor system using a simple ack/nak protocol. Using the entity-life modeling approach, Sanden modified Nielsen and Shumate's design of the system presented in <ref> [NS87] </ref>, which was designed using the structured analysis/design approach based on the Ada tasking model. <p> The structure of the system described in [San89] is given in Figure 3, and a composite concurrent process graph of the run time system for the Nielsen-Shumate design <ref> [NS87] </ref> is given in Figure 4. The system is modeled by a set of Ada tasks in [San89], and can be roughly divided into two layers | a reliable communication layer that transmits control packets and data packets 5 design of the remote temperature sensor system. | adapted from [NS87]. 6 <p> design <ref> [NS87] </ref> is given in Figure 4. The system is modeled by a set of Ada tasks in [San89], and can be roughly divided into two layers | a reliable communication layer that transmits control packets and data packets 5 design of the remote temperature sensor system. | adapted from [NS87]. 6 to and from the sensor system, and an application layer containing a front end package FPACK and the back end hardware devices.
Reference: [San89] <author> Bo Sanden. </author> <title> Entity-life modeling and structured analysis in real-time software design-a comparison. </title> <journal> Communications of the ACM, </journal> <volume> 32(12) </volume> <pages> 1458-1466, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Outline. The paper is structured as follows. Section 2.1 first reviews reachability analysis techniques, and Section 2.2 briefly describes a prototype analysis tool Pal which applies a hieararchical, compositional approach to reachability analysis. Section 3 reports our experience in analyzing the remote temperature sensor system described in <ref> [San89] </ref>. We first describe the remote temperature sensor system as presented in [San89], and then several re-designs of the system. In each phase of re-design, errors in the system or design faults that obstruct the analysis are identified. <p> Section 3 reports our experience in analyzing the remote temperature sensor system described in <ref> [San89] </ref>. We first describe the remote temperature sensor system as presented in [San89], and then several re-designs of the system. In each phase of re-design, errors in the system or design faults that obstruct the analysis are identified. An error-free design of the system that is also suitable for analysis is presented last. <p> More detailed description of the hierarchical tracing mechanism can be found in [YY93b]. 3 Application We present in this section our experience in analyzing the remote temperature sensor system originally described in [NS87] and later re-designed and presented in <ref> [San89] </ref>. This example was used in [NS87] and [San89] to illustrate modular design based on different design approaches of real time systems. We first tried to analyze the system presented in [San89] but did not succeed because of state explosion. <p> More detailed description of the hierarchical tracing mechanism can be found in [YY93b]. 3 Application We present in this section our experience in analyzing the remote temperature sensor system originally described in [NS87] and later re-designed and presented in <ref> [San89] </ref>. This example was used in [NS87] and [San89] to illustrate modular design based on different design approaches of real time systems. We first tried to analyze the system presented in [San89] but did not succeed because of state explosion. We then applied several re-designs of the system in an attempt to make it more analyzable. <p> our experience in analyzing the remote temperature sensor system originally described in [NS87] and later re-designed and presented in <ref> [San89] </ref>. This example was used in [NS87] and [San89] to illustrate modular design based on different design approaches of real time systems. We first tried to analyze the system presented in [San89] but did not succeed because of state explosion. We then applied several re-designs of the system in an attempt to make it more analyzable. In the course of iteratively re-designing and re-analyzing the system, we uncovered bugs and problems in the original design. <p> The revised design makes these bugs and design flaws easier to understand and correct, strongly suggesting that the characteristics that facilitated hierarchical analysis are also desirable characteristics of design. The structure of this section is as follows: Section 3.1 describes the structure of the system described in <ref> [San89] </ref>, and several re-designs of the system are then presented in Section 3.2. We will also describe bugs and problems existing in the original system which we found after we re-designed the system to make it analyzable. <p> The example was to illustrate that the entity-life modeling approach, which is based on concurrency (or thread of events), provides better designs than the structured analysis approach, which is based on transforms that convert data from input to output. The structure of the system described in <ref> [San89] </ref> is given in Figure 3, and a composite concurrent process graph of the run time system for the Nielsen-Shumate design [NS87] is given in Figure 4. The system is modeled by a set of Ada tasks in [San89], and can be roughly divided into two layers | a reliable communication <p> The structure of the system described in <ref> [San89] </ref> is given in Figure 3, and a composite concurrent process graph of the run time system for the Nielsen-Shumate design [NS87] is given in Figure 4. The system is modeled by a set of Ada tasks in [San89], and can be roughly divided into two layers | a reliable communication layer that transmits control packets and data packets 5 design of the remote temperature sensor system. | adapted from [NS87]. 6 to and from the sensor system, and an application layer containing a front end package FPACK and <p> Adding More Layers. There are two solutions to the duplicate packets problem. We can either re-model the communication modules so that there are no delays in transmitting packets 3 We derived this assumption from the Ada code presented in <ref> [San89] </ref>, which performed no checking for correct transmission of ACK/NAK packets. 10 Table 1: Receiving duplicate packets re-sent due to time-outs. Duplicate packets are received at entry FPACK.NEW INT (steps 6 and 14) for a single request issued (-CP OUTPUT.SEND (0) at step 1). <p> It correctly reports the current temperature reading 5 of each furnace device in turn. 3.3 Summary This paper reports our experience in re-designing an existing software system design to facilitate analysis. The example design is taken from a remote temperature sensor system presented in <ref> [San89] </ref>, which was meant to illustrate desirable modularity for real-time systems. 5 Recall that we modified each thermometer device so that it reports a temperature reading equal to its identification number. 14 the current temperature reading of each furnace device in turn. <p> The entity-life model-based design approach still does not suitably encapsulate behavior sufficiently to support automated analysis; we argue that this reflects real complexity in the design and not just limitations of our tools, as evidenced by the design flaws we uncovered during the redesign. While the design in <ref> [San89] </ref> presents apparently simple procedural interfaces, the real complexity of those interfaces is in interactions through sequences of calls (or rendezvous). "Fewer tasks" is not equivalent to "simpler design." In fact, a design may well involve more tasks than an implementation, in the interest of simplicity.
Reference: [Smo84] <author> Scott A. Smolka. </author> <title> Analysis of Communicating Finite State Processes. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Brown University, </institution> <year> 1984. </year> <note> Department of Computer Science Technical Report No. CS-84-05. </note>
Reference-contexts: In the worst case, and in practice for loosely coupled processes, the size of the reachability graph grows as the product of the sizes of individual process graphs. Moreover, basic complexity results <ref> [Lad79, Tay83, Smo84] </ref> imply that there is no universally applicable short-cut. A secondary problem is accuracy, since the details suppressed in building a finite-state model may be essential to the correctness of software. Compositional analysis.
Reference: [Tay83] <author> Richard N. Taylor. </author> <title> Complexity of analyzing the synchronization structure of concurrent programs. </title> <journal> Acta Informatica, </journal> <volume> 19 </volume> <pages> 57-84, </pages> <year> 1983. </year>
Reference-contexts: In the worst case, and in practice for loosely coupled processes, the size of the reachability graph grows as the product of the sizes of individual process graphs. Moreover, basic complexity results <ref> [Lad79, Tay83, Smo84] </ref> imply that there is no universally applicable short-cut. A secondary problem is accuracy, since the details suppressed in building a finite-state model may be essential to the correctness of software. Compositional analysis.
Reference: [Yeh93] <author> Wei Jen Yeh. </author> <title> Controlling State Explosion in Reachability Analysis. </title> <type> PhD thesis, </type> <institution> Purdue University, Department of Computer Sciences, West Lafayette, </institution> <note> IN 47907-1398, 1993. Draft. </note>
Reference-contexts: While simple global reachability analysis is limited to very small systems, a compositional approach such as the one we described in <ref> [YY91, YY93b, Yeh93, YY93a] </ref> presents the prospect of analyzing larger programs and systems in a hierarchical, divide-and-conquer manner. <p> The imposed process hierarchy used for the hierarchical tracing is (UI (CP CP INPUT) (FPACK THERMOMETER) (DP DP INPUT)). Pal reported the trace sequence in Table 2. 4 Detailed discussion of the theoretical ground of this simplification approach is given in <ref> [Yeh93, Chapter 3] </ref> regarding almost bisimulation and almost weak bisimulation. 13 Table 2: A reported deadlock sequence in the re-designed sensor system. FPACK fails the conditional entry call to alert furnaces [0] at step 4. Thus task furnaces [0] is never started, and UI never receives the result.
Reference: [YY91] <author> Wei Jen Yeh and Michal Young. </author> <title> Compositional reachability analysis using process algebra. </title> <booktitle> In Proceedings of the Symposium on Software Testing, Analysis, and Verification (TAV4), </booktitle> <pages> pages 49-59, </pages> <address> Victoria, British Columbia, </address> <month> October </month> <year> 1991. </year> <booktitle> ACM SIGSOFT, </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: While simple global reachability analysis is limited to very small systems, a compositional approach such as the one we described in <ref> [YY91, YY93b, Yeh93, YY93a] </ref> presents the prospect of analyzing larger programs and systems in a hierarchical, divide-and-conquer manner.
Reference: [YY93a] <author> Wei Jen Yeh and Michal Young. </author> <title> Compositional reachability analysis of Ada programs using process algebra. </title> <type> Technical report, </type> <institution> Software Engineering Research Center, Department of Computer Sciences, Purdue University, </institution> <month> July </month> <year> 1993. </year> <note> Submitted to IEEE Transactions on Software Engineering. </note>
Reference-contexts: While simple global reachability analysis is limited to very small systems, a compositional approach such as the one we described in <ref> [YY91, YY93b, Yeh93, YY93a] </ref> presents the prospect of analyzing larger programs and systems in a hierarchical, divide-and-conquer manner.
Reference: [YY93b] <author> Wei Jen Yeh and Michal Young. </author> <title> Hierarchical tracing of concurrent programs. </title> <booktitle> In Proceedings of the 3rd Irvine Software Symposium, </booktitle> <pages> pages 73-84, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: While simple global reachability analysis is limited to very small systems, a compositional approach such as the one we described in <ref> [YY91, YY93b, Yeh93, YY93a] </ref> presents the prospect of analyzing larger programs and systems in a hierarchical, divide-and-conquer manner. <p> More detailed description of the hierarchical tracing mechanism can be found in <ref> [YY93b] </ref>. 3 Application We present in this section our experience in analyzing the remote temperature sensor system originally described in [NS87] and later re-designed and presented in [San89]. This example was used in [NS87] and [San89] to illustrate modular design based on different design approaches of real time systems. <p> The system enters a trap state (3) when unequal values are received at the entry. Having successfully composed and simplified the two communication layers CP and DP we directed Pal to detect any potential deadlocks using the hierarchical tracing mechanism introduced in <ref> [YY93b] </ref>. The imposed process hierarchy used for the hierarchical tracing is (UI (CP CP INPUT) (FPACK THERMOMETER) (DP DP INPUT)).
References-found: 15

