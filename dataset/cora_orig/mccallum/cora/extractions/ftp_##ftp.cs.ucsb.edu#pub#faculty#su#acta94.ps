URL: ftp://ftp.cs.ucsb.edu/pub/faculty/su/acta94.ps
Refering-URL: ftp://ftp.cs.ucsb.edu/pub/faculty/su/acta94.html
Root-URL: http://www.cs.ucsb.edu
Email: hull@usc.edu jsu@usc.edu  
Title: Domain Independence and the Relational Calculus  
Author: Richard Hull and Jianwen Su yz 
Note: This work supported in part by NSF grants IST-85-11541 and IRI-87-19875. Work by this author was also supported in part by NSF grant IRI-9109520. Current address:  
Date: August 1989 Revised: August 1991 Revised: November 1993  
Address: Los Angeles, CA 90089-0782  Santa Barbara, CA 93106.  
Affiliation: Computer Science Department University of Southern California  Computer Science Department, University of California,  
Pubnum: Technical Report 88-64  
Abstract-found: 0
Intro-found: 1
Reference: [AB88] <author> S. Abiteboul and C. Beeri. </author> <title> On the power of languages for the manipulation of complex objects. </title> <type> Technical Report No.846, </type> <institution> INRIA, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: However, since the universe is potentially infinite, answers to queries may be infinite, and under the traditional logic semantics the quantified variables range over the potentially infinite underlying domain. To overcome these obstacles, several variations have been proposed for feasible implementations of the relational calculus, e.g., domain independent queries <ref> [Fag82, AB88] </ref>, safe queries [Ull82], limited interpretation [Mai83], etc. These essentially restrict the calculus in such a way that combinations of query syntax and the associated semantics guarantee (i) finiteness of answers, and (ii) the ability to compute the answer using a terminating procedure. <p> both x and t range over adom = fa; b; cg, and so Q lim [d] = ;. 2 Another alternative to guaranteeing finitary answers and computations, but without the counter-intuitive effects of the limited interpretation, is to restrict attention to queries whose evaluation is independent of the underlying domain <ref> [Fag82, AB88] </ref>: Definition. A calculus query Q on a schema D is domain independent if for each pair of sets X; Y U and each database instance d of D, Q X [d] = Q Y [d].
Reference: [AGSS86] <author> A. K. Aylamazyan, M. M. Gilula, A. P. Stolboushkin, and G. F. Schwartz. </author> <title> Reduction of the relational model with infinite domain to the case of finite domains (Russian). </title> <journal> Proc. of USSR Acad. of Science (Doklady), </journal> <volume> 286(2) </volume> <pages> 308-311, </pages> <year> 1986. </year> <month> 17 </month>
Reference-contexts: Among other things, the results of this paper yield two finite computational approaches to evaluating arbitrary relational calculus queries under the output-restricted unlimited interpretation. The results reported here were obtained independently from the investigation reported in <ref> [AGSS86] </ref>. The main concern there is how to evaluate a query under the natural semantics of first order logic, i.e., under the unlimited interpretation. They show that membership in 1 the (possibly infinite) answer to a query is always decidable. <p> By Lemma 4.1, d j= Y 1 (e 0 ; a 1 ; : : : ; a k ), hence (a 1 ; : : : ; a k ) 2 (5). 2 From the above lemma it immediately follows that: Corollary 4.3. <ref> [AGSS86] </ref> Let Q have n variables and k target variables; let d be an input instance; and let X U adom have n elements. Then Q U [d] " (adom [ X) k = Q X [d]: 2 The previous lemma also immediately yields the following key lemma. Lemma 4.4. <p> Part (c) follows from the arguments for parts (a) and (b), and the fact that Q oru Q cinv for each query Q. 2 Acknowledgment The authors wish to thank Micheal Kifer for providing a copy of a translation of <ref> [AGSS86] </ref>, and also anonymous referees for suggestions which lead to improvement of the paper.
Reference: [AV87] <author> S. Abiteboul and V. Vianu. </author> <title> A transaction language complete for database update and specification. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 260-268, </pages> <year> 1987. </year>
Reference-contexts: The language of domain independent queries is denoted as CALC ind . If Q is domain independent, then Q [d] = Q U [d] = Q ; [d] for each input database instance d. Recently <ref> [AV87] </ref>, the notion of "invented value" (i.e., atomic values not in adom) has been studied and shown to be important in expressing arbitrary computable queries in various query languages. In particular, [HS91] presents a framework of studying the complex object calculus with invented values.
Reference: [CH80] <author> A.K. Chandra and D. Harel. </author> <title> Computable queries for relational data bases. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2) </volume> <pages> 156-178, </pages> <year> 1980. </year>
Reference-contexts: The results of the next section imply that for each query Q, Q alt-cinv Q finv .) Let D be a database schema and T a relation schema. A mapping f from instances of D to instances of T is generic <ref> [CH80, Hul86] </ref> if there exists a finite C U such that for each permutation 2 over U which is the identity on C, f commutes with 3 , i.e., f ffi = ffi f . <p> A query function f from D to T is a generic mapping from instances of D to instances of T <ref> [CH80] </ref>. Each calculus query under an associated interpretation can be viewed as a query function; the query is also said to realize the query function under this interpretation. Let L and L 0 be two query languages with associated semantics.
Reference: [Cod70] <author> E. F. Codd. </author> <title> A Relational Model of Data for Large Shared Data Banks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1970. </year>
Reference-contexts: 1 Introduction A relational database consists of a finite number of finite relations <ref> [Cod70] </ref>. The relational calculus, one of the two classic relational query languages, provides a declarative way to query databases based on first order logic.
Reference: [Fag82] <author> R. Fagin. </author> <title> Horn clauses and database dependencies. </title> <journal> Journal of the ACM, </journal> <volume> 29(4) </volume> <pages> 952-985, </pages> <year> 1982. </year>
Reference-contexts: However, since the universe is potentially infinite, answers to queries may be infinite, and under the traditional logic semantics the quantified variables range over the potentially infinite underlying domain. To overcome these obstacles, several variations have been proposed for feasible implementations of the relational calculus, e.g., domain independent queries <ref> [Fag82, AB88] </ref>, safe queries [Ull82], limited interpretation [Mai83], etc. These essentially restrict the calculus in such a way that combinations of query syntax and the associated semantics guarantee (i) finiteness of answers, and (ii) the ability to compute the answer using a terminating procedure. <p> both x and t range over adom = fa; b; cg, and so Q lim [d] = ;. 2 Another alternative to guaranteeing finitary answers and computations, but without the counter-intuitive effects of the limited interpretation, is to restrict attention to queries whose evaluation is independent of the underlying domain <ref> [Fag82, AB88] </ref>: Definition. A calculus query Q on a schema D is domain independent if for each pair of sets X; Y U and each database instance d of D, Q X [d] = Q Y [d].
Reference: [HS89] <author> R. Hull and J. Su. </author> <title> Untyped sets, invention, and computable queries. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 347-359, </pages> <year> 1989. </year>
Reference-contexts: Although invention does not increase the expressive power of the relational calculus, it expands the expressive power of the complex object calculus (from queries having hyper-exponential time/space complexity [HS91, KV88]) to queries computable by Turing machines with recursive oracles <ref> [HS89] </ref>. We now present several straightforward claims which form part of the proof of Theorem 3.1; the more intricate portions of the proof are presented in the next section. Proof of Theorem 3.1, part 1: In this part of the proof we make four claims. 1.
Reference: [HS91] <author> R. Hull and J. Su. </author> <title> On the expressive power of database queries with intermediate types. </title> <journal> Journal of Computer and System Sciences 43(1) </journal> <pages> 219-267, </pages> <note> 1991 (special issue for PODS'88). </note>
Reference-contexts: Recently [AV87], the notion of "invented value" (i.e., atomic values not in adom) has been studied and shown to be important in expressing arbitrary computable queries in various query languages. In particular, <ref> [HS91] </ref> presents a framework of studying the complex object calculus with invented values. By restricting it to the relational model, the output-restricted unlimited interpretation is easily characterized in terms of invented values (see below). More 4 importantly, the proofs of the main results in the current paper use this notion. <p> For each n; 0 n !, and each input instance d, Qj n [d] is defined to be Q Y [d] " adom k , where Y is some (any) subset of U such that Y " adom = ; and jY j = n. (As shown in <ref> [HS91] </ref> this notion is well-defined since values in (U adom) are generic.) Now, the interpretation of Q under finite invention is defined as Q finv [d] = S 0n&lt;! Qj n [d]; and the interpretation of Q under countable invention is Q cinv [d] = Qj ! [d]. (The word finite <p> Although invention does not increase the expressive power of the relational calculus, it expands the expressive power of the complex object calculus (from queries having hyper-exponential time/space complexity <ref> [HS91, KV88] </ref>) to queries computable by Turing machines with recursive oracles [HS89]. We now present several straightforward claims which form part of the proof of Theorem 3.1; the more intricate portions of the proof are presented in the next section.
Reference: [Hul86] <author> R. Hull. </author> <title> Relative information capacity of simple relational schemata. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(3) </volume> <pages> 856-886, </pages> <year> 1986. </year>
Reference-contexts: The results of the next section imply that for each query Q, Q alt-cinv Q finv .) Let D be a database schema and T a relation schema. A mapping f from instances of D to instances of T is generic <ref> [CH80, Hul86] </ref> if there exists a finite C U such that for each permutation 2 over U which is the identity on C, f commutes with 3 , i.e., f ffi = ffi f .
Reference: [Kif88] <author> M. Kifer. </author> <title> On safety, domain independence, and capturability of database queries. </title> <booktitle> In Proc. 3rd Int. conf on Data and Knowledge Bases, </booktitle> <pages> pages 405-415, </pages> <address> Jerusalem, Isreal, </address> <year> 1988. </year>
Reference: [KV88] <author> G. M. Kuper and M. Y. Vardi. </author> <title> On the complexity of queries in the Logical Data Model. </title> <editor> In M. Gyssens, J. Paredaens, and D. van Gucht, editors, </editor> <booktitle> ICDT'88 Proc. 2nd Int. Conf. on Database Theory, volume 326 of Lecture Notes in Computer Science, </booktitle> <pages> pages 267-280. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Although invention does not increase the expressive power of the relational calculus, it expands the expressive power of the complex object calculus (from queries having hyper-exponential time/space complexity <ref> [HS91, KV88] </ref>) to queries computable by Turing machines with recursive oracles [HS89]. We now present several straightforward claims which form part of the proof of Theorem 3.1; the more intricate portions of the proof are presented in the next section.
Reference: [Mai83] <author> D. Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <address> Potomac, Maryland, </address> <year> 1983. </year> <month> 18 </month>
Reference-contexts: To overcome these obstacles, several variations have been proposed for feasible implementations of the relational calculus, e.g., domain independent queries [Fag82, AB88], safe queries [Ull82], limited interpretation <ref> [Mai83] </ref>, etc. These essentially restrict the calculus in such a way that combinations of query syntax and the associated semantics guarantee (i) finiteness of answers, and (ii) the ability to compute the answer using a terminating procedure. <p> The main results are presented in Section 3. Section 4 contains the intricate construction used to prove some of these. 2 Definitions In this section, we briefly review some basic definitions, including relational databases and queries. The reader is assumed to be familiar with the relational model and calculus <ref> [Mai83, Ull82] </ref>. We assume the existence of two disjoint, countably infinite sets: U , the universal domain of atomic values, and P, predicate names. Let U be a distinct symbol, representing the type (signature) of U . Definition. <p> We now introduce several "interpretations" which give alternative semantics to queries. The unlimited interpretation <ref> [Mai83] </ref> of query Q on instance d is Q U [d], i.e., the set of all tuples [a 1 ; : : : ; a k ] in U k such that d satisfies (under U ) the formula '(a 1 ; : : : ; a k ). <p> The naive evaluation of queries under the output-restricted unlimited interpretation calls for the evaluation of quantified variables which range over the infinite underlying domain. The "limited interpretation" (or "active domain interpretation") <ref> [Mai83] </ref> avoids this problem, by restricting the range of all variables to adom, which is guaranteed to be finite. Formally, the limited interpretation of Q on d is defined as Q lim [d] = Q ; [d]. The calculus under the limited interpretation is denoted as CALC lim .
Reference: [Ull82] <author> J. D. Ullman. </author> <title> Principles of Database Systems (2nd edition). </title> <publisher> Computer Science Press, </publisher> <address> Potomac, Maryland, </address> <year> 1982. </year> <month> 19 </month>
Reference-contexts: To overcome these obstacles, several variations have been proposed for feasible implementations of the relational calculus, e.g., domain independent queries [Fag82, AB88], safe queries <ref> [Ull82] </ref>, limited interpretation [Mai83], etc. These essentially restrict the calculus in such a way that combinations of query syntax and the associated semantics guarantee (i) finiteness of answers, and (ii) the ability to compute the answer using a terminating procedure. <p> The main results are presented in Section 3. Section 4 contains the intricate construction used to prove some of these. 2 Definitions In this section, we briefly review some basic definitions, including relational databases and queries. The reader is assumed to be familiar with the relational model and calculus <ref> [Mai83, Ull82] </ref>. We assume the existence of two disjoint, countably infinite sets: U , the universal domain of atomic values, and P, predicate names. Let U be a distinct symbol, representing the type (signature) of U . Definition. <p> Note that above definition has two main differences from the notion of safety in <ref> [Ull82] </ref>: (i) there is no condition on free variables, and (ii) the conditions on quantified subformulas are syntactic (rather than semantic for safety).
References-found: 13

