URL: http://www.cs.gatech.edu/gvu/animation/papers/design_galleries.ps.gz
Refering-URL: http://www.cs.gatech.edu/gvu/animation/Areas/publications/publications.html
Root-URL: 
Email: MERL  E-mail: marks@merl.com.  
Title: Design Galleries: A General Approach to Setting Parameters for Computer Graphics and Animation  
Author: J. Marks MERL B. Andalman W. Freeman MERL S. Gibson MERL J. Hodgins T. Kang B. Mirtich MERL H. Pfister MERL W. Ruml K. Ryall J. Seims S. Shieber 
Keyword: CR Categories: I.2.6 [Artificial Intelligence]: Problem Solving, Control Methods and Search|heuristic methods; I.3.6 [Computer Graphics]: Methodology and Techniques| interaction techniques; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism. Keywords: Animation, computer-aided design, image rendering, lighting, motion synthesis, particle systems, physical modeling, visualization, volume rendering.  
Note: Address: MERL A  
Address: P.A. Beardsley  201 Broadway, Cambridge, MA 02139, U.S.A.  
Affiliation: Harvard Univ.  Georgia Tech.  CMU  Harvard Univ.  Harvard Univ.  Univ. of Washington  Harvard Univ.  Mitsubishi Electric Research Laboratory,  
Abstract: Image rendering maps scene parameters to output pixel values; animation maps motion-control parameters to trajectory values. Because these mapping functions are usually multidimensional, nonlinear, and discontinuous, finding input parameters that yield desirable output values is often a painful process of manual tweaking. Interactive evolution and inverse design are two general methodologies for computer-assisted parameter setting in which the computer plays a prominent role. In this paper we present another such methodology. Design Gallery TM (DG) interfaces present the user with the broadest selection, automatically generated and organized, of perceptually different graphics or animations that can be produced by varying a given input-parameter vector. The principal technical challenges posed by the DG approach are dispersion, finding a set of input-parameter vectors that optimally disperses the resulting output-value vectors, and arrangement, organizing the resulting graphics for easy and intuitive browsing by the user. We describe the use of DG interfaces for several parameter-setting problems: light selection and placement for image rendering, both standard and image-based; opacity and color transfer-function specification for volume rendering; and motion control for particle-system and articulated-figure animation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Alpert and A. B. Kahng. </author> <title> Recent directions in netlist partitioning: a survey. Integration: </title> <journal> The VLSI Journal, </journal> <volume> 19 </volume> <pages> 1-81, </pages> <year> 1995. </year>
Reference-contexts: then f p score q score; p q; g L L n fpg; g Notes: n denotes set difference. find dims (c; L) returns those lights in L with average luminance less than c. image diff (q; r) returns the value computed by Equation 1. been developed for this problem <ref> [1] </ref>. Our partitioning code is based on an algorithm and software developed by Karypis and Kumar [9]. Once the initial w-way partition is formed, representative lights for each partition are selected, and installed in the hierarchy. <p> (I [j]; i); map (u; v); k worst index (O); if is better (v; O [k]; O) then f I [k] u; g else if is better (v; O [j]; O) then f I [j] u; g g Notes: rand int (1; n) returns a random integer in the range <ref> [1; n] </ref>. perturb (I [j]; i) returns a copy of I [j] in which all the elements have been perturbed.
Reference: [2] <author> P. A. Beardsley, A. P. Zisserman, and D. W. Murray. </author> <title> Sequential updating of projective and affine structure from motion. </title> <journal> International Journal of Computer Vision, </journal> <note> 1997. In press. </note>
Reference-contexts: Finally, Figure 11 shows a DG for synthetic lighting of a photograph (inset at lower right). A point- and line-based 3D model is extracted from a triplet of scene images, each taken from a different viewpoint. This reconstruction process is completely automatic, as described in <ref> [2] </ref>. Points and lines are then aggregated semi-automatically into planes.
Reference: [3] <author> I. Borg and P. Groenen. </author> <title> Modern Multidimensional Scaling: Theory and Applications. </title> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: Selecting a thumbnail brings up a full-size image, which can then be moved to the surrounding image gallery. Mousing on an image in the gallery highlights its associated thumbnail, and vice versa. Thumbnail layout is accomplished using a multidimensional scaling (MDS) <ref> [3] </ref> method due to Torgerson [24]. 4 Given a matrix of distances between points, MDS procedures compute an embedding of the points in a low-dimensional Euclidean space (2D in our case) such that the interpoint distances in the embedding closely match those in the given matrix.
Reference: [4] <author> M. R. Garey, D. S. Johnson, and L. Stockmeyer. </author> <title> Some simplified NP-complete graph problems. </title> <journal> Theoretical Computer Science, </journal> <volume> 1(3) </volume> <pages> 237-267, </pages> <year> 1976. </year>
Reference-contexts: An optimal w-way partition of this graph would comprise w disjoint vertex subsets of equal cardinality such that the cost of the cut set, the total cost of all edges that connect vertices in different subsets, is minimized. Optimal graph partitioning is NP-hard <ref> [4] </ref>, but many good heuristics have 1 Since we start with a low-resolution thumbnail, the filtered images of even lower resolution called for in the expression will be truly tiny.
Reference: [5] <author> J. C. Gower. </author> <title> Some distance properties of latent root and vector methods used in multivariate analysis. </title> <journal> Biometrika, </journal> <volume> 53 </volume> <pages> 325-338, </pages> <year> 1966. </year>
Reference-contexts: When the interpoint distances come from an embedding of the points in a high-dimensional Euclidean space (which is true for the applications we discuss here, although it need not be true in general), classical scaling is equivalent to an efficient technique for computing a principal-component analysis of the points <ref> [5, 13] </ref>.
Reference: [6] <author> P. Haeberli. </author> <note> Synthetic lighting for photography. URL http://www.sgi.com/grafica/synth/index.- html, </note> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: Thus w = 8 and h = 3. In turn, these parameters determine the cardinality of I: jIj = j=1 w j = 584. This particular interface provides additional application-specific functionality that exploits the additive nature of light <ref> [6] </ref>. Images can be dragged to the palette, where light intensity and temperature can be varied interactively. Multiple images are composited to form a full-size image in the lower left. 2.4 Results The DG in Figure 9 contains a scene inspired by an example from [8].
Reference: [7] <author> T. He, L. Hong, A. Kaufman, and H. Pfister. </author> <title> Generation of transfer functions with stochastic search techniques. </title> <booktitle> In Proc. of Visualization 96, </booktitle> <pages> pages 227-234, </pages> <address> San Francisco, California, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: and difficult manual task amenable to a DG approach. 3 We developed DG interfaces for two data sets: the simulated electron density of a protein, and a CT scan of a human pelvis. 3 The application of both interactive evolution and inverse design to this problem is the subject of <ref> [7] </ref>. 3.1 Input and Output Vectors The protein data set contains values in the interval [0; 255]. The opacity transfer function over this domain is parameterized by a polyline with eight control points, for a total of 16 values. The polyline is low-pass filtered before it is used.
Reference: [8] <author> J. Kahrs, S. Calahan, D. Carson, and S. </author> <title> Poster. Pixel cinematography: a lighting approach for computer graphics. </title> <booktitle> Notes for Course #30, SIGGRAPH 96, </booktitle> <address> New Orleans, Louisiana, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: A more intrinsic difficulty is that of requiring the user to quantify a priori the desired illuminative characteristics of the resulting image. This requirement may be satisfiable in an architectural context [10], but seems very challenging in a more general cinematographic context <ref> [8] </ref>. The most difficult lighting parameters to set are those relating to light type and placement, so they have been the focus of our efforts. 2.1 Input and Output Vectors For the light selection and placement problem, we begin with a scene model comprising surfaces and viewing parameters. <p> Images can be dragged to the palette, where light intensity and temperature can be varied interactively. Multiple images are composited to form a full-size image in the lower left. 2.4 Results The DG in Figure 9 contains a scene inspired by an example from <ref> [8] </ref>. The floor, ceiling, and all four walls (only the rear one is visible) were designated light-hook surfaces. The surfaces comprising the figures were designated light-target surfaces, as was the back wall. The 584 lights in the gallery were selected from 5,000 randomly generated lights in the dispersion phase.
Reference: [9] <author> G. Karypis and V. Kumar. </author> <title> Multilevel k-way partitioning scheme for irregular graphs. </title> <type> Technical report, </type> <institution> Dept. of Computer Science, Univ. of Minnesota, </institution> <year> 1995. </year> <note> See also URL http://www.cs.umn.edu/~karypis/- metis/metis.html. </note>
Reference-contexts: Our partitioning code is based on an algorithm and software developed by Karypis and Kumar <ref> [9] </ref>. Once the initial w-way partition is formed, representative lights for each partition are selected, and installed in the hierarchy. The partitioned subsets, minus their representative vertices, are then processed recursively until a hierarchy with branching factor w and height h is completed.
Reference: [10] <author> J. K. Kawai, J. S. Painter, and M. F. Cohen. </author> <booktitle> Radiop-timization - goal-based rendering. In SIGGRAPH 93 Conf. Proc., </booktitle> <pages> pages 147-154, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: One such computer-assisted methodology is interactive evolution [11, 21, 23]: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration. A more automatic methodology is inverse design, e.g., <ref> [10, 12, 14, 19, 22, 25, 27] </ref>: the computer searches for parameter settings that optimize a user-supplied, mathematically stated objective function. Unfortunately, there are many interesting and important graphics processes for which interactive evolution and inverse design are not very useful. <p> Previous attempts at computer-assisted lighting specification have used inverse design. For example, the user can specify the location of highlights and shadows in the image [15], pixel intensities [19], or subjective impressions of illumination <ref> [10] </ref>; the computer then attempts to determine lighting parameters that best meet the given objectives, using geometric [15] or optimization [10, 19] techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks. <p> For example, the user can specify the location of highlights and shadows in the image [15], pixel intensities [19], or subjective impressions of illumination [10]; the computer then attempts to determine lighting parameters that best meet the given objectives, using geometric [15] or optimization <ref> [10, 19] </ref> techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks. High-quality image rendering (e.g., raytracing or radiosity) is costly; to make the computer's search task tractable, the user may have to fix the light positions [10, 19], thereby grossly limiting the illuminations that can <p> the given objectives, using geometric [15] or optimization <ref> [10, 19] </ref> techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks. High-quality image rendering (e.g., raytracing or radiosity) is costly; to make the computer's search task tractable, the user may have to fix the light positions [10, 19], thereby grossly limiting the illuminations that can be considered. A more intrinsic difficulty is that of requiring the user to quantify a priori the desired illuminative characteristics of the resulting image. <p> A more intrinsic difficulty is that of requiring the user to quantify a priori the desired illuminative characteristics of the resulting image. This requirement may be satisfiable in an architectural context <ref> [10] </ref>, but seems very challenging in a more general cinematographic context [8].
Reference: [11] <author> S. Kochhar. </author> <title> A prototype system for design automation via the browsing paradigm. </title> <booktitle> In Proc. of Graphics Interface 90, </booktitle> <pages> pages 156-166, </pages> <address> Halifax, Nova Scotia, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Finding input parameters that yield a desirable output is difficult and tedious for many rendering, modeling, and motion-control processes. The notion of having the computer assist actively in setting parameters is therefore appealing. One such computer-assisted methodology is interactive evolution <ref> [11, 21, 23] </ref>: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration.
Reference: [12] <author> Z. Liu, S. J. Gortler, and M. F. Cohen. </author> <title> Hierarchical spacetime control. </title> <booktitle> In SIGGRAPH 94 Conf. Proc., </booktitle> <pages> pages 35-42, </pages> <address> Orlando, Florida, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: One such computer-assisted methodology is interactive evolution [11, 21, 23]: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration. A more automatic methodology is inverse design, e.g., <ref> [10, 12, 14, 19, 22, 25, 27] </ref>: the computer searches for parameter settings that optimize a user-supplied, mathematically stated objective function. Unfortunately, there are many interesting and important graphics processes for which interactive evolution and inverse design are not very useful. <p> volume rendering of the pelvis data set. 4 Animation Applications Motion control in animation involves extensive parameter tuning because the mapping from input parameters to graphical output is nonintuitive, unpredictable, and costly to compute. 5 For these reasons, motion control is very 5 Both interactive evolution [26] and inverse design <ref> [12, 14, 22, 25, 27] </ref> have been applied previously to motion control. amenable to a DG approach.
Reference: [13] <author> H. Murakami and B. V. K. V. Kumar. </author> <title> Efficient calculation of primary images from a set of images. </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-4(5):511-515, </volume> <month> Sept. </month> <year> 1982. </year>
Reference-contexts: When the interpoint distances come from an embedding of the points in a high-dimensional Euclidean space (which is true for the applications we discuss here, although it need not be true in general), classical scaling is equivalent to an efficient technique for computing a principal-component analysis of the points <ref> [5, 13] </ref>.
Reference: [14] <author> J. T. Ngo and J. Marks. </author> <title> Spacetime constraints revisited. </title> <booktitle> In SIGGRAPH 93 Conf. Proc., </booktitle> <pages> pages 343-350, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: One such computer-assisted methodology is interactive evolution [11, 21, 23]: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration. A more automatic methodology is inverse design, e.g., <ref> [10, 12, 14, 19, 22, 25, 27] </ref>: the computer searches for parameter settings that optimize a user-supplied, mathematically stated objective function. Unfortunately, there are many interesting and important graphics processes for which interactive evolution and inverse design are not very useful. <p> volume rendering of the pelvis data set. 4 Animation Applications Motion control in animation involves extensive parameter tuning because the mapping from input parameters to graphical output is nonintuitive, unpredictable, and costly to compute. 5 For these reasons, motion control is very 5 Both interactive evolution [26] and inverse design <ref> [12, 14, 22, 25, 27] </ref> have been applied previously to motion control. amenable to a DG approach.
Reference: [15] <author> P. Poulin and A. Fournier. </author> <title> Lights from highlights and shadows. </title> <booktitle> In Proc. of the 1992 Symposium on Interactive Graphics, </booktitle> <pages> pages 31-38, </pages> <address> Boston, Massachusetts, </address> <month> Mar. </month> <year> 1992. </year> <booktitle> In Computer Graphics 25(2), </booktitle> <year> 1992. </year>
Reference-contexts: Previous attempts at computer-assisted lighting specification have used inverse design. For example, the user can specify the location of highlights and shadows in the image <ref> [15] </ref>, pixel intensities [19], or subjective impressions of illumination [10]; the computer then attempts to determine lighting parameters that best meet the given objectives, using geometric [15] or optimization [10, 19] techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks. <p> For example, the user can specify the location of highlights and shadows in the image <ref> [15] </ref>, pixel intensities [19], or subjective impressions of illumination [10]; the computer then attempts to determine lighting parameters that best meet the given objectives, using geometric [15] or optimization [10, 19] techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks.
Reference: [16] <author> W. T. Reeves. </author> <title> Particle systems a technique for modeling a class of fuzzy objects. </title> <journal> ACM Trans. on Graphics, </journal> <volume> 2 </volume> <pages> 91-108, </pages> <month> Apr. </month> <year> 1983. </year>
Reference-contexts: The hopper-dog DG is illustrated in the video proceedings. 4.3 Particle Systems Particle systems are useful for modeling a variety of phenomena such as fire, clouds, water, and explosions <ref> [16] </ref>. A useful particle-system editor might have 40 or more parameters that the animator can set, so achieving desired effects can be tedious. As in the previous subsection, we use a DG interface to refine an animator's rough approximation to a desired animation.
Reference: [17] <author> D. E. Rosenthal and M. A. Sherman. </author> <title> High performance multibody simulations via symbolic equation manipulation and Kane's method. </title> <journal> Journal of Astronautical Sciences, </journal> <volume> 34(3) </volume> <pages> 223-239, </pages> <year> 1986. </year>
Reference-contexts: The hopper dog is actuated by a control system that tries to maintain a desired forward velocity and hopping height, as well as desired positions for joints in some of the appendages. The equations of motion for the system are generated using a commercially available package <ref> [17] </ref>; dynamic simulation is used to produce the animations. We started with a basic hopping motion, and then used a DG approach to explore seven input quantities in order to achieve stylistic, physically attainable gaits.
Reference: [18] <author> Y. Rubner, L. J. Guibas, and C. Tomasi. </author> <title> The earth mover's distance, multi-dimensional scaling, </title> <booktitle> and color-based image retrieval. In Proc. of the DARPA Image Understanding Workshop, </booktitle> <address> New Orleans, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: The dispersion procedure returned 256 dispersed input and output vectors. A selection of images is shown in the surrounding image galleries. The lines that 4 The use of more sophisticated MDS techniques for arranging a database of images is being investigated by Rubner et al. <ref> [18] </ref>. connect images with their thumbnails give some indication of how images congregate in the thumbnail display. (During interactive use the association between thumbnails and images is done preferably by dynamic highlighting, as described above.) Figure 3 shows the result of clicking on one of the images in the image gallery:
Reference: [19] <author> C. Schoeneman, J. Dorsey, B. Smits, J. Arvo, and D. Greenberg. </author> <title> Painting with light. </title> <booktitle> In SIGGRAPH 93 Conf. Proc., </booktitle> <pages> pages 143-146, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: One such computer-assisted methodology is interactive evolution [11, 21, 23]: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration. A more automatic methodology is inverse design, e.g., <ref> [10, 12, 14, 19, 22, 25, 27] </ref>: the computer searches for parameter settings that optimize a user-supplied, mathematically stated objective function. Unfortunately, there are many interesting and important graphics processes for which interactive evolution and inverse design are not very useful. <p> Previous attempts at computer-assisted lighting specification have used inverse design. For example, the user can specify the location of highlights and shadows in the image [15], pixel intensities <ref> [19] </ref>, or subjective impressions of illumination [10]; the computer then attempts to determine lighting parameters that best meet the given objectives, using geometric [15] or optimization [10, 19] techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks. <p> For example, the user can specify the location of highlights and shadows in the image [15], pixel intensities [19], or subjective impressions of illumination [10]; the computer then attempts to determine lighting parameters that best meet the given objectives, using geometric [15] or optimization <ref> [10, 19] </ref> techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks. High-quality image rendering (e.g., raytracing or radiosity) is costly; to make the computer's search task tractable, the user may have to fix the light positions [10, 19], thereby grossly limiting the illuminations that can <p> the given objectives, using geometric [15] or optimization <ref> [10, 19] </ref> techniques. Unfortunately, the formulation of lighting specification as an inverse problem has some significant drawbacks. High-quality image rendering (e.g., raytracing or radiosity) is costly; to make the computer's search task tractable, the user may have to fix the light positions [10, 19], thereby grossly limiting the illuminations that can be considered. A more intrinsic difficulty is that of requiring the user to quantify a priori the desired illuminative characteristics of the resulting image.
Reference: [20] <author> T. Shinbrot, C. Grebogi, J. Wisdom, and J. A. Yorke. </author> <title> Chaos in a double pendulum. </title> <journal> American Journal of Physics, </journal> <volume> 60(6) </volume> <pages> 491-499, </pages> <year> 1992. </year>
Reference-contexts: The plateau in nearest-neighbor distance is reached after 170; 000 dispersion itera 6 Even without the application of external torques at its joints, the 2D double pendulum exhibits chaotic behavior <ref> [20] </ref>. tions, which take 6.5 hours on a single MIPS R10000 processor. 4.2 3D Hopper Dog The previous DG is useful in finding and understanding the full range of motions possible for the pendulum under a given control regime.
Reference: [21] <author> K. Sims. </author> <title> Artificial evolution for computer graphics. </title> <booktitle> In Computer Graphics (SIGGRAPH 91 Conf. Proc.), </booktitle> <volume> volume 25, </volume> <pages> pages 319-328, </pages> <address> Las Vegas, Nevada, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Finding input parameters that yield a desirable output is difficult and tedious for many rendering, modeling, and motion-control processes. The notion of having the computer assist actively in setting parameters is therefore appealing. One such computer-assisted methodology is interactive evolution <ref> [11, 21, 23] </ref>: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration.
Reference: [22] <author> K. Sims. </author> <title> Evolving virtual creatures. </title> <booktitle> In SIGGRAPH 94 Conf. Proc., </booktitle> <pages> pages 15-22, </pages> <address> Orlando, Florida, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: One such computer-assisted methodology is interactive evolution [11, 21, 23]: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration. A more automatic methodology is inverse design, e.g., <ref> [10, 12, 14, 19, 22, 25, 27] </ref>: the computer searches for parameter settings that optimize a user-supplied, mathematically stated objective function. Unfortunately, there are many interesting and important graphics processes for which interactive evolution and inverse design are not very useful. <p> volume rendering of the pelvis data set. 4 Animation Applications Motion control in animation involves extensive parameter tuning because the mapping from input parameters to graphical output is nonintuitive, unpredictable, and costly to compute. 5 For these reasons, motion control is very 5 Both interactive evolution [26] and inverse design <ref> [12, 14, 22, 25, 27] </ref> have been applied previously to motion control. amenable to a DG approach.
Reference: [23] <author> S. Todd and W. Latham. </author> <title> Evolutionary Art and Computers. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1992. </year>
Reference-contexts: Finding input parameters that yield a desirable output is difficult and tedious for many rendering, modeling, and motion-control processes. The notion of having the computer assist actively in setting parameters is therefore appealing. One such computer-assisted methodology is interactive evolution <ref> [11, 21, 23] </ref>: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration.
Reference: [24] <author> W. S. Torgerson. </author> <title> Theory and Methods of Scaling. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1958. </year> <pages> See especially pages 254-259. </pages>
Reference-contexts: Selecting a thumbnail brings up a full-size image, which can then be moved to the surrounding image gallery. Mousing on an image in the gallery highlights its associated thumbnail, and vice versa. Thumbnail layout is accomplished using a multidimensional scaling (MDS) [3] method due to Torgerson <ref> [24] </ref>. 4 Given a matrix of distances between points, MDS procedures compute an embedding of the points in a low-dimensional Euclidean space (2D in our case) such that the interpoint distances in the embedding closely match those in the given matrix.
Reference: [25] <author> M. van de Panne and E. Fiume. </author> <title> Sensor-actuator networks. </title> <booktitle> In SIGGRAPH 93 Conf. Proc., </booktitle> <pages> pages 335-342, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: One such computer-assisted methodology is interactive evolution [11, 21, 23]: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration. A more automatic methodology is inverse design, e.g., <ref> [10, 12, 14, 19, 22, 25, 27] </ref>: the computer searches for parameter settings that optimize a user-supplied, mathematically stated objective function. Unfortunately, there are many interesting and important graphics processes for which interactive evolution and inverse design are not very useful. <p> volume rendering of the pelvis data set. 4 Animation Applications Motion control in animation involves extensive parameter tuning because the mapping from input parameters to graphical output is nonintuitive, unpredictable, and costly to compute. 5 For these reasons, motion control is very 5 Both interactive evolution [26] and inverse design <ref> [12, 14, 22, 25, 27] </ref> have been applied previously to motion control. amenable to a DG approach.
Reference: [26] <author> J. Ventrella. </author> <title> Disney meets Darwin the evolution of funny animated figures. </title> <booktitle> In Proc. of Computer Animation 95, </booktitle> <pages> pages 35-43, </pages> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: the DG for the volume rendering of the pelvis data set. 4 Animation Applications Motion control in animation involves extensive parameter tuning because the mapping from input parameters to graphical output is nonintuitive, unpredictable, and costly to compute. 5 For these reasons, motion control is very 5 Both interactive evolution <ref> [26] </ref> and inverse design [12, 14, 22, 25, 27] have been applied previously to motion control. amenable to a DG approach.
Reference: [27] <author> A. Witkin and M. Kass. </author> <title> Spacetime constraints. </title> <booktitle> In Computer Graphics (SIGGRAPH 88 Conf. Proc.), </booktitle> <volume> volume 22, </volume> <pages> pages 159-168, </pages> <address> Atlanta, Georgia, </address> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: One such computer-assisted methodology is interactive evolution [11, 21, 23]: the computer explores the space of possible parameter settings, and the user acts as an objective-function oracle, interactively selecting computer-suggested alternatives for further exploration. A more automatic methodology is inverse design, e.g., <ref> [10, 12, 14, 19, 22, 25, 27] </ref>: the computer searches for parameter settings that optimize a user-supplied, mathematically stated objective function. Unfortunately, there are many interesting and important graphics processes for which interactive evolution and inverse design are not very useful. <p> volume rendering of the pelvis data set. 4 Animation Applications Motion control in animation involves extensive parameter tuning because the mapping from input parameters to graphical output is nonintuitive, unpredictable, and costly to compute. 5 For these reasons, motion control is very 5 Both interactive evolution [26] and inverse design <ref> [12, 14, 22, 25, 27] </ref> have been applied previously to motion control. amenable to a DG approach.
References-found: 27

