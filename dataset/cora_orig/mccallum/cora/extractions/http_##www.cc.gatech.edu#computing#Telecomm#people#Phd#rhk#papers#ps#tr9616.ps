URL: http://www.cc.gatech.edu/computing/Telecomm/people/Phd/rhk/papers/ps/tr9616.ps
Refering-URL: http://www.cc.gatech.edu/computing/Telecomm/people/Phd/rhk.html
Root-URL: 
Email: schwang@cc.gatech.edu  
Title: Dynamically Configurable Communication Protocols and Distributed Applications: Motivation and Experience  
Author: Robin Kravets, Ken Calvert, Karsten Schwan frobink, calvert, 
Address: Atlanta, Georgia 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Web: GIT-CC-96-16  
Abstract: Due to the diverse communication requirements of today's distributed applications, our work has led us in the direction of dynamically configurable protocol systems. This paper motivates the design of a framework for such systems. We discuss the initial study that drove the design of our framework, and describe the framework and the associated interfaces. Finally, we present the results from an experiment involving an adaptable application using a variable reliability protocol. 
Abstract-found: 1
Intro-found: 1
Reference: [BS95] <author> Nina Bhatti and Richard Schlichting. </author> <title> A system for constructing configurable high-level protocols. </title> <booktitle> In sigcomm95, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: In the x-kernel [HP91] [OP92], protocols are divided into modules, and these modules are connected in a protocol graph. Connections can choose a protocol path for their communications, again on a per-session basis. Bhatti and Schlicting <ref> [BS95] </ref> suggested an enhancement to the x-kernel that provides applications with more flexibility, but is still restricted to the original design of the x-kernel.
Reference: [Cal93] <author> Kenneth L. Calvert. </author> <title> Beyond layering: Modularity considerations for protocol architectures. In icnp93. </title> <institution> Georgia Institute of Technology, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: The result of this flexibility includes allowing the ability to change communication configurations on the fly. We may want to be able to turn protocols on and off during communication as well as change protocol parameters during the lifetime of the communication. Tau <ref> [CKK96, Cal93] </ref> is a framework for composing end-to-end protocol functions. The framework we have built implements a subset of the functionality designed into Tau. The dynamic configurability in our framework is realized through the use of a few very simple abstractions.
Reference: [CKK96] <author> K.L. Calvert, R.H. Kravets, and R.D. Krupczak. </author> <title> An extensible end-to-end protocol and framework. </title> <type> Technical Report TBA, </type> <institution> Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: The result of this flexibility includes allowing the ability to change communication configurations on the fly. We may want to be able to turn protocols on and off during communication as well as change protocol parameters during the lifetime of the communication. Tau <ref> [CKK96, Cal93] </ref> is a framework for composing end-to-end protocol functions. The framework we have built implements a subset of the functionality designed into Tau. The dynamic configurability in our framework is realized through the use of a few very simple abstractions.
Reference: [CT90] <author> David D. Clark and David L. Tennenhouse. </author> <title> Architectural considerations for a new generation of protocols. </title> <booktitle> In sigcomm90, </booktitle> <pages> pages 200-208, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The function of the label is to provide the application with the ability to send control information out-of-band. The framework takes this label and includes it in the message similarly to a protocol header. Providing this label allows the application to support the concepts of application level framing (ALF) <ref> [CT90] </ref>. ALF suggests that since the application has the most knowledge about the data that it needs to send, the communication system should respect application specified data boundaries.
Reference: [Dio95] <author> Christope Diot. </author> <title> Adaptive applications and QoS guarantees. </title> <booktitle> In IEEE Multimedia Networking, </booktitle> <month> sep </month> <year> 1995. </year>
Reference-contexts: This solution also makes fewer demands on the individual nodes of the network. QoS is monitored and adjustments are made end-to-end. An example using the INRIA Videoconferencing System (IVS) showed that it is possible for applications to adapt and still receive the QoS that they require <ref> [Dio95] </ref>. Gopalakrishnan and Parulkar [GP94] define some issues involved in determining what knowledge the application or endsystem may have that can help in providing the QoS requirements.
Reference: [DLW94] <author> Bert Dempsey, Jorg Liebherr, and Alfred Weaver. </author> <title> On retransmission-based error control for continuous media traffic in packet-switching networks. </title> <type> Technical Report CS 94-09, </type> <institution> Computer Science Department, University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: On the sending side, the application must inform the protocol what policy should be used for each reliability class when data has been lost. Studies have shown that for some applications, packet loss can often be tolerated. Dempsey, Liebherr and Weaver <ref> [DLW94] </ref> provide some insight into the usefulness of allowing the application to determine when retransmission is a viable option.
Reference: [FV90] <author> Domenico Ferrari and Dinesh Verma. </author> <title> A scheme for real-time channel establishment in wide-area networks. </title> <journal> jsac, </journal> <volume> 8(3) </volume> <pages> 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The first solution is to use resource reservation throughout the network. The second solution is to provide applications with information regarding the state of the network and allow the applications to adapt to the available resources. RSVP [ZDE + 93] and the work done in the Tenet group <ref> [FV90] </ref> are approaches to reserving network resources. ATM is intended to provide some level of QoS management, but many current implementations do not support this functionality, and it is not clear when they will. One problem with these solutions is that they require changes throughout the network.
Reference: [GP94] <author> R. Gopalakrishnan and Guru Parulkar. </author> <title> Application level protocol implementations to provide quality-of-service guarantees at endsystems. </title> <booktitle> In 9th IEEE Computer Communication Conference, </booktitle> <year> 1994. </year>
Reference-contexts: QoS is monitored and adjustments are made end-to-end. An example using the INRIA Videoconferencing System (IVS) showed that it is possible for applications to adapt and still receive the QoS that they require [Dio95]. Gopalakrishnan and Parulkar <ref> [GP94] </ref> define some issues involved in determining what knowledge the application or endsystem may have that can help in providing the QoS requirements.
Reference: [Haa91] <author> Zygmunt Haas. </author> <title> A protocol structure for high-speed communication over broadband ISDN. </title> <journal> IEEE Network Magazine, </journal> <pages> pages 64-70, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Dynamic configuration solves these problems by allowing the communication channel to change over time without tearing down the channel. Our framework implements this functionality. Some examples of connection time configuration include the following. HOPS (Horizontally Oriented Protocol Structure) <ref> [Haa91] </ref> provides applications with a single, higher-layer protocol that successfully provides communication over diverse networks. In the x-kernel [HP91] [OP92], protocols are divided into modules, and these modules are connected in a protocol graph. Connections can choose a protocol path for their communications, again on a per-session basis. <p> This functionality can vary in complexity from simple checksumming to the entire TCP protocol. The protocol functions together provide the "menu" from which an application can choose the services it desires. We envision communication services implemented by composing atomic single-function protocols from a "menu of functionality", as have others <ref> [OP92, ZST93, Haa91, PPVW93, SBS93] </ref>.
Reference: [HP91] <author> Norman C. Hutchinson and Larry L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> tse, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Our framework implements this functionality. Some examples of connection time configuration include the following. HOPS (Horizontally Oriented Protocol Structure) [Haa91] provides applications with a single, higher-layer protocol that successfully provides communication over diverse networks. In the x-kernel <ref> [HP91] </ref> [OP92], protocols are divided into modules, and these modules are connected in a protocol graph. Connections can choose a protocol path for their communications, again on a per-session basis.
Reference: [LKAS93] <author> Bert Lindgren, Bobby Krupczak, Mostafa Ammar, and Karsten Schwan. </author> <title> An architecture and toolkit for parallel and configurable protocols. </title> <booktitle> In icnp93, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: Our belief is that restricting the application to connection time configuration is an unnecessary requirement that may lead to poor application performance. Some experimental results in the area of parallel protocols with connection time configuration were presented by Lindgren, Krupczak, Ammar and Schwan <ref> [LKAS93] </ref>. The current implementation of our framework provides sequential protocol processing, but the design allows for both sequential and parallel processing. A number of proposals have been made for providing dynamic communications through configurable protocol systems.
Reference: [MAC96] <author> Rahmi Marasli, Paul Amer, and Phillip Conrad. </author> <title> Retransmission-based partially reliable services: An analytical model. </title> <booktitle> In infocom96, </booktitle> <year> 1996. </year>
Reference-contexts: Studies have shown that for some applications, packet loss can often be tolerated. Dempsey, Liebherr and Weaver [DLW94] provide some insight into the usefulness of allowing the application to determine when retransmission is a viable option. Recent work by Marasli, Amer and Conrad <ref> [MAC96] </ref> shows some analytical studies for retransmission-based reliability. 13 6.2 Distributed Robot Simulation The class of complex distributed interactive systems combines a mix of human, simulated and mechanical control. These different parts have differing requirements for latency, reliability, consistency, and bandwidth.
Reference: [OP92] <author> S. W. O'Malley and L. L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> tocs, </journal> <volume> 10 </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Our framework implements this functionality. Some examples of connection time configuration include the following. HOPS (Horizontally Oriented Protocol Structure) [Haa91] provides applications with a single, higher-layer protocol that successfully provides communication over diverse networks. In the x-kernel [HP91] <ref> [OP92] </ref>, protocols are divided into modules, and these modules are connected in a protocol graph. Connections can choose a protocol path for their communications, again on a per-session basis. <p> This functionality can vary in complexity from simple checksumming to the entire TCP protocol. The protocol functions together provide the "menu" from which an application can choose the services it desires. We envision communication services implemented by composing atomic single-function protocols from a "menu of functionality", as have others <ref> [OP92, ZST93, Haa91, PPVW93, SBS93] </ref>.
Reference: [PPVW93] <author> Thomas Plagemann, Bernhard Plattner, Martin Vogt, and Thomas Walter. </author> <title> Modules as building blocks for protocol configuration. In icnp93. </title> <institution> Swiss Federal Institute of Technology Zurich, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Their approach employs a collection of reusable "building block" protocol mechanisms that may be composed together automatically at runtime. This work emphasized the need for dynamically configurable protocols, but was limited to experimental results. Da CaPo (Dynamic Configuration of Protocols) <ref> [PPVW93] </ref> is another approach to modular configurable protocols. In Da Capo, configuration is done with respect to application requirements, properties of the offered network services and available resources in the end systems. <p> This functionality can vary in complexity from simple checksumming to the entire TCP protocol. The protocol functions together provide the "menu" from which an application can choose the services it desires. We envision communication services implemented by composing atomic single-function protocols from a "menu of functionality", as have others <ref> [OP92, ZST93, Haa91, PPVW93, SBS93] </ref>.
Reference: [SBS93] <author> Douglas C. Schmidt, Donald F. Box, and Tatsuya Suda. </author> <title> Adaptive: A dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Concurrency: Practice and Experience, </journal> <month> June </month> <year> 1993. </year>
Reference-contexts: The current implementation of our framework provides sequential protocol processing, but the design allows for both sequential and parallel processing. A number of proposals have been made for providing dynamic communications through configurable protocol systems. The goal of ADAPTIVE A Dynamically Assembled Protocol Transformation, Integration, and eValuation Environment <ref> [SBS93] </ref> is to provide automated support for composing lightweight and adaptive protocols. Their approach employs a collection of reusable "building block" protocol mechanisms that may be composed together automatically at runtime. This work emphasized the need for dynamically configurable protocols, but was limited to experimental results. <p> This functionality can vary in complexity from simple checksumming to the entire TCP protocol. The protocol functions together provide the "menu" from which an application can choose the services it desires. We envision communication services implemented by composing atomic single-function protocols from a "menu of functionality", as have others <ref> [OP92, ZST93, Haa91, PPVW93, SBS93] </ref>.
Reference: [ZDE + 93] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala. RSVP: </author> <title> A new resource reservation protocol. </title> <journal> IEEE Network, </journal> <pages> pages 8-18, </pages> <month> Sep </month> <year> 1993. </year>
Reference-contexts: The first solution is to use resource reservation throughout the network. The second solution is to provide applications with information regarding the state of the network and allow the applications to adapt to the available resources. RSVP <ref> [ZDE + 93] </ref> and the work done in the Tenet group [FV90] are approaches to reserving network resources. ATM is intended to provide some level of QoS management, but many current implementations do not support this functionality, and it is not clear when they will.
Reference: [ZST93] <author> Martina Zitterbart, Burkhard Stiller, and Ahmed N. Tantawy. </author> <title> A model for flexible high-performance communication subsystems. </title> <journal> jsac, </journal> <volume> 11(4), </volume> <month> May </month> <year> 1993. </year> <month> 19 </month>
Reference-contexts: This work differs from ours in that the connection manager, configuration manager and resource manager are built into the framework. Although these are important components of a dynamically configurable protocol systems, our implementation separates them out from the main functionality of providing configurable communication. In <ref> [ZST93] </ref>, Zitterbart, Stiller and Tantawy also describe a communication subsystem that allows applications to request individually tailored services. We provide results that demonstrate the necessity for this type of refinement. 2.2 Adaptable Applications Multimedia applications have stringent Quality of Service (QoS) requirements. <p> This functionality can vary in complexity from simple checksumming to the entire TCP protocol. The protocol functions together provide the "menu" from which an application can choose the services it desires. We envision communication services implemented by composing atomic single-function protocols from a "menu of functionality", as have others <ref> [OP92, ZST93, Haa91, PPVW93, SBS93] </ref>.
References-found: 17

