URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9262.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-tools.html
Root-URL: http://www.cs.purdue.edu
Email: fkumar,spafg@cs.purdue.edu  
Title: A Generic Virus Scanner in C  
Author: Sandeep Kumar Eugene H. Spafford 
Date: 17 September 1992  
Address: West Lafayette, IN 47907-1398  
Affiliation: The COAST Project Department of Computer Sciences Purdue University  
Pubnum: Technical Report CSD-TR-92-062  
Abstract: Computer viruses pose an increasing risk to computer data integrity. They cause loss of valuable data and cost an enormous amount in wasted effort in restoration/duplication of lost and damaged data. Each month many new viruses are reported. As the problem of viruses increases, we need tools to detect them and to eradicate them from our systems. This paper describes a virus detection tool: a generic virus scanner in C ++ with no inherent limitations on the file systems, file types, or host architectures that can be scanned. The tool is completely general and is structured in such a way that it can easily be augmented to recognize viruses across different system platforms with varied file types. The implementation defines an abstract C ++ class, VirInfo, which encapsulates virus features common to all scannable viruses. Subclasses of this abstract class may be used to define viruses that infect different machines and operating systems. The generality of the mechanism allows it to be used for other forms of scanning as well. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alfred V. Aho. </author> <title> Algorithms for finding patterns in strings. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, chapter 5, </booktitle> <pages> pages 256-300. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: This algorithm is similar to the Aho-Corasick algorithm <ref> [1] </ref>, but it has been extended for wildcard characters. ? match any nibble in the input stream %n skip 0-n nibbles in the input stream *n skip exactly n nibbles ** skip an arbitrary number, including 0 The algorithm considers every nibble position in the input stream as a possible beginning <p> Matching stops when the nibble pattern from the fixed position to the current position match any virus signature entirely. Backtracking can occur if signatures contain regular expression patterns ** & %n. Backtracking is currently implemented in a straightforward manner using recursion; failure pointers can be calculated, as explained in <ref> [1] </ref>. <p> With the failure function in place whenever there is a mismatch in the input stream when compared with the longest matching pattern, there will be a change in context and an attempt to restart the scan without rereading the input file. (See <ref> [1] </ref> for general details.) 18 * The pattern matcher can be extended on restricted forms of regular expres-sions specified earlier in the paper. We could use an AO fl search technique to expand the most promising node of the tree to find the virus.
Reference: [2] <author> Lisa J. Carnahan and John P. Wack. </author> <title> Computer Viruses and Related Threats: </title>
Reference-contexts: Furthermore, it can detect infections before they occur. Unfortunately, to always detect these infections, the sensitivity of the monitor must be set so high that it 3 <ref> [2] </ref> and [16] (for example) list practical steps that can be taken to educate users against viral infections. 3 may generate many false alarms from normal activity.
References-found: 2

