URL: ftp://ftp.cs.rochester.edu/pub/u/michael/ICCD96.ps.gz
Refering-URL: http://www.cs.rochester.edu/u/michael/
Root-URL: 
Email: fanguyen,arsharma,torrellag@csrd.uiuc.edu michael@cs.rochester.edu  
Title: The Augmint Multiprocessor Simulation Toolkit for Intel x86 Architectures  
Author: Anthony-Trung Nguyen Maged Michael Arun Sharma and Josep Torrellas 
Address: Urbana, IL 61081 Rochester, NY 14627  
Affiliation: Center for Supercomputing Research and Development Department of Computer Science University of Illinois at Urbana-Champaign University of Rochester  
Abstract: Most publicly-available simulation tools only simulate RISC architectures. These tools cannot capture the instruction mix and memory reference patterns of CISC architectures. In this paper, we present an overview of Augmint, an execution-driven multiprocessor simulation toolkit that fills this gap by supporting Intel x86 architectures. Augmint also supports trace-driven simulation for uniprocessors as well as multiprocessors, with minor effort on the part of simulator developers. Augmint runs m4-macro-extended C and C++ applications such as those in the SPLASH and SPLASH-2 benchmark suites. Augmint supports a thread-based programming model with shared global address space and private stack space. Augmint supports a simulator interface compatible with that of the MINT simulation toolkit for MIPS architectures, thus allowing the reuse of most architecture simulators written for MINT. Augmint simulations run on x86-based uniprocessor systems under UNIX or Windows NT 2 . The source code of Augmint is publicly available from http://www.csrd.uiuc.edu/iacoma/augmint. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. A. Brewer, C. N. Bellarocas, A. Colbrook, and W. E. Weihl. Proteus: </author> <title> A High-Performance Parallel-Architecture Simulator. </title> <type> Technical Report LCS/TR-516, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: Execution-driven simulations, instead of using traces, interleave the execution of the applications with the simulation of the target systems, thus allowing the target systems to influence the behavior of the applications, yielding more realistic results than trace-driven simulations. Most publicly-released execution-driven simulation tools support RISC architectures only <ref> [1, 4, 10, 12] </ref>. RISC-based execution-driven simulations do not capture the instruction mix and memory reference patterns of CISC architectures. Augmint was designed to fill this gap by providing a public simulation toolkit for Intel x86 architectures. <p> Second, the design and implementation had to be completed quickly to allow more time for developing non-trivial architecture simulators using Augmint. To accomplish the second goal, some parts of Augmint had to be built from existing simulation tools. The main candidates were Proteus <ref> [1] </ref>, Tango Lite [4], and MINT [11, 12], since they were publicly available. MINT and Tango Lite satisfied the first goal. However, we did not simply port either Tango Lite or MINT to the x86 architecture for several reasons.
Reference: [2] <author> S. Goldschmidt. </author> <title> Simulation of Multiprocessors: Accuracy and Performance. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: While traces can capture realistic application and system workloads, trace-driven simulation are often unable to model the changes in the behavior of parallel applications caused by differences in timing between the target (simulated) system and the system on which the traces were collected <ref> [2, 3] </ref>. Furthermore, a trace must contain a large number of memory references to minimize the effect of cold start and variations in workloads on the simulation result, thus requiring a very large storage space.
Reference: [3] <author> S. R. Goldschmidt and J. L. Hennessy. </author> <title> The Accuracy of Trace-Driven Simulations of Multiprocessors. </title> <type> Technical Report CSL-TR-92-546, </type> <institution> Stanford University, Computer Systems Laboratory, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: While traces can capture realistic application and system workloads, trace-driven simulation are often unable to model the changes in the behavior of parallel applications caused by differences in timing between the target (simulated) system and the system on which the traces were collected <ref> [2, 3] </ref>. Furthermore, a trace must contain a large number of memory references to minimize the effect of cold start and variations in workloads on the simulation result, thus requiring a very large storage space.
Reference: [4] <author> S. A. Herrod. </author> <title> Tango Lite: A Multiprocessor Simulation En vironment. </title> <type> Technical report, </type> <institution> Stanford University, Computer Systems Laboratory, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: Execution-driven simulations, instead of using traces, interleave the execution of the applications with the simulation of the target systems, thus allowing the target systems to influence the behavior of the applications, yielding more realistic results than trace-driven simulations. Most publicly-released execution-driven simulation tools support RISC architectures only <ref> [1, 4, 10, 12] </ref>. RISC-based execution-driven simulations do not capture the instruction mix and memory reference patterns of CISC architectures. Augmint was designed to fill this gap by providing a public simulation toolkit for Intel x86 architectures. <p> Second, the design and implementation had to be completed quickly to allow more time for developing non-trivial architecture simulators using Augmint. To accomplish the second goal, some parts of Augmint had to be built from existing simulation tools. The main candidates were Proteus [1], Tango Lite <ref> [4] </ref>, and MINT [11, 12], since they were publicly available. MINT and Tango Lite satisfied the first goal. However, we did not simply port either Tango Lite or MINT to the x86 architecture for several reasons.
Reference: [5] <author> D. Lenoski, J. Laudon, K. Gharachorloo, W.-D. Weber, A. Gupta, J. Hennessy, M. Horowitz, and M. Lam. </author> <title> The Stanford DASH Multiprocessor. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 63-79, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: For Tango Lite, we felt that the interface provided to simulator designers was not intuitive, and the scheduling facility is not general enough to allow the modeling of multiple outstanding memory references from a processor. For example, Dixielite, a simulator of the Stanford DASH project <ref> [5] </ref>, requires a task management module in assembly code to manage tasks in the memory hierarchy. We believed that a simulation tool must provide a clean interface and support all the scheduling requirements of both application threads and simulator activities. MINT satisfies both requirements.
Reference: [6] <editor> E. Lusk, R. Overbeek, et al. </editor> <title> Portable Programs for Parallel Processors. </title> <publisher> Holt, Rinehart, and Winston, Inc., </publisher> <address> New York, NY, </address> <year> 1987. </year>
Reference-contexts: There are several steps involved in building an Augmint-based executable, as shown in Figure 2. The application source code is preprocessed by an m4 macro processor to translate parallel constructs expressed as m4 macros <ref> [6] </ref> into events and context switches for Augmint.
Reference: [7] <author> A. Sharma. Augmint, </author> <title> a Multiprocessor Simulator. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1996. </year>
Reference-contexts: Augmint was designed to fill this gap by providing a public simulation toolkit for Intel x86 architectures. Augmint currently runs on x86-based uniprocessor systems under the So-laris 1 , Linux, and Windows NT 2 operating systems <ref> [7, 8] </ref>. In this paper, we present an overview of Augmint. We organize the presentation as follows. In section 2, we discuss the design issues and choices made while developing Augmint, and the similarities and differences between it and other simulation tools.
Reference: [8] <author> A. Sharma, A.-T. Nguyen, J. Torrellas, M. Michael, and J. Carbajal. Augmint: </author> <title> a Multiprocessor Simulation Environment for Intel x86 Architectures. </title> <type> Technical Report 1463, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: Augmint was designed to fill this gap by providing a public simulation toolkit for Intel x86 architectures. Augmint currently runs on x86-based uniprocessor systems under the So-laris 1 , Linux, and Windows NT 2 operating systems <ref> [7, 8] </ref>. In this paper, we present an overview of Augmint. We organize the presentation as follows. In section 2, we discuss the design issues and choices made while developing Augmint, and the similarities and differences between it and other simulation tools.
Reference: [9] <author> J. Singh, W.-D. Weber, and A. Gupta. </author> <title> SPLASH: Stanford Parallel Applications for Shared-Memory. In Computer Architecture News, </title> <month> March </month> <year> 1992. </year>
Reference-contexts: First, it must support widely available, non-trivial parallel applications such as those in the SPLASH <ref> [9] </ref> and SPLASH-2 [13] suites. This goal would allow researchers to run applications with Augmint immediately and focus most of the effort on developing architecture simulators. It would also provide additional means for validating the correctness and accuracy of Augmint by comparing its simulation results with those of other simulators. <p> Memory allocation functions and parallel constructs such as thread creation, locks, barriers, and semaphores are expressed in m4 macros in a fashion similar to applications in the SPLASH <ref> [9] </ref> and SPLASH-2 [13] suites. For example, a new thread is spawned with the m4 macro CREATE; a lock is acquired with LOCK; a barrier is called with BARRIER; and global shared memory is allocated with G MALLOC.
Reference: [10] <author> A. Srivastava and A. Eustace. </author> <title> ATOM: A System for Building Customized Program Analysis Tools. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 196-205, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Execution-driven simulations, instead of using traces, interleave the execution of the applications with the simulation of the target systems, thus allowing the target systems to influence the behavior of the applications, yielding more realistic results than trace-driven simulations. Most publicly-released execution-driven simulation tools support RISC architectures only <ref> [1, 4, 10, 12] </ref>. RISC-based execution-driven simulations do not capture the instruction mix and memory reference patterns of CISC architectures. Augmint was designed to fill this gap by providing a public simulation toolkit for Intel x86 architectures.
Reference: [11] <author> J. E. Veenstra and R. Fowler. </author> <title> MINT Tutorial and User Man ual. </title> <type> Technical Report 452, </type> <institution> University of Rochester, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Second, the design and implementation had to be completed quickly to allow more time for developing non-trivial architecture simulators using Augmint. To accomplish the second goal, some parts of Augmint had to be built from existing simulation tools. The main candidates were Proteus [1], Tango Lite [4], and MINT <ref> [11, 12] </ref>, since they were publicly available. MINT and Tango Lite satisfied the first goal. However, we did not simply port either Tango Lite or MINT to the x86 architecture for several reasons.
Reference: [12] <author> J. E. Veenstra and R. J. Fowler. MINT: </author> <title> A Front End for Efficient Simulation of Shared-Memory Multiprocessors. </title> <booktitle> In Proceedings of the Second International Workshop on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS '94), </booktitle> <pages> pages 201-207, </pages> <address> Durham, NC, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Execution-driven simulations, instead of using traces, interleave the execution of the applications with the simulation of the target systems, thus allowing the target systems to influence the behavior of the applications, yielding more realistic results than trace-driven simulations. Most publicly-released execution-driven simulation tools support RISC architectures only <ref> [1, 4, 10, 12] </ref>. RISC-based execution-driven simulations do not capture the instruction mix and memory reference patterns of CISC architectures. Augmint was designed to fill this gap by providing a public simulation toolkit for Intel x86 architectures. <p> Second, the design and implementation had to be completed quickly to allow more time for developing non-trivial architecture simulators using Augmint. To accomplish the second goal, some parts of Augmint had to be built from existing simulation tools. The main candidates were Proteus [1], Tango Lite [4], and MINT <ref> [11, 12] </ref>, since they were publicly available. MINT and Tango Lite satisfied the first goal. However, we did not simply port either Tango Lite or MINT to the x86 architecture for several reasons.
Reference: [13] <author> S. Woo, M. Ohara, E. Torrie, J. Singh, and A. Gupta. </author> <title> The SPLASH-2 Programs: Characterization and Methodological Considerations. </title> <booktitle> In 22nd International Symposium on Computer Architecture, </booktitle> <year> 1995. </year>
Reference-contexts: First, it must support widely available, non-trivial parallel applications such as those in the SPLASH [9] and SPLASH-2 <ref> [13] </ref> suites. This goal would allow researchers to run applications with Augmint immediately and focus most of the effort on developing architecture simulators. It would also provide additional means for validating the correctness and accuracy of Augmint by comparing its simulation results with those of other simulators. <p> Memory allocation functions and parallel constructs such as thread creation, locks, barriers, and semaphores are expressed in m4 macros in a fashion similar to applications in the SPLASH [9] and SPLASH-2 <ref> [13] </ref> suites. For example, a new thread is spawned with the m4 macro CREATE; a lock is acquired with LOCK; a barrier is called with BARRIER; and global shared memory is allocated with G MALLOC.
References-found: 13

