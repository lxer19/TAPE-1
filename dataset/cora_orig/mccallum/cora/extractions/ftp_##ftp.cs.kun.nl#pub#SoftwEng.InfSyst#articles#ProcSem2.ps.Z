URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/ProcSem2.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Understanding Process Structure Diagrams  Understanding process structure diagrams. Information Systems,  
Author: E. D. Falkenberg R van der Pols Th. P. van der Weide Falkenberg, R. van der Pols, and Th.P. van der Weide. 
Note: Published as: E.D.  
Date: July 22, 1993  September 1991.  
Pubnum: 16(4):417-428,  
Abstract: This paper is an attempt to sketch a framework for understanding process structure diagrams, as used for business process analysis, being one phase of information system design. Proper understanding of any description method can only be achieved by specifying all the concepts (objects, predicates) and axioms of this method in a precise, formal way. On this basis, different description methods can be properly compared, translated, and thus their similarities and/or differences better understood. In our paper, this approach is applied to two description methods for process structuring, Dataflow Diagrams and Activity Graphs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.D. Bruza and Th. P. van der Weide. </author> <title> The semantics of data flow diagrams. </title> <booktitle> In Proceedings of the International Conference on Management of Data, </booktitle> <pages> pages 66-78, </pages> <address> 1989. Hyderabad, India. </address>
Reference-contexts: The semantics describe the relation between inputs and outputs 11 of the system. A special problem in this context is that the behaviour of a diagram may be not deterministic. For details about these semantics functions the reader is referred to <ref> [1] </ref>. There a calculus is described which gives the possibility to translate a diagram into a semantic expression. Hierarchical decomposition is simply treated as a recursive call of this translation mechanism. The final semantic expression has the meaning of the elementary process components as parameters. <p> Hierarchical decomposition is simply treated as a recursive call of this translation mechanism. The final semantic expression has the meaning of the elementary process components as parameters. As an example of this mechanism, consider the Dataflow Diagram of figure 10, taken from <ref> [1] </ref>. The semantics of Dataflow Diagrams are described in terms of PT-nets, a variantion of Petri Nets (see [6]). For the Dataflow Diagram of figure 10 this results in the PT-net of figure 11, also taken from [1]. <p> example of this mechanism, consider the Dataflow Diagram of figure 10, taken from <ref> [1] </ref>. The semantics of Dataflow Diagrams are described in terms of PT-nets, a variantion of Petri Nets (see [6]). For the Dataflow Diagram of figure 10 this results in the PT-net of figure 11, also taken from [1]. Next, PT-nets are translated into algebraic path expressions, based on the language COSY ([4]), which as developed for specifying systems of concurrent processes sharing distributed systems of resources.
Reference: [2] <author> E. D. Falkenberg and Th. P. van der Weide. </author> <title> Formal description of the TOP model. </title> <type> Technical Report 88-01, Vakgroep Informatiesystemen, </type> <institution> University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1988. </year>
Reference-contexts: In this section we present a first-order description of Dataflow Diagrams. This gives us a formal mechanism for reasoning about those diagrams, without accidentally taking advantage of 2 properties which result from a specific representation. The style used is according to <ref> [2] </ref>. The term basic predicates is used to distinguish these from definable predicates. We base our axiomatic description of Dataflow Diagrams on [3] and [8].
Reference: [3] <author> C. Gane and T. Sarson. </author> <title> Structured System Analysis: Tools and techniques. IST Databooks. </title> <publisher> MacDonald Douglas Corporation, </publisher> <address> St. Louis, </address> <year> 1986. </year>
Reference-contexts: The style used is according to [2]. The term basic predicates is used to distinguish these from definable predicates. We base our axiomatic description of Dataflow Diagrams on <ref> [3] </ref> and [8]. Dataflow Diagrams are build around two sorts of objects: A the set of so-called activators F the set of so-called dataflows Dataflows represent information on their way through a Universe of Discourse (UffiD), going from one activator to another. Activators accept incoming dataflows, and produce outgoing dataflows.
Reference: [4] <author> P.E. Lauer, P.R. Torrigiani, and M.W Shields. </author> <title> Cosy a system specification language based on paths and processes. </title> <journal> Acta Informatica, </journal> <volume> 12 </volume> <pages> 109-158, </pages> <year> 1979. </year>
Reference: [5] <author> T. W. Olle, J. Hagelstein, I. G. McDonald, C. Roland, H. G. Sol, F. J.M. Van Assche, and A. A. Verrijn-Stuart. </author> <title> Information System Methodologies: A Framework for Understanding. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: In this paper we will address this question. We will use for that the book from IFIP WG8.1 TG CRIS (<ref> [5] </ref>), as an example and mark reference. For the purposes of this paper, we will refer to this publication [5] as the "CRIS book". In this paper, we will take the following approach for investigating and answering this question. We will first discuss a general manner of how systems of concepts should be defined and compared, a manner which guarantees that those concepts are really well understood (section 2).
Reference: [6] <author> Peterson. </author> <title> Petri Net Theory. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference-contexts: The final semantic expression has the meaning of the elementary process components as parameters. As an example of this mechanism, consider the Dataflow Diagram of figure 10, taken from [1]. The semantics of Dataflow Diagrams are described in terms of PT-nets, a variantion of Petri Nets (see <ref> [6] </ref>). For the Dataflow Diagram of figure 10 this results in the PT-net of figure 11, also taken from [1]. Next, PT-nets are translated into algebraic path expressions, based on the language COSY ([4]), which as developed for specifying systems of concurrent processes sharing distributed systems of resources.
Reference: [7] <author> R. van der Pols. </author> <title> Comparison of different information system techniques on a formal level. </title> <type> Master's thesis, </type> <institution> University of Nijmegen, </institution> <year> 1988. </year>
Reference-contexts: This is done by presenting a transformation from Dataflow Diagrams into Activity Graphs, and a transformation the other way around: : DFD ! AG We show that these transformations are not the inverse of each other. In <ref> [7] </ref> this is performed by the superset technique. This means the specification of an intermediate language, containing the elementary concepts of both Dataflow Diagrams and Activity Graphs. In this paper we present a direct transformation.
Reference: [8] <author> R. van der Pols. </author> <title> The SSAD handbook. </title> <type> Technical report, </type> <institution> Digital Equipment BV, Utrecht, </institution> <year> 1988. </year>
Reference-contexts: The style used is according to [2]. The term basic predicates is used to distinguish these from definable predicates. We base our axiomatic description of Dataflow Diagrams on [3] and <ref> [8] </ref>. Dataflow Diagrams are build around two sorts of objects: A the set of so-called activators F the set of so-called dataflows Dataflows represent information on their way through a Universe of Discourse (UffiD), going from one activator to another. Activators accept incoming dataflows, and produce outgoing dataflows.
Reference: [9] <editor> G. Scheschonk. Eine auf Petri-Netzen basierende Konstruktions, </editor> <title> Analyse und (Teil)Verificationsmethode zur Modellierungsunterstutzung bei der Entwicklung von Informa-tionssystemen. </title> <type> PhD thesis, </type> <institution> Berlin University of Technology, </institution> <year> 1984. </year>
Reference-contexts: We investigate the version as, for example, found in [10] (see also <ref> [9] </ref>). They are based upon the following two sorts of objects: A the set of so-called activities S the set of so-called states Activities and states are connected by so-called streams. Streams represent the flow of data between an activity and a state.
Reference: [10] <author> G. Scheschonk. </author> <title> Petri-Netze als formale Basis fur Informationssysteme. </title> <institution> Lecture Notes Technical University of Berlin, </institution> <year> 1984. </year> <month> 14 </month>
Reference-contexts: We investigate the version as, for example, found in <ref> [10] </ref> (see also [9]). They are based upon the following two sorts of objects: A the set of so-called activities S the set of so-called states Activities and states are connected by so-called streams. Streams represent the flow of data between an activity and a state. <p> Only activity decomposition is mentioned (BUSINESS ACTIVITY CONSISTS OF BUSINESS ACTIVITY, fig. 4.3, page 78). State decomposition is however a standard feature in most Activity Graph dialects, e.g. <ref> [10] </ref>. As with Dataflow Diagrams an Activity Graph should be compatible with its decompositions. We give the axioms for the decomposition of activities with respect to the destination of states.
References-found: 10

