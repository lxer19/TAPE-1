URL: http://www.cs.utah.edu/~mecklen/bedfellows/iwooos93.ps
Refering-URL: http://www.cs.utah.edu/~mecklen/publications.html
Root-URL: 
Email: E-mail: dbo@cs.utah.edu, mecklen@cs.utah.edu, kuramkot@cs.utah.edu  
Title: Strange Bedfellows: Issues in Object Naming Under Unix  
Author: Douglas B. Orr, Robert W. Mecklenburg and Ravindra Kuramkote 
Address: Salt Lake City, UT 84112 USA  
Affiliation: Department of Computer Science University of Utah  
Abstract: Naming plays a key role in the design of any system that exports services or resources. Object systems may export many different categories of names: instances, components of records, types, etc. Operating systems export the names of files, devices, and services. Integrating an object base with existing operating system facilities can improve accessibility of the object base resources. We consider the benefits and pitfalls of integrating an object base namespace with the Unix namespace. 1 
Abstract-found: 1
Intro-found: 1
Reference: [BL92] <author> Gilad Bracha and Gary Lindstrom. </author> <title> Modularity meets inheritance. </title> <booktitle> In Proc. International Conference on Computer Languages, </booktitle> <pages> pages 282-290, </pages> <address> San Francisco, CA, </address> <month> April 20-23 </month> <year> 1992. </year> <journal> IEEE Computer Society. </journal> <note> Also available as Technical Report UUCS-91-017. </note>
Reference-contexts: Object instances are uniquely named by object identifiers (OIDs). String names (symbolic labels) are mapped onto objects represented by OIDs. Those objects are instances of classes, described by named dossier objects. Dossiers describe object instance layout and specify, by name, a class implementation. Class implementations reside within modules <ref> [BL92] </ref>, which group and provide a naming scope for methods and static data elements. Finally, the MSO Object Manager is implemented under Unix, which maintains a namespace of files and devices of which the Object Manager implementation makes use.
Reference: [ea85] <author> R. Sandberg et al. </author> <title> Design and im-plementation of the sun network filesystem. </title> <booktitle> In Proceedings of the Summer 1985 USENIX Conference, </booktitle> <pages> pages 119-130, </pages> <address> Portland, 1985. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: Fitting within the Unix framework implies a restriction of functionality. The two mechanisms provided for integrating a client name provider into the Unix framework, the VFS file system switch [Kle86] and the NFS protocol <ref> [ea85] </ref>, support a fixed set of operations. The VFS switch operations are linked into the kernel and accessed through a virtual function table. The NFS operations (largely a subset of the VFS operations) are defined by a network protocol.
Reference: [Kle86] <author> Steven R. Kleiman. Vnodes: </author> <title> An architecture for multiple file system types in Sun UNIX. </title> <booktitle> In Proceedings of the Summer 1986 USENIX Conference, </booktitle> <pages> pages 238-247, </pages> <address> At-lanta, Georgia, 1986. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: Fitting within the Unix framework implies a restriction of functionality. The two mechanisms provided for integrating a client name provider into the Unix framework, the VFS file system switch <ref> [Kle86] </ref> and the NFS protocol [ea85], support a fixed set of operations. The VFS switch operations are linked into the kernel and accessed through a virtual function table. The NFS operations (largely a subset of the VFS operations) are defined by a network protocol.
Reference: [LK92] <author> Gary Lindstrom and Robert R. Kessler. </author> <title> Mach Shared Objects. </title> <booktitle> In Proceedings Software Technology Conference, </booktitle> <pages> pages 279-280, </pages> <address> Los Angeles, CA, </address> <month> April </month> <year> 1992. </year> <note> DARPA SISTO. </note>
Reference: [LLOW91] <author> Charles Lamb, Gordon Landis, Jack Oren-stein, and Dan Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The Object Store system incorporates the Unix namespace into its namespace and provides its own mechanisms to access operating system facilities <ref> [LLOW91] </ref>. Clearly, it is desirable, to the greatest extent possible, to avoid this sort of duplication of effort. While working within a single namespace largely achieves that goal. Using a single namespace is not without its limitations, of course.
Reference: [OM92] <author> Douglas B. Orr and Robert W. Mecklen-burg. </author> <title> OMOS | an object server for program execution. </title> <booktitle> In Proc. International Workshop on Object Oriented Operating Systems, </booktitle> <pages> pages 200-209, </pages> <address> Paris, </address> <month> September </month> <year> 1992. </year> <journal> IEEE Computer Society. </journal> <note> Also available as technical report UUCS-92-033. </note>
Reference: [PPT + 93] <author> Rob Pike, Dave Presotto, Ken Thompson, Howard Trickey, and Phil Winterbottom. </author> <title> The use of name spaces in plan 9. </title> <journal> ACM Operating Systems Review, </journal> <volume> 27(2) </volume> <pages> 72-75, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Naming plays an important role in modern systems design. Uniform naming of files and devices, long recognized as an important innovation, was first made widely available by the Unix 2 [RT78] operating system. Newer systems such as Plan 9 <ref> [PPT + 93] </ref> extend uniform naming to most system resources, including network connections, processes, etc. Object bases export names for a wide variety of smaller grain entities, such as instances, components of types, types, etc. <p> We implement version-ing as an extention to the standard Unix naming scheme, where /&lt;version&gt; is appended to the object name. This scheme has been implemented successfully in Apollo's Domain System Engineering Environment and <ref> [PPT + 93] </ref>. Other extensions might include appending an operation name, /&lt;op&gt; (e.g., /bytestream). These operations could be mapped to member function operations, to allow an object to export arbitrary operations via the namespace. 6 Issues and Limitations Adopting the Unix model is not without its problems.
Reference: [RT78] <author> D. M. Ritchie and K. Thompson. </author> <title> The UNIX time-sharing system. </title> <journal> The Bell System Technical Journal, </journal> <volume> 57(6) </volume> <pages> 1905-1930, </pages> <month> July/August </month> <year> 1978. </year>
Reference-contexts: 1 Introduction Naming plays an important role in modern systems design. Uniform naming of files and devices, long recognized as an important innovation, was first made widely available by the Unix 2 <ref> [RT78] </ref> operating system. Newer systems such as Plan 9 [PPT + 93] extend uniform naming to most system resources, including network connections, processes, etc. Object bases export names for a wide variety of smaller grain entities, such as instances, components of types, types, etc.
Reference: [Web93] <author> Neil Webber. </author> <title> Operating system support for portable filesystem extensions. </title> <booktitle> In Proceedings of the Winter 1993 USENIX Conference, </booktitle> <pages> pages 219-228, </pages> <address> San Diego, Cali-fornia, </address> <month> January 25-29, </month> <year> 1993. </year> <institution> Usenix Association. </institution>
Reference-contexts: In reality, there are a number of VFS interfaces, since most manufacturers have chosen to make their own extensions from the base VFS developed by Sun. In addition, since the manufacturers are the primary clients of VFS, the VFS API and implementation tend to change subtly without notice <ref> [Web93] </ref>. And, since not all manufacturers support dynamic linking of kernel modules it is sometimes necessary to specially configure and statically link new file system support into the kernel. An alternative option is extend the Unix namespace via servers implementing the NFS protocol.
Reference: [Wei85] <author> P. Weiss. </author> <title> Yellow Pages protocol specification. </title> <type> Technical report, </type> <institution> Sun Microsystems, Inc., </institution> <year> 1985. </year>
Reference-contexts: Objects in this namespace must be transferred to the local host via a manual mechanism before applications may use them. When Sun Microsystems added the Yellow Pages (later NIS) distributed database <ref> [Wei85] </ref> to complement their network file system, it was not integrated into the namespace. Sun was forced to provide alternate naming facilities (e.g., yp bind, yp match) and reimplement familiar utilities to work specifically within the domain of the Yellow Pages (e.g., ypcat, ypmatch).
References-found: 10

