URL: ftp://ftp.csd.uu.se/pub/papers/reports/0134.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: email voronkov@csd.uu.se  
Keyword: Rigid Variables Considered Harmful  
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department Uppsala University  
Note: Andrei Voronkov  Supported by a TFR grant  
Abstract: UPMAIL Technical Report No. 134 January 21, 1997 Revised May 4, 1997 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.B. Andrews. </author> <title> Theorem proving via general matings. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(2) </volume> <pages> 193-214, </pages> <year> 1981. </year>
Reference-contexts: Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method <ref> [1, 5] </ref>, model elimination [25], SLD-resolution [22, 2], SLO-resolution [15, 33]). Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). [29, 28] characterized these methods as global methods.
Reference: [2] <author> K. Apt and M. van Emden. </author> <title> Contributions to the theory of logic programming. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 29(3), </volume> <year> 1982. </year>
Reference-contexts: Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination [25], SLD-resolution <ref> [22, 2] </ref>, SLO-resolution [15, 33]). Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). [29, 28] characterized these methods as global methods.
Reference: [3] <author> K.R. Apt. </author> <title> Logic programming. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 10, </booktitle> <pages> pages 493-574. </pages> <publisher> Elsevier Science, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Indeed, if this is not true, we can replace ' I by ' I ^ ' J , then will be replaced by an equivalent formula. The notion of the least Herbrand model of a set of formulas is standard and can be found in e.g. [24] or <ref> [3] </ref>. Lemma 4.1 Let A be a set of ground atomic formulas and ' be a closed formula constructed from atomic formulas using only ^, _ and 9. Let M be the least Herbrand model of A. If M j= ', then A ` '. Proof.
Reference: [4] <editor> E.W. Beth. </editor> <booktitle> The Foundations of Mathematics. </booktitle> <publisher> North Holland, </publisher> <year> 1959. </year>
Reference-contexts: Variables in these methods are local to a clause (formula, sequent) and can be considered as universally quantified in this clause (respectively formula or sequent). [29, 28] characterized these methods as local methods (see also [30]). Methods of the second class use rigid variables (the tableau method <ref> [4] </ref>, the mating or the connection method [1, 5], model elimination [25], SLD-resolution [22, 2], SLO-resolution [15, 33]).
Reference: [5] <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(4) </volume> <pages> 633-645, </pages> <year> 1981. </year>
Reference-contexts: Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method <ref> [1, 5] </ref>, model elimination [25], SLD-resolution [22, 2], SLO-resolution [15, 33]). Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). [29, 28] characterized these methods as global methods.
Reference: [6] <author> W. Bibel and E. Eder. </author> <title> Methods and calculi for deduction. In D.M. </title> <editor> Gabbay, C.J. Hogger, and J.A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 1, chapter 3, </volume> <pages> pages 67-182. </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: In this paper, we shall call such methods rigid-variable methods. Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example [16, 17] (see also <ref> [6] </ref>). Recently, there have been proposals combining both kinds of methods in one calculus, for example the equality elimination method [11, 10, 12] or a modification of model elimination [31].
Reference: [7] <author> A. Degtyarev, Yu. Gurevich, P. Narendran, M. Veanes, and A. Voronkov. </author> <title> The decidability of simultaneous rigid E-unification with one variable. </title> <type> UPMAIL Technical Report 139, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: Some known results on SREU are the following. 4 A.Voronkov. Rigid variables considered harmful. * SREU is undecidable [13]. * SREU with ground left hand sides is undecidable [32]. * SREU with ground left hand sides and two variables is undecidable [36]. * SREU with one variable is DEXPTIME-complete <ref> [7] </ref>. The case of one variable is hardly useful in automated reasoning. When all function symbols have arity 1, Formula Instantiation is equivalent to monadic SREU, i.e. SREU in the signature where all function symbols have arity 1. The decidability of monadic SREU is an open problem.
Reference: [8] <author> A. Degtyarev, Yu. Gurevich, and A. Voronkov. </author> <title> Herbrand's theorem and equational reasoning: Problems and solutions. </title> <journal> In Bulletin of the European Association for Theoretical Computer Science, volume 60, </journal> <note> page ??? October 1996. The "Logic in Computer Science" column. </note>
Reference-contexts: Problem 1 (Herbrand Skeleton) Given a quantifier-free formula '(x) and a positive integer , are there term sequences t 1 ; : : : ; t n such that the formula '( t 1 ) _ : : : _ '( t ) is provable? <ref> [8] </ref> give an informal survey of several decision problems arising from the Herbrand theorem, including the Herbrand Skeleton problem. It is clear that Problem 1 is decidable if and only if the following problem is decidable.
Reference: [9] <author> A. Degtyarev, Yu. Matiyasevich, and A. Voronkov. </author> <title> Simultaneous rigid E-unification and related algorithmic problems. </title> <booktitle> In Eleventh Annual IEEE Symposium on Logic in Computer Science (LICS'96), </booktitle> <pages> pages 494-502, </pages> <address> New Brunswick, NJ, July 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: SREU in the signature where all function symbols have arity 1. The decidability of monadic SREU is an open problem. The following facts are known about monadic SREU. * Monadic simultaneous rigid E-unification with one function symbol is decidable (this fact has a rather non-trivial proof in <ref> [9] </ref>). * Monadic simultaneous rigid E-unification with more than one function symbol is equivalent to a non-trivial extension of word equations [20]. Some other decidable fragments of monadic SREU are considered in [20], but they are hardly of much use for automated reasoning.
Reference: [10] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for the inverse method and extension procedures. In C.S. </title> <editor> Mellish, editor, </editor> <booktitle> Proc. International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <volume> volume 1, </volume> <pages> pages 342-347, </pages> <address> Montreal, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example [16, 17] (see also [6]). Recently, there have been proposals combining both kinds of methods in one calculus, for example the equality elimination method <ref> [11, 10, 12] </ref> or a modification of model elimination [31]. Although there are many implementations of rigid-variable methods, there are almost no papers investigating the intrinsic complexity of problems arising in rigid-variable methods.
Reference: [11] <author> A. Degtyarev and A. Voronkov. </author> <title> General connections via equality elimination. </title> <editor> In M. De Glas and Z. Pawlak, editors, </editor> <booktitle> Second World Conference on the Fundamentals of Artificial Intelligence (WOCFAI-95), </booktitle> <pages> pages 109-120, </pages> <address> Paris, </address> <month> July </month> <year> 1995. </year> <pages> Angkor. </pages>
Reference-contexts: Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example [16, 17] (see also [6]). Recently, there have been proposals combining both kinds of methods in one calculus, for example the equality elimination method <ref> [11, 10, 12] </ref> or a modification of model elimination [31]. Although there are many implementations of rigid-variable methods, there are almost no papers investigating the intrinsic complexity of problems arising in rigid-variable methods. <p> Even if this problem has a negative solution, there are still at least two known ways for the use of rigid-variable methods for logic with equality. One way is to augment rigid-variable methods by universal-variable parts, as for example in <ref> [11, 12] </ref> or [31]. Another way is to use incomplete but terminating algorithms on step (2) of the Procedure, as demonstrated in [32] or [14]. Acknowledgments I thank Anatoli Degtyarev, Yuri Gurevich and Margus Veanes. Some ideas of this paper appeared as a result of our discussions. 10 A.Voronkov.
Reference: [12] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for the tableau method. </title> <editor> In J. Calmet and C. Limongelli, editors, </editor> <booktitle> Design and Implementation of Symbolic Computation Systems. International Symposium, DISCO'96, volume 1128 of Lecture Notes in Computer Science, </booktitle> <pages> pages 46-60, </pages> <address> Karlsruhe, Germany, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example [16, 17] (see also [6]). Recently, there have been proposals combining both kinds of methods in one calculus, for example the equality elimination method <ref> [11, 10, 12] </ref> or a modification of model elimination [31]. Although there are many implementations of rigid-variable methods, there are almost no papers investigating the intrinsic complexity of problems arising in rigid-variable methods. <p> Even if this problem has a negative solution, there are still at least two known ways for the use of rigid-variable methods for logic with equality. One way is to augment rigid-variable methods by universal-variable parts, as for example in <ref> [11, 12] </ref> or [31]. Another way is to use incomplete but terminating algorithms on step (2) of the Procedure, as demonstrated in [32] or [14]. Acknowledgments I thank Anatoli Degtyarev, Yuri Gurevich and Margus Veanes. Some ideas of this paper appeared as a result of our discussions. 10 A.Voronkov.
Reference: [13] <author> A. Degtyarev and A. Voronkov. </author> <title> The undecidability of simultaneous rigid E-unification. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 166(1-2):291-300, </address> <year> 1996. </year>
Reference-contexts: The decidability of these problems is equivalent to the decidability of SREU. Unfortunately, it turned out that SREU has almost no decidable fragments which are general enough. Some known results on SREU are the following. 4 A.Voronkov. Rigid variables considered harmful. * SREU is undecidable <ref> [13] </ref>. * SREU with ground left hand sides is undecidable [32]. * SREU with ground left hand sides and two variables is undecidable [36]. * SREU with one variable is DEXPTIME-complete [7]. The case of one variable is hardly useful in automated reasoning.
Reference: [14] <author> A. Degtyarev and A. Voronkov. </author> <title> What you always wanted to know about rigid E-unification. </title> <editor> In J.J. Alferes, L.M. Pereira, and E. Orlowska, editors, </editor> <booktitle> Logics in Artificial Intelligence. European Workshop, JELIA'96, volume 1126 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 50-69, </pages> <address> Evora, Portugal, </address> <month> September/October </month> <year> 1996. </year> <title> 11 Section 4. The Herbrand Skeleton Problem and intelligent strategies for multiplicity </title>
Reference-contexts: One way is to augment rigid-variable methods by universal-variable parts, as for example in [11, 12] or [31]. Another way is to use incomplete but terminating algorithms on step (2) of the Procedure, as demonstrated in [32] or <ref> [14] </ref>. Acknowledgments I thank Anatoli Degtyarev, Yuri Gurevich and Margus Veanes. Some ideas of this paper appeared as a result of our discussions. 10 A.Voronkov. Rigid variables considered harmful.
Reference: [15] <author> R. Demolombe. </author> <title> An efficient strategy for non-Horn deductive databases. </title> <editor> In G.X. Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 325-330. </pages> <publisher> Elsevier Science, </publisher> <year> 1989. </year>
Reference-contexts: Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination [25], SLD-resolution [22, 2], SLO-resolution <ref> [15, 33] </ref>). Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). [29, 28] characterized these methods as global methods. In this paper, we shall call such methods rigid-variable methods.
Reference: [16] <author> E. Eder. </author> <title> A comparison of the resolution calculus and the connection method, and a new calculus generalizing both methods. </title> <editor> In E. Borger, G. Jager, H. Kleine Buning, and M.M. Richter, editors, </editor> <booktitle> CSL'88 (Proc. 2nd Workshop on Computer Science Logic), volume 385 of Lecture Notes in Computer Science, </booktitle> <pages> pages 80-98. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In this paper, we shall call such methods rigid-variable methods. Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example <ref> [16, 17] </ref> (see also [6]). Recently, there have been proposals combining both kinds of methods in one calculus, for example the equality elimination method [11, 10, 12] or a modification of model elimination [31].
Reference: [17] <author> E. Eder. </author> <title> Consolution and its relation with resolution. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 132-136, </pages> <year> 1991. </year>
Reference-contexts: In this paper, we shall call such methods rigid-variable methods. Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example <ref> [16, 17] </ref> (see also [6]). Recently, there have been proposals combining both kinds of methods in one calculus, for example the equality elimination method [11, 10, 12] or a modification of model elimination [31].
Reference: [18] <author> J. Gallier, P. Narendran, D. Plaisted, and W. Snyder. </author> <title> Rigid E-unification: NP-completeness and applications to equational matings. </title> <journal> Information and Computation, </journal> 87(1/2):129-195, 1990. 
Reference-contexts: Rigid variables considered harmful. is effectively reducible to the formula instantiation problem for ground-negative formulas. Thus, the formula instantiation problem for ground-negative formulas is undecidable. 2 If we consider which systems of rigid equations arise from ground-negative formulas (e.g. according to the procedures of <ref> [18, 19] </ref>), we shall find out that these are precisely all systems of rigid equations with ground left hand sides.
Reference: [19] <author> J. Gallier, P. Narendran, S. Raatz, and W. Snyder. </author> <title> Theorem proving using equational matings and rigid E-unification. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(2) </volume> <pages> 377-429, </pages> <year> 1992. </year>
Reference-contexts: Rigid variables considered harmful. is effectively reducible to the formula instantiation problem for ground-negative formulas. Thus, the formula instantiation problem for ground-negative formulas is undecidable. 2 If we consider which systems of rigid equations arise from ground-negative formulas (e.g. according to the procedures of <ref> [18, 19] </ref>), we shall find out that these are precisely all systems of rigid equations with ground left hand sides.
Reference: [20] <author> Yu. Gurevich and A. Voronkov. </author> <title> Decision problems for logic with unary function symbols. </title> <note> In ICALP'97, page 12, 1997. To appear. </note>
Reference-contexts: The following facts are known about monadic SREU. * Monadic simultaneous rigid E-unification with one function symbol is decidable (this fact has a rather non-trivial proof in [9]). * Monadic simultaneous rigid E-unification with more than one function symbol is equivalent to a non-trivial extension of word equations <ref> [20] </ref>. Some other decidable fragments of monadic SREU are considered in [20], but they are hardly of much use for automated reasoning. Since predicate calculus is undecidable, the undecidability of SREU does not add much to the complexity of predicate calculus. <p> Monadic simultaneous rigid E-unification with one function symbol is decidable (this fact has a rather non-trivial proof in [9]). * Monadic simultaneous rigid E-unification with more than one function symbol is equivalent to a non-trivial extension of word equations <ref> [20] </ref>. Some other decidable fragments of monadic SREU are considered in [20], but they are hardly of much use for automated reasoning. Since predicate calculus is undecidable, the undecidability of SREU does not add much to the complexity of predicate calculus.
Reference: [21] <author> R. Hahnle, B. Beckert, and S. Gerberding. </author> <title> The many-valued tableau-based theorem prover 3 T A P . Technical Report 30/94, </title> <institution> Universitat Karlsruhe, Fakultat fur Informatik, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: However, essentially no formal results are known about such strategies. Existing systems based on rigid-variable methods use some heuristic methods for incrementing multiplicity and universal variables whenever possible (see e.g. <ref> [21] </ref>). In this section we show that there is an efficient formula-dependent strategy for multiplicity for the class of ground-negative formulas. In this section = 9x'(x) will denote a fixed ground-negative existential prenex formula. Let A 1 ; : : : ; A n be all its negative atomic subformulas.
Reference: [22] <author> R.A. Kowalski. </author> <title> Predicate logic as a programming language. </title> <booktitle> In Proc. IFIP'74, </booktitle> <pages> pages 569-574. </pages> <publisher> North Holland, </publisher> <year> 1974. </year>
Reference-contexts: Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination [25], SLD-resolution <ref> [22, 2] </ref>, SLO-resolution [15, 33]). Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). [29, 28] characterized these methods as global methods.
Reference: [23] <author> D. Kozen. </author> <title> Complexity of finitely presented algebras. </title> <booktitle> In Proc. of the 9th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 164-177, </pages> <address> New York, 1977. </address> <publisher> ACM. </publisher>
Reference-contexts: Ground-negative fragment of predicate calculus Section 3 Ground-negative fragment of predicate calculus A formula ' is called positive if all atomic subformulas of ' are positive. A closed formula ' is ground-negative iff all negative atomic subformulas of ' are ground. Kozen <ref> [23] </ref> proves the following result. Theorem 1 The class of provable formulas of the form A 1 ^ : : : ^ A n ', where A 1 ; : : : ; A n are ground atomic formulas and ' is a positive formula, is NP-complete.
Reference: [24] <author> J.W. Lloyd. </author> <booktitle> Foundations of Logic Programming (2nd edition). </booktitle> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Indeed, if this is not true, we can replace ' I by ' I ^ ' J , then will be replaced by an equivalent formula. The notion of the least Herbrand model of a set of formulas is standard and can be found in e.g. <ref> [24] </ref> or [3]. Lemma 4.1 Let A be a set of ground atomic formulas and ' be a closed formula constructed from atomic formulas using only ^, _ and 9. Let M be the least Herbrand model of A. If M j= ', then A ` '. Proof.
Reference: [25] <author> D.W. Loveland. </author> <title> Mechanical theorem proving by model elimination. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 15 </volume> <pages> 236-251, </pages> <year> 1968. </year>
Reference-contexts: Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination <ref> [25] </ref>, SLD-resolution [22, 2], SLO-resolution [15, 33]). Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). [29, 28] characterized these methods as global methods.
Reference: [26] <author> J.A. Makowski. </author> <title> Why Horn formulas matter in computer science: Initial structures and generic examples. </title> <editor> In H. Ehrig et al., editor, TAPSOFT'86, </editor> <booktitle> volume 185 of Lecture Notes in Computer Science, </booktitle> <pages> pages 374-387. </pages> <publisher> Springer Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Let M be the least Herbrand model of A. If M j= ', then A ` '. Proof. Straightforward, by induction on '. 2 A more general variant of Lemma 4.1 also holds, where A is a set of universal quasy-identities (see <ref> [26] </ref> or [35]). Lemma 4.2 Let ` . Then for every I 2 N there is a substitution such that E I ` ' I . Proof. Denote by M I the least Herbrand model of E I . We have M I j= .
Reference: [27] <author> S.Yu. Maslov. </author> <title> An inverse method for establishing deducibility of nonprenex formulas of the predicate calculus. </title> <editor> In J.Siekmann and G.Wrightson, editors, </editor> <booktitle> Automation of Reasoning (Classical papers on Computational Logic), </booktitle> <volume> volume 2, </volume> <pages> pages 48-54. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Introduction Automated reasoning methods for first-order classical logic can generally be divided in two classes. Methods of the first class use universal variables (resolution [34], the inverse method <ref> [27] </ref>). Variables in these methods are local to a clause (formula, sequent) and can be considered as universally quantified in this clause (respectively formula or sequent). [29, 28] characterized these methods as local methods (see also [30]).
Reference: [28] <author> S.Yu. Maslov. </author> <title> Theory of Deductive Systems and its Applications. </title> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Methods of the first class use universal variables (resolution [34], the inverse method [27]). Variables in these methods are local to a clause (formula, sequent) and can be considered as universally quantified in this clause (respectively formula or sequent). <ref> [29, 28] </ref> characterized these methods as local methods (see also [30]). Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination [25], SLD-resolution [22, 2], SLO-resolution [15, 33]). <p> Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). <ref> [29, 28] </ref> characterized these methods as global methods. In this paper, we shall call such methods rigid-variable methods. Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example [16, 17] (see also [6]).
Reference: [29] <author> S.Yu. Maslov, G.E. Mints, </author> <title> and V.P. Orevkov. Mechanical proof-search and the theory of logical deduction in the USSR. </title> <editor> In J.Siekmann and G.Wrightson, editors, </editor> <booktitle> Automation of Reasoning (Classical papers on Computational Logic), </booktitle> <volume> volume 1, </volume> <pages> pages 29-38. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Methods of the first class use universal variables (resolution [34], the inverse method [27]). Variables in these methods are local to a clause (formula, sequent) and can be considered as universally quantified in this clause (respectively formula or sequent). <ref> [29, 28] </ref> characterized these methods as local methods (see also [30]). Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination [25], SLD-resolution [22, 2], SLO-resolution [15, 33]). <p> Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). <ref> [29, 28] </ref> characterized these methods as global methods. In this paper, we shall call such methods rigid-variable methods. Both kinds of methods have their advantages and disadvantages which are well-known. There are papers comparing resolution and tableau-like calculi, for example [16, 17] (see also [6]).
Reference: [30] <author> G. Mints. </author> <title> Gentzen-type systems and resolution rules. Part I. Propositional logic. </title> <editor> In P. Martin-Lof and G. Mints, editors, </editor> <booktitle> COLOG-88, volume 417 of Lecture Notes in Computer Science, </booktitle> <pages> pages 198-231. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Methods of the first class use universal variables (resolution [34], the inverse method [27]). Variables in these methods are local to a clause (formula, sequent) and can be considered as universally quantified in this clause (respectively formula or sequent). [29, 28] characterized these methods as local methods (see also <ref> [30] </ref>). Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination [25], SLD-resolution [22, 2], SLO-resolution [15, 33]).
Reference: [31] <author> M. Moser, C. Lynch, and J. Steinbach. </author> <title> Model elimination with basic ordered paramodulation. </title> <type> Technical Report AR-95-11, </type> <institution> Fakultat fur Informatik, Technische Universitat Munchen, Munchen, </institution> <year> 1995. </year>
Reference-contexts: There are papers comparing resolution and tableau-like calculi, for example [16, 17] (see also [6]). Recently, there have been proposals combining both kinds of methods in one calculus, for example the equality elimination method [11, 10, 12] or a modification of model elimination <ref> [31] </ref>. Although there are many implementations of rigid-variable methods, there are almost no papers investigating the intrinsic complexity of problems arising in rigid-variable methods. In this paper we study several complexity problems related to rigid-variable methods on a decidable fragment of predicate calculus with equality. <p> Even if this problem has a negative solution, there are still at least two known ways for the use of rigid-variable methods for logic with equality. One way is to augment rigid-variable methods by universal-variable parts, as for example in [11, 12] or <ref> [31] </ref>. Another way is to use incomplete but terminating algorithms on step (2) of the Procedure, as demonstrated in [32] or [14]. Acknowledgments I thank Anatoli Degtyarev, Yuri Gurevich and Margus Veanes. Some ideas of this paper appeared as a result of our discussions. 10 A.Voronkov. Rigid variables considered harmful.
Reference: [32] <author> D.A. Plaisted. </author> <title> Special cases and substitutes for rigid E-unification. </title> <type> Technical Report MPI-I-95-2-010, </type> <institution> Max-Planck-Institut fur Informatik, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Unfortunately, it turned out that SREU has almost no decidable fragments which are general enough. Some known results on SREU are the following. 4 A.Voronkov. Rigid variables considered harmful. * SREU is undecidable [13]. * SREU with ground left hand sides is undecidable <ref> [32] </ref>. * SREU with ground left hand sides and two variables is undecidable [36]. * SREU with one variable is DEXPTIME-complete [7]. The case of one variable is hardly useful in automated reasoning. When all function symbols have arity 1, Formula Instantiation is equivalent to monadic SREU, i.e. <p> So we consider the Herbrand skeleton problem and the formula instantiation problem for ground-negative formulas. We assume that 9x'(x) is a fixed ground-negative existential prenex formula. Theorem 3 The formula instantiation problem for ground-negative formulas is undecidable. Proof. We shall use the result proved in <ref> [32] </ref> that SREU with ground left hand sides is undecidable. <p> One way is to augment rigid-variable methods by universal-variable parts, as for example in [11, 12] or [31]. Another way is to use incomplete but terminating algorithms on step (2) of the Procedure, as demonstrated in <ref> [32] </ref> or [14]. Acknowledgments I thank Anatoli Degtyarev, Yuri Gurevich and Margus Veanes. Some ideas of this paper appeared as a result of our discussions. 10 A.Voronkov. Rigid variables considered harmful.
Reference: [33] <author> A. Rajasekar. </author> <title> Semantics for Disjunctive Logic Programs. </title> <type> PhD thesis, </type> <institution> University of Maryland, </institution> <year> 1989. </year>
Reference-contexts: Methods of the second class use rigid variables (the tableau method [4], the mating or the connection method [1, 5], model elimination [25], SLD-resolution [22, 2], SLO-resolution <ref> [15, 33] </ref>). Variables in these methods are local to a set of clauses (formulas, sequents) and can be considered as universally quantified in this set of clauses (respectively formulas or sequents). [29, 28] characterized these methods as global methods. In this paper, we shall call such methods rigid-variable methods.
Reference: [34] <author> J.A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference-contexts: Introduction Automated reasoning methods for first-order classical logic can generally be divided in two classes. Methods of the first class use universal variables (resolution <ref> [34] </ref>, the inverse method [27]). Variables in these methods are local to a clause (formula, sequent) and can be considered as universally quantified in this clause (respectively formula or sequent). [29, 28] characterized these methods as local methods (see also [30]).
Reference: [35] <author> J.C. Sheperdson. </author> <title> Negation in logic programming. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 19-88. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year> <title> 12 A.Voronkov. Rigid variables considered harmful. </title>
Reference-contexts: Let M be the least Herbrand model of A. If M j= ', then A ` '. Proof. Straightforward, by induction on '. 2 A more general variant of Lemma 4.1 also holds, where A is a set of universal quasy-identities (see [26] or <ref> [35] </ref>). Lemma 4.2 Let ` . Then for every I 2 N there is a substitution such that E I ` ' I . Proof. Denote by M I the least Herbrand model of E I . We have M I j= .
Reference: [36] <author> M. Veanes. </author> <title> Uniform representation of recursively enumerable sets with simultaneous rigid E-unification. </title> <type> UPMAIL Technical Report 126, </type> <institution> Uppsala University, Computing Science Department, </institution> <year> 1996. </year>
Reference-contexts: Some known results on SREU are the following. 4 A.Voronkov. Rigid variables considered harmful. * SREU is undecidable [13]. * SREU with ground left hand sides is undecidable [32]. * SREU with ground left hand sides and two variables is undecidable <ref> [36] </ref>. * SREU with one variable is DEXPTIME-complete [7]. The case of one variable is hardly useful in automated reasoning. When all function symbols have arity 1, Formula Instantiation is equivalent to monadic SREU, i.e. SREU in the signature where all function symbols have arity 1.
Reference: [37] <author> M. Veanes. </author> <title> On Simultaneous Rigid E-Unification. </title> <type> PhD thesis, </type> <institution> Uppsala University, </institution> <year> 1997. </year>
Reference-contexts: We can prove that the same holds for arbitrary formula-independent strategies. To this end, we shall use a result proven in <ref> [37] </ref>. First, we cite a result by [38] which generalizes the undecidability of SREU. <p> This result has recently been improved in <ref> [37] </ref>, where they have shown that it also holds for ground-negative formulas: Theorem 6 The specialization of the Herbrand skeleton problem for ground-negative formulas and any fixed multiplicity is undecidable. Theorem 4 about the standard strategy for multiplicity can be generalized as follows.
Reference: [38] <author> P.J. Voda and J. Komara. </author> <title> On Herbrand skeletons. </title> <type> Technical report, </type> <institution> Institute of Informatics, Comenius University Bratislava, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: We show that the use of such methods can introduce essential complications even for this relatively simple fragment. We also demonstrate that methods with rigid variables can gain from the intelligent use of strategies for multiplicity. In addition, we show that a recent result of <ref> [38] </ref> on the Herbrand skeleton problem is related to an inadequate formulation of the problem, and pose a new open problem. 2 A.Voronkov. Rigid variables considered harmful. Section 2 Preliminaries A term or atomic formula is ground iff it has no variables. The symbol ` denotes provability in first-order logic. <p> We can prove that the same holds for arbitrary formula-independent strategies. To this end, we shall use a result proven in [37]. First, we cite a result by <ref> [38] </ref> which generalizes the undecidability of SREU. <p> problem for any fixed the following problem 1 : Given a quantifier-free formula '(x), are there term sequences t 1 ; : : : ; t such that the formula '( t 1 ) _ : : : _ '( t ) is provable? The following result is proved in <ref> [38] </ref>: Theorem 5 The specialization of the Herbrand skeleton problem for any fixed is undecidable. <p> Then continue similar to the proof of Theorem 4 but using Theorem 6 instead of Plaisted's result. 2 We shall consider an intelligent strategy for multiplicity in Section 4. 1 The Herbrand skeleton problem described in <ref> [38] </ref> is precisely this specialization. 7 Section 4. The Herbrand Skeleton Problem and intelligent strategies for multiplicity Section 4 The Herbrand Skeleton Problem and intelligent strategies for multiplicity Intelligent strategies for multiplicity have always been considered of paramount importance for rigid-variable methods.
References-found: 38

