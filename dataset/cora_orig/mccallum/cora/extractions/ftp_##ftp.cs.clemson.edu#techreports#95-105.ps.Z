URL: ftp://ftp.cs.clemson.edu/techreports/95-105.ps.Z
Refering-URL: http://www.cs.clemson.edu/html/research/techrpt.shtml
Root-URL: http://www.cs.clemson.edu
Email: malloy@cs.clemson.edu  
Title: A Comparison of Two Methods for Advancing Time In Parallel Discrete Event Simulation  
Author: Anthony P. Galluscio, John T. Douglass Brain A. Malloy and A. Joe Turner 
Keyword: modeling, event-driven, time-driven, methodology, conservative parallel distributed simulation.  
Address: Clemson, SC 29634  
Affiliation: Department of Computer Science Clemson University  
Abstract: In this paper, we compare the design and implementation of a parallel simulation of a traffic flow network using two different approaches: event-driven and time-driven. We begin by designing an efficient event-driven approach to model the traffic network; our design matches a time-driven model of the same traffic network[5]. Our experiments with the sequential implementation of the two approaches correlates with previous research [12]. Exploiting the look-ahead in the event-driven model, we design a conservative parallel implementation of the traffic flow problem where we obtain a maximum speedup of 9.27 using 16 Sun workstations. This speedup is appreciable since our parallel architecture is parallel virtual machine (PVM)[8], not known for fast communication, and we use wall-clock time as a measure of execution speed. We show that appreciable speedup can be achieved in parallelizing either the event-driven or time-driven approach. We also show that speedup is a misleading metric when used to compare the parallelizability of the two approaches. Parallel performance, as measured by speedup, may be better when the sequential performance is poor. For example, the time-driven implementation achieved better speedup (3.21 to 3.56) than the event-driven implementation (0.59 to 0.97) for few cars in the system; however the sequential time-driven implementation required longer to execute than the event-driven implementation for few cars in the system. Similarly, for many cars in the system, the event-driven implementation achieved better speedup (9.01 to 9.27) than the time-driven implementation (5.99 to 9.12). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Baezner, C. Rohs, and H. Jones. U. S. </author> <title> army modsim on jade's time warp. </title> <booktitle> Proceedings of the 1992 Winter Simulation Conference, </booktitle> <pages> pages 665-671, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: The optimistic approach, such as Time Warp [9], has shown to produce substantial speed up due to parallelism <ref> [10, 6, 1, 14] </ref>. An excellent variation of the Time Warp approach can be found in [11]. 2.2 Parallel Virtual Machine Parallel Virtual Machine (PVM) [8] is a software package 2 that provides support for the construction of a parallel computer using a network of workstations.
Reference: [2] <author> R. Brown. </author> <title> Calendar queues: A fast O(1) priority queue implementation for the simulation event set problem. </title> <journal> Communications of the ACM, </journal> <volume> 31(10) </volume> <pages> 1220-1227, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: the event-driven implementation has many events to process at each clock tick where each event entails an O (log n) priority queue operation. 4 Note that for the sparsest traffic flow of 100 cars, the 4 future work includes an event-driven implementation that uses the O (1) priority queue of <ref> [2] </ref> 14 event-driven implementation ran 3.7 times faster than the time-driven implementation and for the densest traffic flow of 3.5 million cars, the time-driven implementation ran 2.6 times faster than the event-driven implementation.
Reference: [3] <author> C. D. Carothers, R. M. Fujimoto, Y. B. Lin, and P. </author> <title> England. Distributed simulation of large scale pcs networks. </title> <booktitle> Proceedings of the Second International Workshop on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, </booktitle> <pages> pages 2-6, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: For 576 lights in the system, 24 lights are assigned to each processor. when communication is expensive, increasing the amount of work performed by each processor can offset the communication cost and result in improved speedup <ref> [3, 4, 5] </ref>. The graph in Figure 9 illustrates that the same increase in speedup was achieved in both models. 5 Conclusions In this paper, we have presented the design and implementation of a parallel simulation of a traffic flow network using two different approaches: event-driven and time-driven.
Reference: [4] <author> Phillip M. Dickens, Philip Heidelberger, and David M. Nicol. </author> <title> A distributed memory LAPSE: Parallel simulation of message-passing programs. </title> <booktitle> Proceedings of the Second International Workshop on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, </booktitle> <pages> pages 32-38, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: For 576 lights in the system, 24 lights are assigned to each processor. when communication is expensive, increasing the amount of work performed by each processor can offset the communication cost and result in improved speedup <ref> [3, 4, 5] </ref>. The graph in Figure 9 illustrates that the same increase in speedup was achieved in both models. 5 Conclusions In this paper, we have presented the design and implementation of a parallel simulation of a traffic flow network using two different approaches: event-driven and time-driven.
Reference: [5] <author> John T. Douglass and Brian A. Malloy. </author> <title> Using a shot clock to design an efficient parallel distributed simulation. </title> <booktitle> Proceedings of the 1994 Winter Simulation Conference, </booktitle> <pages> pages 1362-1369, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: We begin by designing an efficient event-driven approach to model the traffic flow network. Our design of the event-driven traffic model matches the design of a time-driven traffic model <ref> [5] </ref>. A parameter to the models is traffic flow, a measure of the average number of cars entering the system for each clock tick. In the sequential execution of the two models for sparse traffic flow, the event-driven implementation ran faster than the time-driven model. <p> For dense traffic flow patterns, the sequential execution of the time-driven model ran faster than the event driven model. This result correlates with previous research [12]. Using previously developed techniques to exploit the look-ahead in the traffic model <ref> [5] </ref>, we parallelize our 2 event-driven implementation of the traffic flow model. We use the conservative protocol for asynchronous execution using distributed local clocks. For the parallel executions, we obtain a maximum speedup of 9.27 using 16 Sun workstations. <p> However, subsequent TCP communication is far less expensive than UDP communication; thus, if communication occurs many times over the course of a program than TCP socket communication is significantly more efficient than UDP communication. The results of previous experimentation demonstrate the savings of repeated TCP communication <ref> [5] </ref>. The cost of the communication in PVM, regardless of the protocol used, is high. Since PVM is running on a network of machines the time needed to pass a message is many times that of messages being passed in a dedicated multiprocessor. <p> If a direction is visited a second time the construction is changed from SOURCE SINK to PASS WITHIN to signify that the streets in that direction connect two nodes local to this processor. The algorithm to construct the grids for the time-driven approach is different (see <ref> [5] </ref>), however, the net effect is exactly the same. From a logical perspective the models are identical in the way cars enter the simulation and travel within and between grids. A car enters the simulation at a construction site labeled SOURCE SINK. <p> For 576 lights in the system, 24 lights are assigned to each processor. when communication is expensive, increasing the amount of work performed by each processor can offset the communication cost and result in improved speedup <ref> [3, 4, 5] </ref>. The graph in Figure 9 illustrates that the same increase in speedup was achieved in both models. 5 Conclusions In this paper, we have presented the design and implementation of a parallel simulation of a traffic flow network using two different approaches: event-driven and time-driven.
Reference: [6] <author> R. M. Fujimoto. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 31-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Excellent surveys of these approaches can be found in <ref> [6] </ref> and [13]. In conservative simulations, a processor does not execute an event e at simulation time t e until all messages with time stamp less than t e have been processed. <p> The optimistic approach, such as Time Warp [9], has shown to produce substantial speed up due to parallelism <ref> [10, 6, 1, 14] </ref>. An excellent variation of the Time Warp approach can be found in [11]. 2.2 Parallel Virtual Machine Parallel Virtual Machine (PVM) [8] is a software package 2 that provides support for the construction of a parallel computer using a network of workstations.
Reference: [7] <author> Anthony P. Galluscio and Brian A. Malloy. </author> <title> The event-driven and time-driven approach to parallel simulation: A comparison. </title> <type> Technical Report TR-95-34, </type> <institution> Clemson University, </institution> <year> 1995. </year>
Reference-contexts: For details of our technique to model contention in the traffic network, see <ref> [7] </ref>. 3.1 Representation of the traffic network in the two models For both models, we represent the traffic network as a square mesh composed of streets running in the horizontal and vertical direction with traffic lights at the intersection of the streets. <p> Contention at the intersections is taken into account. For example, if a car is turning left into the path of a car going straight, then a contention mechanism inhibits one of the cars until the other car clears the intersection (see <ref> [7] </ref> for a detailed description of the contention mechanism). Both models allow cars to travel between grids using message passing in the distributed PVM environment.
Reference: [8] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM 3 user's guide and reference manual. </title> <institution> Oak Ridge National Laboratory, ORNL/TM-12-87:108, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The optimistic approach, such as Time Warp [9], has shown to produce substantial speed up due to parallelism [10, 6, 1, 14]. An excellent variation of the Time Warp approach can be found in [11]. 2.2 Parallel Virtual Machine Parallel Virtual Machine (PVM) <ref> [8] </ref> is a software package 2 that provides support for the construction of a parallel computer using a network of workstations. PVM supports a message passing communication paradigm that can accommodate more than 25 platforms, ranging from a Cray/YMP to an 80386 personal computer running the Unix operating system.
Reference: [9] <author> D. R. Jefferson. </author> <title> Virtual time. </title> <journal> Transactions on Programming Languages and Systems, </journal> <pages> pages 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: In optimistic simulations, a processor may execute events in any order and violations of the local causality constraint are corrected by rolling back the processor to a state where the constraint holds. The optimistic approach, such as Time Warp <ref> [9] </ref>, has shown to produce substantial speed up due to parallelism [10, 6, 1, 14].
Reference: [10] <author> V. Madisetti and D. Hardaker. </author> <title> Synchronization mechanisms for distributed event-driven computation. </title> <booktitle> ACM Transactions on Modeling and Computer Simulation, </booktitle> <pages> pages 12-51, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The optimistic approach, such as Time Warp [9], has shown to produce substantial speed up due to parallelism <ref> [10, 6, 1, 14] </ref>. An excellent variation of the Time Warp approach can be found in [11]. 2.2 Parallel Virtual Machine Parallel Virtual Machine (PVM) [8] is a software package 2 that provides support for the construction of a parallel computer using a network of workstations.
Reference: [11] <author> V. Madisetti, J. Walrand, and D. Messerschmitt. Wolf: </author> <title> A rollback algorithmn for optimistic distributed simulation systems. </title> <booktitle> Proceedings of the 1988 Winter Simulation Conference, </booktitle> <pages> pages 296-305, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: The optimistic approach, such as Time Warp [9], has shown to produce substantial speed up due to parallelism [10, 6, 1, 14]. An excellent variation of the Time Warp approach can be found in <ref> [11] </ref>. 2.2 Parallel Virtual Machine Parallel Virtual Machine (PVM) [8] is a software package 2 that provides support for the construction of a parallel computer using a network of workstations.
Reference: [12] <author> Richard E. Nance. </author> <title> On time flow mechanisms for discrete system simulation. </title> <journal> Management Science, </journal> <volume> 18(1) </volume> <pages> 59-73, </pages> <month> September </month> <year> 1971. </year>
Reference-contexts: In the sequential execution of the two models for sparse traffic flow, the event-driven implementation ran faster than the time-driven model. For dense traffic flow patterns, the sequential execution of the time-driven model ran faster than the event driven model. This result correlates with previous research <ref> [12] </ref>. Using previously developed techniques to exploit the look-ahead in the traffic model [5], we parallelize our 2 event-driven implementation of the traffic flow model. We use the conservative protocol for asynchronous execution using distributed local clocks. <p> For the graph of Figure 6, the solid line (diamond) and the dashed line (plus sign) compare the sequential execution times of the models; these lines illustrate the behavior of the two models for sparse and dense traffic flow and they correlate with the results of previous research <ref> [12] </ref>. For sparse traffic flow, where the numbers of cars generated varied from 100 to 100,000 cars, the event-driven implementation executed faster than the time-driven implementation. <p> Our experiments with the sequential implementation of the two approaches correlates with previous research <ref> [12] </ref>. We have shown that, for the traffic network simulation, implementations of both the event-driven approach and the time-driven approach can achieve appreciable speedup. This speedup can be achieved in a distributed parallel environment using a parallel architecture such as PVM, which extracts high cost for communication.
Reference: [13] <author> R. Righter and J. C. Walrand. </author> <title> Distributed simulation of discrete event systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1) </volume> <pages> 99-113, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: The approach chosen, when designing a model, should be based on the characteristics of the system under study. For example, having time progress in ticks may provide more control for such applications as on-line graphics or other applications where events happen regularly and in fixed increments <ref> [13] </ref>. However, it may be difficult to determine, in advance, the frequency of event occurrence in the simulated system. A further problem is that the sequential execution of the simulation may be so computationally intensive that the result is not computed in a timely manner. <p> Excellent surveys of these approaches can be found in [6] and <ref> [13] </ref>. In conservative simulations, a processor does not execute an event e at simulation time t e until all messages with time stamp less than t e have been processed.
Reference: [14] <author> B. W. Unger, J. Cleary, A. Dewar, and Z. Xiao. </author> <title> A multi-lingual optimistic distributed simulator. </title> <booktitle> Transactions of the Society for Computer Simulation, </booktitle> <pages> pages 121-152, </pages> <month> June </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: The optimistic approach, such as Time Warp [9], has shown to produce substantial speed up due to parallelism <ref> [10, 6, 1, 14] </ref>. An excellent variation of the Time Warp approach can be found in [11]. 2.2 Parallel Virtual Machine Parallel Virtual Machine (PVM) [8] is a software package 2 that provides support for the construction of a parallel computer using a network of workstations.
References-found: 14

