URL: http://www.eecs.umich.edu/~avigupta/papers/iccad98.ps
Refering-URL: http://www.eecs.umich.edu/~avigupta/phd.html
Root-URL: http://www.eecs.umich.edu
Note: 1. ABSTRACT  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> P. Barth, </author> <title> Logic Based 0-1 Constraint Programming, </title> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: Slot occupancy: We force the first slot in each P/N row to be filled with exactly one pair, and slots to be filled in a left-justified order, that is, in each row r, the slot s should be occupied before the slot s + 1. S X <ref> [p, 1, r] </ref>=1 " r rows (6) p pairs S X [p, s 1, r] S X [p, s, r] " r rows, (7) p pairs p pairs s slots 3. <p> right. merged [p i , p j ] (9) = or -Xor [p i , o i ] and Xor [p j , o j ]: " o i , o j orients such that share [p i , o i , p j , o j ]- = Xor <ref> [p i , 1] </ref> and or -Xor [p j , o j ]: " o j orients such that share [p i , 1, p j , o j ]- or Xor [p i , 2] and or -Xor [p j , o j ]: " o j orients such that <p> [p j , o j ]: " o i , o j orients such that share [p i , o i , p j , o j ]- = Xor [p i , 1] and or -Xor [p j , o j ]: " o j orients such that share <ref> [p i , 1, p j , o j ] </ref>- or Xor [p i , 2] and or -Xor [p j , o j ]: " o j orients such that share [p i , 2, p j , o j ]- or Xor [p i , 3] and or -Xor <p> If the difference in the number of legs is 1, then we set S Xor <ref> [p, o, 1] </ref> = 0 (over all o orients) for the centered position x = 1. The width W r of each row r, defined by Eq. (3), is modified in FCLIP to consider the leg count legs [p] of each pair p. <p> , x i ] and Xor [p j , o j , x j ] :" o i , o j , x i , x j such that share [p i , o i , x i , p j , o j , x j ]) = Xor <ref> [p i , 1, 1] </ref> and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 1, p j , o j , x j ])) or Xor [p i , 1, 2] and (or (Xor [p j <p> , o j , x j ]) = Xor [p i , 1, 1] and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 1, p j , o j , x j ])) or Xor <ref> [p i , 1, 2] </ref> and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 2, p j , o j , x j ])) or Xor [p i , 1, 3] and (or (Xor [p j <p> , o j , x j ])) or Xor [p i , 1, 2] and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 2, p j , o j , x j ])) or Xor <ref> [p i , 1, 3] </ref> and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 3, p j , o j , x j ])) or Xor [p i , 2, 1] and (or (Xor [p j <p> , o j , x j ])) or Xor [p i , 1, 3] and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 3, p j , o j , x j ])) or Xor <ref> [p i , 2, 1] </ref> and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 2, 1, p j , o j , x j ])) ... and (or (Xor [p j , o j , x j <p> , x j ]: " o j , x j , share [p i , 4, 3, p j , o j , x j ])) Equation (16) is a sum-of-products expression with product terms of the form Xor [p i , o i , x i ] and (Xor <ref> [p j , 1, 1] </ref> or Xor [p j , 1, 2] or Xor [p j , 1, 3] or Xor [p j , 2, 1] or ...) for every pair p i and p j of P/N pairs, and for every orientation o i of p i . <p> , x j , share [p i , 4, 3, p j , o j , x j ])) Equation (16) is a sum-of-products expression with product terms of the form Xor [p i , o i , x i ] and (Xor [p j , 1, 1] or Xor <ref> [p j , 1, 2] </ref> or Xor [p j , 1, 3] or Xor [p j , 2, 1] or ...) for every pair p i and p j of P/N pairs, and for every orientation o i of p i . <p> , 4, 3, p j , o j , x j ])) Equation (16) is a sum-of-products expression with product terms of the form Xor [p i , o i , x i ] and (Xor [p j , 1, 1] or Xor [p j , 1, 2] or Xor <ref> [p j , 1, 3] </ref> or Xor [p j , 2, 1] or ...) for every pair p i and p j of P/N pairs, and for every orientation o i of p i . <p> j , x j ])) Equation (16) is a sum-of-products expression with product terms of the form Xor [p i , o i , x i ] and (Xor [p j , 1, 1] or Xor [p j , 1, 2] or Xor [p j , 1, 3] or Xor <ref> [p j , 2, 1] </ref> or ...) for every pair p i and p j of P/N pairs, and for every orientation o i of p i . <p> when p i and p j cannot share their adjacent diffusions; merged [p i , p j ] will automatically be set to 1, if possible, when the model is Rows 1 numRows 1 2 maxSlots Slots Fig. 7: Rows, slots, and diffusion gaps in a 2-D cell layout nogap <ref> [1, 1] </ref> nogap [maxSlots1, 1] nogap [1, r] nogap [maxSlots1, r] nogap [s, 1] nogap [s, r] s s + 1 solved. <p> and p j cannot share their adjacent diffusions; merged [p i , p j ] will automatically be set to 1, if possible, when the model is Rows 1 numRows 1 2 maxSlots Slots Fig. 7: Rows, slots, and diffusion gaps in a 2-D cell layout nogap [1, 1] nogap <ref> [maxSlots1, 1] </ref> nogap [1, r] nogap [maxSlots1, r] nogap [s, 1] nogap [s, r] s s + 1 solved. <p> cannot share their adjacent diffusions; merged [p i , p j ] will automatically be set to 1, if possible, when the model is Rows 1 numRows 1 2 maxSlots Slots Fig. 7: Rows, slots, and diffusion gaps in a 2-D cell layout nogap [1, 1] nogap [maxSlots1, 1] nogap <ref> [1, r] </ref> nogap [maxSlots1, r] nogap [s, 1] nogap [s, r] s s + 1 solved. <p> [p i , p j ] will automatically be set to 1, if possible, when the model is Rows 1 numRows 1 2 maxSlots Slots Fig. 7: Rows, slots, and diffusion gaps in a 2-D cell layout nogap [1, 1] nogap [maxSlots1, 1] nogap [1, r] nogap [maxSlots1, r] nogap <ref> [s, 1] </ref> nogap [s, r] s s + 1 solved. <p> We evaluated several general-purpose ILP solver programs but found the specialized 0-1 solver OPBDP <ref> [1] </ref> to be best suited to our application. All FCLIP run times presented here have been obtained with OPBDP. Table 3 gives the minimum-width 2-D layouts obtained with FCLIP for the test circuits.
Reference: [2] <author> Cadence Design Systems, Inc., </author> <title> Virtuoso Layout Synthesizer Tutorial and Reference, </title> <type> 1992-94. </type>
Reference-contexts: orients such that share [p i , o i , p j , o j ]- = Xor [p i , 1] and or -Xor [p j , o j ]: " o j orients such that share [p i , 1, p j , o j ]- or Xor <ref> [p i , 2] </ref> and or -Xor [p j , o j ]: " o j orients such that share [p i , 2, p j , o j ]- or Xor [p i , 3] and or -Xor [p j , o j ]: " o j orients such that <p> , 1] and or -Xor [p j , o j ]: " o j orients such that share [p i , 1, p j , o j ]- or Xor [p i , 2] and or -Xor [p j , o j ]: " o j orients such that share <ref> [p i , 2, p j , o j ] </ref>- or Xor [p i , 3] and or -Xor [p j , o j ]: " o j orients such that share [p i , 3, p j , o j ]- or Xor [p i , 4] and or -Xor <p> If ps transistors have the same leg count, we set S Xor <ref> [p, o, 2] </ref> = S Xor [p, o, 3] = 0 (over all o orients) for the left (x = 2) and right-justified positions (x = 3). <p> , o j , x j ]) = Xor [p i , 1, 1] and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 1, p j , o j , x j ])) or Xor <ref> [p i , 1, 2] </ref> and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 2, p j , o j , x j ])) or Xor [p i , 1, 3] and (or (Xor [p j <p> , o j , x j ])) or Xor [p i , 1, 3] and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 3, p j , o j , x j ])) or Xor <ref> [p i , 2, 1] </ref> and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 2, 1, p j , o j , x j ])) ... and (or (Xor [p j , o j , x j <p> , x j , share [p i , 4, 3, p j , o j , x j ])) Equation (16) is a sum-of-products expression with product terms of the form Xor [p i , o i , x i ] and (Xor [p j , 1, 1] or Xor <ref> [p j , 1, 2] </ref> or Xor [p j , 1, 3] or Xor [p j , 2, 1] or ...) for every pair p i and p j of P/N pairs, and for every orientation o i of p i . <p> j , x j ])) Equation (16) is a sum-of-products expression with product terms of the form Xor [p i , o i , x i ] and (Xor [p j , 1, 1] or Xor [p j , 1, 2] or Xor [p j , 1, 3] or Xor <ref> [p j , 2, 1] </ref> or ...) for every pair p i and p j of P/N pairs, and for every orientation o i of p i . <p> If this difference is either zero or more than one, then only the centered position must be consideredno additional variables are required. However, for a difference in leg count of one, both the left and right-justified positions must be considered, which requires the variables Xor <ref> [p, o, 2] </ref> and Xor [p, o, 3], and increases the total number of variables for pair p by four (one for every orientation o orients). As is evident from Table 3, the run times with transistor folding equal those without folding in most cases.
Reference: [3] <author> S. Chakravarty, X. He, nd S. S. Ravi, </author> <title> Minimum area layout of series-parallel transistor networks is NP-hard, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 10, no. 6, </volume> <pages> pp. 770-782, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The cost function can be the cell area, its delay, or a combination of these. The constraints include bounds on width or height, aspect ratio, number of diffusion rows, or the maximum size of transistors. Since cell layout optimization is NP-hard <ref> [3] </ref>, any exact algorithm can, in the worst case, have an exponential run time. Therefore, most prior techniques for cell synthesis have avoided optimal algorithms in favor of faster, but less exact heuristic methods. <p> o j orients such that share [p i , 1, p j , o j ]- or Xor [p i , 2] and or -Xor [p j , o j ]: " o j orients such that share [p i , 2, p j , o j ]- or Xor <ref> [p i , 3] </ref> and or -Xor [p j , o j ]: " o j orients such that share [p i , 3, p j , o j ]- or Xor [p i , 4] and or -Xor [p j , o j ]: " o j orients such that <p> , 2] and or -Xor [p j , o j ]: " o j orients such that share [p i , 2, p j , o j ]- or Xor [p i , 3] and or -Xor [p j , o j ]: " o j orients such that share <ref> [p i , 3, p j , o j ] </ref>- or Xor [p i , 4] and or -Xor [p j , o j ]: " o j orients such that share [p i , 4, p j , o j ]- Finally, we ensure that for any given P/N pair, <p> If ps transistors have the same leg count, we set S Xor [p, o, 2] = S Xor <ref> [p, o, 3] </ref> = 0 (over all o orients) for the left (x = 2) and right-justified positions (x = 3). <p> , o j , x j ])) or Xor [p i , 1, 2] and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 2, p j , o j , x j ])) or Xor <ref> [p i , 1, 3] </ref> and (or (Xor [p j , o j , x j ]: " o j , x j , share [p i , 1, 3, p j , o j , x j ])) or Xor [p i , 2, 1] and (or (Xor [p j <p> , 4, 3, p j , o j , x j ])) Equation (16) is a sum-of-products expression with product terms of the form Xor [p i , o i , x i ] and (Xor [p j , 1, 1] or Xor [p j , 1, 2] or Xor <ref> [p j , 1, 3] </ref> or Xor [p j , 2, 1] or ...) for every pair p i and p j of P/N pairs, and for every orientation o i of p i . <p> However, for a difference in leg count of one, both the left and right-justified positions must be considered, which requires the variables Xor [p, o, 2] and Xor <ref> [p, o, 3] </ref>, and increases the total number of variables for pair p by four (one for every orientation o orients). As is evident from Table 3, the run times with transistor folding equal those without folding in most cases.
Reference: [4] <author> C. C. Chen and S. L. Chow, </author> <title> The Layout Synthesizer: An Automatic Netlist-to-Layout System, </title> <booktitle> Proc. 26th Design Automation Conf., </booktitle> <pages> pp. 232-238, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Finally, Section 6 demonstrates the versatility of FCLIPs ILP-based approach by incorporating and-stack clustering, a requirement in most practical designs. 3. TRANSISTOR FOLDING The assumed 2-D cell layout style is illustrated in Fig. 1, and generalizes the well studied 1-D style <ref> [4, 6, 9, 14] </ref>. 2-D cells contain multiple rows of P and N diffusions called P/N rows. The P and N transistors of a P/N row are grouped into P/N pairs using standard techniques [6]. <p> o j orients such that share [p i , 2, p j , o j ]- or Xor [p i , 3] and or -Xor [p j , o j ]: " o j orients such that share [p i , 3, p j , o j ]- or Xor <ref> [p i , 4] </ref> and or -Xor [p j , o j ]: " o j orients such that share [p i , 4, p j , o j ]- Finally, we ensure that for any given P/N pair, there can be at most one other pair placed on its immediate <p> , 3] and or -Xor [p j , o j ]: " o j orients such that share [p i , 3, p j , o j ]- or Xor [p i , 4] and or -Xor [p j , o j ]: " o j orients such that share <ref> [p i , 4, p j , o j ] </ref>- Finally, we ensure that for any given P/N pair, there can be at most one other pair placed on its immediate left or right side with diffusion abutment. <p> * indicates that OPBDP did not terminate after one hour. b.Circuit for z = (a.b.c + d.e.f + (g + h).(i + j)) Circuit # trans # nets # rows Wcell OPBDP time (secs) a P/N folding limits P/N folding limits None 10/5 5/5 5/3 None 10/5 5/5 5/3 D-latch <ref> [4] </ref> 1 10 12 21 21 0.4 10 1 5 3 4 4 8 8 1 1 2 3 None 10/10 10/5 5/5 None 10/10 10/5 5/5 Series parallel cct. b 1 11 17 20 26 0.1 95 0.3 1 3 5 7 8 10 7 41 68 96 None 10/5
Reference: [5] <author> R. Fourer, D. M Gay, and B. W. Kernighan, AMPL: </author> <title> A Modeling Language for Mathematical Programming, </title> <publisher> Duxbury Press/Wadsworth Publishing, </publisher> <address> Belmont, CA,1993. </address>
Reference-contexts: Experimental results. We now present the results of experiments that apply FCLIP to five representative CMOS circuits taken from various sources. All our ILP models were specified in AMPL (A Mathematical Programming Language) <ref> [5] </ref>, a high-level language that allows the models to be described in parameterized form, that is, independently of the input data used for a specific instance. We evaluated several general-purpose ILP solver programs but found the specialized 0-1 solver OPBDP [1] to be best suited to our application.
Reference: [6] <author> A. Gupta, S-C. The, and J. P. Hayes, XPRESS: </author> <title> A Cell Layout Generator with Integrated Transistor Folding, </title> <booktitle> Proc. European Design & Test Conf., </booktitle> <pages> pp. 393-400, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Finally, Section 6 demonstrates the versatility of FCLIPs ILP-based approach by incorporating and-stack clustering, a requirement in most practical designs. 3. TRANSISTOR FOLDING The assumed 2-D cell layout style is illustrated in Fig. 1, and generalizes the well studied 1-D style <ref> [4, 6, 9, 14] </ref>. 2-D cells contain multiple rows of P and N diffusions called P/N rows. The P and N transistors of a P/N row are grouped into P/N pairs using standard techniques [6]. <p> The P and N transistors of a P/N row are grouped into P/N pairs using standard techniques <ref> [6] </ref>. In dual CMOS circuits, the P and N transistors of each P/N pair share a common gate net. The basic assumptions of our 2-D style are summarized in Table 1 [7]; they are typical of those used in the layout of standard-cells and datapath bit-cells in current microprocessor designs. <p> A minimum-width 1-D placement without folding for the NMOS circuit of Fig. 3a is shown in Fig. 3b; it corresponds to the chain cover <ref> [6] </ref> -abcde, f-. If transistor c is folded into two legs, a diffusion gap is introduced in the chain abcde between c and d (Fig. 3c). However, if a different cover -abfde, c- is chosen, folding c does not introduce any new gaps. <p> In addition, folding affects the cell height since it reduces the height of each leg of the folded transistor and affects the routing within the cell. For 1-D layout, folding significantly reduces cell area and control of the cells aspect ratio <ref> [6] </ref>. <p> The third problemdynamic placement with static foldingis a generalization of the first. It fixes the number of legs for each transistor, and then determines their position and orientation to minimize cell area. For 1-D layout, this problem has been addressed by Gupta, et al. in the XPRESS <ref> [6] </ref> tool and by Malavasi and Pandini [12]. Finally, problem 4 is the most general in that it allows both placement and folding to be dynamic. Hence, any technique for this problem must simultaneously select the amount of folding for each transistor and determine its best placement and orientation.
Reference: [7] <author> A. Gupta and J. P. Hayes, CLIP: </author> <title> An Optimizing Layout Generator for Two-Dimensional CMOS Cells, </title> <booktitle> Proc. 34th Design Automation Conf., </booktitle> <pages> pp. 452-455, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: Recently, the authors successfully employed an exact optimization method, integer linear programming (ILP), in the CLIP technique to generate 2-D layouts of minimum width and height <ref> [7] </ref>. The layout problem is formulated as a 0-1 ILP problem, which is then solved using an off-the-shelf integer solver. CLIP provides optimum layouts for practical-sized cells. However, it assumes equal transistor sizes. Often, transistors must be individually sized to meet a circuits performance goals. <p> Hayes Dept. of EECS, University of Michigan 1301 Beal Avenue Ann Arbor, MI 48109 1-734-763-0386 jhayes@eecs.umich.edu must have their layouts optimized as much as possible. We begin by describing transistor folding and its advantages in Section 3. Section 4 reviews relevant aspects of the CLIP method <ref> [7] </ref> for minimizing 2-D cell width. Section 5 extends CLIP to FCLIP by integrating folding into ILP model formulation. Finally, Section 6 demonstrates the versatility of FCLIPs ILP-based approach by incorporating and-stack clustering, a requirement in most practical designs. 3. <p> The P and N transistors of a P/N row are grouped into P/N pairs using standard techniques [6]. In dual CMOS circuits, the P and N transistors of each P/N pair share a common gate net. The basic assumptions of our 2-D style are summarized in Table 1 <ref> [7] </ref>; they are typical of those used in the layout of standard-cells and datapath bit-cells in current microprocessor designs. In practical cell designs, the size of each transistor is determined individually to meet the circuits performance goals such as rise and fall delays [15]. <p> Moreover, as discussed earlier, determining the 2-D placement after folding has several area advantages over static placement. 4. WIDTH MINIMIZATION If W r is the width of the r-th P/N row, the 2-D cell-width minimization problem can be stated as follows <ref> [7] </ref>: Minimize the cell width W cell by placing the P/N pairs in a given number of rows such that the maximum width among all rows is minimized. <p> That is, minimize W cell W cell = max -W r : for each P/N row r = 1, 2, ...- (1) As discussed in <ref> [7] </ref>, W cell for a 2-D layout depends on several factors: diffusion sharing, inter-row connections that run vertically between P/N rows and so add to their width, and the diffusion type (P or N) placed at the bottom of the cell. <p> We now review the CLIP technique of <ref> [7] </ref> for minimizing 2-D cell width. CLIP uses integer linear programming (ILP) as its core optimization engine. <p> As shown in <ref> [7] </ref>, these constraints can be linearized without introducing any new variables. 5. WIDTH MINIMIZATION WITH FOLDING We now describe how the above width minimization model can be extended to incorporate transistor folding in FCLIP. Inputs and outputs. <p> The next section extends FCLIP to incorporate and-stack clustering, and shows that this can dramatically reduce run times and extend FCLIP to larger circuits. 6. AND-STACK CLUSTERING An and-stack <ref> [7] </ref> of size n is a group of n 2 transistors connected in series. For example, the N transistors N i , N i+1 , ..., N j in Fig. 9a form an and-stack. <p> In addition, the 2-D width minimization problem solved by FCLIP can be extended to address both width and height minimization based on the technique of CLIP described in <ref> [7] </ref>. Experimental Results. Table 4 presents results of FCLIP when and-stacking is used. As these results show, run times drop significantly with and-stacking. On the average, and-stacking reduces run times by one or two orders of magnitude. <p> Its efficient ILP model formulation and off-the-shelf ILP solver make FCLIP practical for relatively large circuits with up to 30 transistors. FCLIP can also be extended along the lines discussed in <ref> [7] </ref> to minimize cell height as well. The ILP-based approach of FCLIP is quite versatile, in that new design requirements such as and-stack clustering and leg-interlacing can be easily and efficiently accommodated.
Reference: [8] <author> T. W. Her, and D. F. Wong, </author> <title> Cell Area Minimization by Transistor Folding, </title> <booktitle> Proc. European Design Automation Conf., </booktitle> <pages> pp. 172-177, </pages> <year> 1993. </year>
Reference-contexts: Problem 2 also pre-specifies a transistor placement, but determines the number of legs for each transistor during the solution phase. The dynamic-programming technique of Her and Wong <ref> [8] </ref> solves this problem exactly for 1-D layouts and heuristically for 2-D layouts. Other heuristic techniques for this problem are included in the GENAC [14], LiB [10], and THEDA.P [11] 1-D cell synthesis tools.
Reference: [9] <author> D.D. Hill, Sc2: </author> <title> A Hybrid Automatic Layout System, </title> <booktitle> Proc. Intl Conf. on CAD, </booktitle> <pages> pp. 172-174, </pages> <month> Nov. </month> <year> 1985. </year>
Reference-contexts: Not only does FCLIP support 2-D layout, it is superior to prior folding techniques proposed for 1-D layout <ref> [9, 11, 14] </ref> which consider folding only after a transistor placement has been determined, and, as we show later, can produce suboptimal layouts. FCLIPs optimal method is particularly targeted towards the layout of standard-cells and datapath bit-cells for high-volume, high-performance microprocessor designs. <p> Finally, Section 6 demonstrates the versatility of FCLIPs ILP-based approach by incorporating and-stack clustering, a requirement in most practical designs. 3. TRANSISTOR FOLDING The assumed 2-D cell layout style is illustrated in Fig. 1, and generalizes the well studied 1-D style <ref> [4, 6, 9, 14] </ref>. 2-D cells contain multiple rows of P and N diffusions called P/N rows. The P and N transistors of a P/N row are grouped into P/N pairs using standard techniques [6]. <p> Thus, folding should be considered during the process of transistor placement, and not later, as is usually the case <ref> [9, 11, 14] </ref>. Four different folding problems can be defined: 1. Static placement and folding: Given a pre-specified 2-D transistor placement and limits on transistor size (folding limits), fold transistors in place and determine their orientation to preserve the placement and minimize area. 2. <p> 3 4 4 8 8 1 1 2 3 None 10/10 10/5 5/5 None 10/10 10/5 5/5 Series parallel cct. b 1 11 17 20 26 0.1 95 0.3 1 3 5 7 8 10 7 41 68 96 None 10/5 10/4 8/2 None 10/5 10/4 8/2 4-to-1 multi plexer <ref> [9] </ref> 1 14 17 24 38 50 7 137 2,261 3 5 6 8 12 31 13 41 36 None 20/5 10/5 5/5 None 20/5 10/5 5/5 8-input NAND 24 20 2 7 10 13 22 6 35 172 13 None 10/4 8 / 3 5 / 2 None 10/4 8/3 <p> 24 38 50 7 137 2,261 3 5 6 8 12 31 13 41 36 None 20/5 10/5 5/5 None 20/5 10/5 5/5 8-input NAND 24 20 2 7 10 13 22 6 35 172 13 None 10/4 8 / 3 5 / 2 None 10/4 8/3 5/2 Full adder <ref> [9] </ref> 28 17 2 8 10 17 18 6 20 1,335 2,122 Table 3: Minimum width layouts and run times obtained by FCLIP for various P and N folding limits placement of its constituent P/N pairs, and on the diffusion sharing between them.
Reference: [10] <author> Y-C Hsieh, et al., </author> <title> LiB: A CMOS Cell Compiler, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 10, </volume> <pages> pp. 994-1005, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: The dynamic-programming technique of Her and Wong [8] solves this problem exactly for 1-D layouts and heuristically for 2-D layouts. Other heuristic techniques for this problem are included in the GENAC [14], LiB <ref> [10] </ref>, and THEDA.P [11] 1-D cell synthesis tools. However, since problem 2 fixes the transistor ordering before folding, it can restrict the number of foldsto an odd number of legs to prevent chain splittingand produce suboptimal abutments. Figure 6a shows a layout with two chains placed with one diffusion gap.
Reference: [11] <author> C-Y Hwang, et al., </author> <title> An Efficient Layout Style for Two-metal CMOS Leaf Cells and its Automatic Synthesis, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 12, </volume> <pages> pp. 410-424, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Not only does FCLIP support 2-D layout, it is superior to prior folding techniques proposed for 1-D layout <ref> [9, 11, 14] </ref> which consider folding only after a transistor placement has been determined, and, as we show later, can produce suboptimal layouts. FCLIPs optimal method is particularly targeted towards the layout of standard-cells and datapath bit-cells for high-volume, high-performance microprocessor designs. <p> Thus, folding should be considered during the process of transistor placement, and not later, as is usually the case <ref> [9, 11, 14] </ref>. Four different folding problems can be defined: 1. Static placement and folding: Given a pre-specified 2-D transistor placement and limits on transistor size (folding limits), fold transistors in place and determine their orientation to preserve the placement and minimize area. 2. <p> The dynamic-programming technique of Her and Wong [8] solves this problem exactly for 1-D layouts and heuristically for 2-D layouts. Other heuristic techniques for this problem are included in the GENAC [14], LiB [10], and THEDA.P <ref> [11] </ref> 1-D cell synthesis tools. However, since problem 2 fixes the transistor ordering before folding, it can restrict the number of foldsto an odd number of legs to prevent chain splittingand produce suboptimal abutments. Figure 6a shows a layout with two chains placed with one diffusion gap.
Reference: [12] <author> E. Malavasi and D. Pandini, </author> <title> Optimum CMOS Stack Generation with Analog Constraints, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 14, </volume> <pages> pp. 107-122, </pages> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: It fixes the number of legs for each transistor, and then determines their position and orientation to minimize cell area. For 1-D layout, this problem has been addressed by Gupta, et al. in the XPRESS [6] tool and by Malavasi and Pandini <ref> [12] </ref>. Finally, problem 4 is the most general in that it allows both placement and folding to be dynamic. Hence, any technique for this problem must simultaneously select the amount of folding for each transistor and determine its best placement and orientation.
Reference: [13] <author> R. L. Maziasz and J. P. Hayes, </author> <title> Layout Minimization of CMOS Cells, </title> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: Since cell layout optimization is NP-hard [3], any exact algorithm can, in the worst case, have an exponential run time. Therefore, most prior techniques for cell synthesis have avoided optimal algorithms in favor of faster, but less exact heuristic methods. Maziasz and Hayes <ref> [13] </ref> have shown that for one-dimensional (1-D) cell layout, exact algorithms can be both computationally feasible and generate significantly better solutions than heuristic methods.
Reference: [14] <author> C.L. Ong, J.T. Li, and C.Y. Lo, GENAC: </author> <title> An Automatic Cell Synthesis Tool, </title> <booktitle> Proc. 26th Design Automation Conf., </booktitle> <pages> pp. 239-244, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Not only does FCLIP support 2-D layout, it is superior to prior folding techniques proposed for 1-D layout <ref> [9, 11, 14] </ref> which consider folding only after a transistor placement has been determined, and, as we show later, can produce suboptimal layouts. FCLIPs optimal method is particularly targeted towards the layout of standard-cells and datapath bit-cells for high-volume, high-performance microprocessor designs. <p> Finally, Section 6 demonstrates the versatility of FCLIPs ILP-based approach by incorporating and-stack clustering, a requirement in most practical designs. 3. TRANSISTOR FOLDING The assumed 2-D cell layout style is illustrated in Fig. 1, and generalizes the well studied 1-D style <ref> [4, 6, 9, 14] </ref>. 2-D cells contain multiple rows of P and N diffusions called P/N rows. The P and N transistors of a P/N row are grouped into P/N pairs using standard techniques [6]. <p> Thus, folding should be considered during the process of transistor placement, and not later, as is usually the case <ref> [9, 11, 14] </ref>. Four different folding problems can be defined: 1. Static placement and folding: Given a pre-specified 2-D transistor placement and limits on transistor size (folding limits), fold transistors in place and determine their orientation to preserve the placement and minimize area. 2. <p> The dynamic-programming technique of Her and Wong [8] solves this problem exactly for 1-D layouts and heuristically for 2-D layouts. Other heuristic techniques for this problem are included in the GENAC <ref> [14] </ref>, LiB [10], and THEDA.P [11] 1-D cell synthesis tools. However, since problem 2 fixes the transistor ordering before folding, it can restrict the number of foldsto an odd number of legs to prevent chain splittingand produce suboptimal abutments.
Reference: [15] <author> J-M. Shyu, A. Sangiovanni-Vincentelli, J. P. Fishburn, and A. E. Dunlop, </author> <title> Optimization-based Transistor Sizing, </title> <journal> IEEE J. of Solid-State Circuits, </journal> <volume> vol. 23, </volume> <pages> pp. 400-409, </pages> <month> Apr. </month> <year> 1988. </year>
Reference-contexts: In practical cell designs, the size of each transistor is determined individually to meet the circuits performance goals such as rise and fall delays <ref> [15] </ref>. The size of a transistor, illustrated in the cross-sectional view of Fig. 2a, is defined as the width of its P or N channel. Since transistors are placed horizontally, their sizes affect both cell width and height. Hence, non-uniformity in transistor size often leads to wasted cell area.

References-found: 15

