URL: http://www.daimi.aau.dk/~bromille/Papers/cpcpe.ps
Refering-URL: http://www.daimi.aau.dk/~bromille/Papers/index.html
Root-URL: http://www.daimi.aau.dk
Title: On the cell probe complexity of polynomial evaluation (note)  
Author: Peter Bro Miltersen 
Affiliation: Aarhus University and University of Warwick  
Abstract: We consider the cell probe complexity of the polynomial evaluation problem with preprocessing of coefficients, for polynomials of degree at most n over a finite field K. We show that the trivial cell probe algorithm for the problem is optimal if K is sufficiently large compared to n. As an application, we give a new proof of the fact that P 6= incr-TIME(o(log n= log log n)). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, </author> <title> A lower bound for finding predecessors in Yao's cell probe model, </title> <note> Combinatorica 8 (1988) 235-247. </note>
Reference-contexts: O (jSj)) cells, each containing an element from f1; : : : ; mg, so that membership queries "Is i 2 S?" [13, 5] or rank queries "What is jS " f1; : : : ; igj?" <ref> [2, 1, 9] </ref> can be answered efficiently. <p> We give a completely different (and somewhat easier) proof of this fact, by giving a lower bound for a polynomial time problem related to polynomial evaluation. 3 2 The proof The proof, which is not difficult, uses the technique of reduction from communication problems (first used implicitly by Ajtai <ref> [1] </ref>, made explicit by Miltersen [8, 9]), together with standard techniques in communication complexity [12], modified to non-binary protocols. In the following, K is a fixed finite field with jKj = k.
Reference: [2] <author> M. Ajtai, M. Fredman, J. Komlos, </author> <title> Hash functions for priority queues, </title> <booktitle> in: Proc. 24th Ann. IEEE Symp. on Foundations of Computer Science (1983) 299-303. </booktitle>
Reference-contexts: O (jSj)) cells, each containing an element from f1; : : : ; mg, so that membership queries "Is i 2 S?" [13, 5] or rank queries "What is jS " f1; : : : ; igj?" <ref> [2, 1, 9] </ref> can be answered efficiently.
Reference: [3] <author> D. Angluin, L.G. Valiant, </author> <title> Fast probabilistic algorithms for Hamiltonian circuits and matchings, </title> <journal> J. Comput. System Sci. </journal> <month> 18 </month> <year> (1979) </year> <month> 155-193. </month>
Reference-contexts: Many naturally occurring problems, for instance dynamic graph problems, can be phrased as dynamic language membership problems. For a time bound t (n), the complexity class incr-TIME (t (n)) is the class of languages L for which L-MEMBER has an implementation on a random access computer <ref> [3] </ref>, i.e. a unit cost random access machine where each machine word stores an integer, polynomially bounded in n, so that init (n) can be done in time n O (1) and change and query can be done in time t (n) (with n = jxj).
Reference: [4] <author> E.G. Belaga, </author> <title> Evaluation of polynomials of one variable with preliminary processing of the coefficients, </title> <type> Problemy Kibernet. </type> <month> 5 </month> <year> (1961) </year> <month> 7-15. </month>
Reference-contexts: This is not optimal for K = R: Pan [11] gives a scheme with complexity b 3n 2 c + 2 for K = R. His scheme is almost optimal, Belaga <ref> [4] </ref> shows that any correct scheme for K = R has complexity at least b 3n 2 c + 1. For a survey of these, and similar, more recent, results, see Knuth [7, pp. 470-479]. In this paper we consider the problem for K being a finite field.
Reference: [5] <author> M.L. Fredman, J. Komlos, E. Szemeredi, </author> <title> Storing a sparse table with O(1) worst case access time, </title> <journal> J. Assoc. Comput. Mach. </journal> <month> 31 </month> <year> (1984) </year> <month> 538-544. </month>
Reference-contexts: O (jSj)) cells, each containing an element from f1; : : : ; mg, so that membership queries "Is i 2 S?" <ref> [13, 5] </ref> or rank queries "What is jS " f1; : : : ; igj?" [2, 1, 9] can be answered efficiently. <p> Let these indices be a 1 ; a 2 ; : : : ; a r and let the new content of a i be d i . We need the following fact, due to Fredman, Komlos and Szemeredi <ref> [5] </ref>: * Let m be an integer.
Reference: [6] <author> M.L. Fredman, </author> <title> M.E. Saks, The cell probe complexity of dynamic data structures, </title> <booktitle> in: Proc. 21st Ann. ACM Symp. on Theory of Computing (1989) 345-354. </booktitle>
Reference-contexts: It follows from a lower bound on dynamic prefix problems by Fredman and Saks <ref> [6] </ref>, using the time stamp method, that P 6= incr-TIME (o (log n= log log n)). <p> This would give a lower bound in a stronger model, the decision assignment tree model <ref> [6, 9] </ref>). We now describe a cell probe algorithm (OE; fT a g) for the problem of evaluating polynomials in Z p [X] of degree at most dlog pe 2 . Let f (X) be such a polynomial.
Reference: [7] <author> D.E. Knuth, </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. II: </volume> <publisher> Seminumerical Algorithms (Addison-Wesley, </publisher> <address> Reading, MA, </address> <publisher> 2nd ed., </publisher> <year> 1980). </year>
Reference-contexts: His scheme is almost optimal, Belaga [4] shows that any correct scheme for K = R has complexity at least b 3n 2 c + 1. For a survey of these, and similar, more recent, results, see Knuth <ref> [7, pp. 470-479] </ref>. In this paper we consider the problem for K being a finite field. Since the lower bounds above are proved in the context of algebraic independence theory, there is no way to extend them to this situation.
Reference: [8] <author> P.B. Miltersen, </author> <title> The bit probe complexity measure revisited, </title> <booktitle> in: Proc. 10th Symp. on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> 665 (Springer, </publisher> <address> Berlin, </address> <year> 1993) </year> <month> 662-671. </month>
Reference-contexts: We conjecture that the lower bound holds for smaller values of jKj as well, i.e. that polynomial evaluation in general is access infeasible <ref> [8] </ref>. As an application, we consider lower bounds for dynamic language membership problems. The class of dynamic language membership problems is a general class of dynamic problems, considered by Miltersen, Subramanian, Vitter and Tamassia [10]. A problem in this class is given by a language L f0; 1g fl . <p> different (and somewhat easier) proof of this fact, by giving a lower bound for a polynomial time problem related to polynomial evaluation. 3 2 The proof The proof, which is not difficult, uses the technique of reduction from communication problems (first used implicitly by Ajtai [1], made explicit by Miltersen <ref> [8, 9] </ref>), together with standard techniques in communication complexity [12], modified to non-binary protocols. In the following, K is a fixed finite field with jKj = k.
Reference: [9] <author> P.B. Miltersen, </author> <title> Lower bounds for Union-Split-Find related problems on random access machines, to appear in: </title> <booktitle> Proc. 26th Ann. ACM Symp. on Theory of Computing (1994). </booktitle>
Reference-contexts: O (jSj)) cells, each containing an element from f1; : : : ; mg, so that membership queries "Is i 2 S?" [13, 5] or rank queries "What is jS " f1; : : : ; igj?" <ref> [2, 1, 9] </ref> can be answered efficiently. <p> different (and somewhat easier) proof of this fact, by giving a lower bound for a polynomial time problem related to polynomial evaluation. 3 2 The proof The proof, which is not difficult, uses the technique of reduction from communication problems (first used implicitly by Ajtai [1], made explicit by Miltersen <ref> [8, 9] </ref>), together with standard techniques in communication complexity [12], modified to non-binary protocols. In the following, K is a fixed finite field with jKj = k. <p> Otherwise x 2 L if and only if f (a) is positive. Clearly, L 2 P . Theorem 5 L 62 incr-TIME (o ( log n log log n )). Proof The method is similar to the lower bound proof for the Union-Split-Find problem in <ref> [9] </ref>. Suppose an implementation on a random access computer of the dynamic language membership problem for L is given, with the complexity of the change and query operations being o (log n= log log n). Let p be sufficiently large prime. Perform the init (pdlog pe + p) operation. <p> This would give a lower bound in a stronger model, the decision assignment tree model <ref> [6, 9] </ref>). We now describe a cell probe algorithm (OE; fT a g) for the problem of evaluating polynomials in Z p [X] of degree at most dlog pe 2 . Let f (X) be such a polynomial.
Reference: [10] <author> P.B. Miltersen, S. Subramanian, J.S. Vitter, R. Tamassia, </author> <title> Complexity models for incremental computation, </title> <note> Theoretical Computer Science, to appear. </note>
Reference-contexts: As an application, we consider lower bounds for dynamic language membership problems. The class of dynamic language membership problems is a general class of dynamic problems, considered by Miltersen, Subramanian, Vitter and Tamassia <ref> [10] </ref>. A problem in this class is given by a language L f0; 1g fl . We are supposed to implement a data type L-MEMBER containing a string x 2 f0; 1g fl with three kinds of operations: * init (n).
Reference: [11] <author> V. Ya. Pan, </author> <title> Methods of computing values of polynomials, </title> <journal> Russian Math. </journal> <note> Surveys 21 (1) (1966) 105-136. </note>
Reference-contexts: This is not optimal for K = R: Pan <ref> [11] </ref> gives a scheme with complexity b 3n 2 c + 2 for K = R. His scheme is almost optimal, Belaga [4] shows that any correct scheme for K = R has complexity at least b 3n 2 c + 1.
Reference: [12] <author> A.C. Yao, </author> <title> Some complexity questions related to distributive computing, </title> <booktitle> in: Proc. 11th Ann. ACM Symp. on Theory of Computing (1979) 209-213. </booktitle>
Reference-contexts: giving a lower bound for a polynomial time problem related to polynomial evaluation. 3 2 The proof The proof, which is not difficult, uses the technique of reduction from communication problems (first used implicitly by Ajtai [1], made explicit by Miltersen [8, 9]), together with standard techniques in communication complexity <ref> [12] </ref>, modified to non-binary protocols. In the following, K is a fixed finite field with jKj = k.
Reference: [13] <author> A.C. Yao, </author> <title> Should tables be sorted?, </title> <journal> J. Assoc. Comput. Mach. </journal> <month> 28 </month> <year> (1981) </year> <month> 615-628. </month>
Reference-contexts: O (jSj)) cells, each containing an element from f1; : : : ; mg, so that membership queries "Is i 2 S?" <ref> [13, 5] </ref> or rank queries "What is jS " f1; : : : ; igj?" [2, 1, 9] can be answered efficiently.
References-found: 13

