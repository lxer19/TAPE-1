URL: ftp://ftp.win.tue.nl/pub/techreports/josb/dtpaeps.tex.ps
Refering-URL: http://www.win.tue.nl/inf/onderzoek/publicaties.html
Root-URL: http://www.win.tue.nl
Email: josb@win.tue.nl, janjoris@bell-labs.com  
Title: Discrete-Time Process Algebra with Empty Process  
Author: J. C. M. Baeten and J. J. Vereijken 
Note: Note: This article is an extended abstract of chapter 6 of the dissertation of the second author [20].  
Address: P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands  
Affiliation: Department of Computing Science, Eindhoven University of Technology,  
Abstract: We incorporate the empty process into the theory of discrete time process algebra. This adds expressive power, useful for specification purposes, and is also needed when providing formal semantics for languages as SDL or MSC. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. C. M. BAETEN AND J. A. BERGSTRA. </author> <title> Process algebra with a zero object. </title> <booktitle> In [8], </booktitle> <pages> pages 83-98, </pages> <year> 1990. </year>
Reference-contexts: To name a few variants (in order of increasing degree of catastrophe): classic (ffi, see e.g. BAETEN AND WEIJLAND [10]), immediate ( ffi, see BAETEN AND BERGSTRA [4, 5]), inconsistent state (?, see BAE TEN AND BERGSTRA [6]), and true zero (0, see BAETEN AND BERGSTRA <ref> [1, 2] </ref>). A similar observation holds for the implementation of the concept choice: half a dozen versions, ranging from completely deterministic to completely non-deterministic have been described. It appears that the concept empty process is different; it leaves little room for differing implementations.
Reference: [2] <author> J. C. M. BAETEN AND J. A. BERGSTRA. </author> <title> On sequential composition, action prefixes and process prefix. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6(3) </volume> <pages> 250-268, </pages> <year> 1994. </year>
Reference-contexts: To name a few variants (in order of increasing degree of catastrophe): classic (ffi, see e.g. BAETEN AND WEIJLAND [10]), immediate ( ffi, see BAETEN AND BERGSTRA [4, 5]), inconsistent state (?, see BAE TEN AND BERGSTRA [6]), and true zero (0, see BAETEN AND BERGSTRA <ref> [1, 2] </ref>). A similar observation holds for the implementation of the concept choice: half a dozen versions, ranging from completely deterministic to completely non-deterministic have been described. It appears that the concept empty process is different; it leaves little room for differing implementations. <p> Finally, we had a few other design goals of lesser importance; we wanted that the existing smaller process algebras (without empty process, without time, or without either) could be embedded in the new process algebras in a simple way (i.e., in the terminology of BAETEN AND BERGSTRA <ref> [2] </ref>, the old process algebras should be Subalgebras of a Reduced Model (SRM's) of the new process algebras). 3 Discrete-Time Process Algebra without Empty Process We start by recalling the definition of the simplest discrete-time process algebra without empty process, BPA drt -ID, from BAETEN AND BERGSTRA [3, 4, 5], BAETEN
Reference: [3] <author> J. C. M. BAETEN AND J. A. BERGSTRA. </author> <title> Discrete time process algebra with abstraction. </title> <booktitle> In [17], </booktitle> <pages> pages 1-15, </pages> <year> 1995. </year>
Reference-contexts: On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]), and a case study has been made (BOS AND RENIERS [11]). Given the fact that both extensions, empty process and discrete time, have been researched very well, it seemed reasonable to study how these two extensions go together. <p> BAETEN AND BERGSTRA [2], the old process algebras should be Subalgebras of a Reduced Model (SRM's) of the new process algebras). 3 Discrete-Time Process Algebra without Empty Process We start by recalling the definition of the simplest discrete-time process algebra without empty process, BPA drt -ID, from BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]. It concerns a discrete-time process algebra, thus time is divided into slices. Further, this is a relative time process algebra, so the timing of an action is measured with respect to the previous action. <p> By projecting a onto a" we do get a proper embedding, as BPA drt;" -ID ` a" a""" does indeed hold. Next, we can embed the process algebras BPA drt -ID, PA drt -ID without empty process (see BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]) into the algebras BPA drt;" -ID, PA drt;" -ID by projecting oe rel x onto oex, and everything else onto itself.
Reference: [4] <author> J. C. M. BAETEN AND J. A. BERGSTRA. </author> <title> Discrete time process algebra. </title> <journal> Formal Aspects of Computing, </journal> <volume> 8(2) </volume> <pages> 188-208, </pages> <year> 1996. </year>
Reference-contexts: On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]), and a case study has been made (BOS AND RENIERS [11]). Given the fact that both extensions, empty process and discrete time, have been researched very well, it seemed reasonable to study how these two extensions go together. <p> For example, a very broad class of deadlock-like processes has been described in the literature. To name a few variants (in order of increasing degree of catastrophe): classic (ffi, see e.g. BAETEN AND WEIJLAND [10]), immediate ( ffi, see BAETEN AND BERGSTRA <ref> [4, 5] </ref>), inconsistent state (?, see BAE TEN AND BERGSTRA [6]), and true zero (0, see BAETEN AND BERGSTRA [1, 2]). A similar observation holds for the implementation of the concept choice: half a dozen versions, ranging from completely deterministic to completely non-deterministic have been described. <p> BAETEN AND BERGSTRA [2], the old process algebras should be Subalgebras of a Reduced Model (SRM's) of the new process algebras). 3 Discrete-Time Process Algebra without Empty Process We start by recalling the definition of the simplest discrete-time process algebra without empty process, BPA drt -ID, from BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]. It concerns a discrete-time process algebra, thus time is divided into slices. Further, this is a relative time process algebra, so the timing of an action is measured with respect to the previous action. <p> By projecting a onto a" we do get a proper embedding, as BPA drt;" -ID ` a" a""" does indeed hold. Next, we can embed the process algebras BPA drt -ID, PA drt -ID without empty process (see BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]) into the algebras BPA drt;" -ID, PA drt;" -ID by projecting oe rel x onto oex, and everything else onto itself.
Reference: [5] <author> J. C. M. BAETEN AND J. A. BERGSTRA. </author> <title> Discrete time process algebra: Absolute time, relative time and parametric time. </title> <journal> Fundamenta Informatic, </journal> <volume> 29(1, </volume> 2):51-76, 1997. 
Reference-contexts: On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]), and a case study has been made (BOS AND RENIERS [11]). Given the fact that both extensions, empty process and discrete time, have been researched very well, it seemed reasonable to study how these two extensions go together. <p> For example, a very broad class of deadlock-like processes has been described in the literature. To name a few variants (in order of increasing degree of catastrophe): classic (ffi, see e.g. BAETEN AND WEIJLAND [10]), immediate ( ffi, see BAETEN AND BERGSTRA <ref> [4, 5] </ref>), inconsistent state (?, see BAE TEN AND BERGSTRA [6]), and true zero (0, see BAETEN AND BERGSTRA [1, 2]). A similar observation holds for the implementation of the concept choice: half a dozen versions, ranging from completely deterministic to completely non-deterministic have been described. <p> BAETEN AND BERGSTRA [2], the old process algebras should be Subalgebras of a Reduced Model (SRM's) of the new process algebras). 3 Discrete-Time Process Algebra without Empty Process We start by recalling the definition of the simplest discrete-time process algebra without empty process, BPA drt -ID, from BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]. It concerns a discrete-time process algebra, thus time is divided into slices. Further, this is a relative time process algebra, so the timing of an action is measured with respect to the previous action. <p> By projecting a onto a" we do get a proper embedding, as BPA drt;" -ID ` a" a""" does indeed hold. Next, we can embed the process algebras BPA drt -ID, PA drt -ID without empty process (see BAETEN AND BERGSTRA <ref> [3, 4, 5] </ref>, BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]) into the algebras BPA drt;" -ID, PA drt;" -ID by projecting oe rel x onto oex, and everything else onto itself.
Reference: [6] <author> J. C. M. BAETEN AND J. A. BERGSTRA. </author> <title> Process algebra with propositional signals. </title> <journal> Theoretical Computer Science, </journal> <volume> 177(2) </volume> <pages> 381-405, </pages> <year> 1997. </year>
Reference-contexts: To name a few variants (in order of increasing degree of catastrophe): classic (ffi, see e.g. BAETEN AND WEIJLAND [10]), immediate ( ffi, see BAETEN AND BERGSTRA [4, 5]), inconsistent state (?, see BAE TEN AND BERGSTRA <ref> [6] </ref>), and true zero (0, see BAETEN AND BERGSTRA [1, 2]). A similar observation holds for the implementation of the concept choice: half a dozen versions, ranging from completely deterministic to completely non-deterministic have been described.
Reference: [7] <author> J. C. M. BAETEN AND R. J. VAN GLABBEEK. </author> <title> Merge and termination in process algebra. </title> <booktitle> In [16], </booktitle> <pages> pages 153-172, </pages> <year> 1987. </year>
Reference-contexts: In the past, the feature of the empty process, the process that does nothing, and terminates successfully (in contrast with the deadlock process, which does nothing, and terminates unsuccessfully), has been studied extensively (BAETEN AND VAN GLABBEEK <ref> [7] </ref>, KOYMANS AND VRANCKEN [15], and VRANCKEN [21, 22]). <p> Any attempt at such repairs appears to have this consequence, unless one is willing to sacrifice the right-distributivity of the over the (Axiom A4), which, again, would violate our design goals. For other discussions of the above dilemma, see BAETEN AND VAN GLABBEEK <ref> [7] </ref> and VRANCKEN [22]. The behavior of " with respect to the merge manifests itself even more unexpectedly when time comes into play. For example, consider the expression oe a " k oe b. <p> First, we can embed the untimed process algebras BPA ffi" , PA " , ACP " (see BAETEN AND VAN GLABBEEK <ref> [7] </ref>) into the timed counterparts BPA drt;" ID, PA drt;" -ID pre sented here by projecting a onto a for a 2 A ffi" , and everything else onto itself.
Reference: [8] <editor> J. C. M. BAETEN AND J. W. KLOP, editors. </editor> <title> CONCUR '90, Theories of Concurrency: Unification and Extension. </title> <booktitle> Number 458 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <booktitle> Proceedings of CONCUR '90, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1990. </year>
Reference: [9] <author> J. C. M. BAETEN AND M. A. RENIERS. </author> <title> Discrete time process algebra with relative timing. </title> <institution> Unpublished lecture notes of Eindhoven University of Technology Course 2L920 Process Algebra. </institution>
Reference-contexts: On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS <ref> [9] </ref>, RENIERS AND VEREIJKEN [19]), and a case study has been made (BOS AND RENIERS [11]). Given the fact that both extensions, empty process and discrete time, have been researched very well, it seemed reasonable to study how these two extensions go together. <p> process algebras should be Subalgebras of a Reduced Model (SRM's) of the new process algebras). 3 Discrete-Time Process Algebra without Empty Process We start by recalling the definition of the simplest discrete-time process algebra without empty process, BPA drt -ID, from BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS <ref> [9] </ref>, RENIERS AND VEREIJKEN [19]. It concerns a discrete-time process algebra, thus time is divided into slices. Further, this is a relative time process algebra, so the timing of an action is measured with respect to the previous action. <p> By projecting a onto a" we do get a proper embedding, as BPA drt;" -ID ` a" a""" does indeed hold. Next, we can embed the process algebras BPA drt -ID, PA drt -ID without empty process (see BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS <ref> [9] </ref>, RENIERS AND VEREIJKEN [19]) into the algebras BPA drt;" -ID, PA drt;" -ID by projecting oe rel x onto oex, and everything else onto itself.
Reference: [10] <author> J. C. M. BAETEN AND W. P. WEIJLAND. </author> <title> Process Algebra. </title> <booktitle> Number 18 in Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: For example, a very broad class of deadlock-like processes has been described in the literature. To name a few variants (in order of increasing degree of catastrophe): classic (ffi, see e.g. BAETEN AND WEIJLAND <ref> [10] </ref>), immediate ( ffi, see BAETEN AND BERGSTRA [4, 5]), inconsistent state (?, see BAE TEN AND BERGSTRA [6]), and true zero (0, see BAETEN AND BERGSTRA [1, 2]). <p> The principle RSP (DEP) is a special case of the Recursive Definition Principle RSP, see e.g. BAETEN AND WEIJLAND <ref> [10] </ref>, that states that a guarded recursive specification can have at most one solution. In terms of the Kleene star, we have intuitively the equality oe fl x "x. The recursion principle RSP (DEP) will be used to derive equalities between terms that contain delayable actions.
Reference: [11] <author> S. H. J. BOS AND M. A. RENIERS. </author> <title> The I 2 C-bus in discrete-time process algebra. </title> <booktitle> Science of Computer Programming, </booktitle> <address> 29(1-2):235-258, </address> <year> 1997. </year>
Reference-contexts: On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]), and a case study has been made (BOS AND RENIERS <ref> [11] </ref>). Given the fact that both extensions, empty process and discrete time, have been researched very well, it seemed reasonable to study how these two extensions go together. This is especially important, as the empty process does have great advantages in the specification of protocols.
Reference: [12] <author> ITU-T. </author> <title> ITU-T Recommendation Z.100: Specification and Description Language (SDL). ITU-T, </title> <address> Geneva, </address> <year> 1988. </year>
Reference-contexts: Furthermore, the empty process is needed to give a process-algebra based semantics to the specification languages SDL (see ITU-T <ref> [12] </ref>) and MSC (see ITU-TS [13, 14], and the dissertation of RENIERS [18]), and hence a timed empty process is needed to give such a semantics to timed variants of these languages.
Reference: [13] <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.120: Message Sequence Chart (MSC). </title> <address> ITU-TS, Geneva, </address> <year> 1993. </year>
Reference-contexts: Furthermore, the empty process is needed to give a process-algebra based semantics to the specification languages SDL (see ITU-T [12]) and MSC (see ITU-TS <ref> [13, 14] </ref>, and the dissertation of RENIERS [18]), and hence a timed empty process is needed to give such a semantics to timed variants of these languages.
Reference: [14] <author> ITU-TS. </author> <title> ITU-TS Draft Recommendation Z.120: Message Sequence Chart 1996 (MSC96). </title> <address> ITU-TS, Geneva, </address> <year> 1996. </year>
Reference-contexts: Furthermore, the empty process is needed to give a process-algebra based semantics to the specification languages SDL (see ITU-T [12]) and MSC (see ITU-TS <ref> [13, 14] </ref>, and the dissertation of RENIERS [18]), and hence a timed empty process is needed to give such a semantics to timed variants of these languages.
Reference: [15] <author> C. P. J. KOYMANS AND J. L. M. VRANCKEN. </author> <title> Extending process algebra with the empty process ". Technical Report LGPS 1, </title> <institution> Utrecht University, Department of Philosophy, </institution> <year> 1985. </year>
Reference-contexts: In the past, the feature of the empty process, the process that does nothing, and terminates successfully (in contrast with the deadlock process, which does nothing, and terminates unsuccessfully), has been studied extensively (BAETEN AND VAN GLABBEEK [7], KOYMANS AND VRANCKEN <ref> [15] </ref>, and VRANCKEN [21, 22]). <p> For example, a stack over an infinite data type can only be specified in finitely many equations (three, to be exact), when we have the empty process at our disposal (KOYMANS AND VRANCKEN <ref> [15] </ref>).
Reference: [16] <editor> K. V. NORI, editor. </editor> <booktitle> Foundations of Software Technology and Theoretical Computer Science. Number 287 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year> <booktitle> Proceedings of the 7th conference on the foundations of software technology and theoretical computer science, </booktitle> <address> Pune, India, </address> <month> December </month> <year> 1987. </year>
Reference: [17] <editor> H. REICHEL, editor. </editor> <booktitle> FCT '95, International Conference on Fundamentals of Computation Theory. Number 965 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <booktitle> Proceedings of FCT '95, 10th International Conference, </booktitle> <address> Dresden, Germany, </address> <month> August </month> <year> 1995. </year>
Reference: [18] <author> M. A. RENIERS. </author> <title> Message Sequence Chart: Syntax and Semantics. </title> <type> Ph.D. thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1998. </year> <note> In preparation; title tentative. </note>
Reference-contexts: Furthermore, the empty process is needed to give a process-algebra based semantics to the specification languages SDL (see ITU-T [12]) and MSC (see ITU-TS [13, 14], and the dissertation of RENIERS <ref> [18] </ref>), and hence a timed empty process is needed to give such a semantics to timed variants of these languages.
Reference: [19] <author> M. A. RENIERS AND J. J. VEREIJKEN. </author> <title> Completeness in discrete-time process algebra. </title> <type> Technical Report CSR 96/15, </type> <institution> Eindhoven University of Technology, Computing Science Department, </institution> <year> 1996. </year> <note> Parts also appeared as Chapters 4 and 5 of [20]. </note>
Reference-contexts: On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN <ref> [19] </ref>), and a case study has been made (BOS AND RENIERS [11]). Given the fact that both extensions, empty process and discrete time, have been researched very well, it seemed reasonable to study how these two extensions go together. <p> Subalgebras of a Reduced Model (SRM's) of the new process algebras). 3 Discrete-Time Process Algebra without Empty Process We start by recalling the definition of the simplest discrete-time process algebra without empty process, BPA drt -ID, from BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN <ref> [19] </ref>. It concerns a discrete-time process algebra, thus time is divided into slices. Further, this is a relative time process algebra, so the timing of an action is measured with respect to the previous action. <p> Next, we can embed the process algebras BPA drt -ID, PA drt -ID without empty process (see BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN <ref> [19] </ref>) into the algebras BPA drt;" -ID, PA drt;" -ID by projecting oe rel x onto oex, and everything else onto itself.
Reference: [20] <author> J. J. VEREIJKEN. </author> <title> Discrete-Time Process Algebra. </title> <type> Ph.D. thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1997. </year>
Reference-contexts: On the basis of this extended definition, we obtain an elimination theorem, and soundness and completeness follow. All details can be found in VEREIJKEN <ref> [20] </ref>. 5.2 PA drt;" ID In this section, we define the process algebra PA drt;" ID, which is basically the process algebra BPA drt;" -ID extended with the free merge. <p> Again, adding the merge is entirely 14 similar to adding the merge in the case without delayable actions (treated in Section 4.3). Further details can be found in VEREIJKEN <ref> [20] </ref>. 6 Embeddings There exist many embeddings between the process algebras given in this contribution and other process algebras found in the literature.
Reference: [21] <author> J. L. M. VRANCKEN. </author> <title> Studies in Process Algebra, Algebraic Specifications and Parallelism. </title> <type> Ph.D. thesis, </type> <institution> University of Amsterdam, </institution> <year> 1991. </year>
Reference-contexts: In the past, the feature of the empty process, the process that does nothing, and terminates successfully (in contrast with the deadlock process, which does nothing, and terminates unsuccessfully), has been studied extensively (BAETEN AND VAN GLABBEEK [7], KOYMANS AND VRANCKEN [15], and VRANCKEN <ref> [21, 22] </ref>). On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]), and a case study has been made (BOS AND RENIERS [11]).
Reference: [22] <author> J. L. M. VRANCKEN. </author> <title> The algebra of communicating processes with empty process. </title> <journal> Theoretical Computer Science, </journal> <volume> 177(2) </volume> <pages> 287-328, </pages> <year> 1997. </year> <note> Also appeared as Chapter 1 of [21]. 16 </note>
Reference-contexts: In the past, the feature of the empty process, the process that does nothing, and terminates successfully (in contrast with the deadlock process, which does nothing, and terminates unsuccessfully), has been studied extensively (BAETEN AND VAN GLABBEEK [7], KOYMANS AND VRANCKEN [15], and VRANCKEN <ref> [21, 22] </ref>). On the other hand, recently there has been described an elegant and coherent way to incorporate discrete-time extensions into the process-algebra framework (BAETEN AND BERGSTRA [3, 4, 5], BAETEN AND RENIERS [9], RENIERS AND VEREIJKEN [19]), and a case study has been made (BOS AND RENIERS [11]). <p> Any attempt at such repairs appears to have this consequence, unless one is willing to sacrifice the right-distributivity of the over the (Axiom A4), which, again, would violate our design goals. For other discussions of the above dilemma, see BAETEN AND VAN GLABBEEK [7] and VRANCKEN <ref> [22] </ref>. The behavior of " with respect to the merge manifests itself even more unexpectedly when time comes into play. For example, consider the expression oe a " k oe b.
References-found: 22

