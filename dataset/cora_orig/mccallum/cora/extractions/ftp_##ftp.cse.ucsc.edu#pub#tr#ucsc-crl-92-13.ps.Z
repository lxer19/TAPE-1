URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-92-13.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Group membership in the epidemic style  
Author: Richard A. Golding and Kim Taylor 
Keyword: Group membership, distributed systems, weak consistency replication  
Address: Santa Cruz, CA 95064  
Affiliation: Concurrent Systems Laboratory Computer and Information Sciences University of California, Santa Cruz  
Date: May 4, 1992  
Pubnum: UCSC-CRL-92-13  
Abstract: Existing group membership mechanisms provide consistent views of membership changes. However, they require heavyweight synchronous multicast protocols. We present a new lightweight group membership mechanism that allows temporary inconsistencies in membership views. This mechanism uses epidemic communication techniques to ensure that all group members eventually converge to a consistent view of the membership. Members can join or leave groups, and we show that the mechanism is resilient to k n 2 members failing by crashing, where n is the number of members in the group. 
Abstract-found: 1
Intro-found: 1
Reference: [Agrawal91] <author> Divyakant Agrawal and Amr El Abbadi. </author> <title> An efficient and fault-tolerant solution for distributed mutual exclusion. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(1) </volume> <month> 1-20 (February </month> <year> 1991). </year>
Reference-contexts: Pairs of processes occasionally exchange updates until they are mutually consistent. We have also developed a similar protocol that requires O (n 2 ) state per process but allows unsynchronised clocks. This protocol was discovered independently by Agrawal and Malpani <ref> [Agrawal91] </ref>. Processes maintain a summary timestamp vector to record what updates they have observed [Mattern88]. Process A records a timestamp t for process B, if A has observed all updates generated at B up to time t on B's clock.
Reference: [Alon87] <author> Noga Alon, Amnon Barak, and Udi Manber. </author> <title> On disseminating information reliably without broadcasting. </title> <booktitle> Proceedings of 7th International Conference on Distributed Computing Systems (Berlin, </booktitle> <month> 21-25 September, </month> <year> 1987), </year> <pages> pages 74-81, </pages> <editor> R. Popescu-Zeletin, G. Le Lann, and K. H. Kim, editors (1987). </editor> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: If k increases or some of the sites fail, other sites will need to dynamically join the group responsible for maintaining the item in order to achieve the required resilience. We present a new definition and implementation of the group membership problem based upon epidemic communication <ref> [Alon87, Demers88, Demers89] </ref>. Epidemic communication allows temporary inconsistencies in shared data in exchange for low-overhead implementation. More specifically, information changes are spread gradually throughout the process population without incurring the latency and bursty communication typically used to achieve a high degree of consistency. <p> A necessary question is exactly what correctness means when groups are dynamic, communication is epidemic, and processes can fail. Before giving our implementation, we first formally specify the correctness and resilience conditions to be achieved by the group membership protocols. These have the flavor of epidemic communication guarantees <ref> [Alon87, Demers88, Demers89] </ref>, namely eventual convergence of group views in a probabilistically bounded time. However, we also guarantee k-resilience of group communication and we guarantee that processes temporarily joining a group see past updates.
Reference: [Birman87] <author> Kenneth P. Birman and Thomas A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <month> 47-76 (February </month> <year> 1987). </year>
Reference-contexts: This forms the basis of a group consensus mechanism which is used to loosely synchronize group membership information. In contrast to our work, previous group membership mechanisms ensure greater consistency of group views at the expense of latency and communication overhead. Both the ISIS system <ref> [Birman87, Birman91] </ref> and a group membership mechanism by Cristian [Cristian89] are built on top of atomic broadcast protocols, and hence provide each process with the same sequence of group views. Ricciardi [Ricciardi91] is investigating an alternative group membership mechanism for Isis which does not use the underlying atomic broadcast.
Reference: [Birman91] <author> Kenneth P. Birman, Robert Cooper, and Barry Gleeson. </author> <title> Programming with process groups: group and multicast semantics. </title> <note> Technical report TR-91-1185 (29 January 1991). </note> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: This forms the basis of a group consensus mechanism which is used to loosely synchronize group membership information. In contrast to our work, previous group membership mechanisms ensure greater consistency of group views at the expense of latency and communication overhead. Both the ISIS system <ref> [Birman87, Birman91] </ref> and a group membership mechanism by Cristian [Cristian89] are built on top of atomic broadcast protocols, and hence provide each process with the same sequence of group views. Ricciardi [Ricciardi91] is investigating an alternative group membership mechanism for Isis which does not use the underlying atomic broadcast.
Reference: [Bloch87] <author> Joshua J. Bloch, Dean S. Daniels, and Alfred Z. Spector. </author> <title> A weighted voting algorithm for replicated directories. </title> <journal> Journal of the ACM, </journal> <volume> 34(4) </volume> <month> 859-909 (October </month> <year> 1987). </year>
Reference-contexts: These records are often called death certificates, and are used in other systems that allow temporary inconsistency <ref> [Bloch87, Demers89] </ref>. The communication protocol allows a process to determine when consensus has been reached, so these records can safely be purged. The timestamp for process p records the clock at p, clock (p; t) when the process entered its current state.
Reference: [Cristian89] <author> Flaviu Cristian. </author> <title> A probabilistic approach to distributed clock synchronization. </title> <booktitle> Proceedings of 9th International Conference on Distributed Computing Systems (Newport Beach, </booktitle> <address> CA), pages 288-96 (1989). </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In contrast to our work, previous group membership mechanisms ensure greater consistency of group views at the expense of latency and communication overhead. Both the ISIS system [Birman87, Birman91] and a group membership mechanism by Cristian <ref> [Cristian89] </ref> are built on top of atomic broadcast protocols, and hence provide each process with the same sequence of group views. Ricciardi [Ricciardi91] is investigating an alternative group membership mechanism for Isis which does not use the underlying atomic broadcast.
Reference: [Demers88] <author> Alan Demers, Dan Greene, Carl Hauser, Wes Irish, John Larson, Scott Shenker, Howard Sturgis, Dan Swinehart, and Doug Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <journal> Operating Systems Review, </journal> <volume> 22(1) </volume> <month> 8-32 (January </month> <year> 1988). </year>
Reference-contexts: If k increases or some of the sites fail, other sites will need to dynamically join the group responsible for maintaining the item in order to achieve the required resilience. We present a new definition and implementation of the group membership problem based upon epidemic communication <ref> [Alon87, Demers88, Demers89] </ref>. Epidemic communication allows temporary inconsistencies in shared data in exchange for low-overhead implementation. More specifically, information changes are spread gradually throughout the process population without incurring the latency and bursty communication typically used to achieve a high degree of consistency. <p> A necessary question is exactly what correctness means when groups are dynamic, communication is epidemic, and processes can fail. Before giving our implementation, we first formally specify the correctness and resilience conditions to be achieved by the group membership protocols. These have the flavor of epidemic communication guarantees <ref> [Alon87, Demers88, Demers89] </ref>, namely eventual convergence of group views in a probabilistically bounded time. However, we also guarantee k-resilience of group communication and we guarantee that processes temporarily joining a group see past updates. <p> However, we also guarantee k-resilience of group communication and we guarantee that processes temporarily joining a group see past updates. These conditions are much stronger than would be guaranteed by simply propagating group information via known epidemic protocols. In <ref> [Demers88, Demers89] </ref> three epidemic communication methods are specified: direct mail, rumor mongery, and anti-entropy. Each propagates the update at different rates, requiring different amounts of message traffic and providing different guarantees on eventual consistency. Direct mail propagates an update to other replicas using a single unreliable multicast datagram.
Reference: [Demers89] <author> Alan Demers, Mark Gealy, Dan Greene, Carl Hauser, Wes Irish, John Larson, Sue Manning, Scott Shenker, Howard Sturgis, Dan Swinehart, Doug Terry, and Don Woods. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <note> Technical report CSL-89-1 (January 1989). </note> <institution> Xerox Palo Alto Research Center, </institution> <address> CA. </address>
Reference-contexts: If k increases or some of the sites fail, other sites will need to dynamically join the group responsible for maintaining the item in order to achieve the required resilience. We present a new definition and implementation of the group membership problem based upon epidemic communication <ref> [Alon87, Demers88, Demers89] </ref>. Epidemic communication allows temporary inconsistencies in shared data in exchange for low-overhead implementation. More specifically, information changes are spread gradually throughout the process population without incurring the latency and bursty communication typically used to achieve a high degree of consistency. <p> A necessary question is exactly what correctness means when groups are dynamic, communication is epidemic, and processes can fail. Before giving our implementation, we first formally specify the correctness and resilience conditions to be achieved by the group membership protocols. These have the flavor of epidemic communication guarantees <ref> [Alon87, Demers88, Demers89] </ref>, namely eventual convergence of group views in a probabilistically bounded time. However, we also guarantee k-resilience of group communication and we guarantee that processes temporarily joining a group see past updates. <p> However, we also guarantee k-resilience of group communication and we guarantee that processes temporarily joining a group see past updates. These conditions are much stronger than would be guaranteed by simply propagating group information via known epidemic protocols. In <ref> [Demers88, Demers89] </ref> three epidemic communication methods are specified: direct mail, rumor mongery, and anti-entropy. Each propagates the update at different rates, requiring different amounts of message traffic and providing different guarantees on eventual consistency. Direct mail propagates an update to other replicas using a single unreliable multicast datagram. <p> These records are often called death certificates, and are used in other systems that allow temporary inconsistency <ref> [Bloch87, Demers89] </ref>. The communication protocol allows a process to determine when consensus has been reached, so these records can safely be purged. The timestamp for process p records the clock at p, clock (p; t) when the process entered its current state.
Reference: [Golding91a] <author> Richard A. Golding. </author> <title> Distributed epidemic algorithms for replicated tuple spaces. </title> <note> Technical report HPL-CSP-91-15 (28 June 1991). </note> <institution> Concurrent Systems Project, Hewlett-Packard Laboratories. </institution> <month> 10 </month>
Reference-contexts: Our group membership mechanism can use direct mail and rumor mongery, as described above. In addition, it utilizes a variant of anti-entropy termed timestamped anti-entropy <ref> [Golding91a] </ref>. In contrast to the earlier anti-entropy protocol, processes using it can determine when all other replicas have observed an update. This forms the basis of a group consensus mechanism which is used to loosely synchronize group membership information. <p> We have developed new epidemic communication protocols that guarantee, first, that every process will eventually observe an update, and second, that any process can determine whether every process has observed some update <ref> [Golding91a] </ref>. The first guarantee is provided by existing protocols, while the second is not. 1 A version of the timestamped anti-entropy protocol works with unsynchronized clocks that need only to be strictly increasing at each process and to satisfy Lamport's happens-before condition. <p> Epidemic communication protocols can deliver messages in many different orders, many of which do not respect causality. This allows the protocols to use efficient communication mechanisms. 3.1 Timestamped anti-entropy We have developed an epidemic communication protocol, timestamped anti-entropy, that provides both these guarantees <ref> [Golding91a] </ref>. The protocol works, in general, by maintaining information on what updates and acknowledgments it has received from which processes. Pairs of processes occasionally exchange updates until they are mutually consistent. <p> If any step of the exchange fails, either process can abort the session. If this mechanism is used as the only communication between processes, each update is sent exactly once to each process. We have proven that this mechanism guarantees that every process will eventually observe all updates <ref> [Golding91a] </ref>. 4 Epidemic group membership A group is defined as a set of members. It comes into existence when the first member initializes it, and ceases to exist when the last member leaves.
Reference: [Golding91b] <author> Richard A. Golding. </author> <title> Accessing replicated data in a large-scale distributed systems. </title> <note> Mas--ter's thesis; published as Technical report UCSC-CRL-91-18 (June 1991). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: No part of the network fails permanently, though temporary partitions can occur. Any process p can eventually send a message to any other process q if it continually tries to send until it receives an acknowledgment. Recent studies show that the Internet behaves in much this way <ref> [Golding91b, Long91] </ref>. 3 Epidemic communication Epidemic communication schemes provide communication between processes in a group, with weak guarantees on the consistency between them.
Reference: [Golding92] <author> Richard A. Golding. </author> <title> Weak-consistency group communication and membership. </title> <type> PhD thesis (September 1992, expected). </type> <institution> University of California at Santa Cruz. </institution>
Reference-contexts: These protocols are being implemented in two systems. The refdbms system implements a distributed bibliographic database. It is being implemented by one of us as vehicle for gathering performance measures of a large-scale wide-area distributed application <ref> [Golding92] </ref>. The tattler system is a distributed performance monitor for the Internet that collects statistics on host availability. It is being built by Long [Long92] at UC Santa Cruz, as part of his research into distributed system reliability.
Reference: [Little90] <author> Mark C. Little and Santosh K. Shrivastava. </author> <title> Replicated k-resilient objects in Arjuna. </title> <booktitle> Proceedings of Workshop on Management of Replicated Data (Houston, </booktitle> <address> Texas), </address> <month> pages 53-8 (November </month> <year> 1990). </year>
Reference-contexts: Ricciardi [Ricciardi91] is investigating an alternative group membership mechanism for Isis which does not use the underlying atomic broadcast. However, it still uses two- and three-phase commit protocols to maintain consistent group views. Finally, the Arjuna system <ref> [Little90] </ref> maintains a logically centralized group view via atomic transactions. 1 The remainder of our paper is organized as follows. In Section 2, we give our system model. In Section 3, we give some background on epidemic communication techniques and the properties of the underlying protocols used in our implementation.
Reference: [Long91] <author> Darrell D. E. Long, John L. Carroll, and C. J. Park. </author> <title> A study of the reliability of Internet sites. </title> <booktitle> Proceedings of 10th IEEE Symposium on Reliability in Distributed Software and Database Systems (Pisa, </booktitle> <address> Italy), </address> <month> pages 177-86 (September </month> <year> 1991). </year> <institution> Institute of Electrical and Electronics Engineers. </institution>
Reference-contexts: No part of the network fails permanently, though temporary partitions can occur. Any process p can eventually send a message to any other process q if it continually tries to send until it receives an acknowledgment. Recent studies show that the Internet behaves in much this way <ref> [Golding91b, Long91] </ref>. 3 Epidemic communication Epidemic communication schemes provide communication between processes in a group, with weak guarantees on the consistency between them.
Reference: [Long92] <author> Darrell D. E. </author> <title> Long. A replicated monitoring tool. </title> <note> Technical report UCSC-CRL-92-14 (April 1992). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: It is being implemented by one of us as vehicle for gathering performance measures of a large-scale wide-area distributed application [Golding92]. The tattler system is a distributed performance monitor for the Internet that collects statistics on host availability. It is being built by Long <ref> [Long92] </ref> at UC Santa Cruz, as part of his research into distributed system reliability.
Reference: [Mattern88] <author> Friedemann Mattern. </author> <title> Virtual time and global states of distributed systems. </title> <booktitle> Proceedings of International Workshop on Parallel Algorithms (Chateau de Bonas, </booktitle> <address> France, </address> <month> October </month> <year> 1988), </year> <pages> pages 215-26, </pages> <editor> M. Cosnard, Y. Robert, P. Quinton, and M. Raynal, editors (1989). </editor> <publisher> Elsivier Science Publishers, North-Holland. </publisher>
Reference-contexts: We have also developed a similar protocol that requires O (n 2 ) state per process but allows unsynchronised clocks. This protocol was discovered independently by Agrawal and Malpani [Agrawal91]. Processes maintain a summary timestamp vector to record what updates they have observed <ref> [Mattern88] </ref>. Process A records a timestamp t for process B, if A has observed all updates generated at B up to time t on B's clock. Each process maintains one such timestamp in its timestamp vector for every process in the group.
Reference: [Oppen81] <author> D. C. Oppen and Y. K. Dahl. </author> <title> The Clearinghouse: a decentralized agent for locating named objects in a distributed environment. </title> <type> Technical report OPD-T8103 (1981). </type> <institution> Xerox Office Products Division, </institution> <address> Palo Alto, Ca. </address>
Reference-contexts: This is particularly important for wide-area systems, where failure is common, communication latency is high, and groups may contain hundreds or thousands of members. Of course, applications must be willing to tolerate temporary inconsistencies. One example is a name service <ref> [Oppen81, Schroeder84, Terry85] </ref>, in which location information can be treated as a hint. Hints provide good performance as long as they are usually correct and the cost of identifying and recovering from out-of-date hints is low. For similar reasons, distributed load balancing is an ideal application for epidemic techniques.
Reference: [Ricciardi91] <author> Aleta M. Ricciardi and Kenneth P. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <note> Technical report TR91-1188 (7 February 1991). </note> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: Both the ISIS system [Birman87, Birman91] and a group membership mechanism by Cristian [Cristian89] are built on top of atomic broadcast protocols, and hence provide each process with the same sequence of group views. Ricciardi <ref> [Ricciardi91] </ref> is investigating an alternative group membership mechanism for Isis which does not use the underlying atomic broadcast. However, it still uses two- and three-phase commit protocols to maintain consistent group views.
Reference: [Schroeder84] <author> Michael D. Schroeder, Andrew D. Birrell, and Roger M. Needham. </author> <title> Experience with Grapevine: the growth of a distributed system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <month> 3-23 (February </month> <year> 1984). </year>
Reference-contexts: This is particularly important for wide-area systems, where failure is common, communication latency is high, and groups may contain hundreds or thousands of members. Of course, applications must be willing to tolerate temporary inconsistencies. One example is a name service <ref> [Oppen81, Schroeder84, Terry85] </ref>, in which location information can be treated as a hint. Hints provide good performance as long as they are usually correct and the cost of identifying and recovering from out-of-date hints is low. For similar reasons, distributed load balancing is an ideal application for epidemic techniques.
Reference: [Terry85] <author> Douglas Brian Terry. </author> <title> Distributed name servers: naming and caching in large distributed computing environments. </title> <type> PhD thesis, </type> <note> published as Technical report CSL-85-1 (February 1985). </note> <institution> Xerox Palo Alto Research Center, </institution> <address> CA. </address> <month> 11 </month>
Reference-contexts: This is particularly important for wide-area systems, where failure is common, communication latency is high, and groups may contain hundreds or thousands of members. Of course, applications must be willing to tolerate temporary inconsistencies. One example is a name service <ref> [Oppen81, Schroeder84, Terry85] </ref>, in which location information can be treated as a hint. Hints provide good performance as long as they are usually correct and the cost of identifying and recovering from out-of-date hints is low. For similar reasons, distributed load balancing is an ideal application for epidemic techniques.
References-found: 19

