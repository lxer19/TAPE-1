URL: http://www.cs.dartmouth.edu/~nicol/papers/ss.ps
Refering-URL: http://www.cs.dartmouth.edu/~nicol/papers/papers.html
Root-URL: http://www.cs.dartmouth.edu
Email: fciardo, jgluc, nicolg@cs.wm.edu  
Title: Distributed state space Generation of Discrete-State Stochastic Models  
Author: Gianfranco Ciardo Joshua Gluckman David Nicol 
Date: March 31, 1996  
Address: Williamsburg, VA 23187-8795, USA  
Affiliation: Department of Computer Science College of William and Mary  
Abstract: High-level formalisms such as stochastic Petri nets can be used to model complex systems. Analysis of logical and numerical properties of these models often requires the generation and storage of the entire underlying state space. This imposes practical limitations on the types of systems which can be modeled. Because of the vast amount of memory consumed, we investigate distributed algorithms for the generation of state space graphs. The distributed construction allows us to take advantage of the combined memory readily available on a network of workstations. The key technical problem is to find effective methods for on-the-fly partitioning, so that the state space is evenly distributed among processors. In this paper we report on the implementation of a distributed state space generator that may be linked to a number of existing system modeling tools. We discuss partitioning strategies in the context of Petri net models, and report on performance observed on a network of workstations, as well as on a distributed memory multi-computer.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajmone Marsan, G. Balbo, and G. Conte. </author> <title> A class of Generalized Stochastic Petri Nets for the performance evaluation of multiprocessor systems. </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> 2(2) </volume> <pages> 93-122, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: In many models, however, it is useful to describe "instantaneous events" which can occur in zero time, as soon as they become enabled. In GSPNs <ref> [1] </ref>, this is achieved by immediate transitions; in queueing networks, by passive resources. If a state enables an instantaneous event, "timed events" cannot occur, they are de facto disabled. We disallow infinite sequences of instantaneous events; while these subtle situations can be managed [8, 15], they usually indicate modeling errors.
Reference: [2] <author> G. Balbo, G. Chiola, G. Franceschinis, and G. Molinari Roet. </author> <title> On the efficient construction of the tangible reachability graph of generalized stochastic Petri nets. </title> <booktitle> In Proc. 2nd Int. Workshop on Petri Nets and Performance Models (PNPM'87), </booktitle> <address> Madison, Wisconsin, Aug. 1987. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Sparse storage techniques can also be used to store a state, and it is possible to store an integer in just dlog ke bits, if an upper bound k on its value is known (again invariants can be used for this purpose) <ref> [2] </ref>. We do not discuss these techniques here, since they are independent of our method and apply equally well to both sequential and distributed analysis. Since S and (S; A) are defined only implicitly by the model, their size and characteristics might not be known a priori.
Reference: [3] <author> F. Baskett, K. M. Chandy, R. R. Muntz, and F. Palacios-Gomez. </author> <title> Open, Closed, and Mixed networks of queues with different classes of customers. </title> <journal> Journal of ACM, </journal> <volume> 22(2) </volume> <pages> 335-381, </pages> <month> Apr. </month> <year> 1975. </year> <month> 22 </month>
Reference-contexts: We focus on the CTMC case, where, with the exception of very special circumstances, such as the existence of product-form solutions <ref> [3, 26] </ref>, or of extensive symmetries [5, 13], the numerical solution requires the generation and storage of the entire state space.
Reference: [4] <author> A. Blakemore. </author> <title> The cost of eliminating vanishing markings form generalized stochas-tic Petri nets. </title> <booktitle> In Proc. 3rd Int. Workshop on Petri Nets and Performance Models (PNPM'89), </booktitle> <pages> pages 85-92, </pages> <address> Kyoto, Japan, Dec. 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Immediate states are managed in the process that generates them, and then discarded after all the timed states reachable from them have been explored. Storing the immediate states together with the timed ones is a reasonable alternative (see <ref> [8, 4] </ref> for the tradeoffs involved in storing these states permanently), but is probably less appropriate if the paramount goal is to minimize storage requirements.
Reference: [5] <author> P. Buchholz. </author> <title> Hierarchical Markovian models Symmetries and Reduction. In Mod-elling Techniques and Tools for Computer Performance Evaluation. </title> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <year> 1992. </year>
Reference-contexts: We focus on the CTMC case, where, with the exception of very special circumstances, such as the existence of product-form solutions [3, 26], or of extensive symmetries <ref> [5, 13] </ref>, the numerical solution requires the generation and storage of the entire state space. This is the main drawback of the numerical approach, since the size of the state space can easily be orders of magnitude larger than the main memory of a single workstation.
Reference: [6] <author> S. Caselli, G. Conte, and P. Marenzoni. </author> <title> Parallel state space exploration for GSPN models. </title> <editor> In G. De Michelis and M. Diaz, editors, </editor> <booktitle> Application and Theory of Petri Nets 1995, Lecture Notes in Computer Science 935 (Proc. 16th Int. Conf. on Applications and Theory of Petri Nets, Turin, Italy), </booktitle> <pages> pages 181-200. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: P 0 , we assign a marking m to a processor by applying a hashing function to the submarking m 0 : f : IN jP 0 j ! f0; : : : ; N 1g: The idea of using a hashing function for this purpose is quite natural (e.g., <ref> [6] </ref>), but our use of a control set and the study on the characteristics of a good hashing function we present in this section are, we believe, new.
Reference: [7] <author> G. Ciardo, A. Blakemore, P. F. J. Chimento, J. K. Muppala, and K. S. Trivedi. </author> <title> Automated generation and analysis of Markov reward models using Stochastic Reward Nets. </title> <editor> In C. Meyer and R. J. Plemmons, editors, </editor> <title> Linear Algebra, Markov Chains, and Queueing Models, </title> <booktitle> volume 48 of IMA Volumes in Mathematics and its Applications, </booktitle> <pages> pages 145-191. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The initial probability vector corresponding to the initial state must be used: s 0 = 1, s = 0 for all other states s 2 S. Then, we can obtain the probability of reaching the recurrent classes, and solve each independently <ref> [7] </ref>. 5.2 Numerical solution of the underlying stochastic process In the current implementation, the numerical solution of the CTMC is centralized. While this prevents us from obtaining good speedups, it is important to remember that our immediate goal is to increase the size of models we can solve.
Reference: [8] <author> G. Ciardo, J. K. Muppala, and K. S. Trivedi. </author> <title> On the solution of GSPN reward models. </title> <booktitle> Perf. Eval., </booktitle> <volume> 12(4) </volume> <pages> 237-253, </pages> <year> 1991. </year>
Reference-contexts: In GSPNs [1], this is achieved by immediate transitions; in queueing networks, by passive resources. If a state enables an instantaneous event, "timed events" cannot occur, they are de facto disabled. We disallow infinite sequences of instantaneous events; while these subtle situations can be managed <ref> [8, 15] </ref>, they usually indicate modeling errors. Then, the state space S can be partitioned into two classes, of "timed" and "instantaneous" states: S T and S I , where s 2 S I iff it enables instantaneous events. <p> Immediate states are managed in the process that generates them, and then discarded after all the timed states reachable from them have been explored. Storing the immediate states together with the timed ones is a reasonable alternative (see <ref> [8, 4] </ref> for the tradeoffs involved in storing these states permanently), but is probably less appropriate if the paramount goal is to minimize storage requirements.
Reference: [9] <author> G. Ciardo and K. S. Trivedi. </author> <title> A decomposition approach for stochastic reward net models. </title> <booktitle> Perf. Eval., </booktitle> <volume> 18(1) </volume> <pages> 37-59, </pages> <year> 1993. </year>
Reference-contexts: We omit a description of this SPN, since we are focusing on a comparison of the sequential and 15 distributed algorithms for its analysis. The interested reader can consult <ref> [9] </ref> for a detailed presentation of its behavior and the meaning of its places and transitions.
Reference: [10] <author> G. Ciardo, K. S. Trivedi, and J. K. Muppala. SPNP: </author> <title> stochastic Petri net package. </title> <booktitle> In Proc. 3rd Int. Workshop on Petri Nets and Performance Models (PNPM'89), </booktitle> <pages> pages 142-151, </pages> <address> Kyoto, Japan, Dec. 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Our approach is not tied to a particular formalism. This greatly simplifies the paral-lelization of any state space-based modeling tool. In particular, we have, for now, applied the approach to the tool SPNP <ref> [10] </ref>, and report the performance results in Section 6. Section 7 summarizes our work and discusses our plans for further investigation. 2 A general interface to a distributed engine Our goal is to provide a "distributed exploration engine" which can be connected to any "discrete-state formalism front-end".
Reference: [11] <author> P. J. Courtois. </author> <title> Decomposability: Queueing and Computer System Applications. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1977. </year>
Reference-contexts: For example, the idea of decomposability <ref> [11] </ref> is based on finding a block partition of the transition matrix where the entries of the off-diagonal blocks are orders of magnitude smaller than those in the diagonal blocks. This ensures that, after entering a block, the stochastic process reaches an "approximate steady-state" before moving to a different block.
Reference: [12] <author> E. W. Dijkstra, W. Feijen, and A. Van Gasteren. </author> <title> Derivation of a termination detection algorithm for a distributed computation. </title> <journal> Inf. Proc. Letters, </journal> <volume> 16 </volume> <pages> 217-219, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: When all processes have finished their local work and are waiting to receive a message, the distributed state space exploration has completed. Detecting termination is a well-known problem with many solutions. In the workstation network data we present, we used the circulating probe algorithm described by Dijkstra et al. <ref> [12] </ref>.
Reference: [13] <author> S. Donatelli. </author> <title> Superposed Stochastic Automata: a class of stochastic Petri nets amenable to parallel solution. </title> <booktitle> In Proc. 4th Int. Workshop on Petri Nets and Performance Models (PNPM'91), </booktitle> <address> Melbourne, Australia, Dec. 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We focus on the CTMC case, where, with the exception of very special circumstances, such as the existence of product-form solutions [3, 26], or of extensive symmetries <ref> [5, 13] </ref>, the numerical solution requires the generation and storage of the entire state space. This is the main drawback of the numerical approach, since the size of the state space can easily be orders of magnitude larger than the main memory of a single workstation.
Reference: [14] <author> A. Goyal, W. C. Carter, E. de Souza e Silva, S. S. Lavenberg, and K. S. Trivedi. </author> <title> The System Availability Estimator. </title> <booktitle> In Proc. 16th Int. Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 84-89, </pages> <address> Vienna, Austria, </address> <month> July </month> <year> 1986. </year> <note> CS Press. 23 </note>
Reference-contexts: Most real systems, however, exhibit complex behaviors which cannot be captured by simple models having a small or regular state space. Given the high expressive power of formalisms such as Petri nets [24, 23], queueing networks, state charts [17], and ad hoc textual languages <ref> [14] </ref>, the correct logical behavior can, in principle, be modeled exactly. The timing behavior is then defined by associating a probability distribution to the duration of each activity. The resulting stochastic process can be solved by discrete-event simulation.
Reference: [15] <author> W. K. Grassmann and Y. Wang. </author> <title> Immediate events in Markov chains. </title> <editor> In W. J. Stewart, editor, </editor> <title> Numerical Solution of Markov Chains '95, </title> <address> pages 163-176, Raleigh, NC, </address> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: In GSPNs [1], this is achieved by immediate transitions; in queueing networks, by passive resources. If a state enables an instantaneous event, "timed events" cannot occur, they are de facto disabled. We disallow infinite sequences of instantaneous events; while these subtle situations can be managed <ref> [8, 15] </ref>, they usually indicate modeling errors. Then, the state space S can be partitioned into two classes, of "timed" and "instantaneous" states: S T and S I , where s 2 S I iff it enables instantaneous events.
Reference: [16] <author> W. Gropp, E. Lusk, and A. Skjellum. </author> <title> Using MPI. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass, </address> <year> 1994. </year>
Reference-contexts: Detecting termination is a well-known problem with many solutions. In the workstation network data we present, we used the circulating probe algorithm described by Dijkstra et al. [12]. We have since made the engine portable by using MPI <ref> [16] </ref> as the communication mechanism, and in that context employ the scalable "Non-committal barrier" described by Nicol [22]. 4.1 Distributed generation of the stochastic process For brevity's sake, we do not present the pseudo-code for the distributed generation of the underlying stochastic process, obtained by merging the algorithm for the distributed
Reference: [17] <author> D. Harel. </author> <title> On visual formalisms. </title> <journal> Comm. of ACM, </journal> <volume> 31(5), </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: Most real systems, however, exhibit complex behaviors which cannot be captured by simple models having a small or regular state space. Given the high expressive power of formalisms such as Petri nets [24, 23], queueing networks, state charts <ref> [17] </ref>, and ad hoc textual languages [14], the correct logical behavior can, in principle, be modeled exactly. The timing behavior is then defined by associating a probability distribution to the duration of each activity. The resulting stochastic process can be solved by discrete-event simulation.
Reference: [18] <author> A. Jensen. </author> <title> Markoff chains as an aid in the study of Markoff processes. </title> <journal> Skand. Aktuari-etidskr., </journal> <volume> 36 </volume> <pages> 87-91, </pages> <year> 1953. </year>
Reference-contexts: This is in not the case if we use the power or the Jacobi methods [27], which have slower convergence rates but are unaffected by state ordering, or if we were interested in performing a transient analysis of the CTMC, using the uniformization method <ref> [18] </ref>. The partition heuristic might affect the convergence of a distributed solution in other ways as well.
Reference: [19] <author> J. Martinez and M. Silva. </author> <title> A simple and fast algorithm to obtain all invariants of a generalised Petri net. </title> <booktitle> In Proc. 2nd European Workshop on Application and Theory of Petri Nets, </booktitle> <pages> pages 411-422, </pages> <address> Bad Honnef, Germany, </address> <year> 1981. </year>
Reference-contexts: More complex storage schemes might be devised to save storage, often based on the existence of model invariants. For example, in a closed queueing network or in a Petri net covered by P-invariants <ref> [19] </ref>, the customer populations at each queue, or the token population at each place, satisfy certain linear relationships.
Reference: [20] <author> T. Murata. </author> <title> Petri Nets: properties, analysis and applications. </title> <journal> Proc. of the IEEE, </journal> <volume> 77(4) </volume> <pages> 541-579, </pages> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: For example, we might want to explore qualitative properties such as absence of deadlocks and livelocks, reachability (possibility of reaching states satisfying certain conditions), liveness, and so on <ref> [20, 23] </ref>. If the distributions of the durations of the timed activities have unbounded support (e.g., a geometric or exponential distribution), the timing and probabilistic behaviors do not affect the qualitative aspects of the model (e.g., which states are reachable), so they can be ignored.
Reference: [21] <author> D. Nicol, D. Palumbo, and M. Ulrey. </author> <title> A graphical tool for reliability and failure-mode-effects analysis. </title> <booktitle> In Proc. of the 1995 Reliability and Maintainability Conference, </booktitle> <pages> pages 74-81, </pages> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: Indeed, we are able to integrate the engine we describe with a commercial modeling tool, BONeS Designer. Our present tool (with its capability for stationary analysis) may serve as a substitute for the transient analysis engine we have also integrated into Designer <ref> [21] </ref>. In general, we can say that the reachability set S, the set of states reachable from a given initial state s 0 , is a subset of some structured countable set, often IN n for some n.
Reference: [22] <author> D. M. Nicol. </author> <title> Non-commital barrier synchronization. </title> <journal> Parallel Computing, </journal> <volume> 21 </volume> <pages> 529-549, </pages> <year> 1995. </year>
Reference-contexts: In the workstation network data we present, we used the circulating probe algorithm described by Dijkstra et al. [12]. We have since made the engine portable by using MPI [16] as the communication mechanism, and in that context employ the scalable "Non-committal barrier" described by Nicol <ref> [22] </ref>. 4.1 Distributed generation of the stochastic process For brevity's sake, we do not present the pseudo-code for the distributed generation of the underlying stochastic process, obtained by merging the algorithm for the distributed generation of the state space of Fig. 3 with the elimination of the immediate states used in
Reference: [23] <author> J. L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: These are then used to carry on performance, reliability, or performability studies. Most real systems, however, exhibit complex behaviors which cannot be captured by simple models having a small or regular state space. Given the high expressive power of formalisms such as Petri nets <ref> [24, 23] </ref>, queueing networks, state charts [17], and ad hoc textual languages [14], the correct logical behavior can, in principle, be modeled exactly. The timing behavior is then defined by associating a probability distribution to the duration of each activity. The resulting stochastic process can be solved by discrete-event simulation. <p> For example, we might want to explore qualitative properties such as absence of deadlocks and livelocks, reachability (possibility of reaching states satisfying certain conditions), liveness, and so on <ref> [20, 23] </ref>. If the distributions of the durations of the timed activities have unbounded support (e.g., a geometric or exponential distribution), the timing and probabilistic behaviors do not affect the qualitative aspects of the model (e.g., which states are reachable), so they can be ignored.
Reference: [24] <author> C. </author> <title> Petri. Kommunikation mit Automaten. </title> <type> PhD thesis, </type> <institution> University of Bonn, Bonn, West Germany, </institution> <year> 1962. </year>
Reference-contexts: These are then used to carry on performance, reliability, or performability studies. Most real systems, however, exhibit complex behaviors which cannot be captured by simple models having a small or regular state space. Given the high expressive power of formalisms such as Petri nets <ref> [24, 23] </ref>, queueing networks, state charts [17], and ad hoc textual languages [14], the correct logical behavior can, in principle, be modeled exactly. The timing behavior is then defined by associating a probability distribution to the duration of each activity. The resulting stochastic process can be solved by discrete-event simulation.
Reference: [25] <author> S. Pissanetzky. </author> <title> Sparse Matrix Technology. </title> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: If (S; A) is strongly connected, the CTMC is ergodic, and the initial probability distribution is irrelevant. In this case, it is a good idea to use the Gauss-Seidel or Successive-Over-Relaxation (SOR) methods <ref> [28, 25] </ref> and choose an initial iterate likely to reduce the number of iterations required for convergence. Common choices are the uniform distribution, s = 1=jSj, or one proportional to the expected sojourn time in each state, s = c=Q s;s , where c is a normalization constant. <p> An interesting observation should be made at this point. It is well known that the ordering of the variables (states) can affect the speed of convergence for iterative methods such as Gauss-Seidel and Successive-Over-Relaxation (SOR) <ref> [28, 25] </ref>. We indeed experienced this phenomenon when studying the number of iterations required by a sequential SOR implementation.
Reference: [26] <author> M. Sereno and G. </author> <title> Balbo. Computational algorithms for product form solution stochastic Petri nets. </title> <booktitle> In Proc. 5th Int. Workshop on Petri Nets and Performance Models (PNPM'93), </booktitle> <pages> pages 98-107, </pages> <address> Toulouse, France, Oct. 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We focus on the CTMC case, where, with the exception of very special circumstances, such as the existence of product-form solutions <ref> [3, 26] </ref>, or of extensive symmetries [5, 13], the numerical solution requires the generation and storage of the entire state space.
Reference: [27] <author> W. J. Stewart. </author> <title> Introduction to the Numerical Solution of Markov Chains. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
Reference-contexts: We believe that state ordering will become an issue in a distributed implementation, where it requires reshu*ing states, and the corresponding columns of Q, among the N processes. This is in not the case if we use the power or the Jacobi methods <ref> [27] </ref>, which have slower convergence rates but are unaffected by state ordering, or if we were interested in performing a transient analysis of the CTMC, using the uniformization method [18]. The partition heuristic might affect the convergence of a distributed solution in other ways as well.

References-found: 27

