URL: http://www.cl.cam.ac.uk/ftp/hvg/papers/TkHolWorkbench.hug95.ps.gz
Refering-URL: http://www.cl.cam.ac.uk/Research/HVG/FTP/FTP.html
Root-URL: 
Email: E-Mail: Donald.Syme@cl.cam.ac.uk  
Title: A New Interface for HOL Ideas, Issues and Implementation  
Author: Donald Syme 
Address: Cambridge  
Affiliation: The Computer Laboratory University of  
Abstract: TkHolWorkbench is a new set of interface tools for HOL implemented using the Tk toolkit. It aims to be robust, extensible, lightweight and user-friendly. The tools are designed to augment the existing HOL interface. The project applies rapid prototyping and the use of an interpreted toolkit to the field of theorem proving interfaces. The topics considered in this paper are: the motivations for a new interface for HOL; the design objectives and usability targets for TkHolWorkbench; a description of the TkHolWorkbench tools as they now stand; and the extensible design architecture used in the implementation.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Richard Boulton. </author> <title> The HOL trs library A Theorem Retrieval System. From the HOL88 system distribution. </title>
Reference-contexts: We shall consider two examples where this should be the case: the TRS library and the Window Proof library. The TRS (theorem retrieval system) library was developed several years ago by Richard Boulton <ref> [1] </ref>. Though well designed and implemented, this library has rarely been used, since it is clumsy to construct the necessary search patterns using a command line interface. TkHolWorkbench includes a simple tool which gives access to this functionality. <p> Access to the values of global variables and flags in the HOL session. Help menus which use a WWW browser to access local or remote help files. 4.3 TkTRS The TkTRS tool provides a simple interface to Richard Boulton's Theorem Retrieval System (trs) library <ref> [1] </ref>. The trs library provides the following functionality to the user: The ability to search loaded theories for theorems and definitions. Search patterns may be based on names or theorem structure. Arbitrary lists of theorems may be searched as well.
Reference: 2. <author> Paul Curzon. </author> <title> Virtual theories. </title> <booktitle> Submitted to the 8th International HOL Workshop on Higher Order Logic and Its Applications. </booktitle>
Reference-contexts: The idea was to write a small interface to some "virtual theory" functionality being developed by Curzon <ref> [2] </ref>. TkHolWorkbench comes with an example "skeleton" package, which was used as a starting point. Within two hours, an interface had been developed from existing widgets which controlled the current "virtual theory" being accessed.
Reference: 3. <author> Jim Grundy. </author> <title> The HOL window library. From the HOL88 system distribution. </title>
Reference-contexts: TkHolWorkbench includes a simple tool which gives access to this functionality. Adding a GUI interface to this library has made it more accessible, and indeed it is now easy to do dynamic searches through the theory hierarchy. Alternative proof packages such as the Window Proof library <ref> [3] </ref> do not seem to get used as often as they deserve. This is probably because of the steepness of the initial learning curve involved. GUI interfaces to such packages should make them easier to learn, and thus more accessible for both new and old HOL users.
Reference: 4. <author> Sara Kalvala. </author> <title> Developing an interface for HOL. </title> <booktitle> Proceedings of the 1991 HOL Workshop, </booktitle> <year> 1991. </year>
Reference-contexts: A discussion of the extensible design architecture used in the implementation is also included. TkHolWorkbench is not the first new interface proposed or developed for the HOL system. The most significant efforts have been CHOL by Laurent Thery [11], an unnamed interface by Sara Kalvala <ref> [4] </ref> and xhol by Thomas Schubert [9]. There are, as one would expect, many similarities in motivation and design between these systems and TkHolWorkbench. However, the reader familiar with these systems will see significant differences too. TkHolWorkbench takes a tool-oriented approach to interface design decomposition. <p> However, the following list of possible benefits indicates why this author believes that HOL users can benefit from a GUI. It draws from several sources <ref> [11, 4, 9, 7] </ref>. The current interface to HOL is very weak, particularly in the area of visu-alisation. There must be better ways of visualising theory development than are currently used. Theory development by less skilled people will become more common if the goals of formal methods research are realised.
Reference: 5. <author> Don Libes. </author> <title> Exploring Expect. </title> <publisher> O'Reilly & Associates, </publisher> <month> January </month> <year> 1995. </year>
Reference-contexts: The two process are run in tight synchronisation, and cross-language calls from Tcl to ML can be made. Thus, for most practical purposes, the two processes may be considered one. The implementation of this mechanism uses "Expect" <ref> [5] </ref>, a process control extension to Tcl.
Reference: 6. <author> Tom Melham. </author> <title> Automating recursive type definitions in higher-order logic. </title> <editor> In G. Birtwhistle and P.A. Subrahmanyam, editors, </editor> <booktitle> Current Trends in Hardware Verification and Automated Theorem Proving, </booktitle> <pages> pages 341-386. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The goals themselves were not large, although the proofs were sometimes quite complicated. 4.5 TkDefineType The TkDefineType tool provides an interface to the functionality of Tom Mel-ham's recursive types package <ref> [6] </ref>. An example of the results of using the tool to define a binary tree type btree is shown in figure 5. The type grammar is entered in the top window, and a set of operations to perform with regard to the grammar is selected in the lower window.
Reference: 7. <author> William Newman and Mik Lamming. </author> <title> Interactive Systems Design. </title> <publisher> Addison-Wesley, </publisher> <month> December </month> <year> 1995. </year>
Reference-contexts: However, the following list of possible benefits indicates why this author believes that HOL users can benefit from a GUI. It draws from several sources <ref> [11, 4, 9, 7] </ref>. The current interface to HOL is very weak, particularly in the area of visu-alisation. There must be better ways of visualising theory development than are currently used. Theory development by less skilled people will become more common if the goals of formal methods research are realised. <p> A personal desire to apply some of the things I have learnt to my favourite system, HOL, was certainly a significant motivation in this work. 3 Design Objectives and Usability Targets In this section we follow the methodology of interactive system design described by Newman and Lamming <ref> [7] </ref> to develop a set of design objectives for TkHol-Workbench. These objectives seek to clarify the problem domain with which TkHolWorkbench is concerned. As part of these objectives we establish a set of usability targets, which describe the levels of support to be offered by the system. <p> One of the most useful bottom line metrics is simple, yet often overlooked by developers: does the interface help users to accomplish their tasks more quickly? Other usability metrics are also important. Those cited by Newman and Lamming <ref> [7] </ref> are: The incidence of errors while performing the activity. The user's ability to recover from errors that occur. The magnitude of the user's task in learning to use the system. The user's retention of learned skills. The user's satisfaction with the system. The user's ability to customize the system.
Reference: 8. <author> John Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: GUI interface building is simply becoming much more feasible, due to the power brought to developers by tools such as John Ousterhout's Tk/Tcl package <ref> [8] </ref> and Microsoft's Visual Basic. <p> The two most important features of the architecture are its modularity and its extensibility. An understanding of the techniques used will benefit anyone wanting to extend TkHolWorkbench with a new tool. 5.1 Expect, Tk and HOL TkHolWorkbench is implemented using Tk/Tcl <ref> [8] </ref>. The architecture of TkHol-Workbench is not dependent on the implementation language. However, it is facilitated by it, and hence the reader unfamiliar with Tk and Tcl may find the following facts helpful. Tcl (Tool Command Language) is a small, interpreted language developed by John Ousterhout at Berkeley [8]. <p> using Tk/Tcl <ref> [8] </ref>. The architecture of TkHol-Workbench is not dependent on the implementation language. However, it is facilitated by it, and hence the reader unfamiliar with Tk and Tcl may find the following facts helpful. Tcl (Tool Command Language) is a small, interpreted language developed by John Ousterhout at Berkeley [8]. It takes a "nihilistic" approach to language design, allowing arbitrary additional command constructs and using string values only. It is sufficiently efficient and flexible for many purposes, though much of its value lies in the many extensions which have been built on top of it.
Reference: 9. <author> Tom Schubert and John Biggs. </author> <title> A tree-based, graphical interface for large proof development. </title> <booktitle> Supplementary Proceedings of the 1994 HOL Workshop, </booktitle> <year> 1994. </year>
Reference-contexts: TkHolWorkbench is not the first new interface proposed or developed for the HOL system. The most significant efforts have been CHOL by Laurent Thery [11], an unnamed interface by Sara Kalvala [4] and xhol by Thomas Schubert <ref> [9] </ref>. There are, as one would expect, many similarities in motivation and design between these systems and TkHolWorkbench. However, the reader familiar with these systems will see significant differences too. TkHolWorkbench takes a tool-oriented approach to interface design decomposition. <p> However, the following list of possible benefits indicates why this author believes that HOL users can benefit from a GUI. It draws from several sources <ref> [11, 4, 9, 7] </ref>. The current interface to HOL is very weak, particularly in the area of visu-alisation. There must be better ways of visualising theory development than are currently used. Theory development by less skilled people will become more common if the goals of formal methods research are realised.
Reference: 10. <author> Konrad Slind. </author> <title> An implementation of higher order logic. </title> <type> Master's Thesis, </type> <note> Jan-uary 1991. Research Report No. 91/419/03, </note> <institution> Department of Computer Science, University of Calgary. </institution>
Reference-contexts: HOL deserves a good interface, or so the reasoning goes, just as it deserved a good implementation in hol90 <ref> [10] </ref>. This was summarized succinctly by Laurent Thery [11]: "Real theorem provers deserve real interfaces". This seems almost self-evident, but is worth being more specific about the expected benefits of producing a graphical user interface (GUI) for HOL.
Reference: 11. <author> Laurent Thery. </author> <title> Real theorem provers deserve real interfaces. </title> <booktitle> In Software Engineering Notes, </booktitle> <volume> volume 17. </volume> <publisher> ACM Press, </publisher> <year> 1992. </year>
Reference-contexts: A discussion of the extensible design architecture used in the implementation is also included. TkHolWorkbench is not the first new interface proposed or developed for the HOL system. The most significant efforts have been CHOL by Laurent Thery <ref> [11] </ref>, an unnamed interface by Sara Kalvala [4] and xhol by Thomas Schubert [9]. There are, as one would expect, many similarities in motivation and design between these systems and TkHolWorkbench. However, the reader familiar with these systems will see significant differences too. <p> HOL deserves a good interface, or so the reasoning goes, just as it deserved a good implementation in hol90 [10]. This was summarized succinctly by Laurent Thery <ref> [11] </ref>: "Real theorem provers deserve real interfaces". This seems almost self-evident, but is worth being more specific about the expected benefits of producing a graphical user interface (GUI) for HOL. <p> However, the following list of possible benefits indicates why this author believes that HOL users can benefit from a GUI. It draws from several sources <ref> [11, 4, 9, 7] </ref>. The current interface to HOL is very weak, particularly in the area of visu-alisation. There must be better ways of visualising theory development than are currently used. Theory development by less skilled people will become more common if the goals of formal methods research are realised.
Reference: 12. <author> Rimvydas Ruks_enas Thomas L-angbacka and Joakim von Wright. </author> <title> TkWinHOL a tool for doing window inference in HOL. Submitted to the 8th International HOL Workshop on Higher Order Logic and Its Applications. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The use of Tk/Tcl to develop TkHolWorkbench 1 It is hoped that some kind of window inference tool will be available for use with a future release of TkHolWorkbench, possibly based on work in progress by Thomas L-angbacka et al. at Abo Akademi University <ref> [12] </ref>. has been instrumental in enabling both rapid prototyping and a robust final implementation. Lastly, the author has spent much of the last five years developing interfaces for a wide range of systems. <p> A further test of the TkHolWorkbench architecture will come with some cooperative work on a Window Inference package being planned with Thomas L-angbacka et al. at Abo Akademi University <ref> [12] </ref>.
References-found: 12

