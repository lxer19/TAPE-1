URL: http://www.cs.yale.edu/pub/TR/tr1094.ps.gz
Refering-URL: http://www.cs.yale.edu/pub/TR/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Meta Information in Visual Programming  
Author: Elisabeth Freeman David Gelernter 
Keyword: Visual language, 3D interface, meta-command, color, folding, transparency, visualization  
Address: New Haven, CT 06520 New Haven, CT 06520  
Affiliation: Yale University Yale University  
Abstract: Visual programming languages use graphics to visualize and aid in the understanding of programs. Meta information is one approach to supplementing the basic functionality provided in the visual programming environment. We introduce meta-commands, commands to control visual characteristics of program objects, and describe the MAP meta-commands for color, folding, visualize and transparency. We show how these meta-commands can be used to affect graphical representation of programs and their executions, and as a way to optimize the recording of program executions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Margaret Burnett. </author> <title> Seven programming language issues. </title> <editor> In Margaret Burnett, Adele Goldberg, and Ted Lewis, editors, </editor> <title> Visual Object-Oriented Programming: Concepts and Environments. </title> <publisher> Manning Publications, </publisher> <year> 1995. </year>
Reference-contexts: Introduction The goals of visual programming languages are to use graphics and other visual techniques to allow the programmer to construct a program, to see or trace changes in program state during execution and to help understand how a program works <ref> [1] </ref>. There are many ways in which visual languages use graphics towards these goals. Many languages have visual semantics which provide the basis for program visualization, and some programming environments augment this with construction tools and other visual aids for graphical representation.
Reference: [2] <author> R. Daniel Bergeron et. al. </author> <title> Database issues for data visualization: Developing a data model. </title> <booktitle> In IEEE Visualization '93 Workshop, </booktitle> <pages> pages 3-15, </pages> <address> October 1993. San Jose, CA. </address>
Reference-contexts: One well-known example is metadata, higher-level data attributes including domain-specific information and abstractions of data structures, formats and visualizations used in databases and scientific data systems <ref> [2] </ref>. In the MAP programming environment, there are several visual characteristics associated with map objects that provide meta information about how these objects are to be visualized and stored, and we use the term meta-commands to describe the functions that manipulate these visual characteristics.
Reference: [3] <author> Elisabeth Freeman, David Gelernter, and Suresh Jagannathan. </author> <title> In search of a simple visual vocabulary. </title> <booktitle> In 1995 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 302-309, </pages> <month> September 5-9 </month> <year> 1995. </year> <institution> Darmstadt, Germany. </institution>
Reference-contexts: Our work on the MAP programming environment addresses these problems by extending the visual space to 3D and by relying on a uniform, simple visual vocabulary for constructing programs <ref> [3] </ref>. This visual vocabulary also allows us to address the problem of how to represent a program and its execution in an integrated way; our goal is to simplify understanding of program behavior and allow debugging in the same environment in which the program was created. <p> Review of MAP MAP programs are a collection of regions that contain expressions and are assembled into space-maps and time-maps to form a program <ref> [3, 4] </ref>. Maps are used to construct variables, data structures, functions and program statement sequences; entire programs are also maps. Graphical representations are based on the visual semantics of MAP and the implementation specific programming environment|a 3D editor and MAP program display. <p> Objects are shown in 3D space with space-maps on the space (x) dimension, time-maps on the time (y) dimension and nesting on the depth (z) dimension (see figure 1). Details of these representations are presented in <ref> [3] </ref>. Figure 2 shows a simple MAP program 2 composed of three regions, the first containing an integer, the second a (nested) space-map and the third a time-map. When a program is evaluated, the program state is recorded in a series of snapshots, called the program history.
Reference: [4] <author> David Gelernter and Suresh Jagannathan. </author> <title> Programming Linguistics. </title> <publisher> MIT, </publisher> <year> 1990. </year> <month> 16 </month>
Reference-contexts: Review of MAP MAP programs are a collection of regions that contain expressions and are assembled into space-maps and time-maps to form a program <ref> [3, 4] </ref>. Maps are used to construct variables, data structures, functions and program statement sequences; entire programs are also maps. Graphical representations are based on the visual semantics of MAP and the implementation specific programming environment|a 3D editor and MAP program display.
References-found: 4

