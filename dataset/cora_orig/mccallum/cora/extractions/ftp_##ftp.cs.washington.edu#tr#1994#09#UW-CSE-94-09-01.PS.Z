URL: ftp://ftp.cs.washington.edu/tr/1994/09/UW-CSE-94-09-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-date.html
Root-URL: http://www.cs.washington.edu
Email: radhika@cs.washington.edu  
Title: The PRESTO Application Suite  
Author: Radhika Thekkath and Susan J. Eggers 
Date: September 9, 1994  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Pubnum: Technical Report 94-09-01  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> Data Structures and Algorithms. </title> <address> Addision-Wesley, </address> <year> 1983. </year>
Reference-contexts: The current size limit of each list is 2 32 1 numbers. 2.13 mst Author: Rice University. The mst application finds the minimum spanning tree for a given input connected graph using Prim's algorithm <ref> [1] </ref>. If V is the set of vertices of the graph, the algorithm begins with a set U initialized to 1. And at each iteration, it finds the lowest cost edge (u; v) that connects U to V U and adds v 2 V U to U .
Reference: [2] <author> J. Barnes and P. Hut. </author> <title> A hierarchical o(nlogn) force-calculation algorithm. </title> <booktitle> Nature 24, </booktitle> <pages> pages 446-449, </pages> <year> 1986. </year>
Reference-contexts: Grav is an implementation of the Barnes and Hut Clustering algorithm <ref> [2] </ref> for simulating the gravitational intersection of a large number of stars over time. The inputs to the program are: the number of stars, the name of the file describing the stars and the number of time steps to run the algorithm.
Reference: [3] <author> J. K. Bennett, J. B. Carter, and W. Zwaenepoel. </author> <title> Adaptive software cache management for distributed shared memory architectures. </title> <booktitle> 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 125-134, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The table also shows the number of lines of source code, and a broad classification of each program in the application domain. Several research studies have used subsets of these applications <ref> [3, 11, 12] </ref>, mainly in simulation work.
Reference: [4] <author> B. N. Bershad, E. D. Lazowska, and H. M. Levy. </author> <title> PRESTO: A system for object-oriented parallel programming. </title> <journal> Software: Practice and Experience, </journal> <volume> 18(8) </volume> <pages> 713-732, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction This report describes a group of coarse- and medium-grain, explicitly-parallel applications that have been made available via the World-Wide Web at (http://www.cs.washington.edu/research/projects/parsw/Benchmarks/Presto/www/index.html). These programs have been written using the PRESTO user-level threads library <ref> [4] </ref>, by students at the University of Washington and Rice University. PRESTO provides a C ++ -based environment for writing object-oriented parallel programs for shared-memory multiprocessors. The library provides basic classes useful for writing parallel programs, among them are thread manipulation routines for concurrency and synchronization primitives.
Reference: [5] <author> Brian N. Bershad. </author> <title> The PRESTO user's manual. </title> <type> Technical Report TR. </type> <institution> No. 88-01-04, University of Washington, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: PRESTO provides a C ++ -based environment for writing object-oriented parallel programs for shared-memory multiprocessors. The library provides basic classes useful for writing parallel programs, among them are thread manipulation routines for concurrency and synchronization primitives. Details of this programming environment and examples are in the PRESTO user's manual <ref> [5] </ref>. The PRESTO manual and sources can be obtained via anonymous FTP (ftp://cs.washington.edu/pub/presto1.0.tar.Z). The applications in this suite have been written for the Sequent Symmetry [10] and calls into the PRESTO library port to the Sequent.
Reference: [6] <author> S. Chandra, J. R. Larus, and A. Rogers. </author> <title> Where is time spent in message passing and shared memory programs? To be published in Sixth International Conference on Architectural Support for Programming Languages and Operating Systems, </title> <month> October </month> <year> 1994. </year> <title> 1 The authors of this report do not consider themselves in any way responsible for the availability or location of these sources. </title> <type> 8 </type>
Reference-contexts: The SPLASH applications are available via anonymous ftp from Stanford (mojave.stanford.edu). The original Split-C version of the EM3D application is available from Berkeley (http://http.cs.berkeley.edu/public/parallel/software.html). Applications from their recent publications <ref> [6, 7] </ref> are also available via anonymous ftp from the University of Wisconsin (ftp.cs.wisc.edu/pub/WWT). Acknowledgements We thank all the authors who let us use their applications for our studies, and who have now graciously given us permission to make these sources available to other researchers.
Reference: [7] <author> J. R. Larus, B. Richards, and G. Viswanathan. </author> <title> LCM: memory system support for parallel language implementation. </title> <booktitle> To be published in Sixth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The SPLASH applications are available via anonymous ftp from Stanford (mojave.stanford.edu). The original Split-C version of the EM3D application is available from Berkeley (http://http.cs.berkeley.edu/public/parallel/software.html). Applications from their recent publications <ref> [6, 7] </ref> are also available via anonymous ftp from the University of Wisconsin (ftp.cs.wisc.edu/pub/WWT). Acknowledgements We thank all the authors who let us use their applications for our studies, and who have now graciously given us permission to make these sources available to other researchers.
Reference: [8] <author> G. Lomov, J. Cleary, B. Unger, and D. West. </author> <title> A performance study of time warp. </title> <booktitle> In Distributed Simulation, </booktitle> <month> July </month> <year> 1988. </year>
Reference-contexts: It provides virtual time semantics, three deadlock handling mechanisms, and options for performance tuning. The Synapse source files are available, and are used to build the Synapse library. Health is an application that simulates the Columbian health care delivery system presented by Lomov, Cleary, Unger, and West <ref> [8] </ref>. They simulated it using the optimistic approach, and conjectured that a conservative simulation would be difficult. The Health problem may be described as follows, the Columbian government provides health care in a multi-tiered fashion of services and referrals.
Reference: [9] <author> Charles T. </author> <title> Loop. Generalized b-spline surfaces of arbitrary topological type. </title> <type> Technical Report TR. No. 92-10-01 (Ph.D. thesis), </type> <institution> University of Washington, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: The limit on the maximum number of stars or particles (256) can be changed by editing the file "grav.h" 2.2 Patch Author: Denise Draper. Patch is a graphics application that performs the first phase of a generalized B-spline construction based on S-patches <ref> [9] </ref>. Given a mesh, the program constructs a collection of Bezier control points corresponding to control mesh vertices. This is done by first calculating the position and tangent control data, followed by the calculation of the Bezier coordinates.
Reference: [10] <institution> Symmetry Technical Summary. Sequent Computer Systems, Inc. </institution>
Reference-contexts: Details of this programming environment and examples are in the PRESTO user's manual [5]. The PRESTO manual and sources can be obtained via anonymous FTP (ftp://cs.washington.edu/pub/presto1.0.tar.Z). The applications in this suite have been written for the Sequent Symmetry <ref> [10] </ref> and calls into the PRESTO library port to the Sequent. PRESTO's thread manipulation calls, such as thread creation, deletion, etc., are fairly standard, and are available in thread packages available on other machines.
Reference: [11] <author> R. Thekkath and S. J. Eggers. </author> <title> The effectiveness of multithreaded architectures. </title> <booktitle> To be published in Sixth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The table also shows the number of lines of source code, and a broad classification of each program in the application domain. Several research studies have used subsets of these applications <ref> [3, 11, 12] </ref>, mainly in simulation work.
Reference: [12] <author> R. Thekkath and S. J. Eggers. </author> <title> Impact of sharing-based thread placement on multithreaded architectures. </title> <booktitle> 21th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 176-186, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: The table also shows the number of lines of source code, and a broad classification of each program in the application domain. Several research studies have used subsets of these applications <ref> [3, 11, 12] </ref>, mainly in simulation work.
Reference: [13] <author> M. Upton, K. Samii, and S. Sugiyama. </author> <title> Integrated placement for mixed standard cell and macro-cell designs. </title> <booktitle> Proceedings of the 27th Design Automation Conference, </booktitle> <pages> pages 32-35, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The program is partitioned so that a single thread works on 4 faces. This partitioning can be varied by editing the file "foofle.c" . 2.3 Pdsa Author: unknown. Pdsa does automatic placement of integrated circuit layouts using a simulated annealing algorithm <ref> [13] </ref>. This is a special algorithm which permits the circuit to be a combination of macro blocks and standard cells.
Reference: [14] <author> D. B. Wagner. </author> <title> Conservative Parallel Discrete-Event Simulation: Principles and Practice. </title> <type> Ph.D. thesis, </type> <institution> University of Washington, </institution> <month> September </month> <year> 1989. </year> <month> 9 </month>
Reference-contexts: Several input data files are available with varying array sizes. 2.5 Health Author: David Wagner. Health and FullConn (described next) are applications that use the Synapse runtime environment <ref> [14] </ref>. Synapse is a customized PRESTO environment for conservative parallel simulation. Like PRESTO, it is also implemented in C++, and provides several classes to facilitate writing parallel simulations. It provides virtual time semantics, three deadlock handling mechanisms, and options for performance tuning.
References-found: 14

