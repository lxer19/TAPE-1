URL: http://osl.cs.uiuc.edu/foundry/Quickstart_letter.ps
Refering-URL: http://www-courses.cs.uiuc.edu/~cs322/
Root-URL: http://www.cs.uiuc.edu
Phone: Phone: +45 96 35 80 80 Fax: +45 98 15 98 89  
Title: "Actor Foundry" a QuickStart  
Author: by Thomas Heide Clausen 
Address: Fredrik Bajers Vej 7E DK 9220 Aalborg O Denmark  
Date: 0.2.0 November 9, 1998  
Note: Version:  d  
Affiliation: Aalborg University  Institute of Electronic Systems Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [Agh86] <author> Gul A. Agha. </author> <title> Actors A Model of Concurrent Computation in Distributed systems. </title> <publisher> The MIT Press, </publisher> <address> 1. edition, </address> <year> 1986. </year>
Reference-contexts: This implies, that Actors can execute in parallel as long as there are messages in their message queue. The Actor model therefore becomes a model for communication and concurrency <ref> [Agh86] </ref>. Actor Foundry primitives The Actor class (i.e. osl.manager.Actor) provides a set of primitives for writing Actor programs. As hinted already, primitives to create and distribute Actors and send messages must be present.
Reference: [Ast98] <author> Mark Astley. </author> <note> The Actor Foundry. Unfinished, 1. edition, 1997/1998. </note>
Reference-contexts: Very few additional modules have been written thus far, but where applicable different alternatives will be mentioned. For detailed information about the modules, refer to the documentation supplied with each module. For information about writing modules refer to <ref> [Ast98] </ref>, which is currently in the process of being written. Each module specification line has four parts: Module Specifies the type of module. Actually this also specifies the interface which the module is expected to implement 3 . <p> SCHEDULER osl.scheduler.basic.BasicScheduler scheduler 3 Details only relevant if you intend to write new modules, in which case you should check <ref> [Ast98] </ref> and the source, found in FOUNDRY HOME/osl/foundry/. 11 The scheduler should generally be instantiated as the first module, as it is required for other modules to be able to submit threads for scheduling.
Reference: [Fla97] <author> David Flanagan. </author> <title> Java in a Nutshell a quick desktop reference. </title> <publisher> O'Reilly & Associates, </publisher> <address> 101 Morris Street, Sebastopol, CA 95472, USA, </address> <year> 1997. </year>
Reference-contexts: They may be useful for e.g. increasing the heap size, allocated to the JVM. For a through description of those options see the JVM documentation or <ref> [Fla97] </ref>. Usually it will be a good idea to increase the heap size otherwise you may see the exception java.lang.OutOfMemoryException frequently. <p> The class name is the fully qualified name of the class to instantiate. The parameters must be objects themselves, no primitive data types (such as int, byte) are permitted. Fortunately there exists object encapsulation for those primitive data types in the java.lang-package <ref> [Fla97] </ref>. Parameters must be objects because they potentially will be serialized and transfered to a remote Actor Foundry node. This generalizes into all parameters, including parameters to the primitives "send" and "call".
Reference: [Lea97] <author> Doug Lea. </author> <title> Concurrent Programming in Java Design Principle and Patterns. The Java Series. </title> <publisher> Addison Wesley, </publisher> <address> One Jacob Way, Reading, Massachusettes 01967, 1 edition, </address> <year> 1997. </year>
Reference-contexts: Six different module types are supported in an Actor Foundry node. These are: Scheduler module A scheduler module is simply a module responsible for scheduling threads in the Actor Foundry. As the Java Language Specification does not specify how the Java Virtual Machines (JVMs) schedule threads <ref> [Lea97] </ref>, the Actor Foundry needs to implement its own scheduler to ensure uniform behavior across different JVMs. Currently two scheduler implementations exist: * osl.scheduler.basic.BasicScheduler * osl.scheduler.none.NoScheduler osl.scheduler.basic.BasicScheduler gives simple, round-robin scheduling and is the default scheduler for the Actor Foundry. osl.scheduler.none.NoScheduler leaves all scheduling to the current JVM.
Reference: [Ste94] <author> W. Richard Stevens. </author> <title> TCP/IP Illustrated vol. 1 The Protocols. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: To use this name service implementation, the configuration file should contain: NAMESERVICE osl.nameservice.simple.DefaultNameService ns @scheduler @transport The startup parameters for the name service are a reference to the scheduler and the transport layer. osl.nameservice.subnet.LocalNameService implements name resolution using the same principle as ARP on Ethernets <ref> [Ste94] </ref>: keeping information about an Actor on the same node as the Actor and utilizing broadcast queries and replies to resolve the Actors location. When using this name service implementation, nodes are limited to a common subnet (as broadcast packages are usually not routed), but is significantly faster than osl.nameservice.simple.DefaultNameService.
References-found: 5

