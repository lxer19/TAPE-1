URL: ftp://ftp.cs.indiana.edu/pub/sdiwan/hpc++europa.ps.gz
Refering-URL: http://www.cs.indiana.edu/hyplan/sdiwan.html
Root-URL: http://www.cs.indiana.edu
Title: HPC++ and the Europa Call Reification Model  
Author: Dennis Gannon, Shridar Diwan, Elizabeth Johnson 
Address: Bloomington, IN, 47405, USA  
Affiliation: Department of Computer Science Indiana University  
Abstract: HPC++ is a set of parallel programming tools that have been designed by the High Performance C++ Consortium. It consists of a modest set of compiler directives and a parallel extension to the C++ Standard Template Library (STL). In this short note we consider the problem of mixing the parallel STL model with the call reification style of parallel programming proposed by the Europa Consortium. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object-oriented programming notation, </title> <booktitle> 1993. In Research Directions in Concurrent Object Oriented Programming, </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: HPC++ parallel iterators are generalizations of HPC++ global pointers. Global pointers are based on the global type in languages like CC++ <ref> [1] </ref>, and C based languages like AC and Split-C. <p> There are two approaches that can be taken to solving this problem. The first is to follow the style of CC++ <ref> [1] </ref> and have each iteration of par apply and par reduce execute in a separate thread of control. A second solution is to use a different calling convention for remote objects. The technique of Futures provides one approach.
Reference: [2] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and specification, </title> <month> July </month> <year> 1995. </year> <note> Revision 2.0. </note>
Reference-contexts: The Object Management Group (OMG), has defined the Common Object Request Broker Architecture (CORBA) <ref> [2] </ref> to provide these services.
Reference: [3] <author> Yutaka Ishikawa. </author> <title> Meta-level architecture for extendable c++. </title> <type> Technical Report TR-94024, </type> <institution> Real World Computing Group, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: In Europe, the Europa consortium [6] has defined a model of parallel C++ computation based on call reifica-tion and a meta-object protocol derived from the work on reflection in the programming language research community [4]. In Japan, the Real World Computing Partnership has established the MPC++ programming system <ref> [3] </ref> which provides broad and powerful mechanisms for user-level extensions to a C++ compiler. In the United States, the HPC++ consortium has focused on extensions to standard C++ class libraries, compiler directives, and a few small language extensions in an attempt to achieve portable parallel programming.
Reference: [4] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bo-brow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: In Europe, the Europa consortium [6] has defined a model of parallel C++ computation based on call reifica-tion and a meta-object protocol derived from the work on reflection in the programming language research community <ref> [4] </ref>. In Japan, the Real World Computing Partnership has established the MPC++ programming system [3] which provides broad and powerful mechanisms for user-level extensions to a C++ compiler.
Reference: [5] <author> Mark Nelson. </author> <title> C++ Programmer's Guide to the Standard Template Library. </title> <publisher> IDG Books Worldwide, </publisher> <year> 1995. </year>
Reference-contexts: The HPC++ library is designed to help simplify this process. One of the major recent changes to the C++ standard has been the addition of the Standard Template Library (STL) <ref> [7, 5] </ref>. The STL has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vec tor, list, deque, set and map. * Iterators generalize the concept of a pointer.
Reference: [6] <institution> The EUROPA Working Group on Parallel C++ Architecture SIG. </institution> <note> EC++ - EUROPA Parallel C++ Draft Definition. </note> <year> 1995. </year>
Reference-contexts: Several groups have joined to define standard library and language extensions for writing portable, parallel C++ applications. In Europe, the Europa consortium <ref> [6] </ref> has defined a model of parallel C++ computation based on call reifica-tion and a meta-object protocol derived from the work on reflection in the programming language research community [4].
Reference: [7] <author> Alexander Stepanov and Meng Lee. </author> <title> The Standard Template Library. </title> <type> Technical Report HPL-95-11, </type> <institution> Hewlett-Packard Laboratories, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: The HPC++ library is designed to help simplify this process. One of the major recent changes to the C++ standard has been the addition of the Standard Template Library (STL) <ref> [7, 5] </ref>. The STL has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vec tor, list, deque, set and map. * Iterators generalize the concept of a pointer.
Reference: [8] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language, Second Edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction C++ <ref> [8] </ref> has become a standard programming language for desktop applications. Increasingly, it is being used in other areas including scientific and engineering applications, and there are dozens of research projects focused on designing parallel extensions for C++ [10].
Reference: [9] <institution> The HPC++ Working Group. </institution> <note> HPC++ White Papers. Technical Report 95633, Center for Research on Parallel Computation., </note> <month> Dec </month> <year> 1995. </year>
Reference-contexts: In the United States, the HPC++ consortium has focused on extensions to standard C++ class libraries, compiler directives, and a few small language extensions in an attempt to achieve portable parallel programming. The HPC++ consortium is a diverse group, with representatives from industry, academia, and government laboratories <ref> [9] </ref>. In this paper we will provide a very brief introduction to HPC++. In section 3 we will describe the basic idea behind Europa call reification style programming and, in section 4, we describe how HPC++ and Europa can be used together.
Reference: [10] <author> Gregory Wilson and Paul Lu. </author> <title> Parallel Programming Using C++. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction C++ [8] has become a standard programming language for desktop applications. Increasingly, it is being used in other areas including scientific and engineering applications, and there are dozens of research projects focused on designing parallel extensions for C++ <ref> [10] </ref>. Several groups have joined to define standard library and language extensions for writing portable, parallel C++ applications.
References-found: 10

