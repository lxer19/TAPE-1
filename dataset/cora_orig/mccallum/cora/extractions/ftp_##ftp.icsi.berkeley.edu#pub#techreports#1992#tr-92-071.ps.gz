URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1992/tr-92-071.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1992.html
Root-URL: http://www.icsi.berkeley.edu
Title: An Efficient Parallel Algorithm for Computing a Maximal Independent Set in a Hypergraph of Dimension 3  
Author: Elias Dahlhaus Marek Karpinski Peter Kelsen 
Date: October, 1992  
Pubnum: TR-92-071  
Abstract: The paper considers the problem of computing a maximal independent set in a hypergraph (see [3] and [7]). We present an efficient deterministic NC algorithm for finding a maximal independent set in a hypergraph of dimension 3: the algorithm runs in time O(log 4 n) time on n + m processors of an EREW PRAM and is optimal up to a polylogarithmic factor. Our algorithm adapts the technique of Goldberg and Spencer ([5]) for finding a maximal independent set in a graph (or hypergraph of dimension 2). It is the first efficient NC algorithm for finding a maximal independent set in a hypergraph of dimension greater than 2. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon, L. Babai, A. Itai, </author> <title> A fast randomized parallel algorithm for the maximal independent set problem, </title> <journal> J. </journal> <volume> Algorithms 7, </volume> <pages> pp. 567-583, </pages> <year> 1986. </year>
Reference-contexts: An independent set in H is a subset of V that does not contain any hyperedge of E; an independent set is maximal if it is not properly contained in another independent set. Although several efficient parallel algorithms ([5], [6], <ref> [1] </ref>, [10]) are known for computing a maximal independent set in ordinary graphs (i.e., hypergraphs of dimension 2), the question of whether there is an NC algorithm for arbitrary hypergraphs is still open ([7]).
Reference: [2] <author> P. Beame, </author> <type> Personal communication, </type> <month> May </month> <year> 1991. </year>
Reference: [3] <author> P. Beame, M. Luby, </author> <title> Parallel Search for Maximal Independence Given Minimal Dependence, Technical Report TR-89-003, </title> <booktitle> International Computer Science Institute, February 1989; in Proc. First ACM-SIAM SODA (1990), </booktitle> <pages> pp. 212-218. </pages>
Reference: [4] <author> E. Dahlhaus, M. Karpinski, </author> <title> An efficient parallel algorithm for the 3MIS problem, </title> <type> Technical Report TR-89-052, </type> <month> September </month> <year> 1989, </year> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA. </address>
Reference: [5] <author> M. Goldberg, T. Spencer, </author> <title> A new parallel algorithm for the maximal independent set problem, </title> <journal> SIAM J. Computing, </journal> <volume> vol. 18, </volume> <year> 1989, </year> <month> pp.419-427. </month>
Reference-contexts: Therefore, algorithm F IN DM IS runs in time O (log 4 n) on n + m EREW processors. At a high level F INDIS is similar to procedure F INDSET described in <ref> [5] </ref> (which finds a large independent set in a graph): FINDIS maintains a collection of mutually disjoint independent sets C 1 ; : : : ; C r in H 0 . We view each independent set as a color class with the vertices in C i having color i. <p> This is repeated until either a color class C is found with j C [ N 1 (C) j c 0 p log p or a single color class is left. There are two main differences between our procedure F INDIS and procedure F IN DSET described in <ref> [5] </ref>, namely how the pairs of color classes are selected for merging and how they are actually merged. We first describe how F IN DIS merges color classes. <p> For graphs (or hypergraphs of dimension 2) it suffices to decolor vertices in either C or C 0 that are adjacent to vertices in the other class (see <ref> [5] </ref>). The decoloring for hypergraphs of dimension 3 is based on a simple fact: if a hyperedge of size 3 is contained in C [ C 0 , then it intersects exactly 4 one of C and C 0 in a single vertex. <p> By lemma 1 the number of hyperedges in the complement B (; h) of B (; h) is at least r (r 1)=2 2c 0 =c 1 r 2 (1=4 2c 0 =c 1 ) r 2 : Procedure F IN DIS invokes the procedure M AT CH of <ref> [5] </ref> to find a matching M in B (; h) of size d (1=4 2c 0 =c 1 ) re &lt; (1=4 2c 0 =c 1 ) r + 1: F IN DIS merges all pairs of color classes (C; C 0 ) where (C; C 0 ) is a hyperedge <p> Procedure F IN DIS can be implemented to run in parallel time O (log 2 n) time on n + m EREW processors using standard techniques. These techniques are described in <ref> [5] </ref> and carry over to our problem with only minor modifications. We leave this as a straightforward exercise. 3 Concluding Remarks In this paper we have presented an efficient parallel algorithm for finding a maximal independent set in a hypergraph of dimension 3.
Reference: [6] <author> M. Goldberg, T. Spencer, </author> <title> Constructing a Maximal Independent Set in Parallel, </title> <journal> SIAM J. Disc. Math., </journal> <volume> vol. 2, </volume> <year> 1989, </year> <pages> pp. 322-328. </pages>
Reference-contexts: An independent set in H is a subset of V that does not contain any hyperedge of E; an independent set is maximal if it is not properly contained in another independent set. Although several efficient parallel algorithms ([5], <ref> [6] </ref>, [1], [10]) are known for computing a maximal independent set in ordinary graphs (i.e., hypergraphs of dimension 2), the question of whether there is an NC algorithm for arbitrary hypergraphs is still open ([7]).
Reference: [7] <author> R. Karp, V. Ramachandran, </author> <title> Parallel algorithms for shared memory machines, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <editor> J. Van Leeuwen, ed., </editor> <publisher> North Holland, </publisher> <year> 1990, </year> <pages> pp. 869-941. </pages>
Reference-contexts: For the definition of the EREW PRAM model and complexity classes such as NC and RNC the reader is referred to <ref> [7] </ref>. The first parallel algorithm for the 3-dimensional case was independently discov ered by Dahlhaus & Karpinski ([4]) and Kelsen ([8]). 2 2 The Algorithm and its Analysis In this section we prove the following result.
Reference: [8] <author> P. Kelsen, </author> <title> An efficient parallel algorithm for finding a maximal independent set in hypergraphs of dimension 3, </title> <type> manuscript, </type> <institution> Department of Computer Sciences, University of Texas, Austin, TX, </institution> <month> January </month> <year> 1990. </year>
Reference: [9] <author> P.Kelsen, </author> <title> On the Parallel Complexity of Computing a Maximal Independent Set in a Hypergraph, </title> <booktitle> Proc. 24 th ACM STOC, </booktitle> <year> 1992. </year> <month> 8 </month>
Reference-contexts: The only nontrivial known parallel algorithm for this problem is a randomized algorithm by Beame and Luby ([3]): they claim that their algorithm is in randomized NC if the dimension of the hypergraph is bounded by some fixed constant; for a complete analysis of this algorithm see <ref> [9] </ref>. For the definition of the EREW PRAM model and complexity classes such as NC and RNC the reader is referred to [7].
Reference: [10] <author> M. Luby, </author> <title> A simple parallel algorithm for the maximal independent set problem, </title> <journal> SIAM J. Computing, </journal> <volume> vol. 15, </volume> <year> 1986, </year> <pages> pp. 1036-1053. 9 </pages>
Reference-contexts: An independent set in H is a subset of V that does not contain any hyperedge of E; an independent set is maximal if it is not properly contained in another independent set. Although several efficient parallel algorithms ([5], [6], [1], <ref> [10] </ref>) are known for computing a maximal independent set in ordinary graphs (i.e., hypergraphs of dimension 2), the question of whether there is an NC algorithm for arbitrary hypergraphs is still open ([7]).
References-found: 10

