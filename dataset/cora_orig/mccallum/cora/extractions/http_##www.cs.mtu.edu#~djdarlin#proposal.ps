URL: http://www.cs.mtu.edu/~djdarlin/proposal.ps
Refering-URL: http://www.cs.mtu.edu/~djdarlin/cs520.html
Root-URL: http://www.cs.mtu.edu
Title: Robust Stable Predicate Evaluation Using Roughly Synchronized Clocks  
Author: Donald J. Darling, Jr. 
Degree: Thesis Proposal  
Date: January 27, 1999  
Affiliation: Michigan Technological University Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Flaviu Cristian. </author> <title> Probabilistic clock synchronization. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 146-158, </pages> <year> 1989. </year>
Reference-contexts: Also, a maximum delay cannot be placed on a message that is lost. Cristian addressed these problems when he developed a probabilistic clock synchronization protocol <ref> [1] </ref>.
Reference: [2] <author> Joel Hollingsworth. </author> <title> Kernel-to-kernel message passing. </title> <note> http://www.cs.wm.edu/~jkholl/k2k/, January 1999. </note> <institution> The College of William and Mary in Virginia. </institution>
Reference-contexts: Since our system only consists of a single LAN, we can benefit by bypassing these protocols, and transmitting messages between the nodes directly. We intend to do this by using kernel-to-kernel message passing routines that are currently under development by Joel Hollingsworth <ref> [2] </ref>. These modified kernel routines should significantly decrease message delivery time, allowing the nodes to make more precise clock readings. Once a method for efficient message passing is in place, we will implement Cristian's probabilistic clock synchronization protocol.
Reference: [3] <author> Ten-Hwang Lai. </author> <title> Termination detection for dynamically distributed systems with non-first-in-first-out communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 3 </volume> <pages> 577-599, </pages> <year> 1986. </year>
Reference-contexts: As an example, a server that can replicate itself to lessen its work load would be part of a dynamic system. Unlike static systems, very few protocols exist for detecting global predicates in dynamic systems. One protocol was given by Lai <ref> [3] </ref>, but his protocol relies on message passing alone, and is very lengthy and cumbersome. We predict that a time-based protocol will make this task considerably less complex and more efficient, as was the case with static systems. The schema presented by Mayo and Kearns accounts only for static systems.
Reference: [4] <author> Jean Mayo. </author> <title> Global State Predicates in Rough Real Time. </title> <type> PhD thesis, </type> <institution> The College of William and Mary in Virginia, </institution> <year> 1997. </year>
Reference-contexts: When we are able to make this assumption about the system clocks, the task of evaluating global predicates becomes considerably less complex than when other methods are used <ref> [4] </ref>. We propose to develop a time-based protocol for evaluating global stable predicates in distributed systems. Stable predicates are predicates that, once true, remain true forever. As an example, consider a synchronous system consisting of N processes. <p> These protocols were very complex, and hard to understand. It was later shown that global predicate detection is much easier if certain assumptions can be made about the system clocks <ref> [4] </ref>. Rana developed a token-based protocol for detecting distributed termination (a global stable predicate) using the assumption that all clocks in the system are perfectly synchronized [6]. Although this protocol is simple and intuitive, our inability to perfectly synchronize clocks makes this protocol too idealistic.
Reference: [5] <author> Jean Mayo and Phil Kearns. </author> <title> A time-based schema for stable predicate evaluation. </title> <editor> In Yi Pan, Selim G. Akl, and Keqin Li, editors, </editor> <booktitle> Proceedings of the Tenth IASTED International Conference on Parallel and Distributed Computing and Systems, </booktitle> <pages> pages 357-362, </pages> <month> October </month> <year> 1998. </year>
Reference-contexts: In previous work, Mayo and Kearns developed a token-based schema that detects global stable predicates using the assumption that clocks are roughly synchronized <ref> [5] </ref>. However, they did not account for the possibility that clocks synchronized with a probabilistic method may lose synchronization. This is an issue that needs to be addressed, since probabilistic methods are commonly used, and have significant advantages over other synchronization techniques. <p> Although this protocol is simple and intuitive, our inability to perfectly synchronize clocks makes this protocol too idealistic. In later work, Mayo and Kearns developed a schema based on Rana's protocol, requiring that the clocks are only roughly synchronized <ref> [5] </ref>. Not only does their protocol maintain the simplicity of Rana's protocol, but it can be easily used since rough clock synchronization is achievable. Their schema detects a global stable predicate over the local process states.
Reference: [6] <author> S. Rana. </author> <title> A distributed solution of the distributed termination problem. </title> <journal> Information Processing Letters, </journal> <volume> 17 </volume> <pages> 43-46, </pages> <year> 1983. </year>
Reference-contexts: It was later shown that global predicate detection is much easier if certain assumptions can be made about the system clocks [4]. Rana developed a token-based protocol for detecting distributed termination (a global stable predicate) using the assumption that all clocks in the system are perfectly synchronized <ref> [6] </ref>. Although this protocol is simple and intuitive, our inability to perfectly synchronize clocks makes this protocol too idealistic. In later work, Mayo and Kearns developed a schema based on Rana's protocol, requiring that the clocks are only roughly synchronized [5].
Reference: [7] <author> J. Welch and N. Lynch. </author> <title> A new fault-tolerant algorithm for clock synchronization. </title> <journal> Information and Computation, </journal> <volume> 77(1) </volume> <pages> 257-274, </pages> <month> April </month> <year> 1988. </year> <month> 18 </month>
Reference-contexts: To accomplish this, the processes need to agree on a time T when they should take a snapshot. If the clocks in the system are perfectly synchronized, this would be an easy task. Unfortunately, it is provably impossible to perfectly synchronize system clocks <ref> [7] </ref>. Because of this, the value T may appear on each local clock at a different moment in real time, resulting in a global state that does not contain any meaningful information. Due to this difficulty, we must resort to other methods for evaluating global predicates.
References-found: 7

