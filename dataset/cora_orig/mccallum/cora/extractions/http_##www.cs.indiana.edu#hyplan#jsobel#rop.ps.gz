URL: http://www.cs.indiana.edu/hyplan/jsobel/rop.ps.gz
Refering-URL: http://www.cs.indiana.edu/hyplan/dfried.html
Root-URL: http://www.cs.indiana.edu
Email: fjsobel,dfriedg@cs.indiana.edu  
Title: An Introduction to Reflection-Oriented Programming  
Author: Jonathan M. Sobel Daniel P. Friedman 
Address: 215 Lindley Hall, Bloomington, IN 47405  
Affiliation: Computer Science Department, Indiana University  
Date: 22 April 1996. 1  
Note: Presented at Reflection '96 in San Francisco on  
Abstract: Most accounts of reflection are in an interpreted framework and tend to assume the availability of particular pieces of the state of a program's interpretation, including the current source code expression. This paper presents a computational account of reflection, drawing a distinction between the meta-level manipulation of data or control and the mere availability of meta-circular implementation details. In particular, this account does not presume the existence of program source code at runtime. The paper introduces a programming paradigm that relies on reflective language features and draws on the power of object-oriented programming. Several examples of the use of these features are provided, along with an explanation of a translation-based implementation. The examples include the measurement of computational expense, the introduction of first-class continuations, and the modification of the semantics of expressed values, all in the framework of reflection-oriented programming. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alan Bawden. </author> <title> Reification without evaluation. </title> <booktitle> In Proceedings of the 1988 ACM Conference on LISP and Functional Programming, </booktitle> <pages> pages 342-351, </pages> <address> Snowbird, Utah, July 1988. </address> <publisher> ACM Press. </publisher>
Reference: [2] <author> Patrick Cousot and Rhadia Cousot. </author> <title> Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Conference Record of the Fourth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 238-252. </pages> <publisher> ACM Press, </publisher> <year> 1977. </year>
Reference: [3] <author> Olivier Danvy and Karoline Malmkjaer. </author> <title> Intensions and extensions in a reflective tower. </title> <booktitle> In Proceedings of the 1988 ACM Conference on LISP and Functional Programming, </booktitle> <pages> pages 327-341, </pages> <address> Snowbird, Utah, July 1988. </address> <publisher> ACM Press. </publisher>
Reference: [4] <author> David A. Espinosa. </author> <title> Semantic Lego. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <address> New York, </address> <year> 1995. </year>
Reference: [5] <author> Andrzej Filinski. </author> <title> Representing monads. </title> <booktitle> In Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 446-457, </pages> <address> New York, </address> <month> January </month> <year> 1994. </year> <note> ACM Press. </note>
Reference-contexts: For example, in a closed system, where it can be assumed that no new reflectives can be introduced, it should be possible to eliminate many calls to ff and fl. (One approach would be to follow the methodology used by Filinski <ref> [5] </ref> for writing direct-style programs that use monads.) A related issue is the partial restriction of the extensibility of reflection-oriented programs. Sometimes, it might be desirable to leave a program only partially open to reflection, especially if total openness would create security risks.
Reference: [6] <author> Cormac Flanagan, Amr Sabry, Bruce F. Duba, and Matthias Felleisen. </author> <title> The essence of compiling with continuations. </title> <booktitle> In Proceedings of the ACM SIGPLAN '93 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 237-247. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference: [7] <author> Daniel P. Friedman and Mitchell Wand. </author> <title> Reification: Reflection without metaphysics. </title> <booktitle> In Conference Record of the 1984 ACM Symposium on LISP and Functional Programming, </booktitle> <pages> pages 348-355, </pages> <address> Austin, Texas, </address> <month> August </month> <year> 1984. </year> <note> ACM Press. </note>
Reference: [8] <author> Stanley Jefferson and Daniel P. Friedman. </author> <title> A simple reflective interpreter. </title> <journal> Lisp and Symbolic Computation, </journal> 9(2/3):181-202, May/June 1996. 
Reference: [9] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [10] <author> Sheng Liang, Paul Hudak, and Mark Jones. </author> <title> Monad transformers and modular interpreters. </title> <booktitle> In Conference Record of POPL '95: 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, </address> <month> January </month> <year> 1995. </year> <note> ACM Press. </note>
Reference: [11] <editor> Pattie Maes. </editor> <title> Concepts and experiments in computational reflection. Proceedings of OOPSLA '87, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 22(12) </volume> <pages> 147-155, </pages> <month> December </month> <year> 1987. </year> <note> Presented at Reflection '96 in San Francisco on 22 April 1996. 20 </note>
Reference: [12] <author> Anurag Mendhekar and Daniel P. Friedman. </author> <title> An exploration of relationships between reflective theories. </title> <booktitle> In Proceedings of Reflection '96, </booktitle> <address> San Francisco, </address> <month> April </month> <year> 1996. </year> <note> To appear. </note>
Reference: [13] <author> Eugenio Moggi. </author> <title> An abstract view of programming languages. </title> <type> Technical Report ECS-LFCS-90-113, </type> <institution> Laboratory for Foundations of Computer Science, University of Edin-burgh, Edinburgh, </institution> <address> Scotland, </address> <month> April </month> <year> 1989. </year>
Reference: [14] <author> Eugenio Moggi. </author> <title> Notions of computation and monads. </title> <journal> Information and Computation, </journal> <volume> 93(1) </volume> <pages> 55-92, </pages> <month> July </month> <year> 1991. </year>
Reference: [15] <author> Gordon D. Plotkin. </author> <title> Call-by-name, call-by-value and the -calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 1(2) </volume> <pages> 125-159, </pages> <month> December </month> <year> 1975. </year>
Reference: [16] <author> David A. Schmidt. </author> <title> Detecting global variables in denotational specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(2) </volume> <pages> 299-310, </pages> <month> April </month> <year> 1985. </year>
Reference: [17] <author> Brian C. Smith. </author> <title> Reflection and semantics in a procedural language. </title> <type> Technical Report MIT-LCS-TR-272, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, Mass., </address> <month> January </month> <year> 1982. </year>
Reference: [18] <author> Brian C. Smith. </author> <title> Reflection and semantics in lisp. </title> <booktitle> In Conference Record of the Eleventh Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 23-35. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1984. </year>
Reference: [19] <author> Philip Wadler. </author> <title> Comprehending monads. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2(4) </volume> <pages> 461-493, </pages> <month> December </month> <year> 1992. </year>
Reference: [20] <author> Mitchell Wand and Daniel P. Friedman. </author> <title> The mystery of the tower revealed: A non-reflective description of the reflective tower. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 1(1) </volume> <pages> 11-38, </pages> <month> June </month> <year> 1988. </year>
References-found: 20

