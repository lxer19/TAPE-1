URL: http://www.cs.wustl.edu/~schmidt/europlop-96/papers/paper17.ps
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-96/ww2-papers.html
Root-URL: 
Email: email: bjorne@nada.kth.se  
Phone: Phone: +46-8-790 6277 Fax: +46-8-790 0930  
Title: 1 Design Patterns for Incorporation of Distribution Mecha-nisms Utilizing an Object-Oriented Environment  
Author: Bjrn Eiderbck 
Address: S-100 44 Stockholm, Sweden  
Affiliation: IPLab, NADA, KTH  
Abstract: The development of a distributed applications is well known to be a difficult task. The debugging, modification maintenance of such applications are even harder. Another difficulty is that the interface building techniques not are matured enough yet and even the most spread IBs are likely to be changed and improved. One way to overcome some of the difficulties is to develop ones own distributed interface builder but if developing such tools not is your premiere issue then this certainly is a to big endeavour and if we also want to get benefits from standardised components this approach is even more insufficient. In this paper we will describe two different patterns. The first pattern is based on a builder pattern and is an essential component of some facilities that utilizes the application building tools of Visual-Works by augmenting them with mechanisms to develop distributed applications. The other one is a pattern that could be used to solve problems with dangling references. We will in particular describe how we can use this pattern to solve a problem that is introduced by the first pattern in accordance to restriction we have made to the dynamics of the implementation. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Eiderbck 1993 Eiderbck, B. and Hgglund, P. </author> <title> MultiGossip a General Distri bution Package in Smalltalk, </title> <booktitle> in Proc. of the First International Conference on Multi-Media Modeling, </booktitle> <address> Singapore, Nov 9-12, </address> <year> 1993, </year> <pages> pp. 293-307. </pages>
Reference-contexts: Throghout the paper we assume that the readers are familiar with the patterns in the book Design Patterns: Elements of Reusable Object-Oriented Software (Gamma et al 1995). 1.1 Background We have developed a distribution package, MultiGossip (MG) <ref> (Eiderbck 1993) </ref>, on top of Vis-ualWorks. The package is completely written in Smalltalk and our aim is to provide programmers with seamless and reflexive distribution mechanisms for all kinds of objects. A particular goal was to enable experimentation of Computer Supported Cooperative Work (CSCW) applications.
Reference: <author> Gamma et al 1995 Gamma, E, Helm, R, Johnson, R, and Vlissides, J. </author> <title> Design Pat terns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <institution> ParcPlace 1992 ParcPlace Systems Inc. ParcPlace VisualWorks"Smalltalk-80, ver. 1.0, 1992. ParcPlace-Digitalk 1995a ParcPlace-Digitalk Inc. VisualWorks"Smalltalk-80, ver. 2.5, 1995. ParcPlace-Digitalk 1995b ParcPlace-Digitalk Inc. VisualWave, ver. 1.0, </institution> <year> 1995. </year>
Reference-contexts: Throghout the paper we assume that the readers are familiar with the patterns in the book Design Patterns: Elements of Reusable Object-Oriented Software <ref> (Gamma et al 1995) </ref>. 1.1 Background We have developed a distribution package, MultiGossip (MG) (Eiderbck 1993), on top of Vis-ualWorks. The package is completely written in Smalltalk and our aim is to provide programmers with seamless and reflexive distribution mechanisms for all kinds of objects. <p> We shall now show how we can use the above described features of an weak array, i.e. weak pointers and information to observers upon object reclamation, in combination with an extended value holder and a new change manager, see the implementation discussion of the observer pattern in <ref> (Gamma et al 1995) </ref>, to solve the following problem: Problem: the problem with dangling references Visual components in applications built with the application builder are related to the models as subscribers to vital changes of them.
References-found: 2

