URL: ftp://ftp.cs.man.ac.uk/pub/hardware-verification/ELLA-PROJECT/D2.3c.ps.gz
Refering-URL: http://www.cs.man.ac.uk/fmethods/projects/ELLA-PROJECT/D2.3c-abstract.html
Root-URL: http://www.cs.man.ac.uk
Email: email: howard@cs.man.ac.uk  
Title: FORMAL VERIFICATION SUPPORT FOR ELLA IED 4/1/1357 Deliverable D2.3c An Algebraic Framework for Action and Process  
Author: Howard Barringer Graham Gough Brian Monahan Alan Williams 
Note: Copyright c fl1994. All rights reserved. Reproduction of all or part of this work is permitted for educational or research purposes on condition that (1) this copyright notice is included, (2) proper attribution to the author or authors is made and (3) no commercial gain is involved. Brian Monahan is now with Harlequin Ltd., Alderley Edge Alan Williams acknowledges additional support from  acknowledges support from the SERC via research grant GR/F 38174.  
Date: January 27, 1995  
Address: Oxford Road, Manchester, UK.  
Affiliation: Department of Computer Science University of Manchester  DRA (Malvern) and Harlequin Ltd (Cambridge) The University of Manchester  
Abstract-found: 0
Intro-found: 1
Reference: <institution> References </institution>
Reference: [BGL + 91] <author> H. Barringer, G. Gough, T. Longshaw, B. Monahan, M. Peim, and A. Williams. </author> <title> Semantics and verification for Boolean Kernel ELLA using IO automata. </title> <booktitle> In Advanced Research Workshop on Correct Hardware Design Methodologies (CHARME'91), </booktitle> <address> Turin, Italy, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: 1 Introduction We began our work on ELLA semantics [BGMW93] by characterising it in terms of a synchronous model of Input/Output Automata <ref> [BGL + 91, LT88] </ref>; these were essentially an elaborate form of Mealy automata. The aim of this work below is to generalise our basic model to provide a (very) general algebraic framework for semantics based upon process algebraic ideas.
Reference: [BGMW92] <author> H. Barringer, G. Gough, B. Monahan, and A. Williams. </author> <title> A semantic framework for kernel ella. Technical Report D2.3a, Formal Verification Support for Ella, IED project 4/1/1357, </title> <month> September </month> <year> 1992. </year>
Reference: [BGMW93] <author> H. Barringer, G. Gough, B. Monahan, and A. Williams. </author> <title> A Semantics for CORE ELLA. </title> <type> Technical Report IED 4/1/1357 Deliverable, </type> <institution> University of Manchester, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction We began our work on ELLA semantics <ref> [BGMW93] </ref> by characterising it in terms of a synchronous model of Input/Output Automata [BGL + 91, LT88]; these were essentially an elaborate form of Mealy automata.
Reference: [BK84] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Inf. and Control, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference: [Hil91] <author> M G Hill. </author> <title> Foundational transformations in kernel ella. Technical Report D1.2a, Formal Verification Support for Ella, IED project 4/1/1357, </title> <month> September </month> <year> 1991. </year>
Reference: [HM92] <author> M.G. Hill and J.D. Morison. </author> <title> Semantics and basic laws of ella. Technical Report D1.2, Formal Verification Support for Ella, IED project 4/1/1357, </title> <month> May </month> <year> 1992. </year>
Reference: [LT88] <author> N.A. Lynch and M.R. Tuttle. </author> <title> An Introduction to Input/Output Automata. </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: 1 Introduction We began our work on ELLA semantics [BGMW93] by characterising it in terms of a synchronous model of Input/Output Automata <ref> [BGL + 91, LT88] </ref>; these were essentially an elaborate form of Mealy automata. The aim of this work below is to generalise our basic model to provide a (very) general algebraic framework for semantics based upon process algebraic ideas. <p> Also note this rule is not infinitary as it stands, but is essentially defined by syntactically uniform substitution. 12 4 Synchronous Mealy Calculus In this section, we give a synchronous instantiation of our general framework given above. The basic intuition for this is inspired by considering I/O automata <ref> [LT88] </ref> as a model of computation appropriate for describing hardware systems. Such systems make simultaneous input/output transactions continually with their environment. It would be inappropriate to consider these systems as making separate input and output transactions no observation could separate them.
Reference: [MDED91] <institution> University of Manchester and RSRE Malvern DRA Electronics Division. Semantics and Verification Foundations for ELLA. </institution> <note> Technical Report IED 4/1/1357 Deliverable D1.1+D2.1, </note> <month> May </month> <year> 1991. </year>
Reference-contexts: This algebra is of the form required for instantiating our framework. The final section briefly states some early conclusions from our work. 2 ELLA and Process Algebras ELLA is a commercially used hardware description language <ref> [MDED91] </ref>. This application forces our model to have a number of characteristics that require extensions to more conventional process algebraic approaches (cf. LOTOS, CCS, SCCS). Our basic requirement is to provide a semantically accurate approach to the verification of systems written in ELLA.
Reference: [M.H91] <author> M.Hennessy and A.Ingolfsdottir. </author> <title> A theory of communicating processes with value-passing. </title> <note> Technical Report (to appear in Information and Computation 7/91, </note> <institution> University of Sussex, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: be said that process calculi take the assumption of synchronous communication as primitive - asynchronous communication being then modelled by the introduction of an intermediary `buffer' process representing the transport medium for signals. 2.4 Other work A number of existing approaches have dealt with various aspects of this such as <ref> [Pon92, Win89, M.H91] </ref>. We briefly describe some work done by Winskel, although other work should also be discussed. As noted by Winskel [Win84], the notion of synchronous and asynchronous action can be captured by the notion of a synchronisation algebra. <p> Rather than concentrating complexity within the process framework, this allows a better separation of concerns between the state control structure and functional value framework. Future work involves understanding existing attempts by Hennessy, Milner and other to develop full value-passing forms of process algebra <ref> [Pon92, Win89, M.H91] </ref>. We hope to do so by addressing fundamental concerns connected to practical verification, such as the bundling of actions to further separate data and control. 30
Reference: [Mil82] <author> R. Milner. </author> <title> On relating synchrony and asynchrony. </title> <journal> TCS, </journal> <year> 1982. </year>
Reference-contexts: Unfortunately, this will mean that we will lose the elegant group structure as required by standard treatments of action products in SCCS. Nevertheless, our treatment remains consistent with Milner's most basic requirement that the action product be a symmetric monoid <ref> [Mil82] </ref>. However, we find some encouragement for our decision in the work on the Algebra of Synchronous Systems (ASP) by Bergstra and Klop, and by Weijland.
Reference: [Mil89a] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of LNCS. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The most basic of these is the notion of general bisimilarity which essentially forces process terms to denote the collection of all possible ways of continuing. This is of course essentially the same as saying that a process denotes a generalised form of synchronisation tree <ref> [Win84, Mil89a] </ref>. General bisimilarity is therefore the finest congruence on processes that we will wish to consider. 3.5.1 General Bisimilarity Following Milner [Mil89b], we can now give definitions for the generic framework of the notion of gen eral bisimilarity.
Reference: [Mil89b] <author> R. Milner. </author> <title> Concurrency and Communication. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: This is of course essentially the same as saying that a process denotes a generalised form of synchronisation tree [Win84, Mil89a]. General bisimilarity is therefore the finest congruence on processes that we will wish to consider. 3.5.1 General Bisimilarity Following Milner <ref> [Mil89b] </ref>, we can now give definitions for the generic framework of the notion of gen eral bisimilarity.
Reference: [Pon92] <author> Alban Ponse. </author> <title> Process Algebras with Data. </title> <type> PhD thesis, </type> <year> 1992. </year>
Reference-contexts: be said that process calculi take the assumption of synchronous communication as primitive - asynchronous communication being then modelled by the introduction of an intermediary `buffer' process representing the transport medium for signals. 2.4 Other work A number of existing approaches have dealt with various aspects of this such as <ref> [Pon92, Win89, M.H91] </ref>. We briefly describe some work done by Winskel, although other work should also be discussed. As noted by Winskel [Win84], the notion of synchronous and asynchronous action can be captured by the notion of a synchronisation algebra. <p> Rather than concentrating complexity within the process framework, this allows a better separation of concerns between the state control structure and functional value framework. Future work involves understanding existing attempts by Hennessy, Milner and other to develop full value-passing forms of process algebra <ref> [Pon92, Win89, M.H91] </ref>. We hope to do so by addressing fundamental concerns connected to practical verification, such as the bundling of actions to further separate data and control. 30
Reference: [Win84] <author> Glynn Winskel. </author> <title> Synchronisation trees. </title> <journal> TCS, </journal> <volume> 34:33 - 82, </volume> <year> 1984. </year>
Reference-contexts: We briefly describe some work done by Winskel, although other work should also be discussed. As noted by Winskel <ref> [Win84] </ref>, the notion of synchronous and asynchronous action can be captured by the notion of a synchronisation algebra. In [Win89], Winskel uses indexed categories to give a more abstract characterisation of transition systems than the previous treatment using synchronisation algebras [Win84]. <p> As noted by Winskel <ref> [Win84] </ref>, the notion of synchronous and asynchronous action can be captured by the notion of a synchronisation algebra. In [Win89], Winskel uses indexed categories to give a more abstract characterisation of transition systems than the previous treatment using synchronisation algebras [Win84]. As a fundamental notion, he allows a special stuttering step what we have called i. <p> The most basic of these is the notion of general bisimilarity which essentially forces process terms to denote the collection of all possible ways of continuing. This is of course essentially the same as saying that a process denotes a generalised form of synchronisation tree <ref> [Win84, Mil89a] </ref>. General bisimilarity is therefore the finest congruence on processes that we will wish to consider. 3.5.1 General Bisimilarity Following Milner [Mil89b], we can now give definitions for the generic framework of the notion of gen eral bisimilarity.
Reference: [Win89] <author> Glynn Winskel. </author> <title> A compositional proof system on a category of labelled transition systems. </title> <type> Technical Report DAIMI PB-294, </type> <institution> Computer Science Dept., Aarhus University, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: be said that process calculi take the assumption of synchronous communication as primitive - asynchronous communication being then modelled by the introduction of an intermediary `buffer' process representing the transport medium for signals. 2.4 Other work A number of existing approaches have dealt with various aspects of this such as <ref> [Pon92, Win89, M.H91] </ref>. We briefly describe some work done by Winskel, although other work should also be discussed. As noted by Winskel [Win84], the notion of synchronous and asynchronous action can be captured by the notion of a synchronisation algebra. <p> We briefly describe some work done by Winskel, although other work should also be discussed. As noted by Winskel [Win84], the notion of synchronous and asynchronous action can be captured by the notion of a synchronisation algebra. In <ref> [Win89] </ref>, Winskel uses indexed categories to give a more abstract characterisation of transition systems than the previous treatment using synchronisation algebras [Win84]. As a fundamental notion, he allows a special stuttering step what we have called i. <p> Rather than concentrating complexity within the process framework, this allows a better separation of concerns between the state control structure and functional value framework. Future work involves understanding existing attempts by Hennessy, Milner and other to develop full value-passing forms of process algebra <ref> [Pon92, Win89, M.H91] </ref>. We hope to do so by addressing fundamental concerns connected to practical verification, such as the bundling of actions to further separate data and control. 30
Reference: [W.P89] <author> W.P.Weijland. </author> <title> The Algebra of Synchronous Processes. </title> <journal> Fund. Inf., </journal> <volume> 12:139 - 162, </volume> <year> 1989. </year> <month> 31 </month>
References-found: 17

