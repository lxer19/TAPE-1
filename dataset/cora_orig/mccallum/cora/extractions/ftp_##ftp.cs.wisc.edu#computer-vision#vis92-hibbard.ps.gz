URL: ftp://ftp.cs.wisc.edu/computer-vision/vis92-hibbard.ps.gz
Refering-URL: http://www.cs.wisc.edu/computer-vision/pubs.html
Root-URL: 
Title: Display of Scientific Data Structures for Algorithm Visualization provide a set of tools for designing
Author: William Hibbard & Charles R. Dyer and Brian Paul 
Note: The Balsa and Zeus systems [1]  2: The  
Affiliation: 1 Space Science and Engineering Center 2 Department of Computer Sciences University of Wisconsin-Madison  
Abstract: algorithms as networks of modules. The data flow architecture is popular because of the flexibility of mixing calculation modules with display modules, and because of its easy graphical user interface. However, data flow networks are not generally used for developing detailed algorithms. Current data flow implementations support finite sets of data structures; in order to support algorithm details they would need to support user-definable, applicationspecific data structures. We present a technique for defining graphical depictions for all the data types defined in an algorithm. The ability to display arbitrary combinations of an algorithm's data objects in a common frame of reference, coupled with interactive control of algorithm execution, provides a powerful way to understand algorithm behavior. Type definitions are constrained so that all primitive values occurring in data objects are assigned scalar types. A graphical display, including user interaction with the display, is modeled by a special data type. Mappings from the scalar types into the display model type provide a simple user interface for controlling how all data types are depicted, without the need for typespecific graphics logic. The Powervision system [6] uses an objectoriented language to support interactive development of image processing algorithms. The system includes a fixed set of display methods, defined in terms of a set of virtual functions for accessing data objects. As algorithm designers define new object classes, they must ensure that the virtual access functions extend to those classes, and may need to design new display methods for particularly novel classes. The Powervision system exploits object-oriented techniques to reduce the amount of program logic needed to display new object classes, but the system does not eliminate it. 1: Introduction Designing scientific algorithms is something of an art. For example, algorithms for extracting useful information from remotely sensed data are based on well understood mathematical and statistical techniques, but often combine these techniques in problem specific ways that can only be determined experimentally. Scientists can usually recognize incorrect results in graphical depictions of the output of their algorithms. To find the source of errors they need a way to apply this same visual understanding to the internal logic of their algorithms. Interactive debugging systems allow scientists to step through program logic and to print the values of program variables and arrays, in order to track down low-level bugs. They need the same sort of interactive capability applied to diagnosing problems with high-level algorithm behavior. However, where low-level logic can be understood from a few printed values, high-level behavior involves masses of data that can only be understood through visualization. Thus there is a need for techniques for generating graphical depictions of the internal data objects of scientific algorithms. In order to be useful to scientists, the user interface for controlling these depictions should be simple and not require graphics expertise. In this paper we describe a technique, that we call the "scalar mapping technique", for generating graphical depictions of the internal data objects of scientific algorithms, without the need for typespecific display logic. We also describe an implementation of this technique in the VISAD (VISualization for Algorithm Development) system, an experimental laboratory for developing algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brown, M., and R. Sedgewick, </author> <title> 1984; A system for algorithm animation; Computer Graphics 18(3), 177-186. 5: Plans for further development </title>
Reference: [2] <author> Dyer, D., </author> <title> 1990; A dataflow toolkit for visualization; Computer Graphics and Applications, 10(4), 60-69. We are generating a library of standard image analysis and remote sensing functions callable by VISAD programs. We are also adapting VISAD for distributed execution, enabling programs to call functions on remote computers. </title>
Reference-contexts: also models a graphical display, including user interaction with the display, as a special data type whose primitive values have one of a finite set of display scalar The data flow architecture [3] is widely used for scientific visualization, with implementations including AVS [9], SGI Explorer, Khoros [7] and apE <ref> [2] </ref>. It provides a graphical user interface for specifying 1 types.
Reference: [3] <author> Haeberli, P., </author> <year> 1988; </year> <month> ConMan: </month> <title> A visual programming language for interactive graphics; Computer Graphics 22(4), </title> <type> 103-111. </type>
Reference-contexts: The technique also models a graphical display, including user interaction with the display, as a special data type whose primitive values have one of a finite set of display scalar The data flow architecture <ref> [3] </ref> is widely used for scientific visualization, with implementations including AVS [9], SGI Explorer, Khoros [7] and apE [2]. It provides a graphical user interface for specifying 1 types.
Reference: [4] <author> Hibbard, W. and C. Dyer, </author> <title> 1991; Automated display of geometric data types. UW Computer Sciences Technical Report #1015. We plan to extend the definition of the display type by including real display scalars for transparency and reflectivity, and a real3d display scalar for vector, in the voxel tuple. Scalars mapped to these new display scalars would be depicted by complex volume rendering and flow rendering techniques. </title>
Reference-contexts: The domains D (real2d), D (real3d) and D (string) are similarly defined as the unions of finite sub-domains. There are two equivalent formulations of the DISPLAY function. One formulation composes the DISPLAY function from a sequence of basic type transformations <ref> [4] </ref>. The other is in terms of a tree structure defined for data objects, and is described here.
Reference: [5] <author> Hibbard, W., C. Dyer and B. Paul, </author> <title> 1992; A development environment for data analysis algorithms. </title> <booktitle> Preprints, Conf. Interactive Information and Processing Systems for Meteorology, Oceanography, and Hydrology. </booktitle> <address> Atlanta, </address> <publisher> American Meteorology Society. </publisher> <month> 101-107. </month> <title> We plan to extend the set T of data types by adding type constructors for lists, trees and other complex linked structures. We will extend the DISPLAY function to generate diagrams of linked structures, and to provide interaction mechanisms that allow the user to traverse linked structures. In order to do this, linked structures will probably be included in an extended definition of the display type. </title>
Reference-contexts: The scalar color has primitive type real3d and is the color value of a voxel. The scalars contour_i have 3: The VISAD system The scalar mapping technique is implemented in the VISAD system <ref> [5] </ref>, which has been used to demonstrate 2 the effectiveness of the technique for supporting experiments with a variety of algorithms, including an algorithm for discriminating clouds in multi-spectral satellite images. indexed by image_region values. A data object of type visir_set_sequence is a time sequence of partitioned images.
Reference: [6] <author> McConnell, C. and D. Lawton, </author> <booktitle> 1988; IU software environments; Proc. IUW, </booktitle> <pages> 666-677. </pages>
Reference: [7] <author> Rasure, J., D. Argiro, T. Sauer, and C. Williams, </author> <title> 1990; A visual language and software development environment for image processing; International J. </title> <journal> of Imaging Systems and Technology, </journal> <volume> Vol. 2, </volume> <month> 183-199. </month> <title> We plan to extend the parallel algorithm for the DISPLAY function to a scalable algorithm running on large numbers of processors, in order to increase interactivity for large data objects. </title>
Reference-contexts: The technique also models a graphical display, including user interaction with the display, as a special data type whose primitive values have one of a finite set of display scalar The data flow architecture [3] is widely used for scientific visualization, with implementations including AVS [9], SGI Explorer, Khoros <ref> [7] </ref> and apE [2]. It provides a graphical user interface for specifying 1 types.
Reference: [8] <author> Schmidt, D. A., </author> <title> 1986; Denotational Semantics. Wm. </title> <address> C. </address> <publisher> Brown Publishers. </publisher>
Reference-contexts: The domains of tuple types are defined by: D t t missing D t D t n n 1 1 Each domain D (t) has a lattice structure <ref> [8] </ref>, with the missing value as its least element. The half-open intervals in D (real) are approximations to values in R and are ordered by the inverse of set inclusion; that is, in the lattice structure, an interval is "less" than its sub-intervals.

References-found: 8

