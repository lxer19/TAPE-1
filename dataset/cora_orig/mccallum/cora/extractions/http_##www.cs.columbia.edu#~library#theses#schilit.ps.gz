URL: http://www.cs.columbia.edu/~library/theses/schilit.ps.gz
Refering-URL: http://www.cs.columbia.edu/home/phd_prog/alumni.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A System Architecture for Context-Aware Mobile Computing  
Degree: William Noah Schilit Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the Graduate School of Arts and Sciences  
Date: 1995  
Affiliation: COLUMBIA UNIVERSITY  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Arup Acharya and B. R. Badrinath. </author> <title> Delivering multicast messages in networks with mobile hosts. </title> <booktitle> In The 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 292-299, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In addition, depending on the implementation, other multicast management messages might occur over time. One problem is that algorithms for wireless multicast are still under development so there is no standard cost. However, some of the evolving wireless multicast protocols, such as <ref> [1] </ref>, use reliable management messages over the wireless medium and employ a base sta 64 tion proxy to handle other traffic.
Reference: [2] <author> Norman Adams, Rich Gold, Bill N. Schilit, Michael Tso, and Roy Want. </author> <title> An infrared network for mobile computers. </title> <booktitle> In Proceedings USENIX Symposium on Mobile & Location-independent Computing, </booktitle> <pages> pages 41-52. </pages> <publisher> USENIX Association, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: In order to meet the requirement of location information, there are a variety of technologies available for tracking the locations of people and mobile computers. Active badges [44] can be attached to objects and monitored by sensors in the ceilings of rooms and corridors. Wireless nano-cellular communications <ref> [2, 12, 20, 34] </ref> can be used to communicate with palmtop and notebook computers and provide room-sized cell location information. Radio-based triangulation systems, most notably the Global Positioning System (GPS), is another location sensing technology [19, 37]. <p> This section briefly surveys some of these projects. The PARCTAB system [34, 45] is based on palm-sized wireless PARCTAB computers (known generically as tabs) and an infrared communication system that links them 33 to each other and to desktop computers through a local area network. The tab infrared network <ref> [2] </ref> consists of cells defined by the walls of a room surrounding an IR transceiver. These small cells, referred to as nanocells, enable the system to pin down a user's location to the resolution of a room. <p> This chapter starts with a description of the PARCTAB's hardware, network and system design. Only a general overview is presented, further information may be found in <ref> [2, 34, 45] </ref>. The chapter continues with a description of how the PARCTAB system integrates into the context-aware architecture presented earlier, and concludes with a description of prototype applications. 6.1 Guiding Principles The PARCTAB system consists of palm-sized mobile computers that can communicate wirelessly to workstation-based applications.
Reference: [3] <author> Alfred V. Aho, John E. Hopcroft, and Jeffrey D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: The same approach can be made more efficient by pruning the search to only include certain geographic containers. The path information that is loaded into the AMS at initialization time is computed using the all pairs shortest path algorithm <ref> [3] </ref>. This computation takes time O (n 3 ) and space O (n 2 ) for a graph of n vertices. For our AMS configuration there are 127 vertices (locations) and 136 edges.
Reference: [4] <author> Apple Computer. </author> <title> Inside Macintosh Volume I, </title> <month> September </month> <year> 1987. </year>
Reference-contexts: Table 4.2: Query and Subscribe Interface frequently, the registrations for the servers do not. This means that a name lookup for a server registration is not a difficult problem and can use a number of existing naming services such as DNS [40] or NBP <ref> [4] </ref>. 4.3.2 Queries The dynamic environment interface provides two methods for retrieving objects from an environment: query and subscribe. These are shown in Table 4.2. Query synchronously returns objects and subscribe initiates a standing query that causes asynchronous delivery of objects.
Reference: [5] <author> Nicholas Carriero and David Gelernter. </author> <title> How to write parallel programs: A guide to the perplexed. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 323-357, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Our communication mechanism handles scaling and overload conditions for systems covering medium-sized regions, such as buildings and small campuses, whereas Harter's system uses simple unicast remote procedure call. 3.4 Information Dissemination Linda <ref> [5, 6, 7] </ref> is a communication mechanism developed by David Gelernter and Nicholas Carriero at Yale University. Linda defines a process creation and coordination abstraction in which processes communicate through a shared data space called a tuple space.
Reference: [6] <author> Nicholas Carriero and David Gelernter. </author> <title> Linda in context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Our communication mechanism handles scaling and overload conditions for systems covering medium-sized regions, such as buildings and small campuses, whereas Harter's system uses simple unicast remote procedure call. 3.4 Information Dissemination Linda <ref> [5, 6, 7] </ref> is a communication mechanism developed by David Gelernter and Nicholas Carriero at Yale University. Linda defines a process creation and coordination abstraction in which processes communicate through a shared data space called a tuple space. <p> In order to handle the problem of scaling we partition the information into individual dynamic environment servers. Each server manages a set of objects (an environment) and delivers updates to clients that have previously shown interest by subscribing to the server. This tradeoff, compared to systems like Linda <ref> [6] </ref>, which has a single global data space, requires that clients know about the structure of the dynamic environment universe. That is, clients must know which servers contain the information they are interested in.
Reference: [7] <author> Nicholas Carriero and David Gelernter. </author> <title> Coordination languages and their significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 96-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: One such approach is to employ an open system composed of dynamic collections of asynchronous, parallel, communicating agents <ref> [7] </ref>. The difference is that instead of defining individual task-specific interfaces for operations such as printing, a common data and communication mechanism is employed that provides the basis for a number of tasks. <p> Our communication mechanism handles scaling and overload conditions for systems covering medium-sized regions, such as buildings and small campuses, whereas Harter's system uses simple unicast remote procedure call. 3.4 Information Dissemination Linda <ref> [5, 6, 7] </ref> is a communication mechanism developed by David Gelernter and Nicholas Carriero at Yale University. Linda defines a process creation and coordination abstraction in which processes communicate through a shared data space called a tuple space. <p> This separation fosters portability, heterogeneity, and economy in that the same mechanism can be used for interaction among multi-processors for fine grain parallelism and among distributed-processes for course grain parallelism. Linda has been implemented for various languages, including C, Lisp, Postscript, Modula-2, and even Fortran <ref> [7] </ref>. A tuple space is a single shared communication channel that does not scale well. The approach proposed in [26] is to segment a tuple space into multiple, recursive, tuple spaces where each is used for communication between coordinating processes.
Reference: [8] <author> David D. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <booktitle> In Proceedings of the Tenth Symposium on Operating Systems Principles, Shark Is., </booktitle> <address> WA, </address> <year> 1985. </year>
Reference-contexts: Essentially our design employs an extension and elaboration of the abstraction known as callback or upcall messages in which asynchronous messages or remote procedure calls are sent by servers to clients <ref> [8] </ref>. A key point is that this interface provides a uniform way to see the environment changes occurring in a mobile distributed system. It also provides a uniform fault model.
Reference: [9] <author> John R. Corbin. </author> <title> The Art of Distributed Applications. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: These consequences are described in more detail below. Protocol Changes Network protocols are often tuned for operation under certain static conditions. The Sun RPC protocol <ref> [9] </ref>, for example, has message retransmission tuned for an Ethernet. This and other early decisions of engineering trade-offs becomes a problem when the 14 underlying assumptions change. Specifically, when communication characteristics are dynamic, protocols must quickly and accurately adapt to new configurations. <p> Context-aware mobile computing should work with large as well as small changes in location. Fault tolerance and gracefully degraded operation when disconnected are desirable because network disconnection may be common on wireless hosts. One possibility is to expose network connectivity to applications the same as many RPC systems do <ref> [9] </ref>. Applications would then be responsible for connection recovery. Alternatively system soft 28 ware could timeout and automatically re-connect to servers without involving applications. However, if servers are restarted then this would require recreating server state.
Reference: [10] <author> S. Deering. </author> <title> Host extensions for IP multicasting. Request for Comments (Standard) RFC 1112, </title> <institution> Internet Engineering Task Force, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: However, there are hidden costs. The IP multicast implementation uses maintenance messages in order to manage group membership <ref> [10] </ref>. So a mobile host invoking a system call to join a multicast group would also generate an extra message. In addition, depending on the implementation, other multicast management messages might occur over time.
Reference: [11] <author> Stephen E. Deering and David R. Cheriton. </author> <title> Multicast routing in datagram internet-works and extended LANs. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(2) </volume> <pages> 85-110, </pages> <month> May </month> <year> 1990. </year> <month> 142 </month>
Reference-contexts: These characteristics, except perhaps for the last, are commonly found in architectures of LANs and WANs. Multicast, though less common, is available on the Internet <ref> [11] </ref>, and its deployment is quickly spreading as new application domains are developed to exploit it [13]. We assume that multicast communication costs, on the average, are unit message cost for sending, and reception costs are comparable to hardware filtering of broadcast messages. <p> Waiting for quiescence over a time interval and batching the updates would reduce the message count to 1 to each of n clients, but would sacrifice timeliness. Using broadcast or multicast <ref> [11] </ref> for the updates would reduce the aggregate message traffic even further, but would likely increase the traffic seen by some clients, since not all clients are interested in exactly the same information.
Reference: [12] <author> Alan Demers, Scott Elrod, Christopher Kantarjiev, and Edward Richley. </author> <title> A nano-cellular local area network using near-field RF coupling. </title> <booktitle> In Proceedings of Virginia Tech's Fourth Symposium on Wireless Personal Communications, </booktitle> <pages> pages 10.1-10.16, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In order to meet the requirement of location information, there are a variety of technologies available for tracking the locations of people and mobile computers. Active badges [44] can be attached to objects and monitored by sensors in the ceilings of rooms and corridors. Wireless nano-cellular communications <ref> [2, 12, 20, 34] </ref> can be used to communicate with palmtop and notebook computers and provide room-sized cell location information. Radio-based triangulation systems, most notably the Global Positioning System (GPS), is another location sensing technology [19, 37].
Reference: [13] <author> Ron Frederick. </author> <title> Experiences with real-time software video compression. </title> <booktitle> In Sixth International Workshop on Packet Video, </booktitle> <address> Portland, OR, </address> <month> September 26-27 </month> <year> 1994. </year>
Reference-contexts: These characteristics, except perhaps for the last, are commonly found in architectures of LANs and WANs. Multicast, though less common, is available on the Internet [11], and its deployment is quickly spreading as new application domains are developed to exploit it <ref> [13] </ref>. We assume that multicast communication costs, on the average, are unit message cost for sending, and reception costs are comparable to hardware filtering of broadcast messages. Some implementations are more efficient while others are less.
Reference: [14] <author> R. A. Gingell, J. P. Moran, and W. A. Shannon. </author> <title> Virtual memory architecture in SunOS. </title> <booktitle> In Proceedings Summer 1987 USENIX Technical Conference, </booktitle> <pages> pages 81-94. </pages> <publisher> USENIX Association, </publisher> <month> June </month> <year> 1987. </year>
Reference-contexts: Polling environment objects is another approach for integrating context information into existing software. The goal is to provide an efficient facility in the Unix development environment. The design uses a separate manager-process that is capable of asynchronous update along with shared memory <ref> [14, 48] </ref> to store the dynamic environment. This facility provides low-overhead polling since applications only reference memory instead of performing a system call to find out if the environment has changed. This technique is from Lamport [24] and allows concurrent access to data structures without requiring locks.
Reference: [15] <author> David Goldberg and Michael Tso. </author> <title> How to program networked portable computers. </title> <booktitle> In Proceedings Fourth Workshop on Workstation Operating Systems (WWOS-IV), </booktitle> <pages> pages 30-33. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: As the ideas in this thesis evolved, other people at PARC also recognized the advantage of exposing contextual information. The intelligently autonomous programming 32 model by Tso and Goldberg <ref> [15, 42] </ref> is an approach to designing mobile computer applications that are customized for an intermittently connected environment. Commonly, when unplanned network disconnections occur the user is hung because a required file is not accessible.
Reference: [16] <author> Andy Harter and Andy Hopper. </author> <title> A distributed location system for the active office. </title> <journal> IEEE Network, </journal> <pages> pages 62-70, </pages> <month> January/February </month> <year> 1994. </year>
Reference-contexts: A similar program was built at the Rank Xerox Research Centre. These programs can be viewed as investigating a specific application domain of the more general architecture presented in this thesis. There has been some more general work on location-based systems, including <ref> [16, 44] </ref>. The system concurrently developed by Harter at ORL [16] uses a subscription based location service similar to that described in Chapter 4. The early Olivetti research provided inspiration for our current line of research. <p> These programs can be viewed as investigating a specific application domain of the more general architecture presented in this thesis. There has been some more general work on location-based systems, including [16, 44]. The system concurrently developed by Harter at ORL <ref> [16] </ref> uses a subscription based location service similar to that described in Chapter 4. The early Olivetti research provided inspiration for our current line of research. However, the architecture presented in this thesis is driven by more general configurations and contextual rather than location-specific applications classes.
Reference: [17] <author> J. Ioannidis, D. Duchamp, and G. Q. Maguire Jr. and S. Deering. </author> <title> Protocols for supporting mobile IP hosts. </title> <type> Technical report, </type> <institution> Mobile Hosts Working Group, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: For example, we have also used the infrared network with HP100LX palmtop computers. The standard shell is described in the next section. Communication to mobile hosts is achieved using tab agent processes. A competitive design for the PARCTAB network would be to implement Mobile IP <ref> [17] </ref>. This approach was not chosen in part because of the extra tab-resident software required, and also 104 because the agent can be used to mediate a single communication stream, that is, the agent filters messages from non-current applications before they reach the wireless medium.
Reference: [18] <author> J. Ioannidis, D. Duchamp, and G.Q. Maguire Jr. </author> <title> IP-based protocols for mobile inter-networking. </title> <booktitle> In Proceedings SIGCOMM '91, </booktitle> <pages> pages 235-245. </pages> <publisher> ACM, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: This model presupposes that components can be reached, at least intermittently, by some form of packet-based communications, such as Internet-IP, without knowing the destination's current location. This requires that applications running on mobile hosts either be able to use some form of mobile-IP communications protocol, for example <ref> [18] </ref>, or that an agent architecture be in place in which an agent process on a stationary host takes the responsibility of rerouting packets destined for a mobile host in an appropriate manner. An example of the latter architecture is described in [34]. <p> From a system viewpoint, when mobile hosts can move from one place to another, they may also move out of range of their current wireless cell and into another. This raises the problem of maintaining continued network connectivity, a problem known as Mobile-IP <ref> [18] </ref>. Another system-level consequence of user mobility is authentication. Currently once a user has logged into a machine the expectation is that they remain present at that machine. However, for mobile users interacting with stationary devices, logging out and logging in again are continual actions. <p> Mobile internetworking addresses the problem of providing network access to hosts whose physical location changes over time. Since a route to a mobile host can not be directly deduced from the network address, traditional network routing is insufficient. The solution provided in <ref> [18] </ref> is to first create a virtual mobile network, and second, to add special routers that gateway between the virtual network and the rest of the Internet. The new class of routers, called Mobile Support Routers (MSRs), form a distributed database for translating between virtual and physical addresses.
Reference: [19] <author> Thomas A. Stansell Jr. </author> <title> Civil GPS from a future perspective. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 71(10) </volume> <pages> 1187-1192, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: Wireless nano-cellular communications [2, 12, 20, 34] can be used to communicate with palmtop and notebook computers and provide room-sized cell location information. Radio-based triangulation systems, most notably the Global Positioning System (GPS), is another location sensing technology <ref> [19, 37] </ref>. With less technology, input activity at keyboards and mice can be monitored to detect the presence of logged-in users in front of stationary workstations.
Reference: [20] <author> Christopher A. Kantarjiev, Alan Demers, Ron Frederick, Robert T. Krivacic, and Mark Weiser. </author> <title> Experiences with X in a wireless environment. </title> <booktitle> In Proceedings USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 117-128. </pages> <publisher> USENIX Association, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: In order to meet the requirement of location information, there are a variety of technologies available for tracking the locations of people and mobile computers. Active badges [44] can be attached to objects and monitored by sensors in the ceilings of rooms and corridors. Wireless nano-cellular communications <ref> [2, 12, 20, 34] </ref> can be used to communicate with palmtop and notebook computers and provide room-sized cell location information. Radio-based triangulation systems, most notably the Global Positioning System (GPS), is another location sensing technology [19, 37].
Reference: [21] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the coda file system. </title> <booktitle> In Proceedings Thirteenth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 213-225. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: In this view, mobility and its consequences should be made transparent to applications. For example, the Coda file system has been designed to support disconnected operation transparently 31 using local caching <ref> [21] </ref>. Another example of how systems can support application transparency under mobile conditions is Columbia's mobile internetworking work. Mobile internetworking addresses the problem of providing network access to hosts whose physical location changes over time.
Reference: [22] <author> S.R. Kleiman. Vnodes: </author> <title> an architecture for multiple file types in Sun UNIX. </title> <booktitle> In Summer Conference Proceedings, Atlanta 1986. USENIX Association, </booktitle> <year> 1986. </year>
Reference-contexts: Specifically, whether notification of environment dynamics should be made directly to applications or whether an abstraction, such as device interfaces, can be used to hide the actual system dynamics. In software systems, transparency is enabled by a virtual or generic interface, for example Unix Vnodes <ref> [22] </ref>. This approach aims to provide an abstract interface that hides low-level characteristics of physical devices. The advantage of such an approach is that it simplifies the application or system interaction.
Reference: [23] <author> M.G. Lamming and W.M. Newman. </author> <booktitle> Activity-based information retrieval: Technology in support of personal memory. In Proceedings of IFIP-92. IFIP Congress, </booktitle> <year> 1992. </year>
Reference-contexts: world by providing a display of interesting located objects, both nearby and far away. * To keep a record of located-objects and persons one has encountered, for use by applications such as activity-based information retrieval, which uses the context at the time the data was stored to assist in retrieval <ref> [23] </ref>. * To detect location-specific information, for example, electronic messages left for the user or for public perusal. * To keep a look out for nearby devices that can be used opportunistically by applica tions, such as additional display terminals in a room. * To detect nearby people, located-objects, or services
Reference: [24] <author> Leslie Lamport. </author> <title> Concurrent reading and writing. </title> <journal> Communications of the ACM, </journal> 20(11) 806-811, November 1977. <volume> 143 </volume>
Reference-contexts: This facility provides low-overhead polling since applications only reference memory instead of performing a system call to find out if the environment has changed. This technique is from Lamport <ref> [24] </ref> and allows concurrent access to data structures without requiring locks. This technique operates as follows: an application maps a memory segment containing the dynamic environment into its address space and periodically polls the contents for changes.
Reference: [25] <editor> B.W. Lampson, M. Paul, and H.J. Siegert, editors. </editor> <booktitle> Distributed Systems. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Throughout this chapter specific problems that need to be addressed are described. 2.1 System Model The mobile distributed model presented here is an extension of a standard distributed computing system model. We first describe a representative model based on <ref> [25, 27] </ref>, and then the extensions. Other distributed computing models are also suitable since the basics are fundamentally the same.
Reference: [26] <author> Gilberto Matos and James Purtilo. </author> <title> Reconfiguration of hierarchical tuple-spaces: experiments with Linda-Polylith. </title> <type> Technical Report CS-TR-3153, </type> <institution> University of Mary-land Institute for Advanced Computer Studies, College Park, MD 20742, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Linda has been implemented for various languages, including C, Lisp, Postscript, Modula-2, and even Fortran [7]. A tuple space is a single shared communication channel that does not scale well. The approach proposed in <ref> [26] </ref> is to segment a tuple space into multiple, recursive, tuple spaces where each is used for communication between coordinating processes. However this partitioning adds some complexity requiring a somewhat different approach to building small and large systems.
Reference: [27] <author> Sape M. Mullendar, </author> <title> editor. Distributed Systems. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Throughout this chapter specific problems that need to be addressed are described. 2.1 System Model The mobile distributed model presented here is an extension of a standard distributed computing system model. We first describe a representative model based on <ref> [25, 27] </ref>, and then the extensions. Other distributed computing models are also suitable since the basics are fundamentally the same.
Reference: [28] <author> Greg Nelson, </author> <title> editor. Systems Programming with Modula-3. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: Existing applications programmed in some other language may be ported to access the tab through the use of the agent's RPC interface. 107 We implemented a class-based hierarchy of widgets, loosely modeled on the Trestle window toolkit <ref> [28] </ref>, that provided routine components such as iconic and text buttons, scrollbars, bitmaps, text labels, scrollable text areas, and dialog boxes. Unlike a traditional window system, our widgets do no paint-clipping, since the very small screen generally precludes overlapping of widgets. This greatly simplified the implementation without burdening clients.
Reference: [29] <author> Brian Oki, Manfred Pfluegl, Alex Siegel, and Dale Skeen. </author> <title> The information bus an architecture for extensible distributed systems. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 58-68, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: An alternative approach to subscription-callback is that of an information bus where all changes are broadcast to all applications who then filter information they are interested in <ref> [29, 32, 41] </ref>. This may seem more desirable because it requires no subscription specification by the client and hence a simpler interface. <p> Similarly, the other unicast recipients need not be immediately switched over to multicast since they do not immediately benefit. Another advantage can be gained if user code can be run in routers, in this case the wireless base-stations. This approach is somewhat similar to the Information Bus <ref> [29] </ref>. In the case of the dynamic environment subscriptions, if the base-stations could run user queries then they could filter out all unnecessary information and only broadcast the required object updates. In this design the routers now take a large portion of the AMS workload.
Reference: [30] <author> John K. Ousterhout. </author> <title> Tcl: An embeddable command language. </title> <booktitle> In Proceedings of the 1990 Winter USENIX Conference, </booktitle> <pages> pages 133-146, </pages> <year> 1990. </year>
Reference-contexts: The situation can include when, where, who and what is with you. For example, the next time in the library or the next time I see Marvin, or when I'm back at my desk. In order to permit complicated conditions as reminders, the TCL scripting language <ref> [30] </ref> is used. The basic framework invokes a user's reminder procedures on each change to user environment and set of co-located objects. The reminder procedure has access to the current change in context as well as many other kinds of information.
Reference: [31] <author> Karin Petersen. </author> <title> Tcl/tk for a personal digital assistant. </title> <booktitle> In USENIX Symposium on Very High Level Languages, </booktitle> <pages> pages 41-54. </pages> <publisher> USENIX Association, </publisher> <year> 1994. </year>
Reference-contexts: In this format, the star (*) indicates zero or more occurances of the item. 6.3.5 Application Programming Applications can be written in a scripting language suitable for small applications, or a high-level compiled language. The scripting approach is described in <ref> [31] </ref>. For greater flexibility over the user interface, applications are programmed using Modula-3, a relatively new language that includes a number of features that are valuable for building large systems.
Reference: [32] <author> Steven P. Reiss. </author> <title> Interacting in the FIELD environment. </title> <journal> Software Practice and Experience, </journal> <volume> 20(S1):89-115, </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: An alternative approach to subscription-callback is that of an information bus where all changes are broadcast to all applications who then filter information they are interested in <ref> [29, 32, 41] </ref>. This may seem more desirable because it requires no subscription specification by the client and hence a simpler interface.
Reference: [33] <author> Robert W. Scheifler and James Gettys. </author> <title> X Window System. </title> <publisher> Digital Press, </publisher> <address> third edition, </address> <year> 1992. </year>
Reference-contexts: The X11 windowing system provides a server-based resource manager, Xrdb <ref> [33] </ref>, for communicating user preferences to applications. The advantage of Xrdb is that clients accessing a central server do not need a duplicate (or common) collection of initialization files on all hosts.
Reference: [34] <author> Bill N. Schilit, Norman Adams, Rich Gold, Michael Tso, and Roy Want. </author> <booktitle> The PARCTAB mobile computing system. In Proceedings Fourth Workshop on Workstation Operating Systems (WWOS-IV), </booktitle> <pages> pages 34-39. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: An example of the latter architecture is described in <ref> [34] </ref>. Although vehicular systems may be a desirable topic of study, this thesis focuses on a person-centric world view. As such, the system design is concerned with human-inhabited spaces, pedestrian distances, and human time-scales. <p> In order to meet the requirement of location information, there are a variety of technologies available for tracking the locations of people and mobile computers. Active badges [44] can be attached to objects and monitored by sensors in the ceilings of rooms and corridors. Wireless nano-cellular communications <ref> [2, 12, 20, 34] </ref> can be used to communicate with palmtop and notebook computers and provide room-sized cell location information. Radio-based triangulation systems, most notably the Global Positioning System (GPS), is another location sensing technology [19, 37]. <p> The Computer Science Laboratory (CSL) at Xerox PARC has established a number of research projects to explore this vision. This section briefly surveys some of these projects. The PARCTAB system <ref> [34, 45] </ref> is based on palm-sized wireless PARCTAB computers (known generically as tabs) and an infrared communication system that links them 33 to each other and to desktop computers through a local area network. <p> This chapter starts with a description of the PARCTAB's hardware, network and system design. Only a general overview is presented, further information may be found in <ref> [2, 34, 45] </ref>. The chapter continues with a description of how the PARCTAB system integrates into the context-aware architecture presented earlier, and concludes with a description of prototype applications. 6.1 Guiding Principles The PARCTAB system consists of palm-sized mobile computers that can communicate wirelessly to workstation-based applications.
Reference: [35] <author> Bill N. Schilit, Norman Adams, and Roy Want. </author> <booktitle> Context-aware computing applications. In Proceedings Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 85-90. </pages> <publisher> IEEE, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: Commands were invoked with knowledge about the nearest workstation display and the badge sighting location <ref> [35] </ref>. A similar program was built at the Rank Xerox Research Centre. These programs can be viewed as investigating a specific application domain of the more general architecture presented in this thesis. There has been some more general work on location-based systems, including [16, 44].
Reference: [36] <author> Bill N. Schilit and Daniel Duchamp. </author> <title> Adaptive remote paging for mobile computers. </title> <type> Technical Report CUCS-004-91, </type> <institution> Columbia University Computer Science Department, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: In cases it is also possible for services to automatically and transparently reconfigure in order to maintain a high level of service. One example is an algorithm for paging from a mobile computer into the memory of the closest paging servers <ref> [36] </ref>. One important aspect of this work is that client-server matchups are made dynamically and vary over time. The adaption is controlled by the client measuring communication latency for multiple paging servers and gradually shifting to employ the most efficient ones.
Reference: [37] <author> Leonard Schuchman, Bryant D. Elrod, and A.J. Van Dierendonck. </author> <title> Applicability of an augmented GPS for navigation in the national airspace system. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(11) </volume> <pages> 1709-1727, </pages> <month> November </month> <year> 1989. </year> <month> 144 </month>
Reference-contexts: Wireless nano-cellular communications [2, 12, 20, 34] can be used to communicate with palmtop and notebook computers and provide room-sized cell location information. Radio-based triangulation systems, most notably the Global Positioning System (GPS), is another location sensing technology <ref> [19, 37] </ref>. With less technology, input activity at keyboards and mice can be monitored to detect the presence of logged-in users in front of stationary workstations.
Reference: [38] <author> John Shirley, Wei Hu, and David Magid. </author> <title> Guide to Writing DCE Applications. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Once the client reconnects it also automatically recreates the lost server state which consist of the client's standing queries. Aside from survivability after component failure, this mechanism permits lazy server relocation to a new host. This is similar to automatic binding in DCE <ref> [38] </ref>. Server reconnection is facilitated by two aspects of the architecture. First, binding specifications for environment servers are descriptions of their contents rather than their physical locations, and so can be used to locate servers wherever they are run.
Reference: [39] <author> Mike Spreitzer and Marvin Theimer. </author> <title> Architectural considerations for scalable, secure, mobile computing with location information. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 29-38. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: Finally, the information about locations is limited. There is no easy way to find the relationship or even distance between two locations. This thesis complements the work of the PARCTAB system by providing solutions to these problems. Spreitzer and Theimer describe a location-based application called ubiquitous message delivery <ref> [39] </ref>. This application delivers a message to a mobile user by whatever means are possible. It may employ nearby displays, wireless palmtops, workstations, etc. The decision on how and when the message should be presented to the user may depend on contextual information. <p> The user of this system has only the coarse control over whether they publish or don't publish a user-object for themselves in the active map. Some of these issues are explored in <ref> [39] </ref>. A limited amount of privacy can be obtained when the user agent process publishes the user-object in the active map. Instead of updating the user-object to be in a leaf container, such as a room, the agent can specify some higher level container, such as a building.
Reference: [40] <author> D.B. Terry, M. Painter, D. Riggle, and S. Zhou. </author> <title> The Berkeley Internet Name Domain server. </title> <booktitle> In Proceedings of USENIX Association Summer Conference, </booktitle> <pages> pages 23-31. </pages> <publisher> USENIX Association, </publisher> <year> 1984. </year>
Reference-contexts: Table 4.2: Query and Subscribe Interface frequently, the registrations for the servers do not. This means that a name lookup for a server registration is not a difficult problem and can use a number of existing naming services such as DNS <ref> [40] </ref> or NBP [4]. 4.3.2 Queries The dynamic environment interface provides two methods for retrieving objects from an environment: query and subscribe. These are shown in Table 4.2. Query synchronously returns objects and subscribe initiates a standing query that causes asynchronous delivery of objects.
Reference: [41] <institution> The ToolTalk service. </institution> <note> A SunSoft White Paper. Revision 01, </note> <month> June </month> <year> 1991, </year> <title> SunSoft, </title> <publisher> Inc. </publisher> <address> 2550 Garcia Avenue, Mountain View, CA 94043. </address>
Reference-contexts: An alternative approach to subscription-callback is that of an information bus where all changes are broadcast to all applications who then filter information they are interested in <ref> [29, 32, 41] </ref>. This may seem more desirable because it requires no subscription specification by the client and hence a simpler interface.
Reference: [42] <author> Michael Tso. </author> <title> Using property specifications to achieve graceful disconnected operation in an intermittent mobile computing environment. </title> <type> Technical Report CSL-93-8, </type> <institution> Xerox Palo Alto Research Center, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: One approach towards this end is to have applications adapt user interfaces. A button that requires network resources can be shown in a disabled gray form when the network is offline. In this way intelligent user interfaces can provide feedback on which user operations are unavailable <ref> [42] </ref>. Similarly the confirmation behavior of user interfaces might change for time consuming operations, or the expected time to complete various network intensive functions might be displayed near the buttons that invoke those functions. A second approach is to adapt the behavior of output procedures. <p> As the ideas in this thesis evolved, other people at PARC also recognized the advantage of exposing contextual information. The intelligently autonomous programming 32 model by Tso and Goldberg <ref> [15, 42] </ref> is an approach to designing mobile computer applications that are customized for an intermittently connected environment. Commonly, when unplanned network disconnections occur the user is hung because a required file is not accessible.
Reference: [43] <author> Roy Want and Andy Hopper. </author> <title> Active badges and personal interactive computing objects. </title> <journal> IEEE Transactions on Consumer Electronics, </journal> <volume> 38(1) </volume> <pages> 10-20, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Badge wearers expressed a desire to control call forwarding using context information: who they are with, where they are, and the time of day. Personal control scripts were added to a later version of the system to address this problem <ref> [43] </ref>. Similarly, work by the author explored the use of Active Badges for triggering the execution of Unix commands according to the location of badge wearers, and whether they were entering, leaving, or settled into a particular location.
Reference: [44] <author> Roy Want, Andy Hopper, Veronica Falcao, and Jonathan Gibbons. </author> <title> The active badge location system. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 91-102, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In order to meet the requirement of location information, there are a variety of technologies available for tracking the locations of people and mobile computers. Active badges <ref> [44] </ref> can be attached to objects and monitored by sensors in the ceilings of rooms and corridors. Wireless nano-cellular communications [2, 12, 20, 34] can be used to communicate with palmtop and notebook computers and provide room-sized cell location information. <p> Finally, the use of an active map service for managing context information presented in Chapter 5 provides a set of operations including discover 34 ing geographic relations of containment and path distances. 3.3 Location-based Computing Early work on location-based applications was undertaken by Olivetti Research Lab (ORL) <ref> [44] </ref>. This research focused for the most part on the hardware design and implementation of infrared beaconing badges (called active badges) worn by individuals, and networks of infrared receivers. Unique badge identifiers sent to the stationary receivers provide location information to a software system. <p> A similar program was built at the Rank Xerox Research Centre. These programs can be viewed as investigating a specific application domain of the more general architecture presented in this thesis. There has been some more general work on location-based systems, including <ref> [16, 44] </ref>. The system concurrently developed by Harter at ORL [16] uses a subscription based location service similar to that described in Chapter 4. The early Olivetti research provided inspiration for our current line of research.
Reference: [45] <author> Roy Want, Bill Schilit, Norman Adams, Rich Gold, Karin Petersen, John Ellis, David Goldberg, and Mark Weiser. </author> <title> The PARCTAB ubiquitous computing experiment. </title> <type> Technical Report CSL-95-1, </type> <institution> Xerox Palo Alto Research Center, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Variation in light level therefore can be used to signal adaption in response to low activity. The Xerox PARCTAB, for example, adapts it's beacon rate according to the surrounding light level, slowing down when in dark areas and thereby conserving battery power <ref> [45] </ref>. Similarly readability might be improved by adapting the brightness of displays depending on the ambient light level. Sound is another environmental condition that context-aware software may exploit. Detecting noise levels above a threshold can be used to turn off sound production so as not to participate in a cacophony. <p> The Computer Science Laboratory (CSL) at Xerox PARC has established a number of research projects to explore this vision. This section briefly surveys some of these projects. The PARCTAB system <ref> [34, 45] </ref> is based on palm-sized wireless PARCTAB computers (known generically as tabs) and an infrared communication system that links them 33 to each other and to desktop computers through a local area network. <p> This chapter starts with a description of the PARCTAB's hardware, network and system design. Only a general overview is presented, further information may be found in <ref> [2, 34, 45] </ref>. The chapter continues with a description of how the PARCTAB system integrates into the context-aware architecture presented earlier, and concludes with a description of prototype applications. 6.1 Guiding Principles The PARCTAB system consists of palm-sized mobile computers that can communicate wirelessly to workstation-based applications.
Reference: [46] <author> Mark Weiser. </author> <booktitle> The computer for the 21st century. Scientific American, </booktitle> <volume> 265(3) </volume> <pages> 94-104, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The main point in common between these two systems is the notion that enabling applications to exploit the dynamics in a mobile distributed system is desirable. 3.2 Ubiquitous Computing Ubiquitous computing is the idea that invisible computation everywhere can enhance life in the real world <ref> [46] </ref>. The Computer Science Laboratory (CSL) at Xerox PARC has established a number of research projects to explore this vision. This section briefly surveys some of these projects.
Reference: [47] <author> Mark Weiser. </author> <title> Some computer science issues in ubiquitous computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(7) </volume> <pages> 74-83, </pages> <month> July </month> <year> 1993. </year> <note> In Special Issue on Computer-Augmented Environments. </note>
Reference-contexts: One ramification of mobility in wireless communication is that the number of users in a wireless cell varies dynamically and therefore large concentrations may overload network capacity. A large concentration may occur, for example, when members of an organization all attend a seminar. Weiser <ref> [47] </ref> points out that network bandwidth is divided among all users of a radio cell. Since this value depends on the size and distribution of a user population, he suggests measuring wireless network capacity by bandwidth per cubic meter.
Reference: [48] <author> M. Young, A. Tevanian, R. Rashid, D. Golub, J. Eppinger, J. Chew, W. Bolosky, D. Black, and R. Baron. </author> <title> The duality of memory and communication in the implementation of a multiprocessor operating system. </title> <booktitle> Proceedings of the 11th Symposium on Operating Systems Principles, </booktitle> <pages> pages 63-76, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Polling environment objects is another approach for integrating context information into existing software. The goal is to provide an efficient facility in the Unix development environment. The design uses a separate manager-process that is capable of asynchronous update along with shared memory <ref> [14, 48] </ref> to store the dynamic environment. This facility provides low-overhead polling since applications only reference memory instead of performing a system call to find out if the environment has changed. This technique is from Lamport [24] and allows concurrent access to data structures without requiring locks.
References-found: 48

