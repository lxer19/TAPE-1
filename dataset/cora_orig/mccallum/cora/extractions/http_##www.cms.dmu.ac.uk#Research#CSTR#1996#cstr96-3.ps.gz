URL: http://www.cms.dmu.ac.uk/Research/CSTR/1996/cstr96-3.ps.gz
Refering-URL: http://www.cms.dmu.ac.uk/Research/CSTR/1996/
Root-URL: 
Email: zz  
Title: An Executable Specification Language For Fast Prototyping Parallel Responsive Systems  
Author: H Heping yy H Zedan 
Keyword: Formal Specification, Prototype, Reactive, Parallel System  
Abstract: responsive systems is introduced. The language is equipped with directly executable mathematical data objects, first order predicates, temporal operators, parallel assignment, state and state history, sets, maps and sequences, etc. An abstract system model of a parallel responsive system may be constructed using PSP. Using this model, various dynamic behavior of the system can be studied and analyzed at an early design stage. These include detailed temporal relations between every components in the system. Temporal and functional properties of the system can also be expressed within PSP as (temporal) predicates. Global cause-effect relations and other temporal properties of the system can be tested by executing both the abstract system model and its associated func-tional/temporal assertions. Inconsistency and incompleteness in the abstract design can then be discovered against user's intention before real implementation, thus reducing design cost. PSP is illustrated using a lift system. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> James F. Allen, </author> <title> "Towards a General Theory of Action and Time", </title> <booktitle> Artificial Intelligence 23 pp123-154, </booktitle> <year> 1983. </year>
Reference: 2. <author> A. Pnueli, </author> <title> "The Temporal Logic of Programs", </title> <booktitle> proc. 18th Ann. Symp. Foun dations of Computer Science, </booktitle> <address> Providence, RI, New York, </address> <publisher> IEEE, </publisher> <address> pp46-57, </address> <year> 1977. </year>
Reference-contexts: the following inference laws. always (always (pred)) $ always (pred) sometime (sometime (pred)) $ sometime (pred) always (sometime (pred)) $ sometime (pred) sometime (always (pred)) $ always (pred) always (pred) ! sometime (pred) pred ! sometime (pred) :always (pred) $ sometime (:pred) (3) For a complete list of laws, see <ref> [2] </ref>. Since first order predicates are implemented in PSP, other temporal operators can also be defined by the user in the similar way.
Reference: 3. <author> N. Rescher, A. </author> <title> Urguhart "Temporal Logic", </title> <address> Vienna. NY. </address> <publisher> Springer, </publisher> <year> 1971. </year>
Reference: 4. <author> F. Jahanian and A. Mok, </author> <title> "Safety analysis of timing properties in real-time systems", </title> <journal> IEEE Trans S.E, </journal> <volume> SE-12(9):890-940, </volume> <year> (1986). </year>
Reference: 5. <author> Zhou Chaochen, C.A.R. Hoare, and Anders P. Ravn, </author> <title> "A Calculus of Dura tions", </title> <note> ProCos Working Paper, </note> <institution> Oxford University Computing Laboratory, </institution> <year> (1991). </year>
Reference: 6. <author> B. Moszkowski, </author> <title> "Executing temporal logic programs", </title> <note> Cambridge Tech Report N71 (1985). </note>
Reference: 7. <author> F. Kroger, </author> <title> "Temporal Logic of Programs", </title> <note> EATCS, Monographs on Theoreti cal Computer Science, </note> <editor> W. Brauer, G. Rozenberg, A. Salomaa edit, </editor> <publisher> Springer-Verlag. </publisher>
Reference: 8. <author> Y. Kesten and A. Pnueli. </author> <title> "Timed and hybrid statecharts and their textual representation." </title> <editor> In J. Vytopil, editor, </editor> <booktitle> Formal Techniques in Real-Time and Fault-Tolerant Systems, vol. 571 of Lect. Notes in Comp. Sci., </booktitle> <pages> page 591-619, </pages> <publisher> Springer-Verlag, </publisher> <year> 1992 </year>
Reference: 9. <author> O. Maler, Z. Manna, and A.Pnueli. </author> <title> "From timed to hybrid systems". </title> <editor> In J.W.de Bakker, editors, </editor> <booktitle> Proceedings of the REX Workshop "Real-Time: Theory in Practice", vol. 600 of Lect. Notes in Comp. </booktitle> <publisher> Sci. Springer-Verlag, </publisher> <year> 1992. </year>
Reference: 10. <author> H. Heping. </author> <title> "Cycle Calculus For Requirements Specification of Real-time and Hybrid Systems". FSRG reports, </title> <institution> FSRG-93-18. Department of Computer Science, University of York, </institution> <year> 1993. </year>
Reference: 11. <author> H. Heping. "PSP, </author> <title> a programming language for Prototype State Predicates". </title> <type> FSRG report. </type> <institution> FSRG-93-19. Department of Computer Science, University of York, </institution> <year> 1993. </year>
Reference: 12. <author> H. Heping, H. Zedan, </author> <title> "Requirement specification for real-time and hybrid sys tems", </title> <booktitle> proc of 6th conference on Formal Description Techniques, </booktitle> <address> Boston, USA, </address> <year> 1993. </year> <editor> -12-13. C. Huizing, W.P. de Roever, </editor> <title> "Introduction to design choices in the semantics of Statecharts", </title> <journal> Information Processing Letters, </journal> <volume> vol. 37, N 4, pp205-213, </volume> <year> 1991. </year>
Reference: 14. <author> U. Furbach, </author> <title> "Formal Specification Methods for Reactive Systems", </title> <journal> J. Systems Software, </journal> <volume> vol. 21, pp129-139, </volume> <year> 1993. </year>
Reference-contexts: 1. Introduction Parallel responsive systems consist of two or more reactive sub-processes that continuously cooperate to achieve a pre-defined goal, <ref> [14] </ref>. A typical parallel reactive system contains at least one controller which controls many physical devices. Examples of such systems may be found in avionic, multi-level industrial processing and medical applications. Parallel responsive systems are complex computer systems, and may not be modeled by transformational techniques. <p> There have been many formalisms and tools dealing with the specification and design of parallel responsive systems. In <ref> [14] </ref>, four types of formal specification methods are introduced and compared, namely the state based systems, (e.g. statecharts and SDL; Petri nets); logic-based systems (e.g. PARLOG); and program-ming-oriented approaches such as CCS, CSP, ESTEREL and LOTOS.
Reference: 15. <author> H. Heping, </author> <title> "The Cycle Calculus And Method For The Formal Development of Real-time and Hybrid Systems", </title> <type> PhD Thesis. </type> <institution> Department of Computer Science, University of York, YCST9407, </institution> <month> July </month> <year> 1994. </year>
References-found: 14

