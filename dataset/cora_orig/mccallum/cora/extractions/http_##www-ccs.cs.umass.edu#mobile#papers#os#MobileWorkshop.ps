URL: http://www-ccs.cs.umass.edu/mobile/papers/os/MobileWorkshop.ps
Refering-URL: http://www-ccs.cs.umass.edu/mobile/os.html
Root-URL: 
Email: contact: terry@parc.xerox.com  
Title: The Bayou Architecture: Support for Data Sharing among Mobile Users  
Author: Alan Demers, Karin Petersen, Mike Spreitzer, Douglas Terry, Marvin Theimer, Brent Welch 
Address: Palo Alto, California 94304 U.S.A.  
Affiliation: Computer Science Laboratory Xerox Palo Alto Research Center  
Abstract: The Bayou System is a platform of replicated, highly-available, variable-consistency, mobile databases on which to build collaborative applications. This paper presents the preliminary system architecture along with the design goals that inuenced it. We take a fresh, bottom-up and critical look at the requirements of mobile computing applications and carefully pull together both new and existing techniques into an overall architecture that meets these requirements. Our emphasis is on supporting application-specific conict detection and resolution and on providing application-controlled inconsistency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso and H. F. Korth. </author> <title> Database system issues in nomadic computing. </title> <booktitle> Proceedings ACM SIGMOD International Conference on Management of Data , Washington, </booktitle> <address> D.C., </address> <month> May </month> <year> 1993, </year> <pages> pages 388-392. </pages>
Reference-contexts: Algorithms based on pessimistic locking are also unattractive since they severely limit availability [7][8] and perform poorly when message costs are high [6], as is generally the case in mobile environments <ref> [1] </ref>. To maximize a users ability to read and write data, even while completely disconnected from the rest of the computing environment, we chose a read-any/write-any replication scheme, as was first used in Grapevine [5].
Reference: [2] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transactions on Database Systems 15(3) </journal> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Finally, applications can specify an age parameter for their reads to ensure that they see committed data in a timely fashion. This parameter might implicitly affect the rate at which secondary servers perform anti-entropy with the primary. It provides clients with a type of bounded inconsistency that resembles quasi-copies <ref> [2] </ref>. Goal: Give users ultimate control over the placement and use of databases. Design: Fluid replication in which the number and locations for a database can vary over time as can its primary server. The Bayou system uses uid replication for managing copies of a database.
Reference: [3] <author> D. Barbara and H. Garcia-Molina. </author> <title> Mutual exclusion in partitioned distributed systems. </title> <booktitle> Distributed Computing 1:119 132, </booktitle> <year> 1986. </year>
Reference: [4] <author> P. A. Bernstein and N. Goodman. </author> <title> An algorithm for concur-rency control and recovery in replicated distributed databases. </title> <journal> ACM Transactions on Database Systems 9(4):596 615, </journal> <month> December </month> <year> 1984. </year>
Reference-contexts: Goal: High availability for Reads and Writes. Design: Read-any/write-any weakly consistent replication. Replication is absolutely required in order for non-connected users to access a common database. Many algorithms for managing replicated data, such as those based on maintaining strong data consistency by atomically updating all available copies <ref> [4] </ref>, do not work well in a partitioned network, particularly if site failures cannot be reliably detected. Server-initiated callbacks for cached data invalidation present similar problems. Quorum based schemes [3][10], which can accommodate some types of network partitions, do not work for disconnected individuals or small groups.
Reference: [5] <author> A. Birrell, R. Levin, R. M. Needham, and M. D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <booktitle> Commu nications of the ACM 25(4) </booktitle> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: To maximize a users ability to read and write data, even while completely disconnected from the rest of the computing environment, we chose a read-any/write-any replication scheme, as was first used in Grapevine <ref> [5] </ref>. That is, a user is able to read from and write to any copy of the database. We cannot guarantee the timeliness with which writes will propagate to all other replicas since communication with many of these replicas may be currently infeasible.
Reference: [6] <author> M. J. Carey and M. Livny. </author> <title> Conflict detection tradeoffs for replicated data. </title> <journal> ACM Transactions on Database Systems 16(4) </journal> <pages> 703-746, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Quorum based schemes [3][10], which can accommodate some types of network partitions, do not work for disconnected individuals or small groups. Algorithms based on pessimistic locking are also unattractive since they severely limit availability [7][8] and perform poorly when message costs are high <ref> [6] </ref>, as is generally the case in mobile environments [1]. To maximize a users ability to read and write data, even while completely disconnected from the rest of the computing environment, we chose a read-any/write-any replication scheme, as was first used in Grapevine [5].
Reference: [7] <author> B. A. Coan, B. M. Oki, and E. K. </author> <title> Kolodner . Limitations on database availability when networks partition. </title> <booktitle> Proceedings Fifth ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Calgary, Alberta, Canada, </address> <month> August </month> <year> 1986, </year> <pages> pages 187 194. </pages>
Reference: [8] <author> S. Davidson, H. Garcia-Molina, and D. Skeen. </author> <title> Consistency in a partitioned network: </title> <booktitle> A survey . ACM Computing Sur veys 17(3) </booktitle> <pages> 341-370, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: item (or sets of data items) in incompatible ways, and read-write conicts in which a client updates some data based on reading the value of another data item that is being concurrently updated by a second client (or was previously updated on a different server than the one being read) <ref> [8] </ref>. Version vectors, as developed for Locus [21], or simple timestamps are popularly used to detect write-write conicts [11][13][14][23]. Read-write conicts can be detected by recording and later checking an applications read-set [8]. These techniques ignore the applications semantics. <p> updated by a second client (or was previously updated on a different server than the one being read) <ref> [8] </ref>. Version vectors, as developed for Locus [21], or simple timestamps are popularly used to detect write-write conicts [11][13][14][23]. Read-write conicts can be detected by recording and later checking an applications read-set [8]. These techniques ignore the applications semantics. Consider a calendar manager in which users interactively schedule meetings by selecting blocks of time. <p> Goal: Application-specific resolution of update conicts. Design: Merge procedure passed with each write to automatically resolve conicts. The system, along with detecting update conicts, must provide means for resolving such conicts. One approach often taken in database systems with optimistic concurrency control is to simply abort a conicting transaction <ref> [8] </ref>. Other systems rely on humans for resolving conicts as they are detected.
Reference: [9] <author> A. Demers, D. Greene, C. Hauser , W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <booktitle> Proceedings Sixth Symposium on Principles of Distributed Comput ing, </booktitle> <address> Vancouver, B.C., Canada, </address> <month> August </month> <year> 1987, </year> <pages> pages 1-12. </pages>
Reference-contexts: only for their high availability but also for their scalability and simplicity, have been employed in a variety of systems [5]<ref> [9] </ref>[11][16][19]. Goal: Reach eventual consistency while minimizing assumptions about communication characteristics. Design: Peer-to-peer anti-entropy for propagation of updates. Servers propagate writes among copies of the database using an anti-entropy protocol [9]. This process is often called reconciliation when used to synchronize file systems [11][13]. Anti-entropy ensures that all copies of a database are converging towards the same state and will eventually converge to identical states if there are no new updates.
Reference: [10] <author> D. K. Gifford. </author> <title> Weighted voting for replicated data. </title> <booktitle> Proceedings Seventh Symposium on Operating Systems Principles , Pacific Grove, </booktitle> <address> California, </address> <month> December </month> <year> 1979, </year> <pages> pages 150-162. </pages>
Reference: [11] <author> R.G. Guy, J.S. Heidemann, W. Mak, T.W. Page, Jr., G.J. Popek, and D. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> USENIX Conference Proceedings, </booktitle> <pages> pages 63-71, </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference: [12] <author> J. S. Heidemann, T. W. Page, R. G. Guy, and G. J. Popek. </author> <title> Primarily disconnected operation: Experiences with Ficus. </title> <booktitle> Proceedings Second Workshop on the Management of Replicated Data, </booktitle> <address> Monterey, California, </address> <month> November </month> <year> 1992, </year> <pages> pages 2-5. </pages>
Reference-contexts: Permitting lightweight servers to reside on portable machines is similar to the approach taken to support mobility in Lotus Notes [16] or Ficus <ref> [12] </ref>. Goal: High availability for Reads and Writes. Design: Read-any/write-any weakly consistent replication. Replication is absolutely required in order for non-connected users to access a common database.
Reference: [13] <author> J. H. Howard. </author> <title> Using reconciliation to share f iles between occasionally connected computers. </title> <booktitle> Proceedings IEEE Workshop on Workstation Operating Systems, </booktitle> <address> Napa, Cali fornia, </address> <month> October </month> <year> 1993, </year> <pages> pages 56-60. </pages>
Reference: [14] <author> L. B. Hutson and P. Honeyman. </author> <title> Disconnected operation for AFS. </title> <booktitle> Proceedings USENIX Mobile & Location-Independent Computing Symposium, </booktitle> <address> Cambridge, Massachusetts, </address> <month> August </month> <year> 1993, </year> <pages> pages 1-10. </pages>
Reference: [15] <author> T. Imielinski and B. R. Badrinath. </author> <title> Mobile wireless computing: </title> <booktitle> Challenges in data management. Communications of the ACM 37(10) </booktitle> <pages> 18-28, </pages> <month> October </month> <year> 1994. </year>
Reference: [16] <author> L. Kalwell Jr., S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif. </author> <title> Replicated document management in a group communication system. </title> <booktitle> Proceedings Conference on Computer-Supported Cooperative Work, </booktitle> <address> Portland, Oregon, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: Thus, the Bayou architecture differs from systems like Coda [23][17] that maintain a strong distinction between servers, which hold databases or file volumes, and clients, which hold personal caches. Permitting lightweight servers to reside on portable machines is similar to the approach taken to support mobility in Lotus Notes <ref> [16] </ref> or Ficus [12]. Goal: High availability for Reads and Writes. Design: Read-any/write-any weakly consistent replication. Replication is absolutely required in order for non-connected users to access a common database.
Reference: [17] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems 10(1): </journal> <pages> 3-25, </pages> <month> February </month> <year> 1992. </year>
Reference: [18] <author> P. Kumar and M. Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> Proceedings IEEE Workshop on Workstation Operat ing Systems, </booktitle> <address> Napa, California, </address> <month> October </month> <year> 1993, </year> <pages> pages 66-70. </pages>
Reference-contexts: A mergeprocs execution must be a deterministic function of the database contents and its static data. Automatic resolution of concurrent updates to file directories has been proposed for some time and is now being employed in systems like Ficus [22] and Coda <ref> [18] </ref>. These systems have recently added support for application-specific resolution procedures, similar to mergeprocs, that are registered with servers and are invoked automatically when conicts arise [18][22]. The appropriate resolution procedure to invoke is chosen based on file properties such as the type of the file being updated.
Reference: [19] <author> R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Transactions on Computer Systems 10(4) </journal> <pages> 360-391, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Previous work on causal operations has tried to provide similar guarantees for weakly consistent replicated data, though without the per-application fine-grain control <ref> [19] </ref>. Session guarantees do not address the problem of isolation between concurrent applications [20]. Practical implementations of the guarantees have been developed in which no system-wide state is maintained and no additional coordination among servers is needed.
Reference: [20] <author> Q. Lu and M. Satyanarayanan. </author> <title> Isolation-only transactions for mobile computing. </title> <booktitle> ACM Operating Systems Review 28(2) </booktitle> <pages> 81-87, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Previous work on causal operations has tried to provide similar guarantees for weakly consistent replicated data, though without the per-application fine-grain control [19]. Session guarantees do not address the problem of isolation between concurrent applications <ref> [20] </ref>. Practical implementations of the guarantees have been developed in which no system-wide state is maintained and no additional coordination among servers is needed. The amount of per-session state needed to ensure all of the guarantees is small, consisting of only two version vectors.
Reference: [21] <author> D. S. Parker, G. J. Popek, G. Rudisin, A. Stoughton, B. J. Walker, E. Walton, J. M. Chow, D. Edwards, S. Kiser, and C. Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering SE 9(3) </journal> <pages> 240-246, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Version vectors, as developed for Locus <ref> [21] </ref>, or simple timestamps are popularly used to detect write-write conicts [11][13][14][23]. Read-write conicts can be detected by recording and later checking an applications read-set [8]. These techniques ignore the applications semantics. Consider a calendar manager in which users interactively schedule meetings by selecting blocks of time.
Reference: [22] <author> P. Reiher, J. Heidemann, D. Ratner, G. Skinner, and G. Popek. </author> <title> Resolving file conicts in the Ficus file system. </title> <booktitle> Proceedings Summer USENIX Conference, </booktitle> <month> June </month> <year> 1994, </year> <pages> pages 183-195. </pages>
Reference-contexts: A mergeprocs execution must be a deterministic function of the database contents and its static data. Automatic resolution of concurrent updates to file directories has been proposed for some time and is now being employed in systems like Ficus <ref> [22] </ref> and Coda [18]. These systems have recently added support for application-specific resolution procedures, similar to mergeprocs, that are registered with servers and are invoked automatically when conicts arise [18][22].
Reference: [23] <author> M. Satyanarayanan, J.J. Kistler, P. Kumar, </author> <title> M.E. Okasaki, E.H. Siegel, and D.C. Steere. Coda: a highly available f ile system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers 39(4) </journal> <pages> 447-459, </pages> <month> April </month> <year> 1990. </year>
Reference: [24] <author> B. N. Schilit, N. Adams, R. Gold, M. M. T so, and R. </author> <title> Want. </title> <booktitle> The ParcTab mobile computing system. Proceedings IEEE Workshop on Workstation Operating Systems, </booktitle> <address> Napa, Cali fornia, </address> <month> October </month> <year> 1993, </year> <pages> pages 34-39. </pages>
Reference-contexts: Architectural design decisions Goal: Support for portable computers with limited resources. Design: A exible client-server architecture. Many of the devices that we envision being commonly used, such as PDAs and the ParcTab developed within our lab <ref> [24] </ref>, have insufficient storage for holding copies of all, or perhaps any, of the data that their users want to access. For this reason, our architecture is based on a division of functionality between servers, which store data, and clients, which read and write data managed by servers. <p> The Bayou architecture outlined in the paper has not been fully implemented, though an implementation is currently underway. We are initially building clients and servers that run on SparcStations running Unix and on 486-based subnotebooks running Linux; clients for other types of devices, such as the ParcTab <ref> [24] </ref> will likely follow. Our database provides a relational model while the query language used in read operations, dependency checks, and mergeprocs is a subset of SQL.
Reference: [25] <author> C. D. Tait and D. Duchamp. </author> <title> Service interface and replica management algorithm for mobile file system clients. </title> <booktitle> Proceedings First International Conference on Parallel and Distributed Information Systems, </booktitle> <month> December </month> <year> 1991, </year> <pages> pages 190-197. </pages>
Reference-contexts: Those applications that are unprepared to deal with tentative data and its inherent instability may limit their read requests to only return committed data. This choice is similar to the strict and loose read operations provided in Tait and Duchamps file system <ref> [25] </ref>. Finally, applications can specify an age parameter for their reads to ensure that they see committed data in a timely fashion. This parameter might implicitly affect the rate at which secondary servers perform anti-entropy with the primary.
Reference: [26] <author> D. Terry, A. Demers, K. Petersen, M. Spreitzer, M. Theimer, B. Welch. </author> <title> Session guarantees for weakly consistent replicated data. </title> <booktitle> Proceedings International Conference on Parallel and Distributed Information Systems (PDIS) , Austin, </booktitle> <address> Texas, </address> <month> September </month> <year> 1994, </year> <pages> pages 140-149. </pages>
Reference-contexts: Also, the cost of checking those version vectors against a servers vectors to determine if the server is sufficiently up-to-date is small, and frequently can be amortized over many session operations. Session guarantees and their implementation are described in more detail in a recently published paper <ref> [26] </ref>. Goal: Permit applications to choose an appropriate point in the consistency/availability trade-off. Design: Individually selectable session guarantees, choice of committed or tentative data, age parameter on reads. Different applications have different consistency requirements and different tolerances for inconsistent data.
Reference: [27] <author> M. Weiser. </author> <title> Some computer science issues in ubiquitous computing. </title> <journal> Communications of the ACM 36(7) </journal> <pages> 74-84, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The motivation for this work arose from our experiences at Xerox PARC with wireless networks and portable devices that were developed to explore our ubiquitous computing vision <ref> [27] </ref>. The Bayou architecture outlined in the paper has not been fully implemented, though an implementation is currently underway.
Reference: [28] <author> J. E. White. </author> <title> Mobile agents make a network an open plat form for third-party developers. IEEE Computer, Hot Top ics column, </title> <month> November </month> <year> 1994, </year> <pages> pages 89-90. </pages>
Reference-contexts: This program reads the database copy residing at the executing server and resolves the conict by producing an alternate set of updates that are appropriate for the current database contents. Mergeprocs resemble mobile agents <ref> [28] </ref> in that they originate at clients, are passed to servers, and are executed in a protected environment so that they cannot adversely impact the servers operation. However, unlike more general agents, they can only read and write a servers data base.
References-found: 28

