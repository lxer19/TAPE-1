URL: ftp://ftp.cs.brown.edu/pub/techreports/95/cs95-03.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-95-03.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [AB94] <author> W. G. Aref, D. Barbara, </author> <title> Indexing Multimedia Data Streams, </title> <booktitle> Proceedings of the ACM Multimedia '94, Conference Workshop on Multimedia DBMS, </booktitle> <address> San Francisco, California, </address> <month> Oct. </month> <year> 1994, </year> <pages> pp. 73-77. </pages>
Reference-contexts: We claim that not all subsequences are of interest, and therefore there is no need to facilitate efficient access to all subsequence of the data. Other recent work presented in <ref> [AB94, ABK94, ABV94] </ref> deals with recognition, matching and indexing handwritten text using Hidden Markov Models (HMM's). Such text consists of a stream that denotes the same words even under slight variations in size and shape.
Reference: [ABK94] <author> W. G. Aref, D. Barbara and H. F. Korth, </author> <title> Handwritten Databases: Ink as a first-class database type (Extended Abstract), </title> <type> Technical report, </type> <institution> Matsushita Information Technology Laboratory, Princeton, NJ, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: We claim that not all subsequences are of interest, and therefore there is no need to facilitate efficient access to all subsequence of the data. Other recent work presented in <ref> [AB94, ABK94, ABV94] </ref> deals with recognition, matching and indexing handwritten text using Hidden Markov Models (HMM's). Such text consists of a stream that denotes the same words even under slight variations in size and shape.
Reference: [ABV94] <author> W. G. Aref, D. Barbara and P. Vallabhaneni, </author> <title> The Handwritten Trie: Indexing Electronic Ink, </title> <type> Technical report, </type> <institution> Matsushita Information Technology Laboratory, Princeton, NJ, </institution> <month> October </month> <year> 1994. </year> <month> 27 </month>
Reference-contexts: We claim that not all subsequences are of interest, and therefore there is no need to facilitate efficient access to all subsequence of the data. Other recent work presented in <ref> [AB94, ABK94, ABV94] </ref> deals with recognition, matching and indexing handwritten text using Hidden Markov Models (HMM's). Such text consists of a stream that denotes the same words even under slight variations in size and shape.
Reference: [AFS93] <author> R. Agrawal, C. Faloutsos, A. Swami, </author> <title> Efficient Similarity Search In Sequence Databases, </title> <booktitle> FODO Conference, </booktitle> <address> Evanston, Illinois, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences [Mu87, Ja91, SW94], but it does not generalize well to the approximation required over sequences. Faloutsos et al <ref> [AFS93, FRM94] </ref> presented recent work on similarity search on sequential data. A method is given for representing sequences, by mapping all subsequences of fixed length to K-dimensional points, that are K coefficients of the DFT (Discrete Fourier Transform), and using minimal bounding rectangles for storage and indexing.
Reference: [AHU74] <author> A. V. Aho, J. E. Hopcroft, J.D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison & Wesley, </publisher> <year> 1974. </year>
Reference-contexts: An index structure that supports pattern matching (such as Trie [Fr60], Position Tree <ref> [AHU74] </ref> or the one described in [Su94]) is maintained on the "positiveness" of the functions' slopes. For a fixed small number , there are 3 possible index values: + (slope &gt; ), (slope &lt; ), or 0 (slope is between and ). We take = 0:3. <p> Find the peaks in the sequences. This can be done while storing the data as part of the preprocessing by examining the slopes of the representing functions. If data is already stored, an (already existing) index structure such as a position tree <ref> [AHU74] </ref>, that finds all subsequences of the form (+)() (as defined in Section 4.4) and returns their positions, can be used. 2. Start and end points of subsequences are part of the information obtained from the breaking algorithm, and are maintained with any representation of the sequence.
Reference: [BJM93] <author> A. Brodsky, J. Jaffar, M.J. Maher, </author> <title> Toward Practical Constraint Databases, </title> <booktitle> Proceedings of the 19th VLDB Conference, </booktitle> <address> Dublin, Ireland, </address> <year> 1993, </year> <pages> pp. 567-580. </pages>
Reference-contexts: Another current research area that is relevant to our work is Constraint Logic Programming (CLP). In order to express generalized approximate queries a supporting query language is required. The idea of using CLP as a database query language is discussed in <ref> [KaG94, KKR90, BJM93] </ref>. By using constraints which contain arithmetic predicates, we can express queries that are not supported in traditional query languages. For instance, in order to express the Goalpost fever query, we can define predicates for monotonically increasing and monotonically decreasing sequences.
Reference: [ChS94] <author> A. Chatterjee, A. Segev, </author> <title> Approximate Matching in Scientific Databases, </title> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, </booktitle> <year> 1994, </year> <pages> pp. 448-457. </pages>
Reference-contexts: They are characterized by large data sequences such as time series. Also, users of this data are typically searching for certain patterns of behavior that they approximately visualize, rather than for specific values. Previous work such as <ref> [Mo88, SW94, WZ94, ChS94] </ref>, regards vague and approximate queries, as queries to which the answers are not exactly what was asked for. The query defines an exact result, in terms of specific values, which is the "best" we can expect. <p> The above definition describes an approximation notion since it abstracts away from particular values and allows us to talk about how things "approximately look". It generalizes the standard notion of approximation ( <ref> [Mo88, ChS94] </ref>) in the following ways: * We generalize what the query denotes, from a single sequence (or a set closed under identity of values), to a set of similar sequences, which can be obtained from an exemplar through similarity-preserving transformations.
Reference: [FiS94] <author> A. Finkelstein, D. H. Salesin, </author> <title> Multiresolution Curves, </title> <booktitle> Computer Graphics Proceedings, Annual Conference Series, SIGGRAPH 94, Conference Proceedings, </booktitle> <year> 1994, </year> <pages> pp. 261-268. </pages>
Reference-contexts: Furthermore, having a graphics-oriented representation of sequences, supports the use of methods from computer graphics, such as the multi-resolution analysis <ref> [FiS94] </ref>, for further analysis of data. However, unlike computer graphics applications, we have no indication of where curves start/end (no "mouse clicks"), nor do we allow user interference in the breaking process. The algorithm by P. J.
Reference: [Fi93] <author> K. </author> <type> Fischer, </type> <institution> Dept. of Geochemistry, Brown University, Private conversation, Oc-tober, </institution> <year> 1993. </year>
Reference-contexts: In many 1 cases they must be archived, and retrieving this data is time consuming. The retrieved data is then analyzed by domain experts to examine its features. For example, once a requested earthquake data is obtained from a central archive (a matter of days) <ref> [Fi93] </ref>, examining the specific features is done by the geochemist in the lab. If this data does not contain the relevant features, another query must be issued.
Reference: [Fo90] <author> J. Foley, A. van Dam, S. Feiner, J. Hughes, </author> <booktitle> Computer Graphics Principles and Practice, The Systems Programming Series, </booktitle> <publisher> Addison and Wesley, </publisher> <year> 1990, </year> <pages> pp. 478-507. </pages> . 
Reference-contexts: The rest of this section deals with finding approximations, using off-line algorithms. 5.2 Bezier Curve Fitting Bezier Curves are used in computer graphics, for representing digitized curves by parametric piecewise-cubic curves <ref> [Fo90] </ref>. Given a two-dimensional digitized curve ((x 1 ; y 1 ); :::; (x n ; y n )), a parametric curve representation uses an additional parameter t and represents both x and y as polynomials x (t) and y (t). (Rather than representing y as a function of x).
Reference: [Fr60] <author> E. Fredkin, </author> <title> Trie Memory, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 3, No. 9, </volume> <month> Septem-ber </month> <year> 1960, </year> <pages> pp. 490-500. </pages>
Reference-contexts: An index structure that supports pattern matching (such as Trie <ref> [Fr60] </ref>, Position Tree [AHU74] or the one described in [Su94]) is maintained on the "positiveness" of the functions' slopes. For a fixed small number , there are 3 possible index values: + (slope &gt; ), (slope &lt; ), or 0 (slope is between and ). We take = 0:3.
Reference: [FRM94] <author> C. Faloutsos, M. Ranganathan, Y. Manolopoulos, </author> <title> Fast Subsequence Matching in Time-Series Databases, </title> <booktitle> SIGMOD Proceedings of Annual Conference, </booktitle> <address> Min-neapolis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: It is worthwhile to characterize the "interesting" features in the data, and store characterizations rather than the whole sequences. Examples of such characterizations are differential equations, approximating polynomials, compressions, or main frequencies of DFT <ref> [FRM94] </ref>. We are looking for an alphabet of interesting features to take the place of the alphabet of numbers in the original sequence. <p> Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences [Mu87, Ja91, SW94], but it does not generalize well to the approximation required over sequences. Faloutsos et al <ref> [AFS93, FRM94] </ref> presented recent work on similarity search on sequential data. A method is given for representing sequences, by mapping all subsequences of fixed length to K-dimensional points, that are K coefficients of the DFT (Discrete Fourier Transform), and using minimal bounding rectangles for storage and indexing.
Reference: [GuS93] <author> H. Gunadhi, A. Segev, </author> <title> Efficient Indexing Methods for Temporal Relations, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 5, No. 3, </volume> <month> June </month> <year> 1993, </year> <pages> pp. 496-509. </pages>
Reference-contexts: They can be stored archivally and be used when finer resolution is needed. 3 Related Work No existing systems or models that we know of, support the notions of approximation we have introduced. Recent work on databases for temporal and sequential data, <ref> [GuS93, Ri92, SLR94, SZ93] </ref> does not address approximation. Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences [Mu87, Ja91, SW94], but it does not generalize well to the approximation required over sequences.
Reference: [Ka94] <author> Leslie P. Kaelbling, </author> <title> Private conversation, </title> <month> June </month> <year> 1994. </year>
Reference-contexts: There are two classes of algorithms we have studied and implemented: On-line algorithms, determine break points while data is being gathered, based on the data seen so far, with no overall view of the sequence <ref> [Ka94] </ref>. Their main merit is the fact that while data is gathered, it is processed and stored directly in an approximated format. Thus an additional step of post-processing gathered sequences, to transform the explicit digitized version into an approximated one, is not required.
Reference: [KaG94] <author> P. C. Kanellakis and D. Q. Goldin, </author> <title> Constraint Programming and Database Query Languages, </title> <type> Technical report, </type> <institution> CS-94-31, Brown University , June 1994. </institution>
Reference-contexts: Another current research area that is relevant to our work is Constraint Logic Programming (CLP). In order to express generalized approximate queries a supporting query language is required. The idea of using CLP as a database query language is discussed in <ref> [KaG94, KKR90, BJM93] </ref>. By using constraints which contain arithmetic predicates, we can express queries that are not supported in traditional query languages. For instance, in order to express the Goalpost fever query, we can define predicates for monotonically increasing and monotonically decreasing sequences.
Reference: [KKR90] <author> P. C. Kanellakis, G. M. Kuper and P. Z. Revesz, </author> <title> Constraint Query Languages, </title> <type> Technical report, </type> <institution> CS-90-31, Brown University , November 1990. </institution>
Reference-contexts: Another current research area that is relevant to our work is Constraint Logic Programming (CLP). In order to express generalized approximate queries a supporting query language is required. The idea of using CLP as a database query language is discussed in <ref> [KaG94, KKR90, BJM93] </ref>. By using constraints which contain arithmetic predicates, we can express queries that are not supported in traditional query languages. For instance, in order to express the Goalpost fever query, we can define predicates for monotonically increasing and monotonically decreasing sequences.
Reference: [Ja91] <author> H.V. Jagadish, </author> <title> A Retrieval Technique for Similar Shapes, </title> <booktitle> ACM SIGMOD, Proceedings of the International Conference on Management of Data, </booktitle> <address> Denver, </address> <month> May </month> <year> 1991, </year> <month> pp.208-217. </month>
Reference-contexts: Recent work on databases for temporal and sequential data, [GuS93, Ri92, SLR94, SZ93] does not address approximation. Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences <ref> [Mu87, Ja91, SW94] </ref>, but it does not generalize well to the approximation required over sequences. Faloutsos et al [AFS93, FRM94] presented recent work on similarity search on sequential data.
Reference: [Mo88] <author> A. Motro, </author> <title> VAGUE: A User Interface to Relational Databases that Permits Vague Queries, </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> Vol. 6, No. 3, </volume> <month> July </month> <year> 1988, </year> <pages> pp. 187-214. 28 </pages>
Reference-contexts: They are characterized by large data sequences such as time series. Also, users of this data are typically searching for certain patterns of behavior that they approximately visualize, rather than for specific values. Previous work such as <ref> [Mo88, SW94, WZ94, ChS94] </ref>, regards vague and approximate queries, as queries to which the answers are not exactly what was asked for. The query defines an exact result, in terms of specific values, which is the "best" we can expect. <p> The above definition describes an approximation notion since it abstracts away from particular values and allows us to talk about how things "approximately look". It generalizes the standard notion of approximation ( <ref> [Mo88, ChS94] </ref>) in the following ways: * We generalize what the query denotes, from a single sequence (or a set closed under identity of values), to a set of similar sequences, which can be obtained from an exemplar through similarity-preserving transformations.
Reference: [Mu87] <author> D. Mumford, </author> <title> The Problem of Robust Shape Descriptors, Center of Intelligent Control Systems, </title> <type> Report CICS-P-40, </type> <institution> Harvard University, </institution> <address> Cambridge, Mass., </address> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Recent work on databases for temporal and sequential data, [GuS93, Ri92, SLR94, SZ93] does not address approximation. Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences <ref> [Mu87, Ja91, SW94] </ref>, but it does not generalize well to the approximation required over sequences. Faloutsos et al [AFS93, FRM94] presented recent work on similarity search on sequential data.
Reference: [Ri92] <author> J. Richardson, </author> <title> Supporting Lists in a Data Model (A Timely Approach), </title> <booktitle> Proceedings of the 18th VLDB Conference, </booktitle> <address> Vancouver, Canada, </address> <year> 1992, </year> <pages> pp. 127-138. </pages>
Reference-contexts: They can be stored archivally and be used when finer resolution is needed. 3 Related Work No existing systems or models that we know of, support the notions of approximation we have introduced. Recent work on databases for temporal and sequential data, <ref> [GuS93, Ri92, SLR94, SZ93] </ref> does not address approximation. Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences [Mu87, Ja91, SW94], but it does not generalize well to the approximation required over sequences.
Reference: [Sc90] <author> P. J. Schneider, </author> <title> An Algorithm for Automatically Fitting Digitized Curves, in Graphic Gems, </title> <editor> A. S. Glassner Ed., </editor> <publisher> Academic Press Edition, </publisher> <year> 1990, </year> <pages> pp. 612-626. </pages>
Reference-contexts: The algorithm by P. J. Schneider, adjusted for breaking instead of curve fitting, is outlined in figure 5.7 6 . It supports fully automated curve fitting <ref> [Sc90] </ref>, and therefore is useful for our purposes. The original algorithm imposed continuity between curves, thus associating the break point (found in step 3 of Figure 5.7) with both resulting subsequences. This leads to inaccurate breaking points when continuity is not desirable, as demonstrated in Figure 5.8. distinct subsequences shown.
Reference: [SLR94] <author> P. Seshadri, M. Livny, R. Ramakrishnan, </author> <title> Sequence Query Processing, </title> <booktitle> SIGMOD Proceedings of Annual Conference, </booktitle> <address> Minneapolis, </address> <month> May </month> <year> 1994, </year> <pages> pp. 430-441. </pages>
Reference-contexts: They can be stored archivally and be used when finer resolution is needed. 3 Related Work No existing systems or models that we know of, support the notions of approximation we have introduced. Recent work on databases for temporal and sequential data, <ref> [GuS93, Ri92, SLR94, SZ93] </ref> does not address approximation. Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences [Mu87, Ja91, SW94], but it does not generalize well to the approximation required over sequences.
Reference: [SW94] <author> D. Shasha, J.T. Wang, K.Zhang, F.Y. Shih, </author> <title> Exact and Approximate Algorithms for Unordered Tree Matching, </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> Vol. 24, No. 2, </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: They are characterized by large data sequences such as time series. Also, users of this data are typically searching for certain patterns of behavior that they approximately visualize, rather than for specific values. Previous work such as <ref> [Mo88, SW94, WZ94, ChS94] </ref>, regards vague and approximate queries, as queries to which the answers are not exactly what was asked for. The query defines an exact result, in terms of specific values, which is the "best" we can expect. <p> Recent work on databases for temporal and sequential data, [GuS93, Ri92, SLR94, SZ93] does not address approximation. Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences <ref> [Mu87, Ja91, SW94] </ref>, but it does not generalize well to the approximation required over sequences. Faloutsos et al [AFS93, FRM94] presented recent work on similarity search on sequential data.
Reference: [Sp61] <author> M. R. </author> <title> Spiegel, Theory and Problems of Statistics, </title> <publisher> Schaum Publishing Co., </publisher> <address> New York, </address> <year> 1961, </year> <pages> pp. 217-242. </pages>
Reference-contexts: The Linear Regression line, Y = aX + b, is obtained for a sequence S of n elements (x i ; y i ) using the following formula <ref> [Sp61] </ref>: a = P n P n P n n i=1 x 2 P n b = P n P n i ) ( i=1 x i )( i=1 x i y i ) P n i ( i=1 x i ) 2 This is the least square error line for
Reference: [Su94] <author> B. Subramanian, </author> <type> PhD Thesis Proposal, Technical report, </type> <institution> CS-94-47, Brown University , December 1994. </institution>
Reference-contexts: An index structure that supports pattern matching (such as Trie [Fr60], Position Tree [AHU74] or the one described in <ref> [Su94] </ref>) is maintained on the "positiveness" of the functions' slopes. For a fixed small number , there are 3 possible index values: + (slope &gt; ), (slope &lt; ), or 0 (slope is between and ). We take = 0:3.
Reference: [SZ93] <author> B. Subramanian, S.B. Zdonik, T.W. Leung, </author> <title> S.L. Vandenberg, Ordered Types in the Aqua Data Model, </title> <booktitle> The 4th International Workshop on Database Programming Languages, </booktitle> <address> New York, </address> <month> Septempber </month> <year> 1993. </year>
Reference-contexts: They can be stored archivally and be used when finer resolution is needed. 3 Related Work No existing systems or models that we know of, support the notions of approximation we have introduced. Recent work on databases for temporal and sequential data, <ref> [GuS93, Ri92, SLR94, SZ93] </ref> does not address approximation. Very interesting work was done on notions of similarity and on similarity and approximation-based search for data other than sequences [Mu87, Ja91, SW94], but it does not generalize well to the approximation required over sequences.
Reference: [WZ94] <author> J.T. Wang, K.Zhang, K. Jeong, D. Shasha, </author> <title> A System for Approximate Tree Matching, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 6, No. 2, </volume> <month> April </month> <year> 1994. </year> <month> 29 </month>
Reference-contexts: They are characterized by large data sequences such as time series. Also, users of this data are typically searching for certain patterns of behavior that they approximately visualize, rather than for specific values. Previous work such as <ref> [Mo88, SW94, WZ94, ChS94] </ref>, regards vague and approximate queries, as queries to which the answers are not exactly what was asked for. The query defines an exact result, in terms of specific values, which is the "best" we can expect.
References-found: 27

