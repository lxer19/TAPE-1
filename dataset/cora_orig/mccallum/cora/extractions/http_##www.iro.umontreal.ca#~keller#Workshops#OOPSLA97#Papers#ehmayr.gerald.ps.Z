URL: http://www.iro.umontreal.ca/~keller/Workshops/OOPSLA97/Papers/ehmayr.gerald.ps.Z
Refering-URL: http://www.iro.umontreal.ca/~keller/Workshops/OOPSLA97/index.html
Root-URL: http://www.iro.umontreal.ca
Email: email: -gerald, werner-@ifs.uni-linz.ac.at  
Title: 1 Proactive Object Modeling  
Address: Linz, AUSTRIA  
Affiliation: Institute of Computer Science, Department of Information Systems University of  
Abstract: What can we Learn from Components and Interfaces? Objects, components and frameworks are buzzwords in todays software development. A growing number of object-oriented component-based frameworks like OLE/COM, CORBA, OpenDoc and JavaBeans opens up the beginning of a new era of distributed computing. In such an environment, where concurrency plays a major role, traditional design principles used for non-distributed, sequential systems are no more appropriate. Therefore, we claim that objects should no more be designed reactive which means that they only passively respond to requests for services. Rather, we propose to design objects proactive, allowing them to autonomously request data and services from other objects. This simple principle, which is well known in the area of component-based frameworks, leads to more intelligent objects, increasing parallelism and at the same time reducing network traffic. 
Abstract-found: 1
Intro-found: 1
Reference: [Agha93] <editor> G. Agha, P. Wegner, A. Yonezawa (eds.), </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1993 </year>
Reference-contexts: As argued by [Rasm96], however, the majority of work has been done at the implementation level. Several distributed object-oriented programming languages and distributed operating systems have been developed <ref> [Agha93] </ref>, [Chin91], [Toko87], as well as systems for providing distribution services to object-oriented applications [Orfa97].
Reference: [Chin91] <author> R.S. Chin, S.T. Chanson, </author> <title> Distributed Object-Based Programming Systems, </title> <journal> ACM Computing Surveys, </journal> <month> March </month> <year> 1991 </year>
Reference-contexts: As argued by [Rasm96], however, the majority of work has been done at the implementation level. Several distributed object-oriented programming languages and distributed operating systems have been developed [Agha93], <ref> [Chin91] </ref>, [Toko87], as well as systems for providing distribution services to object-oriented applications [Orfa97].
Reference: [Kapp96] <author> G. Kappel, S. Rausch-Schott, W. Retschitzegger, M. Sakkinen, </author> <title> From Rules to Rule Patterns, </title> <booktitle> in Proceedings of the 8th International Conference on Advanced Information Systems Engineering (CAiSE 96), </booktitle> <editor> P. Constantopoulos, J. Mylopoulos, Y. Vassiliou (eds.), </editor> <publisher> Springer LNCS 1080, </publisher> <address> Heraklion, Crete, </address> <month> May </month> <year> 1996 </year>
Reference-contexts: Several distributed object-oriented programming languages and distributed operating systems have been developed [Agha93], [Chin91], [Toko87], as well as systems for providing distribution services to object-oriented applications [Orfa97]. Unfortunately, only a limited amount of work has been reported on the incorporation of distribution issues into object-oriented design methods <ref> [Kapp96] </ref>, [Mhl93], [Kruch95], [Rasm96] and on the development of design guidelines for achieving good designs in distributed/concurrent environments [Lea96], [Schm95]. But such guidelines are of major importance since distribution and concurrency introduce design opportunities and problems not found in sequential non-distributed environments.
Reference: [Ken96] <author> A. Ken, J. Gosling, </author> <title> The Java Programming Language, </title> <publisher> Addison-Wesley, </publisher> <year> 1996 </year>
Reference-contexts: Note that, in analogy to Java, callback-interfaces are represented as objects <ref> [Ken96] </ref>. Thus, instead of passing the parameters, one or more callback-interfaces are passed. As a consequence, server objects become aware about those services of their client objects (encapsulated within interfaces) which are useful for them.
Reference: [Kruch95] <author> P. Kruchten, </author> <title> The 4+1 View Model of Architecture, </title> <journal> IEEE Software, </journal> <volume> 12(6), </volume> <month> November </month> <year> 1995 </year>
Reference-contexts: Several distributed object-oriented programming languages and distributed operating systems have been developed [Agha93], [Chin91], [Toko87], as well as systems for providing distribution services to object-oriented applications [Orfa97]. Unfortunately, only a limited amount of work has been reported on the incorporation of distribution issues into object-oriented design methods [Kapp96], [Mhl93], <ref> [Kruch95] </ref>, [Rasm96] and on the development of design guidelines for achieving good designs in distributed/concurrent environments [Lea96], [Schm95]. But such guidelines are of major importance since distribution and concurrency introduce design opportunities and problems not found in sequential non-distributed environments.
Reference: [Lea96] <author> D. Lea, </author> <title> Concurrent Programming in Java, </title> <publisher> Addison-Wesley, </publisher> <year> 1996 </year>
Reference-contexts: 1 Introduction Distributed Computing is concerned with communication among different self-standing programs and processes usually residing on different machines <ref> [Lea96] </ref>. Interest in the use of object-oriented techniques as the basic programming paradigm for realizing distributed systems has became significant in recent years. As argued by [Rasm96], however, the majority of work has been done at the implementation level. <p> Unfortunately, only a limited amount of work has been reported on the incorporation of distribution issues into object-oriented design methods [Kapp96], [Mhl93], [Kruch95], [Rasm96] and on the development of design guidelines for achieving good designs in distributed/concurrent environments <ref> [Lea96] </ref>, [Schm95]. But such guidelines are of major importance since distribution and concurrency introduce design opportunities and problems not found in sequential non-distributed environments.
Reference: [Mhl93] <author> M. Mhlhuser, W. Gerteis, L. Heuser, DOCASE: </author> <title> A methodic approach to distributed programming, </title> <journal> Communications of the ACM, </journal> <volume> 36(9), </volume> <year> 1993 </year>
Reference-contexts: Several distributed object-oriented programming languages and distributed operating systems have been developed [Agha93], [Chin91], [Toko87], as well as systems for providing distribution services to object-oriented applications [Orfa97]. Unfortunately, only a limited amount of work has been reported on the incorporation of distribution issues into object-oriented design methods [Kapp96], <ref> [Mhl93] </ref>, [Kruch95], [Rasm96] and on the development of design guidelines for achieving good designs in distributed/concurrent environments [Lea96], [Schm95]. But such guidelines are of major importance since distribution and concurrency introduce design opportunities and problems not found in sequential non-distributed environments.
Reference: [Orfa97] <author> R. Orfali, D. Harkey, </author> <title> Client/Server Programming with JAVA and CORBA, </title> <publisher> Addison-Wesley, </publisher> <year> 1997 </year>
Reference-contexts: As argued by [Rasm96], however, the majority of work has been done at the implementation level. Several distributed object-oriented programming languages and distributed operating systems have been developed [Agha93], [Chin91], [Toko87], as well as systems for providing distribution services to object-oriented applications <ref> [Orfa97] </ref>. Unfortunately, only a limited amount of work has been reported on the incorporation of distribution issues into object-oriented design methods [Kapp96], [Mhl93], [Kruch95], [Rasm96] and on the development of design guidelines for achieving good designs in distributed/concurrent environments [Lea96], [Schm95]. <p> Such a proactive design is closely related to principles well known in the area of component-based frameworks, where interfaces, callbacks (dont call us - we call you) and event handling are commonly used mechanisms <ref> [Orfa97] </ref>.
Reference: [Rasm96] <author> G. Rasmussen, B. Hendersen-Sellers, </author> <title> G.C. Low, An object-oriented analysis and design notation for distributed systems, </title> <journal> Journal of Object-Oriented Programming (JOOP), </journal> <volume> 9(3), </volume> <month> June </month> <year> 1996 </year>
Reference-contexts: 1 Introduction Distributed Computing is concerned with communication among different self-standing programs and processes usually residing on different machines [Lea96]. Interest in the use of object-oriented techniques as the basic programming paradigm for realizing distributed systems has became significant in recent years. As argued by <ref> [Rasm96] </ref>, however, the majority of work has been done at the implementation level. Several distributed object-oriented programming languages and distributed operating systems have been developed [Agha93], [Chin91], [Toko87], as well as systems for providing distribution services to object-oriented applications [Orfa97]. <p> Unfortunately, only a limited amount of work has been reported on the incorporation of distribution issues into object-oriented design methods [Kapp96], [Mhl93], [Kruch95], <ref> [Rasm96] </ref> and on the development of design guidelines for achieving good designs in distributed/concurrent environments [Lea96], [Schm95]. But such guidelines are of major importance since distribution and concurrency introduce design opportunities and problems not found in sequential non-distributed environments.
Reference: [Riel96] <author> A.J. Riel, </author> <title> Object-Oriented Design Heuristics, </title> <publisher> Addison-Wesley, </publisher> <year> 1996 </year>
Reference-contexts: As a consequence, server objects become aware about those services of their client objects (encapsulated within interfaces) which are useful for them. This leads to a more natural design since objects are made more intelligent and functionality is better distributed between objects <ref> [Riel96] </ref>. Such a proactive design is closely related to principles well known in the area of component-based frameworks, where interfaces, callbacks (dont call us - we call you) and event handling are commonly used mechanisms [Orfa97]. <p> An evaluation of this claim is part of future work. Besides, the influence of proactive modeling on design measures, e.g., coupling and cohesion characteristics <ref> [Riel96] </ref> has to be further investigated.
Reference: [Schm95] <author> D.C. Schmidt, </author> <title> Active Object -- An Object Behavioral Pattern for Concurrent Programming, </title> <booktitle> Proceedings of the Second Pattern Languages of Programs Conference in Monticello, </booktitle> <address> Illinois, </address> <month> September 6-8, </month> <year> 1995 </year>
Reference-contexts: Unfortunately, only a limited amount of work has been reported on the incorporation of distribution issues into object-oriented design methods [Kapp96], [Mhl93], [Kruch95], [Rasm96] and on the development of design guidelines for achieving good designs in distributed/concurrent environments [Lea96], <ref> [Schm95] </ref>. But such guidelines are of major importance since distribution and concurrency introduce design opportunities and problems not found in sequential non-distributed environments.
Reference: [Toko87] <editor> M. Tokoro, A. Yonezawa (eds.), </editor> <booktitle> Object-Oriented Concurrent Programming, </booktitle> <publisher> MIT Press,1987 </publisher>
Reference-contexts: As argued by [Rasm96], however, the majority of work has been done at the implementation level. Several distributed object-oriented programming languages and distributed operating systems have been developed [Agha93], [Chin91], <ref> [Toko87] </ref>, as well as systems for providing distribution services to object-oriented applications [Orfa97].
Reference: [UML97] <institution> UML Notation Guide Version 1.0, Rational Software Corporation, </institution> <address> Santa Clara, </address> <month> Jan. </month> <year> 1997 </year>
Reference-contexts: Figure 1 illustrates this scenario by means of a simple class diagram using a similar notation as proposed by the Unified Modeling Language (UML) <ref> [UML97] </ref>. 3.2 Proactive Modeling In Figure 2, the example is modeled by means of the proactive approach. The client only indicates a print request by calling the printers method "print (PrinterCallBack)".
Reference: [Wegn95] <editor> P. Wegner, </editor> <booktitle> Interactive Foundations of Object-Based Programming, IEEE Computer, </booktitle> <month> October </month> <year> 1995 </year>
Reference-contexts: In such an environment, a reactive design is appropriate, that is, the server object passively responds to requests for services initiated by the client object <ref> [Wegn95] </ref>. Considering distributed, inherently concurrent systems, multiple threads realize non-blocking method calls. In this context, the separation between a client object representing the active part of an interaction and a server object constituting the passive reactive one is obsolete. <p> This possibility should be exploited in that objects are modeled proactive which means that each object is made capable of requesting data from other objects it has to interact with <ref> [Wegn95] </ref>. To achieve proactive modeling, we propose an approach based on callback interfaces.
References-found: 14

