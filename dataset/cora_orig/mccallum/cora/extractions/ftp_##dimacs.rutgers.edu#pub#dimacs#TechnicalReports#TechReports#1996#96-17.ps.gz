URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1996/96-17.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1996.html
Root-URL: http://www.cs.rutgers.edu
Email: fmab,jf,lacyg@research.att.com  
Author: Matt Blaze Joan Feigenbaum Jack Lacy 
Keyword: Decentralized Trust Management  
Address: Murray Hill, NJ 07974  
Affiliation: AT&T Laboratories  
Note: by  DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Labs, Bell Labs, and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 96-17 October 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, B. W. Kernighan, and P. J. Weinberger, </author> <title> The AWK Programming Language, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1988. </year> <month> - 16 </month> - 
Reference-contexts: Similarly, PolicyMaker filters are interpreted programs that are run within a "safe" (I/O and resource limited) wrapper. Our implementation currently supports three filter languages: a regular expression system (similar to those used in Unix), an internally developed safe - 10 - version of AWK <ref> [1] </ref>, which we call AWKWARD, and a macro language that preprocesses into safe AWK. Other "safe" languages, such as Java [2] or Safe-TCL [5], are easily added as desired. In general, any language that can be safely interpreted can be used as a filter language.
Reference: [2] <author> J. Gosling and H. McGilton, </author> <title> The Java Language Environment, A White Paper, Sun Microsystems, </title> <publisher> Inc., </publisher> <address> Mountain View, </address> <year> 1995. </year>
Reference-contexts: Our implementation currently supports three filter languages: a regular expression system (similar to those used in Unix), an internally developed safe - 10 - version of AWK [1], which we call AWKWARD, and a macro language that preprocesses into safe AWK. Other "safe" languages, such as Java <ref> [2] </ref> or Safe-TCL [5], are easily added as desired. In general, any language that can be safely interpreted can be used as a filter language. A distinguishing feature of our system is that filters are allowed the full complexity and expressiveness of general programs.
Reference: [3] <institution> Information Technology Open Systems Interconnection The Directory:Authentication Framework, Recommendation X.509, </institution> <address> ISO/IEC 9594-8. </address>
Reference-contexts: one wants to communicate. 2 As in PGP, X.509 certificates are signed records that associate users' IDs with their cryptographic keys; X.509 certificates contain more information than PGP certificates, e.g., the names of the signature schemes used to create them and the time interval in which they are valid (see <ref> [3] </ref> for details), but their basic purpose is simply the binding of users to keys. However, X.509 differs sharply from PGP in its level of centralization of information.
Reference: [4] <author> International Telegraph and Telephone Consultative Committee (CCITT). </author> <title> The Directory Authentication Framework, Recommendation X.509 1993 update. </title>
Reference-contexts: However, the responsibility for interpreting the policy remains outside the scope of the X.509 mechanism <ref> [4] </ref>. - 4 - 1.2 The PolicyMaker Approach Despite the differences in the way the various certificate-based systems structure trust relationships, they all assume a similar, and, as we shall see, rather cumbersome, trust architecture in the applications that use them.
Reference: [5] <author> John K. Ousterhout, </author> <title> TCL and the TK Toolkit, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1994. </year>
Reference-contexts: Other "safe" languages, such as Java [2] or Safe-TCL <ref> [5] </ref>, are easily added as desired. In general, any language that can be safely interpreted can be used as a filter language. A distinguishing feature of our system is that filters are allowed the full complexity and expressiveness of general programs.
Reference: [6] <author> E. Wobber and M. Abadi and M. Burrows and B. Lampson, </author> <title> "Authentication in the Taos Operating System," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 3-32, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: the steps an application must go through to process a request based on a signed message from the holder of a traditional (X.509 or PGP) certificate. (Some of these steps might be performed by the operating system or otherwise hidden at a lower layer, as in the Taos operating system <ref> [6] </ref>, but they are performed nevertheless): 1. Obtain certificates, verify signatures on certificates and on application request, deter mine public key of original signer (s). 2. Verify that certificates are unrevoked. 3. Attempt to find "trust path" from trusted certifier to certificate of public key in ques tion. 4.
Reference: [7] <author> P. Zimmermann, </author> <title> PGP User's Guide, </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1994. </year>
Reference-contexts: How the certified identity is acted upon, however, is left to the application. The two best known certificate systems are those of PGP and X.509. In the PGP system <ref> [7] </ref>, a user generates a (P ublicKey; SecretKey) pair that is associated with his unique ID; usually an ID is of the form (Name; EmailAddress). Keys are stored in key records.
References-found: 7

