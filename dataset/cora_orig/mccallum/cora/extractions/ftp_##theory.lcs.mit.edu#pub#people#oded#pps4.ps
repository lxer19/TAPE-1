URL: ftp://theory.lcs.mit.edu/pub/people/oded/pps4.ps
Refering-URL: http://theory.lcs.mit.edu/~oded/pps.html
Root-URL: 
Email: E-mail: oded@wisdom.weizmann.ac.il  
Title: Probabilistic Proof Systems A Survey  
Author: Oded Goldreich 
Date: December 1996  
Address: Rehovot, ISRAEL.  
Affiliation: Department of Computer Science and Applied Mathematics Weizmann Institute of Science,  
Abstract: Various types of probabilistic proof systems have played a central role in the development of computer science in the last decade. In this exposition, we concentrate on three such proof systems interactive proofs, zero-knowledge proofs, and probabilistic checkable proofs stressing the essential role of randomness in each of them.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Aiello, M. Bellare and R. Venkatesan. </author> <title> Knowledge on the Average Perfect, Statistical and Logarithmic. </title> <booktitle> In 27th STOC, </booktitle> <pages> pages 469-478, </pages> <year> 1995. </year>
Reference-contexts: Knowledge complexity may be defined as the minimum number of oracle-queries required in order to (efficiently) simulate an interaction with the prover (cf. [31]). Results linking two different variants of this measure to other complexity measures are given in <ref> [1, 47] </ref>, respectively. Acknowledgement I am grateful to Shafi Goldwasser for suggesting the essential role of randomness as the unifying theme for this exposition. Thanks also to Leonid Levin, Dana Ron, Madhu Sudan and Uri Zwick for commenting on earlier versions of this survey.
Reference: [2] <author> W. Aiello and J. Hastad. </author> <title> Perfect Zero-Knowledge Languages can be Recognized in Two Rounds. </title> <booktitle> In 28th FOCS, </booktitle> <pages> pages 439-448, </pages> <year> 1987. </year>
Reference-contexts: The above results may be contrasted with the results regarding the complexity of almost-perfect zero-knowledge proof systems; namely, that almost-perfect zero-knowledge proof systems exist only for sets in IP (2) " coIP (2) <ref> [23, 2] </ref>, and thus are unlikely to exist for all NP-sets.
Reference: [3] <author> S. Arora, C. Lund, R. Motwani, M. Sudan and M. Szegedy. </author> <title> Proof Verification and Intractability of Approximation Problems. </title> <booktitle> In 33rd FOCS, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: In particular, Proposition 1 : PCP (log; poly) is contained in N P. These upper bounds turn out to be tight, but proving this is much more difficult (to say the least). The following result is a culmination of a sequence of great works <ref> [6, 7, 20, 4, 3] </ref>. 10 Theorem 3 : N P is contained in PCP (log; O (1)). Thus, probabilistically checkable proofs in which the verifier tosses only logarithmically many coins and makes only a constant number of queries exist for every set in the complexity class N P. <p> These bit locations need to be selected at random. The characterization of N P in terms of probabilistically checkable proofs plays a central role in recent developments concerning the difficulty of approximation problems (cf., <ref> [20, 3, 42, 11] </ref> and [35, 36]). To demonstrate this relationship, we first note that Theorem 3 can be rephrased without mentioning the class PCP altogether. Instead, a new type of polynomial-time reductions, which we call amplifying, emerges. <p> The first PCP-characterization of N P, by which N P = PCP (log; log), has appeared in [4] and the cited result was obtained in <ref> [3] </ref>. This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs [41, 49, 22], program-checking [16, 26, 48], and private computation with oracles [9].
Reference: [4] <author> S. Arora and S. Safra. </author> <title> Probabilistic Checkable Proofs: A New Characterization of NP. </title> <booktitle> In 33rd FOCS, </booktitle> <pages> pages 1-13, </pages> <year> 1992. </year>
Reference-contexts: The above model was suggested in [24] and shown related to a multi-prover model introduced previously in [14]. The fine complexity measures were introduced and motivated in [20], and further advocated in <ref> [4] </ref>. A related model was presented in [7], stressing the applicability to program checking. We stress that the oracle x in a pcp system constitutes a proof in the standard mathematical sense 9 . <p> In particular, Proposition 1 : PCP (log; poly) is contained in N P. These upper bounds turn out to be tight, but proving this is much more difficult (to say the least). The following result is a culmination of a sequence of great works <ref> [6, 7, 20, 4, 3] </ref>. 10 Theorem 3 : N P is contained in PCP (log; O (1)). Thus, probabilistically checkable proofs in which the verifier tosses only logarithmically many coins and makes only a constant number of queries exist for every set in the complexity class N P. <p> The first PCP-characterization of N P, by which N P = PCP (log; log), has appeared in <ref> [4] </ref> and the cited result was obtained in [3]. This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs [41, 49, 22], program-checking [16, 26, 48], and private computation with oracles [9].
Reference: [5] <author> L. Babai. </author> <title> Trading Group Theory for Randomness. </title> <booktitle> In 17th STOC, </booktitle> <pages> pages 421-420, </pages> <year> 1985. </year>
Reference-contexts: Clearly, N P IP (1), yet the inclusion may be strict since the verifier may toss coins after receiving the prover's single message. Arthur-Merlin games 2 introduced in <ref> [5] </ref> are a special case of interactive proofs; yet, as shown in [34], this restricted case has essentially 3 the same power as the general case previously introduced in [33].
Reference: [6] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-Deterministic Exponential Time has Two-Prover Interactive Protocols. </title> <journal> Computational Complexity, </journal> <volume> Vol. 1, No. 1, </volume> <pages> pages 3-40, </pages> <year> 1991. </year> <note> Preliminary version in 31st FOCS, </note> <year> 1990. </year>
Reference-contexts: In particular, Proposition 1 : PCP (log; poly) is contained in N P. These upper bounds turn out to be tight, but proving this is much more difficult (to say the least). The following result is a culmination of a sequence of great works <ref> [6, 7, 20, 4, 3] </ref>. 10 Theorem 3 : N P is contained in PCP (log; O (1)). Thus, probabilistically checkable proofs in which the verifier tosses only logarithmically many coins and makes only a constant number of queries exist for every set in the complexity class N P. <p> so that * As usual, f maps satisfiable 3CNF formulae to satisfiable 3CNF formulae; and 9 Jumping ahead, the oracles in pcp systems characterizing N P have the property of being NP proofs themselves. 10 The sequence has started with the characterization of PCP (poly; poly) as equal non-deterministic exponential-time <ref> [6] </ref>, and continued with its scaled-down in [7, 20] which led to the N P PCP (polylog; polylog) result of [20]. The first PCP-characterization of N P, by which N P = PCP (log; log), has appeared in [4] and the cited result was obtained in [3].
Reference: [7] <author> L. Babai, L. Fortnow, L. Levin, and M. Szegedy. </author> <title> Checking Computations in Polylogarithmic Time. </title> <booktitle> In 23rd STOC, </booktitle> <pages> pages 21-31, </pages> <year> 1991. </year>
Reference-contexts: The above model was suggested in [24] and shown related to a multi-prover model introduced previously in [14]. The fine complexity measures were introduced and motivated in [20], and further advocated in [4]. A related model was presented in <ref> [7] </ref>, stressing the applicability to program checking. We stress that the oracle x in a pcp system constitutes a proof in the standard mathematical sense 9 . <p> In particular, Proposition 1 : PCP (log; poly) is contained in N P. These upper bounds turn out to be tight, but proving this is much more difficult (to say the least). The following result is a culmination of a sequence of great works <ref> [6, 7, 20, 4, 3] </ref>. 10 Theorem 3 : N P is contained in PCP (log; O (1)). Thus, probabilistically checkable proofs in which the verifier tosses only logarithmically many coins and makes only a constant number of queries exist for every set in the complexity class N P. <p> satisfiable 3CNF formulae to satisfiable 3CNF formulae; and 9 Jumping ahead, the oracles in pcp systems characterizing N P have the property of being NP proofs themselves. 10 The sequence has started with the characterization of PCP (poly; poly) as equal non-deterministic exponential-time [6], and continued with its scaled-down in <ref> [7, 20] </ref> which led to the N P PCP (polylog; polylog) result of [20]. The first PCP-characterization of N P, by which N P = PCP (log; log), has appeared in [4] and the cited result was obtained in [3].
Reference: [8] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin Games: A Randomized Proof System and a Hierarchy of Complexity Classes. </title> <journal> JCSS, </journal> <volume> Vol. 36, </volume> <pages> pp. 254-276, </pages> <year> 1988. </year>
Reference-contexts: Theorem 1 [41, 49]: IP = PSPACE . Recall that it is widely believed that N P PSPACE . Thus, under this conjecture, interactive proofs are more powerful than NP-proofs. Concerning the finer structure of the IP hierarchy it is known that this hierarchy has a linear speed-up property <ref> [8] </ref>. Namely, for every integer function, f , so that f (n) 2 for all n, the class IP (O (f ())) collapses to the class IP (f ()). In particular, IP (O (1)) collapses to IP (2).
Reference: [9] <author> D. Beaver and J. Feigenbaum. </author> <title> Hiding Instances in Multioracle Queries. </title> <booktitle> In 7th STACS, </booktitle> <publisher> Springer Verlag, LNCS Vol. </publisher> <pages> 415, pages 37-48, </pages> <year> 1990. </year>
Reference-contexts: This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs [41, 49, 22], program-checking [16, 26, 48], and private computation with oracles <ref> [9] </ref>.
Reference: [10] <author> M. Bellare and O. Goldreich. </author> <title> On Defining Proofs of Knowledge. </title> <booktitle> In Crypto92, </booktitle> <publisher> Springer Verlag, LNCS Vol. </publisher> <pages> 740, pages 390-420, </pages> <year> 1992. </year>
Reference-contexts: for every NP-set (cf., [15, 22, 40]). 13 This is implicit in the universal quantifier used in the soundness condition. 5.3 Proofs of Knowledge The concept of a proof of knowledge, introduced in [33], is very appealing; yet, its precise formulation is much more complex than one may expect (cf. <ref> [10] </ref>).
Reference: [11] <author> M. Bellare, O. Goldreich and M. Sudan. </author> <title> Free Bits, PCPs and Non-Approximability Towards Tight Results. </title> <booktitle> In 36th FOCS, </booktitle> <pages> pages 422-431, </pages> <year> 1995. </year>
Reference-contexts: These bit locations need to be selected at random. The characterization of N P in terms of probabilistically checkable proofs plays a central role in recent developments concerning the difficulty of approximation problems (cf., <ref> [20, 3, 42, 11] </ref> and [35, 36]). To demonstrate this relationship, we first note that Theorem 3 can be rephrased without mentioning the class PCP altogether. Instead, a new type of polynomial-time reductions, which we call amplifying, emerges.
Reference: [12] <author> M. Bellare and S. Goldwasser. </author> <title> The Complexity of Decision versus Search. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 23, </volume> <pages> pages 97-119, </pages> <year> 1994. </year>
Reference-contexts: access to the set S itself. (Note that the prover in Construction 1 has this property.) This interpretation generalizes the notion of self-reducibility of NP-sets. (By self-reducibility of an NP-set we mean that the search problem of finding an NP-witness is polynomial-time reducible to deciding membership in the set.) See <ref> [12] </ref>. 3. A prover is considered relatively efficient if it can be implemented by a probabilistic machine which runs in time which is polynomial in the deterministic complexity of the set. This interpretation relates the difficulty of convincing a lazy verifier to the complexity of finding the truth alone.
Reference: [13] <author> M. Ben-Or, O. Goldreich, S. Goldwasser, J. Hastad, J. Kilian, S. Micali and P. Rogaway. </author> <title> Everything Provable is Probable in Zero-Knowledge. </title> <booktitle> In Crypto88, </booktitle> <publisher> Springer Verlag, LNCS Vol. </publisher> <pages> 403, pages 37-56, </pages> <year> 1990 </year>
Reference-contexts: Theorem 2 has a dramatic effect on the design of cryptographic protocols (cf., [28, 29]). In a different vein and for the sake of elegancy, we mention that, using further ideas and under the same assumption, any interactive proof can be efficiently transformed into a zero-knowledge one <ref> [38, 13] </ref>. The above results may be contrasted with the results regarding the complexity of almost-perfect zero-knowledge proof systems; namely, that almost-perfect zero-knowledge proof systems exist only for sets in IP (2) " coIP (2) [23, 2], and thus are unlikely to exist for all NP-sets.
Reference: [14] <author> M. Ben-Or, S. Goldwasser, J. Kilian and A. Wigderson. </author> <title> Multi-Prover Interactive Proofs: How to Remove Intractability Assumptions. </title> <booktitle> In 20th STOC, </booktitle> <pages> pages 113-131, </pages> <year> 1988. </year>
Reference-contexts: For sets of integer functions, R and Q, we let PCP (R; Q) equal [ r2R;q2Q PCP (r (); q ()). The above model was suggested in [24] and shown related to a multi-prover model introduced previously in <ref> [14] </ref>. The fine complexity measures were introduced and motivated in [20], and further advocated in [4]. A related model was presented in [7], stressing the applicability to program checking. We stress that the oracle x in a pcp system constitutes a proof in the standard mathematical sense 9 . <p> Thus, the validity of the verifier decision (concerning false statements) depends on whether this restriction (concerning cheating prover strategies) really holds. The reason to consider these restricted models is that they enable to achieve results which are not possible in the general model of interactive proofs (cf., <ref> [14, 17, 39, 43] </ref>). We consider restrictions of two types: computational or physical. We start with a physical restriction. <p> We consider restrictions of two types: computational or physical. We start with a physical restriction. In the so-called multi-prover interactive proof model, denoted MIP (cf., <ref> [14] </ref>), the prover is split into several (say, two) entities and the restriction (or assumption) is that these entities cannot interact with each other. <p> On the other hand, the multi-prover model is related to the PCP model [24]. Interestingly, the multi-prover model allows to present (perfect) zero-knowledge proofs for all NP-sets, without relying on any comutational assumptions <ref> [14] </ref>. Furthermore, these proofs can be made very efficient in terms of communication complexity [18]. We now turn to computational restrictions. Since the effect of this restriction is more noticable in the soundness condition, we refer to these proof systems as being computationally-sound. Two variants have been suggested.
Reference: [15] <author> M. Blum, P. Feldman and S. Micali. </author> <title> Non-Interactive Zero-Knowledge and its Applications. </title> <booktitle> In 20th STOC, </booktitle> <pages> pages 103-112, </pages> <year> 1988. </year>
Reference-contexts: Interestigly, computationally-sound interactive proofs can be much more communication-efficient than (regular) interactive proofs; cf. [39, 43, 27]. 5.2 Non-Interactive Zero-Knowledge Proofs Actualy the term non-interactive is somewhat misleading. The model, introduced in <ref> [15] </ref>, consists of three entities: a prover, a verifier and a uniformly selected sequence of bits (which can be thought of as being selected by a trusted third party). Both verifier and prover can read the random sequence, and each can toss additional coins. <p> The interaction consists of a single message sent from the prover to the verifier, who then is left with the decision (whether to accept or not). Based on some reasonable complexity assumptions, one may construct non-interactive zero-knowledge proof systems for every NP-set (cf., <ref> [15, 22, 40] </ref>). 13 This is implicit in the universal quantifier used in the soundness condition. 5.3 Proofs of Knowledge The concept of a proof of knowledge, introduced in [33], is very appealing; yet, its precise formulation is much more complex than one may expect (cf. [10]).
Reference: [16] <author> M. Blum, M. Luby and R. Rubinfeld. </author> <title> Self-Testing/Correcting with Applications to Numerical Problems. </title> <journal> JCSS, </journal> <volume> Vol. 47, No. 3, </volume> <pages> pages 549-595, </pages> <year> 1993. </year>
Reference-contexts: This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs [41, 49, 22], program-checking <ref> [16, 26, 48] </ref>, and private computation with oracles [9].
Reference: [17] <author> G. Brassard, D. Chaum and C. Crepeau. </author> <title> Minimum Disclosure Proofs of Knowl edge. </title> <journal> JCSS, </journal> <pages> pages 156-189, </pages> <year> 1988. </year> <title> Extended abstract, by Brassard and Crepeau, </title> <booktitle> in 27th FOCS, </booktitle> <year> 1986. </year>
Reference-contexts: Thus, the validity of the verifier decision (concerning false statements) depends on whether this restriction (concerning cheating prover strategies) really holds. The reason to consider these restricted models is that they enable to achieve results which are not possible in the general model of interactive proofs (cf., <ref> [14, 17, 39, 43] </ref>). We consider restrictions of two types: computational or physical. We start with a physical restriction. <p> We now turn to computational restrictions. Since the effect of this restriction is more noticable in the soundness condition, we refer to these proof systems as being computationally-sound. Two variants have been suggested. In argument systems <ref> [17] </ref>, the prover stategy is restricted to be probabilistic polynomial-time with auxiliary input (analogously to item (1) in Sec. 2.4).
Reference: [18] <author> C. Dwork, U. Feige, J. Kilian, M. Naor and S. Safra, </author> <title> Low Communication Perfect Zero Knowledge Two Provers Proof Systems. </title> <booktitle> In Crypto92, </booktitle> <publisher> Springer Verlag, LNCS Vol. </publisher> <pages> 740, pages 215-227, </pages> <year> 1992. </year>
Reference-contexts: On the other hand, the multi-prover model is related to the PCP model [24]. Interestingly, the multi-prover model allows to present (perfect) zero-knowledge proofs for all NP-sets, without relying on any comutational assumptions [14]. Furthermore, these proofs can be made very efficient in terms of communication complexity <ref> [18] </ref>. We now turn to computational restrictions. Since the effect of this restriction is more noticable in the soundness condition, we refer to these proof systems as being computationally-sound. Two variants have been suggested.
Reference: [19] <author> U. Feige. </author> <title> A Threshold of ln n for Approximating Set Cover. </title> <booktitle> In 28th STOC, </booktitle> <pages> pages 314-318, </pages> <year> 1996. </year>
Reference-contexts: In general, probabilistic checkable proof systems for N P yield strong non-approximability results for various classical optimization problems. In particular, quite tight non-approximability results have been shown for MaxClique (cf., [35]), Chromatic Number (cf., [21]), Set Cover (cf., <ref> [19] </ref>), and Max-Exact-3SAT (cf., [36]). 4.3 The Role of Randomness No trade-off between the number of bits examined and the confidence is possible if one requires the verifier to be deterministic.
Reference: [20] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating Clique is almost NP-complete. </title> <booktitle> In 32nd FOCS, </booktitle> <pages> pages 2-12, </pages> <year> 1991. </year>
Reference-contexts: For sets of integer functions, R and Q, we let PCP (R; Q) equal [ r2R;q2Q PCP (r (); q ()). The above model was suggested in [24] and shown related to a multi-prover model introduced previously in [14]. The fine complexity measures were introduced and motivated in <ref> [20] </ref>, and further advocated in [4]. A related model was presented in [7], stressing the applicability to program checking. We stress that the oracle x in a pcp system constitutes a proof in the standard mathematical sense 9 . <p> In particular, Proposition 1 : PCP (log; poly) is contained in N P. These upper bounds turn out to be tight, but proving this is much more difficult (to say the least). The following result is a culmination of a sequence of great works <ref> [6, 7, 20, 4, 3] </ref>. 10 Theorem 3 : N P is contained in PCP (log; O (1)). Thus, probabilistically checkable proofs in which the verifier tosses only logarithmically many coins and makes only a constant number of queries exist for every set in the complexity class N P. <p> These bit locations need to be selected at random. The characterization of N P in terms of probabilistically checkable proofs plays a central role in recent developments concerning the difficulty of approximation problems (cf., <ref> [20, 3, 42, 11] </ref> and [35, 36]). To demonstrate this relationship, we first note that Theorem 3 can be rephrased without mentioning the class PCP altogether. Instead, a new type of polynomial-time reductions, which we call amplifying, emerges. <p> satisfiable 3CNF formulae to satisfiable 3CNF formulae; and 9 Jumping ahead, the oracles in pcp systems characterizing N P have the property of being NP proofs themselves. 10 The sequence has started with the characterization of PCP (poly; poly) as equal non-deterministic exponential-time [6], and continued with its scaled-down in <ref> [7, 20] </ref> which led to the N P PCP (polylog; polylog) result of [20]. The first PCP-characterization of N P, by which N P = PCP (log; log), has appeared in [4] and the cited result was obtained in [3]. <p> in pcp systems characterizing N P have the property of being NP proofs themselves. 10 The sequence has started with the characterization of PCP (poly; poly) as equal non-deterministic exponential-time [6], and continued with its scaled-down in [7, 20] which led to the N P PCP (polylog; polylog) result of <ref> [20] </ref>. The first PCP-characterization of N P, by which N P = PCP (log; log), has appeared in [4] and the cited result was obtained in [3].
Reference: [21] <author> U. Feige and J. Kilian. </author> <title> Zero knowledge and the chromatic number. </title> <booktitle> In 11th IEEE Conference on Computational Complexity, </booktitle> <pages> pages 278-287, </pages> <year> 1996. </year>
Reference-contexts: In general, probabilistic checkable proof systems for N P yield strong non-approximability results for various classical optimization problems. In particular, quite tight non-approximability results have been shown for MaxClique (cf., [35]), Chromatic Number (cf., <ref> [21] </ref>), Set Cover (cf., [19]), and Max-Exact-3SAT (cf., [36]). 4.3 The Role of Randomness No trade-off between the number of bits examined and the confidence is possible if one requires the verifier to be deterministic.
Reference: [22] <author> U. Feige, D. Lapidot, and A. Shamir. </author> <title> Multiple non-interactive zero knowledge proofs based on a single random string. </title> <booktitle> In 31st FOCS, </booktitle> <pages> pages 308-317, </pages> <year> 1990. </year>
Reference-contexts: This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs <ref> [41, 49, 22] </ref>, program-checking [16, 26, 48], and private computation with oracles [9]. <p> The interaction consists of a single message sent from the prover to the verifier, who then is left with the decision (whether to accept or not). Based on some reasonable complexity assumptions, one may construct non-interactive zero-knowledge proof systems for every NP-set (cf., <ref> [15, 22, 40] </ref>). 13 This is implicit in the universal quantifier used in the soundness condition. 5.3 Proofs of Knowledge The concept of a proof of knowledge, introduced in [33], is very appealing; yet, its precise formulation is much more complex than one may expect (cf. [10]).
Reference: [23] <author> L. Fortnow, </author> <title> The Complexity of Perfect Zero-Knowledge. </title> <booktitle> In 19th STOC, </booktitle> <pages> pages 204-209, </pages> <year> 1987. </year>
Reference-contexts: The above results may be contrasted with the results regarding the complexity of almost-perfect zero-knowledge proof systems; namely, that almost-perfect zero-knowledge proof systems exist only for sets in IP (2) " coIP (2) <ref> [23, 2] </ref>, and thus are unlikely to exist for all NP-sets.
Reference: [24] <author> L. Fortnow, J. Rompel and M. Sipser. </author> <title> On the Power of Multi-Prover Interactive Protocols. </title> <booktitle> In Proc. 3rd IEEE Symp. on Structure in Complexity Theory, </booktitle> <pages> pages 156-161, </pages> <year> 1988. </year>
Reference-contexts: We stress that here, as usual in complexity theory, the oracle answers are always binary (i.e., either 0 or 1). For sets of integer functions, R and Q, we let PCP (R; Q) equal [ r2R;q2Q PCP (r (); q ()). The above model was suggested in <ref> [24] </ref> and shown related to a multi-prover model introduced previously in [14]. The fine complexity measures were introduced and motivated in [20], and further advocated in [4]. A related model was presented in [7], stressing the applicability to program checking. <p> The multi-prover model is reminiscent of the common police procedure of isolating collaborating suspects and interrogating each of them separately. On the other hand, the multi-prover model is related to the PCP model <ref> [24] </ref>. Interestingly, the multi-prover model allows to present (perfect) zero-knowledge proofs for all NP-sets, without relying on any comutational assumptions [14]. Furthermore, these proofs can be made very efficient in terms of communication complexity [18]. We now turn to computational restrictions.
Reference: [25] <author> M. Furer, O. Goldreich, Y. Mansour, M. Sipser, and S. Zachos, </author> <title> On Completeness and Soundness in Interactive Proof Systems, </title> <booktitle> Advances in Computing Research: a research annual, Vol. 5 (Randomness and Computation, </booktitle> <editor> S. Micali, </editor> <publisher> ed.), </publisher> <pages> pp. 429-442, </pages> <year> 1989. </year>
Reference-contexts: Also, in some sources interactive proofs are defined so that two-sided error probability is allowed; yet, this does not increase their power <ref> [25] </ref>. 2.2 The Role of Randomness Randomness is essential to the formulation of interactive proofs; if randomness is not allowed (or if it is allowed but zero error is required in the soundness condition) then interactive proof systems collapse to NP-proof systems. <p> Yet, since the error can be made negligible by successive repetitions this issue is insignificant. Alternatively, one can use ideas in <ref> [25] </ref> to eliminate the error by letting the prover send some random-looking help. 4 Probabilistically Checkable Proof Systems When viewed in terms of an interactive proof system, the probabilistically checkable proof setting consists of a prover which is memoryless.
Reference: [26] <author> P. Gemmell, R. Lipton, R. Rubinfeld, M. Sudan, and A. Wigderson. </author> <title> Self Testing/Correcting for Polynomials and for Approximate Functions. </title> <booktitle> In 23th STOC, </booktitle> <pages> pages 32-42, </pages> <year> 1991. </year>
Reference-contexts: This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs [41, 49, 22], program-checking <ref> [16, 26, 48] </ref>, and private computation with oracles [9].
Reference: [27] <author> O. Goldreich and J. Hastad. </author> <title> On the Message Complexity of Interactive Proof Systems. </title> <note> Available as TR96-018 of ECCC, http://www.eccc.uni-trier.de/eccc/, 1996. </note>
Reference-contexts: In CS-proofs [43], the prover stategy is restricted to be probabilistic and run in time polynomial in the time required to validate the assertion (analogously to item (3) in Sec. 2.4). Interestigly, computationally-sound interactive proofs can be much more communication-efficient than (regular) interactive proofs; cf. <ref> [39, 43, 27] </ref>. 5.2 Non-Interactive Zero-Knowledge Proofs Actualy the term non-interactive is somewhat misleading. The model, introduced in [15], consists of three entities: a prover, a verifier and a uniformly selected sequence of bits (which can be thought of as being selected by a trusted third party).
Reference: [28] <author> O. Goldreich, S. Micali and A. Wigderson. </author> <title> Proofs that Yield Nothing but their Validity or All Languages in NP Have Zero-Knowledge Proof Systems. </title> <journal> JACM, </journal> <volume> Vol. 38, No. 1, </volume> <pages> pages 691-729, </pages> <year> 1991. </year> <note> Extended abstract in 27th FOCS, </note> <year> 1986. </year>
Reference-contexts: Specifically, we present an interactive proof for proving that two graphs are not isomorphic 5 . It is not known whether such a statement can be proven via an NP-proof system. Construction 1 (Interactive proof system for Graph Non-Isomorphism) <ref> [28] </ref>: * Common Input: A pair of two graphs, G 1 = (V 1 ; E 1 ) and G 2 = (V 2 ; E 2 ). <p> In these cases the NP-proof is just the transcript of the procedure by which x has been computed and thus the auxiliary input is available to the proving party. See <ref> [28] </ref>. 2. <p> The interactive proof will be described using boxes in which information can be hidden and later revealed. Such boxes can be implemented using one-way functions (see below). Construction 2 (Zero-knowledge proof of 3-colorability) <ref> [28] </ref>: * Common Input: A simple graph G = (V; E). * Prover's first step: Let be a 3-coloring of G. The prover selects a random permutation, , over f1; 2; 3g, and sets (v) def = ( (v)), for each v 2 V . <p> Using the fact that 3-colorability is NP-complete, one gets zero-knowledge proofs for any NP-set. Theorem 2 <ref> [28] </ref>: Assuming the existence of one-way functions, any NP-proof can be efficiently transformed into a (computational) zero-knowledge interactive proof. Theorem 2 has a dramatic effect on the design of cryptographic protocols (cf., [28, 29]). <p> Using the fact that 3-colorability is NP-complete, one gets zero-knowledge proofs for any NP-set. Theorem 2 [28]: Assuming the existence of one-way functions, any NP-proof can be efficiently transformed into a (computational) zero-knowledge interactive proof. Theorem 2 has a dramatic effect on the design of cryptographic protocols (cf., <ref> [28, 29] </ref>). In a different vein and for the sake of elegancy, we mention that, using further ideas and under the same assumption, any interactive proof can be efficiently transformed into a zero-knowledge one [38, 13].
Reference: [29] <author> O. Goldreich, S. Micali and A. Wigderson. </author> <title> How to Play any Mental Game or a Completeness Theorem for Protocols with Honest Majority. </title> <booktitle> In 19th STOC, </booktitle> <pages> pages 218-229, </pages> <year> 1987. </year>
Reference-contexts: Using the fact that 3-colorability is NP-complete, one gets zero-knowledge proofs for any NP-set. Theorem 2 [28]: Assuming the existence of one-way functions, any NP-proof can be efficiently transformed into a (computational) zero-knowledge interactive proof. Theorem 2 has a dramatic effect on the design of cryptographic protocols (cf., <ref> [28, 29] </ref>). In a different vein and for the sake of elegancy, we mention that, using further ideas and under the same assumption, any interactive proof can be efficiently transformed into a zero-knowledge one [38, 13].
Reference: [30] <author> O. Goldreich and Y. Oren. </author> <title> Definitions and Properties of Zero-Knowledge Proof Systems. </title> <journal> Journal of Cryptology, </journal> <volume> Vol. 7, No. 1, </volume> <pages> pages 1-32, </pages> <year> 1994. </year>
Reference-contexts: The definitions presented above are a simplified version of the actual definitions. For example, in order to guarantee that zero-knowledge is preserved under sequential composition it is necessary to slightly augment the definitions. For details see <ref> [30] </ref>. 3.2 The Power of Zero-Knowledge A simple example, demonstrating the power of zero-knowledge proofs, follows. Specifically, we will present a simple zero-knowledge proof for proving that a graph is 3-colorable 7 . The interactive proof will be described using boxes in which information can be hidden and later revealed. <p> Namely, if either verifier or prover is required to be deterministic then only BPP-sets can be proven in a zero-knowledge manner <ref> [30] </ref>. However, BPP-sets have trivial zero-knowledge proofs in which the prover sends nothing and the verifier just test the validity of the assertion by itself 8 .
Reference: [31] <author> O. Goldreich and E. Petrank. </author> <title> Quantifying Knowledge Complexity. </title> <booktitle> In 32nd FOCS, </booktitle> <pages> pp. 59-68, </pages> <year> 1991. </year>
Reference-contexts: Knowledge complexity may be defined as the minimum number of oracle-queries required in order to (efficiently) simulate an interaction with the prover (cf. <ref> [31] </ref>). Results linking two different variants of this measure to other complexity measures are given in [1, 47], respectively. Acknowledgement I am grateful to Shafi Goldwasser for suggesting the essential role of randomness as the unifying theme for this exposition.
Reference: [32] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic Encryption. </title> <journal> JCSS, </journal> <volume> Vol. 28, No. 2, </volume> <pages> pages 270-299, </pages> <year> 1984. </year> <note> Extended abstract in 14th STOC, </note> <year> 1982. </year>
Reference-contexts: Since the notion of computational indistinguishability is a fundamental one, it is indeed in place to present a definition of it. Definition 4 (computational indistinguishability) <ref> [32, 50] </ref>: An integer function, f , is called negligible if for every positive polynomial p and all sufficiently large n, it holds that f (n) &lt; 1 p (n) . (Thus, multiplying a negligible function by any fixed polynomial yields a negiligible function.) Two probability ensembles, fA x g x2S
Reference: [33] <author> S. Goldwasser, S. Micali and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proof Systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 18, </volume> <pages> pages 186-208, </pages> <year> 1989. </year> <note> Extended abstract in 17th STOC, </note> <year> 1985. </year>
Reference-contexts: A sketch of the formal definition is given in Item (1) below. Item (2) introduces additional complexity measures which can be ignored in first reading. Definition 2 (Interactive Proofs - IP) <ref> [33] </ref>: 1. <p> Arthur-Merlin games 2 introduced in [5] are a special case of interactive proofs; yet, as shown in [34], this restricted case has essentially 3 the same power as the general case previously introduced in <ref> [33] </ref>. <p> See [43]. 3 Zero-Knowledge Proof Systems Zero-knowledge proofs, introduced in <ref> [33] </ref>, are central to cryptography. Furthermore, zero-knowledge proofs are very intruiging from a conceptual point of view, since they exhibit an extreme contrast between being convinced of the validity of a statement and learning anything in addition while receiving such a convincing proof. <p> The specific variants differ by the interpretation given to `similarity'. The most strict interpretation, leading to perfect zero-knowledge, is that similarity means equality. Namely, Definition 3 (perfect zero-knowledge) <ref> [33] </ref>: A prover strategy, P , is said to be perfect zero-knowledge over a set S if for every probabilistic polynomial-time verifier strategy, V fl , there exists a probabilistic polynomial-time algorithm, M fl , such that (P; V )(x) = M (x) ; for every x 2 S where (P; <p> Based on some reasonable complexity assumptions, one may construct non-interactive zero-knowledge proof systems for every NP-set (cf., [15, 22, 40]). 13 This is implicit in the universal quantifier used in the soundness condition. 5.3 Proofs of Knowledge The concept of a proof of knowledge, introduced in <ref> [33] </ref>, is very appealing; yet, its precise formulation is much more complex than one may expect (cf. [10]). <p> It can be shown that the protocol which results by successively applying Construction 2 suffiently many time constitutes a proof of knowledge of a 3-coloring of the input graph. 5.4 Knowledge Complexity Zero-knowledge is the lowest level of a knowledge-complexity hierarchy which quantifies the knowledge revealed in an interaction <ref> [33] </ref>. Knowledge complexity may be defined as the minimum number of oracle-queries required in order to (efficiently) simulate an interaction with the prover (cf. [31]). Results linking two different variants of this measure to other complexity measures are given in [1, 47], respectively.
Reference: [34] <author> S. Goldwasser and M. Sipser. </author> <title> Private Coins versus Public Coins in Interactive Proof Systems. </title> <booktitle> In 18th STOC, </booktitle> <pages> pages 59-68, </pages> <year> 1986. </year>
Reference-contexts: Clearly, N P IP (1), yet the inclusion may be strict since the verifier may toss coins after receiving the prover's single message. Arthur-Merlin games 2 introduced in [5] are a special case of interactive proofs; yet, as shown in <ref> [34] </ref>, this restricted case has essentially 3 the same power as the general case previously introduced in [33].
Reference: [35] <author> J. Hastad. </author> <title> Clique is hard to approximate within n 1* . In 37th FOCS, </title> <address> pages 627-636, </address> <year> 1996. </year>
Reference-contexts: These bit locations need to be selected at random. The characterization of N P in terms of probabilistically checkable proofs plays a central role in recent developments concerning the difficulty of approximation problems (cf., [20, 3, 42, 11] and <ref> [35, 36] </ref>). To demonstrate this relationship, we first note that Theorem 3 can be rephrased without mentioning the class PCP altogether. Instead, a new type of polynomial-time reductions, which we call amplifying, emerges. <p> In general, probabilistic checkable proof systems for N P yield strong non-approximability results for various classical optimization problems. In particular, quite tight non-approximability results have been shown for MaxClique (cf., <ref> [35] </ref>), Chromatic Number (cf., [21]), Set Cover (cf., [19]), and Max-Exact-3SAT (cf., [36]). 4.3 The Role of Randomness No trade-off between the number of bits examined and the confidence is possible if one requires the verifier to be deterministic.
Reference: [36] <author> J. Hastad. </author> <title> Getting optimal in-approximability results. </title> <type> Unpublish manuscript, </type> <month> June </month> <year> 1996. </year> <note> (Revised October 1996.) </note>
Reference-contexts: These bit locations need to be selected at random. The characterization of N P in terms of probabilistically checkable proofs plays a central role in recent developments concerning the difficulty of approximation problems (cf., [20, 3, 42, 11] and <ref> [35, 36] </ref>). To demonstrate this relationship, we first note that Theorem 3 can be rephrased without mentioning the class PCP altogether. Instead, a new type of polynomial-time reductions, which we call amplifying, emerges. <p> The constant (number of queries) in Theorem 3 has been subsequently improved and is currently 9; cf., <ref> [36] </ref>. 11 A 3CNF formula is a Boolean formula consisting of a conjunction of clauses, where each clause is a disjunction of upto 3 literals. (A literal is variable or its negation.). * f maps non-satisfiable 3CNF formulae to (non-satisfiable) 3CNF formulae for which every truth assignment satisfies at most a <p> In general, probabilistic checkable proof systems for N P yield strong non-approximability results for various classical optimization problems. In particular, quite tight non-approximability results have been shown for MaxClique (cf., [35]), Chromatic Number (cf., [21]), Set Cover (cf., [19]), and Max-Exact-3SAT (cf., <ref> [36] </ref>). 4.3 The Role of Randomness No trade-off between the number of bits examined and the confidence is possible if one requires the verifier to be deterministic.
Reference: [37] <author> J. Hastad, R. Impagliazzo, L.A. Levin and M. Luby. </author> <title> Construction of Pseudoran dom Generator from any One-Way Function. </title> <type> Manuscript, </type> <year> 1993. </year> <note> See preliminary versions by Impagliazzo et. </note> <editor> al. </editor> <booktitle> in 21st STOC and Hastad in 22nd STOC. </booktitle>
Reference-contexts: Such commitment schemes can be implemented assuming the existence of one-way functions (i.e., loosely speaking, functions that are easy to compute but hard to invert, such as the multiplication of two large primes) <ref> [44, 37] </ref>. Using the fact that 3-colorability is NP-complete, one gets zero-knowledge proofs for any NP-set. Theorem 2 [28]: Assuming the existence of one-way functions, any NP-proof can be efficiently transformed into a (computational) zero-knowledge interactive proof.
Reference: [38] <author> R. Impagliazzo and M. Yung. </author> <title> Direct Zero-Knowledge Computations. </title> <booktitle> In Crypto87, </booktitle> <publisher> Springer Verlag, LNCS Vol. </publisher> <pages> 293, pages 40-51, </pages> <year> 1987. </year>
Reference-contexts: Theorem 2 has a dramatic effect on the design of cryptographic protocols (cf., [28, 29]). In a different vein and for the sake of elegancy, we mention that, using further ideas and under the same assumption, any interactive proof can be efficiently transformed into a zero-knowledge one <ref> [38, 13] </ref>. The above results may be contrasted with the results regarding the complexity of almost-perfect zero-knowledge proof systems; namely, that almost-perfect zero-knowledge proof systems exist only for sets in IP (2) " coIP (2) [23, 2], and thus are unlikely to exist for all NP-sets.
Reference: [39] <author> J. Kilian. </author> <title> A Note on Efficient Zero-Knowledge Proofs and Arguments. </title> <booktitle> In 24th STOC, </booktitle> <pages> pages 723-732, </pages> <year> 1992. </year>
Reference-contexts: Thus, the validity of the verifier decision (concerning false statements) depends on whether this restriction (concerning cheating prover strategies) really holds. The reason to consider these restricted models is that they enable to achieve results which are not possible in the general model of interactive proofs (cf., <ref> [14, 17, 39, 43] </ref>). We consider restrictions of two types: computational or physical. We start with a physical restriction. <p> In CS-proofs [43], the prover stategy is restricted to be probabilistic and run in time polynomial in the time required to validate the assertion (analogously to item (3) in Sec. 2.4). Interestigly, computationally-sound interactive proofs can be much more communication-efficient than (regular) interactive proofs; cf. <ref> [39, 43, 27] </ref>. 5.2 Non-Interactive Zero-Knowledge Proofs Actualy the term non-interactive is somewhat misleading. The model, introduced in [15], consists of three entities: a prover, a verifier and a uniformly selected sequence of bits (which can be thought of as being selected by a trusted third party).
Reference: [40] <author> J. Kilian and E. Petrank. </author> <title> An Efficient Non-Interactive Zero-Knowledge Proof Sys tem for NP with General Assumptions. </title> <note> To appear in the Journal of Cryptography. Available as TR95-038 of ECCC, http://www.eccc.uni-trier.de/eccc/, 1995. </note>
Reference-contexts: The interaction consists of a single message sent from the prover to the verifier, who then is left with the decision (whether to accept or not). Based on some reasonable complexity assumptions, one may construct non-interactive zero-knowledge proof systems for every NP-set (cf., <ref> [15, 22, 40] </ref>). 13 This is implicit in the universal quantifier used in the soundness condition. 5.3 Proofs of Knowledge The concept of a proof of knowledge, introduced in [33], is very appealing; yet, its precise formulation is much more complex than one may expect (cf. [10]).
Reference: [41] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic Methods for Interactive Proof Systems. </title> <journal> JACM, </journal> <volume> Vol. 39, No. 4, </volume> <pages> pages 859-868, </pages> <year> 1992. </year> <note> Preliminary version in 31st FOCS, </note> <year> 1990. </year>
Reference-contexts: Recall that the latter is a coNP-set (not known to be in N P). Interactive proofs are powerful enough to prove any coNP assertion (e.g., that a graph is not 3-colorable) <ref> [41] </ref>. Furthermore, the class of sets having interactive proof systems coincides with the class of sets that can be decided using a polynomial amount of work-space [49]. Theorem 1 [41, 49]: IP = PSPACE . Recall that it is widely believed that N P PSPACE . <p> Interactive proofs are powerful enough to prove any coNP assertion (e.g., that a graph is not 3-colorable) [41]. Furthermore, the class of sets having interactive proof systems coincides with the class of sets that can be decided using a polynomial amount of work-space [49]. Theorem 1 <ref> [41, 49] </ref>: IP = PSPACE . Recall that it is widely believed that N P PSPACE . Thus, under this conjecture, interactive proofs are more powerful than NP-proofs. Concerning the finer structure of the IP hierarchy it is known that this hierarchy has a linear speed-up property [8]. <p> This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs <ref> [41, 49, 22] </ref>, program-checking [16, 26, 48], and private computation with oracles [9].
Reference: [42] <author> C. Lund and M. Yannakakis. </author> <title> On the Hardness of Approximating Minimization Problems, </title> <booktitle> In 25th STOC, </booktitle> <pages> pages 286-293, </pages> <year> 1993. </year>
Reference-contexts: These bit locations need to be selected at random. The characterization of N P in terms of probabilistically checkable proofs plays a central role in recent developments concerning the difficulty of approximation problems (cf., <ref> [20, 3, 42, 11] </ref> and [35, 36]). To demonstrate this relationship, we first note that Theorem 3 can be rephrased without mentioning the class PCP altogether. Instead, a new type of polynomial-time reductions, which we call amplifying, emerges.
Reference: [43] <author> S. Micali. </author> <title> CS Proofs. </title> <booktitle> In 35th FOCS, </booktitle> <pages> pages 436-453, </pages> <year> 1994. </year>
Reference-contexts: See <ref> [43] </ref>. 3 Zero-Knowledge Proof Systems Zero-knowledge proofs, introduced in [33], are central to cryptography. <p> Thus, the validity of the verifier decision (concerning false statements) depends on whether this restriction (concerning cheating prover strategies) really holds. The reason to consider these restricted models is that they enable to achieve results which are not possible in the general model of interactive proofs (cf., <ref> [14, 17, 39, 43] </ref>). We consider restrictions of two types: computational or physical. We start with a physical restriction. <p> Two variants have been suggested. In argument systems [17], the prover stategy is restricted to be probabilistic polynomial-time with auxiliary input (analogously to item (1) in Sec. 2.4). In CS-proofs <ref> [43] </ref>, the prover stategy is restricted to be probabilistic and run in time polynomial in the time required to validate the assertion (analogously to item (3) in Sec. 2.4). <p> In CS-proofs [43], the prover stategy is restricted to be probabilistic and run in time polynomial in the time required to validate the assertion (analogously to item (3) in Sec. 2.4). Interestigly, computationally-sound interactive proofs can be much more communication-efficient than (regular) interactive proofs; cf. <ref> [39, 43, 27] </ref>. 5.2 Non-Interactive Zero-Knowledge Proofs Actualy the term non-interactive is somewhat misleading. The model, introduced in [15], consists of three entities: a prover, a verifier and a uniformly selected sequence of bits (which can be thought of as being selected by a trusted third party).
Reference: [44] <author> M. Naor. </author> <title> Bit Commitment using Pseudorandom Generators. </title> <journal> Journal of Cryptology, </journal> <volume> Vol. 4, </volume> <pages> pages 151-158, </pages> <year> 1991. </year>
Reference-contexts: Such commitment schemes can be implemented assuming the existence of one-way functions (i.e., loosely speaking, functions that are easy to compute but hard to invert, such as the multiplication of two large primes) <ref> [44, 37] </ref>. Using the fact that 3-colorability is NP-complete, one gets zero-knowledge proofs for any NP-set. Theorem 2 [28]: Assuming the existence of one-way functions, any NP-proof can be efficiently transformed into a (computational) zero-knowledge interactive proof.
Reference: [45] <author> R. Ostrovsky and A. Wigderson. </author> <title> One-Way Functions are essential for Non-Trivial Zero-Knowledge, </title> <booktitle> In Proc. 2nd Israel Symp. on Theory of Computing and Systems (ISTCS93), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pages 3-17, </pages> <year> 1993. </year>
Reference-contexts: Also, a recent result seems to indicate that one-way functions are essential for the existence of zero-knowledge proofs for hard sets (i.e., sets which cannot be decided in average polynomial-time) <ref> [45] </ref>. 3.3 The Role of Randomness Again, randomness is essential to all the above mentioned (positive) results. Namely, if either verifier or prover is required to be deterministic then only BPP-sets can be proven in a zero-knowledge manner [30].
Reference: [46] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, Approximation, and Complexity Classes. </title> <booktitle> In 20th STOC, </booktitle> <pages> pages 229-234, </pages> <year> 1988. </year>
Reference: [47] <author> E. Petrank and G. Tardos. </author> <title> On the Knowledge Complexity of NP. </title> <booktitle> In 37th FOCS, </booktitle> <pages> pages 494-503, </pages> <year> 1996. </year>
Reference-contexts: Knowledge complexity may be defined as the minimum number of oracle-queries required in order to (efficiently) simulate an interaction with the prover (cf. [31]). Results linking two different variants of this measure to other complexity measures are given in <ref> [1, 47] </ref>, respectively. Acknowledgement I am grateful to Shafi Goldwasser for suggesting the essential role of randomness as the unifying theme for this exposition. Thanks also to Leonid Levin, Dana Ron, Madhu Sudan and Uri Zwick for commenting on earlier versions of this survey.
Reference: [48] <author> R. Rubinfeld and M. Sudan. </author> <title> Robust Characterizations of Polynomials with Ap plications to Program Checking. </title> <journal> SIAM J. of Computing, </journal> <volume> Vol. 25, No. 2, </volume> <pages> pages 252-271, </pages> <year> 1996. </year> <note> Preliminary version in 3rd SODA, </note> <year> 1992. </year>
Reference-contexts: This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs [41, 49, 22], program-checking <ref> [16, 26, 48] </ref>, and private computation with oracles [9].
Reference: [49] <author> A. Shamir. </author> <title> IP=PSPACE. </title> <journal> JACM, </journal> <volume> Vol. 39, No. 4, </volume> <pages> pages 869-877, </pages> <year> 1992. </year> <note> Preliminary version in 31st FOCS, </note> <year> 1990. </year>
Reference-contexts: Interactive proofs are powerful enough to prove any coNP assertion (e.g., that a graph is not 3-colorable) [41]. Furthermore, the class of sets having interactive proof systems coincides with the class of sets that can be decided using a polynomial amount of work-space <ref> [49] </ref>. Theorem 1 [41, 49]: IP = PSPACE . Recall that it is widely believed that N P PSPACE . Thus, under this conjecture, interactive proofs are more powerful than NP-proofs. <p> Interactive proofs are powerful enough to prove any coNP assertion (e.g., that a graph is not 3-colorable) [41]. Furthermore, the class of sets having interactive proof systems coincides with the class of sets that can be decided using a polynomial amount of work-space [49]. Theorem 1 <ref> [41, 49] </ref>: IP = PSPACE . Recall that it is widely believed that N P PSPACE . Thus, under this conjecture, interactive proofs are more powerful than NP-proofs. Concerning the finer structure of the IP hierarchy it is known that this hierarchy has a linear speed-up property [8]. <p> This sequence of works, directly related to the stated theorem, was built on and inspired by works from various settings such as interactive proofs <ref> [41, 49, 22] </ref>, program-checking [16, 26, 48], and private computation with oracles [9].
Reference: [50] <author> A.C. Yao. </author> <title> Theory and Application of Trapdoor Functions. </title> <booktitle> In 23st FOCS, </booktitle> <pages> pages 80-91, </pages> <year> 1982. </year>
Reference-contexts: Since the notion of computational indistinguishability is a fundamental one, it is indeed in place to present a definition of it. Definition 4 (computational indistinguishability) <ref> [32, 50] </ref>: An integer function, f , is called negligible if for every positive polynomial p and all sufficiently large n, it holds that f (n) &lt; 1 p (n) . (Thus, multiplying a negligible function by any fixed polynomial yields a negiligible function.) Two probability ensembles, fA x g x2S
References-found: 50

