URL: http://www.cs.sunysb.edu/~astiwari/rta-full.ps
Refering-URL: http://www.cs.sunysb.edu/~astiwari/
Root-URL: http://www.cs.sunysb.edu
Email: fleo,cram,ram,astiwarig@cs.sunysb.edu  
Title: Normalization via Rewrite Closures  
Author: L. Bachmair, C. Ramakrishnan, I. V. Ramakrishnan and A. Tiwari 
Address: NY 11794, U.S.A  
Affiliation: Department of Computer Science, SUNY at Stony Brook, Stony Brook,  
Abstract: We present an abstract completion-based method for finding normal forms of terms with respect to given rewrite systems. The method uses the concept of a rewrite closure, which is a generalization of the idea of a congruence closure. Our results generalize previous results on "non-oblivious" normalization. The presentation simplifies the description and allows a better understanding of known algorithms, apart from extending the results to performing normalization by convergent rewrite systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Bachmair, C. Ramakrishnan, I.V. Ramakrishnan, and A. Tiwari. </author> <note> Normalization via Rewrite Closure (Full Version). http://www.cs.sunysb.edu/ astiwari/- rta-full.ps, 1998. 15 This aspect is however not discussed in this paper. 26 </note>
Reference-contexts: Finally using our framework we also obtain non-oblivious normalization algorithms for convergent rewrite systems. Such algorithms were non-existent for this class of rewrite systems. We skip all proofs here. For details, see <ref> [1] </ref>. 1.1 Preliminaries Let denote a signature consisting of constants and function symbols. We use T () to denote terms over . The symbols s; t; u; denote terms; f; g; denote function symbols; and x; y; z; denote variables.
Reference: 2. <author> L. P. Chew. </author> <title> Normal forms in term rewriting systems. </title> <type> PhD thesis, </type> <institution> Purdue Univer--sity, </institution> <year> 1981. </year>
Reference-contexts: Observe that since we did not remember the earlier reduction we had to repeat it all over again. In contrast had we remembered it then we could have normalized f (f (a)) in n + 1 steps. Chew <ref> [2] </ref> had proposed non-oblivious normalization algorithms. In such algorithms reductions are never repeated. Chew's algorithm though was restricted to the class of orthogonal rewrite systems. His algorithm was based on the congruence closure algorithm developed by Nelson and Oppen [8]. <p> Definition 22. [7] A term rewriting system E is orthogonal if the reduction rules of E are left-linear and there are no critical overlaps. Note that this definition of orthogonal systems is only slightly more general than the definition of regular systems that appears in [6] and <ref> [2] </ref>. In this latter definition, E is regular iff it is orthogonal and either it contains no rule which has a variable as its left hand side, or, it has only one rule. We use the following well-known result. Lemma 23. [7] Every orthogonal term rewriting system is confluent. <p> Oblivious strategies for performing normalization were studied first, mainly in the works of [4]. The simple straight line reduction methods were replaced by efficient variants. <ref> [2] </ref> proposed a nonoblivious normalization procedure. It combined the earlier known straight line reduction strategy with congruence closure algorithm. Congruence closure was proposed and studied by [3] and [8], among others. [2] pointed out the advantages of using a slightly modified congruence closure to do normalization. <p> The simple straight line reduction methods were replaced by efficient variants. <ref> [2] </ref> proposed a nonoblivious normalization procedure. It combined the earlier known straight line reduction strategy with congruence closure algorithm. Congruence closure was proposed and studied by [3] and [8], among others. [2] pointed out the advantages of using a slightly modified congruence closure to do normalization. But Chew's procedure worked only for orthogonal systems.
Reference: 3. <author> Peter J. Downey, Ravi Sethi, and Robert E. Tarjan. </author> <title> Variations on the common subexpressions problem. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 758-771, </pages> <year> 1980. </year>
Reference-contexts: The simple straight line reduction methods were replaced by efficient variants. [2] proposed a nonoblivious normalization procedure. It combined the earlier known straight line reduction strategy with congruence closure algorithm. Congruence closure was proposed and studied by <ref> [3] </ref> and [8], among others. [2] pointed out the advantages of using a slightly modified congruence closure to do normalization. But Chew's procedure worked only for orthogonal systems.
Reference: 4. <author> C. M. Hoffmann and M. J. O'Donnell. </author> <title> Programming with equations. </title> <journal> Transactions on Programming Languages and Systems, </journal> <volume> 4(1) </volume> <pages> 83-112, </pages> <month> January </month> <year> 1982. </year>
Reference-contexts: Oblivious strategies for performing normalization were studied first, mainly in the works of <ref> [4] </ref>. The simple straight line reduction methods were replaced by efficient variants. [2] proposed a nonoblivious normalization procedure. It combined the earlier known straight line reduction strategy with congruence closure algorithm.
Reference: 5. <author> D. Kapur. </author> <title> Shostak's congruence closure as completion. </title> <editor> In H. Comon, editor, </editor> <booktitle> Proceedings of the 8th International Conference on Rewriting Techniques and Applications, </booktitle> <pages> pages 23-37, </pages> <year> 1997. </year> <title> Vol. </title> <booktitle> 1232 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin. </address>
Reference-contexts: We shall define congruence closures in terms of ground convergent rewrite systems over an extended signature. A key characteristic of congruence closure algorithms, as pointed out by Kapur <ref> [5] </ref>, is that names are introduced for all given terms and subterms. We may represent such names by constants and specify the correspondence between the new constants and the original terms by rewrite rules. Definition 1. Let be a signature and K be a set of constants disjoint to . <p> His work was further refined and generalized in [14] and [13]. 25 On the other hand, dynamic congruence closure algorithms were used in other areas, as combination of theories, by [11]. The dynamic congruence closure used by Shostak was clarified and presented using rewrite rules in <ref> [5] </ref>. Congruence closure was used to complete a set of ground rewrite rules in polynomial time in [12] and other works. [9] gave a direct method, not based on using congruence closure, for completing a ground rewrite system in polynomial time.
Reference: 6. <author> J. W. Klop. </author> <title> Combinatory reduction systems, volume 127 of Mathematical Centre Tracts. </title> <publisher> Mathematisch Centrum, </publisher> <year> 1980. </year>
Reference-contexts: Definition 22. [7] A term rewriting system E is orthogonal if the reduction rules of E are left-linear and there are no critical overlaps. Note that this definition of orthogonal systems is only slightly more general than the definition of regular systems that appears in <ref> [6] </ref> and [2]. In this latter definition, E is regular iff it is orthogonal and either it contains no rule which has a variable as its left hand side, or, it has only one rule. We use the following well-known result.
Reference: 7. <author> J. W. Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 1, chapter 6, </volume> <pages> pages 2-116. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1992. </year>
Reference-contexts: The correctness proof is simple and clear in our formulation. Definition 22. <ref> [7] </ref> A term rewriting system E is orthogonal if the reduction rules of E are left-linear and there are no critical overlaps. Note that this definition of orthogonal systems is only slightly more general than the definition of regular systems that appears in [6] and [2]. <p> In this latter definition, E is regular iff it is orthogonal and either it contains no rule which has a variable as its left hand side, or, it has only one rule. We use the following well-known result. Lemma 23. <ref> [7] </ref> Every orthogonal term rewriting system is confluent. Next we note that irrespective of what subset of instances are processed, the persistence property is always satisfied. Lemma 24. Let E be an orthogonal system.
Reference: 8. <author> G. Nelson and D. Oppen. </author> <title> Fast decision procedures based on congruence closure. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 27(2) </volume> <pages> 356-364, </pages> <month> April </month> <year> 1980. </year>
Reference-contexts: Chew [2] had proposed non-oblivious normalization algorithms. In such algorithms reductions are never repeated. Chew's algorithm though was restricted to the class of orthogonal rewrite systems. His algorithm was based on the congruence closure algorithm developed by Nelson and Oppen <ref> [8] </ref>. But congruence closure algorithms are used to verify equality of two ground terms with respect to a set of ground equations. So Chew had to extend it to deal with equalities containing variables, represented as a rewrite system. Verma [13] extended Chew's work to deal with priority systems. <p> The simple straight line reduction methods were replaced by efficient variants. [2] proposed a nonoblivious normalization procedure. It combined the earlier known straight line reduction strategy with congruence closure algorithm. Congruence closure was proposed and studied by [3] and <ref> [8] </ref>, among others. [2] pointed out the advantages of using a slightly modified congruence closure to do normalization. But Chew's procedure worked only for orthogonal systems.
Reference: 9. <author> D. Plaisted and A. Sattler-Klein. </author> <title> Proof lengths for equational completion. </title> <journal> Information and Computation, </journal> <volume> 125 </volume> <pages> 154-170, </pages> <year> 1996. </year>
Reference-contexts: The dynamic congruence closure used by Shostak was clarified and presented using rewrite rules in [5]. Congruence closure was used to complete a set of ground rewrite rules in polynomial time in [12] and other works. <ref> [9] </ref> gave a direct method, not based on using congruence closure, for completing a ground rewrite system in polynomial time. Hence our work completes the missing link, by showing that congruence closure is nothing but ground completion. <p> It is directly seen in the works of Chew and Kapur. The prolific use of DAGs as efficient data-structures in most of the other related work can be seen as an implementation of the idea of variable abstraction. <ref> [9] </ref> presents an example of a rewrite system, which could give an exponentially long normalizing sequence for certain terms. Interestingly, it could be noted that such blow-ups in the length of normalizing sequences could be avoided by using new names for subterms.
Reference: 10. <author> C. Ringeissen. </author> <title> Cooperation of decision procedures for the satisfiability problem. </title> <editor> In F. Baader and K. U. Schulz, editors, </editor> <booktitle> Frontiers of Combining Systems, </booktitle> <pages> pages 121-139, </pages> <address> 1996. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Interestingly, it could be noted that such blow-ups in the length of normalizing sequences could be avoided by using new names for subterms. Variable abstraction is found to be basic to several other problems like combination of theories, see <ref> [10] </ref>. The idea of abstract congruence closure presented here helps us to see the various different congruence closure algorithms in a generalized framework 15 . The extension to the idea of a rewrite closure is fairly natural and simple.
Reference: 11. <author> R. E. Shostak. </author> <title> Deciding combinations of theories. </title> <journal> Journal of the ACM, </journal> <volume> 21(7) </volume> <pages> 583-585, </pages> <year> 1984. </year>
Reference-contexts: But Chew's procedure worked only for orthogonal systems. His work was further refined and generalized in [14] and [13]. 25 On the other hand, dynamic congruence closure algorithms were used in other areas, as combination of theories, by <ref> [11] </ref>. The dynamic congruence closure used by Shostak was clarified and presented using rewrite rules in [5].
Reference: 12. <author> W. Snyder. </author> <title> A fast algorithm for generating reduced ground rewriting systems from a set of ground equations. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(7), </volume> <year> 1993. </year>
Reference-contexts: The dynamic congruence closure used by Shostak was clarified and presented using rewrite rules in [5]. Congruence closure was used to complete a set of ground rewrite rules in polynomial time in <ref> [12] </ref> and other works. [9] gave a direct method, not based on using congruence closure, for completing a ground rewrite system in polynomial time. Hence our work completes the missing link, by showing that congruence closure is nothing but ground completion.
Reference: 13. <author> R. M. Verma. </author> <title> A theory of using history for equational systems with applications. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 42 </volume> <pages> 984-1020, </pages> <year> 1995. </year>
Reference-contexts: But congruence closure algorithms are used to verify equality of two ground terms with respect to a set of ground equations. So Chew had to extend it to deal with equalities containing variables, represented as a rewrite system. Verma <ref> [13] </ref> extended Chew's work to deal with priority systems. Both of the above works can be viewed as an operational approach to doing normalization without repeating reductions. In contrast we present an abstract view of non-oblivious normalization. In particular we describe a completion-based method to do normalization without repeating reductions. <p> Congruence closure was proposed and studied by [3] and [8], among others. [2] pointed out the advantages of using a slightly modified congruence closure to do normalization. But Chew's procedure worked only for orthogonal systems. His work was further refined and generalized in [14] and <ref> [13] </ref>. 25 On the other hand, dynamic congruence closure algorithms were used in other areas, as combination of theories, by [11]. The dynamic congruence closure used by Shostak was clarified and presented using rewrite rules in [5]. <p> The extension to the idea of a rewrite closure is fairly natural and simple. The simplified presentation allows to give straightforward proofs for the results of Chew and Verma. In contrast, it is said in <ref> [13] </ref> that the proof of completeness of the normalization method is long and intricate. We dispense away with the concept of strong closure which is so forcefully used in proofs there. Our results are strictly more general than the ones known before. The best known result, that appears in [13], gives <p> in <ref> [13] </ref> that the proof of completeness of the normalization method is long and intricate. We dispense away with the concept of strong closure which is so forcefully used in proofs there. Our results are strictly more general than the ones known before. The best known result, that appears in [13], gives six postulates that a rewrite relation should satisfy in order to prove completeness of a rewrite-closure based procedure for normalization.
Reference: 14. <author> R. M. Verma and I. V. Ramakrishnan. </author> <title> Nonoblivious normalization algorithms for nonlinear systems. </title> <booktitle> In Proc. of the Int. Colloquium on Automata, Languages and Programming, </booktitle> <address> New York, 1990. </address> <publisher> Springer-Verlag. </publisher> <pages> 27 </pages>
Reference-contexts: Congruence closure was proposed and studied by [3] and [8], among others. [2] pointed out the advantages of using a slightly modified congruence closure to do normalization. But Chew's procedure worked only for orthogonal systems. His work was further refined and generalized in <ref> [14] </ref> and [13]. 25 On the other hand, dynamic congruence closure algorithms were used in other areas, as combination of theories, by [11]. The dynamic congruence closure used by Shostak was clarified and presented using rewrite rules in [5].
References-found: 14

