URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1-baalen.ps.Z
Refering-URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1.html
Root-URL: http://www.cs.man.ac.uk
Email: -jvb, sroach-@ptolemy.arc.nasa.gov  
Title: Using Decision Procedures to Build Domain-Specific Deductive Synthesis Systems  
Author: Jeffrey Van Baalen Steven Roach M.S. - 
Address: Moffet Field, CA  
Affiliation: NASA Ames Research Center  
Abstract-found: 0
Intro-found: 1
Reference: [Baader 97] <author> Baader, F. & Tinelli, C., </author> <title> A New Approach for Combining Decision Procedures for the Word Problem, and its Connection to the Nelson-Oppen Combination Method, </title> <booktitle> CADE14, </booktitle> <pages> pp. 19-33, </pages> <year> 1997. </year>
Reference-contexts: Finally, both [N&O79] and [Cyrluk 96] describe techniques for combining GLSPs with disjoint languages into a GLSP for the union of these languages. Much work has been done recently on the closely re lated topic of combining decision procedures for equational theories <ref> [Baader 97] </ref>.
Reference: [Boyer and Moore 88] <author> R. Boyer and Moore, J, </author> <title> Integrating Decision Procedures into Heuristic Theorem Provers: A Case Study of Linear Arithmetic , Institute for Computing Science and Computer Applications, </title> <institution> University of Texas as Austin, </institution> <year> 1988. </year>
Reference: [Burckert 91] <author> Burckert, H. J., </author> <title> A Resolution Principle for a Logic With Restricted Quantifiers, </title> <booktitle> Lecture Notes in Artificial Intelligence , Vol. </booktitle> <volume> 568, </volume> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In order for a system including separated versions of these rules to be complete, a number of additional types of axioms must be added such as separated versions of predicate congruence axioms. Further discussion of completeness is outside the scope of this paper. <ref> [Burckert 91] </ref> points out that for some restriction theories, closed separated refutations can always be obtained by considering the validity of only the restrictions of individual clauses.
Reference: [Chang & Lee 73] <author> Chang, C & Lee, </author> <title> R.C ., Symbolic Logic and Mechanical Theorem Proving , Academic Press, </title> <address> New York, </address> <year> 1973. </year>
Reference: [Cyrluk 96] <author> Cyrluk, D., Lincoln, P., Shankar, N. </author> <title> On Shostaks decision procedures for combinations of theories, </title> <booktitle> Automated Deduction--CADE-13 Lecture Notes in AI 1104, </booktitle> <editor> (M. A. McRobbie and J. K. Slaney Eds), </editor> <publisher> Springer, </publisher> <address> p463-477, </address> <year> 1996. </year>
Reference-contexts: While much existing research on decision procedures has been either in isolation <ref> [N&O 79, Shostak 84, Cyrluk 96] </ref> or in the context of interfacing procedures to non-refutation-based theorem provers [PVS 92, B&M 88], we are unaware of any work done on decision procedures in the context of deductive synthesis where witnesses must be found. <p> The argument supporting this claim has three parts. First, a significant number of GLSPs have been identified and published [N&O 79][N&O 80] <ref> [Cyrluk 96] </ref>. Second, other work reports on techniques for extending some GLSPs that have been identified. Third, there are techniques that enable GLSPs to be combined. <p> The essential idea is to introduce boolean constants True False and to represent True )=False Then, if the congruence closure graph of a conjunction contains True=False is unsatisfiable. Finally, both [N&O79] and <ref> [Cyrluk 96] </ref> describe techniques for combining GLSPs with disjoint languages into a GLSP for the union of these languages. Much work has been done recently on the closely re lated topic of combining decision procedures for equational theories [Baader 97].
Reference: [Deville 94] <author> Deville, Y. and Lau, K., </author> <title> Logic Program Synthesis, </title> <journal> Journal of Logic Programming 321-350, </journal> <year> 1994. </year>
Reference-contexts: It takes an abstract specification of a problem in solar system mechanics, such as when will a signal sent from the Cassini spacecraft to Earth be blocked by the planet Saturn?, and automatically synthesizes a FORTRAN program to solve it. Amphion/NAIF uses deductive synthesis (a.k.a proofs-as-programs <ref> [Deville 94] </ref>) in which programs are synthesized as a byproduct of theorem proving. In this paradigm, problem specifications are of the form , where and are vectors of variables. We are only interested in constructive proofs in which witnesses have been produced for each of the variables in .
Reference: [Dunham 63] <author> Dunham, B. and North, J., </author> <title> Theorem Testing by Computer, </title> <booktitle> Proceedings of the Symposium on Mathematical Theory of Automata , Polytechnic Press, Brooklyn, N. Y., </booktitle> <pages> pp. 173-177, </pages> <year> 1963. </year>
Reference-contexts: This paper focuses on the case where validity of only single restrictions needs to be checked. When this is not the case, getting a closed separated refutation requires an additional inference rule (such as consensus <ref> [Dunham 63] </ref>) or it requires decision procedures to be used in a more complicated manner than presented here. Thus far the simpler case has been sufficient in our work on deductive synthesis.
Reference: [Gallier 86] <author> Gallier, J. H., </author> <title> Logic for Computer Science: Foundations of Automatic Theorem Proving, </title> <publisher> Harper and Row, </publisher> <year> 1986. </year>
Reference-contexts: We have also constructed several new procedures by extending a GLSP for uninterpreted function symbols. Also, <ref> [Gallier 86, ch 10.6] </ref> gives techniques for constructing GLSPs based on congruence closure for conjunctions of ground literals containing predicates. The essential idea is to introduce boolean constants True False and to represent True )=False Then, if the congruence closure graph of a conjunction contains True=False is unsatisfiable.
Reference: [Lowry 97] <author> M. Lowry and J. Van Baalen, META-Amphion: </author> <title> Synthesis of Efficient Domain-Specific Pro gram Synthesis Systems, </title> <booktitle> Automated Software Engineering , vol 4, </booktitle> <address> pp199-241, </address> <year> 1997. </year>
Reference-contexts: This tuning process usually requires a large amount of time and expertise in automated reasoning and is therefore costly. In order to assist in constructing efficient implementations, we are developing a tool, Meta-Amphion <ref> [Lowry 97] </ref>, that takes a domain theory as input and automatically generates an efficient, specialized deductive synthesis engine such as Amphion/NAIF. The key is a technique that generates efficient decision procedures for subtheories of the domain theory and then integrates them with a general-purpose refutation-based theorem-prover. <p> Given a theory , we can design from components an integrated decision procedure for a restriction theory. (See <ref> [Lowry 97] </ref> or [Roach 97] for examples of techniques for designing decision proce dures from components.) 4 Deductive Synthesis Decision Procedures This section shows that if a GLSP has the additional property of being closure-based it can be used not only to check satisfiability but also to check for entailment and
Reference: [N& O 79] <author> Nelson, G., and Oppen, D., </author> <title> Simplification By Cooperating Decision Procedures, </title> <journal> ACM Trans actions on Programming Languages and Systems </journal>
Reference: [N&O 80] <author> Nelson, G., and Oppen, D., </author> <title> Fast decision procedures based on congruence closure, </title> <journal> Journal of the ACM </journal>
Reference-contexts: First, a significant number of GLSPs have been identified and published [N&O 79]<ref> [N&O 80] </ref> [Cyrluk 96]. Second, other work reports on techniques for extending some GLSPs that have been identified. Third, there are techniques that enable GLSPs to be combined. Nelson & Oppen in [N&O 80] show how to extend a GLSP for the theory of equality with uninterpret ed function symbols to a theory of LISP list structure, i.e., a theory in which the function symbols HEAD TAIL CONS are interpreted.
Reference: [PVS 92] <author> Owre, S., Rushby, M., and Shankar, N., PVS: </author> <title> A Prototype Verification System, </title> <journal> CADE-11, </journal> <volume> LNAI Vol 607, </volume> <pages> pp 748-752, </pages> <year> 1992. </year>
Reference-contexts: While much existing research on decision procedures has been either in isolation [N&O 79, Shostak 84, Cyrluk 96] or in the context of interfacing procedures to non-refutation-based theorem provers <ref> [PVS 92, B&M 88] </ref>, we are unaware of any work done on decision procedures in the context of deductive synthesis where witnesses must be found. This paper presents a decision procedure interface to a theorem prover with several inference rules including binary resolution and paramodulation.
Reference: [Roach 97] <author> Roach, S., TOPS: </author> <title> Theory Operationalization for Program Synthesis, </title> <type> Ph.D. </type> <institution> Thesis at University of Wyoming, </institution> <year> 1997. </year>
Reference-contexts: The key is a technique that generates efficient decision procedures for subtheories of the domain theory and then integrates them with a general-purpose refutation-based theorem-prover. A prototype of Meta-Amphion has been constructed <ref> [Roach 97] </ref>. This prototype has generated domain-specific deductive synthesis systems that achieve a significant speed improvement over non-optimized, general-purpose theorem provers. More importantly, these generated systems perform at least as well as, and often better than, expertly-tuned theorem provers for particular application domains. <p> Given a theory , we can design from components an integrated decision procedure for a restriction theory. (See [Lowry 97] or <ref> [Roach 97] </ref> for examples of techniques for designing decision proce dures from components.) 4 Deductive Synthesis Decision Procedures This section shows that if a GLSP has the additional property of being closure-based it can be used not only to check satisfiability but also to check for entailment and to produce witnesses
Reference: [Shostak 79] <author> Shostak, R., </author> <title> A practical decision procedure for arithmetic with function symbols, </title> <journal> Journal of the ACM , Vol. </journal> <volume> 26, </volume> <pages> pp. 351-360, </pages> <year> 1979. </year>
Reference: [Shostak 84] <author> Shostak, R., </author> <title> Deciding Combinations of Theories, </title> <journal> Journal of the ACM , Vol. </journal> <volume> 31, </volume> <pages> pp. 1-12, </pages> <year> 1984. </year> <note> [Stickel 94] M. </note> <author> Stickel, R. Waldinger, M. Lowry, T. Pressburger, and I. Underwood, </author> <title> Deductive Composition of Astronomical Software from Subroutine Libraries, </title> <note> CADE-12 , 1994. See http://ic-www.arc.nasa.gov/ic/projects/amphion/docs/amphion.html </note>
Reference-contexts: While much existing research on decision procedures has been either in isolation <ref> [N&O 79, Shostak 84, Cyrluk 96] </ref> or in the context of interfacing procedures to non-refutation-based theorem provers [PVS 92, B&M 88], we are unaware of any work done on decision procedures in the context of deductive synthesis where witnesses must be found.
References-found: 15

