URL: http://www.cse.ogi.edu/~dhansen/papers/ssdbm94.ps.gz
Refering-URL: http://www.cse.ogi.edu/~dhansen/html/research.html
Root-URL: http://www.cse.ogi.edu
Title: Bambi Meets Godzilla: Object Databases for Scientific Computing of massive data sets and tertiary storage
Author: David Maier David M. Hansen 
Note: Management  
Address: Portland, OR 97291-1000 Portland, OR 97291-1000  
Affiliation: Computer Science Engineering Computer Science Engineering Oregon Graduate Institute Oregon Graduate Institute  
Abstract: We begin by recounting our experiences with using OODBs for scientific data, in the domains of computational chemistry, and materials science. The bulk of the talk, however, deals with areas that need improvement for OODBs to support scientific applications well, among them: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Proceedings of the Massive Digital Data Systems Workshop, Reston, Virginia, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: While OODBs are gaining use in support of applications in scientific computing, we see many aspects that could be improved, which we outline in the following subsections. 4.1 Massive Data Sets The issues of massive data sets and tertiary storage management have been documented for data management systems in general <ref> [1] </ref>. Here we cover issues particular to object-oriented databases. Support for tertiary storage means the ability to move objects from online secondary storage to near-line or o*ine media. OODBs that tie object identifiers to physical locations will have a hard time with that migration.
Reference: [2] <author> Peter Baumann. </author> <title> Database support for multidimensional discrete data. </title> <editor> In David Abel and Beng Chin Ooi, editors, </editor> <booktitle> Advances in Spatial Databases, volume 692 of Lecture Notes in Computer Science, </booktitle> <pages> pages 191 - 206. </pages> <publisher> Springer Verlag, </publisher> <address> New York, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: First, the primary reason for choosing to use an OODB is the richness of the modeling constructs. Domains that work with complex data structures such as image data <ref> [5, 2] </ref>, geographic data [9], experiment management [23], and protein structures [3, 11] seem to be common testbeds for OODB technology. The second observation is that many users are still building their own OODBMS. <p> Researchers working with the Brookhaven Protein Data Bank (PDB) have constructed an OODBMS for managing protein struc-ture data [11, 23]. Others have built object-oriented layers on top of a relational DBMS such as the APRIL object model for image data that is layered atop an Oracle database <ref> [2] </ref>. 3.1 Our Work We have been applying OODB technology to the scientific domains of computational chemistry and materials science [6]. The common approach in each domain is to use OODB as an integrating technology, bringing together application programs and relevant sources of data (Figure 1).
Reference: [3] <author> Philip E. Bourne and Calton Pu. </author> <title> Tools for the management of data from the protein data bank. </title> <editor> In Wesley W. Chu, A. F. Cardenas, and Ricky K. Taira, editors, </editor> <booktitle> Proceedings of the NSF Scientific Database Projects, </booktitle> <pages> pages 8 - 15, </pages> <address> Boston, Mas-sachussetts, </address> <month> February </month> <year> 1993. </year> <institution> AAAS, NSF. </institution>
Reference-contexts: First, the primary reason for choosing to use an OODB is the richness of the modeling constructs. Domains that work with complex data structures such as image data [5, 2], geographic data [9], experiment management [23], and protein structures <ref> [3, 11] </ref> seem to be common testbeds for OODB technology. The second observation is that many users are still building their own OODBMS. Researchers working with the Brookhaven Protein Data Bank (PDB) have constructed an OODBMS for managing protein struc-ture data [11, 23]. <p> We note that this "hourglass" architecture, with a common object-oriented domain model through which tools can access multiple data sources, is essentially the same as that adapted by Bourne and Pu <ref> [3] </ref> for work with the Protein Data Bank. Each of these domains imposes limits on the degree of integration due to the presence of legacy components (applications and databases).
Reference: [4] <author> R. G. G. Cattell. </author> <title> The Object Database Standard: ODMG - 93. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Cal-ifornia, </address> <year> 1994. </year>
Reference-contexts: While not an inherent feature of an OODB, current products provide more than one collection or "bulk" type. Typically, multisets, lists and one-dimensional arrays are supported, in addition to sets. (The proposed ODMG-93 standard includes all these bulk types <ref> [4] </ref>, so they are likely to appear in future commercial offerings as well.) Ordered types, particularly arrays, are largely unsupported in record-oriented models, but valuable in scientific applications for modeling dimensional data (with spatial or temporal components). Arrays are clumsy to encode and manipulate in conventional data models.
Reference: [5] <author> Wesley W. Chu, Alfonso F. Cardenas, and Ricky K. Taira. </author> <title> A knowledge-based multimedia medical distributed database system - KMeD. </title> <editor> In Wesley W. Chu, A. F. Cardenas, and Ricky K. Taira, editors, </editor> <booktitle> Proceedings of the NSF Scientific Database Projects, </booktitle> <pages> pages 2 - 7, </pages> <address> Boston, Mas-sachussetts, </address> <month> February </month> <year> 1993. </year> <institution> AAAS, NSF. </institution>
Reference-contexts: First, the primary reason for choosing to use an OODB is the richness of the modeling constructs. Domains that work with complex data structures such as image data <ref> [5, 2] </ref>, geographic data [9], experiment management [23], and protein structures [3, 11] seem to be common testbeds for OODB technology. The second observation is that many users are still building their own OODBMS.
Reference: [6] <author> Judith Bayard Cushing, David Hansen, David Maier, and Calton Pu. </author> <title> Connecting scientific programs and data using object databases. </title> <journal> IEEE Bulletin on Data Engineering, </journal> <volume> 16(1):9 - 13, </volume> <month> March </month> <year> 1993. </year>
Reference-contexts: Others have built object-oriented layers on top of a relational DBMS such as the APRIL object model for image data that is layered atop an Oracle database [2]. 3.1 Our Work We have been applying OODB technology to the scientific domains of computational chemistry and materials science <ref> [6] </ref>. The common approach in each domain is to use OODB as an integrating technology, bringing together application programs and relevant sources of data (Figure 1). A central premise of our work is that each domain can be modeled using a domain-specific object-oriented data model.
Reference: [7] <author> Judith Bayard Cushing, David Maier, Meenakshi Rao, Don Abel, D. Michael DeVaney, and David Feller. </author> <title> Computational proxies: Modeling scientific applications in object databases. </title> <booktitle> In Proceedings of the Seventh International Working Conference on Scientific and Statistical Database Management, </booktitle> <address> Charlottesville, Virginia, Septem-ber 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A common data model for computational experiments provides a mechanism for sharing data among applications, and provides a uniform view of experimental results output from different programs (Figure 2). We use a "computational proxy" for specifying and conducting a computational chemistry experiment <ref> [7] </ref>. A proxy contains information about the computational chemistry code to be run and its parameters. As we are dealing with codes that are problematic to modify, they are left intact, and the proxy provides mappings to construct input files from database objects and to parse outputs into objects.
Reference: [8] <author> Judith Bayard Cushing, David Maier, Meenakshi Rao, D. Michael DeVaney, and David Feller. </author> <title> Object-oriented database support for computational chemistry. </title> <editor> In Hans Hinterberger and James C. French, editors, </editor> <booktitle> Proceedings of the Sixth International Working Conference on Scientific and Statistical Database Management, </booktitle> <pages> pages 58 - 76, </pages> <address> Ascona, Switzerland, </address> <month> June </month> <year> 1992. </year> <institution> Institute for Scientific Computing, ETH Zurich. </institution>
Reference-contexts: Our work has explored solutions to these integration problems as well as the general applicability of OODBs to managing scientific data. 3.1.1 Computational Chemistry The focus of our work in computational chemistry is to integrate large, stand-alone computational chemistry "codes" using a single object-oriented data model for input and output <ref> [8] </ref>. A common data model for computational experiments provides a mechanism for sharing data among applications, and provides a uniform view of experimental results output from different programs (Figure 2). We use a "computational proxy" for specifying and conducting a computational chemistry experiment [7].
Reference: [9] <author> Benoit David, Laurent Raynal, Guylaine Schorter, and Veronique Mansart. </author> <title> GeO 2 : Why objects in a geographical DBMS? In David Abel and Beng Chin Ooi, </title> <editor> editors, </editor> <booktitle> Advances in Spatial Databases, volume 692 of Lecture Notes in Computer Science, </booktitle> <pages> pages 264 - 276. </pages> <publisher> Springer Verlag, </publisher> <address> New York, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: First, the primary reason for choosing to use an OODB is the richness of the modeling constructs. Domains that work with complex data structures such as image data [5, 2], geographic data <ref> [9] </ref>, experiment management [23], and protein structures [3, 11] seem to be common testbeds for OODB technology. The second observation is that many users are still building their own OODBMS. Researchers working with the Brookhaven Protein Data Bank (PDB) have constructed an OODBMS for managing protein struc-ture data [11, 23].
Reference: [10] <author> Nathan Goodman. </author> <title> An object-oriented DBMS war story: Developing a genome mapping database in C++. </title> <editor> In W. Kim, editor, </editor> <title> Modern Database Management: Object-Oriented and Multidatabase Technologies. </title> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: SDMs, in contrast, are more state oriented, and the hierarchies of entity types they support are for constraint or clas sification. Much of what they define is not statically checkable. Others have noted the limitations of OO programming languages as the basis for data modeling <ref> [10] </ref>. Few OODBs have direct support for part-of relationships or for taxonomies. While it is sometimes possible to map a taxonomy onto the class hierarchy of an OODB, such a representation presents problems. Changes or extensions to the taxonomy then mean class modification after the database is deployed.
Reference: [11] <author> P. M. D. Gray, N. W. Paton, G. J. L. Kemp, and J. E. Fothergill. </author> <title> An object-oriented database for protein structure analysis. </title> <journal> Protein Engineering, </journal> <volume> 3(4):235 - 243, </volume> <year> 1990. </year>
Reference-contexts: First, the primary reason for choosing to use an OODB is the richness of the modeling constructs. Domains that work with complex data structures such as image data [5, 2], geographic data [9], experiment management [23], and protein structures <ref> [3, 11] </ref> seem to be common testbeds for OODB technology. The second observation is that many users are still building their own OODBMS. Researchers working with the Brookhaven Protein Data Bank (PDB) have constructed an OODBMS for managing protein struc-ture data [11, 23]. <p> The second observation is that many users are still building their own OODBMS. Researchers working with the Brookhaven Protein Data Bank (PDB) have constructed an OODBMS for managing protein struc-ture data <ref> [11, 23] </ref>. Others have built object-oriented layers on top of a relational DBMS such as the APRIL object model for image data that is layered atop an Oracle database [2]. 3.1 Our Work We have been applying OODB technology to the scientific domains of computational chemistry and materials science [6].
Reference: [12] <author> David Hansen, David Maier, James Stanley, and Jonathan Walpole. </author> <title> An object-oriented heterogeneous database for materials science. </title> <journal> Scientific Programming, </journal> <volume> 1(2):115 - 131, </volume> <month> Winter </month> <year> 1992. </year>
Reference: [13] <author> David M. Hansen and David Maier. </author> <title> Using an object-oriented database to encapsulate hetero geneous scientific data sources. </title> <editor> In Jay F. Nuna--maker and Ralph H. Sprague, editors, </editor> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, volume III, </booktitle> <pages> pages 408 - 417, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1994. </year> <title> The University of Hawaii, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The second objective is to develop completely new object-oriented applications and databases where the data is stored in the OODB and the applications are developed using object-oriented programming techniques and languages. We are using an OODB to integrate and provide access to large, unmanaged databases of materials property data <ref> [13] </ref>. A space-efficient, tunable representation of the data in external files is stored within the OODB and the objects in the OODB transparently access data from external files on demand (Figure 3).
Reference: [14] <author> H. L. Jenter and R. P. Signell. NetCDF: </author> <title> A freely-available software-solution to data-access problems for numerical modelers. </title> <booktitle> In Proceedings of the American Society of Civil Engineers Conference on Estuarine and Coastal Modeling, </booktitle> <address> Tampa, Florida, </address> <year> 1992. </year>
Reference-contexts: Some DIFs are being extended with alternative access methods. For example, recent versions of netCDF <ref> [14] </ref> allow record-like reads and writes to files. The question then comes, why bother with a DBMS rather than storing data in DIF files? There are a number of advantages to the latter approach. The software for accessing these files is easy to port and has been widely ported.
Reference: [15] <author> Gregory A. Jirak. Aurora dataserver. </author> <title> In IEEE Visualization '93 Workshop on Database Issues for Data Visualization. </title> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: Whichever form is provided, it should be well enough integrated to use in formulating and processing queries. Metadata management (in the sense of descriptive or annotative information for datasets) is not directly supported in OODB products. A good example for a starting place is the Aurora Dataserver <ref> [15] </ref>, which has an extended relational model. Aurora stores metadata about dimensional datasets, and has a generic facility for annotating such datasets. Another modeling issue is how much behavioral capability should the database be able to capture.
Reference: [16] <author> S. I. Letovsky and M. B. Berlyn. </author> <title> Issues in the development of complex scientific databases. </title> <editor> In Lawrence Hunter, editor, </editor> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, volume V, </booktitle> <pages> pages 5 - 14, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1994. </year> <title> The University of Hawaii, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Such is the case with an implementation of the E. Coli Genetic Stock Center (CGSC) database where an object-oriented model for E. Coli bacteria was implemented using a relational DBMS <ref> [16] </ref>. While some of the benefits above obtain in such approach, we see potential problems. In the cited reference, 11 "objects" were mapped into over 100 relations.
Reference: [17] <author> David Maier, Judith Bayard Cushing, David M. Hansen, George D. Purvis III, Raymond A. Bair, D. Michael DeVaney, David F. Feller, and Mark A. Thompson. </author> <title> Object data models for shared molecular structures. </title> <editor> In R. Lysakowski, editor, </editor> <booktitle> First International Symposium on Computerized Chemical Data Standards: Databases, Data Interchange, and Information Systems, </booktitle> <address> At-lanta, GA, </address> <month> May </month> <year> 1993. </year> <month> ASTM. </month>
Reference: [18] <author> David Maier and Bennet Vance. </author> <title> A call to order. </title> <editor> In Kenneth A. Ross, editor, </editor> <booktitle> Proceedings of the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 1 - 16, </pages> <address> Washington, DC, May 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Here it is not just membership of a collection but its "topology" that is important. Information is encoded in the nearness of one element to another. We have detailed the issues in supporting ordered types in a database elsewhere <ref> [18] </ref>. As mentioned earlier, commercial OODBs provide multiple bulk types, including ordered types such as lists and arrays. However, system support for such types is limited. There are limited (generally one) options for physical layout of an ordered collection instance.
Reference: [19] <author> Hitomi Ohkawa. </author> <title> Object-Oriented Database Support for Scientific Data Management: A System for Experimentation. </title> <type> PhD thesis, </type> <institution> Oregon Graduate Institute of Science & Technology, </institution> <address> Portland, OR, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: To our knowledge, no OODB product offers a FORTRAN API, which easily excludes half the possible audience. APIs from visualization and statistical analysis packages would also increase the attractiveness of OODBs. An initial prototype that connected the newS environment for data analysis and graphics to a commercial OODB <ref> [19] </ref> convinces us that such a linkage could be made quite seamless, and might greatly enhance the ability of such an analysis tool to handle large datasets. Besides specific languages, the form of the API is important.
Reference: [20] <author> Dong-Guk Shin, Rohit Gupta, and T. C. Ting. </author> <title> Achieving interoperability between heterogeneous object-oriented genomic databases. </title> <editor> In Lawrence Hunter, editor, </editor> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, volume V, </booktitle> <pages> pages 77 - 86, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1994. </year> <title> The University of Hawaii, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: DIFs allow exchange of data structures between programs, rather than just byte streams. They do not support the exchange of objects, in that there is no behavioral component, though some groups have written object layers over them <ref> [20] </ref>. They are typically implemented as a procedure library that is linked with an application. An interesting phenomenon is that DIFs are being used for data management, though they were intended for data exchange.
Reference: [21] <author> R. Venkatesh, David M. Hansen, James T. Stan-ley II, and David Maier. </author> <title> Applications of object database technology in thermodynamics and materials science. </title> <booktitle> To appear in Proceedings of the Symposium on Applications of Thermodynamics in the Synthesis and Processing of Materials, </booktitle> <address> Rosemont, IL, </address> <month> October </month> <year> 1994. </year> <title> TMS Materials Week. </title>
Reference-contexts: Another aspect of our work in materials science is to develop completely new object-oriented applications and databases. The Engel-Brewer Correlation method of calculating phase diagrams is being developed as an object-oriented application that is tightly coupled with an OODB <ref> [21] </ref>. As depicted in Figure 4, some of the application code is stored in the database as methods associated with the database objects. These methods are accessible by other applications and by interactive user queries.
Reference: [22] <author> Sandar Walther and Richard Peskin. </author> <title> Object-oriented data management for interactive visualization of scientific databases. </title> <editor> In Wesley W. Chu, A. F. Cardenas, and Ricky K. Taira, editors, </editor> <booktitle> Proceedings of the NSF Scientific Database Projects, </booktitle> <pages> pages 131 - 136, </pages> <address> Boston, Massachussetts, Febru-ary 1993. </address> <publisher> AAAS, NSF. </publisher>
Reference: [23] <author> Janet L. Wiener and Yannis E. Ioannidis. </author> <title> A Moose and a Fox can aid scientists with data management problems. In Catriel Beeri, Atsushi Ohori, </title> <editor> and Dennis E. Shasha, editors, </editor> <booktitle> Database Programming Languages, Workshops in Computing, </booktitle> <pages> pages 376 - 398. </pages> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: First, the primary reason for choosing to use an OODB is the richness of the modeling constructs. Domains that work with complex data structures such as image data [5, 2], geographic data [9], experiment management <ref> [23] </ref>, and protein structures [3, 11] seem to be common testbeds for OODB technology. The second observation is that many users are still building their own OODBMS. Researchers working with the Brookhaven Protein Data Bank (PDB) have constructed an OODBMS for managing protein struc-ture data [11, 23]. <p> The second observation is that many users are still building their own OODBMS. Researchers working with the Brookhaven Protein Data Bank (PDB) have constructed an OODBMS for managing protein struc-ture data <ref> [11, 23] </ref>. Others have built object-oriented layers on top of a relational DBMS such as the APRIL object model for image data that is layered atop an Oracle database [2]. 3.1 Our Work We have been applying OODB technology to the scientific domains of computational chemistry and materials science [6]. <p> Some OODBs impose enough performance overhead on method execution in the database to make capturing computationally intensive procedures as methods unattractive. Some database researchers have proposed providing uniform access to stored data and data that comes from simulation models <ref> [23] </ref>. However, one can meet this requirement without necessarily having the simulation models be part of database class definitions. One of the selling points of conventional DBMSs are the development tools available that work with them, which allow certain stereotypical applications to be constructed rapidly, often with little programming.
References-found: 23

