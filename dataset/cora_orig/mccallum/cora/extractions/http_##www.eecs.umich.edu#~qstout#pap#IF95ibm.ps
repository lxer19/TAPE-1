URL: http://www.eecs.umich.edu/~qstout/pap/IF95ibm.ps
Refering-URL: http://www.eecs.umich.edu/~qstout/abs/IF95ibm.html
Root-URL: http://www.cs.umich.edu
Title: Statistical Analysis of Communication Time on the IBM SP2  
Author: Theodore B. Tabe Janis P. Hardwick Quentin F. Stout 
Keyword: all-to-all communication, resampling, performance evaluation, message passing, operating systems, interrupts, heavy tails  
Address: Ann Arbor, MI 48109  
Affiliation: University of Michigan,  
Note: In Computing Science and Statistics 27 (1995), pp. 347-351.  
Abstract: For parallel computers, the execution time of communication routines is an important determinate of users' performance. For one parallel computer, the IBM SP2, all of the higher-level communications routines show a drop in performance as the number of processors involved in the communication increases. Such a drop is unexpected and does not occur on most other parallel machines. While a few others have also recently studied the SP2's communication performance, they have reported only average performance, and failed to comment on the drop in performance or its causes [1, 9]. We generated a distribution of times for these routines and developed a simulator in an attempt to recreate the observed distribution. By studying distributions of communication times and by refining the simulator, we were able to discern that the performance decrease is due to the variation in the communication times of the lower-level primitives upon which the higher-level communication routines are built. This variation is in turn caused by the deleterious effects of interrupts generated by an operating system untuned to high-performance parallel computing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. L. Boyd, G. A. Abandah, H.-H. Lee, and E. S. Davidson, </author> <title> "Modeling Computation and Communications Performance of Parallel Scientific Applications: A Case Study of the IBM SP2", </title> <note> draft submitted to Supercomputing '95. </note>
Reference: [2] <author> S. Hinrichs, C. Kosak, D. R. O'Hallaron, T. M. Stricker, and R. </author> <title> Take, "An Architecture for Optimal All-to-All Personalized Communication", </title> <type> Technical Report CMU-CS-94-140, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: Several papers have been written concerning All-to-All communication, and a variety of implementations have been developed for different machines <ref> [2, 3, 4] </ref>. However, various limitations of the SP2 hardware prohibit many of these implementations (see [7]).
Reference: [3] <author> S. L. Johnsson, C.-T. Ho, </author> <title> "Optimal All-to-All Personalized Communication with Minimum Span on Boolean Cubes",Technical Report TR-18-91, </title> <institution> Har-vard University, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Several papers have been written concerning All-to-All communication, and a variety of implementations have been developed for different machines <ref> [2, 3, 4] </ref>. However, various limitations of the SP2 hardware prohibit many of these implementations (see [7]).
Reference: [4] <author> K. K. Mathur, S. L. Johnsson, </author> <title> "All-to-All Communication on the Connection Machine CM-200", </title> <type> Technical Report TR-02-93, </type> <institution> Havard University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: Several papers have been written concerning All-to-All communication, and a variety of implementations have been developed for different machines <ref> [2, 3, 4] </ref>. However, various limitations of the SP2 hardware prohibit many of these implementations (see [7]).
Reference: [5] <author> R. Mraz, </author> <title> "Reducing the Variance of Point-to-Point Transfers for Parallel Real-Time Programs", </title> <address> http://ibm.tc.cornell.edu/ibm/pps/doc. </address>
Reference-contexts: It is also invoked every time a process yields the CPU and after most interrupts. Therefore, the dispatcher is invoked at least 100 times a second. The dispatcher's job is to execute the process with the highest priority on the CPU <ref> [5] </ref>. The process with the highest priority is typically the scheduler. Therefore, the scheduler is usually invoked at least 100 times a second. The scheduler's job is to keep track of the CPU use of the currently running process. Additionally, once every second, the dispatcher directly executes the swapper. <p> The scheduler's job is to keep track of the CPU use of the currently running process. Additionally, once every second, the dispatcher directly executes the swapper. The swapper's job is to recalculate the priorities of all currently executing processes. The swapper also swaps processes in and out of memory <ref> [5] </ref>. 2.3 Message Passing Library Several communications packages are available on the IBM SP2, including the Message Passing Library (MPL), PVM, and MPI. MPL is the most tuned of these, and was the communication package used for this study.
Reference: [6] <author> C. B. Stunkel et al., </author> <title> "The SP2 Communication Subsystem", </title> <address> http://ibm.tc.cornell.edu/ibm/pps/doc/. </address>
Reference-contexts: In an SP2, the POWER2 processors are connected by a High-Performance Switch (HPS). The HPS is a bidirectional multistage interconnection network capable of 40 MB/s data transfers unidirectionally and 80 MB/s bidirectionally <ref> [6] </ref>. 2.2 Operating System Our SP2 configuration uses the AIX 3.2.5 operating system, run separately on each node within the SP2. This is the same operating system found in the RS/6000, and, as will be shown, it has not been tuned for this configuration.
Reference: [7] <author> T. Tabe, J. Hardwick, and Q.F. Stout, </author> <title> "Performance Analysis of Communication on the IBM SP2", </title> <note> in preparation. </note>
Reference-contexts: A far more extensive examination of SP2 communication will appear in <ref> [7] </ref>. All-to-All communication, also known as Complete Exchange or All-to-All Personalized Communication, is defined as the communication that occurs when each processor in a group of processors wants to send a distinct message to each of the other processors in the group. <p> Several papers have been written concerning All-to-All communication, and a variety of implementations have been developed for different machines [2, 3, 4]. However, various limitations of the SP2 hardware prohibit many of these implementations (see <ref> [7] </ref>). For instance, because the bandwidth out of a processor is equal to the bandwidth of one message, one cannot write an All-to-All communication routine where a single processor must at some point communicate simultaneously with all the other processors in the group. <p> Finally, the very large times (greater than 200 microseconds) are probably page faults of the operating system. If one simulates one-to-one communication by resampling from the uninterrupted communication times along with the interrupts, one can reproduce the empirical distribution of one-to-one communication. This simulation is discussed in <ref> [7] </ref>. on an SP2 Node 5 All-to-All Simulator To understand why variations in point-to-point communications cause performance degradation, consider the pairwise exchanges in Table 1.
Reference: [8] <author> B. A. Wagar, </author> <title> "Practical Sorting Algorithms for Hypercube Computers", </title> <type> PhD Thesis, </type> <institution> University of Michigan, </institution> <year> 1990. </year>
Reference-contexts: The mean is 173 microseconds, and the standard deviation is 58 microseconds. For parallel communication, this represents a very high coefficient of variation of 0.34. On the nCUBE1, for example, the mean for the same routine was 4.5 milliseconds and the standard deviation was less than 0.05 milliseconds <ref> [8] </ref>, giving a coefficient of variation of 0.01. Moreover, on the SP2 the distribution of times is highly skewed to the right. The large variation in times observed is caused by the fact that the communication routines can be delayed by operating system interrupts since they are not kernel routines.
Reference: [9] <author> Zhiwei Xu, </author> <title> "Is SP2 the best supercomputer?", posting to USENET group comp.parallel, </title> <institution> University of Southern California, </institution> <month> April 16, </month> <year> 1995. </year>
References-found: 9

