URL: http://www.cs.mu.oz.au/tr_db/mu_94_04.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Email: E-mail: hong@cs.mu.OZ.AU rao@cs.mu.OZ.AU  
Title: Algebraic Equivalences Among Nested Relational Expressions  
Author: Hong-Cheu Liu Kotagiri Ramamohanarao 
Date: March, 1994  
Address: Melbourne, Parkville 3052, Australia  
Affiliation: Department of Computer Science The University of  
Pubnum: Technical Report 94/4  
Abstract: Algebraic optimization are both theoretically and practically important for query processing in (nested) relational databases. In this paper, we consider this issue and investigate some algebraic properties concerning to the nested relational operators. We also outline a heuristic optimization algorithm for nested relational expressions by adopting algebraic transformation rules developed in this paper and previous related work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Beeri. </author> <title> New Data Models and Languages the Challenge. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 1-15, </pages> <year> 1992. </year>
Reference-contexts: In this paper, we have investigated some algebraic properties of nested relational operators, which are useful for query optimization in the nested relational model. The object-oriented database shows great promise in serving as a model for next generation database systems <ref> [1, 7] </ref>. Many instances of the object-oriented queries are structurally similar to nested relational queries [5, 6]. Most essential techniques for (NF 2 ) relational query processing are directly applicable to object-oriented query processing [5].
Reference: [2] <author> L.S. Colby. </author> <title> A Recursive Algebra and Query Optimization for Nested Relations. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 273-283, </pages> <year> 1989. </year> <month> 14 </month>
Reference: [3] <author> Y. </author> <month> Jan. </month> <title> Algebraic Optimization for Nested Relations. </title> <booktitle> In Proceedings of the 23rd Hawaii International Conference on System Sciences, Vol.2, </booktitle> <pages> pages 278-287, </pages> <year> 1990. </year>
Reference-contexts: , p , and 1 p [9], rearrange the leaf nodes of the tree. * Using rules concerning cascading of PROJECT and commuting of PROJECT with other operations, move projection as far down the tree as possible. * Apply the knowledge of functional dependency, multivalued dependency and mutual data dependency <ref> [3, 8] </ref> to move the restructuring operations UNNEST, NEST down the binary operations, but should be above the unary operations (, ). * Identify subtrees that represent group of operations that can be executed by a single access routine.
Reference: [4] <author> H.F. Korth. </author> <title> Optimization of Object-Retrieval Queries. </title> <booktitle> In Proceedings of the 2nd International Workshop on Object-Oriented Database Systems, </booktitle> <pages> pages 352-357, </pages> <year> 1988. </year>
Reference-contexts: The nested relational model provides the structural core of objected-oriented database, and plays the role of an intermediate stage in an evolutionary path from the relational model to the object-oriented data model and query language [15]. As noted in <ref> [4] </ref>, in terms of object-oriented data model, we can view nested relation as class and tuple of the relation as an instance of the class. <p> By transforming object queries into an object algebra in the spirit of (nested) relational algebra, the power of optimization techniques can be applied to query processing in object-oriented system <ref> [4, 15] </ref>. However, query optimization and processing for the nested relational model still lacks satisfactory work done in the database community. Algebraic optimization techniques for relational database language, though well-understood and quite successful, cannot be fully applied to the nested relational model.
Reference: [5] <author> W. Kim. </author> <title> Introduction to Object-Oriented Databases. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The object-oriented database shows great promise in serving as a model for next generation database systems [1, 7]. Many instances of the object-oriented queries are structurally similar to nested relational queries <ref> [5, 6] </ref>. Most essential techniques for (NF 2 ) relational query processing are directly applicable to object-oriented query processing [5]. The semantics of explicit join of classes in object-oriented data model is similar to that of P-join in NF 2 data model. <p> Many instances of the object-oriented queries are structurally similar to nested relational queries [5, 6]. Most essential techniques for (NF 2 ) relational query processing are directly applicable to object-oriented query processing <ref> [5] </ref>. The semantics of explicit join of classes in object-oriented data model is similar to that of P-join in NF 2 data model. Therefore, we hope that the theoretical results obtained for optimization of nested relational algebra can be carried over to an object algebra.
Reference: [6] <author> M. Kifer, W. Kim, and Y. Sagiv. </author> <title> Querying Object-Oriented Databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 393-402, </pages> <year> 1992. </year>
Reference-contexts: The object-oriented database shows great promise in serving as a model for next generation database systems [1, 7]. Many instances of the object-oriented queries are structurally similar to nested relational queries <ref> [5, 6] </ref>. Most essential techniques for (NF 2 ) relational query processing are directly applicable to object-oriented query processing [5]. The semantics of explicit join of classes in object-oriented data model is similar to that of P-join in NF 2 data model.
Reference: [7] <author> W. Kim. </author> <title> Object-Oriented Database System: Promises, Reality, and Future. </title> <booktitle> In Proceedings of the 19th Very Large Data Bases Conference, </booktitle> <pages> pages 676-687, </pages> <year> 1993. </year>
Reference-contexts: In this paper, we have investigated some algebraic properties of nested relational operators, which are useful for query optimization in the nested relational model. The object-oriented database shows great promise in serving as a model for next generation database systems <ref> [1, 7] </ref>. Many instances of the object-oriented queries are structurally similar to nested relational queries [5, 6]. Most essential techniques for (NF 2 ) relational query processing are directly applicable to object-oriented query processing [5].
Reference: [8] <author> H.-C. Liu and K. Ramamohanarao. </author> <title> Equivalences of Nested Relational Operators. </title> <booktitle> In Proceedings of the Third Australian Database Conference, </booktitle> <pages> pages 124-138, </pages> <year> 1992. </year>
Reference-contexts: , p , and 1 p [9], rearrange the leaf nodes of the tree. * Using rules concerning cascading of PROJECT and commuting of PROJECT with other operations, move projection as far down the tree as possible. * Apply the knowledge of functional dependency, multivalued dependency and mutual data dependency <ref> [3, 8] </ref> to move the restructuring operations UNNEST, NEST down the binary operations, but should be above the unary operations (, ). * Identify subtrees that represent group of operations that can be executed by a single access routine.
Reference: [9] <author> H.-C. Liu and K. Ramamohanarao. </author> <title> Path-dependent Nested Relational Algebra. </title> <type> Technical Report 93/13, </type> <institution> Department of Computer Science, The University of Melbourne, Australia, </institution> <year> 1993. </year>
Reference-contexts: conditions into a cascade of SELECT operations. * Using rules of propositions 13 and 14, theorem 10, move each SELECT operation as far down the query tree as possible. * Using rules concerning associativity of binary operations 1 , [ p , " p , p , and 1 p <ref> [9] </ref>, rearrange the leaf nodes of the tree. * Using rules concerning cascading of PROJECT and commuting of PROJECT with other operations, move projection as far down the tree as possible. * Apply the knowledge of functional dependency, multivalued dependency and mutual data dependency [3, 8] to move the restructuring operations <p> ( W arranty:wperiod3 (P roduct (Distributor) 1 p P art (Source))) The algebraic transformation of this query is as follows. 1 Note that standard relational operators and extended relational operators ([ e , " e , e , 1 e ) [13] are special cases of path-dependent nested relational operators <ref> [9] </ref>. 13 prodname;pname;Distributor+Source (company;fee;cost) ( W arranty:wperiod3 (P roduct (Distributor) 1 p P art (Source))) = prodname;pname;Distributor+Source (company;fee;cost) (( W arranty:wperiod3 P roduct)(Distributor) 1 p P art (Source)) = prodname;pname;Distributor+Source (company;fee;cost) ([ prodname;Composition (P arts (pname)) ( W arranty:wperiod3 P roduct)](Distributor) 1 p [ pname;Source (company;cost) P art](Source)) The resulting equivalent
Reference: [10] <author> H.-C. Liu and K. Ramamohanarao. </author> <title> Path-dependent Join for Nested Relations. </title> <booktitle> To appear in Proceedings of Fifth International Hong Kong Computer Society Database Workshop, </booktitle> <month> February, </month> <year> 1994. </year>
Reference-contexts: In this paper, we consider the problem of this issue and derive a series of algebraic equivalences. The join operation is one of the most expensive and critical issues in nested relational query processing. In the paper, we will review the P-join operator which has been proposed in <ref> [10, 11] </ref>. The P-join operator is very powerful and allows queries to be expressed more succinct and more easily optimized. We will then investigate some algebraic properties concerning to the P-join operator and extended relational operators [13], which can be used for query optimization in nested relational databases. <p> It is more general than other join operators proposed in the 5 context of nested relational model. We briefly review some auxiliary concepts and describe the P-join operator which has been presented in <ref> [10, 11] </ref>. 3.1 Extended Cartesian Product and Path-dependent Cartesian Product The idea behind the extended Cartesian product fi e is that we form the Cartesian product by combining two relational operands with common higher-order attributes not only at the top level but also at the subscheme levels. <p> 20 3 2 C Z 20 2 2 40 2 2 p A X D E F G 1 1 3 3 2 2 3 3 2 2 2 2 3 2 3 3 3.2 P-join Operator with Single Join-path The P-join operator with single join-path has been presented in <ref> [10] </ref>. In this section, we review the basic definitions and concepts regarding this new join operator. Definition 3.4 We use r (N k ) to denote r (P r ) if the join-path P r = (N 1 N k ). <p> Due to the fact that extended natural join (1 e ) is applied to each level of the schema of P-join, the laws of commutativity and associativity can be similarly valid for P-join. The detailed description of these results can be found in <ref> [10, 11] </ref>. The following four theorems and necessary related lemmas concern commuting a projection ( or e ) with join operators (1 e or 1 p ). These equivalences are direct extensions of those of the relational model. <p> The higher-order calculus may be an alternative approach. The algebraic expression of queries is more succinct and more easily optimized when they are expressed using P-join, than they are when using other extended join operators. The complexity of algorithm developed by methods indicated in <ref> [10] </ref> will not be worsen than other join algorithms with expensive restructuring operators involved, which are recently proposed for nested relational database systems. However, the design of efficient algorithms for P-join operation and detailed performance analysis are needed in further research work.
Reference: [11] <author> H.-C. Liu and K. Ramamohanarao. </author> <title> Multiple Paths Join for Nested Relational Databases. </title> <booktitle> In Proceedings of the Fifth Australasian Database Conference, </booktitle> <pages> pages 30-44, </pages> <year> 1994. </year>
Reference-contexts: In this paper, we consider the problem of this issue and derive a series of algebraic equivalences. The join operation is one of the most expensive and critical issues in nested relational query processing. In the paper, we will review the P-join operator which has been proposed in <ref> [10, 11] </ref>. The P-join operator is very powerful and allows queries to be expressed more succinct and more easily optimized. We will then investigate some algebraic properties concerning to the P-join operator and extended relational operators [13], which can be used for query optimization in nested relational databases. <p> It is more general than other join operators proposed in the 5 context of nested relational model. We briefly review some auxiliary concepts and describe the P-join operator which has been presented in <ref> [10, 11] </ref>. 3.1 Extended Cartesian Product and Path-dependent Cartesian Product The idea behind the extended Cartesian product fi e is that we form the Cartesian product by combining two relational operands with common higher-order attributes not only at the top level but also at the subscheme levels. <p> Due to the fact that extended natural join (1 e ) is applied to each level of the schema of P-join, the laws of commutativity and associativity can be similarly valid for P-join. The detailed description of these results can be found in <ref> [10, 11] </ref>. The following four theorems and necessary related lemmas concern commuting a projection ( or e ) with join operators (1 e or 1 p ). These equivalences are direct extensions of those of the relational model.
Reference: [12] <author> Z.M. Ozsoyoglu and L.-Y. Yuan. </author> <title> A New Normal Form for Nested Relations. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(1) </volume> <pages> 111-136, </pages> <year> 1987. </year>
Reference-contexts: A detailed formalism can be found in <ref> [12, 13, 16] </ref>. 2.1 Nested Relational Schemes We assume familiarity with 1NF relations and relational algebra on these relations.
Reference: [13] <author> M.A. Roth, H.F. Korth and A. Silberschatz. </author> <title> Extended Algebra and Calculus for :1NF Relational Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 13(4) </volume> <pages> 389-417, </pages> <year> 1988. </year>
Reference-contexts: The P-join operator is very powerful and allows queries to be expressed more succinct and more easily optimized. We will then investigate some algebraic properties concerning to the P-join operator and extended relational operators <ref> [13] </ref>, which can be used for query optimization in nested relational databases. Finally, we outline the steps of an algorithm that transform an initial query tree into an optimized tree that is more efficient to execute. <p> A detailed formalism can be found in <ref> [12, 13, 16] </ref>. 2.1 Nested Relational Schemes We assume familiarity with 1NF relations and relational algebra on these relations. <p> 3 1 15 2 (b) B=X:Z:D (s) C Z E F 1 1 5 1 2 2 15 2 3 2 A X D 2 2 2 2.4 Extended Natural Join and Extended Projection Operators We state the formal definition of extended intersection, extended natural join and extended projection from <ref> [13] </ref>. Definition 2.6 Let r 1 and r 2 be two nested relations with the same schemes R. Let X range over the zero-order names in E R and Y range over the higher-order names in E R . <p> We could express this query as: prodname;pname;Distributor+Source (company;fee;cost) ( W arranty:wperiod3 (P roduct (Distributor) 1 p P art (Source))) The algebraic transformation of this query is as follows. 1 Note that standard relational operators and extended relational operators ([ e , " e , e , 1 e ) <ref> [13] </ref> are special cases of path-dependent nested relational operators [9]. 13 prodname;pname;Distributor+Source (company;fee;cost) ( W arranty:wperiod3 (P roduct (Distributor) 1 p P art (Source))) = prodname;pname;Distributor+Source (company;fee;cost) (( W arranty:wperiod3 P roduct)(Distributor) 1 p P art (Source)) = prodname;pname;Distributor+Source (company;fee;cost) ([ prodname;Composition (P arts (pname)) ( W arranty:wperiod3 P roduct)](Distributor) 1
Reference: [14] <author> M.H. Scholl. </author> <title> Theoretical Foundation of Algebraic Optimization Utilizing Unnormalized Relations. </title> <booktitle> In Proceedings of the International Conference on Database Theory, </booktitle> <pages> pages 380-396, </pages> <year> 1986. </year>
Reference: [15] <author> M.H. Scholl and H.J. Schek. </author> <title> The Relational Object Model. </title> <booktitle> In Proceedings of International Conference on Database Theory, </booktitle> <pages> pages 89-105, </pages> <year> 1990. </year>
Reference-contexts: The nested relational model provides the structural core of objected-oriented database, and plays the role of an intermediate stage in an evolutionary path from the relational model to the object-oriented data model and query language <ref> [15] </ref>. As noted in [4], in terms of object-oriented data model, we can view nested relation as class and tuple of the relation as an instance of the class. <p> By transforming object queries into an object algebra in the spirit of (nested) relational algebra, the power of optimization techniques can be applied to query processing in object-oriented system <ref> [4, 15] </ref>. However, query optimization and processing for the nested relational model still lacks satisfactory work done in the database community. Algebraic optimization techniques for relational database language, though well-understood and quite successful, cannot be fully applied to the nested relational model.
Reference: [16] <author> S.J. Thomas and P.C. Fischer. </author> <title> Nested Relational Structures. In P.C. </title> <editor> Kanellakis, editor, </editor> <booktitle> Advances in Computing Research 3, </booktitle> <publisher> JAI press, </publisher> <pages> pages 269-307, </pages> <year> 1986. </year>
Reference-contexts: A detailed formalism can be found in <ref> [12, 13, 16] </ref>. 2.1 Nested Relational Schemes We assume familiarity with 1NF relations and relational algebra on these relations. <p> Unnest (), the inverse of the nest operator, takes a relation structure nested on some set of attributes and ungroups it by one level <ref> [16] </ref>. 2.2 Nested Scheme Tree A nested relation scheme is structured as a rooted tree in which the nodes are labeled with elements of U . Such a tree is called a scheme tree. The set of nodes of scheme tree T is denoted by node (T ). <p> Lemma 11 L X (r) = X L 0 (r) if X L 0 0 Proof: See <ref> [16] </ref>.
References-found: 16

