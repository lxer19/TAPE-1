URL: ftp://ftp.eecs.umich.edu/groups/gasm/iasm.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Title: Formal Semantics for Interacting Abstract State Machines  
Author: Departamento de Ci^encia da Computac~ao by Marcelo de Almeida Maia Roberto da Silva Bigonha Caixa Postal, . Belo Horizonte MG 
Date: September, 1998  
Address: 005/98  
Affiliation: Universidade Federal de Minas Gerais Instituto de Ci^encias Exatas  RT  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. A. Bartlett, R. A. Scantlebury, and P. T. Wilkinson. </author> <title> A Note on Reliable Full-Duplex transmission over Half-Duplex Links. </title> <journal> Communications of the ACM, </journal> <volume> 12(5) </volume> <pages> 260-261, </pages> <month> May </month> <year> 1969. </year>
Reference-contexts: Ex: fx - 1 | x in 0,1,2 with x &gt; 0g Ex: f v -&gt; ord (v) - ord ("x") | v in f "x", "y", "z" g g * List terms. Ex: <ref> [1, 2, 3] </ref> or [1 :: 2 :: 3 :: nil] * Set enumeration terms. * Map enumeration terms. <p> Thus the function l correctly counts the number of performed cycles. Chapter 5 An Example The Alternating Bit Protocol In this section we show a more elaborated example: the specification of the Alternating Bit Protocol <ref> [1] </ref>. The problem consists of transmitting messages through an unreliable channel. The channel delivers messages in the same order they were sent, but can occasionally loose some of them. The specification is composed of three main unit definitions: Sender, Receiver and Channel.
Reference: [2] <author> G. Berry and G. Boudol. </author> <title> The Chemical Abstract Machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 96(1) </volume> <pages> 217-248, </pages> <year> 1992. </year>
Reference-contexts: Glavan and 3 4 CHAPTER 1. INTRODUCTION Rosenzweig developed a theory of concurrency [5] that enables the encoding of some traditional calculus as the calculus [10] and the Chemical Abstract Machine <ref> [2] </ref>. However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work. <p> Ex: fx - 1 | x in 0,1,2 with x &gt; 0g Ex: f v -&gt; ord (v) - ord ("x") | v in f "x", "y", "z" g g * List terms. Ex: <ref> [1, 2, 3] </ref> or [1 :: 2 :: 3 :: nil] * Set enumeration terms. * Map enumeration terms.
Reference: [3] <author> L. Cardelli. </author> <title> Abstractions for mobile computation. </title> <note> Position Paper, http://www. luca.demon.co.uk/Papers.html, </note> <month> May </month> <year> 1998. </year>
Reference-contexts: Ex: fx - 1 | x in 0,1,2 with x &gt; 0g Ex: f v -&gt; ord (v) - ord ("x") | v in f "x", "y", "z" g g * List terms. Ex: <ref> [1, 2, 3] </ref> or [1 :: 2 :: 3 :: nil] * Set enumeration terms. * Map enumeration terms. <p> This will be useful in comparing this approach with others and in illustrating its reasoning capability. The following paragraph reproduces verbatim a simplified and eventually modified version of the problem consisting in managing a virtual program committee meeting for a conference. The problem was presented as a challenge in <ref> [3] </ref>. A conference is announced, and an electronic submission form is publicized. Each author fetches the form and activate it. Each author fills an instance of the form with the required data and attaches a paper.
Reference: [4] <author> G. D. Castillo, Y. Gurevich, and K. Stroetmann. </author> <title> Typed Abstract State Machines. </title> <note> Submitted to the Journal of Universal Computer Science, </note> <year> 1998. </year>
Reference-contexts: In order to make the specifications more readable we will define a concrete syntax which extend the standard notation of ASMs with the notion of types, functions, and pattern-matching as introduced in <ref> [4] </ref>. We call this specification language ASM-MG 1 . Now we will give an example written is ASM-MG while we show the language constructions. We will specify a very simple programming language which has only output and assignment statements.
Reference: [5] <author> P. Glavan and D. Rosenzweig. </author> <title> Communicating Evolving Algebras. </title> <editor> In E. Borger, H. Kleine Buning, G. Jager, S. Martini, and M. M. Richter, editors, </editor> <booktitle> Computer Science Logic, volume 702 of Lecture Notes in Computer Science, </booktitle> <pages> pages 182-215. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: In the context of ASMs, there is already some work in the direction of providing them with some kind of horizontal abstraction. Glavan and 3 4 CHAPTER 1. INTRODUCTION Rosenzweig developed a theory of concurrency <ref> [5] </ref> that enables the encoding of some traditional calculus as the calculus [10] and the Chemical Abstract Machine [2]. However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work.
Reference: [6] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 9-36. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: The most powerful resource to achieve these goals is modularity, which is based upon abstraction and information hiding and it is the only effective way to break down the complexity of large systems. Even though Abstract State Machines <ref> [6] </ref> support abstraction and information hiding, we advocate more powerful abstraction mechanisms. <p> This idea can be thought as a better development of the concept of external functions <ref> [6] </ref>, because the approach provides some environment behavior formalization. It is not necessary to know how the environment behaves internally, but it is necessary to know how it interacts with the system being specified. <p> So, when we specify a system, we must have in hands a minimal formalization of the observed environment behavior that affects the system, what is a little diferent from the raw concept of external functions. Chapter 2 Abstract State Machines Abstract state machines (ASMs) <ref> [6] </ref> are transition systems which states are first-order interpretations of functions symbols defined by a signature over a non-empty set U called the super-universe. These states are also called static algebras. <p> THE INTERACTIVE ASM LANGUAGE Chapter 4 Semantics In this section we specify the IASM language formal semantics. We provide it in a translational style that maps a syntactic domain corresponding to the IASM constructions into the original ASM language defined by Gurevich <ref> [6] </ref>. 4.1 Unit Definition Unit definitions are translated by the D compilation scheme, defined as in module, the rules corresponding to each construction of each unit definition. The target specification of the module will be generated from the unit definition U .
Reference: [7] <author> J. Huggins and R. Mani. </author> <title> The evolving algebra interpreter version 2.0. Manual of the interpreter (http://www.eecs.umich.edu/gasm). </title>
Reference-contexts: false; if waiting (LoosingInQueue) then queue := tail (queue); waiting (LoosingInQueue) := false; if msg = undef and queue &lt;&gt; nil then msg = first (head (queue)); bit = second (head (queue)); queue := tail (queue); endif; end unit This protocol has been previously formalized using the ASM method in <ref> [7] </ref>. In that work, the behaviour of the communication channel was not clearly defined. It was necessary to write identical code for both the communication sender-receiver and receiver-sender.
Reference: [8] <author> W. </author> <month> May. </month> <title> Specifying Complex and Structured Systems with Evolving Algebras. </title> <booktitle> In TAPSOFT'97: Theory and Practice of Software Development, 7th International Joint Conference CAAP/FASE, number 1214 in LNCS, </booktitle> <pages> pages 535-549. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work. May <ref> [8] </ref> has developed a work with the same aims as ours, and although it provides some form of encapsulation and information hiding, the usual modularization concepts must be further added to the model. The explicit message passing encoding is not considered too.
Reference: [9] <author> B. Meyer. </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1997. </year>
Reference-contexts: An argument to support this view can be found in <ref> [9] </ref>, where are defined some desired characteristics for good modularization mechanisms such as modular composability, modular decomposability, modular understandability, modular continuity and modular protection. Considering these characteristics, a central theme that affects directly each one of them is the specification of how software modules interact with each other.
Reference: [10] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <year> 1992. </year> <note> 45 46 BIBLIOGRAPHY </note>
Reference-contexts: In the context of ASMs, there is already some work in the direction of providing them with some kind of horizontal abstraction. Glavan and 3 4 CHAPTER 1. INTRODUCTION Rosenzweig developed a theory of concurrency [5] that enables the encoding of some traditional calculus as the calculus <ref> [10] </ref> and the Chemical Abstract Machine [2]. However, we can not see an explicit message passing mechanism and it does not support encapsulation and information hiding mechanisms, issues which will be directly treated in this work.
References-found: 10

