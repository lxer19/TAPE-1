URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/ftp/hla-fse98.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/www/paper_abstracts/hla-fse98.html
Root-URL: 
Title: Formal Modeling and Analysis of Component Integration Frameworks  
Author: Robert J. Allen David Garlan James Ivers 
Keyword: Component integration frameworks, protocol families, software architecture, formal specification.  
Address: AQPV 862F 1000 River Road Essex Junction, VT 05452 USA  Pittsburgh, PA 15213 USA  Pittsburgh, PA 15213 USA  
Affiliation: IBM, Dept.  School of Computer Science Carnegie Mellon University  School of Computer Science Carnegie Mellon University  
Abstract: Component integration frameworks, such as CORBA, COM/OLE, and JavaBeans are becoming increasingly important in the engineering of complex systems. A problem with these frameworks is that it is often diffi cult to understand exactly what they require and pro vide, and to analyze them in order to understand their deeper properties. In this paper we use our experience in modeling the High Level Architecture for Distributed Simulation to show how one can capture the structured protocol inherent in an integration framework as a for mal architectural model that can be analyzed to detect anomalies, race conditions, and deadlocks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Abowd, R. Allen, and D. Garlan. </author> <title> Formalizing style to understand descriptions of software archi tecture. </title> <journal> ACM TOSEM, </journal> <month> Oct </month> <year> 1995. </year>
Reference-contexts: In other work carried out by this paper's authors, we have considered how Z and Wright can be used to define styles <ref> [1, 2] </ref>. The work described in this paper differs from previous work in this area in that it represents a much larger-scale application of architec tural modeling than has been reported in the literature, and introduces new techniques to carry it out.
Reference: [2] <author> R. Allen. </author> <title> Formalism and informalism in architec tural style: A case study. </title> <booktitle> In Proc 1st Intl Workshop on Architectures for SW Systems, </booktitle> <month> Apr </month> <year> 1995. </year>
Reference-contexts: In other work carried out by this paper's authors, we have considered how Z and Wright can be used to define styles <ref> [1, 2] </ref>. The work described in this paper differs from previous work in this area in that it represents a much larger-scale application of architec tural modeling than has been reported in the literature, and introduces new techniques to carry it out.
Reference: [3] <author> R. Allen. </author> <title> A Formal Approach to Software Architec ture. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon, SCS, </institution> <month> Jan </month> <year> 1997. </year> <note> CMU/SCS Report CMU-CS-97-144. </note>
Reference-contexts: For this paper, however, we will restrict our presentation to just those parts of Wright that concern the specification of the HLA. For further details, the reader is referred to <ref> [3] </ref>. <p> See <ref> [3] </ref> for technical details. 4 The full Wright specification is about 15 pages long [5]. For the purposes of this paper we present only certain parts of the model to highlight its key features.
Reference: [4] <author> R. Allen and D. Garlan. </author> <title> A formal basis for archi tectural connection. </title> <journal> ACM TOSEM, </journal> <month> Jul </month> <year> 1997. </year>
Reference-contexts: In the next two sections we present the model and dis cuss how it addresses these issues. Specifically, we use the Wright architectural description language (ADL) as the modeling language <ref> [4] </ref> to define the HLA. <p> Unlike some ADLs, however, Wright permits the ex plicit definition of new connector types, and provides formal, automatable criteria for checking the consis tency of those types <ref> [4] </ref>. 2 2 Wright also supports the ability to define architectural styles, check for consistency and completeness of architectural config urations, and check for consistent specifications of components. For this paper, however, we will restrict our presentation to just those parts of Wright that concern the specification of the HLA.
Reference: [5] <author> R. J. Allen, D. Garlan, and J. Ivers. </author> <title> A Wright specification of the HLA. </title> <type> Technical report, CMU SCS, </type> <year> 1998. </year>
Reference-contexts: See [3] for technical details. 4 The full Wright specification is about 15 pages long <ref> [5] </ref>. For the purposes of this paper we present only certain parts of the model to highlight its key features. The RTI is parameterized by the number of federates (nfeds) in a joint simulation; there can be an arbitrary number of them.
Reference: [6] <author> E. Clarke et al. </author> <title> Automatic verification of finite state concurrent systems using temporal logic spec ifications. </title> <journal> TOPLAS, </journal> <month> Apr </month> <year> 1986. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata [13], SMV <ref> [6] </ref>, SDL [11], and Petri Nets [16]. While our research shares many of the same goals, there are notable differences. First, most proto col analysis assumes you are starting with a complete description of the protocol.
Reference: [7] <author> DMSO. </author> <title> Web site, </title> <address> URL = http://www.dmso.mil/docslib/hla/. </address>
Reference-contexts: This leads to technical issues not typically dealt with in the protocol literature, such as ways to structure such a broad interface. 3 The "High Level Architecture" for Distribu ted Simulation The "High Level Architecture" (HLA) is a component integration framework for distributed simulation <ref> [7] </ref>. It was developed by the Defense Modeling and Simula tion Office (DMSO) to support interoperability between simulations purchased from different vendors. 1 Infor mally, the HLA prescribes a kind of "simulation bus" into which simulations can be "plugged" to produce a joint (distributed) simulation. <p> parameters, a possible return value, pre- and post conditions, and a list of the exceptions that may occur as a result of executing the service. (Figure 1 summa rizes the HLA terms used in this paper.) An example of a typical RTI service is shown in Figure 2 (taken from <ref> [7] </ref>). This service is initiated by a federate (an individual simulation) when it wants to pause the federation (entire distributed simulation). The effects of calling the service are to cause the RTI to coordinate a distributed handshaking algorithm in which it asks each of the simulations to pause.
Reference: [8] <editor> Failures Divergence Refinement: </editor> <booktitle> FDR2 User Man ual. Formal Systems (Europe) Ltd., </booktitle> <address> Oxford, </address> <institution> Eng land, </institution> <note> version 2.22 edition, </note> <month> Oct </month> <year> 1997. </year>
Reference-contexts: We discovered about a dozen such anomalies using a combination of careful review and the facilities of a commercial model checker for CSP, called FDR <ref> [8] </ref>. To make use of the model checker we used two primary techniques. The first was to look for po tential deadlocks in parts of the specification. 5 When the tool detects "deadlock" it provides a trace showing where the process goes awry.
Reference: [9] <author> D. Garlan, R. Allen, and J. Ockerbloom. </author> <title> Archi tectural mismatch: Why reuse is so hard. </title> <journal> IEEE Software, </journal> <month> Nov </month> <year> 1995. </year>
Reference-contexts: Component integration frameworks greatly simplify the construction of complex systems from existing parts. Since components share assumptions about the nature of interaction with their environment many of the gen eral problems of component mismatch do not arise <ref> [9] </ref>. fl Submitted for publication, April 1998. Thus it is easier for implementors to combine parts writ ten by multiple vendors and to add new parts to existing systems.
Reference: [10] <author> C. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: As we will see in the case of the HLA, this separation allows us to distinguish between the interface that each simulation must conform to, and the behavior of the run-time infrastructure. Wright uses a variant of CSP <ref> [10] </ref> to define role and glue behavior. Each such specification defines a pattern of events (called a process) using operators for sequencing ("!" and ";"), choice ("u" and " "), and parallel composition ("k").
Reference: [11] <author> G. J. Holzmann. </author> <title> Design and Validation of Com puter Protocols. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata [13], SMV [6], SDL <ref> [11] </ref>, and Petri Nets [16]. While our research shares many of the same goals, there are notable differences. First, most proto col analysis assumes you are starting with a complete description of the protocol.
Reference: [12] <author> D. C. Luckham, L. M. Augustin, J. J. Kenney, J. Veera, D. Bryan, and W. Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Tras SW Eng, </journal> <month> Apr </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of ar chitectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to real istic case studies. <p> This paper contributes to this body of case studies, but pushes on a different dimension namely, the application of architectural modeling to component integration frameworks. Among existing ADLs the one used here, Wright, is most closely related to Rapide <ref> [12] </ref>, as both use event patterns to describe abstract behavior of architectures. Wright differs from Rapide insofar as it supports defini tion of connectors as explicit semantic entities and per mits static analysis using model checking tools.
Reference: [13] <author> N. A. Lynch and M. R. Tuttle. </author> <title> An introduc tion to input/output automata. </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT LCS, </institution> <year> 1988. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata <ref> [13] </ref>, SMV [6], SDL [11], and Petri Nets [16]. While our research shares many of the same goals, there are notable differences. First, most proto col analysis assumes you are starting with a complete description of the protocol.
Reference: [14] <author> J. Magee, N. Dulay, S. Eisenbach, and J. Kramer. </author> <title> Specifying distributed software architectures. </title> <booktitle> In Proc. </booktitle> <address> ESEC'95, </address> <month> Sep </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of ar chitectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to real istic case studies.
Reference: [15] <author> M. Moriconi, X. Qian, and R. Riemenschneider. </author> <title> Correct architecture refinement. </title> <journal> IEEE Trans on SW Eng, </journal> <month> Apr </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of ar chitectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to real istic case studies. <p> In particular, Moriconi HLA High Level Architecture IFSpec HLA Interface Specification Federate an individual simulation Federation a set of coordinated simulations RTI Run-Time Infrastructure Service A routine in the IFSpec and colleagues describe techniques for refining between styles <ref> [15] </ref>. In other work carried out by this paper's authors, we have considered how Z and Wright can be used to define styles [1, 2].
Reference: [16] <author> J. Peterson. </author> <title> Petri nets. </title> <journal> ACM Computing Surveys, </journal> <month> September </month> <year> 1977. </year>
Reference-contexts: The third area is work on protocol specification and analysis. There has been considerable research on ways to specify protocols using a variety of formalisms, such as I/O Automata [13], SMV [6], SDL [11], and Petri Nets <ref> [16] </ref>. While our research shares many of the same goals, there are notable differences. First, most proto col analysis assumes you are starting with a complete description of the protocol. In contrast, in our work the protocol is typically implicit in the API of some inte gration framework documentation.
Reference: [17] <institution> RASSP project overview version 1.0. CSIS TR, Dept of EE, Univ Virginia, </institution> <year> 1994. </year>
Reference-contexts: More recent examples in clude object-oriented integration frameworks such as CORBA, COM/OLE/ActiveX, and JavaBeans. In ad dition, there are a growing number of domain-specific integration frameworks in areas as diverse as program ming environments, robotics control [20], and signal pro cessing <ref> [17] </ref>. Component integration frameworks greatly simplify the construction of complex systems from existing parts. Since components share assumptions about the nature of interaction with their environment many of the gen eral problems of component mismatch do not arise [9]. fl Submitted for publication, April 1998.
Reference: [18] <author> A. W. Roscoe. </author> <title> The Theory and Practice of Con currency. </title> <publisher> Prentice Hall, </publisher> <year> 1998. </year>
Reference-contexts: level the RTI is defined as follows: Connector RTI (nfeds : 1::) Role Fed 1::nfeds = FederateInterface Glue = RTIBehavior 3 Wright uses a non-standard interpretation of external choice in which one of the branches is guarded by p : the choice remains external, unlike, for example, the treatment in <ref> [18] </ref>. See [3] for technical details. 4 The full Wright specification is about 15 pages long [5]. For the purposes of this paper we present only certain parts of the model to highlight its key features.
Reference: [19] <author> M. Shaw, R. DeLine, D. V. Klein, T. L. Ross, D. M. Young, and G. Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Trans SW Eng, </journal> <month> Apr </month> <year> 1995. </year>
Reference-contexts: The first area is the growing field of ar chitectural description and analysis. Currently there are many architecture description languages (ADLs) and tools to support their use (such as <ref> [12, 19, 15, 14] </ref>). While ADLs are far from being in widespread use, there have been several examples of their application to real istic case studies.
Reference: [20] <author> D. B. Stewart, R. A. Volpe, and P. K. Khosla. </author> <title> Inte gration of real-time software modules for reconfig urable sensor-based control systems. </title> <booktitle> In Proc 1992 IEEE/RSJ Intl Conf on Intelligent Robots and Sys tems. </booktitle> <publisher> IEEE Comp Society Press, </publisher> <month> Jul </month> <year> 1992. </year>
Reference-contexts: More recent examples in clude object-oriented integration frameworks such as CORBA, COM/OLE/ActiveX, and JavaBeans. In ad dition, there are a growing number of domain-specific integration frameworks in areas as diverse as program ming environments, robotics control <ref> [20] </ref>, and signal pro cessing [17]. Component integration frameworks greatly simplify the construction of complex systems from existing parts. Since components share assumptions about the nature of interaction with their environment many of the gen eral problems of component mismatch do not arise [9]. fl Submitted for publication, April 1998.
Reference: [21] <author> K. Sullivan, J. Socha, and M. Marchukov. </author> <title> Using formal methods to reason about architectural stan dards. </title> <booktitle> In Proc of the 1997 Intl Conf on SW Engi neering, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: The second related area is research on the analysis of frameworks and standards. An example close in spirit to our work is that of Sullivan and colleagues, who used Z to model and analyze the Microsoft COM stan dard <ref> [21] </ref>. Also closely related is work on formal defi nitions of architectural styles.
References-found: 21

