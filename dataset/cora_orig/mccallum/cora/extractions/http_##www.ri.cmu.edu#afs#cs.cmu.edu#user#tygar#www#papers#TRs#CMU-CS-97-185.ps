URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/tygar/www/papers/TRs/CMU-CS-97-185.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/tygar/www/publications.html
Root-URL: 
Title: Security for Network Attached Storage Devices  
Author: Howard Gobioff Garth Gibson Doug Tygar 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: October 23, 1997  
Pubnum: CMU-CS-97-185  
Abstract: This paper presents a novel cryptographic capability system addressing the security and performance needs of network attached storage systems in which file management functions occur at a different location than the file storage device. In our NASD system file managers issue capabilities to client machines, which can then directly access files stored on the network attached storage device without intervention by a file server. These capabilities may be reused by the client, so that interaction with the file manager is kept to a minimum. Our system emphasizes performance and scalability while separating the roles of decision maker (issuing capabilities) and verifier (validating a capability). We have demonstrated our system with adaptations of both the NFS and AFS distributed file systems using a prototype NASD implementation. Sponsored by DARPA/ITO through ARPA Order D306, and issued by the Indian Head Division, NSWC under contract N00174-96-K-0002, Wright Laboratory, Aeronautical Systems Center, Air Force Material Command, USAF, and DARPA under grant F19628-96-C-0061, the US Postal Service, and Toshiba Corporation. The project team is indebted to the generous contributions from the member companies of the Parallel Data Consortium. At the time of this writing, these companies include Hewlett-Packard Laboratories, Symbios Logic Inc., Data General, IBM Corporation, Seagate Technology, Storage Technology Corporation, and Digital Equipment Corporation. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes, notwithstanding any copyright notation thereon. Views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of any of the supporting organizations or the U.S government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ross Anderson and Eli Biham. Tiger: </author> <title> A Fast New Hash Function. </title> <booktitle> In Proceedings of the Third Workshop on Fast Software Encryption, number 1039 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Various secure hash algo rithms such as MD5 [22], SHA [18], or Tiger <ref> [1] </ref> may be viable options for NASD. * M D K (Msg) is a keyed version of a message digest (also called a MAC or message authentication code). Constructions such as HMAC [2] may be good candidates to construct a keyed digest based on an unkeyed version.
Reference: [2] <author> Mihir Bellare, Ran Canetti, and Hugo Krawczyk. </author> <title> Keying Hash Functions for Message Authentication. </title> <booktitle> In Advances in Cryptology: Crypto '96 Proceedings. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Various secure hash algo rithms such as MD5 [22], SHA [18], or Tiger [1] may be viable options for NASD. * M D K (Msg) is a keyed version of a message digest (also called a MAC or message authentication code). Constructions such as HMAC <ref> [2] </ref> may be good candidates to construct a keyed digest based on an unkeyed version.
Reference: [3] <author> Jack B. Dennis and Earl C. Van Horn. </author> <title> Programming Semantics for Multiprogramed Computations. </title> <journal> Communications of the ACM, </journal> <volume> 9(3):143155, </volume> <month> March </month> <year> 1966. </year>
Reference-contexts: Subsequent requests were able to use the cached capability key. 11 Related Work Historically, capability systems have used hardware support to prevent client modification of capabilities <ref> [3, 27] </ref> or depended on trusted operating system kernels [24, 28]. NASD capabilities differ because we use a fully distributed system where we do not trust the holders of the capabilities.
Reference: [4] <author> Hans Eberle. </author> <title> A High-speed DES Implementation for Network Applications. </title> <type> Technical Report 90, </type> <institution> DEC System Research Center, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: However, in this case, the changes correspond to expected invalidations of access rights. 6.2 Use NASD drives may accept encrypted messages, messages with a MAC, or both. Encryption performance can be drastically reduced by using hardware support <ref> [4] </ref> and the MAC can also be implemented in hardware. The MACing or encryption of data is the basis for a generic signature function S k (Msg) which is used extensively in the NASD security system.
Reference: [5] <author> Garth Gibson. </author> <title> Secure distributed and parallel file systems based on network-attached autonomous disk drives White Paper, </title> <month> September </month> <year> 1995. </year>
Reference-contexts: These drives have minimal uncommitted computational power, so high-level file system functions (including access control) must still be handled by a separate server machine (which we call a file manager) that can understand local environment security needs <ref> [5, 10, 14, 11] </ref>. At Carnegie Mellon University, we are actively designing and building a system using disk drives directly connected to the network. The primary motivation for the NASD architecture is cost-effective, scalable performance.
Reference: [6] <author> Garth A. Gibson, David F. Nagle, Khalil Amiri, Fay W. Chang, Eugene M. Feinberg, Howard Gobioff, Chen Lee, Berend Ozceri, Erik Riedel, David Rochberg, and Jim Zelenka. </author> <title> File Server Scaling with Network-Attached Secure Disks. </title> <booktitle> In Proceedings of the ACM International Conference on Measurement and Modeling of Computer Systems 1997, </booktitle> <month> June </month> <year> 1997. </year> <note> To Appear. </note>
Reference-contexts: At Carnegie Mellon University, we are actively designing and building a system using disk drives directly connected to the network. The primary motivation for the NASD architecture is cost-effective, scalable performance. Directly attaching disks to the network can decrease the file server load <ref> [6] </ref> and increase the aggregate bandwidth available beyond what is available from a single storage server [7, 10]. File management is different in NASD systems than in classical distributed file systems such as Andrew File System [12], Sun's Network File System [23], or Novell Netware.
Reference: [7] <author> Garth A. Gibson, David F. Nagle, Khalil Amiri, Fay W. Chang, Howard Gobioff, Erik Riedel, David Rochberg, and Jim Zelenka. </author> <title> Filesystems for Network-Attached Secure Disks. </title> <type> Technical Report CMU-CS-97-118, </type> <institution> Carnegie Mellon University, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: The primary motivation for the NASD architecture is cost-effective, scalable performance. Directly attaching disks to the network can decrease the file server load [6] and increase the aggregate bandwidth available beyond what is available from a single storage server <ref> [7, 10] </ref>. File management is different in NASD systems than in classical distributed file systems such as Andrew File System [12], Sun's Network File System [23], or Novell Netware.
Reference: [8] <author> Li Gong. </author> <title> A Secure Identity-Based Capability System. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 5664, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Instead NASD generates and verifies capabilities using a known protocol and secret keys shared between the issuer and validator of capabilities. Both ICAP <ref> [8] </ref> and Amoeba [25] utilize one way functions in capability construction. However, neither ICAP nor Amoeba explicitly separate the issuer of a capability from the validator of a capability. The proxy model [17] is a more powerful abstraction than capabilities.
Reference: [9] <institution> National Storage Industry Consortium NASD Working Group. </institution> <note> http://www.hpl.hp.com/SSP/NASD/. </note>
Reference-contexts: 1 Motivation 1.1 A new direction for storage The rapidly developing technology of peripheral storage devices has opened new opportunities for security technology <ref> [9, 19] </ref>. It is now possible to build a cost-effective disk drive that can directly communicate with the network without a server machine acting as an intermediary.
Reference: [10] <author> John H. Hartman and John K. Ousterhout. </author> <title> The Zebra Striped Network File System. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 2943, </pages> <year> 1993. </year>
Reference-contexts: These drives have minimal uncommitted computational power, so high-level file system functions (including access control) must still be handled by a separate server machine (which we call a file manager) that can understand local environment security needs <ref> [5, 10, 14, 11] </ref>. At Carnegie Mellon University, we are actively designing and building a system using disk drives directly connected to the network. The primary motivation for the NASD architecture is cost-effective, scalable performance. <p> The primary motivation for the NASD architecture is cost-effective, scalable performance. Directly attaching disks to the network can decrease the file server load [6] and increase the aggregate bandwidth available beyond what is available from a single storage server <ref> [7, 10] </ref>. File management is different in NASD systems than in classical distributed file systems such as Andrew File System [12], Sun's Network File System [23], or Novell Netware.
Reference: [11] <author> Mark Hayter and Derek McAuley. </author> <title> The Desk Area Network. </title> <journal> ACM Transactions on Operating Systems, </journal> <pages> pages 1421, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: These drives have minimal uncommitted computational power, so high-level file system functions (including access control) must still be handled by a separate server machine (which we call a file manager) that can understand local environment security needs <ref> [5, 10, 14, 11] </ref>. At Carnegie Mellon University, we are actively designing and building a system using disk drives directly connected to the network. The primary motivation for the NASD architecture is cost-effective, scalable performance.
Reference: [12] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, and M. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: Directly attaching disks to the network can decrease the file server load [6] and increase the aggregate bandwidth available beyond what is available from a single storage server [7, 10]. File management is different in NASD systems than in classical distributed file systems such as Andrew File System <ref> [12] </ref>, Sun's Network File System [23], or Novell Netware. In classical distributed file systems, a file server manages file storage on devices that are physically part of the file server machine (see Figure 1).
Reference: [13] <author> Henry M. Levy. </author> <title> Capability-based Computer Systems. </title> <publisher> Digital Press, </publisher> <address> Bedford, Mass., </address> <year> 1984. </year> <month> 17 </month>
Reference-contexts: Briefly, a capability is a token which grants the bearer specified access rights. Unlike classical capability mechanisms <ref> [13, 20, 28] </ref> we cannot depend on all kernels being trusted to maintain system security in the face of a hostile network nor can we use a single machine with hardware support for capabilities.
Reference: [14] <author> Rodney Van Meter, Steve Hotz, and Gregory Finn. </author> <title> Derived Virtual Devices: A Secure Distributed File System Mechanism. </title> <booktitle> In Proceedings of the Fifth NASA Goddard Space Flight Center Conference on Mass Storage Systems and Technologies, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: These drives have minimal uncommitted computational power, so high-level file system functions (including access control) must still be handled by a separate server machine (which we call a file manager) that can understand local environment security needs <ref> [5, 10, 14, 11] </ref>. At Carnegie Mellon University, we are actively designing and building a system using disk drives directly connected to the network. The primary motivation for the NASD architecture is cost-effective, scalable performance. <p> The goal of the NASD security system is to achieve this communication in a safe, flexible, and efficient way. One approach is for the file manager to inform the drive directly of a user's rights <ref> [14] </ref>, which the drive will enforce when it later identifies the named user's requests. However, this approach requires that the drive be aware of the user's identity and implies a specific a user authentication mechanism to the drive. <p> Since NASD file systems may use a variety of authentication systems all using a single drive protocol, NASD requires that the authentication mechanism be separate from the drive authorization to enable different file system implementations. The NetStation project <ref> [14] </ref> is another network attached storage system. NetStation's storage model is a block device attached to the network. Since the storage only provides a block model, the meta-data to provide a file abstraction must be shipped to the drive for each file that is opened.
Reference: [15] <author> D. Mills. </author> <title> Network Time Protocol (v3). </title> <type> Technical Report RFC 1305, </type> <institution> Network Working Group, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: NASD requires that the file manager know the current value of the drives clock. This could be achieved by an authenticated clock synchronization protocol (perhaps similar to SNTP [16] or NTP <ref> [15] </ref>). Similarly, the client should synchronize with the file manager on the secure clock value of the drive.
Reference: [16] <author> D. Mills. </author> <title> Simple Network Time Protocol (SNTP). </title> <type> Technical Report RFC 1768, </type> <institution> Network Working Group, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: NASD requires that the file manager know the current value of the drives clock. This could be achieved by an authenticated clock synchronization protocol (perhaps similar to SNTP <ref> [16] </ref> or NTP [15]). Similarly, the client should synchronize with the file manager on the secure clock value of the drive.
Reference: [17] <author> B. Clifford Neuman. </author> <title> Proxy-Based Authorization and Accounting for Distributed Systems. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283291, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Both ICAP [8] and Amoeba [25] utilize one way functions in capability construction. However, neither ICAP nor Amoeba explicitly separate the issuer of a capability from the validator of a capability. The proxy model <ref> [17] </ref> is a more powerful abstraction than capabilities. The emphasis in the proxy model work has been the power of the abstraction and integration with Kerberos rather than an explicit emphasis on performance. However, Neuman advocates that the mechanism be built on top of the authentication mechanism.
Reference: [18] <author> U. S. </author> <title> National Institute of Standards and Technology. Federal Information Processing Standards Publication 186: Digital Signature Standard, </title> <month> May </month> <year> 1994. </year>
Reference-contexts: Various secure hash algo rithms such as MD5 [22], SHA <ref> [18] </ref>, or Tiger [1] may be viable options for NASD. * M D K (Msg) is a keyed version of a message digest (also called a MAC or message authentication code). Constructions such as HMAC [2] may be good candidates to construct a keyed digest based on an unkeyed version.
Reference: [19] <institution> Hawaii International Conference on System Science 30 Taskforce on Network Storage Architecture. </institution> <note> http://www.pdl.cs.cmu.edu/NASD/HICSS.html. </note>
Reference-contexts: 1 Motivation 1.1 A new direction for storage The rapidly developing technology of peripheral storage devices has opened new opportunities for security technology <ref> [9, 19] </ref>. It is now possible to build a cost-effective disk drive that can directly communicate with the network without a server machine acting as an intermediary.
Reference: [20] <author> E. Organick. </author> <title> A Programmer's View of the Intel 432 System. </title> <publisher> McGraw-Hill, </publisher> <address> New York, New York, </address> <year> 1983. </year>
Reference-contexts: Briefly, a capability is a token which grants the bearer specified access rights. Unlike classical capability mechanisms <ref> [13, 20, 28] </ref> we cannot depend on all kernels being trusted to maintain system security in the face of a hostile network nor can we use a single machine with hardware support for capabilities.
Reference: [21] <author> Michael Rabin. </author> <title> Fingerprinting by Random Polynomials. </title> <type> Technical Report TR-81-15, </type> <institution> Center for Research in Computing Technology, Aiken Laboratory, Harvard University, </institution> <month> May </month> <year> 1981. </year>
Reference-contexts: Constructions such as HMAC [2] may be good candidates to construct a keyed digest based on an unkeyed version. Karp-Rabin <ref> [21] </ref> may also be viable since it is inherently keyed. * K (A;B) is a temporary (session) key shared between entities A and B. * AV is a version identifier on the per-object access control information that the file manager controls.
Reference: [22] <author> R. Rivest. </author> <title> The MD5 Message-Digest Algorithm. </title> <type> Technical Report RFC 1321, </type> <institution> IETF Network Working Group, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Various secure hash algo rithms such as MD5 <ref> [22] </ref>, SHA [18], or Tiger [1] may be viable options for NASD. * M D K (Msg) is a keyed version of a message digest (also called a MAC or message authentication code).
Reference: [23] <author> R Sandberg. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> In Proceedings of the Summer 1985 USENIX Technical Conference, </booktitle> <pages> pages 119 130. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1985. </year>
Reference-contexts: File management is different in NASD systems than in classical distributed file systems such as Andrew File System [12], Sun's Network File System <ref> [23] </ref>, or Novell Netware. In classical distributed file systems, a file server manages file storage on devices that are physically part of the file server machine (see Figure 1).
Reference: [24] <author> Robert D. Sansom, Daniel P. Julin, and Richard F. Rashid. </author> <title> Extending a Capability Based System into a Network Environment. </title> <booktitle> In SIGCOMM '86: Futures in Communications, </booktitle> <month> August </month> <year> 1986. </year>
Reference-contexts: Subsequent requests were able to use the cached capability key. 11 Related Work Historically, capability systems have used hardware support to prevent client modification of capabilities [3, 27] or depended on trusted operating system kernels <ref> [24, 28] </ref>. NASD capabilities differ because we use a fully distributed system where we do not trust the holders of the capabilities.
Reference: [25] <author> Andrew S. Tanenbaum, Sape J. Mullender, and Robbert van Renesse. </author> <title> Using Sparse Capabilities in a Distributed System. </title> <booktitle> In Proceedings of the Sixth International Conference on Distributed Commputing, </booktitle> <pages> pages 558563, </pages> <year> 1986. </year>
Reference-contexts: Instead NASD generates and verifies capabilities using a known protocol and secret keys shared between the issuer and validator of capabilities. Both ICAP [8] and Amoeba <ref> [25] </ref> utilize one way functions in capability construction. However, neither ICAP nor Amoeba explicitly separate the issuer of a capability from the validator of a capability. The proxy model [17] is a more powerful abstraction than capabilities.
Reference: [26] <author> Joseph Touch. </author> <title> Performance Analysis of MD5. </title> <booktitle> In Proceedings of SIGCOMM 1995, </booktitle> <pages> pages 7786, </pages> <year> 1995. </year>
Reference-contexts: All these servers communicate using RX. 13 We use a software implementation of HMAC-MD5 as our keyed message digest. Our MD5 implemen-tation is derived from the cryptolib implementation from AT&T Labs. The MD5 code was modified to use many of the optimizations described in <ref> [26] </ref> to avoid unnecessary byte swapping or copy operations. The HMAC layer above MD5 is the reference implementation of HMAC. 10.2 Description and result of experiment Our basic experiments helped us under the performance cost of using the security in NASD.
Reference: [27] <author> M. V. Wilkes and R. M. Needham. </author> <title> The Cambridge CAP Computer and Its Operating System. </title> <publisher> Nort Holland, </publisher> <year> 1979. </year>
Reference-contexts: Subsequent requests were able to use the cached capability key. 11 Related Work Historically, capability systems have used hardware support to prevent client modification of capabilities <ref> [3, 27] </ref> or depended on trusted operating system kernels [24, 28]. NASD capabilities differ because we use a fully distributed system where we do not trust the holders of the capabilities.
Reference: [28] <author> W. A. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack. HYDRA: </author> <title> The Kernel of a Multiprocessor Operating System. </title> <journal> Communications of the ACM, </journal> <volume> 17(6):337345, </volume> <month> June </month> <year> 1974. </year>
Reference-contexts: Briefly, a capability is a token which grants the bearer specified access rights. Unlike classical capability mechanisms <ref> [13, 20, 28] </ref> we cannot depend on all kernels being trusted to maintain system security in the face of a hostile network nor can we use a single machine with hardware support for capabilities. <p> the storage devices and leave higher level issues to file system implementors. 3 Design Goals We had the following goals when designing the security for NASD: * The NASD security system should explicitly separate the policy enforcement mechanism from the policy decision process (a similar goal was stated for Hydra <ref> [28] </ref>) so we the file manager must be able to communicate policy decisions to the drive. * The protocol should prevent unauthorized modification of client requests and capabilities along with protecting privacy of requests if dictated by the policies of clients or file managers. * To minimize interaction with the file <p> Subsequent requests were able to use the cached capability key. 11 Related Work Historically, capability systems have used hardware support to prevent client modification of capabilities [3, 27] or depended on trusted operating system kernels <ref> [24, 28] </ref>. NASD capabilities differ because we use a fully distributed system where we do not trust the holders of the capabilities.
Reference: [29] <author> Bennet Yee and Doug Tygar. </author> <title> Secure Coprocessors in Electronic Commerce Applications. </title> <booktitle> In Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <address> New York, New York, </address> <month> July </month> <year> 1995. </year> <month> 18 </month>
Reference-contexts: Some drive implementations may include other hardware such as tamper-resistant hardware, cryptographic hardware support, or a (RAID) controller computer transparently coupling a group of simpler (SCSI) drives. High security drives may contain an additional secure coprocessor that is itself a general purpose processor and memory <ref> [29] </ref>. In some cases, drive designs will sacrifice some security by omitting tamper resistant hardware and cryptographic accelerators to reduce costs. 2.2 Options for security hardware Different NASD drive configurations may provide users with different security guarantees.
References-found: 29

