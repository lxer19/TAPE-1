URL: http://www.win.tue.nl/~hooman/STEAM.ps
Refering-URL: http://www.win.tue.nl/~hooman/steam.html
Root-URL: http://www.win.tue.nl
Email: e-mail: jav@informatik.uni-kiel.d400.de  e-mail: wsinjh@win.tue.nl  
Phone: 2  
Title: Assertional Specification and Verification using PVS of the Steam Boiler Control System  
Author: Jan Vitt and Jozef Hooman 
Address: Kiel, Germany  Netherlands  
Affiliation: 1 Institut fur Informatik und Praktische Mathematik Christian-Albrechts-Universitat zu  Dept. of Mathematics and Computing Science Eindhoven University of Technology, The  
Abstract: An implementation of the steam boiler control system has been derived using a formal method based on assumption/commitment pairs. Intermediate stages of top-down design are represented in a mixed formalism where programs and assertional specifications are combined in a single framework. Design steps can be verified by means of compositional proof rules. This framework has been defined in the specification language of the verification system PVS. By the interactive proof checker of PVS, the correctness of each refinement step has been checked mechanically. 
Abstract-found: 1
Intro-found: 1
Reference: [GNRR93] <editor> R. Grossman, A. Nerode, A. Ravn, and H. Rischel, editors. </editor> <booktitle> Hybrid Systems, volume 736 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In the last stage, also failures of physical components are taken into account. The first stage is described in Section 2 where a real-time control program for the steam boiler system is developed. The steam boiler system is a typical example of a hybrid system <ref> [GNRR93] </ref> with discrete and continuous components such as program controlled digital computers and continuous processes. Hence we could follow an approach which has been applied before [Hoo93, Hoo94, Hoo96] to derive a real-time control program for such systems.
Reference: [Hoa69] <author> C.A.R. Hoare. </author> <title> An axiomatic basis for computer programming. </title> <journal> Communications of the ACM, </journal> <volume> 12(10) </volume> <pages> 576-580, 583, </pages> <month> October </month> <year> 1969. </year>
Reference-contexts: : [program, program -&gt; bool] = (LAMBDA prog1,prog2: (FORALL s0,s1: prog1 (s0,s1) IMPLIES prog2 (s0,s1) )) reftrans: THEOREM (prog1 =&gt; prog2) IFF (EXISTS prog: (prog1 =&gt; prog) AND (prog =&gt; prog2)) Proof System The proof system contains the following consequence rule that reflects the classical consequence rule of Hoare logic <ref> [Hoa69] </ref>. rulecons: THEOREM Valid (A IMPLIES A0) AND Valid (C0 IMPLIES C) IMPLIES (spec (A0,C0) =&gt; spec (A,C)) The rule for parallel composition of processes is given as an axiom rather than a theorem.
Reference: [Hoo91] <author> J. Hooman. </author> <title> Specification and Compositional Verification of Real-Time Systems, </title> <booktitle> volume 558 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Also, for simplicity, syntactic constraints which require that the assertions of one process do not refer to observables of the other process are omitted. Additionally, it is assumed that neither now nor term occur in the commitments. We refer to <ref> [Hoo91] </ref> for more details and a soundness proof of the parallel composition rule.
Reference: [Hoo93] <author> J. Hooman. </author> <title> A compositional approach to the design of hybrid systems. </title> <editor> In Grossman et al. </editor> <booktitle> [GNRR93], </booktitle> <pages> pages 121-148. </pages>
Reference-contexts: The steam boiler system is a typical example of a hybrid system [GNRR93] with discrete and continuous components such as program controlled digital computers and continuous processes. Hence we could follow an approach which has been applied before <ref> [Hoo93, Hoo94, Hoo96] </ref> to derive a real-time control program for such systems. The next stages, where failures of channels or components are allowed, are less straightforward, since we had not much experience with fault-tolerance in our framework. First, in Section 3, we consider failing channels that might loose messages. <p> Then an implementation of a real-time control program is derived following the standard approach of earlier work <ref> [Hoo93, Hoo94, Hoo96] </ref>. In Section 2.2 we give a formal description of the top-level specification of the complete steam boiler control system, i.e., control system plus continuous processes (such as inflow of water and outflow of steam). Further, relevant properties of the physical processes to be controlled are formalized.
Reference: [Hoo94] <author> J. Hooman. </author> <title> Correctness of real-time systems by construction. </title> <editor> In H. Langmaack, W.P. de Roever, and J. Vytopil, editors, </editor> <booktitle> Formal Techniques in Real-Time and Fault-Tolerant Systems, volume 863 of LNCS, </booktitle> <pages> pages 19-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The application of a formal method in the design process leads to a large number of verification conditions, including many trivial proof obligations. Therefore the tool PVS 3 (Prototype Verification System) [ORS92, ORSvH95] has been used to support the design. The approach presented here is based on <ref> [Hoo94] </ref> where our mixed framework has been formulated in terms of the PVS specification language, a strongly-typed higher-order logic. This enables us to verify the correctness of each refinement step by means of the interactive proof checker of PVS. <p> The steam boiler system is a typical example of a hybrid system [GNRR93] with discrete and continuous components such as program controlled digital computers and continuous processes. Hence we could follow an approach which has been applied before <ref> [Hoo93, Hoo94, Hoo96] </ref> to derive a real-time control program for such systems. The next stages, where failures of channels or components are allowed, are less straightforward, since we had not much experience with fault-tolerance in our framework. First, in Section 3, we consider failing channels that might loose messages. <p> Then an implementation of a real-time control program is derived following the standard approach of earlier work <ref> [Hoo93, Hoo94, Hoo96] </ref>. In Section 2.2 we give a formal description of the top-level specification of the complete steam boiler control system, i.e., control system plus continuous processes (such as inflow of water and outflow of steam). Further, relevant properties of the physical processes to be controlled are formalized. <p> The first part, in which no faults are considered, was rather straightforward since we could build on a previous control example verified in PVS <ref> [Hoo94] </ref>. The most complicated part was the proof of the first refinement step, since this concerns the correctness of a control strategy in terms of continuous quantities. The proof depends on mathematical analysis, such as properties of continuous functions and integration, which had to be incorporated in PVS.
Reference: [Hoo96] <author> J. Hooman. </author> <title> Assertional specification and verification. </title> <editor> In M. Joseph, editor, </editor> <title> Real-time Systems: Specification, Verification and Analysis, </title> <booktitle> chapter 5, </booktitle> <pages> pages 97-146. </pages> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: The steam boiler system is a typical example of a hybrid system [GNRR93] with discrete and continuous components such as program controlled digital computers and continuous processes. Hence we could follow an approach which has been applied before <ref> [Hoo93, Hoo94, Hoo96] </ref> to derive a real-time control program for such systems. The next stages, where failures of channels or components are allowed, are less straightforward, since we had not much experience with fault-tolerance in our framework. First, in Section 3, we consider failing channels that might loose messages. <p> Then an implementation of a real-time control program is derived following the standard approach of earlier work <ref> [Hoo93, Hoo94, Hoo96] </ref>. In Section 2.2 we give a formal description of the top-level specification of the complete steam boiler control system, i.e., control system plus continuous processes (such as inflow of water and outflow of steam). Further, relevant properties of the physical processes to be controlled are formalized.
Reference: [ORS92] <author> S. Owre, J. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <booktitle> In Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 748-752. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The application of a formal method in the design process leads to a large number of verification conditions, including many trivial proof obligations. Therefore the tool PVS 3 (Prototype Verification System) <ref> [ORS92, ORSvH95] </ref> has been used to support the design. The approach presented here is based on [Hoo94] where our mixed framework has been formulated in terms of the PVS specification language, a strongly-typed higher-order logic.
Reference: [ORSvH95] <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The application of a formal method in the design process leads to a large number of verification conditions, including many trivial proof obligations. Therefore the tool PVS 3 (Prototype Verification System) <ref> [ORS92, ORSvH95] </ref> has been used to support the design. The approach presented here is based on [Hoo94] where our mixed framework has been formulated in terms of the PVS specification language, a strongly-typed higher-order logic. <p> Also the correctness proof of the final control program was rather intricate and time consuming. Later stages of the design, considering failures, took more time due to our limited experience in this field. Note, however, that PVS has been used extensively for fault-tolerant applications <ref> [ORSvH95] </ref>. 5) According to our experience, it requires some basic knowledge of first-order logic (the higher-order aspects of PVS seem easy understandable) to understand PVS specifications. Given this background, usually a few days of introduction and hands-on experience are sufficient to start working with the PVS system.
References-found: 8

