URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/FP-94-%3f%3f_lazy-functional-state-threads.ps
Refering-URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/
Root-URL: 
Email: Email: -simonpj,jl-@dcs.glasgow.ac.uk.  
Phone: Phone: +44-41-330-4500  
Title: Lazy Functional State Threads system, using parametricity. Intriguingly, this para-metricity requires the provision of a
Author: John Launchbury and Simon L Peyton Jones 
Note: The security of the encapsulation is assured by the type  
Date: March 10, 1994  
Address: Glasgow  
Affiliation: University of  
Abstract: Some algorithms make critical internal use of updatable state, even though their external specification is purely functional. Based on earlier work on monads, we present a way of securely encapsulating stateful computations that manipulate multiple, named, mutable objects, in the context of a non-strict, purely-functional language. A shorter version of this paper appears in the Proceedings of the ACM Conference on Programming Languages Design and Implementation (PLDI), Orlando, June 1994. 
Abstract-found: 1
Intro-found: 1
Reference: <author> M Odersky, D Rabin & P Hudak [Jan 1993], </author> <title> "Call by name, assignment, and the lambda calculus," </title> <booktitle> in 20th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charleston, </address> <publisher> ACM, </publisher> <month> 43-56. </month> <title> LC Paulson [1991], ML for the working programmer, </title> <publisher> Cambridge University Press. </publisher>
Reference: <author> SL Peyton Jones & J Launchbury [Sept 1991], </author> <title> "Unboxed values as first class citizens," </title> <booktitle> in Functional Programming Languages and Computer Architecture, </booktitle> <address> Boston, </address> <publisher> Hughes, ed., LNCS 523, Springer Verlag, </publisher> <pages> 636-666. </pages>
Reference: <editor> SL Peyton Jones & PL Wadler [Jan 1993], </editor> <title> "Imperative functional programming," </title> <booktitle> in 20th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charleston, </address> <publisher> ACM, </publisher> <month> 71-84. </month> <title> CG Ponder, PC McGeer & A P-C Ng [June 1988], "Are applicative languages inefficient?," </title> <journal> SIG-PLAN Notices 23, </journal> <month> 135-139. </month> <title> DA Schmidt [Apr 1985], "Detecting global variables in de-notational specifications," TOPLAS 7, 299-310. V Swarup, US Reddy & E Ireland [Sept 1991], "Assignments for applicative languages," </title> <booktitle> in Functional Programming Languages and Computer Architecture, </booktitle> <address> Boston, </address> <publisher> Hughes, ed., LNCS 523, Springer Verlag, </publisher> <month> 192-214. </month> <title> M Tofte [Nov 1990], "Type inference for polymorphic references," </title> <booktitle> Information and Computation 89. </booktitle>
References-found: 3

