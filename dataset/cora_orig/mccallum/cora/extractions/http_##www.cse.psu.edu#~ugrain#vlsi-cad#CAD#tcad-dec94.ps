URL: http://www.cse.psu.edu/~ugrain/vlsi-cad/CAD/tcad-dec94.ps
Refering-URL: http://www.cse.psu.edu/~ugrain/publications.html
Root-URL: 
Note: Copyright  
Abstract: c fl1994 IEEE. All rights reserved. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution must be obtained from the IEEE. For information on obtaining permission, send a blank email message to info.pub.permission@ieee.org. By choosing to view this document, you agree to all provisions of the copyright laws protecting it. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Barrera, J. Griffith, G. Robins, and T. Zhang. </author> <title> Narrowing the GAP: Near-Optimal Steiner Trees in Polynomial Time. </title> <type> Technical Report, </type> <institution> University of Verginia, Computer Science, (CS-93-31), </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Recently, it is also claimed, based on empirical results, that on the average the 1-Steiner algorithm is only 0.25% away from optimal for up to 8 node sets and less than 0.50% away from optimal for 20 nodes <ref> [1] </ref>. We compared our algorithm directly with the batched 1-Steiner algorithm on the same set of examples The points were drawn at random from an uniform grid of size 10000 fi 10000.
Reference: [2] <editor> MCNC benchmark. </editor> <booktitle> Physical Design Workshop, </booktitle> <year> 1989. </year>
Reference-contexts: V. Conclusions Our edge-based algorithm is used in artistII [18] which produces good layouts quickly. Figure 7 shows a layout produced by artistII for the `alu' benchmark circuit <ref> [2] </ref> using our edge-based algorithm. This implementation is very simple to understand and easy to use, since it uses conventional data structures like adjacency lists and arrays.
Reference: [3] <author> Piotr Berman and Viswanathan Ramaiyer. </author> <title> Improved Approximations for the Steiner Tree Problem. </title> <booktitle> Symposium on Discrete Algorithms, </booktitle> <month> Jan </month> <year> 1992. </year>
Reference-contexts: A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem [8], however, several heuristics for finding a good approximation exist [10] [14] [15] [5] [4] <ref> [3] </ref> [17]. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11].
Reference: [4] <author> M. W. Bern and M. de Carvalho. </author> <title> A Greedy Heuristic for Rectilinear Steiner Tree Problem. </title> <type> Technical Report, </type> <year> 1985. </year>
Reference-contexts: A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem [8], however, several heuristics for finding a good approximation exist [10] [14] [15] [5] <ref> [4] </ref> [3] [17]. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11]. <p> Hwang [13] improved the above heuristic to make use of the MST to guide the search which resulted in a faster algorithm. Bern and Carvalho <ref> [4] </ref> developed algorithms based on Kruskal's MST algorithm. Recently, Lim et al. [17] formulated another Steiner tree problem based on critical path delay reduction in the circuit.
Reference: [5] <author> T. H. Chao and Y. C. Hsu. </author> <title> Rectilinear Steiner Tree Construction by Local and Global Refinement. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(3) </volume> <pages> 303-309, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem [8], however, several heuristics for finding a good approximation exist [10] [14] [15] <ref> [5] </ref> [4] [3] [17]. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11]. <p> Many heuristics for Steiner tree approximations start with an MST. Ho, Vijayan and Wong [10] proposed algorithms for finding optimal L-shaped and Z-shaped embeddings of rectangular layouts of a separable MST. Chao and Hsu <ref> [5] </ref> start with the MST and introduce Steiner points to the tree based on local and global refinements.
Reference: [6] <author> C. Chiang, M. Sarrafzadeh, and C. K. Wong. </author> <title> Global Routing Based on Steiner Min-Max Trees. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 9(12) </volume> <pages> 1318-1325, </pages> <year> 1990. </year>
Reference-contexts: They also formulated another version of Steiner tree with the maximum weight edge minimized which they used on their global router <ref> [6] </ref>. All of the above methods are based on the MST. However, there are other heuristics that approach the problem differently.
Reference: [7] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms, chapter 24. </title> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: A very simple O (n 2 ) implementation of the algorithm is possible with conventional data structures, such as adjacency lists, as illustrated below. 1. The minimum spanning tree of the set of points (step 1) is computed in O (n 2 ) time using Prim's algorithm <ref> [7] </ref>. 2. We use a recursive routine similar to depth first search for each edge to compute the &lt;node, edge&gt; pair giving maximum gain involving that edge. (Start with the given edge as root and pass the maximum edge seen till now as parameter to the recursive calls).
Reference: [8] <author> M. Garey and D. S. Johnson. </author> <title> The Rectilinear Steiner Problem is NP-Complete. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 32(4) </volume> <pages> 826-834, </pages> <year> 1977. </year>
Reference-contexts: Minimizing the length of the wires reduces the interconnect capacitance, cost of metal and wiring area. A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem <ref> [8] </ref>, however, several heuristics for finding a good approximation exist [10] [14] [15] [5] [4] [3] [17]. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11].
Reference: [9] <author> Dov Harel and R. E. Tarjan. </author> <title> Fast algorithms for finding nearest common ancestors. </title> <journal> SIAM Journal on Computing, </journal> <volume> 13(2) </volume> <pages> 338-355, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: End. ing. Tarjan's algorithm uses path compression along with the nearest common ancestor (NCA or LCA) algorithm to compute this. Note that efficient O (n) preprocessing time and O (m) query time algorithms for the nearest common ancestor problem exists <ref> [9] </ref>. Since m is O (n) in this case, the queries can be computed in o (n log n) time. Now computing the gain information for the O (n) pairs takes only O (n) time.
Reference: [10] <author> J. M. Ho, G. Vijayan, and C. K. Wong. </author> <title> New Algorithms for the Rectilinear Steiner Tree Problem. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 9(2) </volume> <pages> 185-193, </pages> <year> 1990. </year>
Reference-contexts: A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem [8], however, several heuristics for finding a good approximation exist <ref> [10] </ref> [14] [15] [5] [4] [3] [17]. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11]. <p> Therefore, any reasonable approach starting with a minimum rectilinear spanning tree will produce a Steiner tree no costlier than this bound. Many heuristics for Steiner tree approximations start with an MST. Ho, Vijayan and Wong <ref> [10] </ref> proposed algorithms for finding optimal L-shaped and Z-shaped embeddings of rectangular layouts of a separable MST. Chao and Hsu [5] start with the MST and introduce Steiner points to the tree based on local and global refinements. <p> However, while applying the updates to the tree in step 4, we check to see that both the edges participating in the update exist in the tree. The degree of any vertex in a rectilinear minimum spanning tree is bounded by six <ref> [10] </ref>. Therefore the edge-pair replacement of Figure 1 can be done in O (1) time. A very simple O (n 2 ) implementation of the algorithm is possible with conventional data structures, such as adjacency lists, as illustrated below. 1.
Reference: [11] <author> F. K. Hwang. </author> <title> On Steiner minimal Trees with Rectilinear Distance. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 30(1) </volume> <pages> 104-114, </pages> <year> 1976. </year>
Reference-contexts: The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree <ref> [11] </ref>. Therefore, any reasonable approach starting with a minimum rectilinear spanning tree will produce a Steiner tree no costlier than this bound. Many heuristics for Steiner tree approximations start with an MST.
Reference: [12] <author> F. K. Hwang. </author> <title> An O(n log n) Algorithm for Rectilinear Minimal Spanning Trees. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 26(2) </volume> <pages> 177-182, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: Moreover, we also show that our edge-based algorithm has O (n log n) asymptotic time complexity using sophisticated data structures, which matches the lower bound on computing the MST of a set of points and thus matches the lower bound on any MST based heuristic <ref> [12] </ref>. Lewis et al [16] also independently developed a somewhat similar heuristic for computing the Steiner tree based on local improvements. They iteratively migrate to the best `neighbor' of the existing tree that is obtained by removing an edge from the tree and connecting the two subtrees using another edge. <p> Moreover, the implementation of the algorithm requires the use of only simple and conventional data structures which makes it easy to interface with other tools in the system. IV. Improving the asymptotic time complexity In <ref> [12] </ref> Hwang gave an O (n log n) algorithm to find the rectilinear minimum spanning tree of a set of nodes by first constructing a voronoi diagram of the points in O (n log n) time and thus transforming the problem into a planar graph problem which can easily be solved
Reference: [13] <author> F. K. Hwang. </author> <title> An O(n log n) Algorithm for suboptimal Rectilinear Steiner Trees. </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 26 </volume> <pages> 75-77, </pages> <year> 1979. </year>
Reference-contexts: Lee, Bose and Hwang [15] modified Prim's algorithm to expand the current subtree by adding a point nearest to either an existing vertex on the tree or any point on the rectangular layout of some edge on the existing tree. Hwang <ref> [13] </ref> improved the above heuristic to make use of the MST to guide the search which resulted in a faster algorithm. Bern and Carvalho [4] developed algorithms based on Kruskal's MST algorithm.
Reference: [14] <author> A. B. Kahng and G. Robins. </author> <title> A New Class of Iterative Steiner Tree Heuristics with Good Performance. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(7) </volume> <pages> 893-902, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem [8], however, several heuristics for finding a good approximation exist [10] <ref> [14] </ref> [15] [5] [4] [3] [17]. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11]. <p> They also formulated another version of Steiner tree with the maximum weight edge minimized which they used on their global router [6]. All of the above methods are based on the MST. However, there are other heuristics that approach the problem differently. Kahng and Robins' <ref> [14] </ref> 1-Steiner heuristic starts with the set of nodes and iteratively adds a new Steiner point to the set such that the MST for the new set is minimized among all such sets with one extra node. It has been shown with detailed comparisons in [14],[19] that the 1-Steiner heuristic has <p> A simple O (n 2 ) implementation (n- the number of points in the set) of the algorithm using conventional data structures was tested and compared with the batched 1-Steiner algorithm of <ref> [14] </ref>. The results show that the average percent reduction produced over the MST by our algorithm is the same as that of the batched 1-Steiner algorithm, while our algorithm is an order of magnitude faster than the batched 1-Steiner algorithm. <p> Next, we looked at the time taken by the two algorithms to compute the above results. We ran our implementation of the edge-based algorithm and the batched 1-Steiner code obtained from the authors of <ref> [14] </ref> together on the same sets of data on a Sun4 machine and measured the average CPU time taken for about 5000 samples of each size. Table 3 shows the results of the execution time comparisons for samples varying in size from 5 to 200.
Reference: [15] <author> J. H. Lee, N. K. Bose, and F. K. Hwang. </author> <title> Use of Steiner's problem in suboptimal routing in rectilinear metric. </title> <journal> IEEE Transactiona on Circuits and Systems, </journal> <volume> 23 </volume> <pages> 470-476, </pages> <year> 1976. </year>
Reference-contexts: A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem [8], however, several heuristics for finding a good approximation exist [10] [14] <ref> [15] </ref> [5] [4] [3] [17]. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11]. <p> Ho, Vijayan and Wong [10] proposed algorithms for finding optimal L-shaped and Z-shaped embeddings of rectangular layouts of a separable MST. Chao and Hsu [5] start with the MST and introduce Steiner points to the tree based on local and global refinements. Lee, Bose and Hwang <ref> [15] </ref> modified Prim's algorithm to expand the current subtree by adding a point nearest to either an existing vertex on the tree or any point on the rectangular layout of some edge on the existing tree.
Reference: [16] <author> F. D. Lewis, W. C. Pong, and N. Van-Cleave. </author> <title> Local improvements on Steiner trees. </title> <booktitle> Proc. of 3rd Great Lakes Symp. on VLSI, </booktitle> <pages> pages 470-476, </pages> <year> 1993. </year>
Reference-contexts: Moreover, we also show that our edge-based algorithm has O (n log n) asymptotic time complexity using sophisticated data structures, which matches the lower bound on computing the MST of a set of points and thus matches the lower bound on any MST based heuristic [12]. Lewis et al <ref> [16] </ref> also independently developed a somewhat similar heuristic for computing the Steiner tree based on local improvements. They iteratively migrate to the best `neighbor' of the existing tree that is obtained by removing an edge from the tree and connecting the two subtrees using another edge.
Reference: [17] <author> A. Lim, S. W. Cheng, and C. T. Wu. </author> <title> Performance Oriented Rectilinear Steiner Trees. </title> <booktitle> Proccedings of DAC, </booktitle> <pages> pages 171-176, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: A minimum rectilinear Steiner tree of a set of points connects the points together using the minimum total length of wire. Finding the minimum rectilinear Steiner tree is an NP-hard problem [8], however, several heuristics for finding a good approximation exist [10] [14] [15] [5] [4] [3] <ref> [17] </ref>. The cost (i.e., the total rectilinear length of all the edges) of the minimum rectilinear spanning tree (MST) is at most 1.5 times more than that of the minimum rectilinear Steiner tree [11]. <p> Hwang [13] improved the above heuristic to make use of the MST to guide the search which resulted in a faster algorithm. Bern and Carvalho [4] developed algorithms based on Kruskal's MST algorithm. Recently, Lim et al. <ref> [17] </ref> formulated another Steiner tree problem based on critical path delay reduction in the circuit. They also gave a heuristic which is similar in form to the Prim's MST heuristic with constraints on the edges to include the shortest path for the critical nets.
Reference: [18] <author> M. J. Irwin and R.M. Owens. </author> <title> An Overview of the Penn State Design System. </title> <booktitle> Proc. of DAC, </booktitle> <pages> pages 516-522, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: We have not tested this version of the algorithm for running time comparisons, although we expect to see a drastic improvement in the running time for large sized problems. V. Conclusions Our edge-based algorithm is used in artistII <ref> [18] </ref> which produces good layouts quickly. Figure 7 shows a layout produced by artistII for the `alu' benchmark circuit [2] using our edge-based algorithm. This implementation is very simple to understand and easy to use, since it uses conventional data structures like adjacency lists and arrays.
Reference: [19] <author> D. Richards, F. K. Hwang, and W. Winter. </author> <title> Steiner Tree Problems, chapter 2. </title> <publisher> North Holland, </publisher> <year> 1992. </year>
Reference-contexts: Since there is no absolute measure of the quality of the route produced by a Steiner routing heuristic or algorithm, the average percent improvement over the cost of the minimum rectilinear spanning tree (also called performance) is commonly used to compare different algorithms <ref> [19] </ref>. Using this metric, the 1-Steiner heuristic has been shown to produce the best average percent improvement among the previously reported heuristics with proven time bounds.
Reference: [20] <author> M. Sarrafzadeh and C. K. Wong. </author> <title> Hierarchical Steiner tree construction in uniform orientations. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(9) </volume> <pages> 1095-1103, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: They also gave a heuristic which is similar in form to the Prim's MST heuristic with constraints on the edges to include the shortest path for the critical nets. Sarrafzadeh and Wong <ref> [20] </ref> took a hierarchical approach to the problem and developed a recursive algorithm that divides the tree into two fairly equal subtrees at each step until subtrees of sufficiently smaller size are reached which are then solved explicitly.
Reference: [21] <author> Robert E. Tarjan. </author> <title> Applications of Path Compression on Balanced Trees. </title> <journal> Journal of the Association of Computing Machinery, </journal> <volume> 26(4) </volume> <pages> 690-705, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: Since all the pairs are already available and the tree does not change during computation of the gain, we can use an off-line algorithm for this. Tarjan, in <ref> [21] </ref> gives an O ((n + m)ff (m + n; n)) time algorithm for computing m such queries on a n node tree.
Reference: [22] <author> Jeffery D. Ullman. </author> <title> Computational aspects of VLSI, chapter 9. </title> <publisher> Computer Science Press, Inc., </publisher> <year> 1984. </year>
Reference-contexts: This situation is true for any of the other edges in the tree. The visible nodes for an edge are the nodes of its neighbor edges. Therefore we can report all the pairs of &lt;visible-node, longest-edge&gt; using a variation of the sweepline algorithm used to report overlaps of rectangles <ref> [22] </ref>. A top level description of this sweepline algorithm is given in Figure 5. We represent an edge by the four rectilinear segments (left, right, top and bottom) of its rectangular layout. Degenerate edges (i.e., edges which are along the gridlines) are considered as special cases.
References-found: 22

