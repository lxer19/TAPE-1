URL: http://www-path.eecs.berkeley.edu/~akash/shift-antalya.ps
Refering-URL: http://www-path.eecs.berkeley.edu/~akash/akash.html
Root-URL: 
Email: fakash,gollu,luigig@eecs.berkeley.edu  
Title: The Shift Programming Language and Run-time System for Dynamic Networks of Hybrid Automata  
Author: Akash Deshpande, Aleks Gollu and Luigi Semenzato 
Note: More information about Shift can be found at www.path.berkeley.edu/shift.  
Address: Berkeley, Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California at  
Abstract: Shift is a programming language for describing and simulating dynamic networks of hybrid automata. Such systems consist of components that can be created, interconnected and destroyed as the system evolves. Components exhibit hybrid behavior, consisting of continuous-time phases separated by discrete-event transitions. Components may evolve independently, or they may interact through selected state variables and events. The interaction network itself may evolve. Shift is currently used in two applications: automated highway systems and coordinated submarine systems. The Shift model offers the proper level of abstraction for describing these and other applications such as air traffic control systems and robotic shop-floors whose dynamic reconfigurations cannot be captured easily by conventional models. We have implemented a compiler and a run-time system for Shift. The compiler translates a Shift program into a C program, which, when run, simulates the design specified in the Shift source program. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Alur, C. Courcoubetis, T. Henzinger, and P. Ho. </author> <title> Hybrid Automata: An Al gorithmic Approach to the Specification and Verification of Hybrid Systems. In Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 209-229. </pages>
Reference-contexts: The hybrid systems approach <ref> [1] </ref> satisfies our needs for component modeling but it lacks the capacity to model dynamically reconfigurable interactions between components. The Omola/Omsim [18] language has a very similar approach to hybrid system modeling as SHIFT.
Reference: 2. <author> F. Barros. </author> <title> Dynamic Structure Discrete Event Specification Formalism. </title> <booktitle> In Trans actions for the Society for Computer Simulation. </booktitle> <volume> No 1, </volume> <pages> pp. </pages> <month> 35-46 </month> <year> 1996. </year>
Reference-contexts: Shift adds continuous time semantics and dynamic reconfigurability of the synchronization structure. Sub-typing can be used to organize components hierarchically. Recent extensions to the DEVS [24] formalism have introduced notions of dynamic reconfiguration <ref> [2, 19] </ref>. However, the DEVS formalism is primarily aimed at untimed discrete event simulation and the extensions provided for continuous evolution laws are limited. Furthermore, these approaches are not suitable for large scale system development since they do not provide a formal modeling language.
Reference: 3. <author> F. Barros. </author> <title> Dynamic Structure discrete event systems: A comparison of method ologies and environments. </title> <booktitle> In Proc. </booktitle> <address> SPIE's Aerosense '97 in Orlando Florida. </address>
Reference-contexts: Furthermore, these approaches are not suitable for large scale system development since they do not provide a formal modeling language. Model specification in DEVS is done with C++ or SmallTalk classes that implement their mathematical model <ref> [3] </ref>. The abstraction facilities in general-purpose programming languages such as C or C++, although powerful enough to encode our models, would not allow us to write simple, concise descriptions of our designs. Shift provides both high-level system abstractions and the flexibility of a programming language.
Reference: 4. <author> C.Daws, A.Olivero, S.Tripakis and S.Yovine. </author> <title> The tool Kronos. In Hybrid Systems III, Verification and Control, </title> <booktitle> Lecture Notes in Computer Science 1066, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: It is also being used at Porto University for describing and simulating coordinated submarine maneuvers for ocean weather profiling. Projects are underway to interface Shift to kronos <ref> [4] </ref> for the automatic formal verification of restricted Shift models. We hope that our experience with Shift will continue to confirm that the approach is worthwhile. More information about Shift can be found at www.path.berkeley.edu/shift.
Reference: 5. <author> A. Deshpande and P. Varaiya. </author> <title> Viable Control of Hybrid Systems. In Hybrid Systems II, </title> <publisher> LNCS 999, Springer-Verlag. </publisher> <year> 1995. </year>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [14, 9], analysis <ref> [20, 5, 12] </ref> and implementation [8, 10], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components. We decided to keep the language simple and small.
Reference: 6. <author> A. Deshpande, D. Godbole, A. Gollu, P. Varaiya. </author> <title> "Design and Evaluation Tools for Automated Highway Systems." </title> <booktitle> In DIMACS 1995 and in Hybrid Systems III, </booktitle> <publisher> LNCS, Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Our primary application is the specification and analysis of different designs for automatic control of vehicles and highway systems [22]. We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification <ref> [6] </ref>. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [14, 9], analysis [20, 5, 12] and implementation [8, 10], we adopted the hybrid systems approach for modeling the system components.
Reference: 7. <author> A. Deshpande, A. Gollu, and L. Semenzato. </author> <title> Shift Reference Manual. </title> <type> California PATH Technical Report UCB-ITS-PRR-97-8. </type>
Reference: 8. <author> F. Eskafi, Delnaz Khorramabadi, and P. Varaiya, </author> <title> An Automatic Highway System Simulator. </title> <booktitle> In Transpn. </booktitle> <volume> Res.-C Vol. 3, No. 1, </volume> <pages> pp. 1-17, </pages> <year> 1995. </year>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [14, 9], analysis [20, 5, 12] and implementation <ref> [8, 10] </ref>, we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components. We decided to keep the language simple and small.
Reference: 9. <author> D. Godbole, J. Lygeros, E. Singh, A. Deshpande and E. Lindsey. </author> <title> Design and Verification of Communication Protocols for Degraded Modes of Operation of AHS. </title> <booktitle> In Conference on Decision and Control. </booktitle> <year> 1995. </year>
Reference-contexts: We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification [6]. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling <ref> [14, 9] </ref>, analysis [20, 5, 12] and implementation [8, 10], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: 10. <author> A. Gollu, P. Varaiya. "SmartAHS: </author> <title> An Object Oriented Simulation Framework for Highway Systems", </title> <note> To Appear in Iternational Journal of Mathematical and Computer Modeling. </note>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [14, 9], analysis [20, 5, 12] and implementation <ref> [8, 10] </ref>, we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components. We decided to keep the language simple and small.
Reference: 11. <author> A. Gollu, P. Varaiya. </author> <title> "Dynamic Networks of Hybrid Automata", </title> <booktitle> Fifth Annual Conference on AI, Simulation, and Planning in High Autonomy Systems, </booktitle> <pages> pp. 244-251, </pages> <address> Gainesville, Florida. </address> <year> 1994. </year>
Reference-contexts: Our model performs synchronous composition of multiple automata. Our choice of this definition of world transitions rested on a tradeoff between ease of use and efficiency of implementation. An alternative would be to describe pair-wise cause-effect relationships between the transitions of different components <ref> [11, 16] </ref>. Programs written using the synchronous composition approach can be exponentially smaller than those written using cause-effect relationships. However, the algorithm for determining world transitions in the synchronous composition approach is exponentially more complex than the corresponding algorithm for the cause-effect synchronization approach.
Reference: 12. <author> J. Haddon, D. Godbole, A. Deshpande and J. Lygeros. </author> <title> Verification of Hybrid Systems: Monotonicity in the AHS Control System. </title> <booktitle> In DIMACS. </booktitle> <year> 1995. </year>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [14, 9], analysis <ref> [20, 5, 12] </ref> and implementation [8, 10], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components. We decided to keep the language simple and small.
Reference: 13. <author> D. Harel. Statecharts: </author> <title> a visual approach to complex systems. </title> <journal> Science of Com puter Programming, </journal> <volume> 8(3) </volume> <pages> 231-275, </pages> <year> 1987. </year>
Reference-contexts: However, Omola is designed to represent statically interconnected objects. Furthermore, it does not provide the means of querying sets of components using existential quantifiers. In SHIFT, these queries are used to express and compute the evolution of the interconnections among components as the world evolves. Statecharts <ref> [13] </ref> and Argos [17], based on Statecharts, are approaches for synchronous discrete event modeling. Their focus is on hierarchical specification of finite state machines.
Reference: 14. <author> A. Hsu, F. Eskafi, S. Sachs, P. Varaiya. </author> <title> Protocol Design for an Automated High way System. In Discrete Event Dynamic Systems: </title> <booktitle> Theory and Applications 2, </booktitle> <year> (1993): </year> <pages> 183-206. </pages>
Reference-contexts: We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification [6]. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling <ref> [14, 9] </ref>, analysis [20, 5, 12] and implementation [8, 10], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: 15. <author> Tak-Kuen Juhn Koo, Yi Ma, George J. Pappas and Claire Tomlin. "Smar tATMS: </author> <title> A Simulator for Air Traffic Management Systems" Submitted to Winter Simulation Conference 1997. </title>
Reference-contexts: Whereas the initial application that led to the development of Shift was modeling and simulation of vehicles and highways, the Shift language has since also been used in coordinated autonomous submarines [21], air traffic control systems <ref> [15] </ref>, and material handling systems. In the rest of this section, we examine other work related to the Shift approach. In section 2, we describe the main features of the Shift language|states, inputs, outputs, differential equations and algebraic definitions, discrete states and state transitions.
Reference: 16. <author> R. Kurshan. </author> <title> Computer-Aided Verification of Coordinating Processes: The Automata-Theoretic Approach. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
Reference-contexts: Our model performs synchronous composition of multiple automata. Our choice of this definition of world transitions rested on a tradeoff between ease of use and efficiency of implementation. An alternative would be to describe pair-wise cause-effect relationships between the transitions of different components <ref> [11, 16] </ref>. Programs written using the synchronous composition approach can be exponentially smaller than those written using cause-effect relationships. However, the algorithm for determining world transitions in the synchronous composition approach is exponentially more complex than the corresponding algorithm for the cause-effect synchronization approach.
Reference: 17. <author> F. Maraninchi. </author> <title> The Argos language: Graphical Representation of Automata and Description of Reactive Systems. </title> <booktitle> Proc. IEEE International Conference on Visual Languages, </booktitle> <address> Kobe, Japan, </address> <year> 1991 </year>
Reference-contexts: However, Omola is designed to represent statically interconnected objects. Furthermore, it does not provide the means of querying sets of components using existential quantifiers. In SHIFT, these queries are used to express and compute the evolution of the interconnections among components as the world evolves. Statecharts [13] and Argos <ref> [17] </ref>, based on Statecharts, are approaches for synchronous discrete event modeling. Their focus is on hierarchical specification of finite state machines.
Reference: 18. <author> S.E. Mattsson and M. Anderson. </author> <title> The Ideas Behind Omola. </title> <booktitle> In Proc. IEEE Sym posium on Computer Aided Control System Design, </booktitle> <address> CADCS '92. Napa, CA, </address> <month> March 17-19 </month> <year> 1992. </year>
Reference-contexts: The hybrid systems approach [1] satisfies our needs for component modeling but it lacks the capacity to model dynamically reconfigurable interactions between components. The Omola/Omsim <ref> [18] </ref> language has a very similar approach to hybrid system modeling as SHIFT. Both systems provide a modeling language with simulation semantics; both support discrete event and continuous time behavior representation; both have the necessary constructs for hierarchical modeling and specification reuse.
Reference: 19. <author> H. Praehofer, F. Auernig, adn G. Resinger. </author> <title> "An Environment for DEVS-based multiformalisms simulation in Common Lisp/CLOS", Discrete Event Dynamic Systems: Theory and Application, </title> <booktitle> 3(2) </booktitle> <pages> 119-149, </pages> <year> 1993. </year>
Reference-contexts: Shift adds continuous time semantics and dynamic reconfigurability of the synchronization structure. Sub-typing can be used to organize components hierarchically. Recent extensions to the DEVS [24] formalism have introduced notions of dynamic reconfiguration <ref> [2, 19] </ref>. However, the DEVS formalism is primarily aimed at untimed discrete event simulation and the extensions provided for continuous evolution laws are limited. Furthermore, these approaches are not suitable for large scale system development since they do not provide a formal modeling language.
Reference: 20. <author> A. Puri and P. Varaiya, </author> <title> Driving safely in smart cars. </title> <booktitle> In American Control Con ference, </booktitle> <pages> pp. 3597-3599, </pages> <year> 1995. </year>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [14, 9], analysis <ref> [20, 5, 12] </ref> and implementation [8, 10], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components. We decided to keep the language simple and small.
Reference: 21. <author> Joao Sousa and Aleks Gollu. </author> <title> "A Simulation Environment of the Coordinated Operation of Multiple Autonomous Underwater Vehicles" Submitted to Winter Simulation Conference 1997. </title>
Reference-contexts: Whereas the initial application that led to the development of Shift was modeling and simulation of vehicles and highways, the Shift language has since also been used in coordinated autonomous submarines <ref> [21] </ref>, air traffic control systems [15], and material handling systems. In the rest of this section, we examine other work related to the Shift approach. In section 2, we describe the main features of the Shift language|states, inputs, outputs, differential equations and algebraic definitions, discrete states and state transitions.
Reference: 22. <author> P. Varaiya. </author> <title> Smart cars on smart roads: problems of control. </title> <journal> In IEEE Trans. Automatic Control, </journal> <volume> vol. 38, No. 2, </volume> <year> 1993. </year>
Reference-contexts: The interaction network itself may evolve. The Shift model and language were motivated by our need for tools that support dynamically reconfigurable hybrid systems. Our primary application is the specification and analysis of different designs for automatic control of vehicles and highway systems <ref> [22] </ref>. We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification [6]. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis.
Reference: 23. <author> Peter Wegner. </author> <title> "Concepts and Paradigms of Object-Oriented Programming", </title> <journal> ACM SIGPLAN OOPS Messenger, </journal> <volume> 1(1), </volume> <month> Aug </month> <year> 1990. </year>
Reference-contexts: Each component has both continuous-time dynamics and discrete-event dynamics which depend on the configuration of the world. Components obey continuous-time dynamics within each phase and discrete-event dynamics in phase transitions. The Shift mathematical model is class based <ref> [23] </ref>. The components are organized into types that describe the prototypical behavior of a component. We say that a component is an instantiation of its type. Type descriptors are an implicit and static part of the world.
Reference: 24. <author> Bernard Zeigler. </author> <title> Multifaceted modeling and discrete event simulation. </title> <publisher> Academic Press, </publisher> <address> London, Orlando, </address> <year> 1984. </year>
Reference-contexts: Shift adds continuous time semantics and dynamic reconfigurability of the synchronization structure. Sub-typing can be used to organize components hierarchically. Recent extensions to the DEVS <ref> [24] </ref> formalism have introduced notions of dynamic reconfiguration [2, 19]. However, the DEVS formalism is primarily aimed at untimed discrete event simulation and the extensions provided for continuous evolution laws are limited.
References-found: 24

