URL: http://www.almaden.ibm.com/cs/quest/papers/vldb95_seq.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Fast Similarity Search in the Presence of Noise, Scaling, and Translation in Time-Series Databases  
Author: Rakesh Agrawal King-Ip Lin Harpreet S. Sawhney Kyuseok Shim 
Address: 650 Harry Road, San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Abstract: We introduce a new model of similarity of time sequences that captures the intuitive notion that two sequences should be considered similar if they have enough non-overlapping time-ordered pairs of subsequences thar are similar. The model allows the amplitude of one of the two sequences to be scaled by any suitable amount and its offset adjusted appropriately. Two subsequences are considered similar if one can be enclosed within an envelope of a specified width drawn around the other. The model also allows non-matching gaps in the matching subsequences. The matching subsequences need not be aligned along the time axis. Given this model of similarity, we present fast search techniques for discovering all similar sequences in a set of sequences. These techniques can also be used to find all (sub)sequences similar to a given sequence. We applied this matching system to the U.S. mutual funds data and discovered interesting matches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, C. Faloutsos, and A. Swami. </author> <title> Efficient similarity search in sequence databases. </title> <booktitle> In Proc. of the Fourth International Conference on Foundations of Data Organization and Algorithms, </booktitle> <address> Chicago, </address> <month> October </month> <year> 1993. </year> <booktitle> Also in Lecture Notes in Computer Science 730, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993, </year> <pages> 69-84. </pages>
Reference-contexts: 1 Introduction Time-series databases naturally arise in business as well as scientific decision-support applications. The capability to find time-sequences (or subsequences) that are "similar" to a given sequence or to be able to find all pairs of similar sequences has several applications, including <ref> [1] </ref> [10]: fl Current Address: Department of Computer Science, University of Maryland, College Park, Maryland. <p> Proceedings of the 21st VLDB Conference Zurich, Switzerland 1995 * Identify companies with similar pattern of growth. * Determine products with similar selling pat terns. * Discover stocks with similar price movements. * Find portions of seismic waves that are not similar to spot geological irregularities. In <ref> [1] </ref>, an indexing structure was proposed for fast similarity searches over time-series databases, assuming that the data as well as query sequences were of the same length.
Reference: [2] <author> R. Agrawal, T. Imielinski, and A. Swami. </author> <title> Database mining: A performance perspective. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 5(6) </volume> <pages> 914-925, </pages> <month> December </month> <year> 1993. </year> <note> Special Issue on Learning and Discovery in Knowledge-Based Databases. </note>
Reference-contexts: We wish to handle a large number of long (say, 5 years of daily data) sequences. Our primary focus is a data mining environment <ref> [2] </ref> in which the user wishes to find all similar time sequences in a given set of sequences. We would also like to be able to find all similar subsequences that match a given sequence.
Reference: [3] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R fl -tree: an efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 322-331, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: They use the Discrete Fourier Transform (DFT) to map a time sequence to the frequency domain, drop all but the first few frequencies, and then use the remaining ones to index the sequence using a R fl -tree <ref> [3] </ref> structure. This work was generalized in [10] to allow subsequence matching. Data sequences could now be of different lengths and the query sequence could be smaller than any of the data sequences. <p> Moreover, since the R-tree based methods do not store "dead space", regions can have a larger separation. This can result in fewer pages to be joined, speeding up the join-time. Specifically, we implemented two R-tree variants: R fl -tree <ref> [3] </ref> and R + -tree [19], and specialized them to better fit our problem. We discuss them next, emphasizing the customizations we made in their implementation. R fl -tree The R fl -tree [3] enhanced the original R-tree in two major ways. <p> Specifically, we implemented two R-tree variants: R fl -tree <ref> [3] </ref> and R + -tree [19], and specialized them to better fit our problem. We discuss them next, emphasizing the customizations we made in their implementation. R fl -tree The R fl -tree [3] enhanced the original R-tree in two major ways. First, it added the perimeter of the bounding regions as an important factor to the heuristics for node splitting.
Reference: [4] <author> D. J. Berndt and J. Clifford. </author> <title> Using dynamic time warping to find patterns in time series. </title> <booktitle> In KDD-94: AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <pages> pages 359-370, </pages> <address> Seattle, Washington, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: Dynamic time warping based matching has been another popular technique in the context of speech processing [18], sequence comparison [9], and shape matching [15]. This method has been used in <ref> [4] </ref> to match a given pattern in time-series data. The essential idea is to match one dimensional patterns while allowing for local stretching of the time parameterization.
Reference: [5] <author> T. Brinkhoff, H.-P. Kriegel, and B. Seeger. </author> <title> Efficient processing of spatial joins using R-trees. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <pages> pages 237-246, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: 4. g 5. else f 6. output := output [ *Join (node, node, *); 7. forall leaf 2 intersect (node, path, *) do 8. output := output [ *Join (node, leaf, *); 9. g 10. return (output); end Self-Join algorithm The previous work on join algorithms for the R-tree variants <ref> [5] </ref> has been focused on the join between two different index tress. In contrast, our application requires a self-join that lends the opportunity to traverse the tree more intelligently. used in our implementation. The algorithm calls itself recursively when the node is a non-leaf node. <p> The function intersect () returns only those leaf nodes that come later in this ordering. CPU cost is an important factor in spatial-joins <ref> [5] </ref>. To reduce CPU cost for redundant comparisons between points in an any two nodes, we first screen points which lie within *-distance from the boundary surface of other node and use sort-merge join for those screened points.
Reference: [6] <author> A. Califano and R. Mohan. </author> <title> Multidimensional indexing for recognizing visual shapes. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 16(4) </volume> <pages> 373-392, </pages> <year> 1994. </year>
Reference-contexts: Alternatively, if the index table is populated to take into account the variance allowed in the definition of similarity, the influence of each index is even more spread out in the index table, thus further decreasing the effi ciency [11]. In <ref> [6] </ref> and [7], multidimensional indexing has been proposed as an alternative to the classical 2D/3D geometric hashing in the context of DNA sequence matching and visual shape matching, respectively. The problem of inefficiency due to high saturation of index table and false matches are alleviated to some extent. <p> Thus, many points will lie on the same hyperplane. We first considered using hashing, borrowing ideas from the geometric hashing techniques for recognizing shapes <ref> [6] </ref> [7].
Reference: [7] <author> A. Califano and I. Rigoutsos. </author> <title> FLASH: A fast look-up algorithm for string homology. </title> <booktitle> In Proc. of the 1st International Conference on Intelligent Systems for Molecular Biology, </booktitle> <pages> pages 353-359, </pages> <address> Bethesda, MD, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: In every stage, the system allows for the flexibility of user/system-defined dynamic parameters without sacrificing efficiency. Related Work There has been work on finding text subsequences that approximately match a given string <ref> [7] </ref> [17] [20] [21] [22]. Text sequences normally consist of a few discrete symbols as opposed to continuous numbers that makes the similarity measures and the search methods quite different. <p> Alternatively, if the index table is populated to take into account the variance allowed in the definition of similarity, the influence of each index is even more spread out in the index table, thus further decreasing the effi ciency [11]. In [6] and <ref> [7] </ref>, multidimensional indexing has been proposed as an alternative to the classical 2D/3D geometric hashing in the context of DNA sequence matching and visual shape matching, respectively. The problem of inefficiency due to high saturation of index table and false matches are alleviated to some extent. <p> Thus, many points will lie on the same hyperplane. We first considered using hashing, borrowing ideas from the geometric hashing techniques for recognizing shapes [6] <ref> [7] </ref>.
Reference: [8] <author> B. Carre. </author> <title> Graphs and Networks. </title> <publisher> Claredon Press, Oxford, </publisher> <year> 1978. </year>
Reference-contexts: We can therefore traverse G in reverse topological sort order and find the longest path <ref> [8] </ref>, which will correspond to the longest match. One final detail concerns ensuring that the normalization scale used is roughly the same for all the windows in a stitched subsequence.
Reference: [9] <author> B. W. Erickson and P. H. Sellers. </author> <title> Recognition of patterns in genetic sequences. </title> <editor> In D. Sankoff and J. B. Kruskal, editors, </editor> <title> Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1983. </year>
Reference-contexts: For instance, sequences with amplitude ranges from 0 to 500 will result in an alphabet size of 50 even with a coarse quantization of 10 levels per alphabet 3 symbol. Dynamic time warping based matching has been another popular technique in the context of speech processing [18], sequence comparison <ref> [9] </ref>, and shape matching [15]. This method has been used in [4] to match a given pattern in time-series data. The essential idea is to match one dimensional patterns while allowing for local stretching of the time parameterization.
Reference: [10] <author> C. Faloutsos, M. Ranganathan, and Y. Manolopoulos. </author> <title> Fast subsequence matching in time-series databases. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Time-series databases naturally arise in business as well as scientific decision-support applications. The capability to find time-sequences (or subsequences) that are "similar" to a given sequence or to be able to find all pairs of similar sequences has several applications, including [1] <ref> [10] </ref>: fl Current Address: Department of Computer Science, University of Maryland, College Park, Maryland. <p> They use the Discrete Fourier Transform (DFT) to map a time sequence to the frequency domain, drop all but the first few frequencies, and then use the remaining ones to index the sequence using a R fl -tree [3] structure. This work was generalized in <ref> [10] </ref> to allow subsequence matching. Data sequences could now be of different lengths and the query sequence could be smaller than any of the data sequences. They use a sliding window over the data sequence, map each window to the frequency domain, and save first few frequencies.
Reference: [11] <author> W. E. L. Grimson and D. P. Huttenlocher. </author> <title> On the sensitivity of geometric hashing. </title> <booktitle> In Proc. 3rd Intl. Conf. on Computer Vision, </booktitle> <pages> pages 334-338, </pages> <year> 1990. </year>
Reference-contexts: Alternatively, if the index table is populated to take into account the variance allowed in the definition of similarity, the influence of each index is even more spread out in the index table, thus further decreasing the effi ciency <ref> [11] </ref>. In [6] and [7], multidimensional indexing has been proposed as an alternative to the classical 2D/3D geometric hashing in the context of DNA sequence matching and visual shape matching, respectively. The problem of inefficiency due to high saturation of index table and false matches are alleviated to some extent.
Reference: [12] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <pages> pages 47-57, </pages> <address> Boston, Mass, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: The basic idea is to create a fast, indexable data structure using small, atomic subsequences that represents all the sequences up to amplitude scaling and offset. We have chosen the R-tree <ref> [12] </ref> family of structures for this representation because arbitrary precision can be maintained for the sequence values while still allowing for similarities to be defined with respect to a user-defined * distance in L 1 norm 1 between the atomic subsequences. <p> Moreover, because the grid-based methods partition the space into adjacent regions and we are doing a self-join with a non-zero value for distance, many joins of adjacent grids will have to be performed. We finally settled on the R-tree 3 <ref> [12] </ref> family of multi-dimensional structures because they tend to be more resilient to higher dimensionalities [16]. Moreover, since the R-tree based methods do not store "dead space", regions can have a larger separation. This can result in fewer pages to be joined, speeding up the join-time. <p> In our R fl -tree implementation, therefore, we defined a new measure for deciding which branch to take during the insertion and for 3 The R-tree <ref> [12] </ref> can be viewed as an extension of the B-tree to multi-dimensions. The R-tree is a balanced tree, in which each node represents a region in the space. For each parent-child pair in the tree, all the children's regions are within that of parent's. <p> Our matching system VanEck International Investor Fund Fidelity Selective Precious Metal and Mineral Fund groups consists of three main parts: (i) "atomic" subsequence matching, (ii) long subsequence matching, and (iii) sequence matching. We use the R-tree <ref> [12] </ref> family of structures (specifically, the R + - tree) to create a fast, indexable data structure using small, atomic subsequences that represents all the sequences up to amplitude scaling and offset.
Reference: [13] <author> K. Hinrichs and J. Nievergelt. </author> <title> The grid file: a data structure to support proximity queries on spatial objects. </title> <editor> In M. Nagl and J. Perl, editors, </editor> <booktitle> Proc. of the WG'83 (Intern. Workshop on Graph Theoretic Concepts in Computer Science), </booktitle> <pages> pages 100-113, </pages> <address> Linz, Austria, </address> <year> 1983. </year>
Reference-contexts: We also considered using a grid-based index structure (such as grid-file <ref> [13] </ref>), but decided against it. Since our points typically have a high dimension, the growth in the size of such a structure can become intolerable.
Reference: [14] <author> Y. Lamdan and H. J. Wolfson. </author> <title> Geometric hashing: A general and efficient model-based recognition scheme. </title> <booktitle> In Proc. 2nd Intl. Conf. on Computer Vision, </booktitle> <pages> pages 238-249, </pages> <year> 1988. </year>
Reference-contexts: Efficient indexing based matching of two and three dimensional (2D/3D) models to their views in images has been addressed in computer vision and pattern recognition. Geometric hashing <ref> [14] </ref> has been proposed as a technique for fast indexing. Two key features of this technique are matching 1 L 1 = max jp i q i j for vectors p and q. that is invariant with respect to certain geometric transformations, and indexing to generate initial hypothesis.
Reference: [15] <author> R. McConnell et al. </author> <title> -S Correlation and dynamic time warping: Two methods for tracking ice floes in SAR images. </title> <journal> IEEE Transactions on Geoscience and Remote Sensing, </journal> <volume> 29(6) </volume> <pages> 1004-1012, </pages> <year> 1991. </year>
Reference-contexts: Dynamic time warping based matching has been another popular technique in the context of speech processing [18], sequence comparison [9], and shape matching <ref> [15] </ref>. This method has been used in [4] to match a given pattern in time-series data. The essential idea is to match one dimensional patterns while allowing for local stretching of the time parameterization.
Reference: [16] <author> M. Otterman. </author> <title> Approximate matching with high dimensionality R-trees. M.sc. </title> <type> scholarly paper, </type> <institution> Dept. of Computer Science, Univ. of Maryland, College Park, Maryland, </institution> <year> 1992. </year>
Reference-contexts: We finally settled on the R-tree 3 [12] family of multi-dimensional structures because they tend to be more resilient to higher dimensionalities <ref> [16] </ref>. Moreover, since the R-tree based methods do not store "dead space", regions can have a larger separation. This can result in fewer pages to be joined, speeding up the join-time.
Reference: [17] <author> M. Roytberg. </author> <title> A search for common patterns in many sequences. </title> <booktitle> Computer Applications in the Biosciences, </booktitle> <volume> 8(1) </volume> <pages> 57-64, </pages> <year> 1992. </year>
Reference-contexts: In every stage, the system allows for the flexibility of user/system-defined dynamic parameters without sacrificing efficiency. Related Work There has been work on finding text subsequences that approximately match a given string [7] <ref> [17] </ref> [20] [21] [22]. Text sequences normally consist of a few discrete symbols as opposed to continuous numbers that makes the similarity measures and the search methods quite different.
Reference: [18] <author> H. Sakoe and S. Chiba. </author> <title> Dynamic programming algorithm optimization for spoken word recognition. </title> <journal> IEEE Transactions on Acoustics, Speech and Signal Processing, </journal> <volume> 26 </volume> <pages> 43-49, </pages> <year> 1978. </year> <month> 11 </month>
Reference-contexts: For instance, sequences with amplitude ranges from 0 to 500 will result in an alphabet size of 50 even with a coarse quantization of 10 levels per alphabet 3 symbol. Dynamic time warping based matching has been another popular technique in the context of speech processing <ref> [18] </ref>, sequence comparison [9], and shape matching [15]. This method has been used in [4] to match a given pattern in time-series data. The essential idea is to match one dimensional patterns while allowing for local stretching of the time parameterization.
Reference: [19] <author> T. Sellis, N. Roussopoulos, and C. Falout--sos. </author> <title> The R + tree: a dynamic index for multidimensional objects. </title> <booktitle> In Proc. 13th International Conference on VLDB, </booktitle> <pages> pages 507-518, </pages> <address> England, </address> <year> 1987. </year>
Reference-contexts: Moreover, since the R-tree based methods do not store "dead space", regions can have a larger separation. This can result in fewer pages to be joined, speeding up the join-time. Specifically, we implemented two R-tree variants: R fl -tree [3] and R + -tree <ref> [19] </ref>, and specialized them to better fit our problem. We discuss them next, emphasizing the customizations we made in their implementation. R fl -tree The R fl -tree [3] enhanced the original R-tree in two major ways. <p> Components of the measure are computed on a when-needed basis. R + -tree The R + -tree <ref> [19] </ref> imposes the constraint that no two bounding regions of a non-leaf node can overlap. Thus, except for the boundary surfaces, there will be only one path to every leaf region, which can reduce search and join costs.
Reference: [20] <author> M. Vingron and P. Argos. </author> <title> A fast and sensitive multiple sequence alignment algorithm. </title> <booktitle> Computer Applications in the Biosciences, </booktitle> <volume> 5 </volume> <pages> 115-122, </pages> <year> 1989. </year>
Reference-contexts: In every stage, the system allows for the flexibility of user/system-defined dynamic parameters without sacrificing efficiency. Related Work There has been work on finding text subsequences that approximately match a given string [7] [17] <ref> [20] </ref> [21] [22]. Text sequences normally consist of a few discrete symbols as opposed to continuous numbers that makes the similarity measures and the search methods quite different.
Reference: [21] <author> J. T.-L. Wang, G.-W. Chirn, T. G. Marr, B. Shapiro, D. Shasha, and K. Zhang. </author> <title> Combinatorial pattern discovery for scientific data: Some preliminary results. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Minneapolis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In every stage, the system allows for the flexibility of user/system-defined dynamic parameters without sacrificing efficiency. Related Work There has been work on finding text subsequences that approximately match a given string [7] [17] [20] <ref> [21] </ref> [22]. Text sequences normally consist of a few discrete symbols as opposed to continuous numbers that makes the similarity measures and the search methods quite different.
Reference: [22] <author> S. Wu and U. Manber. </author> <title> Fast text searching allowing errors. </title> <journal> Communications of the ACM, </journal> <volume> 35(10) </volume> <pages> 83-91, </pages> <month> October </month> <year> 1992. </year> <month> 12 </month>
Reference-contexts: In every stage, the system allows for the flexibility of user/system-defined dynamic parameters without sacrificing efficiency. Related Work There has been work on finding text subsequences that approximately match a given string [7] [17] [20] [21] <ref> [22] </ref>. Text sequences normally consist of a few discrete symbols as opposed to continuous numbers that makes the similarity measures and the search methods quite different.
References-found: 22

