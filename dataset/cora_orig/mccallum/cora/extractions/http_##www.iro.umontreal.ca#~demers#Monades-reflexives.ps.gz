URL: http://www.iro.umontreal.ca/~demers/Monades-reflexives.ps.gz
Refering-URL: http://www.iro.umontreal.ca/~demers/
Root-URL: http://www.iro.umontreal.ca
Title: Introduction a la reflexion monadique modulaire  
Author: Francois-Nicola Demers 
Date: Octobre 1997  
Abstract-found: 0
Intro-found: 0
Reference: [Dem96] <author> Demers (Francois-Nicola). Classification de la reflexion de comportement basee sur les monades. </author> - <month> juillet </month> <year> 1996. </year> <institution> Rapport de l'examen pre-doctoral, deuxieme partie. </institution>
Reference-contexts: Du cote theorique, nous avons developpe les lois generales de la reflexion monadique mais il n'est pas clair s'il existe d'autres lois. Il est possible que la theorie des categories puissent aider a tirer l'ensemble complet des lois de la reflexion <ref> [Dem96] </ref>. De plus, ces lois pourraient servir dans un processus d'optimisation de l'interpretation monadique reflexive.
Reference: [DF90] <author> Danvy (Olivier) et Filinski (Andrzej). </author> - <title> "abstracting control". </title> <booktitle> In : 1990 ACM Conference on Lisp and Functional Programming. ACM, </booktitle> <pages> pp. 151-160. </pages> <publisher> ACM Press. </publisher>
Reference-contexts: Il faut comprendre que pour ^etre capable d'utiliser ces operateurs, il faut necessairement comprendre d'abord le fonc-tionnement de la semantique CPS puisqu'ils offrent la m^eme puissance d'expression. Il serait tentant de definir les operateurs shift (S) et reset (#) 10 de Danvy & Filinski <ref> [DF90] </ref>. Nous savons deja que ces operateurs peuvent se definir par l'ajout des regles suivantes sur une semantique monadique CPS. <p> Filinski a montre que l'ajout d'un etat pour stocker une continuation resout ce probleme. Par ailleurs, Danvy & Filinski <ref> [DF90] </ref> ont montre qu'elles peuvent ^etre defini dans le style passage a la continuation etendu correspondant en quelque sorte a la composition du constructeur monadique K avec lui-m^eme. <p> J [ e ] K k = k : k (Je K k j m ) Suivant le raisonnement de Filinski et un examen plus approfondi, on constate que sa definition ressemble grandement a la definition CPS de la fonction reset de Danvy & Filinski <ref> [DF90, DF92] </ref>. D'une certaine facon, tout ce qui change, c'est la presence de la monade M . Cette definition n'est pas adequate dans le cas general puisqu'elle suppose la presence explicite de la continuation du calcul.
Reference: [DF92] <author> Danvy (Olivier) et Filinski (Andrzej). </author> <title> Representing control : A study of the CPS transformation. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> vol. 2, n 4, </volume> <year> 1992, </year> <pages> pp. 361-391. </pages>
Reference-contexts: J [ e ] K k = k : k (Je K k j m ) Suivant le raisonnement de Filinski et un examen plus approfondi, on constate que sa definition ressemble grandement a la definition CPS de la fonction reset de Danvy & Filinski <ref> [DF90, DF92] </ref>. D'une certaine facon, tout ce qui change, c'est la presence de la monade M . Cette definition n'est pas adequate dans le cas general puisqu'elle suppose la presence explicite de la continuation du calcul.
Reference: [DKM91] <author> Danvy (O.), Koslowski (J.) et Malmkjaer (K.). </author> <title> Compiling Monads. </title> <type> Technical Report n CIS-92-3, </type> <institution> Manhattan, Kansas, Kansas State University, </institution> <year> 1991. </year>
Reference-contexts: Ces fonctions servent a la gestion de la monade T (M ) en cours de l'evaluation des -termes. La notation monadique possede plusieurs formulations equivalentes <ref> [DKM91] </ref>. Nous avons adopte la formulation developpee par Wadler [Wad92].
Reference: [Fil94] <author> Filinski (Andrzej). </author> <title> Representing monads. </title> <booktitle> In : Conference Record of the Twenty-First Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. </booktitle>
Reference-contexts: Les resultats et innovations qui suivent viennent essentiellement de l'analyse de deux articles, le premier de Filinski <ref> [Fil94] </ref> et le second de Mendhekar & Friedman [MF96]. Filinski a invente le concept de reflexion monadique et Mendhekar & Friedman ont tente d'etablir une relation entre celle-ci, la reflexion comportementale et la logique de la reflexion au sens de Tarski. <p> Nous avons demontre l'utilite et la modularite de cette nouvelle reflexion par l'expose de quelques exemples. Enfin, nous avons montre comment representer les monades o complexes AE (composition de monades simples) au niveau du langage defini. 1 Reflexion monadique de Filinski Filinski <ref> [Fil94] </ref> a ete un des premiers a reflechir a la relation entre les monades computationnelles et la reflexion comportementale. Il a developpe une nouvelle extension de langages monadiques qu'il a appele reflexion monadique. <p> La semantique est decrite, comme dans l'article de Filinski <ref> [Fil94] </ref>, a l'aide d'une fonction J K generalement indicee du constructeur monadique. <p> L'interpretation de celles-ci se fait tout simplement par les fonctions monadiques unite j et multiplicateur de la monade T (M ). Ce resultat a ete montre par Filinski <ref> [Fil94, section 2.1] </ref> suivant les travaux plus abstrait de Moggi [Mog89]. Ces operateurs sont particuliers parce qu'ils ne dependent pas de la monade M mais simplement du constructeur T . C'est pour cette raison que nous avons ecrit ces operateurs reflexifs sans indice contrairement aux deux autres. <p> S (M ) ff = s ! M (ff; s) g ? e f = s : (g s) ? ((a; s 0 ) : f a s 0 ) a Fig. 11: Constructeur monadique Etat 5 R EFLEXION MONADIQUE ETAT 18 Filinski <ref> [Fil94] </ref> avait cru que les operateurs de la reflexion devaient ^etre definis en fonction des operateurs de continuations composables de Danvy & Filinski. M^eme Mendhekar & Friedman [MF96] avait adopte sa definition pour creer ses o monades reflexives AE . <p> sk (a : f a)) J + f K sk = sk Jf K sk J + m f K sk = e m Jf K sk J + km f K sk = e k Jf K sk Fig. 13: Semantique monadique reflexive SK des -termes 6.1 Applications Filinski <ref> [Fil94, section 4] </ref> a montre comment definir les operateurs de Danvy & Filinski seule-ment a l'aide de l'operateur call/cc et d'un etat pour stocker une continuation. <p> Nous obtenons les definitions reflexives suivantes : J# e K kk = J + (k : k ((* k e) (x : x))) K kk z -| - | -z - 8 Lois de la reflexion monadique Filinski a demontre dans son article <ref> [Fil94, section 2.3] </ref> que ses operateurs de la reflexion pour le constructeur monadique K sont inverses l'un de l'autre, c'est-a-dire que son operateur de reification est inverse a gauche et a droite de l'operateur de reflexion. <p> Par ailleurs, nous croyons qu'il existe une technique de combinaison des fonctions de representation reflexive. Remarquons enfin que ces fonctions sont lies directement au scheme de representation choisi. 10 Reflexion monadique versus continuation composable Filinski <ref> [Fil94] </ref> a developpe la notion de reflexion monadique. Mais, pour lui, le developpement de cette notion n'etait que secondaire puisque son but principal etait de montrer que la program-mation monadique n'apporte pas plus de puissance que la programmation avec continuation de plein droit (et un etat simple). <p> que, dans ce cas, l'operateur monadique j 0 m est exactement egal a notre operateur de reification puisque 14 J [ e ] K k = J#(j 0 Du cote du multiplicateur, il est facile de verifier que notre definition de cet operateur reflexif correspond exactement a celle de Filinski <ref> [Fil94, section 2.2] </ref>. De ce fait, l'operateur de reflexion a quelque chose d'approchant a l'operateur de controle de Danvy & Filinski shift. Filinski a d'ailleurs demontrer le rapport entre ces deux fonctions dans son article [Fil94, section 3]. <p> De ce fait, l'operateur de reflexion a quelque chose d'approchant a l'operateur de controle de Danvy & Filinski shift. Filinski a d'ailleurs demontrer le rapport entre ces deux fonctions dans son article <ref> [Fil94, section 3] </ref>. Puisque nous n'avons pas adopte la definition de * m comme le suggere l'article de Filinski, le rapprochement entre l'operateur de reflexion et l'operateur shift n'est plus tout a fait juste dans ce cas-ci.
Reference: [How80] <author> Howard (W.). </author> <title> The formulas-as-types notion of construction. In : To H.B. </title> <booktitle> Curry : Essays on Combinatory Logic, Lambda-Calculus and Formalism, </booktitle> <pages> pp. 479-490. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: Mendhekar & Friedman [MF96] ont indirectement etudie la maniere d'exprimer le scheme de representation de facon uniforme et abstraite. Pour ce faire, ils ont conjecture, d'un point de vue plus general que la reflexion monadique pouvait ^etre comprise dans le cadre de l'isomorphisme de Curry-Howard <ref> [How80] </ref>. Cet isomorphisme est une facon standard de relier formellement des concepts logiques a des concepts computationnels. Plus precisement, il permet que les formules logiques soient definis comme des types et les preuves de ces formules, comme des programmes.
Reference: [KAH92] <author> Kieburtz (R.), Agapiev (B.) et Hook (J.). </author> <title> Three monads for continuations. </title> <booktitle> In : ACM SIGPLAN Workshop on Continuations. </booktitle> - <institution> Stanford University, </institution> <note> juin 1992. Report STAN-CS-92-1426. </note>
Reference-contexts: En examinant la definition CPS, on comprend qu'il faudrait pouvoir evaluer E avec pour continuation initiale, la fonction identite. Cela correspond en quelque sorte a une fonction eval. L'hy pothese d'une fonction eval implicite aux continuations composables a deja ete reconnue aupara-vant <ref> [KAH92] </ref>.
Reference: [LH96] <author> Liang (Sheng) et Hudak (Paul). </author> <title> Modular denotational semantics for compiler construction. </title> <booktitle> In : European Symposium on Programming. </booktitle> <address> Linkoping, Sweden, </address> <month> avril </month> <year> 1996. </year> <note> Disponible par ftp : nebula.cs.yale.edu :/pub/yale-fp/papers/mod-sem-draft.ps.Z. </note>
Reference-contexts: L'interpretation de l'abstraction et des variables sont les seules equations a modifier. L'interpretation de l'application n'a pas a ^etre modifie puisqu'il est question d'appel par valeur. Evidemment, les equations modifiees ressemblent aux equations construites a l'aide des operateurs rdEnv et inEnv de Liang et al. <ref> [LH96] </ref>. Expliquons le sens de ces operateurs. Dans le cas de l'evaluation des variables, l'operateur + e a pour objectif de capturer l'environnement courant et de l'appliquer a son argument, c'est-a-dire que la variable ae sera unifiee a cette environnement. <p> De plus, ces lois pourraient servir dans un processus d'optimisation de l'interpretation monadique reflexive. Comme il a ete demontre que les lois generales des monades (section 2) peuvent servir a une certaine optimisation monadique (Liang <ref> [LH96] </ref>), il serait interessant de voir si les lois de la reflexion monadique peuvent contribuer, de leur cote, a l'optimisation de l'interpretation monadique reflexive.
Reference: [LHJ95] <author> Liang (Sheng), Hudak (Paul) et Jones (Mark). </author> <title> Monad transformers and modular interpreters. </title> <booktitle> In : Conference Record of POPL '95 : 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 333-343. </pages> - <address> San Francisco, California, </address> <year> 1995. </year>
Reference-contexts: Nous avons remarque que la semantique CPS consideree par Filinski est aussi une semantique monadique ou, dans ce cas, la monade d'interpretation est K (M ) (K ( ) est le constructeur monadique 2 CPS <ref> [LHJ95] </ref>). <p> La notation monadique possede plusieurs formulations equivalentes [DKM91]. Nous avons adopte la formulation developpee par Wadler [Wad92]. Notons qu'il y a une fonction monadique appartenant a une autre formulation qui nous sera utile 4 Ce dernier nom est une traduction libre des termes plus courants then <ref> [LHJ95] </ref> et bind [Wad92]. 2 R EFLEXION MONADIQUE G EN ERALE 7 pour la reflexion. <p> Entendons-nous pour exprimer, en un tout, le constructeur et l'ensemble de ces fonctions essentielles par un tuple de la forme T = hT ( ); j; ?; a 5 En anglais, cette fonction se nomme o lift AE <ref> [LHJ95] </ref> ou o promote AE [Pat95]. 2 R EFLEXION MONADIQUE G EN ERALE 8 Dans le cas de l'interprete de la figure 2, il y a deux o effets AE monadiques 6 principaux qui peuvent ^etre profitables pour la reflexion. <p> La figure 3 presente cette relation. ej f = f ? (j ffi j m ) a Fig. 3: Definition des fonctions monadiques reflexives L'unite et le multiplicateur reflexifs dependent de l'unite, de la sequence et de l'ascenseur du constructeur. Ces fonctions ne sont donc pas essentielles. Liang <ref> [LHJ95] </ref> a montre, du point de vue de la programmation, comment combiner les constructeurs monadiques. 7 . Il est donc simple d'obtenir les fonctions reflexives de la composition de deux constructeurs en utilisant les fonctions monadiques essentielles du constructeur compose. <p> Ses interpretes gardent toujours un parametre pour l'environnement bien que ce dernier soit utilise seulement dans certains cas precis (comme pour l'abstraction et l'application). Pour ce probleme, Liang et al. <ref> [LHJ95] </ref> ont propose l'ajout de deux nouvelles fonctions mo-nadiques rdEnv et inEnv permettant de decrire la gestion de l'environnement sans une presence explicite et globale de ce dernier. Pour une monade M , la fonction rdEnv est de type M Env ou Env represente le type environnement. <p> En figure 9, le constructeur monadique CPS K = hK; j k ; ? k ; a k i est defini pour toutes ses fonctions essentielles. On retrouve cette definition, par exemple, dans les travaux de Liang <ref> [LHJ95] </ref>. <p> Nous savons deja comment definir semantiquement cet operateur sachant que la monade d'interpretation est CPS <ref> [LHJ95] </ref> puisque 4 R EFLEXION MONADIQUE CPS 15 cela revient exactement a une interpretation CPS. <p> Seuls les indices changent. C'est la force de la semantique monadique. C'est pour cette raison que nous ne presentons pas la semantique en question. Par contre, en figure 11, nous avons reproduit la definition du constructeur monadique S <ref> [LHJ95] </ref>. Rappelons que les fonctions monadiques sans indice appartiennent a la monade M . <p> Pour ce faire, il faut se rappeler les lois bien connues des fonctions monadiques standards. En figure 14, les lois des fonctions monadiques unite, sequence et ascenseur sont presentes. Ces lois sont connus et on les trouve dans les travaux de Liang <ref> [LHJ95] </ref> et de Paterson [Pat95] par exemple. La loi 9 est appelee unite gauche, la loi 10, unite droite et la loi 11, l'associativite. Ces trois lois appartiennent a la monade plus precisement. <p> Nous croyons donc que la reflexion monadique contribue au rapprochement de la programmation fonctionnelle et de la programmation a objets. 11.3 Constructeur d'interpretes monadiques reflexifs La theorie de la reflexion monadique est relativement simple. Il serait alors faisable de developper un systeme comparable a l'interprete modulaire de Liang <ref> [LHJ95] </ref> qui puisse tenir compte de cer-taines specifications choisies par l'usager. Suivant ces specifications, ce systeme pourrait construire automatiquement un interprete avec reflexion monadique.
Reference: [MF96] <author> Mendhekar (A.) et Friedman (D. P.). </author> <title> An exploration of relationships between reflective theories. </title> <booktitle> In : Proceedings of Reflection'96. </booktitle>
Reference-contexts: Les resultats et innovations qui suivent viennent essentiellement de l'analyse de deux articles, le premier de Filinski [Fil94] et le second de Mendhekar & Friedman <ref> [MF96] </ref>. Filinski a invente le concept de reflexion monadique et Mendhekar & Friedman ont tente d'etablir une relation entre celle-ci, la reflexion comportementale et la logique de la reflexion au sens de Tarski. <p> M^eme Mendhekar & Friedman <ref> [MF96] </ref> avait adopte sa definition pour creer ses o monades reflexives AE . Nos travaux demontrent que les continuations composables se sont pas necessaires. <p> Elle alourdit inutilement les notations. Toutefois, cette representation devient necessaire au niveau pratique parce qu'il est rare que la syntaxe du langage defini soit la m^eme que la syntaxe du meta-langage. Mendhekar & Friedman <ref> [MF96] </ref> ont indirectement etudie la maniere d'exprimer le scheme de representation de facon uniforme et abstraite. Pour ce faire, ils ont conjecture, d'un point de vue plus general que la reflexion monadique pouvait ^etre comprise dans le cadre de l'isomorphisme de Curry-Howard [How80]. <p> L'operateur de reification (") ressemble a l'operateur designe du m^eme symbole dans l'article de Mendhekar & Friedman <ref> [MF96, section 7] </ref>. Toutefois, leur difference n'est pas facile a comprendre etant donne que celui de Mendhekar & Friedman est vaguement defini.
Reference: [Mog89] <author> Moggi (E.). </author> <title> Computational lambda-calculus and monads. </title> <booktitle> In : 4th LICS Conference. IEEE. </booktitle>
Reference-contexts: L'interpretation de celles-ci se fait tout simplement par les fonctions monadiques unite j et multiplicateur de la monade T (M ). Ce resultat a ete montre par Filinski [Fil94, section 2.1] suivant les travaux plus abstrait de Moggi <ref> [Mog89] </ref>. Ces operateurs sont particuliers parce qu'ils ne dependent pas de la monade M mais simplement du constructeur T . C'est pour cette raison que nous avons ecrit ces operateurs reflexifs sans indice contrairement aux deux autres.
Reference: [Mog91] <author> Moggi (E.). </author> <title> Notions of computation and monads. </title> <journal> Information and Computation, </journal> <volume> vol. 93, n 1, </volume> <year> 1991. </year>
Reference-contexts: la monade M ) pour un langage avec reflexion monadique et la semantique CPS (modifiee) du m^eme langage (ou le type des reponses finales est fonction 1 Nous avons choisi la notation des fleches qui est plus pratique pour decrire la reflexion contrairement a ceux de Filinski et de Moggi <ref> [Mog91] </ref> : [ ] pour la reification et pour la reflexion. 2 R EFLEXION MONADIQUE G EN ERALE 5 de la monade M ).
Reference: [Mog92] <author> Mogensen (Torben AE.). </author> <title> Efficient self-interpretation in lambda calculus. </title> <booktitle> Functional Programming, </booktitle> <volume> vol. 2, n 3, </volume> <month> juillet </month> <year> 1992, </year> <pages> pp. 345-364. </pages>
Reference-contexts: Pour regler ce probleme, pourquoi ne pas adopter le scheme de representation venant des travaux de Mogensen <ref> [Mog92] </ref> sur l'interpretation du -calcul se rapprochant d'une syntaxe abstraite d'ordre superieur. Cela a l'effet de creer une abstraction d'une variable representant une fonction servant a la modification de la valeur (l'effet) interessante.
Reference: [Pat95] <editor> Paterson (Ross). </editor> <booktitle> Notes on monads for functional programming. </booktitle> <month> August </month> <year> 1995. </year> <institution> "san-tos.doc.ic.ac.uk/pub/papers/R.Paterson/monads.dvi.gz". R EF ERENCES 45 </institution>
Reference-contexts: Entendons-nous pour exprimer, en un tout, le constructeur et l'ensemble de ces fonctions essentielles par un tuple de la forme T = hT ( ); j; ?; a 5 En anglais, cette fonction se nomme o lift AE [LHJ95] ou o promote AE <ref> [Pat95] </ref>. 2 R EFLEXION MONADIQUE G EN ERALE 8 Dans le cas de l'interprete de la figure 2, il y a deux o effets AE monadiques 6 principaux qui peuvent ^etre profitables pour la reflexion. <p> Du point de vue methodologique, l'environnement necessaire peut ^etre represente par une monade. Par contre, il n'est pas clair comment presenter la gestion de cette element contex 7 Rappelons que, contrairement aux monades, les constructeurs monadiques sont composables <ref> [Pat95] </ref> naturelle-ment. 3 GESTION EXPLICITE DE L'ENVIRONNEMENT 10 tuel dans le code de l'interprete monadique sans le rendre un parametre obligatoire a l'interprete en question. Pour de tels interpretes, l'environnement est un element de controle o manipule AE par l'interprete de facon explicite. <p> Pour ce faire, il faut se rappeler les lois bien connues des fonctions monadiques standards. En figure 14, les lois des fonctions monadiques unite, sequence et ascenseur sont presentes. Ces lois sont connus et on les trouve dans les travaux de Liang [LHJ95] et de Paterson <ref> [Pat95] </ref> par exemple. La loi 9 est appelee unite gauche, la loi 10, unite droite et la loi 11, l'associativite. Ces trois lois appartiennent a la monade plus precisement. <p> La loi 9 est appelee unite gauche, la loi 10, unite droite et la loi 11, l'associativite. Ces trois lois appartiennent a la monade plus precisement. Les deux dernieres lois viennent du fait que a est une transformation de monades dans les termes de la theorie des categories <ref> [Pat95] </ref>. 8 LOIS DE LA R EFLEXION MONADIQUE 23 (j a) ? k = k a (9) t ? (a : (k a) ? h) = (t ? k) ? h (11) ffi j m = j (12) (t ? m k) = ( t) ? ( ffi k) (13) Fig.
Reference: [Ste94] <author> Steele, Jr. (Guy L.). </author> <title> Building interpreters by composing monads. </title> <booktitle> In : Conference Record of POPL '94 : 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 472-492. </pages> - <address> Portland, Oregon, </address> <year> 1994. </year>
Reference-contexts: Si l'on ajoute la reflexion monadique, cet element se retrouve modifie autant par l'interprete que par l'usager du langage. Comment decrire alors la gestion de l'environ-nement sans en o parler AE directement (sans rendre l'environnement un parametre explicite) ? Steele <ref> [Ste94] </ref> s'etait pose cette question et etait reste insatisfait de son resultat. Ses interpretes gardent toujours un parametre pour l'environnement bien que ce dernier soit utilise seulement dans certains cas precis (comme pour l'abstraction et l'application).
Reference: [Tar44] <author> Tarski (Alfred). </author> <title> The semantic conception of truth. </title> <journal> Philos. Phenomenological Research, </journal> <volume> vol. 4, </volume> <year> 1944, </year> <pages> pp. 13-47. </pages>
Reference-contexts: Tandis qu'un terme sans effet de type ff peut constituer une preuve de la proposition ff. Se fiant sur cette dualite et sur les bi-conditions de Tarski <ref> [Tar44] </ref>, ils ont pu introduire leur principe de la reflexion ce qui donne plus ou moins les regles de type suivantes. p : A T -introduction et + p : A T elimination Cette correspondance presente effectivement une dualite valeur versus representation mais elle a toutefois quelque chose de choquant du
Reference: [Wad92] <author> Wadler (P. L.). </author> <title> The essence of functional programming. </title> <booktitle> In : Proceedings of the 19th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Albuquerque, NM, </address> <pages> pp. 1-14. </pages>
Reference-contexts: Ces fonctions servent a la gestion de la monade T (M ) en cours de l'evaluation des -termes. La notation monadique possede plusieurs formulations equivalentes [DKM91]. Nous avons adopte la formulation developpee par Wadler <ref> [Wad92] </ref>. Notons qu'il y a une fonction monadique appartenant a une autre formulation qui nous sera utile 4 Ce dernier nom est une traduction libre des termes plus courants then [LHJ95] et bind [Wad92]. 2 R EFLEXION MONADIQUE G EN ERALE 7 pour la reflexion. <p> La notation monadique possede plusieurs formulations equivalentes [DKM91]. Nous avons adopte la formulation developpee par Wadler <ref> [Wad92] </ref>. Notons qu'il y a une fonction monadique appartenant a une autre formulation qui nous sera utile 4 Ce dernier nom est une traduction libre des termes plus courants then [LHJ95] et bind [Wad92]. 2 R EFLEXION MONADIQUE G EN ERALE 7 pour la reflexion. <p> Nous avons presente les lois de la reflexion monadique. Enfin, nous avons discute de la question du scheme de representation des entites monadiques au niveau du langage defini. 11.1 Reutilisation des operateurs de controle monadique La programmation monadique connue jusqu'a maintenant (depuis Wadler <ref> [Wad92] </ref>) a permis la construction d'interpretes monadiques. L'avantage de tels interpretes est la separation de la structure essentielle de l'interprete et des differentes structures de donnees administrees par l'interprete ajoutant ou changeant d'une maniere ou d'une autre le comportement de l'interprete. <p> En appendice D, les differentes fonctions d'interpretation de base (generales) seront presentes. Prendre note que le style et la syntaxe de programmation utilises ressemblent beaucoup a ceux de l'article celebre de Wadler o The essence of functional programming AE <ref> [Wad92] </ref>. Enfin, nous nous excusons pour l'anglais dans les commentaires.
Reference: [Wad94] <author> Wadler (Philip). </author> - <title> Monads and composable continuations. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> vol. 7, n 1, </volume> <year> 1994, </year> <pages> pp. 39-55. </pages>
Reference-contexts: La monade d'interpretation sera alors de la forme K (M ) fl = (fl ! M O) ! M O ou O est le type des reponses finales c'est-a-dire un type contenant toutes les valeurs denotables. Ce type est d^u a Wadler <ref> [Wad94] </ref>. Les regles de type pour ce langage s'exprime comme dans le cas general. Ces regles sont en figure 7 et 7. <p> Pour l'instant, ces fonctions doivent ^etre combinees o manuellement AE ce qui est un peu complique. 11 CONCLUSION 34 11.4 Analyse des types de la reflexion monadique Plusieurs chercheurs ont travaille sur le rapport entre continuation composable et monades <ref> [Wad94] </ref>.
References-found: 18

