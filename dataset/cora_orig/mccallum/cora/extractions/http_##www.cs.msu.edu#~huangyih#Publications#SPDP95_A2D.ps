URL: http://www.cs.msu.edu/~huangyih/Publications/SPDP95_A2D.ps
Refering-URL: http://www.cs.msu.edu/~huangyih/Publications/index.html
Root-URL: http://www.cs.msu.edu
Email: Email: fhuangyih, mckinleyg@cps.msu.edu  
Title: An Adaptive Global Reduction Algorithm for Wormhole-Routed 2D Meshes Previously known asymptotically optimal algorithms with
Author: Yih Huang and Philip K. McKinley O( 
Note: p  and O(  that the  formance is negligible.  
Address: East Lansing, Michigan 48824  
Affiliation: Department of Computer Science Michigan State University  
Abstract: This paper presents a global reduction algorithm for wormhole-routed 2D meshes. Well-known reduction algorithms that are optimized for short vectors have complexity O(M log N ), where N = n fi n is the number of nodes, and M the vector length. Algorithms The proposed algorithm adapts to the given vector length, resulting in complexities O(M log N ) for short vectors, O(log N +M ) for medium-sized vectors, N + M ) version is preferred to the O(log N + M ) version for long vectors, due to its small coefficient associated with M; the dominating factor for such vectors. The algorithm is contention-free in a synchronous environment. Under asynchronous execution models, depth contention (contention among message-passing steps) may occur. Our simulation studies show suitable for long vectors have complexity O(
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. J. Dally and C. L. Seitz, </author> <title> "Deadlock-free message routing in multiprocessor interconnection networks," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-36, </volume> <pages> pp. 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Modern massively parallel computers (MPCs) are characterized by the use of wormhole-routed switching <ref> [1] </ref>, in which messages are divided into very small units, called flits, and pipelined through the network. Each link along the path from the source to the destination of a message is seized by a header flit and held by the message until a trailer flit passes over it.
Reference: [2] <author> P. K. McKinley, H. Xu, A.-H. Esfahanian, and L. M. Ni, </author> <title> "Unicast-Based Multicast Communication in Wormhole-Routed Direct Networks," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 5, </volume> <pages> pp. 1254-1265, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Moreover, simulation reveals that contention has negligible effect on performance under an asynchronous execution model, in which messages from different communication steps might interfere with one another (referred to as depth contention <ref> [2] </ref>). The A2D-R algo rithm can be generalized to handle non-square meshes and non-power-of-2 mesh widths. The remainder of the paper is organized as follows. Section 2 defines the system model for which the A2D-R algorithm is designed. <p> Executed asynchronously, the algorithm may incur depth contention | messages generated in different communication steps interfere with one another <ref> [2] </ref>. The behavior of the algorithm under the asynchronous execution model is studied through simulation and is discussed in Section 6.
Reference: [3] <author> M. Barnett, L. Shuler, R. van de Geijn, S. Gupta, D. G. Payne, and J. Watts, </author> <title> "Interprocessor collective communication library (InterCom)," </title> <booktitle> in Scalable High Performance Computing Conference, </booktitle> <year> 1994. </year>
Reference-contexts: The distance term fid is usually small compared to the other terms. Although the effects of the distance term depend on the values of ff, fi, m, and N (mesh size), many researchers have adopted the simplified cost model, ff + fim <ref> [3, 4, 5] </ref>. The accuracy of this simplification in the context of our proposed algorithm will be justified through simulation. 3 Building-Block Algorithms The proposed A2D-R algorithm is constructed by carefully combining previously known algorithms for 1D-array combine, reduction, and data distribution. This section reviews these component algorithms. Tree-Based Reduction. <p> can safely conclude that, although the distance factor and depth contention under synchronous execution model are ignored in the analysis, the predicted performance of the proposed A2D-R al gorithm is very close to the simulated results. 7 Related Work This research was inspired by the work of Barnett, et al. <ref> [3, 4] </ref>. The problem of coping with variable vector lengths, in the context of global reduction, is studied in [4, 8]. Specifically, six reduction algorithms for wormhole-routed 2D meshes are discussed in [4]. <p> Two contention-free hybrid algorithms, which use other component algorithms, are presented in [4]. They either switch from one component algorithm to another when the vector length exceeds a threshold, or apply one component algorithm along one dimension and another one along the other dimension. The InterCom <ref> [3] </ref> communication library, designed for the Intel Paragon, addresses the issue of variable vector lengths by treating a 2D mesh as a higher-dimensional mesh and applying either a tree-based or bucket-based reduction along each dimension. The "virtual dimension" D is determined by heuristic.
Reference: [4] <author> M. Barnett, R. Littlefield, D. G. Payne, and R. A. van de Geijn, </author> <title> "Global combine algorithms for 2-D meshes with wormhole routing," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 24, no. 2, </volume> <year> 1995. </year>
Reference-contexts: The distance term fid is usually small compared to the other terms. Although the effects of the distance term depend on the values of ff, fi, m, and N (mesh size), many researchers have adopted the simplified cost model, ff + fim <ref> [3, 4, 5] </ref>. The accuracy of this simplification in the context of our proposed algorithm will be justified through simulation. 3 Building-Block Algorithms The proposed A2D-R algorithm is constructed by carefully combining previously known algorithms for 1D-array combine, reduction, and data distribution. This section reviews these component algorithms. Tree-Based Reduction. <p> This section reviews these component algorithms. Tree-Based Reduction. We consider a refinement to the well-known spanning-binomial tree | the bidirectional spanning binomial tree (BSBT). A BSBT is the union of two oppositely-directed SBTs, and BSBT reduction (BSBT-R) is a simple generalization of the SBT reduction <ref> [6, 4] </ref>. An example of the BSBT-R algorithm executed on an 8-node array is shown in for half the vector elements. The BSBT-R consists of two stages: BSBT combine (BSBT-C) and BSBT distribution (BSBT-D). <p> This algorithm is optimized for short vectors. The execution time of the algorithm is shown in [7] to be T BSBT2D-R (1) = 4ff log n + 2fiM log n + flM log n: The second algorithm is a 2D bucket reduction algorithm presented in <ref> [4] </ref>. We refer to this algorithm as B2D-R, whose execution time is T B2D-R = 4ff (n 1) + 2fi n n 1 M: These coefficients are optimal for sufficiently long vectors [4]. Figure 6 compares the performance of the three candidate algorithm on a 16 fi 16 mesh. <p> 2fiM log n + flM log n: The second algorithm is a 2D bucket reduction algorithm presented in <ref> [4] </ref>. We refer to this algorithm as B2D-R, whose execution time is T B2D-R = 4ff (n 1) + 2fi n n 1 M: These coefficients are optimal for sufficiently long vectors [4]. Figure 6 compares the performance of the three candidate algorithm on a 16 fi 16 mesh. At the left side of the figure, where vectors are short, BSBT2D-R and A2D-R have exactly the same performance. <p> The B2D-R algorithm does not perform as well as the other two for short or medium-length vectors, due to its 4ff (n 1) startup latencies, and cannot be applied when the vector length is less than 256 due to its method of vector segmentation <ref> [4] </ref>. As vector length is increased, the B2D-R algorithm catches up and, after M &gt; 400, outperforms the BSBT2D-R algorithm. B2D-R eventually outperforms the A2D-R algorithm also, when the number of vector elements reaches 8000. <p> can safely conclude that, although the distance factor and depth contention under synchronous execution model are ignored in the analysis, the predicted performance of the proposed A2D-R al gorithm is very close to the simulated results. 7 Related Work This research was inspired by the work of Barnett, et al. <ref> [3, 4] </ref>. The problem of coping with variable vector lengths, in the context of global reduction, is studied in [4, 8]. Specifically, six reduction algorithms for wormhole-routed 2D meshes are discussed in [4]. <p> The problem of coping with variable vector lengths, in the context of global reduction, is studied in <ref> [4, 8] </ref>. Specifically, six reduction algorithms for wormhole-routed 2D meshes are discussed in [4]. <p> The problem of coping with variable vector lengths, in the context of global reduction, is studied in [4, 8]. Specifically, six reduction algorithms for wormhole-routed 2D meshes are discussed in <ref> [4] </ref>. Among the six algorithms, the one optimized for short vectors is a 2D version of the SBT-based reduction, 5 three reduction algorithms on a 16 fi 16 mesh. and the one optimal for long vectors is the B2D-R algorithm discussed in Section 6. <p> Two contention-free hybrid algorithms, which use other component algorithms, are presented in <ref> [4] </ref>. They either switch from one component algorithm to another when the vector length exceeds a threshold, or apply one component algorithm along one dimension and another one along the other dimension.
Reference: [5] <author> J. Bruck, L. de Coster, N. DeWulf, C.-T. Ho, and R. Lauwereins, </author> <title> "On the design and implementation of broadcast and global combine operations using the postal model," </title> <booktitle> in Proceedings of the 1994 Symposium on Parallel and Distributed Processing, </booktitle> <pages> pp. 594-602, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The distance term fid is usually small compared to the other terms. Although the effects of the distance term depend on the values of ff, fi, m, and N (mesh size), many researchers have adopted the simplified cost model, ff + fim <ref> [3, 4, 5] </ref>. The accuracy of this simplification in the context of our proposed algorithm will be justified through simulation. 3 Building-Block Algorithms The proposed A2D-R algorithm is constructed by carefully combining previously known algorithms for 1D-array combine, reduction, and data distribution. This section reviews these component algorithms. Tree-Based Reduction.
Reference: [6] <author> S. L. Johnsson and C.-T. Ho, </author> <title> "Optimum broadcasting and personalized communication in hyper-cubes," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-38, </volume> <pages> pp. 1249-1268, </pages> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: This section reviews these component algorithms. Tree-Based Reduction. We consider a refinement to the well-known spanning-binomial tree | the bidirectional spanning binomial tree (BSBT). A BSBT is the union of two oppositely-directed SBTs, and BSBT reduction (BSBT-R) is a simple generalization of the SBT reduction <ref> [6, 4] </ref>. An example of the BSBT-R algorithm executed on an 8-node array is shown in for half the vector elements. The BSBT-R consists of two stages: BSBT combine (BSBT-C) and BSBT distribution (BSBT-D).
Reference: [7] <author> Y. Huang and P. K. McKinley, </author> <title> "An adaptive global reduction algorithm for wormhole-routed 2d meshes," </title> <type> Tech. Rep. </type> <institution> CPS-95-11, Department of Computer Science, Michigan State University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: The BSBT-D stage is a bidirectional recursively doubling, with each direction responsible for half the elements of the combined vector. It is shown in <ref> [7] </ref> that the total execution time of the BSBT-R algorithm is T BSBT-R = 2ff log n + fiM log n + 1 flM log n: (1) Readers interested in a more detailed description of the BSBT-R algorithm may refer to [7]. <p> It is shown in <ref> [7] </ref> that the total execution time of the BSBT-R algorithm is T BSBT-R = 2ff log n + fiM log n + 1 flM log n: (1) Readers interested in a more detailed description of the BSBT-R algorithm may refer to [7]. This algorithm may perform well for short vectors due to its (2 log n) startup latencies, but poorly for long vectors, where the more critical factor M is magnified by log n. Bucket Reduction. <p> The algorithm can also be generalized to work with non-square meshes. The generalization, however, is more involved, and its presentation is omitted. Please refer to <ref> [7] </ref> for details. 6 Simulation Results The performance analysis in the previous sections does not take into account two factors: depth contention and the distance between the source and the destination of a message. <p> The first algorithm is a 2D version of the BSBT-R algorithm. This BSBT2D-R algorithm applies the BSBT-R algorithm to rows and then columns of a 2D mesh. This algorithm is optimized for short vectors. The execution time of the algorithm is shown in <ref> [7] </ref> to be T BSBT2D-R (1) = 4ff log n + 2fiM log n + flM log n: The second algorithm is a 2D bucket reduction algorithm presented in [4]. <p> B2D-R eventually outperforms the A2D-R algorithm also, when the number of vector elements reaches 8000. For the simulated 16 fi 16 mesh, the ratio of A2D-R execution time to B2D-R execution time is 1.135 for extremely large M (64000). In an earlier study <ref> [7] </ref>, we found the upper bound of the ratio to be 1.25. We formulated the relative error of the predicted execution time by Simulated time T A2D-R 1, and found the relative errors to range from 0.000096 to 0.0186.
Reference: [8] <author> M. Barnett, R. Littlefield, D. G. Payne, and R. A. van de Geijn, </author> <title> "Global combine on mesh architectures with wormhole routing," </title> <booktitle> in Proceedings of the 7th International Parallel Processing Symposium, </booktitle> <address> (Newport Beach, CA), </address> <month> April 13-16 </month> <year> 1993. </year>
Reference-contexts: Bucket Reduction. An alternative to a tree-based algorithm is to divide vectors into segments, or "buckets," and cycle the buckets around the 1-D array. Transmissions and computations take place on individual segments, instead of the entire vector. This algorithm is referred to as bucket reduction (B-R) in the literature <ref> [8] </ref> and consists of two stages: 1. Bucket Combine (B-C). This stage comprises n1 communication steps, each of which sends subvec-tors (or segments) of length M=n to an adjacent node and combines the received segment with the corresponding local segment. <p> The problem of coping with variable vector lengths, in the context of global reduction, is studied in <ref> [4, 8] </ref>. Specifically, six reduction algorithms for wormhole-routed 2D meshes are discussed in [4].
Reference: [9] <author> P. K. McKinley and C. Trefftz, "MultiSim: </author> <title> A tool for the study of large-scale multiprocessors," </title> <booktitle> in Proc. 1993 International Workshop on Modeling, Analysis and Simulation of Computer and Telecommunication Networks (MASCOTS), </booktitle> <pages> pp. 57-62, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: In order to study the effects of these factors, to account for real system characteristics, and to compare the performance of the various algorithms, a simulation study was conducted. As part of the an earlier project, we have developed a simulation tool called MultiSim <ref> [9] </ref> for the study of large-scale multiprocessors. MultiSim is based on an event-driven simulation package, CSIM [10]. To simulate the proposed algorithm in a realistic setting, we adopted the architectural parameters of the Intel Delta machine, for which ff = 72sec, and the flit transmission time is 0:08sec.
Reference: [10] <author> H. D. Schwetman, "Csim: </author> <title> A C-based, process-oriented simulation language," </title> <type> Tech. Rep. </type> <institution> PP-080-85, Microelectronics and Computer Technology Corporation, </institution> <year> 1985. </year> <month> 6 </month>
Reference-contexts: As part of the an earlier project, we have developed a simulation tool called MultiSim [9] for the study of large-scale multiprocessors. MultiSim is based on an event-driven simulation package, CSIM <ref> [10] </ref>. To simulate the proposed algorithm in a realistic setting, we adopted the architectural parameters of the Intel Delta machine, for which ff = 72sec, and the flit transmission time is 0:08sec. Each vector element is an 8-byte double-precision floating number.
References-found: 10

