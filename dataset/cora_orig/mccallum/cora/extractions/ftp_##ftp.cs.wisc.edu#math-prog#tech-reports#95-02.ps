URL: ftp://ftp.cs.wisc.edu/math-prog/tech-reports/95-02.ps
Refering-URL: http://www.cs.wisc.edu/math-prog/tech-reports/
Root-URL: 
Title: AN *-RELAXATION ALGORITHM FOR CONVEX NETWORK FLOW PROBLEMS  
Author: RENATO DE LEONE ROBERT R. MEYER AND ARMAND ZAKARIAN 
Abstract: A relaxation method for separable convex network flow problems is developed that is well-suited for problems with large variations in the magnitude of the nonlinear cost terms. The arcs are partitioned into two sets, one of which contains only arcs corresponding to strictly convex costs. The algorithm adjusts flows on the other arcs whenever possible, and terminates with primal-dual pairs that satisfy complementary slackness on the strictly convex arc set and *-complementary slackness on the remaining arcs. An asynchronous parallel variant of the method is also developed. Computational results demonstrate that the method is significantly more efficient on ill-conditioned networks than existing methods, solving problems with several thousand nonlinear arcs in one second or less. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bertsekas, Dimitri P., Patrick A. Hosein & Paul Tseng (1987), </author> <title> `Relaxation methods for network flow problems with convex arc costs', </title> <journal> SIAM Journal on Control and Optimization 25(5), </journal> <pages> 1219-1243. </pages>
Reference-contexts: This approach differs from that of <ref> (Bertsekas, Hosein & Tseng 1987) </ref> in that it divides the arcs into two sets and focuses on changing single node prices and flows on arcs incident to single nodes. In Step 1 below, a node i with positive surplus is identified. <p> Hence from some point on no new arcs are added to the admissible network. This together with its acyclicity guarantees that Algorithm 1 terminates finitely. The pair (x fl ; fl ) computed by Algorithm 1 is nearly optimal. The following two lemmas (Corollary 3.1 and Proposition 3.6 from <ref> (Bertsekas et al. 1987) </ref>, respectively) give the precise statement. In them, f (x) and q () are used to denote the primal and dual objective values of (1): f (x) := (i;j)2A q () := T b (i;j)2A ij ( i j ): Lemma 3.5. <p> The results for the first and third groups are comparable (after taking into account the computer performance differential) to those reported in <ref> (Bertsekas et al. 1987) </ref> for similarly modified NET-GEN problems. However, the method of (Bertsekas et al. 1987) had difficulties solving problems similar to "50% large quadratic/50% small quadratic," being more than five times slower for them compared to the corresponding "50% linear/50% quadratic" problems. <p> The results for the first and third groups are comparable (after taking into account the computer performance differential) to those reported in <ref> (Bertsekas et al. 1987) </ref> for similarly modified NET-GEN problems. However, the method of (Bertsekas et al. 1987) had difficulties solving problems similar to "50% large quadratic/50% small quadratic," being more than five times slower for them compared to the corresponding "50% linear/50% quadratic" problems.
Reference: <author> Bertsekas, D.P. </author> <year> (1991), </year> <title> Linear Network Optimization:Algorithms and Codes, </title> <publisher> The MIT Press, </publisher> <address> Cam-bridge, Massachusetts. </address>
Reference-contexts: Let x be any optimal solution of (1). Then for every (i; j) 2 A d ij jx fl Proof. Fix (i; j) 2 A and assume that x fl ij 6= x ij . According to the Conformal Realization Theorem <ref> (Bertsekas 1991) </ref> x fl x can be decomposed into a sum of conforming simple cycle flows. Let Y be any of the cycles containing (i; j). <p> One way of enforcing Assumption 3.1 in practice is to consider the nodes in Step 1 in some fixed order that includes all nodes in N . A more economical solution is used in the linear code *-RELAX <ref> (Bertsekas 1991) </ref>. There the nodes that have positive surplus are kept in a queue. <p> The computational results in Section 5 demonstrate that the performance of the algorithm for nonlinear problems is significantly improved by mixing both "up" and "down" iterations. The above assumption can be computationally checked by using a device similar to the one used in the code *-RELAX-N <ref> (Bertsekas 1991) </ref>. For a node i, let p k i be the number of "up" iterations executed at node i before iteration number k.
Reference: <author> Bertsekas, </author> <title> D.P. & J.N. Tsitsiklis (1989), Parallel and Distributed Computation, </title> <publisher> Prentice Hall, </publisher> <address> Engle-wood Cliffs, New Jersey. </address>
Reference-contexts: It is possible to define in a 8 symmetrical way a "down" iteration which starts by selecting a node with negative surplus and may decrease its price. <ref> (Bertsekas & Tsitsiklis 1989) </ref> has an example of the *-relaxation algorithm cycling if "up" and "down" iterations are mixed arbitrarily. If we assume, however, that either the number of "up" iterations or the number of "down" iterations started at any given node is finite, cycling cannot occur. <p> As the algorithm progresses, the difference between the two nodes' estimates of the flow approaches zero. This algorithm may be viewed as a generalization of the totally asynchronous algorithm for linear network flow problems of <ref> (Bertsekas & Tsitsiklis 1989) </ref>, to nonlinear cost functions.
Reference: <author> Collins, M., L. Cooper, R. Helgason, J. Kennington & L. </author> <title> LeBlanc (1978), `Solving the pipe network analysis problem using optimization techniques', </title> <booktitle> Management Science 24, </booktitle> <pages> 747-760. </pages>
Reference-contexts: Networks with nonlinear objectives arise in a variety of applications including electrical networks (Hu 1966), pipeline networks <ref> (Collins, Cooper, Helgason, Ken-nington & LeBlanc 1978) </ref>, urban traffic flow (Magnanti 1984) and communications networks (Monma & Segal 1982). We make the following assumptions with regard to the functions f ij . Assumption 1.1.
Reference: <author> Hu, T.C. </author> <year> (1966), </year> <title> `Minimum cost flows in convex cost networks', </title> <journal> Naval Research Logistics Quarterly 13, </journal> <pages> 1-9. </pages>
Reference-contexts: Networks with nonlinear objectives arise in a variety of applications including electrical networks <ref> (Hu 1966) </ref>, pipeline networks (Collins, Cooper, Helgason, Ken-nington & LeBlanc 1978), urban traffic flow (Magnanti 1984) and communications networks (Monma & Segal 1982). We make the following assumptions with regard to the functions f ij . Assumption 1.1.
Reference: <author> Kamesam, P.V. </author> & <title> R.R. Meyer (1984), `Multipoint methods for separable nonlinear networks', </title> <booktitle> Mathematical Programming Study 22, </booktitle> <pages> 185-205. </pages>
Reference-contexts: We also present the solution times for the smaller test problems using the piecewise linear approximation algorithm for separable convex network flow problems <ref> (Kamesam & Meyer 1984) </ref>.
Reference: <author> Klingman, D., A. Napier & J. </author> <title> Stutz (1974), `NETGEN|A program for generation large-scale (un)capacitated assignment, transportation and minimum cost network problems', </title> <booktitle> Management Science 20, </booktitle> <pages> 814-822. </pages>
Reference-contexts: given by max fi fi b i j2ffi + (i) ij + j2ffi (i) ji fi 11 The computed objective value was accurate to nearly ten significant digits: fi fi f (x fl ) q ( fl ) fi fi We obtained our test problems by modifying the standard NETGEN <ref> (Klingman, Napier & Stutz 1974) </ref> problems 1-10 and 16-25. The first ten problems are transportation problems while the rest are transshipment problems. The transshipment problems differ in number of transshipment sources and sinks, percentage of capaci-tated arcs and size of upper bounds.
Reference: <author> Magnanti, T.L. </author> <year> (1984), </year> <title> Models and algorithms for predicting urban traffic equilibria, </title> <editor> in M.Florian, ed., </editor> <title> `Transportation planning models', </title> <publisher> North-Holland, Amsterdam, </publisher> <pages> pp. 153-186. </pages>
Reference-contexts: Networks with nonlinear objectives arise in a variety of applications including electrical networks (Hu 1966), pipeline networks (Collins, Cooper, Helgason, Ken-nington & LeBlanc 1978), urban traffic flow <ref> (Magnanti 1984) </ref> and communications networks (Monma & Segal 1982). We make the following assumptions with regard to the functions f ij . Assumption 1.1.
Reference: <author> Monma, C.L. & M. </author> <title> Segal (1982), `A primal algorithm for finding minimum-cost flows in capacitated networks with applications', </title> <journal> Bell System Technical Journal 61, </journal> <pages> 449-468. </pages> <month> Rockafellar, </month> <title> R.T (1970), Convex Analysis, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ. </address>
Reference-contexts: Networks with nonlinear objectives arise in a variety of applications including electrical networks (Hu 1966), pipeline networks (Collins, Cooper, Helgason, Ken-nington & LeBlanc 1978), urban traffic flow (Magnanti 1984) and communications networks <ref> (Monma & Segal 1982) </ref>. We make the following assumptions with regard to the functions f ij . Assumption 1.1. Each f ij is a closed proper convex function and the intersec tion of dom P with the set of vectors satisfying the constraints of (1) is nonempty. Assumption 1.2.
Reference: <author> Rockafellar, R.T. </author> <year> (1984), </year> <title> Network Flows and Monotropic Optimization, </title> <publisher> John Wiley & Sons, </publisher> <address> New York. Toint, Ph.L. & D. </address> <month> Tuyttens </month> <year> (1992), </year> <title> `LSNNO: a Fortran subroutine for solving large-scale nonlinear network opimization problems', </title> <journal> ACM Transactions on Mathematical Software 18(3), </journal> <pages> 308-328. </pages>
References-found: 10

