URL: http://iamwww.unibe.ch/~rvswww/Publikationen/TechReports/iam-95-010.ps.gz
Refering-URL: http://iamwww.unibe.ch/~rvswww/Publikationen/index.html
Root-URL: 
Title: Dealing with the complexity of state space exploration algorithms for SDL systems  
Author: Jens Grabowski, Rudolf Scheurer, Daniel Toggweiler and Dieter Hogrefe 
Address: Neubruckstrasse 10, CH-3012 Berne, Switzerland  
Affiliation: University of Berne, Institute for Informatics  
Abstract: The treatment of complexity is one of the main problems in the area of validation and verfication of formally specified protocols. The problem can be tackled by using heuristics, partial order simulation methods, and optimization strategies. We present these mechanisms and describe the way they work. Their usefulness will be discussed by presenting the results of some experiments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Godefroid. </author> <title> Partial-Order Methods for the Verification of Concurrent Systems An Approach to the State-Explosion Problem (Preliminary Version). </title> <type> PhD thesis, </type> <institution> Universite de Liege, Faculte des Sciences Appliquees, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: This means concurrency is introduced by indeterminism, i.e., the execution of an SDL specification is described by all interleaved traces of concurrently executed events. Related problems occurred in the area of protocol verification. They have been tackled by the development of partial order simulation methods <ref> [1, 9] </ref>. Partial order simulation methods attempt to limit the exploration of traces for concurrent executions. In the best case for each concurrent execution only one trace is generated. Subsequently, we developed two algorithms which adapt the ideas of partial order simulation methods to the needs of SDL.
Reference: [2] <author> J. Grabowski. </author> <title> Test Case Generation and Test Case Specification with Message Sequence Charts. </title> <type> PhD thesis, </type> <institution> University of Berne, Institute for Informatics and Applied Mathematics, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: In the final release of this paper we will present the results of experiments with the SSCOP 4 protocol. Our application area is the (semi-) automatic generation of test cases for formally specified protocols. Based on the SaMsTaG 5 method <ref> [2, 3, 10] </ref> a tool has been implemented. The generation of test cases can be looked at as a search problem within the state space of a specification. For each test case we search a system trace with specific properties which builds the basis for the test case description.
Reference: [3] <author> J. Grabowski, D. Hogrefe, and R. Nahm. </author> <title> Test Case Generation with Test Purpose Specification by MSCs. </title> <editor> In O. Faerge-mand and A. Sarma, editors, </editor> <title> SDL'93 Using Objects. </title> <publisher> North-Holland, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: In the final release of this paper we will present the results of experiments with the SSCOP 4 protocol. Our application area is the (semi-) automatic generation of test cases for formally specified protocols. Based on the SaMsTaG 5 method <ref> [2, 3, 10] </ref> a tool has been implemented. The generation of test cases can be looked at as a search problem within the state space of a specification. For each test case we search a system trace with specific properties which builds the basis for the test case description. <p> The test purpose was to test a data transfer with acknowledgment after the first transmission of the data package. All heuristics have been turned off during the search for unique pass observables (cf. <ref> [3, 10] </ref>). The results of this experiment are presented in Table 3. 4.4 Discussion The experiments have shown the usefulness of heuristics and partial order simulation methods for test case generation. However, the effects achieved by heuristics and partial order methods may need some discussion.
Reference: [4] <author> D. Hogrefe. Estelle, </author> <title> LOTOS und SDL Standard Spezifikationssprachen fur verteilte Systeme. </title> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The effects of these methods have been tested by means of the Inres protocol (cf. <ref> [4, 5] </ref>). The results of these experiments are described in this section. 4.2 Heuristics We have tested the mentioned heuristics and several combinations of them.
Reference: [5] <author> D. Hogrefe. </author> <title> OSI formal specification case study: The INRES protocol and service. </title> <type> Technical Report IAM-91-012, </type> <institution> University of Berne, </institution> <month> May </month> <year> 1991. </year> <month> Update May </month> <year> 1992. </year>
Reference-contexts: The effects of these methods have been tested by means of the Inres protocol (cf. <ref> [4, 5] </ref>). The results of these experiments are described in this section. 4.2 Heuristics We have tested the mentioned heuristics and several combinations of them.
Reference: [6] <author> G. </author> <title> Holzman. Design and Validation of Computer Protocols. </title> <publisher> Prentice-Hall International, Inc., </publisher> <year> 1991. </year>
Reference-contexts: Since a system may have an infinite amount of states, it is a little bit tricky to implement this heuristics. Holzmann presents this heuristics in <ref> [6] </ref>. Selection of states. The heuristics 'selection of states' selects a set of states of the specified system. Two types of this heuristics exist: 1. The positive type selects the states that may be reached during the simulation.
Reference: [7] <author> ISO/IEC JTC 1/SC 21 N. </author> <title> Information Technology Open Systems Interconnection Conformance Testing Methodology and Framework. International Multipart Standard 9646, </title> <address> ISO/IEC, </address> <year> 1992. </year>
Reference-contexts: For this purpose we integrated IPS and CLS into the SDL simulator of the SaMsTaG tool. The basis for the test generation was a test architecture for the Initiator instance of the Inres protocol according to the distributed test method (cf. <ref> [7] </ref>). The test purpose was to test a data transfer with acknowledgment after the first transmission of the data package. All heuristics have been turned off during the search for unique pass observables (cf. [3, 10]).
Reference: [8] <author> ITU Telecommunication Standards Sector SG 10. </author> <title> ITU-T Recommendation Z.100: Specification and Description Language (SDL) (formerly CCITT Recommendation Z.100). </title> <address> ITU, Geneva, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: The heuristics 'indivisible SDL state transitions' suppresses this branching by executing all atomic SDL events belonging to an SDL state transition without interruption. The heuristics 'indivisible SDL state transitions' is in line with the informal semantics of SDL provided by the language definition <ref> [8] </ref>. It only provides problems if in addition to the signal based communication a communication via global variables is used, i.e., import, export, and view constructs. No null consumptions. The semantics of SDL provides the mechanism of null consumptions.
Reference: [9] <author> R. Langerak. </author> <title> True concurrency models for LOTOS. </title> <editor> In D. Hogrefe and S. Leue, editors, </editor> <booktitle> FORTE'94 Tutorial Notes, </booktitle> <pages> pages 157-182, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: This means concurrency is introduced by indeterminism, i.e., the execution of an SDL specification is described by all interleaved traces of concurrently executed events. Related problems occurred in the area of protocol verification. They have been tackled by the development of partial order simulation methods <ref> [1, 9] </ref>. Partial order simulation methods attempt to limit the exploration of traces for concurrent executions. In the best case for each concurrent execution only one trace is generated. Subsequently, we developed two algorithms which adapt the ideas of partial order simulation methods to the needs of SDL.
Reference: [10] <author> R. Nahm. </author> <title> Conformance Testing Based on Formal Description Techniques and Message Sequence Charts. </title> <type> PhD thesis, </type> <institution> University of Berne, Institute for Informatics and Applied Mathematics, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: In the final release of this paper we will present the results of experiments with the SSCOP 4 protocol. Our application area is the (semi-) automatic generation of test cases for formally specified protocols. Based on the SaMsTaG 5 method <ref> [2, 3, 10] </ref> a tool has been implemented. The generation of test cases can be looked at as a search problem within the state space of a specification. For each test case we search a system trace with specific properties which builds the basis for the test case description. <p> The test purpose was to test a data transfer with acknowledgment after the first transmission of the data package. All heuristics have been turned off during the search for unique pass observables (cf. <ref> [3, 10] </ref>). The results of this experiment are presented in Table 3. 4.4 Discussion The experiments have shown the usefulness of heuristics and partial order simulation methods for test case generation. However, the effects achieved by heuristics and partial order methods may need some discussion.
Reference: [11] <author> D. Toggweiler. </author> <title> Efficient Test Generation for distributed systems specified by automata. </title> <type> PhD thesis, </type> <institution> University of Berne, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: The heuristics 'maximal length of the signal queue' restricts the length of the infinite SDL signal queues. If a queue is full, then a sending event to this queue is not executable. 3 This heuristics avoids an infinite state space because of infinite signal queues. However, in <ref> [11] </ref> it is shown that under certain conditions the length of the input queues can be reduced without running the danger to loose concurrent executions. Selection of signals. The heuristics 'selection of signals' selects a set of signals of the specified system. Two types of this heuristics exist: 1. <p> Subsequently, we developed two algorithms which adapt the ideas of partial order simulation methods to the needs of SDL. The algorithms are called independence prioritizing simulation and condition locking simulation. We describe them informally. The details can be found in <ref> [11, 12] </ref>. 3.2.1 Independence prioritizing simulation During the simulation for each state the concurrently enabled events are identified. If such events never influence each others execution they are called to be independent. Independent events can be executed in arbitrary order, there is no influence in the resulting concurrent execution.
Reference: [12] <author> D. Toggweiler, J. Grabowski, and D. Hogrefe. </author> <title> Partial order simulation of SDL specifications. </title> <editor> In A. Sarma R. Braek, editor, </editor> <booktitle> SDL'95 with MSC in CASE, Proceedings of 7. SDL Forum, </booktitle> <pages> pages 293-306. </pages> <publisher> North-Holland, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: Subsequently, we developed two algorithms which adapt the ideas of partial order simulation methods to the needs of SDL. The algorithms are called independence prioritizing simulation and condition locking simulation. We describe them informally. The details can be found in <ref> [11, 12] </ref>. 3.2.1 Independence prioritizing simulation During the simulation for each state the concurrently enabled events are identified. If such events never influence each others execution they are called to be independent. Independent events can be executed in arbitrary order, there is no influence in the resulting concurrent execution.
References-found: 12

