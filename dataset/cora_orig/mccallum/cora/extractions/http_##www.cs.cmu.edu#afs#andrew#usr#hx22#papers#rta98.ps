URL: http://www.cs.cmu.edu/afs/andrew/usr/hx22/papers/rta98.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/hwxi/www/publications.html
Root-URL: 
Email: e-mail: hwxi+@cs.cmu.edu  
Phone: fax: +1 412 268 6380  
Title: Towards Automated Termination Proofs through "Freezing"  
Author: Hongwei Xi 
Address: Pittsburgh, PA 15213, USA  
Affiliation: Department of Mathematical Sciences Carnegie Mellon University  
Abstract: We present a transformation technique called freezing to facilitate automated termination proofs for term rewriting systems. The significant merits of this technique lie in its simplicity, its amenability to automation and its effectiveness, especially, when combined with other well-known methods such as recursive path orderings and polynomial interpretations. We prove that the application of the freezing technique always terminates when applied to a left-linear term rewriting system. We also show that many interesting TRSs in the literature can be handled with the help of freezing, while they elude a lot of other approaches which aims at generating termination proofs automatedly for term rewriting systems. We have mechanically verified all the left-linear examples presented in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Arts and J. Giesl. </author> <title> Termination of constructor systems. </title> <booktitle> In Proceedings of the Seventh Conference on Rewriting Techniques and Applications, vol. 1103 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 63-77, </pages> <address> New Brunswick, USA, </address> <year> 1996. </year>
Reference-contexts: We present some preliminaries in Section 2. Then in Section 3 we illustrate the basic idea behind the freezing technique through a simple example. We formally 1 We point out that automated techniques have been developed, for instance in <ref> [18, 1] </ref>, which can handle self-embedded rewrite rules. 1 introduce the freezing technique in Section 4, and prove the termination of the freezing technique when it is applied to a left-linear TRS. <p> This example is taken from <ref> [1] </ref>, where it is claimed that the example eludes all the techniques in [19, 18, 14, 10], which aim at generating automatic termination proofs for TRSs. 10 minus (x; 0) ! x minus (succ (x); succ (y)) ! minus (x; y) quot (0; succ (y)) ! 0 quot (succ (x); succ
Reference: 2. <author> T. Arts and J. Giesl. </author> <title> Automatically Proving Termination Where Simplification Orderings Fail. </title> <booktitle> In Proc. Colloquium on Trees in Algebra and Programming, vol. 1214 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 261-272, </pages> <address> Lille, France, </address> <year> 1997. </year>
Reference-contexts: This example is taken from <ref> [2] </ref>.
Reference: 3. <author> L. Bachmair and N. Dershowitz. </author> <title> Communication, transformation and termination. </title> <booktitle> In the proceeding of the Eighth CADE, vol. 230 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 52-60, </pages> <address> Oxford, </address> <month> July </month> <year> 1986. </year>
Reference-contexts: By Lemma 5 in <ref> [3] </ref>, fl T ! fl S ! fl S=T fl T holds since S locally cooperates with T , where ! S=T stands for ! fl T ! S ! fl T . Now suppose that there exists an infinite ! R -rewriting sequence. <p> Therefore, ! R is terminating. ! R ! R ! R S ! + S ! fl T ! fl T ! fl T S=T T ! + ! fl Note that this is very similar to Theorem 4 in <ref> [3] </ref>. The transformation ordering (TO) technique is the method which proves the termination of R through the construction of T and S. Although there exist many similarities between the freezing technique and the transformation ordering technique, it seems difficult to decide which one is more powerful when automation is concerned.
Reference: 4. <author> F. Bellegarde and P. Lescanne. </author> <title> Termination by completion. Applicable Algebra in Engineering, </title> <journal> Communication and Computing, </journal> <volume> vol. 1, </volume> <pages> pp. 79-96, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings <ref> [4, 18] </ref> and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs. <p> This approach is impractical when the number of n-level frozen versions of R is too large. We use the following example to demonstrate a way to cope with this problem. Example 5. This example is taken from <ref> [4] </ref>. <p> Hence R is terminating. Note R 2 is the T [ S in <ref> [4] </ref>, which shows the termination of R. 5 Examples In this section we present some examples to show the effectiveness of the freezing technique. We say that R 1 is a frozen version of R if R 1 is a n-level frozen version of R for some n. <p> Clearly this is impossible since R 2 is not terminating. Therefore, none of the frozen versions of R can be proven using rpos. 6 Related Work and Conclusion Our work closely relates to transformation orderings <ref> [4] </ref>, with which we give some comparison. Given two relation R 1 and R 2 , we write R 1 R 2 for the relation R such that xRz if and only if xR 1 y and yR 2 z for some y.
Reference: 5. <author> N. Dershowiz. </author> <title> Orderings for term rewriting systems. </title> <journal> TCS, </journal> <volume> 17(3), </volume> <pages> pp. 279-301, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings <ref> [16, 5] </ref>, Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs.
Reference: 6. <author> N. Dershowitz. </author> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> vol. 3, pp.69-116, </volume> <year> 1987. </year>
Reference-contexts: While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See <ref> [6, 17] </ref> for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs. We propose a technique called freezing, which transforms a given TRS into a family of TRSs such that the termination of any TRS in this family implies the termination of the original TRS. <p> We now present a simple example before going into further details. Example 1. Let R be the TRS consisting of the following rule <ref> [6] </ref>. f (f (x) ! f (g (f (x)) Clearly, it cannot be proven with simplification orderings that ! R is terminating since the left-hand side of the rule is embedded in the right-hand side. Now we introduce the notion of freezing.
Reference: 7. <author> N. Dershowiz and C. Hoot. </author> <title> Natural Termination, </title> <journal> TCS, </journal> <volume> 142(2), </volume> <pages> pp. 179-207, </pages> <year> 1995. </year>
Reference: 8. <author> N. Dershowitz and Jean-Pierre Jouannaud. </author> <title> Notations for rewriting. </title> <journal> EATCS, </journal> <volume> vol. 43, </volume> <pages> pp. 162-172, </pages> <year> 1991. </year>
Reference-contexts: We then present some examples in Section 5, and compare our work with some related work in Section 6, and mention the conclusion and some future research directions. 2 Preliminaries In general, we shall stick close to the notations in <ref> [8] </ref> though some modifications may occur. We assume that the reader is familiar with term rewriting. The following is a brief summary of the notations we shall use later.
Reference: 9. <author> M. Ferreira. </author> <title> Dummy Elimination in Equational Rewriting. </title> <booktitle> In Proceedings of the Seventh Conference on Rewriting Techniques and Applications, vol. 1103 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 78-92, </pages> <address> New Brunswick, USA, </address> <year> 1996. </year>
Reference-contexts: If the status of F is not presented, then it is assume that t (F ) = fl m . Example 6. This example is taken from <ref> [9] </ref>, where it is proven terminating through dummy elimination. The TRS consists of the following rule x fl (y + z) ! (a (x; y) fl y) + (x fl (a (z; x)) modulo associativity and commutativity of +. <p> Overall the algorithm in [18] seems to be quite involved and highly heuristic, while the freezing technique is conceptually simple and easily implementable. Also the freezing technique is related to dummy elimination in <ref> [10, 9] </ref>. In [9] the following TRS is constructed to show the termination of the TRS in Example [?]. x fl (y + z) ! ( fl y) + (x fl ) x fl (y + z) ! x is a newly introduced constant. <p> Overall the algorithm in [18] seems to be quite involved and highly heuristic, while the freezing technique is conceptually simple and easily implementable. Also the freezing technique is related to dummy elimination in [10, 9]. In <ref> [9] </ref> the following TRS is constructed to show the termination of the TRS in Example [?]. x fl (y + z) ! ( fl y) + (x fl ) x fl (y + z) ! x is a newly introduced constant.
Reference: 10. <author> M. Ferreira and H. Zantema. </author> <title> Dummy Elimination: making termination easier. </title> <booktitle> In Proceedings of the 10th International Conference on Fundamentals of Computation Theory, LNCS 965, </booktitle> <address> Dresden, </address> <year> 1995. </year>
Reference-contexts: This example is taken from [1], where it is claimed that the example eludes all the techniques in <ref> [19, 18, 14, 10] </ref>, which aim at generating automatic termination proofs for TRSs. 10 minus (x; 0) ! x minus (succ (x); succ (y)) ! minus (x; y) quot (0; succ (y)) ! 0 quot (succ (x); succ (y)) ! succ (quot (minus (x; y); succ (y))) We freeze quot (minus <p> Overall the algorithm in [18] seems to be quite involved and highly heuristic, while the freezing technique is conceptually simple and easily implementable. Also the freezing technique is related to dummy elimination in <ref> [10, 9] </ref>. In [9] the following TRS is constructed to show the termination of the TRS in Example [?]. x fl (y + z) ! ( fl y) + (x fl ) x fl (y + z) ! x is a newly introduced constant.
Reference: 11. <author> J. Giesl. </author> <title> Automated termination proofs with measure function. </title> <booktitle> In Proceedings of 19th Annual German Conference on AI, </booktitle> <publisher> LNAI 981, </publisher> <address> Bielefeld, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations <ref> [15, 19, 11] </ref>, transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs.
Reference: 12. <author> G. Huet and D. </author> <month> Lankford </month> <year> (1978), </year> <title> On the uniform halting problem for term rewriting systems. </title> <type> Technical Report 283, </type> <institution> INRIA, Le Chesnay, France. </institution>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general <ref> [12] </ref>, many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs.
Reference: 13. <author> D. Knuth and P. Bendix. </author> <title> Simple word problems in universal algebras. Computational Problems in Abstract Algebra, edited by J. Leech, </title> <publisher> Pergamon Press, </publisher> <pages> pp. 263-197, </pages> <year> 1970. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering <ref> [13] </ref>, semantic interpretations [15, 19, 11], transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs.
Reference: 14. <author> R. Kennaway. </author> <title> Complete term rewrite systems for decimal arithmetic and other total recursive functions. </title> <booktitle> Presented at the 2nd International Workshop on termination, </booktitle> <address> La Bresse, </address> <year> 1995 </year>
Reference-contexts: This example is taken from [1], where it is claimed that the example eludes all the techniques in <ref> [19, 18, 14, 10] </ref>, which aim at generating automatic termination proofs for TRSs. 10 minus (x; 0) ! x minus (succ (x); succ (y)) ! minus (x; y) quot (0; succ (y)) ! 0 quot (succ (x); succ (y)) ! succ (quot (minus (x; y); succ (y))) We freeze quot (minus
Reference: 15. <author> D. Lankford. </author> <title> On proving term rewriting systems are noetherian. </title> <type> Tech. Report Memo MTP-3, </type> <institution> Louisiana Tech. University, </institution> <year> 1979. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations <ref> [15, 19, 11] </ref>, transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs.
Reference: 16. <author> D. Plaisted. </author> <title> A recursively defined ordering for proving termination of term rewriting systems. </title> <type> Tech. </type> <institution> report UIUC DCS-R-78-943, Univ. of Illinois, Urbana, </institution> <year> 1978. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings <ref> [16, 5] </ref>, Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs.
Reference: 17. <author> J. Steinbach. </author> <title> Simplification Orderings: History of Results, </title> <journal> Fundamenta Infor-maticae, </journal> <volume> vol. 24, </volume> <pages> pp. 47-87, </pages> <year> 1995. </year>
Reference-contexts: While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See <ref> [6, 17] </ref> for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs. We propose a technique called freezing, which transforms a given TRS into a family of TRSs such that the termination of any TRS in this family implies the termination of the original TRS. <p> We say that R 1 is a frozen version of R if R 1 is a n-level frozen version of R for some n. We will use the recursive path ordering (with status) technique (rpo (s)) formulated in <ref> [17] </ref> to prove the termination of TRSs.
Reference: 18. <author> J. Steinbach. </author> <title> Automatic termination proofs with transformation orderings. </title> <booktitle> In the proceedings of the Sixth RTA, vol. 914 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 11-25, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings <ref> [4, 18] </ref> and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs. <p> We present some preliminaries in Section 2. Then in Section 3 we illustrate the basic idea behind the freezing technique through a simple example. We formally 1 We point out that automated techniques have been developed, for instance in <ref> [18, 1] </ref>, which can handle self-embedded rewrite rules. 1 introduce the freezing technique in Section 4, and prove the termination of the freezing technique when it is applied to a left-linear TRS. <p> The termination of R 1 can be shown by recursive path ordering with precedence: h i gh g; b. Therefore R is terminating. Notice that R 1 is the generated TRS in Example 14 in <ref> [18] </ref>. 4.2 General TRSs We now show how to apply the freezing technique to a TRS which may not be left-linear. This time we can no longer prove the termination of the technique. Definition 12. <p> This example is taken from [1], where it is claimed that the example eludes all the techniques in <ref> [19, 18, 14, 10] </ref>, which aim at generating automatic termination proofs for TRSs. 10 minus (x; 0) ! x minus (succ (x); succ (y)) ! minus (x; y) quot (0; succ (y)) ! 0 quot (succ (x); succ (y)) ! succ (quot (minus (x; y); succ (y))) We freeze quot (minus <p> termination of R 1 can be proven using the rpos with: quasi precedence: gcd gcdL gcdR ; &lt;; if status: t (gcd) = (1; 2); t (gcdL) = (1; 3; 2); andt (gcdR) = (1; 2; 3) We point out that this example is much harder than Example 6 in <ref> [18] </ref>, where if , &lt; and are simply treated as constructors. 11 Example 9. This example is taken from [2]. <p> Theoretically, the termination of every TRS can be proven by transformation ordering. However, there exists no algorithm to achieve this in practice. On the other hand, the freezing technique can easily lead to an implementation though it seems much less powerful theoretically. In <ref> [18] </ref>, Steinbach presented an algorithm to generate a transformation ordering for a given R. The freezing technique closely resembles the projection technique in his algorithm. On the other hand, there also exist some significant differences. 1. <p> The freezing technique is orthogonal to other techniques for termination proofs, and this leads to modular combinations of the freezing technique with other ones. 2 This makes neither the transformation ordering technique nor the freezing technique encompasses the other. 13 3. Overall the algorithm in <ref> [18] </ref> seems to be quite involved and highly heuristic, while the freezing technique is conceptually simple and easily implementable. Also the freezing technique is related to dummy elimination in [10, 9].
Reference: 19. <author> H. Zantema. </author> <title> Termination of term rewriting: interpretation and type elimination. </title> <journal> Journal of Symbolic Computation, </journal> <volume> vol. 17, </volume> <pages> pp. 23-50, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction It is an ever present task to decide whether a given term rewriting system (TRS) is (strongly) terminating. While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations <ref> [15, 19, 11] </ref>, transformation orderings [4, 18] and semantic labelling [20], have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs. <p> This example is taken from [1], where it is claimed that the example eludes all the techniques in <ref> [19, 18, 14, 10] </ref>, which aim at generating automatic termination proofs for TRSs. 10 minus (x; 0) ! x minus (succ (x); succ (y)) ! minus (x; y) quot (0; succ (y)) ! 0 quot (succ (x); succ (y)) ! succ (quot (minus (x; y); succ (y))) We freeze quot (minus
Reference: 20. <author> H. Zantema. </author> <title> Termination of Term Rewriting by Semantic Labelling, </title> <journal> Fundamenta Informaticae, </journal> <volume> vol. 24, </volume> <pages> pp 89-105, </pages> <year> 1995. </year> <title> This article was processed using the L a T E X macro package with LLNCS style 15 </title>
Reference-contexts: While this problem is not decidable in general [12], many approaches, such as path orderings [16, 5], Knuth-Bendix ordering [13], semantic interpretations [15, 19, 11], transformation orderings [4, 18] and semantic labelling <ref> [20] </ref>, have been developed to give termination proofs. See [6, 17] for surveys. In this paper, we are primarily concerned with automated termination proofs for TRSs.
References-found: 20

