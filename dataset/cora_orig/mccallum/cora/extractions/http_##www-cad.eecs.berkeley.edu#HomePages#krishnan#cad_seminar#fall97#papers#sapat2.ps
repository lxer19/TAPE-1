URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/papers/sapat2.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/abstract/sapatnekar.html
Root-URL: http://www.cs.berkeley.edu
Email: naresh@iastate.edu sachin@iastate.edu  
Title: An Improved Algorithm for Minimum-Area Retiming  
Author: Naresh Maheshwari and Sachin S. Sapatnekar 
Address: Ames IA 50010  
Affiliation: Department of Electrical Computer Engineering Iowa State University,  
Abstract: The concept of improving the timing behavior of a circuit by relocating flip-flops is called retiming and was first presented by Leis-erson and Saxe. The ASTRA algorithm proposed an alternative view of retiming using the equivalence between retiming and clock skew optimization. This work defines the relationship between the Leiserson-Saxe and the ASTRA approaches and utilizes it to solve the problem of retiming for minimum area. The new algorithm, Minaret, uses the linear programming formulation of the Leiserson-Saxe approach. The underlying philosophy of the AS-TRA approach is incorporated to reduce the number of variables and constraints in the linear program. This reduction in the size of the linear program makes Minaret space and time efficient, enabling minimum area retiming of circuits with over 56,000 gates in under 15 minutes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Leiserson, F. Rose, and J. B. Saxe, </author> <title> Optimizing synchronous circuitry by retiming, </title> <booktitle> in Proceedings of the 3rd Caltech Conference on VLSI, </booktitle> <pages> pp. 87116, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction Retiming is a procedure that involves the relocation of flip-flops (FF's) across logic gates to allow the circuit to be operated under a faster clock. The technique was first proposed by Leiserson and Saxe <ref> [1, 2] </ref>, where the algorithmic basis of retiming circuits with edge-triggered FF's was described without specifically focusing on implementational aspects. Retiming to achieve the minimum clock period is termed minperiod retiming, while retiming to minimize the number of memory elements for a given target clock period is called minarea retiming.
Reference: [2] <author> C. E. Leiserson and J. B. Saxe, </author> <title> Retiming synchronous circuitry, </title> <journal> Algorithmica, </journal> <volume> vol. 6, </volume> <pages> pp. 535, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Retiming is a procedure that involves the relocation of flip-flops (FF's) across logic gates to allow the circuit to be operated under a faster clock. The technique was first proposed by Leiserson and Saxe <ref> [1, 2] </ref>, where the algorithmic basis of retiming circuits with edge-triggered FF's was described without specifically focusing on implementational aspects. Retiming to achieve the minimum clock period is termed minperiod retiming, while retiming to minimize the number of memory elements for a given target clock period is called minarea retiming. <p> The significance of the objective function and the constraints is as follows (the reader is referred to <ref> [2] </ref> for details). * The objective function represents the number of registers added to the retimed circuit in relation to the original circuit. * The first constraint ensures that the weight e uv of each edge (i.e., the number of registers between the output of gate u and the input of <p> Thus FF's at the fanouts of a gate can be combined or shared. To accurately model the number of FFs in a circuit we need to take this sharing into account. For this purpose we use the model given by Leiserson-Saxe in <ref> [2] </ref>, which introduces for every gate u with multiple fanouts a mirror vertex m u . The objective function of the LP is also modified as described in [2]. It is also pointed out in [2] that the dual of this problem is an in stance of a minimum cost network <p> For this purpose we use the model given by Leiserson-Saxe in <ref> [2] </ref>, which introduces for every gate u with multiple fanouts a mirror vertex m u . The objective function of the LP is also modified as described in [2]. It is also pointed out in [2] that the dual of this problem is an in stance of a minimum cost network flow problem. <p> For this purpose we use the model given by Leiserson-Saxe in <ref> [2] </ref>, which introduces for every gate u with multiple fanouts a mirror vertex m u . The objective function of the LP is also modified as described in [2]. It is also pointed out in [2] that the dual of this problem is an in stance of a minimum cost network flow problem.
Reference: [3] <author> A. Ishii, C. E. Leiserson, and M. C. Papaefthymiou, </author> <title> Optimizing two-phase, </title> <booktitle> level-clocked circuitry, in Advanced Research in VLSI and Parallel Systems: Proceedings of the 1992 Brown/MIT Conference, </booktitle> <pages> pp. 246264, </pages> <year> 1992. </year>
Reference-contexts: Several papers have been published since then, extending the Leiserson-Saxe method to handle variations of the original problem, for example, retiming level-clocked circuits <ref> [3, 4] </ref>, improving the delay model [5], retiming with equivalent initial states [6] and retiming for low power [7]. It was only recently that algorithms for handling large VLSI circuits were introduced [8, 9].
Reference: [4] <author> B. Lockyear and C. Ebeling, </author> <title> Optimal retiming of level-clocked circuits using symmetric clock schedules, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 13, </volume> <pages> pp. 1097 1109, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Several papers have been published since then, extending the Leiserson-Saxe method to handle variations of the original problem, for example, retiming level-clocked circuits <ref> [3, 4] </ref>, improving the delay model [5], retiming with equivalent initial states [6] and retiming for low power [7]. It was only recently that algorithms for handling large VLSI circuits were introduced [8, 9].
Reference: [5] <author> K. N. Lalgudi and M. Papaefthymiou, </author> <title> DeLaY: An efficient tool for retiming with realistic delay modeling, </title> <booktitle> in Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 304309, </pages> <year> 1995. </year>
Reference-contexts: Several papers have been published since then, extending the Leiserson-Saxe method to handle variations of the original problem, for example, retiming level-clocked circuits [3, 4], improving the delay model <ref> [5] </ref>, retiming with equivalent initial states [6] and retiming for low power [7]. It was only recently that algorithms for handling large VLSI circuits were introduced [8, 9]. The work in 1 This work was supported in part by the National Science Foundation under award MIP-9502556.
Reference: [6] <author> G. Even, I. Y. Spillinger, and L. Stok, </author> <title> Retiming revisited and reversed, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 15, </volume> <pages> pp. 348357, </pages> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: Several papers have been published since then, extending the Leiserson-Saxe method to handle variations of the original problem, for example, retiming level-clocked circuits [3, 4], improving the delay model [5], retiming with equivalent initial states <ref> [6] </ref> and retiming for low power [7]. It was only recently that algorithms for handling large VLSI circuits were introduced [8, 9]. The work in 1 This work was supported in part by the National Science Foundation under award MIP-9502556.
Reference: [7] <author> J. Monteiro, S. Devadas, and A. Ghosh, </author> <title> Retiming sequential circuits for low power, </title> <booktitle> in Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 398 402, </pages> <year> 1993. </year>
Reference-contexts: Several papers have been published since then, extending the Leiserson-Saxe method to handle variations of the original problem, for example, retiming level-clocked circuits [3, 4], improving the delay model [5], retiming with equivalent initial states [6] and retiming for low power <ref> [7] </ref>. It was only recently that algorithms for handling large VLSI circuits were introduced [8, 9]. The work in 1 This work was supported in part by the National Science Foundation under award MIP-9502556. Design Automation Conference R fl Copyright c fl 1997 by the Association for Computing Machinery, Inc.
Reference: [8] <author> N. Shenoy and R. Rudell, </author> <title> Efficient implementation of retim-ing, </title> <booktitle> in Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 226233, </pages> <year> 1994. </year>
Reference-contexts: It was only recently that algorithms for handling large VLSI circuits were introduced <ref> [8, 9] </ref>. The work in 1 This work was supported in part by the National Science Foundation under award MIP-9502556. Design Automation Conference R fl Copyright c fl 1997 by the Association for Computing Machinery, Inc. <p> Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from Publications Dept, ACM Inc., fax +1 (212) 869-0481, or permissions@acm.org. 0-89791-847-9/97/0006/$3.50 DAC 97 - 06/97 Anaheim, CA, USA <ref> [8] </ref> presented efficient and clever implementations of the Leiserson-Saxe algorithms for both minarea and minperiod retiming. At about the same time, the ASTRA algorithm [9, 10] was published, displaying a different view of retiming by using an equivalence between clock skew and retiming. <p> Since this period constraint from gate s to gate u assures us that any path from gate s passing through gate u at least one FF on it. This idea was used in <ref> [8] </ref> to prune the period constraints by adding a period constraint only to a vertex u, reachable from s, that satisfies the following: D (s; u) &gt; c and D (s; v) c 8 v lying on s ; F I (u) (9) In the presence of the bounds suppose for <p> Thus while generating the period constraints from a gate w we do not process the fanouts of any gate v for which the inequality W (w; v) + a v b w &gt; 1 is satisfied. We observed that incorporating this rule in the period constraint generation algorithm of <ref> [8] </ref> gave us significant improvements in the CPU time. To keep the memory requirements of the LP in Equation (5) low we must identify and drop the redundant constraints as they are generated. <p> We consider two possible clock periods of 2 units and 3 units in this example. When c = 2 units For a clock period of two units, the list of constraints generated by the approach in <ref> [8] </ref> is listed below. <p> As is clear from the table Minaret obtains significant reduction in the number of constraints over the work in <ref> [8] </ref>. For example, for the circuit s38584.1 the number of constraints. reduced from 11 million to less than 0.1 million. Although not shown in the results, the time spent in computing the bounds was found to be insignificant at about 1% to 2% of the total execution time. <p> Although not shown in the results, the time spent in computing the bounds was found to be insignificant at about 1% to 2% of the total execution time. Thus Minaret would be useful even if a circuit has a unusually high flexibility. We also note that in <ref> [8] </ref> the circuit s38584 needed 39 hours of CPU time while Minaret could retime it in about one minute. We point out, though, that such a comparison is not entirely fair since (a) the results are generated on different platforms and (b) the circuits used in [8] are modified ISCAS89 benchmarks <p> also note that in <ref> [8] </ref> the circuit s38584 needed 39 hours of CPU time while Minaret could retime it in about one minute. We point out, though, that such a comparison is not entirely fair since (a) the results are generated on different platforms and (b) the circuits used in [8] are modified ISCAS89 benchmarks and have a much smaller number of gates. (for example, s38584.1 has 7882 gates in [8] while the original benchmark used here has 19,253 gates). <p> We point out, though, that such a comparison is not entirely fair since (a) the results are generated on different platforms and (b) the circuits used in <ref> [8] </ref> are modified ISCAS89 benchmarks and have a much smaller number of gates. (for example, s38584.1 has 7882 gates in [8] while the original benchmark used here has 19,253 gates). <p> Minaret could also retime a circuit (myex3) with over 56,000 gates in under 15 minutes. Minaret also has a reduced memory requirement since a significant number of constraints are not stored. In our implementation of <ref> [8] </ref> we found that large circuits can have constraints in millions, which makes the memory requirement a bottleneck. To the best of our knowledge, no other retiming algorithm incorporates pruning methods to reduce the number of variables .
Reference: [9] <author> R. B. Deokar and S. S. Sapatnekar, </author> <title> A fresh look at re-timing via clock skew optimization, </title> <booktitle> in Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 310315, </pages> <year> 1995. </year>
Reference-contexts: It was only recently that algorithms for handling large VLSI circuits were introduced <ref> [8, 9] </ref>. The work in 1 This work was supported in part by the National Science Foundation under award MIP-9502556. Design Automation Conference R fl Copyright c fl 1997 by the Association for Computing Machinery, Inc. <p> Request permissions from Publications Dept, ACM Inc., fax +1 (212) 869-0481, or permissions@acm.org. 0-89791-847-9/97/0006/$3.50 DAC 97 - 06/97 Anaheim, CA, USA [8] presented efficient and clever implementations of the Leiserson-Saxe algorithms for both minarea and minperiod retiming. At about the same time, the ASTRA algorithm <ref> [9, 10] </ref> was published, displaying a different view of retiming by using an equivalence between clock skew and retiming. It proposed an minperiod retim-ing algorithm that was quite different from the Leiserson-Saxe approach. A similar approach for retiming level-clocked circuits was presented in [11]. <p> Since clock skew is a continuous optimization while retiming is a discrete one, the minimum clock period achievable by application of clock skews may not be obtained by retiming. This relationship between skew and retiming motivates the following two-phase solution to the minperiod retiming problem in the ASTRA approach <ref> [9] </ref>. Phase A : The clock skew optimization problem is solved to find the optimal values of the skew at each FF, with the objective of minimizing the clock period, or to satisfy a given feasible clock period.
Reference: [10] <author> S. S. Sapatnekar and R. B. Deokar, </author> <title> Utilizing the retim-ing skew equivalence in a practical algorithm for retiming large circuits, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 15, </volume> <pages> pp. 12371248, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Request permissions from Publications Dept, ACM Inc., fax +1 (212) 869-0481, or permissions@acm.org. 0-89791-847-9/97/0006/$3.50 DAC 97 - 06/97 Anaheim, CA, USA [8] presented efficient and clever implementations of the Leiserson-Saxe algorithms for both minarea and minperiod retiming. At about the same time, the ASTRA algorithm <ref> [9, 10] </ref> was published, displaying a different view of retiming by using an equivalence between clock skew and retiming. It proposed an minperiod retim-ing algorithm that was quite different from the Leiserson-Saxe approach. A similar approach for retiming level-clocked circuits was presented in [11]. <p> We attempt to move each positive skew FF opposite to the direction of signal propagation, and each negative skew FF in the direction of signal propagation to reduce the magnitude of its skew. A formal rationalization is provided in <ref> [10] </ref>. After Phase B, any skews that could not be set exactly to zero are forced to zero. This could cause the clock period to increase from Phase A; however, it is shown that this increase will be no greater than the maximum gate delay. <p> For a given circuit, one may build a set of difference constraints with one such constraint for every pair of FF's that have a purely combinational path connecting them, and may be represented by a constraint graph. It is shown in <ref> [10] </ref> that the Bellman-Ford algorithm may be applied to this graph to find the longest path in the graph; the final values associated with each vertex provides the required skew at that vertex and gives one possible set of skews that can achieve the clock period c. <p> for the definition of the r variables, this implies that one may set the following bounds on the r variables. (1) r (u) = 0 for u 2 fG1; G2; G5; G6; G7; G11; G12g (3) 1 r (u) 0 for u 2 fG8; G9; G10g. 2 As explained in <ref> [10] </ref>, FF's that have positive skews are moved in the direction opposite to the signal flow direction, and FF's with negative skews are relocated in the direction of signal flow (see Section 2.1 for a brief explanation). <p> The procedure for relocation here to find the ASAP and ALAP locations proceeds along the same lines as in <ref> [10] </ref>, with a few variations described below. During this procedure, we also obtain the bounds on the r variables. When we consider the ASAP locations for the retimed FF's, the aim is to push the FF's as far as possible in a direction opposite to the direction of signal propagation.
Reference: [11] <author> N. Maheshwari and S. S. Sapatnekar, </author> <title> A practical algorithm for retiming level-clocked circuits, </title> <booktitle> in Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pp. 440445, </pages> <year> 1996. </year>
Reference-contexts: It proposed an minperiod retim-ing algorithm that was quite different from the Leiserson-Saxe approach. A similar approach for retiming level-clocked circuits was presented in <ref> [11] </ref>. For digital circuit design the most useful problem is that of minarea retiming. However, due to the high computational expense of this optimization its use has been limited.
Reference: [12] <author> J. P. Fishburn, </author> <title> Clock skew optimization, </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 39, </volume> <pages> pp. 945951, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: These approaches will later be combined to form Minaret, an improved algorithm for minimum area retiming. 2.1 The ASTRA Algorithm The introduction of clock skew at a FF has an effect that is similar to moving it across combinational logic module boundaries (gates) <ref> [12] </ref>. The effect of applying a positive skew on a FF is equivalent to moving it from the inputs of a gate to the outputs. Similarly application of a negative clock skew is equivalent to moving it from the output to the inputs of a gate. <p> Note that the minimum clock period using skews may not be achievable using retiming, since retiming allows cycle-borrowing only in discrete amounts (corresponding to gate delays), while skew is a continuous optimization <ref> [12] </ref>. 2.2 The Leiserson-Saxe Algorithm 2.2.1 Notation A sequential circuit can be represented by a directed graph G (V; E), where each vertex v corresponds to a gate, and a directed edge e uv represents a connection from the output of gate u to the input of gate v, through zero,
Reference: [13] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms. </title> <address> New York, NY: </address> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: For a specified clock period, this may be written as a difference constraint <ref> [13] </ref> as follows: x j x i c d ij T setup (7) Note that the right hand side of the above equation is a constant. <p> Therefore, the first order of business is to determine bounds on the allowable skew at each FF. When the version of the Bellman-Ford algorithm in <ref> [13] </ref> is applied to the constraint graph for a specified clock period, the as-soon-as-possible (ASAP) skews are calculated for the network.
Reference: [14] <author> G. D. </author> <title> Micheli, Synthesis and Optimization of Digital Circuits. </title> <address> New York, NY: </address> <publisher> McGraw-Hill, </publisher> <year> 1994. </year>
Reference-contexts: While moving the FF's to ASAP and ALAP locations, subject to the specified clock period c, we count the number of FF's that 2 The calculation of ASAP and ALAP times is a technique that is routinely used in scheduling in high-level synthesis; see, for example, <ref> [14] </ref>. traverse each gate; this count gives us the upper and lower bound, respectively, on the r variable for the gate. For the ASAP locations, we move FF's as far as possible against the direction of signal propagation.
Reference: [15] <author> M. S. Bazaraa, J. J. Javis, and H. Sherali, </author> <title> Linear Programming and Network Flows. </title> <address> New York, NY: </address> <publisher> John Wiley, </publisher> <year> 1977. </year>
Reference-contexts: These upper/lower bounds are typically much easier to handle in linear programs than general linear constraints; in fact, for the network simplex algorithm <ref> [15] </ref> used by Minaret these, upper and lower bounds are actually helpful in solving the LP. 3.4 An Example The following example illustrates the method and shows how the number of constraints can be reduced using our approach. Consider the circuit example shown in Figure 2.
References-found: 15

