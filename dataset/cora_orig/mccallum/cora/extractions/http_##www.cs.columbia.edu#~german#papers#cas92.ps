URL: http://www.cs.columbia.edu/~german/papers/cas92.ps
Refering-URL: http://www.cs.columbia.edu/~german/papers.html
Root-URL: http://www.cs.columbia.edu
Title: Elastic Servers in CORDS  German  
Author: S. Goldszmidt 
Address: New York City, NY 10027  
Affiliation: Distributed Computing and Communications (DCC) Lab. Computer Science Dept., Columbia University  
Date: November 1992.  
Note: In Proceedings of the IBM/CAS Conference, Toronto, Canada,  
Abstract: The traditional client server paradigm for distributed computing, fixes the functionality and interfaces provided by server processes at compile time. While this scheme is powerful enough for many distributed applications, it is too inflexible for many others, such as those envisioned by the CORDS research project. In many applications, there is a need to dynamically add to (and sometimes restrict) the functionality of a server while it is executing. Lacking this ability, servers are often designed with narrow interfaces. This forces applications to engage in abnormally fine grained and complex process interactions, resulting in inefficient use of both computational cycles and communication bandwidth. This paper describes a more flexible paradigm, elastic servers, whose functionality can be extended at execution time by delegating new functional procedures to them.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Birrell A. and Nelson P. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1), </volume> <month> February </month> <year> 1984. </year>
Reference-contexts: The remote procedure call (RPC) interaction paradigm <ref> [1] </ref> is widely used for structuring distributed systems. In this model, a server exports a number of fixed procedures that can be invoked by remote clients.
Reference: [2] <author> J. S. Auerbach, D. F. Bacon, A. P. Goldberg, G. S. Goldszmidt, M. T. Kennedy, A. R. Lowry, J. R. Russell, W. Silverman, R. E. Strom, D. M. Yellin, and S. A. Yemini. </author> <title> High-level language support for programming reliable distributed systems. </title> <booktitle> In Proceedings of the IBM/CAS Conference, </booktitle> <address> Toronto, Canada, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: It enables a more flexible distribution of functionality between processes, for example, a process can dynamically transfer services to another process. This scheme builds on a multiapplication, multilanguage process model <ref> [12, 2] </ref> that supports instantiation, interconnection, and communication of processes. Client processes can delegate to elastic servers the execution of delegated programs. Elastic servers instantiate delegated programs when necessary, and as determined locally by the server or via a client request.
Reference: [3] <author> Uyless Black. </author> <title> Network Management Standards The OSI, SNMP and CMOL Protocols. </title> <publisher> McGraw Hill, </publisher> <year> 1992. </year>
Reference-contexts: This functional evolution is a major requirement in long-lived, dynamic distributed applications, such as, system and network management [6], which provided the original motivation for this work. Network management applications are typically built following the traditional client server paradigm, using application protocols such as SNMP [11], or CMIP <ref> [3] </ref>. Those frameworks centralize responsibilities in manager client processes, which contain the logic for managing the system, with agent servers playing restrictive support roles. Because managers can invoke only those fixed services defined in agent interfaces, many complex management procedures require many interactions.
Reference: [4] <author> G. Fauth, Gossels J., Hartman D., Johnson B., Kumar R., Leser N., Lounsbury D., Mackey D., Shue C., Smith T., Steiner J., , and Tuvell W. </author> <title> Osf distributed computing environment overview. </title> <type> Technical report, </type> <institution> Open Software Foundation, </institution> <address> Cambridge, MA., </address> <month> May </month> <year> 1990. </year>
Reference-contexts: The expected characteristics of future distributed environments and their underlying platforms motivates the search for new technologies to overcome the deficiencies of today's distributed environments. Most of today's distributed systems platforms, such as, the OSF/DCE <ref> [4] </ref>, follow a model of computation in which control is distributed among processes that communi 1 cate via message passing and remote procedure calls (RPC). In the traditional RPC paradigm, a server process exports a fixed interface, which consists of a collection of procedure signatures and types.
Reference: [5] <author> Goldszmidt G. and Yemini Y. </author> <title> The design of a management delegation engine. </title> <booktitle> In Proceedings of the IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> Santa Barbara, CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: They are implemented as a collection of threads and library routines. Delegated Process Instances (DPIs) are executed as independent processes (lightweight or heavyweight). A prototype Elastic Server supporting all the above functionality has been implemented <ref> [5] </ref>. In it, the above components are implemented as subroutines, collections of independent threads, and full address-space processes. 3.1 Controller The controller contains the main driver of the ES run time. When the ES begins execution, the controller is the main entry point. <p> The IPC facility supports asynchronous local communication between thread DPIs over shared memory. The name service provides a private, protocol-neutral way to associate names with DPIs. server. 3.6 Status A prototype Elastic Server, MAD <ref> [5] </ref>, successfully demonstrated the delegation model of elastic servers. We used this prototype to develop and execute network management applications using the delegation model. An early version of a distributed LAN analysis tool was demonstrated at InterOp 1991.
Reference: [6] <author> Goldszmidt G., Yemini Y., and Yemini S. </author> <title> Network management: The mad approach. </title> <booktitle> In Proceedings of the IBM/CAS Conference, </booktitle> <address> Toronto, Canada, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: While this scheme is powerful enough for many applications, it is too inflexible for many others, where the functionality of services offered by servers must change over time. This functional evolution is a major requirement in long-lived, dynamic distributed applications, such as, system and network management <ref> [6] </ref>, which provided the original motivation for this work. Network management applications are typically built following the traditional client server paradigm, using application protocols such as SNMP [11], or CMIP [3].
Reference: [7] <author> A. Goscinski. </author> <title> Distributed Operating Systems The Logical Design. </title> <publisher> Addison Wes-ley, </publisher> <year> 1991. </year>
Reference-contexts: The difference between local and remote procedure calls is implicit, because clients and servers are separate processes usually being run on different hosts <ref> [7] </ref>: * RPC clients and servers typically do not share the same address space * RPCs are more prone to the failures of hosts and networks * The latency of an RPC is more difficult to calculate. A detailed critique of the RPC paradigm appears in [13].
Reference: [8] <author> Slonim J., Finnigan P., Teorey T. Mendelson A., Bauer M., Larson P., McBride R., Yemini Y., and Yemini S. </author> <title> Towards a new distributed programming environment (cords). </title> <booktitle> In Proceedings of the First CASCON International Conference, </booktitle> <pages> pages 155-168, </pages> <address> Toronto, Canada, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: 1 Introduction One of the primary goals of the CORDS research alliance is to produce a prototype application environment for developing, operating, and managing distributed applications <ref> [8] </ref>. Such an environment will be based on a layer of open system services, midware, implemented over existing platforms. The expected characteristics of future distributed environments and their underlying platforms motivates the search for new technologies to overcome the deficiencies of today's distributed environments.
Reference: [9] <author> Stamos J.W. and Gifford D.K. </author> <title> Implementing remote evaluation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(7) </volume> <pages> 710-722, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Additional procedures can be incorporated to (or taken away from) the elastic server during its execution. Callers can dynamically augment the functionality of a server without recompiling and reinitiating it. Remote evaluation (REV) <ref> [9] </ref> is another interaction paradigm for processes in distributed systems. It allows a procedure (written in a LISP dialect) to be transferred from a client to a server where an interpreter executes it.
Reference: [10] <author> Marshall T. Rose. </author> <title> The Open Book, A Practical Perspective on OSI. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: The current prototype uses either TCP or UDP as transport for the delegation protocol. Presentation services for heterogeneous environments are provided via ASN.1 <ref> [10] </ref>. An asynchronous IPC implemented over shared memory by the ES run time is used to communicate between lightweight processes that are executing as part of the ES server, and between DPIs.
Reference: [11] <author> Marshall T. Rose. </author> <title> The Simple Book, An introduction to Management of TCP/IP-based Internets. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: This functional evolution is a major requirement in long-lived, dynamic distributed applications, such as, system and network management [6], which provided the original motivation for this work. Network management applications are typically built following the traditional client server paradigm, using application protocols such as SNMP <ref> [11] </ref>, or CMIP [3]. Those frameworks centralize responsibilities in manager client processes, which contain the logic for managing the system, with agent servers playing restrictive support roles. Because managers can invoke only those fixed services defined in agent interfaces, many complex management procedures require many interactions.
Reference: [12] <author> Yemini S., Goldszmidt G., Stoyenko A., Wei Y., and Beeck L. </author> <title> Concert: A high-level-language approach to heterogeneous distributed systems. </title> <booktitle> In The Ninth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 162-171. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: It enables a more flexible distribution of functionality between processes, for example, a process can dynamically transfer services to another process. This scheme builds on a multiapplication, multilanguage process model <ref> [12, 2] </ref> that supports instantiation, interconnection, and communication of processes. Client processes can delegate to elastic servers the execution of delegated programs. Elastic servers instantiate delegated programs when necessary, and as determined locally by the server or via a client request.
Reference: [13] <author> A.S. Tanembaum and R. van Renesse. </author> <title> A critique of the remote procedure call paradigm. Research into Networks and Distributed Applications, </title> <month> April </month> <year> 1988. </year>
Reference-contexts: A detailed critique of the RPC paradigm appears in <ref> [13] </ref>. There are two fundamental differences between an elastic server and the traditional RPC server. First, in the synchronous invocation semantics of RPC, clients are blocked pending the completion of the RPC. For many applications, this synchronization is not acceptable.
Reference: [14] <author> Yemini Y., Goldszmidt G., and Yemini S. </author> <title> Network management by delegation. </title> <booktitle> In The Second International Symposium on Integrated Network Management, </booktitle> <address> Washington, DC, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: Because managers can invoke only those fixed services defined in agent interfaces, many complex management procedures require many interactions. For any nontrivial management task, management processes must micromanage agent servers through primitive steps <ref> [14] </ref>. Micromanagement results in high communication costs, and delays in responding to critical situations. This results in ineffective distribution of functionality; produces failure-prone communication bottlenecks, and limits real-time responsiveness.
References-found: 14

