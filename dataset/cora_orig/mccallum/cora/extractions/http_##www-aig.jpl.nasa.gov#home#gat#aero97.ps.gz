URL: http://www-aig.jpl.nasa.gov/home/gat/aero97.ps.gz
Refering-URL: http://www-aig.jpl.nasa.gov/home/gat/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: gat@jpl.nasa.gov  
Title: ESL: A Language for Supporting Robust Plan Execution in Embedded Autonomous Agents  
Author: Erann Gat 
Note: (1997 IEEE Aerospace Conference)  
Address: 4800 Oak Grove Drive Pasadena, CA 91109  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  
Abstract: ESL (Execution Support Language) [5] is a language for encoding execution knowledge in embedded autonomous agents. It is similar in spirit to RAPs [2] and RPL [7], and RS [6], and its design owes much to these systems. Unlike its predecessors, ESL aims for a more utilitarian point in the design space. ESL was designed primarily to be a powerful and easy-to-use tool, not to serve as a representation for automated reasoning or formal analysis (although nothing precludes its use for these purposes). ESL consists of several sets of loosely coupled features that can be composed in arbitrary ways. It is currently implemented as a set of extensions to Common Lisp, and is being used to build the executive component of a control architecture for an autonomous spacecraft [8]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Peter Bonasso, et al., </author> <title> "Experiences with an Architecture for Intelligent Reactive Agents," </title> <journal> Journal of Experimental and Theoretical AI, </journal> <note> to appear. </note>
Reference-contexts: 1. INTRODUCTION ESL (Execution Support Language) is a language for encoding execution knowledge in embedded autonomous agents. It is designed to be the implementation substrate for the sequencing component of a three-layer architecture such as 3T <ref> [1] </ref> or ATLANTIS [3]. The sequencer in such an architecture coordinates the actions of a reactive controller, which controls the agent's actions, and a deliberative component, which generates plans and performs other high-level computations.
Reference: [2] <author> R. James Firby, </author> <title> Adaptive Execution in Dynamic Domains, </title> <type> Ph.D. thesis, </type> <institution> Yale University Department of Computer Science, </institution> <year> 1989. </year>
Reference-contexts: An implementation substrate for such a system should also be able to deal with a variety of different strategies for assigning responsibilities to the various layers, from mostly reactive strategies, to ones where the planner is the prime mover. ESL is similar in spirit to RAPs <ref> [2] </ref>, RPL [7], and RS [6], and its design owes much to these systems. Unlike its predecessors, ESL aims for a more utilitarian point in the design space.
Reference: [3] <author> Erann Gat, </author> <title> "Integrating Reaction and Planning in a Heterogeneous Asynchronous Architecture for Controlling Real World Mobile Robots," </title> <booktitle> Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI), </booktitle> <year> 1992. </year>
Reference-contexts: 1. INTRODUCTION ESL (Execution Support Language) is a language for encoding execution knowledge in embedded autonomous agents. It is designed to be the implementation substrate for the sequencing component of a three-layer architecture such as 3T [1] or ATLANTIS <ref> [3] </ref>. The sequencer in such an architecture coordinates the actions of a reactive controller, which controls the agent's actions, and a deliberative component, which generates plans and performs other high-level computations.
Reference: [4] <author> Erann Gat, </author> <title> "News From the Trenches: An Overview of Unmanned Spacecraft for AI Researchers, </title> " <note> Presented at the 1996 AAAI Spring Symposium on Planning with Incomplete Information. </note>
Reference: [5] <author> Erann Gat, </author> <note> "The ESL User's Guide", unpublished. http://www-aig.jpl.nasa.gov/home/gat/esl.html </note>
Reference-contexts: The following sections provide a brief overview of most of the major feature sets in ESL. For a complete (though terse) description of the language see the ESL User's Guide <ref> [5] </ref>. 2. CONTINGENCY HANDLING The contingency-handling constructs of ESL are based on the concept of cognizant failure , which is a design philosophy that states that systems should be designed to detect failures when they occur so that the system can respond appropriately.
References-found: 5

