URL: http://www.lsi.upc.es/dept/techreps/ps/R97-1.ps.gz
Refering-URL: http://www.lsi.upc.es/dept/techreps/1997.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On the Number of Descendants and Ascendants in Random Search Trees  
Author: Conrado Martnez Helmut Prodinger 
Date: January 2, 1997  
Abstract: We consider here the probabilistic analysis of the number of descendants and the number of ascendants of a given internal node in a random search tree. The performance of several important algorithms on search trees is closely related to these quantities. For instance, the cost of a successful search is proportional to the number of ascendants of the sought element. On the other hand, the probabilistic behavior of the number of descendants is relevant for the analysis of paged data structures and for the analysis of the performance of quicksort, when recursive calls are not made on small subfiles. We also consider the number of ascendants and descendants of a random node in a random search tree, i.e., the grand averages of the quantities mentioned above. We address these questions for standard binary search trees and for locally balanced search trees. These search trees were introduced by Poblete and Munro and are binary search trees such that each subtree of size 3 is balanced; in other words, binary search trees where there are not two adjacent internal nodes with only one son each. In this work, we follow a purely combinatorial approach, extensively using generating functions, and derive exact and asymptotic expressions for the probability distribution and moments of some of the considered quantities, finding several new results as well as alternative derivations for already known results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G.M. </author> <title> Adel'son-Vel'skii and E.M. Landis. An algorithm for the organization of information. </title> <journal> Dokladi Akademia Nauk SSSR, </journal> <volume> 146(2) </volume> <pages> 263-266, </pages> <year> 1962. </year> <journal> English translation in Soviet Math. </journal> <volume> Doklay 3 ,1962, </volume> <pages> 1259-1263. </pages>
Reference-contexts: We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them [19, 29, 8]. Height and weight-balanced versions of the binary search trees, like AVL and red-black trees <ref> [1, 10] </ref>, have been proposed and find many useful applications, since all of them guarantee good worst-case performance of both searches and updates. fl This research was partly done while the second author was visiting the CRM (Centre de Recerca Matematica, Institut d'Estudis Catalans). <p> Locally balanced binary search trees One approach to avoid drastically unbalanced binary search trees is the introduction of strict balance constraints like in AVLs or red-black trees <ref> [1, 10] </ref>. Such schemes guarantee logarithmic performance of searches and updates in the worst-case, but they have additional space requirements and are more difficult to implement than standard BSTs.
Reference: [2] <author> C.R. Aragon and R.G. Seidel. </author> <title> Randomized search trees. </title> <booktitle> In Proc. of the 30th Annual IEEE Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 540-545, </pages> <year> 1989. </year>
Reference-contexts: 1. Introduction Binary search trees are among the most important and commonly used data structures, their applications spanning a wide range of the areas of Computer Science. Standard binary search trees (BSTs, for short) are still the subject of active research, see for instance the recent articles <ref> [2, 26] </ref>.
Reference: [3] <author> S.R. Arora and W.T. Dent. </author> <title> Randomized binary search technique. </title> <journal> Comm. ACM, </journal> <volume> 12(2) </volume> <pages> 77-80, </pages> <year> 1969. </year>
Reference-contexts: Mart nez and H. Prodinger BST LBST Of a given node Of a random node Of a given node Of a random node Average <ref> [3] </ref> Probability, Average [16] fl Average, Ascendants moments, limit variance [25] fl distribution [22, 5, 21, 17] Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments [20] fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this
Reference: [4] <author> C.J. Bell. </author> <title> An Investigation into the Principles of the Classification and Analysis of Data on an Automatic Digital Computer. </title> <type> PhD thesis, </type> <institution> Leeds University, </institution> <year> 1965. </year>
Reference-contexts: Polytechnical University of Catalonia. Pau Gargallo 5, E-08028 Barcelona, Spain. E-mail: Conrado.Martinez@lsi.upc.es z Institut fur Algebra und Diskrete Mathematik. Technical University of Vienna. Wiedner Hauptstrae 8-10, A-1040 Vienna, Austria. E-mail: Helmut.Prodinger@tuwien.ac.at 1 On the Number of Descendants and Ascendants 2 Locally balanced search trees (LBSTs) were introduced by Bell <ref> [4] </ref> and Walker and Wood [32], and throughly analyzed by Poblete and Munro in [25]. LBSTs have been proposed as an alternative to more complex balancing schemes for search trees. <p> Such schemes guarantee logarithmic performance of searches and updates in the worst-case, but they have additional space requirements and are more difficult to implement than standard BSTs. As an alternative, several authors <ref> [4, 32, 25] </ref> have suggested the use of a simple heuristic that makes the construction of poorly balanced trees much less likely than with the use of the standard algorithms. Furthermore, the heuristic was shown to yield significant savings in the expected search time.
Reference: [5] <author> G.G. Brown and B.O. Shubert. </author> <title> On random binary trees. </title> <journal> Mathematics of Operations Research, </journal> <volume> 9(1) </volume> <pages> 43-65, </pages> <year> 1984. </year>
Reference-contexts: Mart nez and H. Prodinger BST LBST Of a given node Of a random node Of a given node Of a random node Average [3] Probability, Average [16] fl Average, Ascendants moments, limit variance [25] fl distribution <ref> [22, 5, 21, 17] </ref> Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments [20] fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper.
Reference: [6] <author> Ph. Flajolet and A.M. Odlyzko. </author> <title> Singularity analysis of generating functions. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 3(2) </volume> <pages> 216-240, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: them in this paper, the reader should be aware of the existing powerful techniques to extract asymptotic information about the coefficients of a generating function if we know its behaviour near its singularities or in some case, even if we only know the functional equation satisfied by the generating function <ref> [31, 6] </ref>.
Reference: [7] <author> Ph. Flajolet and M. Soria. </author> <title> General combinatorial schemas: Gaussian limit distributions and exponential tails. </title> <journal> Discrete Mathematics, </journal> <volume> 114, </volume> <year> 1993. </year>
Reference-contexts: The solution of the differential equation above is the explicit form given in the theorem. Extracting coefficients in exact form from there is quite difficult. However, as Philippe Flajolet kindly pointed to us, asymptotic information and most notably, the limiting probability distribution can be established <ref> [7, 14] </ref>. In this case, it follows that A n converges in distribution (converges in law) to a Gaussian distribution, i.e.
Reference: [8] <author> G.H. Gonnet and R. Baeza-Yates. </author> <title> Handbook of Algorithms and Data Structures In Pascal and C. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1991. </year>
Reference-contexts: We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them <ref> [19, 29, 8] </ref>.
Reference: [9] <author> R.L. Graham, D.E. Knuth, and O. Patashnik. </author> <title> Concrete Mathematics. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: n;j = m j the root is the k th element fl fi the root is the k th element fl 1 [[m = n]] + n k=1 1 n X P [D k1;j = m] ; (5) where [[P ]] is 1 if P is true and 0 otherwise <ref> [9] </ref>. This recursion translates nicely into a functional equation over the "super" generating function for the family of random variables fD n;j g. Solving the functional equation and extracting coefficients of the generating function, we get the following theorem, which was already found by Lent [20] using probabilistic techniques.
Reference: [10] <author> L.J. Guibas and R. Sedgewick. </author> <title> A dichromatic framework for balanced trees. </title> <booktitle> In Proc. of the 19th Annual IEEE Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 8-21, </pages> <year> 1978. </year>
Reference-contexts: We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them [19, 29, 8]. Height and weight-balanced versions of the binary search trees, like AVL and red-black trees <ref> [1, 10] </ref>, have been proposed and find many useful applications, since all of them guarantee good worst-case performance of both searches and updates. fl This research was partly done while the second author was visiting the CRM (Centre de Recerca Matematica, Institut d'Estudis Catalans). <p> Locally balanced binary search trees One approach to avoid drastically unbalanced binary search trees is the introduction of strict balance constraints like in AVLs or red-black trees <ref> [1, 10] </ref>. Such schemes guarantee logarithmic performance of searches and updates in the worst-case, but they have additional space requirements and are more difficult to implement than standard BSTs.
Reference: [11] <author> C.A.R. Hoare. </author> <title> Find (Algorithm 65). </title> <journal> Comm. ACM, </journal> <volume> 4 </volume> <pages> 321-322, </pages> <year> 1961. </year>
Reference-contexts: Deepening our knowledge about binary search trees is interesting in its own; moreover, most of this knowledge can be translated and applied to other data structures such as heap ordered trees, k-d-trees [31], and to important algorithms like quicksort and Hoare's Find algorithm for selection (also known as quickselect) <ref> [11, 12, 28, 29] </ref>. We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them [19, 29, 8]. <p> Mart nez and H. Prodinger Then, S n;j = P n;j + 1 = A n;j ; E [U n ] = n + 1 E [I n ] = n ( E [A n ] 1) ; There is also a close relationship between the performance of quickselect <ref> [11, 18, 16] </ref> and the number of ascendants. Proposition 1.3 Let F n;j be the number of recursive calls made by quickselect to select the j th element out of n elements.
Reference: [12] <author> C.A.R. Hoare. </author> <title> Quicksort. </title> <journal> Comput. J., </journal> <volume> 5 </volume> <pages> 10-15, </pages> <year> 1962. </year>
Reference-contexts: Deepening our knowledge about binary search trees is interesting in its own; moreover, most of this knowledge can be translated and applied to other data structures such as heap ordered trees, k-d-trees [31], and to important algorithms like quicksort and Hoare's Find algorithm for selection (also known as quickselect) <ref> [11, 12, 28, 29] </ref>. We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them [19, 29, 8].
Reference: [13] <author> M. Hoshi and Ph. Flajolet. </author> <title> Page usage in a quadtree index. </title> <journal> BIT, </journal> <volume> 32(3) </volume> <pages> 384-402, </pages> <year> 1992. </year>
Reference-contexts: The study of the number of descendants has applications in the context of paged trees (see for instance <ref> [19, 13] </ref>).
Reference: [14] <author> H.-K. Hwang. </author> <title> Theoremes limites pour les structures combinatoires et les fonctions arithmetiques. </title> <type> PhD thesis, </type> <institution> Ecole Polytechnique, </institution> <year> 1994. </year>
Reference-contexts: The solution of the differential equation above is the explicit form given in the theorem. Extracting coefficients in exact form from there is quite difficult. However, as Philippe Flajolet kindly pointed to us, asymptotic information and most notably, the limiting probability distribution can be established <ref> [7, 14] </ref>. In this case, it follows that A n converges in distribution (converges in law) to a Gaussian distribution, i.e.
Reference: [15] <author> E. Kamke. </author> <title> Differentialgleichungen: Losungsmethoden und Losungen. </title> <publisher> Teubner, Stuttgart, </publisher> <year> 1977. </year>
Reference-contexts: The former can be solved, in principle, by quadrature through the variation of constant |actually, functions in u and v| method. For the second order differential equations, the theory of hypergeometric differential equations comes into play <ref> [15] </ref>. Nowadays, most of the necessary mathematical knowledge is embodied into modern computer algebra systems. In our case, Maple needed little or no assistance to solve the differential equations that we had.
Reference: [16] <author> P. Kirschenhofer, C. Martnez, and H. Prodinger. </author> <title> Analysis of Hoare's FIND algorithm with median-of-three partition. Random Structures & Algorithms, </title> <note> 1995. To appear. </note>
Reference-contexts: A similar idea, namely, selecting a sample of 3 elements and taking the median of the sample as the pivot element for partitioning in algorithms like quicksort and quickselect has been shown to yield significant improvements in theory and practice <ref> [28, 16] </ref>. Random search trees, either random BSTs or random LBSTs, are search trees built by performing n random insertions into an initially empty tree [19, 23]. <p> Mart nez and H. Prodinger Then, S n;j = P n;j + 1 = A n;j ; E [U n ] = n + 1 E [I n ] = n ( E [A n ] 1) ; There is also a close relationship between the performance of quickselect <ref> [11, 18, 16] </ref> and the number of ascendants. Proposition 1.3 Let F n;j be the number of recursive calls made by quickselect to select the j th element out of n elements. <p> Mart nez and H. Prodinger BST LBST Of a given node Of a random node Of a given node Of a random node Average [3] Probability, Average <ref> [16] </ref> fl Average, Ascendants moments, limit variance [25] fl distribution [22, 5, 21, 17] Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments [20] fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper. <p> The differential equation (13) is exactly the same as the one for the number of passes in quickselect with median-of-three (see Proposition 1.3). The only difference between the expected number of passes in quickselect, as given in the work by Kirschenhofer et al. <ref> [16] </ref>, and the number of ascendants in LBSTs relies on the initial conditions.
Reference: [17] <author> P. Kirschenhofer and H. Prodinger. </author> <title> Comparisons in Hoare's Find algorithm. </title> <booktitle> Combinatorics, Probability and Computing, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Mart nez and H. Prodinger BST LBST Of a given node Of a random node Of a given node Of a random node Average [3] Probability, Average [16] fl Average, Ascendants moments, limit variance [25] fl distribution <ref> [22, 5, 21, 17] </ref> Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments [20] fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper. <p> Although computing the second factorial moment for A n;j seems not to be out of reach, it is undoubtably a formidable task, needing lots of patience, extreme carefulness and large amounts of computing resources (see for instance <ref> [17] </ref>, for a feeling of the kinds of problems involved in such computations). We shall let aside this problem and look at the probabilistic features of the number of ascendants of a random node in a random LBST.
Reference: [18] <author> D.E. Knuth. </author> <title> Mathematical analysis of algorithms. </title> <booktitle> In Proc. of the 1971 IFIP Congress, </booktitle> <pages> pages 19-27, </pages> <address> Amsterdam, 1972. </address> <publisher> North-Holland. </publisher>
Reference-contexts: Mart nez and H. Prodinger Then, S n;j = P n;j + 1 = A n;j ; E [U n ] = n + 1 E [I n ] = n ( E [A n ] 1) ; There is also a close relationship between the performance of quickselect <ref> [11, 18, 16] </ref> and the number of ascendants. Proposition 1.3 Let F n;j be the number of recursive calls made by quickselect to select the j th element out of n elements.
Reference: [19] <author> D.E. Knuth. </author> <title> The Art of Computer Programming: Sorting and Searching, volume 3. </title> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them <ref> [19, 29, 8] </ref>. <p> Random search trees, either random BSTs or random LBSTs, are search trees built by performing n random insertions into an initially empty tree <ref> [19, 23] </ref>. <p> The study of the number of descendants has applications in the context of paged trees (see for instance <ref> [19, 13] </ref>). <p> Excellent sources of information about generating functions and their applications to combinatorics and the analysis of algorithms are <ref> [33, 31, 30, 19] </ref>. We make extensive use in this paper of probability generating functions (PGFs) as well as multi-variate generating functions whose coefficients are PGFs themselves. We define them in turn. <p> Last, but not least, we can obtain the following corollaries, from Propositions 1.4 and 1.5 and the theorems in this section. These results can already be found in <ref> [19] </ref>, although there is a slight difference in E h (b) i , because n + 1 comparisons per partition are counted there, while we count n 1 comparison per partition.
Reference: [20] <author> J. Lent. </author> <title> Probabilistic analysis of some searching and sorting algorithms. </title> <type> PhD thesis, </type> <institution> George Washington University, </institution> <year> 1996. </year> <booktitle> On the Number of Descendants and Ascendants 24 </booktitle>
Reference-contexts: In Section 3 we develop the main steps of our approach, taking the analysis of the number of descendants in random BSTs as a first introductory example. We provide here alternative derivations to the results of Lent <ref> [20] </ref>, finding the probability that the j th node in a random BST of size n has m descendants (Theorem 3.1). We also find exact and asymptotic values for all ordinary moments, including the expected value and variance (Theorem 3.2). <p> BST LBST Of a given node Of a random node Of a given node Of a random node Average [3] Probability, Average [16] fl Average, Ascendants moments, limit variance [25] fl distribution [22, 5, 21, 17] Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments <ref> [20] </ref> fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper. <p> a given node Of a random node Of a given node Of a random node Average [3] Probability, Average [16] fl Average, Ascendants moments, limit variance [25] fl distribution [22, 5, 21, 17] Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments <ref> [20] </ref> fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper. <p> This recursion translates nicely into a functional equation over the "super" generating function for the family of random variables fD n;j g. Solving the functional equation and extracting coefficients of the generating function, we get the following theorem, which was already found by Lent <ref> [20] </ref> using probabilistic techniques. <p> Observe that for s 3 1 n X d n;j = s 1 s + 1 + n : Asymptotically, this quantity is ~ s 1 On the Number of Descendants and Ascendants 12 one of the observations in the work of Lent <ref> [20] </ref>. The coincidence in asymptotic behavior with d (s) remarkable; recall that in general E [D s 2 0 n 1jn 1 s 3 except when s = 1 and the same observation holds for the shifted factorial moments we were dealing with.
Reference: [21] <author> G. Louchard. </author> <title> Exact and asymptotic distributions in digital and binary search trees. </title> <journal> Theoretical Informatics and Applications, </journal> <volume> 21(4) </volume> <pages> 479-496, </pages> <year> 1987. </year>
Reference-contexts: Mart nez and H. Prodinger BST LBST Of a given node Of a random node Of a given node Of a random node Average [3] Probability, Average [16] fl Average, Ascendants moments, limit variance [25] fl distribution <ref> [22, 5, 21, 17] </ref> Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments [20] fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper.
Reference: [22] <author> W.C. Lynch. </author> <title> More combinatorial properties of certain trees. </title> <journal> Comput. J., </journal> <volume> 7 </volume> <pages> 299-302, </pages> <year> 1965. </year>
Reference-contexts: Mart nez and H. Prodinger BST LBST Of a given node Of a random node Of a given node Of a random node Average [3] Probability, Average [16] fl Average, Ascendants moments, limit variance [25] fl distribution <ref> [22, 5, 21, 17] </ref> Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments [20] fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper.
Reference: [23] <author> H.M. Mahmoud. </author> <title> Evolution of Random Search Trees. </title> <publisher> Wiley Interscience, </publisher> <year> 1992. </year>
Reference-contexts: Random search trees, either random BSTs or random LBSTs, are search trees built by performing n random insertions into an initially empty tree <ref> [19, 23] </ref>.
Reference: [24] <author> P.V. Poblete. </author> <title> The analysis of heuristics for search trees. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 233-248, </pages> <year> 1993. </year>
Reference-contexts: The number of descendants and the number of ascendants in random BSTs have been investigated in several previous works ([3, 5, 22, 21, 20]). The number of ascendants of a random node in a random LBST has been studied in <ref> [25, 24] </ref>. We define the number of descendants D n;j as the size of the subtree rooted at the j th node, so we count the j th node as a descendant of itself. <p> We will call the binary search trees constructed in this way locally balanced binary search trees (LBST, for short). 13 C. Mart nez and H. Prodinger Poblete and Munro [25] and Poblete <ref> [24] </ref> carry on the analysis of this heuristic and some generalizations by means of bottom-up or fringe techniques: they basically study the number of nodes that are at level k and which are the root of a subtree of size 1 or 2.
Reference: [25] <author> P.V. Poblete and J.I. Munro. </author> <title> The analysis of a fringe heuristic for binary search trees. </title> <journal> J. Algorithms, </journal> <volume> 6 </volume> <pages> 336-350, </pages> <year> 1985. </year>
Reference-contexts: Technical University of Vienna. Wiedner Hauptstrae 8-10, A-1040 Vienna, Austria. E-mail: Helmut.Prodinger@tuwien.ac.at 1 On the Number of Descendants and Ascendants 2 Locally balanced search trees (LBSTs) were introduced by Bell [4] and Walker and Wood [32], and throughly analyzed by Poblete and Munro in <ref> [25] </ref>. LBSTs have been proposed as an alternative to more complex balancing schemes for search trees. In these search trees, only local rebalancing is made; after each insertion, local rebalancing is applied to ensure that all subtrees of size 3 in the tree are complete 1 . <p> The number of descendants and the number of ascendants in random BSTs have been investigated in several previous works ([3, 5, 22, 21, 20]). The number of ascendants of a random node in a random LBST has been studied in <ref> [25, 24] </ref>. We define the number of descendants D n;j as the size of the subtree rooted at the j th node, so we count the j th node as a descendant of itself. <p> Mart nez and H. Prodinger BST LBST Of a given node Of a random node Of a given node Of a random node Average [3] Probability, Average [16] fl Average, Ascendants moments, limit variance <ref> [25] </ref> fl distribution [22, 5, 21, 17] Higher order moments, PGF, limit distribution fl Descendants Probability, Probability, PGF, average, Probability, moments [20] fl moments [20] fl variance fl moments fl Table 1: Summary of previous works and the results of this paper. <p> We are also able to compute the PGF of A n , the number of ascendants of a random node (Theorem 6.2), as well as all its moments (Theorems 6.3 and 6.4), thus extending the results of Poblete and Munro <ref> [25] </ref>. The results of previous works and the new results in this paper are summarized in Table 1. Entries corresponding to new results in this paper and to alternative derivations of previous results are marked by ' fl '. 2. <p> Such schemes guarantee logarithmic performance of searches and updates in the worst-case, but they have additional space requirements and are more difficult to implement than standard BSTs. As an alternative, several authors <ref> [4, 32, 25] </ref> have suggested the use of a simple heuristic that makes the construction of poorly balanced trees much less likely than with the use of the standard algorithms. Furthermore, the heuristic was shown to yield significant savings in the expected search time. <p> We will call the binary search trees constructed in this way locally balanced binary search trees (LBST, for short). 13 C. Mart nez and H. Prodinger Poblete and Munro <ref> [25] </ref> and Poblete [24] carry on the analysis of this heuristic and some generalizations by means of bottom-up or fringe techniques: they basically study the number of nodes that are at level k and which are the root of a subtree of size 1 or 2. <p> We shall let aside this problem and look at the probabilistic features of the number of ascendants of a random node in a random LBST. In <ref> [25] </ref> the authors considered the expectation and variance of A n in random LBSTs. To be more precise, they stated the problem in terms of unsuccessful search costs. Here, we are able to reproduce their results and extend them to higher order moments.
Reference: [26] <author> S. Roura and C. Martnez. </author> <title> Randomization of search trees by subtree size. </title> <editor> In J. Daz and M. Serna, editors, </editor> <booktitle> Proc. of the 4th European Symposium on Algorithms (ESA), volume 1136 of LNCS, </booktitle> <pages> pages 91-106. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: 1. Introduction Binary search trees are among the most important and commonly used data structures, their applications spanning a wide range of the areas of Computer Science. Standard binary search trees (BSTs, for short) are still the subject of active research, see for instance the recent articles <ref> [2, 26] </ref>.
Reference: [27] <author> B. Salvy and P. Zimmermann. </author> <title> Gfun: a Maple package for the manipulation of generating and holonomic functions in one variable. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 20(2) </volume> <pages> 163-177, </pages> <year> 1994. </year>
Reference-contexts: The last step, that of extracting coefficients in exact form, was, at large, the least systematic and mechanical one. A great deal of combinatorial identities, inspired guessing and patience was needed. Standard Maple tools like the function interp or the Gfun package <ref> [27] </ref> proved also to be useful. However, once the solution is obtained, it is just a matter of minutes to check its correctness. It is quite difficult to provide a detailed and ordered description of the methods that we used to extract coefficients from generating functions.
Reference: [28] <author> R. Sedgewick. </author> <title> Quicksort. </title> <publisher> Garland, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: Deepening our knowledge about binary search trees is interesting in its own; moreover, most of this knowledge can be translated and applied to other data structures such as heap ordered trees, k-d-trees [31], and to important algorithms like quicksort and Hoare's Find algorithm for selection (also known as quickselect) <ref> [11, 12, 28, 29] </ref>. We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them [19, 29, 8]. <p> A similar idea, namely, selecting a sample of 3 elements and taking the median of the sample as the pivot element for partitioning in algorithms like quicksort and quickselect has been shown to yield significant improvements in theory and practice <ref> [28, 16] </ref>. Random search trees, either random BSTs or random LBSTs, are search trees built by performing n random insertions into an initially empty tree [19, 23].
Reference: [29] <author> R. Sedgewick. </author> <title> Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1988. </year>
Reference-contexts: Deepening our knowledge about binary search trees is interesting in its own; moreover, most of this knowledge can be translated and applied to other data structures such as heap ordered trees, k-d-trees [31], and to important algorithms like quicksort and Hoare's Find algorithm for selection (also known as quickselect) <ref> [11, 12, 28, 29] </ref>. We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them [19, 29, 8]. <p> We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them <ref> [19, 29, 8] </ref>.
Reference: [30] <author> R. Sedgewick and Ph. Flajolet. </author> <title> An Introduction to the Analysis of Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Excellent sources of information about generating functions and their applications to combinatorics and the analysis of algorithms are <ref> [33, 31, 30, 19] </ref>. We make extensive use in this paper of probability generating functions (PGFs) as well as multi-variate generating functions whose coefficients are PGFs themselves. We define them in turn.
Reference: [31] <author> J.S. Vitter and Ph. Flajolet. </author> <title> Average-case analysis of algorithms and data structures. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, chapter 9. </booktitle> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Deepening our knowledge about binary search trees is interesting in its own; moreover, most of this knowledge can be translated and applied to other data structures such as heap ordered trees, k-d-trees <ref> [31] </ref>, and to important algorithms like quicksort and Hoare's Find algorithm for selection (also known as quickselect) [11, 12, 28, 29]. We assume that the reader is already familiar with binary search trees and the basic algorithms to manipulate them [19, 29, 8]. <p> Excellent sources of information about generating functions and their applications to combinatorics and the analysis of algorithms are <ref> [33, 31, 30, 19] </ref>. We make extensive use in this paper of probability generating functions (PGFs) as well as multi-variate generating functions whose coefficients are PGFs themselves. We define them in turn. <p> them in this paper, the reader should be aware of the existing powerful techniques to extract asymptotic information about the coefficients of a generating function if we know its behaviour near its singularities or in some case, even if we only know the functional equation satisfied by the generating function <ref> [31, 6] </ref>.
Reference: [32] <author> A. Walker and D. Wood. </author> <title> Locally balanced binary trees. </title> <journal> Comput. J., </journal> <volume> 19(4) </volume> <pages> 322-325, </pages> <year> 1976. </year>
Reference-contexts: E-mail: Conrado.Martinez@lsi.upc.es z Institut fur Algebra und Diskrete Mathematik. Technical University of Vienna. Wiedner Hauptstrae 8-10, A-1040 Vienna, Austria. E-mail: Helmut.Prodinger@tuwien.ac.at 1 On the Number of Descendants and Ascendants 2 Locally balanced search trees (LBSTs) were introduced by Bell [4] and Walker and Wood <ref> [32] </ref>, and throughly analyzed by Poblete and Munro in [25]. LBSTs have been proposed as an alternative to more complex balancing schemes for search trees. <p> Such schemes guarantee logarithmic performance of searches and updates in the worst-case, but they have additional space requirements and are more difficult to implement than standard BSTs. As an alternative, several authors <ref> [4, 32, 25] </ref> have suggested the use of a simple heuristic that makes the construction of poorly balanced trees much less likely than with the use of the standard algorithms. Furthermore, the heuristic was shown to yield significant savings in the expected search time.
Reference: [33] <editor> H. Wilf. Generatingfunctionology. </editor> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Excellent sources of information about generating functions and their applications to combinatorics and the analysis of algorithms are <ref> [33, 31, 30, 19] </ref>. We make extensive use in this paper of probability generating functions (PGFs) as well as multi-variate generating functions whose coefficients are PGFs themselves. We define them in turn.
References-found: 33

