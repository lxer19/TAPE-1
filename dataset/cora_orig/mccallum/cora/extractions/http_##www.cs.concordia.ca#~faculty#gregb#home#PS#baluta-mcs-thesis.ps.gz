URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/baluta-mcs-thesis.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Title: A Formal Specification in Z of the Relational Data Model, Version 2, of  
Author: E. F. Codd Dorel D. Baluta 
Degree: A Thesis in The Department of Computer Science Presented in Partial Fulfilment of the Requirements for the Degree of Master of Computer Science at  
Note: c Dorel D. Baluta, 1995  
Date: March 1995  
Address: Montreal, Quebec, Canada  
Affiliation: Concordia University  
Abstract-found: 0
Intro-found: 1
Reference: [Bar91] <author> Barros R. and Harper D.J., </author> <title> "Formal Development of Relational Database Applications". In: Harper D.J. and Norrie M.C.: Specifications of Database Systems, </title> <booktitle> Workshops in Computing Series, </booktitle> <pages> pp. 21-43, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: From this a VDM specification structure is derived. Another aspect of specifications for database systems is related to database applications. A complete description of a general method for the specification of relational database applications using Z is described in <ref> [Bar91, Bar93] </ref>. The method prescribes how to specify all the important aspects of relational database applications, which includes the definition of relations, the specification of constraints, and querying and updating of relations, including error handling.
Reference: [Bar93] <author> Barros R. </author> <title> "Formal Specification of Relational Database Applications: A Method and an Example". </title> <type> Research Report. </type> <institution> University of Glasgow, Department of Computing Science. </institution> <year> 1993. </year>
Reference-contexts: From this a VDM specification structure is derived. Another aspect of specifications for database systems is related to database applications. A complete description of a general method for the specification of relational database applications using Z is described in <ref> [Bar91, Bar93] </ref>. The method prescribes how to specify all the important aspects of relational database applications, which includes the definition of relations, the specification of constraints, and querying and updating of relations, including error handling.
Reference: [Bjo82] <author> Bjorner D. and Lovengreen H.H. </author> <title> "Formalization of Data Models". </title> <editor> In: Bjorner D., Jones C. et al.: </editor> <title> Formal Specification and Software Development, </title> <publisher> pp.379-442. Prentice Hall International. </publisher> <year> 1982. </year>
Reference-contexts: It also does not define all the relational retrieval operations, the integrity rules and the relational manipulative operations. The authors do define some of the relational properties, but they don't provide proofs for them. Another formalization of the relational data model is given in <ref> [Bjo82] </ref>. The authors consider two possible representations of a row (tuple): as a list of values and as a mapping from attribute names to values. They try to illustrate the consequences of 36 choosing one over the other by exemplifying both alternatives in the definition of the relational operations.
Reference: [Bjo90] <editor> Bjorner D., Hoare C.A.R. and Langmaak H. (eds). </editor> <title> VDM '90: VDM and Z Formal Methods in Software Development, </title> <booktitle> vol. 428 of Lecture Notes in 121 Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [But94] <author> Butler G. </author> <title> "Technical Trends in Industrial Software Engineering: Quality, Reuse, Modeling". </title> <note> Submitted Paper. </note> <institution> Concordia University, Department of Computer Science. </institution> <year> 1994 </year>
Reference-contexts: The ability to specify system properties in a precise and rigorous way has been invaluable in the design and implementation of many computer systems, regardless of their size [Hal90, Haye92]. Formal specifications are gaining acceptance as an 1 important component of methods for developing high-quality software <ref> [But94] </ref>. A formal specification has many roles in the development process.
Reference: [Cha92] <author> Chan D., Harper D. and Trinder P. </author> <title> "A Reference Object Oriented Data Model Specification". </title> <type> Technical Report. </type> <institution> University of Glasgow, Department of Computing Science. </institution> <year> 1992. </year>
Reference-contexts: In this approach the semantics of a schema is a possible infinite table, and there the link with the relational algebra occurs. A formal specification of an object-oriented data model using the Z specification language is presented in <ref> [Cha92] </ref>. The model supports all the essential features found in existing object-oriented data models. More important, it simultaneously supports 39 multiple inheritance, method overloading together with static type checking. The specification demonstrates the use of Z as a formal technique in an area where such a definition is greatly needed.
Reference: [Cod70] <author> Codd E.F. </author> <title> "A Relational Model of Data for Large Shared Data Banks". </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1970. </year>
Reference-contexts: One of the most popular data models which enjoys widespread acceptance is the relational data model. The relational model, first introduced by Codd in 1970 <ref> [Cod70] </ref>, has undergone a certain amount of revision and refinement since its original definition [Dat86]. The last version of it, RM/V2, was defined by Codd in 1990 [Cod90] by preserving all existing features of the previous versions (RM/V1 [Cod70], RM/T [Cod79]), and adding some new features intended to improve the understanding <p> The relational model, first introduced by Codd in 1970 <ref> [Cod70] </ref>, has undergone a certain amount of revision and refinement since its original definition [Dat86]. The last version of it, RM/V2, was defined by Codd in 1990 [Cod90] by preserving all existing features of the previous versions (RM/V1 [Cod70], RM/T [Cod79]), and adding some new features intended to improve the understanding of this data model and to enhance its power.
Reference: [Cod79] <author> Codd E.F. </author> <title> "Extending the Database Relational Model to Capture More Meaning". </title> <journal> ACM Transactions on Database Systems 4:4, </journal> <year> 1979. </year>
Reference-contexts: The relational model, first introduced by Codd in 1970 [Cod70], has undergone a certain amount of revision and refinement since its original definition [Dat86]. The last version of it, RM/V2, was defined by Codd in 1990 [Cod90] by preserving all existing features of the previous versions (RM/V1 [Cod70], RM/T <ref> [Cod79] </ref>), and adding some new features intended to improve the understanding of this data model and to enhance its power.
Reference: [Cod90] <author> Codd E.F. </author> <title> The Relational Model for Database Management: Version 2. </title> <publisher> Addison-Wesley. </publisher> <year> 1990. </year>
Reference-contexts: The relational model, first introduced by Codd in 1970 [Cod70], has undergone a certain amount of revision and refinement since its original definition [Dat86]. The last version of it, RM/V2, was defined by Codd in 1990 <ref> [Cod90] </ref> by preserving all existing features of the previous versions (RM/V1 [Cod70], RM/T [Cod79]), and adding some new features intended to improve the understanding of this data model and to enhance its power. <p> and the results of queries on the OODB. 45 Chapter 4 A Specification of the Relational Data Model Using Z The main purpose of this chapter is to define in a rigorous and precise manner the basic features of the relational data model version 2 (RM/V2) as defined by Codd <ref> [Cod90] </ref>. We define first the state space of the system, specifying concepts like domains, rows and relations. The definition of keys and integrity rules completes the state invariant of the relational data model. We define next the basic relational operators intended to retrieve and manipulate information from the database.
Reference: [Dav91] <author> Davis C. K. </author> <title> "A Denotational Approach to Object-Oriented Query Language Definition". In: Harper D.J. and Norrie M.C.: Specifications of Database 122 Systems, </title> <booktitle> Workshops in Computing Series, </booktitle> <pages> pp. 88-104, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: For each language a set of recursively defined functions is provided which map syntactically correct constructs on to elements of certain sets.These domains or sets form a second component of any such formal specification. The framework which is developed can be used to formally define any relational query language. <ref> [Dav91] </ref> introduces a denotational semantics approach to object-oriented query language definition. An object-oriented database (OODB) is characterized as a se 44 mantic domain, so that query expressions can be mapped to their meaning in terms of the OODB.
Reference: [Dat83] <author> Date C.J., </author> <title> An Introduction to Database Systems: Volume 2. </title> <publisher> Addison-Wesley. </publisher> <year> 1983. </year>
Reference-contexts: It also presents specifications of an object-oriented data model and some related Z case studies. 3.2 Formal Specifications for Data Models One of the first attempts to formalize the relational data model was done by C.J.Date <ref> [Dat83, Dat86] </ref>. The author summarizes the structure of a relational database by means of a set of production rules. Using an abstract syntax, he defines the basic concepts of the relational data model: domain, attribute, tuple, relation, keys, relational operations, relational rules.
Reference: [Dat86] <author> Date C.J., </author> <title> Relational Databases: Selected Writings. </title> <publisher> Addison-Wesley. </publisher> <year> 1986. </year>
Reference-contexts: One of the most popular data models which enjoys widespread acceptance is the relational data model. The relational model, first introduced by Codd in 1970 [Cod70], has undergone a certain amount of revision and refinement since its original definition <ref> [Dat86] </ref>. The last version of it, RM/V2, was defined by Codd in 1990 [Cod90] by preserving all existing features of the previous versions (RM/V1 [Cod70], RM/T [Cod79]), and adding some new features intended to improve the understanding of this data model and to enhance its power. <p> It also presents specifications of an object-oriented data model and some related Z case studies. 3.2 Formal Specifications for Data Models One of the first attempts to formalize the relational data model was done by C.J.Date <ref> [Dat83, Dat86] </ref>. The author summarizes the structure of a relational database by means of a set of production rules. Using an abstract syntax, he defines the basic concepts of the relational data model: domain, attribute, tuple, relation, keys, relational operations, relational rules.
Reference: [Die90] <author> Diepen M.J. and Hee K.M. </author> <title> "A formal semantics for Z and the link between Z and relational algebra". </title> <editor> In: Bjorner D., Hoare C.A.R. and Langmaak H. (eds), </editor> <booktitle> VDM '90: VDM and Z Formal Methods in Software Development, </booktitle> <volume> vol. 428, </volume> <pages> pp. </pages> <booktitle> 526-552 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The same authors present in [Jose91] a library of Z schemas for use in entity-relationship mod 38 elling. They also demonstrate how to use the library by instantiating the schemas. The relationship between Z and the relational algebra is presented in detail in <ref> [Die90] </ref>. The authors show that the relational algebra can be embedded into Z. A formal semantics for Z based on naive set theory is introduced.
Reference: [Fit90] <author> Fitzgerald J.S. and Jones C.B. </author> <title> "Modularizing the Formal Description of a Database System". </title> <editor> In: Bjorner D., Hoare C.A.R. and Langmaak H. (eds), </editor> <title> VDM '90: VDM and Z Formal Methods in Software Development, </title> <booktitle> vol. 428, pp.189-210 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <month> 123 </month>
Reference-contexts: The author presents first an initial specification and then transforms it in a rigorous way through the careful introduction of design detail in the form of data structures and operations until an implementation is reached. This single level 40 description of NDB is the starting point in <ref> [Fit90] </ref>, where a case study in the mod-ular structuring of this "flat" specification is presented. The goals are the effective separation of concerns within a specification and the module generality. <p> A Z approach in specifying the same database is presented in [Hay92]. The paper provides a comparison of the VDM approach taken in <ref> [Fit90] </ref> and the approach taken in developing Z specifications for the same systems.
Reference: [Gog75] <author> Goguen J.A. et al. </author> <title> "Abstract Data Types as Initial Algebras and Correctness of Data Representations". </title> <booktitle> Proceedings of Conference on Computer Graphics, Pattern Recognition, and Data Structures, ACM, </booktitle> <month> May </month> <year> 1975, </year> <pages> pp. 89-93. </pages>
Reference-contexts: OBJ and Larch [Wi87] are example specification languages that support an axiomatic method. The algebraic specification technique has been developed independently by Goguen et al <ref> [Gog75] </ref> and Guttag and Horning [Gu77], among others. It has been used first in the specification of abstract data types but, since then, this technique has been extended into a general-purpose approach to system specification.
Reference: [Gu77] <author> Guttag J. </author> <title> "Abstract Data Types and the Development of Data Structures". </title> <journal> Communications ACM, </journal> <volume> 20 (6), </volume> <month> pp.396-405. </month>
Reference-contexts: OBJ and Larch [Wi87] are example specification languages that support an axiomatic method. The algebraic specification technique has been developed independently by Goguen et al [Gog75] and Guttag and Horning <ref> [Gu77] </ref>, among others. It has been used first in the specification of abstract data types but, since then, this technique has been extended into a general-purpose approach to system specification.
Reference: [Hal90] <author> Hall A. </author> <title> "Seven Myths of Formal Methods". </title> <booktitle> IEEE Software 7, </booktitle> <month> 5 , September </month> <year> 1990, </year> <month> pp.11-19. </month>
Reference-contexts: The ability to specify system properties in a precise and rigorous way has been invaluable in the design and implementation of many computer systems, regardless of their size <ref> [Hal90, Haye92] </ref>. Formal specifications are gaining acceptance as an 1 important component of methods for developing high-quality software [But94]. A formal specification has many roles in the development process.
Reference: [Har92] <editor> Harper D.J. and Norrie M.C. (eds). </editor> <title> Specifications of Database Systems. </title> <publisher> Springer-Verlag. </publisher> <year> 1992. </year>
Reference: [Hay92] <author> Hayes I. </author> <title> "VDM and Z: A Comparative Case Study". </title> <journal> Formal Aspects of Computing. </journal> <volume> (1992) 4: </volume> <pages> 76-99. </pages>
Reference-contexts: They demonstrate the reusability of their modules, and also outline specifications for an n-ary relational database with normalization constraints (RDB), and an n-ary relation database with a two-level type hierarchy and no normalization constraints (IS/1). A Z approach in specifying the same database is presented in <ref> [Hay92] </ref>. The paper provides a comparison of the VDM approach taken in [Fit90] and the approach taken in developing Z specifications for the same systems.
Reference: [Haye92] <author> Hayes I. </author> <title> Specification Case Studies. </title> <publisher> Prentice Hall International. </publisher> <year> 1992. </year>
Reference-contexts: The ability to specify system properties in a precise and rigorous way has been invaluable in the design and implementation of many computer systems, regardless of their size <ref> [Hal90, Haye92] </ref>. Formal specifications are gaining acceptance as an 1 important component of methods for developing high-quality software [But94]. A formal specification has many roles in the development process. <p> Z is now used by industry as part of the software (and hardware) development process: IBM has used Z successfully in specifying parts of its CICS transaction processing 15 system <ref> [Haye92] </ref>; Z has been used to clarify an IEEE floating point standard; It is currently undergoing BSI standardization in the UK and has been accepted for the ISO standardization process internationally.
Reference: [Hoa85] <author> Hoare C.A.R. </author> <title> Communicating Sequential Processes, </title> <publisher> Prentice Hall International, </publisher> <year> 1985. </year> <month> 124 </month>
Reference-contexts: Model-oriented methods for specifying the behaviour of sequential programs and abstract data types include Parnas' state-machines [Tsa95]; VDM [Jon86]; and Z [Sp88, Sp92]. Methods for specifying the behaviour of concurrent and distributed systems include Petri nets; Milner's Calculus of Communicating Systems (CSS); and Hoare's Communicating Sequential Systems (CSP) <ref> [Hoa85] </ref>. The process algebras exemplified by CSP allow a system to be modelled by a collection of processes which communicate with one another.
Reference: [Jon86] <author> Jones C.B. </author> <title> Systematic Software Development Using VDM. </title> <publisher> Prentice Hall International, </publisher> <year> 1986. </year>
Reference-contexts: Some of these take as their starting point a large body of standard mathematical concepts and notation, including set theory and predicate logic, and use these to build models of systems. Among these, the most popular are Z [Sp88] and VDM <ref> [Jon86] </ref>, which has even been recommended to become an official standard for software system specification. Data modelling at the conceptual level has always been a major part of database design of information systems in general. <p> This approach is also called operational . These are the techniques most widespread in industrial use, and the most readily grasped. Model-oriented methods for specifying the behaviour of sequential programs and abstract data types include Parnas' state-machines [Tsa95]; VDM <ref> [Jon86] </ref>; and Z [Sp88, Sp92]. Methods for specifying the behaviour of concurrent and distributed systems include Petri nets; Milner's Calculus of Communicating Systems (CSS); and Hoare's Communicating Sequential Systems (CSP) [Hoa85].
Reference: [Jon90] <editor> Jones C.B. and Shaw R.C. (eds). </editor> <title> Case Studies in Systematic Software Development. </title> <publisher> Prentice Hall International. </publisher> <year> 1990. </year>
Reference: [Jos91] <author> Joseph M.B. and Redmond-Pyle D. </author> <title> "Entity-Relationship Models Expressed in Z: A Synthesis of Structured and Formal Methods". </title> <type> Technical Report. </type> <institution> Oxford University Computing Laboratory. </institution> <year> 1991. </year>
Reference-contexts: The paper does not include update and retrieval operations and integrity constraints. A similar paper which present the entity-relationship model expressed in Z is <ref> [Jos91] </ref>. The authors take the entity-relationship data model of a CASE tool, and provide a systematic translation of its diagrams into Z.
Reference: [Jose91] <author> Joseph M.B. and Redmond-Pyle D. </author> <title> "A Library of Z Schemas for use in Entity-Relationship Modelling". </title> <type> Technical Report. </type> <institution> Oxford University Computing Laboratory. </institution> <year> 1991. </year>
Reference-contexts: The paper provides a style of writing Z specifications that could be easily be adopted by someone familiar with entity-relationship modelling. The same authors present in <ref> [Jose91] </ref> a library of Z schemas for use in entity-relationship mod 38 elling. They also demonstrate how to use the library by instantiating the schemas. The relationship between Z and the relational algebra is presented in detail in [Die90].
Reference: [Kan90] <author> Kanellakis P.C. </author> <title> "Elements of Relational Database Theory". </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> vol. B, </volume> <pages> pp. 1175-1156, </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: A complete formalization of the relational algebra and functional dependencies is presented in <ref> [Kan90] </ref>. Using predicate logic, the author specifies the syntax and the semantics of relational retrieval operators and of functional dependencies. Different properties and theorems of the relational algebra and its declarative counterpart, the relational calculus query language, are introduced and exemplified.
Reference: [McGo94] <author> David McGoveran. </author> <title> "The Relational Model Turns 25... and We're Still Trying to Get it Right". </title> <booktitle> DBMS, </booktitle> <pages> pp. 46-60, </pages> <month> October </month> <year> 1994. </year> <month> 125 </month>
Reference-contexts: the relational data model; 4. the need for extensions such as new kinds of joins, user-defined integrity and view updatability; 5. the need for users to realize what they are missing in present relational DBMS products because only partial support of the relational model is built into these 5 products <ref> [McGo94] </ref>. It is true, and indeed significant, that the changes introduced by RM/V2 have been evolutionary, not revolutionary, in nature. Nevertheless, the situation is that (to our knowledge) there does not exist any formal definition of the RM/V2.
Reference: [Mis92] <author> Misic V., Velasevic D. and Lazarevic B. </author> <title> "Formal Specification of a Data Dictionary for an Extended ER Data Model". </title> <journal> The Computer Journal, </journal> <volume> vol. 35, no. 6, </volume> <pages> pp. 611-622, </pages> <year> 1992. </year>
Reference-contexts: Another part of this work deals with deductive data models and first-order theories. The article does not include the specification of the relational integrity rules and manipulative operators. In <ref> [Mis92] </ref>, a formal definition of the data dictionary for an extended entity 37 relationship data model is described using the Z notation. The authors define the basic objects of the model like entities and associations, cycles, cardinality, and relationships like generalisation and specialisation or identification dependence.
Reference: [Nor92] <author> Moira C. Norrie. </author> <title> "A Specification of an Object-Oriented Data Model with Relations". </title> <booktitle> Specifications of Database Systems, </booktitle> <pages> pp. 213-227, </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: More important, it simultaneously supports 39 multiple inheritance, method overloading together with static type checking. The specification demonstrates the use of Z as a formal technique in an area where such a definition is greatly needed. The BROOM data model <ref> [Nor92] </ref> combines features of the object-oriented, entity-relationship, semantic and relational data model.
Reference: [Pot91] <author> Potter B., Sinclair J. and Till D. </author> <title> An Introduction to Formal Specification and Z. </title> <publisher> Prentice Hall International. </publisher> <year> 1991. </year>
Reference-contexts: The aim of this section is to introduce the basic features of Z which will be used throughout the specification of the relational data model. For a complete reference of the syntax and semantic of the Z notation see [Sp88, Sp92], <ref> [Pot91] </ref> or [Wo92]. A specification written in Z is a mixture of formal, mathematical statements and informal explanatory text.
Reference: [Saa91] <author> Saake G. and Jungclaus R. </author> <title> "Specification of Database Applications in the TROLL Language". In: Harper D.J. and Norrie M.C.: Specifications of Database Systems, </title> <booktitle> Workshops in Computing Series, </booktitle> <pages> pp. 228-254, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: They both allow for the standardization of the database design process. Traditionally, the description of database applications consists of two parts, the database schema and a more or less formal description of the application functions. In <ref> [Saa91] </ref>, the authors present an object-oriented approach to integrate both aspects. They describe a formal model that models objects as processes that can be observed through attributes. Based on this model, the language TROLL is introduced, a logical language for the abstract object-oriented description of information systems.
Reference: [Sha90] <author> Roger C. Shaw. </author> <title> "The ISTAR Database". </title> <editor> In: Jones C.B. and Shaw R.C. (eds). </editor> <booktitle> Case Studies in Systematic Software Development, </booktitle> <pages> pp. 47-90. </pages> <publisher> Prentice Hall International. </publisher> <year> 1990. </year> <month> 126 </month>
Reference-contexts: The design specification of an early version of IST's integrated project support 41 environment, known as the ISTAR database management system, is described in <ref> [Sha90] </ref>. After describing the informal design requirements that were produced prior to the development of this database system, the author presents an analysis of the requirements using entity relationship modelling and the various database operations are identified. From this a VDM specification structure is derived.
Reference: [Som89] <author> Sommerville I. </author> <title> Software Engineering. </title> <publisher> Addison-Wesley. </publisher> <year> 1989. </year>
Reference-contexts: The need for formality and abstraction means that the specification languages cannot be based on natural language, due to its lack of precision, but must be based on mathematics. The advantages of using such a formal language for precise specifications <ref> [Som89] </ref> are as follows: 1. Formal specification provides insights into and better understanding of the soft ware requirements and software design; 2. Having a formal system specification written using a formal specification language, it may be possible to prove that a program conforms to its specification; 10 3.
Reference: [Sp88] <author> Spivey J.M. </author> <title> "An Introduction to Z and Formal Specifications". </title> <type> Technical Report. </type> <institution> Oxford University Computing Laboratory. </institution> <year> 1988. </year>
Reference-contexts: Some of these take as their starting point a large body of standard mathematical concepts and notation, including set theory and predicate logic, and use these to build models of systems. Among these, the most popular are Z <ref> [Sp88] </ref> and VDM [Jon86], which has even been recommended to become an official standard for software system specification. Data modelling at the conceptual level has always been a major part of database design of information systems in general. <p> This approach is also called operational . These are the techniques most widespread in industrial use, and the most readily grasped. Model-oriented methods for specifying the behaviour of sequential programs and abstract data types include Parnas' state-machines [Tsa95]; VDM [Jon86]; and Z <ref> [Sp88, Sp92] </ref>. Methods for specifying the behaviour of concurrent and distributed systems include Petri nets; Milner's Calculus of Communicating Systems (CSS); and Hoare's Communicating Sequential Systems (CSP) [Hoa85]. The process algebras exemplified by CSP allow a system to be modelled by a collection of processes which communicate with one another. <p> The aim of this section is to introduce the basic features of Z which will be used throughout the specification of the relational data model. For a complete reference of the syntax and semantic of the Z notation see <ref> [Sp88, Sp92] </ref>, [Pot91] or [Wo92]. A specification written in Z is a mixture of formal, mathematical statements and informal explanatory text.
Reference: [Spi88] <author> Spivey J.M. </author> <title> The fuzz manual. </title> <booktitle> Computing Science Consultancy, 2 Willow Close, </booktitle> <address> Garsington, Oxford. </address> <year> 1988. </year>
Reference: [Sp92] <author> Spivey J.M. </author> <title> The Z Notation: A Reference Manual, second edition. </title> <publisher> Prentice Hall International. </publisher> <year> 1992. </year>
Reference-contexts: This approach is also called operational . These are the techniques most widespread in industrial use, and the most readily grasped. Model-oriented methods for specifying the behaviour of sequential programs and abstract data types include Parnas' state-machines [Tsa95]; VDM [Jon86]; and Z <ref> [Sp88, Sp92] </ref>. Methods for specifying the behaviour of concurrent and distributed systems include Petri nets; Milner's Calculus of Communicating Systems (CSS); and Hoare's Communicating Sequential Systems (CSP) [Hoa85]. The process algebras exemplified by CSP allow a system to be modelled by a collection of processes which communicate with one another. <p> The aim of this section is to introduce the basic features of Z which will be used throughout the specification of the relational data model. For a complete reference of the syntax and semantic of the Z notation see <ref> [Sp88, Sp92] </ref>, [Pot91] or [Wo92]. A specification written in Z is a mixture of formal, mathematical statements and informal explanatory text.
Reference: [Su85] <author> Sufrin B. and Hughes J. </author> <title> "A Tutorial Introduction to Relational Algebra". </title> <booktitle> Programming Research Group, </booktitle> <address> Oxford, </address> <note> Draft for comment </note>
Reference-contexts: The paper does not include the specification of the manipulative oper 35 ations and considers the relational data model as defined at that moment. These semi-formal definitions do not make it possible to proove the well-known relational properties. In <ref> [Su85] </ref>, a brief definition of the algebra which underlies the relational approach to databases is presented. Using the notations of set theory, extended slightly to provide a means of naming mathematical structures, the authors formalize the base concepts of the relational algebra.
Reference: [Tha90] <author> Thayer R. and Dorfman M. </author> <title> System and Software Requirements Engineering. </title> <publisher> IEEE Computer Society Press Tutorial, </publisher> <year> 1990. </year>
Reference: [Tsa95] <author> Tsai J.P., Yang S. J. and Chang Y.H. </author> <title> "Timing Constraint Petri Nets and their Application to Schedulability Analysis of Real-Time System Specifications". </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 21, no. 1, </volume> <month> January </month> <year> 1995, </year> <pages> pp. 32-49. </pages>
Reference-contexts: This approach is also called operational . These are the techniques most widespread in industrial use, and the most readily grasped. Model-oriented methods for specifying the behaviour of sequential programs and abstract data types include Parnas' state-machines <ref> [Tsa95] </ref>; VDM [Jon86]; and Z [Sp88, Sp92]. Methods for specifying the behaviour of concurrent and distributed systems include Petri nets; Milner's Calculus of Communicating Systems (CSS); and Hoare's Communicating Sequential Systems (CSP) [Hoa85].
Reference: [Tse91] <author> Tse T.H. and Pong L. </author> <title> "An Examination of Requirements Specification Lan--guages". </title> <journal> The Computer Journal, </journal> <volume> vol. 34, </volume> <pages> no.2, pp. 143-152, </pages> <year> 1991. </year>
Reference-contexts: In order for a requirement specification to be useful in systems development, the specification language must exhibit various features which contribute to the ease and user-friendliness of the specification process <ref> [Tse91] </ref>. 2.2 Common Families of Formal Specification Lan guages The most commonly encountered families of formal specification languages are model-oriented and property-oriented techniques [Wi90]. Using a model-oriented method, a specifier defines a system's behavior directly by constructing a model of the system in terms of mathematical structures.
Reference: [Tur85] <author> Turner R. and Lowden B.G.T. </author> <title> "An Introduction to the Formal Specification of Relational Query Languages". </title> <journal> The Computer Journal, </journal> <volume> vol. 28, no. 2, </volume> <pages> pp. 162-169, </pages> <year> 1985. </year>
Reference-contexts: A general class of integrity constraints is defined, and examples are given to show both static and dynamic constraints within this class. An introduction to the use of formal semantics as a means of specifying relational query languages is presented in <ref> [Tur85] </ref>. The authors provide a formal semantic framework which can be used in tackling different problems like the well-formedness and correcteness of queries and other problems of relational query language analysis.
Reference: [Wal90] <author> Walshe A. "NDB: </author> <title> The Formal Specification and Rigorous Design of a Single User Database System". </title> <editor> In: Jones C.B. and Shaw R.C. (eds). </editor> <booktitle> Case Studies in Systematic Software Development, </booktitle> <pages> pp. 11-45. </pages> <publisher> Prentice Hall International. </publisher> <year> 1990. </year>
Reference-contexts: model and indicating how this may then be transformed into a formal specification in the Z language. 3.3 Formal Specifications for Databases The use of VDM in the formal specification and design of a program to implement simple update operations on a binary relational database called NDB is described in <ref> [Wal90] </ref>. The author presents first an initial specification and then transforms it in a rigorous way through the careful introduction of design detail in the form of data structures and operations until an implementation is reached. <p> The goals are the effective separation of concerns within a specification and the module generality. In addition to the flat specification of NDB introduced by <ref> [Wal90] </ref>, the authors present a second specification which makes use of an n-ary relation module, and a third one which uses an n-ary relation module with type and normalization constraints.
Reference: [Wi87] <author> Wing J.M. </author> <title> "Writing Larch Interface Language Specifications". </title> <journal> ACM Transactions Programming Languages and Systems, </journal> <month> Jan. </month> <year> 1987, </year> <pages> pp. 27-44. </pages>
Reference-contexts: Axiomatic methods stem from Hoare's work on proofs of correctness of implementations of abstract data types, where first-order predicate logic preconditions and postconditions are used for the specification of each data type. OBJ and Larch <ref> [Wi87] </ref> are example specification languages that support an axiomatic method. The algebraic specification technique has been developed independently by Goguen et al [Gog75] and Guttag and Horning [Gu77], among others.
Reference: [Wi90] <author> Wing J.M. </author> <title> "A Specifier's Introduction to Formal Methods". </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> Sept. </month> <year> 1990, </year> <pages> pp. 8-22. </pages>
Reference-contexts: a requirement specification to be useful in systems development, the specification language must exhibit various features which contribute to the ease and user-friendliness of the specification process [Tse91]. 2.2 Common Families of Formal Specification Lan guages The most commonly encountered families of formal specification languages are model-oriented and property-oriented techniques <ref> [Wi90] </ref>. Using a model-oriented method, a specifier defines a system's behavior directly by constructing a model of the system in terms of mathematical structures.
Reference: [Wo92] <author> Wordsworth J.B. </author> <title> Software Development with Z. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year> <month> 128 </month>
Reference-contexts: The aim of this section is to introduce the basic features of Z which will be used throughout the specification of the relational data model. For a complete reference of the syntax and semantic of the Z notation see [Sp88, Sp92], [Pot91] or <ref> [Wo92] </ref>. A specification written in Z is a mixture of formal, mathematical statements and informal explanatory text.
Reference: [Wor91] <author> Worboys M.F. </author> <title> "Database Specification using Transaction Sets". In: Harper D.J. and Norrie M.C.: Specifications of Database Systems, </title> <booktitle> Workshops in Computing Series, </booktitle> <pages> pp. 300-319, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <month> 129 </month>
Reference-contexts: The authors propose a mechanism for defining and handling external views and for queries that fit in the framework. An algebraic approach to the specification of relational database systems is described in <ref> [Wor91] </ref>. The author shows how specifications may be constructed using axiomatizations of transaction semigroups which generate database instances. A general class of tuple-based transactions is defined, and it is shown how unconstrained 43 insertions and deletions may be modelled and axiomatically characterized using this class.
References-found: 46

