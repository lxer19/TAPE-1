URL: ftp://ftp.cs.dartmouth.edu/TR/TR97-312.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR97-312/
Root-URL: http://www.cs.dartmouth.edu
Title: A Split-Phase Interface for Parallel File Systems  
Date: 20, 1997  
Web: URL ftp://ftp.cs.dartmouth.edu/TR/TR97-312.ps.Z  
Note: Available at  March  
Abstract: Sanjay Khanna David Kotz Department of Computer Science Dartmouth College 6211 Sudikoff Laboratory Hanover, NH 03755-3510 fkaun,dfkg@cs.dartmouth.edu Technical Report PCS-TR97-312 Abstract We describe the effects of a new user-level library for the Galley Parallel File System. This library allows some pre-existing sequential programs to make use of the Galley Parallel File System with minimal modification. It permits programs to efficiently use the parallel file system because the user-level library groups accesses together. We examine the performance of our library, and we show how code needs to be modified to use the library. 
Abstract-found: 1
Intro-found: 1
Reference: [CDG + 93] <author> David E. Culler, Andrea Drusseau, Seth Copen Goldstein, Arvind Krishnamurthy, Steven Lumetta, Thorsten von Eicken, and Katherine Yelick. </author> <title> Parallel programming in Split-C. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 262-283, </pages> <address> Portland, OR, 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Our user-level library is built on top of the Galley Parallel File System [NK97], which is described in the next section. We attempt to enable programmers to adapt existing programs to the Galley Parallel File System, resulting in a programming style similar to that of Split-C <ref> [CDG + 93] </ref>. In Split-C, programs communicate data between processors using split-phase get and put operations. The process makes a series of asynchronous get and put requests, then blocks waiting for all gets and puts to complete. Our work may also be compared to the Vesta Parallel File System [CF96].
Reference: [CF96] <author> Peter F. Corbett and Dror G. Feitelson. </author> <title> The Vesta parallel file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 14(3) </volume> <pages> 225-264, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: In Split-C, programs communicate data between processors using split-phase get and put operations. The process makes a series of asynchronous get and put requests, then blocks waiting for all gets and puts to complete. Our work may also be compared to the Vesta Parallel File System <ref> [CF96] </ref>. Vesta allows users to distribute files on multiple I/O nodes, similar to Galley. Galley requires the user to define the number of subfiles (one per I/O node) used for a file at the time of its creation.
Reference: [NK97] <author> Nils Nieuwejaar and David Kotz. </author> <title> The Galley parallel file system. </title> <journal> Parallel Computing, </journal> <volume> 23(4), </volume> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: 1 Introduction Many parallel applications are limited by the performance of the I/O system, and the performance of many I/O systems is currently limited by the file system. The Galley Parallel File System <ref> [NK97] </ref> has demonstrated that it can provide parallel applications with high-throughput access to their data files, if they use new file-system interfaces. Unfortunately, it is sometimes inconvenient for programmers to rewrite their application code to fit the new interface. <p> To obtain the necessary processing and I/O speed, parallel processes run the application on many processors, and spread the data files across many disks. The Galley Parallel File System <ref> [NK97] </ref> was written both This research was funded by NSF under grant number CCR-9404919, by NASA Ames under agreement numbers NCC 2-849 and NAG 2-936, and by Sandia National Labs contract number AS-8500 1 to provide a parallel file system that programmers may use, and to provide programmers with the ability <p> Unfortunately, it is not always easy to convert legacy applications to use the new interface, because the programmer must rewrite loops to build a Galley strided-access specification. Our user-level library is built on top of the Galley Parallel File System <ref> [NK97] </ref>, which is described in the next section. We attempt to enable programmers to adapt existing programs to the Galley Parallel File System, resulting in a programming style similar to that of Split-C [CDG + 93]. In Split-C, programs communicate data between processors using split-phase get and put operations. <p> By defining the same view and selecting different stripes, a multi-process program is able to ensure that no two parts are accessing the same bytes of the file. 2.1 Galley Parallel File System The Galley Parallel File System <ref> [NK97] </ref> is a parallel file system enabling processes to read and write files that are distributed across several disks. The method of distribution of the files is left to the user or to a user-level library on top of Galley. <p> Each fork in a particular subfile is a sequential stream of data, and may be accessed similar to a Unix file. Galley provides a few different primitives for accessing the forks, and these are described in detail in the Galley paper <ref> [NK97] </ref>. Only the gfs listio () primitive is used in the GFS-GROUP library and elsewhere throughout this paper. <p> listio () function allows the program to request a list of read or write transfers to a single fork, in one request. 3 GFS-GROUP library GFS-GROUP is a user-level library to aid the conversion of existing sequential C programs using regular Unix-like I/O to use the Galley Parallel File System <ref> [NK97] </ref> with minor modifications. The library that we provide accumulates the user's requests and then submits them asynchronously to Galley as a collection of requests, thereby reducing the overhead for each request. It keeps track of handles for the requests. <p> then one group with reads, the writes may not have been completed when the reads were performed unless gfs group waitio () was also called between the two groups. 3.2 Using the GFS-GROUP library The GFS-GROUP library uses the gfs listio function call provided by the Galley Parallel File System <ref> [NK97] </ref>. This restricts each set of requests submitted to the Galley Parallel File System to access the same fork in the same subfile, and also each set of requests must be either all reads or all writes. Figure 1 is an example sequential program that accesses a regular Unix file.
Reference: [NKP + 96] <author> Nils Nieuwejaar, David Kotz, Apratim Purakayastha, Carla Schlatter Ellis, and Michael Best. </author> <title> File-access characteristics of parallel scientific workloads. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 7(10) </volume> <pages> 1075-1089, </pages> <month> October </month> <year> 1996. </year> <month> 11 </month>
Reference-contexts: Nieuwejaar studied common workloads <ref> [NKP + 96] </ref>, and discovered that files were often accessed in a strided pattern. Strided patterns occur when file accesses (reads or writes) are of a fixed size, and successive accesses are separated by a fixed number of bytes.
References-found: 4

