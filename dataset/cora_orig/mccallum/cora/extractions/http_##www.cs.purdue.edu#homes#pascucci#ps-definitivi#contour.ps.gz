URL: http://www.cs.purdue.edu/homes/pascucci/ps-definitivi/contour.ps.gz
Refering-URL: 
Root-URL: 
Title: Fast Isocontouring For Improved Interactivity  
Author: Chandrajit L. Bajaj Valerio Pascucci Daniel R. Schikore 
Keyword: Visualization, Scalar Data, Isocontouring, Range Query  
Affiliation: Shastra Lab Center for Image Analysis and Data Visualization Department of Computer Sciences Purdue University  
Abstract: We present an isocontouring algorithm which is near-optimal for real-time interaction and modification of isovalues in large datasets. A preprocessing step selects a subset S of the cells which are considered as seed cells. Given a particular isovalue, all cells in S which intersect the given isocontour are extracted using a high-performance range search. Each connected component is swept out using a fast isocontour propagation algorithm. The computational complexity for the repeated action of seed point selection and isocontour propagation is O(log n 0 + k), where n 0 is the size of S and k is the size of the output. In the worst case, n 0 = O(n), where n is the number of cells, while in practical cases, n 0 is smaller than n by one to two orders of magnitude. The general case of seed set construction for a convex complex of cells is described, in addition to a specialized algorithm suitable for meshes of regular topology, including rectilinear and curvilinear meshes. 
Abstract-found: 1
Intro-found: 1
Reference: [2] <author> GALLAGHER, R. S. </author> <title> Span filtering: An efficient scheme for volume visualization of large finite element models. </title> <booktitle> In Visualization '91 Proceedings (Oct. </booktitle> <year> 1991), </year> <editor> G. M. Nielson and L. Rosenblum, </editor> <booktitle> Eds., </booktitle> <pages> pp. 68-75. </pages>
Reference-contexts: Evident in this approach is the fact that a single cell with a large Dw drastically reduces the effectiveness of the technique when specifying a random isovalue. Gallagher describes a technique called span filtering <ref> [2] </ref>, in which the entire range space is divided into a fixed number of buckets. Cells are grouped into buckets based on the minimum value taken on by the function over the cell. <p> The important aspect to focus on is the selection criterion. A cell c of S is selected iff w 2 R (c). To achieve a good search scheme, it is important to define what our search space is. As observed in <ref> [2] </ref>, we do not need to search for the required cells in the embedding space of the cells since we select them only considering their range.
Reference: [3] <author> GILES, M., AND HAINES, R. </author> <title> Advanced interactive visualization for CFD. </title> <booktitle> Computing Systems in Engineering 1, 1 (1990), </booktitle> <pages> 51-62. </pages>
Reference-contexts: Such a geometric decomposition works well for smooth data with high spatial coherence but suffers when applied to noisy data. Recent techniques have concentrated on processing of the value space of the cells rather than the geometric space. Giles and Haimes <ref> [3] </ref> describe a method which forms two sorted lists of cells, one by minimum value and the other by maximum value.
Reference: [4] <author> HOWIE, C. T., AND BLAKE, E. H. </author> <title> The mesh propagation algorithm for isosurface construction. Computer Graphics FIGURE 7: Speedup vs. </title> <booktitle> Volume Fraction (triangles/cells) Forum 13, 3 (1994), </booktitle> <pages> 65-74. </pages> <note> Eurographics '94 Conference issue. </note>
Reference-contexts: From this structure, cells for a given isovalue can be extracted in O (log n 0 + k) time. From each selected cell, one or more connected components of the isocontour are extracted by propagation through cell adjacencies <ref> [4] </ref>. 3 ALGORITHM OVERVIEW The approach we take is based on the formalization and unification of three known techniques. The three leading ideas we are retaining are the following: 2 1. The extraction of an isocontour does not require search- ing all the cells of the mesh [5]. 2. <p> the next section, followed by a simplified approach devised for regular grids. 3.1 Contour Propagation Extraction of 2D surfaces from 3D data by mesh propagation is described by Speray and Kennon [15] for the case of arbitrary slices in unstructured meshes, while others have applied similar techniques to isocontour extraction <ref> [1, 4, 5] </ref>. The central idea is that, given an initial cell which contains the surface of interest, the remainder of the surface can be efficiently traced performing a breadth-first search in the graph of cell adjacencies, as illustrated for a 2D contour extraction in Figure 1. <p> One advantage to using a propagation approach over other techniques is that surfaces are easily transformed into a triangle strip representation for more efficient rendering <ref> [4] </ref>. Also of importance is the fact that shared vertices between cells are more efficiently located, as we are considering only a single closed contour at any given time.
Reference: [5] <author> ITOH, T., AND KOYAMADA, K. </author> <title> Automatic isosurface propagation using an extrema graph and sorted boundary cell lists. </title> <journal> IEEE Transactions of Visualization and Computer Graphics 1, </journal> <month> 4 (Dec. </month> <year> 1995), </year> <pages> 319-327. </pages>
Reference-contexts: One of the most common and useful approaches is to compute and display isocontours C = fxjF (x) = wg. It is estimated that in a 3D domain D, the average number of cells intersected by an isocontour will be O (n 2=3 ) <ref> [5] </ref>, where n is the number of cells, which can 1 See also http://www.cs.purdue.edu/research/shastra 2 Department of Computer Sciences, Purdue University, West Lafayette, IN 47907-1398 USA. Email: fbajaj,pascucci,drsg@cs.purdue.edu be generalized to O (n (d1)=d ) for a d-dimensional domain. <p> For an individual isovalue, cells which fall into a given bucket only need be examined if their span extends to the bucket containing the isovalue. Itoh and Koyamada compute a graph of the extrema values in the scalar field <ref> [5] </ref>. Every connected component of an isocontour is guaranteed to intersect at least one arc in the graph. Isocontours are generated by propagating contours from a seed point detected along these arcs. Noisy data with many extrema will reduce the performance of such a strategy. <p> The three leading ideas we are retaining are the following: 2 1. The extraction of an isocontour does not require search- ing all the cells of the mesh <ref> [5] </ref>. 2. To improve the efficiency of the cell extraction, it is necessary to define a search structure over the set of cells [18]. 3. The search space we need to work on is not the embedding space of the original mesh but the two dimensional span space [6]. <p> the next section, followed by a simplified approach devised for regular grids. 3.1 Contour Propagation Extraction of 2D surfaces from 3D data by mesh propagation is described by Speray and Kennon [15] for the case of arbitrary slices in unstructured meshes, while others have applied similar techniques to isocontour extraction <ref> [1, 4, 5] </ref>. The central idea is that, given an initial cell which contains the surface of interest, the remainder of the surface can be efficiently traced performing a breadth-first search in the graph of cell adjacencies, as illustrated for a 2D contour extraction in Figure 1.
Reference: [6] <author> LIVNAT, Y., SHEN, H. W., AND JOHNSON, C. R. </author> <title> A near optimal isosurface extraction algorithm for unstructured grids. </title> <journal> IEEE Transactions on Visualization and Computer Graphics 2, </journal> <volume> 1 (1996), </volume> <pages> 73-84. </pages>
Reference-contexts: Optimizations are performed when the isovalue is changed by a small delta. Livnat, Shen, and Johnson describe a new approach which processes the cells into a 2D min-max span space <ref> [6] </ref>. Cells are preprocessed into a Kd-tree which allows O ( p query time to determine the cells which intersect the contour, where k is the size of the output. It is reported that in the average case, k is the dominant factor, providing optimal complexity. <p> To improve the efficiency of the cell extraction, it is necessary to define a search structure over the set of cells [18]. 3. The search space we need to work on is not the embedding space of the original mesh but the two dimensional span space <ref> [6] </ref>. <p> To achieve a good search scheme, it is important to define what our search space is. As observed in [2], we do not need to search for the required cells in the embedding space of the cells since we select them only considering their range. In <ref> [6] </ref>, the two dimensional span space is considered the search space, where each cell is represented by a point whose coordinates are the two extremes [min; max] of the cell range.
Reference: [7] <author> LORENSEN, W. E., AND CLINE, H. E. </author> <title> Marching cubes: A high resolution 3D surface construction algorithm. </title> <booktitle> In Computer 10 Graphics (SIGGRAPH '87 Proceedings) (July 1987), </booktitle> <editor> M. C. Stone, Ed., </editor> <volume> vol. 21, </volume> <pages> pp. 163-169. </pages>
Reference-contexts: We present results and statistics for volume data from several domains. 2 RELATED WORK Extraction of isocontours from scalar data has received a great deal of attention in recent years. Among the contributions to the field are methods for classifying and computing intersections within a single cell <ref> [7, 11, 12, 17] </ref>. Here we are concerned primarily with the search for intersected cells, 1 while the choice of triangulation technique can be chosen based on the data characteristics and topological needs of the application.
Reference: [8] <author> MCCREIGHT, E. M. </author> <title> Priority search trees. </title> <journal> SIAM J. Comput. </journal> <volume> 14 (1985), </volume> <pages> 257-276. </pages>
Reference-contexts: In this way we can use well known search structures such as the segment tree (see e.g. [9] or [10]) or the interval tree, a specific case of a priority search tree <ref> [8] </ref>. Examples of each search tree are given in figure 5 for a small set of intervals and briefly discussed in the following paragraphs.
Reference: [9] <author> MEHLHORN, K. </author> <title> Data Structures and Algorithms 3: Multidimensional Searching and Computational Geometry, </title> <booktitle> vol. 3 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: That is, we assume as search space a set of 1D segments instead of a set of 2D points. In this way we can use well known search structures such as the segment tree (see e.g. <ref> [9] </ref> or [10]) or the interval tree, a specific case of a priority search tree [8]. Examples of each search tree are given in figure 5 for a small set of intervals and briefly discussed in the following paragraphs.
Reference: [10] <author> MULMULEY, K. </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference-contexts: That is, we assume as search space a set of 1D segments instead of a set of 2D points. In this way we can use well known search structures such as the segment tree (see e.g. [9] or <ref> [10] </ref>) or the interval tree, a specific case of a priority search tree [8]. Examples of each search tree are given in figure 5 for a small set of intervals and briefly discussed in the following paragraphs.
Reference: [11] <author> NATARAJAN, B. K. </author> <title> On generating topologically consistent isosurfaces from uniform samples. </title> <booktitle> The Visual Computer 11, 1 (1994), </booktitle> <pages> 52-62. </pages>
Reference-contexts: We present results and statistics for volume data from several domains. 2 RELATED WORK Extraction of isocontours from scalar data has received a great deal of attention in recent years. Among the contributions to the field are methods for classifying and computing intersections within a single cell <ref> [7, 11, 12, 17] </ref>. Here we are concerned primarily with the search for intersected cells, 1 while the choice of triangulation technique can be chosen based on the data characteristics and topological needs of the application.
Reference: [12] <author> NIELSON, G. M., AND HAMAAN, B. </author> <title> The asymptotic decider: Resolving the ambiguity of marching cubes. </title> <booktitle> In Visualization '91 Proceedings (Oct. </booktitle> <year> 1991), </year> <editor> G. M. Nielson and L. Rosen-blum, </editor> <booktitle> Eds., </booktitle> <pages> pp. 83-91. </pages>
Reference-contexts: We present results and statistics for volume data from several domains. 2 RELATED WORK Extraction of isocontours from scalar data has received a great deal of attention in recent years. Among the contributions to the field are methods for classifying and computing intersections within a single cell <ref> [7, 11, 12, 17] </ref>. Here we are concerned primarily with the search for intersected cells, 1 while the choice of triangulation technique can be chosen based on the data characteristics and topological needs of the application.
Reference: [13] <author> SHEN, H.-W., HANSEN, C. D., LIVNAT, Y., AND JOHNSON, C. R. </author> <title> Isosurfacing in span space with utmost efficiency. </title> <note> In Visualization '96 Proceedings (to appear) (Oct. </note> <year> 1996). </year>
Reference-contexts: The same authors, with Hansen, have recently described an advancement which demonstrates improved empirical results by using an L fi L lattice search decomposition in span space, in addition to allowing for parallel implementation on a distributed memory architecture <ref> [13] </ref>. A similar approach to ours has been developed independently by van Kreveld [16], in which seed sets are computed for the specialized case of a triangular mesh in two dimensions representing terrain for GIS applications.
Reference: [14] <author> SHEN, H.-W., AND JOHNSON, C. R. Sweeping simplices: </author> <title> A fast iso-surface extraction algorithm for unstructured grids. </title> <booktitle> In Visualization '95 Proceedings (Oct. </booktitle> <year> 1995), </year> <editor> G. M. Nielson and D. Silver, </editor> <booktitle> Eds., </booktitle> <pages> pp. 143-150. </pages>
Reference-contexts: Noisy data with many extrema will reduce the performance of such a strategy. Shen and Johnson describe a Sweeping Simplices algorithm which maintains two lists of cells, one sorted by minimum cell value, the other by the maximum cell value <ref> [14] </ref>. For a given isovalue, a binary search in the minimum value list determines all cells with minimum value below the isovalue. Pointers from the minimum value list to the maximum value list are followed to set a corresponding bit for each candidate cell.
Reference: [15] <author> SPERAY, D., AND KENNON, S. </author> <title> Volume probes: Interactive data exploration on arbitrary grids. </title> <booktitle> In Computer Graphics (San Diego Workshop on Volume Visualization) (Nov. 1990), </booktitle> <volume> vol. 24, </volume> <pages> pp. 5-12. </pages>
Reference-contexts: Details of the general algorithm for seed set construction will be described in the next section, followed by a simplified approach devised for regular grids. 3.1 Contour Propagation Extraction of 2D surfaces from 3D data by mesh propagation is described by Speray and Kennon <ref> [15] </ref> for the case of arbitrary slices in unstructured meshes, while others have applied similar techniques to isocontour extraction [1, 4, 5].
Reference: [16] <author> VAN KREVELD, M. </author> <title> Efficient methods for isoline extraction from a digital elevation model based on triangulated irregular networks. </title> <note> To appear, International Journal of Geographical Information Systems (1996). Also appeared as Technical Report UU-CS-1994-21, </note> <institution> University of Utrecht, the Netherlands. </institution>
Reference-contexts: A similar approach to ours has been developed independently by van Kreveld <ref> [16] </ref>, in which seed sets are computed for the specialized case of a triangular mesh in two dimensions representing terrain for GIS applications. An interval tree is used to perform the search for intersected seed cells, resulting in worst-case complexity of O (log n + k).
Reference: [17] <author> WILHELMS, J., AND VAN GELDER, A. </author> <title> Topological considerations in isosurface generation: Extended abstract. </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualization) 24, </booktitle> <address> 5 (Nov. </address> <year> 1990), </year> <pages> 79-86. </pages>
Reference-contexts: We present results and statistics for volume data from several domains. 2 RELATED WORK Extraction of isocontours from scalar data has received a great deal of attention in recent years. Among the contributions to the field are methods for classifying and computing intersections within a single cell <ref> [7, 11, 12, 17] </ref>. Here we are concerned primarily with the search for intersected cells, 1 while the choice of triangulation technique can be chosen based on the data characteristics and topological needs of the application.
Reference: [18] <author> WILHELMS, J., AND VAN GELDER, A. </author> <title> Octrees for faster isosur-face generation. </title> <journal> ACM Transactions on Graphics 11, </journal> <volume> 3 (1992), </volume> <pages> 201-227. </pages>
Reference-contexts: The majority of the techniques for accelerating the extraction of isocontours do so by limiting the number of cells that are visited, thereby reducing the overhead associated with the inevitable search for cells which are intersected by the isocontour. Wilhelms and Van Gelder <ref> [18] </ref> use an efficient partial oc-tree partitioning of a structured mesh with hierarchical [min; max] data in order to quickly locate cells which are intersected by the isocontour while skipping large regions of space with no contribution to the contour. <p> The extraction of an isocontour does not require search- ing all the cells of the mesh [5]. 2. To improve the efficiency of the cell extraction, it is necessary to define a search structure over the set of cells <ref> [18] </ref>. 3. The search space we need to work on is not the embedding space of the original mesh but the two dimensional span space [6]. <p> In our implementation, carefully hashed indexing of the advancing front allows us to efficiently eliminate recomputing intersections when the advancing front closes on itself, completing the extraction of a connected component. Similar to related caching techniques <ref> [1, 18] </ref>, the cache is made efficient by discarding entries which are known to not be referenced again, based on the maximum number of cells which share a given edge. 3.1.1 Cell Connectivity Given such a contour propagation scheme, we can abstract the concept to a cell connectivity graph defined in
References-found: 17

