URL: http://foner.www.media.mit.edu/people/foner/Reports/Agents-97/Yenta-level-2.ps
Refering-URL: http://foner.www.media.mit.edu/people/foner/Reports/Agents-97/
Root-URL: http://www.media.mit.edu
Email: foner@media.mit.edu  
Title: A Multi-Agent, Referral-Based Matchmaking System system, designed to find people with similar interests and introduce
Author: Yenta: Leonard N. Foner ferrals 
Date: 617/253-9601  
Address: 97), Marina del Rey, CA  20 Ames St, E15-305 Cambridge, MA 02139  
Affiliation: Agents (Agents  MIT Media Lab  
Note: To appear in: The First International Conference on Autonomous  matchmaker  
Abstract: Many important and useful applications for software agents require multiple agents on a network that communicate with each other. Such agents must find each other and perform a useful joint computation without having to know about every other such agent on the net work. As an example, this paper describes a from one agent to another in the same fashion that word-of-mouth is used when people are looking for an expert. Several prototypes of various parts of the system have been implemented, and the most recent results, including simulations of up to 1000 such agents, are pre sented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Foner, Leonard, </author> <title> Clustering and Information Sharing in an Ecology of Cooperating Agents, or How to Gossip without Spilling the Beans, Proceedings of the Conference on Computers, Freedom, and Privacy '95 Student Paper Winner, </title> <address> Burlingame, CA, </address> <year> 1995. </year>
Reference: [2] <author> Foner, Leonard, </author> <title> A Multi-Agent Referral System for Matchmaking, </title> <booktitle> PAAM 96 Proceedings , London, </booktitle> <address> England, </address> <year> 1996. </year>
Reference-contexts: What is described in this paper The following sections describe the algorithm used in a prototype of the clustering system, and some recent simulation results evaluating its performance. Earlier simulation results, along with a description of the algorithm which emphasized different aspects of Yenta-Lites operation, can be found in <ref> [2] </ref>. Note that the algorithms described below are but a small piece of the overall task. <p> Inter-agent initialization, known as bootstrapping : Find at least one other agent with which to communicate. Walk referrals and cluster: Form clusters of like-minded agents. Only a quick summary of Yenta-Lites preclustering is given here; more details have appeared elsewhere <ref> [2] </ref>, along with earlier simulatation results. Preclustering When an agent first starts running, it must determine what interests its user possesses. It does this by collecting some subset of the users email, newsgroup articles, and files; each such item is known as a grain . <p> The rumor cache contains more than just the names of other agents encountered on the network. It also contains some subset, perhaps complete, of the text of each granule corresponding to those agents. Exactly how much of this text is stored has several tradeoffs <ref> [2] </ref>; in particular, storing more text makes possible heterogeneous comparison metrics between different versions of Yenta running on the network, at a pos sible cost in space and security (due to the privacy implica tions of compromised agents) which must be ameliorated using cryptographic protocols not discussed here [3]. <p> Experimental Evaluation of the Algorithm Previous work has investigated the number of messages that must be exchanged to reach a high level of convergence, and the quality of the resulting clusters, for small numbers of agents (20 or less) <ref> [2] </ref>.
Reference: [3] <author> Foner, Leonard, </author> <title> A Security Architecture for a Multi-Agent Matchmaker, submitted to Autonomous Agents 97, </title> <institution> Marina del Rey, </institution> <year> 1997. </year>
Reference-contexts: several tradeoffs [2]; in particular, storing more text makes possible heterogeneous comparison metrics between different versions of Yenta running on the network, at a pos sible cost in space and security (due to the privacy implica tions of compromised agents) which must be ameliorated using cryptographic protocols not discussed here <ref> [3] </ref>. Getting referrals and doing clustering Now that we have all this mechanism in place, performing referrals and clustering is relatively uncomplicated. The process starts when some agent (call it A) has finished preclustering and has found at least one other agent (call it B) via bootstrapping.
Reference: [4] <editor> Huberman, B.A., editor, </editor> <publisher> The Ecology of Computation Elsevier Science Publishers B.V., </publisher> <year> 1988. </year>
Reference: [5] <author> Kautz, Henry, Milewski, Al, and Selman Bart, </author> <title> Agent Amplified Communication, </title> <booktitle> AAAI '95 Spring Symposium Workshop Notes on Information Gathering in Distributed, Heterogeneous Environments, </booktitle> <address> Stanford, CA. </address>
Reference-contexts: Their system certainly is a matchmaker, but it assumes a centralized architecture and a highly-structured representation of user interests. Others have taken a more distributed approach. For example, Kautz, Milewski, and Selman <ref> [5] </ref> report work on a prototype system for expertise location in a large company.
Reference: [6] <author> Kuokka, Daniel, and Harada, Larry, </author> <title> Matchmaking for Information Agents, </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI) '95, </booktitle>
Reference-contexts: A common technique in systems that support computation amongst a group of users is to centralize a server and have its users act like clients. Systems that match user interests to each other, and have such a centralized structure, include We-bhound/Webdoggie [9] and HOMR/Ringo/Firey [7]. Kuokka and Harada <ref> [6] </ref> describe a system that matches advertisements and requests from users and hence serves as a bro-kering service. Their system certainly is a matchmaker, but it assumes a centralized architecture and a highly-structured representation of user interests. Others have taken a more distributed approach.
Reference: [7] <editor> Lashkari, Yezdi, Metral, Max, and Maes Pattie, </editor> <booktitle> Collaborative Interface Agents, Proceedings of the Twelfth National Conference on Artificial Intelligence , MIT Press, </booktitle> <address> Cam-bridge, MA, </address> <year> 1994. </year>
Reference-contexts: A common technique in systems that support computation amongst a group of users is to centralize a server and have its users act like clients. Systems that match user interests to each other, and have such a centralized structure, include We-bhound/Webdoggie [9] and HOMR/Ringo/Firey <ref> [7] </ref>. Kuokka and Harada [6] describe a system that matches advertisements and requests from users and hence serves as a bro-kering service. Their system certainly is a matchmaker, but it assumes a centralized architecture and a highly-structured representation of user interests. Others have taken a more distributed approach.
Reference: [8] <author> Miller, George, Beckwith, Richard, Fellbaum, Christiane, Gross, Derek, and Miller, Katherine, </author> <title> Introduction to Word-Net: An On-line Lexical Database, </title> <institution> Princeton University Technical Report, </institution> <year> 1993. </year>
Reference-contexts: Given two different documents, we can then take the dot-product of their associated keyword vectors to compute similarity. This is not the only way to do this, of course. For example, consider WordNet <ref> [8] </ref>, which is a semantic net that allows comparing words based on how many links away one word is from another, and in what direction (e.g., synonym, antonym, superset, etc).
Reference: [9] <editor> Shardanand, Upendra, and Maes Pattie, </editor> <title> Social Information Filtering: Algorithms for Automating Word of Mouth, </title> <booktitle> Proceedings of the CHI '95 Conference, </booktitle> <year> 1995. </year>
Reference-contexts: A common technique in systems that support computation amongst a group of users is to centralize a server and have its users act like clients. Systems that match user interests to each other, and have such a centralized structure, include We-bhound/Webdoggie <ref> [9] </ref> and HOMR/Ringo/Firey [7]. Kuokka and Harada [6] describe a system that matches advertisements and requests from users and hence serves as a bro-kering service. Their system certainly is a matchmaker, but it assumes a centralized architecture and a highly-structured representation of user interests.
Reference: [10] <author> Zumoff, Joel, </author> <title> Users Manual for the SMART Information Retrieval System, </title> <type> Cornell Technical Report 71-95. </type>
Reference-contexts: Future work may explore the stability of the clustering algorithm in the face of nonsymmetric comparison operators. Since Yenta-Lites grains are all exclusively textual, we use a straightforward keyword-vector text comparison metric. (This is similar to SMART <ref> [10] </ref>, which was used in an earlier version of Yenta-Lite.) To compute similarity, we first stem all words in any given document (e.g., remove prefixes and suffixes and otherwise canonicalize the text), compute an inverse-frequency metric for each word in the document (so that rare words with greater power to discriminate
References-found: 10

