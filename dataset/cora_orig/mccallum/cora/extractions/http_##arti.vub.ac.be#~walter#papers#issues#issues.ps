URL: http://arti.vub.ac.be/~walter/papers/issues/issues.ps
Refering-URL: http://arti.vub.ac.be/~walter/papers/welcome.html
Root-URL: 
Title: Issues in Knowledge Level Modelling  
Author: Walter Van de Velde 
Address: Pleinlaan 2, B-1050 Brussels, Belgium  
Affiliation: Vrije Universiteit Brussel, AI-Lab  
Abstract: Since its introduction in the early 80s the notion of knowledge level has been an important catalizer of research in knowledge systems. This chapter discusses how it is being turned into a useful tool for the development of knowledge systems and how the original and present interpretations can be tied together again. It shows how the knowledge level changed our views on what knowledge systems are and how the problems with first generation expert systems might be overcome. Two other issues are discussed in some more detail. The first one is the precise methodological role of the knowledge level. The second issue concerns the nature of knowledge level theories of problem solving and its implications for next generation architectures. ?
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. </author> <title> Aamodt. A knowledge-intensive approach to problem solving and sustained learning. </title> <type> PhD thesis, </type> <institution> University of Trondheim, Norwegian Institue of Technology, Trondheim, Norway, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: A first one is to provide for dynamic method selection [31]. Based on problem characteristics, a system will choose the most adequate problem solving method. A complementary approach is to enable preferred problem solving methods by sustained learning of the knowledge that they require <ref> [40, 1] </ref>. But from a fundamental perspective all these are ad hoc solutions. Problem solving methods are still a "what" perspective and thus occupy a strange position at the knowledge level which is concerned with "why".
Reference: 2. <author> J. A. Breuker, B. J. Wielinga, M. van Someren, R. de Hoog, A. Th. Schreiber, P. de Greef, B. Bredeweg, J. Wielemaker, J. P. Billault, M. Davoodi, and S. A. Hayward. </author> <title> Model Driven Knowledge Acquisition: Interpretation Models. ESPRIT Project P1098 Deliverable D1 (task A1), </title> <institution> University of Amsterdam and STL Ltd, </institution> <year> 1987. </year>
Reference-contexts: A KL-model (in the sense of Sec. 3), by proposing an adequate structure on knowledge, can serve as a frame for knowledge acquisition. It helps in interpreting observed behaviour or in understanding protocols. This is the original role intended for the KADS interpretation models <ref> [2] </ref>. It is also the role explicit supported by the MOLE [18] and Protege work [27, 30] where dedicated knowledge acquisition tools take care of "stuffing" the knowledge in the right slots of a pre-selected or constructed KL-model. Functional Specification of System. A knowledge level model predicts be-haviour. <p> Sharing and Re-Use. Most modelling approaches to knowledge engineering assume that models associated with applications that have similar requirements will be similar. Generic or re-usable models capture these similarities and are a cornerstone in the support that such methodologies provide. For example, a KADS interpretation model <ref> [2] </ref> contains a re-usable inference structure and task decomposition, appropriate for a class of tasks. Simi--larly, a Generic Task [7] is a packet of a task and domain model that is re-usable for a series of similar tasks. <p> This is what we have called the task features previously. The earliest attempts to come up with a categorisation of application types followed a task oriented approach <ref> [9, 21, 2] </ref>. More recently other than the task perspective have been explored. McDermott's taxonomy of problem solving methods [26] takes a method orientation. Work on re-usable ontologies [20] researches into generic terminology and structures within certain domains.
Reference: 3. <author> D. C. Brown and B. Chandrasekaran. </author> <title> Design Problem Solving: Knowledge Structures and Control Strategies. </title> <booktitle> Research Notes in Artificial Intelligence. </booktitle> <publisher> Pitman, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach <ref> [7, 3] </ref> - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a
Reference: 4. <author> T. Bylander and S. Mittal. CSRL: </author> <title> A language for classificatory problem solving and uncertainty handling. </title> <journal> AI Magazine, </journal> <volume> 7, </volume> <year> 1986. </year>
Reference-contexts: The Generic Tasks of Chandrasekaran [7] are closer to methods than they are to tasks. For example, CSRL embodies a classification method that can be used for other tasks than diagnosis alone (compare [5] and <ref> [4] </ref>). Method instantiation and configuration is also an important element in the work on Protege [27] and Protege-II [30]. The domain, task and method perspective are related views on problem solving. Each of them describes knowledge in its own language: model specific, task specific, method specific.
Reference: 5. <author> T. Bylander, S. Mittal, and B. Chandrasekaran. CSRL: </author> <title> A language for expert systems for diagnosis. </title> <booktitle> In IJCAI-83, </booktitle> <pages> pages 218-221, </pages> <year> 1983. </year>
Reference-contexts: The Generic Tasks of Chandrasekaran [7] are closer to methods than they are to tasks. For example, CSRL embodies a classification method that can be used for other tasks than diagnosis alone (compare <ref> [5] </ref> and [4]). Method instantiation and configuration is also an important element in the work on Protege [27] and Protege-II [30]. The domain, task and method perspective are related views on problem solving. Each of them describes knowledge in its own language: model specific, task specific, method specific.
Reference: 6. <author> B. Chandrasekaran. </author> <title> Toward a taxonomy of problem-solving types. </title> <journal> AI Magazine, </journal> 4(4) 9-17g, 1983. 
Reference-contexts: It only requires certain inferences to be possible in the domain but does not say what models these have to be based on. So KADS advocates an analysis of the task, prior to making decisions on domain knowledge. The early work on Generic Tasks <ref> [6] </ref> was also task oriented. Problem solving method: A problem solving method is a means to relate task and domain models in order to accomplish goals. It describes roles that task and domain models have to play in order to achieve goals.
Reference: 7. <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge-based reasoning: High level building blocks for expert system design. </title> <journal> IEEE Expert, </journal> <volume> 1(3) </volume> <pages> 23-30, </pages> <year> 1986. </year>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> The idea immediately resonated with ongoing research toward understanding and building knowledge systems from a knowledge content (epistemological) perspective <ref> [10, 38, 7] </ref>. Clancey's model of heuristic classification [11] illustrated the power and scope of competence models that make explicit the kinds of knowledge embodied in a system and their roles in an overall pattern of reasoning. <p> Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach <ref> [7, 3] </ref> - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a <p> The idea that the notion of problem solving method makes sense independent of the notion of task was convincingly argued for by Clancey [11] but in practice methods seem to remain closely linked to tasks. The Generic Tasks of Chandrasekaran <ref> [7] </ref> are closer to methods than they are to tasks. For example, CSRL embodies a classification method that can be used for other tasks than diagnosis alone (compare [5] and [4]). Method instantiation and configuration is also an important element in the work on Protege [27] and Protege-II [30]. <p> This structure is what we have called the KL-model. The Generic Task approach was the first to illustrate the idea of linking re-usable models to re-usable pieces of code <ref> [7] </ref>. Ever since methodological approaches to second generation expert systems almost invariably rely on mapping the structure of a KL-model to the architecture of the application [24, 37, 43]. This KL-model or parts of it are used to "stuff in" the specialized knowledge [27]. <p> Generic or re-usable models capture these similarities and are a cornerstone in the support that such methodologies provide. For example, a KADS interpretation model [2] contains a re-usable inference structure and task decomposition, appropriate for a class of tasks. Simi--larly, a Generic Task <ref> [7] </ref> is a packet of a task and domain model that is re-usable for a series of similar tasks. With respect to the last role it is assumed that an analysis of the requirements of the application provides an index to a re-usable model.
Reference: 8. <author> B. Chandrasekaran. </author> <title> Generic tasks: The evolution of an idea. </title> <type> Technical report, </type> <institution> Ohio State University, </institution> <year> 1992. </year>
Reference-contexts: Each of them describes knowledge in its own language: model specific, task specific, method specific. A KL-model brings together these three perspectives in a coherent model. More and more the importance of all three aspects is being recognized and taken into account <ref> [8, 36, 48] </ref>. These KL-models, however, focus on describing the process of problem solving and have little to say about what problem solving is. For example a role-limiting method makes explicit control over actions that, when it is followed leads to the completion of some goal.
Reference: 9. <author> B. Chandrasekaran and S. Mittal. </author> <title> Deep versus compiled knowledge approaches to diagnostic problem solving. </title> <journal> Int. J. Man-Machine Studies, </journal> <volume> 19 </volume> <pages> 425-436, </pages> <year> 1983. </year>
Reference-contexts: This is what we have called the task features previously. The earliest attempts to come up with a categorisation of application types followed a task oriented approach <ref> [9, 21, 2] </ref>. More recently other than the task perspective have been explored. McDermott's taxonomy of problem solving methods [26] takes a method orientation. Work on re-usable ontologies [20] researches into generic terminology and structures within certain domains.
Reference: 10. <author> W. J. Clancey. </author> <title> The epistemology of rule-based expert systems a framework for explanation. </title> <journal> Artificial Intelligence, </journal> <volume> 20 </volume> <pages> 215-251, </pages> <year> 1983. </year>
Reference-contexts: The idea immediately resonated with ongoing research toward understanding and building knowledge systems from a knowledge content (epistemological) perspective <ref> [10, 38, 7] </ref>. Clancey's model of heuristic classification [11] illustrated the power and scope of competence models that make explicit the kinds of knowledge embodied in a system and their roles in an overall pattern of reasoning. <p> However, second generation expert systems do not necessarily embody deep knowledge in this narrow sense. More generally, the idea is that the knowledge which they embody is analysed and represented up to its constituent role-specific pieces <ref> [15, 16, 38, 10] </ref>. In retrospect we now view much of the work on second generation expert systems as contributions to a knowledge level theory of specialised intelligence.
Reference: 11. <author> W. J. Clancey. </author> <title> Heuristic classification. </title> <journal> Artificial Intelligence, </journal> <volume> 27 </volume> <pages> 289-350, </pages> <year> 1985. </year>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> The idea immediately resonated with ongoing research toward understanding and building knowledge systems from a knowledge content (epistemological) perspective [10, 38, 7]. Clancey's model of heuristic classification <ref> [11] </ref> illustrated the power and scope of competence models that make explicit the kinds of knowledge embodied in a system and their roles in an overall pattern of reasoning. <p> It is a use-specific window on the knowledge level, which in turn is a model of behaviour. For example, the model of heuristic classification is visible in a pattern of inferences that contribute to abstract, heuristic match and refinement steps in reasoning <ref> [11] </ref>. This well known example also illustrates what is meant by structure, namely role-limitation [26]: the role in reasoning of parts of the knowledge is being specialised. In addition, these parts of the knowledge are being organised, for example into hierarchies or causal networks. <p> The idea that the notion of problem solving method makes sense independent of the notion of task was convincingly argued for by Clancey <ref> [11] </ref> but in practice methods seem to remain closely linked to tasks. The Generic Tasks of Chandrasekaran [7] are closer to methods than they are to tasks. For example, CSRL embodies a classification method that can be used for other tasks than diagnosis alone (compare [5] and [4]).
Reference: 12. <author> W. J. Clancey. </author> <title> Model construction operators. </title> <journal> Artificial Intelligence, </journal> <volume> 53(1) </volume> <pages> 1-115, </pages> <year> 1992. </year>
Reference-contexts: The goal of problem solving is to select one of the possible actions. More recently a different view is being explored, namely the view of problem solving as modelling. The idea is that problem solving is the construction of a situation specific model <ref> [12] </ref> or case model [35, 47]. From a knowledge level perspective the agent's perception of the world is through knowledge alone. A goal therefore must correspond to a desired state of ones knowledge about the world. Consequently this knowledge must refer to the specific systems that the goal is about. <p> Clancey pointed out that the metaphor of blackboard systems is useful for this: all systems involved in the problem solving process work on and communicate through a common blackboard which at all times reflect the state of understanding of the problem <ref> [12] </ref>. Again we are far from the view that problem solvers are input-output devices.
Reference: 13. <author> William J. Clancey. </author> <title> The knowledge level reinterpreted: Modeling how systems interact. </title> <journal> Machine Learning, Special Issue on Knowledge Acquisition, </journal> <volume> 4(3, 4):285 - 292, </volume> <year> 1989. </year>
Reference-contexts: Nevertheless the knowledge level is not beyond critique and several authors have pointed out problems with it. Some of these problems required further clarification <ref> [13] </ref> or minor repairs [33, 37]. Others have been claimed to be unrepairable, which would render the knowledge level useless [45]. <p> Note that the object of modelling at the knowledge level is not knowledge but behaviour, i.e., observed interaction between an agent and its environment <ref> [13] </ref>. A knowledge level model is a model of behaviour in terms of knowledge, just like a symbol level model is a model of interaction in terms of symbols and representations.
Reference: 14. <author> William J. Clancey. </author> <title> The frame of reference problem in the design of intelligent machines. </title> <editor> In K. vanLehn and A. Newell, editors, </editor> <booktitle> Architectures for Intelligence: The Twenty Second Carnegie Symposium on Artificial Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1990. </year>
Reference-contexts: Knowledge should be viewed as an element in the model of behaviour that is constructed by the observer <ref> [14] </ref>.
Reference: 15. <author> R. Davis. </author> <title> Expert systems: where are we? and where do we go from here? AI Memo 665, </title> <publisher> MIT AI-Lab, </publisher> <year> 1982. </year>
Reference-contexts: These elements constitute the model ontologies and account for predictive power, an essential feature of any model. Model oriented approaches in knowledge engineering are quite old <ref> [15, 16] </ref> and reasoning from first principles has become an active line of research. Here the idea is that the kind of knowledge that is available about a domain gives a clue for the kind of reasoning that is being done for a certain task. <p> However, second generation expert systems do not necessarily embody deep knowledge in this narrow sense. More generally, the idea is that the knowledge which they embody is analysed and represented up to its constituent role-specific pieces <ref> [15, 16, 38, 10] </ref>. In retrospect we now view much of the work on second generation expert systems as contributions to a knowledge level theory of specialised intelligence.
Reference: 16. <author> R. Davis. </author> <title> Reasoning from first principles in electronic trouble shooting. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 19 </volume> <pages> 403-423, </pages> <year> 1983. </year>
Reference-contexts: These elements constitute the model ontologies and account for predictive power, an essential feature of any model. Model oriented approaches in knowledge engineering are quite old <ref> [15, 16] </ref> and reasoning from first principles has become an active line of research. Here the idea is that the kind of knowledge that is available about a domain gives a clue for the kind of reasoning that is being done for a certain task. <p> However, second generation expert systems do not necessarily embody deep knowledge in this narrow sense. More generally, the idea is that the knowledge which they embody is analysed and represented up to its constituent role-specific pieces <ref> [15, 16, 38, 10] </ref>. In retrospect we now view much of the work on second generation expert systems as contributions to a knowledge level theory of specialised intelligence.
Reference: 17. <author> T. G. Dietterich. </author> <title> Learning at the knowledge level. </title> <journal> Machine Learning, </journal> <volume> 1 </volume> <pages> 287-316, </pages> <year> 1986. </year>
Reference-contexts: It can be used for characterising the behaviour of any complex system, for example of an autonomous agent, even if it is behaviour- rather than knowledge based. In addition the knowledge level can be used to describe different aspects of intelligent behaviour, like learning <ref> [17, 41] </ref>. In this paper I only consider the problem solving or performance aspects. toward reaching its goals. The behaviour of the agent is explained and predicted in terms of the reasons that the agent is assumed to have to take certain actions in order to reach ascribed goals. <p> In more detail a knowledge level description is based on the following model of the behaviour of an agent <ref> [17] </ref>: The agent possesses knowledge Some of this knowledge constitutes the goals of the agent The agent has the ability to perform a set of actions The agent chooses actions according to the principle of rationality: The agent will select an action to perform next which according to its knowledge leads
Reference: 18. <author> L. Eshelman. MOLE: </author> <title> A knowledge-acquisition tool for cover-and-differentiate systems. </title> <editor> In S. Marcus, editor, </editor> <booktitle> Automating Knowledge Acquisition for Expert Systems, </booktitle> <pages> pages 37-80. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> The Netherlands, </address> <year> 1988. </year>
Reference-contexts: It helps in interpreting observed behaviour or in understanding protocols. This is the original role intended for the KADS interpretation models [2]. It is also the role explicit supported by the MOLE <ref> [18] </ref> and Protege work [27, 30] where dedicated knowledge acquisition tools take care of "stuffing" the knowledge in the right slots of a pre-selected or constructed KL-model. Functional Specification of System. A knowledge level model predicts be-haviour.
Reference: 19. <author> M. Genesereth and R. E. Fikes. </author> <title> Knowledge interchange format version 3.0 reference manual. </title> <type> Report Logic 92-1, </type> <institution> Logic Group, Stanford University, </institution> <address> CA., </address> <year> 1992. </year>
Reference-contexts: knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF <ref> [19] </ref> and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. If one looks more closely then one finds striking differences with the original knowledge level descriptions. <p> More recently other than the task perspective have been explored. McDermott's taxonomy of problem solving methods [26] takes a method orientation. Work on re-usable ontologies [20] researches into generic terminology and structures within certain domains. Work on KIF the knowledge interchange format is prototypical for this research <ref> [19] </ref>. KIF is a logic based language that can be used as an implementation independent format for exchanging knowledge bases. A specialisation of KIF, called OntoLingua [20], can capture in a general and standardised way ontologies that are useful in domains such as medical diagnosis or design.
Reference: 20. <author> T. Gruber. Ontolingua: </author> <title> A mechanism to support portable ontologies. version 3.0. </title> <type> Technical report, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <address> CA, </address> <year> 1992. </year>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua <ref> [20] </ref> They take the knowledge level as a source of inspiration or as a way to explain what they are doing. If one looks more closely then one finds striking differences with the original knowledge level descriptions. <p> Such a domain model provides a reasoner with a reper-toire of reasoning steps that are not specific for a task but can be usefully combined for a variety of tasks, like for prediction and diagnosis. Domain and model ontologies are studied for example in OntoLingua <ref> [20] </ref> and in CommonKADS [47]. It is becoming increasingly clear that domain knowledge is an important indicator for the kind of KL-model that is appropriate [29, 49]. Task model: A task model is a means to talk about goals in a precise and systematic way. <p> The earliest attempts to come up with a categorisation of application types followed a task oriented approach [9, 21, 2]. More recently other than the task perspective have been explored. McDermott's taxonomy of problem solving methods [26] takes a method orientation. Work on re-usable ontologies <ref> [20] </ref> researches into generic terminology and structures within certain domains. Work on KIF the knowledge interchange format is prototypical for this research [19]. KIF is a logic based language that can be used as an implementation independent format for exchanging knowledge bases. A specialisation of KIF, called OntoLingua [20], can capture <p> re-usable ontologies <ref> [20] </ref> researches into generic terminology and structures within certain domains. Work on KIF the knowledge interchange format is prototypical for this research [19]. KIF is a logic based language that can be used as an implementation independent format for exchanging knowledge bases. A specialisation of KIF, called OntoLingua [20], can capture in a general and standardised way ontologies that are useful in domains such as medical diagnosis or design. Steels' Componential Methodology [36] supports the usage of chunks that contain any combination of task, domain, problem solving method with or without associated pieces of code.
Reference: 21. <author> F. Hayes-Roth, D. A. Waterman, and D. B. Lenat. </author> <title> Building Expert Systems. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: This is what we have called the task features previously. The earliest attempts to come up with a categorisation of application types followed a task oriented approach <ref> [9, 21, 2] </ref>. More recently other than the task perspective have been explored. McDermott's taxonomy of problem solving methods [26] takes a method orientation. Work on re-usable ontologies [20] researches into generic terminology and structures within certain domains.
Reference: 22. <author> G. Klinker, C. Bhola, G. Dallemagne, D. Marques, and J. McDermott. </author> <title> Usable and reusable programming constructs. </title> <journal> Knowledge Acquisition, </journal> <volume> 3 </volume> <pages> 117-136, </pages> <year> 1991. </year>
Reference-contexts: Task specific shells, for example, hard-wire the structure of knowledge and the control of using it, and are therefore limited in scope. Method specific shells are slightly broader since they use a method specific rather than a task specific terminology <ref> [24, 22] </ref>. They therefore require an additional mapping from task to method. In a more sophisticated approach the methods are configured from smaller building blocks [30] or re-usable chunks of models and executables can be put together, inspected and modified at all levels of descriptions [36]. <p> The assumption behind this role is that a KL-model can be found that is adequate for the range of situations one wants to deal with. Moreover this can be done before the detailed knowledge has been acquired (see also the tools described in <ref> [22] </ref> and [30]). Consider the situation of a human expert behaving in an environment, and then replace that expert by a system, or by an agent-system combination (Fig. 7).
Reference: 23. <author> Marc Linster. </author> <title> Knowledge acquisition based on explicit methods of problem-solving. </title> <type> PhD thesis, </type> <institution> University of Kaiserslautern, </institution> <year> 1992. </year>
Reference-contexts: A major weakness in the combination of these roles is that it hides a subtle shift from observed behaviour (for example from an expert) to system behaviour. As Linster put it, there is modelling for making sense and modelling for system design <ref> [23] </ref>. It is tacitly assumed that a smooth transition from the one to the other is possible and useful. The assumption behind this role is that a KL-model can be found that is adequate for the range of situations one wants to deal with.
Reference: 24. <author> S. Marcus, </author> <title> editor. Automatic knowledge acquisition for expert systems. </title> <publisher> Kluwer, </publisher> <year> 1988. </year>
Reference-contexts: Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods <ref> [26, 24] </ref> Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. <p> A problem solving method is not a fully specified way to accomplish a task, but its application generates a way of accomplishing a task. The research by John McDermott and his team at Digital <ref> [24] </ref> is prototypical for the method oriented approach. They have embarked on an encompassing effort to catalogue problem solving methods and to systematically probe for their scope of applicability by doing a series of applications and variations on them. <p> The Generic Task approach was the first to illustrate the idea of linking re-usable models to re-usable pieces of code [7]. Ever since methodological approaches to second generation expert systems almost invariably rely on mapping the structure of a KL-model to the architecture of the application <ref> [24, 37, 43] </ref>. This KL-model or parts of it are used to "stuff in" the specialized knowledge [27]. It is remarkable that architectures are focused on making control decisions explicit, either in method or in task specific ways. <p> Task specific shells, for example, hard-wire the structure of knowledge and the control of using it, and are therefore limited in scope. Method specific shells are slightly broader since they use a method specific rather than a task specific terminology <ref> [24, 22] </ref>. They therefore require an additional mapping from task to method. In a more sophisticated approach the methods are configured from smaller building blocks [30] or re-usable chunks of models and executables can be put together, inspected and modified at all levels of descriptions [36].
Reference: 25. <author> H. Maturana. </author> <title> Biology of cognition. </title> <editor> In F. Varela and H. Maturana, editors, Au-topoiesis and Cognition. </editor> <publisher> Reidel, </publisher> <address> London, </address> <year> 1980. </year>
Reference-contexts: We are now in a peculiar position by claiming that knowledge is a resource for action and action is a resource for knowledge. This circular view on knowledge and behavior is reminiscent of Maturana's view of autonomous systems <ref> [25] </ref>. We use it here as a view from the observer's perspective without making claims, as Maturana does, about implications for a biological theory of cognition.
Reference: 26. <author> J. McDermott. </author> <title> Preliminary steps towards a taxonomy of problem-solving methods. </title> <editor> In S. Marcus, editor, </editor> <booktitle> Automating Knowledge Acquisition for Expert Systems, </booktitle> <pages> pages 225-255. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> The Netherlands, </address> <year> 1988. </year>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods <ref> [26, 24] </ref> Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. <p> For example, the model of heuristic classification is visible in a pattern of inferences that contribute to abstract, heuristic match and refinement steps in reasoning [11]. This well known example also illustrates what is meant by structure, namely role-limitation <ref> [26] </ref>: the role in reasoning of parts of the knowledge is being specialised. In addition, these parts of the knowledge are being organised, for example into hierarchies or causal networks. <p> This is what we have called the task features previously. The earliest attempts to come up with a categorisation of application types followed a task oriented approach [9, 21, 2]. More recently other than the task perspective have been explored. McDermott's taxonomy of problem solving methods <ref> [26] </ref> takes a method orientation. Work on re-usable ontologies [20] researches into generic terminology and structures within certain domains. Work on KIF the knowledge interchange format is prototypical for this research [19].
Reference: 27. <author> M. A. Musen. </author> <title> Automated Generation of Model-Based Knowledge-Acquisition Tools. </title> <publisher> Pitman, </publisher> <address> London, </address> <year> 1989. </year> <note> Research Notes in Artificial Intelligence. </note>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege <ref> [27] </ref> and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. If one looks more closely then one finds striking differences with the original knowledge level descriptions. <p> For example, CSRL embodies a classification method that can be used for other tasks than diagnosis alone (compare [5] and [4]). Method instantiation and configuration is also an important element in the work on Protege <ref> [27] </ref> and Protege-II [30]. The domain, task and method perspective are related views on problem solving. Each of them describes knowledge in its own language: model specific, task specific, method specific. A KL-model brings together these three perspectives in a coherent model. <p> Ever since methodological approaches to second generation expert systems almost invariably rely on mapping the structure of a KL-model to the architecture of the application [24, 37, 43]. This KL-model or parts of it are used to "stuff in" the specialized knowledge <ref> [27] </ref>. It is remarkable that architectures are focused on making control decisions explicit, either in method or in task specific ways. Task specific shells, for example, hard-wire the structure of knowledge and the control of using it, and are therefore limited in scope. <p> It helps in interpreting observed behaviour or in understanding protocols. This is the original role intended for the KADS interpretation models [2]. It is also the role explicit supported by the MOLE [18] and Protege work <ref> [27, 30] </ref> where dedicated knowledge acquisition tools take care of "stuffing" the knowledge in the right slots of a pre-selected or constructed KL-model. Functional Specification of System. A knowledge level model predicts be-haviour. It can therefore be naturally interpreted as a functional specification of a system's behaviour.
Reference: 28. <author> A. Newell. </author> <title> The knowledge level. </title> <journal> Artificial Intelligence, </journal> <volume> 18 </volume> <pages> 87-127, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction The notion of `knowledge level' was introduced by Allen Newell more than a decade ago <ref> [28] </ref>. Ever since it has provided a common perspective for researchers in Artificial Intelligence (AI) and in knowledge systems in particular. Its impact has been tremendous. Newell managed to make explicit what had become common practice in AI, namely talking about intelligent systems in a language of `knowing' and `wanting'. <p> In Sect. 8 the methodological role of knowledge level modelling is discussed. Finally, Sect. 9 is a brief conclusion. 2 The Knowledge Level According to Newell The knowledge level <ref> [28] </ref> provides the means to 'rationalise' the behaviour of a system from the standpoint of an external observer. <p> of rationalisable behaviour but rather to the reoccurrence of a structure of such a rationalisation over a range of behaviours. 4 Two Step Rationality How can the above be reconciled with Newell's notion of knowledge level? The principle of rationality (Sect. 2) relates knowledge to behaviour in a single step <ref> [28] </ref>. It serves as a global interpreter for the knowledge of the agent in order to understand observed behaviour or to predict future behaviour. Two step rationality [42] views this process as consisting of two steps: configuration and application (Fig. 3): Fig. 3. <p> In this sense knowledge is a means to an end, a resource for be-haviour <ref> [28] </ref>. The goal of problem solving is to select one of the possible actions. More recently a different view is being explored, namely the view of problem solving as modelling. The idea is that problem solving is the construction of a situation specific model [12] or case model [35, 47]. <p> This model let us call it the case model at every moment during problem solving summarises the agent's understanding of the problem, and allows it to eventually conclude that the goal has been reached. The actions are the means that the agent has for interacting with the world <ref> [28] </ref>. Again, since at the knowledge level the agent's perception is through knowledge an action must be viewed as a way of obtaining knowledge about the reality. Actions of perception naturally fit in this scheme but also genuine acts of interaction do [41]. <p> The form of the case model is determined by the selection of problem solving method. In this view problem solving is no longer an input-output process (as in KADS-I [46]), neither a means to select actions (as in Newell's knowledge level theory <ref> [28] </ref>), nor is it a model transformation process (as in Components of Expertise [35]). Rather it is a process of organising knowledge (obtained through actions) by making assumptions (i.e., constructing a model) that allow one to conclude (in effect, only assume) that the task is accomplished.
Reference: 29. <author> R.C Paton, H.S Nwana, M.J.R. Shave, T.J.M. Bench-Capon, and S. Hughes. </author> <title> Foundations of a structured approach to characterising domain knowledge. </title> <journal> Cognitive Systems, </journal> <volume> 3(2) </volume> <pages> 139-161, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Domain and model ontologies are studied for example in OntoLingua [20] and in CommonKADS [47]. It is becoming increasingly clear that domain knowledge is an important indicator for the kind of KL-model that is appropriate <ref> [29, 49] </ref>. Task model: A task model is a means to talk about goals in a precise and systematic way. It expresses what it means to achieve a goal and how the goals are interrelated.
Reference: 30. <author> A. Puerta, J. Egar, S. W. Tu, and M. A. Musen. </author> <title> A multiple-method knowledge-acquisition shell for the automatic generation of knowledge-acquisition tools. </title> <booktitle> In Proceedings of the 6th Knowledge Acquisition for Knowledge-Based Systems Work--shop, </booktitle> <address> Banff, Canada, pages 20.1-19. </address> <institution> SRDG Publications, University of Calgary, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II <ref> [30] </ref>) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. If one looks more closely then one finds striking differences with the original knowledge level descriptions. <p> For example, CSRL embodies a classification method that can be used for other tasks than diagnosis alone (compare [5] and [4]). Method instantiation and configuration is also an important element in the work on Protege [27] and Protege-II <ref> [30] </ref>. The domain, task and method perspective are related views on problem solving. Each of them describes knowledge in its own language: model specific, task specific, method specific. A KL-model brings together these three perspectives in a coherent model. <p> Method specific shells are slightly broader since they use a method specific rather than a task specific terminology [24, 22]. They therefore require an additional mapping from task to method. In a more sophisticated approach the methods are configured from smaller building blocks <ref> [30] </ref> or re-usable chunks of models and executables can be put together, inspected and modified at all levels of descriptions [36]. These approaches acknowledge the fact that similar tasks can be solved in different and sometimes highly specific ways but, once instantiated, the task-method-knowledge combination remains fixed. <p> It helps in interpreting observed behaviour or in understanding protocols. This is the original role intended for the KADS interpretation models [2]. It is also the role explicit supported by the MOLE [18] and Protege work <ref> [27, 30] </ref> where dedicated knowledge acquisition tools take care of "stuffing" the knowledge in the right slots of a pre-selected or constructed KL-model. Functional Specification of System. A knowledge level model predicts be-haviour. It can therefore be naturally interpreted as a functional specification of a system's behaviour. <p> The assumption behind this role is that a KL-model can be found that is adequate for the range of situations one wants to deal with. Moreover this can be done before the detailed knowledge has been acquired (see also the tools described in [22] and <ref> [30] </ref>). Consider the situation of a human expert behaving in an environment, and then replace that expert by a system, or by an agent-system combination (Fig. 7).
Reference: 31. <author> William F. Punch and B. Chandrasekaran. </author> <title> An investigation of the roles of problem-solving methods in diagnosis. </title> <booktitle> In Proceedings of the Tenth International Workshop: Expert Systems and their Applications, </booktitle> <pages> pages 25-36, </pages> <address> Avignon, France, 1990. </address> <publisher> EC2. </publisher>
Reference-contexts: They make more explicit what the boundaries of their competence are, they certainly do not account for a graceful degradation of performance. Steps have been taken toward greater flexibility. A first one is to provide for dynamic method selection <ref> [31] </ref>. Based on problem characteristics, a system will choose the most adequate problem solving method. A complementary approach is to enable preferred problem solving methods by sustained learning of the knowledge that they require [40, 1]. But from a fundamental perspective all these are ad hoc solutions.
Reference: 32. <author> P. Rademakers and R. Pfeifer. </author> <title> The role of knowledge level models in situated adaptive design. </title> <editor> In B. Neumann, editor, </editor> <booktitle> Proceedings of the Tenth European Conference on Artificial Intelligence, </booktitle> <pages> pages 601-602. </pages> <publisher> John Wiley and Sons, Ltd., </publisher> <year> 1992. </year>
Reference-contexts: How to deal with these problems is treated as an entirely separate problem and the knowledge level analysis may or may not be useful here. This is my understanding of some of the suggestions in <ref> [32] </ref>. 9 Conclusion The purpose of this paper was to bring together views and ideas on knowledge level modelling for knowledge systems. The main points it has been making are: The knowledge level is a model of behaviour in terms of knowledge that rationalises the observed behaviour.
Reference: 33. <author> A. Th. Schreiber, J. M. Akkermans, and B. J. Wielinga. </author> <title> On problems with the knowledge level perspective. </title> <editor> In L. Steels and B. Smith, editors, AISB-91: </editor> <booktitle> Artificial Intelligence and Simulation of behaviour, </booktitle> <pages> pages 208-221, </pages> <address> London, 1991. </address> <publisher> Springer Verlag. </publisher> <editor> Also in: </editor> <booktitle> Proceedings Banff-90 Knowledge Acquisition Workshop, </booktitle> <editor> J. H. Boose and B. R. Gaines (editors), </editor> <publisher> SRDG Publications, University of Calgary, </publisher> <pages> pages 30-1 - 30-14. </pages>
Reference-contexts: Nevertheless the knowledge level is not beyond critique and several authors have pointed out problems with it. Some of these problems required further clarification [13] or minor repairs <ref> [33, 37] </ref>. Others have been claimed to be unrepairable, which would render the knowledge level useless [45].
Reference: 34. <author> L. Steels. </author> <title> Second generation expert systems. </title> <journal> Future Generation Computer Systems, </journal> <volume> 1(4) </volume> <pages> 213-221, </pages> <year> 1985. </year>
Reference-contexts: However, I will argue that it does have some implications for the design of future generation AI architectures. 7 Next Generation Architectures Second generation expert systems <ref> [34] </ref> were developed in the early 80s to overcome a number of problems of the first generation, rule based systems. These problems were, in a nutshell brittleness, poor explanation capabilities and maintainability. The basic idea at that time was to 'deepen' the analysis of the knowledge that these systems embody.
Reference: 35. <author> L. Steels. </author> <title> Components of expertise. </title> <journal> AI Magazine, </journal> <month> Summer </month> <year> 1990. </year> <note> Also as: AI Memo 88-16, </note> <institution> AI Lab, Free University of Brussels. </institution>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise <ref> [35] </ref> and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. <p> These aspects of a task instance are called the 'task features'. An important class of task features follow from the epistemological problems (i.e. problems with the knowledge) and the pragmatic problems (i.e. problems with the pragmatics of using the knowledge) that an agent is faced with <ref> [35] </ref>. Epistemological problems arise because we are dealing with models of a real and open-ended world. Every model is an approximation, not only because it is unprecise but, more fundamentally, because it introduces assumptions about the world. <p> The goal of problem solving is to select one of the possible actions. More recently a different view is being explored, namely the view of problem solving as modelling. The idea is that problem solving is the construction of a situation specific model [12] or case model <ref> [35, 47] </ref>. From a knowledge level perspective the agent's perception of the world is through knowledge alone. A goal therefore must correspond to a desired state of ones knowledge about the world. Consequently this knowledge must refer to the specific systems that the goal is about. <p> In this view problem solving is no longer an input-output process (as in KADS-I [46]), neither a means to select actions (as in Newell's knowledge level theory [28]), nor is it a model transformation process (as in Components of Expertise <ref> [35] </ref>). Rather it is a process of organising knowledge (obtained through actions) by making assumptions (i.e., constructing a model) that allow one to conclude (in effect, only assume) that the task is accomplished. Successful problem solving is a matter of making the right assumptions and exploring their consequences.
Reference: 36. <author> L. Steels. </author> <title> Reusability and configuration of applications by non-programmers. </title> <type> Technical Report AI Memo 92-4, </type> <institution> AI-Lab, Vrije Universiteit Brussel, </institution> <address> Brussels, </address> <year> 1992. </year>
Reference-contexts: Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology <ref> [36] </ref> Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. <p> Each of them describes knowledge in its own language: model specific, task specific, method specific. A KL-model brings together these three perspectives in a coherent model. More and more the importance of all three aspects is being recognized and taken into account <ref> [8, 36, 48] </ref>. These KL-models, however, focus on describing the process of problem solving and have little to say about what problem solving is. For example a role-limiting method makes explicit control over actions that, when it is followed leads to the completion of some goal. <p> They therefore require an additional mapping from task to method. In a more sophisticated approach the methods are configured from smaller building blocks [30] or re-usable chunks of models and executables can be put together, inspected and modified at all levels of descriptions <ref> [36] </ref>. These approaches acknowledge the fact that similar tasks can be solved in different and sometimes highly specific ways but, once instantiated, the task-method-knowledge combination remains fixed. <p> KIF is a logic based language that can be used as an implementation independent format for exchanging knowledge bases. A specialisation of KIF, called OntoLingua [20], can capture in a general and standardised way ontologies that are useful in domains such as medical diagnosis or design. Steels' Componential Methodology <ref> [36] </ref> supports the usage of chunks that contain any combination of task, domain, problem solving method with or without associated pieces of code. <p> This is, for example, done in CommonKADS [48] but the relation and transition between the 'present' and 'target' models is largely an open issue. A second approach is to support knowledge level modelling for end-users themselves, as it is done in the Componential Methodology <ref> [36] </ref>. Here modelling is always done in the context of designing an application, and it is grounded in the needs and understanding of the users. A third approach is to restrict knowledge level modelling only as a tool for analysis.
Reference: 37. <author> J. Sticklen. </author> <title> Problem solving architecture at the knowledge level. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <year> 1989. </year>
Reference-contexts: Nevertheless the knowledge level is not beyond critique and several authors have pointed out problems with it. Some of these problems required further clarification [13] or minor repairs <ref> [33, 37] </ref>. Others have been claimed to be unrepairable, which would render the knowledge level useless [45]. <p> care of in configuration, the rational concerns by the application of the principle of rationality within the KL-model [42]. 3 2 An alternative to two step rationality is to model an agent as consisting of a structure of smaller agents, each one being specialised and perfectly rational in its speciali-sation <ref> [37] </ref>. I prefer to reserve the notion of agent for an embodied and observable being. Its application as a structuring device makes it counterintuitive to account for the dynamic configuration of knowledge in different models. 3 One could consider the rationalisation of configuration. <p> The Generic Task approach was the first to illustrate the idea of linking re-usable models to re-usable pieces of code [7]. Ever since methodological approaches to second generation expert systems almost invariably rely on mapping the structure of a KL-model to the architecture of the application <ref> [24, 37, 43] </ref>. This KL-model or parts of it are used to "stuff in" the specialized knowledge [27]. It is remarkable that architectures are focused on making control decisions explicit, either in method or in task specific ways.
Reference: 38. <author> W. R. Swartout. XPLAIN: </author> <title> A system for creating and explaining expert consulting systems. </title> <journal> Artificial Intelligence, </journal> <volume> 20 </volume> <pages> 285-325, </pages> <year> 1983. </year>
Reference-contexts: The idea immediately resonated with ongoing research toward understanding and building knowledge systems from a knowledge content (epistemological) perspective <ref> [10, 38, 7] </ref>. Clancey's model of heuristic classification [11] illustrated the power and scope of competence models that make explicit the kinds of knowledge embodied in a system and their roles in an overall pattern of reasoning. <p> However, second generation expert systems do not necessarily embody deep knowledge in this narrow sense. More generally, the idea is that the knowledge which they embody is analysed and represented up to its constituent role-specific pieces <ref> [15, 16, 38, 10] </ref>. In retrospect we now view much of the work on second generation expert systems as contributions to a knowledge level theory of specialised intelligence.
Reference: 39. <author> W. Van de Velde. </author> <title> Inference stucture as a basis for problem solving. </title> <editor> In Y. Kodratoff, editor, </editor> <booktitle> Proceedings of the 8th European Conference on Artificial Intelligence, </booktitle> <pages> pages 202-207, </pages> <address> London, 1988. </address> <publisher> Pitman. </publisher>
Reference-contexts: A problem solving method is different from a task model because it can be non-specified for a task and it may give rise to multiple task models. For example the method of heuristic classification or constructive problem solving can be applied for many different types of applications <ref> [39] </ref>. A problem solving method is not a fully specified way to accomplish a task, but its application generates a way of accomplishing a task. The research by John McDermott and his team at Digital [24] is prototypical for the method oriented approach. <p> The role of the problem solving method is to tie domain and task models together in an argument on what accomplishing the task means in terms of the available models. I have called this the competence theory of the method <ref> [39] </ref>. For example, a heuristic classification problem solver assumes that the solution to its problem is within the differential. This is no more than an assumption, but it is what the problem solver believes that it can say about the problem.
Reference: 40. <author> W. Van de Velde. </author> <title> Learning from Experience. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit Brus-sel, </institution> <address> Brussels, </address> <year> 1988. </year> <note> also as VUB AI-Lab TR-88-1. </note>
Reference-contexts: A first one is to provide for dynamic method selection [31]. Based on problem characteristics, a system will choose the most adequate problem solving method. A complementary approach is to enable preferred problem solving methods by sustained learning of the knowledge that they require <ref> [40, 1] </ref>. But from a fundamental perspective all these are ad hoc solutions. Problem solving methods are still a "what" perspective and thus occupy a strange position at the knowledge level which is concerned with "why".
Reference: 41. <author> W. Van de Velde. </author> <title> Reasoning, behavior and learning: a knowledge level perspective. </title> <booktitle> In Proceedings of Cognitiva 90, </booktitle> <pages> pages 451-463, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: It can be used for characterising the behaviour of any complex system, for example of an autonomous agent, even if it is behaviour- rather than knowledge based. In addition the knowledge level can be used to describe different aspects of intelligent behaviour, like learning <ref> [17, 41] </ref>. In this paper I only consider the problem solving or performance aspects. toward reaching its goals. The behaviour of the agent is explained and predicted in terms of the reasons that the agent is assumed to have to take certain actions in order to reach ascribed goals. <p> Again, since at the knowledge level the agent's perception is through knowledge an action must be viewed as a way of obtaining knowledge about the reality. Actions of perception naturally fit in this scheme but also genuine acts of interaction do <ref> [41] </ref>. For example when a spray-painting robot paints some part then it will probably assume that the part has paint on it afterwards. 4 In the problem solving as modelling view, then, the actions are not the goal of problem solving but are themselves a means to an end.
Reference: 42. <author> W. Van de Velde. </author> <title> Tractable rationality at the knowledge-level. </title> <editor> In L. Steels and B. Smith, editors, </editor> <booktitle> Proceedings AISB'91: Artificial Intelligence and Simulation of Behaviour, </booktitle> <pages> pages 196-207, </pages> <address> London, 1991. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: It serves as a global interpreter for the knowledge of the agent in order to understand observed behaviour or to predict future behaviour. Two step rationality <ref> [42] </ref> views this process as consisting of two steps: configuration and application (Fig. 3): Fig. 3. Two step rationality decomposes the principle of rationality. It reflects the fact that adequate behaviour is both practical and rational. <p> Once a KL-model has been configured to comply with these practical constraints the principle of rationality can freely explore possibilities. The pragmatic concerns are thus taken care of in configuration, the rational concerns by the application of the principle of rationality within the KL-model <ref> [42] </ref>. 3 2 An alternative to two step rationality is to model an agent as consisting of a structure of smaller agents, each one being specialised and perfectly rational in its speciali-sation [37]. I prefer to reserve the notion of agent for an embodied and observable being. <p> This model is the case model and it is obtained from the partial instantiation of the competence theory through actions. Specific control regimes (e.g., data-driven or hypothesis-driven heuristic classification) correspond to different ways of operationalising the specialized principle of rationality <ref> [42] </ref> Fig. 6. Problem solving as modelling is a process of instantiating assumptions linked by the method's competence theory and using the case data assumed from interacting with the world. The method's principle of rationality drives the interaction process toward instantiating the case model. <p> Problem solving is thus viewed as the `creation' of a suitable case model and the interaction with the world is only a resource for this, almost a side-effect in the process of maintaining an internal organisation and identity <ref> [42] </ref>. We are now in a peculiar position by claiming that knowledge is a resource for action and action is a resource for knowledge. This circular view on knowledge and behavior is reminiscent of Maturana's view of autonomous systems [25]. <p> Actions will be executed that can lead to new knowledge that enables this min-imisation. So, control is genuinely a result of the present state of knowledge about the problem, reflected in the case model <ref> [42] </ref>. Such architectures have not been extensively explored but they would reflect much more the real nature of problem solving from a knowledge level perspective.
Reference: 43. <author> J. Vanwelkenhuysen and P. Rademakers. </author> <title> Mapping knowledge-level analysis onto a computational framework. </title> <editor> In L. Aiello, editor, </editor> <booktitle> Proceedings ECAI-90, Stockholm, </booktitle> <pages> pages 681-686, </pages> <address> London, 1990. </address> <publisher> Pitman. </publisher>
Reference-contexts: The Generic Task approach was the first to illustrate the idea of linking re-usable models to re-usable pieces of code [7]. Ever since methodological approaches to second generation expert systems almost invariably rely on mapping the structure of a KL-model to the architecture of the application <ref> [24, 37, 43] </ref>. This KL-model or parts of it are used to "stuff in" the specialized knowledge [27]. It is remarkable that architectures are focused on making control decisions explicit, either in method or in task specific ways.
Reference: 44. <author> J. Vanwelkenhuysen and W. Van de Velde. </author> <title> What's the problem when working with generic models. </title> <type> Technical Report AI-Memo 92-07, </type> <institution> Vrije Universiteit Brussel, </institution> <address> AI-Lab, Brussels, </address> <year> 1992. </year>
Reference-contexts: Although the idea of re-usable models is shared by many approaches, the foundations of generic models and the selection and modelling mechanisms that are needed to work with them are not well researched <ref> [44] </ref>. A major weakness in the combination of these roles is that it hides a subtle shift from observed behaviour (for example from an expert) to system behaviour. As Linster put it, there is modelling for making sense and modelling for system design [23].
Reference: 45. <author> R. E. Vinkhuysen. </author> <title> On the non-existence of knowledge level models. </title> <editor> In B. Neumann, editor, </editor> <booktitle> Proceedings of the 10th European Conference on Artificial Intelligence, </booktitle> <pages> pages 620-622, </pages> <address> Chichester, 1992. </address> <publisher> John Wiley and Sons, Ltd. </publisher>
Reference-contexts: Nevertheless the knowledge level is not beyond critique and several authors have pointed out problems with it. Some of these problems required further clarification [13] or minor repairs [33, 37]. Others have been claimed to be unrepairable, which would render the knowledge level useless <ref> [45] </ref>. When one looks at knowledge level descriptions as they are presently used in knowledge systems then one finds striking differences with Newell's original notions. 1 For example, at the knowledge level according to Newell there is no structure, whereas most models as we now see them are highly structured.
Reference: 46. <author> B. J. Wielinga and J. A. Breuker. </author> <title> Models of expertise. </title> <booktitle> In Proceedings ECAI-86, </booktitle> <pages> pages 306-318, </pages> <year> 1986. </year>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS <ref> [46] </ref> and CommonKADS [48] - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what <p> This leads to a task decomposition or task structure. The well-known task decomposition of Mycin is another example of such a task decomposition. The original KADS methodology is prototypical of the task oriented approach <ref> [46] </ref>. An application task (or real-life task) is decomposed into a series of so called generic tasks. A generic task is basically no more than an index to an interpretation model, an inference structure for the generic task. Such an interpretation model is independent of domain knowledge. <p> The form of the case model is determined by the selection of problem solving method. In this view problem solving is no longer an input-output process (as in KADS-I <ref> [46] </ref>), neither a means to select actions (as in Newell's knowledge level theory [28]), nor is it a model transformation process (as in Components of Expertise [35]).
Reference: 47. <author> B. J. Wielinga, A. Th. Schreiber, and J. A. Breuker. KADS: </author> <title> A modelling ap-proach to knowledge engineering. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(1), </volume> <year> 1992. </year> <note> Special issue `The KADS approach to knowledge engineering'. </note>
Reference-contexts: Such a domain model provides a reasoner with a reper-toire of reasoning steps that are not specific for a task but can be usefully combined for a variety of tasks, like for prediction and diagnosis. Domain and model ontologies are studied for example in OntoLingua [20] and in CommonKADS <ref> [47] </ref>. It is becoming increasingly clear that domain knowledge is an important indicator for the kind of KL-model that is appropriate [29, 49]. Task model: A task model is a means to talk about goals in a precise and systematic way. <p> The goal of problem solving is to select one of the possible actions. More recently a different view is being explored, namely the view of problem solving as modelling. The idea is that problem solving is the construction of a situation specific model [12] or case model <ref> [35, 47] </ref>. From a knowledge level perspective the agent's perception of the world is through knowledge alone. A goal therefore must correspond to a desired state of ones knowledge about the world. Consequently this knowledge must refer to the specific systems that the goal is about.
Reference: 48. <author> B. J. Wielinga, W. van de Velde, A. Th. Schreiber, and J. M. Akkermans. </author> <title> Towards a unification of knowledge modelling approaches. </title> <editor> In Jean-Marc David, Jean-Paul Krivine, and Reid Simmons, editors, </editor> <booktitle> Second Generation Expert Systems. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <note> To appear. Also as: Technical Report ESPRIT Project P5248, KADS-II/T1.1/TR/UvA/004/3.0. </note>
Reference-contexts: It has become `en vogue' to assimilate the knowledge level idea in any encompassing treatment of knowledge systems. It ties together and to some extend unifies different approaches toward the theory and practice of knowledge systems <ref> [7, 11, 20, 26, 27, 35, 46, 48] </ref>. No doubt taking a knowledge level perspective has greatly improved our understanding of what knowledge systems are and how we can build them. <p> Here are only some of the most representative approaches in knowledge engineering that in one form or another use the knowledge level notion: Generic Task Approach [7, 3] - KADS [46] and CommonKADS <ref> [48] </ref> - Role-Limiting Methods [26, 24] Components of Expertise [35] and the Componential Methodology [36] Method instantiation and configuration approaches (Protege [27] and Protege-II [30]) - KIF [19] and OntoLingua [20] They take the knowledge level as a source of inspiration or as a way to explain what they are doing. <p> Each of them describes knowledge in its own language: model specific, task specific, method specific. A KL-model brings together these three perspectives in a coherent model. More and more the importance of all three aspects is being recognized and taken into account <ref> [8, 36, 48] </ref>. These KL-models, however, focus on describing the process of problem solving and have little to say about what problem solving is. For example a role-limiting method makes explicit control over actions that, when it is followed leads to the completion of some goal. <p> A first approach is to explicitly distinguish between models for analysis and models for design. This is, for example, done in CommonKADS <ref> [48] </ref> but the relation and transition between the 'present' and 'target' models is largely an open issue. A second approach is to support knowledge level modelling for end-users themselves, as it is done in the Componential Methodology [36].
Reference: 49. <author> B. Woodward. </author> <title> Knowledge acquisition at the front end: Defining the domain. </title> <journal> Knowledge Acquisition, </journal> <volume> 2(2) </volume> <pages> 73-94, </pages> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Domain and model ontologies are studied for example in OntoLingua [20] and in CommonKADS [47]. It is becoming increasingly clear that domain knowledge is an important indicator for the kind of KL-model that is appropriate <ref> [29, 49] </ref>. Task model: A task model is a means to talk about goals in a precise and systematic way. It expresses what it means to achieve a goal and how the goals are interrelated.
References-found: 49

