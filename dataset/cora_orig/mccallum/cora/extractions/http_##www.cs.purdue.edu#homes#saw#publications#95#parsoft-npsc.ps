URL: http://www.cs.purdue.edu/homes/saw/publications/95/parsoft-npsc.ps
Refering-URL: http://www.cs.purdue.edu/homes/saw/publications/
Root-URL: http://www.cs.purdue.edu
Email: -markus,acc,saw,enh-@cs.purdue.edu  
Title: On the Software Engineering of Multi-Platform Parallel Distributed Software The //ELLPACK is a problem solving
Author: Shahani Markus, Ann C. Catlin, Sanjiva Weerawarana and Elias N. Houstis 
Note: 2.0 //ELLPACK  1. //ELLPACK is read Parallel ELLPACK.  
Date: 1.0 Introduction  
Address: West Lafayette, IN 47907, USA.  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Parallel and distributed computation is now an essential ingredient of high performance scientific computing. While parallel computers are still somewhat expensive, the widespread availability of distributed computation packages, has mushroomed the use of workstation networks as virtual parallel computers. A common feature of a modern computing environment is that one generally has access to not just one such (virtual) parallel machine, but to several. To take maximum advantage of this situation, one must be able to conveniently use any or all of these parallel machines to solve the problems at hand. However, the development and maintenance of software for such a heterogeneous environment is by no means an easy task and we have found that there is little readily available information on how one should organize software to best deal with this situation. This paper describes our experience in developing and maintaining multi-platform parallel / distributed scientific computing software. We gained this experience while developing the parallel computation envi ronment for //ELLPACK 1 [1], a problem solving environment [14] for solving partial differential equations (PDEs). //ELLPACK includes a complete graphical user interface for Unix platforms running the X Window System and contains tools for specifying PDE problems, specifying the solution algorithm, solving the problem (in parallel) and finally for analyzing the computed solutions. In this paper, we consider how we organize and manage the multi-platform parallel / distributed software as well as how we provide a convenient user-level execution mechanism. The rest of this document is organized as follows: We first describe //ELLPACK in more detail in order to explicate the software issues that we are addressing. Then, Section 3 describes our computing environment so as to help the reader better understand the solutions we have developed. Section 4 describes the organization of the source and object code to allow simultaneous development and maintenance on multiple platforms. Section 5 describes the execution environment and finally Section 6 briey comments on our experience with this environment. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. N. Houstis and J. R. Rice, </author> <title> Parallel ELLPACK: A development and problem solving environment for high performance computing machines, Programming Environments for High-Level Scientific Problem Solving, </title> <editor> P. W. Gaffney and E. N. Houstis, eds., </editor> <publisher> North-Holland, </publisher> <year> 1992, </year> <pages> pp. 229-243. </pages>
Reference-contexts: This paper describes our experience in developing and maintaining multi-platform parallel / distributed scientific computing software. We gained this experience while developing the parallel computation envi ronment for //ELLPACK 1 <ref> [1] </ref>, a problem solving environment [14] for solving partial differential equations (PDEs). //ELLPACK includes a complete graphical user interface for Unix platforms running the X Window System and contains tools for specifying PDE problems, specifying the solution algorithm, solving the problem (in parallel) and finally for analyzing the computed solutions.
Reference: 2. <author> J. Ousterhaut, </author> <title> Tcl: An embeddable command language, </title> <booktitle> Proc. USENIX Winter Conf., </booktitle> <year> 1990, </year> <pages> pp. 133 146. </pages>
Reference-contexts: Hence, the execution environment allows configuration at this level as well. The //ELLPACK execution tool consists of a Tcl/Tk <ref> [2] </ref> graphical interface and a Tcl driver that invokes a series of PERL [12], shell and other scripts to perform the needed tasks.
Reference: 3. <author> G. A. Geist, M. T. Heath, B. W. Peyton and P. H. Worley, </author> <title> A users guide to PICL: A portable instru mented communication library, </title> <type> Technical Report ORNL/TM-11616, </type> <institution> Engineering Physics and Mathe matics Division, Oak Ridge National Laboratory, </institution> <year> 1992. </year>
Reference: 4. <author> R. A. Bruce, J. G. Mills and A. G. Smith, </author> <title> CHIMP/MPI user guide, </title> <type> Technical Report EPCC-KTP CHIMP-V2-USER 1.2, </type> <institution> Univ. of Edinburgh, UK. </institution>
Reference-contexts: As discussed earlier, the parallel (solver) components of //ELLPACK execute using the message passing model. The original //ELLPACK solvers were developed primarily for an nCUBE 2 machine using nCUBEs native communication library (VERTEX [9]). We have now migrated this code to several communication libraries, including PICL <ref> [4] </ref>, PARMACS [10] and several MPI [6] implementations as well as to other hardware platforms. Ports to PVM [8] and Intel/NX [11] are currently underway.
Reference: 5. <author> G. Burns, R. Daoud, J. Vaigl, LAM: </author> <title> An open cluster environment for MPI, </title> <institution> Ohio Supercomputer Center, Ohio. </institution>
Reference: 6. <author> Message-Passing Interface Forum, </author> <title> MPI: Document for a standard message-passing interface, </title> <note> Techni cal Report CS-93-214 (revised), </note> <institution> Univ. of Tennessee, </institution> <year> 1994. </year>
Reference-contexts: The original //ELLPACK solvers were developed primarily for an nCUBE 2 machine using nCUBEs native communication library (VERTEX [9]). We have now migrated this code to several communication libraries, including PICL [4], PARMACS [10] and several MPI <ref> [6] </ref> implementations as well as to other hardware platforms. Ports to PVM [8] and Intel/NX [11] are currently underway.
Reference: 7. <author> F.-C. Cheng, P. Vaughan, D. Reese and A. Skjellum, </author> <title> The unify system, </title> <institution> NSF Engineering Research Center, Mississipi State University, </institution> <year> 1994. </year>

References-found: 7

