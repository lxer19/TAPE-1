URL: http://ai.eecs.umich.edu/people/hornof/UIST95.ps
Refering-URL: http://ai.eecs.umich.edu/people/hornof/index.html
Root-URL: http://www.eecs.umich.edu
Email: kieras@eecs.umich.edu  swood@eecs.umich.edu  kna@engin.umich.edu  hornof@umich.edu  
Phone: (313) 763-6739  
Title: GLEAN:AComputer-Based Tool for Rapid GOMS Model Usability Evaluation of User Interface Designs  
Author: David E. Kieras Scott D. Wood Kasem Abotel Anthony Hornof 
Keyword: User-Interface Software and Technology: Usability, usability evaluation, user models, GOMS models  
Address: 1101 Beal Avenue, Ann Arbor, Michigan 48109-2110  
Affiliation: Artificial Intelligence Laboratory Electrical Engineering Computer Science Department University of Michigan  
Abstract: Engineering models of human performance permit some aspects of usability of interface designs to be predicted from an analysis of the task, and thus can replace to some extent expensive user testing data. The best developed such tools are GOMS models, which have been shown to be accurate and effective in predicting usability of the procedural aspects of interface designs. This paper describes a computer-based tool, GLEAN, that generates quantitative predictions from a supplied GOMS model and a set of benchmark tasks. GLEAN is demonstrated to reproduce the results of a case study of GOMS model application with considerable time savings over both manual modeling as well as empirical testing. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bovair, S., Kieras, D. E., & Polson, P. G. </author> <year> (1990). </year> <title> The acquisition and performance of text editing skill: A cognitive complexity analysis. </title> <journal> Human-Computer Interaction, </journal> <volume> 5, </volume> <pages> 1-48. </pages>
Reference-contexts: The type of GOMS model used in the work reported here is known as the NGOMSL methodology [8, 9, 10] and is based on the cognitive modeling of human-computer interaction by Kieras and Polson <ref> [1, 13] </ref>. NGOMSL is an acronym for Natural GOMS Language, which is a structured natural language used to represent the user's methods and selection rules. This paper introduces GOMSL, (GOMS Language), which is a formalized, machine-executable form of NGOMSL. <p> If the icon is subsequently dragged, then its location would also be updated. This approach of simulating the abstract behavior of the device was followed in the original Kieras and Polson modeling work with a specialized transition-network representation of the device behavior <ref> [1, 12, 13] </ref>. Our current description notation is intended to be much easier to use, being similar in syntax to GOMSL. The Device Behavior Description includes the objects in the interface their properties, and their behavior in response to user input.
Reference: 2. <author> Butler, K. A., Bennett, J., Polson, P., and Karat, J. </author> <year> (1989). </year> <title> Report on the workshop on analytical models: Predicting the complexity of human-computer interaction. </title> <journal> SIGCHI Bulletin, </journal> <volume> 20(4), </volume> <pages> pp. 63-79. </pages>
Reference-contexts: It is widely agreed that this approach, inherited from Human Factors, does indeed work when carefully applied [7]. However, Card, Moran, & Newell [4] have argued, and many HCI researchers have agreed (e.g. <ref> [2] </ref>), that empirical user testing is too slow and expensive for modern software development practice, especially when difficult-to-get domain experts are the target user group. One response has been the development of "discount" or "inspection" methods for assessing the usability of an interface design quickly and at low cost [17].
Reference: 3. <author> Byrne, M.D., Wood, S.D, Sukaviriya, P., Foley, J.D, and Kieras, D.E. </author> <year> (1994). </year> <title> Automating Interface Evaluation. </title> <booktitle> In Proceedings of CHI, 1994, </booktitle> <address> Boston, MA, USA, April 24-28, 1994). New York: </address> <publisher> ACM, </publisher> <pages> pp. 232-237. </pages>
Reference-contexts: But to some extent, each could be constructed from the other, as was demonstrated by Byrne, Wood, Sukaviriya, Foley, and Kieras <ref> [3] </ref> using UIDE and the prototype GLEAN.
Reference: 4. <author> Card, S. K., Moran, T. P., & Newell, A. </author> <year> (1983). </year> <title> The psychology of human-computer interaction. </title> <address> Hillsdale, NJ: </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: It is widely agreed that this approach, inherited from Human Factors, does indeed work when carefully applied [7]. However, Card, Moran, & Newell <ref> [4] </ref> have argued, and many HCI researchers have agreed (e.g. [2]), that empirical user testing is too slow and expensive for modern software development practice, especially when difficult-to-get domain experts are the target user group. <p> GLEAN calculates execution time predictions by following the recommendations in Kieras [9, 10] and Gong [5, 6]. For example, each GOMSL step requires 0.1 s, each keystroke, 0.28 s. Gong [5] found that the 1.1 s mouse pointing time recommended by Card, Moran, & Newell <ref> [4] </ref>, which was based on text editing activity, is actually quite inaccurate for GUI interfaces, because mouse movements are often made to large or close targets, such as activating windows, clicking on buttons, and so forth. <p> GLEAN maintains the current position of the mouse cursor, and so can use Fitts' Law <ref> [4] </ref> to calculate the time required to move the cursor to a target object whose size is specified. GLEAN calculates predicted procedure learning time following the formulas recommended by Kieras [9, 10] and Gong [5, 6].
Reference: 5. <author> Gong, R. </author> <year> (1993). </year> <title> Validating and refining the GOMS model methodology for software user interface design and evaluation. </title> <type> PhD dissertation, </type> <institution> University of Michigan, </institution> <year> 1993. </year>
Reference-contexts: As a test of the accuracy and functionality of GLEAN, we applied it to a user interface analysis and design case reported by Gong <ref> [5] </ref>, who used GOMS analysis to identify usability problems in a software product, and to evaluate the improvement in the interface produced by correcting these problems. Gong then also conducted a formal empirical usability study to collect measures of actual usability. <p> This profiling facility helps the designer to determine the source of any differences in task execution time when comparing interface designs. GLEAN calculates execution time predictions by following the recommendations in Kieras [9, 10] and Gong <ref> [5, 6] </ref>. For example, each GOMSL step requires 0.1 s, each keystroke, 0.28 s. <p> GLEAN calculates execution time predictions by following the recommendations in Kieras [9, 10] and Gong [5, 6]. For example, each GOMSL step requires 0.1 s, each keystroke, 0.28 s. Gong <ref> [5] </ref> found that the 1.1 s mouse pointing time recommended by Card, Moran, & Newell [4], which was based on text editing activity, is actually quite inaccurate for GUI interfaces, because mouse movements are often made to large or close targets, such as activating windows, clicking on buttons, and so forth. <p> GLEAN maintains the current position of the mouse cursor, and so can use Fitts' Law [4] to calculate the time required to move the cursor to a target object whose size is specified. GLEAN calculates predicted procedure learning time following the formulas recommended by Kieras [9, 10] and Gong <ref> [5, 6] </ref>. GLEAN tallies the total number of method steps to be learned, taking account of which methods the designer has designated as already known to the user. <p> DEMONSTRATION OF GLEAN: REPRODUCING THE GONG RESULTS As a test of the accuracy and usability of GLEAN, we applied it to a user interface analysis and design case study conducted by Richard Gong <ref> [5, 6] </ref>, who used GOMS analysis to identify usability problems in a software product, and to evaluate the improvement in the interface produced by correcting these problems. <p> Step 3. Keystroke target key. Step 4. Return with goal accomplished. Fig. 8. Example lower limit methods from the generic method library. A command key associated in the user's LTM with the desired dialog is used to open the dialog. Projection of Effort Savings due to GLEAN Gong <ref> [5, 6] </ref> kept records of the amount of effort required to construct and apply the GOMS model; here we consider how the effort might have be decreased if GLEAN had been available for Gong's use. reported by Gong in developing the interfaces.
Reference: 6. <author> Gong, R., & Kieras, D. </author> <year> (1994). </year> <title> A Validation of the GOMS Model Methodology in the Development of a Specialized, Commercial Software Application. </title> <booktitle> In Proceedings of CHI, 1994, </booktitle> <address> Boston, MA, USA, April 24-28, 1994). New York: </address> <publisher> ACM, </publisher> <pages> pp. 351-357. </pages>
Reference-contexts: This profiling facility helps the designer to determine the source of any differences in task execution time when comparing interface designs. GLEAN calculates execution time predictions by following the recommendations in Kieras [9, 10] and Gong <ref> [5, 6] </ref>. For example, each GOMSL step requires 0.1 s, each keystroke, 0.28 s. <p> GLEAN maintains the current position of the mouse cursor, and so can use Fitts' Law [4] to calculate the time required to move the cursor to a target object whose size is specified. GLEAN calculates predicted procedure learning time following the formulas recommended by Kieras [9, 10] and Gong <ref> [5, 6] </ref>. GLEAN tallies the total number of method steps to be learned, taking account of which methods the designer has designated as already known to the user. <p> DEMONSTRATION OF GLEAN: REPRODUCING THE GONG RESULTS As a test of the accuracy and usability of GLEAN, we applied it to a user interface analysis and design case study conducted by Richard Gong <ref> [5, 6] </ref>, who used GOMS analysis to identify usability problems in a software product, and to evaluate the improvement in the interface produced by correcting these problems. <p> Step 3. Keystroke target key. Step 4. Return with goal accomplished. Fig. 8. Example lower limit methods from the generic method library. A command key associated in the user's LTM with the desired dialog is used to open the dialog. Projection of Effort Savings due to GLEAN Gong <ref> [5, 6] </ref> kept records of the amount of effort required to construct and apply the GOMS model; here we consider how the effort might have be decreased if GLEAN had been available for Gong's use. reported by Gong in developing the interfaces.
Reference: 7. <author> Gould, J. D. </author> <year> (1988). </year> <title> How to design usable systems. </title> <editor> In M. Helander (Ed.), </editor> <title> Handbook of human-computer interaction. </title> <publisher> Amsterdam: North-Holland. </publisher> <pages> 757-789. </pages>
Reference-contexts: It is widely agreed that this approach, inherited from Human Factors, does indeed work when carefully applied <ref> [7] </ref>. However, Card, Moran, & Newell [4] have argued, and many HCI researchers have agreed (e.g. [2]), that empirical user testing is too slow and expensive for modern software development practice, especially when difficult-to-get domain experts are the target user group. <p> Thus, GOMS modeling does not replace the most critical process in designing a usable system, that of understanding the user's situation, working context, and goals. Approaches to this stage of interface design have been presented in sources such <ref> [7, 15] </ref>. Second, GOMS models can predict the procedural aspects of usability; these concern the amount, consistency, and efficiency of the procedures that users must follow.
Reference: 8. <author> John, B. E. & Kieras, D. E. </author> <title> (1994) The GOMS family of analysis techniques: Tools for design and evaluation. </title> <institution> Carnegie Mellon University School of Computer Science Technical Report No. CMU-CS-94-181. </institution> <note> Also appears as the Human-Computer Interaction Institute Technical Report No. CMU-HCII-94-106. </note>
Reference-contexts: The GOMS Model The major extant form of engineering model for interface design is the GOMS model, first proposed by Card, Moran, and Newell. John & Kieras <ref> [8] </ref> list many successful applications of GOMS to practical design problems. <p> Describing the Goals, Operators, Methods, and Selection Rules for a set of tasks in a formal way constitutes doing a GOMS analysis, or constructing a GOMS model. Research summarized by John & Kieras <ref> [8] </ref> has resulted in a family of GOMS models and techniques for predicting key aspects of usability of an interface. In particular, execution time can be predicted by simulating the execution of the methods required to perform the task. <p> The type of GOMS model used in the work reported here is known as the NGOMSL methodology <ref> [8, 9, 10] </ref> and is based on the cognitive modeling of human-computer interaction by Kieras and Polson [1, 13]. NGOMSL is an acronym for Natural GOMS Language, which is a structured natural language used to represent the user's methods and selection rules. <p> This paper introduces GOMSL, (GOMS Language), which is a formalized, machine-executable form of NGOMSL. The NGOMSL type of GOMS model has an explicit representation of the user's methods, which are assumed to be strictly sequential and hierarchical in form, and is useful for many desktop computing applications (see <ref> [8] </ref> for more discussion). methods for doing file moving and deleting on the Macintosh. Each method accomplishes its goal by either calling submethods to accomplish subgoals, or executing primitive ("keystroke-level") actions such as pressing the mouse button. <p> Note how the underlying simplicity and consistency of the Macintosh methods is apparent from this small example a single general method is used for two different user goals. Strengths and Limitations of GOMS Models It is important to be clear on what GOMS models can and cannot do (see <ref> [8] </ref> for more discussion). First, in order to apply the GOMS technique, the designer (or interface analyst, hereafter just referred to as the designer) must conduct a task analysis to identify what goals the user will be trying to accomplish. <p> Fifth, there has been a widespread belief that constructing and using GOMS models is too time-consuming to be practical (e.g., [16]). However, the many cases surveyed by John & Kieras <ref> [8] </ref> make clear that members of the GOMS family have been applied in many practical situations and were often very time and cost-effective. A substantial problem is that the calculations required to derive the predictions are tedious and mechanical. Eliminating this problem is the target of the work reported here. <p> So using GOMS methodology will always require a designer who is trained to perform appropriate task analysis. Also, it is reasonable that the designer have as much training as currently seems to be necessary to get started in GOMS analysis (e.g. a one-day short course; see <ref> [8] </ref>), but there should be very little learning required to use the GOMS tool itself. A third design goal is that the GOMS model notation in GLEAN should be readable and comprehensible with little or no training. <p> CONCLUSIONS AND FUTURE WORK Our reproduction of Gong's study makes a strong case, along with the others summarized by John & Kieras <ref> [8] </ref>, that GOMS modeling is an efficient usability evaluation technique, especially when augmented with automated tools such as GLEAN.
Reference: 9. <author> Kieras, D. E. </author> <year> (1988). </year> <title> Towards a practical GOMS model methodology for user interface design. </title> <editor> In M. Helander (Ed.), </editor> <booktitle> Handbook of HumanComputer Interaction (pp. 135158). </booktitle> <address> Amsterdam: </address> <publisher> NorthHolland Elsevier. </publisher>
Reference-contexts: The type of GOMS model used in the work reported here is known as the NGOMSL methodology <ref> [8, 9, 10] </ref> and is based on the cognitive modeling of human-computer interaction by Kieras and Polson [1, 13]. NGOMSL is an acronym for Natural GOMS Language, which is a structured natural language used to represent the user's methods and selection rules. <p> This profiling facility helps the designer to determine the source of any differences in task execution time when comparing interface designs. GLEAN calculates execution time predictions by following the recommendations in Kieras <ref> [9, 10] </ref> and Gong [5, 6]. For example, each GOMSL step requires 0.1 s, each keystroke, 0.28 s. <p> GLEAN maintains the current position of the mouse cursor, and so can use Fitts' Law [4] to calculate the time required to move the cursor to a target object whose size is specified. GLEAN calculates predicted procedure learning time following the formulas recommended by Kieras <ref> [9, 10] </ref> and Gong [5, 6]. GLEAN tallies the total number of method steps to be learned, taking account of which methods the designer has designated as already known to the user. <p> Since the time to learn the procedures depends on the number of steps in the methods, the learning time predictions are sensitive to the "programming style" used in writing the methods. The style rules and model structure suggestions in the NGOMSL methodology <ref> [9, 10] </ref> are rather loose and informal compared to GOMSL. NGOMSL was intended to be suitable for easy construction and manual application, while GOMSL is machine-executable and much more tightly specified, especially with respect to WM usage and task instance definitions. <p> We attempted to reproduce Gong's models and predicted usability results with GLEAN. Summary of Gong's Study Gong applied the GOMS model methodology described in <ref> [9] </ref> to the design of a fullsized Macintosh computer software application. <p> Working independently, Gong constructed a GOMS model in NGOMSL of this original interface, and following the procedures in <ref> [9] </ref>, evaluated it both qualitatively and quantitatively. The results of the GOMS evaluation was far more detailed and specific than the user survey results. Gong discovered a variety of problems in the interface procedures that were predicted to produce longer learning time and slower execution time than necessary.
Reference: 10. <author> Kieras, D. </author> <year> (1994). </year> <title> GOMS Modeling of User Interfaces using NGOMSL. </title> <booktitle> Tutorial Notes, CHI'94 Conference on Human Factors in Computer Systems, </booktitle> <address> Boston, MA, </address> <month> April 24-28, </month> <year> 1994. </year>
Reference-contexts: The type of GOMS model used in the work reported here is known as the NGOMSL methodology <ref> [8, 9, 10] </ref> and is based on the cognitive modeling of human-computer interaction by Kieras and Polson [1, 13]. NGOMSL is an acronym for Natural GOMS Language, which is a structured natural language used to represent the user's methods and selection rules. <p> This profiling facility helps the designer to determine the source of any differences in task execution time when comparing interface designs. GLEAN calculates execution time predictions by following the recommendations in Kieras <ref> [9, 10] </ref> and Gong [5, 6]. For example, each GOMSL step requires 0.1 s, each keystroke, 0.28 s. <p> GLEAN maintains the current position of the mouse cursor, and so can use Fitts' Law [4] to calculate the time required to move the cursor to a target object whose size is specified. GLEAN calculates predicted procedure learning time following the formulas recommended by Kieras <ref> [9, 10] </ref> and Gong [5, 6]. GLEAN tallies the total number of method steps to be learned, taking account of which methods the designer has designated as already known to the user. <p> Since the time to learn the procedures depends on the number of steps in the methods, the learning time predictions are sensitive to the "programming style" used in writing the methods. The style rules and model structure suggestions in the NGOMSL methodology <ref> [9, 10] </ref> are rather loose and informal compared to GOMSL. NGOMSL was intended to be suitable for easy construction and manual application, while GOMSL is machine-executable and much more tightly specified, especially with respect to WM usage and task instance definitions.
Reference: 11. <author> Kieras, D. E., & Bovair, S. </author> <year> (1984). </year> <title> The role of a mental model in learning to operate a device. </title> <journal> Cognitive Science, </journal> <volume> 8, </volume> <pages> 255-273. </pages>
Reference-contexts: The point operator then uses this working memory information. See text for further explanation. legibility of typefaces on CRTs, and also very high-level issues such as the user's conceptual knowledge of the system, e.g., whether the user has an appropriate "mental model" <ref> [11] </ref>, or the extent to which the system fits appropriately into an organization [see 8]. The lowest-level issues are dealt with well by standard human factors methodology, while understanding the higher-level concerns is currently a matter of practitioner wisdom and the higher-level task analysis techniques [15].
Reference: 12. <author> Kieras, D.E., & Polson, P. </author> <year> (1983). </year> <title> A generalized transition network representation for interactive systems. </title> <booktitle> In Proceedings of CHI '83 Human Factors in Computing Systems (Boston, </booktitle> <month> Dec. </month> <pages> 13-15, </pages> <address> 1983), </address> <publisher> ACM, </publisher> <address> New York, </address> <pages> 103-106. </pages>
Reference-contexts: If the icon is subsequently dragged, then its location would also be updated. This approach of simulating the abstract behavior of the device was followed in the original Kieras and Polson modeling work with a specialized transition-network representation of the device behavior <ref> [1, 12, 13] </ref>. Our current description notation is intended to be much easier to use, being similar in syntax to GOMSL. The Device Behavior Description includes the objects in the interface their properties, and their behavior in response to user input.
Reference: 13. <author> Kieras, D. E., & Polson, P. G. </author> <year> (1985). </year> <title> An approach to the formal analysis of user complexity. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 22, </volume> <pages> 365-394. </pages>
Reference-contexts: The type of GOMS model used in the work reported here is known as the NGOMSL methodology [8, 9, 10] and is based on the cognitive modeling of human-computer interaction by Kieras and Polson <ref> [1, 13] </ref>. NGOMSL is an acronym for Natural GOMS Language, which is a structured natural language used to represent the user's methods and selection rules. This paper introduces GOMSL, (GOMS Language), which is a formalized, machine-executable form of NGOMSL. <p> If the icon is subsequently dragged, then its location would also be updated. This approach of simulating the abstract behavior of the device was followed in the original Kieras and Polson modeling work with a specialized transition-network representation of the device behavior <ref> [1, 12, 13] </ref>. Our current description notation is intended to be much easier to use, being similar in syntax to GOMSL. The Device Behavior Description includes the objects in the interface their properties, and their behavior in response to user input.
Reference: 14. <author> Kieras, D., Wood, S., & Meyer, D. </author> <year> (1995). </year> <title> Predictive Engineering Models Using the EPIC Architecture for a High-Performance Task. </title> <booktitle> In Proceedings of CHI'95 Human Factors in Computing Systems (Denver, </booktitle> <address> May 7-11, 1995), New York:ACM. </address>
Reference-contexts: Finally, of course, we need to obtain feedback from representative software developers and interface designers on the ease of learning and using both GOMSL and the GLEAN tool itself. In the longer term, we plan to incorporate results from research in progress such as <ref> [14] </ref> for estimating the time required for visual search and possibly identifying portions of the interface where user errors are especially likely. The device simulator portion of GLEAN is problematic. Developing an accurate and complete GOMS model 0 50 100 g r e a d a Interface Dev. User assess.
Reference: 15. <author> Kirwan, B., & Ainsworth, L. K. </author> <year> (1992). </year> <title> A guide to task analysis. </title> <publisher> London: Taylor and Francis. </publisher>
Reference-contexts: Thus, GOMS modeling does not replace the most critical process in designing a usable system, that of understanding the user's situation, working context, and goals. Approaches to this stage of interface design have been presented in sources such <ref> [7, 15] </ref>. Second, GOMS models can predict the procedural aspects of usability; these concern the amount, consistency, and efficiency of the procedures that users must follow. <p> The lowest-level issues are dealt with well by standard human factors methodology, while understanding the higher-level concerns is currently a matter of practitioner wisdom and the higher-level task analysis techniques <ref> [15] </ref>. Considerably more research is needed on the higher-level aspects of usability, and tools for dealing with the corresponding design issues are far off.
Reference: 16. <author> Lewis, C. & Rieman, J. </author> <title> (1994) Task-centered user interface design: A practical introduction. </title> <note> Shareware book available at ftp.cs.colorado.edu/pub/cs/distribs/clewis/HCI-Design-Book </note>
Reference-contexts: Fifth, there has been a widespread belief that constructing and using GOMS models is too time-consuming to be practical (e.g., <ref> [16] </ref>). However, the many cases surveyed by John & Kieras [8] make clear that members of the GOMS family have been applied in many practical situations and were often very time and cost-effective. A substantial problem is that the calculations required to derive the predictions are tedious and mechanical.
Reference: 17. <author> Nielsen, J. & Mack, </author> <title> R.L. (Eds). Usability inspection methods. </title> <address> New York: </address> <publisher> Wiley, </publisher> <year> 1994. </year>
Reference-contexts: One response has been the development of "discount" or "inspection" methods for assessing the usability of an interface design quickly and at low cost <ref> [17] </ref>. However, another response, which has been evolving since the seminal Card, Moran, and Newell work, is the concept of engineering models for usability.
Reference: 18. <author> Wood, S. </author> <year> (1993). </year> <title> Issues in the implementation of a GOMS-model design tool. </title> <type> Unpublished report, </type> <institution> University of Michigan. </institution>
Reference-contexts: DESCRIPTION OF GLEAN Design Goals A first and fundamental design goal is that GLEAN must automate the tedious calculations required to generate usability predictions from a GOMS model. A prototype version of GLEAN, developed by Scott Wood <ref> [18] </ref>, demonstrated that this was feasible. Part of this goal is that the designer should obtain the results of the GOMS analysis in a useful and intelligible form.
References-found: 18

