URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-019.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: An efficient approximation algorithm for load balancing with resource migration in distributed systems  
Author: Ravi Varadarajan 
Address: Gainesville, FL 32611  
Affiliation: Computer and Information Sciences Department University of Florida,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. Baumgartner and B. Wah, </author> <title> "GAMMON: A Load Balancing Strategy for Local Computer System with Multiaccess Networks," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 38, no. 8, </volume> <month> Aug. </month> <year> 1989, </year> <pages> pp. 1098-1109. </pages>
Reference-contexts: Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. [10, 21, 32]), Bayesian decision models (e.g. [27]) or other probabilistic approaches (e.g. [23]). Load balancing models for distributed memory multiprocessor systems (e.g. <ref> [1, 9] </ref>) exploit the specific topologies of the interconnetion networks. The load balancing model we propose in this paper is a centralized graph-theoretic deterministic model that includes both job and resource migration. First we give a few examples of applications where resource migration can also be used for load balancing.
Reference: [2] <author> S. H. Bokhari, </author> <title> "Dual Processor Scheduling with Dynamic Reassignment," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 5, no. 4, </volume> <month> July </month> <year> 1979, </year> <pages> pp. 341-349. </pages>
Reference-contexts: In general, load balancing models can be classified in the following four ways : (a) static and dynamic, (b) centralized and decentralized, (c) deterministic and stochastic and (d) models for general distributed and multiprocessor systems and those for systems with specific topologies. Job allocation (e.g. <ref> [2, 28] </ref>) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site.
Reference: [3] <author> S. W. Bollinger and S. F. Midkiff, </author> <title> "Processor and Link Assignment in Multicomputers Using Simulated Annealing," </title> <booktitle> Proc. Intl. Conf. on Parallel Processing, </booktitle> <month> May </month> <year> 1988, </year> <month> Vol.I, </month> <pages> pp. 1-7. </pages>
Reference-contexts: Note that the delay here does not represent the average delay as given in a queueing model but rather gives a bound on the processing delay assuming no particular queueing discipline. A similar delay function is employed in the processor and link assignment problem studied in <ref> [3] </ref>. Thus the load balancing problem is one of determining I, g and f so as to achieve a desirable combination of R (I; f ) and Q (I; g).
Reference: [4] <author> F. Bonomi and A. Kumar, </author> <title> "Adaptive Optimal Load Balancing in a Nonhomogeneous Multiserver System with a Central Job Scheduler," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 39, no. 10, </volume> <month> Oct. </month> <year> 1990, </year> <pages> pp. 1232-1250. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. <ref> [21, 4] </ref>) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. [17, 18, 19, 22, 24, 26, 32]), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes.
Reference: [5] <author> T. L. Casavant and J. G. Kuhl, </author> <title> "A Taxonomy of Scheduling in General-purpose Distributed Computing Systems," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 14, no. 2, </volume> <month> Feb. </month> <year> 1988, </year> <pages> pp. 141-154. </pages>
Reference-contexts: And the latter is performed only when the pattern of resource requests has changed dramatically and when this change is expected to last over a long period of time. In the literature, many load balancing models have been proposed for distributed and multiprocessor systems. Casavant and Kuhl <ref> [5] </ref> give a survey of many of these models.
Reference: [6] <author> R. G. Casey, </author> <title> "Allocation of Copies of a File in an Information Network," </title> <booktitle> SJCC , 1972, </booktitle> <pages> pp. 617-625. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation <ref> [6, 33] </ref> models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. <p> A transaction submitted by the user at a node translates into file access requests which can be either queries or updates. All the file migration and allocation models that had been proposed before (e.g. <ref> [6] </ref>, [31]) assume that the file access requests are always sent to the nearest node containing a file copy; they ignore the effect of balancing the requests among the different file copy nodes.
Reference: [7] <author> S. Ceri, M. Negri and G. Pelagatti, </author> <title> "Horizontal Data Partitioning in Database Design," </title> <booktitle> Proc. ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <year> 1982. </year>
Reference-contexts: Now we will illustrate how our proposed model can be used to address the issue of file migration in distributed databases. File migration in distributed databases In a distributed relational database, relations are partitioned either vertically (grouping of attributes) [20] or horizontally (collections of tuples) <ref> [7] </ref> into possibly overlapping fragments which are referred to as database files. These files are distributed among the different sites or nodes in the network. To increase the availability as well as to improve the transaction response time, it is a common practice to replicate many of these files.
Reference: [8] <author> E. G. Coffman, M. R. Garey and D. S. Johnson, </author> <title> "An Application of Bin-packing to Multiprocessor Scheduling," </title> <journal> SIAM Journal on Computing, Vol.7, </journal> <volume> no. 1, </volume> <month> Feb. </month> <year> 1978, </year> <pages> pp. 1-17. </pages>
Reference-contexts: Let T fl be the optimum value given by T fl = min g T (g) = max y2I P fx2V jg (x)=yg b x . It has been proved <ref> [8] </ref> that L T fl U where L = max P jIj ; max x b x and U = max 2 x b x In the best-fit decreasing heuristic, a bin capacity of L is initially assumed and the items (jobs) are considered in non-increasing order of their sizes. <p> The worst-case time complexity of the best-fit decreasing algorithm is given by O (jV j log jV j + jV jjIj). In the multi-fit algorithm proposed by Coffman, Garey and Johnson <ref> [8] </ref>, binary search is employed on the interval [L; U ] to arrive at the smallest bin capacity for which the first-fit decreasing heuristic can fit all the items into the given bins without increasing their capacities. <p> This procedure uses the best-fit decreasing heuristic that can easily be shown (using an argument identical to the one employed in <ref> [8] </ref> to show a similar bound for the multi-fit heuristic) to give a solution with the delay ffi (y) U j for all y 2 I j .
Reference: [9] <author> G. Cybenko, </author> <title> "Dynamic Load Balancing for Distributed Memory Multiprocessors," </title> <journal> J. Parallel and Distributed Computing, Vol.7, no.2, </journal> <month> Oct. </month> <year> 1989, </year> <pages> pp. 279-301. </pages>
Reference-contexts: Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. [10, 21, 32]), Bayesian decision models (e.g. [27]) or other probabilistic approaches (e.g. [23]). Load balancing models for distributed memory multiprocessor systems (e.g. <ref> [1, 9] </ref>) exploit the specific topologies of the interconnetion networks. The load balancing model we propose in this paper is a centralized graph-theoretic deterministic model that includes both job and resource migration. First we give a few examples of applications where resource migration can also be used for load balancing.
Reference: [10] <author> D. L. Eager, E. D. Lazowska and J. Zahorjan, </author> <title> "Adaptive Load Sharing in Homogeneous Distributed Systems," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 12, no. 5, </volume> <month> May </month> <year> 1986, </year> <pages> pp. 662-675. </pages>
Reference-contexts: Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies. Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. <ref> [10, 21, 32] </ref>), Bayesian decision models (e.g. [27]) or other probabilistic approaches (e.g. [23]). Load balancing models for distributed memory multiprocessor systems (e.g. [1, 9]) exploit the specific topologies of the interconnetion networks.
Reference: [11] <author> D. K. Friesen and M. A. Langston, </author> <title> "Evaluation of a MULTIFIT-Based Scheduling Algorithm," </title> <journal> Journal of Algorithms, </journal> <volume> 7, </volume> <year> 1986, </year> <pages> pp. 35-59. </pages>
Reference-contexts: The multi-fit algorithm has been shown to give solutions that are no more than 6 5 times the optimal value T fl and can be as much as 13 11 times T fl for some instances <ref> [11] </ref>. Friesen and Langston show [11] that a modification of the multi-fit algorithm provides solutions that are no more than 72 61 times T fl . <p> The multi-fit algorithm has been shown to give solutions that are no more than 6 5 times the optimal value T fl and can be as much as 13 11 times T fl for some instances <ref> [11] </ref>. Friesen and Langston show [11] that a modification of the multi-fit algorithm provides solutions that are no more than 72 61 times T fl . We use the best-fit decreasing heuristic for our job migration problem due to its simplicity and its potential for providing good approximate solutions on the average. <p> from the fact that jI j j = P m Q 0 (T F J c J S 0 Remarks: The constant max (2; (1 + * 2 )) used in the bound on Q (I; g) can be improved to max 72 if the modified multi-fit algorithm suggested in <ref> [11] </ref> is used in the FindJobMigration procedure instead of the best-fit decreasing fit heuristic. But we prefer the latter due to its simplicity.
Reference: [12] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability | A Guide to the Theory of NP-Completeness, </title> <editor> W. H. </editor> <publisher> Freeman Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: file access request rate taking the place of resource requirements (i.e. b x ) and query response time taking the place of job response time. 3 Proposed approximation approach The load balancing problem LBP can easily be shown to be NP-hard by a simple reduction from the Dominating set problem <ref> [12] </ref>. One approach to obtaining an optimal solution is to use heuristic search techniques such as branch-and-bound algorithms. We implemented one such branch-and-bound algorithm. Even for reasonable size problems with 12 nodes and 4 resource units, the branch-and-bound program took more than 2 CPU hours for some problem instances. <p> This job migration problem is NP-hard since a special case of this problem with equal values of d xy for all x; y 2 V , becomes identical to the multiprocessor scheduling problem that is already known to be NP-Complete <ref> [12] </ref>. For determining job migration within a region, we ignore the communication costs and attempt to balance the resource access requests evenly among the nodes that contain the resource units after resource migration. <p> Since this problem is identical to the multiprocessor scheduling optimization problem, we use one of the approximation algorithms that had been proposed for the latter problem. The heuristics behind these approximation algorithms are quite similar to the heuristics proposed for the bin-packing problem <ref> [12] </ref>. <p> Usually these algorithms produce suboptimal solutions. Though the clustering or partitioning problem is NP-hard in general <ref> [12] </ref>, it needs to be solved only once at the time of system design and it can remain the same so long as the network remains the same. It is interesting to explore local search techniques that give good approximate solutions on the average and can efficiently be parallelized.
Reference: [13] <author> R. S. Garfinkel and M. R. Rao, </author> <title> "The bottleneck Transportation Problem," </title> <journal> Nav. Res. Log. Quart. </journal> <volume> 18, </volume> <year> 1971, </year> <pages> pp. 465-472. </pages>
Reference-contexts: For a supply region W j , the supply quantity is given by N j R j , while for a destination region W j , the demand quantity is given by R j N j . Efficient algorithms (e.g. <ref> [13] </ref>, [25]) had been proposed in the literature to solve m fi n bottleneck transportation problems in which there are m suppliers and n destinations. Of these, the algorithm due to Garfinkel and Rao [13] has a polynomial time complexity given by O ((m + n) 3 log (mn)). <p> Efficient algorithms (e.g. <ref> [13] </ref>, [25]) had been proposed in the literature to solve m fi n bottleneck transportation problems in which there are m suppliers and n destinations. Of these, the algorithm due to Garfinkel and Rao [13] has a polynomial time complexity given by O ((m + n) 3 log (mn)). <p> Steps 3 and 4 take O (m) time. Step 5 takes O (m 2 ) time. Step 6 takes O (m 3 log m) time if we employ the algorithm of <ref> [13] </ref> to solve the m fi m bottleneck transportation problem. Step 7 takes O (p) time where p is the number of resource units and m p n. Step 8 takes O (n log n + nm) time. Step 9 takes O (n) time.
Reference: [14] <author> B. Gavish and O. R. Liu-Sheng, </author> <title> "Dynamic File Migration in Distributed Computer Systems," </title> <journal> Communications of the ACM, Vol.33, </journal> <volume> no. 2, </volume> <month> Feb. </month> <year> 1990, </year> <pages> pp. 177-189. 33 </pages>
Reference-contexts: We will discuss, in detail, the example of database file migration in a later section. Many file migration models exist in the literature (e.g. <ref> [15, 14, 30, 31] </ref>). But these models with the exception of [15] ignore the effect of balancing the file access requests evenly among the many copies of the file.
Reference: [15] <author> A. Hac, </author> <title> "A Distributed Algorithm for Performance Improvement Through File Replica--tion, File Migration, </title> <journal> and Process Migration" IEEE Trans. Software Engineering, </journal> <volume> Vol. 15, no. 11, </volume> <month> Nov. </month> <year> 1989, </year> <pages> pp. 1459-1470. </pages>
Reference-contexts: We will discuss, in detail, the example of database file migration in a later section. Many file migration models exist in the literature (e.g. <ref> [15, 14, 30, 31] </ref>). But these models with the exception of [15] ignore the effect of balancing the file access requests evenly among the many copies of the file. <p> We will discuss, in detail, the example of database file migration in a later section. Many file migration models exist in the literature (e.g. [15, 14, 30, 31]). But these models with the exception of <ref> [15] </ref> ignore the effect of balancing the file access requests evenly among the many copies of the file. A distributed heuristic is proposed in [15] to determine whether to migrate a process or a file, or whether to replicate a file and this decision is based on probablistic estimates of number <p> Many file migration models exist in the literature (e.g. [15, 14, 30, 31]). But these models with the exception of <ref> [15] </ref> ignore the effect of balancing the file access requests evenly among the many copies of the file. A distributed heuristic is proposed in [15] to determine whether to migrate a process or a file, or whether to replicate a file and this decision is based on probablistic estimates of number of read and write accesses to files and the utilization of various resources in the system.
Reference: [16] <author> A. K. Jain and R. C. Dubes, </author> <title> Algorithms for Clustering Data, </title> <publisher> Prentice Hall Advanced Reference Series, </publisher> <address> New Jersey, </address> <year> 1988. </year>
Reference-contexts: For this reason, the partitioning task is left to the system designer to specify. But if the partitioning needs to be performed by our load balancing algorithm, we can make use of clustering algorithms proposed in the literature (see <ref> [16] </ref> for a good review of clustering algorithms). In particular, the k-means clustering algorithms attempt to find a partition of k regions so as to minimize the sum of the squares of the deviations of the intra-region distances from the regional averages. Usually these algorithms produce suboptimal solutions.
Reference: [17] <author> F. C. H. Lin and R. M. Keller, </author> <title> "The Gradient Model Load Balancing Method," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 13, </volume> <month> Jan. </month> <year> 1987, </year> <pages> pp. 32-38. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. <ref> [17, 18, 19, 22, 24, 26, 32] </ref>), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies.
Reference: [18] <author> V. M. Milutinovic, J. J. Crnkovic and C. E. Houstis, </author> <title> "A Simulation Study of Two Distributed Task Allocation Procedures," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 14, no. 1, </volume> <month> Jan. </month> <year> 1988, </year> <pages> pp. 54-61. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. <ref> [17, 18, 19, 22, 24, 26, 32] </ref>), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies.
Reference: [19] <author> R. Mirchandaney, D. Towsley and J. Stankovic, </author> <title> "Adaptive Load Sharing in Heterogeneous Distributed Systems," </title> <journal> J. Parallel and Distributed Computing, Vol.9, </journal> <volume> no.4, </volume> <month> Aug. </month> <year> 1990, </year> <pages> pp. 331-346. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. <ref> [17, 18, 19, 22, 24, 26, 32] </ref>), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies.
Reference: [20] <author> S. B. Navathe, S. Ceri, G. Wiederhold and J. Dou, </author> <title> "Vertical Partitioning algorithms for Database Design," </title> <journal> ACM Trans. on Database Systems, Vol.9, </journal> <volume> no. 4, </volume> <month> Dec. </month> <year> 1984, </year> <pages> pp. 680-710. </pages>
Reference-contexts: Now we will illustrate how our proposed model can be used to address the issue of file migration in distributed databases. File migration in distributed databases In a distributed relational database, relations are partitioned either vertically (grouping of attributes) <ref> [20] </ref> or horizontally (collections of tuples) [7] into possibly overlapping fragments which are referred to as database files. These files are distributed among the different sites or nodes in the network.
Reference: [21] <author> L. M. Ni and K. Hwang, </author> <title> "Optimal Load Balancing in a Multiple Processor System with Many Job Classes," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 11, </volume> <month> May </month> <year> 1985, </year> <pages> pp. 491-496. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. <ref> [21, 4] </ref>) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. [17, 18, 19, 22, 24, 26, 32]), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. <p> Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies. Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. <ref> [10, 21, 32] </ref>), Bayesian decision models (e.g. [27]) or other probabilistic approaches (e.g. [23]). Load balancing models for distributed memory multiprocessor systems (e.g. [1, 9]) exploit the specific topologies of the interconnetion networks.
Reference: [22] <author> L. M. Ni, C. W. Xu and Gendreau, </author> <title> "A Distributed Drafting Algorithm for Load Balancing," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 11, no. 11, </volume> <month> Oct. </month> <year> 1985, </year> <pages> pp. 1153-1161. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. <ref> [17, 18, 19, 22, 24, 26, 32] </ref>), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies.
Reference: [23] <author> E. Shamir and E. Upfal, </author> <title> "Probabilistic Approach to the Load Sharing Problem in Distributed Systems," </title> <journal> J. Parallel and Distributed Computing, Vol.4, </journal> <volume> no.5, </volume> <month> Oct. </month> <year> 1987, </year> <pages> pp. 521-530. </pages>
Reference-contexts: Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies. Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. [10, 21, 32]), Bayesian decision models (e.g. [27]) or other probabilistic approaches (e.g. <ref> [23] </ref>). Load balancing models for distributed memory multiprocessor systems (e.g. [1, 9]) exploit the specific topologies of the interconnetion networks. The load balancing model we propose in this paper is a centralized graph-theoretic deterministic model that includes both job and resource migration.
Reference: [24] <author> K. G. Shin and Y-C. Chang, </author> <title> "Load Sharing in Distributed Real-Time Systems with State-Change Broadcast," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 38, no. 8, </volume> <month> Aug. </month> <year> 1989, </year> <pages> pp. 1124-1142. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. <ref> [17, 18, 19, 22, 24, 26, 32] </ref>), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies.
Reference: [25] <author> V. Srinivasan and G. L. Thompson, </author> <title> "Algorithms for Minimizing Total Cost, Bottleneck Time and Bottleneck Shipment in Transportation Problems," </title> <journal> Nav. Res. Log. Quart. </journal> <volume> 23, </volume> <year> 1976, </year> <pages> pp. 567-595. </pages>
Reference-contexts: For a supply region W j , the supply quantity is given by N j R j , while for a destination region W j , the demand quantity is given by R j N j . Efficient algorithms (e.g. [13], <ref> [25] </ref>) had been proposed in the literature to solve m fi n bottleneck transportation problems in which there are m suppliers and n destinations. Of these, the algorithm due to Garfinkel and Rao [13] has a polynomial time complexity given by O ((m + n) 3 log (mn)). <p> For each such instance, an optimal solution to the LBP was determined using the branch-and-bound approach. The approximation algorithm of Section 4 was then employed for the given partition to determine an approximate solution to the LBP. The bottleneck transportation problem was solved using the algorithm of <ref> [25] </ref>. Though the branch-and-bound algorithm took as many as 2 CPU hours to solve some instances, the approximation algorithm gave solutions almost instantaneously. We then compared the approximate solution to the optimal solution with respect to (i) bottleneck resource migration cost and (ii) job response time.
Reference: [26] <author> J. A. Stankovic and I. Sidhu, </author> <title> "An Adaptive Bidding algorithm for Processes, Clusters and Distributed groups," </title> <booktitle> Proc. Intl. Conf. Distributed Comp. Systems, </booktitle> <month> May </month> <year> 1984. </year> <month> 34 </month>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. <ref> [17, 18, 19, 22, 24, 26, 32] </ref>), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies.
Reference: [27] <author> J. A. Stankovic, </author> <title> "An Application of Bayesian Decision Theory to Decentralized Control of Job Scheduling," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 34, no. 2, </volume> <month> Feb. </month> <year> 1985, </year> <pages> pp. 117-130. </pages>
Reference-contexts: Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies. Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. [10, 21, 32]), Bayesian decision models (e.g. <ref> [27] </ref>) or other probabilistic approaches (e.g. [23]). Load balancing models for distributed memory multiprocessor systems (e.g. [1, 9]) exploit the specific topologies of the interconnetion networks. The load balancing model we propose in this paper is a centralized graph-theoretic deterministic model that includes both job and resource migration.
Reference: [28] <author> H. S. Stone, </author> <title> "Multiprocessor Scheduling with the Aid of Network Flow Algorithms," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 3, no. 1, </volume> <month> Jan. </month> <year> 1977, </year> <pages> pp. 85-93. </pages>
Reference-contexts: In general, load balancing models can be classified in the following four ways : (a) static and dynamic, (b) centralized and decentralized, (c) deterministic and stochastic and (d) models for general distributed and multiprocessor systems and those for systems with specific topologies. Job allocation (e.g. <ref> [2, 28] </ref>) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. <p> In decentralized models (e.g. [17, 18, 19, 22, 24, 26, 32]), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. <ref> [28] </ref>), integer programming or heuristic approaches such as those used in distributed strategies. Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. [10, 21, 32]), Bayesian decision models (e.g. [27]) or other probabilistic approaches (e.g. [23]).
Reference: [29] <author> R. Varadarajan, </author> <title> "An Optimal algorithm for 2 fi n bottleneck transportation problems," </title> <note> to appear in Operations Research Letters, </note> <editor> Vol.10, </editor> <volume> no. 9, </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The special case of m = 2 (or n = 2) can be solved optimally in O (n) (or O (m)) time using the algorithm proposed in <ref> [29] </ref>. 3.2 Reducing regional resource requirements Now we address the case when the bottleneck transportation formulation is infeasible, that is, when P m P m k=1 N k . This does not necessarily mean however that the load balancing problem LBP is infeasible.
Reference: [30] <author> B. W. Wah, </author> <title> "A systematic Approach to the Management of Data on Distributed Databases," </title> <type> Ph.D. thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1979. </year>
Reference-contexts: We will discuss, in detail, the example of database file migration in a later section. Many file migration models exist in the literature (e.g. <ref> [15, 14, 30, 31] </ref>). But these models with the exception of [15] ignore the effect of balancing the file access requests evenly among the many copies of the file. <p> As a result, we seek efficient algorithms that 10 provide close to optimal solutions. One possible approximation approach is to use a branch--and-bound search that terminates with an approximate solution instead of with an optimal solution <ref> [30] </ref>. But the heuristic rules for obtaining these approximate solutions are generally difficult to derive for constrained optimization problems such as the one we had proposed. We propose an approximation approach that is efficient, simple to understand and yet can provide reasonably good approximate solutions.
Reference: [31] <author> B. W. Wah, </author> <title> "File Placement on Distributed Computer Systems," </title> <journal> IEEE Computer , Vol.17, </journal> <volume> no. 1, </volume> <month> Jan </month> <year> 1984, </year> <pages> pp. 23-32. </pages>
Reference-contexts: We will discuss, in detail, the example of database file migration in a later section. Many file migration models exist in the literature (e.g. <ref> [15, 14, 30, 31] </ref>). But these models with the exception of [15] ignore the effect of balancing the file access requests evenly among the many copies of the file. <p> When load balancing can be achieved with both job and resource migration, first there is a problem of determining when to migrate jobs or resources. This migration detection problem is NP-Complete (see <ref> [31] </ref>) even in the presence of complete information regarding the future resource requirements. Hence in many applications, these migration points are not determined beforehand but instead the load balancing problem is considered periodically or at time points of degradation of specific performance measures. <p> A transaction submitted by the user at a node translates into file access requests which can be either queries or updates. All the file migration and allocation models that had been proposed before (e.g. [6], <ref> [31] </ref>) assume that the file access requests are always sent to the nearest node containing a file copy; they ignore the effect of balancing the requests among the different file copy nodes.
Reference: [32] <author> Y. T. Wang and R. J. T. Morris, </author> <title> "Load Sharing in Distributed Systems," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 34, no. 3, </volume> <month> Mar. </month> <year> 1985, </year> <pages> pp. 204-217. </pages>
Reference-contexts: Job allocation (e.g. [2, 28]) and resource allocation [6, 33] models belong to the static category while job and resource migration models belong to the dynamic category. In centralized load balancing models (e.g. [21, 4]) load balancing decisions are performed 4 at a central site. In decentralized models (e.g. <ref> [17, 18, 19, 22, 24, 26, 32] </ref>), the nodes or processors perform load balancing using distributed strategies that rely on some local information available to the nodes. Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies. <p> Deterministic load balancing models usually involve graph-theoretic (e.g. [28]), integer programming or heuristic approaches such as those used in distributed strategies. Stochastic load balancing models are based on Markov chains and (e.g. queueing models (e.g. <ref> [10, 21, 32] </ref>), Bayesian decision models (e.g. [27]) or other probabilistic approaches (e.g. [23]). Load balancing models for distributed memory multiprocessor systems (e.g. [1, 9]) exploit the specific topologies of the interconnetion networks.

References-found: 32

