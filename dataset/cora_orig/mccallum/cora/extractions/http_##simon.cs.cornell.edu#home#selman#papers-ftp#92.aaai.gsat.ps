URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/92.aaai.gsat.ps
Refering-URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/papers.html
Root-URL: 
Email: selman@research.att.com  hector@ai.toronto.edu  mitchell@cs.sfu.ca  
Title: A New Method for Solving Hard Satisfiability Problems best viewed as a model-finding procedure. Its
Author: Bart Selman Hector Levesque David Mitchell 
Note: GSAT is  suggests that it may be advantageous to reformulate reasoning tasks that have traditionally been viewed as theorem-proving problems as model-finding tasks.  
Address: Murray Hill, NJ 07974  Toronto, Canada M5S 1A4  Burnaby, Canada V5A 1S6  
Affiliation: AT&T Bell Laboratories  Dept. of Computer Science University of Toronto  Dept. of Computing Science Simon Fraser University  
Abstract: We introduce a greedy local search procedure called GSAT for solving propositional satisfiability problems. Our experiments show that this procedure can be used to solve hard, randomly generated problems that are an order of magnitude larger than those that can be handled by more traditional approaches such as the Davis-Putnam procedure or resolution. We also show that GSAT can solve structured satisfiability problems quickly. In particular, we solve encodings of graph coloring problems, N-queens, and Boolean induction. General application strategies and limitations of the approach are also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Adorf, H.M., Johnston, M.D. </author> <year> (1990). </year> <title> A discrete stochastic neural network algorithm for constraint satisfaction problems. </title> <booktitle> Proc. of the Int. Joint Conf. on Neural Networks, </booktitle> <address> San Diego, CA, </address> <year> 1990. </year>
Reference-contexts: We will also explain why we think that finding models may be a useful alternative for many AI reasoning problems. The original impetus for this work was the recent success in finding solutions to very large N-queens problems, first using a connectionist system <ref> (Adorf and Johnston 1990) </ref>, and then using greedy local search (Minton et al. 1990). To us, these results simply indicated that N-queens was an easy problem. We felt that such techniques would fail in practice for SAT. But this appears not to be the case.
Reference: <author> Cook, S.A. </author> <year> (1971). </year> <title> The complexity of theorem-proving procedures. </title> <booktitle> Proceedings of the 3rd Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1971, </year> <pages> 151-158. </pages>
Reference: <author> Davis, M. and Putnam, H. </author> <year> (1960). </year> <title> A computing procedure for quantification theory. </title> <journal> J. Assoc. Comput. Mach., 1960, </journal> <volume> 7 </volume> <pages> 201-215. </pages>
Reference-contexts: GSAT is incomplete. We will discuss this below. Experimental results We tested GSAT on several classes of formulas: random formulas, graph coloring encodings, N-queens encodings, and Boolean induction problems. For purposes of comparison, we ran the tests with the Davis-Putnam procedure (DP) <ref> (Davis and Putnam 1960) </ref>. The DP procedure DP is in essence a resolution procedure (Vellino 1989).
Reference: <author> Falkowski, Bernd-Jurgen and Schmitz, </author> <title> Lothar (1986). A note on the queens' problem. Information Process. </title> <journal> Lett., </journal> <volume> 23, </volume> <year> 1986, </year> <pages> 39-46. </pages>
Reference-contexts: N-queens In the N-queens problem one has to find a placement of N queens on a N fi N chess board such that no queen attacks another. Although a generic solution to the problem is known <ref> (Falkowski et al. 1986) </ref>, it is based on placing the queens in a very specific, regularly repeated pattern on the board. The problem of finding arbitrary solutions has been used extensively to test constraint satisfaction algorithms. Using standard backtracking techniques, the problem appears to be quite hard.
Reference: <author> Franco, J. and Paull, M. </author> <year> (1983). </year> <title> Probabilistic analysis of the Davis Putnam procedure for solving the sat-isfiability problem. </title> <journal> Discrete Applied Math. </journal> <volume> 5, </volume> <year> 1983, </year> <pages> 77-87. </pages>
Reference: <author> Garey, M.R. and Johnson, D.S. </author> <year> (1979). </year> <title> Computers and Intractability, A Guide to the Theory of NP--Completeness. W.H. </title> <publisher> Freeman, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference: <author> Goldberg, A. </author> <year> (1979). </year> <title> On the complexity of the satisfi-ability problem. </title> <journal> Courant Computer Science Report. </journal> <volume> No. </volume> <pages> 16, </pages> <address> New York University, NY, </address> <year> 1979. </year>
Reference: <author> Gu, J. </author> <year> (1992). </year> <title> Efficient local search for very large-scale satisfiability problems. </title> <journal> Sigart Bulletin, </journal> <volume> vol. 3, no. 1, </volume> <year> 1992, </year> <pages> 8-12. </pages>
Reference-contexts: feature of GSAT, however, is the presence of sideways moves, dis 1 After the current paper was prepared for publication, we were surprised to discover that a procedure very similar to ours had been developed independently, and was claimed to solve instances of SAT substantially larger than those discussed here <ref> (Gu 1992) </ref>. It is tempting, however, to discount that work since the large instances involved are in fact easy ones, readily solvable by backtracking procedures like DP in a few seconds. 2 A clause is a disjunction of literals. A literal is a propositional variable or its negation.
Reference: <author> Halpern, J.Y. and Vardi, M.Y. </author> <title> (1991) Model checking vs. theorem proving: a manifesto. </title> <booktitle> Proceedings KR-91, </booktitle> <address> Boston, MA, </address> <pages> 325-334. </pages>
Reference: <author> Hooker, J.N. </author> <title> (1988) Resolution vs. cutting plane solution of inference problems: Some computational experience. </title> <journal> Operations Research Letter, </journal> <volume> 7(1), </volume> <year> 1988. </year>
Reference: <author> Johnson, </author> <title> D.S. </title> <type> (1991) Personal communication, </type> <year> 1991. </year>
Reference: <author> Johnson, D.S., Aragon, C.R., McGeoch, L.A., and Schevon, C. </author> <title> (1991) Optimization by simulated annealing: an experimental evaluation; part ii, graph coloring and number partioning. </title> <journal> Operations Research, </journal> <volume> 39(3) </volume> <pages> 378-406, </pages> <year> 1991. </year>
Reference: <author> Kamath, A.P., Karmarkar, N.K., Ramakrishnan, K.G., and Resende, M.G.C. </author> <year> (1991). </year> <title> A continuous approach to inductive inference. </title> <note> Submitted for publication. </note>
Reference: <author> Kautz, H.A. and Selman, B. </author> <year> (1992). </year> <note> Planning as satis-fiability. Forthcoming. </note>
Reference-contexts: In addition, it is often possible to reformulate tasks that have traditionally been viewed as theorem-proving problems as model-finding ones. One example is the formulation of planning as a model-finding task <ref> (Kautz and Selman 1992) </ref>, and we suspect that there will be many others. Another potential application of GSAT lies in the generation of "vivid" representations (Levesque 1986) as a way of dealing with the computational problems encountered in knowledge representation and reasoning systems.
Reference: <author> Koutsoupias, E. and Papadimitriou C.H. </author> <title> (1992) On the greedy algorithm for satisfiability. </title> <publisher> Forthcoming. </publisher>
Reference: <author> Levesque, H.J. </author> <year> (1986). </year> <title> Making believers out of computers. </title> <journal> Artificial Intelligence, </journal> <volume> 30, </volume> <year> 1986, </year> <pages> 81-108. </pages>
Reference-contexts: One example is the formulation of planning as a model-finding task (Kautz and Selman 1992), and we suspect that there will be many others. Another potential application of GSAT lies in the generation of "vivid" representations <ref> (Levesque 1986) </ref> as a way of dealing with the computational problems encountered in knowledge representation and reasoning systems. Determining what can be deduced from a knowledge base is intractable in general, but not if the knowledge is vivid in form.
Reference: <author> Minton, S., Johnston, M.D., Philips, A.B., and Laird, P. </author> <title> (1990) Solving large-scale constraint satisfaction an scheduling problems using a heuristic repair method. </title> <booktitle> Proceedings AAAI-90, </booktitle> <year> 1990, </year> <pages> 17-24. </pages>
Reference-contexts: The original impetus for this work was the recent success in finding solutions to very large N-queens problems, first using a connectionist system (Adorf and Johnston 1990), and then using greedy local search <ref> (Minton et al. 1990) </ref>. To us, these results simply indicated that N-queens was an easy problem. We felt that such techniques would fail in practice for SAT. But this appears not to be the case.
Reference: <author> Mitchell, D., Selman, B., and Levesque, H.J. </author> <year> (1992). </year> <title> Hard and easy distributions of SAT problems. </title> <publisher> Forthcoming. </publisher>
Reference-contexts: However, Franco and Paull (1983) demonstrated that the instances considered by Goldberg were so satisfiable that an algorithm that simply guessed truth assignments would find a satisfying one just as quickly as DP! This issue is discussed in detail in <ref> (Mitchell et al. 1992) </ref>. Formulas are generated using the uniform distribution or fixed-clause length model. For each class of formulas, we choose the number of variables N , the number of literals per clause K, and the number of clauses L. <p> Nonetheless, solutions are found quickly. Boolean induction Promising results have recently been obtained using integer programming techniques to solve satisfiability problems (Hooker 1988; Kamath et al. 1991). Most of the experimental evaluations of these methods have been based on the constant-density random clause model, which unfortunately under-represents hard instances <ref> (Mitchell et al. 1992) </ref>. To compare GSAT and these methods, we considered the formulas as studied by Kamath et al. (1991) in their work on Boolean induction. In Boolean induction, the task is to derive ("induce") a logical circuit from its input-output behavior.
Reference: <author> Papadimitriou, C.H. </author> <year> (1991). </year> <title> On selecting a satisfying truth assignment. </title> <booktitle> Proc. of 32th Conference on the Foundations of Computer Science, </booktitle> <year> 1991, </year> <note> 163- 169. </note>
Reference: <author> Papadimitriou, C.H., Steiglitz, K. </author> <year> (1982). </year> <title> Combinatorial optimization. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: This process is repeated as needed up to a maximum of MAX-TRIES times. See Figure 1. GSAT mimics the standard local search procedures used for finding approximate solutions to optimization problems <ref> (Papadimitriou and Steiglitz 1982) </ref> in that it only explores potential solutions that are "close" to the one currently being considered. Specifically, we explore the set of assignments that differ from the current one on only one variable.
Reference: <author> Reiter, R. and Mackworth, A. </author> <year> (1989). </year> <title> A logical framework for depiction and image interpretation. </title> <journal> Artificial Intelligence, </journal> <volume> 41, No. 2, </volume> <year> 1989, </year> <pages> 125-155. </pages>
Reference: <author> Selman, B., Levesque, H.J., Mitchell, D. </author> <year> (1992) </year> <month> GSAT: </month> <title> A new method for solving hard satisfiability problems. </title> <type> Technical Report, </type> <institution> AT&T Bell Laboratories, </institution> <year> 1992. </year>
Reference-contexts: Moreover, the procedure can handle much larger formulas (up to 500 variables) than DP (up to around 140 variables). Again, we should stress that we have shown these results for the hardest region of the distribution. Like most other procedures, GSAT also solves the "easy" cases quickly <ref> (Selman et al. 1992) </ref>. Graph coloring In this section, we briefly discuss the performance of GSAT on graph coloring. Consider the problem of coloring with K colors a graph with V vertices such that no two nodes connected by an edge have the same color. <p> scale linearly with the number of queens. 9 To test GSAT on the N-queens problem, we first translate the problem into a satisfiability question: we 8 By using initial assignments that are not completely random, as suggested by Geoff Hinton, we have recently been able to solve also this instance <ref> (Selman et al. 1992) </ref>. 9 There are, it should be mentioned, notable differences in Minton's and our approaches. One is the use of sideways moves. This appears essential in satisfiability testing, discussed below. <p> This is near optimal, since a random truth assignment places about that many queens on the board, and most of them must be removed. (On the order of N flips are needed if one starts with approximately N queens randomly placed on the board in the initial state <ref> (Selman et al. 1992) </ref>.) One of the most interesting aspects of this approach is that so few natural constraints (such as the obvious one of using only N queens) are maintained during the search. Nonetheless, solutions are found quickly. <p> In addition, it is often possible to reformulate tasks that have traditionally been viewed as theorem-proving problems as model-finding ones. One example is the formulation of planning as a model-finding task <ref> (Kautz and Selman 1992) </ref>, and we suspect that there will be many others. Another potential application of GSAT lies in the generation of "vivid" representations (Levesque 1986) as a way of dealing with the computational problems encountered in knowledge representation and reasoning systems.
Reference: <author> Vellino, A. </author> <title> (1989) The complexity of automated reasoning. </title> <type> Ph.D. thesis, </type> <institution> Dept. of Philosophy, University of Toronto, Toronto, </institution> <address> Canada (1989). </address>
Reference-contexts: Experimental results We tested GSAT on several classes of formulas: random formulas, graph coloring encodings, N-queens encodings, and Boolean induction problems. For purposes of comparison, we ran the tests with the Davis-Putnam procedure (DP) (Davis and Putnam 1960). The DP procedure DP is in essence a resolution procedure <ref> (Vellino 1989) </ref>.
References-found: 23

