URL: ftp://ftp.fzi.de/pub/PROST/papers/dp_relations.ps.Z
Refering-URL: http://www.fzi.de/prost/publications/overview.html
Root-URL: http://www.fzi.de
Email: email: zimmer@fzi.de  
Title: Relationships between Design Patterns  
Author: Walter Zimmer 
Address: Haid-und-Neu-Strasse 10-14, D-76131 Karlsruhe, Germany  
Affiliation: Forschungszentrum Informatik, Bereich Programmstrukturen  
Abstract: The catalogue of design patterns from [Gamm94] contains about twenty design patterns and their mutual relationships. In this paper, we organize these relationships into different categories and revise the design patterns and their relationships. We are then able to arrange the design patterns in different layers. The results simplify the understanding of the overall structure of the catalogue, thereby making it easier to classify other design patterns, and to apply these design patterns to software development. 
Abstract-found: 1
Intro-found: 1
Reference: [Alex77] <author> C. Alexander, S. Ishikawa, and M. Silverstein. </author> <title> A Pattern Language. </title> <publisher> Oxford University Press, </publisher> <year> 1977. </year>
Reference-contexts: Similar to the pattern descriptions in architecture <ref> [Alex77] </ref>, each pattern description in [Gamm94] contains a See Also section with possible relationships between design patterns. Furthermore, the catalogue presents a classification of all design patterns according to two criteria: jurisdiction (class, object, compound) and characterization (creational, structural, behav-ioural). <p> The criteria jurisdiction and characterization, which are given in [Gamm94], result in several clusters of design patterns with a similar intent; this arrangement can help during the retrieval of an adequate design pattern for a specific problem. 6. Related Work The notion of design patterns is introduced by <ref> [Alex77] </ref> in the area of architecture. Each design pattern description contains a section where relationships to other patterns, of the same, of a higher or of a lower granularity level are presented.
Reference: [App89] <institution> Apple Computer, Cupertino, California. Inc. </institution> <note> Macintosh Programmers Workshop Pascal 3.0 Reference, </note> <year> 1989. </year>
Reference-contexts: Depending upon the necessary degree of exibility, one typically combines two or all three design patterns (for instance Interpreter). Composite, Decorator: Composite and Decorator are often used together in applications, for example for visual objects in ET++, MacApp and Interviews [Wein88], <ref> [App89] </ref>, [Lint89]. There are also other kinds of relationships between them: when looking at the solution aspect, Decorator can be seen as a degenerated Composite; when considering the problem aspect, they both support recursively structured objects, whereby Decorator focuses on attaching additional properties to objects.
Reference: [Beck93] <author> K. Beck. </author> <title> Patterns and software development. </title> <journal> Dr. Do-bbs Journal, </journal> <volume> 19(2):1823, </volume> <year> 1993. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. <ref> [Beck93] </ref>, [Beck94], [Gamm93], [Gamm94], [Coad93a], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups.
Reference: [Beck94] <author> K. Beck and R. Johnson. </author> <title> Patterns generate architecture. </title> <booktitle> In Proceedings of ECOOP94, </booktitle> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], <ref> [Beck94] </ref>, [Gamm93], [Gamm94], [Coad93a], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. <p> Patterns in a certain cluster can be considered as similar to one another, thereby supporting the selection of an appropriate design pattern for a certain problem. Frameworks [WB90] [John91] can be considered as high-level design patterns, usually consisting of many interrelated design patterns of lower levels. In <ref> [Beck94] </ref> the authors write Patterns can be used at many levels, and what is derived at one level can be considered a basic pattern at another level.
Reference: [Booc93] <author> G. Booch. </author> <title> Patterns. </title> <journal> Object Magazine, </journal> <volume> 3(2), </volume> <year> 1993. </year>
Reference-contexts: Furthermore, they state This is probably typical of most architectures; some patterns will be generic and some will be specific to the application domain, which confirms the organization depicted in Figure Relationships between Design Patterns 8 4. <ref> [Booc93] </ref> also mentions that design patterns are ranging from idioms to frameworks. In [Coad93b], several design patterns are combined in an exemplary application, but the relationships are not investigated any further. 7.
Reference: [Busc93] <author> F. Buschmann. </author> <title> Rational architectures for object-oriented software systems. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 6(5):3041, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93a], [Copl91], [Copl94], [Shaw91], [John92], <ref> [Busc93] </ref>, [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. Development tools supporting the design pattern approach are also under work.
Reference: [Casa92] <author> Eduardo Casais, Michael Ranft, Bernhard Schiefer, Dietmar Theobald, and Walter Zimmer. </author> <title> Obst - an overview. </title> <type> Technical report, </type> <institution> Forschungszentrum Informatik (FZI), Karls-ruhe, Germany, </institution> <month> June </month> <year> 1992. </year> <month> FZI.039.1. </month>
Reference: [Coad93a] <author> P. Coad. </author> <title> Object-oriented patterns. </title> <journal> Communications of the ACM, </journal> <volume> 35(9):153159, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], <ref> [Coad93a] </ref>, [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups.
Reference: [Coad93b] <author> P. Coad. </author> <title> Patterns (workshop). </title> <booktitle> In OOPSLA92 Addendum to the Proceedings, volume 4 of OOPS Messenger, </booktitle> <pages> pages 9396, </pages> <address> Vancouver, B.C., Canada, </address> <month> October </month> <year> 1993. </year> <title> OOPS Messenger, </title> <publisher> ACM Press. </publisher>
Reference-contexts: In <ref> [Coad93b] </ref>, several design patterns are combined in an exemplary application, but the relationships are not investigated any further. 7. Conclusion We have presented a classification of the relationships between design patterns, which led to a new design pattern and to an arrangement of the design patterns into different layers.
Reference: [Copl91] <author> J. Coplien. </author> <title> Advanced C++: Programming Styles and Idioms. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93a], <ref> [Copl91] </ref>, [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups.
Reference: [Copl94] <author> J.O. Coplien. </author> <title> Generative pattern languages: An emerging direction of software design. </title> <type> Technical report, </type> <year> 1994. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93a], [Copl91], <ref> [Copl94] </ref>, [Shaw91], [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. Development tools supporting the design pattern approach are also under work.
Reference: [Gamm93] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design patterns: Abstraction and reuse in object-oriented designs. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> Proceedings of ECOOP93, </booktitle> <pages> pages 406431, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], <ref> [Gamm93] </ref>, [Gamm94], [Coad93a], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. <p> different design patterns that are being discovered, are any related to each other? What are the characteristics of such a relationship? Do two patterns address a similar problem area? Is it possible to combine two design patterns? What are the criteria for classifying design patterns into categories? Very few publications <ref> [Gamm93] </ref> [Gamm94] 1 have adequately addressed these issues. Similar to the pattern descriptions in architecture [Alex77], each pattern description in [Gamm94] contains a See Also section with possible relationships between design patterns. <p> In this paper we will refer to the preliminary version of this catalogue dated from 9/93. We suppose that the reader has at least some knowledge about the design patterns of this catalogue. <ref> [Gamm93] </ref> is a good introductory paper for design patterns and this catalogue. In [Gamm94], the authors have updated their terminology: Cookie fi Memento, Exemplar fi Prototype, Manager fi Mediator, Mimic fi State, Walker fi Visitor, Wrapper fi Decorator. <p> The usage of this de sign pattern allows to vary this objectified behaviour. Therefore, we think that the objectification of behav-iour is a basic design pattern; we call it Objectifier. A detailed description of Objectifier is given in the appendix. It uses the same description format as <ref> [Gamm93] </ref>. The Implementation and Sample Code parts are left out. Relationships between Design Patterns 5 4.2 Other modifications The organization of the relationships in different categories is sometimes difficult, because it partly depends upon subjective criteria. <p> These relationships inuence the construction process, because one should always look at related patterns when one builds something; and because one should always apply patterns of higher levels first. A classification for the patterns, but not for their mutual relationships, is given. <ref> [Gamm93] </ref> [Gamm94] present a large collection of well described design patterns. The relationships between design patterns are also described, but not classified, although a classification of design patterns is included.
Reference: [Gamm94] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Pattern. Addison-Wesley, </title> <note> To Appear, </note> <year> 1994. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], <ref> [Gamm94] </ref>, [Coad93a], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. <p> design patterns that are being discovered, are any related to each other? What are the characteristics of such a relationship? Do two patterns address a similar problem area? Is it possible to combine two design patterns? What are the criteria for classifying design patterns into categories? Very few publications [Gamm93] <ref> [Gamm94] </ref> 1 have adequately addressed these issues. Similar to the pattern descriptions in architecture [Alex77], each pattern description in [Gamm94] contains a See Also section with possible relationships between design patterns. <p> relationship? Do two patterns address a similar problem area? Is it possible to combine two design patterns? What are the criteria for classifying design patterns into categories? Very few publications [Gamm93] <ref> [Gamm94] </ref> 1 have adequately addressed these issues. Similar to the pattern descriptions in architecture [Alex77], each pattern description in [Gamm94] contains a See Also section with possible relationships between design patterns. Furthermore, the catalogue presents a classification of all design patterns according to two criteria: jurisdiction (class, object, compound) and characterization (creational, structural, behav-ioural). The relationships in [Gamm94] are described informally and in detail, so that each relationship appears to <p> Similar to the pattern descriptions in architecture [Alex77], each pattern description in <ref> [Gamm94] </ref> contains a See Also section with possible relationships between design patterns. Furthermore, the catalogue presents a classification of all design patterns according to two criteria: jurisdiction (class, object, compound) and characterization (creational, structural, behav-ioural). The relationships in [Gamm94] are described informally and in detail, so that each relationship appears to be a little bit different from the other ones. We propose a classification of the relationships which helps in understanding the similarities among the relationships. <p> In the next chapter, we present a graphic view of all design patterns and their relationships as they appear in the aforementioned catalogue <ref> [Gamm94] </ref>. Section 3 classifies these relationships. This process raises some problems and gives further insights into the relationships between design patterns in general. After modifying the catalogue structure in Section 4, we show in Section 5 how it is possible to ar 1. <p> In this paper we will refer to the preliminary version of this catalogue dated from 9/93. We suppose that the reader has at least some knowledge about the design patterns of this catalogue. [Gamm93] is a good introductory paper for design patterns and this catalogue. In <ref> [Gamm94] </ref>, the authors have updated their terminology: Cookie fi Memento, Exemplar fi Prototype, Manager fi Mediator, Mimic fi State, Walker fi Visitor, Wrapper fi Decorator. Descriptions of almost all design patterns ofthe forthcoming catalogue can be found on st.cs.uiuc.edu under /pub/patterns/dpcat. <p> Descriptions of almost all design patterns ofthe forthcoming catalogue can be found on st.cs.uiuc.edu under /pub/patterns/dpcat. Relationships between Design Patterns 2 range the design patterns into layers representing differ ent abstraction levels. 2. Overall structure of the design pattern catalogue and their relationships that were in <ref> [Gamm94] </ref>. No fur ther information is added to this figure. The annotations to the arrows are taken almost literally from this cata logue. The variables X and Y are placeholders for the source and target of the respective arrows. of the catalogue. <p> Up to now, only some such combinations are known (see Figure 4). We think, that in the future they will play a more important role, because typical combinations can be used as building blocks in design. The criteria jurisdiction and characterization, which are given in <ref> [Gamm94] </ref>, result in several clusters of design patterns with a similar intent; this arrangement can help during the retrieval of an adequate design pattern for a specific problem. 6. Related Work The notion of design patterns is introduced by [Alex77] in the area of architecture. <p> These relationships inuence the construction process, because one should always look at related patterns when one builds something; and because one should always apply patterns of higher levels first. A classification for the patterns, but not for their mutual relationships, is given. [Gamm93] <ref> [Gamm94] </ref> present a large collection of well described design patterns. The relationships between design patterns are also described, but not classified, although a classification of design patterns is included. <p> These results partially stem from one of our former projects [Zimm94]. Although the design pattern approach and the excellent catalogue <ref> [Gamm94] </ref> have proven effective in this project, the following issues showed up: The design of important abstractions of the application domain often requires the combination of several, interrelated design patterns. Applying design patterns requires a fair knowledge of both single design patterns and their relationships. <p> We are aiming at greater precision and a better semantic definition. This is a prerequisite for defining a generally accepted and usable classification scheme, which will serve as a basis for further work. Many design patterns are being discovered and described outside of those in <ref> [Gamm94] </ref>, especially application specific design patterns. We will organize them and their relations in the given classification scheme. This will enable us to evaluate the validity and usefulness of the classification scheme and improve it accordingly.
Reference: [John91] <author> Ralph E. Johnson and Vincent F. Russo. </author> <title> Reusing object-oriented designs. </title> <type> Technical Report Technical Report UIUCDCS 911696, </type> <institution> University of Illinois, </institution> <month> May, </month> <year> 1991. </year>
Reference-contexts: Patterns in a certain cluster can be considered as similar to one another, thereby supporting the selection of an appropriate design pattern for a certain problem. Frameworks [WB90] <ref> [John91] </ref> can be considered as high-level design patterns, usually consisting of many interrelated design patterns of lower levels. In [Beck94] the authors write Patterns can be used at many levels, and what is derived at one level can be considered a basic pattern at another level.
Reference: [John92] <author> R. Johnson. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Proceedings of OOPSLA92, volume 27 of ACM SIGPLAN Notices, </booktitle> <pages> pages 6376, </pages> <address> Vancouver, B.C., Canada, </address> <month> October </month> <year> 1992. </year> <note> ACM Press. </note>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93a], [Copl91], [Copl94], [Shaw91], <ref> [John92] </ref>, [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. Development tools supporting the design pattern approach are also under work.
Reference: [Lint89] <author> M. Linton, John Vlissides, and P. Calder. </author> <title> Composing user interfaces with interviews. </title> <journal> IEEE Computer, </journal> <volume> 22(2):822, </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: Depending upon the necessary degree of exibility, one typically combines two or all three design patterns (for instance Interpreter). Composite, Decorator: Composite and Decorator are often used together in applications, for example for visual objects in ET++, MacApp and Interviews [Wein88], [App89], <ref> [Lint89] </ref>. There are also other kinds of relationships between them: when looking at the solution aspect, Decorator can be seen as a degenerated Composite; when considering the problem aspect, they both support recursively structured objects, whereby Decorator focuses on attaching additional properties to objects.
Reference: [Pree94] <author> W. Pree. Meta-patterns: </author> <title> A means for describing the essentials of reusable o-o design. </title> <booktitle> In Proceedings of ECOOP94, </booktitle> <year> 1994. </year> <note> To Appear. </note>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93a], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], <ref> [Pree94] </ref>). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. Development tools supporting the design pattern approach are also under work.
Reference: [Rumb91] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F.Eddy, </author> <title> and Relationships between Design Patterns 9 W.Lorensen. Object-Oriented Modeling And Design. </title> <address> Pren-tice-Hall, Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference: [Shaw91] <author> M. Shaw. </author> <title> Heterogenous design idioms for software architecture. </title> <booktitle> In Proceeding of the Sixth International Workshop on Software Specification and Design, Software Engineering Notes, </booktitle> <pages> pages 158165, </pages> <address> Como, Italy, </address> <month> October 25-26 </month> <year> 1991. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, which addresses the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93a], [Copl91], [Copl94], <ref> [Shaw91] </ref>, [John92], [Busc93], [Pree94]). The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate more effectively. New design patterns are being discovered, described and applied by several research groups. Development tools supporting the design pattern approach are also under work.
Reference: [WB90] <author> Rebecca J. Wirfs-Brock and Ralph E. Johnson. </author> <title> Surveying current research in object-oriented design. </title> <journal> CACM, </journal> <volume> 33(9):105123, </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: Their clustering according to jurisdiction (class, object, compound) and characterization (creational, structural, behav-ioural) is orthogonal to the one derived in this paper. Patterns in a certain cluster can be considered as similar to one another, thereby supporting the selection of an appropriate design pattern for a certain problem. Frameworks <ref> [WB90] </ref> [John91] can be considered as high-level design patterns, usually consisting of many interrelated design patterns of lower levels. In [Beck94] the authors write Patterns can be used at many levels, and what is derived at one level can be considered a basic pattern at another level.
Reference: [Wein88] <author> Andr Weinand, Erich Gamma, and Rudolph Marty. </author> <title> ET++ an object-oriented application framework in C++. </title> <booktitle> In Proceedings OOPSLA 88, ACM SIGPLAN Notices, </booktitle> <pages> pages 4657, </pages> <month> November </month> <year> 1988. </year> <title> Published as Proceedings OOPSLA 88, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> volume 23, number 11. </volume>
Reference-contexts: Depending upon the necessary degree of exibility, one typically combines two or all three design patterns (for instance Interpreter). Composite, Decorator: Composite and Decorator are often used together in applications, for example for visual objects in ET++, MacApp and Interviews <ref> [Wein88] </ref>, [App89], [Lint89]. There are also other kinds of relationships between them: when looking at the solution aspect, Decorator can be seen as a degenerated Composite; when considering the problem aspect, they both support recursively structured objects, whereby Decorator focuses on attaching additional properties to objects.
Reference: [Zimm94] <author> Walter Zimmer. </author> <title> Experiences using design patterns to reorganize an object-oriented application, </title> <month> July </month> <year> 1994. </year> <note> Position paper for the Pattern Workshop at ECOOP94. </note>
Reference-contexts: Conclusion We have presented a classification of the relationships between design patterns, which led to a new design pattern and to an arrangement of the design patterns into different layers. These results partially stem from one of our former projects <ref> [Zimm94] </ref>. Although the design pattern approach and the excellent catalogue [Gamm94] have proven effective in this project, the following issues showed up: The design of important abstractions of the application domain often requires the combination of several, interrelated design patterns.
References-found: 22

