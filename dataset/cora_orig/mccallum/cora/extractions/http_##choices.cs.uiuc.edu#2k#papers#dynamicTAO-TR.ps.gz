URL: http://choices.cs.uiuc.edu/2k/papers/dynamicTAO-TR.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Email: -mroman1,f-kon,rhc-@cs.uiuc.edu  
Title: Supporting Dynamic Reconfiguration in the dynamicTAO Reflective ORB  
Author: Manuel Roman Fabio Kon Roy H. Campbell 
Note: This research is supported by a grant from the National Science Foundation, NSF 98-70736. Manuel Roman is supported by a Fulbright-Ramon Areces Foundation grant. Fabio Kon is supported in part by a grant from CAPES, the Brazilian Research Agency, proc.#1405/95-2.  
Date: February, 1999  
Address: 1304 West Springfield Avenue, Urbana, IL 61801-2987 USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Pubnum: http://choices.cs.uiuc.edu/2K/dynamicTAO Report No. UIUCDCS-R-99-2085, UILU-ENG-99-1706  
Abstract: This report is an extended version of a paper appearing on the ICDCS'99 Workshop on Mid dleware. 
Abstract-found: 1
Intro-found: 1
Reference: [DC93] <author> Schmidt Douglas C. </author> <title> The ADAPTIVE Communication Environment. </title> <booktitle> In Proceedings of the Sun User Group Conference, </booktitle> <address> San Jose, California, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: In future implementations, we intend to support category type-checking using ANSI C++ runtime type information (RTTI). We have built the dynamicTAO components using the ACE wrappers <ref> [DC93] </ref> for operating system services. Thus, dynamicTAO runs on the several different platforms to which ACE was ported. The dynamicTAO architectural framework is depicted in figure 2. A Persistent Repository stores category implementations. It offers methods for manipulating (e.g. browsing, creating, deleting) categories and the implementations of each category.
Reference: [GHJV95] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns, Elements of Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: One of the main benefits of TAO is that it has been completely designed and implemented using object-oriented design patterns. It makes it easier to identify the ORB building blocks, so we could modify and extend them. TAO uses the Strategy design pattern <ref> [GHJV95] </ref> to encapsulate different aspects of the ORB internal engine. It uses strategies for aspects such as concurrency, request demultiplexing, scheduling, and connection management. The ORB obtains these strategies from selected Factories [GHJV95]. When TAO starts running, it reads a configuration file that specifies which strategy factories must be used. <p> TAO uses the Strategy design pattern <ref> [GHJV95] </ref> to encapsulate different aspects of the ORB internal engine. It uses strategies for aspects such as concurrency, request demultiplexing, scheduling, and connection management. The ORB obtains these strategies from selected Factories [GHJV95]. When TAO starts running, it reads a configuration file that specifies which strategy factories must be used. It, then, uses these factories to create instances of the several strategies it requires. <p> Another problem occurs when one replaces the Thread-Pool strategy by a new one. There may be several incoming connection requests enqueued in the strategy waiting for a thread to take them. The solution is to use the Memento pattern <ref> [GHJV95] </ref> to encapsulate the old strategy state in an object that is passed to the new strategy. An object is used to encapsulate the queue of waiting requests. The system simply passes this object to the new strategy which then takes care of the enqueued requests.
Reference: [HBG + 98] <author> F. Hauck, U. Becker, M. Geier, E. Meier, U. Rastofer, and M. Steckmeier. AspectIX: </author> <title> An Aspect-Oriented and CORBA-Compliant ORB Architecture. </title> <booktitle> In Proceedings of the IFIP International Conference on Distributed Systems Platforms and Open Distributed Processing (Middleware'98), </booktitle> <month> September </month> <year> 1998. </year>
Reference-contexts: Our goal is to provide a generic infrastructure in which different kinds of customization can be performed. Other research groups have addressed the problem of middleware customization by using different approaches. AspectIX <ref> [HBG + 98] </ref> is an open and flexible architecture that adds flexibility to CORBA. AspectIX extends the ORB interface offering the means for dynamic reconfiguration.
Reference: [HLS97a] <author> Tim Harrison, David Levine, and Douglas C. Schmidt. </author> <title> The Design and Performance of a Real-time CORBA Object Event Service. </title> <booktitle> In Proceedings of OOPSLA '97, </booktitle> <address> Atlanta, Georgia, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: The ORB obtains these strategies from selected Factories [GHJV95]. When TAO starts running, it reads a configuration file that specifies which strategy factories must be used. It, then, uses these factories to create instances of the several strategies it requires. TAO was primarily targeted at Avionics hard real-time systems <ref> [HLS97a] </ref> in which the environment parameters are known a priori. Even though TAO can be customized to different kinds of applications, this is a "static" customization, it can only be done at startup time. Thus, it lacks proper support for on-the-fly reconfiguration.
Reference: [HLS97b] <author> Timothy H. Harrison, David L. Levine, and Douglas C. Schmidt. </author> <title> The design and performance of a real-time CORBA object event service. </title> <booktitle> In Proceedings of the OOPSLA. ACM, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: In this case, it is profitable to dynamically load a new communication strategy optimized for the different characteristics of wireless connections. 4 Related Work Limitations on existing CORBA implementations have led to CORBA extensions for dealing with specific aspects such as real-time <ref> [HLS97b] </ref>, group communication [MS97], and fault-tolerance [Maf95]. Our goal is to provide a generic infrastructure in which different kinds of customization can be performed. Other research groups have addressed the problem of middleware customization by using different approaches.
Reference: [JS97] <author> Prashant Jain and Douglas C. Schmidt. </author> <title> Dynamically configuring communication services with the service configuration pattern. </title> <journal> C++ Report Magazine, </journal> <volume> 9(6), </volume> <month> June </month> <year> 1997. </year> <month> 10 </month>
Reference-contexts: We minimized the changes to the standard ACE/TAO distribution by delegating some of the basic configuration tasks to components of the ACE framework such as ACE Service Config (used to process startup configuration files and manage dynamic linking) and ACE Service Repository (to manage loaded implementations) <ref> [JS97] </ref>. This architectural framework enables the development of different kinds of persistent repositories and network brokers to interact with the Dynamic Service Configurator.
Reference: [KC98] <author> Fabio Kon and Roy H. Campbell. </author> <title> On the Role of Inter-Component Dependence in Supporting Automatic Reconfiguration. </title> <type> Technical Report UIUCDCS-R-98-2080, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> December </month> <year> 1998. </year>
Reference-contexts: The reification allows the ORB to change specific strategies without having to restart its execution. 2.1 Architecture Reification in dynamicTAO is achieved through a collection of entities known as component config-urators <ref> [KC98] </ref>. A component configurator holds the dependencies between a certain component and other system components. Each process running the dynamicTAO ORB contains a component configurator instance called DomainConfigurator. It is responsible for maintaining references to instances of the ORB and to servants running in that process.
Reference: [KSC + 98] <author> Fabio Kon, Ashish Singhai, Roy H. Campbell, Dulcineia Carvalho, Robert Moore, and Francisco J. Ballesteros. </author> <title> 2K: A Reflective, Component-Based Operating System for Rapidly Changing Environments. </title> <booktitle> In Proceedings of the ECOOP'98 Workshop on Reflective Object-Oriented Programming and Systems, </booktitle> <address> Brussels, Belgium, </address> <month> July </month> <year> 1998. </year>
Reference-contexts: By using COMERA, system developers can customize the middleware according to application requirements. 9 5 Ongoing and Future Work Our research group is currently developing 2K <ref> [KSC + 98] </ref>, a distributed operating system that offers an integrated architecture for adaptation, where change is the fundamental premise, and adaptability the fundamental goal. The 2K project investigates the creation of a generic framework for the development of adaptive applications based on the reflective ORB described in this paper.
Reference: [Maf95] <author> Silvano Maffeis. </author> <title> Adding group communication and fault-tolerance to corba. </title> <booktitle> In Proceedings of the 1995 USENIX Conference on Object-Oriented Technologies. The USENIX Association, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: In this case, it is profitable to dynamically load a new communication strategy optimized for the different characteristics of wireless connections. 4 Related Work Limitations on existing CORBA implementations have led to CORBA extensions for dealing with specific aspects such as real-time [HLS97b], group communication [MS97], and fault-tolerance <ref> [Maf95] </ref>. Our goal is to provide a generic infrastructure in which different kinds of customization can be performed. Other research groups have addressed the problem of middleware customization by using different approaches. AspectIX [HBG + 98] is an open and flexible architecture that adds flexibility to CORBA.
Reference: [MS97] <author> Silvano Maffeis and Douglas C. Schmidt. </author> <title> Constructing reliable distributed communication systems with CORBA. </title> <journal> IEEE Communications Magazine, </journal> <volume> 14(2), </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: In this case, it is profitable to dynamically load a new communication strategy optimized for the different characteristics of wireless connections. 4 Related Work Limitations on existing CORBA implementations have led to CORBA extensions for dealing with specific aspects such as real-time [HLS97b], group communication <ref> [MS97] </ref>, and fault-tolerance [Maf95]. Our goal is to provide a generic infrastructure in which different kinds of customization can be performed. Other research groups have addressed the problem of middleware customization by using different approaches. AspectIX [HBG + 98] is an open and flexible architecture that adds flexibility to CORBA.
Reference: [QC98] <author> Tin Qian and Roy Campbell. </author> <title> Dynamic Agent-based Security Architecture for Mobile Computers. </title> <booktitle> In Proceedings of the International Conference on Parallel and Distributed Computing and Networks (PDCN'98), </booktitle> <address> Australia, </address> <month> December </month> <year> 1998. </year>
Reference-contexts: Also, if an implementation crashes, it does not affect other ORB components. Thus, the JVM can be used, for example, as a safe execution environment for mobile agents taking care of ORB reconfiguration and for implementing flexible security policies with Active Capabilities <ref> [QC98] </ref>. We added a module containing the Sun Java Virtual Machine as one of the components attached to the DomainConfigurator. A servant or ORB component wishing to run Java code can obtain a reference to the interpreter by contacting the DomainConfigurator.
Reference: [RL98] <author> P.-G. Raverdy and R. Lea. </author> <title> DART: A Distributed Adaptive Run-Time. </title> <booktitle> In Proceedings of the IFIP International Conference on Distributed Systems Platforms and Open Distributed Processing (Middleware'98), </booktitle> <month> September </month> <year> 1998. </year>
Reference-contexts: Aspects can be compared to dynamicTAO category implementations with the difference that dynamicTAO implementations can be added on-the-fly while AspectIX aspects cannot. If a fragment implementation does not support a specified aspect, the whole fragment (containing all its aspects) must be replaced. Distributed Adaptive Run-Time (DART) <ref> [RL98] </ref> provides a framework where applications can modify their internal behavior as well as the behavior of services that they are using. DART also offers a set of services to facilitate the development of distributed applications.
Reference: [SC99] <author> Douglas C. Schmidt and Chris Cleeland. </author> <title> Applying Patterns to Develop Extensible ORB Middleware. </title> <journal> IEEE Communications Magazine, </journal> <note> 1999. (to appear), available at http://www.cs.wustl.edu/~schmidt/ACE-papers.html. </note>
Reference-contexts: We, then discuss related (section 4) and future (section 5) work and conclude in section 6. 2 dynamicTAO Our configurable middleware infrastructure is implemented as a reflective ORB. Rather than implementing a new ORB from scratch we opted to use TAO <ref> [SC99] </ref>, developed at the Washington University in Saint Louis, as our starting point. TAO is a portable, flexible, extensible, and configurable ORB that complies with the CORBA standard. One of the main benefits of TAO is that it has been completely designed and implemented using object-oriented design patterns.
Reference: [Sch94] <author> Douglas C. Schmidt. </author> <title> Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching. </title> <booktitle> In Proceedings of the 1st Pattern Languages of Programs Conference, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: If the marshalling strategy of the client ORB is changed, then the unmarshalling strategy of the server ORB must be changed accordingly. As an example of the issues discussed in this section, consider the three concurrency strategies supported by dynamicTAO: Single-Threaded Reactive <ref> [Sch94] </ref>, Thread-Per-Connection, and Thread-Pool. If the user switches from the Reactive or Thread-Per-Connection strategies to any other concurrency strategy, nothing special needs to be done. dynamicTAO may simply load the 6 new strategy, update the proper TAOConfigurator hook, unload the old strategy, and continue.
Reference: [SRC84] <author> J.H. Saltzer, D.P. Reed, and D.D. Clark. </author> <title> End-to-End Arguments in System Design. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 277-288, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: As part of our ongoing work, we are extending the aspects of the dynamicTAO ORB engine that are subject to reflection. Our infrastructure is being used to the development of adaptive applications. The end-to-end argument <ref> [SRC84] </ref> states that applications know the type of mechanisms they need to achieve optimal performance. dynamicTAO offers the functionality needed by applications to deploy, at any time, their optimal policies and mechanisms. Acknowledgment. The authors thank Ashish Singhai for his comments on this paper.
Reference: [SSC97] <author> Ashish Singhai, Aamod Sane, and Roy H. Campbell. </author> <title> Reflective ORBs: Supporting Robust Time-Critical Distribution. </title> <booktitle> In Proceddings of ECOOP Workshop on Reflective Real-Time Object Oriented Systems, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: By using reflection techniques it is possible to create a middleware layer that can adapt itself to environmental changes. Applications can then always use optimized protocols and policies without having to adapt themselves. Instead, the adaptation work is pushed to the supporting middleware <ref> [SSC98, SSC97] </ref>. Paper Contents. This paper describes the architecture and implementation of dynamicTAO , and demonstrates its benefits using practical examples. We provide a detailed explanation of 1 our reflective ORB in section 2.
Reference: [SSC98] <author> Ashish Singhai, Aamod Sane, and Roy H. Campbell. </author> <title> Quarterware for Middleware. </title> <booktitle> In Proceedings of the IEEE International Conference on Distributed Computing Systems (ICDCS), </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: By using reflection techniques it is possible to create a middleware layer that can adapt itself to environmental changes. Applications can then always use optimized protocols and policies without having to adapt themselves. Instead, the adaptation work is pushed to the supporting middleware <ref> [SSC98, SSC97] </ref>. Paper Contents. This paper describes the architecture and implementation of dynamicTAO , and demonstrates its benefits using practical examples. We provide a detailed explanation of 1 our reflective ORB in section 2.
Reference: [WL98] <author> Y. M. Wang and Woei-Jyh Lee. COMERA: </author> <title> COM extensible remoting architecture. </title> <booktitle> In Proceedings of the 4th Conference on Object-Oriented Technologies and Systems (COOTS). USENIX, </booktitle> <month> April </month> <year> 1998. </year> <month> 11 </month>
Reference-contexts: Reconfiguration is triggered and controlled by using events which are also used to maintain consistency. Entities known as policies have the knowledge required to reconfigure applications. Policies use the DART manager to access applications as well as the meta-objects associated with them. COMERA <ref> [WL98] </ref> (COM Extensible Remote Architecture) provides a framework based on Microsoft COM that allows users to modify several aspects of the communication middleware at run-time. It relies on the Custom Marshaler interface exported by COM, as well as the componen-tized architecture design that allows the use of user-specified components.
References-found: 18

