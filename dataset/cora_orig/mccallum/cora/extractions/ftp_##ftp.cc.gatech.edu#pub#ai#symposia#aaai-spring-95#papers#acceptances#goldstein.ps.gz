URL: ftp://ftp.cc.gatech.edu/pub/ai/symposia/aaai-spring-95/papers/acceptances/goldstein.ps.gz
Refering-URL: ftp://ftp.cc.gatech.edu/pub/ai/symposia/aaai-spring-95/papers/finals.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: goldstn @ncat.edu, esterlin@ncat.edu  
Title: A Knowledge-Sharing Strategy  
Author: David Goldstein and Albert Esterline 
Address: Greensboro, North Carolina  
Affiliation: North Carolina A&T State University  
Abstract-found: 0
Intro-found: 1
Reference: [Ait-Kaci94] <author> Ait-Kaci, H. et al. </author> <month> (March, </month> <title> 1994) . The Wild LIFE Handbook, </title> <institution> DEC Paris Research Laboratory. </institution>
Reference-contexts: A promising direction we are currently exploring uses feature terms as formal explications of conceptual dependencies. Feature description languages [Smolka92] subsume unification grammars used in computational linguistics and terminological logic (such as KL-ONE) used in knowledge representation. Feature terms include the y terms of the logic programming language LIFE <ref> [Ait-Kaci94, AP93] </ref>. [Smolka92] shows that feature description languages can be viewed as a type of language facilitating of first-order predicate logic with equality and develops a Tarski-style semantics for them. <p> We will analyze the hierarchy and knowledge protocol to determine their (1) algebraic and computational properties, (2) descriptive limitations and (3) underlying requirements (such as synchronization required.) The algorithms and hierarchies will be realized as software as resources permit. The logically sound models will be implemented in LIFE <ref> [Ait-Kaci94] </ref>. LIFE incorporates aspects of logic, functional, and object-oriented programming. Our hacked version will be developed via "wrappers" to a cooperative reasoning framework (such as the Distributed Artificial Intelligence Toolkit [Goldstein94]). We would also like to consider the requirements of a (graphical or language-based) knowledge-sharing mechanism.
Reference: [AP93] <author> Ait-Kaci, H. & Podelski, A. </author> <title> (1993) . Towards a Meaning of Life, </title> <journal> J. of Logic Programming, </journal> <volume> vol. 16, </volume> <pages> pp. 195-234. </pages>
Reference-contexts: A promising direction we are currently exploring uses feature terms as formal explications of conceptual dependencies. Feature description languages [Smolka92] subsume unification grammars used in computational linguistics and terminological logic (such as KL-ONE) used in knowledge representation. Feature terms include the y terms of the logic programming language LIFE <ref> [Ait-Kaci94, AP93] </ref>. [Smolka92] shows that feature description languages can be viewed as a type of language facilitating of first-order predicate logic with equality and develops a Tarski-style semantics for them.
Reference: [APG93] <editor> Ait-Kaci, H. & Podelski, A. & Goldstein, </editor> <address> S.C. </address> <month> (May, </month> <note> 1993) . OrderSorted Feature Theory Unification, DEC Paris Research Laboratory, Research report 32. </note>
Reference-contexts: Feature terms include the y terms of the logic programming language LIFE [Ait-Kaci94, AP93]. [Smolka92] shows that feature description languages can be viewed as a type of language facilitating of first-order predicate logic with equality and develops a Tarski-style semantics for them. Ait-Kaci <ref> [APG93] </ref> develops a formal system of order-sorted feature (OSF) terms that logically models flexible record objects with recursive class definitions that accommodate multiple inheritance. Sort definitions are viewed as axioms forming an OSF theory.
Reference: [AWT92] <author> Anjewierden, A. & Wielemaker, J. & Toussaint, C. </author> <title> (1992) . Shelley - Computer-Aided Knowledge Engineering, </title> <journal> Knowledge Acquisition, </journal> <volume> vol. 4, </volume> <pages> pp. 109-125. </pages> <month> [BS85]Brachman, </month> <title> R.J. & Schmolze, J.G.(1985) . An Overview of the KL-ONE Knowledge Representation System, </title> <journal> Cognitive Science, </journal> <volume> vol. </volume> <pages> 9 , pp. 171-126. </pages>
Reference: [CQ69] <author> Collins, A. & Quinllian, M. </author> <title> (1969) . Retrieval time from semantic memory, </title> <journal> Journal of Verbal Learning & Verbal Behavior, </journal> <volume> 8 </volume> <pages> 240-247. </pages>
Reference-contexts: We are utilizing derivatives of object diagrams [Rumbaugh91], semantic networks <ref> [CQ69] </ref>, and conceptual dependencies [SR74] to describe the fundamental concepts which underlay various algorithms and knowledge representations. By formally describing higher level concepts via these fundamental concepts, we intend to reason about the semantics of and translate knowledge among applications employing different knowledge representations.
Reference: [Rumbaugh91] <editor> J. Rumbaugh et al. </editor> <booktitle> (1991) . ObjectOriented Modeling and Design. </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference-contexts: We have been developing and formalizing a hierarchy describing knowledge to facilitate (1) the specification of knowledge and assumptions employed by a system, (2) transferring knowledge among agents (applications) in a system and (3) for resolving conflicts among these agents (Figure 1). We are utilizing derivatives of object diagrams <ref> [Rumbaugh91] </ref>, semantic networks [CQ69], and conceptual dependencies [SR74] to describe the fundamental concepts which underlay various algorithms and knowledge representations. By formally describing higher level concepts via these fundamental concepts, we intend to reason about the semantics of and translate knowledge among applications employing different knowledge representations.
Reference: [Goldstein 94] <author> Goldstein, D. </author> <month> (January, </month> <booktitle> 1994) . "The Distributed Artificial Intelligence Toolkit", AI Expert, </booktitle> <publisher> Miller-Freeman Publishing, </publisher> <pages> pp. 30-34. </pages>
Reference: [Musen89] <author> M. Musen, M. </author> <title> (1989) . Automated Generation of Model-Based Knowledge-Acquisition Tools, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: Such methods include KADS [WSB92], KL-ONE [BS, 85] and Conceptual Graphs [Sowa84]. The implicit understanding is that experimenters using such methods would use tools supporting the methods. Examples of such tools are the Shelley integrated workbench [AWR92] and the PROTEGE system for constructing knowledge editors <ref> [Musen89] </ref>. Our approach here is closest to Conceptual Graphs, in that the motivation is from a linguistic basis. We are using derivatives of object diagrams, conceptual dependencies, and semantic networks.
Reference: [Smolka92] <author> Smolka, G. </author> <title> (1992) . Feature Constraint Logics for Unification Grammars, </title> <journal> J. of Logic Programming, </journal> <volume> vol. 12, </volume> <pages> pp. 51-87. </pages>
Reference-contexts: We are currently addressing shortcomings in semantic dependencies to accommodate inheritance and a better representation of constraints. A promising direction we are currently exploring uses feature terms as formal explications of conceptual dependencies. Feature description languages <ref> [Smolka92] </ref> subsume unification grammars used in computational linguistics and terminological logic (such as KL-ONE) used in knowledge representation. Feature terms include the y terms of the logic programming language LIFE [Ait-Kaci94, AP93]. [Smolka92] shows that feature description languages can be viewed as a type of language facilitating of first-order predicate logic <p> Feature description languages <ref> [Smolka92] </ref> subsume unification grammars used in computational linguistics and terminological logic (such as KL-ONE) used in knowledge representation. Feature terms include the y terms of the logic programming language LIFE [Ait-Kaci94, AP93]. [Smolka92] shows that feature description languages can be viewed as a type of language facilitating of first-order predicate logic with equality and develops a Tarski-style semantics for them.
Reference: [Sowa84] <author> Sowa, J. </author> <title> (1984) . Conceptual Structures: Information Processing in Mind and Machine, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: Background Attempts at sharing knowledge among applications have largely been based upon various knowledge acquisition methods. Such methods include KADS [WSB92], KL-ONE [BS, 85] and Conceptual Graphs <ref> [Sowa84] </ref>. The implicit understanding is that experimenters using such methods would use tools supporting the methods. Examples of such tools are the Shelley integrated workbench [AWR92] and the PROTEGE system for constructing knowledge editors [Musen89].
Reference: [SR74] <editor> Schank, R. & Reiger, C. </editor> <booktitle> (1974) . Inference and the computer understanding of natural language, Artificial Intelligence 5(4) </booktitle> <pages> 373-412. </pages>
Reference-contexts: We are utilizing derivatives of object diagrams [Rumbaugh91], semantic networks [CQ69], and conceptual dependencies <ref> [SR74] </ref> to describe the fundamental concepts which underlay various algorithms and knowledge representations. By formally describing higher level concepts via these fundamental concepts, we intend to reason about the semantics of and translate knowledge among applications employing different knowledge representations.
Reference: [WSB92] <author> Wielinga, B.J. & Schreiber, A. Th. & Breuker, J.A. </author> <year> (1992) </year> <month> . KADS: </month> <title> A Modelling Approach to Knowledge Engineering, </title> <journal> Knowledge Acquisition, </journal> <volume> vol. 4, </volume> <pages> pp. 5-53. </pages>
Reference-contexts: Background Attempts at sharing knowledge among applications have largely been based upon various knowledge acquisition methods. Such methods include KADS <ref> [WSB92] </ref>, KL-ONE [BS, 85] and Conceptual Graphs [Sowa84]. The implicit understanding is that experimenters using such methods would use tools supporting the methods. Examples of such tools are the Shelley integrated workbench [AWR92] and the PROTEGE system for constructing knowledge editors [Musen89].
References-found: 12

