URL: http://www.eecs.uic.edu/~sloan/iwssd93.ps
Refering-URL: http://www.eecs.uic.edu/~sloan/papers.html
Root-URL: 
Title: A Petri-Net-Based Approach to Real-Time Program Analysis  
Author: Ugo Buy Robert Sloan 
Note: In: Proceedings of the Seventh International Workshop on Software Specification and Design, pp. 56-60, December 1993, IEEE Computer Society Press.  
Address: 851 S. Morgan St. Room 1120 SEO Chicago, IL 60607-7053  
Affiliation: Dept. of Elect. Eng. and Computer Science (M/C 154) University of Illinois at Chicago  
Abstract: We propose to extend existing Petri-net-based tools for concurrency analysis to real-time analysis. The goal is to create a fully automated system, which starts from code in a higher level language for real-time programming, and answers programmers' queries about timing properties of the code. The key difficulty with all reachability-based approaches is that the state space quickly becomes intractably large. To circumvent this state explosion problem, we propose using a combination of several heuristics for model reduction and state space reduction that have been effective for untimed concurrency analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Berthelot. </author> <title> Checking properties of nets using transformations. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets 1985, </booktitle> <pages> pages 19-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Suppose that a state x 1 of a time Petri net enables two transitions, t 1 and t 2 , and that their firing intervals are <ref> [1; 3] </ref> and [2; 5]. If t 1 is fired first, generating a new state x 2 , the firing interval of t 2 in x 2 must be updated to reflect the time elapsed before the firing of t 1 . <p> Here we summarize our preliminary results with these two methods. The net reduction method iteratively applies a set of reduction rules that transform a Petri-net model of an Ada program into a net with a smaller state space and the same deadlock properties <ref> [1, 11] </ref>. Some of these rules can be extended to real-time analysis.
Reference: [2] <author> B. Berthomieu and M. Diaz. </author> <title> Modeling and verification of time dependent systems using time Petri nets. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 17(3) </volume> <pages> 259-273, </pages> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: Note that ordinary, un-timed Petri nets are the special case of STP nets with all firing delays being zero. The STP nets proposed here are a special case of Merlin's time Petri nets <ref> [2, 7] </ref>. Merlin allows the firing delay associated with a transition to vary within an interval, whereas in STP nets this delay is a fixed number. Merlin's model has greater expressive power than STP nets; however, as we discuss below, it is less amenable to automated analysis than our model. <p> An additional advantage of STP nets is that the generation of the state space of these nets is relatively straightforward. Our algorithm for state space generation is much simpler and faster than the algorithm for Merlin's time Petri nets <ref> [2] </ref>. In summary, we believe that STP nets are a reasonable compromise between modeling power and ease of analysis. <p> Then, the delay of t 2 in both state x 2 and state x 3 is 3. 4.2 Comparison to time Petri nets Our state space generation algorithm for STP nets is considerably simpler than the corresponding algorithm for Merlin's time Petri nets <ref> [2] </ref>. Suppose that a state x 1 of a time Petri net enables two transitions, t 1 and t 2 , and that their firing intervals are [1; 3] and [2; 5]. <p> Suppose that a state x 1 of a time Petri net enables two transitions, t 1 and t 2 , and that their firing intervals are [1; 3] and <ref> [2; 5] </ref>. If t 1 is fired first, generating a new state x 2 , the firing interval of t 2 in x 2 must be updated to reflect the time elapsed before the firing of t 1 . <p> For instance, if t 1 fires at time 1 such that 2 1 3, then in the next state the firing interval for t 2 becomes [0; (5 1 )]. Thus, there is a distinct state for each value of 1 . Berthomieu and Diaz <ref> [2] </ref> define an interesting technique for sidestepping the problem of infinity in firing intervals and give an algorithm for state space generation.
Reference: [3] <author> S. Duri, U. Buy, R. Devarapalli, and S. M. Shatz. </author> <title> Using state space reduction methods for deadlock analysis in Ada tasking. </title> <booktitle> In Proc. 1993 Internat. Sympos. on Software Testing and Analysis, </booktitle> <pages> pages 51-60. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: Our view is that existing methods for analyzing concurrent systems can be profitably extended to real-time systems. In the past, excellent results have been obtained for deadlock analysis of Ada programs using Petri-net-based models <ref> [3] </ref>. We believe that these techniques should be extended to the analysis of timing properties of concurrent programs. Our goal is to produce tools and techniques for the automatic analysis of real-time properties of Ada code. Our techniques will use a Petri-net-based model with suitable extensions for representing time information. <p> A disadvantage of reachability-based approaches is that the state space thus generated is usually quite large (i.e., exponential in the number of processes contained in the program analyzed). In the past, several techniques for controlling the complexity of reachability-based deadlock detection have been investigated <ref> [3, 6, 9, 10, 11, 12] </ref>. This work showed that model reduction approaches could be successfully combined with reduced state space generation approaches in order to control the complexity of reachability-based analysis of safety properties. <p> Extensive experiments with this toolkit have given excellent results on various toy examples (e.g., dining philosophers, readers and writers, and gas station) and on some real world problems (e.g., a border defense system and a system monitoring a host buoy at sea) <ref> [3] </ref>. 3 Adding time to Petri nets We believe the same methods should work for analyzing real-time programs, but first one must extend Petri nets to model time. Several interesting extensions of Petri nets to the timed domain have been defined [5, 7, 8]. <p> STP nets provide a convenient way of representing several program properties that we are interested in modeling. First of all, we have found that interactions among asynchronous processes can be suitably modeled by ordinary Petri nets. In particular, these nets can capture the relevant aspects of Ada tasking behavior <ref> [3, 11] </ref>. Second, the inclusion of firing delays for transitions in STP nets allows us to model several timing properties. For instance, if a transition t represents a certain computation, its firing delay t t can be used to represent the time required by the computation. <p> Suppose that a state x 1 of a time Petri net enables two transitions, t 1 and t 2 , and that their firing intervals are <ref> [1; 3] </ref> and [2; 5]. If t 1 is fired first, generating a new state x 2 , the firing interval of t 2 in x 2 must be updated to reflect the time elapsed before the firing of t 1 .
Reference: [4] <author> C. Ghezzi, D. Mandrioli, S. Morasca, and M. Pezze. </author> <title> A general way to put time in Petri nets. </title> <booktitle> In Proc. 5th Internat. Workshop on Software Specifications and Design, </booktitle> <address> Pittsburgh, Pennsyl-vania, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: In summary, we believe that STP nets are a reasonable compromise between modeling power and ease of analysis. Some Petri-net extensions have been defined that provide even more expressive power than Merlin's time Petri nets <ref> [4, 5] </ref>; however, the additional expressive power is obtained at the cost of more complicated notations for expressing firing intervals. <p> Some Petri-net extensions have been defined that provide even more expressive power than Merlin's time Petri nets [4, 5]; however, the additional expressive power is obtained at the cost of more complicated notations for expressing firing intervals. For instance, in TB-nets (Time Basic nets) <ref> [4] </ref> and in E/R nets (Environment/Relation nets) [5] the upper and lower bounds of transition firing intervals are expressed with monotonic functions of time rather than with constants. The use of these functions makes analysis more difficult, however.
Reference: [5] <author> C. Ghezzi, D. Mandrioli, S. Morasca, and M. Pezze. </author> <title> A unified high-level Petri net formalism for time-critical systems. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 17(2) </volume> <pages> 160-172, </pages> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Several interesting extensions of Petri nets to the timed domain have been defined <ref> [5, 7, 8] </ref>. In this section we discuss a particular timed extension of Petri nets that we believe will lead to good practical results for real-time analysis. We require the following definitions. <p> In summary, we believe that STP nets are a reasonable compromise between modeling power and ease of analysis. Some Petri-net extensions have been defined that provide even more expressive power than Merlin's time Petri nets <ref> [4, 5] </ref>; however, the additional expressive power is obtained at the cost of more complicated notations for expressing firing intervals. <p> For instance, in TB-nets (Time Basic nets) [4] and in E/R nets (Environment/Relation nets) <ref> [5] </ref> the upper and lower bounds of transition firing intervals are expressed with monotonic functions of time rather than with constants. The use of these functions makes analysis more difficult, however. <p> Ghezzi et al. have argued that strong time semantics is inferior because of the non-locality of firing conditions <ref> [5] </ref>. On the one hand, in an ordinary Petri net the conditions allowing a transition t to fire are local to t. All one must check is that all input places of t are suitably marked. The same is true of Petri nets with time but with weak time semantics. <p> Suppose that a state x 1 of a time Petri net enables two transitions, t 1 and t 2 , and that their firing intervals are [1; 3] and <ref> [2; 5] </ref>. If t 1 is fired first, generating a new state x 2 , the firing interval of t 2 in x 2 must be updated to reflect the time elapsed before the firing of t 1 .
Reference: [6] <author> P. Godefroid and P. Wolper. </author> <title> Using partial orders for the efficient verification of deadlock freedom and safety properties. </title> <editor> In K. G. Larsen and A. Skou, editors, </editor> <booktitle> Computer-Aided Verification: 3rd Internat. Conf., CAV '91, </booktitle> <volume> LNCS 575, </volume> <pages> pages 332-342. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: A disadvantage of reachability-based approaches is that the state space thus generated is usually quite large (i.e., exponential in the number of processes contained in the program analyzed). In the past, several techniques for controlling the complexity of reachability-based deadlock detection have been investigated <ref> [3, 6, 9, 10, 11, 12] </ref>. This work showed that model reduction approaches could be successfully combined with reduced state space generation approaches in order to control the complexity of reachability-based analysis of safety properties. <p> Reduced state space generation techniques are aimed at generating only a portion of the reachability tree, subject to the condition that any deadlock states contained in the full state space are in the reduced state space as well <ref> [6, 9, 10, 12] </ref>. The improvements provided by these two kinds of approaches complement one another, which makes their combination very attractive. <p> The Petri-net reduction technique of Tu, Shatz and Murata [11] was implemented in the TOTAL toolkit for the analysis of Ada code along with three techniques for reduced state space generation: The stubborn set method [12], the sleep set method <ref> [6] </ref>, and Starke's symmetry method [10]. <p> As a result, the time required to generate a state is much longer than in the case of STP nets. 4.3 Optimization techniques We intend to apply some of the optimization techniques that have proven successful in deadlock analysis <ref> [6, 10, 11, 12] </ref> to our framework for state space construction in STP nets. Thus far, we have been investigating the Petri net reduction technique of Tu, Shatz, and Murata [11] and the stubborn set method [12]. Here we summarize our preliminary results with these two methods.
Reference: [7] <author> P. Merlin and D. </author> <title> Faber. Recoverability of communication protocols|implications of a theoretical study. </title> <journal> IEEE Trans. Communications, </journal> <volume> COM-24(9):381-404, </volume> <month> Sept. </month> <year> 1976. </year>
Reference-contexts: Several interesting extensions of Petri nets to the timed domain have been defined <ref> [5, 7, 8] </ref>. In this section we discuss a particular timed extension of Petri nets that we believe will lead to good practical results for real-time analysis. We require the following definitions. <p> Note that ordinary, un-timed Petri nets are the special case of STP nets with all firing delays being zero. The STP nets proposed here are a special case of Merlin's time Petri nets <ref> [2, 7] </ref>. Merlin allows the firing delay associated with a transition to vary within an interval, whereas in STP nets this delay is a fixed number. Merlin's model has greater expressive power than STP nets; however, as we discuss below, it is less amenable to automated analysis than our model.
Reference: [8] <author> C. Ramchandani. </author> <title> Analysis of asynchronous concurrent systems using timed Petri nets. </title> <note> Research Report MAC-TR 120, </note> <institution> Massachusetts Institute of Technology, </institution> <month> Feb. </month> <year> 1976. </year>
Reference-contexts: Several interesting extensions of Petri nets to the timed domain have been defined <ref> [5, 7, 8] </ref>. In this section we discuss a particular timed extension of Petri nets that we believe will lead to good practical results for real-time analysis. We require the following definitions.
Reference: [9] <author> S. M. Shatz, K. Mai, C. Black, and S. Tu. </author> <title> Design and implementation of a Petri net-based toolkit for Ada tasking analysis. </title> <journal> IEEE Transactions on Parallel Distributed Systems, </journal> <volume> 1(4) </volume> <pages> 424-441, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: A disadvantage of reachability-based approaches is that the state space thus generated is usually quite large (i.e., exponential in the number of processes contained in the program analyzed). In the past, several techniques for controlling the complexity of reachability-based deadlock detection have been investigated <ref> [3, 6, 9, 10, 11, 12] </ref>. This work showed that model reduction approaches could be successfully combined with reduced state space generation approaches in order to control the complexity of reachability-based analysis of safety properties. <p> Reduced state space generation techniques are aimed at generating only a portion of the reachability tree, subject to the condition that any deadlock states contained in the full state space are in the reduced state space as well <ref> [6, 9, 10, 12] </ref>. The improvements provided by these two kinds of approaches complement one another, which makes their combination very attractive.
Reference: [10] <author> P. H. Starke. </author> <title> Reachability analysis of Petri nets using symmetries. Syst. Anal. Model. </title> <journal> Simul., </journal> <volume> 8 </volume> <pages> 293-303, </pages> <year> 1991. </year>
Reference-contexts: A disadvantage of reachability-based approaches is that the state space thus generated is usually quite large (i.e., exponential in the number of processes contained in the program analyzed). In the past, several techniques for controlling the complexity of reachability-based deadlock detection have been investigated <ref> [3, 6, 9, 10, 11, 12] </ref>. This work showed that model reduction approaches could be successfully combined with reduced state space generation approaches in order to control the complexity of reachability-based analysis of safety properties. <p> Reduced state space generation techniques are aimed at generating only a portion of the reachability tree, subject to the condition that any deadlock states contained in the full state space are in the reduced state space as well <ref> [6, 9, 10, 12] </ref>. The improvements provided by these two kinds of approaches complement one another, which makes their combination very attractive. <p> The Petri-net reduction technique of Tu, Shatz and Murata [11] was implemented in the TOTAL toolkit for the analysis of Ada code along with three techniques for reduced state space generation: The stubborn set method [12], the sleep set method [6], and Starke's symmetry method <ref> [10] </ref>. <p> As a result, the time required to generate a state is much longer than in the case of STP nets. 4.3 Optimization techniques We intend to apply some of the optimization techniques that have proven successful in deadlock analysis <ref> [6, 10, 11, 12] </ref> to our framework for state space construction in STP nets. Thus far, we have been investigating the Petri net reduction technique of Tu, Shatz, and Murata [11] and the stubborn set method [12]. Here we summarize our preliminary results with these two methods.
Reference: [11] <author> S. Tu, S. M. Shatz, and T. Murata. </author> <title> Applying Petri net reduction to support Ada-tasking deadlock analysis. </title> <booktitle> In Proc. Eleventh Internat. Conference on Distributed Computing Systems, </booktitle> <pages> pages 96-103, </pages> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: A disadvantage of reachability-based approaches is that the state space thus generated is usually quite large (i.e., exponential in the number of processes contained in the program analyzed). In the past, several techniques for controlling the complexity of reachability-based deadlock detection have been investigated <ref> [3, 6, 9, 10, 11, 12] </ref>. This work showed that model reduction approaches could be successfully combined with reduced state space generation approaches in order to control the complexity of reachability-based analysis of safety properties. <p> Model reduction techniques are aimed at transforming a model of a concurrent program, such as a Petri net, into a smaller model having the same deadlock features as the original model <ref> [11] </ref>. Reduced state space generation techniques are aimed at generating only a portion of the reachability tree, subject to the condition that any deadlock states contained in the full state space are in the reduced state space as well [6, 9, 10, 12]. <p> The improvements provided by these two kinds of approaches complement one another, which makes their combination very attractive. The Petri-net reduction technique of Tu, Shatz and Murata <ref> [11] </ref> was implemented in the TOTAL toolkit for the analysis of Ada code along with three techniques for reduced state space generation: The stubborn set method [12], the sleep set method [6], and Starke's symmetry method [10]. <p> STP nets provide a convenient way of representing several program properties that we are interested in modeling. First of all, we have found that interactions among asynchronous processes can be suitably modeled by ordinary Petri nets. In particular, these nets can capture the relevant aspects of Ada tasking behavior <ref> [3, 11] </ref>. Second, the inclusion of firing delays for transitions in STP nets allows us to model several timing properties. For instance, if a transition t represents a certain computation, its firing delay t t can be used to represent the time required by the computation. <p> As a result, the time required to generate a state is much longer than in the case of STP nets. 4.3 Optimization techniques We intend to apply some of the optimization techniques that have proven successful in deadlock analysis <ref> [6, 10, 11, 12] </ref> to our framework for state space construction in STP nets. Thus far, we have been investigating the Petri net reduction technique of Tu, Shatz, and Murata [11] and the stubborn set method [12]. Here we summarize our preliminary results with these two methods. <p> Thus far, we have been investigating the Petri net reduction technique of Tu, Shatz, and Murata <ref> [11] </ref> and the stubborn set method [12]. Here we summarize our preliminary results with these two methods. <p> Here we summarize our preliminary results with these two methods. The net reduction method iteratively applies a set of reduction rules that transform a Petri-net model of an Ada program into a net with a smaller state space and the same deadlock properties <ref> [1, 11] </ref>. Some of these rules can be extended to real-time analysis.
Reference: [12] <author> A. Valmari. </author> <title> A stubborn attack on state explosion. </title> <editor> In E. M. Clarke and R. P. Kurshan, editors, </editor> <booktitle> Computer-Aided Verification: 2nd Inter-nat. Conf., CAV '90, </booktitle> <volume> LNCS 531, </volume> <pages> pages 156-165. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: A disadvantage of reachability-based approaches is that the state space thus generated is usually quite large (i.e., exponential in the number of processes contained in the program analyzed). In the past, several techniques for controlling the complexity of reachability-based deadlock detection have been investigated <ref> [3, 6, 9, 10, 11, 12] </ref>. This work showed that model reduction approaches could be successfully combined with reduced state space generation approaches in order to control the complexity of reachability-based analysis of safety properties. <p> Reduced state space generation techniques are aimed at generating only a portion of the reachability tree, subject to the condition that any deadlock states contained in the full state space are in the reduced state space as well <ref> [6, 9, 10, 12] </ref>. The improvements provided by these two kinds of approaches complement one another, which makes their combination very attractive. <p> The Petri-net reduction technique of Tu, Shatz and Murata [11] was implemented in the TOTAL toolkit for the analysis of Ada code along with three techniques for reduced state space generation: The stubborn set method <ref> [12] </ref>, the sleep set method [6], and Starke's symmetry method [10]. <p> As a result, the time required to generate a state is much longer than in the case of STP nets. 4.3 Optimization techniques We intend to apply some of the optimization techniques that have proven successful in deadlock analysis <ref> [6, 10, 11, 12] </ref> to our framework for state space construction in STP nets. Thus far, we have been investigating the Petri net reduction technique of Tu, Shatz, and Murata [11] and the stubborn set method [12]. Here we summarize our preliminary results with these two methods. <p> Thus far, we have been investigating the Petri net reduction technique of Tu, Shatz, and Murata [11] and the stubborn set method <ref> [12] </ref>. Here we summarize our preliminary results with these two methods. The net reduction method iteratively applies a set of reduction rules that transform a Petri-net model of an Ada program into a net with a smaller state space and the same deadlock properties [1, 11]. <p> In general, this rule can also be applied in the case of Merlin's time Petri nets or STP nets. The stubborn set method attempts to avoid generating the full state space of a Petri net by exploiting parallelism inherent in the net <ref> [12] </ref>. In a given net state, this method seeks to find a set of enabled transitions that are "independent," in the sense that one need explore only one possible order of firing these transitions, instead of all possible methods.
Reference: [13] <author> M. Young and R. N. Taylor. </author> <title> Combining static concurrency analysis with symbolic execution. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 14(10) </volume> <pages> 1499-1511, </pages> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: Finally, in Section 4 we outline our approach to real-time analysis. 2 Previous work Our approach to real-time analysis is built around the notion of a reachability analysis of a Petri-net model of a concurrent program <ref> [13] </ref>. The general goal of reachability analysis is to enumerate the set of reachable states for the program under consideration. The algorithm underlying this analysis is quite simple: An expansion procedure is applied to every generated state, starting from the initial program state.
References-found: 13

