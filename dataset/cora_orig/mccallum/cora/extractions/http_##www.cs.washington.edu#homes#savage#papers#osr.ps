URL: http://www.cs.washington.edu/homes/savage/papers/osr.ps
Refering-URL: http://www.cs.washington.edu/homes/savage/
Root-URL: 
Title: SPIN An Extensible Microkernel for Application-specific Operating System Services  
Author: Brian N. Bershad Craig Chambers Susan Eggers Chris Maeda Dylan McNamee Przemys law Pardyak Stefan Savage Emin Gun Sirer 
Address: Seattle, WA 98195  
Affiliation: Dept. of Computer Science and Engineering FR-35 University of Washington  
Abstract: Application domains such as multimedia, databases, and parallel computing, require operating system services with high performance and high functionality. Existing operating systems provide fixed interfaces and implementations to system services and resources. This makes them inappropriate for applications whose resource demands and usage patterns are poorly matched by the services provided. The SPIN operating system enables system services to be defined in an application-specific fashion through an extensible microkernel. It offers applications fine-grained control over a machine's logical and physical resources through run-time adaptation of the system to application requirements.
Abstract-found: 1
Intro-found: 1
Reference: [Anderson et al. 92] <author> Anderson, T. E., Bershad, B. N., Lazowska, E. D., and Levy, H. M. </author> <title> Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 53-79, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: This research includes interprocess communication [Bershad et al. 90, Draves et al. 91], synchronization [Bershad et al. 92, Bershad 93], thread management <ref> [Anderson et al. 92, Stodolsky et al. 93] </ref>, networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory [Young 89, McNamee & Armstrong 90], and cache management [Wheeler & Bershad 92].
Reference: [Bershad 93] <author> Bershad, B. N. </author> <title> Practical Considerations for Non-Blocking Concurrent Objects. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 264-274, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The ideas underlying SPIN stem from research over the last several years that has addressed some of the fundamental performance problems that arise in modern operating system services. This research includes interprocess communication [Bershad et al. 90, Draves et al. 91], synchronization <ref> [Bershad et al. 92, Bershad 93] </ref>, thread management [Anderson et al. 92, Stodolsky et al. 93], networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory [Young 89, McNamee & Armstrong 90], and cache management [Wheeler & Bershad 92].
Reference: [Bershad et al. 90] <author> Bershad, B. N., Anderson, T. E., Lazowska, E. D., and Levy, H. M. </author> <title> Lightweight Remote Procedure Call. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 37-55, </pages> <month> February </month> <year> 1990. </year> <booktitle> Also appeared in Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: The ideas underlying SPIN stem from research over the last several years that has addressed some of the fundamental performance problems that arise in modern operating system services. This research includes interprocess communication <ref> [Bershad et al. 90, Draves et al. 91] </ref>, synchronization [Bershad et al. 92, Bershad 93], thread management [Anderson et al. 92, Stodolsky et al. 93], networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory [Young 89, McNamee & Armstrong 90], and cache management
Reference: [Bershad et al. 92] <author> Bershad, B. N., Redell, D. D., and Ellis, J. R. </author> <title> Fast Mutual Exclusion for Uniprocessors. </title> <booktitle> In Proceedings of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-V), </booktitle> <pages> pages 223-233, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The ideas underlying SPIN stem from research over the last several years that has addressed some of the fundamental performance problems that arise in modern operating system services. This research includes interprocess communication [Bershad et al. 90, Draves et al. 91], synchronization <ref> [Bershad et al. 92, Bershad 93] </ref>, thread management [Anderson et al. 92, Stodolsky et al. 93], networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory [Young 89, McNamee & Armstrong 90], and cache management [Wheeler & Bershad 92].
Reference: [Consel 90] <author> Consel, C. </author> <title> Binding Time Analysis for Higher Order Untyped Functional Languages. </title> <booktitle> In Conference on Lisp and Functional Programming, </booktitle> <pages> pages 264-272, </pages> <year> 1990. </year>
Reference: [Draves et al. 91] <author> Draves, R. P., Bershad, B. N., Rashid, R. F., and Dean, R. W. </author> <title> Using Continuations to Implement Thread Management and Communication in Operating Systems. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 122-136, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The ideas underlying SPIN stem from research over the last several years that has addressed some of the fundamental performance problems that arise in modern operating system services. This research includes interprocess communication <ref> [Bershad et al. 90, Draves et al. 91] </ref>, synchronization [Bershad et al. 92, Bershad 93], thread management [Anderson et al. 92, Stodolsky et al. 93], networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory [Young 89, McNamee & Armstrong 90], and cache management
Reference: [Felten 92] <author> Felten, E. </author> <title> The Case for Application-Specific Communication Protocols. </title> <booktitle> In Proceedings of Intel Super computer Systems Division Technology Focus Conference, </booktitle> <pages> pages 171-181, </pages> <year> 1992. </year>
Reference: [Jones et al. 89] <author> Jones, N., Sestoft, P., and Sondergaard, H. </author> <title> MIX: A Self-Applicable Partial Evaluator for Experiments in Compiler Generation. </title> <journal> Lisp & Symbolic Computing, </journal> <volume> 2(1) </volume> <pages> 9-50, </pages> <month> February </month> <year> 1989. </year>
Reference: [Jones et al. 93] <author> Jones, N., Gomard, C., and Sestoft, P. </author> <title> Partial Evaluation and Automatic Program Generation. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference: [Lampson 84] <author> Lampson, B. W. </author> <title> Hints for Computer System Design. </title> <journal> IEEE Software, </journal> <volume> 1(1) </volume> <pages> 11-28, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: policy used by the system allocator may vary depending on the types of guarantees the system needs to provide to application programs. 4 Language and Compiler Requirements An operating system interface is much like a programming language in that it defines a primitive set of operations available to the programmer <ref> [Lampson 84] </ref>. In SPIN , the operating system interface is defined by an actual programming language through which applications can define and install new interfaces that match their requirements.
Reference: [Maeda & Bershad 93] <author> Maeda, C. and Bershad, B. N. </author> <title> Protocol Service Decomposition for High-Performance Net working. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 244-255, </pages> <month> December </month> <year> 1993. </year>
Reference: [McNamee & Armstrong 90] <author> McNamee, D. and Armstrong, K. </author> <title> Extending the Mach External Pager Interface to Accommodate User-Level Page Replacement Policies. </title> <booktitle> In Proceedings of the Usenix Mach Symposium, </booktitle> <pages> pages 17-29, </pages> <year> 1990. </year>
Reference-contexts: This research includes interprocess communication [Bershad et al. 90, Draves et al. 91], synchronization [Bershad et al. 92, Bershad 93], thread management [Anderson et al. 92, Stodolsky et al. 93], networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory <ref> [Young 89, McNamee & Armstrong 90] </ref>, and cache management [Wheeler & Bershad 92]. In each case, the interfaces exported by a service were poorly matched to the needs of important applications.
Reference: [Nelson 91] <author> Nelson, G., </author> <title> editor. System Programming in Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Because we anticipate aggressive use of spindles for system decomposition, we require this language and the associated compiler technology to provide specialized support for safety and performance. Our target languages are Modula-3 <ref> [Nelson 91] </ref> and Cove, a safe subset of C that we have defined. We depend on a combination of type safety, object based methodology, and explicit guards to limit the access of untrusted spindles.
Reference: [Savage & Bershad 94] <author> Savage, S. and Bershad, B. N. </author> <title> Issues in the Design of an Extensible Operating System. </title> <address> http://www.cs.washington.edu/research/projects/spin/www/docs/issues ext.ps, </address> <year> 1994. </year>
Reference-contexts: These code sequences expose alternative interfaces, and enable alternative implementations of existing interfaces for demanding applications. A trusted compiler and safe language runtime environment ensure that the installed sequences do not violate system integrity <ref> [Savage & Bershad 94] </ref>. The ideas underlying SPIN stem from research over the last several years that has addressed some of the fundamental performance problems that arise in modern operating system services.
Reference: [Stodolsky et al. 93] <author> Stodolsky, D., Bershad, B. N., and Chen, B. </author> <title> Fast Interrupt Priority Management for Operat ing System Kernels. </title> <booktitle> In Proceedings of the Second Usenix Workshop on Microkernels and Other Kernel Architectures, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: This research includes interprocess communication [Bershad et al. 90, Draves et al. 91], synchronization [Bershad et al. 92, Bershad 93], thread management <ref> [Anderson et al. 92, Stodolsky et al. 93] </ref>, networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory [Young 89, McNamee & Armstrong 90], and cache management [Wheeler & Bershad 92].
Reference: [Thekkath et al. 93] <author> Thekkath, C. A., Nguyen, T. D., Moy, E., and Lazowska, E. D. </author> <title> Implementing network protocols at user level. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(5) </volume> <pages> 554-565, </pages> <month> October </month> <year> 1993. </year>
Reference: [Weise et al. 91] <author> Weise, D., Conybeare, R., Ruf, E., and Seligman, S. </author> <title> Automatic Online Partial Evaluation. </title> <booktitle> In Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 165-191. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1991. </year> <note> LNCS 202. </note>
Reference: [Wheeler & Bershad 92] <author> Wheeler, B. and Bershad, B. N. </author> <title> Consistency Management for Virtually Indexed Caches. </title> <booktitle> In Proceedings of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-V), </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: et al. 90, Draves et al. 91], synchronization [Bershad et al. 92, Bershad 93], thread management [Anderson et al. 92, Stodolsky et al. 93], networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory [Young 89, McNamee & Armstrong 90], and cache management <ref> [Wheeler & Bershad 92] </ref>. In each case, the interfaces exported by a service were poorly matched to the needs of important applications. The solution to the performance problem came from enabling applications to adapt the behavior (interface and implementation) of system services to realize maximum performance.
Reference: [Young 89] <author> Young, M. W. </author> <title> Exporting a User Interface to Memory Management from a Communication-Oriented Operating System. </title> <type> Technical Report CMU-CS-89-202, </type> <institution> Carnegie Mellon University, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: This research includes interprocess communication [Bershad et al. 90, Draves et al. 91], synchronization [Bershad et al. 92, Bershad 93], thread management [Anderson et al. 92, Stodolsky et al. 93], networking [Maeda & Bershad 93, Yuhara et al. 94, Thekkath et al. 93, Felten 92], virtual memory <ref> [Young 89, McNamee & Armstrong 90] </ref>, and cache management [Wheeler & Bershad 92]. In each case, the interfaces exported by a service were poorly matched to the needs of important applications.
Reference: [Yuhara et al. 94] <author> Yuhara, M., Bershad, B. N., Maeda, C., and Moss, J. E. B. </author> <title> Efficient Packet Demultiplexing for Multiple Endpoints and Large Messages. </title> <booktitle> In Proceedings of the 1994 Winter USENIX Conference, </booktitle> <month> January </month> <year> 1994. </year>
References-found: 20

