URL: ftp://dimacs.rutgers.edu/pub/berryj/gd96.ps
Refering-URL: http://dimacs.rutgers.edu/~berryj/LINK.html
Root-URL: http://www.cs.rutgers.edu
Title: Link: Exploring Combinatorial Objects  
Author: Jonathan Berry Nathaniel Dean 
Date: June 26, 1996  
Address: Psicataway, NJ  600 Mountain Avenue Murray Hill, NJ 07974 U.S.A.  
Affiliation: DIMACS Center  AT&T Research  
Abstract: This paper introduces the Link system for exploring combinatorial objects. It provides graphical and functional language interfaces which are user friendly and flexible, and includes a detachable set of C++ libraries. Link allows us to interactively explore the structure of combinatorial objects such as collections, graphs, and hypergraphs. Graphs and Hypergraphs can be defined in which multiple edges are allowed or not, and in which edge sets can contain undirected edges, directed edges, or both types. Full support for default and user-defined attributes is included. We examine the use of Link in the context of a clustering problem which is a natural application for the use of hypergraphs. Real-world problems calling for the manipulation of hypergraphs or heavily attributed graphs are often simplified to avoid overcomplicated implementations. Link allows the user to define, manipulate, and visualize such combinatorial objects at a very high level.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Di Battista, P. Eades, and R. Tamassia. </author> <title> Algorithms for drawing graphs: an annotated bibli 5 ography. </title> <type> Technical report, </type> <institution> Department of Computer Science, Brown University, Providence, RI, </institution> <year> 1993. </year>
Reference-contexts: Manipulation of these models and visualization of the results can lead to deeper understanding of the problems themselves. Many computer tools have been developed for the manipulation and analysis of combinatorial objects. Most of them have been directed at very narrowly defined domains; e.g., graphs <ref> [1] </ref>, sets [2], DAGs [6, 8], function libraries [7] and [11], and so on. Because of the combinatorial similarity between these objects from an OO point of view it makes sense to treat all of these discrete objects systematically under one system called Link.
Reference: [2] <author> D. Berque, R. Cecchini, M. Goldberg, and R. Rivenburgh. </author> <title> The setplayer system for symbolic computation on power sets. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 14 </volume> <pages> 645-662, </pages> <year> 1992. </year>
Reference-contexts: Manipulation of these models and visualization of the results can lead to deeper understanding of the problems themselves. Many computer tools have been developed for the manipulation and analysis of combinatorial objects. Most of them have been directed at very narrowly defined domains; e.g., graphs [1], sets <ref> [2] </ref>, DAGs [6, 8], function libraries [7] and [11], and so on. Because of the combinatorial similarity between these objects from an OO point of view it makes sense to treat all of these discrete objects systematically under one system called Link.
Reference: [3] <author> J. Berry, N. Dean, P. Fasel, M. Goldberg, E. Johnson, J. MacCuish, G. Shannon, and S. Skiena. </author> <title> Link: A combinatorics and graph theory workbench for applications and research. </title> <type> Technical Report 95-15, </type> <note> Center for Discrete Mathematics and Theoretical Computer Science (see also: http://dimacs.rutgers.edu), Piscataway, </note> <institution> NJ, </institution> <year> 1995. </year>
Reference-contexts: The project was conceived by Nathaniel Dean, Mark Goldberg, Gregory Shannon, Steven Skiena, and Daniel Gorenstein, the founding director of DIMACS. Many people have contributed to the design and development of the system <ref> [3] </ref>. More information on Link is available at http://dimacs.rutgers.edu. The most distinguishing features of Link, when compared to other graph visualization software, are that it combines flexible algorithmic and visualization features with a powerful computing environment.
Reference: [4] <author> S. .G. Eick and G. J. Wills. </author> <title> Navigating large networks with hierarchies. </title> <booktitle> In IEEE Visualization, </booktitle> <pages> pages 204-210, </pages> <year> 1993. </year>
Reference-contexts: The weight of an edge might represent the percentage of receipts in which these two items appeared. Vertices could be assigned weights reflecting the number of times they were purchased. In fact, this solution has been implemented <ref> [4] </ref>. Changes in color and size distinguished vertices, and the user could filter out uninteresting vertices and edges, and zoom in to view interesting clusters of vertices. Consider the implications of such a solution.
Reference: [5] <author> E. Gallesio. </author> <title> The stk reference manual. </title> <type> Technical Report RT 95-31a, </type> <institution> I3S CNRS, Universite de Nice - Sophia Antipolis, France, </institution> <year> 1995. </year>
Reference-contexts: This combination of computing power and convenience with a flexible graphical user interface sets the system apart from past work. Link's graphical user interface is written using Erick Gallesio's Scheme-Tk <ref> [5] </ref> (STk), which provides access to John Ousterhout's Tk [10] graphics language from the Scheme language rather than Tcl. Manipulating combinatorial objects in a functional language like Scheme is more natural than in a systems-oriented language like Tcl.
Reference: [6] <author> E. Gansner, S. North, and K. Vo. </author> <title> Dag a program that draws directed graphs. </title> <journal> Software Practice and Experience, </journal> <volume> 18(11) </volume> <pages> 1047-1062, </pages> <year> 1988. </year>
Reference-contexts: Manipulation of these models and visualization of the results can lead to deeper understanding of the problems themselves. Many computer tools have been developed for the manipulation and analysis of combinatorial objects. Most of them have been directed at very narrowly defined domains; e.g., graphs [1], sets [2], DAGs <ref> [6, 8] </ref>, function libraries [7] and [11], and so on. Because of the combinatorial similarity between these objects from an OO point of view it makes sense to treat all of these discrete objects systematically under one system called Link.
Reference: [7] <author> D. Knuth. </author> <title> The Stanford Graphbase: a platform for combinatorial computing. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1993. </year>
Reference-contexts: Many computer tools have been developed for the manipulation and analysis of combinatorial objects. Most of them have been directed at very narrowly defined domains; e.g., graphs [1], sets [2], DAGs [6, 8], function libraries <ref> [7] </ref> and [11], and so on. Because of the combinatorial similarity between these objects from an OO point of view it makes sense to treat all of these discrete objects systematically under one system called Link.
Reference: [8] <author> E. Koutsofios and S. C. </author> <title> North. Applications of graph visualization. </title> <type> Manuscript. </type>
Reference-contexts: Manipulation of these models and visualization of the results can lead to deeper understanding of the problems themselves. Many computer tools have been developed for the manipulation and analysis of combinatorial objects. Most of them have been directed at very narrowly defined domains; e.g., graphs [1], sets [2], DAGs <ref> [6, 8] </ref>, function libraries [7] and [11], and so on. Because of the combinatorial similarity between these objects from an OO point of view it makes sense to treat all of these discrete objects systematically under one system called Link.
Reference: [9] <author> E. Makinen. </author> <title> How to draw a hypergraph. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 34 </volume> <pages> 177-185, </pages> <year> 1990. </year>
Reference-contexts: Graph objects may be multigraphs or simple graphs, binary graphs or hypergraphs, and undirected, directed, or "mixed" graphs. The latter may contain both undirected and directed edges simultaneously. Edges of directed hypergraphs in Link are defined simply as sequences of vertices. This definition is more general than that in <ref> [9] </ref>, since not only is the sink known, but the ordering of the other vertices of the edge is available if needed. The Link system also includes generation, layout, and and algorithms libraries.
Reference: [10] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This combination of computing power and convenience with a flexible graphical user interface sets the system apart from past work. Link's graphical user interface is written using Erick Gallesio's Scheme-Tk [5] (STk), which provides access to John Ousterhout's Tk <ref> [10] </ref> graphics language from the Scheme language rather than Tcl. Manipulating combinatorial objects in a functional language like Scheme is more natural than in a systems-oriented language like Tcl. STk also provides a flexible object-oriented extension which Link uses to provide a consistent syntax for graph manipulation.
Reference: [11] <author> S. Skiena. </author> <title> Implementing Discrete Mathematics: Combinatorics and Graph Theory with Mathemat-ica. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <month> 6 </month>
Reference-contexts: Many computer tools have been developed for the manipulation and analysis of combinatorial objects. Most of them have been directed at very narrowly defined domains; e.g., graphs [1], sets [2], DAGs [6, 8], function libraries [7] and <ref> [11] </ref>, and so on. Because of the combinatorial similarity between these objects from an OO point of view it makes sense to treat all of these discrete objects systematically under one system called Link.
References-found: 11

