URL: http://www.icsi.berkeley.edu/~yairb/pubs/BFKV-scheduling.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Title: New Algorithms for an Ancient Scheduling Problem  
Author: Yair Bartal Amos Fiat Howard Karloff Rakesh Vohra 
Abstract: We consider the on-line version of the original m-machine scheduling problem: given m machines and n positive real jobs, schedule the n jobs on the m machines so as to minimize the makespan, the completion time of the last job. In the on-line version, as soon as job j arrives, it must be assigned immediately to one of the m machines. We present two main results. The first is a (2 *)-competitive deterministic algorithm for all m. The competitive ratio of all previous algorithms approaches 2 as m ! 1. Indeed, the problem of improving the competitive ratio for large m had been open since 1966, when the first algorithm for this problem appeared. The second result is an optimal randomized algorithm for the case m = 2. To the best of our knowledge, our 4=3-competitive algorithm is the first specifically randomized algorithm for the original, m-machine, on-line scheduling problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> U. Faigle, W. Kern and Gyorgy Turan, </author> <title> "On the Performance of On-Line Algorithms for Partition Problems," </title> <note> Acta Cybernetica 9 (1989), 107-119. </note>
Reference-contexts: Graham gave a very simple proof that c List = 2 1 m when the number of machines is m. (Graham's 1966 analysis is one of the first worst-case analyses of a heuristic.) In 1989, Faigle, Kern and Turan <ref> [1] </ref> proved that no deterministic on-line 2 algorithm could have a smaller competitive ratio than 2 1 m for m = 2 and 3, and that for no m 4 could the competitive ratio be less than 1 + 1 p 2 = 1:707 : : : : Thus List is <p> Stop the moment such a move increases the average discrepancy to at least (a 1 + a 2 + + a t )=3; that this must happen eventually follows from the invariant below. Let P be the (critical) schedule where this occurs. Choose a q 2 <ref> [0; 1] </ref> so that if job t is assigned to the small machine of P with conditional probability q, the resulting expected discrepancy is exactly (a 1 + a 2 + + a t )=3. Use this q to assign job t to the short machine. <p> This means that the optimal cost of the primal is exactly 1:4, as claimed. Open Problems The obvious questions are improvements in the upper bounds and lower bounds presented here and in <ref> [1, 2, 3] </ref>, i.e., better upper and lower bounds on the deterministic competitive ratio for m 4 machines, a better randomized lower bound for m = 3, any good randomized upper bound for m 3, and any good randomized lower bound for m 4.
Reference: [2] <author> G. Galambos and G. Woeginger, </author> <title> "An On-Line Scheduling Heuristic with Better Worst Case Ratio than Graham's List Scheduling," </title> <type> manuscript, </type> <institution> Jozsef Attila University, </institution> <address> Szeged, Hungary. </address>
Reference-contexts: Only in 1991 did improvements over List appear <ref> [2, 9] </ref>. These algorithms are (2 1 m * m )-competitive for all m, where * m &gt; 0 for all m 4. The drawback is that * m ! 0 as m ! 1, so that the improvement is negligible for large m. <p> This means that the optimal cost of the primal is exactly 1:4, as claimed. Open Problems The obvious questions are improvements in the upper bounds and lower bounds presented here and in <ref> [1, 2, 3] </ref>, i.e., better upper and lower bounds on the deterministic competitive ratio for m 4 machines, a better randomized lower bound for m = 3, any good randomized upper bound for m 3, and any good randomized lower bound for m 4.
Reference: [3] <author> R. L. Graham, </author> <title> "Bounds for Certain Multiprocessing Anomalies," </title> <journal> Bell System Technical Journal 45 (1966), </journal> <pages> 1563-1581. </pages>
Reference-contexts: We study one of the simplest and earliest m-machine scheduling problems ever studied, the scheduling problem of Graham, introduced in 1966 <ref> [3] </ref>. This is the variant in which each job consists of exactly one task, which requires the same execution time on each of the m machines. Jobs are nonpreemptable and independent of each other. The goal is to minimize the makespan, the completion time of the last job. <p> A's competitive ratio is then c A := sup E [A ()] ; where the supremum is over all sequences of jobs. How small can c A be? In his 1966 paper <ref> [3] </ref>, Graham proposed a simple heuristic now known as the List Processing Algorithm, or just List, for the on-line scheduling problem. <p> This means that the optimal cost of the primal is exactly 1:4, as claimed. Open Problems The obvious questions are improvements in the upper bounds and lower bounds presented here and in <ref> [1, 2, 3] </ref>, i.e., better upper and lower bounds on the deterministic competitive ratio for m 4 machines, a better randomized lower bound for m = 3, any good randomized upper bound for m 3, and any good randomized lower bound for m 4. <p> Additionally, many related scheduling problems presented in <ref> [3] </ref> also have a competitive ratio of 2 1=m. The natural question is whether the techniques used here are applicable to these problems. This question is relevant both to polynomial-time off-line approximation issues and to on-line versions of these problems. 16
Reference: [4] <author> R. L. Graham, E. L. Lawler, J. K. Lenstra, and A. H. G. Rinnooy Kan, </author> <title> "Optimization and Approximation in Deterministic Sequencing and Scheduling: a Survey," </title> <booktitle> Annals of Discrete Mathematics 5 (1979), </booktitle> <pages> 287-326. </pages>
Reference: [5] <author> E. L. Lawler, </author> <title> "Recent Results in the Theory of Machine Scheduling," </title> <editor> in A. Bachem, M. Grotschel, and B. Korte (eds.), </editor> <booktitle> Math Programming The State of the Art (Bonn 1982), </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1983, </year> <pages> 202-234. </pages>
Reference: [6] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D. B. Shmoys, </author> <title> "Sequencing and Scheduling: Algorithms and Complexity," to appear in Handbook of Operations Research and Management Science, Volume IV: Production Planning and Inventory, </title> <editor> S. C. Graves, A. H. G. Rinnooy Kan, and P. Zipkin (eds.), </editor> <publisher> North-Holland. </publisher>
Reference: [7] <author> J. K. Lenstra and A. H. G. Rinnooy Kan, </author> <title> "An Introduction to Multiprocessor Scheduling," </title> <type> Technical Report, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1988. </year>
Reference: [8] <author> N. </author> <title> Linial, </title> <type> personal communication. </type>
Reference-contexts: To the best of our knowledge, this is the first use of randomization for this problem. A New m-Machine Algorithm The intuition for our algorithm seems to be well known to fans of the Russian computer game Tetris <ref> [8] </ref>. The m-machine scheduling problem is a rather simplified version of the game. The idea is to try to prevent a situation where the load on all processors is approximately equal, if you can do so while keeping the makespan within the range permitted by the target competitive ratio.
Reference: [9] <author> P. R. Narayanan and R. Chandrasekaran, </author> <title> "Optimal On-Line Algorithms for Scheduling," </title> <type> manuscript, </type> <institution> University of Texas at Dallas, </institution> <year> 1991. </year> <month> 17 </month>
Reference-contexts: Only in 1991 did improvements over List appear <ref> [2, 9] </ref>. These algorithms are (2 1 m * m )-competitive for all m, where * m &gt; 0 for all m 4. The drawback is that * m ! 0 as m ! 1, so that the improvement is negligible for large m.
References-found: 9

