URL: ftp://ftp.cs.brown.edu/pub/techreports/96/cs96-24.ps.Z
Refering-URL: http://www.cs.brown.edu/people/rt/papers/recent-papers/recent-papers.html
Root-URL: http://www.cs.brown.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. Bertolazzi, R. F. Cohen, G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> How to draw a series-parallel digraph. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 4 </volume> <pages> 385-402, </pages> <year> 1994. </year>
Reference-contexts: The issue of resolution of a drawing has been extensively studied, motivated by the finite resolution of physical rendering devices. Several papers have been published about the resolution and the area of drawings of graphs (see, e.g., <ref> [1, 6, 14, 19] </ref>). The resolution of a drawing is defined as the minimum distance between two vertices. The grid-based algorithms consider edge-bends and edge-crossings as "dummy" vertices for computing the resolution. The layering-based algorithms, however, do not consider the edge-crossings as dummy vertices for computing the resolution.
Reference: [2] <author> P. Bertolazzi, G. Di Battista, and G. Liotta. </author> <title> Parametric graph drawing. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 21(8) </volume> <pages> 662-673, </pages> <year> 1995. </year>
Reference-contexts: It is the natural evolution of the Diagram Server system [11] toward the realization of an extensible and parametric platform for experimental research on graph drawing. The user interacts with GDW through a multimedia interface. GDW presents the algorithms to the user through a taxonomy of classes of graphs <ref> [2] </ref>. The most general class of graphs in the taxonomy is Multigraph: a multigraph is a graph that has both directed and non-directed edges. All the other classes 2 in the taxonomy are subclasses of Multigraph.
Reference: [3] <editor> F. J. Brandenburg, editor. </editor> <booktitle> Graph Drawing (Proc. GD '95), volume 1027 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Motivated by applications to information visualization, a large body of graph drawing algorithms has been developed in the last decade. See, e.g., <ref> [3, 8, 33] </ref>. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., [7, 16, 18, 24, 25, 26] and the experimental papers in [3, 33]. <p> See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., [7, 16, 18, 24, 25, 26] and the experimental papers in <ref> [3, 33] </ref>. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications.
Reference: [4] <author> F. J. Brandenburg, M. Himsolt, and C. Rohrer. </author> <title> An experimental comparison of force-directed and randomized graph drawing algorithms. </title> <editor> In F. J. Brandenburg, editor, </editor> <booktitle> Graph Drawing (Proc. GD '95), volume 1027 of Lecture Notes in Computer Science, </booktitle> <pages> pages 76-87. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The experiments provide a detailed quantitative evaluation of the performance of the four algorithms, and show that they exhibit trade-offs between "aesthetic" properties (e.g., crossings, bends, edge length) and running time. The observed practical behavior of the algorithms is consistent with their theoretical properties. Brandenburg, Himsolt, and Rohrer <ref> [4] </ref> compare five "force-directed" algorithms for constructing straight-line drawings of general undirected graphs. The algorithms are tested on a a wide collection of examples and with different settings of the force parameters. The quality measures evaluated are crossings, edge length, vertex distribution, and running time.
Reference: [5] <author> L. Buti, G. Di Battista, G. Liotta, E. Tassinari, F. Vargiu, and L. Vismara. GD-Workbench: </author> <title> A system for prototyping and testing graph drawing algorithms. </title> <editor> In F. J. Brandenburg, editor, </editor> <booktitle> Graph Drawing (Proc. GD '95), volume 1027 of LNCS, </booktitle> <pages> pages 111-122. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In Section 6, the new hybrid strategy is described and its performance is discussed by means of 6 charts. Open problems are addressed in Section 7. Details on the algorithmic paths used are given in the Appendix. 2 The Graph Drawing Workbench Our graph drawing tool is GDW <ref> [5] </ref>, a system for prototyping and testing graph drawing algorithms. It is the natural evolution of the Diagram Server system [11] toward the realization of an extensible and parametric platform for experimental research on graph drawing. The user interacts with GDW through a multimedia interface. <p> Layers is the original algorithm by Sugiyama, Tagawa and Toda [30]. For our study we have used the implementation of Layers available in GDW <ref> [5] </ref>. The corresponding algorithmic path is given in the Appendix. Grid-Based: These algorithms accept, as input, a planar st-graph, i.e., a planar DAG with exactly one source and one sink, and construct an upward grid drawing of it. <p> We have evaluated the performance of an algorithm, called Visibility, which follows this approach, and of three variations of it, called Barycentric Visibility, Long Edge Visibility, and Median Visibility. For our study we have used the implementations of these algorithms available in GDW <ref> [5] </ref>. The corresponding algorithmic paths are given in the Appendix. <p> For this reason, this algorithm is also known as the left-right algorithm. In this paper we have referred to this algorithm as Lattice. For our study we have used the implementation of Lattice available in GDW <ref> [5] </ref>. The corresponding algorithmic path is given in the Appendix.
Reference: [6] <author> M. Chrobak, M. T. Goodrich, and R. Tamassia. </author> <title> Convex drawings of graphs in two and three dimensions. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 319-328, </pages> <year> 1996. </year>
Reference-contexts: The issue of resolution of a drawing has been extensively studied, motivated by the finite resolution of physical rendering devices. Several papers have been published about the resolution and the area of drawings of graphs (see, e.g., <ref> [1, 6, 14, 19] </ref>). The resolution of a drawing is defined as the minimum distance between two vertices. The grid-based algorithms consider edge-bends and edge-crossings as "dummy" vertices for computing the resolution. The layering-based algorithms, however, do not consider the edge-crossings as dummy vertices for computing the resolution.
Reference: [7] <author> R. Davidson and D. Harel. </author> <title> Drawing graphs nicely using simulated annealing. </title> <type> Technical report, </type> <institution> Department of Applied Mathematics and Computer Science, The Weizmann Institute of Science, Rehovot, </institution> <year> 1989. </year>
Reference-contexts: See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., <ref> [7, 16, 18, 24, 25, 26] </ref> and the experimental papers in [3, 33]. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications.
Reference: [8] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: An annotated bibliography. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Motivated by applications to information visualization, a large body of graph drawing algorithms has been developed in the last decade. See, e.g., <ref> [3, 8, 33] </ref>. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., [7, 16, 18, 24, 25, 26] and the experimental papers in [3, 33]. <p> Step 3 Reduce the number of bends by readjusting the position of vertices on each layer. Because of their generality and conceptual simplicity, these algorithms are very popular among the designers of practical graph drawing systems. Several layering-based algorithms have been designed (see <ref> [8] </ref> for a detailed bibliography). The above steps have also been investigated separately, and various heuristics have been proposed for each of them [8]. In this paper, we have evaluated and compared the performance of two layering based algorithms: Dot and Layers. <p> Several layering-based algorithms have been designed (see <ref> [8] </ref> for a detailed bibliography). The above steps have also been investigated separately, and various heuristics have been proposed for each of them [8]. In this paper, we have evaluated and compared the performance of two layering based algorithms: Dot and Layers. Dot is a highly optimized algorithm, developed by Koutsofios and North [27] as a successor to Dag [17, 18]. <p> ResFactor: Inverse of the minimum distance between two vertices, or two edge-crossings, or an edge-crossing and a vertex. It is widely accepted (see, e.g., <ref> [8] </ref>) that small values of the above measures are related to the perceived aesthetic appeal and visual effectiveness of the drawing. The issue of resolution of a drawing has been extensively studied, motivated by the finite resolution of physical rendering devices.
Reference: [9] <author> G. Di Battista, A. Garg, G. Liotta, R. Tamassia, E. Tassinari, and F. Vargiu. </author> <title> An experimental comparison of three graph drawing algorithms. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 306-315, </pages> <year> 1995. </year>
Reference-contexts: This work provides an excellent overview and comparison of the main features of some popular drawing algorithms. However, it does not give detailed statistical results on their performance. Di Battista et al. <ref> [9, 10] </ref> present an extensive experimental study comparing four general-purpose graph drawing algorithms. The four algorithms take as input general undirected graphs and construct orthogonal grid drawings. The test graphs are generated from a core set of 112 graphs used in "real-life" software engineering and database applications. <p> test suites of DAGs, one obtained 1 from the collection of directed graphs submitted to the e-mail graph drawing service at Bell Labs [28], and the other randomly generated by a program that simulates a PERT project planner; (ii) a set of quality measures for drawings of DAGs derived from <ref> [9] </ref>. * Within our experimental setting, we have performed a comparative study of four popular drawing algorithms for DAGs: two of them are based on the layering paradigm [27, 30], while the other two are based on the grid paradigm [12, 14]. * Our comparison highlights how more than ten years
Reference: [10] <author> G. Di Battista, A. Garg, G. Liotta, R. Tamassia, E. Tassinari, and F. Vargiu. </author> <title> An experimental comparison of four graph drawing algorithms. </title> <journal> Comput. Geom. Theory Appl., </journal> <note> 1996 (to appear). http://www.cs.brown.edu/cgc/papers/dglttv-ecfgd-96.ps.gz. </note>
Reference-contexts: This work provides an excellent overview and comparison of the main features of some popular drawing algorithms. However, it does not give detailed statistical results on their performance. Di Battista et al. <ref> [9, 10] </ref> present an extensive experimental study comparing four general-purpose graph drawing algorithms. The four algorithms take as input general undirected graphs and construct orthogonal grid drawings. The test graphs are generated from a core set of 112 graphs used in "real-life" software engineering and database applications.
Reference: [11] <author> G. Di Battista, G. Liotta, and F. Vargiu. </author> <title> Diagram Server. </title> <journal> J. Visual Lang. Comput., </journal> <volume> 6(3) </volume> <pages> 275-298, </pages> <year> 1995. </year> <title> (Special Issue on Graph Visualization, </title> <editor> I. F. Cruz and P. Eades, </editor> <publisher> editors). </publisher>
Reference-contexts: Open problems are addressed in Section 7. Details on the algorithmic paths used are given in the Appendix. 2 The Graph Drawing Workbench Our graph drawing tool is GDW [5], a system for prototyping and testing graph drawing algorithms. It is the natural evolution of the Diagram Server system <ref> [11] </ref> toward the realization of an extensible and parametric platform for experimental research on graph drawing. The user interacts with GDW through a multimedia interface. GDW presents the algorithms to the user through a taxonomy of classes of graphs [2].
Reference: [12] <author> G. Di Battista, E. Pietrosanti, R. Tamassia, and I. G. Tollis. </author> <title> Automatic layout of PERT diagrams with XPERT. </title> <booktitle> In Proc. IEEE Workshop on Visual Languages (VL '89), </booktitle> <pages> pages 171-176, </pages> <year> 1989. </year>
Reference-contexts: set of quality measures for drawings of DAGs derived from [9]. * Within our experimental setting, we have performed a comparative study of four popular drawing algorithms for DAGs: two of them are based on the layering paradigm [27, 30], while the other two are based on the grid paradigm <ref> [12, 14] </ref>. * Our comparison highlights how more than ten years of research in this field have produced a complex landscape. Namely, the four algorithms exhibit various trade-offs with respect to the quality measures, and none of them clearly outperforms the others. <p> This is done by introducing a fictitious vertex for each crossing between two edges. These fictitious vertices are assigned a position on the grid, but are not represented in the final drawing. The simple planarization method we have used for our study is the one described in <ref> [12] </ref>. The grid-based algorithms that we evaluated and compared fall under two categories: Visibility Representation-Based: These algorithms use a two-step process for constructing drawings [12, 13]. <p> The simple planarization method we have used for our study is the one described in [12]. The grid-based algorithms that we evaluated and compared fall under two categories: Visibility Representation-Based: These algorithms use a two-step process for constructing drawings <ref> [12, 13] </ref>. <p> This indicates that the crossing reduction step of the layering-based algorithms is more effective than the simple planarization strategy <ref> [12] </ref> used in Visibility and Lattice. On the other hand, Visibility and Lattice perform well with respect to other quality measures (see Section 5).
Reference: [13] <author> G. Di Battista and R. Tamassia. </author> <title> Algorithms for plane representations of acyclic digraphs. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 61 </volume> <pages> 175-198, </pages> <year> 1988. </year>
Reference-contexts: The simple planarization method we have used for our study is the one described in [12]. The grid-based algorithms that we evaluated and compared fall under two categories: Visibility Representation-Based: These algorithms use a two-step process for constructing drawings <ref> [12, 13] </ref>.
Reference: [14] <author> G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> Area requirement and symmetry display of planar upward drawings. </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 </volume> <pages> 381-401, </pages> <year> 1992. </year>
Reference-contexts: set of quality measures for drawings of DAGs derived from [9]. * Within our experimental setting, we have performed a comparative study of four popular drawing algorithms for DAGs: two of them are based on the layering paradigm [27, 30], while the other two are based on the grid paradigm <ref> [12, 14] </ref>. * Our comparison highlights how more than ten years of research in this field have produced a complex landscape. Namely, the four algorithms exhibit various trade-offs with respect to the quality measures, and none of them clearly outperforms the others. <p> They exploit the relationship between the upward planarity of DAGs and the order-theoretic properties of planar lattices (see, e.g., [20, 29]). In our study we have evaluated the performance of one poset-based algorithm: the dominance drawing algorithm of <ref> [14] </ref>. This algorithm computes two topological numberings of the vertices of the input planar st-graph; one numbering gives the x-coordinates of the vertices and bends, and the other gives the y-coordinates. <p> The issue of resolution of a drawing has been extensively studied, motivated by the finite resolution of physical rendering devices. Several papers have been published about the resolution and the area of drawings of graphs (see, e.g., <ref> [1, 6, 14, 19] </ref>). The resolution of a drawing is defined as the minimum distance between two vertices. The grid-based algorithms consider edge-bends and edge-crossings as "dummy" vertices for computing the resolution. The layering-based algorithms, however, do not consider the edge-crossings as dummy vertices for computing the resolution.
Reference: [15] <author> G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> Constrained visibility representations of graphs. </title> <journal> Inform. Process. Lett., </journal> <volume> 41 </volume> <pages> 1-7, </pages> <year> 1992. </year>
Reference-contexts: The visibility representation is constructed using two numberings <ref> [15, 31] </ref>: a topological numbering of the vertices of the planar st-graph, and a topological numbering (in the dual graph) of the faces of the planar st-graph. A topological numbering of a DAG is such that for every directed edge (u; v), v is assigned a higher number than u.
Reference: [16] <author> T. Fruchterman and E. Reingold. </author> <title> Graph drawing by force-directed placement. </title> <journal> Softw. - Pract. Exp., </journal> <volume> 21(11) </volume> <pages> 1129-1164, </pages> <year> 1991. </year>
Reference-contexts: See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., <ref> [7, 16, 18, 24, 25, 26] </ref> and the experimental papers in [3, 33]. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications.
Reference: [17] <author> E. R. Gansner, E. Koutsofios, S. C. North, and K. P. Vo. </author> <title> A technique for drawing directed graphs. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 19 </volume> <pages> 214-230, </pages> <year> 1993. </year>
Reference-contexts: In this paper, we have evaluated and compared the performance of two layering based algorithms: Dot and Layers. Dot is a highly optimized algorithm, developed by Koutsofios and North [27] as a successor to Dag <ref> [17, 18] </ref>. Dot first constructs a polyline layered drawing of the input directed graph and then, as a final step, converts the polygonal chains representing the edges into smooth curves using splines. An implementation of Dot is available at ftp://ftp.research.att.com/dist/drawdag/, and this is the implementation we used.
Reference: [18] <author> E. R. Gansner, S. C. North, and K. P. Vo. </author> <title> DAG A program that draws directed graphs. </title> <journal> Softw. - Pract. Exp., </journal> <volume> 18(11) </volume> <pages> 1047-1062, </pages> <year> 1988. </year>
Reference-contexts: See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., <ref> [7, 16, 18, 24, 25, 26] </ref> and the experimental papers in [3, 33]. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications. <p> In this paper, we have evaluated and compared the performance of two layering based algorithms: Dot and Layers. Dot is a highly optimized algorithm, developed by Koutsofios and North [27] as a successor to Dag <ref> [17, 18] </ref>. Dot first constructs a polyline layered drawing of the input directed graph and then, as a final step, converts the polygonal chains representing the edges into smooth curves using splines. An implementation of Dot is available at ftp://ftp.research.att.com/dist/drawdag/, and this is the implementation we used.
Reference: [19] <author> A. Garg and R. Tamassia. </author> <title> Planar drawings and angular resolution: Algorithms and bounds. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Algorithms (Proc. ESA '94), volume 855 of Lecture Notes in Computer Science, </booktitle> <pages> pages 12-23. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The issue of resolution of a drawing has been extensively studied, motivated by the finite resolution of physical rendering devices. Several papers have been published about the resolution and the area of drawings of graphs (see, e.g., <ref> [1, 6, 14, 19] </ref>). The resolution of a drawing is defined as the minimum distance between two vertices. The grid-based algorithms consider edge-bends and edge-crossings as "dummy" vertices for computing the resolution. The layering-based algorithms, however, do not consider the edge-crossings as dummy vertices for computing the resolution.
Reference: [20] <author> A. Garg and R. Tamassia. </author> <title> Upward planarity testing. </title> <booktitle> Order, </booktitle> <volume> 12 </volume> <pages> 109-133, </pages> <year> 1995. </year> <month> 15 </month>
Reference-contexts: Poset-Based: These algorithms view planar st-graphs as covering graphs of partially ordered sets (posets). They exploit the relationship between the upward planarity of DAGs and the order-theoretic properties of planar lattices (see, e.g., <ref> [20, 29] </ref>). In our study we have evaluated the performance of one poset-based algorithm: the dominance drawing algorithm of [14]. This algorithm computes two topological numberings of the vertices of the input planar st-graph; one numbering gives the x-coordinates of the vertices and bends, and the other gives the y-coordinates.
Reference: [21] <author> M. Himsolt. </author> <title> Comparing and evaluating layout algorithms within GraphEd. </title> <journal> J. Visual Lang. Comput., </journal> <volume> 6(3), </volume> <year> 1995. </year> <title> (Special Issue on Graph Visualization, </title> <editor> I. F. Cruz and P. Eades, </editor> <publisher> editors). </publisher>
Reference-contexts: Since the experiments are limited to randomly generated maximal planar graphs, this work gives only partial insight on the performance of the algorithms on general planar graphs. Himsolt <ref> [21] </ref> presents a comparative study of twelve graph drawing algorithms. The algorithms selected are based on various approaches (e.g., force-directed, layering, and planarization) and use a variety of graphic standards (e.g., orthogonal, straight-line, polyline). <p> Only three algorithms draw general graphs, while the others are specialized for trees, planar graphs, Petri nets, and graph grammars. The experiments are conducted with the graph drawing system GraphEd <ref> [21] </ref>. Many examples of drawings constructed by the algorithms are shown, and various objective and subjective evaluations on the aesthetic quality of the drawings produced are given. However, statistics are provided only on the edge length, and few details on the experimental setting are provided.
Reference: [22] <author> S. Jones, P. Eades, A. Moran, N. Ward, G. Delott, and R. Tamassia. </author> <title> A note on planar graph drawing algorithms. </title> <type> Technical Report 216, </type> <institution> Department of Computer Science, University of Queensland, </institution> <year> 1991. </year>
Reference-contexts: While few studies of this type have been performed in the past, there is now fast growing interest in the important subject of experimental comparative studies of graph drawing algorithms. 1.1 Previous Experimental Work in Graph Drawing The performance of four planar straight-line drawing algorithms is compared in <ref> [22] </ref>. The standard deviations in angle size, edge length, and face area are used to compare the quality of the planar straight-line drawings produced.
Reference: [23] <author> M. Junger and P. Mutzel. </author> <title> Exact and heuristic algorithms for 2-layer straightline crossing minimization. </title> <editor> In F. J. Brandenburg, editor, </editor> <booktitle> Graph Drawing (Proc. GD '95), volume 1027 of Lecture Notes in Computer Science, </booktitle> <pages> pages 337-348. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The quality measures evaluated are crossings, edge length, vertex distribution, and running time. They also identify trade-offs between the running time and the aesthetic quality of the drawings produced. Junger and Mutzel <ref> [23] </ref> investigate crossing minimization strategies for straight-line drawings of 2-layer graphs, and compare the performance of eight popular heuristics for this problem. 1.2 Our Results In this paper we consider the important class of directed acyclic graphs (DAGs), and compare the performance of four drawing algorithms specifically developed for them.
Reference: [24] <author> M. Junger and P. Mutzel. </author> <title> Maximum planar subgraphs and nice embeddings: Practical layout tools. </title> <journal> Algorithmica, </journal> <volume> 16 </volume> <pages> 33-59, </pages> <year> 1996. </year> <note> (Special Issue on Graph Drawing, </note> <author> G. Di Battista and R. Tamassia, </author> <title> editors). </title>
Reference-contexts: See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., <ref> [7, 16, 18, 24, 25, 26] </ref> and the experimental papers in [3, 33]. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications.
Reference: [25] <author> T. Kamada. </author> <title> Visualizing Abstract Objects and Relations. </title> <booktitle> World Scientific Series in Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., <ref> [7, 16, 18, 24, 25, 26] </ref> and the experimental papers in [3, 33]. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications.
Reference: [26] <author> G. Kant. </author> <title> Algorithms for Drawing Planar Graphs. </title> <type> PhD thesis, </type> <institution> Dept. Comput. Sci., Univ. </institution> <address> Utrecht, Utrecht, Netherlands, </address> <year> 1993. </year>
Reference-contexts: See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., <ref> [7, 16, 18, 24, 25, 26] </ref> and the experimental papers in [3, 33]. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications.
Reference: [27] <author> E. Koutsofios and S. </author> <title> North. Drawing graphs with dot, 1993. dot user's manual. </title> <publisher> ftp://ftp.research.att.com/dist/drawdag/. </publisher>
Reference-contexts: generated by a program that simulates a PERT project planner; (ii) a set of quality measures for drawings of DAGs derived from [9]. * Within our experimental setting, we have performed a comparative study of four popular drawing algorithms for DAGs: two of them are based on the layering paradigm <ref> [27, 30] </ref>, while the other two are based on the grid paradigm [12, 14]. * Our comparison highlights how more than ten years of research in this field have produced a complex landscape. <p> The above steps have also been investigated separately, and various heuristics have been proposed for each of them [8]. In this paper, we have evaluated and compared the performance of two layering based algorithms: Dot and Layers. Dot is a highly optimized algorithm, developed by Koutsofios and North <ref> [27] </ref> as a successor to Dag [17, 18]. Dot first constructs a polyline layered drawing of the input directed graph and then, as a final step, converts the polygonal chains representing the edges into smooth curves using splines. <p> They are obtained from a collection of directed graphs [28], that North collected at AT&T Bell Labs by running for two years Draw DAG, an e-mail graph drawing service that accepts directed graphs formatted as e-mail messages and returns messages with the corresponding drawings <ref> [27] </ref>. Originally, the North DAGs consisted of 5114 directed graphs, whose number of vertices varied in the range 1 : : : 7602.
Reference: [28] <author> S. </author> <title> North. 5114 directed graphs, 1995. </title> <type> Manuscript. </type> <institution> ftp://ftp.research.att.com/dist/drawdag/. </institution>
Reference-contexts: Our setting consists of: (i) two large test suites of DAGs, one obtained 1 from the collection of directed graphs submitted to the e-mail graph drawing service at Bell Labs <ref> [28] </ref>, and the other randomly generated by a program that simulates a PERT project planner; (ii) a set of quality measures for drawings of DAGs derived from [9]. * Within our experimental setting, we have performed a comparative study of four popular drawing algorithms for DAGs: two of them are based <p> We considered two typical contexts where DAGs play a fundamental role, namely software engineering and project planning. The first set of test DAGs are what we call the North DAGs. They are obtained from a collection of directed graphs <ref> [28] </ref>, that North collected at AT&T Bell Labs by running for two years Draw DAG, an e-mail graph drawing service that accepts directed graphs formatted as e-mail messages and returns messages with the corresponding drawings [27]. <p> However, the density of the directed graphs with a number of vertices that did not fall in the range 10 : : : 100 was very low (see also the statistics in <ref> [28] </ref>); since such directed graphs represent a very sparse statistical population we decided to discard them. Then we noted that many directed graphs were isomorphic; since the vertices of the directed graphs have labels associated with them, the problem is tractable.
Reference: [29] <author> I. </author> <title> Rival. Reading, drawing, and order. </title> <editor> In I. G. Rosenberg and G. Sabidussi, editors, </editor> <booktitle> Algebras and Orders, </booktitle> <pages> pages 359-404. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Poset-Based: These algorithms view planar st-graphs as covering graphs of partially ordered sets (posets). They exploit the relationship between the upward planarity of DAGs and the order-theoretic properties of planar lattices (see, e.g., <ref> [20, 29] </ref>). In our study we have evaluated the performance of one poset-based algorithm: the dominance drawing algorithm of [14]. This algorithm computes two topological numberings of the vertices of the input planar st-graph; one numbering gives the x-coordinates of the vertices and bends, and the other gives the y-coordinates.
Reference: [30] <author> K. Sugiyama, S. Tagawa, and M. </author> <title> Toda. Methods for visual understanding of hierarchical systems. </title> <journal> IEEE Trans. Syst. Man Cybern., </journal> <volume> SMC-11(2):109-125, </volume> <year> 1981. </year>
Reference-contexts: generated by a program that simulates a PERT project planner; (ii) a set of quality measures for drawings of DAGs derived from [9]. * Within our experimental setting, we have performed a comparative study of four popular drawing algorithms for DAGs: two of them are based on the layering paradigm <ref> [27, 30] </ref>, while the other two are based on the grid paradigm [12, 14]. * Our comparison highlights how more than ten years of research in this field have produced a complex landscape. <p> These algorithms accept as input directed graphs without any particular restriction (the input directed graph can be planar or not, acyclic or cyclic). For constructing drawings, they generally follow the methodology of Sugiyama et al. <ref> [30] </ref>, which consists of the following three steps: Step 1 Assign vertices to layers heuristically optimizing some criteria, such as the total edge length. Step 2 Reduce the crossings among edges by permuting the order of vertices on each layer. <p> However, since all other algorithms considered in this study represent edges as polygonal chains, we decided to analyze the polyline drawing produced by Dot and not the final drawing with curved lines. Layers is the original algorithm by Sugiyama, Tagawa and Toda <ref> [30] </ref>. For our study we have used the implementation of Layers available in GDW [5]. The corresponding algorithmic path is given in the Appendix.
Reference: [31] <author> R. Tamassia and I. G. Tollis. </author> <title> A unified approach to visibility representations of planar graphs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1(4) </volume> <pages> 321-341, </pages> <year> 1986. </year>
Reference-contexts: The visibility representation is constructed using two numberings <ref> [15, 31] </ref>: a topological numbering of the vertices of the planar st-graph, and a topological numbering (in the dual graph) of the faces of the planar st-graph. A topological numbering of a DAG is such that for every directed edge (u; v), v is assigned a higher number than u.
Reference: [32] <author> R. Tamassia and I. G. Tollis. </author> <title> Planar grid embedding in linear time. </title> <journal> IEEE Trans. Circuits Syst., </journal> <volume> CAS-36(9):1230-1234, </volume> <year> 1989. </year>
Reference-contexts: This has a dramatic impact on the quality of the drawing. Similarly, we believe that the performance of several algorithms, such as Visibility, can be improved by a postprocessing "beautification" step. For example, it would be interesting to study bend-stretching techniques <ref> [32] </ref> that reduce the bends by doing local transformations. * Similarly, the role of the preprocessing step should also be studied. In particular, the performance of grid-based algorithms can be improved by using a more sophisticated planarizer.
Reference: [33] <editor> R. Tamassia and I. G. Tollis, editors. </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 16 </month>
Reference-contexts: 1 Introduction Motivated by applications to information visualization, a large body of graph drawing algorithms has been developed in the last decade. See, e.g., <ref> [3, 8, 33] </ref>. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., [7, 16, 18, 24, 25, 26] and the experimental papers in [3, 33]. <p> See, e.g., [3, 8, 33]. Many graph drawing papers show sample outputs from prototype implementations and some also provide limited experimental results on small test suites (with fewer than 100 graphs). See, e.g., [7, 16, 18, 24, 25, 26] and the experimental papers in <ref> [3, 33] </ref>. However, only extensive experimentations can assess the practical performance of graph drawing algorithms in real-life applications.
References-found: 33

