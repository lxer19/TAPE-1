URL: http://www.cs.utah.edu/~sjt/seminar/papers/assuring_dtmach.ps
Refering-URL: http://www.cs.utah.edu/~sjt/seminar/refs.html
Root-URL: 
Title: Assuring Distributed Trusted Mach  
Author: Todd Fine and Spencer E. Minear 
Address: 1210 West County Road E Suite 100 Arden Hills, Minnesota 55112  
Affiliation: Secure Computing Corporation  
Abstract: The Distributed Trusted Mach (DTMach) program is developing a design for a high-assurance, secure, distributed system based on Mach. To achieve this goal, it is first necessary to identify the general threats against which DTMach must protect. The next step is to identify control mechanisms that are sufficient to protect against each of the threats. The DTMach design makes extensive use of type enforcement in addressing the threats. This paper describes the general threats and the countermeasures provided by DTMach. Doing so provides more evidence of the usefulness of type enforcement in general and the high assurance provided by the DTMach type enforcement policy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> "Trusted Mach Kernel Primer," Trusted Information Systems, Inc., </institution> <note> Draft 0.1, </note> <month> November 27, </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Distributed Trusted Mach (DTMach) is an operating system currently being designed by Secure Computing Corporation. The goal of the project is to use the Mach 3.0 kernel as the base for a secure, distributed system. The DTMach design is an outgrowth of three related efforts: Mach [12], TMach <ref> [1, 2] </ref>, and LOCK T M [11]. As a first step in developing the DTMach security policy, a categorization of general security concerns was constructed. Concerns that were not adequately addressed by the Mach 3.0 kernel indicated potential security vulnerabilities. <p> Type enforcement is a flexible, general access control mechanism that was initially developed at Secure Computing for use in its LOCK Trusted Computing Base (TCB)[11, 13]. Section 3 provides a brief overview of the concept of type enforcement. On the DTMach project, the existing design for the TMach kernel <ref> [1] </ref> was modified to sup port type enforcement and to maintain maximal consistency with the Mach 3.0 kernel. Consequently, there are significant differences between TMach and DT-Mach. Although references are made to the TMach design, the focus of this paper is on the DTMach security policy and security mechanisms.
Reference: [2] <author> Martha Branstad, Homayoon Tajalli, Frank Mayer, and David Dalva, </author> <title> "Access Mediation in a Message Passing Kernel," </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 66-72, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Distributed Trusted Mach (DTMach) is an operating system currently being designed by Secure Computing Corporation. The goal of the project is to use the Mach 3.0 kernel as the base for a secure, distributed system. The DTMach design is an outgrowth of three related efforts: Mach [12], TMach <ref> [1, 2] </ref>, and LOCK T M [11]. As a first step in developing the DTMach security policy, a categorization of general security concerns was constructed. Concerns that were not adequately addressed by the Mach 3.0 kernel indicated potential security vulnerabilities.
Reference: [3] <author> Li Gong, </author> <title> "A Secure Identity-Based Capability System," </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 55-63, </pages> <month> May, </month> <year> 1989. </year>
Reference: [4] <author> P.A. Karger and A.J. Herbert, </author> <title> "An Augmented Capability Architecture to Support Lattice Security and Traceability of Access", </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 2-12, </pages> <month> April, </month> <year> 1984. </year>
Reference: [5] <author> P.A. Karger, </author> <title> "Improving Security and Performance for Capability Systems", </title> <institution> University of Cambridge Computer Laboratory, </institution> <month> October, </month> <year> 1988. </year>
Reference: [6] <author> Keith Loepere, </author> <title> "Mach 3 Kernel Principles," </title> <institution> Open Software Foundation and Carnegie Mellon University, </institution> <month> March 15, </month> <year> 1991. </year> <title> [7] "Software Requirements Specification for Distributed Trusted Mach. </title> <institution> DTMach CDRL A005," Secure Computing Corporation, </institution> <month> June 22, </month> <title> 1992 . [8] "System/Segment Design Document. </title> <institution> DTMach CDRL A006-V1,2," Secure Computing Corporation, </institution> <month> July, </month> <year> 1992. </year>
Reference-contexts: Further details of both systems can be found in <ref> [6] </ref> and [7]. To highlight the differences between Mach and DTmach, we first describe Mach and then separately describe DTMach extensions to Mach. 2.1 Mach Overview The central concept in Mach is message passing.
Reference: [9] <author> Mamoru Maekawa, Arthur Oldehoeft, and Rod-ney Oldehoeft, </author> <title> Operating Systems Advanced Concepts, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1987. </year>
Reference-contexts: The allocating task is given rights to the port. The only way for other tasks to obtain a right for a port is for the right to be passed in a message sent by a task already holding the right. Mach port rights are analogous to capabilities <ref> [9] </ref>. Although many tasks are permitted to hold a send right to a port, at most one task holds a receive right for a port at any given time; this task is the port's receiver. <p> If the communication links are physically protected, it suffices to use some form of reliable broadcast protocol <ref> [9] </ref>. If links are not physically protected, it is necessary to use cryptography in conjunction with a reliable broadcast protocol to protect against malicious agents who have access to the communication links.
Reference: [10] <institution> MACH Networking Group, "Network Server Design," Carnegie Mellon University, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: Just as the kernel does not provide things such as file systems, it does not provide any networking capability. The DTMach approach for distributing Mach is based on the approach described in <ref> [10] </ref>. Tasks called network servers are implemented that transparently extend the Mach message passing mechanism across a network. In this approach, each node in a network must contain a network server.
Reference: [11] <author> O.Saydjari, J. Beckman, and J. Leaman. "LOCK Trek: </author> <title> Navigating Uncharted Space," </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 167-175, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: The goal of the project is to use the Mach 3.0 kernel as the base for a secure, distributed system. The DTMach design is an outgrowth of three related efforts: Mach [12], TMach [1, 2], and LOCK T M <ref> [11] </ref>. As a first step in developing the DTMach security policy, a categorization of general security concerns was constructed. Concerns that were not adequately addressed by the Mach 3.0 kernel indicated potential security vulnerabilities. <p> While file, name, and network servers are common operating system extensions to Mach, the security servers are unique to the DTMach design. The security servers are responsible for making access control decisions; in this sense, they are analogous to the LOCK SIDEARM 1 <ref> [11] </ref>. Each task and port is assigned a security context. <p> Mach type enforcement policy supports the application level policy. By using type enforcement to construct protected subsystems, the analysis can be modularized and consequently made much more feasible. As described throughout this paper, type enforcement is the key component of the DTMach security policy. As described in <ref> [11] </ref>, type enforcement was also found to be invaluable in the design of the LOCK TCB. The ease with which type enforcement was "ported" from LOCK to DTMach provides support for the claim that it is a generally applicable security policy.
Reference: [12] <author> Andrew S. Tannenbaum, </author> <title> Modern Operating Systems, </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Distributed Trusted Mach (DTMach) is an operating system currently being designed by Secure Computing Corporation. The goal of the project is to use the Mach 3.0 kernel as the base for a secure, distributed system. The DTMach design is an outgrowth of three related efforts: Mach <ref> [12] </ref>, TMach [1, 2], and LOCK T M [11]. As a first step in developing the DTMach security policy, a categorization of general security concerns was constructed. Concerns that were not adequately addressed by the Mach 3.0 kernel indicated potential security vulnerabilities. <p> This would allow the user to make use of the trusted subject's privileges. In 1988 the Internet worm <ref> [12] </ref> used these techniques to propagate itself through a significant portion of the Internet. DTMach protects against this threat by requiring execute access to be a distinct access mode in the per-mision vector.
Reference: [13] <author> W.E. Boebert and R.Y. Kain. </author> <title> "A Practical Alternative to Hierarchical Integrity Policies," </title> <booktitle> Proceedings of the 8th National Computer Security Conference, </booktitle> <month> October </month> <year> 1985. </year>
Reference-contexts: This would allow the security database maintenance subjects to read and write the database without having to worry about them accidentally destroying the objects containing the security database. There are numerous other examples of how type enforcement supports least privilege <ref> [13] </ref>. The second way that DTMach supports least privilege is in the separation of port rights and permissions. <p> This is acceptable in a security environment where trust can be viewed as a non-increasing function when applied to the task creation processing, e.g. a Biba integrity model. However, in a more general case, where untrusted applications request services of trusted applications, e.g. the LOCK TCB <ref> [13] </ref>, it is necessary to allow parent tasks to create higher integrity child tasks.
References-found: 11

