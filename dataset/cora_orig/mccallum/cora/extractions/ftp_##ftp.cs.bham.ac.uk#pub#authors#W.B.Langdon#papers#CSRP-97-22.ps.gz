URL: ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/papers/CSRP-97-22.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Fitness Causes Bloat: Simulated Annealing, Hill Climbing and Populations  
Author: W. B. Langdon 
Address: B15 2TT, UK  
Affiliation: School of Computer Science, The University of Birmingham, Birmingham  
Pubnum: Technical Report: CSRP-97-22  
Email: W.B.Langdon@cs.bham.ac.uk  
Phone: Tel: +44 (0) 121 414 4791, Fax: +44 (0) 121 414 4281  
Date: 2 September 1997  
Web: http://www.cs.bham.ac.uk/~wbl  
Abstract: In many cases programs length's increase (known as "bloat", "fluff" and increasing "structural complexity") during artificial evolution. We show bloat is not specific to genetic programming and suggest it is inherent in search techniques with discrete variable length representations using simple static evaluation functions. We investigate the bloating characteristics of three non-population and one population based search techniques using a novel mutation operator. An artificial ant following the Santa Fe trail problem is solved by simulated annealing, hill climbing, strict hill climbing and population based search using two variants of the the new subtree based mutation operator. As predicted bloat is observed when using unbiased mutation and is absent in simulated annealing and both hill climbers when using the length neutral mutation however bloat occurs with both mutations when using a population. We conclude that there are two causes of bloat. 
Abstract-found: 1
Intro-found: 1
Reference: [ Altenberg, 1994 ] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 3, </booktitle> <pages> pages 47-74. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: I.e. fitness causes bloat. The evolution of evolvabilty view states that the population evolves to be more evolvable, i.e. more able to produce offspring that are fitter than their parents <ref> [ Altenberg, 1994 ] </ref> . However in cases of bloat the population does not change over time to increase its chances of finding improved solutions but instead it changes over time to reduce the chance of finding worse solutions.
Reference: [ Angeline, 1994 ] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Blickle and Thiele, 1994 ] <author> Tobias Blickle and Lothar Thiele. </author> <title> Genetic programming and redundancy. </title> <editor> In J. Hopf, editor, </editor> <booktitle> Genetic Algorithms within the Framework of Evolutionary Computation (Workshop at KI-94, Saarbrucken), </booktitle> <pages> pages 33-38, </pages> <address> Im Stadtwald, Building 44, D-66123 Saarbrucken, Germany, </address> <year> 1994. </year> <institution> Max-Planck-Institut fur Informatik (MPI-I-94-241). </institution>
Reference: [ Blickle, 1996 ] <author> Tobias Blickle. </author> <title> Theory of Evolutionary Algorithms and Application to System Synthesis. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology, </institution> <address> Zurich, </address> <month> November </month> <year> 1996. </year>
Reference: [ Iba, 1995 ] <editor> Hitoshi Iba. </editor> <title> Random tree generation for genetic programming. </title> <type> Technical Report ETL-TR-95-35, </type> <institution> ElectroTechnical Laboratory (ETL), </institution> <address> 1-1-4 Umezono, Tsukuba-city, Ibaraki, 305, Japan, </address> <month> 14 November </month> <year> 1995. </year>
Reference: [ Iba, 1996 ] <editor> Hitoshi Iba. </editor> <title> Random tree generation for genetic programming. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 75-82, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: Appendix A describes in detail the algorithm for creating random trees, while Appendix B describes the expected change in size due specifically to mutation alone. 2 The Artificial Ant Problem The artificial ant problem is described in <ref> [ Koza, 1992, pages 147-155 ] </ref> . It is a well studied problem and was chosen as it has a simple fitness function. Briefly the problem is to devise a program which can successfully navigate an artificial ant along a twisting trail on a square 32fi32 toroidal grid. <p> However it proved difficult to ensure a tree based mutation operator based upon the ramped "half and half" method <ref> [ Koza, 1992, Page 92-93 ] </ref> , such as we used in [ Langdon, 1997; Langdon and Poli, 1997b ] , did not have any length bias.
Reference: [ Koza, 1994 ] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: However some effects believed to be due to limiting the maximum size of the programs to 500 had been noted and accordingly the maximum size restriction was effectively removed by raising it from 500 to 32,767. The details are given in Table 1, parameters not shown are as <ref> [ Koza, 1994, page 655 ] </ref> . On each version of the problem 50 independent runs were conducted, except in the case of the longest runs where runtime constrains meant we only ran the first 20 runs. New trials solutions are created from the currently active one by mutation.
Reference: [ Langdon and Poli, 1997a ] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat. </title> <booktitle> In Second Online World Conference on Soft Computing in Engineering Design and Manufacturing, </booktitle> <month> 23-27 June </month> <year> 1997. </year>
Reference-contexts: 1 Introduction In earlier work <ref> [ Langdon and Poli, 1997a ] </ref> we claimed the widely reported [ Tackett, 1993; Tackett, 1994; Angeline, 1994; Tackett, 1995; Langdon, 1995; Nordin and Banzhaf, 1995; Soule et al., 1996 ] phenomenum of programs' length increasing as artificial populations are evolved (known variously as "bloat", "fluff" and increasing "structural complexity") is <p> In this paper we seek to further justify our claim by investigating the bloating characteristics of three non-population based search techniques using a novel mutation operator on the same problem as <ref> [ Langdon and Poli, 1997a ] </ref> and [ Langdon and Poli, 1997b ] (i.e. evolving an artificial ant to follow the Santa Fe trail). For comparison we also demonstrate bloat using our new mutation operator in a population. <p> Tournaments of 7 used to select parents in both cases. 4 Search Parameters Apart from replacing the population used in <ref> [ Langdon and Poli, 1997a ] </ref> and [ Langdon and Poli, 1997b ] by a single active trial program the parameters are substantially unchanged. <p> Table 10 indicates the two mutation operators have very different bloat characteristics despite using the same mechanism to create new code and neither having an explicit length bias. The subtree sized mutation operator bloats. This is entirely in keeping with our earlier predictions <ref> [ Langdon and Poli, 1997a ] </ref> that bloat would occur if there is no length bias. 50%- 150% does not bloat except when used in a population. 7.1 Strict Hill Climbing As with both simulated annealing and hill climbing, when using strict hill climbing programs in runs with the subtree sized <p> solutions. 15 Table 11: Santa Fe Problem: Rate of Increase in Mean Program Size, Means of 20/50 runs 50%-150% Subtree sized SA Subtree sized GP Mutation Gen Size Gen Size Trial Size Gen Size Gen Size 39 35 3 73 2,000 308 Per generation 0.13 1.28 0.04 7.6 5.0 GP <ref> [ Langdon and Poli, 1997a, Figure 3 ] </ref> Mutation [ Langdon and Poli, 1997b, Figure 11 ] With simulated annealing and hill climbing rejecting a mutation implies retention of the current point, NB there is no change in length. <p> In Section 6.4.3 we showed bloat with our 50%-150% mutation operator can be explained by non-executable code (i.e. by introns). 8 Conclusions In previous work <ref> [ Langdon and Poli, 1997a ] </ref> we advanced a general explanation for bloat which should apply generally to any discrete variable length representation and generally to any progressive search technique.
Reference: [ Langdon and Poli, 1997b ] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat: Mutation. </title> <editor> In John Koza, editor, </editor> <booktitle> Late Breaking Papers at the GP-97 Conference, </booktitle> <pages> pages 132-140, </pages> <address> Stanford, CA, USA, 13-16 July 1997. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: Instead we argued in general bloat is inherent in any discrete variable length representation using simple static evaluation functions provided there is no length bias. We have demonstrated <ref> [ Langdon and Poli, 1997b ] </ref> that bloat is not specific property of GP's crossover operator but can occur with other operators, such as random subtree change. <p> In this paper we seek to further justify our claim by investigating the bloating characteristics of three non-population based search techniques using a novel mutation operator on the same problem as [ Langdon and Poli, 1997a ] and <ref> [ Langdon and Poli, 1997b ] </ref> (i.e. evolving an artificial ant to follow the Santa Fe trail). For comparison we also demonstrate bloat using our new mutation operator in a population. <p> Tournaments of 7 used to select parents in both cases. 4 Search Parameters Apart from replacing the population used in [ Langdon and Poli, 1997a ] and <ref> [ Langdon and Poli, 1997b ] </ref> by a single active trial program the parameters are substantially unchanged. <p> This randomly selects a subtree within the program tree and replaces it with a new subtree. The replacement subtree is created randomly. Preliminary runs were conducted using a mutation operator substantially the same as the mutation operator used in <ref> [ Langdon and Poli, 1997b ] </ref> . While results with this operator are substantially the same as we present later, it does have an appreciable parsimony bias. <p> To make interpretation of the results clearer we developed a new subtree mutation operator which, of itself, produces no change in program size. 5 New Tree Mutation Operators In earlier work <ref> [ Langdon, 1997; Langdon and Poli, 1997b ] </ref> we demonstrated bloat despite a slight parsimony bias in the tree based mutation operator. <p> However it proved difficult to ensure a tree based mutation operator based upon the ramped "half and half" method [ Koza, 1992, Page 92-93 ] , such as we used in <ref> [ Langdon, 1997; Langdon and Poli, 1997b ] </ref> , did not have any length bias. <p> Increase in Mean Program Size, Means of 20/50 runs 50%-150% Subtree sized SA Subtree sized GP Mutation Gen Size Gen Size Trial Size Gen Size Gen Size 39 35 3 73 2,000 308 Per generation 0.13 1.28 0.04 7.6 5.0 GP [ Langdon and Poli, 1997a, Figure 3 ] Mutation <ref> [ Langdon and Poli, 1997b, Figure 11 ] </ref> With simulated annealing and hill climbing rejecting a mutation implies retention of the current point, NB there is no change in length. <p> That is bloat is not specific to genetic programming applied to trees and tree based crossover but should also be found with other genetic operators and non-population based stochastic search techniques such as simulated annealing and stochastic iterated hill climbing. In <ref> [ Langdon and Poli, 1997b ] </ref> we demonstrated bloat can occur when crossover is replaced by mutation and in this paper we have demonstrated it can indeed occur with simulated annealing and hill climbing although strict hill climbing stifles evolution after it reaches a local optima and in the process cuts
Reference: [ Langdon, 1995 ] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 295-302, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Langdon, 1997 ] <author> W. B. Langdon. </author> <title> Fitness causes bloat in variable size representations. </title> <type> Technical Report CSRP-97-14, </type> <institution> University of Birmingham, School of Computer Science, </institution> <month> 14 May </month> <year> 1997. </year> <title> Position paper at the Workshop on Evolutionary Computation with Variable Size Representation at ICGA-97. </title> <type> 18 </type>
Reference-contexts: To make interpretation of the results clearer we developed a new subtree mutation operator which, of itself, produces no change in program size. 5 New Tree Mutation Operators In earlier work <ref> [ Langdon, 1997; Langdon and Poli, 1997b ] </ref> we demonstrated bloat despite a slight parsimony bias in the tree based mutation operator. <p> However it proved difficult to ensure a tree based mutation operator based upon the ramped "half and half" method [ Koza, 1992, Page 92-93 ] , such as we used in <ref> [ Langdon, 1997; Langdon and Poli, 1997b ] </ref> , did not have any length bias.
Reference: [ McPhee and Miller, 1995 ] <author> Nicholas Freitag McPhee and Justin Darwin Miller. </author> <title> Accurate repli-cation in genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 303-309, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Such introns are said to protect the program containing them from crossover [ Blickle and Thiele, 1994; Blickle, 1996; Nordin et al., 1995; Nordin et al., 1996 ] . <ref> [ McPhee and Miller, 1995 ] </ref> presents an analysis of some simple GP problems designed to investigate bloat. This shows that, with some function sets, longer programs can "replicate" more "accurately" when using crossover.
Reference: [ Nordin and Banzhaf, 1995 ] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 310-317, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Nordin et al., 1995 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 6-22, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference: [ Nordin et al., 1996 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 6, </booktitle> <pages> pages 111-134. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Rosca and Ballard, 1996 ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Complexity drift in evolutionary computation with tree representations. </title> <type> Technical Report NRL5, </type> <institution> University of Rochester, Computer Science Department, Rochester, </institution> <address> NY, USA, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: This shows that, with some function sets, longer programs can "replicate" more "accurately" when using crossover. That is offspring produced by crossover between longer programs are more likely to behave as their parents than children of shorter programs. <ref> [ Rosca and Ballard, 1996 ] </ref> provides a detailed analysis of bloat using tree schemata specifically for GP. Whilst not disagreeing with this explanation, we have sought a more general one in terms of the general characteristics of search spaces. This predicts in general bloat with any unbiased search operator.
Reference: [ Soule et al., 1996 ] <author> Terence Soule, James A. Foster, and John Dickinson. </author> <title> Code growth in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 215-223, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Tackett, 1994 ] <author> Walter Alden Tackett. </author> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> University of Southern California, Department of Electrical Engineering Systems, </institution> <year> 1994. </year>
Reference: [ Tackett, 1995 ] <author> Walter Alden Tackett. </author> <title> Greedy recombination and genetic search on the space of computer programs. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 271-297, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Wu and Lindsay, 1996 ] <author> Annie S. Wu and Robert K. Lindsay. </author> <title> A survey of intron research in genetics. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechenberg, and Hans-Paul Schwefel, editors, </editor> <booktitle> Parallel Problem Solving From Nature IV. Proceedings of the International Conference on Evolutionary Computation, volume 1141 of LNCS, </booktitle> <pages> pages 101-110, </pages> <address> Berlin, Germany, </address> <month> 22-26 September </month> <year> 1996. </year> <note> Springer-Verlag. 19 </note>
Reference-contexts: Bloated populations tend to have little chance of improvement. 7.4 Introns The principal explanation advanced for bloat has been the growth of "introns" or "redundancy", i.e. code which has no effect on the operation of the program which contains it. ( <ref> [ Wu and Lindsay, 1996 ] </ref> contains a survey of recent research in biology on "introns").
References-found: 22

