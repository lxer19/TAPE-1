URL: ftp://ftp.cs.unc.edu/pub/users/goddard/TR97-007.ps.Z
Refering-URL: http://www.cs.unc.edu/~goddard/DissertationSummary.html
Root-URL: http://www.cs.unc.edu
Title: Analyzing the Real-Time Properties of a Dataflow Execution Paradigm using a Synthetic Aperture Radar Application  
Keyword: Data-flow, real-time systems, scheduling theory, embedded systems, software architecture.  
Note: April 1997  Supported, in part, by grants from the Intel and IBM corporations, and the National Science Foundation (grant CCR 9510156).  
Abstract: Steve Goddard Kevin Jeffay Technical Report TR97-007 Department of Computer Science University of North Carolina Chapel Hill, NC 27599-3175 fgoddard, jeffayg@cs.unc.edu Abstract Real-time signal processing applications are commonly designed using a dataflow software architecture. Here we attempt to understand fundamental real-time properties of such an architecture | the Navy's coarse-grain Processing Graph Method (PGM). By applying recent results in real-time scheduling theory to the subset of PGM employed by the ARPA RASSP Synthetic Aperture Radar benchmark application, we identify inherent real-time properties of nodes in a PGM dataflow graph, and demonstrate how these properties can be exploited to perform useful and important system-level analyses such as schedulability analysis, end-to-end latency analysis, and memory requirements analysis. More importantly, we develop relationships between properties such as latency and buffer bounds and show how one may be traded-off for the other. Our results assume only the existence of a simple EDF scheduler and thus can be easily applied in practice. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson, D.P., Tzou, S.Y., Wahbe, R., Govindan, R., Andrews, M., </author> <title> "Support for Live Digital Audio and Video", </title> <booktitle> Proc. of the Tenth International Conference on Distributed Computing Systems, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1990, </year> <pages> pp. 54-61. 35 </pages>
Reference-contexts: Whereas RTP/C models processes as sporadic tasks, our paradigm uses the Rate-Based Execution (RBE) process model of [10] to more accurately predict processor demand. (The RBE process model is a generalization of sporadic tasks and the Linear-Bounded Arrival Process (LBAP) model employed by the DASH system <ref> [1] </ref>.) Unlike the RTP/C paradigm, PGM supports And nodes (nodes that are eligible to execute only when all of the input queues are over threshold), which introduces different execution properties than those of the RTP/C paradigm. The SDF graphs of Ptolemy utilize a subset of the features supported by PGM.
Reference: [2] <author> Baruah, S., Howell, R., Rosier, L., </author> <title> "Algorithms and Complexity Concerning the Preemptively Scheduling of Periodic, Real-Time Tasks on One Processor" Real-Time Systems Journal , Vol. </title> <type> 2, </type> <year> 1990, </year> <pages> pp. 301-324. </pages>
Reference-contexts: It follows that satisfying (5.6) is a sufficient condition for feasibility. 14 Note that if the cumulative processor utilization for a graph is strictly less than one (i.e., P n x i e i then condition (5.6) can be evaluated efficiently (in pseudo-polynomial time) using techniques developed in <ref> [2] </ref> and applied in [3] and [11].
Reference: [3] <author> Baruah, S., Mok, A., Rosier, L., </author> <title> "Preemptively Scheduling Hard-Real-Time Sporadic Tasks With One Processor" Proc. </title> <booktitle> 11th IEEE Real-Time Systems Symp., </booktitle> <address> Lake Buena Vista, FL, </address> <month> Dec. </month> <year> 1990, </year> <pages> pp. 182-190. </pages>
Reference-contexts: that satisfying (5.6) is a sufficient condition for feasibility. 14 Note that if the cumulative processor utilization for a graph is strictly less than one (i.e., P n x i e i then condition (5.6) can be evaluated efficiently (in pseudo-polynomial time) using techniques developed in [2] and applied in <ref> [3] </ref> and [11].
Reference: [4] <author> Buck, J., Ha, S., Lee, E.A., Messerschmitt, D.G., "Ptolemy: </author> <title> A Framework For Simulating and Prototyp-ing Heterogeneous Systems", </title> <journal> International Journal of computer Simulation, special issue on Simulation Software Development , Vol. </journal> <volume> 4, </volume> <year> 1994. </year>
Reference-contexts: Section 8. 2 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok [14, 15], Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [12] supported by the Ptolemy system <ref> [4] </ref>, and the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [8]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs. The dataflow graphs of the SARTOR project have different (and incompatible) node execution rules from PGM.
Reference: [5] <author> Berry, G., Cosserat, L., </author> <title> "The ESTEREL Synchronous Programming Language and its Mathematical Semantics", </title> <booktitle> Lecture Notes in Computer Science, Vol. 197 Seminar on Concurrency, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: An execution paradigm that supports generic rates of the form x executions in y time units is required to analyze the execution of generic dataflow graphs. We assume the strong synchrony hypothesis of <ref> [5] </ref> to introduce the concept of node execution rates. Under the synchrony hypothesis, we assume the graph executes on an infinitely fast machine.
Reference: [6] <author> Gerber, R., Seongsoo, H., Saksena, M., </author> <title> "Guaranteeing End-to-End Timing Constraints by Calibrating Intermediate Processes", </title> <booktitle> Proc. of IEEE Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: In addition to supporting 2 a more general dataflow model, our research differs from [12] in that we use dynamic, real-time, scheduling techniques rather than creating static schedules. Our latency analysis is related to the work of Gerber et al. in guaranteeing end-to-end latency requirements on a single processor <ref> [6] </ref>. Our work differs from [6] in that we cannot assume a periodic task model and that our node execution rates are derived from the input data rate and the graph. Moreover, unlike [6], we do not introduce new (additional) tasks for the purpose of synchronization. 3 Dataflow Model This section <p> Our latency analysis is related to the work of Gerber et al. in guaranteeing end-to-end latency requirements on a single processor <ref> [6] </ref>. Our work differs from [6] in that we cannot assume a periodic task model and that our node execution rates are derived from the input data rate and the graph. Moreover, unlike [6], we do not introduce new (additional) tasks for the purpose of synchronization. 3 Dataflow Model This section describes the features of PGM <p> related to the work of Gerber et al. in guaranteeing end-to-end latency requirements on a single processor <ref> [6] </ref>. Our work differs from [6] in that we cannot assume a periodic task model and that our node execution rates are derived from the input data rate and the graph. Moreover, unlike [6], we do not introduce new (additional) tasks for the purpose of synchronization. 3 Dataflow Model This section describes the features of PGM used in the SAR graph. For a complete description of PGM, see [16].
Reference: [7] <author> Goddard, S. </author> <title> "Analyzing the Real-Time Properties of a Dataflow Execution Paradigm using a Synthetic Aperture Radar Application", To appear in: </title> <booktitle> Proc. of IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: We assume the strong synchrony hypothesis of [5] to introduce the concept of node execution rates. Under the synchrony hypothesis, we assume the graph executes on an infinitely fast machine. Hence, each node takes 2 We thank the anonymous reviewer of <ref> [7] </ref> who suggested this proof and the proof of Lemma 5.3. 9 "no time" to execute and data passes from source to sink node instantaneously. The synchrony hypothesis lets us define rate executions in the absence of scheduling algorithms and deadlines. Node execution rates are defined as follows. Definition 5.6.
Reference: [8] <author> Jeffay, K., </author> <title> "The Real-Time Producer/Consumer Paradigm: A paradigm for the construction of efficient, predictable real-time systems", </title> <booktitle> Proc. of the ACM/SIGAPP Symposium on Applied Computing , Indianapolis, IN, </booktitle> <month> February </month> <year> 1993, </year> <pages> pp. 796-804. </pages>
Reference-contexts: by the analysis techniques applied to three different dataflow models: the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok [14, 15], Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [12] supported by the Ptolemy system [4], and the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay <ref> [8] </ref>. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs. The dataflow graphs of the SARTOR project have different (and incompatible) node execution rules from PGM.
Reference: [9] <author> Jeffay, K., </author> <title> "On Latency Management in Time-Shared Operating Systems", </title> <booktitle> Proc. of the 11 th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> Seatle, WA, </address> <month> May </month> <year> 1994, </year> <pages> pp. 86-90. </pages>
Reference-contexts: We will exploit this fact, similarly to the way Jeffay did in <ref> [9] </ref>, to bound a sample's latency. We can use the release point derived with the strong synchrony hypothesis and add d i to get the time at which N i will have completed execution | even if this time is less than the actual release time plus d i .
Reference: [10] <author> Jeffay, K., Bennett, D. </author> <title> "A Rate-Based Execution Abstraction For Multimedia Computing", </title> <journal> ACM Multimedia Systems, </journal> <note> to appear. </note>
Reference-contexts: However, our execution model is capable of supporting much more sophisticated data flow models than RTP/C. Whereas RTP/C models processes as sporadic tasks, our paradigm uses the Rate-Based Execution (RBE) process model of <ref> [10] </ref> to more accurately predict processor demand. (The RBE process model is a generalization of sporadic tasks and the Linear-Bounded Arrival Process (LBAP) model employed by the DASH system [1].) Unlike the RTP/C paradigm, PGM supports And nodes (nodes that are eligible to execute only when all of the input queues <p> If we schedule the tasks using the preemptive earliest deadline first (EDF) scheduling algorithm [13], we can verify the real-time requirements of the application using the techniques Jeffay has developed for the Rate Based Execution (RBE) model <ref> [10] </ref>. RBE is a general task model that consists of a collection of independent processes specified by four parameters: (x; y; d; e). The pair (x; y) represents the execution rate of a RBE task where x is the number of executions expected in an interval of length y.
Reference: [11] <author> Jeffay, K., Stone, D., </author> <title> "Accounting for Interrupt Handling Costs in Dynamic Priority Task Systems", </title> <booktitle> Proc. of the 14 th IEEE Symposium on Real-Time Systems, </booktitle> <address> Durham, NC, </address> <year> 1993, </year> <pages> pp. 212-221. </pages>
Reference-contexts: (5.6) is a sufficient condition for feasibility. 14 Note that if the cumulative processor utilization for a graph is strictly less than one (i.e., P n x i e i then condition (5.6) can be evaluated efficiently (in pseudo-polynomial time) using techniques developed in [2] and applied in [3] and <ref> [11] </ref>.
Reference: [12] <author> Lee, E.A., Messerschmitt, D.G., </author> <title> "Static Scheduling of Synchronous Data Flow Programs for Digital Signal Processing", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-36, No. 1, </volume> <month> January </month> <year> 1987, </year> <pages> pp. 24-35. </pages>
Reference-contexts: 1 Introduction Signal processing algorithms are often defined in the literature using large grain dataflow graphs <ref> [12] </ref>: directed graphs in which a node is a sequential program that executes from start to finish in isolation (i.e., without synchronization), and the graph edges depict the flow of data from one node to the next. Thus, an edge represents a producer/consumer relationship between two nodes. <p> We summarize our contributions in Section 8. 2 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok [14, 15], Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs <ref> [12] </ref> supported by the Ptolemy system [4], and the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [8]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs. <p> The SDF graphs of Ptolemy utilize a subset of the features supported by PGM. In addition to supporting 2 a more general dataflow model, our research differs from <ref> [12] </ref> in that we use dynamic, real-time, scheduling techniques rather than creating static schedules. Our latency analysis is related to the work of Gerber et al. in guaranteeing end-to-end latency requirements on a single processor [6].
Reference: [13] <author> Liu, C., Layland, J., </author> <title> "Scheduling Algorithms for multiprogramming in a Hard-Real-Time Environment", </title> <journal> Journal of the ACM , Vol 30., </journal> <month> Jan. </month> <year> 1973, </year> <pages> pp. 46-61. </pages>
Reference-contexts: Nevertheless, it is appealing to implement each node as a task that is released when the input queue goes over threshold. If we schedule the tasks using the preemptive earliest deadline first (EDF) scheduling algorithm <ref> [13] </ref>, we can verify the real-time requirements of the application using the techniques Jeffay has developed for the Rate Based Execution (RBE) model [10]. RBE is a general task model that consists of a collection of independent processes specified by four parameters: (x; y; d; e). <p> be? How does d i affect latency? We start by observing that if, 8i : 1 i n, d i = y i and the graph is not schedulable (i.e., (5.6) returns a negative result) then the processor is overloaded since (5.6) reduces to the Lui & Layland feasibility test <ref> [13] </ref> and we get 1 &lt; i=1 y i . We also observe that increasing d i &gt; y i will not improve latency and, as we will show later, increases buffer requirements.
Reference: [14] <author> Mok, A.K., Sutanthavibul, S., </author> <title> "Modeling and Scheduling of Dataflow Real-Time Systems", </title> <booktitle> Proc. of the IEEE Real-Time Systems Symposium, </booktitle> <address> San Diego, CA, </address> <month> Dec. </month> <year> 1985, </year> <pages> pp. 178-187. </pages>
Reference-contexts: We summarize our contributions in Section 8. 2 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok <ref> [14, 15] </ref>, Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [12] supported by the Ptolemy system [4], and the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [8]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs.
Reference: [15] <author> Mok, A. K., et al., </author> <title> "Synthesis of a Real-Time System with Data-driven Timing Constraints", </title> <booktitle> Proc. of the IEEE Real-Time Systems Symposium, </booktitle> <address> San Jose, CA, </address> <month> Dec. </month> <year> 1987, </year> <pages> pp. 133-143. </pages>
Reference-contexts: We summarize our contributions in Section 8. 2 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok <ref> [14, 15] </ref>, Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [12] supported by the Ptolemy system [4], and the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [8]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs.
Reference: [16] <editor> Processing Graph Method Specification, </editor> <title> prepared by the Naval Research Laboratory for use by the Navy Standard Signal Processing Program Office (PMS-412), </title> <note> Version 1.0, </note> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Unfortunately, without the application of real-time scheduling theory to dataflow methodologies and a precise execution model, system architects have not been able to make these trade-offs in real-time dataflow systems. Even the Navy's own dataflow methodology, Processing Graph Method (PGM) <ref> [16] </ref>, lacks real-time analysis techniques to support making cost trade-offs or to verify latency requirements. This is somewhat 1 surprising since PGM is used to develop real-time, embedded, anti-submarine warfare (ASW) applications for the AN/UYS-2A (the Navy's standard signal processor). <p> Moreover, unlike [6], we do not introduce new (additional) tasks for the purpose of synchronization. 3 Dataflow Model This section describes the features of PGM used in the SAR graph. For a complete description of PGM, see <ref> [16] </ref>. In PGM, a system is expressed as a directed graph of large grain nodes (processing functions) and edges (logical communication channels).
Reference: [17] <author> Zuerndorfer, B., Shaw, </author> <title> G.A., "SAR Processing for RASSP Application", </title> <booktitle> Proc. of 1 st Annual RASSP Conference, </booktitle> <address> Arlington, VA, </address> <month> August 15-18, </month> <year> 1994. </year> <month> 36 </month>
Reference-contexts: The only essential properties of the SAR graph are those that influence node execution: the produce, consume, and threshold values for each node. For a more detailed description of the processing performed by the SAR benchmark, see <ref> [17] </ref>. The full SAR benchmark cannot execute in real-time on a single processor. Therefore, the RASSP project allocates a portions of the full SAR graph to individual processors. The graph in Figure 1 is one such allocation.
References-found: 17

