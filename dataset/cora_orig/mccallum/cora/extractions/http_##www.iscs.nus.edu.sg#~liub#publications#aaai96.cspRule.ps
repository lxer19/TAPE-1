URL: http://www.iscs.nus.edu.sg/~liub/publications/aaai96.cspRule.ps
Refering-URL: 
Root-URL: 
Email: -liub, joxan-@iscs.nus.sg  
Title: Using Constraints to Model Disjunctions in Rule-Based Reasoning  
Author: Bing Liu and Joxan Jaffar 
Address: Lower Kent Ridge Road, Singapore 119260, Republic of Singapore  
Affiliation: Department of Information Systems and Computer Science National University of Singapore  
Abstract: Rule-based systems have long been widely used for building expert systems to perform practical knowledge intensive tasks. One important issue that has not been addressed satisfactorily is the disjunction, and this significantly limits their problem solving power. In this paper, we show that some important types of disjunction can be modeled with Constraint Satisfaction Problem (CSP) techniques, employing their simple representation schemes and efficient algorithms. A key idea is that disjunctions are represented as constraint variables, relations among disjunctions are represented as constraints, and rule chaining is integrated with constraint solving. In this integration, a constraint variable or a constraint is regarded as a special fact, and rules can be written with constraints and information about constraints. Chaining of rules may trigger constraint propagation, and constraint propagation may cause firing of rules. A prototype system (called CFR) based on this idea has been implemented. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bessiere, C., Freuder, E. C. and Regin, J-C. </author> <year> 1995. </year> <title> Using inference to reduce arc consistency computation, </title> <booktitle> IJCAI-95, </booktitle> <pages> 592-598. </pages>
Reference-contexts: Consistency techniques are characterized by using constraints to remove inconsistent values from the domains of variables. Past research has produced many techniques for such a purpose. The main methods used in practice are arc consistency techniques, e.g., AC-3 (Mackworth 1977), AC-5 (Hentenryck et al, 1992), and AC-7 <ref> (Bessiere et al 1995) </ref>, and their generalizations and specializations (Hentenryck 1989; Hentenryck et al 1992; Liu 1996). For a complete treatment of these methods, please refer to (Mackworth 1977; Mohr & Henderson 1986; Hentenryck 1989; Hentenryck et al 1992; Bessiere et al 1995; Liu 1995; Liu 1996). 3.
Reference: <author> Charniak, E., Riesbeck, C., McDermott, D. and Meehan, J. </author> <year> 1987. </year> <booktitle> Artificial Intelligence Programming, </booktitle> <publisher> Lawrence Erlbaum Associates Inc. </publisher>
Reference-contexts: Let us first look at the inclusive or. For example, "if something is a block or a pyramid, then it is a pointy_object" (adapted from <ref> (Charniak et al 1987) </ref>) can be expressed as follows: IF isa (?x, block) isa (?x, pyramid) THEN add (isa (?x, pointy_object)) where ?x is a variable, and add adds a fact to the WM. This rule, however, cannot be used in a typical rule-based system.
Reference: <author> Christaller, T., di Primio, F., Schnepf, U. and Voss, A. </author> <year> 1992. </year> <title> The AI Workbench BABYLON. </title> <publisher> Academic Press. </publisher>
Reference-contexts: While in forward chaining, backtracking and choice making facilities have to be added, which creates some complications as discussed in Section 3.6. To the best our knowledge, limited work has been done on combining constraint solving with forward chaining rule-based system. BABYLON <ref> (Christaller et al 1992) </ref> is one of the hybrid environments for developing expert systems that has attempted to include constraint solving in its rule-based system. BABYLON provides representation formalisms of objects, rules, Prolog and constraints.
Reference: <author> Hentenryck, P.V. </author> <year> 1989. </year> <title> Constraint Satisfaction in Logic Programming, </title> <publisher> MIT Press. </publisher>
Reference-contexts: Constraint solving has long been integrated with logic programming languages such as Prolog. This integration has resulted in a number of Constraint Logic Programming (CLP) languages (Jaffar & Maher 1994), such as CLP (R) (Jaffar & Lassez, 1987) and Chip <ref> (Hentenryck 1989) </ref>. These languages are primarily used for modeling and solving real-life optimization problems, such as scheduling and resource allocations. However, this work is different from that in CLP in a number of ways. <p> This approach can be described as an iterative procedure of two steps: consistency check and choice making. If a choice is proved to be wrong (when the consistency check returns FALSE), backtracking will be initiated. In the process, the previous state is restored, and an alternative is selected. <ref> (Hentenryck 1989) </ref>. Let us define some choice making functions. Each of them sets up a choice point for later backtracking. The choice functions are also constraints because each value selection will trigger consistency check. <p> A choice stack is used to keep track of the choices that have been made and to remember the information necessary for restoring state upon backtracking. This is similar to CLP languages such as CHIP <ref> (Hentenryck 1989) </ref>. The difference is that each choice here has to remember the facts that have been added to WM after a choice is made. When backtracking comes to the choice, these facts must be removed. <p> A number of systems have been built, and many successful 8 applications have also been reported (Jaffar & Maher 1994). Two representative CLP languages are CLP (R) (Jaffar & Lassez 1987) and CHIP <ref> (Hentenryck 1989) </ref>. These languages are based on Horn clauses and backward chaining. Our work is different from CLP in a number of ways. The main differences are as follows. 1. Our proposed technique is based on forward chaining rather than backward chaining as in CLP languages.
Reference: <author> Hentenryck, P.V., Deville, Y. and Teng, C-M. </author> <year> 1992. </year> <title> "A generic arc consistency algorithm and its specializations," </title> <booktitle> Artificial Intelligence 27, </booktitle> <pages> 291-322. </pages> <address> Ilog Solver, </address> <year> 1992, </year> <title> Reference Manual, ILOG, </title> <address> France. </address>
Reference-contexts: Consistency techniques are characterized by using constraints to remove inconsistent values from the domains of variables. Past research has produced many techniques for such a purpose. The main methods used in practice are arc consistency techniques, e.g., AC-3 (Mackworth 1977), AC-5 <ref> (Hentenryck et al, 1992) </ref>, and AC-7 (Bessiere et al 1995), and their generalizations and specializations (Hentenryck 1989; Hentenryck et al 1992; Liu 1996).
Reference: <author> Jaffar, J. and Lassez, J. </author> <year> 1987. </year> <title> "Constraint logic programming," </title> <booktitle> Proceedings of the Fourteenth Annual ACM Symposium on Principle of Programming Language. </booktitle>
Reference-contexts: The idea of incorporating CSP into a logic-based system is not new. Constraint solving has long been integrated with logic programming languages such as Prolog. This integration has resulted in a number of Constraint Logic Programming (CLP) languages (Jaffar & Maher 1994), such as CLP (R) <ref> (Jaffar & Lassez, 1987) </ref> and Chip (Hentenryck 1989). These languages are primarily used for modeling and solving real-life optimization problems, such as scheduling and resource allocations. However, this work is different from that in CLP in a number of ways. <p> A number of systems have been built, and many successful 8 applications have also been reported (Jaffar & Maher 1994). Two representative CLP languages are CLP (R) <ref> (Jaffar & Lassez 1987) </ref> and CHIP (Hentenryck 1989). These languages are based on Horn clauses and backward chaining. Our work is different from CLP in a number of ways. The main differences are as follows. 1.
Reference: <author> Jaffar, J. and Maher, M. </author> <year> 1994. </year> <title> Constraint logic programming: a survey. </title> <editor> J. </editor> <booktitle> Logic Programming 19, </booktitle> <pages> 503-581. </pages>
Reference-contexts: The idea of incorporating CSP into a logic-based system is not new. Constraint solving has long been integrated with logic programming languages such as Prolog. This integration has resulted in a number of Constraint Logic Programming (CLP) languages <ref> (Jaffar & Maher 1994) </ref>, such as CLP (R) (Jaffar & Lassez, 1987) and Chip (Hentenryck 1989). These languages are primarily used for modeling and solving real-life optimization problems, such as scheduling and resource allocations. However, this work is different from that in CLP in a number of ways. <p> Related Work The most closely related work to our research is constraint logic programming (CLP) <ref> (Jaffar & Maher 1994) </ref> where a considerable amount of research has been done to integrate constraint satisfaction with logic programming. A number of systems have been built, and many successful 8 applications have also been reported (Jaffar & Maher 1994). <p> Work The most closely related work to our research is constraint logic programming (CLP) <ref> (Jaffar & Maher 1994) </ref> where a considerable amount of research has been done to integrate constraint satisfaction with logic programming. A number of systems have been built, and many successful 8 applications have also been reported (Jaffar & Maher 1994). Two representative CLP languages are CLP (R) (Jaffar & Lassez 1987) and CHIP (Hentenryck 1989). These languages are based on Horn clauses and backward chaining. Our work is different from CLP in a number of ways. The main differences are as follows. 1.
Reference: <author> Liu, B. </author> <year> 1995. </year> <title> Increasing functional constraints need to be checked only once, </title> <booktitle> IJCAI-95, </booktitle> <pages> 586-591. </pages>
Reference: <author> Liu, B. and Jaffar, J. </author> <year> 1996. </year> <title> Using Constraints to Model Disjunction in Rule-Based Reasoning. </title> <type> DISCS Technical Report. </type>
Reference-contexts: The reason is that both (1) and (2) could introduce IL. Due to space limitation, we are unable to discuss this further. Interested readers, refer to <ref> (Liu & Jaffar 1996) </ref>. In general, if a rule-based system is unable to detect IL, (1) and (2) should not be allowed. Then, constraints can only appear as consequents of rules, and there will be no backtrack search but only consistency check.
Reference: <author> Liu, B. </author> <year> 1996. </year> <title> An improved generic arc consistency algorithm and its specializations. </title> <booktitle> To Appear in Proceedings of Fourth Pacific Rim Internaional Conference On Artificial Intelligence (PRICAI-96). </booktitle>
Reference-contexts: The reason is that both (1) and (2) could introduce IL. Due to space limitation, we are unable to discuss this further. Interested readers, refer to <ref> (Liu & Jaffar 1996) </ref>. In general, if a rule-based system is unable to detect IL, (1) and (2) should not be allowed. Then, constraints can only appear as consequents of rules, and there will be no backtrack search but only consistency check.
Reference: <author> Lucas, P. and Van Der Gaag, L. </author> <year> 1991. </year> <title> Principles of Expert Systems, </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Mackworth, A.K. </author> <year> 1977. </year> <title> "Consistency in networks of relations," </title> <booktitle> Artificial Intelligence 8, </booktitle> <pages> 99-118. </pages>
Reference-contexts: Consistency techniques are characterized by using constraints to remove inconsistent values from the domains of variables. Past research has produced many techniques for such a purpose. The main methods used in practice are arc consistency techniques, e.g., AC-3 <ref> (Mackworth 1977) </ref>, AC-5 (Hentenryck et al, 1992), and AC-7 (Bessiere et al 1995), and their generalizations and specializations (Hentenryck 1989; Hentenryck et al 1992; Liu 1996). <p> Introducing Choice Making and Backtracking The consistency techniques used above for constraint solving are all based on arc consistency (Hentenryck et al 1992; Liu 1995). Arc consistency alone may not be 5 sufficient to solve a CSP because arc consistency does not guarantee global consistency <ref> (Mackworth 1977) </ref>. Then, a combination of backtrack search and consistency check is required. This approach can be described as an iterative procedure of two steps: consistency check and choice making. If a choice is proved to be wrong (when the consistency check returns FALSE), backtracking will be initiated.
Reference: <author> Mackworth, A.K. </author> <year> 1992. </year> <title> "The logic of constraint satisfaction," </title> <booktitle> Artificial Intelligence 58, </booktitle> <pages> 3-20. </pages>
Reference: <author> Mohr, R. and Henderson, T. </author> <year> 1986. </year> <title> "Arc and path consistency revisited," </title> <booktitle> Artificial Intelligence 28, </booktitle> <pages> 225-233. </pages>
Reference: <author> Newell, A. </author> <year> 1973. </year> <title> Production systems: models for control structure, In Visual Information Processing, W.G. </title> <editor> Chase (Eds), </editor> <publisher> Academic Press, </publisher> <year> 1973. </year>
References-found: 15

