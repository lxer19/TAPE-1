URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-94-18.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: Optimized Computer-Generated Motions for Animation  
Author: Jeff Goldsmith 
Degree: Thesis by  In Partial Fulfillment of the Requirements for the Degree of Masters of Science  
Date: 1994  
Address: Pasadena, California  
Affiliation: California Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [Bartels] <author> Bartels, R. H., Beatty, J. C., and Barsky, B. A., </author> <title> An Introduction to the Use of Splines in Computer Graphics, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Since these functions are all cubics, computing them is quite fast; a computer can often do it in real time. For far more detail about spline techniques, see <ref> [Bartels] </ref>. 1.2.3 Shortcomings Cubic interpolants have some drawbacks. Generally, not all of the nice properties mentioned above can be had at once; some have to be traded off in exchange for others.
Reference: [Barr] <author> Barr, A. H., </author> <title> "The Einstein Summation Notation," </title> <type> Technical Report, </type> <institution> Computer Graphics Group, California Institute of Technology, Pasadena, California. </institution>
Reference-contexts: Throughout this work, we have represented equations in either the commonly-used vector notation or in Einstein Summation Notation (ESN). Almost all equations with subscripted symbols use ESN. A brief description of that notation is in Appendix A1. For further information, please see <ref> [Barr] </ref>. <p> The constants and rules described above are only a small part of the ESN lore, but are the symbols and identities used here. For more information, see <ref> [Barr] </ref>.
Reference: [Barr 81] <author> Barr, A. H., </author> <title> "Superquadrics and Angle-Preserving Transformations," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 1. No. 1, </volume> <pages> pp. 11-23, </pages> <month> January, </month> <year> 1981. </year>
Reference-contexts: The restrictions we chose are that all objects are composed of simple geometric primitives, such as ellipsoids, cubes, and superquadrics. (See <ref> [Barr 81] </ref>.) They must be connected at fixed points, around which the bodies are free to rotate in all directions, but they cannot separate.
Reference: [Barr 92] <author> Barr, A. H., Currin, B., Gabriel, S., and Hughes, J. F., </author> <title> "Smooth Interpolation of Orientations with Angular Velocity Constraints Using Quaternions," </title> <booktitle> SIGGRAPH '92 Conference Proceedings, </booktitle> <pages> pp. 313-320, </pages> <month> July, </month> <year> 1992. </year>
Reference-contexts: We use as tools the techniques for representing rotations disseminated by Ken Shoemake [Shoemake] 2 1.2 Classical Computer Graphics Motion and have attempted to instantiate or generalize the work of Gabriel and Kajiya [Gabriel] and Barr et al. <ref> [Barr 92] </ref>. Throughout this work, we have represented equations in either the commonly-used vector notation or in Einstein Summation Notation (ESN). Almost all equations with subscripted symbols use ESN. A brief description of that notation is in Appendix A1. For further information, please see [Barr]. <p> Perhaps the biggest drawback to cubic polynomial interpolation and basic splining techniques in general is that they are designed for interpolating within Euclidean space. If the space in which interpolation is done is not Euclidean, other techniques need to be found. See [Shoemake], <ref> [Barr 92] </ref>, and [Gabriel] for some approaches to splining in non-Euclidean spaces. <p> We shall try to penalize wasted motion; use of covariant derivatives will help measure wastage. 6 1.3 Newer Animation Techniques and Background <ref> [Barr 92] </ref> considered the use of the covariant second derivative for optimization of rotation of a single body. <p> The space of degrees of freedom of articulated bodies meets their criteria for spaces in which to compute splines, but we chose to consider energy functions other than the one necessary for cubic splines. In 1992, Barr et al. <ref> [Barr 92] </ref> considered the problem of using optimization to interpolate rotations of a single body.
Reference: [Barzel] <author> Barzel, R., </author> <title> Physically-Based Modeling for Computer Graphics: A Structured Approach, </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1992. </year>
Reference-contexts: Perhaps this is another feature of the realism inherent in the approach. For more information on this subject, see <ref> [Barzel] </ref>. Our approach aims to combine some of the features of each of physically-based modeling and standard modeling.
Reference: [Do Carmo] <author> Do Carmo, M. P., </author> <title> Differential Geometry of Curves and Surfaces, </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, New Jersey, </address> <year> 1976. </year>
Reference-contexts: We shall try to penalize wasted motion; use of covariant derivatives will help measure wastage. 6 1.3 Newer Animation Techniques and Background [Barr 92] considered the use of the covariant second derivative for optimization of rotation of a single body. For more information about covariant derivatives, see <ref> [Do Carmo] </ref> or [Misner]. 7 Chapter 2 Optimized Computer-Generated Motion 2.1 The Scope of Problems We Address Creating a technique for designing motion for any possible set of objects is an enormous task. Computer animation is used for animating objects as diverse as atoms, spacecraft, planets, dogs, and robots.
Reference: [Gabriel] <author> Gabriel, S., and Kajiya, J., </author> <title> "Spline Interpolation in Curved Space," </title> <booktitle> in course notes, "State of the Art in Image Synthesis," SIGGRAPH, </booktitle> <year> 1985. </year>
Reference-contexts: We also build on the work of other researchers who have considered this and related problems. We use as tools the techniques for representing rotations disseminated by Ken Shoemake [Shoemake] 2 1.2 Classical Computer Graphics Motion and have attempted to instantiate or generalize the work of Gabriel and Kajiya <ref> [Gabriel] </ref> and Barr et al. [Barr 92]. Throughout this work, we have represented equations in either the commonly-used vector notation or in Einstein Summation Notation (ESN). Almost all equations with subscripted symbols use ESN. A brief description of that notation is in Appendix A1. For further information, please see [Barr]. <p> Perhaps the biggest drawback to cubic polynomial interpolation and basic splining techniques in general is that they are designed for interpolating within Euclidean space. If the space in which interpolation is done is not Euclidean, other techniques need to be found. See [Shoemake], [Barr 92], and <ref> [Gabriel] </ref> for some approaches to splining in non-Euclidean spaces. <p> In a sense, this measure is the "tension" of a curve, which is why cubic polynomials and not generally higher-degree polynomials are used for interpolation|the cubic gives the "best" interpolant, at least with respect to this one measure. <ref> [Gabriel] </ref> gives the general form for curves that minimize tension in other spaces. Usually, this form simplifies only to a differential equation that must be solved for each interpolating function. <p> Most prior work centered on finding schemes to interpolate characteristics of single bodies. Shoemake [Shoemake] was probably the first to consider how to interpolate rotations of a single body. He used a spline in the space of quaternions to do this. Gabriel and Kajiya <ref> [Gabriel] </ref> extended this idea to the general case, deriving the general form of splines for most spaces.
Reference: [Gill] <author> Gill, P. E., Murray, W., and Wright, M. H., </author> <title> Practical Optimization, </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1981. </year>
Reference-contexts: That point is a local minimum within the constrained search space. Many algorithms exist for attempting to solve optimization problems. For a more thorough description of some of the simpler ones and a taxonomy of optimization problems, see section 2.4 or <ref> [Gill] </ref>. 1.3.5 Spacetime Constraints Spacetime Constraints is a technique for solving problems similar to the ones we are considering. Objects are constrained to be at given places at given times, and a motion path is constructed using optimization. <p> If the gradient cannot be computed symbolically, which is often the case, it must be computed numerically. The same is true for higher derivatives. In their notes about conjugate gradient methods, Gill et al. <ref> [Gill] </ref> claim that a reasonable number of iterations for that method is 5n where n is the number of dimensions in the problem. The bulk of the computation at each step is the computation of the gradient. If this needs be approximated numerically, it is an O (n) operation. <p> As a consequence, the solution found by penalty-method optimizers will be slightly beyond the edge of the feasible search space. One cannot ensure that the solution point is a tiny bit beyond the edge by increasing the size of the penalty; that does not work. (See <ref> [Gill] </ref> for details.) In general, penalty methods also require the adjustment of penalty weights, which can be a very time-consuming and unrewarding process. The other general approach, for enforcing hard constraints, is the method of Lagrange multipliers. <p> The objective function is augmented by adding a term that is the dot product of the constraint 22 2.4 Solving the Optimization Problem function (which produces the size of the violation of the constraint) and a set of free parameters, which are to be maximized. See <ref> [Gill] </ref> for much more detail on Lagrange multipliers. A major drawback of this approach is that if the initial estimates of the multipliers are not accurate, most solvers will be unable to find a minimum.
Reference: [Lamport] <author> Lamport, L., </author> <title> LaTeX, A Document Preparation System, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1986. </year>
Reference: [Minos] <author> Murtagh, B. A., and Saunders, M. A., </author> <title> MINOS 5.1 User's Guide, </title> <type> Technical Report SOL 83-20R, </type> <institution> Systems Optimization Laboratory, Department of Operations Research, Stanford University, Stanford, California, </institution> <month> December </month> <year> 1983. </year>
Reference-contexts: Better solvers have somewhat better asymptotic time complexity, but they are not a panacea. Complicated methods are hard to implement; the subtleties of programming an SQP solver are notorious. Several such solvers are commercially available; see <ref> [Minos] </ref> and [NAG] for details of two of them. The faster algorithms have a hidden drawback. The implementation of some of our objective functions is not difficult, but their evaluation is often difficult to do by hand, so unit-testing them is tricky.
Reference: [Misner] <author> Misner, C. W., Thorne, K. S., and Wheeler, J. A., </author> <title> Gravitation, </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1973. </year>
Reference-contexts: For more information about covariant derivatives, see [Do Carmo] or <ref> [Misner] </ref>. 7 Chapter 2 Optimized Computer-Generated Motion 2.1 The Scope of Problems We Address Creating a technique for designing motion for any possible set of objects is an enormous task. Computer animation is used for animating objects as diverse as atoms, spacecraft, planets, dogs, and robots.
Reference: [NAG] <author> Numerical Applications Group, </author> <title> NAG Fortran Library, </title> <publisher> NAG Ltd, Oxford, </publisher> <address> UK, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Better solvers have somewhat better asymptotic time complexity, but they are not a panacea. Complicated methods are hard to implement; the subtleties of programming an SQP solver are notorious. Several such solvers are commercially available; see [Minos] and <ref> [NAG] </ref> for details of two of them. The faster algorithms have a hidden drawback. The implementation of some of our objective functions is not difficult, but their evaluation is often difficult to do by hand, so unit-testing them is tricky.
Reference: [Press] <editor> Press et al. </editor> <title> Numerical Recipes, </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1986. </year>
Reference: [Shoemake] <author> Shoemake, K., </author> <title> "Animating Rotation with Quaternion Curves," </title> <booktitle> SIGGRAPH '85 Conference Proceedings, </booktitle> <pages> pp. 245-254, </pages> <month> July, </month> <year> 1985. </year>
Reference-contexts: We also build on the work of other researchers who have considered this and related problems. We use as tools the techniques for representing rotations disseminated by Ken Shoemake <ref> [Shoemake] </ref> 2 1.2 Classical Computer Graphics Motion and have attempted to instantiate or generalize the work of Gabriel and Kajiya [Gabriel] and Barr et al. [Barr 92]. Throughout this work, we have represented equations in either the commonly-used vector notation or in Einstein Summation Notation (ESN). <p> Perhaps the biggest drawback to cubic polynomial interpolation and basic splining techniques in general is that they are designed for interpolating within Euclidean space. If the space in which interpolation is done is not Euclidean, other techniques need to be found. See <ref> [Shoemake] </ref>, [Barr 92], and [Gabriel] for some approaches to splining in non-Euclidean spaces. <p> Usually, this form simplifies only to a differential equation that must be solved for each interpolating function. They also consider the problem of splining in the space of rotations. 1.3.3 Quaternions Until <ref> [Shoemake] </ref>, in the world of computer graphics, nearly all rotations were described as a set of three successive rotations around the coordinate axes. Interpolation within that space is quite difficult; such problems as gimbal-lock and the presence of poles are common. <p> A rotation of around an axis v can be represented by the quaternion (cos (=2); sin (=2)v). We shall usually use quaternions to represent rotations. Some details of quaternion arithmetic are in Appendix C; more detail is available in <ref> [Shoemake] </ref> and [Shoemake 89]. 1.3.4 Constrained Optimization Numerical constrained optimization is a technique for finding a local minimum of a function within a space bounded by constraints. <p> Since our methods apply to the larger set, they are also applicable to single bodies. Most prior work centered on finding schemes to interpolate characteristics of single bodies. Shoemake <ref> [Shoemake] </ref> was probably the first to consider how to interpolate rotations of a single body. He used a spline in the space of quaternions to do this. Gabriel and Kajiya [Gabriel] extended this idea to the general case, deriving the general form of splines for most spaces. <p> That is, ^v rotated = q ^v q 1 (C:7) Rotation by quaternion is associative. That is, (pq)^v (pq) 1 = p (q ^v q 1 )p 1 (C:8) For much more about quaternions, see <ref> [Shoemake] </ref> or [Shoemake 89]. 36
Reference: [Shoemake 89] <author> Shoemake, K., </author> <title> "Quaternion Calculus for Animation," </title> <note> in course notes "Math for SIG-GRAPH," SIGGRAPH, </note> <year> 1989. </year>
Reference-contexts: A rotation of around an axis v can be represented by the quaternion (cos (=2); sin (=2)v). We shall usually use quaternions to represent rotations. Some details of quaternion arithmetic are in Appendix C; more detail is available in [Shoemake] and <ref> [Shoemake 89] </ref>. 1.3.4 Constrained Optimization Numerical constrained optimization is a technique for finding a local minimum of a function within a space bounded by constraints. <p> That is, ^v rotated = q ^v q 1 (C:7) Rotation by quaternion is associative. That is, (pq)^v (pq) 1 = p (q ^v q 1 )p 1 (C:8) For much more about quaternions, see [Shoemake] or <ref> [Shoemake 89] </ref>. 36
Reference: [Witkin] <author> Witkin, A., and Kass, M., </author> <title> "Spacetime Constraints", </title> <booktitle> SIGGRAPH '88 Conference Proceedings, </booktitle> <pages> pp. 159-168, </pages> <month> August, </month> <year> 1988. </year>
Reference-contexts: Objects are constrained to be at given places at given times, and a motion path is constructed using optimization. In <ref> [Witkin] </ref>, Witkin and Kass consider some motion path criteria and use as an example a complicated articulated body. In the last paragraph of that paper, the authors state that they had only begun to scratch the surface of ways to move bodies within a scene. <p> Ballerinas, for example, often attempt to position their limbs to create the appearance of straight lines and to be parallel to their direction of travel. 24 3.3 Conclusions 3.2.2 Gravity and Obstacles We did not pursue much interaction between moving bodies and their environment. <ref> [Witkin] </ref> found that this was a very rewarding direction to pursue; a complete system ought to be able to include these effects. 3.2.3 Something done with Kinetic Energy We discovered that minimization of kinetic energy by itself produced uninteresting motion. <p> A very curved path might be best replaced with two cubic pieces. Another measure might be found by looking at the coefficients of the cubics. Wiggles in the computed motion path might suggest that more resolution is necessary in the area around the wiggles. 3.3 Conclusions <ref> [Witkin] </ref> considered using optimization to plan motion paths for complex objects within environments. They found that their technique produced very interesting animation, particularly if constraints were chosen carefully. We have found that the choice of objective function within this scheme is important as well.
References-found: 16

