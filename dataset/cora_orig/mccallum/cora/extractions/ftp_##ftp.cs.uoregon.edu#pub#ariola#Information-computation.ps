URL: ftp://ftp.cs.uoregon.edu/pub/ariola/Information-computation.ps
Refering-URL: http://www.cs.uoregon.edu/~ariola/publications.html
Root-URL: http://www.cs.uoregon.edu
Email: email: ariola@cs.uoregon.edu  email: jwk@cwi.nl  
Title: Lambda Calculus with Explicit Recursion  
Author: Zena M. Ariola Jan Willem Klop and 
Keyword: Lambda Graph Rewriting" [AK94].  
Address: OR 97401, USA  P.O. Box 94079, 1090 GB Amsterdam, The Netherlands  Boelelaan 1081a, 1081 HV Amsterdam  
Affiliation: Computer and Information Science Department University of Oregon. Eugene,  CWI,  Department of Mathematics and Computer Science Vrije Universiteit, De  
Abstract: This paper is concerned with the study of -calculus with explicit recursion, namely of cyclic -graphs. The starting point is to treat a -graph as a system of recursion equations involving -terms, and to manipulate such systems in an unrestricted manner, using equational logic, just as is possible for first-order term rewriting. Surprisingly, now the confluence property breaks down in an essential way. Confluence can be restored by introducing a restraining mechanism on the `substitution' operation. This leads to a family of -graph calculi, which can be seen as an extension of the family of -calculi (-calculi with explicit substitution). While the -calculi treat the let-construct as a first-class citizen, our calculi support the letrec, a feature that is essential to reason about time and space behavior of functional languages and also about compilation and optimizations of programs. Keywords & Phrases: lambda calculus, recursion, infinitary lambda calculus, term graph rewriting. Note: The research of the first author is supported by NSF grant CCR-94-10237. The research of the second author is partially supported by ESPRIT BRA-6454 Confer. Further support was provided by ESPRIT Working Group 6345 Semagraph. A shorter version of this paper appears in the Proceedings of LICS 94 as "Cyclic 
Abstract-found: 1
Intro-found: 1
Reference: <author> 6454-CONFER. </author> <title> Funding for this work has further been provided by the ESPRIT Working Group 6345 Semagraph. </title>
Reference: <author> We thank Femke van Raamsdonk and Vincent van Oostrom for introducing us to interaction nets, </author> <title> Stefan Blom for scrutinizing several proofs, Amr Sabry for stimulating discussions about a draft of this paper. We also thank the anonymous referees for their useful comments. </title> <editor> References [AA93] Z. M. Ariola and Arvind. </editor> <title> Graph rewriting systems for efficient compilation. </title>


References-found: 2

