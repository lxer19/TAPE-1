URL: http://www.csl.sri.com/~gong/papers/auth-metrics.ps.gz
Refering-URL: http://www.csl.sri.com/~gong/papers/pubs93.html
Root-URL: 
Title: Lower Bounds on Messages and Rounds for Network Authentication Protocols  
Author: Li Gong 
Address: 333 Ravenswood Avenue Menlo Park, California 94025 U.S.A.  
Affiliation: SRI International Computer Science Laboratory  
Abstract: Research in authentication protocols has largely focused on developing and analyzing protocols that are secure against certain types of attacks. There is little and only scattered discussion on protocol efficiency. This paper presents results on the lower bounds on the numbers of messages and rounds required for network authentication. For each proven lower bound, an authentication protocol achieving the bound is also given, thus proving that the bound is a tight bound if the given optimal protocol is secure. 
Abstract-found: 1
Intro-found: 1
Reference: [Birrell 85] <author> A.D. Birrell, </author> <title> "Secure Communications Using Remote Procedure Calls," </title> <journal> ACM Transactions on Computer Systems, Vol.3, </journal> <volume> No.1, </volume> <month> February </month> <year> 1985, </year> <month> pp.1-14. </month>
Reference: [Bird 93] <author> B. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva, and M. Yung, </author> <title> "Systematic Design of a Family of Attack-Resistant Authentication Protocols," </title> <journal> to appear in IEEE Journal on Selected Areas in Communications, </journal> <year> 1993. </year>
Reference: [Burrows 89] <author> M. Burrows, M. Abadi, and R.M. Needham, </author> <title> "A Logic for Authentication," </title> <note> DEC System Research Center Technical Report No. 39, </note> <month> February </month> <year> 1989. </year>
Reference-contexts: Such a key whose "goodness" remains unconfirmed until it is further used is called an "uncertified key" <ref> [Burrows 89, p.32] </ref>. We discuss its usage in section 5. 2.2 Settings There are two important setting parameters to consider. The first parameter is the mechanism each participant uses to establish the freshness of messages. Broadly speaking, there are two well-known mechanisms. <p> However, in the case of using public-key systems, letting clients be involved in choosing the keys can improve security, because S no longer has to know all the secrets. 2.3 Goals The goals of authentication have been carefully studied, and a protocol usually falls in one of two levels <ref> [Burrows 89] </ref>. We will briefly discuss other variations in section 4. A protocol at the first level can be viewed as authentication only. <p> Messages. One client needs to choose the key and send it to the other client via the server. Thus two messages is a lower bound. The wide-mouthed-frog protocol <ref> [Burrows 89] </ref> achieves this lower bound. Rounds. <p> encryptions are needed in any particular scenario? Since it has been shown that mutual authentication can be achieved based on one-way hash functions [Gong 89], what is a suitable definition of encryption? Or, is there an optimal sequence of messages in the sense that more and/or higher order of beliefs <ref> [Burrows 89] </ref> can be achieved with the same number of messages? Minimizing interactions with the (probably heavily loaded) server can also be beneficial. Finally, we note that the efficiency of a protocol cannot be fully characterized independently of its implementation details.
Reference: [Denning 81] <author> D.E. Denning and G.M. Sacco, </author> <title> "Timestamps in Key Distribution Protocols," </title> <journal> Communications of the ACM, Vol.24, </journal> <volume> No.8, </volume> <month> August </month> <year> 1981, </year> <month> pp.533-536. </month>
Reference-contexts: We discuss its usage in section 5. 2.2 Settings There are two important setting parameters to consider. The first parameter is the mechanism each participant uses to establish the freshness of messages. Broadly speaking, there are two well-known mechanisms. One is based on synchronized clocks <ref> [Denning 81] </ref> 1 , the other uses nonces [Needham 78]. We discuss the two cases separately. <p> The originator has to notify S of starting the protocol, who then needs to send at least two more messages to the two clients to distribute the temporary key. Thus a lower bound is three messages. The Denning-Sacco protocol <ref> [Denning 81] </ref> achieves this lower bound. Rounds. Key distribution cannot happen before S is notified by the originator, thus two rounds is a lower bound.
Reference: [Diffie 76] <author> W. Diffie and M.E. Hellman, </author> <title> "New Directions in Cryptography," </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> Vol. </volume> <pages> IT-22, </pages> <address> No.6, Novem-ber 1976, pp.644-654. </address>
Reference-contexts: In section 5, we discussed the use of uncertified keys in conventional cryptosystems. Diffie-Hellman key-exchange protocols also use uncertified keys, but in public-key systems. For the two clients to exchange their independently chosen random numbers <ref> [Diffie 76] </ref>, clearly two messages and two rounds are optimal. Again, this is not equivalent to the case of authentication only (AO) because the temporary key is yet uncertified. To certify the temporary key, at least one more message and one more round are needed.
Reference: [Gong 89] <author> L. Gong, </author> <title> "Using One-Way Functions for Authentication," </title> <journal> ACM Computer Communication Review, Vol.19, </journal> <volume> No.5, </volume> <month> October </month> <year> 1989, </year> <month> pp.8-11. </month>
Reference-contexts: Another possibility is to investigate metrics or scenarios other than those already discussed. For example, how many encryptions are needed in any particular scenario? Since it has been shown that mutual authentication can be achieved based on one-way hash functions <ref> [Gong 89] </ref>, what is a suitable definition of encryption? Or, is there an optimal sequence of messages in the sense that more and/or higher order of beliefs [Burrows 89] can be achieved with the same number of messages? Minimizing interactions with the (probably heavily loaded) server can also be beneficial.
Reference: [Gong 92] <author> L. Gong, </author> <title> "A Security Risk of Depending on Synchronized Clocks," </title> <journal> ACM Operating Systems Review, Vol.26, </journal> <volume> No.1, </volume> <month> January </month> <year> 1992, </year> <month> pp.49-53. </month>
Reference-contexts: For a more detailed discussion and more references on the risks of using clocks, see <ref> [Gong 92] </ref>. possible to piggyback a "challenge" in a previous message, as in Kerberos [Neuman 93]. The second parameter is concerned with the question of who chooses the temporary key. We consider three possibilities. One is that the server chooses the key.
Reference: [Gong 93] <author> L. Gong, </author> <title> "Increasing Availability and Security of an Authentication Service," </title> <journal> IEEE Journal on Selected Areas in Communications, Vol.11, </journal> <volume> No.5, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: It is not difficult to check that, with or without handshake, letting the server distribute two previously registered 4 For a discussion of how to use distributed authentication to deal with potentially dishonest servers, see <ref> [Gong 93] </ref>. client public keys is identical in terms of messages and rounds to the case when the server chooses the temporary key (SO).
Reference: [Lakatos 76] <author> I. Lakatos, </author> <title> "Proofs and Refutations," </title> <editor> J. Wor-rall and E. Zahar (Eds.), </editor> <publisher> Cambridge University Press, </publisher> <year> 1976. </year>
Reference-contexts: When we cannot find a published protocol that is optimal for the particular setting, we will provide an example protocol solely to demonstrate the achievability of the lower bound rather 2 It is always debatable as to what constitutes a proof. The essays by Lakatos <ref> [Lakatos 76] </ref> provide excellent philosophical, logical, and historical perspectives of theorem proving.
Reference: [NBS 77] <author> U.S. </author> <title> National Bureau of Standards, "Data Encryption Standard," </title> <type> U.S. </type> <note> Federal Information Processing Standards Publication, FIPS PUB 46, </note> <month> January </month> <year> 1977. </year>
Reference-contexts: We assume that client A is always the originator of the protocol execution, and we call B the responder. Both conventional cryptosystems (e.g., DES <ref> [NBS 77] </ref>) and public-key systems (e.g., RSA [Rivest 78]) are useful in authentication protocols [Needham 78]. We concentrate first on the use of conventional cryptosystems and will analyze the use of public key or mixed-key systems later. Similarly, we start with mutual authentication and will discuss other variations later.
Reference: [Needham 78] <author> R.M. Needham and M.D. Schroeder, </author> <title> "Using Encryption for Authentication in Large Networks of Computers," </title> <journal> Communications of the ACM, Vol.21, </journal> <volume> No.12, </volume> <month> December </month> <year> 1978, </year> <month> pp.993-999. </month>
Reference-contexts: The model of authentication taken here is the common one often found in the literature (e.g., <ref> [Needham 78] </ref>). There are three participants: two clients, denoted by A and B, and an authentication server S via which A and B agree upon a temporary key. We assume that client A is always the originator of the protocol execution, and we call B the responder. <p> We assume that client A is always the originator of the protocol execution, and we call B the responder. Both conventional cryptosystems (e.g., DES [NBS 77]) and public-key systems (e.g., RSA [Rivest 78]) are useful in authentication protocols <ref> [Needham 78] </ref>. We concentrate first on the use of conventional cryptosystems and will analyze the use of public key or mixed-key systems later. Similarly, we start with mutual authentication and will discuss other variations later. <p> The first parameter is the mechanism each participant uses to establish the freshness of messages. Broadly speaking, there are two well-known mechanisms. One is based on synchronized clocks [Denning 81] 1 , the other uses nonces <ref> [Needham 78] </ref>. We discuss the two cases separately. Except for a brief discussion toward the end of the paper, we will not consider settings when one participant relies on clocks and another relies on nonces, because the results of this setting can be derived from the two simpler settings. <p> For example, after initial authentication completes and the clients share a temporary key, the clients may want to perform handshake at a later stage, or perform handshake repeatedly over a period of time <ref> [Needham 78] </ref>. Therefore, it is worthwhile to examine the cost of such independent and possibly partial handshakes with regard to the use of timestamps and nonces, without the possibility of piggybacking handshake on earlier messages. <p> This is reminiscent of one-way authentication <ref> [Needham 78] </ref>, which cannot be done only with nonces. In light of the above observation, perhaps the most economical scheme is to include clock synchronization (if clocks are not already synchronized) as part of the initial authentication and use timestamps in all following communications.
Reference: [Needham 87] <author> R.M. Needham and M.D. Schroeder, </author> <title> "Au--thentication Revisited," </title> <journal> ACM Operating Systems Review, Vol.21, </journal> <volume> No.1, </volume> <month> January </month> <year> 1987, </year> <month> p.7. </month>
Reference-contexts: A ! B: fA; B; T ag K 3.7 Case 7: NB+AO+SO All cases from this point on are nonce-based. We recall the principle that each party concerned with freshness needs to choose a nonce of its own <ref> [Needham 87] </ref>. Messages. Each client has to choose a nonce and send it out, and each expects to receive a message from the server containing its nonce as well as the temporary key; therefore four messages is a lower bound.
Reference: [Neuman 93] <author> B.C. Neuman and S.G. Stubblebine, </author> <title> "A Note on the Use of Timestamps as Nonces," </title> <journal> ACM Operating Systems Review, Vol.27, No.2, </journal> <month> April </month> <year> 1993, </year> <month> pp.10-14. </month>
Reference-contexts: For a more detailed discussion and more references on the risks of using clocks, see [Gong 92]. possible to piggyback a "challenge" in a previous message, as in Kerberos <ref> [Neuman 93] </ref>. The second parameter is concerned with the question of who chooses the temporary key. We consider three possibilities. One is that the server chooses the key. The second is that any one client can choose the key. The third is that both clients participate in choosing the key. <p> For example, in Kerberos if the client's initial message contains a wrong timestamp, the server rejects the request but returns a current timestamp to the client for synchronizing the clock and preparing a subsequent request <ref> [Neuman 93] </ref>. 5 Using Uncertified Keys We now examine the case we excluded earlier: the use of uncertified keys. It does not make sense to exchange uncertified keys when all parties have synchronized clocks, since all that is necessary is to include a timestamp in the key distribution message. <p> There are other considerations that cannot be easily abstracted. For example, approaches using timestamp or verifier-issued timestamps (as nonces) reduce the server states per-connection and thus increase performance <ref> [Neuman 93] </ref>. Also, a protocol that can piggyback its last message on the opening message of a subsequent communication may yield better overall performance than another protocol that cannot piggyback, even if they have the same numbers of messages and rounds.
Reference: [Otway 87] <author> D. Otway and O. Rees, </author> <title> "Efficient and Timely Mutual Authentication," </title> <journal> ACM Operating Systems Review, Vol.21, </journal> <volume> No.1, </volume> <month> January </month> <year> 1987, </year> <month> pp.8-10. </month>
Reference-contexts: Messages. Each client has to choose a nonce and send it out, and each expects to receive a message from the server containing its nonce as well as the temporary key; therefore four messages is a lower bound. A protocol in the style of the Otway-Rees protocol <ref> [Otway 87] </ref> (i.e., 2 nested RPCs) achieves this lower bound: 1. A ! B: A; B; N a 3. S ! B: fS; B; A; K; B; N bg Kbs , 4. B ! A: fS; A; A; K; B; N ag Kas Rounds.
Reference: [Rivest 78] <author> R.L. Rivest, A. Shamir, and L. Adleman, </author> <title> "A Method for Obtaining Digital Signatures and Public-Key Cryptosystems," </title> <journal> Communications of the ACM, Vol.21, No.2, </journal> <month> February </month> <year> 1978, </year> <month> pp.120-126. </month>
Reference-contexts: We assume that client A is always the originator of the protocol execution, and we call B the responder. Both conventional cryptosystems (e.g., DES [NBS 77]) and public-key systems (e.g., RSA <ref> [Rivest 78] </ref>) are useful in authentication protocols [Needham 78]. We concentrate first on the use of conventional cryptosystems and will analyze the use of public key or mixed-key systems later. Similarly, we start with mutual authentication and will discuss other variations later.
Reference: [Yahalom 93] <author> R. Yahalom, </author> <title> "Optimality of Multi-Domain Protocols" (draft), </title> <month> April </month> <year> 1993, </year> <note> to appear in this proceedings. </note>
References-found: 16

