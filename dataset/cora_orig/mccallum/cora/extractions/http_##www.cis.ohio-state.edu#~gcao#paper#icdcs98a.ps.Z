URL: http://www.cis.ohio-state.edu/~gcao/paper/icdcs98a.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~gcao/publications.html
Root-URL: 
Title: A Delay-Optimal Quorum-Based Mutual Exclusion Scheme with Fault-Tolerance Capability O(N Maekawa's algorithm reduces message complexity
Author: Guohong Cao and Mukesh Singhal Yi Deng, Naphtali Rishe, and Wei Sun p 
Keyword: Key words: Quorum, synchronization delay, dis tributed mutual exclusion, fault-tolerance.  
Address: Columbus, OH43201 Miami, FL 33199  
Affiliation: Computer and Information Science School of Computer Science The Ohio-State University Florida International University  
Note: The 18 th International Conference on Distributed Computing Systems,  ity is  performance analysis are provided.  
Email: fgcao,singhalg@cis.ohio-state.edu fdeng,rishen,weisung@fiu.edu  
Date: May 1998  
Abstract: The performance of a mutual exclusion algorithm is measured by the number of messages exchanged per critical section execution and the delay between successive executions of the critical section. There is a message complexity and synchronization delay tradeoff in mutual exclusion algorithms. Lamport's algorithm and Ricart-Agrawal algorithm both have a synchronization delay of T , but their message complex N); however, it increases the synchronization delay to 2T . After Maekawa's algorithm, many quorum-based mutual exclusion algorithms have been proposed to reduce message complexity or increase the resiliency to site and communication link failures. Since these algorithms are Maekawa-type algorithms, they also suffer from long synchronization delay 2T . In this paper, we propose a delay-optimal quorum-based mutual exclusion algorithm which reduces the synchronization delay to T and still has the low message complexity O(K) (K is the size of the quorum, which can be as low as log N ). A correctness proof and detailed 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A.E. Abbadi. </author> <title> "An Efficient and Fault-Tolerant Solution for Distributed Mutual Exclusion". </title> <journal> ACM Trans. on Computer Systems, </journal> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: These algorithms have long delays because they impose some logical structure on the system topology (like a graph or tree) and a token request message must travel serially along the edges of the graph or tree. Besides the long delay, token-based algorithms suffer from token loss problem <ref> [1] </ref>. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms [1, 2, 4, 5, 7, 8, 10, 11] exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. <p> Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> Our scheme is independent of the quorum being used. K is p N if we use Maekawa's quorum construction algorithm [8] and K becomes log N when we use Agrawal-Abbadi quorum construction algorithm <ref> [1] </ref>. Moreover, the redundancy in the quorum can increase the resiliency to site and communication link failures. The rest of the paper is organized as follows. Section 2 describes the system model. In Section 3, we present the algorithm. <p> Thus, our algorithm is a delay-optimal quorum-based mutual exclusion algorithm. 5.3 Comparison With Other Algo rithms The proposed algorithm is independent of the type of quorum being used. K becomes p Maekawa's quorum construction algorithm [8], and K is log N when we use Agrawal-Abbadi quorum construction algorithm <ref> [1] </ref>. Table 1 shows the message complexity and the synchronization delay for the proposed and various existing mutual exclusion algorithms. We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> Much progress has been made to increase the resiliency of mutual exclusion algorithms. We consider four well known fault-tolerant quorum construction algorithms. The tree algorithm <ref> [1] </ref> is based on organizing a set of N sites as nodes of a binary tree. A quorum is formed by including all sites along any path that starts at the root and terminates at a leaf. <p> With this change, the quorum size in this algorithm reduces to G+1 2 N G , where G is the sub group size. If our algorithm uses the fault tolerant quorum coustructed by any of these algorithms <ref> [1, 2, 4, 11] </ref>, it becomes a fault tolerant mutual exclusion algorithm. Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [11] (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm [4]). <p> Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [11] (or the Grid-set [2]) and the tree algorithm <ref> [1] </ref> (or HQC algorithm [4]). When a site fails, the former can tolerate the failure without any recovery scheme (this is achieved by majority voting in the subgroup), but the latter needs a recovery scheme because a new quorum must be constructed. <p> After the first quorum-based algorithm [8] was proposed by Maekawa more than a decade ago, many algorithms <ref> [1, 2, 4, 5, 7, 10, 11] </ref> have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done towards minimizing the synchronization delay.
Reference: [2] <author> S.Y. Cheung, M.H. Ammar, and M. Ahamad. </author> <title> "The Grid Protocol: A high performance scheme for maintaining Replicated data". </title> <journal> IEEE Trans. knowl. Data Eng., </journal> <month> June </month> <year> 1992. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> In HQC or Hierarchical Voting Consensus [4], sites are organized in a multilevel hierarchy and voting is performed at each level of the hierarchy. The lowest level in the hierarchy contains groups of sites. In this construction, the quorum size becomes N 0:83 . The Grid-set algorithm <ref> [2] </ref> has two levels. A majority voting scheme is used at the upper level to increase the resiliency, while a Maekawa-like grid structure is used at the lower level to reduce message overhead. The quorum size is N 2 G, where G is the group size. <p> The quorum size is N 2 G, where G is the group size. The Rangarajan-Setia-Tripathi algorithm [11] in some sense is a dual of the Grid-set algorithm <ref> [2] </ref>. Specifically, they use majority voting at the lower (subgroup) level and a Maekawa-like grid structure at the higher level. With this change, the quorum size in this algorithm reduces to G+1 2 N G , where G is the sub group size. <p> With this change, the quorum size in this algorithm reduces to G+1 2 N G , where G is the sub group size. If our algorithm uses the fault tolerant quorum coustructed by any of these algorithms <ref> [1, 2, 4, 11] </ref>, it becomes a fault tolerant mutual exclusion algorithm. Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [11] (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm [4]). <p> Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [11] (or the Grid-set <ref> [2] </ref>) and the tree algorithm [1] (or HQC algorithm [4]). When a site fails, the former can tolerate the failure without any recovery scheme (this is achieved by majority voting in the subgroup), but the latter needs a recovery scheme because a new quorum must be constructed. <p> After the first quorum-based algorithm [8] was proposed by Maekawa more than a decade ago, many algorithms <ref> [1, 2, 4, 5, 7, 10, 11] </ref> have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done towards minimizing the synchronization delay.
Reference: [3] <author> H. Garcia and D. Barbara. </author> <title> "How to assign Votes in a Distributed System". </title> <journal> J. ACM, </journal> <month> May </month> <year> 1985. </year>
Reference-contexts: A site executes its CS request sequentially one by one. Let U denotes a non-empty set of N sites. A coterie C is a set of sets, where each set g in C is called a quorum. The following conditions hold for quorums in a coterie C under U <ref> [3] </ref>: 1. (8g 2 C)[g 6= ^ g U ]; 2. M inimality P roperty : (8g; h 2 C)[g 6 h]; and 3. Intersection P roperty : (8g; h 2 C)[g " h 6= ]. For example, C=ffa,bg,fb,cgg is a coterie under U =fa,b,cg, and g=fa,bg is a quorum.
Reference: [4] <author> A. Kumar. </author> <title> "Hierarchical Quorum Consensus: A new Algorithm for managing Replicated Data". </title> <journal> IEEE Trans. Computers, </journal> <pages> pages 996-1004, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> The quorum size in the tree algorithm is log N in the best case and becomes N+1 2 in the worst case. In HQC or Hierarchical Voting Consensus <ref> [4] </ref>, sites are organized in a multilevel hierarchy and voting is performed at each level of the hierarchy. The lowest level in the hierarchy contains groups of sites. In this construction, the quorum size becomes N 0:83 . The Grid-set algorithm [2] has two levels. <p> With this change, the quorum size in this algorithm reduces to G+1 2 N G , where G is the sub group size. If our algorithm uses the fault tolerant quorum coustructed by any of these algorithms <ref> [1, 2, 4, 11] </ref>, it becomes a fault tolerant mutual exclusion algorithm. Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [11] (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm [4]). <p> Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [11] (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm <ref> [4] </ref>). When a site fails, the former can tolerate the failure without any recovery scheme (this is achieved by majority voting in the subgroup), but the latter needs a recovery scheme because a new quorum must be constructed. <p> After the first quorum-based algorithm [8] was proposed by Maekawa more than a decade ago, many algorithms <ref> [1, 2, 4, 5, 7, 10, 11] </ref> have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done towards minimizing the synchronization delay.
Reference: [5] <author> Y. Kuo and S. Huang. </author> <title> "A Geometric Approach for Constructing Coteries and k-Coteries". </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 8 </volume> <pages> 402-411, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> After the first quorum-based algorithm [8] was proposed by Maekawa more than a decade ago, many algorithms <ref> [1, 2, 4, 5, 7, 10, 11] </ref> have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done towards minimizing the synchronization delay.
Reference: [6] <author> L. Lamport. </author> <title> "Time, Clocks and Ordering of Events in Distributed Systems". </title> <journal> Comm. of the ACM, </journal> <month> July </month> <year> 1978. </year>
Reference-contexts: Over the last decade, many mutual exclusion algorithms [17] have been proposed to improve the performance of distributed systems, but they either reduce the message complexity at the cost of long synchronization delay or reduce the synchronization delay at the cost of message complexity. Lamport uses logical timestamp <ref> [6] </ref> to implement distributed mutual exclusion. For each CS execution, each site needs to get permissions from all other (N 1) sites. The message complexity of this algorithm is 3 fl (N 1) and the synchronization delay is T . <p> In order to enter the CS, each site must get permissions from all the sites in req set (i). Every request message is assigned a timestamp (the sequence number and the site number) according to Lamport's scheme <ref> [6] </ref>. The sequence number assigned is greater than that of any request message sent, received, or observed at that site. The site with lower timestamp has higher priority which is determined as follows: 1. The massage with smaller sequence number has higher priority. 2.
Reference: [7] <author> W. Luk and T. Wong. </author> <title> "Two New Quorum Based Algorithms for Distributed Mutual Exclusion". </title> <booktitle> Proc. of the 17 th Intl. Conf. on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> After the first quorum-based algorithm [8] was proposed by Maekawa more than a decade ago, many algorithms <ref> [1, 2, 4, 5, 7, 10, 11] </ref> have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done towards minimizing the synchronization delay.
Reference: [8] <author> M. Maekawa. </author> <title> "A p N Algorithm for Mutual Exclusion in Decentralized Systems". </title> <journal> ACM Trans. on Computer Systems, </journal> <month> May </month> <year> 1985. </year>
Reference-contexts: The dynamic algorithm in [16] on the average requires N 1 messages per CS execution at light load and 2 fl (N 1) at heavy load. The synchronization delay is still T . In Maekawa's scheme <ref> [8] </ref>, a set of sites called a quorum is associated with each site, and this set has a nonempty intersection with the sets corresponding to every other sites. To execute CS, a site only locks all sites in its quorum; thus, message complexity is dramatically reduced. <p> Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> Many algorithms [1, 2, 4, 5, 7, 8, 10, 11] exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. Because all quorum-based algorithms are Maekawa-type algorithms <ref> [8] </ref>, they all have a high synchronization delay (2T ). <p> This reduces the synchronization delay from 2T to T . However, this change brings some complications and we discuss how to deal with them in this paper. Our scheme is independent of the quorum being used. K is p N if we use Maekawa's quorum construction algorithm <ref> [8] </ref> and K becomes log N when we use Agrawal-Abbadi quorum construction algorithm [1]. Moreover, the redundancy in the quorum can increase the resiliency to site and communication link failures. The rest of the paper is organized as follows. Section 2 describes the system model. <p> Thus, our algorithm is a delay-optimal quorum-based mutual exclusion algorithm. 5.3 Comparison With Other Algo rithms The proposed algorithm is independent of the type of quorum being used. K becomes p Maekawa's quorum construction algorithm <ref> [8] </ref>, and K is log N when we use Agrawal-Abbadi quorum construction algorithm [1]. Table 1 shows the message complexity and the synchronization delay for the proposed and various existing mutual exclusion algorithms. We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> After the first quorum-based algorithm <ref> [8] </ref> was proposed by Maekawa more than a decade ago, many algorithms [1, 2, 4, 5, 7, 10, 11] have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures.
Reference: [9] <author> M. Naimi and M. Trehel. </author> <title> "An Improvement of the Log(n) Distributed Algorithm for Mutual Exclusion". </title> <booktitle> Proc. of the 7 th Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 371-375, </pages> <year> 1987. </year>
Reference-contexts: The site requests the token only from these sites, reducing the number of messages required to execute the CS. Although the synchronization delay is T , the message complexity varies between 0 and N . The mutual exclusion algorithms in <ref> [9, 12] </ref> on the average require only O (log N ) messages to execute the critical section; however, the average delay in these algorithms is also O (log N ). The worst case delay of the algorithm in [9] can be as much as O (N ). <p> The mutual exclusion algorithms in [9, 12] on the average require only O (log N ) messages to execute the critical section; however, the average delay in these algorithms is also O (log N ). The worst case delay of the algorithm in <ref> [9] </ref> can be as much as O (N ). These algorithms have long delays because they impose some logical structure on the system topology (like a graph or tree) and a token request message must travel serially along the edges of the graph or tree.
Reference: [10] <author> D. Peleg and A. Wool. "Crumbling Walls: </author> <title> A Class of Practical and Efficient Quorum Systems". </title> <booktitle> Proc. of 14 th ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 120-129, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> After the first quorum-based algorithm [8] was proposed by Maekawa more than a decade ago, many algorithms <ref> [1, 2, 4, 5, 7, 10, 11] </ref> have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done towards minimizing the synchronization delay.
Reference: [11] <author> S. Rangarajan, S. Setia, and S.K. Tripathi. </author> <title> "A Fault-Tolerant Algorithm for Replicated Data Management". </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <pages> pages 1271-1282, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from token loss problem [1]. Recently, quorum-based mutual exclusion algorithms, which are a generalization of Maekawa's algorithm, have attracted considerable attention. Many algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> exist to construct quorums that can reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done on minimizing the synchronization delay. <p> We observe that our algorithm has the lowest synchronization delay and still has a low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from the token loss problem. 6 Adding Fault-tolerance Many quorum-based algorithms <ref> [1, 2, 4, 5, 7, 8, 10, 11] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. <p> A majority voting scheme is used at the upper level to increase the resiliency, while a Maekawa-like grid structure is used at the lower level to reduce message overhead. The quorum size is N 2 G, where G is the group size. The Rangarajan-Setia-Tripathi algorithm <ref> [11] </ref> in some sense is a dual of the Grid-set algorithm [2]. Specifically, they use majority voting at the lower (subgroup) level and a Maekawa-like grid structure at the higher level. <p> With this change, the quorum size in this algorithm reduces to G+1 2 N G , where G is the sub group size. If our algorithm uses the fault tolerant quorum coustructed by any of these algorithms <ref> [1, 2, 4, 11] </ref>, it becomes a fault tolerant mutual exclusion algorithm. Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [11] (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm [4]). <p> If our algorithm uses the fault tolerant quorum coustructed by any of these algorithms [1, 2, 4, 11], it becomes a fault tolerant mutual exclusion algorithm. Since all these quorums satisfy the intersection prop erty, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm <ref> [11] </ref> (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm [4]). <p> After the first quorum-based algorithm [8] was proposed by Maekawa more than a decade ago, many algorithms <ref> [1, 2, 4, 5, 7, 10, 11] </ref> have been proposed to construct different quorums, which reduce the message complexity or increase the resiliency to site and communication failures. However, not much work has been done towards minimizing the synchronization delay.
Reference: [12] <author> K. Raymond. </author> <title> "A Tree-based Algorithm for Distributed Mutual Exclusion". </title> <journal> ACM Trans. on Computing systems, </journal> <pages> pages 61-77, </pages> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: The site requests the token only from these sites, reducing the number of messages required to execute the CS. Although the synchronization delay is T , the message complexity varies between 0 and N . The mutual exclusion algorithms in <ref> [9, 12] </ref> on the average require only O (log N ) messages to execute the critical section; however, the average delay in these algorithms is also O (log N ). The worst case delay of the algorithm in [9] can be as much as O (N ).
Reference: [13] <author> G. Ricart and A.K. Agrawal. </author> <title> "An Optimal Algorithm for mutual Exclusion in Computer Networks". </title> <journal> Communication of the ACM, </journal> <month> Jan. </month> <year> 1981. </year>
Reference-contexts: Lamport uses logical timestamp [6] to implement distributed mutual exclusion. For each CS execution, each site needs to get permissions from all other (N 1) sites. The message complexity of this algorithm is 3 fl (N 1) and the synchronization delay is T . Ricart-Agrawal algorithm <ref> [13] </ref> is an optimization of Lamport's algorithm that reduces the release message by cleverly merging them with reply messages. This merging is achieved by deferring the lower priority request.
Reference: [14] <author> M. Singhal. </author> <title> "A Heuristically-Aided Algorithm for Mutual Exclusion in Distributed System". </title> <journal> IEEE Trans. on Computers, </journal> <month> May </month> <year> 1989. </year>
Reference-contexts: In this algorithm, the synchronization delay is reduced to T as opposed to 2T in Maekawa-type algorithms; however, the message complexity in creases to O (N ). In Singhal's token-based heuristic algorithm <ref> [14] </ref>, each site maintains information about the state of other sites in the system and uses it to select a set of sites that are likely to have the token. The site requests the token only from these sites, reducing the number of messages required to execute the CS.
Reference: [15] <author> M. Singhal. </author> <title> "A Class of Deadlock-Free Maekawa-type Algorithms for Mutual Exclusion in Distributed Systems". </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 131-138, </pages> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Singhal uses the concepts of mutable locks to achieve an optimal deadlock-free Maekawa-type algorithm <ref> [15] </ref> which is free from deadlocks and does not exchange messages like inquire, f ail, and yield to resolve deadlocks. In this algorithm, the synchronization delay is reduced to T as opposed to 2T in Maekawa-type algorithms; however, the message complexity in creases to O (N ).
Reference: [16] <author> M. Singhal. </author> <title> "A Dynamic Information Structure Mutual Exclusion Algorithm for Distributed Systems". </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: This merging is achieved by deferring the lower priority request. In this algorithm, the messages per CS execution is reduced to 2 fl (N 1) messages and the synchronization delay is still T . The dynamic algorithm in <ref> [16] </ref> on the average requires N 1 messages per CS execution at light load and 2 fl (N 1) at heavy load. The synchronization delay is still T .
Reference: [17] <author> M. Singhal. </author> <title> "A Taxonomy of Distributed Mutual Exclusion". </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18 </volume> <pages> 94-101, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The synchronization delay is the time required after a site exits the CS and before the next site enters the CS, and it is measured in terms of the average message delay (T ). Over the last decade, many mutual exclusion algorithms <ref> [17] </ref> have been proposed to improve the performance of distributed systems, but they either reduce the message complexity at the cost of long synchronization delay or reduce the synchronization delay at the cost of message complexity. Lamport uses logical timestamp [6] to implement distributed mutual exclusion.
Reference: [18] <author> T.H. Thomas. </author> <title> "A majority consensus approach to concurrency control for multiple copy databases". </title> <journal> ACM Trans. Database Systems, </journal> <month> June </month> <year> 1979. </year>
Reference-contexts: In general, there is a trade-off between the message complexity and the degree of the resiliency of an algorithm. For example, majority voting <ref> [18] </ref> which has high resiliency has relatively high message complexity O (N ), whereas Maekawa's algorithm which has low message complexity O ( p N ) has relatively low re siliency to failures. Much progress has been made to increase the resiliency of mutual exclusion algorithms.
References-found: 18

