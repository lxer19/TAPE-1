URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-36.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Hardness of Problems on Thin Colored Graphs  
Author: Hans L. Bodlaender Michael R. Fellows Michael T. Hallett H. Todd Wareham Tandy J. Warnow k 
Note: Colored Cutwidth are NP -Complete.  
Abstract: In this paper, we consider the complexity of a number of combinatorial problems; namely, Intervalizing Colored Graphs (DNA physical mapping), Triangulating Colored Graphs (perfect phylogeny), (Directed) (Modified) Colored Cutwidth, Feasible Register Assignment and Module Allocation for graphs of bounded treewidth. Each of these problems has as a characteristic a uniform upper bound on the tree or path width of the graphs in "yes"-instances. For all of these problems with the exceptions of feasible register assignment and module allocation, a vertex or edge coloring is given as part of the input. Our main results are that the parameterized variant of each of the considered problems is hard for the complexity classes W [t] for all t 2 Z + . We also show that Intervalizing Colored Graphs, Triangulating Colored Graphs, and 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Abrahamson and M. R. Fellows. </author> <title> Finite Automata, Bounded Treewidth and Well-Quasiordering. </title> <journal> Contemporary Mathematics, </journal> <volume> 147 </volume> <pages> 539-563, </pages> <year> 1993. </year>
Reference-contexts: In either case, the running time for this procedure is linear in the size of G but exponential only in k. By means of one of several general algorithmic design methodologies (see <ref> [1, 4, 5, 15, 20, 54] </ref>) we may then answer the original question in time linear in the size of G. Hence, for small values of k, this procedure may lead to algorithms that are practical even for very large graphs G. <p> We designate the class of fixed-parameter tractable problems F P T . These definitions give us the hierarchy of parameterized complexity classes F P T W <ref> [1] </ref> W [2] W [t] W [P ] for which there are many natural hard or complete problems [37, 23, 24]. For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive <p> These definitions give us the hierarchy of parameterized complexity classes F P T W <ref> [1] </ref> W [2] W [t] W [P ] for which there are many natural hard or complete problems [37, 23, 24]. For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines [17, 22, 26]. <p> However, this problem is NP-complete even for binary characters [21]. One approach to approximating such phylogenies is to look for perfect phylogenies on small subsets of characters. Though the reductions in [21] also establish that even this approximation problem is W <ref> [1] </ref>- hard when the size of wanted subset is the parameter and the characters are binary, the k-Perfect Phylogeny problem, i.e., the problem of determining if a given set of characters of fixed size is perfectly compatible, is still of interest to computational biologists.
Reference: [2] <author> R. Agarwala, D. Fernandez-Baca. </author> <title> A polynomial-time algorithm for the perfect phylogeny problem when the number of character-states is fixed. </title> <journal> SIAM J. Comp., </journal> <volume> 23(6) </volume> <pages> 1216-1224, </pages> <year> 1994. </year>
Reference-contexts: We designate the class of fixed-parameter tractable problems F P T . These definitions give us the hierarchy of parameterized complexity classes F P T W [1] W <ref> [2] </ref> W [t] W [P ] for which there are many natural hard or complete problems [37, 23, 24]. <p> Thus, any one of these problems is fixed-parameter tractable if and only if all of the others are; and none of the problems for which we here prove W hardness results are fixed-parameter tractable unless all of these are also. Dominating set is proved complete for W <ref> [2] </ref> in [25]. In this paper, we will use as a starting point for our reductions the following problem: Longest Common Subsequence (LCS-1) Instance: Alphabet , strings s 1 ; : : : ; s K 2 fl , integer M 2 N. Parameter: K. <p> For r = 4 (the case for characters derived from DNA sequences), the problem can be solved in O (s 2 k) time [41]. An O (2 3r (sk 3 + k 4 )) time algorithm has been found for the general case by Agarwala and Fernandez-Baca <ref> [2] </ref>. This has been improved by Kannan and Warnow [42] to an O (2 2r sk 2 ) time algorithm.
Reference: [3] <author> A. V. Aho and J. D. Ullman. </author> <title> Optimization of straight line programs. </title> <journal> SIAM J. Comput., </journal> <volume> 1 </volume> <pages> 1-19, </pages> <year> 1972. </year>
Reference-contexts: We disallow memory stores instructions are of only two forms: (1) load a register with the contents from a specified memory location and (2) apply an operator to the contents of two registers placing the result in a third register. See <ref> [3] </ref>. The order of execution of a program is represented by G, a directed acyclic graph. We may view the act of placing a value into a register as placing a "pebble" on a vertex of the graph.
Reference: [4] <author> S. Arnborg. </author> <title> Efficient algorithms for combinatorial problems on graphs with bounded decomposability: a survey. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 2-23, </pages> <year> 1985. </year>
Reference-contexts: In either case, the running time for this procedure is linear in the size of G but exponential only in k. By means of one of several general algorithmic design methodologies (see <ref> [1, 4, 5, 15, 20, 54] </ref>) we may then answer the original question in time linear in the size of G. Hence, for small values of k, this procedure may lead to algorithms that are practical even for very large graphs G.
Reference: [5] <author> H. L. Bodlaender. </author> <title> Dynamic programming algorithms on graphs with bounded tree-width. </title> <booktitle> In Proceedings of the 15th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 105-119. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 317, </volume> <year> 1988. </year>
Reference-contexts: In either case, the running time for this procedure is linear in the size of G but exponential only in k. By means of one of several general algorithmic design methodologies (see <ref> [1, 4, 5, 15, 20, 54] </ref>) we may then answer the original question in time linear in the size of G. Hence, for small values of k, this procedure may lead to algorithms that are practical even for very large graphs G.
Reference: [6] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <booktitle> In: Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 226-234, </pages> <year> 1993. </year> <note> To appear in SIAM J. Computing. </note>
Reference-contexts: Email: harold@csr.uvic.ca. k Department of Computer and Information Science, University of Pennsylvania, Philadelphia, PA 19104-6389. Email: tandy@central.cis.upenn.edu. Supported in part by a NYI award from the Na tional Science Foundation, CCR-9457800. 1 This bound opens up the following possibility: using the algorithm of Bodlaender <ref> [6] </ref> we can determine that no such decomposition of width b (k) exists or be given a decomposition of G. In either case, the running time for this procedure is linear in the size of G but exponential only in k.
Reference: [7] <author> H. L. Bodlaender, R. G. Downey, M. R. Fellows, M. T. Hallett, and H. T. Wareham. </author> <title> Parameterized complexity analysis in computational biology. </title> <journal> CABIOS, </journal> <volume> 11(1) </volume> <pages> 49-57, </pages> <year> 1995. </year>
Reference-contexts: It has long been recognized that graph intervalization problems are useful within molecular biology (see [39] and references). The classical and parameterized complexities of a 5 number of such problems related to ICG have recently been determined (see <ref> [7] </ref> and ref-erences). Indeed one such problem, Colored Graph Sandwich, is equivalent to ICG and was independently of [29] shown to be NP-complete in [34].
Reference: [8] <author> H. L. Bodlaender, R. G. Downey, M. R. Fellows, and H. T. Wareham. </author> <title> The parameter-ized complexity of sequence alignment and consensus. </title> <journal> Theor. Comp. Sc., </journal> <volume> 147 </volume> <pages> 31-54, </pages> <year> 1995. </year>
Reference-contexts: Parameter: K. Question: Does there exist a string in fl of length at least M , that is a subsequence of each string s 1 ; : : : ; s K ? Theorem 1 <ref> [8, 10] </ref> For all t 2 Z + , LCS-1 is hard for W [t]. 3 Other problems hard (or complete) for W [t] for all t include Weighted t-Normalized Satisfiability, Bandwidth, Domino Treewidth, and Uniform Emulation on a Path (see [37]).
Reference: [9] <author> H. L. Bodlaender and B. de Fluiter. </author> <title> Intervalizing k-colored graphs. </title> <booktitle> In Proceedings 22nd International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 87-98. </pages> <editor> Springer-Verlag, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 944, </volume> <year> 1995. </year>
Reference-contexts: All of the problems consider are N P -Complete and W [t]-Hard for all t 2 Z + . Recently in <ref> [9] </ref> it has been shown that ICG is in fact N P -Complete for any fixed k 4. For the case of k = 3, they give an O (jV G j 2 ) algorithm. <p> Likewise, the same conclusion can be drawn for Parametric Module Allocation although it remains open whether algorithms without the factor of p in the exponent exist. Membership in the W hierarchy remains open for all of these problems although it is noted that the result of <ref> [9] </ref> implies that ICG is not in any level of the W -hierarchy unless P = N P .
Reference: [10] <author> H. L. Bodlaender, M. R. Fellows, and M. T. Hallett. </author> <title> Beyond NP-completeness for problems of bounded width: Hardness for the W hierarchy. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 449-458, </pages> <year> 1994. </year>
Reference-contexts: If, in fact, the answer is "yes" for this instance, then one can prove that there exists an upper bound b (k) on the path or tree width of the graph. fl Some of the results contained in this paper were first reported in <ref> [11, 29, 10] </ref>. y Department of Computer Science, Utrecht University, P.O. Box 80.089, 3508 TB Utrecht, the Nether-lands. Email: hansb@cs.ruu.nl. Supported by the ESPRIT Basic Research Actions of the EC under contract 7141 (project ALCOM II). z Department of Computer Science, University of Victoria, P.O. <p> Parameter: K. Question: Does there exist a string in fl of length at least M , that is a subsequence of each string s 1 ; : : : ; s K ? Theorem 1 <ref> [8, 10] </ref> For all t 2 Z + , LCS-1 is hard for W [t]. 3 Other problems hard (or complete) for W [t] for all t include Weighted t-Normalized Satisfiability, Bandwidth, Domino Treewidth, and Uniform Emulation on a Path (see [37]).
Reference: [11] <author> H. L. Bodlaender, M. R. Fellows, and T. J. Warnow. </author> <title> Two Strikes against Perfect Phylogeny. </title> <booktitle> In: Proceedings 19th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 373-383. </pages> <editor> Springer-Verlag, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 623, </volume> <year> 1992. </year>
Reference-contexts: If, in fact, the answer is "yes" for this instance, then one can prove that there exists an upper bound b (k) on the path or tree width of the graph. fl Some of the results contained in this paper were first reported in <ref> [11, 29, 10] </ref>. y Department of Computer Science, Utrecht University, P.O. Box 80.089, 3508 TB Utrecht, the Nether-lands. Email: hansb@cs.ruu.nl. Supported by the ESPRIT Basic Research Actions of the EC under contract 7141 (project ALCOM II). z Department of Computer Science, University of Victoria, P.O.
Reference: [12] <author> H. L. Bodlaender and T. Kloks. </author> <title> Better algorithms for the pathwidth and treewidth of graphs. </title> <booktitle> In: Proceedings of the 18th International Colloquium on Automata, Languages and Programming, p. </booktitle> <pages> 544-555. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <year> 1991. </year> <title> To appear as: Efficient and constructive algorithms for the pathwidth and treewidth of graphs, </title> <editor> in J. </editor> <booktitle> Algorithms. </booktitle>
Reference-contexts: This has been improved by Kannan and Warnow [42] to an O (2 2r sk 2 ) time algorithm. For the T CG problem, linear time algorithms for the case of two and three-colored graphs <ref> [12, 38, 40, 45] </ref> and an O ((n + m (k 2)) k+1 ) time algorithm for triangulating k-colored graphs [44] have been found.
Reference: [13] <author> H. L. Bodlaender and R. H. Mohring. </author> <title> The pathwidth and treewidth of cographs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 6 </volume> <pages> 181-188, </pages> <year> 1993. </year>
Reference-contexts: Suppose v 0 2 X i , v r 2 X j , and suppose that k is on the path between i and j in T . Then fv 0 ; : : : ; v r g " X k 6= ;. Lemma 3 <ref> [13] </ref> Let (fX i j i 2 Ig; T = (I; F )) be a tree-decomposition of G = (V; E). Let W 1 ; W 2 V , such that for all v 2 W 1 , w 2 W 2 , (v; w) 2 E.
Reference: [14] <author> S. H. Bokhari. </author> <title> A shortest tree algorithm for optimal assignments across space and time in distributed processor systems. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-7, no. 6, </volume> <pages> p. 583-589, </pages> <year> 1981. </year>
Reference-contexts: The MA problem is know to be N P -Hard in general (see <ref> [14, 31, 49, 51] </ref>) but polynomial for several restricted families of graphs. When G is restricted to be a series-parallel graph, the best known algorithm is O (mp 3 ) (see [14]) and when G is a tree, MA can be solved in time O (mp 2 ) (see [51]). <p> The MA problem is know to be N P -Hard in general (see [14, 31, 49, 51]) but polynomial for several restricted families of graphs. When G is restricted to be a series-parallel graph, the best known algorithm is O (mp 3 ) (see <ref> [14] </ref>) and when G is a tree, MA can be solved in time O (mp 2 ) (see [51]). Fernandez-Baca [31] generalize this result to graphs of bounded treewidth k giving an O (mp k+1 ) assignment algorithm.
Reference: [15] <author> R. B. Borie, R. G. Parker and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus and descriptions of problems on recursively constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 555-582, </pages> <year> 1992. </year>
Reference-contexts: In either case, the running time for this procedure is linear in the size of G but exponential only in k. By means of one of several general algorithmic design methodologies (see <ref> [1, 4, 5, 15, 20, 54] </ref>) we may then answer the original question in time linear in the size of G. Hence, for small values of k, this procedure may lead to algorithms that are practical even for very large graphs G.
Reference: [16] <author> P. Buneman. </author> <title> A characterization of rigid circuit graphs. </title> <journal> Disc. Math., </journal> <volume> 9 </volume> <pages> 205-212, </pages> <year> 1974. </year>
Reference-contexts: Parameter: k. Question: Does there exist a perfect phylogeny for S with this set of charac ters? 6 The version in which the number of characters is a fixed constant k is called the k--Perfect Phylogeny problem. In 1974, Buneman <ref> [16] </ref> showed that the Perfect Phylogeny problem reduced to a graph-theoretic problem, which we call the Triangulating Colored Graphs problem (or TCG). A graph is said to be triangulated (or chordal) if it does not contain an induced cycle of length at least four.
Reference: [17] <author> L. Cai, J. Chen, R. G. Downey, and M. R. Fellows. </author> <title> The parameterized complexity of short computations and factorizations. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Victoria, </institution> <month> July </month> <year> 1993. </year> <note> To appear in Archive for Mathematical Logic. </note>
Reference-contexts: For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines <ref> [17, 22, 26] </ref>. Thus, any one of these problems is fixed-parameter tractable if and only if all of the others are; and none of the problems for which we here prove W hardness results are fixed-parameter tractable unless all of these are also.
Reference: [18] <author> L. Cai. </author> <title> Fixed-parameter tractability of graph modification problems for hereditary properties. </title> <type> Technical report, </type> <institution> Department of Computer Science, The Chinese University of Hong Kong, </institution> <address> Shatin, New Territories, Hong Kong, </address> <year> 1995. </year>
Reference: [19] <author> N. G. Cooper (editor). </author> <title> The human genome project. </title> <address> Los Alamos Science, Number 20, </address> <year> 1992, </year> <month> p.119. </month>
Reference-contexts: Indeed one such problem, Colored Graph Sandwich, is equivalent to ICG and was independently of [29] shown to be NP-complete in [34]. As values of k for ICG are typically small in practice, e.g., k = 8 in the yeast genome sequencing project <ref> [19] </ref>, the parameterized version of ICG studied here is of some importance. Lemma 4 Let G = (V; E) be a graph with a vertex coloring c : V ! f1; 2; : : : ; kg, that is a subgraph of a properly colored interval graph G 0 .
Reference: [20] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I: Recognizable sets of finite graphs. </title> <journal> Information and Computation, </journal> <volume> 85 </volume> <pages> 12-75, </pages> <year> 1990. </year> <month> 21 </month>
Reference-contexts: In either case, the running time for this procedure is linear in the size of G but exponential only in k. By means of one of several general algorithmic design methodologies (see <ref> [1, 4, 5, 15, 20, 54] </ref>) we may then answer the original question in time linear in the size of G. Hence, for small values of k, this procedure may lead to algorithms that are practical even for very large graphs G.
Reference: [21] <author> W. H. Day, D. Sankoff. </author> <title> Computational complexity of inferring phylogenies by com-patibility. </title> <journal> Systematic Zoology, </journal> <volume> 35(2): </volume> <pages> 224-229, </pages> <year> 1986. </year>
Reference-contexts: Since perfect phylogenies rarely occur in practice, it is often of more interest to find the maximally-true phylogenies produced by the Character Compatibility problem. However, this problem is NP-complete even for binary characters <ref> [21] </ref>. One approach to approximating such phylogenies is to look for perfect phylogenies on small subsets of characters. Though the reductions in [21] also establish that even this approximation problem is W [1]- hard when the size of wanted subset is the parameter and the characters are binary, the k-Perfect Phylogeny <p> However, this problem is NP-complete even for binary characters <ref> [21] </ref>. One approach to approximating such phylogenies is to look for perfect phylogenies on small subsets of characters. Though the reductions in [21] also establish that even this approximation problem is W [1]- hard when the size of wanted subset is the parameter and the characters are binary, the k-Perfect Phylogeny problem, i.e., the problem of determining if a given set of characters of fixed size is perfectly compatible, is still of interest
Reference: [22] <author> R. G. Downey, P. A. Evans, and M. R. Fellows. </author> <title> Parameterized learning complexity. </title> <booktitle> In: Proceedings Sixth ACM Workshop on Computational Learning Theory (COLT), p. </booktitle> <pages> 51-57, </pages> <year> 1993. </year>
Reference-contexts: For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines <ref> [17, 22, 26] </ref>. Thus, any one of these problems is fixed-parameter tractable if and only if all of the others are; and none of the problems for which we here prove W hardness results are fixed-parameter tractable unless all of these are also.
Reference: [23] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness I: Basic results. </title> <journal> SIAM J. Comput., </journal> <volume> 24 </volume> <pages> 873-921, </pages> <year> 1995. </year>
Reference-contexts: We designate the class of fixed-parameter tractable problems F P T . These definitions give us the hierarchy of parameterized complexity classes F P T W [1] W [2] W [t] W [P ] for which there are many natural hard or complete problems <ref> [37, 23, 24] </ref>. For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines [17, 22, 26].
Reference: [24] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed parameter intractability. </title> <booktitle> In: Proceedings of the Seventh Annual IEEE Conference on Structure in Complexity Theory, p. </booktitle> <pages> 36-49, </pages> <year> 1992. </year>
Reference-contexts: We designate the class of fixed-parameter tractable problems F P T . These definitions give us the hierarchy of parameterized complexity classes F P T W [1] W [2] W [t] W [P ] for which there are many natural hard or complete problems <ref> [37, 23, 24] </ref>. For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines [17, 22, 26].
Reference: [25] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness. </title> <journal> Congressus Numerantium, </journal> <volume> 87 </volume> <pages> 161-178, </pages> <year> 1992. </year>
Reference-contexts: Thus, any one of these problems is fixed-parameter tractable if and only if all of the others are; and none of the problems for which we here prove W hardness results are fixed-parameter tractable unless all of these are also. Dominating set is proved complete for W [2] in <ref> [25] </ref>. In this paper, we will use as a starting point for our reductions the following problem: Longest Common Subsequence (LCS-1) Instance: Alphabet , strings s 1 ; : : : ; s K 2 fl , integer M 2 N. Parameter: K.
Reference: [26] <author> R. G. Downey, M. R. Fellows, B. M. Kapron, M. T. Hallett, and H. T. Wareham. </author> <title> The parameterized complexity of some problems in logic and linguistics. </title> <booktitle> In: Proceedings of the Symposium on Logical Foundations of Computer Science (LFCS '94), Springer-Verlag, Lecture notes in Computer Science, </booktitle> <volume> vol. 813, </volume> <pages> p. 89-100, </pages> <year> 1994. </year>
Reference-contexts: For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines <ref> [17, 22, 26] </ref>. Thus, any one of these problems is fixed-parameter tractable if and only if all of the others are; and none of the problems for which we here prove W hardness results are fixed-parameter tractable unless all of these are also.
Reference: [27] <author> G. F. Estabrook. </author> <title> Some concepts for the estimation of evolutionary relationships in systematic botany. </title> <journal> Systematic Botany, </journal> <volume> 3(2) </volume> <pages> 146-158, </pages> <year> 1978. </year>
Reference-contexts: One such property is the following: For each state of the character, the set of nodes in the tree having that state should form a connected component, i.e., that state is convex <ref> [27] </ref>. Following [27], a character which satisfies this property is said to be true. The Character Compatibility problem (see [43] and references) looks for the phylogeny such that the largest possible subset of the given characters are true. <p> One such property is the following: For each state of the character, the set of nodes in the tree having that state should form a connected component, i.e., that state is convex <ref> [27] </ref>. Following [27], a character which satisfies this property is said to be true. The Character Compatibility problem (see [43] and references) looks for the phylogeny such that the largest possible subset of the given characters are true.
Reference: [28] <author> G. A. Evans. </author> <title> Combinatoric strategies for genome mapping. </title> <journal> Bioessays, </journal> <volume> 13 </volume> <pages> 39-44, </pages> <year> 1991. </year>
Reference-contexts: This problem is typically broken into four steps (see <ref> [28] </ref>): 1. Fragment the sequence X. (This step may be repeated for several identical copies of X.) 2. Determine a set of characteristics for each fragment, termed its fingerprint or signa ture. 3. Compute a similarity or overlap measure between pairs of fragments based on their respective fingerprints. 4. <p> Compute a similarity or overlap measure between pairs of fragments based on their respective fingerprints. 4. Using the overlap information, assemble the fragments into islands of contiguous fragments, termed contigs. According to the kind of sequence under investigation, there are many ways in which these steps might be accomplished <ref> [28] </ref>. The fragmentation of a copy of X in step 1 is termed a digest. Where X is a piece of DNA, the fragments produced in step 1 can be reproduced in large quantities, and are termed clones.
Reference: [29] <author> M. R. Fellows, M. T. Hallett, H. T. Wareham. </author> <title> DNA Physical Mapping: 3 Ways Difficult. </title> <booktitle> In Proceedings of the First Annual European Symposium on Algorithms (ESA '93), Springer Verlag Lecture Notes (726) on Computer Science ESA '93. </booktitle> <editor> ed. Tom Lengauer, p. </editor> <month> 157-168. </month>
Reference-contexts: If, in fact, the answer is "yes" for this instance, then one can prove that there exists an upper bound b (k) on the path or tree width of the graph. fl Some of the results contained in this paper were first reported in <ref> [11, 29, 10] </ref>. y Department of Computer Science, Utrecht University, P.O. Box 80.089, 3508 TB Utrecht, the Nether-lands. Email: hansb@cs.ruu.nl. Supported by the ESPRIT Basic Research Actions of the EC under contract 7141 (project ALCOM II). z Department of Computer Science, University of Victoria, P.O. <p> The classical and parameterized complexities of a 5 number of such problems related to ICG have recently been determined (see [7] and ref-erences). Indeed one such problem, Colored Graph Sandwich, is equivalent to ICG and was independently of <ref> [29] </ref> shown to be NP-complete in [34]. As values of k for ICG are typically small in practice, e.g., k = 8 in the yeast genome sequencing project [19], the parameterized version of ICG studied here is of some importance.
Reference: [30] <author> J. S. Felsentein. </author> <title> Phylogenies from Molecular Sequences: Inference and Reliability. </title> <journal> Annual Review of Genetics, </journal> <volume> 22 </volume> <pages> 521-565, </pages> <year> 1988. </year>
Reference-contexts: A phylogeny for the set S of species, is a rooted tree in which the leaves represent the species in S and the internal nodes of the tree represent the ancestral species. There are many different methods known for inferring the best phylogeny, e,g., parsimony, distance-matrix fitting, maximum likelihood <ref> [30, 50] </ref>. Over the last ten years, the computational complexities of many of these methods have been determined (see [52] and references). These complexities depend on, among other things, how the species in the given set are described. One of the standard models uses characters to describe species.
Reference: [31] <author> D. Fernandez-Baca. </author> <title> Allocating modules to processors in a distributed system. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 15(11) </volume> <pages> 1427-1436, </pages> <year> 1989. </year>
Reference-contexts: The MA problem is know to be N P -Hard in general (see <ref> [14, 31, 49, 51] </ref>) but polynomial for several restricted families of graphs. When G is restricted to be a series-parallel graph, the best known algorithm is O (mp 3 ) (see [14]) and when G is a tree, MA can be solved in time O (mp 2 ) (see [51]). <p> When G is restricted to be a series-parallel graph, the best known algorithm is O (mp 3 ) (see [14]) and when G is a tree, MA can be solved in time O (mp 2 ) (see [51]). Fernandez-Baca <ref> [31] </ref> generalize this result to graphs of bounded treewidth k giving an O (mp k+1 ) assignment algorithm. <p> This provides an interesting contrast with Triangulating Colored Graphs, which can be solved in time O (jV G j k+1 ) for any fixed k. For Module Allocation and Parametric Module Allocation, our results suggest that the algorithms found in <ref> [31] </ref> and [32] respectively are in some sense optimal. The algorithm for Module Allocation has running time O (mp k+1 ) and it appears unlikely that the factor of k can be removed from the exponent.
Reference: [32] <author> D. Fernandez-Baca and A. Medipalli. </author> <title> Parametric module allocation on partial k-trees. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 42 </volume> <pages> 738-742, </pages> <year> 1993. </year>
Reference-contexts: Fernandez-Baca [31] generalize this result to graphs of bounded treewidth k giving an O (mp k+1 ) assignment algorithm. Furthermore, Fernandez-Baca and Medepalli <ref> [32] </ref> consider a restricted version of MA (Parametric MA) where the cost functions e and C are linear functions of a new parameter t ; that is, C ((; ); (; )) = t a+b, and give an O (m 1+(k+1)log 2 p m) assignment algorithm. <p> This provides an interesting contrast with Triangulating Colored Graphs, which can be solved in time O (jV G j k+1 ) for any fixed k. For Module Allocation and Parametric Module Allocation, our results suggest that the algorithms found in [31] and <ref> [32] </ref> respectively are in some sense optimal. The algorithm for Module Allocation has running time O (mp k+1 ) and it appears unlikely that the factor of k can be removed from the exponent.
Reference: [33] <author> M. C. Golumbic. </author> <title> Algorithmic Graph Theory and Perfect Graphs. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: Then the pathwidth of G is at most k 1. Proof: It is easy to see that the pathwidth of an interval graph is one less than its maximum clique size, which equals its chromatic number (since interval graphs are perfect, see <ref> [33] </ref>).
Reference: [34] <author> M. C. Golumbic, H. Kaplan, and R. Shamir. </author> <title> On the complexity of DNA physical mapping. </title> <booktitle> Advances in Applied Mathematics, </booktitle> <volume> 15 </volume> <pages> 251-261, </pages> <year> 1994. </year>
Reference-contexts: The classical and parameterized complexities of a 5 number of such problems related to ICG have recently been determined (see [7] and ref-erences). Indeed one such problem, Colored Graph Sandwich, is equivalent to ICG and was independently of [29] shown to be NP-complete in <ref> [34] </ref>. As values of k for ICG are typically small in practice, e.g., k = 8 in the yeast genome sequencing project [19], the parameterized version of ICG studied here is of some importance.
Reference: [35] <author> E. M. Gurari and I. H. Sudborough. </author> <title> Improved dynamic programming algorithms for bandwidth minimization and the mincut linear arrangement problem. </title> <journal> J. Algorithms, </journal> <volume> 5 </volume> <pages> 531-546, </pages> <year> 1984. </year>
Reference-contexts: We remark that the method of Gurari and Sudborough from <ref> [35] </ref> can be generalised to solve colored cutwidth (or its directed variant) with a fixed number of colors, and a fixed cutwidth per color, in polynomial time. 3.4 Feasible Register Assignment One of the most fundamental problems encountered in computer system design is to efficiently allocate registers during execution of a
Reference: [36] <author> D. Gusfield. </author> <title> Efficient algorithms for inferring evolutionary trees. </title> <journal> Networks, </journal> <volume> 21 </volume> <pages> 19-28, </pages> <year> 1991. </year>
Reference-contexts: A special case of this problem asks if there is a phylogeny such that all given characters are true. Such a phylogeny is said to be perfect, and the characters are said to be perfectly compatible. The Perfect Phylogeny problem <ref> [36] </ref> is then defined as follows. Perfect Phylogeny Instance: A set of k characters, defining a species set S. Parameter: k. <p> Since molecular data results in characters with few states, attention has particularly been given to the case where the parameter r is bounded. When the characters are binary (i.e. r = 2), the problem can be solved in O (sk) time <ref> [36] </ref>. For r = 3, character compatibility can be determined in O (s 2 k) time [41] or O (sk 2 ) time [48]. For r = 4 (the case for characters derived from DNA sequences), the problem can be solved in O (s 2 k) time [41].
Reference: [37] <author> M. T. Hallett and H. T. Wareham. </author> <title> A Compendium of Parameterized Results. </title> <journal> SIGACT News 25(3): </journal> <pages> 122-123, </pages> <year> 1994. </year>
Reference-contexts: We designate the class of fixed-parameter tractable problems F P T . These definitions give us the hierarchy of parameterized complexity classes F P T W [1] W [2] W [t] W [P ] for which there are many natural hard or complete problems <ref> [37, 23, 24] </ref>. For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines [17, 22, 26]. <p> : : : ; s K ? Theorem 1 [8, 10] For all t 2 Z + , LCS-1 is hard for W [t]. 3 Other problems hard (or complete) for W [t] for all t include Weighted t-Normalized Satisfiability, Bandwidth, Domino Treewidth, and Uniform Emulation on a Path (see <ref> [37] </ref>). If any one these problems complete for W [t] is F P T then, all other problems complete for W [t], for all t, are F P T . We will describe all problems in this paper in the same format as above.
Reference: [38] <author> R. Idury and A. Schaffer. </author> <title> Triangulating three-colored graphs in linear time and linear space. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 2 </volume> <pages> 289-293, </pages> <year> 1993. </year>
Reference-contexts: This has been improved by Kannan and Warnow [42] to an O (2 2r sk 2 ) time algorithm. For the T CG problem, linear time algorithms for the case of two and three-colored graphs <ref> [12, 38, 40, 45] </ref> and an O ((n + m (k 2)) k+1 ) time algorithm for triangulating k-colored graphs [44] have been found.
Reference: [39] <author> J. R. Jungck, D. Dick, and A. G. Dick. </author> <title> Computer-assisted sequencing, interval graphs, and molecular evolution. </title> <journal> Biosystems, </journal> <volume> 15 </volume> <pages> 259-272, </pages> <year> 1982. </year>
Reference-contexts: The edges of the graph correspond to overlapping pairs of clones. The goal is to predict further overlaps, and ultimately to reconstruct the sequence X. It has long been recognized that graph intervalization problems are useful within molecular biology (see <ref> [39] </ref> and references). The classical and parameterized complexities of a 5 number of such problems related to ICG have recently been determined (see [7] and ref-erences). Indeed one such problem, Colored Graph Sandwich, is equivalent to ICG and was independently of [29] shown to be NP-complete in [34].
Reference: [40] <author> S. K. Kannan and T. J. Warnow. </author> <title> Triangulating 3-colored graphs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 5 </volume> <pages> 249-258, </pages> <year> 1992. </year>
Reference-contexts: Two vertices are adjacent if their corresponding character states share a species in common. Thus, the number of colors of T CG corresponds to the number of characters in the Perfect Phylogeny problem. In 1990, Kannan and Warnow <ref> [40] </ref> showed that these two problems were polynomially equivalent. Though these problems are NP-complete [48, 53], over the last few years, polynomial time algorithms for the various fixed-parameter versions of these problems have been found. <p> This has been improved by Kannan and Warnow [42] to an O (2 2r sk 2 ) time algorithm. For the T CG problem, linear time algorithms for the case of two and three-colored graphs <ref> [12, 38, 40, 45] </ref> and an O ((n + m (k 2)) k+1 ) time algorithm for triangulating k-colored graphs [44] have been found.
Reference: [41] <author> S. K. Kannan and T. J. Warnow. </author> <title> Inferring Evolutionary History from DNA sequences. </title> <journal> SIAM J. Comp., </journal> <volume> 23(4) </volume> <pages> 713-737, </pages> <year> 1994. </year>
Reference-contexts: When the characters are binary (i.e. r = 2), the problem can be solved in O (sk) time [36]. For r = 3, character compatibility can be determined in O (s 2 k) time <ref> [41] </ref> or O (sk 2 ) time [48]. For r = 4 (the case for characters derived from DNA sequences), the problem can be solved in O (s 2 k) time [41]. <p> For r = 3, character compatibility can be determined in O (s 2 k) time <ref> [41] </ref> or O (sk 2 ) time [48]. For r = 4 (the case for characters derived from DNA sequences), the problem can be solved in O (s 2 k) time [41]. An O (2 3r (sk 3 + k 4 )) time algorithm has been found for the general case by Agarwala and Fernandez-Baca [2]. This has been improved by Kannan and Warnow [42] to an O (2 2r sk 2 ) time algorithm.
Reference: [42] <author> S. K. Kannan and T. J. Warnow. </author> <title> A fast algorithm for the computation and enumeration of perfect phylogenies when the number of character states is fixed. </title> <booktitle> In Proceedings of the 6th ACM-SIAM Symposium on Discrete Algorithms, p. </booktitle> <pages> 595-603, </pages> <year> 1995. </year>
Reference-contexts: An O (2 3r (sk 3 + k 4 )) time algorithm has been found for the general case by Agarwala and Fernandez-Baca [2]. This has been improved by Kannan and Warnow <ref> [42] </ref> to an O (2 2r sk 2 ) time algorithm.
Reference: [43] <author> C.A. Meacham and G.F. Estabrook. </author> <title> Compatibility Methods in Systematics. </title> <journal> Annual Review of Ecology and Systematics, </journal> <volume> 16, </volume> <pages> 431-446, </pages> <year> 1985. </year>
Reference-contexts: Following [27], a character which satisfies this property is said to be true. The Character Compatibility problem (see <ref> [43] </ref> and references) looks for the phylogeny such that the largest possible subset of the given characters are true. A special case of this problem asks if there is a phylogeny such that all given characters are true.
Reference: [44] <author> F. R. McMorris, T. J. Warnow, and T. Wimer. </author> <title> Triangulating vertex-colored graphs. </title> <journal> SIAM J. Disc. Math., </journal> <volume> 7(2): </volume> <pages> 296-306, </pages> <year> 1994. </year>
Reference-contexts: For the T CG problem, linear time algorithms for the case of two and three-colored graphs [12, 38, 40, 45] and an O ((n + m (k 2)) k+1 ) time algorithm for triangulating k-colored graphs <ref> [44] </ref> have been found. These algorithms correspond to O (s) algorithms for compatibility of two or three characters on s species, and an O ((rk) k+1 + sk 2 ) time algorithm for compatibility of k r-state characters on s species.
Reference: [45] <author> S.-I. Nakano, T. Oguma, and T. Nishizeki. </author> <title> A linear time algorithm for c-triangulating three-colored graphs. </title> <journal> Trans. Institute of Electronics, Information and Communication, Eng., A., </journal> <note> 377-A(3):543-546, 1994. In Japanese. </note>
Reference-contexts: This has been improved by Kannan and Warnow [42] to an O (2 2r sk 2 ) time algorithm. For the T CG problem, linear time algorithms for the case of two and three-colored graphs <ref> [12, 38, 40, 45] </ref> and an O ((n + m (k 2)) k+1 ) time algorithm for triangulating k-colored graphs [44] have been found.
Reference: [46] <author> R. Sethi. </author> <title> Complete register allocation problems. </title> <journal> SIAM J. Comput., </journal> <volume> 4 </volume> <pages> 226-248, </pages> <year> 1975. </year>
Reference-contexts: there is at most one vertex u 2 S i with r (u) = R j ? The Feasible Register Assignment problem has been well studied and it is known that the decision version which asks whether there exists a feasible register assignment with k registers is NP -Hard (see <ref> [46] </ref>). Several restricted versions of this problem have been considered and linear time algorithms have been found if, for example, the programs compute solutions to expressions which have no common subexpressions (see [47]).
Reference: [47] <author> R. Sethi and J. D. Ullman. </author> <title> The generation of optimal code for arithmetic expressions. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 17 </volume> <pages> 715-728, </pages> <year> 1970. </year>
Reference-contexts: Several restricted versions of this problem have been considered and linear time algorithms have been found if, for example, the programs compute solutions to expressions which have no common subexpressions (see <ref> [47] </ref>). In our case, we consider a parameterized variant of Feasible Register Assignment where the maximum number of registers allowed during the execution of a program is small relative to the size of the program (i.e. the number of registers k is independent of the size of the graph G).
Reference: [48] <author> M. A. Steel. </author> <title> The complexity of reconstructing trees from qualitative characters and subtrees. </title> <journal> J. Classification, </journal> <volume> 9 </volume> <pages> 91-116, </pages> <year> 1992. </year>
Reference-contexts: Thus, the number of colors of T CG corresponds to the number of characters in the Perfect Phylogeny problem. In 1990, Kannan and Warnow [40] showed that these two problems were polynomially equivalent. Though these problems are NP-complete <ref> [48, 53] </ref>, over the last few years, polynomial time algorithms for the various fixed-parameter versions of these problems have been found. Since molecular data results in characters with few states, attention has particularly been given to the case where the parameter r is bounded. <p> When the characters are binary (i.e. r = 2), the problem can be solved in O (sk) time [36]. For r = 3, character compatibility can be determined in O (s 2 k) time [41] or O (sk 2 ) time <ref> [48] </ref>. For r = 4 (the case for characters derived from DNA sequences), the problem can be solved in O (s 2 k) time [41]. An O (2 3r (sk 3 + k 4 )) time algorithm has been found for the general case by Agarwala and Fernandez-Baca [2].
Reference: [49] <author> H. Stone. </author> <title> Critical load factors in two-processor distributed systems. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-4, </volume> <pages> p. 254-258, </pages> <year> 1978. </year>
Reference-contexts: The MA problem is know to be N P -Hard in general (see <ref> [14, 31, 49, 51] </ref>) but polynomial for several restricted families of graphs. When G is restricted to be a series-parallel graph, the best known algorithm is O (mp 3 ) (see [14]) and when G is a tree, MA can be solved in time O (mp 2 ) (see [51]).
Reference: [50] <author> D.L. Swofford and G.J. Olsen. </author> <title> Phylogeny reconstruction. </title> <editor> In: D.H. Hillis and C. Moritz (eds.) </editor> <title> Molecular Systematics, </title> <publisher> Sinauer Associates, </publisher> <address> Sunderland, MA, p. 411-501, </address> <year> 1990. </year>
Reference-contexts: A phylogeny for the set S of species, is a rooted tree in which the leaves represent the species in S and the internal nodes of the tree represent the ancestral species. There are many different methods known for inferring the best phylogeny, e,g., parsimony, distance-matrix fitting, maximum likelihood <ref> [30, 50] </ref>. Over the last ten years, the computational complexities of many of these methods have been determined (see [52] and references). These complexities depend on, among other things, how the species in the given set are described. One of the standard models uses characters to describe species.
Reference: [51] <author> D. Towsley. </author> <title> Allocating programs containing branches and loops within a multiple processor system. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-12, no. 10, </volume> <pages> p. 1018-1024, </pages> <year> 1986. </year> <month> 23 </month>
Reference-contexts: The MA problem is know to be N P -Hard in general (see <ref> [14, 31, 49, 51] </ref>) but polynomial for several restricted families of graphs. When G is restricted to be a series-parallel graph, the best known algorithm is O (mp 3 ) (see [14]) and when G is a tree, MA can be solved in time O (mp 2 ) (see [51]). <p> When G is restricted to be a series-parallel graph, the best known algorithm is O (mp 3 ) (see [14]) and when G is a tree, MA can be solved in time O (mp 2 ) (see <ref> [51] </ref>). Fernandez-Baca [31] generalize this result to graphs of bounded treewidth k giving an O (mp k+1 ) assignment algorithm.
Reference: [52] <author> H.T. Wareham. </author> <title> On the computational complexity of inferring evolutionary trees. </title> <type> Technical report 9301, </type> <institution> Department of Computer Science, Memorial University of Newfoundland, </institution> <year> 1993. </year> <note> Available by anonymous ftp from ftp.cs.mun.ca in directory pub/techreports. </note>
Reference-contexts: There are many different methods known for inferring the best phylogeny, e,g., parsimony, distance-matrix fitting, maximum likelihood [30, 50]. Over the last ten years, the computational complexities of many of these methods have been determined (see <ref> [52] </ref> and references). These complexities depend on, among other things, how the species in the given set are described. One of the standard models uses characters to describe species. Here, a character is an equivalence relation on the species set, partitioning the set into the different character states.
Reference: [53] <author> T. Warnow. </author> <title> Combinatorial algorithms for constructing phylogenetic trees. </title> <type> Ph.D. thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1991. </year>
Reference-contexts: Thus, the number of colors of T CG corresponds to the number of characters in the Perfect Phylogeny problem. In 1990, Kannan and Warnow [40] showed that these two problems were polynomially equivalent. Though these problems are NP-complete <ref> [48, 53] </ref>, over the last few years, polynomial time algorithms for the various fixed-parameter versions of these problems have been found. Since molecular data results in characters with few states, attention has particularly been given to the case where the parameter r is bounded.
Reference: [54] <author> T. V. Wimer. </author> <title> Linear algorithms on k-terminal graphs. </title> <type> Ph.D. thesis, </type> <institution> Dept. of Computer Science, Clemson University, </institution> <year> 1987. </year> <month> 24 </month>
Reference-contexts: In either case, the running time for this procedure is linear in the size of G but exponential only in k. By means of one of several general algorithmic design methodologies (see <ref> [1, 4, 5, 15, 20, 54] </ref>) we may then answer the original question in time linear in the size of G. Hence, for small values of k, this procedure may lead to algorithms that are practical even for very large graphs G.
References-found: 54

