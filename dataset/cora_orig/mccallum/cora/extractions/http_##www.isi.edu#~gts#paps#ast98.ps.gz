URL: http://www.isi.edu/~gts/paps/ast98.ps.gz
Refering-URL: http://www.isi.edu/~gts/CLIQUES/
Root-URL: http://www.isi.edu
Email: ateniese@isi.edu sti@zurich.ibm.com gts@isi.edu  
Title: Authenticated Group Key Agreement and Friends  
Author: Giuseppe Ateniese Michael Steiner Gene Tsudik 
Address: Marina Del Rey, CA Ruschlikon, Switzerland Marina Del Rey, CA  
Affiliation: USC Information Sciences Institute IBM Research Laboratory USC Information Sciences Institute  
Abstract: Many modern computing environments involve dynamic peer groups. Distributed simulation, multi-user games, conferencing and replicated servers are just a few examples. Given the openness of today's networks, communication among group members must be secure and, at the same time, efficient. This paper studies the problem of authenticated key agreement in dynamic peer groups with the emphasis on efficient and provably secure key authentication, key confirmation and integrity. It begins by considering 2-party authenticated key agreement and extends the results to Group Diffie-Hellman key agreement. In the process, some new security properties (unique to groups) are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Anderson and S. Vaudenay. </author> <title> Minding your p's and q's. </title> <booktitle> In Advances in Cryptology - Asiacrypt'96, </booktitle> <year> 1996. </year>
Reference-contexts: session keys, or 2) an active adversary to impersonate one of the protocol parties. (See [6, 5], for details.) 4 Protocol Preliminaries The following notation is used throughout the paper: n number of protocol parties (group members) i; j indices of group members M i i-th group member; i 2 <ref> [1; n] </ref> G unique subgroup of ZZ fl p of order q with p; q prime q order of the algebraic group ff exponentiation base; generator 3 in group G x i long-term secret key of M i r i random (secret) exponent 2 ZZ q generated by M i S <p> Most DL-based schemes have been designed using a prime order subgroup. One of the advantages of working in such a group is that all the elements (except the unity element) are generators of the subgroup itself. Moreover, using subgroup of prime order seems to be a prudent habit <ref> [1] </ref>; it also results in increased efficiency. When operating in subgroups it is important to take into account the attacks outlined in [1, 15]. <p> Moreover, using subgroup of prime order seems to be a prudent habit [1]; it also results in increased efficiency. When operating in subgroups it is important to take into account the attacks outlined in <ref> [1, 15] </ref>. To prevent masquerading or leaking of (even partial) information of the secret values, each party has to verify that the (purportedly random) values it receives are in fact elements of the subgroup. 4 Note that p, q and ff are public and common to all users. <p> Round i (0 &lt; i &lt; n): 1) M i selects random r i 2 R ZZ fl 2) M i ! M i+1 : fff r j jj 2 <ref> [1; i] </ref>g; ff r 1 r i Round n: 1) M n selects random r n 2 R ZZ fl 2) M n ! ALL M i : fff r i ji 2 [1; n [g We begin with a brief overview of GDH.2 in Figure 2. <p> We assume that M n shares (or is able to share) with each M i a distinct secret K in . For example, we can set K in = F (ff x i x n modp) with i 2 <ref> [1; n 1] </ref>. Where x i is a secret long term exponent selected by every M i (1 x i q 1) and ff x i mod p is the corresponding long-term public key of M i .
Reference: [2] <author> C. Becker and U. Wille. </author> <title> Communication complexity of group key distribution. </title> <booktitle> In ACM Conference on Computer and Communication Security, </booktitle> <month> November </month> <year> 1998. </year>
Reference-contexts: Several concrete protocols were demonstrated that fit the requirements of DPGs. Moreover, these protocols are shown to be optimal with respect to certain measures of protocol complexity <ref> [20, 2] </ref>. In this section we extend the GDH protocols to provide implicit key authentication.
Reference: [3] <author> M. Bellare, R. Canetti, and H. Krawczyk. </author> <title> A modular approach to the design and analysis of authentication and key exchange protocols. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <year> 1998. </year>
Reference: [4] <author> M. Bellare and P. Rogaway. </author> <title> Entity authentication and key distribution. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1993. </year>
Reference-contexts: The paper concludes with the discussion of other group security services that are contingent upon authenticated key agreement. Disclaimer: most proofs in this paper are fairly informal in nature. Work is under way to construct more rigorous formal proofs within the confines of the random oracle model <ref> [4] </ref> and the 2-party authentication model of Bellare et al.[3]. 2 Key Establishment Protocols Key establishment protocols can be roughly classified in two categories: key agreement protocols [21] and centralized key 1 Informally, this means that old keys cannot be known to new members and new keys cannot be known to
Reference: [5] <author> M. Burmester. </author> <title> On the risk of opening distributed keys. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1994. </year>
Reference-contexts: Definition 3.8 A protocol is said to be vulnerable to known-key attack if compromise of past session keys allows: 1) a passive adversary to compromise future session keys, or 2) an active adversary to impersonate one of the protocol parties. (See <ref> [6, 5] </ref>, for details.) 4 Protocol Preliminaries The following notation is used throughout the paper: n number of protocol parties (group members) i; j indices of group members M i i-th group member; i 2 [1; n] G unique subgroup of ZZ fl p of order q with p; q prime <p> Their definition in a group setting remains to be worked out.) Also, as noted in <ref> [5] </ref>, a simple cure for known-key attacks is by setting S n = h (S n (M i )) where h () is an appropriate collision-resistant hash function such as SHA [14]. 6.2 Complete Group Key Authentication The above protocol (A-GDH.2) achieves implicit key authentication in a relatively weak form since
Reference: [6] <author> M. Burmester and Y. Desmedt. </author> <title> Towards practical proven secure authenticated key distribution. </title> <booktitle> In ACM Conference on Computer and Communication Security, </booktitle> <year> 1993. </year>
Reference-contexts: Definition 3.8 A protocol is said to be vulnerable to known-key attack if compromise of past session keys allows: 1) a passive adversary to compromise future session keys, or 2) an active adversary to impersonate one of the protocol parties. (See <ref> [6, 5] </ref>, for details.) 4 Protocol Preliminaries The following notation is used throughout the paper: n number of protocol parties (group members) i; j indices of group members M i i-th group member; i 2 [1; n] G unique subgroup of ZZ fl p of order q with p; q prime
Reference: [7] <author> M. Burmester and Y. Desmedt. </author> <title> A secure and efficient conference key distribution system. </title> <booktitle> In Advances in Cryptology - EUROCRYPT, </booktitle> <year> 1994. </year>
Reference-contexts: Moreover, the benefits of BA over the simple key confirmation method sketched in Section 7 are unclear. grafted onto GDH.3.) In addition, we are designing authenticated key agreement protocols based on the Burmester-Desmedt model <ref> [7, 8] </ref> which is very efficient in certain environments, e.g., broadcast LANs. Our long-term goal is to develop a general-purpose toolkit for key agreement and related security services in DPGs. Initial clients for the toolkit may include voice conferencing over IP, replicated Web servers and private (closed) mailing lists.
Reference: [8] <author> M. Burmester and Y. Desmedt. </author> <title> Efficient and secure conference key distribution. </title> <booktitle> In Cambridge Workshop on Security Protocols, volume 1189 of Lecture Notes in Computer Science, </booktitle> <pages> pages 119-129. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Moreover, the benefits of BA over the simple key confirmation method sketched in Section 7 are unclear. grafted onto GDH.3.) In addition, we are designing authenticated key agreement protocols based on the Burmester-Desmedt model <ref> [7, 8] </ref> which is very efficient in certain environments, e.g., broadcast LANs. Our long-term goal is to develop a general-purpose toolkit for key agreement and related security services in DPGs. Initial clients for the toolkit may include voice conferencing over IP, replicated Web servers and private (closed) mailing lists.
Reference: [9] <author> R. Canetti. </author> <title> Studies in secure multiparty computation and applications. </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science and Applied Mathematics, Weizmann Institute of Science, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Therefore, we claim that BA alone is not enough to build a robust GKA protocol. 7 On the other hand, GKA has similarities with secure multiparty computation (SMPC, e.g <ref> [9, 10] </ref>). In fact, GKA can be viewed as a special case of SMPC. However, we note that general SMPC techniques typically yield highly inefficient protocols. 10 Conclusions: On-going and Future Work This paper represents the third tier in developing security protocols and services for DPGs.
Reference: [10] <editor> D. Chaum, C. Crepeau, and I. Damgaard. </editor> <title> Multiparty unconditional secure protocols. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <year> 1988. </year>
Reference-contexts: Therefore, we claim that BA alone is not enough to build a robust GKA protocol. 7 On the other hand, GKA has similarities with secure multiparty computation (SMPC, e.g <ref> [9, 10] </ref>). In fact, GKA can be viewed as a special case of SMPC. However, we note that general SMPC techniques typically yield highly inefficient protocols. 10 Conclusions: On-going and Future Work This paper represents the third tier in developing security protocols and services for DPGs.
Reference: [11] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-22(6):644-654, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: Larger groups are harder to control on a peer basis and are typically organized in a hierarchy of some sort. Recently, several key agreement protocols geared for DPGs were proposed in [20]. They were obtained by extending Diffie-Hellman key agreement <ref> [11] </ref> to n parties. These protocols perform initial key agreement (IKA) within a group. Once a group is formed and the initial key is agreed upon, group members may leave (or be excluded) and new members may join. <p> Later on, we will suppose that the adversary C operates on this type of elements. 5 Authenticated 2-party Key Agreement In this section we develop an extension to the Diffie-Hellman (DH) <ref> [11] </ref> key agreement protocol that provides key authentication. We explicitly avoid requiring any cryptographic tools (e.g., symmetric encryption) other than those necessary for a normal DH key agreement. Before turning to the actual protocol, it is important to emphasize that there already exist secure protocols for authenticated DH-based key agreement.
Reference: [12] <author> N. Koblitz. </author> <title> A Course in Number Theory and Cryptography. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin Germany, Berlin, </address> <year> 1987. </year>
Reference-contexts: Given a and p, finding the inverse of a 2 ZZ p requires only O (log 2 p) bit operations (using the extended Euclidean algorithm). Similarly, the multiplication of a and b modulo p requires O (log 2 p) bit operations. (See <ref> [12] </ref>, [18] for a complete treatment of modular operations.) The only somewhat surprising element of this analysis is the relatively low additional cost of SA-GDH.2 as compared to that of GDH.2 and A-GDH.2.
Reference: [13] <institution> NIST Computer Systems Laboratory. </institution> <note> Digital signature standard (draft). FIPS PUB 186, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: One approach is to use the NIST method for selecting DSA primes as described in the FIPS 186 document <ref> [13] </ref>. In this context, the ability of an active adversary C to modify or inject messages is quite "limited". <p> This would allow any group member to use DSA <ref> [13] </ref> (or any El Gamal family) signatures to authenticate itself (as a group member) to both insiders and outsiders. The same group public key can be viewed as long-term group Diffie-Hellman exponent and outsiders (including other groups) can establish shared keys with the entire group in a trivial manner.
Reference: [14] <institution> NIST Computer Systems Laboratory. </institution> <note> Secure hash standard (draft). FIPS PUB 180-1, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: Their definition in a group setting remains to be worked out.) Also, as noted in [5], a simple cure for known-key attacks is by setting S n = h (S n (M i )) where h () is an appropriate collision-resistant hash function such as SHA <ref> [14] </ref>. 6.2 Complete Group Key Authentication The above protocol (A-GDH.2) achieves implicit key authentication in a relatively weak form since the key is not di rectly authenticated between an arbitrary M i and M j (i 6= j). Instead, all key authentication is performed through M n .
Reference: [15] <author> C. Hoon Lim and P. Joong Lee. </author> <title> A key recovery attack on discrete log-based schemes using a prime order subgroup. </title> <booktitle> In Advances in Cryptology - CRYPTO, </booktitle> <year> 1997. </year> <month> 9 </month>
Reference-contexts: Moreover, using subgroup of prime order seems to be a prudent habit [1]; it also results in increased efficiency. When operating in subgroups it is important to take into account the attacks outlined in <ref> [1, 15] </ref>. To prevent masquerading or leaking of (even partial) information of the secret values, each party has to verify that the (purportedly random) values it receives are in fact elements of the subgroup. 4 Note that p, q and ff are public and common to all users. <p> Although this seems to be sufficient, the security of this method needs further study <ref> [15] </ref>. Protocol A-DH: Let p, q, G be as defined above, and let ff be a generator of G. Initialization. Let x 1 and x 2 be two integers such that 1 x 1 ; x 2 q 1.
Reference: [16] <author> N. Lynch. </author> <title> Distributed algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco 1996. </address>
Reference: [17] <author> T. Matsumoto, Y. Takashima, and H. Imai. </author> <title> On seeking smart public-key-distribution systems. </title> <journal> Transactions of the IECE, </journal> <volume> E69, </volume> <year> 1986. </year>
Reference-contexts: However, some are not contributory (such as El Gamal), some require more messages or assume a priori access to certified long-term keys, while others do not offer PFS or are vulnerable to so-called known-key attacks. (For example, some of the protocols in the MTI protocol family <ref> [17] </ref>.) An additional goal is to come up with a protocol that is easily extendible from 2-to n-party key agreement. Yet another, perhaps superficial, issue has to do with minimizing the security dependencies of a protocol.
Reference: [18] <author> A. Menezes, P. van Oorschot, and S. Vanstone. </author> <title> Handbook of applied cryptography. CRC Press series on discrete mathematics and its applications. </title> <publisher> CRC Press, </publisher> <year> 1996. </year> <note> ISBN 0-8493-8523-7. </note>
Reference-contexts: And, as always, ironclad security must be achievable with the lowest possible cost. We now present some definitions for the above and other terminology used in this paper. (Some of these are adapted from Menezes et al. <ref> [18] </ref>) Definition 3.1 A key agreement protocol is a key establishment technique whereby a shared secret key is derived by two or more specified parties as a function of information contributed by, or associated with, each of these, such that no party can predetermine the resulting value. <p> Definition 3.2 A key agreement protocol is contributory if each party equally contributes to the key and guarantees its freshness. For example, according to this definition, the basic two-party Diffie-Hellman protocol is contributory. On the other hand, the ElGamal one-pass <ref> [18] </ref> protocol is not contributory as only one of the parties contributes a fresh exponent. Definition 3.3 Let R be an n-party key agreement protocol, M be the set of protocol parties and let S n be a secret key jointly generated as a result of R. <p> Given a and p, finding the inverse of a 2 ZZ p requires only O (log 2 p) bit operations (using the extended Euclidean algorithm). Similarly, the multiplication of a and b modulo p requires O (log 2 p) bit operations. (See [12], <ref> [18] </ref> for a complete treatment of modular operations.) The only somewhat surprising element of this analysis is the relatively low additional cost of SA-GDH.2 as compared to that of GDH.2 and A-GDH.2. <p> Considering that it offers complete group key authentication and several other useful services (when coupled with key confirmation; see below) the added overhead is well justified. 7 New Services in Group Setting As mentioned in the introduction, key confirmation (Def. 3.4 and <ref> [18] </ref>) is an important feature in key agreement protocols. Its purpose is to convince one or more parties that its peer (or a group thereof) is in possession of the key.
Reference: [19] <author> J. Smith and F. Weingarten. </author> <title> Research challenges for the next generation internet, </title> <month> May </month> <year> 1997. </year> <note> Report from the Workshop on Research Directions for NGI. </note>
Reference-contexts: 1 Introduction This paper is concerned with security services in the context of dynamic peer groups (DPGs). Such groups are common in many network protocol layers and in many areas of modern computing and the solution to their security needs, in particular key management, are still open research challenges <ref> [19] </ref>. Examples include replicated servers (such as database, web, time), audio and video conferencing and, more generally, collaborative applications of all kinds. DPGs tend to be relatively small in size, on the order of a hundred members.
Reference: [20] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> Diffie-hellman key distribution extended to groups. </title> <booktitle> In ACM Conference on Computer and Communication Security, </booktitle> <pages> pages 31-37, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: DPGs tend to be relatively small in size, on the order of a hundred members. Larger groups are harder to control on a peer basis and are typically organized in a hierarchy of some sort. Recently, several key agreement protocols geared for DPGs were proposed in <ref> [20] </ref>. They were obtained by extending Diffie-Hellman key agreement [11] to n parties. These protocols perform initial key agreement (IKA) within a group. Once a group is formed and the initial key is agreed upon, group members may leave (or be excluded) and new members may join. <p> The operations supported by these protocols are collectively called auxiliary key agreement (AKA). AKA protocols, also based on Diffie-Hellman extensions, have been developed in [21]. Both IKA and AKA protocols have been shown secure against passive adversaries. 2 This paper leverages the results of <ref> [20, 21] </ref> to develop practical and secure authenticated key agreement protocols for DPGs. We also consider other relevant security features such as key confirmation, key integrity and entity authentication. <p> A nice feature of the A-DH protocol is that it does not require a priori knowledge of the long-term public keys of the parties involved. In fact, certificates can be piggy-backed onto existing protocol messages. This is a consequence of the protocol's "asymmetry". 6 Authenticated Group Key Agreement In <ref> [20] </ref>, a class of generic n-party DH protocols is defined. The security of the entire protocol class is shown secure against passive adversaries based on the intractability of the Diffie-Hellman Decision (DDH) problem. Several concrete protocols were demonstrated that fit the requirements of DPGs. <p> Several concrete protocols were demonstrated that fit the requirements of DPGs. Moreover, these protocols are shown to be optimal with respect to certain measures of protocol complexity <ref> [20, 2] </ref>. In this section we extend the GDH protocols to provide implicit key authentication. <p> In this section we extend the GDH protocols to provide implicit key authentication. In doing so, we make use of the A-DH protocol discussed in section 5. 6.1 Authenticated GDH.2 protocol Two practical protocols: GDH.2 and GDH.3 are defined in <ref> [20] </ref>. (Another protocol, GDH.1, is used for demonstration purposes only.) The GDH.2 protocol is minimal in terms of the total number of protocol messages. GDH.3, on the other hand, aims to minimize computation costs. <p> Then, our adversary is able to compute a subset of V = fff (S) j S fr 1 ; . . . ; r n gg. But, as shown in <ref> [20] </ref>, given V , it is intractable to find information on the group key S n = ff r 1 ;...r n , if the DDH problem in prime-order subgroup is hard. Resistance to known-key attacks. <p> The following two tables summarize, respec tively, the communication and computation overhead of the following: * GDH.2 plain group key agreement <ref> [20] </ref>. * A-GDH.2 authenticated group key agreement as spec ified in Section 6.1. <p> However, we note that general SMPC techniques typically yield highly inefficient protocols. 10 Conclusions: On-going and Future Work This paper represents the third tier in developing security protocols and services for DPGs. The first tier was provided by group Diffie-Hellman key agreement <ref> [20] </ref> and the second, by extensions of the latter to support group membership changes [21]. This paper incorporates other important services (key authentication, key confirmation and entity authentication) into group key agreement. We are currently working on the prototype implementation of the protocols described above. <p> We are currently working on the prototype implementation of the protocols described above. This includes both GDH.2-based and GDH.3-based protocols. (GDH.3 is a key agreement model aimed at minimizing computations by group members <ref> [20] </ref>; protocols presented above are easily 6 Note that BA protocols in general do not care about confidentiality. 7 Despite the above, BA could be used for key confirmation (Section 7) but that would represent overkill: BA protocols in the best-possible settings (signatures) require at least (t + 1) rounds to
Reference: [21] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> CLIQUES: A new approach to group key agreement. </title> <booktitle> In IEEE International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1998. </year> <month> 10 </month>
Reference-contexts: San Francisco, CA. in order to preserve key independence. 1 Since re-running full IKA for each membership change is expensive, other supporting protocols are necessary. The operations supported by these protocols are collectively called auxiliary key agreement (AKA). AKA protocols, also based on Diffie-Hellman extensions, have been developed in <ref> [21] </ref>. Both IKA and AKA protocols have been shown secure against passive adversaries. 2 This paper leverages the results of [20, 21] to develop practical and secure authenticated key agreement protocols for DPGs. We also consider other relevant security features such as key confirmation, key integrity and entity authentication. <p> The operations supported by these protocols are collectively called auxiliary key agreement (AKA). AKA protocols, also based on Diffie-Hellman extensions, have been developed in [21]. Both IKA and AKA protocols have been shown secure against passive adversaries. 2 This paper leverages the results of <ref> [20, 21] </ref> to develop practical and secure authenticated key agreement protocols for DPGs. We also consider other relevant security features such as key confirmation, key integrity and entity authentication. <p> Work is under way to construct more rigorous formal proofs within the confines of the random oracle model [4] and the 2-party authentication model of Bellare et al.[3]. 2 Key Establishment Protocols Key establishment protocols can be roughly classified in two categories: key agreement protocols <ref> [21] </ref> and centralized key 1 Informally, this means that old keys cannot be known to new members and new keys cannot be known to former members. 2 The security is based on the polynomial indistinguishability of a Diffie-Hellman key from an arbitrary random value. 1 distribution protocols based on some form <p> The first tier was provided by group Diffie-Hellman key agreement [20] and the second, by extensions of the latter to support group membership changes <ref> [21] </ref>. This paper incorporates other important services (key authentication, key confirmation and entity authentication) into group key agreement. We are currently working on the prototype implementation of the protocols described above.
References-found: 21

