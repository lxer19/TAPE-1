URL: http://www.icsi.berkeley.edu/~tschudin/ps/ecoop97.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/~tschudin/
Root-URL: http://www.icsi.berkeley.edu
Email: (tschudin@icsi.berkeley.edu)  
Phone: 2  
Title: Using Mobile Code to Control Native Execution of Distributed UNIX  
Author: Christian Tschudin Murhimanya Muhugusa and Guy Neuschwander 
Address: ICSI, Berkeley  
Affiliation: 1  CUI, University of Geneva  
Abstract: This paper presents MOS, a hybrid mobile/native code architecture where interpreted mobile code (messengers expressed in the M language) is used to control the execution of native code. This results in the mobile code interpreters becoming microkernels. Interpreted messengers are responsible for resource allocation in the network i.e., they are the glue between remote nodes, while CPU intensive tasks are executed by native code targeted at some specific hardware architecture. We describe the MOS support for native code execution and an implementation done at the University of Geneva where we demonstrated the native execution of a UNIX process under interpreted mobile code control. Keywords: Mobile code, messengers, operating systems, microkernel, dis tributed UNIX.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A New Kernel Foundation for Unix Development. </title> <booktitle> In Summer Conference. Usenix Association, </booktitle> <year> 1986. </year>
Reference-contexts: For work on handling software mobility at the level of native code only, we may also refer to [9]. Beside general and older work on micro- and nano-kernels [7,10,4], Mach <ref> [1] </ref>, Chorus [12], process migration [2] and Exokernel [6], we point to a paper that is closely related to our work and was published in 1985: in [3], Banino et. al. describe "activity messages" which are a special form of messages sent between Chorus `actors'.
Reference: 2. <author> R. Alonso and K. Kyrimis. </author> <title> A Process Migration Implementation for a UNIX Sys--tem. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <pages> pages 365-372, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: For work on handling software mobility at the level of native code only, we may also refer to [9]. Beside general and older work on micro- and nano-kernels [7,10,4], Mach [1], Chorus [12], process migration <ref> [2] </ref> and Exokernel [6], we point to a paper that is closely related to our work and was published in 1985: in [3], Banino et. al. describe "activity messages" which are a special form of messages sent between Chorus `actors'.
Reference: 3. <author> J.S. Banino, G. Morisset, and M. Rozier. </author> <title> Controlling distributed processing with chorus activity messages. </title> <booktitle> In 8th Hawai International Conference on System Science, </booktitle> <month> January </month> <year> 1985. </year>
Reference-contexts: Beside general and older work on micro- and nano-kernels [7,10,4], Mach [1], Chorus [12], process migration [2] and Exokernel [6], we point to a paper that is closely related to our work and was published in 1985: in <ref> [3] </ref>, Banino et. al. describe "activity messages" which are a special form of messages sent between Chorus `actors'. They can influence how the message's content should be routed through different and possibly distant actors that work on the content.
Reference: 4. <author> A. C. Bomberger, A. P. Frantz, W. S. Frantz, A. C. Hardy, N. Hardy, Landau C. R., and J. S. Shapiro. </author> <booktitle> The KeyKOS Nanokernel Architecture. In Proceedings of the USENIX Workshop in Micro-Kernels and Other Kernel Architectures, </booktitle> <pages> pages 95-112. </pages> <publisher> USENIX Association, </publisher> <month> April </month> <year> 1992. </year>
Reference: 5. <author> Giovanna Di Marzo, Murhimanya Muhugusa, Christian F. Tschudin, and Jurgen Harms. </author> <title> The Messenger Paradigm and its Impact on Distributed Systems. </title> <booktitle> In Proceedings of the International Workshop on Intelligent Computer Communication, ICC'95, </booktitle> <pages> pages 79-94, </pages> <address> Cluj-Napoca, Romania, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: To a lesser extend this can also be seen as an attempt to glide mobile code into distributed operating systems. Messengers M [17] is the language in which our mobile programs called messenger <ref> [5] </ref> are expressed. The goal of the messenger project is to identify the minimal support an execution platform has to provide in order to exploit mobile code for general distributed applications ranging from lower network layers up to user-level applications.
Reference: 6. <author> D. R. Engler, M. F. Kaashoek, and J. O'Toole. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings 15th ACM Symposium on Operating System Principles. ACM, </booktitle> <year> 1995. </year>
Reference-contexts: For work on handling software mobility at the level of native code only, we may also refer to [9]. Beside general and older work on micro- and nano-kernels [7,10,4], Mach [1], Chorus [12], process migration [2] and Exokernel <ref> [6] </ref>, we point to a paper that is closely related to our work and was published in 1985: in [3], Banino et. al. describe "activity messages" which are a special form of messages sent between Chorus `actors'.
Reference: 7. <author> Michel Gien. </author> <title> Micro-Kernel Design. </title> <journal> UNIX Review, </journal> <volume> 8(11) </volume> <pages> 58-63, </pages> <month> November </month> <year> 1990. </year>
Reference: 8. <author> Johannes Helander. </author> <title> Unix under Mach The LITES Server. </title> <type> Master thesis, </type> <institution> Helsinki University of Technology, </institution> <year> 1994. </year>
Reference-contexts: A major simplification consisted in writing our own (with a dozen or so of supported system calls quite incomplete) UNIX server which most of the time maps system calls to the underlying Linux system. For a fully working UNIX server we would have to take e.g., Helander's serverized Linux <ref> [8] </ref> and write a complete replacement for the interfacing Mach library. The task of this replacement library would have been to translate Mach calls to the submission and reception of messengers i.e., provide important pieces of a Mach emulation.
Reference: 9. <author> K. Kato, K. Toumura, K. Matsubara, S. Aikawa, J. Yoshida, K. Kono, K. Taura, and T. Sekiguchi. </author> <title> Protected and Secure Mobile Object Computing in PLANET. </title> <booktitle> In Proceedings of the 2nd ECOOP Workshop on Mobile Object Systems, </booktitle> <address> Linz 1996. dpunkt, </address> <year> 1997. </year>
Reference-contexts: For work on handling software mobility at the level of native code only, we may also refer to <ref> [9] </ref>.
Reference: 10. <author> Jochen Liedtke. </author> <booktitle> On -Kernel Construction. In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, volume 29 of ACM Operating Systems Review, </booktitle> <pages> pages 237-250, </pages> <month> December </month> <year> 1995. </year>
Reference: 11. <author> Hongjiu Lu. </author> <title> Elf : From the programmer perspective. </title> <institution> NYNEX Science & Technology Inc., </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: During the execution of a UNIX process, the following software pieces are inter- working (see figure 3): the process' native x86 code which was downloaded to the MOS machine (for convenience, we used the old a.out format instead of the much richer ELF <ref> [11] </ref> format used today). - NCEL Native Code Execution Library: a set of routines written in M which are controlling the native code execution.
Reference: 12. <author> Guillemont M. and et al. </author> <title> The CHORUS distributed operating system: design and implementation. In Local Computer Networks. </title> <booktitle> Proceedings of the IFIP TC 6 International In-Depth Symposium, Florence/Italy, </booktitle> <pages> pages 207-223. </pages> <publisher> North-Holland, </publisher> <month> April </month> <year> 1982. </year>
Reference-contexts: For work on handling software mobility at the level of native code only, we may also refer to [9]. Beside general and older work on micro- and nano-kernels [7,10,4], Mach [1], Chorus <ref> [12] </ref>, process migration [2] and Exokernel [6], we point to a paper that is closely related to our work and was published in 1985: in [3], Banino et. al. describe "activity messages" which are a special form of messages sent between Chorus `actors'.
Reference: 13. <author> Guy Neuschwander. </author> <title> Execution du code natif dans l'environnement MOS. </title> <type> Master's thesis, </type> <institution> Departement of Computer Science, University of Geneva, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: The next section describes in more detail a simple experiment with distributing Linux under mobile code control. 3 Distributed Execution of Linux Processes In a master thesis at the University of Geneva <ref> [13] </ref>, the functionality of the native code support added to M was tested and the necessary mobile code software was written in order to remotely execute a Linux user process.
Reference: 14. <author> J. W. Stamos and D. K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transaction on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: So there remains a large playground for finding solutions that reconcile these two viewpoints. 3.3 Related Work Moving native code to a remote node for execution is a form of ordinary remote evaluation <ref> [14] </ref> with our mobile code plane being responsible for its configuration. For work on handling software mobility at the level of native code only, we may also refer to [9].
Reference: 15. <author> D. L. Tennenhouse, J. M. Smith, W. D. Sincoskie, D. J. Wetherall, and G. J. Minden. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: This applies to distributed operating systems as well as active networks <ref> [15] </ref> where slow mobile code can be used to setup and manage high-speed links.
Reference: 16. <author> Christian Tschudin. </author> <title> Open Resource Allocation for Mobile Code. </title> <booktitle> In Proceedings of the First International Workshop on Mobile Agents MA'97, </booktitle> <volume> LNCS 1219, </volume> <pages> pages 186-197, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: In general, fully transparent execution of processes may not be possible and recommended for every service process inside a micro-kernel architecture because of lower quality-of-service guarantees within the open mobile code environment. This remark mainly points to the research area of open resource allocation <ref> [16] </ref> for mobile code that is still in its infancy. Finally, we nevertheless emphasize how close micro-kernel and execution support for mobile programs are, mainly conceptually but to some extent also at the implementation level.
Reference: 17. <author> Christian F. Tschudin. </author> <title> An Introduction to the M0 Messenger Language. </title> <type> Technical Report No 86 (Cahier du CUI), </type> <institution> University of Geneva, </institution> <year> 1994. </year>
Reference-contexts: To a lesser extend this can also be seen as an attempt to glide mobile code into distributed operating systems. Messengers M <ref> [17] </ref> is the language in which our mobile programs called messenger [5] are expressed.
Reference: 18. <author> Christian F. Tschudin, Giovanna Di Marzo, Murhimanya Muhugusa, and Jurgen Harms. </author> <title> Messenger-based Operating Systems. </title> <type> Technical Report No 90 (Cahier du CUI), </type> <institution> University of Geneva, </institution> <year> 1994. </year>
Reference-contexts: This paper presents a hybrid architecture where the interpreted mobile code language M is used for controlling the remote execution of native Intel x86 code, more specifically Linux processes, and implements a concept that was introduced in 1994 in <ref> [18] </ref>. The goal of such an "OS wrapper" is mainly to extend the (often interpreted) mobile ? This work is supported by the Swiss National Fund for Scientific Research (FNSRS) grant 20-40631.94 code environment by allowing the execution of not linked-in native code.
References-found: 18

