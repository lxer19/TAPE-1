URL: http://www.cs.ucl.ac.uk/staff/m.slater/Teaching/CG/1997-98/Chapters/c8vis.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/m.slater/Teaching/CG/1997-98/Chapters/
Root-URL: http://www.cs.ucl.ac.uk
Title: Chapter 8 Visibility and Rendering 8.1 Introduction a right-handed WC system, choose three successive vertices
Keyword: 8.2 Back-face Elimination  
Date: December, 1996 (partially revised)  
Note: Computer Graphics and Virtual Environments, (C) M. Slater,  Assuming  can be computed as l(,,) ax+by+cz-d 0, as discussed in Chapter 4.  is back-facing and may be eliminated. Suppose COP (c is the COP represented in WC then l(c ,c ,c &gt; 0 if (c ,c ,c  
Abstract: The visibility problem (also called hidden surface removal) is concerned with computing and those parts of a scene which are visible to the camera. This simulates the situation with real vision: an observer of a scene can only see those parts of the scene from which light can be traced unobstructed to his or her eyes (the light might be reflected or refracted from the objects in the scene, which may be illuminated by one or more light sources), and we saw an example of such a method, using ray tracing in the previous chapter. This Chapter reviews some of the solutions currently in use to solve this problem, and considers one particular solution, the z-buffer in depth. A classic reference for this topic is Sutherland et. al., (1974), which provides an analysis of ten hidden-surface algorithms. It is usual to characterise such algorithms according to whether they process in image space or object space. Object space algorithms involve a visibility pre-computation in World Coordinate space, and some approaches based on Binary Space Partition (BSP) trees will be considered in Chapter XXX. Image space algorithms defer solution until the last instance - i.e., visibility calculations, performed on a pixel by pixel basis, are carried out at the moment just before setting the intensity of the pixels on the display. This is an idealised dichotomy, some algorithms provide a mixture of both approaches. There follow descriptions of three algorithms which are essentially image space. It is assumed throughout that clipping has been carried out and that the scene has been transformed into Projection Space, which considerably simplifies the computation. As mentioned, a subsequent chapter will consider the use of Binary Space Partition trees, which provide an essentially object space approach. First, however, before launching into these algorithms, it is worth noting that mileage can be attained by a simple method of preprocessing known as back-face elimination . For scenes consisting of a single polyhedra, this is all that is required. For other scenes, about half of the 3D polygons can be removed by this method. This can be used where the scene is described as a data structure representing a set of planar polygons, so that all objects are polyhedra (for example as in the Winged Edge structure). Each face of a polyhedron, will either face towards or away from the camera. Those facing away from the camera can be eliminated from all further computation. It is easy to compute whether a face is pointing away from the camera, for this can be determined from the plane equation of the polygon. ) is in front of the plane of the polygon, &lt; 0 if behind, and = 0 if on. Alternatively, suppose that the polygon has been transformed to Projection Space. Then if the z component of the normal (computed in PS) is positive, this normal must face away from the viewer (remember that the COP is at (0,0,- ) in this space). However, this approach requires computation of the plane equation in PS. This can be carried out directly, using 3 successive points of the transformed polygon, or computed from the original WC plane equation as follows: The WC plane equation can be represented as: 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bishop, G. </author> <title> (1986) Fast Phong Shading , Computer Graphics . Bui-Tong, </title> <booktitle> Phong (1975) Illumination for Computer-Generated Pictures , Communications of the ACM , 18(6), </booktitle> <pages> 311-317. </pages>
Reference-contexts: The calculation is expensive involving a square root. There are methods to speed up Phong shading, for example as in <ref> (Bishop, 1986) </ref>, and (Claussen, 1989). Bishop exploits a Taylor expansion of the Phong expression, to provide a useful simplified approximation. Claussen notes that good results can be obtained by expressing the normals in spherical coordinates form, so that angles can be interpolated avoiding the normalisation. (C) M.
Reference: <author> Claussen, U. </author> <title> (1989) On Reducing the Phong Shading Method , Eurographics 89 , eds W. </title> <publisher> Hansmann, F.R.A. </publisher>
Reference-contexts: The calculation is expensive involving a square root. There are methods to speed up Phong shading, for example as in (Bishop, 1986), and <ref> (Claussen, 1989) </ref>. Bishop exploits a Taylor expansion of the Phong expression, to provide a useful simplified approximation. Claussen notes that good results can be obtained by expressing the normals in spherical coordinates form, so that angles can be interpolated avoiding the normalisation. (C) M.
Reference: <author> Hopgood, W. </author> <month> Strasser, </month> <pages> 333-344 (North-Holland). </pages>
Reference: <author> Crocker, </author> <title> G.A. (1984) Invisibility Coherence for Faster Scan-Line Hidden Surface Algorithms, </title> <booktitle> Computer Graphics (SIGGRAPH) , 18(3) 95-102. </booktitle>
Reference: <author> Sutherland, </author> <title> I.E., Sproull, R.F., Schumacher, R.A. </title> <journal> (1974) A Characterization of Ten Hidden-Surface Algorithms ACM Computing Surveys , Vol. </journal> <volume> 6 (1), </volume> <month> pp.1-55. </month>
Reference: <author> Newell, M.E., Newell, R.G. and Sancha, </author> <title> T.L. (1972) A Solution to the Hidden Surface Problem , Proceedings of the ACM National Conference , 443-450. </title>
Reference-contexts: If all tests fail, then split the window into four, and apply the procedure recursively to each of the four in turn. (C) M. Slater, Computer Graphics and Virtual Environments, December, 1997. 7 8.6 Painters' Algorithm This algorithm <ref> (Newell et. al., 1972) </ref> makes use of the overpainting properties of raster displays to eliminate hidden surfaces. It renders the polygons in the scene in back-to-front order, so that polygons rendered later overpaint those rendered earlier. Those rendered earlier are those furthest from the camera.
Reference: <institution> Warnock, J.E. (1969) A Hidden-Surface Algorithm for Computer Generated Halftone Pictures , University of Utah Computer Science Dept,, </institution> <note> TR 4-15, NTIS AD-753 671. </note>
References-found: 7

