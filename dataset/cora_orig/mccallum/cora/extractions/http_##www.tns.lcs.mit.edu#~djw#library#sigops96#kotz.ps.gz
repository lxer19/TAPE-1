URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/kotz.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: fdfk,rgray,rusg@cs.dartmouth.edu  
Title: Transportable Agents Support Worldwide Applications  
Author: David Kotz Robert Gray Daniela Rus 
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Abstract: Worldwide applications exist in an environment that is inherently distributed, dynamic, heterogeneous, insecure, unreliable, and unpredictable. In particular, the latency and bandwidth of network connections varies tremendously from place to place and time to time, particularly when considering wireless networks, mobile devices, and satellite connections. Applications in this environment must be able to adapt to different and changing conditions. We believe that transportable autonomous agents provide an excellent mechanism for the construction of such applications. We describe our prototype transportable-agent system and several applications.
Abstract-found: 1
Intro-found: 1
Reference: [Age94] <editor> Intelligent agents. </editor> <booktitle> Communications of the ACM, </booktitle> <volume> 37(7) </volume> <pages> 18-147, </pages> <month> July </month> <year> 1994. </year> <note> Special issue. </note>
Reference-contexts: The tool would combine the code for the existing components with the appropriate glue code. This idea is similar to popular visual-programming languages. 3 Related work Our work builds on previous work in agents <ref> [Age94] </ref>, primarily in the AI community, and in transportable code, primarily in the systems community. Mobile agents can be viewed as an extension of the remote procedure call and remote programming paradigms.
Reference: [ATLLW96] <author> Ali-Reza Adl-Tabatabai, Geoff Langdale, Steven Lucco, and Robert Wahbe. </author> <title> Efficient and language-independent mobile programs. </title> <booktitle> In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 127-136, </pages> <year> 1996. </year>
Reference-contexts: Agents generalize remote programming to allow arbitrary code movement. Our system allows agent programmers to choose between a remote conversation (with RPC, message-passing, or stream) or a jump followed by a local conversation. Systems such as Java [GM94], Safe Tcl [BR95], and Omniware <ref> [ATLLW96] </ref>, are concerned with the safe execution of untrusted code fragments. Safe Tcl is limited to Tcl scripts but Java and Omniware can work with any program (as long as the program is compiled into the bytecodes of the appropriate virtual machine).
Reference: [BN84] <author> Andrew D. Birrell and Bruce Jay Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Mobile agents can be viewed as an extension of the remote procedure call and remote programming paradigms. Remote procedure call (RPC) allows a client to invoke a server operation using the standard procedure call mechanism <ref> [BN84] </ref>. Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) [SG90], and SUPRA-RPC [Sto94].
Reference: [BP88] <author> Andrea J. Borr and Franco Putzolu. </author> <title> High performance SQL through low-level system integration. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 342-349, </pages> <year> 1988. </year>
Reference-contexts: The most notable are Tacoma [JvS95], Itinerant Agents [CGH + 95], Sodabot [Coe94], and ARA [Pei96]. New transportable-agent systems appear every day. 4 Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server <ref> [BP88] </ref>. The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda [KS92, MES95], Ficus [RHR + 94], and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected.
Reference: [BR95] <author> N. S. Borenstein and M. Rose. </author> <title> Safe Tcl. </title> <note> Available at ftp://ftp.fv.com/pub/code/other/safe-tcl.tar.Z, </note> <year> 1995. </year>
Reference-contexts: Agents generalize remote programming to allow arbitrary code movement. Our system allows agent programmers to choose between a remote conversation (with RPC, message-passing, or stream) or a jump followed by a local conversation. Systems such as Java [GM94], Safe Tcl <ref> [BR95] </ref>, and Omniware [ATLLW96], are concerned with the safe execution of untrusted code fragments. Safe Tcl is limited to Tcl scripts but Java and Omniware can work with any program (as long as the program is compiled into the bytecodes of the appropriate virtual machine).
Reference: [CGH + 95] <author> David Chess, Benjamin Grosof, Colin Harrison, David Levine, Colin Parris, and Gene Tsudik. </author> <title> Itinerant agents for mobile computing. </title> <type> Technical Report RC 20010, </type> <institution> IBM T. J. Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Revised October 17, </note> <year> 1995. </year>
Reference-contexts: The Mobile Service Agent (MSA) system from ECRC [TLKC95] is another mobile-agent system supporting mobile computers, but it uses a less general mechanism than described in this paper. There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents <ref> [CGH + 95] </ref>, Sodabot [Coe94], and ARA [Pei96]. New transportable-agent systems appear every day. 4 Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88]. The stored commands are executed at the server end during a user transaction.
Reference: [Coe94] <author> Michael D. Coen. SodaBot: </author> <title> A software agent environment and construction system. </title> <editor> In Yannis Labrou and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Third International Conference on Information and Knowledge Management, </booktitle> <address> Gaithers-burg, Maryland, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents [CGH + 95], Sodabot <ref> [Coe94] </ref>, and ARA [Pei96]. New transportable-agent systems appear every day. 4 Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88]. The stored commands are executed at the server end during a user transaction.
Reference: [Fal87] <author> Joseph R. Falcone. </author> <title> A programmable interface language for heterogeneous distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) <ref> [Fal87] </ref>, Remote Evaluation (REV) [SG90], and SUPRA-RPC [Sto94]. Agents generalize remote programming to allow arbitrary code movement. Our system allows agent programmers to choose between a remote conversation (with RPC, message-passing, or stream) or a jump followed by a local conversation.
Reference: [Gil96] <author> Mark Giles. </author> <title> Navigation for transportable agents. </title> <type> Senior Honors Thesis, </type> <institution> Dartmouth College Computer Science, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: A hierarchical set of navigation agents maintain a database of service locations <ref> [Gil96] </ref>. Services register with these navigation agents. An agent looking for a service queries a navigation agent, which suggests a list of services (based on a keyword match) and possibly other navigation agents (that may be specialists in listing services on the requested topic).
Reference: [GKCR96] <author> Robert Gray, David Kotz, George Cybenko, and Daniela Rus. </author> <title> Agent Tcl. </title> <editor> In William Cockayne and Michael Zyda, editors, </editor> <title> Itinerant Agents: Explanations and Examples with CD-ROM. </title> <publisher> Manning Publishing, </publisher> <year> 1996. </year> <note> Imprints by Manning Publishing and Prentice-Hall. To appear in late 1996. </note>
Reference-contexts: The keystone of our work has been the development of Agent Tcl <ref> [Gra95, Gra96, GKCR96] </ref>, an extension of the Tcl scripting language [Ous94]. An Agent Tcl program (agent) can simply "jump" from machine to machine, with the interpreter saving and transferring the state to the remote machine, which restarts the agent from that state in a new interpreter. <p> The RPC mechanism, navigation services, and security mechanisms are the most complete. We are currently testing and evaluating these implementations. More information about Agent Tcl and our current research can be found at http://www.cs.dartmouth.edu/~agent/. A programmer's view of the system, including source code on CD-ROM, will be published soon <ref> [GKCR96] </ref>. 1 http://www.ibm.co.jp/trl/projects/aglets/ 2 http://ptolemy.eecs.berkeley.edu/~wli/group/java2go/java-to-go.html 3 http://www.ftp.com/cyberagents/ 4 http://www.cs.umbc.edu/agents/technology/asl.shtml
Reference: [GKN + 96] <author> Robert Gray, David Kotz, Saurab Nog, Daniela Rus, and George Cybenko. </author> <title> Mobile agents for mobile computing. </title> <type> Technical Report PCS-TR96-285, </type> <institution> Dept. of Computer Science, Dartmouth College, </institution> <month> May </month> <year> 1996. </year> <note> Submitted to ACM MobiCom '96. </note>
Reference-contexts: For agents trying to jump into or out of the laptop, however, the traditional approach (try, timeout, sleep, retry, ...) can often fail, particularly if the agent does not happen to retry its jump during a brief reconnection period. To overcome these problems, our laptop docking system <ref> [GKN + 96] </ref> pairs each laptop with a permanently connected dock machine (Figure 1). While not all machines act as docks, all machines have a dock-master agent. Consider an agent wishing to jump to a disconnected laptop named D (Figure 2).
Reference: [GM94] <author> James Gosling and Henry McGilton. </author> <title> The Java language: A white paper. Sun Microsystems, </title> <year> 1994. </year>
Reference-contexts: Agents generalize remote programming to allow arbitrary code movement. Our system allows agent programmers to choose between a remote conversation (with RPC, message-passing, or stream) or a jump followed by a local conversation. Systems such as Java <ref> [GM94] </ref>, Safe Tcl [BR95], and Omniware [ATLLW96], are concerned with the safe execution of untrusted code fragments. Safe Tcl is limited to Tcl scripts but Java and Omniware can work with any program (as long as the program is compiled into the bytecodes of the appropriate virtual machine).
Reference: [Gra95] <author> Robert S. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <booktitle> In Proceedings of the CIKM Workshop on Intelligent Information Agents, Fourth International Conference on Information and Knowledge Management (CIKM 95), </booktitle> <address> Baltimore, Maryland, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: The keystone of our work has been the development of Agent Tcl <ref> [Gra95, Gra96, GKCR96] </ref>, an extension of the Tcl scripting language [Ous94]. An Agent Tcl program (agent) can simply "jump" from machine to machine, with the interpreter saving and transferring the state to the remote machine, which restarts the agent from that state in a new interpreter.
Reference: [Gra96] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the 1996 Tcl/Tk Workshop, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: The keystone of our work has been the development of Agent Tcl <ref> [Gra95, Gra96, GKCR96] </ref>, an extension of the Tcl scripting language [Ous94]. An Agent Tcl program (agent) can simply "jump" from machine to machine, with the interpreter saving and transferring the state to the remote machine, which restarts the agent from that state in a new interpreter. <p> Resource manager agents are long-lived agents that must be consulted by an agent desiring access to a resource. A resource manager implements the access policy for each critical resource, such as the file system, the screen, the speaker, and the keyboard <ref> [Gra96] </ref>. Agents must negotiate with the appropriate resource manager before they can access the resource; the resource managers determine the allowable access based on the agent's authentication.
Reference: [HH95] <author> L. B. Huston and P. Honeyman. </author> <title> Partially connected operation. </title> <journal> Computing Systems, </journal> <volume> 8(4) </volume> <pages> 365-379, </pages> <month> Fall </month> <year> 1995. </year>
Reference-contexts: The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda [KS92, MES95], Ficus [RHR + 94], and others <ref> [HH95] </ref>. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [JdT + 95] <author> Anthony D. Joseph, Alan F. deLespinasse, Joshua A. Tauber, David K. Gifford, and M. Frans Kaashoek. </author> <title> Rover: A toolkit for mobile information access. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 156-171, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: On reconnection, the file system reconciles any differences with the appropriate file servers. The Bayou file system [TTP + 95] internally uses a form of mobile code (but not agents) to handle reconciliation. The Rover system <ref> [JdT + 95] </ref> supports disconnected operation through queued RPC and relocatable dynamic objects (RDO). Queued RPC allows asynchronous RPC requests to be queued and then sent when the laptop connects; an asynchronous reply is delivered later.
Reference: [Joh95] <author> D. B. Johnson. </author> <title> Scalable support for transparent mobile host internetworking. </title> <journal> Wireless Networks, </journal> <volume> 1 </volume> <pages> 311-321, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: This feature enables applications on mobile computers to change their behavior according to their environment, and would be a helpful substrate for an agent system. There are of course many papers on mobile IP and packet forwarding. Perhaps the best background source is <ref> [Joh95] </ref>.
Reference: [JvS95] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proceedings of the Fifth Workshop Hot Topics in Operating Systems (HotOS), </booktitle> <pages> pages 42-45, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: The Mobile Service Agent (MSA) system from ECRC [TLKC95] is another mobile-agent system supporting mobile computers, but it uses a less general mechanism than described in this paper. There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma <ref> [JvS95] </ref>, Itinerant Agents [CGH + 95], Sodabot [Coe94], and ARA [Pei96]. New transportable-agent systems appear every day. 4 Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88].
Reference: [KS92] <author> James J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda <ref> [KS92, MES95] </ref>, Ficus [RHR + 94], and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [LO95] <author> Jacob Y. Levy and John K. Ousterhout. </author> <title> A Safe Tcl toolkit for electronic meeting places. </title> <booktitle> In Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <pages> pages 133-135, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Agents must negotiate with the appropriate resource manager before they can access the resource; the resource managers determine the allowable access based on the agent's authentication. The Agent Tcl interpreter uses Safe Tcl <ref> [LO95] </ref> to ensure that an agent can neither bypass the negotiation step nor violate the restrictions provided by the resource managers. In effect, Safe Tcl divides the interpreter into two separate interpreters, a "user" interpreter and a "kernel" interpreter.
Reference: [MES95] <author> Lily B. Mummert, Maria R. Ebling, and M. Satyanarayanan. </author> <title> Exploiting weak connectivity for mobile file access. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 143-155, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda <ref> [KS92, MES95] </ref>, Ficus [RHR + 94], and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [NCK96] <author> Saurab Nog, Sumit Chawla, and David Kotz. </author> <title> An RPC mechanism for transportable agents. </title> <note> In preparation. Expanded version currently available as Dartmouth PCS-TR96-280, </note> <month> March </month> <year> 1996. </year>
Reference-contexts: We describe each briefly. 2.1 Communication Agent Tcl provides the ability for agents to communicate through direct connections and through message passing. We have two higher-level agent communication mechanisms on top of these primitives. Agent remote procedure call (ARPC) <ref> [NCK96] </ref> allows server agents (i.e., those which wish to advertise a service) to register with a "name server" agent by specifying their interface using a flexible definition language. Client agents specify the desired service by providing a similar specification.
Reference: [NPS95] <author> Brian B. Noble, Morgan Price, and M. Satyanarayanan. </author> <title> A programming interface for application-aware adaptation in mobile computing. </title> <journal> Computing Systems, </journal> <volume> 8(4) </volume> <pages> 345-363, </pages> <month> Fall </month> <year> 1995. </year>
Reference-contexts: These RDOs are not true mobile agents because they do not move after they have begun execution. Noble et al. <ref> [NPS95] </ref> describe the Odyssey system, in which applications on mobile computers can request upcalls whenever a change in resource state, such as network bandwidth or battery power, exceeds some threshold.
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: The keystone of our work has been the development of Agent Tcl [Gra95, Gra96, GKCR96], an extension of the Tcl scripting language <ref> [Ous94] </ref>. An Agent Tcl program (agent) can simply "jump" from machine to machine, with the interpreter saving and transferring the state to the remote machine, which restarts the agent from that state in a new interpreter. We are currently extending the concept to a second language, Agent Java. <p> The bank must be involved if a bill must be split into smaller bills, or if an agent wishes to verify that a bill is valid and has not already been spent. 2.6 Graphical interfaces Agents can use Tcl's Tk toolkit <ref> [Ous94] </ref> to create graphical interfaces and interact with the local user. In addition, we plan to develop an agent-composition tool that allows programmers to build new agents by visually combining existing agent components. The tool would combine the code for the existing components with the appropriate glue code.
Reference: [Pei96] <author> Holger Peine. </author> <title> The ARA project. WWW page http://www.uni-kl.edu/AG-Nehmer/Ara, Distributed Systems Group, </title> <institution> Department of Computer Science, University of Kaiserlautern, </institution> <year> 1996. </year>
Reference-contexts: There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents [CGH + 95], Sodabot [Coe94], and ARA <ref> [Pei96] </ref>. New transportable-agent systems appear every day. 4 Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88]. The stored commands are executed at the server end during a user transaction.
Reference: [RGK96] <author> Daniela Rus, Robert Gray, and David Kotz. </author> <title> Autonomous and adaptive agents that gather information. </title> <booktitle> In AAAI '96 International Workshop on Intelligent Adaptive Agents, </booktitle> <month> August </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: We are still tuning our heuristic; we expect that our estimates will be rough but usable for large-grain decisions (e.g., using the estimates, and a greedy strategy, an agent would likely visit all sites in Europe before hopping to Australia to visit sites there <ref> [RGK96] </ref>). 2.3 Disconnected operation Agents are ideal for partially disconnected environments, such as laptops, modem-connected home computers, and personal digital assistants, because they can travel the network while their "home" machine is disconnected or unreachable.
Reference: [RHR + 94] <author> Peter Reiher, John Heidemann, David Ratner, Greg Skinner, and Gerald Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In Proceedings of the 1994 Summer USENIX Conference, </booktitle> <pages> pages 183-195, </pages> <year> 1994. </year>
Reference-contexts: The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda [KS92, MES95], Ficus <ref> [RHR + 94] </ref>, and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [SG90] <author> James W. Stamos and David K. Gifford. </author> <title> Remote execution. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) <ref> [SG90] </ref>, and SUPRA-RPC [Sto94]. Agents generalize remote programming to allow arbitrary code movement. Our system allows agent programmers to choose between a remote conversation (with RPC, message-passing, or stream) or a jump followed by a local conversation.
Reference: [Sto94] <author> Alexander D. Stoyenko. SUPRA-RPC: </author> <title> SUbprogram PaRAmeters in Remote Procedure Calls. </title> <journal> Software|Practice and Experience, </journal> <volume> 24(1) </volume> <pages> 27-49, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) [SG90], and SUPRA-RPC <ref> [Sto94] </ref>. Agents generalize remote programming to allow arbitrary code movement. Our system allows agent programmers to choose between a remote conversation (with RPC, message-passing, or stream) or a jump followed by a local conversation.
Reference: [TLKC95] <author> Bent Thomsen, Lone Leth, Frederick Knabe, and Pierre-Yves Chevalier. </author> <title> Mobile agents. </title> <type> ECRC external report, </type> <institution> European Computer-Industry Research Centre, </institution> <year> 1995. </year>
Reference-contexts: Telescript supports mobile computers and is used primarily on Personal Digital Assistants (PDA) such as the Sony Magic Link. The details of how Telescript agents jump between mobile hosts and handle disconnected operation are unclear. The Mobile Service Agent (MSA) system from ECRC <ref> [TLKC95] </ref> is another mobile-agent system supporting mobile computers, but it uses a less general mechanism than described in this paper. There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents [CGH + 95], Sodabot [Coe94], and ARA [Pei96].
Reference: [TTP + 95] <author> Douglas B. Terry, Marvin M. Theimer, Karin Petersen, Alan J. Demers, Mike J. Spreitzer, and Carl H. Hauser. </author> <title> Managing update conflicts in a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers. The Bayou file system <ref> [TTP + 95] </ref> internally uses a form of mobile code (but not agents) to handle reconciliation. The Rover system [JdT + 95] supports disconnected operation through queued RPC and relocatable dynamic objects (RDO).
Reference: [Whi94] <author> James E. White. </author> <title> Mobile agents make a network an open platform for third-party developers. </title> <journal> IEEE Computer, </journal> <volume> 27(11) </volume> <pages> 89-90, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: These three systems do not directly support mobile agents, although there are some very recent Java-based transportable-agent systems 1 2 3 . The best-known mobile-agent system is Telescript from General Magic <ref> [Whi94] </ref>. Telescript supports mobile computers and is used primarily on Personal Digital Assistants (PDA) such as the Sony Magic Link. The details of how Telescript agents jump between mobile hosts and handle disconnected operation are unclear.
References-found: 32

