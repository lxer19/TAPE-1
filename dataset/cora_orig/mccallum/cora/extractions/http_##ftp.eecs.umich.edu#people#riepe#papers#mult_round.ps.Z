URL: http://ftp.eecs.umich.edu/people/riepe/papers/mult_round.ps.Z
Refering-URL: http://ftp.eecs.umich.edu/people/riepe/papers/
Root-URL: http://www.eecs.umich.edu
Email: Email: riepe@eecs.umich.edu  
Phone: Phone: (313) 764-8033 Fax: (313) 763-4617  
Title: Implementing IEEE Rounding in Parallel-Array Floating-Point Multipliers  
Author: Michael A. Riepe, Thomas Huff, Trevor N. Mudge 
Date: Abstract  
Address: Michigan  
Affiliation: Advanced Computer Architecture Laboratory University of  
Note: submitted: 12th. IEEE Symposium on Computer Arithmetic  their work.)  
Abstract: When implementing carry-save parallel-array multipliers (also known as Wallace Tree multipliers), the final carry-propagate addition will almost always be on the critical delay path. In the case of multipliers for IEEE-standard oating-point mantissas, it is therefore important that the extra logic needed to correctly round and re-normalize the result not lie in series with the addi tion logic. Santoro et. al. have presented some simple algorithms for implementing IEEE rounding logic that operates almost entirely in parallel with the addition, and contributes very little to the circuit delay. However, we will show that their method cannot be used to implement all four required rounding modes. We present a more general algorithm which is also efficiently implemented, but allows all four IEEE rounding modes to be supported. (Note to the reviewers: the conference paper by Santoro et. al. was published in the 1989 session of the Symposium on Computer Arithmetic, our paper should be viewed as a follow-on to 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.R. Santoro. </author> <title> "Design and Clocking of VLSI Multipliers," </title> <institution> Dissertation , Stanford University, </institution> <year> 1989. </year>
Reference-contexts: If implemented in a naive way this would require a 106-bit adder, followed by rounding hardware and a renormalization shifter, and would certainly set the critical delay path. Santoro et al. <ref> [1, 2] </ref> have demonstrated a method which reduces the hardware requirement to a single 53-bit carry-select adder and a small amount of support logic. <p> A Naive implementation of the round-to nearest/even rounding mode. The other modes are similar. V sticky R in2 V sticky sum50a [1:0] C out50 cs_carry sum51a [1:0] sum50a <ref> [1] </ref> cs_carry binary-point cs_sum are the 106-bit carry-save sum and carry-save carry terms from the Wallace Tree. This implementation uses a common trick to obtain the (n.rem &gt; 0.5) check: it simply adds +1 to the bit below the Least Signifi cant Bit (LSB). <p> All other critical delay paths in the oating-point hardware are not likely to require longer than a 64-bit addition. In order to get this circuit off of the critical path we must find a way to reduce the length of the carry-chain. 3. Santoros Method Santoro et. al. <ref> [1, 2] </ref> have presented an elegant solution to this problem. They have found a way to decouple the product summa tion step from both the carry-in from the low-order insignificant bits, and from the late-arriving overow signal (the V bit). <p> in = 1 round_mode sign sticky [53] [53] A B sum_desired_1 (nearest) sum_desired_2 ( - infinity) sum_desired_3 (zero) sum_select round_mode sign sticky cs_carry [51] C out50 R in = 1 [53:1] invert_lsb result_select round_mode Product [52:1] norm. shift sum_mux ripple_add cs_sum [53:51] cs_carry [53:51] C Cin nearest_even_incorrect [0] (lsb) sum <ref> [1] </ref> R v sticky sticky round_mode = nearest sticky_bit FIGURE 6. Schematic diagram for implementation of fast IEEE compliant oating-point multiplication rounding logic for all four required rounding modes. <p> Support for Iterative Arrays Often the area required to implement a full Wallace-tree can become prohibitive. As an example, an n-bit Wallace-tree imple-m e n t e d w i t h 4 - 2 c o m p r e s s o r s <ref> [ 1 ] </ref> r e q u i r e s compressors. For a 53-bit oating-point mantissa this would total 1617 4-2 compressors, or 3234 full-adders if the 4-2 compressor is implemented with two cascaded full-adders.
Reference: [2] <author> M.R. Santoro, G. Bewick, and M.A. Horowitz. </author> <title> "Rounding Algorithms for IEEE Multipliers," </title> <booktitle> in 9th. Symposium on Computer Arithmetic </booktitle>
Reference-contexts: If implemented in a naive way this would require a 106-bit adder, followed by rounding hardware and a renormalization shifter, and would certainly set the critical delay path. Santoro et al. <ref> [1, 2] </ref> have demonstrated a method which reduces the hardware requirement to a single 53-bit carry-select adder and a small amount of support logic. <p> All other critical delay paths in the oating-point hardware are not likely to require longer than a 64-bit addition. In order to get this circuit off of the critical path we must find a way to reduce the length of the carry-chain. 3. Santoros Method Santoro et. al. <ref> [1, 2] </ref> have presented an elegant solution to this problem. They have found a way to decouple the product summa tion step from both the carry-in from the low-order insignificant bits, and from the late-arriving overow signal (the V bit).
Reference: [3] <author> I. Koren, </author> <title> "Computer Arithmetic Algorithms,". </title> . <booktitle> 1993, </booktitle> <address> Englewood Cliffs, N.J.: </address> <publisher> Prentice Hall. </publisher> <pages> 210. </pages>
Reference: [4] <author> S. Waser and M.J. Flynn, </author> <title> "Introduction to Arithmetic for Digital Systems,". . 1982, Fort Worth: </title> <publisher> Holt, Rinehart and Winston. </publisher> <pages> 308. </pages>
Reference: [5] <institution> J.J.F. Cavanaugh, "Digital Computer Arithmetic,". </institution> . <address> 1984, New York: </address> <publisher> McGraw-Hill Book Company. </publisher> <pages> 468. </pages>
Reference: [6] <author> C.S. Wallace, </author> <title> "A Suggestion for Fast Multipliers," </title> <journal> IEEE Transactions on Electronic Computers [7] "ANSI/IEEE std. </journal> <year> #754-1985, </year> <title> IEEE Standard for Binary Floating-Point Arithmetic," </title> <publisher> Institute for Electrical and Electronics Engineers </publisher>
Reference-contexts: Serial implementations can have very short logic delays, but require long latencies. Parallel techniques require more hardware and longer logic delays, but can be constructed with latencies of only a single cycle. Of the parallel techniques, Wallace Tree multipliers <ref> [6] </ref> have become standard. A Wallace Tree is characterized by a log-height tree of carry-save adders operating in parallel to reduce the partial products to a single pair of carry-save digits. A conventional carry-propagating addition is then required to produce the final non-redundant product.
Reference: [8] <author> J.T. Coonen, </author> <title> "An Implementation Guide to a Proposed Standard for Floating-Point Arithmetic," </title> <booktitle> in Computer </booktitle>
Reference: [9] <author> J. Pan and K.N. Levitt. </author> <title> "A Formal Specification of the IEEE Float ing-Point Standard with Applications to the Verification of Floating-Point Coprocessors," </title> <booktitle> in 24th. ASILOMAR Conference on Signals, Systems, and Computers </booktitle>
Reference: [10] <author> A.D. Booth, </author> <title> "A Signed Binary Multiplication Technique," </title> <journal> Mech. Appl. Math. </journal> <volume> 4, Part 2 </volume>
Reference-contexts: The 1 is at the bit immediately below the LSB (either ). The string of zeros are often represented by a sig nal named the sticky-bit, which is the logical-OR of all bits below . Santoro et. al. show that if there are no negative partial-products (i.e. Booth-encoding <ref> [10] </ref> is not used) the sticky-bit can be generated as the logical-OR of the carry-save pairs in bits [50:0]. With this technique, the sum bits in the lower adder are not needed, and only the carry-chain of this adder need be imple mented.
Reference: [11] <author> N. Quach and M. Flynn. </author> <title> "Leading One Prediction-Implementation, Generalization, and Application," </title> <institution> Stanford University Technical Report CSL-TR-91-463 , March 1991. </institution>
Reference-contexts: In this diagram we assume that Booth-encoding is not being used, so Santoros sticky-bit generation technique can be used. If Booth-encoding is used this block will have to contain sum logic and form the sticky bits from the completed sum bits, or else use some form of leading-one-detection logic <ref> [11, 12] </ref>.
Reference: [12] <author> E. Hokenek and R.K. Montoye, </author> <title> "Leading-Zero Anticipator (LZA) in the IBM RISC System/6000 Floating-Point Execution Unit," </title> <institution> IBM J. Res. Develop. </institution>
Reference-contexts: In this diagram we assume that Booth-encoding is not being used, so Santoros sticky-bit generation technique can be used. If Booth-encoding is used this block will have to contain sum logic and form the sticky bits from the completed sum bits, or else use some form of leading-one-detection logic <ref> [11, 12] </ref>.
References-found: 11

