URL: http://cwis.usc.edu/dept/ATRIUM/Papers/Distributed_Hypertext.ps
Refering-URL: http://cwis.usc.edu/dept/ATRIUM/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (jnoll, scacchi)@pollux.usc.edu  
Phone: (213) 740-4782, (213) 740-8494 Fax  
Title: Integrating Diverse Information Repositories: A Distributed Hypertext Approach 1  
Author: John Noll and Walt Scacchi 
Keyword: Hypertext, Distributed Systems, Heterogeneous Distributed Object Management, Distributed Software Engineering Environments, Distributed Hypertext  
Address: Los Angeles, CA 90089-1421 USA  
Affiliation: University of Southern California  
Abstract: Today's networked software engineering environment is characterized by a multitude of autonomous, heterogeneous information repositories, a variety of incompatible user interfaces, diverse, unconventional data types, including text, graphics, and possibly video and sound, rapid change, both in structure and content, and multiple ways of viewing relationships among the same information items. Existing information storage mechanisms fail to combine diverse data types/models, complex objects and storage structures, personal views and organizations of shared objects, access to distributed, heterogeneous repositories, and ease of evolution. This paper examines these issues and describes a Distributed Hypertext architecture that provides transparent access to autonomous, heterogeneous software object repositories, resulting in both a powerful organizational tool and a simple yet effective integration mechanism. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert M. Akscyn, Donald L. McCracken, and Elise A. Yoder. KMS: </author> <title> A distributed hypermedia system for managing knowledge in organizations. </title> <journal> Communications of the ACM, </journal> <volume> 31(7) </volume> <pages> 820-835, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Examples include Neptune [3], which stores nodes and links in a single database, and Intermedia [11], DIF [4], and KMS <ref> [1] </ref>, which store links in a database and nodes in files. Multiple server designs allow nodes to reside on several different server machines, and links to be made between such nodes.
Reference: [2] <author> Jeff Conklin. </author> <title> Hypertext: An introduction and survey. </title> <journal> Computer, </journal> <volume> 20(9) </volume> <pages> 17-41, </pages> <month> Septem-ber </month> <year> 1987. </year>
Reference-contexts: By providing dynamic gateway processes, local objects can be transformed into hypertext structures, and hypertext operations can be transformed into local queries. The underlying database structure remains unchanged. 4 Sidebar: Survey of Distributed Hypertext Systems Most hypertext systems are single-user, centralized designs <ref> [2] </ref>. There are several examples, however, of distributed hypertext systems. Most of these employ a single server to store the links and nodes for a hypertext; client programs running on workstations connected by a local-area network access this server to manipulate portions of the hypertext. <p> Multiple server designs allow nodes to reside on several different server machines, and links to be made between such nodes. This category includes Sun's Link Service [7], Distributed DIF, and VNS [9], which store links and node locations in a database, and Plane-Text <ref> [2] </ref>, which stores both links and nodes in Unix files. The ultimate category includes systems like Telesophy [8], and Xanadu [6]. <p> Our Distributed Hypertext architecture meets these requirements by extending hypertext to a distributed, heterogeneous environment. We chose hypertext as a solution strategy because of the its multifaceted nature: it combines a user interaction technique, a data representation method, and a data storage mechanism <ref> [2] </ref>. The user interaction facet provides transparency; users interact with information by creating nodes and links and by browsing the resulting linked information space. Browsing is conducted using a common set of tools regardless of the types of nodes contained in the information space.
Reference: [3] <author> Norman M. Delisle and Meyer D. Schwartz. Neptune: </author> <title> a hypertext system for CAD applications. </title> <booktitle> In SIGMOD record, </booktitle> <address> v15, n2 (June): </address> <pages> pp. 132-142, pages 168-186, </pages> <address> New York, 1986. </address> <publisher> ACM. </publisher>
Reference-contexts: There are several examples, however, of distributed hypertext systems. Most of these employ a single server to store the links and nodes for a hypertext; client programs running on workstations connected by a local-area network access this server to manipulate portions of the hypertext. Examples include Neptune <ref> [3] </ref>, which stores nodes and links in a single database, and Intermedia [11], DIF [4], and KMS [1], which store links in a database and nodes in files. Multiple server designs allow nodes to reside on several different server machines, and links to be made between such nodes.
Reference: [4] <author> Pankaj K. Garg and Walt Scacchi. </author> <title> A hypertext system for software life cycle documents. </title> <journal> IEEE Software, </journal> <volume> 7(3) </volume> <pages> 90-99, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Examples include Neptune [3], which stores nodes and links in a single database, and Intermedia [11], DIF <ref> [4] </ref>, and KMS [1], which store links in a database and nodes in files. Multiple server designs allow nodes to reside on several different server machines, and links to be made between such nodes.
Reference: [5] <author> Dennis Heimbigner and Dennis McLeod. </author> <title> A federated architecture for information management. </title> <journal> ACM Trans. on Office Information Systems, </journal> <volume> 3(3) </volume> <pages> 253-278, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Database management systems address this relationship problem by providing primitive to model relationships explicitly. Heterogeneous database systems add the ability to integrate 1 many separate databases into logically unified worlds. This can result in a single global schema, or many application specific schemas, as in federated architectures <ref> [5] </ref>. The chief problem with heterogeneous database systems is how to provide transactions while preserving autonomy. A transaction is typically controlled by a transaction manager. If the transaction involves objects from more than one database, then some or all participating databases become subordinate to the transaction manager, violating their autonomy.
Reference: [6] <author> Ted Nelson. </author> <title> Managing immense storage. </title> <journal> Byte, </journal> <volume> 13(1) </volume> <pages> 225-233, </pages> <year> 1988. </year>
Reference-contexts: This category includes Sun's Link Service [7], Distributed DIF, and VNS [9], which store links and node locations in a database, and Plane-Text [2], which stores both links and nodes in Unix files. The ultimate category includes systems like Telesophy [8], and Xanadu <ref> [6] </ref>. These are intended to link the knowledge base of a large organization, community, or nation. 5 An Architecture for Distributed Hypertext To implement the solution outlined above, we begin with a DHT architecture to serve as the infrastructure for distributed information management.
Reference: [7] <author> Amy Pearl. </author> <title> Sun's link service: a protocol for open linking. </title> <booktitle> In Hypertext '89 Proceedings, </booktitle> <pages> pages 137-146, </pages> <address> New York, 1989. </address> <publisher> ACM. </publisher>
Reference-contexts: Multiple server designs allow nodes to reside on several different server machines, and links to be made between such nodes. This category includes Sun's Link Service <ref> [7] </ref>, Distributed DIF, and VNS [9], which store links and node locations in a database, and Plane-Text [2], which stores both links and nodes in Unix files. The ultimate category includes systems like Telesophy [8], and Xanadu [6].
Reference: [8] <author> Bruce R Schatz. Telesophy: </author> <title> A system for manipulating the knowledge of a community. </title> <booktitle> In GLOBECOM '87 Proceedings, </booktitle> <address> Tokyo, </address> <month> November, </month> <year> 1987, </year> <pages> pages 1181-1186, </pages> <address> New York, 1989. </address> <publisher> ACM. </publisher>
Reference-contexts: ability to manipulate an object using the same interaction technique independent of its type; location transparency, whereby an object should be accessible in the same fashion whether local or remote; and scale transparency, which requires objects to behave the same whether there are 100 or 100,000 objects in the system <ref> [8] </ref>. <p> This category includes Sun's Link Service [7], Distributed DIF, and VNS [9], which store links and node locations in a database, and Plane-Text [2], which stores both links and nodes in Unix files. The ultimate category includes systems like Telesophy <ref> [8] </ref>, and Xanadu [6]. These are intended to link the knowledge base of a large organization, community, or nation. 5 An Architecture for Distributed Hypertext To implement the solution outlined above, we begin with a DHT architecture to serve as the infrastructure for distributed information management.
Reference: [9] <author> Frank M. Shipman III. </author> <title> Distributed hypertext for collaborative research: the Virtual Notebook system. </title> <booktitle> In Hypertext '89 Proceedings, </booktitle> <pages> pages 29-135, </pages> <address> New York, 1989. </address> <publisher> ACM. </publisher>
Reference-contexts: Multiple server designs allow nodes to reside on several different server machines, and links to be made between such nodes. This category includes Sun's Link Service [7], Distributed DIF, and VNS <ref> [9] </ref>, which store links and node locations in a database, and Plane-Text [2], which stores both links and nodes in Unix files. The ultimate category includes systems like Telesophy [8], and Xanadu [6].
Reference: [10] <author> Marvin Theimer, Luis-Felipe Cabrera, and Jim Wyllie. </author> <title> QuickSilver support for access to data in large, </title> <booktitle> geographically dispersed systems. In The 9th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 28-35. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: This overloading can lead to complex, cumbersome filenames that are difficult to manage and evolve. Attributed file systems <ref> [10] </ref> attempt to solve this problem by attaching attributes to files; these enable additional information, such as type, creation and access methods, relationships, etc. to be expressed. In addition, they provide a way of locating relevant files by associative search against attribute values.
Reference: [11] <author> Nicole Yankelovich, Bernard J. Haan, Norman K. Meyrowitz, and Steven M. </author> <title> Drucker. Intermedia: the concept and the construction of a seamless information environment. </title> <journal> Computer, </journal> <volume> 21(1) </volume> <pages> 81-96, </pages> <month> January </month> <year> 1988. </year> <month> 11 </month>
Reference-contexts: Examples include Neptune [3], which stores nodes and links in a single database, and Intermedia <ref> [11] </ref>, DIF [4], and KMS [1], which store links in a database and nodes in files. Multiple server designs allow nodes to reside on several different server machines, and links to be made between such nodes.
References-found: 11

