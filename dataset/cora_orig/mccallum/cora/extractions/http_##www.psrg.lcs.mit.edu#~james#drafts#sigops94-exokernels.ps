URL: http://www.psrg.lcs.mit.edu/~james/drafts/sigops94-exokernels.ps
Refering-URL: http://www.psrg.lcs.mit.edu/~james/whoami.html
Root-URL: 
Title: The Operating System Kernel as a Secure Programmable Machine  
Author: Dawson Engler M. Frans Kaashoek James O'Toole 
Date: April 26 1994  
Address: Cambridge, MA 02139, USA  
Affiliation: MIT Laboratory for Computer Science  
Abstract: Operating systems should provide only minimal embedded kernel functionality. Exokernels achieve this minimalist goal by presenting to applications the features supported by the underlying hardware resources. Applications customize the operating system by extending the exokernel interface. Code inspection, inlined cross-domain procedure calls, and secure languages are used to allow programmable yet safe additions to the supervisor-mode execution environment. These additions enable applications to benefit from full hardware functionality and performance. To test and evaluate exokernels and their customization techniques a prototype system, Aegis, is being developed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: a new kernel foundation for UNIX development. </title> <booktitle> Proc. Summer 1986 USENIX Conference, </booktitle> <pages> pages 93-112, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [26, 1, 28, 29, 7] </ref>. Anderson and Kiczales et al. also recently argued for minimalism and customizable [2, 15].
Reference: [2] <author> T.E. Anderson. </author> <title> The case for application-specific operating systems. </title> <booktitle> In Third Workshop on Workstation Operating Systems, </booktitle> <pages> pages 92-94, </pages> <year> 1992. </year>
Reference-contexts: Modern revisitations of microkernels have also argued for kernel extensibility [26, 1, 28, 29, 7]. Anderson and Kiczales et al. also recently argued for minimalism and customizable <ref> [2, 15] </ref>.
Reference: [3] <author> T.E. Anderson, H.M. Levy, B.N. Bershad, and E.D. Lazowska. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In Proc. Fourth International Conference on ASPLOS, </booktitle> <year> 1991. </year>
Reference-contexts: In these microkernels the supervisor mode still defines the fixed interface among the kernel, user-level services, and applications. Therefore, applications 1 suffer from a large number of protection domain crossings. These crossings are typically expensive, as they involve entering supervisor mode and changing address spaces <ref> [25, 6, 3] </ref>. The disadvantages of fixed operating system policies are made worse by the growing diversity in hardware platforms and rapid advances of technology. For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk.
Reference: [4] <author> B.N. Bershad, C. Chambers, S. Eggers, C. Maeda, D. McNamee, P. Pardyak, S. Savage, and E. Sirer. </author> <title> Spin an extensible microkernel for application-specific operating system services. </title> <type> Technical Report TR94-03-03, </type> <institution> University of Washington, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: However, all of these customizations require a very high privilege and none guarantee the safety of the code once introduced. The SPIN project is also investigating adaptable kernels to allow applications to make policy decisions efficiently <ref> [4] </ref>. The SPIN system encapsulates policies in spindles that can be dynamically loaded into the kernel. To ensure safety, spindles will be written in a type-secure language and will be translated by a trusted compiler. Our proposal differs in a number of ways from the SPIN proposal.
Reference: [5] <author> M.A. Blumrich, K. Li, R. Alpert, C. Dubnicki, E.W. Felten, and J. Sandberg. </author> <title> Virtual memory mapped network interface for the SHRIMP multicomputer. </title> <booktitle> The 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 142-153, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk. As an example of rapid advances in technology, new architectures support protected user-level communication that requires little involvement of the operating system <ref> [16, 5] </ref>. By fixing policies operating system software prevents applications from evolving with the hardware. In this paper we propose an exokernel design that delivers hardware performance and hardware functionality directly to applications.
Reference: [6] <author> J. Bradley Chen and Brian N. Bershad. </author> <title> The impact of operating system structure on memory system performance. </title> <booktitle> Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <year> 1993. </year>
Reference-contexts: In these microkernels the supervisor mode still defines the fixed interface among the kernel, user-level services, and applications. Therefore, applications 1 suffer from a large number of protection domain crossings. These crossings are typically expensive, as they involve entering supervisor mode and changing address spaces <ref> [25, 6, 3] </ref>. The disadvantages of fixed operating system policies are made worse by the growing diversity in hardware platforms and rapid advances of technology. For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk.
Reference: [7] <author> H. Custer. </author> <title> Inside Windows/NT. </title> <publisher> Microsoft Press, </publisher> <address> Redmond, WA, </address> <year> 1993. </year>
Reference-contexts: Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [26, 1, 28, 29, 7] </ref>. Anderson and Kiczales et al. also recently argued for minimalism and customizable [2, 15]. <p> handlers for device I/O [13]; Chorus servers are loaded into the kernel [28]; Mach 3.0 has migrated some of the AFS cache manager back into the kernel [25]; the Amoeba file server is usually configured to run in the kernel [29]; Windows/NT runs only non-critical services outside of the kernel <ref> [7] </ref>; Lepreau et. al. has provided a tool to reintroduce servers into Mach 3.0 [20]. Draves has argued for selecting among several implementations of a specific kernel abstraction to allow customization [9].
Reference: [8] <author> P. Deutsch and C.A. Grant. </author> <title> A flexible measurement tool for software systems. </title> <booktitle> Information Processing 71, </booktitle> <year> 1971. </year>
Reference-contexts: These techniques ensure that safe application code will not execute privileged instructions or access protected data in uncontrolled ways: 1. Code Inspection. Code introduced into the secure programmable machine must be free of privileged instructions. As shown by Deutsch <ref> [8] </ref>, machine code can be inspected to guard against wild loads, stores, and jumps. Execution time can also be controlled by bounding loop iteration counts. <p> Techniques for certifying the safety of code include inspection and sandboxing. Deutsch showed how to safely introduce user-written instrumentation code into a running kernel by bounding loads, stores, jumps and runtime <ref> [8] </ref>. Making existing binaries safe has been done by Wahbe [30]. Although this technique will be useful for controlling entry points, we expect that loads and stores can be constrained more efficiently by changing the address context quickly within supervisor mode.
Reference: [9] <author> R. Draves. </author> <title> The case for run-time replaceable kernel modules. </title> <booktitle> In Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 160-165, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Draves has argued for selecting among several implementations of a specific kernel abstraction to allow customization <ref> [9] </ref>. However, all of these customizations require a very high privilege and none guarantee the safety of the code once introduced. The SPIN project is also investigating adaptable kernels to allow applications to make policy decisions efficiently [4].
Reference: [10] <author> Per Brinch Hansen. </author> <title> The nucleus of a multiprogramming system. </title> <journal> Communications of the ACM, </journal> <volume> 13(4) </volume> <pages> 238-241, </pages> <month> April </month> <year> 1970. </year>
Reference-contexts: Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper <ref> [10] </ref> are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. Modern revisitations of microkernels have also argued for kernel extensibility [26, 1, 28, 29, 7].
Reference: [11] <author> M.C. Harrison and J.T. Schwartz. SHARER, </author> <title> a time sharing system for the CDC 6600. </title> <journal> Communications of the ACM, </journal> <volume> 10(10) </volume> <pages> 659-665, </pages> <month> October </month> <year> 1967. </year>
Reference-contexts: We are now designing an Aegis "kernel extension language" to specify the primitive procedural interface to the system. 4 4 Related Work Many early operating systems papers discussed the need for extendable kernels <ref> [18, 32, 14, 19, 31, 11] </ref>. Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21].
Reference: [12] <author> Kieran Harty and David R. Cheriton. </author> <title> Application-controlled physical memory using external page-cache management. </title> <booktitle> Architecture Support for Programming Languages and Operating Systems1992, </booktitle> <pages> pages 187-199, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: However, no single policy is best for all applications. For example, file system and relational database applications often have different storage access patterns and therefore benefit from different buffer and disk management policies. Similar policy conflicts arise in almost every area of resource management <ref> [12] </ref>. Microkernels have pushed some policy decisions out of the kernel into user-level processes. In these microkernels the supervisor mode still defines the fixed interface among the kernel, user-level services, and applications. Therefore, applications 1 suffer from a large number of protection domain crossings.
Reference: [13] <author> D. Hildebrand. </author> <title> An architectural overview of QNX. </title> <booktitle> Proc. Usenix Workshop on Micro-kernels and Other Kernel Architectures, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: To combat this performance penalty, current microkernels allow reintroduction of code into the kernel: the QNX operating system allows user-level handlers for device I/O <ref> [13] </ref>; Chorus servers are loaded into the kernel [28]; Mach 3.0 has migrated some of the AFS cache manager back into the kernel [25]; the Amoeba file server is usually configured to run in the kernel [29]; Windows/NT runs only non-critical services outside of the kernel [7]; Lepreau et. al. has
Reference: [14] <author> D.H.R. </author> <title> Huxtable and M.T. Warwick. Dynamic supervisors | their design and construction. </title> <booktitle> Proceedings of the First ACM Symposium on Operating Systems Principles, </booktitle> <year> 1967. </year>
Reference-contexts: We are now designing an Aegis "kernel extension language" to specify the primitive procedural interface to the system. 4 4 Related Work Many early operating systems papers discussed the need for extendable kernels <ref> [18, 32, 14, 19, 31, 11] </ref>. Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21].
Reference: [15] <author> G. Kiczales, J. Lamping, C. Maeda, D. Keppel, and D. McNamee. </author> <title> The need for customizable operating systems. </title> <booktitle> In Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 165-170, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Modern revisitations of microkernels have also argued for kernel extensibility [26, 1, 28, 29, 7]. Anderson and Kiczales et al. also recently argued for minimalism and customizable <ref> [2, 15] </ref>.
Reference: [16] <author> J. Kuskin et al. </author> <title> The Stanford FLASH multiprocessor. </title> <booktitle> The 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 302-313, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk. As an example of rapid advances in technology, new architectures support protected user-level communication that requires little involvement of the operating system <ref> [16, 5] </ref>. By fixing policies operating system software prevents applications from evolving with the hardware. In this paper we propose an exokernel design that delivers hardware performance and hardware functionality directly to applications.
Reference: [17] <author> B.W. Lampson. </author> <title> On reliable and extendable operating systems. State of the Art Report, </title> <type> 1, </type> <year> 1971. </year> <month> 6 </month>
Reference-contexts: We are now designing an Aegis "kernel extension language" to specify the primitive procedural interface to the system. 4 4 Related Work Many early operating systems papers discussed the need for extendable kernels [18, 32, 14, 19, 31, 11]. Lampson's description of the CAL-TSS <ref> [17] </ref> and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. Modern revisitations of microkernels have also argued for kernel extensibility [26, 1, 28, 29, 7].
Reference: [18] <author> B.W. Lampson and R.F. Sproull. </author> <title> An open operating system for a single-user machine. </title> <booktitle> Proceedings of the Seventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 98-105, </pages> <year> 1979. </year>
Reference-contexts: We are now designing an Aegis "kernel extension language" to specify the primitive procedural interface to the system. 4 4 Related Work Many early operating systems papers discussed the need for extendable kernels <ref> [18, 32, 14, 19, 31, 11] </ref>. Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21].
Reference: [19] <author> B.W. Lampson and H.E. Sturgis. </author> <title> Reflections on an operating system design. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 251-265, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: We are now designing an Aegis "kernel extension language" to specify the primitive procedural interface to the system. 4 4 Related Work Many early operating systems papers discussed the need for extendable kernels <ref> [18, 32, 14, 19, 31, 11] </ref>. Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21].
Reference: [20] <author> Jay Lepreau, Mike Hibler, Bryan Ford, and Jeff Law. </author> <title> In-kernel servers in Mach 3.0: implementation and performance. </title> <booktitle> Proc. of the Third Usenix Mach Symposium, </booktitle> <year> 1993. </year>
Reference-contexts: 3.0 has migrated some of the AFS cache manager back into the kernel [25]; the Amoeba file server is usually configured to run in the kernel [29]; Windows/NT runs only non-critical services outside of the kernel [7]; Lepreau et. al. has provided a tool to reintroduce servers into Mach 3.0 <ref> [20] </ref>. Draves has argued for selecting among several implementations of a specific kernel abstraction to allow customization [9]. However, all of these customizations require a very high privilege and none guarantee the safety of the code once introduced.
Reference: [21] <author> R. Levin, E. Cohen, W. Corwin, F. Pollack, and W. Wulf. </author> <booktitle> Policy/mechanism seperation in HYDRA. Proceedings of the Fifth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 132-140, </pages> <year> 1975. </year>
Reference-contexts: Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets <ref> [32, 21] </ref>. Modern revisitations of microkernels have also argued for kernel extensibility [26, 1, 28, 29, 7]. Anderson and Kiczales et al. also recently argued for minimalism and customizable [2, 15].
Reference: [22] <author> J.C. Mogul, R.F. Rashid, and M.J. Accetta. </author> <title> The packet filter: An efficient mechanism for user-level network code. </title> <booktitle> In Proc. of the Eleventh ACM Symposium on Operating System Principles, </booktitle> <pages> pages 39-51, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Partial evaluation and other modern compilation techniques should enable the kernel to merge related pieces of code that are downloaded by applications, as in an aggressive version of Mogul's packet filters <ref> [22] </ref>. We envision a nested hierarchy of programming languages that enables an application to express kernel interrupt handler extensions, customize inter-process communication methods, define page replacement policies, etc. These kernel extensions and related portions of the application program could be written in a common language.
Reference: [23] <author> S.J. Mullender, G. van Rossum, A.S. Tanenbaum, R. van Renesse, and H. van Staveren. </author> <title> Amoeba: a distributed operating system for the 1990s. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 44-53, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: In a capability-based system, specific resources can be awarded to individual applications. By using probabilistic based capability checking, the exokernel can enable individual applications to efficiently manipulate the resources they own. Probabilistic checking also enables efficient revocation of resource access, as in the Amoeba kernel <ref> [23] </ref>. Furthermore, this approach allows us to extend our guiding principles to cooperating applications that have limited trust for each other. Collaborating applications can then trade decreased protection for increased efficiency.
Reference: [24] <author> A.C. Myers. </author> <title> Resolving the integrity/performance conflict. </title> <booktitle> In Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 156-160, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: The use of a typesafe language to allow user applications to augment the operating system has been explored in a personal workstation environment [27]. Myers argued for using a type safe language to load application code into the object manager in a persistent object system <ref> [24] </ref>. 5 5 Conclusions We have argued that operating systems must shed the burden of their traditional policy-laden services. We suggest exokernels as an new minimal operating system design. To minimize the overhead of protection domain crossings we proposed three customization techniques.
Reference: [25] <author> David Nagle, Richard Uhlig, Tim Stanley, Stuart Sechrest, Trevor Mudge, and Richard Brown. </author> <title> Design tradeoffs for software-managed TLBs. </title> <booktitle> 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 27-38, </pages> <year> 1993. </year>
Reference-contexts: In these microkernels the supervisor mode still defines the fixed interface among the kernel, user-level services, and applications. Therefore, applications 1 suffer from a large number of protection domain crossings. These crossings are typically expensive, as they involve entering supervisor mode and changing address spaces <ref> [25, 6, 3] </ref>. The disadvantages of fixed operating system policies are made worse by the growing diversity in hardware platforms and rapid advances of technology. For example, in a mobile computer it is of crucial importance to save power by carefully managing the spin-down policy of the disk. <p> To combat this performance penalty, current microkernels allow reintroduction of code into the kernel: the QNX operating system allows user-level handlers for device I/O [13]; Chorus servers are loaded into the kernel [28]; Mach 3.0 has migrated some of the AFS cache manager back into the kernel <ref> [25] </ref>; the Amoeba file server is usually configured to run in the kernel [29]; Windows/NT runs only non-critical services outside of the kernel [7]; Lepreau et. al. has provided a tool to reintroduce servers into Mach 3.0 [20].
Reference: [26] <author> R.F. Rashid and G. Robertson. </author> <title> Accent: A communication oriented network operating system kernel. </title> <booktitle> Proceedings of the Eighth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 64-75, </pages> <month> December </month> <year> 1981. </year>
Reference-contexts: Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [26, 1, 28, 29, 7] </ref>. Anderson and Kiczales et al. also recently argued for minimalism and customizable [2, 15].
Reference: [27] <author> D.D. Redell, Y.K. Dalal, T.R. Horsley, H.C. Lauer, W.C. Lynch, P.R. McJones, H.G. Murray, </author> <title> and S.C. Purcell. Pilot: An operating system for a personal computer. </title> <journal> Communications of the ACM, </journal> <volume> 23(2) </volume> <pages> 81-92, </pages> <month> February </month> <year> 1980. </year>
Reference-contexts: The use of a typesafe language to allow user applications to augment the operating system has been explored in a personal workstation environment <ref> [27] </ref>. Myers argued for using a type safe language to load application code into the object manager in a persistent object system [24]. 5 5 Conclusions We have argued that operating systems must shed the burden of their traditional policy-laden services.
Reference: [28] <author> M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrmann, C. Kaiser, S. Langlois, P. Leonard, and W. Neuhauser. </author> <title> Chorus distributed operating system. </title> <journal> Computing Systems, </journal> <volume> 1(4) </volume> <pages> 305-370, </pages> <year> 1988. </year>
Reference-contexts: Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [26, 1, 28, 29, 7] </ref>. Anderson and Kiczales et al. also recently argued for minimalism and customizable [2, 15]. <p> To combat this performance penalty, current microkernels allow reintroduction of code into the kernel: the QNX operating system allows user-level handlers for device I/O [13]; Chorus servers are loaded into the kernel <ref> [28] </ref>; Mach 3.0 has migrated some of the AFS cache manager back into the kernel [25]; the Amoeba file server is usually configured to run in the kernel [29]; Windows/NT runs only non-critical services outside of the kernel [7]; Lepreau et. al. has provided a tool to reintroduce servers into Mach
Reference: [29] <author> A.S. Tanenbaum, R. van Renesse, H. van Staveren, G. Sharp, S.J. Mullender, A. Jansen, and G. van Rossum. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12) </volume> <pages> 46-63, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. Modern revisitations of microkernels have also argued for kernel extensibility <ref> [26, 1, 28, 29, 7] </ref>. Anderson and Kiczales et al. also recently argued for minimalism and customizable [2, 15]. <p> code into the kernel: the QNX operating system allows user-level handlers for device I/O [13]; Chorus servers are loaded into the kernel [28]; Mach 3.0 has migrated some of the AFS cache manager back into the kernel [25]; the Amoeba file server is usually configured to run in the kernel <ref> [29] </ref>; Windows/NT runs only non-critical services outside of the kernel [7]; Lepreau et. al. has provided a tool to reintroduce servers into Mach 3.0 [20]. Draves has argued for selecting among several implementations of a specific kernel abstraction to allow customization [9].
Reference: [30] <author> R. Wahbe, S. Lucco, T. Anderson, and S. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 203-216, </pages> <year> 1993. </year>
Reference-contexts: Inlined cross-domain calls. Code inspection that prohibits indirect loads and stores will be too restrictive for many application purposes. Wahbe <ref> [30] </ref> shows that sandboxing can be used to restrict the domain of indirect memory operations, but with an overhead of several instructions per guarded operation. The motivation of sandboxing is to simulate address-space protection domains when cross-domain calls are expensive. <p> Techniques for certifying the safety of code include inspection and sandboxing. Deutsch showed how to safely introduce user-written instrumentation code into a running kernel by bounding loads, stores, jumps and runtime [8]. Making existing binaries safe has been done by Wahbe <ref> [30] </ref>. Although this technique will be useful for controlling entry points, we expect that loads and stores can be constrained more efficiently by changing the address context quickly within supervisor mode.
Reference: [31] <author> B.A. Wichmann. </author> <title> A modular operating system. </title> <booktitle> Proc. IFIP Cong. </booktitle> <year> 1968, 1968. </year>
Reference-contexts: We are now designing an Aegis "kernel extension language" to specify the primitive procedural interface to the system. 4 4 Related Work Many early operating systems papers discussed the need for extendable kernels <ref> [18, 32, 14, 19, 31, 11] </ref>. Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21].
Reference: [32] <author> W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack. HYDRA: </author> <title> The kernel of a multiprocessing operating system. </title> <journal> Communications of the ACM, </journal> <volume> 17(6) </volume> <pages> 337-345, </pages> <month> July </month> <year> 1974. </year> <month> 7 </month>
Reference-contexts: We are now designing an Aegis "kernel extension language" to specify the primitive procedural interface to the system. 4 4 Related Work Many early operating systems papers discussed the need for extendable kernels <ref> [18, 32, 14, 19, 31, 11] </ref>. Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets [32, 21]. <p> Lampson's description of the CAL-TSS [17] and Brinch Hansen's microkernel paper [10] are two classic rationales. Hydra was the most ambitious system to have the separation of kernel policy and mechanism as one of its central tenets <ref> [32, 21] </ref>. Modern revisitations of microkernels have also argued for kernel extensibility [26, 1, 28, 29, 7]. Anderson and Kiczales et al. also recently argued for minimalism and customizable [2, 15].
References-found: 32

