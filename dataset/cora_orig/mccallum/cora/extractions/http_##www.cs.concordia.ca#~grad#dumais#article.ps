URL: http://www.cs.concordia.ca/~grad/dumais/article.ps
Refering-URL: http://www.cs.concordia.ca/~grad/dumais/
Root-URL: http://www.cs.concordia.ca
Note: Contents  
Abstract-found: 0
Intro-found: 1
Reference: [CL85] <author> K. M. Chandy and L. Lamport, </author> <title> Distributed Snapshots: Determining Global States of Distributed Systems, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol 3, No. 1, </volume> <month> Feb. </month> <year> 1985, </year> <pages> pp. 63-75. </pages>
Reference-contexts: Researchers have shown that simple classes of predicates, as the stable predicates and the conjunctive predicates, can be detected efficiently on any distributed computations <ref> [CL85, HMRS95, GW96] </ref>. In the case of a more complex predicate as x 1 + x 2 + : : : + x n &gt; c the complexity of the predicate adds up to the complexity of the distributed compu-tation which render the detection intractable.
Reference: [Du98] <author> G. Dumais, </author> <title> Detection of Separable Predicates on Series-Parallel Systems, M. Sc. </title> <type> Thesis, </type> <institution> Concordia University, Montreal, </institution> <month> Sept. </month> <year> 1998, </year> <pages> 88 pages. </pages>
Reference: [Ep92] <author> D. Eppstein, </author> <title> Parallel Recognition of Series-Parallel Graphs, </title> <journal> Information and Computation, </journal> <volume> No. 98, </volume> <year> 1992, </year> <pages> 41-55. </pages>
Reference-contexts: The presentation of any of these recognition procedures is long and we prefer referring the reader to the relevant papers. For a general procedure to recognize series-parallel directed graphs, see [VTL82]. Parallel recognition algorithms are found in <ref> [Ep92] </ref> and [HY87]. A word of caution is needed here. The recognition algorithms mentioned above are generally designed for acyclic directed graphs. We mentionned earlier that the 23 send-receive relation is not antisymmetric. It means that communication graphs may contain cycles. This slightly complicate the recogition algorithm on these graphs.
Reference: [Fi91] <author> C. Fidge, </author> <title> Logical time in distributed systems, </title> <journal> IEEE Computers, </journal> <month> Aug. </month> <year> 1991, </year> <pages> pp. 11-16. </pages>
Reference: [FR94] <author> E. Fromentin and M. Raynal, </author> <title> Inevitable Global States: a Concept to Detect Properties of Distributed Computations in an Observer Independent Way, </title> <type> technical report No. 2317, </type> <institution> INRIA, IRISA, </institution> <month> Aug. </month> <year> 1994, </year> <pages> 18 pages. </pages>
Reference-contexts: They can be classified into three main categories. general no restriction is made on the class of the pred icate or the distributed computation [MN91] logically restricted restriction are made on the type of predicates that can be detected by the algorithms <ref> [FR94] </ref>, [GW96] logically and physically restricted restrictions are made on the type of the predicates that can be detected by the algorithms and the type of distributed computations on which the detection will work [TG93], The complexity of the detection problem come from two sources: the complexity of the predicate and <p> 2 1), (2 2 1), (3 2 1), (3 3 1) in Figure 4. 8 P 1 P 3 3 2 13 3 0 3 1 0 2 2 0 1 2 1 1 1 0 0 2 0 0 0 0 2.3 Abstraction Layers According to Fromentin and Raynal <ref> [FR94] </ref>, there exist two levels of description of a distributed computation. The first level is the one discussed above where all the changes in the local states, all the sendings and all the receipts of messages are events.
Reference: [GW94] <author> V. K. Garg and B. Waldecker, </author> <title> Detection of Weak Unstable Predicates in Distributed Programs, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 5, No. 3, </volume> <month> Mar. </month> <year> 1994, </year> <pages> pp. 299-307. </pages>
Reference: [GW96] <author> V. K. Garg and B. Waldecker, </author> <title> Detection of Strong Unstable Predicates in Distributed Programs, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 7, No. 12, </volume> <month> Dec. </month> <year> 1996, </year> <pages> pp. 1323-1333. </pages>
Reference-contexts: They can be classified into three main categories. general no restriction is made on the class of the pred icate or the distributed computation [MN91] logically restricted restriction are made on the type of predicates that can be detected by the algorithms [FR94], <ref> [GW96] </ref> logically and physically restricted restrictions are made on the type of the predicates that can be detected by the algorithms and the type of distributed computations on which the detection will work [TG93], The complexity of the detection problem come from two sources: the complexity of the predicate and the <p> Researchers have shown that simple classes of predicates, as the stable predicates and the conjunctive predicates, can be detected efficiently on any distributed computations <ref> [CL85, HMRS95, GW96] </ref>. In the case of a more complex predicate as x 1 + x 2 + : : : + x n &gt; c the complexity of the predicate adds up to the complexity of the distributed compu-tation which render the detection intractable.
Reference: [HY87] <author> X. He and Y. Yesha, </author> <title> Parallel Recognition and Decomposition of Two Terminal Series Parallel Graphs, </title> <journal> Information and Computation, </journal> <volume> Vol. 75, </volume> <year> 1987, </year> <pages> pp. 15-38. </pages>
Reference-contexts: The presentation of any of these recognition procedures is long and we prefer referring the reader to the relevant papers. For a general procedure to recognize series-parallel directed graphs, see [VTL82]. Parallel recognition algorithms are found in [Ep92] and <ref> [HY87] </ref>. A word of caution is needed here. The recognition algorithms mentioned above are generally designed for acyclic directed graphs. We mentionned earlier that the 23 send-receive relation is not antisymmetric. It means that communication graphs may contain cycles. This slightly complicate the recogition algorithm on these graphs.
Reference: [HMRS95] <author> M. Hurfin, M. Mizuno, M. Raynal and M. Singhal, </author> <title> Efficient Distributed Detection of Conjunctions of Local Predicates, </title> <type> technical report No. 2731, </type> <institution> INRIA, IRISA, </institution> <month> Nov. </month> <year> 1995, </year> <pages> 35 pages. 34 </pages>
Reference-contexts: Researchers have shown that simple classes of predicates, as the stable predicates and the conjunctive predicates, can be detected efficiently on any distributed computations <ref> [CL85, HMRS95, GW96] </ref>. In the case of a more complex predicate as x 1 + x 2 + : : : + x n &gt; c the complexity of the predicate adds up to the complexity of the distributed compu-tation which render the detection intractable.
Reference: [MN91] <author> K. Marzullo and G. Neiger, </author> <title> Detection of Global State Predicate, </title> <booktitle> Lectures Notes in Computer Science, </booktitle> <volume> 59, </volume> <publisher> Springer Verlag, </publisher> <year> 1991, </year> <pages> pp. 254-272. </pages>
Reference-contexts: Several algorithms have been presented for these classes. They can be classified into three main categories. general no restriction is made on the class of the pred icate or the distributed computation <ref> [MN91] </ref> logically restricted restriction are made on the type of predicates that can be detected by the algorithms [FR94], [GW96] logically and physically restricted restrictions are made on the type of the predicates that can be detected by the algorithms and the type of distributed computations on which the detection will
Reference: [Ma88] <author> F. Mattern, </author> <title> Virtual time and global state of distributed systems, </title> <booktitle> Proc. Parallel and distributed algorithms Conf., </booktitle> <editor> (Cosnard, Quinton, Raynal, Robert Eds), </editor> <publisher> North Holland, </publisher> <year> 1988, </year> <pages> pp. 215-226. </pages>
Reference: [TG93] <author> A. I. Tomlinson and V. K. Garg, </author> <title> Detecting Relational Global Predicates in Distributed Systems, </title> <booktitle> In Proc. of the 3 rd ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 21-31. </pages>
Reference-contexts: restricted restriction are made on the type of predicates that can be detected by the algorithms [FR94], [GW96] logically and physically restricted restrictions are made on the type of the predicates that can be detected by the algorithms and the type of distributed computations on which the detection will work <ref> [TG93] </ref>, The complexity of the detection problem come from two sources: the complexity of the predicate and the complexity of the distributed computation on which the detection has to be performed.
Reference: [TG97] <author> A. I. Tomlinson, V. K. Garg, </author> <title> Monitoring Functions on Global States of Distributed Programs, </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 41, </volume> <year> 1997, </year> <pages> pp. 173-189 </pages>
Reference-contexts: detection problem is easy 2. determine a way to decompose more complex distributed computa tions into the simple one 3. verify that the restricted class of predicates can be detected easily on those decomposed distributed computations The work most closely related to ours is the one by Tomlinson and Garg <ref> [TG97] </ref>. We recall that they provided an algorithm to perform the detection of relational predicates of the form x 1 + x 2 &gt; c, where x i are integer valued variables. Our goal is to extend the detection to two larger classes of predicates.

References-found: 13

