URL: http://www.cs.unm.edu/~kapur/abstracts/overview.rrl.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/overview.rrl.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu  hzhang@cs.uiowa.edu  
Title: An Overview of Rewrite Rule Laboratory (RRL)  
Author: Deepak Kapur Hantao Zhang 
Keyword: Key words. RRL, rewrite techniques, equational logic, discrimination nets  
Address: Albany, NY 12222  Iowa City, IA 52242  
Affiliation: Department of Computer Science State University of New York at Albany  Department of Computer Science The University of Iowa  
Abstract: RRL (Rewrite Rule Laboratory) was originally developed as an environment for experimenting with automated reasoning algorithms for equational logic based on rewrite techniques. It has now matured into a full-fledged theorem prover which has been used to solve hard and challenging mathematical problems in automated reasoning literature as well as a research tool for investigating the use of formal methods in hardware and software design. We provide a brief historical account of development of RRL and its descendants, give an overview of the main capabilities of RRL and conclude with a discussion of applications of RRL. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agarwal, R., Kapur, D., Musser, D. R., and Nie, X., </author> <title> Tecton proof system. </title> <booktitle> In: Proc. Fourth International Conference on Rewriting Techniques and Applications, </booktitle> <address> Milan, Italy, </address> <year> 1991. </year>
Reference-contexts: CCR-9303394. y Partially supported by the National Science Foundation Grants nos. INT-9016100, CCR-9202838, and CCR-9357851. Short system abstracts of RRL and its descendants outlining extensions to RRL have appeared in the proceedings of CADE [33, 36, 16, 61] and RTA conferences <ref> [38, 1] </ref>. <p> This interactive manager to support failure-resistant induction was used to prove many benchmark problems for inductive theorem proving. Another interactive verification/proof management system called Tecton <ref> [1] </ref> has been developed on the top of RRL by Kapur, Musser, and Nie [1, 24] using a hyper-text system called KMS (Knowledge Management System). The emphasis in the development of Tecton is on proof visualization and management. <p> This interactive manager to support failure-resistant induction was used to prove many benchmark problems for inductive theorem proving. Another interactive verification/proof management system called Tecton [1] has been developed on the top of RRL by Kapur, Musser, and Nie <ref> [1, 24] </ref> using a hyper-text system called KMS (Knowledge Management System). The emphasis in the development of Tecton is on proof visualization and management. <p> Below is a partial transcript generated, which illustrates how new operators are introduced by RRL: Type Add, Auto, Break, Cmd, Close, Delete, Gc, Grammar, Init, Kb, List, Makerule, Option, Operator, Prove, Quit, Read, Stats, Test, Write or Help. 5 HERKY-&gt; kb Add Rule: <ref> [1] </ref> (i ((x * i (x))) * (i ((i (((y * z) * u)) * y)) * i (u))) ---&gt; z ... ... <p> Since 1990, Kapur, in collaboration with David Musser, has been developing the Tecton proof system. Tecton (Greek for "builder") is a methodology and tool set for formal specification and verification of computational systems (both hardware designs and software) <ref> [1, 23, 24] </ref>, in which RRL is the main inference engine. In formulating the goals of Tecton and designing its tools, we are seeking to combine many of the key advances in specification and proof technology.
Reference: [2] <author> Anantharaman, S., and Hsiang, J., </author> <title> Automated proofs of the Moufang identities in alternative rings, </title> <editor> J. </editor> <booktitle> Automated Reasoning 6 (1990): </booktitle> <pages> 79-109. </pages>
Reference-contexts: (i ((x * i (x))) * (i ((i ((z1 * u)) * i ((x1 * i (x1))))) * i (u))) == Introduce a new operator: (i ((x * i (x))) * (i ((i ((z1 * u)) * i ((x1 * i (x1))))) * i (u))) == f1 (z1) Add Rule: <ref> [2] </ref> (i ((i (((x * y) * z)) * x)) * i (z)) ---&gt; f1 (y) Add Rule: [3] (i ((x * i (x))) * (i ((i ((u * y)) * i ((z * i (z))))) * i (y))) ---&gt; f1 (u) ... ... <p> The definitions of a and f are as follows: a (x; y; z) = (x fl y) fl z + (x fl (y fl z)) The table also gives some experimental results of running these problems on RRL. For comparison, related results from Anantharaman and Hsiang <ref> [2] </ref> are reported. (We are not aware of other general theorem provers on which these problems have been successfully solved.) The timings of SBR2 were measured on a Sun 3/60 and those of of RRL are on a Sun SPARC-station 1 (in seconds).
Reference: [3] <author> Basin, D., and Kaufmann, M., </author> <title> The Boyer-Moore prover and Nuprl: An experimental comparison. </title> <booktitle> In: Proc. BRA Logical Frameworks Workshop, </booktitle> <year> 1990. </year>
Reference-contexts: i (u))) == Introduce a new operator: (i ((x * i (x))) * (i ((i ((z1 * u)) * i ((x1 * i (x1))))) * i (u))) == f1 (z1) Add Rule: [2] (i ((i (((x * y) * z)) * x)) * i (z)) ---&gt; f1 (y) Add Rule: <ref> [3] </ref> (i ((x * i (x))) * (i ((i ((u * y)) * i ((z * i (z))))) * i (y))) ---&gt; f1 (u) ... ...
Reference: [4] <author> Benanav, D., Kapur, D., and Narendran, P., </author> <title> Complexity of matching problems, </title> <journal> J. </journal> <note> Symbolic Computation 3 (1987) 203-216. </note>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification <ref> [25, 4, 26] </ref>, efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66].
Reference: [5] <author> Boyer, R. S., and Moore, J S., </author> <title> A computational logic. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference: [6] <author> Boyer, R. S., and Moore, J S., </author> <title> A computational logic handbook. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: Note that neither subsumption nor demodulation can simplify the above clause to :istiger (y) (which can be obtained by resolution). 2 The idea of simplifying one literal while using the remaining literals in a clause as its context comes from Boyer and Moore's theorem prover <ref> [6] </ref>. A formal analysis of contextual rewriting is given in [63], where it is shown that this rewriting is useful not only for inductive theorem proving, but also for deductive theorem proving when each clause is viewed as a (conditional) rewrite rule.
Reference: [7] <author> Christian, J., </author> <title> Fast Knuth-Bendix completion: Summary. </title> <booktitle> In: Proc. Third International Conference on Rewriting Techniques and Applications, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 355, </volume> <publisher> Springer-Verlag, </publisher> <year> 1989, </year> <pages> pp. 548-510. </pages>
Reference-contexts: Example 2.1 A family of problems were used by Jim Christian <ref> [7] </ref> as benchmark problems for comparing the performance of different implementations of completion procedures. <p> (x)) = e j for 1 j n: That is, each A n defines a binary operator f that is associative, and has n left-units and n right-inverses. 2 We have tried to complete A n for n = 10i, 1 i 10, in three theorem provers: OTTER [45], Hiper <ref> [7] </ref>, and Herky, a descendent of RRL. Table 1 gives the statistics of these runs. All the run times are collected using a Sun SPARCstation 1 (16-megabyte memory). <p> OTTER supports a rich set of inference rules, including the Knuth-Bendix completion procedure. Hiper was claimed by its creator Jim Christian as "the fastest completion procedure in the world" <ref> [7] </ref>. Both Hiper and Herky are written in Common Lisp. For A 50 , Hiper fails to produce a complete system because the theorem prover ran out of memory.
Reference: [8] <author> Dershowitz, N., </author> <title> Termination of rewriting. </title> <journal> J. </journal> <note> Symbolic Computation 3 (1987) 69-116. </note>
Reference-contexts: More details about RRL's descendants and their capabilities are given in later sections. 1.3 Capabilities of RRL As mentioned earlier, RRL was initially implemented to study inference methods such as the Knuth-Bendix completion procedure [19] and lexicographic recursive path ordering, a method for orienting equations into terminating rewriting rules <ref> [8] </ref>. However, this environment soon began serving as a vehicle for generating new ideas, concepts, and algorithms that could be implemented and tested for their effectiveness. <p> That is why a study of termination orderings has been an important research area of rewriting techniques. In RRL, rules can be made from equations manually or using an algorithm for lexicographic recursive path ordering (lrpo) <ref> [8] </ref> and the associative-commutative lexicographic recursive path ordering (aclrpo) [34]. Both lrpo and aclrpo extend a precedence relation on function symbols to terms.
Reference: [9] <author> Erickson, R. W., and Musser, D. R., </author> <title> The AFFIRM theorem prover: Proof forests and management of large proofs. </title> <booktitle> In: Proc. 7th International Conference on Automated Deduction, </booktitle> <year> 1980. </year>
Reference-contexts: Tecton represents and manages proofs internally in flexible structures called proof forests, allowing records of multiple complete or incomplete proof attempts to be retained (an extension of the proof forest notion of <ref> [9] </ref>). Tecton uses a hypertext system, KMS (Knowledge Management 23 System), for the structured external display format to present proofs to the user, using tables, graphics, and hypertext links.
Reference: [10] <author> Goguen, J. A., </author> <title> How to prove algebraic inductive hypotheses without induction. </title> <booktitle> In: Proc. Fifth Conference on Automated Deduction, </booktitle> <editor> W. Bibel and R. Kowalski (eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 87, </volume> <publisher> Springer-Verlag, </publisher> <year> 1980, </year> <pages> pp. 356-373. </pages>
Reference-contexts: The consistency check can be shown to be equivalent to the property that the left side of rewrite rules generated during completion is ground-reducible. This method has an advantage over earlier methods proposed by Musser [46], Goguen <ref> [10] </ref>, and Huet and Hullot [17] as constructors need not be free. An efficient method to decide the ground reducibility of a term in left-linear systems (the occurrence of each variable in the left side of each rule is unique) is implemented in RRL [28].
Reference: [11] <author> Guttag, J. V., Kapur, D., and Musser, D. R., eds., </author> <title> In: Proc. NSF Workshop on the Rewrite Rule Laboratory, </title> <booktitle> Sept. </booktitle> <pages> 6-9, </pages> <year> 1983. </year>
Reference-contexts: applications for which the theorem prover has been successfully used. 1.1 A Brief History of the RRL Project The work on the RRL project was started at General Electric Corporate Research and Development (GECRD) and RPI in fall 1983, following a workshop on rewrite rule laboratories in Schenectady, New York <ref> [11] </ref>. Sivakumar wrote the first version of RRL as his M.S. degree project at RPI under Kapur's supervision. The first report on the RRL project appeared in the proceedings of the workshop [32].
Reference: [12] <author> Hsiang, J., </author> <title> Refutational theorem proving using term-rewriting systems. </title> <booktitle> Artificial Intelligence 25 (1985) 255-300. </booktitle> <pages> 25 </pages>
Reference-contexts: In the odd-strategy method, new polynomials are generated from two polynomials only if one of the two polynomials has odd number of monomials; only maximal atoms from the odd polynomial are considered for critical pair computation. The odd-strategy is an extension of the N-strategy <ref> [12] </ref>. One advantage of the odd-strategy over the N-strategy is that there is no need to convert input formulas into clauses before transforming them into polynomials.
Reference: [13] <author> Hua, G. X., </author> <title> Formal Verification of Circuit Designs in VHDL. </title> <type> Ph.D thesis, </type> <institution> Department of Computer Science, The University of Iowa, </institution> <year> 1992. </year>
Reference-contexts: See [48] for more details. Recently, Hua and Zhang enriched VHDL to provide a common language for specifying, designing, and verifying hardware circuits. Based on a denotational semantics of VHDL proposed by Hua in his thesis <ref> [13] </ref>, a prototype translator was implemented that automatically translates VHDL specifications into algebraic specifications accepted by RRL.
Reference: [14] <author> Hua, G. X., and Zhang, H., </author> <title> Axiomatic semantics of a hardware specification language. </title> <booktitle> In Proc. Second IEEE Great Lakes Symposium on VLSI Design, </booktitle> <address> Kalamazoo, Michigan, </address> <year> 1992, </year> <pages> pp. 183-190. </pages>
Reference: [15] <author> Hua, G. X., and Zhang, H., </author> <title> Formal semantics of VHDL for verification of circuit designs. </title> <booktitle> In: Proc. IEEE International Conference on Circuit Designs, </booktitle> <year> 1993. </year>
Reference-contexts: Hua and Zhang have successfully verified using RRL the correctness of various circuit designs, including an ALU, a generic decoder, a traffic light controller and a systolic array multiplier <ref> [15] </ref>. 4.2 Software Verification and the Tecton System Since 1985, RRL has been used to prove properties of algorithms and data structures in which specifications are written as equational axioms. For example, alternating bit-protocol was analyzed, and stacks and other data structures were established.
Reference: [16] <author> Hua, G. X., and Zhang, H., FRI: </author> <title> Failure Resistant Induction in RRL. </title> <booktitle> In: Proc. 1992 International Conference of Automated Deduction, </booktitle> <editor> D. Kapur (ed.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 607, </volume> <publisher> Springer-Verlag, </publisher> <year> 1992, </year> <pages> pp. 691-695. </pages>
Reference-contexts: CCR-9303394. y Partially supported by the National Science Foundation Grants nos. INT-9016100, CCR-9202838, and CCR-9357851. Short system abstracts of RRL and its descendants outlining extensions to RRL have appeared in the proceedings of CADE <ref> [33, 36, 16, 61] </ref> and RTA conferences [38, 1]. <p> An interactive proof manager based on the ideas of the proof manager in the AFFIRM system has been developed for RRL by Hua and Zhang <ref> [16] </ref>. This interactive manager to support failure-resistant induction was used to prove many benchmark problems for inductive theorem proving.
Reference: [17] <author> Huet, G., and Hullot, J. M., </author> <title> Proofs by induction in equational theories with constructors. </title> <booktitle> In: 21st IEEE Symposium on Foundations of Computer Science, </booktitle> <address> Syracuse, N.Y., </address> <year> 1980, </year> <pages> pp. 96-107. </pages>
Reference-contexts: The consistency check can be shown to be equivalent to the property that the left side of rewrite rules generated during completion is ground-reducible. This method has an advantage over earlier methods proposed by Musser [46], Goguen [10], and Huet and Hullot <ref> [17] </ref> as constructors need not be free. An efficient method to decide the ground reducibility of a term in left-linear systems (the occurrence of each variable in the left side of each rule is unique) is implemented in RRL [28].
Reference: [18] <author> Jouannaud, J., and Kounalis, E., </author> <title> Automatic proofs by induction in equational theories without constructors. </title> <booktitle> In: Proc. Symposium on Logic in Computer Science, </booktitle> <year> 1986, </year> <pages> pp. 358-366. </pages>
Reference-contexts: Two inductionless induction methods, ground-reducibility and test set, have been implemented in RRL. The ground-reducibility (also called quasi-reducibility or inductive reducibility) method was proposed in <ref> [18] </ref>. A term is ground-reducible if and only if every ground instance of this term is reducible. The consistency check can be shown to be equivalent to the property that the left side of rewrite rules generated during completion is ground-reducible.
Reference: [19] <author> Knuth, D., and Bendix, P., </author> <title> Simple word problems in universal algebras. In: Computational Problems in Abstract Algebra, </title> <editor> Leech (ed.), </editor> <address> New York: </address> <publisher> Pergamon Press, </publisher> <year> 1970, </year> <pages> pp. 263-297. </pages>
Reference-contexts: The first report on the RRL project appeared in the proceedings of the workshop [32]. The performance of an RRL implementation of the completion procedure discussed in a seminal paper by Knuth and Bendix <ref> [19] </ref> was analyzed on small examples for different rewriting strategies and selection criteria for picking equations to generate next inferences. The second report on RRL appeared in the 1986 CADE proceedings after Zhang began working at RPI as a Ph.D. student [33]. <p> Presburger arithmetic has been integrated into the rewriting inference mechanism of the theorem prover. More details about RRL's descendants and their capabilities are given in later sections. 1.3 Capabilities of RRL As mentioned earlier, RRL was initially implemented to study inference methods such as the Knuth-Bendix completion procedure <ref> [19] </ref> and lexicographic recursive path ordering, a method for orienting equations into terminating rewriting rules [8]. However, this environment soon began serving as a vehicle for generating new ideas, concepts, and algorithms that could be implemented and tested for their effectiveness.
Reference: [20] <author> Kapur, D., and Narendran, P., </author> <title> An equational approach to theorem proving in first-order predicate calculus. </title> <booktitle> In: Proc. 9th IJCAI, </booktitle> <year> 1985. </year>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving <ref> [20, 70] </ref>, methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66]. <p> If 1 = 0 is derived, then the input formulas are unsatisfiable (or inconsistent). 12 RRL supports two methods of the Boolean-ring-based approach: The Grobner base method developed by Kapur and Narendran <ref> [20] </ref> and the so-called odd-strategy method developed by Zhang [64]. In the Grobner base method, a rewrite rule is made from each polynomial such that the left side of the rewrite rule consists of the maximal monomials. New polynomials are generated from any two polynomials by unifying their maximal monomials. <p> New polynomials are generated from any two polynomials by unifying their maximal monomials. Many benchmark problems have been effectively solved using the Grobner basis method. More details about the Grobner basis approach can be found in <ref> [20] </ref>. Some of earlier work on hardware verification work to be mentioned later in the section on applications was done using this method.
Reference: [21] <author> Kapur, D., and Musser, D. R., </author> <title> Proof by consistency. </title> <booktitle> Artificial Intelligence 31 (1984) 125-157. </booktitle>
Reference-contexts: inference methods for * generating decision procedures for equational theories using completion procedures; * refutational methods for proving theorems in first-order predicate calculus with equality; * proving formulas by induction using the explicit induction approach based on the cover set method, as well as using the proof by consistency approach <ref> [46, 21] </ref> (also called the inductionless-induction approach); and * checking the consistency and completeness of equational specifications. RRL is perhaps one of the few theorem provers in the world providing such extensive capabilities for equational logic, first-order theorem proving, and theorem proving by induction.
Reference: [22] <author> Kapur, D., Musser, D. R., and Narendran, P., </author> <title> Only prime superpositions need be considered for the Knuth-Bendix completion procedure. </title> <journal> J. </journal> <note> Symbolic Computation 4 (1988). </note>
Reference-contexts: However, this environment soon began serving as a vehicle for generating new ideas, concepts, and algorithms that could be implemented and tested for their effectiveness. Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences <ref> [22, 71] </ref>, complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational <p> For years, researchers have been working in this area, and a number of such criteria have been developed. Among them are the blocked superposition criterion [44], connectedness criterion [55], prime superposition criterion <ref> [22] </ref>, subconnectedness criterion [42], general superposition criterion, and symmetric superposition criterion [71]. More recently, strict and basic superpositions are being investigated in the context of clausal superposition techniques for first-order theorem proving. Most of the papers on critical pair criteria have focused on the safety of a critical pair criterion. <p> Several critical pair criteria have been implemented in RRL and tested for various examples. We are particularly interested in criteria that can be implemented cost-free, that is, by applying such a criterion is just part of the normalization process. Two criteria, the blocked superposition criterion <ref> [22] </ref> and the left-composite superposition criterion [60], are known to be such criteria. Both of them are implemented in RRL; this fact explains partially why RRL generates much less critical pairs than both OTTER and Hyper on Christian's benchmark 8 examples (see example 2.1).
Reference: [23] <author> Kapur, D., and Musser, D. R. </author> <year> (1992): </year> <title> Tecton: A Framework for Specifying and Verifying Generic System Components. Invited talk at TPCD Conf. 1992 (Theorem Provers in Circuit Design), </title> <institution> University of Nijmegen, </institution> <address> The Netherlands, </address> <month> June 22-24, </month> <year> 1992. </year>
Reference-contexts: Since 1990, Kapur, in collaboration with David Musser, has been developing the Tecton proof system. Tecton (Greek for "builder") is a methodology and tool set for formal specification and verification of computational systems (both hardware designs and software) <ref> [1, 23, 24] </ref>, in which RRL is the main inference engine. In formulating the goals of Tecton and designing its tools, we are seeking to combine many of the key advances in specification and proof technology. <p> Tecton has been used to prove properties of simple (but efficient) programs on integers, equational programs for sorting and searching, and simple programs using abstract data types. More details about the Tecton system can be found in <ref> [24, 23] </ref>. 4.3 Attacking Challenge Problems In 1988, RRL was successfully used to attack the so-called ring commutativity problems, considered a challenge for theorem provers [56].
Reference: [24] <author> Kapur, D., Musser, D. R., and Nie, X., </author> <title> Tecton proof system. </title> <booktitle> In: In: Proc. Workshop on Formal Methods in Databases and Software Engineering, </booktitle> <editor> Alagar, Lakshmanan, and Sadri (eds.), </editor> <booktitle> Workshop in Computing Series, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992, </year> <pages> pp. 54-79. </pages>
Reference-contexts: This interactive manager to support failure-resistant induction was used to prove many benchmark problems for inductive theorem proving. Another interactive verification/proof management system called Tecton [1] has been developed on the top of RRL by Kapur, Musser, and Nie <ref> [1, 24] </ref> using a hyper-text system called KMS (Knowledge Management System). The emphasis in the development of Tecton is on proof visualization and management. <p> Tecton supports a simple program modeling language (which includes assignment, sequencing, conditionals, while, and procedure calls) used in most 2 of the literature on Hoare's axiomatic semantics formalism. Properties of programs in the modeling language can be proved in Tecton (a sample transcript appears in <ref> [24] </ref>). Presburger arithmetic has been integrated into the rewriting inference mechanism of the theorem prover. <p> Since 1990, Kapur, in collaboration with David Musser, has been developing the Tecton proof system. Tecton (Greek for "builder") is a methodology and tool set for formal specification and verification of computational systems (both hardware designs and software) <ref> [1, 23, 24] </ref>, in which RRL is the main inference engine. In formulating the goals of Tecton and designing its tools, we are seeking to combine many of the key advances in specification and proof technology. <p> Tecton has been used to prove properties of simple (but efficient) programs on integers, equational programs for sorting and searching, and simple programs using abstract data types. More details about the Tecton system can be found in <ref> [24, 23] </ref>. 4.3 Attacking Challenge Problems In 1988, RRL was successfully used to attack the so-called ring commutativity problems, considered a challenge for theorem provers [56].
Reference: [25] <author> Kapur, D., and Narendran, P., </author> <title> Matching, unification and complexity, </title> <journal> SIGSAM Bulletin, </journal> <year> 1987. </year>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification <ref> [25, 4, 26] </ref>, efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66]. <p> This data structure is efficient for computing odd-superpositions but may not be good for rewriting. A complete implementation of rewriting requires set matching, an NP-complete step (because subsumption can be implementing by rewriting using polynomials) <ref> [25] </ref>. It might be better to designate only a small subset of rules for rewriting. 13 2.4 Clausal Superposition Theorem Proving The so-called clausal superposition method [70] is implemented in RRL to support the second approach for first-order theorem proving. The input for this method is a set of clauses.
Reference: [26] <author> Kapur, D., and Narendran, P., </author> <title> Complexity of unification problems with associative-commutative operators, </title> <journal> J. </journal> <note> Automated Reasoning 9 (1992) 261-288. </note>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification <ref> [25, 4, 26] </ref>, efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66].
Reference: [27] <author> Kapur, D., and Narendran, P., </author> <title> Double-exponential complexity of computing a complete set of AC-unifiers. </title> <booktitle> In: Proc. Logic in Computer Science, </booktitle> <address> Santa Cruz, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations <ref> [27] </ref>, approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66]. <p> For associative-commutative operators, identifying redundant critical pairs becomes all the more important because of numerous unifiers generated by an associative-commutative unification procedure <ref> [27] </ref>. We consider this to be one of the major strengths of RRL because of which it is possible to tackle challenging mathematical problems such as ring commutativity problems.
Reference: [28] <author> Kapur, D., Narendran, P., Rosenkrantz, D., and Zhang, H., Sufficient-completeness, </author> <title> quasi-reducibility and their complexity, </title> <journal> Acta Informatica, </journal> <volume> 28 (1991) 311-350. </volume> <pages> 26 </pages>
Reference-contexts: of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications <ref> [28] </ref>, and specialized completion procedures for equational theories [66]. <p> An efficient method to decide the ground reducibility of a term in left-linear systems (the occurrence of each variable in the left side of each rule is unique) is implemented in RRL <ref> [28] </ref>. In [30], we discussed a more efficient method for checking consistency based on the concept of test set. Test sets were developed in [28] to check whether a nonconstructor function is completely specified by a rewrite system. <p> ground reducibility of a term in left-linear systems (the occurrence of each variable in the left side of each rule is unique) is implemented in RRL <ref> [28] </ref>. In [30], we discussed a more efficient method for checking consistency based on the concept of test set. Test sets were developed in [28] to check whether a nonconstructor function is completely specified by a rewrite system. A test set is a finite set of terms that describes the equivalence classes of constructor ground terms defined by equations defining constructor functions.
Reference: [29] <author> Kapur, D., Narendran, P., and Zhang, H., </author> <title> On sufficient completeness and related proper-ties of term rewriting systems, </title> <journal> Acta Informatica 24, </journal> <volume> Fasc. </volume> <month> 4 (August </month> <year> 1987) </year> <month> 395-416. </month>
Reference: [30] <author> Kapur, D., Narendran, P., and Zhang, H., </author> <title> Proof by induction using test sets. </title> <booktitle> In: Proc. Eighth International Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 230, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1986, </year> <pages> pp. 99-117. </pages>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction <ref> [30, 72] </ref>, algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66]. <p> An efficient method to decide the ground reducibility of a term in left-linear systems (the occurrence of each variable in the left side of each rule is unique) is implemented in RRL [28]. In <ref> [30] </ref>, we discussed a more efficient method for checking consistency based on the concept of test set. Test sets were developed in [28] to check whether a nonconstructor function is completely specified by a rewrite system.
Reference: [31] <author> Kapur, D., Narendran, P., and Zhang, H., </author> <title> Automating inductionless induction by test sets, </title> <journal> J. </journal> <note> Symbolic Computation 11 (1991) 83-111. </note>
Reference: [32] <author> Kapur, D., and Sivakumar, G., </author> <title> Architecture of and experiments with RRL, a Rewrite Rule Laboratory. </title> <booktitle> In: Reference [11], </booktitle> <pages> pp. 33-56. </pages>
Reference-contexts: Sivakumar wrote the first version of RRL as his M.S. degree project at RPI under Kapur's supervision. The first report on the RRL project appeared in the proceedings of the workshop <ref> [32] </ref>. The performance of an RRL implementation of the completion procedure discussed in a seminal paper by Knuth and Bendix [19] was analyzed on small examples for different rewriting strategies and selection criteria for picking equations to generate next inferences.
Reference: [33] <author> Kapur, D., Sivakumar, G., and Zhang, H., RRL: </author> <title> A Rewrite Rule Laboratory. </title> <booktitle> In: Proc. Eighth International Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 230, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1986, </year> <pages> pp. 692-693. </pages>
Reference-contexts: CCR-9303394. y Partially supported by the National Science Foundation Grants nos. INT-9016100, CCR-9202838, and CCR-9357851. Short system abstracts of RRL and its descendants outlining extensions to RRL have appeared in the proceedings of CADE <ref> [33, 36, 16, 61] </ref> and RTA conferences [38, 1]. <p> The second report on RRL appeared in the 1986 CADE proceedings after Zhang began working at RPI as a Ph.D. student <ref> [33] </ref>. Since then, Kapur and Zhang have been working together on the RRL project. Their collaborations, as well as joint work with other colleagues including Sivakumar, Narendran, and Musser, have led to several theoretical results about automated reasoning algorithms and to implementation of many interesting algorithms in RRL.
Reference: [34] <author> Kapur, D., Sivakumar, G., and Zhang, H., </author> <title> A new method for proving termination of AC-rewrite systems. </title> <booktitle> In: Proc. Tenth Conference on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <address> Bangalore, India, </address> <year> 1990. </year>
Reference-contexts: That is why a study of termination orderings has been an important research area of rewriting techniques. In RRL, rules can be made from equations manually or using an algorithm for lexicographic recursive path ordering (lrpo) [8] and the associative-commutative lexicographic recursive path ordering (aclrpo) <ref> [34] </ref>. Both lrpo and aclrpo extend a precedence relation on function symbols to terms.
Reference: [35] <author> Kapur, D., and Zhang, H., RRL: </author> <title> A Rewrite Rule Laboratory - User's Manual. GE Corporate Research and Development Report, </title> <address> Schenectady, N.Y., </address> <month> April </month> <year> 1987. </year> <note> A revised version appears as Report 89-03, </note> <institution> Dept. of Computer Science, The University of Iowa. </institution>
Reference: [36] <author> Kapur, D., and Zhang, H., RRL: </author> <title> a Rewrite Rule Laboratory. </title> <booktitle> In: Proc. Ninth International Conference on Automated Deduction, </booktitle> <editor> E. Lusk and R. Overbeek (eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 310, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988, </year> <pages> pp. 768-769. </pages>
Reference-contexts: CCR-9303394. y Partially supported by the National Science Foundation Grants nos. INT-9016100, CCR-9202838, and CCR-9357851. Short system abstracts of RRL and its descendants outlining extensions to RRL have appeared in the proceedings of CADE <ref> [33, 36, 16, 61] </ref> and RTA conferences [38, 1].
Reference: [37] <author> Kapur, D., and Zhang, H., </author> <title> Proving equivalence of different axiomatizations of free groups, </title> <journal> J. </journal> <note> Automated Reasoning 4 (1988) 331-352. </note>
Reference-contexts: It has been successfully employed to show the equivalence of different axiomatizations of free groups <ref> [37] </ref>. Two key operations in a completion procedure are rewriting and superposition. <p> In 1987-88, RRL was also used to prove the equivalence of different nonclassical axioma-tizations of free groups developed by Higman and Neumann to the classical three-law characterization <ref> [37] </ref>. Herky was recently used by Zhang to win a competition on equality problems announced in 1990 by Ross Overbeek of Argonne National Laboratory. Herky was used to solve 9 out of 10 equality problems proposed in the competition (the tenth problem is an open question in algebra).
Reference: [38] <author> Kapur, D., and Zhang, H., </author> <title> An overview of RRL: Rewrite Rule Laboratory. </title> <booktitle> In: Proc. Third International Conference on Rewriting Techniques and Its Applications, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 355, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989, </year> <pages> pp. 513-529. </pages>
Reference-contexts: CCR-9303394. y Partially supported by the National Science Foundation Grants nos. INT-9016100, CCR-9202838, and CCR-9357851. Short system abstracts of RRL and its descendants outlining extensions to RRL have appeared in the proceedings of CADE [33, 36, 16, 61] and RTA conferences <ref> [38, 1] </ref>.
Reference: [39] <author> Kapur, D., and Zhang, H., </author> <title> Automating induction: Explicit vs. </title> <booktitle> inductionless. In: Proc. Third International Symposium on Artificial Intelligence and Mathematics, </booktitle> <address> Fort Laud-erdale, Florida, </address> <month> Jan. </month> <pages> 2-5, </pages> <year> 1994. </year>
Reference-contexts: There are, however, examples in which it is an advantage to have more subgoals, as doing case analysis is helpful when proofs need additional lemmas. An interested reader can find a more detailed comparison of the two techniques in <ref> [39] </ref>.
Reference: [40] <author> Kaufmann, M., </author> <title> An interactive enhancement to the Boyer-Moore theorem prover. </title> <booktitle> In: Proc. Ninth International Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 310, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988, </year> <pages> pp. 735-736. </pages>
Reference: [41] <author> Knuth, D. E., and Bendix, P. B., </author> <title> Simple word problems in universal algebras. In: Computational Problems in Abstract Algebras, </title> <editor> J. Leech (ed.), </editor> <publisher> Pergamon Press, </publisher> <year> 1970, </year> <pages> pp. 263-297. </pages>
Reference: [42] <author> Kuchlin, W., </author> <title> Inductive completion by ground proof transformation. In: Rewriting Techniques: Resolution of Equations in Algebraic Structures, II, </title> <editor> H. Ait-Kaci and M. Nivat (eds.), </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1989, </year> <pages> pp. 211-244. 27 </pages>
Reference-contexts: For years, researchers have been working in this area, and a number of such criteria have been developed. Among them are the blocked superposition criterion [44], connectedness criterion [55], prime superposition criterion [22], subconnectedness criterion <ref> [42] </ref>, general superposition criterion, and symmetric superposition criterion [71]. More recently, strict and basic superpositions are being investigated in the context of clausal superposition techniques for first-order theorem proving. Most of the papers on critical pair criteria have focused on the safety of a critical pair criterion.
Reference: [43] <author> Lankford, D. S., and Ballantyne, A. M., </author> <title> Decision Procedures for Simple Equational The--ories with Commutative-Associative Axioms: Complete Sets of Commutative-Associative Reductions. </title> <type> Report ATP-39, </type> <institution> Dept. of Math. and Computer Science, University of Texas, Austin, Texas, </institution> <year> 1977. </year>
Reference-contexts: 17.470 sec For equations that cannot be oriented into terminating rewriting rules, as well as for special equational theories (i.e., when function symbols satisfy certain properties such as an operator being commutative or associative and commutative, etc.), rewriting and critical pair computation may be done modulo an equational theory (see <ref> [43, 51] </ref> for extensions of the Knuth-Bendix completion procedure to associative-commutative theories).
Reference: [44] <author> Lankford, D. S., and Ballantyne, A. M., </author> <title> The refutational completeness of blocked permu-tative narrowing and resolution. </title> <booktitle> In: Proc. Fourth Conference on Automated Deduction, </booktitle> <year> 1979. </year>
Reference-contexts: The ability to identify redundant critical pairs is important to the effectiveness and efficiency of the completion procedures. For years, researchers have been working in this area, and a number of such criteria have been developed. Among them are the blocked superposition criterion <ref> [44] </ref>, connectedness criterion [55], prime superposition criterion [22], subconnectedness criterion [42], general superposition criterion, and symmetric superposition criterion [71]. More recently, strict and basic superpositions are being investigated in the context of clausal superposition techniques for first-order theorem proving.
Reference: [45] <author> McCune, W., </author> <title> OTTER 2.0 Users Guide. </title> <institution> ANL-90/9, Argonne National Laboratory, Ar-gonne, Ill., </institution> <year> 1990. </year>
Reference-contexts: i j (x)) = e j for 1 j n: That is, each A n defines a binary operator f that is associative, and has n left-units and n right-inverses. 2 We have tried to complete A n for n = 10i, 1 i 10, in three theorem provers: OTTER <ref> [45] </ref>, Hiper [7], and Herky, a descendent of RRL. Table 1 gives the statistics of these runs. All the run times are collected using a Sun SPARCstation 1 (16-megabyte memory). <p> three theorem provers produced the same canonical rewrite system for each A n . (The number of the rules in each canonical system is given in the second column of the table.) OTTER is a well-engineered, fast resolution-based theorem prover implemented in C by Bill McCune at Argonne National Laboratory <ref> [45] </ref>. OTTER supports a rich set of inference rules, including the Knuth-Bendix completion procedure. Hiper was claimed by its creator Jim Christian as "the fastest completion procedure in the world" [7]. Both Hiper and Herky are written in Common Lisp. <p> The performance of the implementations of these approaches are reasonable; however, they do not, in general, compare well with OTTER <ref> [45] </ref>, PTTP, and similar high-performance theorem provers, because we have not devoted much effort to enhance these techniques.
Reference: [46] <author> Musser, D. R., </author> <title> On proving inductive properties of abstract data types. </title> <booktitle> In: Proc. Seventh Principles of Programming Languages, </booktitle> <year> 1980. </year>
Reference-contexts: inference methods for * generating decision procedures for equational theories using completion procedures; * refutational methods for proving theorems in first-order predicate calculus with equality; * proving formulas by induction using the explicit induction approach based on the cover set method, as well as using the proof by consistency approach <ref> [46, 21] </ref> (also called the inductionless-induction approach); and * checking the consistency and completeness of equational specifications. RRL is perhaps one of the few theorem provers in the world providing such extensive capabilities for equational logic, first-order theorem proving, and theorem proving by induction. <p> The consistency check can be shown to be equivalent to the property that the left side of rewrite rules generated during completion is ground-reducible. This method has an advantage over earlier methods proposed by Musser <ref> [46] </ref>, Goguen [10], and Huet and Hullot [17] as constructors need not be free. An efficient method to decide the ground reducibility of a term in left-linear systems (the occurrence of each variable in the left side of each rule is unique) is implemented in RRL [28].
Reference: [47] <author> Narendran, P., and Stillman, J., </author> <title> Hardware verification in the Interactive VHDL Workstation. In: VLSI Specification, Verification and Synthesis, </title> <editor> G. Birtwistle and P. A. Subrah-manyam (eds.), </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1988, </year> <pages> pp. 217-235. </pages>
Reference-contexts: More details can be found in <ref> [47] </ref>. In 1987, RRL was used to analyze the input-output behavior of a SOBEL image-processing chip being designed at Research Triangle Institute, Raleigh, North Carolina.
Reference: [48] <author> Narendran, P., and Stillman, J., </author> <title> Formal verification of the Sobel image processing chip. </title> <booktitle> In: Proc. Design Automation Conference, </booktitle> <year> 1988. </year>
Reference-contexts: Using first-order theorem-proving capabilities of RRL, Narendran and Stillman detected two bugs in the chip design, one of which was not known to the chip designers despite extensive testing and simulation of the chip. See <ref> [48] </ref> for more details. Recently, Hua and Zhang enriched VHDL to provide a common language for specifying, designing, and verifying hardware circuits.
Reference: [49] <author> Overbeek, R., </author> <title> A proposal for a competition. </title> <institution> Argonne National Laboratory, Argonne, Ill., </institution> <year> 1990. </year>
Reference: [50] <author> Peterson, G. L., </author> <title> Complete sets of reductions with constraints. </title> <booktitle> In: Proc. Tenth International Conference on Automated Deduction, Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 449, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990, </year> <pages> pp. 381-395 </pages>
Reference-contexts: This idea is a generalization (with kbo) of the so-called lexically dependent rewrite rules described in [57, Ch. 8]. After this was implemented in Herky, we learned that a formal account of this idea had appeared in <ref> [50] </ref> (where lexicographical recursive path ordering (lrpo) instead of kbo is used in the constraints). Kbo seems very suitable for this application for two reasons: 1. <p> Our experience in the use of kbo has been quite positive. On the other hand, we were not impressed with the performance of constrained rewrite rules generated using lrpo as reported in <ref> [50] </ref>.
Reference: [51] <author> Peterson, G. L., and Stickel, M. E., </author> <title> Complete sets of reductions for some equational theories, </title> <journal> J. </journal> <note> ACM 28 (1981) 233-264. </note>
Reference-contexts: 17.470 sec For equations that cannot be oriented into terminating rewriting rules, as well as for special equational theories (i.e., when function symbols satisfy certain properties such as an operator being commutative or associative and commutative, etc.), rewriting and critical pair computation may be done modulo an equational theory (see <ref> [43, 51] </ref> for extensions of the Knuth-Bendix completion procedure to associative-commutative theories).
Reference: [52] <author> Stickel, M. E., </author> <title> A case study of theorem proving by the Knuth-Bendix method: Discovering that x 3 = x implies ring commutativity. </title> <booktitle> In: Proc. Seventh Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 170, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1984, </year> <pages> pp. 248-258. </pages> <note> [53] eroff, </note> <editor> R. L., Canonicalization and Demodulation. </editor> <address> ANL-81-6, </address> <institution> Argonne National Laboratory, Argonne, Ill., </institution> <year> 1981. </year>
Reference-contexts: Previous attempts to solve this problem using the completion-procedure-based approach required over ten hours of computing time <ref> [52] </ref>; see [53] for another proof using resolution paramodulation and demodulation on an earlier Argonne theorem prover.
Reference: [54] <author> Wang, T. C., </author> <title> Case studies of Z-module reasoning: Proving benchmark theorems for ring theory. </title> <journal> J. </journal> <note> Automated Reasoning 3 (1987) 437-451. </note>
Reference-contexts: of problems for any exponent n &gt; 1, namely, that an associative ring is commutative if every element x satisfies x n = x, RRL takes 5 seconds for the case when n = 3, 70 seconds for n = 4, and 270 seconds for n = 6; see also <ref> [54] </ref>. To our knowledge, RRL was used to generate the first computer proof of this theorem for n = 6 [71]. Using algebraic techniques, Zhang was able to prove this theorem for many even values of n [59].
Reference: [55] <author> Winkler, F., and Buchberger, B., </author> <title> A criterion for eliminating unnecessary reductions in the Knuth-Bendix algorithm. </title> <booktitle> In: Proc. Colloquium on Algebra, Combinatorics and Logic in Computer Science, </booktitle> <address> Gyor, Hungary, </address> <year> 1983. </year>
Reference-contexts: The ability to identify redundant critical pairs is important to the effectiveness and efficiency of the completion procedures. For years, researchers have been working in this area, and a number of such criteria have been developed. Among them are the blocked superposition criterion [44], connectedness criterion <ref> [55] </ref>, prime superposition criterion [22], subconnectedness criterion [42], general superposition criterion, and symmetric superposition criterion [71]. More recently, strict and basic superpositions are being investigated in the context of clausal superposition techniques for first-order theorem proving.
Reference: [56] <author> Wos, L., </author> <title> Automated reasoning: 33 basic research problems. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1988. </year>
Reference-contexts: More details about the Tecton system can be found in [24, 23]. 4.3 Attacking Challenge Problems In 1988, RRL was successfully used to attack the so-called ring commutativity problems, considered a challenge for theorem provers <ref> [56] </ref>. For the theorem that an associative ring is commutative if every element x satisfies x 3 = x, an automatic proof was obtained using RRL in less than two minutes on a Symbolics machine in 1988.
Reference: [57] <author> Wos, L., Overbeek, R., Lusk, E., and Boyle, J., </author> <title> Automated reasoning: Introduction and applications. 2nd ed. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1992. </year> <month> 28 </month>
Reference-contexts: This idea is a generalization (with kbo) of the so-called lexically dependent rewrite rules described in <ref> [57, Ch. 8] </ref>. After this was implemented in Herky, we learned that a formal account of this idea had appeared in [50] (where lexicographical recursive path ordering (lrpo) instead of kbo is used in the constraints). Kbo seems very suitable for this application for two reasons: 1. <p> The power of the clausal superposition method is evident from the fact that it can be used to easily prove the three isomorphism theorems in group theory (Wos identified the first (the easiest) of these three as a challenge problem in <ref> [57, pp. 138, Test Problem 5] </ref>); see [62] for more details. Other theorems about automorphisms of groups, products of groups, and homomorphisms of rings can also be proved without much difficulty.
Reference: [58] <author> Zhang, H., </author> <title> Reduction, Superposition and Induction: Automated Reasoning in an Equa--tional Logic. </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, Rensselaer Polytechnic Institute, </institution> <address> Troy, N.Y., </address> <year> 1988. </year>
Reference: [59] <author> Zhang, H., </author> <title> Automated proof of ring commutativity problems by algebraic methods, </title> <journal> J. </journal> <note> Symbolic Computation 9 (1990) 423-427. </note>
Reference-contexts: To our knowledge, RRL was used to generate the first computer proof of this theorem for n = 6 [71]. Using algebraic techniques, Zhang was able to prove this theorem for many even values of n <ref> [59] </ref>. The key idea that helped in obtaining fast proofs of ring commutativity problems was that very many inferences in completion-based-approaches were unnecessary and redundant in the presence of associative-commutative theories.
Reference: [60] <author> Zhang, H., </author> <title> Criteria of critical pair criteria: A practical approach and a comparative study, </title> <journal> J. </journal> <note> Automated Reasoning, to appear. </note>
Reference-contexts: There is a tradeoff between performing criterion check and simply executing the joinability check. In <ref> [60] </ref>, some properties of critical pair criteria with respect to this tradeoff are established: (i) dynamic safety with respect to a completion procedure, (ii) power to detect a large portion of redundant critical pairs, (iii) low cost to perform a critical pair criterion check, and (iv) high saving by avoiding more <p> We are particularly interested in criteria that can be implemented cost-free, that is, by applying such a criterion is just part of the normalization process. Two criteria, the blocked superposition criterion [22] and the left-composite superposition criterion <ref> [60] </ref>, are known to be such criteria. Both of them are implemented in RRL; this fact explains partially why RRL generates much less critical pairs than both OTTER and Hyper on Christian's benchmark 8 examples (see example 2.1). <p> We consider this to be one of the major strengths of RRL because of which it is possible to tackle challenging mathematical problems such as ring commutativity problems. An interested reader may consult <ref> [71, 60] </ref> for more details. 2.2.2 Term-Indexing Techniques A key operation in theorem provers based on completion is to compute a normal form of a term with respect to a set of rewrite rules.
Reference: [61] <author> Zhang, H., Herky: </author> <title> High-performance rewriting techniques in RRL. </title> <booktitle> In: Proc. International Conference of Automated Deduction, </booktitle> <editor> D. Kapur (ed.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 607, </volume> <publisher> Springer-Verlag, </publisher> <address> Belrin, </address> <year> 1992, </year> <pages> pp. 696-700. </pages>
Reference-contexts: CCR-9303394. y Partially supported by the National Science Foundation Grants nos. INT-9016100, CCR-9202838, and CCR-9357851. Short system abstracts of RRL and its descendants outlining extensions to RRL have appeared in the proceedings of CADE <ref> [33, 36, 16, 61] </ref> and RTA conferences [38, 1].
Reference: [62] <author> Zhang, H., </author> <title> Implementing contextual rewriting. </title> <booktitle> In: Proc. Third International Workshop on Conditional Term Rewriting Systems, </booktitle> <editor> J. L. Remy and M. Rusinowitch (eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 656, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992, </year> <pages> pp. 363-377. </pages>
Reference-contexts: The power of the clausal superposition method is evident from the fact that it can be used to easily prove the three isomorphism theorems in group theory (Wos identified the first (the easiest) of these three as a challenge problem in [57, pp. 138, Test Problem 5]); see <ref> [62] </ref> for more details. Other theorems about automorphisms of groups, products of groups, and homomorphisms of rings can also be proved without much difficulty.
Reference: [63] <author> Zhang, H., </author> <title> Proving group isomorphism theorems: A case study of conditional completion. </title> <booktitle> In: Proc. Third International Workshop on Conditional Term Rewriting Systems, </booktitle> <editor> J. L. Remy and M. Rusinowitch (eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 656, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992, </year> <pages> pp. 302-306. </pages>
Reference-contexts: A formal analysis of contextual rewriting is given in <ref> [63] </ref>, where it is shown that this rewriting is useful not only for inductive theorem proving, but also for deductive theorem proving when each clause is viewed as a (conditional) rewrite rule.
Reference: [64] <author> Zhang, H., </author> <title> A new strategy for the Boolean ring based approach to first order theorem proving, </title> <journal> J. Symbolic Computation, </journal> <note> to appear. </note>
Reference-contexts: If 1 = 0 is derived, then the input formulas are unsatisfiable (or inconsistent). 12 RRL supports two methods of the Boolean-ring-based approach: The Grobner base method developed by Kapur and Narendran [20] and the so-called odd-strategy method developed by Zhang <ref> [64] </ref>. In the Grobner base method, a rewrite rule is made from each polynomial such that the left side of the rewrite rule consists of the maximal monomials. New polynomials are generated from any two polynomials by unifying their maximal monomials.
Reference: [65] <author> Zhang H., </author> <title> Automated Proofs of Equality Problems in Overbeek's Competition. </title> <type> Report 92-06, </type> <institution> Department of Computer Science, The University of Iowa, </institution> <year> 1993. </year>
Reference-contexts: We are not aware of any theorem prover that has been successful in solving these 9 problems. Details about the competition as well as Herky's solution to the problems can be found in <ref> [65] </ref>. The special completion procedure in RRL has also been used to prove over 30 difficult theorems in the theory of alternative rings, a special kind of nonassociative rings [66]. The cover set induction method was developed and implemented in RRL in 1987 as a part of Zhang's dissertation work.
Reference: [66] <author> Zhang, H., </author> <title> A case study of completion modulo distributivity and Abelian groups. </title> <booktitle> In: Proc. International Conference on Rewrite Techniques and Applications, </booktitle> <editor> C. Kirchner (ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 690, </volume> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 32-46. </pages>
Reference-contexts: complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories <ref> [66] </ref>. <p> Details about the competition as well as Herky's solution to the problems can be found in [65]. The special completion procedure in RRL has also been used to prove over 30 difficult theorems in the theory of alternative rings, a special kind of nonassociative rings <ref> [66] </ref>. The cover set induction method was developed and implemented in RRL in 1987 as a part of Zhang's dissertation work. Since then, many interesting challenging problems proposed in 24 theorem proving by induction have also been successfully attempted in RRL.
Reference: [67] <author> Zhang, H., Guha, A., and Hua, G. X., </author> <title> Using algebraic specifications in Floyd-Hoare assertions. </title> <booktitle> In: Proc. Second International Conference on Algebraic Methodology and Software Technology, </booktitle> <editor> T. Rus (ed.), </editor> <address> Iowa City, Iowa, </address> <year> 1991. </year>
Reference-contexts: For example, alternating bit-protocol was analyzed, and stacks and other data structures were established. In <ref> [67] </ref>, Zhang, Guha, and Hua suggested a technique that combines the Floyd-Hoare axiomatic approach for program verification with the cover set induction method. Several sorting algorithms are used to demonstrate that the technique can help in verifying software mechanically.
Reference: [68] <author> Zhang, H., and Hua, G. X., </author> <title> Proving Ramsey theorem by the cover set induction: A case and comparison study. In: </title> <journal> The Annals of Mathematics and Artificial Intelligence, </journal> <volume> Vol. 8, No. </volume> <pages> 3-4, </pages> <year> 1992. </year>
Reference: [69] <author> Zhang, H., and Hua, G. X., </author> <title> Proving the Chinese remainder theorem by the cover ste induction. </title> <booktitle> In: Proc. International Conference of Automated Deduction, </booktitle> <editor> D. Kapur (ed.) </editor> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 607, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992, </year> <pages> pp. 431-445. </pages>
Reference: [70] <author> Zhang, H., and Kapur, D., </author> <title> First-order logic theorem proving using conditional rewrite rules. </title> <editor> In: E. Lusk and R. Overbeek (eds.), </editor> <booktitle> Proc. Ninth International Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 310, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988, </year> <pages> pp. 1-20. </pages>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving <ref> [20, 70] </ref>, methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66]. <p> A complete implementation of rewriting requires set matching, an NP-complete step (because subsumption can be implementing by rewriting using polynomials) [25]. It might be better to designate only a small subset of rules for rewriting. 13 2.4 Clausal Superposition Theorem Proving The so-called clausal superposition method <ref> [70] </ref> is implemented in RRL to support the second approach for first-order theorem proving. The input for this method is a set of clauses. <p> Conditional rules are superposed to generate new rules (or clauses). This definition of superposition between two rules subsumes both resolution and paramodulation on the maximal literals of the corresponding two clauses. Resolution and paramodulation can thus be treated uniformly. Conditional (contextual) rewriting <ref> [70] </ref> is used to simplify clauses with the rewrite rules made from other clauses. If a rule (clause) gets reduced, the new rule (clause) is kept and the old is thrown away. This rewriting is more powerful than subsumption and demodulation together.
Reference: [71] <author> Zhang, H., and Kapur, D., </author> <title> Unnecessary inferences in associative-commutative completion procedures, </title> <journal> J. </journal> <note> Mathematical System Theory 23 (1990) 175-206. 29 </note>
Reference-contexts: However, this environment soon began serving as a vehicle for generating new ideas, concepts, and algorithms that could be implemented and tested for their effectiveness. Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences <ref> [22, 71] </ref>, complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction [30, 72], algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational <p> For years, researchers have been working in this area, and a number of such criteria have been developed. Among them are the blocked superposition criterion [44], connectedness criterion [55], prime superposition criterion [22], subconnectedness criterion [42], general superposition criterion, and symmetric superposition criterion <ref> [71] </ref>. More recently, strict and basic superpositions are being investigated in the context of clausal superposition techniques for first-order theorem proving. Most of the papers on critical pair criteria have focused on the safety of a critical pair criterion. <p> We consider this to be one of the major strengths of RRL because of which it is possible to tackle challenging mathematical problems such as ring commutativity problems. An interested reader may consult <ref> [71, 60] </ref> for more details. 2.2.2 Term-Indexing Techniques A key operation in theorem provers based on completion is to compute a normal form of a term with respect to a set of rewrite rules. <p> To our knowledge, RRL was used to generate the first computer proof of this theorem for n = 6 <ref> [71] </ref>. Using algebraic techniques, Zhang was able to prove this theorem for many even values of n [59]. The key idea that helped in obtaining fast proofs of ring commutativity problems was that very many inferences in completion-based-approaches were unnecessary and redundant in the presence of associative-commutative theories.
Reference: [72] <author> Zhang, H., Kapur, D., and Krishnamoorthy, M. S., </author> <title> A mechanizable induction principle for equational specifications. </title> <booktitle> In: Proc. Ninth International Conference on Automated Deduction, </booktitle> <editor> E. Lusk and R. Overbeek (eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 310, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988, </year> <pages> pp. 250-265. 30 </pages>
Reference-contexts: Experimentation using RRL has led, among other things, to development of criteria for identifying redundant inferences [22, 71], complexity studies of primitive operations such as matching, unification [25, 4, 26], efficient algorithms for primitive operations [27], approaches for first-order theorem proving [20, 70], methods for proving formulas by induction <ref> [30, 72] </ref>, algorithms for checking the sufficient completeness property of specifications [28], and specialized completion procedures for equational theories [66]. <p> The method, called the cover set method, is reported in <ref> [72] </ref>. It is closely related to Boyer and Moore's approach. Using the cover set method and contextual rewriting, RRL has been successfully used to prove many nontrivial theorems including the unique prime factorization theorem of numbers, Chinese remainder theorem, and Ramsey's theorem.
References-found: 71

