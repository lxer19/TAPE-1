URL: http://www-icparc.doc.ic.ac.uk/papers/unimodular_probing.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: Email:  
Title: Unimodular probing for minimal perturbance in dynamic resource feasibility problems  
Author: Hani El Sakkout, Thomas Richards, Mark G. Wallace 
Web: fhhe,mgwg doc.ic.ac.uk  
Address: College, London SW7 2AZ, United Kingdom.  
Affiliation: IC-Parc, Imperial  
Abstract: This paper describes unimodular probing anew technique that has been used to solve a class of dynamic scheduling problems. In benchmarks a unimodular probing algorithm has outperformed two well-established approaches: backtrack search with local consistency and spe-cialised heuristics, and mixed integer programming (MIP). The problems amenable to unimodular probing involve disjunctive constraints, discrete variables, and a linear optimisation function. In addition, some of the constraints should be totally unimodular for example, temporal precedence and distance constraints. Problems in this class are difficult for CSP techniques because of the optimisation requirement, and for MIP because of the number of discrete (integer) variables. Our studies have focussed on DCSPs, with an optimisation criterion of minimal perturbance to an existing solution. Unimodular probing builds on an ordinary backtracking repair algorithm with constraint propagation. However, by contrast with previous DCSP algorithms, unimodular probing uses linear programming (LP) optimisation to guide and bound the search. Not only has unimodular probing performed well on randomly generated benchmarks, but it has also been successfully applied in a large industrial application involving hundreds of resources and thousands of tasks.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Henri Beringer and Bruno de Backer. </author> <title> Satisfiability of boolean formulas over linear constraints. </title> <booktitle> In IJCAI-93, </booktitle> <pages> pages 296-301, </pages> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: The constraint propagation performed by the CP engine in our implementation of unimodular probing was finite domain propagation, but any other kind of constraint handling could be done. By contrast with previous algorithms combining CP and LP (such as, for example, <ref> [1, 10, 15] </ref>), the unimodular probing algorithm does not pass all linear constraints to the LP solver it only passes constraints of a very restricted class.
Reference: 2. <author> Henri Beringer and Bruno De Backer. </author> <title> Logic Programming: Formal Methods and Practical Applications, chapter Combinatorial Problem Solving in Constraint Logic Programming with Cooperating Solvers. </title> <publisher> Elsevier, </publisher> <year> 1994. </year>
Reference-contexts: It computes the optimum value of the cost function under these constraints, and records values taken by the variables at the optimum. As in previous intregrations of CP and LP, such as <ref> [2] </ref>, the search is controlled on the CP side, using the values returned from the LP solver to help guide which variable to label next, and which value to label it to.
Reference: 3. <institution> CPLEX Optimization Inc., </institution> <address> NV 89451-9436, USA. Using the CPLEX(r) Callable Library, </address> <year> 1995. </year>
Reference-contexts: In the second phase, the algorithm fixes the temporal variables to the value returned by an LP solver which is optimal given the choices made in the first phase. The second algorithm is a commercial MIP package, CPLEX <ref> [3] </ref>. The default search settings are used, with only the Booleans declared as integer. Becausew the default MIP heuristics are not tailored to the problem at hand, some expert adjustment of the search control parameters in the MIP engine could bring about an improvement in performance.
Reference: 4. <author> R. Dechter and A. Dechter. </author> <title> Belief maintenance in dynamic constraint networks. </title> <booktitle> In Proceedings of AAAI-88, </booktitle> <pages> pages 37-42, </pages> <year> 1988. </year>
Reference-contexts: A dynamic CSP (DCSP) is defined as a sequence of CSPs, where each one differs from its predecessor by one or more constraint additions or deletions <ref> [4] </ref>. Thus a CSP fi i+1 in the sequence is related to its predecessor fi i by two sets: - C del , a set of constraints such that C del C; - C add , a set of constraints on V such that C add " C = .
Reference: 5. <author> ECRC. </author> <title> ECL i PS e User Manual. </title> <booktitle> European Computer Industry Research Centre, </booktitle> <address> Munich, 3.6.1 edition, </address> <year> 1996. </year>
Reference-contexts: The algorithms were tested on an Ultra-Sparc 20, and the programming environment used was the ECL i PS e constraint logic programming platform <ref> [5] </ref>. We compare unimodular probing with two algorithms. The first is the pure constraint programming algorithm (detailed in [13]) which conducts the search in two phases. In phase 1, the algorithm reduces potential resource conflict by forcing apart temporal variables until no possible resource conflict could occur.
Reference: 6. <author> Amin O. El-Kholy. </author> <title> Resource Feasibility in Planning. </title> <type> PhD thesis, </type> <institution> Imperial College, University of London, </institution> <year> 1996. </year>
Reference-contexts: Whilst any CSP can give rise to a minimal perturbance problem, our work was motivated by a special class of CSPs, termed resource feasibility problems (RFPs) <ref> [6] </ref>. Informally any scheduling problem under limited resources gives rise to an RFP. The minimal perturbance RFP naturally arises as a consequence of delays, or of accidental or planned resource reductions. RFP problems involve two kinds of constraints: temporal constraints and resource constraints. <p> The pure algorithm is described in detail in [13], and is based on a model originally proposed for solving the RFP in a planning context <ref> [6] </ref>. <p> In the RFP, the goal is to fix the start and end times of activities such that resource capacities are not exceeded. For the sake of simplicity, we use a less general version of the resource feasibility problem as described in <ref> [6] </ref>, with only a single resource type and unit capacity activities. The restricted problem can be proved to be NP-complete by 3-Sat transformation. Def. 3 : Resource Feasibility Problem (RFP) In the following, let N be the set of natural numbers.
Reference: 7. <author> Hani El Sakkout, M G Wallace, and E B Richards. </author> <title> An instance of adaptive constraint propagation. </title> <booktitle> In Proc. of The Second International Conference on Principles and Practice of Constraint Programming (CP96), Lecture Notes in Computer Science, </booktitle> <pages> pages 164-178. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The inconsistencies of the partial solution would then hopefully involve only a minimal number of constraints, and always focus the repair method towards the optimum. The dynamic reconfiguration of the constraint sets handled by local propagation and global optimisation was a natural progression from adaptive propagation <ref> [7] </ref>. This third algorithm is, of course, unimodular probing. Since the development of the unimodular probing algorithm, we have become aware of research conducted into extending logic-based inference techniques such as those of constraint programming with LP algorithms, or vice versa.
Reference: 8. <author> Robert S. Garfinkel and George L. Nemhauser. </author> <title> Integer Programming. </title> <publisher> John Wiley & Sons, </publisher> <year> 1972. </year>
Reference-contexts: In an LP problem, the set of constraints and variables are represented in a constraint matrix. The necessary conditions for this property to hold in a constraint matrix are first given, before more practical sufficient conditions are discussed (see <ref> [8] </ref> for more detail). A constraint matrix may be configured in two ways. In the first, rows represent constraints, and columns represent variables, with the element e ij of the matrix denoting the coefficient of a variable j in a particular constraint i.
Reference: 9. <author> J. N. Hooker and M.A.Osorio. </author> <title> Mixed logical/linear programming. </title> <note> Available on http://www.gsia.cmu.edu/afs/andrew.cmu.edu/gsia/jh38/papers.html, 1996. </note>
Reference-contexts: Since the development of the unimodular probing algorithm, we have become aware of research conducted into extending logic-based inference techniques such as those of constraint programming with LP algorithms, or vice versa. For a review of this area and a general framework for integration see <ref> [9] </ref>. Unimodular probing can be viewed as a restriction of this framework, since LP is limited only to sub-problems with total unimodularity. However, we believe the restriction leads to a very simple and natural integration.
Reference: 10. <author> J. Jaffar and J.-L. Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Progrmming Languages, </booktitle> <pages> pages 111-119, </pages> <address> Munich, Germany, </address> <year> 1987. </year>
Reference-contexts: The constraint propagation performed by the CP engine in our implementation of unimodular probing was finite domain propagation, but any other kind of constraint handling could be done. By contrast with previous algorithms combining CP and LP (such as, for example, <ref> [1, 10, 15] </ref>), the unimodular probing algorithm does not pass all linear constraints to the LP solver it only passes constraints of a very restricted class.
Reference: 11. <author> Steven Minton, Mark D. Johnston, Andrew B. Philips, and Philip Laird. </author> <title> Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 161-205, </pages> <year> 1992. </year>
Reference-contexts: Thus the implications of individual search decisions for cost were not propagated until most variables were fixed. Minton et. al have suggested that a principle reason for such weak performance is the lack of informedness in backtrack tree search <ref> [11] </ref>. To improve the performance, they propose the use of a complete assignment in conjunction with the min-conflicts heuristic. Other constraint programming methods also employ the notion of temporary, or tentative assignments to uninstantiated variables [17, 19]. <p> This solution was only partially consistent with the updated problem constraints. Throughout the search, the same tentative values were maintained for the unla-belled variables, and used to guide the backtrack search. Apart from this distinction, the algorithm closely resembled the informed-backtracking search of <ref> [11] </ref>. This repair algorithm was tested, but it too produced unsatisfactory results. The principal difficulty was that the tentative solution was of little relevance since it violated more and more constraints, as decisions were made during search.
Reference: 12. <author> Manfred W. Padberg. </author> <title> Perfect zero-one matrices. </title> <journal> Mathematical Programming, </journal> <volume> 6 </volume> <pages> 180-196, </pages> <year> 1974. </year>
Reference-contexts: In resource scheduling, temporal precedence and distance constraints also constitute a totally unimodular set. Moreover, this property is sufficient but not necessary for guaranteed LP solution integrality (eg. <ref> [12] </ref>). Applied to totally unimodular subsets of the problem constraints, LP becomes a meaningful tool for solving discrete problems. Often resource scheduling problems are discrete since real world problems have temporal granularity.
Reference: 13. <author> Dionysios Pothos. </author> <title> A constraint-based approach to the british airways schedule re-timing problem. </title> <type> Technical Report 97/04-01, </type> <institution> IC-Parc, Imperial College, </institution> <year> 1997. </year>
Reference-contexts: The pure algorithm is described in detail in <ref> [13] </ref>, and is based on a model originally proposed for solving the RFP in a planning context [6]. <p> The distance constraints are ordered according to the least tightening heuristics described in <ref> [13] </ref>. The least tightening heuristics attempt to ensure that imposing a new distance constraint will result in the fewest domain reductions on the temporal variables of the problem. This least commitment approach increases the chances of finding a good solution early. <p> The algorithms were tested on an Ultra-Sparc 20, and the programming environment used was the ECL i PS e constraint logic programming platform [5]. We compare unimodular probing with two algorithms. The first is the pure constraint programming algorithm (detailed in <ref> [13] </ref>) which conducts the search in two phases. In phase 1, the algorithm reduces potential resource conflict by forcing apart temporal variables until no possible resource conflict could occur.
Reference: 14. <author> Paul Walton Purdom, Jr. and G. Neil Haven. </author> <title> Probe order backtracking. </title> <journal> Siam Journal of Computing, </journal> <volume> 26 </volume> <pages> 456-483, </pages> <year> 1997. </year>
Reference-contexts: Some research has used probabilistic analysis to show the utility of such a probing assignment; the probe assignment results in a set of violated constraints that are fixed through backtrack search, leading to improved average case performance <ref> [14] </ref>. A good review of this and other work on repair is to be found in [18]. In line with this research, the second algorithm we developed for the airline problem used a tentative global solution to provide improved information about cost.
Reference: 15. <author> R. Rodosek, M Wallace, and M. Hajian. </author> <title> A new approach to integrating mixed integer programming and clp. </title> <journal> Annals of Operations Research. Recent advances in combinatorial optimization: </journal> <note> Theory and applications (to appear), </note> <year> 1998. </year>
Reference-contexts: The constraint propagation performed by the CP engine in our implementation of unimodular probing was finite domain propagation, but any other kind of constraint handling could be done. By contrast with previous algorithms combining CP and LP (such as, for example, <ref> [1, 10, 15] </ref>), the unimodular probing algorithm does not pass all linear constraints to the LP solver it only passes constraints of a very restricted class.
Reference: 16. <author> Pascal Van Hentenryck, Yves Deville, and Choh-Man Teng. </author> <title> A generic arc-consistency algorithm and its specializations. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 291-321, </pages> <year> 1992. </year>
Reference-contexts: The algorithm applied depth first search in conjunction with AC-5 propagation <ref> [16] </ref>. An analysis of algorithm behaviour revealed that the propagation failed to significantly prune search. A particular weakness was found to be that the algorithm did not incorporate a global analysis of the best cost to be found in a search branch.
Reference: 17. <author> Gerard Verfaillie and Thomas Schiex. </author> <title> Solution reuse in dynamic constraint satisfaction problems. </title> <booktitle> In AAAI-94, </booktitle> <pages> pages 307-312, </pages> <address> Seattle, WA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: To improve the performance, they propose the use of a complete assignment in conjunction with the min-conflicts heuristic. Other constraint programming methods also employ the notion of temporary, or tentative assignments to uninstantiated variables <ref> [17, 19] </ref>. These methods start from a partially consistent solution and reduce constraint violations until a globally feasible solution is found.
Reference: 18. <author> Gerard Verfaillie and Thomas Schiex. </author> <title> Maintien de solution dans les problemes dynamiques de satisfaction de contraintes : bilan de quelques approches. </title> <journal> Revue d'Intelligence Artificielle, </journal> <year> 1995. </year>
Reference-contexts: A good review of this and other work on repair is to be found in <ref> [18] </ref>. In line with this research, the second algorithm we developed for the airline problem used a tentative global solution to provide improved information about cost. The new algorithm recorded the old solution as an initial tentative solution. This solution was only partially consistent with the updated problem constraints.
Reference: 19. <author> Makoto Yokoo. </author> <title> Weak-commitment search for solving constraint satisfaction problems. </title> <booktitle> In AAAI-94, </booktitle> <pages> pages 313-318, </pages> <address> Seattle, WA, </address> <month> August </month> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: To improve the performance, they propose the use of a complete assignment in conjunction with the min-conflicts heuristic. Other constraint programming methods also employ the notion of temporary, or tentative assignments to uninstantiated variables <ref> [17, 19] </ref>. These methods start from a partially consistent solution and reduce constraint violations until a globally feasible solution is found.
References-found: 19

