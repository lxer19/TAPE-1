URL: http://web.mit.edu/afs/athena.mit.edu/user/d/i/dimitrib/www/erelax.ps
Refering-URL: http://web.mit.edu/afs/athena.mit.edu/user/d/i/dimitrib/www/publ.html
Root-URL: 
Title: AN "-RELAXATION METHOD FOR SEPARABLE CONVEX COST NETWORK FLOW PROBLEMS 1  
Author: by Dimitri P. Bertsekas, Lazaros C. Polymenakos, and Paul Tseng 
Note: April 1995 LIDS-P-2146 SIAM J. on Optimization, to appear  
Abstract: We propose a new method for the solution of the single commodity, separable convex cost network ow problem. The method generalizes the -relaxation method developed for linear cost problems, and reduces to that method when applied to linear cost problems. We show that the method terminates with a near optimal solution, and we provide an associated complexity analysis. We also present computational results showing that the method is much faster than earlier relaxation methods, particularly for ill-conditioned problems. 
Abstract-found: 1
Intro-found: 1
Reference: [Ber79] <author> Bertsekas, D. P., </author> <title> "A Distributed Algorithm for the Assignment Problems," Laboratory for Information and Decision Systems Working Paper, </title> <publisher> M.I.T., </publisher> <address> Cambridge, MA, </address> <year> 1979. </year>
Reference-contexts: In the convex cost case, however, cost scaling may be di-cult to implement since the arc cost functions may be unbounded. A second scaling approach in connection with the -relaxation method for linear cost problems, is -scaling. This approach was originally introduced in <ref> [Ber79] </ref> as a means of improving the performance of the auction algorithm for the assignment problem. Its complexity analysis was given in [Gol87] and [GoT90].
Reference: [Ber85] <author> Bertsekas, D. P., </author> <title> "A Unifled Framework for Minimum Cost Network Flow Problems," </title> <journal> Mathematical Programming, </journal> <volume> Vol. 32, </volume> <year> 1985, </year> <pages> pp. 125-145. </pages>
Reference: [Ber86a] <author> Bertsekas, D. P., </author> <title> "Distributed Relaxation Methods for Linear Network Flow Problems," </title> <booktitle> Proceedings of 25th IEEE Conference on Decision and Control, </booktitle> <year> 1986, </year> <pages> pp. 2101-2106. 20 References </pages>
Reference-contexts: Q.E.D. The following proposition bounds the total number of price increases that the -relaxation method can perform on any node. The proof is patterned after that for the linear cost case <ref> [Ber86a] </ref>, [BeE88]. Proposition 3: Assume that for some integer K 1; the initial price vector p 0 for the -relaxation method satisfles K-CS together with some feasible ow vector x 0 : Then, the - relaxation method performs at most 2 (K + 1)(N 1) price rises per node. <p> Complexity Analysis for the -Relaxation Method To obtain a sharper complexity bound, we introduce an order in which the nodes are chosen in iterations. This rule is based on the sweep implementation of the -relaxation method, which was introduced in <ref> [Ber86a] </ref> and was analyzed in more detail in [BeE88], [BeT89], and [BC91] for the linear cost network ow problem. All the nodes are kept in a linked list T , which is traversed from the flrst to the last element.
Reference: [Ber86b] <author> Bertsekas, D. P., </author> <title> "Distributed Asynchronous Relaxation Methods for Linear Network Flow Problems," Laboratory for Information and Decision Systems Report P-1606, </title> <publisher> M.I.T., </publisher> <address> Cam-bridge, MA, </address> <year> 1986. </year>
Reference: [Ber91] <author> Bertsekas, D. P., </author> <title> Linear Network Optimization: Algorithms and Codes, </title> <publisher> M.I.T. Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: the -Relaxation Method cycles and is such that: x ij &gt; x 0 x ij &lt; x 0 where H + is the set of forward arcs of H and H is the set of backward arcs of H: [This can be seen from the Conformal Realization theorem ([Roc84] or <ref> [Ber91] </ref>) as follows. <p> The second code, named NE-RELAX-FV, implements the forward-reverse version of NE-RELAX-F as described in Section 5. These codes are based on the -relaxation code for linear cost problems described in Appendix 7 of <ref> [Ber91] </ref>, which has been shown to be quite e-cient. Several changes and enhancements were introduced in the codes for convex cost problems: All computations are done in real rather than integer arithmetic, and -scaling, rather than arc cost 18 6. Computational Results scaling, is used.
Reference: [Ber92] <author> Bertsekas, D. P., </author> <title> "An Auction/Sequential Shortest Path Algorithm for the Min Cost Flow Problem," Laboratory for Information and Decision Systems Report P-2146, </title> <publisher> M.I.T., </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference: [BC91] <author> Bertsekas, D. P., Castanon, D. A. </author> <title> "A Generic Auction Algorithm for the Minimum Cost Network Flow Problem," Laboratory for Information and Decision Systems Report LIDS-P-2084, </title> <publisher> M.I.T., </publisher> <address> Cambridge, MA, </address> <year> 1991, </year> <note> Compuatational Optimization and Applications, </note> <year> 1994. </year>
Reference-contexts: This rule is based on the sweep implementation of the -relaxation method, which was introduced in [Ber86a] and was analyzed in more detail in [BeE88], [BeT89], and <ref> [BC91] </ref> for the linear cost network ow problem. All the nodes are kept in a linked list T , which is traversed from the flrst to the last element.
Reference: [BCE95] <author> Bertsekas, D. P., Castanon, D., Eckstein, J., and Zenios, S. A., </author> <title> "Parallel network optimization survey", </title> <note> to appear in Encyclopedia of OR. </note>
Reference: [BeE87] <author> Bertsekas, D. P., and Eckstein, J., </author> <title> "Distributed Asynchronous Relaxation Methods for Linear Network Flow Problems," </title> <booktitle> Proceedings of IFAC '87, </booktitle> <address> Munich, Germany, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: Q.E.D. It is well known that the theoretical and the practical performance of the -relaxation method can be improved by scaling. One possibility is cost scaling (see [BlJ92], [EdK72], [Roc80]). An analysis of cost scaling applied to -relaxation for the linear network ow problem is given in <ref> [BeE87] </ref> and also in [BeE88]. In the convex cost case, however, cost scaling may be di-cult to implement since the arc cost functions may be unbounded. A second scaling approach in connection with the -relaxation method for linear cost problems, is -scaling.
Reference: [BeE88] <author> Bertsekas, D. P., and Eckstein, J., </author> <title> "Dual Coordinate Step Methods for Linear Network Flow Problems," </title> <journal> Mathematical Programming, </journal> <volume> Vol. 42, </volume> <year> 1988, </year> <pages> pp. 203-243. </pages>
Reference-contexts: Q.E.D. The following proposition bounds the total number of price increases that the -relaxation method can perform on any node. The proof is patterned after that for the linear cost case [Ber86a], <ref> [BeE88] </ref>. Proposition 3: Assume that for some integer K 1; the initial price vector p 0 for the -relaxation method satisfles K-CS together with some feasible ow vector x 0 : Then, the - relaxation method performs at most 2 (K + 1)(N 1) price rises per node. <p> Complexity Analysis for the -Relaxation Method To obtain a sharper complexity bound, we introduce an order in which the nodes are chosen in iterations. This rule is based on the sweep implementation of the -relaxation method, which was introduced in [Ber86a] and was analyzed in more detail in <ref> [BeE88] </ref>, [BeT89], and [BC91] for the linear cost network ow problem. All the nodes are kept in a linked list T , which is traversed from the flrst to the last element. <p> One possibility is cost scaling (see [BlJ92], [EdK72], [Roc80]). An analysis of cost scaling applied to -relaxation for the linear network ow problem is given in [BeE87] and also in <ref> [BeE88] </ref>. In the convex cost case, however, cost scaling may be di-cult to implement since the arc cost functions may be unbounded. A second scaling approach in connection with the -relaxation method for linear cost problems, is -scaling.
Reference: [BeE87] <author> Bertsekas, D. P., and El Baz, D., </author> <title> "Distributed Asynchronous Relaxation Methods for Convex Network Flow Problems," </title> <journal> SIAM Journal on Control and Optimization, </journal> <volume> Vol. 25, </volume> <year> 1987, </year> <pages> pp. 74-85. </pages>
Reference-contexts: Q.E.D. It is well known that the theoretical and the practical performance of the -relaxation method can be improved by scaling. One possibility is cost scaling (see [BlJ92], [EdK72], [Roc80]). An analysis of cost scaling applied to -relaxation for the linear network ow problem is given in <ref> [BeE87] </ref> and also in [BeE88]. In the convex cost case, however, cost scaling may be di-cult to implement since the arc cost functions may be unbounded. A second scaling approach in connection with the -relaxation method for linear cost problems, is -scaling.
Reference: [BHT87] <author> Bertsekas, D. P., Hosein, P. A., and Tseng, P., </author> <title> "Relaxation Methods for Network Flow Problems with Convex Arc Costs," </title> <journal> SIAM Journal on Control and Optimization, </journal> <volume> Vol. 25, </volume> <year> 1987, </year> <pages> pp. 1219-1243. </pages>
Reference-contexts: Propositions 3 and 5 prove that the -relaxation method terminates. Upon termination, we have that the ow-price vector pair satisfles -CS and that the ow vector is feasible since the surplus of all nodes will be zero. The following proposition, due to <ref> [BHT87] </ref>, shows that the ow vector and the price vector obtained upon termination are primal optimal and dual optimal within a factor that is essentially proportional to . <p> the codes for convex cost problems may be due to the latter's e-cient management of the push lists and the speed of oating point computations of the machine on which the codes were run.) The codes NE-RELAX-F and NE-RELAX-FV were compared to two existing Fortran codes NRELAX and MNRELAX from <ref> [BHT87] </ref>. The latter implement the relaxation method for, respectively, strictly convex cost and convex cost problems, and are believed to be quite e-cient. All codes were compiled and run on a Sun Sparc-5 workstation with 24 megabytes of RAM under the Solaris operating system. <p> The graphs thus created have long diameters and earlier tests on linear cost problems showed that the created problems are particularly di-cult for all methods. As the above two generators create only linear cost problems, we modifled the created problems as in <ref> [BHT87] </ref> so that, for a user-specifled percent of the arcs, a nonzero quadratic cost coe-cient is generated in a user-specifled range. Our tests were designed to study two key issues: 19
Reference: [BeT88] <author> Bertsekas, D. P., and Tseng, P., </author> <title> "Relaxation Methods for Minimum Cost Ordinary and Generalized Network Flow Problems," </title> <journal> Operations Research, </journal> <volume> Vol. 36, </volume> <year> 1988, </year> <pages> pp. 93-114. </pages>
Reference: [BeT94] <author> Bertsekas, D. P., and Tseng, P., " RELAX-IV: </author> <title> A Faster Version of the RELAX Code for Solving Minimum Cost Flow Problems," Laboratory for Information and Decision Systems Report P-2276, </title> <publisher> M.I.T., </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference: [BeT89] <author> Bertsekas, D. P., and Tsitsiklis, J. N., </author> <title> Parallel and Distributed Computation: Numerical Methods, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Clifis, NJ, </address> <year> 1989. </year> <note> 21 References </note>
Reference-contexts: Complexity Analysis for the -Relaxation Method To obtain a sharper complexity bound, we introduce an order in which the nodes are chosen in iterations. This rule is based on the sweep implementation of the -relaxation method, which was introduced in [Ber86a] and was analyzed in more detail in [BeE88], <ref> [BeT89] </ref>, and [BC91] for the linear cost network ow problem. All the nodes are kept in a linked list T , which is traversed from the flrst to the last element.
Reference: [BlJ92] <author> Bland, R. G., and Jensen, D. L., </author> <title> "On the Computational Behavior of a Polynomial-Time Network Flow Algorithm," </title> <journal> Mathematical Programming, </journal> <volume> Vol. 54, </volume> <year> 1992, </year> <pages> pp. 1-39. </pages>
Reference-contexts: Adding the computational requirements for (1), (2), and (3), and using the fact A N 2 , the result follows. Q.E.D. It is well known that the theoretical and the practical performance of the -relaxation method can be improved by scaling. One possibility is cost scaling (see <ref> [BlJ92] </ref>, [EdK72], [Roc80]). An analysis of cost scaling applied to -relaxation for the linear network ow problem is given in [BeE87] and also in [BeE88]. In the convex cost case, however, cost scaling may be di-cult to implement since the arc cost functions may be unbounded.
Reference: [DMZ95] <author> De Leone, R., Meyer, R. R., and Zakarian, A., </author> <title> "An -Relaxation Algorithm for Convex Network Flow Problems," </title> <institution> Computer Sciences Department Technical Report, University of Wisconsin, Madison, WI, </institution> <year> 1995. </year>
Reference: [EdK72] <author> Edmonds, J., and Karp, R. M., </author> <title> "Theoretical Improvements in Algorithmic E-ciency for Network Flow Problems," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 19, </volume> <year> 1972, </year> <pages> pp. 248-264. </pages>
Reference-contexts: Adding the computational requirements for (1), (2), and (3), and using the fact A N 2 , the result follows. Q.E.D. It is well known that the theoretical and the practical performance of the -relaxation method can be improved by scaling. One possibility is cost scaling (see [BlJ92], <ref> [EdK72] </ref>, [Roc80]). An analysis of cost scaling applied to -relaxation for the linear network ow problem is given in [BeE87] and also in [BeE88]. In the convex cost case, however, cost scaling may be di-cult to implement since the arc cost functions may be unbounded.
Reference: [FoF62] <author> Ford, L. R., Jr., and Fulkerson, D. R., </author> <title> Flows in Networks, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962 </year>
Reference: [GoT90] <author> Goldberg, A. V., and Tarjan, R. E., </author> <title> "Solving Minimum Cost Flow Problems by Successive Approximation," </title> <journal> Mathematics of Operations Research, </journal> <volume> Vol. 15, </volume> <year> 1990, </year> <pages> pp. 430-466. </pages>
Reference-contexts: A second scaling approach in connection with the -relaxation method for linear cost problems, is -scaling. This approach was originally introduced in [Ber79] as a means of improving the performance of the auction algorithm for the assignment problem. Its complexity analysis was given in [Gol87] and <ref> [GoT90] </ref>. The key idea of -scaling is to apply the -relaxation method several times, starting with a large value of and to successively reduce up to a flnal value that will give the desirable degree of accuracy to our solution.
Reference: [Gol87] <author> Goldberg, A. V., </author> <title> "E-cient Graph Algorithms for Sequential and Parallel Computers," </title> <institution> Laboratory for Computer Science Technical Report TR-374, M.I.T., </institution> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: A second scaling approach in connection with the -relaxation method for linear cost problems, is -scaling. This approach was originally introduced in [Ber79] as a means of improving the performance of the auction algorithm for the assignment problem. Its complexity analysis was given in <ref> [Gol87] </ref> and [GoT90]. The key idea of -scaling is to apply the -relaxation method several times, starting with a large value of and to successively reduce up to a flnal value that will give the desirable degree of accuracy to our solution.
Reference: [Hag92] <author> Hager, W. W., </author> <title> "The Dual Active Set Algorithm," in Advances in Optimization and Parallel Computing, Edited by P. </title> <editor> M. Pardalos, </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherland, </address> <year> 1992, </year> <pages> pp. 137-142. </pages>
Reference: [HaH93] <author> Hager, W. W., and Hearn, D. W., </author> <title> "Application of the Dual Active Set Algorithm to Quadratic Network Optimization," </title> <journal> Computational Optimization and Applications, </journal> <volume> Vol. 1, </volume> <year> 1993, </year> <pages> pp. 349-373. </pages>
Reference: [KaM84] <author> Kamesam, P. V., and Meyer, R. R., </author> <title> "Multipoint Methods for Separable Nonlinear Networks," </title> <journal> Mathematical Programming Study, </journal> <volume> Vol. 22, </volume> <year> 1984, </year> <pages> pp. 185-205. </pages>
Reference: [KaM93] <author> Karzanov, A. V., and McCormick, S. T., </author> <title> "Polynomial Methods for Separable Convex Optimization in Unimodular Linear Spaces with Applications to Circulations and Co-circulations in Network," </title> <institution> Faculty of Commerce Report, University of British Columbia, Vancouver, BC, </institution> <note> 1993; to appear in SIAM Journal on Computing. </note>
Reference-contexts: We have thus obtained the following: Proposition 9: The running time of the -relaxation method using the sweep implementation and -scaling as described above is O operations. We note that a complexity bound of O operations was derived in <ref> [KaM93] </ref> for the tighten and cancel method. For relatively dense problems where A = (N 2 =ln N ), our complexity bound for the -relaxation method is more favorable, while for sparse problems, where A = (N ); the reverse is true. 5.
Reference: [KNS74] <author> Klingman, D., Napier, A., and Stutz, J., </author> <title> "NETGEN A Program for Generating Large Scale (Un) Capacitated Assignment, Transportation, and Minimum Cost Flow Network Problems," </title> <journal> Management Science, </journal> <volume> Vol. 20, </volume> <year> 1974, </year> <pages> pp. 814-822. </pages>
Reference-contexts: We created the test problems using two Fortran problem generators. The flrst is the public-domain generator NETGEN, written by Klingman, Napier and Stutz <ref> [KNS74] </ref>, which generates linear-cost assignment/transportation/transshipment problems having a certain random structure.
Reference: [LiZ91] <author> Li, X., and Zenios, S. A., </author> <title> "Data Parallel Solutions of Min-Cost Network Flow Problems Using -Relaxations," </title> <institution> Department of Decision Sciences Report 1991-05-20, University of 22 References Pennsylvania, </institution> <address> Philadelphia, PA, </address> <year> 1991. </year>
Reference: [Mey79] <author> Meyer, R. R., </author> <title> "Two-Segment Separable Programming," </title> <journal> Management Science, </journal> <volume> Vol. 25, </volume> <year> 1979, </year> <pages> pp. 285-295. </pages>
Reference: [NiZ93] <author> Nielsen, S. S., and Zenios, S. A., </author> <title> "On the Massively Parallel Solution of Linear Network Flow Problems," in Network Flow and Matching: First DIMACS Implementation Challenge, </title> <editor> Edited by D. Johnson and C. McGeoch, </editor> <publisher> American Mathematical Society, </publisher> <address> Providence, RI, </address> <year> 1993, </year> <pages> pp. 349-369. </pages>
Reference: [Pol94] <author> Polymenakos, L. C. </author> <title> "Parallel Shortest Path Auction Algorithms," </title> <journal> Parallel Computing, </journal> <volume> Vol. 20, </volume> <year> 1994, </year> <pages> pp. 1221-1247. </pages>
Reference-contexts: The above assumption can be enforced to hold by various mechanisms, some of which are discussed in [Tse86] for the relaxation method and in <ref> [Pol94] </ref> for the auction shortest path algorithm. 6. COMPUTATIONAL RESULTS We have developed and tested two experimental Fortran codes implementing the methods of this paper for convex cost problems. The flrst code, named NE-RELAX-F, implements the forward -relaxation method with the sweep implementation and -scaling as described in Section 4.
Reference: [Pol95] <author> Polymenakos, L. C. </author> <title> "-Relaxation and Auction Algorithms for the Convex Cost Network Flow Problem," </title> <institution> Electrical Engineering and Computer Science Department Ph.D. </institution> <type> Thesis, </type> <institution> M.I.T., </institution> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference: [Roc80] <author> Rock, H., </author> <title> "Scaling Techniques for Minimal Cost Network Flows," in Discrete Structures and Algorithms, Edited by U. </title> <editor> Pape, Carl Hanser, </editor> <address> Munchen, Germany, </address> <year> 1980, </year> <pages> pp. 181-191. </pages>
Reference-contexts: Adding the computational requirements for (1), (2), and (3), and using the fact A N 2 , the result follows. Q.E.D. It is well known that the theoretical and the practical performance of the -relaxation method can be improved by scaling. One possibility is cost scaling (see [BlJ92], [EdK72], <ref> [Roc80] </ref>). An analysis of cost scaling applied to -relaxation for the linear network ow problem is given in [BeE87] and also in [BeE88]. In the convex cost case, however, cost scaling may be di-cult to implement since the arc cost functions may be unbounded.
Reference: [Roc70] <author> Rockafellar, R. T., </author> <title> Convex Analysis, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1970. </year>
Reference: [Roc84] <author> Rockafellar, R. T., </author> <title> Network Flows and Monotropic Programming, </title> <publisher> Wiley-Interscience, </publisher> <address> New York, NY, </address> <year> 1984. </year>
Reference: [Tse86] <author> Tseng, P., </author> <title> "Relaxation Methods for Monotropic Programming Problems," Operations Research Center Ph.D. </title> <type> Thesis, </type> <institution> M.I.T., </institution> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference-contexts: The above assumption can be enforced to hold by various mechanisms, some of which are discussed in <ref> [Tse86] </ref> for the relaxation method and in [Pol94] for the auction shortest path algorithm. 6. COMPUTATIONAL RESULTS We have developed and tested two experimental Fortran codes implementing the methods of this paper for convex cost problems.
Reference: [TBT90] <author> Tseng, P., Bertsekas, D. P., and Tsitsiklis, J. N., </author> <title> "Partially Asynchronous, Parallel Algorithms for Network Flow and Other Problems," </title> <journal> SIAM Journal on Control and Optimization, </journal> <volume> Vol. 28, </volume> <year> 1990, </year> <pages> pp. 678-710. </pages>
Reference: [Ven91] <author> Ventura, J. A., </author> <title> "Computational Development of a Lagrangian Dual Approach for Quadratic Networks," </title> <journal> Networks, </journal> <volume> Vol. 21, </volume> <year> 1991, </year> <pages> pp. 469-485. </pages>
Reference: [Wei74] <author> Weintraub, A., </author> <title> "A Primal Algorithm to Solve Network Flow Problems with Convex Costs," </title> <journal> Management Science, </journal> <volume> Vol. 21, </volume> <year> 1974, </year> <pages> pp. 87-97. 23 </pages>
References-found: 38

