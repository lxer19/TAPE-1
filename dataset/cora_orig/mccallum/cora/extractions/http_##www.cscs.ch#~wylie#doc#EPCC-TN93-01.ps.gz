URL: http://www.cscs.ch/~wylie/doc/EPCC-TN93-01.ps.gz
Refering-URL: 
Root-URL: 
Email: pds@epcc.ed.ac.uk bjnw@epcc.ed.ac.uk  
Title: EPCC-TN93-01.01 High Performance Fortran Migration (HPF HPF) via CM-Fortran note lists the CMF features whose
Author: Patrick D Surry Brian J N Wylie 
Note: This technical  possible. Electronic contact addresses:  
Date: January 1993  
Address: Edinburgh, EH9 3JZ Scotland  
Affiliation: Edinburgh Parallel Computing Centre University of Edinburgh  
Abstract: High Performance FORTRAN (HPF), as specified by the High Performance Fortran Forum in the course of 1992, addresses the problem of writing portable programs for architectures where the distribution of data may significantly impact performance. HPF defines a broad range of language extensions for FORTRAN, which are hoped to become widely supported by compilers for a range of architectures. A subset of the full extended language has also been specified ( HPF), to enable some of the most pertinent features to be made more widely and rapidly available by early compilers for experimentation. CM-FORTRAN, as currently provided for the Connection Machine, embodies many of the language features specified in HPF. CMF may therefore provide a useful migration path for applications ultimately intending to utilise HPF in the interim period until HPF compilers become commonly available. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran Language Specification, </title> <note> 1992. Current draft Version 1.0 released late January 1993, expecting final ratification in March. Most recent draft available as technical report CRPC-TR 92225 from the Center for Research in Parallel Computation at Rice University, or as compressed PostScript via anonymous ftp from titan.cs.rice.edu:public/HPFF/draft. </note>
Reference-contexts: Since then, comments have been collated and incorporated within a revised draft, released in late January and due to be ratified in March. (The current language specification is available as <ref> [1] </ref>.) Various announcements from vendors have suggested that early compilers should appear for HPF (or, more likely, the official subset, HPF) around the middle of 1993. 1.2 CM Fortran The proprietary CM FORTRAN system (CMF), developed by Thinking Machines Corp. for their Connection Machine series of parallel computers, provides many of <p> This document attempts to provide guidance in such code development. Specifically, the subset of High Performance FORTRAN ( HPF, as detailed in <ref> [1, Chapter 9] </ref>) has been targeted. With the language definition still being finalised, conforming compilers currently do not exist.
Reference: [2] <institution> International Standards Organisation (ISO). Fortran 90. ISO 1539:1991, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: 1 Introduction 1.1 High Performance Fortran The 1977 ANSI standardisation of FORTRAN resulted in the FORTRAN-77 (or F77) language. The addition of many language and data-parallel features led to the 1990 standard, FORTRAN-90 (F90, see <ref> [2] </ref>), which has FORTRAN-77 as a full subset to guarantee upward compatibility. The High Performance Fortran Forum convened in 1992 with the goal of addressing the problems of writing data-parallel programs for architectures where the distribution of data impacts performance.
Reference: [3] <author> Mike Metcalf and John Reid. </author> <title> Fortran 90 Explained. </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year>
Reference-contexts: Use of these routines is acceptable, but should be localised, and the object of the allocation should be clearly documented to aid in the transition to other machines. If possible, the equivalent FORTRAN-90 constructs should be provided (in comments). A sample is provided in Figure 2 (or see <ref> [3] </ref>): Code fragment illustrating the suggested use of the CM dynamic memory allocation routines. INTEGER APTR (CMF_SIZEOF_DESCRIPTOR), DIMS (2) CF90 REAL, DIMENSION (:,:), ALLOCATABLE :: A ...
Reference: [4] <author> Thinking Machines Corporation. </author> <title> CM FORTRAN Reference Manual. </title> <address> Cambridge, Massachusetts, </address> <month> July </month> <year> 1991. </year> <note> Version 1.1. </note>
Reference-contexts: CM FORTRAN was developed from the FORTRAN-90 draft standard, with the addition of some array operations (such as forall) from earlier versions that were removed in the final draft. More details of its evolution can be found in <ref> [4] </ref>. A Connection Machine specific utility library [5], along with a scientific library [6] are also provided. HPF & HPF MIGRATION VIA CMF 3 1.3 Migration Strategy document summarises some of the important features of HPF, HPF, and CMF. <p> Guidance in avoiding potentially problematic features (in both the short and longer terms) and suggested alternatives is provided. 2.1 Intrinsic Functions The following intrinsic functions are present in CMF, but are not part of HPF, therefore they should not be used. (See <ref> [4, Chapter 16] </ref> for more detailed descriptions.) * CASE the case statement construct * RANK return the rank of a array * DIAGONAL create a diagonal matrix * REPLICATE replicate an array * FIRSTLOC find the starting true boundary of a logical array * LASTLOC find the ending true boundary of <p> loop a number of times without a loop counter The omission of LEN from the list of HPF-supported intrinsics may be an oversight, therefore it may subsequently be re-admitted in the next version of the HPF specification document. 2.2 CMF Directives The CMF compiler understands several types of directives (see <ref> [4, Appendix A] </ref>), prefixed with CMF$. The LAYOUT and ALIGN directives control how arrays are distributed across the processors.
Reference: [5] <institution> Thinking Machines Corporation. CM Progamming in FORTRAN. </institution> <address> Cambridge, Mas-sachusetts, </address> <month> January </month> <year> 1991. </year> <note> Version 1.0. </note>
Reference-contexts: CM FORTRAN was developed from the FORTRAN-90 draft standard, with the addition of some array operations (such as forall) from earlier versions that were removed in the final draft. More details of its evolution can be found in [4]. A Connection Machine specific utility library <ref> [5] </ref>, along with a scientific library [6] are also provided. HPF & HPF MIGRATION VIA CMF 3 1.3 Migration Strategy document summarises some of the important features of HPF, HPF, and CMF. Note that CMF is nearly a subset of HPF if syntactic differences are ignored. <p> HPF & HPF MIGRATION VIA CMF 5 2.3 CM Utility Library 2.3.1 Array Transfer Routines The routines CMF FE ARRAY FROM CM and CMF FE ARRAY TO CM are provided to transfer data between the front-end and the parallel machine (see <ref> [5, p. UG 48] </ref>). These routines may be necessary to deal with the dual memory model of the CM, but their use should be limited and localised wherever possible since they may be unsupported or unnecessary on other platforms. <p> Code that emulates such operations or which would benefit from them should be flagged for possible subsequent replacement by (vendor or) machine-specific equivalents. These routines are described in <ref> [5, pp. UG 52-53] </ref>. 2.3.4 Array Information Functions A number of subroutines are provided to enquire about the physical mapping of array elements to processors (CMF GET GEOMETRY ID, CMF DESCRIBE ARRAY, etc.). These routines are completely architecture dependent and should not be used. They are described in [5, pp. <p> UG 52-53]. 2.3.4 Array Information Functions A number of subroutines are provided to enquire about the physical mapping of array elements to processors (CMF GET GEOMETRY ID, CMF DESCRIBE ARRAY, etc.). These routines are completely architecture dependent and should not be used. They are described in <ref> [5, pp. UG 55-61] </ref>. 2.3.5 Global Scatters With Combining Routines that give some of the functionality of forall with pure functions are present in the CM Utility library (CMF SEND ???) see [5, pp. UG 61-62]. <p> These routines are completely architecture dependent and should not be used. They are described in [5, pp. UG 55-61]. 2.3.5 Global Scatters With Combining Routines that give some of the functionality of forall with pure functions are present in the CM Utility library (CMF SEND ???) see <ref> [5, pp. UG 61-62] </ref>. <p> All of the functionality can be duplicated using simple FORTRAN-90 constructs (as illustrated in the examples given in <ref> [5, pp. UG 62-67] </ref>). These FORTRAN-90 equivalents should be used exclusively, leaving possible machine-specific optimisation for later if desired. <p> UG 62-67]). These FORTRAN-90 equivalents should be used exclusively, leaving possible machine-specific optimisation for later if desired. The specialised routines should not be used. 2.3.7 Random Number Subroutines Subroutines that generate arrays of random numbers (CMF RANDOM, CMF RANDOMIZE) are found in the CM utility library (see <ref> [5, pp. UG 67-68] </ref>). <p> UG 67-68]). If necessary these routines may be used, although this should be carefully documented since they will have to be subsequently replaced by machine-specific alternatives for different platforms, possibly with subtly different functionality. 2.3.8 Sorting The routine CMF ORDER is provided to sort arrays (see <ref> [5, pp. 68-69] </ref>). This function should not be used, although hand-written sorting routines should be marked for possible subsequent replacement. HPF & HPF MIGRATION VIA CMF 7 2.3.9 Parallel I/O No support for parallel I/O should be assumed, and none of the provided routines should be used. <p> This function should not be used, although hand-written sorting routines should be marked for possible subsequent replacement. HPF & HPF MIGRATION VIA CMF 7 2.3.9 Parallel I/O No support for parallel I/O should be assumed, and none of the provided routines should be used. These routines are described in <ref> [5, pp. UG 69-77] </ref>. 2.4 Scientific Subroutine Library (CMSSL) The CMSSL [6] provides (for the most part) highly specialised, architecture-dependent scientific routines which can not be assumed to be available on other platforms.
Reference: [6] <institution> Thinking Machines Corporation. CMSSL for CM FORTRAN. </institution> <address> Cambridge, Mas-sachusetts, </address> <month> August </month> <year> 1991. </year> <note> Version 2.2. </note>
Reference-contexts: More details of its evolution can be found in [4]. A Connection Machine specific utility library [5], along with a scientific library <ref> [6] </ref> are also provided. HPF & HPF MIGRATION VIA CMF 3 1.3 Migration Strategy document summarises some of the important features of HPF, HPF, and CMF. Note that CMF is nearly a subset of HPF if syntactic differences are ignored. <p> HPF & HPF MIGRATION VIA CMF 7 2.3.9 Parallel I/O No support for parallel I/O should be assumed, and none of the provided routines should be used. These routines are described in [5, pp. UG 69-77]. 2.4 Scientific Subroutine Library (CMSSL) The CMSSL <ref> [6] </ref> provides (for the most part) highly specialised, architecture-dependent scientific routines which can not be assumed to be available on other platforms.

References-found: 6

