URL: http://ebbets.poly.edu/hstein/pubs/unate.ps
Refering-URL: http://ebbets.poly.edu/hstein/journal.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Conjunctions of Unate DNF Formulas: Learning and Structure  
Author: Aaron Feigelson Lisa Hellerstein 
Note: 60208-3118. Research partially funded by NSF Grants No. CCR-95-01660 and CCR-92-10957  
Address: Evanston, IL  
Affiliation: Department of ECE, Northwestern University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aizenstein, H., Heged-us, T., Hellerstein, L., and Pitt, L. </author> <year> (1996), </year> <title> Complexity theoretic hardness results for query learning, </title> <note> To appear in Computational Complexity. </note>
Reference-contexts: Aizenstein, Heged-us, Hellerstein, and Pitt introduced the first technique for proving computational hardness results on proper learning in the membership and equivalence query model <ref> [1] </ref>. Related techniques were then presented by Pillaipakkamnatt and Raghavan [11]. They showed that certain classes of DNF formulas, including read-thrice DNF, are not properly learnable in polynomial time with membership and equivalence queries unless P = NP. Thus there is a computational barrier to properly learning these classes. <p> It is easy to construct artificial classes that also have these properties, but it can be quite difficult to determine whether such properties hold for more natural classes of functions. 1 1 Aizenstein et al. did show that similar properties hold for the class of unions of k graphic halfspaces <ref> [1] </ref>. All functions in this class are expressible as monotone 2-DNF formulas and thus can be easily learned in terms of a 2-DNF representation using a polynomial number of membership queries (and no equivalence queries).
Reference: [2] <author> Angluin, D. </author> <year> (1987), </year> <title> Learning k-term dnf formulas using queries and counterexamples, </title> <type> Technical Report YALE/DCS/RR-559, </type> <institution> Yale University. </institution>
Reference-contexts: It is also a simple extension of the class of 2-clause CNF formulas, because each clause of a 2-clause CNF formula is unate. The class of 2-clause CNF formulas is properly learnable in polynomial time <ref> [2] </ref>. The characterization of Hellerstein et al. [9] says that a class C can be properly learned using a polynomial number of polynomial-size membership and equivalence queries iff C has polynomial-size certificates. <p> We give the basic definitions. Additional details can be found in [6]. Let a and b be assignments to a set of n variables V n . Let a + b denote the sum of vectors a and b over GF <ref> [2] </ref>. The relation a &lt; b means that a (x) b (x) for all x 2 V n , and a (y) &lt; b (y) for some y 2 V n . Let c be an assignment to V n . <p> Thus for all x 2 W , b (x) + b 1 (x) d (x) + b 1 (x) and c (x) + b 2 (x) d (x) + b 2 (x). (addition is over GF <ref> [2] </ref>.) This implies p 0 =b (x) b 1 p 0 =d (x) and p 0 =c (x) b 2 p 0 =d (x). Thus (p 0 =b; p 0 =c; p 0 =d) is a suitable triple for fb 1 ; b 2 g. <p> The proof of these properties follow immediately from the above lemma and elementary properties of linear codes. 1. The vectors in S n form a group with respect to component-wise addition over GF <ref> [2] </ref>. 2. The vectors in S n are a subspace of the space of n-vectors over GF [2]. 3. <p> The vectors in S n form a group with respect to component-wise addition over GF <ref> [2] </ref>. 2. The vectors in S n are a subspace of the space of n-vectors over GF [2]. 3. <p> matrix (called the parity check matrix) A = [P jI], where P is an (n k) fi k matrix and I is the (n k) fi (n k) identity matrix, such that S n is the set of binary n-vectors satisfying the matrix equation Ay = ~ 0 over GF <ref> [2] </ref>. 4. <p> Consider the column c of A corresponding to x i . Recall that A = [P jI]. Case 1: Column c is in P. In this case, there exists a set C of columns of I such that the sum (over GF <ref> [2] </ref>) of the columns in C [ fcg is ~ 0. Form an n-vector y 0 with 1's in the positions corresponding to columns in C [ fcg, and 0's in all other columns. <p> Then c 0 ; c, and the other columns of I sharing 1's in the rows in which c 0 22 has 1's, sum to ~ 0 (over GF <ref> [2] </ref>). Let y 0 be the vector which is 1 precisely in the positions corresponding to these columns. Then Ay 0 = ~ 0, f (y 0 ) = 1, and f (y 0 x i 0 ) = 0. Therefore f is not anti-monotone in x i . <p> Note that since b and b are comple mentary, (p 1 ; p 2 ; q) is a suitable triple for b; b iff p 1 &lt; b q &lt; b p 2 . Consider the group of binary n-vectors with respect to componentwise addition over GF <ref> [2] </ref>. S n is a subgroup of that group. Consider the cosets C 1 ; C 2 ; :::; C q of S n (since jS n j = 2 k , q = 2 nk ).
Reference: [3] <author> Angluin, D. </author> <year> (1988), </year> <title> Queries and concept learning, </title> <booktitle> Machine Learning 2, </booktitle> <pages> 319-342. </pages>
Reference-contexts: Using the techniques of Pillaikammnatt and Raghavan [11], and a result of Hellerstein et al. [9], this result can easily 1 The class of monotone DNF formulas is learnable in polynomial time with membership and equivalence queries <ref> [3] </ref>. The more general class of unate DNF formulas is also learnable in polynomial time in this model [5]. In a unate DNF formula, each variable either always appears in its negated form, or always appears without negation. <p> The learning algorithm is expected to represent functions in C using an associated set of formulas F. The algorithm is given as input the set of n variables V n on which f is defined. We consider here the most common combination of queries: membership and equivalence <ref> [3] </ref>. A membership query asks for the value of f on an assignment a. The answer to the query is f (a). An equivalence query asks whether a hypothesis formula h 2 F is equivalent to the function f , i.e., whether h represents f .
Reference: [4] <author> Angluin, D. </author> <year> (1992), </year> <title> Computational learning theory: Survey and selected bibliography, </title> <booktitle> in "Proceedings of the 24th Annual ACM Symposium on Theory of Computing," </booktitle> <pages> pp. 351-369. </pages>
Reference-contexts: 1 Introduction 1.1 Overview A central topic in query learning is to determine which classes of Boolean formulas are efficiently learnable. A number of classes have been shown to be learnable in polynomial time using membership and equivalence queries (for an incomplete survey, see <ref> [4] </ref>).
Reference: [5] <author> Angluin, D., Hellerstein, L., and Karpinski, M. </author> <year> (1993), </year> <title> Learning read-once formulas with queries, </title> <editor> J. </editor> <booktitle> ACM 40, </booktitle> <pages> 185-210. </pages>
Reference-contexts: The more general class of unate DNF formulas is also learnable in polynomial time in this model <ref> [5] </ref>. In a unate DNF formula, each variable either always appears in its negated form, or always appears without negation. The class R 2 is a simple extension of the class of unate DNF formulas. <p> Thus in learning a unate DNF f, Bshouty's algorithm may take time exponential in n and the number of terms of f. In contrast, the algorithm of <ref> [5] </ref> for learning unate DNF formulas f finds a basis of size 1 for f and runs in time polynomial in n and the number of terms in f .
Reference: [6] <author> Bshouty, N. </author> <year> (1995), </year> <title> Exact learning boolean functions via the monotone theory, </title> <booktitle> Information and Computation 123, </booktitle> <pages> 146-153. </pages>
Reference-contexts: that unions of k graphic halfspaces can be properly learned in polynomial time with membership and equivalence queries if and only if P = NP. 2 1.2 Relation to work on monotone dimension Our interest in conjunctions of unate DNF formulas is motivated in part by recent work of Bshouty <ref> [6] </ref>. Bshouty defined the monotone dimension of a Boolean function. The monotone dimension of a function f is the minimum number d such that f can be written as the conjunction of d unate DNF formulas. (In his paper, Bshouty actually gave a different definition. <p> We give the basic definitions. Additional details can be found in <ref> [6] </ref>. Let a and b be assignments to a set of n variables V n . Let a + b denote the sum of vectors a and b over GF [2].
Reference: [7] <author> Ekin, O., Hammer, P., and Peled, U. </author> <year> (1995), </year> <title> Horn functions and submodular boolean functions, </title> <type> Technical Report RRR1-95, </type> <institution> Rutgers Center for Operations Research. </institution> <month> 30 </month>
Reference-contexts: Ekin, Hammer, and Peled showed that for the class of Horn formulas, a certificate of size 3 exists <ref> [7] </ref>.
Reference: [8] <author> Heged-us, T., </author> <title> (1995) Generalized Teaching Dimensions and the Query Complexity of Learning, </title> <booktitle> in "Proceedings of the Eighth Annual ACM Conference on Computational Learning Theory," </booktitle> <pages> pp. 108-117. </pages>
Reference-contexts: More recently, Hellerstein, Pillaipakkamnatt, Raghavan, and Wilkins gave a characterization of the classes that are polynomial-query learnable [9]. (A related result was proved independently by Heged-us <ref> [8] </ref>.) Using this characterization, they showed that the class of CDNF formulas is polynomial-query learnable. However, it is not known whether there is a computational barrier to learning this class. That is, it is open whether this class can be properly learned in polynomial time with membership and equivalence queries.
Reference: [9] <author> Hellerstein, L., Pillaipakkamnatt, K., Raghavan, V., and Wilkins, D. </author> <year> (1996), </year> <title> How many queries are needed to learn? Journal of the ACM 43 (5), </title> <type> 840-862. </type>
Reference-contexts: A class is polynomial-query learnable if it can be properly learned using a polynomial number of (polynomial-size) membership and equivalence queries, given unlimited computational time. More recently, Hellerstein, Pillaipakkamnatt, Raghavan, and Wilkins gave a characterization of the classes that are polynomial-query learnable <ref> [9] </ref>. (A related result was proved independently by Heged-us [8].) Using this characterization, they showed that the class of CDNF formulas is polynomial-query learnable. However, it is not known whether there is a computational barrier to learning this class. <p> However, Aizenstein et al. showed that unions of k graphic halfspaces cannot be properly learned in polynomial-time with membership and equivalence queries unless NP = co-NP. Using the techniques of Pillaikammnatt and Raghavan [11], and a result of Hellerstein et al. <ref> [9] </ref>, this result can easily 1 The class of monotone DNF formulas is learnable in polynomial time with membership and equivalence queries [3]. The more general class of unate DNF formulas is also learnable in polynomial time in this model [5]. <p> It is also a simple extension of the class of 2-clause CNF formulas, because each clause of a 2-clause CNF formula is unate. The class of 2-clause CNF formulas is properly learnable in polynomial time [2]. The characterization of Hellerstein et al. <ref> [9] </ref> says that a class C can be properly learned using a polynomial number of polynomial-size membership and equivalence queries iff C has polynomial-size certificates. <p> The proof that D 2 is polynomial-query learnable relies on the connection between query complexity and the existence of polynomial-size certificates. We present a restricted version of a theorem of Hellerstein et al. (The original theorem applies to languages as well as functions.) Theorem 1 <ref> [9] </ref> A representation class R (for Boolean functions) is polynomial-query learnable iff there exist polynomials p () and q () such that for all m; n &gt; 1 and all Boolean functions f on n variables, if jfj R &gt; p (m; n), then there exists a certificate of size at <p> Proof: The "only if" direction follows immediately from Lemmas 10 and 13 and from the theorem of Pillaipakkamnatt and Raghavan (Theorem 3). Because R 2 can be recognized and evaluated in polynomial time and R 2 has polynomial-size certificates, results of Hellerstein et al. <ref> [9] </ref> imply that R 2 can be learned in polynomial time using a p 4 oracle.
Reference: [10] <author> Lin, S. </author> <year> (1971), </year> <title> An Introduction to Error-Correcting Codes, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: We construct the functions in F using a binary BCH code. We first present a well known result regarding binary BCH codes, and then explain its implications for our construction. Lemma 14 (see, e.g., <ref> [10] </ref>) For any positive integers m; t such that t &lt; 2 m1 , there exists a binary BCH code with block length n = 2 m 1, and n k mt check digits, such that ffi H (s 1 ; s 2 ) &gt; 2t + 1 for any two
Reference: [11] <author> Pillaipakkamnatt, K. and Raghavan, V. </author> <year> (1994), </year> <title> On the limits of proper learnability of subclasses of dnf formulas, </title> <booktitle> in "Proceedings of the Seventh Annual ACM Conference on Computational Learning Theory," </booktitle> <pages> pp. 118-129. 31 </pages>
Reference-contexts: Aizenstein, Heged-us, Hellerstein, and Pitt introduced the first technique for proving computational hardness results on proper learning in the membership and equivalence query model [1]. Related techniques were then presented by Pillaipakkamnatt and Raghavan <ref> [11] </ref>. They showed that certain classes of DNF formulas, including read-thrice DNF, are not properly learnable in polynomial time with membership and equivalence queries unless P = NP. Thus there is a computational barrier to properly learning these classes. <p> However, Aizenstein et al. showed that unions of k graphic halfspaces cannot be properly learned in polynomial-time with membership and equivalence queries unless NP = co-NP. Using the techniques of Pillaikammnatt and Raghavan <ref> [11] </ref>, and a result of Hellerstein et al. [9], this result can easily 1 The class of monotone DNF formulas is learnable in polynomial time with membership and equivalence queries [3]. The more general class of unate DNF formulas is also learnable in polynomial time in this model [5]. <p> In the appendix, we extend this NP-hardness result to R k for all constant k &gt; 2. We will use a theorem of Pillaipakkamnatt and Raghavan <ref> [11] </ref>. First, we give the necessary definitions. Let F and C be two classes of formulas. <p> A formula c 0 2 C n such that f c 0 . The problem REP (C) for F takes as input a formula f 2 F and determines whether there exists a formula in C that is equivalent to f . Theorem 3 <ref> [11] </ref> Let C = S n1 C n be a polynomially recognizable class of Boolean formulas and let p () be a polynomial function such that for each c 2 C n , the size of the encoding of c is at most p (n).
References-found: 11

