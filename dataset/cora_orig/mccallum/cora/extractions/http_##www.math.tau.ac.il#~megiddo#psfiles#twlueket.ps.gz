URL: http://www.math.tau.ac.il/~megiddo/psfiles/twlueket.ps.gz
Refering-URL: http://www.math.tau.ac.il/~megiddo/pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Linear Programming with Two Variables per Inequality in Poly-Log Time  
Author: George S. Lueker Nimrod Megiddo Vijaya Ramachandran 
Abstract: The parallel time complexity of the linear programming problem with at most two variables per inequality is discussed. Let n and m denote the number of variables and the number of inequalities, respectively, in a linear programming problem. We assume all inequalities are weak. We describe an O((log m + log 2 n) log 2 n)-time parallel algorithm for deciding feasibility, under the concurrent-read-exclusive-write PRAM model. It requires mn O(log n) processors in the worst case, though we do not know whether this bound is tight. When the problem is feasible a solution can be computed within the same complexity. Moreover, linear programming problems with at most two nonzero coefficients in the objective function can be solved in poly-log time on a similar number of processors. Consequently, all these problems can be solved sequentially with only O((log m + log 2 n) 2 log 2 n) space. (These bounds assume that numbers take O(1) space, and arithmetic on them takes O(1) time; the problem can still be solved in poly-log space as a function of the input size even if we instead use a Turing machine model with rational input.) It is also shown that if the underlying graph has bounded tree-width and an underlying tree is given then the feasibility problem is in the class NC.
Abstract-found: 1
Intro-found: 1
Reference: <institution> 14 </institution>
Reference-contexts: 1. Introduction Dobkin, Lipton and Reiss [7] first showed that the general linear programming problem was (log-space) hard for P. Combined with Khachiyan's deep result <ref> [14] </ref> that the problem is in P, this establishes that the problem is P-complete (that is, log-space complete for fl An earlier version of this paper appeared in the Proceedings of the 18th Annual Symposium on Theory of Computing, May 1986, pp. 196-205. y Department of Information and Computer Science, University
Reference: [1] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1974. </year>
Reference-contexts: It is interesting to note that the two operations " and ffi do not form a closed semiring in the sense defined in <ref> [1] </ref>. <p> Interestingly, Proposition 5.1 does not hold if there are more than two variables per inequality. To see this, consider the system x 0, y 0, z 0, and x + y + z 1. The projection of the feasible space onto the x-, y-, or z-axis is just <ref> [0; 1] </ref>, but the point (1=2; 1=2; 1=2) is not feasible. The unbounded case is handled as follows. We introduce to the system an additional variable ~ and the 2n inequalities x j ~, x j ~ (j = 1; . . . ; n).
Reference: [2] <author> B. Aspvall and Y. Shiloach, </author> <title> "A polynomial time algorithm for solving systems of linear inequalities with two variables per inequality," </title> <journal> SIAM J. Comput. </journal> <month> 9 </month> <year> (1980) </year> <month> 827-845. </month>
Reference-contexts: Our algorithm is a parallelization of the algorithm in Nelson [17], but our exposition will also make use of the characterization of Shostak [19] and further results by Aspvall and Shiloach <ref> [2] </ref> which we now describe. 1 A key idea in these papers is the observation that one can combine inequalities to deduce new inequalities. For example, suppose we are given x + 2y 3 and y + 3z 4. <p> Thus by Theorem 2.1, a second application of UpdatePaths will cause at least one of the Q xy to become empty if the original set of inequalities had no feasible solution. Further, if the feasible space is nonempty, it follows from <ref> [2, Lemma 9] </ref> that after this second application of the procedure the projection of the feasible set onto any axis R x is the same as the projection of Q xx onto R x .
Reference: [3] <author> A. Borodin, </author> <title> "On relating time and space to size and depth" SIAM J. </title> <institution> Comput. </institution> <month> 6 </month> <year> (1977) </year> <month> 733-744. </month>
Reference-contexts: We have just established that we can determine feasibility in T = O ((log m+log 2 n) log 2 n) parallel time using P = mn O (log n) write parallel RAM. Using standard simulation relations between parallel models of computation and between parallel time and sequential space <ref> [3, 9, 13, 20] </ref>, this implies that feasibility can be determined by a poly-log space-bounded deterministic Turing machine. This suggests that the problem might not be P-complete. 5.
Reference: [4] <author> A. Borodin and J. E. Hopcroft, </author> <title> "Routing, merging, and sorting on parallel models of computation," </title> <journal> J. Comput. System Sci. </journal> <month> 30 </month> <year> (1985) </year> <month> 130-145. </month>
Reference-contexts: The merging can be done efficiently by the algorithm of <ref> [4] </ref>. Next, using standard pointer doubling techniques, each type 1 (resp. type 2) point can determine the previous and following type 2 (resp. type 1) point. Once this information is available, each point can determine in O (1) time whether it lies below or on g (x).
Reference: [5] <author> R. P. Brent, </author> <title> "The parallel evaluation of general arithmetic expressions," </title> <journal> J. Assoc. Comput. Mach. </journal> <month> 21 </month> <year> (1974) </year> <month> 201-206. </month>
Reference-contexts: Given the underlying tree T, we can decompose the graph G in an efficient way. The decomposition is based on the centroid which is often useful in the design of parallel algorithms (as an early reference we might mention <ref> [5] </ref>).
Reference: [6] <author> S. A. Cook, </author> <title> "A taxonomy of problems with fast parallel algorithms," </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> pp. 2-22. </pages>
Reference-contexts: More generally, resolving whether the linear programming problem with two variables per inequality lies in NC seems like a very interesting question. To provide context, note that Cook fairly recently observed <ref> [6, p. 18] </ref> "I find it interesting that very few natural problems in [poly-log space] have come to my attention which are not in NC. One notable exception is the problem of determining whether two groups, presented by their multiplication tables, are isomorphic. . . ..
Reference: [7] <author> D. Dobkin, R. J. Lipton and S. Reiss, </author> <title> "Linear programming is log space hard for P," </title> <note> Information Processing Letters 8 (1979) 96-97. </note>
Reference-contexts: 1. Introduction Dobkin, Lipton and Reiss <ref> [7] </ref> first showed that the general linear programming problem was (log-space) hard for P.
Reference: [8] <author> L. R. Ford, Jr., and R. D. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: Proof: The proof follows from the result that the problem of finding the value of the maximum flow through a capacitated network is P-complete [11]. More specifically, every maximum flow problem can be reduced <ref> [8] </ref> to a transportation problem, that is, a problem of the form Minimize X c ij x ij subject to X x ij a i i x ij 0 : The dual of the latter has only two variables per inequality.
Reference: [9] <author> S. Fortune and J. Wyllie, </author> <title> "Parallelism in random access machines," </title> <booktitle> Proc. 10th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1978, </year> <pages> pp. 114-118. </pages>
Reference-contexts: We have just established that we can determine feasibility in T = O ((log m+log 2 n) log 2 n) parallel time using P = mn O (log n) write parallel RAM. Using standard simulation relations between parallel models of computation and between parallel time and sequential space <ref> [3, 9, 13, 20] </ref>, this implies that feasibility can be determined by a poly-log space-bounded deterministic Turing machine. This suggests that the problem might not be P-complete. 5.
Reference: [10] <author> L. M. Goldschlager, </author> <title> "Synchronous parallel computation," </title> <type> Technical Report No. 114, </type> <institution> Department of Computer Science, University of Toronto, </institution> <month> December </month> <year> 1977. </year>
Reference: [11] <author> L. M. Goldschlager, R. A. Shaw and J. </author> <title> Staples, "The maximum flow problem is log space complete for P," </title> <note> Theoretical Computer Science 21 (1982) 105-111. </note>
Reference-contexts: The problem of finding the minimum value of a general linear function subject to linear inequalities with at most two variables per inequality is P-complete. Proof: The proof follows from the result that the problem of finding the value of the maximum flow through a capacitated network is P-complete <ref> [11] </ref>.
Reference: [12] <author> D. Helmbold and E. Mayr, </author> <title> "Fast scheduling problems on parallel computers," </title> <type> Report No. </type> <institution> STAN-CS-84-1025, Computer Science Department, Stanford University, </institution> <year> 1984. </year>
Reference-contexts: Proposition 1.2. PROPAGATION is P-complete. Proof: The proposition follows from the result by Helmbold and Mayr <ref> [12] </ref> that the 2-processor list scheduling problem is P-complete.
Reference: [13] <author> R. M. Karp and V. Ramachandran, </author> <title> "Parallel algorithms for shared memory machines," </title> <booktitle> in: Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, ed., </editor> <publisher> North-Holland, </publisher> <year> 1988, </year> <note> to appear. </note>
Reference-contexts: We define I xx to be the identity polygon, i.e., I = f (x; x) j x 2 Rg. This algorithm for deciding feasibility begins by using an algorithm analogous to the standard parallel transitive closure or shortest path algorithms (see <ref> [13] </ref> for more information about such algorithms). It is interesting to note that the two operations " and ffi do not form a closed semiring in the sense defined in [1]. <p> We have just established that we can determine feasibility in T = O ((log m+log 2 n) log 2 n) parallel time using P = mn O (log n) write parallel RAM. Using standard simulation relations between parallel models of computation and between parallel time and sequential space <ref> [3, 9, 13, 20] </ref>, this implies that feasibility can be determined by a poly-log space-bounded deterministic Turing machine. This suggests that the problem might not be P-complete. 5.
Reference: [14] <author> L. G. Khachiyan, </author> <title> "A polynomial algorithm in linear programming," </title> <journal> Soviet Math. Dokl. </journal> <month> 20 </month> <year> (1979) </year> <month> 191-194. </month>
Reference-contexts: 1. Introduction Dobkin, Lipton and Reiss [7] first showed that the general linear programming problem was (log-space) hard for P. Combined with Khachiyan's deep result <ref> [14] </ref> that the problem is in P, this establishes that the problem is P-complete (that is, log-space complete for fl An earlier version of this paper appeared in the Proceedings of the 18th Annual Symposium on Theory of Computing, May 1986, pp. 196-205. y Department of Information and Computer Science, University
Reference: [15] <author> N. Megiddo, </author> <title> "Towards a genuinely polynomial algorithm for linear programming," </title> <note> SIAM Journal on Computing 12 (1983) 347-353. </note>
Reference-contexts: Supported by NSF under Grant ECS-8404866, by Joint Services Electronics Program under Grant N00014-84-CO149 and by an IBM Faculty Development award. 1 P). A popular specialization of the general linear programming problem is the problem of solving linear inequalities with at most two variables per inequality (see <ref> [15] </ref> and the references thereof). It is shown in [15] that a system of m linear inequalities in n variables (but at most two nonzero coefficients per inequality) can be solved in O (mn 3 log m) arithmetic operations and comparisons over any ordered field. <p> A popular specialization of the general linear programming problem is the problem of solving linear inequalities with at most two variables per inequality (see <ref> [15] </ref> and the references thereof). It is shown in [15] that a system of m linear inequalities in n variables (but at most two nonzero coefficients per inequality) can be solved in O (mn 3 log m) arithmetic operations and comparisons over any ordered field. <p> polynomial time solution." Thus the present status of linear programming with two variables per inequality seems to be rather unusual, particularly since it is known to be solvable in polynomial time (even if we allow that inputs are arbitrary reals and the time bound must be independent of these values <ref> [15] </ref>). Acknowledgment. This work was done while the authors were at Mathematical Sciences Research Institute, Berkeley, California.
Reference: [16] <author> N. Megiddo, </author> <title> "Applying parallel computation algorithms in the design of serial algorithms," </title> <journal> J. Assoc. Comput. Mach. </journal> <month> 30 </month> <year> (1983) </year> <month> 852-865. </month>
Reference-contexts: In the context of parallel computation this approach does not provide a poly-log algorithm since the number of queries during the search is linear in the length of the binary representation of the input. We can use here a technique presented in <ref> [16] </ref> to obtain a poly-log algorithm for finding optimum solutions over any ordered field. Here is a sketch of the method; see [16] for more detail. <p> We can use here a technique presented in <ref> [16] </ref> to obtain a poly-log algorithm for finding optimum solutions over any ordered field. Here is a sketch of the method; see [16] for more detail.
Reference: [17] <author> C. G. Nelson, </author> <title> An n O(log n) algorithm for the two two-variable-per-constraint linear programming satisfiability problem," </title> <type> Report No. </type> <institution> STAN-CS-78-689, Department of Computer Science, Stanford University, </institution> <month> November </month> <year> 1978. </year>
Reference-contexts: Deciding feasibility is the core of our algorithm. This is accomplished by computing the projections of the set of feasible solutions onto the individual coordinate axes. Using a parallelization of the sequential algorithm of <ref> [17] </ref>, we will compute for each variable x an interval [x low ; x high ], 1 x low x high 1, (possibly empty) so that for every x 0 2 [x low ; x high ] there is a solution to the system of inequalities with x = x 0 <p> Finally, we show how to optimize a linear function with at most two nonzero coefficients subject to such systems of inequalities. 3 2. Preliminaries Two characterizations of feasibility of linear inequalities with at most two variables per inequality were given by Nelson <ref> [17] </ref> and Shostak [19]. Our algorithm is a parallelization of the algorithm in Nelson [17], but our exposition will also make use of the characterization of Shostak [19] and further results by Aspvall and Shiloach [2] which we now describe. 1 A key idea in these papers is the observation that <p> Preliminaries Two characterizations of feasibility of linear inequalities with at most two variables per inequality were given by Nelson <ref> [17] </ref> and Shostak [19]. Our algorithm is a parallelization of the algorithm in Nelson [17], but our exposition will also make use of the characterization of Shostak [19] and further results by Aspvall and Shiloach [2] which we now describe. 1 A key idea in these papers is the observation that one can combine inequalities to deduce new inequalities. <p> One further idea is needed to produce a characterization. The closure G 0 of G is the multigraph we obtain by adding to G all of the bounds which are resultants of simple cycles. 1 The correctness of our feasibility test follows directly from the theorems of <ref> [17] </ref>, but the presentation we have chosen enables us to depend only on results appearing in journals. 4 Theorem 2.1 (Shostak [19]) : The original system G is infeasible if and only if some simple loop in the closure G 0 has a resultant which is a contradiction. 3. <p> The algorithm of Nelson <ref> [17] </ref> made use of two operations on polygons, namely intersection and composition. <p> g: The composition P zx of two polygons P zy and P yx is P zx = P zy ffi P yx = f (z; x) j 9y 2 R such that (z; y) 2 P zy and (y; x) 2 P yx g: In other words, as noted in <ref> [17] </ref>, P zy ffi P yx is the projection onto R zx of the intersection of the cylinders with bases P zy and P yx . We now describe the implementation of these two operations. <p> In fact, then the entire feasibility checking procedure becomes the CheckFeasibility procedure shown here. This is nearly the same as the algorithm of <ref> [17] </ref>, and another proof of correctness can be found there. Let the total number of edges in all polygons constructed during the algorithm be E. As in the sequential algorithm of [17], the polygons Q xy are computed in O (log n) stages, 9 and we have E = mn O <p> This is nearly the same as the algorithm of <ref> [17] </ref>, and another proof of correctness can be found there. Let the total number of edges in all polygons constructed during the algorithm be E. As in the sequential algorithm of [17], the polygons Q xy are computed in O (log n) stages, 9 and we have E = mn O (log n) . <p> Directions for further work It is interesting to ask whether the algorithms we have described in Sections 4, 5, and 6 can ever in fact require more than polynomially many processors. This is essentially the same as the question asked in <ref> [17] </ref> of whether the algorithm of [17] can require more than polynomial time. More generally, resolving whether the linear programming problem with two variables per inequality lies in NC seems like a very interesting question. <p> Directions for further work It is interesting to ask whether the algorithms we have described in Sections 4, 5, and 6 can ever in fact require more than polynomially many processors. This is essentially the same as the question asked in <ref> [17] </ref> of whether the algorithm of [17] can require more than polynomial time. More generally, resolving whether the linear programming problem with two variables per inequality lies in NC seems like a very interesting question.
Reference: [18] <author> N. Robertson and P. D. Seymour, </author> <title> "Graph width and well-quasi-ordering: a survey," Progress in Graph Theory, </title> <publisher> Academic Press Canada, </publisher> <year> 1984, </year> <pages> pp. 399-406. </pages>
Reference-contexts: In the latter case we obtain a poly-log algorithm with mn O (log n) processors for computing fl over any ordered field. Once fl is known, we can solve the system S 0 with = fl . 7. Bounded tree-width Robertson and Seymour <ref> [18] </ref> introduced the notion of the tree-width of a graph. This notion lends itself via the constraints graph to systems of linear inequalities with at most two variables per inequality. Definition 7.1.
Reference: [19] <author> R. Shostak, </author> <title> "Deciding linear inequalities by computing loop residues," </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 28 (1981) 769-779. </volume> <pages> 15 </pages>
Reference-contexts: Finally, we show how to optimize a linear function with at most two nonzero coefficients subject to such systems of inequalities. 3 2. Preliminaries Two characterizations of feasibility of linear inequalities with at most two variables per inequality were given by Nelson [17] and Shostak <ref> [19] </ref>. Our algorithm is a parallelization of the algorithm in Nelson [17], but our exposition will also make use of the characterization of Shostak [19] and further results by Aspvall and Shiloach [2] which we now describe. 1 A key idea in these papers is the observation that one can combine <p> Preliminaries Two characterizations of feasibility of linear inequalities with at most two variables per inequality were given by Nelson [17] and Shostak <ref> [19] </ref>. Our algorithm is a parallelization of the algorithm in Nelson [17], but our exposition will also make use of the characterization of Shostak [19] and further results by Aspvall and Shiloach [2] which we now describe. 1 A key idea in these papers is the observation that one can combine inequalities to deduce new inequalities. For example, suppose we are given x + 2y 3 and y + 3z 4. <p> To take care of inequalities involving only a single variable, such as x 4, <ref> [19] </ref> also added a dummy vertex v 0 corresponding to a new variable which can only occur with coefficient 0; an edge representing an inequality involving only one variable, say x, runs between x and v 0 . <p> we obtain by adding to G all of the bounds which are resultants of simple cycles. 1 The correctness of our feasibility test follows directly from the theorems of [17], but the presentation we have chosen enables us to depend only on results appearing in journals. 4 Theorem 2.1 (Shostak <ref> [19] </ref>) : The original system G is infeasible if and only if some simple loop in the closure G 0 has a resultant which is a contradiction. 3. Operations on polygons For parallel computation we will want to be able to manipulate many bounds simultaneously.
Reference: [20] <author> L. Stockmeyer and U. Vishkin, </author> <title> "Simulation of parallel random access machines by circuits," </title> <journal> SIAM J. Comput. </journal> <volume> 13 (1984) 409-422. </volume> <pages> 16 </pages>
Reference-contexts: We have just established that we can determine feasibility in T = O ((log m+log 2 n) log 2 n) parallel time using P = mn O (log n) write parallel RAM. Using standard simulation relations between parallel models of computation and between parallel time and sequential space <ref> [3, 9, 13, 20] </ref>, this implies that feasibility can be determined by a poly-log space-bounded deterministic Turing machine. This suggests that the problem might not be P-complete. 5.
References-found: 21

