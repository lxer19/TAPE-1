URL: http://www.cs.wisc.edu/~jussi/icde96.ps.gz
Refering-URL: http://www.cs.wisc.edu/~jussi/jussi.html
Root-URL: 
Email: daford@almaden.ibm.com jussi@cs.wisc.edu  
Title: A Log-Structured Organization for Tertiary Storage  
Author: Daniel A. Ford Jussi Myllymaki 
Address: San Jose, CA 95120-6099 Madison, WI 53706  
Affiliation: Department of Computer Science Computer Sciences Department IBM Almaden Research Center University of Wisconsin-Madison  
Abstract: We present the design of a log-structured tertiary storage system (LTS). The advantage of this approach is that it allows the system to hide the details of jukebox robotics and media characteristics behind a uniform, random access, block-oriented interface. It also allows the system to avoid media mount operations for writes, giving write performance similar to that of secondary storage. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> John K. Ousterhout and F. Douglis. </author> <title> Beating the I/O bottleneck: A case for log-structured file systems. </title> <journal> Oper. Syst. Rev., </journal> <volume> 23(1) </volume> <pages> 11-27, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: In Section 5, we discuss garbage collection strategies. In Section 6, we examine write and read performance. 2 Related Work The idea of a log-structured file system (LFS) for secondary storage was first suggested by Ousterhout and Douglis <ref> [1] </ref>. They observed that large main-memory caches tended to reduce the number of reads more than writes, causing I/O traffic to become write dominated. The log organization, found in database management systems, inspired a technique for implementing a write-optimized file system that would compensate for this imbalance.
Reference: [2] <author> Mendel Rosenblum and John K. Ousterhout. </author> <title> The design and implementation of a log-structured file system. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 10(4) </volume> <pages> 26-52, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: The log organization, found in database management systems, inspired a technique for implementing a write-optimized file system that would compensate for this imbalance. The design and implementation of an experimental LFS, the Sprite LFS, was described by Rosenblum and Ousterhout in <ref> [2] </ref>. The design was later improved and integrated [3] with the BSD Fast File System (FFS) [4] implementation and is referred to as 4.4BSD UNIX LFS or simply BSD LFS in this paper. <p> Initial performance analyses indicated that LFS provided better write performance than conventional file systems and comparable read performance <ref> [2] </ref>. Subsequent work re-evaluated LFS and concluded that, with garbage collection, the performance of LFS on secondary storage is only comparable to conventional file systems [5, 6, 7] With transaction processing workloads, in particular, the throughput of LFS is lower than expected [8]. <p> The garbage collection process can consider the age of segments and the amount of reclaimable space to determine which media to mount and which segments to clean <ref> [2] </ref>. and writing block 6. block 0. 3.1 Example We present a simple example of a log-structured tertiary storage system that illustrates the characteristic features of the architecture and its operation. <p> As with the garbage collector for BSD LFS, active blocks are rewritten to the end of the log [3]. If a system has several drives, it can perform garbage collection on more than one media unit concurrently. An analysis of a cost-benefit scheme based on segment age <ref> [2] </ref> has shown that it is important to distinguish garbage in hot segments from that in cold segments. Data in hot segments is updated frequently and garbage will accumulate in such segments faster than in cold segments.
Reference: [3] <author> Margo Seltzer, Keith Bostic, Marshall Kirk McKusick, and Carl Staelin. </author> <title> The implementation of a log-structured file system for UNIX. </title> <booktitle> In Proc. Winter USENIX 1993, </booktitle> <pages> pages 307-326, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: The log organization, found in database management systems, inspired a technique for implementing a write-optimized file system that would compensate for this imbalance. The design and implementation of an experimental LFS, the Sprite LFS, was described by Rosenblum and Ousterhout in [2]. The design was later improved and integrated <ref> [3] </ref> with the BSD Fast File System (FFS) [4] implementation and is referred to as 4.4BSD UNIX LFS or simply BSD LFS in this paper. Initial performance analyses indicated that LFS provided better write performance than conventional file systems and comparable read performance [2]. <p> Once a segment has been selected, the IMT and AMT structures are consulted to determine which blocks in that segment are valid. As with the garbage collector for BSD LFS, active blocks are rewritten to the end of the log <ref> [3] </ref>. If a system has several drives, it can perform garbage collection on more than one media unit concurrently. An analysis of a cost-benefit scheme based on segment age [2] has shown that it is important to distinguish garbage in hot segments from that in cold segments.
Reference: [4] <author> Marshall Kirk McKusick, William N. Joy, Samuel J. Le*er, and Robert S. Fabry. </author> <title> A fast file system for UNIX. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 2(3) </volume> <pages> 181-197, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: The design and implementation of an experimental LFS, the Sprite LFS, was described by Rosenblum and Ousterhout in [2]. The design was later improved and integrated [3] with the BSD Fast File System (FFS) <ref> [4] </ref> implementation and is referred to as 4.4BSD UNIX LFS or simply BSD LFS in this paper. Initial performance analyses indicated that LFS provided better write performance than conventional file systems and comparable read performance [2].
Reference: [5] <author> Margo I. Seltzer. </author> <title> File System Performance and Transaction Support. </title> <type> PhD thesis, </type> <institution> Univ. of Cali-fornia at Berkeley, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: Initial performance analyses indicated that LFS provided better write performance than conventional file systems and comparable read performance [2]. Subsequent work re-evaluated LFS and concluded that, with garbage collection, the performance of LFS on secondary storage is only comparable to conventional file systems <ref> [5, 6, 7] </ref> With transaction processing workloads, in particular, the throughput of LFS is lower than expected [8]. HighLight [9], a tertiary storage extension of BSD LFS, is a first attempt in combining LFS with tertiary storage.
Reference: [6] <author> B. McNutt. </author> <title> Background data movement in a log-structured disk subsystem. </title> <journal> IBM J. Res. Develop., </journal> <volume> 38(1) </volume> <pages> 47-58, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Initial performance analyses indicated that LFS provided better write performance than conventional file systems and comparable read performance [2]. Subsequent work re-evaluated LFS and concluded that, with garbage collection, the performance of LFS on secondary storage is only comparable to conventional file systems <ref> [5, 6, 7] </ref> With transaction processing workloads, in particular, the throughput of LFS is lower than expected [8]. HighLight [9], a tertiary storage extension of BSD LFS, is a first attempt in combining LFS with tertiary storage.
Reference: [7] <author> John T. Robinson and Peter A. Franaszek. </author> <title> Analysis of reorganization overhead in log-structured file systems. </title> <booktitle> In Proc. IEEE Data Engineering, </booktitle> <pages> pages 102-110, </pages> <address> Houston, TX, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Initial performance analyses indicated that LFS provided better write performance than conventional file systems and comparable read performance [2]. Subsequent work re-evaluated LFS and concluded that, with garbage collection, the performance of LFS on secondary storage is only comparable to conventional file systems <ref> [5, 6, 7] </ref> With transaction processing workloads, in particular, the throughput of LFS is lower than expected [8]. HighLight [9], a tertiary storage extension of BSD LFS, is a first attempt in combining LFS with tertiary storage.
Reference: [8] <author> Margo I. Seltzer. </author> <title> Transaction support in a log-structured file system. </title> <booktitle> In Proc. IEEE Data Engineering, </booktitle> <pages> pages 503-510, </pages> <address> Vienna, Austria, </address> <month> Febru-ary </month> <year> 1993. </year>
Reference-contexts: Subsequent work re-evaluated LFS and concluded that, with garbage collection, the performance of LFS on secondary storage is only comparable to conventional file systems [5, 6, 7] With transaction processing workloads, in particular, the throughput of LFS is lower than expected <ref> [8] </ref>. HighLight [9], a tertiary storage extension of BSD LFS, is a first attempt in combining LFS with tertiary storage. HighLight migrates segments of user data and meta-data from secondary storage to tertiary storage.
Reference: [9] <author> John T. Kohl, Carl Staelin, and Michael Stone-braker. HighLight: </author> <title> Using a log-structured file system for tertiary storage management. </title> <booktitle> In Proc. Winter USENIX 1993, </booktitle> <pages> pages 435-447, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Subsequent work re-evaluated LFS and concluded that, with garbage collection, the performance of LFS on secondary storage is only comparable to conventional file systems [5, 6, 7] With transaction processing workloads, in particular, the throughput of LFS is lower than expected [8]. HighLight <ref> [9] </ref>, a tertiary storage extension of BSD LFS, is a first attempt in combining LFS with tertiary storage. HighLight migrates segments of user data and meta-data from secondary storage to tertiary storage.
Reference: [10] <author> N. Beckmann, H. Kriege, R. Schneider, and B. Seeger. </author> <title> The R fl -tree: An efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <pages> pages 322-331, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: If the address space is mostly unused or is partitioned into moderate or even small physically contiguous fragments, a better alternative is to use an R fl -tree-like structure <ref> [10] </ref>. With such an organization, the size of the AMT is reduced by roughly a factor equal to the average contiguously stored fragment of the logical address space.
References-found: 10

