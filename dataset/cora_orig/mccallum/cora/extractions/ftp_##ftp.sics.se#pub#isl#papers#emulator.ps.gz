URL: ftp://ftp.sics.se/pub/isl/papers/emulator.ps.gz
Refering-URL: http://www.sics.se/isl/sicstus2.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The SICStus Emulator  
Author: Mats Carlsson 
Note: Contents  
Date: February 12, 1996  
Address: Box 1263, S-164 28, KISTA, Sweden  
Affiliation: Swedish Institute of Computer Science  
Pubnum: SICS technical report T91:15  
Abstract: This report documents internal details of Industrial SICStus Prolog, developed at the Logic Programming Laboratory of SICS. The development was funded by Ericsson Telecom AB, NobelTech Systems AB, Infologics AB and Televerket under the IT4-program. The implementation was done on Sun-3 and Sun-4 workstations. It has proved portable to a wide range of byte-addressed 32-bit computers running Berkeley Unix. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stefan Andersson. </author> <title> Implementing a Module System for SICStus Prolog. </title> <type> SICS Technical Report T91:08, </type> <institution> Swedish Institute of Computer Science, 1991. diploma work for Civil Engineer degree at the Royal Institute of Technology, Stockholm. </institution>
Reference-contexts: These are currently not documented. The most recent account of the profiling mechanism is [12]. 43 8.4 Support for Modules This amounts to treatment of module declarations, meta expansion of goals, and special treatment of Module:Goal goals. More details are available elsewhere <ref> [1] </ref>. 44 A Emulator Macros The emulator and runtime system code makes extensive use of various macros. The purpose of these is partly to isolate design decisions into macro definitions that implement the decisions, partly to make the bulk of the code independent of details of the storage model.
Reference: [2] <author> K. Appleby, M. Carlsson, S. Haridi, and D. Sahlin. </author> <title> Garbage Collection for Prolog based on WAM. </title> <journal> Communications of the ACM, </journal> <volume> 31(6) </volume> <pages> 719-741, </pages> <year> 1988. </year>
Reference-contexts: All other argument registers are preserved. if (! Name (w-&gt;term [i],w->term [j],w-&gt;term [k])) Fail; retry instance X 2 is a pointer to a dynamic clause. If there are more alternatives a retry operation is done, setting both X 2 and w-&gt;node->term <ref> [2] </ref> to point at the next alternative, otherwise a trust operation is done, popping the choicepoint and adjusting the shadow registers. Finally the current instance is emulated. continue This instruction is the continuation of a condition handler which was invoked to take care of a condition that was raised. <p> most recently loaded bytecode sequence. reloc call absolute (I,J,Offset) A CALL instruction to the Ith clause of the current predicate, offset by O, is inserted at the chain starting at Offset relative to the most recently loaded bytecode sequence. 7 The Garbage Collector The garbage collection algorithms are documented elsewhere <ref> [2, 7] </ref>. Those accounts are valid with only minor alterations. These will be discussed in this section. 7.1 Variable Shunting As a first step in garbage collection, variable shunting [7] is performed, so as to free up as much heap space as possible for garbage collection.
Reference: [3] <author> Kent Boortz. Sicstus maskinkodskompilering. </author> <type> SICS Technical Report T91:13, </type> <institution> Swedish Institute of Computer Science, </institution> <year> 1991. </year> <note> (in Swedish). </note>
Reference-contexts: For recursive clauses, the compiler also has to ensure that the environment is fully initialized before any such instruction is executed. 8.2 Support for Native Code Back-Ends The native code back-ends are described in more detail in <ref> [3] </ref>. However, the intermediate instruction set has been modified somewhat to make life easier for the back-ends, by introducing a few new instructions to support code generation of nested structures. In the table below, the two columns indicate respectively the new instructions and their equivalents.
Reference: [4] <author> Mats Carlsson. </author> <title> On the Efficiency of Optimizing Shallow Backtracking in Compiled Prolog. </title> <booktitle> In Sixth International Conference on Logic Programming, </booktitle> <pages> pages 3-16. </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: See also [8] for the implications on the emulator and compiler by shallow backtracking optimizations <ref> [4] </ref>. The account in [5] is up to date with only minor alterations. These will be discussed in this section. 8.1 Support for Big Integers and Floats Since big integers and floats reside on the heap, some restrictions for the compiled code apply. Four new instructions were added.
Reference: [5] <author> Mats Carlsson. </author> <title> A Prolog Compiler and its Extension for Or-Parallelism. </title> <institution> SICS Research Report R90006, Swedish Institute of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: The upward compaction phase also installs number headers at the beginning of each block of garbage, so that the downward compaction phase can leap over such blocks and run in time proportional to the amount of non-garbage. 42 8 The Compiler The compiler algorithms are documented elsewhere <ref> [5] </ref>. See also [8] for the implications on the emulator and compiler by shallow backtracking optimizations [4]. The account in [5] is up to date with only minor alterations. <p> that the downward compaction phase can leap over such blocks and run in time proportional to the amount of non-garbage. 42 8 The Compiler The compiler algorithms are documented elsewhere <ref> [5] </ref>. See also [8] for the implications on the emulator and compiler by shallow backtracking optimizations [4]. The account in [5] is up to date with only minor alterations. These will be discussed in this section. 8.1 Support for Big Integers and Floats Since big integers and floats reside on the heap, some restrictions for the compiled code apply. Four new instructions were added.
Reference: [6] <author> Mats Carlsson. </author> <title> Boolean Constraints in SICStus Prolog. </title> <type> SICS Technical Report T91:09, </type> <institution> Swedish Institute of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: For 25 instance, a goal prompt (U,U) is legal, causing no change of state, just unifying U with the current state. Certain predicates were introduced to support the Boolean constraint package or the external storage facility and are documented elsewhere <ref> [6, 16] </ref>.
Reference: [7] <author> Mats Carlsson and Dan Sahlin. </author> <title> Variable Shunting for the WAM. </title> <institution> SICS Research Report R91:07, Swedish Institute of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: most recently loaded bytecode sequence. reloc call absolute (I,J,Offset) A CALL instruction to the Ith clause of the current predicate, offset by O, is inserted at the chain starting at Offset relative to the most recently loaded bytecode sequence. 7 The Garbage Collector The garbage collection algorithms are documented elsewhere <ref> [2, 7] </ref>. Those accounts are valid with only minor alterations. These will be discussed in this section. 7.1 Variable Shunting As a first step in garbage collection, variable shunting [7] is performed, so as to free up as much heap space as possible for garbage collection. <p> Those accounts are valid with only minor alterations. These will be discussed in this section. 7.1 Variable Shunting As a first step in garbage collection, variable shunting <ref> [7] </ref> is performed, so as to free up as much heap space as possible for garbage collection. As a side-effect, all unbound constrained variables found while shunting variables are linked into a chain.
Reference: [8] <author> Mats Carlsson and Peter Szeredi. </author> <title> The Aurora Abstract Machine and its Emulator. </title> <institution> SICS Research Report R90005, Swedish Institute of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: See also <ref> [8] </ref> for the implications on the emulator and compiler by shallow backtracking optimizations [4]. The account in [5] is up to date with only minor alterations.
Reference: [9] <author> Mats Carlsson, Johan Widen, Stefan Andersson, Kent Boortz, Hans Nilsson, Thomas Sjoland, and Johan Andersson. </author> <title> Industrial SICStus Prolog User's Manual. </title> <type> SICS Technical Report T91:11, </type> <institution> Swedish Institute of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: Notably, modules and exception raising and handling and coroutining primitives are part of the language. The full language is defined in <ref> [9] </ref>. 2.2 The Implementation The implementation is based on Warren's abstract machine (WAM) [18] with significant extensions. The implementation languages are C and Prolog plus a small set of support routines in assembler for native code predicates. <p> (?Atom,?CharList) See the User's Manual. $atom mode (+Atom,-Context) Depending on Atom's printname, Context unified with: 0 if Atom is a sequence of alphanumeric characters (including ), starting with a lower case letter. 4 if Atom is one of ! ; [] --. 2 if Atom is a sequence of symbol-char <ref> [9] </ref> except the atom . and atoms beginning with /*. 1 if Atom is anything else, in which case it needs quoting. $bind Is (+Socket,-PortOut) This "binds" Socket to the Internet port PortOut. $bind U (+Socket,+Name) This "binds" Socket to the socket name Name. $block (+Decl) Decl is a block declaration <p> See the User's Manual. $getch (-C,-Type) The next non-whitespace character from the current input stream is C and its type Type is 10 for lowercase letters, 20 for uppercase letters, 30 for digits, 40 for symbol-char <ref> [9] </ref>, and 50 for other characters. $getch0 (-C,-Type) The next character from the current input stream is C and its type Type is 0 for whitespace or 10-50 as above. $input (?Old,?New) Changes the current input stream from Old to New.
Reference: [10] <author> B. Demoen, A. Marien, and A. Callebaut. </author> <title> Indexing in Prolog. </title> <booktitle> In North American Conference on Logic Programming, </booktitle> <pages> pages 1001-1012. </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Interpreted clauses are represented as if there were a compiled predicate clause/2, to speed up database retrievals. Notably, interpreted predicates are indexed. The indexing method is described in <ref> [10] </ref>. Also, the DECsystem-10 Prolog predicates recorda/3, recordz/3, recorded/3 are simulated by using dynamic clauses of prolog:$current instance/2. Emulated predicates, simplifying bootstrapping and stressing memory efficiency and fast compilation, are available by compiling Prolog source code to a bytecoded abstract instruction set.
Reference: [11] <author> Bart Demoen. </author> <title> A 20 0 implementation of catch and throw in WAM. </title> <type> CW Report 96, </type> <institution> Katholieke Universiteit, Leuven, </institution> <year> 1990. </year>
Reference-contexts: The global variable catch cp is assigned the same value. This support the exception handling mechanism which is adapted after <ref> [11] </ref>. $instance (?Head,?Body,+Instance) Instance is an integer tagged struct instance record. Head and Body are matched against the instance. This is implemented by tail-recursively calling the bytecode program of the instance. $instance to root (+Instance,-Root) Instance is an integer tagged struct instance record. <p> This option suppresses reading the ~/.sicstusrc init upon reinitialization. repeat See the User's Manual. $reset block (-Chpt) Chpt is unified with an integer tagged pointer to the choicepoint currently stored in the global variable catch cp. This support the exception handling mechanism which is adapted after <ref> [11] </ref>. $reset counters (+Ptr,+Count) Ptr is a vector of Count profiling counters. The counters are set to zero. $restore (+Filename) Filename is the name of a file containing a dumped state. We assume that the only open files are stdin, stdout and stderr. <p> Both are trace or fail or error. $unwind stack The current choicepoint is set to the value which is currently stored in the global variable catch cp as an integer tagged pointer. This support the exception handling mechanism which is adapted after <ref> [11] </ref>. $write (?Term) $write (+Stream,?Term) The principal functor of the term Term is written on Stream, which defaults to the current output stream, with quoting. 6 Qload Instruction Set In order to speed the transfer of terms between core and files, a special storage format, "Qload", has been devised.
Reference: [12] <author> Michael M. Gorlick and Carl F. Kesselman. </author> <title> Timing Prolog programs without Clocks. </title> <booktitle> In Symposium on Logic Programming, </booktitle> <pages> pages 426-432. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1987. </year>
Reference-contexts: These are currently not documented. The most recent account of the profiling mechanism is <ref> [12] </ref>. 43 8.4 Support for Modules This amounts to treatment of module declarations, meta expansion of goals, and special treatment of Module:Goal goals. More details are available elsewhere [1]. 44 A Emulator Macros The emulator and runtime system code makes extensive use of various macros.
Reference: [13] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming|Seminumerical Algorithms, </booktitle> <volume> volume 2. </volume> <publisher> Addison-Wesley, </publisher> <address> 2 edition, </address> <year> 1980. </year> <note> section 4.3.1. </note>
Reference-contexts: For floats and big integers, the object consists of 2 + n words where the first and last words contain a header and the remaining words contain the binary representation of the number. The algorithms operating on big integers are essentially Knuth's <ref> [13] </ref>. value A small integer i is represented as 0x88000000 + 4i. index An 18-bit quantity uniquely defining an atom (index into an internal table). arity index For a functor a=n, the high 8 bits contain the arity n, and the low 18 bits hold the atom index for the atom
Reference: [14] <author> T. Lindholm and R. A. O'Keefe. </author> <title> Efficient Implementation of a Defensible Semantics for Dynamic PROLOG Code. </title> <booktitle> In Fourth International Conference on Logic Programming, </booktitle> <pages> pages 21-39. </pages> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: The semantics for an invocation of a dynamic predicate is that it is unaffected by asserts and retracts until that invocation has finitely failed. To support the proper semantics of calls and updates, two timestamps are associated with each instance. The implementation is based on a scheme described in <ref> [14] </ref>. The actual implementation differs somewhat from the original scheme. Details are given in comments in the file objareas.c.
Reference: [15] <author> Lee Naish. </author> <title> Negation and Control in PROLOG. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Melbourne, </institution> <year> 1985. </year>
Reference-contexts: By writing all essential parts in C and Prolog and avoiding machine- specific features, reasonable portability has been achieved. * Compatibility. The Quintus dialect, recognized as the de facto industrial standard, is supported as a subset. Some features from modern Prologs such as NU-Prolog <ref> [15] </ref>, like coroutining primitives, have also been added. * Several execution levels. We provide three levels of execution: interpreted, supporting program debugging and dynamic database updates, emulated, simplifying bootstrapping and stressing memory efficiency and fast compilation, and native code, stressing fast execution.
Reference: [16] <author> Hans Nilsson. </author> <title> A Set of Predicates for Fast Reading and Writing in SICStus. </title> <type> SICS Technical Report T91:17, </type> <institution> ELLEMTEL Utvecklings AB, </institution> <year> 1991. </year>
Reference-contexts: For 25 instance, a goal prompt (U,U) is legal, causing no change of state, just unifying U with the current state. Certain predicates were introduced to support the Boolean constraint package or the external storage facility and are documented elsewhere <ref> [6, 16] </ref>.
Reference: [17] <institution> Quintus Prolog Reference Manual version 10, </institution> <year> 1987. </year>
Reference-contexts: Finally, Section B lists the actual bytecode representation used by the emulator. 2 Language and Implementation 2.1 The Language Industrial SICStus Prolog follows the mainstream Prolog tradition in terms of syntax and built-in predicates, and is largely compatible with DECsystem-10 Prolog and Quintus Prolog <ref> [17] </ref>. Notably, modules and exception raising and handling and coroutining primitives are part of the language. The full language is defined in [9]. 2.2 The Implementation The implementation is based on Warren's abstract machine (WAM) [18] with significant extensions.
Reference: [18] <author> David H. D. Warren. </author> <title> An Abstract Prolog Instruction Set. </title> <type> Technical Note 309, </type> <institution> SRI International, </institution> <year> 1983. </year> <month> 61 </month>
Reference-contexts: Notably, modules and exception raising and handling and coroutining primitives are part of the language. The full language is defined in [9]. 2.2 The Implementation The implementation is based on Warren's abstract machine (WAM) <ref> [18] </ref> with significant extensions. The implementation languages are C and Prolog plus a small set of support routines in assembler for native code predicates. Except for the native code part, the ambition is to make the implementation portable to BSD UNIX machines. The compilation modes are file-to-core and file-to-file.
References-found: 18

