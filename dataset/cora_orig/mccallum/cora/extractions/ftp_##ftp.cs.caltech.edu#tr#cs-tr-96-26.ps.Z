URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-96-26.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: The Mesh-Spectral Archetype  
Author: Greg Davis and Berna L. Massingill 
Abstract: A parallel program archetype [2] aids in the development of reliable, efficient parallel applications with common computation/communication structures by providing development methods and code libraries specific to the structure. This document presents an archetype for mesh-spectral computations. It describes the common structure captured by the archetype abstraction, discusses a parallelization strategy for such computations, documents our code library to support this parallelization strategy, and presents a collection of tutorial example application pro grams.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Argonne National Laboratory. The Fortran M programming language. </institution> <note> Available via http://www.mcs.anl.gov/fortran-m/index.html. </note>
Reference-contexts: This library facilitates more rapid development of applications. The current implementation is based on Fortran 77 (including a few of the most widely-supported extensions) and uses either Fortran M <ref> [4, 1] </ref> or MPI [6] for parallelism. Fortran M may be obtained via anonymous FTP from Argonne National Labs; many implementations of MPI are available.
Reference: [2] <author> K. M. Chandy. </author> <title> Concurrent program archetypes. </title> <booktitle> In Proceedings of the Scalable Parallel Library Conference, </booktitle> <year> 1994. </year>
Reference: [3] <author> G. Davis. </author> <title> Spectral methods for scientific computing. </title> <note> Available via http://www.etext.caltech.edu/Implementations/Spectral/spectral.html. </note>
Reference-contexts: 1 Introduction The mesh-spectral archetype is a combination and generalization of the mesh [5] and spectral <ref> [3] </ref> archetypes. In this section, we describe the data structures and operations on which this archetype is based and a strategy for parallelizing it. 1.1 Mesh-spectral computations In a mesh-spectral computation: * Data is based on 3-dimensional grids (arrays). A computation may contain multiple grids of different dimensions. <p> The fourth method can also be used with the archetype, but we do not address specifics, since it is not portable. 8 1.3 Parallelizing sequential code Documentation for the mesh [5] and spectral <ref> [3] </ref> archetypes provides hints on parallelizing sequential code using the mesh and spectral archetypes respectively; the same methods can in many cases be applied to mesh-spectral computations as well. 2 Overview of the archetype implementation To support this archetype, we provide a library of high-level routines that encapsulate the details of
Reference: [4] <author> I. T. Foster and K. M. Chandy. </author> <title> FORTRAN M: A language for modular parallel programming. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 26(1) </volume> <pages> 24-35, </pages> <year> 1995. </year>
Reference-contexts: This library facilitates more rapid development of applications. The current implementation is based on Fortran 77 (including a few of the most widely-supported extensions) and uses either Fortran M <ref> [4, 1] </ref> or MPI [6] for parallelism. Fortran M may be obtained via anonymous FTP from Argonne National Labs; many implementations of MPI are available.
Reference: [5] <author> B. L. Massingill. </author> <title> The mesh archetype. </title> <type> Technical Report CS-TR-96-25, </type> <institution> California Institute of Technology, </institution> <year> 1996. </year> <note> Also available via http://www.etext.caltech.edu/Implementations/Mesh/meshdoc.ps or http://www.etext.caltech.edu/Implementations/Mesh/meshdoc.html. </note>
Reference-contexts: 1 Introduction The mesh-spectral archetype is a combination and generalization of the mesh <ref> [5] </ref> and spectral [3] archetypes. In this section, we describe the data structures and operations on which this archetype is based and a strategy for parallelizing it. 1.1 Mesh-spectral computations In a mesh-spectral computation: * Data is based on 3-dimensional grids (arrays). <p> The fourth method can also be used with the archetype, but we do not address specifics, since it is not portable. 8 1.3 Parallelizing sequential code Documentation for the mesh <ref> [5] </ref> and spectral [3] archetypes provides hints on parallelizing sequential code using the mesh and spectral archetypes respectively; the same methods can in many cases be applied to mesh-spectral computations as well. 2 Overview of the archetype implementation To support this archetype, we provide a library of high-level routines that encapsulate
Reference: [6] <author> Message Passing Interface Forum. </author> <title> MPI: A message-passing interface standard. </title> <journal> International Journal of Supercomputer Applications and High Performance Computing, </journal> <pages> 8(3-4), </pages> <year> 1994. </year>
Reference-contexts: This library facilitates more rapid development of applications. The current implementation is based on Fortran 77 (including a few of the most widely-supported extensions) and uses either Fortran M [4, 1] or MPI <ref> [6] </ref> for parallelism. Fortran M may be obtained via anonymous FTP from Argonne National Labs; many implementations of MPI are available.
Reference: [7] <author> W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T. Vetterling. </author> <title> Numerical Recipes. </title> <publisher> Cambridge University Press, </publisher> <year> 1986. </year>
Reference-contexts: This program performs a 2-dimensional FFT in place, as described in <ref> [7] </ref> and many other references.
Reference: [8] <author> E. F. Van de Velde. </author> <title> Concurrent Scientific Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 95 </month>
Reference-contexts: The reduction operates only over those processes over which grid ignum is distributed (over all processes if ignum is -1). The other procedures are analogous. The examples in x5.4 and x5.5 illustrate the use of these routines. 17 3.4.3 Generic recursive-doubling subroutine Recursive doubling, described in detail in <ref> [8] </ref>, is a form of reduction in which the reduction operation is not necessarily commutative. <p> This example is based on the discussion of the Poisson problem in <ref> [8] </ref>. <p> This example is a prototype for multigrid applications, based on the discussion of multigrid methods in <ref> [8] </ref>. <p> Execution of recursive doubling repeatedly combines values from "neighboring" processes (refer to <ref> [8] </ref>, for example, for a discussion of recursive doubling) using revproc. c------------------------------------------------------------- c c example of mesh/spectral archetype c c recursive doubling example: reverse arrays c c------------------------------------------------------------- c c main program c program main implicit none include 'arch_uparms.h' 90 include 'arch_parms.h' integer procs parameter (procs=4) processors (MAXPROCS) call spawn (procs) end
References-found: 8

