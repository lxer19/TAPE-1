URL: http://gaia.cs.umass.edu/~drubenst/publish/flairs.ps
Refering-URL: http://www-net.cs.umass.edu/~drubenst/main/vita.html
Root-URL: 
Email: fdrubenst, ljo, shlomog@cs.umass.edu  
Title: An Anytime Approach to Analyzing Software Systems  
Author: Dan Rubenstein, Leon Osterweil, and Shlomo Zilberstein 
Address: Amherst  
Affiliation: University of Massachusetts at  
Abstract: Proving that a software system satisfies its requirements is a costly process. This paper discusses the benefits and challenges of structuring the analysis of software as an anytime algorithm. We demonstrate that certain incremental approaches to event sequence analysis that produce partial results are anytime algorithms, and we show how these partial results can be used to optimize the time to complete the full analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> George S. Avrunin, Ugo A. Buy, James C. Corbett, Laura K. Dil-lon, and Jack C. Wiliden, </author> <title> Automated Analysis of Concurrent Systems with the Constrained Expression Toolset. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(11), </volume> <pages> pp. 1204-1222, </pages> <month> November, </month> <year> 1991. </year>
Reference-contexts: Later, methods were developed that gave the user of the analysis system the ability to choose the sequences that should be considered anomalous. With this approach, the user specifies the set of sequences as a quantified regular expression (QRE) <ref> [1] </ref>, [2], [4], [5]. Any sequence that is a member of the language described by the QRE is considered to be an allowable sequence. All other sequences are considered to be anomalous.
Reference: [2] <author> Matthew Dwyer and Lori Clarke, </author> <title> Data Flow Analysis for Verifying Properties of Concurrent Programs. </title> <booktitle> ACM SIGSOFT'94 Software Engineering Notes, Proceedings of the Second ACM Sigsoft Symposium on Foundations of Software Engineering, </booktitle> <volume> vol. 19, no. 5, </volume> <pages> pp. 62-75, </pages> <address> De-cember, </address> <year> 1994. </year>
Reference-contexts: Later, methods were developed that gave the user of the analysis system the ability to choose the sequences that should be considered anomalous. With this approach, the user specifies the set of sequences as a quantified regular expression (QRE) [1], <ref> [2] </ref>, [4], [5]. Any sequence that is a member of the language described by the QRE is considered to be an allowable sequence. All other sequences are considered to be anomalous. <p> Accuracy can be increased by adding constraints. A constraint tracks an aspect of the program, such as the value of a variable, and ensures that a path is not examined if it violates the constraint. In <ref> [2] </ref>, it is shown that constraints can also be represented as FSAs, which are referred to as constraint automata. A constraint automaton has a single non-accepting state, referred to as a violation state, that has no exiting transitions, and is entered as soon as a violation of the constraint occurs.
Reference: [3] <author> Matthew B. Dwyer, </author> <title> Data flow analysis for verifying correctness properties of concurrent programs. </title> <type> PhD Thesis, </type> <institution> University of Massachusetts, Amherst, </institution> <year> 1995. </year>
Reference-contexts: Performing an accurate analysis to verify a property about a program is often time consuming. Incremental analyses have been proposed as a way to reduce analysis time by incrementally performing conservative analyses with increasing accuracy <ref> [3] </ref>. An analysis is said to be conservative if the analysis never concludes that a property holds if the property does not indeed hold. However, it need not always succeed in concluding that the property holds, even when it actually does.
Reference: [4] <author> Kurt M. Olender and Leon J. Os-terweil, Cecil: </author> <title> A Sequencing Constraint Language for Automatic Static Analysis Generation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 16, No. 3, </volume> <month> March, </month> <year> 1990. </year>
Reference-contexts: Later, methods were developed that gave the user of the analysis system the ability to choose the sequences that should be considered anomalous. With this approach, the user specifies the set of sequences as a quantified regular expression (QRE) [1], [2], <ref> [4] </ref>, [5]. Any sequence that is a member of the language described by the QRE is considered to be an allowable sequence. All other sequences are considered to be anomalous.
Reference: [5] <author> Kurt M. Olender and Leon J. Osterweil, </author> <title> Interprocedural Static Analysis of Sequencing Constraints. </title> <journal> Transactions on Software Engineering and Methodology, </journal> <volume> Vol. 1, #1, </volume> <pages> pp. 21-52, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Later, methods were developed that gave the user of the analysis system the ability to choose the sequences that should be considered anomalous. With this approach, the user specifies the set of sequences as a quantified regular expression (QRE) [1], [2], [4], <ref> [5] </ref>. Any sequence that is a member of the language described by the QRE is considered to be an allowable sequence. All other sequences are considered to be anomalous.
Reference: [6] <author> Richard N. Taylor and Leon J. Os-terweil, </author> <title> Anomaly Detection in Concurrent Software by Static Data Flow Analysis. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> g(3), </volume> <pages> pp. 265-278, </pages> <month> May, </month> <year> 1980. </year>
Reference-contexts: Initially, analysis tools were constructed to detect anomalous sequences of events that were common to many programs, such as dead definition and undefined reference anomalies <ref> [6] </ref>. Later, methods were developed that gave the user of the analysis system the ability to choose the sequences that should be considered anomalous. With this approach, the user specifies the set of sequences as a quantified regular expression (QRE) [1], [2], [4], [5].
Reference: [7] <author> Shlomo Zilberstein, </author> <title> Using Anytime Algorithms in Intelligent Systems. </title> <journal> AI Magazine, </journal> <volume> 17(3), </volume> <pages> pp. 73-83, </pages> <month> Fall </month> <year> 1996. </year>
Reference-contexts: In this paper, we show how the accuracy of each analysis used in an incremental analysis can be measured such that the incremental analysis satisfies the properties of an anytime algorithm <ref> [7] </ref>. We also show that the intermediate results obtained from the incremental analysis can then be used to dynamically determine which analyses are to be performed next in order to improve the running time for the overall analysis and increase the chances of obtaining conclusive results of the overall analysis. <p> if some constraint automaton state in the tuple is a violation state. 3 Anytime Algorithms An anytime analysis incorporates a measure for the accuracy of the analysis, and a mechanism for selecting a sequence of analyses such that the measure varies in a monotonically, non-increasing (or nondecreasing), fashion over time <ref> [7] </ref>. It is also desirable for the measure to provide diminishing returns with time, where the change in accuracy decreases over time. Such a property guarantees that large gains in accuracy will occur in earlier increments of the analysis. <p> An analysis A is better than another analysis B if it runs in less time and produces a result with higher accuracy. In such cases, A is said to be dominant over B <ref> [7] </ref>.
Reference: [8] <author> Shlomo Zilberstein, </author> <title> Optimizing Decision Quality with Contract Algorithms, </title> <booktitle> 14th IJCAI, </booktitle> <pages> pp. 1576-1562, </pages> <address> Montreal, Canada, </address> <month> August </month> <year> 1995. </year>
Reference: [9] <author> M.S. Hecht, </author> <title> Flow Analysis of Computer Programs. </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: There are many methods available that allow one to detect anomalies that are represented as QREs. The results from this paper focus mainly on analyses that use data flow analysis <ref> [9] </ref>. 2.1 Data Flow Analysis of QREs In data flow analysis, a program is represented as a control flow graph (CFG), where each node represents a program execution unit, and directed edges represent flow of control between those units.
Reference: [10] <author> Leon J. Osterweil, </author> <title> Perpetually Testing Software. </title> <booktitle> Proceedings of the 9th International Software Quality Week, </booktitle> <year> 1996. </year>
Reference: [11] <author> Dan Rubenstein, AFLAVERS: </author> <title> An Anytime Approach to Analyzing Software Systems. </title> <type> Project Report, </type> <institution> University of Massachusetts at Amherst, </institution> <month> Fall, </month> <year> 1996. </year>
Reference-contexts: Hence, Y equals the total number of states in the product automaton, and X equals the number of non-accepting, non-violation states in the product automaton that at least one path through the CFG transitions to. We have shown in <ref> [11] </ref> that the inconclusiveness measure is monotonically non-increasing each time a 2 The number of paths through any graph with a finite number of nodes is always countable. constraint is added and an analysis is performed. We now provide a brief sketch of the proof.
References-found: 11

