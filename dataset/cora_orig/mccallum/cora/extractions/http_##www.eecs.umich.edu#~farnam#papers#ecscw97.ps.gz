URL: http://www.eecs.umich.edu/~farnam/papers/ecscw97.ps.gz
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.eecs.umich.edu
Email: E-mail: fhyongsop,rhall,aprakash,farnamg@eecs.umich.edu  
Title: Providing Flexible Services for Manag- ing Shared State in Collaborative Systems  
Author: Hyong Sop Shim, Robert W. Hall, Atul Prakash, and Farnam Jahanian 
Address: Ann Arbor, MI 48109-2122 USA  
Affiliation: Department of Electrical Engineering and Computer Science, University of Michigan,  
Abstract: To effectively collaborate in Internet environments, it is critical to efficiently manage the shared state of collaboration. However, the management of shared state is highly situational; different collaboration semantics require different measures tailored to their specific needs. Hence, providing a general set of services that meet the management requirements of varying collaboration situations is challenging. In this paper, we discuss our approach to providing such services. The services are made flexible by allowing collaborators to choose appropriate services based on the needs of their collaboration tools and specific characteristics of their shared state. We present the shared state management services provided by our Corona server that embodies our approach and report experience with its use. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. P. Birman and T. A. Joseph. </author> <title> Low-Cost Management of Replicated Data in Fault-Tolerant Distributed Systems. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 4(1) </volume> <pages> 54-70, </pages> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: Furthermore, a centralized service provider such as the Corona server can be made fault tolerant by having multiple replicas of the provider. There exist a number of well-known replication strategies, including a primary-backup approach (passive replication) [16] and a state machine approach (active replication) <ref> [1] </ref>. Further advantages of a centralized approach are that it provides a single point of serialization and that it simplifies accommodation of latecomers [3, 19].
Reference: [2] <author> K. P. Birman and T. A. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems. </title> <booktitle> In Proc. of 11th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 123-138, </pages> <address> Austin, TX, </address> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: However, neither of these systems has the concept of shared state or role distinction among members and is not intended to support general synchronous collaborative activities. As a transport layer subsystem, ISIS <ref> [2] </ref> supports the notion of process groups, notification of membership changes, and group multi-cast and may be used to build our group awareness and group notification services.
Reference: [3] <author> T. Crowley, P. Milazzo, E. Baker, H. Forsdick, and R. Tomlinson. MMConf: </author> <title> An Infrastructure for Building Shared Multimedia Applications. </title> <booktitle> In Proc. of ACM Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 329-342, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Patterson, et al. describe this property as client-based semantics [19]. The Corona server takes a centralized approach to providing administrative services for maintaining shared state. A different approach would be to replicate management responsibilities among collaborating clients <ref> [3, 11, 13] </ref>. In theory, such a replicated approach offers advantages over a centralized counterpart, especially in the issue of fault tolerance. However, in practice, a replicated approach would not be suitable in a wide-area, heterogeneous collaboration environment such as the World Wide Web. <p> There exist a number of well-known replication strategies, including a primary-backup approach (passive replication) [16] and a state machine approach (active replication) [1]. Further advantages of a centralized approach are that it provides a single point of serialization and that it simplifies accommodation of latecomers <ref> [3, 19] </ref>. Further, the detection and handling of faulty clients is easier with a centralized approach than a replicated counterpart where all the clients would need to run a complex membership protocol to account for faulty clients. <p> However, the rollback or operation transformation mechanisms employed by these systems are often expensive and hard to generalize, respectively. We feel that locks are more efficient and simpler to manage when concurrent updates to the shared state should be synchronized. MMConf <ref> [3] </ref>, DistEdit, and NSTP all use locks to control concurrent updates. Many other systems provide administrative services similar in part to the services provided by the Corona server. Both IRC [18] and Zephyr [4] provide centralized messaging and notification services, which are similar to our group awareness and multicast services.
Reference: [4] <author> C. A. DellaFera and M. W. Eichin. </author> <title> The Zephyr Notification Service. </title> <booktitle> In Proc. of the USENIX WInter Conference, </booktitle> <address> Dallas, Tx, 1988. </address> <publisher> USENIX Association. </publisher>
Reference-contexts: MMConf [3], DistEdit, and NSTP all use locks to control concurrent updates. Many other systems provide administrative services similar in part to the services provided by the Corona server. Both IRC [18] and Zephyr <ref> [4] </ref> provide centralized messaging and notification services, which are similar to our group awareness and multicast services. However, neither of these systems has the concept of shared state or role distinction among members and is not intended to support general synchronous collaborative activities.
Reference: [5] <author> P. Dewan. </author> <title> Flexible User Interface Coupling in Collaborative Systems. </title> <booktitle> In Proceedings of the ACM CHI'91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 41-48, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: As discussed earlier, a fully replicated approach may not be suitable for collaboration over a unreliable, long-haul collaboration environment such as the World Wide Web where clients may not perform administrative tasks reliably. Suite <ref> [5] </ref>, Rendezvous [20], and Jupiter [17] take a centralized approach to management of shared state. In addition to managing shared states, the Suite, Rendezvous, and Jupiter servers run application code. This may degrade the performance in user responsiveness even in a local-area network.
Reference: [6] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Design and Use of a Group Editor. </title> <editor> In G. Cockton, editor, </editor> <booktitle> Engineering for Human-Computer Interaction, </booktitle> <pages> pages 13-25. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: By default, the server does not associate any locks to a group and allows the group members to freely interact with each other. This approach is synonymous in its intent with the optimistic synchronization approaches taken by Grove <ref> [6] </ref>, Jupiter, and Coast. The difference is that our approach does not provide explicit conflict resolution mechanisms. However, the rollback or operation transformation mechanisms employed by these systems are often expensive and hard to generalize, respectively.
Reference: [7] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Groupware: Some Issues and Experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 38-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Corona Shared State Model Ellis, et al. define the shared state of applications in computer-supported collaboration as ...a set of objects where the objects and the actions performed on the objects are visible to a set of users <ref> [7] </ref>. It follows that the management of a shared state may be defined as the management of actions, i.e. accesses and updates, on the objects that constitute the shared state.
Reference: [8] <author> C. R. Clauer et al. </author> <title> A Prototype Upper Atmospheric Research Collaboratory (UARC). </title> <journal> EOS, Trans. Amer. Geophys. Union, </journal> <volume> 74, </volume> <year> 1993. </year>
Reference-contexts: We conclude the paper by comparing our work with existing systems and by outlining our future plans. Motivation Our work on the management of shared state in computer-supported collaboration has its origin in an NSF-sponsored project, called the Upper Atmospheric Research Collaboratory or UARC <ref> [8] </ref>. The UARC project focuses on the creation of an experimental testbed for wide-area scientific collaboratory work.
Reference: [9] <author> S. Greenberg and D. Marwood. </author> <title> Real-Time Groupware as a Distributed System: Concurrency Control and its Effect on the Interface. </title> <booktitle> In Proc. of the Fifth Conf. on Computer-Supported Cooperative Work, </booktitle> <address> Chapel Hill, North Carolina, </address> <year> 1994. </year>
Reference-contexts: The tighter synchronization implies that the users would be more constrained in their work <ref> [9] </ref>. At one extreme, the users are allowed to work as freely as they like as in a collaborative brainstorming session, and no synchronization processing is performed on the shared state. <p> By default, no lock is assigned to the shared state, allowing group members to work on the shared state concurrently. While this approach may lead to chaos in general, it has been found to be more efficient and useful in many practical collaborative scenarios <ref> [9] </ref>. For example, the design of the chat box in the UARC client allows the scientists to exchange messages freely without any concern for the total ordering on messages from distinct sources.
Reference: [10] <author> R. W. Hall, A. Mathur, F. Jahanian, A.Prakash, and C. Rasmussen. Corona: </author> <title> A Communication Service for Scalable, Reliable Group Collaboration Systems. </title> <booktitle> In Proc. of the Sixth ACM Conference on Computer-Supported Cooperative Work. </booktitle> <publisher> ACM Press, </publisher> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: The server supports both synchronous and asynchronous collaboration over the World Wide Web, where collaborating clients may be dynamically downloaded over the Internet. In an earlier paper <ref> [10] </ref>, we discussed communication requirements supported by the Corona server and the scalability aspects of communication for different kinds of groups. In this paper, we focus on the management of shared state by the Corona server to address the above issues. The remainder of the paper is organized as follows. <p> Hence, principals need a higher level of awareness of each other's work and presence, and thus require a higher quality of service (QoS) from the server <ref> [10] </ref>. For example, the server may have to ensure that a principal receives all of its notifications whereas it may notify observers without ensuring that all messages are reliably delivered. By default, a client is a principal member. A client may also specify its role when it joins a group.
Reference: [11] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkitfor supportingmultiple group editors. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Patterson, et al. describe this property as client-based semantics [19]. The Corona server takes a centralized approach to providing administrative services for maintaining shared state. A different approach would be to replicate management responsibilities among collaborating clients <ref> [3, 11, 13] </ref>. In theory, such a replicated approach offers advantages over a centralized counterpart, especially in the issue of fault tolerance. However, in practice, a replicated approach would not be suitable in a wide-area, heterogeneous collaboration environment such as the World Wide Web.
Reference: [12] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A Distributed Toolkit for Supporting Multiple Group Editors. </title> <booktitle> In Proc. of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: On the other hand, the Corona server does not support the Facade-like capabilities for viewing the shared states of groups before actually joining the groups; users should obtain the names of groups to join externally through our session manager [14]. Coast [22] and DistEdit <ref> [12] </ref> fully replicate their shared states as well as various administrative components among client applications. As discussed earlier, a fully replicated approach may not be suitable for collaboration over a unreliable, long-haul collaboration environment such as the World Wide Web where clients may not perform administrative tasks reliably.
Reference: [13] <author> J. Lauwers, T. Joseph, K. Lantz, and A. Romanow. </author> <title> Replicated Architectures for Shared Window Systems: A Critique. </title> <booktitle> In Proceedings of ACM Conference on Office Information Systems, </booktitle> <pages> pages 249-260, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Patterson, et al. describe this property as client-based semantics [19]. The Corona server takes a centralized approach to providing administrative services for maintaining shared state. A different approach would be to replicate management responsibilities among collaborating clients <ref> [3, 11, 13] </ref>. In theory, such a replicated approach offers advantages over a centralized counterpart, especially in the issue of fault tolerance. However, in practice, a replicated approach would not be suitable in a wide-area, heterogeneous collaboration environment such as the World Wide Web.
Reference: [14] <author> J.H. Lee, A. Prakash, T. Jaeger, and G. Wu. </author> <title> Supporting Multi-user, </title> <booktitle> Multi-applet Workspaces in CBE. In Proc. of the Sixth ACM Conference on Computer-Supported Cooperative Work. </booktitle> <publisher> ACM Press, </publisher> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: In this paper, we present our approach to managing shared state. Our approach is realized in a set of shared state management services provided by our Corona server that we have implemented as part of the UARC project's Collaboratory Builder's Environment <ref> [14] </ref>. The server supports both synchronous and asynchronous collaboration over the World Wide Web, where collaborating clients may be dynamically downloaded over the Internet. In an earlier paper [10], we discussed communication requirements supported by the Corona server and the scalability aspects of communication for different kinds of groups. <p> Note that the shared state of a stateful group specifies what is shared but does not dictate how the shared state is actually used. Instead, the interpretation of the 1 The server works in conjunction with our session manager as presented in <ref> [14] </ref>, and the session manager determines who may have a privilege to create groups. semantics of the shared state is left to collaborating processes. This is important be-cause we want our shared state management services to be applicable to a wide range of collaboration situations. <p> On the other hand, the Corona server does not support the Facade-like capabilities for viewing the shared states of groups before actually joining the groups; users should obtain the names of groups to join externally through our session manager <ref> [14] </ref>. Coast [22] and DistEdit [12] fully replicate their shared states as well as various administrative components among client applications.
Reference: [15] <author> N. R. Manohar and A. Prakash. </author> <title> The Session Capture and Replay Paradigm for Asynchronous Collaboration. </title> <booktitle> In Proc. of the Fourth European Conference on Computer-Supported Cooperative Work. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <month> Sep. </month> <year> 1995. </year>
Reference-contexts: In the second approach, the server effectively records an incremental change to the shared state. This allows the server to replay the updates at a later time, detailing how the shared state has reached a particular state. The record and replay capability <ref> [15] </ref> is especially useful for an end user who did not participate in a collaboration activity to find out not only the results of the activity but also how the results has been produced.
Reference: [16] <author> F. B. Schneider N. Budhiraja, K. Marzullo and S. Toueg. </author> <title> Optimal Primary-Backup Protocols. </title> <booktitle> In Proceedings of the Sixth International WOrkshop on Distributed Algorithms, </booktitle> <year> 1992. </year>
Reference-contexts: Furthermore, a centralized service provider such as the Corona server can be made fault tolerant by having multiple replicas of the provider. There exist a number of well-known replication strategies, including a primary-backup approach (passive replication) <ref> [16] </ref> and a state machine approach (active replication) [1]. Further advantages of a centralized approach are that it provides a single point of serialization and that it simplifies accommodation of latecomers [3, 19].
Reference: [17] <author> D. Nichols, P. Curtis, M. Dixon, and J. Lamping. High-Latency, </author> <title> Low-Bandwidth Windowing in the Jupiter Collaboration System. </title> <booktitle> In Proceedings of UIST '95, </booktitle> <address> Pittsburgh, PA, </address> <year> 1995. </year>
Reference-contexts: This centralized approach not only simplifies the lock management but also frees the group members from the administrative burden of lock management. Patterson, et al. [19] and Nichols, et al. <ref> [17] </ref> also discuss the merits of such a centralized serialization point for their lock management and concurrency control strategies, respectively. <p> As discussed earlier, a fully replicated approach may not be suitable for collaboration over a unreliable, long-haul collaboration environment such as the World Wide Web where clients may not perform administrative tasks reliably. Suite [5], Rendezvous [20], and Jupiter <ref> [17] </ref> take a centralized approach to management of shared state. In addition to managing shared states, the Suite, Rendezvous, and Jupiter servers run application code. This may degrade the performance in user responsiveness even in a local-area network.
Reference: [18] <author> J. Oikarinen and D. Reed. </author> <title> Internet Relay Chat Protocol. </title> <type> RFC 1459, </type> <year> 1993. </year> <note> Available at ftp://ds.intenic.net/rfc/rfc/1459.txt. </note>
Reference-contexts: MMConf [3], DistEdit, and NSTP all use locks to control concurrent updates. Many other systems provide administrative services similar in part to the services provided by the Corona server. Both IRC <ref> [18] </ref> and Zephyr [4] provide centralized messaging and notification services, which are similar to our group awareness and multicast services. However, neither of these systems has the concept of shared state or role distinction among members and is not intended to support general synchronous collaborative activities.
Reference: [19] <author> J. F. Patterson, M. Day, and J. Kucan. </author> <title> Notification Servers for Synchronous Groupware. </title> <booktitle> In Proc. of the Sixth ACM Conference on Computer-Supported Cooperative Work. </booktitle> <publisher> ACM Press, </publisher> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Client-Based Semantics: The interpretation of the semantics of a shared state should be the responsibility of collaborating application processes. This allows shared states to be scalable to a large number of collaborating processes, and processes of different applications may work over the same shared state <ref> [19] </ref>. Robust Collaboration: A collaboration session should be robust. It should tolerate various failures of collaborators' host machines and network connections and continue to support the work of non-faulty collaborators. In addressing the above issues, different collaborative applications require different approaches to managing shared state based on their needs. <p> The lack of knowledge of the semantics of a particular shared state frees us from having to deal with its behaviors in a specific situation. Patterson, et al. describe this property as client-based semantics <ref> [19] </ref>. The Corona server takes a centralized approach to providing administrative services for maintaining shared state. A different approach would be to replicate management responsibilities among collaborating clients [3, 11, 13]. In theory, such a replicated approach offers advantages over a centralized counterpart, especially in the issue of fault tolerance. <p> A rationale for centralizing administrative services for managing shared state is that servers are designed to support multiple users and hence tend to be more reliable, allocated more resources, and run in a more controlled environment than clients <ref> [19] </ref>. Clients usually support the work of a single user and typically are not trusted to be reliable. Furthermore, a centralized service provider such as the Corona server can be made fault tolerant by having multiple replicas of the provider. <p> There exist a number of well-known replication strategies, including a primary-backup approach (passive replication) [16] and a state machine approach (active replication) [1]. Further advantages of a centralized approach are that it provides a single point of serialization and that it simplifies accommodation of latecomers <ref> [3, 19] </ref>. Further, the detection and handling of faulty clients is easier with a centralized approach than a replicated counterpart where all the clients would need to run a complex membership protocol to account for faulty clients. <p> This centralized approach not only simplifies the lock management but also frees the group members from the administrative burden of lock management. Patterson, et al. <ref> [19] </ref> and Nichols, et al. [17] also discuss the merits of such a centralized serialization point for their lock management and concurrency control strategies, respectively. <p> L = fO i ; O j ; :::g is a set of identifiers of objects for which an identifier is to acquired or released Related Work In its goals, Lotus' NSTP <ref> [19] </ref> most closely resembles our Corona server. Both ad vocate centralized management of shared state and provide similar administrative services in its support. The semantics of shared state is client-based in both systems so that their services are generalized to a wide range of applications.
Reference: [20] <author> J.F. Patterson, R.D. Hill, </author> <title> S.L. Rohall, and W.S. Meeks. Rendezvous: An architecture for synchronous multi-user applications. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 317-328, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: As discussed earlier, a fully replicated approach may not be suitable for collaboration over a unreliable, long-haul collaboration environment such as the World Wide Web where clients may not perform administrative tasks reliably. Suite [5], Rendezvous <ref> [20] </ref>, and Jupiter [17] take a centralized approach to management of shared state. In addition to managing shared states, the Suite, Rendezvous, and Jupiter servers run application code. This may degrade the performance in user responsiveness even in a local-area network.
Reference: [21] <author> A. Prakash and H. Shim. DistView: </author> <title> Support for Building Efficient Collaborative Applications using Replicated Objects. </title> <booktitle> In Proc. of the Fifth ACM Conf. on Computer Supported Cooperative Work, </booktitle> <pages> pages 153-164, </pages> <address> Chapel-Hill, NC, </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The semantics of shared state is application-dependent. For example, in a group-drawing tool, the shared state may be defined as the contents of the canvas. In a window-sharing environment, such as the one supported by DistView <ref> [21] </ref>, the shared state includes the attributes of a shared window, e.g., the size of the window, and the internal states of application-specific objects associated with the window. On the other hand, CSCW system developers need application-independent ser vices for managing shared state and providing awareness information about its use. <p> The chat box allows scientists to exchange textual messages and graphical images within the editing area of the chat box. All the messages are shown in the display area of the chat box. Made possible by our DistView toolkit <ref> [21] </ref>, the shared viewer facility allows the selective sharing of the data display windows of instrument data viewers. In order to share a window, a scientist first exports the win Chat Membership/Notification Window Instrument Data ViewersDraw ToolChat Box dow to a public repository. <p> The latter requirement is commonplace in object-oriented applications that utilize persistent objects. The identifiers for objects in a shared state may be automatically generated by a support system and may not incur extra programming efforts. For example, the object instances of the DistViewObject class in our DistView toolkit <ref> [21] </ref> are automatically assigned such identifiers by the DistView runtime system. Corona Server Overview In this section, we describe the basic approach of the Corona server to shared state management. We begin the discussion by defining the concept of group.
Reference: [22] <author> C. Schuckmann, L. Kirchner, J. Schummer, and J. M. Haake. </author> <title> Designing Object-Oriented Synchronous Groupware with COAST. </title> <booktitle> In Proc. of the Sixth ACM Conference on Computer-Supported Cooperative Work. </booktitle> <publisher> ACM Press, </publisher> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: On the other hand, the Corona server does not support the Facade-like capabilities for viewing the shared states of groups before actually joining the groups; users should obtain the names of groups to join externally through our session manager [14]. Coast <ref> [22] </ref> and DistEdit [12] fully replicate their shared states as well as various administrative components among client applications.
References-found: 22

