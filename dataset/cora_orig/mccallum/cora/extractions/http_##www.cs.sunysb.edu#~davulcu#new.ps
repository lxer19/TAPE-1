URL: http://www.cs.sunysb.edu/~davulcu/new.ps
Refering-URL: http://www.cs.sunysb.edu/~davulcu/
Root-URL: http://www.cs.sunysb.edu
Email: fdavulcu,ramg@cs.sunysb.edu  E-mail: davulcu@cs.sunysb.edu  
Phone: Tel: (516) 632-9081  
Title: Enhancing a Genome Database Using the XSB Tabled Logic Programming System  
Author: Hasan Davulcu I.V. Ramakrishnan Hasan Davulcu 
Note: Contact author:  Supported in part by the NSF grants CCR-9404921, CCR-9510072, CDA-9303181, CDA-9504275 and INT-9314412.  
Date: February 27, 1997  
Address: NY 11794-4400  
Affiliation: Department of Computer Science State University of New York at Stony Brook Stony Brook,  
Abstract: LabBase is a generic database management system for implementation of laboratory information systems developed at the Center for Genome Research in the Whitehead Institute at MIT. It has become an important community database serving biological scientists engaged in genome research. Until now the language used to query LabBase has been non-recursive datalog without rules. Using the XSB Tabled Logic Programming System developed at SUNY, Stony Brook, we have now extended this query language into a full-fledged logic programming language. LabBase users can now use the full power of a logic programming language, especially rules and recursion, to compose complex queries. The XSB system extends and improves the evaluation strategy of Prolog. In particular it terminates for (recursive and non-recursive) Datalog programs thus enabling a smooth generalization of LabBase's query language. In addition it supports HiLog a higher-order logic programming language, and by combing HiLog and tabling we generalize the limited aggregation features in LabBase. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. J. Bonner and E. Harlet. </author> <title> A flexible approach to genome map assembly. </title> <booktitle> Proc of the International Symposium on Intelligent Systems for Molecular Biology, </booktitle> <pages> pages 161 - 169, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: 1 Introduction A major goal of the Human Genome Project <ref> [1] </ref> is to construct detailed physical maps of the human genome. A physical map is an assignment of DNA fragments to their locations on the genome. The maps consist of DNA markers spaced more or less evenly every few hundred bases along the genome.
Reference: [2] <author> W. Chen, M. Kifer, and D. S. Warren. Hilog: </author> <title> A foundation for higher-order logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 15(3):187 - 230, </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: The XSB system extends and improves the evaluation strategy of Prolog. In particular it terminates for (recursive and non-recursive) datalog programs thus enabling a smooth generalization of LabBase's query language. In addition it supports HiLog a higher-order logic programming language <ref> [2] </ref>. By combing HiLog and tabling we generalize the limited aggregation features of LabBase. 1 1 The XSB - LabBase integration was done in collaboration with Steve Rozen, one of the principal designers of the LabBase System at Whitehead Institute. The rest of this paper is organized as follows. <p> As a logic programming system, XSB has performance comparable to several other popular Prolog implementations. Moreover, the XSB system has been shown to compute in-memory database queries about an order of magnitude faster than current semi-naive methods <ref> [2] </ref>. The first release of XSB was in June 1993; it is now in its sixth release. XSB has been ported to over a dozen platforms and has been installed in over a thousand registered sites. <p> What the above predicate means is that: for each set of bindings for which term 1 ,.., term n is true, take the value bound to Element and make it an element of the Set. In XSB we use HiLog <ref> [2] </ref> and tables to support aggregation. HiLog is a higher-order logic programming language with a higher-order syntax and a first order semantics. In HiLog one can manipulate predicates or the names of sets. Hence the results of a query can be collected in a set.
Reference: [3] <author> W. Chen and D.S. Warren. </author> <title> Query evaluation under the well-founded semantics. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <year> 1993. </year>
Reference-contexts: In particular the XSB Logic Programming system developed at SUNY, Stony Brook exemplifies such an approach. The XSB system implements SLG resolution <ref> [3] </ref>, which is an extension of OLDT resolution [13] to handle general logic programs. In SLG, predicates are processed as tabled or nontabled. If no predicates are tabled, then evaluation proceeds as in SLD resolution. Thus for logic programming (LP) applications, SLG mimics Prolog evaluation.
Reference: [4] <author> N. Goodman, S. Rozen, and L. Stein. </author> <title> Requirements for a deductive query language in the mapbase genome-mapping database. </title> <editor> In Ramakrishnan, R., editor, </editor> <booktitle> Proceedings of the Workshop on Programming with Logic Databases In Conjunction with ILPS, Vancouver, B.C., </booktitle> <pages> pages 18 - 32, </pages> <year> 1993. </year>
Reference-contexts: The maps consist of DNA markers spaced more or less evenly every few hundred bases along the genome. The Center for Genome Research at the Whitehead Institute in MIT is engaged in several large-scale genome mapping projects. It is reported in <ref> [4] </ref> that these efforts will require the completion of over 2.5 million experiments, each of which requires several steps. <p> While the choice of the query language, dictated by its simplicity and ease of implementation, has so far been adequate there nevertheless appears a need now to enhance it <ref> [4] </ref> [5]. For instance, support for rules would increase the readability of long queries and recursion is necessary for handling queries requiring computation of transitive closure. Such queries are not only natural but at times necessary in the context of genome data. <p> For example, in one kind of genome mapping, called genetic linkage mapping <ref> [4] </ref>, the map-position queries involve calculating a transitive closure over different forms of orderings for the markers over a chromosome. Furthermore the use of rules would enhance the readability of long queries.
Reference: [5] <author> N. Goodman, S. Rozen, and L. Stein. </author> <title> Constructing a domain-specific dbms using a persistent object system. </title> <editor> in m. atkinson, d. maier and v. benzaken, eds. </editor> <booktitle> Proceedings of the Sixth International Workshop on Persistent Object Systems, </booktitle> <publisher> Springer Verlag, </publisher> <pages> pages 526 - 541, </pages> <year> 1994. </year>
Reference-contexts: Since the data management requirements of a laboratory information system is somewhat non-conventional, LabBase provides special support for data management which goes beyond what is provided by a traditional DBMS. It is built on top of the ObjectStore persistent object system <ref> [5] </ref> and provides non-recursive datalog without rules as the query language. LabBase has been in operation for several years now and has grown into a community database, serving the needs of biological scientists engaged in genome research. <p> While the choice of the query language, dictated by its simplicity and ease of implementation, has so far been adequate there nevertheless appears a need now to enhance it [4] <ref> [5] </ref>. For instance, support for rules would increase the readability of long queries and recursion is necessary for handling queries requiring computation of transitive closure. Such queries are not only natural but at times necessary in the context of genome data.
Reference: [6] <author> N. Goodman, S. Rozen, and L. Stein. </author> <title> A glimpse at the dbms challenges posed by the human genome project. </title> <note> Available in postscript and compressed postscript at http://www-genome.wi.mit.edu, 1994. </note>
Reference-contexts: Database management systems (DBMS) constitute a critical component in realizing such an "automated laboratory notebook", a term commonly used in the genome research community. As mentioned in <ref> [6] </ref>, the database component requires powerful data models with nested, possibly recursive, data structures and rather general support for computed objects.
Reference: [7] <author> N. Goodman, S. Rozen, and L. Stein. Labbase: </author> <title> A database to manage laboratory data in a large-scale genome-mapping project. </title> <journal> IEEE Computers in Medicine and Biology, </journal> <volume> 14:702 - 709, </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: Database management systems (DBMS) constitute a critical component in realizing such an "automated laboratory notebook", a term commonly used in the genome research community. As mentioned in [6], the database component requires powerful data models with nested, possibly recursive, data structures and rather general support for computed objects. LabBase <ref> [7] </ref> is a database management system designed at MIT's Whitehead Institute of Biomedical Research, for managing laboratory data, i.e., keeping track of laboratory materials, the experimental steps performed on them, and the results of these experiments. <p> LabBase, designed and implemented at MIT's Genome Research Center, is a database management system tailored to meet the needs of laboratory information systems <ref> [7] </ref>. It is designed to meet the requirements of managing laboratory materials, the experimental steps performed on them and the results of these experiments. Data Model We review the conceptual data model of LabBase (details appear in [7],[8]). The primary abstractions provided by LabBase are materials and steps. <p> The current LabBase <ref> [7] </ref> implementation consists of approximately 9000 lines of C++ code and approximately 1000 lines of perl code. Persistent storage is provided by the Object Store Object-Oriented DBMS, which is essentially a persistent C++. Our interface is approximately 1500 lines of Prolog code and approximately 900 lines of C++ code.
Reference: [8] <author> N. Goodman, S. Rozen, and L. Stein. </author> <title> Labbase user manual. </title> <note> Available in postscript and HTML at http://www-genome.wi.mit.edu, 1995. </note>
Reference-contexts: In the above step, the step kind is sequence step and, 'D1723', 'ACTGGC', 'Rozen' and 1994:01:05 are the values of the material, sequence, who and when tags (respectively). The Query Language A subset of datalog (non-recursive without rules) was chosen as the query language for LabBase. (See <ref> [8] </ref> for the reasons underlying this choice.) The language supports sets and lists as values and a limited form of aggregates.
Reference: [9] <author> N. Goodman, M. J. Daly S. Rozen, and Mary-Pat Reeve. Genome-map: </author> <title> Real-world test data and queries for logic databases. </title> <year> 1995. </year>
Reference-contexts: The choice of datalog as a query language was motivated by its simplicity, ease of implementation, its expressive capabilities for ad-hoc data-dredging queries <ref> [9] </ref> and its extensibility i.e. domain specific builtin predicates can be readily added. Besides all of the above, datalog gracefully handles the structured data types in LabBase such as lists, list of lists and sets as function terms.
Reference: [10] <author> T. Przymusinski. </author> <title> The well-founded semantics coincides with the three-valued stable semantics. </title> <journal> Fundamenta Informaticae, </journal> <volume> 13(4), </volume> <year> 1990. </year>
Reference-contexts: SLG is appropriate for deductive databases (DDB's), since evaluation based on SLG is asymptotically equivalent to `Magic' transformations [12], and has polynomial data complexity for Datalog programs. Furthermore, SLG computes the major semantics proposed for nonmonotonic reasoning (NMR): directly computing the well-founded models [15], and computing (3-valued) stable models <ref> [10] </ref> after further processing. Thus the XSB system provides a computationally tight integration of LP, DDB's and NMR. The tightness of the integration is shown by the performance of the XSB system in the three areas mentioned above.
Reference: [11] <author> K. Sagonas, T. Swift, and D.S. Warren. </author> <title> The XSB Programmers Manual, </title> <type> Version 1.6. </type> <institution> Dept. of Computer Science, SUNY at Stony Brook, </institution> <year> 1996. </year>
Reference-contexts: In this paper we describe extensions to the LabBase query language that includes rules and recursion. Specifically, we extend the language into a full-fledged logic programming language that is executed by the XSB Tabled Logic Programming System developed at SUNY, Stony Brook <ref> [11] </ref>. The XSB system extends and improves the evaluation strategy of Prolog. In particular it terminates for (recursive and non-recursive) datalog programs thus enabling a smooth generalization of LabBase's query language. In addition it supports HiLog a higher-order logic programming language [2].
Reference: [12] <author> H. Seki. </author> <title> On the power of Alexander templates. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 150 - 159, </pages> <year> 1989. </year>
Reference-contexts: In SLG, predicates are processed as tabled or nontabled. If no predicates are tabled, then evaluation proceeds as in SLD resolution. Thus for logic programming (LP) applications, SLG mimics Prolog evaluation. SLG is appropriate for deductive databases (DDB's), since evaluation based on SLG is asymptotically equivalent to `Magic' transformations <ref> [12] </ref>, and has polynomial data complexity for Datalog programs. Furthermore, SLG computes the major semantics proposed for nonmonotonic reasoning (NMR): directly computing the well-founded models [15], and computing (3-valued) stable models [10] after further processing. Thus the XSB system provides a computationally tight integration of LP, DDB's and NMR.
Reference: [13] <author> H. Tamaki and T. Sato. </author> <title> OLDT resolution with tabulation. </title> <booktitle> International Conference on Logic Programming, </booktitle> <pages> pages 84 - 98, </pages> <year> 1986. </year>
Reference-contexts: In particular the XSB Logic Programming system developed at SUNY, Stony Brook exemplifies such an approach. The XSB system implements SLG resolution [3], which is an extension of OLDT resolution <ref> [13] </ref> to handle general logic programs. In SLG, predicates are processed as tabled or nontabled. If no predicates are tabled, then evaluation proceeds as in SLD resolution. Thus for logic programming (LP) applications, SLG mimics Prolog evaluation.
Reference: [14] <author> J. D. Ullman. </author> <booktitle> Principles of Database and Knowledge-Base Systems, </booktitle> <volume> volume 1. </volume> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: Whenever a new call to an intensional (IDB) predicate <ref> [14] </ref> is made, a new Bindings is pushed to the global stack of Bindings and it is popped after the meta-interpreter evaluates the new clause for the intensional predicate and communicates the computed answer back to the caller.
Reference: [15] <author> A. van Gelder, K.A. Ross, and J.S. Schlipf. </author> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of the ACM, </journal> <year> 1991. </year>
Reference-contexts: SLG is appropriate for deductive databases (DDB's), since evaluation based on SLG is asymptotically equivalent to `Magic' transformations [12], and has polynomial data complexity for Datalog programs. Furthermore, SLG computes the major semantics proposed for nonmonotonic reasoning (NMR): directly computing the well-founded models <ref> [15] </ref>, and computing (3-valued) stable models [10] after further processing. Thus the XSB system provides a computationally tight integration of LP, DDB's and NMR. The tightness of the integration is shown by the performance of the XSB system in the three areas mentioned above.
References-found: 15

