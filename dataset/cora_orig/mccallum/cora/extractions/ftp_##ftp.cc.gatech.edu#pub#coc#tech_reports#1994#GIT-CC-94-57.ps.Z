URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1994/GIT-CC-94-57.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.94.html
Root-URL: 
Email: kaushik@cc.gatech.edu  
Title: Reconfigurable Garbage Collection of Data Structures in a Speculative Real-Time System  
Author: Kaushik Ghosh 
Date: December 1, 1994  
Address: Atlanta, GA, 30332.  Atlanta, Georgia 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  College of Computing Georgia Institute of Technology  
Pubnum: GIT-CC-94-57  
Abstract: Garbage collection can be carried out on-demand in a non-real-time system. However, a real-time system can afford this overhead only during intervals of `idle' time. We motivate the usefulness of reconfiguring the available memory for data structures, and the intervals of garbage collection of these data structures, in a parallel real-time system performing speculative execution. After briefly mentioning the data structures, we describe a scheme for reconfiguring garbage collection. The parameters of such reconfiguration are based on the available platform, and the amount of idle time available in the real-time system. Specific parameters are provided for one architecture the KSR2 parallel processor. Experimental performance evaluation of the scheme is currently under investigation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> Timeliness via speculation for real-time databases. </title> <booktitle> To appear in Proceedings of the 15th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: The use of speculative execution has often been suggested both for optimistic concurrency control in the face of uncertain dependency relationships, and execution in uncertain environments. Thus, in [8], the authors describe a compiler for extracting speculatively-executable primitives from a real-time program, while in <ref> [1] </ref> the authors investigate optimistic concurrency control in an environment with multiple resources. Much of our own prior work has investigated the issue of general optimistic execution in real-time systems how much speculative execution is possible, and under what circumstances [5, 7].
Reference: [2] <author> Houssine Chetto and Maryline Chetto. </author> <title> Some results of the earliest deadline scheduling algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1261-1269, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: The slot-list is a linear list, produced as a result of the real-time scheduling analyses, with one element per real-time task. It provides the time-table for running particular tasks at particular intervals of real-time. We perform Earliest Deadline <ref> [2] </ref> scheduling in our system, which is non-preemptive. 1 Space Time Memory [4] is a special kind of versioned memory system, that is accessed using two co-ordinates: the spatial (memory address) and the temporal (task deadline/timestamp).
Reference: [3] <author> R. M. Fujimoto. </author> <title> The virtual time machine. </title> <booktitle> International Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 199-208, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: It preserves causality in read/write operations, and has been shown to be useful in speculative execution <ref> [4, 3] </ref>. Space-Time Memory can be thought of as successive snapshots of memory. Just like main memory, Space-Time Memory is divided into pages, each of which hold a collection of variables. In what follows, the successive snapshots of a Space-Time Memory page will be called versions.
Reference: [4] <author> Kaushik Ghosh and Richard M. Fujimoto. </author> <title> Parallel discrete event simulation using space-time memory. </title> <booktitle> Proceedings of the 1991 International Conference on Parallel Processing, </booktitle> <address> III:III-201-III-208, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: It provides the time-table for running particular tasks at particular intervals of real-time. We perform Earliest Deadline [2] scheduling in our system, which is non-preemptive. 1 Space Time Memory <ref> [4] </ref> is a special kind of versioned memory system, that is accessed using two co-ordinates: the spatial (memory address) and the temporal (task deadline/timestamp). It preserves causality in read/write operations, and has been shown to be useful in speculative execution [4, 3]. <p> It preserves causality in read/write operations, and has been shown to be useful in speculative execution <ref> [4, 3] </ref>. Space-Time Memory can be thought of as successive snapshots of memory. Just like main memory, Space-Time Memory is divided into pages, each of which hold a collection of variables. In what follows, the successive snapshots of a Space-Time Memory page will be called versions. <p> It should be noted here that schedulability analyses involve traversing the slot list [6], and read/write operations on a Space-Time Memory object involve traversing the list of versions of that Space-Time Memory object <ref> [4] </ref>. Frequent GC of `old' slots and versions prunes the lists, thereby making these operations faster. However, the overhead of GC itself should be kept under control. <p> This is also the interval between GCs: 1=g. Hence, x (e + r + s)(k 1 n + 1) = 1=g The approach above can be used as such if Space-Time Memory is not used in the system. As was mentioned in <ref> [4] </ref>, it is possible to run a speculative-execution system without Space-Time Memory, but programmability becomes difficult in that case. If we do use Space-Time Memory, the figure for T g above changes, as is shown hereunder.
Reference: [5] <author> Kaushik Ghosh, Richard M. Fujimoto, and Karsten Schwan. </author> <title> Time warp simulation in time constrained systems. </title> <booktitle> Proceedings of the 7th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <month> May </month> <year> 1993. </year> <note> Expanded version available as technical report GIT-CC-92/46. </note>
Reference-contexts: Much of our own prior work has investigated the issue of general optimistic execution in real-time systems how much speculative execution is possible, and under what circumstances <ref> [5, 7] </ref>. Elsewhere, we have described a scheduler for such detect-and-recover style of execution in a real-time system [6].
Reference: [6] <author> Kaushik Ghosh, Richard M. Fujimoto, and Karsten Schwan. </author> <title> Experiences with a scheduler for dynamic real-time syatems (extended abstract). </title> <type> Technical report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <address> GIT-CC-94/29, Atlanta, GA 30332, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Much of our own prior work has investigated the issue of general optimistic execution in real-time systems how much speculative execution is possible, and under what circumstances [5, 7]. Elsewhere, we have described a scheduler for such detect-and-recover style of execution in a real-time system <ref> [6] </ref>. A key point to note is that for speculative execution to be successful, one has to save some of the `past state.' For, upon detection of dependency violations, the system recovers from such erroneous computation by rolling back to some previous valid state, and redoes the computation presumably correctly. <p> The `system start time' is at real-time 1. At real-time 11, e.g., all the slots on processor 1 and all but the last slot on processor 0 can be GC-ed. It should be noted here that schedulability analyses involve traversing the slot list <ref> [6] </ref>, and read/write operations on a Space-Time Memory object involve traversing the list of versions of that Space-Time Memory object [4]. Frequent GC of `old' slots and versions prunes the lists, thereby making these operations faster. However, the overhead of GC itself should be kept under control.
Reference: [7] <author> Kaushik Ghosh, Kiran Panesar, Richard M. Fujimoto, and Karsten Schwan. </author> <title> PORTS: A parallel, optimistic, real-time simulator. </title> <booktitle> Proceedings of the 8th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: Much of our own prior work has investigated the issue of general optimistic execution in real-time systems how much speculative execution is possible, and under what circumstances <ref> [5, 7] </ref>. Elsewhere, we have described a scheduler for such detect-and-recover style of execution in a real-time system [6]. <p> First, we describe the method for slots, and then for versions. Though we have shown in <ref> [7] </ref> that speculative computation has to have certain restraints for predictable 2 successive versions created by the same processor.
Reference: [8] <author> M. Younis, T.J. Marlowe, and A.D. Stoyenko. </author> <title> Compiler transformations for speculative execution in a real-time system. </title> <booktitle> To appear in Proceedings of the 15th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1994. </year> <month> 5 </month>
Reference-contexts: Finally, the dependence relationships between tasks may not be completely known a priori, thus necessitating new techniques for scheduling. The use of speculative execution has often been suggested both for optimistic concurrency control in the face of uncertain dependency relationships, and execution in uncertain environments. Thus, in <ref> [8] </ref>, the authors describe a compiler for extracting speculatively-executable primitives from a real-time program, while in [1] the authors investigate optimistic concurrency control in an environment with multiple resources.
References-found: 8

