URL: http://www.daimi.aau.dk/~krab/ug3.ps.gz
Refering-URL: http://www.daimi.aau.dk/~krab/resume.html
Root-URL: http://www.daimi.aau.dk
Email: fkrab,madstg@daimi.au.dk  
Title: Unifying Genericity Combining the Benefits of Virtual Types and Parameterized Classes  
Author: Kresten Krab Thorup and Mads Torgersen 
Address: Ny Munkegade, DK-8000 Aarhus C, Denmark  
Affiliation: Department of Computer Science, University of Aarhus  
Abstract: Generic types in programming languages are most often supported with various forms of parametric polymorphism, i.e. functions on types. Within the framework of object-oriented languages, virtual types present an alternative where specific types are derived from generic ones using inheritance rather than function application. While both mechanisms support basic genericity, they have very different typing properties, each of them providing for the description of useful relationships, which are not expressible with the other. In this paper we present, through the use of examples, a mechanism for describing generic classes: structural virtual types. This mechanism is essentially a merger of parameterized classes and virtual types and includes the benefits of both, in particular retaining mutual recursion and covariance of virtual types as well as the function-like nature of parameterized classes. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 98] <author> Ole Agesen, Gilad Bracha, Kim Bruce, Luca Cardelli, Corky Cartwright, Erik Ernst, Kathleen Fisher, Martin Odersky, Bill Joy, Benjamin Pierce, John Rose, Guy Steele, Jr., David Stoutamire, Kresten Krab Thorup, Mads Torgersen, David Ungar, Philip Wadler, et al. </author> <title> Personal communication. The "Java Genericity" mailing list, </title> <type> 1997-1998. </type>
Reference-contexts: In particular, the activities surrounding the "Java Genericity" discussion forum <ref> [ABB + 98] </ref> has spawned a lot of research on generic classes in relation to Java. Of all these, only a few have aimed at combining the advantages of parametric polymorphism and virtual types. <p> Unlike Beta, the mechanism of structural virtual types is similar to genericity schemes based on parametric polymorphism, utilizing a structural subtype relationship between instantiations of generic classes. Acknowledgements The authors would like to thank the members of the "Java Genericity" mailing list <ref> [ABB + 98] </ref> for many inspiring discussions on the subject of parameterized classes versus virtual types. A special thanks goes to Peter Orbaek for many fruitful discussions, and for comments on drafts of this paper.
Reference: [AFM97] <author> Ole Agesen, Stephen N. Freund, and John C. Mitchell. </author> <title> Adding type parameterization to the java programming language. </title> <booktitle> In Object Oriented Programming: Systems, Languages and Applications (OOPSLA). ACM, </booktitle> <month> October </month> <year> 1997. </year>
Reference: [AM97] <editor> Mehmet Aksit and Satoshi Matsouka, editors. </editor> <booktitle> European Conference on Object-Oriented Programming (ECOOP), number 1241 in LNCS, </booktitle> <address> Jyvaskyla, Finland, 1997. AiTO, </address> <publisher> Springer Verlag. </publisher>
Reference: [BOSW98] <author> Gilad Bracha, Martin Odersky, David Stoutamire, and Philip Wadler. </author> <title> Making the future safe for the past: Adding genericity to the java programming language. </title> <note> In Chambers [Cha98]. </note>
Reference: [BOW98] <author> Kim Bruce, Martin Odersky, and Philip Wadler. </author> <title> A statically safe alternative to virtual types. </title> <booktitle> In European Conference on Object-Oriented Programming (ECOOP), </booktitle> <year> 1998. </year>
Reference-contexts: This kind of genericity is provided by virtual types [MMP89,Tho97,Tor98]. Recent discussions have brought attention to the benefits of either approach, most notably <ref> [BOW98] </ref> which suggests a language containing both mechanisms. As this paper will also show, there are significant problems that are conveniently expressed in either model, but hard to describe with the other. Unlike the work in [BOW98], this paper presents a unification of the mechanisms of parameterized classes and virtual types, <p> Recent discussions have brought attention to the benefits of either approach, most notably <ref> [BOW98] </ref> which suggests a language containing both mechanisms. As this paper will also show, there are significant problems that are conveniently expressed in either model, but hard to describe with the other. Unlike the work in [BOW98], this paper presents a unification of the mechanisms of parameterized classes and virtual types, gaining the benefits of both, as originally suggested in [TT98]. The paper proceeds as follows. <p> In particular, the activities surrounding the "Java Genericity" discussion forum [ABB + 98] has spawned a lot of research on generic classes in relation to Java. Of all these, only a few have aimed at combining the advantages of parametric polymorphism and virtual types. The exception is <ref> [BOW98] </ref>, which suggests extending Java with both F-bounded polymorphism and a down-scaled variation of virtual types, essentially only including nested virtual classes. <p> Also, Transframe does not include nested virtual classes. Both Transframe and the proposal in <ref> [BOW98] </ref> implement self recursive types and binary methods through use of a special self-type, with the unfortunate properties of non-bindable covariance as a consequence. Thus, exact types are needed in these to be able to use such binary methods.
Reference: [Bru97] <author> Kim Bruce. </author> <title> Subtyping is not a good match for object-oriented programming languages. </title> <note> In Aksit and Matsouka [AM97]. </note>
Reference-contexts: Thus, types can be declared completely independently and still be in a subtyping relationship. In an object-oriented setting, where-clauses as in CLU [LSAS77,MBL97] and matching in LOOM <ref> [Bru97] </ref> use variations of structural subtyping. As an alternative to this, many object-oriented programming languages use name-based typing (as in Java, C ++ or Beta). With name-based typing, two class-types are only in a subtype relation if they are also explicitly in an subclass relation.
Reference: [Car89] <author> Luca Cardelli. </author> <title> Typeful programming. </title> <type> Technical Report DEC-SRC-45, </type> <institution> DEC Systems Research Center, </institution> <address> Palo Alto, CA, </address> <year> 1989. </year>
Reference-contexts: The notion of virtual types originates from the virtual patterns [MMP89] of the Beta programming language [KMMPN83,MMPN93]. A similar mechanism is also found as generics in Ada [Sei94], and as creators in [Sch96], and as partially abstract (existential) types in Quest <ref> [Car89] </ref>. More recently [Tho97] provides a suggestion for how to add virtual types to Java. In [Tor98] Torgersen describes a variant of Beta's virtual types which is statically type safe. This is the approach which is built upon in this paper.
Reference: [CCH + 89] <author> Peter Canning, William Cook, Walt Hill, Walter Olthoff, and John Mitchell. </author> <title> F-bounded qualification for object-oriented programming. </title> <booktitle> In ACM Conference on Functional Programming and Computer Architecture. </booktitle> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: The discovery of several serious problems in Eiffel's type system [Coo89] led to the design of an improved mechanism, F-bounded polymorphism <ref> [CCH + 89] </ref>, which is the underlying mechanism in many modern implementations of parameterized classes. With F-bounded polymorphism, the type variable can appear in its own bound, allowing in particular recursive classes to be written in a type safe way.
Reference: [Cha98] <author> Craig Chambers, </author> <title> editor. Object Oriented Programming: </title> <booktitle> Systems, Languages and Applications (OOPSLA), </booktitle> <address> Vancouver, BC, </address> <month> October </month> <year> 1998. </year> <title> SIGPLAN, </title> <publisher> ACM Press. </publisher>
Reference: [Coo89] <author> William Cook. </author> <title> A proposal for making Eiffel type-safe. </title> <editor> In Stephen Cook, editor, </editor> <booktitle> European Conference on Object-Oriented Programming (ECOOP), </booktitle> <pages> pages 57-70, </pages> <address> Nottingham, </address> <month> July </month> <year> 1989. </year> <title> AiTO, </title> <publisher> Nottingham University Press. </publisher>
Reference-contexts: The discovery of several serious problems in Eiffel's type system <ref> [Coo89] </ref> led to the design of an improved mechanism, F-bounded polymorphism [CCH + 89], which is the underlying mechanism in many modern implementations of parameterized classes.
Reference: [CS98] <author> Robert Cartwright and Guy L. Steele. </author> <title> Compatible genericity with runtime-types for the java programming language. </title> <note> In Chambers [Cha98]. </note>
Reference-contexts: The meet example can then be written as: meet (c: Collectionh + Vehiclei, p: Place) - foreach v: Vehicle in c - v.driveTo (p) - - carset: SethCari; : : : meet (carset, Aarhus) At first glance, this is strikingly close to what is possible in NextGen <ref> [CS98] </ref>, a proposal for adding parameterized classes to Java.
Reference: [ES90] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C ++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Several other programming languages, including CLU [LSAS77], C ++ <ref> [ES90] </ref> and Sather [Omo93] implement similar features. Most recently several such proposals have come forth for Java [OW97,MBL97,AFM97,BOSW98,CS98].
Reference: [G + 96] <editor> B. Gomes et al. Sather 1.1: </editor> <booktitle> Language Essentials, </booktitle> <year> 1996. </year> <note> http://www.icsi.berkeley.edu/sather. </note>
Reference: [IP99] <author> Atsushi Igarashi and Benjamin C. Pierce. </author> <title> Foundations for virtual types. </title> <booktitle> In 6th Workshop on the Foundations of Object-Oriented Languages, </booktitle> <address> San Antonio, TX, </address> <month> January </month> <year> 1999. </year>
Reference-contexts: More recently [Tho97] provides a suggestion for how to add virtual types to Java. In [Tor98] Torgersen describes a variant of Beta's virtual types which is statically type safe. This is the approach which is built upon in this paper. In <ref> [IP99] </ref>, Igarashi and Pierce present the first formal account of these statically safe virtual types. With virtual types, type variables are introduced as attributes of objects rather than parameters of the class.
Reference: [Jon97] <editor> Niel D. Jones, editor. </editor> <booktitle> Conf. Proceedings of the 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Paris, </address> <month> January </month> <year> 1997. </year> <note> ACM Press. </note>
Reference: [KMMPN83] <author> Bent Bruun Kristensen, Ole Lehrmann Madsen, Birger Moller-Pedersen, and Kristen Nygaard. </author> <title> Abstraction mechanisms in the Beta programming language. </title> <booktitle> In Conf. Proceedings of the 10th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Austin, TX, </address> <year> 1983. </year>
Reference: [LSAS77] <author> Barbara Liskov, Alan Snyder, Russel Atkinson, and Craig Schaffert. </author> <title> Abstraction mechanisms in CLU. </title> <journal> Communications of the ACM, </journal> <volume> 20(8), </volume> <month> August </month> <year> 1977. </year>
Reference-contexts: Several other programming languages, including CLU <ref> [LSAS77] </ref>, C ++ [ES90] and Sather [Omo93] implement similar features. Most recently several such proposals have come forth for Java [OW97,MBL97,AFM97,BOSW98,CS98].
Reference: [Mag91] <author> Boris Magnusson. </author> <title> Code reuse considered harmful. </title> <journal> JOOP Journal of Object-Oriented Programming, </journal> <volume> 4(3), </volume> <month> November </month> <year> 1991. </year>
Reference-contexts: The difference between these approaches is highlighted in context of a language with multiple inheritance with the `graphical cowboy' example due to Boris Magnusson <ref> [Mag91] </ref>. Consider a subclass, GraphicalCowboy, of classes Cowboy and GraphicalObject inheriting a draw method from both. In a language with name-based typing, these two draw methods can still be distinguished by qualifying a method call with one of the two super-classes.
Reference: [MBL97] <author> Andrew Myers, Joseph Bank, and Barbara Liskov. </author> <title> Parameterized types for Java. </title> <publisher> In Jones [Jon97]. </publisher>
Reference: [Mey86] <author> Bertrand Meyer. </author> <title> Genericity versus inheritance. </title> <booktitle> In Object Oriented Programming: Systems, Languages and Applications (OOPSLA), </booktitle> <pages> pages 391-405, </pages> <year> 1986. </year>
Reference-contexts: work, and Sect. 6 concludes. 2 Background This section reviews the mechanisms of parameterized classes and virtual types, examines the extend of their common ability to express basic genericity, and highlights the advantages of each over the other in terms of expressiveness. 2.1 Parameterized Classes In his often quoted paper <ref> [Mey86] </ref> Bertrand Meyer presents parameterized classes as a programming language mechanism in Eiffel which combines the benefits of polymorphism, as in ML, and those of inheritance. Several other programming languages, including CLU [LSAS77], C ++ [ES90] and Sather [Omo93] implement similar features.
Reference: [Mjo97] <author> Mjolner Informatics, </author> <title> ApS, Aarhus. The Mjolner System BETA Compiler Reference Manual, </title> <booktitle> 1997. </booktitle> <address> MIA 90-02(1.6), www.mjolner.dk. </address>
Reference-contexts: In the next section we show how this can be translated to the context of parameterized classes if the expressiveness 2 The current Beta implementation <ref> [Mjo97] </ref> allows the example in Fig. 4 to be fully compile-time type checked (except Beta uses a different syntax). of nested virtual classes (and hence the ability to express mutual recursion) is renounced.
Reference: [MMP89] <author> Ole Lehrmann Madsen and Birger Moller-Pedersen. </author> <title> Virtual classes: A powerful mechanism in object-oriented programming. </title> <booktitle> In Object Oriented Programming: Systems, Languages and Applications (OOPSLA). SIGPLAN, </booktitle> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: The notion of virtual types originates from the virtual patterns <ref> [MMP89] </ref> of the Beta programming language [KMMPN83,MMPN93]. A similar mechanism is also found as generics in Ada [Sei94], and as creators in [Sch96], and as partially abstract (existential) types in Quest [Car89]. More recently [Tho97] provides a suggestion for how to add virtual types to Java.
Reference: [MMPN93] <author> Ole Lehrmann Madsen, Birger Moller-Pedersen, and Kristen Nygaard. </author> <title> Object-Oriented Programming in the BETA Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference: [MN93] <author> Gail C. Murphy and David Notkin. </author> <title> The interaction between static typing and frameworks. </title> <type> Technical Report TR-93-09-02, </type> <institution> University of Washington, </institution> <year> 1993. </year>
Reference: [MN96] <author> Gail C. Murphy and David Notkin. </author> <title> On the use of static typing to support operations on frameworks. </title> <booktitle> Object Oriented Systems, </booktitle> <volume> 3(4) </volume> <pages> 197-213, </pages> <month> December </month> <year> 1996. </year>
Reference: [Omo93] <author> Steven Omohundro. </author> <title> The Sather programming language. </title> <journal> Dr. Dobb's Journal, </journal> <volume> 18(11), </volume> <month> October </month> <year> 1993. </year>
Reference-contexts: Several other programming languages, including CLU [LSAS77], C ++ [ES90] and Sather <ref> [Omo93] </ref> implement similar features. Most recently several such proposals have come forth for Java [OW97,MBL97,AFM97,BOSW98,CS98].
Reference: [OW97] <author> Martin Odersky and Philip Wadler. </author> <title> Pizza into Java: Translating theory into practice. </title> <publisher> In Jones [Jon97]. </publisher>
Reference: [Sch96] <author> Michael I. Schwartzbach. </author> <title> Object-oriented type systems: </title> <note> Principles and applications. from http://www.daimi.aau.dk/~mis, 1996. </note>
Reference-contexts: The notion of virtual types originates from the virtual patterns [MMP89] of the Beta programming language [KMMPN83,MMPN93]. A similar mechanism is also found as generics in Ada [Sei94], and as creators in <ref> [Sch96] </ref>, and as partially abstract (existential) types in Quest [Car89]. More recently [Tho97] provides a suggestion for how to add virtual types to Java. In [Tor98] Torgersen describes a variant of Beta's virtual types which is statically type safe. This is the approach which is built upon in this paper.
Reference: [Sei94] <author> Ed Seidewitz. </author> <title> Genericity versus inheritance reconsidered: Self-reference using generices. </title> <booktitle> In Object Oriented Programming: Systems, Languages and Applications (OOPSLA), </booktitle> <address> Portland, OR, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: The notion of virtual types originates from the virtual patterns [MMP89] of the Beta programming language [KMMPN83,MMPN93]. A similar mechanism is also found as generics in Ada <ref> [Sei94] </ref>, and as creators in [Sch96], and as partially abstract (existential) types in Quest [Car89]. More recently [Tho97] provides a suggestion for how to add virtual types to Java. In [Tor98] Torgersen describes a variant of Beta's virtual types which is statically type safe.
Reference: [Sha96a] <author> David Shang. </author> <title> Subtypes and convertible types. Object Currents, </title> <type> 1(6), </type> <month> June </month> <year> 1996. </year>
Reference-contexts: Unfortunately, research on Transframe has, to our knowledge, never been published at the major scientific conferences and journals of object-orientation it has been informally introduced in Shang's monthly column in the online journal Object Currents. Transframe unifies classes with generic classes <ref> [Sha96a] </ref> and allows subtyping among these through a subtype relation almost as permissive as that of structural virtual types.
Reference: [Sha96b] <author> David Shang. Transframe: </author> <title> The Annotated Reference. </title> <institution> Software Systems Research Laboratory, Motorola, Inc., Shamburg, IL, </institution> <month> November </month> <year> 1996. </year> <note> www.transframe.com. </note>
Reference-contexts: While this language could be expanded to capture the full expressiveness of both mechanisms, it seems more desirable if they can be unified to provide one single coherent notion of generic classes. The Transframe language <ref> [Sha96b] </ref>, designed by David Shang, captures a lot of the expressiveness of structural virtual types as described in this paper, including the distinction between bounded and bound parameters.
Reference: [Tho97] <author> Kresten Krab Thorup. </author> <title> Genericity in Java with virtual types. </title> <booktitle> In Aksit and Matsouka [AM97], </booktitle> <pages> pages 444-471. </pages>
Reference-contexts: The notion of virtual types originates from the virtual patterns [MMP89] of the Beta programming language [KMMPN83,MMPN93]. A similar mechanism is also found as generics in Ada [Sei94], and as creators in [Sch96], and as partially abstract (existential) types in Quest [Car89]. More recently <ref> [Tho97] </ref> provides a suggestion for how to add virtual types to Java. In [Tor98] Torgersen describes a variant of Beta's virtual types which is statically type safe. This is the approach which is built upon in this paper.
Reference: [Tor98] <author> Mads Torgersen. </author> <title> Virtual types are statically safe. </title> <editor> In Kim Bruce, editor, </editor> <booktitle> 5th Workshop on Foundations of Object-Oriented Languages, </booktitle> <address> San Diego, CA, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: A similar mechanism is also found as generics in Ada [Sei94], and as creators in [Sch96], and as partially abstract (existential) types in Quest [Car89]. More recently [Tho97] provides a suggestion for how to add virtual types to Java. In <ref> [Tor98] </ref> Torgersen describes a variant of Beta's virtual types which is statically type safe. This is the approach which is built upon in this paper. In [IP99], Igarashi and Pierce present the first formal account of these statically safe virtual types.
Reference: [TT98] <author> Kresten Krab Thorup and Mads Torgersen. </author> <title> Structured virtual types. Informal session on types for Java, </title> <booktitle> 5th Workshop on Foundations of Object-Oriented Languages, </booktitle> <month> January </month> <year> 1998. </year>
Reference-contexts: Unlike the work in [BOW98], this paper presents a unification of the mechanisms of parameterized classes and virtual types, gaining the benefits of both, as originally suggested in <ref> [TT98] </ref>. The paper proceeds as follows. Section 2 introduces the notions of param-eterized classes and virtual types, and discusses similarities and differences in what can be achieved with these two genericity mechanisms.
References-found: 34

