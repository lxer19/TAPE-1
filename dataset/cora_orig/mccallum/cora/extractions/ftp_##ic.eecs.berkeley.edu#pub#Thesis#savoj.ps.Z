URL: ftp://ic.eecs.berkeley.edu/pub/Thesis/savoj.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/Thesis/thesis.html
Root-URL: 
Title: Don't Cares in Multi-Level Network Optimization  
Author: Hamid Savoj Robert K. Brayton 
Degree: Thesis Committee Chairman  
Note: Prof.  
Affiliation: University of California Department of Electrical Engineering Berkeley, California and Computer Sciences  
Abstract: An important factor in the optimization of a multi-level circuit, modeled as a Boolean network, is to compute the flexibility for implementing each node of the network and to exploit this flexibility to get a better functional implementation at that node. The most general form for describing input-output behavior of a Boolean network is to use a Boolean relation. This relation or a subset of it, is then used to compute the flexibility for implementing each node in the network. The nodes in the network can be either single or multiple output. In the case of a network composed of single-output nodes, this flexibility is captured by don't cares. Techniques for computing both maximum and compatible don't care sets for each node are presented. In the case of multi-output nodes, don't cares are not sufficient to express input-output behavior of the node. Thus, we present techniques to compute maximal and compatible flexibility at multi-output nodes using Boolean relations. The current model for representing a Boolean circuit uses single output nodes. We present efficient techniques for single-output node simplification that use don't cares in terms of the fanins of node being simplified. The don't care set in terms of fanins of a node is called the local don't care set for that node; it usually has a small size and can be used to remove all the redundancies within that node. Practical issues for computing local don't cares and simplifying nodes are discussed in detail and experimental results are presented that show the effectiveness of the approach. New scripts are designed for technology independent optimization of Boolean circuits which use these new techniques. Finally, a new Boolean matching algorithm is presented that can match two functions with given don't care sets. To prove the effectiveness of the approach, this algorithm is used within a technology mapper where matches are sought between subfunctions in the network and sets of gates in the library. The symmetries of the gates in the library are used to speed up the matching process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Abouzeid, K. Sakouti, G. Saucier, and F. Poirot. </author> <title> Multilevel synthesis minimizing the routing factor. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 365-368, </pages> <address> Orlando, </address> <month> June </month> <year> 1990. </year>
Reference: [2] <author> V. D. Agrawal, K-T. Cheng, and P. Agrawal. </author> <title> CONTEST: A Concurrent Test Generator for Sequential Circuits. </title> <booktitle> In Proceedings of the 25th Design Automation Conference, </booktitle> <pages> pages 84-89, </pages> <month> June </month> <year> 1988. </year>
Reference: [3] <author> A. V. Aho, M. Ganapathi, and S. Tjiang. </author> <title> Code generation using tree matching and dynamic programming. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(4) </volume> <pages> 491-516, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In [43], a tree matching algorithm is used to implement 113 114 CHAPTER 7. BOOLEAN MATCHING IN LOGIC SYNTHESIS a network in terms of the gates in a library. This technique had been applied before in programming language compilers for generation of optimal code for expression trees <ref> [3] </ref>. A pioneering work using Boolean methods as an alternative for technology mapping was given in [50]. Unlike tree matching, the Boolean matching techniques allow the use of don't care information. This can result in better circuits because some matches not detectable by tree matching techniques can be found.
Reference: [4] <institution> Act 1 Family Gate Arrays. </institution> <note> Design reference manual. </note>
Reference: [5] <author> A. Aziz. </author> <title> private communication, </title> <year> 1991. </year>
Reference: [6] <author> K. Bartlett, R. K. Brayton, G. D. Hachtel, R. M. Jacoby, C. R. Morrison a nd R. L. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> Multi-level Logic Minimization Using Implicit Don't Cares. </title> <journal> In IEEE Transactions on CAD, </journal> <pages> pages 723-740, </pages> <month> June </month> <year> 1988. </year>
Reference: [7] <author> K. A. Bartlett, G. D. Bostick, G. D. Hachtel, R. M. Jacoby, P. H. Lightner, P. H. Moceyunas, C. R. Morrison, and Ravenscroft D. BOLD: </author> <title> A Multiple-Level Logic Optimization System. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1987. </year>
Reference: [8] <author> M. Beardslee, C. Kring, R. Murgai, H. Savoj, R.K. Brayton, and A. Sangiovanni-Vinventelli. </author> <title> SLIP: A Software Environment for System Level Interactive Partitioning. </title> <booktitle> 133 134 BIBLIOGRAPHY In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 280-283, </pages> <month> Novem-ber </month> <year> 1989. </year>
Reference: [9] <author> K. L. Brace, R. E. Bryant, and R. L. Rudell. </author> <title> Efficient Implementation of a BDD Package. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference: [10] <author> R. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang. </author> <title> MIS: Multiple-Level Logic Optimization System. </title> <booktitle> In IEEE Transactions on Computer Aided Design of Integrated Circuits and Systems, </booktitle> <pages> pages 1062-1081, </pages> <month> November </month> <year> 1987. </year>
Reference: [11] <author> R. K. Brayton, G. D. Hachtel, C.T. McMullen, and A.L. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference: [12] <author> R. K. Brayton and F. Somenzi. </author> <title> Boolean Relations and the Incomplete Specification of Logic Networks. </title> <booktitle> In VLSI'89, </booktitle> <month> August </month> <year> 1989. </year>
Reference: [13] <author> R.K. Brayton and C. McMullen. </author> <title> The decomposition and factorization of Boolean expressions. </title> <booktitle> In The International Symposium on Circuits and Systems, </booktitle> <pages> pages 49-54, </pages> <month> May </month> <year> 1982. </year>
Reference: [14] <author> R. E. Bryant. </author> <title> Graph Based Algorithms for Boolean Function Manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference: [15] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, and D. L. Dill. </author> <title> Sequential Circuit Verification Using Symbolic Model Checking. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <address> Orlando, </address> <month> June </month> <year> 1990. </year>
Reference: [16] <author> J. Burns, A. Casotto, M. Igusa, F. Marron, F. Romeo, A. Sangiovanni-Vincentelli, C. Sechen, H. Shin, G. Srinath, and H. Yaghutiel. MOSAICO: </author> <title> An integrated Macro-cell Layout System. </title> <booktitle> In Proceedings of the VLSI-87 Conference, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1987. </year>
Reference: [17] <author> E. Cerny. </author> <title> An approach to unified methodology of combinational switching circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 27(8), </volume> <year> 1977. </year>
Reference: [18] <author> E. Cerny and C. Mauras. </author> <title> Tautology Checking Using Cross-Controllability and Cross-Observability Relations. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 34-37, </pages> <month> November </month> <year> 1990. </year> <note> BIBLIOGRAPHY 135 </note>
Reference: [19] <author> H. Cho, G. Hachtel, S. Jeong, B. Plessier, E. Schwarz, and F. Somenzi. </author> <title> ATPG Aspects of FSM Verification. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1990. </year>
Reference: [20] <author> E. M. Clarke, E. A. Emerson, and P. Sistla. </author> <title> Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications. </title> <journal> ACM Transactions on Programming Language Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference: [21] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of Sequential Machines Based on Symbolic Execution. In Proceedings of the Workshop on Automatic Verification Methods for Finite State Systems, </title> <address> Grenoble, France, </address> <year> 1989. </year>
Reference: [22] <author> O. Coudert, J. C. Madre, and C. Berthet. </author> <title> Verifying Temporal Properties of Sequential Machines Without Building their State Diagrams. In Worshop on Computer-Aided Verification, </title> <institution> Rutgers, </institution> <month> June </month> <year> 1990. </year>
Reference: [23] <author> M. Damiani and G. De Micheli. </author> <title> Observability Don't Care Sets and Boolean Relations. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 502-505, </pages> <month> November </month> <year> 1990. </year>
Reference: [24] <author> M. Damiani and G. De Micheli. </author> <title> Derivation of Don't Care Conditions by Perturbation Analysis of Combinational Multiple-Level Logic Circuits. </title> <booktitle> In International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1991. </year>
Reference: [25] <author> G. De Micheli. </author> <title> Logic Transformations for Synchronous Logic Synthesis. </title> <booktitle> In Hawaii International Conference on System Sciences, </booktitle> <pages> pages 407-416, </pages> <month> January </month> <year> 1990. </year>
Reference: [26] <author> Ewald Detjens, Gary Gannot, Richard Rudell, Alberto Sangiovanni-Vincentelli, and Albert Wang. </author> <title> Technology Mapping in MIS. </title> <booktitle> In International Conference on Computer Aided Design, </booktitle> <pages> pages 116-119. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1987. </year>
Reference-contexts: Unlike tree matching, the Boolean matching techniques allow the use of don't care information. This can result in better circuits because some matches not detectable by tree matching techniques can be found. Additionally, there is no need to add inverters to the circuit, as proposed in <ref> [26] </ref>, because both input phases of a function being matched are considered at the same time. In [50], two different algorithms for Boolean matching are proposed, one of which uses don't cares and the other does not. <p> We use this new Boolean matching technique within a technology mapping environment which uses the methods developed in <ref> [43, 26, 66] </ref>. First, a circuit is decomposed into a set of disjoint trees with two-input nodes. Dynamic programming approaches are 7.2. BOOLEAN MATCHING 115 then used to map each of the trees. Nodes of a tree are visited in depth first order starting from the leaves. <p> The given circuit is first decomposed into a set of 2-input gates and then into a set of disjoint trees. As in <ref> [43, 26, 66] </ref>, we use dynamic programming to map each of the trees into a set of library gates. The trees are mapped in topological order; each tree is mapped after all its fanin trees. Mapping is a two step process.
Reference: [27] <author> S. Dey, F. Brglez, and G. Kedem. </author> <title> Corolla Based Circuit Partitioning and Resynthesis. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 607-612, </pages> <address> Orlando, </address> <month> June </month> <year> 1990. </year>
Reference: [28] <author> Donald L. Dietmeyer and Peter Schneider. </author> <title> Identification of Symmetry, Redundancy and Equivalence of Boolean Functions. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-16(6):804-807, </volume> <month> December </month> <year> 1967. </year> <note> 136 BIBLIOGRAPHY </note>
Reference-contexts: In [50], two different algorithms for Boolean matching are proposed, one of which uses don't cares and the other does not. When matching without don't cares, symmetries are used to speed up the matching process. Techniques for finding symmetries of a function were discussed in <ref> [28] </ref> and were applied in a technology mapping algorithm based on a covering approach [57] more recently. For matching with don't cares, an alternative algorithm that does not use symmetries was proposed [50]. In [28], symmetries were also computed in the presence of don't cares and it was shown that symmetry <p> Techniques for finding symmetries of a function were discussed in <ref> [28] </ref> and were applied in a technology mapping algorithm based on a covering approach [57] more recently. For matching with don't cares, an alternative algorithm that does not use symmetries was proposed [50]. In [28], symmetries were also computed in the presence of don't cares and it was shown that symmetry is not a transitive property when don't cares are present. Hence, computation of symmetry sets in this situation is expensive. <p> Two inputs y i and y j of a function g are symmetric if g y i y j g y i y j as shown in <ref> [28] </ref>. Furthermore if y i is symmetric with y j and y j is symmetric with y k , y i is also symmetric with y k . There is another kind of symmetry which can be used to speed up Boolean matching.
Reference: [29] <author> W. E. Donath. </author> <title> Physical Design Automation of VLSI Systems, Chapter Logic Partitioning. </title> <publisher> Benjamin/Cummings Publishing Company Inc., </publisher> <year> 1988. </year>
Reference: [30] <author> C.M. Fiduccia and R. Mattheyses. </author> <title> A linear-time heuristic for improving network partitions. </title> <booktitle> In 19th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 241-247, </pages> <month> July </month> <year> 1982. </year>
Reference: [31] <author> M. Fujita and Y Matsunaga. </author> <title> Multi-level Logic Minimization based on Minimal Support and its Application to the Minimization of Look-up Table Type FPGAs. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: If S x i f l f h , the new support is saved and also used to generate other supports which exclude x i . Other techniques have been recently suggested for generating all possible supports of a function <ref> [78, 31] </ref>.
Reference: [32] <author> M. Fujita, Y. Tamiya, Y. Matsunaga, and K.C. Chen. </author> <title> Multi-Level Logic Synthesis for Boolean Relations. </title> <note> In submitted to VLSI, </note> <year> 1991. </year>
Reference: [33] <author> H. Fujiwara and T. Shimono. </author> <title> On the Acceleration of Test Generation Algorithms. </title> <journal> In IEEE Transactions on Computers, </journal> <pages> pages 1137-1144, </pages> <month> December </month> <year> 1983. </year>
Reference: [34] <author> A. Ghosh, S. Devadas, and A. R. </author> <title> Newton. Heuristic Minimization of Boolean Relations Using Testing Techniques. </title> <booktitle> In IEEE international Conference on Computer Design, </booktitle> <address> Cambridge, </address> <month> September </month> <year> 1990. </year>
Reference: [35] <author> A. Ghosh, S. Devadas, and A. R. </author> <title> Newton. Test Generation and Verification for Highly Sequential Circuits. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 652-667, </pages> <month> May </month> <year> 1991. </year>
Reference: [36] <author> P. Goel. </author> <title> An Implicit Enumeration Algorithm to generate tests for combinational logic circuits. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> volume C30, </volume> <pages> pages 215-222, </pages> <month> March </month> <year> 1981. </year>
Reference: [37] <author> G. D. Hachtel, R. M. Jacoby, and P. H. Moceyunas. </author> <title> On Computing and Approximating the Observability Don't Care Set. </title> <booktitle> In MCNC Workshop in Logic Synthesis, </booktitle> <year> 1989. </year>
Reference: [38] <author> L. J. Hafer and A. Parker. </author> <title> Register-Transfer Level Digital Design Automation: The Allocation Process. </title> <booktitle> In 15th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 213-219, </pages> <month> June </month> <year> 1978. </year>
Reference: [39] <author> S. Hong, R. Cain, and D. Ostapko. </author> <title> MINI: A Heuristic Approach for Logic Minimization. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 18 </volume> <pages> 443-458, </pages> <month> September </month> <year> 1974. </year>
Reference: [40] <author> Xilinx Inc. </author> <title> The programmable gate array data book. BIBLIOGRAPHY 137 </title>
Reference: [41] <author> R. Jacoby, P. Moceyunas, H. Cho, and Hachtel G. </author> <title> New ATPG Techniques for Logic Optimization. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 548-551, </pages> <month> November </month> <year> 1989. </year>
Reference: [42] <author> S.-W. Jeong, B. Plessier, G.D. Hachtel, and F. Somenzi. </author> <title> Variable Ordering and Selection for FSM Traversal. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 476-479, </pages> <month> November </month> <year> 1991. </year>
Reference: [43] <author> K. Keutzer. Dagon: </author> <title> Technology Binding and Local Optimization by DAG Matching. </title> <booktitle> In 24th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 341-347, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: introduction of packaged logic gates. In <ref> [43] </ref>, a tree matching algorithm is used to implement 113 114 CHAPTER 7. BOOLEAN MATCHING IN LOGIC SYNTHESIS a network in terms of the gates in a library. This technique had been applied before in programming language compilers for generation of optimal code for expression trees [3]. <p> We use this new Boolean matching technique within a technology mapping environment which uses the methods developed in <ref> [43, 26, 66] </ref>. First, a circuit is decomposed into a set of disjoint trees with two-input nodes. Dynamic programming approaches are 7.2. BOOLEAN MATCHING 115 then used to map each of the trees. Nodes of a tree are visited in depth first order starting from the leaves. <p> The given circuit is first decomposed into a set of 2-input gates and then into a set of disjoint trees. As in <ref> [43, 26, 66] </ref>, we use dynamic programming to map each of the trees into a set of library gates. The trees are mapped in topological order; each tree is mapped after all its fanin trees. Mapping is a two step process.
Reference: [44] <author> R. P. Kurshan. </author> <title> Analysis of Discrete Event Coordination. </title> <publisher> Springer Verlog, </publisher> <year> 1990. </year>
Reference: [45] <author> T. Larabee. </author> <title> Efficient Generation of Test Patterns Using Boolean Difference. </title> <booktitle> In Proceedings of the International Test Conference, </booktitle> <pages> pages 795-801, </pages> <month> August </month> <year> 1989. </year>
Reference: [46] <author> C. E. Leiserson, F. M. Rose, and J. B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <editor> In R. Bryant, editor, </editor> <booktitle> 3rd Caltech Conference on Very Large Scale Integration, </booktitle> <pages> pages 87-116, </pages> <year> 1983. </year>
Reference: [47] <author> M. Lightner and W. Wolf. </author> <title> Experiments in Logic Optimization. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1988. </year>
Reference: [48] <author> B. Lin, H. Touati, and R. </author> <title> Newton. Don't Care Minimization of Multi-Level Sequential Logic Networks. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1990. </year>
Reference: [49] <author> H-K. T. Ma, S. Devadas, A. R. Newton, and A. Sangiovanni-Vincentelli. </author> <title> Test Generation for Sequential Circuits. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 1081-1093, </pages> <month> October </month> <year> 1988. </year>
Reference: [50] <author> F. Mailhot and G. D. </author> <title> Micheli. Technology Mapping Using Boolean Matching. </title> <booktitle> In European Design Automation Conference, </booktitle> <pages> pages 180-185, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: BOOLEAN MATCHING IN LOGIC SYNTHESIS a network in terms of the gates in a library. This technique had been applied before in programming language compilers for generation of optimal code for expression trees [3]. A pioneering work using Boolean methods as an alternative for technology mapping was given in <ref> [50] </ref>. Unlike tree matching, the Boolean matching techniques allow the use of don't care information. This can result in better circuits because some matches not detectable by tree matching techniques can be found. <p> This can result in better circuits because some matches not detectable by tree matching techniques can be found. Additionally, there is no need to add inverters to the circuit, as proposed in [26], because both input phases of a function being matched are considered at the same time. In <ref> [50] </ref>, two different algorithms for Boolean matching are proposed, one of which uses don't cares and the other does not. When matching without don't cares, symmetries are used to speed up the matching process. <p> Techniques for finding symmetries of a function were discussed in [28] and were applied in a technology mapping algorithm based on a covering approach [57] more recently. For matching with don't cares, an alternative algorithm that does not use symmetries was proposed <ref> [50] </ref>. In [28], symmetries were also computed in the presence of don't cares and it was shown that symmetry is not a transitive property when don't cares are present. Hence, computation of symmetry sets in this situation is expensive. The algorithm in [50] uses a matching compatibility graph, built during the <p> algorithm that does not use symmetries was proposed <ref> [50] </ref>. In [28], symmetries were also computed in the presence of don't cares and it was shown that symmetry is not a transitive property when don't cares are present. Hence, computation of symmetry sets in this situation is expensive. The algorithm in [50] uses a matching compatibility graph, built during the setup phase, to find the existance of a match between two functions in the presence of don't care conditions. Each node of this graph corresponds to an NPN-equivalent [60] function. <p> However, larger cell libraries require more matchings and imply the use of functions with more inputs, making technology mapping with very large libraries computationally expensive. In <ref> [50] </ref>, a technique for speeding-up the matching by grouping gates in the library was proposed. The groups of gates are composed in such a way that, after finding a match with a representative gate, the match with all gates in the group is determined. <p> The first phase of technology mapping is to traverse the target tree bottom-up from the primary inputs. At each node, all possible functions up to a given number of inputs having that node as output are considered. These functions are called cluster functions; their corresponding subgraphs are called clusters <ref> [50] </ref>. In our formulation, a cluster is represented 7.3. BOOLEAN MATCHING FOR TECHNOLOGY MAPPING 119 by a root node and a set of leaf nodes (cutset of nodes) separating the root node from the rest of the network. <p> Computing local don't cares for all such clusters is then a costly operation. 7.5 Library Organization Before technology mapping, a setup phase is used to process gates in the library and generate particular data structures called NUTS. The term NUT is the abbreviation for Negative Unate Transform introduced in <ref> [50] </ref>. All the gates in a NUT are equivalent to a 128 CHAPTER 7. BOOLEAN MATCHING IN LOGIC SYNTHESIS NUT representative in the sense that the function of each gate can be obtained by inverting some of the inputs of the NUT representative. <p> Instead of computing the negative unate transforms of the input variables as in <ref> [50] </ref>, we use the Boolean matching algorithm to place each gate in its corresponding NUT structure. The setup phase parses the library, reading one gate at a time. A gate is added to a NUT if it or its complement matches the NUT representative.
Reference: [51] <author> A. Malik, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> A Modified Approach to two-level Logic Minimization. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 106-109, </pages> <month> November </month> <year> 1988. </year> <note> 138 BIBLIOGRAPHY </note>
Reference: [52] <author> S. Malik, A. R. Wang, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Logic Verification Using Binary Decision Diagrams in a Logic Synthesis Environments. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 6-9, </pages> <month> November </month> <year> 1988. </year>
Reference: [53] <author> Sharad Malik. </author> <title> Combinational Logic Optimization Techniques in Sequential Logic Synthesis. </title> <type> PhD thesis, </type> <address> U. C. Berkeley, </address> <year> 1990. </year>
Reference: [54] <author> P. McGeer and R. K. Brayton. </author> <title> Consistency and Observability Invariance in MultiLevel Logic Synthesis. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <year> 1989. </year>
Reference: [55] <author> P. McGeer and R. K. Brayton. </author> <title> The Observability Don't Care Set and Its Approximations. </title> <booktitle> In IEEE International Conference on Computer Design, </booktitle> <pages> pages 45,48, </pages> <month> September </month> <year> 1990. </year>
Reference: [56] <author> J. D. Morison, N. E. Peeling, and T. L. Thorp. ELLA: </author> <booktitle> Hardware Description or Specification? In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 54-56, </pages> <month> November </month> <year> 1984. </year>
Reference: [57] <author> C. R. Morrison, R. M. Jacoby, and G. D. Hachtel. </author> <title> Logic and Architecture Synthesis for Silicon Compilers, chapter TECHMAP: Technology Mapping with Delay and Area Optimization, </title> <address> pages 53-64. </address> <publisher> Elsevier Science Publishers B.V.(North-Holland), </publisher> <year> 1989. </year>
Reference-contexts: When matching without don't cares, symmetries are used to speed up the matching process. Techniques for finding symmetries of a function were discussed in [28] and were applied in a technology mapping algorithm based on a covering approach <ref> [57] </ref> more recently. For matching with don't cares, an alternative algorithm that does not use symmetries was proposed [50]. In [28], symmetries were also computed in the presence of don't cares and it was shown that symmetry is not a transitive property when don't cares are present.
Reference: [58] <author> R. Murgai, Y. Nishizaki, N. Shenoy, R. Brayton, and Sangiovanni-Vincentelli A. </author> <title> Logic Synthesis for Programmable Gate Arrays. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 620-625, </pages> <address> Orlando, </address> <month> June </month> <year> 1990. </year>
Reference: [59] <author> R. Murgai, N. Shenoy, R. Brayton, and Sangiovanni-Vincentelli A. </author> <title> Improved Logic Synthesis Algorithms for Table Look Up Architectures. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 564-567, </pages> <month> November </month> <year> 1991. </year>
Reference: [60] <author> S. Muroga. </author> <title> Threshold Logic and its Applications. </title> <publisher> John Wiley, </publisher> <year> 1971. </year>
Reference-contexts: The algorithm in [50] uses a matching compatibility graph, built during the setup phase, to find the existance of a match between two functions in the presence of don't care conditions. Each node of this graph corresponds to an NPN-equivalent <ref> [60] </ref> function. The size of this graph grows exponentially with the size of the variable support of the functions, and has limited the use of don't cares realistically to the matching of functions with at most 4 inputs.
Reference: [61] <author> S. Muroga, Y. Kambayashi, H. C. Lai, and J. N. Culliney. </author> <title> The Transduction Method Design of Logic Networks Based on Permissible Functions. </title> <journal> In IEEE Transactions on Computers, </journal> <month> October </month> <year> 1989. </year> <note> BIBLIOGRAPHY 139 </note>
Reference: [62] <author> A. Parker, D. Thomas, D. Siewiorek, M. Barbacci, L. Hafer, G. Leive, and J. Kim. </author> <title> The CMU Design Automation System. </title> <booktitle> In 16th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 73-79, </pages> <month> June </month> <year> 1979. </year>
Reference: [63] <author> M. Pedram and N. Bhat. </author> <title> Layout Driven Technology Mapping. </title> <booktitle> In 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 99-105, </pages> <address> San Francisco, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Although we have only used this Boolean matching technique to find the best mapped circuit in terms of area and organizing the given library, the algorithm is general and can be used in other contexts such as delay optimization, or layout driven technology mapping <ref> [63] </ref>. 7.2 Boolean Matching We address the Boolean matching problem for two functions f (x 1 ; : : : ; x m ) and g (y 1 ; : : : ; y m ) with the same number of inputs and don't care sets d f (x 1 ;
Reference: [64] <author> IEEE Press. </author> <title> Ieee standard vhdl language reference manual. </title>
Reference: [65] <author> J. Reed, A. Sangiovanni-Vincentelli, and M. Santamauro. </author> <title> A New Symbolic Channel Router: </title> <booktitle> YACR2. In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 208-219, </pages> <month> July </month> <year> 1985. </year>
Reference: [66] <author> Rick Rudell. </author> <title> Logic Synthesis for VLSI Design. </title> <type> PhD thesis, </type> <address> U. C. Berkeley, </address> <month> April </month> <year> 1989. </year> <note> Memorandum UCB/ERL M89/49. </note>
Reference-contexts: We use this new Boolean matching technique within a technology mapping environment which uses the methods developed in <ref> [43, 26, 66] </ref>. First, a circuit is decomposed into a set of disjoint trees with two-input nodes. Dynamic programming approaches are 7.2. BOOLEAN MATCHING 115 then used to map each of the trees. Nodes of a tree are visited in depth first order starting from the leaves. <p> Don't cares are computed for each sub-function using techniques discussed in previous chapters. The second application of Boolean matching is to group all the gates in the library. As demonstrated in <ref> [66] </ref>, the inclusion of complex CMOS gates in the library is useful because it may lead to a significant reduction in the required area for implementing some combinatorial functions. <p> The given circuit is first decomposed into a set of 2-input gates and then into a set of disjoint trees. As in <ref> [43, 26, 66] </ref>, we use dynamic programming to map each of the trees into a set of library gates. The trees are mapped in topological order; each tree is mapped after all its fanin trees. Mapping is a two step process.
Reference: [67] <author> A. Saldanha, A. Wang, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Multi-Level Logic Simplification using Don't Cares and Filters. </title> <booktitle> In Design Automation Conference, </booktitle> <year> 1989. </year>
Reference: [68] <author> H. Sato, Y. Yasue, F. Matsunaga, and M. Fujita. </author> <title> Boolean Resubstitution with Permissible Functions and Binary Decision Diagrams. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 284-289, </pages> <address> Orlando, </address> <month> June </month> <year> 1990. </year>
Reference: [69] <author> H. Savoj and R. Brayton. </author> <title> The Use of Observability and External Don't Cares for the Simplification of Multi-Level Networks. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 297-301, </pages> <address> Orlando, </address> <month> June </month> <year> 1990. </year>
Reference: [70] <author> H. Savoj and R. K. Brayton. </author> <title> Observability Relations and Observability Don't Cares. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 518-521, </pages> <month> November </month> <year> 1991. </year>
Reference: [71] <author> H. Savoj, A.A. Malik, and R.K. Brayton. </author> <title> Fast Two-Level Logic Minimizers for Two-Level Logic Synthesis. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 544-547, </pages> <month> November </month> <year> 1989. </year>
Reference: [72] <author> H. Savoj, H. Touati, and R. K. Brayton. </author> <title> Extracting Local Don't Cares for Network Optimization. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 514-517, </pages> <month> November </month> <year> 1991. </year> <note> 140 BIBLIOGRAPHY </note>
Reference-contexts: We compute compatible external plus observability don't cares at each of the nodes of the network as explained in <ref> [72] </ref>. These trees are sorted in topological order. Each tree is mapped after all its fanin trees have been already mapped. Image computation techniques are used to find local don't cares at the leaves of the tree that is being mapped.
Reference: [73] <author> H. Savoj, H-Y. Wang, and R. Brayton. </author> <title> Improved Scripts in MIS-II for Logic Minimization of Combinational Circuits. </title> <booktitle> In International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Table 7.1 shows the results for combinational circuits without any external don't cares. These circuits are well optimized before technology mapping, using the rugged script <ref> [73] </ref> in SIS. The MCNC library lib2 is used for the mapping. The column start shows the literal count in factored form for each of unmapped but optimized circuits. The columns SIS, no dc, tree dc, and full dc show the area of mapped circuits.
Reference: [74] <author> M. Schulz and E. Auth. </author> <title> Advanced automatic test pattern generation and redundancy identification techniques. </title> <booktitle> In ftcs, </booktitle> <pages> pages 30-35, </pages> <month> June </month> <year> 1988. </year>
Reference: [75] <author> C. Sechen and A. Sangiovanni-Vincentelli. </author> <title> The TimberWolf Placement and Routing Package. </title> <booktitle> In Proceedings of the 1984 Custom Integrated Circuit Conference, </booktitle> <pages> pages 522-527, </pages> <address> Rochester, NY, </address> <month> May </month> <year> 1984. </year>
Reference: [76] <author> E. Sentovich and R. K. Brayton. </author> <title> Preserving Don't Care Conditions During Retiming. </title> <booktitle> In International Conference on VLSI, </booktitle> <month> August </month> <year> 1991. </year>
Reference: [77] <author> E. Sentovich, K.J. Singh, C. Moon, H. Savoj, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Sequential circuit design using synthesis and optimization, </title> <year> 1992. </year>
Reference: [78] <author> H. </author> <title> Touati. </title> <type> private communication, </type> <year> 1990. </year>
Reference-contexts: If S x i f l f h , the new support is saved and also used to generate other supports which exclude x i . Other techniques have been recently suggested for generating all possible supports of a function <ref> [78, 31] </ref>.
Reference: [79] <author> H. Touati, R. Brayton, and R. Kurshan. </author> <title> Testing language containment for !-automata using BDD's. </title> <booktitle> In International Workshop on Formal Methods in VLSI Design, </booktitle> <year> 1991. </year>
Reference: [80] <author> H. Touati, H. Savoj, and R.K. Brayton. </author> <title> Delay Optimization of Combinational Circuits by Clustering and Partial Collapsing. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 188-191, </pages> <month> November </month> <year> 1991. </year>
Reference: [81] <author> H. Touati, H. Savoj, B. Lin, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Implicit State Enumeration of Finite State Machines using BDD's. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: The recursive image computation method <ref> [81] </ref> is then used to find all the reachable points in the space of the leaves of the tree. The complement of the reachable set of points gives the local don't care set for the tree in terms of its leaf variables.
Reference: [82] <author> Herve Touati. </author> <title> Performance Driven Technology Mapping. </title> <type> PhD thesis, </type> <address> U. C. Berkeley, </address> <year> 1990. </year>
Reference: [83] <author> C-J. Tseng and D. P. Siewiorek. </author> <title> Automated Synthesis of Data Paths in Digital Systems. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 379-395, </pages> <month> July </month> <year> 1986. </year>
Reference: [84] <author> J. Vasudevamurthy and J. Rajski. </author> <title> A Method for Concurrent Decomposition and Factorization of Boolean Expressions. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 510-513, </pages> <month> November </month> <year> 1990. </year> <note> BIBLIOGRAPHY 141 </note>
Reference: [85] <author> R. A. Walker and D. E. Thomas. </author> <title> Behavioral Transformation for Algorithmic Level IC Design. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 8(10) </volume> <pages> 1115-1128, </pages> <month> October </month> <year> 1989. </year>
Reference: [86] <author> Y. Watanabe and R.K. Brayton. </author> <title> Heuristic Minimization of Boolean Relations. </title> <booktitle> In International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1991. </year>
Reference: [87] <author> G. Whitcomb and A. R. </author> <title> Newton. Abstract Data Types and High-Level Synthesis. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 680-685, </pages> <address> Orlando, </address> <month> June </month> <year> 1990. </year>
Reference: [88] <author> T. Yoshimura and E. S. Kuh. </author> <title> Efficient algorithms for channel routing. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 25-35, </pages> <month> January </month> <year> 1982. </year>
References-found: 88

