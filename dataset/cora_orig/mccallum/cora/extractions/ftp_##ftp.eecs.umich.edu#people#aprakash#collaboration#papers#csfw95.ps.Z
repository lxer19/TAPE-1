URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/csfw95.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/jaegert/pubs.html
Root-URL: http://www.cs.umich.edu
Email: E-mails: fjaegertjaprakashg@eecs.umich.edu  
Title: Implementation of a Discretionary Access Control Model for Script-based Systems  
Author: Trent Jaeger and Atul Prakash 
Keyword: Discretionary access control, script-based systems, authorization, authentication, operating systems, file systems.  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Software Systems Research Laboratory Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: Powerful applications can be implemented using command scripts. A command script is a program written by one user, called a writer, and made available to another user, called the reader, who executes the script. For instance, command scripts could be used by Mosaic, the popular World-wide Web browsing tool, to provide fancy interfaces to services, such as banking, shopping, etc. However, the use of command scripts presents a serious security problem. A command script is run with the reader's access rights, so a writer can use a command script to gain unauthorized access to the reader's data and applications. Existing solutions to the problem either severely restrict I/O capability of scripts, limiting the range of applications that can be supported, or permit all I/O to scripts, potentially compromising the security of the reader's data. We define a discretionary access control model that permits users to flexibly limit the access rights of the processes that execute a command script. We use this model in a prototype system that safely executes command scripts available from Mosaic. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Trusted Mach kernel primer. Trusted Information Systems, Inc., </institution> <year> 1991. </year>
Reference-contexts: Lastly, we assume the presence of a secure operating system, such as Trusted Mach <ref> [1] </ref>, that provides authentication of principals, secure communication channels, a secure initialization procedure, etc. 3 Example Problem An example where the reader must permit the command script to perform some limited I/O is the World-wide Web (WWW) server for the Upper Atmospheric Research Collaboratory (UARC) [4] system.
Reference: [2] <author> N. S. Borenstein. </author> <title> Computational mail as a network infrastructure for computer-supported cooperative work. </title> <booktitle> In CSCW 92 Proceedings, </booktitle> <pages> pages 67-74, </pages> <year> 1992. </year>
Reference-contexts: Examples of systems that utilize command scripts include: (1) Mosaic, the popular information server for the World-wide Web; (2) Telescript 1 [17], a system meant for building electronic marketplaces; and (3) active or enabled mail systems <ref> [2, 3, 6] </ref>. For example, Mosaic uses command scripts to define server actions when a client wants to access information from the server. Unfortunately, the use of command scripts also presents a major security risk. Figure 1 demonstrates how a command script is composed and executed.
Reference: [3] <author> N. S. Borenstein. </author> <title> Email with a mind of its own: The Safe-Tcl language for enabled mail. </title> <note> In ULPAA '94, 1994. Available via anonymous ftp from ics.uci.edu in the file mrose/safe-tcl/safe-tcl.tar.Z. </note>
Reference-contexts: Examples of systems that utilize command scripts include: (1) Mosaic, the popular information server for the World-wide Web; (2) Telescript 1 [17], a system meant for building electronic marketplaces; and (3) active or enabled mail systems <ref> [2, 3, 6] </ref>. For example, Mosaic uses command scripts to define server actions when a client wants to access information from the server. Unfortunately, the use of command scripts also presents a major security risk. Figure 1 demonstrates how a command script is composed and executed. <p> File system security in the above systems is pro-vided typically either by severely limiting the ways that I/O can be performed within a command script or by trusting that users will not write improper command scripts. This is exemplified by the Safe-Tcl <ref> [3] </ref> language for enabled mail command scripts (an extension of the Tcl language [13]). Safe-Tcl provides two interpreters: (1) a trusted interpreter and (2) an untrusted interpreter. The trusted interpreter provides no security, so it is meant to be used for interaction with trusted sources. <p> The access rights proposal is specified in the multipart/mixed section. message/x-op-access, message/x-grants, message/x-revokes specify the operation access rights, object access rights granted, and object access rights revoked, respectively, for the command script. For reasons that we will describe in the following section, the interpretive language Safe-Tcl <ref> [3] </ref> is used for writing command scripts. The entry under the MIME type application/safe-tcl contains the command script.
Reference: [4] <author> R. et. al. Clauer. </author> <title> A prototype upper atmospheric collaboratory (UARC). AGU Monograph: Visualization Techniques in Space and Atmospheric Sciences. </title> <publisher> In press. </publisher>
Reference-contexts: system, such as Trusted Mach [1], that provides authentication of principals, secure communication channels, a secure initialization procedure, etc. 3 Example Problem An example where the reader must permit the command script to perform some limited I/O is the World-wide Web (WWW) server for the Upper Atmospheric Research Collaboratory (UARC) <ref> [4] </ref> system. The UARC system provides several services for remote, collaborative analysis of atmospheric test data. For example, users can read analysis data and write annotations to that analysis data. Also, users can write recordings of analysis sessions to replay later or provide to other users [10].
Reference: [5] <author> M. Gasser and E. McDermott. </author> <title> An architecture for practical delegation in a distributed system. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 20-30, </pages> <year> 1990. </year>
Reference-contexts: This primitive weakens the authority of an Auth by associating it with a role that has fewer access rights. A role corresponds to an identity that has a special access control policy, usually some semantically meaningful identity such as system administrator <ref> [5, 16] </ref>. Roles are static entities that are managed by system administrators. If the number of operations in our access control model is fairly small, we find roles to be a reasonable model to represent the access rights for the operation access right values: public, none, and all.
Reference: [6] <author> Y. Goldberg, M. Safran, and E. Shapiro. </author> <title> Active Mail a framework for implementing groupware. </title> <booktitle> In CSCW 92 Proceedings, </booktitle> <pages> pages 75-83, </pages> <year> 1992. </year>
Reference-contexts: Examples of systems that utilize command scripts include: (1) Mosaic, the popular information server for the World-wide Web; (2) Telescript 1 [17], a system meant for building electronic marketplaces; and (3) active or enabled mail systems <ref> [2, 3, 6] </ref>. For example, Mosaic uses command scripts to define server actions when a client wants to access information from the server. Unfortunately, the use of command scripts also presents a major security risk. Figure 1 demonstrates how a command script is composed and executed.
Reference: [7] <author> T. Jaeger and A. Prakash. </author> <title> Support for the file system security requirements of computational e-mail systems. </title> <booktitle> In ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 1-9, </pages> <year> 1994. </year>
Reference-contexts: Our goal is to define an access control model that permits readers to execute command scripts with a level of security between the two extremes. Our initial effort, the intersection security model <ref> [7] </ref>, enables readers to permit I/O to command scripts from trusted writers while protecting the private objects of both the reader and the writer. In the intersection model, access is limited to only the objects that the reader and writer share.
Reference: [8] <author> J. T. Kohl and B. C. Neuman. </author> <title> The Kerberos network authentication service, </title> <month> September </month> <year> 1993. </year> <title> Internet RFC 1510. </title>
Reference-contexts: The second solution requires modifying the code for Safe-Tcl's trusted interpreter which renders it unportable. We have opted for the first solution. 6.2.2 Safe-Tcl and Kerberos A second implementation option is to integrate Safe-Tcl's untrusted interpreter with Kerberos version 5 <ref> [8] </ref>. This is referred to as "kerberizing" [12] Safe-Tcl's untrusted interpreter. Kerberizing Safe-Tcl's untrusted interpreter enables the untrusted interpreter to execute other kerberized applications that also have the ability to enforce the command script access rights. <p> Figure 15 shows the sequence of messages. Kerberos message specifications are quite complex, so some of the details are omitted from the succeeding description for simplicity reasons. Complete message specifications can be found in RFC 1510 <ref> [8] </ref>. Messages 1 and 2 implement the initial authentication exchange of the reader with Kerberos to obtain a proxiable ticket. When command script access rights are selected (in the .safetclrc script), the reader must authenticate with Kerberos if any applications could be executed from the command script.
Reference: [9] <author> B. Lampson, M. Abadi, M. Burrows, and E. Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <year> 1992. </year>
Reference-contexts: The generation of a role on demand would be the cleanest solution to this problem, as it would be consistent with theory upon which the Taos authentication mechanisms are built <ref> [9] </ref>. <p> In Taos, an access is granted if there exists a principal in the ACL with the rights requested that one of the process' Auths speaks for <ref> [9] </ref>. Principals and groups in a DynPrin can be checked using the Taos authorization mechanism, but we must add the ability to check object access rights.
Reference: [10] <author> N. R. Manohar and A. Prakash. </author> <title> The session capture and replay paradigm for asynchronous collaboration. </title> <note> Submitted to ECSCW'95. </note>
Reference-contexts: The UARC system provides several services for remote, collaborative analysis of atmospheric test data. For example, users can read analysis data and write annotations to that analysis data. Also, users can write recordings of analysis sessions to replay later or provide to other users <ref> [10] </ref>. The interface of the UARC system is shown in Figure 2. We enable clients to access our UARC-WWW server by defining a home page for the server on Mo saic, which we call the UARC Home Page (see Figure 3).
Reference: [11] <author> B. C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283-291, </pages> <year> 1993. </year>
Reference-contexts: Transfer of access rights between the command script process and an application is accomplished using a special type of Kerberos ticket called a proxy <ref> [11] </ref>. A proxy ticket is a ticket that a principal creates to delegate its access rights to another principal. Using Kerberos proxies, a principal can delegate any subset of its access rights to another principal.
Reference: [12] <author> B. C. Neuman and T. Ts'o. </author> <title> Kerberos: An authentication service for computer networks. </title> <journal> IEEE Communications, </journal> <pages> pages 33-38, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: The second solution requires modifying the code for Safe-Tcl's trusted interpreter which renders it unportable. We have opted for the first solution. 6.2.2 Safe-Tcl and Kerberos A second implementation option is to integrate Safe-Tcl's untrusted interpreter with Kerberos version 5 [8]. This is referred to as "kerberizing" <ref> [12] </ref> Safe-Tcl's untrusted interpreter. Kerberizing Safe-Tcl's untrusted interpreter enables the untrusted interpreter to execute other kerberized applications that also have the ability to enforce the command script access rights. These other applications must have a compatible representation for access rights in order to perform authorization correctly, however.
Reference: [13] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This is exemplified by the Safe-Tcl [3] language for enabled mail command scripts (an extension of the Tcl language <ref> [13] </ref>). Safe-Tcl provides two interpreters: (1) a trusted interpreter and (2) an untrusted interpreter. The trusted interpreter provides no security, so it is meant to be used for interaction with trusted sources.
Reference: [14] <author> A. Rubin. </author> <title> Nonmonotonic Cryptographic Protocols. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, </address> <year> 1994. </year>
Reference-contexts: In order to enable a writer to delegate access rights to the script execution prototype, the writer must be able to grant access rights with a long life time to enable the writer's access rights to be available whenever the reader needs them. The work in <ref> [14] </ref> addresses this problem. 6.1 Selecting Access Rights First, the reader must select the access rights for the computation that executes the command script. The reader needs assistance to determine what access rights are required to run the command script, however.
Reference: [15] <author> C. Thacker, L. Stewart, and E. Satterthwaite. Firefly: </author> <title> A multiprocessor workstation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(8) </volume> <pages> 909-920, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: In this implementation, we use Safe-Tcl's untrusted interpreter to execute the command script and the Taos distributed operating system <ref> [15] </ref> to authorize the command script's I/O. We select Taos because it provides an extensive model for authentication in a distributed environment. Taos' representation of process access rights does not include all the fields necessary to store the information from our access control model, however.
Reference: [16] <author> S. T. Vinter. </author> <title> Extended discretionary access controls. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 39-49, </pages> <year> 1988. </year>
Reference-contexts: This primitive weakens the authority of an Auth by associating it with a role that has fewer access rights. A role corresponds to an identity that has a special access control policy, usually some semantically meaningful identity such as system administrator <ref> [5, 16] </ref>. Roles are static entities that are managed by system administrators. If the number of operations in our access control model is fairly small, we find roles to be a reasonable model to represent the access rights for the operation access right values: public, none, and all.
Reference: [17] <author> J. E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper. </title>
Reference-contexts: A command script is a program written by one user, called a writer, to act on the writer's behalf when another user, called the reader, executes the script. Examples of systems that utilize command scripts include: (1) Mosaic, the popular information server for the World-wide Web; (2) Telescript 1 <ref> [17] </ref>, a system meant for building electronic marketplaces; and (3) active or enabled mail systems [2, 3, 6]. For example, Mosaic uses command scripts to define server actions when a client wants to access information from the server. Unfortunately, the use of command scripts also presents a major security risk.
References-found: 17

