URL: http://www.cs.indiana.edu/~asengupt/asengupt/papers/comad98.ps
Refering-URL: http://www.cs.indiana.edu/~asengupt/
Root-URL: http://www.cs.indiana.edu
Email: asengupt@cs.indiana.edu (email)  
Phone: +1 (812) 855-3703 (voice) +1 (812) 855-4829 (fax)  
Title: Toward the Union of Databases and Document Management: The Design of DocBase  
Author: Arijit Sengupta 
Keyword: SGML, XML, SQL, query languages, query processing, document databases, structured documents, information retrieval  
Address: Lindley Hall 215 Bloomington, IN 47405  
Affiliation: Department of Computer Science  
Abstract: With the advent of the World Wide Web (WWW) and the increased use of electronic documents in almost all aspects of computing, the problems of management of and systematic information retrieval from electronic documents have become highly pertinent. Information retrieval (IR) techniques allow us to retrieve documents based on keywords, but often these searches are not powerful enough to accurately extract the most relevant information. Most IR systems are designed for broadening the scope of search. However, extracting only documents highly related to the search is often desirable to keep the result set small. We propose a method for achieving very powerful searches on tagged documents by using the structural information in the tags as meta-data in queries. We adopt SGML as our tagging format. Since HTML is an application of SGML, and XML is designed as a subset of the SGML standard, our work is immediately applicable to the current and future incarnations of the WWW. In this paper, we give an overview of the methodologies (such as query languages, query interfaces, and query processing techniques) used in the design of DocBase, our prototype proof-of-concept document database system. DocBase is a modular system capable of performing SQL-like queries on native SGML documents using pluggable indexing and storage-management applications. Because of the generalized nature of SGML, and the ever increasing use of structured documents in the corporate world, we argue that systems like this will be indispensable in the forthcoming century. 
Abstract-found: 1
Intro-found: 1
Reference: [BDHS96] <author> Peter Buneman, Susan Davidson, Gerd Hillebrand, and Dan Suciu. </author> <title> A query language and optimization techniques for unstructured data. </title> <editor> In H.V. Jagadish and Interpal Singh Mumick, editors, </editor> <booktitle> Proceedings, ACM SIGMOD International Conference on Management of Data, </booktitle> <volume> volume 25, </volume> <pages> pages 505-516, </pages> <month> June </month> <year> 1996. </year>
Reference: [Boo89] <author> Paul Booth. </author> <title> An Introduction to Human-computer Interaction. </title> <publisher> Laurence ErlBaum Associates Publishers, </publisher> <year> 1989. </year>
Reference-contexts: We use this idea to generalize QBE for databases where each data instance, albeit complex, has a simple visual model. We base this assumption on the fact that human beings form a mental model for the tasks that they intend to perform <ref> [Boo89] </ref>. For example, users performing a search in a dictionary may not know the internal structure and representation of each definition, but they usually have an idea about the visual structure of a dictionary entry, assuming they have used dictionaries in print.
Reference: [CACS94] <author> V. Christophides, S. Abiteboul, S. Cluet, and M. Scholl. </author> <title> From structured documents to novel query facilities. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 23(2) </volume> <pages> 313-324, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: However, formulating meta-data independent queries in database systems is quite difficult, and is a subject of recent research [JMG95]. 2.1 Unifying the worlds document database systems Research on the problem of using structured documents has produced a few methods for querying structured documents. Most of these methods (such as <ref> [CACS94, Zha95, Hol95, D'A95] </ref>) use various mapping techniques to map document structures into database schema, and import the documents into database objects of a host database. The capabilities of the host database can then be used to perform queries. Although this method works fairly well, it does have many drawbacks. <p> We propose a simplified path expression construct specifically for structured documents. PEs in document structure Path expressions for document structures have also been considered by Christophides et al. <ref> [CACS94, CCM96] </ref>. These approaches allow variables on paths, which instantiate over paths in the current domain. Christophides et al. also propose a syntactic sugared path expression of the form my article::title (t) when the actual values of path variables are not important. <p> An abbreviated path P of the form P 1 ::P 2 :: ::P k is an SPE, where k 1, and for every i, P i is a basic or listed path. This notion is similar to the partial path specification in [dBV93] and the ".." operator in <ref> [CACS94] </ref>, described above. Semantics of SPEs As mentioned above, path expressions are always defined in the context of a DTD.
Reference: [CCM96] <author> Vassilis Christophides, Sophie Cluet, and Guido Moerkotte. </author> <title> Evaluating queries with generalized path expressions. </title> <editor> In H.V. Jagadish and Inderpal Singh Mumick, editors, </editor> <booktitle> Proceedings, ACM SIGMOD 1996, </booktitle> <volume> volume 25, </volume> <pages> pages 418-422. </pages> <institution> Association of Computing Machinery, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: We propose a simplified path expression construct specifically for structured documents. PEs in document structure Path expressions for document structures have also been considered by Christophides et al. <ref> [CACS94, CCM96] </ref>. These approaches allow variables on paths, which instantiate over paths in the current domain. Christophides et al. also propose a syntactic sugared path expression of the form my article::title (t) when the actual values of path variables are not important.
Reference: [CDF + 86] <author> Michael J. Carey, David J. DeWitt, Daniel Frank, Goetz Graefe, M. Muralikrishna, Joel E. Richardson, and Eugene J. Shikita. </author> <title> The architecture of the EXODUS extensible DBMS. </title> <editor> In Klaus R. Dittrich and Umeshwar Dayal, editors, </editor> <booktitle> Proceedings, 1996 International Workshop on Object-Oriented Database Ssytems, </booktitle> <pages> pages 52-65, </pages> <address> Pacific Grove, California, USA, </address> <month> September 23-26 </month> <year> 1986. </year> <pages> IEEE-CS. </pages>
Reference-contexts: We designed DocBase so that users can essentially "plug and play" with different types of indexing systems for search purposes and different types of storage managers for storing and controlling documents. We have actually tested the system with two storage managers (Exodus <ref> [CDF + 86] </ref> and Sybase [Syb94]), and presently only one indexing system (Open Text Pat [Ope94]) however, work is under way to include another structured search system called "Sgrep"[JK96] as the index manager. The architecture of DocBase closely follows the tri-level design of database systems.
Reference: [Col89] <author> Latha S. Colby. </author> <title> A recursive algebra for nested relations. </title> <type> Technical Report 259, </type> <institution> Indiana University, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: This approach typically models document structure using a grammar and documents as words in the language described by the grammar. Querying methods in this approach include operations based on the grammar which governs the database schema <ref> [DGS86, GT87, Col89] </ref>; using existing database systems to implement an equivalent database schema to store the documents; and using special structures such as Patricia trees [GBY91]. In our approach we do not require a conversion of the documents to a host database.
Reference: [D'A95] <author> Al D'Andrea. </author> <title> Improved database technology for document management. </title> <editor> In Yuri Ru-binsky, editor, </editor> <booktitle> Proceedings, </booktitle> <volume> SGML '95, </volume> <pages> pages 113-122. </pages> <booktitle> Graphic Communications Association, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: However, formulating meta-data independent queries in database systems is quite difficult, and is a subject of recent research [JMG95]. 2.1 Unifying the worlds document database systems Research on the problem of using structured documents has produced a few methods for querying structured documents. Most of these methods (such as <ref> [CACS94, Zha95, Hol95, D'A95] </ref>) use various mapping techniques to map document structures into database schema, and import the documents into database objects of a host database. The capabilities of the host database can then be used to perform queries. Although this method works fairly well, it does have many drawbacks.
Reference: [dBV93] <author> Jan Van den Bussche and Gottfried Vossen. </author> <title> An extension of path expressions to simplify navigation in object-oriented queries. In Stefano Ceri, Katsumi Tanaka, </title> <editor> and Shalom Tsur, editors, </editor> <booktitle> Proceedings of the third international conference on Deductive and Object-Oriented Databases (DOOD), number 760 in Lecture Notes in Computer Science, </booktitle> <pages> pages 267-282, </pages> <address> Phoenix, Arizona, </address> <month> December </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference-contexts: For graph query languages (e.g., [MW95]), a path expression defines a path from one node in the graph to another in terms of intermediate node and edge labels. For object-oriented query languages (e.g., <ref> [KKS92, dBV93] </ref>), a path expression defines a path from one object to another using membership and inheritance relationships. We propose a simplified path expression construct specifically for structured documents. PEs in document structure Path expressions for document structures have also been considered by Christophides et al. [CACS94, CCM96]. <p> An abbreviated path P of the form P 1 ::P 2 :: ::P k is an SPE, where k 1, and for every i, P i is a basic or listed path. This notion is similar to the partial path specification in <ref> [dBV93] </ref> and the ".." operator in [CACS94], described above. Semantics of SPEs As mentioned above, path expressions are always defined in the context of a DTD.
Reference: [DGS86] <author> B.C. Desai, P. Goyal, and F. Sadri. </author> <title> A data model for use with formatted and textual data. </title> <address> JASIS, </address> <year> 1986. </year>
Reference-contexts: This approach typically models document structure using a grammar and documents as words in the language described by the grammar. Querying methods in this approach include operations based on the grammar which governs the database schema <ref> [DGS86, GT87, Col89] </ref>; using existing database systems to implement an equivalent database schema to store the documents; and using special structures such as Patricia trees [GBY91]. In our approach we do not require a conversion of the documents to a host database.
Reference: [GBY91] <author> Gaston H. Gonnet and R. Baeza-Yates. </author> <title> Lexicographical indices for text: Inverted files vs pat trees. </title> <type> Technical Report TR-OED-91-01, </type> <institution> University of Waterloo, </institution> <year> 1991. </year>
Reference-contexts: Querying methods in this approach include operations based on the grammar which governs the database schema [DGS86, GT87, Col89]; using existing database systems to implement an equivalent database schema to store the documents; and using special structures such as Patricia trees <ref> [GBY91] </ref>. In our approach we do not require a conversion of the documents to a host database.
Reference: [GT87] <author> Gaston H. Gonnet and Frank W. Tompa. </author> <title> Mind your grammar: a new approach to modeling text. </title> <editor> In Peter M. Stocker, William Kent, and Peter Hammersley, editors, </editor> <booktitle> Proceedings: 13th International Conference on Very Large Data Bases, </booktitle> <pages> pages 339-346, </pages> <address> Brighton, England, September 1-4 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This approach typically models document structure using a grammar and documents as words in the language described by the grammar. Querying methods in this approach include operations based on the grammar which governs the database schema <ref> [DGS86, GT87, Col89] </ref>; using existing database systems to implement an equivalent database schema to store the documents; and using special structures such as Patricia trees [GBY91]. In our approach we do not require a conversion of the documents to a host database.
Reference: [Hol95] <author> Sebastian Holst. </author> <title> Database evolution: the view from over here (a document-centric perspective). </title> <editor> In Yuri Rubinsky, editor, </editor> <booktitle> Proceedings, </booktitle> <volume> SGML '95, </volume> <pages> pages 217-223. </pages> <booktitle> Graphic Communications Association, </booktitle> <month> December 4-7 </month> <year> 1995. </year>
Reference-contexts: However, formulating meta-data independent queries in database systems is quite difficult, and is a subject of recent research [JMG95]. 2.1 Unifying the worlds document database systems Research on the problem of using structured documents has produced a few methods for querying structured documents. Most of these methods (such as <ref> [CACS94, Zha95, Hol95, D'A95] </ref>) use various mapping techniques to map document structures into database schema, and import the documents into database objects of a host database. The capabilities of the host database can then be used to perform queries. Although this method works fairly well, it does have many drawbacks.
Reference: [ISO86] <author> International Organization for Standardization, </author> <title> Geneva, Switzerland. ISO 8879: Infor--mation Processing Text and Office Systems Standard Generalized Markup Language (SGML), </title> <year> 1986. </year>
Reference: [ISO94] <institution> International Organization for Standardization and International Electrotechnical Commission, Geneva, Switzerland. </institution> <month> ISO/IEC DIS 10179: </month> <title> Document Style Semantics and Specification Language: </title> <address> DSSSL, </address> <year> 1994. </year>
Reference-contexts: The primary motivation 3 Note that DSQL (or Document SQL) is different from SDQL (Standard Document Query Language), which is a part of the ISO 10179 DSSSL (Document Style Semantics and Specification Language) standard <ref> [ISO94] </ref>. behind having such a language is to provide users of database systems with a simple means for expressing queries using a natural language form. Also, SQL's wide acceptance as a standard query language for relational databases makes it natural choice as a document database query language.
Reference: [JK96] <author> Jani Jaakkola and Pekka Kilpelainen. </author> <note> The sgrep online manual. Available online at http://www.cs.helsinki.fi/ jaakkol/sgrepman.html, </note> <year> 1996. </year>
Reference: [JMG95] <author> Manoj Jain, Anurag Mendhekar, and Dirk Van Gucht. </author> <title> A uniform data model for relational data and meta-data query processing. </title> <booktitle> In Proceedings of the Seventh International Conference on Management of Data (COMAD), </booktitle> <pages> pages 146-165. </pages> <publisher> Tata McGraw-Hill Press, </publisher> <month> December </month> <year> 1995. </year>
Reference-contexts: Searches in databases always involve meta-data. It is trivial to pose database queries 1 A copy of this thesis can be obtained online from http://www.cs.indiana.edu/~asengupt/thesis-final.ps.gz using only meta-data. However, formulating meta-data independent queries in database systems is quite difficult, and is a subject of recent research <ref> [JMG95] </ref>. 2.1 Unifying the worlds document database systems Research on the problem of using structured documents has produced a few methods for querying structured documents.
Reference: [KKS92] <author> Michael Kifer, Won Kim, and Yehoshua Sagiv. </author> <title> Querying object-oriented databases. </title> <editor> In Michael Stonebraker, editor, </editor> <booktitle> Proceedings of the 1992 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 393-402, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: For graph query languages (e.g., [MW95]), a path expression defines a path from one node in the graph to another in terms of intermediate node and edge labels. For object-oriented query languages (e.g., <ref> [KKS92, dBV93] </ref>), a path expression defines a path from one object to another using membership and inheritance relationships. We propose a simplified path expression construct specifically for structured documents. PEs in document structure Path expressions for document structures have also been considered by Christophides et al. [CACS94, CCM96].
Reference: [LMB92] <author> John R. Levine, Tony Mason, and Doug Brown. </author> <title> Lex & yacc. </title> <publisher> O'Reilly & Associates, 2nd ed. </publisher> <address> edition, </address> <year> 1992. </year>
Reference-contexts: In the current implementation, the top layer of the system comprises of a QBT or a command line SQL interface. The query processing layer consists of (i) a parser (written using lex and yacc <ref> [LMB92] </ref>) which identifies each component of the query, (ii) an optimizer or reorganizer which generates an execution plan, and (iii) a query engine which actually executes each of the query components, using any available indices.
Reference: [MW93] <author> Udi Manber and San Wu. Glimpse: </author> <title> A tool to search through entire file systems. </title> <type> Technical Report TR 93-34, </type> <institution> University of Arizona, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Research on unstructured text searching falls under the discipline of "information retrieval (IR)". Prominent work in this area include the foundations from Salton [SYY75, SB88, Sal91] and also many implementation methods such as inverted indices <ref> [MW93, TGMS94] </ref>. Our approach differs from these approaches since we actually use the structural information in the documents as meta-data for query processing. 2. Semi-structured data with nodes and links: In this model, documents are represented as graphs with nodes and links, possibly with inconsistent or unknown structure.
Reference: [MW95] <author> A.O. Mendelzon and P.T. Wood. </author> <title> Finding regular simple paths in graph databases. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24(6) </volume> <pages> 1235-1258, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: We then define the language by defining the terms, operators, predicates, formulas, and finally, queries in the language. 4.1 Path expressions The notion of path expressions (PEs) came from two different areas: (i) graph query languages and (ii) object-oriented query languages. For graph query languages (e.g., <ref> [MW95] </ref>), a path expression defines a path from one node in the graph to another in terms of intermediate node and edge labels. For object-oriented query languages (e.g., [KKS92, dBV93]), a path expression defines a path from one object to another using membership and inheritance relationships.
Reference: [Ope94] <institution> Open Text Corporation, Waterloo, Ontario, Canada. Open Text 5.0, </institution> <year> 1994. </year>
Reference-contexts: We have actually tested the system with two storage managers (Exodus [CDF + 86] and Sybase [Syb94]), and presently only one indexing system (Open Text Pat <ref> [Ope94] </ref>) however, work is under way to include another structured search system called "Sgrep"[JK96] as the index manager. The architecture of DocBase closely follows the tri-level design of database systems.
Reference: [Sal91] <author> Gerard Salton. </author> <title> Developments in automatic text retrieval. </title> <journal> Science, </journal> <volume> 253 </volume> <pages> 974-980, </pages> <year> 1991. </year>
Reference-contexts: Here wee will only present an overview of the methodologies used in the design DocBase. Further details on these methods can be obtained from [Sen97] 1 . 2 Searching and querying The most common method for searching information in a document repository is by using boolean searches <ref> [Sal91] </ref>. In this type of search, a number of keywords combined with boolean operators (such as "and", "or", "not") are specified, and the result consists of the documents that satisfy the given boolean expression. <p> Searches are performed primarily by matching keywords against the text, using indices as a means for achieving higher search speed. Research on unstructured text searching falls under the discipline of "information retrieval (IR)". Prominent work in this area include the foundations from Salton <ref> [SYY75, SB88, Sal91] </ref> and also many implementation methods such as inverted indices [MW93, TGMS94]. Our approach differs from these approaches since we actually use the structural information in the documents as meta-data for query processing. 2.
Reference: [SB88] <author> Gerard Salton and Christopher Buckley. </author> <title> Term-weighting approaches in automatic text retrieval. </title> <booktitle> Information Processing and Management, </booktitle> <volume> 24 </volume> <pages> 513-523, </pages> <year> 1988. </year>
Reference-contexts: Searches are performed primarily by matching keywords against the text, using indices as a means for achieving higher search speed. Research on unstructured text searching falls under the discipline of "information retrieval (IR)". Prominent work in this area include the foundations from Salton <ref> [SYY75, SB88, Sal91] </ref> and also many implementation methods such as inverted indices [MW93, TGMS94]. Our approach differs from these approaches since we actually use the structural information in the documents as meta-data for query processing. 2.
Reference: [SD97] <author> Arijit Sengupta and Andrew Dillon. </author> <title> Query by templates: A generalized approach for visual query formulation for text dominated databases. </title> <editor> In Alfred Aho, editor, </editor> <booktitle> Proceedings: Symposium on Advanced Digital Libraries, Library of Congress, </booktitle> <address> Washington, DC, </address> <month> May 7-9 </month> <year> 1997. </year> <month> IEEE/CESDIS. </month>
Reference-contexts: In the design of DocBase, we also gave careful consideration to user interface issues, and the result was a visual interface to our query languages, called QBT (Query By Templates). Here we briefly describe QBT. Details on QBT can be obtained from <ref> [Sen97, SD97] </ref>. 4 Because of space limitations, we are skipping the second example.
Reference: [Sen96] <author> Arijit Sengupta. </author> <title> Demand more from your SGML database! bringing SQL under the SGML limelight. </title> <journal> &lt;TAG&gt; The SGML Newsletter, </journal> <volume> 9(4) </volume> <pages> 1-7, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: We now describe DSQL (Document SQL) 3 , an extended version of SQL which is a user-friendly pseudo-natural language form of DC. An informal introduction and examples of this SQL can be found in <ref> [Sen96] </ref>, and the full language with BNF is presented in [Sen97].
Reference: [Sen97] <author> Arijit Sengupta. </author> <title> DocBase A Database Environment for Structured Documents. </title> <type> PhD thesis, </type> <institution> Indiana University, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: We describe DocBase, a research system that implements the ideas presented here. Here wee will only present an overview of the methodologies used in the design DocBase. Further details on these methods can be obtained from <ref> [Sen97] </ref> 1 . 2 Searching and querying The most common method for searching information in a document repository is by using boolean searches [Sal91]. <p> To achieve this, every variable is associated with a set that binds the possible values for that variable (i.e., instead of x, we would write x where is a finite precomputed set of documents). For the complete definition of Safe DC formulas, please see <ref> [Sen97] </ref>. Tuple Construction The path expressions provide a means for extracting components of a composite object. DC supports dynamic creation of composite types by creating new generic identifiers with already existing generic identifiers as children. <p> DC is a language like relational calculus with the additional capabilities of tuple constructions, and navigational constructs with path expressions. In <ref> [Sen97] </ref>, we show many useful properties of this language, including safety and PTIME properties. <p> P 1 ::poet;P 2 ::poet oe P 1 ::poet6"P 2 ::poet P 1 ::title"P 2 ::title ae P 2 P oem Given the above specification of DC and DA, we have proved the following significant results (the proofs are beyond the scope of this paper, please see <ref> [Sen97] </ref> for the actual proofs): Theorem 1 The languages DA and SDC are equivalent. Theorem 2 The languages DA and SDC are safe. <p> We now describe DSQL (Document SQL) 3 , an extended version of SQL which is a user-friendly pseudo-natural language form of DC. An informal introduction and examples of this SQL can be found in [Sen96], and the full language with BNF is presented in <ref> [Sen97] </ref>. <p> For the second query, we need two instances of POEM: SELECT R (P1..poet,P2..poet) FROM poem P1, poem P2 WHERE P1..title = P2..title AND P1..poet &lt;&gt; P2..poet Details on DSQL and further examples can also be obtained from <ref> [Sen97] </ref>. 5.3 Uniting SGML and SQL: the DSQL DTD We can describe SGML as a meta-language which can define languages which, in turn, define valid document instances. Thus, SGML can be conveniently used to define a query language. <p> In the design of DocBase, we also gave careful consideration to user interface issues, and the result was a visual interface to our query languages, called QBT (Query By Templates). Here we briefly describe QBT. Details on QBT can be obtained from <ref> [Sen97, SD97] </ref>. 4 Because of space limitations, we are skipping the second example. <p> Nested templates can be visualized by either showing the nested regions on the same template, or using a "zooming in" method to magnify a region when selected, if the region has embedded regions. We show in <ref> [Sen97] </ref> that we can perform many different types of queries including joins, and also show that the class of queries representable by QBT is the same as that of the core DSQL. 7 DocBase a modular document database With the components of a conceptual document database system described above, we implemented <p> These indices and temporary results are stored in the storage manager. The query is processed in an accumulator-based evaluation (the accumulators in this case are simply the temporary results at each stage). The details of the processing algorithms are discussed in <ref> [Sen97] </ref>. The accumulators can be viewed as the intermediate results from the evaluation of the component queries. The modular nature of the system is achieved by using an standard interface for storage management and index management modules.
Reference: [SQL86] <author> ANSI X3.135-1986, </author> <title> Database Language SQL, </title> <year> 1986. </year>
Reference-contexts: Also, SQL's wide acceptance as a standard query language for relational databases makes it natural choice as a document database query language. DSQL is designed as an extension to the standard SQL-86 <ref> [SQL86] </ref>. Conceptually DSQL supports SGML documents as objects for constructing queries. From the language point of view, however, there are only two major differences from the standard SQL, which are the following: 1. Path Expressions. Path expressions are handled in the same way they are handled in the formal languages.
Reference: [Suc97] <editor> D. Suciu, editor. </editor> <booktitle> Proceedings on the Workshop on Semistructured Data, </booktitle> <address> Tucson, Arizona, USA, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Labels at the nodes or edges in the graph represent the data and meta-data in the documents, and query processing involves traversal and transformation of the graphs. Prominent among these approaches is the work by Buneman et al.[BDHS96]. Many other related approaches can be found in <ref> [Suc97] </ref>. While this approach comes fairly close to the structured document domain, the emphasis is still on mainly unstructured documents. Our approach intends to formalize a method for fully structured documents using the schema information embedded in the structure. 3.
Reference: [Syb94] <author> Sybase, Inc., </author> <title> Emeryville, CA. SYBASE SQL Server T M Reference Manual: Volume 1. Commands, Functions and Topics, </title> <year> 1994. </year>
Reference-contexts: We designed DocBase so that users can essentially "plug and play" with different types of indexing systems for search purposes and different types of storage managers for storing and controlling documents. We have actually tested the system with two storage managers (Exodus [CDF + 86] and Sybase <ref> [Syb94] </ref>), and presently only one indexing system (Open Text Pat [Ope94]) however, work is under way to include another structured search system called "Sgrep"[JK96] as the index manager. The architecture of DocBase closely follows the tri-level design of database systems.
Reference: [SYY75] <author> G. Salton, C.S. Yang, and C.T. Yu. </author> <title> A theory of term importance in automatic text analysis. </title> <journal> Journal of the American Society of Information Science, </journal> <volume> 26(1) </volume> <pages> 33-44, </pages> <year> 1975. </year>
Reference-contexts: Searches are performed primarily by matching keywords against the text, using indices as a means for achieving higher search speed. Research on unstructured text searching falls under the discipline of "information retrieval (IR)". Prominent work in this area include the foundations from Salton <ref> [SYY75, SB88, Sal91] </ref> and also many implementation methods such as inverted indices [MW93, TGMS94]. Our approach differs from these approaches since we actually use the structural information in the documents as meta-data for query processing. 2.
Reference: [TGMS94] <author> Anthony Tomasic, Hector Garcia-Molina, and Kurt Shoens. </author> <title> Incremental updates of inverted lists for text document retrieval. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 23(2) </volume> <pages> 289-300, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Research on unstructured text searching falls under the discipline of "information retrieval (IR)". Prominent work in this area include the foundations from Salton [SYY75, SB88, Sal91] and also many implementation methods such as inverted indices <ref> [MW93, TGMS94] </ref>. Our approach differs from these approaches since we actually use the structural information in the documents as meta-data for query processing. 2. Semi-structured data with nodes and links: In this model, documents are represented as graphs with nodes and links, possibly with inconsistent or unknown structure.
Reference: [W3C97] <author> W3C. </author> <note> Extensible Markup Language (XML) W3C Working Draft 07-Aug-97, August 7 1997. Available on-line from http://www.w3.org/TR/WD-xml-lang. </note>
Reference-contexts: Fortunately, a considerable number of documents are published in SGML, (Standard Generalized Markup Language)[ISO86]. In SGML, the structure of the document is defined using a DTD (document type definition) and documents are defined as valid instances of the DTD. The upcoming XML standard <ref> [W3C97] </ref> is based on SGML and has the potential to be the format for the WWW of the future.
Reference: [Zha95] <author> Jian Zhang. </author> <title> Oodb and sgml techniques in text database: An electronic dictionary system. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 24(1) </volume> <pages> 3-8, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: However, formulating meta-data independent queries in database systems is quite difficult, and is a subject of recent research [JMG95]. 2.1 Unifying the worlds document database systems Research on the problem of using structured documents has produced a few methods for querying structured documents. Most of these methods (such as <ref> [CACS94, Zha95, Hol95, D'A95] </ref>) use various mapping techniques to map document structures into database schema, and import the documents into database objects of a host database. The capabilities of the host database can then be used to perform queries. Although this method works fairly well, it does have many drawbacks.
Reference: [Zlo77] <author> M. M. Zloof. </author> <title> Query by example: A database language. </title> <journal> IBM Systems Journal, </journal> <volume> 16(4), </volume> <year> 1977. </year>
References-found: 34

