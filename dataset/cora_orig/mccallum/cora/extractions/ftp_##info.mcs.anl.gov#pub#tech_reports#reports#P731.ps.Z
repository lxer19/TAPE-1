URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P731.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts98.htm
Root-URL: http://www.mcs.anl.gov
Title: Developing a Derivative-Enhanced Object-Oriented Toolkit for Scientific Computations  
Author: Paul Hovland Boyana Norris Lucas Roh Barry Smith 
Abstract: We describe the development of a differentiated version of PETSc, an object-oriented toolkit for the parallel solution of scientific problems modeled by partial differential equations. Traditionally, automatic differentiation tools are applied to scientific applications to produce derivative-augmented code, which can then be used for sensitivity analysis, optimization, or parameter estimation. Scientific toolkits play an increasingly important role in developing large-scale scientific applications. By differentiating PETSc, we provide accurate derivative computations in applications implemented using the toolkit. In addition to using automatic differentiation to generate a derivative enhanced version of PETSc, we exploit the component-based organization of the toolkit, applying high-level mathematical insight to increase the accuracy and efficiency of derivative computations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Balay, W. D. Gropp, L. C. McInnes, and B. F. Smith, </author> <title> Efficient management of parallelism in object oriented numerical software libraries, in Modern Software Tools in Scientific Computing, </title> <editor> E. Arge, A. M. Bruaset, and H. P. Langtangen, eds., </editor> <publisher> Birkhauser Press, </publisher> <year> 1997, </year> <pages> pp. 163-202. </pages> <note> 9 [2] , PETSc 2.0 users manual, </note> <institution> Tech. </institution> <type> Rep. </type> <institution> ANL-95/11 Revision 2.0.22, Argonne National Laboratory, </institution> <year> 1998. </year> <note> [3] , PETSc home page. http://www.mcs.anl.gov/petsc, 1998. </note>
Reference-contexts: In the following subsection, we consider the computational differentiation of linear equation solvers. 1.3 PETSc The Portable, Extensible Toolkit for Scientific Computation (PETSc) is an object-oriented toolkit for the parallel solution of scientific problems modeled by partial differential equations <ref> [1, 2, 3] </ref>. PETSc includes a suite of parallel linear and nonlinear equation solvers and unconstrained minimization modules that may be used in application codes written in Fortran, C, and C++.
Reference: [4] <author> M. Berz, C. Bischof, G. Corliss, and A. Griewank, </author> <title> Computational Differentiation: Techniques, Applications, and Tools, </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1996. </year>
Reference-contexts: Virtually any computer program written in Fortran, C, or C++ can be automatically augmented to evaluate the derivative of f using AD, a chain-rule-based technique for evaluating the derivatives of functions defined by algorithms <ref> [4, 5, 6, 7, 10] </ref>. The code produced by AD tools computes both the function value y and the derivatives of some of the outputs y with respect to some of the inputs x.
Reference: [5] <author> C. Bischof, A. Carle, P. Khademi, and A. Mauer, ADIFOR 2.0: </author> <title> Automatic differentiation of Fortran 77 programs, </title> <journal> IEEE Computational Science & Engineering, </journal> <volume> 3 (1996), </volume> <pages> pp. 18-32. </pages>
Reference-contexts: Virtually any computer program written in Fortran, C, or C++ can be automatically augmented to evaluate the derivative of f using AD, a chain-rule-based technique for evaluating the derivatives of functions defined by algorithms <ref> [4, 5, 6, 7, 10] </ref>. The code produced by AD tools computes both the function value y and the derivatives of some of the outputs y with respect to some of the inputs x.
Reference: [6] <author> C. Bischof and L. Roh, </author> <title> ADIC user guide, </title> <type> Technical Memorandum ANL/MCS-TM-225, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1997. </year>
Reference-contexts: Virtually any computer program written in Fortran, C, or C++ can be automatically augmented to evaluate the derivative of f using AD, a chain-rule-based technique for evaluating the derivatives of functions defined by algorithms <ref> [4, 5, 6, 7, 10] </ref>. The code produced by AD tools computes both the function value y and the derivatives of some of the outputs y with respect to some of the inputs x. <p> AD can also be used to help generate derivatives needed in design optimization, parameter identification, and the solution of stiff differential and algebraic equations. The ADIC (Automatic Differentiation in C) tool <ref> [6, 7] </ref> provides automatic differentiation of programs written in C.
Reference: [7] <author> C. Bischof, L. Roh, and A. Mauer, </author> <title> ADIC | An extensible automatic differentiation tool for ANSI-C, </title> <journal> Software-Practice and Experience, </journal> <volume> 27 (1997), </volume> <pages> pp. 1427-1456. </pages>
Reference-contexts: Virtually any computer program written in Fortran, C, or C++ can be automatically augmented to evaluate the derivative of f using AD, a chain-rule-based technique for evaluating the derivatives of functions defined by algorithms <ref> [4, 5, 6, 7, 10] </ref>. The code produced by AD tools computes both the function value y and the derivatives of some of the outputs y with respect to some of the inputs x. <p> AD can also be used to help generate derivatives needed in design optimization, parameter identification, and the solution of stiff differential and algebraic equations. The ADIC (Automatic Differentiation in C) tool <ref> [6, 7] </ref> provides automatic differentiation of programs written in C.
Reference: [8] <author> H. Fischer, </author> <title> Automatic differentiation of the vector that solves a parametric linear system, </title> <journal> Journal of Computational and Applied Mathematics, </journal> <volume> 35 (1991), </volume> <pages> pp. 169-184. </pages>
Reference-contexts: This linear system of equations represents an implicit definition of a function x (s). We wish to find the derivatives dx=ds (designated by rx) of the solution of (1). A detailed analysis of differentiating parametric linear systems can be found in <ref> [8] </ref>. For brevity, we will write equation (1) as Ax = b. The combination of a Krylov subspace method and a preconditioner is at the core of most modern numerical codes for the iterative solution of linear systems. <p> SLES defines a standard interface to solving a linear system using preconditioned iterative methods. At present, PETSc provides about ten different preconditioners and ten Krylov subspace methods. The derivatives produced by augmenting iterative algorithms do not necessary converge at the same rate as the function being differentiated <ref> [8, 9, 11] </ref>. Thus, when the stopping criterion for the original iteration is satisfied, the derivative code may not have reached the same accuracy as the solution or may have converged to a satisfactory value in fewer iterations than the solution.
Reference: [9] <author> J.-C. Gilbert, </author> <title> Automatic differentiation and iterative processes, Optimization Methods and Software, </title> <booktitle> 1 (1992), </booktitle> <pages> pp. 13-22. </pages>
Reference-contexts: SLES defines a standard interface to solving a linear system using preconditioned iterative methods. At present, PETSc provides about ten different preconditioners and ten Krylov subspace methods. The derivatives produced by augmenting iterative algorithms do not necessary converge at the same rate as the function being differentiated <ref> [8, 9, 11] </ref>. Thus, when the stopping criterion for the original iteration is satisfied, the derivative code may not have reached the same accuracy as the solution or may have converged to a satisfactory value in fewer iterations than the solution.
Reference: [10] <author> A. Griewank, </author> <title> On automatic differentiation, in Mathematical Programming: Recent Developments and Applications, </title> <editor> M. Iri and K. Tanabe, eds., </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1989, </year> <pages> pp. 83-108. </pages>
Reference-contexts: Virtually any computer program written in Fortran, C, or C++ can be automatically augmented to evaluate the derivative of f using AD, a chain-rule-based technique for evaluating the derivatives of functions defined by algorithms <ref> [4, 5, 6, 7, 10] </ref>. The code produced by AD tools computes both the function value y and the derivatives of some of the outputs y with respect to some of the inputs x.
Reference: [11] <author> A. Griewank, C. Bischof, G. Corliss, A. Carle, and K. Williamson, </author> <title> Derivative convergence of iterative equation solvers, Optimization Methods and Software, </title> <booktitle> 2 (1993), </booktitle> <pages> pp. 321-355. </pages>
Reference-contexts: SLES defines a standard interface to solving a linear system using preconditioned iterative methods. At present, PETSc provides about ten different preconditioners and ten Krylov subspace methods. The derivatives produced by augmenting iterative algorithms do not necessary converge at the same rate as the function being differentiated <ref> [8, 9, 11] </ref>. Thus, when the stopping criterion for the original iteration is satisfied, the derivative code may not have reached the same accuracy as the solution or may have converged to a satisfactory value in fewer iterations than the solution. <p> In fact, it has been shown that automatically generated derivatives of iterative solvers may often converge more slowly than the solution <ref> [11] </ref>. The accuracy of the resulting gradient is shown in the first plot.
References-found: 9

