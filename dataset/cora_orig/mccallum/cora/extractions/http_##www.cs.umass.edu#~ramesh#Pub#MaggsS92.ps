URL: http://www.cs.umass.edu/~ramesh/Pub/MaggsS92.ps
Refering-URL: http://www.cs.umass.edu/~ramesh/Pub/MaggsS92.html
Root-URL: 
Email: bmm@cs.cmu.edu  ramesh@cs.umass.edu  
Title: Simple Algorithms for Routing on Butterfly Networks with Bounded Queues  
Author: Bruce M. Maggs Ramesh K. Sitaraman 
Address: Pittsburg, PA 15213  Amherst, MA 01003  
Affiliation: School of Computer Science Carnegie Mellon University  Department of Computer Science University of Massachusetts  
Abstract: This paper examines several simple algorithms for routing packets on butterfly networks with bounded queues. We show that for any greedy queuing protocol, a routing problem in which each of the N inputs sends a packet to a randomly chosen output requires O(log N ) steps, with high probability, provided that the queue size is a sufficiently large, but fixed, constant. We also show that for any deterministic non-predictive queuing protocol, there exists a permutation that requires (N=q log N ) time to route, where q is the maximum queue size. We present a new algorithm for routing log N packets from each input to randomly chosen outputs on a butterfly with bounded-size queues in O(log N ) steps, with high probability. The algorithm is simpler than the previous algorithms of Ranade and Pippenger because it does not use ghost messages, it does not compare the ranks or destinations of packets as they pass through switches, and it cannot deadlock. Finally, using Valiant's idea of random intermediate destinations, we generalize a result of Koch's by showing that, if each wire can support q messages, then for any permutation, the expected number of messages that succeed in locking down paths from their origins to their destinations in back-to-back butterflies is (N=(log N ) 1=q ). The analysis also applies to store-and-forward algorithms that drop packets if they attempt to enter full queues. A preliminary version of this paper appeared in the Proceedings of the 24th Annual ACM Symposium on Theory of Computing (STOC) May 1992, pp. 150-161. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. A. Aiello, F. T. Leighton, B. M. Maggs, and M. Newman. </author> <title> Fast algorithms for bit-serial routing on a hypercube. </title> <journal> Mathematical Systems Theory, </journal> (4):253-271, 1991. 
Reference-contexts: In the algorithms of Pippenger and 1 Tokens are used in a similar fashion in a bit-serial algorithm for routing on the hypercube in <ref> [1] </ref>. It turns out, however, that tokens are not really needed in that algorithm. <p> In the succeeding sections, we show that our algorithm requires O (k + log N ) steps, which is asymptotically optimal. 4.1 Delay sequences The proof that the algorithm requires O (k + log N ) time uses a delay sequence argument similar to those in <ref> [1, 14, 24] </ref>.
Reference: [2] <author> R. Aleliunas. </author> <title> Randomized parallel communication. </title> <booktitle> In Proceedings of the ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 60-72, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step. <p> As a consequence, the hypercube or butterfly can route any permutation in O (log N ) time, with high probability. Valiant's result was improved in a succession of papers by Aleliunas <ref> [2] </ref>, Upfal [31], Pippenger [20], and Ranade [14, 24]. All of these papers use Valiant's idea of first routing to random intermediate destinations. Aleliunas and Upfal increased the number of packets that can be routed in O (log N ) time.
Reference: [3] <author> D. Angluin and L. G. Valiant. </author> <title> Fast probabilistic algorithms for hamiltonian circuits and matchings. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18(2) </volume> <pages> 155-193, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: Observation 2.2 A packet can enter a delay tree contained in the butterfly at exactly one point and once the packet leaves the tree it can never return to it. We state without proof a result due to Hoeffding [10] and a Chernoff-type bound <ref> [3] </ref> and [21, p. 56]. Lemma 2.3 (Hoeffding) Let X be the number of successes in r independent Bernoulli trials where the probability of success in the i th trial is p i .
Reference: [4] <author> K. Batcher. </author> <title> Sorting networks and their applications. </title> <booktitle> In Proceedings of the AFIPS Spring Joint Computing Conference, </booktitle> <volume> volume 32, </volume> <pages> pages 307-314, </pages> <year> 1968. </year>
Reference-contexts: If each input of an N -input butterfly sends log N packets, we say that the network is fully loaded. The first important butterfly routing algorithm is due to Batcher <ref> [4] </ref>, who showed that an N -input butterfly network can sort, and hence route, any permutation of N -packets in O (log 2 N ) steps.
Reference: [5] <institution> Butterfly T M Parallel Processor Overview. </institution> <type> BBN Report No. 6148, Version 1, </type> <address> Cam-bridge, MA, </address> <month> March </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Many commercial and experimental parallel computers, including the NYU Ultracomputer [9], the IBM RP3 [19], the BBN Butterfly <ref> [5] </ref>, and NEC's Cenju [18], use butterfly networks to route packets between processors. Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. <p> Finally, in Section 5 we analyze routing algorithms that drop packets when there is contention. Examples of machines that drop packets are NEC's ATOM switch [28] and the BBN Butterfly <ref> [5] </ref>. The BBN Butterfly algorithm has been studied by Kruskal and Snir [12] and Koch [11]. <p> Two examples of machines that use this kind of protocol are the BBN Butterfly <ref> [5] </ref> and the NEC ATOM switch [28]. The ATOM switch routes packets in a store-and-forward manner. At every time step, each switch examines the head of its input queue and forwards a packet to the appropriate output queue.
Reference: [6] <author> A. Borodin and J. E. Hopcroft. </author> <title> Routing, merging, and sorting on parallel models of computation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30(1) </volume> <pages> 130-145, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: Otherwise, if d l 6= a l , then the packet takes the cross edge from hl; d 0 d l1 a l a log N1 i to hl + 1; d 0 d l1 d l a log N1 i. This path selection algorithm is called source oblivious <ref> [6] </ref> because, at each node, the next edge taken by a packet depends only on its current location and its destination, and not on its source, or on the locations or paths taken by any of the other packets.
Reference: [7] <author> A. Z. Broder, A.M. Frieze, and E. Upfal. </author> <title> A general approach to dynamic packet routing with bounded buffers. </title> <booktitle> In Proceedings of the ACM Symposium on Theory of Computing, </booktitle> <month> October </month> <year> 1996, </year> <note> to appear. 29 </note>
Reference-contexts: They show that if the load factor on the network is less than one, then the network is stable in the steady state, the average delay is O (log N ), and the average queue size is O (1). Recently, Broder, Frieze, and Upfal <ref> [7] </ref> have addressed the problem of dynamic routing in butterfly and other networks with constant-size queues. They develop a powerful method to reduce the steady state analysis of dynamic routing to the better understood problem of static routing analysis.
Reference: [8] <author> S. Felperin, P. Raghavan, E. Upfal. </author> <title> A theory of wormhole routing in parallel com-puters. </title> <booktitle> In Proceedings 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 563-572, </pages> <year> 1992. </year>
Reference: [9] <author> A. Gottlieb. </author> <title> An overview of the NYU Ultracomputer Project. </title> <editor> In J. J. Dongarra, editor, </editor> <booktitle> Experimental Parallel Computing Architectures, </booktitle> <pages> pages 25-95. </pages> <publisher> Elsevier Science Publishers, B. V., </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Many commercial and experimental parallel computers, including the NYU Ultracomputer <ref> [9] </ref>, the IBM RP3 [19], the BBN Butterfly [5], and NEC's Cenju [18], use butterfly networks to route packets between processors. Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26].
Reference: [10] <author> W. Hoeffding. </author> <title> On the distribution of the number of successes in independent trials. </title> <journal> Annals of Mathematical Statistics, </journal> <volume> 27 </volume> <pages> 713-721, </pages> <year> 1956. </year>
Reference-contexts: Observation 2.2 A packet can enter a delay tree contained in the butterfly at exactly one point and once the packet leaves the tree it can never return to it. We state without proof a result due to Hoeffding <ref> [10] </ref> and a Chernoff-type bound [3] and [21, p. 56]. Lemma 2.3 (Hoeffding) Let X be the number of successes in r independent Bernoulli trials where the probability of success in the i th trial is p i .
Reference: [11] <author> R. R. Koch. </author> <title> Increasing the size of a network by a constant factor can increase performance by more than a constant factor. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 221-230. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: Finally, there has been several papers that analyze algorithms that drop packets when there is contention. The BBN Butterfly algorithm has been studied by Kruskal and Snir [12] and Koch <ref> [11] </ref>. <p> Finally, in Section 5 we analyze routing algorithms that drop packets when there is contention. Examples of machines that drop packets are NEC's ATOM switch [28] and the BBN Butterfly [5]. The BBN Butterfly algorithm has been studied by Kruskal and Snir [12] and Koch <ref> [11] </ref>. Koch showed that for a random problem the number of packets that succeed in locking down paths from their origins to their destinations is fi (N= log 1 with high probability, where q is the maximum number of packets that any wire can support. <p> This method of routing is known as circuit-switching. In both of these queuing protocols, a natural question to ask is how many of the packets reach their destinations. The ATOM switch has not been studied in this context before. Kruskal and Snir [12] and Koch <ref> [11] </ref> studied the average case performance of the BBN Butterfly algorithm. <p> As an aside, this section also provides an elementary proof of the fact that the expected number of packets that get through for a random routing problem on the butterfly is 1 . As mentioned earlier, this was first proved by Koch <ref> [11] </ref>. The idea for routing any fixed permutation is based on Valiant's idea of routing to random intermediate destinations. Consider two back-to-back butterflies, i.e. two butterflies whose level log N nodes are identified. <p> Every packet chooses its path independently and hence the probability that all of them pass through the node exactly equals 1=2 lk . The rest of the proof is the same as before. Koch <ref> [11] </ref> has observed that the expected number of packets that get through is not affected by the rule that is used to decide which messages 27 to keep and which messages to drop, as long as the destinations of the packets are not used to make this decision.
Reference: [12] <author> C. P. Kruskal and M. Snir. </author> <title> The performance of multistage interconnection networks for multiprocessors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(12):1091-1098, </volume> <month> Decem-ber </month> <year> 1983. </year>
Reference-contexts: Finally, there has been several papers that analyze algorithms that drop packets when there is contention. The BBN Butterfly algorithm has been studied by Kruskal and Snir <ref> [12] </ref> and Koch [11]. <p> Finally, in Section 5 we analyze routing algorithms that drop packets when there is contention. Examples of machines that drop packets are NEC's ATOM switch [28] and the BBN Butterfly [5]. The BBN Butterfly algorithm has been studied by Kruskal and Snir <ref> [12] </ref> and Koch [11]. Koch showed that for a random problem the number of packets that succeed in locking down paths from their origins to their destinations is fi (N= log 1 with high probability, where q is the maximum number of packets that any wire can support. <p> This method of routing is known as circuit-switching. In both of these queuing protocols, a natural question to ask is how many of the packets reach their destinations. The ATOM switch has not been studied in this context before. Kruskal and Snir <ref> [12] </ref> and Koch [11] studied the average case performance of the BBN Butterfly algorithm.
Reference: [13] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays * Trees * Hypercubes. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: A switch is not prohibited from sending more than one packet at each step, provided that they use different edges. Non-predictive protocols are a subclass of greedy protocols. In a non-predictive queuing protocol <ref> [13, Section 3.4.4] </ref>[23], at each step, each switch selects one packet from its queue without examining the destinations of any of the packets in its queue, and sends the packet to the next level, unless the queue that it wishes to enter is full. <p> The ( N ) bound is proved by observing that certain permutations, such as the bit-reversal permutation, force ( p N ) packets to pass through a single switch <ref> [13, Section 3.4.2] </ref>. (It is also not very difficult to prove that if the queue size is not bounded, then O ( p N ) is an upper bound on the time to route any permutation using any greedy protocol.) Because the ( p N ) bound is based on congestion
Reference: [14] <author> F. T. Leighton, B. M. Maggs, A. G. Ranade, and S. B. Rao. </author> <title> Randomized routing and sorting on fixed-connection networks. </title> <type> Unpublished manuscript. </type>
Reference-contexts: As a consequence, the hypercube or butterfly can route any permutation in O (log N ) time, with high probability. Valiant's result was improved in a succession of papers by Aleliunas [2], Upfal [31], Pippenger [20], and Ranade <ref> [14, 24] </ref>. All of these papers use Valiant's idea of first routing to random intermediate destinations. Aleliunas and Upfal increased the number of packets that can be routed in O (log N ) time. <p> In the succeeding sections, we show that our algorithm requires O (k + log N ) steps, which is asymptotically optimal. 4.1 Delay sequences The proof that the algorithm requires O (k + log N ) time uses a delay sequence argument similar to those in <ref> [1, 14, 24] </ref>.
Reference: [15] <author> T. Leighton, B. Maggs, and S. Rao. </author> <title> Universal packet routing algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 256-271. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step.
Reference: [16] <author> B. M. Maggs and R. K. Sitaraman. </author> <title> Simple algorithms for routing on butterfly networks with bounded queues. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 150-161, </pages> <month> May </month> <year> 1992. </year> <month> 30 </month>
Reference: [17] <author> A. Merchant. </author> <title> A markov chain approximation for the analysis of banyan networks. </title> <booktitle> In Proceedings of the ACM SIGMETRICS conference on Measurement and Modeling of Computer Systems, </booktitle> <year> 1991. </year>
Reference-contexts: Although the performance of greedy algorithms in butterflies with bounded queues has proven difficult to analyze, attempts have been made to approximately model <ref> [29, 17] </ref> or empirically determine [30] their performance. Finally, there has been several papers that analyze algorithms that drop packets when there is contention. The BBN Butterfly algorithm has been studied by Kruskal and Snir [12] and Koch [11].
Reference: [18] <author> T. Nakata, S. Matsushita, N. Tanabe, N. Kajihara, H. Onozuka, Y. Asano, and N. Koike. </author> <title> Parallel programming on Cenju: A multiprocessor system for modular circuit simulation. </title> <journal> NEC Research & Development, </journal> <volume> 32(3) </volume> <pages> 421-429, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Many commercial and experimental parallel computers, including the NYU Ultracomputer [9], the IBM RP3 [19], the BBN Butterfly [5], and NEC's Cenju <ref> [18] </ref>, use butterfly networks to route packets between processors. Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26].
Reference: [19] <author> G. F. Pfister, W. C. Brantley, D. A. George, S. L. Harvey, W. J. Kleinfelder, K. P. McAuliffe, E. A. Melton, V. A. Norton, and J. Weiss. </author> <title> An introduction to the IBM Research Parallel Processor Prototype (RP3). </title> <editor> In J. J. Dongarra, editor, </editor> <booktitle> Experimental Parallel Computing Architectures, </booktitle> <pages> pages 123-140. </pages> <publisher> Elsevier Science Publishers, B. V., </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Many commercial and experimental parallel computers, including the NYU Ultracomputer [9], the IBM RP3 <ref> [19] </ref>, the BBN Butterfly [5], and NEC's Cenju [18], use butterfly networks to route packets between processors. Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26].
Reference: [20] <author> N. Pippenger. </author> <title> Parallel communication with limited buffers. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 127-136. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1984. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step. <p> As a consequence, the hypercube or butterfly can route any permutation in O (log N ) time, with high probability. Valiant's result was improved in a succession of papers by Aleliunas [2], Upfal [31], Pippenger <ref> [20] </ref>, and Ranade [14, 24]. All of these papers use Valiant's idea of first routing to random intermediate destinations. Aleliunas and Upfal increased the number of packets that can be routed in O (log N ) time. <p> With high probability, the algorithm requires O (k+log N ) time to route packets with random destinations, where k is the number of packets that originate at each input. The algorithm is simpler than the algorithms of Pippenger <ref> [20] </ref> and Ranade [24] because it does not use ghost messages, it does not compare the ranks or destinations of packets as they pass through a switch, and it cannot deadlock. Unlike the algorithm of Ranade, however, it does not combine packets with the same destination.
Reference: [21] <author> P. Raghavan. </author> <title> Lecture notes on randomized algorithms. </title> <type> Research Report RC 15340 (#68237), </type> <institution> IBM Research Division, T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Observation 2.2 A packet can enter a delay tree contained in the butterfly at exactly one point and once the packet leaves the tree it can never return to it. We state without proof a result due to Hoeffding [10] and a Chernoff-type bound [3] and <ref> [21, p. 56] </ref>. Lemma 2.3 (Hoeffding) Let X be the number of successes in r independent Bernoulli trials where the probability of success in the i th trial is p i .
Reference: [22] <author> A. G. Ranade. </author> <title> Constrained randomization for parallel communication. </title> <type> Technical Report YALEU/DCS/TR-511, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, CT, </address> <year> 1987. </year>
Reference-contexts: In the second stage, the packets route from level log N to level 0 of the second butterfly. In the first stage we use a scheme for sending packets to random but not independent destinations. Ranade <ref> [22] </ref> was the first to use this scheme in order to reduce the amount of the randomness needed to send packets to intermediate destinations in a packet switching algorithm. The scheme is as follows.
Reference: [23] <author> A. G. Ranade. </author> <title> Equivalence of message scheduling algorithms for parallel communication. </title> <type> Technical Report YALE/DCS/TR-512, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, CT, </address> <year> 1987. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step. <p> In the algorithms of Pippenger and 1 Tokens are used in a similar fashion in a bit-serial algorithm for routing on the hypercube in [1]. It turns out, however, that tokens are not really needed in that algorithm. Ranade's proof of the equivalence of different queuing disciplines <ref> [23] </ref> implies that a first-in first-out queuing protocol will suffice. 18 Ranade, the switches must perform more complicated operations, such as comparing the destinations of two packets as they pass through a switch.
Reference: [24] <author> A. G. Ranade. </author> <title> How to emulate shared memory. </title> <journal> J. Comp. Syst. Scis. </journal> <volume> 42, </volume> <pages> pages 307-326, </pages> <year> 1991. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step. <p> As a consequence, the hypercube or butterfly can route any permutation in O (log N ) time, with high probability. Valiant's result was improved in a succession of papers by Aleliunas [2], Upfal [31], Pippenger [20], and Ranade <ref> [14, 24] </ref>. All of these papers use Valiant's idea of first routing to random intermediate destinations. Aleliunas and Upfal increased the number of packets that can be routed in O (log N ) time. <p> Note that the maximum number of packets passing through any node (the congestion) for the worst-case permutation constructed in this section is only O (q log N ). This implies that there are other more complex routing algorithms like that of Ranade <ref> [24] </ref> which can route this permutation in O (q log N ) steps! 4 A simple routing algorithm In this section we present a simple, but non-greedy, algorithm for routing on butterfly networks. <p> With high probability, the algorithm requires O (k+log N ) time to route packets with random destinations, where k is the number of packets that originate at each input. The algorithm is simpler than the algorithms of Pippenger [20] and Ranade <ref> [24] </ref> because it does not use ghost messages, it does not compare the ranks or destinations of packets as they pass through a switch, and it cannot deadlock. Unlike the algorithm of Ranade, however, it does not combine packets with the same destination. <p> In the succeeding sections, we show that our algorithm requires O (k + log N ) steps, which is asymptotically optimal. 4.1 Delay sequences The proof that the algorithm requires O (k + log N ) time uses a delay sequence argument similar to those in <ref> [1, 14, 24] </ref>.
Reference: [25] <author> R. Rehrmann, B. Monien, R. Luling, and R. Diekmann. </author> <title> On the communication throughput of buffered multistage interconnection networks. </title> <booktitle> In Proceedings of the ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 152-161, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Recently, there has been progress in extending these results to the dynamic case, where packets arrive at each input with a certain inter-arrival distribution. Rehrmann, Monien, Luling, and Diekmann <ref> [25] </ref> show that if one packet arrives at each input of an N -input butterfly at every time step, and each switch has a buffer of size 1 at each incoming edge, then the expected network throughput is fi (N= p log N ) packets per time-step. 1.4 Our results In
Reference: [26] <author> R. Rooholamini, V. Cherkassky, and M. Garver. </author> <title> Finding the right ATM switch for the market. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 16-28, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks <ref> [26] </ref>. Although many routing algorithms with provably good performance have been devised for butterfly networks [2, 15, 20, 23, 24, 31, 32, 33, 34], simpler algorithms are often used in practice.
Reference: [27] <author> G. D. Stamoulis and J. N. Tsitsiklis. </author> <title> The efficiency of greedy routing in hyper-cubes and butterflies. </title> <booktitle> In Proceedings of the 3rd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 248-259, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: As a consequence of Ranade's algorithm, it is possible to simulate one step of an N log N -processor CRCW PRAM on an N -input butterfly in O (log N ) steps. Neither Pippenger's algorithm nor Ranade's algorithm are greedy. Stamoulis and Tsitsiklis <ref> [27] </ref> consider the problem of dynamic routing in butterflies and hypercubes with unbounded queues. Unlike the static routing problems that we have seen so far, they assume that the packets with random destinations are generated at each input according to a Poisson process.
Reference: [28] <author> H. Suzuki, H. Nagano, T. Suzuki, T. Takeuichi, and S. Iwasaki. </author> <title> Output-buffer switch architecture for asynchronous transfer mode. </title> <booktitle> In Proceedings of the 1989 IEEE International Conference on Communications, </booktitle> <pages> pages 99-103, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Finally, in Section 5 we analyze routing algorithms that drop packets when there is contention. Examples of machines that drop packets are NEC's ATOM switch <ref> [28] </ref> and the BBN Butterfly [5]. The BBN Butterfly algorithm has been studied by Kruskal and Snir [12] and Koch [11]. <p> Two examples of machines that use this kind of protocol are the BBN Butterfly [5] and the NEC ATOM switch <ref> [28] </ref>. The ATOM switch routes packets in a store-and-forward manner. At every time step, each switch examines the head of its input queue and forwards a packet to the appropriate output queue.
Reference: [29] <author> T. Szymanski and S. Shaikh. </author> <title> Markov chain analysis of packet-switched banyans with arbitrary switch sizes, queue sizes, link multiplicities and speedups. </title> <booktitle> In Proceedings of the IEEE INFOCOM '89, </booktitle> <pages> pages 960-971, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Although the performance of greedy algorithms in butterflies with bounded queues has proven difficult to analyze, attempts have been made to approximately model <ref> [29, 17] </ref> or empirically determine [30] their performance. Finally, there has been several papers that analyze algorithms that drop packets when there is contention. The BBN Butterfly algorithm has been studied by Kruskal and Snir [12] and Koch [11].
Reference: [30] <author> A. M. Tsantilas. </author> <title> Communication Issues in Parallel Computation. </title> <type> PhD thesis, </type> <institution> Har-vard University, </institution> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Although the performance of greedy algorithms in butterflies with bounded queues has proven difficult to analyze, attempts have been made to approximately model [29, 17] or empirically determine <ref> [30] </ref> their performance. Finally, there has been several papers that analyze algorithms that drop packets when there is contention. The BBN Butterfly algorithm has been studied by Kruskal and Snir [12] and Koch [11].
Reference: [31] <author> E. Upfal. </author> <title> Efficient schemes for parallel communication. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 507-517, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step. <p> As a consequence, the hypercube or butterfly can route any permutation in O (log N ) time, with high probability. Valiant's result was improved in a succession of papers by Aleliunas [2], Upfal <ref> [31] </ref>, Pippenger [20], and Ranade [14, 24]. All of these papers use Valiant's idea of first routing to random intermediate destinations. Aleliunas and Upfal increased the number of packets that can be routed in O (log N ) time.
Reference: [32] <author> L. G. Valiant. </author> <title> A scheme for fast parallel communication. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(2) </volume> <pages> 350-361, </pages> <month> May </month> <year> 1982. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step. <p> The first important butterfly routing algorithm is due to Batcher [4], who showed that an N -input butterfly network can sort, and hence route, any permutation of N -packets in O (log 2 N ) steps. The next breakthrough came more than a decade later when Valiant <ref> [32, 34] </ref> observed 4 that any permutation routing problem can be transformed into two random problems by routing the packets first to random intermediate destinations, and then on to their true destinations.
Reference: [33] <author> L. G. Valiant. </author> <title> General purpose parallel architectures. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 943-971. </pages> <publisher> Elsevier Science Publishers, B. V., </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step.
Reference: [34] <author> L. G. Valiant and G. J. Brebner. </author> <title> Universal schemes for parallel communication. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 263-277, </pages> <month> May </month> <year> 1981. </year> <month> 32 </month>
Reference-contexts: Several proposed designs for the switching fabric of scalable high-speed ATM networks use butterfly and other closely-related multistage interconnection networks [26]. Although many routing algorithms with provably good performance have been devised for butterfly networks <ref> [2, 15, 20, 23, 24, 31, 32, 33, 34] </ref>, simpler algorithms are often used in practice. Typically, packets are sent along shortest paths through the network, and simple queuing protocols such as first-in first-out (FIFO) are used to determine which packets to transmit at each step. <p> The first important butterfly routing algorithm is due to Batcher [4], who showed that an N -input butterfly network can sort, and hence route, any permutation of N -packets in O (log 2 N ) steps. The next breakthrough came more than a decade later when Valiant <ref> [32, 34] </ref> observed 4 that any permutation routing problem can be transformed into two random problems by routing the packets first to random intermediate destinations, and then on to their true destinations.
References-found: 34

