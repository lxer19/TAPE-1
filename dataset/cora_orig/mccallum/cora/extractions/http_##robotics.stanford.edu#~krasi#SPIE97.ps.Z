URL: http://robotics.stanford.edu/~krasi/SPIE97.ps.Z
Refering-URL: http://robotics.stanford.edu/~krasi/
Root-URL: http://www.cs.stanford.edu
Title: WAVELET COMPRESSION FOR 3D AND HIGHER DIMENSIONAL OBJECTS 1.1 Modeling data as a function scalar
Author: Krasimir Kolarov, William Lynch f g f g 
Keyword: compression, wavelets, manifolds, 3D objects, zerotree, multiresolution analysis, progressive coding  
Address: Mill Road, Bldg.C, Palo Alto, CA 94304  
Note: Copyright 1997 SPIE, SPIE Conference on Applications of Digital Image Processing, Vol. 3164, San Diego, 1997.  Interval Research Corporation, 1801 Page  PART I INTRODUCTION  It is useful to consider the  
Abstract: We present a technique to compress scalar functions defined on 2-manifolds of arbitrary topology. Our approach combines discrete wavelet transforms with zerotree compression, building on ideas from three previous developments: the lifting scheme, spherical wavelets, and embedded zerotree coding methods. Applications lie in the efficient storage and rapid transmission of complex data sets. Typical data sets are earth topography, satellite images, and surface parametrizations. Our contribution in this paper is the novel combination and application of these techniques to general 2-manifolds. Digital computers have long been used to represent and predict aspects of the world around us. Such representations often take the form of geometric objects having interesting information associated with and distributed about that geometry. For example, the synthesis of real-world like scenes by computer graphics techniques often proceeds by approximating the geometry of the scenes by piecewise polygonal surfaces embedded in 3-space. These surfaces then have information about illumination, texture, etc. distributed about them. In this paper we focus on the representation of that distributed information, although it is clear that the techniques described herein are also applicable as well to the description of the geometry. The growth in the capacity and computational power of computers over the years has enabled us to increase the scope and complexity of our computerized representations. Today modern computers are capable of dealing with quite complicated geometries having rich information distributed across them. However, our ambitions always exceed our capabilities, so we are always interested in techniques which substantially reduce the memory and computational loads required by a given situation (primarily so that we can deal with even more complex situations with the given computational resources). Our computer representations are necessarily finitely generated, so we are always talking about representations that approximate the real world. Of course, we need to measure and control the degree of approximation appropriate to our specific application. A good approximation schemes will not only have appropriate and measurable fidelity, but will also be economical of both computational and memory resources. Such approximations are often called compression schemes, because they greatly reduce storage requirements, but often also enable a great reduction in the computation required. It is generally under appreciated the extent to which a compressed representation will reduce computation just by the simple fact that the amount of data to be processed is greatly reduced. To be more precise, we model the data to be compressed as a function. In this paper we will restrict our attention to the compression of (scalar) functions that map a 2-manifold into the real line. A 2-manifold is a space with the property that the neighborhood of each point is equivalent to a neighborhood of the origin of the plane (i.e., Euclidean 2-space), the half plane (an edge), or the quarter plane (a corner). Traditionally, data compression methods have been applied to functions defined on simple manifolds. Typical manifolds include: the real line (e.g., audio), a rectangle (e.g., images), or a three-dimensional open-ended box (e.g., video). However, many conventional data compression technologies, unmodified, are not suitable for compression of data defined 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> I. Daubechies. </author> <title> Ten Lectures on Wavelets , CBMS-NSF Regional Conf. </title> <journal> Series in Appl. Math. </journal> <volume> Vol. </volume> <pages> 61. </pages> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, PA, </address> <year> 1992. </year>
Reference-contexts: Copyright 1997 SPIE, SPIE Conference on Applications of Digital Image Processing, Vol. 3164, San Diego, 1997. 3 PART II WAVELET TRANSFORMS 2.1 Introduction The basic ideas of wavelets and wavelet transforms were developed in the eighties by Yves Meyer, Ingrid Daubechies, and Stephane Mallat (see for example <ref> [1 ] </ref>). A rather vague definition of wavelets is: '' Wavelet are building blocks that can quickly decorrelate data.'' This sentence incorporates the three main features of wavelets. 2.1.1 Wavelets as a basis First of all, they are building blocks for general data sets or functions. <p> More precisely, we can switch between the original representation of the data and its wavelet representation in a time proportional to the size of the data. The fast decorrelation power of wavelets is the key to compression applications. 2.2 Second generation wavelets Classic wavelet constructions such as <ref> [1] </ref> always define the wavelet functions y i ( x ) as dyadic translates and dilates of one fixed function: ''the mother wavelet y i ( x ) .'' These wavelets are referred to as first generation wavelets.
Reference: [2] <author> A. Cohen, I. Daubechies and P. Vial, </author> <title> Wavelets on the interval and fast wavelet transforms, </title> <booktitle> Applied and Computational Harmonic Analysis 1, </booktitle> <pages> pp. 54-81, </pages> <year> 1993. </year>
Reference-contexts: A good example of adaptation to a local topological property, namely proximity to the manifold boundary, occurs even in the case of wavelets on the unit interval. The wavelets must be adapted (i.e., changed) near the endpoints <ref> [2] </ref>. 2.3 The lifting scheme First generation wavelet algorithms are usually constructed with the help of the Fourier transform. The underlying reason is that translation and dilation become algebraic operations on the Fourier transform.
Reference: [3] <author> R. A. DeVore, B. Jawerth, and B. J. Lucier, </author> <title> "Image compression through wavelet transform coding", </title> <journal> IEEE Trans. Inform. Theory, </journal> <volume> vol. 38, </volume> <pages> pp. 719-746, </pages> <month> March </month> <year> 1992 </year>
Reference-contexts: In this sense the previous two methods are possible oracles. PART III SCALING, QUANTIZATION, AND APPROXIMATION RATE 3.1 Scaling It is shown in <ref> [3 ] </ref> that an optimal approximation for differing L p norms requires differing scaling of the wavelet coefficients prior to the thresholding operation above. (Equivalently, T could be made a function of the subdivision level of the coefficient.) Multiplication by unity optimizes for the L norm. <p> For the general L p norm the scaling factor is 4 - j p . The contrast sensitivity curve for the human visual system is best approximated by using the L 1 norm and its associated scaling <ref> [3] </ref>. During decompression the wavelets are descaled by the inverse of the scaling factor used during compression. 3.2 Quantization Equations (2) and (3) defined an approximation to the function f . <p> We can denote by (11) I = g g &gt; T and define (12) N = T as the cardinality of I It is clear that, for a given f , N can be considered a function of T and vice versa. 3.3 Approximation Rate In <ref> [3 ] </ref> it is shown that there is an inverse relationship between N and the smoothness of f (the smoother f is the smaller N is). The precise relationship is (13) f - f L p 2 CN 2 if and only if f is appropriately smooth. <p> Appropriately smooth means that f is in the Besov space B q q ( ) ( ) , which, in turn, means roughly that f has a derivatives in L q ( ) where 1 = 2 1 . 3.4 Embedded Encoding This suggested to the authors of <ref> [3 ] </ref> that an embedded code could be achieved by using a sequence of T s which are powers of two. An embedded code is a code where the code for a coarser (larger T ) approximation is a head of the code for a finer (smaller T ) approximation.
Reference: [4] <author> N. Dyn, D. Levin, and J. Gregory. </author> <title> A butterfly subdivision scheme for surface interpolation with tension control, </title> <journal> Transactions on Graphics, </journal> <volume> 9(2) </volume> <pages> 160-169, </pages> <year> 1990. </year>
Reference: [5] <author> M. Eck, T. DeRose, T. Duchamp, H. Hoppe, M. Lounsbery, and W. Stuetzle. </author> <title> Multiresolution analysis of arbitrary meshes, </title> <booktitle> Computer Graphics Proceedings, (SIGGRAPH 95), </booktitle> <pages> pages 173-182,1995. </pages>
Reference-contexts: The function might be approximated by its sampled values on a complicated triangular mesh which does not have subdivision connectivity. Such a mesh does not len d itself to the lifting scheme. In <ref> [5 ] </ref> Eck et al use harmonic mapping techniques to interpolate such functions to a genus-equivalent triangular mesh that does have subdivision connectivity, enabling the lifting method described above. 2.6.3 By means of an oracle The simplest approach is to assume that we have an external oracle which give us the
Reference: [6] <author> K. Kolarov and W. Lynch. </author> <title> Compression of functions defined on surfaces of 3D objects , Proceedings of the Data Compression Conference, </title> <booktitle> Snowbird, Utah, </booktitle> <pages> pages 281-291, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: Copyright 1997 SPIE, SPIE Conference on Applications of Digital Image Processing, Vol. 3164, San Diego, 1997. 11 In addition the results reported below are about 12% better on the average than our previous results reported in <ref> [6] </ref> . The main difference is due to the use of the first G-tree structure from Section 4.4 (rather than the second one used in [6]). The addition of arithmetic coder brought only about 4% improvement, similarly to the use of Butterfly vs. <p> Vol. 3164, San Diego, 1997. 11 In addition the results reported below are about 12% better on the average than our previous results reported in <ref> [6] </ref> . The main difference is due to the use of the first G-tree structure from Section 4.4 (rather than the second one used in [6]). The addition of arithmetic coder brought only about 4% improvement, similarly to the use of Butterfly vs. Linear scheme for the Earth data (see [7]).
Reference: [7] <author> K. Kolarov and W. Lynch. </author> <title> Optimization of the SW algorithm for high-dimensional compression, </title> <booktitle> Proceedings of SEQUENCES97 , Positano, </booktitle> <address> Italy, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: The main difference is due to the use of the first G-tree structure from Section 4.4 (rather than the second one used in [6]). The addition of arithmetic coder brought only about 4% improvement, similarly to the use of Butterfly vs. Linear scheme for the Earth data (see <ref> [7] </ref>).
Reference: [8] <author> A. </author> <title> Said and W.A. Pearlman. A new fast and efficient image codec based on set partitioning in hierarchical trees, </title> <note> Submitted to the IEEE Transactions on Circuits and Systems for Video Technology. </note>
Reference-contexts: These locations are heavily correlated by location and scale and are compactly encoded by a quadtree-like technique known as zerotrees <ref> [8, 10] </ref>. <p> The zerotree method provides for an embedded encoding with a set of thresholds differing by powers of one half. Appropriate scaling minimizes for the L 2 1 norm. In Part IV we review the zerotree coding method, focusing on an improved variant introduced in <ref> [ 8] </ref>. Adapting this method to coding the wavelet transform of a function on a general 2-manifold required a novel organization for the zerotrees, called G-tree s, which we describe in detail. <p> Butterfly: Inspired by <ref> [8] </ref>, we predict the odd value here by a weighted average of 8 neig hboring even values as follows: (10) m 2 1 2 1 ( f + f ) - 16 1 2 3 4 Many other prediction schemes can be constructed (for example quadratic, cubic, etc.). <p> In this paper, data and coefficients will only be attached to nodes that are vertices. We need some notation and we will follow that of Said and Pearlman <ref> [8] </ref> (as well as using their coding variant of zerotrees). The root of the G-tree (the whole manifold) is at the top of the G-tree. We will denote b below a in the G-tree by a b . <p> as (16) Prob sig D a ( ) ( ) sig a ( ) ( ) ~ 1 4.3 Structure of the coded file We are now in a position to describe the overall structure of the coded file, using the method of Said and Pearlman and their algorithm SPIHT <ref> [8 ] </ref>. We begin with a preamble that details the base complex, the subdivision method, the number of subdivision levels, and the scaling of the wavelet coefficients. The preamble information is sufficient to reconstruct the G tree and the decoder initializes by reconstructing the G-tree from the preamble. <p> This compactly encodes zerotrees, greatly reduces the encoding of leading zeros, and accounts for the bulk of the lossless compression of the method. The actual encoding method of the navigation bits proposed in <ref> [8 ] </ref> is quite clever. The tree walk proceeds by a sequence of binary decisions which guide the walk while avoiding zerotrees. The encoder outputs as navigation bits each binary predicate as the decision is made. <p> For the results below we have chosen two settings: 1) For comparison with existing data compression techniques (Said & Pea rlman <ref> [8] </ref>) we used "SW" to compress the Lena image (the function being compressed is the grayscale level). We specify a base complex consisting of two triangles, thereby forming a square. This was then subdivided nine times yielding a complex with 513 2 vertices and 2 x512 2 triangles. <p> The table reports the results relative to the interpolated vertex data. We can compare the performance curves in Figure 4 and Figure 5. Figures 6 illustrate visually the quality of the compression. For calculating PSNR we are using the following formula which is similar to the one used in <ref> [8] </ref>. (17) PSNR = 20 * log 10 L2 where L2 = Orig i Proc i i n Here Max and Min are the largest and the smallest wavelet coefficients among all coefficients generated (for all levels), and L2 is the L2-norm for the coefficients of the original image ( Orig <p> On the other side the PSNR numbers for Lena are very similar to the ones reported for the embedded zerotree in <ref> [ 8] </ref> (there for compression 16:1 the PSNR is 33.79 dB). We should remember that the S&P method and algorithm from [ 8] is designed specifically for planar images to take advantage of that spatial structure. <p> On the other side the PSNR numbers for Lena are very similar to the ones reported for the embedded zerotree in <ref> [ 8] </ref> (there for compression 16:1 the PSNR is 33.79 dB). We should remember that the S&P method and algorithm from [ 8] is designed specifically for planar images to take advantage of that spatial structure. In addition there are some differences in the calculation for the PSNR for example, where [8] explicitly uses 255 as the peak for all images calculated, as opposed to the actual peak that we calculate. <p> We should remember that the S&P method and algorithm from [ 8] is designed specifically for planar images to take advantage of that spatial structure. In addition there are some differences in the calculation for the PSNR for example, where <ref> [8] </ref> explicitly uses 255 as the peak for all images calculated, as opposed to the actual peak that we calculate. Our method is primarily higher dimensional, thus accounting for all that the numbers that we are papering for comparison in the Lena case are surprisingly good.
Reference: [9] <author> P. Schr der and W. Sweldens. </author> <title> Spherical wavelets: Efficiently representing functions on the sphere, </title> <booktitle> Computer Graphics Proceedings, (SIGGRAPH 95), </booktitle> <pages> pages 161-172, </pages> <year> 1995. </year>
Reference-contexts: A diagram of the compression and decompression processes is given in Figure 1. :DYHOHWflfl 7UDQVIRUP 6FDOLQJflDQGfl 4XDQWL]DWLRQfl =HURWUHHflfl &RGLQJ ,QYfl:DYHOHWflfl 7UDQVIRUP 'HVFDOLQJfl =HURWUHHflfl 'HFRGLQJ GDWD HQFRGHGflGDWD 1.3 Structure of the paper In what follows in Part II we describe second generation wavelet transforms , as formulated by Sweldens <ref> [9 ] </ref>, and discuss an efficient method for calculating such wavelets - the lifting scheme [ 11]. An illustration of this methodology will be demonstrated as wavelet transforms of a functio n defined on a 2-sphere [9]. In Part III we discuss the scaling and quantization of the wavelet coefficients. <p> An illustration of this methodology will be demonstrated as wavelet transforms of a functio n defined on a 2-sphere <ref> [9] </ref>. In Part III we discuss the scaling and quantization of the wavelet coefficients. The zerotree method provides for an embedded encoding with a set of thresholds differing by powers of one half. Appropriate scaling minimizes for the L 2 1 norm. <p> The only thing to do is to reverse the operations and toggle + and -. 2.4 Spherical wavelets A typical example of the use of lifting to construct second generat ion wavelets are on a sphere <ref> [9 ] </ref>. The sphere is a 2 manifold (i.e., a surface). The construction starts with the tessellation of the sphere into cells (i.e., spherical triangles, the ir edges, and their vertices). <p> These spherical wavelets can now be used to process scalar functions defined on a sphere. Typical examples are spherical textures, environment maps and earth elev ation data (topography). In <ref> [9 ] </ref> it is shown that with simple diagonal scaling of the wavelet coefficients, one can construct local smoothing and enhancement operators. 2.5 Wavelets on general 2-manifolds Note that there is very little of the sphere in the discussion of spherical wavelets - only that the base complex is homeomorphic (i.e.,
Reference: [10] <author> J.M. Shapiro. </author> <title> Embedded image coding using zerotrees of wavelet coefficients, </title> <booktitle> 41(12) </booktitle> <pages> 3445-3462, </pages> <year> 1993, </year> <journal> IEEE Trans. Signal Process. </journal>
Reference-contexts: These locations are heavily correlated by location and scale and are compactly encoded by a quadtree-like technique known as zerotrees <ref> [8, 10] </ref>. <p> Coefficients whose bit is significant (not a leading zero) are so much in the minority that the problem of designating which coefficients are significant far outweighs the problem of the value of those coefficients. To deal with this situation, Shapiro <ref> [10] </ref> defined the significance of a coefficient g j (14) sig g ( ) 2 j A coefficient g j is significant at bit plane n if sig g j n and insignificant at bit plane n otherwise. <p> The bit position of the leading one of g j is thus given by sig g j . Shapiro <ref> [10 ] </ref> noticed that insignificant coefficients were typically clustered spatially and strongly correlated from between subdivision levels at the same spatial location.
Reference: [11] <author> W. Sweldens. </author> <title> The lifting schem e: A custom-design construction of biorthogonal wavelets, </title> <type> Technical Paper 1994:7, </type> <institution> Industrial Mathematics Initiative, Department of Mathematics, University of South Carolina, </institution> <year> 1994. </year>
Reference-contexts: :DYHOHWflfl 7UDQVIRUP 6FDOLQJflDQGfl 4XDQWL]DWLRQfl =HURWUHHflfl &RGLQJ ,QYfl:DYHOHWflfl 7UDQVIRUP 'HVFDOLQJfl =HURWUHHflfl 'HFRGLQJ GDWD HQFRGHGflGDWD 1.3 Structure of the paper In what follows in Part II we describe second generation wavelet transforms , as formulated by Sweldens [9 ], and discuss an efficient method for calculating such wavelets - the lifting scheme <ref> [ 11] </ref>. An illustration of this methodology will be demonstrated as wavelet transforms of a functio n defined on a 2-sphere [9]. In Part III we discuss the scaling and quantization of the wavelet coefficients. <p> The underlying reason is that translation and dilation become algebraic operations on the Fourier transform. However, in the case of second generation wavelets, the Fourier transform can no longer be used as a construction tool. Recently the lifting scheme <ref> [11] </ref>, a new concept in the construction of wavelets has been introduced. It differs from the classical constructions in the sense that it does not need the Fourier transform. Therefore it is the perfect tool for the construction of second generation wavelets.
Reference: [12] <author> I. Witten, R. Neal and J. Cleary. </author> <title> Arithmetic coding for data compression , In Communications of the ACM, </title> <editor> v. </editor> <volume> 30, </volume> <editor> n. </editor> <volume> 6, </volume> <pages> pages 520-540, </pages> <month> June </month> <year> 1987. </year> <booktitle> Copyright 1997 SPIE, SPIE Conference on Applications of Digital Image Processing, </booktitle> <volume> Vol. </volume> <pages> 3164, </pages> <address> San Diego, </address> <year> 1997. </year> <note> 13 19 bit planes, 1:1 compression 9 bit planes, 48:1 compression PSNR = 89.92 at 7.97 bpv PSNR = 37.68 at 0.17 bpv 17 bit planes read, 8 bit planes read, PSNR = 78.58 at 8.10 bpp PSNR = 30.39 at 0.21 bpp subdivision, arithmetic coder) </note>
Reference-contexts: This data was then wavelet transformed using butterfly lifting and compressed at various ratios. The resulting bitstream for both data sets was further encoded using arithmetic coder <ref> [12] </ref>. Table 1 below summarizes the results for the peak signal-to-noise ratio (PSNR) for the two examples above for several different compression ratios. Scaling was chosen appropriate to the L 2 norm. The table reports the results relative to the interpolated vertex data.
References-found: 12

