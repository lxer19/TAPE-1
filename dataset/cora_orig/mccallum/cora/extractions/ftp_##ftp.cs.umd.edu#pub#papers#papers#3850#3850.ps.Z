URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3850/3850.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Dynamic Time-Based Scheduling for Hard Real-Time Systems  
Degree: Seonho Choi, Doctor of Philosophy, 1997 Dissertation directed by: Professor Ashok K. Agrawala  
Affiliation: Department of Computer Science  
Note: Abstract Title of Dissertation:  
Abstract: In traditional time-based scheduling schemes for real-time systems time line is explicitly managed to obtain a feasible schedule that satisfies all timing constraints. In the schedule the task attributes, such as task start time, are statically decided off-line and used without modification throughout system operation time. However, for dynamic real-time systems, in which new tasks may arrive during the operation, or tasks may have relative constraints based on information only known at run-time, such static schemes may lack the ability to accommodate dynamic changes. Clearly a solution of dynamic real-time scheduling has to reflect the knowledge about tasks and their execution characteristics. In this dissertation we present a dynamic time-based scheduling scheme and show its applicability for three problem domains. In dynamic time-based scheduling scheme attributes of task instances in the schedule may be represented as functions parameterized with information available at task dispatching time. These functions are called attribute functions and may denote any attribute of a task instance, such as lower and upper bound of its start time, its execution mode, etc. Flexible resource management becomes possible in this scheme by utilizing the freedom provided by the scheme. First, we study the problem of dynamic dispatching of tasks, reflecting relative timing constraints among tasks. The relative constraints may be defined across the boundary of two consecutive scheduling windows as well as within one scheduling window. We present the solution approach with which we are not only able to test the schedulability of a task set, but also able to obtain maximum slack time by postponing static task executions at run-time. Second, new framework is formulated for designing real-time control systems in which the assumption of fixed sampling period is relaxed. That is, sampling time instants are found adaptively based on physical system state such that a new cost function value is minimized which incorporates computational costs. We show, for linear time-invariant control systems, that the computation requirement can be reduced while maintaining the quality of control. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ashok K. Agrawala, Seonho Choi, and Leyuan Shi. </author> <title> Designing temporal controls. </title> <type> Technical Report CS-TR-3504, </type> <institution> UMIACS-TR-95-81, Department of Computer Science, University of Maryland, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: In dynamic temporal control, the computational cost is incorporated into the cost function and the time instants for performing control computations are chosen to minimize this cost function. With this new approach, we can perform the same quality of control with fewer control computations compared to the traditional approaches <ref> [1] </ref>. 2.4 Scheduling Aperiodic and Sporadic Tasks Scheduling of dynamic tasks such as aperiodic or sporadic tasks has been studied extensively for priority-based scheduling systems. <p> Included in the m 1 constraints are those denoting the total ordering on jobs: 8j 2 <ref> [1; k] </ref> :: 8i 2 [1; N ) :: s i + e i s i+1 j j j+1 2. The set of release time and deadline constraints: 8j 2 [1; k] :: Bx j b j (3.4) 1 Note that k may be equal to 1. 14 where b j <p> Included in the m 1 constraints are those denoting the total ordering on jobs: 8j 2 <ref> [1; k] </ref> :: 8i 2 [1; N ) :: s i + e i s i+1 j j j+1 2. The set of release time and deadline constraints: 8j 2 [1; k] :: Bx j b j (3.4) 1 Note that k may be equal to 1. 14 where b j is an m 2 -dimensional column vector of non-positive integers satisfying: b j = b 1 + (1 j)L and d j is an m 3 -dimensional column vector of <p> So, assume that v = s a for some a in <ref> [1; N ] </ref>. If there exists an edge from y to z in G (f a ), then the condition 2 holds. Hence, further assume that an edge y ! z is created just after eliminating f a from G (f a ).
Reference: [2] <author> N. C. Audlsey, A. Burns, R. I. Davis, and A. J. Wellings. </author> <title> Integrating best effort and fixed priority scheduling. </title> <booktitle> In Proceedings of the 1994 Workshop on Real-Time Programming, </booktitle> <address> Lake Constance, Germany, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Examples are found in application domains such as avionics, process control, automated manufacturing, robotics, etc. Real-time systems of the next generation will be required to interact with more complex and dynamic systems <ref> [40, 2] </ref>. In such environments it will be required that a mechanism be provided to support high degree of concurrency, and to adapt itself to dynamically changing system state. Dynamic tasks such as aperiodic tasks with or without timing constraints may arrive at any time instant during system operation. <p> Example busy period is depicted in Fig B.1. Figure B.1: Busy period Here, the earliest finish time of t i is defined as est (i) + C i . Proposition B.3 The following is satisfied for every i 2 <ref> [2; + 1] </ref>: 8t 1 2 [ef t ( i1 ); est ( i )] :: 8l &gt; 0 :: (t 1 ; t 1 + l) (est ( i ); est ( i ) + l) (B.1) Proof: If the time interval [est ( i ); est ( i )
Reference: [3] <author> N. C. Audsley. </author> <title> Deadline monotonic scheduling. </title> <type> YCS 146, </type> <institution> University of York, Department of Computer Science, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: A deadline monotonic scheduling algorithm is shown to be optimal for a set of tasks which have deadlines less than or equal to their periods. It assigns priorities according to their deadlines, the shorter the deadline, the higher priority is assigned regardless of the periods <ref> [33, 3] </ref>. For a set of tasks with arbitrary deadlines, it is shown that the optimal priority assignment can't be done in a simple priority assignment method, but requires a pseudo polynomial time algorithm [50]. A synchronization protocol becomes necessary when tasks use shared resources such as semaphores.
Reference: [4] <author> T. Baker and A. Shaw. </author> <title> The Cyclic Executive Model and Ada. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 1(1) </volume> <pages> 7-25, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Clearly, such functions lead to a highly state dependent dynamic schedules. For example, the dynamic time-based scheduling scheme may be applied to cope with transient overloads that occur in many real-time systems <ref> [4] </ref>. In fixed priority-based systems, some work has been done on this issue [44]. However, as far as we know, no systematic work has been done on this, especially on time-based scheduling scheme. Dynamic time-based scheduling scheme seems to be an appropriate framework for this problem.
Reference: [5] <author> T. P. Baker. </author> <title> A Stack-Based Resource Allocation Policy for RealTime Processes. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <year> 1990. </year>
Reference-contexts: Then, a task, t , can start a new critical section only if t 's priority is higher than all priority ceilings of all the semaphores locked by tasks other than t . In stack-based protocol <ref> [5] </ref>, the concept of preemption level is used instead of the priorities to derive the protocol suitable for both fixed priority and dynamic priority based systems. Also, sharing of multiple-unit resources becomes possible with this protocol. <p> The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [36]. A dynamic priority ceiling protocol [10] and a stack-based protocol <ref> [5] </ref> have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times. Note that the stack based resource allocation protocol may be used for both fixed priority and dynamic priority scheduling algorithms. Also, in [5], it is shown that the stack-based protocol <p> ceiling protocol [10] and a stack-based protocol <ref> [5] </ref> have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times. Note that the stack based resource allocation protocol may be used for both fixed priority and dynamic priority scheduling algorithms. Also, in [5], it is shown that the stack-based protocol provides a better schedulability test than that of dynamic priority ceiling protocol. 2.1.3 Static Time-based Scheduling In a static time-based scheduling scheme, a calendar for a set of task instances is constructed at pre-runtime. <p> Then, 9x n :: C holds if and only if C 0 holds. Example This example is based on the work presented in the paper by Saksena et al.[23]. Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. <p> Example This example is based on the work presented in the paper by Saksena et al.[23]. Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. Initially, since e 4 is the innermost universally quantified variable, it can be eliminated first.
Reference: [6] <author> A. Belleisle. </author> <title> "Stability of systems with nonlinear feedback through randomly time-varying delays". </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> AC-20:67-75, </volume> <month> February </month> <year> 1975. </year>
Reference-contexts: However, nearly all the results develop control laws under the assumption of equal sampling periods. In addition, taking computation time delay into consideration for real-time computer control has been studied in several research papers <ref> [6, 25, 27, 41, 46, 55] </ref>. However, to the best of our knowledge, the dynamic temporal control approach which is explained in Chapter 5 has not been studied in the past.
Reference: [7] <author> R. Bellman. </author> <title> Adaptive Control Process: A Guided Tour. </title> <publisher> Princeton,NJ: Princeton University Press, </publisher> <year> 1961. </year>
Reference-contexts: Our objective here is to determine the optimal control law that minimizes the quadratic performance index function (Cost) J M which is defined in (5.4). The principle of optimality, developed by Richard Bellman <ref> [7, 8] </ref> is the approach used here.
Reference: [8] <author> R. </author> <title> Bellman. </title> <journal> Bellman special issue. IEEE Transactions on Automatic Control, </journal> <volume> AC-26, </volume> <month> October </month> <year> 1981. </year>
Reference-contexts: Then, 9x n :: C holds if and only if C 0 holds. Example This example is based on the work presented in the paper by Saksena et al.[23]. Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. <p> Example This example is based on the work presented in the paper by Saksena et al.[23]. Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 [5; 8] :: 9s 2 :: 8e 2 2 <ref> [8; 10] </ref> :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. <p> Example This example is based on the work presented in the paper by Saksena et al.[23]. Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. Initially, since e 4 is the innermost universally quantified variable, it can be eliminated first. <p> Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 [5; 8] :: 9s 2 :: 8e 2 2 <ref> [8; 10] </ref> :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. Initially, since e 4 is the innermost universally quantified variable, it can be eliminated first. <p> Our objective here is to determine the optimal control law that minimizes the quadratic performance index function (Cost) J M which is defined in (5.4). The principle of optimality, developed by Richard Bellman <ref> [7, 8] </ref> is the approach used here.
Reference: [9] <author> T. Carpenter, K. Driscoll, K. Hoyme, and J. Carciofini. </author> <title> Arinc 659 scheduling: Problem definition. </title> <booktitle> In Proceedings, IEEE Real-time Systems Symposium, </booktitle> <address> San Juan, PR, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The occurrences of events in different tasks may also be constrained from the requirements and characteristics of the environment by separation or relative deadline constraints [23]. These relative constraints have to be enforced in many real-time control systems such as process control systems and flight control systems <ref> [9] </ref>, etc. For example, in process control systems, it has been shown that jitter constraints have more influence on control systems performance than the frequency constraints [29].
Reference: [10] <author> M. Chen and K. Lin. </author> <title> Dynamic Priority Ceilings: A Concurrency Control Protocol for Real-Time Systems. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 2(4) </volume> <pages> 325-346, </pages> <year> 1990. </year>
Reference-contexts: The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [36]. A dynamic priority ceiling protocol <ref> [10] </ref> and a stack-based protocol [5] have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times. Note that the stack based resource allocation protocol may be used for both fixed priority and dynamic priority scheduling algorithms. <p> For example, no correct spare capacity can be obtained in the example case shown in Figure 2.2. According to the algorithm presented in that paper, we have two execution intervals, <ref> [10; 12] </ref> and [0; 10]. The spare capacities in these intervals are: sc ([10; 12]) = 2 7 = 5 11 This result shows that, in an execution interval [0; 10], a spare capacity of 2 is found. <p> For example, no correct spare capacity can be obtained in the example case shown in Figure 2.2. According to the algorithm presented in that paper, we have two execution intervals, [10; 12] and <ref> [0; 10] </ref>. The spare capacities in these intervals are: sc ([10; 12]) = 2 7 = 5 11 This result shows that, in an execution interval [0; 10], a spare capacity of 2 is found. <p> According to the algorithm presented in that paper, we have two execution intervals, [10; 12] and <ref> [0; 10] </ref>. The spare capacities in these intervals are: sc ([10; 12]) = 2 7 = 5 11 This result shows that, in an execution interval [0; 10], a spare capacity of 2 is found. However, as can be seen in Figure 2.2, zero spare capacity should have been found in an interval [0; 10]. <p> spare capacities in these intervals are: sc ([10; 12]) = 2 7 = 5 11 This result shows that, in an execution interval <ref> [0; 10] </ref>, a spare capacity of 2 is found. However, as can be seen in Figure 2.2, zero spare capacity should have been found in an interval [0; 10]. This shows that their solution approach is incomplete. 2.5 Summary We have presented a brief overview of the related work on real-time scheduling and control systems design. <p> Example This example is based on the work presented in the paper by Saksena et al.[23]. Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 [5; 8] :: 9s 2 :: 8e 2 2 <ref> [8; 10] </ref> :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. <p> Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 [5; 8] :: 9s 2 :: 8e 2 2 <ref> [8; 10] </ref> :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 3.1. Initially, since e 4 is the innermost universally quantified variable, it can be eliminated first.
Reference: [11] <author> S. Cheng and Ashok K. Agrawala. </author> <title> Scheduling of periodic tasks with relative timing constraints. </title> <type> Technical Report CS-TR-3392, </type> <institution> UMIACS-TR-94-135, Department of Computer Science, University of Maryland, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: In the presence of jitter constraints between start times of non-preemptive task instances, the problem of finding a static schedule has been addressed in <ref> [11] </ref>. However, this static cyclic scheduling approach only allows certain types of min/max constraints to be specified, and it only works under low utilization. <p> This shows that their solution approach is incomplete. 2.5 Summary We have presented a brief overview of the related work on real-time scheduling and control systems design. The works by Cheng et al. <ref> [11] </ref> and Gerber et al. [23] are combined and extended in Chapter 4 for scheduling tasks with relative timing constraints. Our solution approach overcomes the limitations of those previous approaches and provides more flexible and unified ways for scheduling tasks with complex timing constraints. <p> The first one is the static cyclic scheduling scheme <ref> [11] </ref> and the second one is the parametric scheduling scheme [23]. 16 3.2.1 Static Cyclic Scheduling The static cyclic scheduling problem has been studied in [11]. <p> The first one is the static cyclic scheduling scheme <ref> [11] </ref> and the second one is the parametric scheduling scheme [23]. 16 3.2.1 Static Cyclic Scheduling The static cyclic scheduling problem has been studied in [11]. The periodic task model is used, which means that every job has a release time and a deadline constraints, and only the jitter constraints between two job start times are allowed. <p> Obtaining the ordering and job start times is an NP-hard problem, since non-preemptive scheduling problem with release time and deadline constraints is NP-hard. Several priority based non-preemptive scheduling algorithms are presented and their performances are compared in <ref> [11] </ref>. Suppose that a job t j i 1 belongs to j , and a job t j+1 i 2 belongs to j+1 , and they have jitter constraints c 1 s j+1 j i 1 c 2 (0 &lt; c 1 c 2 L). <p> In Chapter 3 and 4, it is also assumed that a total ordering among tasks is found at pre-runtime by an off-line scheduler. Previous work by Cheng et al. <ref> [11] </ref> and Mok et al. [37] use a heuristic approach called smallest latest start time first to schedule task instances with relative constraints. However, their heuristics don't fully reflect the relative timing constraints. Improved heuristic functions may be developed if the constraint graph structure is utilized.
Reference: [12] <author> S. T. Cheng and Ashok K. Agrawala. </author> <title> Allocation and scheduling of real-time periodic tasks with relative timing constraints. </title> <type> Technical Report CS-TR-3402, </type> <institution> UMIACS-TR-95-6, Department of Computer Science, University of Maryland, </institution> <month> January </month> <year> 1995. </year> <month> 93 </month>
Reference-contexts: Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [52, 21, 12, 56] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling 8 approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [54]. <p> Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems <ref> [23, 12] </ref>. <p> For example, no correct spare capacity can be obtained in the example case shown in Figure 2.2. According to the algorithm presented in that paper, we have two execution intervals, <ref> [10; 12] </ref> and [0; 10]. The spare capacities in these intervals are: sc ([10; 12]) = 2 7 = 5 11 This result shows that, in an execution interval [0; 10], a spare capacity of 2 is found.
Reference: [13] <author> H. Chetto and M. Chetto. </author> <title> Scheduling Periodic and Sporadic Task in a Real-Time System. </title> <journal> Information Processing Letters, </journal> <volume> 30(4) </volume> <pages> 177-184, </pages> <year> 1989. </year>
Reference-contexts: The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks <ref> [14, 13, 15] </ref>. <p> Then A (t) can be scheduled under the proposed EDF if 8 1 i m + 1 :: (t; D a i X (c a j (t)) Proof The proof can be easily derived from the theorems 3.2 and 3.3 in the paper by Chetto et al. <ref> [13] </ref>. Theorem 6.1 Let A (t) denote a set of aperiodic tasks defined above.
Reference: [14] <author> H. Chetto and M. Chetto. </author> <title> Some Results of the Earliest Deadline First Algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-15(10):1261-1269, </volume> <month> October </month> <year> 1989. </year>
Reference-contexts: The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks <ref> [14, 13, 15] </ref>.
Reference: [15] <author> H. Chetto, M. Silly, and T. Bouchentouf. </author> <title> Dynamic Scheduling of Real-Time Tasks under Precedence Constraints. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 2 </volume> <pages> 181-194, </pages> <year> 1990. </year>
Reference-contexts: The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks <ref> [14, 13, 15] </ref>. <p> Proposition 6.1 and a set of additional aperiodic tasks are schedulable by EDF if and only if with virtual deadlines and release times is schedulable with the additional aperiodic tasks by EDF. Proof Proof can be derived from the theorem in <ref> [15] </ref>. Optimal Scheduling Algorithm In this section, the optimal scheduling algorithm is presented and its optimality is proved. We assume that the task instances in have virtual deadlines and virtual release times instead of the original ones.
Reference: [16] <author> G. Dantzig and B. Eaves. </author> <title> Fourier-Motzkin Elimination and its Dual. </title> <journal> Journal of Combinatorial Theory(A), </journal> <volume> 14 </volume> <pages> 288-297, </pages> <year> 1973. </year>
Reference-contexts: Then the sentence 8x n 2 [l n ; u n ] :: C holds if and only if C 0 holds. The existential quantifier can be eliminated by using Fourier-Motzkin variable elimination tech nique <ref> [16] </ref>. Fourier-Motzkin Elimination. Consider a system of linear constraints C in n variables (x 1 ; x 2 ; : : : ; x n ).
Reference: [17] <author> R. I. Davis. </author> <title> Approximate slack stealing algorithms for fixed priority pre-emptive systems. </title> <type> Technical Report YCS 217 (1993), </type> <institution> Department of Computer Science, University of York, </institution> <address> England, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> However, most of their work assumes that only release time and deadline constraints are present. The complexity of optimal slack stealing algorithms in priority based systems is high <ref> [18, 17] </ref>. 1.1.2 Dynamic Adjustment of Timing Constraints Usually, the timing constraints of tasks are statically determined prior to system operation time from the characteristics of the physical system. Periodic task model is widely used and assumed in most real-time systems. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> The optimal slack stealing algorithm is found to be pseudo polynomial [18] and several approximation algorithms have been proposed <ref> [17] </ref>. 2.4.2 Scheduling Dynamic Tasks in Dynamic Priority Systems An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist [28, 24].
Reference: [18] <author> R. I. Davis, K. W. Tindell, and A. Burns. </author> <title> Scheduling slack time in fixed priority pre-emptive systems. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 222-231. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> However, most of their work assumes that only release time and deadline constraints are present. The complexity of optimal slack stealing algorithms in priority based systems is high <ref> [18, 17] </ref>. 1.1.2 Dynamic Adjustment of Timing Constraints Usually, the timing constraints of tasks are statically determined prior to system operation time from the characteristics of the physical system. Periodic task model is widely used and assumed in most real-time systems. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected <ref> [18, 32, 49] </ref>. The optimal slack stealing algorithm is found to be pseudo polynomial [18] and several approximation algorithms have been proposed [17]. 2.4.2 Scheduling Dynamic Tasks in Dynamic Priority Systems An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist [28, 24]. <p> The optimal slack stealing algorithm is found to be pseudo polynomial <ref> [18] </ref> and several approximation algorithms have been proposed [17]. 2.4.2 Scheduling Dynamic Tasks in Dynamic Priority Systems An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist [28, 24].
Reference: [19] <author> M. Dertouzos. </author> <title> Control Robotics: the Procedural Control of Physical Processes. </title> <booktitle> Proceedings of the IFIP Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: The earliest deadline first (EDF) scheduling algorithm which assigns the highest priority to a task instance with the closest deadline is known to be optimal for a set of periodic or aperiodic tasks <ref> [36, 19] </ref>. The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [36].
Reference: [20] <author> P. Dorato and A. Levis. </author> <title> "Optimal linear regulators: The discrete time case". </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> AC-16:613-620, </volume> <month> December </month> <year> 1971. </year>
Reference-contexts: One unit of time represents the subinterval , whereas x 2 R n and u 2 R l are the state and input vectors, respectively. It is well known that there exists a steady state optimal control law <ref> [20, 39] </ref> u o (i) = f i [x (i)] i = 0; 1; :::; M 1 (5.2) that minimizes the quadratic performance index function (Cost) J M = k=0 where Q 2 R nfin is positive semi-definite and R 2 R lfil is positive definite.
Reference: [21] <author> G. Fohler and C. Koza. </author> <title> Heuristic Scheduling for Distributed Real-Time Systems. </title> <type> MARS 6/89, </type> <institution> Technische Universitat Wien, Vienna, Austria, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [52, 21, 12, 56] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling 8 approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [54].
Reference: [22] <author> Gerhard Fohler. </author> <title> Joint scheduling of distributed complex periodic and hard aperiodic tasks in statically scheduled systems. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1995. </year>
Reference-contexts: However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme <ref> [22] </ref> in the presence of release time and deadline constraints. But, the solution approach presented in the paper is incomplete as explained in Chapter 2. <p> In this section, those works are summarized as well as a recent work on aperiodic task scheduling problem on the basis of time-based scheduling scheme <ref> [22] </ref>. 2.4.1 Scheduling Dynamic Tasks in Fixed Priority Systems Hard and non-realtime aperiodic tasks can be scheduled within a fixed priority scheduling scheme. One approach is to utilize the aperiodic server concept in which a certain percentage of the processor utilization is reserved for servicing the aperiodic tasks. <p> been proposed and studied and the Improved Priority Exchange Algorithm is shown to perform well [48]. 1 LCM stands for Least Common Multiple. 10 2.4.3 Scheduling Dynamic Tasks in Time-based Systems The aperiodic task scheduling problem in time-based scheduling scheme has been addressed in the paper by Fohler et al. <ref> [22] </ref>. The initial schedule is assumed to be given and the arriving aperiodic tasks are scheduled at runtime. First, the deadlines of task instances, t j , in the time-based schedule are sorted and the schedule is divided into a set of disjoint execution intervals, I i . <p> Our solution approach overcomes the limitations of those previous approaches and provides more flexible and unified ways for scheduling tasks with complex timing constraints. Also, Fohler et al. <ref> [22] </ref> propose a mechanism to flexibly manage slack times in time-based scheduling scheme. However, their approach is un-necessarily complicated and incomplete as shown in the previous section. Our approach presented in Chapter 6 provides more intuitive and complete solution.
Reference: [23] <author> R. Gerber, W. Pugh, and M. Saksena. </author> <title> Parametric Dispatching of Hard Real-Time Tasks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 44(3), </volume> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: The dynamic time-based scheduling scheme provides a sound basis for realizing the solution approaches derived. 1.1 Motivation 1.1.1 Scheduling with Relative Constraints In some real-time systems complex timing constraints exist, such as jitter, separation, and relative deadline constraints, in addition to release time and deadline constraints <ref> [23] </ref>. Those constraints are usually specified between event occurrence times and are based on information (e.g. task completion time) which is only available at run-time. <p> Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems <ref> [23, 12] </ref>. <p> That is, the difference of two event occurrence times, called jitter, should lie between a lower and an upper bound. The occurrences of events in different tasks may also be constrained from the requirements and characteristics of the environment by separation or relative deadline constraints <ref> [23] </ref>. These relative constraints have to be enforced in many real-time control systems such as process control systems and flight control systems [9], etc. For example, in process control systems, it has been shown that jitter constraints have more influence on control systems performance than the frequency constraints [29]. <p> Usually, the relative constraints between events are transformed into relative constraints between start or finish times of the tasks to make feasible the process of scheduling and dispatching of task instances <ref> [26, 23] </ref>. In [26] a preemptive fixed priority scheduling algorithm is developed to schedule periodic tasks with relative deadline constraints between finish times of two successive instances of periodic tasks. <p> However, other types of relative constraints are not allowed in that work and it is not possible to flexibly manage slack times at runtime for dynamic tasks. In <ref> [23] </ref> dispatching of a totally ordered non-preemptive task instance set with any min/max constraints is studied and a new scheduling mechanism called parametric scheduling is developed. <p> This shows that their solution approach is incomplete. 2.5 Summary We have presented a brief overview of the related work on real-time scheduling and control systems design. The works by Cheng et al. [11] and Gerber et al. <ref> [23] </ref> are combined and extended in Chapter 4 for scheduling tasks with relative timing constraints. Our solution approach overcomes the limitations of those previous approaches and provides more flexible and unified ways for scheduling tasks with complex timing constraints. <p> We also present some prior works in detail since our solution approach is based on parametric dispatching approach <ref> [23] </ref> developed for a transaction scheduling problem. In Section 3.1, the problem is formally defined. Then two prior works are presented on scheduling with relative constraints, static approach and dynamic parametric approach. <p> However, this ap proach can't be used in the presence of arbitrary relative constraints between start or finish times of jobs <ref> [23] </ref>. Also, this approach suffers from the loss of schedulability problem. Some task sets are not schedulable in this approach, even though they are schedulable if our approach is employed. This will be explained through an example later. <p> Some task sets are not schedulable in this approach, even though they are schedulable if our approach is employed. This will be explained through an example later. To cope with some of the above limitations the parametric scheduling scheme was developed in the context of real-time transaction scheduling <ref> [23] </ref>. However, as far as we know, the solution approach has not been found for general periodic task models where jobs in different scheduling windows may have relative constraints. <p> The first one is the static cyclic scheduling scheme [11] and the second one is the parametric scheduling scheme <ref> [23] </ref>. 16 3.2.1 Static Cyclic Scheduling The static cyclic scheduling problem has been studied in [11]. The periodic task model is used, which means that every job has a release time and a deadline constraints, and only the jitter constraints between two job start times are allowed. <p> Furthermore, a periodic task may be decomposed into several subtasks and any kind of standard constraints may be defined between these subtasks <ref> [23] </ref>. In these cases this static scheduling approach is no more applicable without sacrificing the schedulability [23]. By transforming the jitter constraints across the boundary of j and j+1 into those between jobs within j , we are affecting the schedulability of job sets. <p> Furthermore, a periodic task may be decomposed into several subtasks and any kind of standard constraints may be defined between these subtasks <ref> [23] </ref>. In these cases this static scheduling approach is no more applicable without sacrificing the schedulability [23]. By transforming the jitter constraints across the boundary of j and j+1 into those between jobs within j , we are affecting the schedulability of job sets. <p> We will show that, under our new scheduling scheme in which this transformation is not necessary, the schedulability of job sets is increased, i.e., some job sets are not schedulable according to this scheme whereas it is schedulable by our scheme. 3.2.2 Parametric Scheduling Gerber et al. <ref> [23] </ref> proposes a parametric scheduling scheme in the context of transaction scheduling, in which any standard constraints may be given between jobs in one transaction. <p> The actual form of these parametric functions are given in the following proposition which is obtained from the paper by Saksena et al. <ref> [23] </ref>. This proposition will be used in deriving our solution approach in Chapter 4. Proposition 3.1 (Parametric Bound Functions [23]) A parametric lower bound function for s j is of the following form: F min = max (p 1 + c 1 ; p 2 + c 2 ; : : <p> The actual form of these parametric functions are given in the following proposition which is obtained from the paper by Saksena et al. <ref> [23] </ref>. This proposition will be used in deriving our solution approach in Chapter 4. Proposition 3.1 (Parametric Bound Functions [23]) A parametric lower bound function for s j is of the following form: F min = max (p 1 + c 1 ; p 2 + c 2 ; : : :; p a + c a ; ff min where each p i , 1 i a, belongs to <p> The k-fold cyclically constrained job set was defined that allows standard constraints to be specified across the boundaries of two consecutive scheduling windows as well as within one scheduling window. Also, prior works were presented in detail on scheduling with relative constraints, including the parametric scheduling scheme <ref> [23] </ref>. 22 Chapter 4 Dynamic Dispatching of Cyclic Real-Time Tasks with Relative Constraints In this chapter, we present an off-line algorithm to check the schedulability of a job set, 1;1 . <p> In Section 4.2, example job sequences are given with parametric calendars found from the off-line algorithm. Finally, a summary of the chapter follows in Section 4.3. 4.1 Dynamic Cyclic Dispatching As in the parametric scheduling approach developed for transaction scheduling <ref> [23] </ref>, we want to devise a schedulability test and an efficient dispatching mechanism when an 1-fold cyclically constrained job set, 1;1 , is given with its constraint matrices and vectors. We say 1;k , is schedulable if there exists any method which can successfully dispatch the jobs in 1;k . <p> Hence, once sched 1;k turns out to be False, then all sched 1;j , k j, are False, too. By this proposition, the schedulability of 1;1 is defined. Definition 4.2 (Schedulability of 1;1 ) 1;1 is schedulable if and only if lim sched 1;k = True In <ref> [23] </ref>, it is shown that checking Predicate (3.9) is not trivial because of the nondeterministic job execution times and because of the existence of standard relative constraints among the jobs. This applies to the above sched 1;k predicate, too. The variable elimination techniques are used in [23] to eliminate variables from <p> 1;k = True In <ref> [23] </ref>, it is shown that checking Predicate (3.9) is not trivial because of the nondeterministic job execution times and because of the existence of standard relative constraints among the jobs. This applies to the above sched 1;k predicate, too. The variable elimination techniques are used in [23] to eliminate variables from Predicate (3.9). <p> The overview of off-line component is shown in From Theorem 4.1 the total complexity of the off-line algorithm is O (n 2 N 3 ), since each loop iteration of Algorithm 4.3 may take at most O (N 3 ) computation time <ref> [23] </ref>.
Reference: [24] <author> T.M. Ghazalie and T.P. Baker. </author> <title> Aperiodic servers in a deadline scheduling environment. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 9 </volume> <pages> 31-67, </pages> <year> 1995. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> The optimal slack stealing algorithm is found to be pseudo polynomial [18] and several approximation algorithms have been proposed [17]. 2.4.2 Scheduling Dynamic Tasks in Dynamic Priority Systems An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist <ref> [28, 24] </ref>. The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks [14, 13, 15].
Reference: [25] <author> A. Gosiewski and A. Olbrot. </author> <title> "The effect of feedback delays on the performance of multivariable linear control systems". </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> AC-25(4):729-734, </volume> <month> August </month> <year> 1980. </year>
Reference-contexts: However, nearly all the results develop control laws under the assumption of equal sampling periods. In addition, taking computation time delay into consideration for real-time computer control has been studied in several research papers <ref> [6, 25, 27, 41, 46, 55] </ref>. However, to the best of our knowledge, the dynamic temporal control approach which is explained in Chapter 5 has not been studied in the past.
Reference: [26] <author> C. Han, C. Hou, and K. Lin. </author> <title> Distance-Constrained Scheduling and Its Applications to Real-Time Systems. </title> <journal> IEEE Transactions on Computers. </journal> <note> To appear. </note>
Reference-contexts: Usually, the relative constraints between events are transformed into relative constraints between start or finish times of the tasks to make feasible the process of scheduling and dispatching of task instances <ref> [26, 23] </ref>. In [26] a preemptive fixed priority scheduling algorithm is developed to schedule periodic tasks with relative deadline constraints between finish times of two successive instances of periodic tasks. <p> Usually, the relative constraints between events are transformed into relative constraints between start or finish times of the tasks to make feasible the process of scheduling and dispatching of task instances [26, 23]. In <ref> [26] </ref> a preemptive fixed priority scheduling algorithm is developed to schedule periodic tasks with relative deadline constraints between finish times of two successive instances of periodic tasks. <p> * It is very difficult to effectively incorporate dynamic tasks, such as aperiodic tasks, into a schedule by dynamically adjusting the start times of the jobs. 17 In some real-time applications, the jitter constraints may be imposed between the finish times of the jobs rather than between the start times <ref> [26] </ref>. Furthermore, a periodic task may be decomposed into several subtasks and any kind of standard constraints may be defined between these subtasks [23]. In these cases this static scheduling approach is no more applicable without sacrificing the schedulability [23].
Reference: [27] <author> K. Hirai and Y. Satoh. </author> <title> "Stability of a system with variable time delay". </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> AC-25(3):552-554, </volume> <month> June </month> <year> 1980. </year>
Reference-contexts: However, nearly all the results develop control laws under the assumption of equal sampling periods. In addition, taking computation time delay into consideration for real-time computer control has been studied in several research papers <ref> [6, 25, 27, 41, 46, 55] </ref>. However, to the best of our knowledge, the dynamic temporal control approach which is explained in Chapter 5 has not been studied in the past.
Reference: [28] <author> X. Homayoun and P. Ramanathan. </author> <title> Dynamic priority scheduling of periodic and aperiodic tasks in hard real-time systems. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(2), </volume> <month> March </month> <year> 1994. </year> <month> 94 </month>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> The optimal slack stealing algorithm is found to be pseudo polynomial [18] and several approximation algorithms have been proposed [17]. 2.4.2 Scheduling Dynamic Tasks in Dynamic Priority Systems An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist <ref> [28, 24] </ref>. The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks [14, 13, 15].
Reference: [29] <author> Seung H. Hong. </author> <title> Scheduling Algorithm of Data Sampling Times in the Integrated Communica--tion and Control Systems. </title> <journal> IEEE Transactions on Control Systems Technology, </journal> <volume> 3(2) </volume> <pages> 225-230, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: These relative constraints have to be enforced in many real-time control systems such as process control systems and flight control systems [9], etc. For example, in process control systems, it has been shown that jitter constraints have more influence on control systems performance than the frequency constraints <ref> [29] </ref>. Usually, the relative constraints between events are transformed into relative constraints between start or finish times of the tasks to make feasible the process of scheduling and dispatching of task instances [26, 23].
Reference: [30] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: This is a sufficient condition for a given set of tasks and not a necessary condition. The exact schedulability condition 7 which is necessary and sufficient is found in <ref> [30] </ref> with the statistical simulation results showing that in general the utilization of the schedulable task set is higher than ln (2). A deadline monotonic scheduling algorithm is shown to be optimal for a set of tasks which have deadlines less than or equal to their periods.
Reference: [31] <author> J. P. Lehoczky, L. Sha, and J. K. Strosnider. </author> <title> Enhanced aperiodic responsiveness in hard real-time environments. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 261-270, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> One approach is to utilize the aperiodic server concept in which a certain percentage of the processor utilization is reserved for servicing the aperiodic tasks. That is, one or several periodic tasks are reserved for servicing aperiodic tasks. Several algorithms have been developed and their performances have been compared <ref> [31, 47] </ref>. Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected [18, 32, 49].
Reference: [32] <author> John P. Lehoczky and Sandra Ramos-Thuel. </author> <title> An optimal algorithm for scheduling soft-aperiodic tasks in fixed-priority preemptive systems. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 110-123. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1992. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected <ref> [18, 32, 49] </ref>. The optimal slack stealing algorithm is found to be pseudo polynomial [18] and several approximation algorithms have been proposed [17]. 2.4.2 Scheduling Dynamic Tasks in Dynamic Priority Systems An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist [28, 24].
Reference: [33] <author> J.Y. Leung and J. Whitehead. </author> <title> On the Complexity of Fixed-Priority Scheduling of Periodic, Real-Time Tasks. Performance Evaluation, </title> <booktitle> 2(4) </booktitle> <pages> 237-250, </pages> <year> 1982. </year>
Reference-contexts: A deadline monotonic scheduling algorithm is shown to be optimal for a set of tasks which have deadlines less than or equal to their periods. It assigns priorities according to their deadlines, the shorter the deadline, the higher priority is assigned regardless of the periods <ref> [33, 3] </ref>. For a set of tasks with arbitrary deadlines, it is shown that the optimal priority assignment can't be done in a simple priority assignment method, but requires a pseudo polynomial time algorithm [50]. A synchronization protocol becomes necessary when tasks use shared resources such as semaphores.
Reference: [34] <author> S. T. Levi, Satish K. Tripathi, Scott Carson, and Ashok K. Agrawala. </author> <title> "The MARUTI hard real-time operating system". </title> <booktitle> ACM Symp. on Op. Syst. Principles, Op. Syst. Review, </booktitle> <volume> 23(3), </volume> <month> July </month> <year> 1989. </year>
Reference-contexts: In order to implement temporal control we require an operating system that supports scheduling control computations at specific time instants, and allows dynamic selection of sampling periods. The Maruti system developed at the University of Maryland is a suitable host for the implementa tion of dynamic temporal control <ref> [43, 35, 34] </ref>. In Maruti, all executions are scheduled in time and the time of execution can be modified dynamically, if so desired.
Reference: [35] <author> Shem-Tov Levi and Ashok K. Agrawala. </author> <title> Real Time System Design. </title> <publisher> McGraw Hill, </publisher> <year> 1990. </year>
Reference-contexts: In order to implement temporal control we require an operating system that supports scheduling control computations at specific time instants, and allows dynamic selection of sampling periods. The Maruti system developed at the University of Maryland is a suitable host for the implementa tion of dynamic temporal control <ref> [43, 35, 34] </ref>. In Maruti, all executions are scheduled in time and the time of execution can be modified dynamically, if so desired.
Reference: [36] <author> C. L. Liu and J. Layland. </author> <title> Scheduling Algorithm for Multiprogramming in a Hard Real-Time Environment. </title> <journal> Journal of the ACM., </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: By doing this, the event occurrence times in consecutive periods can be made to be more predictable since higher priority tasks preempt lower priority tasks <ref> [36] </ref>. However, this approach can not be used efficiently when there exist many periodic tasks with jitter constraints, or when other types of relative constraints exist such as separation, or relative deadline constraints. <p> It is well known that rate monotonic scheduling algorithm is optimal for scheduling a set of independent periodic tasks with deadlines at the end of their periods <ref> [36] </ref>. It is optimal in a sense that it can schedule any set of tasks if that is schedulable by any fixed priority scheduling scheme. <p> The earliest deadline first (EDF) scheduling algorithm which assigns the highest priority to a task instance with the closest deadline is known to be optimal for a set of periodic or aperiodic tasks <ref> [36, 19] </ref>. The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [36]. <p> The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 <ref> [36] </ref>. A dynamic priority ceiling protocol [10] and a stack-based protocol [5] have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times.
Reference: [37] <author> A. Mok, D. Tsou, and R. Rooij. </author> <title> The msp.rtl real-time scheduler synthesis tool. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: In Chapter 3 and 4, it is also assumed that a total ordering among tasks is found at pre-runtime by an off-line scheduler. Previous work by Cheng et al. [11] and Mok et al. <ref> [37] </ref> use a heuristic approach called smallest latest start time first to schedule task instances with relative constraints. However, their heuristics don't fully reflect the relative timing constraints. Improved heuristic functions may be developed if the constraint graph structure is utilized.
Reference: [38] <author> A. K. Mok. </author> <title> Fundamental Design Problems for the Hard Real-time Environments. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: Usually, these are periodic tasks, or those that have been converted to periodic tasks as in <ref> [38] </ref>. 2 * Dynamic Tasks: Tasks whose executions are dynamically requested at run-time. These may be aperiodic or periodic. In this dissertation every static task is executed in non-preemptive manner. <p> The algorithm to transform a sporadic task to an equivalent pseudo-periodic task has been proposed by Al Mok <ref> [38] </ref>. From the definition of the sporadic tasks, the events which invoke the sporadic task instances may occur at any time instant with the minimum inter-arrival time, ffi. And, once the task is invoked, it has to be finished within its relative deadline from the invocation time, d s .
Reference: [39] <author> C. L. Phillips and H. Troy Nagle. </author> <title> Digital Control System: Analysis and Design, chapter 10. Linear Quadratic Optimal Control, </title> <address> pages 356-399. </address> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: One unit of time represents the subinterval , whereas x 2 R n and u 2 R l are the state and input vectors, respectively. It is well known that there exists a steady state optimal control law <ref> [20, 39] </ref> u o (i) = f i [x (i)] i = 0; 1; :::; M 1 (5.2) that minimizes the quadratic performance index function (Cost) J M = k=0 where Q 2 R nfin is positive semi-definite and R 2 R lfil is positive definite.
Reference: [40] <author> K. Ramamritham and J. A. Stankovic. </author> <title> Scheduling algorithms and operating systems support for real-time systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 82(1) </volume> <pages> 55-67, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Examples are found in application domains such as avionics, process control, automated manufacturing, robotics, etc. Real-time systems of the next generation will be required to interact with more complex and dynamic systems <ref> [40, 2] </ref>. In such environments it will be required that a mechanism be provided to support high degree of concurrency, and to adapt itself to dynamically changing system state. Dynamic tasks such as aperiodic tasks with or without timing constraints may arrive at any time instant during system operation.
Reference: [41] <author> Z. Rekasius. </author> <title> "Stability of digital control with computer interruptions". </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> AC-31:356-359, </volume> <month> April </month> <year> 1986. </year>
Reference-contexts: However, nearly all the results develop control laws under the assumption of equal sampling periods. In addition, taking computation time delay into consideration for real-time computer control has been studied in several research papers <ref> [6, 25, 27, 41, 46, 55] </ref>. However, to the best of our knowledge, the dynamic temporal control approach which is explained in Chapter 5 has not been studied in the past.
Reference: [42] <author> M. Saksena. </author> <title> Parametric Scheduling for Hard Real-Time Systems. </title> <type> PhD thesis, </type> <institution> University of Maryland, College Park, MD 20742, </institution> <year> 1994. </year>
Reference-contexts: This is due to the nondeterministic execution times of tasks and the existence of standard constraints involving the finish times of tasks. This is well explained with the following example <ref> [42] </ref>. Consider a simple example shown in Figure 3.3 which consists of two jobs, t 1 and t 2 . Suppose that l 1 = 2, u 1 = 6, and there exists a constraint s 2 f 1 3. <p> However, if we allow the start time s 2 for t 2 be parameterized with f 1 , then all the constraints are satisfied under all execution scenarios. In <ref> [42] </ref>, a parametric schedulability of is defined as follows: Sched 9s 1 :: 8e 1 2 [l 1 ; u 1 ] :: : : : :: 9s N :: 8e N 2 [l N ; u N ] :: C (3.9) From this Sched predicate, parametric lower and upper bound
Reference: [43] <author> Manas Saksena, James da Silva, and Ashok K. Agrawala. </author> <title> "Design and implementation of Maruti-II", chapter 4. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <title> In Advances in Real-Time Systems, edited by Sang H. </title> <type> Son. 95 </type>
Reference-contexts: In order to implement temporal control we require an operating system that supports scheduling control computations at specific time instants, and allows dynamic selection of sampling periods. The Maruti system developed at the University of Maryland is a suitable host for the implementa tion of dynamic temporal control <ref> [43, 35, 34] </ref>. In Maruti, all executions are scheduled in time and the time of execution can be modified dynamically, if so desired.
Reference: [44] <author> L. Sha, J. P. Lehoczky, and R. Rajkumar. </author> <title> Solutions for some practical problems in prioritized preemptive scheduling. </title> <booktitle> In Proc. IEEE Real-Time Syst. Symp., </booktitle> <pages> pages 181-191, </pages> <month> Dec. </month> <year> 1986. </year>
Reference-contexts: Clearly, such functions lead to a highly state dependent dynamic schedules. For example, the dynamic time-based scheduling scheme may be applied to cope with transient overloads that occur in many real-time systems [4]. In fixed priority-based systems, some work has been done on this issue <ref> [44] </ref>. However, as far as we know, no systematic work has been done on this, especially on time-based scheduling scheme. Dynamic time-based scheduling scheme seems to be an appropriate framework for this problem.
Reference: [45] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority Inheritance Protocols: An Approach to Real-Time Synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: This priority inversion may cause an unbounded blocking times. To solve this problem, several synchronization protocols have been developed. In a priority ceiling protocol <ref> [45] </ref>, a priority ceiling is first assigned to each semaphore, which is equal to the highest priority of the tasks that may use this semaphore.
Reference: [46] <author> K. G. Shin and H. Kim. </author> <title> "Derivation and application of hard deadlines for real-time control systems". </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 22(6) </volume> <pages> 1403-1413, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: However, nearly all the results develop control laws under the assumption of equal sampling periods. In addition, taking computation time delay into consideration for real-time computer control has been studied in several research papers <ref> [6, 25, 27, 41, 46, 55] </ref>. However, to the best of our knowledge, the dynamic temporal control approach which is explained in Chapter 5 has not been studied in the past.
Reference: [47] <author> B. Sprunt, L. Sha, and J. Lehoczky. </author> <title> Aperiodic task scheduling for hard-real-time systems. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 1(1) </volume> <pages> 27-60, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> One approach is to utilize the aperiodic server concept in which a certain percentage of the processor utilization is reserved for servicing the aperiodic tasks. That is, one or several periodic tasks are reserved for servicing aperiodic tasks. Several algorithms have been developed and their performances have been compared <ref> [31, 47] </ref>. Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected [18, 32, 49].
Reference: [48] <author> Marco Spuri and Giorgio C. Buttazzo. </author> <title> Efficient aperiodic service under earliest deadline scheduling. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> Aperiodic scheduling schemes for EDF have been proposed and studied and the Improved Priority Exchange Algorithm is shown to perform well <ref> [48] </ref>. 1 LCM stands for Least Common Multiple. 10 2.4.3 Scheduling Dynamic Tasks in Time-based Systems The aperiodic task scheduling problem in time-based scheduling scheme has been addressed in the paper by Fohler et al. [22].
Reference: [49] <author> Sandra R. Thuel and John P. Lehoczky. </author> <title> Algorithm for scheduling hard aperiodic tasks in fixed-priority systems using slack stealing. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 22-33. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: It is the lack of ability to explicitly control task executions over a time line that causes these problems in priority-based systems. Some work has been done on scheduling aperiodic tasks and slack stealing algorithms in priority based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, most of their work assumes that only release time and deadline constraints are present. <p> To show the feasibility and benefit of this scheme, a solution approach is presented for a linear-time invariant control systems. 1.1.3 Scheduling Dynamic Tasks A lot of work has been done on scheduling dynamic tasks such as aperiodic or sporadic tasks for priority-based scheduling systems <ref> [47, 18, 49, 32, 17, 24, 28, 48, 31] </ref>. However, only recently some results have been reported on scheduling aperiodic tasks on the basis of time-based scheduling scheme [22] in the presence of release time and deadline constraints. <p> Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected <ref> [18, 32, 49] </ref>. The optimal slack stealing algorithm is found to be pseudo polynomial [18] and several approximation algorithms have been proposed [17]. 2.4.2 Scheduling Dynamic Tasks in Dynamic Priority Systems An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist [28, 24].
Reference: [50] <author> K. Tindell, A. Burns, and A. Wellings. </author> <title> An Extendible Approach for Analyzing Fixed Priority Hard Real-Time Tasks. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(2), </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: For a set of tasks with arbitrary deadlines, it is shown that the optimal priority assignment can't be done in a simple priority assignment method, but requires a pseudo polynomial time algorithm <ref> [50] </ref>. A synchronization protocol becomes necessary when tasks use shared resources such as semaphores. Sharing resources may lead to a possible priority inversion when a higher priority task is blocked due to the lower priority task possessing the resource required by a higher priority task.
Reference: [51] <author> G.S. Virk. </author> <title> Digital Computer Control Systems, chapter 4. </title> <publisher> McGraw Hill, </publisher> <year> 1991. </year>
Reference-contexts: the system such as Maruti that allows us to consider the notion of dynamic temporal control, in which time becomes an emergent property of the system. 5.5 Example To illustrate the advantages of a dynamic temporal control scheme let us consider a simple example of rigid body satellite control problem <ref> [51] </ref>. The system state equations are as follows: 52 x (k + 1) = 0 1 # " 0:00125 u (k) h i where k represents the time index and one unit of time is the discretized subinterval of length = 0:05.
Reference: [52] <author> J. Xu and D. L. Parnas. </author> <title> Scheduling processes with release times, deadlines, precedence, and exclusion relations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(3):360-369, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [52, 21, 12, 56] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling 8 approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [54].
Reference: [53] <author> J. Xu and D. L. Parnas. </author> <title> On Satisfying Timing Constraints in Hard-Real-Time Systems. </title> <booktitle> In Proceedings of the ACM SIGSOFT'91 Conference on Software for Critical Systems, </booktitle> <pages> pages 132-146, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems [23, 12]. Because of these reasons, it is claimed that the time-based scheduling scheme is the most appropriate scheduling approach for hard real-time systems <ref> [53] </ref>. 2.2 Scheduling with Relative Timing Constraints In some hard real-time systems, relative timing constraints should be satisfied between event occurrence times. as well as release time and deadline constraints on tasks.
Reference: [54] <author> X. Yuan, M. Saksena, and A. Agrawala. </author> <title> A Decomposition Approach to Real-Time Scheduling. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(1), </volume> <year> 1994. </year>
Reference-contexts: It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling 8 approach where task instances are decomposed into a sequence of subsets, which are scheduled independently <ref> [54] </ref>. Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems [23, 12].
Reference: [55] <author> K. Zahr and C. Slivinsky. </author> <title> "Delay in multivariable computer controlled linear systems". </title> <journal> IEEE Transactions on Automatic Control, </journal> <pages> pages 442-443, </pages> <month> August </month> <year> 1974. </year>
Reference-contexts: However, nearly all the results develop control laws under the assumption of equal sampling periods. In addition, taking computation time delay into consideration for real-time computer control has been studied in several research papers <ref> [6, 25, 27, 41, 46, 55] </ref>. However, to the best of our knowledge, the dynamic temporal control approach which is explained in Chapter 5 has not been studied in the past.
Reference: [56] <author> W. Zhao and K. Ramamritham. </author> <title> Simple and Integrated Heuristic Algorithms for Scheduling Tasks with Time and Resource Constraints. </title> <journal> Journal of Systems and Software, </journal> <pages> pages 195-205, </pages> <year> 1987. </year>
Reference-contexts: Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [52, 21, 12, 56] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling 8 approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [54].
References-found: 56

