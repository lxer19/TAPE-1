URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Students/kopke.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Students/kopke.html
Root-URL: http://www.cs.berkeley.edu
Title: THE THEORY OF RECTANGULAR HYBRID AUTOMATA  
Author: Peter William Kopke, Jr. 
Degree: A Dissertation Presented to the Faculty of the Graduate School  in Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy by  
Date: August 1996  
Affiliation: of Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [ACD90] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking for real-time systems. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 414-425. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: Timed automata make very good models for communication protocols in which local clocks are assumed not to drift [WZ92]. As we shall see, timed automata can also be used in the verification of systems with drifting clocks [OSY94,HW95,HKPV95]. The model checking of temporal logic is computable on timed automata <ref> [ACD90] </ref>, though intractable (PSPACE-complete for CTL and linear temporal logic). It was soon realized that the symbolic approach could be of great value for model checking infinite-state systems. Henzinger et al. developed a symbolic model checking technique for timed automata [HNSY94].
Reference: [ACD93] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: Proof. By Theorems 8.1.8 and 2.1.27. Divergence in discrete time can be detected by a Buchi acceptance condition. If desired, specification variables can be added to the logic, as in the logic TCTL <ref> [ACD93] </ref>. 8.4 Controller Synthesis A natural control model for real-time systems involves a controller that samples the system state once per time unit, and then issues a command based upon its measurement.
Reference: [ACH93] <author> R. Alur, C. Courcoubetis, and T.A. Henzinger. </author> <title> Computing accumulated delays in real-time systems. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 181-193. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: These automata are important for the verification of duration properties. The undecidability of the reachability problem for rectangular automata with clocks and several stopwatches was previously known <ref> [ACHH93, KPSY93] </ref>. However several decidability results for restricted classes of automata 77 78 with all but one clock presented some hope, now lost, that a limited number of stopwatches could be accommodated [ACH93,BES93,KPSY93,BER94b]. Definition 4.0.3 Let A be a rectangular automaton and let a be a continuous variable of A.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: errors in) enormous systems [McM93,CGH + 93] (in 1992 [BCM + 92], systems with 10 20 states were advertized; by now, the exponent of 20 has been left far behind). 5 1.1.2 Hybrid Automata Arguably the most successful model of real-time systems is the timed automaton of Alur and Dill <ref> [AD94] </ref>. A timed automaton is a finite automaton equipped with a finite number of precise clock variables (variables x satisfying the differential equation dx dt = 1). Timed automata make very good models for communication protocols in which local clocks are assumed not to drift [WZ92]. <p> If s = 1, then M is a timed automaton. Thus each continuous variable x of a timed automaton satisfies the differential equation dx dt = 1. Theorem 3.1.6 <ref> [AD94] </ref> For every timed automaton T , with or without silent moves, the reachable restriction of the time-abstract transition system S abs T has finite bisimilarity quotient. Proof Sketch. Without loss of generality, assume that T is integral. <p> The timed automaton T M has the desired properties. Theorem 3.1.8 <ref> [AD94] </ref> The reachability problem is PSPACE-complete for the class of multirate automata with silent moves. Proof. Let M be a multirate automaton. <p> Second, we show that the rectangularity of the model must remain inviolate. Any coupling between coordinates, such as comparisons between variables, brings undecidability with even a single non-clock variable. (Timed automata, which have only clock variables, remain decidable in the presence of variable comparisons <ref> [AD94] </ref>.) A main consequence is the undecidability of compact automata with clocks and one stopwatch. These automata are important for the verification of duration properties. The undecidability of the reachability problem for rectangular automata with clocks and several stopwatches was previously known [ACHH93, KPSY93]. <p> Theorem 5.1.5 <ref> [AD94] </ref> The divergent language emptiness problem for the class of multirate automata with attractors and silent moves is PSPACE-complete. <p> See Definition 2.1.29 for the definition of satisfaction under a fairness condition. An equivalent formulation is the following: if = 8~, determine whether every divergent computation of S abs A from an initial state satisfies ~. Theorem 5.4.4 <ref> [AD94] </ref> The model checking problem for linear temporal logic under time divergence on the class of multirate automata with attractors is PSPACE complete. Proof. PSPACE-hardness follows from the PSPACE-hardness of the reachability problem. Let M be a multirate automaton with attractors. Let be a formula of linear temporal logic. <p> There exists another Buchi automaton B M , of size singly exponential in the size of M , such that the !-language of B is the set of divergent computations of M <ref> [AD94] </ref>. It follows that the language of the product automaton B M fi B : is nonempty iff M does not satisfy . The size of the product singly exponential in the size of (M; ). <p> respect to C. 7.2 One-Sided Timed Automata Definition 7.2.1 Define the region equivalence relation reg on R n by x reg u iff bxc = buc, dxe = due, and for all 1 i; j n, bx j x i c = bu j u i c. 141 Theorem 7.2.2 <ref> [AD94] </ref> Language equivalence with respect to the class of all integral timed automata with attractors coincides with the region equivalence relation. Definition 7.2.3 Let T be an n-dimensional timed automaton with attractors.
Reference: [AFH94] <author> R. Alur, L. Fix, and T.A. Henzinger. </author> <title> A determinizable class of timed automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 1-13. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 182 </month>
Reference: [AFH96] <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <journal> Journal of the ACM, </journal> <volume> 43(1) </volume> <pages> 116-146, </pages> <year> 1996. </year>
Reference-contexts: An approach advocated by Koymans, Vytopil, and de Roever (and many others) is the introduction of new temporal operators which refer to time explicitly [KVdR83,KdR85,Koy90]. One of the more useful logics of this sort is MITL, for which the model checking problem is decidable on timed automata <ref> [AFH96] </ref>. Another variant of this approach is the age operator of Manna and Pnueli [MP93b]. The interpretation of () is the length of time that has remained continuously true. A fragment of a monadic second-order logic that is expressively equivalent to timed automata was discovered by Wilke [Wil94].
Reference: [AHH96] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: This is the focus of Chapters 3-5 and 8 of this dissertation. 6 Symbolic model checking techniques have been extended to the class of linear hybrid automata|in which the first time derivatives of the continuous variables satisfy linear relationships|by Halbwachs et al. and Alur et al. <ref> [HRP94a,ACH + 95, AHH96] </ref>. These algorithms are implemented in the model checker HyTech of Henzinger et al. [Ho95,HHW95] and the model checker Polka of Halbwachs et al. [HRP94b].
Reference: [AK96] <author> R. Alur and R.P. Kurshan. </author> <title> Timing analysis in cospan. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 220-231. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Henzinger et al. developed a symbolic model checking technique for timed automata [HNSY94]. Symbolic model checkers for timed automata include HyTech [Ho95,HHW95], Kronos [DOTY96], Veriti [Won94], UppAal [BLL + 96], HSIS [Bal94], and Timed Cospan <ref> [AK96] </ref>. A natural generalization of the timed automaton is the hybrid automaton, in which the behavior of the continuous variables can satisfy arbitrary differential equations [ACHH93,NOSY93].
Reference: [AL88] <author> M. Abadi and L. Lamport. </author> <title> The existence of refinement mappings. </title> <booktitle> In Proceedings of the Third Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 165-175. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: A behavior is a sequence of system 11 actions. Trivially, if C implements A, then every behavior of C is a behavior of A. More deep are theorems that play the role of the converse <ref> [AL88] </ref>.
Reference: [AL92] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 1-27. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Duration properties such as "the gas burner leaks no more than five minutes out of any given hour" are easily expressible in the duration calculus. Bouajjani et al. provide a translation from a subclass of the duration calculus into linear hybrid automata [BLR95]. Abadi and Lamport <ref> [AL92] </ref> extend Lamport's Temporal Logic of Actions (TLA) [Lam91] to real time using a global clock as in [PdR82] above. TLA can also be used to reason about hybrid systems [Lam93]. In both the duration calculus and TLA, systems and properties are expressed in the same formal language.
Reference: [Alu91] <author> R. Alur. </author> <title> Techniques for Automatic Verification of Real-time Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1991. </year>
Reference-contexts: Proof. PSPACE-hardness follows from the PSPACE-hardness of discrete-time reachability on the subclass of timed automata <ref> [Alu91] </ref>. We now prove inclusion in PSPACE.
Reference: [ALW89] <author> M. Abadi, L. Lamport, and P. Wolper. </author> <title> Realizable and unrealizable specifications of reactive systems. </title> <booktitle> In ICALP 89: Automata, Languages, and Programming, Lecture Notes in Computer Science 372, </booktitle> <pages> pages 1-17. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: This is the work of Rosner and Pnueli, who applied these ideas to synchronous, asynchronous, and 9 distributed environments [PR89a,PR89b,PR90]. Further work along these lines, dealing with realizable specifications in the context of fairness, appears in <ref> [ALW89, AM94,Var95] </ref>. Wong-Toi and Dill used this approach to automatically synthesize processes and schedulers when the environment and admissible processes are timed automata (and therefore infinite-state) [WD90]. A different approach to synthesis based upon satisfiability testing appears in [CE81,Wol82].
Reference: [AM94] <author> A. Anuchitanukul and Z. Manna. </author> <title> Realizability and synthesis of reactive modules. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 156-168. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [AMP95a] <author> E. Asarin, O. Maler, and A. Pnueli. </author> <title> On the analysis of dynamical systems having piecewise-constant derivatives. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 35-64, </pages> <year> 1995. </year>
Reference-contexts: Since the behavior of hybrid automata can be arbitrarily complex, much research has been devoted to the identification of verification problems and subclasses of hybrid automata for which these problems are decidable <ref> [Moo90,NOSY93,BES93,KPSY93,MP93a,ACHH93,ACH93,AHH96,BER94a, BER94b,MV94,PV94,HK94,AFH94,BR95,LPY95,HH95,Hen95,HKPV95,HHK95, AMP95a] </ref>.
Reference: [AMP95b] <author> E. Asarin, O. Maler, and A. Pnueli. </author> <title> Symbolic controller synthesis for discrete and timed systems. </title> <editor> In P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [Bal94] <author> Felice Balarin. </author> <title> Iterative Methods for Formal Verification of Discrete Event Systems. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, </institution> <year> 1994. </year> <month> 183 </month>
Reference-contexts: It was soon realized that the symbolic approach could be of great value for model checking infinite-state systems. Henzinger et al. developed a symbolic model checking technique for timed automata [HNSY94]. Symbolic model checkers for timed automata include HyTech [Ho95,HHW95], Kronos [DOTY96], Veriti [Won94], UppAal [BLL + 96], HSIS <ref> [Bal94] </ref>, and Timed Cospan [AK96]. A natural generalization of the timed automaton is the hybrid automaton, in which the behavior of the continuous variables can satisfy arbitrary differential equations [ACHH93,NOSY93].
Reference: [BBLS92] <editor> S. Bensalem, A. Bouajjani, C. Loiseaux, and J. Sifakis. Property-preserving simulations. In G. von Bochmann and D.K. Probst, editors, </editor> <booktitle> CAV 92: Computer-aided Verification, Lecture Notes in Computer Science 663, </booktitle> <pages> pages 260-273. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [BCG88] <author> M.C. Browne, E.M. Clarke, and O. Grumberg. </author> <title> Characterizing finite kripke structures in propositional temporal logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 59 </volume> <pages> 115-131, </pages> <year> 1988. </year>
Reference: [BCM + 92] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill, and L.J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-170, </pages> <year> 1992. </year>
Reference-contexts: Instead, sets of program states can be represented intensionally, as the characteristic sets of logical formulas. Verification algorithms can manipulate formulas to simulate operations on state sets. This technique is known as symbolic model checking. Symbolic model checking can be applied to the entire - calculus <ref> [BCM + 92] </ref>, and consequently to temporal logics as well. Using the binary decision diagram data structure of Bryant [Bry86], McMillan developed the symbolic model checker SMV for the -calculus which has verified (and found errors in) enormous systems [McM93,CGH + 93] (in 1992 [BCM + 92], systems with 10 20 <p> applied to the entire - calculus <ref> [BCM + 92] </ref>, and consequently to temporal logics as well. Using the binary decision diagram data structure of Bryant [Bry86], McMillan developed the symbolic model checker SMV for the -calculus which has verified (and found errors in) enormous systems [McM93,CGH + 93] (in 1992 [BCM + 92], systems with 10 20 states were advertized; by now, the exponent of 20 has been left far behind). 5 1.1.2 Hybrid Automata Arguably the most successful model of real-time systems is the timed automaton of Alur and Dill [AD94].
Reference: [BER94a] <author> A. Bouajjani, R. Echahed, and R. Robbana. </author> <title> Verification of context-free timed systems using linear hybrid observers. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science, </booktitle> <pages> pages 118-131. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [BER94b] <author> A. Bouajjani, R. Echahed, and R. Robbana. </author> <title> Verifying invariance properties of timed systems with duration variables. </title> <editor> In H. Langmaack, W.- P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 193-210. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [BES93] <author> A. Bouajjani, R. Echahed, and J. Sifakis. </author> <title> On model checking for real-time properties with durations. </title> <booktitle> In Proceedings of the Eighth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 147-159. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference: [BFH90] <author> A. Bouajjani, J.-C. Fernandez, and N. Halbwachs. </author> <title> Minimal model generation. In R.P. Kurshan and E.M. </title> <editor> Clarke, editors, </editor> <booktitle> CAV 90: Computer-aided Verification, Lecture Notes in Computer Science 531, </booktitle> <pages> pages 197-203. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: A= sim A ). These quotient systems can be computed symbolically for any transition system in which boolean operations and the predecessor operation for each action are computable <ref> [BFH90, DHW92,HHK95] </ref>. If the bisimilarity quotient system A= bis A is finite, then supervisor synthesis can be computed symbolically with a guarantee of termination [Hen95]. We show that the same holds if the similarity quotient system A= sim A is finite, provided that a simple technical condition holds. <p> Each edge is its own label. A simple algorithm for computing the bisimilarity quotient of a systems maintains a partition R of the state space <ref> [BFH90] </ref>. The partition is refined whenever there exist R 1 ; R 2 2 R and an event such that both R 1 " Pre (R 2 ) and R 1 n Pre (R 2 ) are nonempty. In this case, R 1 is split into these two parts.
Reference: [BH88] <author> Y. Brave and M. Heymann. </author> <title> Formulation and control of real-time discrete-event processes. </title> <booktitle> In Proceedings of the 27th IEEE Conference on Decision and Control, </booktitle> <pages> pages 1131-1132, </pages> <year> 1988. </year>
Reference: [BL69] <author> J.R. </author> <title> Buchi and L.H. Landweber. Solving sequential conditions by finite-state strategies. </title> <journal> Transactions of the AMS, </journal> <volume> 138 </volume> <pages> 295-311, </pages> <year> 1969. </year>
Reference-contexts: Church's Problem is to determine whether either player has a regular winning strategy, and if so, to synthesize a finite automaton realizing the strategy. It was proven by Buchi and Landweber that the winner of G always has a regular winning strategy, and that this strategy can be computed <ref> [BL69] </ref>. A simpler proof using tree automata was given by Rabin [Rab72]. Suppose we wish to determine whether there exists a program P which interacts with an "environment" E in such a way that the combined system satisfies a given requirement expressed in linear temporal logic (LTL).
Reference: [BLL + 96] <author> J. Bengtsson, K.G. Larsen, F. Larsson, P. Pettersson, and W. Yi. Up-pAal: </author> <title> a tool-suite for automatic verification of real-time systems. In 184 R. </title> <editor> Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 232-243. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: It was soon realized that the symbolic approach could be of great value for model checking infinite-state systems. Henzinger et al. developed a symbolic model checking technique for timed automata [HNSY94]. Symbolic model checkers for timed automata include HyTech [Ho95,HHW95], Kronos [DOTY96], Veriti [Won94], UppAal <ref> [BLL + 96] </ref>, HSIS [Bal94], and Timed Cospan [AK96]. A natural generalization of the timed automaton is the hybrid automaton, in which the behavior of the continuous variables can satisfy arbitrary differential equations [ACHH93,NOSY93].
Reference: [BLR95] <author> A. Bouajjani, Y. Lakhnech, and R. Robbana. </author> <title> From duration calculus to linear hybrid automata. </title> <booktitle> In Proceedings of the Conference on Computer-Aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 196-210. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Duration properties such as "the gas burner leaks no more than five minutes out of any given hour" are easily expressible in the duration calculus. Bouajjani et al. provide a translation from a subclass of the duration calculus into linear hybrid automata <ref> [BLR95] </ref>. Abadi and Lamport [AL92] extend Lamport's Temporal Logic of Actions (TLA) [Lam91] to real time using a global clock as in [PdR82] above. TLA can also be used to reason about hybrid systems [Lam93].
Reference: [BMP83] <author> M. Ben-Ari, Z. Manna, and A. Pnueli. </author> <title> The temporal logic of branching time. </title> <journal> Acta Informatica, </journal> <volume> 20 </volume> <pages> 207-226, </pages> <year> 1983. </year>
Reference: [BR95] <author> A. Bouajjani and R. Robbana. </author> <title> Verifying !-regular properties for subclasses of linear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 437-450. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [Bry86] <author> R.E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <year> 1986. </year>
Reference-contexts: Verification algorithms can manipulate formulas to simulate operations on state sets. This technique is known as symbolic model checking. Symbolic model checking can be applied to the entire - calculus [BCM + 92], and consequently to temporal logics as well. Using the binary decision diagram data structure of Bryant <ref> [Bry86] </ref>, McMillan developed the symbolic model checker SMV for the -calculus which has verified (and found errors in) enormous systems [McM93,CGH + 93] (in 1992 [BCM + 92], systems with 10 20 states were advertized; by now, the exponent of 20 has been left far behind). 5 1.1.2 Hybrid Automata Arguably
Reference: [BW94] <author> B.A. Brandin and W.M. Wonham. </author> <title> Supervisory control of timed discrete event systems. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 39(2) </volume> <pages> 329-342, </pages> <month> February </month> <year> 1994. </year>
Reference: [CDFV88] <author> R. Cieslak, C. Desclaux, A. Fawaz, and P. Varaiya. </author> <title> Supervisory control of discrete-event processes with partial observations. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 33(3) </volume> <pages> 249-260, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: When M is deterministic and L is given by a deterministic finite automaton, this problem may be solved in polynomial time. Cieslak et al. considered this problem in the context of incomplete information <ref> [CDFV88] </ref>. Extensions of the Ramadge-Wonham approach to the control of the infinitary behavior of discrete event systems were made by Thistle and Wonham [TW94a, TW94b,Thi95], and Ramadge [Ram89]. The introduction of discrete time was made in [GR88,BH88,OW89,BW94].
Reference: [CE81] <author> E.M. Clarke and E.A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <booktitle> In Workshop on Logic of Programs, Lecture Notes in Computer Science 131. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [Cer92] <author> K. Cerans. </author> <title> Algorithmic Problems in Analysis of Real-time System Specifications. </title> <type> PhD thesis, </type> <institution> University of Latvia, </institution> <year> 1992. </year>
Reference-contexts: This is the content of our first lemma. We stress that in figures, we leave these wrapping conditions implicit, in particular, we omit invariants from every figure after those regarding the basic lemmas, and we omit wrapping edges beginning with Figure 4.7. The wrapping technique originated in <ref> [Cer92] </ref>. Lemma 4.1.3 Wrapping. Let W be a positive rational number. <p> The latter gives a new proof of a result from <ref> [Cer92] </ref>. Corollary 4.2.1 For every slope s 2 Q n f0; 1g, the dense-time reachability problem is undecidable for the class of simple (initialized) rectangular automata with one skewed clock of slope s (resp. one memory cell) and assignment updates. Proof. First assume s &gt; 0.
Reference: [CES86] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal-logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <year> 1986. </year> <month> 185 </month>
Reference-contexts: The decision procedure was implemented, and systems with several hundred states could be verified in seconds <ref> [CES86] </ref>. This was the first automatic model checker for temporal logic. The number of states of a concurrent system grows exponentially with the number of parallel system components. Therefore algorithms whose running times are linear in the number of states are too slow to be used on practical problems. <p> If the similarity quotient of S is finite, then q sim S r iff q and r satisfy the same universal state formulas of CTL fl . Theorem 2.1.27 1. The model checking problem for CTL fl on finite transition systems is PSPACE-complete <ref> [CES86] </ref>. 2. The model checking problem for CTL fl on finite transition systems can be solved in space O (m (m + log n) 2 ), where m is the length of the formula and n is the size of the transition system. [Kup95].
Reference: [CGH + 93] <author> E.M. Clarke, O. Grumberg, H. Hiraishi, S. Jha, D.E. Long, K.L. McMil-lan, and L.A. Ness. </author> <title> Verification of the futurebus+ cache coherence protocol. </title> <booktitle> In Proceedings of the 11th Symposium on Computer Hardware Description Languages and their Applications, </booktitle> <year> 1993. </year>
Reference: [Chu63] <author> A. Church. </author> <title> Logic, arithmetic, and automata. </title> <booktitle> In Proceedings of the International Congress of Mathematicians, </booktitle> <year> 1962, </year> <pages> pages 23-35. </pages> <address> Institut Mittag-Le*er, </address> <year> 1963. </year>
Reference-contexts: Notice that model checking is the special case in which the given system A is already completely specified. This problem has been studied for several decades by researchers in both computer science and control theory. Church's Problem In the context of computing, the basic question was posed by Church <ref> [Chu63] </ref>. Let 0 and 1 be finite alphabets, and let L be a regular subset of ( 0 fi 1 ) ! .
Reference: [CKS81] <author> A.K. Chandra, D.C. Kozen, and L.J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the ACM, </journal> <volume> 28 </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: Therefore the discrete-time control decision problem and controller synthesis can be solved in exponential time. EXPTIME-hardness follows a reduction from the halting problem for alternating Turing Machines using polynomial space <ref> [CKS81] </ref>. Let M be an alternating Turing Machine using space p (k), and let s be an input word. We assume strict alternation between AND and OR branches. The set of states of M is the disjoint union U = U 0 [ U 1 [ fu f g.
Reference: [DGG93] <author> D. Dams, O. Grumberg, and R. Gerth. </author> <title> Generation of reduced models for checking fragments of ctl. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 479-490. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [DHW92] <author> D. Dill, A. Hu, and H. Wong-Toi. </author> <title> Checking for language inclusion using simulation preorders. </title> <booktitle> In Proceedings of Third International Workshop on Computer-Aided Verification, July 1991, </booktitle> <volume> volume 575, </volume> <pages> pages 255-265. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <booktitle> Lecture Notes in Computer Science Series. </booktitle>
Reference: [DOTY96] <author> C. Daws, A. Olivero, S. Tripakis, and S. Yovine. </author> <title> The tool kronos. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 208-219. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: It was soon realized that the symbolic approach could be of great value for model checking infinite-state systems. Henzinger et al. developed a symbolic model checking technique for timed automata [HNSY94]. Symbolic model checkers for timed automata include HyTech [Ho95,HHW95], Kronos <ref> [DOTY96] </ref>, Veriti [Won94], UppAal [BLL + 96], HSIS [Bal94], and Timed Cospan [AK96]. A natural generalization of the timed automaton is the hybrid automaton, in which the behavior of the continuous variables can satisfy arbitrary differential equations [ACHH93,NOSY93].
Reference: [EH85] <author> E.A. Emerson and J.Y. Halpern. </author> <title> Decision procedures and expressiveness in the temporal logic of branching time. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30 </volume> <pages> 1-24, </pages> <year> 1985. </year>
Reference: [EH86] <author> E.A. Emerson and J.Y. Halpern. </author> <title> "Sometimes" and "Not never" revisited: on branching versus linear-time temporal logic. </title> <journal> Journal of the ACM, </journal> <volume> 33(1) </volume> <pages> 151-178, </pages> <year> 1986. </year>
Reference: [EL86] <author> E.A. Emerson and C. Lei. </author> <title> Efficient model checking in fragments of the propositional -calculus. </title> <booktitle> In Proceedings of the First Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 267-278. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year>
Reference-contexts: We will apply the second part of Theorem 2.1.27 to show that the model checking problem for the universal fragment of CTL fl on positive two-dimensional rect angular hybrid automata can be solved in polynomial space. 31 Using the translation from CTL fl into the -calculus <ref> [EL86] </ref>, the following Corollary can be proven. Corollary 2.1.28 1. The model checking problem for CTL fl is decidable on the class of effective transition systems with finite bisimilarity quotient. 2.
Reference: [ES84] <author> E.A. Emerson and A.P. Sistla. </author> <title> Deciding full branching time logic. </title> <journal> Information and Control, </journal> <volume> 61 </volume> <pages> 175-201, </pages> <year> 1984. </year> <month> 186 </month>
Reference: [FS94] <author> L. Fix. and F.B. Schneider. </author> <title> Hybrid verification by exploiting the environment. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 1-18. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [GH82] <author> Y. Gurevich and L. Harrington. </author> <title> Trees, automata, and games. </title> <booktitle> In Proceedings of the 14th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 60-65. </pages> <publisher> ACM Press, </publisher> <year> 1982. </year>
Reference-contexts: McNaughton shows how to calculate the winning strategy for any game defined by a Muller acceptance condition on a finite automaton [McN93]. His proof uses the later appearance record that Gurevich and Harrington used to complement tree automata <ref> [GH82] </ref>.
Reference: [GKN94] <author> X. Ge, W. Kohn, and A. Nerode. </author> <title> Algorithms for chattering approximations to relaxed optimal controls. </title> <type> Technical Report 94-55, </type> <institution> Mathematical Sciences Institute at Cornell University, </institution> <address> Ithaca, New York, </address> <year> 1994. </year>
Reference: [GKP89] <author> R. Graham, D. Knuth, and O. Patashnik. </author> <title> Concrete Mathematics. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: Nor does condition (4) prevent it, because by 1 x 4 c = by 0 1 x 0 4 c. The two vectors are in fact one-sided region equivalent. Using characterizations of Regions (n) and OneSidedRegions (n) in terms of Stir ling numbers of the second kind (see, e.g., <ref> [GKP89] </ref>), we show that, while the number of one-sided regions is still exponential, it is less than the number of regions by a multiplicative exponential factor. Theorem 7.2.19 Regions (2n) OneSidedRegions (2n) = (2 n ). Proof.
Reference: [GPSS80] <author> D. Gabbay, A. Pnueli, S. Shelah, and J. Stavi. </author> <title> On the temporal analysis of fairness. </title> <booktitle> In Proceedings of the Seventh Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 163-173. </pages> <publisher> ACM Press, </publisher> <year> 1980. </year>
Reference: [GR88] <author> C.H. Golaszewski and P.J. Ramadge. </author> <title> On the control of real-time discrete event systems. </title> <booktitle> In Proc. 1989 Conference on Informational Sciences and Systems, </booktitle> <pages> pages 98-102, </pages> <year> 1988. </year>
Reference: [GSSL94] <author> R. Gawlick, R. Segala, J.F. Sogaard-Andersen, and N.A. Lynch. </author> <title> Live-ness in timed and untimed systems. </title> <editor> In S. Abiteboul and E. Shamir, editors, </editor> <booktitle> ICALP 94: Automata, Languages, and Programming, Lecture Notes in Computer Science 820, </booktitle> <pages> pages 166-177. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [Hen95] <author> T.A. Henzinger. </author> <title> Hybrid automata with finite bisimulations. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> ICALP 95: Automata, Languages, and Programming, Lecture Notes in Computer Science 944, </booktitle> <pages> pages 324-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: These quotient systems can be computed symbolically for any transition system in which boolean operations and the predecessor operation for each action are computable [BFH90, DHW92,HHK95]. If the bisimilarity quotient system A= bis A is finite, then supervisor synthesis can be computed symbolically with a guarantee of termination <ref> [Hen95] </ref>. We show that the same holds if the similarity quotient system A= sim A is finite, provided that a simple technical condition holds. <p> Put 0 = , and n+1 = n _ ( n ). It follows that the control decision problem is answered in the affirmative iff [[ 0 ^ n ]] = ; for all n 2 N. Proposition 2.1.36 <ref> [Hen95] </ref> The control decision problem is decidable for the class C of effective transition systems with finite bisimilarity quotient. Moreover, controller synthesis for C is computable. Proof. In the notation of the proof of Proposition 2.1.35, ([[ n ]]) n2N is an increasing sequence of bis S -blocks. <p> Last, we define the asynchronous transition system of a rectangular automaton, and show that asynchronous similarity degenerates to equality in four or more dimensions. 112 113 6.1.1 Bisimilarity Theorem 6.1.1 <ref> [Hen95] </ref> There exists a two-dimensional rectangular automaton A with uniform dynamics such that the equality relation is the only bisimulation on the time-abstract transition system S abs A . Proof. The automaton A has only one vertex, v. <p> relation ;(w; y) iff there exists a state (v 0 ; x 0 ) 2 Q A and a time t 0 such that (v; x) t 131 rectangular automaton A defines the asynchronous transition system S asyn A = def (Q A ; ; ;; Q 0 Theorem 6.2.3 <ref> [Hen95] </ref> There exists a two-dimensional rectangular automaton A with uniform dynamics such that the equality relation is the only bisimulation on the asynchronous transition system S asyn A . Proof. Similar to the proof of Theorem 6.1.1.
Reference: [HH95] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 225-238. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Chapter 4 consists of several undecidability results, which together show that the class of initialized RHA is a maximal class for which the reachability problem is decidable. When either rectangularity or initialization is relaxed, the reachability 3 We have not treated the work of Henzinger and Ho <ref> [HH95] </ref> or Puri et al. [PBV96] on the approximation of nonlinear hybrid automata by rectangular hybrid automata. 16 problem becomes undecidable for automata in which only one continuous variable is not a precise clock.
Reference: [HHK95] <author> M.R. Henzinger, T.A. Henzinger, and P.W. Kopke. </author> <title> Computing simulations on finite and infinite graphs. </title> <booktitle> In Proceedings of the 36rd Annual 187 Symposium on Foundations of Computer Science, </booktitle> <pages> pages 453-462. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Thereafter, all unattributed theorems are due to the author and his collaborators. The main results of Chapters 4 and 5 appeared first in [HKPV95], or will appear in the journal version [HKPV] of that article. The work on two-dimensional rectangular hybrid automata in Chapter 6 appeared in <ref> [HHK95] </ref>. The case of three or more dimensions, as well as the study of one-sided timed automata in Chapter 7, appeared in [HK96].
Reference: [HHW95] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> A user guide to hytech. </title> <editor> In E. Brinksma, W.R. Cleaveland, K.G. Larsen, T. Margaria, and B. Steffen, editors, </editor> <booktitle> TACAS 95: Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science 1019, </booktitle> <pages> pages 41-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [HK94] <author> T.A. Henzinger and P.W. Kopke. </author> <title> Undecidability results for hybrid systems. </title> <type> Technical Report CSD-TR-95-1483, </type> <institution> Cornell University, </institution> <year> 1994. </year> <title> Presented at the Workshop on Hybrid Systems and Autonomous Control (Ithaca, </title> <address> NY). </address>
Reference: [HK96] <author> T.A. Henzinger and P.W. Kopke. </author> <title> State equivalences for rectangular hybrid automata. </title> <editor> In U. Montanari, editor, </editor> <booktitle> CONCUR 96: Concurrency Theory, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The work on two-dimensional rectangular hybrid automata in Chapter 6 appeared in [HHK95]. The case of three or more dimensions, as well as the study of one-sided timed automata in Chapter 7, appeared in <ref> [HK96] </ref>. The final section of Chapter 7, as well as the whole of Chapter 8, receive their first publication in this dissertation. 1.2.3 Notation and Mathematical Conventions The set of all subsets of a set S is denoted by P (S). <p> For concreteness, put `(i) = 2i 1 and u (i) = 2i. 1 The original reduction [HPV94] did not use attractors, and therefore required the on-the-fly techniques that are still required in the general case. Attractors were introduced in <ref> [HK96] </ref> to simplify the construction. 49 m _a u = k 0 time a _a ` = k Definition 3.2.2 [HPV94] Let A be a compact, n-dimensional rectangular automaton with uniform dynamics.
Reference: [HKPV] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <title> What's decidable about hybrid automata? Journal of Computer and System Sciences. </title> <note> To appear. </note>
Reference-contexts: Thereafter, all unattributed theorems are due to the author and his collaborators. The main results of Chapters 4 and 5 appeared first in [HKPV95], or will appear in the journal version <ref> [HKPV] </ref> of that article. The work on two-dimensional rectangular hybrid automata in Chapter 6 appeared in [HHK95]. The case of three or more dimensions, as well as the study of one-sided timed automata in Chapter 7, appeared in [HK96].
Reference: [HKPV95] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? In Proceedings of the 27th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 373-382. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: Thereafter, all unattributed theorems are due to the author and his collaborators. The main results of Chapters 4 and 5 appeared first in <ref> [HKPV95] </ref>, or will appear in the journal version [HKPV] of that article. The work on two-dimensional rectangular hybrid automata in Chapter 6 appeared in [HHK95]. The case of three or more dimensions, as well as the study of one-sided timed automata in Chapter 7, appeared in [HK96].
Reference: [HMP92] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> What good are digital clocks? In W. </title> <editor> Kuich, editor, </editor> <booktitle> ICALP 92: Automata, Languages, and Programming, Lecture Notes in Computer Science 623, </booktitle> <pages> pages 545-558. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: It was soon realized that the symbolic approach could be of great value for model checking infinite-state systems. Henzinger et al. developed a symbolic model checking technique for timed automata <ref> [HNSY94] </ref>. Symbolic model checkers for timed automata include HyTech [Ho95,HHW95], Kronos [DOTY96], Veriti [Won94], UppAal [BLL + 96], HSIS [Bal94], and Timed Cospan [AK96]. A natural generalization of the timed automaton is the hybrid automaton, in which the behavior of the continuous variables can satisfy arbitrary differential equations [ACHH93,NOSY93].
Reference: [Ho95] <author> P.-H. Ho. </author> <title> Automatic Analysis of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1995. </year>
Reference: [Hoa69] <author> C.A.R. Hoare. </author> <title> An axiomatic basis for computer programming. </title> <journal> Communications of the ACM, </journal> <volume> 12 </volume> <pages> 576-580, </pages> <year> 1969. </year>
Reference-contexts: We characterize the quotient spaces of rectangular hybrid automata with respect to these equivalence relations. 1.1 Historical Background 1.1.1 Model Checking The classical work of Hoare on proving the correctness of sequential computer programs uses an essentially syntactic method <ref> [Hoa69] </ref>. The basic unit is the Hoare triple, which consists of a precondition, a program instruction, and a postcondition. 3 A triple is valid if whenever the program state satisfies the precondition, execution of the program instruction leads to a program state satisfying the postcondition.
Reference: [Hoo91] <author> J. Hooman. </author> <title> Specification and Compositional Verification of Real-time Systems. </title> <type> PhD thesis, </type> <institution> Technische Universiteit Eindhoven, The Nether-lands, </institution> <year> 1991. </year> <month> 188 </month>
Reference-contexts: Deductive Approaches Schneider et al. augment proof outlines with timing and other information about continuous variables [SBM92,FS94]. Hooman developed another extension of Hoare logic for the specification and derivation of correct real-time programs <ref> [Hoo91, Hoo94] </ref>. The duration calculus of Zhou et al. provides an interval-based temporal logic for specifying system properties and a proof calculus for proving system properties [ZHR91].
Reference: [Hoo94] <author> J. Hooman. </author> <title> Correctness of real time systems by construction. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 19-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Deductive Approaches Schneider et al. augment proof outlines with timing and other information about continuous variables [SBM92,FS94]. Hooman developed another extension of Hoare logic for the specification and derivation of correct real-time programs <ref> [Hoo91, Hoo94] </ref>. The duration calculus of Zhou et al. provides an interval-based temporal logic for specifying system properties and a proof calculus for proving system properties [ZHR91].
Reference: [HPV94] <author> T.A. Henzinger, A. Puri, and P. Varaiya. </author> <title> Clock transformation of hybrid automata with rectangular differential inclusions. </title> <booktitle> Presented at the Workshop on Hybrid Systems and Autonomous Control (Ithaca, </booktitle> <address> NY), </address> <year> 1994. </year>
Reference-contexts: Chapter 3 contains the proof of Henzinger et al. <ref> [HPV94] </ref> of the theorem of Puri and Varaiya [PV94], which states that the reachability problem is decidable for the class of initialized RHA. The proof is based on a translation from initialized RHA into timed automata. <p> For concreteness, put `(i) = 2i 1 and u (i) = 2i. 1 The original reduction <ref> [HPV94] </ref> did not use attractors, and therefore required the on-the-fly techniques that are still required in the general case. Attractors were introduced in [HK96] to simplify the construction. 49 m _a u = k 0 time a _a ` = k Definition 3.2.2 [HPV94] Let A be a compact, n-dimensional rectangular <p> (i) = 2i. 1 The original reduction <ref> [HPV94] </ref> did not use attractors, and therefore required the on-the-fly techniques that are still required in the general case. Attractors were introduced in [HK96] to simplify the construction. 49 m _a u = k 0 time a _a ` = k Definition 3.2.2 [HPV94] Let A be a compact, n-dimensional rectangular automaton with uniform dynamics. We assume that for each edge e = (v; w) of A, preguard (e) inv (v), postguard (e) inv (w), and preguard A (e) i = postguard A (e) i for each i =2 update A (e). <p> Theorem 3.2.9 <ref> [HPV94] </ref> For every compact rectangular automaton A with uni form dynamics, L (S abs N A ) = L (S abs Proof. From Lemmas 3.2.7 and 3.2.8. Theorem 3.2.10 [PV94] The dense-time reachability problem for the class of compact rectangular automata with uniform dynamics is PSPACE-complete. Proof. <p> The latter can be solved in polynomial space, by Corollary 3.1.11. PSPACE-hardness follows from Theorem 3.1.8. 54 3.3 Skewed-Clock Translation: General Case All of the main ideas are already present in the construction for compact automata: the extension to the general case (first reported in <ref> [HPV94] </ref>) is mostly a matter of bookkeeping. In particular, for each lower or upper bound multirate variable, one bit is used to distinguish a strict from a non-strict bound, and another bit is used to distinguish a finite from an infinite bound. <p> The proof is complete. Theorem 3.3.11 <ref> [HPV94] </ref> For every rectangular automaton A with uniform dynamics, L (S abs M A ) = L (S abs Theorem 3.3.12 [HPV94] The dense-time reachability problem for the class of rectangular automata with uniform dynamics is PSPACE-complete. Proof. Let A be an initialized rectangular automaton. <p> The proof is complete. Theorem 3.3.11 <ref> [HPV94] </ref> For every rectangular automaton A with uniform dynamics, L (S abs M A ) = L (S abs Theorem 3.3.12 [HPV94] The dense-time reachability problem for the class of rectangular automata with uniform dynamics is PSPACE-complete. Proof. Let A be an initialized rectangular automaton. As before, reachability can be reduced to vertex reachability.
Reference: [HRP94a] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeCharlier, editor, </editor> <booktitle> SAS 94: Static Analysis Symposium, Lecture Notes in Computer Science 864, </booktitle> <pages> pages 223-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [HRP94b] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeCharlier, editor, </editor> <booktitle> SAS 94: Static Analysis Symposium, Lecture Notes in Computer Science 864, </booktitle> <pages> pages 223-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: These algorithms are implemented in the model checker HyTech of Henzinger et al. [Ho95,HHW95] and the model checker Polka of Halbwachs et al. <ref> [HRP94b] </ref>. However, for linear hybrid automata, simple model checking problems are undecidable: even the reachability problem for linear hybrid automata is equivalent to the halting problem for Turing Machines. Thus the model checking "algorithms" are actually semidecision procedures at best.
Reference: [HU79] <author> J.E. Hopcroft and J.D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1979. </year>
Reference-contexts: Theorem 8.2.4 The discrete-time reachability problem is undecidable for the class of rectangular automata. Proof. We reduce the halting problem for two-counter machines, which is known to be undecidable <ref> [HU79] </ref>, to the reachability problem on the class of rectangular automata. A two-counter machine M consists of a finite control, and two counters, C 0 and C 1 , which range over the natural numbers.
Reference: [HW92a] <author> G. Hoffmann and H. Wong-Toi. </author> <title> The input-output control of real-time discrete event systems. </title> <booktitle> In Proceedings of the 1992 IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 256-265, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1992. </year>
Reference: [HW92b] <author> G. Hoffmann and H. Wong-Toi. </author> <title> Symbolic synthesis of supervisory controllers. </title> <booktitle> In Proceedings of the 1992 American Control Conference, </booktitle> <pages> pages 2789-2793, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: The introduction of discrete time was made in [GR88,BH88,OW89,BW94]. Dense time was introduced by Wong-Toi and 10 Hoffmann in [WH91,HW92a], who synthesized supervisors for timed automata. Symbolic methods for the computation of supervisors were developed by Hoff-man and Wong-Toi <ref> [HW92b] </ref>. Maler et al. gave simple procedures for the symbolic computation of supervisors for the control of the infinitary behavior of discrete and timed systems, for specifications given as automaton acceptance conditions [MPS95,AMP95b].
Reference: [HW95] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [Isa65] <author> R. Isaacs. </author> <title> Differential Games; a mathematical theory with applications to warfare and pursuit, control and optimization. </title> <publisher> Wiley, </publisher> <year> 1965. </year>
Reference-contexts: Thus games are useful for verification as well as for synthesis. Methods from Control Theory Isaacs inaugurated the study of differential games, in which two players control continuous variables to some end|often there is a pursuit motif, one player attempting to intercept the other <ref> [Isa65] </ref>. Pontryagin et al. further developed this theory, and called it optimal control [PBGM62].
Reference: [KdR85] <author> R. Koymans and W.-P. de Roever. </author> <title> Examples of a real-time temporal specification. In B.D. </title> <editor> Denvir, W.T. Harwood, M.I. Jackson, and M.J. </editor> <volume> 189 Wray, </volume> <editor> editors, </editor> <booktitle> The Analysis of Concurrent Systems, Lecture Notes in Computer Science 207, </booktitle> <pages> pages 231-252. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference: [KNR96] <author> W. Kohn, A. Nerode, and J. Remmel. </author> <title> Hybrid systems as Finsler manifolds: finite state control as approximation to connections. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Such hybrid controllers (in the discrete time domain) were investigated by Sontag in [Son81]. An approach to hybrid controller design based upon relaxed variational methods has been developed by Nerode, Kohn, et al. <ref> [NK93a,NK93b,GKN94,KNRY95, KNR96] </ref>. Instead of obtaining the optimal control for a given cost function, an approximately optimal solution (within a given tolerance of the optimal) is obtained as a chattering approximation to the optimal control.
Reference: [KNRY95] <author> W. Kohn, A. Nerode, J. Remmel, and A. Yakhnis. </author> <title> Viability in hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 141-168, </pages> <year> 1995. </year>
Reference: [Koy90] <author> R. Koymans. </author> <title> Specifying real-time properties with metric temporal logic. </title> <booktitle> Real-time Systems, </booktitle> <volume> 2(4) </volume> <pages> 255-299, </pages> <year> 1990. </year>
Reference: [Koz83] <author> D. Kozen. </author> <title> Results on the propositional -calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 27(3) </volume> <pages> 333-354, </pages> <year> 1983. </year>
Reference-contexts: Temporal logic can express many common program requirements, such as termination, deadlock-freedom, invariance, and liveness. A more powerful system, the -calculus, which adds a least fixpoint operator to propositional logic, was studied by Pratt [Pra81] and Kozen <ref> [Koz83] </ref>. This early work concentrated on proof techniques for proving system correctness. Other investigations focused on the relative expressiveness of different temporal logics [GPSS80,Lam80,BMP83,Wol83,EH86] and the complexity of the sat 4 isfiability problem [ES84,EH85,LPZ85,SE89].
Reference: [KPSY93] <author> Y. Kesten, A. Pnueli, J. Sifakis, and S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: These automata are important for the verification of duration properties. The undecidability of the reachability problem for rectangular automata with clocks and several stopwatches was previously known <ref> [ACHH93, KPSY93] </ref>. However several decidability results for restricted classes of automata 77 78 with all but one clock presented some hope, now lost, that a limited number of stopwatches could be accommodated [ACH93,BES93,KPSY93,BER94b]. Definition 4.0.3 Let A be a rectangular automaton and let a be a continuous variable of A.
Reference: [Kup95] <author> O. Kupferman. </author> <title> Model Checking for Branching-time Temporal Logics. </title> <type> PhD thesis, </type> <institution> The Technion, </institution> <year> 1995. </year>
Reference-contexts: The model checking problem for CTL fl on finite transition systems can be solved in space O (m (m + log n) 2 ), where m is the length of the formula and n is the size of the transition system. <ref> [Kup95] </ref>.
Reference: [KVdR83] <author> R. Koymans, J. Vytopil, and W.-P. de Roever. </author> <title> Real-time programming and asynchronous message passing. </title> <booktitle> In Proceedings of the Second Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 187-197. </pages> <publisher> ACM Press, </publisher> <year> 1983. </year>
Reference: [Lam80] <author> L. Lamport. </author> <title> "Sometimes" is sometimes "not never"|on the temporal logic of programs. </title> <booktitle> In Proceedings of the 7th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 174-185. </pages> <publisher> ACM Press, </publisher> <year> 1980. </year>
Reference: [Lam91] <author> L. Lamport. </author> <title> The Temporal Logic of Actions. </title> <type> Technical Report 79, </type> <institution> DEC Systems Research Center, Palo Alto, California, </institution> <year> 1991. </year>
Reference-contexts: Bouajjani et al. provide a translation from a subclass of the duration calculus into linear hybrid automata [BLR95]. Abadi and Lamport [AL92] extend Lamport's Temporal Logic of Actions (TLA) <ref> [Lam91] </ref> to real time using a global clock as in [PdR82] above. TLA can also be used to reason about hybrid systems [Lam93]. In both the duration calculus and TLA, systems and properties are expressed in the same formal language.
Reference: [Lam93] <author> L. Lamport. </author> <title> Hybrid systems in TLA+. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 190 </month>
Reference-contexts: Abadi and Lamport [AL92] extend Lamport's Temporal Logic of Actions (TLA) [Lam91] to real time using a global clock as in [PdR82] above. TLA can also be used to reason about hybrid systems <ref> [Lam93] </ref>. In both the duration calculus and TLA, systems and properties are expressed in the same formal language. It follows that in either formalism, proving that a system satisfies its requirement reduces to proving the validity of an implication.
Reference: [LPY95] <author> K.G. Larsen, P. Pettersson, and W. Yi. </author> <title> Compositional and symbolic model checking of real-time systems. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 76-87. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference: [LPZ85] <author> O. Lichtenstein, A. Pnueli, and L.D. Zuck. </author> <title> The glory of the past. </title> <editor> In R. Parikh, editor, </editor> <booktitle> Logics of Programs, Lecture Notes in Computer Science 193, </booktitle> <pages> pages 196-218. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference: [LSVW96] <author> N.A. Lynch, R. Segala, F. Vaandrager, and H.B. Weinberg. </author> <title> Hybrid I/O Automata. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 496-510. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Lynch et al. introduced the formalism of I/O automata, graphs in which edge labels model communication, and developed a simulation-based verification methodology [LT87, LV95]. Real time was introduced into the model in [LV92,GSSL94], and recently, more general continuous behavior has been considered <ref> [LSVW96] </ref>. To admit compositional reasoning, a notion of environment-freedom is introduced, which bars 14 an I/O automaton from constraining its environment. Environment-freedom is defined in terms of a game between an I/O automaton and its environment. Thus games are useful for verification as well as for synthesis.
Reference: [LT87] <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the Sixth Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151. </pages> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference-contexts: It follows that in either formalism, proving that a system satisfies its requirement reduces to proving the validity of an implication. Lynch et al. introduced the formalism of I/O automata, graphs in which edge labels model communication, and developed a simulation-based verification methodology <ref> [LT87, LV95] </ref>. Real time was introduced into the model in [LV92,GSSL94], and recently, more general continuous behavior has been considered [LSVW96]. To admit compositional reasoning, a notion of environment-freedom is introduced, which bars 14 an I/O automaton from constraining its environment.
Reference: [LV92] <author> N.A. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 397-446. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [LV95] <author> N. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations part i: </title> <journal> Untimed systems. Information and Computation, </journal> <volume> 121(2) </volume> <pages> 214-233, </pages> <year> 1995. </year>
Reference-contexts: one that can be simply stated: if every behavior of C is a behavior of A, then there exists a system B such that B simulates C and A backward-simulates B (roughly speaking, A backward-simulates B if A simulates B when the transition relations of the two systems are reversed) <ref> [LV95] </ref>. Simulation and bisimulation have deep connections to temporal logic. Consider the set of bisimulations between a given system A and itself. The union of all such bisimulations is again a bisimulation, which we denote by bis A . <p> It follows that in either formalism, proving that a system satisfies its requirement reduces to proving the validity of an implication. Lynch et al. introduced the formalism of I/O automata, graphs in which edge labels model communication, and developed a simulation-based verification methodology <ref> [LT87, LV95] </ref>. Real time was introduced into the model in [LV92,GSSL94], and recently, more general continuous behavior has been considered [LSVW96]. To admit compositional reasoning, a notion of environment-freedom is introduced, which bars 14 an I/O automaton from constraining its environment.
Reference: [McM93] <author> K.L. McMillan. </author> <title> Symbolic Model Checking: An Approach to the State Explosion Problem. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference: [McN93] <author> R. McNaughton. </author> <title> Infinite games played on finite graphs. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 65 </volume> <pages> 149-184, </pages> <year> 1993. </year>
Reference-contexts: In this formulation, a supervisor is a strategy for winning an infinite game played on the graph of system states. McNaughton shows how to calculate the winning strategy for any game defined by a Muller acceptance condition on a finite automaton <ref> [McN93] </ref>. His proof uses the later appearance record that Gurevich and Harrington used to complement tree automata [GH82].
Reference: [Mil71] <author> R. Milner. </author> <title> An algebraic definition of simulation between programs. </title> <booktitle> In Second International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 481-489. </pages> <publisher> The British Computer Society, </publisher> <year> 1971. </year>
Reference-contexts: In Chapter 8 of this dissertation, we solve a controller synthesis problem for rectangular automata in the discrete time domain. 1.1.4 Simulation Two of the basic tools that we use to establish our results are the concepts of simulation <ref> [Mil71] </ref> and bisimulation [Par81], which are fundamental to the study of process algebra.
Reference: [Moo90] <author> C. Moore. </author> <title> Unpredictability and undecidability in dynamical systems. </title> <journal> Physical Review Letters, </journal> <volume> 64(20) </volume> <pages> 346-358, </pages> <month> May </month> <year> 1990. </year>
Reference: [MP92] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <month> 191 </month>
Reference-contexts: When the fairness condition F is defined in one of the usual ways (as an unconditional, weak fairness (justice), or strong fairness (compassion) condition <ref> [MP92] </ref>), then the complexity of the model checking problem for CTL fl does not change. Linear Temporal Logic Linear temporal logic (LTL) is a sublogic of CTL fl which only takes into account the set of computations of a state, and not the whole tree of computation.
Reference: [MP93a] <author> O. Maler and A. Pnueli. </author> <title> Reachability analysis of planar multi-linear systems. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 194-209. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [MP93b] <author> Z. Manna and A. Pnueli. </author> <title> Models for reactivity. </title> <journal> Acta Informatica, </journal> <volume> 30(2) </volume> <pages> 609-678, </pages> <year> 1993. </year>
Reference-contexts: One of the more useful logics of this sort is MITL, for which the model checking problem is decidable on timed automata [AFH96]. Another variant of this approach is the age operator of Manna and Pnueli <ref> [MP93b] </ref>. The interpretation of () is the length of time that has remained continuously true. A fragment of a monadic second-order logic that is expressively equivalent to timed automata was discovered by Wilke [Wil94].
Reference: [MPS95] <author> O. Maler, A. Pnueli, and J. Sifakis. </author> <title> On the synthesis of discrete controllers for timed systems. In E.W. </title> <editor> Mayr and C. Puech, editors, </editor> <booktitle> STACS 95: Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 900, </booktitle> <pages> pages 229-242. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [MV94] <author> J. McManis and P. Varaiya. </author> <title> Suspension automata: a decidable class of hybrid automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 105-117. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [NK93a] <author> A. Nerode and W. Kohn. </author> <title> Models for hybrid systems: automata, topologies, controllability, observability. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 317-356. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [NK93b] <author> A. Nerode and W. Kohn. </author> <title> Multiple-agent hybrid control architecture. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 297-316. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [NOSY93] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <title> Hybrid Systems I, </title> <booktitle> Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [OG76] <author> S. Owicki and D. Gries. </author> <title> An axiomatic proof technique for parallel programs. </title> <journal> Acta Informatica, </journal> <volume> 6(4) </volume> <pages> 319-340, </pages> <year> 1976. </year>
Reference-contexts: Thus the verification of such systems can proceed algorithmically and automatically, rather than by theorem-proving. The beauty of model checking is that many algorithms are essentially finite-state. Hoare's assertional technique for proving safety properties was extended to parallel programs by Owicki and Gries <ref> [OG76] </ref>. To prove liveness properties (such as "every request is eventually satisfied") of concurrent systems, Pnueli introduced temporal logic, a modal logic that takes into account the time-dependence of events [Pnu77,Pnu81]. Temporal logic can express many common program requirements, such as termination, deadlock-freedom, invariance, and liveness.
Reference: [OSY94] <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 81-94. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 192 </month>
Reference: [OW89] <author> J.S. Ostroff and W.M. Wonham. </author> <title> A framework for real-time discrete event control. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 35(4) </volume> <pages> 386-397, </pages> <month> April </month> <year> 1989. </year>
Reference: [Par81] <author> D. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> 5th GI-Conference on Theoretical Computer Science, Lecture Notes in Computer Science 104, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: In Chapter 8 of this dissertation, we solve a controller synthesis problem for rectangular automata in the discrete time domain. 1.1.4 Simulation Two of the basic tools that we use to establish our results are the concepts of simulation [Mil71] and bisimulation <ref> [Par81] </ref>, which are fundamental to the study of process algebra.
Reference: [PBGM62] <author> L. Pontryagin, V. Boltyanskii, R. Gamkrelidze, and E. Mischenko. </author> <title> The Mathematical Theory of Optimal Processes. </title> <publisher> Wiley, </publisher> <year> 1962. </year>
Reference-contexts: Methods from Control Theory Isaacs inaugurated the study of differential games, in which two players control continuous variables to some end|often there is a pursuit motif, one player attempting to intercept the other [Isa65]. Pontryagin et al. further developed this theory, and called it optimal control <ref> [PBGM62] </ref>. Given a continuous system taking a continuous control and a cost function f on system trajectories, the basic problem of optimal control is to find a control function such that the trajectory of the controlled system minimizes f .
Reference: [PBV96] <author> A. Puri, V. Borkar, and P. Varaiya. </author> <title> "-approximation of differential inclusions. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 362-376. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: When either rectangularity or initialization is relaxed, the reachability 3 We have not treated the work of Henzinger and Ho [HH95] or Puri et al. <ref> [PBV96] </ref> on the approximation of nonlinear hybrid automata by rectangular hybrid automata. 16 problem becomes undecidable for automata in which only one continuous variable is not a precise clock. Chapter 5 is concerned with the model checking problem for linear temporal logic under the fairness condition of time divergence.
Reference: [PdR82] <author> A. Pnueli and W.-P. de Roever. </author> <title> Rendez-vous with Ada: a proof-theoretical view. </title> <booktitle> In Proceedings of the SIGPLAN AdaTEC Conference on Ada, </booktitle> <pages> pages 129-137. </pages> <publisher> ACM Press, </publisher> <year> 1982. </year>
Reference-contexts: One natural approach is based upon the use of a flexible clock variable T , giving the global system time, and first-order quantification for rigid variables over the time domain <ref> [PdR82] </ref>. An approach advocated by Koymans, Vytopil, and de Roever (and many others) is the introduction of new temporal operators which refer to time explicitly [KVdR83,KdR85,Koy90]. One of the more useful logics of this sort is MITL, for which the model checking problem is decidable on timed automata [AFH96]. <p> Bouajjani et al. provide a translation from a subclass of the duration calculus into linear hybrid automata [BLR95]. Abadi and Lamport [AL92] extend Lamport's Temporal Logic of Actions (TLA) [Lam91] to real time using a global clock as in <ref> [PdR82] </ref> above. TLA can also be used to reason about hybrid systems [Lam93]. In both the duration calculus and TLA, systems and properties are expressed in the same formal language.
Reference: [Pnu77] <author> A. Pnueli. </author> <title> The temporal logic of programs. </title> <booktitle> In Proceedings of the 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 46-57. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1977. </year>
Reference: [Pnu81] <author> A. Pnueli. </author> <title> The temporal semantics of concurrent programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 13(1) </volume> <pages> 45-60, </pages> <year> 1981. </year>
Reference: [PR89a] <author> A. Pnueli and R. Rosner. </author> <title> On the synthesis of a reactive module. </title> <booktitle> In Proceedings of the 16th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 179-190. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference: [PR89b] <author> A. Pnueli and R. Rosner. </author> <title> On the synthesis of an asynchronous reactive module. </title> <booktitle> In ICALP 89: Automata, Languages, and Programming, Lecture Notes in Computer Science 372, </booktitle> <pages> pages 652-671. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference: [PR90] <author> A. Pnueli and R. Rosner. </author> <title> Distributed reactive systems are hard to synthesize. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference: [Pra81] <author> V. Pratt. </author> <title> A decidable -calculus. </title> <booktitle> In Proceedings of the 22th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 421-427. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1981. </year> <month> 193 </month>
Reference-contexts: Temporal logic can express many common program requirements, such as termination, deadlock-freedom, invariance, and liveness. A more powerful system, the -calculus, which adds a least fixpoint operator to propositional logic, was studied by Pratt <ref> [Pra81] </ref> and Kozen [Koz83]. This early work concentrated on proof techniques for proving system correctness. Other investigations focused on the relative expressiveness of different temporal logics [GPSS80,Lam80,BMP83,Wol83,EH86] and the complexity of the sat 4 isfiability problem [ES84,EH85,LPZ85,SE89].
Reference: [PV94] <author> A. Puri and P. Varaiya. </author> <title> Decidability of hybrid systems with rectangular differential inclusions. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The subclass of initialized RHA (in which, essentially, the bounds on the drift of each clock do not change) is of especial interest, because the reachability problem for initialized RHA is decidable. This was proven by Puri and Varaiya <ref> [PV94] </ref>. They show that when all variable tests are non-strict (i.e., of the form x i c rather than x i &lt; c), that the dense-time reachability problem is reducible to the discrete-time reachability problem. <p> Chapter 3 contains the proof of Henzinger et al. [HPV94] of the theorem of Puri and Varaiya <ref> [PV94] </ref>, which states that the reachability problem is decidable for the class of initialized RHA. The proof is based on a translation from initialized RHA into timed automata. <p> Chapter 3 Reachability: Decidability The reachability problem, which asks whether a system can ever enter a given set of states, is the most basic problem in program verification. In this chapter we prove the theorem of Puri and Varaiya <ref> [PV94] </ref>, which states that the reachability problem is decidable for the class of initialized rectangular automata. 3.1 The Time-Abstract Transition System Definition 3.1.1 Let A be a triangular automaton, with or without silent moves. <p> Theorem 3.2.9 [HPV94] For every compact rectangular automaton A with uni form dynamics, L (S abs N A ) = L (S abs Proof. From Lemmas 3.2.7 and 3.2.8. Theorem 3.2.10 <ref> [PV94] </ref> The dense-time reachability problem for the class of compact rectangular automata with uniform dynamics is PSPACE-complete. Proof. It suffices to consider the case of vertex reachability, which singles out a vertex ^v 2 V , and asks if any state of the form (^v; x) is reachable. <p> In the next section, we show that if either rectangularity or initialization is relaxed, then even the simplest automata can encode undecidable problems. It follows that the class of initialized rectangular automata is essentially a maximal class for which the reachability problem is decidable. Definition 3.4.1 <ref> [PV94] </ref> An n-dimensional rectangular automaton A is initialized if for every edge e = (v; w) 2 E, and every 1 i n, if act (v) i 6= act (w) i then i 2 update (e). <p> Using the construction of Chapter 3 of the multirate automaton M A , which is independent of the time domain, we obtain the following proposition. Proposition 8.2.3 <ref> [PV94] </ref> The discrete-time reachability problem for the class of initialized rectangular automata is PSPACE-complete. 170 8.2.2 Undecidability In this section we show that both conditions, positivity and rectangularity, are required for a decidable reachability problem.
Reference: [Rab72] <author> M. Rabin. </author> <title> Automata on Infinite Objects and Church's Problem. </title> <booktitle> Regional Conference Series in Mathematics 13. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1972. </year>
Reference-contexts: It was proven by Buchi and Landweber that the winner of G always has a regular winning strategy, and that this strategy can be computed [BL69]. A simpler proof using tree automata was given by Rabin <ref> [Rab72] </ref>. Suppose we wish to determine whether there exists a program P which interacts with an "environment" E in such a way that the combined system satisfies a given requirement expressed in linear temporal logic (LTL).
Reference: [Ram89] <author> P. Ramadge. </author> <title> Some tractable supervisory control problems for discrete-event systems modeled by buchi automata. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 34(1) </volume> <pages> 10-19, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Cieslak et al. considered this problem in the context of incomplete information [CDFV88]. Extensions of the Ramadge-Wonham approach to the control of the infinitary behavior of discrete event systems were made by Thistle and Wonham [TW94a, TW94b,Thi95], and Ramadge <ref> [Ram89] </ref>. The introduction of discrete time was made in [GR88,BH88,OW89,BW94]. Dense time was introduced by Wong-Toi and 10 Hoffmann in [WH91,HW92a], who synthesized supervisors for timed automata. Symbolic methods for the computation of supervisors were developed by Hoff-man and Wong-Toi [HW92b].
Reference: [RW87a] <author> P. Ramadge and W. Wonham. </author> <title> Modular feedback logic for discrete event systems. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(5) </volume> <pages> 1202-1218, </pages> <month> September </month> <year> 1987. </year>
Reference: [RW87b] <author> P. Ramadge and W. Wonham. </author> <title> Supervisory control of a class of discrete event processes. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(1) </volume> <pages> 206-230, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: A different approach to synthesis based upon satisfiability testing appears in [CE81,Wol82]. Supervisory Control of Discrete Event Systems Control theorists have studied finite (and infinite) automata under the rubric of discrete event systems. In the framework of Ramadge and Wonham <ref> [RW87b, WR87,RW87a,RW89] </ref>, a supervisor for a finite automaton M consists of a finite automaton with output, where the output specifies a subset of events (letters, transition labels) that may be taken by M . Certain events, deemed uncontrollable, may not be prevented from occurring.
Reference: [RW89] <author> P. Ramadge and W. Wonham. </author> <title> The control of discrete event systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1) </volume> <pages> 81-98, </pages> <year> 1989. </year>
Reference: [SBM92] <author> F.B. Schneider, B. Bloom, and K. Marzullo. </author> <title> Putting time into proof outlines. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 618-639. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [SC85] <author> A.P. Sistla and E.M. Clarke. </author> <title> The complexity of propositional linear temporal logics. </title> <journal> Journal of the ACM, </journal> <volume> 32(3) </volume> <pages> 733-749, </pages> <year> 1985. </year>
Reference-contexts: If q and r are !-language equivalent, then they satisfy the same formulas of LTL. Theorem 2.1.32 1. The model checking problem for LTL on finite transition systems is PSPACE-complete <ref> [SC85] </ref>. 2. The model checking problem for LTL on finite transition systems can be solved in space O ((m + log n) 2 ), where m is the length of the formula and n is the size of the transition system. [VW86].
Reference: [SE89] <author> R.S. Streett and E.A. Emerson. </author> <title> An automata theoretic decision procedure for the propositional mu-calculus. </title> <journal> Information and Computation, </journal> <volume> 81 </volume> <pages> 249-264, </pages> <year> 1989. </year>
Reference: [Sie95] <author> M. Siegel. </author> <title> A refinement theory that supports both "Decrease of Non-determinism" and "Increase of Parallelism". </title> <editor> In I. Lee and S. Smolka, editors, </editor> <booktitle> CONCUR 95: Concurrency Theory, Lecture Notes in Computer Science 962, </booktitle> <pages> pages 378-392. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [Son81] <author> E. Sontag. </author> <title> Nonlinear regulation: the piecewise linear approach. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 26 </volume> <pages> 346-358, </pages> <year> 1981. </year> <month> 194 </month>
Reference-contexts: The solution of these inherently nonlinear problems seems to require switching, that is, adequate controllers require a discrete structure as well as a continuous structure. Such hybrid controllers (in the discrete time domain) were investigated by Sontag in <ref> [Son81] </ref>. An approach to hybrid controller design based upon relaxed variational methods has been developed by Nerode, Kohn, et al. [NK93a,NK93b,GKN94,KNRY95, KNR96].
Reference: [Thi95] <author> J.G. Thistle. </author> <title> On control of systems modelled as deterministic rabin automata. Discrete Event Dynamical Systems: Theory and Application, </title> <booktitle> 5(4) </booktitle> <pages> 357-81, </pages> <month> September </month> <year> 1995. </year>
Reference: [TW94a] <author> J.G. Thistle and W.M. Wonham. </author> <title> Control of infinite behavior of finite automata. </title> <journal> SIAM Journal on Control and Optimization, </journal> <volume> 32(4) </volume> <pages> 1057-97, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Cieslak et al. considered this problem in the context of incomplete information [CDFV88]. Extensions of the Ramadge-Wonham approach to the control of the infinitary behavior of discrete event systems were made by Thistle and Wonham <ref> [TW94a, TW94b,Thi95] </ref>, and Ramadge [Ram89]. The introduction of discrete time was made in [GR88,BH88,OW89,BW94]. Dense time was introduced by Wong-Toi and 10 Hoffmann in [WH91,HW92a], who synthesized supervisors for timed automata. Symbolic methods for the computation of supervisors were developed by Hoff-man and Wong-Toi [HW92b].
Reference: [TW94b] <author> J.G. Thistle and W.M. Wonham. </author> <title> Supervision of infinite behavior of discrete-event systems. </title> <journal> SIAM Journal on Control and Optimization, </journal> <volume> 32(4) </volume> <pages> 1098-1113, </pages> <month> July </month> <year> 1994. </year>
Reference: [Var95] <author> M. Vardi. </author> <title> An automata-theoretic approach to fair realizability and synthesis. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In Proceedings of the First Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 322-331. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year>
Reference-contexts: The model checking problem for LTL on finite transition systems can be solved in space O ((m + log n) 2 ), where m is the length of the formula and n is the size of the transition system. <ref> [VW86] </ref>. We will apply the second part of Theorem 2.1.32 to show that the model checking problem for LTL under the fairness condition of time divergence on initialized rectangular hybrid automata with bounded nondeterminism can be solved in polynomial space. 2.1.5 Control Definition 2.1.33 Let S be a transition system. <p> Let M be a multirate automaton with attractors. Let be a formula of linear temporal logic. There exists a Buchi automaton B : , of size singly exponential in the length of , such that the !-language of B is the set of computations that do not satisfy <ref> [VW86] </ref>. There exists another Buchi automaton B M , of size singly exponential in the size of M , such that the !-language of B is the set of divergent computations of M [AD94].
Reference: [WD90] <author> H. Wong-Toi and D.L. Dill. </author> <title> Synthesizing processes and schedulers from temporal specifications. In R.P. Kurshan and E.M. </title> <editor> Clarke, editors, </editor> <booktitle> CAV 90: Computer-aided Verification, Lecture Notes in Computer Science 531, </booktitle> <pages> pages 272-281. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Further work along these lines, dealing with realizable specifications in the context of fairness, appears in [ALW89, AM94,Var95]. Wong-Toi and Dill used this approach to automatically synthesize processes and schedulers when the environment and admissible processes are timed automata (and therefore infinite-state) <ref> [WD90] </ref>. A different approach to synthesis based upon satisfiability testing appears in [CE81,Wol82]. Supervisory Control of Discrete Event Systems Control theorists have studied finite (and infinite) automata under the rubric of discrete event systems.
Reference: [WH91] <author> H. Wong-Toi and G. Hoffmann. </author> <title> The control of dense real-time discrete event systems (extended abstract). </title> <booktitle> In Proceedings of 30th IEEE Conference on Decision and Control, </booktitle> <pages> pages 1527-1528, </pages> <address> Brighton, England, </address> <month> December </month> <year> 1991. </year>
Reference: [Wil94] <author> T. Wilke. </author> <title> Specifying timed state sequences in powerful decidable logics and timed automata. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 694-715. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Another variant of this approach is the age operator of Manna and Pnueli [MP93b]. The interpretation of () is the length of time that has remained continuously true. A fragment of a monadic second-order logic that is expressively equivalent to timed automata was discovered by Wilke <ref> [Wil94] </ref>. This fragment subsumes both MITL and propositional linear temporal logic augmented with the age operator, and can be used to prove the decidability of satisfiability for these logics. Another approach to real-time specification uses multiple flexible real-time specification variables in a propositional context [ACD93,HNSY94].
Reference: [Wol82] <author> P. Wolper. </author> <title> Synthesis of Communicating Processes from Temporal-Logic Specifications. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1982. </year>
Reference: [Wol83] <author> P. Wolper. </author> <title> Temporal logic can be more expressive. </title> <journal> Information and Control, </journal> 56(1/2):72-99, 1983. <volume> 195 </volume>
Reference: [Won94] <author> Howard Wong-Toi. </author> <title> Symbolic Approximations for Verifying Real-Time Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <address> CA, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: It was soon realized that the symbolic approach could be of great value for model checking infinite-state systems. Henzinger et al. developed a symbolic model checking technique for timed automata [HNSY94]. Symbolic model checkers for timed automata include HyTech [Ho95,HHW95], Kronos [DOTY96], Veriti <ref> [Won94] </ref>, UppAal [BLL + 96], HSIS [Bal94], and Timed Cospan [AK96]. A natural generalization of the timed automaton is the hybrid automaton, in which the behavior of the continuous variables can satisfy arbitrary differential equations [ACHH93,NOSY93].
Reference: [WR87] <author> W.M. Wonham and P.J. Ramadge. </author> <title> On the supremal controllable sublanguage of a given language. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(3) </volume> <pages> 637-659, </pages> <month> May </month> <year> 1987. </year>
Reference: [WZ92] <author> Henri B. Weinberg and Lenore D. Zuck. </author> <title> Timed ethernet: Real-time formal specification of ethernet. </title> <booktitle> In Proceedings of Third International Conference on Concurrency Theory, CONCUR '92, </booktitle> <pages> pages 370-385, </pages> <address> Stony Brook, NY, </address> <month> August </month> <year> 1992. </year> <note> Springer-Verlag. Lecture Notes in Computer Science 630. </note>
Reference-contexts: A timed automaton is a finite automaton equipped with a finite number of precise clock variables (variables x satisfying the differential equation dx dt = 1). Timed automata make very good models for communication protocols in which local clocks are assumed not to drift <ref> [WZ92] </ref>. As we shall see, timed automata can also be used in the verification of systems with drifting clocks [OSY94,HW95,HKPV95]. The model checking of temporal logic is computable on timed automata [ACD90], though intractable (PSPACE-complete for CTL and linear temporal logic).
Reference: [ZHR91] <author> C. Zhou, </author> <title> C.A.R. Hoare, and A.P. Ravn. A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40(5) </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: Hooman developed another extension of Hoare logic for the specification and derivation of correct real-time programs [Hoo91, Hoo94]. The duration calculus of Zhou et al. provides an interval-based temporal logic for specifying system properties and a proof calculus for proving system properties <ref> [ZHR91] </ref>. Duration properties such as "the gas burner leaks no more than five minutes out of any given hour" are easily expressible in the duration calculus. Bouajjani et al. provide a translation from a subclass of the duration calculus into linear hybrid automata [BLR95].
References-found: 143

