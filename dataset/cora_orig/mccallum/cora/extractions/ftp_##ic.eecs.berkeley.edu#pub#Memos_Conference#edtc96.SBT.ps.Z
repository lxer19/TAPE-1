URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/edtc96.SBT.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~shiple/publications/index.html
Root-URL: 
Title: Constructive Analysis of Cyclic Circuits (EDTC, Paris, March 1996)  
Author: Thomas R. Shiple Gerard Berry Herve Touati 
Address: Paris  
Affiliation: Department of EECS University of California, Berkeley  Ecole des Mines Sophia-Antipolis  Digital Equipment Corporation  
Abstract: Traditionally, circuits with combinational loops are found only in asynchronous designs. However, combinational loops can also be useful for synchronous circuit design. Combinational loops can arise from high-level language behavioral compiling, and can be used to reduce circuit size. We provide a symbolic algorithm that detects if a sequential circuit with combinational loops exhibits standard synchronous behavior, and if so, produces an equivalent circuit without combinational loops. We present applications to hardware and software synthesis from the Esterel synchronous programming language. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Berry and G. Gonthier. </author> <title> The synchronous programming language Esterel: Design, semantics, </title> <booktitle> implementation. Science of Computer Programming, </booktitle> <volume> 19(2) </volume> <pages> 87-152, </pages> <year> 1992. </year>
Reference-contexts: However, cyclic combinational circuits may have well-defined logical and electrical behaviors, with the same perfect match as for acyclic ones. Such circuits can be safely used in synchronous designs; they appear, for example, as the result of synthesis from synchronous programs written in the Esterel language <ref> [1] </ref>. This paper presents a symbolic procedure to analyze the behavior of cyclic circuits. This procedure is currently used in the Esterel v4 compiler. <p> We shall assume that combinational wires do not remember their value from one clock cycle to the next. This assumption is actually conservative for the usual electrical model, but it fits well with the semantics of synchronous languages such as Esterel or Lustre <ref> [8, 1] </ref>, and with software implementations where intermediate wires are implemented by automatic variables rather than by static variables. Discarding this assumption is possible but leads to a more complex analysis since combinational wires can behave as hidden state variables. <p> We also report the value of each circuit node on the bad assignment formed from the unstable state and a care input in the unstableDomain. 5 Application to Esterel Esterel is an imperative synchronous language dedicated to reactive and real-time applications <ref> [8, 1] </ref>. The Esterel v4 compiler translates an Esterel program into a control circuit and a data path, which can both be implemented either in hardware or in software.
Reference: [2] <author> G. Berry and T. R. Shiple. </author> <title> Constructive boolean circuits. </title> <note> To Appear. </note>
Reference-contexts: The electrical definition, which uses the inertial delay model of [4] and requires electrical stabilization for all delays. The exact definitions are given in <ref> [2] </ref>, where it is proved that they are indeed equivalent. The contribution of this paper is a practical algorithm that can determine whether a circuit with latches is constructive. The algorithm performs the analysis of a circuit relative to care inputs and reachable states. <p> The correctness of Malik's procedure with respect to our notion of constructive circuits follows directly from the fact that it symbolically implements Scott's fixed point computation <ref> [2] </ref>. tion order. 3.2 Our procedure In our procedure, we use a method different from Ma-lik's to compute the TVFs of the circuit nodes. Our goal is to minimize the number of gate evaluations performed during ternary symbolic simulation. <p> Such a delay obviously exists for acyclic circuits, and can be shown to exist for constructive circuits <ref> [2] </ref>. We shall assume that combinational wires do not remember their value from one clock cycle to the next.
Reference: [3] <author> F. Bourdoncle. </author> <title> Efficient chaotic iteration strategies with widenings. </title> <booktitle> In Proceedings of the International Conference on Formal Methods in Programming and their Applications, volume 735 of Lecture Notes in Computer Science, </booktitle> <pages> pages 128-141. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This would require 3 passes to reach convergence. However, if we break the circuit at the output of 2 and use the order 3, 1, 4, 2, we reach convergence in a single pass. We apply an evaluation ordering scheme by Bourdon-cle <ref> [3] </ref> to heuristically minimize the number of gate evaluations. Bourdoncle's algorithm takes as input a directed graph and produces a weak topological ordering (WTO). A WTO can be thought of as a decomposition of a graph into recursive, strongly connected components (SCCs). Consider the graph in Figure 4.
Reference: [4] <author> J. A. Brzozowski and C.-J. H. Seger. </author> <title> Asynchronous Circuits. </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In C 5 , the least fixed point is x = ? and the circuit is undefined. (This is the same as ternary circuit analysis using values f0; 1; Xg <ref> [4] </ref>.) 3. The electrical definition, which uses the inertial delay model of [4] and requires electrical stabilization for all delays. The exact definitions are given in [2], where it is proved that they are indeed equivalent. <p> In C 5 , the least fixed point is x = ? and the circuit is undefined. (This is the same as ternary circuit analysis using values f0; 1; Xg <ref> [4] </ref>.) 3. The electrical definition, which uses the inertial delay model of [4] and requires electrical stabilization for all delays. The exact definitions are given in [2], where it is proved that they are indeed equivalent. The contribution of this paper is a practical algorithm that can determine whether a circuit with latches is constructive. <p> Their model allows the description of apparent loops (loops between hierarchical blocks that in fact disappear when the circuit is flattened) and actual loops. However, they do not address the problem of deciding if a circuit is constructive. Brzozowski and Seger <ref> [4] </ref> address the following problem: given that a circuit (without latches) is in a logically consistent state, what is the effect of changing the logical values on a subset of inputs? They solve this problem using ternary valued simulation.
Reference: [5] <author> J. R. Burch, D. Dill, E. Wolf, and G. D. </author> <title> Micheli. Modeling hierarchical combinational circuits. </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 612-617, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: However, Malik provided a procedure for circuits without latches, and our work builds on this (see Section 3.1). Burch et al. <ref> [5] </ref> use ternary valued relations to model combinational loops. Their model allows the description of apparent loops (loops between hierarchical blocks that in fact disappear when the circuit is flattened) and actual loops. However, they do not address the problem of deciding if a circuit is constructive.
Reference: [6] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of synchronous sequential machines based on symbolic execution. </title> <editor> In J. Sifakis, editor, </editor> <booktitle> Proceedings of the Workshop on Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science, </booktitle> <pages> pages 365-373. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: Steps 1 and 2 analyze the circuit for a single, but arbitrary, clock cycle. Step 3 effectively examines multiple clock cycles to determine whether a state in unstableStates is reachable via a sequence of care inputs. To do this, we use a standard symbolic traversal technique <ref> [6] </ref>, limiting the next state computation to the input care set. However, there is one wrinkle: what do we use for the next state functions? The reachability computation requires a boolean function for each next state signal f , but Step 1 yields a ternary valued function. <p> We hope to achieve better performance for big Esterel programs by adding additional optimizations. In particular, during the translation from programs into circuits, we can build a superset of the reachable states. This set can be used to simplify the intermediate TVFs by using the BDD restrict operator <ref> [6] </ref>. Preliminary results show that this may significantly reduce memory size. 6 Conclusion We have described a procedure for determining if a circuit with latches is constructive.
Reference: [7] <author> M. J. C. Gordon. </author> <title> The Denotational Description of Programming Languages. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The semantical definition, which is based on Scott booleans f0; 1; ?g, as in classical denotational semantics <ref> [7, 12] </ref>. A circuit is thought of as a monotonic function on the lattice f0; 1; ?g whose least fixed point defines the output.
Reference: [8] <author> N. Halbwachs. </author> <title> Synchronous Programming of Reactive Systems. </title> <publisher> Kluwer Academic Publishing, </publisher> <year> 1993. </year>
Reference-contexts: We shall assume that combinational wires do not remember their value from one clock cycle to the next. This assumption is actually conservative for the usual electrical model, but it fits well with the semantics of synchronous languages such as Esterel or Lustre <ref> [8, 1] </ref>, and with software implementations where intermediate wires are implemented by automatic variables rather than by static variables. Discarding this assumption is possible but leads to a more complex analysis since combinational wires can behave as hidden state variables. <p> We also report the value of each circuit node on the bad assignment formed from the unstable state and a care input in the unstableDomain. 5 Application to Esterel Esterel is an imperative synchronous language dedicated to reactive and real-time applications <ref> [8, 1] </ref>. The Esterel v4 compiler translates an Esterel program into a control circuit and a data path, which can both be implemented either in hardware or in software.
Reference: [9] <author> N. Halbwachs and F. Maraninchi. </author> <title> On the symbolic analysis of combinational loops in circuits and synchronous programs. </title> <booktitle> In Euromicro'95, </booktitle> <month> September </month> <year> 1995. </year> <title> Como, </title> <address> Italy. </address>
Reference-contexts: Although their work is primarily focused on asynchronous circuits, it is the key for proving the equivalence between our three definitions of constructive circuits. Halbwachs et al. <ref> [9] </ref> give a procedure that detects whether a circuit has a unique boolean solution. Their test accepts circuit C 5 above because they do not require electrical stabilization; hence, their classification of circuits is different than ours.
Reference: [10] <author> R. Hojati, R. K. Brayton, and R. P. Kurshan. </author> <title> BDD-based debugging of designs using language containment and fair CTL. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> Proceedings of the Conference on Computer-Aided Verification, volume 697 of Lecture Notes in Computer Science, </booktitle> <pages> pages 41-58. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: We simply work backwards, restricting ourselves to care inputs, to find a sequence of states starting from an initial state and leading to the unstable state. The process of generating an error trace is the same as that used in formal verification tools <ref> [10] </ref>. We also report the value of each circuit node on the bad assignment formed from the unstable state and a care input in the unstableDomain. 5 Application to Esterel Esterel is an imperative synchronous language dedicated to reactive and real-time applications [8, 1].
Reference: [11] <author> S. Malik. </author> <title> Analysis of cyclic combinational circuits. </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 13(7) </volume> <pages> 950-956, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: This paper presents a symbolic procedure to analyze the behavior of cyclic circuits. This procedure is currently used in the Esterel v4 compiler. Our work builds upon Malik's <ref> [11] </ref> work, extending his analysis method to sequential circuits, and providing a refined fixed point iteration method. 1 We refer to an arbitrary interconnection of logic gates as a combinational circuit. 2 We denote negation, disjunction, and conjunction by x, x + y, and x y, respectively. a (a) y b
Reference: [12] <author> G. D. Plotkin. </author> <title> LCF as a programming language. </title> <journal> Theoretical Computer Science, </journal> <volume> 5(3) </volume> <pages> 223-256, </pages> <year> 1977. </year> <month> 6 </month>
Reference-contexts: The semantical definition, which is based on Scott booleans f0; 1; ?g, as in classical denotational semantics <ref> [7, 12] </ref>. A circuit is thought of as a monotonic function on the lattice f0; 1; ?g whose least fixed point defines the output. <p> following tables show the ternary valued extension for several boolean operators. 3 a NOT a b AND OR XOR 1 0 0 1 0 1 1 1 1 1 1 0 X 1 X 1 X 1 X X 1 X These are called the parallel extensions in denotational semantics <ref> [12] </ref>. They follow the basic rule, which is valid in the electrical model, that a 0 or 1 output value can be deduced whenever there is sufficient information available at the inputs. For example, a 0 at any input of an AND gate forces the output to 0.
References-found: 12

