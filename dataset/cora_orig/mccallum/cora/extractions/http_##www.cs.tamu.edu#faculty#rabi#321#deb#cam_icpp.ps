URL: http://www.cs.tamu.edu/faculty/rabi/321/deb/cam_icpp.ps
Refering-URL: http://www.cs.tamu.edu/faculty/rabi/321/deb/
Root-URL: http://www.cs.tamu.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P.-J. Chuang and N.-F. Tzeng, </author> <title> "An Efficient Sub-mesh Allocation Strategy for Mesh Computer Systems", </title> <booktitle> Proc. 11th Int'l Conf. on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 256-262. </pages>
Reference-contexts: A number of submesh allocation schemes have been proposed in the literature <ref> [1, 2, 7, 9, 13] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay to a great extent [2]. <p> For example, if we use any of the bit-mapping allocation strategies proposed in <ref> [1, 7, 13] </ref>, we can use a reservation map along with the bit map [5]. We use the busy-list strategy proposed in [2] as the processor allocator due to its superior performance and low time and space overheads [2].
Reference: [2] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "A Fast and Efficient Strategy for Submesh Allocation in Mesh-Connected Parallel Computers", </title> <booktitle> Proc. 5th IEEE Symp. on Parallel and Distributed Proc., </booktitle> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: A number of submesh allocation schemes have been proposed in the literature <ref> [1, 2, 7, 9, 13] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay to a great extent [2]. <p> A number of submesh allocation schemes have been proposed in the literature [1, 2, 7, 9, 13]. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay to a great extent <ref> [2] </ref>. Although a lot of research has been focussed on improving the performance by using a better submesh allocator, the issue of job scheduling has been neglected. All the existing submesh allocation algorithms use the FCFS scheduling policy. The FCFS policy has the disadvantage that it is `blocking' in nature. <p> The problem of sub-mesh allocation and scheduling in mesh multicomput-ers is inherently different from hypercubes, as requests can have arbitrary aspect ratios <ref> [2] </ref>. Thus, in spite of their similarity that both systems are partitionable, they behave differently and the same set of observations and principles may not be applicable to both the systems. The strategy proposed in [4] for hyper-cubes blocks only those subcubes that are allocated. <p> For example, if we use any of the bit-mapping allocation strategies proposed in [1, 7, 13], we can use a reservation map along with the bit map [5]. We use the busy-list strategy proposed in <ref> [2] </ref> as the processor allocator due to its superior performance and low time and space overheads [2]. The busy list strategy has to be modified to account for the reserved submeshes in addition to the allocated submeshes. <p> We use the busy-list strategy proposed in <ref> [2] </ref> as the processor allocator due to its superior performance and low time and space overheads [2]. The busy list strategy has to be modified to account for the reserved submeshes in addition to the allocated submeshes. While considering candidate submeshes for allocation, the allocated and reserved submeshes are treated equally. However, for reservation, they are treated differently. <p> For each candidate submesh, the entire reservation list is searched to determine if it overlaps with a reserved submesh. In case of an overlap, the candidate shifts, similar to the shifting done in <ref> [2] </ref>. The following example illustrates the reservation process. The reservation process following deallocation can be done in a similar fashion and is described in detail in [5]. Example 3 Consider the 8fi8 mesh in Fig. 4 with an incoming request for a 2 fi 2 submesh.
Reference: [3] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "Submesh Allocation in Mesh Multicomputers: A Best-Fit Approach with Complete Recognition Capability", </title> <note> submitted to Journal of Parallel and Distributed Comp.. </note>
Reference: [4] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "A Reservation-based Job Scheduling Scheme for Hypercube Multicomputers", </title> <type> Tech. Rep. 94-003, </type> <institution> Dept. of Computer Science, Texas A&M Univ.. </institution>
Reference-contexts: The reservation technique is similar to the resource allocation among in a distributed environment [11] and the reservation techniques used for job scheduling in hy-percubes in <ref> [4, 12] </ref>. (A detailed discussion appears in Section 4.) The paper is organized as follows. The following Section presents the pertinent preliminaries. The ba sic approach behind the proposed scheduling strategy is discussed in Section 3. Section 4 presents an efficient implementation of the proposed scheduler. <p> The concept of reserving processors has been used for resource allocation in a distributed environment [11] and for job (a) Phase 1 (b) Phase 2 (c) Phase 3 scheduling in hypercube multicomputers <ref> [4, 12] </ref>. The strategy proposed in [12] always reserves the first available subcube irrespective of the number of free processors that may get blocked. <p> Thus, in spite of their similarity that both systems are partitionable, they behave differently and the same set of observations and principles may not be applicable to both the systems. The strategy proposed in <ref> [4] </ref> for hyper-cubes blocks only those subcubes that are allocated. This is similar to our strategy when we do not allow any free processors to be blocked and no overlap = 1.
Reference: [5] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "Submesh Allocation in Mesh Multicomputers", </title> <type> Tech. Rep. 93-043, </type> <institution> Dept. of Computer Science, Texas A&M Univ.. </institution>
Reference-contexts: The job scheduler allocates/reserves jobs in a strict FCFS fashion. However, such a scheduler does not improve the performance over the FCFS policy as reservations cause many idle processors <ref> [5] </ref>. The following example illustrates the basic principles behind the proposed scheduling strategy. Example 1 Consider the 18 fi 15 mesh in Fig. 1 with an incoming request for an 8 fi 4 submesh. Four tasks are executing on four submeshes (as indicated by dot ted boxes). <p> Results from simulations indicate that, even with our best-fit search, this strict FCFS allocation/reservation policy performs as badly as the FCFS policy, possibly due to the number of free processors that get blocked due to a reservation <ref> [5] </ref>. The problem of sub-mesh allocation and scheduling in mesh multicomput-ers is inherently different from hypercubes, as requests can have arbitrary aspect ratios [2]. <p> For example, if we use any of the bit-mapping allocation strategies proposed in [1, 7, 13], we can use a reservation map along with the bit map <ref> [5] </ref>. We use the busy-list strategy proposed in [2] as the processor allocator due to its superior performance and low time and space overheads [2]. The busy list strategy has to be modified to account for the reserved submeshes in addition to the allocated submeshes. <p> However, for reservation, they are treated differently. A candidate considered for reservation may not overlap with another reserved submesh, but it can overlap with an allocated submesh. A detailed discussion on the implementation of the proposed scheduler using the busy-list strategy appears in <ref> [5] </ref>. The proposed strategy does not consider all possible submeshes for reservation. Instead, it considers only the candidates at the lower-left corner of each allocated submesh, the four corners on each reserved submesh and the lower-left corner of the mesh system. <p> In case of an overlap, the candidate shifts, similar to the shifting done in [2]. The following example illustrates the reservation process. The reservation process following deallocation can be done in a similar fashion and is described in detail in <ref> [5] </ref>. Example 3 Consider the 8fi8 mesh in Fig. 4 with an incoming request for a 2 fi 2 submesh. There are two allocated submeshes T 1 and T 2 and two reserved sub-meshes R 1 and R 2 . <p> I 1 overlaps with a reserved submesh and shifts to the left as well as to the right to generate two additional candidates I 2 and I 3 . The rules regarding the shifting is delineated in detail in <ref> [5] </ref>. Another initial candidate submesh I 4 generated at the lower-left corner of the allocated submesh T 1 overlaps with the reserved submesh R 1 . However, both candidates after left and right shift exceed the mesh boundary and are rejected. <p> Instead of searching all possible candidates, searching a few candidate sub-meshes suffices. The following example illustrates the deallocation procedure. The details of the dealloca-tion process appears in <ref> [5] </ref>. Example 4 Let us consider the deallocation process shown in Fig. 3 and described in Example 2. <p> This is because the proposed scheme manages to avoid blocking to a great extent. The priority scheme combined with reservation performs the best since a reserved task does not block the scheduler and the blocking is further reduced. The standard deviation of the schemes also follows a similar trend <ref> [5] </ref>, indicating a higher predictability in the waiting time for the proposed schemes over FCFS. A second set of simulations was performed on a 64fi 64 mesh by changing the utilization of the mesh system (Fig. 6). <p> However, for higher traffic the idle processors due to reservation causes the utilization to go down and it overtakes the potential benefits in reducing blocking. The standard deviation also follows the same trend as the average waiting delay <ref> [5] </ref>. A third set of simulations was performed to study the effect of M AX P RI on the performance of the proposed strategy (Fig. 7). As the value of M AX P RI increases, the average waiting delay decreases. <p> Simulation results also indicate that a higher performance may be achieved by changing the F REE F RAC parameter in some cases, although the effect is not as prominent as M AX P RI <ref> [5] </ref>. One of the advantages of the proposed scheme is the flexibility it offers to the system administration to trade off short-term fairness for performance. <p> A comparison of the average allocation times for the list based and the bit map based implementations of the proposed reservation-based scheduling in Fig. 8 indicates that an efficient implementation such as the one described in Section 4 helps keep the time overhead low <ref> [5] </ref>. 6 Conclusions We have proposed a new job scheduling strategy for mesh multicomputers. Simulation results indicate that the proposed strategy outperforms the FCFS strategy. The average waiting delay can be significantly reduced by the proposed strategy.
Reference: [6] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "Job Scheduling in Mesh Multicomputers", </title> <type> Tech. Rep. 94-004, </type> <institution> Dept. of Computer Science, Texas A&M University. </institution>
Reference: [7] <author> J. Ding and L. N. Bhuyan, </author> <title> "An Adaptive Submesh Allocation Strategy for Two-Dimensional Mesh Connected Systems", </title> <booktitle> Proc. 1993 International Conf. on Parallel Processing, Aug. 1993, </booktitle> <volume> vol. II, </volume> <pages> pp. 336-345. </pages>
Reference-contexts: A number of submesh allocation schemes have been proposed in the literature <ref> [1, 2, 7, 9, 13] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay to a great extent [2]. <p> For example, if we use any of the bit-mapping allocation strategies proposed in <ref> [1, 7, 13] </ref>, we can use a reservation map along with the bit map [5]. We use the busy-list strategy proposed in [2] as the processor allocator due to its superior performance and low time and space overheads [2].
Reference: [8] <author> P. Krueger, T.-H. Lai and V. A. Radiya, </author> <title> "Processor Allocation vs. Job Scheduling on Hypercube Computers", </title> <booktitle> Proc. 11th Int'l Conf. on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 394-401. </pages>
Reference: [9] <author> K. Li and K. H. Cheng, </author> <title> "A Two Dimensional Buddy System for Dynamic Resource Allocation in </title>
Reference-contexts: A number of submesh allocation schemes have been proposed in the literature <ref> [1, 2, 7, 9, 13] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay to a great extent [2].
References-found: 9

