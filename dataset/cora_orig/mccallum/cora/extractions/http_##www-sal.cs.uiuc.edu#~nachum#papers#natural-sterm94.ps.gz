URL: http://www-sal.cs.uiuc.edu/~nachum/papers/natural-sterm94.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Email: nachum,hoot@cs.uiuc.edu  
Title: Natural Termination  
Author: Nachum DERSHOWITZ and Charles HOOT 
Date: Revised  
Note: Communicated by Received  
Address: 1304 West Springfield Ave., Urbana, IL 61801-2987, U.S.A.  
Affiliation: Department of Computer Science, University of Illinois at Urbana-Champaign,  
Abstract: Two techniques are examined for showing termination of rewrite systems when simplification ordering are insufficient. The first approach generalizes the various path orderings and the conditions under which they work. Examples of its use are given and a brief description of an implementation is presented. The second approach uses restricted derivations, called "forward closures", for proving termination of orthogonal and overlaying systems. Both approaches allow the use of "natural" interpretations under which rules rewrite terms to terms of the same value.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Leo Bachmair and Nachum Dershowitz. </author> <title> Equational inference, canonical proofs, and proof orderings. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 41(2) </volume> <pages> 236-276, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: But one must ensure that the semantics are consistent with the rules (which is analogous to showing that f (x) = x is a fixpoint of the definition). This can be done using standard rewriting techniques ("proof by consistency"; see Bachmair and Dershowitz <ref> [1] </ref>). Indeed, adding f x ! x to System 6 yields a terminating confluent overlay system.
Reference: [2] <author> Elias Tahhan Bittar. </author> <title> Non erasing, right linear, orthogonal term rewrite systems application to zantema's problem. </title> <type> Technical Report RR 2202, </type> <institution> INRIA, </institution> <year> 1993. </year>
Reference-contexts: Other solutions to this problem are due to Geser [11] and Bittar <ref> [2] </ref>. See also McNaughton [26] who considers termination of semi-Thue systems such as this example. 29 7. Conclusion The general path ordering we have defined provides a powerful general purpose tool for demonstrating termination of rewrite systems.
Reference: [3] <author> Robert M. Burstall. </author> <title> Proving properties of programs by structural induction. </title> <journal> Computing J., </journal> <volume> 12(1) </volume> <pages> 41-48, </pages> <month> February </month> <year> 1969. </year>
Reference-contexts: We also look at methods of proving termination of orthogonal (left-linear non-overlapping) systems, such as (2), and related issues in Sections 5 and 6. These may be compared with ordinary structural induction proofs used for recursively-defined functions; see Burstall <ref> [3] </ref> and Manna [23]. In particular, we employ the notion of restricting the set of forward closures (Dershowitz [5]) to those conforming with some particular rewrite strategy, and give conditions under which the restricted set suffices. 3 2.
Reference: [4] <author> Ahlem Ben Cherifa and Pierre Lescanne. </author> <title> Termination of rewriting systems by polynomial interpretations and its implementation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9(2) </volume> <pages> 137-159, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: In cases where the code cannot make a determination, it will query the user for an authoritative answer. The part of the code that does this testing could be upgraded to provide heuristics such as those described in Lankford [19], Ben Cherifa and Lescanne <ref> [4] </ref>, or Steinbach and Zehnter [35]. Forward closures provide a more specialized method for showing termination, applicable to locally-confluent overlaying or right-linear systems. Special cases of interest are orthogonal and string rewrite systems which are terminating whenever their forward closures are.
Reference: [5] <author> Nachum Dershowitz. </author> <title> Termination of linear rewriting systems. </title> <booktitle> In Proceedings of the Eighth International Colloquium on Automata, Languages and Programming (Acre, Israel), volume 115 of Lecture Notes in Computer Science, </booktitle> <pages> pages 448-458, </pages> <address> Berlin, </address> <month> July </month> <year> 1981. </year> <booktitle> European Association of Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: These may be compared with ordinary structural induction proofs used for recursively-defined functions; see Burstall [3] and Manna [23]. In particular, we employ the notion of restricting the set of forward closures (Dershowitz <ref> [5] </ref>) to those conforming with some particular rewrite strategy, and give conditions under which the restricted set suffices. 3 2. The General Path Ordering The general path ordering combines mappings from terms to well-founded sets. Definition 1 (Termination Function). <p> The forward closure f ssx ! sf psf sx ! sf pssf psf x is innermost, but not outermost. Proposition 2 (Dershowitz <ref> [5] </ref>). A right-linear rewrite system is terminating if, and only if, there are no infinite forward closures. In particular, forward closures suffice for string-rewriting systems. <p> Proposition 3 (Guepel [13]). A non-overlapping rewrite system is terminating if, and only if, there are no infinite forward closures. 22 This extends the result in <ref> [5] </ref> for orthogonal systems. In general, though, a rewrite system need not terminate even if all its forward closures do [5]. <p> Proposition 3 (Guepel [13]). A non-overlapping rewrite system is terminating if, and only if, there are no infinite forward closures. 22 This extends the result in <ref> [5] </ref> for orthogonal systems. In general, though, a rewrite system need not terminate even if all its forward closures do [5].
Reference: [6] <author> Nachum Dershowitz. </author> <title> Orderings for term-rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 17(3) </volume> <pages> 279-301, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: Syntactic "path" orderings (see Dershowitz [7]) work in this case, too. Lipton and Snyder [22] gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation. Virtually all orderings used in practice are simplification orderings <ref> [6] </ref>, satisfying the replacement property, that s t implies that any term containing s as a subterm is at least as large (under ) as the same term with s replaced by t, and the subterm property, that any term containing s is at least as large as s. <p> Simplification orderings are surveyed by Steinbach [34]; their well-foundedness is a consequence of Kruskal's Tree Theorem. (See Dershowitz <ref> [6] </ref>.) A non-simple rewrite system (such as f f x ! f gf x) is one for which no simplification ordering will show termination. <p> Terms of equal weight and headed by the same symbol have their subterms compared lexicographically. If they are headed by different symbols, a "precedence" ordering determines which term is larger. Another class of simplification orderings, the path orderings introduced in Dershowitz <ref> [6] </ref>, is based on the idea that a term u should be bigger than any term that is built from smaller terms, all held together by a structure of function symbols that are smaller in some precedence ordering than the root symbol of u. <p> In other words, we require that consistently replacing function symbols in two terms with others of the same arity and with the same relative ordering has no effect 2 on the ordering of the two. The recursive path orderings <ref> [6, 16, 21] </ref> are syntactic; the Knuth-Bendix and polynomial orderings are not. <p> Size and weight are strictly monotonic; depth is monotonic. A simple example of a precedence uses the ordering + &gt; s &gt; 0 with + = x:"+", s = x:"s", and 0 = x:"0". (The subterm property is guaranteed for strictly monotonic homomorphisms into well-ordered sets <ref> [6] </ref>.) An example of a multiset component ordering is = R 1 ; it extracts the maximal immediate subterms in . Another example is = P f1g which gives the leftmost subterm. 5 Definition 4 (General Path Ordering). <p> Multiset path ordering (the original version of the "recursive path ordering", Dershowitz <ref> [6] </ref>) 0 is a precedence; 1 extracts the multiset of immediate subterms. Extended path ordering (Dershowitz [6]) 0 extracts one of the immediate subterms; 1 extracts a multiset of the remaining immediate sub-terms. <p> Multiset path ordering (the original version of the "recursive path ordering", Dershowitz <ref> [6] </ref>) 0 is a precedence; 1 extracts the multiset of immediate subterms. Extended path ordering (Dershowitz [6]) 0 extracts one of the immediate subterms; 1 extracts a multiset of the remaining immediate sub-terms. Lexicographic path ordering (Kamin and Levy [16]) 0 is a precedence; 1 ; : : :; n give a permutation of the subterms. <p> Recursive path ordering ("with status", Lescanne [21]) 0 is a total precedence; 1 ; : : : ; n give a permutation of the subterms or multisets of subterms, depending on the function symbol. Extended Knuth-Bendix ordering (Dershowitz <ref> [6] </ref>, Steinbach and Zehnter [35]) 0 is a monotonic interpretation; 1 is a precedence; 2 ; : : : ; n+1 give the subterms in order, permuted, or multisets of immediate subterms, depending on the function symbol.
Reference: [7] <author> Nachum Dershowitz. </author> <title> Termination of rewriting. </title> <journal> J. Symbolic Computation, </journal> 3(1&2):69-115, February/April 1987. Corrigendum: <volume> 4, </volume> 3 (December 1987), <pages> 409-410; </pages> reprinted in Rewriting Techniques and Applications, J.-P. Jouan-naud, ed., pp. 69|115, Academic Press, 1987. 
Reference-contexts: The use, in particular, of polynomial interpretations which map terms into the natural numbers was developed by Lankford [19]. For a survey of termination methods, see Dershowitz <ref> [7] </ref>. fl This research was supported in part by the U. S. National Science Foundation under Grants CCR-90-07195 and CCR-90-24271. The first author was also supported by a Lady Davis fellowship at the Hebrew University of Jerusalem and a Meyerhoff fellowship at the Weizmann Institute of Science. <p> It can also be proved terminating by considering the multiset of "natural" interpretations of all products in a term, letting + and fi stand for addition and multiplication, and assigning some fixed value to constants; see Dershowitz and Manna [10] for similar examples. Syntactic "path" orderings (see Dershowitz <ref> [7] </ref>) work in this case, too. Lipton and Snyder [22] gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation. <p> The notion of path ordering was extended by Kamin and Levy [16] to compare subterms lexicographically and to allow for a semantic component; see Dershowitz <ref> [7] </ref>. We use quasi-orderings (reflexive-transitive binary relations), rather than partial orderings, to prove termination of rewrite systems. If ~ is a quasi-ordering and ~ is its inverse, then its strict part ( ~ ~ ) is a partial order. Its associated equivalence relation is defined as ~ " ~ .
Reference: [8] <author> Nachum Dershowitz and Charles Hoot. </author> <title> Topics in termination. </title> <editor> In C. Kirch-ner, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Rewriting Techniques and Applications (Montreal, Canada), Lecture Notes in Computer Science, </booktitle> <address> Berlin, June 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: S. National Science Foundation under Grants CCR-90-07195 and CCR-90-24271. The first author was also supported by a Lady Davis fellowship at the Hebrew University of Jerusalem and a Meyerhoff fellowship at the Weizmann Institute of Science. This is a revised and expanded version of Topics in Termination <ref> [8] </ref>. 1 The rule x fi (y + z) ! (x fi y) + (x fi z) (1) is terminating. This can be shown by interpreting fi as multiplication, + as xy:x + y + 1, and constants as 2.
Reference: [9] <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <address> Am-sterdam, </address> <year> 1990. </year>
Reference-contexts: The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and has important applications in abstract data type specifications, functional programming, symbolic computation, and automated deduction. For surveys of the theory of rewriting, see Der-showitz and Jouannaud <ref> [9] </ref>, Klop [17] and Plaisted [33]. If no infinite sequences of rewrites are possible, a rewrite system is said to have the termination property. In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t).
Reference: [10] <author> Nachum Dershowitz and Zohar Manna. </author> <title> Proving termination with multiset orderings. </title> <journal> Communications of the ACM, </journal> <volume> 22(8) </volume> <pages> 465-476, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: It can also be proved terminating by considering the multiset of "natural" interpretations of all products in a term, letting + and fi stand for addition and multiplication, and assigning some fixed value to constants; see Dershowitz and Manna <ref> [10] </ref> for similar examples. Syntactic "path" orderings (see Dershowitz [7]) work in this case, too. Lipton and Snyder [22] gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation. <p> subterms of rank k, R k (IS (t)), or 3. a multiset containing the immediate subterms of rank k or less (R k (IS (t)) = i=1 R j (IS (t))) and is the multiset ordering ~ M induced by a well-founded ordering ~ on terms. (See Dershowitz and Manna <ref> [10] </ref> for more on multiset orderings.) Simple examples of homomorphisms from terms to the natural numbers are size (number of function symbols, including constants), depth (maximum nesting of function symbols), and weight (sum of weights of function symbols). Size and weight are strictly monotonic; depth is monotonic.
Reference: [11] <author> Alfons Geser. </author> <title> A solution to zantema's problem. </title> <type> Technical Report MIP-9314, </type> <institution> Universitat Passau, Passau, Germany, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Other solutions to this problem are due to Geser <ref> [11] </ref> and Bittar [2]. See also McNaughton [26] who considers termination of semi-Thue systems such as this example. 29 7. Conclusion The general path ordering we have defined provides a powerful general purpose tool for demonstrating termination of rewrite systems.
Reference: [12] <author> Alfons Geser. </author> <title> An improved general path order. </title> <type> Technical Report MIP-9407, </type> <institution> Universitat Passau, Passau, Germany, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: It can be applied in situations in which the more familiar simplification orderings cannot, as when the rewrite system is self-embedding. It encompasses virtually all popular methods, including polynomial (and other) interpretations, the Knuth-Bendix ordering and its extensions, and the recursive path order-ings and its variants. Geser <ref> [12] </ref> has suggested a weakening of the subterm conditions, thereby strengthening the general path ordering. Several examples, including 1, were mechanically verified by our general path ordering termination code (Gpotc).
Reference: [13] <author> Oliver Geupel. </author> <title> Overlap closures and termination of term rewriting systems. </title> <type> Report MIP-8922, </type> <institution> Universitat Passau, Passau, West Germany, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: An innermost derivation is one in which the redex chosen at every rewrite step contains no rewritable proper subterm. In particular, orthogonal systems are locally confluent and have no (non-trivial) overlays; the proposition for this case was shown by O'Donnell [29]. Geupel <ref> [13] </ref> showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. We give an alternate proof to the one in [14]. (See also Middeldorp [27].) It is similar in style to Geupel's proof [13] that forward closures <p> Geupel <ref> [13] </ref> showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. We give an alternate proof to the one in [14]. (See also Middeldorp [27].) It is similar in style to Geupel's proof [13] that forward closures suffice for showing termination of non-overlapping rewrite systems. Proof. <p> Proposition 3 (Guepel <ref> [13] </ref>). A non-overlapping rewrite system is terminating if, and only if, there are no infinite forward closures. 22 This extends the result in [5] for orthogonal systems. In general, though, a rewrite system need not terminate even if all its forward closures do [5].
Reference: [14] <author> Bernhard Gramlich. </author> <title> Relating innermost, weak, uniform and modular termination of term rewriting systems. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Proceedings of the Conference on Logic Programming and Automated Reasoning (St. Petersburg, Russia), volume 624 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 285-296, </pages> <address> Berlin, July 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The following is overlaying and locally confluent: x fi 0 ! 0 x + 0 ! x x + sy ! s (x + y) (8) Proposition 1 (Gramlich <ref> [14] </ref>). A locally confluent overlaying system is terminating if, and only if, innermost rewriting always leads to a normal form. <p> Geupel [13] showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. We give an alternate proof to the one in <ref> [14] </ref>. (See also Middeldorp [27].) It is similar in style to Geupel's proof [13] that forward closures suffice for showing termination of non-overlapping rewrite systems. Proof.
Reference: [15] <author> Bernhard Gramlich, </author> <type> personal communication. </type>
Reference-contexts: The following generalizes Proposition 5. Theorem 7. A non-erasing non-overlapping system is terminating if, and only if, it is normalizing. This is a corollary of Lemma 11. Gramlich <ref> [15] </ref> gives an independent proof of this. Theorem 8. A non-erasing non-overlapping system is terminating if, and only if, no right-hand side of an arbitrary strategy basic forward closure initiates an infinite derivation.
Reference: [16] <author> Sam Kamin and Jean-Jacques Levy. </author> <title> Two generalizations of the recursive path ordering. Unpublished note, </title> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> February </month> <year> 1980. </year> <month> 31 </month>
Reference-contexts: The notion of path ordering was extended by Kamin and Levy <ref> [16] </ref> to compare subterms lexicographically and to allow for a semantic component; see Dershowitz [7]. We use quasi-orderings (reflexive-transitive binary relations), rather than partial orderings, to prove termination of rewrite systems. <p> In other words, we require that consistently replacing function symbols in two terms with others of the same arity and with the same relative ordering has no effect 2 on the ordering of the two. The recursive path orderings <ref> [6, 16, 21] </ref> are syntactic; the Knuth-Bendix and polynomial orderings are not. <p> For example, consider the following contrived system for computing factorial in unary arithmetic (expanding on one in Kamin and Levy <ref> [16] </ref>): p (s (x)) ! x f act (s (x)) ! s (x) fi f act (p (s (x))) s (x) fi y ! (x fi y) + y x + s (y) ! s (x + y) : It would be nice were we able to use a natural interpretation, <p> Proof. The proof of this theorem is akin to Kamin and Levy <ref> [16] </ref> and uses a minimal counter-example argument. <p> In combination with s t, it must be that R k (IS (u)) ~ R k (IS (v)). Whereas we have only used lexicographic and multiset mappings in the general path ordering, in <ref> [16] </ref>, Kamin and Levy consider the more general case of orderings based on a mapping &gt; from well-founded quasi-orderings to well-founded quasi-orderings. They allow a component order t = ht 1 ; : : :; t n i and = &gt;, where &gt; recursively makes finitely many comparisons of subterms. <p> In general, one can successively refine the well-founded ordering of a homomorphism component. 4. Specific Path Orderings The following ordering is a special case of the general path ordering to which Theorem 2 applies: Semantic path ordering (Kamin and Levy <ref> [16] </ref>) 0 is the identity homomorphism; 0 is a well-founded ordering; 1 ; : : : ; n give a permutation of the subterms. For this ordering, one must separately insure that s ! t implies s 0 t. <p> For this ordering, one must separately insure that s ! t implies s 0 t. Indeed any terminating system can be (uninterestingly) proven terminating in this way <ref> [16] </ref>, by taking 0 to be the reflexive-transitive closure of !. <p> Extended path ordering (Dershowitz [6]) 0 extracts one of the immediate subterms; 1 extracts a multiset of the remaining immediate sub-terms. Lexicographic path ordering (Kamin and Levy <ref> [16] </ref>) 0 is a precedence; 1 ; : : :; n give a permutation of the subterms. <p> The next special case is not a simplification ordering, but the conditions of Theorem 3 hold for it as well. Value-preserving path ordering (Plaisted [31], Kamin and Levy <ref> [16] </ref>) is a value-preserving homomorphism and is a well-founded quasi-order; 0 is a precedence; 1 is applied to the first subterm and 1 is ; 2 is applied to the second subterm and 2 is ; and so forth. <p> The ordering interleaves precedences with recursive comparisons of sub-terms and thus is unlike either the semantic path ordering <ref> [16] </ref> or semantic labeling [36]. No semantic interpretation of the function symbols is required to prove termination in this example. If one were to use an ordering just based on the precedence 2 , all of the rules except for the seventh would be oriented in the appropriate direction.
Reference: [17] <author> Jan Willem Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, chapter 1, </volume> <pages> pages 1-117. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1992. </year>
Reference-contexts: The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and has important applications in abstract data type specifications, functional programming, symbolic computation, and automated deduction. For surveys of the theory of rewriting, see Der-showitz and Jouannaud [9], Klop <ref> [17] </ref> and Plaisted [33]. If no infinite sequences of rewrites are possible, a rewrite system is said to have the termination property. In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t).
Reference: [18] <author> Donald E. Knuth and P. B. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <editor> U. K., </editor> <booktitle> 1970. Reprinted in Automation of Reasoning 2, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. </pages> <month> 342-376 </month> <year> (1983). </year>
Reference-contexts: Simplification orderings are surveyed by Steinbach [34]; their well-foundedness is a consequence of Kruskal's Tree Theorem. (See Dershowitz [6].) A non-simple rewrite system (such as f f x ! f gf x) is one for which no simplification ordering will show termination. Knuth and Bendix <ref> [18] </ref> designed a particular class of well-orderings which assigns a weight to a term that is the sum of the weights of its constituent function symbols. Terms of equal weight and headed by the same symbol have their subterms compared lexicographically. <p> Indeed any terminating system can be (uninterestingly) proven terminating in this way [16], by taking 0 to be the reflexive-transitive closure of !. The following simplification orderings are special cases of the general path ordering for which the conditions of Theorem 3 hold: Knuth-Bendix ordering (Knuth and Bendix <ref> [18] </ref>) 0 gives the sum of (non-negative integer) "weights" of the function symbols appearing in a term; 0 is the ordering on the natural numbers; 1 gives a (total) precedence; 2 ; : : : ; n+1 give (a permutation of) the immediate subterms. 14 Polynomial path ordering (Lankford [19]) 0
Reference: [19] <author> Dallas S. Lankford. </author> <title> On proving term rewriting systems are Noetherian. </title> <institution> Memo MTP-3, Mathematics Department, Louisiana Tech. University, Rus-ton, LA, </institution> <month> May </month> <year> 1979. </year> <note> Revised October 1979. </note>
Reference-contexts: As suggested by Manna and Ness [24], it is often convenient to express reduction orderings as a homomorphism from terms to an algebra equipped with a well-founded ordering. The use, in particular, of polynomial interpretations which map terms into the natural numbers was developed by Lankford <ref> [19] </ref>. For a survey of termination methods, see Dershowitz [7]. fl This research was supported in part by the U. S. National Science Foundation under Grants CCR-90-07195 and CCR-90-24271. <p> Bendix [18]) 0 gives the sum of (non-negative integer) "weights" of the function symbols appearing in a term; 0 is the ordering on the natural numbers; 1 gives a (total) precedence; 2 ; : : : ; n+1 give (a permutation of) the immediate subterms. 14 Polynomial path ordering (Lankford <ref> [19] </ref>) 0 is a strict monotonic ho-momorphism with each f a polynomial with positive integer coefficients; 0 is the ordering on the natural numbers; 1 gives a precedence; 2 ; : : : ; n+1 give a permutation of the immediate subterms. <p> In cases where the code cannot make a determination, it will query the user for an authoritative answer. The part of the code that does this testing could be upgraded to provide heuristics such as those described in Lankford <ref> [19] </ref>, Ben Cherifa and Lescanne [4], or Steinbach and Zehnter [35]. Forward closures provide a more specialized method for showing termination, applicable to locally-confluent overlaying or right-linear systems. Special cases of interest are orthogonal and string rewrite systems which are terminating whenever their forward closures are.
Reference: [20] <author> Dallas S. Lankford and David R. Musser. </author> <title> A finite termination criterion. </title> <month> May </month> <year> 1978. </year>
Reference-contexts: The idea, first suggested by Lankford and Musser <ref> [20] </ref>, is to restrict application of rules to that part of a term created by previous rewrites. We can 21 define innermost (outermost) forward closures as those closures which are innermost (outermost) derivations. More generally, arbitrary redex choice strategies may be captured in an appropriate forward closure.
Reference: [21] <author> Pierre Lescanne. </author> <title> On the recursive decomposition ordering with lexicographical status and other related orderings. </title> <journal> J. Automated Reasoning, </journal> <volume> 6 </volume> <pages> 39-49, </pages> <year> 1990. </year>
Reference-contexts: In other words, we require that consistently replacing function symbols in two terms with others of the same arity and with the same relative ordering has no effect 2 on the ordering of the two. The recursive path orderings <ref> [6, 16, 21] </ref> are syntactic; the Knuth-Bendix and polynomial orderings are not. <p> Lexicographic path ordering (Kamin and Levy [16]) 0 is a precedence; 1 ; : : :; n give a permutation of the subterms. Recursive path ordering ("with status", Lescanne <ref> [21] </ref>) 0 is a total precedence; 1 ; : : : ; n give a permutation of the subterms or multisets of subterms, depending on the function symbol.
Reference: [22] <author> R. Lipton and L. Snyder. </author> <title> On the halting of tree replacement systems. </title> <booktitle> In Proceedings of the Conference on Theoretical Computer Science, </booktitle> <pages> pages 43-46, </pages> <address> Waterloo, Canada, </address> <month> August </month> <year> 1977. </year>
Reference-contexts: Syntactic "path" orderings (see Dershowitz [7]) work in this case, too. Lipton and Snyder <ref> [22] </ref> gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation.
Reference: [23] <author> Zohar Manna. </author> <title> Mathematical Theory of Computation. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1974. </year>
Reference-contexts: We also look at methods of proving termination of orthogonal (left-linear non-overlapping) systems, such as (2), and related issues in Sections 5 and 6. These may be compared with ordinary structural induction proofs used for recursively-defined functions; see Burstall [3] and Manna <ref> [23] </ref>. In particular, we employ the notion of restricting the set of forward closures (Dershowitz [5]) to those conforming with some particular rewrite strategy, and give conditions under which the restricted set suffices. 3 2. The General Path Ordering The general path ordering combines mappings from terms to well-founded sets.
Reference: [24] <author> Zohar Manna and Steven Ness. </author> <title> On the termination of Markov algorithms. </title> <booktitle> In Proceedings of the Third Hawaii International Conference on System Science, </booktitle> <pages> pages 789-792, </pages> <address> Honolulu, HI, </address> <month> January </month> <year> 1970. </year>
Reference-contexts: In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t). As suggested by Manna and Ness <ref> [24] </ref>, it is often convenient to express reduction orderings as a homomorphism from terms to an algebra equipped with a well-founded ordering. The use, in particular, of polynomial interpretations which map terms into the natural numbers was developed by Lankford [19].
Reference: [25] <author> Ursula Martin. </author> <title> A geometrical approach to multiset orderings. </title> <journal> Information Processing Letters, </journal> <volume> 67 </volume> <pages> 37-54, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: They allow a component order t = ht 1 ; : : :; t n i and = &gt;, where &gt; recursively makes finitely many comparisons of subterms. In particular, one can use weighted multisets, as in Martin <ref> [25] </ref>. Theorem 4 (Incrementality).
Reference: [26] <author> Robert McNaughton. </author> <title> The uniform halting problem for one-rule semi-thue systems. </title> <type> Technical Report 94-18, </type> <institution> Rensselaer, Department of Computer Science, Rensselaer Polytechnic Institute,Troy, </institution> <address> New York 12180-3590, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Other solutions to this problem are due to Geser [11] and Bittar [2]. See also McNaughton <ref> [26] </ref> who considers termination of semi-Thue systems such as this example. 29 7. Conclusion The general path ordering we have defined provides a powerful general purpose tool for demonstrating termination of rewrite systems.
Reference: [27] <author> Aart Middeldorp. </author> <title> A simple proof to a result of bernhard gramlich. Unpublished note, </title> <month> February </month> <year> 1994. </year>
Reference-contexts: Geupel [13] showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. We give an alternate proof to the one in [14]. (See also Middeldorp <ref> [27] </ref>.) It is similar in style to Geupel's proof [13] that forward closures suffice for showing termination of non-overlapping rewrite systems. Proof.
Reference: [28] <author> M. H. A. Newman. </author> <title> On theories with a combinatorial definition of `equivalence'. </title> <journal> Annals of Mathematics, </journal> <volume> 43(2) </volume> <pages> 223-243, </pages> <year> 1942. </year>
Reference-contexts: If a term has no frontier subterms, then it must be terminating. Conversely, if a term has a frontier subterm, it is non-terminating. For a locally confluent rewrite system, any terminating term t has a unique normal form ^ t by Newman's Lemma <ref> [28] </ref>.
Reference: [29] <author> Michael J. O'Donnell. </author> <title> Computing in systems described by equations, </title> <booktitle> volume 58 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference-contexts: An innermost derivation is one in which the redex chosen at every rewrite step contains no rewritable proper subterm. In particular, orthogonal systems are locally confluent and have no (non-trivial) overlays; the proposition for this case was shown by O'Donnell <ref> [29] </ref>. Geupel [13] showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. <p> Non-erasing Systems We focus now on non-erasing rewrite systems. Recall that a system is non-erasing if any variable on the left-hand side of a rule is also on the right-hand side. Proposition 5 (O'Donnell <ref> [29] </ref>). A non-erasing orthogonal system is terminating if, and only if, it is normalizing (every term has a normal form).
Reference: [30] <author> David A. Plaisted. </author> <title> Well-founded orderings for proving termination of systems of rewrite rules. </title> <type> Report R-78-932, </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> July </month> <year> 1978. </year>
Reference-contexts: One cannot use a syntactic simplification ordering like the simple path ordering <ref> [30] </ref>, since the first rule is embedding. In fact, we must combine termination with the semantics (f (x) = x), as one must for the functional proof.
Reference: [31] <author> David A. Plaisted. </author> <type> Personal communication, </type> <institution> 1979. Department of Computer Science, University of Illinois. </institution>
Reference-contexts: The next special case is not a simplification ordering, but the conditions of Theorem 3 hold for it as well. Value-preserving path ordering (Plaisted <ref> [31] </ref>, Kamin and Levy [16]) is a value-preserving homomorphism and is a well-founded quasi-order; 0 is a precedence; 1 is applied to the first subterm and 1 is ; 2 is applied to the second subterm and 2 is ; and so forth.
Reference: [32] <author> David A. Plaisted. </author> <title> Polynomial time termination and constraint satisfaction tests. </title> <editor> In Claude Kirchner, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Rewriting Techniques and Applications, </booktitle> <pages> pages 405-420, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1993. </year> <title> Vol. </title> <booktitle> 690 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer , Berlin. </publisher>
Reference-contexts: , each s i is a frontier subterm of u i , and s i ! fl below top s 0 i ! at top u i+1 [s i+1 ] q i+1 ; where p i+1 = p i q i+1 . (This is a constricting derivation a la Plaisted <ref> [32] </ref>, making the proof a little simpler.) Notice that each redex in the infinite derivation is either terminating (those below p i in s i ) or on the frontier (at p i in s i ).
Reference: [33] <author> David A. Plaisted. </author> <title> Term rewriting systems. </title> <editor> In D. M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 4, chapter 2. </volume> <publisher> Oxford University Press, Oxford, </publisher> <year> 1993. </year> <note> To appear. 32 </note>
Reference-contexts: The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and has important applications in abstract data type specifications, functional programming, symbolic computation, and automated deduction. For surveys of the theory of rewriting, see Der-showitz and Jouannaud [9], Klop [17] and Plaisted <ref> [33] </ref>. If no infinite sequences of rewrites are possible, a rewrite system is said to have the termination property. In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t).
Reference: [34] <author> Joachim Steinbach. </author> <title> Simplification orderings history of results. </title> <note> to be sub-mitted. </note>
Reference-contexts: Simplification orderings are surveyed by Steinbach <ref> [34] </ref>; their well-foundedness is a consequence of Kruskal's Tree Theorem. (See Dershowitz [6].) A non-simple rewrite system (such as f f x ! f gf x) is one for which no simplification ordering will show termination.
Reference: [35] <author> Joachim Steinbach and Michael Zehnter. </author> <title> Vade-mecum of polynomial order-ings. </title> <type> Report SR-90-03, </type> <institution> Fachbereich Informatik, Universitat Kaiserslautern, Kaiserslautern, West Germany, </institution> <year> 1990. </year>
Reference-contexts: Recursive path ordering ("with status", Lescanne [21]) 0 is a total precedence; 1 ; : : : ; n give a permutation of the subterms or multisets of subterms, depending on the function symbol. Extended Knuth-Bendix ordering (Dershowitz [6], Steinbach and Zehnter <ref> [35] </ref>) 0 is a monotonic interpretation; 1 is a precedence; 2 ; : : : ; n+1 give the subterms in order, permuted, or multisets of immediate subterms, depending on the function symbol. <p> In cases where the code cannot make a determination, it will query the user for an authoritative answer. The part of the code that does this testing could be upgraded to provide heuristics such as those described in Lankford [19], Ben Cherifa and Lescanne [4], or Steinbach and Zehnter <ref> [35] </ref>. Forward closures provide a more specialized method for showing termination, applicable to locally-confluent overlaying or right-linear systems. Special cases of interest are orthogonal and string rewrite systems which are terminating whenever their forward closures are.
Reference: [36] <author> Hans Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <type> Technical Report RUU-CS-92-38, </type> <institution> Utecht University, </institution> <address> Utrecht, the Netherlands, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: The ordering interleaves precedences with recursive comparisons of sub-terms and thus is unlike either the semantic path ordering [16] or semantic labeling <ref> [36] </ref>. No semantic interpretation of the function symbols is required to prove termination in this example. If one were to use an ordering just based on the precedence 2 , all of the rules except for the seventh would be oriented in the appropriate direction.
Reference: [37] <author> Hans Zantema, </author> <type> personal communication. 33 </type>
Reference-contexts: Terms of the form f m 0 derive 0 in m steps. Since no right-hand side admits a non-terminating rewrite sequence, the system is terminating. System 6 can be shown terminating via similar reasoning (though the expressions for the forward closures are more complicated). Zantema's Problem <ref> [37] </ref> is to prove termination of the following one-rule string-rewriting system: 1100 ! 000111; (17) corresponding to the term-rewriting rule 1100x ! 000111x. (Theorem 7 applies as well, since string rewriting systems are non-erasing and this rule is non-overlapping.) First note that for any term of the form ff00fi, if ff00
References-found: 37

