URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/cs-97-310.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: 
Email: E-mail chow@cs.toronto.edu and enright@cs.toronto.edu  
Title: Distributed parallel shooting for BVODEs  
Author: K.L. Chow and W.H. Enright 
Keyword: Distributed parallel algorithm, boundary value problems, multiple shooting  
Address: Toronto  
Affiliation: Department of Computer Science, University of  
Abstract: Many important scientific problems can be formulated as systems of ordinary differential equations with two-point boundary value constraints (BVODE). Multiple shooting is one of the most widely used numerical techniques for solving BVODE problems. In this work, we present a new distributed parallel numerical algorithm for BVODEs which is based on multiple shooting. We investigate the numerical stability of this new distributed algorithm and identify difficulties that can arise. We propose a new parallel iterative refinement scheme to cope with some specific numerical difficulties identified in our investigation. Computational experience is presented to demonstrate the potential effectiveness of our approach. 
Abstract-found: 1
Intro-found: 1
Reference: [AC91] <author> U.M. Ascher and S.Y.P. Chan. </author> <title> On parallel methods for boundary value ODEs. </title> <journal> Computing, </journal> <volume> 46 </volume> <pages> 1-17, </pages> <year> 1991. </year>
Reference-contexts: Thus, if the number of subintervals is large, parallel computation should have a signification influence on the processing time of some components of 1 an algorithm based on multiple shooting. This has been the focus on a number of recent investigations <ref> [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] </ref> which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in [JP92, ACR + ]. <p> The size of the linear systems arising from the application of multiple shooting to the underlying BVODE is mn. The current state of development of parallel solution of such linear systems makes use of an appropriate variant of an odd-even block cyclic reduction technique, see <ref> [AC91, JP92, Wri92] </ref>. An odd-even cyclic reduction technique or a variant can solve the linear system in O (log m) parallel steps using O (m) processors and each parallel step requires O (n 3 ) floating point operations (flops). <p> i + L i ds i1 ; i = 1; ; m 1: The proof follows using a straightforward induction argument. fi Referring to Theorem 3.2, the number is a conditioning constant of the BVODE and the number K is a constant related to the condition number of J (see <ref> [DB82, AC91] </ref>) and the constant K m1 reflects the condition of the associated initial value problems. <p> ODEs BCs y 0 y 0 where = 20; 50; 80 Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0 True Solution y (x) = e 1+e e x cos 2 (x) Problem A.14 posses one decaying and one growing solution components and can be found in <ref> [AC91, JP92] </ref>. This problem will become more difficult as increases.
Reference: [ACR + ] <author> P. Amodio, J.R. Cash, G. Roussos, R.W. Wright, G. Fairweather, I. Gladwell, G.L.Kraut, and M. Paprzycki. </author> <title> Almost block diagonal linear systems: Sequential and parallel solution techniques, </title> <journal> and applications. </journal> <note> To appear in SIAM Review. </note>
Reference-contexts: This has been the focus on a number of recent investigations [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in <ref> [JP92, ACR + ] </ref>. A common difficulty discussed in the above investigations is that a fast and stable parallel solution of the large linear systems (that arise when using multiple shooting) is nontrivial.
Reference: [AMR88] <author> U.M. Ascher, R.M.M. Mattheij, and R.D. Rusell. </author> <title> Numerical solution of boundary value problems for ordinary differential equations. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: By taking all of these costs into account, a single BN iteration on a sequential machine requires T I (m; n) + m (n 3 + O (n 2 )) f lops: We observe that a Block-Newton iteration is similar to an iteration of the compactification algorithm <ref> [AMR88] </ref> or an iteration of the condensation algorithm [DB82]. We now proceed to discuss a parallelization of this BN iteration. This approach employs parallel prefix and fan-in associative operations ([KR] and [J 92]). <p> However, most of our work can easily be extended to a shared memory machine model. 19 A BVODE Problems A set of BVODE problems were chosen from the literatures <ref> [Ren76, MS88, EHL75, Hol64, KM93, AMR88, DB82] </ref>. Some problems were created by modifying the existing BVODE problems. Modifications were made by either coupling with different boundary conditions or coupling two or more BVODEs to form a larger BVODEs for testing purposes. <p> (1) 1:0 = 0:0 5 = (t3) where t = s = 0:2 Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0; y 3 (x) = 0:0; y 4 (x) = 0:0; y 5 (x) = 0:0 A.10 Fluid injection problem Problem A.10 can be found in <ref> [AMR88] </ref>. <p> y 7 (0) = 0:0 8 = 0:7y 1 y 8 y 7 (1) 1:0 = 0:0 where R = 10:0 Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0; y 3 (x) = 0:0; y 4 (x) = 0:0; A.11 Problem A.11 can be found in <ref> [AMR88] </ref>.
Reference: [BF90] <author> K.R. Bennett and G. Fairweather. </author> <title> Pcolnew : A parallel boundary-value ODE code for shared-memory machines. </title> <type> Technical Report CCS-90-8, </type> <institution> University of Kentucky, Center for Computational Sciences, </institution> <year> 1990. </year>
Reference-contexts: Thus, if the number of subintervals is large, parallel computation should have a signification influence on the processing time of some components of 1 an algorithm based on multiple shooting. This has been the focus on a number of recent investigations <ref> [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] </ref> which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in [JP92, ACR + ].
Reference: [DB82] <author> P. Deuflhard and G. Bader. </author> <title> Multiple shooting techniques revisited. </title> <type> Technical Report Preprint 163, </type> <institution> Universitat Heidelberg, Institut fur Angewandte Mathematik, </institution> <address> Im Neuenheimer Feld 293, 6900 Heidelberg, Federal Republic of Germany, </address> <month> June </month> <year> 1982. </year>
Reference-contexts: By restricting the length of mesh intervals, one can control the size of k L i k and at the same time avoid numerical singular blocks. However, the number of mesh intervals and the corresponding increase in storage may be unacceptable. In <ref> [DB82] </ref>, it has been shown that there are BVODE problems which are comparatively well-conditioned even though the corresponding initial value problems are ill-conditioned. These well-conditioned BVODEs exhibit both rapidly growing and decaying solution components. <p> costs into account, a single BN iteration on a sequential machine requires T I (m; n) + m (n 3 + O (n 2 )) f lops: We observe that a Block-Newton iteration is similar to an iteration of the compactification algorithm [AMR88] or an iteration of the condensation algorithm <ref> [DB82] </ref>. We now proceed to discuss a parallelization of this BN iteration. This approach employs parallel prefix and fan-in associative operations ([KR] and [J 92]). <p> i + L i ds i1 ; i = 1; ; m 1: The proof follows using a straightforward induction argument. fi Referring to Theorem 3.2, the number is a conditioning constant of the BVODE and the number K is a constant related to the condition number of J (see <ref> [DB82, AC91] </ref>) and the constant K m1 reflects the condition of the associated initial value problems. <p> However, most of our work can easily be extended to a shared memory machine model. 19 A BVODE Problems A set of BVODE problems were chosen from the literatures <ref> [Ren76, MS88, EHL75, Hol64, KM93, AMR88, DB82] </ref>. Some problems were created by modifying the existing BVODE problems. Modifications were made by either coupling with different boundary conditions or coupling two or more BVODEs to form a larger BVODEs for testing purposes. <p> (x) = 0:0; y 4 (x) = 0:0; y 9 (x) = 0:0; y 10 (x) = 0:0; y 11 (x) = 0:0; y 12 (x) = 0:0; 24 A.13 Artificial test problem The artificial BVODE problem possesses both rapidly decaying and growing solution components and can be found in <ref> [DB82] </ref>. This problem is considered to be difficult for = 20 and will become more difficult as increases.
Reference: [dHM83] <author> F.R. de Hoog and R.M.M. Mattheij. </author> <title> On dichotomy and well-conditioning in BVP. </title> <type> Technical Report Report 8356, </type> <institution> Katholieke Universiteit Nijmegen, Department of Maths., </institution> <year> 1983. </year>
Reference-contexts: In many cases, these numerical difficulties can be attributed to the conditioning of the linear system arising in the Newton iteration. Even for well-conditioned BVODE problems, the blocks L i may possess both decaying and growing solution components, see <ref> [dHM83, Mat82] </ref>. If the length of a mesh interval [x i1 ; x i ] is large, one can either incur overflow in the computation of L i or the columns can become numerically dependent.
Reference: [EHL75] <author> W.H. Enright, T.E. Hull, and B. Lindberg. </author> <title> Comparing numerical methods for stiff system of O.D.E:s. </title> <journal> BIT, </journal> <volume> 15 </volume> <pages> 10-48, </pages> <year> 1975. </year>
Reference-contexts: However, most of our work can easily be extended to a shared memory machine model. 19 A BVODE Problems A set of BVODE problems were chosen from the literatures <ref> [Ren76, MS88, EHL75, Hol64, KM93, AMR88, DB82] </ref>. Some problems were created by modifying the existing BVODE problems. Modifications were made by either coupling with different boundary conditions or coupling two or more BVODEs to form a larger BVODEs for testing purposes. <p> y 1 ) y 0 y 0 Initial Estimate y 1 (x) = 1:0; y 2 (x) = 1:0; y 3 (x) = 4:5x 2 + 8:91x + 1:0; y 4 (x) = 10:0; 21 A.6 Chemistry problem Problem A.6 is an initial value problem which can be found in <ref> [EHL75] </ref>.
Reference: [HEJ76] <author> T.E. Hull, W.H. Enright, and K.R. Jackson. </author> <title> User's guide for DVERK a subroutine for solving non-stiff ODE's. </title> <type> Technical Report 100, </type> <institution> Department of Computer Science, University of Toronto, Toronto, Canada, </institution> <year> 1976. </year>
Reference-contexts: p Serial bn-bvpms dverk Block-Newton fi Serial gir-bn-bvpms dverk Block-Newton p Serial pibn-bvpms dverk Block-Newton fi Parallel pbn-bvpms dverk Block-Newton fi Parallel gir-pbn-bvpms dverk Block-Newton p Parallel Table 1: Description of Algorithms value problem solver. dverk is a routine based on Verner's fifth and sixth order pair of Runge-Kutta formulas <ref> [HEJ76] </ref> for finding approximations to the solution of an initial value problem. The prefix 'gir' is used to distinguish the algorithms that apply a single step of iterative refinement. All implementations are written in Fortran in double precision.
Reference: [Hig96] <author> N. J. Higham. </author> <title> Accuracy and stabilty of numerical algorithms. </title> <publisher> SIAM Press, </publisher> <year> 1996. </year>
Reference-contexts: The use of iterative refinement at working precision [JW77, Ske80] has been advocated and shown to be effective. One iterative refinement step will usually be enough to improve the accuracy of the computed solution, see <ref> [Hig96] </ref>. Now, we proceed to derive a working precision iterative refinement scheme that can be applied in 12 our parallel approach. Consider the solution of the linear system, J S l = .
Reference: [Hol64] <author> J. F. Holt. </author> <title> Numerical soluiton of nonlinear two-point boundary problems by finite difference methods. </title> <journal> CACM, </journal> <volume> 7(6) </volume> <pages> 366-373, </pages> <year> 1964. </year>
Reference-contexts: However, most of our work can easily be extended to a shared memory machine model. 19 A BVODE Problems A set of BVODE problems were chosen from the literatures <ref> [Ren76, MS88, EHL75, Hol64, KM93, AMR88, DB82] </ref>. Some problems were created by modifying the existing BVODE problems. Modifications were made by either coupling with different boundary conditions or coupling two or more BVODEs to form a larger BVODEs for testing purposes. <p> = y 3 + 100:0 y 1 y 2 y 3 (0) 1:0 = 0:0 4 = y 2 Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0; y 3 (x) = 0:0; y 4 (x) = 0:0 A.8 Hydrodynamic problem Problem A.8 can be found in <ref> [Hol64] </ref>.
Reference: [J 92] <author> J. JaJa. </author> <title> An introduction to parallel algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: We now proceed to discuss a parallelization of this BN iteration. This approach employs parallel prefix and fan-in associative operations ([KR] and <ref> [J 92] </ref>). Other existing approaches are discussed in [Wri92, Wri94] and [JP92]. 3.2 Exploiting parallelization We observe that the BN iteration results in first-order linear recurrences involving vector and matrix operations. We realize that such linear recurrences can be solved effectively in parallel using the prefix operation, see [J 92]. <p> ([KR] and <ref> [J 92] </ref>). Other existing approaches are discussed in [Wri92, Wri94] and [JP92]. 3.2 Exploiting parallelization We observe that the BN iteration results in first-order linear recurrences involving vector and matrix operations. We realize that such linear recurrences can be solved effectively in parallel using the prefix operation, see [J 92]. Referring to the Algorithm 3.1, we must first construct B and 0 in Step 3 before we can determine s l 0 in Step 4 and solve a linear recurrence for s l i in Step 5.
Reference: [JDS83] <author> Jr J.E. Dennis and R.B. Schnabel. </author> <title> Numerical methods for unconstrained opti-miziation and nonlinear equations. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1983. </year>
Reference-contexts: There are two common ways to cope with this difficulty. One is to 4 use a continuation technique [Kel92]. Another alternative is to use a more robust nonlinear equation solver such as damped-Newton iteration <ref> [JDS83] </ref>. However, we will not address this difficulty in this investigation. 3 Distributed parallel shooting In this section, we present a distributed parallel implementation of the multiple shooting algorithm described in the previous section. Our implementation is based upon efficient parallel prefix and fan-in associative operations.
Reference: [Jep] <author> A.D. Jepson. </author> <title> An solver for matrices with banded, multi-value structure that uses Gaussian elimination with column pivoting. </title> <type> Private Communication. 55 </type>
Reference-contexts: We will refer to our serial modification of the multiple shooting algorithm as bn-bvpms . Recall that applying these variants of the Newton iteration will reduce to solving systems of linear equations perhaps of different sizes. j-bvpms employs the Jepson's banded linear system solver <ref> [Jep] </ref> to directly solve the almost block bidiagonal system, J S l = , within each Newton iteration. This solution technique is designed to be as stable as possible.
Reference: [JP92] <author> K.R. Jackson and R.N. Pancer. </author> <title> The parallel solution of ABD systems arising in numerical methods for BVPs for ODEs. </title> <type> Technical Report 255/91, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1992. </year>
Reference-contexts: Thus, if the number of subintervals is large, parallel computation should have a signification influence on the processing time of some components of 1 an algorithm based on multiple shooting. This has been the focus on a number of recent investigations <ref> [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] </ref> which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in [JP92, ACR + ]. <p> This has been the focus on a number of recent investigations [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in <ref> [JP92, ACR + ] </ref>. A common difficulty discussed in the above investigations is that a fast and stable parallel solution of the large linear systems (that arise when using multiple shooting) is nontrivial. <p> The size of the linear systems arising from the application of multiple shooting to the underlying BVODE is mn. The current state of development of parallel solution of such linear systems makes use of an appropriate variant of an odd-even block cyclic reduction technique, see <ref> [AC91, JP92, Wri92] </ref>. An odd-even cyclic reduction technique or a variant can solve the linear system in O (log m) parallel steps using O (m) processors and each parallel step requires O (n 3 ) floating point operations (flops). <p> We now proceed to discuss a parallelization of this BN iteration. This approach employs parallel prefix and fan-in associative operations ([KR] and [J 92]). Other existing approaches are discussed in [Wri92, Wri94] and <ref> [JP92] </ref>. 3.2 Exploiting parallelization We observe that the BN iteration results in first-order linear recurrences involving vector and matrix operations. We realize that such linear recurrences can be solved effectively in parallel using the prefix operation, see [J 92]. <p> ODEs BCs y 0 y 0 where = 20; 50; 80 Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0 True Solution y (x) = e 1+e e x cos 2 (x) Problem A.14 posses one decaying and one growing solution components and can be found in <ref> [AC91, JP92] </ref>. This problem will become more difficult as increases. <p> + sin (2!x); a 22 = 2 cos (2!x) Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0 True Solution y 1 (x) = e x ; y 2 (x) = e x Problem A.15 possesses both decaying and growing solution components and can be found in <ref> [Wri94, JP92] </ref>. <p> 1 (x) = 0:0; y 2 (x) = 0:0; y 3 (x) = 0:0 True Solution y 1 (x) = e x ; y 2 (x) = e x ; y 3 (x) = e x Problem A.17 possesses both decaying and growing solution components and can be found in <ref> [Wri94, JP92] </ref>. <p> True Solution y 1 (x) = e x ; y 2 (x) = e x ; y 3 (x) = e x ; y 4 (x) = e x ; y 5 (x) = e x Problem A.18 possesses both decaying and growing solution components and can be found in <ref> [JP92] </ref>.
Reference: [JW77] <author> M. Jankowski and H. Wozniakowski. </author> <title> Iterative refinement implies numerical stability. </title> <journal> BIT, </journal> <volume> 17 </volume> <pages> 303-311, </pages> <year> 1977. </year>
Reference-contexts: In floating point arithmetic, the computation of r can be done in higher precision. However, it is also common to carry out a single refinement step at the standard working precision. The use of iterative refinement at working precision <ref> [JW77, Ske80] </ref> has been advocated and shown to be effective. One iterative refinement step will usually be enough to improve the accuracy of the computed solution, see [Hig96]. Now, we proceed to derive a working precision iterative refinement scheme that can be applied in 12 our parallel approach.
Reference: [Kel92] <author> H.B. Keller. </author> <title> Numerical methods for two-point boundary-value problems. </title> <publisher> Dover, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: BVODEs have many important scientific applications and arise in such diverse areas as the modeling of semiconductor devices and the simulation of the re-entry of space vehicles from orbit. Multiple shooting <ref> [Kel92] </ref> is one of the most widely used numerical techniques for solving BVODE problems. It is based on the idea of reformulating the problem as a sequence of initial value problems with continuity constraints. <p> There are two common ways to cope with this difficulty. One is to 4 use a continuation technique <ref> [Kel92] </ref>. Another alternative is to use a more robust nonlinear equation solver such as damped-Newton iteration [JDS83]. However, we will not address this difficulty in this investigation. 3 Distributed parallel shooting In this section, we present a distributed parallel implementation of the multiple shooting algorithm described in the previous section.
Reference: [KGGK94] <author> V. Kumar, A. Grama, A. Gupta, and G. Karypis. </author> <title> Intoduction to parallel computing : Design and analysis of algorithms. </title> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1994. </year>
Reference-contexts: In order to study the communication complexity of the PBN iteration, we need to know the underlying communication routing technique used in the distributed memory machine model. Suppose that the store-and-forward routing technique <ref> [KGGK94] </ref> is employed.
Reference: [KM93] <author> M.E. Kramer and R.M.M. Matheij. </author> <title> Application of global methods in parallel shooting. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 30(6) </volume> <pages> 1723-1739, </pages> <year> 1993. </year>
Reference-contexts: However, most of our work can easily be extended to a shared memory machine model. 19 A BVODE Problems A set of BVODE problems were chosen from the literatures <ref> [Ren76, MS88, EHL75, Hol64, KM93, AMR88, DB82] </ref>. Some problems were created by modifying the existing BVODE problems. Modifications were made by either coupling with different boundary conditions or coupling two or more BVODEs to form a larger BVODEs for testing purposes. <p> = 0:0 where t = 0:1; s = 0:2 Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0; y 3 (x) = 0:0; y 4 (x) = 0:0; y 5 (x) = 0:0 A.9 Problem A.9 is a modification of Problem A.8 and can be found in <ref> [KM93] </ref>.
Reference: [KR] <author> R.M. Karp and V. Ramachandran. </author> <title> A survey of parallel algorithms for shared-memory machines. </title> <type> Technical Report EECS CSD Report 88/408, </type> <institution> Computer Science Division, UC Berkeley, California, </institution> <note> 1988 (also appeared in Handbook of Theortical Computer Science : Volumn A : Algorithm and complexity, MIT press, </note> <year> 1990). </year>
Reference: [Len88] <author> M. Lentini. </author> <title> The potential for parallel algorithms in ordinary differential equations : boundary value problems. </title> <type> Technical Report 5/88, </type> <institution> Lab. Nacional de Computacao Cientifica LNCC, Rio de Janeiro, </institution> <year> 1988. </year>
Reference-contexts: Thus, if the number of subintervals is large, parallel computation should have a signification influence on the processing time of some components of 1 an algorithm based on multiple shooting. This has been the focus on a number of recent investigations <ref> [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] </ref> which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in [JP92, ACR + ].
Reference: [Mat82] <author> R.M.M. Mattheij. </author> <title> The conditioning of linear boundary value problems. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 19(5) </volume> <pages> 963-978, </pages> <year> 1982. </year>
Reference-contexts: In many cases, these numerical difficulties can be attributed to the conditioning of the linear system arising in the Newton iteration. Even for well-conditioned BVODE problems, the blocks L i may possess both decaying and growing solution components, see <ref> [dHM83, Mat82] </ref>. If the length of a mesh interval [x i1 ; x i ] is large, one can either incur overflow in the computation of L i or the columns can become numerically dependent.
Reference: [MS88] <author> R.M.M. Mattheij and G.W.M. Staarink. </author> <title> MUS : A package for solving two-point BVPs. </title> <type> Technical report, </type> <institution> Economisch Institunt, Thomas van Aquinostraat 6, </institution> <address> 6526, GD Nijmegen, The Netherlands, </address> <year> 1988. </year>
Reference-contexts: However, most of our work can easily be extended to a shared memory machine model. 19 A BVODE Problems A set of BVODE problems were chosen from the literatures <ref> [Ren76, MS88, EHL75, Hol64, KM93, AMR88, DB82] </ref>. Some problems were created by modifying the existing BVODE problems. Modifications were made by either coupling with different boundary conditions or coupling two or more BVODEs to form a larger BVODEs for testing purposes. <p> 1 x 2 y 3 + y 2 kx y 2 where k = 1:0 and R = 0:5 Initial Estimate y 1 (x) = x (15:0x) 50:0 ; y 3 (x) = Rx 10:0 A.2 MUS test problem Problem A.2 can be found in the software package MUS by <ref> [MS88] </ref>.
Reference: [PG90] <author> M. Paprzycki and I. Gladwell. </author> <title> A parallel chopping algorithm for ODE boundary value problem. </title> <type> Technical Report SMU MATH REPT 90-9, </type> <institution> Department of Mathematics, South Methodist University, </institution> <year> 1990. </year>
Reference-contexts: Thus, if the number of subintervals is large, parallel computation should have a signification influence on the processing time of some components of 1 an algorithm based on multiple shooting. This has been the focus on a number of recent investigations <ref> [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] </ref> which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in [JP92, ACR + ].
Reference: [Ren76] <author> P. Rentrop. </author> <title> Numerical solution of the singular Ginzburg-Landau equations by multiple shooting. </title> <journal> Computing, </journal> <volume> 16 </volume> <pages> 61-67, </pages> <year> 1976. </year>
Reference-contexts: However, most of our work can easily be extended to a shared memory machine model. 19 A BVODE Problems A set of BVODE problems were chosen from the literatures <ref> [Ren76, MS88, EHL75, Hol64, KM93, AMR88, DB82] </ref>. Some problems were created by modifying the existing BVODE problems. Modifications were made by either coupling with different boundary conditions or coupling two or more BVODEs to form a larger BVODEs for testing purposes. <p> All BVODE problems have been converted to their equivalent first-order forms. The high-order forms of BVODE problems can be found in the original source of references. A.1 Superconductivity problem The Ginzburg-Landau equations can be found in <ref> [Ren76] </ref>.
Reference: [Ske80] <author> R.D. Skeel. </author> <title> Iterative refinement implies numerical stability for Gaussian elimination. </title> <journal> Mathematics of Computation, </journal> <volume> 35(151) </volume> <pages> 817-832, </pages> <year> 1980. </year>
Reference-contexts: In floating point arithmetic, the computation of r can be done in higher precision. However, it is also common to carry out a single refinement step at the standard working precision. The use of iterative refinement at working precision <ref> [JW77, Ske80] </ref> has been advocated and shown to be effective. One iterative refinement step will usually be enough to improve the accuracy of the computed solution, see [Hig96]. Now, we proceed to derive a working precision iterative refinement scheme that can be applied in 12 our parallel approach.
Reference: [WP90] <author> S. Wright and V. Pereyra. </author> <title> Adaptation of a two-point boundary value problem solver to a vector-multiprocessor environment. </title> <journal> SIAM J. Sci. Statist. Comput., </journal> <volume> 11 </volume> <pages> 425-449, </pages> <year> 1990. </year>
Reference-contexts: Thus, if the number of subintervals is large, parallel computation should have a signification influence on the processing time of some components of 1 an algorithm based on multiple shooting. This has been the focus on a number of recent investigations <ref> [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] </ref> which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in [JP92, ACR + ].
Reference: [Wri92] <author> S. Wright. </author> <title> Stable parallel algorithms for two-point boundary value problems. </title> <journal> SIAM J. Sci. Statist. Comput., </journal> <volume> 13 </volume> <pages> 742-764, </pages> <year> 1992. </year>
Reference-contexts: Thus, if the number of subintervals is large, parallel computation should have a signification influence on the processing time of some components of 1 an algorithm based on multiple shooting. This has been the focus on a number of recent investigations <ref> [Len88, WP90, PG90, BF90, AC91, JP92, Wri92] </ref> which have been concerned with finding new parallel numerical algorithms for BVODEs. Surveys discussing existing parallel algorithms for BVODE problems can be found in [JP92, ACR + ]. <p> The size of the linear systems arising from the application of multiple shooting to the underlying BVODE is mn. The current state of development of parallel solution of such linear systems makes use of an appropriate variant of an odd-even block cyclic reduction technique, see <ref> [AC91, JP92, Wri92] </ref>. An odd-even cyclic reduction technique or a variant can solve the linear system in O (log m) parallel steps using O (m) processors and each parallel step requires O (n 3 ) floating point operations (flops). <p> We now proceed to discuss a parallelization of this BN iteration. This approach employs parallel prefix and fan-in associative operations ([KR] and [J 92]). Other existing approaches are discussed in <ref> [Wri92, Wri94] </ref> and [JP92]. 3.2 Exploiting parallelization We observe that the BN iteration results in first-order linear recurrences involving vector and matrix operations. We realize that such linear recurrences can be solved effectively in parallel using the prefix operation, see [J 92].
Reference: [Wri94] <author> S. Wright. </author> <title> Stable parallel elimination for boundary value ODEs. </title> <journal> Numerische Mathematik, </journal> <volume> 67(4) </volume> <pages> 521-535, </pages> <year> 1994. </year> <month> 57 </month>
Reference-contexts: We now proceed to discuss a parallelization of this BN iteration. This approach employs parallel prefix and fan-in associative operations ([KR] and [J 92]). Other existing approaches are discussed in <ref> [Wri92, Wri94] </ref> and [JP92]. 3.2 Exploiting parallelization We observe that the BN iteration results in first-order linear recurrences involving vector and matrix operations. We realize that such linear recurrences can be solved effectively in parallel using the prefix operation, see [J 92]. <p> + sin (2!x); a 22 = 2 cos (2!x) Initial Estimate y 1 (x) = 0:0; y 2 (x) = 0:0 True Solution y 1 (x) = e x ; y 2 (x) = e x Problem A.15 possesses both decaying and growing solution components and can be found in <ref> [Wri94, JP92] </ref>. <p> 1 (x) = 0:0; y 2 (x) = 0:0; y 3 (x) = 0:0 True Solution y 1 (x) = e x ; y 2 (x) = e x ; y 3 (x) = e x Problem A.17 possesses both decaying and growing solution components and can be found in <ref> [Wri94, JP92] </ref>.
References-found: 28

