URL: http://www.cs.brown.edu/research/graphics/research/pub/papers/sig91-object.ps
Refering-URL: http://www.cs.wustl.edu/~pmh/research.html
Root-URL: 
Title: An Object-Oriented Framework for the Integration of Interactive Animation Techniques object-oriented architecture uses delegation hierarchies
Author: Robert C. Zeleznik, D. Brookshire Conner, Matthias M. Wloka, Daniel G. Aliaga, Nathan T. Huang, Philip M. Hubbard, Brian Knep, Henry Kaufman, John F. Hughes and Andries van Dam 
Keyword: coherency. CR Categories and Subject Descriptors I.3.2 Graphics Systems; I.3.4 Graphics Utilities, Application Packages, Graphics Packages; I.3.7 Three-Dimensional Graphics and Realism, Animation; I.6.3 Simulation and Modeling Applications; D.3.3 Language Constructs Keywords Real-time animation, object-oriented design, delegation, simulation, user interaction, electronic books, interactive illustrations.  
Note: The system's  and intra-frame  
Address: Providence, RI 02912  
Affiliation: Department of Computer Science Brown University  
Abstract: We present an interactive modeling and animation system that facilitates the integration of a variety of simulation and animation paradigms. This system permits the modeling of diverse objects that change in shape, appearance, and behavior over time. Our system thus extends modeling tools to include animation controls. Changes can be effected by various methods of control, including scripted, gestural, and behavioral specification. The system is an extensible testbed that supports research in the interaction of disparate control methods embodied in controller objects. This paper discusses some of the issues involved in modeling such interactions and the mechanisms implemented to provide solutions to some of these issues. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Phil Amburn, Eric Grant, and Turner Whitted. </author> <title> Managing geometric complexity with enhanced procedural models. </title> <booktitle> In Proceedings of the ACM SIGGRAPH, Computer Graphics, </booktitle> <volume> volume 20(4), </volume> <pages> pages 189-195, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: differently to the same abstract command, so that a flexible object like cloth, for instance, can interpret a collision message differently from a rigid object. 6 Controller Interaction Allowing heterogeneous controllers to coexist and communicate in the same environment has been a research goal in computer graphics for several years <ref> [1] </ref> [12]. Such interaction between controllers should allow many powerful behavioral control techniques to affect a common set of objects in a meaningful way.
Reference: [2] <author> Alan H. Barr. </author> <title> Global and local deformations of solid primitives. </title> <booktitle> In Proceedings of the ACM SIGGRAPH, Computer Graphics, </booktitle> <volume> volume 18(3), </volume> <pages> pages 21-30, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Objects can also inquire information from each other, information that depends on the nature and content of the messages a particular object has retained. Through messages, objects can be transformed (with scales, rotations, translations, shears, and reflections), deformed (with bends, twists, tapers, waves <ref> [2] </ref>, and free-form deformations [16]), colored, shaded [17], texture-mapped, dynamically moved (with forces, torques, velocities, and accelerations), and volumetrically carved [8]. Messages are functions of time and, since objects retain them, they may be edited. An object's list of messages describes the object's time-varying structure and behavior.
Reference: [3] <author> Ronen Barzel and Alan H. Barr. </author> <title> A modeling system based on dynamic constraints. </title> <booktitle> In Proceedings of the ACM SIGGRAPH, Computer Graphics, </booktitle> <volume> volume 22(4), </volume> <pages> pages 179-188, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Non-geometric objects include cameras, lights, and renderers. Behaviors such as gestural controls, spring constraints, finite-element techniques for cloth simulation [19], dynamics [13], inverse kinematics [4] [14], and constraint solvers <ref> [3] </ref> are also encapsulated as objects. Objects can send and receive messages. These messages are persistent a copy of each message is retained in the receiving object. They provide information on how an object should change itself over time.
Reference: [4] <author> Lisa K. Borden. </author> <title> Articulated objects in BAGS. </title> <type> Master's thesis, </type> <institution> Brown University, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Non-geometric objects include cameras, lights, and renderers. Behaviors such as gestural controls, spring constraints, finite-element techniques for cloth simulation [19], dynamics [13], inverse kinematics <ref> [4] </ref> [14], and constraint solvers [3] are also encapsulated as objects. Objects can send and receive messages. These messages are persistent a copy of each message is retained in the receiving object. They provide information on how an object should change itself over time.
Reference: [5] <author> A. H. Borning. </author> <title> Classes versus prototypes in object-oriented languages. </title> <booktitle> In IEEE/ACM Fall Joint Computer Conference, </booktitle> <pages> pages 36-40, </pages> <year> 1986. </year>
Reference-contexts: Changes to the prototype affect both objects, but changes to the extension affect only the extension. Although it has been suggested <ref> [5] </ref> [20] that delegation might provide a simpler and more elegant method of solving computer graphics problems, we are not aware of work prior to ours incorporating delegation into animation and modeling systems. 3 The System Architecture 3.1 Control points At its simplest, a message is a name and a function <p> They handle most transformations identically and differ only in a few shape-specific methods, such as boundary representation, ray intersection, and computation of surface normals and parametric coordinates. 3.4 An example of making objects A delegation system has straightforward mechanisms for object hierarchy <ref> [5] </ref> [10]. Recall that an object, the extension, can be made from another object, the prototype. In our system, an object can receive a message stating that it is to inherit all the messages of another object, thus becoming that object's extension.
Reference: [6] <author> Ingfei Chen and David Busath. </author> <title> Animating a cellular transport mechanism. </title> <journal> Pixel Magazine, </journal> <volume> 1(2), </volume> <year> 1990. </year>
Reference-contexts: These messages could then be given to the appropriate objects, telling each how to behave in order to represent the scientific data <ref> [6] </ref>. Other more sophisticated controllers can apply and then edit a set of messages, adding new messages as they derive new results. Controllers will be discussed in more detail in Section 5. Our system has a variety of messages to support its many kinds of objects.
Reference: [7] <author> Gerald Farin. </author> <title> Curves and Surfaces for Computer-Aided Geometric Design. </title> <publisher> Academic Press, </publisher> <address> second edition, </address> <year> 1990. </year>
Reference-contexts: Note also that objects change their methods in different situations. For example, applying a deformation to a spline patch might not cause it to change its methods if the inaccuracy of applying the deformation to the control hull (and not the patch itself) is acceptable <ref> [7] </ref>. When objects depend on other objects, traversal becomes recursive. Consider the figure watching a fly discussed in Section 3.4. To determine the orientation of an eye, the position of the fly must be determined.
Reference: [8] <author> Tinsley A. Galyean. Sculpt: </author> <title> Interactive volumetric modeling. </title> <type> Master's thesis, </type> <institution> Brown University, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Through messages, objects can be transformed (with scales, rotations, translations, shears, and reflections), deformed (with bends, twists, tapers, waves [2], and free-form deformations [16]), colored, shaded [17], texture-mapped, dynamically moved (with forces, torques, velocities, and accelerations), and volumetrically carved <ref> [8] </ref>. Messages are functions of time and, since objects retain them, they may be edited. An object's list of messages describes the object's time-varying structure and behavior. By editing this list, through inserting, deleting, adding, or modifying messages, that structure and behavior can be altered.
Reference: [9] <author> Andrew Glassner, </author> <title> editor. Graphics Gems. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Geometric objects include quadrics, su-perquadrics, constructive solid geometry objects (CSGs) and other hierarchical collections of objects, spline patches, objects of revolution, prisms, generalized cylinders or ducts <ref> [9] </ref> (objects obtained by extruding a varying cross-section along a spline path), and implicit surfaces. Non-geometric objects include cameras, lights, and renderers. Behaviors such as gestural controls, spring constraints, finite-element techniques for cloth simulation [19], dynamics [13], inverse kinematics [4] [14], and constraint solvers [3] are also encapsulated as objects.
Reference: [10] <author> Brent Halperin and Van Nguyen. </author> <title> A model for object-based inheritance. </title> <editor> In Peter Wegner and Bruce Shriver, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming. </booktitle> <publisher> The MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: The constantly changing nature of our models makes a static relationship such as class-instance too restrictive, since, for example, transforming a sphere into a torus would typically require a change in class. Instead, our system is a delegation system [18] <ref> [10] </ref>. In a class-instance system, objects have two sorts of associations: the association of an instance with its class and the association of a class with its super-class. A delegation system, on the other hand, has only one relation, that between an object and its prototype. <p> They handle most transformations identically and differ only in a few shape-specific methods, such as boundary representation, ray intersection, and computation of surface normals and parametric coordinates. 3.4 An example of making objects A delegation system has straightforward mechanisms for object hierarchy [5] <ref> [10] </ref>. Recall that an object, the extension, can be made from another object, the prototype. In our system, an object can receive a message stating that it is to inherit all the messages of another object, thus becoming that object's extension.
Reference: [11] <author> Philip M. Hubbard, Matthias M. Wloka, Robert C. Zeleznik, Daniel G. Aliaga, and Nathan Huang. UGA: </author> <title> A unified graphics architecture. </title> <type> Technical Report CS-91-30, </type> <institution> Brown University, </institution> <year> 1991. </year>
Reference-contexts: Finally, these features can be added interactively by the game players. 8 Summary We have designed and implemented an interactive graphics system <ref> [11] </ref> with an unusually close integration of modeling and animation. All modeling is done through time-varying messages and thus all modeling tools can be used for animation. The system is object-oriented and provides a time-varying delegation hierarchy for maximum flexibility.
Reference: [12] <author> Devendra Kalra. </author> <title> A Unified Framework for Constraint-Based Modeling. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1990. </year>
Reference-contexts: to the same abstract command, so that a flexible object like cloth, for instance, can interpret a collision message differently from a rigid object. 6 Controller Interaction Allowing heterogeneous controllers to coexist and communicate in the same environment has been a research goal in computer graphics for several years [1] <ref> [12] </ref>. Such interaction between controllers should allow many powerful behavioral control techniques to affect a common set of objects in a meaningful way.
Reference: [13] <author> Matthew Moore and Jane Wilhelms. </author> <title> Collision detection and response for computer animation. </title> <booktitle> In Proceedings of the ACM SIGGRAPH, Computer Graphics, </booktitle> <volume> volume 22(4), </volume> <pages> pages 289-298, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Non-geometric objects include cameras, lights, and renderers. Behaviors such as gestural controls, spring constraints, finite-element techniques for cloth simulation [19], dynamics <ref> [13] </ref>, inverse kinematics [4] [14], and constraint solvers [3] are also encapsulated as objects. Objects can send and receive messages. These messages are persistent a copy of each message is retained in the receiving object. They provide information on how an object should change itself over time.
Reference: [14] <author> Cary B. Phillips, Jianmin Zhao, and Norman I. Badler. </author> <title> Interactive real-time articulated figure manipulation using multiple kinematic constraints. </title> <booktitle> In Proceedings of the Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 245-250, </pages> <year> 1990. </year>
Reference-contexts: Non-geometric objects include cameras, lights, and renderers. Behaviors such as gestural controls, spring constraints, finite-element techniques for cloth simulation [19], dynamics [13], inverse kinematics [4] <ref> [14] </ref>, and constraint solvers [3] are also encapsulated as objects. Objects can send and receive messages. These messages are persistent a copy of each message is retained in the receiving object. They provide information on how an object should change itself over time.
Reference: [15] <author> William H. Press, Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: Caching and its relation to controllers are especially important for attributes related by differential equations (parameterized by time). By caching the acceleration and velocity of an object at one instant in time, the system can use Euler's method <ref> [15] </ref> to obtain the velocity and position of that object at the next instant. We are currently investigating how to use the Runge-Kutta method of integration.
Reference: [16] <author> T. W. Sederberg and S. R. Parry. </author> <title> Free-form deformation of solid geometric models. </title> <booktitle> In Proceedings of the ACM SIG-GRAPH, Computer Graphics, </booktitle> <volume> volume 20(4), </volume> <pages> pages 151-160, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Objects can also inquire information from each other, information that depends on the nature and content of the messages a particular object has retained. Through messages, objects can be transformed (with scales, rotations, translations, shears, and reflections), deformed (with bends, twists, tapers, waves [2], and free-form deformations <ref> [16] </ref>), colored, shaded [17], texture-mapped, dynamically moved (with forces, torques, velocities, and accelerations), and volumetrically carved [8]. Messages are functions of time and, since objects retain them, they may be edited. An object's list of messages describes the object's time-varying structure and behavior.
Reference: [17] <author> Paul S. Strauss. </author> <title> A realistic lighting model for computer animators. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(6), </volume> <month> November </month> <year> 1990. </year>
Reference-contexts: Through messages, objects can be transformed (with scales, rotations, translations, shears, and reflections), deformed (with bends, twists, tapers, waves [2], and free-form deformations [16]), colored, shaded <ref> [17] </ref>, texture-mapped, dynamically moved (with forces, torques, velocities, and accelerations), and volumetrically carved [8]. Messages are functions of time and, since objects retain them, they may be edited. An object's list of messages describes the object's time-varying structure and behavior.
Reference: [18] <author> Peter Wegner. </author> <title> The object-oriented classification paradigm. </title> <editor> In Peter Wegner and Bruce Shriver, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming. </booktitle> <publisher> The MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: The constantly changing nature of our models makes a static relationship such as class-instance too restrictive, since, for example, transforming a sphere into a torus would typically require a change in class. Instead, our system is a delegation system <ref> [18] </ref> [10]. In a class-instance system, objects have two sorts of associations: the association of an instance with its class and the association of a class with its super-class. A delegation system, on the other hand, has only one relation, that between an object and its prototype.
Reference: [19] <author> Jerry Weil. </author> <title> A simplified approach to animating cloth objects. Unpublished report written for Optomystic, </title> <year> 1988. </year>
Reference-contexts: Non-geometric objects include cameras, lights, and renderers. Behaviors such as gestural controls, spring constraints, finite-element techniques for cloth simulation <ref> [19] </ref>, dynamics [13], inverse kinematics [4] [14], and constraint solvers [3] are also encapsulated as objects. Objects can send and receive messages. These messages are persistent a copy of each message is retained in the receiving object. They provide information on how an object should change itself over time.
Reference: [20] <author> Peter Wisskirchen. </author> <title> Object-Oriented Graphics. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Changes to the prototype affect both objects, but changes to the extension affect only the extension. Although it has been suggested [5] <ref> [20] </ref> that delegation might provide a simpler and more elegant method of solving computer graphics problems, we are not aware of work prior to ours incorporating delegation into animation and modeling systems. 3 The System Architecture 3.1 Control points At its simplest, a message is a name and a function of
Reference: [21] <author> N. Yankelovich, N. Meyrowitz, and Andries van Dam. </author> <title> Reading and writing the electronic book. </title> <journal> IEEE Computer, </journal> <volume> 18(10), </volume> <month> October </month> <year> 1985. </year> <title> points along the path of extrusion. Because of the rich dependencies of our system, such an object will change as the paths used to make it change. </title>
Reference-contexts: We wish to expand the definition of modeling to include the realms of simulation, animation, rendering, and user interaction. Since the mid-60s, our research has focused on tools for creating electronic books, specifically hypermedia documents with interactive illustrations <ref> [21] </ref>. Such illustrations allow readers to interact not just with a canned movie but with a stored, parameterized model of a phenomenon they are trying to understand. Interactive illustrations require simulation and animation of the underlying model in an interactive, real-time environment.
References-found: 21

