URL: http://www.cs.helsinki.fi/~hahonen/helena_ep96.ps.gz
Refering-URL: http://www.cs.helsinki.fi/~hahonen/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: helena.ahonen@helsinki.fi  
Title: Automatic generation of SGML content models  
Author: Helena Ahonen 
Address: P.O. Box 26 (Teollisuuskatu 23) FIN-00014 University of Helsinki, Finland  
Affiliation: Department of Computer Science University of Helsinki  
Abstract: We study the problem of automatic generation of a document type definition (DTD) for a set of Standard Generalized Markup Language (SGML) documents. We present various situations where we have tagged documents but no DTD, and discuss the requirements various applications may have with respect to the generation process. We also present an automatic DTD generation tool that can be adjusted for several tasks necessary in the applications. The method is also demonstrated with some experimental cases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Information Processing Text and Office Systems Standard Generalized Markup Language (SGML). </institution> <type> Technical Report ISO/IEC 8879, </type> <institution> International Organization for Standardization ISO/IEC, </institution> <address> Geneva/New York, </address> <year> 1986. </year>
Reference-contexts: 1 Introduction An SGML (Standard Generalized Markup Language) <ref> [1] </ref> document has both tagging, i.e. all its elements are marked with begin and end tags, and a document type definition (DTD) that describes the allowed structure of the document class in which the document belongs.
Reference: [2] <author> Jinhua Chen. </author> <title> Grammar generation and query processing for text databases. Research proposal, </title> <institution> University of Waterloo, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: This may happen, for instance, when we are converting documents from non-SGML environments, e.g. as a part of a large design process or with quick online transformations. Clearly, there is a need for automatic DTD generation. Automatic DTD generation has also been studied in <ref> [2, 3, 4, 5] </ref>, mostly in connection with some specific situations. We try to give an overview of the various cases where the need for a DTD may arise, and we also present our own method that has features adjustable for these cases.
Reference: [3] <author> Keith Shafer. </author> <title> Automatic DTD creation via the GB-Engine and Fred. </title> <type> Technical report, </type> <institution> OCLC Online Computer Library Center, Inc., </institution> <address> 6565 Frantz Road, Dublin, Ohio 43017-3395, </address> <year> 1995. </year> <note> Accessible at URL: http://www.oclc.org/fred/docs/papers/. </note>
Reference-contexts: This may happen, for instance, when we are converting documents from non-SGML environments, e.g. as a part of a large design process or with quick online transformations. Clearly, there is a need for automatic DTD generation. Automatic DTD generation has also been studied in <ref> [2, 3, 4, 5] </ref>, mostly in connection with some specific situations. We try to give an overview of the various cases where the need for a DTD may arise, and we also present our own method that has features adjustable for these cases.
Reference: [4] <author> Sunniva M. K. Solstrand. Automatisk generering av DTD fra SGML-kodet ma-teriale. M.Sc.thesis, Institutt for informasjonsvitenskap, Universitetet i Bergen, </author> <month> September </month> <year> 1994. </year>
Reference-contexts: This may happen, for instance, when we are converting documents from non-SGML environments, e.g. as a part of a large design process or with quick online transformations. Clearly, there is a need for automatic DTD generation. Automatic DTD generation has also been studied in <ref> [2, 3, 4, 5] </ref>, mostly in connection with some specific situations. We try to give an overview of the various cases where the need for a DTD may arise, and we also present our own method that has features adjustable for these cases.
Reference: [5] <author> Peter Fankhauser and Yi Xu. </author> <title> Markitup! An incremental approach to document structure recognition. Electronic Publishing Origination, Dissemination and Design, </title> <booktitle> 6(4) </booktitle> <pages> 447-456, </pages> <year> 1994. </year>
Reference-contexts: This may happen, for instance, when we are converting documents from non-SGML environments, e.g. as a part of a large design process or with quick online transformations. Clearly, there is a need for automatic DTD generation. Automatic DTD generation has also been studied in <ref> [2, 3, 4, 5] </ref>, mostly in connection with some specific situations. We try to give an overview of the various cases where the need for a DTD may arise, and we also present our own method that has features adjustable for these cases.
Reference: [6] <editor> Suomen kielen perussanakirja. Ensimmainen osa (A-K). Valtion paina-tuskeskus, </editor> <address> Helsinki, </address> <year> 1990. </year>
Reference-contexts: We try to give an overview of the various cases where the need for a DTD may arise, and we also present our own method that has features adjustable for these cases. Assume we want to find a DTD for the following tagged dictionary entries <ref> [6] </ref>. &lt;Entry&gt;<Headword>kaame/a&lt;/Headword&gt; &lt;Inflection&gt;15</Inflection&gt; &lt;Sense&gt; kammottava, kamala, kauhea, karmea, hirvea, pelottava &lt;/Sense&gt;. &lt;Example_block&gt; &lt;Example&gt;Kaamea onnettomuus, verityo. &lt;/Example&gt; &lt;Example&gt; Tuliaseet tekivat kaameaa jalkea. &lt;/Example&gt; &lt;Example&gt; Kertoa kaameita kummitusjuttuja. &lt;/Example&gt; &lt;/Example_block&gt; &lt;Sense_structure&gt; &lt;Technical_field&gt;Ark.&lt;/Technical_field&gt; &lt;Example_block&gt;<Example&gt;Kaamea hattu.&lt;/Example&gt;&lt;Example&gt; On kaamean kylma. &lt;/Example&gt; &lt;/Example_block&gt; &lt;/Sense_structure&gt; &lt;/Entry&gt; fl This work was partially supported by the Academy of Finland and <p> It trivialized some model groups that have large variation, e.g. a part of the declaration for paragraph (P ). All the processing was done in batch mode. 4.2 Dictionary Most challenging of our test cases has been the part A - K of a Finnish dictionary <ref> [6] </ref>. We converted the typographical tags of the dictionary, which consists of about 16000 entries, to structural tags, and obtained a set of 468 distinct structuress. Every structure also received a frequency, i.e., the number of entries that the structure covers.
Reference: [7] <author> Eve Maler and Jeanne El Andaloussi. </author> <title> Developing SGML DTDs | from text to model to markup. </title> <publisher> Prentice Hall PTR, </publisher> <year> 1996. </year>
Reference-contexts: If we then need a simpler DTD for some task or a DTD for some subdocument, we can use automatic generation to find a DTD that accepts the selected documents. One example of this kind of DTD is an author DTD <ref> [7] </ref>: a DTD that is given to the people that write documents. For instance, in our research project, we have used ISO 12083 standard DTD for books [8] as a DTD for engineering text books. First, the authors used MS-Word to write the original text.
Reference: [8] <author> ISO International Organization for Standardization. </author> <title> Information and documentation Electronic manuscript preparation and markup, </title> <type> ISO 12083, </type> <year> 1994. </year>
Reference-contexts: One example of this kind of DTD is an author DTD [7]: a DTD that is given to the people that write documents. For instance, in our research project, we have used ISO 12083 standard DTD for books <ref> [8] </ref> as a DTD for engineering text books. First, the authors used MS-Word to write the original text. However, the conversion process is very tedious, and also the writers find it 4 better to start to use some SGML extension to Word. <p> In this section we present some experiments that illustrate how our method can be used to satisfy needs of varying applications. 4.1 Textbook As mentioned earlier, we have converted one textbook into SGML and structured it according to our ISO 12083 -based DTD <ref> [8] </ref>. As we need a simpler DTD for the 7 authors of new books, we generated a DTD for the book we already have, and now we can use this DTD as a basis for the author DTD.
Reference: [9] <author> Helena Ahonen, Heikki Mannila, and Erja Nikunen. </author> <title> Generating grammars for SGML tagged texts lacking DTD. </title> <editor> In M. Murata and H. Gallaire, editors, </editor> <booktitle> Proceedings of the Workshop on Principles of Document Processing '94. Also to appear in Computer and Mathematical Modelling., </booktitle> <year> 1994. </year>
Reference-contexts: We are going to study, how the source DTD and the transformations can be used to generalize the target DTD in a suitable way. 3 Automatic DTD generation We have designed and implemented an automatic DTD generation tool <ref> [9, 10] </ref> that is adjustable according to the above mentioned dimensions. In a typical session, there is a batch processing phase (Section 3.1) that produces the first complete candidate for a content model. The content model is a generalization of the source instances, but usually highly structural.
Reference: [10] <author> Helena Ahonen. </author> <title> Generating grammars for structured documents using grammatical inference methods. </title> <type> PhD Thesis, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <year> 1996. </year> <note> In preparation. </note>
Reference-contexts: We are going to study, how the source DTD and the transformations can be used to generalize the target DTD in a suitable way. 3 Automatic DTD generation We have designed and implemented an automatic DTD generation tool <ref> [9, 10] </ref> that is adjustable according to the above mentioned dimensions. In a typical session, there is a batch processing phase (Section 3.1) that produces the first complete candidate for a content model. The content model is a generalization of the source instances, but usually highly structural. <p> The unambiguity of content models has been studied in [11], and we have used its algorithm as a basis to generate unambiguous content models <ref> [10] </ref>. 3.2 Isolation of model groups If the document structure is complicated, it is often useful to be able to introduce more nesting in the structure than present in the instances.
Reference: [11] <author> Anne Bruggemann-Klein. </author> <title> Unambiguity of extended regular expressions in SGML document grammars. </title> <editor> In Th. Lengauer, editor, </editor> <booktitle> Proceedings of ESA '93, Lecture Notes in Computer Science 726, </booktitle> <pages> pages 73-84. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 11 </month>
Reference-contexts: The unambiguity of content models has been studied in <ref> [11] </ref>, and we have used its algorithm as a basis to generate unambiguous content models [10]. 3.2 Isolation of model groups If the document structure is complicated, it is often useful to be able to introduce more nesting in the structure than present in the instances.
References-found: 11

