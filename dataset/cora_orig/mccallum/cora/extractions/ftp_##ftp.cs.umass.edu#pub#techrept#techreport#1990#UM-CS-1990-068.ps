URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1990/UM-CS-1990-068.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/90-068.html
Root-URL: 
Title: Extending and Limiting PGraphite-style Persistence  
Author: Peri L. Tarr Jack C. Wileden Lori A. Clarke 
Note: This work was supported in part by the National Science Foundatation (CCR-87-04478) with cooperation from the Defense Advanced Research Projects Agency (ARPA order 6104).  
Address: Amherst, Massachusetts 01003  
Affiliation: Software Development Laboratory Department of Computer and Information Science University of Massachusetts  
Abstract: We have been working on both extending and limiting the approach to persistence embodied in our PGraphite system. The extensions include implementing automated support for persistent objects of classes other than directed graphs, notably relationships and relations, and porting our system to storage managers other than Ada Direct IO, notably Mneme, ObServer II, and the Exodus Storage Manager. The work on restrictions has focused on defining and implementing principled ways to specify the "limits" of the reachability-based persistence model employed by PGraphite. The approach that we have taken relies on using potentially persistent relationships and relations to specify the "boundaries" that (de)limit persistence in complex connected structures. In this paper we describe both of these aspects of our recent work, our implementations of them and our experience with them. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Lee, Frank Pfenning, Gene Rollins, and Dana Scott. </author> <title> The Ergo Support System: An Integrated Set of Tools for Prototyping Integrated Environments. </title> <booktitle> In Proceedings of SIGSOFT '88: Third Symposium Software Development Environments, </booktitle> <pages> pages 25-34, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The user should have control over the specification of these boundaries. One obvious way of providing such a capability is to force the user to differentiate between persistent and non-persistent parts of objects when defining the object's type (as has been done, for example, in the Ergo system <ref> [1] </ref>) by explicitly designating some components as "persistent" and others as "non-persistent." The problem with this solution is that it violates the orthogonality property that we desire for persistent object management systems by introducing distinctions based directly and solely on persistence properties into type definitions.
Reference: [2] <author> Stanley M. Sutton, Jr. APPL/A: </author> <title> A Prototype Language for Software-Process Programming. </title> <type> PhD thesis, </type> <institution> University of Colorado, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: In experimenting with PGraphite and with the APPL/A system <ref> [2] </ref>, we became convinced that relation and relationship are suitable for representing these kinds of irregular or unanticipated connections. Therefore, we have extended PGraphite to automate the generation of persistent object management support for these types as well.
Reference: [3] <author> Peri L. Tarr, Jack C. Wileden, and Alexander L. Wolf. </author> <title> A Different Tack To Providing Persistence In A Language. </title> <booktitle> In Proceedings of the Second International Workshop on Database Programming Languages, </booktitle> <pages> pages 41-60, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The PGraphite system <ref> [3, 5] </ref> is a prototype realization of a particular approach to including persistence in modern programming languages. By "modern", we mean languages that are strongly typed and that provide rich support for the definition and use of abstract data types | Ada is our standard exemplar. <p> prototype implementation, and then describe our recent work in each of these areas. 2 Review of PGraphite The PGraphite approach to providing persistence, and the prototype PGraphite processor that produces Ada interface packages that implement the approach for arbitrary abstract directed graph types, have been described in detail elsewhere ([5], <ref> [3] </ref>). Here we briefly review two central features of the PGraphite approach | PGraphite's name space model and its reachability-based definition of the extent of persistence | then provide an example to illustrate the approach. 2.1 Side-by-side Name Spaces Every language provides some way of referring to instances of types.
Reference: [4] <author> Richard N. Taylor, Frank C. Belz, Lori A. Clarke, Leon Osterweil, Richard W. Selby, Jack C. Wileden, Alexander L. Wolf, and Michal Young. </author> <booktitle> Foundations for the Arcadia Enviroment Architecture. In Proceedings of SIGSOFT '88: Third Symposium on Software Development Environments, </booktitle> <month> November </month> <year> 1988. </year>
Reference-contexts: Because PGraphite was developed as part of our work on object management support for software development environments (in the Arcadia project <ref> [4] </ref>), that set of types was abstract directed graphs, which are among the most frequently used types in such environments.
Reference: [5] <author> Jack C. Wileden, Alexander L. Wolf, Charles D. Fisher, and Peri L. Tarr. PGraphite: </author> <title> An Experiment in Persistent Typed Object Management. </title> <booktitle> In Proceedings of SIGSOFT '88: Third Symposium on Software Development Environments, </booktitle> <pages> pages 130-142, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: 1 Introduction The PGraphite system <ref> [3, 5] </ref> is a prototype realization of a particular approach to including persistence in modern programming languages. By "modern", we mean languages that are strongly typed and that provide rich support for the definition and use of abstract data types | Ada is our standard exemplar.
Reference: [6] <author> Alexander L. Wolf. </author> <title> Abstraction Mechanisms and Persistence. </title> <booktitle> In Proceedings of the Fourth Workshop on Persistent Object Systems, </booktitle> <month> September </month> <year> 1990. </year> <note> (To appear.). </note>
Reference-contexts: Most other approaches force a much earlier decision concerning persistence, e.g., at type-definition or instance creation time. While the approach is fully general (as we have demonstrated by applying it manually and as has been demonstrated by the Persi system <ref> [6] </ref>, which automates the approach for most of C++), our original PGraphite prototype only provided automated support for the approach for a limited set of types.
References-found: 6

