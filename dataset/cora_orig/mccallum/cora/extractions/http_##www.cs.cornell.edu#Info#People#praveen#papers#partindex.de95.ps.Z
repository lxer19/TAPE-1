URL: http://www.cs.cornell.edu/Info/People/praveen/papers/partindex.de95.ps.Z
Refering-URL: http://www.cs.cornell.edu/Info/People/praveen/papers.html
Root-URL: http://www.cs.brown.edu/
Email: praveen@cs.wisc.edu aruns@sgi.com  
Title: Generalized Partial Indexes  
Author: Praveen Seshadri Arun Swami 
Address: Madison, WI 53706, USA San Jose, CA 95120, USA  
Affiliation: Computer Sciences Department IBM Almaden Research Center University of Wisconsin  
Abstract: This paper demonstrates the use of generalized partial indexes for efficient query processing. We propose that partial indexes be built on those portions of the database that are statistically likely to be the most useful for query processing. We identify three classes of statistical information, and two levels at which it may be available. We describe indexing strategies that use this information to significantly improve average query performance. Results from simulation experiments demonstrate that the proposed generalized partial indexing strategies perform well compared to the traditional approach to indexing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. J. DeWitt and J. F. Naughton and D. F. Schnieder. </author> <title> Parallel Sorting on a Shared-Nothing Architecture using Probabilistic Splitting. </title> <type> Technical report, </type> <institution> Computer Sciences Department, University of Wisconsin-Madison, </institution> <month> August </month> <year> 1991. </year> <type> CS Technical Report 1043. </type>
Reference-contexts: Experiments on building equi-depth histograms using sampling <ref> [1] </ref> show that given reasonable sample sizes, the errors in such estimates are negligible. Determining Exclusion Ranges: Assume that for each column, some fixed window size is specified. A window of the specified size is moved stepwise over the domain of the sampling histogram of each column.
Reference: [2] <author> C. Faloutsos and H. V. Jagadish. </author> <title> On B-tree Indices for Skewed Distributions. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 363-374, </pages> <address> Vancouver, British Columbia, 1992. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: A significant contribution of this paper is to demonstrate the importance of using statistics on data distributions. The data distributions in real databases are seldom uniform <ref> [2, 8] </ref>, and it is often more useful to index those tuples with values in a sparse region of the column domain. This is demonstrated graphically in Figure 3. <p> The relation holds 100,000 records, resulting in an 80MB database. There are 10 columns to be indexed, each having 10,000 distinct values. The data distribution in each column is a generalized Zipfian distribution [5] (the Zip-fian distribution models a significant amount of real skew data <ref> [2, 8] </ref>) with Zipf parameter = 1:03. For the chosen database configuration parameters, this corresponds to an 80-20 distribution [5]. The indexed columns are integer valued (4 bytes) and along with the RID, each index entry has a size of 12 bytes.
Reference: [3] <author> S. Finkelstein, M. Schkolnick, and P. Tiberio. </author> <title> Physical Database Design For Relational Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 13(1) </volume> <pages> 91-128, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Database products typically specify heuristic guidelines that the DBA should use in deciding which indexes to build [4]. This issue has also been studied as part of physical database design, and <ref> [3] </ref> describes a database design tool that helps a DBA make the index creation decisions.
Reference: [4] <institution> IBM Corporation, </institution> <address> White Plains, NY. </address> <note> DB2 System Planning Administration Guide, 1993. IBM Publication No. SC26-4085. </note>
Reference-contexts: Indexes also incur a cost in terms of resources (disk space and time) used to create and maintain them. Database products typically specify heuristic guidelines that the DBA should use in deciding which indexes to build <ref> [4] </ref>. This issue has also been studied as part of physical database design, and [3] describes a database design tool that helps a DBA make the index creation decisions.
Reference: [5] <author> D. E. Knuth. </author> <title> The Art of Computer Programming, Vol 3: Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: The relation holds 100,000 records, resulting in an 80MB database. There are 10 columns to be indexed, each having 10,000 distinct values. The data distribution in each column is a generalized Zipfian distribution <ref> [5] </ref> (the Zip-fian distribution models a significant amount of real skew data [2, 8]) with Zipf parameter = 1:03. For the chosen database configuration parameters, this corresponds to an 80-20 distribution [5]. <p> The data distribution in each column is a generalized Zipfian distribution <ref> [5] </ref> (the Zip-fian distribution models a significant amount of real skew data [2, 8]) with Zipf parameter = 1:03. For the chosen database configuration parameters, this corresponds to an 80-20 distribution [5]. The indexed columns are integer valued (4 bytes) and along with the RID, each index entry has a size of 12 bytes. With an index fill factor of 70% [10], this corresponds to approximately 238 index entries per page with each index entry occupying 17 bytes.
Reference: [6] <author> C. Mohan, D. Haderle, Y. Wang, and J. Cheng. </author> <title> Single Table Access Using Multiple Indexes: Optimization, Execution and Concurrency Control Techniques. </title> <booktitle> In Proceedings of the 1990 International Conference on Extending Database Technology, </booktitle> <pages> pages 29-43, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: At this stage, the sorted list of RIDs is used to determine the actual data records that need to be retrieved from the database. The technique of index intersection has been described in <ref> [6] </ref>. Sorting the RID list before retrieving data records ensures that every database page is accessed at most once. By adopting these approaches, the simulator tries to isolate the effects of the indexing strategy used. Simulator Cost Model: Indexes are assumed to be unclus-tered. <p> Simulator Cost Model: Indexes are assumed to be unclus-tered. It is also assumed that the queries require retrieval of the actual data records, and cannot be answered based solely on information in the indexes <ref> [6] </ref>. The indexing resource limits are expressed solely in terms of the disk space used by the indexes, and the maintenance costs are not modeled. The cost measure of the simulator is the number of unique page accesses required to process a query.
Reference: [7] <author> N. E. Olson. </author> <title> Partial Indexing in POSTGRES. </title> <type> Technical report, </type> <institution> Department of Electrical Engineering and Computer Science, U.C.Berkeley, </institution> <month> June </month> <year> 1993. </year> <type> Master's Report. </type>
Reference-contexts: It is suggested in [9] that this constraint be specified by the DBA as a clause in the command that creates the index. Since the partial indexing of [9] (which has been implemented in POSTGRES <ref> [7] </ref>) is one of the several possible partial indexing strategies described in this paper, we call our strategy generalized partial (GP) indexing. A significant contribution of this paper is to demonstrate the importance of using statistics on data distributions.
Reference: [8] <author> G. C. Steindel and H. G. </author> <title> Madison. A Benchmark Comparison of DB2 and the DBC/1012. </title> <booktitle> In CMG '87, International Conference on Management and Performance Evaluation of Computer Systems, </booktitle> <pages> pages 360-369, </pages> <address> Orlando, FL, </address> <year> 1987. </year> <title> The Computer Measurement Group, </title> <publisher> Inc. </publisher>
Reference-contexts: A significant contribution of this paper is to demonstrate the importance of using statistics on data distributions. The data distributions in real databases are seldom uniform <ref> [2, 8] </ref>, and it is often more useful to index those tuples with values in a sparse region of the column domain. This is demonstrated graphically in Figure 3. <p> The relation holds 100,000 records, resulting in an 80MB database. There are 10 columns to be indexed, each having 10,000 distinct values. The data distribution in each column is a generalized Zipfian distribution [5] (the Zip-fian distribution models a significant amount of real skew data <ref> [2, 8] </ref>) with Zipf parameter = 1:03. For the chosen database configuration parameters, this corresponds to an 80-20 distribution [5]. The indexed columns are integer valued (4 bytes) and along with the RID, each index entry has a size of 12 bytes.
Reference: [9] <author> M. Stonebraker. </author> <title> The Case for Partial Indexes. </title> <journal> ACM-SIGMOD Record, </journal> <volume> 18(4) </volume> <pages> 4-11, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Figures 1 and 2 demonstrate this graphically. The intuitive idea is to distribute the indexing resources across the various columns, with the goal of improving the overall performance of query processing. In <ref> [9] </ref>, a case is made for adding partial indexes to a database system. It assumes that the nature of the query predicates is known. <p> It assumes that the nature of the query predicates is known. For instance, if it is known that queries will only contain predicates of the form X &gt; 200, it is sufficient to build an index on column X only for values greater than 200. It is suggested in <ref> [9] </ref> that this constraint be specified by the DBA as a clause in the command that creates the index. Since the partial indexing of [9] (which has been implemented in POSTGRES [7]) is one of the several possible partial indexing strategies described in this paper, we call our strategy generalized partial <p> It is suggested in <ref> [9] </ref> that this constraint be specified by the DBA as a clause in the command that creates the index. Since the partial indexing of [9] (which has been implemented in POSTGRES [7]) is one of the several possible partial indexing strategies described in this paper, we call our strategy generalized partial (GP) indexing. A significant contribution of this paper is to demonstrate the importance of using statistics on data distributions. <p> For instance, it may be known that though different queries may have different values for a predicate, the value is always greater than 200. This is a special case of Boolean information, and is used in the partial indexing strategy of <ref> [9] </ref> (as indicated by shaded box 3). A more sophisticated level of information could provide a distribution of query values for each query predicate on a column (box 4). <p> Though the levels of information in each class may be different, any available information should be exploited. In this two-dimensional space of statistical information, the traditional indexing strategies primarily use the information in box 1 and limited information from box 2. The partial indexing strategy of <ref> [9] </ref> uses information in box 3 in addition. The generalized partial indexing strategies are capable of using all of this information. 3 Using Generalized Partial Indexes An index is partial if it indexes a proper subset of the records in the relation. Otherwise, it is a full index. <p> In each experiment set, four indexing strategies are considered. Full corresponds to the full indexing strategy. Note that there are no worst case and best case scenarios for full indexing because the distribution of predicates among the columns is uniform. Partial corresponds to the partial indexing strategy suggested by <ref> [9] </ref>. A partial index contains entries for only those tuples that lie within the query range on that column. Partial indexes are constructed over the restricted columns until the resource limit is reached.
Reference: [10] <author> A. Yao. </author> <title> On Random 2-3 Trees. </title> <journal> Acta Informatica, </journal> <volume> 9(2) </volume> <pages> 159-170, </pages> <year> 1978. </year>
Reference-contexts: For the chosen database configuration parameters, this corresponds to an 80-20 distribution [5]. The indexed columns are integer valued (4 bytes) and along with the RID, each index entry has a size of 12 bytes. With an index fill factor of 70% <ref> [10] </ref>, this corresponds to approximately 238 index entries per page with each index entry occupying 17 bytes. The resource limit for building indexes is set at (34.5 bytes * Relation Size) which is slightly more than the resources needed to build two full indexes.
References-found: 10

