URL: ftp://ftp.cs.arizona.edu/people/dorgival/publications/ord_bcast.ps.gz
Refering-URL: http://www.cs.arizona.edu/people/dorgival/
Root-URL: http://www.cs.arizona.edu
Title: Reliable Ordered Broadcast With Micro-Protocols  
Author: Dorgival O. Guedes 
Date: August 6, 1996  
Abstract: The implementation of a complex high-level protocol is described. The protocol, a reliable ordered broadcast for local networks, is implemented using the micro-protocol framework inside the x-kernel. The internal structure of the protocol is described, with its micro-protocols and events. Based on our experiences with the development of this protocol, some general observations about the framework are provided.
Abstract-found: 1
Intro-found: 1
Reference: [BS95] <author> David E. Bakken and Richard D. Schilichting. </author> <title> Supporting fault-tolerant parallel programming in linda. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 6(3), </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: Second, continue the research that originated this work: To provide a network implementation of FT-Linda <ref> [BS95] </ref>, the fault-tolerant version of the Linda parallel programming framework. The protocol as it is already has the basic features needed by FT-Linda (except for host failure detection).
Reference: [GBB + 95] <author> Dorgival O. Guedes, David E. Bakken, Nina T. Bhatti, Mat ti A. Hiltunen, and Richard D. Schlichting. </author> <title> A customized communication subsystem for ft-linda. In Anais do 13o. </title> <address> Simp 'osio Brasileiro de Redes de Computadores ( SBRC95), </address> <pages> pages 319-338, </pages> <address> Belo Horizonte, MG, </address> <publisher> Brasil, </publisher> <month> Maio </month> <year> 1995. </year>
Reference-contexts: Although this may be an unwanted feature, the modular structure of the implementation should allow more flexible versions to be developed by simply replacing the membership module. An initial discussion of the use of the framework in a more complete implementation can be found in <ref> [GBB + 95] </ref>. In the next sessions we describe the structure chosen for the protocol based on the various micro-protocols designed, and their interactions through events.
Reference: [mic] <institution> A system for constructing configurable high-level protocols. </institution>
Reference-contexts: A good example of this can be found in the development of Consul, an atomic ordered reliable broadcast protocol [MPS93]. A new framework has been developed and added to the x-kernel to try to solve this kind of problem. The micro-protocol framework <ref> [mic] </ref> provides an event-oriented environment in which separate modules (called micro-protocols) may be combined in order to describe the intricate internal interactions of complex protocols. This work describes our experience with that framework while implementing a simplified ordered broadcast protocol, basically a sub-set of Consul.
Reference: [MPS93] <author> Shivakant Mishra, Larry L. Peterson, and Richard D. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed p rograms. </title> <journal> Distributed Systems Engineering, </journal> <volume> 1 </volume> <pages> 87-103, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Previous works have shown that writing high-level protocols with the x-kernel may be a hard task, due to difficulties in expressing complex interactions among fine-grained modules. A good example of this can be found in the development of Consul, an atomic ordered reliable broadcast protocol <ref> [MPS93] </ref>. A new framework has been developed and added to the x-kernel to try to solve this kind of problem. The micro-protocol framework [mic] provides an event-oriented environment in which separate modules (called micro-protocols) may be combined in order to describe the intricate internal interactions of complex protocols.
References-found: 4

