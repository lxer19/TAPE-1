URL: http://www.cs.iastate.edu/~haverdin/IASTED97.ps
Refering-URL: http://www.cs.iastate.edu/~haverdin/
Root-URL: http://www.cs.iastate.edu
Email: haverdin@cs.iastate.edu  baker@cs.iastate.edu  mikler@cs.iastate.edu  
Title: Modeling and Simulating Computer Networks Using Formalized Data Flow Diagrams  
Author: Michael D. Haverdink Albert L. Baker Armin Mikler 
Date: October 31, 1996  
Address: Ames, IA 50011  
Affiliation: Department of Computer Science Iowa State University  
Abstract-found: 0
Intro-found: 1
Reference: [CB94] <author> D.L. Coleman and A.L. Baker. </author> <title> Synthesizing structured analysis and object-oriented specifications. </title> <type> Technical Report 94-04, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> March </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. 11 </note>
Reference-contexts: 1 Introduction A group of researchers at Iowa State University has targeted their research, in part, toward making formal software development methods more effective in real software development environments. These efforts have yielded results like: * a simple, yet conveniently expressive, model-based specification language for C++ classes, SPECS-C++ <ref> [CB94, WBL94, Hav94] </ref>. * a technique for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions [Wah95, WBL94]. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization <p> for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions [Wah95, WBL94]. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization of data flow diagrams (FDFD's). <ref> [Col91, CB94, LWBL96] </ref>. The authors have recently begun work on the application of FDFD's, and the corresponding techniques for direct execution of assertions developed by Wahls, et. al., to the modeling and simulation of computer networks. <p> Persistent flows behave much like shared variables, but we do not use persistent flows in this paper and omit any further discussion of them. We are basing our NET-SPECS work on the definitions of FDFD's developed by Coleman, Wahls, Baker, and Leavens in <ref> [Col91, CB94, WBL93, LWBL96] </ref>. In this approach the types of flows are modeled abstractly using the discrete mathematical structures set, sequence, and tuple. Assertions are formed using a fixed set of operations over these intrinsic types, e.g., [ for sets and nlength for sequences.
Reference: [Col91] <author> D.L. Coleman. </author> <title> Formalized Structured Analysis Specifications. </title> <type> PhD thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1991. </year>
Reference-contexts: for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions [Wah95, WBL94]. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization of data flow diagrams (FDFD's). <ref> [Col91, CB94, LWBL96] </ref>. The authors have recently begun work on the application of FDFD's, and the corresponding techniques for direct execution of assertions developed by Wahls, et. al., to the modeling and simulation of computer networks. <p> Persistent flows behave much like shared variables, but we do not use persistent flows in this paper and omit any further discussion of them. We are basing our NET-SPECS work on the definitions of FDFD's developed by Coleman, Wahls, Baker, and Leavens in <ref> [Col91, CB94, WBL93, LWBL96] </ref>. In this approach the types of flows are modeled abstractly using the discrete mathematical structures set, sequence, and tuple. Assertions are formed using a fixed set of operations over these intrinsic types, e.g., [ for sets and nlength for sequences.
Reference: [DeM78] <author> T. DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1978. </year>
Reference-contexts: We also summarize our plans for continuing our research in this concluding section. 2 Formalized Data Flow Diagrams This section briefly introduces FDFD's, which are based on traditional data flow diagrams (DFD's) <ref> [DeM78, You89] </ref>. Informally, a DFD is a directed graph in which the arcs are called flows and the nodes are bubbles, stores, or terminators. Bubbles represent data transformers, stores typically represent persistent data, and terminators represent sources and sinks of information.
Reference: [Gur94] <author> Marybeth Gurski. </author> <title> Testing specs-c++: A first step in validating distributed systems specifications. </title> <booktitle> Proceddings of the ISMM International Conference, </booktitle> <pages> pages 105-108, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: for C++ classes, SPECS-C++ [CB94, WBL94, Hav94]. * a technique for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions [Wah95, WBL94]. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations <ref> [Gur94] </ref>. * an executable formalization of data flow diagrams (FDFD's). [Col91, CB94, LWBL96]. The authors have recently begun work on the application of FDFD's, and the corresponding techniques for direct execution of assertions developed by Wahls, et. al., to the modeling and simulation of computer networks.
Reference: [Hav94] <author> Michael D. Haverdink. </author> <title> Formal design of specs-c++: A model-based specification language for c++ classes. </title> <type> Master's thesis, </type> <institution> Iowa State University, Ames, Iowa 50011, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: 1 Introduction A group of researchers at Iowa State University has targeted their research, in part, toward making formal software development methods more effective in real software development environments. These efforts have yielded results like: * a simple, yet conveniently expressive, model-based specification language for C++ classes, SPECS-C++ <ref> [CB94, WBL94, Hav94] </ref>. * a technique for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions [Wah95, WBL94]. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization
Reference: [LWBL96] <author> G.T. Leavens, T. Wahls, A.L. Baker, and K. Lyle. </author> <title> An operational semantics of firing rules for structured analysis style data flow diagrams. </title> <type> Technical Report 93-28d, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1993, </year> <note> revised, July 1996. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions [Wah95, WBL94]. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization of data flow diagrams (FDFD's). <ref> [Col91, CB94, LWBL96] </ref>. The authors have recently begun work on the application of FDFD's, and the corresponding techniques for direct execution of assertions developed by Wahls, et. al., to the modeling and simulation of computer networks. <p> Persistent flows behave much like shared variables, but we do not use persistent flows in this paper and omit any further discussion of them. We are basing our NET-SPECS work on the definitions of FDFD's developed by Coleman, Wahls, Baker, and Leavens in <ref> [Col91, CB94, WBL93, LWBL96] </ref>. In this approach the types of flows are modeled abstractly using the discrete mathematical structures set, sequence, and tuple. Assertions are formed using a fixed set of operations over these intrinsic types, e.g., [ for sets and nlength for sequences.
Reference: [SB96] <author> J. Symanzik and A.L. Baker. </author> <title> Timed data flow diagrams. </title> <type> Technical Report 96-12, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> October </month> <year> 1996. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: In the example presented in Section 4, the basic unit of time is a single state change in the execution of a NET-SPECS model of a network, i.e. the firing of a single bubble. However, we will generalize this notion of time in NET-SPECS along the lines taken in <ref> [SB96] </ref>. Regardless of the specification of time, we define a new "bubble-like" entity in NET-SPECS, the T imer. Timers are like bubbles in that they are connected to other FDFD bubbles via outflows. Timers simply send tokens to bubbles based on a specified probability distribution over time.
Reference: [Wah95] <author> T. Wahls. </author> <title> On the Execution of High Level Formal Specifications. </title> <type> PhD thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1995. </year>
Reference-contexts: These efforts have yielded results like: * a simple, yet conveniently expressive, model-based specification language for C++ classes, SPECS-C++ [CB94, WBL94, Hav94]. * a technique for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions <ref> [Wah95, WBL94] </ref>. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization of data flow diagrams (FDFD's). [Col91, CB94, LWBL96].
Reference: [WBL93] <author> T. Wahls, A.L. Baker, and G.T. Leavens. </author> <title> An executable semantics for a formalized data flow diagram specification language. </title> <type> Technical Report 93-27, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> November </month> <year> 1993. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Persistent flows behave much like shared variables, but we do not use persistent flows in this paper and omit any further discussion of them. We are basing our NET-SPECS work on the definitions of FDFD's developed by Coleman, Wahls, Baker, and Leavens in <ref> [Col91, CB94, WBL93, LWBL96] </ref>. In this approach the types of flows are modeled abstractly using the discrete mathematical structures set, sequence, and tuple. Assertions are formed using a fixed set of operations over these intrinsic types, e.g., [ for sets and nlength for sequences. <p> A bubble is working when it has read its inflows but not yet written to its outflows. A bubble is idle at all other times. Initially, all bubbles are idle. The operational semantics of an FDFD is summarized below (a formal operational semantics is provided in <ref> [WBL93] </ref>): 1. Find the set of bubbles that may fire. This includes all bubbles in the working state, and any bubble in the idle state that has values on its inflows satisfying the enabling condition of at least one of its firing rules. 2.
Reference: [WBL94] <author> T. Wahls, A.L. Baker, and G.T. Leavens. </author> <title> The direct execution of specs-c++: A model-based specification language for c++ classes. </title> <type> Technical Report 94-02b, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, </institution> <address> IA 50011, </address> <month> November </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: 1 Introduction A group of researchers at Iowa State University has targeted their research, in part, toward making formal software development methods more effective in real software development environments. These efforts have yielded results like: * a simple, yet conveniently expressive, model-based specification language for C++ classes, SPECS-C++ <ref> [CB94, WBL94, Hav94] </ref>. * a technique for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions [Wah95, WBL94]. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization <p> These efforts have yielded results like: * a simple, yet conveniently expressive, model-based specification language for C++ classes, SPECS-C++ [CB94, WBL94, Hav94]. * a technique for the direct execution of assertions in SPECS-C++, e.g., precondition and postcondition assertions for C++ class member functions <ref> [Wah95, WBL94] </ref>. * a formal, integrated CASE test tool supporting the convenient testing of specified classes and automated testing of corresponding implementations [Gur94]. * an executable formalization of data flow diagrams (FDFD's). [Col91, CB94, LWBL96]. <p> But the work of Wahls, Baker and Leavens on the direct execution of FDFD's <ref> [WBL94] </ref> is, we believe, fundamental to the usefulness of NET-SPECS. It will allow the testing of the model as well as support the highly automated generation of a simulator for the modeled network.
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Yourdon Press Computing Series. Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year> <month> 12 </month>
Reference-contexts: We also summarize our plans for continuing our research in this concluding section. 2 Formalized Data Flow Diagrams This section briefly introduces FDFD's, which are based on traditional data flow diagrams (DFD's) <ref> [DeM78, You89] </ref>. Informally, a DFD is a directed graph in which the arcs are called flows and the nodes are bubbles, stores, or terminators. Bubbles represent data transformers, stores typically represent persistent data, and terminators represent sources and sinks of information.
References-found: 11

