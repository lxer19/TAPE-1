URL: ftp://ftp.cs.rochester.edu/pub/u/rosca/gp/97.gp.ps.gz
Refering-URL: http://www.cs.rochester.edu/u/rosca/research.html
Root-URL: 
Email: E-mail: rosca@cs.rochester.edu  
Title: Analysis of Complexity Drift in Genetic Programming  
Author: Justinian P. Rosca 
Address: Rochester NY 14627  
Affiliation: Computer Science Department University of Rochester  
Abstract: One serious problem of standard Genetic Programming (GP) is that evolved structures appear to drift towards large and slow forms on average. This paper presents a novel analysis of the role played by variable complexity in the selection and survival of GP expressions. It defines a particular property of GP representations, called rooted tree-schema, that sheds light on the role of variable complexity of evolved structures. A rooted tree-schema is a relation on the space of tree-shaped structures which provides a quantifiable partitioning of the search space. The paper analyzes the influence of parsimony pressure on selection and growth of structures. Experimental ev idence confirms theoretical predictions.
Abstract-found: 1
Intro-found: 1
Reference: <author> L. Altenberg. </author> <title> The schema theorem and price's theorem. </title> <editor> In L. D. Whitley and M. D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 23-49, </pages> <address> 1995. </address> <publisher> Morgan Kauf-mann. </publisher>
Reference-contexts: Generalized schemata can be defined by partitioning the space of structures with many other relations. Relations analogous to the Schema Theorem will hold for these other representations as well (Radcliffe1991). Al-tenberg <ref> (Altenberg1995) </ref> brought the attention on Price's theory and its general implications in GA theory. Although he dismissed the merit of current interpretations of the schemata theory in explaining GA performance, he pointed out that the schema theorem is a particular case of Price's covariance theorem.
Reference: <author> D. Andre and A. Teller. </author> <title> A study in program response and the negative effects of introns in genetic programming. </title>
Reference: <editor> In J. R. Koza, D. E. Goldberg, D. B. Fogel, and R. L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 12-20, </pages> <address> 1996. </address> <publisher> The MIT Press. </publisher>
Reference: <author> P. J. Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In K. E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: <author> S. Geman, E.Bienenstock, and R.Doursat. </author> <title> Neural networks and the bias/variance dilemma. </title> <journal> Neural Computation, </journal> (4):1-58, 1992. 
Reference-contexts: In statistical terms this is the problem of learning with low bias or tabula-rasa learning. However, low bias in the choice of models is paid for by a high variance (see <ref> (Geman et al.1992) </ref> for an excellent introduction to the bias/variance dilemma). Methods for balancing bias and variance include techniques that rely on a complexity penalty function which is added to the error term in order to promote parsimonious solutions.
Reference: <author> D. E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Such schemata are building blocks. Good individuals tend to be made up of good schemata, i.e. building blocks. The GA discovers and recombines such building blocks in parallel to create solutions. This is the essence of the Building Block Hypothesis as presented in <ref> (Goldberg1989) </ref>. Moreover, Holland argued that the search for an optimal string combines exploitation (preservation of schemata) and exploration (creation of new schemata) in close to an optimal proportion.
Reference: <author> J.J. Grefenstette and J.E. Baker. </author> <title> How genetic algorithms work: a critical look at implicit parallelism. </title> <editor> In J.D. Schaffer, editor, </editor> <booktitle> Proceedings of the 3rd International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference: <author> J. H. Holland. </author> <title> Adaptation in Natural and Artificial Systems, An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence. </booktitle> <institution> The University of Michigan, </institution> <address> 1st edition, </address> <year> 1975. </year>
Reference-contexts: The Schema Theorem gives an estimate of the change in the frequency of a schema in the population as a result of fitness-proportionate reproduction, crossover, and mutation <ref> (Holland1975) </ref>. The theorem has been interpreted as showing that schemata with fitness values above population average, of low order and short length all intuitive conditions for a super-unitary growth factor of a schema will receive an exponentially increasing number of samples in the next generations. Such schemata are building blocks. <p> The argument relied on the analogy between the allocation of samples to schemata in the GA with the allocation of search effort in the Two-Armed-Bandit problem <ref> (Holland1975) </ref>. Schemata theory has been criticized for not reflecting the processing done by a GA and not being really informative (Grefenstette and Baker1989; Muhlenbein1991). Some of the discussions of schemata theory caveats, such as that schema frequency variation in disharmony with the Schema Theorem, are summarized in (Mitchell1996).
Reference: <author> H. Iba, H. de Garis, and Taisuke Sato. </author> <title> Genetic programming using a minimum description length principle. </title> <editor> In K.Kinnear Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Nonetheless GP manages to sample the space of programs and to discover automatically satisfiable models of variable complexity. The MDL principle has been also applied in GP to extend the fitness function of hybrid classification models <ref> (Iba et al.1994) </ref>. For example (Iba et al.1994) applied the MDL principle in the learning rule of a GP-regression tree hybrid. (Zhang and Muhlenbein1995) used an adaptive parsimony strategy in a GP-neural net hybrid. <p> Nonetheless GP manages to sample the space of programs and to discover automatically satisfiable models of variable complexity. The MDL principle has been also applied in GP to extend the fitness function of hybrid classification models <ref> (Iba et al.1994) </ref>. For example (Iba et al.1994) applied the MDL principle in the learning rule of a GP-regression tree hybrid. (Zhang and Muhlenbein1995) used an adaptive parsimony strategy in a GP-neural net hybrid. <p> MDL-based fitness functions have been unsuccessful in the case of GP evolving pure program structures. Iba outlined that the MDL-based fitness measure can be applied to problems satisfying the "size-based performance" criterion <ref> (Iba et al.1994) </ref>, where the more the tree structure grows the better its performance becomes.(Rosca and Ballard1994) has used the MDL principle to assess the suitability of an extension of GP with subroutines called adaptive representation (AR).
Reference: <author> J. R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Genetic programming (GP) uses open-ended complexity representations of flexible semantics <ref> (Koza1992) </ref>. GP evolves a population of expressions in some problem dependent language that encode problem solutions. <p> Let f H be the average fitness of all trees matching H in the population and f be the average fitness of the population. 1 Consider the standard GP procedure, as defined in <ref> (Koza1992) </ref>, that uses fitness proportionate selection for reproduction. Offspring are created through copying, tree crossover, and mutation. The probabilities for crossover and mutation are respectively p c and p m . Let also p d = p c + p m .
Reference: <editor> J. R. Koza. </editor> <booktitle> Genetic Programming II. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Tackett also suggested that the larger programs selected by GP contain introns that comprise useful subexpressions, thus correlating bloating with hitchhiking. Another suggestion for confining the increase in complexity is to employ modular GP extensions such as algorithms based on the evolution of the architecture <ref> (Koza1994) </ref>, heuristic extensions for the discovery of subroutines (Rosca and Ballard1994; Rosca and Bal-lard1996a), or GP with architecture modifying operation using code duplication (Koza1995).
Reference: <author> J. R. Koza. </author> <title> Gene duplication to enable genetic programming to concurrently evolve both the architecture and work-performing steps of a computer program. </title> <editor> In C. S. Mel-lish, editor, </editor> <booktitle> IJCAI, </booktitle> <volume> volume 1, </volume> <pages> pages 734-740. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: Another suggestion for confining the increase in complexity is to employ modular GP extensions such as algorithms based on the evolution of the architecture (Koza1994), heuristic extensions for the discovery of subroutines (Rosca and Ballard1994; Rosca and Bal-lard1996a), or GP with architecture modifying operation using code duplication <ref> (Koza1995) </ref>.
Reference: <author> M. Li and P. Vitanyi. </author> <title> An Introduction to Kolmogorov Complexity and its Applications. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This idea resonates with one of the fundamental principles in inductive learning represented by Ockham's razor principle. One common approach to dealing with a variable complexity model within the Bayesian estimation framework is Rissanen's minimum description length (MDL) principle <ref> (Li and Vitanyi1993) </ref>. The MDL principle trades off the model code length, i.e. the complexity term, against the error code length, i.e. the data not explained by the model or error term. Complexity is naturally expressed as the size of code or data in bits of information.
Reference: <author> H. Muhlenbein. </author> <title> Evolution in time and space the parallel genetic algorithm. </title> <editor> In G. J.E. Rawlins, editor, </editor> <booktitle> Foundations of Genetic Algorithms 1, </booktitle> <pages> pages 316-337, </pages> <address> 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> M. Mitchell. </author> <title> An Introduction To Genetic Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Schemata theory has been criticized for not reflecting the processing done by a GA and not being really informative (Grefenstette and Baker1989; Muhlenbein1991). Some of the discussions of schemata theory caveats, such as that schema frequency variation in disharmony with the Schema Theorem, are summarized in <ref> (Mitchell1996) </ref>. Generalized schemata can be defined by partitioning the space of structures with many other relations. Relations analogous to the Schema Theorem will hold for these other representations as well (Radcliffe1991). Al-tenberg (Altenberg1995) brought the attention on Price's theory and its general implications in GA theory.
Reference: <author> P. Nordin, F. Francone, and W. Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In J. P. Rosca, editor, </editor> <booktitle> Proceeedings of the Workshop on Genetic Programming: From Theory to Real-World Applications (NRL TR 95.2, University of Rochester), </booktitle> <pages> pages 6-22, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Related to the size problem (also called the bloating phenomenon), GP research has focused on the analysis of introns. Introns are pieces of code with no effect on the output. An analysis of introns goes hand in hand with an analysis of bloating. <ref> (Nordin et al.1995) </ref> tracked introns in an assembly language GP system based on a linear (sequential) but variable length program representation. The analysis suggested that the increase in size is a "defense against crossover." A similar conclusion is reached here in Theorem 1 (see section 9). <p> The analysis suggested that the increase in size is a "defense against crossover." A similar conclusion is reached here in Theorem 1 (see section 9). In the linear representation, the noticed increase in the size of programs was attributed to introns. <ref> (Nordin et al.1995) </ref> suggested that a representation which generates introns leads to better search effectiveness. For hierarchical GP representations (Rosca1996) showed that much of the size increase is due to ineffective code too.
Reference: <author> U. O'Reilly and F. Oppacher. </author> <title> The troubling aspects of a building block hypothesis for genetic programming. </title> <editor> In L. D. Whitley and M. D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 73-88, </pages> <address> 1995. </address> <publisher> Morgan Kauf-mann. </publisher>
Reference: <author> N. J. Radcliffe. </author> <title> Equivalence class analysis of genetic algorithms. </title> <journal> Complex Systems 5, </journal> (2):183-205, 1991. 
Reference-contexts: Generalized schemata can be defined by partitioning the space of structures with many other relations. Relations analogous to the Schema Theorem will hold for these other representations as well <ref> (Radcliffe1991) </ref>. Al-tenberg (Altenberg1995) brought the attention on Price's theory and its general implications in GA theory. Although he dismissed the merit of current interpretations of the schemata theory in explaining GA performance, he pointed out that the schema theorem is a particular case of Price's covariance theorem.
Reference: <author> J. P. Rosca and D. H. Ballard. </author> <title> Hierarchical self-organization in genetic programming. </title> <booktitle> In 11th ICML, </booktitle> <pages> pages 251-258. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Evolved modular programs theoretically have a lower descriptional complexity <ref> (Rosca and Ballard1994) </ref> and also appear to present better generality (Rosca1996; Rosca and Bal-lard1996b). 7 Conclusion This paper has addressed the issue of finding a relevant property of evolved structures whose analysis can provide insight into how GP works and reveal possible search limitations caused to the standard GP engine by
Reference: <author> J. P. Rosca and D. H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In P. Angeline and K. E. Kinn-ear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: In the linear representation, the noticed increase in the size of programs was attributed to introns. (Nordin et al.1995) suggested that a representation which generates introns leads to better search effectiveness. For hierarchical GP representations <ref> (Rosca1996) </ref> showed that much of the size increase is due to ineffective code too. However, the role of introns has been disputed in the case of GP using tree representations (Andre and Teller1996). Tackett pointed out that bloating cannot be selection-neutral (Tackett1994).
Reference: <author> J. P. Rosca and D. H. Ballard. </author> <title> Evolution-based discovery of hierarchical behaviors. </title> <booktitle> In Proc. of the Thirteenth National Conference on Artificial Intelligence (AAAI-96), </booktitle> <pages> pages 888-894. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: In the linear representation, the noticed increase in the size of programs was attributed to introns. (Nordin et al.1995) suggested that a representation which generates introns leads to better search effectiveness. For hierarchical GP representations <ref> (Rosca1996) </ref> showed that much of the size increase is due to ineffective code too. However, the role of introns has been disputed in the case of GP using tree representations (Andre and Teller1996). Tackett pointed out that bloating cannot be selection-neutral (Tackett1994).
Reference: <author> J. P. Rosca and D. H. Ballard. </author> <title> Variable complexity in evolutionary computation with tree representations. </title> <type> NRL Technical Report 96.5, </type> <institution> University of Rochester, Rochester, </institution> <address> New York, USA, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: In the linear representation, the noticed increase in the size of programs was attributed to introns. (Nordin et al.1995) suggested that a representation which generates introns leads to better search effectiveness. For hierarchical GP representations <ref> (Rosca1996) </ref> showed that much of the size increase is due to ineffective code too. However, the role of introns has been disputed in the case of GP using tree representations (Andre and Teller1996). Tackett pointed out that bloating cannot be selection-neutral (Tackett1994).
Reference: <author> J. P. Rosca. </author> <title> Generality versus size in genetic programming. </title>
Reference: <editor> In J. R. Koza, D. E. Goldberg, D. B. Fogel, and R. L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 381-387, </pages> <address> 1996. </address> <publisher> The MIT Press. </publisher>
Reference: <editor> C. O. Ryan. Pygmies and civil servants. In K. E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The quality and in particular the generality of solutions may also be improved in inductive problems. However, adding the right parsimony pressure has been more of an art. One example of avoiding this decision in an ad-hoc algorithm is "disassortative mating" <ref> (Ryan1994) </ref>. Related to the size problem (also called the bloating phenomenon), GP research has focused on the analysis of introns. Introns are pieces of code with no effect on the output.
Reference: <author> K. Sims. </author> <title> Artificial evolution for computer graphics. </title> <journal> Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 319-328, </pages> <month> July </month> <year> 1991. </year>
Reference: <author> W. A. Tackett. </author> <title> Recombination, Selection and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> USC, </institution> <year> 1994. </year>
Reference-contexts: For hierarchical GP representations (Rosca1996) showed that much of the size increase is due to ineffective code too. However, the role of introns has been disputed in the case of GP using tree representations (Andre and Teller1996). Tackett pointed out that bloating cannot be selection-neutral <ref> (Tackett1994) </ref>. He presented experiments suggesting that the average growth in size is proportional to the selection pressure. In our analysis, selection pressure itself is complexity dependent. Tackett also suggested that the larger programs selected by GP contain introns that comprise useful subexpressions, thus correlating bloating with hitchhiking.
Reference: <author> M. D. Vose and G.E. Liepins. </author> <title> Punctuated equilibria in genetic search. </title> <journal> Complex Systems, </journal> (5):31-44, 1991. 
Reference: <author> B. Zhang and H. Muhlenbein. </author> <title> Balancing accuracy and parsimony in genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(1) </volume> <pages> 17-38, </pages> <year> 1995. </year>
Reference-contexts: The MDL principle has been also applied in GP to extend the fitness function of hybrid classification models (Iba et al.1994). For example (Iba et al.1994) applied the MDL principle in the learning rule of a GP-regression tree hybrid. <ref> (Zhang and Muhlenbein1995) </ref> used an adaptive parsimony strategy in a GP-neural net hybrid. In both cases GP manipulates tree structures corresponding to a hierarchical multiple regression model of variable complexity, decision trees, or sigma-pi neural networks, rather than programs. <p> An expanded version of this paper builds upon the present analysis to design alternative approaches to simulating a parsimony component to fitness that do not result in a change of the fitness landscape (Rosca and Ballard1996c) as opposed to adaptive parsimony techniques <ref> (Zhang and Muhlen-bein1995) </ref>. Future theoretical developments could look at the role of the scale of fitness values and fitness transformations such as normalization when parsimony is considered. Further experimental work is needed to examine adaptive parsimony techniques and the code protection and hitchhiking functions of introns.
References-found: 29

