URL: http://http.cs.berkeley.edu/~fateman/282/fftnotes.ps
Refering-URL: http://http.cs.berkeley.edu/~fateman/282.html
Root-URL: http://www.cs.berkeley.edu
Title: 1 The Fast Fourier Transform 1.1 Introduction There are numerous directions from which one can
Author: R. Fateman 
Keyword: p() (n+1)=2 a)q() r()  
Note: A() i=0 in the form A() 0 1 n1 B a 1 a n1 C A A() a 0 (a 1 (a 2 xa n1  
Date: Fall, 1997  282  
Affiliation: UNIVERSITY OF CALIFORNIA College of Engineering Department of Electrical Engineering and Computer Sciences Computer Science Division  
Pubnum: Handout 2 CS  
Abstract: We (along with Geddes/Czapor/Labahn) take a rather simple view from the algebraic manipulation standpoint. As will be apparent shortly, we relate the FFT to the evaluation of a polynomial. We also consider it of interest primarily as an algorithm in a discrete (finite) computation structure rather than over the complex numbers. Given a univariate polynomial which we wish to evaluate at a point x, there are many ways to rearrange the calculation. For example, we can re-write Using Horner's rule, we can rewrite this as which can be shown to be optimal under reasonable conditions for evaluating a polynomial at a point. As explained for example in Borodin and Munro [1] p. 8-9, it will require n1 multiplications and n 1 additions. Although there are various tricks possible to pre-condition the polynomial we cannot in our circumstances, generally use such schemes economically: the algorithms we deal with will be handed the polynomial coefficients and the point x at the same time. We also prefer to do exact arithmetic over the integers. (see for example, Brassard [2] pp. 209 which illustrates how a monic polynomial p of degree n = 2 k 1 can be re-expressed as 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. B. Borodin and J. I. Munro, </author> <title> The Computational Complexity of Algebraic and Numeric Problems, </title> <publisher> American Elsevier, </publisher> <address> NY, NY. </address> <year> 1975. </year>
Reference-contexts: As explained for example in Borodin and Munro <ref> [1] </ref> p. 8-9, it will require n1 multiplications and n 1 additions.
Reference: [2] <author> Gilles Brassard and Paul Bratley, </author> <title> Algorithmics: Theory and Practice, </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: We also prefer to do exact arithmetic over the integers. (see for example, Brassard <ref> [2] </ref> pp. 209 which illustrates how a monic polynomial p of degree n = 2 k 1 can be re-expressed as p (x) = (x (n+1)=2 + a)q (x) + r (x) where a is a constant and q (x) and r (x) are monic polynomials of degree 2 k1 1.
Reference: [3] <author> Richard J. Bonneau, </author> <title> Fast Polynomial Operations using the Fast Fourier Transform, </title> <institution> Dept of Mathematics, MIT, </institution> <type> PhD dissertation, </type> <year> 1974. </year>
Reference-contexts: Winograd [?] have not, to our knowledge, been implemented in the context of algebraic manipulation. The generalization of the FFT to multivariate polynomials, and to a variety of polynomial problems, is discussed by R. Bonneau in his MIT thesis <ref> [3] </ref>. Various papers have tried to identify the sizes of polynomials for which the theoretical advantages actually translate into practical im provement (R. Moenck [6], R. Fateman [5]). The tradeoff points naturally depend on details of implementation. 5 1.3 The FFT Algorithm Input: k, A power of 2.
Reference: [4] <author> J. W. Cooley and J. Tukey, </author> <title> "An Algorithm for the Machine Calculation of Complex Fourier Series" Math Comp. </title> <month> 19 29-301 </month> <year> (1965) </year>
Reference-contexts: We will not consider ! to be a complex number, but rather an element of a finite field. In order to accomplish this matrix multiplication more rapidly, thus making it a Fast Fourier transform, we use the clever relationship pointed out by Cooley and Tukey in their 1965 paper <ref> [4] </ref> popularizing (and naming) the FFT.
Reference: [5] <author> R. Fateman, </author> <title> "A Case Study in Interlanguage Communication: Fast LISP Polynomial Operations written in `C' " Proc. </title> <booktitle> of 1981 ACM Symp. on Symbolic and Algebr. Computation, SYMSAC'81, </booktitle> <pages> 122-125. </pages>
Reference-contexts: Bonneau in his MIT thesis [3]. Various papers have tried to identify the sizes of polynomials for which the theoretical advantages actually translate into practical im provement (R. Moenck [6], R. Fateman <ref> [5] </ref>). The tradeoff points naturally depend on details of implementation. 5 1.3 The FFT Algorithm Input: k, A power of 2. A, a sequence of length k of elements in S, a finite computation structure. ! k , a kth root of unity in S. Output: ^ A 0.

References-found: 5

