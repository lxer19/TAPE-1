URL: http://www.cs.pitt.edu/~gupta/research/Comp/ppl97.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dm.html
Root-URL: 
Title: DEMAND-DRIVEN DATA FLOW ANALYSIS FOR COMMUNICATION OPTIMIZATION  
Author: Xin Yuan Rajiv Gupta Rami Melhem 
Keyword: Demand-driven data flow analysis, Global communication opti mization  
Address: Pittsburgh Pittsburgh, PA 15260, USA  Pittsburgh Pittsburgh, PA 15260, USA  Pittsburgh Pittsburgh, PA 15260, USA  
Affiliation: Department of Computer Science, The University of  Department of Computer Science, The University of  Department of Computer Science, The University of  
Note: Parallel Processing Letters c World Scientific Publishing Company  Received (received date) Revised (revised date) Communicated by (Name of Editor)  
Abstract: Exhaustive global array data flow analysis for communication optimization is expensive and considered to be impractical for large programs. This paper proposes a demand-driven analysis approach that reduces the analysis cost by computing only the data flow information related to optimizations. In addition, the analysis cost of our scheme can be effectively managed by trading space for time or compromising precision for time. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. P. Amarasinghe and M. S. Lam, </author> <title> Communication optimization and code generation for distributed memory machine, </title> <booktitle> in Proc. ACM SIGPLAN Conf. on Programming Languages Design and Implementation, </booktitle> <address> Albuquerque, NM, </address> <year> 1993, </year> <pages> 126-138. </pages>
Reference: 2. <author> D. Callahan and K. Kennedy, </author> <title> Analysis of interprocedural side effects in a parallel programming environment, </title> <journal> J. Parallel and Distributed Comput. </journal> <month> 5 </month> <year> (1988) </year> <month> 517-550. </month>
Reference-contexts: ALIGN (i, j) with VPROCS (i, j) :: x, y, z ALIGN (i, j) with VPROCS (2*j, i+1) :: w ALIGN (i) with VPROCS (i, 1) :: a, b Fig. 1: An example of an interval flow graph. The bounded regular section descriptor (BRSD) <ref> [2] </ref> is used to describe the array region. As discussed in [2], set operations can be efficiently performed on BRSDs. The region D is a vector of subscript values. <p> The bounded regular section descriptor (BRSD) <ref> [2] </ref> is used to describe the array region. As discussed in [2], set operations can be efficiently performed on BRSDs. The region D is a vector of subscript values.
Reference: 3. <author> S. Chakrabarti, M. Gupta and J. Choi, </author> <title> Global communication analysis and optimization, </title> <booktitle> in Proc. ACM SIGPLAN Conf. on Programming Language Design and Implementation, </booktitle> <address> Philadelphia, PA, </address> <year> 1996, </year> <pages> 68-78. </pages>
Reference: 4. <author> J.F. Collard, d. Barthou and P. Feautrier, </author> <title> Fuzzy array dataflow analysis, </title> <booktitle> in Proc. 5th ACM SIGPLAN Symp. on Principle & Practice of Parallel Programming, </booktitle> <address> Santa Barbara, CA, </address> <year> 1995, </year> <pages> 92-101. </pages>
Reference: 5. <author> E. Duesterwald, R. Gupta and M. L. Soffa, </author> <title> Demand-driven computation of interpro-cedural data flow, </title> <booktitle> in Proc. Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, CA, </address> <year> 1995, </year> <pages> 37-48. </pages>
Reference: 6. <author> C. Gong, R. Gupta and R. Melhem, </author> <title> Compilation techniques for optimizing communication on distributed-memory systems, </title> <booktitle> in Proc. International Conf. on Parallel Processing, </booktitle> <address> St. Charles, IL, </address> <booktitle> 1993, </booktitle> <volume> Vol. II, </volume> <pages> 39-46. </pages>
Reference: 7. <author> M. Gupta, E. Schonberg and H. Srinivasan, </author> <title> A unified framework for optimizing communication in data-parallel programs, </title> <journal> IEEE Trans. </journal> <note> on Parallel and Distributed Systems 7 (1996) 689-704. </note>
Reference-contexts: The analysis requires that there are no critical edges which connect a node with multiple outgoing edges to a node with multiple incoming edges. Critical edges can be removed by edge splitting transformation <ref> [7] </ref>. Fig. 1 shows an example interval flow graph. Node 9 in the example is an additional node inserted by the edge splitting transformation. The processor space is considered as an unbounded grid of virtual processors which is similar to a template in High Performance Fortran (HPF) [9]. <p> The expansion function has similar definition as in <ref> [7] </ref>.
Reference: 8. <author> S. Hiranandani, K. Kennedy and C. Tseng, </author> <title> Compiling Fortran D for MIMD distributed-memory machines, </title> <booktitle> Communications of the ACM 35 (1992) 66-80. </booktitle>
Reference: 9. <author> High Performance Fortran Forum, </author> <title> High performance Fortran language specification, </title> <type> Version 1.0 Technique Report CRPC-TR92225, </type> <institution> Rice University, </institution> <year> 1993. </year>
Reference-contexts: Fig. 1 shows an example interval flow graph. Node 9 in the example is an additional node inserted by the edge splitting transformation. The processor space is considered as an unbounded grid of virtual processors which is similar to a template in High Performance Fortran (HPF) <ref> [9] </ref>. All arrays are aligned to the virtual processor grid. In this paper when we refer to communication, we mean communication on the virtual processor grid. Communications in a 2 program are represented by Section Communication Descriptors (SCD). The SCD is an extension of array section descriptor.
Reference: 10. <author> K. Kennedy and N. Nedeljkovic, </author> <title> Combining dependence and data-flow analyses to optimize communication, </title> <booktitle> in Proc. 9th International Parallel Processing Symposium, </booktitle> <address> Santa Barbara, CA, </address> <year> 1995, </year> <pages> 340-346. </pages>
Reference-contexts: An important task for such compilers is to reduce communication costs through optimizations such as message vectorization and redundant communication elimination. Program analysis must be performed to obtain information required for the optimizations. Two different analysis approaches, one based on data dependence analysis <ref> [10] </ref> and the other using array data flow analysis [7,6], have been proposed. While the data dependence approach is more efficient in terms of the analysis cost, the array data flow analysis approach has the advantage of better precision.
Reference: 11. <author> R.E. Tarjan, </author> <title> Testing flow graph reducibility, </title> <journal> J. Comput. System Sci. </journal> <month> 9 </month> <year> (1974) </year> <month> 355-365. </month>
Reference-contexts: Note that analyzing communication for irregular problems, that is, array subscripts are not affine functions, requires totally different techniques and is beyond the scope of this paper. Our algorithm performs interval analysis on each subroutine in a demand driven manner. It uses a variant of Tarjan's intervals <ref> [11] </ref>. A subroutine is represented by an interval flow graph, G = (N; E) with nodes N and edges E. ROOT is a special node in N which is viewed as a header node for a subroutine.
Reference: 12. <author> X. Yuan, R. Gupta and R. Melhem, </author> <title> "An Array Data Flow Analysis Based Communication Optimizer." </title> <type> Technical Report, </type> <institution> TR-97-06, Department of Computer Science, University of Pittsburgh, </institution> <year> 1997. </year> <month> 12 </month>
Reference-contexts: In summary, we have shown that the demand driven data flow analysis proposed in this paper can be used to perform communication optimizations. These algorithms have been implemented in a global communication optimizer and have been shown to be effective both in terms of analysis cost and communication optimizations <ref> [12] </ref>.
References-found: 12

