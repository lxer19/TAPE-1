URL: ftp://ftp.cs.indiana.edu/pub/sdiwan/capab.ps.gz
Refering-URL: http://www.cs.indiana.edu/hyplan/sdiwan.html
Root-URL: http://www.cs.indiana.edu
Email: f sdiwan, gannong @cs.indiana.edu  
Title: A Capabilities Based Communication Model for High-Performance Distributed Applications: The Open HPC++ Approach  
Author: Shridhar Diwan, Dennis Gannon 
Address: Bloomington, IN 47401  
Affiliation: Department of Computer Science Indiana University  
Abstract: Typical high-performance distributed applications consist of clients accessing computational and information resources implemented by remote servers. Different clients may have different requirements for accessing a single server resource. A server resource may also want to provide different kinds of accesses for different clients, depending on factors such as the amount of trust between the server and a client. The requirements or attributes of remote accesses can be encapsulated under the concept of remote access capabilities. Capabilities can be used to model remote access attributes such as: data compression (or encryption) for arguments and return value, client authentication, and giving access to a subset of the server's interface. This paper presents a capabilities based model of communication and describes how it is implemented in a prototype programming environment called Open HPC++. In Open HPC++, capabilities are associated with a remote reference and thus determine the kind of remote access supported by the remote reference. Capabilities can be exchanged between communicating processes through remote invocation arguments and return values, and can also be changed dynamically to helps applications adapt to varying run-time environments. Apart from presenting the basic capabilities based model, this paper also describes how the capabilities based model works in tandem with the load-balancing features of Open HPC++ to help applications achieve higher performance. The paper presents a set of experiments to demonstrate the usefulness of the capabilities based model. It also describes Open HPC++'s communication protocol adaptivity mechanism, which is the basis of the capabilities based model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Dincer and G. Fox. </author> <title> Building a world-wide virtual machine based on web and HPCC technologies. </title> <booktitle> In Proceedings of Supercomputing, </booktitle> <month> November </month> <year> 1996. </year> <note> http://www.supercomp.org/sc96/ proceedings/ SC96PROC/ TOCPROC.HTM. </note>
Reference-contexts: Many meta-computing environments such as Legion [8], Globus [3] or WWVM <ref> [1] </ref> have been implemented for the development of heterogeneous, distributed, high-performance applications. Although Open HPC++ can be considered as a meta-computing environment, we are not trying to provide a complete meta-computing environment.
Reference: [2] <author> S. Diwan and D. Gannon. </author> <title> Adaptive Utilization of Communication and Computational Resources in High-Performance Distributed Systems: The EMOP Approach. </title> <booktitle> In Proceedings of the IEEE International Symposium on High Performance Distributed Computing (HPDC), </booktitle> <month> July </month> <year> 1998. </year> <month> 18 </month>
Reference-contexts: In this paper, we describe our initial experiments with a capabilities based model for accessing distributed server resources, carried out in the context of Open HPC++. Open HPC++ is a programming environment for building high-performance distributed applications (it is the successor of a system called EMOP <ref> [2] </ref>). Open HPC++ is modeled on the lines of the Common Object Request Broker Architec 2 ture (CORBA) [11] to implement seamless communication between distributed heterogeneous compo-nents. <p> Apart from its communication features, Open HPC++ also provides a flexible and powerful set of load-balancing mechanisms that can be used to implement custom load-balancing strategies (these mechanisms are borrowed from the EMOP programming environment and are described in detail in a paper on EMOP <ref> [2] </ref>). The capabilities based model works in tandem with the load-balancing mechanisms. For example, Open HPC++ provides an object migration mechanism. <p> At system initialization time, an application programmer can choose the proto-objects that constitute the default proto-pool, along with their preferential order. 3.2 Various Aspects of Communication Adaptivity This subsections briefly describes how Open HPC++ uses the above abstractions to implement adaptive utilization of communication resources. Please refer to <ref> [2] </ref> for a detailed discussion of the same. First let us see how the ORB uses the proto-objects and proto-classes to send a request from a GP to a server object. This is illustrated in Figure 3. <p> Open HPC++ provides a facility for objects to migrate from one context to another (it is implemented using a mechanism called Pseudo Migration which is described in detail in a paper on the EMOP system <ref> [2] </ref>). Now consider that the load on the server object's machine increases beyond a high-water mark and the application decides to migrate the server object S0 to a machine residing on the LAN of client P1 [Figure 8].
Reference: [3] <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <booktitle> The International Journal of Supercomputing Applications and High Performance Computing, </booktitle> <address> 11(2):115128, </address> <month> Summer </month> <year> 1997. </year>
Reference-contexts: For example, it is possible to implement a proto-class for the CORBA IIOP protocol [11] to communicate with CORBA objects, or even a DCOM [12] based proto-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion [8], Globus <ref> [3] </ref> or WWVM [1] have been implemented for the development of heterogeneous, distributed, high-performance applications. Although Open HPC++ can be considered as a meta-computing environment, we are not trying to provide a complete meta-computing environment.
Reference: [4] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> Multimethod communication for high-performance metacomput-ing applications. </title> <booktitle> In Proceedings of Supercomputing, </booktitle> <month> November </month> <year> 1996. </year> <note> http://www.supercomp.org/sc96/ proceedings/ SC96PROC/ TOCPROC.HTM. </note>
Reference-contexts: Open HPC++ blends the CORBA and HPC++ models with the principle of open implementation to provide communication adaptivity and remote access capabilities. Some systems provide features similar to the communication adaptivity features provided by Open HPC++. For example, Nexus 4.0 communication library <ref> [4] </ref> allows multiple communication methods, with either automatic or user-specified selection criteria; but unlike Open HPC++, it is not directly suitable for use at the application level because of the low-level nature of the facilities.
Reference: [5] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The nexus approach to integrating multithreading and communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 37:7082, </volume> <year> 1996. </year>
Reference-contexts: The server provides both the clients with copies of a global pointer that has two protocols, a simple communication protocol (e.g. one of Open HPC++'s default protocols based on the Nexus run-time system <ref> [5] </ref>), and a glue protocol that consists of a single capability implementing authentication. In the GP's OR, the glue protocol appears before the Nexus based protocol thus giving it preference over the latter. All of Open HPC++'s communication protocols, including the glue protocol, have an applicability attribute.
Reference: [6] <author> D. Gannon, P. Beckman, E. Johnson, and T. Green. </author> <title> Compilation Issues on Distributed Memory Systems, chapter 3: HPC++ and the HPC++Lib Toolkit. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Finally, section 9 presents the conclusion for the paper. 2 Open HPC++ Design Philosophy The design of the Open HPC++ communication model is based on the communication models of HPC++ (High-Performance C++) <ref> [6] </ref> and CORBA.
Reference: [7] <author> D. Gannon, R. Bramley, T. Stuckey, J. Villacis, J. Balasubramanian, E. Akman, F. Breg, S. Diwan, and M. Govindaraju. </author> <title> Component architectures for distributed scientific problem solving. </title> <journal> IEEE Computational Science and Engineering, </journal> <volume> 5(2), </volume> <year> 1998. </year>
Reference: [8] <author> A. Grimshaw, W. Wulf, J. French, A. Weaver, and P. Reynolds, Jr. </author> <title> A Synopsis of the Legion Project. </title> <type> Technical Report CS-94-20, </type> <institution> Department of Computer Science, University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: For example, it is possible to implement a proto-class for the CORBA IIOP protocol [11] to communicate with CORBA objects, or even a DCOM [12] based proto-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion <ref> [8] </ref>, Globus [3] or WWVM [1] have been implemented for the development of heterogeneous, distributed, high-performance applications. Although Open HPC++ can be considered as a meta-computing environment, we are not trying to provide a complete meta-computing environment.
Reference: [9] <author> INPRISE Corporation, Inc. </author> <title> VisiBroker for C++ 3.3: Programmer's Guide, </title> <note> 1998. http:// www.inprise.com/ techpubs/books/ visibroker/ vbcpp33/ index.html. </note>
Reference-contexts: Although the attributes provide a facility similar to Open HPC++ capabilities, the Open HPC++ capabilities are more general purpose and also work at the application level. Some Corba implementations provide facilities such as interceptors and smart stubs <ref> [9] </ref>. Although a combination of interceptors and smart stubs can be used to implement remote access capabilities, these two mechanisms are static, in the sense that they can only be used to implement capabilities that are determined at compile time.
Reference: [10] <author> G. Kiczales. </author> <title> Open implementation home page, </title> <month> May </month> <year> 1997. </year> <note> http://www.parc.xerox.com/spl/projects/oi/. </note>
Reference-contexts: But unlike the CORBA ORB, the Open HPC++ ORB does not completely hide its communication mechanism from its applications. It uses the principle of Open Implementation <ref> [10] </ref> to let its applications control its critical remote access decisions without getting them involved in the details of the communication mechanism. Using this principle, it supports multiple, possibly custom, communication protocols, as well as automatic run-time protocol selection, with optional user control over the selection process. <p> The Open ORB lets its applications control its communication protocol related decisions in a limited scope, while still hiding low-level details of the communication mechanism. What follows is a brief description of the principle of Open Implementation. 2.3.1 Open Implementation A system based on the principle of Open Implementation <ref> [10] </ref> lets its users access and control its critical implementation strategy decisions without involving them in the low level implementation details. By controlling specific implementation strategy decisions, a user can tune the system to gain certain benefits, such as better performance and flexibility.
Reference: [11] <institution> Object Management Group. CORBA/IIOP 2.2 Specification, </institution> <month> February </month> <year> 1998. </year>
Reference-contexts: Open HPC++ is a programming environment for building high-performance distributed applications (it is the successor of a system called EMOP [2]). Open HPC++ is modeled on the lines of the Common Object Request Broker Architec 2 ture (CORBA) <ref> [11] </ref> to implement seamless communication between distributed heterogeneous compo-nents. Like CORBA, it provides inter-operability between communicating components by specifying their interfaces in a meta-language, the Interface Definition Language (IDL), which is translated into the language of interacting components by a stub compiler. <p> Also, since Open HPC++'s open implementation is built at the application level, it can switch not only between low-level communication protocols, but also between complete communication systems at run-time. For example, it is possible to implement a proto-class for the CORBA IIOP protocol <ref> [11] </ref> to communicate with CORBA objects, or even a DCOM [12] based proto-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion [8], Globus [3] or WWVM [1] have been implemented for the development of heterogeneous, distributed, high-performance applications.
Reference: [12] <author> R. </author> <title> Sessions. COM and DCOM: Microsoft's Vision for Distributed Objects. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, </address> <year> 1997. </year>
Reference-contexts: For example, it is possible to implement a proto-class for the CORBA IIOP protocol [11] to communicate with CORBA objects, or even a DCOM <ref> [12] </ref> based proto-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion [8], Globus [3] or WWVM [1] have been implemented for the development of heterogeneous, distributed, high-performance applications.
References-found: 12

