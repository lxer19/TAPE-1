URL: ftp://mesquite.cs.panam.edu/pub/MENG/tcpsim.ps
Refering-URL: http://www.cs.panam.edu/meng/pub.html
Root-URL: http://www.cs.panam.edu
Email: meng@panam.edu  
Phone: (210) 316-7062 (phone) (210) 384-5099 (FAX)  
Title: Debugging Aid for Distributed Programs in TCP/IP Based Network  
Author: Xiannong Meng 
Keyword: Distributed programming, Computer networks, Debug  
Address: Edinburg, TX 78539  
Affiliation: Department of Computer Science University of Texas Pan American  
Abstract: Most programmers depend on repeatable behavior of the program to locate bugs of the program. In a sequential program, the execution of the program can easily be repeated. In a distributed program, however, the execution order of the program components varies from one run to another due to external factors such as network delay. It is very difficult, often impossible, to repeat the same sequence of execution. This makes the debugging of distributed program very difficult. This paper describes one tool that can aid debugging in distributed programming. The tool is written in such a way that the network functions of a distributed program can be replaced with the software modules that communicate through memory. The programmer can test the distributed program on a single machine when debugging. The network activities are simulated. The debugging programmer can use different random seed to try difference sequences of program execution. But each one is repeatable. In this way, most of the bugs can be found when debugging on a single machine. The programmer can then link the distributed program with real network library. No internal program changes are required, only linking with different libraries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cherri M. Pancake and Robert H. B. Netzer, </author> <title> A Bibliography of Parallel Debuggers, </title> <note> 1993 Edition, http://www.ncsa.uiuc.edu /Apps/MCS/other-sites.html </note>
Reference-contexts: Section 3 describes the design and the structure of the tool. Section 4 discusses some of the implementation issues, followed by concluding remarks in Section 5. 2 Related Works A large amount of literature is available concerning general issues of debugging in parallel and distributed programming environment <ref> [1] </ref>. We briefly examine here the works that closed related to what we do, i.e. replacing the network modules with user controllable in-memory module to aid the debugging process. There are a number of user-level TCP/IP implementations that are potentially possible to serve our purpose.
Reference: [2] <author> N. Hutchinson and L. Peterson, </author> <title> The x-kernel: An Architecture for Implementing Network Protocols, </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> Jan. </month> <year> 1991 </year>
Reference-contexts: We briefly examine here the works that closed related to what we do, i.e. replacing the network modules with user controllable in-memory module to aid the debugging process. There are a number of user-level TCP/IP implementations that are potentially possible to serve our purpose. The x-kernel <ref> [2] </ref> developed at the University of Arizona can support the implementation of TCP/IP at user space. With this implementation, the code can be modified so that the network traffic can be controlled and monitored and serve the purpose of debugging.
Reference: [3] <author> Alexander Dupuy (et al.) </author> <title> NEST: A Network Simulation Testbed, </title> <journal> Communications of the ACM, </journal> <month> Oct. </month> <year> 1991 </year>
Reference-contexts: A similar concept but different implementation was done at the University of Wash-ington [5], which supports user level protocol. Multiple protocols can co-exist. Similar to the work of x-kernel, the code can be modified to support the debug of distributed programming. NEST <ref> [3] </ref> is a network simulation tool. It can alter the characteristics of network traffic to help identify bugs in any user program. However, that implementation does not use the standard TCP/IP interface so it is difficult to extend the application to general TCP/IP based distributed programming.
Reference: [4] <author> David Ingham and Graham Parrington, </author> <month> Delayline: </month>
Reference-contexts: It can alter the characteristics of network traffic to help identify bugs in any user program. However, that implementation does not use the standard TCP/IP interface so it is difficult to extend the application to general TCP/IP based distributed programming. The Delayline project <ref> [4] </ref> uses local area network to simulate wide-area network so that all the network communication components needed in a wide-area network can be controlled and monitored in a local environment. The Delayline can help debug distributed programs written for wide-area networks.
References-found: 4

