URL: http://www.cs.umd.edu/users/musliner/papers/rtas95.ps.Z
Refering-URL: http://www.cs.umd.edu/users/musliner/
Root-URL: 
Title: Scheduling Issues Arising from Automated Real-Time System Design  as  
Author: David J. Musliner 
Note: Available  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies The University of Maryland  University of Maryland Department of Computer Science  
Pubnum: Technical Report CS-TR-3364, UMIACS-TR-94-118  
Email: musliner@umiacs.umd.edu  
Phone: (301) 405-6761  
Date: Revision 4:1  
Abstract: We have developed CIRCA, the Cooperative Intelligent Real-time Control Architecture, as a mechanism for automating the on-line, adaptive design of real-time systems. The real-time control tasks generated by CIRCA do not meet many of the simplifying assumptions made to develop traditional scheduling algorithms. We examine several problematic issues that arise in scheduling these automatically-generated real-time monitoring tasks, and describe two solution approaches. In the first approach, a drastic reformulation of the scheduling problem leads to a new, highly effective scheduling algorithm, at the cost of synchronous periodic behavior in scheduled tasks. In the second approach, measured alterations are made to task periods by a band-limited search algorithm, seeking to find nearby periods with a tractable LCM, so that traditional schedulers may be applied. We compare and contrast these approaches using experimental results from both randomly-generated task sets and task sets generated automatically by CIRCA. Our results reveal significant advantages for the modified scheduling algorithm, which is based on specifying invocation separations (or "distance constraints") rather than periods. The work reported in this paper was supported in part by the National Science Foundation under Grants IRI-9209031 and IRI-9158473, by a NSF Graduate Fellowship, and by the Arpa/Rome Laboratory Planning Initiative (F30602-93-C-0039). The opinions, findings, and recommendations expressed in this publication are those of the author, and do not necessarily reflect the views of the funding agencies. David Musliner is also affiliated with the UM Institute for Systems Research (NSF Grant NSFD CDR-88003012). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Y. Chan and F. Y. L. Chin, </author> <title> "General Schedulers for the Pinwheel Problem Based on Double-Integer Reduction," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 41, no. 6, </volume> <pages> pp. 755-768, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Thus it is important to minimize the changes to the task specifications, lest system utilization rise above the schedulable level. 5.1 Two-Factor Specialization for LCM Reduction The problem of scheduling TAPs is closely related to recent research on scheduling for "pinwheel" <ref> [1] </ref> and "distance-constrained" tasks [2]. Two major differences are that TAPs have non-unit WCETs and are not preemptible. However, both Han & Lin [2] and Chan & Chin [1] have investigated "specialization" methods that can convert inconvenient task specifications into tractable ones. <p> level. 5.1 Two-Factor Specialization for LCM Reduction The problem of scheduling TAPs is closely related to recent research on scheduling for "pinwheel" <ref> [1] </ref> and "distance-constrained" tasks [2]. Two major differences are that TAPs have non-unit WCETs and are not preemptible. However, both Han & Lin [2] and Chan & Chin [1] have investigated "specialization" methods that can convert inconvenient task specifications into tractable ones. We can use these methods to modify TAP invocation separations to achieve more convenient LCMs 3 .
Reference: [2] <author> C.-C. Han and K.-J. Lin, </author> <title> "Scheduling Distance-Constrained Real-Time Tasks," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 300-308, </pages> <year> 1992. </year>
Reference-contexts: In this paper, we focus new attention on the second numeric task specification, the task period. We show how, for a large class of real-world tasks, periods are not optimal specifications, and can be replaced with a less-constraining maximum invocation separation (or "distance constraint" <ref> [2] </ref>). We explore this observation in the context of the Cooperative Intelligent Real-time Control Architecture [7, 8]. CIRCA is a real-time AI architecture that combines positive aspects of both search-based AI planning technologies and hard-real-time scheduling and execution methods. <p> However, there are more subtle differences. One of the primary differences relates to synchronization; when using a traditional period specification and scheduling one invocation per period, the invocations remain synchronized with 1 A concept developed independently from, but essentially isomorphic with, the "distance constraint" of <ref> [2] </ref>. RTSS'94 submission Revision : 4:1 3 11:54 January 6, 1995 external clocks. That is, the tenth invocation of a task with a period of P = K seconds will occur between 9K and 10K seconds after the schedule begins executing. <p> Thus it is important to minimize the changes to the task specifications, lest system utilization rise above the schedulable level. 5.1 Two-Factor Specialization for LCM Reduction The problem of scheduling TAPs is closely related to recent research on scheduling for "pinwheel" [1] and "distance-constrained" tasks <ref> [2] </ref>. Two major differences are that TAPs have non-unit WCETs and are not preemptible. However, both Han & Lin [2] and Chan & Chin [1] have investigated "specialization" methods that can convert inconvenient task specifications into tractable ones. <p> utilization rise above the schedulable level. 5.1 Two-Factor Specialization for LCM Reduction The problem of scheduling TAPs is closely related to recent research on scheduling for "pinwheel" [1] and "distance-constrained" tasks <ref> [2] </ref>. Two major differences are that TAPs have non-unit WCETs and are not preemptible. However, both Han & Lin [2] and Chan & Chin [1] have investigated "specialization" methods that can convert inconvenient task specifications into tractable ones. We can use these methods to modify TAP invocation separations to achieve more convenient LCMs 3 .
Reference: [3] <author> T. J. Laffey, P. A. Cox, J. L. Schmidt, S. M. Kao, and J. Y. </author> <title> Read, "Real-Time Knowledge-Based Systems," </title> <journal> AI Magazine, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 27-45, </pages> <year> 1988. </year>
Reference-contexts: scheduling methods are significantly less effective on the tasks generated by CIRCA. 2 Overview of CIRCA The increasing complexity of real-time computer control systems has motivated a growing interest in applying mature AI techniques to the control of real-time systems, in an effort to develop more intelligent, flexible automated systems <ref> [3, 9, 10] </ref>. One way to achieve intelligent real-time control is to use AI methods to automatically design real-time control methods on-line, dynamically altering the executing control system in response to changes in the system's goals or its environment [8].
Reference: [4] <author> S. T. Levi, S. K. Tripathi, S. D. Carson, and A. K. Agrawala, </author> <title> "The MARUTI Hard Real-Time Operating System," </title> <journal> ACM Operating System Review, </journal> <volume> vol. 23, no. 3, </volume> , <month> June </month> <year> 1989. </year>
Reference-contexts: As a result, traditional schedulers that attempt to schedule calendars of task executions out to the LCM of the task periods (such as the Maruti scheduler <ref> [4] </ref>) will often be completely unable to deal with TAPs. For example, suppose we have a set of five TAPs with specified periods of 1866, 617, 541, 411, and 250 time units respectively. <p> In our ex RTSS'94 submission Revision : 4:1 9 11:54 January 6, 1995 periments, we have used the scheduler built into the Maruti hard real-time operating system <ref> [4] </ref> to test these concepts and provide performance results for comparison with our separation-based scheduler. 6 Performance Comparison To illustrate the comparative performance of these two approaches to scheduling, we will present results from tests run on large numbers of "artificial" task sets.
Reference: [5] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: We have taken two approaches to addressing this inadequacy. In the first approach, we have developed a unique scheduling mechanism designed to take advantage of the increased scheduling flexibility associated with TAPs and their invocation separations. 4 Modifying Traditional Scheduling The prototype Scheduler uses a modified deadline-driven scheduling algorithm <ref> [5, 11] </ref> to build a TAP schedule. Normally, this algorithm is used in the context of period-based scheduling, so that tasks are only considered "ready" for one invocation per period. However, the motivation for deadline-driven scheduling is not dependent on this aspect.
Reference: [6] <author> J. W.-S. Liu, K.-J. Lin, and S. Natarajan, </author> <title> "Scheduling Real-Time, Periodic Jobs Using Imprecise Results," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 252-260, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Recently, researchers have been flexing these requirements in a number of ways to accommodate the complexity, uncertainty, and dynamicity of real-world problems. For example, the requirement of a known WCET has been relaxed for imprecise computations <ref> [6] </ref>. In this paper, we focus new attention on the second numeric task specification, the task period. We show how, for a large class of real-world tasks, periods are not optimal specifications, and can be replaced with a less-constraining maximum invocation separation (or "distance constraint" [2]).
Reference: [7] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "CIRCA: A Cooperative Intelligent Real-Time Control Architecture," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> <pages> pp. 1561-1574, </pages> <year> 1993. </year>
Reference-contexts: We show how, for a large class of real-world tasks, periods are not optimal specifications, and can be replaced with a less-constraining maximum invocation separation (or "distance constraint" [2]). We explore this observation in the context of the Cooperative Intelligent Real-time Control Architecture <ref> [7, 8] </ref>. CIRCA is a real-time AI architecture that combines positive aspects of both search-based AI planning technologies and hard-real-time scheduling and execution methods. In the next section, we present a brief overview of CIRCA, viewing the system as a mechanism for automating the process of designing real-time reactive systems. <p> Such modifications are essential to automating the overall design process and having CIRCA adapt to dynamic, unpredictable environments. Space limitations preclude detailed descriptions of CIRCA's application domains, which have included an autonomous mobile robot and a simulated Puma arm <ref> [7] </ref>. This paper focuses on the scheduling phase: in what order should the RTS execute a set of automatically-generated TAPs? 3 The Scheduling Problem CIRCA's AI planning system generates a set of non-interruptible TAPs which must be executed sequentially on a single processor.
Reference: [8] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "World Modeling for the Dynamic Construction of Real-Time Control Plans," </title> <note> to appear in Artificial Intelligence, </note> <year> 1995. </year>
Reference-contexts: We show how, for a large class of real-world tasks, periods are not optimal specifications, and can be replaced with a less-constraining maximum invocation separation (or "distance constraint" [2]). We explore this observation in the context of the Cooperative Intelligent Real-time Control Architecture <ref> [7, 8] </ref>. CIRCA is a real-time AI architecture that combines positive aspects of both search-based AI planning technologies and hard-real-time scheduling and execution methods. In the next section, we present a brief overview of CIRCA, viewing the system as a mechanism for automating the process of designing real-time reactive systems. <p> One way to achieve intelligent real-time control is to use AI methods to automatically design real-time control methods on-line, dynamically altering the executing control system in response to changes in the system's goals or its environment <ref> [8] </ref>. Illustrated in Figure 1, CIRCA automates the entire process of building a real-time system, from planning tasks, to deriving their constraints, to scheduling them, and finally to executing them predictably. <p> Given these specifications, CIRCA's AI subsystem builds a reactive control plan using lookahead RTSS'94 submission Revision : 4:1 1 11:54 January 6, 1995 planning methods described fully in <ref> [8] </ref>. The planned reactions are cast in the form of simple Test-Action Pairs (TAPs) that specify the appropriate control actions for various possible future states of the world.
Reference: [9] <author> D. J. Musliner, J. A. Hendler, A. K. Agrawala, E. H. Durfee, and J. K. Strosnider, </author> <title> "The Challenges of Real-Time AI," </title> <note> to appear in IEEE Computer, </note> <year> 1995. </year>
Reference-contexts: scheduling methods are significantly less effective on the tasks generated by CIRCA. 2 Overview of CIRCA The increasing complexity of real-time computer control systems has motivated a growing interest in applying mature AI techniques to the control of real-time systems, in an effort to develop more intelligent, flexible automated systems <ref> [3, 9, 10] </ref>. One way to achieve intelligent real-time control is to use AI methods to automatically design real-time control methods on-line, dynamically altering the executing control system in response to changes in the system's goals or its environment [8].
Reference: [10] <author> K. G. Shin and P. Ramanathan, </author> <title> "Real-Time Computing: A New Discipline of Computer Science and Engineering," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 6-24, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: scheduling methods are significantly less effective on the tasks generated by CIRCA. 2 Overview of CIRCA The increasing complexity of real-time computer control systems has motivated a growing interest in applying mature AI techniques to the control of real-time systems, in an effort to develop more intelligent, flexible automated systems <ref> [3, 9, 10] </ref>. One way to achieve intelligent real-time control is to use AI methods to automatically design real-time control methods on-line, dynamically altering the executing control system in response to changes in the system's goals or its environment [8].
Reference: [11] <author> E. Walden and C. V. Ravishankar, </author> <title> "Algorithms for Real-Time Scheduling Problems," </title> <type> Technical Report CSE-TR-92-91, </type> <institution> University of Michigan, Computer Science and Engineering, </institution> <month> April </month> <year> 1991. </year> <note> RTSS'94 submission Revision : 4:1 15 11:54 January 6, </note> <year> 1995 </year>
Reference-contexts: We have taken two approaches to addressing this inadequacy. In the first approach, we have developed a unique scheduling mechanism designed to take advantage of the increased scheduling flexibility associated with TAPs and their invocation separations. 4 Modifying Traditional Scheduling The prototype Scheduler uses a modified deadline-driven scheduling algorithm <ref> [5, 11] </ref> to build a TAP schedule. Normally, this algorithm is used in the context of period-based scheduling, so that tasks are only considered "ready" for one invocation per period. However, the motivation for deadline-driven scheduling is not dependent on this aspect. <p> Normally, this algorithm is used in the context of period-based scheduling, so that tasks are only considered "ready" for one invocation per period. However, the motivation for deadline-driven scheduling is not dependent on this aspect. As described in <ref> [11] </ref>, Jackson's theorem justifies deadline-driven scheduling by noting that, if two tasks T 1 ; T 2 have respective execution RTSS'94 submission Revision : 4:1 4 11:54 January 6, 1995 times E 1 ; E 2 and deadlines D 1 ; D 2 , where (without loss of generality) D 1
References-found: 11

