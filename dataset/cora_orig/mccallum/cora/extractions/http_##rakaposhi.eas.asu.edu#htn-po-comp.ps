URL: http://rakaposhi.eas.asu.edu/htn-po-comp.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: on Comparative Analysis of Planning Systems Comparing Partial Order Planning and Task Reduction Planning: A
Author: Subbarao Kambhampati 
Address: Tempe AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University  
Note: Appears in the working notes of AAAI-94 Workshop  
Abstract: Although task reduction (HTN) planning historically preceded partial order (PO) planning, and is understood to be more general than the latter, very little analysis has been done regarding its performance. Part of the reason for this has been the lack of systematic understanding of the functionalities provided by HTN planning over and above that of partial order planning. HTN planning has been characterized as everything from a panacea for the problems of partial order planners to a mere ``efficiency hack'' on partial order planning. In this paper I will extend a generalized algorithm for partial order planning, that I developed recent work, to cover HTN planning. I will use this as a basis to separate the essential and inessential differences between HTN and partial order planning.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains. </title> <type> CSE TR 92-05-01, </type> <institution> University of Washington, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Of late, there has been a lot of interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types <ref> [12, 15, 14, 16, 1] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [26, 25].
Reference: [2] <author> A. Barrett and D. Weld. </author> <title> Schema Parsing: Hierarchical Planning for Expressive Languages. </title> <note> Submitted to AAAI-94. </note>
Reference-contexts: is still the search involved in dealing with interactions that arise in merging the different plan fragments. 12 Although it is theoretically possible to make reduction schemas correspond to primitive operators, it is more likely that reduction schemas in realistic domains correspond to large plan fragments. 13 Barrett and Weld <ref> [2] </ref> provide an interesting alternative approach for exploiting the efficiency aspect of task reduction schemas. They use HTN schemas to do incremental bottom-up parsing of the partial plans generated by a partial-order planner (UCPOP [22]), and prune any plans which do not have any parse.
Reference: [3] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: After all, the first big-shift from state-space planning used in STRIPS [10] was not to partial-order planning, but rather to HTN planning, as used in NOAH [24]. Indeed, partial order planning, as it is understood today, is an off-shoot of Chapman's work on nonlinear planning <ref> [3] </ref> (which, ironically enough, was intended to be a formalization of planners such as NOAH, fl This paper is also available as ASU CSE TR 94-001, March 1994. It reports on work in progress. Parts of it have developed out of the discussions in the ASU planning seminar.
Reference: [4] <author> M. Drummond. </author> <title> On precondition achievement and the computational economics of automatic planning. </title> <booktitle> In Proc. European Workshop on Planning Systems, </booktitle> <year> 1994. </year>
Reference-contexts: In particular, suppose the domain contains two actions a1 and a2. The solution plans produced by the partial order planners can be described by a regular language (such as fa1ja2g fl ), while that of HTN 8 In <ref> [4] </ref>, Drummond makes a similar point, suggesting that task-reduction schemas allow the user to not only specify what skeleton plan is used to achieve a goal, but also to specify a priori what causal dependencies must hold in the plan fragment.
Reference: [5] <author> G. Collins and L. Pryor. </author> <title> Achieving the functionality of filter conditions in partial order planner. </title> <booktitle> In Proc. 10th AAAI, </booktitle> <year> 1992. </year>
Reference-contexts: (see Section 3). 3 Clarifying some features of implemented HTN Planners One of the important advantages of the representation and candidate set semantics of the partial plans developed in Section 2 is that it allows us to put in perspective many of the features of HTN planning, including filter conditions <ref> [5] </ref>, abstraction vs. task reduction [17] and downward-unlinearizability [29]. In particular, a proper understanding of auxiliary constraints clarifies several misconceptions about the HTN planning. <p> Most previous work has characterized filter conditions as filtering out particular operators or task-reduction schemas from consideration. Unless the auxiliary constraints representing filter conditions are monotonic, this type of pruning can lead to loss of completeness. Some researchers (c.f. <ref> [5] </ref>) have suggested that unless filter conditions are used to prune, they do not affect the efficiency of planner in any way. In my view, the primary functionality of filters is not to improve efficiency, but to enable the user to disallow certain types of solutions. <p> that the main functionality provided by filter conditions, viz., to provide user control over the type of solutions returned by the planner, 5 Notice, once again, the similarity between filter conditions and the control over solutions provided by HTN planning; see Section 4.1. 6 In fact, even Pryor and Collins <ref> [5] </ref> do use filter condition satisfaction as part of the ranking metric in one of their experiments, and find that it substantially improves the performance of a partial order planner.
Reference: [6] <author> K. Erol, D. Nau and J. Hendler. </author> <title> Toward a general framework for hierarchical task-network planning. </title> <booktitle> In Proc. of AAAI Spring Symp. on Foundations of Automatic Planning. </booktitle> <year> 1993. </year>
Reference-contexts: Some argue that HTN planners have substantial formal as well as practical advantages over partial order planners, while others have taken the position that HTN planning is an ``efficiency hack.'' Some preliminary work towards providing independent formal semantics for HTN planning has already been initiated by Erol et. al. <ref> [6, 7] </ref>. The current paper attempts to tackle these issues by reconstructing HTN planning starting from partial order planning. Specifically, in my recent work [12, 15, 14], I have developed a generalized algorithm for partial order refinement planning. <p> While for the most part these comments have been made informally (e.g., in conference panels), some of them have also appeared in the literature (e.g. <ref> [6] </ref>). In this section, I will examine the expressiveness arguments. Intermediate Goals: Intermediate goals are useful to describe planning problems which cannot be defined in terms of the goal state alone. As an example, consider the goal of making a round trip from Phoenix to San Francisco. <p> Since the initial and final location of the agent is Phoenix, this goal cannot be modeled as a goal of attainment, i.e., a precondition of t 1 (unless time is modeled explicitly in the action representation [23]). It has been mentioned in the literature (c.f. <ref> [6] </ref>) that such goals cannot be be modeled in classical planning without hierarchical task reduction. To some extent, this claim is erroneous and needs to be qualified.
Reference: [7] <author> K. Erol, J. Hendler and D. Nau. </author> <note> HTN Planning: Complexity and Expressivity In Proc. AAAI-94 (to appear) </note>
Reference-contexts: Some argue that HTN planners have substantial formal as well as practical advantages over partial order planners, while others have taken the position that HTN planning is an ``efficiency hack.'' Some preliminary work towards providing independent formal semantics for HTN planning has already been initiated by Erol et. al. <ref> [6, 7] </ref>. The current paper attempts to tackle these issues by reconstructing HTN planning starting from partial order planning. Specifically, in my recent work [12, 15, 14], I have developed a generalized algorithm for partial order refinement planning. <p> Expressiveness: Claims that HTN planners can handle a larger class of goals and problems than PO planning. Efficiency: Claims that HTN planers are more ``efficient'' in plan generation than PO planners. 7 Erol et. al. <ref> [7] </ref> show that when there is a strict level associated with the tasks in the domain, then HTN planning is decidable. 4.1 Flexibility Arguments HTN planning has been considered to be more ``user-flexible'' and user-friendly than partial order planning. <p> For example, enforcing a restriction that the two segments of the round trip should 9 To my knowledge, the analogy between HTN task reduction schemas and operators in partial order planning on the one hand, and regular languages and Context Free Grammars on the other is first made by Erol <ref> [7] </ref>. However, Erol seems to use the analogy to explain the complexity of HTN planning, rather than to explain the types of functionalities it provides). involve the same mode of transportation.
Reference: [8] <author> K. Erol, J. Hendler and D. Nau. UMCP: </author> <title> A sound and complete procedure for Hierarchical Task-network planning. </title> <note> In Proc. AIPS-94 (to appear) </note>
Reference-contexts: Thus, the completeness of an HTN planner has to be defined with respect to both the domain actions, as well as the set of non-primitive tasks and the task reduction schemas (this is what Erol et. al. <ref> [8] </ref> do). 4.2 Expressiveness arguments An important class of advantages often associated with HTN planning are that of ``expressiveness'', or the ability to model a larger class of planning problems compared to PO planners.
Reference: [9] <author> K. Golden O. Etzioni and D. Weld. </author> <title> Omnipotence without Omniscience: Efficient sensor management for planning. </title> <note> Submitted to AIPS-94. </note>
Reference-contexts: While UCPOP itself uses static universe assumption and splits this goal into a large conjunctive goal, more recent partial order planners such as XII <ref> [9] </ref> also provide the capability to handle quantified effects in non-static universes (e.g., when the number of objects in the truck changes dynamically during plan execution).
Reference: [10] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. In Readings in Planning. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. After all, the first big-shift from state-space planning used in STRIPS <ref> [10] </ref> was not to partial-order planning, but rather to HTN planning, as used in NOAH [24].
Reference: [11] <author> M.G. Georgeff. </author> <title> Planning. In Readings in Planning. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: Most classical planning techniques have traditionally concentrated on the sub-class of behavioral constraints called the goals of attainment <ref> [11] </ref>, which essentially constrain the agent's attention to behaviors that end in world states satisfying desired properties. 2.1 Partial order planning Partial order planners search in the space of partial plans. 2 Partial plans are best seen as implicit representations for sets of ground operator sequences (potential solutions) [12, 15, 14].
Reference: [12] <author> S. Kambhampati. </author> <title> Planning as Refinement Search: A unified framework for comparative analysis of Search Space Size and Performance. </title> <type> Technical Report 93-004, </type> <institution> Arizona State University, </institution> <month> June, </month> <year> 1993. </year> <note> Available via anonymous ftp from enws318.eas.asu.edu:pub/rao </note>
Reference-contexts: 1 Introduction Of late, there has been a lot of interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types <ref> [12, 15, 14, 16, 1] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [26, 25]. <p> The current paper attempts to tackle these issues by reconstructing HTN planning starting from partial order planning. Specifically, in my recent work <ref> [12, 15, 14] </ref>, I have developed a generalized algorithm for partial order refinement planning. In this paper, I will extend that algorithm to cover HTN planners, and use the extended algorithm as a basis to do a careful analysis of the similarities and differences in the two planning paradigms. <p> of attainment [11], which essentially constrain the agent's attention to behaviors that end in world states satisfying desired properties. 2.1 Partial order planning Partial order planners search in the space of partial plans. 2 Partial plans are best seen as implicit representations for sets of ground operator sequences (potential solutions) <ref> [12, 15, 14] </ref>. In particular, a partial plan corresponds to a set of ground operator sequences that are consistent with the ordering, binding and auxiliary constraints on the plan. <p> A plan is said to be consistent with respect to an auxiliary constraint c if at least one ground linearization of the plan satisfies the constraint. 2 For a more formal development of the refinement search semantics of partial plans, see <ref> [15, 12] </ref> 3 The reason why we call the former candidate constraints and the latter solution constraints is that monotonic constraints must hold for every candidate of the plan, while solution constraints need only hold for the solution candidates.
Reference: [13] <author> S. Kambhampati. </author> <title> On the Utility of Systematicity: Understanding tradeoffs between redundancy and commitment in partial order planning. </title> <booktitle> In Proceedings of IJCAI-93, </booktitle> <year> 1993. </year>
Reference: [14] <author> S. Kambhampati. </author> <title> Design Tradeoffs in Partial Order (Plan Space) Planning. </title> <booktitle> In Proc. 2nd Intl. Conf. on AI Planning Systems (AIPS-94), </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Of late, there has been a lot of interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types <ref> [12, 15, 14, 16, 1] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [26, 25]. <p> The current paper attempts to tackle these issues by reconstructing HTN planning starting from partial order planning. Specifically, in my recent work <ref> [12, 15, 14] </ref>, I have developed a generalized algorithm for partial order refinement planning. In this paper, I will extend that algorithm to cover HTN planners, and use the extended algorithm as a basis to do a careful analysis of the similarities and differences in the two planning paradigms. <p> of attainment [11], which essentially constrain the agent's attention to behaviors that end in world states satisfying desired properties. 2.1 Partial order planning Partial order planners search in the space of partial plans. 2 Partial plans are best seen as implicit representations for sets of ground operator sequences (potential solutions) <ref> [12, 15, 14] </ref>. In particular, a partial plan corresponds to a set of ground operator sequences that are consistent with the ordering, binding and auxiliary constraints on the plan. <p> Whether or not this improves the overall performance of the planner depends to a large extent on the way solutions in the candidate set of the partial plan get split by tractability refinements <ref> [15, 14] </ref>. 2.2 HTN Planning The partial plan representations used in HTN planning are similar to partial order planning with one important exception. <p> However, I believe this does constitute a first step towards that goal. In particular, the understanding of the connections between HTN planning and partial order planning will mean that any insights regarding performance tradeoffs in partial order planning (e.g. <ref> [14, 20] </ref>) can be exploited in HTN planning. It could also help us in formulating focused empirical studies to understand the tradeoffs provided by the various features of HTN planners.
Reference: [15] <author> S. Kambhampati. </author> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> In Proc. 4th Intl. Conf. on Principles of Knowledge Representation and Reasoning (KR-94), </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Of late, there has been a lot of interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types <ref> [12, 15, 14, 16, 1] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [26, 25]. <p> The current paper attempts to tackle these issues by reconstructing HTN planning starting from partial order planning. Specifically, in my recent work <ref> [12, 15, 14] </ref>, I have developed a generalized algorithm for partial order refinement planning. In this paper, I will extend that algorithm to cover HTN planners, and use the extended algorithm as a basis to do a careful analysis of the similarities and differences in the two planning paradigms. <p> of attainment [11], which essentially constrain the agent's attention to behaviors that end in world states satisfying desired properties. 2.1 Partial order planning Partial order planners search in the space of partial plans. 2 Partial plans are best seen as implicit representations for sets of ground operator sequences (potential solutions) <ref> [12, 15, 14] </ref>. In particular, a partial plan corresponds to a set of ground operator sequences that are consistent with the ordering, binding and auxiliary constraints on the plan. <p> A plan is said to be consistent with respect to an auxiliary constraint c if at least one ground linearization of the plan satisfies the constraint. 2 For a more formal development of the refinement search semantics of partial plans, see <ref> [15, 12] </ref> 3 The reason why we call the former candidate constraints and the latter solution constraints is that monotonic constraints must hold for every candidate of the plan, while solution constraints need only hold for the solution candidates. <p> Whether or not this improves the overall performance of the planner depends to a large extent on the way solutions in the candidate set of the partial plan get split by tractability refinements <ref> [15, 14] </ref>. 2.2 HTN Planning The partial plan representations used in HTN planning are similar to partial order planning with one important exception.
Reference: [16] <author> C. Knoblock and Q. Yang. </author> <title> Evaluating the Tradeoffs in Partial-Order Planning Algorithms. </title> <booktitle> In Proc. Cana-dian Conference on Artificial Intelligence (AI-94), </booktitle> <month> May, </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Of late, there has been a lot of interest in understanding the tradeoffs provided by the different classical planning algorithms, with the objective of forming predictive hypotheses regarding the fit between particular algorithms and problem types <ref> [12, 15, 14, 16, 1] </ref>. One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan [26, 25].
Reference: [17] <author> D. Wilkins. </author> <title> Practical Planning: Extending the classical AI Planning Paradigm Morgan Kaufmann Publishers, </title> <address> San Mateo, CA (1988). </address>
Reference-contexts: One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE <ref> [17] </ref> and O-Plan [26, 25]. These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. <p> some features of implemented HTN Planners One of the important advantages of the representation and candidate set semantics of the partial plans developed in Section 2 is that it allows us to put in perspective many of the features of HTN planning, including filter conditions [5], abstraction vs. task reduction <ref> [17] </ref> and downward-unlinearizability [29]. In particular, a proper understanding of auxiliary constraints clarifies several misconceptions about the HTN planning. <p> It is equally possible to regain monotonicity by placing restrictions on the refinement operations. 3.2 Filter Conditions/Reduction Assumptions One of the aspects of HTN planning, that have been much misunderstood is the role of Filter conditions/Reduction assumptions in planning. The writers of HTN planners, including Oplan [26] and SIPE <ref> [17] </ref> swear by them, while some 4 Yang [29] phrases his restrictions in terms of the types of the reduction schemata allowed in the domain.
Reference: [18] <author> D. McDermott. </author> <title> Planning and Acting. In Readings in Planning, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo (1990) </address>
Reference-contexts: Looping and Iteration: Another expressiveness claim that is made in favor of HTN planning is regarding the ability to express looping and iteration. From the very beginning <ref> [18] </ref>, it has been noted that task reduction schemata provide a natural way to model looping. For example, suppose we want to model the task of emptying a truck. A natural way of doing this task is to keep removing one object at a time until the truck becomes empty.
Reference: [19] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. Subsequently, Pednault [21] and McAllester <ref> [19] </ref>, provided simpler formalizations of partial order planning without recourse to modal truth criteria, and sound and complete planners based on their formalizations have been implemented. domain writer in terms of specifying the types of ground op-erator sequences that are accepted solutions for the problem.
Reference: [20] <author> S. Minton, M. Drummond, J. Bresina and A. Philips. </author> <title> Total Order vs. Partial Order Planning: </title> <booktitle> Factors Influencing Performance In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: However, I believe this does constitute a first step towards that goal. In particular, the understanding of the connections between HTN planning and partial order planning will mean that any insights regarding performance tradeoffs in partial order planning (e.g. <ref> [14, 20] </ref>) can be exploited in HTN planning. It could also help us in formulating focused empirical studies to understand the tradeoffs provided by the various features of HTN planners.
Reference: [21] <author> E.P.D. Pednault. </author> <title> Synthesizing Plans that contain actions with Context-Dependent Effects. </title> <journal> Computational Intelligence, </journal> <volume> Vol. 4, </volume> <month> 356-372 </month> <year> (1988). </year>
Reference-contexts: This version of plan-space planning, without task reduction, has come to be known as ``partial order planning''. Subsequently, Pednault <ref> [21] </ref> and McAllester [19], provided simpler formalizations of partial order planning without recourse to modal truth criteria, and sound and complete planners based on their formalizations have been implemented. domain writer in terms of specifying the types of ground op-erator sequences that are accepted solutions for the problem.
Reference: [22] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A Sound, Complete, Partial Order Planner for ADL. </title> <booktitle> In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: This can be done by having a non-primitive task called Empty-truck, and a reduction method: Empty-truck ) [take out widget ! Empty truck]: The problem with these arguments is two fold: (i) many types of problems involving looping can in fact be handled by partial order planners such as UCPOP <ref> [22] </ref> with the help of quantified goals, and (ii) very few implemented HTN planners actually are capable of dealing with non-trivial forms of looping. <p> They use HTN schemas to do incremental bottom-up parsing of the partial plans generated by a partial-order planner (UCPOP <ref> [22] </ref>), and prune any plans which do not have any parse. An interesting open question is to what extent the functionality of HTN planning can be achieved through a partial order planner augmented with a schema-parser.
Reference: [23] <author> J.S. Penberthy. </author> <title> Planning with continuous change. </title> <type> Ph.D. Thesis. </type> <institution> CS-TR 93-12-01. University of Washington. </institution> <year> 1993. </year>
Reference-contexts: Since the initial and final location of the agent is Phoenix, this goal cannot be modeled as a goal of attainment, i.e., a precondition of t 1 (unless time is modeled explicitly in the action representation <ref> [23] </ref>). It has been mentioned in the literature (c.f. [6]) that such goals cannot be be modeled in classical planning without hierarchical task reduction. To some extent, this claim is erroneous and needs to be qualified.
Reference: [24] <author> E. Sacerdoti. </author> <title> A structure for Plans and Behavior Else-vier, </title> <publisher> North-Holland, </publisher> <address> New York (1977). </address>
Reference-contexts: From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. After all, the first big-shift from state-space planning used in STRIPS [10] was not to partial-order planning, but rather to HTN planning, as used in NOAH <ref> [24] </ref>. Indeed, partial order planning, as it is understood today, is an off-shoot of Chapman's work on nonlinear planning [3] (which, ironically enough, was intended to be a formalization of planners such as NOAH, fl This paper is also available as ASU CSE TR 94-001, March 1994.
Reference: [25] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, pages 888--893, </booktitle> <address> Boston, MA, </address> <year> 1977. </year>
Reference-contexts: One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan <ref> [26, 25] </ref>. These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. <p> However, as we discussed earlier, this should be seen as a feature rather than a bug, in that reduction schemas provide the user the flexibility to prune specific classes of plans. 13 Several other features, such as condition typing <ref> [25] </ref>, time-windows [27] and resource based reasoning [26, 28] have been claimed to be sources of efficiency for task reduction planning. efficiency in HTN planning. Although these ideas originated with HTN planners, they can also be used effectively in partial order planning.
Reference: [26] <author> K. Currie and A. Tate. O-Plan: </author> <title> The Open Planning Architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1), </volume> <year> 1991. </year>
Reference-contexts: One of the ironic things about all these analyses has been that the planning algorithms they consider, called partial order (PO) planning algorithms, differ from the algorithms used in many of the ``industrial strength'' classical planners, such as SIPE [17] and O-Plan <ref> [26, 25] </ref>. These planners use what is commonly called task-reduction planning or HTN (Hierarchical Task-network) planning paradigm. From a historical perspective, the lack of comparative work on HTN planning algorithms is quite puzzling. <p> It is equally possible to regain monotonicity by placing restrictions on the refinement operations. 3.2 Filter Conditions/Reduction Assumptions One of the aspects of HTN planning, that have been much misunderstood is the role of Filter conditions/Reduction assumptions in planning. The writers of HTN planners, including Oplan <ref> [26] </ref> and SIPE [17] swear by them, while some 4 Yang [29] phrases his restrictions in terms of the types of the reduction schemata allowed in the domain. <p> However, as we discussed earlier, this should be seen as a feature rather than a bug, in that reduction schemas provide the user the flexibility to prune specific classes of plans. 13 Several other features, such as condition typing [25], time-windows [27] and resource based reasoning <ref> [26, 28] </ref> have been claimed to be sources of efficiency for task reduction planning. efficiency in HTN planning. Although these ideas originated with HTN planners, they can also be used effectively in partial order planning.
Reference: [27] <author> S. Vere. </author> <title> Planning in Time: Windows and Durations for Activities and Goals. </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intell.. </journal> <volume> Vol 5., </volume> <pages> pp 246-267 (1983). </pages>
Reference-contexts: However, as we discussed earlier, this should be seen as a feature rather than a bug, in that reduction schemas provide the user the flexibility to prune specific classes of plans. 13 Several other features, such as condition typing [25], time-windows <ref> [27] </ref> and resource based reasoning [26, 28] have been claimed to be sources of efficiency for task reduction planning. efficiency in HTN planning. Although these ideas originated with HTN planners, they can also be used effectively in partial order planning.
Reference: [28] <author> D. Wilkins. </author> <title> Practical Planning. </title> <publisher> Morgan Kaufmann (1988). </publisher>
Reference-contexts: However, as we discussed earlier, this should be seen as a feature rather than a bug, in that reduction schemas provide the user the flexibility to prune specific classes of plans. 13 Several other features, such as condition typing [25], time-windows [27] and resource based reasoning <ref> [26, 28] </ref> have been claimed to be sources of efficiency for task reduction planning. efficiency in HTN planning. Although these ideas originated with HTN planners, they can also be used effectively in partial order planning.
Reference: [29] <author> Q. Yang. </author> <title> Formalizing Planning Knowledge for hierarchical planning. </title> <journal> Computational Intelligence, </journal> <volume> Vol 6, </volume> <pages> pp. </pages> <month> 12-24 </month> <year> (1990). </year>
Reference-contexts: put any restrictions on how this redirection needs to be achieved, we will see in Section 3.1 that some properties of the planner (such as the ability to prune plans that are inconsistent with respect to the protection constraints, without losing completeness) depend on specific types of merging strategies (c.f. <ref> [29] </ref>). A special type of non-primitive tasks are the so called achievement tasks (t : achieve (c)), which aim to make condition c true. The reduction of achievement tasks corresponds to the establishment refinement in PO planners. <p> implemented HTN Planners One of the important advantages of the representation and candidate set semantics of the partial plans developed in Section 2 is that it allows us to put in perspective many of the features of HTN planning, including filter conditions [5], abstraction vs. task reduction [17] and downward-unlinearizability <ref> [29] </ref>. In particular, a proper understanding of auxiliary constraints clarifies several misconceptions about the HTN planning. We will start by recalling the following points about auxiliary constraints: The auxiliary constraints give pruning only when they are monotonic (but can be used as selection heuristics if they are non-monotonic). <p> However, protection intervals can become non-monotonic in the presence of task reduction refinements. Specifically, a partial plan that is inconsistent with respect to its auxiliary constraints might become consistent after further task reduction. Thus, inconsistency with respect to protection intervals cannot be used to prune partial plans. Yang <ref> [29] </ref> noticed this phenomenon first, and developed certain restrictions on the way auxiliary constraints are redirected during task reduction (Section 2.2) 4 , under which the plans inconsistent with respect to protection intervals can be pruned without loss of completeness. <p> The writers of HTN planners, including Oplan [26] and SIPE [17] swear by them, while some 4 Yang <ref> [29] </ref> phrases his restrictions in terms of the types of the reduction schemata allowed in the domain.
References-found: 29

