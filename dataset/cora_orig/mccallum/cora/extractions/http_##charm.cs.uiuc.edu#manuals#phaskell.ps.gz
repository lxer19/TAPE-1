URL: http://charm.cs.uiuc.edu/manuals/phaskell.ps.gz
Refering-URL: http://charm.cs.uiuc.edu/manuals/
Root-URL: http://www.cs.uiuc.edu
Title: pH Language Reference Manual, Version 1.0|preliminary Computation Structures Group  
Author: Rishiyur S. Nikhil Arvind James Hicks Shail Aditya Lennart Augustsson Jan-Willem Maessen Yuli Zhou 
Affiliation: 00 Digital Equipment Corp, Cambridge Research Lab 01 MIT Lab for Computer Science, 11 Motorola Cambridge Research Center 10 Chalmers Univer sity of Technology, Goteborg  
Date: January 31, 1995  
Pubnum: Memo 369  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Gordon, K. Hammond, A. Gill, I. Poole, and J. Mattson. </author> <title> The Definition of Monadic IO for Haskell 1.3. </title> <note> Available as http://www.dcs.gla.ac.uk/~kh/Haskell1.3/IO.html. 23 </note>
Reference-contexts: c -&gt; Array a c instance (Ix a, Eq b) =&gt; Eq (Array a b) instance (Ix a, Ord b) =&gt; Ord (Array a b) instance (Ix a, Text a, Text b) =&gt; Text (Array a b) A.4 Prelude PreludeIO This module is based on the Haskell 1.3 IO proposal <ref> [1] </ref>. It is thus monadic in structure. It is built on a state transformer substrate (see the discussion of PreludeST, below). This enables operations on state and IO operations to be freely intermixed. The implementation of IO should, of course, be hidden from view.
Reference: [2] <author> P. Hudak, S. Peyton Jones, P. Wadler, B. Boutel, J. Fairbairn, J. Fasel, M. M. Guzman, K. Hammond, J. Hughes, T. Johnsson, R. Kieburtz, R. Nikhil, W. Partain, and J. Peterson. </author> <title> Report on the programming language haskell, a non-strict, purely functional language, version 1.2. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: 1 Introduction pH is a parallel language obtained by extending Haskell. This document must be read in conjunction with the Haskell Report <ref> [2] </ref> since it describes only the extensions. In Section 2 we present the syntax extensions proper. In Section 3 we present some examples to give a flavor of the language. In Section 4 we present commentary and rationale.
Reference: [3] <author> J.W. Maessen. </author> <type> Simplifying Parallel List Traversal Technical Report CSG Memo 370, </type> <institution> MIT Laboratory for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, USA, </address> <month> January 30, </month> <year> 1995. </year>
Reference-contexts: Definitions for all of these functions are given in Appendix A. A detailed discussion of these functions, their importance, and the ability of the compiler to optimize them can be found in <ref> [3] </ref>. 2 Note that a naive implementation may perform no optimization at all and simply define reduce to be the faster of these operations. 13 All of the omitted functions produce infinite lists. Of these, the most frequently used are enumFrom and enumFromBy.
Reference: [4] <author> R. S. Nikhil. </author> <title> Id (Version 90.1) Reference Manual. </title> <type> Technical Report CSG Memo 284-2, </type> <institution> MIT Laboratory for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, USA, </address> <month> July 15 </month> <year> 1991. </year> <month> 24 </month>
Reference-contexts: Background Haskell appears to be achieving its original goal of becoming the standard non-strict functional programming language. Current implementations of Haskell are based on sequential, lazy evaluation (except for the parallel implementation at Glasgow on GRIP). Id <ref> [4] </ref> is, and has always been, a parallel language. It is not a purely functional language, but has a non-strict functional language at its core, and the style of programming is predominantly the same as in Haskell.
References-found: 4

