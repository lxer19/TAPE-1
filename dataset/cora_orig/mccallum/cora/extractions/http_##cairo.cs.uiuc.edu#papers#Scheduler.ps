URL: http://cairo.cs.uiuc.edu/papers/Scheduler.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Email: h-chu3@cs.uiuc.edu, klara@cs.uiuc.edu  
Title: A Soft Real Time Scheduling Server in UNIX Operating System  
Author: Hao-hua Chu Klara Nahrstedt 
Keyword: Soft Real-Time Scheduling, Quality of Service, Unix, Continuous Media Processing.  
Address: Urbana Champaign  
Affiliation: Department of Computer Science University of Illinois at  
Abstract: We present a soft real-time CPU server for Continuous Media processing in the UNIX environment. The server is a daemon process from which applications can request and acquire soft real-time QoS (Quality of Service) Guarantees. Our server is an extension of the URsched scheduler. It provides (1) protection among real-time(RT) processes (2) fairness among RT and non-RT processes, (3) rate monotonic scheduling, (4) a fix to the UNIX security problem. We have implemented our protocol in the SUN Solaris 2.5 Operating System, and we have shown through experiments that our soft RT server provides predictable QoS for continuous media applications. We also discuss how we will fit the real-time server into our general Resource Broker Architecture in our future work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chen Lee, Ragunathan Rajkumar, and Cliff Mercer. </author> <title> "Experience with Processor Reservation and Dynamic QOS in Real-Time Mach". </title> <booktitle> Multimedia Japan, </booktitle> <year> 1996. </year>
Reference-contexts: Furthermore, the scheduling overhead can be expected to rise proportionally with increasing depth and breath of the hierarchical trees. Mercer, Savage, and Tokuda [4] implemented the Processor Capacity Reserves abstraction for the RT-threads in the RT Mach Operating System. A recent version <ref> [1] </ref> supports dynamic Quality adjustment policy. A new thread must first request its CPU QoS in the form of (period, requested CPU usage in percentage) during the 3 TABLE II URsched priority structure Priority Process RT class highest URsched scheduler 2nd highest Running RT process ..
Reference: [2] <author> Pawan Goyal, Xingang Guo, and Harrick Vin. </author> <title> "A Hierarchical CPU Scheduler for Multimedia Operating System". </title> <booktitle> The proceedings of Second Usenix Symposium on Operating System Design and Implementation. </booktitle>
Reference-contexts: II. Related Works The area of accommodating scheduling of soft RT applications on the current UNIX platforms was addressed by several groups. Goyal, Guo, and Vin <ref> [2] </ref> implemented the Hierarchical CPU Scheduler in the SUN Solaris 2.4. The CPU resource is partitioned into hierarchical classes, such as Real-time and Best-Effort classes, in a tree-like structure. A class can further partition its resource into subclasses.
Reference: [3] <author> Bill O. Gallmeister. </author> <title> "Programming for the Real World: POSIX.4". </title> <publisher> O'Reilly & Associates, INC. </publisher> <year> 1995. </year>
Reference: [4] <author> Clifford W. Mercer, Stefan Savage, and Hideyuki Tokuda. </author> <title> "Processor Capacity Reserves: Operating System Support for Multimedia Applications". </title> <booktitle> IEEE International Conference on Multimedia Computing and Systems. </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Fair sharing also does not translate directly into applications QoS guarantees that require a specific amount of CPU allocation and a constant periodicity. Furthermore, the scheduling overhead can be expected to rise proportionally with increasing depth and breath of the hierarchical trees. Mercer, Savage, and Tokuda <ref> [4] </ref> implemented the Processor Capacity Reserves abstraction for the RT-threads in the RT Mach Operating System. A recent version [1] supports dynamic Quality adjustment policy. <p> Compute Compile Latex TS UNIX 75.11s 141.36s 28.93s Server 90.90s 160.33s 33.24s as described in the Process Reserves Model in the RT Mach <ref> [4] </ref>. The user can get a good estimation by a few trial-and-error runs of the client programs. The execution time also depends on the state of memory contention and the resulting number of page faults.
Reference: [5] <author> Klara Nahrstedt. </author> <title> "Time-variant QoS Management". NSF Career Proposal. </title> <year> 1995. </year>
Reference: [6] <author> Jason Nieh, James G. Hanko, J. Duane Northcutt, and Gerard A. Wall. </author> <title> "SVR4 UNIX Scheduler Unacceptable for Multimedia Applications". </title> <booktitle> Fourth International Workshop on Network and Operating System Support for Digital Audio and Video. </booktitle> <month> November </month> <year> 1993. </year>
Reference: [7] <author> Jun Kamada, Masanobu Yuhara, Etsuo Ono. </author> <title> "User-level Realtime Scheduler Exploiting Kernel-level Fixed Priority Scheduler". </title> <booktitle> Multimedia Japan, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The kernel dispatcher is modified to schedule the RPUs using the Rate Monotonic algorithm. In order to increase the predictability and efficiency, the kernel dispatcher disallow preemptions during the middle of the RPU execution, called delay preemption and no asynchronous preemption. Kamada, Yuhara, and Ono <ref> [7] </ref> implemented the User-level RT Scheduler (URsched) in the SUN Solaris 2.4. The URsched approach is based on the POSIX.4 fixed priority extension and its priority scheduling rule.
Reference: [8] <author> Sandeep Khana, Michael Sebree, and John Zolnowsky. </author> <title> "Realtime Scheduling in SunOS 5.0". USENIX Winter 1992 Technical Conference. [9] "The Real-time Frame Scheduler in IRIX Programmer's Guide". Silicon Graphics, </title> <publisher> Inc. </publisher> <year> 1994. </year> <title> [10] "System Interfaces Guide". </title> <publisher> Sun Microsystems Inc. </publisher> <month> November </month> <year> 1995. </year> <title> [11] "SunOS Multi-thread Architecture". </title> <publisher> Sun Microsystems Inc. </publisher> <month> August </month> <year> 1995. </year>
Reference: [12] <author> Gopalakrishnan, R. </author> <title> "Efficient Quality of Service Support Within Endsystems for High Speed Multimedia Networking". </title> <type> PhD Thesis, </type> <institution> Washington University. </institution> <month> December 96. </month>
Reference-contexts: Each process specifies a reserve rate and a period for its admission control phase. During its execution phase, the reserve rate is adjusted upward or downward to match its actual usage rate in a gradual fashion. It is called rate adaptation. Gopalakkrishnan <ref> [12] </ref> implemented the Real Time Upcall (RTU) on the NetBSD UNIX to support periodic tasks. Each RTU is similar to a process, it contains an event handler that registers to the kernel its execution time and period.
Reference: [13] <author> David K.Y. Yau and Simon S. Lam. </author> <title> "Adaptive Rate-Controlled Scheduling for Multimedia Applications". </title> <booktitle> ACM Multimedia Conference '96, </booktitle> <address> Boston, MA, </address> <month> Nov </month> <year> 1996. </year>
Reference-contexts: It requires non-trivial modifications and computation overhead inside the UNIX kernel to support this abstraction, such as keeping track of the reserves database, and passing the client process's reserve to and between system threads. Yau and Lam <ref> [13] </ref> implemented the Adaptive Rate-Controlled Scheduling, which is a modification of the Virtual Clock Algorithm. Each process specifies a reserve rate and a period for its admission control phase.
Reference: [14] <author> Jane Liu, Kwei-Jay Lin, and Swaminathan Natarajan. </author> <title> "Scheduling real-time, periodic jobs using imprecise results". </title> <booktitle> In Proceedings, Real-Time Systems Symposium, </booktitle> <pages> pages 252-260, </pages> <address> San Jose, California, </address> <month> December </month> <year> 1987. </year>
Reference-contexts: The adaptive portion, up to M axQoS is dynamically adjusted by the resource management depending on its current resource consumption and the overall availability of the resources. This is similar to the Imprecise Computation model <ref> [14] </ref>. C. QoS Translation Service Fig. 5. QoS dependency graph for QoS Translation service The third issue is the complexity of the QoS specification. Most protocols require the specification of the QoS parameters at the resource level, e.g.
References-found: 11

