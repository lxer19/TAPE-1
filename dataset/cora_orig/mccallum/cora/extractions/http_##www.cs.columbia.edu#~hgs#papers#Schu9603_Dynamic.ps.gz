URL: http://www.cs.columbia.edu/~hgs/papers/Schu9603_Dynamic.ps.gz
Refering-URL: http://www.cs.columbia.edu/~hgs/resume/resume.html
Root-URL: http://www.cs.columbia.edu
Email: schulzrinne@fokus.gmd.de  
Title: Dynamic Configuration of Conferencing Applications using Pattern-Matching Multicast  
Author: Henning Schulzrinne 
Note: ToolTalk.  
Address: Fokus, Berlin  
Affiliation: GMD  
Abstract: Multimedia conferencing systems are usually large, complex software systems. We describe a local control architecture and communication protocols called pattern-matching multicast (PMM) that allow media agents, controllers and auxiliary applications such as media recorders and management proxies to be tied together into a single conference application. Unlike other systems, control of a single conference can be shared between several controllers. Each medium can be handled by one or more independent media agents. Parts of the system have been implemented using an IP-multicast-based audio conferencing tool (NeVoT). The communicating applications disseminate state and control information through a distributor. The distributor mainly limits distribution of messages based on expressed interest of other applications, thus implementing an application-level, receiver-driven local multicast. It also automatically starts applications as needed. The same inter-application protocol was also implemented using IP multicast restricted to the local host and can be based on other inter-process messaging services such as 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Casner and S. Deering, </author> <title> First IETF Internet audiocast, </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 22, </volume> <pages> pp. 92-97, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The set of conferencing tools built by a diverse set of research groups for use on the Internet multicast backbone (MBONE) <ref> [1, 2] </ref> departs from this approach. Here, each medium is typically handled by a distinct media agent, with control delegated to an external conference controller [3]. This separation allows to evolve individual media agents, local control, diversity and reuse of media agents.
Reference: [2] <author> H. Eriksson, MBONE: </author> <title> The multicast backbone, </title> <journal> Communications ACM, </journal> <volume> vol. 37, </volume> <pages> pp. 54-60, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The set of conferencing tools built by a diverse set of research groups for use on the Internet multicast backbone (MBONE) <ref> [1, 2] </ref> departs from this approach. Here, each medium is typically handled by a distinct media agent, with control delegated to an external conference controller [3]. This separation allows to evolve individual media agents, local control, diversity and reuse of media agents.
Reference: [3] <author> E. Schooler and S. L. Casner, </author> <title> An architecture for multimedia connection management, </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 22, </volume> <pages> pp. 73-74, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: The set of conferencing tools built by a diverse set of research groups for use on the Internet multicast backbone (MBONE) [1, 2] departs from this approach. Here, each medium is typically handled by a distinct media agent, with control delegated to an external conference controller <ref> [3] </ref>. This separation allows to evolve individual media agents, local control, diversity and reuse of media agents. For example, the same video application might be used both within seminar-style, loosely-controlled conferences initiated from a fl This work was supported in part by DeTeBerkom as part of the MMTnG project.
Reference: [4] <author> E. M. Schooler, </author> <title> The connection control protocol: Specification (version 1.1), </title> <type> technical report, </type> <institution> USC/Information Sciences Institute, Marina del Ray, California, </institution> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: ACM/Springer Multimedia Systems Journal, January 1996 1 multicast session listing service or centralized directories as well as a telephone-style, tightly-controlled con-ference based on invitations <ref> [4, 5] </ref>. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous [7, 8, 9, 10].
Reference: [5] <author> H. Schulzrinne, F. Oertel, and C. Zahl, </author> <title> Personal mobility for multimedia services in the internet. submitted to European Workshop on Interactive Distributed Multimedia Systems and Services, </title> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: ACM/Springer Multimedia Systems Journal, January 1996 1 multicast session listing service or centralized directories as well as a telephone-style, tightly-controlled con-ference based on invitations <ref> [4, 5] </ref>. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous [7, 8, 9, 10]. <p> Despite these arguments for separating inter-application interactions from conference control, many of the concepts and parameters may well carry over into the design of a conference control protocol. It may also turn out that the messages used in the invitation protocol <ref> [5] </ref> can be directly used for controlling applications, albeit with more parsing effort. However, using IP multicast for conference control poses a bootstrapping problem. All participants of a conference would somehow have to find out which multicast address and port to subscribe to first, requiring some form of global directory. <p> Finally, work on integrating a phone-style conference controller called CoCo is in progress <ref> [5] </ref>. Another ACM/Springer Multimedia Systems Journal, January 1996 12 small application planned that is easy to implement within this framework is a talk timer that would periodically summarize the activity of conferees, e.g., for the floor controller.
Reference: [6] <author> V. Jacobson, </author> <note> sd, the LBL session directory. Manual page, </note> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: ACM/Springer Multimedia Systems Journal, January 1996 1 multicast session listing service or centralized directories as well as a telephone-style, tightly-controlled con-ference based on invitations [4, 5]. Examples of a multicast directory include sd <ref> [6] </ref>), while WWW is becoming popular for centralized session rendezvous [7, 8, 9, 10]. Our approach presented here supports the goal of composing multimedia conferencing applications and, more generally, synchronous CSCW (computer supported cooperative work) tools, out of individual applications, both in the MBONE environment and elsewhere.
Reference: [7] <author> T. J. Frivold, R. E. Lang, and M. W. Fong, </author> <title> Extending WWW for synchronous collaboration, </title> <booktitle> in Proc. of the Second World Wide Web Conference '94: Mosaic and the Web, </booktitle> <address> (Chicago, Illinois), </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: ACM/Springer Multimedia Systems Journal, January 1996 1 multicast session listing service or centralized directories as well as a telephone-style, tightly-controlled con-ference based on invitations [4, 5]. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous <ref> [7, 8, 9, 10] </ref>. Our approach presented here supports the goal of composing multimedia conferencing applications and, more generally, synchronous CSCW (computer supported cooperative work) tools, out of individual applications, both in the MBONE environment and elsewhere.
Reference: [8] <author> J. Glicksman and V. Kumar, </author> <title> A SHAREd collaborative environment for mechanical engineers, </title> <booktitle> in Proc. of Groupware'93, </booktitle> <pages> pp. 335-447, </pages> <year> 1993. </year>
Reference-contexts: ACM/Springer Multimedia Systems Journal, January 1996 1 multicast session listing service or centralized directories as well as a telephone-style, tightly-controlled con-ference based on invitations [4, 5]. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous <ref> [7, 8, 9, 10] </ref>. Our approach presented here supports the goal of composing multimedia conferencing applications and, more generally, synchronous CSCW (computer supported cooperative work) tools, out of individual applications, both in the MBONE environment and elsewhere.
Reference: [9] <author> J. S. Donath and N. Robertson, </author> <title> The sociable web, </title> <booktitle> in Proc. of the Second World Wide Web Conference '94: Mosaic and the Web, </booktitle> <address> (Chicago, Illinois), </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: ACM/Springer Multimedia Systems Journal, January 1996 1 multicast session listing service or centralized directories as well as a telephone-style, tightly-controlled con-ference based on invitations [4, 5]. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous <ref> [7, 8, 9, 10] </ref>. Our approach presented here supports the goal of composing multimedia conferencing applications and, more generally, synchronous CSCW (computer supported cooperative work) tools, out of individual applications, both in the MBONE environment and elsewhere.
Reference: [10] <author> E. Shapiro, </author> <title> Virtual places a foundation for human interaction, </title> <booktitle> in Proc. of the Second World Wide Web Conference'94, </booktitle> <address> (Chicago, Illinois), </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: ACM/Springer Multimedia Systems Journal, January 1996 1 multicast session listing service or centralized directories as well as a telephone-style, tightly-controlled con-ference based on invitations [4, 5]. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous <ref> [7, 8, 9, 10] </ref>. Our approach presented here supports the goal of composing multimedia conferencing applications and, more generally, synchronous CSCW (computer supported cooperative work) tools, out of individual applications, both in the MBONE environment and elsewhere.
Reference: [11] <author> M. Handley, I. Wakeman, and J. Crowcroft, </author> <title> The conference control protocol (CCCP): a scalable base for building conference control applications, </title> <booktitle> in SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <address> (Cambridge, Massachusetts), </address> <pages> pp. 275-287, </pages> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: All of these interactions are between applications run by a single user. Communications between users is considered the realm of a conference control protocol. While it is possible to have a single protocol for both local, inter-application and inter-user interactions <ref> [11, 12] </ref>, we believe that requirements and functionality are sufficiently different to merit a split. We will briefly discuss the arguments in favor of splitting from the perspective of inter-application interaction at a single conferee. <p> It also offers the notion of filters, but with a somewhat more restricted functionality. Unfortunately, it is not available on all Unix platforms, nor on non-Unix operating systems, and seems to be largely unused except for the Sun desktop tools. The CCCP approach <ref> [11] </ref> to naming components is reflected in the message formats. PMM could also be considered as a status-based system, as used for control networks [36]. The idea of receiver-controlled message filters described here is similar in spirit to the stream filters central to the RSVP resource reservation protocol [37].
Reference: [12] <author> P. V. R. Rangan and D. C. Swinehart, </author> <title> Software architecture for integration of video services in the Etherphone environment, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1395-1404, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: All of these interactions are between applications run by a single user. Communications between users is considered the realm of a conference control protocol. While it is possible to have a single protocol for both local, inter-application and inter-user interactions <ref> [11, 12] </ref>, we believe that requirements and functionality are sufficiently different to merit a split. We will briefly discuss the arguments in favor of splitting from the perspective of inter-application interaction at a single conferee. <p> It differs in layering, but not functionality, from common notions where a conference is made up of members, each of whom participates in a set of media session. Hierarchical conference models are discussed in <ref> [12] </ref> and can be implemented by making the conference naming scheme more elaborate than the one described in Section 4.1. 3.2 Composing Conferencing Tools Based on the descriptions and requirements presented in the introduction, we now present a local application architecture particularly suited for composing multimedia conferencing applications from multiple, independently <p> PMM could also be considered as a status-based system, as used for control networks [36]. The idea of receiver-controlled message filters described here is similar in spirit to the stream filters central to the RSVP resource reservation protocol [37]. Rangan and Swinehart <ref> [12] </ref> present a conference control architecture that shares the division into conference controllers and media agents with PMM. However, there a single central entity per conference, the connection manager, handles both conference control and message distribution, while our approach separates the two functionalities. <p> However, there a single central entity per conference, the connection manager, handles both conference control and message distribution, while our approach separates the two functionalities. Similar to the request/response model used here, action reports ensure synchronized execution even with asynchronous message exchanges. The system in <ref> [12] </ref> also shares our concern with the ability to introduce recording and playback agents into conferences, but does not consider the issue of having several independent controlling entities.
Reference: [13] <author> J. K. Ousterhout, </author> <title> Tcl and the Tk Toolkit. </title> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Rather than bloating already complicated media agents (even assuming that access to source code or a cooperative author exists), these tasks are often ideally suited for implementation by users or local administrators as small scripts in an interpreted language, such as Tcl <ref> [13] </ref> or Perl [14]. The Tcl tool command language and the Unix shell share the same philosophy of composing larger applications from communicating components. While Tcl uses the send command to implement a remote procedure call, the Unix shell uses pipes to connect a linear sequence of independent tools. <p> All messages are sent as ASCII text and are formatted to be directly interpretable by a standard Tcl <ref> [13] </ref> interpreter. 3 This is also the reason for not having controllers listening directly to the RTCP multicast address. ACM/Springer Multimedia Systems Journal, January 1996 6 Messages name the object, followed by the operation to be applied to that object, followed by any parameters needed.
Reference: [14] <author> L. Wall and R. L. Schwartz, </author> <title> Programming perl. </title> <address> Sebastopol, California: O'Reilly, </address> <year> 1991. </year> <journal> ACM/Springer Multimedia Systems Journal, </journal> <month> January </month> <year> 1996 </year> <month> 16 </month>
Reference-contexts: Rather than bloating already complicated media agents (even assuming that access to source code or a cooperative author exists), these tasks are often ideally suited for implementation by users or local administrators as small scripts in an interpreted language, such as Tcl [13] or Perl <ref> [14] </ref>. The Tcl tool command language and the Unix shell share the same philosophy of composing larger applications from communicating components. While Tcl uses the send command to implement a remote procedure call, the Unix shell uses pipes to connect a linear sequence of independent tools.
Reference: [15] <author> H. Schulz-Rinne, </author> <title> The DSP workbench: Modeling parallel architectures as concurrent processes, </title> <booktitle> in 1986 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), </booktitle> <address> (Tokyo, Japan), </address> <pages> pp. </pages> <address> 54.9.1 - 54.9.4, </address> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1986. </year>
Reference-contexts: While Tcl uses the send command to implement a remote procedure call, the Unix shell uses pipes to connect a linear sequence of independent tools. A related approach for constructing digital signal processing simulators was presented in <ref> [15] </ref>. The approach presented here is geared towards exchanging control information rather than data; it is point-to-multipoint rather than two-party and is based, for the most part, on an asynchronous communication model rather than the reply-response model.
Reference: [16] <author> A. L. Ananda, B. H. Tay, and E. K. Koh, </author> <title> A survey of asynchronous remote procedure calls, </title> <journal> ACM Operating Systems Review, </journal> <volume> vol. 26, </volume> <pages> pp. 92-109, </pages> <month> Apr. </month> <year> 1992. </year>
Reference: [17] <author> E. Walker, P. Neves, and R. Floyd, </author> <title> Asynchronous remote operation execution in distributed systems, </title> <booktitle> in Proc. 10th International ConferenceDistributed Computing Systems (ICDCS-10), </booktitle> <address> (Paris, France), </address> <publisher> IEEE, </publisher> <month> May </month> <year> 1990. </year>
Reference: [18] <author> T. J. Frivold and R. E. Lang, </author> <title> Conference control glossary. based on presentation to MMUSIC working group at 27th IETF meeting, </title> <address> Amsterdam, Netherlands, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: We define media agents as a software entity that handles media-specific functions such as encoding, compression and transport packetization that are used by conferences. Media in a conference might include audio, video, graphics and text <ref> [18] </ref>. A conference may well have several distinct sessions of the same media type, say, two audio sessions with different languages or distinct video sessions for talking heads and document cameras.
Reference: [19] <author> B. Bhargava, E. Mafla, J. Riedl, and B. Sauder, </author> <title> Implementation and measurements of an efficient communication facility for distributed database systems, </title> <type> Technical Report CSD-TR-783, </type> <institution> Department of Computer Science, Purdue University, West Lafayette, </institution> <note> IN 47907-2004, </note> <month> June </month> <year> 1988. </year>
Reference-contexts: Details of the protocol will be discussed in Section 4. 3.3 IPC for Message Exchange These control messages could be delivered through any Unix IPC mechanism (Unix sockets, TCP connections, UDP messages, RPC, pipes, file system, .. .) or specialized in-memory multicast support <ref> [19] </ref>. Three IPC methods have been investigated. In the first, a per-user or per-host message distributor process called pmm (pattern matching multicastor) is used, listening for connections at a well-known TCP port.
Reference: [20] <author> S. E. Deering and D. R. Cheriton, </author> <title> Multicast routing in datagram internetworks and extended LANs, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 8, </volume> <pages> pp. 85-110, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: By default, a process receives no messages. In the third approach to inter-application communication, no distributor process is needed; instead, applications send UDP datagrams to an IP multicast address <ref> [20] </ref>. The reach of the multicast packets is restricted to the local host by setting their time-to-live value to zero 2 .
Reference: [21] <institution> SunSoft, ToolTalk 1.1.1. SunSoft, Mountain View, California, </institution> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: In particular, the ToolTalk service enables independent applications to communicate with each other without having direct knowledge of each other. Applications create and send ToolTalk messages to communicate with each other. The ToolTalk service receives these messages, determines the recipients, and then delivers the messages to the appropriate applications. <ref> [21] </ref> Similar ideas can be implemented within a distributed object environment such as CORBA [22]. As discussed in Section 5, our messaging protocol can easily move to these environments as well when they are generally available.
Reference: [22] <author> SunSoft, </author> <title> The messaging object service, </title> <type> white paper, </type> <institution> SunSoft, Mountain View, California, </institution> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Applications create and send ToolTalk messages to communicate with each other. The ToolTalk service receives these messages, determines the recipients, and then delivers the messages to the appropriate applications. [21] Similar ideas can be implemented within a distributed object environment such as CORBA <ref> [22] </ref>. As discussed in Section 5, our messaging protocol can easily move to these environments as well when they are generally available. The various approaches to implementing a messaging bus are summarized in Fig. 2; implementation aspects are discussed in Section 5.
Reference: [23] <author> H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson, RTP: </author> <title> A transport protocol for real-time applications. Internet draft (work-in-progress) draft-ietf-avt-rtp-*.txt, </title> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: The various approaches to implementing a messaging bus are summarized in Fig. 2; implementation aspects are discussed in Section 5. PMM uses constants and information provided by the Real-Time Transport Protocol (RTP) <ref> [23] </ref> and the audio/video profile of that protocol [24]. In RTP, each member of a session periodically announces itself by transmitting RTP control (RTCP) packets containing a globally unique canonical name, other business-card information and statistics describing media data sent and received.
Reference: [24] <author> H. Schulzrinne, </author> <title> RTP profile for audio and video conferences with minimal control, </title> <type> Internet Draft, </type> <institution> GMD Fokus, </institution> <month> July </month> <year> 1995. </year> <title> Work in progress. </title>
Reference-contexts: The various approaches to implementing a messaging bus are summarized in Fig. 2; implementation aspects are discussed in Section 5. PMM uses constants and information provided by the Real-Time Transport Protocol (RTP) [23] and the audio/video profile of that protocol <ref> [24] </ref>. In RTP, each member of a session periodically announces itself by transmitting RTP control (RTCP) packets containing a globally unique canonical name, other business-card information and statistics describing media data sent and received.
Reference: [25] <author> T. Berners-Lee, L. Masinter, and M. McCahill, </author> <title> Uniform resource locators (URL), </title> <type> RFC 1738, </type> <institution> Internet Engineering Task Force, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: C/audio/3/hgs@ursa.fokus.gmd.de is an example of such a fully qualified member name. Other naming schemes with the same properties can be used. In subsequent descriptions of messages, we will denote by sessionname the three-part session name and by membername the four-part member name. 4 We chose the URL <ref> [25] </ref> escaping convention for white space characters. 5 Conference control protocols may not name media instances at all. 6 Some manual configuration may be required if a user participates from several workstations.
Reference: [26] <author> J. Postel, </author> <title> Media type registration procedure, </title> <type> RFC 1590, </type> <institution> Internet Engineering Task Force, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: The conference name only has to be locally unique, but typically, that name will be the same as a global conference identifier advertised by, say, a session directory 4 . Media type names are drawn from the list of Internet media types <ref> [26] </ref>. The naming of media instances is a local matter, with the application creating it responsible for naming 5 . The media instances do not have to be numbered sequentially; a random identifier might simplify creation of sessions by several different controllers.
Reference: [27] <author> S. McCanne and V. Jacobson, </author> <title> vic: A flexible framework for packet video, </title> <booktitle> in Proc. of ACM Multimedia '95, </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: A receiver-oriented floor controller also uses these messages to grant and withdraw the floor, without needing cooperation from the sending side <ref> [27] </ref>. Since both media agents and controllers can initiate muting, we define a request message, membername receive flag, and a status indication, membername receiving flag. The controller would only change its member status display after receiving confirmation through the receiving message. <p> A simple video tool, NeViT (Network Video Terminal), that is shown in Fig. 4 is mainly intended for performance measurements. Existing media agents require adding a small interface layer that translates the messages into application-specific actions. This has been accomplished easily for the vic video tool <ref> [27] </ref>, as its user interface is also Tcl-based. Adding a similar interface to a WWW browser would allow sharing of a single browser between applications and remote-controlled slide shows. Some initial helper applications have been implemented. <p> Once the kernel or the audio device handles mixing, each conference should obtain its own port to reduce message handling overhead, as implemented in <ref> [27] </ref> (see Section 7). That port would be assigned by the application creating the conference. <p> Simply by limiting message distribution, priorities can be provided, so that applications of lower priority do not block those of higher priority. (This has been implemented in a different context for audio device access, as described below <ref> [27] </ref>.) For many applications, where signals are currently used, with their attendant problems due to asynchronous operation, local multicast would be preferable. Examples include notifying a number of processes of audio device changes (like speaker volume) or mail spool file changes. <p> Per-conference UDP ports are used to implement voice-switched-video, enlarging the video window of the current talker in the vic video tool. The port is selected by the session directory sd <ref> [27] </ref>. In [27], the authors mention their desire to move to an integrated user interface and discuss other applications such as floor control and synchronization. 8 Conclusion This paper has presented a local conference control architecture, allowing the composition of multimedia conferences in a modular, incremental and transparent fashion. <p> Per-conference UDP ports are used to implement voice-switched-video, enlarging the video window of the current talker in the vic video tool. The port is selected by the session directory sd <ref> [27] </ref>. In [27], the authors mention their desire to move to an integrated user interface and discuss other applications such as floor control and synchronization. 8 Conclusion This paper has presented a local conference control architecture, allowing the composition of multimedia conferences in a modular, incremental and transparent fashion.
Reference: [28] <author> H. Schulzrinne, </author> <title> Voice communication across the Internet: A network voice terminal, </title> <type> Technical Report TR 92-50, </type> <institution> Dept. of Computer Science, University of Massachusetts, Amherst, Massachusetts, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: A screen dump of the conference controller and media agent are shown in Fig. 5. A media agent for packet audio tool called NeVoT (Network Voice Terminal) <ref> [28, 29] </ref>, shown in the lower left of Fig. 5, communicates with a session creator and activity indicator, icc.
Reference: [29] <author> H. Schulzrinne, </author> <title> Guide to NeVoT. </title> <institution> GMD Fokus, </institution> <address> Berlin, Germany, 3.32 ed., </address> <month> Sept. </month> <year> 1995. </year> <note> The software is available from ftp://gaia.cs.umass.edu/pub/hgschulz/nevot. </note>
Reference-contexts: A screen dump of the conference controller and media agent are shown in Fig. 5. A media agent for packet audio tool called NeVoT (Network Voice Terminal) <ref> [28, 29] </ref>, shown in the lower left of Fig. 5, communicates with a session creator and activity indicator, icc.
Reference: [30] <author> E. Fr econ, H. Eriksson, and C. Carlsson, </author> <title> Audio and video communication in distributed virtual environments, </title> <booktitle> in Proceedings of the 5th MultiG Workshop, </booktitle> <address> (Stockholm, Sweden), </address> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: The same audio engine is also available without a user interface, to allow invisible integration into other applications, e.g., virtual reality environments <ref> [30] </ref>. icc starts up as a session creator, shown active in the lower right quadrant of the figure. It then becomes an activity indicator after starting up the media agents. icc as an activity indicator for an MBONE conference is shown in the upper left.
Reference: [31] <author> R. Want, A. Hopper, V. Falcao, and J. Gibbons, </author> <title> The active badge location system, </title> <journal> ACM Transactions on Information Systems, </journal> <volume> vol. 10, </volume> <pages> pp. 91-102, </pages> <month> Jan. </month> <year> 1992. </year> <note> also Olivetti Research Limited Technical Report ORL 92-1. ACM/Springer Multimedia Systems Journal, January 1996 17 </note>
Reference-contexts: Adding a similar interface to a WWW browser would allow sharing of a single browser between applications and remote-controlled slide shows. Some initial helper applications have been implemented. A small applet listens to multicasts on the local network from the Active Badge <ref> [31] </ref> system. Whenever a person enters or leaves the room, the active badge tool sends a * name names message, which then has all media agents change their outgoing RTCP name field to indicate who is present. Recently, stereo placement of session members was added to NeVoT.
Reference: [32] <author> I. Busse, B. Deffner, and H. Schulzrinne, </author> <title> Dynamic QoS control of multimedia applications based on RTP, </title> <booktitle> in First International Workshop on High Speed Networks and Open Distributed Platforms, </booktitle> <address> (St. Petersburg, Russia), </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Automatic placement around a graphically displayed table would be easy enough to add, again without changing the main session controller or media agent. An SNMP management agent and quality of service controller <ref> [32] </ref> gather statistics and set bandwidth control parameters or media encodings, without the media agent having to be aware of the fact that it is now subject to another master for a part of its functionality. Finally, work on integrating a phone-style conference controller called CoCo is in progress [5].
Reference: [33] <author> H. Schulzrinne, </author> <title> When can we unplug the phone and the radio?, </title> <booktitle> in Proc. International Workshop on Network and Operating System Support for for Digital Audio and Video (NOSSDAV), </booktitle> <address> (Durham, New Hampshire), </address> <pages> pp. 183-184, </pages> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: This is necessary since many operating system audio services provide only a single concurrent audio input and output stream, so that mixing has to be done by the application <ref> [33] </ref>. Once the kernel or the audio device handles mixing, each conference should obtain its own port to reduce message handling overhead, as implemented in [27] (see Section 7). That port would be assigned by the application creating the conference.
Reference: [34] <author> U. K. Wiil, </author> <title> Using events as support for data sharing in collaborative work, </title> <booktitle> in International Workshop on CSCW, </booktitle> <address> (Berlin, Germany), </address> <pages> pp. 162-176, </pages> <institution> Institute of Informatics and Computing Technique, Germany, </institution> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: This deficiency should be addressed if local multicast is to become widely used for local interapplication communication, ACM/Springer Multimedia Systems Journal, January 1996 14 7 Related Work The idea of subscribing to events is also found in <ref> [34] </ref>, albeit for mediating access to shared hypermedia objects within a single system. A file-system event registration service called file-activity monitor (FAM) is offered within the Silicon Graphics Irix operating system.
Reference: [35] <author> A. M. Julienne and B. Holtz, </author> <title> ToolTalk and Open Protocols. Mountain View: </title> <publisher> SunSoft Press/Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: A file-system event registration service called file-activity monitor (FAM) is offered within the Silicon Graphics Irix operating system. As was mentioned earlier, the ToolTalk system <ref> [35] </ref> implements a generic inter-application service, based on a message distributor called ttsession and ONC RPC. It also offers the notion of filters, but with a somewhat more restricted functionality.
Reference: [36] <author> R. S. Raji, </author> <title> Smart networks for control, </title> <journal> IEEE Spectrum, </journal> <volume> vol. 31, </volume> <pages> pp. 49-55, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The CCCP approach [11] to naming components is reflected in the message formats. PMM could also be considered as a status-based system, as used for control networks <ref> [36] </ref>. The idea of receiver-controlled message filters described here is similar in spirit to the stream filters central to the RSVP resource reservation protocol [37]. Rangan and Swinehart [12] present a conference control architecture that shares the division into conference controllers and media agents with PMM.
Reference: [37] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala, RSVP: </author> <title> a new resource ReSerVation protocol, </title> <journal> IEEE Network, </journal> <volume> vol. 7, </volume> <pages> pp. 8-18, </pages> <month> Sept. </month> <year> 1993. </year> <journal> ACM/Springer Multimedia Systems Journal, </journal> <month> January </month> <year> 1996 </year> <month> 18 </month>
Reference-contexts: PMM could also be considered as a status-based system, as used for control networks [36]. The idea of receiver-controlled message filters described here is similar in spirit to the stream filters central to the RSVP resource reservation protocol <ref> [37] </ref>. Rangan and Swinehart [12] present a conference control architecture that shares the division into conference controllers and media agents with PMM. However, there a single central entity per conference, the connection manager, handles both conference control and message distribution, while our approach separates the two functionalities.
References-found: 37

