URL: http://www.eecs.uic.edu/~sloan/acta.ps
Refering-URL: http://www.eecs.uic.edu/~sloan/papers.html
Root-URL: 
Email: Email: sloan@eecs.uic.edu.  Email: buy@eecs.uic.edu.  
Title: Reduction Rules for Time Petri Nets  
Author: Robert H. Sloan and Ugo Buy 
Address: 851 S. Morgan St. Room 1120  Chicago, IL 60607-7053 USA  
Affiliation: Dept. of Electrical Engineering and Computer Science  University of Illinois at Chicago  
Note: Accepted for publication in Acta Informatica.  Partially supported by NSF grants CCR-9108753 and CCR-9314258.  Partially supported by NSF grants CCR-9109231 and CCR-9314258.  
Abstract: In this paper, we extend several rules for the reduction of ordinary Petri nets to work with time Petri nets. We introduce a notion of equivalence among time Petri nets, and prove that our reduction rules yield equivalent nets. This notion of equivalence guarantees that crucial timing and concurrency properties are preserved. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Azema, G. Juanole, E. Sanchis, and M. Montbernard. </author> <title> Specification and verification of distributed systems using Prolog interpreted Petri nets. </title> <booktitle> In Proceedings of the Seventh International Conference on Software Engineering, </booktitle> <pages> pages 510-518, </pages> <address> Orlando, Florida, </address> <year> 1984. </year>
Reference-contexts: 1 Introduction Petri nets have proven to be a very useful tool for the analysis of concurrent systems. To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., <ref> [1, 8, 9, 11, 20] </ref>). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., [4, 5, 15, 22]). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model.
Reference: [2] <author> G. Berthelot. </author> <title> Transformations et analyse de r eseaux de Petri: Application aux protocoles. </title> <type> PhD thesis, </type> <institution> Universite de Paris 6, </institution> <year> 1983. </year>
Reference-contexts: At least two other approaches to real-time program analysis use time Petri nets [4, 22]. Several other authors have investigated reduction techniques for Petri nets. In particular, Berthelot originally developed a large set of reduction rules for general Petri nets <ref> [2, 3] </ref>. Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets [14]. Reduction rules for a Petri net subset called free-choice nets were developed by Desel [8], and by Esparza and Silva [10]. Tu et al. applied Berthelot's approach to the analysis of Ada programs [20]. <p> Rule: Remove place p and all arcs in and out of it. Berthelot's proof that this rule preserves the language of the net (as well as safety and liveness) carries over directly to time Petri nets <ref> [2, 3] </ref>. However, this rule by itself is not useful for an automated reduction system, because there is no efficient way to find the set I or the weighting function w. However, it is often possible to find commonly occurring special cases of this rule [9, 20]. Two examples follow. <p> Our work is based on the work of Berthelot for ordinary Petri nets <ref> [2, 3] </ref>. Berthelot's results have been successfully applied to automated deadlock analysis in Ada programs [9]. In a similar fashion, the ultimate goal of our reduction technique is to facilitate real-time program analysis. The introduction of time often complicates the applicability of reduction rules.
Reference: [3] <author> G. Berthelot. </author> <title> Checking properties of nets using transformations. </title> <editor> In G. Rozen-berg, editor, </editor> <booktitle> Advances in Petri Nets 1985, </booktitle> <pages> pages 19-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: At least two other approaches to real-time program analysis use time Petri nets [4, 22]. Several other authors have investigated reduction techniques for Petri nets. In particular, Berthelot originally developed a large set of reduction rules for general Petri nets <ref> [2, 3] </ref>. Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets [14]. Reduction rules for a Petri net subset called free-choice nets were developed by Desel [8], and by Esparza and Silva [10]. Tu et al. applied Berthelot's approach to the analysis of Ada programs [20]. <p> Their experimental results showed that the net reduction technique is especially effective at reducing state space size [9]. Our work is similar in spirit to the work reported by Berthelot and Haddad <ref> [3, 14] </ref>, in that we lay the theoretical foundation for practical applications of the net reduction technique to real-time program analysis. We developed these rules for use in our system for analyzing real-time programs. <p> first rule preserves equivalence in complete detail, and then be a little briefer for the remaining rules. 3 This simplification was specifically introduced in STP nets to speed up state space generation and to facilitate real-time analysis [5]. 6 3.1 Serial Fusion This is a variation of Berthelot's post-fusion rule <ref> [3, 20] </ref> which we have found occurs frequently in practice. Reduction Rule 1 (Serial fusion) Preconditions: There exist two transitions t 1 and t 2 and a place p satisfying: 1. <p> Our serial fusion rule preserves the safeness of the underlying untimed Petri net because this rule is a special case of Berthelot's post-fusion rule, which is known 11 to preserve safeness <ref> [3] </ref>. 2 3.2 Pre-fusion This is an extension of Berthelot's transition pre-fusion rule to time Petri nets [3]. Reduction Rule 2 (Pre-fusion) Preconditions: There exists a place p, a transition t 1 , and a set of transitions S such that: 1. <p> Our serial fusion rule preserves the safeness of the underlying untimed Petri net because this rule is a special case of Berthelot's post-fusion rule, which is known 11 to preserve safeness <ref> [3] </ref>. 2 3.2 Pre-fusion This is an extension of Berthelot's transition pre-fusion rule to time Petri nets [3]. Reduction Rule 2 (Pre-fusion) Preconditions: There exists a place p, a transition t 1 , and a set of transitions S such that: 1. <p> As with the serial fusion rule, the pre-fusion rule preserves safeness of the underlying untimed net because it is a special case of Berthelot's pre-fusion rule, which is known to preserve safeness <ref> [3] </ref>. 2 3.3 Post-fusion To translate Berthelot's post-fusion rule to the timed setting, we need a more restrictive assumption about static firing intervals than we did for the serial fusion rule. <p> Finally, this reduction rule preserves net safeness because it is a special case of Berthelot's post-fusion rule, which preserves safeness <ref> [3] </ref>. 2 16 3.4 Lateral fusion of transitions This rule is applied to a set S of transitions such that all transitions in S are preceded by a common transition not in S [3]. 4 The transitions in S can be replaced by a unique transition, t f . <p> rule preserves net safeness because it is a special case of Berthelot's post-fusion rule, which preserves safeness <ref> [3] </ref>. 2 16 3.4 Lateral fusion of transitions This rule is applied to a set S of transitions such that all transitions in S are preceded by a common transition not in S [3]. 4 The transitions in S can be replaced by a unique transition, t f . Figure 7 illustrates the case in which two transitions, t 1 and t 2 , are preceded by the common transition t c . <p> The first version is similar to the rule we discuss here. In the second, symmetric version, the common transition t c follows the set S of transitions. In order to preserve net liveness, the second version requires an additional precondition that Berthelot fails to mention <ref> [3] </ref>. We do not discuss this version of the rule, because it cannot be extended to time Petri nets even after the additional precondition is included. 17 5. All transitions in S have the same static firing interval, and this interval is of the form [a; a]. <p> The firing of all S transitions results in the same marking as the firing of t f in N R . Our lateral fusion rule is a special case of the corresponding rule by Berthelot, which is known to preserve safeness <ref> [3] </ref>. <p> Thus, if p is removed from N along with the arcs incident on p, the reachability graph of the resulting net is the same as N 's reachability graph. Our first rule was originally defined by Berthelot <ref> [3] </ref>. <p> Rule: Remove place p and all arcs in and out of it. Berthelot's proof that this rule preserves the language of the net (as well as safety and liveness) carries over directly to time Petri nets <ref> [2, 3] </ref>. However, this rule by itself is not useful for an automated reduction system, because there is no efficient way to find the set I or the weighting function w. However, it is often possible to find commonly occurring special cases of this rule [9, 20]. Two examples follow. <p> Our work is based on the work of Berthelot for ordinary Petri nets <ref> [2, 3] </ref>. Berthelot's results have been successfully applied to automated deadlock analysis in Ada programs [9]. In a similar fashion, the ultimate goal of our reduction technique is to facilitate real-time program analysis. The introduction of time often complicates the applicability of reduction rules.
Reference: [4] <author> B. Berthomieu and M. Diaz. </author> <title> Modeling and verification of time dependent systems using time Petri nets. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 17(3) </volume> <pages> 259-273, </pages> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., [1, 8, 9, 11, 20]). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., <ref> [4, 5, 15, 22] </ref>). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model. A problem shared by these approaches is that the state space of a Petri net can be quite large, even for a relatively small system. <p> For our net reduction technique, we have chosen Merlin and Faber's time Petri nets [15]. These nets provide a reasonable compromise between expressive power and analyzability. They have also been shown to have more expressive power than several other timed extensions of Petri nets <ref> [4, 12] </ref>. At least two other approaches to real-time program analysis use time Petri nets [4, 22]. Several other authors have investigated reduction techniques for Petri nets. In particular, Berthelot originally developed a large set of reduction rules for general Petri nets [2, 3]. <p> These nets provide a reasonable compromise between expressive power and analyzability. They have also been shown to have more expressive power than several other timed extensions of Petri nets [4, 12]. At least two other approaches to real-time program analysis use time Petri nets <ref> [4, 22] </ref>. Several other authors have investigated reduction techniques for Petri nets. In particular, Berthelot originally developed a large set of reduction rules for general Petri nets [2, 3]. Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets [14]. <p> N = (P; T; F; M 0 ) is safe if M 0 : P ! f0; 1g, and if all markings reachable by legal sequences of transition firings from the initial marking have either zero or one tokens in every place. 2.2 Time Petri nets With time Petri nets <ref> [4, 15] </ref> a global time is considered, and the state of a net is defined not only by a marking, but also by a value of the global time. As we will discuss, transitions can fire only at particular values of time.
Reference: [5] <author> U. Buy and R. Sloan. </author> <title> A Petri-net-based approach to real-time program analysis. </title> <booktitle> In Proc. Seventh Internat. Workshop on Software Specification and Design, </booktitle> <pages> pages 56-60, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., [1, 8, 9, 11, 20]). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., <ref> [4, 5, 15, 22] </ref>). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model. A problem shared by these approaches is that the state space of a Petri net can be quite large, even for a relatively small system. <p> We will give the proof that the first rule preserves equivalence in complete detail, and then be a little briefer for the remaining rules. 3 This simplification was specifically introduced in STP nets to speed up state space generation and to facilitate real-time analysis <ref> [5] </ref>. 6 3.1 Serial Fusion This is a variation of Berthelot's post-fusion rule [3, 20] which we have found occurs frequently in practice. Reduction Rule 1 (Serial fusion) Preconditions: There exist two transitions t 1 and t 2 and a place p satisfying: 1.
Reference: [6] <author> U. Buy and R. H. Sloan. </author> <title> Automatic real-time analysis of Ada tasking programs for embedded systems. </title> <note> Submitted for publication to Real Time Systems. Available as Technical Report 95-1, </note> <institution> Department of Electrical Engineering and Computer Science, University of Illinois at Chicago. </institution>
Reference-contexts: Additional details on our translation method can be found elsewhere <ref> [6] </ref>. 3 Reduction rules that fuse transitions In this section we present several reduction rules that fuse together two or more transitions. <p> Preliminary experiments with a toolset for the analysis of STP nets have shown that net reduction can be quite effective even when applied to hand-generated nets [7]. More importantly, net reduction has always been effective when we applied it to nets generated automatically by our translator <ref> [6] </ref>. There are two reasons for this phenomenon. First, our method for automatic translation is aimed at modeling all task interactions contained in an Ada program, whereas the goal of reduction is to preserve only properties of interest in a net model.
Reference: [7] <author> U. Buy and R. H. Sloan. </author> <title> Analysis of real-time programs with simple time Petri nets. </title> <booktitle> In Proc. 1994 Internat. Sympos. on Software Testing and Analysis, </booktitle> <pages> pages 228-239, </pages> <year> 1994. </year> <month> 24 </month>
Reference-contexts: Henceforth, we will assume that the underlying Petri net of all our time Petri nets is safe. This assumption is reasonable because nets generated automatically from high-level programming languages are generally safe <ref> [7, 9, 20] </ref>. <p> The reduction rules discussed in this paper have been applied to real-time system analysis using STP nets as the underlying system model <ref> [7] </ref>. Our reduction rules can be applied directly to STP nets because these nets are a special case of time Petri nets. Preliminary experiments with a toolset for the analysis of STP nets have shown that net reduction can be quite effective even when applied to hand-generated nets [7]. <p> system model <ref> [7] </ref>. Our reduction rules can be applied directly to STP nets because these nets are a special case of time Petri nets. Preliminary experiments with a toolset for the analysis of STP nets have shown that net reduction can be quite effective even when applied to hand-generated nets [7]. More importantly, net reduction has always been effective when we applied it to nets generated automatically by our translator [6]. There are two reasons for this phenomenon.
Reference: [8] <author> J. Desel. </author> <title> Reduction and design of well-behaved concurrent systems. </title> <editor> In J. C. M. Beaten and J. W. Klop, editors, </editor> <title> CONCUR '90: Theories of Con-currency: Unification and Extension, </title> <publisher> LNCS 458, </publisher> <pages> pages 166-181. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Petri nets have proven to be a very useful tool for the analysis of concurrent systems. To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., <ref> [1, 8, 9, 11, 20] </ref>). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., [4, 5, 15, 22]). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model. <p> In particular, Berthelot originally developed a large set of reduction rules for general Petri nets [2, 3]. Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets [14]. Reduction rules for a Petri net subset called free-choice nets were developed by Desel <ref> [8] </ref>, and by Esparza and Silva [10]. Tu et al. applied Berthelot's approach to the analysis of Ada programs [20]. In particular, Tu et al. exploited Ada semantics in order to speed up the application of Berthelot's rules, some of which have high computational complexity.
Reference: [9] <author> S. Duri, U. Buy, R. Devarapalli, and S. M. Shatz. </author> <title> Application and experimental evaluation of state space reduction methods for deadlock analysis in Ada. </title> <journal> ACM Trans. Software Engineering and Methodology, </journal> <volume> 3(4) </volume> <pages> 340-380, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Petri nets have proven to be a very useful tool for the analysis of concurrent systems. To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., <ref> [1, 8, 9, 11, 20] </ref>). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., [4, 5, 15, 22]). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model. <p> To date, various techniques for reducing state space size in (untimed) concurrent systems have been defined (e.g., [13, 19-21]). Among these techniques, Petri net reduction has been shown to be especially effective, for instance, for automated deadlock detection in Ada programs <ref> [9] </ref>. This technique is aimed at reducing the size of a Petri net modeling a concurrent program, while retaining crucial concurrency properties, such as deadlock, in the reduced model. In general, any reduction in Petri net size results in even greater reductions in the size of the corresponding state space. <p> In particular, Tu et al. exploited Ada semantics in order to speed up the application of Berthelot's rules, some of which have high computational complexity. Duri et al. report on experiments with various optimization techniques for Petri-net-based deadlock detection in Ada programs <ref> [9] </ref>. Their approach was been successfully applied to a variety of examples of concurrent programs, including some real-world systems developed at industrial organizations. Their experimental results showed that the net reduction technique is especially effective at reducing state space size [9]. <p> various optimization techniques for Petri-net-based deadlock detection in Ada programs <ref> [9] </ref>. Their approach was been successfully applied to a variety of examples of concurrent programs, including some real-world systems developed at industrial organizations. Their experimental results showed that the net reduction technique is especially effective at reducing state space size [9]. Our work is similar in spirit to the work reported by Berthelot and Haddad [3, 14], in that we lay the theoretical foundation for practical applications of the net reduction technique to real-time program analysis. We developed these rules for use in our system for analyzing real-time programs. <p> Henceforth, we will assume that the underlying Petri net of all our time Petri nets is safe. This assumption is reasonable because nets generated automatically from high-level programming languages are generally safe <ref> [7, 9, 20] </ref>. <p> However, this rule by itself is not useful for an automated reduction system, because there is no efficient way to find the set I or the weighting function w. However, it is often possible to find commonly occurring special cases of this rule <ref> [9, 20] </ref>. Two examples follow. <p> Our work is based on the work of Berthelot for ordinary Petri nets [2, 3]. Berthelot's results have been successfully applied to automated deadlock analysis in Ada programs <ref> [9] </ref>. In a similar fashion, the ultimate goal of our reduction technique is to facilitate real-time program analysis. The introduction of time often complicates the applicability of reduction rules. In general, our rules require additional preconditions beyond the preconditions of Berthelot's corresponding rules.
Reference: [10] <author> J. Esparza and M. Silva. </author> <title> Top-down synthesis of live and bounded free choice nets. </title> <booktitle> In Proceedings of the 11th Conference on Petri Nets, </booktitle> <pages> pages 63-83, </pages> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets [14]. Reduction rules for a Petri net subset called free-choice nets were developed by Desel [8], and by Esparza and Silva <ref> [10] </ref>. Tu et al. applied Berthelot's approach to the analysis of Ada programs [20]. In particular, Tu et al. exploited Ada semantics in order to speed up the application of Berthelot's rules, some of which have high computational complexity.
Reference: [11] <author> G. Estrin, R. S. Fenchel, R. R. Razouk, and M. K. Vernon. </author> <title> SARA (System ARchitects Apprentice): Modeling, analysis, and simulation support for design of concurrent systems. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 12(2) </volume> <pages> 293-311, </pages> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Petri nets have proven to be a very useful tool for the analysis of concurrent systems. To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., <ref> [1, 8, 9, 11, 20] </ref>). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., [4, 5, 15, 22]). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model.
Reference: [12] <author> C. Ghezzi, D. Mandrioli, S. Morasca, and M. Pezze. </author> <title> A general way to put time in Petri nets. </title> <booktitle> In Proc. 5th Internat. Workshop on Software Specifications and Design, </booktitle> <pages> pages 60-67, </pages> <address> Pittsburgh, Pennsylvania, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: For our net reduction technique, we have chosen Merlin and Faber's time Petri nets [15]. These nets provide a reasonable compromise between expressive power and analyzability. They have also been shown to have more expressive power than several other timed extensions of Petri nets <ref> [4, 12] </ref>. At least two other approaches to real-time program analysis use time Petri nets [4, 22]. Several other authors have investigated reduction techniques for Petri nets. In particular, Berthelot originally developed a large set of reduction rules for general Petri nets [2, 3].
Reference: [13] <author> P. Godefroid and P. Wolper. </author> <title> Using partial orders for the efficient verification of deadlock freedom and safety properties. </title> <editor> In K. G. Larsen and A. Skou, editors, </editor> <booktitle> Computer-Aided Verification: 3rd Internat. Conf., CAV '91, </booktitle> <volume> LNCS 575, </volume> <pages> pages 332-342. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This problem is generally referred to as the state explosion problem. In order for Petri-net-based reachability analysis to be practical, suitable techniques for controlling the state explosion problem must be developed. To date, various techniques for reducing state space size in (untimed) concurrent systems have been defined (e.g., <ref> [13, 19-21] </ref>). Among these techniques, Petri net reduction has been shown to be especially effective, for instance, for automated deadlock detection in Ada programs [9].
Reference: [14] <author> S. Haddad. </author> <title> A reduction theory for coloured Petri nets. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri nets, volume 424 of Lecture Notes in Computer Science, </booktitle> <pages> pages 209-235. </pages> <publisher> Springer Verlag, </publisher> <address> New York, New York, </address> <year> 1990. </year>
Reference-contexts: Several other authors have investigated reduction techniques for Petri nets. In particular, Berthelot originally developed a large set of reduction rules for general Petri nets [2, 3]. Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets <ref> [14] </ref>. Reduction rules for a Petri net subset called free-choice nets were developed by Desel [8], and by Esparza and Silva [10]. Tu et al. applied Berthelot's approach to the analysis of Ada programs [20]. <p> Their experimental results showed that the net reduction technique is especially effective at reducing state space size [9]. Our work is similar in spirit to the work reported by Berthelot and Haddad <ref> [3, 14] </ref>, in that we lay the theoretical foundation for practical applications of the net reduction technique to real-time program analysis. We developed these rules for use in our system for analyzing real-time programs.
Reference: [15] <author> P. Merlin and D. </author> <title> Faber. Recoverability of communication protocols implications of a theoretical study. </title> <journal> IEEE Trans. Communications, </journal> <volume> COM-24(9):381-404, </volume> <month> Sept. </month> <year> 1976. </year>
Reference-contexts: To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., [1, 8, 9, 11, 20]). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., <ref> [4, 5, 15, 22] </ref>). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model. A problem shared by these approaches is that the state space of a Petri net can be quite large, even for a relatively small system. <p> For this reason, we first introduce a language-theoretic notion of equivalence between a reduced and an unreduced net. Next, we define a set of reduction rules for time Petri nets <ref> [15] </ref>. Finally, we prove that each reduction rule satisfies our definition of equivalence for reduced and unreduced nets. Researchers have developed several extensions of Petri nets to the timed domain. For our net reduction technique, we have chosen Merlin and Faber's time Petri nets [15]. <p> reduction rules for time Petri nets <ref> [15] </ref>. Finally, we prove that each reduction rule satisfies our definition of equivalence for reduced and unreduced nets. Researchers have developed several extensions of Petri nets to the timed domain. For our net reduction technique, we have chosen Merlin and Faber's time Petri nets [15]. These nets provide a reasonable compromise between expressive power and analyzability. They have also been shown to have more expressive power than several other timed extensions of Petri nets [4, 12]. At least two other approaches to real-time program analysis use time Petri nets [4, 22]. <p> N = (P; T; F; M 0 ) is safe if M 0 : P ! f0; 1g, and if all markings reachable by legal sequences of transition firings from the initial marking have either zero or one tokens in every place. 2.2 Time Petri nets With time Petri nets <ref> [4, 15] </ref> a global time is considered, and the state of a net is defined not only by a marking, but also by a value of the global time. As we will discuss, transitions can fire only at particular values of time.
Reference: [16] <author> T. Murata. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(4) </volume> <pages> 541-580, </pages> <year> 1989. </year>
Reference-contexts: A more general discussion on Petri nets can be found in Peterson's book [17], and in the excellent survey article by Murata <ref> [16] </ref>.
Reference: [17] <author> J. L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1981. </year> <month> 25 </month>
Reference-contexts: Finally, in Section 5, we present some conclusions and future research directions. 2 Notation and definitions 2.1 Brief review of untimed Petri nets In this subsection we will quickly review key definitions. A more general discussion on Petri nets can be found in Peterson's book <ref> [17] </ref>, and in the excellent survey article by Murata [16].
Reference: [18] <author> S. M. Shatz, K. Mai, C. Black, and S. Tu. </author> <title> Design and implementation of a Petri net-based toolkit for Ada tasking analysis. </title> <journal> IEEE Transactions on Parallel Distributed Systems, </journal> <volume> 1(4) </volume> <pages> 424-441, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: An important aspect of our project is the translation of Ada code into a suitable Petri net model that incorporates a notion of time. Our translation method extends the method defined by Shatz et al. for (untimed) concurrency analysis Ada tasking programs <ref> [18] </ref>. As with that earlier method, our nets exhibit a highly uniform structure because similar subnets model different occurrences of a given construct in an Ada program.
Reference: [19] <author> P. H. Starke. </author> <title> Reachability analysis of Petri nets using symmetries. Syst. Anal. Model. </title> <journal> Simul., </journal> <volume> 8 </volume> <pages> 293-303, </pages> <year> 1991. </year>
Reference: [20] <author> S. Tu, S. M. Shatz, and T. Murata. </author> <title> Applying Petri net reduction to support Ada-tasking deadlock analysis. </title> <booktitle> In Proc. Eleventh Internat. Conference on Distributed Computing Systems, </booktitle> <pages> pages 96-103, </pages> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Petri nets have proven to be a very useful tool for the analysis of concurrent systems. To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., <ref> [1, 8, 9, 11, 20] </ref>). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., [4, 5, 15, 22]). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model. <p> Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets [14]. Reduction rules for a Petri net subset called free-choice nets were developed by Desel [8], and by Esparza and Silva [10]. Tu et al. applied Berthelot's approach to the analysis of Ada programs <ref> [20] </ref>. In particular, Tu et al. exploited Ada semantics in order to speed up the application of Berthelot's rules, some of which have high computational complexity. Duri et al. report on experiments with various optimization techniques for Petri-net-based deadlock detection in Ada programs [9]. <p> Henceforth, we will assume that the underlying Petri net of all our time Petri nets is safe. This assumption is reasonable because nets generated automatically from high-level programming languages are generally safe <ref> [7, 9, 20] </ref>. <p> first rule preserves equivalence in complete detail, and then be a little briefer for the remaining rules. 3 This simplification was specifically introduced in STP nets to speed up state space generation and to facilitate real-time analysis [5]. 6 3.1 Serial Fusion This is a variation of Berthelot's post-fusion rule <ref> [3, 20] </ref> which we have found occurs frequently in practice. Reduction Rule 1 (Serial fusion) Preconditions: There exist two transitions t 1 and t 2 and a place p satisfying: 1. <p> static interval I (t f ) = I (t 1 ) + I (t 2 ), with input set * t f = * t 1 , and with output set t f * . (See Figure 1.) The first three preconditions are necessary for untimed Petri nets as well <ref> [20] </ref>. We illustrate the necessity of the fourth condition in Figure 2. On the left is a net fragment that meets the first three conditions of the serial fusion rule, but violates the fourth condition. <p> However, this rule by itself is not useful for an automated reduction system, because there is no efficient way to find the set I or the weighting function w. However, it is often possible to find commonly occurring special cases of this rule <ref> [9, 20] </ref>. Two examples follow. <p> fact, the condition P P q2I w (q)M 0 (q), which may be weaker when p is initially marked, is sufficient. 21 Reduction Rule 6 (Parallel Redundant Places) If two places have identical in-put and output transitions, and identical initial markings, then either one of these places can be removed <ref> [20] </ref>. Reduction Rule 7 (Removal of useless end places) An initially unmarked place with no output transitions may be removed. 4.2 Unnecessary begin places We conclude our list of reduction rules with some straightforward rules for removing places with no inputs.
Reference: [21] <author> A. Valmari. </author> <title> A stubborn attack on state explosion. </title> <editor> In E. M. Clarke and R. P. Kurshan, editors, </editor> <booktitle> Computer-Aided Verification: 2nd Internat. Conf., CAV '90, </booktitle> <volume> LNCS 531, </volume> <pages> pages 156-165. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [22] <author> T. Yoneda, A. Shibayama, B.-H. Schlingloff, and E. M. Clarke. </author> <title> Efficient verification of parallel real-time systems. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> Computer-Aided Verification: 5th Internat. Conf., CAV '93, </booktitle> <volume> LNCS 697, </volume> <pages> pages 321-332. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 26 </month>
Reference-contexts: To date several approaches have been defined that use Petri nets to model a system being analyzed (e.g., [1, 8, 9, 11, 20]). Other researchers use suitable timed extensions of Petri nets for the analysis of real-time systems (e.g., <ref> [4, 5, 15, 22] </ref>). Most of the existing approaches are aimed at generating the set of reachable states of a Petri net model. A problem shared by these approaches is that the state space of a Petri net can be quite large, even for a relatively small system. <p> These nets provide a reasonable compromise between expressive power and analyzability. They have also been shown to have more expressive power than several other timed extensions of Petri nets [4, 12]. At least two other approaches to real-time program analysis use time Petri nets <ref> [4, 22] </ref>. Several other authors have investigated reduction techniques for Petri nets. In particular, Berthelot originally developed a large set of reduction rules for general Petri nets [2, 3]. Berthelot's approach was subsequently extended by Haddad to 1 Colored Petri nets [14]. <p> Other authors have typically made some somewhat weaker restriction in their definitions (for instance, Yoneda et al. require that the markings in the states reachable in the time Petri net, as opposed to the underlying untimed Petri net, contain only one token per place <ref> [22] </ref>), but all the examples we have seen presented in the literature conform to our assumption. Without this assumption, some of the rules we introduce here are not valid, resulting in a weaker technique.
References-found: 22

