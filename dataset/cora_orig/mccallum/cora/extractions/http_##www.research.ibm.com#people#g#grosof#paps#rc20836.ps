URL: http://www.research.ibm.com/people/g/grosof/paps/rc20836.ps
Refering-URL: http://www.research.ibm.com/people/g/grosof/papers.html
Root-URL: http://www.research.ibm.com
Title: Courteous Logic Programs: Prioritized Conflict Handling For Rules  
Author: Benjamin N. Grosof 
Keyword: LIMITED DISTRIBUTION NOTICE  
Affiliation: Computer Science IBM Research  IBM Research Division T.J. Watson Research Center  IBM Research Division Almaden T.J. Watson Tokyo Zurich  
Address: 20836 (92273)  P.O. Box 704, Yorktown Heights, NY 10598, USA  
Note: RC  direct -7455 fax -7100 main Internet  (or grosof@us.ibm.com or  
Pubnum: Report  
Email: e-mail: grosof@watson.ibm.com  grosof@cs.stanford.edu)  
Phone: (914) 784-7783  
Web: Web: http://www.research.ibm.com/people/g/grosof  
Date: 08 May 97; revised 30 Dec 97  
Abstract: This report has been submitted for publication outside of IBM and will probably be copyrighted if accepted for publication. It has been issued as a Research Report for early dissemination of its contents. In view of the transfer of copyright to the outside publisher, its distribution outside of IBM prior to publication should be limited to peer communications and specific requests. After outside publication, requests should be filled only by reprints or legally obtained copies of the article (e.g., payment of royalties). 
Abstract-found: 1
Intro-found: 1
Reference: [ 1 ] <author> K. Apt, H. Blair, and A. Walker. </author> <title> Towards a theory of declarative knowledge. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 89-148. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1987. </year>
Reference-contexts: A further special case is whenever LP, or its unlabelled version, is (syntactically) an acyclic general LP, i.e., whenever LP lacks classical negation. 2 Remark: Here, we interpret general LP's under the locally stratified semantics <ref> [ 1 ] </ref> [ 33 ] , the stable semantics [ 10 ] , or the well-founded semantics [ 37 ] .
Reference: [ 2 ] <author> Chitta Baral and Michael Gelfond. </author> <title> Logic programming and knowledge representation. </title> <journal> Journal of Logic Programming, </journal> <note> 19,20:73-148, 1994. Includes extensive review of literature. </note>
Reference-contexts: Preliminary Definitions; Extended LP's Background: We assume the reader is familiar with extended LP's [ 11 ] , with the semantics of stratified (ordinary, non-extended) logic programs with negation as failure (e.g., [ 33 ] ), and with the standard concepts in the logic programming literature (e.g., as reviewed in <ref> [ 2 ] </ref> ), including predicate / atom dependency graph and its acyclicity / non-recursiveness; and instantiation. Appendix A contains some review of these concepts. In this section, we introduce some preliminary definitions, notation, and terminology. This includes reviewing extended LP's cf. [ 11 ] . <p> The answer set is constructed iteratively: S 0 = ; S S = i T i where ; stands for the empty set, 2 Acyclicity (our terminology follows <ref> [ 2 ] </ref> ) prevents recursion among ground atoms, hence is often also called non-recursiveness in the literature. <p> These semantics all coincide for the acyclic case since that is a special case of locally stratified (see, e.g., <ref> [ 2 ] </ref> for review of relevant concepts and literature). General LP's are syntactically a special case of extended LP's. <p> Proof : Background : Extended LP's are defined by Gelfond & Lifschitz to have stable-style semantics. Stable semantics for the acyclic case coincides (see, e.g., <ref> [ 2 ] </ref> for review of literature) with the (locally) stratified semantics [ 33 ] and the well-founded semantics [ 37 ] . Overview and Introduction: If the main sub-program is consistent when interpreted as an extended LP, there is no conflict. The prioritization and labels are then irrelevant. <p> Kowalski & Sadri [ 24 ] has a conflict handling approach in which rules that are "exceptions" to others are treated as having implicit preference. Baral & Gelfond <ref> [ 2 ] </ref> discuss techniques for achieving some of the effects of priorities within extended LP's, e.g., via abnormalities, but do not give a general method. Pereira et al [ 31 ] address the issues of consistency, and 5 personal communication with Brewka 30 priorities between abnormalities, in extended LP's.
Reference: [ 3 ] <author> Gerhard Brewka. </author> <title> Reasoning about priorities in default logic. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence (AAAI-94), </booktitle> <pages> pages 940-945, </pages> <address> Menlo Park, CA / Cambridge, MA, 1994. </address> <publisher> AAAI Press / MIT Press. </publisher>
Reference-contexts: For inspiration in grappling with these challenges, we have drawn on the idea of prioritized defaults (e.g., [ 30 ] [ 27 ] [ 14 ] [ 17 ] [ 15 ] (ch. 2 includes a literature review), and <ref> [ 3 ] </ref> (also includes a literature review)) from the field of general non-monotonic reasoning. <p> Tractability makes applications practical beyond small scale. Fourth, there is a unique answer set (i.e., set of conclusions). This helps provide a conceptually simple semantics, which facilitates understandability, especially by non-technical end-users. By contrast, many expressively powerful non-monotonic reasoning formalisms have multiple extensions (e.g., Prioritized Default Logic variants; see <ref> [ 3 ] </ref> for review). <p> Brewka's syntax is similar to courteous LP's; however, he is concerned with two additional directions of expressive generality: cyclic dependencies, especially negative (through ~); and reasoning about the prioritization itself, e.g., cf. [ 16 ] <ref> [ 3 ] </ref> [ 18 ] [ 17 ] . He modifies the well-founded semantics to strengthen its conclusions; prioritization specifies how rules defeat each other via negation-as-failure. For comparison, each courteous LP rule r is most appropriately treated as "seminormal", i.e., as including additional body literal ~head (r). <p> However, circumscription behaves contrapositively, and thus quite differently from logic programs. Extended LP's are equivalent to a special case of Default Logic [ 34 ] , as Gelfond & Lifschitz showed. Prioritized variants of Default Logic (see <ref> [ 3 ] </ref> , which includes a review of that literature) are thus a target for comparison. Courteous LP's' semantics differ significantly from that of these Prioritized Default Logic (PDL) variants: the latter proliferate multiple extensions (of which there are exponentially many, in the worst case).
Reference: [ 4 ] <author> Gerhard Brewka. </author> <title> Well-founded semantics for extended logic programs with dynamic preferences. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 4 </volume> <pages> 19-36, </pages> <year> 1996. </year>
Reference-contexts: specificity-based override and of the Closed World Assumption.) This lessened need is, in part, significant because negation-as-failure causes many of the difficulties in the semantics of logic programs, both computationally and conceptually / intuitively (especially for non-technical authors faced with classical negation as well). 9.2 Previous Logic Programming Approaches Brewka <ref> [ 4 ] </ref> has a form of prioritized extended LP's that is closely related to courteous LP's. Courteous LP's (first introduced in [ 19 ] whose content partially overlaps with this paper) and Brewka's approach were developed independently. <p> Unlike courteous, his approach can result in an inconsistent conclusion set; he gives no consistency guarantee even for restricted cases. Next, we summarize Brewka's <ref> [ 4 ] </ref> review of three other relevant approaches. Praaken & Sartor [ 32 ] has an argument-theoretic approach very similar to Brewka's. Buccafurri, Leone, & Rullo's [ 6 ] ordered LP's use an inheritance hierarchy as the basis of priority, but allow only one form of negation.
Reference: [ 5 ] <author> Gerhard Brewka. </author> <title> Preferred answer sets. </title> <editor> In Jurgen Dix, Luis Moniz Pereira, and Teodor Przymusinski, editors, </editor> <booktitle> Logic Programming and Knowledge Representation (LPKR '97) (Proceedings of the ILPS '97 Postconference Workshop). </booktitle> <address> http://www.uni-koblenz.de/~dix/LPKR97, 1997. Held Port Jefferson, NY, USA, Oct. 16, </address> <year> 1997. </year> <note> http://www.ida.liu.se/~ilps97. </note>
Reference-contexts: In details of concept, inferencing, and application, HCLP differs markedly from courteous logic programs. Contemporaneously and independently of this paper, the following other related work appeared, too late to provide detailed comparisons here. Brewka <ref> [ 5 ] </ref> and Zhang & Foo [ 39 ] each give an approach to prioritizing extended LP's. Gelfond & Son [ 12 ] give an approach to specifing prioritized defaults in extended LP's.
Reference: [ 6 ] <author> F. Buccafurri, N. Leone, and P. Rullo. </author> <title> Stable models and their computation for logic programming with inheritance and true negation. </title> <journal> Journal of Logic Programming, </journal> <volume> 27(1) </volume> <pages> 5-43, </pages> <year> 1996. </year> <month> 33 </month>
Reference-contexts: Next, we summarize Brewka's [ 4 ] review of three other relevant approaches. Praaken & Sartor [ 32 ] has an argument-theoretic approach very similar to Brewka's. Buccafurri, Leone, & Rullo's <ref> [ 6 ] </ref> ordered LP's use an inheritance hierarchy as the basis of priority, but allow only one form of negation. Kowalski & Sadri [ 24 ] has a conflict handling approach in which rules that are "exceptions" to others are treated as having implicit preference.
Reference: [ 7 ] <author> Marco Cadoli and Marco Schaerf. </author> <title> A survey on complexity results for non--monotonic logics. </title> <journal> Journal of Logic Programming, </journal> <volume> 17 </volume> <pages> 127-160, </pages> <year> 1993. </year>
Reference-contexts: By contrast, conflict handling in most expressively powerful formalisms for prioritized default reasoning (e.g., based in Default Logic [ 34 ] or circumscription [ 29 ] ) is an additional source of NP-hard complexity beyond the base reasoning [ 13 ] <ref> [ 7 ] </ref> . Tractability makes applications practical beyond small scale. Fourth, there is a unique answer set (i.e., set of conclusions). This helps provide a conceptually simple semantics, which facilitates understandability, especially by non-technical end-users.
Reference: [ 8 ] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Total Stratification: The size (edges plus vertices) of the atom dependency graph is O (m); it can be built essentially by scanning C instd , in time O (m). Topological sort can be done in time linear in the size of the graph, by doing a depth-first traversal (e.g., <ref> [ 8 ] </ref> , pp. 485-487). Atom locales: Consider an atom locale. Let d be its size. Generating candidates can be computed simply because satisfaction (e.g., of rule bodies) in the previous answer set iterate can be tested quickly, by lookup operations.
Reference: [ 9 ] <author> D. Etherington and R. Reiter. </author> <title> On inheritance hierarchies with exceptions. </title> <booktitle> In Proceedings of the Second National Conference on Artificial Intelligence (AAAI-83), </booktitle> <pages> pages 104-108, </pages> <address> Washington, D.C., </address> <year> 1983. </year>
Reference-contexts: We find this to be a simple and intuitively natural representation. 2 4.2 Inheritance and Specificity A common pattern of priority is to have a more specific exception-case rule override a more general-case rule, e.g., in default inheritance reasoning. Example 8 (Molluscs; Inheritance; Specificity Priority) Etherington & Reiter's <ref> [ 9 ] </ref> example of a default inheritance hierarchy about molluscs can be straightforwardly represented, with prioritization corresponding to specificity, as the following program. There is no need to add the extra "interaction" conditions that make the defaults be non-normal there 10 (in Default Logic, the formalism they used).
Reference: [ 10 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> The Stable Model Semantics for Logic Programming. </title> <booktitle> In Logic Programming: Proceedings of the Fifth International Conference and Symposium, </booktitle> <pages> pages 1070-1080, </pages> <year> 1988. </year>
Reference-contexts: A further special case is whenever LP, or its unlabelled version, is (syntactically) an acyclic general LP, i.e., whenever LP lacks classical negation. 2 Remark: Here, we interpret general LP's under the locally stratified semantics [ 1 ] [ 33 ] , the stable semantics <ref> [ 10 ] </ref> , or the well-founded semantics [ 37 ] . These semantics all coincide for the acyclic case since that is a special case of locally stratified (see, e.g., [ 2 ] for review of relevant concepts and literature).
Reference: [ 11 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year> <note> An earlier version appears in Proceedings of the Seventh International Conference on Logic Programming (D. </note> <editor> Warren and P. Szeredi, </editor> <booktitle> eds.), </booktitle> <pages> pp. 579-597, </pages> <year> 1990. </year>
Reference-contexts: These users specify their rule sets via forms and templates that are often application-specific. "Under the covers", the rules are then re-formatted as a more standard logic program. We are attracted by the expressive power of classical negation as in extended logic programs <ref> [ 11 ] </ref> . There, classical negation is permitted in rule heads and bodies (in addition to negation-as-failure in the bodies). <p> Modularity, understandability, and predictability are often crucial requirements for practical usage, e.g., as we have found at IBM in our agent-building experience. 2 Preliminary Definitions; Extended LP's Background: We assume the reader is familiar with extended LP's <ref> [ 11 ] </ref> , with the semantics of stratified (ordinary, non-extended) logic programs with negation as failure (e.g., [ 33 ] ), and with the standard concepts in the logic programming literature (e.g., as reviewed in [ 2 ] ), including predicate / atom dependency graph and its acyclicity / non-recursiveness; <p> Appendix A contains some review of these concepts. In this section, we introduce some preliminary definitions, notation, and terminology. This includes reviewing extended LP's cf. <ref> [ 11 ] </ref> . Each rule r in an extended logic program E has the form: L 0 L 1 ^ : : : ^ L m ^ ~L m+1 ^ : : : ^ ~L n where n m 0, and each L i is a literal. <p> The prioritization and labels are then irrelevant. The courteous semantics' stratified construction then essentially corresponds to the locally stratified semantics of [ 33 ] . For the acyclic case, the locally stratified semantics essentially coincides with <ref> [ 11 ] </ref> 's stable-style semantics for extended LP's. Details: Terminology: As usual throughout this paper, "atom" means ground atom. We are given that LP is E-consistent. Let us take its unlabelled version and view it as an extended LP. By a result of [ 11 ] , because it is <p> locally stratified semantics essentially coincides with <ref> [ 11 ] </ref> 's stable-style semantics for extended LP's. Details: Terminology: As usual throughout this paper, "atom" means ground atom. We are given that LP is E-consistent. Let us take its unlabelled version and view it as an extended LP. By a result of [ 11 ] , because it is E-consistent, it can be transformed equivalently into (re-represented as) a general LP. In that transform, :p is simply made into (re-represented as) a new predicate p 0 distinct from p, for every pre-transform predicate p. <p> To achieve the effect of minimizing the predicate p after all the other rules "have had their say", include the rule :p (x) with lowest priority within its locale. By contrast, <ref> [ 11 ] </ref> give an approach in extended LP's | they represent the CWA for p by the rule :p (x) ~p (x). Observe that this employs negation-as-failure, and also creates a cycle in the dependency graph.
Reference: [ 12 ] <author> Michael Gelfond and Tran Cao Son. </author> <title> Reasoning with prioritized defaults. </title> <editor> In Jur-gen Dix, Luis Moniz Pereira, and Teodor Przymusinski, editors, </editor> <booktitle> Logic Programming and Knowledge Representation (LPKR '97) (Proceedings of the ILPS '97 Postconference Workshop). </booktitle> <address> http://www.uni-koblenz.de/~dix/LPKR97, 1997. Held Port Jefferson, NY, USA, Oct. 16, </address> <year> 1997. </year> <note> http://www.ida.liu.se/~ilps97. </note>
Reference-contexts: Contemporaneously and independently of this paper, the following other related work appeared, too late to provide detailed comparisons here. Brewka [ 5 ] and Zhang & Foo [ 39 ] each give an approach to prioritizing extended LP's. Gelfond & Son <ref> [ 12 ] </ref> give an approach to specifing prioritized defaults in extended LP's.
Reference: [ 13 ] <author> Georg Gottlob. </author> <title> Complexity results for nonmonotonic logics. </title> <journal> Journal of Logic and Computation, </journal> <volume> 2 </volume> <pages> 397-425, </pages> <year> 1992. </year>
Reference-contexts: Third, inferencing in the formalism is tractable, under the Datalog restriction. By contrast, conflict handling in most expressively powerful formalisms for prioritized default reasoning (e.g., based in Default Logic [ 34 ] or circumscription [ 29 ] ) is an additional source of NP-hard complexity beyond the base reasoning <ref> [ 13 ] </ref> [ 7 ] . Tractability makes applications practical beyond small scale. Fourth, there is a unique answer set (i.e., set of conclusions). This helps provide a conceptually simple semantics, which facilitates understandability, especially by non-technical end-users. <p> However, courteous LP's are much less complex computationally and conceptually than those relatively expressively powerful formalisms. Inference in courteous logic programs is tractable (polynomial-time); unlike prioritized Default Logic and circumscription and their ilk, courteous programs avoid having a second source of NP-hard complexity beyond the underlying monotonic-logical inferencing <ref> [ 13 ] </ref> . The locality of skepticism and prioritization is crucial in this regard: it nips in the bud the potential branching into multiple extensions.
Reference: [ 14 ] <author> Benjamin N. Grosof. </author> <title> Generalizing Prioritization. </title> <booktitle> In Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning (KR-91), </booktitle> <pages> pages 289-300, </pages> <month> April </month> <year> 1991. </year> <note> Also available as IBM Research Report RC15605, </note> <institution> IBM T.J. Watson Research Center, </institution> <address> P.O. Box 704, Yorktown Heights, NY 10598. </address>
Reference-contexts: For inspiration in grappling with these challenges, we have drawn on the idea of prioritized defaults (e.g., [ 30 ] [ 27 ] <ref> [ 14 ] </ref> [ 17 ] [ 15 ] (ch. 2 includes a literature review), and [ 3 ] (also includes a literature review)) from the field of general non-monotonic reasoning. <p> rules, essentially as in our earlier discussion of empty label. (Also, recall that prioritization between the prioritization facts themselves has no effect.) 24 More generally, it is straightforward to define merging many modules (not just two) with an inter-module prioritization partial order, using the concept of composing prioritization given in <ref> [ 14 ] </ref> [ 15 ] [ 17 ] . In intelligent agent applications such as those we are pursuing at IBM, modules may correspond to different users'/agents' knowledge bases; merging then corresponds to taking advice from other agents [ 17 ] . <p> E.g., Joe may also merge in a news-handling rule module from his buddy Angela, and merge in rule modules on different subjects from various "enterprise" rule sets associated with different organizational levels or units. There are many natural bases for inter-module prioritization information <ref> [ 14 ] </ref> [ 17 ] . E.g., Joe may merge in a newer (fresher) module, or a more special-case (specificity) module. Relative authority (e.g., organizational) or reliability (e.g., expertise) of modules' sources may be the basis for prioritizing between the merges. <p> An interesting issue that we are pursuing in current work is how to automatically infer implicitly the higher priority of more specific rules. Prioritized default circumscription <ref> [ 14 ] </ref> [ 15 ] (generalizing [ 30 ] [ 27 ] ) has a concept of prioritization that is similar to courteous', though more general. However, circumscription behaves contrapositively, and thus quite differently from logic programs.
Reference: [ 15 ] <author> Benjamin N. Grosof. </author> <title> Updating and Structure in Non-Monotonic Theories. </title> <type> PhD thesis, </type> <institution> Computer Science Dept., Stanford University, Stanford, </institution> <address> Cal-ifornia 94305, </address> <month> October </month> <year> 1992. </year> <note> Published by University Microfilms, Inc.. Also available as IBM Research Report RC 20683, dated Jan. 1997; see http://www.research.ibm.com </note> . 
Reference-contexts: For inspiration in grappling with these challenges, we have drawn on the idea of prioritized defaults (e.g., [ 30 ] [ 27 ] [ 14 ] [ 17 ] <ref> [ 15 ] </ref> (ch. 2 includes a literature review), and [ 3 ] (also includes a literature review)) from the field of general non-monotonic reasoning. <p> in our earlier discussion of empty label. (Also, recall that prioritization between the prioritization facts themselves has no effect.) 24 More generally, it is straightforward to define merging many modules (not just two) with an inter-module prioritization partial order, using the concept of composing prioritization given in [ 14 ] <ref> [ 15 ] </ref> [ 17 ] . In intelligent agent applications such as those we are pursuing at IBM, modules may correspond to different users'/agents' knowledge bases; merging then corresponds to taking advice from other agents [ 17 ] . <p> An interesting issue that we are pursuing in current work is how to automatically infer implicitly the higher priority of more specific rules. Prioritized default circumscription [ 14 ] <ref> [ 15 ] </ref> (generalizing [ 30 ] [ 27 ] ) has a concept of prioritization that is similar to courteous', though more general. However, circumscription behaves contrapositively, and thus quite differently from logic programs.
Reference: [ 16 ] <author> Benjamin N. Grosof. </author> <title> Prioritizing Multiple, Contradictory Sources in Common-Sense Learning by Being Told; or, </title> <editor> Advice-Taker Meets Bureaucracy. In Leora Morgenstern, editor, </editor> <booktitle> Proceedings of the Second Symposium on Logical Formalizations of Common-Sense Reasoning (Common-Sense '93), </booktitle> <institution> IBM T.J. Watson Research Center, </institution> <address> P.O. Box 704, Yorktown Heights, NY 10598, </address> <year> 1993. </year> <title> Available as an IBM Research Report. Copies of the Proceedings are available via the editor (wider publication being arranged). Held Guest Quarters Hotel, </title> <address> Austin, Texas, </address> <month> Jan. </month> <pages> 11-13, </pages> <year> 1993. </year>
Reference-contexts: Brewka's syntax is similar to courteous LP's; however, he is concerned with two additional directions of expressive generality: cyclic dependencies, especially negative (through ~); and reasoning about the prioritization itself, e.g., cf. <ref> [ 16 ] </ref> [ 3 ] [ 18 ] [ 17 ] . He modifies the well-founded semantics to strengthen its conclusions; prioritization specifies how rules defeat each other via negation-as-failure.
Reference: [ 17 ] <author> Benjamin N. Grosof. </author> <title> Conflict Resolution in Advice-Taking and Instruction. </title> <editor> In Diana Gordon, editor, </editor> <title> Proceedings of the ML-95 Workshop on Agents that Learn From Other Agents. Proceedings are available on the World Wide Web: http://www.cs.wisc.edu/~shavlik/ml95w1/ . Extended Version of the paper is available as IBM Research Report RC 20123 on the World Wide Web: http://www.research.ibm.com ., July 1995. </title> <booktitle> Workshop held in conjunction with the 1995 International Conference on Machine Learning, </booktitle> <address> held Tahoe City, CA. </address> <month> 34 </month>
Reference-contexts: For inspiration in grappling with these challenges, we have drawn on the idea of prioritized defaults (e.g., [ 30 ] [ 27 ] [ 14 ] <ref> [ 17 ] </ref> [ 15 ] (ch. 2 includes a literature review), and [ 3 ] (also includes a literature review)) from the field of general non-monotonic reasoning. <p> discussion of empty label. (Also, recall that prioritization between the prioritization facts themselves has no effect.) 24 More generally, it is straightforward to define merging many modules (not just two) with an inter-module prioritization partial order, using the concept of composing prioritization given in [ 14 ] [ 15 ] <ref> [ 17 ] </ref> . In intelligent agent applications such as those we are pursuing at IBM, modules may correspond to different users'/agents' knowledge bases; merging then corresponds to taking advice from other agents [ 17 ] . <p> prioritization partial order, using the concept of composing prioritization given in [ 14 ] [ 15 ] <ref> [ 17 ] </ref> . In intelligent agent applications such as those we are pursuing at IBM, modules may correspond to different users'/agents' knowledge bases; merging then corresponds to taking advice from other agents [ 17 ] . E.g., Joe's workflow rule set may be formed by combining rules he writes (and maintains) himself with rules written (and maintained) by Sue, his supervisor. <p> E.g., Joe may also merge in a news-handling rule module from his buddy Angela, and merge in rule modules on different subjects from various "enterprise" rule sets associated with different organizational levels or units. There are many natural bases for inter-module prioritization information [ 14 ] <ref> [ 17 ] </ref> . E.g., Joe may merge in a newer (fresher) module, or a more special-case (specificity) module. Relative authority (e.g., organizational) or reliability (e.g., expertise) of modules' sources may be the basis for prioritizing between the merges. <p> Brewka's syntax is similar to courteous LP's; however, he is concerned with two additional directions of expressive generality: cyclic dependencies, especially negative (through ~); and reasoning about the prioritization itself, e.g., cf. [ 16 ] [ 3 ] [ 18 ] <ref> [ 17 ] </ref> . He modifies the well-founded semantics to strengthen its conclusions; prioritization specifies how rules defeat each other via negation-as-failure. For comparison, each courteous LP rule r is most appropriately treated as "seminormal", i.e., as including additional body literal ~head (r).
Reference: [ 18 ] <author> Benjamin N. Grosof. </author> <title> Defeasible and pointwise prioritization: Preliminary re-port. </title> <type> Technical report, </type> <institution> IBM T.J. Watson Research Center, </institution> <address> P.O. Box 704, York-town Heights, NY 10598, USA. </address> <note> http://www.research.ibm.com ., July 1995. IBM Research Report RC 20125. Revised from 4/92 Working Paper and 1/93 Research Report versions. </note>
Reference-contexts: Brewka's syntax is similar to courteous LP's; however, he is concerned with two additional directions of expressive generality: cyclic dependencies, especially negative (through ~); and reasoning about the prioritization itself, e.g., cf. [ 16 ] [ 3 ] <ref> [ 18 ] </ref> [ 17 ] . He modifies the well-founded semantics to strengthen its conclusions; prioritization specifies how rules defeat each other via negation-as-failure. For comparison, each courteous LP rule r is most appropriately treated as "seminormal", i.e., as including additional body literal ~head (r).
Reference: [ 19 ] <author> Benjamin N. Grosof. </author> <title> Practical prioritized defaults via logic programs. </title> <booktitle> In Proceedings of the Sixth International Workshop on Nonmonotonic Reasoning. </booktitle> <address> http://www.kr.org/nm/nm96.html and http://www.cs.utexas.edu/users/vl/, 1996. Held Timberline, OR, </address> <month> June 10-12, </month> <year> 1996. </year> <note> Extended version available as IBM Research Report RC 20464, at http://www.research.ibm.com </note> . 
Reference-contexts: Courteous LP's (first introduced in <ref> [ 19 ] </ref> whose content partially overlaps with this paper) and Brewka's approach were developed independently.
Reference: [ 20 ] <author> Benjamin N. Grosof. </author> <title> Building Commercial Agents: An IBM Research Perspective (Invited Talk). </title> <booktitle> In Proceedings of the Second International Conference and Exhibition on Practical Applications of Intelligent Agents and Multi-Agent Technology (PAAM97), </booktitle> <address> P.O. Box 137, Blackpool, Lancashire, FY2 9UN, UK. http://www.demon.co.uk./ar/PAAM97, April 1997. </address> <publisher> Practical Application Company Ltd. </publisher> <address> Held London, UK. </address> <note> Also available as IBM Research Report RC 20835 at World Wide Web http://www.research.ibm.com </note> . 
Reference-contexts: IBM has released Agent Building Environment (ABE) as a toolkit product alpha, for building such applications. It is currently available free on the World Wide Web (see http://www.raleigh.ibm.com/iag/iaghome.html). ABE is based on our group's research system RAISE (Reusable Agent Intelligence Software Environment) [ 22 ] [ 23 ] <ref> [ 20 ] </ref> (also see author's Web address for more). ABE/RAISE's approach revolves around a logic program. In the currently released version of ABE, this logic program is acyclic (non-recursive), Datalog, and positive (without negation-as-failure). Inferencing is in the forward direction, and is exhaustive; i.e., all conclusions are generated.
Reference: [ 21 ] <author> Benjamin N. Grosof. </author> <title> Prioritized conflict handling for logic programs. </title> <editor> In Jan Maluszynski, editor, </editor> <booktitle> Logic Programming: Proceedings of the International Symposium (ILPS-97), </booktitle> <pages> pages 197-211, </pages> <address> Cambridge, MA, USA, 1997. </address> <publisher> MIT Press. Held Port Jefferson, </publisher> <address> NY, USA, </address> <month> Oct. </month> <pages> 12-17, </pages> <year> 1997. </year> <note> http://www.ida.liu.se/~ilps97. </note>
Reference: [ 22 ] <author> Benjamin N. Grosof and Davis A. Foulger. Globenet and RAISE: </author> <title> Intelligent Agents for Networked Newsgroups and Customer Service Support. </title> <booktitle> In Proceedings of the 1995 AAAI Fall Symposium on AI Applications in Knowledge Navigation and Retrieval, </booktitle> <address> Menlo Park, </address> <note> CA; World Wide Web http://www.aaai.org, November 1995. </note> <institution> American Association for Artificial Intelligence. Held at MIT, </institution> <address> Cambridge, MA. </address> <note> Paper also available as IBM Research Report RC 20226. World Wide Web http://www.research.ibm.com </note> . 
Reference-contexts: IBM has released Agent Building Environment (ABE) as a toolkit product alpha, for building such applications. It is currently available free on the World Wide Web (see http://www.raleigh.ibm.com/iag/iaghome.html). ABE is based on our group's research system RAISE (Reusable Agent Intelligence Software Environment) <ref> [ 22 ] </ref> [ 23 ] [ 20 ] (also see author's Web address for more). ABE/RAISE's approach revolves around a logic program. In the currently released version of ABE, this logic program is acyclic (non-recursive), Datalog, and positive (without negation-as-failure).
Reference: [ 23 ] <author> Benjamin N. Grosof, David W. Levine, Hoi Y. Chan, Colin P. Parris, and Joshua S. </author> <title> Auerbach. Reusable Architecture for Embedding Rule-Based Intelligence in Information Agents. </title> <booktitle> In Proceedings of the ACM Conference on Information and Knowledge Management (CIKM-95) Workshop on Intelligent Information Agents, </booktitle> <address> http://www.cs.umbc.edu/iia/, December 1995. </address> <note> Published via the World Wide Web. </note> <institution> Held Baltimore, MD. </institution> <note> Paper also available as IBM Research Report RC 20305. World Wide Web http://www.research.ibm.com </note> . 
Reference-contexts: IBM has released Agent Building Environment (ABE) as a toolkit product alpha, for building such applications. It is currently available free on the World Wide Web (see http://www.raleigh.ibm.com/iag/iaghome.html). ABE is based on our group's research system RAISE (Reusable Agent Intelligence Software Environment) [ 22 ] <ref> [ 23 ] </ref> [ 20 ] (also see author's Web address for more). ABE/RAISE's approach revolves around a logic program. In the currently released version of ABE, this logic program is acyclic (non-recursive), Datalog, and positive (without negation-as-failure).
Reference: [ 24 ] <author> Robert Kowalski and Fariba Sadri. </author> <title> Logic programs with exceptions. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 387-400, </pages> <year> 1991. </year>
Reference-contexts: Praaken & Sartor [ 32 ] has an argument-theoretic approach very similar to Brewka's. Buccafurri, Leone, & Rullo's [ 6 ] ordered LP's use an inheritance hierarchy as the basis of priority, but allow only one form of negation. Kowalski & Sadri <ref> [ 24 ] </ref> has a conflict handling approach in which rules that are "exceptions" to others are treated as having implicit preference.
Reference: [ 25 ] <author> S. Kraus, D. Lehmann, and M. Magidor. </author> <title> Preferential models and cumulative logics. </title> <journal> Artificial Intelligence, </journal> <volume> 44 </volume> <pages> 167-207, </pages> <year> 1990. </year>
Reference-contexts: Proof : Consider the answer set construction. A strictly-highest-priority candidate refutes every opposing candidate in its locale, hence its side wins. 2 Related to this point is the following property. 21 Theorem 21 (Cumulativity) Courteous LP's are cumulative in the sense of [ 28 ] <ref> [ 25 ] </ref> : if p is a conclusion of C, then adding the fact p (with any priority within its locale) to C results in a C 0 that has the same answer set as C. 2 Proof : Consider the answer set construction, and a given total atom stratification
Reference: [ 26 ] <author> Joao Alexandre Leite and Luis Moniz Pereira. </author> <title> Generalizing updates: From models to programs. </title> <editor> In Jurgen Dix, Luis Moniz Pereira, and Teodor Przy-musinski, editors, </editor> <booktitle> Logic Programming and Knowledge Representation (LPKR '97) (Proceedings of the ILPS '97 Postconference Workshop). </booktitle> <address> http://www.uni-koblenz.de/~dix/LPKR97, 1997. Held Port Jefferson, NY, USA, Oct. 16, </address> <year> 1997. </year> <note> http://www.ida.liu.se/~ilps97. 35 </note>
Reference-contexts: Brewka [ 5 ] and Zhang & Foo [ 39 ] each give an approach to prioritizing extended LP's. Gelfond & Son [ 12 ] give an approach to specifing prioritized defaults in extended LP's. Leite & Pereira <ref> [ 26 ] </ref> gives an approach to updating LP's that can achieve some similar effects as prioritizing LP's. 9.3 Previous Other Non-Monotonic Reasoning Approaches As our examples illustrated, courteous LP's have more expressive power on several dimensions than default inheritance systems in the vein of Touretzky [ 35 ] : e.g.,
Reference: [ 27 ] <author> V. Lifschitz. </author> <title> Computing circumscription. </title> <booktitle> In Proceedings IJCAI-85, pages 121--127, </booktitle> <address> Los Angeles, CA, </address> <year> 1985. </year>
Reference-contexts: For inspiration in grappling with these challenges, we have drawn on the idea of prioritized defaults (e.g., [ 30 ] <ref> [ 27 ] </ref> [ 14 ] [ 17 ] [ 15 ] (ch. 2 includes a literature review), and [ 3 ] (also includes a literature review)) from the field of general non-monotonic reasoning. <p> An interesting issue that we are pursuing in current work is how to automatically infer implicitly the higher priority of more specific rules. Prioritized default circumscription [ 14 ] [ 15 ] (generalizing [ 30 ] <ref> [ 27 ] </ref> ) has a concept of prioritization that is similar to courteous', though more general. However, circumscription behaves contrapositively, and thus quite differently from logic programs. Extended LP's are equivalent to a special case of Default Logic [ 34 ] , as Gelfond & Lifschitz showed.
Reference: [ 28 ] <author> D. Makinson. </author> <title> General theory of cumulative inference. </title> <editor> In M. Reinfrank et al., editor, </editor> <booktitle> Proceedings of the Second International Workshop on Non-Monotonic Reasoning, </booktitle> <pages> pages 1-18, </pages> <address> Berlin, Germany, </address> <year> 1989. </year> <booktitle> Springer Lecture Notes on Computer Science. </booktitle>
Reference-contexts: Proof : Consider the answer set construction. A strictly-highest-priority candidate refutes every opposing candidate in its locale, hence its side wins. 2 Related to this point is the following property. 21 Theorem 21 (Cumulativity) Courteous LP's are cumulative in the sense of <ref> [ 28 ] </ref> [ 25 ] : if p is a conclusion of C, then adding the fact p (with any priority within its locale) to C results in a C 0 that has the same answer set as C. 2 Proof : Consider the answer set construction, and a given
Reference: [ 29 ] <author> J. McCarthy. </author> <title> Circumscription|a form of non-monotonic reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 27-39, </pages> <year> 1980. </year>
Reference-contexts: Third, inferencing in the formalism is tractable, under the Datalog restriction. By contrast, conflict handling in most expressively powerful formalisms for prioritized default reasoning (e.g., based in Default Logic [ 34 ] or circumscription <ref> [ 29 ] </ref> ) is an additional source of NP-hard complexity beyond the base reasoning [ 13 ] [ 7 ] . Tractability makes applications practical beyond small scale. Fourth, there is a unique answer set (i.e., set of conclusions).
Reference: [ 30 ] <author> J. McCarthy. </author> <title> Applications of circumscription to formalizing commonsense knowledge. </title> <journal> Artificial Intelligence, </journal> <volume> 28 </volume> <pages> 89-116, </pages> <year> 1986. </year>
Reference-contexts: Another difficulty is that the presence of two forms of negation, i.e., having negation-as-failure in addition to classical negation, is potentially quite conceptually confusing, again especially for relatively non-technical end-users. For inspiration in grappling with these challenges, we have drawn on the idea of prioritized defaults (e.g., <ref> [ 30 ] </ref> [ 27 ] [ 14 ] [ 17 ] [ 15 ] (ch. 2 includes a literature review), and [ 3 ] (also includes a literature review)) from the field of general non-monotonic reasoning. <p> An interesting issue that we are pursuing in current work is how to automatically infer implicitly the higher priority of more specific rules. Prioritized default circumscription [ 14 ] [ 15 ] (generalizing <ref> [ 30 ] </ref> [ 27 ] ) has a concept of prioritization that is similar to courteous', though more general. However, circumscription behaves contrapositively, and thus quite differently from logic programs.
Reference: [ 31 ] <author> Luis Moniz Pereira, Joaquim N. Aparicio, and Jose J. Alferes. </author> <title> Non-monotonic reasoning with logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 17 </volume> <pages> 227-263, </pages> <year> 1993. </year>
Reference-contexts: Baral & Gelfond [ 2 ] discuss techniques for achieving some of the effects of priorities within extended LP's, e.g., via abnormalities, but do not give a general method. Pereira et al <ref> [ 31 ] </ref> address the issues of consistency, and 5 personal communication with Brewka 30 priorities between abnormalities, in extended LP's. Their approach to modi-fying the semantics is quite different in spirit and detail from ours, e.g., they force in ~ literals contrapositively.
Reference: [ 32 ] <author> Henry Prakken and Giovanni Sartor. </author> <title> On the relation between legal language and legal argument: Assumptions, applicability, and dynamic priorities. </title> <booktitle> In Proceedings of the International Conference on AI and Law, 1995. </booktitle> <address> Washington. </address>
Reference-contexts: Unlike courteous, his approach can result in an inconsistent conclusion set; he gives no consistency guarantee even for restricted cases. Next, we summarize Brewka's [ 4 ] review of three other relevant approaches. Praaken & Sartor <ref> [ 32 ] </ref> has an argument-theoretic approach very similar to Brewka's. Buccafurri, Leone, & Rullo's [ 6 ] ordered LP's use an inheritance hierarchy as the basis of priority, but allow only one form of negation.
Reference: [ 33 ] <author> Teodor Przymusinski. </author> <title> On the declarative semantics of deductive databases and logic programs. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA., </address> <year> 1988. </year>
Reference-contexts: often crucial requirements for practical usage, e.g., as we have found at IBM in our agent-building experience. 2 Preliminary Definitions; Extended LP's Background: We assume the reader is familiar with extended LP's [ 11 ] , with the semantics of stratified (ordinary, non-extended) logic programs with negation as failure (e.g., <ref> [ 33 ] </ref> ), and with the standard concepts in the logic programming literature (e.g., as reviewed in [ 2 ] ), including predicate / atom dependency graph and its acyclicity / non-recursiveness; and instantiation. Appendix A contains some review of these concepts. <p> A further special case is whenever LP, or its unlabelled version, is (syntactically) an acyclic general LP, i.e., whenever LP lacks classical negation. 2 Remark: Here, we interpret general LP's under the locally stratified semantics [ 1 ] <ref> [ 33 ] </ref> , the stable semantics [ 10 ] , or the well-founded semantics [ 37 ] . These semantics all coincide for the acyclic case since that is a special case of locally stratified (see, e.g., [ 2 ] for review of relevant concepts and literature). <p> Proof : Background : Extended LP's are defined by Gelfond & Lifschitz to have stable-style semantics. Stable semantics for the acyclic case coincides (see, e.g., [ 2 ] for review of literature) with the (locally) stratified semantics <ref> [ 33 ] </ref> and the well-founded semantics [ 37 ] . Overview and Introduction: If the main sub-program is consistent when interpreted as an extended LP, there is no conflict. The prioritization and labels are then irrelevant. <p> Overview and Introduction: If the main sub-program is consistent when interpreted as an extended LP, there is no conflict. The prioritization and labels are then irrelevant. The courteous semantics' stratified construction then essentially corresponds to the locally stratified semantics of <ref> [ 33 ] </ref> . For the acyclic case, the locally stratified semantics essentially coincides with [ 11 ] 's stable-style semantics for extended LP's. Details: Terminology: As usual throughout this paper, "atom" means ground atom. We are given that LP is E-consistent.
Reference: [ 34 ] <author> R. Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 12 </volume> <pages> 81-132, </pages> <year> 1980. </year>
Reference-contexts: An Overrides fact as part of the overall logic program then specifies a pairwise priority comparison. Third, inferencing in the formalism is tractable, under the Datalog restriction. By contrast, conflict handling in most expressively powerful formalisms for prioritized default reasoning (e.g., based in Default Logic <ref> [ 34 ] </ref> or circumscription [ 29 ] ) is an additional source of NP-hard complexity beyond the base reasoning [ 13 ] [ 7 ] . Tractability makes applications practical beyond small scale. Fourth, there is a unique answer set (i.e., set of conclusions). <p> However, circumscription behaves contrapositively, and thus quite differently from logic programs. Extended LP's are equivalent to a special case of Default Logic <ref> [ 34 ] </ref> , as Gelfond & Lifschitz showed. Prioritized variants of Default Logic (see [ 3 ] , which includes a review of that literature) are thus a target for comparison.
Reference: [ 35 ] <author> D. Touretzky. </author> <title> The Mathematics of Inheritance Systems. </title> <publisher> Pitman, </publisher> <address> London, </address> <year> 1986. </year>
Reference-contexts: Leite & Pereira [ 26 ] gives an approach to updating LP's that can achieve some similar effects as prioritizing LP's. 9.3 Previous Other Non-Monotonic Reasoning Approaches As our examples illustrated, courteous LP's have more expressive power on several dimensions than default inheritance systems in the vein of Touretzky <ref> [ 35 ] </ref> : e.g., multiple body conditions, multiple variables, prioritization beyond specificity, and appearance of negation (including by failure) in the body. An interesting issue that we are pursuing in current work is how to automatically infer implicitly the higher priority of more specific rules.
Reference: [ 36 ] <author> David S. Touretzky, John F. Horty, and Richmond H. Thomason. </author> <title> A clash of intuitions: The current state of nonmonotonic multiple inheritance systems. </title> <booktitle> In IJCAI-87, </booktitle> <pages> pages 476-482, </pages> <address> San Francisco, CA, 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Analysis: Here, the newly resolved conflict in a deeper locale results in a new candidate firing in the shallower locale, with non-monotonic effect in that shallower locale. 2 8.2 No Propagation of Ambiguity Courteous LP's do not propagate ambiguity in the sense of <ref> [ 36 ] </ref> 's paper on "clash of intuitions" in default reasoning. <p> Informally: the presence of conflict, especially conflict unresolved by priority, can generate such a disjunctive split; k such unresolved conflicts may result in k such disjunctive splits, and hence 2 k extensions. Another way to put this is that the PDL approaches propagate ambiguity in the sense of <ref> [ 36 ] </ref> 's paper on "clash of intuitions" in default reasoning (recall the discussion in subsection 8.2). Courteous LP's are, roughly speaking, less expressive than PDL or prioritized circumscription; there, arbitrary formula expressions, including quantifiers, are permitted in the consequent or antecedent of a rule.
Reference: [ 37 ] <author> A. Van Gelder, K. Ross, and J. Schlipf. </author> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of ACM, </journal> <volume> 38(3) </volume> <pages> 620-650, </pages> <year> 1991. </year>
Reference-contexts: case is whenever LP, or its unlabelled version, is (syntactically) an acyclic general LP, i.e., whenever LP lacks classical negation. 2 Remark: Here, we interpret general LP's under the locally stratified semantics [ 1 ] [ 33 ] , the stable semantics [ 10 ] , or the well-founded semantics <ref> [ 37 ] </ref> . These semantics all coincide for the acyclic case since that is a special case of locally stratified (see, e.g., [ 2 ] for review of relevant concepts and literature). General LP's are syntactically a special case of extended LP's. <p> Proof : Background : Extended LP's are defined by Gelfond & Lifschitz to have stable-style semantics. Stable semantics for the acyclic case coincides (see, e.g., [ 2 ] for review of literature) with the (locally) stratified semantics [ 33 ] and the well-founded semantics <ref> [ 37 ] </ref> . Overview and Introduction: If the main sub-program is consistent when interpreted as an extended LP, there is no conflict. The prioritization and labels are then irrelevant. The courteous semantics' stratified construction then essentially corresponds to the locally stratified semantics of [ 33 ] .
Reference: [ 38 ] <author> Molly Wilson and Alan Borning. </author> <title> Hierarchical constraint logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 16 </volume> <pages> 277-318, </pages> <year> 1993. </year>
Reference-contexts: An interesting issue for future work is to investigate the relationship between the courteous approach and the representational methods based on abnormalities given by Baral & Gelfond and Pereira et al . Hierarchical Constraint Logic Programming (HCLP) <ref> [ 38 ] </ref> has a notion somewhat similar to defaults with priorities: soft constraints, which are used in an abductive-flavor manner. In details of concept, inferencing, and application, HCLP differs markedly from courteous logic programs.
Reference: [ 39 ] <author> Yan Zhang and Norman Y. Foo. </author> <title> Answer sets for prioritized logic programs. </title> <editor> In Jan Maluszynski, editor, </editor> <booktitle> Logic Programming: Proceedings of the International Symposium (ILPS-97), </booktitle> <pages> pages 69-83, </pages> <address> Cambridge, MA, USA, 1997. </address> <publisher> MIT Press. Held Port Jefferson, </publisher> <address> NY, USA, </address> <month> Oct. </month> <pages> 12-17, </pages> <year> 1997. </year> <note> http://www.ida.liu.se/~ilps97. 36 </note>
Reference-contexts: In details of concept, inferencing, and application, HCLP differs markedly from courteous logic programs. Contemporaneously and independently of this paper, the following other related work appeared, too late to provide detailed comparisons here. Brewka [ 5 ] and Zhang & Foo <ref> [ 39 ] </ref> each give an approach to prioritizing extended LP's. Gelfond & Son [ 12 ] give an approach to specifing prioritized defaults in extended LP's.
References-found: 39

