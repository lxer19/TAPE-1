URL: http://www.cs.columbia.edu/~gravano/Papers/1994/IEEE_tc94.ps
Refering-URL: http://www.cs.columbia.edu/~gravano/publications.html
Root-URL: http://www.cs.columbia.edu
Title: Storage-Efficient, Deadlock-Free Packet Routing Algorithms for Torus Networks on "Adaptive, Deadlock-Free Packet Routing in Torus
Author: Robert Cypher Luis Gravano R. Cypher and L. Gravano, 
Address: San Jose, CA 95120  Stanford, CA  Argentina, 1300 Buenos Aires, Argentina.  
Affiliation: IBM Almaden Research Center,  Computer Science Department, Stanford University,  IBM  
Note: Based in part  which appeared in Proceedings of the 1992 International Conference on Parallel Processing, Aug. 17-21, 1992, vol. III, pp. 204-211  94305. This work was performed while the author was at CRAAG,  
Abstract: We present two new packet routing algorithms for parallel computers with torus interconnection networks of arbitrary size and dimension. Both algorithms use only minimal length paths, are fully adaptive in the sense that all minimal length paths may be used to avoid congestion, and are free of deadlock, livelock and starvation. Algorithm 1 requires only three central queues per routing node. It is the first known minimal length packet routing algorithm for torus networks which requires a constant number of queues per node, regardless of the size and dimension of the torus. In fact, the requirement of three queues per node is optimal, as no such algorithm is possible when all nodes have two or fewer queues. Algorithm 2 requires only that each node have two input buffers per edge. It is the first known minimal-fully-adaptive packet routing algorithm for torus networks which does not require central queues and which does not require any node to have more than two input or two output buffers per edge. Both algorithms are simple and appear to be well-suited to VLSI implementation. They can be used with either store-and-forward or virtual cut-through routing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kenneth E. Batcher. </author> <title> Design of a massively parallel processor. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 29(9) </volume> <pages> 836-840, </pages> <month> September </month> <year> 1980. </year>
Reference-contexts: Because of these advantages, a large number of distributed memory parallel computers utilize a mesh or torus interconnection network. Examples include the MPP from Goodyear Aerospace <ref> [1] </ref>, the MP-1 from MasPar [23], the Paragon from Intel Scientific, and the J-Machine from MIT [24]. The primary disadvantages of mesh and torus interconnection networks are their relatively large diameters and relatively small bisection bandwidths [27], both of which limit their ability to support global communication.
Reference: [2] <author> P. Berman, L. Gravano, G. D. Pifarre, and J.L.C. Sanz. </author> <title> Adaptive deadlock- and livelock-free routing with all minimal paths in torus networks. </title> <booktitle> In Proceedings of the 4th Symposium on Parallel Algorithms and Architectures (SPAA), </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class. <p> All previously known algorithms with the same properties have either required central queues or have required that some node have at least three input or three output buffers associated with some edge <ref> [2] </ref>. Both of the algorithms presented here can operate with either store-and-forward or virtual cut-through switching. In addition, they are quite simple and thus appear to be well-suited to VLSI implementation.
Reference: [3] <author> G.-M. Chiu, S. Chalasani, and C. S. Raghavendra. </author> <title> Flexible, fault-tolerant routing criteria for circuit-switched hypercubes. </title> <booktitle> In Proc. 11 th 26 International Conference on Distributed Computing Systems. IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [4] <author> Robert Cypher and Luis Gravano. </author> <title> Requirements for deadlock-free adaptive packet routing. </title> <booktitle> In Proc. 11th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 25-33, </pages> <year> 1992. </year>
Reference-contexts: Furthermore, the requirement of three queues per node is optimal, as it has been proven that it is impossible to create a minimal deadlock-free routing algorithm for tori (whether or not it is adaptive) which uses only two queues per node <ref> [4] </ref>. 3 We will also present a minimal-fully-adaptive routing algorithm for torus networks of arbitrary size and dimension which is free of deadlock, livelock, and starvation and yet requires only that each node have two input buffers per edge. <p> The following theorem, which was proven by Cypher and Gravano <ref> [4] </ref>, shows that the requirement of three queues per node is optimal, in the sense that no minimal algorithm which requires only two queues per node is free of deadlock. <p> Furthermore, Algorithm 1's storage requirements are provably optimal, in that any minimal, deadlock-free algorithm for tori based on the model presented in Section 2.2 must have at least 3 queues in some node <ref> [4] </ref>. Algorithm 2 is the first minimal-fully-adaptive deadlock-free algorithm known for torus networks which requires only that each node have two input buffers per edge. The torus has several significant advantages over the mesh.
Reference: [5] <author> W. J. Dally. </author> <title> Fine-grain message passing concurrent computers. </title> <booktitle> In Proc. 3rd Conference on Hypercube Concurrent Computers and Applications, </booktitle> <pages> pages 2-12, </pages> <year> 1988. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [6] <author> W. J. Dally and H. Aoki. </author> <title> Deadlock-free adaptive routing in multicom-puter networks using virtual channels. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4 </volume> <pages> 466-475, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [7] <author> W. J. Dally and C. Seitz. </author> <title> Deadlock-free message routing in multiprocessor interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36 </volume> <pages> 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Routing algorithms can be further classified by the type of switching mode that they utilize. In store-and-forward routing [22] each packet is stored completely in a node before being sent to the next node in its path. In contrast, wormhole routing <ref> [7] </ref> breaks each packet into small pieces called flits. As soon as a flit has been received by a node, it is sent to the next node in its path without waiting for the remaining flits to arrive. <p> Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [8] <author> J. Duato. </author> <title> Deadlock-free adaptive routing algorithms for multicomput-ers: Evaluation of a new algorithm. </title> <booktitle> In Proc. 3rd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 840-847, </pages> <year> 1991. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [9] <author> Sergio A. Felperin, Hernan Laffitte, Guillermo Buranits, and Jorge L.C. Sanz. </author> <title> Deadlock-free minimal packet routing in the torus network. </title> <type> Technical Report TR:91-22, </type> <institution> IBM Argentina, CRAAG, </institution> <year> 1991. </year>
Reference-contexts: These techniques can be divided into two classes, namely those which require only central queues [10, 12, 16, 18, 22, 25, 28, 29] and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node <ref> [9, 15, 19] </ref>. Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. <p> The techniques created by Pifarre, Gravano, Felperin and Sanz [25] and by Felperin, Laffitte, Buranits and Sanz <ref> [9] </ref> lead to minimal-fully-adaptive routing algorithms that require 2d queues per node in d-dimensional tori, where d 2.
Reference: [10] <author> B. Gavish, P.M. Merlin, and P.J. Schweitzer. </author> <title> Minimal buffer requirements for avoiding store-and-forward deadlock. </title> <type> Technical Report RC 6672, </type> <institution> IBM T.J. Watson Research Center, </institution> <month> August </month> <year> 1977. </year>
Reference-contexts: Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class.
Reference: [11] <author> C. J. Glass and L. M. Ni. </author> <title> The turn model for adaptive routing. </title> <booktitle> In Proc. 19th Intl. Symposium on Computer Architecture, </booktitle> <pages> pages 278-287, </pages> <year> 1992. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [12] <author> Inder S. Gopal. </author> <title> Prevention of store-and-forward deadlock in computer networks. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 33(12) </volume> <pages> 1258-1264, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class.
Reference: [13] <author> L. Gravano, G. D. Pifarre, G. Denicolay, and J.L.C. Sanz. </author> <title> Adaptive deadlock-free worm-hole routing in hypercubes. </title> <booktitle> In Proceedings of the 6th International Parallel Processing Symposium. IEEE Computer Society, </booktitle> <year> 1992. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [14] <author> K.D. Gunther. </author> <title> Prevention of deadlocks in packet-switched data transport systems. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 29(4), </volume> <month> April </month> <year> 1981. </year>
Reference-contexts: Both of the algorithms presented here can operate with either store-and-forward or virtual cut-through switching. In addition, they are quite simple and thus appear to be well-suited to VLSI implementation. These algorithms use the same principles as those used by Gunther <ref> [14] </ref> and by Pifarre et al. [25] for the design of deadlock-free packet routing algorithms. The remainder of this paper is organized as follows. The formal routing model and some definitions are given in Section 2. Routing Algorithms 1 and 2 are presented in Sections 3 and 4, respectively. <p> Property P3 is a fairness assumption which prevents the possibility of starvation once a packet has entered the network. The following lemma will be essential in proving the desired properties of our torus routing algorithms. The proof is immediate from a proposition proven by Gunther <ref> [14] </ref>.
Reference: [15] <author> Peter A.J. Hilbers and Johan J. Lukkien. </author> <title> Deadlock-free message routing in multicomputer networks. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 178-186, </pages> <year> 1989. </year>
Reference-contexts: These techniques can be divided into two classes, namely those which require only central queues [10, 12, 16, 18, 22, 25, 28, 29] and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node <ref> [9, 15, 19] </ref>. Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance.
Reference: [16] <author> C.R. Jesshope, P.R. Miller, and J.T. Yantchev. </author> <title> High performance communications in processor networks. </title> <booktitle> In Proc. 16th Intl. Symposium on Computer Architecture, </booktitle> <pages> pages 150-157, </pages> <year> 1989. </year>
Reference-contexts: Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class. <p> For example, the "hops-so-far" scheme [22] requires that each node have more queues than the diameter of the torus. The routing algorithm described by Jesshope, Miller and Yantchev <ref> [16] </ref> and by Yantchev and Jesshope [29] is minimal-fully-adaptive, but it requires eight queues per node in a two-dimensional torus and more queues per node in higher dimensional tori.
Reference: [17] <author> P. Kermani and L. Kleinrock. </author> <title> Virtual Cut-Through: A new computer communication switching technique. </title> <journal> Computer Networks, </journal> <volume> 3 </volume> <pages> 267-286, </pages> <year> 1979. </year>
Reference-contexts: This creates a "worm" of flits which follow one another through the network. If 2 the head of this worm encounters congestion, the entire worm is prevented from making progress. Finally, virtual cut-through routing <ref> [17] </ref> is similar to wormhole routing in that each packet is sent as a worm of flits which follow one another through the network. However, virtual cut-through routing buffers the entire worm in the node in which congestion occurs.
Reference: [18] <author> S. Konstantinidou. </author> <title> Adaptive, minimal routing in hypercubes. </title> <booktitle> In Proc. 6th. MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 139-153, </pages> <year> 1990. </year>
Reference-contexts: Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class.
Reference: [19] <author> S. Konstantinidou and L. Snyder. </author> <title> The Chaos router: A practical application of randomization in network routing. </title> <booktitle> In Proc. 2nd. Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 21-30, </pages> <year> 1990. </year>
Reference-contexts: These techniques can be divided into two classes, namely those which require only central queues [10, 12, 16, 18, 22, 25, 28, 29] and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node <ref> [9, 15, 19] </ref>. Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance.
Reference: [20] <author> Tom Leighton, Fillia Makedon, and Ioannis G. Tollis. </author> <title> A 2n 2 step algorithm for routing in an n fi n array with constant size queues. </title> <booktitle> In Proc. ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 328-335, </pages> <year> 1989. </year>
Reference-contexts: In contrast, mesh networks are not node symmetric, and their lack of symmetry can cause certain regions of the mesh to suffer from congestion <ref> [20] </ref>. As a result, torus networks could play an important role in the next generation of parallel computers. The performance of a parallel computer is largely dependent on the performance of its communication network, so a great deal of research has been devoted to developing efficient routing algorithms.
Reference: [21] <author> D.H. Linder and J.C. Harden. </author> <title> An adaptive and fault tolerant wormhole routing strategy for k-ary n-cubes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(1) </volume> <pages> 2-12, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [22] <author> P.M. Merlin and P.J. Schweitzer. </author> <title> Deadlock avoidance in store-and-forward networks. 1: Store-and-forward deadlock. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 28(3) </volume> <pages> 345-354, </pages> <month> March </month> <year> 1980. </year>
Reference-contexts: A minimal routing algorithm which allows each message to take all of its shortest routes is said to be minimal-fully-adaptive. Routing algorithms can be further classified by the type of switching mode that they utilize. In store-and-forward routing <ref> [22] </ref> each packet is stored completely in a node before being sent to the next node in its path. In contrast, wormhole routing [7] breaks each packet into small pieces called flits. <p> Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class. <p> No previously published technique yields a minimal store-and-forward or virtual cut-through routing algorithm that requires only a constant number of queues per node in tori of arbitrary size and dimension. For example, the "hops-so-far" scheme <ref> [22] </ref> requires that each node have more queues than the diameter of the torus. <p> This approach is basically the same as the common buffer pool technique introduced by Merlin and Schweitzer <ref> [22] </ref>. Note that the use of common queues allows for more efficient use of the storage in the nodes than does the use of larger queues, as some of the storage is available to all of the packets attempting to enter the node.
Reference: [23] <institution> MP-1 family data-parallel computers, 1987. MasPar Computer Corporation, 749 North Mary Ave., </institution> <address> Sunnyvale, CA. </address>
Reference-contexts: Because of these advantages, a large number of distributed memory parallel computers utilize a mesh or torus interconnection network. Examples include the MPP from Goodyear Aerospace [1], the MP-1 from MasPar <ref> [23] </ref>, the Paragon from Intel Scientific, and the J-Machine from MIT [24]. The primary disadvantages of mesh and torus interconnection networks are their relatively large diameters and relatively small bisection bandwidths [27], both of which limit their ability to support global communication.
Reference: [24] <author> Michael Noakes and William J. Dally. </author> <title> System design of the J-Machine. </title> <booktitle> In Proc. Sixth MIT Conf. on Advanced Research in VLSI, </booktitle> <pages> pages 179-194, </pages> <year> 1990. </year>
Reference-contexts: Because of these advantages, a large number of distributed memory parallel computers utilize a mesh or torus interconnection network. Examples include the MPP from Goodyear Aerospace [1], the MP-1 from MasPar [23], the Paragon from Intel Scientific, and the J-Machine from MIT <ref> [24] </ref>. The primary disadvantages of mesh and torus interconnection networks are their relatively large diameters and relatively small bisection bandwidths [27], both of which limit their ability to support global communication.
Reference: [25] <author> Gustavo D. Pifarre, Luis Gravano, Sergio A. Felperin, and Jorge L.C. Sanz. </author> <title> Fully-adaptive minimal deadlock-free packet routing in hyper-cubes, meshes, and other networks. </title> <booktitle> In Proc. 3rd ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 278-290, </pages> <year> 1991. </year>
Reference-contexts: Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class. <p> The routing algorithm described by Jesshope, Miller and Yantchev [16] and by Yantchev and Jesshope [29] is minimal-fully-adaptive, but it requires eight queues per node in a two-dimensional torus and more queues per node in higher dimensional tori. The techniques created by Pifarre, Gravano, Felperin and Sanz <ref> [25] </ref> and by Felperin, Laffitte, Buranits and Sanz [9] lead to minimal-fully-adaptive routing algorithms that require 2d queues per node in d-dimensional tori, where d 2. <p> Both of the algorithms presented here can operate with either store-and-forward or virtual cut-through switching. In addition, they are quite simple and thus appear to be well-suited to VLSI implementation. These algorithms use the same principles as those used by Gunther [14] and by Pifarre et al. <ref> [25] </ref> for the design of deadlock-free packet routing algorithms. The remainder of this paper is organized as follows. The formal routing model and some definitions are given in Section 2. Routing Algorithms 1 and 2 are presented in Sections 3 and 4, respectively.
Reference: [26] <author> C. L. Seitz, W. C. Athas, C. M. Flaig, A. J. Martin, J. Seizovic, C. S. Steele, and W.-K. Su. </author> <booktitle> The architecture and programming of the Ame-tek Series 2010 multicomputer. In Proc. 3rd Conference on Hypercube Concurrent Computers and Applications, </booktitle> <pages> pages 33-36, </pages> <year> 1988. </year> <month> 28 </month>
Reference-contexts: Algorithms in the first class often require less storage than those in the second class. However, the central queues can become sequential bottlenecks, so algorithms in the second class may offer better performance. In addition, it should be noted that deadlock-free wormhole routing algorithms <ref> [3, 5, 6, 7, 8, 11, 2, 13, 21, 26] </ref> can be used to obtain deadlock-free store-and-forward and virtual cut-through algorithms in the second class.
Reference: [27] <author> Clark D. Thompson. </author> <title> Area-time complexity for VLSI. </title> <booktitle> In Proc. 11th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 81-88, </pages> <year> 1979. </year>
Reference-contexts: Examples include the MPP from Goodyear Aerospace [1], the MP-1 from MasPar [23], the Paragon from Intel Scientific, and the J-Machine from MIT [24]. The primary disadvantages of mesh and torus interconnection networks are their relatively large diameters and relatively small bisection bandwidths <ref> [27] </ref>, both of which limit their ability to support global communication. However, note that given d-dimensional mesh and torus computers of equal size, the torus computer has approximately half the diameter and twice the bisection bandwidth of the mesh computer.
Reference: [28] <author> Sam Toueg and Jeffrey D. Ullman. </author> <title> Deadlock-free packet switching networks. </title> <journal> SIAM Journal of Computing, </journal> <volume> 10(3) </volume> <pages> 594-611, </pages> <month> August </month> <year> 1981. </year>
Reference-contexts: Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class.
Reference: [29] <author> J. Yantchev and C.R. Jesshope. </author> <title> Adaptive, low latency, deadlock-free packet routing for networks of processors. </title> <journal> IEE Proc., Pt. E, </journal> <volume> 136(3) </volume> <pages> 178-186, </pages> <month> May </month> <year> 1989. </year> <month> 29 </month>
Reference-contexts: Many techniques have been developed to reduce the storage requirements of deadlock-free store-and-forward and virtual cut-through routing algorithms. These techniques can be divided into two classes, namely those which require only central queues <ref> [10, 12, 16, 18, 22, 25, 28, 29] </ref> and those which require that each node have queues (often called buffers) that are associated with each edge that is incident to the node [9, 15, 19]. Algorithms in the first class often require less storage than those in the second class. <p> For example, the "hops-so-far" scheme [22] requires that each node have more queues than the diameter of the torus. The routing algorithm described by Jesshope, Miller and Yantchev [16] and by Yantchev and Jesshope <ref> [29] </ref> is minimal-fully-adaptive, but it requires eight queues per node in a two-dimensional torus and more queues per node in higher dimensional tori.
References-found: 29

