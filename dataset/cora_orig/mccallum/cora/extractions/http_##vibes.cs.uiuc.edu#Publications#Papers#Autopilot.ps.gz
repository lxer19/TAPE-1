URL: http://vibes.cs.uiuc.edu/Publications/Papers/Autopilot.ps.gz
Refering-URL: http://vibes.cs.uiuc.edu/Publications/publications.htm
Root-URL: http://www.cs.uiuc.edu
Title: The Autopilot Performance-Directed Adaptive Control System 1  
Author: Randy L. Ribler, Huseyin Simitci, Daniel A. Reed 
Keyword: Performance Analysis. Adaptive Control. Application Steering.  
Address: Urbana, Illinois 61801, USA  
Affiliation: Department of Computer Science, University of Illinois,  
Abstract: High-performance computing is rapidly expanding to include distributed collections of heterogeneous sequential and parallel systems and irregular applications with complex, data dependent execution behavior and time varying resource demands. To provide adaptive resource management for dynamic applications, we are developing the Autopilot toolkit. Autopilot provides a flexible set of performance sensors, decision procedures, and policy actuators to realize adaptive control of applications and resource management policies on both parallel and wide area distributed systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter M. Chen and David A. Patterson. </author> <title> Maximizing Performance in a Striped Disk Array. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 322-331, </pages> <year> 1990. </year>
Reference-contexts: Distributing the file blocks such that each processor accesses a set of independent disks would reduce the read access time. This approach is based on Chen and Patterson's <ref> [1] </ref> observation that the notions of parallelism (i.e., the number of disks across which a file is striped) and concurrency (i.e., the number of outstanding input/output requests) are mutually conflicting.
Reference: [2] <author> Peter F. Corbett, Jean-Pierre Prost, Chris Demetriou, Garth Gibson, Erik Riedel, Jim Zelenka, Yuqun Chen, Ed Felten, Kai Li, John Hartman, Larry Peterson, Brian Bershad, Alec Wolman, and Ruth Aydt. </author> <title> Proposal for a Common Parallel File System Programming Interface (Version 1.0). </title> <note> http://www.cs.arizona.edu/sio/, November 1997. </note>
Reference-contexts: For example, UNIX systems have long allowed applications to issue hints about future memory reference patterns. Similarly, new application programming interfaces (APIs) for high-performance input/output include interfaces for user specification of future file access patterns. For example, the Scalable I/O initiative's low-level API <ref> [2] </ref> allows users to provide both ordered and unordered access hints. Ordered hints enumerate a list of future accesses and the order they will occur. Conversely, unordered hints qualitatively describe future access patterns without ordering specific requests (e.g., by specifying that file accesses will be random).
Reference: [3] <author> Phyllis E. Crandall, Ruth A. Aydt, Andrew A. Chien, and Daniel A. Reed. </author> <title> Input/Output Characteristics of Scalable Parallel Applications. </title> <booktitle> In Proceedings of Supercomputing '95, </booktitle> <address> San Diego, CA, December 1995. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 20 </pages>
Reference: [4] <institution> U.S. DOE. United States Department of Energy Accelerated Strategic Computing Initiative (ASCI). </institution> <note> http://www.llnl.gov/asci, January 1997. </note>
Reference-contexts: Such adaptive file placement decisions become extremely important on large scale parallel systems (e.g., planned systems in the U.S. Department of Energy Accelerated Strategic Computing Initiative (ASCI) <ref> [4] </ref> with over 10,000 disks and a few thousand processors).
Reference: [5] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus Approach to Integrating Multithreading and Communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 37 </volume> <pages> 70-82, </pages> <year> 1996. </year>
Reference-contexts: Of these, the most important are support for both shared and distributed memory programming models and the seamless integration of both local (single machine) and wide area (network) parallelism. To maximize portability, Autopilot is built atop the successful Nexus <ref> [5] </ref> communication library and its unified model of a shared address space across local and wide area networks. <p> After retrieving a global pointer from the sensor manager, the client can then register with the remote sensor or actuator via an asynchronous Remote Service Routine (RSR) (i.e., a Nexus remote procedure call <ref> [5] </ref>). Following this, the client can communicate directly with the remote sensor or actuator. 13 6.2 Remote Control Example whose attributes match those specified by the ReadClassAttributes variable (i.e., those of the sensor of Figure 2).
Reference: [6] <author> Ian Foster and Carl Kesselman. Globus: </author> <title> A Metacomputing Infrasturcture Toolkit. </title> <journal> International Journal of Supercomputing Applications, </journal> <note> to appear 1998. </note>
Reference-contexts: This view of adaptive runtime systems is buttressed by recent experiences with flexible input/output policies [12,10,19] and by adaptive runtime systems for wide area computing <ref> [6] </ref>. In both cases, use of real-time performance data to adapt to changing resource demands and availability has yielded order of magnitude performance improvements. Based on this thesis, this paper describes the design and prototype implementation of the Autopilot real-time adaptive control infrastructure.
Reference: [7] <author> James V. Huber, Christopher L. Elford, Daniel A. Reed, Andrew A. Chien, and David S. Blumenthal. </author> <title> PPFS: A High-Performance Portable Parallel File System. </title> <booktitle> In Proceedings of the 9th ACM International Conference on Supercomputing, </booktitle> <pages> pages 385-394, </pages> <month> July </month> <year> 1995. </year>
Reference: [8] <author> N. K. Kasabov. </author> <title> Foundations of Neural Networks, Fuzzy Systems, and Knowledge Engineering. </title> <publisher> The MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Fuzzy logic theory supports a wide variety of transition functions for fuzzy variables and many functions for the fuzzy analog of boolean operators <ref> [8] </ref>. These fuzzy operators combine continuous fuzzy variables to yield a fuzzy output (e.g., a fuzzy AND might take the minimum of two fuzzy logic values across their ranges). In consequence, multiple fuzzy rules can be partially true simultaneously.
Reference: [9] <author> Stephen Lamm, Daniel A. Reed, and Will H. Scullin. </author> <title> Real-time Geographic Visualization of World Wide Web Traffic. </title> <booktitle> In Proceedings of the Fifth International World Wide Web Conference, </booktitle> <month> May </month> <year> 1996. </year>
Reference: [10] <author> Tara M. Madhyastha, Christopher L. Elford, and Daniel A. Reed. </author> <title> Optimizing Input/Output Using Adaptive File System Policies. </title> <booktitle> In Proceedings of the Fifth Goddard Conference on Mass Storage Systems and Technologies, </booktitle> <pages> pages II:493-514, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: The ReadSizeSensor sensor records data via the RecordData function invoked each time the UNIX read routine is called. 4 Hints and Classifications Although sensors provide the quantitative data needed to make resource policy management decisions, our experience with adaptive file system policy selection <ref> [10] </ref> has shown that qualitative data on current and future resource demands is an effective complement. This information can be obtained either via user-supplied hints (i.e., assertions about future resource use) or by synthesizing qualitative resource descriptions from quantitative data (e.g., as in the example of Figure 2).
Reference: [11] <author> Tara M. Madhyastha and D. A. Reed. </author> <title> Exploiting Global Input/Output Access Pattern Classification. </title> <booktitle> In Proceedings of Supercomputing '97, </booktitle> <month> November </month> <year> 1997. </year>
Reference: [12] <author> Tara M. Madhyastha and Daniel A. Reed. </author> <title> Intelligent, Adaptive File System Policy Selection. </title> <booktitle> In Proceedings of Frontiers '96, </booktitle> <pages> pages 172-179, </pages> <month> October </month> <year> 1996. </year>
Reference: [13] <author> Tara M. Madhyastha and Daniel A. Reed. </author> <title> Input/Output Access Pattern Classification Using Hidden Markov Models. </title> <booktitle> In Proceedings of IOPADS '97, </booktitle> <pages> pages 57-67, </pages> <month> November </month> <year> 1997. </year>
Reference-contexts: These guidelines for real-time measurement and adaptive control are based on our experience with the Pablo performance analysis environment [17,16] and extensions to support real-time performance monitoring, qualitative classification of file access patterns <ref> [13] </ref>, and table-driven selection of file policies [19,12]. Building on these lessons and components of our existing Pablo software, we have designed and are implementing the Autopilot toolkit for real-time adaptive control of distributed and parallel computations. <p> In the figure, two sensors are used. The first, the ReadClassificationSensor, runs as a separate thread, monitoring the offsets of file reads and using the attached function IOClassifier to generate qualitative classifications <ref> [13] </ref> of the file access pattern, identifying it as sequential, strided, or random. The procedural ReadSizeSensor sensor uses a sliding window average attached function to generate a sequence of mean request sizes.
Reference: [14] <author> Barton P. Miller, Mark D. Callaghan, Jonathan M. Cargille, Jeffrey K. Hollingsworth, R. Bruce Irwin, Karen L. Karavanic, Krishna Kunchitkapadam, and Tia Newhall. </author> <title> The Paradyn Parallel Performance Measurement Tools. </title> <journal> IEEE Computer, </journal> <volume> 28(11) </volume> <pages> 37-46, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Moreover, the desired instrumentation points may not be known until execution time. Thus, it should be possible to patch object code, inserting calls to sensors and actuators as needed (e.g., using the Paradyn toolkit <ref> [14] </ref>). To support a wide range of instrumentation requirements, sensors and actuators can operate in both threaded and non-threaded modes. <p> This ability to extend the basic functionality of performance sensors is a generalization of that provided by the Pablo toolkit's extension interface [16]. For dynamic instrumentation of object code, Autopilot is designed to exploit the Paradyn Metric Description Language (MDL) <ref> [14] </ref>. Using MDL, future versions of Autopilot will be able to insert threaded and procedural sensors in object code regardless of source code availability. In addition to object code patching for sensor insertion and removal, Autopilot supports low overhead controls for enabling and disabling existing sensors.
Reference: [15] <author> Barton P. Miller, Morgan Clark, Jeff Hollingsworth, Steven Kierstead, Sek-See Lim, and Timothy Torzewski. IPS-2: </author> <title> The Second Generation of a Parallel Program Measurement System. </title> <journal> IEEE Tranactions on Computers, </journal> <volume> 1(2) </volume> <pages> 206-217, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: In x3-x5, we will examine all of these issues in greater detail. 5 3 Flexible Performance Sensors Historically, performance instrumentation required users, parsers, or compilers to insert instrumentation library calls in application source code. IPS-2 <ref> [15] </ref>, AIMS [26], Pablo [17] and other popular performance analysis toolkits all operated in this way. After instrumentation insertion, the application code was recompiled and performance data was collected during subsequent execution.
Reference: [16] <author> Daniel A. Reed. </author> <title> Experimental Performance Analysis of Parallel Systems: Techniques and Open Problems. </title> <booktitle> In Proceedings of the 7th International Conference on Modelling Techniques and Tools for Computer Performance Evaluation, </booktitle> <pages> pages 25-51, </pages> <month> May </month> <year> 1994. </year> <month> 21 </month>
Reference-contexts: As we shall see in x4, such high-level classifications provide critical guidance when selecting resource policies. This ability to extend the basic functionality of performance sensors is a generalization of that provided by the Pablo toolkit's extension interface <ref> [16] </ref>. For dynamic instrumentation of object code, Autopilot is designed to exploit the Paradyn Metric Description Language (MDL) [14]. Using MDL, future versions of Autopilot will be able to insert threaded and procedural sensors in object code regardless of source code availability.
Reference: [17] <author> Daniel A. Reed, Ruth A. Aydt, Roger J. Noe, Phillip C. Roth, Keith A. Shields, Bradley W. Schwartz, and Luis F. Tavera. </author> <title> Scalable Performance Analysis: The Pablo Performance Analysis Environment. </title> <editor> In Anthony Skjellum, editor, </editor> <booktitle> Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <pages> pages 104-113. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: In x3-x5, we will examine all of these issues in greater detail. 5 3 Flexible Performance Sensors Historically, performance instrumentation required users, parsers, or compilers to insert instrumentation library calls in application source code. IPS-2 [15], AIMS [26], Pablo <ref> [17] </ref> and other popular performance analysis toolkits all operated in this way. After instrumentation insertion, the application code was recompiled and performance data was collected during subsequent execution.
Reference: [18] <author> Daniel A. Reed, Christopher L. Elford, Tara Madhyastha, Will H. Scullin, Ruth A. Aydt, and Evgenia Smirni. </author> <title> I/O, Performance Analysis, and Performance Data Immersion. </title> <booktitle> In Proceedings of MASCOTS '96, </booktitle> <pages> pages 1-12, </pages> <month> February </month> <year> 1996. </year>
Reference: [19] <author> Daniel A. Reed, Christopher L. Elford, Tara Madhyastha, Evgenia Smirni, and Stephen L. </author> <title> Lamm. The Next Frontier: Interactive and Closed Loop Performance Steering. </title> <booktitle> In Proceedings of the 1996 International Conference on Parallel Processing Workshop, </booktitle> <pages> pages 20-31, </pages> <month> August </month> <year> 1996. </year>
Reference: [20] <author> Daniel A. Reed, Keith A. Shields, Luis F. Tavera, Will H. Scullin, and Christopher L. Elford. </author> <title> Virtual Reality and Parallel Systems Performance Analysis. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 57-67, </pages> <month> November </month> <year> 1995. </year>
Reference: [21] <author> Will H. Scullin, Thomas T. Kwan, and Daniel A. Reed. </author> <title> Real-time Visualization of NCSA's World Wide Web Data. </title> <booktitle> In Symposium on Visualizing Time-Varying Data, </booktitle> <month> September </month> <year> 1995. </year>
Reference: [22] <author> Huseyin Simitci and Daniel A. Reed. </author> <title> A Comparison of Logical and Physical Parallel I/O Patterns. </title> <journal> International Journal of Supercomputer Applications and High Performance Computing, </journal> <note> to appear 1998. </note>
Reference: [23] <author> Evgenia Smirni, Christopher L. Elford, and Daniel A. Reed. </author> <title> Performance Modeling of a Parallel I/O System: An Application Driven Approach. </title> <booktitle> In Proceedings of the Eighth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <month> March </month> <year> 1997. </year>
Reference: [24] <author> Evgenia Smirni and Daniel A. Reed. </author> <title> I/O Requirements of Scientific Applications: An Evolutionary View. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High-Performance Distributed Computing, </booktitle> <pages> pages 49-59, </pages> <month> August </month> <year> 1996. </year>
Reference: [25] <author> Evgenia Smirni and Daniel A. Reed. </author> <title> Workload Characterization of Input/Output Intensive Parallel Applications. </title> <booktitle> In Proceedings of the 9th International Conference on Modelling Techniques and Tools for Computer Performance Evaluation, </booktitle> <month> June </month> <year> 1997. </year>
Reference: [26] <author> Jerry C. Yan. </author> <title> Performance Tuning with AIMS An Automated Instrumentation and Monitoring System for Multicomputers. </title> <booktitle> In Proceeedings of the 27th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 625-633, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: In x3-x5, we will examine all of these issues in greater detail. 5 3 Flexible Performance Sensors Historically, performance instrumentation required users, parsers, or compilers to insert instrumentation library calls in application source code. IPS-2 [15], AIMS <ref> [26] </ref>, Pablo [17] and other popular performance analysis toolkits all operated in this way. After instrumentation insertion, the application code was recompiled and performance data was collected during subsequent execution.
Reference: [27] <author> L. Zadeh. </author> <title> Commonsense Knowledge Representation Based on Fuzzy Logic. </title> <journal> IEEE Computer, </journal> <volume> 16(10):61, </volume> <month> October </month> <year> 1983. </year>
Reference-contexts: The overall system allows manipulation of linguistically described concepts through use of common sense knowledge <ref> [27] </ref> (e.g., file prefetching benefits small, sequential reads). 7.1 Fuzzy Logic Infrastructure logic decision mechanism. A fuzzy controller relies on fuzzy sets to represent the semantic properties of each input (sensor) and output (actuator).
Reference: [28] <author> L. A. Zadeh. </author> <title> Fuzzy Sets. </title> <journal> Information and Control, </journal> <volume> 8(3) </volume> <pages> 338-353, </pages> <month> June </month> <year> 1965. </year> <month> 22 </month>
Reference-contexts: In contrast to classic decision procedure techniques and their emphasis on con 14 sistent parameter space division, fuzzy logic targets precisely the attributes of the resource management problem that challenge classic techniques <ref> [28] </ref>, namely conflicting goals and poorly understood optimization spaces. The overall system allows manipulation of linguistically described concepts through use of common sense knowledge [27] (e.g., file prefetching benefits small, sequential reads). 7.1 Fuzzy Logic Infrastructure logic decision mechanism.
References-found: 28

