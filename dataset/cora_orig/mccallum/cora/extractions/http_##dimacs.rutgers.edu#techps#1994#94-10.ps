URL: http://dimacs.rutgers.edu/techps/1994/94-10.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1994.html
Root-URL: http://www.cs.rutgers.edu
Email: e-mail: koiran@dimacs.rutgers.edu  
Title: model  
Author: Blum, Shub Smale by Pascal Koiran 
Affiliation: Rutgers University  
Note: A Weak Version of the  France. Support by an INRIA fellowship and Esprit Project 8556 (NeuroColt) is also acknowledged. DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Pubnum: DIMACS  
Abstract: DIMACS Technical Report 94-10 April 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.L. Balcazar, J. Diaz, and J. Gabarro. </author> <title> Structural Complexity I. </title> <booktitle> EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: instance, our main theorem states that the class of boolean languages recognizable in polynomial time in the weak BSS model is P=poly (P=poly is the class of sets recognized in polynomial time by Turing machines using advice functions of polynomial length or, equivalently, by non-uniform boolean circuits of polynomial size <ref> [1] </ref>). The main tool for this proof is a new result on semi-algebraic sets of independent interest, stating that a semi-algebraic set of non-empty interior defined by "small" equations must contain a "small" rational point. <p> Theorem 9 BP (P = R ) BPP: Recall that BPP is the class of (boolean) languages that can be recognized in polynomial time by a probabilistic Turing machine with a bounded probability of error (see, e.g., <ref> [1] </ref> for more details). Before moving to the proof of Theorem 9, we present two lemmas which are often used in the analysis of randomized algorithms (see [15] for a proof of the first one). <p> The proof of this result will be omitted since it is really the same as in the boolean case (i.e., simulation of Turing machines by boolean circuits <ref> [1] </ref>). In fact, Lemma 9 can be generalized to models of computation over arbitrary structures (see [13]). Now, let M be a polynomial time non-deterministic real Turing machine.
Reference: [2] <author> J.L. Balcazar, J. Diaz, and J. Gabarro. </author> <title> Structural Complexity II. </title> <booktitle> EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Proof. According to Theorem 4, P W = NP W =) NP P=poly since NP BP (NP W ). If NP P=poly, the polynomial hierarchy collapses at the second level <ref> [2] </ref>. fl As was mentioned in the introduction, it was recently shown in [12] that P W 6=NP W holds without any assumption. The decoding argument of Theorem 4 also shows that all boolean languages can be recognized in weak exponential time.
Reference: [3] <author> R. Benedetti and J.-J. Risler. </author> <title> Real algebraic and semi-algebraic sets. </title> <publisher> Hermann, </publisher> <address> Paris, </address> <year> 1990. </year>
Reference-contexts: Suggestions for further work can be found in section 9 and at the end of section 6. 2 Preliminaries In this section, we list the notations used throughout the paper, and recall some standard background on semi-algebraic sets (a comprehensive treatment of this topic can be found in <ref> [3] </ref> and [5]). 2.1 Miscellaneous notations The set N of non-negative integers is identified with f0; 1g + , the set of non-empty words on the alphabet f0; 1g. The size s (x) of an integer x 2 Z is the number of digits of its radix-2 representation.
Reference: [4] <author> L. Blum, M. Shub, and S. Smale. </author> <title> On a theory of computation and complexity over the real numbers: NP-completeness, recursive functions and universal machines. </title> <journal> Bulletin of the American Mathematical Society, </journal> <volume> 21(1) </volume> <pages> 1-46, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: This paper proposes a model of computation (the "weak BSS model") which can be seen as a middle ground between the usual Turing machine model and the real Turing machine of Blum, Shub and Smale <ref> [4] </ref>. The weak BSS model is obtained from the standard one by dropping the constant cost hypothesis for arithmetic operations. <p> We can thus give evidence of hardness for the real-valued generalizations of the NP-complete problems of combinatorial optimization, such as the real traveling salesman problem of <ref> [4] </ref> or the real knapsack problem. More precisely, if one of these problems can be solved in polynomial time in the weak BSS model, NP P=poly according to Theorem 4, and the polynomial hierarchy collapses at the second level.
Reference: [5] <author> J. Bochnak, M. Coste, and M.-F. Roy. </author> <title> Geometrie algebrique reelle. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Suggestions for further work can be found in section 9 and at the end of section 6. 2 Preliminaries In this section, we list the notations used throughout the paper, and recall some standard background on semi-algebraic sets (a comprehensive treatment of this topic can be found in [3] and <ref> [5] </ref>). 2.1 Miscellaneous notations The set N of non-negative integers is identified with f0; 1g + , the set of non-empty words on the alphabet f0; 1g. The size s (x) of an integer x 2 Z is the number of digits of its radix-2 representation.
Reference: [6] <author> J. Bruck and K.-Y. Siu. </author> <title> On the power of threshold circuits with small weights. </title> <journal> SIAM J. Disc. Math., </journal> <volume> 4(3) </volume> <pages> 423-435, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: conclude like in [20]: C n can be simulated by a threshold circuit T n of polynomial size and depth O (D (n)) since the basic arithmetic operations (comparison, multiplication and multiple addition of integers) can be performed by threshold circuits (with binary weights) of polynomial size and constant depth <ref> [6] </ref> (here we use the fact that the output functions have uniformly bounded degrees).
Reference: [7] <author> M. Coste and M.-F. Roy. </author> <title> Thom's lemma, the coding of real algebraic numbers and the topology of semi-algebraic sets. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 121-129, </pages> <year> 1988. </year>
Reference-contexts: Usually, a real root ff of a polynomial P 2 R [X] is coded by an interval ]a; b [ containing ff and no other root of P . A purely symbolic coding method was proposed in <ref> [7] </ref>: the roots of P are characterized by the sign vectors of the derivatives of P . <p> f1; 0; 1g D fi f1; 0; 1g D ! f1; 0; 1g independent of P such that c D (*(ff); *(fi)) = 1 if ff &lt; fi, 0 if ff = fi, 1 if ff &gt; fi. c D can be actually computed with a very simple algorithm (see <ref> [7] </ref> for more details). Given a 2 R D+1 , let P a be the polynomialP a (X) = P D i=0 a i X i , and r (P a ) the number of distinct real roots of P a .
Reference: [8] <author> F. </author> <title> Cucker. </title> <journal> P R 6=NC R . Journal of Complexity, </journal> <volume> 8 </volume> <pages> 230-238, </pages> <year> 1992. </year>
Reference-contexts: Note that the perhaps undesirable possibility to create integers of exponential length in polynomial time in the full model is a crucial tool in the recent proof that P R 6=NC R <ref> [8] </ref>. This argument fails to separate weak polynomial time from NC R . The following easy characterization will be useful.
Reference: [9] <author> F. Cucker, L. Gonzalez Vega, and F. Rossello. </author> <title> On algorithms for real algebraic plane curves. In Effective Methods in Algebraic Geometry, </title> <booktitle> volume 94 of Progress in Mathematics, </booktitle> <pages> pages 63-87. </pages> <publisher> Birkhauser, </publisher> <year> 1991. </year>
Reference-contexts: Let us give two other non-trivial examples. The first problem consists of determining the sign of a real polynomial P at the roots of another real polynomial Q. Two algorithms for this problem are described in <ref> [9] </ref> and [22], and it is shown that the conditions of Lemma 1 are satisfied. Hence they run in polynomial time in the weak BSS model. Note that the algorithm of [9] is used in the same reference as a building block for computing the topology of a real algebraic plane <p> Two algorithms for this problem are described in <ref> [9] </ref> and [22], and it is shown that the conditions of Lemma 1 are satisfied. Hence they run in polynomial time in the weak BSS model. Note that the algorithm of [9] is used in the same reference as a building block for computing the topology of a real algebraic plane curve. Our second example is simply the resolution of systems of linear equations. This problem can obviously be solved in polynomial time in the BSS model by Gaussian elimination. <p> The following key result is a special case of the "quantifier elimination subproblem" of [22]. Similar bounds were also provided in <ref> [9] </ref>. Lemma 4 (Renegar) Let N 1 ,: : : ,N M be positive integers, and * 1 ; : : : ; * M 2 f1; 0; 1g N sign vectors.
Reference: [10] <author> F. Cucker and P. Koiran. </author> <title> Computing over the reals with addition and order: Higher complexity classes. </title> <type> preprint. </type>
Reference-contexts: The mathematics of this problem are much simpler since the relevant geometric objects are polyhedra instead of semi-algebraic sets. Similar results can also be shown for a real version of the Meyer-Stockmeyer polynomial time hierarchy <ref> [10] </ref>. - 24 - Acknowledgment I am greatly indebted to Felipe Cucker for his help with the proof of Lemma 5.
Reference: [11] <author> F. Cucker and F. Rosello. </author> <title> On the complexity of some problems for the Blum, Shub & Smale model. </title> <booktitle> In Proceedings of Latin'92, volume 583 of Lecture Notes in Computer Science, </booktitle> <pages> pages 117-129. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: As was already mentioned in section 5, some explicit bounds use as parameter the total degree of the system (i.e., the sum of the degrees of all the polynomials). In addition to Ronga's result, one can cite an upper bound on the diameter of a bounded semi-algebraic set <ref> [11] </ref> and a lower bound on the distance between two connected components of a semi-algebraic set [14]. It would be interesting to find out if the total degree can be replaced by the maximum degree in these two bounds.
Reference: [12] <author> F. Cucker, M. Shub, and S. Smale. </author> <title> Separations of complexity classes in Koiran's weak model. </title> <type> Technical Report RC 19346 (84217), </type> <institution> IBM Research Division, </institution> <year> 1994. </year>
Reference-contexts: It follows from this characterization that P6=NP in the weak model under a standard complexity-theoretic method. After a first version of this paper was written [17], it was shown in <ref> [12] </ref> by quite different methods that P6=NP in the weak model without any assumption. The results on boolean inputs and semi-algebraic sets remain nonetheless interesting. The rest of this paper is organized as follows. <p> In section 7, we show that non-deterministic full polynomial time is strictly included in weak exponential time. The strict inclusion was left as an open problem in <ref> [12] </ref>. We give applications of our results to recurrent and feedforward neural - 2 - networks in section 8. It is shown that that the class of functions computed by recurrent nets using (possibly discontinuous) piecewise-linear output functions is exactly P/poly. <p> Proof. According to Theorem 4, P W = NP W =) NP P=poly since NP BP (NP W ). If NP P=poly, the polynomial hierarchy collapses at the second level [2]. fl As was mentioned in the introduction, it was recently shown in <ref> [12] </ref> that P W 6=NP W holds without any assumption. The decoding argument of Theorem 4 also shows that all boolean languages can be recognized in weak exponential time. Theorem 5 BP (EXP W ) = 2 f0;1g fl . Proof Sketch. <p> The large inclusion was established in <ref> [12] </ref>. The proof answers a question of [13]: is there a boolean language which is not in BP (P R ) ? In fact, we show that some boolean languages are not in BP (NP R ) (and a fortiori not in BP (P R )). <p> This equivalent formula is simply obtained by adding new quantified variables Y i representing the outputs of all internal gates of C n . This transformation can also be performed in arbitrary structures [13]. The following result of <ref> [12] </ref> follows immediately. Theorem 13 NP R = NP W : - 19 - Proof. <p> Theorem 14 NP R is strictly included in EXP W . Proof. It is shown in <ref> [12] </ref> that NP R EXP W . Hence we just have to prove that NP R 6=EXP W . These two sets are different because their boolean parts are different. <p> Then NP R (E) is strictly included in EXP W (E). Proof. There is essentially no difference between the inclusion NP R (E) EXP W (E) for an arbitrary E and for the special case E = R considered in <ref> [12] </ref>. We give the proof here for the sake of completeness. In order to recognize a set L 2 NP R (E), construct fomula (3) in polynomial time.
Reference: [13] <author> John B. Goode. </author> <title> Accessible telephone directories. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 59(1), </volume> <year> 1994. </year>
Reference-contexts: The large inclusion was established in [12]. The proof answers a question of <ref> [13] </ref>: is there a boolean language which is not in BP (P R ) ? In fact, we show that some boolean languages are not in BP (NP R ) (and a fortiori not in BP (P R )). We need two results from real algebraic geometry. <p> The proof of this result will be omitted since it is really the same as in the boolean case (i.e., simulation of Turing machines by boolean circuits [1]). In fact, Lemma 9 can be generalized to models of computation over arbitrary structures (see <ref> [13] </ref>). Now, let M be a polynomial time non-deterministic real Turing machine. We can assume without loss of generality that for every input x 2 R n , M uses exactly g (n) guesses, where g is a polynomially bounded function. <p> This equivalent formula is simply obtained by adding new quantified variables Y i representing the outputs of all internal gates of C n . This transformation can also be performed in arbitrary structures <ref> [13] </ref>. The following result of [12] follows immediately. Theorem 13 NP R = NP W : - 19 - Proof.
Reference: [14] <author> J. Heintz, T. Krick, M.-F. Roy, and P. Solerno. </author> <title> Single exponential time algorithms for basic constructions in elementary geometry. </title> <booktitle> In Proceedings of the 10 th Int. Conf. of the Chilean Comp. </booktitle> <address> Sc. </address> <publisher> Soc., </publisher> <year> 1990. </year>
Reference-contexts: In addition to Ronga's result, one can cite an upper bound on the diameter of a bounded semi-algebraic set [11] and a lower bound on the distance between two connected components of a semi-algebraic set <ref> [14] </ref>. It would be interesting to find out if the total degree can be replaced by the maximum degree in these two bounds.
Reference: [15] <author> C. Kenyon and L. Lovasz. </author> <title> Algorithmic discrete mathematics. </title> <type> Technical Report CS-TR-251-90, </type> <institution> Department of Computer Science, Princeton University, </institution> <month> March </month> <year> 1990. </year> <month> - 25 </month> - 
Reference-contexts: Before moving to the proof of Theorem 9, we present two lemmas which are often used in the analysis of randomized algorithms (see <ref> [15] </ref> for a proof of the first one). Lemma 7 (Schwartz) Let P (x 1 ; : : : ; x p ) be a polynomial of degree d.
Reference: [16] <author> P. Koiran. </author> <title> Computing over the reals with addition and order. </title> <booktitle> Presented at the Barcelona workshop on continuous algorithms and complexity, </booktitle> <year> 1993. </year> <note> To appear in TCS. </note>
Reference-contexts: The exact power of non-determinism can be determined for a weaker model in which multiplications and divisions are completely forbidden. It can be shown that the set of NP languages in this model is NP/poly <ref> [16] </ref>. The mathematics of this problem are much simpler since the relevant geometric objects are polyhedra instead of semi-algebraic sets.
Reference: [17] <author> P. Koiran. </author> <title> A weak version of the Blum, Shub & Smale model. </title> <booktitle> In Proc. 34 th FOCS Symp., </booktitle> <pages> pages 486-495, </pages> <year> 1993. </year>
Reference-contexts: It follows from this characterization that P6=NP in the weak model under a standard complexity-theoretic method. After a first version of this paper was written <ref> [17] </ref>, it was shown in [12] by quite different methods that P6=NP in the weak model without any assumption. The results on boolean inputs and semi-algebraic sets remain nonetheless interesting. The rest of this paper is organized as follows.
Reference: [18] <author> S. Lang. </author> <title> Algebra. </title> <publisher> Addison-Wesley, </publisher> <year> 1965. </year>
Reference-contexts: symbolic computation techniques because the ideals of Z [X] are finitely generated, i.e., I = i=1 ) for some finite system of generators G = (G 1 ; : : : ; G m ) 2 Z [X] m : This follows from Hilbert's theorem on ntherian rings (see e.g. <ref> [18] </ref>, chapter 6). Hence we just have to determine if R belongs to the ideal generated by G. One could use Grobner basis techniques to solve this problem, but this is in fact not necessary. Bruno Poizat (personal - 14 - communication) noticed that the primitive element theorem [18] suffices. <p> (see e.g. <ref> [18] </ref>, chapter 6). Hence we just have to determine if R belongs to the ideal generated by G. One could use Grobner basis techniques to solve this problem, but this is in fact not necessary. Bruno Poizat (personal - 14 - communication) noticed that the primitive element theorem [18] suffices. The argument is as follows. Let k be the transcendence degree over Q of the field K = Q [ff 1 ; : : : ; ff p ].
Reference: [19] <author> R. Loos. </author> <title> Computing in algebraic extensions. </title> <editor> In Buchberger, Collins, and Loos, editors, </editor> <booktitle> Computer Algebra, Symbolic and Algebraic Computation, </booktitle> <pages> pages 173-187. </pages> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: from the standard bound on the roots of polynomials that ff and fi cannot be too large (if they are finite). fi ff cannot be too small since it is the root of a polynomial of degree D O (1) with integer coefficients of size O (SD O (1) ) <ref> [19] </ref>. Hence there are small rational points in ]ff; fi [. Assume now that the result holds in dimension p 1. In order to prove that it holds for S R p = R p1 fi R, S6=; we consider the projection S 0 of S on R p1 .
Reference: [20] <author> W. Maass. </author> <title> Bounds for the computational power and learning complexity of analog neural nets. </title> <booktitle> In Proc. 25th STOC, </booktitle> <pages> pages 335-344, </pages> <year> 1993. </year>
Reference-contexts: For families of feedforward nets we define a notion of uniformity which parallels the standard definition for boolean circuits. We then show that some uniform families of real circuits can be efficiently simulated by families of threshold circuits. This problem was studied recently by Maass <ref> [20] </ref> in the more general case of non-uniform families of real circuits, but his results apply only to constant depth circuits. This restriction can be removed for uniform circuit families. <p> The authors of this paper showed that it is not possible to compute more than P=poly in polynomial time if the f i 's are Lipschitz and polynomial-time approximable (this property holds for most continuous functions of practical interest). 8.2 Feedforward networks It is shown in <ref> [20] </ref> that a family of acyclic circuits of constant depth and polynomial size using piecewise-polynomial activation functions (defined by real parameters) can be simulated by a family of threshold circuits which is still of constant depth and polynomial size. <p> In this section, we consider families of networks of the same type, and show that they can be simulated for boolean inputs and outputs by families of threshold circuits with a "small" overhead in size and depth. Contrary to <ref> [20] </ref>, we can obtain results for networks of more than constant depth (log n in the worst case and n O (1) in the best) using the additional assumption that the family is uniform, i.e., it can be generated by a RTM in polynomial time in the weak BSS model. <p> According to Definition 6 and theorem 6, these approximations have polynomial size. Hence it follows from Definition 6 that all the rational numbers arising in a computation of C n on any input u 2 f0; 1g n are of polynomial size. We can thus conclude like in <ref> [20] </ref>: C n can be simulated by a threshold circuit T n of polynomial size and depth O (D (n)) since the basic arithmetic operations (comparison, multiplication and multiple addition of integers) can be performed by threshold circuits (with binary weights) of polynomial size and constant depth [6] (here we use
Reference: [21] <author> J. Milnor. </author> <title> On the Betti numbers of real varieties. </title> <journal> Proc. American Mathematical Society, </journal> <volume> 15 </volume> <pages> 275-280, </pages> <year> 1964. </year>
Reference-contexts: We need two results from real algebraic geometry. The following bound on the number of satisfiable sign conditions for a set of multivariate polynomials is due to Milnor <ref> [21] </ref>; see also [22] for an "elementary" proof. Theorem 11 (Milnor) Let fg 1 ; : : : ; g m g be a set of of m polynomials in n variables.
Reference: [22] <author> J. Renegar. </author> <title> On the computational complexity and geometry of the first-order theory of the reals. parts I, II, III. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 13(3) </volume> <pages> 255-352, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: weak model is "ideal" in the sense of Renegar, since "it seems that the ideal algorithm is one that provides a "nice" bound in the real number model and which when restricted to sentences with polynomials whose coefficients are rational number also provides a "nice" bound in the bit model" <ref> [22] </ref>. One important theme of this paper is that when both input and outputs of real machines are discrete, complexity classes in the real number model can be identified to discrete complexity classes. <p> Let us give two other non-trivial examples. The first problem consists of determining the sign of a real polynomial P at the roots of another real polynomial Q. Two algorithms for this problem are described in [9] and <ref> [22] </ref>, and it is shown that the conditions of Lemma 1 are satisfied. Hence they run in polynomial time in the weak BSS model. Note that the algorithm of [9] is used in the same reference as a building block for computing the topology of a real algebraic plane curve. <p> The following key result is a special case of the "quantifier elimination subproblem" of <ref> [22] </ref>. Similar bounds were also provided in [9]. Lemma 4 (Renegar) Let N 1 ,: : : ,N M be positive integers, and * 1 ; : : : ; * M 2 f1; 0; 1g N sign vectors. <p> We need two results from real algebraic geometry. The following bound on the number of satisfiable sign conditions for a set of multivariate polynomials is due to Milnor [21]; see also <ref> [22] </ref> for an "elementary" proof. Theorem 11 (Milnor) Let fg 1 ; : : : ; g m g be a set of of m polynomials in n variables. <p> If the g i 's are of degree at most d, the number of consistent sign conditions is (md) O (n) . - 18 - We also need the following special case of Renegar's quantifier elimination results <ref> [22] </ref>. Theorem 12 (Renegar) Let F be an existential formula of the first-order therory of the reals: F is of the form 9y 2 R N G (x; u) where G is a quantifier-free formula, and the free variable u is in R l . <p> We give the proof here for the sake of completeness. In order to recognize a set L 2 NP R (E), construct fomula (3) in polynomial time. It follows from the results of Renegar <ref> [22] </ref> on the decision problem for the extended theory of the reals that given an input x 2 R n , formula (3) can be decided in parallel polynomial time.
Reference: [23] <editor> F. Ronga. Recherche de solutions d'inequations polynomiales. In C. Hayat-Legrand and F. Sergeraert, editors, Algorithmique, topologie et geometrie algebriques, </editor> <volume> Asterisque 192, </volume> <pages> pages 11-16. </pages> <address> Societe Mathematique de France, </address> <year> 1990. </year>
Reference-contexts: It is therefore crucial that this number does not come into play in the bound of Theorem 6. If for example D were the sum of the degrees instead of the maximum degree, our proof would fail. A result of this type was provided recently in <ref> [23] </ref>. We now show how to get rid of equality cases in the general case; this shows that (H) is in fact not restrictive.
Reference: [24] <author> A. Schonhage. </author> <title> On the power of random access machines. </title> <booktitle> In Proc. 6 th ICALP, volume 71 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: By the law of prime numbers there are at least (2 cn =cn) primes smaller than 2 cn . However x cannot have more than 2 n prime divisors. fl An application of this lemma in a very similar context can be found in <ref> [24] </ref>. Corollary 2 Let x6=0 be an integer smaller than 2 2 n . Choose m 1 ; : : : ; m v independently from the uniform distribution on f0; 1; : : : ; 2 cn 1g, for some constant c &gt; 1.
Reference: [25] <author> A. Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <publisher> Wiley, </publisher> <address> New-York, </address> <year> 1986. </year>
Reference: [26] <author> H. T. Siegelmann and E. D. Sontag. </author> <title> Neural networks with real weights: analog computational complexity. </title> <type> SYCON Report 92-05, </type> <institution> Rutgers University, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: It is shown that that the class of functions computed by recurrent nets using (possibly discontinuous) piecewise-linear output functions is exactly P/poly. This was previously known only for continuous output functions (see <ref> [26] </ref> or the extended abstract [27]). For families of feedforward nets we define a notion of uniformity which parallels the standard definition for boolean circuits. We then show that some uniform families of real circuits can be efficiently simulated by families of threshold circuits. <p> The restriction of L to inputs of the form (x; y L ) clearly cannot be recognized in non-deterministic polynomial time. fl 8 Application to artificial neural networks 8.1 Recurrent networks We shall use the model of analog computation with neural nets proposed in <ref> [26] </ref>. Let us first recall briefly the main features of this model. <p> Proof. This is a straightforward consequence of Theorem 4, since recurrent networks can be simulated with additions, comparisons, and multiplication by constants only. fl This theorem can be applied to discontinuous transition functions; this was not the case for the results of <ref> [26] </ref>.
Reference: [27] <author> H. T. Siegelmann and E. D. Sontag. </author> <title> Analog computation via neural networks. </title> <booktitle> In Proc. 2 nd Israeli Symposium on Theory of Computing and Systems, </booktitle> <year> 1993. </year>
Reference-contexts: It is shown that that the class of functions computed by recurrent nets using (possibly discontinuous) piecewise-linear output functions is exactly P/poly. This was previously known only for continuous output functions (see [26] or the extended abstract <ref> [27] </ref>). For families of feedforward nets we define a notion of uniformity which parallels the standard definition for boolean circuits. We then show that some uniform families of real circuits can be efficiently simulated by families of threshold circuits.
Reference: [28] <author> S. Smale. </author> <title> Some remarks on the foundations of numerical analysis. </title> <journal> SIAM Review, </journal> <volume> 32(2) </volume> <pages> 211-220, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: It is nonetheless often criticized for being overly unrealistic. The assumption that arbitrary real numbers can be compared, added or multiplied in constant time and infinite precision is the usual target of these criticisms (see <ref> [28] </ref> for a discussion of this issue). This paper proposes a model of computation (the "weak BSS model") which can be seen as a middle ground between the usual Turing machine model and the real Turing machine of Blum, Shub and Smale [4].
References-found: 28

