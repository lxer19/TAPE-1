URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/lv94.ps
Refering-URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/papers.html
Root-URL: 
Email: vishkin@uzisun.umiacs.umd.edu;  
Phone: (301) 405-6763,  
Title: Pattern matching in a digitized image "digitized-based" approach may lead towards building on the theory
Author: Gad M. Landau Uzi Vishkin 
Address: College Park, MD 20742  Israel 69978;  
Affiliation: Institute for Advanced Computer Studies, University of Maryland,  Dept. of Computer Science, School of Mathematical Sciences, Tel Aviv University, Tel Aviv,  
Note: Such  and  Partially supported by NSF grants CCR-8906949 and CCR-9111348.  
Abstract: As a step towards efficient algorithmic handling of the continuous pattern matching problem by computers, where discretized representations are involved, we consider pattern matching problems where the pattern and the text are specified either in terms of the "continuous" properties, or through other exemplar digitized images a variety of alternative specifications is considered. From the perspective of areas such as computer vision or image processing, our problem definitions identify an important gap in the fundamental theory of image formation and image processing how to determine, even in the absence of noise, if a digitized image of a scene could contain an image of a given pattern? This is done using careful axiomatization. fl This paper is the journal version of [LV-92]. y Dept. of Computer Science, Polytechnic University, 333 Jay Street, Brooklyn, NY 11201, (718) 260-3154, landau@pucs2.poly.edu; Partially supported by NSF grant CCR-8908286 and the New York State Science and Technology Foundation, Center for Advanced Technology in Telecommunications, Polytechnic University, Brooklyn, NY. 
Abstract-found: 1
Intro-found: 1
Reference: [A-87] <author> K. Abrahamson. </author> <title> Generalized string matching. </title> <journal> SIAM J. Comput., </journal> <volume> 17 </volume> <pages> 1039-1051, </pages> <year> 1987. </year>
Reference-contexts: Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as [P-85], <ref> [A-87] </ref>, [BP-89], [K-89], 30 [AL-90], and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity.
Reference: [AC7-5] <author> A.V. Aho and M.J. Corasick, </author> <title> "Efficient String Matching," </title> <journal> CACM, </journal> <volume> Vol. 18, No. 6, </volume> <pages> 333-340, </pages> <year> 1975. </year>
Reference-contexts: This includes the boundaries of the unit squares as well as the boundaries of areas within them. Whenever new areas will be formed, we will take note of them. 4.2. A first algorithm The algorithm given by Aho and Corasick <ref> [AC7-5] </ref>, finds all the occurrences of multiple patterns in a given text.
Reference: [AILSV-88] <author> A. Apostolico, C. Iliopoulos, G.M. Landau, B. Schieber, and U. Vishkin. </author> <title> Parallel construction of a suffix tree with applications. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 347-365, </pages> <year> 1988. </year> <month> 33 </month>
Reference-contexts: Equal substrings get the same name. Implementation. Integers in the range from 1 to n will be used as names for substrings. The basic naming technique was given by [KMR-72] (serial) and by <ref> [AILSV-88] </ref> (parallel). The reader is referred to these papers for implementation details. Stage 2 naming of substrings of the pattern. Stage 2.1. The power-two substrings of IP 1 are defined as follows. <p> and (4) the concatenation of the labels on the path from the root to leaf i describe the suffix of C starting at position i. (See Figure 3 for an example.) Wiener [W-73] and McCreight [Mc-76] presented, independently, linear time algorithms to compute a suffix tree, and Apostolico et al. <ref> [AILSV-88] </ref> compute a suffix tree in parallel. Given a suffix tree ST of a text T and a pattern P one can find all the occurrences of P in T by traversing ST from the root, matching characters of P and characters on the edges of ST .
Reference: [AL-90] <author> A. Amir and G.M. Landau, </author> <title> "Fast parallel and serial multi dimensional approx-imate array matching," </title> <journal> Theoretical Computer Science, </journal> <volume> 81 </volume> <pages> 97-115, </pages> <year> 1991. </year>
Reference-contexts: Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as [P-85], [A-87], [BP-89], [K-89], 30 <ref> [AL-90] </ref>, and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity. <p> Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as [P-85], [A-87], [BP-89], [K-89], 30 <ref> [AL-90] </ref>, and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity. Each of steps 1 and 2 runs in O (n 2 log m) time.
Reference: [BP-89] <author> S. Ben-Yehuda and R.Y. Pinter. </author> <title> Symbolic layout improvement using string matching based local transformation. </title> <booktitle> Proc. of the Decennial Caltech Conf. on VLSI, </booktitle> <pages> 227-239, </pages> <year> 1989. </year>
Reference-contexts: Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as [P-85], [A-87], <ref> [BP-89] </ref>, [K-89], 30 [AL-90], and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity. <p> Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as [P-85], [A-87], <ref> [BP-89] </ref>, [K-89], 30 [AL-90], and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity. Each of steps 1 and 2 runs in O (n 2 log m) time. Step 3 runs in O (n 2 ) time.
Reference: [BB-82] <author> D.H. Ballard, and C.M. Brown. </author> <title> Computer Vision, </title> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference-contexts: fact that original digitized images were derived from a continuous (i.e., Euclidean) domain, we do not abandon these original digitized images in favor of continuous ones at the image formation or early image processing stages these stages are part of what is viewed as low level image processing (see, e.g., <ref> [BB-82] </ref>). This is in contrast to the contemporary procedure for handling such a problem by computers which seems to be a roundabout way: one endeavors to transform a digitized input into a continuous domain and then discretize it again for solution by a digitized computer. <p> We leave details and extensions to the interested reader. No fundamentally new ideas appear to be needed. 21 The book <ref> [BB-82] </ref> reviews a somewhat related idea due, independently, to Huffman [H-71] and Clowes [C-71], which has been implemented by Waltz.
Reference: [BV-93] <author> O. Berkman and U. Vishkin. </author> <title> Recursive star-tree parallel data-structure. </title> <journal> SIAM J. Computing, </journal> <note> 1993, to appear. A conference version appeared in Proc. 30th Annual IEEE Symposium on Foundations of Computer Science, </note> <year> 1989, </year> <pages> 196-202. </pages>
Reference-contexts: This method uses the suffix tree of S and a Lowest Common Ancestor (LCA) algorithm such as the ones given by Harel and Tarjan [HT-84], by Schieber and Vishkin [SV-88], or by Berkman and Vishkin <ref> [BV-93] </ref>. Following preprocessing that takes linear time, such an LCA algorithm can process queries of the form "are s w ; s w+1 : : : s w+x1 and s y ; s y+1 : : : s y+x1 equal?" in O (1) time.
Reference: [C-71] <author> M.B. Clowes. </author> <title> On seeing things. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 79-116, </pages> <year> 1971. </year>
Reference-contexts: We leave details and extensions to the interested reader. No fundamentally new ideas appear to be needed. 21 The book [BB-82] reviews a somewhat related idea due, independently, to Huffman [H-71] and Clowes <ref> [C-71] </ref>, which has been implemented by Waltz.
Reference: [DGM-90] <author> M. Dubiner, Z. Galil, and E. Magen. </author> <title> Faster tree pattern Matching. </title> <booktitle> Proc. 31th IEEE Symp. Foundations of Computer Science, </booktitle> <pages> 145-150, </pages> <year> 1990. </year>
Reference-contexts: Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as [P-85], [A-87], [BP-89], [K-89], 30 [AL-90], and <ref> [DGM-90] </ref>), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity.
Reference: [EG-86] <author> H. Edelsbrunner, and L. Guibas. </author> <title> Topologically sweeping an arrangement. </title> <booktitle> Proc. 18th ACM Symposium on Theory of Computing, </booktitle> <pages> 389-403, </pages> <year> 1986. </year>
Reference-contexts: If we assume that all boundary line are straight we will have all of them partition the unit square into regions. Using a topological sweep method (e.g., as in <ref> [EG-86] </ref>), it is easy to arrange the regions in a rooted tree so that each will be obtained from its parent in the tree by a change of a single character. Note that this assumes that no two boundary lines coming from separate unit squares overlap.
Reference: [EIS-76] <author> S. Even, A Itai and A. Shamir. </author> <title> On the complexity of timetables and multicom-modity flow problems. </title> <journal> SIAM J. Computing 5,4 (1976), </journal> <pages> 691-703. </pages>
Reference-contexts: This completes the proof of item (1) of the Correctness Theorem. 2 Remark. Step 3 can be represented as a 2-SAT problem, and solved alternatively by the linear time algorithm for 2-SAT, of <ref> [EIS-76] </ref>. We sketch the basic idea for presenting Step 3 as a 2-SAT problem and leave the details to the interested reader. Each pattern pixel and text pixel which are P2 define two literals.
Reference: [Fo-89] <author> Steven Fortune. </author> <title> Stable maintenance of point set triangulations in two dimensions. </title> <booktitle> Proc. 30th IEEE Symp. Foundations of Computer Science, </booktitle> <pages> 494-499, </pages> <year> 1989. </year>
Reference-contexts: Perhaps most known, in this respect, is the work of William Kahan, the Turing award winner, on numeric sensitivity of algorithms. (2) Fortune <ref> [Fo-89] </ref> and Milenkovic [Mi-89] have shown how to adapt some computational geometry algorithms to the finite representation restriction. We believe that studying digitization is of fundamental importance, and is therefore of interest for the general theory of computing community, as well. 31 9.2.
Reference: [FP-74] <author> M.J. Fischer and M.S. Paterson. </author> <title> String Matching and Other Products. Complexity of Computation, R.M. </title> <editor> Karp (editor), </editor> <booktitle> SIAM-AMS Proceedings, </booktitle> <address> Vol.7, </address> <year> 1974, </year> <month> pp.113-125. </month>
Reference-contexts: Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in <ref> [FP-74] </ref>, and used in many algorithms such as [P-85], [A-87], [BP-89], [K-89], 30 [AL-90], and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3.
Reference: [H-71] <author> D.A. Huffman. </author> <title> Impossible objects as nonsense sentences. </title> <journal> Machine Intelligence, </journal> <volume> 6 </volume> <pages> 295-323, </pages> <year> 1971, </year> <editor> B. Meltzer and D. Michie (Eds.), </editor> <publisher> Edinburgh University Press. </publisher>
Reference-contexts: We leave details and extensions to the interested reader. No fundamentally new ideas appear to be needed. 21 The book [BB-82] reviews a somewhat related idea due, independently, to Huffman <ref> [H-71] </ref> and Clowes [C-71], which has been implemented by Waltz.
Reference: [HT-84] <author> D. Harel and R.E. Tarjan. </author> <title> Fast algorithms for finding nearest common ancestors. </title> <journal> SIAM J. Comput., </journal> <volume> 13 </volume> <pages> 338-355, </pages> <year> 1984. </year>
Reference-contexts: This method uses the suffix tree of S and a Lowest Common Ancestor (LCA) algorithm such as the ones given by Harel and Tarjan <ref> [HT-84] </ref>, by Schieber and Vishkin [SV-88], or by Berkman and Vishkin [BV-93].
Reference: [K-89] <author> S.R. Kosaraju. </author> <title> Efficient tree pattern Matching. </title> <booktitle> Proc. 30th IEEE Symp. Foundations of Computer Science, </booktitle> <pages> 178-183, </pages> <year> 1989. </year>
Reference-contexts: Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as [P-85], [A-87], [BP-89], <ref> [K-89] </ref>, 30 [AL-90], and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity.
Reference: [KMR-72] <author> R.M. Karp, R.E. Miller and A.L. Rosenberg. </author> <title> Rapid identification of repeated patterns in strings, trees and arrays. </title> <booktitle> Proc. 4th ACM Symposium on Theory of Computing, </booktitle> <pages> 125-136, </pages> <year> 1972. </year>
Reference-contexts: Equal substrings get the same name. Implementation. Integers in the range from 1 to n will be used as names for substrings. The basic naming technique was given by <ref> [KMR-72] </ref> (serial) and by [AILSV-88] (parallel). The reader is referred to these papers for implementation details. Stage 2 naming of substrings of the pattern. Stage 2.1. The power-two substrings of IP 1 are defined as follows.
Reference: [LLS-91] <author> E.S. Lander, R. Langridge, </author> <title> and D.M. Saccocio. A report on computing in Molecular Biology: mapping and interpreting Biological information. </title> <journal> CACM, </journal> <volume> 34,11: </volume> <pages> 33-39, </pages> <year> 1991. </year>
Reference-contexts: Another justification for NR and PR algorithms is that they enable to classify heuristics, which may be relevant in practice, for a problem. Such algorithms are not that unusual: in <ref> [LLS-91] </ref>, page 33, an interesting quote of Richard Lipton concerning computational biology problems which are NP-complete, advocates not only approximation algorithm and ones that work well only on the average, but also algorithms that do not work every time. 3.
Reference: [LV-88] <author> G.M. Landau and U. Vishkin. </author> <title> Efficient string matching with k differences. </title> <journal> JCSS, </journal> <volume> 37 </volume> <pages> 63-78, </pages> <year> 1988. </year>
Reference-contexts: Substrings Comparison. Given a string S = s 1 ; s 2 : : : s n , checking equality of two substrings in S can be done by the Substrings Comparison technique <ref> [LV-88] </ref>. This method uses the suffix tree of S and a Lowest Common Ancestor (LCA) algorithm such as the ones given by Harel and Tarjan [HT-84], by Schieber and Vishkin [SV-88], or by Berkman and Vishkin [BV-93].
Reference: [LV-92] <author> G.M. Landau and U. Vishkin. </author> <title> Pattern matching in a digitized image. </title> <booktitle> Proc. 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pp. 453-462, </pages> <year> 1992. </year>
Reference: [Mc-76] <author> E. M. McCreight. </author> <title> A space-economical suffix tree construction algorithm. </title> <journal> J.ACM, </journal> <volume> 23 </volume> <pages> 262-272, </pages> <year> 1976. </year>
Reference-contexts: the same (nonempty) prefix, (3) each leaf is labeled with a distinct position of C and (4) the concatenation of the labels on the path from the root to leaf i describe the suffix of C starting at position i. (See Figure 3 for an example.) Wiener [W-73] and McCreight <ref> [Mc-76] </ref> presented, independently, linear time algorithms to compute a suffix tree, and Apostolico et al. [AILSV-88] compute a suffix tree in parallel.
Reference: [Mi-89] <author> V. Milenkovic. </author> <title> Double precision geometry: A general technique for calculating line and segment intersections using rounded arithmetic. </title> <booktitle> Proc. 30th IEEE Symp. Foundations of Computer Science, </booktitle> <pages> 500-505, </pages> <year> 1989. </year>
Reference-contexts: Perhaps most known, in this respect, is the work of William Kahan, the Turing award winner, on numeric sensitivity of algorithms. (2) Fortune [Fo-89] and Milenkovic <ref> [Mi-89] </ref> have shown how to adapt some computational geometry algorithms to the finite representation restriction. We believe that studying digitization is of fundamental importance, and is therefore of interest for the general theory of computing community, as well. 31 9.2.
Reference: [P-85] <author> R. Y. Pinter. </author> <title> Efficient string matching with don't-care patterns. </title> <editor> in A. Apostolico and Z. Galil (editors), </editor> <title> Combinatorial Algorithms on Words, NATO ASI Series, Series F: </title> <journal> Computer and System Sciences, </journal> <volume> Vol. 12, </volume> <publisher> Springer-Verlag, </publisher> <pages> 97-107, </pages> <year> 1985 </year>
Reference-contexts: Then, in order to count the number of matches, two techniques are used: (i) the convolution technique (as was suggested in [FP-74], and used in many algorithms such as <ref> [P-85] </ref>, [A-87], [BP-89], [K-89], 30 [AL-90], and [DGM-90]), combined with (ii) a "wraparound technique" given in [AL-90] and [BP-89] is used. Step 3. Combining the answers of step 1 and 2, derive all occurrences of an incarnation of the pattern in the text. Complexity.
Reference: [RB-90] <author> A. Rosenfeld and S. Banerjee. </author> <title> Maximum-likelihood edge detection in digital signals. </title> <institution> TR-492, Center for Automation Research, U. Maryland, College Park, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: Another alternative is where the order of boundary changes is given also for the text. (3) Point sampling without averaging has been used even in the context of a continuous signal in <ref> [RB-90] </ref>. 3.2. The discrete two dimensional (D-2-D) pattern matching problem A semi open square region [a; b; c; d) of the continuous pattern contains all points x; y such that a x &lt; b and c y &lt; d.
Reference: [RK-82] <author> A. Rosenfeld and A. C. Kak, </author> <title> Digital Picture Processing, </title> <booktitle> 2nd Edition, </booktitle> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1982. </year>
Reference-contexts: In view of item (1) above, digitization became a key concern in computer vision research; for instance, the book by Rosenfeld and Kak <ref> [RK-82] </ref> devotes a chapter to this fundamental issue. The discussion below overviews two "pure" general algorithmic approaches to algorithmic object recognition in computer vision: Euclidean-based and digitized-based. The following two-stage "Euclidean-based" approach is most common in computer vision: (1) Early vision: The input to this stage are digitized images.
Reference: [S-90] <author> H. Samet, </author> <title> The Design and Analysis of Spatial Data Structures, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Section 6.1 gives an algorithm which is both NR and PR. Section 6.2 gives an alternative presentation of the same algorithm which has the following advantage: it can be generalized to more involved problems. Intuitively, if the one-dimensional version resembles balanced binary trees the two-dimensional version resembles quad-trees (see <ref> [S-90] </ref>). We call the alternative mode of presentation parallel-seaming. 6.1. An algorithm for the SID-1-D problem In this section, we describe a simple algorithmic approach, which is both NR and PR. The pattern string is a sampling of the continuous pattern at m points. <p> Another side of the same coin is to study the level of refinement needed to represent a two-dimensional picture by quad-trees (or grid point for this matter), and what does proper representation mean. We note that this fundamental issue is addressed in <ref> [S-90] </ref>, in a different setting. Our generic parallel-seaming algorithm can be extended to cope with pattern matching problems subject to rotations or scaling or both, with increase in complexity. Coping with scattered noise, which is sparse at each local neighborhood is another possible extension.
Reference: [SV-88] <author> B. Schieber and U. Vishkin. </author> <title> On finding lowest common ancestors: simplification and parallelization. </title> <journal> SIAM J. Comput., </journal> <volume> 17 </volume> <pages> 1253-1262, </pages> <year> 1988. </year>
Reference-contexts: This method uses the suffix tree of S and a Lowest Common Ancestor (LCA) algorithm such as the ones given by Harel and Tarjan [HT-84], by Schieber and Vishkin <ref> [SV-88] </ref>, or by Berkman and Vishkin [BV-93]. Following preprocessing that takes linear time, such an LCA algorithm can process queries of the form "are s w ; s w+1 : : : s w+x1 and s y ; s y+1 : : : s y+x1 equal?" in O (1) time.
Reference: [W-73] <author> P. Weiner. </author> <title> Linear pattern matching algorithm. </title> <booktitle> Proc. 14 IEEE Symposium on Switching and Automata Theory, </booktitle> <pages> 1-11, </pages> <year> 1973. </year> <month> 35 </month>
Reference-contexts: sibling edges have the same (nonempty) prefix, (3) each leaf is labeled with a distinct position of C and (4) the concatenation of the labels on the path from the root to leaf i describe the suffix of C starting at position i. (See Figure 3 for an example.) Wiener <ref> [W-73] </ref> and McCreight [Mc-76] presented, independently, linear time algorithms to compute a suffix tree, and Apostolico et al. [AILSV-88] compute a suffix tree in parallel.
References-found: 28

