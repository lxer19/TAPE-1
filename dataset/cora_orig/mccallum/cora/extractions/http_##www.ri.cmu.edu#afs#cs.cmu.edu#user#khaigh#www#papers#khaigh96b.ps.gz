URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/khaigh/www/papers/khaigh96b.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/khaigh/www/papers/khaigh96b.abstract.html
Root-URL: 
Email: khaigh@cs.cmu.edu  mmv@cs.cmu.edu  
Title: Interleaving Planning and Robot Execution for Asynchronous User Requests  
Author: Karen Zita Haigh Manuela M. Veloso 
Address: Pittsburgh, PA 15213-3891  
Affiliation: Computer Science Department Carnegie Mellon University  
Web: http://www.cs.cmu.edu/~khaigh  http://www.cs.cmu.edu/~mmv  
Abstract: This paper describes Rogue, an integrated planning and executing robotic agent. Rogue is designed to be a roving office gopher unit, doing tasks such as picking up & delivering mail and returning & picking up library books, in a setup where users can post tasks for the robot to do. We have been working towards the goal of building a completely autonomous agent which can learn from its experiences and improve upon its own behaviour with time. This paper describes what we have achieved to-date: (1) a system that can generate and execute plans for multiple interacting goals which arrive asynchronously and whose task structure is not known a priori, interrupting and suspending tasks when necessary, and (2) a system which can compensate for minor problems in its domain knowledge, monitoring execution to determine when actions did not achieve expected results, and re-planning to correct failures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip E. Agre and David Chapman. Pengi: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <pages> pages 268-272, </pages> <address> San Mateo, CA, 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Other researchers investigate the problem of interleaving planning and execution (including <ref> [1, 4, 6, 7] </ref>).
Reference: [2] <author> R. Peter Bonasso and David Kortenkamp. </author> <title> Using a layered control architecture to alleviate planning with incomplete information. </title> <booktitle> In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information for Robot Problems", </booktitle> <pages> pages 1-4, </pages> <address> Stanford, CA, March 1996. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: ATLANTIS [5] and rap [4], like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to spacecraft robots <ref> [2] </ref>.
Reference: [3] <author> Jaime G. Carbonell, Craig A. Knoblock, and Steven Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. VanLehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1990. </year> <note> Also Available as Technical Report CMU-CS-89-189. </note>
Reference-contexts: Rogue's main features are (1) the ability to receive and reason about multiple asynchronous goals, suspending and interrupting actions when necessary, and (2) the ability to reason about and correct simple execution failures. 2.1 Prodigy Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [3, 17] </ref>. Prodigy4.0 is a nonlinear planner that uses means-ends analysis and backward chaining to reason about multiple goals and multiple alternative operators to achieve the goals.
Reference: [4] <author> R. James Firby. </author> <title> Task networks for controlling continuous processes. </title> <booktitle> In Proceedings of AIPS-94, </booktitle> <pages> pages 49-54, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Other researchers investigate the problem of interleaving planning and execution (including <ref> [1, 4, 6, 7] </ref>). <p> It is also not clear how pareto handles action failure. ATLANTIS [5] and rap <ref> [4] </ref>, like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to spacecraft robots [2].
Reference: [5] <author> Erann Gat. </author> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <pages> pages 809-815, </pages> <year> 1992. </year>
Reference-contexts: There was little need for complex high-level reasoning or learning. pareto [11], can plan to acquire information and recognize opportunities in the environment (as can Rogue), but relies on powerful, perfect sensing in a simulated world. It is also not clear how pareto handles action failure. ATLANTIS <ref> [5] </ref> and rap [4], like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to spacecraft robots [2]. <p> ATLANTIS <ref> [5] </ref> and rap [4], like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots [5] to spacecraft robots [2].
Reference: [6] <author> Kristian Hammond, Timothy Converse, and Charles Martin. </author> <title> Integrating planning and acting in a case-based framework. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 292-297, </pages> <address> San Mateo, CA, 1990. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Other researchers investigate the problem of interleaving planning and execution (including <ref> [1, 4, 6, 7] </ref>).
Reference: [7] <author> Drew McDermott. </author> <title> Planning and acting. </title> <journal> Cognitive Science, </journal> <volume> 2, </volume> <year> 1978. </year>
Reference-contexts: Other researchers investigate the problem of interleaving planning and execution (including <ref> [1, 4, 6, 7] </ref>).
Reference: [8] <author> Nils J. Nilsson. </author> <title> Shakey the robot. </title> <type> Technical Report 323, </type> <institution> AI Center, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1984. </year>
Reference-contexts: Real-world observation creates a more robust planner that is sensitive to its environment. 5 Related Work Following is a brief description of some of the robot architectures most similar to Rogue, pointing out some of the major differences. Shakey <ref> [8] </ref> was the first system to actually use plans to control a real robot in tasks involving pushing boxes. It also had a limited ability to reuse successful plans. The robot had a simple vision system and could identify failures and plan to correct them.
Reference: [9] <author> Joseph O'Sullivan and Karen Zita Haigh. </author> <type> Xavier. </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1994. </year> <note> Manual, Version 0.2, unpublished internal report. </note>
Reference-contexts: To achieve this end, we have been building an integrated framework, Rogue, which combines prodigy, a planning and learning system [17], with Xavier, an autonomous robot <ref> [9] </ref>. The setup allows users to post tasks for which prodigy generates appropriate plans, delivers them to Xavier, and monitors their execution. Rogue acts as the task scheduler for the robot. Xavier is a robot developed by Reid Simmons at Carnegie Mellon [9, 13]. <p> The setup allows users to post tasks for which prodigy generates appropriate plans, delivers them to Xavier, and monitors their execution. Rogue acts as the task scheduler for the robot. Xavier is a robot developed by Reid Simmons at Carnegie Mellon <ref> [9, 13] </ref>. One of the goals of the Xavier project is to have the robot move autonomously in an office building reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers. <p> Rogue is intended to be a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Xavier is a mobile robot being developed at CMU <ref> [9, 13] </ref> (see Figure 1). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. Control, perception and navigation planning are carried out on two on-board Intel 80486-based machines.
Reference: [10] <author> M. Alicia Perez. </author> <title> Learning Search Control Knowledge to Improve Plan Quality. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pitts-burgh, PA, </address> <month> July </month> <year> 1995. </year> <note> Available as Technical Report CMU-CS-95-175. </note>
Reference-contexts: Prodigy has been successfully used as a testbed for machine learning research many times (e.g. <ref> [10, 18, 16] </ref>), and this is the primary reason why we selected it as the deliberative portion of Rogue. Xavier's TCA architecture supports incremental be-haviours and therefore will be a natural mechanism for supporting these learning behaviours.
Reference: [11] <author> Louise Margaret Pryor. </author> <title> Opportunities and Planning in an Unpredictable World. </title> <type> PhD thesis, </type> <institution> Northwestern University, Evanston, Illinois, </institution> <year> 1994. </year> <note> Also available as Technical Report number 53. </note>
Reference-contexts: Shakey however operated in a very simple near-static world doing very simple single-goal tasks. The range of failures that could occur were very limited, and goals were not very challenging. There was little need for complex high-level reasoning or learning. pareto <ref> [11] </ref>, can plan to acquire information and recognize opportunities in the environment (as can Rogue), but relies on powerful, perfect sensing in a simulated world. It is also not clear how pareto handles action failure.
Reference: [12] <author> Reid Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: Task Control Architecture (TCA) <ref> [12, 14] </ref>. TCA provides facilities for scheduling and synchronizing tasks, resource allocation, environment monitoring and exception handling. The reactive behaviours enable the robot to handle real-time local navigation, obstacle avoidance, and emergency situations (such as detecting a bump). <p> The clear separation between reactive and deliberative behaviours increases system predictability by isolating different concerns: the robot's behaviour during normal operation is readily apparent, while strategies for handling exceptions can be individually analyzed. Prodigy and Xavier are linked together using the Task Control Architecture <ref> [12, 14] </ref> as shown in Figure 2.
Reference: [13] <author> Reid Simmons, Rich Goodwin, Karen Zita Haigh, Sven Koenig, and Joseph O'Sullivan. </author> <title> A modular architecture for office delivery robots. </title> <booktitle> Submission to Autonomous Agents 1997, </booktitle> <month> February </month> <year> 1997. </year>
Reference-contexts: The setup allows users to post tasks for which prodigy generates appropriate plans, delivers them to Xavier, and monitors their execution. Rogue acts as the task scheduler for the robot. Xavier is a robot developed by Reid Simmons at Carnegie Mellon <ref> [9, 13] </ref>. One of the goals of the Xavier project is to have the robot move autonomously in an office building reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers. <p> Rogue is intended to be a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Xavier is a mobile robot being developed at CMU <ref> [9, 13] </ref> (see Figure 1). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. Control, perception and navigation planning are carried out on two on-board Intel 80486-based machines.
Reference: [14] <author> Reid Simmons, Long-Ji Lin, and Chris Fedor. </author> <title> Autonomous task control for mobile robots. </title> <booktitle> In Proceedings of the IEEE Symposium on Reactive Control, </booktitle> <address> Philadelphia, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: Task Control Architecture (TCA) <ref> [12, 14] </ref>. TCA provides facilities for scheduling and synchronizing tasks, resource allocation, environment monitoring and exception handling. The reactive behaviours enable the robot to handle real-time local navigation, obstacle avoidance, and emergency situations (such as detecting a bump). <p> The clear separation between reactive and deliberative behaviours increases system predictability by isolating different concerns: the robot's behaviour during normal operation is readily apparent, while strategies for handling exceptions can be individually analyzed. Prodigy and Xavier are linked together using the Task Control Architecture <ref> [12, 14] </ref> as shown in Figure 2.
Reference: [15] <author> Peter Stone and Manuela Veloso. </author> <title> User-guided interleaving of planning and execution. </title> <booktitle> In Proceedings of the European Workshop on Planning, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: During the application phase, user-defined code is called which can map the operator to a real-world action sequence <ref> [15] </ref>. <p> Therefore, when an action fails, the actual outcome of the action is not the same as the expected outcome, and prodigy will attempt to find another solution. The process is described in more detail by Stone <ref> [15] </ref>. In a similar manner, prodigy is able to detect when an action is no longer necessary. If an action unexpectedly achieves some other necessary part of the plan, then that knowledge is added to the state and prodigy will not need to subgoal to achieve it.
Reference: [16] <author> Manuela M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, Germany, </address> <month> December </month> <year> 1994. </year> <type> PhD Thesis, </type> <note> also available as Technical Report CMU-CS-92-174, </note> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: Prodigy has been successfully used as a testbed for machine learning research many times (e.g. <ref> [10, 18, 16] </ref>), and this is the primary reason why we selected it as the deliberative portion of Rogue. Xavier's TCA architecture supports incremental be-haviours and therefore will be a natural mechanism for supporting these learning behaviours.
Reference: [17] <author> Manuela M. Veloso, Jaime Carbonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1), </volume> <month> January </month> <year> 1995. </year>
Reference-contexts: 1 Introduction We have been working towards the goal of building an autonomous robot that is capable of planning and executing high-level tasks in a dynamic environment. To achieve this end, we have been building an integrated framework, Rogue, which combines prodigy, a planning and learning system <ref> [17] </ref>, with Xavier, an autonomous robot [9]. The setup allows users to post tasks for which prodigy generates appropriate plans, delivers them to Xavier, and monitors their execution. Rogue acts as the task scheduler for the robot. Xavier is a robot developed by Reid Simmons at Carnegie Mellon [9, 13]. <p> Rogue's main features are (1) the ability to receive and reason about multiple asynchronous goals, suspending and interrupting actions when necessary, and (2) the ability to reason about and correct simple execution failures. 2.1 Prodigy Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [3, 17] </ref>. Prodigy4.0 is a nonlinear planner that uses means-ends analysis and backward chaining to reason about multiple goals and multiple alternative operators to achieve the goals.
Reference: [18] <author> Xuemei Wang. </author> <title> Learning by observation and practice: An incremental approach for planning operator acquisition. </title> <booktitle> In Proceedings of ML-95, </booktitle> <address> Tahoe City, CA, </address> <year> 1995. </year>
Reference-contexts: Prodigy has been successfully used as a testbed for machine learning research many times (e.g. <ref> [10, 18, 16] </ref>), and this is the primary reason why we selected it as the deliberative portion of Rogue. Xavier's TCA architecture supports incremental be-haviours and therefore will be a natural mechanism for supporting these learning behaviours.
References-found: 18

