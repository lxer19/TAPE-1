URL: http://www.eecs.umich.edu/~chbrooks/492/PS5/docs/ucpop-kr92.ps
Refering-URL: http://www.eecs.umich.edu/~chbrooks/492/PS5/ucpop-tutorial.html
Root-URL: http://www.cs.umich.edu
Email: jsp@watson.ibm.com  weld@cs.washington.edu  
Title: UCPOP: A Sound, Complete, Partial Order Planner for ADL  
Author: J. Scott Penberthy Daniel S. Weld 
Note: 1991].  
Address: P.O Box 704 Yorktown Heights, NY 10598  Seattle, WA 98105  
Affiliation: IBM T.J. Watson Research Center  Department of Computer Science and Engineering University of Washington  
Abstract: We describe the ucpop partial order planning algorithm which handles a subset of Pednault's ADL action representation. In particular, ucpop operates with actions that have conditional effects, universally quantified preconditions and effects, and with universally quantified goals. We prove ucpop is both sound and complete for this representation and describe a practical implementation that succeeds on all of Pednault's and McDermott's examples, including the infamous "Yale Stacking Problem" [McDermott 
Abstract-found: 1
Intro-found: 1
Reference: [Barrett and Weld 1992] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains. </title> <type> Technical Report 92-05-01, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> July </month> <year> 1992. </year>
Reference: [Barrett et al. 1991] <author> A. Barrett, S. Soderland, and D. Weld. </author> <title> The Effect of Step-Order Representations on Planning. </title> <type> Technical Report 91-05-06, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Thus, ucpop is complete. 2 6 Related Work Our work was directly motivated by that of Chap-man [1987] and McAllester and Rosenblitt [1991] on the foundations of partial order strips planning. The basic SNLP algorithm <ref> [Barrett et al. 1991] </ref>, based on the work of McAllester, was derived from Chapman's TWEAK [1987] and Tate's NONLIN [1977]. These partial-order planners use action representations based on the STRIPS formalism. Chien [Chien and De-Jong 1992] introduced conditionals into TWEAK and proved an incremental convergence to soundness.
Reference: [Barrett 1992] <author> A. Barrett. </author> <title> Search-Control Heuristics and Abstraction in Least-Commitment Planning. In Proceedings of the 1992 Workshop on Problem Reformulation and Representation Change. </title> <type> NASA technical Report FIA-92-06, </type> <month> May </month> <year> 1992. </year>
Reference: [Chapman 1987] <author> D. Chapman. </author> <title> Planning for Conjunctive Goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: A few researchers have described complete algorithms rigorously, but all these approaches suffer from one of two liabilities. * Either the planners only handle the restrictive strips representation (e.g., tweak <ref> [Chapman 1987] </ref> and snlp [McAllester and Rosenblitt 1991]), * or the planners represent plans as totally ordered sequences of actions (e.g., Rosenschein's [1981] and Kautz's [1982] bigression planners, and Mc Dermott's [1991] Pedestal). <p> that if P is a solution, it follows that Result (fS i g n i=0 ; I) j= since 1 = and S 1 is executable. 5.2 Soundness Our proof of soundness relies heavily on Pednault's causality theorem [1986] which is akin to a version of Chapman's modal truth criterion <ref> [Chapman 1987] </ref> for plans with conditional actions. We restate the causality theorem here for convenience: Theorem 1 Pednault's Causality Theorem. A con dition ' will be true at a point p during the execution of a plan if and only if one of the following holds: 1.
Reference: [Chien and DeJong 1992] <author> S. Chien and G. DeJong. </author> <title> Incremental Reasoning in Explanation-based Learning of Plans: A Method and Evaluation. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <month> August </month> <year> 1992. </year>
Reference: [Collins and Pryor 1992] <author> G. Collins and L. Pryor. </author> <title> Achieving the functionality of filter conditions in a partial order planner. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <month> August </month> <year> 1992. </year>
Reference: [Etzioni 1990a] <author> Oren Etzioni. </author> <title> A Structural Theory of Explanation-Based Learning. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1990. </year> <note> Available as technical report CMU-CS-90-185. </note>
Reference: [Etzioni 1990b] <author> Oren Etzioni. </author> <title> Why Prodigy/EBL works. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference: [Fikes and Nilsson 1971] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new Approach to the Application of Theorem Proving to Problem Solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <year> 1971. </year>
Reference-contexts: ADL is essentially a reformulation of the situation calculus into action schemata, akin to the add and delete lists of STRIPS <ref> [Fikes and Nilsson 1971] </ref>. ADL is more expressive than STRIPS yet less expressive than full, first-order logic. 2.1 Action schemata The semantics of ADL are based on the algebraic structures (models) used to characterize states of the world.
Reference: [Kautz 1982] <author> H. Kautz. </author> <title> A first order dynamic logic for planning. </title> <institution> Tech Rept CSRG-144, Department of Computer Science, University of Toronto, </institution> <year> 1982. </year>
Reference: [Knoblock 1991] <author> C. Knoblock. </author> <title> Automatically Generating Abstractions for Problem Solving. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year> <note> Available as technical report CMU-CS-91-120. </note>
Reference: [Korf 1985] <author> R. Korf. </author> <title> Depth-first iterative deepening: An optimal admissible tree search. </title> <journal> Artificial Intelligence, </journal> <volume> 27(1), </volume> <year> 1985. </year>
Reference-contexts: To finesse issues of search control, we use fS i g n i=0 as an oracle to guide the construction of the partially ordered plan; McDer mott [1991] refers to this as a clairvoyant algorithm. A* or IDA* search <ref> [Korf 1985] </ref> is used to maintain completeness in our implementation. Base Case: fS i g k i=0 ^ k = 2. This means that no plan steps (besides the dummy initial and goal steps) are necessary to achieve the goal, i.e., I ` .
Reference: [McAllester and Rosenblitt 1991] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: A few researchers have described complete algorithms rigorously, but all these approaches suffer from one of two liabilities. * Either the planners only handle the restrictive strips representation (e.g., tweak [Chapman 1987] and snlp <ref> [McAllester and Rosenblitt 1991] </ref>), * or the planners represent plans as totally ordered sequences of actions (e.g., Rosenschein's [1981] and Kautz's [1982] bigression planners, and Mc Dermott's [1991] Pedestal). <p> of choices: supporting "open" preconditions and resolving "threats." * If ucpop has not yet satisfied a precondition (i.e., it is "open"), then all step effects that could possibly be constrained to unify with the desired proposition are considered. ucpop chooses one effect nondeterministically 2 and then adds a causal link <ref> [McAllester and Rosenblitt 1991] </ref> to the plan to record this choice. * If a third step (called a "threat") might possibly interfere with the precondition being supported by the causal link, then ucpop nondeterministic-ally chooses a method to resolve the threat: either by reordering steps in the plan, posting additional subgoals, <p> Vari--able renaming is done when an action schema is first instantiated as a step in the plan (line 3 of ucpop), following the use of "fresh variables" in <ref> [McAllester and Rosenblitt 1991] </ref>. When used at the top level to solve a planning problem ff = fl; I; U; , the algorithm is called with ff's goal plan, its universally ground goals, and its schemata: ucpop (g-plan (ff); (); fl).
Reference: [McDermott 1991] <author> D. McDermott. </author> <title> Regression planning. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference: [Minton et al. 1989] <author> Steven Minton, Jaime G. Car-bonell, Craig A. Knoblock, Daniel R. Kuokka, Oren Etzioni, and Yolanda Gil. </author> <title> Explanation-based learning: A problem-solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> 40 </volume> <pages> 63-118, </pages> <year> 1989. </year> <note> Available as technical report CMU-CS-89-103. </note>
Reference-contexts: As a result, we believe that ucpop affords an excellent platform for experimentation with search control heuristics [Barrett 1992,Knoblock 1991] and speed-up learning techniques [Minton 1988,Et-zioni 1990b,Etzioni 1990a]. We have therefore developed a model and language for supporting search control heuristics in ucpop (similar to that in prodigy <ref> [Minton et al. 1989] </ref>).
Reference: [Minton et al. 1991] <author> S. Minton, J. Bresina, and M. Drummond. </author> <title> Commitment Strategies in Planning: A Comparative Analysis. </title> <booktitle> In Proceedings of IJCAI-91, </booktitle> <month> August </month> <year> 1991. </year>
Reference: [Minton 1988] <author> S. Minton. </author> <title> Quantitative Results Concerning the Utility of Explanation-Based Learning. </title> <booktitle> In Proceedings of AAAI-88, </booktitle> <pages> pages 564-569, </pages> <month> August </month> <year> 1988. </year>
Reference: [Pednault 1986] <author> E.P.D. Pednault. </author> <title> Toward a mathematical theory of plan synthesis. </title> <type> PhD thesis, </type> <institution> Stan-ford University, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: Each entry on the goal agenda is a pair, c; S, in which S denotes a plan step and c denotes a precondition of that step <ref> [Pednault 1986] </ref>. If c is an equality constraint on variables (u; v), we rename the variables to (u s ; v s ) and then add the Algorithm ucpop (P = S; B; O; L; G; fl) 1. Termination: If G is empty, report success and return P . 2. <p> fixed and finite. * All changes to the world state are dictated by ac tions and explicitly stated. * Actions are deterministic. * Actions are consistent, i.e., no action will add both and : to any consistent world state under any condition. * All relations R are regressively ascertainable everywhere <ref> [Pednault 1986] </ref>, i.e., the truth value of every relation R at some step S i can be deter mined solely by the actions and the initial state. The ucpop algorithm continually refines an incomplete plan P until all goals and subsequent subgoals are satisfied. <p> The universe of discourse is implemented as a static, typed hierarchy of lisp objects. Universal quantification is handled "lazily," using an iteration abstraction that dynamically expands universal clauses to cover more and more cases (similar to the plan transformation rule 4.11 in <ref> [Pednault 1986] </ref>). A closed world assumption is adopted to prevent a large " S 0 that would normally have several :p effects. The codesignation constraints fi are implemented as monotonically converging equivalence classes, similar to the union-find algorithm. <p> We adopt the model-theoretic semantics of ADL and refer the reader to <ref> [Pednault 1986] </ref> for a complete description. 5.1 Formalizing Solutions Soundness implies that every plan produced by ucpop is a solution to the original problem. Completeness implies that, if there is a solution to some problem ff, ucpop will find it. <p> Thus, the temporal history of the world is represented by a linear sequence of states separated by single actions. Given these concepts, we now define what it means to execute a step. We have slightly changed the definition in <ref> [Pednault 1986] </ref> to correspond to our notation and assumptions. Deterministic actions insist that every state s exists in only one pair s; t in an action a. Whereas Pednault assumed a set of initial states, we assume one complete initial state. <p> Lines 5a and 5b of ucpop handle the former approach. Line 5c, in conjunction with the conditions of line 5, handle the latter (following the previous argument for causation preconditions). By <ref> [Pednault 1986, corollary 3.29] </ref>, satisfying the newly revised goal agenda G 0 is equivalent to satisfying G. ucpop only recurses when B 0 is consistent and it only introduces new steps from fl. <p> Since these formulae tend to be fraught with redundant formulae and con straints, heuristic simplification is the only recourse. Instead of generating the entire secondary preconditions as suggested by Pednault <ref> [Pednault 1986] </ref> and implemented by McDermott [1991], ucpop divides these preconditions into separate logical, equality, (and in our current extensions) metric functional aspects; this allows specialized solvers to deal with the con straints in an optimized fashion.
Reference: [Pednault 1988] <author> E.P.D. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: Backtracking ensures that all choices will be eventually considered. Once ucpop has successfully created and protected a causal link for every goal in the plan, it halts and returns a solution. 1.1 Money at Home, Wisdom at Work Adopting an example from <ref> [Pednault 1988] </ref>, suppose we had a single briefcase, B, and wanted to use it to move objects.
Reference: [Pednault 1989] <author> E.P.D. Pednault. </author> <title> Adl: Exploring the middle ground between strips and the situation calculus. </title> <booktitle> In Proceedings Knowledge Representation Conf.,, </booktitle> <year> 1989. </year>
Reference: [Pednault 1991] <author> E.P.D. Pednault. </author> <title> Generalizing nonlinear planning to handle complex goals and actions with context-dependent effects. </title> <booktitle> In Proceedings IJCAI-91, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: You bought a home, turn on the water, and water pours out of holes in the wall. You can paste over the holes and/or fix the plumbing. However, pasting holes before fixing the plumbing is useless <ref> [Pednault 1991] </ref>. * Sussman. We tested on two versions of the Sussman anomaly. The "U Sussman" problem foregoes the clear (b) axiom and instead uses 8x :on (x; b), introducing numerous subgoals. * YSP. McDermott's Yale Stacking Problem, a variation of the Sussman anomaly that uses the above predicate. <p> Proof. By corollary 3.29 of Pednault's thesis [1986], we can replace goals in G (a subset of his "agenda") with the causation preconditions of steps in P whose effects achieve those goals and the preservation preconditions of steps that might threaten the goals. Then, by Pednault's causality theorem <ref> [Pednault 1991] </ref>, if these preconditions are satisfied, the original goals G are satisfied. We now argue that ucpop correctly performs these goal transformations. The condition ' and the "point p" of the causality theorem match the variable c and the step S from line 1 of ucpop. <p> The work is parallel to our efforts on proving ucpop sound. Pednault provides an elegant theoretical foundation for total order planning with ADL in [Pednault 1986,Pednault 1988]. This work is extended to handle partial order plans in <ref> [Pednault 1991] </ref>. Although ucpop was developed independently from [Pednault 1991], pages 243-244 of that document provide an informal description of lines 3-5 of our algorithm. Ped-nault's theory of planning and action transcend our implementation as it encompasses incomplete initial states, nondeterministic actions, functional updates, and disjunctive preconditions. <p> The work is parallel to our efforts on proving ucpop sound. Pednault provides an elegant theoretical foundation for total order planning with ADL in [Pednault 1986,Pednault 1988]. This work is extended to handle partial order plans in <ref> [Pednault 1991] </ref>. Although ucpop was developed independently from [Pednault 1991], pages 243-244 of that document provide an informal description of lines 3-5 of our algorithm. Ped-nault's theory of planning and action transcend our implementation as it encompasses incomplete initial states, nondeterministic actions, functional updates, and disjunctive preconditions.
Reference: [Rosenschein 1981] <author> S.J. Rosenschein. </author> <title> Plan synthesis: A logical perspective. </title> <booktitle> In Proceedings of IJCAI-81, </booktitle> <month> August </month> <year> 1981. </year>
Reference: [Sussman 1975] <author> G. Sussman. </author> <title> A Computer Model of Skill Acquisition. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1975. </year>
Reference: [Tate 1977] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, </booktitle> <pages> pages 888-893, </pages> <year> 1977. </year>
Reference: [Weld and de Kleer 1989] <author> D. Weld and J. de Kleer, </author> <title> editors. Readings in Qualitative Reasoning about Physical Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1989. </year>
References-found: 25

