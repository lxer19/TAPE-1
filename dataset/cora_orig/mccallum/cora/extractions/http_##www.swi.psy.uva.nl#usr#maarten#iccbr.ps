URL: http://www.swi.psy.uva.nl/usr/maarten/iccbr.ps
Refering-URL: http://www.swi.psy.uva.nl/usr/maarten/papers.html
Root-URL: 
Email: email: maarten@swi.psy.uva.nl  email: surma@rsftew.luc.ac.be  email: torasso@di.unito.it  
Phone: 2  3  
Title: A utility-based approach to learning in a mixed Case-Based and Model-Based Reasoning architecture  
Author: Maarten van Someren Jerzy Surma and Pietro Torasso 
Address: Roetersstraat 15 1018 WB Amsterdam The Netherlands  Universitaire Campus D B-3590 Diepenbeek Belgium  Corso Svizzera 185 Torino Italia  
Affiliation: 1 Universiteit van Amsterdam  Limburg University Centre  Dipartimento di Informatica Universita' di Torino  
Abstract: Case-based reasoning (CBR) can be used as a form of "caching" solved problems to speedup later problem solving. Using "cached" cases brings additional costs with it due to retrieval time, case adaptation time and also storage space. Simply storing all cases will result in a situation in which retrieving and trying to adapt old cases will take more time (on average) than not caching at all. This means that caching must be applied selectively to build a case memory that is actually useful. This is a form of the utility problem [4, 2]. The approach taken here is to construct a "cost model" of a system that can be used to predict the effect of changes to the system. In this paper we describe the utility problem associated with "caching" cases and the construction of a "cost model". We present experimental results that demonstrate that the model can be used to predict the effect of certain changes to the case memory.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Console, L., Portinale, L., Theseider, D., and Torasso, P. </author> <year> (1993). </year> <title> Combining Heuristic Reasoning with Causal Reasoning In Diagnostic Problem Solving, </title> <address> pages 46-68. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: In the following we just sketch the structure of the system and provide some more details on the modules which have been added in the revised version of the system. The architecture of ADAPtER involves the following basic components Model-Based Reasoner (MBR): this is essentially the Aid diagnostic engine <ref> [1] </ref>, which uses of an abductive procedure for finding an explanation for the observations and uses consistency constraints for disregarding the tentative solutions which makes predictions on manifestations which are in conflict with observations.
Reference: [2] <author> Francis, A. G. and Ram, A. </author> <year> (1995). </year> <title> A comparative utility analysis of case-based reasoning and controle-rule learning systems. </title> <editor> In Lavrac, N. and Wrobel, S., editors, </editor> <booktitle> Machine Learning: ECML-95, </booktitle> <pages> pages 138-150. </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: As discussed in <ref> [2] </ref> the utility problem also occurs in systems as sketched above, that "cache" cases to gain speed. A simple approach to the utility problem is an empirical approach.
Reference: [3] <author> Keller, R. M. </author> <year> (1988). </year> <title> Defining operationality for explanation-based learning. </title> <journal> Artificial Intelligence, </journal> <volume> 35 </volume> <pages> 227-241. </pages>
Reference-contexts: However, these shortcut rules may reduce solution time. A "hybrid" architecture first tries to solve a problem with the shortcut rules and if that fails it uses the original knowledge base. As demonstrated by Keller <ref> [3] </ref> and Minton [4] the shortcut rules do not always lead to reduced solution time because the increase the branching factor of the search space. The negative effect of the increased branching rate can actually lead to a higher solution times.
Reference: [4] <author> Minton, S. </author> <year> (1988). </year> <title> Learning Effective Search Control Knowledge: An Explanation-Based Approach. </title> <publisher> Kluwer. </publisher>
Reference-contexts: However, these shortcut rules may reduce solution time. A "hybrid" architecture first tries to solve a problem with the shortcut rules and if that fails it uses the original knowledge base. As demonstrated by Keller [3] and Minton <ref> [4] </ref> the shortcut rules do not always lead to reduced solution time because the increase the branching factor of the search space. The negative effect of the increased branching rate can actually lead to a higher solution times.
Reference: [5] <author> Portinale, L. and Torasso, P. </author> <year> (1995). </year> <title> Adapter: an integrated diagnostic system combining case-based and abductive reasoning. </title> <editor> In Veloso, M. and Aamodt, A., editors, </editor> <booktitle> Proceedings ICCBR-95, </booktitle> <pages> pages 277-288. </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: In section 4 we show how the parameters of this model can be estimated from empirical (benchmarking) data and analytical arguments. 2 A mixed CBR-MBR architecture The CBR-MBR architecture presented in this section is essentially the the one adopted in ADAPtER (Abductive Diagnosis through Adaptation of Past Episodes for Re-use) <ref> [5] </ref>, a diagnostic system which integrates a case-based component with a model-based component centered around the diagnostic inference engine AID. In general, model-based diagnosis is very expensive from a computational point of view since the search space is very large. <p> The Causal Model has a precise semantics since it can be translated into a logical formalism (a more precise description of the formalism is reported in <ref> [5] </ref>). Case Memory Manager (RETRIEVE): stores and retrieves cases from the Case Memory. This contains a set of diagnostic problems that were solved before. Each problem consists of two parts: the description in terms of pairs (observable parameter value) and the solution.
Reference: [6] <author> Portinale, L. and Torasso, P. </author> <year> (1996). </year> <title> On the usefulness of re-using diagnostic solutions. </title> <editor> In Wahlster, W., editor, </editor> <booktitle> Proceedings 12th European Conference on Artificial Intelligence ECAI-96, </booktitle> <pages> pages 137-141. </pages> <publisher> John Wiley and Sons. </publisher>
Reference-contexts: It is worth noting that explanation construction has to explore many alternatives since in general many causal relations have the same internal state for effect. The mechanisms of inconsistency removal, and explanation construction are quite complex from a computational point of view. As shown in <ref> [6] </ref>, in the worst case ADAPTATION is as complex as MBR. ADAPTATION can fail because it is more restricted than the complete MBR component. In particular, inconsistency removal can involve disproving a conjunction of elements. <p> are removed The top level problem solving architecture of ADAPtER is: ADAPtER (new-case,Case-Memory,Causal-Model): IF NOT RETRIEVE (new-case, Case-Memory, retrieve-solution) THEN MBR (new-case, Causal-Model) ELSE IF OK-SOLUTION (new-case, retrieve-solution, Causal-Model, replayed-solution) THEN return replayed-solution ELSE IF ADAPTATION (new-case, replayed-solution, Causal-Model, adapted-solution) THEN return adapted-solution ELSE MBR (new-case, Causal-Model) Experiments with ADAPtER <ref> [6] </ref> have shown that it suffers from the utility problem in two ways. <p> In these two domains it is quite apparent that the CBR component is a really useful addition to MBR. However, as already pointed out in <ref> [6] </ref> the benefits are in average, since in many specific cases MBR could be better than ADAPtER because the cost of MBR is relatively small.
Reference: [7] <author> Smyth, B. and Keane, M. </author> <year> (1995). </year> <title> Remembering to forget. </title> <editor> In Mellish, C., editor, </editor> <booktitle> Proceedings IJCAI-95, </booktitle> <pages> pages 377-382. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Experiments with analogous methods to achieve functionality (possibly combined with speedup) suggest that "forgetting" (deleting cases after some time) gives better results than "remembering" (deciding directly if a case should be stored or deleted) (e.g. <ref> [7] </ref>). A second issue concerns prediction of effects of adding or deleting individual cases. Our experiments sofar addressed larger components of the architecture but, as discussed, the same approach can in principle be applied to individual cases. A third issue concerns the nature of the costs.
Reference: [8] <author> Straatman, R. and Beys, P. </author> <year> (1995). </year> <title> A performance model for knowledge-based systems. </title> <editor> In Ayel, M. and Rousse, M. C., editors, </editor> <booktitle> EUROVAV-95 European Symposium on the Validation and Verification of Knowledge Based Systems, </booktitle> <pages> pages 253-263. </pages> <address> ADEIRAS, Universite de Savoie, Chambery. </address>
Reference-contexts: The cost model is derived from the control structure of the problem solving architecture. The expected costs (solution times) of components and the probability of their application are parameters of the cost model. The model is based on work by van Harmelen [10] and Straatman and Beys <ref> [8] </ref>. Their model was designed for rule based and "dynamic" logical languages that include control structures like "sequence" and "while loop". A cost model is derived from a control structure as follows. <p> The cost model in <ref> [8] </ref> gives formulae for sequence, if-then-else and while-do. Note that the model uses expected costs for a component procedure. If the costs of a procedure vary too much to obtain useful results then a model of finer grain size must be constructed.

References-found: 8

