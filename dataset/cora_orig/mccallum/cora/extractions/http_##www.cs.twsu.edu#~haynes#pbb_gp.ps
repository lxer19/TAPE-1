URL: http://www.cs.twsu.edu/~haynes/pbb_gp.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: haynes@arch.umsl.edu  
Title: Phenotypical Building Blocks for Genetic Programming  
Author: Thomas Haynes 
Note: Royal Road functions in GA research.  
Address: St. Louis 8001 Natural Bridge Rd St. Louis, MO 63121-4499  
Affiliation: Department of Mathematics Computer Sciences University of Missouri,  
Abstract: The theoretical foundations of genetic algorithms (GA) rest on the shoulders of the Schema Theorem, which states that the building blocks, highly fit compact subsets of the chromosome, are more likely to survive from one generation to the next. The theory of genetic programming (GP) is tenuous, borrowing heavily from that of GA. As the GP can be considered to be a GA operating on a tree structure, this borrowing is adequate for most. Part of the problem of tying GP theory to the schema theorem is in the identification of building blocks. We discuss how a building block can be represented in a GP chromosome and the characteristics of building blocks in GP chromosomes. We also present the clique detection domain for which the detection of building blocks is easier than in previous domains utilized in GP research. We illustrate how the clique detection domain facilitates the construction of fitness landscapes similar to those of the 
Abstract-found: 1
Intro-found: 1
Reference: [ Altenberg, 1994 ] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 3, </booktitle> <pages> pages 47-74. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: We can apply our Newtonian laws to get a "feel" for how things work, but we still need to adopt a counter-intuitive manner of thinking. While problems with the schema theorem have been published <ref> [ Altenberg, 1994, Mitchell et al., 1992 ] </ref> , it still provides a starting point for studying the theoretical workings of the GA. We do not really have that luxury when we examine the genetic programming (GP) paradigm [ Koza, 1992 ] . <p> We adopt this frequent expression of subtrees in the chromosome as our working definition of building blocks in a GP system 1 . Altenberg applies Price's Theorem to account for the multiple appearance of a subtree within a chromosome <ref> [ Altenberg, 1994 ] </ref> . He believes that the schema theorem can not account for the proliferation of copies of subtrees and introduces a "constructional fitness" to account for such proliferation. <p> To change the fitness landscape, we would either have to change the edges between the nodes or add additional nodes to the graph. We employ Altenberg's definition of a building block <ref> [ Altenberg, 1994 ] </ref> for the expression of candidate cliques in the chromosomes. For example, consider the third candidate clique in Figure 4, since it does not directly contribute to the fitness of the chromosome, it does not fit the traditional definition of a building block.
Reference: [ Andre, 1995 ] <author> David Andre. </author> <title> The evolution of agents that build mental models and create simple plans using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 248-255. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: Problem domains may not be explicitly designed to reward for different actions <ref> [ Andre, 1995, Koza, 1992 ] </ref> , but still encourage the development of building blocks to solve subtasks in the evaluation. For example, the Pac-Man game rewards for an agent eating a pill and then the monsters while the pill is in effect [ Koza, 1992 ] .
Reference: [ Angeline, 1994 ] <author> Peter J. Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kin-near, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, </booktitle> <pages> pages 75-97. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: above average fitness and resilience to disruption are not always assured; also, a BBH constitutes a narrow and imprecise account of GP search behavior. [ O'Reilly, 1995 ] (pages 136 137) Empirically however, the concept of introns have been discussed in GP literature for quite some time (see for example <ref> [ Tackett, 1993, Angeline, 1994 ] </ref> ). Introns are conjectured to guard against destructive crossover in GA chromosomes [ Levenick, 1991 ] . <p> Introns are conjectured to guard against destructive crossover in GA chromosomes [ Levenick, 1991 ] . Angeline conjectures the same role is played by introns in GP chromosomes <ref> [ Angeline, 1994 ] </ref> , and Nordin et al. have shown this experimentally [ Nordin et al., 1996 ] . Tackett however takes a slightly different stance: he believes that small subtrees which appear frequently in S-expressions and are especially expressed in the intron, are GP's building blocks.
Reference: [ Goldberg, 1989 ] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: 1 INTRODUCTION The schema theorem and the building block hypothesis <ref> [ Holland, 1975, Goldberg, 1989 ] </ref> provide intuition into the mechanics of the genetic algorithm (GA). They are sufficient in the same way the laws of New-tonian physics are for describing the physical world; on the surface, they prepare you for everyday life. <p> They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time <ref> [ Holland, 1975, Goldberg, 1989 ] </ref> . The "basic" theory of GP is borrowed from that of GA [ Koza, 1992 ] .
Reference: [ Haynes et al., 1995 ] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 271-278, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher> <pages> 7 </pages>
Reference-contexts: For example, the predator/prey implementation by Haynes et al. first encourages predators to move closer to the prey, then to each take up and stay at a capture position, and finally to all stay at the capture position <ref> [ Haynes et al., 1995 ] </ref> . The simple evaluation of always moving closer would also lead to capture. With the multi-level function they use, they have created a Royal Road function. The evaluation of a subtree is context dependent, i.e. its position in the chromosome readily changes its evaluation. <p> Both Haynes and Soule et al. consider variants of detecting cliques in a graph: Haynes detects all cliques in a graph and Soule et al. look for the maximum clique. Haynes utilized strong typing [ Montana, 1995 ] and type inheritance <ref> [ Haynes et al., 1995 ] </ref> to generate a collection of candidate cliques in a graph. He discussed how the valid candidate cliques are actually building blocks and shows how by duplicating the candidate cliques in the chromosome, learning can be improved. <p> so that a large clique contributes more to the fitness of one chromosome than a collection of proper sub-cliques contributes to the fitness of a different chromosome. are exactly 10 cliques: C = f f0; 3; 4g; f0; 1; 4g; f1; 4; 5g; f1; 2; 5g; f2; 5; 6g; ance <ref> [ Haynes et al., 1995 ] </ref> are used to ensure that the parent of an ExtCon node is either the root or another ExtCon node. An example chromosome for the 10 node graph is presented in Figure 4. <p> The building blocks expressed in GP systems are both in the genotype and phenotype of the chromosome. By designing multi-level fitness functions, GP researchers have been implicitly designing Royal Road functionality into their domains. Indeed several have reported the discovery of the multiple fitness criteria during the evolutionary process <ref> [ Koza, 1992, Haynes et al., 1995 ] </ref> .
Reference: [ Haynes, 1996 ] <author> Thomas Haynes. </author> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: and creating a new chromosome which contained duplicates of the coding 1 The GPST of O'Reilly and Oppacher also accounts for the multiple appearance of building blocks in the chromosome. 2 These are segments which do not contribute either positively or negatively to the evaluation of the chromosome. 2 segment <ref> [ Haynes, 1996 ] </ref> . By forcing the multiple ap-pearance of the coding segment, we were able to effect multiple appearances of the building blocks. The duplicates were non-coding in that they had no direct influence on the fitness of the repaired chromosome. <p> provided by O'Reilly and Oppacher fail for this domain and show the representational problems that do not make clique detection a good candidate for a GA Royal Road function. 5 A GP ROYAL ROAD FUNCTION In this section we present our implementation of the clique detection domain as described in <ref> [ Haynes, 1996 ] </ref> and use it to illustrate how the definition of Royal Road functions must be changed to accommodate GP chromosomes.
Reference: [ Holland, 1975 ] <author> John H. Holland. </author> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: 1 INTRODUCTION The schema theorem and the building block hypothesis <ref> [ Holland, 1975, Goldberg, 1989 ] </ref> provide intuition into the mechanics of the genetic algorithm (GA). They are sufficient in the same way the laws of New-tonian physics are for describing the physical world; on the surface, they prepare you for everyday life. <p> They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time <ref> [ Holland, 1975, Goldberg, 1989 ] </ref> . The "basic" theory of GP is borrowed from that of GA [ Koza, 1992 ] .
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: While problems with the schema theorem have been published [ Altenberg, 1994, Mitchell et al., 1992 ] , it still provides a starting point for studying the theoretical workings of the GA. We do not really have that luxury when we examine the genetic programming (GP) paradigm <ref> [ Koza, 1992 ] </ref> . <p> They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time [ Holland, 1975, Goldberg, 1989 ] . The "basic" theory of GP is borrowed from that of GA <ref> [ Koza, 1992 ] </ref> . Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work [ O'Reilly, 1995, Rosca, 1997, Poli and Langdon, 1997a ] . <p> Problem domains may not be explicitly designed to reward for different actions <ref> [ Andre, 1995, Koza, 1992 ] </ref> , but still encourage the development of building blocks to solve subtasks in the evaluation. For example, the Pac-Man game rewards for an agent eating a pill and then the monsters while the pill is in effect [ Koza, 1992 ] . <p> For example, the Pac-Man game rewards for an agent eating a pill and then the monsters while the pill is in effect <ref> [ Koza, 1992 ] </ref> . In his encoding of the problem, 4 s 1 = 11111111******************************************************** s 3 = ****************11111111**************************************** s 5 = ********************************11111111************************ s 7 = ************************************************11111111******** Koza did not devise the problem so that this sub-task would be solved. <p> The building blocks expressed in GP systems are both in the genotype and phenotype of the chromosome. By designing multi-level fitness functions, GP researchers have been implicitly designing Royal Road functionality into their domains. Indeed several have reported the discovery of the multiple fitness criteria during the evolutionary process <ref> [ Koza, 1992, Haynes et al., 1995 ] </ref> .
Reference: [ Levenick, 1991 ] <author> James R. Levenick. </author> <title> Inserting introns improves genetic algorithm success rate: Taking a clue from biology. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 123-127. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Introns are conjectured to guard against destructive crossover in GA chromosomes <ref> [ Levenick, 1991 ] </ref> . Angeline conjectures the same role is played by introns in GP chromosomes [ Angeline, 1994 ] , and Nordin et al. have shown this experimentally [ Nordin et al., 1996 ] .
Reference: [ Mitchell et al., 1992 ] <author> Melanie Mitchell, Stephanie Forrest, and John H. Holland. </author> <title> The royal road for genetic algorithms: Fitness landscapes and GA performance. In Toward a Practice of Autonomous Systems: </title> <booktitle> Proceedings of the First European Conference on Artificial Life, </booktitle> <pages> pages 245-254, </pages> <address> Cambridge, MA, 1992. </address> <publisher> MIT Press. </publisher>
Reference-contexts: We can apply our Newtonian laws to get a "feel" for how things work, but we still need to adopt a counter-intuitive manner of thinking. While problems with the schema theorem have been published <ref> [ Altenberg, 1994, Mitchell et al., 1992 ] </ref> , it still provides a starting point for studying the theoretical workings of the GA. We do not really have that luxury when we examine the genetic programming (GP) paradigm [ Koza, 1992 ] . <p> Also unlike GA building blocks, instances of a subtree may not be highly fit. Royal Roads are a tool that GA researchers can use to both investigate the formation of building blocks and test GAs against other paradigms <ref> [ Mitchell et al., 1992 ] </ref> . The GA researcher can utilize a Royal Road function to carefully craft a fitness landscape, which will allow for controlled experiments to test properties of the GA. Again, such an undertaking has not been done within the GP community. <p> With our depth restrictions, there are two possible genotypical representations of this phenotypical building block: (NOR ff ff) and (NAND ff ff). 3 ROYAL ROADS Royal Road functions represent fitness landscapes which facilitate the testing and understanding of how the GA works <ref> [ Mitchell et al., 1992 ] </ref> . <p> Their choice of building blocks dictates the learning curve for this problem. If there were also the four schemata that correspond to 16 consecutive bits starting on 16 bit boundaries, the learning would be drastically different <ref> [ Mitchell et al., 1992 ] </ref> . A tempting assumption to make is that the 1s problem is purely genotypical. In Mitchell et al.'s description of R 1 , the problem's domain is explicitly omitted. The intent is too simply describe a fitness landscape.
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year>
Reference-contexts: As such, their building blocks do not depend on context. Both Haynes and Soule et al. consider variants of detecting cliques in a graph: Haynes detects all cliques in a graph and Soule et al. look for the maximum clique. Haynes utilized strong typing <ref> [ Montana, 1995 ] </ref> and type inheritance [ Haynes et al., 1995 ] to generate a collection of candidate cliques in a graph. He discussed how the valid candidate cliques are actually building blocks and shows how by duplicating the candidate cliques in the chromosome, learning can be improved. <p> The function and terminal sets are F = fExtCon, IntCong and T = f1,. . . ,#verticesg. ExtCon "separates" two candidate maximal cliques, while IntCon "joins" two candidate cliques to create a larger candidate 7 . We are 7 Strong typing <ref> [ Montana, 1995 ] </ref> and type inherit 5 forcing the chromosome to evolve "lists" of nodes. The fitness evaluation rewards for clique size and rewards for the number of cliques in the tree. To gather the maximal complete subgraphs, the reward for size is greater than that for numbers.
Reference: [ Nordin et al., 1996 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 6, </booktitle> <pages> pages 111-134. </pages> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Introns are conjectured to guard against destructive crossover in GA chromosomes [ Levenick, 1991 ] . Angeline conjectures the same role is played by introns in GP chromosomes [ Angeline, 1994 ] , and Nordin et al. have shown this experimentally <ref> [ Nordin et al., 1996 ] </ref> . Tackett however takes a slightly different stance: he believes that small subtrees which appear frequently in S-expressions and are especially expressed in the intron, are GP's building blocks.
Reference: [ O'Reilly and Oppacher, 1995 ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> The troubling aspects of a building block hypothesis for genetic programming. </title> <editor> In L. D. Whitley and M. D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 73-88. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: O'Reilly and Op-pacher carefully crafted a GPST, GP Schema Theorem, based on the expression of subtrees in the genotype of the chromosome. They just as carefully tore the resultant theory apart and questioned the existence of building blocks in GP systems <ref> [ O'Reilly, 1995, O'Reilly and Oppacher, 1995 ] </ref> . Their conclusions were: In this chapter we carefully formulated a Schema Theorem for GP using a schema definition that accounts for the variable length and the non-homologous nature of GP's representation. <p> Clearly chromosomes must begin to express C 2 as a possible solution. However, once it has been found, it leads the search away from C 1 . 6 CONCLUSIONS The work of O'Reilly and Oppacher in developing a GP Schema Theorem <ref> [ O'Reilly, 1995, O'Reilly and Oppacher, 1995 ] </ref> is instrumental in proving why a schema theorem rooted in the genotype is not sufficient for GP.
Reference: [ O'Reilly, 1995 ] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carelton University, </institution> <address> Ottawa, Ontario, Canada, </address> <month> 22 September </month> <year> 1995. </year>
Reference-contexts: Even though it is an off-shoot of GAs and it also borrows the concepts of selection, recombination, and mutation from the natural sciences, we are at a loss to provide a schema definition for the GP, indeed O'Reilly and Oppacher argue that a GP Schema Theorem is not forthcoming <ref> [ O'Reilly, 1995 ] </ref> . We do observe the formation of what we consider to be building blocks, e.g., highly fit subtrees of small defining length, but such findings are empirical. Also unlike GA building blocks, instances of a subtree may not be highly fit. <p> The "basic" theory of GP is borrowed from that of GA [ Koza, 1992 ] . Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995, Rosca, 1997, Poli and Langdon, 1997a ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The fixed versus variable genotype representation has proven problematic in formulating a schema theorem for GP. <p> O'Reilly and Op-pacher carefully crafted a GPST, GP Schema Theorem, based on the expression of subtrees in the genotype of the chromosome. They just as carefully tore the resultant theory apart and questioned the existence of building blocks in GP systems <ref> [ O'Reilly, 1995, O'Reilly and Oppacher, 1995 ] </ref> . Their conclusions were: In this chapter we carefully formulated a Schema Theorem for GP using a schema definition that accounts for the variable length and the non-homologous nature of GP's representation. <p> GP Schema Theorem; even if there were such support for a BBH, it is empirically questionable whether building blocks always exist because partial solutions of consistently above average fitness and resilience to disruption are not always assured; also, a BBH constitutes a narrow and imprecise account of GP search behavior. <ref> [ O'Reilly, 1995 ] </ref> (pages 136 137) Empirically however, the concept of introns have been discussed in GP literature for quite some time (see for example [ Tackett, 1993, Angeline, 1994 ] ). Introns are conjectured to guard against destructive crossover in GA chromosomes [ Levenick, 1991 ] . <p> We argue that with the GP, schemata are at the phenotype or semantical level and the building blocks are difficult to represent, de 3 Which is actually grounded in experimental research <ref> [ O'Reilly, 1995 ] </ref> . 4 This reads as schema for which the subtree (+ 5 6) is expressed twice. The reader is referred to [ O'Reilly, 1995 ] for the notation. tect, and capture. <p> schemata are at the phenotype or semantical level and the building blocks are difficult to represent, de 3 Which is actually grounded in experimental research <ref> [ O'Reilly, 1995 ] </ref> . 4 This reads as schema for which the subtree (+ 5 6) is expressed twice. The reader is referred to [ O'Reilly, 1995 ] for the notation. tect, and capture. Poli and Langdon have recently proposed a different schema theorem based on their concept of one-point crossover [ Poli and Langdon, 1997b, Poli and Lang-don, 1997a ] . <p> Clearly chromosomes must begin to express C 2 as a possible solution. However, once it has been found, it leads the search away from C 1 . 6 CONCLUSIONS The work of O'Reilly and Oppacher in developing a GP Schema Theorem <ref> [ O'Reilly, 1995, O'Reilly and Oppacher, 1995 ] </ref> is instrumental in proving why a schema theorem rooted in the genotype is not sufficient for GP.
Reference: [ Poli and Langdon, 1997a ] <author> Riccardo Poli and W. B. Langdon. </author> <title> An experimental analysis of schema creation, propagation and disruption in genetic programming. </title> <editor> In Thomas Back, editor, </editor> <booktitle> Proceedings of the Seventh International Conference on Genetic Algorithms (ICGA97), </booktitle> <address> San Francisco, CA, 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The "basic" theory of GP is borrowed from that of GA [ Koza, 1992 ] . Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995, Rosca, 1997, Poli and Langdon, 1997a ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The fixed versus variable genotype representation has proven problematic in formulating a schema theorem for GP. <p> commutative property is dependent on the properties of each function in the function set F . 6 Poli and Langdon provide a detailed theoretical and experimental analysis of this domain and alphabet for trees of a maximum depth of 2 and also an experimental analysis of trees of depth 3 <ref> [ Poli and Langdon, 1997a ] </ref> . 3 blocks, the performance of the GA can be tested. Consider the 1s problem, i.e. with a fixed binary string, the global optimum is having a 1 in each bit. <p> We do not however support their claim that such a theorem is not forthcoming and several theorems have been recently proposed <ref> [ Rosca, 1997, Poli and Langdon, 1997a ] </ref> . While we do not offer such a theory, we do reconcile the empirical observations of GP researchers, i.e. that GP does build hierarchical solutions by recombining small subtrees, with the findings of O'Reilly and Oppacher.
Reference: [ Poli and Langdon, 1997b ] <author> Riccardo Poli and W. B. Langdon. </author> <title> A new schema theory for genetic programming with one-point crossover and point mutation. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference. </booktitle> <publisher> MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: The reader is referred to [ O'Reilly, 1995 ] for the notation. tect, and capture. Poli and Langdon have recently proposed a different schema theorem based on their concept of one-point crossover <ref> [ Poli and Langdon, 1997b, Poli and Lang-don, 1997a ] </ref> . Their schema is also not commutative, i.e., it does not allow for the different ways to embed a phenotypical subtree in the genotype 5 . For example, (+ 5 6) and (+ 6 5) are not equivalent.
Reference: [ Punch et al., 1996 ] <author> William F. Punch, Douglas Zongker, and Erik D. Goodman. </author> <title> The royal tree problem, a benchmark for single and multiple population genetic programming. </title> <editor> In Peter J. An-geline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 15, </booktitle> <pages> pages 299-316. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1996. </year>
Reference-contexts: Again, such an undertaking has not been done within the GP community. Some work has been done on presenting standard testbeds [ Tackett and Carmi, 1994 ] and Punch et al. have even proposed a Royal Tree function <ref> [ Punch et al., 1996 ] </ref> , which is presented more as a benchmark than as a tool into GP fitness landscapes. Our objective is to reconcile the conclusions drawn by O'Reilly and Oppacher against the empirical evidence for building blocks.
Reference: [ Rosca, 1997 ] <author> Justinian Rosca. </author> <title> Analysis of complexity drift in genetic programming. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference. </booktitle> <publisher> MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: The "basic" theory of GP is borrowed from that of GA [ Koza, 1992 ] . Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995, Rosca, 1997, Poli and Langdon, 1997a ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The fixed versus variable genotype representation has proven problematic in formulating a schema theorem for GP. <p> We do not however support their claim that such a theorem is not forthcoming and several theorems have been recently proposed <ref> [ Rosca, 1997, Poli and Langdon, 1997a ] </ref> . While we do not offer such a theory, we do reconcile the empirical observations of GP researchers, i.e. that GP does build hierarchical solutions by recombining small subtrees, with the findings of O'Reilly and Oppacher.
Reference: [ Russell and Norvig, 1995 ] <author> Stuart Russell and Peter Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: It fell out naturally from the way the video arcade game was designed. Likewise this is the case with Spector's research [ Spector, 1996 ] into the Wumpus World presented originally by Russell and Norvig <ref> [ Russell and Norvig, 1995 ] </ref> .
Reference: [ Soule et al., 1996 ] <author> Terence Soule, James A. Foster, and John Dickinson. </author> <title> Using genetic programming to approximate maximum clique. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 400-405. </pages> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference: [ Spector, 1996 ] <author> Lee Spector. </author> <title> Simultaneous evolution of programs and their control structures. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 7, </booktitle> <pages> pages 137-154. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: It fell out naturally from the way the video arcade game was designed. Likewise this is the case with Spector's research <ref> [ Spector, 1996 ] </ref> into the Wumpus World presented originally by Russell and Norvig [ Russell and Norvig, 1995 ] .
Reference: [ Tackett and Carmi, 1994 ] <author> Walter Alden Tackett and Aviram Carmi. </author> <title> The donut problem: Scalability and generalization in genetic programming. </title> <editor> In Ken-neth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 7, </booktitle> <pages> pages 143-176. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The GA researcher can utilize a Royal Road function to carefully craft a fitness landscape, which will allow for controlled experiments to test properties of the GA. Again, such an undertaking has not been done within the GP community. Some work has been done on presenting standard testbeds <ref> [ Tackett and Carmi, 1994 ] </ref> and Punch et al. have even proposed a Royal Tree function [ Punch et al., 1996 ] , which is presented more as a benchmark than as a tool into GP fitness landscapes.
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year> <month> 8 </month>
Reference-contexts: above average fitness and resilience to disruption are not always assured; also, a BBH constitutes a narrow and imprecise account of GP search behavior. [ O'Reilly, 1995 ] (pages 136 137) Empirically however, the concept of introns have been discussed in GP literature for quite some time (see for example <ref> [ Tackett, 1993, Angeline, 1994 ] </ref> ). Introns are conjectured to guard against destructive crossover in GA chromosomes [ Levenick, 1991 ] . <p> Tackett however takes a slightly different stance: he believes that small subtrees which appear frequently in S-expressions and are especially expressed in the intron, are GP's building blocks. These subtrees are prevalent due to their contribution to the fitness of the chromosomes in which they appear <ref> [ Tackett, 1993 ] </ref> . We adopt this frequent expression of subtrees in the chromosome as our working definition of building blocks in a GP system 1 . Altenberg applies Price's Theorem to account for the multiple appearance of a subtree within a chromosome [ Altenberg, 1994 ] .
References-found: 23

