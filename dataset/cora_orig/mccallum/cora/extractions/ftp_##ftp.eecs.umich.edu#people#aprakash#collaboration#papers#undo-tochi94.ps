URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/undo-tochi94.ps
Refering-URL: http://www.eecs.umich.edu/~aprakash/csrg_pub.html
Root-URL: http://www.cs.umich.edu
Title: A Framework for Undoing Actions in Collaborative Systems  
Author: ATUL PRAKASH MICHAEL J. KNISTER 
Keyword: General Terms: Algorithms, Design, Human Factors Additional keywords and Phrases: Undo, groupware, computer supported cooperative work, selective undo, DistEdit, user recovery, state recovery, concurrency control.  
Address: Ann Arbor  
Affiliation: University of Michigan,  
Abstract: The ability to undo operations is a standard feature in most single-user interactive applications. In this paper, we propose a general framework for implementing undo in collaborative systems. The framework allows users to individually reverse their own changes, taking into account the possibility of conflicts between different users' operations that may prevent an undo. The proposed framework has been incorporated into DistEdit, a toolkit for building group text-editors. Based on our experience with DistEdit's undo facilities, we discuss several issues that need to be taken into account in using the framework, in order to ensure that a reasonable undo behavior is provided to users. We show that the framework is also applicable to single-user systems, since the operations to undo can be selected not just on the basis of who performed them, but by any appropriate criterion, such as the document region in which the operations occurred or the time interval in which the operations were carried out. Categories and Subject Descriptors: D.2.2 [Software Engineering]: Tools and Techniques User Interfaces; H.1.2 [Models and Principles]: User/Machine Systems Human Factors; H.2.2 [Database Management]: Physical Design Recovery and Restart; H.2.4 [Database Management]: Systems - Concurrency; H.5.2 [Human Interfaces and Presentation]: User Interfaces Theory and Methods; H.5.3 [Human Interfaces and Presentation]: Group and Organization Interfaces This work was supported in part by the National Science Foundation under the cooperative agreement IRI-9216848. A preliminary report on this research appears in the Proceedings of the Fourth ACM Conference on Computer-Supported Cooperative Work (Toronto, Canada, October 1992), pp. 273-280. Author's addresses: A. Prakash, Software Systems Research Laboratory, Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI 48109-2122; email: aprakash@eecs.umich.edu; M. J. Knister, 930 Tahoe Blvd #802-185, Incline Village, NV 89451; email: knister@libre.com. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory D. Abowd and Alan J. Dix. </author> <title> Giving undo attention. </title> <journal> Interacting with Computers, </journal> <volume> 4(3) </volume> <pages> 317-342, </pages> <year> 1992. </year>
Reference-contexts: Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage and Genau [6], Chaudhary and Dewan [7], and Abowd and Dix <ref> [1] </ref>. We provide a comparison with these schemes below. Berlage and Genau [6] and Chaudhary and Dewan [7] suggest undoing any operation in the history list simply by executing its inverse, provided the inverse is executable in the current state. <p> Note that one of the possible results is different from 6, the initial size of the circle. The framework and algorithms described in this paper are more general and take into account the possibilities of conflicts and dependencies among operations. Abowd and Dix <ref> [1] </ref> recognize the need to deal with dependencies among users' operations and suggest a basic framework similar to that described in this paper for dealing with dependencies. The focus in their work has been on trying to understand formally the behavior desired of undo in a group environment. <p> The answer to some extent depends on whether users expect to be able to undo the first set of modifications without being forced to undo the second set of modifications. Abowd and Dix <ref> [1] </ref> explored this issue and recommended the design principle that the system should not prevent users from undoing operations if they can achieve the same effect through normal editing.
Reference: [2] <author> S.R. Ahuja, J.R. Ensor, D.N. Horn, and S.E. Lucco. </author> <title> The Rapport Multimedia Conferencing System: A Software Overview. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 52-58, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work, or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [2, 3, 11, 25, 36] </ref>. An undo facility can be important in groupware systems for several reasons. Groupware systems, whether used by an individual or by a group, should provide abilities, including undo, comparable to similar single-user tools.
Reference: [3] <author> V. Anupam and C. Bajaj. Shastra: </author> <title> Multimedia collaborative design environment. </title> <journal> IEEE Multimedia, </journal> <volume> 1(2) </volume> <pages> 39-49, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work, or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [2, 3, 11, 25, 36] </ref>. An undo facility can be important in groupware systems for several reasons. Groupware systems, whether used by an individual or by a group, should provide abilities, including undo, comparable to similar single-user tools.
Reference: [4] <author> J.E. Archer and R. Conway. </author> <title> COPE: A cooperative programming environment. </title> <type> Technical Report TR-81-459, </type> <institution> Cornell University, </institution> <month> June </month> <year> 1981. </year>
Reference-contexts: Usually the redo of the last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 2.2 Linear undo model and US&R model The Interlisp system [38], COPE <ref> [4] </ref>, and Aloe [24] are examples of systems that use the linear undo model. The linear undo model allows the undoing of a sequence of operations by using a pointer that tracks the next operation to be undone. Operations can then be redone, after possibly doing some new operations.
Reference: [5] <author> R.M. Baecker, D. Nastos, I.R. Posner, and K.L. Mawby. </author> <title> The user-centered iterative design of collaborative software. </title> <booktitle> In INTERCHI'93 Conference Proceedings, </booktitle> <pages> pages 399-405. </pages> <publisher> Addison-Wesley, </publisher> <year> 1993. </year> <month> 29 </month>
Reference-contexts: The framework is quite general, being applicable to a variety of documents types, such as text, graphics, and multimedia. The proposed techniques have been incorporated into DistEdit [21, 22], a group text-editor toolkit, and into a version of SASSE <ref> [5] </ref>, a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper [32]. This paper makes several additional contributions. First, it includes a detailed discussion of properties that editing operations should satisfy in order to help provide correct undo behavior to users. <p> It would be desirable to ensure that a group editor's undo is as efficient when the editor is used with only one user editing, as is often the case in practice <ref> [5, 29] </ref>. The selective undo algorithm, as described above, is O (n 2 ) for single-user history undo.
Reference: [6] <author> T. Berlage and A. Genau. </author> <title> A framework for shared applications with a replicated architecture. </title> <booktitle> In Proc. of the ACM Symposium on User Interface Software and Technology, </booktitle> <year> 1993. </year>
Reference-contexts: Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage and Genau <ref> [6] </ref>, Chaudhary and Dewan [7], and Abowd and Dix [1]. We provide a comparison with these schemes below. Berlage and Genau [6] and Chaudhary and Dewan [7] suggest undoing any operation in the history list simply by executing its inverse, provided the inverse is executable in the current state. <p> Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage and Genau <ref> [6] </ref>, Chaudhary and Dewan [7], and Abowd and Dix [1]. We provide a comparison with these schemes below. Berlage and Genau [6] and Chaudhary and Dewan [7] suggest undoing any operation in the history list simply by executing its inverse, provided the inverse is executable in the current state.
Reference: [7] <author> R. Chaudhary and P. Dewan. </author> <title> Multi-user undo/redo. </title> <type> Technical Report Technical Report TR125P, </type> <institution> Computer Science Department, Purdue University, </institution> <year> 1992. </year>
Reference-contexts: Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage and Genau [6], Chaudhary and Dewan <ref> [7] </ref>, and Abowd and Dix [1]. We provide a comparison with these schemes below. Berlage and Genau [6] and Chaudhary and Dewan [7] suggest undoing any operation in the history list simply by executing its inverse, provided the inverse is executable in the current state. <p> Independently and about the same time as our work [32, 33], undo schemes for collaborative systems were proposed by Berlage and Genau [6], Chaudhary and Dewan <ref> [7] </ref>, and Abowd and Dix [1]. We provide a comparison with these schemes below. Berlage and Genau [6] and Chaudhary and Dewan [7] suggest undoing any operation in the history list simply by executing its inverse, provided the inverse is executable in the current state.
Reference: [8] <author> W.D. Elliott, W.A. Potas, and A. Van Dam. </author> <title> Computer assisted tracing of text evolution. </title> <booktitle> In Proceedings of AFIPS Fall Joint Computer Conference, </booktitle> <pages> pages 533-540, </pages> <year> 1971. </year>
Reference-contexts: More systematic studies will be useful, particularly for determining good user interfaces for dealing with conflicts. History lists have previously been applied to uses other than undo, such as to see a trace of the evolution of text <ref> [8] </ref>. The mechanisms for transposing operations provided in the selective undo framework could be useful for providing a selective evolution of the text, for instance seeing the evolution history of a particular section of the document. In the future, we plan to explore other applications of the framework.
Reference: [9] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Design and use of a group editor. </title> <editor> In G. Cockton, editor, </editor> <booktitle> Engineering for Human-Computer Interaction, </booktitle> <pages> pages 13-25. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: In this case, there are dependencies between the changes which need to be taken into account during an undo. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove <ref> [9] </ref>, ShrEdit [26], CES [17], and MACE [28]. None, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do support undo usually only provide a global undo facility rather than a per-user undo facility.
Reference: [10] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings of the ACM SIGMOD '89 Conference on Management of Data, </booktitle> <pages> pages 399-407. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: Mechanisms for reordering two parallel, independent operations are also needed because the order in which the two operations will be executed may be unpredictable <ref> [10] </ref>. The editor must be prepared to accept the two operations in either order with the same resulting effect. <p> We use the conflict model to provide safe undo of operations. The concept of reordering or transforming operations has been also used in groupware systems to ensure consistency of replicated document state when operations are done locally first and then broadcast <ref> [10] </ref>. The transformations in [10] take two parallel operations, say A and B, and determine the operation to execute if one of them has already been executed. Our Transpose function, in contrast, transforms one ordering of operations into another, equivalent, ordering. <p> We use the conflict model to provide safe undo of operations. The concept of reordering or transforming operations has been also used in groupware systems to ensure consistency of replicated document state when operations are done locally first and then broadcast <ref> [10] </ref>. The transformations in [10] take two parallel operations, say A and B, and determine the operation to execute if one of them has already been executed. Our Transpose function, in contrast, transforms one ordering of operations into another, equivalent, ordering.
Reference: [11] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <volume> 34(1) </volume> <pages> 38-58, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work, or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [2, 3, 11, 25, 36] </ref>. An undo facility can be important in groupware systems for several reasons. Groupware systems, whether used by an individual or by a group, should provide abilities, including undo, comparable to similar single-user tools.
Reference: [12] <author> K.P. Eswaran, J.N. Gray, R.A. Lorie, </author> <title> and I.L. Traiger. The notions of consistency and predicate locks in a relational database system. </title> <journal> Communications of the ACM, </journal> <volume> 8(11) </volume> <pages> 624-633, </pages> <year> 1976. </year>
Reference-contexts: objects is desired in a graphical editor, then additional operations, which use relative coordinates, should be provided so that they can be correctly transposed. 4.4 Discussion of the model The notion of conflict in our model has similarities to the notion of conflict used in concurrency theory of database transactions <ref> [12, 30, 31, 37] </ref> in that we also define conflict in terms of the ability to reorder operations. One difference is that we allow for operations to be modified when reordering them; in current database theory, operations are not modified when they are reordered.
Reference: [13] <author> R. Fish, R. Kraut, M. Leland, and M. Cohen. Quilt: </author> <title> A collaborative tool for cooperative writing. </title> <booktitle> In Proceedings of ACM SIGOIS Conference, </booktitle> <pages> pages 30-37, </pages> <year> 1988. </year>
Reference-contexts: Third, it addresses design and efficiency issues that occur in implementing the framework. Finally, it includes our experience in using the proposed undo facilities 2 in the DistEdit toolkit. Several groupware applications, such as Quilt <ref> [13] </ref> and Prep [27], support asynchronous sharing, where group members work on a shared document at different times.
Reference: [14] <author> J.D. Foley and V.L. Wallace. </author> <title> The art of natural graphical man-machine conversion. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 62(4) </volume> <pages> 4622-471, </pages> <month> April </month> <year> 1974. </year>
Reference-contexts: 1 Introduction The ability to undo operations is a standard and useful feature in most interactive single-user applications. For instance, the availability of an undo facility in editors is useful for reversing erroneous actions [19]. It can also help reduce user frustration with new systems <ref> [14] </ref>, particularly if those systems allow users to invoke commands that can modify system state in complex ways.
Reference: [15] <author> R.F. Gordon, G.B. Leeman, and C.H. Lewis. </author> <title> Concepts and implications of undo for interactive recovery. </title> <booktitle> In Proceedings of the 1985 ACM Annual Conference, </booktitle> <pages> pages 150-157. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: In general, the inverse of an operation A may depend on state of the document prior to A <ref> [15] </ref>. For example, on a text document, if a DelChar (10) operation is done, which deletes the character at position 10, then in order to determine its inverse, we must know the character that was deleted.
Reference: [16] <editor> J.N. Gray. </editor> <booktitle> Notes on Database Operating Systems, </booktitle> <pages> pages 394-481. </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: This complicates the design of undo algorithms because dependencies between the operation being undone and later operations can arise. Furthermore, databases typically use a checkpoint and recovery strategy for aborting transactions and for dealing with failures <ref> [16] </ref>.
Reference: [17] <author> I. Grief, R. Seliger, and W. Weihl. </author> <title> Atomic data abstractions in a distributed collaborative editing system. </title> <booktitle> In Proc. of the 13th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 160-172, </pages> <year> 1976. </year>
Reference-contexts: In this case, there are dependencies between the changes which need to be taken into account during an undo. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove [9], ShrEdit [26], CES <ref> [17] </ref>, and MACE [28]. None, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do support undo usually only provide a global undo facility rather than a per-user undo facility.
Reference: [18] <author> M. Hammer, R. Ilson, T. Anderson, E. Gilbert, M. Good, B. Niamir, L. Rosenstein, and S. Schoichet. </author> <title> The implementation of Etude, an integrated and interactive document production system. </title> <booktitle> In Proceedings of the ACM SIGPLAN/SIGOA Conference on Text Manipulation, </booktitle> <pages> pages 137-146. </pages> <publisher> ACM, </publisher> <address> New York, </address> <month> June </month> <year> 1981. </year>
Reference-contexts: We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step undo Several early editors, including Lampson's Bravo for the Alto [23] and Hammer et al's ETUDE editor/formatter <ref> [18] </ref>, provided single-step undo. Single-step undo is also available in many current 3 systems, including most Macintosh and Windows applications, as well as editors such as vi. Single--step undo allows undo of only the last operation.
Reference: [19] <author> W.J. Hansen. </author> <title> User engineering principles for interactive systems. </title> <booktitle> In AFIPS Conference Pro-cessings, </booktitle> <volume> volume 39, </volume> <pages> pages 523-532. </pages> <publisher> AFIPS Press, </publisher> <year> 1971. </year>
Reference-contexts: 1 Introduction The ability to undo operations is a standard and useful feature in most interactive single-user applications. For instance, the availability of an undo facility in editors is useful for reversing erroneous actions <ref> [19] </ref>. It can also help reduce user frustration with new systems [14], particularly if those systems allow users to invoke commands that can modify system state in complex ways.
Reference: [20] <author> A. Karsenty and M. Beaudouin-Lafon. </author> <title> An algorithm for distributed groupware applications. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 195-202. </pages> <publisher> IEEE Press, </publisher> <year> 1993. </year>
Reference-contexts: For instance, Karesenty and Beaudouin-Lafon <ref> [20] </ref> describe an algorithm that uses the undo/redo capability to ensure consistency among replicated copies of a document during group editing. The following example illustrates the use of undo/redo in their scheme.
Reference: [21] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year> <month> 30 </month>
Reference-contexts: This paper presents a framework for implementing undo in groupware applications that addresses the above-mentioned technical issues. The framework is quite general, being applicable to a variety of documents types, such as text, graphics, and multimedia. The proposed techniques have been incorporated into DistEdit <ref> [21, 22] </ref>, a group text-editor toolkit, and into a version of SASSE [5], a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper [32]. This paper makes several additional contributions.
Reference: [22] <author> M. Knister and A. Prakash. </author> <title> Issues in the design of a toolkit for supporting multiple group editors. </title> <journal> Computing Systems The Journal of the Usenix Association, </journal> <volume> 6(2) </volume> <pages> 135-166, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: This paper presents a framework for implementing undo in groupware applications that addresses the above-mentioned technical issues. The framework is quite general, being applicable to a variety of documents types, such as text, graphics, and multimedia. The proposed techniques have been incorporated into DistEdit <ref> [21, 22] </ref>, a group text-editor toolkit, and into a version of SASSE [5], a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper [32]. This paper makes several additional contributions. <p> For instance, if two users are working simultaneously in a document, dependence checking may involve making sure that their changes do not overlap, e.g., through the use of locks <ref> [22] </ref>. Mechanisms for reordering two parallel, independent operations are also needed because the order in which the two operations will be executed may be unpredictable [10]. The editor must be prepared to accept the two operations in either order with the same resulting effect. <p> The positions in the list are updated as insertions or deletions occur, so as to reflect the positions of locators in the current state 4 . This method is similar to that used for maintaining markers in Emacs [35] and positions of locks in DistEdit <ref> [22] </ref>. Another method to determine the ordering among locators is to do so by using the information on the history list, and only when needed. The history list contains all the information needed to determine the ordering between two locators.
Reference: [23] <author> B.W. Lampson. </author> <title> Bravo Manual. In Alto User's Handbook. </title> <institution> Xerox Palo Alto Research Center, </institution> <year> 1978. </year>
Reference-contexts: A more detailed discussion of these techniques can be found in [39], and one formalization of undo and redo facilities can be found in [41]. We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step undo Several early editors, including Lampson's Bravo for the Alto <ref> [23] </ref> and Hammer et al's ETUDE editor/formatter [18], provided single-step undo. Single-step undo is also available in many current 3 systems, including most Macintosh and Windows applications, as well as editors such as vi. Single--step undo allows undo of only the last operation.
Reference: [24] <author> C. </author> <title> Linxi and A.N. Habermann. A history mechanism and undo/redo/reuse support in ALOE. </title> <type> Technical Report Technical Report CMU-CS-86-148, </type> <institution> CS Department, Carnegie-Mellon University, </institution> <year> 1986. </year>
Reference-contexts: Usually the redo of the last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 2.2 Linear undo model and US&R model The Interlisp system [38], COPE [4], and Aloe <ref> [24] </ref> are examples of systems that use the linear undo model. The linear undo model allows the undoing of a sequence of operations by using a pointer that tracks the next operation to be undone. Operations can then be redone, after possibly doing some new operations.
Reference: [25] <author> M. Mantei. </author> <title> Capturing the capture lab concepts: A case study in the design of computer supported meeting environments. </title> <booktitle> In Proc. of the Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 257-270, </pages> <year> 1988. </year>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work, or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [2, 3, 11, 25, 36] </ref>. An undo facility can be important in groupware systems for several reasons. Groupware systems, whether used by an individual or by a group, should provide abilities, including undo, comparable to similar single-user tools.
Reference: [26] <author> L. McGuffin and G. M. Olson. ShrEdit: </author> <title> A shared electronic workspace. </title> <type> Technical Report CSMIL Technical Report No. 45, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, </address> <year> 1992. </year>
Reference-contexts: In this case, there are dependencies between the changes which need to be taken into account during an undo. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove [9], ShrEdit <ref> [26] </ref>, CES [17], and MACE [28]. None, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do support undo usually only provide a global undo facility rather than a per-user undo facility.
Reference: [27] <editor> C.M. Neuwirth, D.S. Kaufer, R. Chandhok, and J.H. Morris. </editor> <booktitle> Issues in the design of computer support for co-authoring and commenting. In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 183-195, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Third, it addresses design and efficiency issues that occur in implementing the framework. Finally, it includes our experience in using the proposed undo facilities 2 in the DistEdit toolkit. Several groupware applications, such as Quilt [13] and Prep <ref> [27] </ref>, support asynchronous sharing, where group members work on a shared document at different times.
Reference: [28] <author> R.E. Newman-Wolfe and H. K. Pelimuhandiram. MACE: </author> <title> A fine-grained concurrent editor. </title> <booktitle> In Proceedings of the ACM/IEEE Conference on Organizational Computing Systems (COCS 91), </booktitle> <pages> pages 240-254, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: In this case, there are dependencies between the changes which need to be taken into account during an undo. Many groupware applications have been built that support multi-user work on a shared document, e.g, Grove [9], ShrEdit [26], CES [17], and MACE <ref> [28] </ref>. None, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do support undo usually only provide a global undo facility rather than a per-user undo facility. MACE [28] does support a simple form of per-user undo, allowing users to undo <p> a shared document, e.g, Grove [9], ShrEdit [26], CES [17], and MACE <ref> [28] </ref>. None, as far as we are aware, provide an undo facility that addresses all the above issues. Those applications that do support undo usually only provide a global undo facility rather than a per-user undo facility. MACE [28] does support a simple form of per-user undo, allowing users to undo their own modifications made to a section provided they acquire a lock on the section prior to making modifications and do not release the lock prior to the undo.
Reference: [29] <author> J.S. Olson, G.M. Olson, M. Storrtsten, and M. Carter. </author> <title> Groupware close up: A comparison of the group design process with and without a simple group editor. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 11(4) </volume> <pages> 321-348, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: It would be desirable to ensure that a group editor's undo is as efficient when the editor is used with only one user editing, as is often the case in practice <ref> [5, 29] </ref>. The selective undo algorithm, as described above, is O (n 2 ) for single-user history undo.
Reference: [30] <author> C.H. Papadimitriou. </author> <title> The serializability of concurrent database updates. </title> <journal> Journal of the ACM, </journal> <volume> 26(4) </volume> <pages> 631-653, </pages> <year> 1979. </year>
Reference-contexts: objects is desired in a graphical editor, then additional operations, which use relative coordinates, should be provided so that they can be correctly transposed. 4.4 Discussion of the model The notion of conflict in our model has similarities to the notion of conflict used in concurrency theory of database transactions <ref> [12, 30, 31, 37] </ref> in that we also define conflict in terms of the ability to reorder operations. One difference is that we allow for operations to be modified when reordering them; in current database theory, operations are not modified when they are reordered.
Reference: [31] <author> C.H. Papadimitriou. </author> <title> Database Concurrency Control. </title> <publisher> Computer Science Press, </publisher> <year> 1986. </year>
Reference-contexts: objects is desired in a graphical editor, then additional operations, which use relative coordinates, should be provided so that they can be correctly transposed. 4.4 Discussion of the model The notion of conflict in our model has similarities to the notion of conflict used in concurrency theory of database transactions <ref> [12, 30, 31, 37] </ref> in that we also define conflict in terms of the ability to reorder operations. One difference is that we allow for operations to be modified when reordering them; in current database theory, operations are not modified when they are reordered.
Reference: [32] <author> A. Prakash and M. Knister. </author> <title> Undoing actions in collaborative work. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 273-280, </pages> <address> Toronto, Canada, </address> <month> Oc-tober </month> <year> 1992. </year>
Reference-contexts: The proposed techniques have been incorporated into DistEdit [21, 22], a group text-editor toolkit, and into a version of SASSE [5], a group editor. The basic ideas of our undo framework were presented in an earlier version of this paper <ref> [32] </ref>. This paper makes several additional contributions. First, it includes a detailed discussion of properties that editing operations should satisfy in order to help provide correct undo behavior to users. Second, it includes a comparison with various group undo techniques that have been suggested recently. <p> In particular, support for undoing operations that were executed in the correct execution order is not provided. 2.6 Group-undo schemes There has been substantial interest in the design of undo facilities for groupware systems recently. Independently and about the same time as our work <ref> [32, 33] </ref>, undo schemes for collaborative systems were proposed by Berlage and Genau [6], Chaudhary and Dewan [7], and Abowd and Dix [1]. We provide a comparison with these schemes below.
Reference: [33] <author> A. Prakash and M. Knister. </author> <title> Undoing actions in collaborative work. </title> <type> Technical Report CSE-TR-125-92, </type> <institution> CSE Division, Department of EECS, The University of Michigan, </institution> <address> Ann Arbor, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: In particular, support for undoing operations that were executed in the correct execution order is not provided. 2.6 Group-undo schemes There has been substantial interest in the design of undo facilities for groupware systems recently. Independently and about the same time as our work <ref> [32, 33] </ref>, undo schemes for collaborative systems were proposed by Berlage and Genau [6], Chaudhary and Dewan [7], and Abowd and Dix [1]. We provide a comparison with these schemes below. <p> However, if multiple history lists are used, care must be taken to ensure that the history lists remain consistent with each other. For some tradeoffs in using a single history list versus using multiple history lists, see <ref> [33] </ref>. 5.1 Limited selective undo algorithm To demonstrate the principles of our undo technique, we first describe a limited version of the algorithm and present an example. <p> What should a user/system do when an undo command fails due to a conflict? We discuss two approaches to address the problem. The first approach is for the system to determine all the conflicting operations (using a conflict list generation algorithm, such as the one described in <ref> [33] </ref>) and to give the user the option to undo the requested operation, along with all the conflicting operations. How should the user be presented with such an option is an unexplored user interface design issue.
Reference: [34] <author> A. Prakash and M. Knister. </author> <title> Undoing actions in collaborative work: Framework and experience. </title> <type> Technical Report CSE-TR-196-94, </type> <institution> CSE Division, Department of EECS, The University of Michigan, </institution> <address> Ann Arbor, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Property 2 allows us to meaningfully undo A, leaving only the effect of B, by transposing them and executing A 0 . Properties 3, 4, and 5, in a careful design, should follow from Property 2 (see <ref> [34] </ref>). However, we state them because Properties 3, 4, and 5 can be checked formally for a given definition of the Transpose function. <p> This task is, in general, non-trivial and, as we did in the text-editing example, requires making assumptions about user's expectations from selective undo <ref> [34] </ref>. To further illustrate the point, consider the situation where one user modifies the abstract of a paper and another user, after reading the abstract, carries out a change elsewhere in the document.
Reference: [35] <author> R. Stallman. </author> <title> GNU Emacs Manual, </title> <year> 1985. </year>
Reference-contexts: Furthermore, the models do not address the issue that simply re-doing operations may lead to incorrect or unexpected results if an earlier operation is skipped. 2.3 History undo The history undo scheme, used in the Emacs editor <ref> [35] </ref>, also allows undoing of a sequence of operations, but, unlike the linear undo and the US&R schemes, it appends the inverse operations to the end of the history list. <p> The positions in the list are updated as insertions or deletions occur, so as to reflect the positions of locators in the current state 4 . This method is similar to that used for maintaining markers in Emacs <ref> [35] </ref> and positions of locks in DistEdit [22]. Another method to determine the ordering among locators is to do so by using the information on the history list, and only when needed. The history list contains all the information needed to determine the ordering between two locators.
Reference: [36] <author> M. Stefik, G. Foster, D.G. Bobrow, K. Kahn, S. Lanning, and L. Suchman. </author> <title> Beyond the Chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> Jan. </month> <year> 1987. </year> <month> 31 </month>
Reference-contexts: In recent years, there has been a growing interest in the area of computer-supported cooperative work, or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace <ref> [2, 3, 11, 25, 36] </ref>. An undo facility can be important in groupware systems for several reasons. Groupware systems, whether used by an individual or by a group, should provide abilities, including undo, comparable to similar single-user tools.
Reference: [37] <author> R.E. Sterns, </author> <title> P.M. Lewis II, and D.J. Rosenkrantz. Concurrency controls for database systems. </title> <booktitle> In Proceedings of the 17th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 19-32, </pages> <year> 1976. </year>
Reference-contexts: objects is desired in a graphical editor, then additional operations, which use relative coordinates, should be provided so that they can be correctly transposed. 4.4 Discussion of the model The notion of conflict in our model has similarities to the notion of conflict used in concurrency theory of database transactions <ref> [12, 30, 31, 37] </ref> in that we also define conflict in terms of the ability to reorder operations. One difference is that we allow for operations to be modified when reordering them; in current database theory, operations are not modified when they are reordered.
Reference: [38] <author> W. Teitelman. </author> <title> Interlisp Reference Manual. </title> <institution> Xerox Palo Alto Research Center, </institution> <year> 1978. </year>
Reference-contexts: Usually the redo of the last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 2.2 Linear undo model and US&R model The Interlisp system <ref> [38] </ref>, COPE [4], and Aloe [24] are examples of systems that use the linear undo model. The linear undo model allows the undoing of a sequence of operations by using a pointer that tracks the next operation to be undone.
Reference: [39] <author> H. Thimbleby. </author> <booktitle> User Interface Design, </booktitle> <pages> pages 261-286. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: The availability of undo can also encourage users to experiment, by acting not only a safety net but also by allowing users to try out different approaches to solving a problem via backtracking <ref> [39] </ref>. In recent years, there has been a growing interest in the area of computer-supported cooperative work, or groupware, the goal of which is to provide support for collaborative work among users in a shared workspace [2, 3, 11, 25, 36]. <p> For instance, the above operation might be stored as DelChar (10, c) on the history list, where c is the deleted character. Below, we summarize the primary methods for doing undo in single-user systems. A more detailed discussion of these techniques can be found in <ref> [39] </ref>, and one formalization of undo and redo facilities can be found in [41]. We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step undo Several early editors, including Lampson's Bravo for the Alto [23] and Hammer et al's ETUDE editor/formatter [18], provided single-step undo.
Reference: [40] <author> J.S. Vitter. US&R: </author> <title> A new framework for redoing. </title> <journal> IEEE Software, </journal> <pages> pages 39-52, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: Note that, in this model, inverse operations are not explicitly stored in the history list. Thus, reverting back to the original state (without the F ) is not possible. One could undo F , but then D and E must be done manually. The Undo, Skip, Redo (US&R) model <ref> [40] </ref> supports redo like the linear undo model but also allows skipping of some operations during the redo.
Reference: [41] <author> Y. Yang. </author> <title> A new conceptual model for interactive user recovery and and command reuse facilities. </title> <booktitle> In Proceedings of the CHI'88 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 165-170. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1988. </year> <month> 32 </month>
Reference-contexts: Below, we summarize the primary methods for doing undo in single-user systems. A more detailed discussion of these techniques can be found in [39], and one formalization of undo and redo facilities can be found in <ref> [41] </ref>. We also discuss undo techniques that have been proposed for groupware systems. 2.1 Single-step undo Several early editors, including Lampson's Bravo for the Alto [23] and Hammer et al's ETUDE editor/formatter [18], provided single-step undo.
References-found: 41

