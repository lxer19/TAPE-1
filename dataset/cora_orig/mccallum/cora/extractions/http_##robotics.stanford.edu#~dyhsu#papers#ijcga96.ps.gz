URL: http://robotics.stanford.edu/~dyhsu/papers/ijcga96.ps.gz
Refering-URL: http://robotics.stanford.edu/~dyhsu/publications.html
Root-URL: http://www.cs.stanford.edu
Email: fdyhsu, latombe, rajeevg@cs.stanford.edu  
Title: Path Planning in Expansive Configuration Spaces  
Author: David Hsu Jean-Claude Latombe Rajeev Motwani 
Note: Invited to the International Journal of Computational Geometry and Applications  
Address: Stanford, CA 94305  
Affiliation: Department of Computer Science Stanford University  
Abstract: We introduce the notion of expansiveness to characterize a family of robot configuration spaces whose connectivity can be effectively captured by a roadmap of randomly-sampled milestones. The analysis of expansive configuration spaces has inspired us to develop a new randomized planning algorithm. This new algorithm tries to sample only the portion of the configuration space that is relevant to the current query, avoiding the cost of precomputing a roadmap for the entire configuration space. Thus, it is well-suited for problems where only a single query is submitted for a given environment. The algorithm has been implemented and successfully applied to complex assembly maintainability problems from the automotive industry.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 113-120, </pages> <year> 1996. </year>
Reference-contexts: There are several different techniques for constructing roadmaps, including uniform sampling followed by local resampling in difficult regions [12], performing random reflections at the free space boundary [8], and sampling near the free space boundary <ref> [1] </ref>. These randomized planners have demonstrated good performance empirically, but are not complete. Some of them achieve the weaker notion of probabilistic completeness, i.e., they find a path with high probability whenever one exists. Note that if no path exists, the planner may never terminate. <p> In the n-D version of the example in Figure 4, the maximal clearance of a path going through the narrow passage is always w=2, for any value of k 2 <ref> [1; n 1] </ref>. The bound in Theorem 2 is always exponential in n, even if the passage is wide in most dimensions. Our new bound based on expansiveness yields a number of milestones that is only exponential in k. Significance of Theorem 1.
Reference: [2] <author> J. Barraquand, L. Kavraki, J.-C. Latombe, T.-Y. Li, R. Motwani, and P. Raghavan. </author> <title> A random sampling scheme for path planning. </title> <editor> In G. Giralt and G. Hirzinger, editors, </editor> <booktitle> Proc. of the 7th Int. Symp. on Robotics Research, </booktitle> <pages> pp. 249-264, </pages> <year> 1996. </year>
Reference-contexts: Recently randomization has been successfully exploited to provide an 1 efficient and general path-planning scheme for robots with many dofs <ref> [2] </ref>. The Randomized Path Planner (RPP) proposed in [3] searches for a path by following the negated gradient of an artificial potential field constructed over the configuration space and uses random walks to escape local minima of the potential function. <p> Note that if no path exists, the planner may never terminate. There have been several attempts to provide theoretical justification for the observed success of these planners. In [13], potential field planners are analyzed based on the study of Markov chains and diffusion processes. In <ref> [2] </ref>, an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists. <p> Therefore the number of milestones needed to build a good roadmap is exponential in k for this example. Comparison with path-clearance assumption. The following theorem gives another bound on the number of milestones needed, based on the path-clearance assumption <ref> [2] </ref>. Consider a free path between any two configurations q and q 0 in the same connected component of F . Let l be the length of the path and be its clearance, which is defined as its minimal distance to the boundary of F. <p> We assume that the configuration space is given implicitly by a function, clearance: C ! R, that maps a configuration q to the distance between the robot placed at q and the obstacles <ref> [2] </ref>. Expansion. We simultaneously build two trees T init = (V init ; E init ) and T goal = (V goal ; E goal ). <p> Collision checking is usually faster than distance computation. Implementing clearance by a collision checker reduces the time spent for each call. On the other hand, although distance computation takes longer to execute, it provides more information, which can be used to reduce the number of calls to clearance <ref> [2] </ref>. Our experience seems to indicate that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, for example, [6, 7, 16]. Checking straight-line connection.
Reference: [3] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> The Int. J. of Robotics Research, </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: Recently randomization has been successfully exploited to provide an 1 efficient and general path-planning scheme for robots with many dofs [2]. The Randomized Path Planner (RPP) proposed in <ref> [3] </ref> searches for a path by following the negated gradient of an artificial potential field constructed over the configuration space and uses random walks to escape local minima of the potential function.
Reference: [4] <author> D. Challou and M. Gini. </author> <title> Parallel robot motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 46-51, </pages> <year> 1993. </year>
Reference-contexts: It has been used in practice with good results, but there are several cases where RPP behaves poorly <ref> [4] </ref>. Usually this happens when the planner reaches a local minimum of the potential function, and the only way to escape the basin of attraction of this minimum is through a narrow passage between configuration space obstacles.
Reference: [5] <author> H. Chang and T.-Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: A good example of a single-query path planning problem is the assembly maintainability problem, where one must determine whether there exists a path to remove a part from an assembly for maintenance <ref> [5] </ref>. In this setting, although the free space may contain several connected components, at most two of them are relevant to the query being processed, and it is clearly undesirable to perform an expensive preprocessing step to construct a roadmap of the entire configuration space.
Reference: [6] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedure for computing distance between objects in three-dimensional space. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 4(2), </volume> <year> 1988. </year>
Reference-contexts: Our experience seems to indicate that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, for example, <ref> [6, 7, 16] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Suppose that clearance computes the distance between a robot and obstacles. Let p and q have clearance and , respectively.
Reference: [7] <author> S. Gottschalk, M. C. Lin, and D. Manocha. OBBtree: </author> <title> A hierarchical structure for rapid interference detection. </title> <booktitle> In SIGGRAPH '96 Proc., </booktitle> <year> 1996. </year>
Reference-contexts: Our experience seems to indicate that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, for example, <ref> [6, 7, 16] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Suppose that clearance computes the distance between a robot and obstacles. Let p and q have clearance and , respectively.
Reference: [8] <author> T. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion planning for many degrees of freedom random reflections at c-space obstacles. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3318-3323, </pages> <year> 1994. </year>
Reference-contexts: There are several different techniques for constructing roadmaps, including uniform sampling followed by local resampling in difficult regions [12], performing random reflections at the free space boundary <ref> [8] </ref>, and sampling near the free space boundary [1]. These randomized planners have demonstrated good performance empirically, but are not complete. Some of them achieve the weaker notion of probabilistic completeness, i.e., they find a path with high probability whenever one exists.
Reference: [9] <author> L. E. Kavraki. </author> <title> Random networks in configuration space for fast path planning. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1995. </year>
Reference-contexts: This planner is particularly suitable for problems where multiple path-planning queries have to be answered in the same static environment. It has been successfully tested on difficult problems involving examples of articulated robots with up to 12 dofs in both 2-D and 3-D environments <ref> [9] </ref>. There are several different techniques for constructing roadmaps, including uniform sampling followed by local resampling in difficult regions [12], performing random reflections at the free space boundary [8], and sampling near the free space boundary [1]. These randomized planners have demonstrated good performance empirically, but are not complete.
Reference: [10] <author> L. Kavraki and J.-C. Latombe. </author> <title> Randomized preprocessing of configurations space for fast path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 2138-2139, </pages> <year> 1994. </year>
Reference-contexts: Currently the roadmap planner samples the configuration uniformly at random from the configuration space in order to generate milestones. Typically most of the configurations picked (more than 99:5%) are in collision with obstacles <ref> [10] </ref> and discarded. It would be highly desirable to sample collision-free configurations more efficiently. One idea would be to sample uniformly a very small number of configurations from C and use the new planner to expand from these configurations in order to generate additional milestones.
Reference: [11] <author> L. Kavraki, J.-C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Randomized query processing in robot path planning. </title> <booktitle> In ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pp. 353-362, </pages> <year> 1995. </year>
Reference-contexts: In [2], an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists. A variant of the roadmap planner is described in <ref> [11] </ref>, and the connectivity property of the roadmaps that it produces is analyzed under the assumption that a free space is *-good, i.e., every free configuration "sees" a significant fraction of the free space. <p> Unlike <ref> [11] </ref>, there is no need for a complete planner here. Although the roadmap planner of [12] offers an efficient solution for multiple-query path planning problems, it is not suitable when only a single query is submitted for a given environment. <p> For brevity we will abbreviate the term "(*; ff; fi)-expansive" by "expansive". The first condition in Definition 2 guarantees every point in F sees at least an * fraction of the free space, a property of F that we called *-goodness in <ref> [11] </ref>. In the example of Figure 2, * 0:5. The second condition guarantees that every subset S F 0 has a relatively large lookout set. Think of S as the union of the visibility sets of a set of points M . <p> Second, the roadmap must correctly represent the connectivity of the free space, i.e., there should be a one-to-one correspondence between the connected components of the roadmap and those of F . 6 Adequate coverage of the free space was formally defined in <ref> [11] </ref> as follows: Definition 3 A set of milestones provides an adequate coverage for an *-good free space F if the volume of the subset of F not visible from any of these milestones is at most (*=2)(F ). <p> For an *-good free space F, each connected component of F has volume at least *(F ). If a set of milestones provides an adequate coverage of F, then each connected component of F contains at least one milestone. It is shown in <ref> [11] </ref> that uniform random sampling generates a set of milestones that provides an adequate coverage of F with high probability. <p> Theorem 1 established below states that with high probability no two connected components of R lie in the same connected component of F . Combined with the earlier result of <ref> [11] </ref>, Theorem 1 implies that with high probability, there is a one-to-one correspondence between the connected components of R and those of F . We begin our proof by defining the linking sequence of a point p 2 F (see Figure 3).
Reference: [12] <author> L. Kavraki, P. Svestka, J.-C. Latombe, and M. H. Overmars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration space. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <year> 1996. </year>
Reference-contexts: The probability that a random walk finds its way through such a narrow passage is extremely small. Another planner, described in <ref> [12] </ref>, uses random sampling to construct a probabilistic roadmap in the configuration space. It then tries to find a path between any two input configurations by connecting them to the roadmap. After paying a relatively high cost for building the roadmap, it answers queries very efficiently. <p> It has been successfully tested on difficult problems involving examples of articulated robots with up to 12 dofs in both 2-D and 3-D environments [9]. There are several different techniques for constructing roadmaps, including uniform sampling followed by local resampling in difficult regions <ref> [12] </ref>, performing random reflections at the free space boundary [8], and sampling near the free space boundary [1]. These randomized planners have demonstrated good performance empirically, but are not complete. <p> Unlike [11], there is no need for a complete planner here. Although the roadmap planner of <ref> [12] </ref> offers an efficient solution for multiple-query path planning problems, it is not suitable when only a single query is submitted for a given environment. <p> Once a path has been efficiently computed in the transformed space, an inverse transformation could be used to map the path into the original free space. We also plan to integrate the new planner with the roadmap planner of <ref> [12] </ref> for multiple-query path planning problems. Currently the roadmap planner samples the configuration uniformly at random from the configuration space in order to generate milestones. Typically most of the configurations picked (more than 99:5%) are in collision with obstacles [10] and discarded.
Reference: [13] <author> F. Lamiroux and J. P. Laumond. </author> <title> On the expected complexity of random path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3014-3019, </pages> <year> 1996. </year>
Reference-contexts: Some of them achieve the weaker notion of probabilistic completeness, i.e., they find a path with high probability whenever one exists. Note that if no path exists, the planner may never terminate. There have been several attempts to provide theoretical justification for the observed success of these planners. In <ref> [13] </ref>, potential field planners are analyzed based on the study of Markov chains and diffusion processes. In [2], an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists.
Reference: [14] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Path planning is an important problem in robotics <ref> [14] </ref>. It also has applications in many other fields, such as computer graphics, computer-aided design and manufacturing, and medical surgery. Given the geometry of a robot and obstacles, a planner is required to generate a collision-free path between an initial and a goal configuration. <p> Path smoothing. Usually the path generated by this planner has too many zig-zags, but it can be smoothed by a simple algorithm <ref> [14, page 248] </ref>. 3.3 Experimental Results The planner is implemented in C++. Measurements reported in this section are the average of five independent runs for each problem.
Reference: [15] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: The intuitive explanation for the success of this scheme is via an analogy to the rapid mixing property of random walks on expander graphs <ref> [15] </ref>. We have implemented an algorithm based on this scheme and tested it on assembly maintainability problems from the automotive industry. These problems contain complex CAD models that describe cluttered environments having up to 200,000 triangles. An example is shown in Figure 1. <p> Intuitively this implies that regions that contain few nodes will more likely be sampled. If the space is expansive, then it may be argued that the set of randomly sampled configurations indeed converges to the uniform distribution by drawing an analogy to rapidly mixing random walks on expander graphs <ref> [15, pages 143-155] </ref>. Connection. We now have two trees, T init and T goal . In the connection step, the planner tries to establish a path between q init and q goal . The algorithm is given below.
Reference: [16] <author> S. Quinlan. </author> <title> Efficient distance computation between non-convex objects. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3324-3329, </pages> <year> 1994. </year>
Reference-contexts: Our experience seems to indicate that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, for example, <ref> [6, 7, 16] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Suppose that clearance computes the distance between a robot and obstacles. Let p and q have clearance and , respectively.
Reference: [17] <author> J. H. Reif. </author> <title> Complexity of the mover's problem and generalizations. </title> <booktitle> In Proc. 20th IEEE Symp. on Foundations of Computer Science (FOCS), </booktitle> <pages> pp. 421-427, </pages> <year> 1979. </year>
Reference-contexts: Given the geometry of a robot and obstacles, a planner is required to generate a collision-free path between an initial and a goal configuration. This has been proven to be a hard problem <ref> [17] </ref>. There is strong evidence that a complete planner, i.e., a planner that finds a path whenever one exists and indicates that none exists otherwise, will take time exponential in the number of degrees of freedom (dof) of the robot.
Reference: [18] <author> K. Shoemake. </author> <title> Animating rotation with quaternion curves. </title> <booktitle> In Computer Graphics (SIGGRAPH '85 Proceedings), </booktitle> <volume> volume 19, </volume> <pages> pp. 245-254, </pages> <year> 1985. </year> <month> 24 </month>
Reference-contexts: Compared to other representations such as Euler angles or transformation matrix, unit quaternion best reveals the topology of the 3-D rotation space. Its advantages include low memory usage and robustness against floating point errors. Interpolating between two quaternions is also very easy <ref> [18] </ref>. Distance between two configurations. We have used two distance metrics in our algorithm, dist c and dist w .
References-found: 18

