URL: http://www.cs.toronto.edu/~kabanets/papers/depth-short.ps.gz
Refering-URL: http://www.cs.toronto.edu/~kabanets/Pubs.html
Root-URL: http://www.cs.toronto.edu
Title: Randomness and Complexity  
Author: Valentine Kabanets 
Date: December 15, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [ACR96] <author> A.E. Andreev, A.E.F. Clementi, and J.D.P. </author> <title> Rolim. Hitting sets derandomize BPP. </title> <booktitle> In Proc. 23 rd ICALP, </booktitle> <pages> pages 357-368, </pages> <year> 1996. </year>
Reference-contexts: In other words, H provides a set of witnesses for all small circuits with non-negligible acceptance probability. It is obvious that an *-HSG H : f0; 1g O (logn) ! f0; 1g n , for some * &lt; 1, can be used to derandomize RP. Andreev, Clementi, and Rolim <ref> [ACR96] </ref> showed how to use an (*=2)-HSG in constructing an *-discrepancy set for a given circuit C of size n, which yields BPP=P if an *-HSG exists. Another, more elegant, proof was given in [ACRT97].
Reference: [ACR97] <author> A.E. Andreev, A.E.F. Clementi, and J.D.P. </author> <title> Rolim. Worst-case hardness suffices for derandomization: A new method for hardness vs. randomness trade-offs. </title> <booktitle> In Proc. 24 th ICALP, </booktitle> <pages> pages 177-187, </pages> <year> 1997. </year>
Reference-contexts: By the results in [NW94] stated above, this would imply that BPP=P. Under a stronger worst-case hardness assumption, the equality between BPP and P is also shown in <ref> [ACR97] </ref>. As in [BFNW93], Impagliazzo and Wigderson [IW97] use random self-reducibility to obtain a boolean function in E with very mild average-case hardness from a boolean function in E that is hard in the worst case. <p> For f in PSPACE and some k, if every circuit of depth n * (for some constant * &gt; 0) fails to compute f on at least n k fraction of inputs, then RNC DSPACE (polylog). We should note that <ref> [ACR97] </ref> gives a worst-case circuit complexity condition under which BPNC=NC.
Reference: [ACRT97] <author> A.E. Andreev, A.E.F. Clementi, J.D.P. Rolim, and L. Trevisan. </author> <title> Weak random sources, hitting sets, and BPP simulations. </title> <journal> Electronic Journal ECCC, </journal> <volume> TR97-011, </volume> <year> 1997. </year>
Reference-contexts: Andreev, Clementi, and Rolim [ACR96] showed how to use an (*=2)-HSG in constructing an *-discrepancy set for a given circuit C of size n, which yields BPP=P if an *-HSG exists. Another, more elegant, proof was given in <ref> [ACRT97] </ref>. <p> Thus, the worst-case hardness assumption of [IW97], the existence of a quick pseudorandom generator from O (log n) bits to n bits, and the existence of an *-HSG are equivalent. Using the ideas in <ref> [ACRT97] </ref>, Cook, Kabanets, and Rackoff [CKR97] show that the existence of an *-promise-problem solver implies that BPP=P. <p> In the case of dispersers, however, we obtain a polytime simulation of RP for any weak random source X with H 1 (X) r fl for any fl &gt; 0 [SSZ95]. Andreev et al. <ref> [ACRT97] </ref> note that extractors are similar to pseudorandom generators, and dispersers to hitting set generators.
Reference: [AKL + 79] <author> R. Aleliunas, R.M. Karp, R.J. Lipton, L. Lovasz, and C. Rackoff. </author> <title> Random walks, universal traversal sequences, and the complexity of maze problems. </title> <booktitle> In Proc. 20 th FOCS, </booktitle> <pages> pages 218-223, </pages> <year> 1979. </year>
Reference-contexts: Nisan [Nis92b] shows how derandomization can help establish interesting time-space trade-offs. He considers the problem of undirected connectivity (i.e., the st-connectivity for undirected graphs) for which a polytime randomized Logspace algorithm is known <ref> [AKL + 79] </ref> (see [BCD + 89] for a zero-error version).
Reference: [AKS87] <author> M. Ajtai, J. Komlos, and E. Szemeredy. </author> <title> Deterministic simulation in LOGSPACE. </title> <booktitle> In Proc. 19 th STOC, </booktitle> <pages> pages 132-140, </pages> <year> 1987. </year>
Reference-contexts: These usually involve constructing a generator, i.e., a function mapping short strings to longer ones, whose output is as good as a completely random string for a given class of algorithms. For example, a pairwise-independent generator [CG89] and an expander-walk generator <ref> [AKS87, CW89, IZ89] </ref> are often used when the total independence of random strings is not necessary. In particular, they allow probability amplification, i.e., the amplification of the success probability of an algorithm, without a significant increase in the number of random bits. <p> This generator is a combination of a Nearly-Disjoint Subsets generator [Nis91, NW94] and an Expander-Walk generator <ref> [AKS87, CW89, IZ89] </ref>. As usual, we can then obtain from f n a boolean function g of about the same hardness (exponentially small advantage by exponentially large circuits) by applying the Goldreich-Levin Theorem.
Reference: [BCD + 89] <author> A. Borodin, S.A. Cook, P.W. Dymond, W.L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM J. on Computing, </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <year> 1989. </year>
Reference-contexts: Nisan [Nis92b] shows how derandomization can help establish interesting time-space trade-offs. He considers the problem of undirected connectivity (i.e., the st-connectivity for undirected graphs) for which a polytime randomized Logspace algorithm is known [AKL + 79] (see <ref> [BCD + 89] </ref> for a zero-error version).
Reference: [BF90] <author> D. Beaver and J. Feigenbaum. </author> <title> Hiding instances in multioracle queries. </title> <booktitle> In Proc. 7 th STACS, </booktitle> <pages> pages 37-48. </pages> <booktitle> Volume 415 of LNCS, </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: ! f0; 1g m , we define its worst-case circuit complexity S (f ) as the minimum size of a circuit computing f , i.e., S (f ) = minfjCj : C (x) = f (x) for each x 2 f0; 1g n g: Using the idea of random self-reducibility <ref> [BF90, Lip91] </ref>, Babai et al. [BFNW93] show that the existence of a boolean function f 2EXPTIME with S (f ) super-polynomial for all but finitely many n implies the existence of h 2EXPTIME such that, for some k and for each d, SUC n d (h) &lt; 1 n k for
Reference: [BFNW93] <author> L. Babai, L. Fortnow, N. Nisan, and A. Wigderson. </author> <title> BPP has subexponential time simulations unless EXPTIME has publishable proofs. </title> <journal> Complexity, </journal> <volume> 3 </volume> <pages> 307-318, </pages> <year> 1993. </year>
Reference-contexts: we define its worst-case circuit complexity S (f ) as the minimum size of a circuit computing f , i.e., S (f ) = minfjCj : C (x) = f (x) for each x 2 f0; 1g n g: Using the idea of random self-reducibility [BF90, Lip91], Babai et al. <ref> [BFNW93] </ref> show that the existence of a boolean function f 2EXPTIME with S (f ) super-polynomial for all but finitely many n implies the existence of h 2EXPTIME such that, for some k and for each d, SUC n d (h) &lt; 1 n k for all but finitely many n. <p> By the above, we would get that BPP can be simulated in sub-exponential time. It is also shown in <ref> [BFNW93] </ref> that if EH=E, then BPP=P; here EH denotes the exponential-time hierarchy defined as [ k&gt;0 E P k . <p> By the results in [NW94] stated above, this would imply that BPP=P. Under a stronger worst-case hardness assumption, the equality between BPP and P is also shown in [ACR97]. As in <ref> [BFNW93] </ref>, Impagliazzo and Wigderson [IW97] use random self-reducibility to obtain a boolean function in E with very mild average-case hardness from a boolean function in E that is hard in the worst case.
Reference: [BH89] <author> R. Boppana and R. </author> <title> Hirschfeld. Pseudo-random generators and complexity classes. </title> <editor> In S. Micali, editor, </editor> <booktitle> Advances in Computer Research, </booktitle> <pages> pages 1-26. </pages> <booktitle> Volume 5, </booktitle> <publisher> JAI Press, </publisher> <year> 1989. </year>
Reference-contexts: Building on work by Blum and Micali [BM84], Yao [Yao82] showed how to construct from any one-way permutation a pseudorandom generator, and how to use this generator for the deterministic simulation of any RP algorithm in sub-exponential time. Yao's idea was subsequently generalized in <ref> [BH89] </ref> where a similar result for BPP was proved. Theorem 3 ([Yao82, BH89]) If there exists a pseudorandom generator, then BPP " *&gt;0 DTIME (2 n * ): Proof (sketch).
Reference: [Blu86] <author> M. Blum. </author> <title> Independent unbiased coin flips from a correlated biased source: a finite state Markov chain. </title> <journal> Combinatorica, </journal> <volume> 6 </volume> <pages> 97-108, </pages> <year> 1986. </year>
Reference-contexts: Their construction uses the pseudorandom generators of [Nis92a], as well as pair-wise independent sampling. 5 Weak Random Sources and BPP Various models for somewhat random sources were considered by researchers. Von Neumann [vN51] showed how to extract perfect unbiased bits by using a coin with fixed bias. Blum <ref> [Blu86] </ref> proved that the same could be done using any finite state Markov chain with unknown transition probabilities.
Reference: [BM84] <author> M. Blum and S. Micali. </author> <title> How to generate cryptographically strong sequences of pseudorandom bits. </title> <journal> SIAM J. on Computing, </journal> <volume> 13 </volume> <pages> 850-864, </pages> <year> 1984. </year>
Reference-contexts: If n = l (n) and f is one-to-one, then it is called a one-way permutation. Building on work by Blum and Micali <ref> [BM84] </ref>, Yao [Yao82] showed how to construct from any one-way permutation a pseudorandom generator, and how to use this generator for the deterministic simulation of any RP algorithm in sub-exponential time. Yao's idea was subsequently generalized in [BH89] where a similar result for BPP was proved.
Reference: [CG88] <author> B. Chor and O. Goldreich. </author> <title> Unbiased bits from sources of weak randomness and probabilistic communication complexity. </title> <journal> SIAM J. on Computing, </journal> <volume> 17(2) </volume> <pages> 230-261, </pages> <year> 1988. </year>
Reference-contexts: Vazirani and Vazirani [VV85] proved that BPP can be efficiently simulated given a single semi-random source. Chor and Goldreich <ref> [CG88] </ref> generalized the definition of a semi-random source by introducing probability-bounded sources: for constants l and b, a source S is an (l; b)-source if, for every string ff and every l-bit string fi, the probability that the source will output fi as its next l bits given that it has
Reference: [CG89] <author> B. Chor and O. Goldreich. </author> <title> On the power of two-point based sampling. </title> <journal> J. of Complexity, </journal> <volume> 5 </volume> <pages> 96-106, </pages> <year> 1989. </year>
Reference-contexts: In this paper, we will focus on the latter, universal methods. These usually involve constructing a generator, i.e., a function mapping short strings to longer ones, whose output is as good as a completely random string for a given class of algorithms. For example, a pairwise-independent generator <ref> [CG89] </ref> and an expander-walk generator [AKS87, CW89, IZ89] are often used when the total independence of random strings is not necessary. In particular, they allow probability amplification, i.e., the amplification of the success probability of an algorithm, without a significant increase in the number of random bits.
Reference: [CKR] <author> S.A. Cook, V. Kabanets, and C. Rackoff. </author> <title> BPP vs. P secure against uniform adversary. </title> <note> in preparation. </note>
Reference-contexts: In <ref> [CKR] </ref>, a weaker version of the result in [IW97] is obtained in a certain uniform setting. 3 Circuit Estimators Derandomizing BPP Definition 10 For a boolean function f : f0; 1g n ! f0; 1g and some * 0, a set S f0; 1g n is an *-discrepancy set for f
Reference: [CKR97] <author> S.A. Cook, V. Kabanets, and C. Rackoff. </author> <title> Promise-problem solvers derandomize BPP. </title> <type> manuscript, </type> <month> December </month> <year> 1997. </year>
Reference-contexts: Thus, the worst-case hardness assumption of [IW97], the existence of a quick pseudorandom generator from O (log n) bits to n bits, and the existence of an *-HSG are equivalent. Using the ideas in [ACRT97], Cook, Kabanets, and Rackoff <ref> [CKR97] </ref> show that the existence of an *-promise-problem solver implies that BPP=P. <p> From the construction in <ref> [CKR97] </ref>, one also gets another, arguably simpler, proof that BPP2 P 2 [Sip83, Lau83]. In fact, the new proof can be viewed as a refinement of the ideas in [Lau83].
Reference: [CW89] <author> A. Cohen and A. Wigderson. Dispensers, </author> <title> deterministic amplification, and weak random sources. </title> <booktitle> In Proc. 30 th FOCS, </booktitle> <pages> pages 14-19, </pages> <year> 1989. </year> <month> 8 </month>
Reference-contexts: These usually involve constructing a generator, i.e., a function mapping short strings to longer ones, whose output is as good as a completely random string for a given class of algorithms. For example, a pairwise-independent generator [CG89] and an expander-walk generator <ref> [AKS87, CW89, IZ89] </ref> are often used when the total independence of random strings is not necessary. In particular, they allow probability amplification, i.e., the amplification of the success probability of an algorithm, without a significant increase in the number of random bits. <p> This generator is a combination of a Nearly-Disjoint Subsets generator [Nis91, NW94] and an Expander-Walk generator <ref> [AKS87, CW89, IZ89] </ref>. As usual, we can then obtain from f n a boolean function g of about the same hardness (exponentially small advantage by exponentially large circuits) by applying the Goldreich-Levin Theorem. <p> With current constructions of extractors, this is possible only for weak random sources X (producing r-bit strings) with H 1 (X) = (r) [Zuc96]; a quasi-polytime simulation of BPP is possible for X with any H 1 (X) [TS96]. On the other hand, RP can be simulated using dispersers <ref> [Sip88, CW89] </ref>, which are, generally, easier to construct than extractors.
Reference: [GL89] <author> O. Goldreich and L.A. Levin. </author> <title> A hard-core predicate for all one-way functions. </title> <booktitle> In Proc. 21 st STOC, </booktitle> <pages> pages 25-32, </pages> <year> 1989. </year>
Reference-contexts: As usual, we can then obtain from f n a boolean function g of about the same hardness (exponentially small advantage by exponentially large circuits) by applying the Goldreich-Levin Theorem. Theorem 9 (The Goldreich-Levin Theorem <ref> [GL89, Lev93] </ref>) For h : f0; 1g n ! f0; 1g n , define h GL : f0; 1g n fi f0; 1g n ! f0; 1g as h GL (x; y) = f (x) y, where x y denotes the inner product of vectors x and y.
Reference: [GNW95] <author> O. Goldreich, N. Nisan, and A. </author> <title> Wigderson. </title> <journal> On Yao's XOR-Lemma. Electronic Journal ECCC, </journal> <volume> TR95-050, </volume> <year> 1995. </year>
Reference-contexts: Amplifying the average hardness of this new function is then achieved through derandomizing Yao's XOR Lemma [Yao82] (see <ref> [Lev87, GNW95] </ref> for proofs). <p> Below we formulate the Direct-Product Lemma (DPL) which implies Yao's XOR Lemma (see <ref> [GNW95] </ref>). <p> Below we formulate the Direct-Product Lemma (DPL) which implies Yao's XOR Lemma (see [GNW95]). Lemma 8 (The Direct-Product Lemma <ref> [GNW95, IW97] </ref>) Let f : f0; 1g n ! f0; 1g be a boolean function, and let f k (x 1 ; : : : ; x k ) = (f (x 1 ); : : :; f (x k )) for x i 2 f0; 1g n , i 2
Reference: [Has86] <author> J. Hastad. </author> <title> Computational Limitations for Small Depth Circuits. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1986. </year>
Reference-contexts: To conclude the subsection, we state a result that does not depend on any unproven assumptions. Since the parity function is hard on average for constant-depth circuits <ref> [Has86] </ref>, one gets that BPAC 0 ; RAC 0 [ c DSPACE ((log n) c ) and BPAC 0 ; RAC 0 [ c DTIME (2 (logn) c ) [Nis91, NW94], where RAC 0 (BPAC 0 ) is the set of languages recognized by a uniform family of probabilistic constant-depth polysize
Reference: [HILL] <author> J. Hastad, R. Impagliazzo, L. Levin, and M. Luby. </author> <title> Construction of a pseudo-random generator from any one-way function. </title> <journal> SICOMP. </journal> <note> to appear. </note>
Reference-contexts: such a simulation is wrong for infinitely many n, then the BPP algorithm together with the inputs on which our simulation is wrong provides a (non-uniform) family of polysize circuits that distinguish the outputs of the pseudorandom generator from random, contrary to our assumption. fl Hastad, Impagliazzo, Levin, and Luby <ref> [HILL] </ref> show the existence of a one-way function to be equivalent to that of a pseudorandom generator, which gives a general complexity-theoretic assumption under which BPP can be simulated in sub-exponential time. 2.2 If E Requires Exponential-Size Circuits Nisan and Wigderson [NW94] propose a weaker definition of a pseudorandom generator which
Reference: [Imp95] <author> R. Impagliazzo. </author> <title> Hard-core distributions for somewhat hard problems. </title> <booktitle> In Proc. 36 th FOCS, </booktitle> <pages> pages 538-545, </pages> <year> 1995. </year>
Reference-contexts: Im-pagliazzo <ref> [Imp95] </ref> shows that using pairwise independent inputs is sufficient for a version of the DPL to hold. This, however, does not yield a (non-boolean) function with exponentially small success probability for exponentially large circuits, but rather a function with constant success probability.
Reference: [IW97] <author> R. Impagliazzo and A. Wigderson. </author> <title> P=BPP if E requires exponential circuits: Deran-domizing the XOR Lemma. </title> <booktitle> In Proc. 29 th STOC, </booktitle> <pages> pages 220-229, </pages> <year> 1997. </year>
Reference-contexts: By the above, we would get that BPP can be simulated in sub-exponential time. It is also shown in [BFNW93] that if EH=E, then BPP=P; here EH denotes the exponential-time hierarchy defined as [ k&gt;0 E P k . Impagliazzo and Wigderson <ref> [IW97] </ref> establish that the existence of a boolean function f : f0; 1g n ! f0; 1g in E with S (f ) = 2 *n , for some * &gt; 0, is equivalent to the existence of a boolean 3 function h : f0; 1g n ! f0; 1g in <p> By the results in [NW94] stated above, this would imply that BPP=P. Under a stronger worst-case hardness assumption, the equality between BPP and P is also shown in [ACR97]. As in [BFNW93], Impagliazzo and Wigderson <ref> [IW97] </ref> use random self-reducibility to obtain a boolean function in E with very mild average-case hardness from a boolean function in E that is hard in the worst case. <p> Below we formulate the Direct-Product Lemma (DPL) which implies Yao's XOR Lemma (see [GNW95]). Lemma 8 (The Direct-Product Lemma <ref> [GNW95, IW97] </ref>) Let f : f0; 1g n ! f0; 1g be a boolean function, and let f k (x 1 ; : : : ; x k ) = (f (x 1 ); : : :; f (x k )) for x i 2 f0; 1g n , i 2 <p> Im-pagliazzo [Imp95] shows that using pairwise independent inputs is sufficient for a version of the DPL to hold. This, however, does not yield a (non-boolean) function with exponentially small success probability for exponentially large circuits, but rather a function with constant success probability. The main technical result of <ref> [IW97] </ref> is the construction of a polytime generator G mapping O (n) bits to n 2 bits such that if a boolean function f 2E has SUC 2 *n (f ) fl for some constant fl &gt; 0, then SUC 2 * 0 n (f n ffi G) 2 * 00 <p> If SUC s (h) ffi, then ADV s 0 (h GL ) *, where s 0 = s ( * n ) O (1) and ffi = ( * It is an interesting problem to prove a result similar to that in <ref> [IW97] </ref>, but in the uniform setting; then one would hope to be able to use diagonalization in order to get an unconditional conclusion. In [CKR], a weaker version of the result in [IW97] is obtained in a certain uniform setting. 3 Circuit Estimators Derandomizing BPP Definition 10 For a boolean function <p> and ffi = ( * It is an interesting problem to prove a result similar to that in <ref> [IW97] </ref>, but in the uniform setting; then one would hope to be able to use diagonalization in order to get an unconditional conclusion. In [CKR], a weaker version of the result in [IW97] is obtained in a certain uniform setting. 3 Circuit Estimators Derandomizing BPP Definition 10 For a boolean function f : f0; 1g n ! f0; 1g and some * 0, a set S f0; 1g n is an *-discrepancy set for f if jPr x2f0;1g n [f (x) = 1] <p> worth noting that the existence of an *-HSG implies the existence of a boolean function f in E with S (f ) 2 * 0 n for some * 0 &gt; 0, and hence the existence of a quick pseudorandom generator from O (log n) bits to n bits by <ref> [IW97] </ref>. Thus, the worst-case hardness assumption of [IW97], the existence of a quick pseudorandom generator from O (log n) bits to n bits, and the existence of an *-HSG are equivalent. <p> *-HSG implies the existence of a boolean function f in E with S (f ) 2 * 0 n for some * 0 &gt; 0, and hence the existence of a quick pseudorandom generator from O (log n) bits to n bits by <ref> [IW97] </ref>. Thus, the worst-case hardness assumption of [IW97], the existence of a quick pseudorandom generator from O (log n) bits to n bits, and the existence of an *-HSG are equivalent. Using the ideas in [ACRT97], Cook, Kabanets, and Rackoff [CKR97] show that the existence of an *-promise-problem solver implies that BPP=P.
Reference: [IZ89] <author> R. Impagliazzo and D. Zuckerman. </author> <title> How to recycle random bits. </title> <booktitle> In Proc. 30 th FOCS, </booktitle> <pages> pages 248-253, </pages> <year> 1989. </year>
Reference-contexts: These usually involve constructing a generator, i.e., a function mapping short strings to longer ones, whose output is as good as a completely random string for a given class of algorithms. For example, a pairwise-independent generator [CG89] and an expander-walk generator <ref> [AKS87, CW89, IZ89] </ref> are often used when the total independence of random strings is not necessary. In particular, they allow probability amplification, i.e., the amplification of the success probability of an algorithm, without a significant increase in the number of random bits. <p> This generator is a combination of a Nearly-Disjoint Subsets generator [Nis91, NW94] and an Expander-Walk generator <ref> [AKS87, CW89, IZ89] </ref>. As usual, we can then obtain from f n a boolean function g of about the same hardness (exponentially small advantage by exponentially large circuits) by applying the Goldreich-Levin Theorem.
Reference: [Lau83] <author> C. Lautemann. </author> <title> BPP and the polynomial time hierarchy. </title> <journal> IPL, </journal> <volume> 17 </volume> <pages> 215-218, </pages> <year> 1983. </year>
Reference-contexts: From the construction in [CKR97], one also gets another, arguably simpler, proof that BPP2 P 2 <ref> [Sip83, Lau83] </ref>. In fact, the new proof can be viewed as a refinement of the ideas in [Lau83]. An important open problem is to show that BPP is below P 2 " P 2 = P NP or, even better, in NP. Finally, the following questions also seem worth studying. <p> From the construction in [CKR97], one also gets another, arguably simpler, proof that BPP2 P 2 [Sip83, Lau83]. In fact, the new proof can be viewed as a refinement of the ideas in <ref> [Lau83] </ref>. An important open problem is to show that BPP is below P 2 " P 2 = P NP or, even better, in NP. Finally, the following questions also seem worth studying.
Reference: [Lev87] <author> L.A. Levin. </author> <title> One-way functions and pseudorandom generators. </title> <journal> Combinatorica, </journal> <volume> 7(4) </volume> <pages> 357-363, </pages> <year> 1987. </year>
Reference-contexts: Amplifying the average hardness of this new function is then achieved through derandomizing Yao's XOR Lemma [Yao82] (see <ref> [Lev87, GNW95] </ref> for proofs).
Reference: [Lev93] <author> L. Levin. </author> <title> Randomness and non-determinism. </title> <journal> J. of Symbolic Logic, </journal> <volume> 58(3) </volume> <pages> 1102-1103, </pages> <year> 1993. </year>
Reference-contexts: As usual, we can then obtain from f n a boolean function g of about the same hardness (exponentially small advantage by exponentially large circuits) by applying the Goldreich-Levin Theorem. Theorem 9 (The Goldreich-Levin Theorem <ref> [GL89, Lev93] </ref>) For h : f0; 1g n ! f0; 1g n , define h GL : f0; 1g n fi f0; 1g n ! f0; 1g as h GL (x; y) = f (x) y, where x y denotes the inner product of vectors x and y.
Reference: [Lip91] <author> R. Lipton. </author> <title> New directions in testing. </title> <editor> In J. Feigenbaum and M. Merrit, editors, </editor> <booktitle> Distributed Computing and Cryptography, </booktitle> <pages> pages 191-202. </pages> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> Volume 2, </volume> <publisher> AMS, </publisher> <year> 1991. </year>
Reference-contexts: ! f0; 1g m , we define its worst-case circuit complexity S (f ) as the minimum size of a circuit computing f , i.e., S (f ) = minfjCj : C (x) = f (x) for each x 2 f0; 1g n g: Using the idea of random self-reducibility <ref> [BF90, Lip91] </ref>, Babai et al. [BFNW93] show that the existence of a boolean function f 2EXPTIME with S (f ) super-polynomial for all but finitely many n implies the existence of h 2EXPTIME such that, for some k and for each d, SUC n d (h) &lt; 1 n k for
Reference: [Lub96] <author> M. Luby. </author> <title> Pseudorandomness and Cryptographic Applications. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, N.J., </address> <year> 1996. </year>
Reference-contexts: It is a standard fact that the existence of a pseudorandom generator with l (n) = n + 1 is equivalent to that of a pseudorandom generator with l (n) = n c for any given c <ref> [Lub96] </ref>.
Reference: [MR95] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Although randomness has become an important resource in the design of algorithms <ref> [MR95] </ref>, it is not clear to what extent (if at all) the complexity of an algorithm can be reduced through its ability to flip coins.
Reference: [Nis91] <author> N. Nisan. </author> <title> Pseudo random bits for constant depth circuits. </title> <journal> Combinatorica, </journal> <volume> 11(1) </volume> <pages> 63-70, </pages> <year> 1991. </year>
Reference-contexts: This generator is a combination of a Nearly-Disjoint Subsets generator <ref> [Nis91, NW94] </ref> and an Expander-Walk generator [AKS87, CW89, IZ89]. As usual, we can then obtain from f n a boolean function g of about the same hardness (exponentially small advantage by exponentially large circuits) by applying the Goldreich-Levin Theorem. <p> Since the parity function is hard on average for constant-depth circuits [Has86], one gets that BPAC 0 ; RAC 0 [ c DSPACE ((log n) c ) and BPAC 0 ; RAC 0 [ c DTIME (2 (logn) c ) <ref> [Nis91, NW94] </ref>, where RAC 0 (BPAC 0 ) is the set of languages recognized by a uniform family of probabilistic constant-depth polysize circuits with one-sided (two-sided bounded away from 1/2) error. 4.2 Randomized Space-Bounded Turing Machines Ajtai, Komlos, and Szemeredi showed that any randomized space (S)-algorithm with one-sided error that uses
Reference: [Nis92a] <author> N. Nisan. </author> <title> Pseudorandom generators for space-bounded computation. </title> <journal> Combinatorica, </journal> <volume> 12(4) </volume> <pages> 449-461, </pages> <year> 1992. </year>
Reference-contexts: It turns out that all but O (log n) of O ((log n) 2 ) input bits of the pseudorandom generator from <ref> [Nis92a] </ref> can be fixed, efficiently in both time and space, so that the distribution determined by choosing the remaining O (log n) bits uniformly at random is as good as uniform with respect to a given polytime randomized Logspace machine. <p> Finally, we should mention that Nisan, Szemeredi, and Wigderson [NSW92] give a deterministic O ((log n) 1:5 )-space algorithm for undirected connectivity, thus showing that the space complexity given by Savitch's generic algorithm [Sav70] is not optimal for this problem. Their construction uses the pseudorandom generators of <ref> [Nis92a] </ref>, as well as pair-wise independent sampling. 5 Weak Random Sources and BPP Various models for somewhat random sources were considered by researchers. Von Neumann [vN51] showed how to extract perfect unbiased bits by using a coin with fixed bias.
Reference: [Nis92b] <author> N. Nisan. RLSC. </author> <booktitle> In Proc. 24 th STOC, </booktitle> <pages> pages 619-623, </pages> <year> 1992. </year>
Reference-contexts: The proof involves constructing a pseudorandom generator converting O (S) random bits to poly (S) bits that look random to any space (S)- computation; the generator runs in space O (S) and time poly (S). Nisan <ref> [Nis92b] </ref> shows how derandomization can help establish interesting time-space trade-offs. He considers the problem of undirected connectivity (i.e., the st-connectivity for undirected graphs) for which a polytime randomized Logspace algorithm is known [AKL + 79] (see [BCD + 89] for a zero-error version).
Reference: [Nis96] <author> N. Nisan. </author> <title> Extracting randomness: How and why. </title> <booktitle> In Proc. 11 th Conference on Computational Complexity, </booktitle> <pages> pages 44-58, </pages> <year> 1996. </year>
Reference-contexts: The result is the best possible since, by an information-theoretic argument, a black-box polytime simulation of RP (BPP) using a source with min-entropy r o (1) cannot be achieved. A good survey on extractors, dispersers, and weak random sources is <ref> [Nis96] </ref>. 7
Reference: [NSW92] <author> N. Nisan, E. Szemeredi, and A. Wigderson. </author> <title> Undirected connectivity in O(log 1:5 n) space. </title> <booktitle> In Proc. 33 rd FOCS, </booktitle> <pages> pages 24-29, </pages> <year> 1992. </year>
Reference-contexts: Finally, we should mention that Nisan, Szemeredi, and Wigderson <ref> [NSW92] </ref> give a deterministic O ((log n) 1:5 )-space algorithm for undirected connectivity, thus showing that the space complexity given by Savitch's generic algorithm [Sav70] is not optimal for this problem.
Reference: [NW94] <author> N. Nisan and A. Wigderson. </author> <title> Hardness vs. randomness. </title> <journal> JCSS, </journal> <volume> 49 </volume> <pages> 149-167, </pages> <year> 1994. </year> <month> 9 </month>
Reference-contexts: to our assumption. fl Hastad, Impagliazzo, Levin, and Luby [HILL] show the existence of a one-way function to be equivalent to that of a pseudorandom generator, which gives a general complexity-theoretic assumption under which BPP can be simulated in sub-exponential time. 2.2 If E Requires Exponential-Size Circuits Nisan and Wigderson <ref> [NW94] </ref> propose a weaker definition of a pseudorandom generator which is still sufficient for the purpose of derandomization. They allow their generator to run in time exponential in its input size, and the output of the generator should fool only circuits of size at most its output size. Definition 4 ([NW94]) <p> By the results in <ref> [NW94] </ref> stated above, this would imply that BPP=P. Under a stronger worst-case hardness assumption, the equality between BPP and P is also shown in [ACR97]. <p> This generator is a combination of a Nearly-Disjoint Subsets generator <ref> [Nis91, NW94] </ref> and an Expander-Walk generator [AKS87, CW89, IZ89]. As usual, we can then obtain from f n a boolean function g of about the same hardness (exponentially small advantage by exponentially large circuits) by applying the Goldreich-Levin Theorem. <p> is there a weaker complexity-theoretic assumption under which an *-PPS exists? Can anything weaker than a PPS be used to derandomize BPP (RP) constructively? How can we use the uniformity of BPP (RP)? 4 Derandomizing Restricted Classes of Algorithms 4.1 Randomized Circuits The construction of a quick pseudorandom generator in <ref> [NW94] </ref> is quite general in that it only depends on the existence of a function hard for the class that one wants to derandomize. Thus, the following theorem should not be surprising. Theorem 12 ([NW94]) If there exists a function f in PSPACE and a constant k such that every NC-circuit <p> To conclude the subsection, we state a result that does not depend on any unproven assumptions. Since the parity function is hard on average for constant-depth circuits [Has86], one gets that BPAC 0 ; RAC 0 [ c DSPACE ((log n) c ) and BPAC 0 ; RAC 0 <ref> [ c DTIME (2 (logn) c ) [Nis91, NW94] </ref>, where RAC 0 (BPAC 0 ) is the set of languages recognized by a uniform family of probabilistic constant-depth polysize circuits with one-sided (two-sided bounded away from 1/2) error. 4.2 Randomized Space-Bounded Turing Machines Ajtai, Komlos, and Szemeredi showed that any randomized <p> Since the parity function is hard on average for constant-depth circuits [Has86], one gets that BPAC 0 ; RAC 0 [ c DSPACE ((log n) c ) and BPAC 0 ; RAC 0 [ c DTIME (2 (logn) c ) <ref> [Nis91, NW94] </ref>, where RAC 0 (BPAC 0 ) is the set of languages recognized by a uniform family of probabilistic constant-depth polysize circuits with one-sided (two-sided bounded away from 1/2) error. 4.2 Randomized Space-Bounded Turing Machines Ajtai, Komlos, and Szemeredi showed that any randomized space (S)-algorithm with one-sided error that uses
Reference: [NZ96] <author> N. Nisan and D. Zuckerman. </author> <title> Randomness is linear in space. </title> <journal> JCSS, </journal> <volume> 52(1) </volume> <pages> 43-52, </pages> <year> 1996. </year> <note> preliminary version in Proc. 25 th STOC , 1993. </note>
Reference-contexts: This has been improved in <ref> [NZ96] </ref>: any randomized space (S)-algorithm with two-sided error that uses poly (S) random bits can be simulated in DSPACE (S), for S (n) log n. <p> It was also shown [Zuc96] that BPP can be simulated given such a source, provided the source has enough min-entropy. The simulation of BPP using a random source with high min-entropy is usually based on extractors <ref> [NZ96] </ref>, bipartite graphs that allow converting a "somewhat random" distribution into an almost uniform one, with the help of a small number of truly random bits.
Reference: [Sav70] <author> W.J. Savitch. </author> <title> Relationships between nondeterministic and deterministic space complexities. </title> <journal> JCSS, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: Finally, we should mention that Nisan, Szemeredi, and Wigderson [NSW92] give a deterministic O ((log n) 1:5 )-space algorithm for undirected connectivity, thus showing that the space complexity given by Savitch's generic algorithm <ref> [Sav70] </ref> is not optimal for this problem. Their construction uses the pseudorandom generators of [Nis92a], as well as pair-wise independent sampling. 5 Weak Random Sources and BPP Various models for somewhat random sources were considered by researchers.
Reference: [Sip83] <author> M. Sipser. </author> <title> A complexity theoretic approach to randomness. </title> <booktitle> In Proc. 15 th STOC, </booktitle> <pages> pages 330-335, </pages> <year> 1983. </year>
Reference-contexts: From the construction in [CKR97], one also gets another, arguably simpler, proof that BPP2 P 2 <ref> [Sip83, Lau83] </ref>. In fact, the new proof can be viewed as a refinement of the ideas in [Lau83]. An important open problem is to show that BPP is below P 2 " P 2 = P NP or, even better, in NP. Finally, the following questions also seem worth studying.
Reference: [Sip88] <author> M. Sipser. Expanders, </author> <title> randomness, or time versus space. </title> <journal> JCSS, </journal> <volume> 36 </volume> <pages> 379-383, </pages> <year> 1988. </year>
Reference-contexts: With current constructions of extractors, this is possible only for weak random sources X (producing r-bit strings) with H 1 (X) = (r) [Zuc96]; a quasi-polytime simulation of BPP is possible for X with any H 1 (X) [TS96]. On the other hand, RP can be simulated using dispersers <ref> [Sip88, CW89] </ref>, which are, generally, easier to construct than extractors.
Reference: [SSZ95] <author> M. Sacks, A. Srinivasan, and S. Zhou. </author> <title> Explicit dispersers with polylog degree. </title> <booktitle> In Proc. 27 th STOC, </booktitle> <pages> pages 479-488, </pages> <year> 1995. </year>
Reference-contexts: In the case of dispersers, however, we obtain a polytime simulation of RP for any weak random source X with H 1 (X) r fl for any fl &gt; 0 <ref> [SSZ95] </ref>. Andreev et al. [ACRT97] note that extractors are similar to pseudorandom generators, and dispersers to hitting set generators. <p> Combined with the efficient construction of dispersers <ref> [SSZ95] </ref>, this yields a polytime simulation of BPP using a weak random source X with H 1 (X) = r fl , for any fl &gt; 0.
Reference: [SV86] <author> M. Santha and U. Vazirani. </author> <title> Generating quasi-random sequences from semi-random sources. </title> <journal> JCSS, </journal> <volume> 33 </volume> <pages> 75-87, </pages> <year> 1986. </year>
Reference-contexts: Von Neumann [vN51] showed how to extract perfect unbiased bits by using a coin with fixed bias. Blum [Blu86] proved that the same could be done using any finite state Markov chain with unknown transition probabilities. Santha and Vazirani <ref> [SV86] </ref> noted that, rather than trying to generate from a weak random source a uniform distribution, we might as well settle for a distribution that is statistically close 6 to being uniform.
Reference: [TS96] <author> A. Ta-Shma. </author> <title> On extracting randomness from weak random sources. </title> <booktitle> In Proc. 28 th STOC, </booktitle> <pages> pages 276-285, </pages> <year> 1996. </year>
Reference-contexts: With current constructions of extractors, this is possible only for weak random sources X (producing r-bit strings) with H 1 (X) = (r) [Zuc96]; a quasi-polytime simulation of BPP is possible for X with any H 1 (X) <ref> [TS96] </ref>. On the other hand, RP can be simulated using dispersers [Sip88, CW89], which are, generally, easier to construct than extractors.
Reference: [vN51] <author> J. von Neumann. </author> <title> Various techniques used in connection with random digits (notes by G.E. Forsythe). </title> <journal> In Applied Math. </journal> <volume> Series Vol. 12, </volume> <pages> pages 36-38. </pages> <institution> National Bureau of Standards, </institution> <year> 1951. </year> <title> reprinted in von Neumann's Collected Works, </title> <journal> Vol. </journal> <volume> 5, </volume> <publisher> Pergamon Press, Elmsford, NY, </publisher> <pages> pages 768-770, </pages> <year> 1963. </year>
Reference-contexts: Their construction uses the pseudorandom generators of [Nis92a], as well as pair-wise independent sampling. 5 Weak Random Sources and BPP Various models for somewhat random sources were considered by researchers. Von Neumann <ref> [vN51] </ref> showed how to extract perfect unbiased bits by using a coin with fixed bias. Blum [Blu86] proved that the same could be done using any finite state Markov chain with unknown transition probabilities.
Reference: [VV85] <author> U.V. Vazirani and V.V. Vazirani. </author> <title> Random polynomial time is equal to slightly random polynomial time. </title> <booktitle> In Proc. 26 th FOCS, </booktitle> <pages> pages 417-428, </pages> <year> 1985. </year>
Reference-contexts: Vazirani and Vazirani <ref> [VV85] </ref> proved that BPP can be efficiently simulated given a single semi-random source.
Reference: [Yao82] <author> A.C. Yao. </author> <title> Theory and applications of trapdoor functions. </title> <booktitle> In Proc. 23 rd FOCS, </booktitle> <pages> pages 80-91, </pages> <year> 1982. </year>
Reference-contexts: If n = l (n) and f is one-to-one, then it is called a one-way permutation. Building on work by Blum and Micali [BM84], Yao <ref> [Yao82] </ref> showed how to construct from any one-way permutation a pseudorandom generator, and how to use this generator for the deterministic simulation of any RP algorithm in sub-exponential time. Yao's idea was subsequently generalized in [BH89] where a similar result for BPP was proved. <p> Amplifying the average hardness of this new function is then achieved through derandomizing Yao's XOR Lemma <ref> [Yao82] </ref> (see [Lev87, GNW95] for proofs).
Reference: [Zuc90] <author> D. Zuckerman. </author> <title> General weak random sources. </title> <booktitle> In Proc. 31 st FOCS, </booktitle> <pages> pages 534-543, </pages> <year> 1990. </year>
Reference-contexts: They showed that BPP can still be efficiently simulated using a single probability-bounded source. The most general model was proposed by Zuckerman <ref> [Zuc90] </ref>: a random source is simply required to have high min-entropy, where the min-entropy of a distribution X on r-bit strings is defined as H 1 (X) = min x2f0;1g rf log 2 Pr [X = x]g.
Reference: [Zuc96] <author> D. Zuckerman. </author> <title> Simulating BPP using a general weak random source. </title> <journal> Algorithmica, </journal> 16(4/5):367-391, 1996. preliminary version in Proc. <volume> 32 </volume> nd FOCS , 1991. 10 
Reference-contexts: The most general model was proposed by Zuckerman [Zuc90]: a random source is simply required to have high min-entropy, where the min-entropy of a distribution X on r-bit strings is defined as H 1 (X) = min x2f0;1g rf log 2 Pr [X = x]g. It was also shown <ref> [Zuc96] </ref> that BPP can be simulated given such a source, provided the source has enough min-entropy. <p> We obtain a polytime simulation of BPP if r=poly (m), d =poly (r), and each neighbor of a node in V can be computed in polytime. With current constructions of extractors, this is possible only for weak random sources X (producing r-bit strings) with H 1 (X) = (r) <ref> [Zuc96] </ref>; a quasi-polytime simulation of BPP is possible for X with any H 1 (X) [TS96]. On the other hand, RP can be simulated using dispersers [Sip88, CW89], which are, generally, easier to construct than extractors.
References-found: 47

