URL: http://www.cs.utexas.edu/users/hudson/ilps94.ps
Refering-URL: http://www.cs.utexas.edu/users/hudson/papers.html
Root-URL: 
Email: hudson@cs.utexas.edu  
Title: Signed Logic Programs  
Author: Hudson Turner 
Address: Austin, TX 78712 USA  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: In this paper we explore the notion of a "signing" of a logic program, in the framework of the answer set semantics. In particular, we generalize and extend the notion of a signing, and show that even for programs with classical negation and disjunction the existence of a signing is a simple syntactic criterion that can guarantee several different sorts of good behavior: consistency, coincidence of consequences under answer set and well-founded semantics, existence of "standard" answer sets expressible in terms of the well-founded model and a signing for the program, and a restricted monotonicity property. The key technical result in this paper is a theorem relating the consequences of a signed disjunctive program with classical negation to the consequences of the members of a closely related family of signed nondisjunc-tive programs. These nondisjunctive programs are the "covers" of the disjunctive program, where a cover is any program that can be obtained by removing all but one literal from the head of each rule in the disjunctive program. To illustrate the usefulness of these results, we apply them to a family of programs for reasoning about action. 
Abstract-found: 1
Intro-found: 1
Reference: [ Apt and Bezem, 1990 ] <author> Krzysztof Apt and Marc Bezem. </author> <title> Acyclic programs. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proceedings of the Seventh International Conference, </booktitle> <pages> pages 617-633, </pages> <year> 1990. </year>
Reference: [ Chen and Warren, 1993 ] <author> Weidong Chen and David S. Warren. </author> <title> Towards effective evaluation of general logic programs. </title> <type> Technical Report 93-CSE-11, </type> <institution> Southern Methodist University, </institution> <year> 1993. </year>
Reference-contexts: This is a special case of a more general result due to Dung [1992], who has shown that the answer set and well-founded semantics coincide for "bottom-stratified & top-strict" programs. Notice that this result shows that interpreters such as SLG <ref> [ Chen and Warren, 1993 ] </ref> , which compute the well-founded semantics, can also be used to compute the consequences of such programs under the answer set semantics. 1 4.
Reference: [ Denecker and DeSchreye, 1993 ] <author> Marc Denecker and Danny DeSchreye. </author> <title> Representing incomplete knowledge in abductive logic programming. </title> <booktitle> In Logic Programming: Proceedings of the 1993 International Symposium, </booktitle> <pages> pages 147-163, </pages> <year> 1993. </year>
Reference: [ Dung, 1992 ] <author> Phan Minh Dung. </author> <title> On the relations between stable and well-founded semantics of logic programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 105 </volume> <pages> 222-238, </pages> <year> 1992. </year>
Reference: [ Dung, 1993 ] <author> Phan Minh Dung. </author> <title> Representing actions in logic programming and its applications in database updates. </title> <editor> In David S. Warren, editor, </editor> <booktitle> Logic Programming: Proceedings of the Tenth International Conference, </booktitle> <pages> pages 7-25. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference: [ Fages, 1994 ] <author> Fran~cois Fages. </author> <title> Consistency of Clark's completion and existence of stable models. </title> <journal> Journal of Methods of Logic in Computer Science, </journal> <volume> 1(1) </volume> <pages> 51-60, </pages> <year> 1994. </year> <note> To appear. </note>
Reference: [ Gelfond and Lifschitz, 1990 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Logic programs with classical negation. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proceedings of the Seventh International Conference, </booktitle> <pages> pages 579-597, </pages> <year> 1990. </year> <title> 14 The underlying idea of this redefinition of order-consistency is already apparent in Kunen's [1989] use of signings in relation to "call-consistent" programs. He noticed, roughly speaking, that every call-consistent program (and thus every "strict" program) has signed parts, and he explained certain behaviors of those programs in terms of the behavior of their signed parts. </title> <type> 14 </type>
Reference-contexts: So we'll usually speak about head-consistent programs instead of programs without classical negation, and about head-consistent nondisjunctive programs instead of normal programs. 5 Nondisjunctive programs are also known as extended programs <ref> [ Gelfond and Lifschitz, 1990 ] </ref> . The objects we here call logic programs are also known as extended disjunctive programs [ Gelfond and Lifschitz, 1991 ] . 4 3 Signings Definition.
Reference: [ Gelfond and Lifschitz, 1991 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction In this paper we explore the notion of a "signing" of a logic program, in the framework of the answer set (or stable model) semantics <ref> [ Gelfond and Lifschitz, 1991 ] </ref> . In particular, we generalize and extend the notion of a signing, and show that even for programs with classical negation and disjunction the existence of a signing is a simple syntactic criterion that guarantees several different sorts of good behavior. <p> The objects we here call logic programs are also known as extended disjunctive programs <ref> [ Gelfond and Lifschitz, 1991 ] </ref> . 4 3 Signings Definition. Let P be a constraint-free program, with S a subset of L P such that no literal in S " Head (P ) appears complemented in Head (P ).
Reference: [ Gelfond and Lifschitz, 1993 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Representing action and change by logic programs. </title> <journal> The Journal of Logic Programming, </journal> <volume> 17 </volume> <pages> 301-322, </pages> <year> 1993. </year>
Reference: [ Gelfond et al., 1991 ] <author> Michael Gelfond, Vladimir Lifschitz, Halina Przymusinska, and Miroslaw Truszczynski. </author> <title> Disjunctive defaults. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Second International Conference, </booktitle> <pages> pages 230-237, </pages> <year> 1991. </year>
Reference-contexts: These nondisjunctive programs are the "covers" of the disjunctive program, where a cover is any program that can be obtained by removing all but one literal from the head of each rule in the disjunctive program. The notion of a cover was introduced in the paper "Disjunctive Defaults" <ref> [ Gelfond et al., 1991 ] </ref> in order to explore the possibility of reducing a "disjunctive default theory" to a family of (nondisjunctive) default theories. The authors showed by counterexample that in general this cannot be done in any straightforward manner.
Reference: [ Hanks and McDermott, 1987 ] <author> Steve Hanks and Drew McDermott. </author> <title> Nonmonotonic logic and temporal projection. </title> <journal> Artificial Intelligence, </journal> <volume> 33(3) </volume> <pages> 379-412, </pages> <year> 1987. </year>
Reference-contexts: We also indicate in part how properties related to signings can be of use in showing the translation correct. Full details are available in the longer version of the paper. We will consider yet another variant of the Yale Shooting domain <ref> [ Hanks and McDermott, 1987 ] </ref> , which can be called the "two-guns" domain. There is a pilgrim and a turkey. The pilgrim has two guns. Initially, the turkey is alive, but if the pilgrim fires a loaded gun, the turkey dies.
Reference: [ Holldobler and Thielscher, 1993 ] <author> Steffen Holldobler and Michael Thielscher. </author> <title> Actions and specificity. </title> <booktitle> In Logic Programming: Proceedings of the 1993 International Symposium, </booktitle> <pages> pages 164-180, </pages> <year> 1993. </year>
Reference-contexts: Subsequently, several sound and complete translations from A into variants of logic programming have been proposed. De-necker [1993] and Dung [1993] each define a version of abductive logic programming into which they specify a translation from A. A translation into "equational logic programming" has also been proposed <ref> [ Holldobler and Thielscher, 1993 ] </ref> . In the full version of this paper, we define a slight extension of A, called A d , and specify a sound and complete translation from A d into disjunctive logic programming with classical negation.
Reference: [ Kunen, 1989 ] <author> Kenneth Kunen. </author> <title> Signed data dependencies in logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 7(3) </volume> <pages> 231-245, </pages> <year> 1989. </year>
Reference: [ Lifschitz and Turner, 1994 ] <author> Vladimir Lifschitz and Hudson Turner. </author> <title> Splitting a logic program. </title> <booktitle> In Logic Programming: Proceedings of the Eleventh International Conference, </booktitle> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: We use our results on the properties of signed programs, along with the Splitting Sequence Theorem from <ref> [ Lifschitz and Turner, 1994 ] </ref> , to prove this translation sound and complete. Section 2 consists of preliminary definitions and observations, after which we define the notion of a signing and give some examples (Section 3), and characterize useful properties of nondisjunctive programs with signings (Section 4). <p> On the other hand, without going into details, we know that the consistency result for signed disjunctive programs with a head-consistent cover can be extended in another direction by use of the notion of "U -components" from <ref> [ Lifschitz and Turner, 1994 ] </ref> . More specifically, we can show that a disjunctive program P with a head-consistent cover is consistent whenever there is a "splitting sequence" U for P such that every U -component of P is a signed program. <p> Recall that one of the most general results on the consistency of nondisjunctive programs belongs to Fages [1994] who showed that 13 "order-consistent" normal programs have answer sets. In Section 5 of <ref> [ Lifschitz and Turner, 1994 ] </ref> , we show that a normal program is order-consistent if and only if it has a splitting sequence U such that all U -components are signed.
Reference: [ Lifschitz et al., 1993 ] <author> Vladimir Lifschitz, Norman McCain, and Hudson Turner. </author> <title> Reasoning about actions with SLG. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: Similarly, if S is a signing for a disjunctive program P with classical negation, then the consequences of P in the complement of S can be characterized in terms of a syntactically determined family of signed nondisjunctive programs with classical negation. (Theorem 2, Corollary 3.) 1 In <ref> [ Lifschitz et al., 1993 ] </ref> we show that SLG can also be used, under certain qualifications, to correctly compute the consequences of signed nondisjunctive programs with classical negation. 2 The definition of "local stratification" is due to Przymusinski [ 1988 ] .
Reference: [ Lifschitz, 1993 ] <author> Vladimir Lifschitz. </author> <title> Restricted monotonicity. </title> <booktitle> In Proc. AAAI-93, </booktitle> <pages> pages 432-437, </pages> <year> 1993. </year>
Reference-contexts: If h S (P ) h S (Q) and h S (Q) h S (P ), then Cn (P ) " S Cn (Q) " S. 11 The notion of restricted monotonicity is given a general definition in <ref> [ Lifschitz, 1993 ] </ref> . 12 As subsequent discussion will illustrate, this third condition makes the definition of the ordering for rules more general than that used in [ Turner, 1993 ] , even when we consider only nondisjunctive rules. 10 In the interest of simplicity, Theorem 4 is stated in
Reference: [ Pereira and Alferes, 1992 ] <author> Luis Pereira and Jose Alferes. </author> <title> Well-founded semantics for logic programs with explicit negation. </title> <booktitle> In Proceedings of the Tenth European Conference on Artificial Intelligence, </booktitle> <pages> pages 102-106, </pages> <year> 1992. </year>
Reference-contexts: Further work in this direction can be found in <ref> [ Pereira and Alferes, 1992 ] </ref> . 6 This theorem shows, for instance, that if a nondisjunctive program P with sign-ing S is consistent, then P has a "standard" answer set expressible in terms of WF ? (P ), WF &gt; (P ) and S.
Reference: [ Przymusinski, 1988 ] <author> Teodor Przymusinski. </author> <title> On the declarative semantics of deductive databases and logic programs. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 193-216. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference: [ Przymusinski, 1990 ] <author> Teodor Przymusinski. </author> <title> Extended stable semantics for normal and disjunctive programs. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proceedings of the Seventh International Conference, </booktitle> <pages> pages 459-477, </pages> <year> 1990. </year>
Reference: [ Tarski, 1955 ] <author> Alfred Tarski. </author> <title> A lattice-theoretical fixpoint theorem and its applications. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 5 </volume> <pages> 285-309, </pages> <year> 1955. </year>
Reference-contexts: It is easy to verify that P is anti-monotone. Consequently, 2 P is monotone. Because 2 P is monotone, we know by the Knaster-Tarski theorem <ref> [ Tarski, 1955 ] </ref> that 2 P has a least and a greatest fixpoint. Definition. Let P be a nondisjunctive program. By WF ? (P ) we denote the least fixpoint of 2 P , and by WF &gt; (P ) the greatest.
Reference: [ Turner, 1993 ] <author> Hudson Turner. </author> <title> A monotonicity theorem for extended logic programs. </title> <editor> In David S. Warren, editor, </editor> <booktitle> Logic Programming: Proceedings of the Tenth International Conference, </booktitle> <pages> pages 567-585. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: For Kunen, the notion was defined on the predicate dependency graph of a finite first-order program, so when Gelfond and Lifschitz [1993] recast the definition to apply directly to the rules of infinite propositional normal programs, the notion of a signing was made strictly more general. In <ref> [ Turner, 1993 ] </ref> the definition was extended to the class of nondisjunctive programs with classical negation. In this paper it is generalized slightly and further extended to apply to programs with disjunction as well as classical negation. <p> If S is a signing for a normal program P , then P has two "standard" answer sets that are expressible in terms of S and the well-founded model of P . <ref> [ Turner, 1993 ] </ref> 3. The consequences of a signed normal program under the answer set semantics coincide with its consequences under the well-founded semantics. <p> Notice that this result shows that interpreters such as SLG [ Chen and Warren, 1993 ] , which compute the well-founded semantics, can also be used to compute the consequences of such programs under the answer set semantics. 1 4. There is a monotonicity theorem for signed normal programs. <ref> [ Turner, 1993 ] </ref> In [ Turner, 1993 ] we showed that some of these results can be extended to nondis-junctive programs with classical negation. <p> There is a monotonicity theorem for signed normal programs. <ref> [ Turner, 1993 ] </ref> In [ Turner, 1993 ] we showed that some of these results can be extended to nondis-junctive programs with classical negation. In this paper we generalize these previous results slightly, and also extend them in various ways to signed programs with disjunction as well as classical negation. <p> If S is a signing for a consistent nondisjunctive program P with classical negation, then the consequences of P in the complement of S are also expressible in terms of a naive extension of the well-founded semantics. (Corollary 1.) This result corresponds to Lemma 8 of <ref> [ Turner, 1993 ] </ref> . <p> The consistency of locally stratified disjunctive programs without classical negation under the answer set semantics is clear from Przymusinski's similar result under the perfect model semantics. 3 This result is implicit in <ref> [ Turner, 1993 ] </ref> . 2 4. A generalization of the monotonicity theorem from [ Turner, 1993 ] applies to all signed programs. 4 (Theorem 4.) The key technical result in this paper is a theorem (Theorem 2) relating the consequences of a signed disjunctive program to the consequences of the <p> The consistency of locally stratified disjunctive programs without classical negation under the answer set semantics is clear from Przymusinski's similar result under the perfect model semantics. 3 This result is implicit in <ref> [ Turner, 1993 ] </ref> . 2 4. A generalization of the monotonicity theorem from [ Turner, 1993 ] applies to all signed programs. 4 (Theorem 4.) The key technical result in this paper is a theorem (Theorem 2) relating the consequences of a signed disjunctive program to the consequences of the members of a closely related family of signed nondisjunctive programs. <p> To specify a language L for logic programs, we can begin with a nonempty set of symbols called atoms. A literal of L is an atom of L possibly preceded by the classical negation symbol :. A rule in L is determined by three finite subsets of 4 In <ref> [ Turner, 1993 ] </ref> the monotonicity theorem is applied to nondisjunctive programs only, and even in this special case it is slightly less general than the monotonicity theorem in this paper. 3 the literals of L|the set of head literals, the set of positive subgoals and the set of negated subgoals. <p> Because of the second condition in the 6 Even in the special case of nondisjunctive programs, this definition is more general than the one proposed in <ref> [ Turner, 1993 ] </ref> . <p> In later discussion we will indicate why these asymmetries in the definition of a signing are necessary. 4 Signed Nondisjunctive Programs For the most part, the results in this section can also be found, in a slightly less general form, in <ref> [ Turner, 1993 ] </ref> , either explicitly or implicitly. Definition. Let P be a basic program. By ff (P ) we denote the least subset of L P that is closed under P . <p> is a consistent answer set for P or any cover of P , then there is a minimal element A 0 in hcandidates (P ); S i such that A 0 " S A " S. 9 6 Restricted Monotonicity Here we generalize and extend the restricted monotonicity theorem from <ref> [ Turner, 1993 ] </ref> . 11 A signing S for a program P is a subset of the literals in the language of P . <p> then Cn (P ) " S Cn (Q) " S. 11 The notion of restricted monotonicity is given a general definition in [ Lifschitz, 1993 ] . 12 As subsequent discussion will illustrate, this third condition makes the definition of the ordering for rules more general than that used in <ref> [ Turner, 1993 ] </ref> , even when we consider only nondisjunctive rules. 10 In the interest of simplicity, Theorem 4 is stated in terms of the consequences of signed programs; we also have the following stronger result in terms of answer sets. <p> Proof sketch (Theorem 5) : First, prove the theorem for the nondisjunctive case. (Roughly, follow the restricted monotonicity proof in <ref> [ Turner, 1993 ] </ref> , using the new definition of .) Second, show that for appropriate P and Q with signing S, for every cover Q 0 of Q there is a cover P 0 of P such that h S (P 0 ) h S (Q 0 ) and h
Reference: [ Van Gelder et al., 1990 ] <author> Allen Van Gelder, Kenneth Ross, and John Schlipf. </author> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of ACM, </journal> <pages> pages 221-230, </pages> <year> 1990. </year>
Reference-contexts: If P is a normal program, then these two sets | WF ? (P ) and WF &gt; (P ) | capture essential information about the well-founded semantics of P <ref> [ Van Gelder et al., 1990 ] </ref> .
References-found: 22

