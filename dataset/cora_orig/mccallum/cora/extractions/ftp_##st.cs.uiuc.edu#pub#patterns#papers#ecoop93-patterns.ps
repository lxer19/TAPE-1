URL: ftp://st.cs.uiuc.edu/pub/patterns/papers/ecoop93-patterns.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/patterns/papers/
Root-URL: http://www.cs.uiuc.edu
Phone: 2  3  
Title: Design Patterns: Abstraction and Reuse of Object-Oriented Design  
Author: Erich Gamma ? Richard Helm Ralph Johnson John Vlissides 
Address: 10725 N. De Anza Blvd., Cupertino, CA 95014-2000 USA  P.O. Box 704, Yorktown Heights, NY 10598 USA  1034 W. Springfield Ave., Urbana, IL 61801 USA  
Affiliation: 1 Taligent, Inc.  I.B.M. Thomas J. Watson Research Center  Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: We propose design patterns as a new mechanism for expressing object-oriented design experience. Design patterns identify, name, and abstract common themes in object-oriented design. They capture the intent behind a design by identifying objects, their collaborations, and the distribution of responsibilities. Design patterns play many roles in the object-oriented development process: they provide a common vocabulary for design, they reduce system complexity by naming and defining abstractions, they constitute a base of experience for building reusable software, and they act as building blocks from which more complex designs can be built. Design patterns can be considered reusable micro-architectures that contribute to an overall system architecture. We describe how to express and organize design patterns and introduce a catalog of design patterns. We also describe our experience in applying design patterns to the design of object-oriented systems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Adelson and Soloway E. </author> <title> The role of domain experience in software design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11(11) </volume> <pages> 1351-1360, </pages> <year> 1985. </year>
Reference-contexts: Studies of expert programmers for conventional languages, however, have shown that knowledge is not organized simply around syntax, but in larger conceptual structures such as algorithms, data structures and idioms <ref> [1, 7, 9, 27] </ref>, and plans that indicate steps necessary to fulfill a particular goal [26]. It is likely that designers do not think about the notation they are using for recording the design.
Reference: 2. <author> Christopher Alexander. </author> <title> The Timeless Way of Building. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Moreover, design patterns are usually independent of the implementation language. There has been interest recently within the object-oriented community [8] in pattern languages for the architecture of buildings and communities as advocated by Christopher Alexander in The Timeless Way of Building <ref> [2] </ref>. Alexander's patterns consist of three parts: A context that describes when a pattern is applicable. The problem (or "system of conflicting forces") that the pattern resolves in that context. A configuration that describes physical relationships that solve the problem.
Reference: 3. <editor> Association for Computing Machinery. </editor> <booktitle> Addendum to the Proceedings, Object-Oriented Programming Systems, Languages, and Applications Conference, </booktitle> <address> Phoenix, AZ, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Since then the work has been refined and extended based on our collective experience. Our thinking has also been influenced and inspired by discussions within the Architecture Handbook Workshops at recent OOPSLA conferences <ref> [3, 4] </ref>. This paper has two parts. The first introduces design patterns and explains techniques to describe them. Next we present a classification system that characterizes common aspects of patterns. This classification will serve to structure the catalog of patterns presented in the second part of this paper.
Reference: 4. <editor> Association for Computing Machinery. </editor> <booktitle> Addendum to the Proceedings, Object-Oriented Programming Systems, Languages, and Applications Conference, </booktitle> <address> Vancouver, British Columbia, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Since then the work has been refined and extended based on our collective experience. Our thinking has also been influenced and inspired by discussions within the Architecture Handbook Workshops at recent OOPSLA conferences <ref> [3, 4] </ref>. This paper has two parts. The first introduces design patterns and explains techniques to describe them. Next we present a classification system that characterizes common aspects of patterns. This classification will serve to structure the catalog of patterns presented in the second part of this paper.
Reference: 5. <author> Kent Beck and Ward Cunningham. </author> <title> A laboratory for teaching object-oriented thinking. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings, </booktitle> <pages> pages 1-6, </pages> <address> New Orleans, LA, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Applicability What are the situations in which the design pattern can be applied? What are examples of poor designs that the pattern can address? How can one recognize these situations? Participants Describe the classes and/or objects participating in the design pattern and their responsibilities us ing CRC conventions <ref> [5] </ref>. Collaborations Describe how the participants collaborate to carry out their responsibilities. Diagram A graphical representation of the pattern using a notation based on the Object Modeling Technique (OMT) [25], to which we have added method pseudo-code.
Reference: 6. <author> Peter Coad. </author> <title> Object-oriented patterns. </title> <journal> Communications of the ACM, </journal> <volume> 35(9) </volume> <pages> 152-159, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Johnson uses a pattern language to explain how to extend and customize the Hotdraw drawing editor framework. However, these patterns are not design patterns; they are more descriptions of how to reuse existing components and frameworks instead of rules for generating new designs. Coad's recent paper on object-oriented patterns <ref> [6] </ref> is also motivated by Alexander's work but is more closely related to our work. The paper has seven patterns: "Broadcast" is the same as Observer, but the other patterns are different from ours. In general, Coad's patterns seem to be more closely related to analysis than design.
Reference: 7. <author> James O. Coplien. </author> <title> Advanced C++ Programming Styles and Idioms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massechusetts, </address> <year> 1992. </year>
Reference-contexts: Studies of expert programmers for conventional languages, however, have shown that knowledge is not organized simply around syntax, but in larger conceptual structures such as algorithms, data structures and idioms <ref> [1, 7, 9, 27] </ref>, and plans that indicate steps necessary to fulfill a particular goal [26]. It is likely that designers do not think about the notation they are using for recording the design. <p> An important distinction between frameworks and design patterns is that frameworks are implemented in a programming language. Our patterns are ways of using a programming language. In this sense frameworks are more concrete than design patterns. Design patterns are also related to the idioms introduced by Coplien <ref> [7] </ref>. These idioms are concrete design solutions in the context of C ++ . Coplien "focuses on idioms that make C ++ programs more expressive." In contrast, design patterns are more abstract and higher-level than idioms. Patterns try to abstract design rather than programming techniques.
Reference: 8. <author> Ward Cunningham and Kent Beck. </author> <title> Constructing abstractions for object-oriented applications. </title> <type> Technical Report CR-87-25, </type> <institution> Computer Research Laboratory, Tektronix, Inc., </institution> <year> 1987. </year>
Reference-contexts: Patterns try to abstract design rather than programming techniques. Moreover, design patterns are usually independent of the implementation language. There has been interest recently within the object-oriented community <ref> [8] </ref> in pattern languages for the architecture of buildings and communities as advocated by Christopher Alexander in The Timeless Way of Building [2]. Alexander's patterns consist of three parts: A context that describes when a pattern is applicable.
Reference: 9. <author> Bill Curtis. </author> <title> Cognitive issues in reusing software artifacts. </title> <editor> In Ted J. Biggerstaff and Alan J. Perlis, editors, </editor> <booktitle> Software Reusability, </booktitle> <volume> Volume II, </volume> <pages> pages 269-287. </pages> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Studies of expert programmers for conventional languages, however, have shown that knowledge is not organized simply around syntax, but in larger conceptual structures such as algorithms, data structures and idioms <ref> [1, 7, 9, 27] </ref>, and plans that indicate steps necessary to fulfill a particular goal [26]. It is likely that designers do not think about the notation they are using for recording the design.
Reference: 10. <author> Thomas Eggenschwiler and Erich Gamma. </author> <title> The ET++SwapsManager: Using object technology in the financial engineering domain. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings, </booktitle> <pages> pages 166-178, </pages> <address> Vancouver, British Columbia, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: For example, the Model-View-Controller (MVC) paradigm from Smalltalk [19] is a design structure that separates representation from presentation. MVC promotes flexibility in the choice of views, independent of the model. Abstract factories <ref> [10] </ref> hide concrete subclasses from the applications that use them so that class names are not hard-wired into an application. ? Work performed while at UBILAB, Union Bank of Switzerland, Zurich, Switzerland. To appear in ECOOP '93 Conference Proceedings, Springer-Verlag Lecture Notes in Computer Science. <p> Iterators may be replaced at run-time to provide alternative traversals. 4 Experience with Design Patterns We have applied design patterns to the design and construction of a several systems. We briefly describe two of these systems and our experience. 4.1 ET++SwapsManager The ET++SwapsManager <ref> [10] </ref> is a highly interactive tool that lets traders value, price, and perform what-if analyses for a financial instrument called a swap.
Reference: 11. <editor> Erich Gamma. Objektorientierte Software-Entwicklung am Beispiel von ET++: Design-Muster, Klassen-bibliothek, Werkzeuge. </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: This work has its roots in Gamma's thesis <ref> [11] </ref>, which abstracted design patterns from the ET++ framework. Since then the work has been refined and extended based on our collective experience. Our thinking has also been influenced and inspired by discussions within the Architecture Handbook Workshops at recent OOPSLA conferences [3, 4]. This paper has two parts.
Reference: 12. <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> A catalog of object-oriented design patterns. </title> <note> Technical Report in preparation, </note> <institution> IBM Research Division, </institution> <year> 1992. </year>
Reference-contexts: We discuss how design patterns impact object-oriented programming and design. We also review related work. The second part of this paper (the Appendix) describes our current catalog of design patterns. As we cannot include the complete catalog in this paper (it currently runs over 90 pages <ref> [12] </ref>), we give instead a brief summary and include a few abridged patterns. Each pattern in this catalog is representative of what we judge to be good object-oriented design. We have tried to reduce the subjectivity of this judgment by including only design patterns that have seen practical application. <p> We refer to this design activity as variation-oriented design and discuss it more fully in the catalog of patterns <ref> [12] </ref>. But some caveats are in order. Design patterns should not be applied indiscriminately. They typically achieve flexibility and variability by introducing additional levels of indirection and can therefore complicate a design. A design pattern should only be applied when the flexibility it affords is actually needed.
Reference: 13. <author> Mehdi T. Harandi and Frank H. Young. </author> <title> Software design using reusable algorithm abstraction. </title> <booktitle> In In Proc. 2nd IEEE/BCS Conf. on Software Engineering, </booktitle> <pages> pages 94-97, </pages> <year> 1985. </year>
Reference-contexts: Design patterns are finer-grained and therefore can be characterized as reusable micro-architectures. Most research into patterns in the software engineering community has been geared towards building knowledge-based assistants for automating the application of patterns for synthesis (that is, to write programs) and analysis (in debugging, for example) <ref> [13, 24] </ref>. The major difference between our work and that of the knowledge-based assistant community is that design patterns encode higher-level expertise. Their work has tended to focus on patterns like enumeration and selection, which can be expressed directly as reusable components in most existing object-oriented languages.
Reference: 14. <author> Richard Helm, Tien Huynh, Catherine Lassez, and Kim Marriott. </author> <title> A linear constraint technology for user interfaces. </title> <booktitle> In Graphics Interface, </booktitle> <pages> pages 301-309, </pages> <address> Vancouver, British Columbia, </address> <year> 1992. </year>
Reference-contexts: Patterns also proved helpful during development in design and code reviews. Patterns provided a common vocabulary to discuss a design. Whenever we encountered problems in the design, patterns helped us explore design alternatives and find solutions. 4.2 QOCA: A Constraint Solving Toolkit QOCA (Quadratic Optimization Constraint Architecture) <ref> [14, 15] </ref> is a new object-oriented constraint-solving toolkit developed at IBM Research. QOCA leverages recent results in symbolic computation and geometry to support efficient incremental and interactive constraint manipulation. QOCA's architecture is designed to be flexible.
Reference: 15. <author> Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides. </author> <title> An object-oriented architecture for constraint-based graphical editing. </title> <booktitle> In Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, </booktitle> <pages> pages 1-22, </pages> <address> Champery, Switzerland, </address> <month> October </month> <year> 1992. </year> <note> Also available as IBM Research Division Technical Report RC 18524 (79392). </note>
Reference-contexts: Good designers, it appears, rely on large amounts of design experience, and this experience is just as important as the notations for recording designs and the rules for using those notations. Our experience with the design of object-oriented systems and frameworks <ref> [15, 17, 22, 30, 31] </ref> bears out this observation. We have found that there exist idiomatic class and object structures that help make designs more flexible, reusable, and elegant. For example, the Model-View-Controller (MVC) paradigm from Smalltalk [19] is a design structure that separates representation from presentation. <p> As a simple example, consider using multiple inheritance to mix two or more classes into one. The result is an amalgam class that unites the semantics of the base classes. This trivial pattern is quite useful in making independently-developed class libraries work together <ref> [15] </ref>. Another example is the class-jurisdictional form of the Adapter pattern. In general, an Adapter makes one interface (the adaptee's) conform to another, thereby providing a uniform abstraction of different interfaces. A class Adapter accomplishes this by inheriting privately from an adaptee class. <p> Patterns also proved helpful during development in design and code reviews. Patterns provided a common vocabulary to discuss a design. Whenever we encountered problems in the design, patterns helped us explore design alternatives and find solutions. 4.2 QOCA: A Constraint Solving Toolkit QOCA (Quadratic Optimization Constraint Architecture) <ref> [14, 15] </ref> is a new object-oriented constraint-solving toolkit developed at IBM Research. QOCA leverages recent results in symbolic computation and geometry to support efficient incremental and interactive constraint manipulation. QOCA's architecture is designed to be flexible.
Reference: 16. <author> Ralph Johnson. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings, </booktitle> <pages> pages 63-76, </pages> <address> Vancouver, BC, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Or this may be simply because the problems encountered in software design are different from those found in architecture and are not amenable to solution by pattern languages. Recently, Johnson has advocated pattern languages to describe how to use use object-oriented frameworks <ref> [16] </ref>. Johnson uses a pattern language to explain how to extend and customize the Hotdraw drawing editor framework. However, these patterns are not design patterns; they are more descriptions of how to reuse existing components and frameworks instead of rules for generating new designs.
Reference: 17. <author> Ralph E. Johnson, Carl McConnell, and J. Michael Lake. </author> <title> The RTL system: A framework for code optimization. </title> <editor> In Robert Giegerich and Susan L. Graham, editors, </editor> <title> Code Generation|Concepts, Tools, Techniques. </title> <booktitle> Proceedings of the International Workshop on Code Generation, </booktitle> <pages> pages 255-274, </pages> <address> Dagstuhl, Germany, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Good designers, it appears, rely on large amounts of design experience, and this experience is just as important as the notations for recording designs and the rules for using those notations. Our experience with the design of object-oriented systems and frameworks <ref> [15, 17, 22, 30, 31] </ref> bears out this observation. We have found that there exist idiomatic class and object structures that help make designs more flexible, reusable, and elegant. For example, the Model-View-Controller (MVC) paradigm from Smalltalk [19] is a design structure that separates representation from presentation.
Reference: 18. <author> S. Katz, C.A. Richter, and K.-S. </author> <title> The. Paris: A system for reusing partially interpreted schemas. </title> <booktitle> In Proc. of the Ninth International Conference on Software Engineering, </booktitle> <year> 1987. </year>
Reference-contexts: Design patterns are related to both software schemas and reusable software architectures. Software schemas emphasize reusing abstract algorithms and data structures. These abstractions are represented formally so they can be instantiated automatically. The Paris system <ref> [18] </ref> is representative of schema technology. Design patterns are higher-level than schemas; they focus on design structures at the level of collaborating classes and not at the algorithmic level. In addition, design patterns are not formal descriptions and cannot be instantiated directly.
Reference: 19. <author> Glenn E. Krasner and Stephen T. Pope. </author> <title> A cookbook for using the model-view controller user interface paradigm in Smalltalk-80. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <month> August/September </month> <year> 1988. </year>
Reference-contexts: Our experience with the design of object-oriented systems and frameworks [15, 17, 22, 30, 31] bears out this observation. We have found that there exist idiomatic class and object structures that help make designs more flexible, reusable, and elegant. For example, the Model-View-Controller (MVC) paradigm from Smalltalk <ref> [19] </ref> is a design structure that separates representation from presentation. MVC promotes flexibility in the choice of views, independent of the model.
Reference: 20. <author> Charles W. Krueger. </author> <title> Software reuse. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(2), </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: Once they are familiar with the patterns, they can reuse this understanding. Moreover, because some patterns appear in other class libraries, it is possible to reuse the knowledge about patterns when learning other libraries as well. 5 Related Work Design patterns are an approach to software reuse. Krueger <ref> [20] </ref> introduces the following taxonomy to characterize different reuse approaches: software component reuse, software schemas, application generators, transformation systems, and software architectures. Design patterns are related to both software schemas and reusable software architectures. Software schemas emphasize reusing abstract algorithms and data structures.
Reference: 21. <author> Mark A. Linton. </author> <title> Encapsulating a C++ library. </title> <booktitle> In Proceedings of the 1992 USENIX C++ Conference, </booktitle> <pages> pages 57-66, </pages> <address> Portland, OR, </address> <month> August </month> <year> 1992. </year>
Reference: 22. <author> Mark A. Linton, John M. Vlissides, and Paul R. Calder. </author> <title> Composing user interfaces with InterViews. </title> <journal> Computer, </journal> <volume> 22(2) </volume> <pages> 8-22, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Good designers, it appears, rely on large amounts of design experience, and this experience is just as important as the notations for recording designs and the rules for using those notations. Our experience with the design of object-oriented systems and frameworks <ref> [15, 17, 22, 30, 31] </ref> bears out this observation. We have found that there exist idiomatic class and object structures that help make designs more flexible, reusable, and elegant. For example, the Model-View-Controller (MVC) paradigm from Smalltalk [19] is a design structure that separates representation from presentation.
Reference: 23. <author> William F. Opdyke and Ralph E. Johnson. </author> <title> Refactoring: An aid in designing application frameworks and evolving object-oriented systems. </title> <booktitle> In SOOPPA Conference Proceedings, </booktitle> <pages> pages 145-161, </pages> <address> Marist College, Poughkeepsie, NY, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: Once a library consumer has learned the design patterns in one library, he can reuse this experience when learning a new class library. Design patterns help a novice perform more like an expert. Design patterns provide a target for the reorganization or refactoring of class hierarchies <ref> [23] </ref>. Moreover, by using design patterns early in the lifecycle, one can avert refactoring at later stages of design.
Reference: 24. <author> Charles Rich and Richard C. Waters. </author> <title> Formalizing reusable software components in the programmer's apprentice. </title> <editor> In Ted J. Biggerstaff and Alan J. Perlis, editors, </editor> <booktitle> Software Reusability, </booktitle> <volume> Volume II, </volume> <pages> pages 313-343. </pages> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Design patterns are finer-grained and therefore can be characterized as reusable micro-architectures. Most research into patterns in the software engineering community has been geared towards building knowledge-based assistants for automating the application of patterns for synthesis (that is, to write programs) and analysis (in debugging, for example) <ref> [13, 24] </ref>. The major difference between our work and that of the knowledge-based assistant community is that design patterns encode higher-level expertise. Their work has tended to focus on patterns like enumeration and selection, which can be expressed directly as reusable components in most existing object-oriented languages.
Reference: 25. <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: Collaborations Describe how the participants collaborate to carry out their responsibilities. Diagram A graphical representation of the pattern using a notation based on the Object Modeling Technique (OMT) <ref> [25] </ref>, to which we have added method pseudo-code.
Reference: 26. <author> Elliot Soloway and Kate Ehrlich. </author> <title> Empirical studies of programming knowledge. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(5), </volume> <month> September </month> <year> 1984. </year>
Reference-contexts: Studies of expert programmers for conventional languages, however, have shown that knowledge is not organized simply around syntax, but in larger conceptual structures such as algorithms, data structures and idioms [1, 7, 9, 27], and plans that indicate steps necessary to fulfill a particular goal <ref> [26] </ref>. It is likely that designers do not think about the notation they are using for recording the design. Rather, they look for patterns to match against plans, algorithms, data structures, and idioms they have learned in the past.
Reference: 27. <author> James C. Spohrer and Elliot Soloway. </author> <title> Novice mistakes: </title> <journal> Are the folk wisdoms correct? Communications of the ACM, </journal> <volume> 29(7) </volume> <pages> 624-632, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Studies of expert programmers for conventional languages, however, have shown that knowledge is not organized simply around syntax, but in larger conceptual structures such as algorithms, data structures and idioms <ref> [1, 7, 9, 27] </ref>, and plans that indicate steps necessary to fulfill a particular goal [26]. It is likely that designers do not think about the notation they are using for recording the design.
Reference: 28. <institution> ParcPlace Systems. ParcPlace Systems, </institution> <note> Objectworks/Smalltalk Release 4 Users Guide. </note> <institution> Mountain View, California, </institution> <year> 1990. </year>
Reference: 29. <author> David Ungar and Randall B. Smith. </author> <title> Self: The power of simplicity. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings, </booktitle> <pages> pages 227-242, </pages> <address> Orlando, Florida, </address> <month> October </month> <year> 1987. </year>
Reference-contexts: For example, a text composition object may need to support different line breaking algorithms. It is infeasible to hard-wire all such algorithms into the text composition class and subclasses. An alternative is to objectify different algorithms and However, object models that support dynamic inheritance, most notably Self <ref> [29] </ref>, are as flexible as object composition in theory. provide them as Compositor subclasses. The interface for Compositors is defined by the abstract Compositor class, and its derived classes provide different layout strategies, such as simple line breaks or full page justification.
Reference: 30. <author> John M. Vlissides and Mark A. Linton. Unidraw: </author> <title> A framework for building domain-specific graphical editors. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 237-268, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Good designers, it appears, rely on large amounts of design experience, and this experience is just as important as the notations for recording designs and the rules for using those notations. Our experience with the design of object-oriented systems and frameworks <ref> [15, 17, 22, 30, 31] </ref> bears out this observation. We have found that there exist idiomatic class and object structures that help make designs more flexible, reusable, and elegant. For example, the Model-View-Controller (MVC) paradigm from Smalltalk [19] is a design structure that separates representation from presentation.
Reference: 31. <author> Andre Weinand, Erich Gamma, and Rudolf Marty. </author> <title> ET++|An object-oriented application framework in C++. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings, </booktitle> <pages> pages 46-57, </pages> <address> San Diego, CA, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: Good designers, it appears, rely on large amounts of design experience, and this experience is just as important as the notations for recording designs and the rules for using those notations. Our experience with the design of object-oriented systems and frameworks <ref> [15, 17, 22, 30, 31] </ref> bears out this observation. We have found that there exist idiomatic class and object structures that help make designs more flexible, reusable, and elegant. For example, the Model-View-Controller (MVC) paradigm from Smalltalk [19] is a design structure that separates representation from presentation.
Reference: 32. <author> Rebecca Wirfs-Brock and Ralph E. Johnson. </author> <title> A survey of current research in object-oriented design. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 104-124, </pages> <year> 1990. </year>
Reference-contexts: A class Adapter accomplishes this by inheriting privately from an adaptee class. The Adapter then expresses its interface in terms of the adaptee's. Class Behavioral. Behavioral class patterns capture how classes cooperate with their subclasses to fulfill their semantics. Template Method is a simple and well-known behavioral class pattern <ref> [32] </ref>. Template methods define algorithms step by step. Each step can invoke an abstract method (which the subclass must define) or a base method. The purpose of a template method is to provide an abstract definition of an algorithm. <p> We believe that characterizing and cataloging higher-level patterns that designers already use informally has an immediate benefit in teaching and communicating designs. A common approach for reusing object-oriented software architectures are object-oriented frameworks <ref> [32] </ref>. A framework is a codified architecture for a problem domain that can be adapted to solve specific problems. A framework makes it possible to reuse an architecture together with a partial concrete implementation.
References-found: 32

