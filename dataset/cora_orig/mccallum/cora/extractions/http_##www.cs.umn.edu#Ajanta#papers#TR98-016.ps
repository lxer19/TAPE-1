URL: http://www.cs.umn.edu/Ajanta/papers/TR98-016.ps
Refering-URL: http://www.cs.umn.edu/Ajanta/
Root-URL: http://www.cs.umn.edu
Title: Ajanta A System for Mobile Agent Programming  
Author: Anand R. Tripathi, Neeran M. Karnik, Manish K. Vora and Tanvir Ahmed 
Address: Minneapolis MN 55455  
Affiliation: Department of Computer Science, University of Minnesota  
Abstract: This paper gives an overview of Ajanta, a Java-based system for mobile agent programming. We discuss the Ajanta architecture, and elaborate on the mechanisms used to provide object mobility, and secure execution of mobile agents in confined protection domains. The agent programming environment is defined, in terms of a set of primitive operations. A proxy-based fine-grained access control mechanism for application-defined resources is described. We show how it can be adapted to provide secure inter-agent communication. We also describe a scheme for agent migration control that we have developed, based on the composition of some fundamental migration patterns. These patterns encapsulate the abstract notion of agent mobility, and incorporate some failure recovery mechanisms.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yariv Aridor and Danny B. Lange. </author> <title> Agent Design Patterns: Elements of Agent Application Design. </title> <booktitle> In Second International Conference on Autonomous Agents, </booktitle> <month> May </month> <year> 1998. </year> <note> Available at http://www.acm.org/~danny/ag.pdf. </note>
Reference-contexts: processing tool. public class BufferProxy implements Buffer - private transient Buffer ref; // private reference to underlying resource private transient Method [] enabledMethods; BufferProxy (Buffer b, Method [] e) - ref = b; enabledMethods = e; - public synchronized BufItem put (BufItem x) - Class [] ptypes = new Class <ref> [1] </ref>; ptypes [0] = Class.forName ("BufItem"); Method me = this.getClass ().getMethod ("put", ptypes); if (checkAccess (me)) ref.put (x); else throw new SecurityException ("Unauthorized method access"); - private boolean checkAccess (Method m) - // Checks if the method m is enabled in this proxy instance. - public void enable (Method m)- // <p> In the context of mobile agent programming, the concept of travelling patterns has been used in the past by Aridor and Lange <ref> [1] </ref>. Similar concepts have also been proposed in Java-based Moderator Templates [11]. In contrast to our approach, these are basic primitives in that they only define single hops, although the Java-based Moderator Templates can support some of the pattern compositions that we provide. <p> Moreover, we can argue about the integrity of our scheme based on Java's security model and present a specific set of design rules to guard against potential attacks. The concept of migration patterns has been recently used by other researchers [11] <ref> [1] </ref> as well. The patterns described there tend to be somewhat primitive in contrast to our patterns as they are described in terms of single hops.
Reference: [2] <author> David M. Chess, Benjamin Grosof, Colin Harrison, David Levine, Colin Parris, and Gene Tsudik. </author> <title> Itinerant Agents for Mobile Computing. </title> <journal> IEEE Personal Communications, </journal> <pages> pages 34-59, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: The main advantages of the mobile agent paradigm lie in its ability to move client code and computation to remote server resources, and in permitting increased asynchrony in client-server interactions <ref> [9, 2] </ref>. Mobile agents introduce a higher level of abstraction (in comparison to RPC and message-passing), for which many applications are naturally suited. The programmer can define agents as active application components that traverse the network performing computations relevant to their current location.
Reference: [3] <author> J. Steven Fritzinger and Marianne Mueller. </author> <title> Java Security. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <year> 1996. </year> <note> Available at http://www.javasoft.com/security/whitepaper.ps. </note>
Reference-contexts: Agents in this system are active mobile objects, which encapsulate code and execution context along with data. Ajanta is implemented using the Java [6] language and its security mechanisms are designed based on Java's security model <ref> [3] </ref>. It also makes use of several other facilities of Java, such as object serialization, reflection, and remote method invocation. This paper provides an overview of the Ajanta architecture, describing its facilities for agent execution, migration, and inter-agent communication, and focuses on two important contributions: 1.
Reference: [4] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns. Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1997. </year>
Reference: [5] <author> Li Gong. </author> <title> A Secure Identity-Based Capability System. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 56-63, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: The proxy concept was first developed by Shapiro [21]. It has also been recently used in other agent based systems [8]. We use proxies to act as capabilities. These capabilities may include the identity of the client, to act as an identity-based capability <ref> [5] </ref>, and may also include some accounting information, as suggested in [17]. One of the contributions of our work lies in supporting proxy-based capabilities whose integrity can be assured based on Java's security model. The protection scheme described in [8] has some conceptual similarities to our approach.
Reference: [6] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: In Ajanta, the mobile agent paradigm is based on the generic concept of a network mobile object [13]. Agents in this system are active mobile objects, which encapsulate code and execution context along with data. Ajanta is implemented using the Java <ref> [6] </ref> language and its security mechanisms are designed based on Java's security model [3]. It also makes use of several other facilities of Java, such as object serialization, reflection, and remote method invocation.
Reference: [7] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL 96), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed [14]. Some of the other Java-based agent systems, Voyager [18], Sumatra [20], and Mole [23], do not address security issues. 16 Tacoma [12] and Agent Tcl <ref> [7] </ref> are Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl supports access control lists based on host names and uses PGP for encryption and authentication.
Reference: [8] <author> Daniel Hagimont and Leila Ismail. </author> <title> A Protection Scheme for Mobile Agents on Java. </title> <booktitle> In Proceedings of the 3rd ACM/IEEE International Conference on Mobile Computing and Networking, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: For protected access to server resources by an agent, our approach is based on the concept of proxies. The proxy concept was first developed by Shapiro [21]. It has also been recently used in other agent based systems <ref> [8] </ref>. We use proxies to act as capabilities. These capabilities may include the identity of the client, to act as an identity-based capability [5], and may also include some accounting information, as suggested in [17]. <p> One of the contributions of our work lies in supporting proxy-based capabilities whose integrity can be assured based on Java's security model. The protection scheme described in <ref> [8] </ref> has some conceptual similarities to our approach. Both schemes use proxy objects acting as capabilities instead of direct access to resources. In [8] the restricted interfaces of such proxy classes (called filters in [8]) are statically defined, independently by clients and servers. <p> The protection scheme described in <ref> [8] </ref> has some conceptual similarities to our approach. Both schemes use proxy objects acting as capabilities instead of direct access to resources. In [8] the restricted interfaces of such proxy classes (called filters in [8]) are statically defined, independently by clients and servers. These restricted interfaces are integrated with the resource interface definitions; this allows the system to automatically create and interpose appropriate filter objects in a client-server interaction. <p> The protection scheme described in <ref> [8] </ref> has some conceptual similarities to our approach. Both schemes use proxy objects acting as capabilities instead of direct access to resources. In [8] the restricted interfaces of such proxy classes (called filters in [8]) are statically defined, independently by clients and servers. These restricted interfaces are integrated with the resource interface definitions; this allows the system to automatically create and interpose appropriate filter objects in a client-server interaction.
Reference: [9] <author> Colin G. Harrison, David M. Chess, and Aaron Kershenbaum. </author> <title> Mobile Agents: Are they a good idea? Technical report, </title> <institution> IBM Research Division, T.J.Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Available at URL http://www.research.ibm.com/massdist/mobag.ps. </note>
Reference-contexts: The main advantages of the mobile agent paradigm lie in its ability to move client code and computation to remote server resources, and in permitting increased asynchrony in client-server interactions <ref> [9, 2] </ref>. Mobile agents introduce a higher level of abstraction (in comparison to RPC and message-passing), for which many applications are naturally suited. The programmer can define agents as active application components that traverse the network performing computations relevant to their current location.
Reference: [10] <author> IBM. </author> <title> IBM Aglets Workbench Documentation web page. </title> <note> Available at URL http://www.trl.ibm.co.jp/aglets/documentation.html. </note>
Reference-contexts: It uses different types of permits for access control and for imposing quotas on resource use. Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration. A comparative evaluation of three Java-based mobile agent systems is presented in [15]. The Aglets Workbench <ref> [10] </ref> developed by IBM is one of them. Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed [14].
Reference: [11] <author> IBM. </author> <title> JMT (Java-based Moderator Templates) Specification - Alpha3. </title> <note> Available at URL http://www.trl.ibm.co.jp/aglets/jmt/index.html, 1998. </note>
Reference-contexts: In the context of mobile agent programming, the concept of travelling patterns has been used in the past by Aridor and Lange [1]. Similar concepts have also been proposed in Java-based Moderator Templates <ref> [11] </ref>. In contrast to our approach, these are basic primitives in that they only define single hops, although the Java-based Moderator Templates can support some of the pattern compositions that we provide. Patterns in Ajanta are higher-level abstractions and richer in their ability to define migration control structures using compositions. <p> Moreover, we can argue about the integrity of our scheme based on Java's security model and present a specific set of design rules to guard against potential attacks. The concept of migration patterns has been recently used by other researchers <ref> [11] </ref> [1] as well. The patterns described there tend to be somewhat primitive in contrast to our patterns as they are described in terms of single hops.
Reference: [12] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System. </title> <type> Technical Report 95-23, </type> <institution> Department of Computer Science, University of Tromst, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed [14]. Some of the other Java-based agent systems, Voyager [18], Sumatra [20], and Mole [23], do not address security issues. 16 Tacoma <ref> [12] </ref> and Agent Tcl [7] are Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl supports access control lists based on host names and uses PGP for encryption and authentication.
Reference: [13] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The main focus of the Ajanta design is on mechanisms for secure and robust executions of mo-bile agents in open systems. In Ajanta, the mobile agent paradigm is based on the generic concept of a network mobile object <ref> [13] </ref>. Agents in this system are active mobile objects, which encapsulate code and execution context along with data. Ajanta is implemented using the Java [6] language and its security mechanisms are designed based on Java's security model [3].
Reference: [14] <author> Gunter Karjoth, Danny Lange, and Mitsuru Oshima. </author> <title> A Security Model for Aglets. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 68-77, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: A comparative evaluation of three Java-based mobile agent systems is presented in [15]. The Aglets Workbench [10] developed by IBM is one of them. Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed <ref> [14] </ref>. Some of the other Java-based agent systems, Voyager [18], Sumatra [20], and Mole [23], do not address security issues. 16 Tacoma [12] and Agent Tcl [7] are Tcl-based systems. The Tacoma design does not address security issues.
Reference: [15] <author> Joseph Kiniry and Daniel Zimmerman. </author> <title> A Hands-on Look at Java Mobile Agents. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 21-30, </pages> <note> July-August 1997. Available at http://computer.org/internet/. 18 </note>
Reference-contexts: It uses different types of permits for access control and for imposing quotas on resource use. Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration. A comparative evaluation of three Java-based mobile agent systems is presented in <ref> [15] </ref>. The Aglets Workbench [10] developed by IBM is one of them. Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed [14].
Reference: [16] <author> R. Moats. </author> <title> RFC 2141: URN Syntax. </title> <note> Available at URL http://www.cis.ohio--state.edu/htbin/rfc/rfc2141.html, May 1997. </note>
Reference: [17] <author> B.C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283-291, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: It has also been recently used in other agent based systems [8]. We use proxies to act as capabilities. These capabilities may include the identity of the client, to act as an identity-based capability [5], and may also include some accounting information, as suggested in <ref> [17] </ref>. One of the contributions of our work lies in supporting proxy-based capabilities whose integrity can be assured based on Java's security model. The protection scheme described in [8] has some conceptual similarities to our approach. Both schemes use proxy objects acting as capabilities instead of direct access to resources.
Reference: [18] <author> ObjectSpace. </author> <title> ObjectSpace Voyager Core Package Technical Overview. </title> <type> Technical report, </type> <institution> Ob-jectSpace, Inc., </institution> <month> July </month> <year> 1997. </year> <note> Available at http://www.objectspace.com/. </note>
Reference-contexts: The Aglets Workbench [10] developed by IBM is one of them. Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed [14]. Some of the other Java-based agent systems, Voyager <ref> [18] </ref>, Sumatra [20], and Mole [23], do not address security issues. 16 Tacoma [12] and Agent Tcl [7] are Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl supports access control lists based on host names and uses PGP for encryption and authentication.
Reference: [19] <author> Holger Peine and Torsten Stolpmann. </author> <title> The Architecture of the Ara Platform for Mobile Agents. </title> <booktitle> In Proceedings of the First International Workshop on Mobile Agents (MA'97), </booktitle> <address> Berlin, Ger-many, April 1997. </address> <publisher> Springer Verlag, LNCS #1219. </publisher>
Reference-contexts: The Tacoma design does not address security issues. Agent Tcl supports access control lists based on host names and uses PGP for encryption and authentication. In Ara <ref> [19] </ref>, which supports multiple languages like Tcl and C++, agent servers use access control lists (called "allowances") to impose restrictions on visiting agents. For protected access to server resources by an agent, our approach is based on the concept of proxies. The proxy concept was first developed by Shapiro [21].
Reference: [20] <author> M. Ranganathan, Anurag Acharya, Shamik Sharma, and Joel Saltz. </author> <title> Network-aware Mobile Programs. </title> <booktitle> In Proceedings of USENIX '97, </booktitle> <month> Winter </month> <year> 1997. </year>
Reference-contexts: The Aglets Workbench [10] developed by IBM is one of them. Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed [14]. Some of the other Java-based agent systems, Voyager [18], Sumatra <ref> [20] </ref>, and Mole [23], do not address security issues. 16 Tacoma [12] and Agent Tcl [7] are Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl supports access control lists based on host names and uses PGP for encryption and authentication.
Reference: [21] <author> Marc Shapiro. </author> <title> Structure and Encapsulation in Distributed Systems: The Proxy Principle. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 198-204. </pages> <publisher> IEEE, </publisher> <year> 1986. </year>
Reference-contexts: Therefore, we need to implement a mechanism which allows the agent server to provide a secure language-level binding between agents and resources. Each resource must be allowed to define its own security policy, and control its implementation. Our approach is based on proxy interposition <ref> [21] </ref> between the resource and its clients (i.e., agents). We illustrate the protocol below using a simple example in which we 8 develop a bounded-buffer resource. <p> For protected access to server resources by an agent, our approach is based on the concept of proxies. The proxy concept was first developed by Shapiro <ref> [21] </ref>. It has also been recently used in other agent based systems [8]. We use proxies to act as capabilities. These capabilities may include the identity of the client, to act as an identity-based capability [5], and may also include some accounting information, as suggested in [17].
Reference: [22] <author> Karen Sollins and Larry Masinter. </author> <title> RFC 1737: Functional Requirements for Uniform Resource Names. </title> <note> Available at URL http://www.cis.ohio-state.edu/htbin/rfc/rfc1737.html, December 1994. </note>
Reference: [23] <author> Markus Straer, Joachim Baumann, and Fritz Hohl. </author> <title> Mole A Java Based Mobile Agent System. </title> <booktitle> In Proceedings of the 2nd ECOOP Workshop on Mobile Object Systems, </booktitle> <year> 1996. </year>
Reference-contexts: The Aglets Workbench [10] developed by IBM is one of them. Currently, Aglets has only primitive security functionality. However a security architecture for this system has recently been proposed [14]. Some of the other Java-based agent systems, Voyager [18], Sumatra [20], and Mole <ref> [23] </ref>, do not address security issues. 16 Tacoma [12] and Agent Tcl [7] are Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl supports access control lists based on host names and uses PGP for encryption and authentication.
Reference: [24] <author> Joseph Tardo and Luis Valente. </author> <title> Mobile Agent Security and Telescript. </title> <booktitle> In Proceedings of COMPCON Spring '96, </booktitle> <pages> pages 58-63. </pages> <publisher> IEEE, </publisher> <year> 1996. </year> <month> 19 </month>
Reference-contexts: Telescript <ref> [24] </ref> was one of the first agent systems. It is an object-oriented type-safe language designed to support agent-based computing. It uses different types of permits for access control and for imposing quotas on resource use. Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration.
References-found: 24

