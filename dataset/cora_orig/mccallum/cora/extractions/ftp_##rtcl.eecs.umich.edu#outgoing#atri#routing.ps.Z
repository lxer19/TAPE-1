URL: ftp://rtcl.eecs.umich.edu/outgoing/atri/routing.ps.Z
Refering-URL: http://www.eecs.umich.edu/~atri/
Root-URL: http://www.cs.umich.edu
Email: fatri,kgshing@eecs.umich.edu  
Title: Multiple Shortest Path Routing in C-wrapped Hexagonal Mesh Networks  
Author: Atri Indiresan and Kang G. Shin 
Keyword: Index terms Interconnection networks, mesh topologies, hexagonal mesh, multi-path routing.  
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Reliable delivery of messages is essential for distributed, fault-tolerant applications. Regular topology networks are viable candidates for such applications due to their simplicity, efficiency of routing, and presence of multiple routes that support a high degree of redundancy and fault-tolerance. To minimize network resource overhead, it is desirable to transmit data along the shortest possible routes. We present algorithms to find all the shortest routes for some regular mesh topologies. In particular, we examine in detail C-wrapped hexagonal meshes, and present a fi(1) algorithm to find the six shortest paths between any two nodes in such a network. The work reported in this paper was supported in part by the Advanced Research Projects Agency, monitored by the US Air Force Rome Laboratory under Grant F30602-95-1-0044, the National Science Foundation under Grant MIP-9203895 and the Office of Naval Research under Grants N00014-91-J-1115 and N00014-94-1-0229. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.-S. Chen, K. G. Shin, and D. D. Kandlur, </author> <title> "Addressing, routing and broadcasting in hexagonal mesh multiprocessors," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 39, no. 1, </volume> <pages> pp. 10-18, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: The availability of multiple disjoint paths between nodes in these networks increase bandwidth, and also make them robust to link and node failures. While arbitrary point-to-point networks with a high degree of connectivity provide these features, regular topologies like hypercubes and meshes <ref> [1, 7] </ref> often facilitate simple techniques for message routing and fault management. Several topologies have been proposed for interconnecting these processors, including trees, hypercubes and meshes. Criteria for selection of a topology include simplicity, fixed connectivity, efficiency, fine grain scalability, and fault-tolerance. <p> Considerable research has been performed on interconnection network topologies, but most of them have not been able to provide all the following features: simplicity, efficiency of message routing, fine grain scalability, and a high degree of fault-tolerance. Chen et al. <ref> [1] </ref> argue that C-wrapped hexagonal meshes (Figure 2) possess all these features, and describe algorithms for addressing, routing and broadcasting for this topology. For this topology, algorithms have been developed for reliable broadcasting [4], and reliable communication using multiple copies of messages [5]. <p> There are well-known algorithms to find a shortest route between two nodes in an 2 arbitrary topology [8], as well as special cases for regular topologies like hypercubes [6] and hexagonal meshes <ref> [1] </ref>. In this paper, we examine the problem of selection of multiple routes between a source and destination nodes, such that these routes are disjoint, and as short as possible. These paths may be used for efficient, reliable communication between nodes in a network. <p> It can be defined succinctly as follows <ref> [1] </ref>: Definition: A C-wrapped hexagonal mesh of size n, denoted by H n , is comprised of N=3n 2 3n + 1 nodes, labeled from 0 to N 1, such that each node s has six neighbors with labels [s + 1] N , [s + 3n 1] N , [s <p> Figure 2 shows an H 3 with the wrap links shown with arrows and labeled with the nodes to which they are connected. See <ref> [1] </ref> for a more detailed discussion of some of the properties of the C-wrapped H-mesh and comparisons with other regular topologies. Several of the properties discussed in [1] are relevant to our choice of this topology. First, the C-type wrapping results in a homogeneous network. <p> See <ref> [1] </ref> for a more detailed discussion of some of the properties of the C-wrapped H-mesh and comparisons with other regular topologies. Several of the properties discussed in [1] are relevant to our choice of this topology. First, the C-type wrapping results in a homogeneous network. Consequently, any node can view itself as the center (labeled as node 0) of the mesh. <p> Our algorithm (GetAllShortestRoutes ()) finds a set of six disjoint paths that are also of the shortest possible length. 3.1 Algorithm GetAllShortestRoutes Since the C-wrapped hexagonal mesh is a homogeneous graph <ref> [1] </ref>, all nodes are topologically equivalent and without loss of generality, we can assume that the source node is located at the center of the mesh (labeled as node 0). The directions are labeled as shown in Figure 3. <p> The directions are labeled as shown in Figure 3. We invoke a function GetShortestRoute (MeshSize, Destination) that returns a 6-tuple, OffsetVector that contains the displacement along these six directions to get from node 0 to the destination node. This function is identical to Algorithm A 1 in <ref> [1] </ref>, except that A 1 returned a 3-tuple of directions which could be positive, zero or negative, and in the 6-tuple, the positive and negative directions are given by distinct entries. Note that at most two entries in the vector can be non-zero. <p> Route <ref> [1] </ref> ::= ( (dir) dist ); 2. Route [2] ::= ( (dir 6 1) 1 ; (dir) dist 1 ; (dir 6 1) 1 ); 3. <p> Route <ref> [1] </ref> ::= ( (dir1) dist1 ; (dir2) dist2 ); 14. Route [2] ::= ( (dir2) dist2 ; (dir1) dist1 ); 15. Route [3] ::= ( (dir1 6 1) 1 ; (dir1) dist1 ; (dir2) dist2 ; (dir2 6 1) 1 ); 16. <p> As in Lemma 2 , this may be proved either by observing the graph, or by composing vectors. 2 Route vectors are computed on the 20 (numbered) lines of the algorithm. We need to prove that each vector leads to the destination node. The shortest path (s) (Route <ref> [1] </ref> for a destination along a principal axis, and Route [1] and Route [2] for other destination nodes) are computed by algorithm GetShortestRoute which has been proved correct in [1]. Routes 1, 13 and 14 correspond to these routes. Routes 2-5, 10, and 15-18 do not use wrap links. <p> We need to prove that each vector leads to the destination node. The shortest path (s) (Route <ref> [1] </ref> for a destination along a principal axis, and Route [1] and Route [2] for other destination nodes) are computed by algorithm GetShortestRoute which has been proved correct in [1]. Routes 1, 13 and 14 correspond to these routes. Routes 2-5, 10, and 15-18 do not use wrap links. <p> We need to prove that each vector leads to the destination node. The shortest path (s) (Route <ref> [1] </ref> for a destination along a principal axis, and Route [1] and Route [2] for other destination nodes) are computed by algorithm GetShortestRoute which has been proved correct in [1]. Routes 1, 13 and 14 correspond to these routes. Routes 2-5, 10, and 15-18 do not use wrap links. They can be proved to be correct by composition of vectors using Lemmas 1, 2 and 3 .
Reference: [2] <author> W. J. Dally and C. L. Seitz, </author> <title> "The torus routing chip," </title> <journal> Journal of Distributed Computing, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 187-196, </pages> <year> 1986. </year>
Reference-contexts: Several topologies have been proposed for interconnecting these processors, including trees, hypercubes and meshes. Criteria for selection of a topology include simplicity, fixed connectivity, efficiency, fine grain scalability, and fault-tolerance. The simplest topologies have regular geometry, and can support efficient routing and switching schemes in hardware <ref> [2, 3] </ref>. Fixed connectivity allows standard VLSI chips to be used to implement routing and switching hardware. For efficiency, the diameter of the networks must be minimized in order to reduce the distance messages need to travel from a source to destination. <p> Route [1] ::= ( (dir) dist ); 2. Route <ref> [2] </ref> ::= ( (dir 6 1) 1 ; (dir) dist 1 ; (dir 6 1) 1 ); 3. Route [3] ::= ( (dir 6 1) 1 ; (dir) dist 1 ; (dir 6 1) 1 ); if (dist &lt; n 2) /* do not use wrap links */ 4. <p> Route [1] ::= ( (dir1) dist1 ; (dir2) dist2 ); 14. Route <ref> [2] </ref> ::= ( (dir2) dist2 ; (dir1) dist1 ); 15. Route [3] ::= ( (dir1 6 1) 1 ; (dir1) dist1 ; (dir2) dist2 ; (dir2 6 1) 1 ); 16. <p> We need to prove that each vector leads to the destination node. The shortest path (s) (Route [1] for a destination along a principal axis, and Route [1] and Route <ref> [2] </ref> for other destination nodes) are computed by algorithm GetShortestRoute which has been proved correct in [1]. Routes 1, 13 and 14 correspond to these routes. Routes 2-5, 10, and 15-18 do not use wrap links.
Reference: [3] <author> J. Dolter, S. Daniel, A. Mehra, J. Rexford, W. Feng, and K. Shin, "SPIDER: </author> <title> Flexible and efficient communication support for point-to-point distributed systems," </title> <booktitle> in Proceedings of the International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 574-580, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Several topologies have been proposed for interconnecting these processors, including trees, hypercubes and meshes. Criteria for selection of a topology include simplicity, fixed connectivity, efficiency, fine grain scalability, and fault-tolerance. The simplest topologies have regular geometry, and can support efficient routing and switching schemes in hardware <ref> [2, 3] </ref>. Fixed connectivity allows standard VLSI chips to be used to implement routing and switching hardware. For efficiency, the diameter of the networks must be minimized in order to reduce the distance messages need to travel from a source to destination. <p> Route [1] ::= ( (dir) dist ); 2. Route [2] ::= ( (dir 6 1) 1 ; (dir) dist 1 ; (dir 6 1) 1 ); 3. Route <ref> [3] </ref> ::= ( (dir 6 1) 1 ; (dir) dist 1 ; (dir 6 1) 1 ); if (dist &lt; n 2) /* do not use wrap links */ 4. <p> Route [1] ::= ( (dir1) dist1 ; (dir2) dist2 ); 14. Route [2] ::= ( (dir2) dist2 ; (dir1) dist1 ); 15. Route <ref> [3] </ref> ::= ( (dir1 6 1) 1 ; (dir1) dist1 ; (dir2) dist2 ; (dir2 6 1) 1 ); 16.
Reference: [4] <author> D. D. Kandlur and K. G. Shin, </author> <title> "Reliable broadcast algorithms for HARTS," </title> <journal> ACM Trans. Computer Systems, </journal> <volume> vol. 9, no. 4, </volume> <pages> pp. 374-398, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Chen et al. [1] argue that C-wrapped hexagonal meshes (Figure 2) possess all these features, and describe algorithms for addressing, routing and broadcasting for this topology. For this topology, algorithms have been developed for reliable broadcasting <ref> [4] </ref>, and reliable communication using multiple copies of messages [5]. There are well-known algorithms to find a shortest route between two nodes in an 2 arbitrary topology [8], as well as special cases for regular topologies like hypercubes [6] and hexagonal meshes [1]. <p> Last, since the total number of nodes in an H n grows as a function of fi (n 2 ), the incremental cost of expanding the network is low when compared to many other topologies. Kandlur and Shin <ref> [4] </ref> showed that there exist six node and link disjoint paths between any two nodes in a hexagonal mesh. These paths were found as a part of a reliable broadcasting algorithm. <p> Route [3] ::= ( (dir 6 1) 1 ; (dir) dist 1 ; (dir 6 1) 1 ); if (dist &lt; n 2) /* do not use wrap links */ 4. Route <ref> [4] </ref> ::= ( (dir 6 2) 1 ; (dir 6 1) 1 ; (dir) dist ; (dir 6 1) 1 ; (dir 6 2) 1 ); 5. <p> Route [5] ::= ( (dir 6 2) 1 ; (dir 6 1) 1 ; (dir) dist ; (dir 6 1) 1 ; (dir 6 2) 1 ); elseif (dist = n 2) /* use wrap links */ 6. Route <ref> [4] </ref> ::= ( (dir 6 2) n-1 ; (dir 6 3) 1 ; (dir 6 2) 1 ) 7. Route [5] ::= ( (dir 6 2) n-1 ; (dir 6 3) 2 ) else /* dist = n1: use wrap links */ 8. Route [4] ::= ( (dir 6 2) n <p> Route <ref> [4] </ref> ::= ( (dir 6 2) n-1 ; (dir 6 3) 1 ; (dir 6 2) 1 ) 7. Route [5] ::= ( (dir 6 2) n-1 ; (dir 6 3) 2 ) else /* dist = n1: use wrap links */ 8. Route [4] ::= ( (dir 6 2) n ) 9. Route [5] ::= ( (dir 6 2) n-1 ; (dir 6 3) 1 ) endif if (dist &lt; n 5) /* do not use wrap links */ 10. <p> Route [1] ::= ( (dir1) dist1 ; (dir2) dist2 ); 14. Route [2] ::= ( (dir2) dist2 ; (dir1) dist1 ); 15. Route [3] ::= ( (dir1 6 1) 1 ; (dir1) dist1 ; (dir2) dist2 ; (dir2 6 1) 1 ); 16. Route <ref> [4] </ref> ::= ( (dir2 6 1) 1 ; (dir2) dist2 ; (dir1) dist1 ; (dir1 6 1) 1 ); if (dist n 3) /* do not use wrap links */ 17.
Reference: [5] <author> P. Ramanathan and K. G. Shin, </author> <title> "Delivery of time-critical messages using a multiple copy approach," </title> <journal> ACM Trans. Computer Systems, </journal> <volume> vol. 10, no. 5, </volume> , <month> May </month> <year> 1992. </year>
Reference-contexts: Chen et al. [1] argue that C-wrapped hexagonal meshes (Figure 2) possess all these features, and describe algorithms for addressing, routing and broadcasting for this topology. For this topology, algorithms have been developed for reliable broadcasting [4], and reliable communication using multiple copies of messages <ref> [5] </ref>. There are well-known algorithms to find a shortest route between two nodes in an 2 arbitrary topology [8], as well as special cases for regular topologies like hypercubes [6] and hexagonal meshes [1]. <p> Route [4] ::= ( (dir 6 2) 1 ; (dir 6 1) 1 ; (dir) dist ; (dir 6 1) 1 ; (dir 6 2) 1 ); 5. Route <ref> [5] </ref> ::= ( (dir 6 2) 1 ; (dir 6 1) 1 ; (dir) dist ; (dir 6 1) 1 ; (dir 6 2) 1 ); elseif (dist = n 2) /* use wrap links */ 6. <p> Route [4] ::= ( (dir 6 2) n-1 ; (dir 6 3) 1 ; (dir 6 2) 1 ) 7. Route <ref> [5] </ref> ::= ( (dir 6 2) n-1 ; (dir 6 3) 2 ) else /* dist = n1: use wrap links */ 8. Route [4] ::= ( (dir 6 2) n ) 9. Route [5] ::= ( (dir 6 2) n-1 ; (dir 6 3) 1 ) endif if (dist &lt; <p> Route <ref> [5] </ref> ::= ( (dir 6 2) n-1 ; (dir 6 3) 2 ) else /* dist = n1: use wrap links */ 8. Route [4] ::= ( (dir 6 2) n ) 9. Route [5] ::= ( (dir 6 2) n-1 ; (dir 6 3) 1 ) endif if (dist &lt; n 5) /* do not use wrap links */ 10. <p> Route [4] ::= ( (dir2 6 1) 1 ; (dir2) dist2 ; (dir1) dist1 ; (dir1 6 1) 1 ); if (dist n 3) /* do not use wrap links */ 17. Route <ref> [5] </ref> ::= ( (dir1 6 2) 1 ; (dir1 6 1) 1 ; (dir1) dist1 + 1 ; (dir2) dist2 + 1 ; (dir2 6 1) 1 ; (dir2 6 2) 1 ); 18. <p> Route [6] ::= ( (dir2 6 2) 1 ; (dir2 6 1) 1 ; (dir2) dist2 + 1 ; (dir1) dist1 + 1 ; (dir1 6 1) 1 ; (dir1 6 2) 1 ); else /* use wrap links */ 19. Route <ref> [5] </ref> ::= ( (dir1 6 3) n dist1 ; (dir2 6 3) n dist2 1 ); 20.
Reference: [6] <author> Y. Saad and M. H. Schultz, </author> <title> "Topological properties of hypercubes," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 37, no. 7, </volume> <pages> pp. 867-872, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: For this topology, algorithms have been developed for reliable broadcasting [4], and reliable communication using multiple copies of messages [5]. There are well-known algorithms to find a shortest route between two nodes in an 2 arbitrary topology [8], as well as special cases for regular topologies like hypercubes <ref> [6] </ref> and hexagonal meshes [1]. In this paper, we examine the problem of selection of multiple routes between a source and destination nodes, such that these routes are disjoint, and as short as possible. These paths may be used for efficient, reliable communication between nodes in a network. <p> no set of node- and link-disjoint routes between the same two nodes in the network that either has more paths or a set of p paths that are shorter than the shortest p paths generated by our algorithm. 2.1 Hypercubes The case for binary hypercubes has already been solved in <ref> [6] </ref>, which shows that for a binary ncube, there are n disjoint paths between any two nodes. <p> Route [4] ::= ( (dir 6 2) n ) 9. Route [5] ::= ( (dir 6 2) n-1 ; (dir 6 3) 1 ) endif if (dist &lt; n 5) /* do not use wrap links */ 10. Route <ref> [6] </ref> ::= ( (dir 6 3) 1 ; (dir 6 2) 1 ; (dir 6 1) 2 ; (dir) dist + 1 ; (dir 6 1) 2 ; (dir 6 2) 1 ; (dir 6 3) 1 &gt;; elseif (dist = n 1) /* use wrap links */ 11. Route [6] <p> <ref> [6] </ref> ::= ( (dir 6 3) 1 ; (dir 6 2) 1 ; (dir 6 1) 2 ; (dir) dist + 1 ; (dir 6 1) 2 ; (dir 6 2) 1 ; (dir 6 3) 1 &gt;; elseif (dist = n 1) /* use wrap links */ 11. Route [6] ::= ( (dir 6 3) 1 ; (dir 6 4) n-1 ); else /* use wrap links */ 12. Route [6] ::= ( (dir 6 3) 2 ; (dir 6 4) n-1 ; (dir 6 3) n dist 2 ); endif else /* not on a principal axis */ (dir1, <p> Route <ref> [6] </ref> ::= ( (dir 6 3) 1 ; (dir 6 4) n-1 ); else /* use wrap links */ 12. Route [6] ::= ( (dir 6 3) 2 ; (dir 6 4) n-1 ; (dir 6 3) n dist 2 ); endif else /* not on a principal axis */ (dir1, dir2) = (i, j) j OffsetVector [i] 6= 0 ^ OffsetVector [j] 6= 0 ^ j = (i 6 1); /* <p> Route [5] ::= ( (dir1 6 2) 1 ; (dir1 6 1) 1 ; (dir1) dist1 + 1 ; (dir2) dist2 + 1 ; (dir2 6 1) 1 ; (dir2 6 2) 1 ); 18. Route <ref> [6] </ref> ::= ( (dir2 6 2) 1 ; (dir2 6 1) 1 ; (dir2) dist2 + 1 ; (dir1) dist1 + 1 ; (dir1 6 1) 1 ; (dir1 6 2) 1 ); else /* use wrap links */ 19. <p> Route [5] ::= ( (dir1 6 3) n dist1 ; (dir2 6 3) n dist2 1 ); 20. Route <ref> [6] </ref> ::= ( (dir2 6 3) n dist2 1 ; (dir1 6 3) n dist1 ); endif endif end 9 The proof follows simply from the observation that each move along a direction vector corresponds to adding a particular value to the source to get the destination node label.
Reference: [7] <author> C. L. Seitz, </author> <title> "The cosmic cube," </title> <journal> Communications of the ACM, </journal> <volume> vol. 28, no. 1, </volume> <pages> pp. 22-33, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: The availability of multiple disjoint paths between nodes in these networks increase bandwidth, and also make them robust to link and node failures. While arbitrary point-to-point networks with a high degree of connectivity provide these features, regular topologies like hypercubes and meshes <ref> [1, 7] </ref> often facilitate simple techniques for message routing and fault management. Several topologies have been proposed for interconnecting these processors, including trees, hypercubes and meshes. Criteria for selection of a topology include simplicity, fixed connectivity, efficiency, fine grain scalability, and fault-tolerance.
Reference: [8] <author> A. Tanenbaum, </author> <title> Computer Networks, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1989. </year> <month> 14 </month>
Reference-contexts: For this topology, algorithms have been developed for reliable broadcasting [4], and reliable communication using multiple copies of messages [5]. There are well-known algorithms to find a shortest route between two nodes in an 2 arbitrary topology <ref> [8] </ref>, as well as special cases for regular topologies like hypercubes [6] and hexagonal meshes [1]. In this paper, we examine the problem of selection of multiple routes between a source and destination nodes, such that these routes are disjoint, and as short as possible.
References-found: 8

