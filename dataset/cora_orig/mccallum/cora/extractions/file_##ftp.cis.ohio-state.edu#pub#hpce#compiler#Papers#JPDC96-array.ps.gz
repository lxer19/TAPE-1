URL: file://ftp.cis.ohio-state.edu/pub/hpce/compiler/Papers/JPDC96-array.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~chh/Publication/compiler-papers.html
Root-URL: 
Title: Compiling Array Expressions for Efficient Execution on Distributed-Memory Machines  
Author: S. K. S. Gupta, S. D. Kaushik, C.-H. Huang, and P. Sadayappan 
Keyword: Index Terms: Array statement, compiler optimizations, data communication, distributed-memory ma chines, data distribution, High Performance Fortran, Fortran 90.  
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Array statements are often used to express data-parallelism in scientific languages such as Fortran 90 and High Performance Fortran. In compiling array statements for a distributed-memory machine, efficient generation of communication sets and local index sets is important. We show that for arrays distributed block-cyclically on multiple processors, the local memory access sequence and communication sets can be efficiently enumerated as closed forms using regular sections. First, closed form solutions are presented for arrays that are distributed using block or cyclic distributions. These closed forms are then used with a virtual processor approach to give an efficient solution for arrays with block-cyclic distributions. This approach is based on viewing a block-cyclic distribution as a block (or cyclic) distribution on a set of virtual processors, which are cyclically (or block-wise) mapped to physical processors. These views are referred to as virtual-block or virtual-cyclic views depending on whether a block or cyclic distribution of the array on the virtual processors is used. The virtual processor approach permits different schemes based on the combination of the virtual processor views chosen for the different arrays involved in an array statement. These virtualization schemes have different indexing overhead. We present a strategy for identifying the virtualization scheme which will have the best performance. Performance results on a Cray T3D system are presented for hand-compiled code for array assignments. These results show that using the virtual processor approach, efficient code can be generated for execution of array statements involving block-cyclically distributed arrays. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Ahmad, R. Bordawekar, Z. Bozkus, A. Choudhary, G. Fox, K. Parasuram, R. Ponnusamy, S. Ranka, and R. Thakur. </author> <title> Implementation and scalability of Fortan-90D intrinsic functions on distributed memory machines. </title> <type> Technical Report SCCS-256, </type> <institution> Northeast Parallel Architectures Center, </institution> <month> Jun. </month> <year> 1992. </year>
Reference-contexts: This strategy increases the data volume transmitted but improves performance on machines with high communication bandwidth 4 such as the iWarp system. The Syracuse F90-D compiler's initial implementation uses compile-time characterization of communication only for block distributions <ref> [1] </ref> and relies upon run-time generation of schedules for the general block-cyclic case using the approach adopted by the PARTI system [15]. The implementation of the Fortran-D compiler at Rice University is being extended to handle arrays with block-cyclic distributions [9, 10].
Reference: [2] <author> D. Burton. </author> <title> Elementary Number Theory. </title> <publisher> Allyn and Bacon, Inc, </publisher> <address> Boston, </address> <note> revised printing edition, </note> <year> 1984. </year>
Reference-contexts: the array section B (l 2 : u 2 : s 2 ) only if the Diophantine equation l 2 + is 2 = m 2 + p + cP 2 has a solution, i.e., gcd (s 2 ; P 2 ) divides (p + m 2 l 2 ) <ref> [2, 18] </ref>. 11 =fl Sending phase fl= i 1 = dmax (m 1 + p fl b 1 l 1 ; 0)=s 1 e j 1 = bmin (m 1 + p fl b 1 + b 1 1 l 1 ; u 1 l 1 )=s 1 c if i <p> To determine the first array slice located on p, we solve i 2 s 2 c 2 P 2 = m 2 + p l 2 using Euclid's Extended GCD algorithm <ref> [2, 11] </ref>. Let i 2 and c 2 be the solution such that i 2 is the smallest non-negative integer for which the corresponding c 2 is also a non-negative integer.
Reference: [3] <author> B. M. Chapman, P. Mehrotra, and H. P. Zima. </author> <title> Vienna Fortran a Fortran language extension for distributed memory multiprocessors. </title> <editor> In J. Saltz and P. Mehrotra, editors, </editor> <booktitle> Language, Compilers and Runtime Environments for Distributed Memory Machines, </booktitle> <pages> pages 39-62. </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Programming languages, such as High Performance Fortran (HPF) [5], Fortran D [6], Vienna Fortran <ref> [3] </ref>, and Distributed Fortran 90 [13] support a programming model based on a single address space and provide directives for the explicit specification of data distributions for arrays. Block, cyclic, and block-cyclic dis <p>- tributions are the regular data distributions provided in these languages.
Reference: [4] <author> S. Chatterjee, J. R. Gilbert, F. J. E. Long, R. Schreiber, and S.-H. Teng. </author> <title> Generating local addresses and communication sets for data parallel programs. </title> <booktitle> In Proc. of ACM Symposium on Principles and Practices of Parallel Programming, </booktitle> <pages> pages 149-158, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This scheme will incur a high run-time overhead since a local-to-global and a global-to-local translation will be needed for each active element in order to determine the destination processor. The problem of active index-set identification for array statements involving block-cyclically distributed arrays was addressed by Chatterjee et al. <ref> [4] </ref> using a finite-state machine (FSM) to traverse the local index space of each processor. <p> In <ref> [4] </ref>, restricted cases involving arrays with different strides are treated, but even with these, the generation of communication sets requires explicit index translation for each active element. <p> The intersection is determined using a scanning approach which efficiently exploits the repetitive pattern of the intersection of the two index sets. An approach similar to the FSM approach <ref> [4] </ref> for determining the local memory access sequence is used. Efficient techniques for the FSM table generation are presented for special cases. The approach relies upon run-time methods [15] to handle the general case.
Reference: [5] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran langauge specification version 1.0. </title> <type> Technical Report CRPC-TR92225, </type> <institution> Rice University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Programming languages, such as High Performance Fortran (HPF) <ref> [5] </ref>, Fortran D [6], Vienna Fortran [3], and Distributed Fortran 90 [13] support a programming model based on a single address space and provide directives for the explicit specification of data distributions for arrays. Block, cyclic, and block-cyclic dis <p>- tributions are the regular data distributions provided in these languages.
Reference: [6] <author> G. Fox, S. Hiranandani, K. Kennedy, C Koelbel, U. Kremer, C.-W. Tseng, and M. Wu. </author> <title> Fortran-D Language Specification. </title> <type> Technical Report TR-91-170, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Programming languages, such as High Performance Fortran (HPF) [5], Fortran D <ref> [6] </ref>, Vienna Fortran [3], and Distributed Fortran 90 [13] support a programming model based on a single address space and provide directives for the explicit specification of data distributions for arrays. Block, cyclic, and block-cyclic dis <p>- tributions are the regular data distributions provided in these languages.
Reference: [7] <author> S. K. S. Gupta, S. D. Kaushik, S. Mufti, S. Sharma, C.-H. Huang, and P. Sadayappan. </author> <title> On the generation of efficient data communication for distributed-memory machines. </title> <booktitle> In Proc. of Intl. Computing Symposium, </booktitle> <pages> pages 504-513, </pages> <year> 1992. </year>
Reference-contexts: If the arrays have only block or cyclic distributions, then the data index sets and the processor sets can be characterized using regular sections for closed forms <ref> [7, 8, 12] </ref>. However, for the general block-cyclic distribution, closed form characterization of these sets using simple regular sections is not possible. This paper presents a virtual processor approach to efficiently enumerate the data index sets and processor sets when arrays have block-cyclic distributions. <p> The approach relies upon run-time methods [15] to handle the general case. The use of the virtual processor approach for addressing the problem of active index-set identification for array statements involving block-cyclic distributions and that of redistribution of arrays with block-cyclic distributions was first reported by us in <ref> [7, 8] </ref>.
Reference: [8] <author> S. K. S. Gupta, S. D. Kaushik, S. Mufti, S. Sharma, C.-H. Huang, and P. Sadayappan. </author> <title> On compiling array expressions for efficient execution on distributed-memory machines. </title> <booktitle> In Proc. of Intl. Conf. on Parallel Processing, </booktitle> <volume> volume II, </volume> <pages> pages 301-305, </pages> <year> 1993. </year>
Reference-contexts: If the arrays have only block or cyclic distributions, then the data index sets and the processor sets can be characterized using regular sections for closed forms <ref> [7, 8, 12] </ref>. However, for the general block-cyclic distribution, closed form characterization of these sets using simple regular sections is not possible. This paper presents a virtual processor approach to efficiently enumerate the data index sets and processor sets when arrays have block-cyclic distributions. <p> The approach relies upon run-time methods [15] to handle the general case. The use of the virtual processor approach for addressing the problem of active index-set identification for array statements involving block-cyclic distributions and that of redistribution of arrays with block-cyclic distributions was first reported by us in <ref> [7, 8] </ref>.
Reference: [9] <author> S. Hiranandani, K. Kennedy, J. Mellor-Crummey, and A. Sethi. </author> <title> Advanced compilation techniques for Fortran D. </title> <type> Technical Report CRPC-TR-93-338, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: The implementation of the Fortran-D compiler at Rice University is being extended to handle arrays with block-cyclic distributions <ref> [9, 10] </ref>. Their approach for determining communication sets is based upon computing the intersection of data index sets corresponding to the left-hand side and right-hand side array references in an assignment statement.
Reference: [10] <author> S. Hiranandani, K. Kennedy, J. Mellor-Crummey, and A. Sethi. </author> <title> Compilation techniques for block-cyclic distri-butions. </title> <booktitle> In Proc. of Intl. Conf. on Supercomputing, </booktitle> <pages> pages 392-403, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: The implementation of the Fortran-D compiler at Rice University is being extended to handle arrays with block-cyclic distributions <ref> [9, 10] </ref>. Their approach for determining communication sets is based upon computing the intersection of data index sets corresponding to the left-hand side and right-hand side array references in an assignment statement.
Reference: [11] <author> D. Knuth. </author> <title> Seminumerical Algorithms, </title> <booktitle> volume II of The Art of Computer Programming. </booktitle> <publisher> Addison Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <note> second edition edition, </note> <year> 1981. </year>
Reference-contexts: To determine the first array slice located on p, we solve i 2 s 2 c 2 P 2 = m 2 + p l 2 using Euclid's Extended GCD algorithm <ref> [2, 11] </ref>. Let i 2 and c 2 be the solution such that i 2 is the smallest non-negative integer for which the corresponding c 2 is also a non-negative integer.
Reference: [12] <author> C. Koelbel. </author> <title> Compile-time generation of communication for scientific programs. </title> <booktitle> In Proc. of Supercomputing '91, </booktitle> <pages> pages 101-110, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: If the arrays have only block or cyclic distributions, then the data index sets and the processor sets can be characterized using regular sections for closed forms <ref> [7, 8, 12] </ref>. However, for the general block-cyclic distribution, closed form characterization of these sets using simple regular sections is not possible. This paper presents a virtual processor approach to efficiently enumerate the data index sets and processor sets when arrays have block-cyclic distributions. <p> Performance results on a Cray T3D system are presented in Section 6. Conclusions and discussions are provided in Section 7. 2 Related Work The issue of generating code for message passing machines from a single address space program with data distribution directives was addressed by Koelbel in <ref> [12] </ref>, where a closed form characterization of the data index sets was provided for computations involving identically distributed arrays with either a block or a cyclic distribution. Closed form characterizations of the processor sets were not developed and arrays with 3 block-cyclic distributions were not considered. <p> However, the closed form expressions developed in Section 4 are not restricted to the owner computes-rule and can be either directly used or adapted to cases where the iterations are distributed using a regular distribution as in KALI <ref> [12] </ref>. For instance, consider the KALI-like code in Fig. 14 (a), in which the iterations of the specified loop and the arrays A and B are distributed among the processors using a block-cyclic distribution.
Reference: [13] <author> J. Merlin. </author> <title> Techniques for automatic parallelisation of `Distributed Fortran 90'. </title> <type> Technical Report SNARC 92-02, </type> <institution> Southampton Novel Architecture Research Center, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Programming languages, such as High Performance Fortran (HPF) [5], Fortran D [6], Vienna Fortran [3], and Distributed Fortran 90 <ref> [13] </ref> support a programming model based on a single address space and provide directives for the explicit specification of data distributions for arrays. Block, cyclic, and block-cyclic dis <p>- tributions are the regular data distributions provided in these languages. <p> Closed form characterizations of the processor sets were not developed and arrays with 3 block-cyclic distributions were not considered. Compilation of array statements in Distributed Fortran 90 is described in <ref> [13] </ref>, but Distributed Fortran 90 supports only the block distribution.
Reference: [14] <author> E. M. Paalvast, H. J. Sips, and A. J. van Gemund. </author> <title> Automatic parallel program generation and optimization from data decompositons. </title> <booktitle> In Proc. of Intl. Conf. on Parallel Processing, </booktitle> <volume> volume II, </volume> <pages> pages 124-131, </pages> <year> 1991. </year>
Reference-contexts: For an array expression of the form B (l 2 : u 2 : s 2 ) = f (A (l 1 : u 1 : s 1 )) with the arrays distributed using block-cyclic distributions, Paalvast et al. <ref> [14] </ref> present techniques to enumerate the portion of B which is modified by a processor p and the portions of array A which reside on p but are needed by the other processors.
Reference: [15] <author> J. Saltz, K. Crowley, R. Mirchandaney, and H. Berryman. </author> <title> Run-time scheduling and execution of loops on message passing machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 8(4) </volume> <pages> 303-312, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The Syracuse F90-D compiler's initial implementation uses compile-time characterization of communication only for block distributions [1] and relies upon run-time generation of schedules for the general block-cyclic case using the approach adopted by the PARTI system <ref> [15] </ref>. The implementation of the Fortran-D compiler at Rice University is being extended to handle arrays with block-cyclic distributions [9, 10]. <p> An approach similar to the FSM approach [4] for determining the local memory access sequence is used. Efficient techniques for the FSM table generation are presented for special cases. The approach relies upon run-time methods <ref> [15] </ref> to handle the general case. The use of the virtual processor approach for addressing the problem of active index-set identification for array statements involving block-cyclic distributions and that of redistribution of arrays with block-cyclic distributions was first reported by us in [7, 8]. <p> In general, runtime schemes as proposed in <ref> [15] </ref> will be required to handle vector valued subscripts. We have presented techniques for handling one-dimensional arrays. The virtual processor approach can be extended to handle multi-dimensional arrays. The communication sets are developed independently for each array dimension using the techniques presented for one-dimensional arrays.
Reference: [16] <author> J. Stichnoth, D. O'Hallaron, and T. Gross. </author> <title> Generating communication for array statements: Design, implemen-tation, and evaluation. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 4 </volume> <pages> 150-159, </pages> <year> 1994. </year>
Reference-contexts: With the virtual processor approach explicit local-to-global and global-to-local translation is not needed, even when the array sections differ in both distribution and access stride. Recent independent work by Stichnoth also addresses the problem of active index-set and communication- set identification for array statements involving block-cyclically distributed arrays <ref> [16, 17] </ref>. The formulation proposed has similarities to the virtualization scheme with a virtual-cyclic view at both the source and target array. However, the approach in [17] does not attempt a closed form characterization of the active processor- sets with respect to each source/destination processor.
Reference: [17] <author> J. M. Stichnoth. </author> <title> Efficient compilation of array statements for private memory multicomputers. </title> <type> Technical Report CMU-CS-93-109, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: With the virtual processor approach explicit local-to-global and global-to-local translation is not needed, even when the array sections differ in both distribution and access stride. Recent independent work by Stichnoth also addresses the problem of active index-set and communication- set identification for array statements involving block-cyclically distributed arrays <ref> [16, 17] </ref>. The formulation proposed has similarities to the virtualization scheme with a virtual-cyclic view at both the source and target array. However, the approach in [17] does not attempt a closed form characterization of the active processor- sets with respect to each source/destination processor. <p> Recent independent work by Stichnoth also addresses the problem of active index-set and communication- set identification for array statements involving block-cyclically distributed arrays [16, 17]. The formulation proposed has similarities to the virtualization scheme with a virtual-cyclic view at both the source and target array. However, the approach in <ref> [17] </ref> does not attempt a closed form characterization of the active processor- sets with respect to each source/destination processor.

References-found: 17

