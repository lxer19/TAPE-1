URL: http://www.cs.uchicago.edu/publications/tech-reports/TR-96-09.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Email: Email: gopalan@cs.uchicago.edu  
Phone: 1100  Phone  (312)-702-8487  
Title: Uniform Provability in Classical Logic  
Author: Gopalan Nadathur 
Note: Number: (312)-702-3497 Fax Number:  
Address: Ryerson Hall  58th Street Chicago, IL 60637  
Affiliation: Department of Computer Science University of Chicago  E  
Abstract: Uniform proofs are sequent calculus proofs with the following characteristic: the last step in the derivation of a complex formula at any stage in the proof is always the introduction of the top-level logical symbol of that formula. We investigate the relevance 
Abstract-found: 1
Intro-found: 1
Reference: [Gab85] <author> D.M. Gabbay. N-Prolog: </author> <title> An extension of Prolog with hypothetical implication. II. Logical foundations and negation as failure. </title> <journal> Journal of Logic Programming, </journal> <volume> 4 </volume> <pages> 251-283, </pages> <year> 1985. </year>
Reference-contexts: An interesting aspect of this proof procedure is that its rule for "backchaining" incorporates within it the restart mechanism of nH-Prolog [Lov87, Lov91] for dealing with disjunctive information in assumption sets and the mechanism with the same name of QNR-Prolog <ref> [Gab85] </ref> for handling hypotheticals in goals. 2 Logical preliminaries We will work within the framework of a first-order logic in this paper. The logical symbols that we assume as primitive are &gt;, ?, ^, _, , 9, and 8. <p> The resulting goals subsume (conjunctions of) the N-clauses of [GR84]. In this context, the RESTART rule and only (restricted versions of) the degenerate forms of the ATOMIC and BACKCHAIN rules are relevant and our proof procedure reduces to (a simple generalization of) the QNR-Prolog procedure described in <ref> [Gab85] </ref>. An important aspect of the proof procedure we have outlined above is the directional-ity present in the backchaining rules used in it.
Reference: [GR84] <author> D. Gabbay and U. Reyle. N-Prolog: </author> <title> An extension to Prolog with hypothetical implications I. </title> <journal> Journal of Logic Programming, </journal> <volume> 1(4) </volume> <pages> 319-355, </pages> <year> 1984. </year>
Reference-contexts: Finally suppose that disjunction and ? is disallowed in the heads of program clauses but that the syntax for these formulas and goals is otherwise unaltered from the one presented at the beginning of this section. The resulting goals subsume (conjunctions of) the N-clauses of <ref> [GR84] </ref>. In this context, the RESTART rule and only (restricted versions of) the degenerate forms of the ATOMIC and BACKCHAIN rules are relevant and our proof procedure reduces to (a simple generalization of) the QNR-Prolog procedure described in [Gab85].
Reference: [HM94] <author> Joshua Hodas and Dale Miller. </author> <title> Logic programming in a fragment of intuitionistic linear logic. </title> <journal> Information and Computation, </journal> <volume> 110(2) </volume> <pages> 327-365, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This criterion for logic programming has turned out to be of actual practical interest: it is satisfied by the logic of Horn clauses that underlies Prolog and has also been instrumental in the discovery of rich and useful but yet logically principled extensions to this language <ref> [HM94, Mil94, MNPS91, NM94, Pfe89] </ref>. Our interest in this paper is in a different, but related, utility for uniform proofs, namely, as a device for structuring the search for proofs of formulas.
Reference: [LMR92] <author> J. Lobo, J. Minker, and A. Rajasekar. </author> <title> Foundations of Disjunctive Logic Programming. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: of hereditary Harrop formulas [MNPS91] retains the second restriction but removes the first and, in addition, permits universal quantifiers to appear as the top-level symbol in G-formulas. (The declarative content of the resulting collections of formulas is, in addition, clarified by intuitionistic provability.) Finally, the logic underlying disjunctive logic programming <ref> [LMR92, NL95] </ref> retains the G-formulas of Horn clause logic but permits _ and 9 to appear at the top-level in D-formulas. We are ultimately interested in a uniform provability property for the language described above.
Reference: [LN94] <author> Donald W. Loveland and Gopalan Nadathur. </author> <title> Proof procedures for logic programming. </title> <type> Technical Report CS-1994-19, </type> <institution> Department of Computer Science, Duke University, </institution> <month> May </month> <year> 1994. </year> <note> To appear in Handbook of Logic in Artificial Intelligence and Logic Programming, </note> <editor> D. Gabbay, C. Hogger and A. Robinson (eds.), </editor> <publisher> Oxford University Press. </publisher>
Reference-contexts: Another matter worthy of consideration is the usefulness of the uniform proof notion and the general approach described here in structuring proof search in intuitionistic logic. 7 Acknowledgements This work has grown out of a prior collaboration with Donald Loveland <ref> [LN94, NL95] </ref> and has been enriched by his suggestions. We are also grateful to Robert Stark whose comments helped us discover an error in an earlier version of this paper. This work was started when the author was visiting Ludwig-Maximilians-Universitat Munchen.
Reference: [Lov87] <author> D.W. Loveland. </author> <title> Near-Horn Prolog. </title> <editor> In J. Lassez, editor, </editor> <booktitle> Logic Programming: Proc. of the Fourth Int'l Conf., </booktitle> <pages> pages 456-469. </pages> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: An interesting aspect of this proof procedure is that its rule for "backchaining" incorporates within it the restart mechanism of nH-Prolog <ref> [Lov87, Lov91] </ref> for dealing with disjunctive information in assumption sets and the mechanism with the same name of QNR-Prolog [Gab85] for handling hypotheticals in goals. 2 Logical preliminaries We will work within the framework of a first-order logic in this paper.
Reference: [Lov91] <author> D.W. Loveland. </author> <title> Near-Horn Prolog and beyond. </title> <journal> J. Automated Reasoning, </journal> <volume> 7 </volume> <pages> 1-26, </pages> <year> 1991. </year>
Reference-contexts: An interesting aspect of this proof procedure is that its rule for "backchaining" incorporates within it the restart mechanism of nH-Prolog <ref> [Lov87, Lov91] </ref> for dealing with disjunctive information in assumption sets and the mechanism with the same name of QNR-Prolog [Gab85] for handling hypotheticals in goals. 2 Logical preliminaries We will work within the framework of a first-order logic in this paper.
Reference: [LR91] <author> D.W. Loveland and D.W. Reed. </author> <title> A near-Horn Prolog for compilation. </title> <editor> In J. Lassez and G. Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robin-son. </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: From an examination of the proofs of Lemmas 8 and 12, it becomes apparent that the RESTART rule is redundant in this situation as well. The exclusion of this rule from our proof procedure yields one that has the essential structure of the Inheritance Near-Horn Prolog procedure (InH-Prolog) <ref> [LR91, RLS91] </ref>. Finally suppose that disjunction and ? is disallowed in the heads of program clauses but that the syntax for these formulas and goals is otherwise unaltered from the one presented at the beginning of this section. The resulting goals subsume (conjunctions of) the N-clauses of [GR84].
Reference: [Mil91] <author> Dale Miller. </author> <title> A logic programming language with lambda-abstraction, function variables, and simple unification. </title> <journal> Journal of Logic and Computation, </journal> <volume> 1(4) </volume> <pages> 497-536, </pages> <year> 1991. </year>
Reference-contexts: A fair degree of determinism can be imparted to such a search in situations where the uniform provability property holds of a logical language, and this fact has been utilized in the past in describing efficient proof procedures for suggested extensions to logic programming; see, for instance, <ref> [Mil91, Nad93] </ref>. However, there are logics of which the uniform provability property does not hold directly.
Reference: [Mil94] <editor> Dale Miller. A multiple-conclusion meta-logic. In S. Abramsky, editor, </editor> <booktitle> Ninth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 272-281, </pages> <address> Paris, France, July 1994. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 27 </pages>
Reference-contexts: This criterion for logic programming has turned out to be of actual practical interest: it is satisfied by the logic of Horn clauses that underlies Prolog and has also been instrumental in the discovery of rich and useful but yet logically principled extensions to this language <ref> [HM94, Mil94, MNPS91, NM94, Pfe89] </ref>. Our interest in this paper is in a different, but related, utility for uniform proofs, namely, as a device for structuring the search for proofs of formulas.
Reference: [MNPS91] <author> Dale Miller, Gopalan Nadathur, Frank Pfenning, and Andre Scedrov. </author> <title> Uniform proofs as a foundation for logic programming. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 51 </volume> <pages> 125-157, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Uniform proofs as identified in <ref> [MNPS91] </ref> capture a goal-directedness in proof search. In essence, a uniform proof is a sequent calculus proof that is found by constructing, at each stage, a proof for a single "goal" formula from a collection of assumptions. <p> One reason for interest in this category of proofs is that it provides a framework for interpreting the logical symbols in the formulas being proved as primitives for directing search and the inference rules pertaining to these symbols as specifications of their search semantics. This viewpoint is exploited in <ref> [MNPS91] </ref> in describing a proof-theoretic foundation for logic programming. In particular, classes of formulas and proof relations are thought to constitute a satisfactory basis for logic programming just in case provability in their context is equivalent to the existence of a uniform proof. <p> This criterion for logic programming has turned out to be of actual practical interest: it is satisfied by the logic of Horn clauses that underlies Prolog and has also been instrumental in the discovery of rich and useful but yet logically principled extensions to this language <ref> [HM94, Mil94, MNPS91, NM94, Pfe89] </ref>. Our interest in this paper is in a different, but related, utility for uniform proofs, namely, as a device for structuring the search for proofs of formulas. <p> We shall write ` O B to denote the existence of a uniform proof for ! B. Letting D and G denote collections of formulas and ` denote a chosen proof relation, an abstract logic programming language is defined in <ref> [MNPS91] </ref> as a triple hD; G; `i such that, for all finite subsets P of D and all G 2 G, P ` G if and only if P ` O G. <p> The logic of Horn clauses is obtained from it by not permitting (a) implications to appear as top-level symbols in G-formulas and (b) ?, _ and 9 to appear as top-level symbols in D-formulas. The language of hereditary Harrop formulas <ref> [MNPS91] </ref> retains the second restriction but removes the first and, in addition, permits universal quantifiers to appear as the top-level symbol in G-formulas. (The declarative content of the resulting collections of formulas is, in addition, clarified by intuitionistic provability.) Finally, the logic underlying disjunctive logic programming [LMR92, NL95] retains the G-formulas <p> This situation is in contrast to the one that holds in the context of the other mentioned languages 7 whose interpretation is based on classical logic: classical and intuitionistic provability are in-distinguishable relative to the Horn clause language <ref> [MNPS91] </ref> and the language underlying disjunctive logic programming [NL95]. The distinction between the two notions of provability notwithstanding, there is a correspondence between the classical provability of a sequent of the kind being considered and the intuitionistic provability of a closely related sequent.
Reference: [Nad93] <author> Gopalan Nadathur. </author> <title> A proof procedure for the logic of hereditary Harrop formulas. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11(1) </volume> <pages> 115-145, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: A fair degree of determinism can be imparted to such a search in situations where the uniform provability property holds of a logical language, and this fact has been utilized in the past in describing efficient proof procedures for suggested extensions to logic programming; see, for instance, <ref> [Mil91, Nad93] </ref>. However, there are logics of which the uniform provability property does not hold directly.
Reference: [NL95] <author> Gopalan Nadathur and Donald W. Loveland. </author> <title> Uniform proofs and disjunctive logic programming. </title> <editor> In Dexter Kozen, editor, </editor> <booktitle> Tenth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 148-155, </pages> <address> San Diego, California, June 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This result is actually a strengthening of the one in <ref> [NL95] </ref> in that this "modified" uniform provability property is shown to hold for an extension of disjunctive logic programming that permits hypothetical goals. We further note that all uses of the added formula can be factored into certain derived rules. <p> of hereditary Harrop formulas [MNPS91] retains the second restriction but removes the first and, in addition, permits universal quantifiers to appear as the top-level symbol in G-formulas. (The declarative content of the resulting collections of formulas is, in addition, clarified by intuitionistic provability.) Finally, the logic underlying disjunctive logic programming <ref> [LMR92, NL95] </ref> retains the G-formulas of Horn clause logic but permits _ and 9 to appear at the top-level in D-formulas. We are ultimately interested in a uniform provability property for the language described above. <p> This situation is in contrast to the one that holds in the context of the other mentioned languages 7 whose interpretation is based on classical logic: classical and intuitionistic provability are in-distinguishable relative to the Horn clause language [MNPS91] and the language underlying disjunctive logic programming <ref> [NL95] </ref>. The distinction between the two notions of provability notwithstanding, there is a correspondence between the classical provability of a sequent of the kind being considered and the intuitionistic provability of a closely related sequent. <p> Thus, one way to establish the above uniform provability property is to show that the same augmentation also leads to a coincidence between intuitionistic and uniform provability. A proof of this fact relative to the logic underlying disjunctive logic programming is provided in <ref> [NL95] </ref> and it turns out that this argument can be extended to the present context as well. <p> Our procedure is equivalent under these observations to the usual one employed for Horn clause logic. Along a different direction, suppose the syntax of program clauses in the Horn clause setting is enriched by 24 permitting disjunctions in their heads, thereby producing the logic underlying disjunctive logic programming <ref> [NL95] </ref>. From an examination of the proofs of Lemmas 8 and 12, it becomes apparent that the RESTART rule is redundant in this situation as well. <p> Another matter worthy of consideration is the usefulness of the uniform proof notion and the general approach described here in structuring proof search in intuitionistic logic. 7 Acknowledgements This work has grown out of a prior collaboration with Donald Loveland <ref> [LN94, NL95] </ref> and has been enriched by his suggestions. We are also grateful to Robert Stark whose comments helped us discover an error in an earlier version of this paper. This work was started when the author was visiting Ludwig-Maximilians-Universitat Munchen.
Reference: [NM94] <author> Gopalan Nadathur and Dale Miller. </author> <title> Higher-order logic programming. </title> <type> Technical Report CS-1994-38, </type> <institution> Department of Computer Science, Duke University, </institution> <note> Decem-ber 1994. To appear in Volume 5 of Handbook of Logic in Artificial Intelligence and Logic Programming, </note> <editor> D. Gabbay, C. Hogger and A. Robinson (eds.), </editor> <publisher> Oxford University Press. </publisher>
Reference-contexts: This criterion for logic programming has turned out to be of actual practical interest: it is satisfied by the logic of Horn clauses that underlies Prolog and has also been instrumental in the discovery of rich and useful but yet logically principled extensions to this language <ref> [HM94, Mil94, MNPS91, NM94, Pfe89] </ref>. Our interest in this paper is in a different, but related, utility for uniform proofs, namely, as a device for structuring the search for proofs of formulas.
Reference: [Pfe89] <author> Frank Pfenning. </author> <title> Elf: A language for logic definition and verified metaprogram-ming. </title> <booktitle> In Fourth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 313-322, </pages> <address> Pacific Grove, California, June 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This criterion for logic programming has turned out to be of actual practical interest: it is satisfied by the logic of Horn clauses that underlies Prolog and has also been instrumental in the discovery of rich and useful but yet logically principled extensions to this language <ref> [HM94, Mil94, MNPS91, NM94, Pfe89] </ref>. Our interest in this paper is in a different, but related, utility for uniform proofs, namely, as a device for structuring the search for proofs of formulas.
Reference: [Pla88] <author> David A. Plaisted. </author> <title> Non-Horn clause logic programming without contrapositives. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4(3) </volume> <pages> 287-325, </pages> <year> 1988. </year>
Reference-contexts: The modified problem reduction format of Plaisted <ref> [Pla88] </ref> is based on this approach and on noting that the use of assumption formulas of the form (B 1 ^ : : : ^ B n ) A where A is atomic can be driven, even in this context, by the atomic formula for which proof is sought. 6 Conclusion
Reference: [RLS91] <author> D.W. Reed, D.W. Loveland, and B.T. Smith. </author> <title> An alternative characterization of disjunctive logic programs. </title> <editor> In V. Saraswat and K. Ueda, editors, </editor> <booktitle> Logic Programming: Proc. of the 1991 Int'l Symp. </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: From an examination of the proofs of Lemmas 8 and 12, it becomes apparent that the RESTART rule is redundant in this situation as well. The exclusion of this rule from our proof procedure yields one that has the essential structure of the Inheritance Near-Horn Prolog procedure (InH-Prolog) <ref> [LR91, RLS91] </ref>. Finally suppose that disjunction and ? is disallowed in the heads of program clauses but that the syntax for these formulas and goals is otherwise unaltered from the one presented at the beginning of this section. The resulting goals subsume (conjunctions of) the N-clauses of [GR84].
Reference: [Sha92] <author> Natarajan Shankar. </author> <title> Proof search in the intuitionistic sequent calculus. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> Proceedings of the Eleventh International Conference on Automated Deduction - CADE-11, </booktitle> <pages> pages 522-536. </pages> <publisher> Springer Verlag, </publisher> <month> June </month> <year> 1992. </year> <month> 28 </month>
Reference-contexts: applied to any given sequent to produce a new sequent whose antecedent contains only D-formulas and whose succedent contains only G-formulas and that is equivalent to the original sequent from the perspective of classical provability; this transformation is the dual of (static) Skolemization and is referred to as Herbrandization in <ref> [Sha92] </ref>. The language presented above is also related at a syntactic level to others that have been proposed previously.
References-found: 18

