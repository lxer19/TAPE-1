URL: ftp://ftp.research.microsoft.com/pub/debull/sept97-a4draft.ps
Refering-URL: http://www.research.microsoft.com/research/db/debull/issues-list.htm
Root-URL: http://www.research.microsoft.com
Title: Special Issue on Improving Query Responsiveness Improving Responsiveness for Wide-Area Data Access. Statements of the
Keyword: Fatma Ozcan, Sena Nural, Pinar Koksal, Cem Evrendilek, Asuman Dogac 38 Execution Reordering for Tertiary Memory Access Sunita Sarawagi 46  
Note: Bulletin of the Technical Committee on Data Engineering September 1997 Vol. 20 No. 3 IEEE Computer Society Letters Letter from the Editor-in-Chief. .David Lomet 1 Letter from the Special Issue Editor. .Michael Franklin 2  Conference and Journal Notices  
Abstract: Laurent Amsaleg, Philippe Bonnet, Michael J. Franklin, Anthony Tomasic,Tolga Urhan 3 Processing Top N and Bottom N Queries . . . . . . . . . . . . . . . . . . Michael J. Carey and Donald Kossmann 12 Online Processing Redux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Joseph M. Hellerstein 20 Dynamic Query Processing in DIOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Ling Liu and Calton Pu 30 Dynamic Query Optimization in Multidatabases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
Abstract-found: 1
Intro-found: 1
Reference: [ACPS96] <author> S. Adali, K. Candan, Y. Papakonstantinou, and V. Subrahmanian. </author> <title> Query caching and optimization in distributed mediator systems. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf., </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: The approaches we describe differ significantly from previous dynamic query optimization techniques. One popular approach to dynamic query optimization has been to delay binding of certain execution choices until query execution time (e.g., <ref> [CG94, ACPS96, SAL + 96, LP97] </ref>). In these approaches the final query plan is produced immediately prior to execution and then remains fixed for the duration of the query. Such approaches, therefore, cannot adapt to unexpected problems that arise during the execution.
Reference: [AFT97] <author> L. Amsaleg, M. Franklin, and A. Tomasic. </author> <title> Dynamic query operator scheduling for wide-area remote access. </title> <type> Tech. </type> <institution> Report CS-TR-3811 and UMIACS-TR-97-54, Univ. of MD, College Park, </institution> <month> July </month> <year> 1997. </year>
Reference-contexts: Adapting to unexpected delays requires more flexible approaches, such as those we describe in the following sections. 3 Query Scrambling Using Query Scrambling <ref> [AFTU96, AFT97] </ref>, a query is initially executed according to the original plan and associated schedule generated by the query optimizer. <p> Two factors are relevant here: the speed of the network compared to the speed of the local disk (s) and the way data is obtained through the network (i.e., page-at-a-time versus streaming) <ref> [AFT97] </ref>. A second set of tradeoffs revolve around the question of whether to Reschedule individual operators (in a bottom-up fashion) or entire subtrees. Subtrees can be rescheduled (i.e., executed out of order) given sufficient available memory.
Reference: [AFTU96] <author> L. Amsaleg, M. Franklin, A. Tomasic, and T. Urhan. </author> <title> Scrambling query plans to cope with unexpected delays. </title> <booktitle> In Proc. of the Int. Conf. on Parallel and Distributed Information Systems (PDIS), </booktitle> <address> Miami Beach, Florida, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Unfortunately , the apparent randomness of such delays makes planning for them during query optimization impossible. We have developed two different but complementary approaches to address the issue of unpredictable delays in the wide-area environment. In <ref> [AFTU96] </ref> we introduced the concept of Query Scrambling, which reacts to delays by modifying the query execution plan on-the-fly so that progress can be made on other parts of the plan. <p> Adapting to unexpected delays requires more flexible approaches, such as those we describe in the following sections. 3 Query Scrambling Using Query Scrambling <ref> [AFTU96, AFT97] </ref>, a query is initially executed according to the original plan and associated schedule generated by the query optimizer. <p> This coordinator passively supervises the execution of the query and watches for remote access delays. When a delay is detected, the coordinator reacts by performing Scrambling actions that it deems to be advantageous based on the current state of the system. In <ref> [AFTU96] </ref> we described a simple, heuristic-based algorithm for choosing scrambling actions. In our current work, we have developed cost-based scrambling policies, that use a query optimizer to help direct Scrambling. <p> Thrashing could then arise due to operators that repeatedly stall and un-stall. In contrast, materializing base relations to the local disk requires only minimal memory, but of course, requires additional I/O. Finally, choosing which specific operator (s) to reschedule is also fundamental. In <ref> [AFTU96] </ref> the operator to reschedule was elected depending on the original order of the operators in the query before any rescheduling. As illustrated in [AFTU96], this simplistic policy has several severe performance drawbacks. <p> Finally, choosing which specific operator (s) to reschedule is also fundamental. In <ref> [AFTU96] </ref> the operator to reschedule was elected depending on the original order of the operators in the query before any rescheduling. As illustrated in [AFTU96], this simplistic policy has several severe performance drawbacks. As with Operator Synthesis, we have developed cost-based approaches to this problem that avoid the pitfalls of the simpler heuristic policies. <p> If the synthesized operations are too expensive Query Scrambling could result in a net degradation in performance. Operation Synthesis, therefore, has the potential to negate or even reverse the benefits of Scrambling if care is not taken. In <ref> [AFTU96] </ref> we used the simple heuristic of avoiding Cartesian products to prevent the creation of overly expensive joins. This approach has the advantage of avoiding the need to do cost-based optimization, but its performance was shown to be highly sensitive to the cardinalities of the new operators created.
Reference: [Ant93] <author> G. Antoshenkov. </author> <title> Dynamic query optimization in Rdb/VMS. </title> <booktitle> In Proc. of the Data Engineering Int. Conf., </booktitle> <pages> pages 538-547, </pages> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: In these approaches the final query plan is produced immediately prior to execution and then remains fixed for the duration of the query. Such approaches, therefore, cannot adapt to unexpected problems that arise during the execution. Approaches that do change the query plan during execution, have been proposed in <ref> [TTC + 90, Ant93, ONK + 96] </ref>, to account for inaccurate estimates of selectivities, cardinal-ities, or costs, etc. made during query optimization, and in [Sar95] to adjust to the location of data in a deep-store memory hierarchy.
Reference: [BT97] <author> P. Bonnet and A. Tomasic. </author> <title> Partial answers for unavailable data sources. </title> <type> Technical Report RR-3127, </type> <institution> INRIA, Rocquencourt, France, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: If the delays are too long, a user may not find it tolerable to wait for a complete answer. An approach to coping with longer-term delays is described in <ref> [BT97] </ref>. This latter approach allows the system to time-out on a data source or sources and return a partial answer , which encapsulates data obtained from available sources along with a description of the work remaining to be done. <p> For an interactive system, if a delay lasts longer than a user is willing to wait, then in effect, the delayed data is unavailable. Because Query Scrambling returns only complete answers to users, it does not solve the problem of unavailable data. <ref> [BT97] </ref> proposes an approach where in the presence of unavailable data, a partial answer is returned to the user. The motivation behind this approach is that even when one or more needed sites are unavailable, some useful work can be done with the data from the sites that are available. <p> To understand our approach, consider a query that involves several sites, such as the query of complete answer. Suppose, however, that site B is unavailable. In this case a complete answer to this query cannot be produced. The system proposed in <ref> [BT97] </ref> would perform the following steps: * Phase 1 each available site is contacted, and all processing based on available data is performed. The results that are obtained are materialized on the query source site. <p> Using parachute queries, the user can still collect useful information concerning patients or surgeons in case the complete answer to the original query cannot be computed. <ref> [BT97] </ref> proposes an initial algorithm for the extraction of information using parachute queries. When a parachute query is submitted, it is tested for containment against the queries generated in Phase 2.
Reference: [CG94] <author> R. Cole and G. Graefe. </author> <title> Optimization of dynamic query execution plans. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf., </booktitle> <pages> pages 150-160, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The approaches we describe differ significantly from previous dynamic query optimization techniques. One popular approach to dynamic query optimization has been to delay binding of certain execution choices until query execution time (e.g., <ref> [CG94, ACPS96, SAL + 96, LP97] </ref>). In these approaches the final query plan is produced immediately prior to execution and then remains fixed for the duration of the query. Such approaches, therefore, cannot adapt to unexpected problems that arise during the execution.
Reference: [Gra93] <author> G. Graefe. </author> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2) </volume> <pages> 73-170, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The actual schedule of the operators that comprise the query shown in Figure 1 (joins, selects, etc.) depends on the execution model used (e.g., iterators, activation records) and on whether or not parallelism is supported. For simplicity, assume an iterator-based scheduler <ref> [Gra93] </ref>, where the first data access would be to request a tuple of Relation A (from site 2). If there is a delay in accessing that site (say, because the site is temporarily down), then the scan of A is blocked until the site recovers.
Reference: [LP97] <author> L. Liu and C. Pu. </author> <title> A dynamic query scheduling framework for distributed and evolving information systems. </title> <booktitle> In The IEEE Int. Conf. on Distributed Computing Systems (ICDCS-17), </booktitle> <address> Baltimore, </address> <year> 1997. </year>
Reference-contexts: The approaches we describe differ significantly from previous dynamic query optimization techniques. One popular approach to dynamic query optimization has been to delay binding of certain execution choices until query execution time (e.g., <ref> [CG94, ACPS96, SAL + 96, LP97] </ref>). In these approaches the final query plan is produced immediately prior to execution and then remains fixed for the duration of the query. Such approaches, therefore, cannot adapt to unexpected problems that arise during the execution.
Reference: [ONK + 96] <author> F. Ozcan, S. Nural, P. Koksal, C. Evrendilek, and A. Dogac. </author> <title> Dynamic query optimization on a distributed object management platform. </title> <booktitle> In Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, Maryland, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: In these approaches the final query plan is produced immediately prior to execution and then remains fixed for the duration of the query. Such approaches, therefore, cannot adapt to unexpected problems that arise during the execution. Approaches that do change the query plan during execution, have been proposed in <ref> [TTC + 90, Ant93, ONK + 96] </ref>, to account for inaccurate estimates of selectivities, cardinal-ities, or costs, etc. made during query optimization, and in [Sar95] to adjust to the location of data in a deep-store memory hierarchy.
Reference: [SAL + 96] <author> M. Stonebraker, P. Aoki, W. Litwin, A. Pfeffer, A. Sah, J. Sidell, C. Staelin, and A. Yu. Mariposa: </author> <title> A wide-area distributed database system. </title> <journal> The VLDB Journal, </journal> <volume> 5(1) </volume> <pages> 48-63, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: The approaches we describe differ significantly from previous dynamic query optimization techniques. One popular approach to dynamic query optimization has been to delay binding of certain execution choices until query execution time (e.g., <ref> [CG94, ACPS96, SAL + 96, LP97] </ref>). In these approaches the final query plan is produced immediately prior to execution and then remains fixed for the duration of the query. Such approaches, therefore, cannot adapt to unexpected problems that arise during the execution.
Reference: [Sar95] <author> S. Sarawagi. </author> <title> Query processing and caching in tertiary memory. </title> <booktitle> In Proc. of the 21st Conference on Very Large Databases, </booktitle> <address> Zurich, </address> <year> 1995. </year>
Reference-contexts: Approaches that do change the query plan during execution, have been proposed in [TTC + 90, Ant93, ONK + 96], to account for inaccurate estimates of selectivities, cardinal-ities, or costs, etc. made during query optimization, and in <ref> [Sar95] </ref> to adjust to the location of data in a deep-store memory hierarchy. In contrast, our work is focused on adjusting to the time-varying performance of loosely-coupled data sources in a wide-area network, and as a result, we have developed quite different solutions.
Reference: [TRV96] <author> A. Tomasic, L. Raschid, and P. Valduriez. </author> <title> Scaling heterogeneous databases and the design of DISCO. </title> <booktitle> In The IEEE Int. Conf. on Distributed Computing Systems (ICDCS-16), </booktitle> <address> Hong Kong, </address> <year> 1996. </year>
Reference-contexts: This arrangement is typical of mediated database systems that integrate data from distributed, heterogeneous sources. 1 Note that as currently specified, both the Query Scrambling and Partial Answer approaches treat remote sources as black boxes, regardless of whether they provide raw data or the answers to sub-queries (e.g., <ref> [TRV96] </ref>). Therefore, both approaches operate solely at the query source site. 4 An example query execution plan for such an environment is shown in Figure 1. The query involves five different base relations stored at four different sites.

Reference: [ABF + 92] <author> E. Armstrong, S. Bobrowski, J. Frazzini, B. Linden, and M. Pratt. </author> <title> ORACLE7 Server Application Developer's Guide. Oracle Corporation, </title> <address> Redwood Shores, USA, </address> <year> 1992. </year>
Reference: [CG96] <author> S. Chaudhuri and L. Gravano. </author> <title> Optimizing queries over mulitmedia repositories. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 91-102, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference: [Cha96] <author> D. Chamberlin. </author> <title> Using the New DB2: IBM's Object-Relational Database System. </title> <publisher> Morgan-Kaufmann Publishers, </publisher> <address> San Mateo, USA, </address> <year> 1996. </year>
Reference: [CK97] <author> M. Carey and D. Kossmann. </author> <title> On saying "enough already!" in SQL. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 219-230, </pages> <address> Tucson, USA, </address> <month> May </month> <year> 1997. </year>
Reference: [Cor95] <author> IBM Corporation. </author> <title> DB2 application programming guide for common servers. Manual, </title> <year> 1995. </year>
Reference: [GD87] <author> G. Graefe and D. DeWitt. </author> <title> The EXODUS optimizer generator. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 160-172, </pages> <address> San Francisco, USA, </address> <month> May </month> <year> 1987. </year>
Reference: [Knu73] <author> D. Knuth. </author> <title> The Art of Computer Programming Sorting and Searching, volume 3. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, USA, </address> <year> 1973. </year>
Reference: [KS95] <author> R. Kimball and K. Strehlo. </author> <title> Why decision support fails and how to fix it. </title> <journal> ACM SIGMOD Record, </journal> <volume> 24(3) </volume> <pages> 92-97, </pages> <month> September </month> <year> 1995. </year>

Reference: [ACSW96] <author> Alexander Aiken, Jolly Chen, Michael Stonebraker, and Allison Woodruff. Tioga-2: </author> <title> A direct-manipulation database visualization environment. </title> <booktitle> In Proc. 12th IEEE International Conference on Data Engineering, </booktitle> <pages> pages 208-217, </pages> <address> New Orleans, </address> <month> February </month> <year> 1996. </year>
Reference: [Ant92] <author> Gennady Antoshenkov. </author> <title> Random Sampling from Pseudo-Ranked B+ Trees. </title> <booktitle> In Proc. 18th International Conference on Very Large Data Bases, </booktitle> <pages> pages 375-382, </pages> <address> Vancouver, </address> <month> August </month> <year> 1992. </year>
Reference: [Ant93] <author> Gennady Antoshenkov. </author> <title> Query Processing in DEC Rdb: Major Issues and Future Challenges. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 16(4) </volume> <pages> 42-52, </pages> <year> 1993. </year> <month> 28 </month>
Reference-contexts: In these approaches the final query plan is produced immediately prior to execution and then remains fixed for the duration of the query. Such approaches, therefore, cannot adapt to unexpected problems that arise during the execution. Approaches that do change the query plan during execution, have been proposed in <ref> [TTC + 90, Ant93, ONK + 96] </ref>, to account for inaccurate estimates of selectivities, cardinal-ities, or costs, etc. made during query optimization, and in [Sar95] to adjust to the location of data in a deep-store memory hierarchy.
Reference: [Aok97] <author> Paul M. Aoki. </author> <title> Generalizing "Search" in Generalized Search Trees. </title> <note> Submitted for publication, </note> <month> June </month> <year> 1997. </year>
Reference: [AS94] <author> Rakesh Agrawal and Ramakrishnan Srikant. </author> <title> Fast Algorithms for Mining Association Rules. </title> <booktitle> In Proc. 20th International Conference on Very Large Data Bases, </booktitle> <pages> pages 487-499, </pages> <address> Santiago, </address> <month> September </month> <year> 1994. </year>
Reference: [ASY97] <author> Ron Avnur, Jonathan Spier, and Shu-Yuen Didi Yao. </author> <title> GOLD (GUI OnLine Data) Mining for Association Rules. Class project, </title> <editor> CS286, U. C. </editor> <address> Berkeley, </address> <month> May </month> <year> 1997. </year>
Reference: [AZ96] <author> Gennady Antoshenkov and Mohamed Ziauddin. </author> <title> Query Processing and Optimization in Oracle Rdb. </title> <journal> VLDB Journal, </journal> <volume> 5(4) </volume> <pages> 229-237, </pages> <year> 1996. </year>
Reference: [BDD + 89] <author> Philip A. Bernstein, Umeshwar Dayal, David J. DeWitt, Dieter Gawlick, Jim Gray, Matthias Jarke, Bruce G. Lindsay, Peter C. Lockemann, David Maier, Erich J. Neuhold, Andreas Reuter, Lawrence A. Rowe, Hans-Jorg Schek, Joachim W. Schmidt, Michael Schrefl, and Michael Stonebraker. </author> <title> Future Directions in DBMS Research | The Laguna Beach Report. </title> <journal> ACM SIGMOD Record, </journal> <volume> 18(1) </volume> <pages> 17-26, </pages> <year> 1989. </year>
Reference: [Fal96] <author> Christos Faloutsos. </author> <title> Searching Multimedia Databases by Content. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1996. </year>
Reference: [FB74] <author> R. A. Finkel and J. L. Bentley. Quad-Trees: </author> <title> A Data Structure For Retrieval On Composite Keys. </title> <journal> ACTA Informatica, </journal> <volume> 4(1) </volume> <pages> 1-9, </pages> <year> 1974. </year>
Reference: [GBLP96] <author> Jim Gray, Adam Bosworth, Andrew Layman, and Hamid Pirahesh. </author> <title> Data Cube: A Relational Aggregation Operator Generalizing Group-By, Cross-Tab, and Sub-Totals. </title> <type> Technical Report MSR-TR-95-22, </type> <institution> Microsoft Research, </institution> <year> 1996. </year>
Reference: [Haa96] <author> P. J. Haas. </author> <title> Hoeffding Inequalities for Join-Selectivity Estimation and Online Aggregation. </title> <institution> IBM Research Report RJ 10040, IBM Almaden Research Center, </institution> <address> San Jose, CA, </address> <year> 1996. </year>
Reference: [Haa97a] <author> Peter J. Haas. </author> <title> Large-Sample and Deterministic Confidence Intervals for Online Aggregation. </title> <booktitle> In Proc. 9th International Conference on Scientific and Statistical Database Management, </booktitle> <address> Olympia, WA, </address> <month> August </month> <year> 1997. </year>
Reference: [Haa97b] <author> Peter J. Haas. </author> <type> Personal communication. </type> <month> May </month> <year> 1997. </year>
Reference: [HHW97] <author> Joseph M. Hellerstein, Peter J. Haas, and Helen J. Wang. </author> <title> Online Aggregation. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Tucson, </address> <month> May </month> <year> 1997. </year>
Reference: [HNP95] <author> Joseph M. Hellerstein, Jeffrey F. Naughton, and Avi Pfeffer. </author> <title> Generalized Search Trees for Database Systems. </title> <booktitle> In Proc. 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference: [LRB + 97] <author> Miron Livny, Raghu Ramakrishnan, Kevin S. Beyer, Guangshun Chen, Donko Donjerkovic, Shilpa Lawande, and Jussi Myllymaki. </author> <title> DEVise: Integrated Querying and Visualization of Large Datasets. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Tucson, </address> <month> May </month> <year> 1997. </year>
Reference: [NBC + 94] <author> Chris Nyberg, Tom Barclay, Zarka Cvetanovic, Jim Gray, and David B. Lomet. AlphaSort: </author> <title> A RISC Machine Sort. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 233-242, </pages> <address> Minneapolis, </address> <month> May </month> <year> 1994. </year>
Reference: [Olk93] <author> Frank Olken. </author> <title> Random Sampling from Databases. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1993. </year>
Reference: [Ore86] <author> J. A. Orenstein. </author> <title> Spatial Query Processing in an Object-Oriented Database System. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 326-336, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1986. </year>
Reference: [PF93] <author> K. Perlin and D. Fox. </author> <title> Pad: An Alternative Approach to the Computer Interface. </title> <booktitle> In Proc. ACM SIGGRAPH, </booktitle> <pages> pages 57-64, </pages> <address> Anaheim, </address> <year> 1993. </year>
Reference: [SAD + 93] <author> Michael Stonebraker, Rakesh Agrawal, Umeshwar Dayal, Erich J. Neuhold, and Andreas Reuter. </author> <title> Database Research at the Crossroads: The Vienna Update. </title> <booktitle> In Proc. 19th International Conference on Very Large Data Bases, </booktitle> <pages> pages 688-692, </pages> <address> Dublin, </address> <month> August </month> <year> 1993. </year>
Reference: [SSU90] <author> Abraham Silberschatz, Michael Stonebraker, and Jeffrey D. Ullman. </author> <title> Database Systems: Achievements and Opportunities | The "Lagunita" Report. </title> <journal> ACM SIGMOD Record, </journal> <volume> 19(4) </volume> <pages> 6-22, </pages> <year> 1990. </year>

References-found: 43

