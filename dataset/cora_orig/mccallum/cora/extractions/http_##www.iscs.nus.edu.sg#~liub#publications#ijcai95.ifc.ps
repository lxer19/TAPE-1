URL: http://www.iscs.nus.edu.sg/~liub/publications/ijcai95.ifc.ps
Refering-URL: 
Root-URL: 
Title: Increasing Functional Constraints Need to Be Checked Only Once  
Author: Bing Liu 
Address: Lower Kent Ridge Road, Singapore 0511 Republic of Singapore  
Affiliation: Department of Information Systems and Computer Science National University of Singapore  
Abstract: Central to solving Constraint Satisfaction Problem (CSP) is the problem of consistency check. Past research has produced many general and specific consistency algorithms. Specific algorithms are efficient specializations of the general ones for specific constraints. Functional, anti-functional and monotonic constraints are three important classes of specific constraints. They form the basis of the current constraint programming languages. This paper proposes a more efficient method for checking an important subclass of functional constraints, increasing functional constraints. Rather than checking them many times as in a typical consistency check process, in the new method they (almost all of them) only need to be checked once. This results in a substantial saving in computation.
Abstract-found: 1
Intro-found: 1
Reference: [Bessiere and Cordier, 1993] <author> C. Bessiere and M Cordier. </author> <title> Arc-consistency and arc-consistency again. </title> <booktitle> AAAI-93, </booktitle> <pages> pages 108-113, </pages> <year> 1993. </year>
Reference-contexts: In this paper, we are also concerned with arc consistency of binary constraints, in particular, increasing functional constraints. Over the past two decades, a number of general arc consistency algorithms have been proposed, e.g., AC-3 [Mackworth, 1977], AC-4 [Mohr and Henderson, 1986], AC-5 [Hentenryck et al., 1992] and AC-6 <ref> [Bessiere and Cordier, 1993] </ref>. Apart from the general algorithms, many specific methods were also designed which are specializations of the general ones for specific constraints [Lauriere, 1978; Mohr and Masini, 1988, Hentenryck et al., 1992]. <p> An example of an IFC is X = Y + 5. Most earlier algorithms (e.g., AC-3 [Mackworth, 1977], AC-4 [Mohr and Henderson, 1986] and also AC-6 <ref> [Bessiere and Cordier, 1993] </ref>) do not use the semantics of constraints to achieve better efficiency. AC-5 [Hentenryck et al., 1992] is different as the implementations of its two procedures A RC C ONS and L OCAL A RC C ONS are left open.
Reference: [Charme, 1990] <author> Charme Reference Manual. </author> <booktitle> Artificial Intelligence Development Centre, Bull, </booktitle> <year> 1990. </year>
Reference-contexts: For instance, in [Hentenryck et al., 1992], AC-5 is specialized for functional, anti-functional and monotonic constraints, and their piecewise generalizations (see their formal definitions in [Hentenryck et al., 1992]). Recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [Hentenryck, 1989], Charme <ref> [Charme, 1990] </ref>, Ilog Solver [Ilog, 1993], etc., for solving practical combinatorial problems, such as scheduling, sequencing and resource allocations [Dincbas et al., 1990; Hentenryck, 1989]. The basic constraints used in these languages are special cases of functional, anti-functional and monotonic constraints. <p> Most commonly used specific consistency methods are for functional, anti-functional, and monotonic constraints [Hentenryck, 1989; Hentenryck et al., 1992; Mohr and Masini, 1988]. Their special cases also form the core of the current constraint programming languages, such as CHIP [Hentenryck, 1989], Charme <ref> [Charme, 1990] </ref>, Ilog Solver [Ilog, 1993], etc. AC-5 [Hentenryck et al., 1992] is a generic arc consistency algorithm, i.e., it allows both general and specific checking of constraints. In [Hentenryck et al., 1992], it is specialized for functional constraints, anti-functional constraints, monotonic constraints, and their piecewise constraints.
Reference: [Dincbas et al., 1990] <author> M. Dincbas, et al. </author> <title> Solving large combinatiorial problem in logic programming. </title> <journal> Journal of Logic Prggramming, </journal> <volume> 8 </volume> <pages> 75-93, </pages> <year> 1990. </year>
Reference-contexts: Recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc., for solving practical combinatorial problems, such as scheduling, sequencing and resource allocations <ref> [Dincbas et al., 1990; Hentenryck, 1989] </ref>. The basic constraints used in these languages are special cases of functional, anti-functional and monotonic constraints. In this paper, we propose a more efficient consistency technique for a frequently used subclass of functional constraints, namely, increasing functional constraints (IFC).
Reference: [Ilog, 1993] <editor> Ilog Solver Reference Manual, ILOG, </editor> <year> 1993. </year>
Reference-contexts: Recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver <ref> [Ilog, 1993] </ref>, etc., for solving practical combinatorial problems, such as scheduling, sequencing and resource allocations [Dincbas et al., 1990; Hentenryck, 1989]. The basic constraints used in these languages are special cases of functional, anti-functional and monotonic constraints. <p> Most commonly used specific consistency methods are for functional, anti-functional, and monotonic constraints [Hentenryck, 1989; Hentenryck et al., 1992; Mohr and Masini, 1988]. Their special cases also form the core of the current constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver <ref> [Ilog, 1993] </ref>, etc. AC-5 [Hentenryck et al., 1992] is a generic arc consistency algorithm, i.e., it allows both general and specific checking of constraints. In [Hentenryck et al., 1992], it is specialized for functional constraints, anti-functional constraints, monotonic constraints, and their piecewise constraints.
Reference: [Liu and Ku, 1992] <author> Bing Liu and Y W. Ku. ConstraintLisp: </author> <title> an objectoriented constraint programming language. </title> <journal> SIGPLAN Notices, </journal> <volume> 27(11) </volume> <pages> 17-26, </pages> <year> 1992. </year>
Reference: [Lauriere, 1978] <author> J. Lauriere. </author> <title> A language and a program for stating and solving combinatorial problems. </title> <journal> Artificial Intelligence, </journal> <volume> 10 </volume> <pages> 29-127, </pages> <year> 1978. </year>
Reference-contexts: Apart from the general algorithms, many specific methods were also designed which are specializations of the general ones for specific constraints <ref> [Lauriere, 1978; Mohr and Masini, 1988, Hentenryck et al., 1992] </ref>. These methods typically exploit the semantics of individual constraints, and are more efficient in checking these constraints. <p> Although our technique is still O (ed), experiments have shown it is more efficient than that in AC-5. Mohr and Masini [Mohr and Masini, 1988] discovered independently that binary equations, inequalities, and disequations can be solved in O (ed). Earlier work on constraint solvers (e.g., ALICE <ref> [Lauriere, 1978] </ref>) and constraint programming languages (e.g., CHIP [Hentenryck, 1989]) also presented special algorithms for these types of constraints. However, equations in all these methods need to be checked many times. 7. Conclusion We have proposed a new consistency technique for IFCs.
Reference: [Mackworth, 1977] <author> A. K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: In this paper, we are also concerned with arc consistency of binary constraints, in particular, increasing functional constraints. Over the past two decades, a number of general arc consistency algorithms have been proposed, e.g., AC-3 <ref> [Mackworth, 1977] </ref>, AC-4 [Mohr and Henderson, 1986], AC-5 [Hentenryck et al., 1992] and AC-6 [Bessiere and Cordier, 1993]. Apart from the general algorithms, many specific methods were also designed which are specializations of the general ones for specific constraints [Lauriere, 1978; Mohr and Masini, 1988, Hentenryck et al., 1992]. <p> Observe that if i - j (or equivalently j - i) then the constraint C ij must be functional, and we call such a constraint increasing functional constraint (IFC). An example of an IFC is X = Y + 5. Most earlier algorithms (e.g., AC-3 <ref> [Mackworth, 1977] </ref>, AC-4 [Mohr and Henderson, 1986] and also AC-6 [Bessiere and Cordier, 1993]) do not use the semantics of constraints to achieve better efficiency.
Reference: [Mohr and Henderson, 1986] <author> R. Mohr and T.C. Henderson. </author> <title> Arc and path consistency revisited. </title> <journal> Artificial Intelligence, </journal> <volume> 28 </volume> <pages> 225-233, </pages> <year> 1986. </year>
Reference-contexts: In this paper, we are also concerned with arc consistency of binary constraints, in particular, increasing functional constraints. Over the past two decades, a number of general arc consistency algorithms have been proposed, e.g., AC-3 [Mackworth, 1977], AC-4 <ref> [Mohr and Henderson, 1986] </ref>, AC-5 [Hentenryck et al., 1992] and AC-6 [Bessiere and Cordier, 1993]. Apart from the general algorithms, many specific methods were also designed which are specializations of the general ones for specific constraints [Lauriere, 1978; Mohr and Masini, 1988, Hentenryck et al., 1992]. <p> Observe that if i - j (or equivalently j - i) then the constraint C ij must be functional, and we call such a constraint increasing functional constraint (IFC). An example of an IFC is X = Y + 5. Most earlier algorithms (e.g., AC-3 [Mackworth, 1977], AC-4 <ref> [Mohr and Henderson, 1986] </ref> and also AC-6 [Bessiere and Cordier, 1993]) do not use the semantics of constraints to achieve better efficiency. AC-5 [Hentenryck et al., 1992] is different as the implementations of its two procedures A RC C ONS and L OCAL A RC C ONS are left open.
Reference: [Mohr and Masini, 1988] <author> R. Mohr and G. Masini. </author> <title> Running efficiently arc consistency. </title> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1988, </year> <pages> pages 217-231. </pages>
Reference-contexts: Apart from the general algorithms, many specific methods were also designed which are specializations of the general ones for specific constraints <ref> [Lauriere, 1978; Mohr and Masini, 1988, Hentenryck et al., 1992] </ref>. These methods typically exploit the semantics of individual constraints, and are more efficient in checking these constraints. <p> Related Work Many general and specific arc consistency techniques have been developed in the past. In real applications, specific methods perhaps play a more important role than general ones because of their efficiency. Most commonly used specific consistency methods are for functional, anti-functional, and monotonic constraints <ref> [Hentenryck, 1989; Hentenryck et al., 1992; Mohr and Masini, 1988] </ref>. Their special cases also form the core of the current constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc. <p> The algorithm achieves O (ed) for these constraint classes. Our work is motivated by this algorithm. It is an improvement to AC-5's special technique for functional constraints. Although our technique is still O (ed), experiments have shown it is more efficient than that in AC-5. Mohr and Masini <ref> [Mohr and Masini, 1988] </ref> discovered independently that binary equations, inequalities, and disequations can be solved in O (ed). Earlier work on constraint solvers (e.g., ALICE [Lauriere, 1978]) and constraint programming languages (e.g., CHIP [Hentenryck, 1989]) also presented special algorithms for these types of constraints.
Reference: [Perlin, 1991] <author> M. Perlin. </author> <title> Arc consistency for factorable relataions. </title> <booktitle> In Proceedings of Third International Conf. on Tools for AI, </booktitle> <pages> pages 340-345, </pages> <year> 1991. </year>
Reference: [Hentenryck, 1989] <author> P. Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: For instance, in [Hentenryck et al., 1992], AC-5 is specialized for functional, anti-functional and monotonic constraints, and their piecewise generalizations (see their formal definitions in [Hentenryck et al., 1992]). Recent years, the CSP model has been implemented in constraint programming languages, such as CHIP <ref> [Hentenryck, 1989] </ref>, Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc., for solving practical combinatorial problems, such as scheduling, sequencing and resource allocations [Dincbas et al., 1990; Hentenryck, 1989]. The basic constraints used in these languages are special cases of functional, anti-functional and monotonic constraints. <p> Recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc., for solving practical combinatorial problems, such as scheduling, sequencing and resource allocations <ref> [Dincbas et al., 1990; Hentenryck, 1989] </ref>. The basic constraints used in these languages are special cases of functional, anti-functional and monotonic constraints. In this paper, we propose a more efficient consistency technique for a frequently used subclass of functional constraints, namely, increasing functional constraints (IFC). <p> In particular, we compare two versions of AC-3: AC-3S and AC-3 + . AC-3S uses the special handling techniques in <ref> [Hentenryck, 1989] </ref> (it cannot use those in AC-5 because of the representation limitation of AC-3) for equations, inequalities and disequations. AC-3 + uses our new method for IFCs without changing the techniques for non-IFC equations, inequalities and disequations. All the algorithms are implemented in CMU Common Lisp on SPARC-2. <p> Related Work Many general and specific arc consistency techniques have been developed in the past. In real applications, specific methods perhaps play a more important role than general ones because of their efficiency. Most commonly used specific consistency methods are for functional, anti-functional, and monotonic constraints <ref> [Hentenryck, 1989; Hentenryck et al., 1992; Mohr and Masini, 1988] </ref>. Their special cases also form the core of the current constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc. <p> Most commonly used specific consistency methods are for functional, anti-functional, and monotonic constraints [Hentenryck, 1989; Hentenryck et al., 1992; Mohr and Masini, 1988]. Their special cases also form the core of the current constraint programming languages, such as CHIP <ref> [Hentenryck, 1989] </ref>, Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc. AC-5 [Hentenryck et al., 1992] is a generic arc consistency algorithm, i.e., it allows both general and specific checking of constraints. In [Hentenryck et al., 1992], it is specialized for functional constraints, anti-functional constraints, monotonic constraints, and their piecewise constraints. <p> Mohr and Masini [Mohr and Masini, 1988] discovered independently that binary equations, inequalities, and disequations can be solved in O (ed). Earlier work on constraint solvers (e.g., ALICE [Lauriere, 1978]) and constraint programming languages (e.g., CHIP <ref> [Hentenryck, 1989] </ref>) also presented special algorithms for these types of constraints. However, equations in all these methods need to be checked many times. 7. Conclusion We have proposed a new consistency technique for IFCs. It checks most IFCs only once rather than many times.
Reference: [Hentenryck et al., 1992] <author> P.V. Hentenryck, Y. Deville and C-M. Teng. </author> <title> A generic arc-consistency algorithm and its specifications. </title> <journal> Artificial Intelligence, </journal> <volume> 27 </volume> <pages> 291-322, </pages> <year> 1992. </year>
Reference-contexts: In this paper, we are also concerned with arc consistency of binary constraints, in particular, increasing functional constraints. Over the past two decades, a number of general arc consistency algorithms have been proposed, e.g., AC-3 [Mackworth, 1977], AC-4 [Mohr and Henderson, 1986], AC-5 <ref> [Hentenryck et al., 1992] </ref> and AC-6 [Bessiere and Cordier, 1993]. Apart from the general algorithms, many specific methods were also designed which are specializations of the general ones for specific constraints [Lauriere, 1978; Mohr and Masini, 1988, Hentenryck et al., 1992]. <p> Apart from the general algorithms, many specific methods were also designed which are specializations of the general ones for specific constraints <ref> [Lauriere, 1978; Mohr and Masini, 1988, Hentenryck et al., 1992] </ref>. These methods typically exploit the semantics of individual constraints, and are more efficient in checking these constraints. <p> These methods typically exploit the semantics of individual constraints, and are more efficient in checking these constraints. For instance, in <ref> [Hentenryck et al., 1992] </ref>, AC-5 is specialized for functional, anti-functional and monotonic constraints, and their piecewise generalizations (see their formal definitions in [Hentenryck et al., 1992]). <p> These methods typically exploit the semantics of individual constraints, and are more efficient in checking these constraints. For instance, in <ref> [Hentenryck et al., 1992] </ref>, AC-5 is specialized for functional, anti-functional and monotonic constraints, and their piecewise generalizations (see their formal definitions in [Hentenryck et al., 1992]). Recent years, the CSP model has been implemented in constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc., for solving practical combinatorial problems, such as scheduling, sequencing and resource allocations [Dincbas et al., 1990; Hentenryck, 1989]. <p> An example of an IFC is X = Y + 5. Most earlier algorithms (e.g., AC-3 [Mackworth, 1977], AC-4 [Mohr and Henderson, 1986] and also AC-6 [Bessiere and Cordier, 1993]) do not use the semantics of constraints to achieve better efficiency. AC-5 <ref> [Hentenryck et al., 1992] </ref> is different as the implementations of its two procedures A RC C ONS and L OCAL A RC C ONS are left open. This means that for different constraints different algorithms could be used. <p> This means that for different constraints different algorithms could be used. A RC C ONS checks an arc when it is first encountered, while L OCAL A RC C ONS rechecks it if its consistency is broken by consistency check of other arcs. <ref> [Hentenryck et al., 1992] </ref> provides the special A RC C ONS and L OCAL A RC C ONS procedures for checking functional, anti-functional and monotonic constraints in O (ed). In this paper, we call these two procedures the initial check procedure and the recheck procedure respectively for intuitive reasons. <p> Increasing equations, such as X = aY + b, where X and Y are variables, a and b are constants and a is positive, are special cases of IFCs. Since AC-3 may be preferable in practice <ref> [Hentenryck et al., 1992] </ref> because of its space efficiency, we also compare the performance of our technique with the existing one in the context of AC-3. In particular, we compare two versions of AC-3: AC-3S and AC-3 + . <p> Related Work Many general and specific arc consistency techniques have been developed in the past. In real applications, specific methods perhaps play a more important role than general ones because of their efficiency. Most commonly used specific consistency methods are for functional, anti-functional, and monotonic constraints <ref> [Hentenryck, 1989; Hentenryck et al., 1992; Mohr and Masini, 1988] </ref>. Their special cases also form the core of the current constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc. <p> Their special cases also form the core of the current constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc. AC-5 <ref> [Hentenryck et al., 1992] </ref> is a generic arc consistency algorithm, i.e., it allows both general and specific checking of constraints. In [Hentenryck et al., 1992], it is specialized for functional constraints, anti-functional constraints, monotonic constraints, and their piecewise constraints. The algorithm achieves O (ed) for these constraint classes. <p> Their special cases also form the core of the current constraint programming languages, such as CHIP [Hentenryck, 1989], Charme [Charme, 1990], Ilog Solver [Ilog, 1993], etc. AC-5 <ref> [Hentenryck et al., 1992] </ref> is a generic arc consistency algorithm, i.e., it allows both general and specific checking of constraints. In [Hentenryck et al., 1992], it is specialized for functional constraints, anti-functional constraints, monotonic constraints, and their piecewise constraints. The algorithm achieves O (ed) for these constraint classes. Our work is motivated by this algorithm. It is an improvement to AC-5's special technique for functional constraints.
Reference: [Waltz, 1972] <author> D. Waltz. </author> <title> Generating Semantic Descriptions from Drawings of Scenes with Shadows, </title> <publisher> Tech Rept. AI271, MIT, </publisher> <address> Cambridge, MA, </address> <year> 1972. </year>
References-found: 13

