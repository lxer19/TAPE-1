URL: http://www.cs.bu.edu/techreports/94-004-e-grammar-parser.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: shaban@cs.bu.edu  
Title: A Hybrid GLR Algorithm for Parsing with Epsilon Grammars  
Author: Marwan Shaban 
Address: 111 Cummington Street Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: March 22, 1994 BU-CS Tech Report # 94-004 Abstract We give a hybrid algorithm for parsing *-grammars based on Tomita's non*-grammar parsing algorithm ([Tom86]) and Nozohoor-Farshi's *- grammar recognition algorithm ([NF91]). The hybrid parser handles the same set of grammars handled by Nozohoor-Farshi's recognizer. The algorithm's details and an example of its use are given. We also discuss the deployment of the hybrid algorithm within a GB parser, and the reason an *-grammar parser is needed in our GB parser. 
Abstract-found: 1
Intro-found: 1
Reference: [Fon91] <author> Sandiway Fong. </author> <title> Computational Properties of Principle-Based Grammatical Theories. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, MIT, </institution> <address> Cambridge, Mass., </address> <year> 1991. </year> <title> 2 A cyclic grammar is one where a grammar symbol can derive itself after a positive number of productions are applied, i.e., </title> <type> ff + 21 </type>
Reference-contexts: We conclude that Tomita's *-grammar parsing algorithm will not work for us. 3 Fong's Method for Parsing with *- grammars In implementing his GB parser, Fong <ref> [Fon91] </ref> implemented a variation of GLR parsing using a recursive control flow mechanism. His recursive control flow precludes using Nozohoor-Farshi's *-grammar scheme, yet Fong manages to parse with an s-structure covering grammar which contains *-productions. Fong's solution, described on pages 142-145 of [Fon91], depends on an offline analysis of the S-structure <p> *- grammars In implementing his GB parser, Fong <ref> [Fon91] </ref> implemented a variation of GLR parsing using a recursive control flow mechanism. His recursive control flow precludes using Nozohoor-Farshi's *-grammar scheme, yet Fong manages to parse with an s-structure covering grammar which contains *-productions. Fong's solution, described on pages 142-145 of [Fon91], depends on an offline analysis of the S-structure grammar to deduce which nonterminals may cause a problem, and how. Fong then uses a new "structure" stack which 4 holds housekeeping information used by specially-coded hooks in the LR parser.
Reference: [NF91] <author> Rahman Nozohoor-Farshi. </author> <title> GLR parsing for *-grammars. In Masaru Tomita, editor, Generalized LR Parsing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1991. </year>
Reference-contexts: The original incarnation of this parsing method couldn't handle *-grammars. To incorporate that ability, two algorithms related to the original GLR parsing algorithm have been proposed. A parsing algorithm for *-grammars was proposed by Tomita (in [Tom86]), and a recognition algorithm for *-grammars was proposed by Nozohoor-Farshi (in <ref> [NF91] </ref>). Nozohoor-Farshi's recognizer, however, handles a larger class of *-grammars than Tomita's parsing method does. We describe here a GLR parsing algorithm based on Nozohoor-Farshi's recognition algorithm for *-grammars and Tomita's parsing algorithm for non*-grammars. <p> As an example of a grammar that cannot be used in conjunction with Tomita's parsing method, Nozohoor-Farshi <ref> [NF91] </ref> gives Grammar 1 shown below. G 1 : (2) S ! x 3 string xbbb. Tomita's *-grammar parser goes into an infinite loop when confronted with the above grammar and the input sentence xbbb 2 L (G 1 ). <p> G 1 : (2) S ! x 3 string xbbb. Tomita's *-grammar parser goes into an infinite loop when confronted with the above grammar and the input sentence xbbb 2 L (G 1 ). The graph-structured stack it creates is shown in Figure 1 (Figure 5.2 in <ref> [NF91] </ref>). The reason Tomita's algorithm cannot handle this sentence is that it doesn't know how many empty A nonterminals to hypothesize before shifting the terminal x. In the context of our GB parsing, it is easy to imagine why Tomita's algorithm would have the same problem. <p> If the s-structure grammar changes, the off-line analysis must be redone to make sure that the LR parser will still handle the *-production-containing grammar correctly. A better solution would be to extend Tomita's algorithm to allow it to handle *-grammars. Nozohoor-Farshi's recognition method <ref> [NF91] </ref> gives just such an extension. However, this method, as Nozohoor-Farshi gives it, applies only to the normal (Tomita-style) control flow which uses a graph-structured stack.
Reference: [Sha93] <author> Marwan Shaban. </author> <title> A Minimal GB Parser. </title> <type> Technical Report 93-013, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, Mass., </address> <year> 1993. </year>
Reference: [Tom86] <author> Masaru Tomita. </author> <title> Efficient Parsing for Natural Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1986. </year>
Reference-contexts: While it is possible to convert an epsilon-grammar into one without epsilon-productions, it is unacceptable to do this both on grounds of faithfulness and clarity. In our GB parser ([Sha93]), we use Tomita's algorithm (described in <ref> [Tom86] </ref>), a CF parsing algorithm (also known as Generalized LR parsing, or GLR parsing). The original incarnation of this parsing method couldn't handle *-grammars. To incorporate that ability, two algorithms related to the original GLR parsing algorithm have been proposed. A parsing algorithm for *-grammars was proposed by Tomita (in [Tom86]), <p> <ref> [Tom86] </ref>), a CF parsing algorithm (also known as Generalized LR parsing, or GLR parsing). The original incarnation of this parsing method couldn't handle *-grammars. To incorporate that ability, two algorithms related to the original GLR parsing algorithm have been proposed. A parsing algorithm for *-grammars was proposed by Tomita (in [Tom86]), and a recognition algorithm for *-grammars was proposed by Nozohoor-Farshi (in [NF91]). Nozohoor-Farshi's recognizer, however, handles a larger class of *-grammars than Tomita's parsing method does. We describe here a GLR parsing algorithm based on Nozohoor-Farshi's recognition algorithm for *-grammars and Tomita's parsing algorithm for non*-grammars. <p> Our algorithm performs parsing (whereas Nozohoor-Farshi's only performed recognition), and handles the same set of *-grammars as Nozohoor-Farshi's recognizer does. 2 Tomita's Method for Parsing with *- grammars It is known that Tomita's *-grammar parser <ref> [Tom86] </ref> does not work for all *- grammars. As an example of a grammar that cannot be used in conjunction with Tomita's parsing method, Nozohoor-Farshi [NF91] gives Grammar 1 shown below. G 1 : (2) S ! x 3 string xbbb.
Reference: [Tom91a] <author> Masaru Tomita, </author> <title> editor. Generalized LR Parsing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1991. </year>
Reference: [Tom91b] <author> Masaru Tomita. </author> <title> The generalized LR parsing algorithm. In Masaru Tomita, editor, Generalized LR Parsing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1991. </year> <month> 22 </month>
References-found: 6

