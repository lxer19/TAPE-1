URL: http://www.cs.wisc.edu/wpis/papers/popl88b.ps
Refering-URL: http://www.cs.wisc.edu/~reps/
Root-URL: 
Title: 1 On the Adequacy of Program Dependence Graphs for Representing Programs  
Author: Susan Horwitz, Jan Prins, and Thomas Reps 
Address: Wisconsin Madison  
Affiliation: University of  
Abstract: In this paper we examine the issue of whether a program dependence graph is an adequate structure for representing a program's execution behavior. (This question has apparently never been addressed before in the literature). We answer the question in the affirmative by showing that if the program dependence graphs of two programs are isomorphic then the programs are strongly equivalent. 
Abstract-found: 1
Intro-found: 1
Reference: 1. 
Reference-contexts: That is, there is a path in the standard control-flow graph for the program <ref> [1] </ref> by which the definition of x at v 1 reaches the use of x at v 2 . (Initial definitions of variables are considered to occur at the beginning of the control-flow graph, and final uses of variables are considered to occur at its end). iiib) (Array case) Variable x <p> Arrays are treated like scalars in that they can only be assigned to as a whole. S [[[a]]] := b and a := b are legal statements in L , while S [[[a <ref> [1] </ref>]]] := 0 and a [1] := 0 are not. In L , an expression on the right-hand side of an assignment statement may contain an application of one of the meaning functions for language L (i.e. <p> Arrays are treated like scalars in that they can only be assigned to as a whole. S [[[a]]] := b and a := b are legal statements in L , while S [[[a <ref> [1] </ref>]]] := 0 and a [1] := 0 are not. In L , an expression on the right-hand side of an assignment statement may contain an application of one of the meaning functions for language L (i.e. M, M sl , or M p ) to an appropriate construct of L and to a state. <p> This situation is illustrated by the following example program fragment, which demonstrates that it is possible to have a program in which there is a dependency v 1 fi do v 2 but not v 1 fi o v 2 , and vice versa: <ref> [1] </ref> x := 10 [2] if P then [3] x := 11 [5] fi The one def-order dependency, [1] fi do ([6]) [4], exists because the assignments to x in lines [1] and [4] both reach the use of x in line [6]. In contrast, the output dependencies are [1] fi <p> that it is possible to have a program in which there is a dependency v 1 fi do v 2 but not v 1 fi o v 2 , and vice versa: <ref> [1] </ref> x := 10 [2] if P then [3] x := 11 [5] fi The one def-order dependency, [1] fi do ([6]) [4], exists because the assignments to x in lines [1] and [4] both reach the use of x in line [6]. In contrast, the output dependencies are [1] fi o [3] and [3] fi o [4], but there is no output dependency [1] fi o [4]. <p> dependency v 1 fi do v 2 but not v 1 fi o v 2 , and vice versa: <ref> [1] </ref> x := 10 [2] if P then [3] x := 11 [5] fi The one def-order dependency, [1] fi do ([6]) [4], exists because the assignments to x in lines [1] and [4] both reach the use of x in line [6]. In contrast, the output dependencies are [1] fi o [3] and [3] fi o [4], but there is no output dependency [1] fi o [4]. <p> versa: <ref> [1] </ref> x := 10 [2] if P then [3] x := 11 [5] fi The one def-order dependency, [1] fi do ([6]) [4], exists because the assignments to x in lines [1] and [4] both reach the use of x in line [6]. In contrast, the output dependencies are [1] fi o [3] and [3] fi o [4], but there is no output dependency [1] fi o [4]. Ideally, program dependence graphs should be defined so that equivalent programs whose abstract syntax trees differ only in the orderings of statements have isomorphic program dependence graphs. <p> The one def-order dependency, <ref> [1] </ref> fi do ([6]) [4], exists because the assignments to x in lines [1] and [4] both reach the use of x in line [6]. In contrast, the output dependencies are [1] fi o [3] and [3] fi o [4], but there is no output dependency [1] fi o [4]. Ideally, program dependence graphs should be defined so that equivalent programs whose abstract syntax trees differ only in the orderings of statements have isomorphic program dependence graphs.
Reference: <author> Aho, A., Sethi, R., and Ullman, J., </author> <booktitle> Compilers: Principles, Techniques and Tools, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1986). </address> <month> 2. </month>
Reference: <author> Allen, J.R. and Kennedy, K., </author> <title> PFC: A program to convert Fortran to parallel form, </title> <type> Technical Report MASC TR82-6, </type> <institution> Department of Math. Sciences, Rice University, </institution> <address> Houston, TX (March 1982). </address> <month> 3. </month>
Reference: <author> Allen, J.R., </author> <title> Dependence analysis for subscripted variables and its application to program transformations, </title> <type> Ph.D. Thesis, </type> <institution> Department of Math. Sciences, Rice University, </institution> <address> Houston, TX (April 1983). </address> <month> 4. </month>
Reference: <author> Bannerjee, U., </author> <title> Speedup of ordinary programs, </title> <type> Ph.D. Thesis, </type> <institution> University of Illinois, Urbana, </institution> <address> IL (October 1979). </address> <month> 5. </month>
Reference: <author> Ferrante, J., Ottenstein, K., and Warren, J., </author> <title> The program dependence graph and its use in optimization, </title> <journal> ACM Transactions on Programming Languages and Systems 9(3) pp. </journal> <month> 319-349 (July </month> <year> 1987). </year> <month> 6. </month>
Reference: <author> Horwitz, S., Prins, J., and Reps, T., </author> <title> Integrating non-interfering versions of programs, </title> <type> Technical Report 690, </type> <institution> Department of Computer Sciences, University of WisconsinMadison (March 1987). </institution> <month> 7. </month>
Reference: <author> Horwitz, S., Prins, J., and Reps, T., </author> <title> Integrating non-interfering versions of programs, pp. </title> <booktitle> 133-145 in Conference Record of the Fifteenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> (San Diego, CA, </address> <month> January 13-15, </month> <year> 1988), (1988). </year> <month> 8. </month>
Reference: <author> Kuck, D. J., Muraoka, Y., and Chen, S. C., </author> <title> On the number of operations simultaneously executable in FORTRAN-like programs and their resulting speed-up, </title> <journal> IEEE Transactions on Computers C-21, </journal> <pages> pp. </pages> <month> 1293-1310 (December </month> <year> 1972). </year> <month> 9. </month>
Reference: <author> Kuck, </author> <title> D.J., </title> <booktitle> The Structure of Computers and Computations, </booktitle> <volume> Vol. 1, </volume> <publisher> John Wiley and Sons, </publisher> <address> New York, NY (1978). </address> <month> 10. </month>
Reference: <author> Kuck, D.J., Kuhn, R.H., Leasure, B., Padua, D.A., and Wolfe, M., </author> <title> Dependence graphs and compiler optimizations, pp. </title> <booktitle> 207-218 in Conference Record of the Eighth ACM Symposium on Principles of Programming Languages, </booktitle> <address> (Williamsburg, VA, </address> <month> January 26-28, </month> <year> 1981), (1981). </year>
Reference: <author> Ottenstein, K.J. and Ottenstein, L.M., </author> <title> The program dependence graph in a software development environment, </title> <booktitle> Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> (Pittsburgh, PA, </address> <month> April 23-25, </month> <year> 1984), </year> <journal> ACM SIGPLAN Notices 19(5) pp. </journal> <month> 177-184 (May </month> <year> 1984). </year>
Reference: <author> Towle, R., </author> <title> Control and data dependence for program transformations, </title> <type> TR 76-788, </type> <institution> Department of Computer Science, University of Illinois, Urbana-Champaign, </institution> <address> IL (March 1976). </address> <month> 13. </month>
Reference: <author> Wolfe, M. J., </author> , <type> Rep. 82-1105, </type> <institution> University of Illinois, Urbana, </institution> <address> IL (October 1982). </address> <booktitle> Conference Record of the 15th Annual ACM Symposium on Principles of Programming Languages Conference Record of the 15th Annual ACM Symposium on Principles of Programming Languages </booktitle>
References-found: 14

