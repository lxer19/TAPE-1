URL: http://www.cs.uni-bonn.de/~cully/PUBLICATIONS/ADBIS96.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~cully/research1.html
Root-URL: http://cs.uni-bonn.de
Title: Disjunctive Rules and Null Values: Logic Programs with Incomplete Information  
Author: Jurgen Kalinski 
Address: Romerstr. 164, 53117 Bonn, Germany  
Affiliation: Institute of Computer Science III, University of Bonn  
Abstract: The introduction of negation in rule bodies of logic programs may lead to semantic ambiguities: Normal programs can have more than one stable model and the three-valued well-founded model may leave the truth status of some ground atoms undetermined. We show that this kind of ambiguity can be naturally combined with ambiguities caused by incomplete information. We define generalized notions of stable and well-founded models which allow to combine recursion, negation and incomplete information within a uniform framework. The well-founded approximation is composed of two not necessarily identical anti-monotonic operators. A general characterization of the best well-founded approximation is given. Programs with disjunctions, maybe tuples and null values are studied as examples of logic programs with incomplete information. What concerns null values, our approach can also be seen as a generalization of Biskup's proposal for relational databases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chitta Baral and V. S. Subrahmanian. </author> <title> Dualities between alternative semantics for logic programming and non-monotonic reasoning. </title> <booktitle> In Proc. of the 1st Int. Workshop on Logic Programming and Non-monotonic Reasoning, </booktitle> <pages> pages 6986. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: In contrast, every normal program has a three-valued well-founded model which in the propositional case can be computed in quadratic time (see [22]). Van Gelder's alternating fixpoint definition [23] as well as Baral and Sub-rahmanian's studies (see <ref> [1] </ref> and [2]) have shown that the well-founded model can be understood as an efficient approximation of stable models: It can be denoted by a pair of interpretations hI 1 ; I 2 i, such that I 1 is a (sound) subset and I 2 a (complete) superset of every stable <p> Example 2.1 Consider the following programs: P 1 : P 2 : p :q p :q The graphs in Figure 1 contain an arc I ! J , iff J is a minimal model of P=I. (This illustration is after <ref> [1] </ref>.) When for example the empty set is taken as a hypothetical pre-interpretation of negative literals in P 1 , the arc ; ! fpg indicates that fpg is a minimal model of P 1 =;. A stable model corresponds to a loop in the graph representation. <p> The reader is assumed to be familiar with van Emden and Kowalski's immediate consequence operator T P (see [21]). Then for normal program P S P (I) := lfp (T P=I ) determines which atoms can be inferred from P=I. Proposition 2.1 (Van Gelder [23], Baral/Subrahmanian <ref> [1] </ref>) Let P be a normal program. 1. The operator S P is anti-monotonic. 2. <p> But it is not strictly necessary to confine the basic concepts to single Herbrand interpretations. In fact, Baral and Subrahmanian introduced the concept of stable classes for normal programs (cf. <ref> [1] </ref> and [2]). They start from a whole set I of hypothetical assumptions yielding a set of program transformations and, correspondingly, a smallest model for each of them.
Reference: [2] <author> Chitta R. Baral and V. S. Subrahmanian. </author> <title> Stable and extension class theory for logic programs and default logics. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8:345366, </volume> <year> 1992. </year>
Reference-contexts: In contrast, every normal program has a three-valued well-founded model which in the propositional case can be computed in quadratic time (see [22]). Van Gelder's alternating fixpoint definition [23] as well as Baral and Sub-rahmanian's studies (see [1] and <ref> [2] </ref>) have shown that the well-founded model can be understood as an efficient approximation of stable models: It can be denoted by a pair of interpretations hI 1 ; I 2 i, such that I 1 is a (sound) subset and I 2 a (complete) superset of every stable model. <p> But it is not strictly necessary to confine the basic concepts to single Herbrand interpretations. In fact, Baral and Subrahmanian introduced the concept of stable classes for normal programs (cf. [1] and <ref> [2] </ref>). They start from a whole set I of hypothetical assumptions yielding a set of program transformations and, correspondingly, a smallest model for each of them.
Reference: [3] <author> Stefan Brass and Jurgen Dix. </author> <title> Disjunctive semantics based upon partial and bottom-up evaluation. </title> <booktitle> In Proc. of the 12th Int. Conf. on Logic Programming, pages 199213. </booktitle> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Brass and Dix <ref> [3] </ref> propose to characterize logic program semantics by abstract properties. D-WFS is the weakest semantics which satisfies natural and elementary program transformations like unfolding. They also develop a bottom-up evaluation algorithm and conjecture that D-WFS equals STATIC.
Reference: [4] <author> Peter Buneman, Susan Davidson, and Aaron Waters. </author> <title> A semantics for complex objects and approximate queries. </title> <booktitle> In Proc. of the 7th Symp. on Principles of Database Systems, </booktitle> <pages> pages 305314, </pages> <year> 1988. </year>
Reference-contexts: It seems that except from negation S null P coincides with the computation of sure tuples and S null P + coincides with that of maybe tuples in Biskup's approach. Buneman et al. <ref> [4] </ref> study a generalization of partial tuples for complex objects and Libkin [10] gives a general account of approximations in databases. As mentioned in the introduction, we regard the enhancement of logic programs with more sophisticated representation mechanisms as highly important.
Reference: [5] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <booktitle> In ICLP88 [7], </booktitle> <pages> pages 10701080. </pages>
Reference-contexts: Semantic issues become more complicated when negations are allowed in rule bodies. One of the most elegant approaches for normal logic programs is stable model semantics as proposed by Gelfond and Lifschitz <ref> [5] </ref>. It generalizes the perfect model semantics [16] and is closely related with Autoepistemic Logic [15] as a major formalization of nonmonotonic reasoning. Unfortunately, stable models do not necessarily exist, and even when they exist they are hard to compute (cf. [13]). <p> Programs are tacitly identified with all ground instantiations of rules in U . Stable model semantics is one of the most elegant approaches for specifying the meaning of logic programs. Definition 2.1 (Gelfond/Lifschitz <ref> [5] </ref>) Let P be a disjunctive program and I a Herbrand interpretation. The Gelfond-Lifschitz transformation P=I of P modulo I is defined by the following procedure: * Remove every rule whose body contains some :A with A 2 I. * Delete every expression :A in the remaining rules.
Reference: [6] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. New Generation Computing, </title> <address> 9:365385, </address> <year> 1991. </year>
Reference-contexts: Intuitively spoken, the Gelfond-Lifschitz transformation realizes a pre-interpretation of negative literals with respect to I . Definition 2.2 (Gelfond/Lifschitz <ref> [6] </ref>, Przymusinski [18]) Let P be a disjunctive program. A Herbrand interpretation I is called a stable model of P , if it is a minimal model of P=I.
Reference: [7] <editor> Proc. </editor> <booktitle> of the 5th Int. Conf. and Symp. on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1988. </year> <title> Advances in Databases and Information Systems, 1996 17 Disjunctive Rules and Null Values: Logic Programs with Incomplete Information </title>
Reference: [8] <author> J urgen Kalinski. </author> <title> From above and from below: Approximating stable models. </title> <editor> In Bernd Wolfinger, editor, Innovationen bei Rechen- und Kommunikationssystemen, GI-Fachgespr ach: </editor> <title> Disjunctive logic programming and disjunctive databases, pages 6168. </title> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: It has been shown in <ref> [8] </ref> that the application of so-called knowledge compilation techniques then allows to improve hS P N ; S P N+i. 6 Two-Valued and Three-Valued Models II Let us return to P 0 in the context of two-valued interpretations.
Reference: [9] <author> J urgen Kalinski. </author> <title> Stable classes and operator pairs for disjunctive programs. </title> <editor> In V.W. Marek, A. Nerode, and M. Truszczynski, editors, </editor> <booktitle> Proc. of the 3rd Int. Conference on Logic Programming and Nonmonotonic Reasoning, pages 358371. Springer, Lecture Notes in Artificial Intelligence 928, </booktitle> <year> 1995. </year>
Reference-contexts: Brass and Dix [3] propose to characterize logic program semantics by abstract properties. D-WFS is the weakest semantics which satisfies natural and elementary program transformations like unfolding. They also develop a bottom-up evaluation algorithm and conjecture that D-WFS equals STATIC. In <ref> [9] </ref> we presented some more assumption functions and operator pairs for disjunctive programs and also discussed the case where M stands for states (closed sets of disjunctions) instead of models. <p> The different notions of stability as self-justifiable models or pairs of models or sets of models, however, generalize the concepts presented in <ref> [9] </ref>. We also believe that the current approach is more intuitive.
Reference: [10] <author> Leonid Libkin. </author> <title> Approximation in databases. </title> <editor> In Georg Gottlob and Moshe Y. Vardi, editors, </editor> <booktitle> Proc. of the 5th Int. Conf. on Database Theory, pages 411424. Springer, Lecture Notes in Computer Science 893, </booktitle> <year> 1995. </year>
Reference-contexts: It seems that except from negation S null P coincides with the computation of sure tuples and S null P + coincides with that of maybe tuples in Biskup's approach. Buneman et al. [4] study a generalization of partial tuples for complex objects and Libkin <ref> [10] </ref> gives a general account of approximations in databases. As mentioned in the introduction, we regard the enhancement of logic programs with more sophisticated representation mechanisms as highly important.
Reference: [11] <author> Jorge Lobo, Jack Minker, and Arcot Rajasekar. </author> <title> Foundations of Disjunctive Logic Programmming. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Whereas stable model semantics can quite directly be extended to disjunctive programs [18], the generalization is not obvious for the well-founded semantics and numerous different semantics have been proposed (see <ref> [11] </ref>). The major issues of this paper are the following: * Stable models are redefined in a generalized setting. They are based on the concept of assumption functions which assign a set of intended models to every program, after negative literals have been removed by a hypo thetical pre-interpretation. <p> Alternating operator pairs yield the same result as they did in the two-valued case with the addi tional effect that lfp (S _ 0 0 P 0 ) for every three-valued stable model I . 3 The strong normalization determines the so-called Weak Generalized Closed World Assumption of positive programs <ref> [11] </ref>. <p> 8.2 we now obtain the correct answer, namely the empty q1-extension in lfp (S null P ffi S null P + ) and q1 (GenTec; York) in gfp (S null P + ffi S null P ). 9 Related Work Several semantics have been proposed for disjunctive logic programs (see <ref> [11] </ref>). In [19] Przymusinski proposes the novel STATIC semantics for disjunctive programs. It is formulated in terms of a propositional modal language with belief operator B. Negative program literals are translated as B:A.
Reference: [12] <author> David Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Pitman, </publisher> <year> 1983. </year>
Reference-contexts: We also believe that the current approach is more intuitive. Advances in Databases and Information Systems, 1996 16 Disjunctive Rules and Null Values: Logic Programs with Incomplete Information In <ref> [12] </ref> Maier presents a survey of several approaches where the meaning of relations with null values is given in terms of so-called possibility functions POSS. A possibility function could, for example, assign a relation with null values the set of its completions.
Reference: [13] <author> Wiktor Marek and Miroslaw Truszczy nski. </author> <title> Autoepistemic logic. </title> <journal> Journal of the ACM, </journal> <volume> 38(3):588619, </volume> <year> 1991. </year>
Reference-contexts: It generalizes the perfect model semantics [16] and is closely related with Autoepistemic Logic [15] as a major formalization of nonmonotonic reasoning. Unfortunately, stable models do not necessarily exist, and even when they exist they are hard to compute (cf. <ref> [13] </ref>). In contrast, every normal program has a three-valued well-founded model which in the propositional case can be computed in quadratic time (see [22]).
Reference: [14] <author> Jack Minker and Arcot Rajasekar. </author> <title> A fixpoint semantics for disjunctive logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 9:4574, </volume> <year> 1990. </year>
Reference-contexts: Example 2.2 The reader may verify that for P 2 we have lfp (S 2 P 2 ) = ; and gfp (S 2 For positive disjunctive programs an immediate consequence operator on disjunctions of atoms has been proposed by Minker and Rajasekar (cf. <ref> [14] </ref>): T _ Proposition 2.2 (Minker/Rajasekar [14]) Let P be a positive disjunctive program and ffi a disjunction of atoms. Then the following are equivalent: 1. ffi is a logical consequence of P . 2. ffi 0 2 lfp (T _ P ) for some disjunction ffi 0 ffi. <p> Example 2.2 The reader may verify that for P 2 we have lfp (S 2 P 2 ) = ; and gfp (S 2 For positive disjunctive programs an immediate consequence operator on disjunctions of atoms has been proposed by Minker and Rajasekar (cf. <ref> [14] </ref>): T _ Proposition 2.2 (Minker/Rajasekar [14]) Let P be a positive disjunctive program and ffi a disjunction of atoms. Then the following are equivalent: 1. ffi is a logical consequence of P . 2. ffi 0 2 lfp (T _ P ) for some disjunction ffi 0 ffi.
Reference: [15] <author> Robert C. Moore. </author> <title> Semantical considerations on nonmonotonic logic. </title> <journal> Artificial Intelligence, </journal> <volume> 25(4):7594, </volume> <year> 1985. </year>
Reference-contexts: Semantic issues become more complicated when negations are allowed in rule bodies. One of the most elegant approaches for normal logic programs is stable model semantics as proposed by Gelfond and Lifschitz [5]. It generalizes the perfect model semantics [16] and is closely related with Autoepistemic Logic <ref> [15] </ref> as a major formalization of nonmonotonic reasoning. Unfortunately, stable models do not necessarily exist, and even when they exist they are hard to compute (cf. [13]). In contrast, every normal program has a three-valued well-founded model which in the propositional case can be computed in quadratic time (see [22]).
Reference: [16] <author> Teodor Przymusinski. </author> <title> Perfect model semantics. </title> <booktitle> In ICLP88 [7], </booktitle> <pages> pages 10811096. </pages>
Reference-contexts: Semantic issues become more complicated when negations are allowed in rule bodies. One of the most elegant approaches for normal logic programs is stable model semantics as proposed by Gelfond and Lifschitz [5]. It generalizes the perfect model semantics <ref> [16] </ref> and is closely related with Autoepistemic Logic [15] as a major formalization of nonmonotonic reasoning. Unfortunately, stable models do not necessarily exist, and even when they exist they are hard to compute (cf. [13]). <p> program P 3 : r :p has stable models fp; rg and fq; rg while lfp (S _ P 3 ) = ; and gfp (S min P 3 ) = fp; q; rg As the above two stable models are also perfect (for the definition of perfect models see <ref> [16] </ref>), this example demonstrates that no well-founded semantics in the sense of Definition 3.3, i.e. based on anti-monotonic operators, is able to coincide with perfect model semantics.
Reference: [17] <author> Teodor C. Przymusinski. </author> <title> Extended stable semantics for normal and disjunctive programs. </title> <booktitle> In Proc. of the 7th Int. Conf. on Logic Programming, </booktitle> <pages> pages 459477. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The smallest fixpoint of A _ P 0 is f fpg; fqg g which requires that exactly one of p or q must be true. Different results are obtained, when M becomes the set of three-valued Herbrand interpretations with v as defined by Przymusinski <ref> [17] </ref>, namely I 1 v I 2 iff the true atoms of I 1 are true in I 2 and the false atoms of I 2 are false in I 1 .
Reference: [18] <author> Teodor C. Przymusinski. </author> <title> Stable semantics for disjunctive programs. New Generation Computing, </title> <address> 9:401424, </address> <year> 1991. </year>
Reference-contexts: Furthermore, S P oscillates between I 1 and I 2 such that S P (I 1 ) = I 2 and S P (I 2 ) = I 1 . Whereas stable model semantics can quite directly be extended to disjunctive programs <ref> [18] </ref>, the generalization is not obvious for the well-founded semantics and numerous different semantics have been proposed (see [11]). The major issues of this paper are the following: * Stable models are redefined in a generalized setting. <p> Intuitively spoken, the Gelfond-Lifschitz transformation realizes a pre-interpretation of negative literals with respect to I . Definition 2.2 (Gelfond/Lifschitz [6], Przymusinski <ref> [18] </ref>) Let P be a disjunctive program. A Herbrand interpretation I is called a stable model of P , if it is a minimal model of P=I.
Reference: [19] <author> Teodor C. Przymusinski. </author> <title> Static semantics for normal and disjunctive logic programs. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <note> Special Issue on Disjunctive Programs (to appear), </note> <year> 1995. </year>
Reference-contexts: In <ref> [19] </ref> Przymusinski proposes the novel STATIC semantics for disjunctive programs. It is formulated in terms of a propositional modal language with belief operator B. Negative program literals are translated as B:A. <p> static expansions of T is a belief theory ^ T such that ^ T = Con fl (T [ fBff j ^ T j= min ffg) If P be a disjunctive program and T (P ) its translation, the smallest static expansion can be obtained by the following iterative procedure <ref> [19] </ref>: T 0 = Con fl (T (P )) T n+1 = Con fl (T (P ) [ fBff j T n j= min ffg) There is a close relationship between A _ P and STATIC, and hS _ P ; S P N+i is sound with respect to STATIC, but
Reference: [20] <author> Konstantinos Sagonas, Terrence Swift, and David S. Warren. </author> <title> An abstract machine for computing the well-founded semantics. </title> <booktitle> In Proc. of the 1996 Joint Int. Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 274288. </pages> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: An implementation is described in <ref> [20] </ref>. The well-founded model can be expressed as hI 1 ; I 2 i = h lfp (S 2 P ) i where S P is an anti-monotonic operator.
Reference: [21] <author> M. H. van Emden and R. A. Kowalski. </author> <title> The semantics of predicate logic as a programming language. </title> <journal> Journal of the ACM, </journal> <volume> 23(4):733742, </volume> <year> 1976. </year>
Reference-contexts: 1 Introduction Definite logic programs without function symbols (Datalog) have proved to provide a powerful and adequate representation formalism for many applications. The equivalence of the smallest model of a definite program with the least fixpoint of the corresponding immediate consequence operator has been established two decades ago <ref> [21] </ref>. Semantic issues become more complicated when negations are allowed in rule bodies. One of the most elegant approaches for normal logic programs is stable model semantics as proposed by Gelfond and Lifschitz [5]. <p> Unfortunately, stable models are hard to compute. For normal programs the three-valued well-founded semantics is computationally more attractive [22]. The reader is assumed to be familiar with van Emden and Kowalski's immediate consequence operator T P (see <ref> [21] </ref>). Then for normal program P S P (I) := lfp (T P=I ) determines which atoms can be inferred from P=I. Proposition 2.1 (Van Gelder [23], Baral/Subrahmanian [1]) Let P be a normal program. 1. The operator S P is anti-monotonic. 2.
Reference: [22] <author> A. Van Gelder, K. A. Ross, and J. S. Schlipf. </author> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of the ACM, </journal> <volume> 38(3):620650, </volume> <year> 1991. </year>
Reference-contexts: Unfortunately, stable models do not necessarily exist, and even when they exist they are hard to compute (cf. [13]). In contrast, every normal program has a three-valued well-founded model which in the propositional case can be computed in quadratic time (see <ref> [22] </ref>). <p> Unfortunately, stable models are hard to compute. For normal programs the three-valued well-founded semantics is computationally more attractive <ref> [22] </ref>. The reader is assumed to be familiar with van Emden and Kowalski's immediate consequence operator T P (see [21]). Then for normal program P S P (I) := lfp (T P=I ) determines which atoms can be inferred from P=I.
Reference: [23] <author> Allen Van Gelder. </author> <title> The alternating fixpoint of logic programs with negation. </title> <booktitle> In Proc. of the 8th Symp. on Principles of Database Systems, </booktitle> <pages> pages 110, </pages> <year> 1989. </year>
Reference-contexts: Unfortunately, stable models do not necessarily exist, and even when they exist they are hard to compute (cf. [13]). In contrast, every normal program has a three-valued well-founded model which in the propositional case can be computed in quadratic time (see [22]). Van Gelder's alternating fixpoint definition <ref> [23] </ref> as well as Baral and Sub-rahmanian's studies (see [1] and [2]) have shown that the well-founded model can be understood as an efficient approximation of stable models: It can be denoted by a pair of interpretations hI 1 ; I 2 i, such that I 1 is a (sound) subset <p> The reader is assumed to be familiar with van Emden and Kowalski's immediate consequence operator T P (see [21]). Then for normal program P S P (I) := lfp (T P=I ) determines which atoms can be inferred from P=I. Proposition 2.1 (Van Gelder <ref> [23] </ref>, Baral/Subrahmanian [1]) Let P be a normal program. 1. The operator S P is anti-monotonic. 2.
Reference: [24] <author> Carlo Zaniolo. </author> <title> Database relations with null values. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28:142166, </volume> <booktitle> 1984. Advances in Databases and Information Systems, </booktitle> <year> 1996 </year> <month> 18 </month>
Reference-contexts: Zaniolo <ref> [24] </ref> reports that 14 different types of nulls have been distinguished in an ANSI/SPARC interim report. In what follows we assume that a null is to represent an existing but unknown value in a database tuple. Example 8.1 Consider the EP relation in Figure 4.
References-found: 24

