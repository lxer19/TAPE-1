URL: http://www.ri.cmu.edu/afs/cs/user/fp/public/papers/lics93.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs/user/fp/public/papers/
Root-URL: 
Email: dran@cs.albany.edu  fp@cs.cmu.edu  rstatman@cs.cmu.edu  
Title: On the Unification Problem for Cartesian Closed Categories (Extended Abstract) unification form the basis for
Author: Paliath Narendran Frank Pfenning Richard Statman 
Note: CCC-matching and  
Address: Albany, NY 12222  Pittsburgh, PA 15213  Pittsburgh, PA 15213  
Affiliation: Institute of Programming and Logics Department of Computer Science State University of NY at Albany  Department of Computer Science Carnegie Mellon University  Department of Mathematics Carnegie Mellon University  
Abstract: Cartesian closed categories (CCC's) have played and continue to play an important role in the study of the semantics of programming languages. An axiomatization of the isomorphisms which hold in all Cartesian closed categories discovered independently by Soloviev and Bruce and Longo leads to seven equalities. We show that the unification problem for this theory is undecidable, thus settling an open question. We also show that an important subcase, namely unification modulo the linear isomorphisms, is NP-complete. Furthermore, the problem of matching in CCC's is NP-complete when the subject term is irreducible. 
Abstract-found: 1
Intro-found: 1
Reference: [BCL92] <author> K. B. Bruce, R. Di Cosmo, and G. Longo. </author> <title> Provable isomorphisms of types. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2(2) </volume> <pages> 231-247, </pages> <year> 1992. </year>
Reference-contexts: category that has products (fi), exponentiation ()) and a terminal object (1). (See [LS86] for a detailed treatment.) The isomorphism relation between objects in a CCC ( ~ = ) can be axiomatized equationally (as shown by Bruce and Longo [BL85] and later sharpened by Bruce, Di Cosmo, and Longo <ref> [BCL92] </ref>) and this results in an algebra consisting of binary operators fi and ) and nullary (constant) operator 1, and the following equational axioms: * fi is associative and commutative, i.e., x fi (y fi z) = (x fi y) fi z * there is an (identity) element 1 for fi
Reference: [BL85] <author> Kim B. Bruce and Giuseppe Longo. </author> <title> Provable isomorphisms and domain equations in models of typed languages. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 263-272. </pages> <publisher> ACM Press, </publisher> <year> 1985. </year>
Reference-contexts: Surprisingly little is known about which domain equations have solutions in all CCC's. An axiomatization of the isomorphisms due to Soloviev [Sol83] and independently discovered by Bruce and Longo <ref> [BL85] </ref> leads to a first-order equational unification problem under seven equalities. We show that the unification problem for this theory is undecidable by a reduction from Hilbert's tenth problem, thus settling an open question. The corresponding CCC-matching problem is NP-complete, when the subject is irreducible. <p> Cartesian Closed Categories A Cartesian closed category (CCC) is a category that has products (fi), exponentiation ()) and a terminal object (1). (See [LS86] for a detailed treatment.) The isomorphism relation between objects in a CCC ( ~ = ) can be axiomatized equationally (as shown by Bruce and Longo <ref> [BL85] </ref> and later sharpened by Bruce, Di Cosmo, and Longo [BCL92]) and this results in an algebra consisting of binary operators fi and ) and nullary (constant) operator 1, and the following equational axioms: * fi is associative and commutative, i.e., x fi (y fi z) = (x fi y) fi
Reference: [DJ90] <author> N. Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, </booktitle> <pages> pages 243-320. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Since various occurrences of D may place different constraints on its instances, these constraints must be unified using CCC-unification. Polymorphic matching and unification have applications in theorem proving, logic programming, and program transformation in higher-order logic. 2 Definitions 2.1 Equational Unification The reader is referred to <ref> [DJ90, HO80] </ref> for extensive surveys of the important concepts of term rewriting systems such as reduction, confluence, and canonicity (or convergence). Two terms s and t are said to be unifiable modulo an equational theory E if and only if there exists a substitution such that (s) = E (t).
Reference: [Fag87] <author> Fran~cois Fages. </author> <title> Associative-commutative unification. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3 </volume> <pages> 257-275, </pages> <year> 1987. </year>
Reference-contexts: An operator that is neither associative nor commutative will be referred to in this paper as a non-AC operator. Unification modulo associativity and commutativity (generally known as AC-unification) has been investigated widely in the term rewriting systems literature | see <ref> [Fag87, KN99, Sti81] </ref>, for instance. In particular, it has been proved in [KN99] that unifiability modulo associativity and commutativity can be checked in nondeterministic polynomial time (NP); we will make use of this result later in the paper. For systems involving associative-commutative operators, Lemma 2 can be extended somewhat.
Reference: [HO80] <author> Gerard Huet and Derek C. Oppen. </author> <title> Equations and rewrite rules: A survey. </title> <editor> In R. Book, editor, </editor> <booktitle> Formal Languages: Perspectives and Open Problems, </booktitle> <pages> pages 349-405, </pages> <address> New York, 1980. </address> <publisher> Academic Press. </publisher>
Reference-contexts: Since various occurrences of D may place different constraints on its instances, these constraints must be unified using CCC-unification. Polymorphic matching and unification have applications in theorem proving, logic programming, and program transformation in higher-order logic. 2 Definitions 2.1 Equational Unification The reader is referred to <ref> [DJ90, HO80] </ref> for extensive surveys of the important concepts of term rewriting systems such as reduction, confluence, and canonicity (or convergence). Two terms s and t are said to be unifiable modulo an equational theory E if and only if there exists a substitution such that (s) = E (t).
Reference: [JK86] <author> Jean-Pierre Jouannaud and Claude Kirch-ner. </author> <title> Completion of a set of rules modulo a set of equations. </title> <journal> SIAM Journal of Computing, </journal> <volume> 15(4) </volume> <pages> 1155-1194, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: The term t [a (r)] is the result of E-reducing t by l ! r at a. Many of the notions such as noetherian, confluent etc. can be extended to E-noetherian, E-confluent etc.; we do not include those definitions here, instead referring the reader to <ref> [JK86, PS81] </ref>. A substitution is said to be irreducible modulo a term rewriting system R if and only if (x) is irreducible for every x in the support of . Clearly one needs to look only for irreducible substitutions if the unification problem is modulo a canonical system.
Reference: [Klo87] <author> J. W. Klop. </author> <title> Term rewriting systems: A tutorial. </title> <journal> Bulletin of the EATCS, </journal> <volume> 32 </volume> <pages> 143-182, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Then (s) can be reduced to its normal form in less than or equal to jsj steps. Proof-sketch: It can be shown that doing reduction innermost (i.e., from the leaves upward | see <ref> [Klo87] </ref>) would involve at the most jsj steps. 2 Lemma 3 Every confluent, optimally reducing term rewriting system has a decidable unification problem. Proof-sketch: Let T be an optimally reducing canonical term rewriting system and s and t be terms to be unified modulo T .
Reference: [KN99] <author> Deepak Kapur and Paliath Narendran. </author> <title> Complexity of unification problems with associative-commutative operators. </title> <journal> Journal of Automated Reasoning, </journal> <note> To appear, 199? </note>
Reference-contexts: An operator that is neither associative nor commutative will be referred to in this paper as a non-AC operator. Unification modulo associativity and commutativity (generally known as AC-unification) has been investigated widely in the term rewriting systems literature | see <ref> [Fag87, KN99, Sti81] </ref>, for instance. In particular, it has been proved in [KN99] that unifiability modulo associativity and commutativity can be checked in nondeterministic polynomial time (NP); we will make use of this result later in the paper. For systems involving associative-commutative operators, Lemma 2 can be extended somewhat. <p> Unification modulo associativity and commutativity (generally known as AC-unification) has been investigated widely in the term rewriting systems literature | see [Fag87, KN99, Sti81], for instance. In particular, it has been proved in <ref> [KN99] </ref> that unifiability modulo associativity and commutativity can be checked in nondeterministic polynomial time (NP); we will make use of this result later in the paper. For systems involving associative-commutative operators, Lemma 2 can be extended somewhat.
Reference: [LS86] <author> J. Lambek and P. J. Scott. </author> <title> Introduction to Higher Order Categorical Logic. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1986. </year>
Reference-contexts: It is said to be canonical over S if it is noetherian as well. 2.2 Cartesian Closed Categories A Cartesian closed category (CCC) is a category that has products (fi), exponentiation ()) and a terminal object (1). (See <ref> [LS86] </ref> for a detailed treatment.) The isomorphism relation between objects in a CCC ( ~ = ) can be axiomatized equationally (as shown by Bruce and Longo [BL85] and later sharpened by Bruce, Di Cosmo, and Longo [BCL92]) and this results in an algebra consisting of binary operators fi and )
Reference: [NPS89] <author> Paliath Narendran, Frank Pfenning, and Richard Statman. </author> <title> On the unification problem for Cartesian closed categories. Talk presented at the Workshop on Higher-Order Logic, </title> <address> Banff, Alberta, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: Rittri further argues convincingly that such retrieval is more precise and intuitive if one considers only linear isomorphisms, which leads to the second problem we consider. An early version of the NP-completeness of CCC-matching was reported in <ref> [NPS89] </ref>, and a variant of our algorithm for CC-unification has been implemented by Rittri and turned out to be practical in library retrieval applications. The undecidability result is new, and none of the results have previously appeared in print, as far as we know.
Reference: [PS81] <author> G. E. Peterson and M. E. Stickel. </author> <title> Complete sets of reductions for some equational theories. </title> <journal> Journal of the ACM, </journal> <volume> 28(3) </volume> <pages> 233-264, </pages> <year> 1981. </year>
Reference-contexts: The term t [a (r)] is the result of E-reducing t by l ! r at a. Many of the notions such as noetherian, confluent etc. can be extended to E-noetherian, E-confluent etc.; we do not include those definitions here, instead referring the reader to <ref> [JK86, PS81] </ref>. A substitution is said to be irreducible modulo a term rewriting system R if and only if (x) is irreducible for every x in the support of . Clearly one needs to look only for irreducible substitutions if the unification problem is modulo a canonical system.
Reference: [Rit90] <author> Mikael Rittri. </author> <title> Retrieving library identifiers via equational matching of types. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, </booktitle> <pages> pages 603-617, </pages> <address> Kaiserslautern, Ger-many, July 1990. </address> <publisher> Springer-Verlag LNAI 449. </publisher>
Reference-contexts: We show that the unification problem thus restricted is NP-complete. Matching and unification in closed and Cartesian closed categories have applications to the retrieveal of functions in a library indexed by the function's type (see <ref> [Rit90, Rit91, Rit92, RT91] </ref>). The equational theory of the types comes into play here, since library entries of essentially the same functionality may have many different, but isomorphic types.
Reference: [Rit91] <author> Mikael Rittri. </author> <title> Using types as search keys in function libraries. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(1) </volume> <pages> 71-89, </pages> <year> 1991. </year> <note> A preliminary version appeared in the proceedings of FPCA'89, pages 174-183. </note>
Reference-contexts: We show that the unification problem thus restricted is NP-complete. Matching and unification in closed and Cartesian closed categories have applications to the retrieveal of functions in a library indexed by the function's type (see <ref> [Rit90, Rit91, Rit92, RT91] </ref>). The equational theory of the types comes into play here, since library entries of essentially the same functionality may have many different, but isomorphic types.
Reference: [Rit92] <author> Mikael Rittri. </author> <title> Retrieving library functions by unifying types modulo linear isomor-phism. Programming Methodology Group Report 66, </title> <institution> Chalmers University of Technology and University of Goteborg, Goteborg, Sweden, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: We show that the unification problem thus restricted is NP-complete. Matching and unification in closed and Cartesian closed categories have applications to the retrieveal of functions in a library indexed by the function's type (see <ref> [Rit90, Rit91, Rit92, RT91] </ref>). The equational theory of the types comes into play here, since library entries of essentially the same functionality may have many different, but isomorphic types.
Reference: [RT91] <author> Colin Runciman and Ian Toyn. </author> <title> Retrieving re-usable software components by polymorphic type. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(2) </volume> <pages> 191-211, </pages> <year> 1991. </year> <note> A preliminary version appeared in the proceedings of FPCA'89, pages 166-173. </note>
Reference-contexts: We show that the unification problem thus restricted is NP-complete. Matching and unification in closed and Cartesian closed categories have applications to the retrieveal of functions in a library indexed by the function's type (see <ref> [Rit90, Rit91, Rit92, RT91] </ref>). The equational theory of the types comes into play here, since library entries of essentially the same functionality may have many different, but isomorphic types.
Reference: [Sol83] <author> Sergei V. Soloviev. </author> <title> The category of finite sets and Cartesian closed categories. </title> <journal> Soviet Mathematics, </journal> <volume> 22(3) </volume> <pages> 1387-1400, </pages> <year> 1983. </year>
Reference-contexts: Surprisingly little is known about which domain equations have solutions in all CCC's. An axiomatization of the isomorphisms due to Soloviev <ref> [Sol83] </ref> and independently discovered by Bruce and Longo [BL85] leads to a first-order equational unification problem under seven equalities. We show that the unification problem for this theory is undecidable by a reduction from Hilbert's tenth problem, thus settling an open question.
Reference: [Sol93] <author> Sergei V. Soloviev. </author> <title> The ordinary identities form a complete axiom system for iso-morphism of types in closed categories. In 6 A. </title> <editor> Voronkov, editor, </editor> <booktitle> Proceedings of the In--ternational Conference on Logic Programming and Automated Reasoning, </booktitle> <address> LPAR'93, St. Petersburg, Russia, </address> <month> July </month> <year> 1993. </year> <note> Springer-Verlag LNAI. To appear. </note>
Reference-contexts: The corresponding CCC-matching problem is NP-complete, when the subject is irreducible. The isomorphisms valid in all closed categories (CC's) are characterized by five of the seven equations as shown by Soloviev <ref> [Sol93] </ref> (exactly those which can be realized by linear functions). We show that the unification problem thus restricted is NP-complete. Matching and unification in closed and Cartesian closed categories have applications to the retrieveal of functions in a library indexed by the function's type (see [Rit90, Rit91, Rit92, RT91]). <p> As shown by Soloviev <ref> [Sol93] </ref>, E 0 is the set of equations that characterizes the isomorphisms valid in all closed categories (CC's). Our main results are as follows: 1. Both theories have canonical rewriting systems modulo associativity and commutativity (of fi) which can be obtained by orienting the remaining equations left to right. 2.
Reference: [Sti81] <author> Mark Stickel. </author> <title> A unification algorithm for associative-commutative functions. </title> <journal> Journal of the ACM, </journal> <volume> 28(3) </volume> <pages> 423-434, </pages> <month> July </month> <year> 1981. </year> <month> 7 </month>
Reference-contexts: An operator that is neither associative nor commutative will be referred to in this paper as a non-AC operator. Unification modulo associativity and commutativity (generally known as AC-unification) has been investigated widely in the term rewriting systems literature | see <ref> [Fag87, KN99, Sti81] </ref>, for instance. In particular, it has been proved in [KN99] that unifiability modulo associativity and commutativity can be checked in nondeterministic polynomial time (NP); we will make use of this result later in the paper. For systems involving associative-commutative operators, Lemma 2 can be extended somewhat.
References-found: 18

