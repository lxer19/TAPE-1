URL: http://www.cs.ucl.ac.uk/staff/A.Hunter/tse94.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/A.Hunter/papers.html
Root-URL: http://www.cs.ucl.ac.uk
Email: Email: -acwf, dg, abh, jk, ban@doc.ic.ac.uk  
Title: 1 Inconsistency Handling in Multi-Perspective Specifications  
Author: A. Finkelstein D. Gabbay A. Hunter J. Kramer B. Nuseibeh 
Date: 20(8): 569-578, August 1994.  
Note: IEEE Transactions on Software Engineering,  
Address: 180 Queens Gate, London, SW7 2BZ, UK  
Affiliation: Department of Computing Imperial College of Science, Technology and Medicine  
Abstract: Earlier versions available in: Proceedings of 4th European Software Engineering Conference (ESEC93), Garmisch-Partenkirchen, Germany, September 1993, 84-99, LNCS717, Springer-Verlag; and as: Dept. of Computing (Imperial College) technical report no. DoC93/2. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. R. Anderson and N. D. </author> <title> Belnap (1976); The Logic of Entailment; Princeton University Press, </title> <address> USA. </address>
Reference-contexts: We use this as a means of motivating our approach. Classical logic, and intuitionistic logic, take the view that anything follows from an inconsistency. Effectively, when an inconsistency occurs in a database, it becomes unusable. This has prompted the logic community to study such logics as relevant <ref> [1] </ref> and paraconsistent logics [7] that allow reasoning with inconsistent information. These isolate inconsistency by various means, but do not offer strategies for dealing with the inconsistency. Therefore there still remains the question of what do we do when we have two contradictory items of information in a database.
Reference: [2] <author> R. </author> <booktitle> Balzer (1991); Tolerating Inconsistency; Proceedings of 13th International Conference on Software Engineering (ICSE-13), </booktitle> <address> Austin, Texas, USA, 13-17th May 1991, </address> <publisher> 158-165; IEEE Computer Society Press. </publisher>
Reference-contexts: Balzer <ref> [2] </ref> proposes another approach that addresses the handling of certain kinds of inconsistency. Here, the notion of relaxing constraints and tolerating inconsistencies is discussed, and a simple technique that allows inconsistencies to be managed and tolerated is presented.
Reference: [3] <author> H. Barringer, M. Fischer, D. Gabbay, G. Gough and R. </author> <note> Owens (1989); MetateM: </note>
Reference-contexts: Furthermore for some sufficiently general subsets of US temporal logic there are viable model building algorithms, such that if the metalevel specification is consistent then the algorithm is guaranteed to find a model of the specification <ref> [3] </ref>. Using these properties we execute temporal logic specifications to generate a model [14]. This has led to the approach of Executable Temporal Logics - which have been implemented and applied in a variety of applications [4, 9, 22].
References-found: 3

