URL: http://www.cs.rutgers.edu/~keane/papers/red-ref-submission.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~keane/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fellman,keane,arunava,armholdg@cs.rutgers.edu  
Title: A Transformation System for Interactive Reformulation of Design Optimization Strategies  
Author: Thomas Ellman John Keane Arunava Banerjee George Armhold 
Address: Piscataway, New Jersey 08855  
Affiliation: Department of Computer Science, Hill Center for Mathematical Sciences Rutgers University,  
Abstract: Automatic design optimization is highly sensitive to problem formulation. The choice of objective function, constraints and design parameters can dramatically impact the computational cost of optimization and the quality of the resulting design. The best formulation varies from one application to another. A design engineer will usually not know the best formulation in advance. In order to address this problem, we have developed a system that supports interactive formulation, testing and reformulation of design optimization strategies. Our system includes an executable, data-flow language for representing optimization strategies. The language allows an engineer to define multiple stages of optimization, each using different approximations of the objective and constraints or different abstractions of the design space. We have also developed a set of transformations that reformulate strategies represented in our language. The transformations can approximate objective and constraint functions, abstract or re-parameterize a search space, or divide an optimization into multiple stages. The system is applicable to design problems in which the artifact is governed by algebraic and ordinary differential equations. We have tested the system on problems of racing yacht and jet engine nozzle design. We report experimental results demonstrating that our reformulation techniques can significantly improve the performance of automatic design optimization. Our research demonstrates the viability of a reformulation methodology that combines symbolic program transformation with numerical experimentation. It is an important first step in a research programme aimed at automating the entire strategy formulation process.
Abstract-found: 1
Intro-found: 1
Reference: [ Abelson et al., 1989 ] <author> H. Abelson, M. Eisenberg, M. Halfant, J. Katzenelson, E. Sacks, Sussman J., J. Wisdom, and K. </author> <title> Yip. </title> <journal> Intelligence in scientific computing. Communications of the ACM, </journal> <volume> 32, </volume> <year> 1989. </year>
Reference-contexts: This work is inspired by research using Artificial Intelligence and Machine Vision techniques to extract information from simulations of physical systems <ref> [ Abelson et al., 1989 ] </ref> , [ Sacks, 1991 ] , [ Yip and Zhao, 1996 ] . We are developing a suite of tools for automatically observing and analyzing the behavior of trial optimizations.
Reference: [ Char et al., 1992 ] <author> B.W. Char, K.O. Geddes, G.H. Gonnet, B.L. Leong, M.B. Monagan, and S.M. Watt. </author> <title> First Leaves: A Tutorial Introduction to Maple V. </title> <publisher> Springer-Verlag and Waterloo Maple Publishing, </publisher> <year> 1992. </year>
Reference-contexts: This transform will solve y = Q (x 1 ; : : : ; x i ; : : : ; x n ) for x i symbolically (using Maple <ref> [ Char et al., 1992 ] </ref> ) if possible.
Reference: [ Choy and Agogino, 1986 ] <author> J. Choy and A. Agogino. Symon: </author> <title> Automated symbolic monotonicity analysis system for qualitative design optimization. </title> <booktitle> In Proceedings ASME International Computers in Engineering Conference, </booktitle> <year> 1986. </year>
Reference-contexts: Activity analysis reasons about algebraic properties of constraints and objective functions in order to identify opportunities for dimension reduction. Activity analysis is a generalization of a previous technique, called "monotonicity analysis", that also reduced the dimension of design spaces <ref> [ Choy and Agogino, 1986 ] </ref> , [ Papalambros and Wilde, 1988 ] . This line of research applies to situations in which dimension reduction is provably locally optimal.
Reference: [ Ellman and Murata, 1996 ] <author> T. Ellman and T. Murata. </author> <title> Deductive synthesis of numerical simulation programs from networks of algebraic and ordinary differential equations. </title> <booktitle> In Proceedings of the Eleventh Knowledge-Based Software Engineering Conference, </booktitle> <address> Syracuse, NY, </address> <year> 1996. </year>
Reference-contexts: In the first phase of operation, the DA-MSA uses a technique known as "deductive program 3 synthesis" to create an initial, default optimization strategy. Our research on this portion of the system is reported in <ref> [ Ellman and Murata, 1996 ] </ref> . In the second phase of operation, the user interacts with the DA-MSA to reformulate the initial strategy into a more robust and efficient one. He does so by using the interface illustrated in Figure 3.
Reference: [ Falkenhainer and Forbus, 1991 ] <author> B. Falkenhainer and K. Forbus. </author> <title> Compositional modeling: Finding the right model for the job. </title> <journal> Artificial Intelligence, </journal> <volume> 50, </volume> <year> 1991. </year>
Reference-contexts: Dimension reduction by itself would sometimes lead to solutions that are not locally optimal. It is therefore useful mainly as the first stage of a multi-stage design process. Methods of intelligently constructing and/or selecting approximate models of physical systems have been presented in <ref> [ Falkenhainer and Forbus, 1991 ] </ref> , [ Nayak, 1994 ] . Most of these methods 20 reason qualitatively about the behavior of models in order to choose a suitable one. Considerations of relevance, causality and/or monotonicity are used to decide which models might solve the problem at hand.
Reference: [ Gelsey et al., 1996 ] <author> Andrew Gelsey, Don Smith, Mark Schwabacher, Khaled Rasheed, and Keith Miyake. </author> <title> A search space toolkit. Decision Support Systems, </title> <note> special issue on Unification of Artificial Intelligence with Optimization, 1996. To appear. </note>
Reference-contexts: A nozzle design problem instance is defined by the altitude h, velocity v and duration d of the mission. The nozzle problem class is thus parameterized by h, v and d. Our research on jet engine nozzle design is described more fully in <ref> [ Gelsey et al., 1996 ] </ref> . The nozzle problem presents a challenge to automated design optimization technology for two reasons: the computational expense of computing the objective function and the presence of pathologies in the design space.
Reference: [ Keane, 1996 ] <author> J. Keane. </author> <title> Extensions to Franz, Inc.'s Allegro Common Lisp foreign function interface. </title> <type> Technical Report HPCD-TR-41, </type> <institution> Department of Computer Science, Rutgers University, </institution> <year> 1996. </year>
Reference-contexts: Complex numerical operations, such as optimize, integral and root are actually implemented by C routines taken from [ Press et al., 1986 ] , or public domain sources [ Lawrence et al., 1995 ] . The C routines are wrapped by LISP functions that provide the interfaces described here <ref> [ Keane, 1996 ] </ref> . Each construct in the strategy language plays an important role in design optimization. Nested strategies are useful for applying a sequence of optimization methods (e.g., downhill simplex followed by sequential quadratic programming) in succession, because neither one alone is expected to reliably reach an optimum.
Reference: [ Lawrence et al., 1995 ] <author> C. Lawrence, J. Zhou, and A. </author> <title> Tits. User's guide for CFSQP version 2.3: A C code for solving (large scale) constrained nonlinear (minimax) optimization problems, generating iterates satisfying all inequality constraints. </title> <type> Technical Report TR-94-16r1, </type> <institution> Institute for Systems Research, University of Maryland, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: In order to illustrate our hypothesis, let us consider how approximations are used in numerical optimization algorithms. An illustrative example is CFSQP, a state of the art code for sequential quadratic programming <ref> [ Lawrence et al., 1995 ] </ref> . CFSQP is a "Quasi-Newton" method. Taking a seed design as input, it approximates the objective function with a quadratic function. It solves the resulting quadratic program to find a new design. CFSPQ repeats the approximation-solution process until satisfying convergence criteria. <p> Complex numerical operations, such as optimize, integral and root are actually implemented by C routines taken from [ Press et al., 1986 ] , or public domain sources <ref> [ Lawrence et al., 1995 ] </ref> . The C routines are wrapped by LISP functions that provide the interfaces described here [ Keane, 1996 ] . Each construct in the strategy language plays an important role in design optimization.
Reference: [ Letcher et al., 1987 ] <author> J. Letcher, J. Marshall, J. Oliver, and N. Salvesen. </author> <title> Stars and Stripes. </title> <journal> Scientific American, </journal> <volume> 257(2), </volume> <month> August </month> <year> 1987. </year>
Reference-contexts: We are dealing with a simplified version of the racing yacht design problem. Our research on yacht design has attempted to reconstruct the design process that led to the "Stars and Stripes '87", a sailing yacht that won the America's Cup race in 1987 <ref> [ Letcher et al., 1987 ] </ref> . The yacht problem presents a challenge to automated design optimization technology due to mathematical properties of the balance of force equations. In particular, the net force f is not a smooth function of the design parameters.
Reference: [ Nayak, 1994 ] <author> P. Nayak. </author> <title> Causal approximations. </title> <journal> Artificial Intelligence, </journal> <volume> 70, </volume> <year> 1994. </year>
Reference-contexts: It is therefore useful mainly as the first stage of a multi-stage design process. Methods of intelligently constructing and/or selecting approximate models of physical systems have been presented in [ Falkenhainer and Forbus, 1991 ] , <ref> [ Nayak, 1994 ] </ref> . Most of these methods 20 reason qualitatively about the behavior of models in order to choose a suitable one. Considerations of relevance, causality and/or monotonicity are used to decide which models might solve the problem at hand.
Reference: [ Orelup et al., 1988 ] <author> M. F. Orelup, J. R. Dixon, P. R. Cohen, and M. K. Simmons. Dominic ii: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: The choice of an appropriate optimization strategy will therefore vary over the product design cycle. 19 8 Related Work Several other investigators have used knowledge-based techniques to improve the performance of automatic design algorithms. The DOMINIC-II system is one example <ref> [ Orelup et al., 1988 ] </ref> . DOMINIC-II was motivated by the observation that hill-climbing search does not reliably solve design problems a motivation similar to our own. In DOMINIC-II, this problem was addressed by using a meta-level controller to dynamically switch between different hill-climbing search strategies.
Reference: [ Papalambros and Wilde, 1988 ] <author> P. Papalambros and J. Wilde. </author> <title> Principles of Optimal Design. </title> <publisher> Cam-bridge University Press, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: Activity analysis reasons about algebraic properties of constraints and objective functions in order to identify opportunities for dimension reduction. Activity analysis is a generalization of a previous technique, called "monotonicity analysis", that also reduced the dimension of design spaces [ Choy and Agogino, 1986 ] , <ref> [ Papalambros and Wilde, 1988 ] </ref> . This line of research applies to situations in which dimension reduction is provably locally optimal. In contrast to this, we have focused on engineering applications in which the complexity of the constraint and objective functions precludes such proof.
Reference: [ Peressini et al., 1988 ] <author> A. Peressini, F. Sullivan, and J. Uhl. </author> <title> The Mathematics of Nonlinear Programming. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1988. </year> <month> 23 </month>
Reference-contexts: Design problems can often be cast in the form of constrained optimization, defined formally in one seeks to optimize an objective function, while satisfying equality and inequality constraints <ref> [ Peressini et al., 1988 ] </ref> . A variety of numerical algorithms have been developed for attacking constrained optimization problems [ Press et al., 1986 ] . These numerical tools unfortunately provide only limited means of overcoming the difficulties described above.
Reference: [ Powell, 1990 ] <author> D. Powell. Inter-gen: </author> <title> A hybrid approach to engineering design optimization. </title> <type> Tech--nical report, </type> <institution> Rensselaer Polytechnic Institute Department of Computer Science, </institution> <month> December </month> <year> 1990. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: It might be useful to use some ideas from the DOMINIC-II research our system. For example, our system might benefit from methods used in DOMINIC-II for monitoring and diagnosing problems with hill-climbing search. The ENGINEOUS [ Tong, 1990 ] and INTERGEN <ref> [ Powell, 1990 ] </ref> systems also use knowledge-based methods to improve the performance of design optimization. This work was motivated, in part, by the problem of dealing with failures and other pathological features of complex objective and constraint functions a motivation that is similar to our own.
Reference: [ Press et al., 1986 ] <author> W. Press, B. Flannery, S. Teukolsky, and W. Vetterling. </author> <title> Numerical Recipes. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1986. </year>
Reference-contexts: Design problems can often be cast in the form of constrained optimization, defined formally in one seeks to optimize an objective function, while satisfying equality and inequality constraints [ Peressini et al., 1988 ] . A variety of numerical algorithms have been developed for attacking constrained optimization problems <ref> [ Press et al., 1986 ] </ref> . These numerical tools unfortunately provide only limited means of overcoming the difficulties described above. In particular, they take the objectives, constraints and design parameters as givens, provided in advance by a human user, and remaining fixed during solution of the problem. <p> As another illustration of our hypothesis, consider how design parameter coordinate systems are chosen by numerical optimization algorithms. An illustrative example is Powell's direction set method <ref> [ Press et al., 1986 ] </ref> . Powell's method operates by computing a linear transformation of the design parameters to find a set of conjugate directions. It then uses the transformed parameters to find an optimum. The transformation-solution process is repeated until convergence criteria are satisfied. <p> Complex numerical operations, such as optimize, integral and root are actually implemented by C routines taken from <ref> [ Press et al., 1986 ] </ref> , or public domain sources [ Lawrence et al., 1995 ] . The C routines are wrapped by LISP functions that provide the interfaces described here [ Keane, 1996 ] . Each construct in the strategy language plays an important role in design optimization.
Reference: [ Sacks, 1991 ] <author> E. Sacks. </author> <title> Automatic analysis of one parameter planar ordinary differential equations by intelligent numeric simulation. </title> <journal> Artificial Intelligence, </journal> <volume> 48, </volume> <year> 1991. </year>
Reference-contexts: This work is inspired by research using Artificial Intelligence and Machine Vision techniques to extract information from simulations of physical systems [ Abelson et al., 1989 ] , <ref> [ Sacks, 1991 ] </ref> , [ Yip and Zhao, 1996 ] . We are developing a suite of tools for automatically observing and analyzing the behavior of trial optimizations.
Reference: [ Tong, 1990 ] <author> S. S. Tong. </author> <title> Coupling symbolic manipulation and numerical simulation for complex engineering designs. </title> <booktitle> In Intelligent Mathematical Software Systems, </booktitle> <pages> pages 241 - 252. </pages> <publisher> North-Holland, </publisher> <address> New YOrk, NY, </address> <year> 1990. </year>
Reference-contexts: These problem formulation issues are not addressed in the DOMINIC-II research. It might be useful to use some ideas from the DOMINIC-II research our system. For example, our system might benefit from methods used in DOMINIC-II for monitoring and diagnosing problems with hill-climbing search. The ENGINEOUS <ref> [ Tong, 1990 ] </ref> and INTERGEN [ Powell, 1990 ] systems also use knowledge-based methods to improve the performance of design optimization.
Reference: [ Williams and Cagan, 1994 ] <author> B. Williams and J. Cagan. </author> <title> Activity analysis: The qualitative analysis of stationary points for optimal reasoning. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, Washington., </address> <year> 1994. </year>
Reference-contexts: In contrast to this, our work has focused on methods of reformulating the design parameters, constraints and objective functions themselves. A symbolic reasoning technique called "activity analysis" is presented in <ref> [ Williams and Cagan, 1994 ] </ref> . Activity analysis reasons about algebraic properties of constraints and objective functions in order to identify opportunities for dimension reduction.
Reference: [ Yip and Zhao, 1996 ] <author> K. Yip and F. Zhao. </author> <title> Spatial aggregation: </title> <journal> Theory and applications. Journal of Artificial Intelligence Research, </journal> <volume> 5, </volume> <year> 1996. </year> <month> 24 </month>
Reference-contexts: This work is inspired by research using Artificial Intelligence and Machine Vision techniques to extract information from simulations of physical systems [ Abelson et al., 1989 ] , [ Sacks, 1991 ] , <ref> [ Yip and Zhao, 1996 ] </ref> . We are developing a suite of tools for automatically observing and analyzing the behavior of trial optimizations. Each tool will be designed to extract information that can, in principle, be used to decide whether and how to apply a particular type of transformation.
References-found: 19

