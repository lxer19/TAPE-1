URL: http://www.cs.colorado.edu/users/carzanig/papers/CU-CS-864-98.ps.gz
Refering-URL: http://www.cs.colorado.edu/users/carzanig/papers/index.html
Root-URL: http://www.cs.colorado.edu
Email: fandre,carzanig,dennis,alwg@cs.colorado.edu  
Title: A Reusable, Distributed Repository for Configuration Management Policy Programming  
Author: Andre van der Hoek, Antonio Carzaniga, Dennis Heimbigner, and Alexander L. Wolf 
Note: implement several, rather different, configuration management policies.  
Address: Boulder, CO 80309 USA  
Affiliation: Software Engineering Research Laboratory Department of Computer Science University of Colorado  
Abstract: University of Colorado Department of Computer Science Technical Report CU-CS-864-98 September 1998 ABSTRACT Distributed configuration management is intended to support the activities of projects that span multiple sites. NUCM is a testbed that we are developing to help explore the issues of distributed configuration management. NUCM separates configuration management repositories (i.e., the stores for versions of artifacts) from configuration management policies (i.e., the procedures according to which the versions are manipulated) by providing a generic model of a distributed repository and an associated programmatic interface. Specific configuration management policies are programmed as unique extensions to the generic interface, but the underlying distributed repository is reused across different policies. In this paper, we describe the repository model and its interface, discuss their implementation in NUCM, and present how NUCM has been used to This work was supported in part by the Air Force Materiel Command, Rome Laboratory, and the Defense Advanced Research Projects Agency under Contract Numbers F30602-94-C-0253 and F30602-98-2-0163. The content of the information does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. c fl 1998 Andre van der Hoek, Antonio Carzaniga, Dennis Heimbigner, and Alexander L. Wolf
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Allen, G. Fernandez, K. Kane, D. Leblang, D. Minard, and J. Posner. ClearCase MultiSite: </author> <title> Supporting Geographically-Distributed Software Development. In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <pages> pages 194-214, </pages> <address> New York, New York, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In Mistral, a simple heuristic is employed: add whatever does not exist. This is not always the best choice in a CM setting, and users must be aware of this (implicit) merging behavior. ClearCase MultiSite The ClearCase system [2] has recently been extended with MultiSite <ref> [1] </ref>, an optional product for distributed CM. Rather than having a single, central repository, Multi-Site replicates the repository at remote sites. The replicas are instrumented in such a way that 2 development at each site is performed on a different branch of a global version tree. <p> Furthermore, one could use NUCM repositories to mimic workspaces as in PCMS [44], or use NUCM repositories to provide a setup similar to ClearCase MultiSite <ref> [1] </ref>. These and other approaches to distributed CM can be built using NUCM's peer-to-peer architecture. Of course, a solution based on NUCM might not be as optimized as a specialized solution for a particular CM policy.
Reference: [2] <institution> Atria Software, Natick, Massachusetts. ClearCase Concepts Manual, </institution> <year> 1992. </year>
Reference-contexts: In Mistral, a simple heuristic is employed: add whatever does not exist. This is not always the best choice in a CM setting, and users must be aware of this (implicit) merging behavior. ClearCase MultiSite The ClearCase system <ref> [2] </ref> has recently been extended with MultiSite [1], an optional product for distributed CM. Rather than having a single, central repository, Multi-Site replicates the repository at remote sites.
Reference: [3] <author> D. Belanger, D. Korn, and H. Rao. </author> <title> Infrastructure for Wide-Area Software Development. </title> <booktitle> In Proceedings of the Sixth International Workshop on Software Configuration Management, number 1167 in Lecture Notes in Computer Science, </booktitle> <pages> pages 154-165, </pages> <address> New York, New York, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This can be a serious burden, especially if the attributes and relationships on the artifacts have changed as well. Gradient Similar to ClearCase, Gradient <ref> [3] </ref> is a CM system that is based on replication. But, unlike ClearCase, replication in Gradient is automatic and continuous. Each update that is made to an artifact is broadcasted instantly as a delta to all replicas.
Reference: [4] <institution> Bell Labs, Lucent Technologies, </institution> <address> Murray Hill, New Jersey. </address> <note> Sablime v5.0 User's Reference Manual, </note> <year> 1997. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS [33], JavaSafe [26], NSE [15], Sablime <ref> [4] </ref>, ShapeTools [28], SourceSafe [30], TrueChange [43], and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture.
Reference: [5] <author> B. Berliner. CVS II: </author> <title> Parallelizing Software Development. </title> <booktitle> In Proceedings of 1990 Winter USENIX Conference, </booktitle> <address> Washington, D.C., </address> <year> 1990. </year>
Reference-contexts: Clearly, DRCS is best suited for use in a centralized local-area network, not in a setting of wide-area distribution. Distributed CVS Distributed CVS (DCVS) [21] is an extension of the CVS system <ref> [5] </ref>, a variant of RCS designed to better handle configurations of whole systems. Similar to DRCS, DCVS employs the notion of a central repository to which remote CVS clients connect. As opposed to transporting files, DCVS transports entire configurations to a remote user workspace.
Reference: [6] <author> A. Carzaniga. </author> <title> DVS 1.2 Manual. </title> <institution> Department of Computer Science, University of Colorado, Boulder, Colorado, </institution> <month> June </month> <year> 1998. </year>
Reference-contexts: At present, two of those systems, namely DVS <ref> [6] </ref> and SRM [49], are in use, whereas the third system, WebDAV, represents an experimental implementation of an emerging standard in Web versioning [52]. Rudimentary implementations of the "standard" check-in/check-out and change-set policies [14] were also created, but these are based on a previous version of NUCM. <p> It should be noted that the policies themselves are not the contribution. Instead, the strength of NUCM lies in the ease with which these policies were constructed and the limited amount of work needed to make them suitable for use in a wide-area setting. 6.1 DVS DVS <ref> [6] </ref> is a versioning system that is centered around the notion of workspaces. 2 Individual users populate their workspace with the artifacts needed, lock the artifacts they intend to change, modify these artifacts using the appropriate tools, and eventually commit their changes.
Reference: [7] <author> S.-Y. Chiu and R. Levin. </author> <title> The Vesta Repository: A File System Extension for Software Development. </title> <type> Technical Report 106, </type> <institution> Digital Equipment Corporation, Systems Research Center, Palo Alto, California, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Because a single server is used, a dependency is created on the server site|not only on its reachability, but also on its performance. The last system, Vesta <ref> [7] </ref>, employs a hybrid solution. The same replication mechanism as employed by Gradient is used, but, to ensure consistency, certain actions always synchronize with a designated master repository.
Reference: [8] <author> J.X. Ci, M. Poonawala, and W.-T. Tsai. ScmEngine: </author> <title> A Distributed Software Configuration Management Environment on X.500. </title> <booktitle> In Proceedings of the Seventh International Workshop on Software Configuration Management, number 1235 in Lecture Notes in Computer Science, </booktitle> <pages> pages 108-127, </pages> <address> New York, New York, 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: It should be noted that one of the atoms is part of two collections, but is named differently in each one, namely Frame.c and PullDown.c, respectively. Both atoms and collections can be versioned. However, contrary to other approaches, such as CME [22] and ScmEngine <ref> [8] </ref>, NUCM does not impose any relationship among the various versions of an artifact. In particular, NUCM does not enforce the tree structure of versions found in many| but by no means all|CM systems. NUCM simply provides a unique number with which to identify each version.
Reference: [9] <institution> Continuus Software Corporation, Irvine, California. Continuus Task Reference, </institution> <year> 1994. </year>
Reference-contexts: Other Systems A number of other systems exist that provide distributed capabilities via mechanisms that are similar to the ones employed by the systems listed above. Several of these systems are based on replication across sites. In particular, Continuus has been enhanced with a feature called DCM <ref> [9, 10] </ref>, PVCS has an optional extension named SiteSync [24], and NeumaCM+ incorporates a feature called MultiSite [34]. All of these systems suffer from the same drawbacks as ClearCase MultiSite.
Reference: [10] <institution> Continuus Software Corporation, Irvine, California. Distributed Code Management for Team Engineering, </institution> <year> 1998. </year>
Reference-contexts: Other Systems A number of other systems exist that provide distributed capabilities via mechanisms that are similar to the ones employed by the systems listed above. Several of these systems are based on replication across sites. In particular, Continuus has been enhanced with a feature called DCM <ref> [9, 10] </ref>, PVCS has an optional extension named SiteSync [24], and NeumaCM+ incorporates a feature called MultiSite [34]. All of these systems suffer from the same drawbacks as ClearCase MultiSite.
Reference: [11] <institution> W.H. Davidow and M.S. Malone. The Virtual Corporation. Harper Business, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction Organizations are increasingly involved in software development efforts that are distributed and decentralized in nature. Some organizations are naturally forced into these efforts because their employees are located in multiple geographical locations. Prime examples of such organizations are virtual corporations <ref> [11] </ref>. These corporations typically do not have a centralized workforce. Instead, employees use the Internet to carry out their day-to-day work.
Reference: [12] <institution> Digital Equipment Corporation, Hewlett-Packard Company, HyperDesk Corporation, NCR Corporation, </institution> <note> Object Design, </note> <author> Inc., and SunSoft, Inc. </author> <title> The Common Object Request Broker: Architecture and Specification. Object Management Group, </title> <type> Framingham, </type> <institution> Massachusetts, </institution> <month> December </month> <year> 1993. </year> <note> version 1.2. </note>
Reference-contexts: Our initial approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming <ref> [12] </ref>. For a variety of reasons, we implemented NUCM twice, first with the Orbeline CORBA engine [38] and subsequently with a CORBA implementation called Q [29]. However, in both cases it turned out that CORBA was not the right platform to build a distributed CM repository.
Reference: [13] <author> J. Estublier and R. Casallas. </author> <title> The Adele Configuration Manager. </title> <editor> In W. Tichy, editor, </editor> <booktitle> Configuration Management, number 2 in Trends in Software, </booktitle> <pages> pages 99-134. </pages> <publisher> Wiley, </publisher> <address> London, Great Britain, </address> <year> 1994. </year>
Reference-contexts: This approach suffers from the same performance drawbacks as DRCS, but to a worse degree because of the heavier amount of traffic implicit in transporting configurations. Again, DCVS is best suited for use in a local-area network. Adele Adele <ref> [13] </ref> has been enhanced for distribution through a tool called Mistral [19]. Mistral helps a user manage the replication of an Adele database.
Reference: [14] <author> P.H. Feiler. </author> <title> Configuration Management Models in Commercial Environments. </title> <type> Technical Report SEI-91-TR-07, </type> <institution> Software Engineering Institute, Pittsburgh, Pennsylvania, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: To do this, NUCM defines both a generic model of a distributed CM repository and a programmatic interface for implementing, on top of the repository, specific CM policies, such as check-in/check-out and change sets <ref> [14] </ref>. Structured this way, NUCM allows experimentation, not only with the model and the interface, but also with new CM policies and distribution mechanisms. This paper presents our experiences to date in designing, building, and using NUCM. <p> At present, two of those systems, namely DVS [6] and SRM [49], are in use, whereas the third system, WebDAV, represents an experimental implementation of an emerging standard in Web versioning [52]. Rudimentary implementations of the "standard" check-in/check-out and change-set policies <ref> [14] </ref> were also created, but these are based on a previous version of NUCM. We refer to [51] for that discussion.
Reference: [15] <author> P.H. Feiler and G. Downey. </author> <title> Transaction-Oriented Configuration Management: A Case Study. </title> <type> Technical Report CMU/SEI-90-TR-23, </type> <institution> Software Engineering Institute, Pittsburgh, Pennsylvania, </institution> <year> 1990. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS [33], JavaSafe [26], NSE <ref> [15] </ref>, Sablime [4], ShapeTools [28], SourceSafe [30], TrueChange [43], and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture.
Reference: [16] <author> S.I. Feldman. </author> <title> MAKE | A Program for Maintaining Computer Programs. </title> <journal> Software|Practice and Experience, </journal> (9):252-265, April 1979. 
Reference-contexts: Therefore, it is desirable to provide access to the artifacts that NUCM stores via the native file system, rather than, say, through a database relation. Such unobtrusive behavior allows existing tools and applications, such as for example Make <ref> [16] </ref>, to continue to work without modification. This is important since, first, few users have access to the source code of the tools and applications they use, and second, few users have the desire to make changes to existing software to adapt to a new CM system.
Reference: [17] <author> R. Fielding, J. Gettys, J.C. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. </author> <title> Hypertext Transfer Protocol - HTTP/1.1, January 1998. Internet Proposed Standard RFC 2068. </title>
Reference-contexts: Similarly, through the collection all releases, any site can retrieve releases from the other sites without having to know where a release is physically located. 6.3 WebDAV WebDAV [52] is an emerging standard that proposes to add authoring and versioning primitives to the HTTP protocol <ref> [17] </ref>. In particular, the standard proposes extensions in the following five areas. * Metadata. To be able to describe Web resources, WebDAV proposes the creation of new HTTP methods that add metadata to Web resources, as well as methods to query and retrieve the metadata. * Collections.
Reference: [18] <author> G. Fowler, D. Korn, H. Rao, J. Snyder, and K.-P. Vo. </author> <title> Configuration Management. </title> <editor> In B. Krishnamurthy, editor, </editor> <title> Practical Reusable UNIX Software, chapter 3. </title> <publisher> Wiley, </publisher> <address> New York, New York, </address> <year> 1995. </year>
Reference-contexts: First, the repository currently does not use a delta mechanism to save space when new versions of artifacts are stored. Such a mechanism can be added with relative ease through the adoption of a delta and compression library like vdelta <ref> [18] </ref> or bdiff [47] (a comparison of which can be found in [23]). In particular, it is our intention to enhance the function nc add with a parameter that allows a CM client to control whether the storage of an artifact should use compressed deltas or not.
Reference: [19] <author> C. Gadonna. </author> <title> MISTRAL User Manual V1. </title> <address> LGI, </address> <month> May </month> <year> 1995. </year> <title> ESPRIT Project 5327, </title> <publisher> REBOOT. </publisher>
Reference-contexts: Again, DCVS is best suited for use in a local-area network. Adele Adele [13] has been enhanced for distribution through a tool called Mistral <ref> [19] </ref>. Mistral helps a user manage the replication of an Adele database. Using Mistral, an Adele user at one site assembles a database delta, which compactly represents the changes made to artifacts at that site, and ships the delta to users at other sites.
Reference: [20] <author> G.T. Heineman. </author> <title> A Transaction Manager Component for Cooperative Transaction Models. </title> <type> PhD thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <address> New York, New York, </address> <month> June </month> <year> 1996. </year> <month> 28 </month>
Reference-contexts: Because NUCM only focuses on the distributed versioning problem, we do not intend to provide more extensive locking facilities. Instead, it is our belief that if a more complicated locking scheme is needed, a specialized and full-featured lock manager (e.g., Pern <ref> [20] </ref>) should be used. It should be noted that locks are not enforced by NUCM. Instead, a CM system has to use the attribute functions appropriately to implement its locking policy.
Reference: [21] <author> T. Hung and P.F. Kunz. </author> <title> UNIX Code Management and Distribution. </title> <type> Technical Report SLAC-PUB--5923, </type> <institution> Stanford Linear Accelerator Center, Stanford, California, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: Clearly, DRCS is best suited for use in a centralized local-area network, not in a setting of wide-area distribution. Distributed CVS Distributed CVS (DCVS) <ref> [21] </ref> is an extension of the CVS system [5], a variant of RCS designed to better handle configurations of whole systems. Similar to DRCS, DCVS employs the notion of a central repository to which remote CVS clients connect.
Reference: [22] <author> J.J. Hunt, F. Lamers, J. Reuter, and W.F. Tichy. </author> <title> Distributed Configuration Management via Java and the World Wide Web. </title> <booktitle> In Proceedings of the Seventh International Workshop on Software Configuration Management, number 1235 in Lecture Notes in Computer Science, </booktitle> <pages> pages 161-174, </pages> <address> New York, New York, 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Distributed Source Control System (DSCS) [31] provides a notification mechanism to alleviate this problem, but the task of manually resolving conflicts remains. Moreover, both Gradient and DSCS operate on single files, and it is unclear how either one scales to handle coordinated changes to configurations of files. WWCM WWCM <ref> [22] </ref> is one of many CM systems that use the World Wide Web to achieve distribution. An applet that is loaded into a Web browser implements the client interface of WWCM, while a specialized server maintains the repository with artifacts. <p> It should be noted that one of the atoms is part of two collections, but is named differently in each one, namely Frame.c and PullDown.c, respectively. Both atoms and collections can be versioned. However, contrary to other approaches, such as CME <ref> [22] </ref> and ScmEngine [8], NUCM does not impose any relationship among the various versions of an artifact. In particular, NUCM does not enforce the tree structure of versions found in many| but by no means all|CM systems. NUCM simply provides a unique number with which to identify each version.
Reference: [23] <author> J.J. Hunt, K.-P. Vo, and W.F. Tichy. </author> <title> Delta Algorithms: An Empirical Analysis. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 7(2) </volume> <pages> 192-214, </pages> <month> April </month> <year> 1998. </year>
Reference-contexts: Such a mechanism can be added with relative ease through the adoption of a delta and compression library like vdelta [18] or bdiff [47] (a comparison of which can be found in <ref> [23] </ref>). In particular, it is our intention to enhance the function nc add with a parameter that allows a CM client to control whether the storage of an artifact should use compressed deltas or not. Second, the repository does not provide atomicity and recovery capabilities.
Reference: [24] <institution> INTERSOLV, Rockville, Maryland. PVCS VM SiteSync and Geographically Distributed Development, </institution> <year> 1998. </year>
Reference-contexts: Several of these systems are based on replication across sites. In particular, Continuus has been enhanced with a feature called DCM [9, 10], PVCS has an optional extension named SiteSync <ref> [24] </ref>, and NeumaCM+ incorporates a feature called MultiSite [34]. All of these systems suffer from the same drawbacks as ClearCase MultiSite.
Reference: [25] <author> INTERSOLV, </author> <title> Rockville, Maryland. Using PVCS for Enterprise Distributed Development, </title> <year> 1998. </year>
Reference-contexts: Besides WWCM, several other CM systems have adopted the World Wide Web as their medium for distribution. In particular, MKS Source Integrity [32] and StarTeam [45] have created Web 3 interfaces to their respective CM systems. In addition, PVCS <ref> [25] </ref> and NeumaCM+ [34] have created Web interfaces that can be used as an alternative to their replicated repositories. All of these solutions suffer from the same scalability problem as WWCM; the need to ship artifacts back and forth to a centralized server creates a bottleneck.
Reference: [26] <institution> JavaSoft, Inc., Palo Alto, California. </institution> <note> JavaSafe 1.0 User's Guide, </note> <year> 1998. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS [33], JavaSafe <ref> [26] </ref>, NSE [15], Sablime [4], ShapeTools [28], SourceSafe [30], TrueChange [43], and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture.
Reference: [27] <author> Y.-J. Lin and S.P. Reiss. </author> <title> Configuration Management with Logical Structures. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 298-307. </pages> <institution> Association for Computer Machinery, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: In another setting, a client CM system could provide a specialized browser or editor, hiding the details of the NUCM workspace from the user altogether. For example, the CM model described by Lin and Reiss <ref> [27] </ref> could use NUCM in such a way that its software units map to atoms, its aggregate modules are expressed as collections, and its specialized browser is used to present the contents of workspaces.
Reference: [28] <author> A. Mahler and A. Lampen. </author> <title> An Integrated Toolset for Engineering Software Configurations. </title> <booktitle> In Proceedings of the ACM SOFSOFT/SIGPLAN Software Engineering Symposium on Practical Software Engineering Environments, </booktitle> <pages> pages 191-200, </pages> <address> Boston, Massachusetts, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS [33], JavaSafe [26], NSE [15], Sablime [4], ShapeTools <ref> [28] </ref>, SourceSafe [30], TrueChange [43], and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture.
Reference: [29] <author> M.J. Maybee, D.M. Heimbigner, and L.J. Osterweil. </author> <title> Multilanguage Interoperability in Distributed Systems. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 451-463. </pages> <institution> Association for Computer Machinery, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: Our initial approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [12]. For a variety of reasons, we implemented NUCM twice, first with the Orbeline CORBA engine [38] and subsequently with a CORBA implementation called Q <ref> [29] </ref>. However, in both cases it turned out that CORBA was not the right platform to build a distributed CM repository. The 17 following two reasons are the primary sources of this mismatch. 1. CORBA is not well suited for bulk data transfer.
Reference: [30] <institution> Microsoft Corporation, Redmond, Washington. Managing Projects with Visual SourceSafe, </institution> <year> 1997. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS [33], JavaSafe [26], NSE [15], Sablime [4], ShapeTools [28], SourceSafe <ref> [30] </ref>, TrueChange [43], and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture.
Reference: [31] <author> B. Milewski. </author> <title> Distributed Source Control System. </title> <booktitle> In Proceedings of the Seventh International Workshop on Software Configuration Management, number 1235 in Lecture Notes in Computer Science, </booktitle> <pages> pages 98-107, </pages> <address> New York, New York, 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The other updates are simply stored as implicit branches. Unfortunately, users are not notified about such incidents, which can cause serious problems with seemingly lost updates. Distributed Source Control System (DSCS) <ref> [31] </ref> provides a notification mechanism to alleviate this problem, but the task of manually resolving conflicts remains. Moreover, both Gradient and DSCS operate on single files, and it is unclear how either one scales to handle coordinated changes to configurations of files.
Reference: [32] <institution> Mortice Kern Systems, Inc., Waterloo, Canada. </institution> <note> MKS Source Integrity Reference Manual, </note> <year> 1995. </year>
Reference-contexts: In either case, users are closely involved in the process of managing the distribution of artifacts among sites. Besides WWCM, several other CM systems have adopted the World Wide Web as their medium for distribution. In particular, MKS Source Integrity <ref> [32] </ref> and StarTeam [45] have created Web 3 interfaces to their respective CM systems. In addition, PVCS [25] and NeumaCM+ [34] have created Web interfaces that can be used as an alternative to their replicated repositories.
Reference: [33] <author> B.P. Munch. </author> <title> Versioning in a Software Engineering Database | the Change Oriented Way. </title> <type> PhD thesis, </type> <address> DCST, NTH, Trondheim, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS <ref> [33] </ref>, JavaSafe [26], NSE [15], Sablime [4], ShapeTools [28], SourceSafe [30], TrueChange [43], and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture.
Reference: [34] <institution> Neuma Technology Corporation, </institution> <address> Ottawa, Canada. NeumaCM+ FAQ's, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: Several of these systems are based on replication across sites. In particular, Continuus has been enhanced with a feature called DCM [9, 10], PVCS has an optional extension named SiteSync [24], and NeumaCM+ incorporates a feature called MultiSite <ref> [34] </ref>. All of these systems suffer from the same drawbacks as ClearCase MultiSite. Users are responsible for maintaining the distribution, having to explicitly synchronize repositories by merging updates from several sites into a new master copy and subsequently distributing the new master copy to all replicas. <p> Besides WWCM, several other CM systems have adopted the World Wide Web as their medium for distribution. In particular, MKS Source Integrity [32] and StarTeam [45] have created Web 3 interfaces to their respective CM systems. In addition, PVCS [25] and NeumaCM+ <ref> [34] </ref> have created Web interfaces that can be used as an alternative to their replicated repositories. All of these solutions suffer from the same scalability problem as WWCM; the need to ship artifacts back and forth to a centralized server creates a bottleneck. Three other systems deserve mention.
Reference: [35] <author> B.C. Neuman. </author> <title> The Prospero File System: A Global File System Based on the Virtual System Model. </title> <booktitle> Usenix Association, File Systems Workshop. </booktitle>
Reference-contexts: server, this server combines with the other NUCM servers to provide the CM system access to all the artifacts in the logical repository. 5.2 NUCM Implementation To implement NUCM according to the architecture of Figure 6, some obvious candidates exist, including a distributed file system (e.g., Jade [39] or Prospero <ref> [35] </ref>), a distributed database [41], or an advanced operating system environment (e.g., PCTE [46]). Our initial approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [12].
Reference: [36] <author> B. O'Donovan and J.B. </author> <title> Grimson. A Distributed Version Control System for Wide Area Networks. </title> <journal> Software Engineering Journal, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: This inhibits flexibility both in how artifacts are distributed and in what CM policies can be employed. Below we describe the distribution aspects of several prominent and representative CM systems, illustrating these problems in more detail. Distributed RCS Distributed RCS (DRCS) <ref> [36] </ref> is an extension of the popular RCS system [48]. All artifacts, including the individual versions of a file, the version tree, and the descriptive file attributes, are stored in a central repository. Distribution is achieved by establishing a client/server relationship among remote RCS clients and the central repository. <p> NUCM's peer-to-peer architecture allows for an extremely flexible distribution mechanism that can be used to model many different distribution schemes. For example, one could use a single NUCM repository that is accessed by many CM client systems, as in the case of DRCS <ref> [36] </ref>. Or, one could construct a fault-tolerant CM system by using two NUCM repositories and one CM client, where the client uses two workspaces, one for each repository, to replicate every versioning action it performs.
Reference: [37] <author> Perforce Software, Alameda, </author> <title> California. Networked Software Development: SCM over the Internet and Intranets, </title> <month> March </month> <year> 1998. </year>
Reference-contexts: The only difference is that PCMS allows for a multi-level hierarchy of distributed workspaces, whereas DCVS allows only one level. The problems remain the same though, since all changes eventually have to be committed to the main workspace. The second system, Perforce <ref> [37] </ref>, employs a client-server distribution mechanism similar to DRCS. Although its communication mechanism has been optimized for wide-area networks through the use of compression and deltas, Perforce still suffers from the same problems as DRCS.
Reference: [38] <institution> PostModern Computing Technologies, Inc, Mountain View, California. </institution> <note> Orbeline User's Guide, </note> <year> 1994. </year>
Reference-contexts: Our initial approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [12]. For a variety of reasons, we implemented NUCM twice, first with the Orbeline CORBA engine <ref> [38] </ref> and subsequently with a CORBA implementation called Q [29]. However, in both cases it turned out that CORBA was not the right platform to build a distributed CM repository. The 17 following two reasons are the primary sources of this mismatch. 1.
Reference: [39] <author> H. Rao and L.L. Peterson. </author> <title> Accessing Files in an Internet: The Jade File system. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 19(6) </volume> <pages> 613-624, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: a particular NUCM server, this server combines with the other NUCM servers to provide the CM system access to all the artifacts in the logical repository. 5.2 NUCM Implementation To implement NUCM according to the architecture of Figure 6, some obvious candidates exist, including a distributed file system (e.g., Jade <ref> [39] </ref> or Prospero [35]), a distributed database [41], or an advanced operating system environment (e.g., PCTE [46]). Our initial approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [12].
Reference: [40] <author> C. Reichenberger. VOODOO: </author> <title> A Tool for Orthogonal Version Management. In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <pages> pages 61-79, </pages> <address> New York, New York, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS [33], JavaSafe [26], NSE [15], Sablime [4], ShapeTools [28], SourceSafe [30], TrueChange [43], and VOODOO <ref> [40] </ref>, do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture. Typically, the CM system is augmented with a simple client/server interface.
Reference: [41] <author> J.B. Rothnie, P.A. Bernstein, S. Fox, N. Goodman, M. Hammer, T.A Landers, C. Reeve, D.W. Shipman, and E. Wong. </author> <title> Introduction to a System for Distributed Databases (SDD-1). </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 5(1) </volume> <pages> 1-17, </pages> <month> March </month> <year> 1980. </year> <month> 29 </month>
Reference-contexts: with the other NUCM servers to provide the CM system access to all the artifacts in the logical repository. 5.2 NUCM Implementation To implement NUCM according to the architecture of Figure 6, some obvious candidates exist, including a distributed file system (e.g., Jade [39] or Prospero [35]), a distributed database <ref> [41] </ref>, or an advanced operating system environment (e.g., PCTE [46]). Our initial approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [12].
Reference: [42] <institution> Softool Corp., Goleta, California. </institution> <month> CCC/Manager, </month> <title> Managing the Software Life Cycle across the Com--plete Enterprise, </title> <year> 1994. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest <ref> [42] </ref>, EPOS [33], JavaSafe [26], NSE [15], Sablime [4], ShapeTools [28], SourceSafe [30], TrueChange [43], and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. <p> Although this results in a rather primitive locking facility, these functions do allow the construction of the actual locking schemes employed in such existing lock-based CM policies as RCS [48] and CCC/Harvest <ref> [42] </ref>. Because NUCM only focuses on the distributed versioning problem, we do not intend to provide more extensive locking facilities. Instead, it is our belief that if a more complicated locking scheme is needed, a specialized and full-featured lock manager (e.g., Pern [20]) should be used.
Reference: [43] <institution> Software Maintenance & Development Systems, Inc, Concord, Massachusetts. Aide de Camp Product Overview, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: In fact, many commercial and research systems, such as CCC/Harvest [42], EPOS [33], JavaSafe [26], NSE [15], Sablime [4], ShapeTools [28], SourceSafe [30], TrueChange <ref> [43] </ref>, and VOODOO [40], do not yet provide any real support for distribution. Those systems that do, appear to suffer from one or more of the following significant problems. 1. Distribution is grafted onto an existing, non-distributed architecture. Typically, the CM system is augmented with a simple client/server interface.
Reference: [44] <author> SQL Software, </author> <title> Vienna, Virginia. The Inside Story: Process Configuration Management with PCMS Dimensions, </title> <year> 1998. </year>
Reference-contexts: All of these solutions suffer from the same scalability problem as WWCM; the need to ship artifacts back and forth to a centralized server creates a bottleneck. Three other systems deserve mention. The first, PCMS <ref> [44] </ref>, leverages its workspace synchronization routines to achieve distribution. In essence, this solution is similar to the solution provided by DCVS. The only difference is that PCMS allows for a multi-level hierarchy of distributed workspaces, whereas DCVS allows only one level. <p> Or, one could construct a fault-tolerant CM system by using two NUCM repositories and one CM client, where the client uses two workspaces, one for each repository, to replicate every versioning action it performs. Furthermore, one could use NUCM repositories to mimic workspaces as in PCMS <ref> [44] </ref>, or use NUCM repositories to provide a setup similar to ClearCase MultiSite [1]. These and other approaches to distributed CM can be built using NUCM's peer-to-peer architecture. Of course, a solution based on NUCM might not be as optimized as a specialized solution for a particular CM policy.
Reference: [45] <institution> Starbase Corporation, Irvine, California. </institution> <note> StarTeam Web Connect Users's Guide, </note> <year> 1996. </year>
Reference-contexts: In either case, users are closely involved in the process of managing the distribution of artifacts among sites. Besides WWCM, several other CM systems have adopted the World Wide Web as their medium for distribution. In particular, MKS Source Integrity [32] and StarTeam <ref> [45] </ref> have created Web 3 interfaces to their respective CM systems. In addition, PVCS [25] and NeumaCM+ [34] have created Web interfaces that can be used as an alternative to their replicated repositories.
Reference: [46] <author> I. Thomas. </author> <title> PCTE Interfaces: Supporting Tools in Software-Engineering Environments. </title> <journal> IEEE Software, </journal> <pages> pages 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: system access to all the artifacts in the logical repository. 5.2 NUCM Implementation To implement NUCM according to the architecture of Figure 6, some obvious candidates exist, including a distributed file system (e.g., Jade [39] or Prospero [35]), a distributed database [41], or an advanced operating system environment (e.g., PCTE <ref> [46] </ref>). Our initial approach was to experiment with a rather different alternative, namely the CORBA standard for distributed object programming [12]. For a variety of reasons, we implemented NUCM twice, first with the Orbeline CORBA engine [38] and subsequently with a CORBA implementation called Q [29].
Reference: [47] <author> W.F. Tichy. </author> <title> The String-to-String Correction Problem with Block Moves. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(4) </volume> <pages> 309-321, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: First, the repository currently does not use a delta mechanism to save space when new versions of artifacts are stored. Such a mechanism can be added with relative ease through the adoption of a delta and compression library like vdelta [18] or bdiff <ref> [47] </ref> (a comparison of which can be found in [23]). In particular, it is our intention to enhance the function nc add with a parameter that allows a CM client to control whether the storage of an artifact should use compressed deltas or not.
Reference: [48] <author> W.F. Tichy. RCS, </author> <title> A System for Version Control. </title> <journal> Software|Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Below we describe the distribution aspects of several prominent and representative CM systems, illustrating these problems in more detail. Distributed RCS Distributed RCS (DRCS) [36] is an extension of the popular RCS system <ref> [48] </ref>. All artifacts, including the individual versions of a file, the version tree, and the descriptive file attributes, are stored in a central repository. Distribution is achieved by establishing a client/server relationship among remote RCS clients and the central repository. <p> Therefore, it can be used to lock an artifact by simply setting a unique attribute that represents the lock. Although this results in a rather primitive locking facility, these functions do allow the construction of the actual locking schemes employed in such existing lock-based CM policies as RCS <ref> [48] </ref> and CCC/Harvest [42]. Because NUCM only focuses on the distributed versioning problem, we do not intend to provide more extensive locking facilities. Instead, it is our belief that if a more complicated locking scheme is needed, a specialized and full-featured lock manager (e.g., Pern [20]) should be used. <p> This policy is similar to the one employed by RCS <ref> [48] </ref>, except for the fact that DVS explicitly recognizes and versions collections and, moreover, operates in a distributed setting. DVS possesses some characteristics that illustrate the power of NUCM. First, no special code needed to be developed for DVS to operate in a wide-area setting.
Reference: [49] <editor> A. van der Hoek, R.S. Hall, D.M. Heimbigner, and A.L. Wolf. </editor> <booktitle> Software Release Management. In Proceedings of the Sixth European Software Engineering Conference, number 1301 in Lecture Notes in Computer Science, </booktitle> <pages> pages 159-175, </pages> <address> New York, New York, </address> <month> September </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: At present, two of those systems, namely DVS [6] and SRM <ref> [49] </ref>, are in use, whereas the third system, WebDAV, represents an experimental implementation of an emerging standard in Web versioning [52]. Rudimentary implementations of the "standard" check-in/check-out and change-set policies [14] were also created, but these are based on a previous version of NUCM. <p> The third and final part of the function deals with the recursive nature of the synchronization of a workspace. If the artifact to be synchronized is a collection, its contained artifacts are obtained and each of these artifacts is in turn synchronized through a recursive call. 6.2 SRM SRM <ref> [49] </ref> is a tool that addresses the software release management problem. 5 It supports the release of systems of systems from multiple, geographically distributed sites. In particular, SRM tracks dependency information to automate and optimize the retrieval of components. Developers are supported by a simple release process that hides distribution.
Reference: [50] <editor> A. van der Hoek, D.M. Heimbigner, and A.L. Wolf. </editor> <title> Does Configuration Management Research have a Future? In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <pages> pages 305-309, </pages> <address> New York, New York, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: New research directions are now beginning to emerge in the area <ref> [50] </ref>, and the issues that arise in supporting multiple engineers at multiple sites appear to be at the forefront. In this paper we have described our approach to the distributed CM problem.
Reference: [51] <editor> A. van der Hoek, D.M. Heimbigner, and A.L. Wolf. </editor> <title> A Generic, Peer-to-Peer Repository for Distributed Configuration Management. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 308-317. </pages> <institution> Association for Computer Machinery, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: However, NUCM requires careful coordination among its servers. In an implementation that does not reckon with distribution, this need for coordination leads to a large amount of server-to-server communication. Unfortunately, these reasons were only revealed after our CORBA-based implementation of NUCM was well underway <ref> [51] </ref>. <p> Rudimentary implementations of the "standard" check-in/check-out and change-set policies [14] were also created, but these are based on a previous version of NUCM. We refer to <ref> [51] </ref> for that discussion. Below, we discuss each system in more detail and use parts of their implementation to illustrate how NUCM can be used to program particular CM policies that may or may not be distributed. It should be noted that the policies themselves are not the contribution.
Reference: [52] <author> E.J. Whitehead, Jr. </author> <title> World Wide Web Distributed Authoring and Versioning (WebDAV): an Introduction. </title> <journal> StandardView, </journal> <volume> 5(1) </volume> <pages> 3-8, </pages> <month> March </month> <year> 1997. </year> <month> 30 </month>
Reference-contexts: At present, two of those systems, namely DVS [6] and SRM [49], are in use, whereas the third system, WebDAV, represents an experimental implementation of an emerging standard in Web versioning <ref> [52] </ref>. Rudimentary implementations of the "standard" check-in/check-out and change-set policies [14] were also created, but these are based on a previous version of NUCM. We refer to [51] for that discussion. <p> Similarly, through the collection all releases, any site can retrieve releases from the other sites without having to know where a release is physically located. 6.3 WebDAV WebDAV <ref> [52] </ref> is an emerging standard that proposes to add authoring and versioning primitives to the HTTP protocol [17]. In particular, the standard proposes extensions in the following five areas. * Metadata.
References-found: 52

