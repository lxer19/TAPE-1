URL: http://rakaposhi.eas.asu.edu/aips-98-ws-1.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: famol.mali, raog@.asu.edu  
Title: Frugal Propositional Encodings for Planning  
Author: Amol D. Mali, Subbarao Kambhampati 
Address: Tempe, AZ 85287-5406  
Affiliation: Dept. of computer science Engg. Arizona state university,  
Abstract: Casting planning as a satisfiability problem has recently lead to the development of significantly faster planners. One key factor behind their success is the concise nature of the encodings of the planning problems. This has lead to an interest in designing schemes for automated generation of propositional encodings for the planning problems. These encodings are inspired by traditional planning algorithms like state space and causal link planning. We examine the existing schemes for generating encodings for causal planning and suggest several improvements to them. We show that these improvements reduce the number of clauses and/or variables in the encoding. Since the number of clauses and variables are related to the hardness of solving a constraint satisfaction problem, our results provide important directions in efficiently encoding planning problems. Our improvements derive plan encoding that is smaller than all other previously developed plan encodings. 
Abstract-found: 1
Intro-found: 1
Reference: [Bayardo & Schrag 97] <author> Roberto Bayardo Jr. and Robert Schrag, </author> <title> Using CSP look back techniques to solve real world SAT instances, </title> <booktitle> Proc. of AAAI-97. </booktitle>
Reference-contexts: Such an encoding can be automatically generated. [Kautz & Selman 92] suggested that by casting planning as a model finding problem, one can exploit the efficient satisfiability solvers like GSAT [Selman, Levesque & Mitchell 92]. Indeed, [Kautz & Selman 96], <ref> [Bayardo & Schrag 97] </ref> reported very successful results on planning as satisfiability, using stochastic search and a variation of systematic search enhanced with relevance bounded learning respectively. The satisfiability-based planner of [Kautz & Selman 96] is believed to be the fastest of all classical planners currently available.
Reference: [Kautz, McAllester & Selman 96] <author> Henry Kautz, David McAllester and Bart Selman, </author> <title> Encoding plans in propositional logic, </title> <booktitle> Proc. of KRR-96. </booktitle>
Reference-contexts: The satisfiability-based planner of [Kautz & Selman 96] is believed to be the fastest of all classical planners currently available. State space encodings of planning problems have been tested in previous literature [Kautz & Selman 96]. Plan space (causal) encodings have been proposed in <ref> [Kautz, McAllester & Selman 96] </ref>. However we found that these encodings contain redundant constraints and the encodings can be made more compact. <p> In section 2, we provide five variations of the causal planning encoding of <ref> [Kautz, McAllester & Selman 96] </ref> and explain them. The variations we propose to the causal encodings preserve soundness and completeness. <p> We then provide an explanation of the encoding schemas (that capture the constraints to be satisfied to yield a valid plan) and report the asymptotic size of the encoding. We give formal de scriptions of the schemas in the figures. 2.1 Eliminating Actions In the ground causal encoding of <ref> [Kautz, McAllester & Selman 96] </ref>, steps are mapped to actions and as usual, actions have preconditions and effects. Hence actions serve as middle agents between steps and preconditions, effects. We eliminate the middle agents here. This change reduces the number of variables. <p> Let the add effect of o 2 be a 21 and precondition be n 21 . Let us assume that these actions do not have any delete effects. <ref> [Kautz, McAllester & Selman 96] </ref> represent this in the following manner - ((p 3 = o 1 ) _ (p 3 = o 2 ) _ ::), (Adds (p 3 ; a 11 ) () ((p 3 = o 1 ) _ :::)), (Adds (p 3 ; a 12 ) () <p> Adds (p 3 ; a 12 ) ^ N eeds (p 3 ; n 12 ) ^ N eeds (p 3 ; n 11 )) _ (Adds (p 3 ; a 21 ) ^ N eeds (p 3 ; n 21 ))) _ :: Our description clearly has fewer variables. <ref> [Kautz, McAllester & Selman 96] </ref> mention that actions can be eliminated from the state space encodings for planning. We show that this idea can be exploited in causal encodings as well. The formal description of the important schemas is provided in Figure 1. We explain the schemas here. <p> (k 2 fl j j +k fl j O j flm) variables (required by schemas 1, 5), where m = max (fA i + D i + R i j i 2 [1; j O j]g): 2.2 Imposing a Total Order On the Steps In the ground causal encoding of <ref> [Kautz, McAllester & Selman 96] </ref>, each step can be mapped to any action. This encoding does not impose a total order on the steps. Instead the encoding contains all possible step orderings. We argue that this is not necessary. <p> Consider an example. Let there be four actions o 1 ; o 2 ; o 3 and o 4 in the domain. Consider an encoding generated to find a 3 step plan. <ref> [Kautz, McAllester & Selman 96] </ref> represent all possible orderings among the 3 steps p 1 ; p 2 ; p 3 (these are p 1 p 2 ; p 2 p 1 ; p 1 p 3 ; p 3 p 1 ; p 2 p 3 ; p 3 p <p> Let the add effects of o 4 be a 41 ; a 42 and delete effects be d 41 ; d 42 ; d 43 . Let the preconditions of o 4 be n 41 ; n 42 . The portion of causal encoding of <ref> [Kautz, McAllester & Selman 96] </ref> which is immediately relevant to this case, says that, ((p 2 = o 4 ) _ :::); (Adds (p 2 ; a 41 ) () ((p 2 = o 4 ) _ (:::::::))); (Adds (p 2 ; a 42 ) () ((p 2 = o 4 <p> clauses and O (k fl j O j flm+k 2 fl j j) variables, where m = max (fA i + D i + R i j i 2 [1; j O j]g): 3 Quantitative Improvements We discuss here the improvements that we obtain over the ground causal encoding of <ref> [Kautz, McAllester & Selman 96] </ref>. The reduction in the number of clauses and variables is reported below. These expressions are an algebraic difference between the sizes of our encoding and the ground causal encoding of [Kautz, McAllester & Selman 96]. <p> Improvements We discuss here the improvements that we obtain over the ground causal encoding of <ref> [Kautz, McAllester & Selman 96] </ref>. The reduction in the number of clauses and variables is reported below. These expressions are an algebraic difference between the sizes of our encoding and the ground causal encoding of [Kautz, McAllester & Selman 96]. Eliminating the representation of actions in an encoding (as in Figure 1, variation 1) reduces the number of variables by (kfl j O j). This however increases the number of clauses. <p> Since the number of clauses and variables are related to the hardness of solving an encoding, our results provide important insights into generation of frugal plan encodings. It is claimed that the lifted version of causal encodings in <ref> [Kautz, McAllester & Selman 96] </ref> has the smallest size, when compared with the other kinds of plan encodings. However the redundancies that we removed exist in the lifted version as well, indicating a clear scope for further improvement.
Reference: [ Kautz & Selman 92] <author> Henry Kautz and Bart Selman, </author> <title> Planning as satisfiability, </title> <booktitle> Proc. of ECAI-92. </booktitle>
Reference-contexts: There will be a solution of n or less non-null actions for the given planning problem if and only if there exists a model of this formula. We refer to this formula in conjunctive normal form (CNF) as a plan encoding. Such an encoding can be automatically generated. <ref> [Kautz & Selman 92] </ref> suggested that by casting planning as a model finding problem, one can exploit the efficient satisfiability solvers like GSAT [Selman, Levesque & Mitchell 92].
Reference: [Kautz & Selman 96] <author> Henry Kautz and Bart Selman, </author> <title> Pushing the envelope: Planning, Propositional logic and Stochastic search, </title> <booktitle> Proc. of AAAI-96. </booktitle>
Reference-contexts: Traditional planning algorithms based on split & prune search have been shown to be very inefficient. <ref> [Kautz & Selman 96] </ref> reported a satisfiability-based planner that did not use any heuristic knowledge and fl To appear in the working notes of the AIPS-98 workshop "Planning As Combinatorial Search." yet performed orders of magnitude faster than the other existing planners. <p> Such an encoding can be automatically generated. [Kautz & Selman 92] suggested that by casting planning as a model finding problem, one can exploit the efficient satisfiability solvers like GSAT [Selman, Levesque & Mitchell 92]. Indeed, <ref> [Kautz & Selman 96] </ref>, [Bayardo & Schrag 97] reported very successful results on planning as satisfiability, using stochastic search and a variation of systematic search enhanced with relevance bounded learning respectively. The satisfiability-based planner of [Kautz & Selman 96] is believed to be the fastest of all classical planners currently available. <p> Indeed, <ref> [Kautz & Selman 96] </ref>, [Bayardo & Schrag 97] reported very successful results on planning as satisfiability, using stochastic search and a variation of systematic search enhanced with relevance bounded learning respectively. The satisfiability-based planner of [Kautz & Selman 96] is believed to be the fastest of all classical planners currently available. State space encodings of planning problems have been tested in previous literature [Kautz & Selman 96]. Plan space (causal) encodings have been proposed in [Kautz, McAllester & Selman 96]. <p> The satisfiability-based planner of <ref> [Kautz & Selman 96] </ref> is believed to be the fastest of all classical planners currently available. State space encodings of planning problems have been tested in previous literature [Kautz & Selman 96]. Plan space (causal) encodings have been proposed in [Kautz, McAllester & Selman 96]. However we found that these encodings contain redundant constraints and the encodings can be made more compact. <p> This lead us to propose novel variations of the plan space encodings, each of which expresses the planning constraints with more parsimony and makes the encod-ings more economical, either by reducing the number of clauses or variables or both. <ref> [Kautz & Selman 96] </ref> and [Kautz, McAllester & Sel-man 96] point out the importance of reducing the sizes of the encodings. <p> Though a reduction in the number of clauses and/or variables does not universally imply a reduced time to solve the problem, achieving such a reduction has been believed to have payoffs. The empirical results of <ref> [Kautz & Selman 96] </ref> do show that smaller encodings needed smaller solving times. Various encodings that we developed have different number of clauses and variables.
Reference: [Kautz, McAllester & Selman 97] <author> Henry Kautz, David McAllester and Bart Selman, </author> <title> Exploiting the variable dependency in local search, </title> <note> Poster session abstract, IJCAI-97. </note>
Reference-contexts: As a result, strategies that achieve a practically useful reduction in the size of an encoding will be important. It is correctly argued in <ref> [Kautz, McAllester & Selman 97] </ref> that the value of propositional reasoning depends on our ability to find suitable encodings of practical problems.
Reference: [Selman, Levesque & Mitchell 92] <author> Bart Selman, H. Levesque and D. Mitchell, </author> <title> A new method for solving hard satisfiability problems, </title> <booktitle> Proc. of AAAI-92, </booktitle> <pages> 440-446. </pages>
Reference-contexts: We refer to this formula in conjunctive normal form (CNF) as a plan encoding. Such an encoding can be automatically generated. [Kautz & Selman 92] suggested that by casting planning as a model finding problem, one can exploit the efficient satisfiability solvers like GSAT <ref> [Selman, Levesque & Mitchell 92] </ref>. Indeed, [Kautz & Selman 96], [Bayardo & Schrag 97] reported very successful results on planning as satisfiability, using stochastic search and a variation of systematic search enhanced with relevance bounded learning respectively.
Reference: [Mali & Kambhampati 98] <author> Amol D. Mali and Subbarao Kamb-hampati, </author> <title> Encoding HTN planning in propositional logic, </title> <booktitle> Proceedings of AIPS-98. </booktitle>
Reference-contexts: We call our steps and actions primitive since we do not deal with hierarchical task networks (HTNs). The conversion of an HTN planning problem into a satisfiability problem has been addressed in <ref> [Mali & Kambhampati 98] </ref>.
References-found: 7

