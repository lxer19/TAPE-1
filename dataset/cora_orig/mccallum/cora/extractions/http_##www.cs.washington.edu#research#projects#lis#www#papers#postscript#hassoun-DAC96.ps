URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/hassoun-DAC96.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: 
Email: fsoha,ebelingg@cs.washington.edu  
Title: Architectural Retiming: Pipelining Latency-Constrained Circuits  
Author: Soha Hassoun and Carl Ebeling 
Web: http://www.cs.washington.edu/research/projects/lis/www/archretiming  
Address: Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Abstract: This paper presents a new optimization technique called architectural retiming which is able to improve the performance of many latency-constrained circuits. Architectural retiming achieves this by increasing the number of registers on the latency-constrained path while preserving the functionality and latency of the circuit. This is done using the concept of a negative register, which can be implemented using precomputation and prediction. We use the name architectural retiming since it both reschedules operations in time and modifies the structure of the circuit to preserve its functionality. We illustrate the use of architectural retiming on two realistic examples and present performance improvement results for a number of sample circuits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Alidina, J. Monteiro, S. Devadas, A. Ghosh, and M. Pa-paefthymiou. </author> <title> "Precomputation-Based Sequential Logic Optimization for Low Power". </title> <booktitle> In Proc. of the 1994 IEEE International Conf on CAD, </booktitle> <pages> pages 74 -81, </pages> <year> 1994. </year>
Reference-contexts: Holtmann and Ernst present a scheduling algorithm that applies a speculative technique that is modeled after mul tiple branch prediction in a processor [5]. Precomputation has been used by Alidina et al. to restructure circuits to consume less power <ref> [1] </ref>. 7 Conclusion and Future Work We have found architectural retiming to be an elegant and powerful formulation that promises to generalize and automatically generate a number of ad hoc sequential optimization techniques that address the problem of improving the performance of latency-constrained circuits.
Reference: [2] <author> K. Bolding, S.-C. Cheung, S.-E. Choi, C. Ebeling, S. Has-soun, T. A. Ngo, and R. Wille. </author> <title> "The Chaos Router Chip: Design and Implementation of an Adaptive Router". </title> <booktitle> In Proceedings of VLSI '93, </booktitle> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: added along the critical path and a bypass path allows the data from the memory to the cache to maintain a one-cycle latency. 4.2 Example 2: The Chaos Router The second example is taken from the chaos router, a two-dimensional, random, non-minimal adaptive packet router for implementing multicomputer interconnection networks <ref> [2] </ref>. Multi-flit packets from the network enter the router through input frames (buffers) and are routed to neighboring routers or the processor connected to the router through output frames.
Reference: [3] <author> S. T. Chakradhar, S. Dey, M. Potkonjak, and S. Roth-weiler. </author> <title> "Sequential Circuit Delay Optimization Using Global Path Delays". </title> <booktitle> In Proc. 30th ACM-IEEE Design Automation Conf., </booktitle> <pages> pages 483 -489, </pages> <year> 1993. </year>
Reference-contexts: Peripheral re-timing [9] moved registers from the interior of a circuit to its environment to allow the whole circuit to be optimized using combinational optimization. Chakardhar et al. took a more timing-driven approach to sequential optimization that results in applying combinational optimization techniques to each stage in the circuit <ref> [3] </ref>. This technique identifies the least stringent set of arrival and required timing constraints which are passed to a combinational delay optimizer along with the circuit. Kogge discusses the problem of pipelining circuits with feedback [7].
Reference: [4] <author> G. De Micheli. </author> <title> "Synchronous Logic Synthesis: Algorithms for Cycle-Time Minimization". </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(1) </volume> <pages> 63-73, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Precomputation-based architectural retiming performs sequential logic optimization of latency-constrained paths by exposing adjacent pipeline stages for combinational optimization, which is not performed by current sequential op timization techniques. De Micheli applies local algebraic transformations across latch boundaries <ref> [4] </ref>. Peripheral re-timing [9] moved registers from the interior of a circuit to its environment to allow the whole circuit to be optimized using combinational optimization.
Reference: [5] <author> U. Holtmann and R. Ernst. </author> <title> "Combining MBP-Speculative Computation and Loop Pipelining in High-Level Synthesis". </title> <booktitle> In Proc. European Design Automation Conf., </booktitle> <pages> pages 550-6, </pages> <year> 1995. </year>
Reference-contexts: Holtmann and Ernst present a scheduling algorithm that applies a speculative technique that is modeled after mul tiple branch prediction in a processor <ref> [5] </ref>.
Reference: [6] <author> G. Jones and M. Sheeran. </author> <title> "Circuit Design in Ruby". </title> <booktitle> In IFIP WG 10.5 Lecture Notes, </booktitle> <pages> pages 13 -70, </pages> <year> 1990. </year>
Reference-contexts: Unlike architectural retiming, which actually implements negative registers, peripheral retiming uses negative registers as a bookkeeping technique to keep track of the number of registers borrowed from the environment. Negative registers were also used in Ruby <ref> [6] </ref> to skew data while composing a circuit design. Precomputation-based architectural retiming performs sequential logic optimization of latency-constrained paths by exposing adjacent pipeline stages for combinational optimization, which is not performed by current sequential op timization techniques. De Micheli applies local algebraic transformations across latch boundaries [4].
Reference: [7] <author> P. Kogge. </author> <title> "The Architecture of Pipelined Computers". </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: This technique identifies the least stringent set of arrival and required timing constraints which are passed to a combinational delay optimizer along with the circuit. Kogge discusses the problem of pipelining circuits with feedback <ref> [7] </ref>. He solves the problem of transforming a recurrence equation x (n) that originally depends on the previous sequence, x (n 1) to a recurrence equation that depends on an earlier recurrence. Kogge's technique conceptually unfolds the recurrence to allow the corresponding cyclic pipeline to complete one operation each cycle.
Reference: [8] <author> C. E. Leiserson, F. Rose, and J. B. Saxe. </author> <title> "Optimizing Synchronous Circuitry by Retiming". </title> <booktitle> In Proc. of the 3rd Caltech Conference on VLSI, </booktitle> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: For the system to function correctly, however, T c must be greater than or equal to the longest combinational delay between each pair of registers. Retiming <ref> [8] </ref> can be used to spread the registers optimally along all paths, finding the minimum feasible T c . But for any path p with n pipeline stages, T c fin must be greater than or equal to the delay of the longest path through the n stages.
Reference: [9] <author> S. Malik, E. M. Sentovich, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> "Retiming and Resynthesis: Optimizing Sequential Networks with Combinational Techniques". </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(1) </volume> <pages> 74-84, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: The term negative register was used in peripheral retiming <ref> [9] </ref>, an optimization technique for sequential circuits. Unlike architectural retiming, which actually implements negative registers, peripheral retiming uses negative registers as a bookkeeping technique to keep track of the number of registers borrowed from the environment. <p> Precomputation-based architectural retiming performs sequential logic optimization of latency-constrained paths by exposing adjacent pipeline stages for combinational optimization, which is not performed by current sequential op timization techniques. De Micheli applies local algebraic transformations across latch boundaries [4]. Peripheral re-timing <ref> [9] </ref> moved registers from the interior of a circuit to its environment to allow the whole circuit to be optimized using combinational optimization. Chakardhar et al. took a more timing-driven approach to sequential optimization that results in applying combinational optimization techniques to each stage in the circuit [3].
Reference: [10] <author> K. Parhi and D. Messerschmitt. </author> <title> "Static Rate-Optimal Scheduling Of Iterative Data-Flow Programs Via Optimum Unfolding.". </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(2) </volume> <pages> 178-95, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: The set of sequential transitive fan-in signals across one register boundary, ST 1 f , is defined the same as CT f except that the input path is allowed to cross one register. Unfolding <ref> [10] </ref> is used to refer correctly to ST 1 f for a single-register cycle. 3 Overview of Architectural Retiming Architectural retiming comprises two steps. First, a register is added to the latency-constrained path. Second, the circuit is changed to absorb the increased latency caused by the additional register. <p> Kogge's technique conceptually unfolds the recurrence to allow the corresponding cyclic pipeline to complete one operation each cycle. Unfolding of iterative DSP data-flow graphs is also used in multiprocessor scheduling to expose the graph's hidden concurrency to allow the scheduler to achieve the smallest possible iteration bound <ref> [10] </ref>. Holtmann and Ernst present a scheduling algorithm that applies a speculative technique that is modeled after mul tiple branch prediction in a processor [5].
Reference: [11] <author> E. Sentovich, K. Singh, L. Lavagno, C. Moon, R. Mur-gai, A. Saldanha, H. Savoj, P. Stephan, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> "SIS: A System for Sequential Circuit Synthesis". </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> University of California, Dept. of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The circuit calculates the function: if N t is even, N t+1 = N t =2, else N t+1 = N t fi 2 + 1. The numbers reported are based on applying architectural retiming and performing behavioral optimizations by hand. SIS <ref> [11] </ref> was then used to optimize the resulting circuits. Two optimizing scripts were applied to each circuit: script.delay and the sequence of the command full simplify followed by the two scripts script.rugged and script.delay.
References-found: 11

