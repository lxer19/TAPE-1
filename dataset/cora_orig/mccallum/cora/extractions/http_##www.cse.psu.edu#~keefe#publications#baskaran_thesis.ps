URL: http://www.cse.psu.edu/~keefe/publications/baskaran_thesis.ps
Refering-URL: http://www.cse.psu.edu/~keefe/star-dbs.html
Root-URL: http://www.cse.psu.edu
Title: A SLOT STEALING-BASED MULTILEVEL SECURE DATABASE BUFFER MANAGER  
Degree: A Thesis in Computer Science and Engineering by Ashwin Baskaran c 1996 Ashwin Baskaran Submitted in Partial Fulfillment of the Requirements for the Degree of Master of Science  
Date: December 1996  
Affiliation: The Pennsylvania State University The Graduate School Department of Computer Science and Engineering  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D.E. Bell and L.J. LaPadula. </author> <title> Secure computer systems: Unified exposition and multics interpretations. </title> <type> Technical Report MTR-2997, </type> <institution> Mitre Corp., </institution> <month> March </month> <year> 1976. </year>
Reference-contexts: Discretionary controls allow users to pass permissions on to other users, within the framework of the MAC policy. The buffer management system described in this thesis is based on the MAC model. MLS systems use the Bell-LaPadula reference model <ref> [1] </ref> for data protection, enforcing the following properties: Simple Security Property (ss-property) A subject S is allowed to read an object O only if the level of the subject dominates the level of the object, i.e., level (S) level (O) * Property A subject S is allowed to write lan object
Reference: [2] <author> Joseph Boykin, David Kirschen, Alan Langerman, and Susan LoVerso. </author> <title> Programming Under Mach. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: The kernel's internal pager retains control over paging policy with respect to sharing memory between tasks, selection of physical memory pages to evict, etc. The operations that these user-level pagers perform | virtual memry allocation, deallocation, protection and sharing | are collectively referred to as external memory management operations <ref> [2] </ref>. Pagers operate on two fundamental abstractions | memory objects and pages. A memory object refers to a range of pages (virtual memory pages) whose properties are controlled by a single pager.
Reference: [3] <author> J. Goguen and J. Meseguer. </author> <title> Security policies and security models. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy. IEEE, </booktitle> <year> 1982. </year>
Reference-contexts: At regular predetermined intervals, L tries to acquire a lock on R. If, during the interval, H has acquired and is holding the lock, a '0' can be transmitted to L and if the lock is acquired by L, it can infer a '1'. The principle of non-interference <ref> [3] </ref> imposes the constraint that system outputs visible to dominated subjects should not depend on the presence or actions of dominating subjects. In other words, at any given level in the poset, the nature and amount of 4 activity at other (non-dominating) levels in the poset should be invisible.
Reference: [4] <author> Jim Gray and Andreas Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: to compromise security, the restrictions of the policy, e.g., the simple security and *-properties, can be relaxed to allow the program greater freedom and convenience. 1.2.2 Database Buffer Management The role of a buffer manager in a database system is to make pages of the database addressable in main memory <ref> [4] </ref>. Buffer management techniques are geared towards reducing the amount of disk I/O performed in keeping relevant portions of the database in main memory. A database buffer manager provides mechanisms to share pages of the database in main memory and protect access to these pages using synchronization constructs.
Reference: [5] <institution> Department of Defense Computer Security Center. Department of Defense Trusted Computer System Evaluation Criteria. DoD, </institution> <year> 1985. </year>
Reference-contexts: Multilevel security policies (also known as military security policies) <ref> [5] </ref> treat database systems as comprised of subjects and objects. Subjects are active entities that perform actions. Objects hold the information contained in the database, and are passive entities.
Reference: [6] <author> J. D. Ullman. </author> <title> Principles of Database Systems. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: More about database buffering security 1.2 Background In this section, we present background material related to Multilevel Secure Databases and Database Buffer Management. 1.2.1 Databases and Multilevel Security A database <ref> [6] </ref> is defined as a collection of permanent data, managed by a database management system (DBMS). Multilevel security policies (also known as military security policies) [5] treat database systems as comprised of subjects and objects. Subjects are active entities that perform actions.
Reference: [7] <author> Andrew Warner, Qiang Li, Thomas Keefe, and Shankar Pal. </author> <title> The impact of multilevel security on database buffer management. </title> <booktitle> In Proceedings of the European Symposium on Research in Computer Security. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: If static allocation is used, the absence of slot movement would prevent the system from reacting to changes in workload at different levels in the system. 2.2 The Slot Stealing Model Slot stealing, described in <ref> [7] </ref>, attempts to optimize buffer slot utilization by allowing the bufferpool (and the contents of individual slots in the pool) to be shared among clients at different levels of the security poset. The available physical memory buffer slots are not statically partitioned between levels. <p> Security concerns with this technique include the following: Covers Levels can have more than one covering level. Levels cannot make a decision on which covering level to offer a slot to based on workloads at those levels. Knowledge of workloads at non-dominated levels is disallowed by noninterference requirements. In <ref> [7] </ref>, two possible approaches are suggested to solve this problem. In the first approach, every slot is pre-assigned a dominating path of the security poset. Slots can move up and down this path, and cannot be offered to any level not on this path. <p> steal a slot, any slot from the offer pool can be used, provided there is at least one slot in the pool that has been offered by an LBM whose level is dominated by the level requesting the steal. 28 4.3.5 Slot Stealing The slot stealing model as proposed in <ref> [7] </ref> designed slot offering as occurring between buffer manager partitions at different levels. It proposes that slots be offered from a level to one of its covering levels, and that slots can move up dominating paths in the poset in this way. <p> Problems arise with slot stealing because levels can have multiple covering levels. This complicates the selection of a level to which the slot is to be offered. The authors of <ref> [7] </ref> suggest associating slots with predetermined dominating paths in the poset, or alternately assigning probabilities so that a covering level has some chance of getting a slot, but cannot steal all offered slots.
References-found: 7

