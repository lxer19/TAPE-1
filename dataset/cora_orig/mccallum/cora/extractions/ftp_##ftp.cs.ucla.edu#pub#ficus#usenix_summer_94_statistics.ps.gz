URL: ftp://ftp.cs.ucla.edu/pub/ficus/usenix_summer_94_statistics.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/geoff/pubs.html
Root-URL: http://www.cs.ucla.edu
Title: An Analysis of Trace Data for Predictive File Caching in Mobile Computing  
Author: Geoffrey H. Kuenning, Gerald J. Popek, Peter L. Reiher 
Address: Los Angeles  
Affiliation: University of California,  
Abstract: One way to provide mobile computers with access to the resources of a network, even in the absence of communication, is to predict which information will be used during disconnection and cache the appropriate data while still connected. To determine the feasibility of this approach, traces of file-access activity for three diverse application domains were collected for periods of over two months. Analysis of these traces using traditional and new measures reveals that user working sets tend to be small compared to modern disk sizes, that users tend to reference the same files for several days or even weeks at a time, and that different users do not tend to write to the same file except in highly constrained circumstances. These factors encourage the conclusion that an automated caching system can be built for a wide variety of environments. 
Abstract-found: 1
Intro-found: 1
Reference: [2] <author> Matthew Blaze and Rafael Alonso. </author> <title> Dynamic hi-erarchical caching for large-scale distributed file systems. </title> <booktitle> In Proceedings of the Twelfth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 521-528, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Third, most previous studies have generally been limited to analysis of working-set sizes and file-system performance data <ref> [1, 2, 6, 11, 14] </ref>. The latter is not relevant to this research, and the former, while very important, is not in itself sufficient to characterize the user behaviors critical to successful mobile caching.
Reference: [3] <author> Richard G. Guy. Ficus: </author> <title> A Very Large Scale Reliable Distributed File System. </title> <type> Ph.D. dissertation, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> June </month> <year> 1991. </year> <note> Also available as UCLA technical report CSD-910018. </note>
Reference-contexts: In a mobile environment, a conflicted file might be replicated on two or more computers, and the system would be required to automatically resolve these conflicts after the fact in a manner similar to the Ficus distributed file system <ref> [3, 4, 7, 13] </ref>, to force the user to resolve them by hand [6], or to limit writing to only one user. We examined conflicting writes within a 24-hour period (corresponding to taking a machine home overnight) and a 7-day period (corresponding to traveling with a machine).
Reference: [4] <author> Richard G. Guy, John S. Heidemann, Wai Mak, Thomas W. Page, Jr., Gerald J. Popek, and Dieter Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: In a mobile environment, a conflicted file might be replicated on two or more computers, and the system would be required to automatically resolve these conflicts after the fact in a manner similar to the Ficus distributed file system <ref> [3, 4, 7, 13] </ref>, to force the user to resolve them by hand [6], or to limit writing to only one user. We examined conflicting writes within a 24-hour period (corresponding to taking a machine home overnight) and a 7-day period (corresponding to traveling with a machine).
Reference: [5] <author> L. B. Huston and Peter Honeyman. </author> <title> Disconnected operation for AFS. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 1-10. </pages> <publisher> USENIX, </publisher> <year> 1993. </year>
Reference-contexts: Provide enough alternate working sets that the user can shift to a secondary or tertiary task [6, 14]. 2. Provide a foreground or background method that initiates communication (most likely expensive and slow) to retrieve the missing file <ref> [5] </ref>. We plan to provide both of these options in our prototype, though we hope to rely primarily on the first. 6 Conclusions The data gathered and analysis performed in this study strongly indicate that predictive file caching for mobile computing is a feasible approach.
Reference: [6] <author> James Jay Kistler. </author> <title> Disconnected Operation in a Distributed File System. </title> <type> Ph.D. dissertation, </type> <institution> Carnegie-Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The identities of many of these are surprising even to expert systems programmers <ref> [6] </ref>. would be very valuable. Such a mechanism is only practical, however, if information that can be gathered automatically fully captures the typical user's working set of files. <p> Such a mechanism is only practical, however, if information that can be gathered automatically fully captures the typical user's working set of files. A prototype system of this sort was developed under CMU's Coda system <ref> [6, 14] </ref> and proved successful, but was inconvenient for the user and was tested only in one application environment. <p> Third, most previous studies have generally been limited to analysis of working-set sizes and file-system performance data <ref> [1, 2, 6, 11, 14] </ref>. The latter is not relevant to this research, and the former, while very important, is not in itself sufficient to characterize the user behaviors critical to successful mobile caching. <p> mobile environment, a conflicted file might be replicated on two or more computers, and the system would be required to automatically resolve these conflicts after the fact in a manner similar to the Ficus distributed file system [3, 4, 7, 13], to force the user to resolve them by hand <ref> [6] </ref>, or to limit writing to only one user. We examined conflicting writes within a 24-hour period (corresponding to taking a machine home overnight) and a 7-day period (corresponding to traveling with a machine). An attention shift occurs when a single user radically changes his or her working set. <p> There are only two real options for dealing with this case: 1. Provide enough alternate working sets that the user can shift to a secondary or tertiary task <ref> [6, 14] </ref>. 2. Provide a foreground or background method that initiates communication (most likely expensive and slow) to retrieve the missing file [5].
Reference: [7] <author> Puneet Kumar and Mahadev Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 66-70, </pages> <address> Napa, California, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: In a mobile environment, a conflicted file might be replicated on two or more computers, and the system would be required to automatically resolve these conflicts after the fact in a manner similar to the Ficus distributed file system <ref> [3, 4, 7, 13] </ref>, to force the user to resolve them by hand [6], or to limit writing to only one user. We examined conflicting writes within a 24-hour period (corresponding to taking a machine home overnight) and a 7-day period (corresponding to traveling with a machine).
Reference: [8] <institution> Locus Computing Corporation, Inglewood, Cali-fornia. </institution> <note> PC/Interface Reference Manual, </note> <month> February </month> <year> 1993. </year>
Reference-contexts: Analysis of the data we have collected shows that these characteristics are present in a number of different application domains. 2 Methodology We collected our traces at Locus Computing Corporation, a software development and consulting firm, during the summer of 1993. One of Locus' products, PC/Interface (PCI) <ref> [8] </ref>, is a DOS-to-UNIX file system implemented as a pseudo-disk driver on a DOS machine which communicates via Ethernet to a file server on the UNIX system, making the UNIX file system available to the DOS users as native PC files.
Reference: [9] <author> Shikharesh Majumdar and Richard B. Bunt. </author> <title> Measurement and analysis of locality phases in file referencing behavior. </title> <booktitle> In Proceedings of Performance 86 and ACM Sigmetrics 86, Joint Conference on Computer Performance Modelling, Measurement and Evaluation, </booktitle> <pages> pages 180-192, </pages> <address> Raleigh, NC, </address> <month> May </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: Because of these two assumptions, the attention-shift ages reported in this paper are only a lower bound on the true ages that would be encountered by a predictive caching system. The bounded locality intervals discussed in <ref> [9] </ref> are similar to attention shifts, but are parameterized on working-set sizes rather than on the expected length of a disconnection. The statistics we report are: Working-set statistics. For each day and week, we calculated the working set size in files, MB, and number of accesses.
Reference: [10] <author> Udi Manber and Sun Wu. GLIMPSE: </author> <title> A tool to search through entire file systems. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 23-32, </pages> <address> San Fran-cisco, CA, </address> <month> January </month> <year> 1994. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: points for weekly maxima are always larger than the daily values. average user, 6 although some software or user behavior may have to change. (For example, instead of relying on a large grep, a user might use an inverted index to locate the files containing references to a particular string <ref> [10] </ref>.) 4.2 Attention Shifts Tables 2 and 3 summarize the attention shifts observed. Figures 6-8 show the sensitivity of attention-shift rates to the parameter p. Except in the commercial environment, the number of attention shifts steadily decreases with increasing p, but the exact shape of the curve is quite inconsistent.
Reference: [11] <author> John K. Ousterhout, Herv e Da Costa, David Har-rison, John A. Kunze, Mike Kupfer, and James G. Thompson. </author> <title> A trace-driven analysis of the UNIX 4.2 BSD file system. </title> <type> Technical Report UCB/CSD 85/230, UCB, </type> <year> 1985. </year>
Reference-contexts: Third, most previous studies have generally been limited to analysis of working-set sizes and file-system performance data <ref> [1, 2, 6, 11, 14] </ref>. The latter is not relevant to this research, and the former, while very important, is not in itself sufficient to characterize the user behaviors critical to successful mobile caching.
Reference: [12] <author> Gerald J. Popek and Bruce J. Walker. </author> <title> The Locus Distributed System Architecture. </title> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: This server was traced for 1563 hours (65.1 days, or 9.3 weeks), 2 recording 4,637,924 accesses. In the second environment, referred to as programming, the server was a cluster of 10 machines running IBM's Transparent Computing Facility, an adaption of the Locus distributed operating system <ref> [12] </ref>, which provides a single-system image to users of multiple 2 50 days into this trace, there was a data gap of approximately 48 hours due to an administrative error. It does not appear that this gap affects the validity of the analysis. machines.
Reference: [13] <author> Peter Reiher, John S. Heidemann, David Ratner, Gregory Skinner, and Gerald J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Conference Proceedings. USENIX, </booktitle> <month> June </month> <year> 1994. </year> <note> To be published. </note>
Reference-contexts: In a mobile environment, a conflicted file might be replicated on two or more computers, and the system would be required to automatically resolve these conflicts after the fact in a manner similar to the Ficus distributed file system <ref> [3, 4, 7, 13] </ref>, to force the user to resolve them by hand [6], or to limit writing to only one user. We examined conflicting writes within a 24-hour period (corresponding to taking a machine home overnight) and a 7-day period (corresponding to traveling with a machine). <p> In a mobile environment, an automated resolver similar to those discussed in <ref> [13] </ref> would be required to handle these numerous conflicts. Since accounting applications typically involve appending records to a transaction database, we expect that such a resolver would be easy to write.
Reference: [14] <author> Mahadev Satyanarayanan, James J. Kistler, Lily B. Mummert, Maria R. Ebling, Puneet Ku-mar, and Qi Lu. </author> <title> Experience with disconnected operation in a mobile computing environment. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: Such a mechanism is only practical, however, if information that can be gathered automatically fully captures the typical user's working set of files. A prototype system of this sort was developed under CMU's Coda system <ref> [6, 14] </ref> and proved successful, but was inconvenient for the user and was tested only in one application environment. <p> Third, most previous studies have generally been limited to analysis of working-set sizes and file-system performance data <ref> [1, 2, 6, 11, 14] </ref>. The latter is not relevant to this research, and the former, while very important, is not in itself sufficient to characterize the user behaviors critical to successful mobile caching. <p> There are only two real options for dealing with this case: 1. Provide enough alternate working sets that the user can shift to a secondary or tertiary task <ref> [6, 14] </ref>. 2. Provide a foreground or background method that initiates communication (most likely expensive and slow) to retrieve the missing file [5].

References-found: 13

