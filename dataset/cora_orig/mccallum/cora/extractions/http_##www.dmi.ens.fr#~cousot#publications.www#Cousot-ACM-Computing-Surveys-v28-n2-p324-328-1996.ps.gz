URL: http://www.dmi.ens.fr/~cousot/publications.www/Cousot-ACM-Computing-Surveys-v28-n2-p324-328-1996.ps.gz
Refering-URL: http://www2.cs.cornell.edu/CS71X-s97/cs719bib.htm
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Abstract Interpretation empirical approach to abstract interpretation consists in a priori choosing a problem-specific abstract
Author: patrick cousot p L (S[[p]]; S [[p]]): fS j (S; S [[p]])g; D S Coll [[p]] 
Keyword: program (concrete) properties. Define  def  
Note: PRINCIPLES OF ABSTRACT INTERPRETATION An  ACM Computing Surveys, Vol. 28, No.  S[[p]] 2  which may be sufficient to prove program  S Coll 2 L 7! D Coll to be the  
Address: Paris  def  
Affiliation: DMI, Ecole Normale Superieure,  Coll  def  
Email: hcousot@dmi.ens.fri hhttp://www.ens.fr/~cousoti  
Date: 2, June 1996  
Abstract: interpretation [Cousot and Cousot 1977, 1979] is a general theory for approximating the semantics of discrete dynamic systems, e.g. computations of programs. In particular program analysis algorithms can be constructively derived from these abstract semantics. A semantics S of a programming language L associates a semantic value S[[p]] 2 D in the semantic domain D to each program p of L. The semantic domain D can be transition systems (for small-step operational semantics), pom-sets, traces, relations (for big-step operational semantics), higher-order functions (for denotational semantics), and so on. D is usually defined compositionally by induction on the structure of run-time objects (computations, data, etc.). S is defined compositionally by induction on the syntactical structure of programs, using e.g. fixpoint definitions to handle iteration, recursion, and the like. Permission to make digital/hard copy of part or all of this work for personnal or classroom use is granted without fee provided that the copies are not mage or distributed for profit or commercial advantage, the copyright notice, the title of the publicatio, and its date appear, and notice is given that copying is by permission of the ACM, Inc. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or fee. If the abstract semantics is computable (D ] is usually assumed to be finite), we can infer that the abstract interpretation is sound in the sense that: (This is a conceptual step, since no other detailed specification of S Coll is needed, but for the design of formal proof methods). S Coll [[p]] is the strongest program property. We have seen that an abstract property P , such as fS j (S; S ] [[p]])g above, is weaker in that S Coll [[p]] P . We call the approximation ordering. Now the abstraction function is a map ff 2 D Coll 7! D Coll . We call ff[D] c fl ACM 0360-0300/96/0600-0324 $03.50
Abstract-found: 1
Intro-found: 0
Reference: <author> Cousot, P. </author> <year> 1981. </year> <title> Semantic foundations of program analysis. In Program Flow Analysis: Theory and Applications. </title> <editor> S.S. Much-nick and N. Jones Eds., </editor> <publisher> Prentice-Hall, </publisher> <address> En-glewood Cliffs, NJ, Ch. </address> <month> 10, </month> <pages> 303-342. </pages>
Reference: <author> Cousot, P. and Cousot, R. </author> <year> 1994. </year> <title> Higher-order abstract interpretation (and application to comportment analysis generalizing strictness, termination, projection and PER analysis of functional languages), invited paper. </title> <booktitle> In Proceedings of 1994 ICCL, </booktitle> <address> Toulouse, France (May 16-19), </address> <publisher> IEEE, Los Alamitos, CA, </publisher> <pages> 95-112. </pages>
Reference: <author> Cousot, P. and Cousot, R. </author> <year> 1992. </year> <title> Abstract interpretation frameworks. </title> <journal> J. of Logic and Comput. </journal> <volume> 2, 4 (Aug.), </volume> <pages> 511-547. </pages>
Reference: <author> Cousot, P. and Cousot, R. </author> <year> 1979. </year> <title> Systematic design of program analysis frameworks. </title> <booktitle> In Proceedings of the 6th POPL (San Anto-nio, </booktitle> <address> TX), </address> <publisher> ACM Press, </publisher> <address> New York, </address> <month> 269-282. </month> <journal> ACM Computing Surveys, </journal> <volume> Vol. 28, No. </volume> <pages> 2, </pages> <note> June 1996 328 * P. </note> <author> Cousot Cousot, P. and Cousot, R. </author> <year> 1977. </year> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proceedings of the 4th POPL (Los Angeles, </booktitle> <address> CA), </address> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 238-252. </pages>
Reference: <author> Debray, S. K. </author> <year> 1994. </year> <title> Formal bases for dataflow analysis of logic programs. </title> <booktitle> In Advances in Logic Programming Theory, International Schools for Computer Scientists, </booktitle> <editor> G. Levi, Ed., </editor> <publisher> Clarendon Press, </publisher> <address> New York, </address> <publisher> Sect. </publisher> <pages> 3, 115-182. </pages>
Reference: <author> Deutsch, A. </author> <year> 1995. </year> <title> Semantic models and abstract interpretation techniques for inductive data structures and pointers. Invited paper. </title> <booktitle> In Proceedings of PEPM '95 (La Jolla, </booktitle> <address> CA, June 21-23), </address> <publisher> ACM Press, </publisher> <address> New York, </address> <pages> 226-229. </pages>
Reference: <author> Jones, N. and Nielson, F. </author> <year> 1995. </year> <title> Abstract interpretation: a semantic-based tool for program analysis. In Semantic mod-elling, </title> <editor> S. Abramsky, D.M. Gabbay, and T.S.E. Maibaum, Eds., </editor> <booktitle> number 4 in Handbook of Logic in Computer Science. </booktitle> <publisher> Claren-don Press, </publisher> <address> New York. </address> <booktitle> ACM Computing Surveys, </booktitle> <volume> Vol. 28, No. 2, </volume> <month> June </month> <year> 1996 </year>
References-found: 7

