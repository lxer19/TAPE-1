URL: http://www.almaden.ibm.com/cs/quest/papers/range_max.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fho,ragrawal,megiddog@almaden.ibm.com  
Title: Techniques for Speeding up Range-Max Queries in OLAP Data Cubes  
Author: Ching-Tien Ho Rakesh Agrawal Nimrod Megiddo Jyh-Jong Tsay 
Address: 650 Harry Road, San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Abstract: A range-max query obtains the maximum over all selected cells of a data cube where the selection is specified by providing ranges of values for numeric dimensions. Our general approach to speeding up range-max queries is to precompute and store certain key information of the data cube. In [HAMS97], we gave a tree algorithm based on precomputed max over balanced hierarchical tree structures; a branch-and-bound-[Mit70]like procedure was used to prune unnecessary search. In this paper, we propose three orthogonal techniques with the objective of improving the average response time of the range-max queries. First, rather than keeping only the index of the largest value at each internal node of the tree, we keep the indices of the t largest values with each internal node and use them to decrease the probability of scanning lower level nodes. Second, we further partition each sibling set of internal nodes into smaller groups and sort the precomputed indices within each group according to their indexed values. This speeds up the scanning of internal nodes at the same level and covered by the query region without increasing extra storage overhead. Third, we augment the tree with a precomputed reference array for each level of the tree (except for the leaf level). Elements of a reference array contain references to the next larger value, which are used to speed up the search. We compare our three algorithms with the previous algorithm both analytically and empirically. Based on these comparisons, we then propose and implement a hybrid algorithm, combining the advantages of these orthogonal techniques, that improves the empirically measured range-max query time by as much as 100%. We also give algorithms for incrementally updating the precomputed structures. 
Abstract-found: 1
Intro-found: 1
Reference: [AAD + 96] <author> S. Agarwal, R. Agrawal, P.M. Deshpande, A. Gupta, J.F. Naughton, R. Ramakrishnan, and S. Sarawagi. </author> <title> On the computation of multidimensional aggregates. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <pages> pages 506-521, </pages> <address> Mumbai (Bombay), India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: This observation continues to hold for the techniques proposed in this paper. More generally, there has been considerable research in database community related to OLAP data cubes. This includes work on modeling [GBLP96] [AGS97] and developing algorithms for computing the data cube <ref> [AAD + 96] </ref>, for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96].
Reference: [AGS97] <author> Rakesh Agrawal, Ashish Gupta, and Sunita Sarawagi. </author> <title> Modeling multidimensional databases. </title> <booktitle> In Proc. of the 13th Int'l Conference on Data Engineering, </booktitle> <address> Birmingham, U.K., </address> <month> April </month> <year> 1997. </year>
Reference-contexts: This observation continues to hold for the techniques proposed in this paper. More generally, there has been considerable research in database community related to OLAP data cubes. This includes work on modeling [GBLP96] <ref> [AGS97] </ref> and developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96].
Reference: [Ben80] <author> J.L. Bentley. </author> <title> Multidimensional divide and conquer. </title> <journal> Comm. ACM, </journal> <volume> 23(4) </volume> <pages> 214-229, </pages> <year> 1980. </year>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., [BF79] <ref> [Ben80] </ref> [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points. Second, the index domain of each dimension is assumed to be unbounded.
Reference: [BF79] <author> J. L. Bentley and J. H. Friedman. </author> <title> Data structures for range searching. </title> <journal> Computing Surveys, </journal> <volume> 11(4), </volume> <year> 1979. </year>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., <ref> [BF79] </ref> [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] [Yao85]). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points.
Reference: [Cha90] <author> Bernard Chazelle. </author> <title> Lower bounds for orthogonal range searching: Ii. the arithmetic model. </title> <journal> J. ACM, </journal> <volume> 37(3) </volume> <pages> 439-463, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] <ref> [Cha90] </ref> [Meh84] [Vai85] [WL85] [Yao85]). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points. Second, the index domain of each dimension is assumed to be unbounded.
Reference: [CM89] <author> M.C. Chen and L.P. McNamee. </author> <title> The data model and access method of summary data management. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(4) </volume> <pages> 519-29, </pages> <year> 1989. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases <ref> [CM89] </ref> on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. Organization of the paper The remainder of the paper is organized as follows.
Reference: [Col96] <author> George Colliat. </author> <title> OLAP, relational, and multidimensional database systems. </title> <booktitle> SIGMOD RECORD, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: There are also pragmatic differences for typical "data cubes" arising out of the computational geometry domain versus the OLAP domain. A canonical sparsity of the OLAP data cube is about 20% <ref> [Col96] </ref> and dense sub-clusters typically exist, while the computational geometry data cubes can be much sparser even after placing upper bounds on each index domain. Besides range-max, techniques for computing range-sum were also proposed in [HAMS97].
Reference: [CR89] <author> Bernard Chazelle and Burton Rosenberg. </author> <title> Computing partial sums in multidimensional arrays. </title> <booktitle> In Proc. of the ACM Symp. on Computational Geometry, </booktitle> <pages> pages 131-139, </pages> <year> 1989. </year> <month> 26 </month>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] <ref> [CR89] </ref> [Cha90] [Meh84] [Vai85] [WL85] [Yao85]). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points. Second, the index domain of each dimension is assumed to be unbounded.
Reference: [CS94] <author> S. Chaudhuri and K. Shim. </author> <title> Including group-by in query optimization. </title> <booktitle> In Proc. of the 20th Int'l Conference on Very Large Databases, </booktitle> <pages> pages 354-366, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries <ref> [CS94] </ref> [GHQ95] [YL95]. Organization of the paper The remainder of the paper is organized as follows. In Section 2, we formally define the range-max problem, review the basic tree algorithm as presented in [HAMS97], and present a more detailed analysis of the basic tree algorithm.
Reference: [GBLP96] <author> J. Gray, A. Bosworth, A. Layman, and H. Pirahesh. </author> <title> Data cube: A relational aggregation operator generalizing group-by, </title> <booktitle> cross-tabs and sub-totals. In Proc. of the 12th Int'l Conference on Data Engineering, </booktitle> <pages> pages 152-159, </pages> <year> 1996. </year>
Reference-contexts: This observation continues to hold for the techniques proposed in this paper. More generally, there has been considerable research in database community related to OLAP data cubes. This includes work on modeling <ref> [GBLP96] </ref> [AGS97] and developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96].
Reference: [GHQ95] <author> A. Gupta, V. Harinarayan, and D. Quass. </author> <title> Aggregate-query processing in data warehousing environments. </title> <booktitle> In Proceedings of the Eighth International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 358-369, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] <ref> [GHQ95] </ref> [YL95]. Organization of the paper The remainder of the paper is organized as follows. In Section 2, we formally define the range-max problem, review the basic tree algorithm as presented in [HAMS97], and present a more detailed analysis of the basic tree algorithm.
Reference: [GHRU97] <author> Himanshu Gupta, Venky Harinarayan, Anand Rajaraman, and Jeffrey D. Ullman. </author> <title> Index selection for OLAP. </title> <booktitle> In Proc. of the 13th Int'l Conference on Data Engineering, </booktitle> <address> Birmingham, U.K., </address> <month> April </month> <year> 1997. </year>
Reference-contexts: More generally, there has been considerable research in database community related to OLAP data cubes. This includes work on modeling [GBLP96] [AGS97] and developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] <ref> [GHRU97] </ref>, for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. <p> The basic idea is to decompose the data cube into dense and non-dense regions and apply the proposed algorithms to the dense clusters. Another related issue is that of selecting the subsets of dimensions for which the precomputed information is stored. A similar problem was considered in [HRU96] <ref> [GHRU97] </ref>. The decision procedure proposed in [HAMS97] can be directly used for this purpose. 2 Background 2.1 The Model We are interested in finding Max value and its location in a d-dimensional rectangular region of a d-dimensional array A of order n 1 fi fi n d .
Reference: [HAMS97] <author> Ching-Tien Ho, Rakesh Agrawal, Nimrod Megiddo, and Ramakrishnan Srikant. </author> <title> Range queries in OLAP data cubes. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: A class of queries over OLAP data cubes, called range queries, was studied in <ref> [HAMS97] </ref>. These queries compute aggregation of values from selected cells of a data cube, where the selection is specified by constraining the contiguous range of interest in the domains of some of the functional attributes. <p> In an interactive exploration of data cube, which is the predominant OLAP application area, it is imperative to have a system with fast response time. In <ref> [HAMS97] </ref>, a tree-based algorithm was used to compute range-max queries. This algorithm is based on precomputed max over balanced hierarchical tree structures. A branch-and-bound [Mit70]- like procedure is also used to speed up the search. <p> A canonical sparsity of the OLAP data cube is about 20% [Col96] and dense sub-clusters typically exist, while the computational geometry data cubes can be much sparser even after placing upper bounds on each index domain. Besides range-max, techniques for computing range-sum were also proposed in <ref> [HAMS97] </ref>. These techniques exploit the following special property of the sum operator for their efficiency: for the binary sum operation , there exists an inverse binary minus operation such that abb = a, for any a and b in the domain. <p> Since there is no inverse operation for max that satisfies this property, the algorithms for range-sum in <ref> [HAMS97] </ref> do not apply to the range-max problem. It is possible to adopt the tree structure used for range-max also for range-sum queries, as a range-sum query may be answered by traversing the tree and adding or subtracting the values at various tree nodes that collectively define the query region. <p> However, unlike range-max, the branch-and-bound optimization cannot be applied to range-sum queries and it was shown in <ref> [HAMS97] </ref> that the specialized techniques based on prefix-sums perform better for range-sum queries. This observation continues to hold for the techniques proposed in this paper. More generally, there has been considerable research in database community related to OLAP data cubes. <p> Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. Organization of the paper The remainder of the paper is organized as follows. In Section 2, we formally define the range-max problem, review the basic tree algorithm as presented in <ref> [HAMS97] </ref>, and present a more detailed analysis of the basic tree algorithm. Our analysis shows that the number of leaf nodes accessed decreases exponentially when the range size increases and gives a new performance bound for small range sizes. <p> Finally, Section 9 concludes the paper. Proofs of the theorems are given in Appendix. We only consider dense data cubes in this paper. The sparse data cubes can be handled using an approach similar to one presented in <ref> [HAMS97] </ref>. The basic idea is to decompose the data cube into dense and non-dense regions and apply the proposed algorithms to the dense clusters. Another related issue is that of selecting the subsets of dimensions for which the precomputed information is stored. A similar problem was considered in [HRU96] [GHRU97]. <p> Another related issue is that of selecting the subsets of dimensions for which the precomputed information is stored. A similar problem was considered in [HRU96] [GHRU97]. The decision procedure proposed in <ref> [HAMS97] </ref> can be directly used for this purpose. 2 Background 2.1 The Model We are interested in finding Max value and its location in a d-dimensional rectangular region of a d-dimensional array A of order n 1 fi fi n d . <p> We will use N to denote the domain (index space) of A, i.e., N = (0 : n 1 1; : : :; 0 : n d 1). We denote by D = f1; 2; : : :; dg the set of dimensions. The range-max query problem <ref> [HAMS97] </ref> can be formulated as getting the M ax index of a region of A defined as follows: M ax index (` 1 : h 1 ; : : :; ` d : h d ) = (x 1 ; : : :; x d ) where (8i 2 D)(` i <p> of tree nodes touched (or the number of indices accessed when there is more than one index or value stored at each tree node) as a measure for the analytical time complexity. 2.2 The Basic Tree Algorithm We now review the basic tree algorithm for range-max queries as proposed in <ref> [HAMS97] </ref>. The data structure for storing the precomputed information can be viewed as a generalized quad-tree [Sam89]. Each non-leaf node x "covers" a d-dimensional region (a hyper-cube), denoted C (x), containing all the leaf nodes of the subtree rooted at x. <p> The algorithm uses a branch-and-bound [Mit70]-like procedure to speed up the finding of max in a query region using this data structure. For clarity, we only review the one-dimensional case. The construction of the tree and the search algorithm for the d-dimensional case are similar. See <ref> [HAMS97] </ref> for details. 2.2.1 Constructing the Tree The leaves of a tree are called level-0 nodes. A node is said to be at level i + 1 if the maximum level of its children is i. <p> This can be done simply by index calculation without searching the tree because b is fixed. (See <ref> [HAMS97] </ref>.) We treat this as one step in our complexity analysis later. If the precomputed index of the maximum value in C (x) lies in Q, we are done. <p> Complexity The worst-case time complexity of the basic tree search algorithm was shown in <ref> [HAMS97] </ref> to be O (b log b r) for a range of size r, as opposed to O (b log b n). There is one caveat here. <p> Note that the average-case complexity here (and later for subsequent algorithms) refers to the average over random data distribution (i.e., equal probability out of n! permutation of ranks), but maximum over all possible range sizes and locations. 2.3 Further Analysis The analysis in <ref> [HAMS97] </ref> gives an average-case upper bound for the total number of elements accessed in both internal and leaf nodes. Notice that accessing elements in internal nodes is in general more expensive than accessing elements in leaf nodes, since the internal nodes keep only indices to elements. <p> For clarity, we assume all update points have different indices (locations) and all indices of update points are in the index domain of A. Both restrictions can be alleviated with minor modifications to the algorithms. The batch-update algorithm for the basic tree algorithm was given in <ref> [HAMS97] </ref> in a bottom-up manner. The batch-update algorithm for the fat-nodes algorithm can be easily modified from that of the basic tree algorithm. We omit the details here. <p> extend the hybrid algorithm into a d-dimensional structure by adding the reference array structure, one-dimensional or d-dimensional, among all leaders of the groups in the same sibling set. 9 Summary In this paper, we propose three different techniques for improving the overall response time of the previous basic tree algorithm <ref> [HAMS97] </ref>. First, the fat-nodes algorithm keeps the indices of the t largest values with each internal node and uses them to reduce the probability of scanning 25 lower-level nodes.
Reference: [HRU96] <author> V. Harinarayan, A. Rajaraman, and J.D. Ullman. </author> <title> Implementing data cubes efficiently. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: More generally, there has been considerable research in database community related to OLAP data cubes. This includes work on modeling [GBLP96] [AGS97] and developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute <ref> [HRU96] </ref> [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. <p> The basic idea is to decompose the data cube into dense and non-dense regions and apply the proposed algorithms to the dense clusters. Another related issue is that of selecting the subsets of dimensions for which the precomputed information is stored. A similar problem was considered in <ref> [HRU96] </ref> [GHRU97]. The decision procedure proposed in [HAMS97] can be directly used for this purpose. 2 Background 2.1 The Model We are interested in finding Max value and its location in a d-dimensional rectangular region of a d-dimensional array A of order n 1 fi fi n d .
Reference: [JS96] <author> T. Johnson and D. Shasha. </author> <title> Hierarchically split cube forests for decision support: </title> <booktitle> description and tuned design, </booktitle> <year> 1996. </year> <note> Working Paper. </note>
Reference-contexts: This includes work on modeling [GBLP96] [AGS97] and developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] <ref> [JS96] </ref>. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [Lom95] <author> D. Lomet, </author> <title> editor. Special Issue on Materialized Views and Data Warehousing. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 18(2), </volume> <month> June </month> <year> 1995. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views <ref> [Lom95] </ref> and processing of aggregation queries [CS94] [GHQ95] [YL95]. Organization of the paper The remainder of the paper is organized as follows.
Reference: [Meh84] <author> Kurt Mehlhorn. </author> <title> Data Structure and Algorithm 3: Multi-dimensional Searching and Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] <ref> [Meh84] </ref> [Vai85] [WL85] [Yao85]). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points. Second, the index domain of each dimension is assumed to be unbounded.
Reference: [Mic92] <author> Z. Michalewicz. </author> <title> Statistical and Scientific Databases. </title> <publisher> Ellis Horwood, </publisher> <year> 1992. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them <ref> [Mic92] </ref>. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. Organization of the paper The remainder of the paper is organized as follows.
Reference: [Mit70] <author> L. Mitten. </author> <title> Branch and bound methods: General formulation and properties. </title> <journal> Operations Research, </journal> <volume> 18 </volume> <pages> 24-34, </pages> <year> 1970. </year>
Reference-contexts: In [HAMS97], a tree-based algorithm was used to compute range-max queries. This algorithm is based on precomputed max over balanced hierarchical tree structures. A branch-and-bound <ref> [Mit70] </ref>- like procedure is also used to speed up the search. Contributions In this paper, we propose three orthogonal techniques for improving the overall response time of the basic tree algorithm for range-max queries. <p> Thus, in lines (4) to (6), the M ax index of all regions C (z) is found for all z 2 B out (x; Q) by recursively calling the same function. The condition at line (5) improves running time using a branch-and-bound <ref> [Mit70] </ref> idea.
Reference: [OLA96] <author> The OLAP Council. </author> <title> MD-API the OLAP Application Program Interface Version 0.5 Specification, </title> <month> September </month> <year> 1996. </year>
Reference-contexts: 1 Introduction An OLAP data cube <ref> [OLA96] </ref> can be viewed as a d-dimensional matrix. The dimensions of the ma trix correspond to functional attributes and the cells contain the values of the measure attributes for the corresponding combination of functional attributes.
Reference: [Sam89] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year> <month> 27 </month>
Reference-contexts: The data structure for storing the precomputed information can be viewed as a generalized quad-tree <ref> [Sam89] </ref>. Each non-leaf node x "covers" a d-dimensional region (a hyper-cube), denoted C (x), containing all the leaf nodes of the subtree rooted at x. For example, in Figure 1 the region covered by x 2 is C (x 2 ) = (0 : 8).
Reference: [SDNR96] <author> A. Shukla, P.M. Deshpande, J.F. Naughton, and K. Ramasamy. </author> <title> Storage estimation for multidimensional aggregates in the presence of hierarchies. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <pages> pages 522-531, </pages> <address> Mumbai (Bombay), India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: This includes work on modeling [GBLP96] [AGS97] and developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates <ref> [SDNR96] </ref>, and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [SR96] <author> B. Salzberg and A. Reuter. </author> <title> Indexing for aggregation, </title> <note> 1996. Working Paper. </note>
Reference-contexts: This includes work on modeling [GBLP96] [AGS97] and developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries <ref> [SR96] </ref> [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [STL89] <author> J. Srivastava, J.S.E. Tan, and V.Y. Lum. TBSAM: </author> <title> An access method for efficient processing of statistical queries. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(4), </volume> <year> 1989. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates <ref> [STL89] </ref> and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. Organization of the paper The remainder of the paper is organized as follows.
Reference: [Vai85] <author> P.M. Vaidya. </author> <title> Space-time tradeoffs for orthogonal range queries. </title> <booktitle> In Proc. 17th Annual ACM Symp. on Theory of Comput., </booktitle> <pages> pages 169-174, </pages> <year> 1985. </year>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] <ref> [Vai85] </ref> [WL85] [Yao85]). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points. Second, the index domain of each dimension is assumed to be unbounded.
Reference: [WL85] <author> D.E. Willard and G.S. Lueker. </author> <title> Adding range restriction capability to dynamic data structures. </title> <journal> J. ACM, </journal> <volume> 32(3) </volume> <pages> 597-617, </pages> <year> 1985. </year>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] <ref> [WL85] </ref> [Yao85]). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points. Second, the index domain of each dimension is assumed to be unbounded.
Reference: [Yao85] <author> Andrew Yao. </author> <title> On the complexity of maintaining partial sums. </title> <journal> SIAM J. Computing, </journal> <volume> 14(2) </volume> <pages> 277-288, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Finally, we give algorithms for incrementally updating the precomputed structures. 2 Related work There is extensive literature in the field of computational geometry on algorithms for handling various types of range queries (see, e.g., [BF79] [Ben80] [CR89] [Cha90] [Meh84] [Vai85] [WL85] <ref> [Yao85] </ref>). Most of the results share the following properties: First, the space overhead is mostly non-linear in m (e.g. O (m log d1 m)), where m is the number of data points. Second, the index domain of each dimension is assumed to be unbounded.
Reference: [YL95] <author> W. P. Yan and P. Larson. </author> <title> Eager aggregation and lazy aggregation. </title> <booktitle> In Proceedings of the Eighth International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 345-357, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year> <month> 28 </month>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] <ref> [YL95] </ref>. Organization of the paper The remainder of the paper is organized as follows. In Section 2, we formally define the range-max problem, review the basic tree algorithm as presented in [HAMS97], and present a more detailed analysis of the basic tree algorithm.
References-found: 28

