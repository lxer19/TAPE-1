URL: http://www.cs.iastate.edu/~honavar/Papers/asis.ps
Refering-URL: http://www.cs.iastate.edu/~honavar/publist.html
Root-URL: 
Title: Warehousing Structured and Unstructured Data for Data Mining  
Author: L.L. Miller and Vasant Honavar Tom Barta 
Address: Ames, IA 50011 Ames, IA 50011  
Affiliation: Department of Computer Science Dept. of Industrial Engineering Iowa State University Iowa State University  
Abstract: More data, especially unstructured data, is available to users than ever. There is so much data available that it is difficult for users to make use of their data in its raw form. To handle the diversity of data types, we have designed and prototyped a multidatabase/warehouse system. The system has been especially designed to facilitate the interaction of structured and unstructured data. The system makes use of object oriented views. The main features of the view mechanism, especially as they relate to textual documents, are presented in the paper. The system is designed to take target documents either from large repositories or from the Web. Issues for both sources of documents are examined in the paper. The paper also looks at how the view approach allows the interaction between the data taken from structured (e.g., relational), semistructured (e.g., object oriented) and unstructured (e.g. text) data sources. The warehouse support provided by the system is briefly examined and the paper concludes by looking at our approach to data mining and how the system will operate in the complete environment. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abiteboul, S., and A. </author> <title> Bonner (1991). Objects and views. </title> <booktitle> ACM SIGMOD, </booktitle> <pages> 238-247. </pages>
Reference-contexts: Numerous approaches have also emerged to encapsulate information and software systems by views. For example, abstraction and view mapping capabilities are proposed in (Heiler and Zdonik, 1990) to support federation of heterogeneous software and databases. A sophisticated view mechanism is introduced in <ref> (Abiteboul and Bonner, 1991) </ref> to help restructure data or integrate databases. Object-oriented views are used to integrate heterogeneous information systems in (Czejdo and Taylor, 1992; Kaul et al., 1990). AN EXTENSIBLE VIEW SYSTEM We propose a view mechanism for integration of data from heterogeneous structured and unstructured data sources. <p> In this section we look at some of the issues that are particular to warehouses. The warehouse in our approach consists of a set of classes where each class is a materialized object view. The resulting object classes are either virtual or imaginary classes using the terminology in <ref> (Abiteboul and Bonner, 1991) </ref>. The views used to generate the materialized view can be at any level, i.e. local interfaces, base views or global views. The choice of view level depends on the amount of preprocessing and/or preselection that is being done to create the class for the warehouse.
Reference: <author> Barsalou, T., A. M. Keller, N. Siambela and G. </author> <title> Wiederhold (1991). Updating relational databases through object-based views. </title> <booktitle> ACM SIGMOD, </booktitle> <pages> 248-257. </pages>
Reference-contexts: In (Premerlani et al., 1990), an Object-Oriented Relational DBMS was implemented and applied to a spectrum of applications. The view concept in (Shilling and Sweeney, 1989) is used to create an architectural building block for object-based software environments. In <ref> (Barsalou et al., 1991) </ref>, object-based views are used to update relational databases. The issues of view update semantics are discussed and investigated in (Chen and McLeod, 1989; Scholl et al., 1991). Numerous approaches have also emerged to encapsulate information and software systems by views.
Reference: <author> Baekgaard, L. and N. </author> <title> Roussopoulos (1997). Efficient refreshment of data warehouse views. </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Maryland, </institution> <note> URL: http://www.cs.umd.edu/TRs/authors /Nick Rouss opoulos-no-abs.html. </note>
Reference: <author> Bright, M.W., A.R. Hurson and S.H. </author> <title> Pakzad (1992). A taxonomy and current issues in multidatabase systems. </title> <journal> Computer, </journal> <volume> 25, 3, </volume> <pages> 50-60. </pages>
Reference-contexts: Both of the systems are designed to operate on heterogeneous data sources and provide a mapping of the data into a common structure. Over the years, there has been a great deal of work on multidatabases. A taxonomy of multidatabase systems is given in <ref> (Bright et al., 1992) </ref>. While data warehouses are becoming common place in industrial circles (Mattison, 1996), research literature on data warehouses has only recently appeared. The work has focused on using materialized views as a means of constructing the warehouse. <p> A great deal of activity has been focused directly on the task of developing multidatabase systems that allow transparent access to a variety of database environments. The work can be roughly divided into three approaches <ref> (Bright et al., 1992) </ref>. The first approach makes use of a global schema. It typically makes use of a common data model and a global language. The heterogeneous nature of the data is hidden from the user. Bright et al. (1992) list several approaches.
Reference: <author> Chen, I. A., and D. </author> <title> McLeod (1989). Derived data update in semantic databases. </title> <booktitle> Very Large Data Bases, </booktitle> <pages> 225-235. </pages>
Reference: <author> Czejdo, B., and M. C. </author> <title> Taylor (1992). Integration of information systems using an object-oriented approach. </title> <journal> The Computer Journal, </journal> <volume> 35, 5, </volume> <pages> 501-513. </pages>
Reference: <author> Garlan, D. </author> <year> (1986). </year> <title> Extending IDL to support concurrent views. </title> <journal> ACM SIGPLAN, </journal> <volume> 22, 11, </volume> <pages> 95-110. </pages>
Reference-contexts: For example, relational views can be represented by non-procedural queries to describe derived data. Views have also been used in software engineering. For example, views in <ref> (Garlan, 1986) </ref> were used to let multiple tools share a common object base. View Objects In recent years, the view concept has been extended to utilize object-oriented techniques. This extension has been applied to a variety of application domains.
Reference: <author> Gupta, H. </author> <year> (1997). </year> <title> Selection of views to materialize in a data warehouse. </title> <booktitle> To appear in the Proceedings of the International Conference on Database Theory, </booktitle> <address> Athens, Greece. </address>
Reference: <author> Hammer, J., H. Garcia-Molina, J. Widom, W. Labio, Y. </author> <title> Zhuge (1995). The Stanford data warehousing project. </title> <journal> In IEEE Data Engineering Bulletin. </journal>
Reference: <author> Heiler, S., and S. </author> <title> Zdonik (1990). Object views: extending the vision. </title> <journal> IEEE Data Engineering, </journal> <pages> 86-93. </pages>
Reference-contexts: The issues of view update semantics are discussed and investigated in (Chen and McLeod, 1989; Scholl et al., 1991). Numerous approaches have also emerged to encapsulate information and software systems by views. For example, abstraction and view mapping capabilities are proposed in <ref> (Heiler and Zdonik, 1990) </ref> to support federation of heterogeneous software and databases. A sophisticated view mechanism is introduced in (Abiteboul and Bonner, 1991) to help restructure data or integrate databases. Object-oriented views are used to integrate heterogeneous information systems in (Czejdo and Taylor, 1992; Kaul et al., 1990).
Reference: <author> Heimbigner, D., and D. </author> <title> McLeod (1985). A federated architecture for information management. </title> <journal> ACM Trans. on Office Information Systems, </journal> <volume> 3, 3, </volume> <pages> 253-278. </pages>
Reference-contexts: The local site works closely with a set of inter-related sites to set up the partial global schema. The set of inter-related sites form a federation. A formal definition of a federated database system can be found in <ref> (Heimbigner and McLeod, 1985) </ref>. Evolution of the View Concept Due to the diversity of existing view concepts, it is hard to make a precise comparison between the various view concepts.
Reference: <author> Honavar, V. and L. </author> <title> Uhr (1994). Toward learning systems that integrate different strategies and representations. Artificial Intelligence and Neural Networks: Steps Toward Principled Integration. Honavar, </title> <publisher> V. and L. </publisher>
Reference-contexts: This leaves us with a range of machine learning algorithms for data mining tools (Honavar and Uhr, 1994; Langley, 1995; Mitchell, 1997; Ripley, 1996). Some of the factors are <ref> (Honavar and Uhr, 1994) </ref>: * Overall objectives of the knowledge acquisition task: discovery of hidden regularities, pattern classification, approximation of an unknown function from examples, prediction, knowledge compilation, etc.
Reference: <editor> Uhr (eds.), </editor> <publisher> Academic Press, </publisher> <address> Boston. </address>
Reference: <author> Huyn, N. </author> <year> (1996). </year> <title> Efficient view self-maintenance Proceedings of the ACM Workshop on Materialized Views: Techniques and Applications, </title> <address> Montreal, Canada. </address>
Reference: <author> Kaul, M., K. Drosten and E. J. </author> <title> Neuhold (1990). ViewSystem: integrating heterogeneous information bases by object-oriented views. </title> <journal> IEEE Data Engineering, </journal> <pages> 2-10. </pages>
Reference: <author> Kawaguchi, A., D. Lieuwen, I.S. Mumick, D. Quass, K.A. Ross. </author> <year> (1997). </year> <title> Concurrency control theory for deferred materialized views. </title> <note> To appear in Proceedings of the 1997 ICDT Conference. </note>
Reference: <author> Kawaguchi, A., D. Lieuwen, I. Mumick, D. Quass, K. </author> <title> Ross (1997). Concurrency control theory for deferred materialized views. </title> <booktitle> To appear in the Proceedings of the International Conference on Database Theory, </booktitle> <address> Athens, Greece. </address>
Reference: <author> Langley, P. </author> <title> (1995) Elements of Machine Learning. </title> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, CA. </address>
Reference: <author> Mitchell, T. </author> <year> (1997). </year> <title> Machine Learning. McGraw-Hill, New York. The Common Object Request Broker: Architecture and Specification, Object Management Group (1991). OMG Document 91.12.1. OMG Architecture Guide Chapter 4: The OMG Object Model (1992). Object Management Group. </title>
Reference: <author> Mattison, R. </author> <year> (1996). </year> <title> Data Warehousing:Strategies, Technologies and Techniques, </title> <publisher> McGraw Hill, </publisher> <address> New York. </address>
Reference-contexts: Over the years, there has been a great deal of work on multidatabases. A taxonomy of multidatabase systems is given in (Bright et al., 1992). While data warehouses are becoming common place in industrial circles <ref> (Mattison, 1996) </ref>, research literature on data warehouses has only recently appeared. The work has focused on using materialized views as a means of constructing the warehouse.
Reference: <author> Peters, R. J., M. T. Ozsu and D. </author> <title> Szafron (1992). TIGUKAT: An object model for query and view support in object database systems, </title> <type> TR 92-14, </type> <institution> U. of Alberta. </institution>
Reference-contexts: A profile along with the core object model provide the modeling facility for a particular application domain. Figure 2 shows the concepts of our EOM. The proposed core object model has been influenced by on-going standardization efforts (OMG, 1991; OMG, 1992) and research <ref> (Peters et al., 1992) </ref>. Object An object can model any real-world entity or conceptual entity. Each object has a unique identity which is immutable and persists as long as the object exists. An object has its state and behavior.
Reference: <author> Premerlani, W. J., M. R. Blaha, J. E. Rumbaugh and T. A. </author> <month> Varwig </month> <year> (1990). </year> <title> An object-oriented relational database. </title> <journal> Communications of the ACM, </journal> <pages> 99-109. </pages>
Reference-contexts: This extension has been applied to a variety of application domains. For example, the notion of view objects was introduced in (Wiederhold, 1986) to integrate the abstraction capabilities of programming languages and the conventional view concept of database systems. In <ref> (Premerlani et al., 1990) </ref>, an Object-Oriented Relational DBMS was implemented and applied to a spectrum of applications. The view concept in (Shilling and Sweeney, 1989) is used to create an architectural building block for object-based software environments. In (Barsalou et al., 1991), object-based views are used to update relational databases.
Reference: <author> Quass, D., A. Gupta, I. S. Mumick, and J. </author> <title> Widom (1996). Making views self-maintainable for data warehousing. </title> <booktitle> Proceedings of the Conference on Parallel and Distributed Information Systems, </booktitle> <address> Miami Beach, FL. </address>
Reference: <author> Ripley, B.D. </author> <year> (1996). </year> <title> Pattern Recognition and Neural Networks. </title> <publisher> Cambridge University Press, </publisher> <address> New York. </address>
Reference: <author> Scholl, M.H., C. Laasch and M. </author> <title> Tresch (1991). Updatable views in object-oriented databases. </title> <booktitle> Deductive and Object-Oriented Databases (DOOD), </booktitle> <pages> 189-207. </pages>
Reference: <author> Sheth, A. and L. </author> <title> Kalinichenko (1992). Information modeling in multidatabase systems: beyond data mod-eling. </title> <booktitle> Int'l Conference in Knowledge Management, </booktitle> <pages> 8-16. </pages>
Reference: <author> Shilling, J.J. and P.F. </author> <title> Sweeney (1989). Three steps to views: extending the object-oriented paradigm, </title> <booktitle> OOPSLA, </booktitle> <pages> 353-361. </pages>
Reference-contexts: In (Premerlani et al., 1990), an Object-Oriented Relational DBMS was implemented and applied to a spectrum of applications. The view concept in <ref> (Shilling and Sweeney, 1989) </ref> is used to create an architectural building block for object-based software environments. In (Barsalou et al., 1991), object-based views are used to update relational databases. The issues of view update semantics are discussed and investigated in (Chen and McLeod, 1989; Scholl et al., 1991).
Reference: <author> Su, S., S. Fang, and H. </author> <title> Lam (1993). An object-oriented rule-based approach to data model and schema integration. </title> <type> Technical Report, </type> <institution> U. of Florida,. </institution>
Reference: <author> Wiederhold, G. </author> <year> (1986). </year> <title> Views, objects, and databases. </title> <booktitle> IEEE Computer, </booktitle> <pages> 37-44. </pages>
Reference-contexts: View Objects In recent years, the view concept has been extended to utilize object-oriented techniques. This extension has been applied to a variety of application domains. For example, the notion of view objects was introduced in <ref> (Wiederhold, 1986) </ref> to integrate the abstraction capabilities of programming languages and the conventional view concept of database systems. In (Premerlani et al., 1990), an Object-Oriented Relational DBMS was implemented and applied to a spectrum of applications.
Reference: <author> Wiener, J.L. , H. Gupta, W.J. Labio, Y. Zhuge, H. Garcia-Molina, and J. </author> <title> Widom (1996). A system prototype for warehouse view maintenance. </title> <booktitle> Proceedings of the ACM Workshop on Materialized Views: Techniques and Applications, </booktitle> <address> Montreal, Canada, </address> <pages> 26-33. </pages>
Reference: <author> Yen, Cheng-Huang, L. Miller, and S. </author> <title> Pakzad (1994). The design and implementation of the Zeus View System. </title> <booktitle> 27th Hawaii International Conference on Systems and Sciences, </booktitle> <pages> 206-215. </pages>
Reference-contexts: We define the view object type as being an extension of the object model (EOM). Our use of views is an extension of our work on the Zeus View Mechanism given in <ref> (Yen et al., 1994) </ref>. The view type consists of public attributes, private attributes, a derivation section and a method section. The public attributes, private attributes, and method sections have the normal meanings.
Reference: <author> Yen, C.H. and L.L. </author> <title> Miller (1995). An extensible view system for multidatabase integration and interopera-tion. </title> <journal> Integrated Computer-Aided Engineering, </journal> <volume> 2. 2. </volume> <pages> 97-123. </pages>
Reference: <author> Zhuge, Y. , H. Garcia-Molina, J. Hammer, and J. </author> <title> Widom (1995). View Maintenance in a Warehousing Environment. </title> <booktitle> Proceedings of the ACM SIGMOD Conference, </booktitle> <address> San Jose, California. </address>
References-found: 33

