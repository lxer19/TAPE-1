URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/sewersky.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/index.html
Root-URL: 
Title: Modifications to FAA Certified Structural Usage System  
Note: 6.853 Project Paper Rich Sewersky 11/30/97  1.0 Introduction  
Abstract: This paper will examine several aspects of design for change in a software subsystem that will be used to help maintain helicopters. The basic goal is to make use of data tables to reconfigure or fine tune the system, avoiding having to change software and the extensive retesting that that implies. As this system requires regulatory approval, we propose that the system be designed to be changed via tables with minimal or no impact on other parts of the system thereby minimizing recertification effort. Two types of changes are attempted, one code modification and one table change. The effort required to make these changes and the recertification work is estimated. Sikorsky Aircraft is teaming with BFGoodrich Aerospace to develop and field the next generation Health and Usage Monitoring System (HUMS) which continuously monitors the mechanical health of a helicopter and how it is being flown (roughly or gingerly). It will be offered as a customer option on Sikorskys commercial and military models. The first generation HUMS are being flown on over 200 helicopters, predominantly in Europe. The HUMS consists of several onboard components and a PC based groundstation. The onboard system continuously monitors existing aircraft sensors as well as HUMS specific sensors, acquires and processes the data and stores a combination of raw data and processed results onto a PCMCIA memory card that is used to transfer the data to the ground station. Where appropriate, information is provided to the pilot and his inputs accepted on a cockpit display. The major functions include powertrain vibration monitoring, rotor system tuning, engine power checks, avionics fault captures and usage monitoring. Each of these functions has corresponding ground based software to complete processing, track required maintenance and archive results. The overall goal of the HUMS is to improve safety by finding potential problems early and to reduce maintenance and inspection burden through automation of focussed diagnostics. Because the system will be used to generate advice, that if incorrect, could adversely affect aircraft safety, the system must receive approval (certification) by the Federal Aviation Administration (FAA). The level of testing and documentation required is defined by RTCA-DO178B [3] and is determined by examining the worst case failure effect of each major function and is assigned a software criticality level of from A to E, with A being the most critical. This process is described in more detail in section 5. The usage monitoring subsystem determines the breakdown of what percent of flight time the helicopter has spent in each flight mode (regime) as well as the specific sequence of regimes at a one hertz rate. Some examples of regimes are takeoff, hovering, level flight, various turns and landing. The regime data is then used to calculate the rate that various structural components are being used up and when they need to be removed from service to maintain the required reliability rate. The regime recognition task is the subject of this investigation. Regime recognition is performed to map recorded aircraft parameter data to a set of ground/flight regimes so that the operation of an aircraft can be fully characterized. The output of the process includes several summary reports as well as calculated adjustments to useful life of specific components. The first report called the regime sequence report (i.e., flight profile) represents the time history of the aircraft operation listing the sequence of regimes encountered. The flight spectrum report summarizes the distribution the time spent in each regime and how often the regime repeated. Figure 1 shows the data flow and the functionality of regime recognition and the subsequent structural data processing. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Nutaro, Joe. </author> <title> Overview of Airborne User Modifiable Software. </title> <booktitle> 1994, IEEE Conference Proceedings 0-7803-2425-0/04. </booktitle>
Reference-contexts: The remainder of the paper will summarize the previous work in this area, review system aspects of the change approach, review software engineering issues of this domain, provide change effort and performance results and offer recommendations. 3.0 Related Work Nutaro <ref> [1] </ref> discusses an approach to user modifiable software which was successfully fielded in the Honeywell Airplane Information Management System (AIMS) used on the Boeing 777.
Reference: 2. <author> Scheidemandel, Eric M. </author> <title> Providing a high level Language to Produce User-Modifiable Airborne Software. </title> <booktitle> 1994, IEEE Conference Proceedings 0-7803-2425-0/04. </booktitle>
Reference-contexts: Systems certified as user modifiable can have the modifiable components changed without the need for recertification per DO178B. While this will add cost to the initial design and development process, it can save considerable effort later in making small changes to customize the system to the users operation. Scheidemandel <ref> [2] </ref> provides further detail regarding the specific method that Honeywell chose to allow users to prepare and upload changes. For example, the user specifies new control logic for the display in a special high level language. The author provides Backus-Nauer Form (BNF) rules for the user logic language.
Reference: 3. <author> RTCA DO-178B, </author> <title> Software Considerations in Airborne Systems and Equipment Certification. </title> <month> December </month> <year> 1992. </year>
Reference-contexts: Because the system will be used to generate advice, that if incorrect, could adversely affect aircraft safety, the system must receive approval (certification) by the Federal Aviation Administration (FAA). The level of testing and documentation required is defined by RTCA-DO178B <ref> [3] </ref> and is determined by examining the worst case failure effect of each major function and is assigned a software criticality level of from A to E, with A being the most critical. This process is described in more detail in section 5. <p> Development of certified software is guided by RTCA/DO- 178B Software Considerations in Airborne Systems and Equipment Certification <ref> [3] </ref> which specifies the software development process to be followed and the documents that need to be submitted for approval. The criticality level of the software customizes the process, with additional safeguards and testing required where failure of the software could have severe consequences.
References-found: 3

