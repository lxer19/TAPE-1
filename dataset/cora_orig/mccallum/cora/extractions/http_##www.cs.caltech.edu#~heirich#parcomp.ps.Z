URL: http://www.cs.caltech.edu/~heirich/parcomp.ps.Z
Refering-URL: http://www.cs.caltech.edu/~heirich/heirich.html
Root-URL: http://www.cs.caltech.edu
Title: Scalable Monte Carlo Image Synthesis  
Author: Alan Heirich a;b and James Arvo b 
Address: Pasadena, CA 91125  
Affiliation: a Center for Advanced Computing Research b Department of Computer Science California Institute of Technology,  
Abstract: This paper describes a scalable photorealistic renderer that is designed to render scenes of arbitrary complexity on computer systems of arbitrary size. The rendering algorithm is a Monte Carlo method to compute approximate solutions of the rendering equation. The software implementation uses a diffusive load balancing method coupled with a message driven concurrent pipeline. Measured performance in rendering replicated models on up to 256 computers shows scaling efficiencies as high as 99 percent. Simple extensions will partition extremely large models across physically distributed memory as well as perform out-of-core calculations.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aboulenen, N., Gjessing, S., Goodman, J. & Woest, P. </author> <title> Hardware support for synchronization in the Scalable Coherent Interface (SCI). </title> <booktitle> Proc. 8th IEEE Int. Par. Proc. Symp. </booktitle> <year> (1994). </year>
Reference: [2] <author> Amdahl, G. M. </author> <title> Validity of the single processor approach to achieving large scale computing capabilities. </title> <booktitle> AFIPS Conf. Proc. </booktitle> <year> (1967) </year> <month> 483-485. </month>
Reference: [3] <author> Anderson, T. E., Culler, D. E. & Patterson, D. A. </author> <title> A case for NOW (Networks of Workstations). </title> <booktitle> IEEE Micro 15 (1995) 54-64. </booktitle>
Reference: [4] <author> Athas, W. C. & Seitz, C. L. </author> <title> Multicomputers: message passing concurrent computers. </title> <journal> IEEE Comp. </journal> <month> 21 </month> <year> (1988) </year> <month> 9-24. </month>
Reference: [5] <author> Baskett, F. & Hennessy, J. L. </author> <title> Microprocessors: from desktops to supercomputers. </title> <note> Science 261 (1993) 864-871. </note>
Reference: [6] <author> Boden, N. J., Cohen, D., Felderman, R. E., Kulawik, A. E., Seitz, C. L., Seizovic, J. N. & Su, W. Myrinet: </author> <title> a gigabit per second local area network. </title> <booktitle> IEEE Micro 15 (1995) 29-36. </booktitle>
Reference: [7] <author> Bokhari, S. </author> <title> Assignment problems in parallel and distributed computing. </title> <publisher> Boston : Kluwer (1987). </publisher>
Reference: [8] <author> Chang, C.-C., Czajkowski, G. & von Eicken, T. </author> <title> Design and performance of active messages on the IBM SP2. </title> <note> Cornell Computer Science Technical Report 96-1572 (1996). </note>
Reference: [9] <author> Cybenko, G. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> J. Par. Dist. Comp. </journal> <note> 7 (1989) 279-301. [10] von Eicken, </note> <author> T., Culler, D. E., Goldstein, S. C. & Schauser, K. E. </author> <title> Active messages: a mechanism for integrated communication and computation. </title> <booktitle> Proc. 19th Int. Symp. Comp. Arch., </booktitle> <address> Gold Coast, Australia (1992) 256-266. </address> <note> [11] von Eicken, </note> <author> T., Basu, A., Buch, V. & Voegls, W. U-Net: </author> <title> a user level network interface for parallel and distributed computing. </title> <booktitle> Proc. 15th ACM Symp. Op. Sys. Princ. </booktitle> <year> (1995) </year> <month> 1-14. </month>
Reference: [12] <author> Gustafson, J. L. Reevaluating Amdahl's Law. </author> <title> Comm. </title> <booktitle> ACM 31 (1987), </booktitle> <pages> 532-533. </pages>
Reference: [13] <author> Heirich, A. & Taylor, S. </author> <title> A parabolic load balancing method. </title> <booktitle> Proc. 24th Intern. Conf. Par. Proc., III, </booktitle> <pages> pp. 192-202. </pages> <publisher> New York : CRC Press (1995). </publisher>
Reference-contexts: For this reason we have employed a diffusion algorithm for dynamic load balancing [9,13,14]. Diffusive load balancing algorithms have the desirable property of converging in a fixed elapsed time that is independent of P <ref> [13] </ref>. In a later section of this paper we will propose applying a related technique [14] to the problem of partitioning the geometric model on the computer system in order to achieve similar scalable convergence in this phase of the computation.
Reference: [14] <author> Heirich, A. </author> <title> A scalable diffusion algorithm for dynamic mapping and load balancing on networks of arbitrary topology. </title> <institution> Int. J. Found. Comp. Sci. </institution> <year> (1997), </year> <note> to appear. 15 </note>
Reference-contexts: For this reason we have employed a diffusion algorithm for dynamic load balancing [9,13,14]. Diffusive load balancing algorithms have the desirable property of converging in a fixed elapsed time that is independent of P [13]. In a later section of this paper we will propose applying a related technique <ref> [14] </ref> to the problem of partitioning the geometric model on the computer system in order to achieve similar scalable convergence in this phase of the computation. <p> At such a time a computer polls all its neighbors in order to solicit work and requests a specific amount of work as determined by a diffusion calculation <ref> [14] </ref>. Neighbors respond by supplying the requested amount of work. This strategy produces an overhead from load balancing which is proportional to the number of computers but which does not depend on the length of time spent in computation. <p> We identify the problems to be solved in mapping and partitioning models among computers. We propose strategies to perform this partitioning, one of which employs a diffusion algorithm related to the algorithm we used for load balancing and has similar scaling properties <ref> [14] </ref>. We describe the impact that this partitioning has upon the other parts of the rendering calculation. <p> Diffusion algorithms have a number of properties which make them attractive in distributed computing environments. The correctness of these algorithms, 12 their utility and efficiency in parallel computing, as well as a complete bibli-ography of related work, is given in <ref> [14] </ref>. The algorithms converge in a fixed amount of elapsed time which is independent of the number of computers on which they execute. This makes them very attractive for massively parallel implementation. They require no synchronization and communicate only among directly connected computers.
Reference: [15] <author> Hillis, W. D.& Bhogosian, B. M. </author> <title> Parallel scientific computation. </title> <note> Science 261 (1993) 856-863. </note>
Reference: [16] <author> Kajiya, J. T. </author> <title> The rendering equation. </title> <booktitle> Comp. Graph. </booktitle> <month> 20 </month> <year> (1986). </year>
Reference-contexts: A full simulation of this kind can be extremely expensive since the number of paths required to produce a high quality image can be enormous, and each path can require a significant amount of geometry processing. Path tracing algorithms reduce the number of paths substantially <ref> [16] </ref>. Despite this improvement a high quality rendering task implemented by path tracing can consume many hours or even days of computing time on a high performance workstation. This paper describes a Monte Carlo implementation of path tracing on a parallel computer system. <p> The values of n and m may vary with the depth of the path, the type of surface, or other factors. If n = 1 and m = 1, then the algorithm corresponds to the path tracing approach introduced by Kajiya <ref> [16] </ref>. 3 A message driven computation with diffusive load balancing Whenever a problem can be solved by a modest number of computers it is usually convenient to employ a symmetric multiprocessor (SMP) or other computer system with shared memory.
Reference: [17] <author> Karypis, G. & Kumar, V. </author> <title> Multilevel graph partitioning schemes. </title> <booktitle> Proc. 24th Intern. Conf. Par. Proc., III, </booktitle> <pages> pp. 113-122. </pages> <publisher> New York : CRC Press (1995). </publisher>
Reference: [18] <author> Kung, H. T. & Stevenson, D. </author> <title> A software technique for reducing the routing time on a parallel computer with a fixed interconnection network. In High speed computer and algorithm organization, </title> <editor> eds. Kuck, </editor> <booktitle> Lawrie & Sameh (1977). </booktitle>
Reference: [19] <author> Martin, A. </author> <title> A distributed implementation method for parallel programming. Inf. </title> <booktitle> Proc. </booktitle> <month> 80 </month> <year> (1980) </year> <month> 309-314. </month>
Reference: [20] <author> Rosenberg, A. </author> <title> Issues in the study of graph embedding. </title> <booktitle> In Graph theoretic concepts in computer science, Lecture Notes in Computer Science 100, </booktitle> <address> New York : Springer (1981) 150-176. </address>
Reference-contexts: Diffusion algorithms can address a number of quadratic minimization problems, including mapping data structures onto parallel computers. The mapping problem is derived from the (NP complete) graph embedding problem <ref> [20] </ref>. In the graph embedding problem the vertices of a relatively large graph, termed the guest, are mapped into the vertices of a smaller graph, termed the host.
Reference: [21] <author> Sterling, T. L. </author> <title> The scientific workstation of the future may be a pile-of-pcs. </title> <journal> Comm. </journal> <note> ACM 39 (1996) 11-12. </note>
Reference-contexts: The implementation has been tested on a variety of uniproces-sors, an Ethernet cluster of Sparcstations, a "Beowulf" cluster computer <ref> [21] </ref>, a Hewlett-Packard/Convex Exemplar SPP-2000 system with global shared memory, and IBM SP1 and SP2 massively parallel computers. We expect it 8 Fig. 2. The result of dynamic load balancing on 32 computers. Left, completion times for the stained glass image with no load balancing.
Reference: [22] <author> Whitted, T. </author> <title> An improved illumination model for shaded display. </title> <booktitle> Comm. ACM 23 (1980), </booktitle> <pages> 343-349. </pages>
Reference-contexts: Concurrent processing is a prerequisite to real time vision. Preprint submitted to Elsevier Preprint 30 December 1996 Photorealistic rendering can be expressed as a problem of modeling photon transport through a geometric environment. Ray tracing algorithms directly simulate transport by following the paths of individual photons <ref> [22] </ref>. A full simulation of this kind can be extremely expensive since the number of paths required to produce a high quality image can be enormous, and each path can require a significant amount of geometry processing. Path tracing algorithms reduce the number of paths substantially [16].
Reference: [23] <author> Williams, R. D. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency: Pract. Exp. </journal> <volume> 3 (1991) 457-481. </volume> <pages> 16 </pages>
References-found: 21

