URL: ftp://ftp.cs.man.ac.uk/pub/IPG/sw92.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Title: Integrating a Formal Specification Method with PML: A Case Study  
Author: Jin Sa and B.C. Warboys, 
Note: Published in the proceedings of the Second European Workshop on Software Process Technology EWSPT'92, September, 1992, Trondheim,  
Address: Manchester M13 9PL, England.  
Affiliation: Department of Computer Science, University of Manchester,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. E. Kaiser, N. S. Barghouti, P. E. Feiler, R. W. Schwank, </author> <title> "Database Support for Knowledge-Based Engineering Environments" IEEE Experts, </title> <booktitle> 1988. </booktitle> <pages> 25 </pages>
Reference-contexts: 1 Introduction Several formal approaches for process modelling have been developed. Some interesting examples can be found in <ref> [1] </ref>, [2], [3] and [4]. These different approaches are generally so because they are based on different underlying models rather than for methodological reasons.
Reference: [2] <author> G. E. Kaiser, P. H. Feiler, S. S. Popouich, </author> <title> "Intelligent assistance for software development and maintenance", </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Several formal approaches for process modelling have been developed. Some interesting examples can be found in [1], <ref> [2] </ref>, [3] and [4]. These different approaches are generally so because they are based on different underlying models rather than for methodological reasons.
Reference: [3] <author> W. Emmerich, G. Junkermann, B. Peuschel, W. Scchafer, S. Wolf, "Mer-lin: </author> <title> Knowledge-based Process Modelling", </title> <booktitle> First European Workshop on Software Process Modelling, </booktitle> <month> May, </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Several formal approaches for process modelling have been developed. Some interesting examples can be found in [1], [2], <ref> [3] </ref> and [4]. These different approaches are generally so because they are based on different underlying models rather than for methodological reasons.
Reference: [4] <author> V. Gruhn, </author> <title> "The Software process Management Environment Melmac", </title> <booktitle> First European Workshop on Software Process Modelling, </booktitle> <month> May, </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Several formal approaches for process modelling have been developed. Some interesting examples can be found in [1], [2], [3] and <ref> [4] </ref>. These different approaches are generally so because they are based on different underlying models rather than for methodological reasons. In this paper we review a small case study which we recently undertook to investigate the application of an existing formal framework to Process Models (and Modelling Languages) .
Reference: [5] <author> S. Bandinelli, a. Fuggetta, C. Ghezzi, </author> <title> "Software Process as Real-Time Systems: A case study using High-level Petri Nets", </title> <booktitle> First European Workshop on Software Process Modelling, </booktitle> <month> May, </month> <year> 1991. </year>
Reference: [6] <author> B. C. Warboys, </author> <title> "The IPSE 2.5 Project: Process Modelling as the basis for a Support Environment", </title> <booktitle> Procs First International Conference on Software Development, Environments and Factories, </booktitle> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: In this paper we review a small case study which we recently undertook to investigate the application of an existing formal framework to Process Models (and Modelling Languages) . The modelling language chosen was the Process Modelling Language (PML) of the IPSE 2.5 Project <ref> [6] </ref> and the specification method was a modified version of the technique developed by our group at Manchester as part of the Esprit funded EDS project EP2025.
Reference: [7] <author> J. Sa, B. C. Warboys, </author> <title> "Specifying concurrent object-based systems using combined specification notations", </title> <type> Technical Report Series UMCS-91-9-2, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> July, </month> <year> 1991. </year>
Reference-contexts: This latter is known as Base Modelling (BM) and is reported in <ref> [7, 8] </ref>. 2 Some recent case studies, which we have undertaken, have clearly demon-strated that the type of system that can be specified by BM is very similar in nature to the type of system that can be modelled by PML. <p> a result. * synchronous send: Role R1 passes an object to R2, R1 continues with no expectation of a result. * asynchronous send: Role R1 passes an object to R2, R1 continues but expects a result at some later stage. 3 BM The full description of BM is given in <ref> [7, 9] </ref>. In this paper only a brief outline is given. 3.1 Overview of BM BM is a specification method aimed at the specification of object-based systems. In BM, a system is considered to be composed of components which execute in parallel. <p> In BM, the overall semantics of a single object is automatically derived from the above information. Therefore, the overall semantics of a Role instance can also be automatically derived. The derivation of the semantics is not within the scope of this paper but can be found in <ref> [7] </ref>. 4.2 Specifying the behaviour of a (sub)system The behaviour of a (sub)system, as defined in PML, can be specified using the BM construct composed-object. Each Role instance in the (sub)system is specified using a single-object. <p> In such a specification, the behaviour of some role R1 will include invocations of read and write operations. read s may be considered as being operations of R1 (that is the temporal logic behaviour of R1 will contain accept or receive events see <ref> [7] </ref>), whilst writes may be considered as being invoked by R1 (that is the temporal logic behaviour of R1 will contain send or return events) Composing R1 with some other role (say R2) would require composing 8 Disregarding the complications of UserActions ! 23 their behaviours subject to constraints synchronising appropriate
Reference: [8] <author> A. </author> <title> Apps, "A Prototype BM Specification Tool", </title> <editor> EDS document EDS. WP6I. </editor> <address> AA16, </address> <institution> Department of Computer Science, University of Manch-ester, Februrary, </institution> <year> 1992. </year>
Reference-contexts: This latter is known as Base Modelling (BM) and is reported in <ref> [7, 8] </ref>. 2 Some recent case studies, which we have undertaken, have clearly demon-strated that the type of system that can be specified by BM is very similar in nature to the type of system that can be modelled by PML. <p> This also ensures run-time conformance to the specification. (In EDS this approach was used to generate C ++ class definitions with tasking calls to the Chorus Operating System <ref> [8] </ref>) * the functionality concerning the updating of variables is specified using the VDM style of pre- and post- conditions.
Reference: [9] <author> J. Sa, </author> <title> "BM Extensions for Asynchronous Communications", </title> <type> Draft note, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> February, </month> <year> 1992. </year>
Reference-contexts: a result. * synchronous send: Role R1 passes an object to R2, R1 continues with no expectation of a result. * asynchronous send: Role R1 passes an object to R2, R1 continues but expects a result at some later stage. 3 BM The full description of BM is given in <ref> [7, 9] </ref>. In this paper only a brief outline is given. 3.1 Overview of BM BM is a specification method aimed at the specification of object-based systems. In BM, a system is considered to be composed of components which execute in parallel. <p> The computation of a component is single threaded. The behaviour of a component is determined by the pattern (BM ordering expressions 2 ) to which its operations, when executed, conform. A component may only communicate with another component by calling the operations of the other component. In <ref> [9] </ref>, BM is extended so that it is expressive enough to specify the three types of communication allowed by PML. Thus it supports function calls and synchronous and asynchronous sends as outlined above. <p> As interactions are buffered channels in PML, composition of roles isn't quite so straightforward. However, as discussed in <ref> [9] </ref> the solution to this is to introduce intermediate objects having a behaviour of their own to represent interactions. Thus composing the behaviours of roles requires, additionally, the inclusion of behaviours for all interactions between roles in the composition.
Reference: [10] <author> J. Sa, </author> <title> "BM Specification of the Surrey Project PSS Demonstration Model", </title> <type> Draft Note, </type> <institution> Department of Computer Science, University of Manchester. </institution>
Reference-contexts: The full BM specification of the Surrey model can be found in <ref> [10] </ref>. The case study has shown that the behaviour of the Surrey example modelled in PML can be specified in BM. <p> The other actions are specified similarly and can be found in <ref> [10] </ref>. * call templates of AssignWorkpackage AssignWorkpackage calls the initialisation action of the appropriate Workpackage instance. <p> The idea is to do this in a way which is better than PML. 6.1.1 A place for Base Modelling (BM)? The example in <ref> [10] </ref> describes a specification which gives a "userview" of a process model. That example exemplified that BM can be used for such purposes. <p> We are still undecided on this issue. Finally it is interesting to note that the specification in <ref> [10] </ref> appears to be based on a "user view" of the process model rather than on the PML per se. Such an approach is obviously valuable and is probably a variant on the "white box model" in which the actions of interest are limited to UserActions.
Reference: [11] <author> I. Robertson, </author> <title> "Surrey Project Forecasting - PSS Demonstration", IPG document, </title> <institution> Department of Computer Science, </institution> <month> January, </month> <year> 1992. </year>
Reference-contexts: a single-object, the overall semantics of the (sub)system can be automatically derived from the above information. 5 BM Specification of the Surrey example As a case study, we took a system, called "Surrey Project Forecasting" (referred to as the Surrey example throughout this paper), that has been mod-elled using PML <ref> [11] </ref> and specified it using BM. The full BM specification of the Surrey model can be found in [10]. The case study has shown that the behaviour of the Surrey example modelled in PML can be specified in BM. <p> The PML model of the example, as defined in <ref> [11] </ref>, has centred on the assignment of workpackages by the design manager to the design engineers.
Reference: [12] <author> C. B. Jones, </author> <title> "Systematic Software Development Using VDM", </title> <booktitle> Prentice-Hall International Series in Computer Science, </booktitle> <year> 1986 </year> <month> 26 </month>
Reference-contexts: Temporal Logic provides a suitable framework for such composition. 5.2.2 Variable Declarations The DM instance contains variables which record information regarding the assigned Workpackages. The syntax for declaring the variables follows the VDM style as described in <ref> [12] </ref>. 11 When the system administrator creates the DM instance, it passes a pool of potential Workpackages and a pool of potential users (designers) to the DM instance.
References-found: 12

