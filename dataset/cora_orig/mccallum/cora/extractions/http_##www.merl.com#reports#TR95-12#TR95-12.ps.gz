URL: http://www.merl.com/reports/TR95-12/TR95-12.ps.gz
Refering-URL: http://www.merl.com/reports/TR95-12/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Window Sharing with Collaborative Interface Agents  
Author: Charles Rich 
Address: Cambridge, Massachusetts 02139  
Note: Published in SIGCHI Bulletin, Vol. 28, No. 1, January 1996, pp.  Copyright c Mitsubishi Electric Research Laboratories, 1995 201 Broadway,  
Date: April 1995  70-78.  
Web: http://www.merl.com  
Affiliation: MITSUBISHI ELECTRIC RESEARCH LABORATORIES  
Pubnum: TR-95-12  
Abstract: An implemented system is described which allows a software agent to collaborate with a human user using a shared application window. The system automatically controls input permission and also provides mechanisms for signalling and communication. A generalization of the system to multiple users and agents, called NShare, is compared with common window-sharing tools, such as SharedX. This work is part of a larger agenda to apply principles of human collaboration and discourse structure to human-computer interaction using the interface agent paradigm. This work may not be copied or reproduced in whole or in part for any commercial purpose. Permission to copy in whole or in part without payment of fee is granted for nonprofit educational and research purposes provided that all such whole or partial copies include the following: a notice that such copying is by permission of Mitsubishi Electric Research Laboratories of Cambridge, Massachusetts; an acknowledgment of the authors and individual contributions to the work; and all applicable portions of the copyright notice. Copying, reproduction, or republishing for any other purpose shall require a license with payment of fee to Mitsubishi Electric Research Laboratories. All rights reserved. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> Xmc and Xy | Scalable window sharing and mobility. </editor> <booktitle> In Proc. 8th Annual X Technical Conf. </booktitle> <address> (Boston, MA, </address> <month> Jan. </month> <year> 1994). </year>
Reference-contexts: Window replication in the NShare prototype was handled inside the application program. A more practical implementation of NShare would make use of one of the many X protocol multiplexers, such as Xy <ref> [1] </ref>.
Reference: 2. <editor> An architecture for transforming graphical interfaces. </editor> <booktitle> In Proc. ACM Symposium on User Interface Software and Technology (Marina del Rey, </booktitle> <address> CA, </address> <month> Nov. </month> <year> 1994), </year> <pages> pp. 39-48. </pages>
Reference-contexts: It should then be possible to automatically generate both the GUI and the UnGUI for a given system from this model. Further research needs to be done on the appropriate representations for the interface model and algorithms for the automatic generation <ref> [2] </ref>. 8 6.2 Collaboration and Discourse Structure The larger agenda underlying this work is to apply principles of human collaboration [4] and discourse structure [3] to human-computer interaction using the interface agent paradigm.
Reference: 3. <author> Attention, </author> <title> intentions, and the structure of discourse. </title> <booktitle> Computational Linguistics 12, 3 (1986), </booktitle> <pages> 175-204. </pages>
Reference-contexts: Further research needs to be done on the appropriate representations for the interface model and algorithms for the automatic generation [2]. 8 6.2 Collaboration and Discourse Structure The larger agenda underlying this work is to apply principles of human collaboration [4] and discourse structure <ref> [3] </ref> to human-computer interaction using the interface agent paradigm.
Reference: 4. <editor> Plans for discourse. In Intentions and Communication, P. R. Cohen, J. L. Morgan, and M. E. Pollack, Eds. </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990, </year> <journal> ch. </journal> <volume> 20, </volume> <pages> pp. 417-444. </pages>
Reference-contexts: Further research needs to be done on the appropriate representations for the interface model and algorithms for the automatic generation [2]. 8 6.2 Collaboration and Discourse Structure The larger agenda underlying this work is to apply principles of human collaboration <ref> [4] </ref> and discourse structure [3] to human-computer interaction using the interface agent paradigm.
Reference: 5. <institution> Agents that reduce work and information overload. </institution> <note> Comm. ACM 37, 17 (July 1994), 30-40. Special Issue on Intelligent Agents. </note>
Reference-contexts: This approach facilitates the reuse of existing applications and supports collaboration by making it it easy for the user to know what the agent is doing. This concept of a collaborative interface agent is closest to the work of Patti Maes <ref> [5] </ref>, although she uses the term "collaborative" to refer to the sharing of information between agents.
Reference: 6. <author> Garnet: </author> <title> Comprehensive support for graphical, highly-interactive user interfaces. </title> <booktitle> IEEE Computer 23, </booktitle> <address> 11 (Nov. </address> <year> 1990), </year> <pages> 71-85. </pages>
Reference-contexts: SharedX provides separate "telepointer" icons that users have to explicitly click and drag around, which is less convenient than just pointing with the mouse as in NShare. 5 IMPLEMENTATION The air travel and NShare prototypes described above were implemented in Common Lisp using the X Window System and the Garnet <ref> [6] </ref> graphics package. Window replication in the NShare prototype was handled inside the application program. A more practical implementation of NShare would make use of one of the many X protocol multiplexers, such as Xy [1].
Reference: 7. <editor> Negotiation in collaborative activity: </editor> <title> An implementation experiment. </title> <note> Knowledge-Based Systems 7, 4 (Dec. </note> <year> 1994), </year> <pages> 268-270. </pages>
Reference-contexts: This is intentional because this work is part of a larger effort <ref> [7, 9] </ref> to apply known principles of human discourse and collaboration to human-computer interaction. The work reported in this paper primarily concerns the mechanisms of the interaction between humans and interface agents, rather than the content.
Reference: 8. <editor> An artificial discourse language for collaborative negotiation. </editor> <booktitle> In Proc. 12th National Conf. on Artificial Intelligence (Seattle, </booktitle> <address> WA, </address> <month> Aug. </month> <year> 1994). </year>
Reference-contexts: Because they address the structure of collaboration at the information-theoretic level, I believe they apply equally well to human-computer collaboration using an restricted artificial language <ref> [8] </ref> instead of natural language for communication.
Reference: 9. <editor> Negotiation in collaborative activity: </editor> <title> A discourse analysis. </title> <note> Knowledge-Based Systems 7, 4 (Dec. </note> <year> 1994), </year> <pages> 265-267. </pages>
Reference-contexts: This is intentional because this work is part of a larger effort <ref> [7, 9] </ref> to apply known principles of human discourse and collaboration to human-computer interaction. The work reported in this paper primarily concerns the mechanisms of the interaction between humans and interface agents, rather than the content.
Reference: 10. <author> Model-based user interfaces: </author> <title> What are they and why should we care? In Proc. </title> <booktitle> ACM Symposium on User Interface Software and Technology (Marina del Rey, </booktitle> <address> CA, </address> <month> Nov. </month> <year> 1994), </year> <pages> pp. 133-135. 9 </pages>
Reference-contexts: Said more mathematically, the composition of an UnGUI and the corresponding GUI compute the identity function. In the prototypes described here, the UnGUI module was hand-coded. However, in the long run, a better approach is to use the model-based user interface paradigm <ref> [10] </ref>, in which an explicit, largely declarative representation, called the interface model, is developed which describes the relationship between the application semantics and its interface appearance. It should then be possible to automatically generate both the GUI and the UnGUI for a given system from this model.
References-found: 10

