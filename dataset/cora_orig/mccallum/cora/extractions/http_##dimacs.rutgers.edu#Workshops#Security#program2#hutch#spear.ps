URL: http://dimacs.rutgers.edu/Workshops/Security/program2/hutch/spear.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Email: E-mail fhutch@cs.uct.ac.zag  
Title: SPEAR: a Security Protocol Engineering Analysis Resource  
Author: J.P. Bekmann, P. de Goede and A.C.M. Hutchison 
Address: Rondebosch 7701, South Africa  
Affiliation: Data Network Architectures Laboratory, Department of Computer Science, University of Cape Town,  
Abstract: SPEAR, the Security Protocol Engineering and Analysis Resource, is a protocol engineering tool which focuses on security protocols, with the specific aims of secure and efficient design outcomes and support for the `production' process. SPEAR offers developers of cryptographic protocols an environment in which to design, analyze and generate security protocols. SPEAR supports protocol specification via a graphical user interface in the style of message sequence charts (MSCs). Security analysis based on cryptographic logics (currently BAN) is facilitated. Production code (currently Java) can be generated once a design has been analyzed. Meta-execution of code allows performance evaluation of cryptographic protocols from within the controlled environment of SPEAR. This paper documents the rationale for, and integration of, these various factors.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Safavi-Naini A.M. Mathuria and P.R. </author> <title> Nickolas. </title> <journal> On the Automation of GNY Logic. Australian Computer Science Communications, </journal> <volume> 17(1):370379, </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: As a result formal methods have been developed to aid in the design and analysis of authentication and other security protocols. The development of logics to analyze security protocols provides one technique for ensuring the correctness of protocols <ref> [1] </ref>. Logic systems have been used to detect flaws in protocols previously accepted as correct [4, 10].
Reference: [2] <author> Ferenc Belina and Dieter Hogrefe. </author> <title> The CCITT-Specification and Description Language SDL. </title> <booktitle> In Computer Networks and ISDN Systems 16, </booktitle> <pages> pages 311341. </pages> <year> 1988/89. </year>
Reference-contexts: expressive environment without having to actually do an implementation or make use of multiple tools to analyze different facets of a protocol. 3 Selection of Formalism In selecting a formalism for representing the specification of a security protocol we primarily contemplated the use of the Specification and Description Language (SDL) <ref> [6, 2, 8] </ref>. SDL is in widespread use and has been used extensively in other projects undertaken by our research group, so this was an obvious consideration for us. SDL is a specification language used to describe communicating systems such as telecommunication protocols.
Reference: [3] <author> S.H. Brackin. </author> <title> A HOL extension of GNY for automatically analyzing cryptographic protocols. </title> <booktitle> In Proceedings of Ninth IEEE Computer Security Foundations Workshop, </booktitle> <address> Co. Kerry, Ireland, </address> <year> 1996. </year>
Reference-contexts: There are languages available that allow the formal specification of protocols and tools which have been developed in the research of cryptographic logics (e.g. NRL analyzer [18], the Interrogator [16], HOL based Cryptographic logic tool <ref> [3] </ref>). To our knowledge, however, there are no tools that allow for the easy specification of cryptographic protocols combining both the logics and the formal protocol specifications in such a way as to distil the critical issues and present the user with a higher level design overview.
Reference: [4] <author> M. Burrows, M. Abadi, and R.M. Needham. </author> <title> A Logic of Authentication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1):1836, </volume> <month> February </month> <year> 1990. </year>
Reference-contexts: marry protocol engineering and formal logical analysis in a tool which greatly simplifies the design, analysis and generation of security protocols. 2 Security Protocol Engineering and Analysis Burrows, Adabi and Needham recognize that it is very difficult to design security protocols that achieve their intended function and degree of security <ref> [4] </ref>. As a result formal methods have been developed to aid in the design and analysis of authentication and other security protocols. The development of logics to analyze security protocols provides one technique for ensuring the correctness of protocols [1]. <p> The development of logics to analyze security protocols provides one technique for ensuring the correctness of protocols [1]. Logic systems have been used to detect flaws in protocols previously accepted as correct <ref> [4, 10] </ref>. By combining aspects of a formal protocol specification and cryptographic logics SPEAR allows a user to design a security protocol in such a way that there is enough specification for the automatic generation of code that implements the protocol.
Reference: [5] <author> M Butow, M Mestern, C Schapiro, and PS Kritzinger. </author> <title> Performance modelling with the formal specification language SDL. </title> <booktitle> In Proceedings of the FORTE/PSTV'96 Conference on Formal Description Techniques, </booktitle> <address> Kaiserslautern, Germany, </address> <year> 1996. </year>
Reference-contexts: There are existing tools such as editors, correctness analyzers, simulators and code-generators for specifications given in SDL. Other members of our group have 1 Formerly the Comite Consultatif International Telegraphique et Telephonique. 2 developed a system called SPECS II (the SDL Performance Evaluation of Concurrent Systems <ref> [5, 11] </ref>) which takes SDL input and performs correctness and performance analysis of protocol input. SPECS II also performs code generation from an SDL specification, and in this respect is similar to other proprietary SDL tools such as Geode [19].
Reference: [6] <author> CCITT. </author> <title> Recommendation Z.100: Specification and Description Language SDL, Blue Book, </title> <booktitle> Vol X.1-X.5. ITU General Secretariat, </booktitle> <address> Geneva, </address> <year> 1988. </year>
Reference-contexts: expressive environment without having to actually do an implementation or make use of multiple tools to analyze different facets of a protocol. 3 Selection of Formalism In selecting a formalism for representing the specification of a security protocol we primarily contemplated the use of the Specification and Description Language (SDL) <ref> [6, 2, 8] </ref>. SDL is in widespread use and has been used extensively in other projects undertaken by our research group, so this was an obvious consideration for us. SDL is a specification language used to describe communicating systems such as telecommunication protocols.
Reference: [7] <author> M. Diaz, J.P. Ansart, P. Azema, and V. Chari. </author> <title> The Formal Description Technique Estelle. </title> <publisher> North Holland, </publisher> <year> 1989. </year>
Reference-contexts: It is an International Telecommunication Union 1 standard, and as such is widely recognized and supported. Recently the textual version of SDL (SDL/PR) has also been augmented with a graphical means of specification (SDL/GR). In this regard SDL is superior to other formal description techniques such as Estelle <ref> [14, 7] </ref> and LOTOS [12] which have only textual representations. There are existing tools such as editors, correctness analyzers, simulators and code-generators for specifications given in SDL.
Reference: [8] <author> Ove Faergemand and Anders Olsen. </author> <title> Introduction to SDL-92. </title> <booktitle> In Computer Networks and ISDN Systems 26, </booktitle> <pages> pages 11431167. </pages> <year> 1994. </year>
Reference-contexts: expressive environment without having to actually do an implementation or make use of multiple tools to analyze different facets of a protocol. 3 Selection of Formalism In selecting a formalism for representing the specification of a security protocol we primarily contemplated the use of the Specification and Description Language (SDL) <ref> [6, 2, 8] </ref>. SDL is in widespread use and has been used extensively in other projects undertaken by our research group, so this was an obvious consideration for us. SDL is a specification language used to describe communicating systems such as telecommunication protocols.
Reference: [9] <author> L. Gong. </author> <title> Lower Bounds on Messages and Rounds for Network Authentication Protocols. </title> <booktitle> Proceedings of the 1st ACM Conference on Computer and Communications Security, Fair-fax, Virginia, </booktitle> <pages> pages 176183, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: In order to do performance analysis, code is generated which contains hooks to the GUI for visual presentation of execution information (e.g. rounds and bounds <ref> [9] </ref>). This is the meta-execution code.
Reference: [10] <author> L. Gong, R. Needham, and R. Yahalom. </author> <title> Reasoning About Belief in Cryptographic Protocols. </title> <booktitle> Proceedings of the IEEE 1990 Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <pages> pages 234248, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The development of logics to analyze security protocols provides one technique for ensuring the correctness of protocols [1]. Logic systems have been used to detect flaws in protocols previously accepted as correct <ref> [4, 10] </ref>. By combining aspects of a formal protocol specification and cryptographic logics SPEAR allows a user to design a security protocol in such a way that there is enough specification for the automatic generation of code that implements the protocol.
Reference: [11] <author> C Henning, , C Vermeulen, J Zurcher, N de Villiers, C Schapiro, and PS Kritzinger. </author> <title> SDL performance evaluation of concurrent systems: A CASE tool for the development of communicating concurrent systems. </title> <booktitle> In Proceedings of Teletraffic '96, </booktitle> <address> Durban, South Africa, </address> <year> 1996. </year>
Reference-contexts: There are existing tools such as editors, correctness analyzers, simulators and code-generators for specifications given in SDL. Other members of our group have 1 Formerly the Comite Consultatif International Telegraphique et Telephonique. 2 developed a system called SPECS II (the SDL Performance Evaluation of Concurrent Systems <ref> [5, 11] </ref>) which takes SDL input and performs correctness and performance analysis of protocol input. SPECS II also performs code generation from an SDL specification, and in this respect is similar to other proprietary SDL tools such as Geode [19].
Reference: [12] <author> D. Hogrefe. Estelle, </author> <title> LOTOS and SDL. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Recently the textual version of SDL (SDL/PR) has also been augmented with a graphical means of specification (SDL/GR). In this regard SDL is superior to other formal description techniques such as Estelle [14, 7] and LOTOS <ref> [12] </ref> which have only textual representations. There are existing tools such as editors, correctness analyzers, simulators and code-generators for specifications given in SDL.
Reference: [13] <author> A. Hutchison and K. Bauknecht. </author> <title> Cryptographic Key Distribution and Authentication Protocols for Secure Group Communication. </title> <booktitle> In Proceedings of the Twelfth International Information Security Conference (IFIP/SEC '96), </booktitle> <address> Samos, Greece, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Currently messages can only be sent to single receivers, but support for multiple receivers (as envisaged in, for example, <ref> [13] </ref>) is a future goal. The menubar consists of File, Protocol, Options and Help menus. The File menu is concerned with standard file operations while the Protocol menu contains options to modify the protocol as a whole.
Reference: [14] <author> ISO/IEC ISO9074. Estelle, </author> <title> A formal Description Technique Based on an Extended State Transition Model, </title> <booktitle> 1989. </booktitle> <pages> 12 </pages>
Reference-contexts: It is an International Telecommunication Union 1 standard, and as such is widely recognized and supported. Recently the textual version of SDL (SDL/PR) has also been augmented with a graphical means of specification (SDL/GR). In this regard SDL is superior to other formal description techniques such as Estelle <ref> [14, 7] </ref> and LOTOS [12] which have only textual representations. There are existing tools such as editors, correctness analyzers, simulators and code-generators for specifications given in SDL.
Reference: [15] <author> ITU. </author> <title> ITU-TS Recommendation Z.120: Message Sequence Chart (MSC). </title> <address> ITU-TS, Geneva, </address> <year> 1996. </year>
Reference-contexts: With a view to allowing prototyping and experimentation, it was instead decided to use a protocol specification technique close to that of Message Sequence Charts (MSCs) <ref> [15] </ref>. MSCs capture the exchange of protocol messages at a higher level which we believe is more appropriate to cryptographic protocol design, where a lot of effort (and support) is required for message content construction.
Reference: [16] <author> J.K. Millen, S.C. Clark, and S.B. Freedman. </author> <title> The Interrogator: Protocol Security Analysis. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(2), </volume> <year> 1987. </year>
Reference-contexts: There are languages available that allow the formal specification of protocols and tools which have been developed in the research of cryptographic logics (e.g. NRL analyzer [18], the Interrogator <ref> [16] </ref>, HOL based Cryptographic logic tool [3]).
Reference: [17] <author> R.M. Needham and M.D. Schroeder. </author> <title> Authentication Revisited. </title> <booktitle> ACM SIGOPS Operating Systems Review, </booktitle> <address> 21(1):7, </address> <year> 1987. </year>
Reference-contexts: In addition to evaluation using 10 protocols such as the Enhanced Needham-Schroeder Protocol <ref> [17] </ref> (as shown in Figure 4), Ker-beros and X.509, we will learn from experience gained through designing our own security protocols.
Reference: [18] <author> R. Kremmerer and C. Meadows and J. Millen. </author> <title> Three Systems for Cryptographic Protocol Analysis. </title> <journal> Journal of Crytology, </journal> <volume> 7(2), </volume> <year> 1994. </year>
Reference-contexts: There are languages available that allow the formal specification of protocols and tools which have been developed in the research of cryptographic logics (e.g. NRL analyzer <ref> [18] </ref>, the Interrogator [16], HOL based Cryptographic logic tool [3]).
Reference: [19] <author> Verilog. </author> <title> GEODE Reference Manual. </title> <address> Verilog, </address> <year> 1995. </year> <month> 13 </month>
Reference-contexts: SPECS II also performs code generation from an SDL specification, and in this respect is similar to other proprietary SDL tools such as Geode <ref> [19] </ref>. After much deliberation and debate we decided against using SDL as our input formalism. Our reason for not selecting SDL as our specification formalism was largely that SDL does not allow a high-level cryptographic specification, but rather provides a low-level functional specification.
References-found: 19

