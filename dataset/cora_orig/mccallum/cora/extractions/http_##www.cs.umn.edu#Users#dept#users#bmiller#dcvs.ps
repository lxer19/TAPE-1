URL: http://www.cs.umn.edu/Users/dept/users/bmiller/dcvs.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/bmiller/
Root-URL: http://www.cs.umn.edu
Title: Distributed Concurrent Version System  
Author: Brad Miller, Curtis Olson, Dave Truckenmiller 
Date: November 29, 1993  
Note: CSci 8101 Distributed Systems  
Abstract: This paper describes an extension to the Concurrent Version System (CVS), which facilitates the use of CVS by a group of users in a seldom connected network. This system, which we call DCVS, provides a set of flexible and secur e mechanisms for maintaining a source code repository in a distributed environment, utilizing electronic mail as the underlying communications structure. A token passing architecture is implemented to maintiain version integrity, and the Pretty Good Privacy encryption system is used to ensure overall security. 
Abstract-found: 1
Intro-found: 1
Reference: [Ber] <author> B. Berliner. CVS II: </author> <title> Parallelizing software development. Report included in CVS distribution. </title>
Reference-contexts: Another example where this system would be useful occurs when one or more of the programmers is working from behind firewall protection. Our Distributed Concurrent Version System (DCVS) implements a distributed source code control system on top of a centralized source code control system called CVS. <ref> [Ber] </ref> In general, DCVS allows a group of software developers to work together on a software project using a replicated source code repository. The basics of the DCVS are as follows: Each developer stores a local copy of the repository.
Reference: [BLNS82] <author> A. D. Birrell, R. Levin, R. M. Needham, and M. D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: This script performs some maintenance on the token (a new version number and time-stamp), and passes the filename just committed to submit for replication at all the other sites. 4.3 Replication The replication of the repository files to each site is accomplished using the Grapevine algorithm. <ref> [BLNS82] </ref> Replication is divided into three main areas, an incoming replication manager, an outgoing replication manager, and a data manager. 4.3.1 Incoming Replication Manager Mail filter Incoming mail on a server is sorted by a filter program that recognizes messages meant for the DCVS system.
Reference: [Cou89] <author> W Courington. </author> <title> The network software environment, </title> <type> sun technical report. Technical Report FE197-0, </type> <institution> Sun Microsystems Inc, </institution> <month> February </month> <year> 1989. </year>
Reference-contexts: Obviously, if two people happen to edit the same file at the same time there will be a conflict. The conflict-resolution algorithm defined by CVS is similar to the "Copy-Modify-Merge" algorithm developed later by Sun Microsystems <ref> [Cou89] </ref>, and by at least one CASE tool [HM89]. This algorithm is a significant relaxation of the requirement of correct behavior in a transaction system. The only thing that is guaranteed here is that two updates won't be intermixed on the disk.
Reference: [EGR91] <author> C. A. Ellis, S. J. Gibbs, and G. L. Rein. </author> <title> Groupware some issues and experiences. </title> <journal> Communications of the ACM, </journal> <volume> 34(1) </volume> <pages> 38-58, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The areas of groupware distributed file systems, and algorithms for exclusive access to resources were the most helpful to us in designing and building the DCVS system. The issues of locking are addressed in several groupware systems, these systems are summarized in <ref> [EGR91] </ref>. In particular The notion of a tickle lock that we use in the DCVS system comes from [GSW86]. Of particular interest to us is the work being done on the Coda file system with respect to reconnecting file systems that have been operating in a disconnected mode. [Sat90].
Reference: [GSW86] <author> I. Greif, R. Seliger, and W. Weihl. </author> <title> Atomic data abstractions in a distributed collaborative editing system. </title> <booktitle> In Proceedings of the 13th Annual Symposium onPrinciples of Programming Languages, </booktitle> <pages> pages 160-172, </pages> <year> 1986. </year>
Reference-contexts: The issues of locking are addressed in several groupware systems, these systems are summarized in [EGR91]. In particular The notion of a tickle lock that we use in the DCVS system comes from <ref> [GSW86] </ref>. Of particular interest to us is the work being done on the Coda file system with respect to reconnecting file systems that have been operating in a disconnected mode. [Sat90]. <p> Therefore, as much information as possible is sent in each message, and the sender assumes that the message will arrive intact without any acknowledgement. Through the use of tickle locks <ref> [GSW86] </ref> our system ensures that no server can ever maintain permanent control over any of the files. Our system makes use of the PGP (Pretty Good Privacy) program for encrypting the data sent through mail. <p> During the commit process, the user may be required to manually resolve conflicts with changes made by the previous owner of the token. This is in keeping with the design philosophy of CVS. In practice, conflicts rarely occur. Tickle Locks Tickle locks <ref> [GSW86] </ref> are used to prevent a single server from dominating the use of a token. The rule is: a request for a token is granted, unless the token is in use. The only time that a token is declared to be "in use" is during the actual CVS commit process.
Reference: [HM89] <author> M. Honda and T. Miller. </author> <title> Software management using a case environment. </title> <booktitle> In Workshop Proceedings of the Software Management Conference, USENIX, </booktitle> <address> New Orleans, </address> <month> April </month> <year> 1989. </year>
Reference-contexts: Obviously, if two people happen to edit the same file at the same time there will be a conflict. The conflict-resolution algorithm defined by CVS is similar to the "Copy-Modify-Merge" algorithm developed later by Sun Microsystems [Cou89], and by at least one CASE tool <ref> [HM89] </ref>. This algorithm is a significant relaxation of the requirement of correct behavior in a transaction system. The only thing that is guaranteed here is that two updates won't be intermixed on the disk.
Reference: [RA81] <author> G. Ricart and A. K. Agrawala. </author> <title> An optimal algorithm for mutual exclusion in computer networks. </title> <journal> Communications of the ACM, </journal> <volume> 24(1) </volume> <pages> 9-17, </pages> <year> 1981. </year>
Reference-contexts: In essence what CVS does is very similar, in that the CVS repository can be thought of as a 'disconnected filesystem' with CVS proviing the necessary tool for reconciling differences in the files. An algorithm for exclusive access to shared resources in a distributed system is discussed in <ref> [RA81] </ref>. In this system, exclusive access to a particular resource is obtained only after permission is granted by all other participating parties.
Reference: [Sat90] <author> M. Satyanarayanan. </author> <title> Scalable, secure, and higly available distributed file access. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 9-20, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: In particular The notion of a tickle lock that we use in the DCVS system comes from [GSW86]. Of particular interest to us is the work being done on the Coda file system with respect to reconnecting file systems that have been operating in a disconnected mode. <ref> [Sat90] </ref>. In essence what CVS does is very similar, in that the CVS repository can be thought of as a 'disconnected filesystem' with CVS proviing the necessary tool for reconciling differences in the files. An algorithm for exclusive access to shared resources in a distributed system is discussed in [RA81].
Reference: [ZLFG93] <author> Philip Zimmermann, Branko Lankester, Hal Finney, and Peter Gutmann. PGP.1. </author> <title> Phil's Pretty Good Software, </title> <month> July </month> <year> 1993. </year> <month> 14 </month>
Reference-contexts: It lets you communicate securely with people you've never met, with no secure channels needed for prior exchange of keys. It's well featured and fast, with sophisticated key management, digital signatures, data compression, and good ergonomic design. <ref> [ZLFG93] </ref> Getting PGP: PGP can be obtain via anonymous ftp from `soda.berkeley.edu' in the directory `/pub/cypherpunks/pgp/'. 10 11 5.2 Example SCoNe The figure below shows the Seldomly Connected Network we used for development and testing.
References-found: 9

