URL: http://www.cs.indiana.edu/l/www/ftp/pierce/oop.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Title: Simple Type-Theoretic Foundations For Object-Oriented Programming  
Author: Benjamin C. Pierce David N. Turner 
Address: The King's Buildings, Edinburgh, EH9 3JZ, U.K.  
Affiliation: Department of Computer Science, University of Edinburgh,  
Date: 1 (1): 1-000, January 1993  
Note: J. Functional Programming  c 1993 Cambridge University Press 1  
Abstract: We develop a formal, type-theoretic account of the basic mechanisms of object-oriented programming: encapsulation, message passing, subtyping, and inheritance. By modeling object encapsulation in terms of existential types instead of the recursive records used in other recent studies, we obtain a substantial simplification both in the model of objects and in the underlying typed -calculus.
Abstract-found: 1
Intro-found: 1
Reference: <author> Abadi, M. </author> <year> 1993 </year> <month> (February). </month> <title> Baby Modula-3 and a Theory of Objects. </title> <type> Research Report 95. </type> <institution> Digital Equipment Corporation, Systems Research Center, Palo Alto, California. </institution>
Reference: <author> Bobrow, D. G., DeMichiel, L. G., Gabriel, R. P., Keene, S. E., Kiczales, G., & Moon, D. A. </author> <year> 1988. </year> <title> Common Lisp Object System Specification X3J13 Document 88-002R. </title> <journal> SIGPLAN Notices, </journal> <volume> 23. </volume>
Reference-contexts: Taking overloading and subtyping as basic, rather than encapsulation and subtyping, they develop an underlying calculus that promises to model some features | notably the multi-methods of languages such as CLOS <ref> (Bobrow et al., 1988) </ref> | that fall completely outside the scope of previous theories, including ours.
Reference: <author> Bruce, K., & Mitchell, J. </author> <year> 1992 </year> <month> (January). </month> <title> PER models of subtyping, recursive types and higher-order polymorphism. </title> <booktitle> In: Proceedings of the Nineteenth ACM Symposium on Principles of Programming Languages. </booktitle>
Reference-contexts: Inherently complex features include the implicit recursion inherent in the keyword, self, to refer to the current object, and its corresponding type..." <ref> (Bruce, 1992, abstract) </ref> While we agree that fixed points at the element level are required to model the inheritance of methods referring to self, we have argued that the complexity of recursive types is not inherent in the basic concepts of object-oriented programming. <p> A semantic model of a version of F ! extended with recursive types (and including recursively defined values, which are needed here to model self) has been given by Bruce and Mitchell <ref> (Bruce & Mitchell, 1992) </ref>. B.1 Syntax B.1.1.
Reference: <author> Bruce, K. B. </author> <year> 1991 </year> <month> (March). </month> <title> The Equivalence of Two Semantic Definitions for Inheritance in Object-Oriented Languages. </title> <booktitle> In: Proceedings of Mathematical Foundations of Programming Semantics. </booktitle>
Reference: <author> Bruce, K. B. </author> <year> 1992 </year> <month> (January). </month> <title> A Paradigmatic Object-Oriented Language: Design, Static Typing and Semantics. </title> <type> Tech. </type> <institution> rept. CS-92-01. Williams College. </institution>
Reference-contexts: Inherently complex features include the implicit recursion inherent in the keyword, self, to refer to the current object, and its corresponding type..." <ref> (Bruce, 1992, abstract) </ref> While we agree that fixed points at the element level are required to model the inheritance of methods referring to self, we have argued that the complexity of recursive types is not inherent in the basic concepts of object-oriented programming. <p> A semantic model of a version of F ! extended with recursive types (and including recursively defined values, which are needed here to model self) has been given by Bruce and Mitchell <ref> (Bruce & Mitchell, 1992) </ref>. B.1 Syntax B.1.1.
Reference: <author> Bruce, K. B. </author> <year> 1993 </year> <month> (January). </month> <title> Safe Type Checking in a Statically Typed Object-Oriented Programming Language. </title> <booktitle> In: Proceedings of the Twentieth ACM Symposium on Principles of Programming Languages. </booktitle>
Reference-contexts: This necessitates a small change in the fixed-point operator used during object creation, but our basic object model is unaffected. Bruce and van Gent <ref> (Bruce & van Gent, 1993) </ref> describe a similar extension of Bruce's TOOPL language (Bruce, 1993). Our approach can also be extended to a typed account of multiple inheritance by adding intersection types (Coppo et al., 1981) to F ! (Compagnoni & Pierce, 1993). <p> This necessitates a small change in the fixed-point operator used during object creation, but our basic object model is unaffected. Bruce and van Gent (Bruce & van Gent, 1993) describe a similar extension of Bruce's TOOPL language <ref> (Bruce, 1993) </ref>. Our approach can also be extended to a typed account of multiple inheritance by adding intersection types (Coppo et al., 1981) to F ! (Compagnoni & Pierce, 1993).
Reference: <author> Bruce, K. B., & Longo, G. </author> <year> 1990. </year> <title> A Modest Model of Records, Inheritance, and Bounded Quantification. </title> <journal> Information and Computation, </journal> <volume> 87, </volume> <pages> 196-240. </pages> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, </title> <note> 1993). An earlier version appeared in the proceedings of the IEEE Symposium on Logic in Computer Science, </note> <year> 1988. </year>
Reference: <author> Bruce, K. B., & van Gent, R. </author> <year> 1993. </year> <title> TOIL: A new Type-safe Object-oriented Imperative Language. </title> <note> Submitted for publication. </note> <author> 40 B. C. Pierce and D. N. Turner Budd, T. </author> <year> 1991. </year> <title> An Introduction to Object-Oriented Programming. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: This necessitates a small change in the fixed-point operator used during object creation, but our basic object model is unaffected. Bruce and van Gent <ref> (Bruce & van Gent, 1993) </ref> describe a similar extension of Bruce's TOOPL language (Bruce, 1993). Our approach can also be extended to a typed account of multiple inheritance by adding intersection types (Coppo et al., 1981) to F ! (Compagnoni & Pierce, 1993). <p> This necessitates a small change in the fixed-point operator used during object creation, but our basic object model is unaffected. Bruce and van Gent (Bruce & van Gent, 1993) describe a similar extension of Bruce's TOOPL language <ref> (Bruce, 1993) </ref>. Our approach can also be extended to a typed account of multiple inheritance by adding intersection types (Coppo et al., 1981) to F ! (Compagnoni & Pierce, 1993).
Reference: <author> Canning, P., Cook, W., Hill, W., Olthoff, W., & Mitchell, J. </author> <year> 1989 </year> <month> (September). </month> <title> F-Bounded Quantification for Object-Oriented Programming. </title> <booktitle> Pages 273-280 of: Fourth International Conference on Functional Programming Languages and Computer Architecture. </booktitle>
Reference: <author> Cardelli, L. </author> <year> 1986. </year> <title> Amber. Pages 21-47 of: </title> <editor> Cousineau, G., Curien, P.-L., & Robinet, B. (eds), </editor> <booktitle> Combinators and Functional Programming Languages. Springer-Verlag. Lecture Notes in Computer Science No. </booktitle> <pages> 242. </pages>
Reference-contexts: The subtype relation is defined by a collection of inference rules (listed in Appendix B) with conclusions of the form ` S T . For example, we use the usual rule (c.f. <ref> (Cardelli, 1986) </ref>) for subtyping between record types: fl 1 ; :::; l n g fk 1 ; :::; k m g for each k i = l j , ` S i T j ` fjk 1 :S 1 ; :::; k m :S m jg 2 ? (S-Record) Consider, for
Reference: <author> Cardelli, L. </author> <year> 1988a. </year> <title> A Semantics of Multiple Inheritance. </title> <journal> Information and Computation, </journal> <volume> 76, </volume> <month> 138-164. </month> <title> Preliminary version in Semantics of Data Types, </title> <editor> Kahn, MacQueen, and Plotkin, eds., </editor> <publisher> Springer-Verlag LNCS 173, </publisher> <year> 1984. </year>
Reference: <author> Cardelli, L. </author> <year> 1988b </year> <month> (January). </month> <title> Structural Subtyping and the Notion of Power Type. </title> <booktitle> Pages 70-79 of: Proceedings of the 15th ACM Symposium on Principles of Programming Languages. </booktitle>
Reference-contexts: The ideas behind this system are due to Cardelli, particularly to his 1988 paper, "Structural Subtyping and the Notion of Power Type" <ref> (Cardelli, 1988b) </ref>; the extension of the subtype relation to type operators was developed by Cardelli and Mitchell (Cardelli, 1990; Mitchell, 1990; Bruce & Mitchell, 1992). Cardelli (Cardelli, 1990) has given a more powerful treatment of operator subtyping, including both monotonic and antimonotonic subtyping in addition to pointwise subtyping.
Reference: <author> Cardelli, L. </author> <year> 1990 </year> <month> (October). </month> <title> Notes about F ! &lt;: </title> . <note> Unpublished notes. </note>
Reference-contexts: The ideas behind this system are due to Cardelli, particularly to his 1988 paper, "Structural Subtyping and the Notion of Power Type" (Cardelli, 1988b); the extension of the subtype relation to type operators was developed by Cardelli and Mitchell (Cardelli, 1990; Mitchell, 1990; Bruce & Mitchell, 1992). Cardelli <ref> (Cardelli, 1990) </ref> has given a more powerful treatment of operator subtyping, including both monotonic and antimonotonic subtyping in addition to pointwise subtyping. We omit a detailed treatment of the semantics of F ! .
Reference: <author> Cardelli, L. </author> <year> 1992a </year> <month> (January). </month> <title> Extensible Records in a Pure Calculus of Subtyping. </title> <note> Research report 81. DEC Systems Research Center. </note> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, </title> <year> 1993). </year>
Reference: <author> Cardelli, L. </author> <year> 1992b </year> <month> (January). </month> <title> Typed Foundations of Object-oriented Programming. </title> <note> Tutorial given at POPL '92. </note>
Reference: <author> Cardelli, L., & Mitchell, J. </author> <year> 1991. </year> <title> Operations on Records. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1, </volume> <pages> 3-48. </pages> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, </title> <note> 1993); available as DEC Systems Research Center Research Report #48, </note> <month> August, </month> <year> 1989, </year> <booktitle> and in the proceedings of MFPS '89, </booktitle> <publisher> Springer LNCS volume 442. </publisher>
Reference: <author> Cardelli, L., & Wegner, P. </author> <year> 1985. </year> <title> On Understanding Types, Data Abstraction, </title> <journal> and Poly morphism. Computing Surveys, </journal> <volume> 17(4). </volume>
Reference-contexts: e'-. (Note that record types use slightly different brackets.) We select elements of a record using the syntax e.x, where x is a label: # record = -x = 1, y = 2-; record = &lt;val&gt; : -|x: Int, y: Int|- # record.x; 1 : Int The notion of subtyping <ref> (Cardelli & Wegner, 1985) </ref> formalizes the observation that values of certain types may always be safely substituted for values of other types. <p> # inc : C -&gt; C, # isZero : C -&gt; Bool # |-; counter = &lt;val&gt; : Some (C) -|zero: C, inc: C-&gt;C, isZero: C-&gt;Bool|- Since we have subtyping, we allow a bound for the existentially quantified type variable C (this provides what are known as partially abstract types <ref> (Cardelli & Wegner, 1985) </ref>). Abstract types are unpacked using the open construct.
Reference: <author> Cardelli, L., Martini, S., Mitchell, J. C., & Scedrov, A. </author> <year> 1991. </year> <title> An extension of system F with subtyping. Pages 750-770 of: </title> <editor> Ito, T., & Meyer, A. R. (eds), </editor> <booktitle> Theoretical Aspects of Computer Software (Sendai, Japan). Lecture Notes in Computer Science, </booktitle> <volume> no. 526. </volume> <publisher> Springer-Verlag. </publisher>
Reference: <author> Castagna, G., Ghelli, G., & Longo, G. </author> <year> 1992. </year> <title> A calculus for overloaded functions with subtyping. </title> <booktitle> Pages 182-192 of: ACM conference on LISP and Functional Programming. </booktitle> <address> San Francisco: </address> <note> ACM Press. Also available as Rapport de Recherche LIENS-92-4, </note> <institution> Ecole Normale Superieure, Paris. </institution>
Reference: <author> Castagna, G. </author> <year> 1992 </year> <month> (May). </month> <title> Strong Typing in Object-Oriented Paradigms. </title> <institution> Rapport de Recherche LIENS-92-11. Ecole Normale Superieure, Paris. </institution>
Reference: <author> Compagnoni, A. B., & Pierce, B. C. </author> <year> 1993 </year> <month> (August). </month> <title> Multiple Inheritance via Intersection Types. </title> <type> Tech. </type> <institution> rept. ECS-LFCS-93-275. LFCS, University of Edinburgh. </institution> <note> Also available as Catholic University Nijmegen computer science technical report 93-18. Submitted for conference publication. </note>
Reference-contexts: Bruce and van Gent (Bruce & van Gent, 1993) describe a similar extension of Bruce's TOOPL language (Bruce, 1993). Our approach can also be extended to a typed account of multiple inheritance by adding intersection types (Coppo et al., 1981) to F ! <ref> (Compagnoni & Pierce, 1993) </ref>. Acknowledgements Our ideas have been sharpened by conversations with Dave Berry, Kim Bruce, Luca Cardelli, Giuseppe Castagna, William Cook, Giorgio Ghelli, Carl Gunter, Bob Harper, Giuseppe Longo, Dave MacQueen, Robin Milner, Kevin Mitchell, Randy Pollack, Nick Rothwell, Stuart Schieber, and Phil Wadler.
Reference: <author> Cook, W. </author> <year> 1989. </year> <title> A Denotational Semantics of Inheritance. </title> <type> Ph.D. thesis, </type> <institution> Brown University. </institution>
Reference: <author> Cook, W. R., Hill, W. L., & Canning, P. S. </author> <year> 1990 </year> <month> (January). </month> <title> Inheritance is not Subtyping. </title> <booktitle> Pages 125-135 of: Seventeenth Annual ACM Symposium on Principles of Programming Languages. </booktitle> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, 1993). Simple Type-Theoretic Foundations For Object-Oriented Programming 41 Coppo, </title> <editor> M., Dezani-Ciancaglini, M., & Venneri, B. </editor> <year> 1981. </year> <title> Functional Characters of Solvable Terms. </title> <journal> Zeitschrift fur Mathematische Logik und Grundlagen der Mathematik, </journal> <volume> 27, </volume> <pages> 45-58. </pages>
Reference: <author> Curien, P.-L., & Ghelli, G. </author> <year> 1992. </year> <title> Coherence of Subsumption: Minimum typing and type-checking in F . Mathematical Structures in Computer Science, </title> <booktitle> 2, </booktitle> <pages> 55-91. </pages> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, </title> <note> 1993). </note> <author> de Bruijn, N. G. </author> <year> 1972. </year> <title> Lambda-Calculus Notation with Nameless Dummies: a Tool for Automatic Formula Manipulation with Application to the Church-Rosser Theorem. </title> <journal> Indag. Math., </journal> <volume> 34(5), </volume> <pages> 381-392. </pages>
Reference: <author> Ghelli, G. </author> <year> 1991 </year> <month> (October). </month> <title> A Static Type System for Message Passing. </title> <booktitle> Pages 129-143 of: Conference on Object-Oriented Programming Systems, Languages, and Applications. Distributed as SIGPLAN Notices, </booktitle> <volume> Volume 26, Number 11, </volume> <month> November </month> <year> 1991. </year>
Reference: <author> Girard, J.-Y. </author> <year> 1972. </year> <title> Interpretation fonctionelle et elimination des coupures de l'arithme-tique d'ordre superieur. </title> <type> Ph.D. thesis, </type> <institution> Universite Paris VII. </institution>
Reference-contexts: F ! incorporates Girard's notion of type operators <ref> (Girard, 1972) </ref>, which can be thought of as forming a simply-typed -calculus at the level of types. To ensure their well-formedness, types and type operators are assigned kinds, K, which have the form * or K-&gt;K. <p> For example, Fun (T) -|a:T,b:T|- is a subtype of Fun (T) -|a:T|-, since -|a:T,b:T|- is a subtype of -|a:T|-. B Summary of F ! This appendix summarizes the syntax and typing rules of the typed -calculus F ! , an extension of Girard's system F ! <ref> (Girard, 1972) </ref> with subtyping.
Reference: <author> Goldberg, A., & Robson, D. </author> <year> 1983. </year> <title> Smalltalk-80: The Language and Its Implementation. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference: <author> Graver, J. O., & Johnson, R. E. </author> <year> 1990 </year> <month> (January). </month> <title> A Type System for Smalltalk. </title> <booktitle> Pages 125-135 of: Seventeenth Annual ACM Symposium on Principles of Programming Languages. </booktitle>
Reference: <author> Hofmann, M., & Pierce, B. </author> <year> 1994. </year> <title> A Unifying Type-Theoretic Framework for Objects. </title> <note> In: Symposium on Theoretical Aspects of Computer Science. Extended version available as "An Abstract View of Objects and Subtyping (Preliminary Report)," </note> <institution> University of Edinburgh, </institution> <type> LFCS technical report ECS-LFCS-92-226, </type> <year> 1992. </year>
Reference: <author> Jategaonkar, L. A., & Mitchell, J. C. </author> <year> 1988 </year> <month> (July). </month> <title> ML with Extended Pattern Matching and Subtypes (preliminary version). </title> <booktitle> Pages 198-211 of: Proceedings of the ACM Conference on Lisp and Functional Programming. </booktitle>
Reference: <author> Kamin, S. </author> <year> 1988 </year> <month> (January). </month> <title> Inheritance in Smalltalk-80: A denotational definition. </title> <booktitle> Pages 80-87 of: Proceedings of the ACM Symposium on Principles of Programming Languages. </booktitle>
Reference: <author> Mitchell, J., & Plotkin, G. </author> <year> 1988. </year> <title> Abstract Types Have Existential Type. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(3). </volume>
Reference: <author> Mitchell, J., Meldal, S., & Madhav, N. </author> <year> 1991 </year> <month> (January). </month> <title> An extension of Standard ML modules with subtyping and inheritance. </title> <booktitle> Pages 270-278 of: Proceedings of the Eighteenth ACM Symposium on Principles of Programming Languages. </booktitle>
Reference: <author> Mitchell, J. C. </author> <year> 1990 </year> <month> (January). </month> <title> Toward a Typed Foundation for Method Specialization and Inheritance. </title> <booktitle> Pages 109-124 of: Proceedings of the 17th ACM Symposium on Principles of Programming Languages. </booktitle> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, </title> <year> 1993). </year>
Reference: <author> Mitchell, J. C., Honsell, F., & Fisher, K. </author> <year> 1993 </year> <month> (June). </month> <title> A lambda calculus of objects and method specialization. </title> <booktitle> In: 1993 IEEE Symposium on Logic in Computer Science. </booktitle>
Reference: <author> Pierce, B. C., & Turner, D. N. </author> <year> 1993a </year> <month> (January). </month> <title> Object-Oriented Programming Without Recursive Types. </title> <booktitle> In: Proceedings of the Twentieth ACM Symposium on Principles of Programming Languages (POPL). </booktitle>
Reference-contexts: Comments from the referees helped us clarify many details and suggested some important large-scale reorganization of our presentation. An earlier version of this paper was presented at POPL '93 <ref> (Pierce & Turner, 1993a) </ref>. This work was jointly supported by Harlequin Limited, the U.K. Science and Engineering Research Council, and the ESPRIT Basic Research Actions TYPES and CONFER. 32 B. C. Pierce and D. N.
Reference: <author> Pierce, B. C., & Turner, D. N. </author> <year> 1993b </year> <month> (April). </month> <title> Statically Typed Friendly Functions via Partially Abstract Types. </title> <type> Technical Report ECS-LFCS-93-256. </type> <institution> University of Edinburgh, LFCS. </institution> <note> Also available as INRIA-Rocquencourt Rapport de Recherche No. 1899. </note>
Reference-contexts: Models of objects based on recursive types support the use of weak binary methods but not strong ones. Our model supports neither directly. However, in <ref> (Pierce & Turner, 1993b) </ref>, we propose an easy generalization of the basic object model, based on Cardelli and Wegner's partially abstract types (1985), that supports the strong form of binary methods.
Reference: <author> Reddy, U. S. </author> <year> 1988 </year> <month> (July). </month> <title> Objects as Closures: Abstract Semantics of Object Oriented Languages. </title> <booktitle> Pages 289-297 of: Proceedings of the 1988 ACM Symposium on Lisp and Functional Programming. 42 B. </booktitle> <editor> C. Pierce and D. N. Turner Remy, D. </editor> <year> 1989. </year> <title> Typechecking records and variants in a natural extension of ML. </title> <booktitle> Pages 242-249 of: Proceedings of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin. </address> <publisher> ACM. </publisher> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, </title> <year> 1993). </year>
Reference: <author> Reynolds, J. C. </author> <year> 1983. </year> <title> Types, Abstraction, and Parametric Polymorphism. Pages 513-523 of: </title> <editor> Mason, R. E. A. (ed), </editor> <booktitle> Information Processing 83. </booktitle> <address> Amsterdam: </address> <publisher> Elsevier Science Publishers B. V. (North-Holland). </publisher>
Reference: <author> Reynolds, J. </author> <year> 1985. </year> <title> Three Approaches to Type Structure. </title> <booktitle> In: Mathematical Foundations of Software Development. Springer-Verlag. Lecture Notes in Computer Science No. </booktitle> <pages> 185. </pages>
Reference: <author> Reynolds, J. C. </author> <year> 1978. </year> <title> User Defined Types and Procedural Data Structures as Complementary Approaches to Data Abstraction. Pages 309-317 of: </title> <editor> Gries, D. (ed), </editor> <title> Programming Methodology, A Collection of Articles by IFIP WG2.3. </title> <address> New York: </address> <publisher> Springer-Verlag. </publisher> <editor> Reprinted from S. A. Schuman (ed.), </editor> <booktitle> New Advances in Algorithmic Languages 1975, </booktitle> <institution> Inst. de Recherche d'Informatique et d'Automatique, Rocquencourt, </institution> <year> 1975, </year> <pages> pages 157-168. </pages> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (The MIT Press; to appear, </title> <year> 1993). </year>
Reference: <author> Robinson, E., & Tennent, R. </author> <year> 1988 </year> <month> (October). </month> <title> Bounded quantification and record-update problems. Message to Types electronic mail list. </title>
Reference: <author> Snyder, A. </author> <year> 1986. </year> <title> Encapsulation and Inheritance in Object-Oriented Programming Languages. </title> <booktitle> Proceedings OOPSLA '86, distributed as ACM SIGPLAN Notices, </booktitle> <volume> 21(11), </volume> <pages> 38-45. </pages>
Reference-contexts: = new CPointM CPointR cpointClass -x=1, color=red-; cp = &lt;val&gt; : Object CPointM which can be manipulated by sending it messages as in Section 3: # Point'getX CPointM (Point'bump CPointM cp); 2 : Int 7 Private Instance Variables In the literature on object-oriented programming, it has sometimes been argued (e.g. <ref> (Snyder, 1986) </ref>) that giving subclasses direct access to the instance variables of their superclasses is a violation of proper encapsulation discipline. In this section we develop an alternative implementation of extend and new where instance variables are hidden from subclasses.
Reference: <author> Ungar, D., & Smith, R. B. </author> <year> 1987. </year> <title> Self: The power of simplicity. </title> <booktitle> Pages 227-241 of: Proceedings of the ACM Symposium on Object-Oriented Programming: Languages, Systems, and Applications (OOPSLA). </booktitle>
Reference-contexts: C. Pierce and D. N. Turner Abadi (1993) and Mitchell, Honsell, and Fisher (1993) present related models of objects and delegation-based inheritance <ref> (Ungar & Smith, 1987) </ref>. In both of these systems, a basic -calculus-like formalism is extended with new syntactic forms designed to directly capture the operations of message-sending and object construction.
Reference: <author> Wand, M. </author> <year> 1987 </year> <month> (June). </month> <title> Complete type inference for simple objects. </title> <booktitle> In: Proceedings of the IEEE Symposium on Logic in Computer Science. </booktitle>
Reference: <author> Wand, M. </author> <year> 1988. </year> <title> Corrigendum: Complete Type Inference for Simple Objects. </title> <booktitle> In: Proceedings of the IEEE Symposium on Logic in Computer Science. </booktitle>
Reference: <author> Wand, M. </author> <year> 1989 </year> <month> (June). </month> <title> Type Inference for Record Concatenation and Multiple Inheritance. </title> <booktitle> Pages 92-97 of: Fourth Annual IEEE Symposium on Logic in Computer Science. </booktitle>
References-found: 47

