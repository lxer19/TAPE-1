URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P726.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts98.htm
Root-URL: http://www.mcs.anl.gov
Title: Mesh Component Design and Software Integration within SUMAA3d  
Author: Lori Freitag Mark Jones Paul Plassmann 
Abstract: The requirements of distributed-memory applications that use mesh management software tools are diverse, and building software that meets these requirements represents a considerable challenge. In this paper we discuss design requirements for a general, component approach for mesh management for use within the context of solving PDE applications on parallel computers. We describe recent efforts with the SUMAA3d package motivated by a component-based approach and show how these efforts have considerably improved both the flexibility and the usability of this software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Information regarding the alice project can be found at http://www.mcs.anl.gov/alice, 1998. </institution>
Reference-contexts: Such frameworks allow the application scientist to interact with a variety of software tools that are framework compliant without changing the basic interface to the application code. Active research projects which support the solution of PDEs using a framework approach include PAWS [6], POET [3], PSEware [2] and ALICE <ref> [1] </ref>. Recent efforts to coordinate this work have been initiated through the Common Components Architecture design group. A critical aspect of this effort is the appropriate definition of a component that focuses on mesh computations and interactions. <p> Our eventual goal is to support interoperability through the componentware approach championed by the Advanced Large-Scale Integrated Computational Environment (ALICE) effort at Argonne <ref> [1] </ref>. Our future work in this area will center around creating appropriate interfaces for the mesh component described in x2.
Reference: [2] <institution> PSEware home page, </institution> <month> July </month> <year> 1997. </year> <note> http://www.extreme.indiana.edu/pseware/about/index.html. </note>
Reference-contexts: Such frameworks allow the application scientist to interact with a variety of software tools that are framework compliant without changing the basic interface to the application code. Active research projects which support the solution of PDEs using a framework approach include PAWS [6], POET [3], PSEware <ref> [2] </ref> and ALICE [1]. Recent efforts to coordinate this work have been initiated through the Common Components Architecture design group. A critical aspect of this effort is the appropriate definition of a component that focuses on mesh computations and interactions.
Reference: [3] <author> Rob Armstrong and Alex Cheung. </author> <title> POET (Parallel Object-oriented Environment and Toolkit) and frameworks for scientific distributed computing. </title> <booktitle> In Proceedings of HICSS97, </booktitle> <year> 1997. </year>
Reference-contexts: Such frameworks allow the application scientist to interact with a variety of software tools that are framework compliant without changing the basic interface to the application code. Active research projects which support the solution of PDEs using a framework approach include PAWS [6], POET <ref> [3] </ref>, PSEware [2] and ALICE [1]. Recent efforts to coordinate this work have been initiated through the Common Components Architecture design group. A critical aspect of this effort is the appropriate definition of a component that focuses on mesh computations and interactions.
Reference: [4] <author> Satish Balay, Lois Curfman McInnes, William D. Gropp, and Barry F. Smith. </author> <note> PETSc 2.0 users manual. ANL Report ANL-95/11, </note> <institution> Argonne National Laboratory, Argonne, Ill., </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: In recent efforts, we have started to address the need for component-style interactions within SUMAA3d. In this article, we describe the interfaces between SUMAA3d and solver packages such as the Portable Extensible Toolkit for Scientific Computing (PETSc) <ref> [4] </ref> and between SUMAA3d and interactive visualization tools. For efficiency reasons, these efforts focus on one-to-one interactions between SUMAA3d and other software systems, but the lessons learns from these tasks form the basis for our design of a general mesh component. The interface details are given in x3. <p> The second solver package interfaced to SUMAA3d was PETSc, a flexible package for solving linear and nonlinear systems of equations with the capability of solving time-dependent problems <ref> [4] </ref>. PETSc is a much more comprehensive, general package than BlockSolve95; it does not have some of the features that were taken advantage of in the interface of SUMAA3d to BlockSolve95. The interface points between the two packages are the PETSc matrix and vector objects, Mat and Vec, respectively.
Reference: [5] <author> Mark Beall and Mark Shephard. </author> <title> A geometry-based ananlysis framework. </title> <booktitle> In Proceedings of ICES'97, </booktitle> <address> Seattle, Washington, </address> <month> March, </month> <year> 1997. </year>
Reference-contexts: These tasks range from the initial discretization of the computational domain to adaptive mesh refinement and coarsening to improvement operations such as node point smoothing and edge or face flipping. Existing tools targeted for use on distributed memory computers include Trellis <ref> [5] </ref>, DAGH [17], PME [16], SUMAA3d [9], AMR++ [18], and SAMRAI [14]. In each of these cases, however, a single style fl The work of the first author is supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S.
Reference: [6] <author> Peter Beckman, Patricia Fasel, and William Humphrey. </author> <title> Efficient coupling of parallel applications using PAWS. </title> <booktitle> In Proceedings of the High Performance Distributed Computing Conference, </booktitle> <address> Chicago, IL, </address> <month> July, </month> <year> 1998. </year>
Reference-contexts: Such frameworks allow the application scientist to interact with a variety of software tools that are framework compliant without changing the basic interface to the application code. Active research projects which support the solution of PDEs using a framework approach include PAWS <ref> [6] </ref>, POET [3], PSEware [2] and ALICE [1]. Recent efforts to coordinate this work have been initiated through the Common Components Architecture design group. A critical aspect of this effort is the appropriate definition of a component that focuses on mesh computations and interactions.
Reference: [7] <author> Marshall W. Bern and Paul E. Plassmann. </author> <title> Mesh generation. </title> <editor> In Jorg Sack and Jorge Urrutia, editors, </editor> <booktitle> Handbook of Computational Geometry. </booktitle> <address> Elsevier Scientific, </address> <note> to appear. </note>
Reference-contexts: The SUMAA3d software library is an MPI-based implementation of a collection of scalable, parallel algorithms for the fundamental tasks of unstructured mesh computation [9]. These tasks include mesh generation <ref> [7] </ref>, adaptive mesh refinement [13], mesh optimization [10], and mesh partitioning. In recent efforts, we have started to address the need for component-style interactions within SUMAA3d.
Reference: [8] <author> Tony F. Chan and Barry F. Smith. </author> <title> Multigrid and domain decomposition on unstructured grids. </title> <journal> Electronic Transactions on Numerical Analysis, </journal> <volume> 2 </volume> <pages> 171-182, </pages> <year> 1994. </year>
Reference-contexts: Both of these mesh functions can significantly reduce the amount of data to a manageable level in a controlled fashion. Mesh coarsening is typically used to construct a coarse mesh for a multilevel solver algorithm <ref> [8] </ref> where the goal is simply to construct a mesh that meets certainly quality bounds and mesh size requirements. For interactive visualization, different goals are set for the coarse mesh.
Reference: [9] <author> Lori A. Freitag, Mark T. Jones, and Paul E. Plassmann. </author> <title> The scalability of mesh improvement algorithms. </title> <editor> In Michael T. Heath, Abhiram Ranade, and Robert S. Schreiber, editors, </editor> <booktitle> Algorithms for Parallel Processing, volume 105 of The IMA Volumes in Mathematics and Its Applications, </booktitle> <pages> pages 185-212. </pages> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: These tasks range from the initial discretization of the computational domain to adaptive mesh refinement and coarsening to improvement operations such as node point smoothing and edge or face flipping. Existing tools targeted for use on distributed memory computers include Trellis [5], DAGH [17], PME [16], SUMAA3d <ref> [9] </ref>, AMR++ [18], and SAMRAI [14]. In each of these cases, however, a single style fl The work of the first author is supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38. <p> The SUMAA3d software library is an MPI-based implementation of a collection of scalable, parallel algorithms for the fundamental tasks of unstructured mesh computation <ref> [9] </ref>. These tasks include mesh generation [7], adaptive mesh refinement [13], mesh optimization [10], and mesh partitioning. In recent efforts, we have started to address the need for component-style interactions within SUMAA3d.
Reference: [10] <author> Lori A. Freitag, Mark T. Jones, and Paul E. Plassmann. </author> <title> A parallel algorithm for mesh smoothing. </title> <journal> SIAM Journal on Scientific Computing, </journal> <note> to appear. </note>
Reference-contexts: The SUMAA3d software library is an MPI-based implementation of a collection of scalable, parallel algorithms for the fundamental tasks of unstructured mesh computation [9]. These tasks include mesh generation [7], adaptive mesh refinement [13], mesh optimization <ref> [10] </ref>, and mesh partitioning. In recent efforts, we have started to address the need for component-style interactions within SUMAA3d. In this article, we describe the interfaces between SUMAA3d and solver packages such as the Portable Extensible Toolkit for Scientific Computing (PETSc) [4] and between SUMAA3d and interactive visualization tools.
Reference: [11] <author> Mark T. Jones and Paul E. Plassmann. </author> <title> Scalable iterative solution of sparse linear systems. </title> <journal> Parallel Computing, </journal> <volume> 20(5) </volume> <pages> 753-773, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This interface not only simplifies work for the user, but also enables us to more easily interface to PETSc (as discussed in the following section), ALICE, and other related projects. 3.1.1 Interaction between Solver Packages and SUMAA3d The first solver package interfaced to SUMAA3d was BlockSolve95 <ref> [11] </ref> [12], software for solving systems of linear equations arising from discretizations of PDEs on structured or unstructured grids. SUMAA3d makes extensive use of features and data structures specific to BlockSolve95 to allow for efficient matrix assembly as well as a low-overhead interface between the solver and the SUMAA3d.
Reference: [12] <author> Mark T. Jones and Paul E. Plassmann. </author> <title> BlockSolve95 users manual: Scalable library software for the parallel solution of sparse linear systems. </title> <type> ANL Report ANL-95/48, </type> <institution> Argonne National Laboratory, Argonne, Ill., </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: This interface not only simplifies work for the user, but also enables us to more easily interface to PETSc (as discussed in the following section), ALICE, and other related projects. 3.1.1 Interaction between Solver Packages and SUMAA3d The first solver package interfaced to SUMAA3d was BlockSolve95 [11] <ref> [12] </ref>, software for solving systems of linear equations arising from discretizations of PDEs on structured or unstructured grids. SUMAA3d makes extensive use of features and data structures specific to BlockSolve95 to allow for efficient matrix assembly as well as a low-overhead interface between the solver and the SUMAA3d. <p> SUMAA3d makes extensive use of features and data structures specific to BlockSolve95 to allow for efficient matrix assembly as well as a low-overhead interface between the solver and the SUMAA3d. One such feature is BlockSolve95's tolerance of a noncontiguous global numbering of unknowns <ref> [12] </ref>; this feature allows for unknowns to be assigned a permanent global number that does not change when mesh vertices are added and deleted.
Reference: [13] <author> Mark T. Jones and Paul E. Plassmann. </author> <title> Parallel algorithms for adaptive mesh refinement. </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 18(3) </volume> <pages> 686-708, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: The SUMAA3d software library is an MPI-based implementation of a collection of scalable, parallel algorithms for the fundamental tasks of unstructured mesh computation [9]. These tasks include mesh generation [7], adaptive mesh refinement <ref> [13] </ref>, mesh optimization [10], and mesh partitioning. In recent efforts, we have started to address the need for component-style interactions within SUMAA3d.
Reference: [14] <author> Scott Kohn, Xabier Garaizar, Rich Hornung, and Steve Smith. </author> <note> SAMRAI web pages, http://www.llnl.gov/CASC/SAMRAI/, 1998. </note>
Reference-contexts: Existing tools targeted for use on distributed memory computers include Trellis [5], DAGH [17], PME [16], SUMAA3d [9], AMR++ [18], and SAMRAI <ref> [14] </ref>. In each of these cases, however, a single style fl The work of the first author is supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38.
Reference: [15] <author> Gary L. Miller, Dafna Talmor, and Shang-Hua Teng. </author> <title> Optimal coarsening of unstructured meshes. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: Both techniques are computationally demanding and complex, particularly in a parallel environment. A suitable algorithm of guaranteed quality exists for mesh coarsening <ref> [15] </ref>. A task in SUMAA3d is the construction of a parallel mesh coarsening algorithm using this technique. Similarly, many strong contenders exists for the time domain compression functions.
Reference: [16] <author> Can Ozturan. </author> <title> Parallel mesh environment homepage. </title> <note> http://www.icase.edu/newresearch/des/highlite/cs4.html, 1998. </note>
Reference-contexts: These tasks range from the initial discretization of the computational domain to adaptive mesh refinement and coarsening to improvement operations such as node point smoothing and edge or face flipping. Existing tools targeted for use on distributed memory computers include Trellis [5], DAGH [17], PME <ref> [16] </ref>, SUMAA3d [9], AMR++ [18], and SAMRAI [14]. In each of these cases, however, a single style fl The work of the first author is supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38.
Reference: [17] <author> Manish Parashar and James Browne. DAGH: </author> <title> Data-management for parallel adaptive mesh-refinemnt techniques. </title> <address> http://www.caip.rutgers.edu/ parashar/DAGH, </address> <month> Sep </month> <year> 1998. </year>
Reference-contexts: These tasks range from the initial discretization of the computational domain to adaptive mesh refinement and coarsening to improvement operations such as node point smoothing and edge or face flipping. Existing tools targeted for use on distributed memory computers include Trellis [5], DAGH <ref> [17] </ref>, PME [16], SUMAA3d [9], AMR++ [18], and SAMRAI [14]. In each of these cases, however, a single style fl The work of the first author is supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S.
Reference: [18] <author> D. Quinlan. AMR++: </author> <title> A design for parallel object-oriented adaptive mesh refinement. </title> <booktitle> In Proceedings of the IMA Workshop on Structured Adaptive Mesh Refinement, </booktitle> <address> Minneapolis, MN, </address> <year> 1997. </year>
Reference-contexts: These tasks range from the initial discretization of the computational domain to adaptive mesh refinement and coarsening to improvement operations such as node point smoothing and edge or face flipping. Existing tools targeted for use on distributed memory computers include Trellis [5], DAGH [17], PME [16], SUMAA3d [9], AMR++ <ref> [18] </ref>, and SAMRAI [14]. In each of these cases, however, a single style fl The work of the first author is supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38.
Reference: [19] <author> C. Szyperski. </author> <title> Component Software: Beyond Onject-Oriented Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1998. </year>
Reference-contexts: To ensure maximum flexibility, each of the basic mesh entities should accept a user-defined, application-specific data structure. Our definition of a software component is based on the definition given in the book Component Software: Beyond Object-Oriented Programming <ref> [19] </ref>. We note that there are many definitions for a software component which vary slightly in substance and form, but for the purposes of the discussion in this paper, we use the following. Definition 2.2.
References-found: 19

