URL: http://www.cs.utah.edu/~ganesh/c-squared-pipelining/UUCS-95-011.ps.Z
Refering-URL: http://www.cs.utah.edu/~ganesh/c-squared-pipelining.html
Root-URL: 
Title: A Fast Parallel Squarer Based on Divide-and-Conquer  
Author: Jae-tack Yoo, Kent F. Smith, Ganesh Gopalakrishnan 
Date: August 4, 1995  
Address: Salt Lake City, UT. 84112  
Affiliation: Department of Computer Science MEB 3190, University of Utah  
Pubnum: UUCS-95-011  
Abstract: Fast and small squarers are needed in many applications such as image compression. A new family of high performance parallel squarers based on the divide-and-conquer method is reported. Our main result was realizing the basis cases of the divide-and-conquer recursion by using optimized n-bit primitive squarers, where n is in the range of 2 to 6. This method reduced the gate count and provided shorter critical paths. A chip implementing an 8-bit squarer was designed, fabricated and successfully tested, resulting in 24 MOPS using a 2- CMOS fabrication technology. This squarer had two additional features: increased number of squaring operations per unit circuit area, and the potential for reduced power consumption per squaring operation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Jain, A. Madisetti, and R. L. Baker, </author> <title> "An integrated circuit design for pruned tree-search vector quantization encoding with an off-chip controller," </title> <journal> IEEE Trans. on Circuits and Systems for Video Technology, </journal> <volume> Vol. 2, No. 2, </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The need to square numbers arises in a large number of image processing algorithms. For example, in many subband vector quantization systems (e.g. <ref> [1] </ref>), the L 2 -norm calculations in the vector quantizer can involve the order of 288 million squaring operations per second (MOPS) to process HDTV image data. Usually these L 2 -norm calculations need to be done only on short words: e.g. 8-, 12-, or 16-bits wide.
Reference: [2] <author> L. Dadda, </author> <title> "Squares for binary numbers in serial from," </title> <booktitle> IEEE 11th Sym. on Computer Arithmetic, </booktitle> <year> 1985. </year>
Reference-contexts: Such short word sizes may allow parallel implementations of squarers with O (n 2 ) area requirements, where n represents the number of bits of an input data. Dadda designed bit-serial parallel squarers <ref> [2] </ref> based on his conceptually parallel scheme shown in Figure 1. Figure 1 (b) illustrates that the required number of bit-products are only half when reduced from a CSA array shown in Figure 1 (a). <p> But there is a significant difference in the constant factor depending on its implementation. Figure 6 shows a design of Dadda's <ref> [2] </ref> (a bit-serial version) with 8-bit positive integer inputs (the same input-size used in our parallel squarer design in Figure 4).
Reference: [3] <author> H. Sam and A. Gupta, </author> <title> "A generalized multibit recoding of two's complement binary numbers and its proof with application in multiplier implementations," </title> <journal> IEEE Trans. on Computer, </journal> <volume> Vol. 39, No. 8, </volume> <month> August </month> <year> 1990. </year>
Reference-contexts: In contrast to Dadda's design, the recent trend in the design of this class of circuits closely related to squarers - namely multipliers is to move away from bit-serial operations, and instead use parallel schemes such as mutibit recording to improve computation speed. Sam et al. <ref> [3] </ref> showed that recoding over a larger number of bits resulted in better computation speed, and suggested that 5-bit recoding is desirable since it strikes a good compromise between computation speed and circuit complexity.
Reference: [4] <author> A. Habibi and P. A. Wintz, </author> <title> "Fast multipliers," </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-19, </volume> <month> February </month> <year> 1970. </year>
Reference-contexts: Following section discusses implementation issues. 3 Experiments and Additional Features previous section. This design employs a carry save addition for the first stage and a ripple-carry addition for the second stage (similar to that done in <ref> [4] </ref> which favored the addition with short input words for their fast multipliers). This achieves one squaring operation per clock cycle. The 4 design was implemented in 2- CMOS using a design system known as ACME [5].
Reference: [5] <author> T. M. Carter, K. F. Smith, S. R. Jacobs, and R. M. Neff, </author> <title> "Cell matrix methodologies for integrated circuit design," Integration, </title> <journal> The VLSI Journal, </journal> <month> July, </month> <year> 1989. </year>
Reference-contexts: This achieves one squaring operation per clock cycle. The 4 design was implemented in 2- CMOS using a design system known as ACME <ref> [5] </ref>. Figure 4 also shows the regularity (higher replication factor) in primitive squarer placement as shown in the top row of bit-products. This leads us to believe that all members of the divide-and-conquer family of squarers will have regular layouts.
Reference: [6] <author> G. Tiwary, </author> <title> "Below the half-micrometer mark," </title> <journal> IEEE Spectrum, </journal> <month> November, </month> <year> 1994 </year>
Reference-contexts: In addition to this, the use of a smaller number of clock cycles per operation has become important with the move into subhalf-micrometer fabrication <ref> [6] </ref> and higher clock speed exposing clock skew problems. Power consumption per squaring operation can be approximated by the number of transitions per operation based on the transition density [7].
Reference: [7] <author> F. Najm, </author> <title> "Transition density, a stochastic measure of activities in digital circuits," </title> <booktitle> DAC, </booktitle> <year> 1991 </year>
Reference-contexts: Power consumption per squaring operation can be approximated by the number of transitions per operation based on the transition density <ref> [7] </ref>. Assuming that the number of transitions due to arithmetic calculations are the same for both versions, the trade-offs between the two versions are additional transitions caused by increased latching (for the bit-serial version) versus extra transitions due to glitches occurring in the CSA array (for the parallel version).
Reference: [8] <author> C. S. Wallace, </author> <title> "A suggestion for a fast multiplier," </title> <journal> IEEE Trans. Electron. Comput., </journal> <month> Feb. </month> <year> 1964. </year> <month> 7 </month>
Reference-contexts: But the parallel one will generate glitches during the simultaneous firing of CSA adder activities at the first stage. Fortunately, the parallel one has five rows of partial products, resulting in three serial adder rows. When we use a tree topology, e.g. Wallace tree <ref> [8] </ref>, the logic depth of adders will be as low as two, which will result in extremely low number of glitches per squaring operation.
References-found: 8

