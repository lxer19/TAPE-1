URL: ftp://das-ftp.harvard.edu/techreports/tr-34-94.ps.gz
Refering-URL: http://www.eecs.harvard.edu/vino/web/push.cache/
Root-URL: 
Title: VINO: The 1994 Fall Harvest  
Author: Yasuhiro Endo James Gwertzman Margo Seltzer Christopher Small Keith A. Smith and Diane Tang 
Address: Cambridge, Massachusetts  
Affiliation: Center for Research in Computing Technology Harvard University  
Date: December 1994  
Pubnum: TR-34-94  
Abstract-found: 0
Intro-found: 1
Reference: [AT&T] <author> AT&T, </author> <title> "System V Interface Definition, </title> <booktitle> Third Edition," </booktitle> <pages> Volumes 1-3, </pages> <year> 1989. </year>
Reference-contexts: Inappropriate policy is only one reason that applications reimplement kernel functionality. Kernel functionality is often unavailable to applications. For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications <ref> [AT&T] </ref>. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use [CHANG90, CHUT92, KAZAR90, VXFS]. Today's applications are unable to realize the potential of today's hardware [OUST90].
Reference: [ACET86] <author> Acetta, M., Baron, R., Bolosky, W., Golub, D., Rashid, R., Tevanian, A., and Young, M., </author> <title> "Mach: A New Kernel Foundation for UNIX Development", </title> <booktitle> Proceedings of the Summer Usenix Conference (July 1986). </booktitle>
Reference-contexts: Each piece of grafted code runs in the context of a lightweight transaction that keeps track of its allocated resources. If the process is aborted, the corresponding transaction is aborted, and the system is returned to a consistent state. Unlike the external servers of Mach <ref> [ACET86] </ref>, grafting allows small, incremental changes in kernel functionality. If the page eviction strategy of the system is inappropriate, it can be replaced without writing a new external pager [MCNAM90]. 2 4 Resource Managers and Names A name service maps a name to a (resource manager, storage-id) pair. <p> The former behavior is not under the control of an application (in order to ensure fairness of allocation); the management of the mappings is delegated to each application. 7 Related Work Many systems have addressed the need for flexibility. Mach <ref> [ACET86] </ref> allowed the addition of external servers, factoring the kernel into replaceable servers. Chorus [ROZI88] worked to overcome the performance problems of external servers by allowing them to be developed outside the kernel, and then moved into the kernel as a build option.
Reference: [ANDE91] <author> Anderson, T., Bershad, B., Lazowska, E., Levy, H., </author> <title> "Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism," </title> <booktitle> Proceedings of the Thirteenth ACM Symposium on Operating System Principles, </booktitle> <address> Monterey CA, </address> <month> October </month> <year> 1991, </year> <pages> 95-109. </pages>
Reference-contexts: They have also addressed the issue of safety through the use of compilation techniques. Object-oriented toolkits are composed of a set of reusable components (e.g. NextStep [NEXT93]) that can be combined and specialized as needed. Work has been done to address policy control on a topic-by-topic basis. Scheduler Activations <ref> [ANDE91] </ref> are a method for sharing scheduling policy between kernel and user; Cao's work on application-controlled file caching [CAO94] addresses buffer cache management. The Berke-ley Fast Filesystem [MCKU84] allows file layout to be controlled by the setting of the rotdelay, maxcontig, and maxbpg parameters.
Reference: [BERS89] <author> Bershad, B., Anderson, T., Lazowska, E., Levy, H., </author> <title> "Lightweight Remote Procedure Call", </title> <booktitle> Proceedings of the Twelfth ACM Symposium on Operating System Principles, </booktitle> <year> (1989). </year>
Reference-contexts: These resource-specific implementations are modules that are dynamically installed in the kernel. We install this code in the kernel because the cost of frequent cross-domain calls is too high, especially on performance-critical paths such as when policy decisions are made <ref> [BERS89] </ref>. Unlike other extensible systems, we have not undertaken the task of defining a new typesafe language [BERS94, ENGL94, LISK93].
Reference: [BERS94] <author> Bershad, D., Chambers, C., Eggers, S., Maeda, C., McNamee, D., Pardyak, P., Savage, S., Gun Sirer, E., </author> <title> "SPIN An Extensible Microkernel for Application-specific Operating System Services," </title> <type> Technical Report 94-03-03, </type> <institution> Department of Computer Science and Engineering, University of Wash-ington, </institution> <address> Seattle (1994). </address>
Reference-contexts: We install this code in the kernel because the cost of frequent cross-domain calls is too high, especially on performance-critical paths such as when policy decisions are made [BERS89]. Unlike other extensible systems, we have not undertaken the task of defining a new typesafe language <ref> [BERS94, ENGL94, LISK93] </ref>. It is outside the scope of our project to specify, implement,and support a new language, and widespread acceptance of new languages in the community, irrespective of their elegance and power, is very low. Extensions to VINO are written in C or C++. <p> Chorus [ROZI88] worked to overcome the performance problems of external servers by allowing them to be developed outside the kernel, and then moved into the kernel as a build option. Newer systems such as Aegis [ENGL94] and SPIN <ref> [BERS94] </ref> address the granularity problems of the original microkernel architecture by allowing small, incremental changes to be made by loading user code into the server. They have also addressed the issue of safety through the use of compilation techniques. Object-oriented toolkits are composed of a set of reusable components (e.g.
Reference: [BILI94] <author> Biliris, S., Dar, S., Gehani, N., Jagadish, H. V., and Ramamritham, K., </author> <title> "ASSET: A System for Supporting Extended Transactions", </title> <booktitle> Proceedings of SIGMOD 94, </booktitle> <address> Minneapolis, MN (May 1994). </address>
Reference-contexts: The mixing and matching of logging and locking components enables VINO to support arbitrarily complex transaction protocols. Because the implementation of the transaction manager can be incrementally modified, different transaction semantics (e.g. as outlined in <ref> [BILI94] </ref>) can be implemented as needed by applications. 6.4 Memory Management The VINO memory management system is based on the ideas of the Mach VM architecture, although its implementation differs considerably. A MemoryResource is a collection of pages. As in Mach, it is backed by a file mapped into memory.
Reference: [CAO94] <author> Cao, P., Felten, E., and Li, K., </author> <title> "Application Controlled File Caching Policies", </title> <booktitle> Proceedings of the 5 1994 Winter Usenix Conference, </booktitle> <pages> pp. </pages> <month> 171-182 (June </month> <year> 1994). </year>
Reference-contexts: By default, ChooseVictim selects the least recently used page, although an application can replace the implementation of ChooseVictim with the algorithm of its choice. Note that, as in Cao's work <ref> [CAO94] </ref>, VINO retains 4 control over the number of mappings allocated to an address space, but not the mappings themselves. <p> NextStep [NEXT93]) that can be combined and specialized as needed. Work has been done to address policy control on a topic-by-topic basis. Scheduler Activations [ANDE91] are a method for sharing scheduling policy between kernel and user; Cao's work on application-controlled file caching <ref> [CAO94] </ref> addresses buffer cache management. The Berke-ley Fast Filesystem [MCKU84] allows file layout to be controlled by the setting of the rotdelay, maxcontig, and maxbpg parameters. System V Release 4 provides for multiple classes of scheduling algorithms, corresponding to time-sharing scheduling, real-time scheduling, and kernel process scheduling.
Reference: [CHANG90] <author> Chang, A., Mergen, M., Rader, R., Roberts, J., Porter, S., </author> <title> "Evolution of storage facilities in AIX Version 3 for RISC System/6000 processors," </title> <journal> IBM Journal of Research and Development 34, </journal> <volume> 1, </volume> <month> January </month> <year> 1990. </year>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].
Reference: [CHUT92] <author> Chutani, S., Anderson, O., Kazar, M., Lev erett, B., Mason, W., Sidebotham, R., </author> <title> "The Episode File System," </title> <booktitle> Proceedings of the 1992 Winter Usenix Conference, </booktitle> <address> San Francisco, CA, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].
Reference: [ENGL94] <author> Engler, D., M. F. Kaashoek, and J. O'Toole, </author> <title> "The Operating System Kernel as a Secure Programmable Machine", </title> <booktitle> Proceedings of the Sixth SIGOPS European Workshop (September 1994). </booktitle>
Reference-contexts: We install this code in the kernel because the cost of frequent cross-domain calls is too high, especially on performance-critical paths such as when policy decisions are made [BERS89]. Unlike other extensible systems, we have not undertaken the task of defining a new typesafe language <ref> [BERS94, ENGL94, LISK93] </ref>. It is outside the scope of our project to specify, implement,and support a new language, and widespread acceptance of new languages in the community, irrespective of their elegance and power, is very low. Extensions to VINO are written in C or C++. <p> Mach [ACET86] allowed the addition of external servers, factoring the kernel into replaceable servers. Chorus [ROZI88] worked to overcome the performance problems of external servers by allowing them to be developed outside the kernel, and then moved into the kernel as a build option. Newer systems such as Aegis <ref> [ENGL94] </ref> and SPIN [BERS94] address the granularity problems of the original microkernel architecture by allowing small, incremental changes to be made by loading user code into the server. They have also addressed the issue of safety through the use of compilation techniques.
Reference: [GRAY76] <author> Gray, J., Lorie, R., Putzolu, F., and Traiger, I., </author> <title> "Granularity of Locks and Degrees of Consistency in a Large Shared Database," in Modeling in Data Base Management Systems, </title> <publisher> Elsevier North Holland, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 365-394 </month> <year> (1976). </year>
Reference-contexts: This interface is available both to the kernel and to applications. As the resources being locked become more complex, so does the locking paradigm. The VINO lock manager supports general-purpose hierarchical locking <ref> [GRAY76] </ref>. For example, the file system typically requires locking on block, file, directory and file system levels. In most kernels, this hierarchy is enforced by convention. In VINO, it is enforced by design. We call the levels at which locking may be needed the containment hierarchy.
Reference: [IEEE93] <author> IEEE, </author> <title> "Portable Operating System Interface (POSIX), Part 1: System Application Program Interface (API) [C Language]", </title> <journal> IEEE Standard 1003.1b, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: The architectural outline is complete, and we have begun prototyping the resource types, grafting technology, and compilation tools at the user level. The inner kernel (boot code and device support) is based on 4.4BSD. As part of our development, we plan to implement a POSIX compatibility <ref> [IEEE93] </ref> library on top of VINO. We are also looking into supporting BSD binaries directly, but have not committed to it.
Reference: [KAZAR90] <author> Kazar, M., Leverett, B., Anderson, O., Vasilis, A., Bottos, B., Chutani, S., Everhart, C., Mason, A., Tu, S., Zayas, E., </author> <title> "DECorum File System Architectural Overview," </title> <booktitle> Proceedings of the 1990 Summer Usenix, </booktitle> <address> Anaheim, CA, </address> <month> June </month> <year> 1990, </year> <pages> 151-164. </pages>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].
Reference: [LISK93] <author> Liskov, B., Day, M., and Shrira, M., </author> <title> "Dis tributed Object Management in Thor", in Distributed Object Management, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California (1993). </address>
Reference-contexts: We install this code in the kernel because the cost of frequent cross-domain calls is too high, especially on performance-critical paths such as when policy decisions are made [BERS89]. Unlike other extensible systems, we have not undertaken the task of defining a new typesafe language <ref> [BERS94, ENGL94, LISK93] </ref>. It is outside the scope of our project to specify, implement,and support a new language, and widespread acceptance of new languages in the community, irrespective of their elegance and power, is very low. Extensions to VINO are written in C or C++.
Reference: [MCNAM90] <author> McNamee, D., and Armstrong, K., </author> <title> "Ex tending the Mach External Pager Interface to Accommodate User-Level Page Replacement Policies," </title> <booktitle> Proceedings of the 1990 Usenix Mach Workshop, </booktitle> <address> Burlington, VT (1990). </address>
Reference-contexts: Unlike the external servers of Mach [ACET86], grafting allows small, incremental changes in kernel functionality. If the page eviction strategy of the system is inappropriate, it can be replaced without writing a new external pager <ref> [MCNAM90] </ref>. 2 4 Resource Managers and Names A name service maps a name to a (resource manager, storage-id) pair. The resource manager can then be asked to map the storage-id to a file resource. A file resource implements the expected read, write, and seek interface.
Reference: [MCKU84] <author> McKusick, M., Joy, W., Le*er, S., Fabry, R., </author> <title> "A Fast File System for UNIX," </title> <journal> Transactions on Computer Systems, v. </journal> <volume> 2 n. 3, </volume> <pages> pp. </pages> <month> 181-197 (August </month> <year> 1984). </year> <note> [NEXT93] "NextStep 3.0 Users Manual", Next Computer (1993). </note>
Reference-contexts: A manager provides operations to create and delete entries, and control access to its stored data. It also implements the management of the underlying storage (read and write operations) for its files. Subtypes of manager include one implementing an FFS-style <ref> [MCKU84] </ref> file system, a journaling file system, an NFS file system, and a memory-based file system. Defining another subtype of manager (e.g. one that handles FTP requests) is straightforward. <p> Work has been done to address policy control on a topic-by-topic basis. Scheduler Activations [ANDE91] are a method for sharing scheduling policy between kernel and user; Cao's work on application-controlled file caching [CAO94] addresses buffer cache management. The Berke-ley Fast Filesystem <ref> [MCKU84] </ref> allows file layout to be controlled by the setting of the rotdelay, maxcontig, and maxbpg parameters. System V Release 4 provides for multiple classes of scheduling algorithms, corresponding to time-sharing scheduling, real-time scheduling, and kernel process scheduling.
Reference: [OLEA92] <author> O'Leary, K., Wood, M., </author> <title> Advanced System Ad ministration, </title> <publisher> UNIX Press, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1992, </year> <note> Chapter 8. </note>
Reference-contexts: It is not possible to add new policies without completely reconfiguring and relinking the operating system, and then only if the desired scheduling algorithm fits SVR4's (limited) model of how a scheduler should behave <ref> [OLEA92] </ref>. 8 Status We are targeting the x86 and HP-PA architectures as our initial platforms. The architectural outline is complete, and we have begun prototyping the resource types, grafting technology, and compilation tools at the user level. The inner kernel (boot code and device support) is based on 4.4BSD.
Reference: [OUST90] <author> Ousterhout, J., </author> <title> "Why Aren't Operating Sys tems Getting Faster as Fast as Hardware?" Proceedings of the 1990 Summer Usenix Technical Conference, </title> <address> Anaheim, CA, </address> <month> June </month> <year> 1990, </year> <pages> 247-256. </pages>
Reference-contexts: Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use [CHANG90, CHUT92, KAZAR90, VXFS]. Today's applications are unable to realize the potential of today's hardware <ref> [OUST90] </ref>. Database management systems are the classic example of competition between applications and the operating systems [STON81]. However, they are only one example; real-time systems, high-speed networking applications, distributed applications, and embedded systems all face similar problems.
Reference: [PRES90] <author> Presotto, D., Pike, R., Trickey, H., and Thompson, K., </author> <title> "Plan 9, A Distributed System", </title> <booktitle> Proceedings of the Spring 1991 EurOpen Conference (May 1991). </booktitle>
Reference-contexts: The second is a "regular" file, stored in a local filesystem. The third, when read, sends a query to the calendar database, and return the contents of the reader's to-do list. This facility is similar to one offered by Plan 9 <ref> [PRES90] </ref>, although because VINO separates name management from storage management, it gains the flexibility of allowing services to be located in the namespace where it makes most sense to the user.
Reference: [RABIN81] <author> Rabin, M., </author> <title> "Fingerprinting by Random Poly nomials", </title> <institution> Harvard University Center for Research in Computing Technology TR-15-81 (1981). </institution>
Reference-contexts: Our plan is to a trusted compiler that generates code with either bounds checking or sandboxing to ensure code safety. Code generated by our compiler will be marked with a fingerprint <ref> [RABIN81] </ref> (a type of digital signature). A fingerprint is computationally infeasible to forge; it ensures (with a very high degree of certainty) that all code installed in the kernel comes from our trusted compiler.
Reference: [ROZI88] <author> Rozier, M., Abbrossimov, V., Armand, F., Boule, I., Giend, M., Guillemont, M., Herrmann, F., Leonard, P., Langlois, S., Neuhauser, W., </author> <title> "The Chorus Distributed Operating System," </title> <journal> Computing Systems v. </journal> <volume> 1, </volume> <editor> n. </editor> <month> 4 </month> <year> (1988). </year>
Reference-contexts: Mach [ACET86] allowed the addition of external servers, factoring the kernel into replaceable servers. Chorus <ref> [ROZI88] </ref> worked to overcome the performance problems of external servers by allowing them to be developed outside the kernel, and then moved into the kernel as a build option.
Reference: [SELT92] <author> Seltzer, M., Olson, M., "LIBTP: </author> <title> Portable, Modular Transactions for UNIX", </title> <booktitle> Proceedings 1992 Winter Usenix Conference, </booktitle> <address> San Francisco, CA, </address> <pages> pp. </pages> <month> 9-26 (January </month> <year> 1992). </year>
Reference-contexts: For example, the semaphores offered to applications by System V incur a large number of system calls and context switches while simple spin-locks are virtually free <ref> [SELT92] </ref>. VINO provides a kernel lock manager, accessible for application use. In its simplest form, the lock manager provides spin-lock synchronization on memory locations, requiring kernel intervention only in the case of a contested lock. This interface is available both to the kernel and to applications.
Reference: [STON81] <author> Stonebraker, M., </author> <title> "Operating System Support for Database Management," </title> <journal> Communications of the ACM, </journal> <volume> 7, </volume> <month> July </month> <year> 1981, </year> <pages> 412-418. </pages>
Reference-contexts: Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems <ref> [STON81] </ref>. However, they are only one example; real-time systems, high-speed networking applications, distributed applications, and embedded systems all face similar problems.
Reference: [VXFS] <author> Unix System Laboratories, </author> <title> "The vxfs File System Type," from Advanced System Administration for UNIX SVR4.2, </title> <year> 1992. </year>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].

Reference: [1] <author> T. Berners-Lee, R. Cailliau, J-F. Groff, and B. Poller mann. </author> <title> World-wide web: The information universe. </title> <journal> Electronic Networking Research, Applications and Policy, </journal> <volume> 2(1) </volume> <pages> 52-58, </pages> <year> 1992. </year>
Reference: [2] <author> Matthew A. </author> <title> Blaze. Caching in large-scale distributed file systems. </title> <type> Technical Report TR-397-92, </type> <institution> Princeton University, </institution> <month> January </month> <year> 1993. </year>
Reference: [3] <author> C. Mic Bowman, Peter B. Danzig, Darren R. Hardy, Udi Manber, and Mich ael F. Schwartz. Harvest: </author> <title> A scalable, customizable discovery and access system. </title> <type> Technical Report CU-CS-732-94, </type> <institution> University of Col-orado, Boulder, </institution> <year> 1994. </year>
Reference: [4] <author> Vincent Cate. </author> <title> Alex A global filesystem. </title> <booktitle> In USENIX File Systems Workshop Proceedings, </booktitle> <pages> pages 1-12, </pages> <address> Ann Arbor, MI, May 21 - 22 1992. </address> <publisher> USENIX. </publisher>
Reference: [5] <author> Alan Emtage and Peter Deutsch. </author> <title> Archie an electronic directory service for the internet. </title> <booktitle> In Proceedings of the USENIX Winter Conference. USENIX, </booktitle> <month> January </month> <year> 1992. </year>
Reference: [6] <author> Ari Luotonen and Kevin Altis. </author> <title> World-wide web proxies. </title> <booktitle> In Computer Networks and ISDN systems. First International Conference on the World-Wide Web, </booktitle> <publisher> Elsevier Science BV, </publisher> <year> 1994. </year> <note> available from 'http://www.cern.ch/ PapersWWW94/ luotonen.ps'. </note>
Reference: [7] <author> Mosaic-x@ncsa.uiuc.edu. </author> <title> Using proxy gateways. World-Wide Web. </title> <note> available from 'http://www.ncsa.uiuc.edu/ SDG/Software/ Mosaic/ Docs/ proxy-gateways.html'. </note>
Reference: [8] <author> John K. Ousterhout. </author> <title> Tcl: An embeddable com mand language. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 133-146, </pages> <address> Washington, D.C., </address> <month> January 22-26 </month> <year> 1990. </year> <booktitle> USENIX. </booktitle>

Reference: [ACET86] <author> Acetta, M., Baron, R., Bolosky, W., Golub, D., Rashid, R., Tevanian, A., and Young, M., </author> <title> "Mach: A New Kernel Foundation for UNIX Development", </title> <booktitle> Proceedings of the Summer Usenix Conference (July 1986). </booktitle>
Reference-contexts: Each piece of grafted code runs in the context of a lightweight transaction that keeps track of its allocated resources. If the process is aborted, the corresponding transaction is aborted, and the system is returned to a consistent state. Unlike the external servers of Mach <ref> [ACET86] </ref>, grafting allows small, incremental changes in kernel functionality. If the page eviction strategy of the system is inappropriate, it can be replaced without writing a new external pager [MCNAM90]. 2 4 Resource Managers and Names A name service maps a name to a (resource manager, storage-id) pair. <p> The former behavior is not under the control of an application (in order to ensure fairness of allocation); the management of the mappings is delegated to each application. 7 Related Work Many systems have addressed the need for flexibility. Mach <ref> [ACET86] </ref> allowed the addition of external servers, factoring the kernel into replaceable servers. Chorus [ROZI88] worked to overcome the performance problems of external servers by allowing them to be developed outside the kernel, and then moved into the kernel as a build option.
Reference: [ANDE92] <author> Anderson, T., </author> <title> "The Case for Application Specific Operating Systems", </title> <booktitle> Proceedings of the 3 Third Workshop on Workstation Operating Systems, </booktitle> <year> 1992. </year>
Reference: [AT&T] <author> AT&T, </author> <title> "System V Interface Definition, </title> <booktitle> Third Edition," </booktitle> <pages> Volumes 1-3, </pages> <year> 1989. </year>
Reference-contexts: Inappropriate policy is only one reason that applications reimplement kernel functionality. Kernel functionality is often unavailable to applications. For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications <ref> [AT&T] </ref>. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use [CHANG90, CHUT92, KAZAR90, VXFS]. Today's applications are unable to realize the potential of today's hardware [OUST90].
Reference: [BERS94] <author> Bershad, D., Chambers, C., Eggers, S., Maeda, C., McNamee, D., Pardyak, P., Savage, S., Gun Sirer, E., </author> <title> "SPIN An Extensible Microkernel for Application-specific Operating System Services," </title> <type> Technical Report 94-03-03, </type> <institution> Department of Computer Science and Engineering, University of Wash-ington, </institution> <address> Seattle (1994). </address>
Reference-contexts: We install this code in the kernel because the cost of frequent cross-domain calls is too high, especially on performance-critical paths such as when policy decisions are made [BERS89]. Unlike other extensible systems, we have not undertaken the task of defining a new typesafe language <ref> [BERS94, ENGL94, LISK93] </ref>. It is outside the scope of our project to specify, implement,and support a new language, and widespread acceptance of new languages in the community, irrespective of their elegance and power, is very low. Extensions to VINO are written in C or C++. <p> Chorus [ROZI88] worked to overcome the performance problems of external servers by allowing them to be developed outside the kernel, and then moved into the kernel as a build option. Newer systems such as Aegis [ENGL94] and SPIN <ref> [BERS94] </ref> address the granularity problems of the original microkernel architecture by allowing small, incremental changes to be made by loading user code into the server. They have also addressed the issue of safety through the use of compilation techniques. Object-oriented toolkits are composed of a set of reusable components (e.g.
Reference: [BILI94] <author> Biliris, S., Dar, S., Gehani, N., Jagadish, H. V., and Ramamritham, K., </author> <title> "ASSET: A System for Supporting Extended Transactions", </title> <booktitle> Proceedings of SIGMOD 94, </booktitle> <address> Minneapolis, MN (May 1994). </address>
Reference-contexts: The mixing and matching of logging and locking components enables VINO to support arbitrarily complex transaction protocols. Because the implementation of the transaction manager can be incrementally modified, different transaction semantics (e.g. as outlined in <ref> [BILI94] </ref>) can be implemented as needed by applications. 6.4 Memory Management The VINO memory management system is based on the ideas of the Mach VM architecture, although its implementation differs considerably. A MemoryResource is a collection of pages. As in Mach, it is backed by a file mapped into memory.
Reference: [CHANG90] <author> Chang, A., Mergen, M., Rader, R., Roberts, J., Porter, S., </author> <title> "Evolution of storage facilities in AIX Version 3 for RISC System/6000 processors," </title> <journal> IBM Journal of Research and Development 34, </journal> <volume> 1, </volume> <month> January </month> <year> 1990. </year>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].
Reference: [CHUT92] <author> Chutani, S., Anderson, O., Kazar, M., Lev erett, B., Mason, W., Sidebotham, R., </author> <title> "The Episode File System," </title> <booktitle> Proceedings of the 1992 Winter Usenix Conference, </booktitle> <address> San Francisco, CA, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].
Reference: [ENGL94] <author> Engler, D., M. F. Kaashoek, and J. O'Toole, </author> <title> "The Operating System Kernel as a Secure Programmable Machine", </title> <booktitle> Proceedings of the Sixth SIGOPS European Workshop (September 1994). </booktitle>
Reference-contexts: We install this code in the kernel because the cost of frequent cross-domain calls is too high, especially on performance-critical paths such as when policy decisions are made [BERS89]. Unlike other extensible systems, we have not undertaken the task of defining a new typesafe language <ref> [BERS94, ENGL94, LISK93] </ref>. It is outside the scope of our project to specify, implement,and support a new language, and widespread acceptance of new languages in the community, irrespective of their elegance and power, is very low. Extensions to VINO are written in C or C++. <p> Mach [ACET86] allowed the addition of external servers, factoring the kernel into replaceable servers. Chorus [ROZI88] worked to overcome the performance problems of external servers by allowing them to be developed outside the kernel, and then moved into the kernel as a build option. Newer systems such as Aegis <ref> [ENGL94] </ref> and SPIN [BERS94] address the granularity problems of the original microkernel architecture by allowing small, incremental changes to be made by loading user code into the server. They have also addressed the issue of safety through the use of compilation techniques.
Reference: [GRAY76] <author> Gray, J., Lorie, R., Putzolu, F., and Traiger, I., </author> <title> "Granularity of Locks and Degrees of Consistency in a Large Shared Database," in Modeling in Data Base Management Systems, </title> <publisher> Elsevier North Holland, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 365-394 </month> <year> (1976). </year>
Reference-contexts: This interface is available both to the kernel and to applications. As the resources being locked become more complex, so does the locking paradigm. The VINO lock manager supports general-purpose hierarchical locking <ref> [GRAY76] </ref>. For example, the file system typically requires locking on block, file, directory and file system levels. In most kernels, this hierarchy is enforced by convention. In VINO, it is enforced by design. We call the levels at which locking may be needed the containment hierarchy.
Reference: [KAZAR90] <author> Kazar, M., Leverett, B., Anderson, O., Vasilis, A., Bottos, B., Chutani, S., Everhart, C., Mason, A., Tu, S., Zayas, E., </author> <title> "DECorum File System Architectural Overview," </title> <booktitle> Proceedings of the 1990 Summer Usenix, </booktitle> <address> Anaheim, CA, </address> <month> June </month> <year> 1990, </year> <pages> 151-164. </pages>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].
Reference: [KICZ93] <author> Kiczales, G., Lamping, J., Maeda, C., Keppel, D., McNamee, D., </author> <title> "The Need for Customizable Operating Systems", </title> <booktitle> Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <address> Napa CA, </address> <month> August </month> <year> 1993. </year>
Reference: [LISK93] <author> Liskov, B., Day, M., and Shrira, M., </author> <title> "Dis tributed Object Management in Thor", in Distributed Object Management, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California (1993). </address>
Reference-contexts: We install this code in the kernel because the cost of frequent cross-domain calls is too high, especially on performance-critical paths such as when policy decisions are made [BERS89]. Unlike other extensible systems, we have not undertaken the task of defining a new typesafe language <ref> [BERS94, ENGL94, LISK93] </ref>. It is outside the scope of our project to specify, implement,and support a new language, and widespread acceptance of new languages in the community, irrespective of their elegance and power, is very low. Extensions to VINO are written in C or C++.
Reference: [MCKU84] <author> McKusick, M., Joy, W., Le*er, S., Fabry, R., </author> <title> "A Fast File System for UNIX," </title> <journal> Transactions on Computer Systems, v. </journal> <volume> 2 n. 3, </volume> <pages> pp. </pages> <month> 181-197 (August </month> <year> 1984). </year>
Reference-contexts: A manager provides operations to create and delete entries, and control access to its stored data. It also implements the management of the underlying storage (read and write operations) for its files. Subtypes of manager include one implementing an FFS-style <ref> [MCKU84] </ref> file system, a journaling file system, an NFS file system, and a memory-based file system. Defining another subtype of manager (e.g. one that handles FTP requests) is straightforward. <p> Work has been done to address policy control on a topic-by-topic basis. Scheduler Activations [ANDE91] are a method for sharing scheduling policy between kernel and user; Cao's work on application-controlled file caching [CAO94] addresses buffer cache management. The Berke-ley Fast Filesystem <ref> [MCKU84] </ref> allows file layout to be controlled by the setting of the rotdelay, maxcontig, and maxbpg parameters. System V Release 4 provides for multiple classes of scheduling algorithms, corresponding to time-sharing scheduling, real-time scheduling, and kernel process scheduling.
Reference: [MCNAM90] <author> McNamee, D., and Armstrong, K., </author> <title> "Ex tending the Mach External Pager Interface to Accommodate User-Level Page Replacement Policies," </title> <booktitle> Proceedings of the 1990 Usenix Mach Workshop, </booktitle> <address> Burlington, VT (1990). </address> <note> [NEXT93] "NextStep 3.0 Users Manual", Next Computer (1993). </note>
Reference-contexts: Unlike the external servers of Mach [ACET86], grafting allows small, incremental changes in kernel functionality. If the page eviction strategy of the system is inappropriate, it can be replaced without writing a new external pager <ref> [MCNAM90] </ref>. 2 4 Resource Managers and Names A name service maps a name to a (resource manager, storage-id) pair. The resource manager can then be asked to map the storage-id to a file resource. A file resource implements the expected read, write, and seek interface.
Reference: [SELT92] <author> Seltzer, M., Olson, M., "LIBTP: </author> <title> Portable, Modular Transactions for UNIX", </title> <booktitle> Proceedings 1992 Winter Usenix Conference, </booktitle> <address> San Francisco, CA, </address> <pages> pp. </pages> <month> 9-26 (January </month> <year> 1992). </year>
Reference-contexts: For example, the semaphores offered to applications by System V incur a large number of system calls and context switches while simple spin-locks are virtually free <ref> [SELT92] </ref>. VINO provides a kernel lock manager, accessible for application use. In its simplest form, the lock manager provides spin-lock synchronization on memory locations, requiring kernel intervention only in the case of a contested lock. This interface is available both to the kernel and to applications.
Reference: [SULL91] <author> Sullivan, M., and R. Chillarege, </author> <title> "Software De fects and Their Impact on System Availability A Study of Field Failures in Operating Systems", </title> <booktitle> Digest 21st International Symposium on Fault Tolerant Computing (June 1991). </booktitle>
Reference: [VXFS] <author> Unix System Laboratories, </author> <title> "The vxfs File System Type," from Advanced System Administration for UNIX SVR4.2, </title> <year> 1992. </year>
Reference-contexts: For example, the kernel uses efficient synchronization primitives based on fast test and set instructions, which are not available to applications [AT&T]. Modern file systems use logging to provide improved performance and fast recovery, but these logging mechanisms are not available for application use <ref> [CHANG90, CHUT92, KAZAR90, VXFS] </ref>. Today's applications are unable to realize the potential of today's hardware [OUST90]. Database management systems are the classic example of competition between applications and the operating systems [STON81].

Reference: [1] <author> T. Bray, </author> <title> Bonnie source code, </title> <booktitle> NetNews posting, </booktitle> <year> 1990. </year>
Reference: [2] <author> P. M. Chen, D. A. Patterson. </author> <title> "A New Approach to I/O Benchmarks Adaptive Evaluation, Predicted Performance", </title> <institution> UCB/Computer Science Dept. 92/679, University of California at Berkeley, </institution> <month> March </month> <year> 1992. </year>
Reference: [3] <author> J. H. Howard, M. L. Kazar, S. G. Menees, D. A. Nichols, M. Satyanarayanan, R. N. Sidebotham, M. J. West. </author> <title> "Scale and Performance in a Distributed File System", </title> <journal> ACM Transactions on Computer Systems 6, </journal> <month> 1 (February </month> <year> 1988), </year> <pages> 51-81. </pages>
Reference: [4] <author> I. Hu. </author> <title> "Measuring File Access Patterns in UNIX", Performance Evaluation Review 14, </title> <booktitle> 2 (1986), </booktitle> <pages> 15-20. </pages> <booktitle> ACM SIGMETRICS (1986). </booktitle>
Reference: [5] <author> M. K. Molloy. </author> <title> "Anatomy of the NHFSSTONES Benchmark", Performance Evaluation Review 19, </title> <month> 4 </month> <year> (1992). </year>
Reference: [6] <author> B. Nelson, B. Lyon, M. Wittle, B. Keith, </author> <month> "LADDIS </month>
References-found: 55

