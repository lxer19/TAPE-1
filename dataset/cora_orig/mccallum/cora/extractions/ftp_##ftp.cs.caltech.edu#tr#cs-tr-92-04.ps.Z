URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-92-04.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: A Simple Simulator for Multicomputer Routing Networks  
Phone: 12 12 12 12 12 12 12 12 123 123 123 123 123 123 123 123 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 123 123 123 123 123 123 123 123 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12  91125  
Author: by Michael J. Pertel 
Address: Pasadena, CA  
Affiliation: Department of Computer Science California Institute of Technology  
Note: C SUBMICRON SYSTEMS ARCHITECTURE PROJECT  
Web: HCETLA  
Abstract: Caltech Computer Science Technical Report Caltech-CS-TR-92-04 March 5, 1992 The research described in this report was sponsored by the Defense Advanced Research Projects Agency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Seitz CL: </author> <booktitle> Chapter 5 "Multicomputers", </booktitle> <pages> pp. 131-200, </pages> <editor> in Hoare CAR (ed): </editor> <title> Developments in Concurrency and Communication. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <month> 27 </month>
Reference: [2] <editor> Seitz CL et al: </editor> <booktitle> x2.1 "The Mosaic Project", </booktitle> <pages> pp. 2-10, </pages> <note> in Caltech Computer Science Technical Report: CS-TR-91-10 Semiannual Technical Report, </note> <year> 1991. </year>
Reference-contexts: However, their theory of operation is explained to convince the reader that the simulators implement a realistic model. It is hoped that the 2 simplicity of the programs will obviate formalities. The routing-network research that inspired SNS is part of a large multicomputer design effort called the Mosaic project <ref> [2] </ref>. The Mosaic is a 128 fi 128 mesh of single-chip nodes, each containing a 14 MIPS processor, 64 KB memory, and an asynchronous network router. Although SNS can simulate any mesh (arbitrary radix and dimension), the Mosaic topology is most interesting to this project. <p> The simplest architecture required to support adaptive routing [3] would require significantly more chip area (and run significantly slower) than a VLSI implementation of dimension-order routing [4]. A dimension-order router (DOR) is much smaller, and requires only a few percent of the area of a single-chip multicomputer node <ref> [2] </ref>. The simpler, asynchronous circuitry of a DOR is faster and leads to higher performance. It is trivial to modify SNS to simulate adaptive routing instead of dimension-order routing. Minimal adaptive routing is obtained simply by making all profitable channels allowed in the channel assignment.
Reference: [3] <author> Pertel MJ, Seitz CL: </author> <title> x4.9 "A Silicon Architecture for Adaptive Cut-Through Routing", pp. </title> <type> 17-19, </type> <institution> in Caltech Computer Science Technical Report: CS-TR-90-14 Submicron Systems Architecture Project, </institution> <year> 1990. </year>
Reference-contexts: Some sample simulation results will be presented, but not a large suite. Simulation results will be presented in future reports. 2 Generic Routing Architecture In order to study the performance of various routing algorithms, the author devised a generic router architecture <ref> [3] </ref>. The architecture consists of FIFOs on every input channel, a cross-bar between the input FIFOs and output channels, and central control logic (for channel assignment). There are some subtleties in the design of the channel-assignment logic, but the architecture is straightforward. <p> Earlier results showing that adaptive routing improved network throughput over dimension-order routing [5] were an artifact of the adaptive routers being given more buffering than the dimension-order routers. Given equal buffering, the performance gap disappears. The simplest architecture required to support adaptive routing <ref> [3] </ref> would require significantly more chip area (and run significantly slower) than a VLSI implementation of dimension-order routing [4]. A dimension-order router (DOR) is much smaller, and requires only a few percent of the area of a single-chip multicomputer node [2].
Reference: [4] <author> Flaig CM: </author> <title> VLSI Mesh Routing Systems. </title> <institution> Caltech Computer Science Technical Report: 5241:TR:87. </institution> <year> 1987. </year>
Reference-contexts: In particular, dimension-order routing is the standard algorithm for mesh topologies, since it is intrinsically deadlock-free and easy to implement in VLSI <ref> [4] </ref>. It is interesting to explore the possibility of multipath routing to improve network performance or reliability. One type of multipath routing is adaptive routing [5]. In adaptive routing, the path followed by a packet through the network is effected by the local traffic conditions it encounters enroute. <p> Given equal buffering, the performance gap disappears. The simplest architecture required to support adaptive routing [3] would require significantly more chip area (and run significantly slower) than a VLSI implementation of dimension-order routing <ref> [4] </ref>. A dimension-order router (DOR) is much smaller, and requires only a few percent of the area of a single-chip multicomputer node [2]. The simpler, asynchronous circuitry of a DOR is faster and leads to higher performance.
Reference: [5] <author> Ngai JY: </author> <title> A Framework for Adaptive Routing in Multicomputer Networks. </title> <institution> Caltech Computer Science Technical Report: CS-TR-89-09. </institution> <year> 1989. </year>
Reference-contexts: A channel-assignment algorithm that is both fair and practical is non-trivial, and other authors have proposed incorrect solutions to the problem. For example, it has been suggested that examining the inputs round-robin would give a fair assignment <ref> [5] </ref>, but this is not true. Several inputs may vie for the same output. <p> In particular, dimension-order routing is the standard algorithm for mesh topologies, since it is intrinsically deadlock-free and easy to implement in VLSI [4]. It is interesting to explore the possibility of multipath routing to improve network performance or reliability. One type of multipath routing is adaptive routing <ref> [5] </ref>. In adaptive routing, the path followed by a packet through the network is effected by the local traffic conditions it encounters enroute. Most attention has been focused on minimal routing, in which the packet follows a shortest path from source to destination. <p> Earlier results showing that adaptive routing improved network throughput over dimension-order routing <ref> [5] </ref> were an artifact of the adaptive routers being given more buffering than the dimension-order routers. Given equal buffering, the performance gap disappears. The simplest architecture required to support adaptive routing [3] would require significantly more chip area (and run significantly slower) than a VLSI implementation of dimension-order routing [4]. <p> Minimal adaptive routing is obtained simply by making all profitable channels allowed in the channel assignment. Earlier studies that used various routing metrics to bias the choice between multiple profitable assignments showed that it makes little difference how the assignment is chosen <ref> [5] </ref>. The ANS (Adaptive-routing Network Simulator) chooses the first available profitable output.
Reference: [6] <author> Pertel MJ: </author> <title> Mesh Distance Formulae. </title> <institution> Caltech Computer Science Technical Report: CS-TR-92-05. </institution> <year> 1992. </year>
Reference-contexts: The initial simulation INTERVAL should be chosen large enough to ensure good statistics. A reasonable 8 ( DD ) D = 1 p 2 2dR 2 + O R 4 for any mesh <ref> [6] </ref>. 24 choice of INTERVAL is one that guarantees simulation of enough pack-ets to make the error in the measured average distance less than TOL.
Reference: [7] <author> Pertel MJ: </author> <title> A Critique of Adaptive Routing. </title> <note> Caltech Computer Science Technical Report: (in preparation). 1992. 28 </note>
Reference-contexts: Only SNS was run for A=.9; at this high applied-load, the simulator took eight days to converge. Both the effect of buffering and the performance of adaptive routing <ref> [7] </ref> will be the topics of future reports. 8 Acknowledgements The research described in this report was sponsored by the Defense Advanced Research Projects Agency. The author was supported by a National Defense Science and Engineering Graduate Fellowship. The author gratefully acknowledges the direction and assistance of his advisor, Dr.
References-found: 7

