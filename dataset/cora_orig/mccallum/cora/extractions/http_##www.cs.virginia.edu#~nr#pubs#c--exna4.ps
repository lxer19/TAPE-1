URL: http://www.cs.virginia.edu/~nr/pubs/c--exna4.ps
Refering-URL: http://www.cs.virginia.edu/~nr/pubs/c--exn-abstract.html
Root-URL: http://www.cs.virginia.edu
Email: nr@cs.virginia.edu  simonpj@microsoft.com  
Title: Exceptions Need Not Be Exceptional  
Author: Norman Ramsey Simon Peyton Jones 
Date: October 9, 1998  
Address: Charlottesville VA 22903 USA  St George House, 1 Guildhall St Cambridge CB2 3NH England  
Affiliation: Department of Computer Science University of Virginia  Microsoft Research  
Abstract: It is well known how to analyze and optimize programs written in a language of basic blocks and control-flow graphs, but it is not obvious how to extend the standard techniques to accommodate exceptions, especially because different source languages have different semantics for exceptions. We present mechanisms that enable a simple compiler-target language, C--, to express the exception semantics of multiple source languages. These mechanisms include the C-- continuation, which is used to model exception handlers, and source annotations, which tell the optimizer how control and data flow through calls to procedures that might raise exceptions. We give examples to show that these mechanisms, together with modest run-time support, can implement exceptions in the style of Modula-3, Eiffel, and ML. To make the meanings of the mechanisms precise, we show how a C-- program can be expressed as a set of control-flow graphs, and we use formal operational semantics to show precisely how to interpret such graphs. Finally, we give precise rules for adding dataflow information to C-- control-flow graphs. Given this information, the compiler writer need not reason directly about the semantics of source-language exceptions or about the operational semantics of C--. Instead, the standard optimizations preserve the correct semantics, with no further effort. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Alpern, Bowen, Mark N. Wegman, and F. Kenneth Zadeck. </author> <year> 1988 </year> <month> (January). </month> <title> Detecting equalities of variables in programs. </title> <booktitle> In Conference Record of the 15th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-11, </pages> <address> San Diego, California. </address>
Reference: <author> Appel, Andrew W. </author> <year> 1992. </year> <title> Compiling with Continuations. </title> <publisher> Cambridge: Cambridge University Press. </publisher> . <year> 1998 </year> <month> (April). </month> <title> SSA is functional programming. </title> <journal> SIGPLAN Notices, </journal> <volume> 33(4) </volume> <pages> 17-20. </pages>
Reference: <author> Atkinson, Russ, Alan Demers, Carl Hauser, Christian Jacobi, Peter Kessler, and Mark Weiser. </author> <year> 1989 </year> <month> (July). </month> <title> Experiences creating a portable Cedar. </title> <booktitle> Proceedings of the ACM SIGPLAN '89 Conference on Programming Language Design and Implementation, in SIGPLAN Notices, </booktitle> <volume> 24(7) </volume> <pages> 322-329. </pages>
Reference: <author> Bartlett, Joel F. </author> <year> 1989. </year> <title> SCHEME to C: A portable Scheme-to-C compiler. </title> <type> Technical Report RR 89/1, </type> <month> DEC WRL. </month>
Reference: <author> Chase, David. </author> <year> 1994a </year> <month> (June). </month>
Reference: <author> Implementation of exception handling, </author> <title> Part I. </title> <journal> The Journal of C Language Translation, </journal> <volume> 5(4) </volume> <pages> 229-240. </pages> . <year> 1994b </year> <month> (September). </month> <title> Implementation of exception handling, Part II: Calling conventions, asynchrony, optimizers, and debuggers. </title> <journal> The Journal of C Language Translation, </journal> 6(1):20-32. <volume> 23 </volume> Henderson, Fergus, Thomas Conway, and Zoltan Somogyi. 1995. Compiling logic programs to C using GNU C as a portable assembler. In ILPS'95 Postconference Workshop on Sequential Implementation Technologies for Logic Programming, pages <pages> 1-15, </pages> Portland, Or. 
Reference: <author> Hennessy, John. </author> <year> 1981 </year> <month> (January). </month> <title> Program optimization and exception handling. </title> <booktitle> In Conference Record of the 8th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 200-206, </pages> <address> Williamsburg, Virginia. </address>
Reference: <author> Hsieh, Cheng-Hsueh A., John C. Gyllenhaal, and Wen-mei W. Hwu. </author> <year> 1996 </year> <month> (De-cember). </month> <title> Java bytecode to native code translation: the Caffeine prototype and preliminary results. </title> <booktitle> In Proceedings of the 29th annual IEEE/ACM International Symposium on Microarchitecture, </booktitle> <address> 1109 Spring Street, Suite 300, Silver Spring, MD 20910, USA. </address>
Reference-contexts: We suspect that many of these ideas are not new. For example, the notion of using extra flow edges to express the optimization constraints of exceptions is likely to occur to any compiler writer who thinks hard about it <ref> (Hsieh, Gyllenhaal, and Hwu 1996) </ref>. But the literature on optimizing in the presence of exceptions is sparse; Hennessy (1981) and Chase (1994b) are rare exceptions (sic). Furthermore, we do not know of any work on giving a language-independent framework for such optimization. This work is part of a larger project.
Reference: <author> Liskov, Barbara H. and Alan Snyder. </author> <year> 1979 </year> <month> (November). </month> <title> Exception handling in CLU. </title> <journal> IEEE Transactions on Software Engineering, SE-5(6):546-558. </journal>
Reference: <author> Meyer, Bertrand. </author> <year> 1992. </year> <title> Eiffel: The Language. </title> <publisher> London: Prentice Hall International. </publisher>
Reference-contexts: The dispatcher included with DEC SRC Modula-3 even includes performance optimizations, such as efficient finalization of locks. 4.2 Eiffel exceptions The Eiffel language <ref> (Meyer 1992) </ref> provides a somewhat different exception model, but one that can be implemented using the same C-- mechanisms. In Eiffel, exception handlers may not be attached to arbitrary sequences of statements, but only to whole procedures (called routines).
Reference: <author> Milner, Robin, Mads Tofte, Robert Harper, and David MacQueen. </author> <year> 1997. </year> <title> The Definition of Standard ML (Revised). </title> <address> Cambridge, Massachusetts: </address> <publisher> MIT Press. </publisher>
Reference-contexts: to the exception dispatcher in Figure 4; instead, the propagation of exceptions is implemented in the handler itself. 5 Operational semantics of C-- So far, our treatment of C-- has been informal, as is usually the case in de scriptions of exception handling, with the honourable exception of Standard ML <ref> (Milner et al. 1997) </ref>. But without a precise specification it is impossible to say for sure whether a particular optimization changes the behavior of the program. 13 Entry ~ k p The unique entry node of a procedure with continuations ~ k and first node p.
Reference: <author> Pettersson, M. </author> <year> 1995. </year>
Reference: <author> Simulating tail calls in C. </author> <type> Technical report, </type> <institution> Department of Computer Science, Linkoping University. </institution>
Reference: <author> Peyton Jones, Simon L. and Norman Ramsey. </author> <year> 1998 </year> <month> (August). </month> <title> Machine-independent support for garbage collection, debugging, exception handling, and concurrency (draft). </title> <type> Technical Report CS-98-19, </type> <institution> Department of Computer Science, University of Virginia. </institution>
Reference-contexts: In particular, it lacks support for tail calls, exception handling, garbage collection, and lightweight concurrency. We have therefore designed and implemented C--, a language that is designed as a compiler-target language <ref> (Peyton Jones, Oliva, and Nordin 1998) </ref>. A front-end compiler translates the source program into C--, leaving the C-- compiler to translate the program into object code. C-- requires the front-end compiler to add annotations expressing facts that cannot reasonably be deduced by the C-- compiler.
Reference: <author> Peyton Jones, Simon L., Dino Oliva, and T. Nordin. </author> <year> 1998. </year> <title> C--: A portable assembly language. </title> <booktitle> In Proceedings of the 1997 Workshop on Implementing Functional Languages. </booktitle> <publisher> Springer Verlag LNCS. </publisher>
Reference-contexts: In particular, it lacks support for tail calls, exception handling, garbage collection, and lightweight concurrency. We have therefore designed and implemented C--, a language that is designed as a compiler-target language <ref> (Peyton Jones, Oliva, and Nordin 1998) </ref>. A front-end compiler translates the source program into C--, leaving the C-- compiler to translate the program into object code. C-- requires the front-end compiler to add annotations expressing facts that cannot reasonably be deduced by the C-- compiler.
Reference: <author> Peyton Jones, Simon L. </author> <year> 1992 </year> <month> (April). </month> <title> Implementing lazy functional languages on stock hardware: </title> <journal> The spineless tagless G-machine. Journal of Functional Programming, </journal> <volume> 2(2) </volume> <pages> 127-202. </pages>
Reference: <author> Rosen, Barry K., Mark N. Wegman, and F. Kenneth Zadeck. </author> <year> 1988 </year> <month> (January). </month> <title> Global value numbers and redundant computations. </title> <booktitle> In Conference Record of the 15th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 12-27, </pages> <address> San Diego, California. </address> <note> 24 Tarditi, </note> <author> David, Anurag Acharya, and Peter Lee. </author> <year> 1992. </year>
Reference: <author> No assembly required: </author> <title> compiling Standard ML to C. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> 1(2) </volume> <pages> 161-177. 25 </pages>
References-found: 18

