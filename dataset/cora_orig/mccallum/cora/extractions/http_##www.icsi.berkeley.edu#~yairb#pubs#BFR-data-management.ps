URL: http://www.icsi.berkeley.edu/~yairb/pubs/BFR-data-management.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Title: Competitive Algorithms for Distributed Data Management  
Author: Yair Bartal Amos Fiat Yuval Rabani 
Address: Tel-Aviv 69978, Israel.  
Affiliation: Department of Computer Science School of Mathematics Tel-Aviv University  
Abstract: We deal with the competitive analysis of algorithms for managing data in a distributed environment. We deal with the file allocation problem ([DF], [ML]), where copies of a file may be be stored in the local storage of some subset of processors. Copies may be replicated and discarded over time so as to optimize communication costs, but multiple copies must be kept consistent and at least one copy must be stored somewhere in the network at all times. We deal with competitive algorithms for minimizing communication costs, over arbitrary sequences of reads and writes, and arbitrary network topologies. We define the constrained file allocation problem to be the solution of many individual file allocation problems simultaneously, subject to the constraints of local memory size. We give competitive algorithms for this problem on the uniform network topology. We then introduce distributed competitive algorithms for on-line data tracking (a generalization of mobile user tracking [AP1, AP3]) to transform our competitive data management algorithms into distributed algorithms themselves.
Abstract-found: 1
Intro-found: 1
Reference: [AA] <author> N. Alon and Y. Azar. </author> <title> On-line Steiner Trees in the Euclidean Plane. </title> <booktitle> In Proc. 8th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 337-343, </pages> <year> 1992. </year>
Reference-contexts: They have shown that the greedy on-line Steiner tree algorithm is dlog ne competitive. 13 For completeness of the discussion we give here an alternative very simple proof of this claim. Analysis of the greedy Steiner tree algorithm was also independently made by <ref> [AA] </ref>, [ABF1], [CV] and [WY2] giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 4 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. Proof.
Reference: [ABF1] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Competitive Distributed File Allocation. </title> <booktitle> To Appear in Proc. of the 25th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 164-173, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: They have shown that the greedy on-line Steiner tree algorithm is dlog ne competitive. 13 For completeness of the discussion we give here an alternative very simple proof of this claim. Analysis of the greedy Steiner tree algorithm was also independently made by [AA], <ref> [ABF1] </ref>, [CV] and [WY2] giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 4 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. Proof. <p> As stated in Section 4.1 Imase and Waxman [IW] prove that the greedy steiner tree algorithm is dlog ne-competitive. In fact in <ref> [ABF1, WY2] </ref> are different proof proving the following Theorem 7 For any weighted graph G on n nodes, the greedy Steiner tree algorithm is O (minflog n; log (Diam)g)- competitive. We also have the following easy to verify facts. <p> Therefore OPT W . 11 Conjectures and Open Problems The obvious open problems are to close the gaps between upper and lower bounds, and to give deterministic and/or randomized (oblivious) results where possible. A deterministic O (log n)- competitive file-allocation algorithm, and a deterministic distributed algorithm are given in <ref> [ABF1] </ref>, but the question of giving a deterministic counterpart to Theorem SBA is still open.
Reference: [ABF2] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Heat & Dump: Competitive Distributed Paging. </title> <booktitle> In Proc. of the 34th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 22-31, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Motivated by the famous [MMS] conjecture, we conjecture that the constrained file allocation problem has a deterministic competitive ratio of O (m) on arbitrary topologies. <ref> [ABF2] </ref> gives an O (log m)-competitive randomized algorithm for the constrained file allocation problem on the uniform network. We hazard the guess that similar results can be obtained by randomized algorithms against oblivious adversaries for other network topologies as well.
Reference: [AP1] <author> B. Awerbuch and D. Peleg. </author> <title> Online Tracking of Mobile Users. </title> <type> Technical Report MIT/LCS/TM-410, </type> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: To justify this assumption in the distributed setting for arbitrary architectures, we present a generalization of the Awerbuch and Peleg <ref> [AP1, AP3] </ref> mobile user algorithm called distributed data tracking. Disallowing ESP, if two processors have a copy of the same file then it must have a common source and must have reached these processors through communications links. <p> We manage a distributed data structure that allows fast access to the closest copy of a file, while the cost of managing the data structure is amortized against the cost of the data movement itself. <ref> [AP1] </ref> solve a similar problem, they allow a move operator to be applied to a mobile user, but do not efficiently support birth and death. We allow insert and delete operations. The competitive ratio is polylogarithmic in n. <p> algorithm maintains a distributed data structure of the i-level cover sets, so that reaching a processor in Q from a covering processor at the i-level cover costs O (2 i ). 39 9.2.1 Data Tracking The data tracking mechanism of is a generalization of the mobile user tracking mechanism of <ref> [AP1, AP3] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q. <p> If no memory considerations are made then the approximation factor can be in fact reduced to O (1). The Data Tracking Solution In the solution to the data tracking problem (Section 9.2.1), we make use two tools. One is a graph-theoretic structure of regional matchings, given by <ref> [AP1] </ref>, an application of the sparse graph partitions [AP2]. <p> The degree of a read-set or a write-set of p is the number of processors in the set. The read-radius, read-degree, write-radius and write-degree of an m-regional matching are de fined as the maximum over all processors p of the corresponding parameter for p. <ref> [AP1] </ref> show how to construct for every m and `, 2 ` 2 log n, an m-regional matching with the following parameters: read-radius at most `, read-degree at most 2` + 1, write-radius at most 2` + 1, and write-degree at most n 2=` .
Reference: [AP2] <author> B. Awerbuch and D. Peleg. </author> <title> Sparse Partitions. </title> <booktitle> In Proc. of the 31st Ann. Symp. on Foundations of Computer science, </booktitle> <pages> pages 503-513, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The Data Tracking Solution In the solution to the data tracking problem (Section 9.2.1), we make use two tools. One is a graph-theoretic structure of regional matchings, given by [AP1], an application of the sparse graph partitions <ref> [AP2] </ref>. An m-regional matching is an assignment of 2 sets of processors to each processor, a read-set and a write-set, such that for every two processors p and q that satisfy d (p; q) m, the read-set of p and the write-set of q have a non-empty intersection.
Reference: [AP3] <author> B. Awerbuch and D. Peleg, </author> <title> Concurrent Online Tracking of Mobile Users, </title> <booktitle> Proc. SIGCOMM. </booktitle> <address> Zurich, </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: To justify this assumption in the distributed setting for arbitrary architectures, we present a generalization of the Awerbuch and Peleg <ref> [AP1, AP3] </ref> mobile user algorithm called distributed data tracking. Disallowing ESP, if two processors have a copy of the same file then it must have a common source and must have reached these processors through communications links. <p> algorithm maintains a distributed data structure of the i-level cover sets, so that reaching a processor in Q from a covering processor at the i-level cover costs O (2 i ). 39 9.2.1 Data Tracking The data tracking mechanism of is a generalization of the mobile user tracking mechanism of <ref> [AP1, AP3] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q.
Reference: [BBKTW] <author> S. Ben-David, A. Borodin, R.M. Karp, G. Tardos, and A. Wigderson. </author> <title> On the Power of Randomization in Online Algorithms. </title> <booktitle> In Proc. of the 22nd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 379-386, </pages> <month> May </month> <year> 1990. </year> <month> 62 </month>
Reference-contexts: We deal with dynamic self-adjusting algorithms, in the context of two basic file allocation problems, and primarily address issues of communications efficiency. We define the file allocation problem and the more complex constrained file allocation problem, but these names may conflict with other usage. We consider the competitive performance <ref> [ST, KMRS, MMS, BLS, BBKTW] </ref> of algorithms for these problems, and present algorithms with an optimal or nearly optimal competitive ratio. Black and Sleator [BS] consider competitive algorithms for two partial components of the file allocation family of problems. <p> The competitive ratio is c if for all event sequences, (online cost) c fi (off-line cost) + some additive constant. A competitive algorithm with a competitive ratio of c is called strictly competitive if the additive constant is zero. Models for on-line problems are presented in [BLS], [MMS], <ref> [BBKTW] </ref>. Competitive analysis of distributed data management algorithms begins with Karlin et. al. in [KMRS] who analyze competitive algorithms for snoopy caching on a bus connected PRAM. <p> If the on-line algorithm may use randomization to process events then the competitive ratio is defined as an expectation and one must make precise the power given to the adversary. Ben-David et. al. <ref> [BBKTW] </ref> define oblivious and adaptive adversaries and show various relationships 2 between the competitive ratios achievable against different adversaries. An oblivious adversary must commit to the sequence of events while knowing neither the coin tosses nor the actions taken by the on-line algorithm. <p> An adaptive on-line adversary must respond to events when it decides upon them and may not later change previous actions. An adaptive off-line adversary may decide upon all its responses after seeing the entire sequence, <ref> [BBKTW] </ref> show that randomization does not help against such an adversary. The distinction between adaptive and oblivious adversaries is not relevant for deterministic algorithms. We distinguish between the adversary types by adding the qualification "(oblivious)" or "(adaptive)" when referring to a competitive ratio. [BBKTW] also show how to transform a randomized <p> its responses after seeing the entire sequence, <ref> [BBKTW] </ref> show that randomization does not help against such an adversary. The distinction between adaptive and oblivious adversaries is not relevant for deterministic algorithms. We distinguish between the adversary types by adding the qualification "(oblivious)" or "(adaptive)" when referring to a competitive ratio. [BBKTW] also show how to transform a randomized c-competitive algorithm against an adaptive on-line adversary into a c 2 -competitive deterministic algorithm if a certain augmented potential function they define is computable. 1.2 The File Allocation Problem A network is a weighted graph where processors are represented by vertices P , <p> In this paper we present time and memory efficient competitive algorithms for tree networks. The proof of our O (log n)-competitive algorithm uses a construct we call the "natural potential function." This is a modification of the <ref> [BBKTW] </ref> "augmented potential function." We prove general theorems relating a large class of configuration problems and the natural potential function. This is useful in proving the correctness of competitive algorithms for complex problems by concatenating competitive algorithms for simpler subproblems. <p> We note that some aspects of our algorithms do not require this assumption, but do not claim a complete solution at present. 6 2 Preliminaries 3 Configuration Problems and Potential Functions We define on-line configuration problems. As a class of problems it is equivalent to the request-answer games of <ref> [BBKTW] </ref>. Most of the previously studied on-line problems (including server problems and metrical task systems, and including the problems dealt with in this paper) are naturally described in the context of this model. Definition. <p> So, if the on-line algorithm is randomized, the sequence generated by this type of adversary is randomized as well. Ben-David et al. <ref> [BBKTW] </ref> elaborate on this and other types of adversaries. Notation.Fix a time n. The request sequence at time n, is denoted n = r 1 r 2 r n . Let Alg be an on-line algorithm, and let Adv be an adversary. <p> It is O (1)-competitive for processors on a ring, for trees, and for uniform networks. Finally, the result of <ref> [BBKTW] </ref> implies the following corollary. Corollary 11 For every network on n processors, if there exists a strictly c-competitive Steiner tree algorithm against adaptive on-line adversaries on N , then there exists a computable deterministic O (c 2 )-competitive algorithm for the file allocation problem.
Reference: [BLS] <author> A. Borodin, N. Linial, and M. Saks. </author> <title> An Optimal On-Line Algorithm for Metrical Task Systems. </title> <booktitle> In Proc. of the 19th Ann. ACM Symp on Theory of Computing, </booktitle> <pages> pages 373-382, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: We deal with dynamic self-adjusting algorithms, in the context of two basic file allocation problems, and primarily address issues of communications efficiency. We define the file allocation problem and the more complex constrained file allocation problem, but these names may conflict with other usage. We consider the competitive performance <ref> [ST, KMRS, MMS, BLS, BBKTW] </ref> of algorithms for these problems, and present algorithms with an optimal or nearly optimal competitive ratio. Black and Sleator [BS] consider competitive algorithms for two partial components of the file allocation family of problems. <p> The competitive ratio is c if for all event sequences, (online cost) c fi (off-line cost) + some additive constant. A competitive algorithm with a competitive ratio of c is called strictly competitive if the additive constant is zero. Models for on-line problems are presented in <ref> [BLS] </ref>, [MMS], [BBKTW]. Competitive analysis of distributed data management algorithms begins with Karlin et. al. in [KMRS] who analyze competitive algorithms for snoopy caching on a bus connected PRAM. <p> An on-line algorithm selects the configuration for a request r independent of the suffix of the sequence after r. The index of a request in an input sequence is called the stage or the time. A task system (see <ref> [BLS] </ref>) is an on-line configuration problem where the cost function has the following structure. Define the cost of a move between configurations in Con, denoted dist (C 1 ; C 2 ) (where C 1 ; C 2 2 Con) (this is the move cost).
Reference: [BS] <author> D.L. Black and D.D. Sleator. </author> <title> Competitive Algorithms for Replication and Migration Problems. </title> <type> Technical Report CMU-CS-89-201, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1989. </year>
Reference-contexts: We consider the competitive performance [ST, KMRS, MMS, BLS, BBKTW] of algorithms for these problems, and present algorithms with an optimal or nearly optimal competitive ratio. Black and Sleator <ref> [BS] </ref> consider competitive algorithms for two partial components of the file allocation family of problems. Our file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS]. Another issue is that of global versus distributed management. <p> Black and Sleator <ref> [BS] </ref> consider competitive algorithms for two partial components of the file allocation family of problems. Our file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS]. Another issue is that of global versus distributed management. The question of file allocation is quite different in the context of disk management in a small network of large mainframes versus local cache management in a large scale multiprocessing computer. <p> One way to limit the concerns of data consistency is to assume that only one processor may store a copy of a file at any given time. Thus, read and write requests issued by other processors in the network must all access the processor that holds the copy. <ref> [BS] </ref> call this problem the file migration problem. [BS] give an optimal 3-competitive ratio for this problem on the uniform network topology and for trees. <p> Thus, read and write requests issued by other processors in the network must all access the processor that holds the copy. <ref> [BS] </ref> call this problem the file migration problem. [BS] give an optimal 3-competitive ratio for this problem on the uniform network topology and for trees. Westbrook ([W]) gives a randomized 3-competitive algorithm against an adaptive on-line adversary for any network, and a 1 + -competitive randomized algorithm against an oblivious adversary. <p> We therefore conclude that over the entire sequence of events the online cost is equal to the cost of the 3 adversaries up to an additive term, implying the lower bound. Black and Sleator <ref> [BS] </ref> used a result of Karlin et al. [KMRS] to get a lower bound of 3 for deterministic data migration algorithms. If requests are limited to write requests only, the 34 file allocation problem collapses to the data migration problem, and therefore for deterministic algorithms the result in [BS] can be <p> and Sleator <ref> [BS] </ref> used a result of Karlin et al. [KMRS] to get a lower bound of 3 for deterministic data migration algorithms. If requests are limited to write requests only, the 34 file allocation problem collapses to the data migration problem, and therefore for deterministic algorithms the result in [BS] can be used to get the lower bound above. 8.2 An (log n) Lower Bound on Arbitrary Network Topologies We now proceed to show, that in certain networks, the lower bound can be as bad as (log n), where n is the number of processors in the network.
Reference: [C] <author> W.W. Chu. </author> <title> Optimal File Allocation in a Multiple Computer System. </title> <journal> IEEE Transactions of Computers, </journal> <volume> 18(10), </volume> <month> October </month> <year> 1969. </year>
Reference: [CL] <author> M. Chrobak, L. Larmore, </author> <title> The Server Problem and On-line Games, in On-Line Algorithms, </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> vol. 7, </volume> <year> 1991, </year> <pages> 11-64. </pages>
Reference-contexts: This is useful in proving the correctness of competitive algorithms for complex problems by concatenating competitive algorithms for simpler subproblems. Our analysis of the competitive file allocation algorithm is based upon the natural potential function for on-line Steiner tree algorithms. Similar ideas appear in <ref> [CL] </ref> in the context of deterministic algorithms, our natural potential function is defined for both deterministic and randomized algorithms. 1.3 The Constrained File Allocation Problem If it is not true that every processor can accommodate all files, then copying a file into a processor's local memory may be impossible as that
Reference: [CLRW] <author> M. Chrobak, L. Larmore, N. Reingold, and J. Westbrook. </author> <title> Optimal Multiprocessor Migration Algorithms Using Work Functions. </title> <note> Unpublished. </note>
Reference: [CV] <author> B. Chandra and S. Vishwanathan. </author> <title> Constructing Reliable Communication Networks of Small Weight On-line. </title> <journal> Journal of Algorithms. </journal>
Reference-contexts: They have shown that the greedy on-line Steiner tree algorithm is dlog ne competitive. 13 For completeness of the discussion we give here an alternative very simple proof of this claim. Analysis of the greedy Steiner tree algorithm was also independently made by [AA], [ABF1], <ref> [CV] </ref> and [WY2] giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 4 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. Proof.
Reference: [DF] <author> D. Dowdy and D. Foster. </author> <title> Comparative Models of The File Assignment Problem. </title> <journal> Computing Surveys, </journal> <volume> 14(2), </volume> <month> June </month> <year> 1982. </year>
Reference-contexts: 1 Introduction The management of data in a multiprocessing environment has been extensively studied. The 1981 survey paper by Dowdy and Foster <ref> [DF] </ref>, dealing with the file allocation (or assignment) problem, cites close to a hundred references. 1 The file allocation problem has a plethora of models, with differing design goals and assump-tions. [DF] compares studies on fourteen different models, and mentions several others. <p> The 1981 survey paper by Dowdy and Foster <ref> [DF] </ref>, dealing with the file allocation (or assignment) problem, cites close to a hundred references. 1 The file allocation problem has a plethora of models, with differing design goals and assump-tions. [DF] compares studies on fourteen different models, and mentions several others. We deal with dynamic self-adjusting algorithms, in the context of two basic file allocation problems, and primarily address issues of communications efficiency.
Reference: [FKLMSY] <author> A. Fiat, R.M. Karp, M. Luby, L.A. McGeoch, D.D. Sleator , and N.E. Young. </author> <title> Competitive Paging Algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 12, </volume> <pages> pages 685-699, </pages> <year> 1991. </year>
Reference: [HP] <author> J.L. Hennessy and D.A. Patterson. </author> <title> Computer Architecture: A Quantitative Aproach. </title> <publisher> Morgan Kaufmann Publishers, Inc. </publisher> <year> 1990. </year>
Reference: [IW] <author> M. Imase and B.M. Waxman. </author> <title> Dynamic Steiner Tree Problem. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 4(3) </volume> <pages> 369-384, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The on-line Steiner tree problem is equivalent to a special case of the file allocation problem, where D = 1, only read requests are issued, and the algorithm is forced to replicate upon a read request. Imaze and Waxman <ref> [IW] </ref> have defined this problem and gave upper and lower bounds for it. They have shown that the greedy on-line Steiner tree algorithm is dlog ne competitive. 13 For completeness of the discussion we give here an alternative very simple proof of this claim. <p> Define the greedy on-line Steiner tree algorithm as follows: Given a request at vertex v, greedy adds to its current subtree the shortest path in G from a vertex in its subtree to v. As stated in Section 4.1 Imase and Waxman <ref> [IW] </ref> prove that the greedy steiner tree algorithm is dlog ne-competitive. In fact in [ABF1, WY2] are different proof proving the following Theorem 7 For any weighted graph G on n nodes, the greedy Steiner tree algorithm is O (minflog n; log (Diam)g)- competitive. <p> Imase and Waxman <ref> [IW] </ref> prove the following theorem. Theorem 25 For all n, there exist graphs G n over n nodes, such that the competitive ratio for on-line Steiner tree for those graphs is in (log n). We note that this result applies to randomized algorithms against the oblivious adversary. <p> SB is defined with respect to some on-line Steiner tree algorithm. We use a version of SB, that runs a variant of the greedy on-line Steiner tree algorithm of <ref> [IW] </ref>. Given a new input vertex p, this greedy algorithm attaches it to the closest vertex in the existing tree. No other vertices are added. In a network over n processors, the greedy algorithm is strictly O (log n)-competitive. The proof is identical to the one given in [IW]. <p> algorithm of <ref> [IW] </ref>. Given a new input vertex p, this greedy algorithm attaches it to the closest vertex in the existing tree. No other vertices are added. In a network over n processors, the greedy algorithm is strictly O (log n)-competitive. The proof is identical to the one given in [IW]. We give a distributed on-line file allocation algorithm, named distributed-SB, for any network. We measure distributed-SB's messages cost for any sequence of reads and write and show that it is within polylogarithmic factors of the off-line cost.
Reference: [KMRS] <author> A.R. Karlin, M.S. Manasse, L. Rudolph, and D.D. Sleator. </author> <title> Competitive Snoopy Caching. </title> <journal> Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: We deal with dynamic self-adjusting algorithms, in the context of two basic file allocation problems, and primarily address issues of communications efficiency. We define the file allocation problem and the more complex constrained file allocation problem, but these names may conflict with other usage. We consider the competitive performance <ref> [ST, KMRS, MMS, BLS, BBKTW] </ref> of algorithms for these problems, and present algorithms with an optimal or nearly optimal competitive ratio. Black and Sleator [BS] consider competitive algorithms for two partial components of the file allocation family of problems. <p> Events are produced by one player, the adversary, whereas responses are produced by the other player, the on-line algorithm. Each response is produced without knowing what future events will be. A sequence of events and responses has a fixed cost. The competitive ratio <ref> [ST, KMRS] </ref> is defined as the ratio between the cost associated with an on-line algorithm to deal with a sequence of events versus the cost expended by an optimal (offline) algorithm. <p> A competitive algorithm with a competitive ratio of c is called strictly competitive if the additive constant is zero. Models for on-line problems are presented in [BLS], [MMS], [BBKTW]. Competitive analysis of distributed data management algorithms begins with Karlin et. al. in <ref> [KMRS] </ref> who analyze competitive algorithms for snoopy caching on a bus connected PRAM. If the on-line algorithm may use randomization to process events then the competitive ratio is defined as an expectation and one must make precise the power given to the adversary. <p> We therefore conclude that over the entire sequence of events the online cost is equal to the cost of the 3 adversaries up to an additive term, implying the lower bound. Black and Sleator [BS] used a result of Karlin et al. <ref> [KMRS] </ref> to get a lower bound of 3 for deterministic data migration algorithms.
Reference: [MMS] <author> M.S. Manasse, L.A. McGeoch, and D.D. Sleator. </author> <title> Competitive Algorithms for OnLine Problems. </title> <booktitle> In Proc. of the 20th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 322-333, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: We deal with dynamic self-adjusting algorithms, in the context of two basic file allocation problems, and primarily address issues of communications efficiency. We define the file allocation problem and the more complex constrained file allocation problem, but these names may conflict with other usage. We consider the competitive performance <ref> [ST, KMRS, MMS, BLS, BBKTW] </ref> of algorithms for these problems, and present algorithms with an optimal or nearly optimal competitive ratio. Black and Sleator [BS] consider competitive algorithms for two partial components of the file allocation family of problems. <p> The competitive ratio is c if for all event sequences, (online cost) c fi (off-line cost) + some additive constant. A competitive algorithm with a competitive ratio of c is called strictly competitive if the additive constant is zero. Models for on-line problems are presented in [BLS], <ref> [MMS] </ref>, [BBKTW]. Competitive analysis of distributed data management algorithms begins with Karlin et. al. in [KMRS] who analyze competitive algorithms for snoopy caching on a bus connected PRAM. <p> Westbrook ([W]) gives a randomized 3-competitive algorithm against an adaptive on-line adversary for any network, and a 1 + -competitive randomized algorithm against an oblivious adversary. The data migration problem can also be considered as a special case of the 1-server with excursion problem defined in <ref> [MMS] </ref>. Black and Sleator also consider the file replication problem, which is the file allocation problem with writes disallowed. Here, copies need never be discarded. They give an optimal 2-competitive algorithm for the replication problem when the network is a tree, or a uniform graph. <p> Following <ref> [MMS] </ref>, we define a set of 2m 1 adversaries. <p> A deterministic O (log n)- competitive file-allocation algorithm, and a deterministic distributed algorithm are given in [ABF1], but the question of giving a deterministic counterpart to Theorem SBA is still open. Motivated by the famous <ref> [MMS] </ref> conjecture, we conjecture that the constrained file allocation problem has a deterministic competitive ratio of O (m) on arbitrary topologies. [ABF2] gives an O (log m)-competitive randomized algorithm for the constrained file allocation problem on the uniform network.
Reference: [ML] <author> H.L. Morgan and K.D. Levin. </author> <title> Optimal Program and Data Locations in Computer Networks. </title> <journal> CACM, </journal> <volume> 20(5) </volume> <pages> 124-130 63 </pages>
Reference: [RS] <author> P. Raghavan and M. Snir. </author> <title> Memory versus Randomization in On-Line Algorithms. </title> <booktitle> In Proc. 16th ICALP, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: We also prove that (log n) is the best competitive ratio one can obtain for general networks, even for randomized algorithms against an oblivious adversary. Our algorithm is also memoryless <ref> [RS] </ref> (I.e., its decisions depend only on its current configuration and the current request). We give an optimal deterministic 3-competitive algorithm for the uniform architecture (e.g., bus based). Westbrook and Yan [WY1] have obtained an optimal deterministic 3-competitive algorithm for tree networks.
Reference: [ST] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized Efficiency of List Update and Paging Rules. </title> <booktitle> Communication of the ACM, </booktitle> <pages> 28(2) pages 202-208, </pages> <year> 1985. </year>
Reference-contexts: We deal with dynamic self-adjusting algorithms, in the context of two basic file allocation problems, and primarily address issues of communications efficiency. We define the file allocation problem and the more complex constrained file allocation problem, but these names may conflict with other usage. We consider the competitive performance <ref> [ST, KMRS, MMS, BLS, BBKTW] </ref> of algorithms for these problems, and present algorithms with an optimal or nearly optimal competitive ratio. Black and Sleator [BS] consider competitive algorithms for two partial components of the file allocation family of problems. <p> Events are produced by one player, the adversary, whereas responses are produced by the other player, the on-line algorithm. Each response is produced without knowing what future events will be. A sequence of events and responses has a fixed cost. The competitive ratio <ref> [ST, KMRS] </ref> is defined as the ratio between the cost associated with an on-line algorithm to deal with a sequence of events versus the cost expended by an optimal (offline) algorithm. <p> Potential functions are useful in the competitive analysis of on-line algorithms, as shown in the following theorem (see <ref> [ST] </ref>): Theorem 1 If there exists a potential function for Alg (and c), then Alg is c-competitive (against adversaries for which property 2 above holds). The following types of potential functions are commonly used for competitive analysis against an adaptive on-line adversary.
Reference: [W] <author> J. Westbrook. </author> <title> Randomized Algorithms for Multiprocessor Page Migration. Proc. of DIMACS Workshop on On-Line Algorithms, </title> <note> to appear. </note>
Reference: [WY1] <author> J. Westbrook. and D.K. Yan. </author> <type> personal communication. </type>
Reference-contexts: Our algorithm is also memoryless [RS] (I.e., its decisions depend only on its current configuration and the current request). We give an optimal deterministic 3-competitive algorithm for the uniform architecture (e.g., bus based). Westbrook and Yan <ref> [WY1] </ref> have obtained an optimal deterministic 3-competitive algorithm for tree networks. In this paper we present time and memory efficient competitive algorithms for tree networks.
Reference: [WY2] <author> J. Westbrook. and D.K. Yan. </author> <title> Greedy On-Line Steiner Tree and Generalized Steiner Problems. </title> <booktitle> In Proc. of the 3rd Workshop in Algorithms and Data Structures, Also Lecture Notes in Computer Science, </booktitle> <volume> vol. 709, </volume> <pages> pages 622-633, </pages> <address> Montreal, Canada, 1993, </address> <publisher> Springer-Verlag. </publisher> <pages> 64 </pages>
Reference-contexts: They have shown that the greedy on-line Steiner tree algorithm is dlog ne competitive. 13 For completeness of the discussion we give here an alternative very simple proof of this claim. Analysis of the greedy Steiner tree algorithm was also independently made by [AA], [ABF1], [CV] and <ref> [WY2] </ref> giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 4 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. Proof. <p> As stated in Section 4.1 Imase and Waxman [IW] prove that the greedy steiner tree algorithm is dlog ne-competitive. In fact in <ref> [ABF1, WY2] </ref> are different proof proving the following Theorem 7 For any weighted graph G on n nodes, the greedy Steiner tree algorithm is O (minflog n; log (Diam)g)- competitive. We also have the following easy to verify facts.
References-found: 25

