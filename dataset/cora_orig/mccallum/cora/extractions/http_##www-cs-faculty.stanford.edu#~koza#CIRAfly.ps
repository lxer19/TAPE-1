URL: http://www-cs-faculty.stanford.edu/~koza/CIRAfly.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: 
Email: koza@cs.stanford.edu  forrest@evolute.com  makeane@ix.netcom.com  dandre@cs.berkeley.edu  
Title: Automatic Programming of a Time-Optimal Robot Controller and an Analog Electrical Circuit to Implement the
Author: John R. Koza Forrest H Bennett III Martin A. Keane David Andre d i od e s, r e si st o rs a nd p ow e r 
Note: implement  
Web: http://www-cs faculty.stanford.edu/~koza/  
Address: Stanford, California 94305  Stanford, California 94305  5733 West Grover Chicago, Illinois 60630  Berkeley, California  
Affiliation: Computer Science Dept. Stanford University  Visiting Scholar Computer Science Dept. Stanford University  Martin Keane Inc.  Computer Science Division University of California  
Abstract: Genetic programming is an automatic programming technique that evolves computer programs to solve, or approximately solve, problems. This paper presents two examples in which genetic programming creates a computer program for controlling a robot so that the robot moves to a specified destination point in minimal time. In the first approach, genetic programming evolves a computer program composed of ordinary a r i t h m e t i c o p e r a t i o n s a n d 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aaserud, O. and Nielsen, I. Ring. </author> <year> 1995. </year> <title> Trends in current analog design: A panel debate. Analog Integrated Circuits and Signal Processing. </title> <type> 7(1) 5-9. </type>
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer architecture. </title> <editor> In Angeline, P. J. and Kinnear, K. E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge: </address> <publisher> MIT Press. </publisher>
Reference-contexts: On each generation, four boatloads of emigrants, each consisting of B = 2% (the migration rate) of the node's subpopulation (selected on the basis of fitness) were dispatched to each of the four toroidally adjacent nodes <ref> (Andre and Koza 1996) </ref>. 4 . 1 . Re sults On generation 0 of one run, the best program in the population achieves a fitness of 3.01 and scores 61 hits (out of 72).
Reference: <editor> Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Clements, John C. </author> <year> 1990. </year> <title> Minimum-time turn trajectories to fly-to points. Optimal Control Applications and Methods. </title> <booktitle> 11. </booktitle> <pages> Pages 39-50. </pages>
Reference-contexts: The worst value of fitness is 11.52 minutes and it occurs when all 72 fitness cases time out in this manner. In comparison, the optimal value of fitness (without the effect of the discretization of the 40 40 table) for this problem is known <ref> (from Clements 1990) </ref> to be 1.518 minutes (an average of about 21 time steps of 0.001 minute each for each of the 72 fitness cases).
Reference: <author> Holland, John H. </author> <year> 1975. </year> <booktitle> Adaptation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher>
Reference: <editor> Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> 1994. Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Genetic Programming John Holland's pioneering Adaptation in Natural and Artificial Systems (1975) described how an analog of the evolutionary process can be applied to solving problems using what is now called the genetic algorithm. The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of the genetic algorithm in which the genetic population consists of computer programs. See also Koza and Rice 1992.
Reference: <author> Koza, John R. </author> <year> 1994a. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Subroutines do this in ordinary computer programs. Accordingly, Genetic Programming II: Automatic Discovery of Reusable Programs <ref> (Koza 1994a, 1994b) </ref> describes how to evolve a multipart program consisting of a main result-producing branch and one or more reusable, parameterized, hierarchically-called function-defining branches (called automatically defined functions). When automatically defined functions are used, it is necessary to determine the architecture of the yet-to-be-evolved programs.
Reference: <author> Koza, John R. </author> <year> 1994b. </year> <title> Genetic Programming II Videotape: The Next Generation. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1994c. </year> <title> Architecture-altering operations for evolving the architecture of a multipart program in genetic programming. </title> <institution> Stanford University Computer Science Department technical report STAN-CS-TR-94--1528. </institution> <month> October 21, </month> <year> 1994. </year>
Reference-contexts: This architectural selection can be automated by architecture-altering operations <ref> (Koza 1994c) </ref> that enable genetic programming to add and delete automatically defined functions and to add arguments and delete arguments of automatically defined functions dynamically during the run. <p> Accordingly, each program in the initial population of programs (generation 0) has a uniform architecture with no automatically defined functions. After generation 0, the number of automatically defined functions, if any, will emerge as a consequence of the architecture-altering operations <ref> (Koza 1994c) </ref>. The population size was 40,000. The control parameters were the same as those in Koza 1994a, except (1) The percentage of operations on each generation after generation 5 was 86.5% one-offspring crossovers; 10% reproductions; 1% mutations; 1% branch duplications; 0.5% branch deletions; and 1% branch creations. <p> The number of automatically defined functions, if any, will emerge as a consequence of the evolutionary process using the architecture-altering operations <ref> (Koza 1994c) </ref>. Each program in the initial population of programs has a uniform architecture with no automatically defined functions (i.e., three result-producing branches).
Reference: <author> Koza, John R., Andre, David, Bennett III, Forrest H, and Keane, Martin A. </author> <year> 1996. </year> <title> Use of automatically defined functions and architecture-altering operations in automated circuit synthesis using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: On each generation, four boatloads of emigrants, each consisting of B = 2% (the migration rate) of the node's subpopulation (selected on the basis of fitness) were dispatched to each of the four toroidally adjacent nodes <ref> (Andre and Koza 1996) </ref>. 4 . 1 . Re sults On generation 0 of one run, the best program in the population achieves a fitness of 3.01 and scores 61 hits (out of 72).
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996a. </year> <title> Four problems for which a computer program evolved by genetic programming is competitive with human performance. </title> <booktitle> Proceedings of the 1996 IEEE International Conference on Evolutionary Computation. </booktitle> <publisher> IEEE Press. </publisher> <pages> Pages 110. </pages>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996b. </year> <title> Automated WYWIWYG design of both the topology and component values of analog electrical circuits using genetic programming. </title>
Reference: <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Gene tic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1997. </year> <title> Evolution using genetic programming of a low-distortion 96 Decibel operational amplifier. </title> <booktitle> Proceedings of the 1997 ACM Symposium on Applied Computing, </booktitle> <address> New York: </address> <institution> Association for Computing Machinery. </institution> <note> 207 - 216. </note>
Reference: <author> Koza, John R., Bennett III, Forrest H, Lohn, Jason, Dunlap, Frank, Andre, David, and Keane, Martin A. </author> <year> 1997. </year> <title> Automated synthesis of computational circuits using genetic programming. </title> <booktitle> Proceedings of the 1997 IEEE Conference on Evolutionary Computation. </booktitle> <address> Piscataway, NJ: </address> <publisher> IEEE Press. </publisher> <pages> 447452. </pages>
Reference: <editor> Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <year> 1996. </year> <title> G e n e t i c Programming 1996: </title> <booktitle> Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: On each generation, four boatloads of emigrants, each consisting of B = 2% (the migration rate) of the node's subpopulation (selected on the basis of fitness) were dispatched to each of the four toroidally adjacent nodes <ref> (Andre and Koza 1996) </ref>. 4 . 1 . Re sults On generation 0 of one run, the best program in the population achieves a fitness of 3.01 and scores 61 hits (out of 72).
Reference: <editor> Koza, John R., Deb, Kalyanmoy, Dorigo, Marco, Fogel, David B., Garzon, Max, Iba, Hitoshi, and Riolo, Rick L. (editors). </editor> <booktitle> 1997. Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <month> July 1316, </month> <year> 1997, </year> <institution> Stanford University. </institution> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Koza, John R., and Rice, James P. </author> <year> 1992. </year> <title> G e ne tic Programming: The Movie. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Genetic Programming John Holland's pioneering Adaptation in Natural and Artificial Systems (1975) described how an analog of the evolutionary process can be applied to solving problems using what is now called the genetic algorithm. The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of the genetic algorithm in which the genetic population consists of computer programs. See also Koza and Rice 1992.
Reference: <author> Quarles, Thomas, Newton, A. R., Pederson, D. O., and Sangiovanni-Vincentelli, A. </author> <year> 1994. </year> <note> SPICE 3 Version 3F5 User's Manual. </note> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA. </address> <month> March </month> <year> 1994. </year>
Reference-contexts: The fitness calculation starts by executing individual circuit-constructing program tree. The component-creating and connection-modifying functions in the program tree are applied to the embryonic circuit to create a fully developed circuit. For this problem, the voltage VOUT is probed at node 5. The SPICE simulator <ref> (Quarles et al. 1994) </ref> is requested to perform a nested DC sweep. The nested DC sweep simulates the DC behavior of a circuit with two inputs.
References-found: 20

