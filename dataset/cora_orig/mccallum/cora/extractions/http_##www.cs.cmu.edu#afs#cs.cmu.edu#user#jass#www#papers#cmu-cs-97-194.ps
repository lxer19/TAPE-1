URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/jass/www/papers/cmu-cs-97-194.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/jass/www/papers.html
Root-URL: 
Title: ReMoS: A Resource Monitoring System for Network-Aware Applications  
Author: Tony DeWitt Thomas Gross Bruce Lowekamp Nancy Miller Peter Steenkiste Jaspal Subhlok Dean Sutherland 
Note: Effort sponsored by the Advanced Research Projects Agency and Rome Laboratory, Air Force Materiel Command, USAF, under agreement number F30602-96-1-0287. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Advanced Research Projects Agency, Rome Laboratory, or the U.S. Government.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: Dec 97  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> http://www.lanr.net/INFO. </institution>
Reference-contexts: A number of groups have looked at the benefits of explicit feedback to simplify and speed up adaptation, e.g. [15, 9]. However, the interfaces used in these efforts have been designed specifically for the scenarios being studied. A number of sites are collecting Internet traffic statistics, e.g. <ref> [1] </ref>. This information is not a in form that is usable for applications, and it is typically also at a coarser grain than applications would like to get.
Reference: [2] <institution> ATM User-Network Interface Specification. </institution> <note> Version 4.0, </note> <year> 1996. </year> <title> ATM Forum document. </title>
Reference-contexts: If other better information is available, Remos can use different sharing policies when estimating flow bandwidths. The basic sharing policy assumed by Remos corresponds to the max-min fair share policy [16], which is the basis of ATM flow control for ABR traffic <ref> [18, 2] </ref>, and is also used in other environments [14]. 4.3 Logical network topology Remos supports queries about the network structure and topology in addition to queries about specific flows in the network.
Reference: [3] <author> Bao, H., Bielak, J., Ghattas, O., O'Hallaron, D. R., Kallivokas, L. F., Shewchuk, J. R., and Xu, J. </author> <title> Earthquake ground motion modeling on parallel computers. </title> <booktitle> In Proceedings of Supercomputing '96 (Pittsburgh, </booktitle> <address> PA, </address> <month> Nov. </month> <year> 1996). </year>
Reference-contexts: Example applications of this nature developed at Carnegie Mellon include Quake modeling <ref> [3] </ref> and Airshed pollution modeling [26]. * Optimization of communication: Closely related to the first issue is the problem of exploiting low-level system information, such as network topology.
Reference: [4] <author> Bolliger, J., and Gross, T. </author> <title> A framework-based approach to the development of network-aware applications. </title> <note> In preparation. </note>
Reference-contexts: The network nodes and links jointly form the network. The benefits of adaptability in such a system have been argued in a number of contexts <ref> [22, 4] </ref>. We summarize some typical scenarios that can exploit network status information. * Node selection: When mapping an application onto a distributed system, it is necessary to determine the number of nodes (hosts) to be employed, and to select specific nodes for the computation.
Reference: [5] <author> Bonomi, F., and Fendick, K. </author> <title> The rate-based flow control framework for the available bit rate atm service. </title> <journal> IEEE Network Magazine 9, </journal> <volume> 2 (March/April 1995), </volume> <pages> 25-39. </pages>
Reference-contexts: Some networks do provide very specific feedback to endpoints on available network bandwidth as part of traffic management (flow control). The most important example is Available Bit Rate (ABR) traffic over ATM networks, where rate-based <ref> [5] </ref> or credit-based [7, 19] flow control tells each source how fast it can send. This information is currently only used at the ATM layer, but could be made available to higher-layer protocols or applications.
Reference: [6] <author> Case, J., McCloghrie, K., Rose, M., and Waldbusser, S. </author> <title> Protocol Operations for Version 2 of the Simple Network Management Protocol (SNMPv2), </title> <month> January </month> <year> 1999. </year> <note> RFC 1905. </note>
Reference-contexts: For example, some information may only be available through a static database, e.g., maintained off-line by a system administrator. Other information may accessibly in a systematic fashion using protocols such as SNMP <ref> [6] </ref>. Finally, some information, e.g. packet latency, is not routinely collected and may have to be measured directly by the Remos system using benchmarks specifically developed for this purpose.
Reference: [7] <author> Chandra, P., Fisher, A., Kosak, C., and Steenkiste, P. </author> <title> Experimental evaluation of atm flow control schemes. </title> <booktitle> In IEEE INFOCOM'97 (Kobe, </booktitle> <address> Japan, </address> <month> April </month> <year> 1996), </year> <journal> IEEE, </journal> <pages> pp. 1326-1334. 28 </pages>
Reference-contexts: Some networks do provide very specific feedback to endpoints on available network bandwidth as part of traffic management (flow control). The most important example is Available Bit Rate (ABR) traffic over ATM networks, where rate-based [5] or credit-based <ref> [7, 19] </ref> flow control tells each source how fast it can send. This information is currently only used at the ATM layer, but could be made available to higher-layer protocols or applications.
Reference: [8] <author> Clark, D., Shenker, S., and Zhang, L. </author> <title> Supporting real-time applications in an integrated services packet network: Architecture and mechanisms. </title> <booktitle> In Proceedings of the SIGCOMM '92 Symposium on Communications Architectures and Protocols (Baltimore, </booktitle> <month> August </month> <year> 1992), </year> <booktitle> ACM, </booktitle> <pages> pp. 14-26. </pages>
Reference-contexts: However, many applications with weaker real-time properties can adapt to the available network performance, for example by varying their frame rate, image quality, and processing load <ref> [8] </ref>. One system which can make use of such information is Odyssey [22], which manages a variety of adaptive applications across networks ranging from high-performance to wireless systems.
Reference: [9] <author> Eckhardt, D., and Steenkiste, P. </author> <title> A Wireless MAC with Service Guarantees. </title> <note> In preparation, </note> <year> 1998. </year>
Reference-contexts: The Viceroy is currently responsible for collecting information on network status, but instead, it could use Remos to retrieve this information. In fact, a similar modification has already been made to support the status of wireless networks <ref> [9] </ref>. Video applications are interested in flows between a client node and a small set of server nodes. <p> While these are beyond the scope of this project, they are the subject of other research efforts including the Amaranth project at Carnegie Mellon. A number of groups have looked at the benefits of explicit feedback to simplify and speed up adaptation, e.g. <ref> [15, 9] </ref>. However, the interfaces used in these efforts have been designed specifically for the scenarios being studied. A number of sites are collecting Internet traffic statistics, e.g. [1].
Reference: [10] <author> Forum, T. M. </author> <title> MPI: A Message Passing Interface. </title> <booktitle> In Proceedings of Supercomputing '93 (Oregon, </booktitle> <month> November </month> <year> 1993), </year> <month> ACM/IEEE, </month> <pages> pp. 878-883. </pages>
Reference-contexts: However, for completeness, we have included a simple interface to system resources in Remos. The Remos interface also does not support actual communication. Many communication libraries such as PVM [12] and MPI <ref> [10] </ref> provide a wealth of communication primitives, so there is no need to duplicate this aspect of distributed computing. In fact, as we will show later in the report, Remos could be used to optimize these libraries by customizing the implementation of group communication primitives for a particular network. <p> Of particular concern are collective operations, such as broadcast or vector reduction, where all nodes in the application are involved in communication simultaneously. Poorly chosen communication patterns for such operations result in bottlenecks and significant loss of performance [21]. Fortunately, implementations of MPI <ref> [10] </ref> can use the Remos interface to transparently optimize the communication needed by the application.
Reference: [11] <author> Foster, I., and Kesselman, K. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <journal> Journal of Supercomputer Applications. </journal> <note> To appear. </note>
Reference-contexts: Information provided by Remos (or similar interfaces) can be used by applications to adapt, and this will significantly influence the design of such network-aware applications. A variety of projects are addressing the problem of intelligent network-based computing, including Remulac at Carnegie Mellon, Globus <ref> [11] </ref>, and Legion [13]. Remos addresses a critical component of this problem. 3 Design challenges In this section we discuss the problems that a common, portable interface like Remos must address. <p> More recently, resource management systems have been designed for internet-wide computing, some examples being Globus <ref> [11] </ref> and Legion [13]. These systems are large in scope and address a variety of mechanisms that are necessary to make large scale distributed computing possible.
Reference: [12] <author> Geist, G. A., and Sunderam, V. S. </author> <title> The PVM System: Supercomputer Level Concurrent Computation on a Heterogeneous Network of Workstations. </title> <booktitle> In Proceedings of the Sixth Distributed Memory Computing Conference (April 1991), IEEE, </booktitle> <pages> pp. 258-261. </pages>
Reference-contexts: However, for completeness, we have included a simple interface to system resources in Remos. The Remos interface also does not support actual communication. Many communication libraries such as PVM <ref> [12] </ref> and MPI [10] provide a wealth of communication primitives, so there is no need to duplicate this aspect of distributed computing.
Reference: [13] <author> Grimshaw, A., Wulf, W., and Legion Team. </author> <title> The Legion vision of a worldwide virtual computer. </title> <journal> Communications of the ACM 40, </journal> <month> 1 (January </month> <year> 1997). </year>
Reference-contexts: Information provided by Remos (or similar interfaces) can be used by applications to adapt, and this will significantly influence the design of such network-aware applications. A variety of projects are addressing the problem of intelligent network-based computing, including Remulac at Carnegie Mellon, Globus [11], and Legion <ref> [13] </ref>. Remos addresses a critical component of this problem. 3 Design challenges In this section we discuss the problems that a common, portable interface like Remos must address. <p> More recently, resource management systems have been designed for internet-wide computing, some examples being Globus [11] and Legion <ref> [13] </ref>. These systems are large in scope and address a variety of mechanisms that are necessary to make large scale distributed computing possible. For example, Globus services include resource location and reservation, a communication interface, a unified resource information service, an authentication interface, and remote process creation mechanisms.
Reference: [14] <author> Hahne, E. L. </author> <title> Round-robin scheduling for max-min fairness in data networks. </title> <journal> IEEE Journal on Selected Areas in Communication 9, </journal> <month> 7 (September </month> <year> 1991). </year>
Reference-contexts: The basic sharing policy assumed by Remos corresponds to the max-min fair share policy [16], which is the basis of ATM flow control for ABR traffic [18, 2], and is also used in other environments <ref> [14] </ref>. 4.3 Logical network topology Remos supports queries about the network structure and topology in addition to queries about specific flows in the network.
Reference: [15] <author> Inouye, J., Cen, S., Pu, C., and Walpole, J. </author> <title> System support for mobile multimedia applications. </title> <booktitle> In Proceedings of the 7th International Workshop on Network and Operating System Support for Digital Audio and Video (St. </booktitle> <address> Louis, </address> <month> May </month> <year> 1997), </year> <pages> pp. 143-154. </pages>
Reference-contexts: While these are beyond the scope of this project, they are the subject of other research efforts including the Amaranth project at Carnegie Mellon. A number of groups have looked at the benefits of explicit feedback to simplify and speed up adaptation, e.g. <ref> [15, 9] </ref>. However, the interfaces used in these efforts have been designed specifically for the scenarios being studied. A number of sites are collecting Internet traffic statistics, e.g. [1].
Reference: [16] <author> Jaffe, J. M. </author> <title> Bottleneck flow control. </title> <journal> IEEE Transactions on Communications 29, </journal> <month> 7 (July </month> <year> 1981), </year> <pages> 954-962. </pages>
Reference-contexts: If other better information is available, Remos can use different sharing policies when estimating flow bandwidths. The basic sharing policy assumed by Remos corresponds to the max-min fair share policy <ref> [16] </ref>, which is the basis of ATM flow control for ABR traffic [18, 2], and is also used in other environments [14]. 4.3 Logical network topology Remos supports queries about the network structure and topology in addition to queries about specific flows in the network.
Reference: [17] <author> Jain, R. </author> <title> The Art of Computer Systems Performance Analysis. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1991. </year>
Reference-contexts: Because this distribution is not necessarily known, and would be difficult to represent even if it could be determined by the network, 7 and nodes 1-8 are compute nodes. we present the variability of network parameters using quartiles, which is considered the best choice for an unknown data distribution <ref> [17] </ref>. 4.5 Examples Before we describe the actual Remos API, we would like to illustrate the abstraction of a "logical topology" using some simple examples. annotated with network performance information. However, it is just as important that the nodes include performance information as well.
Reference: [18] <author> Jain, R. </author> <title> Congestion control and traffic management in ATM networks: Recent advances and a survey. Computer Networks and ISDN Systems (February 1995). </title>
Reference-contexts: If other better information is available, Remos can use different sharing policies when estimating flow bandwidths. The basic sharing policy assumed by Remos corresponds to the max-min fair share policy [16], which is the basis of ATM flow control for ABR traffic <ref> [18, 2] </ref>, and is also used in other environments [14]. 4.3 Logical network topology Remos supports queries about the network structure and topology in addition to queries about specific flows in the network.
Reference: [19] <author> Kung, H., Blackwell, T., and Chapman, A. </author> <title> Credit update protocol for flow-controlled ATM networks: Statistical mulitplexing and adaptive credit allocation. </title> <booktitle> In Proceedings of the SIGCOMM '94 Symposium on Communications Architectures and Protocols (August 1994), ACM, </booktitle> <pages> pp. 101-114. </pages>
Reference-contexts: Some networks do provide very specific feedback to endpoints on available network bandwidth as part of traffic management (flow control). The most important example is Available Bit Rate (ABR) traffic over ATM networks, where rate-based [5] or credit-based <ref> [7, 19] </ref> flow control tells each source how fast it can send. This information is currently only used at the ATM layer, but could be made available to higher-layer protocols or applications.
Reference: [20] <author> Litzkow, M., Livny, M., and Mutka, M. </author> <title> Condor | A hunter of idle workstations. </title> <booktitle> In Proceedings of the Eighth Conference on Distributed Computing Systems (San Jose, </booktitle> <address> California, </address> <month> June </month> <year> 1988). </year>
Reference-contexts: An application may use this information to control its own execution or the system may place the application on nodes that have the minimum load. Examples of resource managers include research systems like Condor <ref> [20] </ref> and commercial products like LSF (Load Sharing Facility). While such systems can be adequate for compute-intensive applications, they are not suitable for applications that handle movement of large data sets and applications based on internetworking, since they do not include a notion of communication resources.
Reference: [21] <author> Lowekamp, B. B., and Beguelin, A. </author> <title> Eco: Efficient collective operations for communication on heterogeneous networks. </title> <booktitle> In Proceedings of the 10th International Parallel Processing Symposium (April 1996), </booktitle> <pages> pp. 399-405. </pages>
Reference-contexts: Of particular concern are collective operations, such as broadcast or vector reduction, where all nodes in the application are involved in communication simultaneously. Poorly chosen communication patterns for such operations result in bottlenecks and significant loss of performance <ref> [21] </ref>. Fortunately, implementations of MPI [10] can use the Remos interface to transparently optimize the communication needed by the application.
Reference: [22] <author> Noble, B., Satyanarayanan, M., Narayanan, D., Tilton, J., Flinn, J., and Walker, K. </author> <title> Agile application-aware adaptation for mobility. </title> <booktitle> In Proceedings of the Sixteenth Symposium on Operating System Principles (October 1997), </booktitle> <pages> pp. 276-287. </pages>
Reference-contexts: The network nodes and links jointly form the network. The benefits of adaptability in such a system have been argued in a number of contexts <ref> [22, 4] </ref>. We summarize some typical scenarios that can exploit network status information. * Node selection: When mapping an application onto a distributed system, it is necessary to determine the number of nodes (hosts) to be employed, and to select specific nodes for the computation. <p> An example scenario is energy consumption in a battery-powered environment <ref> [22] </ref>. In the above usage examples, "system-aware" applications will in general have to be aware of all system resources, including both network and endpoint resources. The Remos interface focuses on providing application with information about networking resources only. <p> However, many applications with weaker real-time properties can adapt to the available network performance, for example by varying their frame rate, image quality, and processing load [8]. One system which can make use of such information is Odyssey <ref> [22] </ref>, which manages a variety of adaptive applications across networks ranging from high-performance to wireless systems. Odyssey combines protocol specific adaptations, such as frame rate and quality, with function and data shipping, to select the best combination of network and computational resources to achieve the desired application quality metrics.
Reference: [23] <author> Siegell, B., and Steenkiste, P. </author> <title> Automatic selection of load balancing parameters using compile-time and run-time information. </title> <journal> Concurrency Practice and Experience 9, </journal> <volume> 3 (1996), </volume> <pages> 275-317. </pages>
Reference-contexts: However, this analysis assumes static network behavior, and a system like Remos is required for adaptation in a dynamic network environment. Two other examples of network-aware applications include a pipelined application that adapts the pipeline depth <ref> [23] </ref>, and simple distributed matrix multiply that selects the optimal number of nodes [29]. In both cases, applications used simple benchmarks to characterizing network performance. Remos provides a simpler and possibly more accurate alternative. 6.2 Collective communication Parallel message-passing applications are often very sensitive to communication performance.
Reference: [24] <author> Steenkiste, P., Fisher, A., and Zhang, H. Darwin: </author> <title> Resource management in application-aware networks. </title> <type> Tech. Rep. </type> <institution> CMU-CS-97-195, Carnegie Mellon University, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: Once we have gained some experience with this version of Remos, we will extend it to include other network components. Support for confidence metrics will also be added We plan to integrate Remos with the CMU Darwin system. Darwin <ref> [24] </ref> is developing sophisticated resources management techniques for networks. It combines hierarchical resource scheduling, support for virtual subnets, and customization of resource allocation and adaptation to create an "application-aware" network, i.e. a network that can be tailored to provide application-specific services.
Reference: [25] <author> Stemm, M., Seshan, S., and Katz, R. Spand: </author> <title> Shared passive network performance discovery. </title> <booktitle> In USENIX Symposium on Internet Technologies and Systems (Monterey, </booktitle> <address> CA, </address> <month> June </month> <year> 1997). </year>
Reference-contexts: Another class of related research in the Internet is the collection and use of application specific performance data, e.g. a Web browser that collects information on what sites had good response times <ref> [25] </ref>. 9 Concluding remarks Remos allows network-aware applications to obtain information about their execution environment. Remos provides a uniform interface so that portable network-aware applications can be developed independent of any particular network architecture. Network architectures differ significantly in the accuracy and depth of status information that can be obtained.
Reference: [26] <author> Subhlok, J., Steenkiste, P., Stichnoth, J., and Lieu, P. </author> <title> Airshed pollution modeling: A case study in application development in an HPF environment. </title> <booktitle> In 12th International Parallel Processing Symposium (Orlando, </booktitle> <address> FL, </address> <month> April </month> <year> 1998). </year> <note> To appear. 29 </note>
Reference-contexts: Example applications of this nature developed at Carnegie Mellon include Quake modeling [3] and Airshed pollution modeling <ref> [26] </ref>. * Optimization of communication: Closely related to the first issue is the problem of exploiting low-level system information, such as network topology.
Reference: [27] <author> Subhlok, J., and Vondran, G. </author> <title> Optimal latency-throughput tradeoffs for data parallel pipelines. </title> <booktitle> In Eighth Annual ACM Symposium on Parallel Algorithms and Architectures (Padua, </booktitle> <address> Italy, </address> <month> June </month> <year> 1996), </year> <pages> pp. 62-71. </pages>
Reference-contexts: It can periodically reissue the query, or it can ask for a callback when conditions in the network change considerably. Adaptation is also widely used in the area of high performance computing. The Fx compiler <ref> [28, 27] </ref> has successfully used automatic analysis to assign nodes to meet the performance requirements of applications containing multiple tasks. However, this analysis assumes static network behavior, and a system like Remos is required for adaptation in a dynamic network environment.
Reference: [28] <author> Subhlok, J., and Yang, B. </author> <title> A new model for integrated nested task and data parallel programming. </title> <booktitle> In Proceedings of the Sixth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (June 1997), ACM. </booktitle>
Reference-contexts: If the application has no flexibility with regard to the amount of communication and computation that must be performed, then the only option is to modify the mapping during execution to take the changes into account. The Fx programming environment at Carnegie Mellon <ref> [28] </ref> allows dynamic remapping of programs, although it does not currently have facilities to query its execution environment * Application quality metrics: Some applications want to meet an application-specific quality model, e.g., jitter-free display of an image sequence, or synchronized delivery of audio and video signals. <p> It can periodically reissue the query, or it can ask for a callback when conditions in the network change considerably. Adaptation is also widely used in the area of high performance computing. The Fx compiler <ref> [28, 27] </ref> has successfully used automatic analysis to assign nodes to meet the performance requirements of applications containing multiple tasks. However, this analysis assumes static network behavior, and a system like Remos is required for adaptation in a dynamic network environment.
Reference: [29] <author> Tangmunarunkit, H., and Steenkiste, P. </author> <title> Network-aware distributed computing: A case study. </title> <booktitle> In Second Workshop on Runtime Systems for Parallel Programming (RTSPP) (Orlando, </booktitle> <month> March </month> <year> 1998), </year> <note> IEEE, p. Proceedings to be published by Springer. Held in conjunction with IPPS '98. </note>
Reference-contexts: However, this analysis assumes static network behavior, and a system like Remos is required for adaptation in a dynamic network environment. Two other examples of network-aware applications include a pipelined application that adapts the pipeline depth [23], and simple distributed matrix multiply that selects the optimal number of nodes <ref> [29] </ref>. In both cases, applications used simple benchmarks to characterizing network performance. Remos provides a simpler and possibly more accurate alternative. 6.2 Collective communication Parallel message-passing applications are often very sensitive to communication performance.
Reference: [30] <author> Tennenhouse, D., and Wetherall, D. </author> <title> Towards and active network architecture. </title> <journal> Computer Communication Review 26, </journal> <month> 2 (August </month> <year> 1995), </year> <pages> 5-18. 30 </pages>
Reference-contexts: Customization of resource allocation and adaptation is achieved by downloading application code and state into the network, reflecting the use of of active networking <ref> [30] </ref>. Darwin can enhance Remos functionality in a variety of ways.
References-found: 30

