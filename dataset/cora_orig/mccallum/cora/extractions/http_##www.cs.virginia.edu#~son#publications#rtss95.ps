URL: http://www.cs.virginia.edu/~son/publications/rtss95.ps
Refering-URL: http://www.cs.virginia.edu/~son/publications.html
Root-URL: http://www.cs.virginia.edu
Title: Managing Contention and Timing Constraints in a Real-Time Database System  
Author: Matthew R. Lehr, Young-Kuk Kim and Sang H. Son 
Address: Charlottesville, VA 22903, USA  
Affiliation: Computer Science Department University of Virginia  
Abstract: Previous work in real-time database management systems (RT-DBMS) has primarily based on simulation. This paper discusses how current real-time technology has been applied to architect an actual RT-DBMS on a real-time microkernel operating system. A real RT-DBMS must confront many practical issues which simulations typically ignore: race conditions, concurrency, and asynchrony. The challenge of constructing a RT-DBMS is divided into three basic problems: dealing with resource contention, dealing with data contention, and enforcing timing constraints. In this paper, we present our approaches to each problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling Real-Time Transactions: A Performance Evaluation. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(3) </volume> <pages> 513-560, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: StarBase uses no a priori information about transaction workload and discards tardy transactions at their deadline points. In order to realize many of these goals, StarBase is constructed on top of RT-Mach, a real-time operating system developed at Carnegie Mellon University [11]. StarBase differs from previous RT-DBMS work <ref> [1, 2, 3] </ref> in that a) it relies on a real-time operating system which provides priority-based scheduling and time-based synchronization, and b) it deals explicitly with data contention and deadline handling in addition to transaction scheduling, the traditional focus of simulation studies.
Reference: [2] <author> J. R. Haritsa. </author> <title> Transaction Scheduling in Firm Real-Time Database Systems. </title> <type> PhD thesis, </type> <institution> University of Wisconsin-Madison, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: StarBase uses no a priori information about transaction workload and discards tardy transactions at their deadline points. In order to realize many of these goals, StarBase is constructed on top of RT-Mach, a real-time operating system developed at Carnegie Mellon University [11]. StarBase differs from previous RT-DBMS work <ref> [1, 2, 3] </ref> in that a) it relies on a real-time operating system which provides priority-based scheduling and time-based synchronization, and b) it deals explicitly with data contention and deadline handling in addition to transaction scheduling, the traditional focus of simulation studies. <p> To resolve data conflicts, StarBase uses a con-currency control implementation which draws heavily from the work of two research groups. First, Har-itsa reasoned that optimistic concurrency control can outperform lock-based algorithms in a firm real-time setting <ref> [2] </ref>. He then developed a real-time optimistic concurrency control method, WAIT-X (S), which he found empirically superior, over a wide range of resource availability and system workload levels, to a previously proposed real-time lock-based concurrency control method called 2PL-HP [2]. <p> concurrency control can outperform lock-based algorithms in a firm real-time setting <ref> [2] </ref>. He then developed a real-time optimistic concurrency control method, WAIT-X (S), which he found empirically superior, over a wide range of resource availability and system workload levels, to a previously proposed real-time lock-based concurrency control method called 2PL-HP [2]. Second, Lee and Son devised an improvement to the conflict detection of optimistic concurrency control in general, which StarBase integrates with Haritsa's WAIT-X (S) [6]. 4.1 WAIT-X (S) WAIT-X is optimistic, using prospective conflict detection and priority-based conflict resolution.
Reference: [3] <author> J. Huang. </author> <title> Real-Time Transaction Processing: Design, Implementation, and Performance Evaluation. </title> <type> PhD thesis, </type> <institution> University of Massachusetts at Amherst, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: StarBase uses no a priori information about transaction workload and discards tardy transactions at their deadline points. In order to realize many of these goals, StarBase is constructed on top of RT-Mach, a real-time operating system developed at Carnegie Mellon University [11]. StarBase differs from previous RT-DBMS work <ref> [1, 2, 3] </ref> in that a) it relies on a real-time operating system which provides priority-based scheduling and time-based synchronization, and b) it deals explicitly with data contention and deadline handling in addition to transaction scheduling, the traditional focus of simulation studies.
Reference: [4] <author> Young-Kuk Kim. </author> <title> Predictability and Consistency in Real-Time Transaction Processing. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Virginia, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: With prior knowledge, a RT-DBMS can preallocate resources and arrange transaction schedules to minimize conflicts, resulting in more predictable service. Execution time estimates and off-line analysis can be used to increase DBMS-wide predictability. Temporal consistency <ref> [4] </ref>, where data used to derive new data must be consistent within a certain validity interval, is also a matter to be explored. Once the basic, real-time, POSIX.4-compliant functionality needed to support a firm real-time database has been established, StarBase can be ported to other platforms.
Reference: [5] <author> T. Kitayama, T. Nakajima, and H. Tokuda. RT-IPC: </author> <title> An IPC Extension for Real-Time Mach. </title> <type> Technical report, </type> <institution> Carnegie-Mellon University, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: The timing and priority information is then used as input to the RT-Mach scheduler. RT-Mach also has striven to implement priority-based resource scheduling through its interprocess communication (RT-IPC) <ref> [5] </ref> and thread synchronization (RT-Sync) [10] facilities. RT-Mach implements BPI itself as a combination of priority queuing and priority inheritance. <p> Transaction manager priorities are not specified explicitly by StarBase, however. Each obtains the correct priority assignment automatically upon receipt of a new transaction via RT-IPC's priority handoff mechanism <ref> [5] </ref>. 3.2 Memory Manager Transactions, depending on the nature of their operations, require some dynamic allocation of memory during their execution. StarBase maintains a Small Memory Manager to allocate and manage dynamic memory.
Reference: [6] <author> J. Lee and S. H. Son. </author> <title> Using Dynamic Adjustment of Serialization Order for Real-Time Database Systems. </title> <booktitle> In Proc. of the 14th Real-Time Systems Symposium, </booktitle> <pages> pages 66-75, </pages> <address> Raleigh-Durham, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Second, Lee and Son devised an improvement to the conflict detection of optimistic concurrency control in general, which StarBase integrates with Haritsa's WAIT-X (S) <ref> [6] </ref>. 4.1 WAIT-X (S) WAIT-X is optimistic, using prospective conflict detection and priority-based conflict resolution. WAIT-X's conflict detection is prospective in the sense that it looks for conflicts between the validator and transactions which may commit sometime in the future (i.e., running transactions). <p> all transactions in the wait queue are retried individually in priority order and if the CCMgr decides that one in particular commits or aborts, it signals the corresponding waiting condition variable, unblocking the formerly suspended transaction manager. 4.3 Precise Serialization Precise serialization is a conflict-detection scheme for optimistic concurrency control <ref> [6] </ref>. The goal of precise serialization is to identify transaction conflicts which strict prospective conflict detection considers irreconcilable but can actually be resolved without aborting the transactions involved.
Reference: [7] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: RT-Mach's services in turn are based on two major ideas (among others) which have been developed to ensure the allocation of resources to more important tasks in real-time systems. Those ideas are priority-based CPU scheduling <ref> [7] </ref> and the Basic Priority Inheritance Protocol (BPI) [9] for non-preemptible resources. With both ideas, tasks to be performed are ranked by their relative priorities (a function of their criticality and/or feasibility), and the highest priority tasks are granted access to the resource in question.
Reference: [8] <author> S. Savage and H. Tokuda. </author> <title> Real-Time Mach Timers: Exporting Time to the User. </title> <booktitle> In Proceedings of the Third USENIX Mach Symposium, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: The deadline handler thread then uses a real-time timer to block the thread until the deadline expires. A real-time timer is an RT-Mach abstraction which allows real-time threads to synchronize with particular points in time as measured by real-time clock hardware devices <ref> [8] </ref>. RT-Mach provides a default deadline handler constructed from the building blocks discussed above, but it is inadequate for StarBase's purposes. First, the default deadline handler supports only threads with uniform deadlines.
Reference: [9] <author> L. Sha, R. Rajkumar, S. H. Son, and C. Chang. </author> <title> A Real-Time Locking Protocol. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 782-800, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: RT-Mach's services in turn are based on two major ideas (among others) which have been developed to ensure the allocation of resources to more important tasks in real-time systems. Those ideas are priority-based CPU scheduling [7] and the Basic Priority Inheritance Protocol (BPI) <ref> [9] </ref> for non-preemptible resources. With both ideas, tasks to be performed are ranked by their relative priorities (a function of their criticality and/or feasibility), and the highest priority tasks are granted access to the resource in question.
Reference: [10] <author> H. Tokuda and T. Nakajima. </author> <title> Evaluation of Real-Time Synchronization in Real-Time Mach. </title> <booktitle> In Proc. of the Second USENIX Mach Workshop, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: The timing and priority information is then used as input to the RT-Mach scheduler. RT-Mach also has striven to implement priority-based resource scheduling through its interprocess communication (RT-IPC) [5] and thread synchronization (RT-Sync) <ref> [10] </ref> facilities. RT-Mach implements BPI itself as a combination of priority queuing and priority inheritance.
Reference: [11] <author> H. Tokuda, T. Nakajima, and P. Rao. </author> <title> Real-Time Mach: Towards Predictable Real-Time Systems. </title> <booktitle> In Proc. of the USENIX 1990 Mach Workshop, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: StarBase uses no a priori information about transaction workload and discards tardy transactions at their deadline points. In order to realize many of these goals, StarBase is constructed on top of RT-Mach, a real-time operating system developed at Carnegie Mellon University <ref> [11] </ref>. StarBase differs from previous RT-DBMS work [1, 2, 3] in that a) it relies on a real-time operating system which provides priority-based scheduling and time-based synchronization, and b) it deals explicitly with data contention and deadline handling in addition to transaction scheduling, the traditional focus of simulation studies. <p> RT-Mach provides several priority-based scheduling regimes, including Fixed Priority, Earliest Deadline First, Rate Monotonic, and Deadline Monotonic. RT-Mach's real-time thread model <ref> [11] </ref> distinguishes real-time threads of execution from ordinary ones, requiring the explicit specification of timing constraints and criticality on a per-thread basis. The timing and priority information is then used as input to the RT-Mach scheduler.
References-found: 11

