URL: http://www.cs.cmu.edu/afs/cs/user/rwh/public/www/papers/cps-fomega/jfp95.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/user/rwh/public/www/papers.html
Root-URL: 
Title: Operational Interpretations of an Extension of F with Control Operatorsy  of "Explicit Polymorphism and CPS Conversion"  
Author: Robert Harperz and Mark Lillibridgex 
Keyword: Bah Blah Blaah. Bah Blah Blaah.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: 1 (1): 1-000, January 1993  
Note: J. Functional Programming  c 1993 Cambridge University Press 1  Capsule Review (To be provided by the editor)  This is a revised and expanded version  presented at the Twenthieth Symposium on Principles of Programming Languages, Charleston, SC, January, 1993. (Harper and Lillibridge, 1993a). This work was sponsored by the Defense Advanced Research Projects Agency, CSTO, under the title "The Fox Project: Advanced Development of Systems Software", ARPA Order No. 8313, issued by ESD/AVS under Contract No. F19628-91-C-0168. Electronic mail address: rwh@cs.cmu.edu. Supported by a National Science Foundation Graduate Fellowship. Electronic mail ad dress: mdl@cs.cmu.edu.  
Abstract: We study the operational semantics of an extension of Girard's System F ! with two control operators: an abort operation that abandons the current control context, and a callcc operation that captures the current control context. Two classes of operational semantics are considered, each with a call-by-value and a call-by-name variant, differing in their treatment of polymorphic abstraction and instantiation. Under the standard semantics polymorphic abstractions are values and polymorphic instantiation is a significant computation step; under the ML-like semantics evaluation proceeds beneath polymorphic abstractions and polymorphic instantiation is computationally insignificant. Compositional, type-preserving continuation-passing style (cps) transformation algorithms are given for the standard semantics, resulting in terms on which all four evaluation strategies coincide. This has as a corollary the soundness and termination of well-typed programs under the standard evaluation strategies. In contrast, such results are obtained for the call-by- value ML-like strategy only for a restricted sub-language in which constructor abstractions are limited to values. The ML-like call-by-name semantics is indistinguishable from the standard call-by-name semantics when attention is limited to complete Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. Bah Blah Blaah. programs.
Abstract-found: 1
Intro-found: 1
Reference: <author> Andrew W. Appel. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: <author> Val Breazu-Tannen, Thierry Coquand, Carl A. Gunter, and Andre Scedrov. </author> <title> Inheritance as implicit coercion. </title> <journal> Information and Computation, </journal> <volume> 93 </volume> <pages> 172-221, </pages> <year> 1991. </year>
Reference: <author> Rod Burstall, David MacQueen, and Donald Sannella. </author> <title> HOPE: An experimental applicative language. </title> <booktitle> In Proceedings of the 1980 LISP Conference, </booktitle> <pages> pages 136-143, </pages> <address> Stanford, California, </address> <year> 1980. </year> <institution> Stanford University. </institution>
Reference: <author> Luca Cardelli. </author> <title> Typeful programming. </title> <type> Technical Report 45, </type> <institution> DEC Systems Research Center, </institution> <year> 1989. </year>
Reference: <author> Luca Cardelli, Simone Martini, John C. Mitchell, and Andre Scedrov. </author> <title> An extension of System F with subtyping. </title> <type> Research Report 80, </type> <institution> Digital Systems Research Center, Palo Alto, California, </institution> <month> December </month> <year> 1991. </year>
Reference: <author> William Clinger and Jonathan Rees. </author> <title> Revised 4 Report on the Algorithmic Language Scheme. </title> <journal> LISP Pointers, </journal> <volume> 5(3) </volume> <pages> 1-55, </pages> <year> 1991. </year>
Reference: <author> Eric C. Cooper and J. Gregory Morrisett. </author> <title> Adding threads to Standard ML. </title> <type> Technical Report CMU-CS-90-186, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> December </month> <year> 1990. </year>
Reference: <author> Pierre-Louis Curien and Giorgio Ghelli. </author> <title> Coherence of subsumption. </title> <type> Technical Report LIENS-90-10, </type> <institution> Laboratoire d'Informatique de l'Ecole Normale Superieure, Paris, </institution> <month> Febru-ary </month> <year> 1990. </year>
Reference: <author> Bruce Duba, Robert Harper, and David MacQueen. </author> <title> Typing first-class continuations in ML. </title> <booktitle> In Eighteenth ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1991. </year>
Reference: <author> Matthias Felleisen and Robert Hieb. </author> <title> The revised report on the syntactic theories of sequential control and state. </title> <journal> Theoretical Computer Science, </journal> <volume> 10(2) </volume> <pages> 235-271, </pages> <year> 1992. </year>
Reference: <author> Michael J. Fischer. </author> <title> Lambda-calculus schemata. </title> <journal> LISP and Symbolic Computation, </journal> 6(3/4):259-288, November 1993. Projet Formel. CAML: The reference manual. Technical report, INRIA-ENS, June 1987. Operational Interpretations of F ! <volume> 23 </volume> Jean-Yves Girard. Interpretation Fonctionnelle et Elimination des Coupures dans l'Arithmetique d'Ordre Superieure. PhD thesis, Universite Paris VII, 1972. 
Reference: <author> Jean-Yves Girard, Yves Lafont, and Paul Taylor. </author> <title> Proofs and Types, </title> <booktitle> volume 7 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference: <author> Michael Gordon, Robin Milner, and Christopher Wadsworth. </author> <title> Edinburgh LCF: A Mechanized Logic of Computation, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference: <author> Timothy Griffin. </author> <title> A formulae-as-types notion of control. </title> <booktitle> In Seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, CA, </address> <month> January </month> <year> 1990. </year> <note> ACM, ACM. </note>
Reference: <author> Robert Harper, Bruce Duba, and David MacQueen. </author> <title> Typing first-class continuations in ML. </title> <journal> Journal of Functional Programming, </journal> <volume> 3(4) </volume> <pages> 465-484, </pages> <month> October </month> <year> 1993. </year> <note> (See also (Duba et al., 1992).). </note>
Reference: <author> Robert Harper and Mark Lillibridge. </author> <title> Explicit polymorphism and CPS conversion. </title> <booktitle> In Twentieth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 206-219, </pages> <address> Charleston, SC, </address> <month> January </month> <year> 1993. </year> <note> ACM, ACM. </note>
Reference: <author> Robert Harper and Mark Lillibridge. </author> <title> Polymorphic type assignment and CPS conversion. </title> <editor> In Olivier Danvy and Carolyn Talcott, editors, </editor> <booktitle> Proceedings of the ACM SIGPLAN Workshop on Continuations CW92, </booktitle> <pages> pages 13-22, </pages> <address> Stanford, CA 94305, </address> <month> June </month> <year> 1992. </year> <institution> Department of Computer Science, Stanford University. </institution> <note> Published as technical report STAN-CS-92-1426. </note>
Reference: <author> Robert Harper and Mark Lillibridge. </author> <title> Polymorphic type assignment and CPS conversion. </title> <journal> LISP and Symbolic Computation, </journal> <volume> 6(4) </volume> <pages> 361-380, </pages> <month> November </month> <year> 1993. </year> <note> (See also (Harper and Lillibridge, 1992).). </note>
Reference: <author> Robert Harper and John C. Mitchell. </author> <title> On the type structure of Standard ML. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(2) </volume> <pages> 211-252, </pages> <month> April </month> <year> 1993. </year>
Reference: <author> Robert Harper and Greg Morrisett. </author> <title> Compiling with non-parametric polymorphism. </title> <type> Technical Report CMU-CS-94-122, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> February </month> <year> 1994. </year> <note> (Also published as Fox Memorandum CMU-CS-FOX-94-03). </note>
Reference: <author> Christopher T. Haynes, Daniel P. Friedman, and Mitchell Wand. </author> <title> Obtaining coroutines from continuations. </title> <journal> Journal of Computer Languages, </journal> <volume> 11 </volume> <pages> 143-153, </pages> <year> 1986. </year>
Reference: <author> Paul Hudak and Philip Wadler. </author> <title> Report on the Programming Language Haskell, </title> <note> Version 1.0. Research Report YALEU/DCS/RR-777, </note> <institution> Yale University, </institution> <month> April </month> <year> 1990. </year>
Reference: <author> D. Kranz, R. Kelsey, J. Rees, P. Hudak, J.Philbin, and N. Adams. </author> <title> Orbit: An optimizing compiler for Scheme. </title> <booktitle> In Proc. SIGPLAN Symposium on Compiler Construction, </booktitle> <pages> pages 219-233. </pages> <booktitle> ACM SIGPLAN, </booktitle> <year> 1986. </year>
Reference: <author> Xavier Leroy. </author> <title> Unboxed objects and polymorphic typing. </title> <booktitle> In Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Albuquerque, </booktitle> <pages> pages 177-188. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1992. </year>
Reference: <author> Xavier Leroy and Michel Mauny. </author> <title> The Caml Light system, version 0.5 | documentation and user's guide. </title> <type> Technical Report L-5, </type> <institution> INRIA, </institution> <year> 1992. </year>
Reference: <author> David MacQueen. </author> <title> Using dependent types to express modular structure. </title> <booktitle> In Thirteenth ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1986. </year>
Reference: <author> Albert R. Meyer and Mitchell Wand. </author> <title> Continuation semantics in typed lambda calculi (summary). </title> <editor> In Rohit Parikh, editor, </editor> <booktitle> Logics of Programs, volume 193 of Lecture Notes in Computer Science, </booktitle> <pages> pages 219-224. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference: <author> Robin Milner. </author> <title> A theory of type polymorphism in programming languages. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17 </volume> <pages> 348-375, </pages> <year> 1978. </year>
Reference: <author> Robin Milner and Mads Tofte. </author> <title> Commentary on Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: <author> John Mitchell and Robert Harper. </author> <title> The essence of ML. </title> <booktitle> In Fifteenth ACM Symposium on 24 R. </booktitle> <editor> Harper and M. </editor> <booktitle> Lillibridge Principles of Programming Languages, </booktitle> <address> San Diego, California, </address> <month> January </month> <year> 1988. </year>
Reference: <author> Benjamin C. Pierce. </author> <title> Intersection types and bounded polymorphism. </title> <editor> In M. Bezem and J.F. Groote, editors, </editor> <booktitle> Proceedings of the International Conference on Typed Lambda Calculi and Applications, TLCA'93, </booktitle> <pages> pages 346-360, </pages> <address> Utrecht, The Netherlands, </address> <month> March </month> <year> 1993. </year> <note> Springer-Verlag LNCS 664. (To appear in Mathematical Structures in Computer Science, 1995.) </note> <editor> Gordon Plotkin. </editor> <title> Call-by-name, call-by-value, and the lambda calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 1 </volume> <pages> 125-159, </pages> <year> 1975. </year>
Reference: <author> John H. Reppy. </author> <title> CML: A higher-order concurrent language. </title> <booktitle> In ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 293-305, </pages> <month> June </month> <year> 1991. </year>
Reference: <author> John C. Reynolds. </author> <title> Definitional interpreters for higher-order programming languages. </title> <booktitle> In Conference Record of the 25th National ACM Conference, </booktitle> <pages> pages 717-740, </pages> <address> Boston, </address> <month> August </month> <year> 1972. </year> <note> ACM. </note>
Reference: <author> John C. Reynolds. </author> <title> Towards a theory of type structure. </title> <booktitle> In Colloq. sur la Programmation, volume 19 of Lecture Notes in Computer Science, </booktitle> <pages> pages 408-423. </pages> <publisher> Springer-Verlag, </publisher> <year> 1974. </year>
Reference: <author> John C. Reynolds. </author> <title> Preliminary design of the programming language Forsythe. </title> <type> Technical Report CMU-CS-88-159, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> June </month> <year> 1988. </year>
Reference: <author> John C. Reynolds. </author> <title> The discoveries of continuations. </title> <journal> LISP and Symbolic Computation, </journal> 6(3/4):233-248, November 1993. 
Reference: <author> Guy L. Steele, Jr. RABBIT: </author> <title> A compiler for SCHEME. </title> <type> Technical Report Memo 474, </type> <institution> MIT AI Laboratory, </institution> <year> 1978. </year> <title> Mads Tofte. Type inference for polymorphic references. </title> <journal> Information and Computation, </journal> <volume> 89 </volume> <pages> 1-34, </pages> <month> November </month> <year> 1990. </year>
References-found: 38

