URL: ftp://ftp.ifad.dk/pub/papers/tphols97.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: An Isabelle-based Theorem Prover for VDM-SL  
Author: Sten Agerholm and Jacob Frost 
Address: DK-2800 Lyngby, Denmark  
Affiliation: Odense M, Denmark 2 Department of Information Technology, Technical University of Denmark,  
Pubnum: 1 IFAD, Forskerparken 10, DK-5230  
Abstract: This paper describes the theorem proving component of a larger software development environment for the ISO standardized specification language VDM-SL. This component is constructed as an instan-tiation of the generic theorem prover Isabelle with a VDM-SL variant of the Logic of Partial Functions (LPF). We describe the development of this instantiation, focusing on both the embedding of syntax and the automation of proof support, which is a challenge due to the three-valued nature of LPF.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Agerholm. </author> <title> Translating specifications in VDM-SL to PVS. </title> <editor> In J. von Wright, J. Grundy, and J. Harrison, editors, </editor> <booktitle> Proceedings of the 9th International Conference on Theorem Proving in Higher Order Logics (TPHOLs'96), volume 1125 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Moreover, Isabelle is relatively easy to adapt to VDM-SL and to integrate with the IFAD VDM-SL Toolbox (see [2]), unlike a closed system such as PVS <ref> [1] </ref>. A generic framework like Isabelle allows quick implementation of powerful theorem provers through reuse. However, we have seen some limitations to reuse when dealing with a three-valued logic like VDM-LPF. In particular, the generic simplifier and classical reasoning package appear not to be easy to use with VDM-LPF.
Reference: 2. <author> S. Agerholm and J. Frost. </author> <title> Towards an integrated CASE and theorem proving tool for VDM-SL. In FME'97, </title> <publisher> LNCS 1313. Springer-Verlag, </publisher> <month> September </month> <year> 1997. </year>
Reference-contexts: However, at present we are merely making experiments to investigate the design of such a proof tool. One of these experiments concerns a "proof engine", by which we understand the basic theorem proving component of a more generally usable proof environment (see <ref> [2] </ref>). This paper describes this basic component. The proof engine, called Isabelle/VDM-LPF, or just VDM-LPF, has been developed as an instantiation of the generic theorem prover Isabelle [18]. This extends Isabelle (i.e. its Pure logic) with the Logic of Partial Functions (LPF) [5, fl To appear in Proceedings of TPHOLs97. <p> Though the example is small, it is inspired by an industrial case study on formal methods [10, 15]. Strictly speaking, we do not support reasoning about the specification itself, but about an axiomatization of the specification which is automatically generated by the more general proof support tool described in <ref> [2] </ref>. We will try to avoid the details of the axiomatization here. <p> mk_Gateway (g.input, g.highOutput, g.lowOutput ^ [g.block], g.high, g.low, g.block) : Gateway" Note that object-level application is written using @ and postfix field selection is supported by declarations such as block' :: ex =&gt; ex ("_.block" [500] 500) high' :: ex =&gt; ex ("_.high" [500] 500) produced by the axiomatization (see <ref> [2] </ref>). The above statement, which is generated automatically using the proof obligation generator described in [4], has been proved in VDM-LPF. However, due to lack of space it is not possible to show the entire interactive proof here. Instead some central steps in the proof are discussed below. <p> We feel that our experiments have shown Isabelle to be a very useful tool for quickly building specialized proof support for new and even non-standard logics such as VDM-LPF. Moreover, Isabelle is relatively easy to adapt to VDM-SL and to integrate with the IFAD VDM-SL Toolbox (see <ref> [2] </ref>), unlike a closed system such as PVS [1]. A generic framework like Isabelle allows quick implementation of powerful theorem provers through reuse. However, we have seen some limitations to reuse when dealing with a three-valued logic like VDM-LPF.
Reference: 3. <author> S. Agerholm and P. G. Larsen. </author> <title> Modeling and validating SAFER in VDM-SL. </title> <editor> In M. Holloway, editor, </editor> <booktitle> Proceedings of the Fourth NASA Formal Methods Workshop, </booktitle> <address> see http://atb-www.larc.nasa.gov/Lfm97/, September 1997. </address>
Reference-contexts: Moreover, it has an ISO standard [16] and is supported by a tool, the IFAD VDM-SL Toolbox [9, 12], which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof <ref> [17, 3, 11] </ref>. However, there is an increasing demand for proving facilities, in addition to testing facilities, due to emerging standards and higher quality requirements in general.
Reference: 4. <author> B. Aichernig and P. G. Larsen. </author> <title> A proof obligation generator for VDM-SL. In FME'97, </title> <publisher> LNCS 1313. Springer-Verlag, </publisher> <month> September </month> <year> 1997. </year>
Reference-contexts: For example, such enhanced functionality of the Toolbox can be used to address the undecidability of type checking in VDM-SL, by linking type checking and theorem proving to extend the set of specifications that can be checked automatically <ref> [4] </ref>. But the enhanced functionality can also be used to prove more general correctness requirements. The long-term goal of our work is to develop an industrial proof support tool for VDM-SL which can be integrated with the IFAD VDM-SL Toolbox. <p> The above statement, which is generated automatically using the proof obligation generator described in <ref> [4] </ref>, has been proved in VDM-LPF. However, due to lack of space it is not possible to show the entire interactive proof here. Instead some central steps in the proof are discussed below. The first obvious step is to use case analysis on the conditional expression.
Reference: 5. <author> H. Barringer, J. H. Cheng, and C. B. Jones. </author> <title> A logic covering undefinedness in program proofs. </title> <journal> Acta Informatica, </journal> <volume> 21 </volume> <pages> 251-269, </pages> <year> 1984. </year>
Reference: 6. <author> J. C. Bicarregui, J. S. Fitzgerald, P. A. Lindsay, R. Moore, and B. Ritchie. </author> <title> Proof in VDM: A Practitioner's Guide. </title> <publisher> FACIT. Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: LNCS, Springer-Verlag, August 1997. 7] and rules for VDM-SL datatypes. LPF is a non-classical, three-valued logic designed for reasoning about languages such as VDM-SL with partial functions. Our instantiation exploits previous work done in the Mural project on proof support for VDM-SL <ref> [14, 6] </ref>, but extends this work by developing more powerful proof tools as well as a more flexible syntax. The main contribution of our work is the instantiation of Isabelle with a VDM-SL variant of LPF, including automatic proof search. <p> mk_ (1,2,3,4).#3 = 8 As illustrated in the last line, Isabelle's syntax handling features can be used to support something as exotic as arbitrary-length tuples and generalized projections. 3 Proof System of VDM-LPF The proof system for VDM-SL axiomatized in Isabelle has been copied with minor modifications from the book <ref> [6] </ref>. In addition to primitive and derived rules for propositional and predicate LPF, this book contains a large number of rules for datatypes such as natural numbers, sets, sequences, maps, etc. As in many other formulations of LPF, these rules are formulated as natural deduction rules. <p> In particular we discuss the implementation of proof rules and judgments for sequent calculus style reasoning. The axiomatization of, for example, datatypes is not discussed since we do not contribute to the presentation in <ref> [6] </ref>. 3.1 Proof Rules The proof system of LPF contains most of the standard rules of propositional and predicate logic. <p> However, it is a three-valued logic so it does not provide the law of excluded middle, and some rules have additional typing assumptions, for example, in order to ensure that equality is defined (see below). Most of the rules of the Isabelle instantiation are taken from <ref> [6] </ref>. The adaptation consists mostly of changing the syntax. <p> Other similar tactics support safe steps only to be carried out (lpf_safe_tac), support the restriction of the depth of proofs (lpf_depth_tac), etc. So far these tactics have been used to prove (in one step) essentially all of the 120 derived propositional and predicate logic rules mentioned in <ref> [6] </ref>. Fig. 1. <p> We have also illustrated how existing LPF proof rules can be implemented in Isabelle. Finally, the new facilities for automatic proof search in VDM-LPF have been discussed, which automatically proved most of the 120 propositional and predicate logic derived rules listed in <ref> [6] </ref>. We feel that our experiments have shown Isabelle to be a very useful tool for quickly building specialized proof support for new and even non-standard logics such as VDM-LPF.
Reference: 7. <author> J. H. Cheng. </author> <title> A logic for partial functions. </title> <type> Ph.D. Thesis UMCS-86-7-1, </type> <institution> Department of Computer Science, University of Manchester, </institution> <address> Manchester M13 9PL, England, </address> <year> 1986. </year>
Reference-contexts: Furthermore, we solve some of the difficulties in building automatic proof support for the three-valued LPF in Isabelle, combining natural deduction and sequent calculus style reasoning (inspired by Cheng <ref> [7] </ref>). The syntax embedding supports a direct subset of the ISO standard VDM-SL ASCII notation. This has two important advantages: we have a standard format for exchanging information between tools, and VDM-LPF can be used conveniently as a stand-alone tool. <p> An automatic proof of the rule is given in Section 4.2. 3.3 Soundness We are confident, but have not formally proved, that the modifications of the proof system discussed above are sound. We base this confidence on Cheng's thesis <ref> [7] </ref>, who have proved essentially this result for VDM-SL without datatypes. Cheng formulates both a sequent calculus and a natural deduction proof system for predicate LPF with equality and non-strict connectives 3 . <p> However, VDM-LPF is not classical and therefore it seems hard to use this package. Classical laws are used for simulating sequents using natural deduction. Instead we have implemented a new package designed specifically for VDM-LPF. This package combines ideas from Cheng's thesis on LPF <ref> [7] </ref> with ideas and code from the classical reasoning package. As in Isabelle, the aim of this is to provide a practical tool and less emphasis is put on completeness issues.
Reference: 8. <author> L. Devauchelle, P. G. Larsen, and H. Voss. PICGAL: </author> <title> Practical use of Formal Specification to Develop a Complex Critical System. In FME'97, </title> <publisher> LNCS 1313. Springer-Verlag, </publisher> <month> September </month> <year> 1997. </year>
Reference-contexts: 1 Introduction This paper is about mechanizing proof support for VDM-SL, which is a formal notation for writing model-oriented specifications of software systems [13]. The history of VDM-SL dates back to the late 70's, and it is now one of the most widely used specification languages in industry and academia <ref> [15, 8] </ref>. Moreover, it has an ISO standard [16] and is supported by a tool, the IFAD VDM-SL Toolbox [9, 12], which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof [17, 3, 11].
Reference: 9. <author> R. Elmstrtm, P. G. Larsen, and P. B. Lassen. </author> <title> The IFAD VDM-SL Toolbox: A practical approach to formal specifications. </title> <journal> ACM Sigplan Notices, </journal> <volume> 29(9) </volume> <pages> 77-80, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: The history of VDM-SL dates back to the late 70's, and it is now one of the most widely used specification languages in industry and academia [15, 8]. Moreover, it has an ISO standard [16] and is supported by a tool, the IFAD VDM-SL Toolbox <ref> [9, 12] </ref>, which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof [17, 3, 11].
Reference: 10. <author> J. Fitzgerald, P. G. Larsen, T. Brookes, and M. Green. </author> <title> Applications of Formal Methods, edited by M.G. </title> <editor> Hinchey and J.P. Bowen, </editor> <title> chapter 14. Developing a Security-critical System using Formal and Convential Methods, </title> <booktitle> pages 333-356. Prentice-Hall International Series in Computer Science, </booktitle> <year> 1995. </year>
Reference-contexts: The paper gives an overview of the syntax embedding, the proof system and the proof tactics of our Isabelle instantiation. The paper also presents an example inspired by an industrial case study on formal methods <ref> [10] </ref>. We suggest future work in a number of directions before the conclusions. 2 VDM-SL Syntax in Isabelle Isabelle is a generic theorem prover [18] which provides good features for embedding new logics (syntax and proof rules) and reasoning in these logics. <p> Though the example is small, it is inspired by an industrial case study on formal methods <ref> [10, 15] </ref>. Strictly speaking, we do not support reasoning about the specification itself, but about an axiomatization of the specification which is automatically generated by the more general proof support tool described in [2]. We will try to avoid the details of the axiomatization here.
Reference: 11. <author> B. Frohlich and P. G. Larsen. </author> <title> Combining VDM-SL Specifications with C++ Code. </title> <editor> In M.-C. Gaudel and J. Woodcock, editors, FME'96: </editor> <booktitle> Industrial Benefit and Advances in Formal Methods, </booktitle> <pages> pages 179-194. </pages> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1996. </year>
Reference-contexts: Moreover, it has an ISO standard [16] and is supported by a tool, the IFAD VDM-SL Toolbox [9, 12], which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof <ref> [17, 3, 11] </ref>. However, there is an increasing demand for proving facilities, in addition to testing facilities, due to emerging standards and higher quality requirements in general.
Reference: 12. <institution> IFAD World Wide Web page. </institution> <note> http://www.ifad.dk. </note>
Reference-contexts: The history of VDM-SL dates back to the late 70's, and it is now one of the most widely used specification languages in industry and academia [15, 8]. Moreover, it has an ISO standard [16] and is supported by a tool, the IFAD VDM-SL Toolbox <ref> [9, 12] </ref>, which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof [17, 3, 11].
Reference: 13. <author> C. B. Jones. </author> <title> Systematic Software Development using VDM. </title> <publisher> Prentice Hall International, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction This paper is about mechanizing proof support for VDM-SL, which is a formal notation for writing model-oriented specifications of software systems <ref> [13] </ref>. The history of VDM-SL dates back to the late 70's, and it is now one of the most widely used specification languages in industry and academia [15, 8].
Reference: 14. <author> C. B. Jones, K. D. Jones, P. A. Lindsay, and R. Moore. </author> <title> mural: A Formal Development Support System. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: LNCS, Springer-Verlag, August 1997. 7] and rules for VDM-SL datatypes. LPF is a non-classical, three-valued logic designed for reasoning about languages such as VDM-SL with partial functions. Our instantiation exploits previous work done in the Mural project on proof support for VDM-SL <ref> [14, 6] </ref>, but extends this work by developing more powerful proof tools as well as a more flexible syntax. The main contribution of our work is the instantiation of Isabelle with a VDM-SL variant of LPF, including automatic proof search.
Reference: 15. <author> P. G. Larsen, J. Fitzgerald, and T. Brookes. </author> <title> Applying Formal Specification in Industry. </title> <journal> IEEE Software, </journal> <volume> 13(3) </volume> <pages> 48-56, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: 1 Introduction This paper is about mechanizing proof support for VDM-SL, which is a formal notation for writing model-oriented specifications of software systems [13]. The history of VDM-SL dates back to the late 70's, and it is now one of the most widely used specification languages in industry and academia <ref> [15, 8] </ref>. Moreover, it has an ISO standard [16] and is supported by a tool, the IFAD VDM-SL Toolbox [9, 12], which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof [17, 3, 11]. <p> Though the example is small, it is inspired by an industrial case study on formal methods <ref> [10, 15] </ref>. Strictly speaking, we do not support reasoning about the specification itself, but about an axiomatization of the specification which is automatically generated by the more general proof support tool described in [2]. We will try to avoid the details of the axiomatization here.
Reference: 16. <author> P. G. Larsen, B. S. Hansen, et al. </author> <title> Information technology | Programming languages, their environments and system software interfaces | Vienna Development Method | Specification Language | Part 1: Base language, </title> <month> December </month> <year> 1996. </year>
Reference-contexts: The history of VDM-SL dates back to the late 70's, and it is now one of the most widely used specification languages in industry and academia [15, 8]. Moreover, it has an ISO standard <ref> [16] </ref> and is supported by a tool, the IFAD VDM-SL Toolbox [9, 12], which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof [17, 3, 11]. <p> The concrete syntax is based on the ISO standard of the VDM-SL ASCII notation <ref> [16] </ref>. This makes Isabelle/VDM-LPF relatively easy to use as a stand-alone tool for people who have experience with VDM-SL (and proof). Furthermore, it provides a standardized text-based format for exchanging data with other software components.
Reference: 17. <author> P. Mukherjee. </author> <title> Computer-aided validation of formal specifications. </title> <journal> Software Engi--neering Journal, </journal> <pages> pages 133-140, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Moreover, it has an ISO standard [16] and is supported by a tool, the IFAD VDM-SL Toolbox [9, 12], which is essential for the industrial adoption of a formal method. Currently the VDM-SL Toolbox focuses on formal analysis of specifications through test rather than proof <ref> [17, 3, 11] </ref>. However, there is an increasing demand for proving facilities, in addition to testing facilities, due to emerging standards and higher quality requirements in general.
Reference: 18. <author> L. C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover, </title> <booktitle> volume 828 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This paper describes this basic component. The proof engine, called Isabelle/VDM-LPF, or just VDM-LPF, has been developed as an instantiation of the generic theorem prover Isabelle <ref> [18] </ref>. This extends Isabelle (i.e. its Pure logic) with the Logic of Partial Functions (LPF) [5, fl To appear in Proceedings of TPHOLs97. LNCS, Springer-Verlag, August 1997. 7] and rules for VDM-SL datatypes. LPF is a non-classical, three-valued logic designed for reasoning about languages such as VDM-SL with partial functions. <p> The paper also presents an example inspired by an industrial case study on formal methods [10]. We suggest future work in a number of directions before the conclusions. 2 VDM-SL Syntax in Isabelle Isabelle is a generic theorem prover <ref> [18] </ref> which provides good features for embedding new logics (syntax and proof rules) and reasoning in these logics. <p> The VDM-SL syntax standard is expressed as a context free grammar with additional operator precedence rules to remove ambiguities. The concrete syntax of VDM-LPF is expressed as a priority grammar, i.e as a grammar where the nonterminal symbols are decorated with integer priorities <ref> [18] </ref>. This priority grammar is constructed by a systematic and fairly straightforward translation of productions and operator precedence rules into priority grammar productions. <p> The syntax annotation in brackets consists of two parts: a quoted mixfix template followed by an optional priority part. The mixfix template describes the terminals and contains other printing and parsing directives (see <ref> [18] </ref>). However, not all of the concrete syntax can be handled by adding syntax annotations to the constant declarations for the abstract syntax. In cases such as multiple binding quantifiers, set comprehensions, if-then-elseif expressions, enumerated sequences, etc., the structure of the concrete syntax differs from that of the abstract syntax. <p> In addition to the above tactics, Isabelle has a few other basic resolution tactics for applying natural deduction rules (see <ref> [18] </ref>). There are a few situations where the above tactics are not suitable for applying the rules of VDM-LPF.
Reference: 19. <author> F. Pfenning and C. Elliott. </author> <title> Higher-order abstract syntax. </title> <booktitle> In Proceedings of the SIGPLAN'88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 199 - 208, </pages> <address> Atlanta, Georgia, </address> <month> June </month> <year> 1998. </year> <title> This article was typeset using the L A T E X macro package with the LLNCS2E class. </title>
Reference-contexts: It is a higher-order abstract syntax <ref> [19] </ref> in order to ensure smooth and elegant handling of bound variables. This means that object-level variables are identified with meta-level variables of a particular type. Meta-abstraction is used to represent variable binding, and substitution for bound variables is expressed using meta-application. Isabelle's fi-conversion handles the variable capturing problem.
References-found: 19

