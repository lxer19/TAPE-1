URL: http://www.cs.umd.edu/projects/hermes/publications/postscripts/sigmod93_2.ps
Refering-URL: http://www.cs.umd.edu/projects/hermes/publications/abstracts/tmatftd.html
Root-URL: 
Title: Temporal Modules: An Approach Toward Federated Temporal Databases  
Author: X. Sean Wang Sushil Jajodia V. S. Subrahmanian 
Abstract: In a federated database environment, different constituents of the federation may use different temporal models or physical representations for the temporal information. This paper introduces a new concept, called a temporal module, to resolve these mismatches among the constituents. Intuitively, a temporal module hides the implementation details of a temporal relation by exposing its information only through two windowing functions: a function associating each time point with a set of tuples and a function linking each tuple to a set of time points. A calculus-style language is given to form queries on temporal modules. Temporal modules are then extended to resolve another type of mismatch among the constituents of a federation, namely, mismatch involving different time units (e.g., month, week and day) used in recording temporal information. Our solution to this mismatch relies on "information conversions" provided by each constituent. Specifically, a temporal module is extended to provide several "windows" to its information, each in terms of a different time unit. The first step to process a query addressed to the federation is to select suitable windows for the underlying temporal modules. In order to do so, time units are formally defined and studied. A federated temporal database model and its query language are proposed. The query language is an extension of the calculus-style language above. 
Abstract-found: 1
Intro-found: 1
Reference: [And82] <author> T.L. Anderson. </author> <title> Modeling time at the conceptual level. </title> <booktitle> In Proceedings of the International Conference on Databases: Improving Usability and Responsiveness, </booktitle> <pages> pages 273-297, </pages> <address> Jerusalem, Israel, June 1982. </address> <publisher> Academic Press. </publisher>
Reference-contexts: Temporal databases will be extended in the next section to federated temporal databases which include temporal modules of varying time units. There has been a great deal of discussion with respect as to the nature of time (e.g., <ref> [And82] </ref>).
Reference: [All83] <author> J.F. Allen. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the Association of Computing Machinery, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: Thus, we need to change the comparison operators. The change in (3) above is for this purpose. We note here that all 13 interval comparisons in <ref> [All83] </ref> can be expressed by extended Tm-calculus formulas.
Reference: [CC88] <author> J. Clifford and A. Croker. </author> <title> Objects in time. </title> <journal> IEEE Data Engineering, </journal> <volume> 7(4) </volume> <pages> 189-196, </pages> <month> De-cember </month> <year> 1988. </year>
Reference-contexts: The choice of a relation scheme as another component of a temporal module is only for convenience. We speculate that the temporal module concept can be easily extended to other data models, such as object-oriented temporal database models, e.g., <ref> [CC88, KRS90] </ref>. Several research issues are raised by this study. The first one is whether there is algebraic query languages which are equivalent to the Tm-calculus and the extended Tm-calculus, respectively. Another one is about the time and space complexities of the two calculi.
Reference: [Cli82] <author> J. Clifford. </author> <title> A model for historical databases. </title> <booktitle> In Proceedings of Workshop on Logical Bases for Data Bases, </booktitle> <address> Toulouse, France, </address> <month> December </month> <year> 1982. </year>
Reference-contexts: For example, if several month's rainfall amounts are collect to give a year's rainfall amount, then the same procedure can be used to give the rainfall amount for half years. 2. 2 1 . The conversion is usually an "interpolation" procedure <ref> [Cli82, SS87, WJL91, WJL93] </ref>. A similar interpolation procedure should give us the information in terms of any time unit between 1 and 2 .
Reference: [CT85] <author> J. Clifford and A.U. Tansel. </author> <title> On an algebra for historical relational databases: Two views. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 247-265, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Values of these time attributes come from some fixed temporal domain. Given a tuple, the values of these time attributes indicate when the information (i.e., the remaining values of the tuple) is valid. 1 Unlike the first approach that stays within first normal form relations, the second approach (e.g., <ref> [CT85, Gad88] </ref>) deals with non-first normal form relations. Under the second approach, a timestamp is associated with each attribute value of a tuple (see Figure 1b). <p> A popular choice in literature for the temporal domain is the set of the natural numbers, which is interpreted as a set of linearly ordered, equally spaced time points (e.g., <ref> [CT85, GV85] </ref>). With our temporal module abstraction, we can easily deal with different temporal domains without changing the underlying temporal representation. To illustrate, suppose in an employee database, salaries of individuals are stored on a monthly basis.
Reference: [CR87] <author> J. Clifford and A. Rao. </author> <title> A simple, general structure for temporal domains. </title> <booktitle> In Proceedings of the Conference on Temporal Aspects in Information Systems, </booktitle> <pages> pages 23-30, </pages> <address> France, </address> <month> May </month> <year> 1987. </year> <pages> AFCET. </pages>
Reference-contexts: The paper is concluded with a summary in Section 7. 2 Temporal Modules and Temporal Databases In this section, we introduce the concept of a temporal module. A temporal module forms an abstract interface 2 The authors wish to thank an anonymous referee for bringing our attention to <ref> [CR87] </ref>, in which time units are arranged in a linear order. 2 between temporal relations (or other means of storing temporal data) and user queries. Throughout this paper, N is used to denote the set of the non-negative integers. Also, an infinite set of attribute names is assumed.
Reference: [Gab87] <author> D. Gabbay. </author> <title> Modal and temporal logic programming. </title> <editor> In A. Galton, editor, </editor> <booktitle> Temporal Logics and their Applications, </booktitle> <pages> pages 197-237. </pages> <publisher> Academic Press, </publisher> <year> 1987. </year>
Reference-contexts: The above examples and informal arguments form the basis for the proof of the following theorem. Theorem 1 Tm-calculus is at least as expressive as queries formed by using formulas in linear-time propositional temporal logic (using modalities 2; 3; P; H; S as defined by Gabbay <ref> [Gab87] </ref>). Thus, Tm-calculus is a powerful language and can express most of the natural temporal queries. Since the domain of time is infinite, however, some queries will have infinite answers. For example, consider the example of Figure 1.
Reference: [GV85] <author> S.K. Gadia and J.H. Vaishnav. </author> <title> A query language for a homogeneous temporal database. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 51-56, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: A popular choice in literature for the temporal domain is the set of the natural numbers, which is interpreted as a set of linearly ordered, equally spaced time points (e.g., <ref> [CT85, GV85] </ref>). With our temporal module abstraction, we can easily deal with different temporal domains without changing the underlying temporal representation. To illustrate, suppose in an employee database, salaries of individuals are stored on a monthly basis.
Reference: [Gad88] <author> S.K. Gadia. </author> <title> A homogeneous relational model and query languages for temporal databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 13(4) </volume> <pages> 418-448, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Values of these time attributes come from some fixed temporal domain. Given a tuple, the values of these time attributes indicate when the information (i.e., the remaining values of the tuple) is valid. 1 Unlike the first approach that stays within first normal form relations, the second approach (e.g., <ref> [CT85, Gad88] </ref>) deals with non-first normal form relations. Under the second approach, a timestamp is associated with each attribute value of a tuple (see Figure 1b). <p> A temporal relation from [Sno84]. Name Salary Dept [11,61) John [11,50) 15K [11,45) Toys [50,55) 20K [45,61) Shoes [55,61) 25K b. A temporal Relation from <ref> [Gad88] </ref>. (hJohn, 15K, Toysi, [11,45)), (hJohn, 15K, Shoesi, [45,50)), (hJohn, 20K, Shoesi, [50,55)), (hJohn, 25K, Shoesi, [55,61)). The above observation leads us to propose a new concept of a temporal module, which serves as a unifying framework to resolve mismatches among various methods of storing temporal data.
Reference: [KRS90] <author> W. Kaefer, N. Ritter, and H. Schoening. </author> <title> Support for temporal data by complex objects. </title> <booktitle> In 16th International Conference on VLDB, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: The choice of a relation scheme as another component of a temporal module is only for convenience. We speculate that the temporal module concept can be easily extended to other data models, such as object-oriented temporal database models, e.g., <ref> [CC88, KRS90] </ref>. Several research issues are raised by this study. The first one is whether there is algebraic query languages which are equivalent to the Tm-calculus and the extended Tm-calculus, respectively. Another one is about the time and space complexities of the two calculi.
Reference: [MS87] <author> E. McKenzie and R. Snodgrass. </author> <title> Supporting valid time: An historical algebra. </title> <type> Technical Report TR87-008, </type> <institution> Computer Science Department, University of North Carolina at Chapel Hill, </institution> <month> August </month> <year> 1987. </year>
Reference-contexts: The purpose of this paper is to provide such a unifying framework. In recent years, there have been several efforts to extend the relational model to incorporate the time dimension. These extensions generally take one of two approaches. In the first approach (e.g., <ref> [MS87, SS87, NA89] </ref>) each relation scheme is extended to include some time attributes (see Figure 1a). Values of these time attributes come from some fixed temporal domain.
Reference: [NA89] <author> S. B. Navathe and R. Ahmed. </author> <title> A temporal relational model and a query language. </title> <journal> Information Sciences, </journal> <volume> 49(2) </volume> <pages> 147-175, </pages> <year> 1989. </year>
Reference-contexts: The purpose of this paper is to provide such a unifying framework. In recent years, there have been several efforts to extend the relational model to incorporate the time dimension. These extensions generally take one of two approaches. In the first approach (e.g., <ref> [MS87, SS87, NA89] </ref>) each relation scheme is extended to include some time attributes (see Figure 1a). Values of these time attributes come from some fixed temporal domain.
Reference: [SA85] <author> R. Snodgrass and I. Ahn. </author> <title> A taxonomy of time in databases. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 236-246, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Although the relation in Figure 1b consists of a single tuple and uses time intervals to timestamp each domain value, it gives the following four (fact, time points) pairs: 1 In this paper we deal only with the valid time, and not the transaction time <ref> [SA85] </ref>. 1 Name Rank From To Jane Assistant 9-71 12-76 Jane Associate 12-76 11-80 Jane Full 11-80 1 a. A temporal relation from [Sno84]. Name Salary Dept [11,61) John [11,50) 15K [11,45) Toys [50,55) 20K [45,61) Shoes [55,61) 25K b.
Reference: [Sno84] <author> R. Snodgrass. </author> <title> The temporal query language TQuel. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 204-212, </pages> <address> Waterloo, Ontario, Canada, </address> <month> April </month> <year> 1984. </year>
Reference-contexts: A temporal relation from <ref> [Sno84] </ref>. Name Salary Dept [11,61) John [11,50) 15K [11,45) Toys [50,55) 20K [45,61) Shoes [55,61) 25K b. A temporal Relation from [Gad88]. (hJohn, 15K, Toysi, [11,45)), (hJohn, 15K, Shoesi, [45,50)), (hJohn, 20K, Shoesi, [50,55)), (hJohn, 25K, Shoesi, [55,61)).
Reference: [SS87] <author> A. Segev and A. Shoshani. </author> <title> Logical modeling of temporal data. </title> <booktitle> In Proceedings of the ACM SIGMOD Annual Conference on Managemen t of Data, </booktitle> <pages> pages 454-466, </pages> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: The purpose of this paper is to provide such a unifying framework. In recent years, there have been several efforts to extend the relational model to incorporate the time dimension. These extensions generally take one of two approaches. In the first approach (e.g., <ref> [MS87, SS87, NA89] </ref>) each relation scheme is extended to include some time attributes (see Figure 1a). Values of these time attributes come from some fixed temporal domain. <p> For example, if several month's rainfall amounts are collect to give a year's rainfall amount, then the same procedure can be used to give the rainfall amount for half years. 2. 2 1 . The conversion is usually an "interpolation" procedure <ref> [Cli82, SS87, WJL91, WJL93] </ref>. A similar interpolation procedure should give us the information in terms of any time unit between 1 and 2 .
Reference: [Tan93] <editor> A. Tansel and et al., editors. </editor> <title> Temporal Databases. </title> <address> Benjamin/Cummings, </address> <month> Jan </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Storing and manipulating temporal information is important for many database applications <ref> [Tan93] </ref>. Dif fl Depatment of Information and Software Systems Engineering, George Mason University, Fairfax, VA 22030.
Reference: [Ull88] <author> J. D. Ullman. </author> <title> Priciples of Database and Knowledge-base systems. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: 3 R 1 = fPlant; Product; Profitg, 1 (y) = Plant;Product;Profit Year=y (r); and Year Plant=p 1 ^Product=p 2 ^Profit=p 3 (r): For example, 1 (1990) gives the set consisting of the following tuples Plant Product Profit Baltimore Digital Amplifier 15% Denver Rock Candy 30% 3 Relational algebra expressions (see <ref> [Ull88] </ref>) are used in expressing functions 1 and t 1 . In general, arbitrary methods can be used to express 1 and t 1 . and t 1 (hBaltimore; DigitalAmplifier; 15%i) = f1990; 1991g. Another temporal module we build is about the profits of the plants. <p> For example, the answer to the Tm-calculus query fxj:9i (hA : xi 2 (i))g may be infinite. We can define a notion of safeness similar to the one of the relational calculus <ref> [Ull88] </ref>. (Due to the page limit, we omit the definition of the safe Tm-calculus here.) We obtain the following computability result by using the concept of bounded temporal logic and the notion of safeness.
Reference: [WJL91] <author> G. Wiederhold, S. Jajodia, and W. Litwin. </author> <title> Dealing with granularity of time in temporal databases. </title> <booktitle> In Proc. 3rd Nordic Conf. on Advanced Information Systems Engineering, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 498, </volume> <editor> (R. Anderson et al. eds.), </editor> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> pages 124-140. </pages>
Reference-contexts: For example, if several month's rainfall amounts are collect to give a year's rainfall amount, then the same procedure can be used to give the rainfall amount for half years. 2. 2 1 . The conversion is usually an "interpolation" procedure <ref> [Cli82, SS87, WJL91, WJL93] </ref>. A similar interpolation procedure should give us the information in terms of any time unit between 1 and 2 .
Reference: [WJL93] <author> G Wiederhold, S. Jajodia, and W. Litwin. </author> <title> Integrating temporal data in a heterogeneous environment. In Temporal Databases. </title> <address> Ben-jamin/Cummings, </address> <month> Jan </month> <year> 1993. </year> <month> 10 </month>
Reference-contexts: is partly supported by the following grants: ARO grant DAAL-03092-G-0225, AFOSR grant F49620-93-1-0065 and NSF grant IRI-9109755. ferent databases, however, may use different temporal data models to represent temporal information, different storage strategies to physically store temporal data, or different time units on which the stored temporal information is based <ref> [WJL93] </ref>. When these databases are combined to form a federation, a unifying framework is needed in order to resolve these temporal mismatches to answer queries at the federation level. The purpose of this paper is to provide such a unifying framework. <p> For example, if several month's rainfall amounts are collect to give a year's rainfall amount, then the same procedure can be used to give the rainfall amount for half years. 2. 2 1 . The conversion is usually an "interpolation" procedure <ref> [Cli82, SS87, WJL91, WJL93] </ref>. A similar interpolation procedure should give us the information in terms of any time unit between 1 and 2 . <p> There are also research problems concerning time units. For example, how do we store time units? What do we want to reason about the time units? We may also want to study some "standard" information conversions (see <ref> [WJL93] </ref>) in extended temporal modules, e.g., average function, stable function, as well as other various aggregation functions.
References-found: 19

