URL: http://www.informatik.th-darmstadt.de/VS/Publikationen/Fuenfrocken/papers/hicss98-wasp.ps
Refering-URL: http://www.informatik.th-darmstadt.de/~fuenf/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: fuenf@informatik.tu-darmstadt.de  
Title: Integrating Java-based Mobile Agents into Web Servers under Security Concerns  
Author: Stefan Funfrocken 
Address: Alexanderstr. 6, 64283 Darmstadt, Germany  
Affiliation: Department of Computer Science, Darmstadt University of Technology  
Abstract: The paper describes a system architecture which offers the ability to host mobile agents (so-called Web-agents) on a Web server. This is done by a special server extension module called 'server agent environment' (SAE). The agents may access local data of the Web server and may communicate with other Web-agents or with human users. The paper discusses the different security issues that arise in such a system and shows how we address the problems. Concerning system and network security, we present a solution based on security packages, protection domains, and agent capabilities. This provides a flexible way to restrict an agent's possibility to access the local server data or access the network. Since we also aim at providing our SAE as a plug-in for other Web servers, we show how this is supported by our system architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arnold K., Gosling J., </author> <title> The Java Programming Language, </title> <publisher> Addison-Wesley, </publisher> <year> 1996 </year>
Reference-contexts: There have been several mobile agent systems [12, 31] before Sun released the object serialization mechanism as part of the remote method invocation package of the Java language in 1996 <ref> [1] </ref>.
Reference: [2] <author> Baird-Smith A., </author> <title> Jigsaw Java HTTP Server, by World Wide Web Consortium, </title> <address> http://www.w3.org/pub/WWW/Jigsaw </address>
Reference-contexts: Most existing Web servers offer the cgi-bin interface, which provides this. Java-based Web servers such as Jigsaw <ref> [2] </ref> or Jeeves [16] can integrate our SAE directly. We developed a Jigsaw resource object which connects our SAE to the Jigsaw resource tree and we are planing a Jeeves SAE servlet. Connecting the SAE to other servers raises some security issues: 1.
Reference: [3] <author> Borenstein N., Freed N., </author> <title> MIME (Multipurpose Internet Mail Extensions), Network Working Group, </title> <address> RFC1521, </address> <year> 1993 </year>
Reference-contexts: Web-agents initiate their migration by calling a 'go' method. The actual (network) transfer of agents in migration is realized with an HTTP-post request to a SAE specific URL at the target Web server. The body of the post request consists of the agent coded into a multipart MIME message <ref> [3] </ref>. 2 3 On Safety and Security When talking about safety and security of a hardware and software system, the specific meaning of both terms should be explained.
Reference: [4] <author> Borenstein N., </author> <title> EMail with a Mind of Its Own: The Safe-Tcl Language for Enabled Mail, </title> <journal> IFIP Transactions Comm. Syst., </journal> <year> 1994, </year> <pages> pp 389-402 </pages>
Reference: [5] <author> Dagenais M.R., </author> <title> Building Distributed OO Applications: Modula-3 Objects at Work, </title> <type> Draft Version, </type> <month> January </month> <year> 1997 </year>
Reference-contexts: We will use the terms safety and security in the context of programming languages and software systems according to the following specification (see also <ref> [5, 11] </ref>). Security deals with the rules for the interaction of different objects and is concerned about integrity and protection. There has to be a security policy either an implicit or an explicit one which is enforced by the software system. <p> Furthermore, agents in our system are also programmed in Java. Because of this, our system inherits Java's safety and security properties in the categories runtime and object interaction. Not much can be found about Java's runtime safety <ref> [5, 18, 29] </ref>, but since Java provides concepts such as strong typing, no address arithmetics, array bound-checking, and exception handling, it is presumed to be safe although there are some weaknesses in Java's type system [8].
Reference: [6] <author> Dean D., Felten E. W., Wallach D. S., </author> <title> Java Security: From HotJava to Netscape and Beyond, </title> <booktitle> Proc. of 1996 IEEE Symp. on Security and Privacy, </booktitle> <month> May </month> <year> 1996, </year> <pages> pp 190-200. </pages>
Reference-contexts: One major problem in solving these Java-related problems is that they would require a modification of 2 This shows that it is not easy to prove that an implementation of a mechanism that should enforce security meets its specification. See <ref> [6] </ref> for a taxonomy of Java bugs. the Java Virtual Machine (VM), which is beyond the scope of almost any mobile agent system developer group.
Reference: [7] <author> Farmer W.M., Guttmann J.D., Swarup V., </author> <title> Security for Mobile Agents: Issues and Requirements, </title> <booktitle> Proc. of NISSC96, </booktitle> <year> 1996 </year>
Reference-contexts: Farmer et.al. <ref> [7] </ref> show that mobile agent security is hard to implement in general, but there are well-known techniques to ensure a certain level of security for protecting hosts from agents or for protecting agents from each other. <p> While there are good solutions for the first two security issues, there exist currently only first steps for solutions for the last two issues <ref> [7, 15, 32] </ref>. 4 Java | Safety and Security Our system is based on Java. We use Java as an implementation language for our HTTP server and the server's SAE. Furthermore, agents in our system are also programmed in Java. <p> stream from the channel, but then the agent programmers have to be aware of possible problems and should mark the property holding the reference as 'transient'. 6.5 Host to Agent and Host to Host Se curity Achieving host to agent security is ambitious and rather difficult for the general case <ref> [7] </ref>. Therefore we designed our system as a net of trusted hosts as long as there are no satisfying solutions for this problem, thus defining away that problem to a certain extend. We plan to certify each SAE when delivered, and to give each SAE a signed public key.
Reference: [8] <author> Fischbach R., </author> <title> Java: Programmiersprache der Zukunft (in German), </title> <type> iX 10/96 </type>
Reference-contexts: Not much can be found about Java's runtime safety [5, 18, 29], but since Java provides concepts such as strong typing, no address arithmetics, array bound-checking, and exception handling, it is presumed to be safe although there are some weaknesses in Java's type system <ref> [8] </ref>. Most Java related security information [30] is about security of applets, which can be viewed as simple agents that can be (down-) loaded on demand.
Reference: [9] <author> Funfrocken S., </author> <title> How to Integrate Mobile Agents into Web Servers, to appear in: </title> <booktitle> Proc. of Wet-ice97 Workshop on CADWA, </booktitle> <publisher> MIT, </publisher> <address> Cambridge, MA, </address> <month> June </month> <year> 1997 </year>
Reference-contexts: This motivates why security is most important for mobile agent systems. Our paper presents the security aspects of our Java-based architecture which enables agents to migrate between World Wide Web servers. Section 2 gives a short overview of our system architecture (see <ref> [9] </ref> for a more complete description). Section 3 describes mobile agent safety and security issues. Section 4 deals with safety and security aspects of Java, which we use as an agent programming language. Section 5 and Section 6 show the solution of our implementation in more detail.
Reference: [10] <institution> General Magic, </institution> <note> Odyssey online information, http:// www.genmagic.com/ agents/ odyssey.html </note>
Reference-contexts: since object serialization offers a very easy way of implementing migrating objects, there are more and more mobile agent systems that are programmed in Java and use Java to program the agents [20] even General Magic stopped the Tele-script development and is now distributing an agent system based on Java <ref> [10] </ref>. Unfortunately, Java is not designed as agent system programming language as was Telescript and therefore most agent related functionality has to be added by additional libraries. <p> This can easily be achieved by installing an instance of an object that conforms to the Java Virtual Machine (VM) SecurityManager interface, which when installed is called by all Java methods that access system resources. In our system (and in all other Java-based systems <ref> [10, 14, 21, 34] </ref>) the code of the mobile agent system and the code of agents is loaded into the same Java VM. Because of that, the installed security manager cannot automatically deny any access to local resources, because the mobile agent system itself has to access the local resources.
Reference: [11] <author> General Magic, </author> <title> An Introduction to Safety and Security in Telescript, part of the Telescript documentation </title>
Reference-contexts: We will use the terms safety and security in the context of programming languages and software systems according to the following specification (see also <ref> [5, 11] </ref>). Security deals with the rules for the interaction of different objects and is concerned about integrity and protection. There has to be a security policy either an implicit or an explicit one which is enforced by the software system. <p> The safety and security properties of a mobile agent system or one of its subcomponents can be divided into several categories (see also <ref> [11] </ref>), each owning specific mechanisms to implement or achieve the properties. Each of the categories deals with different aspects of the application or component, thus requiring specific properties of the implementation or the way an application is constructed from subcomponents.
Reference: [12] <author> Gray R.S., </author> <title> Agent Tcl: A flexible and secure mobile-agent system, </title> <booktitle> Proc. of the 4th Annual Tcl/Tk Workshop, </booktitle> <address> Monteray, CA, </address> <year> 1996, </year> <month> pp9-23 </month>
Reference-contexts: Because of the rather restrictive information policy of General Magic concerning implementation details of their system, several research groups began to develop mobile agent systems (i.e., systems that enable the execution of agents at a host) on their own. There have been several mobile agent systems <ref> [12, 31] </ref> before Sun released the object serialization mechanism as part of the remote method invocation package of the Java language in 1996 [1]. <p> Typically, early mobile code systems <ref> [12, 17, 25, 31] </ref> were developed by using interpreted languages as an agent programming language and imposing a security policy on 'dangerous commands' of the language, which led to so-called 'safe' versions of the language interpreters, thus providing effective means to protect the underlying host from any program executing in the
Reference: [13] <author> Gong L., </author> <title> New security architectural directions for Java, </title> <booktitle> Proc. of IEEE COMPCON'97, </booktitle> <month> Feb. </month> <year> 1997 </year>
Reference-contexts: So any flaw in that implementation will introduce a security problem in systems using Java. Even with the new and more flexible Java security model <ref> [13] </ref>, there remain many security problems a mobile agent system has to solve by providing it's own security architecture.
Reference: [14] <author> Hohl F., </author> <title> Konzeption eines einfachen Agenten-systems und Implementation eines Prototyps, </title> <type> Diploma Thesis, </type> <institution> Univ. of Stuttgart, Dept. of CS, Diplomarbeit Nr. </institution> <month> 1267 </month> <year> (1995) </year>
Reference-contexts: This can easily be achieved by installing an instance of an object that conforms to the Java Virtual Machine (VM) SecurityManager interface, which when installed is called by all Java methods that access system resources. In our system (and in all other Java-based systems <ref> [10, 14, 21, 34] </ref>) the code of the mobile agent system and the code of agents is loaded into the same Java VM. Because of that, the installed security manager cannot automatically deny any access to local resources, because the mobile agent system itself has to access the local resources.
Reference: [15] <author> Hohl F., </author> <title> An approach to solve the problem of malicious hosts, </title> <institution> Univ. of Stuttgart, Dept. of CS, </institution> <note> Fakultatsbericht Nr. 1997/03, (submitted to SOSP'97) </note>
Reference-contexts: While there are good solutions for the first two security issues, there exist currently only first steps for solutions for the last two issues <ref> [7, 15, 32] </ref>. 4 Java | Safety and Security Our system is based on Java. We use Java as an implementation language for our HTTP server and the server's SAE. Furthermore, agents in our system are also programmed in Java. <p> Thus using SSL is not necessary in our system, but could be used to hide even the type of the messages. Concerning agent to host security in the general case, there is ongoing research, which seems to lead 8 to some partial solutions: see for example <ref> [15] </ref> which proposes agent code obfuscation and limited agent life cycles to prevent agents from being spyed out, or [32] which proposes an add on security architecture based on the concept of distributed transaction processing realised with CORBA and its object service for transactions (OTS). 7 SAE Plug-in Security Issues One
Reference: [16] <author> Jeeves Team, </author> <title> Overview of the Java HTTP Server Architecture, Part of the Jeeves Alpha2 distribution, Sun Microsystems, </title> <year> 1996 </year>
Reference-contexts: Most existing Web servers offer the cgi-bin interface, which provides this. Java-based Web servers such as Jigsaw [2] or Jeeves <ref> [16] </ref> can integrate our SAE directly. We developed a Jigsaw resource object which connects our SAE to the Jigsaw resource tree and we are planing a Jeeves SAE servlet. Connecting the SAE to other servers raises some security issues: 1.
Reference: [17] <author> Johanson D., van Renesse R., Schneider F., </author> <title> An Introduction to the TACOMA Distributed System, </title> <institution> Univ. of Tromst, Dept. of CS, </institution> <type> CS TR 95-23, </type> <month> June </month> <year> 1995 </year>
Reference-contexts: Typically, early mobile code systems <ref> [12, 17, 25, 31] </ref> were developed by using interpreted languages as an agent programming language and imposing a security policy on 'dangerous commands' of the language, which led to so-called 'safe' versions of the language interpreters, thus providing effective means to protect the underlying host from any program executing in the
Reference: [18] <author> Joyner I., </author> <title> C++?? A Critique of C++ and Programming Language Trends of the 1990's, </title> <booktitle> 3rd Edition, </booktitle> <month> October </month> <year> 1996 </year>
Reference-contexts: Furthermore, agents in our system are also programmed in Java. Because of this, our system inherits Java's safety and security properties in the categories runtime and object interaction. Not much can be found about Java's runtime safety <ref> [5, 18, 29] </ref>, but since Java provides concepts such as strong typing, no address arithmetics, array bound-checking, and exception handling, it is presumed to be safe although there are some weaknesses in Java's type system [8].
Reference: [19] <author> Karjoth G., Lange B.D., Oshima M., </author> <title> A Security Model for Aglets, </title> <booktitle> IEEE Internet Computing, July-August 1997, </booktitle> <pages> pp 68-77 </pages>
Reference-contexts: The categories are the runtime category, the object interaction category, the underlying system category and the network category (see system security issues (see also <ref> [19] </ref>): * agent to host security (underlying system), * agent to agent security (object interaction), * host to host security (network), and * host to agent security (underlying system, object interaction). As mentioned before, there can be no security without safety.
Reference: [20] <author> Kiniry J., Zimmermann D., </author> <title> A Hands-On Look at Java Mobile Agents, </title> <booktitle> IEEE Internet Computing, July-August 1997, </booktitle> <pages> pp 21-30 </pages>
Reference-contexts: But since object serialization offers a very easy way of implementing migrating objects, there are more and more mobile agent systems that are programmed in Java and use Java to program the agents <ref> [20] </ref> even General Magic stopped the Tele-script development and is now distributing an agent system based on Java [10]. Unfortunately, Java is not designed as agent system programming language as was Telescript and therefore most agent related functionality has to be added by additional libraries.
Reference: [21] <author> Lange D., Chang D.T., </author> <title> IBM Aglets Workbench Programming Mobile Agents in Java, </title> <type> White Paper, </type> <institution> IBM Corporation, </institution> <address> Japan, </address> <month> August </month> <year> 1996, </year> <month> 10 </month>
Reference-contexts: This can easily be achieved by installing an instance of an object that conforms to the Java Virtual Machine (VM) SecurityManager interface, which when installed is called by all Java methods that access system resources. In our system (and in all other Java-based systems <ref> [10, 14, 21, 34] </ref>) the code of the mobile agent system and the code of agents is loaded into the same Java VM. Because of that, the installed security manager cannot automatically deny any access to local resources, because the mobile agent system itself has to access the local resources.
Reference: [22] <author> Leveson N.G., </author> <title> Software Safety, </title> <journal> Communications of the ACM, </journal> <volume> Vol 34, No 2, Feb 91, </volume> <pages> pp 34-46 </pages>
Reference-contexts: In the context of programming languages, safety means that a component is 'safe to use'. This can be seen as an assurance that the component behaves as specified, thus describing an operational property of a component. There have to be safety constraints (implying hazard assessment <ref> [22] </ref>) which define the 'correct' behavior of components. A safe system is designed and (hopefully) implemented in a way that it always remains in 'permitted' system states. More generally, safety is concerned about making efforts to reduce 'the risk of harm (to persons) or damage' [27].
Reference: [23] <author> Lingnau A., Drobnik O., Domel P., </author> <title> An HTTP-based Infrastructure for Mobile Agents, </title> <note> WWW Journal 4th Intern . WWW Conf. Proc. </note> , <institution> Boston, </institution> <address> MA, </address> <month> Dec 11-14, </month> <year> 1995 </year>
Reference: [24] <author> Necula G.C., Lee P., </author> <title> Safe Kernel Extensions Without Run-Time Checking, </title> <booktitle> Proc. of OSDI'96, </booktitle> <address> Seattle, Washington, </address> <month> October 28-31, </month> <year> 1996 </year>
Reference-contexts: If the mecha 1 The verification of this requires a formal description of the properties of the application and formal program verification. This is a difficult task and therefore seldomly done for today's software. See <ref> [24, 28, 29] </ref> for first steps in this direction concerning the Java Bytecode. nism's implementation is not safe, there is no guaranty that the identification returned is the correct one.
Reference: [25] <author> Peine H., Stolpmann T., </author> <title> The Architecture of the Ara Platform for Mobile Agents, </title> <booktitle> Proc. of MA'97, </booktitle> <address> Berlin, April 7-8, </address> <publisher> LNCS 1219, </publisher> <pages> pp 50-61 </pages>
Reference-contexts: Typically, early mobile code systems <ref> [12, 17, 25, 31] </ref> were developed by using interpreted languages as an agent programming language and imposing a security policy on 'dangerous commands' of the language, which led to so-called 'safe' versions of the language interpreters, thus providing effective means to protect the underlying host from any program executing in the <p> See [6] for a taxonomy of Java bugs. the Java Virtual Machine (VM), which is beyond the scope of almost any mobile agent system developer group. There are currently two mobile agent systems <ref> [25, 26] </ref> that use a modified Java VM, but the modification was necessary to support transparent agent migration for Java-based agents and was not done to improve the security or safety of Java. <p> Since this is important to guarantee security (see section 6.3), the agent scheduler is part of the security architecture. 6.1 Agent Capabilities Each agent is associated with a set of capabilities which describe the local rights the agent is granted, similar to Telescript permits [35] or Ara allowances <ref> [25] </ref>.
Reference: [26] <author> Ranganathan M., Anurag A., Shamik S., Saltz J., </author> <title> Network-aware Mobile Programs, </title> <note> to appear in the Proc. of USENIX97 </note>
Reference-contexts: See [6] for a taxonomy of Java bugs. the Java Virtual Machine (VM), which is beyond the scope of almost any mobile agent system developer group. There are currently two mobile agent systems <ref> [25, 26] </ref> that use a modified Java VM, but the modification was necessary to support transparent agent migration for Java-based agents and was not done to improve the security or safety of Java.
Reference: [27] <institution> Reliable Software Technologies, </institution> <note> Software System Safety Glossary, http://www.rstcorp.com/safety-glossary.html </note>
Reference-contexts: A safe system is designed and (hopefully) implemented in a way that it always remains in 'permitted' system states. More generally, safety is concerned about making efforts to reduce 'the risk of harm (to persons) or damage' <ref> [27] </ref>. A mobile agent system is, as any software system or application, not a monolithic component: it is rather a combined, layered, or hierarchical system of components.
Reference: [28] <author> Sirer E.G., McDirmid S., Bredshad B., </author> <month> Kimera: </month>
Reference-contexts: If the mecha 1 The verification of this requires a formal description of the properties of the application and formal program verification. This is a difficult task and therefore seldomly done for today's software. See <ref> [24, 28, 29] </ref> for first steps in this direction concerning the Java Bytecode. nism's implementation is not safe, there is no guaranty that the identification returned is the correct one. <p> Even with the new and more flexible Java security model [13], there remain many security problems a mobile agent system has to solve by providing it's own security architecture. There is more ongoing research to improve Java's security properties <ref> [28] </ref>, in particular in the mobile code scenario [33]. 5 HTTP Server Security Basically HTTP servers make the data contained in local files available to remote users.
References-found: 28

