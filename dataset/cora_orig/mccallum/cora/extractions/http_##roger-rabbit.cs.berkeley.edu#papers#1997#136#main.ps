URL: http://roger-rabbit.cs.berkeley.edu/papers/1997/136/main.ps
Refering-URL: http://roger-rabbit.cs.berkeley.edu/papers/1997/136/136.html
Root-URL: http://www.cs.berkeley.edu
Email: drbacher@cs.berkeley.edu  
Title: Data Entry and Administrative Tools for a Video-on-Demand Metadata Database  
Author: David R. Bacher 
Date: March 10, 1997  
Address: Berkeley, CA 94720-1776  
Affiliation: Computer Science Division EECS University of California  
Abstract: The Berkeley Distributed Video-on-Demand (VOD) System provides access to a large archive of multimedia documents. The system supports a metadata database that allows users to browse and search for documents within the VOD system. This paper describes the design and implementation of a suite of administrative and data entry tools for the system. The tools include a general browser for video document data (bvde), a hierarchical viewer for structured video data (segview) and tools for the automatic analysis of video clips (cealg and ceedit).
Abstract-found: 1
Intro-found: 1
Reference: [Ber95] <author> D. A. Berger. </author> <title> Video-on-demand metadata query interfaces. </title> <type> Master's thesis, </type> <institution> University of California, Berkeley, Computer Science Division, </institution> <year> 1995. </year>
Reference-contexts: It is integrated with the Vodasaurus browser so that results of a query can be examined and a section of the document selected for playback <ref> [Ber95] </ref>. segview can also be launched as a stand-alone program. 7 viewer and the window in back belongs to the Vodasaurus browser. In browsing mode, a user can browse the structural hierarchy of a video through the levels of titled keyframes and select individual sections of the document for playback. <p> While the other programs from the suite of tools are based on the vodwish shell, ceedit is based on the Continuous Media Toolkit [MPR96]. Rather than relying on the presence of built-in libraries for access to the database, this program uses the Infosaurus queryserver to communicate with the database <ref> [Ber95] </ref>. Application programs that do not require direct access to Postgres can connect to the queryserver using Tcl-Dp and submit queries to the database [SRY93]. The shot boundary editor uses the facilities of the CMT Media Playback API to provide video playback and simple editing control within the interface [Jac96].
Reference: [BR96a] <author> J. Borezcky and L. A. Rowe. </author> <title> Comparison of video shot boundary detection techniques. </title> <booktitle> In Proc. of IS&T/SPIE 1996 Int'l Symp. on Elec. Imaging: Science and Technology, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: A segmentation viewer, named segview, has been constructed, which supports browsing and editing of the segment, scene and shot indices in the database. Other work in our research group has compared a variety of content extraction algorithms that can be used to automatically segment a video stream into shots <ref> [BR96a] </ref>. The last two programs, named cealg and ceedit, provide the basis for integrating content extraction algorithms into the VOD System. These tools provide an interface to run the shot detection algorithms and allow a user to correct errors in the structural indices. <p> The insertion cursor is visible in figure 10 just after the first keyframe in the scene row. 5 Content Extraction Interfaces The content extraction tool interfaces were developed to integrate into the VOD system a suite of content extraction, or shot detection, algorithms implemented by Boreczky <ref> [BR96a] </ref>. These algorithms calculate shot boundaries by comparing the difference between individual frames in a video stream. To use the computer-generated output effectively, a user must be able to examine and correct the data before entering it into the database because shot detection algorithms are imprecise.
Reference: [BR96b] <author> D. W. Brubeck and L. A. Rowe. </author> <title> Hierarchical storage management in a distributed video-on-demand system. </title> <journal> IEEE Multimedia, </journal> <volume> 3(3) </volume> <pages> 37-47, </pages> <year> 1996. </year>
Reference-contexts: The database contains metadata and indices describing the videos stored in the system. It also stores state information for the management processes that handle the cache management operations associated with the VFS's <ref> [BR96b] </ref>. A VFS stores the digital representations of multimedia documents on magnetic disks for streaming playback over the Internet. An AS manages a tertiary storage device, typically an optical disk or tape jukebox.
Reference: [Dav] <author> J. Davidson. Pgbrowse. </author> <month> ftp://crseo.ucsb.edu/pub/pgbrowse/. </month>
Reference-contexts: Related work in VOD database tools include similar applications that support metadata databases. Pgbrowse, developed at U.C. Santa Barbara, provides a graphical interface to an arbitrary Postgres database. It allows a user to generate arbitrary queries on the database <ref> [Dav] </ref>. The management of the VODS database through the Postgres monitor program, or even through GUI tools such as pgbrowse, is simply too complicated for users who are not intimately familiar with the metadata schema.
Reference: [DLM + 94] <author> E. Deardorff, T. D. C. Little, J. D. Marshall, D. Venkatesh, et al. </author> <title> Video scene decomposition with the motion picture parser. </title> <booktitle> In Proceedings of the SPIE The International Society for Optical Engineering, </booktitle> <volume> volume 2187, </volume> <pages> pages 44-55, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: GUI tools which have knowledge about the database schema can hide much of the complexity of the metadata. The Motion Picture Parser (MPP), developed at Boston University, integrates a scene-detection algorithm with a video editor for the purpose of annotating scenes for content-based retrieval <ref> [DLM + 94] </ref>. The MPP was developed for use with a VOD system being developed at Boston University.
Reference: [Jac96] <author> M. H. Jackson. </author> <title> An application programming interface to the berkeley continuous media toolkit. </title> <type> Master's thesis, </type> <institution> University of California, Berkeley, Computer Science Division, </institution> <year> 1996. </year>
Reference-contexts: Application programs that do not require direct access to Postgres can connect to the queryserver using Tcl-Dp and submit queries to the database [SRY93]. The shot boundary editor uses the facilities of the CMT Media Playback API to provide video playback and simple editing control within the interface <ref> [Jac96] </ref>. Several display and database abstractions were implemented as these tools were developed. The abstractions include database queries to obtain information about the structure of the schema, operations to display the results of a query, or procedures to save a user's modifications back to the database.
Reference: [MPR96] <author> K. Mayer-Patel and L. A. Rowe. </author> <title> Design and performance of the continuous media toolkit. </title> <note> http://bmrc.berkeley.edu/projects/cmt/index.html, 1996. </note>
Reference-contexts: The Berkeley Continuous Media Toolkit is used to stream the video from a VFS to a client across the Internet <ref> [MPR96] </ref>. The video data structure that describes a document, a script file, contains pointers to digital media stored separately in one or more clipfiles [RBB + 95]. The CM STREAM table contains the script and format information for each document. <p> For example, bvde and segview use the library routines for displaying table entries directly from the database, while cealg uses few of the common procedures. While the other programs from the suite of tools are based on the vodwish shell, ceedit is based on the Continuous Media Toolkit <ref> [MPR96] </ref>. Rather than relying on the presence of built-in libraries for access to the database, this program uses the Infosaurus queryserver to communicate with the database [Ber95].
Reference: [Ous90] <author> J. K. Ousterhout. </author> <title> Tcl: An Embedded Command Language. </title> <institution> Computer Science Division, University of California, Berkeley, </institution> <address> CA, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: The user interfaces are implemented with Tcl/Tk <ref> [Ous90] </ref>. The interface to Postgres is provided by C libraries, with hooks to create Tcl commands for generating database queries. These libraries and extensions to Tcl are part of an application-specific Tcl/Tk shell called vodwish (i.e., the VOD extensions to the standard wish shell).
Reference: [RBB + 95] <author> L. A. Rowe, J. Boreczky, D. A. Berger, D. W. Brubeck, and J. E. Baldeschwieler. </author> <title> A distributed hierarchical video-on-demand system. </title> <booktitle> In **ICIP 1995**, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: The Berkeley Continuous Media Toolkit is used to stream the video from a VFS to a client across the Internet [MPR96]. The video data structure that describes a document, a script file, contains pointers to digital media stored separately in one or more clipfiles <ref> [RBB + 95] </ref>. The CM STREAM table contains the script and format information for each document. In addition, each clipfile from the script has an entry in the CLIPFILE table. A clipfile entry may be shared across multiple documents.
Reference: [RBE94] <author> L. A. Rowe, J. Boreczky, and C. Eads. </author> <title> Indexes for user access to large video databases. In Storage and Retrieval for Image and Video Databases II, </title> <booktitle> volume 2185, </booktitle> <pages> pages 150-161, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: A graphical user interface (GUI) has been constructed that allows users to query the metadata database and view the resulting multimedia documents. This paper describes administrative tools designed to enter documents into the database and create appropriate metadata index entries to them <ref> [RBE94] </ref>. The VOD system architecture is composed of a database, one or more video file servers (VFS) and one or more archive servers (AS). The database contains metadata and indices describing the videos stored in the system. <p> The database contains metadata for the documents stored in the system and internal state related to the location of digital media files stored on local VFS's <ref> [RBE94] </ref>. To support a wide variety of searching and browsing functions on the documents in the collection, the indices are stored in a metadata database that has a reasonably complex schema. The VOD database schema started as a common schema for the Sequoia 2000 project [SD91].
Reference: [SD91] <author> M. Stonebraker and J. Dozier. </author> <title> Sequoia 2000: Large capacity object servers to support global change research. </title> <type> Technical report, </type> <institution> University of California, Berkeley, </institution> <month> July </month> <year> 1991. </year> <note> Sequoia 2000 Technical Report 91/1. </note>
Reference-contexts: To support a wide variety of searching and browsing functions on the documents in the collection, the indices are stored in a metadata database that has a reasonably complex schema. The VOD database schema started as a common schema for the Sequoia 2000 project <ref> [SD91] </ref>. The Sequoia project uses the document metaphor to refer to a basic collection of information that may include several different types of media. The schema for the VOD System was developed using the video components from the Sequoia metadata schema.
Reference: [SK91] <author> M. R. Stonebraker and G. Kemnitz. </author> <title> The postgres next generation database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 78-92, </pages> <month> October </month> <year> 1991. </year> <note> http://postgres.berkeley.edu/. 17 </note>
Reference-contexts: In addition, without the assistance of an interface with knowledge of the underlying schema, it is tedious to manually keep track of the links between entries in the database. The current VOD prototype uses the free Postgres database distributed by U.C. Berkeley <ref> [SK91] </ref>. We plan to convert the system to use a commercial DBMS using an ODBC interface. GUI tools which have knowledge about the database schema can hide much of the complexity of the metadata. <p> Section 6 discusses the implementation of these interfaces. Finally, section 7 describes the results of introducing these administrative tools into the VODS environment. 2 Background The Berkeley Distributed Video-on-Demand System is supported by a Postgres database <ref> [SK91] </ref>. The database contains metadata for the documents stored in the system and internal state related to the location of digital media files stored on local VFS's [RBE94].
Reference: [SRY93] <author> B. C. Smith, L. A. Rowe, and S. Yen. </author> <title> Tcl distributed programming. </title> <booktitle> In Proceedings Tcl 1993 Workshop, </booktitle> <address> Berkeley, CA, </address> <month> June </month> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Rather than relying on the presence of built-in libraries for access to the database, this program uses the Infosaurus queryserver to communicate with the database [Ber95]. Application programs that do not require direct access to Postgres can connect to the queryserver using Tcl-Dp and submit queries to the database <ref> [SRY93] </ref>. The shot boundary editor uses the facilities of the CMT Media Playback API to provide video playback and simple editing control within the interface [Jac96]. Several display and database abstractions were implemented as these tools were developed.
References-found: 13

