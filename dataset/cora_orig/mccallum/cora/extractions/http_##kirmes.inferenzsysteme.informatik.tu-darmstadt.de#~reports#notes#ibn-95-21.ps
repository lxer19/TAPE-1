URL: http://kirmes.inferenzsysteme.informatik.tu-darmstadt.de/~reports/notes/ibn-95-21.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: gerberding@inferenzsysteme.informatik.th-darmstadt.de  
Title: Transforming Algorithmic Function Definitions into Unconditional Term Rewriting Systems  
Author: Stefan Gerberding 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: Technische Hochschule Darmstadt, FB Informatik Institut fur Programm- und Informationssysteme  
Abstract: We propose an uniform and easy to implement transformation algorithm which computes an unconditional term rewriting system from an algorithmic specification (a set of conditional equations) with the same initial semantics. If the conditional equations specify total, case-disjunct (i.e. deterministic) functions the convergence of the resulting term rewriting system is guaranteed. Our transformation may be used as preprocessing step making techniques from unconditional rewriting applicable which are not at hand for conditional rewriting in general, such as inductive completion.
Abstract-found: 1
Intro-found: 1
Reference: [Biundo et al., 1986] <author> Susanne Biundo, Birgit Hummel, Dieter Hutter, & Christoph Walther. </author> <title> The Karlsruhe induction theorem proving system. </title> <booktitle> In Proceedings of the 8th International Conference on Automated Deduction, </booktitle> <publisher> Oxford, UK, </publisher> <pages> pages 672-674. </pages> <publisher> Springer, </publisher> <month> July </month> <year> 1986. </year> <note> LNCS 230. </note>
Reference-contexts: the same function. 1 For free constructors there are no relations between constructor terms, i.e. c (t fl ) 6= d (s fl ) for all tuples of terms t fl , s fl and constructors c 6 d. 2 This is e.g. the case for the INKA system, cf. <ref> [Biundo et al., 1986] </ref>.
Reference: [Dershowitz & Jouannaud, 1990] <author> Nachum Dershowitz & Jean Pierre Jouannaud. </author> <title> Rewrite Systems, volume B: Formal Models and Semantics, </title> <booktitle> chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <address> 1990. Jan van Leeuwen (Ed.). </address>
Reference-contexts: We assume that the reader is familiar with the notions of term rewriting <ref> [Dershowitz & Jouannaud, 1990] </ref>. We denote a rewrite rule by l ) r. If R is a rewrite system, the rewrite relation is denoted by s ! R t.
Reference: [Dershowitz & Plaisted, 1986] <author> Nachum Dershowitz & David A. Plaisted. </author> <title> Equational programming. </title> <type> Technical Report R-86-1265, </type> <institution> University of Illinois, Urbana, </institution> <year> 1986. </year>
Reference-contexts: idea of our transformation (algorithm 7) is similar to the method described in [Giovannetti & Moiso, 1987] (which is 15 Because R is convergent the initial and the operational semantics are isomorphic (main theorem of initial semantics, cf. e.g. [Ehrich et al., 1989]). an extension of the one suggested in <ref> [Dershowitz & Plaisted, 1986] </ref>), namely the evaluation of (parts of) the conditions in additional arguments of a new function. Our transformation evaluates (i.e. reduces) the condition to either true or false. Giovannetti and Moiso's transformation only evaluates one side of an equational condition, the other one is kept.
Reference: [Dershowitz et al., 1987] <author> Nachum Dershowitz, Mitsuhiro Okada, & G. Sivakumar. </author> <title> Confluence of conditional term rewrite systems. </title> <booktitle> In Proceedincs of the 1st International Workshop on Conditional Term Rewriting Systens, </booktitle> <address> Orsay, France, </address> <publisher> LNCS 308, </publisher> <pages> pages 31-44. </pages> <publisher> Springer, </publisher> <month> July </month> <year> 1987. </year>
Reference: [Ehrich et al., 1989] <author> Hans D. Ehrich, Martin Gogolla, & Udo W. Lipeck. </author> <title> Algebraische Spezifikation abstrakter Datentypen. </title> <publisher> Teubner Stuttgart, </publisher> <year> 1989. </year>
Reference-contexts: condition. 6 Related Work As mentioned in the introduction the basic idea of our transformation (algorithm 7) is similar to the method described in [Giovannetti & Moiso, 1987] (which is 15 Because R is convergent the initial and the operational semantics are isomorphic (main theorem of initial semantics, cf. e.g. <ref> [Ehrich et al., 1989] </ref>). an extension of the one suggested in [Dershowitz & Plaisted, 1986]), namely the evaluation of (parts of) the conditions in additional arguments of a new function. Our transformation evaluates (i.e. reduces) the condition to either true or false.
Reference: [Ganzinger, 1987] <author> Harald Ganzinger. </author> <title> A completion procedure for conditional equations. </title> <booktitle> In Proceedincs of the 1st International Workshop on Conditional Term Rewriting Systens, </booktitle> <address> Orsay, France, </address> <publisher> LNCS 308, </publisher> <pages> pages 63-83. </pages> <publisher> Springer, </publisher> <month> July </month> <year> 1987. </year>
Reference-contexts: Unfortunately the conditional equations occurring in algorithmic function specifications in general do not obey the various additional requirements which are necessary to make certain techniques available. For instance the decreasingness ([Dershowitz et al., 1987]) or reductiveness (e.g. <ref> [Ganzinger, 1987] </ref>) property is needed to make completion applicable. Therefore it is sometimes advisable to transform specifications given by conditional equations into unconditional rewrite systems, provided the transformation preserves some important properties of the specification, namely termination and the operational semantics.
Reference: [Gerberding, 1993] <author> Stefan Gerberding. </author> <title> A comparison of explicit and implicit induction. </title> <type> Technical report, </type> <institution> Technische Hochschule Darmstadt, </institution> <year> 1993. </year> <note> INKA Blue Note #12. </note>
Reference: [Gerberding, 1994] <author> Stefan Gerberding. </author> <title> Comparing explicit and implicit induction. </title> <type> Technical report, </type> <institution> Technische Hochschule Darmstadt, </institution> <year> 1994. </year>
Reference-contexts: The transformation theorem 12 states the preservation of the initial semantics. The theorem is a consequence of the termination and confluence lemmata 10 and 11 which in turn are consequences of the computation lemmata 8 and 9. We will only sketch some of the proofs. For details see <ref> [Gerberding, 1994] </ref>. Lemma 8 First Computation Lemma. Assume an admissible specification S, i.e. all algorithmic definitions are deterministic, terminating and complete, and a rewrite system R which has been obtained by applying algorithm 7 to S. <p> The termination of S j1 is used as induction hypothesis. The assumption of the existence of some infinite derivation in R together with the computation lemmata 8 and 9 and the admissibility of S leads to a contradiction. For details see <ref> [Gerberding, 1994] </ref>. 11 If no result term dre ' (cf. (23)) contains destructors t t 0 holds.
Reference: [Giesl, 1993] <author> Jurgen Giesl. </author> <title> Proving termination of algorithms with polynomial interpretations. </title> <type> Technical report, </type> <institution> Technische Hochschule Darmstadt, </institution> <month> November </month> <year> 1993. </year> <note> INKA Blue Note #14. </note>
Reference: [Giovannetti & Moiso, 1987] <author> E. Giovannetti & C. Moiso. </author> <title> Notes on the elimination of conditions. </title> <booktitle> In Proceedincs of the 1st International Workshop on Conditional Term Rewriting Systens, </booktitle> <address> Orsay, France, </address> <publisher> LNCS 308. Springer, </publisher> <month> July </month> <year> 1987. </year>
Reference-contexts: If the specification is admissible, i.e. every function of the specification is terminating, deterministic and case-complete, our main theorem guarantees (among other properties) the convergence of the resulting rewrite system and the preservation of operational semantics. The general idea of our transformation is similar to the technique described in <ref> [Giovannetti & Moiso, 1987] </ref>. There a transformation from conditional rewrite systems into unconditional rewrite systems has been presented and a theorem has been stated which guarantees convergence and the preservation of operational semantics. <p> The formal description follows in section 4 and in section 5 we state the properties of the resulting unconditional rewrite systems. In section 6 we will elaborate the details of the relationship of our transformation and the one presented in <ref> [Giovannetti & Moiso, 1987] </ref>. 2 Preliminaries We assume a signature = S i0 i for specifications, the sets i are disjoint and each i contains function symbols of arity i, 0 is the set of constant symbols. The signature may be many-sorted. <p> Corollary 13. Under the assumption of lemma 10 the rewrite system R is left-linear and fulfills the sufficient completeness condition. 6 Related Work As mentioned in the introduction the basic idea of our transformation (algorithm 7) is similar to the method described in <ref> [Giovannetti & Moiso, 1987] </ref> (which is 15 Because R is convergent the initial and the operational semantics are isomorphic (main theorem of initial semantics, cf. e.g. [Ehrich et al., 1989]). an extension of the one suggested in [Dershowitz & Plaisted, 1986]), namely the evaluation of (parts of) the conditions in additional
Reference: [Gramlich & Lindner, 1991] <author> Bernhard Gramlich & Wolfgang Lindner. </author> <title> A guide to UNI-COM, an inductive theorem prover based on rewriting and completion techniques. </title> <type> Technical Report SEKI-Report SR-91-17, </type> <institution> Universitat Kaiserslautern, </institution> <year> 1991. </year>
Reference-contexts: The transformation often makes techniques from the conceptionally simpler class of methods from unconditional rewriting available. For example we are now able to use one of the various induction theorem proving systems ([Kapur & Zhang, 1987], <ref> [Gramlich & Lindner, 1991] </ref> among others) after the transformation of the specification without demanding decreasingness properties of the conditions.
Reference: [Huet & Hullot, 1982] <author> Gerard Huet & Jean-Marie Hullot. </author> <title> Proof by induction in equational theories with constructors. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25 </volume> <pages> 239-266, </pages> <year> 1982. </year>
Reference: [Jouannaud & Kounalis, 1989] <author> Jean Pierre Jouannaud & Emmanuel Kounalis. </author> <title> Automatic proofs by induction in theories without constructors. </title> <journal> Information and Computation, </journal> <volume> 82(33) </volume> <pages> 1-33, </pages> <year> 1989. </year>
Reference-contexts: Furthermore the result of our transformation is left-linear which is useful if R is used as input to some proof by consistency method, since most inconsistency tests gain efficiency when used with left-linear systems, e.g. the test for inductive reducibility (cf. <ref> [Jouannaud & Kounalis, 1989] </ref>). Corollary 13.
Reference: [Kapur & Zhang, 1987] <author> Deepak Kapur & Hantao Zhang. RRL: </author> <title> Rewrite Rule Laboratory, </title> <month> June </month> <year> 1987. </year> <note> Revised 1989. </note>
Reference: [Walther, 1994a] <author> Christoph Walther. </author> <title> Mathematical induction. </title> <editor> In D. M. Gabbay, C. J. Hogger, & J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 2. </volume> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Another application of our transformation is proving the termination of the specification: Since termination proofs for algorithmic specifications are usually easier than the termination proofs for the corresponding rewrite systems ([Giesl, 1993] and <ref> [Walther, 1994a] </ref>), we can prove the termination of the functions of our algorithmic specification and the main theorem states that the transformed system is terminating as well.
Reference: [Walther, 1994b] <author> Christoph Walther. </author> <title> On proving the termination of algorithms by machine. </title> <journal> Artificial Intelligence, </journal> <note> 1994. To appear. </note>
Reference-contexts: We will solve this problem in the next section. 7 Usually some nullary constructor, e.g. 0 for number or nil for sexpr. The witness term serves as a "deterministic don't care" term which is needed to achieve total functions <ref> [Walther, 1994b] </ref>. 4 Transforming more general Algorithms In this section we will explain how to transform algorithms which are not in rewrite normal form.
References-found: 16

