URL: http://www.cis.ohio-state.edu/~weide/WISR8/SEN-WISR8.ps
Refering-URL: http://www.cis.ohio-state.edu/~weide/WISR8/working-groups.html
Root-URL: 
Email: edwards@cs.wvu.edu  weide@cis.ohio-state.edu  leavens@cs.iastate.edu  ewan.tempero@mcs.vuw.ac.nz  
Title: on Software Reuse Summary and Working Group Reports questions about software reuse, and experiences and
Author: Stephen H. Edwards Bruce W. Weide Alternatives, led by Gary Leavens Murali Sitaraman Bill Frakes (Virginia Paul Clements led by Allen Parrish Jacob Sholom Cohen (Software Moderators: Gary T. Leavens Ewan Tempero Participants: Dean Allemang (Organon Motives) Paulo Bucci Larry Latour John Penix Stephen Seidman Jim Wagner 
Date: March 23-26, 1997  
Address: Morgantown, WV  Columbus, OH  Wellington)  Wayne Heym (Otterbein College)  
Affiliation: West Virginia University Dept. of Statistics and Computer Science  The Ohio State University Dept. of Computer and Information Science  (Iowa State University)  (West Virginia University)  Tech)  (Software Engineering Institute)  (University of Alabama)  Cybulski (University of Melbourne)  Engineering Institute)  (Iowa State University)  (Victoria University of  (The Ohio State University)  (University of Maine) Marjan Mernik (University of Maribor)  (University of Cincinnati)  (Colorado State University)  (The Ohio State University) Sergey Zhupanov (The Ohio State University) PISA.  
Note: WISR8: 8 th Annual Workshop  The Eighth Annual Workshop on Software Reuse (WISR8), hosted by the Reusable Software Research Group (RSRG) at The Ohio State University, took place  in Columbus, Ohio. Over 70 participants gathered to discuss the technical  Section 9).  
Abstract: Dave Dikel and David Kane (Applied Expertise) This report summarizes the results of the eight working groups. While the summaries presented here are necessarily brief, for the interested reader the full text of each working groups report is available online in the WISR Archive (See 1.1 Introduction This report briefly summarizes the work of the Informal versus Formal Specifications working group. In the initial discussion, it became clear that it would be useful to have some idea of the tradeoffs between using informal and formal specifications, so that became the main goal of the group. The result was a model that helps predict the impact of alternative specification methodologies, which we called 
Abstract-found: 1
Intro-found: 1
Reference: [AG94] <author> Allen, R., and Garlan, D. </author> <title> Formalizing Architectural Connection. </title> <booktitle> Proceedings of the 16 th International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: A connector is usually, but not always, considered to denote a protocol that enables components to work together. Examples of research that takes the position that connectors are distinct entities include the work of Shaw [Shaw94], and Allen and Garlan <ref> [AG94] </ref>. Examples of considering connectors just another kind of component include the work of Luckham [Luckham95], and Stovsky and Weide [SW88]. Our discussions on the nature of connectors produced an interesting perspective that might suggest that the question of whether connectors are components is not really the issue.
Reference: [ACF96] <institution> IEEE Guide for Information TechnologySoftware ReuseData Model for Reuse Library Interoperability: Asset Certification Framework, IEEE, 1420.1a, </institution> <year> 1996. </year>
Reference-contexts: The Asset Certification Framework standard provides an approach for describing such multidimensional certification frameworks <ref> [ACF96] </ref>. 5.5 Summary Perhaps our most important result is in our characterization of the concepts of verification, validation and certification in the context of reuse: Verification: Does a reusable component meet its specification? Validation: Does the specification for a reusable component satisfy a wide range of alternative usages for that component?
Reference: [Baldrige97] <institution> Malcolm Baldrige National Quality Award 1997 Criteria for Performance Excellence, National Institute of Standards and Technology, </institution> <year> 1997. </year> <note> Available from oqp@nist.gov </note> . 
Reference: [BC96] <author> Brownsword, L., and Clements, P. </author> <title> A Case Study in Successful Product Line Development (CMU/SEI-96-TR-016, </title> <institution> ESC-TR-96-016). Pittsburgh, Pa.: Software Engineering Institute, Carnegie Mellon University, </institution> <year> 1996. </year>
Reference-contexts: Either may be built in a product line. 4.3 Experience Reports Paul Clements presented the first case study. CelsiusTech Systems is a Swedish company that builds shipboard command and control systems for many navies around the world <ref> [BC96] </ref>. In December of 1985, they landed two major contracts simultaneously. Realizing that they could not possibly complete those contracts one at a time, they adopted a product line strategy as the only way to fulfill their companys obligations.
Reference: [Cleaveland88] <author> Cleaveland, J. C. </author> <title> Building Application Generators. </title> <booktitle> IEEE Software 5, </booktitle> <month> 4 (July </month> <year> 1988), </year> <pages> 25-33. </pages>
Reference-contexts: Domain engineering has matured sufficiently to allow the development of support tools such as DARE [FPF95] and application generator development tools such as Metatool <ref> [Cleaveland88] </ref>. Automating domain engineering means combining the domain analysis and domain implementation phases into a coherent whole. This involves mapping domain analysis outputs to domain implementation inputs, as a first step to integrating the tools for each.
Reference: [Davis95] <author> Davis, A. M., </author> <booktitle> 201 Principles of Software Development, </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1995, </year> <month> 209. </month>
Reference-contexts: The characteristics of the principles for our discussion were that they: Are Doable: The principle should be actionable, not just true. For example, Alan Davis suggests that software has increasing entropy <ref> [Davis95] </ref>. While this may be true, it is not actionable, and would not be a principle for the purposes of the working groups discussion. Pertain to Reuse: The group recognized that there are many prerequisites to reuse.
Reference: [Dellarocas97] <author> Dellarocas, C. </author> <title> Toward a Design Handbook for Integrating Software Components. </title> <booktitle> Proceedings of the 5 th International Symposium on Assessment of Software Tools and Technologies (SAST97), </booktitle> <address> Pittsburgh, PA, </address> <month> June 3-5, </month> <year> 1997. </year>
Reference-contexts: It will make designers of new components more aware of the interconnection assumptions their components are making and will assist the design of better reusable components. Chris Dellarocas work on developing a design handbook for integrating software components <ref> [Dellarocas97] </ref> is a step in the direction of mapping out the domain of software connectors. 2.3 Behavioral Specifications Can Be Usefully Augmented with Operational Examples Traditional model-oriented specifications are based on preconditions and post-conditions. Essentially, they encode the interfaces of components and the behavior of each operation provided by components.
Reference: [DF93] <author> Devanbu, P. and Frakes, W. </author> <title> Generative Techniques for Reuse. Tutorial at ICSR2, </title> <type> Lucca, </type> <institution> Italy, </institution> <year> 1993. </year>
Reference: [DF96] <author> Devanbu, P. and Frakes, W. </author> <title> Introduction to Domain Analysis and Domain Engineering, </title> <booktitle> Tutorial at ICSR4, </booktitle> <address> Orlando, FL 1996. </address>
Reference: [DK95] <author> Dikel, D., Kane, D., et al., </author> <title> Software Architecture: Organizational Success Factors. </title> <booktitle> DARPA, </booktitle> <year> 1995. </year>
Reference: [DK97] <author> Dikel, D., and Kane, D., </author> <booktitle> Workshop Preparatory Materials, </booktitle> <address> WISR, </address> <year> 1997. </year>
Reference: [FO95] <author> Foote, B., Opdyke, W. </author> <title> Lifecycle and Refactoring Patterns That Support Evolution and Reuse. Pattern Languages of Program Design, Coplien, </title> <editor> J., Schmidt, D., eds., </editor> <publisher> Addison-Wesley, </publisher> <address> Reading Massachusetts, </address> <year> 1995, </year> <pages> 239-257. </pages>
Reference-contexts: When organizations undertake software reuse, the need to manage change grows because both the use and the life cycle of assets expands. Further, these changes need to be managed in a coordinated fashion <ref> [FO95] </ref>.
Reference: [FPF95] <author> Frakes, W., Prieto-Diaz, R., and Fox, C. </author> <title> DARE: Domain Analysis and Reuse Environment. </title> <booktitle> Seventh Annual Workshop on Software Reuse. </booktitle> <address> St. Charles, IL, </address> <year> 1995. </year>
Reference-contexts: Domain engineering has matured sufficiently to allow the development of support tools such as DARE <ref> [FPF95] </ref> and application generator development tools such as Metatool [Cleaveland88]. Automating domain engineering means combining the domain analysis and domain implementation phases into a coherent whole. This involves mapping domain analysis outputs to domain implementation inputs, as a first step to integrating the tools for each.
Reference: [IEEE96] <institution> IEEE Software Engineering Standards Committee, Underlying Principles for IEEE Software Engineering Standards, </institution> <month> 21 August </month> <year> 1996. </year> <note> Available from the Chair, </note> <author> Leonard L. Tripp, </author> <month> leonard.l.tripp@boeing.com </month> . 
Reference-contexts: The groups work in principles was intended to contribute to other efforts in the software engineering standards community that are identifying and articulating fundamental principles of software engineering as a means of unifying the corpus of software engineering practice standards <ref> [IEEE96] </ref>.
Reference: [Jabir96] <author> Jabir, </author> <title> A Search for Fundamental Principles of Software Engineering: </title> <booktitle> Report of a Workshop conducted at the Forum on Software Engineering Standards Issues, </booktitle> <address> Montral, Quebec, Canada, </address> <month> 21-25 October </month> <year> 1996 </year> <month> (forthcoming). </month>
Reference: [Luckham95] <author> Luckham, D. C., et al., </author> <title> Specification and Analysis of System Architecture Using Rapide, </title> <journal> IEEE Transactions on Software Engineering 21, </journal> <volume> 4 (1995), </volume> <pages> 336-355. </pages>
Reference-contexts: Examples of research that takes the position that connectors are distinct entities include the work of Shaw [Shaw94], and Allen and Garlan [AG94]. Examples of considering connectors just another kind of component include the work of Luckham <ref> [Luckham95] </ref>, and Stovsky and Weide [SW88]. Our discussions on the nature of connectors produced an interesting perspective that might suggest that the question of whether connectors are components is not really the issue.
Reference: [RPG96] <institution> IEEE Software Engineering Standards Committee, Reuse Planning Group, </institution> <note> Action Plan, 17 September 1996. Available at URL: http://www.sesc-rpg.mews.org/ </note> . 
Reference-contexts: Specifically, the Reuse Planning Group of the IEEE Computer Society Software Engineering Standards Committee (SESC) recommended initiating a standards effort to write a document providing principles of reuse <ref> [RPG96] </ref>. 8.3 What Are Principles? The group identified the boundaries of the discussion, i.e., what was and was not appropriate for a discussion of software reuse principles. The characteristics of the principles for our discussion were that they: Are Doable: The principle should be actionable, not just true.
Reference: [SW94] <author> Sitaraman, M., and Weide, B. W. </author> <title> Component-Based Software Using RESOLVE. </title> <booktitle> Software Engineering Notes 19, </booktitle> <month> 4 (October </month> <year> 1994), </year> <pages> 21-22. </pages>
Reference-contexts: The RESOLVE discipline for software component design requires explicit statement of all design dependencies and supports minimizing design dependencies through parameterization. This approach results in systems about which it is possible to reason modularly, based primarily on design dependencies and not integration dependencies <ref> [SW94] </ref>. 3 Domain Engineering Tools Moderator: Bill Frakes (Virginia Tech) wfrakes@vt.edu Participants: David Eichmann (University of Houston - Clear Lake) Christopher Pidgeon (Semantic Designs, Inc.) Domain engineering has two phases; domain analysis and domain implementation.
Reference: [Shaw94] <author> Shaw, M. </author> <title> Procedure Calls Are the Assembly Language of Software Interconnection: Connectors Deserve First-Class Status. </title> <institution> Carnegie Mellon University, </institution> <type> Technical Report CMU-CS-94-107, </type> <month> January, </month> <year> 1994. </year>
Reference-contexts: A connector is usually, but not always, considered to denote a protocol that enables components to work together. Examples of research that takes the position that connectors are distinct entities include the work of Shaw <ref> [Shaw94] </ref>, and Allen and Garlan [AG94]. Examples of considering connectors just another kind of component include the work of Luckham [Luckham95], and Stovsky and Weide [SW88].
Reference: [SW88] <author> Stovsky, M. P., and Weide, B. W. </author> <title> Building Interprocess Communication Models Using STILE. </title> <booktitle> Proceedings of the 21 st Hawaii International Conference on Systems Sciences, </booktitle> <month> January </month> <year> 1988, </year> <note> Vol. 2, 639-647; reprinted in Visual Programming Environments: Paradigms and Systems, </note> <editor> E.P. Glinert, ed., </editor> <publisher> IEEE Press, </publisher> <year> 1990, </year> <pages> 566-574. </pages>
Reference-contexts: Examples of research that takes the position that connectors are distinct entities include the work of Shaw [Shaw94], and Allen and Garlan [AG94]. Examples of considering connectors just another kind of component include the work of Luckham [Luckham95], and Stovsky and Weide <ref> [SW88] </ref>. Our discussions on the nature of connectors produced an interesting perspective that might suggest that the question of whether connectors are components is not really the issue.
Reference: [WOS94] <author> Weide, B. W., Ogden, W. F., and Sitaraman, M. </author> <title> Recasting Algorithms to Encourage Reuse. </title> <booktitle> IEEE Software 11, </booktitle> <month> 5 (September </month> <year> 1994), </year> <pages> 80-88. </pages>
Reference-contexts: In fact, an entirely different way of designing a sorting componentby recasting sorting from being an algorithm to being an abstract data typemakes the protocol required for interacting with the component an explicit part of its specification <ref> [WOS94] </ref>.
Reference: [WD96] <author> Wilson, J. and Dikel, D., </author> <title> Software Reuse Benchmarking Study: Learning from Industry and Government Leaders. Software Reuse Initiative, </title> <year> 1996. </year>
References-found: 22

