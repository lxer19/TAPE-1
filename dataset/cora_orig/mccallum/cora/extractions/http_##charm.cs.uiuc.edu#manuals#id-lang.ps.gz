URL: http://charm.cs.uiuc.edu/manuals/id-lang.ps.gz
Refering-URL: http://charm.cs.uiuc.edu/manuals/
Root-URL: http://www.cs.uiuc.edu
Title: ID Language Reference Manual Version 90.1  
Author: Rishiyur S. Nikhil 
Note: Copyright c 1991  
Date: July 15, 1991  
Affiliation: Computation Structures Group  Laboratory for Computer Science, Massachusetts Institute of Technology  
Pubnum: Memo 284-2  
Abstract: This report describes research done at the Laboratory for Computer Science of the Mas-sachusetts Institute of Technology. Funding for the Laboratory is provided in part by the Advanced Research Projects Agency of the Department of Defense under the Office of Naval Research contract N00014-89-J-1988. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arvind, K. P. Gostelow, and W. Plouffe. </author> <title> An Asynchronous Programming Language and Computing Machine. </title> <type> Technical Report 114a, </type> <institution> Department of Information and Computer Science, University of California, </institution> <address> Irvine, CA, </address> <month> December </month> <year> 1978. </year>
Reference-contexts: The second layer extends this with I-structures which are described in Section 4. The third layer extends this with M-structures which are described in Section 5. Some general aspects of these non-functional extensions are described in Section 3. Id traces its roots back to 1978 <ref> [1] </ref>. Since then, versions of Id have run on simulated dataflow machines, and more recently on real dataflow hardware and Unix workstations. Id/83s [4] was a first cut at a major redesign of the language, based on contemporary ideas in functional languages.
Reference: [2] <author> R. S. Nikhil. </author> <title> Id Nouveau Reference Manual, Part I: Syntax. </title> <type> Technical report, </type> <institution> Computation Structures Group, MIT Lab. for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, </address> <month> April </month> <year> 1987. </year>
Reference-contexts: Since then, versions of Id have run on simulated dataflow machines, and more recently on real dataflow hardware and Unix workstations. Id/83s [4] was a first cut at a major redesign of the language, based on contemporary ideas in functional languages. It briefly acquired the name Id Nouveau (1986) <ref> [6, 2] </ref>, and then reverted to Id in 1988 [3]. Id continues to be a research language. Current investigations include better constructs to express non-deterministic computations, I/O, resource-management etc. This document is not a tutorial on Id. For a tutorial introduction, the reader is referred to [5].
Reference: [3] <author> R. S. Nikhil. </author> <title> Id (Version 88.1) Reference Manual. </title> <type> Technical Report CSG Memo 284, </type> <institution> MIT Laboratory for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Id/83s [4] was a first cut at a major redesign of the language, based on contemporary ideas in functional languages. It briefly acquired the name Id Nouveau (1986) [6, 2], and then reverted to Id in 1988 <ref> [3] </ref>. Id continues to be a research language. Current investigations include better constructs to express non-deterministic computations, I/O, resource-management etc. This document is not a tutorial on Id. For a tutorial introduction, the reader is referred to [5]. <p> Such a statement has the form: slot-designator = e ; where slot-designator is an identifier (not a general expression) followed by zero or more functional or I-structure array and field selectors, followed by exactly one I-structure or M-structure array or field selector. Examples: a <ref> [3] </ref> = e1 ; c.name = e3; d!balance = e4; e [4].name = e5 ; f.months [12]!balance = e6 ; Note that slot-designators are unrelated to patterns, and there are no identifier bindings involved.
Reference: [4] <author> R. S. Nikhil and Arvind. Id/83s. </author> <type> Technical report, </type> <institution> MIT Laboratory for Computer Science, </institution> <address> Cambridge, MA 02139, </address> <month> July </month> <year> 1985. </year> <institution> (Prepared for MIT Subject 6.83s). </institution>
Reference-contexts: Some general aspects of these non-functional extensions are described in Section 3. Id traces its roots back to 1978 [1]. Since then, versions of Id have run on simulated dataflow machines, and more recently on real dataflow hardware and Unix workstations. Id/83s <ref> [4] </ref> was a first cut at a major redesign of the language, based on contemporary ideas in functional languages. It briefly acquired the name Id Nouveau (1986) [6, 2], and then reverted to Id in 1988 [3]. Id continues to be a research language.
Reference: [5] <author> R. S. Nikhil and Arvind. </author> <title> Programming in Id : a parallel programming language. </title> <note> 1990. (book in preparation). </note>
Reference-contexts: Id continues to be a research language. Current investigations include better constructs to express non-deterministic computations, I/O, resource-management etc. This document is not a tutorial on Id. For a tutorial introduction, the reader is referred to <ref> [5] </ref>. Appendix C lists the incompatibilities between this version of Id and previous versions. Acknowledgements Many people|past and current members of the Computation Structures Group, and colleagues elsewhere|have participated in the design of Id.
Reference: [6] <author> R. S. Nikhil, K. K. Pingali, and Arvind. </author> <title> Id Nouveau. </title> <type> Technical Report CSG Memo 265, </type> <institution> MIT Laboratory for Computer Science, </institution> <address> Cambridge, MA 02139, </address> <month> July 23 </month> <year> 1986. </year> <title> (Prepared for MIT Subject 6.83s). L A T E X'ed on August 11, </title> <year> 1994 </year>
Reference-contexts: Since then, versions of Id have run on simulated dataflow machines, and more recently on real dataflow hardware and Unix workstations. Id/83s [4] was a first cut at a major redesign of the language, based on contemporary ideas in functional languages. It briefly acquired the name Id Nouveau (1986) <ref> [6, 2] </ref>, and then reverted to Id in 1988 [3]. Id continues to be a research language. Current investigations include better constructs to express non-deterministic computations, I/O, resource-management etc. This document is not a tutorial on Id. For a tutorial introduction, the reader is referred to [5].
References-found: 6

