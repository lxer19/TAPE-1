URL: http://simon.cs.cornell.edu/Info/People/pientka/studienarbeit.ps
Refering-URL: http://simon.cs.cornell.edu/Info/People/pientka/
Root-URL: 
Title: A Heuristic for Case Analysis  
Author: Brigitte Pientka 
Address: 80 South Bridge, Edinburgh EH1 1HN  
Affiliation: Department of Artificial Intelligence University of Edinburgh  
Abstract: Case analysis together with recursion are common techniques used in program specifications. In order to verify programs, we use mathematical induction. In this paper, we will outline the importance of non-inductive proof obligations such as case analysis, if we want to prove recursive and non-recursive properties of programs. The heuristic we propose exploits conditions provided by conditional defining equations and selects potential case split variables based on the pattern of the theorem. We will show that proofs obtained with a heuristic for case analysis are often shorter and more sophisticated. Hence it represents a more efficient approach to deal with non-inductive proof obligations. 
Abstract-found: 1
Intro-found: 1
Reference: [Biundo et al. 86] <author> Biundo, S. and Hummel, B. and Hutter, D. and Walther, C. </author> <title> The Karlsruhe Induction Theorem Proving System. </title> <editor> In Jorg Siekmann, editor, </editor> <booktitle> CADE8, </booktitle> <pages> pages 672-674. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: A Heuristic for Case Analysis 18 does not offer much flexibility. Consequently, the process of case analysis is not as sophisticated as in CLAM + . Especially proofs in which CLAM uses conditional reasoning are considerably shorter and simpler than in NQTHM. 3.2.2 Comparison with INKA The INKA system <ref> [Biundo et al. 86] </ref> uses a similar approach to rippling to guide inductive proofs. It is weak as well in dealing with case analysis. Automatically, INKA will attempt to disprove the given theorem and then simplify before attempting induction, hence similar to the linear arithmetic procedure in NQTHM.
Reference: [Boyer & Moore 88] <author> R.S. Boyer and J.S. Moore. </author> <title> A Computational Logic Hand book. </title> <publisher> Academic Press, </publisher> <year> 1988. </year> <booktitle> Perspectives in Computing, </booktitle> <volume> Vol 23. </volume>
Reference-contexts: Finally, the implementation which builds upon the CLAM system and the results are discussed together with a comparative study with other theorem provers like NQTHM <ref> [Boyer & Moore 88] </ref>. 1.2 Background A proof plan represents a family of proofs which can be used to guide the search for proofs in this family [Bundy 88]. A proof plan has two parts, a tactic and a method. <p> A conjecture is split into different cases, if an IF-Expression is introduced into the conjecture, i.e. the conjecture is split into two parts according to whether the test of the IF is assumed to be true or false <ref> [Boyer & Moore 88] </ref>. The definitions used in NQTHM are of a conditional structure 9 , for example the definition for nth (l; x) IF (NLISTP L) NIL (IF (ZEROP X) L As an unsorted logic is used in NQTHM, the type information has to be embedded in the definitions.
Reference: [Bundy 88] <author> A. Bundy. </author> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In R. Lusk and R. Overbeek, editors, </editor> <booktitle> 9th Conference on Automated Deduction, </booktitle> <pages> pages 111-120. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <note> Longer version available from Edinburgh as DAI Research Paper No. 349. </note>
Reference-contexts: implementation which builds upon the CLAM system and the results are discussed together with a comparative study with other theorem provers like NQTHM [Boyer & Moore 88]. 1.2 Background A proof plan represents a family of proofs which can be used to guide the search for proofs in this family <ref> [Bundy 88] </ref>. A proof plan has two parts, a tactic and a method. A method consists of the preconditions under which the tactic is applicable and the effects of its application. It is expressed in a meta-logic.
Reference: [Bundy et al 89] <author> A. Bundy, F. van Harmelen, J. Hesketh, A. Smaill, and A. Stevens. </author> <title> A rational reconstruction and extension of recursion analysis. </title> <editor> In N.S. Sridharan, editor, </editor> <booktitle> Proceedings of </booktitle>
Reference-contexts: We will concentrate on proof plans for induction. In inductive proofs, we first try to simplify the theorem as much as possible and apply induction to the subgoals. generalized the conjecture we want to prove. Based on a generalization of recursion analysis an appropriate rule of induction is chosen <ref> [Bundy et al 89] </ref>. The recursive structure of the functions used in the conjecture is exploited to select an appropriate induction variable and induction schema. The chosen induction schema must enable further guided rewriting of the induction conclusion.
References-found: 4

