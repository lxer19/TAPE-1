URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/usr/bmm/public/papers/compressed/KochLMRRS95.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/bmm/public/www/KochLMRRS95.html
Root-URL: 
Phone: 2  4  5  6  7  
Title: Work-Preserving Emulations of Fixed-Connection Networks  
Author: Richard R. Koch F. T. Leighton ; Bruce M. Maggs Satish B. Rao Arnold L. Rosenberg Eric J. Schwabe 
Address: Holmdel, New Jersey 07733  Cambridge, Massachusetts 02139  Pittsburgh, PA 15213  4 Independence Way Princeton, NJ 08540  Amherst, Massachusetts 01003  Evanston, IL 60208  
Affiliation: 1 AT T Bell Laboratories  Mathematics Dept. and 3 Laboratory for Computer Science Massachusetts Institute of Technology  School of Computer Science Carnegie Mellon University  NEC Research Institute  Dept. of Computer Science University of Massachusetts  Dept. of Electrical Engineering and Computer Science Northwestern University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. J. Atallah. </author> <title> On multidimensional arrays of processors. </title> <journal> IEEE Trans actions on Computers, </journal> <volume> 37(10) </volume> <pages> 1306-1309, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Several of their results are included in this paper for completeness. There has been a great deal of previous work on network embeddings with the intent of showing that one network can or can't emulate another network efficiently <ref> [1, 3, 4, 5, 9, 16, 24] </ref>. Many of the results were positive and proved things like "all N -node binary trees can be emulated in constant time on an N -node hypercube." There were also some negative results, but their significance is less clear.
Reference: [2] <author> V. E. </author> <title> Benes. Mathematical Theory of Connecting Networks and Tele phone Traffic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1965. </year> <month> 57 </month>
Reference-contexts: It is also well known that it is possible to establish paths with congestion 2 between the inputs of a butterfly network in any permutation (the butterfly emulates a Benes network <ref> [2, 28] </ref>). As a consequence, it is possible to route any one permutation in O (log n) steps by first routing each packet to the input in the column of its origin, then to the input in the column of its destination, and then to its final destination. <p> Let us call these subbutterflies the computing subbutterflies. The routing subbutterflies by themselves form a capable routing network. First, within each subbutterfly, it is possible to route paths between the outputs in any permutation with congestion 2 and dilation 2 log n i using Benes-style routing <ref> [2, 28] </ref>. In addition, each subbutterfly t i shares one node with each bottom subbutterfly b j . We call the nodes in level log n i that are outputs of routing butterflies in both the top and the bottom groups shared nodes. <p> The long paths can be routed with constant congestion (and O (log N ) dilation) because the inputs and outputs of a Benes network can be connected in any permutation by a set of disjoint paths <ref> [2] </ref>, and a Benes network is simply two back-to-back butterfly networks. Thus, if the set of long paths can be decomposed into a constant number of (partial) permutations of the inputs of the butterfly, the long paths can be embedded with constant congestion.
Reference: [3] <author> S. N. Bhatt, F. R. K. Chung, J.-W. Hong, F. T. Leighton, and A. L. Rosenberg. </author> <title> Optimal simulations by butterfly networks. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 192-204, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Is the converse true? Somewhat surprisingly, it is not. For example, Bhatt, Chung, Hong, Leighton and Rosenberg <ref> [3] </ref> proved that any embedding of an N -node mesh into an N -node butterfly with constant load requires dilation (log N ) (the diameter of the butterfly). <p> In Section 5.3 we show that an N -node butterfly can emulate an N node mesh in real-time. This result is interesting because any one-to-one embedding of an array (of dimension 2 or more) in a butterfly requires (log N ) dilation <ref> [3] </ref>, which suggests that any emulation must require slowdown (log N ). The result takes on added significance given the fact that many parallel numerical algorithms are array-based while several parallel 10 machines are butterfly-based. <p> Several of their results are included in this paper for completeness. There has been a great deal of previous work on network embeddings with the intent of showing that one network can or can't emulate another network efficiently <ref> [1, 3, 4, 5, 9, 16, 24] </ref>. Many of the results were positive and proved things like "all N -node binary trees can be emulated in constant time on an N -node hypercube." There were also some negative results, but their significance is less clear. <p> Proof: An M -node butterfly can be embedded in an N -node butterfly with load O (M=N ), dilation 1, and congestion O (M=N ). 5.2 Work-preserving emulations of binary trees When the Bhatt, Chung, Hong, Leighton, Rosenberg result <ref> [3] </ref> that a butterfly can emulate a complete binary tree in real time is combined with the material in Section 4.2, we find that there is an O (log log N )-slowdown work-preserving emulation of the class of bounded-degree trees on the butterfly. <p> This is despite the fact that any O (1)-to-1 embedding of an N -node array (with dimension 2 or more) in a shu*e-exchange graph has dilation (log log N ) <ref> [3] </ref>. Acknowledgements We are deeply indebted to Marc Snir for his helpful comments and for motivating this research. Thanks also to Tom Cormen for producing Figure 2, and to James Park and Joel Wein for helpful discussions.
Reference: [4] <author> S. N. Bhatt, F. R. K. Chung, F. T. Leighton, and A. L. Rosenberg. </author> <title> Optimal simulations of tree machines. </title> <booktitle> In Proceedings of the 27th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 274-282. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1986. </year>
Reference-contexts: Several of their results are included in this paper for completeness. There has been a great deal of previous work on network embeddings with the intent of showing that one network can or can't emulate another network efficiently <ref> [1, 3, 4, 5, 9, 16, 24] </ref>. Many of the results were positive and proved things like "all N -node binary trees can be emulated in constant time on an N -node hypercube." There were also some negative results, but their significance is less clear.
Reference: [5] <author> S. N. Bhatt and I. Ipsen. </author> <title> Embedding trees in the hypercube. </title> <type> Technical Report RR-443, </type> <institution> Yale University, </institution> <address> New Haven, CT, </address> <year> 1988. </year>
Reference-contexts: Several of their results are included in this paper for completeness. There has been a great deal of previous work on network embeddings with the intent of showing that one network can or can't emulate another network efficiently <ref> [1, 3, 4, 5, 9, 16, 24] </ref>. Many of the results were positive and proved things like "all N -node binary trees can be emulated in constant time on an N -node hypercube." There were also some negative results, but their significance is less clear.
Reference: [6] <author> R. J. Cole, B. M. Maggs, and R. K. Sitaraman. </author> <title> Reconfiguring arrays with faults part i: Worst-case faults. </title> <journal> SIAM Journal on Computing. </journal> <note> to appear. </note>
Reference-contexts: Note that a node u 0 may send edge pebbles to a neighbor v 0 , but receive edge pebbles from a different instance v 00 of guest node v. The following three lemmas from <ref> [6] </ref> show that if a static emulation has slowdown s, then the load and congestion of the embedding of G 0 into H cannot exceed s, and the average dilation of the edges on any cycle in G 0 cannot exceed s. Lemma 4.8 [6] Suppose that there is a value <p> The following three lemmas from <ref> [6] </ref> show that if a static emulation has slowdown s, then the load and congestion of the embedding of G 0 into H cannot exceed s, and the average dilation of the edges on any cycle in G 0 cannot exceed s. Lemma 4.8 [6] Suppose that there is a value T 0 &gt; 0 such that for all T &gt; T 0 , the host can perform a static emulation of a T -step guest computation in T s steps. Then the maximum load on any host node is at most s. <p> Then the maximum load on any host node is at most s. Lemma 4.9 <ref> [6] </ref> Suppose that there is a value T 0 &gt; 0 such that for all T &gt; T 0 , the host can perform a static emulation of a T -step guest computation in T s steps. Then the maximum congestion on any host edge is at most s. <p> Then the maximum congestion on any host edge is at most s. Lemma 4.10 <ref> [6] </ref> Suppose that there is a value T 0 &gt; 0 such that for all T &gt; T 0 , the host can perform a static emulation of a T -step guest computation in at most T s steps.
Reference: [7] <author> M. R. Fellows. </author> <title> Encoding Graphs in Graphs. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of California, </institution> <address> San Diego, CA, </address> <year> 1985. </year>
Reference-contexts: even though an embedding of a mesh into a butterfly requires dilation (log N ), we now find that a butterfly can emulate a mesh with constant slowdown. 11 Embeddings in which a guest node may be mapped to several host nodes, thus allowing redundant computation, were studied by Fellows <ref> [7] </ref> and Meyer auf der Heide [17, 18, 19]. In particular, in [18] Meyer auf der Heide showed how to construct a bounded-degree network with N 1+* nodes, for some arbitrary fixed * &gt; 0, that can emulate any bounded-degree N -node network with only constant slowdown.
Reference: [8] <author> J. P. Fishburn and R. A. Finkel. </author> <title> Quotient networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(4):288-295, </volume> <month> April </month> <year> 1982. </year>
Reference-contexts: The emulation also yields a real-time emulation of arrays of fixed-dimension by the shu*e-exchange network. 1.5 Previous work The notion of work-preserving emulations was previously studied by Fish-burn and Finkel <ref> [8] </ref>. They examined emulations in which both the guest and host are drawn from the same class of networks. Several of their results are included in this paper for completeness. <p> The edges of the guest network are emulated by 21 routing packets between the nodes of the linear array. Observations 3.2 and 3.3 were proved by Fishburn and Finkel <ref> [8] </ref>. Using Corollaries 2.3 and 2.8, the emulations of complete binary trees and other arrays can be shown to be tight in the sense that, up to constant factors, there are no work-preserving emulations with smaller slowdowns. <p> Combining these two embeddings yields an embedding of an N (k+1)=k = log N leaf complete binary tree into an N -node k-dimensional array with load and dilation O (N 1=k = log N ), and constant congestion. Observation 3.2 <ref> [8] </ref> An N -node k-dimensional array can perform a work-preserving emulation of an N j=k -node j-dimensional array, j &gt; k. Proof: An N j=k -node j-dimensional array can be embedded in an N -node k-dimensional array with load N (jk)=k , congestion N (jk)=k , and dilation 1. <p> Proof: An N j=k -node j-dimensional array can be embedded in an N -node k-dimensional array with load N (jk)=k , congestion N (jk)=k , and dilation 1. Observation 3.3 <ref> [8] </ref> For any M N , an N -node k-dimensional array can perform a work-preserving emulation of an M -node k-dimensional array. <p> This result suggests that there is no real-time emulation of a complete ternary tree by a complete binary tree, and that the emulation of Section 4.2 is optimal. 4.1 Work-preserving emulations of larger complete binary trees The following theorem extends a result of Fishburn and Finkel <ref> [8] </ref> by showing that a complete binary tree can emulate any larger complete binary tree in a work-preserving fashion. 23 Theorem 4.1 For any M N , an N -node complete binary tree can perform a work-preserving emulation of an M -node complete binary tree. <p> This result, along with the proof in Section 6.4 that a shu*e-exchange network can perform a real-time emulation of a butterfly network, resolves a long open question regarding the relative computing power of these networks. 5.1 Work-preserving emulations of larger butterflies Theorem 5.1 <ref> [8] </ref> For any M N , an N -node butterfly can perform a work-preserving emulation of an M -node butterfly. <p> Proof: Immediate from Theorem 5.6 and the fact that an N -node butterfly can be embedded in an N -node hypercube with constant load, dilation and congestion [9]. 51 6 Emulations by shu*e-exchange graphs 6.1 Work-preserving emulations of larger shu*e-exchange graphs Theorem 6.1 <ref> [8] </ref> For any M N , an N -node shu*e-exchange graph can perform a work-preserving emulation of an M -node shu*e-exchange graph.
Reference: [9] <author> D. S. Greenberg, L. S. Heath, and A. L. Rosenberg. </author> <title> Optimal embed dings of butterfly-like graphs in the hypercube. </title> <journal> Mathematical Systems Theory, </journal> <volume> 23 </volume> <pages> 61-77, </pages> <year> 1990. </year>
Reference-contexts: Several of their results are included in this paper for completeness. There has been a great deal of previous work on network embeddings with the intent of showing that one network can or can't emulate another network efficiently <ref> [1, 3, 4, 5, 9, 16, 24] </ref>. Many of the results were positive and proved things like "all N -node binary trees can be emulated in constant time on an N -node hypercube." There were also some negative results, but their significance is less clear. <p> Proof: Immediate from Theorem 5.6 and the fact that an N -node butterfly can be embedded in an N -node hypercube with constant load, dilation and congestion <ref> [9] </ref>. 51 6 Emulations by shu*e-exchange graphs 6.1 Work-preserving emulations of larger shu*e-exchange graphs Theorem 6.1 [8] For any M N , an N -node shu*e-exchange graph can perform a work-preserving emulation of an M -node shu*e-exchange graph.
Reference: [10] <author> D. Hoey and C. E. Leiserson. </author> <title> A layout for the shu*e-exchange net work. </title> <booktitle> In Proceedings of the 1980 International Conference on Parallel Processing, </booktitle> <pages> pages 329-336. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1980. </year>
Reference-contexts: Both results are optimal. The area bound was known previously [11], but the proof was much more difficult (as were the proofs for several suboptimal layouts for the shu*e-exchange network <ref> [10, 13, 15, 27] </ref>). The 3-d layout bound is new and was not obtainable by any of the previous approaches to the 2-d layout problem. Finally, in Section 5.6 we describe a real-time emulation of the shu*e-exchange network on the butterfly.
Reference: [11] <author> D. J. Kleitman, F. T. Leighton, M. Lepley, and G. L. Miller. </author> <title> New lay outs for the shu*e-exchange graph. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 278-292, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: Both results are optimal. The area bound was known previously <ref> [11] </ref>, but the proof was much more difficult (as were the proofs for several suboptimal layouts for the shu*e-exchange network [10, 13, 15, 27]). The 3-d layout bound is new and was not obtainable by any of the previous approaches to the 2-d layout problem.
Reference: [12] <author> C. P. Kruskal, L. Rudolph, and M. Snir. </author> <title> A complexity theory of ef ficient parallel algorithms. </title> <booktitle> In Proceedings of the 15th International Colloquium on Automata, Languages and Programming. Volume 317 of Lecture Notes in Computer Science, </booktitle> <pages> pages 333-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Also, in [17] he showed that it is not possible to construct an N -node bounded-degree network that can emulate all N node bounded-degree networks with slowdown less than (log N= log log N ). Work-preserving PRAM algorithms have previously been studied by Kruskal, Rudolph, and Snir <ref> [12] </ref> and served to motivate this work. Related problems of scheduling computations on fixed-connection networks have also been studied by Papadimitriou and Yannakakis [20]. 2 Lower bounds In this section we present lower bounds on slowdown and inefficiency.
Reference: [13] <author> F. T. Leighton, M. Lepley, and G. L. Miller. </author> <title> Layouts for the shu*e exchange graph based on the complex plane diagram. </title> <journal> SIAM Journal of Algebraic and Discrete Methods, </journal> <volume> 5(2) </volume> <pages> 202-215, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Both results are optimal. The area bound was known previously [11], but the proof was much more difficult (as were the proofs for several suboptimal layouts for the shu*e-exchange network <ref> [10, 13, 15, 27] </ref>). The 3-d layout bound is new and was not obtainable by any of the previous approaches to the 2-d layout problem. Finally, in Section 5.6 we describe a real-time emulation of the shu*e-exchange network on the butterfly.
Reference: [14] <author> F. T. Leighton, B. M. Maggs, A. G. Ranade, and S. B. Rao. </author> <title> Ran domized routing and sorting on fixed-connection networks. </title> <journal> Journal of Algorithms, </journal> <volume> 17(1) </volume> <pages> 157-205, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: When H is an array, tree, butterfly, or shu*e-exchange network, the schedule can be computed on-line using an algorithm that works for all leveled networks <ref> [14, 16] </ref>. As a simple example, let G be the class of linear arrays, and H be the class of all bounded-degree connected networks. <p> This suffices to prove the theorem. 6.5 Application to sorting on a shu*e-exchange graph It is known that an N -node butterfly can sort N packets with high probability in O (log N ) steps <ref> [14, 23, 25] </ref>. The result does not directly extend to the shu*e-exchange graph because the shu*e-exchange graph does not have the nice recursive structure possessed by the butterfly.
Reference: [15] <author> F. T. Leighton and G. L. Miller. </author> <title> Optimal layouts for small shu*e exchange graphs. </title> <editor> In J. Gray, editor, </editor> <booktitle> VLSI 81-Very Large Scale Integration, </booktitle> <pages> pages 289-299. </pages> <publisher> Academic Press, </publisher> <year> 1981. </year>
Reference-contexts: Both results are optimal. The area bound was known previously [11], but the proof was much more difficult (as were the proofs for several suboptimal layouts for the shu*e-exchange network <ref> [10, 13, 15, 27] </ref>). The 3-d layout bound is new and was not obtainable by any of the previous approaches to the 2-d layout problem. Finally, in Section 5.6 we describe a real-time emulation of the shu*e-exchange network on the butterfly.
Reference: [16] <author> T. Leighton, B. Maggs, and S. Rao. </author> <title> Universal packet routing algo rithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 256-271. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: This fact follows from the proof in <ref> [16] </ref> that for any set of packets whose paths have congestion c and dilation d, there is a schedule of length O (c + d) in which at most one packet traverses each edge at each step. <p> When H is an array, tree, butterfly, or shu*e-exchange network, the schedule can be computed on-line using an algorithm that works for all leveled networks <ref> [14, 16] </ref>. As a simple example, let G be the class of linear arrays, and H be the class of all bounded-degree connected networks. <p> For example, we now know that a shu*e-exchange network can sort N numbers in O (log N ) steps with high probability. Previously, such an algorithm was known for the butterfly <ref> [16, 23, 25] </ref>, but that algorithm made crucial use of the recursive structure of the butterfly, a structure not present in a shu*e-exchange network. <p> Several of their results are included in this paper for completeness. There has been a great deal of previous work on network embeddings with the intent of showing that one network can or can't emulate another network efficiently <ref> [1, 3, 4, 5, 9, 16, 24] </ref>. Many of the results were positive and proved things like "all N -node binary trees can be emulated in constant time on an N -node hypercube." There were also some negative results, but their significance is less clear.
Reference: [17] <editor> F. Meyer auf der Heide. </editor> <title> Efficiency of universal parallel computers. </title> <journal> Acta Informatica, </journal> <volume> 19 </volume> <pages> 269-296, </pages> <year> 1983. </year>
Reference-contexts: mesh into a butterfly requires dilation (log N ), we now find that a butterfly can emulate a mesh with constant slowdown. 11 Embeddings in which a guest node may be mapped to several host nodes, thus allowing redundant computation, were studied by Fellows [7] and Meyer auf der Heide <ref> [17, 18, 19] </ref>. In particular, in [18] Meyer auf der Heide showed how to construct a bounded-degree network with N 1+* nodes, for some arbitrary fixed * &gt; 0, that can emulate any bounded-degree N -node network with only constant slowdown. <p> In particular, in [18] Meyer auf der Heide showed how to construct a bounded-degree network with N 1+* nodes, for some arbitrary fixed * &gt; 0, that can emulate any bounded-degree N -node network with only constant slowdown. Also, in <ref> [17] </ref> he showed that it is not possible to construct an N -node bounded-degree network that can emulate all N node bounded-degree networks with slowdown less than (log N= log log N ).
Reference: [18] <editor> F. Meyer auf der Heide. </editor> <title> Efficient simulations among several models of parallel computers. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(1) </volume> <pages> 106-119, </pages> <month> February </month> <year> 1986. </year>
Reference-contexts: mesh into a butterfly requires dilation (log N ), we now find that a butterfly can emulate a mesh with constant slowdown. 11 Embeddings in which a guest node may be mapped to several host nodes, thus allowing redundant computation, were studied by Fellows [7] and Meyer auf der Heide <ref> [17, 18, 19] </ref>. In particular, in [18] Meyer auf der Heide showed how to construct a bounded-degree network with N 1+* nodes, for some arbitrary fixed * &gt; 0, that can emulate any bounded-degree N -node network with only constant slowdown. <p> In particular, in <ref> [18] </ref> Meyer auf der Heide showed how to construct a bounded-degree network with N 1+* nodes, for some arbitrary fixed * &gt; 0, that can emulate any bounded-degree N -node network with only constant slowdown.
Reference: [19] <editor> F. Meyer auf der Heide and R. </editor> <title> Wanka. Time-optimal simulations of networks by universal parallel computers. </title> <booktitle> In Proceedings of the 6th Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 120-131, </pages> <year> 1989. </year>
Reference-contexts: mesh into a butterfly requires dilation (log N ), we now find that a butterfly can emulate a mesh with constant slowdown. 11 Embeddings in which a guest node may be mapped to several host nodes, thus allowing redundant computation, were studied by Fellows [7] and Meyer auf der Heide <ref> [17, 18, 19] </ref>. In particular, in [18] Meyer auf der Heide showed how to construct a bounded-degree network with N 1+* nodes, for some arbitrary fixed * &gt; 0, that can emulate any bounded-degree N -node network with only constant slowdown.
Reference: [20] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Towards an architecture independent analysis of parallel algorithms. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 510-513, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Work-preserving PRAM algorithms have previously been studied by Kruskal, Rudolph, and Snir [12] and served to motivate this work. Related problems of scheduling computations on fixed-connection networks have also been studied by Papadimitriou and Yannakakis <ref> [20] </ref>. 2 Lower bounds In this section we present lower bounds on slowdown and inefficiency. Loosely speaking, these lower bounds apply when the guest network expands faster than the host network.
Reference: [21] <author> M. S. Paterson, W. L. Ruzzo, and L. Snyder. </author> <title> Bound on minimax edge length for complete binary trees. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 293-299, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: This embedding has load N 1=k = log N , and dilation and congestion one. When k = 2, we use a result of Paterson, Ruzzo and Snyder <ref> [21] </ref> that states that an N -leaf complete binary tree can be laid out in area O (N ) with maximum edge length O ( p N= log N ).
Reference: [22] <author> N. Pippenger. </author> <title> Telephone switching networks. </title> <booktitle> In Proceedings of Sym posia in Applied Mathematics, </booktitle> <volume> volume 26, </volume> <pages> pages 101-133, </pages> <year> 1982. </year> <month> 59 </month>
Reference-contexts: It is well known that any such pattern can be decomposed into 1 + log n disjoint one-to-one patterns (permutations) among the columns (for a nice proof, see <ref> [22] </ref>). It is also well known that it is possible to establish paths with congestion 2 between the inputs of a butterfly network in any permutation (the butterfly emulates a Benes network [2, 28]).
Reference: [23] <author> N. Pippenger. </author> <title> Parallel communication with limited buffers. </title> <booktitle> In Pro ceedings of the 25th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 127-136. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1984. </year>
Reference-contexts: For example, we now know that a shu*e-exchange network can sort N numbers in O (log N ) steps with high probability. Previously, such an algorithm was known for the butterfly <ref> [16, 23, 25] </ref>, but that algorithm made crucial use of the recursive structure of the butterfly, a structure not present in a shu*e-exchange network. <p> This suffices to prove the theorem. 6.5 Application to sorting on a shu*e-exchange graph It is known that an N -node butterfly can sort N packets with high probability in O (log N ) steps <ref> [14, 23, 25] </ref>. The result does not directly extend to the shu*e-exchange graph because the shu*e-exchange graph does not have the nice recursive structure possessed by the butterfly.
Reference: [24] <author> A. Raghunathan and H. Saran. </author> <title> Is the shu*e-exchange better than the butterfly? Unpublished manuscript. </title>
Reference-contexts: Several of their results are included in this paper for completeness. There has been a great deal of previous work on network embeddings with the intent of showing that one network can or can't emulate another network efficiently <ref> [1, 3, 4, 5, 9, 16, 24] </ref>. Many of the results were positive and proved things like "all N -node binary trees can be emulated in constant time on an N -node hypercube." There were also some negative results, but their significance is less clear. <p> A similar result was proved by Raghunathan and Saran <ref> [24] </ref>. We assume that M = 2 k , so that each column of the butterfly can be represented by a k-bit string, and each node of the shu*e-exchange can be represented by a 2k-bit string.
Reference: [25] <author> J. H. Reif and L. G. Valiant. </author> <title> A logarithmic time sort for linear size networks. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 60-76, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: For example, we now know that a shu*e-exchange network can sort N numbers in O (log N ) steps with high probability. Previously, such an algorithm was known for the butterfly <ref> [16, 23, 25] </ref>, but that algorithm made crucial use of the recursive structure of the butterfly, a structure not present in a shu*e-exchange network. <p> This suffices to prove the theorem. 6.5 Application to sorting on a shu*e-exchange graph It is known that an N -node butterfly can sort N packets with high probability in O (log N ) steps <ref> [14, 23, 25] </ref>. The result does not directly extend to the shu*e-exchange graph because the shu*e-exchange graph does not have the nice recursive structure possessed by the butterfly.
Reference: [26] <author> M. Sekanina. </author> <title> On an ordering of the set of vertices of a connected graph. </title> <institution> Publications of the Faculty of Science, University of Brno, </institution> <month> 412 </month> <pages> 137-142, </pages> <year> 1960. </year>
Reference-contexts: As a simple example, let G be the class of linear arrays, and H be the class of all bounded-degree connected networks. It is well known <ref> [26] </ref> that an N -node linear array can be embedded in any connected bounded-degree N -node network with load 1, dilation O (1), and congestionO (1). <p> Because an N -node linear array can be embedded in any N -node connected network with constant load, congestion, and dilation <ref> [26] </ref>, every connected network can perform a real-time emulation of a linear array. Hence, Observations 3.1 through 3.4 can be modified to hold for all connected networks. 4 Emulations by complete binary trees In this section we examine the power of complete binary trees to emulate other trees and forests.
Reference: [27] <author> D. Steinberg and M. Rodeh. </author> <title> A layout for the shu*e-exchange net work with fi(N 2 = log 3=2 N ) area. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(12):977-982, </volume> <month> December </month> <year> 1981. </year>
Reference-contexts: Both results are optimal. The area bound was known previously [11], but the proof was much more difficult (as were the proofs for several suboptimal layouts for the shu*e-exchange network <ref> [10, 13, 15, 27] </ref>). The 3-d layout bound is new and was not obtainable by any of the previous approaches to the 2-d layout problem. Finally, in Section 5.6 we describe a real-time emulation of the shu*e-exchange network on the butterfly.
Reference: [28] <author> A. Waksman. </author> <title> A permutation network. </title> <journal> Journal of the ACM, </journal> <volume> 15(1):159 163, </volume> <month> January </month> <year> 1968. </year>
Reference-contexts: It is also well known that it is possible to establish paths with congestion 2 between the inputs of a butterfly network in any permutation (the butterfly emulates a Benes network <ref> [2, 28] </ref>). As a consequence, it is possible to route any one permutation in O (log n) steps by first routing each packet to the input in the column of its origin, then to the input in the column of its destination, and then to its final destination. <p> Let us call these subbutterflies the computing subbutterflies. The routing subbutterflies by themselves form a capable routing network. First, within each subbutterfly, it is possible to route paths between the outputs in any permutation with congestion 2 and dilation 2 log n i using Benes-style routing <ref> [2, 28] </ref>. In addition, each subbutterfly t i shares one node with each bottom subbutterfly b j . We call the nodes in level log n i that are outputs of routing butterflies in both the top and the bottom groups shared nodes.
Reference: [29] <author> D. S. Wise. </author> <title> Compact layouts of Banyan/FFT networks. </title> <editor> In H. T. Kung, B. Sproull, and G. Steele, editors, </editor> <booktitle> CMU Conference on VLSI Systems and Computations, </booktitle> <pages> pages 186-195, </pages> <address> Rockville, MD, </address> <month> October </month> <year> 1981. </year> <note> Computer Science Press. 60 </note>
Reference-contexts: congestion O (1), and dilation O (log N ). 5.5 Layouts for the shu*e-exchange network with optimal area and volume The N -node butterfly can be laid out in O (N 2 = log 2 N ) area (trivially) and in O (N 3=2 = log 3=2 N ) volume <ref> [29] </ref>.
References-found: 29

