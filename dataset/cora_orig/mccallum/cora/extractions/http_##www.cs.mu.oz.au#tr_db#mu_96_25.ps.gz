URL: http://www.cs.mu.oz.au/tr_db/mu_96_25.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Lightweight Deductive Databases on the World-Wide Web  
Date: June 26, 1996  
Address: Parkville, Victoria 3052 Australia  
Affiliation: Department of Computer Science The University of Melbourne  
Abstract: Seng Wai Loke, Andrew Davison, and Leon Sterling Technical Report 96/25 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Baral, J. Minker, and S. Kraus. </author> <title> Combining Multiple Knowledge Bases. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(2):208 - 221, </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: We conclude with several possible avenues for future work. We have not dealt with integrity constraints in this paper. For example, the uniqueness property of primary keys must be maintained when databases are combined. There exists methods for combining knowledge bases with integrity constraints <ref> [1] </ref>. We have demonstrated the utility of a small set of composition operations, but it may be useful to explore other operations. A modelling language (with constructs closely related to the application domain) could be used to describe particular kinds of knowledge.
Reference: [2] <author> C. Barcaroli, L. Iocchi, M. Lenzerini, and D. Nardi. </author> <note> Knowledge-Based Acess to the Network. In Fifth International World-Wide Web Conference Workshop on "Artificial Intelligence-based tools to help WWW users", http://www.info.unicaen.fr/~serge/3wia/workshop/papers/paper6.html, May 1996. </note>
Reference-contexts: Web pages have been generated from knowledge bases by using user profiles [14], and user queries [11]. We can achieve a similar functionality when the results of lightweight deductive database queries are Web documents. Barcaroli et al <ref> [2] </ref> represents hypertext at a Web site using a knowledge base. Their system answers user queries by returning a sequence of links leading to the page containing the answer. In our approach, the information provider can provide a similar capability by mapping user queries to appropriate URLs.
Reference: [3] <author> T. Berners-Lee, Robert Cailliau, Ari Luotonen, Henrik Frystyk Nielsen, and Arthur Secret. </author> <title> The World-Wide Web. </title> <journal> Communications of the ACM, </journal> <volume> 37(8):76 - 82, </volume> <month> August </month> <year> 1994. </year>
Reference-contexts: This is similar to defining a new relation in terms of relations in other modules by using context switching, as shown in x3.1. 6 Conclusions The Web should be enhanced with richer information content, and more sophisticated processing capabilities <ref> [3] </ref>. Our lightweight deductive databases provide improved querying, automated searching, and sophisticated processing and extraction of structured information on the Web. Lightweight deductive databases can be easily combined, and extended during query processing, using well-established techniques from the areas of deductive databases and structured logic programming.
Reference: [4] <author> A. Brogi. </author> <title> Program Construction in Computational Logic. </title> <type> PhD thesis, </type> <institution> Universita di Pisa-Genova-Udine, </institution> <year> 1993. </year>
Reference-contexts: By composing database modules, we effectively combine the databases in those modules. Other ways of composing logic programs have been considered in the literature, such as intersection <ref> [4] </ref>, retraction [5], and various forms of inheritance [6, 19]. Utilising a larger repertoire of operators allows more kinds of compositions to be expressed in queries, but increases complexity. 3.1 Virtual Relations and Joins The LogicWeb goal, Module#&gt;Goal, causes the evaluation of the logic programming Goal in the LogicWeb Module.
Reference: [5] <author> A. Brogi, P. Mancarella, D. Pedreschi, and F. Turini. </author> <title> Composition Operators for Logic Theories. </title> <editor> In J.W. Lloyd, editor, </editor> <booktitle> Computational Logic, symposium Proceedings, </booktitle> <pages> pages 117 - 134. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: By composing database modules, we effectively combine the databases in those modules. Other ways of composing logic programs have been considered in the literature, such as intersection [4], retraction <ref> [5] </ref>, and various forms of inheritance [6, 19]. Utilising a larger repertoire of operators allows more kinds of compositions to be expressed in queries, but increases complexity. 3.1 Virtual Relations and Joins The LogicWeb goal, Module#&gt;Goal, causes the evaluation of the logic programming Goal in the LogicWeb Module.
Reference: [6] <author> M. Bugliesi, E. Lamma, and P. Mello. </author> <title> Modularity In Logic Programming. </title> <journal> Journal of Logic Programming, </journal> <pages> pages 443 - 502, </pages> <year> 1994. </year>
Reference-contexts: A virtual relation is formed from other database relations by a set of rules, all defining the same head predicate, but each using a different relation in its body. In a relational join, two relations are combined based on shared attribute values. 3 From structured logic programming <ref> [6] </ref>, we appropriate the notions of context switching and the composition operations of union, and overriding union. By composing database modules, we effectively combine the databases in those modules. <p> By composing database modules, we effectively combine the databases in those modules. Other ways of composing logic programs have been considered in the literature, such as intersection [4], retraction [5], and various forms of inheritance <ref> [6, 19] </ref>. Utilising a larger repertoire of operators allows more kinds of compositions to be expressed in queries, but increases complexity. 3.1 Virtual Relations and Joins The LogicWeb goal, Module#&gt;Goal, causes the evaluation of the logic programming Goal in the LogicWeb Module. <p> (Authors,Title,PubWebLocation,TRWebLocation) :- location_of (publications,PubsURL), location_of (technical_reports,TRsURL), m_id (PubsURL)#&gt;pub_cit (Authors,Title,_,_,PubWebLocation,_), m_id (TRsURL)#&gt;tr_cit (Authors,Title,_,TRWebLocation,_). 4 The shared variables, Authors and Title, are used to select citations common to both rela-tions. 3.2 Forming Databases Using Union The union of two LogicWeb modules corresponds to the set-theoretic union of the clauses in both modules <ref> [6] </ref>. Union is useful when a query is to be evaluated with respect to two or more modules. In LogicWeb, this is expressed using the lw union/1 construct in a goal, such as: lw_union (ListOfModules)#&gt;Goal This goal evaluates Goal in the union of the modules in ListOfModules.
Reference: [7] <author> W.H.E. Davies and P. Edwards. </author> <title> Agent-Based Knowledge Discovery. </title> <publisher> ftp://ftp.csd.abdn.ac.uk/pub/pedwards/daviesss95.ps. </publisher>
Reference-contexts: This idea is used in x4, to generate the logic programming representation of the research information. 12 Approaches to automatically generating new lightweight deductive databases from exist-ing ones, given database schemas, should be investigated. Work on agent-based knowledge extraction (or data mining) from databases using Inductive Logic Programming <ref> [7] </ref>, might be applicable.
Reference: [8] <author> S. Dobson and V. Burrill. </author> <title> Towards Improving Automation in the World-Wide Web. </title> <address> http://www.scit.wlv.ac.uk/ndisd/dobson.ps. </address>
Reference-contexts: The facts and rules of the previous subsections reside in a separate module at the Web site. This module is loaded first, and other pages and database modules are loaded during query evaluation. 5 Related Work 5.1 Database on Web Pages Dobson et al <ref> [8, 9] </ref> utilise additional HTML tags to embed relational databases (called lightweight databases) in Web pages. Essentially, an entity-relationship diagram is mapped onto the hypertext structure of the Web. Relationships between entities on different pages are specified by hypertext links, with attributes defining the relationships.
Reference: [9] <author> S.A. Dobson and V.A. Burrill. </author> <title> Lightweight Databases. </title> <booktitle> Proceedings of the 3rd International World-Wide Web Conference, </booktitle> <address> http://www.igd.fhg.de/www/www95/proceedings/papers/54/darm.html, April 1995. </address>
Reference-contexts: Also, deductive databases structure information according to predefined conceptual schema. Hence, deductive databases qualify as an appropriate metaphor for information processing on the Web. This paper investigates how deductive databases can be incorporated into Web pages. In the spirit of <ref> [9] </ref>, we call these databases lightweight deductive databases, since our intention is to use the Web as a source of structured information, rather than to provide functionalities such as transaction processing and query optimisation. <p> The facts and rules of the previous subsections reside in a separate module at the Web site. This module is loaded first, and other pages and database modules are loaded during query evaluation. 5 Related Work 5.1 Database on Web Pages Dobson et al <ref> [8, 9] </ref> utilise additional HTML tags to embed relational databases (called lightweight databases) in Web pages. Essentially, an entity-relationship diagram is mapped onto the hypertext structure of the Web. Relationships between entities on different pages are specified by hypertext links, with attributes defining the relationships.
Reference: [10] <author> O. Etzioni and D. Weld. </author> <title> Intelligent Agents on the Internet: Fact, Fiction, and Forecast. </title> <journal> IEEE Expert, </journal> <volume> 10(4):44 - 49, </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: This may take the form of additional syntax, which can be translated into Prolog. The structured information provided by lightweight deductive databases should be more readable by intelligent software agents <ref> [10] </ref>, than plain HTML text. An interesting possibility is to use lightweight deductive databases to store agent functionality, which an agent could upload as it searches the Web. Lightweight deductive databases must be manually generated at present. However, in some cases, lightweight deductive databases can be generated from text.
Reference: [11] <author> J. Euzenat. </author> <note> Knowledge Bases as Web Page Backbones. In Fifth International World-Wide Web Conference Workshop on "Artificial Intelligence-based tools to help WWW users", http://www.info.unicaen.fr/~serge/3wia/workshop/papers/paper10.html, May 1996. </note>
Reference-contexts: Users can build their own knowledge base and query processing rules, perhaps on top of those provided by information servers. Web pages have been generated from knowledge bases by using user profiles [14], and user queries <ref> [11] </ref>. We can achieve a similar functionality when the results of lightweight deductive database queries are Web documents. Barcaroli et al [2] represents hypertext at a Web site using a knowledge base. Their system answers user queries by returning a sequence of links leading to the page containing the answer.
Reference: [12] <author> A. Farquhar, A. Dappert, R. Fikes, and W. Pratt. </author> <title> Integrating Information Sources Using Context Logic. </title> <booktitle> In On-line Working Notes of the AAAI Spring Symposium Series on Information Gathering from Distributed, Heterogeneous Environments, </booktitle> <address> http://www.isi.edu/sims/knoblock/sss95/farquhar.ps, January 1995. </address> <month> 13 </month>
Reference-contexts: Context logic, an extension of first order logic where sentences are true with respect to a given context, has been used to integrate databases <ref> [12] </ref>. Axioms are written which lift sentences from several contexts into a common one.
Reference: [13] <author> J. Harland and K. Ramamohanarao. </author> <title> An Aditi Implementation of a Flights Database. </title> <booktitle> Applications of Logic Databases, </booktitle> <year> 1994. </year>
Reference-contexts: Their use of one file per object may incur heavy network transmission costs. In our approach, modules can contain multiple relations. 5.2 Comparison with Deductive Database Systems Our approach to implementing lightweight deductive databases uses Prolog with LogicWeb extensions. However, existing deductive database systems <ref> [20, 13] </ref> differ from Prolog systems in several ways, including: * Query optimisation. Query processing often finds all answers to the query, i.e. the "set at a time" paradigm is more efficient than the "tuple at a time" paradigm of Prolog.
Reference: [14] <author> T. Hoppe, C. Kindermann, O.K. Paulus, and R. Tolksdorf. </author> <title> The MIHMA Project: a Web Information Service Based on Dsscription Logics. </title> <note> In Fifth International World-Wide Web Conference Workshop on "Artificial Intelligence-based tools to help WWW users", http://www.info.unicaen.fr/~serge/3wia/workshop/papers/paper25.html, May 1996. </note>
Reference-contexts: Users can build their own knowledge base and query processing rules, perhaps on top of those provided by information servers. Web pages have been generated from knowledge bases by using user profiles <ref> [14] </ref>, and user queries [11]. We can achieve a similar functionality when the results of lightweight deductive database queries are Web documents. Barcaroli et al [2] represents hypertext at a Web site using a knowledge base.
Reference: [15] <author> T. Kirk. </author> <title> Knowledge Based Access to Information on the WorldWide Web. </title> <note> In Fifth International World-Wide Web Conference Workshop on "Artificial Intelligence-based tools to help WWW users", http://www.info.unicaen.fr/~serge/3wia/workshop/papers/paper20.html, May 1996. </note>
Reference-contexts: If updates were possible, transaction processing, and concurrency control would also have to be available. We have not yet considered updates because the main focus of this work is structuring information on the Web. 5.3 Knowledge-Based Access to Information The Information Manifold <ref> [16, 15] </ref> is a system for building a knowledge base representing the user's interests. This uses a combination of Horn rules and the CLASSIC knowledge representation language to describe information sources, and taxonomy relationships among them.
Reference: [16] <author> T. Kirk, A.Y. Levy, Y. Sagiv, and D. Srivastava. </author> <title> The Information Manifold. </title> <booktitle> In On-line Working Notes of the AAAI Spring Symposium Series on Information Gathering from Distributed, Heterogeneous Environments, </booktitle> <address> http://www.isi.edu/sims/knoblock/sss95/kirk.ps, January 1995. </address>
Reference-contexts: If updates were possible, transaction processing, and concurrency control would also have to be available. We have not yet considered updates because the main focus of this work is structuring information on the Web. 5.3 Knowledge-Based Access to Information The Information Manifold <ref> [16, 15] </ref> is a system for building a knowledge base representing the user's interests. This uses a combination of Horn rules and the CLASSIC knowledge representation language to describe information sources, and taxonomy relationships among them.
Reference: [17] <author> S.W. Loke and A. Davison. </author> <title> Logic Programming with the World-Wide Web. </title> <booktitle> In Proceedings of the 7th ACM Conference on Hypertext (available at http://www.cs.unc.edu/~barman/HT96/P14/lpwww.html)., pages 235 - 245. </booktitle> <publisher> ACM Press, </publisher> <month> March </month> <year> 1996. </year>
Reference-contexts: This reduces server load, and permits state information, such as the results of previous queries, to be kept in the client-side process or files. We also utilise client-side caching, which means that once the databases are loaded, they need not be fetched again. We base this work on LogicWeb <ref> [17] </ref>, an integration of logic programming and the Web, which treats Web pages as logic programming modules. <p> Below, we outline LogicWeb, and describe a lightweight deductive database of citations. 2.1 LogicWeb LogicWeb treats Web pages as logic program modules, termed LogicWeb modules <ref> [17] </ref>. Ordinary Web pages can be parsed to extract facts, such as a collection of links used in the page. This provides an additional layer of abstraction beyond the text of a page. More importantly, a LogicWeb module can contain a logic program written in Prolog with some extensions.
Reference: [18] <author> S.W. Loke, A. Davison, and L. Sterling. CiFi: </author> <title> An Agent for Citation Finding on the World-Wide Web. </title> <note> In To appear in the Proceedings of the 4th Pacific Rim International Conference on Artificial Intelligence. Also available as the technical report 96/4 at http://www.cs.mu.oz.au/tr db/mu 96 04.ps.gz. </note> <year> 1996. </year>
Reference-contexts: For other page types, the cue words may not be stored in facts. For example, the project names are used as cue words to judge links to project pages. Other heuristics useful for constraining search are described in <ref> [18] </ref>. extract modURL/2 uses similar techniques to useful link/4 to find the database module URL on the researcher's page. 4.5 Discussion This example illustrates how the techniques of knowledge representation and automated Web search can be used to implement complex processing of queries on lightweight deductive databases.
Reference: [19] <author> J. J. Moreno-Navarro. </author> <title> Tuple Inheritance: A New Kind of Inheritance for (Constraint) Logic Programming (Extended Abstract), </title> <note> Full paper at http://gedeon.ls.fi.upm.es/~jjmoreno/pap bib.html#inh. </note> <editor> In G. Levi and M. Martelli, editors, </editor> <booktitle> Proceedings of the 12th International Conference on Logic Programming, </booktitle> <pages> page 829. </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: By composing database modules, we effectively combine the databases in those modules. Other ways of composing logic programs have been considered in the literature, such as intersection [4], retraction [5], and various forms of inheritance <ref> [6, 19] </ref>. Utilising a larger repertoire of operators allows more kinds of compositions to be expressed in queries, but increases complexity. 3.1 Virtual Relations and Joins The LogicWeb goal, Module#&gt;Goal, causes the evaluation of the logic programming Goal in the LogicWeb Module.
Reference: [20] <author> K. Ramamohanarao and J. Harland. </author> <title> An Introduction to Deductive Database Languages and Systems. </title> <journal> VLDB Journal, </journal> <volume> 3(2):107 - 122, </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: In addition, knowledge based query processing is possible with the aid of logic programming. For instance, we can represent concept hierarchies, and meta-level knowledge about databases. Deductive databases extend relational databases, utilising logic programming rules for more complex data modelling <ref> [20] </ref>. A deductive database is, in essence, a logic program: base relations map to facts, and rules are used to define new relations in terms of base relations, and to process queries. Also, deductive databases structure information according to predefined conceptual schema. <p> A possible schema for citations is: 1 URL stands for Uniform Resource Locator. 2 HTML stands for Hypertext Markup Language. 3 These categories are borrowed from the field of deductive databases <ref> [20] </ref>. 2 pub cit (authors,title,pub type,collection name,web location,date) The schema describes the components of a typical publication citation: the names of the authors, the title of the paper (which is used as the primary key, indicated by underlining), the type of the publication (e.g., conference, technical report, or journal), the collection <p> Their use of one file per object may incur heavy network transmission costs. In our approach, modules can contain multiple relations. 5.2 Comparison with Deductive Database Systems Our approach to implementing lightweight deductive databases uses Prolog with LogicWeb extensions. However, existing deductive database systems <ref> [20, 13] </ref> differ from Prolog systems in several ways, including: * Query optimisation. Query processing often finds all answers to the query, i.e. the "set at a time" paradigm is more efficient than the "tuple at a time" paradigm of Prolog. <p> This implies that all facts must be ground. This removes the need for full unification, thereby increasing efficiency. Another common restriction is that all terms in the program are variables or constants. This ensures that logical entailment is decidable. A logic programming language with this restriction is Datalog <ref> [20] </ref>. A major difference between our lightweight deductive databases and existing deductive database systems is that our databases are not updateable. If updates were possible, transaction processing, and concurrency control would also have to be available. <p> These approaches typically make use of knowledge representation languages based on description logics in order to represent concept models. We restrict ourselves to logic programming since it is a versatile paradigm, used in a range of AI problems (e.g., expert systems and knowledge representation), and in deductive databases <ref> [22, 20] </ref>. Context logic, an extension of first order logic where sentences are true with respect to a given context, has been used to integrate databases [12]. Axioms are written which lift sentences from several contexts into a common one.
Reference: [21] <author> E. Sandewall. </author> <title> Towards a World-Wide Data Base. </title> <booktitle> Proceedings of the 5th International World-Wide Web Conference, </booktitle> <address> http://www5conf.inria.fr/fich html/papers/P54/Overview.html, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: However, we employ deduc-tive databases to provide more powerful modelling capabilities. We can also specify module composition in logic programming rules. Sandewall <ref> [21] </ref> proposes the World-Wide Data Base, where a database consists of downloadable short text files, each file containing an object description. An object consists of properties, represented in a specialised language, and can reference other database files (i.e., objects), or HTML pages.
Reference: [22] <author> L. Sterling and E. Shapiro. </author> <title> The Art of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1994. </year> <month> 14 </month>
Reference-contexts: Such information needs to be stored in a structured form, and be sufficiently high-level (or abstract) to be programmable, while remaining readable. An interesting candidate as a representation formalism is logic programming <ref> [22] </ref>. Logic programming is based on mathematical logic, where computation is treated as deduction from a set of axioms or rules. Logic programming provides a uniform means for representing data and computations, is declarative (compared to imperative languages), and has a solid semantic basis. <p> These approaches typically make use of knowledge representation languages based on description logics in order to represent concept models. We restrict ourselves to logic programming since it is a versatile paradigm, used in a range of AI problems (e.g., expert systems and knowledge representation), and in deductive databases <ref> [22, 20] </ref>. Context logic, an extension of first order logic where sentences are true with respect to a given context, has been used to integrate databases [12]. Axioms are written which lift sentences from several contexts into a common one.
References-found: 22

