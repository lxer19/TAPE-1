URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-95-34.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Satisfiability Testing with More Reasoning and Less Guessing six branching strategies of the proposed algorithm
Author: Allen Van Gelder Yumi K. Tsuji D. S. and Trick, M. 
Keyword: Satisfiability, Boolean formula, propositional formula, resolution, 2-satisfiability, k-closure.  
Note: Experimental data compares  was found to be the best overall.  To appear in  eds., American Mathematical Society, 1996. Authors were supported in part by NSF grant CCR-8958590.  
Address: Santa Cruz 95064 UCSC-CRL-95-34  
Affiliation: Baskin Center for Computer Engineering and Information Sciences University of California,  
Email: avg@cs.ucsc.edu tsuji@cs.ucsc.edu  
Date: April 21, 1995  
Abstract: A new algorithm for testing satisfiability of propositional formulas in conjunctive normal form (CNF) is described. It applies reasoning in the form of certain resolution operations, and identification of equivalent literals. Resolution produces growth in the size of the formula, but within a global quadratic bound; most previous methods avoid operations that produce any growth, and generally do not identify equivalent literals. Computational experience indicates that the method does substantially less "guessing" than previously reported algorithms, while keeping a polynomial time bound on the work done between guesses. Experiments indicate that, for larger problems, the time investment in reasoning returns a profit in reduced searching, and the profit increases with increasing problem size. Both satisfiable and unsatisfiable random 3-CNF formulas with 50-283 variables and 4.27 ratio of clauses to variables have been tested; this class is generally acknowledged to be relatively "hard" and required extensive backtracking by other algorithms. Unsatisfiable random problems were found to deviate from the easy-hard-easy pattern. The new algorithm solves random formulas with surprisingly little backtracking: the average number of guesses was 3,267 for 200 variables at this ratio, and 57,503 for 283 variables. Larger unsatisfiable formulas from circuit-fault analysis, with 500-12,800 variables were solved with no backtracking in some cases. Extensive statistics on guesses and time are reported. Statistical and experimental techniques and traps are discussed. An exponential growth rate for random formulas is estimated. 
Abstract-found: 1
Intro-found: 1
Reference: [APT79] <author> B. Aspvall, M. Plass, and R. Tarjan. </author> <title> A linear-time algorithm for testing the truth of certain quantified Boolean formulas. </title> <journal> Information Processing Letters, </journal> <volume> 8(3) </volume> <pages> 121-123, </pages> <month> March </month> <year> 1979. </year>
Reference-contexts: It follows that computing the 2-closure provides a polynomial-time decision procedure for 2-SAT. Using the technique of strongly connected components, it is possible to decide 2-CNF formulas more efficiently by avoiding the explicit construction of the 2-closure <ref> [APT79] </ref>. However, this method does not compute all available inferences on satisfiable 2-CNF; such inferences are valuable when the 2-CNF is embedded in a larger formula. Larrabee's algorithm [Lar92] (in effect) uses the 2-closure of the 2-CNF part of more general CNF formulas.
Reference: [BS92] <author> A. Billionnet and A. Sutter. </author> <title> An efficient algorithm for the 3-satisfiability problem. </title> <journal> Operations Research Letters, </journal> <volume> 12 </volume> <pages> 29-36, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Pretolani [Pre95], as well as Jaumard et.al. [JSD95] presented satisfiability algorithms that exploit 2-SAT relaxation. Combining some resolution with searching was also reported by Billionnet and Sutter <ref> [BS92] </ref>, but they do not give enough specifics to permit a detailed comparison. 3 2.2 Three-Closure For a 3-CNF formula F , it might happen that its 3-closure is also its closure, in which case absence or presence of the empty clause ; immediately decides satisfiability.
Reference: [DLL62] <author> M. Davis, G. Logemann, and D. Loveland. </author> <title> A machine program for theorem-proving. </title> <journal> Communications of the ACM, </journal> <volume> 5 </volume> <pages> 394-397, </pages> <year> 1962. </year>
Reference-contexts: The time performance of 2cl is compared to the traditional satisfiability algorithm of Davis, Putnam, Logemann and Loveland <ref> [DP60, DLL62] </ref> on families of increasingly large random formulas. Above 2000 literals (about 150 variables) 2cl emerges as the clear winner. Achieving acceptable performance depends strongly on efficient data structures. <p> There is no "guessing" or branching, but longer and more numerous clauses may be created. Subsumption checking is an option to reduce the size of the formula. What is often referred to in current literature as the Davis-Putnam algorithm is actually a modification due to Davis, Logemann, and Loveland <ref> [DLL62] </ref>, and will be called the DPLL algorithm here. Neither longer clauses nor new clauses are created by DPLL.
Reference: [DP60] <author> M. Davis and H. Putnam. </author> <title> A computing procedure for quantification theory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 7 </volume> <pages> 201-215, </pages> <year> 1960. </year>
Reference-contexts: The time performance of 2cl is compared to the traditional satisfiability algorithm of Davis, Putnam, Logemann and Loveland <ref> [DP60, DLL62] </ref> on families of increasingly large random formulas. Above 2000 literals (about 150 variables) 2cl emerges as the clear winner. Achieving acceptable performance depends strongly on efficient data structures. <p> It is interesting to compare the above approach with the older algorithms for CNF satisfiability. The first algorithm oriented toward CNF formulas was due to Davis and Putnam <ref> [DP60] </ref>, and was based on variable elimination through resolution. It used the unit clause rule and pure literal rule as heuristics for choosing a variable, but when those were not applicable, it specified to choose a variable from a shortest clause.
Reference: [GC92] <author> J. D. Gibbons and S. Chakraborti. </author> <title> Nonparametric Statistical Inference. </title> <publisher> Marcel Dekker, Inc., </publisher> <year> 1992. </year>
Reference-contexts: For random CNF formulas of length L at the 4.27 ratio studied here, the smallest known worst case bound is 2 :046 L . This is still far above our observed growth rate of 2 :0039L . Statistical techniques, including nonparametric methods <ref> [GC92] </ref>, for the comparative evaluation of different strategies is another topic that can be further pursued. Distributions for NP-hard problems are typically highly skewed.
Reference: [GW93] <author> I. P. Gent and T. Walsh. </author> <title> Towards an understanding of hill-climbing procedures for SAT. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence; AAAI-93 and IAAI-93 (Washington, </booktitle> <address> DC, USA, </address> <month> 11-15 July </month> <year> 1993), </year> <pages> pages 28-33. </pages> <address> Menlo Park, CA, USA: </address> <publisher> AAAI Press, </publisher> <year> 1993. </year>
Reference-contexts: Hooker and Vinay have 16 reported on an application of this technique, as discussed in Section 5.3 [HV94]. Gent and Walsh indirectly applied the technique to arrive at negative conclusions about the importance of greediness and randomness in local search <ref> [GW93] </ref>. This technique seems to offer great promise for discovery of better algorithms for intractable problems. Acknowledgements We thank the anonymous referee for many suggestions on improving the paper. Many of the experiments were facilitated by equipment that was donated by Sun Microsystems, Inc.
Reference: [Hoo94] <author> J. N. Hooker. </author> <title> Needed: An empirical science of algorithms. </title> <journal> Operations Research, </journal> <volume> 42(2) </volume> <pages> 201-12, </pages> <month> March-April </month> <year> 1994. </year>
Reference-contexts: Besides the average and standard deviation, we have also reported the minimum, median, and maximum. Hooker has advocated an empirical approach to algorithm analysis that involves hypothesis formation and prediction, in analogy with natural sciences <ref> [Hoo94] </ref>. Many heuristics are proposed in the literature, with informal explanations of why they work well. Hooker believes that the explanations should be examined more critically, and proposes a framework for doing so: if the explanation is "correct", then we should be able to make new predictions and verify them.
Reference: [HV94] <author> J. N. Hooker and V. Vinay. </author> <title> Branching rules for satisfiability. </title> <booktitle> In Third International Symposium on Artificial Intelligence and Mathematics, </booktitle> <address> Fort Lauderdale, Florida, </address> <year> 1994. </year>
Reference-contexts: Their motivation is "most likely to satisfy". Hooker and Vinay have challenged the "most likely to satisfy" explanation (see also Section 8), and have proposed the "2-sided Jeroslow-Wang" rule, with the motivation "maximize size reduction" <ref> [HV94] </ref>. This rule is like dsj, except that it adds, where we multiply. There may be multiple candidates for the choice of a branching variable. A tie between any two such variables is broken by selecting a lower or higher variable number depending on the parity of their sum. <p> In the latter case, we should begin looking for a better explanation. Hooker and Vinay have 16 reported on an application of this technique, as discussed in Section 5.3 <ref> [HV94] </ref>. Gent and Walsh indirectly applied the technique to arrive at negative conclusions about the importance of greediness and randomness in local search [GW93]. This technique seems to offer great promise for discovery of better algorithms for intractable problems.
Reference: [Joh74] <author> D. S. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year>
Reference-contexts: Binary clauses count twice as much as 3-clauses, and 3-clauses count twice as much as the clauses of longer length. This is the modified version of the weighting used in D. S. Johnson's maximum satisfiability approximation algorithm <ref> [Joh74] </ref>. 8 clauses samples maxscore minlen minlen23 maxlen maxlen23 dsj 300 100 16.78 15.91 16.61 15.31 16.83 17.20 400 100 40.45 32.30 40.39 105.51 40.45 34.82 427 100 92.00 75.70 85.95 226.43 92.00 70.30 450 100 101.84 77.33 91.74 230.79 101.84 78.47 550 100 45.36 31.50 39.72 74.60 45.36 36.64 (constant
Reference: [JSD95] <author> B. Jaumard, M. Stan, and J. Desrosiers. </author> <title> Tabu search and a quadratic relaxation for the satisfiability problem. </title> <editor> In D. S. Johnson and M. Trick, editors, </editor> <title> Cliques, Coloring, and Satisfiability: Second DIMACS Implementation Challenge., </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1995. </year>
Reference-contexts: Larrabee's algorithm [Lar92] (in effect) uses the 2-closure of the 2-CNF part of more general CNF formulas. This paper extends that idea by adding efficient subsumption resolution, and by incrementally updating the 2-closure and backtracking out of the updates when necessary. Pretolani [Pre95], as well as Jaumard et.al. <ref> [JSD95] </ref> presented satisfiability algorithms that exploit 2-SAT relaxation.
Reference: [JW90] <author> R. Jeroslow and J. Wang. </author> <title> Solving propositional satisfiability problems. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 1 </volume> <pages> 167-187, </pages> <year> 1990. </year> <month> 17 </month>
Reference-contexts: Standard deviations are prefixed by "". Jeroslow and Wang <ref> [JW90] </ref> have reported on a satisfiability algorithm that uses a somewhat similar branching strategy, except they maximize over positive and negative components, where we multiply. Their motivation is "most likely to satisfy".
Reference: [KL95] <author> O. Kullmann and H. Luckhardt. </author> <title> Various complexity upper bounds for decisions on propositional tautology. </title> <journal> Information and Computation, </journal> <note> 1995. To apppear. </note>
Reference-contexts: There are some known results on the worst-case performance of satisfiability on CNF formulas using algorithms that add various forms of reasoning to the basic DPLL framework <ref> [MS85, VG88, Sch93, Kul94, KL95] </ref>. For random CNF formulas of length L at the 4.27 ratio studied here, the smallest known worst case bound is 2 :046 L . This is still far above our observed growth rate of 2 :0039L .
Reference: [Kul94] <author> O. Kullmann. </author> <title> Methods for 3-SAT-decision in less than 1:5045 n steps. </title> <type> Technical report, </type> <institution> University of Frankfurt, </institution> <year> 1994. </year>
Reference-contexts: There are some known results on the worst-case performance of satisfiability on CNF formulas using algorithms that add various forms of reasoning to the basic DPLL framework <ref> [MS85, VG88, Sch93, Kul94, KL95] </ref>. For random CNF formulas of length L at the 4.27 ratio studied here, the smallest known worst case bound is 2 :046 L . This is still far above our observed growth rate of 2 :0039L .
Reference: [Lar92] <author> T. Larrabee. </author> <title> Test pattern generation using Boolean satisfiability. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(1) </volume> <pages> 6-22, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: However, this method does not compute all available inferences on satisfiable 2-CNF; such inferences are valuable when the 2-CNF is embedded in a larger formula. Larrabee's algorithm <ref> [Lar92] </ref> (in effect) uses the 2-closure of the 2-CNF part of more general CNF formulas. This paper extends that idea by adding efficient subsumption resolution, and by incrementally updating the 2-closure and backtracking out of the updates when necessary.
Reference: [LT92] <author> T. Larrabee and Y. Tsuji. </author> <title> Evidence for a satisfiability threshold for random 3CNF formulas. </title> <type> Technical Report UCSC-CRL-92-42, </type> <institution> UC Santa Cruz, </institution> <address> Santa Cruz, CA., </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Most subsequently reported experiments use this strategy exclusively. 5.5 Satisfiable vs. Unsatisfiable Random Formulas We have tested both satisfiable and unsatisfiable random 3-CNF formulas with 100 variables and from 300 to 550 clauses, including 427 clauses, believed to be the hardest point in the spectrum <ref> [MSL92, LT92] </ref>. The result for the dsj branching strategy appears in Figure 4. This figure shows: 1. Unsatisfiable random problems do not follow the easy-hard-easy pattern. 2.
Reference: [MS85] <author> B. Monien and E. Speckenmeyer. </author> <title> Solving satisfiability in less than 2 n steps. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 10 </volume> <pages> 287-295, </pages> <year> 1985. </year>
Reference-contexts: There are some known results on the worst-case performance of satisfiability on CNF formulas using algorithms that add various forms of reasoning to the basic DPLL framework <ref> [MS85, VG88, Sch93, Kul94, KL95] </ref>. For random CNF formulas of length L at the 4.27 ratio studied here, the smallest known worst case bound is 2 :046 L . This is still far above our observed growth rate of 2 :0039L .
Reference: [MSL92] <author> D. Mitchell, B. Selman, and H. Levesque. </author> <title> Hard and easy distributions of SAT problems. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <address> San Jose, CA., </address> <pages> pages 459-465, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Most subsequently reported experiments use this strategy exclusively. 5.5 Satisfiable vs. Unsatisfiable Random Formulas We have tested both satisfiable and unsatisfiable random 3-CNF formulas with 100 variables and from 300 to 550 clauses, including 427 clauses, believed to be the hardest point in the spectrum <ref> [MSL92, LT92] </ref>. The result for the dsj branching strategy appears in Figure 4. This figure shows: 1. Unsatisfiable random problems do not follow the easy-hard-easy pattern. 2.
Reference: [Pre95] <author> D. Pretolani. </author> <title> Efficiency and stability of hypergraph SAT algorithms. </title> <editor> In D. S. Johnson and M. Trick, editors, </editor> <title> Cliques, Coloring, and Satisfiability: Second DIMACS Implementation Challenge., </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1995. </year>
Reference-contexts: Larrabee's algorithm [Lar92] (in effect) uses the 2-closure of the 2-CNF part of more general CNF formulas. This paper extends that idea by adding efficient subsumption resolution, and by incrementally updating the 2-closure and backtracking out of the updates when necessary. Pretolani <ref> [Pre95] </ref>, as well as Jaumard et.al. [JSD95] presented satisfiability algorithms that exploit 2-SAT relaxation.
Reference: [PTVF92] <author> W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> second edition, </address> <year> 1992. </year>
Reference-contexts: To determine the statistical significance of the results, the dsj strategy was compared against each of the other five on five samples of varying clause/variable ratio, making 25 cases in all. The application of the Student's paired t-test [WEC91], using a published C-language implementation <ref> [PTVF92] </ref>, (reviewed in Appendix A) yields the conclusion that dsj branching strategy outperforms others with statistical significance (at level .02) in 16 cases, underperforms significantly in 3 cases, and is not significantly different in 6 cases.
Reference: [Sch93] <author> I. Schiermeyer. </author> <title> Solving 3-satisfiability in less than 1:579 n steps. </title> <booktitle> In Computer Science Logic. 6th Workshop, </booktitle> <address> CSL '92 (San Miniato, Italy, 28 Sept.-2 Oct. 1992) LN Comp. Sci. </address> <month> 702 </month> <year> (1993), </year> <pages> pages 379-94. </pages> <address> Berlin, Germany: </address> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: There are some known results on the worst-case performance of satisfiability on CNF formulas using algorithms that add various forms of reasoning to the basic DPLL framework <ref> [MS85, VG88, Sch93, Kul94, KL95] </ref>. For random CNF formulas of length L at the 4.27 ratio studied here, the smallest known worst case bound is 2 :046 L . This is still far above our observed growth rate of 2 :0039L .
Reference: [VG88] <author> A. Van Gelder. </author> <title> A satisfiability tester for non-clausal propositional calculus. </title> <journal> Information and Control, </journal> <volume> 79(1) </volume> <pages> 1-21, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: There are some known results on the worst-case performance of satisfiability on CNF formulas using algorithms that add various forms of reasoning to the basic DPLL framework <ref> [MS85, VG88, Sch93, Kul94, KL95] </ref>. For random CNF formulas of length L at the 4.27 ratio studied here, the smallest known worst case bound is 2 :046 L . This is still far above our observed growth rate of 2 :0039L .
Reference: [WEC91] <author> J. Welkowitz, R. B. Ewen, and J. Cohen. </author> <title> Introductory Statistics for the Behavioral Sciences. </title> <publisher> Harcourt Brace Jovanovich College, </publisher> <address> fourth edition, </address> <year> 1991. </year>
Reference-contexts: To determine the statistical significance of the results, the dsj strategy was compared against each of the other five on five samples of varying clause/variable ratio, making 25 cases in all. The application of the Student's paired t-test <ref> [WEC91] </ref>, using a published C-language implementation [PTVF92], (reviewed in Appendix A) yields the conclusion that dsj branching strategy outperforms others with statistical significance (at level .02) in 16 cases, underperforms significantly in 3 cases, and is not significantly different in 6 cases.
References-found: 22

