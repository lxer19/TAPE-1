URL: http://www.cs.indiana.edu/l/www/ftp/pierce/pict/pict-4.0/Doc/tutorial.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/pict/pict-4.0/Doc/
Root-URL: http://www.cs.indiana.edu
Email: pierce@cs.indiana.edu  
Title: Programming in the Pi-Calculus A Tutorial Introduction to Pict (Pict Version 4.0  
Author: Benjamin C. Pierce 
Date: March 18, 1997  
Address: Lindley Hall 215 Bloomington, Indiana 47405-4101 USA  
Affiliation: Computer Science Department Indiana University  
Abstract-found: 0
Intro-found: 0
Reference: [Agh86] <author> Gul A. Agha. </author> <title> Actors: a Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors <ref> [Hew77, Agh86] </ref> (also cf. [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.]), seem to arise almost inevitably when programming in a process calculus.
Reference: [Bou92] <author> Gerard Boudol. </author> <title> Asynchrony and the -calculus (note). </title> <institution> Rapporte de Recherche 1702, INRIA Sofia-Antipolis, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The primary differences are: (1) like the systems of Honda and Tokoro [HT91] and Boudol <ref> [Bou92] </ref>, output in this fragment is asynchronous: the sender cannot tell when it has actually occurred; (2) channels are typed; (3) the polyadic -calculus is slightly generalized to allow the communication not only of tuples of channels, but of tuples of tuples, etc; and (4) for technical convenience, booleans and process
Reference: [Chu41] <author> Alonzo Church. </author> <title> The Calculi of Lambda Conversion. </title> <publisher> Princeton University Press, </publisher> <year> 1941. </year>
Reference-contexts: of Cambridge, with support from Confer and from the British Science and Engineering Research Council, and at Indiana University. 4 Chapter 1 Processes and Channels The -calculus of Milner, Parrow, and Walker [MPW92] bears many similarities to the -calculus developed by Church and his students in the 1920's and 30's <ref> [Chu41] </ref>. Though its origins predate computer science itself, the -calculus has come to be regarded as a canonical calculus capturing the notion of sequential computation in a clean, mathematically tractable way.
Reference: [Hew77] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors <ref> [Hew77, Agh86] </ref> (also cf. [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.]), seem to arise almost inevitably when programming in a process calculus.
Reference: [HT91] <author> Kohei Honda and Mario Tokoro. </author> <title> An object calculus for asynchronous communication. </title> <editor> In Pierre America, editor, </editor> <booktitle> Proceedings of the European Conference on Object-Oriented Programming (ECOOP), volume 512 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Heidelberg, New York, Tokyo, </address> <year> 1991. </year>
Reference-contexts: The primary differences are: (1) like the systems of Honda and Tokoro <ref> [HT91] </ref> and Boudol [Bou92], output in this fragment is asynchronous: the sender cannot tell when it has actually occurred; (2) channels are typed; (3) the polyadic -calculus is slightly generalized to allow the communication not only of tuples of channels, but of tuples of tuples, etc; and (4) for technical convenience,
Reference: [Lan66] <author> P. J. Landin. </author> <title> The next 700 programming languages. </title> <journal> Communications of the ACM, </journal> <volume> 9(3) </volume> <pages> 157-166, </pages> <month> March </month> <year> 1966. </year>
Reference-contexts: Many of the fundamental issues of sequential programming languages can be studied by considering them in the more abstract setting of the -calculus. Conversely, the -calculus has influenced the design of numerous programming languages, from Landin's ISWIM <ref> [Lan66] </ref> and McCarthy's LISP [McC78] to modern languages such as ML, Scheme, and Haskell. The -calculus represents a synthesis and generalization of many years of work on process calculi such as CCS [Mil80, Mil89, etc.].
Reference: [McC78] <author> John McCarthy. </author> <title> History of Lisp. </title> <booktitle> In Proceedings of the first ACM conference on History of Programming Languages, </booktitle> <pages> pages 217-223, </pages> <year> 1978. </year> <journal> ACM Sigplan Notices, </journal> <volume> Vol. 13, No 8, </volume> <month> August </month> <year> 1978. </year>
Reference-contexts: Many of the fundamental issues of sequential programming languages can be studied by considering them in the more abstract setting of the -calculus. Conversely, the -calculus has influenced the design of numerous programming languages, from Landin's ISWIM [Lan66] and McCarthy's LISP <ref> [McC78] </ref> to modern languages such as ML, Scheme, and Haskell. The -calculus represents a synthesis and generalization of many years of work on process calculi such as CCS [Mil80, Mil89, etc.].
Reference: [Mil80] <author> Robin Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Conversely, the -calculus has influenced the design of numerous programming languages, from Landin's ISWIM [Lan66] and McCarthy's LISP [McC78] to modern languages such as ML, Scheme, and Haskell. The -calculus represents a synthesis and generalization of many years of work on process calculi such as CCS <ref> [Mil80, Mil89, etc.] </ref>. In the concurrency community, the -calculus and similar calculi are widely studied, and a substantial body of theoretical work has accrued.
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Conversely, the -calculus has influenced the design of numerous programming languages, from Landin's ISWIM [Lan66] and McCarthy's LISP [McC78] to modern languages such as ML, Scheme, and Haskell. The -calculus represents a synthesis and generalization of many years of work on process calculi such as CCS <ref> [Mil80, Mil89, etc.] </ref>. In the concurrency community, the -calculus and similar calculi are widely studied, and a substantial body of theoretical work has accrued. <p> These structures can be added, yielding a somewhat more complex system that nevertheless remains theoretically tractable <ref> [Mil89] </ref>. But value-passing CCS lacks another fundamental property: the ability to perform higher-order programming. For example the fundamental operation of constructing process networks by connecting processes and channels cannot be expressed in CCS, with or without values.
Reference: [Mil90] <author> Robin Milner. </author> <title> Functions as processes. </title> <type> Research Report 1154, </type> <institution> INRIA, Sofia Antipolis, </institution> <year> 1990. </year> <note> Final version in Journal of Mathematical Structures in Computer Science 2(2) 119-141, </note> <year> 1992. </year>
Reference-contexts: Basic algebraic datatypes like numbers, queues, and trees can be encoded as processes, using techniques reminiscent of Church's encodings in the -calculus. Indeed, the - calculus itself can be encoded fairly straightforwardly by considering fi-reduction as a kind of communication <ref> [Mil90] </ref>.
Reference: [Mil92] <author> Robin Milner. </author> <title> Action structures. </title> <type> Technical Report ECS-LFCS-92-249, </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Milner himself is now considering much more refined systems <ref> [Mil92, Mil95] </ref>, and discussion continues in the concurrency community as to what should constitute a general theory of concurrency. Nevertheless, we've reached a good point to begin experimenting.
Reference: [Mil95] <author> Robin Milner. </author> <title> Calculi for interaction. </title> <journal> Acta Informatica, </journal> <note> 1995. To appear. </note>
Reference-contexts: Milner himself is now considering much more refined systems <ref> [Mil92, Mil95] </ref>, and discussion continues in the concurrency community as to what should constitute a general theory of concurrency. Nevertheless, we've reached a good point to begin experimenting.
Reference: [MP88] <author> John Mitchell and Gordon Plotkin. </author> <title> Abstract types have existential type. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(3), </volume> <month> July </month> <year> 1988. </year>
Reference-contexts: this fact|that patterns with type bindings create fresh types|to build abstract types whose elements can be manipulated only by some given set of functions. 1 As, a simple (but 1 This programming technique directly follows Mitchell and Plotkin's explanation of abstract datatypes in terms of existential types in the lambda-calculus <ref> [MP88] </ref>. 49 useful) example, the following binding introduces a new enumeration type called Weekday and two operators, sameday and tomorrow: val [#Weekday monday:Weekday tuesday:Weekday wednesday:Weekday thursday:Weekday friday:Weekday saturday:Weekday sunday:Weekday sameday:/[Weekday Weekday /Bool] tomorrow:/[Weekday /Weekday]] = [#Int -- representation type -- 0 1 2 3 -- representations of days -- 4 5
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: Work has continued at the University of Edinburgh, at the Computer Laboratory, University of Cambridge, with support from Confer and from the British Science and Engineering Research Council, and at Indiana University. 4 Chapter 1 Processes and Channels The -calculus of Milner, Parrow, and Walker <ref> [MPW92] </ref> bears many similarities to the -calculus developed by Church and his students in the 1920's and 30's [Chu41]. Though its origins predate computer science itself, the -calculus has come to be regarded as a canonical calculus capturing the notion of sequential computation in a clean, mathematically tractable way.
Reference: [MTH90] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: For example: run printi!'a' 97 4.2 Derived Forms for Declarations In this section, we extend the syntactic category of declarations with a number of handy constructs. Readers familiar with Standard ML <ref> [MTH90] </ref> will recognize our debt to its designers here. 31 4.2.1 Declaration Sequences First, as in the examples in Chapter 1, we avoid proliferation of parentheses in a sequence of declarations like (new x:A (new y:B (new z:C ...))) by allowing a Proc to be preceded by a sequence of declaration
Reference: [Nie92] <author> Oscar Nierstrasz. </author> <title> Towards an object calculus. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wegner, editors, </editor> <booktitle> Proceedings of the ECOOP '91 Workshop on Object-Based Concurrent Computing, Lecture Notes in Computer Science number 612, </booktitle> <pages> pages 1-20. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors [Hew77, Agh86] (also cf. <ref> [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.] </ref>), seem to arise almost inevitably when programming in a process calculus. They are widely used in Pict's libraries. 46 Chapter 7 Advanced Language Features The full Pict language includes a number of features that cannot be treated fully in a short tutorial.
Reference: [NP96] <author> Uwe Nestmann and Benjamin C. Pierce. </author> <title> Decoding choice encodings. </title> <booktitle> In Proceedings of CONCUR '96, </booktitle> <month> August </month> <year> 1996. </year> <month> 57 </month>
Reference-contexts: Didier Remy worked with Pierce on the original PIC compiler [PRT93] (on which an early version of the present Pict compiler was based) and joined in many discussions about the integration of processes and functions. Uwe Nestmann's research on proof techniques for compilations between concurrent calculi <ref> [NP96] </ref> sharpened our ideas about the formal foundations of Pict. Martin Steffen helped study the formal foundations of the core subtyping algorithm [PS96]. Dilip Sequeira contributed both code and ideas to an early implementation of type inference and record type checking.
Reference: [NSL96] <author> Oscar Nierstrasz, Jean-Guy Schneider, and Markus Lumpe. </author> <title> Formalizing composable software systems | a research agenda. In Formal Methods in Open, </title> <booktitle> Object-Based Distributed Systems (FMOODS '96), </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors [Hew77, Agh86] (also cf. <ref> [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.] </ref>), seem to arise almost inevitably when programming in a process calculus. They are widely used in Pict's libraries. 46 Chapter 7 Advanced Language Features The full Pict language includes a number of features that cannot be treated fully in a short tutorial.
Reference: [Pap91] <author> M. Papathomas. </author> <title> A unifying framework for process calculus semantics of concurrent object-based languages and features. </title> <editor> In Dennis Tsichritzis, editor, </editor> <booktitle> Object composition Composition d'objets, </booktitle> <pages> pages 205-224. </pages> <institution> Centre Universitaire d'Informatique, Universite de Geneve, </institution> <month> [6] </month> <year> 1991. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors [Hew77, Agh86] (also cf. <ref> [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.] </ref>), seem to arise almost inevitably when programming in a process calculus. They are widely used in Pict's libraries. 46 Chapter 7 Advanced Language Features The full Pict language includes a number of features that cannot be treated fully in a short tutorial.
Reference: [Pie96] <author> Benjamin C. Pierce. </author> <title> Programming in the pi-calculus: A tutorial introduction to Pict. </title> <note> Available electronically, </note> <year> 1996. </year>
Reference: [PRT93] <author> Benjamin C. Pierce, Didier Remy, and David N. Turner. </author> <title> A typed higher-order programming language based on the pi-calculus. In Workshop on Type Theory and its Application to Computer Systems, </title> <publisher> Kyoto University, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: From Davide Sangiorgi, we learned about the higher-order -calculus and the many ways of encoding -calculi in the -calculus; we also did a lot of thinking together about static type systems for the -calculus [PS93, PS97]. Didier Remy worked with Pierce on the original PIC compiler <ref> [PRT93] </ref> (on which an early version of the present Pict compiler was based) and joined in many discussions about the integration of processes and functions. Uwe Nestmann's research on proof techniques for compilations between concurrent calculi [NP96] sharpened our ideas about the formal foundations of Pict.
Reference: [PS93] <author> Benjamin Pierce and Davide Sangiorgi. </author> <title> Typing and subtyping for mobile processes. </title> <booktitle> In Logic in Computer Science, </booktitle> <year> 1993. </year> <note> Full version in Mathematical Structures in Computer Science, Vol. 6, No. 5, </note> <year> 1996. </year>
Reference-contexts: From Davide Sangiorgi, we learned about the higher-order -calculus and the many ways of encoding -calculi in the -calculus; we also did a lot of thinking together about static type systems for the -calculus <ref> [PS93, PS97] </ref>. Didier Remy worked with Pierce on the original PIC compiler [PRT93] (on which an early version of the present Pict compiler was based) and joined in many discussions about the integration of processes and functions.
Reference: [PS96] <author> Benjamin Pierce and Martin Steffen. </author> <title> Higher-order subtyping. </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1996. </year> <note> To appear. A preliminary version appeared in IFIP Working Conference on Programming Concepts, Methods and Calculi (PROCOMET), June 1994, and as University of Edinburgh technical report ECS-LFCS-94-280 and Universitat Erlangen-Nurnberg Interner Bericht IMMD7-01/94, </note> <month> January </month> <year> 1994. </year>
Reference-contexts: Uwe Nestmann's research on proof techniques for compilations between concurrent calculi [NP96] sharpened our ideas about the formal foundations of Pict. Martin Steffen helped study the formal foundations of the core subtyping algorithm <ref> [PS96] </ref>. Dilip Sequeira contributed both code and ideas to an early implementation of type inference and record type checking. Kevin Millikin and Philip Wadler gave us helpful comments on the formal definition.
Reference: [PS97] <author> Benjamin Pierce and Davide Sangiorgi. </author> <title> Behavioral equivalence in the polymorphic pi-calculus. </title> <booktitle> In Principles of Programming Languages (POPL), </booktitle> <year> 1997. </year> <note> Full version available as INRIA-Sophia Antipolis Rapport de Recherche No. 3042 and as Indiana University Computer Science Technical Report 468. </note>
Reference-contexts: From Davide Sangiorgi, we learned about the higher-order -calculus and the many ways of encoding -calculi in the -calculus; we also did a lot of thinking together about static type systems for the -calculus <ref> [PS93, PS97] </ref>. Didier Remy worked with Pierce on the original PIC compiler [PRT93] (on which an early version of the present Pict compiler was based) and joined in many discussions about the integration of processes and functions.
Reference: [PT95] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Concurrent objects in a process calculus. </title> <editor> In Takayasu Ito and Akinori Yonezawa, editors, </editor> <booktitle> Theory and Practice of Parallel Programming (TPPP), Sendai, </booktitle> <address> Japan (Nov. </address> <year> 1994), </year> <booktitle> number 907 in Lecture Notes in Computer Science, </booktitle> <pages> pages 187-215. </pages> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors [Hew77, Agh86] (also cf. <ref> [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.] </ref>), seem to arise almost inevitably when programming in a process calculus. They are widely used in Pict's libraries. 46 Chapter 7 Advanced Language Features The full Pict language includes a number of features that cannot be treated fully in a short tutorial.
Reference: [PT97a] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict: A programming language based on the pi-calculus. </title> <type> Technical report, </type> <institution> Computer Science Department, Indiana University, </institution> <year> 1997. </year> <title> To appear in Milner Festschrift, </title> <publisher> MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: For one thing, we have not talked about the fact that any reasonable implementation of this operational semantics must schedule processes for execution fairly. A short discussion of fairness in Pict appears in <ref> [PT97a] </ref>. For another thing, we have only specified the behavior of closed programs, with no connections to the outside world.
Reference: [PT97b] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict language definition. Draft report; available electronically as part of the Pict distribution, </title> <year> 1997. </year>
Reference-contexts: Chapter 6 develops an extended example, showing how reference cell objects can be programmed in Pict. The full Pict language offers a number of features not discussed in this brief tutorial. See the Pict Language Definition <ref> [PT97b] </ref> for a formal description of the entire language. 1.1 Simple Processes The -calculus is a notation for describing concurrent computations as systems of communicating agents. The basic unit of computation is a process. The simplest process, written (), has no observable behavior. <p> We now develop it precisely. The present chapter deals with the syntax and operational semantics of the core; a formal presentation of the type system can be found in the Pict Language Definition <ref> [PT97b] </ref>. Most of the material in this chapter is repeated, in less formal terms, elsewhere.
Reference: [PT97c] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict libraries manual. </title> <note> Available electronically, </note> <year> 1997. </year>
Reference-contexts: The Pict distribution comes with a standard prelude that defines arithmetic operations like +, boolean operations like not, and many other useful primitive facilities. These are listed in the Pict Standard Libraries Manual <ref> [PT97c] </ref>. To add two numbers and print the result, for example, we can write: def r z:Int = printi!z run +![2 3 r] 5 The printi operation here plays the same role for integers as print does for strings. <p> These are described in full in the Pict Libraries Manual <ref> [PT97c] </ref>.
Reference: [Sew96] <author> Peter Sewell. </author> <title> Observations on Pict, a nondeterministic programming language. </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: Peter Sewell has shown how the simple semantics presented here can be extended to model the externally observable behavior of processes <ref> [Sew96] </ref>. 23 Chapter 3 Subtyping We have already introduced the essentials of Pict's type system: values are assigned types describing their structure; in particular, the types of channels specify the types of the values that they carry.
Reference: [SL96] <author> Jean-Guy Schneider and Markus Lumpe. </author> <title> Modelling objects in Pict. </title> <type> Technical Report IAM-96-004, </type> <institution> Universitaet Bern, Institut fuer Informatik und Angewandte Mathematik, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors [Hew77, Agh86] (also cf. <ref> [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.] </ref>), seem to arise almost inevitably when programming in a process calculus. They are widely used in Pict's libraries. 46 Chapter 7 Advanced Language Features The full Pict language includes a number of features that cannot be treated fully in a short tutorial.
Reference: [Tur96] <author> David N. Turner. </author> <title> The Polymorphic Pi-calulus: Theory and Implementation. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1996. </year>
Reference: [Var96] <author> Patrick Varone. </author> <title> Implementation of "generic synchronization policies" in Pict. </title> <type> Technical Report IAM-96-005, </type> <institution> Universitaet Bern, Institut fuer Informatik und Angewandte Mathematik, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors [Hew77, Agh86] (also cf. <ref> [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.] </ref>), seem to arise almost inevitably when programming in a process calculus. They are widely used in Pict's libraries. 46 Chapter 7 Advanced Language Features The full Pict language includes a number of features that cannot be treated fully in a short tutorial.
Reference: [Vas94] <author> Vasco T. Vasconcelos. </author> <title> Typed concurrent objects. </title> <booktitle> In Proceedings of the Eighth European Conference on Object-Oriented Programming (ECOOP), volume 821 of Lecture Notes in Computer Science, </booktitle> <pages> pages 100-117. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1994. </year> <month> 58 </month>
Reference-contexts: Active objects of this kind, reminiscent of (though lower-level than) the familiar idiom of actors [Hew77, Agh86] (also cf. <ref> [Nie92, Pap91, Vas94, PT95, SL96, Var96, NSL96, etc.] </ref>), seem to arise almost inevitably when programming in a process calculus. They are widely used in Pict's libraries. 46 Chapter 7 Advanced Language Features The full Pict language includes a number of features that cannot be treated fully in a short tutorial.
References-found: 33

