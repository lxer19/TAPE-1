URL: http://www.cs.wustl.edu/~suri/psdir/fairq.ps
Refering-URL: http://www.cs.wustl.edu/~suri/research.html
Root-URL: http://www.cs.wustl.edu
Title: Leap Forward Virtual Clock: A New Fair Queuing Scheme with Guaranteed Delays and Throughput Fairness  
Author: Subhash Suri George Varghese Girish Chandranmenon 
Address: One Brookings Drive St. Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Abstract: We describe an efficient fair queuing scheme, Leap Forward Virtual Clock, that provides end-to-end delay bounds similar to WFQ, along with throughput fairness. Our scheme can be implemented with a worst-case time O(log log N ) per packet (inclusive of sorting costs), which improves upon all previously known schemes that guarantee delay and throughput fairness similar to WFQ. Interestingly, both the classical virtual clock and the Self-Clocked Fair Queuing schemes can be thought of as special cases of our scheme, by setting the leap forward parameter appropriately. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bennett and H. </author> <title> Zhang Worst-case Fair Weighted Fair Queuing. </title> <booktitle> Proc. INFOCOM, </booktitle> <year> 1995. </year>
Reference-contexts: O (log log N ) is a small constant for all practical purposes|for instance, log log N 5 for all N 4 fl 10 9 ; the underlying constants are also quite small. Bennett and Zhang <ref> [1] </ref> introduced a more refined form of fairness called worst-case fairness (WFI). They showed that even WFQ could exhibit burstiness (i.e., high WFI), and described a scheme called WF 2 Q that has optimal WFI. Our LFVC scheme has a WFI comparable to WF 2 Q. <p> WFQ [5] Small Fair Poor O (N ) SCFQ [9] Large Fair Poor O (log N ) Virtual Clock [17] Small Unfair Poor O (log N ) Deficit Round Robin [12] Large Fair Poor O (1) Frame Based FQ [14] Small Fair Poor O (log N ) WF 2 Q <ref> [1] </ref> Small Fair Good O (log N ) Leap Forward VC Small Fair Good O (log log N ) Table 1: A comparison of several well-known scheduling algorithms. <p> The problem is caused by unbounded deviations between the server clock and a flow tag, which can happen when some flows send packets in bursts while others remain idle. (See [13] for examples.) Surprisingly, Bennett and Zhang <ref> [1] </ref> show that even WFQ exhibits a form of bursty behavior. Leap Forward Virtual Clock avoids both forms of unfairness. <p> There are two commonly used fairness measures: the first, proposed by Golestani [9], is a gross measure, while the second, introduced recently by Bennett and Zhang <ref> [1] </ref>, is a more refined measure. Bennett-Zhang call their measure worst-case fairness index (WFI), and show that while WFQ is fair by Golestani's measure, it falls short of the ideal GPS by the worst-case fairness index. WFI more closely measures short-term bursty behavior. <p> The normalized worst-case fair index (WFI) is defined as C = max f B : Bennett and Zhang <ref> [1] </ref> have shown that Worst-case Weighted Fair Queuing has an optimal WFI equal to o = M=B. We show that the WFI of our scheme is nearly the same. <p> Clock is bounded by o + max f 2 (o + ae) B : In practice, r f =B should be quite small, and if we set the coarsening parameter ae to roughly o , the WFI of Leap Forward approaches o , which is the optimal value of WFI <ref> [1] </ref>. 6 Data Structures The only nontrivial data structure needed for implementing LFVC is a priority queue. Using standard data structures for maintaining priority queues, we can implement LFVC in O (log N ) time per packet. <p> Then, rounding up all the tags to multiples of M=B dramatically reduces the underlying key space of the priority queue, while increasing the delay by at most M=B. We further reduce the key space to a set of O (N ) integers, in the range <ref> [1; cN ] </ref> for a fixed constant c, by using a tag-separation property of our algorithm and modular arithmetic to recycle tags.
Reference: [2] <author> J. Bennett and H. </author> <title> Zhang Hierarchical Packet Fair Queuing Algorithms. </title> <booktitle> in Proc. SIGCOMM '96. </booktitle>
Reference-contexts: Weighted Fair Queuing (WFQ) [5] is a benchmark for comparing properties of packet sched-ulers. WFQ, however, requires O (N ) time to schedule a packet, where N is the number of concurrent flows at a router. Other algorithms <ref> [14, 2] </ref> equivalent to WFQ require O (log N ) time per packet. Our main result is a service discipline called Leap Forward Virtual Clock (LFVC) whose delay bound and throughput fairness is almost identical to WFQ, but whose computational overhead is only O (log log N ) per packet. <p> 5.1 (Throughput Fairness) The fairness measure of LFVC Clock satisfies: F max f;g 3 ( f + g ) + 2o + 4ae; where o = M=B and ae is a tag coarsening parameter. 5.2 Worst Case Fairness Index The following measure of throughput fairness, due to Bennett and Zhang <ref> [2] </ref> provides a more refined measure of short term throughput unfairness than the Golestani measure. We start with some notation. The delay D (p) of a packet p is the real time that elapses between the arrival time of p and the time p is completely transmitted.

Reference: [4] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [5] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queuing algorithm. </title> <booktitle> Proc. Sigcomm '89, </booktitle> <volume> 19(4) </volume> <pages> 1-12, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: In today's Internet, for instance, a rogue user can send data at an uncontrolled rate, and seize a large fraction of the available bandwidth at the expense of "good" users. Weighted Fair Queuing (WFQ) <ref> [5] </ref> is a benchmark for comparing properties of packet sched-ulers. WFQ, however, requires O (N ) time to schedule a packet, where N is the number of concurrent flows at a router. Other algorithms [14, 2] equivalent to WFQ require O (log N ) time per packet. <p> A detailed comparison can 1 in contrast with some existing algorithms whose O (1) time complexity bound accounts only for "tag computation" and not the additional O (log N ) cost for sorting Scheme Delay Bound Fairness Worst-case Fairness Efficiency GPS [10] 0 Fair Excellent Impractical WFQ <ref> [5] </ref> Small Fair Poor O (N ) SCFQ [9] Large Fair Poor O (log N ) Virtual Clock [17] Small Unfair Poor O (log N ) Deficit Round Robin [12] Large Fair Poor O (1) Frame Based FQ [14] Small Fair Poor O (log N ) WF 2 Q [1] Small
Reference: [6] <author> P. van Emde Boas, R. Kaas, and E. Zijlstra. </author> <title> Design and implementation of an efficient priority queue. </title> <journal> Math. Syst. Theory, </journal> <volume> 10 </volume> <pages> 99-127, </pages> <year> 1977. </year>
Reference-contexts: With these ideas in place, we use "approximate sorting" and a finite-universe priority queue of van Emde Boas <ref> [6] </ref> to achieve O (log log N ) processing time per packet. Details can be found in [15]. The following theorem summarizes the main result of our paper.
Reference: [7] <author> N. Figuera and J. Pasquale. Leave-in-time: </author> <title> A new service discipline for real-time communication in a packet-switching data network. </title> <booktitle> Proc. Sigcomm '95, </booktitle> <month> Septem-ber </month> <year> 1995. </year>
Reference-contexts: Packets are serviced in non-decreasing order of tags. It is true but not obvious <ref> [7, 16] </ref> that such a scheme meets all tag deadlines. We have isolated two fundamental conditions that underlie delay and throughput guarantees. Our Leap Forward Virtual Clock scheme is an instance of a class of service disciplines that derive from these conditions.
Reference: [8] <author> P. Goyal, S. S. Lam, and H. M. Vin. </author> <title> Determining End-to-End Delay Bounds in Heterogeneous Networks. </title> <booktitle> In Proceedings of Workshop on Network and OS Support for Audio-Video, </booktitle> <pages> pages 287-298, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Each packet in a flow carries the ID of the flow. Packets in a flow pass through a sequence of servers (or routers) along their path. We will later use the framework of guaranteed rate clock (GRC) algorithms introduced by Goyal et al. <ref> [8] </ref>, to establish WFQ-like bounds on end-to-end delay. With this framework, it suffices to establish the delay bound at a single server. Hence, we concentrate on a server S, with output rate B bits per second. <p> If one can show that each packet is transmitted no later than its tag value, then the GRC framework of Goyal et al. <ref> [8] </ref> provides a good end-to-end delay bound. We distill a fundamental invariant, called Backlog Inequality, that is essential to ensuring that a packet is serviced by its tag. Our analysis is new and simple; more importantly, it leads directly to our new scheme. <p> We use this fact to prove end-to-end delay bounds. We then show that our scheme is a Guaranteed Rate scheduling algorithm, as defined by Goyal et al. <ref> [8] </ref>. This provides an end-to-end delay bound from our single-server delay bound; we omit details, and state the result. <p> Tag coarsening adds an additional delay of at most ae per server on the path. The parameter ae can be used to derive tradeoffs between additional delay and savings in computational overhead. Goyal et al. <ref> [8] </ref> also show how to obtain probabilistic bounds on the end-to-end delay when the bursti-ness of a flow is bounded with a stochastic process, such as the exponentially bounded burstiness. The same results also apply to our scheduling algorithms.
Reference: [9] <author> S. J. Golestani. </author> <title> A Self-Clocked Fair Queuing Scheme for High Speed Applications. </title> <booktitle> In Proceedings of IEEE INFOCOM '94, </booktitle> <pages> pages 636-646, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: in contrast with some existing algorithms whose O (1) time complexity bound accounts only for "tag computation" and not the additional O (log N ) cost for sorting Scheme Delay Bound Fairness Worst-case Fairness Efficiency GPS [10] 0 Fair Excellent Impractical WFQ [5] Small Fair Poor O (N ) SCFQ <ref> [9] </ref> Large Fair Poor O (log N ) Virtual Clock [17] Small Unfair Poor O (log N ) Deficit Round Robin [12] Large Fair Poor O (1) Frame Based FQ [14] Small Fair Poor O (log N ) WF 2 Q [1] Small Fair Good O (log N ) Leap Forward <p> We have isolated two fundamental conditions that underlie delay and throughput guarantees. Our Leap Forward Virtual Clock scheme is an instance of a class of service disciplines that derive from these conditions. In particular, by setting parameters appropriately, both classical virtual clock [17] and Self-Clocked Fair Queuing <ref> [9] </ref> can be derived as special cases. We begin with some useful notation. A flow is a logical connection between a source and a destination. Each packet in a flow carries the ID of the flow. <p> In next section, we address the throughput fairness of our algorithm. 5 Throughput Fairness of Leap For- ward Informally, a scheme is fair if each backlogged flow receives its fair share of the available server bandwidth. There are two commonly used fairness measures: the first, proposed by Golestani <ref> [9] </ref>, is a gross measure, while the second, introduced recently by Bennett and Zhang [1], is a more refined measure. Bennett-Zhang call their measure worst-case fairness index (WFI), and show that while WFQ is fair by Golestani's measure, it falls short of the ideal GPS by the worst-case fairness index. <p> In particular, F should be a constant, independent of the length of the time interval <ref> [9] </ref>. It is known that in the case of the classical virtual clock, F ! 1.
Reference: [10] <author> A. K. Parekh and R. G. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control: The Single Node Case. </title> <booktitle> In Proc. of IEEE INFOCOM, </booktitle> <pages> pp. 915-924, </pages> <year> 1992. </year>
Reference-contexts: A detailed comparison can 1 in contrast with some existing algorithms whose O (1) time complexity bound accounts only for "tag computation" and not the additional O (log N ) cost for sorting Scheme Delay Bound Fairness Worst-case Fairness Efficiency GPS <ref> [10] </ref> 0 Fair Excellent Impractical WFQ [5] Small Fair Poor O (N ) SCFQ [9] Large Fair Poor O (log N ) Virtual Clock [17] Small Unfair Poor O (log N ) Deficit Round Robin [12] Large Fair Poor O (1) Frame Based FQ [14] Small Fair Poor O (log N
Reference: [11] <author> A. K. Parekh and R. G. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks: The Multiple Node Case. </title> <booktitle> In Proc. of IEEE INFOCOM, </booktitle> <pages> pp. 521-530, </pages> <year> 1993. </year>
Reference: [12] <author> M. Shreedhar and G. Varghese. </author> <title> Efficient Fair Queuing Using Deficit Round Robin. </title> <booktitle> In Proc. of SIGCOMM, </booktitle> <pages> pp. 231-242, </pages> <year> 1995. </year>
Reference-contexts: O (log N ) cost for sorting Scheme Delay Bound Fairness Worst-case Fairness Efficiency GPS [10] 0 Fair Excellent Impractical WFQ [5] Small Fair Poor O (N ) SCFQ [9] Large Fair Poor O (log N ) Virtual Clock [17] Small Unfair Poor O (log N ) Deficit Round Robin <ref> [12] </ref> Large Fair Poor O (1) Frame Based FQ [14] Small Fair Poor O (log N ) WF 2 Q [1] Small Fair Good O (log N ) Leap Forward VC Small Fair Good O (log log N ) Table 1: A comparison of several well-known scheduling algorithms.
Reference: [13] <author> D. Stiliadis and A. Varma. </author> <title> Latency-Rate Servers: A General Model for Analysis of Traffic Scheduling Algorithms. </title> <type> Technical Report UCSC-CRL-95-38, </type> <institution> Dept. of Computer Engineering and Information Sciences, UC Santa Cruz, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: The problem is caused by unbounded deviations between the server clock and a flow tag, which can happen when some flows send packets in bursts while others remain idle. (See <ref> [13] </ref> for examples.) Surprisingly, Bennett and Zhang [1] show that even WFQ exhibits a form of bursty behavior. Leap Forward Virtual Clock avoids both forms of unfairness. <p> Average delay experienced by flows under LFVC are similar to those under VC and much smaller than those under DRR and SCFQ. Other results [15] illustrate the merits of LFVC over other fair queuing schemes. 2 http://www-nrg.ee.lbl.gov/ns/ 3 The rate allocations in this experiment are borrowed from <ref> [13] </ref>; but the flows here send data at a constant bit rate as opposed to an on-off model used in their experiments. Based on our experiments, we observe: 1) LFVC rations the output link fairly among contending flows.
Reference: [14] <author> D. Stiliadis and A. Varma. </author> <title> Frame-based Fair Queueing: A New Traffic Scheduling Algorithm for Packet-Switched Networks. </title> <booktitle> Proc. of ACM SIGMETRICS '96, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Weighted Fair Queuing (WFQ) [5] is a benchmark for comparing properties of packet sched-ulers. WFQ, however, requires O (N ) time to schedule a packet, where N is the number of concurrent flows at a router. Other algorithms <ref> [14, 2] </ref> equivalent to WFQ require O (log N ) time per packet. Our main result is a service discipline called Leap Forward Virtual Clock (LFVC) whose delay bound and throughput fairness is almost identical to WFQ, but whose computational overhead is only O (log log N ) per packet. <p> Bound Fairness Worst-case Fairness Efficiency GPS [10] 0 Fair Excellent Impractical WFQ [5] Small Fair Poor O (N ) SCFQ [9] Large Fair Poor O (log N ) Virtual Clock [17] Small Unfair Poor O (log N ) Deficit Round Robin [12] Large Fair Poor O (1) Frame Based FQ <ref> [14] </ref> Small Fair Poor O (log N ) WF 2 Q [1] Small Fair Good O (log N ) Leap Forward VC Small Fair Good O (log log N ) Table 1: A comparison of several well-known scheduling algorithms.
Reference: [15] <author> S. Suri, G. Varghese and G. Chandranmenon. </author> <title> Leap Forward Virtual Clock: A New Fair Queuing Scheme with Guaranteed Delays and Throughput Fairness. </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, Wash-ington University, Saint Louis, </institution> <year> 1996. </year> <title> Use the WWW link: </title> <note> www.cs.wustl.edu/~suri/leapforward.ps to access the report. </note>
Reference-contexts: By poor worst-case fairness, we mean a worst-case index that grows with the number of flows. be found in <ref> [15] </ref>. The paper is organized as follows. In Section 2, we formulate two conditions which are necessary and sufficient to guarantee WFQ-like delay and throughput bounds. In Section 3, we introduce our main algorithm, Leap Forward Virtual Clock (LFVC). <p> In addition, the procedure P rocessHead is used to handle a packet p when it reaches the head of its queue Q f . We show that: Theorem 3.1 LFVC is a work-conserving service discipline. Due to lack of space, we omit the proof. Please refer to <ref> [15] </ref> for details. 4 Delay Bounds for LFVC We establish the delay bound at a single server, and extend it to multiple hops. 4.1 Delay at a Single Server We show that LFVC maintains the Backlog Inequality. <p> Due to lack of space, we only discuss the proof for the Enqueue; the remaining cases are similar and a complete proof can be found in the technical report <ref> [15] </ref>. [Enqueue.] Suppose a packet p f arrives at the head of queue for the flow f. Let t f be the current tag of f before p f arrives. <p> With these ideas in place, we use "approximate sorting" and a finite-universe priority queue of van Emde Boas [6] to achieve O (log log N ) processing time per packet. Details can be found in <ref> [15] </ref>. The following theorem summarizes the main result of our paper. <p> Average delay experienced by flows under LFVC are similar to those under VC and much smaller than those under DRR and SCFQ. Other results <ref> [15] </ref> illustrate the merits of LFVC over other fair queuing schemes. 2 http://www-nrg.ee.lbl.gov/ns/ 3 The rate allocations in this experiment are borrowed from [13]; but the flows here send data at a constant bit rate as opposed to an on-off model used in their experiments.
Reference: [16] <author> G. G. Xie and S. S. Lam. </author> <title> Delay Guarantee of a Virtual Clock Server. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <month> December </month> <year> 1995 </year>
Reference-contexts: Packets are serviced in non-decreasing order of tags. It is true but not obvious <ref> [7, 16] </ref> that such a scheme meets all tag deadlines. We have isolated two fundamental conditions that underlie delay and throughput guarantees. Our Leap Forward Virtual Clock scheme is an instance of a class of service disciplines that derive from these conditions.
Reference: [17] <author> Lixia Zhang. </author> <title> Virtual Clock: A New Traffic Control Algorithm for Packet-Switched Networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2), </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: complexity bound accounts only for "tag computation" and not the additional O (log N ) cost for sorting Scheme Delay Bound Fairness Worst-case Fairness Efficiency GPS [10] 0 Fair Excellent Impractical WFQ [5] Small Fair Poor O (N ) SCFQ [9] Large Fair Poor O (log N ) Virtual Clock <ref> [17] </ref> Small Unfair Poor O (log N ) Deficit Round Robin [12] Large Fair Poor O (1) Frame Based FQ [14] Small Fair Poor O (log N ) WF 2 Q [1] Small Fair Good O (log N ) Leap Forward VC Small Fair Good O (log log N ) Table <p> We have isolated two fundamental conditions that underlie delay and throughput guarantees. Our Leap Forward Virtual Clock scheme is an instance of a class of service disciplines that derive from these conditions. In particular, by setting parameters appropriately, both classical virtual clock <ref> [17] </ref> and Self-Clocked Fair Queuing [9] can be derived as special cases. We begin with some useful notation. A flow is a logical connection between a source and a destination. Each packet in a flow carries the ID of the flow. <p> Lastly, we use the notation o to denote the time to transmit a largest packet at the server rate; thus, o = M B , where M is the size of the largest packet across all flows. 2.1 Delay Bound for Virtual Clock Classical virtual clock <ref> [17] </ref> assigns a tag to each arriving packet using Eq. (1), and services packets in non-decreasing tag order. If one can show that each packet is transmitted no later than its tag value, then the GRC framework of Goyal et al. [8] provides a good end-to-end delay bound.
References-found: 16

