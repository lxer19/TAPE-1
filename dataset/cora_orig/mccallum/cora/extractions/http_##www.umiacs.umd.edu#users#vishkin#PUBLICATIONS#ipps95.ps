URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/ipps95.ps
Refering-URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/papers.html
Root-URL: 
Title: Parallel Algorithms for Database Operations and a Database Operation for Parallel Algorithms contribution is an
Author: Rajeev Raman Uzi Vishkin 
Note: The main technical  1  
Abstract: This paper establishes some significant links between two areas: (i) relational parallel database systems; and (ii) the design and analysis of parallel algorithms. The paper begins with a fundamental but very simple observation: implementing a Join operation in the context of relational parallel database systems is at least as expensive as implementing an arbitrary PRAM computation. Thus, the efficiency with which a given parallel computer can support a parallel relational database where Joins are fairly frequent is strongly related to the efficiency with which that computer can support the PRAM as one of its program-mer's models. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, A. K. Chandra and M. Snir. </author> <title> On communication latency in PRAM computations. </title> <booktitle> In 1st Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pp. 11-21, </pages> <year> 1989. </year>
Reference-contexts: This model is obtained by suitably modifying the PRAM model, and can be viewed as a refinement of previously defined models. The Block PRAM model of <ref> [1] </ref> models blocking but assumes unlimited bandwidth; the LogP model [4] models bandwidth limitations but does not model blocking. For suitable choices of the parameters of our model we obtain either the Block PRAM or a PRAM-based alternative to the LogP model. <p> Secondly, even a communication rate of m words per step can only be achieved if each processor that accesses shared memory reads b "useful" words in each series of b steps. This is similar to the Block PRAM <ref> [1] </ref>. Access to memory and other assumptions: For ease of exposition we will assume a CRCW access to memory, allowing both concurrent reads and concurrent writes.
Reference: [2] <author> G. E. Blelloch, B. M. Maggs and G. L. Miller. </author> <title> The hidden cost of low bandwidth communication. In Developing a Computer Science Agenda for High-Performance Computing, </title> <editor> U. Vishkin (edi-tor), </editor> <publisher> ACM Press, </publisher> <year> 1994, </year> <pages> 158 pages. </pages>
Reference-contexts: Previously, a call for increase in communication-intensiveness of parallel systems came in the context of ease of parallel programming, as claimed in <ref> [2] </ref>, and for solving efficiently several elementary non-numeric problems in parallel, as proven in [8]. The main technical contribution of this paper is derived in Section 3, where an algorithm for the Join operation is given and analyzed.
Reference: [3] <author> R. Cole and U. Vishkin. </author> <title> Deterministic coin toss ing with applications to optimal parallel list ranking. </title> <journal> Information and Control, </journal> <volume> 70 (1986), </volume> <pages> pp, 32-53. </pages>
Reference-contexts: Proof. The algorithm proceeds by O (1) passes of radix sort with radix r n=p. Each pass is an instance of the Cole-Vishkin prefix sums sort <ref> [3, Section 2.3] </ref> and can be implemented in our model with O (n) work using Lemma 1 and Lemma 3. The details are omitted. 3 An Output-sensitive Parallel Join Algorithm In this section we will give an output-sensitive algorithm for the Join of two n-tuple relations.
Reference: [4] <author> D. Culler, R. Karp, D. Patterson, A. Sahay, K. Schauser, E. Santos, R. Subramonian and T. von Eicken. </author> <title> LogP: towards a realistic model of parallel computation. </title> <type> TR UCB/CS/92 71, </type> <institution> University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: This model is obtained by suitably modifying the PRAM model, and can be viewed as a refinement of previously defined models. The Block PRAM model of [1] models blocking but assumes unlimited bandwidth; the LogP model <ref> [4] </ref> models bandwidth limitations but does not model blocking. For suitable choices of the parameters of our model we obtain either the Block PRAM or a PRAM-based alternative to the LogP model.
Reference: [5] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA, </address> <year> 1990. </year>
Reference-contexts: Proof. We first describe how to compute the signatures. It suffices to choose h randomly from a 2-universal family of hash functions <ref> [5, pp. 229-231] </ref> mapping attribute values to the range 1::m, for m = n 3 . It is then immediate that the probability of there being no collisions is 1 1=n, and we therefore assume that no collisions occur.
Reference: [6] <author> D. DeWitt and J. Gray. </author> <title> Parallel database sys tems: the future of high-performance data base systems. </title> <journal> Comm. of the ACM, </journal> <volume> 35 </volume> <pages> 85-98, </pages> <year> 1992. </year>
Reference-contexts: The advent of multiprocessors, specifically those based on inexpensive processors with local memories ("shared-nothing" architectures), has mitigated the above bottleneck by providing increased bandwidth between processing elements and memories. This has already led <ref> [6] </ref> to pronounce parallel database systems a success. In this paper we exam fl Department of Computer Science, King's College London, Strand, London WC2R 2LS, UK. Part of this work was done while the author was at UMIACS. <p> In Section 1.1, we establish a very simple, yet fundamental, connection between two research activities which so far have been considered rather separate: * Relational databases, and in particular the Join operation, and their implementation on parallel computer systems. For more on this issue see <ref> [6] </ref>. * Emulating the PRAM programmer's model for general-purpose parallel computing on parallel computing systems, i.e., implementing a "virtual PRAM" on such systems. For more on the role that the PRAM could play as a programmer's model for parallel computing, see the position paper [11]. <p> For more on the role that the PRAM could play as a programmer's model for parallel computing, see the position paper [11]. Why is this connection surprising? According to <ref> [6] </ref>, the success of parallel database systems refutes a 1983 thesis, due to Boral and De-Witt, which predicted the demise of (special-purpose) database machines.
Reference: [7] <author> J. F. J aJ a and K. W. Ryu. </author> <title> The block distributed memory model for shared memory multiprocessors. </title> <booktitle> In Proc. 8th IPPS, </booktitle> <year> 1994, </year> <pages> 752-756. </pages>
Reference-contexts: The considerable price paid for this improvement however is that the routing takes twice as long. We should point out that several other papers have utilized this idea to come up with randomized routing algorithms. In particular, Lemma 2 is similar in spirit to an algorithm given by <ref> [7] </ref>. In what follows, an event which occurs with probability of the form 1 1=p ff for some constant ff &gt; 0, is referred to as occurring with high probability, and abbreviated as whp.
Reference: [8] <author> Y. Mansour, N. Nisan and U. Vishkin. </author> <title> Trade-offs between communication throughput and parallel time. </title> <booktitle> In Proc. 26th Annual ACM Symp. on Theory of Computing, </booktitle> <year> 1994, </year> <pages> 372-381. </pages>
Reference-contexts: Previously, a call for increase in communication-intensiveness of parallel systems came in the context of ease of parallel programming, as claimed in [2], and for solving efficiently several elementary non-numeric problems in parallel, as proven in <ref> [8] </ref>. The main technical contribution of this paper is derived in Section 3, where an algorithm for the Join operation is given and analyzed.
Reference: [9] <author> K. Mehlhorn and U. Vishkin. </author> <title> Randomized and deterministic simulations of PRAMs by parallel machines with restricted granularity of parallel memories. </title> <journal> Acta Informatica, </journal> <volume> 21 </volume> <pages> 339-374, </pages> <year> 1984. </year>
Reference-contexts: of data appears to be a mainstream technique for performing Joins and other database operations on shared-nothing architectures, hash partitioning of memory addresses among the local memories of parallel processors is an integral part of general methods for emulating a PRAM program-mer's model on similar shared-nothing architectures, as suggested in <ref> [9] </ref>. Also, it is well known that relational databases can be thought of as associative memories.
Reference: [10] <author> L. G. Valiant and G. J. Brebner. </author> <title> Universal schemes for parallel communication. </title> <booktitle> In Proc. 13th ACM STOC, </booktitle> <pages> pp. 263-277, </pages> <year> (1981). </year>
Reference-contexts: This result can be generalized to smaller powers of p. We distinguish between average-case algorithms and randomized algorithms for this problem. The former work only under assumptions about the input distribution, whereas the latter work well on every input with high probability. A fundamental observation made by <ref> [10] </ref> is that one can obtain a good, and somewhat counter-intuitive, randomized algorithm from a good average-case algorithm by a two-phase routing scheme: first we route every word to a randomly chosen intermediate processor and then from the randomly chosen intermediate processor to the correct final destination.
Reference: [11] <author> U. Vishkin. </author> <title> A case for the PRAM as a standard programmer's model. </title> <booktitle> In Proc. Workshop on Parallel Architectures and Their Efficient Use: State of the Art and Perspectives, First Heinz-Nixdorf Symposium, Paderborn, </booktitle> <address> Germany, </address> <month> November 11-13, </month> <year> 1992, </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 678, </volume> <year> 1993, </year> <pages> 11-19. </pages>
Reference-contexts: For more on the role that the PRAM could play as a programmer's model for parallel computing, see the position paper <ref> [11] </ref>. Why is this connection surprising? According to [6], the success of parallel database systems refutes a 1983 thesis, due to Boral and De-Witt, which predicted the demise of (special-purpose) database machines.
References-found: 11

