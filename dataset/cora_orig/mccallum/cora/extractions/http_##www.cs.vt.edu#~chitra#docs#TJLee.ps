URL: http://www.cs.vt.edu/~chitra/docs/TJLee.ps
Refering-URL: http://www.cs.vt.edu/~chitra/expert.html
Root-URL: http://www.cs.vt.edu
Title: Chitra93: a Tool to Analyze System Behavior by Visualizing and Modeling Ensembles of Traces  
Author: by Timothy J. Lee c flTimothy J. Lee and VPI SU 
Degree: submitted to the faculty of the  in partial fulfillment of the requirements for the degree of MASTER OF SCIENCE in Computer Science  APPROVED: Dr. Marc Abrams, Chairman Dr. Richard Nance Dr. Cal Ribbens  
Date: 1994  April, 1994  
Affiliation: Project  Virginia Polytechnic Institute and State University  Blacksburg, Virginia  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abrams. </author> <title> Beyond software performance visualzation. </title> <type> Technical Report TR 94-07, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Fourth, three transformations that simplify ensembles are defined. Chitra93 actually has four transformations, but only three will be discussed. The fourth one is a set of operations called projections, discussed in <ref> [1] </ref>. 3.1 State Mappings Chitra93 defines a random variable X that maps all system states in the ensemble to non-negative integers, called model states. Although traces contain system states, Chi-tra93 does not work on system states directly. <p> Let the domain of t be the interval bounded by the entry times of the first system state and the last system state in a trace file. Then X (t) represents the trace file as the realization of a stochastic process <ref> [1] </ref>. An ensemble is thus a set of realizations of X (t). Let m 0 denote the maximum model state when an ensemble is first opened. Initially, the value of any model state M in the range of X is bounded by 0 M m 0 . <p> Pattern aggregation transform replaces each occurrence of the pattern (or the sequence of model states specified by the user through a bounding box) in the model state sequence with model state m 1 + 1. The following illustrates the steps for analyzing ensembles of traces with Chitra93 (from <ref> [1] </ref>): 1. open an ensemble of traces, 2. apply transforms to simplify traces, 3. decide if traces are homogeneous (If traces are not homogeneous, partition the ensemble into multiple homogeneous sub-ensembles and repeat the process from step 1 for each sub-ensemble.), 4. apply transforms to further simplify traces (optional), and 5. <p> For each sub-ensemble of homogeneous traces, a model that fits the sub-ensemble will be useful to better understand the sub-ensemble's behavior. Recall that Chitra93 views a sub-ensemble of traces as a set of realizations of a stochastic process X (t) <ref> [1] </ref>. Chitra93 models X (t) as time-invariant, continuous time semi-Markov chain [3]. Only the model states that currently exist in the ensemble will be used to compute the model. 38 CHAPTER 4. <p> The number on the first line in each view (0, 1, 2, 3) are model states. The numbers in the second line in square brackets ("[ ]") are best predicting positions. For example, the <ref> [1] </ref> under 2 in 0.0 in Figure 4.14 means the state following (or in the +1 position) state 2 best predicts state 2.
Reference: [2] <author> M. Abrams, N. Doraswamy, and A. Mathur. Chitra: </author> <title> Visual analysis of parallel and distributed programs in the time, event, and frequency domain. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 3(6) </volume> <pages> 672-685, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Examples are performance visualization tools (x2.1) and theoretical models (x2.2). Although performance visualization tools and theoretical models can provide new insights to the system under study, they have several limitations that restrict their applicability (x2.1.6). This project introduces Chitra93 1 <ref> [2, 6, 5] </ref>, which offers the benefits of both visualization methods and theoretical modeling, while alleviating their limitations. The following terminology must be defined before the problem statement is introduced. A process, or thread, is a code fragment scheduled by an operating system.
Reference: [3] <author> U. N. Bhat. </author> <title> Elements of Applied Stochastic Processes. </title> <publisher> John Wiley, </publisher> <address> New York, 2nd edition, </address> <year> 1984. </year>
Reference-contexts: Recall that Chitra93 views a sub-ensemble of traces as a set of realizations of a stochastic process X (t) [1]. Chitra93 models X (t) as time-invariant, continuous time semi-Markov chain <ref> [3] </ref>. Only the model states that currently exist in the ensemble will be used to compute the model. 38 CHAPTER 4.
Reference: [4] <author> H. T. Cadiz. </author> <title> The development of a chaid-based model for chitra93. </title> <type> Master's thesis, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Ganugapati [6] Build production version Add Text view Allow multiple views of 1 trace T. Lee Add semi-Markov model Chitra93 T. Lee Stabilize Chitra92 Allow ensemble of traces Add homogeneity tests Build a model fitting an ensemble H. Cadiz <ref> [4] </ref> Relax Markov assumption with CHAID-based model Chitra9x A. Batongbacal Build open and and object-oriented version for parallel and distributed execution A. Mathur Build non-stationary models permitted by the specifications, the system contains errors. <p> Readers who are interested in this model are referred to Cadiz's project report <ref> [4] </ref>. <p> For example, the [1] under 2 in 0.0 in Figure 4.14 means the state following (or in the +1 position) state 2 best predicts state 2. The following parameters, discussed in depth in Cadiz's project report <ref> [4] </ref>, are used to generate the models: "All" states, "Free" merge method, "Independent" analysis, 1 percent significance level, and "Analyzing future" dependent position.
Reference: [5] <author> N. Doraswamy. Chitra: </author> <title> A visualization system to analyze the dynamics of parallel programs. </title> <type> Master's thesis, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: Examples are performance visualization tools (x2.1) and theoretical models (x2.2). Although performance visualization tools and theoretical models can provide new insights to the system under study, they have several limitations that restrict their applicability (x2.1.6). This project introduces Chitra93 1 <ref> [2, 6, 5] </ref>, which offers the benefits of both visualization methods and theoretical modeling, while alleviating their limitations. The following terminology must be defined before the problem statement is introduced. A process, or thread, is a code fragment scheduled by an operating system. <p> P5. Test the correctness of a system by comparing the computed empirical model with the specifications. If the model indicates the existence of some transitions that are not 5 CHAPTER 1. INTRODUCTION Name Author Contributions Chitra91 N.Doraswamy <ref> [5] </ref> Build prototype version Add 2D and FFT views of 1 trace Chitra92 K. Ganugapati [6] Build production version Add Text view Allow multiple views of 1 trace T. Lee Add semi-Markov model Chitra93 T. <p> In other words, this method can find the existence of some bugs, but it cannot guarantee the system is free from bugs. 1.2 How This Work Fits into the Chitra Project Starting in 1989 as a prototype <ref> [5] </ref>, Chitra has since evolved into a tool that is used in both inside and outside of academia. The history of its development, including the planned future enhancements, is shown in Figure 1.1.
Reference: [6] <author> K. Ganugapati. </author> <title> The design and implementation of Chitra92, a system to empirically model concurrent software performance. </title> <type> Master's thesis, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24060, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Examples are performance visualization tools (x2.1) and theoretical models (x2.2). Although performance visualization tools and theoretical models can provide new insights to the system under study, they have several limitations that restrict their applicability (x2.1.6). This project introduces Chitra93 1 <ref> [2, 6, 5] </ref>, which offers the benefits of both visualization methods and theoretical modeling, while alleviating their limitations. The following terminology must be defined before the problem statement is introduced. A process, or thread, is a code fragment scheduled by an operating system. <p> If the model indicates the existence of some transitions that are not 5 CHAPTER 1. INTRODUCTION Name Author Contributions Chitra91 N.Doraswamy [5] Build prototype version Add 2D and FFT views of 1 trace Chitra92 K. Ganugapati <ref> [6] </ref> Build production version Add Text view Allow multiple views of 1 trace T. Lee Add semi-Markov model Chitra93 T. Lee Stabilize Chitra92 Allow ensemble of traces Add homogeneity tests Build a model fitting an ensemble H. Cadiz [4] Relax Markov assumption with CHAID-based model Chitra9x A. <p> In short, Chitra93 extends the pattern aggregation transform by processing each trace in the ensemble sequentially. Hence this discussion is intentionally kept brief. Readers who are interested in learning more are referred to <ref> [6, pages 43-47] </ref>. <p> occupancy time is t occu = x+y1 X (E i+1 E i ): Clipping The clipping transform is described informally because there is no difference in the way clipping functions between applying it to one trace and applying it to one ensemble of traces; a more formal statement appears in <ref> [6, pages 47-51] </ref>. The end points of the bounding box drawn on one ensemble member trace's 2D view specify beginning and ending times (2D Time) or event numbers (2D Event).
Reference: [7] <author> A. J. Goldberg and J. L. Hennessy. </author> <title> Mtool: An integrated system for performance debugging shared memory applications. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 4(1) </volume> <pages> 28-40, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The user can control the way events are displayed in the event view. Events do no have attached semantics; the user has to provide all event information in the event definition file. 2.1.3 Mtool Mtool <ref> [7] </ref> finds bottlenecks for shared memory parallel programs. Each program is first instrumented with low overhead routines, and then the instrumented program is executed to collect trace data.
Reference: [8] <author> I. Gorton. </author> <title> Parallel program design using Petri nets. </title> <journal> Concurrency Practice and Experience, </journal> <volume> 5(2) </volume> <pages> 87-104, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The analyst studies the source code and then builds a theoretical model that hypothesize the behavior of the system. Some examples are Petri nets <ref> [8, 10] </ref> and stochastic processes [9, pages 1-83]. Many analysts build theoretical models to gain understanding of their systems and to diagnose performance. Although theoretical models can assist in system understanding, they do not analyze traces and thus do not address the problem under study here.
Reference: [9] <author> P. G. Hoel, S. C. Port, and C. J. Stone. </author> <title> Introduction to Stochastic Processes. </title> <publisher> Houghton Mi*in Company, </publisher> <address> Boston, </address> <year> 1972. </year>
Reference-contexts: The analyst studies the source code and then builds a theoretical model that hypothesize the behavior of the system. Some examples are Petri nets [8, 10] and stochastic processes <ref> [9, pages 1-83] </ref>. Many analysts build theoretical models to gain understanding of their systems and to diagnose performance. Although theoretical models can assist in system understanding, they do not analyze traces and thus do not address the problem under study here.
Reference: [10] <author> M. A. Holliday and M. K. Vernon. </author> <title> A generalized timed Petri net model for performance analysis. </title> <booktitle> In Proc. Int. Workshop on Timed Petri Nets, </booktitle> <month> July </month> <year> 1985. </year>
Reference-contexts: The analyst studies the source code and then builds a theoretical model that hypothesize the behavior of the system. Some examples are Petri nets <ref> [8, 10] </ref> and stochastic processes [9, pages 1-83]. Many analysts build theoretical models to gain understanding of their systems and to diagnose performance. Although theoretical models can assist in system understanding, they do not analyze traces and thus do not address the problem under study here.
Reference: [11] <author> R. E. Kirk. </author> <title> Statistical Issues: A Reader for the Behavioral Sciences. </title> <publisher> Brooks/Cole Publishing, </publisher> <address> Monterey, CA, </address> <year> 1972. </year>
Reference-contexts: Some detail information are omitted in this discussion (for example, the computation of ff and fi), readers who are interested learning more statistics are referred to <ref> [11, 16, 20] </ref>. The KW rank sum test checks if sample populations are drawn from identical distributions. If the null hypothesis H 0 is accepted, then the traces containing these sample populations are homogeneous. The computation is based on the occupancy times of a user-specified state in the sub-ensemble.
Reference: [12] <author> T. Lehr, Z. Segall, and et al. </author> <title> Visualizing performance debugging. </title> <journal> IEEE Computer, </journal> <volume> 22(10) </volume> <pages> 38-51, </pages> <month> October </month> <year> 1989. </year> <note> 66 REFERENCES </note>
Reference-contexts: The output data can then be visualized by using one of many Pablo's visualization displays. In addition, a unique feature of Pablo is its ability to present data in sonic form. 2.1.5 PIE PIE (Parallel Programming and Instrumentation Environment) <ref> [12] </ref> provides a framework for predicting, detecting, and avoiding performance degradation. It provides an interactive instrumentation subsystem which allows the user to select the desired constructs for data collection.
Reference: [13] <author> A. D. Malony. </author> <title> JED: Just an event display. </title> <editor> In M. Simmons and R. Koskela, editors, </editor> <booktitle> Performance Instrumentation and Visualization, </booktitle> <pages> pages 99-114. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: RELATED WORK path analysis. IPS-2 can partition the program into phases so that the critical path analysis can be performed on each phase. In addition, IPS-2 can link a performance bottleneck back to the source code responsible for the bottleneck. 2.1.2 JED JED (Just an Event Display) <ref> [13] </ref> displays trace data in a simple event display (Gantt chart). JED is user-customizable so that a user can choose a user-supplied event display in place of the default Gantt chart. The user can control the way events are displayed in the event view.
Reference: [14] <author> U. Manber. </author> <title> Introduction to Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference: [15] <author> B. Miller, M. Clark, J. Hollingsworth, S. Kierstead, S. Lim, and T. Torzewski. IPS-2: </author> <title> The second generation of a parallel program measurement system. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 1(2) </volume> <pages> 206-217, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Because there is very little overlap between the problems they address and the problems discussed in the problem statement, each system is only briefly discussed. 2.1.1 IPS-2 IPS-2 <ref> [15] </ref> diagnoses performance problems. It is the only other tool that comes close to modeling traces. The user supplies detailed descriptions of the program structures, and IPS-2 builds a program activity graph which contains acyclic paths that have embedded program performance data.
Reference: [16] <author> Lyman Ott. </author> <title> An Introduction to Statistical methods and Data Analysis. </title> <address> Pws-Kent, Boston, </address> <year> 1988. </year>
Reference-contexts: One should not construct a model for the ensemble that contains multiple behaviors; to do so will result in a model that poorly fits the ensemble. The ensemble should first be tested for homogeneity (see [20, pages 346-348, pages 615-632] or <ref> [16, pages 422-426] </ref>) to see if it contains multiple behaviors. It can then be partitioned into mutually exclusive and exhaustive subsets such that each subset contains a single behavior. Traces in each of the resulting subsets behave similarly and are said to be homogeneous. <p> Some detail information are omitted in this discussion (for example, the computation of ff and fi), readers who are interested learning more statistics are referred to <ref> [11, 16, 20] </ref>. The KW rank sum test checks if sample populations are drawn from identical distributions. If the null hypothesis H 0 is accepted, then the traces containing these sample populations are homogeneous. The computation is based on the occupancy times of a user-specified state in the sub-ensemble. <p> Without the compensation algorithm, the result of the KW test may still be correct when there is a large number of ties. Ott shows an example where more than half of the observations are involved in tied ranks: the H and H 0 statistics are nearly the same <ref> [16, pages 422-426] </ref>. CHAPTER 5. CONCLUSIONS 4. Two features can be added to CHAID-based method to help the partitioning process: (1) Instead of having to compare the lists of best predicting positions from different views, Chitra9x can generate a table consisting of these lists.
Reference: [17] <author> T. R. Puzak. </author> <title> Cache-Memory Design. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <year> 1985. </year>
Reference: [18] <author> D. A. Reed, R. A. Aydt, T. M. Madhyastha, R. J. Noe, K. A. Shields, and B. W. Schwartz. </author> <title> The Pablo performance analysis environment. </title> <institution> Dept. of Comp. Sci., Univ. of IL, </institution> <year> 1992. </year>
Reference-contexts: Each program is first instrumented with low overhead routines, and then the instrumented program is executed to collect trace data. Because Mtool has the ability to detect memory bottlenecks, the analyst can then use Mtool to view compute time, memory, and synchronization bottlenecks. 2.1.4 Pablo Pablo <ref> [18] </ref> is a performance analysis environment that is both portable and scalable. As the parallel computer system increases in size, it is critical that the performance analysis environment also scales to take advantage of the increased system resources.
Reference: [19] <author> H. S. Stone. </author> <title> High-Performnce Computer Architecture. </title> <publisher> Addison-Wesley Publishing, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: Time is irrelevant to the analysis of some systems (e.g. memory address traces for cache design <ref> [19, pages 39-59] </ref>) and hence may not be a part of their traces; in such cases, the entry time sequence could simply be a sequence of increasing numbers.
Reference: [20] <author> R. E. Walpole and R. H. Myers. </author> <title> Probability and Statistics for Engineers and Scientists, volume 4th ed. </title> <publisher> Macmillan, </publisher> <address> New York, </address> <year> 1989. </year> <month> 67 </month>
Reference-contexts: One should not construct a model for the ensemble that contains multiple behaviors; to do so will result in a model that poorly fits the ensemble. The ensemble should first be tested for homogeneity (see <ref> [20, pages 346-348, pages 615-632] </ref> or [16, pages 422-426]) to see if it contains multiple behaviors. It can then be partitioned into mutually exclusive and exhaustive subsets such that each subset contains a single behavior. Traces in each of the resulting subsets behave similarly and are said to be homogeneous. <p> Some detail information are omitted in this discussion (for example, the computation of ff and fi), readers who are interested learning more statistics are referred to <ref> [11, 16, 20] </ref>. The KW rank sum test checks if sample populations are drawn from identical distributions. If the null hypothesis H 0 is accepted, then the traces containing these sample populations are homogeneous. The computation is based on the occupancy times of a user-specified state in the sub-ensemble. <p> For example, the analysis of variance is more efficient (i.e. it has more power) than the KW test if the data are independent random samples and are normally distributed, and variances of sample populations are equal <ref> [20, pages 615-616] </ref>. Despite all the benefits of this test, one should be aware of the shortcoming of the current implementation: the result is valid only when ties do not occur as a large percentage of all observations. Otherwise, the result may be suspect.
References-found: 20

