URL: http://robotics.eecs.berkeley.edu/~lygeros/Postscript/morse.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~lygeros/Publications/Morse.html
Root-URL: 
Email: lygeros, godbole, sastry@eecs.berkeley.edu  
Title: Hybrid Controller Design for Multi-Agent Systems  
Author: John Lygeros, Datta N. Godbole and Shankar Sastry 
Address: Berkeley, CA 94720  
Affiliation: Intelligent Machines and Robotics Laboratory University of California, Berkeley  
Abstract: A design and verification methodology for hybrid dynamical systems, based on optimal control and game theory, is presented. The hybrid design is seen as a game between two players. One is the disturbances that enter the dynamics. The disturbances can encode the actions of other agents (in a multi-agent setting), the actions of high level controllers or the usual unmodeled environmental disturbances. The second player is the control, which is to be chosen by the designer. The two players compete over a cost function that encodes the properties that the closed loop hybrid system needs to satisfy (e.g. safety). The control "wins" the game if it can keep the system "safe" for any allowable disturbance. The solution to the game theory problem provides the designer with continuous controllers as well as sets of safe states where the control "wins" the game. The sets of safe sets can be used to construct an interface that guarantees the safe operation of the combined hybrid system. The motivating example for our work is Automated Highway Systems. We show how to cast the lower level, multi-agent vehicle following problem in the game theoretic setting and give an algorithm that can produce a safe design.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Z. Har'El and R. Kurshan, </author> <title> Cospan User's Guide. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1987. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN <ref> [1] </ref>, HSIS [2], STATEMATE [3], etc.). They have proved very successful in discrete problems such as communication protocols [4] and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics.
Reference: [2] <author> Adnan Aziz, et al., "HSIS: </author> <title> a BDD-based environment for formal verifica-tion," </title> <booktitle> in ACM/IEEE International Conference on CAD, </booktitle> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN [1], HSIS <ref> [2] </ref>, STATEMATE [3], etc.). They have proved very successful in discrete problems such as communication protocols [4] and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics.
Reference: [3] <author> M. Heymann, </author> <title> "Hierarchical decomposition of hybrid systems." </title> <type> (preprint), </type> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN [1], HSIS [2], STATEMATE <ref> [3] </ref>, etc.). They have proved very successful in discrete problems such as communication protocols [4] and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics.
Reference: [4] <author> A. Hsu, F. Eskafi, S. Sachs, and P. Varaiya, </author> <title> "Protocol design for an automated highway system," Discrete Event Dynamic Systems, </title> <journal> vol. </journal> <volume> 2, no. 1, </volume> <pages> pp. 183-206, </pages> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN [1], HSIS [2], STATEMATE [3], etc.). They have proved very successful in discrete problems such as communication protocols <ref> [4] </ref> and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics.
Reference: [5] <author> R. Alur, C. Courcoubetis, and D. Dill, </author> <title> "Model checking for real-time systems," </title> <booktitle> Logic in Computer Science, </booktitle> <pages> pp. 414-425, </pages> <year> 1990. </year>
Reference-contexts: The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics. Theoretical results have established condi tions under which verification problems for systems with clocks can be solved computationally <ref> [5, 6] </ref>, and algorithms have been developed to implement the verification process (for example timed COSPAN [7] and KRONOS [8]). Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10].
Reference: [6] <author> R. Alur, C. Courcoubetis, T. A. Henzinger, and P. H. Ho, </author> <title> "Hybrid automaton: An algorithmic approach to the specification and verification of hybrid systems," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, eds.), </editor> <volume> no. </volume> <booktitle> 736 in LNCS, </booktitle> <pages> pp. 209-229, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics. Theoretical results have established condi tions under which verification problems for systems with clocks can be solved computationally <ref> [5, 6] </ref>, and algorithms have been developed to implement the verification process (for example timed COSPAN [7] and KRONOS [8]). Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10]. <p> Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions <ref> [11, 6] </ref>. Progress in the direction of automatic verification has been impeded for two fundamental reasons, undecidability and computational complexity. To guarantee that an automatic verification algorithm will terminate in finite number of steps with an answer, the system needs to satisfy very stringent technical requirements [12].
Reference: [7] <author> R. P. Kurshan, </author> <title> Computer-aided verification of coordinating processes; the automata-theoretic approach. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
Reference-contexts: Theoretical results have established condi tions under which verification problems for systems with clocks can be solved computationally [5, 6], and algorithms have been developed to implement the verification process (for example timed COSPAN <ref> [7] </ref> and KRONOS [8]). Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions [11, 6].
Reference: [8] <author> C. Daws and S. Yovine, </author> <title> "Two examples of verification of multirate timed automata with KRONOS," </title> <booktitle> in Proc. 1995 IEEE Real-Time Systems Symposium, </booktitle> <address> RTSS'95, (Pisa, Italy), </address> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Theoretical results have established condi tions under which verification problems for systems with clocks can be solved computationally [5, 6], and algorithms have been developed to implement the verification process (for example timed COSPAN [7] and KRONOS <ref> [8] </ref>). Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions [11, 6].
Reference: [9] <author> F. Balarin, </author> <title> Iterative Methods for Formal Verification of Digital Systems. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: Verification of timed systems has proved useful in applications such as digital circuit verification <ref> [9] </ref> and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions [11, 6]. Progress in the direction of automatic verification has been impeded for two fundamental reasons, undecidability and computational complexity.
Reference: [10] <author> F. Balarin, K. Petty, and A. L. Sangiovanni-Vincentelli, </author> <title> "Formal verification of the PATHO real-time operating system," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 2459-2465, </pages> <year> 1994. </year>
Reference-contexts: Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software <ref> [10] </ref>. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions [11, 6]. Progress in the direction of automatic verification has been impeded for two fundamental reasons, undecidability and computational complexity. <p> On the other hand, relatively simple hybrid systems lead to very large numbers of discrete states when looked at from the point of view of automatic verification. Even though efficient algorithms exist, the problem may still be prohibitively large for current computers <ref> [10] </ref>. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed [13, 14, 15]. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design.
Reference: [11] <author> A. Puri and P. Varaiya, </author> <title> "Decidability of hybrid systems with rectangular differential inclusions," </title> <booktitle> in Computer Aided Verification, </booktitle> <pages> pp. 95-104, </pages> <year> 1994. </year>
Reference-contexts: Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions <ref> [11, 6] </ref>. Progress in the direction of automatic verification has been impeded for two fundamental reasons, undecidability and computational complexity. To guarantee that an automatic verification algorithm will terminate in finite number of steps with an answer, the system needs to satisfy very stringent technical requirements [12].
Reference: [12] <author> T. Henzinger, P. Kopke, A. Puri, and P. Varaiya, </author> <title> "What's decidable about hybrid automata," </title> <booktitle> in STOCS, </booktitle> <year> 1995. </year>
Reference-contexts: Progress in the direction of automatic verification has been impeded for two fundamental reasons, undecidability and computational complexity. To guarantee that an automatic verification algorithm will terminate in finite number of steps with an answer, the system needs to satisfy very stringent technical requirements <ref> [12] </ref>. On the other hand, relatively simple hybrid systems lead to very large numbers of discrete states when looked at from the point of view of automatic verification. Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [10].
Reference: [13] <author> A. Deshpande, </author> <title> Control of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, University of California, Berkeley, California, </institution> <year> 1994. </year>
Reference-contexts: Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [10]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [13, 14, 15] </ref>. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. Design Approach We start by modeling the systems dynamics at the continuous level.
Reference: [14] <author> M. S. Branicky, V. S. Borkar, and S. K. Mitter, </author> <title> "A unified framework for hybrid control: Background, model and theory," </title> <type> Tech. Rep. </type> <institution> LIDS-P-2239, Laboratory for Information and Decision Systems, Massachusetts Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [10]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [13, 14, 15] </ref>. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. Design Approach We start by modeling the systems dynamics at the continuous level.
Reference: [15] <author> A. Nerode and W. Kohn, </author> <title> "Multiple agent hybrid control architecture," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, eds.), </editor> <volume> no. </volume> <booktitle> 736 in LNCS, </booktitle> <pages> pp. 297-316, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Even though efficient algorithms exist, the problem may still be prohibitively large for current computers [10]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [13, 14, 15] </ref>. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. Design Approach We start by modeling the systems dynamics at the continuous level.
Reference: [16] <author> J. C. Doyle, K. Glover, P. P. Khargonekar, and B. A. Francis, </author> <title> "State-space solutions to standard H 2 and H 1 control problems," </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 831-847, </pages> <year> 1989. </year>
Reference-contexts: Game theoretic ideas have already been applied in this context to problems with disturbances of Class 1 and quadratic cost functions. The resulting controllers are the so called H 1 or L 2 optimal controllers (see for example <ref> [16] </ref>). We will try to extend these ideas to the multiagent, hybrid setting. Limitations The main limitation of the application of gaming and optimal control ideas to hybrid design is that the resulting problems are usually very hard to solve analytically.
Reference: [17] <author> D. N. Godbole and J. Lygeros, </author> <title> "Longitudinal control of the lead car of a platoon," </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> vol. 43, no. 4, </volume> <pages> pp. 1125-1135, </pages> <year> 1994. </year>
Reference-contexts: For our purposes the details of the nonlinear functions b A and a A are not important. Following the designs of <ref> [17] </ref>, we will assume that feedback linearization has already been carried out, i.e.: v A (t) = a A ( _x A ) x A = u We will design controllers for the resulting linear dynamics.
Reference: [18] <author> J. K. Hedrick, D.McMahon, V. Narendran, and D. Swaroop, </author> <title> "Longitudinal vehicle controller design for IVHS system," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 3107-3112, </pages> <year> 1991. </year>
Reference-contexts: We will assume that the acceleration of vehicle B can not be measured and is not communicated to vehicle A (as it is, for example, for the platoon following scenario of <ref> [18] </ref>). The vehicles are also equipped with communication devices. It is assumed that they will only be used to exchange discrete messages for coordinating the agent operation.
Reference: [19] <author> F. M. Callier and C. A. Desoer, </author> <title> Linear System Theory. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Efficiency: J 3 (x 0 ; u; d) = 0 where y d is the desired fixed point for a given maneuver and P is positive definite. The solution to the system equations can be obtained using the variation of constants formula <ref> [19] </ref>: x (t) = e At x 0 + 0 Z t e A (tt) Dd (t )dt By the fact that A is nilpotent (A 3 = 0) we obtain: x (t) = 6 4 1 + tx 0 x 0 t 2 x 0 3 + tx 0 tx
Reference: [20] <author> T. Basar and G. J. Olsder, </author> <title> Dynamic Non-cooperative Game Theory. </title> <publisher> Academic Press, </publisher> <editor> 2nd ed., </editor> <year> 1994. </year>
Reference-contexts: Future work in this area involves deriving conditions under which the continuous problems are solvable (saddle and optimal solutions exist, etc.), as well as the techniques for designing the higher (discrete) layer. We hope to be able to extend older results in game theory <ref> [20] </ref> and optimal control [21] in order to solve the problems in the continuous domain and also to develop algorithms for determining the sets of guaranteed performance, V i . The problem of designing the discrete layer also involves the choice of descriptive language at the discrete layer.
Reference: [21] <author> L. Berkovitz, </author> <title> Optimal Control Theory. </title> <publisher> Springer-Verlag, </publisher> <year> 1974. </year>
Reference-contexts: Future work in this area involves deriving conditions under which the continuous problems are solvable (saddle and optimal solutions exist, etc.), as well as the techniques for designing the higher (discrete) layer. We hope to be able to extend older results in game theory [20] and optimal control <ref> [21] </ref> in order to solve the problems in the continuous domain and also to develop algorithms for determining the sets of guaranteed performance, V i . The problem of designing the discrete layer also involves the choice of descriptive language at the discrete layer.
References-found: 21

