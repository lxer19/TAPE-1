URL: http://www.cs.ucsb.edu/~martin/paper/lcpc91.ps
Refering-URL: http://www.cs.ucsb.edu/~martin/paper/index.html
Root-URL: http://www.cs.ucsb.edu
Title: Hierarchical Concurrency in Jade  
Author: Daniel J. Scales, Martin C. Rinard, Monica S. Lam, and Jennifer M. Anderson 
Note: This research was supported in part by DARPA contract N00014-87-K-0828.  
Address: CA 94305  
Affiliation: Computer Systems Laboratory Stanford University,  
Abstract: Jade is a data-oriented language for parallelizing programs written in a serial, imperative programming language such as C, FORTRAN, or C++. A Jade programmer simply augments the program with assertions specifying how the program accesses data. The Jade implementation dynamically interprets these assertions to execute the program concurrently while enforcing the program's data dependence constraints. In a previous paper [4], we show how programmers use Jade to express concurrency patterns such as dynamic task graphs and pipelining. In this paper, we show how Jade programmers can naturally express hierarchical concurrency patterns by specifying how a program uses hierarchically structured data. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Carriero and D. Gelernter. </author> <title> How to Write Parallel Programs: A Guide to the Perplexed. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 323-357, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: The programmer dynamically specifies each task's effects when it is created, thus allowing Jade to exploit data-dependent concurrency which can only be determined at run-time. Jade's data-oriented approach to concurrency contrasts with the control-oriented approach provided by many parallel programming languages <ref> [1, 2, 3, 5] </ref>. A programmer using one of these languages directly implements the program's global concurrency structure using low-level constructs to create and coordinate parallel tasks. To synchronize these tasks correctly, the programmer must establish explicit connections between otherwise unrelated pieces of the program that access the same data.
Reference: [2] <author> J. J. Dongarra and D. C. Sorenson. </author> <title> A portable environment for developing parallel FORTRAN programs. </title> <journal> Parallel Computing, </journal> <volume> 5(1 </volume> & 2):175-186, 1987. 
Reference-contexts: The programmer dynamically specifies each task's effects when it is created, thus allowing Jade to exploit data-dependent concurrency which can only be determined at run-time. Jade's data-oriented approach to concurrency contrasts with the control-oriented approach provided by many parallel programming languages <ref> [1, 2, 3, 5] </ref>. A programmer using one of these languages directly implements the program's global concurrency structure using low-level constructs to create and coordinate parallel tasks. To synchronize these tasks correctly, the programmer must establish explicit connections between otherwise unrelated pieces of the program that access the same data.
Reference: [3] <author> Inmos Ltd. </author> <title> Occam Programming Manual. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1984. </year>
Reference-contexts: The programmer dynamically specifies each task's effects when it is created, thus allowing Jade to exploit data-dependent concurrency which can only be determined at run-time. Jade's data-oriented approach to concurrency contrasts with the control-oriented approach provided by many parallel programming languages <ref> [1, 2, 3, 5] </ref>. A programmer using one of these languages directly implements the program's global concurrency structure using low-level constructs to create and coordinate parallel tasks. To synchronize these tasks correctly, the programmer must establish explicit connections between otherwise unrelated pieces of the program that access the same data.
Reference: [4] <author> M. S. Lam and M. C. Rinard. </author> <title> Coarse-grain parallel programming in Jade. </title> <booktitle> In Proceedings of the Third ACM/SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Jade <ref> [4] </ref> is a language for parallelizing programs written in a serial, imperative programming language such as C, FORTRAN, or C++. Jade is an implicitly parallel language designed to express deterministic concurrency patterns that preserve the serial semantics of these programs. <p> The Jade implementation, not the programmer, extracts and enforces the global concurrency pattern implicit in the program's data usage. By requiring only local data usage information, Jade promotes modularity and simplifies parallel programming. In a previous paper <ref> [4] </ref>, we show how a Jade programmer can easily produce concur-rency patterns such as dynamic task graphs and pipelining by specifying how a program uses data. In this paper, we show how Jade programmers can naturally express hierarchical concurrency patterns by specifying how a program uses hierarchically structured data. <p> The Jade implementation assigns an operational meaning to Jade programs by using this data usage information to create concurrency and synchronization. In this section we present the Jade constructs, giving both the declarative and operational meanings. For a more in-depth presentation, see <ref> [4] </ref>. 3.1 With and Only With Jade programmers use the withth (pronounced "with and only with") construct to declare that a piece of code will execute with and only with a specified set of effects to shared objects: withth f effect specification g ( parameters for task body ) f task
Reference: [5] <author> United States Department of Defense. </author> <title> Reference Manual for the Ada programming language. DoD, </title> <address> Washington, D.C., </address> <month> January </month> <year> 1983. </year> <month> ANSI/MIL-STD-1815A. </month>
Reference-contexts: The programmer dynamically specifies each task's effects when it is created, thus allowing Jade to exploit data-dependent concurrency which can only be determined at run-time. Jade's data-oriented approach to concurrency contrasts with the control-oriented approach provided by many parallel programming languages <ref> [1, 2, 3, 5] </ref>. A programmer using one of these languages directly implements the program's global concurrency structure using low-level constructs to create and coordinate parallel tasks. To synchronize these tasks correctly, the programmer must establish explicit connections between otherwise unrelated pieces of the program that access the same data.
References-found: 5

