URL: ftp://ftp.netcom.com/pub/hb/hbaker/TInference.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: (818) 501-4956(818) 986-1360 (FAX)  
Title: Type Inferencer for Common Lisp-84  
Author: HENRY G. BAKER 
Keyword: Categories and Subject Descriptors: General Terms: compilers, data types, lattices, Boolean algebras, dataflow, static analysis, polymorphism. Additional Key Words and Phrases: Common Lisp, ML, type inference, interpreted language, compiled language.  
Address: 16231 Meadow Ridge Way, Encino, CA 91436  
Affiliation: Nimble Computer Corporation,  
Note: The Nimble Type Inferencer for Common Lisp-84 1989-1991 Nimble Computer Corporation 1 The Nimble  This work was supported in part by the U.S. Department of Energy Contract No. DE-AC03-88ER80663  
Abstract: We describe a framework and an algorithm for doing type inference analysis on programs written in full Common Lisp-84 (Common Lisp without the CLOS objectoriented extensions). The objective of type inference is to determine tight lattice upper bounds on the range of runtime data types for Common Lisp program variables and temporaries. Depending upon the lattice used, type inference can also provide range analysis information for numeric variables. This lattice upper bound information can be used by an optimizing compiler to choose more restrictive, and hence more efficient, representations for these program variables. Our analysis also produces tighter control flow information, which can be used to eliminate redundant tests which result in dead code. The overall goal of type inference is to mechanically extract from Common Lisp programs the same degree of representation information that is usually provided by the programmer in traditional strongly-typed languages. In this way, we can provide some classes of Common Lisp programs execution time efficiency expected only for more strongly-typed compiled languages. The Nimble type inference system follows the traditional lattice/algebraic data flow techniques [Kaplan80], rather than the logical/theorem-proving unification techniques of ML [Milner78]. It can handle polymorphic variables and functions in a natural way, and provides for "case-based" analysis that is quite similar to that used intuitively by programmers. Additionally, this inference system can deduce the termination of some simple loops, thus providing surprisingly tight upper lattice bounds for many loop variables. By using a higher resolution lattice, more precise typing of primitive functions, polymorphic types and case analysis, the Nimble type inference algorithm can often produce sharper bounds than unification-based type inference techniques. At the present time, however, our treatment of higher-order data structures and functions is not as elegant as that of the unification techniques. 
Abstract-found: 1
Intro-found: 1
Reference: <author> AdaLRM: </author> <title> Reference Manual for the Ada Programming Language. ANSI/MIL-STD-1815A-1983, </title> <type> U.S. </type> <institution> Government Printing Office, </institution> <address> Wash., DC, </address> <year> 1983. </year>
Reference: <author> Aho, Alfred V.; Sethi, Ravi; and Ullman, Jeffrey D. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference: <author> Baker92: Baker, Henry. </author> <title> "A Decision Procedure for Common Lisp's SUBTYPEP Predicate". </title> <booktitle> Lisp and Symbolic Computation 5,3 (Sept.1992), </booktitle> <pages> 157-190. </pages>
Reference: <author> Baker90b: Baker, Henry. </author> <title> "Unify and Conquer (Garbage, Updating, </title> <booktitle> Aliasing...) in Functional Languages". Proc. 1990 ACM Conference on Lisp and Functional Programming, </booktitle> <month> June </month> <year> 1990. </year>
Reference: <author> Baker90c: Baker, Henry. </author> <title> "Efficient Implementation of Bit-vector Operations in Common Lisp". </title> <booktitle> ACM Lisp Pointers 3,2-3-4 (April-June1990), </booktitle> <pages> 8-22. </pages>
Reference: <author> Bauer, Alan M., and Saal, Harry J. </author> <title> "Does APL really need runtime checking?" Software Practice and Experience, v.4, </title> <publisher> 1974,pp.129-138. </publisher>
Reference: <author> Beer, Randall D. </author> <title> "The compile-time type inference and type checking of Common Lisp programs: a technical summary". </title> <type> TR 88-116, Ctr. </type> <institution> for Automation and Intelligent Sys. Research, Case Western Reserve Univ., </institution> <note> May 1988; also LISP Pointers 1,2 (June-July 1987),5-11. </note>
Reference: <author> Bobrow, et al. </author> <title> "Common Lisp Object System Specification X3J13", </title> <journal> ACM SIGPLAN Notices, </journal> <note> v.23, Sept. 1988; also X3J13 Document 88-002R, </note> <month> June </month> <year> 1988. </year>
Reference: <author> Borning, Alan H. and Ingalls, Daniel H. H. </author> <title> "A Type Declaration and Inference System for Smalltalk" ACM POPL 9, </title> <year> 1982, </year> <month> pp.133-141. </month>
Reference: <author> Brooks, R., Gabriel, R., Steele, G. </author> <title> "S-1 Common Lisp Implementation". </title> <booktitle> Proc. of '82 ACM Symp. on Lisp and Funct. Prog., </booktitle> <month> (Aug. </month> <year> 1982),108-113. </year>
Reference: <author> Brooks, R., et al. </author> <title> "Design of an Optimizing, Dynamically Retargetable Compiler for Common Lisp". </title> <booktitle> Proc. of '86 ACM Conf. on Lisp and Funct. Prog., </booktitle> <month> (Aug. </month> <year> 1986),67-85. </year>
Reference: <author> Budd, Timothy. </author> <title> An APL Compiler. </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1988. </year>
Reference: <author> Burn, G.L. </author> <title> Abstract Interpretation and the Parallel Evaluation of Functional Languages. </title> <type> Ph.D. Thesis, </type> <institution> Imperial College, </institution> <address> London, </address> <year> 1987. </year>
Reference: <author> Callahan, D., Cooper, K.D., Kennedy, K., and Torczon, L. </author> <title> "Interprocedural Constant Propagation". </title> <booktitle> Proc. Sigplan '86 Symp. on Compiler Constr., also Sigplan Notices 21, </booktitle> <month> 7 (July </month> <year> 1986),152-161. </year>
Reference: <author> Cardelli, L., and Wegner, P. </author> <title> "On Understanding Types, Data Abstraction, and Polymorphism". </title> <journal> ACM Comput. </journal> <note> Surv. 17,4 (Dec. 1985),471-522. </note>
Reference: <author> Cartwright, R. </author> <title> "User-defined Data Types as an Aid to Verifying Lisp Programs". </title> <editor> In Michaelson, S., and Milner, R. (eds.). </editor> <booktitle> Automata, Languages and Programming, </booktitle> <publisher> Edinburgh Press, Edinburgh,228-256. </publisher>
Reference: <author> CLtL:Steele, Guy L., Jr. </author> <title> Common Lisp: The Language. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference: <author> Cousot, P., and Cousot, R. </author> <title> "Abstract Interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints". </title> <booktitle> 4'th ACM POPL, </booktitle> <address> 1977,238-252. </address>
Reference: <author> Dijkstra, </author> <title> E.W. A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1976. </year>
Reference: <author> Ellis, John R. Bulldog: </author> <title> A Compiler for VLIW Architectures. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference: <author> Ferrante, Jeanne, and Rackoff, Charles W. </author> <title> "A decision procedure for the first order theory of real addition with order". </title>
Reference: <institution> SIAM J. Comput. </institution> <note> 4, 1 (1975),69-76. </note>
Reference: <author> Gabriel, Richard P. </author> <title> Performance and Evaluation of Lisp Systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference: <author> Harper, R., et al. </author> <title> "Standard ML". </title> <type> Technical Report ECS-LFCS-86-2, </type> <institution> Dept. of Computer Science, Edinburgh, UK, </institution> <month> March, </month> <year> 1986. </year>
Reference: <author> Harrison, William. </author> <title> "Compiler Analysis of the Value Ranges for Variables". </title> <journal> IEEE Trans. Soft. Eng. </journal> <note> SE-3,3 (May 1977),243-250. </note>
Reference: <author> Haynes, Christopher T., and Friedman, Daniel P. </author> <title> "Embedding Continuations in Procedural Objects". A C M TOPLAS 9,4 (Oct. </title> <publisher> 1987),582-598. </publisher>
Reference: <author> Hillis, W. Daniel. </author> <title> The Connection Machine. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference: <author> Ichbiah, J. </author> <title> "Rationale for the design of the Ada programming language." ACM Sigplan Notices 14,6 (June 1979),part B. Intel Corporation. i860 64-bit Microprocessor Programmer's Reference Manual. Order #240329, </title> <publisher> Intel Corporation, </publisher> <address> Santa Clara, CA, </address> <year> 1989. </year>
Reference: <editor> Jones, N.D., and Muchnick, S. </editor> <title> "Binding time optimization in programming languages". </title> <booktitle> 3'rd ACM POPL, </booktitle> <address> Atlanta, GA (1976),77-94. </address>
Reference: <author> Kanellakis, P.C., and Mitchell, </author> <title> J.C. "Polymorphic unification and ML typing". </title> <journal> ACM Funct. Prog. Langs. and Comp. Arch. (FPCA), 1989,54-74. </journal>
Reference: <author> Kaplan, Marc A., and Ullman, Jeffrey D. </author> <title> "A Scheme for the Automatic Inference of Variable Types". </title> <journal> ACM JACM 27,1 (Jan. 1980),128-145. </journal>
Reference: <author> Katayama, Takuya. </author> <title> "Type Inference and Type Checking for Functional Programming LanguagesA Reduced Computation Approach". </title> <booktitle> 1984 ACM Conf. on Lisp and Funct. Prog., </booktitle> <month> Aug. </month> <note> 1984,263-272. The Nimble Type Inferencer for Common Lisp-84 1989-1991 Nimble Computer Corporation 26 Kranz, </note> <author> D., Kelsey, R., Rees, J., Hudak, P., Philbin, J., and Adams, N. </author> <title> "ORBIT: An Optimizing Compiler for Scheme". </title> <booktitle> Proc. Sigplan '86 Symp. on Compiler Constr., also Sigplan Notices 21, </booktitle> <month> 7 (July </month> <year> 1986),219-233. </year>
Reference: <author> Ma, Kwan-Liu, and Kessler, Robert R. </author> <title> "TICLA Type Inference System for Common Lisp". </title> <address> SWPrac. & Exper. 20,6 (June1990),593-623. </address>
Reference: <author> MacLane, Saunders and Birkhoff, Garrett. </author> <title> ALGEBRA. </title> <publisher> Macmillan, </publisher> <year> 1967. </year>
Reference: <author> Mairson, H.G. </author> <title> "Deciding ML Typability is Complete for Deterministic Exponential Time". </title> <booktitle> 17'th ACM POPL (Jan. </booktitle> <address> 1990),382-401. </address>
Reference: <author> Markstein, Victoria; Cocke, John; and Markstein, Peter. </author> <title> "Optimization of Range Checking". </title> <booktitle> ACM POPL '82,114-119. </booktitle>
Reference: <author> Marti, J., Hearn, A.C., Griss, M.L., and Griss, C. </author> <title> "Standard LISP Report". </title> <journal> Sigplan Notices 14, </journal> <month> 10 (Oct. </month> <year> 1979),48-68. </year>
Reference: <author> Milner, Robin. </author> <title> "A Theory of Type Polymorphism in Programming" JCSS 17, </title> <publisher> 1978,pp.348-375. </publisher>
Reference: <author> Moon, D. </author> <title> MACLISP Reference Manual Rev. </title> <type> 0. </type> <institution> Proj. MACM.I.T., Camb., </institution> <address> MA, </address> <month> April </month> <year> 1974. </year>
Reference: <author> Morris, J.H. </author> <title> "Types are Not Sets". </title> <booktitle> ACM POPL, </booktitle> <year> 1973, </year> <month> pp.120-124. </month>
Reference: <author> Mycroft, Alan. </author> <title> Abstract Interpretation and Optimising Transformation for Applicative Programs. </title> <type> Ph.D. Thesis, </type> <institution> Univ. Edinburgh, Scoitland, </institution> <year> 1981. </year>
Reference: <author> Pennello, T., and Meyers, R. </author> <title> "A Simplified Operator Identification Scheme in Ada". </title> <journal> ACM Sigplan Notices 15, </journal> <volume> 7&8 (July-Aug. </volume> <year> 1980),82-87. </year>
Reference: <author> Schwartz, J.T. </author> <title> "Optimization of very high level languagesI. Value transmission and its corollaries". </title> <journal> J. Computer Lang. </journal> <volume> 1 (1975),161-194. </volume>
Reference: <author> Scott, D. </author> <title> "Data types as lattices". </title> <journal> SIAM J. Computing, </journal> <month> 5,3 (Sept. </month> <year> 1976), </year> <pages> 522-587. </pages>
Reference: <author> Sethi, Ravi. </author> <title> "Conditional Expressions with Equality Tests". </title> <journal> J. ACM 25,4 (Oct.1978),667-674. </journal>
Reference: <author> Shivers, O. </author> <title> "Control Flow Analysis in Scheme". </title> <booktitle> ACM Sigplan Conf. </booktitle> <address> '88,164-174. </address>
Reference: <author> Steele, Guy L., Jr. Rabbit: </author> <title> A Compiler for SCHEME (A Study in Compiler Optimization). </title> <booktitle> AI-TR-474, Artificial Intelligence Laboratory, </booktitle> <publisher> MIT, </publisher> <month> May </month> <year> 1978. </year>
Reference: <author> Suzuki, Norihisa. </author> <title> "Implementation of an array bound checker". </title> <booktitle> ACM POPL </booktitle> ???. 
Reference: <author> Suzuki, Norihisa. </author> <title> "Inferring Types in Smalltalk". </title> <booktitle> ACM POPL 8, </booktitle> <address> 1981,pp.187-199. </address>
Reference: <author> Taffs, D.A., Taffs, M.W., Rienzo, J.C., Hampson, T.R. </author> <title> "The ALS Ada Compiler Global Optimizer". in Barnes & Fisher, "Ada in Use": </title> <booktitle> Proc. Ada Int'l. Conf., Camb. </booktitle> <publisher> Univ. Press, 1985,355-366. </publisher>
Reference: <author> Teitelman, W., et al. </author> <note> InterLISP Reference Manual. Xerox PARC, </note> <institution> Palo Alto, </institution> <address> CA, </address> <year> 1978. </year>
Reference: <author> Tenenbaum, A. </author> <title> "Type determination for very high level languages". </title> <type> Ph.D. Thesis, Rep. </type> <institution> NSO-3, Courant Inst. Math. Sci., </institution> <address> New York U., New York, </address> <year> 1974. </year>
Reference: <author> Thatte, Satish R. </author> <title> "Quasi-static Typing". </title> <booktitle> 17'th ACM POPL '90, </booktitle> <month> Jan. </month> <year> 1990,367-381. </year>
Reference: <author> Wand, M. </author> <title> "A Semantic Prototyping System". </title> <booktitle> Proc. ACM Sigplan '84 Symp. on Compiler Constr., Sigplan Notices 19,6 (June 1984),213-221. </booktitle>
Reference: <author> Yuasa, T., and Hagiya, M. </author> <title> Kyoto Common Lisp Report. </title> <institution> Research Institute for Mathematical Sciences, Kyoto University, </institution> <year> 1985. </year>
References-found: 55

