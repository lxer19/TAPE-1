URL: http://www.paoli.atm.lmco.com/kqml/papers/view-concepts-3.ps
Refering-URL: http://www.paoli.atm.lmco.com/kqml/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: pastor@prc.unisys.com mckay@prc.unisys.com finin@cs.umbc.edu  
Title: View-Concepts: Knowledge-Based Access to Databases  
Author: Jon A. Pastor Donald P. McKay Timothy W. Finin 
Address: 5401 Wilkens Avenue PO Box 517 PO Box 517 Baltimore, MD 21228 Paoli, PA 19301 Paoli, PA 19301  
Note: (A Unisys Company) (A Unisys Company)  
Affiliation: Paramax Systems Corp. Paramax Systems Corp. Computer Science Department  University of Maryland, Valley Forge Laboratories Valley Forge Laboratories Baltimore County Research and Development Research and Development  
Abstract: Semantic data models for database systems provide powerful tools to assist database administrators in designing and maintaining schemas, but provide little or no direct support for users of the database. Some research has been done on mapping user models of a domain to the underlying database using semantic schemas. Little has been done, however, on mapping conceptually meaningful data structures to a database lacking a semantic schema, or to a multi-database system that lacks a consistent semantic schema. We argue for the appropriateness of a knowledge representation language as a language for describing the database schema, user data structures, and the mapping between them; present a problem domain in which an existing relational database without a semantic schema must be accessed by a knowledge-based application; and describe our implementation of a system that provides access to a relational database from a KL-ONE-style knowledge representation language. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yigal Arens, </author> <title> "Services and Information Management for Decision Support," </title> <booktitle> AISIG-90: Proceedings of the Annual AI Systems in Government Conference, </booktitle> <address> George Washington University, Wash-ington, DC, </address> <month> May, </month> <year> 1990. </year>
Reference: [2] <author> Yigal Arens, </author> <title> "Planning and Reformulating Queries for Semantically-Modeled Multidatabase Systems," </title> <booktitle> Proceedings of the First International Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, MD, </address> <month> November, </month> <year> 1992. </year>
Reference-contexts: to integrate LIM with SIMS [1]<ref> [2] </ref> and COBASE [8], and to produce jointly with their developers a system providing integration of access to multiple sources, approximate queries and answers, and fault tolerant knowledge base access to databases. Some of the initial integration results are reported elsewhere in these proceedings, c.f. [2]. 5 Conclusion We have described a view-concept model which uses a knowledge representation language, Loom, to define the semantic schema of a database. This definition has two levels, each of which is of utility to a knowledge-based application.
Reference: [3] <author> Thierry Barsalou and Gio Wiederhold, </author> <title> "Applying a Semantic Model to an Immunology Database", </title> <year> 1987. </year>
Reference: [4] <author> Thierry Barsalou, </author> <title> "An Object-Based Architecture for Biomedical Expert Database Systems", </title> <year> 1988. </year>
Reference: [5] <author> Thierry Barsalou, Arthur M, Keller, Niki Siambela, and Gio Wiederhold, </author> <title> "Updating Relational Databases through Object-Based Views", </title> <publisher> ACM, </publisher> <year> 1991. </year>
Reference: [6] <author> Ronald Brachman and James Schmolze, </author> <title> "An Overview of the KL-One Knowledge Representation System", </title> <booktitle> Cognitive Science 9, </booktitle> <year> 1985, </year> <pages> pages 171-216. </pages>
Reference-contexts: The Loom Knowledge Representation Language [10] traces its lineage back to KL-ONE <ref> [6] </ref>, but has incorporated and extended the separation of the terminological and assertional components, where the terminological component is used for definition of generic concepts, and the assertional component is used for the creation of and reasoning about instances of those concepts.
Reference: [7] <editor> M. Brodie, J. Mylopoulos, and J. W. Schmidt, editors, </editor> <booktitle> On Conceptual Modelling: Perspectives from Artificial Intelligence, Databases, and Programming Languages, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: 1 Introduction The integration of AI and DBMS technologies promises to play a significant role in shaping the future of computing. As noted in <ref> [7] </ref>, AI/DB integration is crucial not only for next-generation computing, but also for the continued development of DBMS technol fl This work is supported by Rome Laboratory and the Defense Advanced Research Projects Agency under USAF contract F30602-91-C-0040.
Reference: [8] <author> Wesley W. Chu, Andy Y. Hwang, Rei-Chi Lee, Qiming Chen, Matthew Merzbacher, and Her-bert Hecht, </author> <title> "Fault Tolerant Distributed Database System via Data Inference", </title> <booktitle> Proceedings of the Ninth Symposium on Reliable Distributed Systems, </booktitle> <address> Huntsville, Alabama, </address> <month> October 9-11, </month> <year> 1990. </year>
Reference-contexts: Our project is thus faced with the task of interfacing a KRS to a collection of legacy databases that lack a coherent semantic schema. Related work within the DRPI is being performed by groups at ISI [1][2] and UCLA <ref> [8] </ref>. ISI's SIMS (Services and Information Management for Decision Systems) is designed to map the queries of users, who are presumed to be ignorant of the structure and content of a collection of databases, into retrievals against those databases. <p> In addition, we hope to integrate LIM with SIMS [1][2] and COBASE <ref> [8] </ref>, and to produce jointly with their developers a system providing integration of access to multiple sources, approximate queries and answers, and fault tolerant knowledge base access to databases.
Reference: [9] <author> R. Kowalski, </author> <title> Logic for Problem Solving, </title> <publisher> Elsevier, </publisher> <year> 1979. </year>
Reference-contexts: While some relational systems (e.g., POSTGRES [13]) provide support for rule-based programming, and any Prolog <ref> [9] </ref> system with a database interface will provide support for logic-based programming, the processing in both cases is applied not to conceptual objects in the domain, but to tuples in the database.
Reference: [10] <author> Robert MacGregor and Robert Bates, </author> <title> "The Loom Knowledge Representation Language", </title> <booktitle> Proceedings of the Knowledge-Based Systems Workshop, </booktitle> <month> April </month> <year> 1987. </year>
Reference-contexts: In contrast, current-generation knowledge representation systems (KRSs) such as Loom <ref> [10] </ref> provide logical and procedural operators, and thus permit both logic- and rule-based programming to be applied to conceptual objects. <p> Such a KRS is, we believe, the ideal language in which to implement object-based views on external databases (EDBs), since it provides ample representational and inferential power for describing both the explicit and implicit differences in the semantics of multi-database systems. The Loom Knowledge Representation Language <ref> [10] </ref> traces its lineage back to KL-ONE [6], but has incorporated and extended the separation of the terminological and assertional components, where the terminological component is used for definition of generic concepts, and the assertional component is used for the creation of and reasoning about instances of those concepts. <p> LIM uses both the IDI [11] and the Loom knowledge representation language <ref> [10] </ref>. The IDI uses one of several protocols to access Oracle databases on a remote server. We have developed the first prototype of the LIM system described above and a test set of approximately 50 queries.
Reference: [11] <author> Don McKay, Tim Finin, and Anthony O'Hare, </author> <title> "The Intelligent Database Interface", </title> <booktitle> Proceedings of the 7th National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: We distinguish four approaches to the integration of AI and DBMS technologies: * extended AI system * extended DBMS system * loosely coupled AI/DB interface * enhanced AI/DB interface Our previous work on the Intelligent Database Interface (IDI) <ref> [11] </ref> focused on an enhanced AI/DB interface for logic-based systems; the work described in this paper builds on the IDI by defining a view-concept model demonstrated using the Loom Interface Module (LIM). <p> LIM uses both the IDI <ref> [11] </ref> and the Loom knowledge representation language [10]. The IDI uses one of several protocols to access Oracle databases on a remote server. We have developed the first prototype of the LIM system described above and a test set of approximately 50 queries.
Reference: [12] <author> G. Christian Overton, Kimberle Koile, and Jon A. Pastor, "GeneSys: </author> <title> A Knowledge Management System for Molecular Biology", Computers and DNA, Santa Fe Institute, </title> <editor> G. Bell and T. Marr, editors, </editor> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Barsalou and Wiederhold provide algorithms that assure that objects are retrievable, and, if desired, updatable. The view-concept model described here is intended as a knowledge-based extension of the view-object model; it is also based upon an Ingres DB interface we developed for the CYC KRS <ref> [12] </ref>. 2 Architecture and Operation LIM acts as an intermediary between a Loom application and one or more EDBs, using the services of the IDI to access the EDBs. The inter-relationships among the various components of the overall system are illustrated in Figure 1.
Reference: [13] <author> Michael Stonebraker and Larry Rowe, </author> <title> The Post-gres Papers, </title> <institution> University of California - Berkeley, </institution> <year> 1987. </year>
Reference-contexts: If, on the other hand, the objects are to be manipulated by a knowledge-based system, it is desirable to choose a representation language that supports * typing and classification of domain concepts, * support for rule-based programming, and * support for logic-based programming. While some relational systems (e.g., POSTGRES <ref> [13] </ref>) provide support for rule-based programming, and any Prolog [9] system with a database interface will provide support for logic-based programming, the processing in both cases is applied not to conceptual objects in the domain, but to tuples in the database.
Reference: [14] <author> Gio Wiederhold and R. ElMasri, </author> <title> "The Structural Model for Database Design", </title> <booktitle> inEntity-Relationship Approach to System Analysis and Design, </booktitle> <pages> pages 237-257, </pages> <publisher> North Holland, </publisher> <year> 1980. </year>
Reference-contexts: Some work has been done toward implementing the view-object model on relational DBs for which a semantic schema exists. In particular, Barsalou and Wiederhold [3][4] describe a system based on the Structural Model <ref> [14] </ref>, an extended entity-relationship model. In this system, the user selects a pivot relation that includes the intended key (s) for the object being defined.
Reference: [15] <author> Gio Wiederhold, </author> <title> "Views, Objects, and Databases", </title> <journal> IEEE Computer, </journal> <volume> Vol. 19, no. 12, </volume> <month> December </month> <year> 1986, </year> <pages> pages 37-44. </pages>
Reference-contexts: While use of relational DBMSs is burgeoning, the appropriateness of the relational model as a user data model has been questioned. For example, proponents of the view-object model <ref> [15] </ref> have argued that while efficient retrieval, sharability, and other considerations make the relational model an ideal choice for storage management, users should be permitted to view their application domains in terms of conceptual objects.
References-found: 15

