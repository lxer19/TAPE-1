URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1997/GIT-CC-97-18.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.97.html
Root-URL: 
Title: Georgia Tech Time Warp (GTW Version 3.1) Programmer's Manual for Distributed Network of Workstations  
Author: Richard M. Fujimoto, Samir R. Das, Kiran S. Panesar, Maria Hybinette and Chris Carothers 
Date: July 3, 1997  
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Pubnum: GIT-CC-97-18  
Abstract: This manual gives an introduction to writing parallel discrete event simulation programs for the Georgia Tech Time Warp (GTW) system (version 3.1). Time Warp is a synchronization mechanism for parallel discrete event simulation programs. GTW is a Time Warp simulation kernel implemented on distributed network of uniprocessor and shared memory multiprocessor machines. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. R. Das and R. M. Fujimoto. </author> <title> A performance study of the cancelback protocol for Time Warp. </title> <booktitle> 7 th Workshop on Parallel and Distributed Simulation, </booktitle> <volume> 23(1) </volume> <pages> 135-142, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: An early (albeit dated) description of the direct cancellation mechanism used in GTW is described in [2]. If you are running Time Warp under memory constraints, the memory management protocol used in GTW is described in [5]. Its implementation in GTW (again, somewhat dated) is described in <ref> [1] </ref>. As an application programmer for the GTW system, you need not know details of the internals of the GTW implementation beyond those which are discussed here. This manual does not assume prior parallel programming experience, but it is assumed the reader is proficient in programming in the C language.
Reference: [2] <author> R. M. Fujimoto. </author> <title> Time Warp on a shared memory multiprocessor. </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> 6(3) </volume> <pages> 211-239, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The material in that reference should provide sufficient background for the purposes of writing application programs for GTW. For additional details on the Time Warp mechanism, read Jefferson's seminal paper "Virtual Time" [4]. An early (albeit dated) description of the direct cancellation mechanism used in GTW is described in <ref> [2] </ref>. If you are running Time Warp under memory constraints, the memory management protocol used in GTW is described in [5]. Its implementation in GTW (again, somewhat dated) is described in [1].
Reference: [3] <author> R. M. Fujimoto. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 30-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: In order to write a simulation program, you must be familiar with the basic concepts of parallel discrete event simulation in general, and the Time Warp mechanism in particular. For an introduction to these topics, see <ref> [3] </ref>. The material in that reference should provide sufficient background for the purposes of writing application programs for GTW. For additional details on the Time Warp mechanism, read Jefferson's seminal paper "Virtual Time" [4].
Reference: [4] <author> D. R. Jefferson. </author> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: For an introduction to these topics, see [3]. The material in that reference should provide sufficient background for the purposes of writing application programs for GTW. For additional details on the Time Warp mechanism, read Jefferson's seminal paper "Virtual Time" <ref> [4] </ref>. An early (albeit dated) description of the direct cancellation mechanism used in GTW is described in [2]. If you are running Time Warp under memory constraints, the memory management protocol used in GTW is described in [5]. Its implementation in GTW (again, somewhat dated) is described in [1].
Reference: [5] <author> D. R. Jefferson. </author> <title> Virtual time II: The cancelback protocol for storage management in distributed simulation. </title> <booktitle> In Proc. 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 75-90, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: An early (albeit dated) description of the direct cancellation mechanism used in GTW is described in [2]. If you are running Time Warp under memory constraints, the memory management protocol used in GTW is described in <ref> [5] </ref>. Its implementation in GTW (again, somewhat dated) is described in [1]. As an application programmer for the GTW system, you need not know details of the internals of the GTW implementation beyond those which are discussed here.
Reference: [6] <author> P. L'Ecuyer. </author> <title> Efficient and portable combined random number generators. </title> <journal> Communications of the ACM, </journal> <volume> 31(6) </volume> <pages> 742-774, </pages> <month> June </month> <year> 1988. </year> <month> 25 </month>
Reference-contexts: The GTW executive currently uses a random number generator using L'Ecuyer's double congruential algorithm <ref> [6] </ref> using two 32-bit integer seeds. A file containing over 20,000 different initial seeds is included in the GTW distribution to create multiple streams of random numbers. These seeds represent those produced by a single stream of random numbers sampled at intervals of 10 million calls to the generator.
References-found: 6

