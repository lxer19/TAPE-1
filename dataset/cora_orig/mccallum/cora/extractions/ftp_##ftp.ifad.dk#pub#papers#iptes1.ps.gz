URL: ftp://ftp.ifad.dk/pub/papers/iptes1.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Email: E-mail: ppm@vtttko.vtt.ii  E-mail: rene@ifad.dk  E-mail: gleon@dit.upm.es, jpuente@dit.upm.es  
Phone: Tel: +45 65 93 43 03  
Title: IPTES Incremental Prototyping Technology for Embedded real-time Systems interchange of information between the nodes is
Author: Petri Pulli Rene Elmstrtm (Contact person) Gonzalo Leon and J.A. de la Puente 
Note: The  
Date: August 24, 1994  
Address: P.O. Box 201, SF-90571 Oulu, Finland  Munkebjergvnget 17, DK-5230 Odense M, Denmark  Madrid  
Affiliation: Technical Research Centre of Finland (VTT) Computer Technology Laboratory  The Institute of Applied Computer Science (IFAD)  Dpto. de Ingenieria de Sistemas Telematicos Universidad Politecnica de  
Abstract: In ESPRIT project no. EP5570 called IPTES (IPTES is an acronym for "Incremental Prototyping Technology for Embedded real-time Systems") a methodology and a supporting environment to support the Boehm's spiral principles are being developed. The prototyping environment will enable the specification and verification of executable system models so that different parts of the system may represent different modeling levels, and yet they can be executed as a total system. Also problems in connection with distributed software development are addressed in the IPTES environment. Typically it is difficult to define the interface protocols between the processors (nodes) of a multi-processor real-time system. In the IPTES project the concept of distributed prototyping is proposed as a solution. Each development team working on their processor (node) can test their own physical model against the logical model of the rest of the system. The IPTES environment provides a set of modules to help in the process of creating, analyzing and testing distributed heterogeneous prototypes. Internally, the environment is based on a representation of the system in terms of high level time Petri nets with shared places. 
Abstract-found: 1
Intro-found: 1
Reference: [Agresti86] <author> W. </author> <title> Agresti (editor). New Paradigms for Software Development. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year> <pages> 295 pages. </pages>
Reference-contexts: However, none of the tools supports incremental prototyping 3 . 3 Prototyping within the Framework of the Spiral Model Over the last few years more and more attention has been paid to alternative software development models that could both overcome deficiencies <ref> [Agresti86] </ref> of the traditional waterfall model [Boehm81], and accommodate activities such as prototyping, reuse, and automatic coding as part of the process. The spiral model proposed by Boehm [Boehm88] (Figure 1) is a major step into this direction.
Reference: [Athena89] <author> Athena Systems Inc. Foresight: </author> <title> Modeling and Simulation Toolset for Real-Time System Development, User's Manual. </title> <month> March </month> <year> 1989. </year>
Reference-contexts: Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], [Reilly&87], [Coomber&90], <ref> [Athena89] </ref>. Some of the surveyed tools can be used for execution of heterogenious models and in that sense they make incremental prototyping possible.
Reference: [Blumofe&88] <author> Blumofe, R., Hecht, A. </author> <title> Executing Real-Time Structured Analysis specifications. </title> <booktitle> ACM Sigsoft Software Engineering Notes, </booktitle> <pages> 32-40, 13, </pages> <month> 3 </month> <year> 1989. </year>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], [Coleman&90]. <ref> [Blumofe&88] </ref> and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Boehm81] <author> B. Boehm. </author> <title> Software Engineering Economics. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year> <pages> 767 pages. </pages>
Reference-contexts: However, none of the tools supports incremental prototyping 3 . 3 Prototyping within the Framework of the Spiral Model Over the last few years more and more attention has been paid to alternative software development models that could both overcome deficiencies [Agresti86] of the traditional waterfall model <ref> [Boehm81] </ref>, and accommodate activities such as prototyping, reuse, and automatic coding as part of the process. The spiral model proposed by Boehm [Boehm88] (Figure 1) is a major step into this direction.
Reference: [Boehm88] <author> B. Boehm. </author> <title> A Spiral Model of Software Development and Enhancement. </title> <journal> IEEE Software, </journal> <volume> 21(5) </volume> <pages> 61-72, </pages> <year> 1991. </year>
Reference-contexts: The spiral model proposed by Boehm <ref> [Boehm88] </ref> (Figure 1) is a major step into this direction. <p> The concurrent threads may be organised around levels of risk <ref> [Boehm88] </ref>. Figure 2 gives an example of concurrent development threads [TRW89]. In Figure 2, the horizontal axis represents elapsed time. The vertical axis represents the level of abstraction at which a representation or an understanding of the system is being developed.
Reference: [Boehm91] <author> B. Boehm. </author> <title> Software Risk Management: </title> <booktitle> Principles and Practices. IEEE Software, </booktitle> <pages> 32-41, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The spiral model may incorporate prototyping as a risk reduction option at any stage of development and explicitly calls for suitable risk assessment and risk control activities throughout major portions of the development process. Risk management involves the following steps <ref> [Boehm91] </ref>: * Risk assessment techniques Risk identification produces lists of the project specific risk items likely to compro mise a project's success. Risk analysis quantifies the loss probability and loss magnitude for each identified risk item, and it assesses compound risks in risk item interactions.
Reference: [Cadre90] <institution> Cadre Technologies Inc. Teamwork/SIM. </institution> <note> User's Guide. Release 4.0. </note> <month> December </month> <year> 1990. </year> <title> Part Number D048XX4A. </title>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], [Coleman&90]. [Blumofe&88] and <ref> [Cadre90] </ref> describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Coleman&90] <author> Coleman, G.L., Ellison, C.P., Gardner, G.G., Sandini, D.L., Brackett, J.W. </author> <title> Experience in modelling a concurrent software system using State-mate. </title> <editor> In , editor, </editor> <booktitle> Proceedings of the Compeuro'90 Conference. </booktitle> <address> Tel Aviv, </address> <publisher> Isreal, </publisher> <pages> pages 104-108, </pages> <publisher> Washington D.C.IEEE Computer Society Press, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], <ref> [Coleman&90] </ref>. [Blumofe&88] and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Coomber&90] <author> Coomber, C., Childs, R. </author> <title> A graphical tool for prototyping of real-time systems. </title> <booktitle> ACM Sigsoft Software Engineering Notes, </booktitle> <pages> 70-82, 15, </pages> <month> 2 </month> <year> 1990. </year>
Reference-contexts: Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], [Reilly&87], <ref> [Coomber&90] </ref>, [Athena89]. Some of the surveyed tools can be used for execution of heterogenious models and in that sense they make incremental prototyping possible.
Reference: [DOD-STD-2167A] <author> Anon. </author> <title> Military Standard DOD-STD-2167A Defence System Software Development. </title> <institution> Department of Defence, </institution> <address> Washington D.C. 20301, Febru-ary 29, </address> <year> 1988. </year> <title> 51 pages. Obtained From Global Engineering Documents 2805 McGaw Ave., </title> <address> Irvine, CA 92714. </address>
Reference-contexts: The spiral has to be customised on a company or project basis. [Royce90] presents a derivative of the spiral model which explicitly defines milestones according to the US military standard <ref> [DOD-STD-2167A] </ref>. development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method [Ward&85]. These abstraction levels are described using the same modeling languages: 4 data flow diagrams (DFD), state transition diagrams (STD), and entity relationship diagrams (ERD).
Reference: [Gabriel89] <author> Gabriel. </author> <title> Draft Report on Requirements for a Common Prototyping System. </title> <journal> ACM Sigplan Notices, </journal> <volume> ():24(3):93-165, </volume> <year> 1989. </year>
Reference-contexts: In section 5 we give more details on the proposed architecture of the IPTES environment and finally we give some concluding remarks. 2 Related work Gabriel presents the requirements for a future prototyping environment in <ref> [Gabriel89] </ref>. Gabriel foresees the need for heterogeneous prototyping by requiring that elements from behavioural and structural prototypes can be combined and during the development process this mix may change as the requirements to the prototype change. <p> Over the lifetime of the prototype the mix of abstraction levels may change <ref> [Gabriel89] </ref>. Figures 4 and 5 [Mortensen90] illustrate the concept of the heterogeneous prototype. coverage of the executable model consisting of partial models belonging to different abstraction levels. 4.3 Distributed Prototype Embedded systems are often highly concurrent in nature.
Reference: [Ghezzi&89] <author> Carlo Ghezzi, Dino Mandrioli, Sandro Morasca and Mauro Pezze. </author> <title> A General Way to put Time in Petri Nets. </title> <booktitle> In Fifth International Workshop on Software Specification and Design, </booktitle> <pages> pages 60-67, </pages> <booktitle> ACM Sigsoft, </booktitle> <year> 1989. </year>
Reference-contexts: Inverse mappings will be provided in order to represent the results of the HLTPN kernel operations in terms of user notations. Initially, the kernel functionality will be derived from ER net tools <ref> [Ghezzi&89] </ref>.
Reference: [Harel87] <author> Harel, D. Statemate: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 231 - 274, 8, </volume> <month> 3 </month> <year> 1987. </year>
Reference-contexts: The abstraction level supported is roughly equivalent to the software environment model of SA/RT 1 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate [Harel&90], that has prototyping features. It is possible to automatically generate prototype code from the activity-chart and statechart <ref> [Harel87] </ref> specifications. Currently translations into Ada and C code are supported. A limitation of the Statemate tool is that it does not support multiple abstraction levels. Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 .
Reference: [Harel&90] <author> Harel, D., Lachover, H., Naamad, A., Pnuelli, M., Politi, M., Sher-man, R., Shtul-Trauring, A., Trakhtenbrot, M. Statemate: </author> <title> a working environment for the development of complex reactive systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 403 - 414, 16, </volume> <month> 4 </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: A limitation of the Luqi's system is that it does not support multiple abstraction levels. The abstraction level supported is roughly equivalent to the software environment model of SA/RT 1 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate <ref> [Harel&90] </ref>, that has prototyping features. It is possible to automatically generate prototype code from the activity-chart and statechart [Harel87] specifications. Currently translations into Ada and C code are supported. A limitation of the Statemate tool is that it does not support multiple abstraction levels. <p> Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C <ref> [Harel&90] </ref>, [Coleman&90]. [Blumofe&88] and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. <p> This is because Luqi's system does not have a mini-spec language, instead Ada is used. 2 <ref> [Harel&90] </ref> mentions plans to make the prototype code generation more adjustable. This can be interpreted as an indication of interest to support more physical abstraction levels. 3 To better understand the difference between "makes possible" and "supports", consider the case of object-orientation.
Reference: [Jones90] <author> Cliff B. Jones. </author> <title> Systematic Software Development Using VDM (second edition). </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year> <pages> 333 pages. </pages>
Reference-contexts: The designer must receive help from the initial phases (requirements capture) to an implementation in a procedural language. The most important requirements concerning the architecture of the environment can be described as follows: * High level graphical design language support At least an SA/RT [Lintulampi90b] machine augmented with VDM <ref> [Jones90] </ref> for mini-specifications, and a notation to represent real-time constraints should be available. This machine provides the high level language for the designer. The designer working at this level is not aware of the internal representation chosen in the inner layers.
Reference: [Lintulampi90a] <author> Raino Lintulampi. </author> <title> ESPEX Executable Specification Based Validation and Incremental Prototyping Environment. </title> <note> Presented at TCC2, </note> <month> May </month> <year> 1990. </year> <pages> 18 pages. </pages> <month> slides. </month>
Reference-contexts: The basic high level specification machine will be based on the SA/RT specification language augmented with VDM for descriptions of data structures and data transformations. Initially, the proposed functionalities will be derived from the ESPEX tools <ref> [Lintulampi90a] </ref> although new versions with enhanced functionality will be designed during the project. 5.3.4 High level time Petri net kernel High level Petri nets with time will be used as a kernel notation for the IPTES environment.
Reference: [Lintulampi90b] <author> Raino Lintulampi. </author> <title> A Specification of the Simulation of SA-RT Models. </title> <type> Technical Report, </type> <institution> VTT, </institution> <month> November </month> <year> 1990. </year> <pages> 57 pages. </pages>
Reference-contexts: The designer must receive help from the initial phases (requirements capture) to an implementation in a procedural language. The most important requirements concerning the architecture of the environment can be described as follows: * High level graphical design language support At least an SA/RT <ref> [Lintulampi90b] </ref> machine augmented with VDM [Jones90] for mini-specifications, and a notation to represent real-time constraints should be available. This machine provides the high level language for the designer. The designer working at this level is not aware of the internal representation chosen in the inner layers.
Reference: [Luqi86] <author> Luqi. </author> <title> Rapid prototyping for large software system design. </title> <type> PhD thesis, </type> <institution> University of Minnesota, </institution> <year> 1986. </year> <pages> 103 pages. </pages> . 
Reference-contexts: Luqi has presented a prototyping environment for large software system design based on reusable Ada software components <ref> [Luqi86] </ref>, [Luqi&88], [Luqi89]. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in 1 [Luqi86]. <p> a prototyping environment for large software system design based on reusable Ada software components <ref> [Luqi86] </ref>, [Luqi&88], [Luqi89]. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in 1 [Luqi86]. A limitation of the Luqi's system is that it does not support multiple abstraction levels. The abstraction level supported is roughly equivalent to the software environment model of SA/RT 1 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate [Harel&90], that has prototyping features.
Reference: [Luqi&88] <author> Luqi & Katebchi, M. </author> <title> A computer aided prototyping system. </title> <journal> IEEE Software, </journal> <volume> 66 - 72, 5, </volume> <month> 2 </month> <year> 1991. </year>
Reference-contexts: Luqi has presented a prototyping environment for large software system design based on reusable Ada software components [Luqi86], <ref> [Luqi&88] </ref>, [Luqi89]. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in 1 [Luqi86].
Reference: [Luqi89] <author> Luqi. </author> <title> Software evolution through rapid prototyping. </title> <journal> IEEE Software, </journal> <volume> 13 - 25, 22, </volume> <month> 5 </month> <year> 1991. </year>
Reference-contexts: Luqi has presented a prototyping environment for large software system design based on reusable Ada software components [Luqi86], [Luqi&88], <ref> [Luqi89] </ref>. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in 1 [Luqi86]. A limitation of the Luqi's system is that it does not support multiple abstraction levels.
Reference: [Mortensen90] <author> B. Mortensen (Coordinating Proposer). IPTES: </author> <title> Incremental Proto-typing Technology for Embedded Real-Time Systems. Part II. Project Description. </title> <type> Technical Report, </type> <address> IFAD, Odense, Denmark, </address> <month> January 8, </month> <year> 1990. </year>
Reference-contexts: Over the lifetime of the prototype the mix of abstraction levels may change [Gabriel89]. Figures 4 and 5 <ref> [Mortensen90] </ref> illustrate the concept of the heterogeneous prototype. coverage of the executable model consisting of partial models belonging to different abstraction levels. 4.3 Distributed Prototype Embedded systems are often highly concurrent in nature.
Reference: [Reilly&87] <author> Reilly, E.L., Brackett, J.W. </author> <title> An experimental system for executing Real-Time Structured Analysis models. </title> <editor> In , editor, </editor> <booktitle> Proceedings of the XII Structure Methods Conference. </booktitle> <address> Chicago, </address> <publisher> Illinois., </publisher> <pages> pages 301-313, </pages> <address> Chicago, </address> <booktitle> Structured Techniques Association, </booktitle> <month> May </month> <year> 1987. </year>
Reference-contexts: This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], <ref> [Reilly&87] </ref>, [Coomber&90], [Athena89]. Some of the surveyed tools can be used for execution of heterogenious models and in that sense they make incremental prototyping possible.
Reference: [Royce90] <author> Walker Royce. </author> <title> TRW's Ada Process Model for Incremental Development of Large Software Systems. </title> <booktitle> 12th International Conference on Software Engineering, </booktitle> <address> ():2-11, </address> <year> 1990. </year>
Reference-contexts: The spiral has to be customised on a company or project basis. <ref> [Royce90] </ref> presents a derivative of the spiral model which explicitly defines milestones according to the US military standard [DOD-STD-2167A]. development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method [Ward&85].
Reference: [TRW89] <author> Ann Marmor-Squires. </author> <title> Process Model for High Performance Trusted Systems in Ada. </title> <type> Technical Report, </type> <institution> TRW Systems Division, Fairfax, Virginia, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: The concurrent threads may be organised around levels of risk [Boehm88]. Figure 2 gives an example of concurrent development threads <ref> [TRW89] </ref>. In Figure 2, the horizontal axis represents elapsed time. The vertical axis represents the level of abstraction at which a representation or an understanding of the system is being developed. The development process is depicted by three traces through the two dimensional space.
Reference: [Ward&85] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems. </title> <publisher> Yourdon Press, </publisher> <address> New York, </address> <pages> 1985-86. </pages>
Reference-contexts: The spiral has to be customised on a company or project basis. [Royce90] presents a derivative of the spiral model which explicitly defines milestones according to the US military standard [DOD-STD-2167A]. development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method <ref> [Ward&85] </ref>. These abstraction levels are described using the same modeling languages: 4 data flow diagrams (DFD), state transition diagrams (STD), and entity relationship diagrams (ERD). The Logical Model (LM) consists of an environmental model and a behavioural model.
Reference: [Webb&86] <author> Webb, M., Ward, P. </author> <title> Executable Data Flow Diagrams: An Experimental Implementation. </title> <editor> In , editor, </editor> <booktitle> Proceedings of the Structured Development Forum VIII. </booktitle> <address> Chicago, </address> <publisher> Illinois., </publisher> <pages> pages 1-21, </pages> <address> Chicago, </address> <booktitle> Structured Techniques Association, </booktitle> <month> August </month> <year> 1986. </year> <month> 15 </month>
Reference-contexts: This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution <ref> [Webb&86] </ref>, [Reilly&87], [Coomber&90], [Athena89]. Some of the surveyed tools can be used for execution of heterogenious models and in that sense they make incremental prototyping possible.
References-found: 26

