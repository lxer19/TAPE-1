URL: http://www.isi.edu/teamcore/tambe/papers/96/AT/ATAL2.ps
Refering-URL: http://www.isi.edu/teamcore/tambe/agent.html
Root-URL: http://www.isi.edu
Email: Email: ftambe, rosenbloomg@isi.edu  
Title: Architectures for Agents that Track Other Agents in Multi-agent Worlds  
Author: Milind Tambe and Paul S. Rosenbloom 
Web: WWW: http://www.isi.edu/soar/ftambe,rosenbloomg  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  
Abstract: In multi-agent environments, an intelligent agent often needs to interact with other individuals or groups of agents to achieve its goals. Agent tracking is one key capability required for intelligent interaction. It involves monitoring the observable actions of other agents and inferring their unobserved actions, plans, goals and behaviors. This article examines the implications of such an agent tracking capability for agent architectures. It specifically focuses on real-time and dynamic environments, where an intelligent agent is faced with the challenge of tracking the highly flexible mix of goal-driven and reactive behaviors of other agents, in real-time. The key implication is that an agent architecture needs to provide direct support for flexible and efficient reasoning about other agents' models. In this article, such support takes the form of an architectural capability to execute the other agent's models, enabling mental simulation of their behaviors. Other architectural requirements that follow include the capabilities for (pseudo-) simultaneous execution of multiple agent models, dynamic sharing and unsharing of multiple agent models and high bandwidth inter-model communication. We have implemented an agent architecture, an experimental variant of the Soar integrated architecture, that conforms to all of these requirements. Agents based on this architecture have been implemented to execute two different tasks in a real-time, dynamic, multi-agent domain. The article presents experimental results illustrating the agents' dynamic behavior.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. R. Anderson, C. F. Boyle, A. T. Corbett, and M. W. Lewis. </author> <title> Cognitive modeling and intelligent tutoring. </title> <journal> Artificial Intelligence, </journal> <volume> 42 </volume> <pages> 7-49, </pages> <year> 1990. </year>
Reference-contexts: Tracking other agents' activities in real-time, while resolving ambiguities. Section 3 presents an approach to agent tracking that addresses the first item above: tracking flexible and reactive behaviors. The approach is based on the model tracing technique used in intelligent tutoring systems (ITS) for tracking student actions <ref> [1, 32] </ref>. To track the activities of a student, an ITS executes a model of that student to generate predictions. Tracking proceeds by matching these predictions with actual observations.
Reference: 2. <author> J. Azarewicz, G. Fala, R. Fink, and C. Heithecker. </author> <title> Plan recognition for airborne tactical decision making. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 805-811. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1986. </year>
Reference-contexts: This agent tracking capability is closely related to plan recognition, which involves recognizing agents' plans based on observations of their actions <ref> [15, 2, 23] </ref>. One key difference is that plan-recognition efforts typically focus on tracking a narrower (plan-based) class of agent behaviors, as seen in static, single-agent domains. In particular, they assume that agents rigidly follow plans step-by-step.
Reference: 3. <editor> S. Baron-Cohen. MindBlindness. </editor> <publisher> MIT Press/AAAI Press, </publisher> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: Second, recent research in the fields of cognitive and developmental psychology has focused on the theory of mind hypothesis [4]. This hypothesis suggests that an innate (neurocognitive) capability has evolved to enable humans to ascribe mental states to others <ref> [3] </ref>. This research appears to indicate that automated intelligent agents would be well-served by an architectural capability to reason about other agents' mental states. The article begins with an analysis (in Section 2) of some of the key requirements for agent tracking in real-time, dynamic environments. <p> Baron-Cohen argues that specific neu-rocognitive mechanisms have evolved to facilitate such mental state ascription, to aid in social understanding, behavioral prediction, social interaction and communication <ref> [3] </ref>. Selective impairment of these capabilities leads to autism [4]. Such autistic individuals are mindblind their world is devoid of mental things.
Reference: 4. <author> S. Baron-Cohen, H. Tager-Flusberg, and D. Cohen. </author> <title> Understanding other minds: perspectives from Autism. </title> <publisher> Oxford University Press, </publisher> <address> Walton Street, Oxford, </address> <year> 1993. </year>
Reference-contexts: It would be more efficient to provide architectural support for such a capability. Second, recent research in the fields of cognitive and developmental psychology has focused on the theory of mind hypothesis <ref> [4] </ref>. This hypothesis suggests that an innate (neurocognitive) capability has evolved to enable humans to ascribe mental states to others [3]. This research appears to indicate that automated intelligent agents would be well-served by an architectural capability to reason about other agents' mental states. <p> A third area of related work, also mentioned in Section 1, is research in develop-mental and cognitive psychology focused on the human ability to ascribe mental states to people: beliefs, desires, and intentions <ref> [4] </ref>. Baron-Cohen argues that specific neu-rocognitive mechanisms have evolved to facilitate such mental state ascription, to aid in social understanding, behavioral prediction, social interaction and communication [3]. Selective impairment of these capabilities leads to autism [4]. Such autistic individuals are mindblind their world is devoid of mental things. <p> focused on the human ability to ascribe mental states to people: beliefs, desires, and intentions <ref> [4] </ref>. Baron-Cohen argues that specific neu-rocognitive mechanisms have evolved to facilitate such mental state ascription, to aid in social understanding, behavioral prediction, social interaction and communication [3]. Selective impairment of these capabilities leads to autism [4]. Such autistic individuals are mindblind their world is devoid of mental things.
Reference: 5. <author> J. Bates, A. B. Loyall, and W. S. Reilly. </author> <title> Integrating reactivity, goals and emotions in a broad agent. </title> <type> Technical Report CMU-CS-92-142, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: For instance, in the education arena, intelligent tutoring systems need to interact with students in real-time [32]. In the arena of entertainment, recent work has focused on real-time, dynamic interactivity among multiple agents within virtual reality environments <ref> [5, 12, 17] </ref>. Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations [24, 26, 33].
Reference: 6. <author> M. E. Bratman, D. J. Israel, and M. E. Pollack. </author> <title> Plans and resource-bounded practical reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 349-355, </pages> <year> 1988. </year>
Reference-contexts: These commitments constrain future tracking and interpretation. Thus, commitments in RESC play the same constraining role in tracking, as they do in constraining planning in some plan-based architectures, such as IRMA <ref> [6] </ref>. With additional information becoming available later, these commitments may turn out to be inappropriate. In such cases, the interpretations are revised in real-time, via an on-line repair mechanism. RESC's real-time character derives from its situatedness, its quick commitments, and its on-line repair.
Reference: 7. <author> R. B. Calder, J. E. Smith, A. J. Courtemanche, J. M. F. Mar, and A. Z. Ceranowicz. </author> <title> Modsaf behavior simulation and control. </title> <booktitle> In Proceedings of the Conference on Computer Generated Forces and Behavioral Representation, </booktitle> <year> 1993. </year>
Reference-contexts: Section 7 presents related work, and Section 8 concludes. 2 Agent Tracking in a Real-world Setting Our investigation of agent tracking is based on an on-going effort to build intelligent pilot agents for a synthetic combat environment [26]. This environment is based on a commercially developed simulator called ModSAF <ref> [7] </ref>, which has already been used in an operational military exercise involving human participants. ModSAF provides a synthetic yet real-world setting for studying a broad range of challenging issues in agent tracking.
Reference: 8. <author> J. Cremer, J. Kearney, Y. Papelis, and R. Romano. </author> <title> The software architecture for scenario control in the iowa driving simulator. </title> <booktitle> In Proceedings of the Conference on Computer Generated Forces and Behavioral Representation. </booktitle> <address> Orlando, Florida: </address> <institution> Institute for Simulation and Training, University of Central Florida, </institution> <year> 1994. </year>
Reference-contexts: Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations [24, 26, 33]. In these simulations, humans may interact with tens or hundreds of intelligent agents, as they participate in realistic traffic environments that simulate traffic jams and pedestrians <ref> [8] </ref>, or air-traffic control environments that simulate multiple aircraft on airfields [19], or large-scale combat environments that simulate friendly and enemy troops [30]. Such real-time interaction is also seen in robotic environments, particularly in work such as robotic collaboration without communication [16].
Reference: 9. <author> I. A. Ferguson. TouringMachines: </author> <title> An architecture for dynamic, rational, mobile agents. </title> <type> PhD thesis, </type> <institution> University of Cambridge, </institution> <year> 1992. </year>
Reference-contexts: Specifically, the architectural mechanisms used to plan, control and monitor an agent's own behaviors are reused to monitor, interpret, and predict its partner's behaviors. Ferguson's work on the TouringMachine architecture focused on agents in dynamic, multi-agent environments also involves an explicit modeling layer for tracking other agents <ref> [9] </ref>. A second area of related work is research specifically focused on agent modeling and plan-recognition. Section 1 has discussed some of this work. In addition, some formal approaches for agent modeling, and in particular for recursive agent modeling, are also being investigated [11].
Reference: 10. <author> M. P. Georgeff and A. L. Lansky. </author> <title> Procedural knowledge. </title> <journal> Proceedings of the IEEE special issue on knowledge representation, </journal> <volume> 74 </volume> <pages> 1383-1398, </pages> <year> 1986. </year>
Reference-contexts: Fig. 6. Dynamic agent behavior in one-vs-two air-combat simulation for 100 cycles. 7 Related Work There are at least three main areas of related work. The first one is agent architectures. In this area, Rao's work on reactive plan recognition [20] based on the PRS/dMARS architecture <ref> [10] </ref> is closest in spirit to the work reported here. The underlying concept is to extend agent architectures, specifically the PRS architecture, to enable it to execute models of other agents in service of reactive recognition.
Reference: 11. <author> P. Gmytrasiewicz. </author> <title> On reasoning about other agents. </title> <editor> In M. Wooldridge, J. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents, Vol II Proceedings of the 1995 workshop on Agent theories, Architectures and Languages (ATAL-95), Lectures Notes in Articificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1996. </year> <note> (In this volume). </note>
Reference-contexts: A second area of related work is research specifically focused on agent modeling and plan-recognition. Section 1 has discussed some of this work. In addition, some formal approaches for agent modeling, and in particular for recursive agent modeling, are also being investigated <ref> [11] </ref>. Vidal and Durfee attack the problem of combinatorial explosion in such recursive modeling, and propose a formal approach to tame the combinatorics [31].
Reference: 12. <author> B. Hayes-Roth, L. Brownston, and Gen R. V. </author> <title> Multiagent collaobration in directed improvisation. </title> <booktitle> In Proceedings of the International Conference on Multi-Agent Systems (ICMAS-95), </booktitle> <year> 1995. </year>
Reference-contexts: For instance, in the education arena, intelligent tutoring systems need to interact with students in real-time [32]. In the arena of entertainment, recent work has focused on real-time, dynamic interactivity among multiple agents within virtual reality environments <ref> [5, 12, 17] </ref>. Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations [24, 26, 33]. <p> In fact, there are at least two other architectures where similar changes have been implemented in service of agent tracking. Hayes-Roth et al. report that their recent work on multi-agent collaborative improvisation has led to similar extensions to their BB1 agent architecture <ref> [12] </ref>. Specifically, the architectural mechanisms used to plan, control and monitor an agent's own behaviors are reused to monitor, interpret, and predict its partner's behaviors. Ferguson's work on the TouringMachine architecture focused on agents in dynamic, multi-agent environments also involves an explicit modeling layer for tracking other agents [9].
Reference: 13. <author> R. Hill and W. L. Johnson. </author> <title> Situated plan attribution for intelligent tutoring. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1994. </year>
Reference-contexts: The architectural implications of agent tracking described in this article are not dependent on RESC. Nonetheless, we 2 There are some recent ITS applications that have ventured into dynamic environments, e.g., REACT <ref> [13] </ref>, but they still primarily rely upon a plan-driven tracking strategy, dealing with the dynamic aspects as exceptions. briefly describe RESC in the following as an example technique for real-time ambiguity--resolution: RESC's situatedness is based on its ability to continuously track the other agents' actions in the current world state.
Reference: 14. <author> M. Huber and E. Durfee. </author> <title> Deciding when to commit to action during observation-based coordination. </title> <booktitle> In Proceedings of the International Conference on Multi-agent systems (ICMAS), </booktitle> <year> 1995. </year>
Reference-contexts: Even in collaborative settings, such communication may not be possible due to the cost or the risk involved, the lack of a common communication language, or inexpressivity of the common communication language; creating a need for an agent tracking capability for effective collaboration <ref> [14] </ref>. This agent tracking capability is closely related to plan recognition, which involves recognizing agents' plans based on observations of their actions [15, 2, 23]. One key difference is that plan-recognition efforts typically focus on tracking a narrower (plan-based) class of agent behaviors, as seen in static, single-agent domains.
Reference: 15. <author> A. Kautz and J. F. Allen. </author> <title> Generalized plan recognition. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 32-37. </pages> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1986. </year>
Reference-contexts: This agent tracking capability is closely related to plan recognition, which involves recognizing agents' plans based on observations of their actions <ref> [15, 2, 23] </ref>. One key difference is that plan-recognition efforts typically focus on tracking a narrower (plan-based) class of agent behaviors, as seen in static, single-agent domains. In particular, they assume that agents rigidly follow plans step-by-step.
Reference: 16. <author> Y. Kuniyoshi, S. Rougeaux, M. Ishii, N. Kita, S. Sakane, and M. Kakikura. </author> <title> Cooperation by observation: the framework and the basic task pattern. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Such real-time interaction is also seen in robotic environments, particularly in work such as robotic collaboration without communication <ref> [16] </ref>. In all these environments, agent tracking is a key capability required for intelligent interaction. It involves monitoring other agents' observable actions and inferring their unobserved actions or high-level goals, plans and behaviors. This capability is important in both collaborative and non-collaborative settings.
Reference: 17. <author> P. Maes, T. Darrell, B. Blumberg, and S. Pentland. </author> <title> Interacting with animated autonomous agents. </title> <editor> In J. Bates, editor, </editor> <booktitle> Proceedings of the AAAI Spring Symposium on Believable Agents, </booktitle> <year> 1994. </year>
Reference-contexts: For instance, in the education arena, intelligent tutoring systems need to interact with students in real-time [32]. In the arena of entertainment, recent work has focused on real-time, dynamic interactivity among multiple agents within virtual reality environments <ref> [5, 12, 17] </ref>. Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations [24, 26, 33].
Reference: 18. <author> A. Newell. </author> <title> Unified Theories of Cognition. </title> <publisher> Harvard Univ. Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: In such cases, the interpretations are revised in real-time, via an on-line repair mechanism. RESC's real-time character derives from its situatedness, its quick commitments, and its on-line repair. Section 6 presents an implementation of an agent architecture, a variation on the Soar integrated architecture <ref> [18, 22] </ref>, that conforms to the requirements outlined above. In our descriptions, we assume some familiarity with Soar's problem-solving model, which involves applying operators to states to reach a desired state. Section 6 also presents experimental results illustrating the dynamic behavior of agents based on this architecture. <p> Dynamically share and unshare multiple models. 3. Execute multiple models in a (pseudo-)simultaneous fashion. 4. Support high-bandwidth inter-model communication. We have implemented a variant of the Soar integrated architecture <ref> [18] </ref> that conforms to these requirements. This variant is actually implemented in terms of Soar rules, so that it forms an interpretive layer on top of Soar. It simulates parallelism in the execution of multiple models (and the agent's own behaviors) via interleaved model execution.
Reference: 19. <author> K. Pimentel and K. Teixeira. </author> <title> Virtual reality: Through the new looking glass. </title> <address> Windcrest/McGraw-Hill, </address> <year> 1994. </year>
Reference-contexts: In these simulations, humans may interact with tens or hundreds of intelligent agents, as they participate in realistic traffic environments that simulate traffic jams and pedestrians [8], or air-traffic control environments that simulate multiple aircraft on airfields <ref> [19] </ref>, or large-scale combat environments that simulate friendly and enemy troops [30]. Such real-time interaction is also seen in robotic environments, particularly in work such as robotic collaboration without communication [16]. In all these environments, agent tracking is a key capability required for intelligent interaction.
Reference: 20. <author> A. S. Rao. </author> <title> Means-end plan recognition: Towards a theory of reactive recognition. </title> <booktitle> In Proceedings of the International Conference on Knowledge Representation and Reasoning (KR-94). </booktitle>
Reference-contexts: Fig. 6. Dynamic agent behavior in one-vs-two air-combat simulation for 100 cycles. 7 Related Work There are at least three main areas of related work. The first one is agent architectures. In this area, Rao's work on reactive plan recognition <ref> [20] </ref> based on the PRS/dMARS architecture [10] is closest in spirit to the work reported here. The underlying concept is to extend agent architectures, specifically the PRS architecture, to enable it to execute models of other agents in service of reactive recognition.
Reference: 21. <author> A. S. Rao and G. Murray. </author> <title> Multi-agent mental-state recognition and its application to air--combat modelling. </title> <booktitle> In Proceedings of the Workshop on Distributed Artificial Intelligence (DAI-94). </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, Technical report WS-94-02, </publisher> <year> 1994. </year>
Reference-contexts: The resulting architecture can execute an agent's own behavior while simultaneously executing models of other agents in its environment. The similarity goes beyond the proposed architecture in fact, simulated air-combat is one proposed area of application of this work <ref> [21] </ref>. While Rao has not focused on recursive agent- and agent-group tracking, it should be possible to extend his work to address those, and apply optimizations such as model sharing discussed in this article.
Reference: 22. <author> P. S. Rosenbloom, J. E. Laird, A. Newell, , and R. McCarl. </author> <title> A preliminary analysis of the soar architecture as a basis for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 47(1-3):289-325, </volume> <year> 1991. </year>
Reference-contexts: In such cases, the interpretations are revised in real-time, via an on-line repair mechanism. RESC's real-time character derives from its situatedness, its quick commitments, and its on-line repair. Section 6 presents an implementation of an agent architecture, a variation on the Soar integrated architecture <ref> [18, 22] </ref>, that conforms to the requirements outlined above. In our descriptions, we assume some familiarity with Soar's problem-solving model, which involves applying operators to states to reach a desired state. Section 6 also presents experimental results illustrating the dynamic behavior of agents based on this architecture. <p> in particular, via two of Soar's architectural features: (i) a decision procedure that supports flexibility by integrating all available knowledge about preferences among candidate operators before deciding to commit to a single operator; (ii) termination conditions for operators that support reactivity by terminating operators in response to the given situation <ref> [22] </ref>. These architectural features get reused when other agents' models are executed on the same architecture. To illustrate this re-use, we assume for now that D and L possess an identical set of maneuvers. 3 Thus, D uses a hierarchy such 3 This is not a necessary condition.
Reference: 23. <author> F. Song and R. Cohen. </author> <title> Temporal reasoning during plan recognition. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. </booktitle> <address> Menlo Park, Calif.: </address> <publisher> AAAI press, </publisher> <year> 1991. </year>
Reference-contexts: This agent tracking capability is closely related to plan recognition, which involves recognizing agents' plans based on observations of their actions <ref> [15, 2, 23] </ref>. One key difference is that plan-recognition efforts typically focus on tracking a narrower (plan-based) class of agent behaviors, as seen in static, single-agent domains. In particular, they assume that agents rigidly follow plans step-by-step.
Reference: 24. <author> The DIS steering committee. </author> <title> The dis vision: A map to the future of distributed simulation. </title> <type> Technical report, </type> <institution> Institute for simulation and training, University of Central Florida, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: In the arena of entertainment, recent work has focused on real-time, dynamic interactivity among multiple agents within virtual reality environments [5, 12, 17]. Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations <ref> [24, 26, 33] </ref>.
Reference: 25. <author> M. Tambe. </author> <title> Recursive agent and agent-group tracking in a real-time dynamic environment. </title> <booktitle> In Proceedings of the International Conference on Multi-agent systems (ICMAS), </booktitle> <year> 1995. </year>
Reference-contexts: Recursively tracking its own actions from the perspective of other agents, so as to understand their impact on the other agents' behaviors. 3. Tracking groups of other agents, possibly acting in coordination. 1 This article is based on our previous work on agent tracking <ref> [28, 25] </ref>. However, it focuses mainly on architectural implications of that work, rather than the tracking capability itself. 4. Simultaneously tracking and reacting to other agents' actions. 5. Tracking other agents' activities in real-time, while resolving ambiguities. <p> The key is to execute appropriate agent models <ref> [25] </ref>. Recursive tracking requires the execution of a recursive model. Consider, for instance, D's recursive tracking in Figure 1. D can recursively track its own actions from L's perspective, by executing model DLD (D's model of L's model of D). <p> Yet, such selectivity should not cause an agent to be completely ignorant of critical information that a model may provide (e.g., a pilot agent should not be ignorant of an opponent's missile firing). One optimization that enables such selective tracking is model sharing <ref> [25] </ref>. The overall motivation is that if there is a model y that is near-identical to a model x , then model y 's states and operators can be shared with those of model x .
Reference: 26. <author> M. Tambe, W. L. Johnson, R. Jones, F. Koss, J. E. Laird, P. S. Rosenbloom, and K. Schwamb. </author> <title> Intelligent agents for interactive simulation environments. </title> <journal> AI Magazine, </journal> <volume> 16(1), </volume> <month> Spring </month> <year> 1995. </year>
Reference-contexts: In the arena of entertainment, recent work has focused on real-time, dynamic interactivity among multiple agents within virtual reality environments [5, 12, 17]. Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations <ref> [24, 26, 33] </ref>. <p> Section 7 presents related work, and Section 8 concludes. 2 Agent Tracking in a Real-world Setting Our investigation of agent tracking is based on an on-going effort to build intelligent pilot agents for a synthetic combat environment <ref> [26] </ref>. This environment is based on a commercially developed simulator called ModSAF [7], which has already been used in an operational military exercise involving human participants. ModSAF provides a synthetic yet real-world setting for studying a broad range of challenging issues in agent tracking. <p> The key point to note in Figure 4 is that the architecture needs to (and is able to) continuously switch back and forth between acting and tracking activities. Figure 5 5 These agents are themselves variations of agents, based on Soar, that were developed for this environment <ref> [26, 29] </ref>. Fig. 4. Dynamic agent behavior in one-vs-one air-combat simulation for a complete engagement. Illustrates simulation cycles devoted by the architecture to tracking, acting, and waiting. <p> Agents based on this architecture have been developed for the dynamic, real-time, multi-agent environment of battlefield simulation. While synthetic, this is nonetheless a real-world enviroment, already used in a large-scale operational military exercise <ref> [26] </ref>. With this variant architecture at its base, agents are capable of successfully tracking others in this challenging environment. Among issues for future work, we are looking into generalizing the lessons learned here to other real-time comprehension tasks, where the input may not necessarily be other agents' actions.
Reference: 27. <author> M. Tambe and P. S. Rosenbloom. </author> <title> Event tracking in a dynamic multi-agent environment. </title> <journal> Computational Intelligence, </journal> <note> (To appear), 1995. WWW: http: //www.isi.edu/soar/tambe/event.html. </note>
Reference-contexts: This article will only briefly touch upon this last item. Previous model tracing and plan recognition systems have certainly dealt with the problem of ambiguity resolution although, many of these solutions are not necessarily intended for real-time environments <ref> [28, 27] </ref>. Elsewhere, we have presented an approach called RESC (for REal-time Situated Commitments), that builds upon the technique from Section 3, and aims to resolve ambiguities in real-time [28]. The architectural implications of agent tracking described in this article are not dependent on RESC. <p> Thus, changes in behaviors have to be continuously communicated among models. Indeed, in Figure 1, changes in aircraft maneuvers, and their effect on geometry, have to be continuously communicated among agent models <ref> [27] </ref>. An agent architecture should facilitate such high bandwidth inter-model communication. 6 Implementation Previous sections have outlined four key requirements for agent architectures to facilitate real-time, dynamic agent tracking. In particular, an agent architecture should have the following capabilities: 1.
Reference: 28. <author> M. Tambe and P. S. Rosenbloom. Resc: </author> <title> An approach to agent tracking in a real-time, dynamic environment. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <year> 1995. </year>
Reference-contexts: Recursively tracking its own actions from the perspective of other agents, so as to understand their impact on the other agents' behaviors. 3. Tracking groups of other agents, possibly acting in coordination. 1 This article is based on our previous work on agent tracking <ref> [28, 25] </ref>. However, it focuses mainly on architectural implications of that work, rather than the tracking capability itself. 4. Simultaneously tracking and reacting to other agents' actions. 5. Tracking other agents' activities in real-time, while resolving ambiguities. <p> This article will only briefly touch upon this last item. Previous model tracing and plan recognition systems have certainly dealt with the problem of ambiguity resolution although, many of these solutions are not necessarily intended for real-time environments <ref> [28, 27] </ref>. Elsewhere, we have presented an approach called RESC (for REal-time Situated Commitments), that builds upon the technique from Section 3, and aims to resolve ambiguities in real-time [28]. The architectural implications of agent tracking described in this article are not dependent on RESC. <p> Elsewhere, we have presented an approach called RESC (for REal-time Situated Commitments), that builds upon the technique from Section 3, and aims to resolve ambiguities in real-time <ref> [28] </ref>. The architectural implications of agent tracking described in this article are not dependent on RESC. <p> In particular, given its limited computational resources, the agent may be unable to execute relevant operators from all its models in real-time, possibly jeopardizing its very survival. action duration, as well as in the preferences among possible actions can be addressed <ref> [28] </ref>. Thus, optimizations involving some form of selective tracking appear necessary for real-time execution of these models. Yet, such selectivity should not cause an agent to be completely ignorant of critical information that a model may provide (e.g., a pilot agent should not be ignorant of an opponent's missile firing).
Reference: 29. <author> M. Tambe, K. Schwamb, and P. S. Rosenbloom. </author> <title> Building intelligent pilots for simulated rotary wing aircraft. </title> <booktitle> In Proceedings of the Fifth Conference on Computer Generated Forces and Behavioral Representation, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Here, as a participant in the team activity, a subordinate may be required to track the leader (in the front) and possibly other members, to detect distinct changes in their method of flight, e.g., following the ground contour, flying nap-of the earth, or flying steady altitude <ref> [29] </ref>, or to avoid collisions with teammates, especially when they are about to break formation. At a specified (holding) point (shown by x), the leader and other members may start hovering, an indication to all the teammates that they should wait at that point. <p> The key point to note in Figure 4 is that the architecture needs to (and is able to) continuously switch back and forth between acting and tracking activities. Figure 5 5 These agents are themselves variations of agents, based on Soar, that were developed for this environment <ref> [26, 29] </ref>. Fig. 4. Dynamic agent behavior in one-vs-one air-combat simulation for a complete engagement. Illustrates simulation cycles devoted by the architecture to tracking, acting, and waiting.
Reference: 30. <author> J. A. Thorpe, J. E. Shiflett, G. W. Bloedorn, M. F. Hayes, and D. C. Miller. </author> <title> The simnet network and protocols. </title> <type> Technical Report 7102, </type> <institution> BBN systems and technologies corporation, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: In these simulations, humans may interact with tens or hundreds of intelligent agents, as they participate in realistic traffic environments that simulate traffic jams and pedestrians [8], or air-traffic control environments that simulate multiple aircraft on airfields [19], or large-scale combat environments that simulate friendly and enemy troops <ref> [30] </ref>. Such real-time interaction is also seen in robotic environments, particularly in work such as robotic collaboration without communication [16]. In all these environments, agent tracking is a key capability required for intelligent interaction.
Reference: 31. <author> J. Vidal and E. Durfee. </author> <title> Recursive agent modeling using limited rationality. </title> <editor> In M. Wooldridge, J. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents, Vol II Proceedings of the 1995 workshop on Agent theories, Architectures and Languages (ATAL-95), Lectures Notes in Articificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1996. </year> <note> (In this volume). </note>
Reference-contexts: In addition, some formal approaches for agent modeling, and in particular for recursive agent modeling, are also being investigated [11]. Vidal and Durfee attack the problem of combinatorial explosion in such recursive modeling, and propose a formal approach to tame the combinatorics <ref> [31] </ref>. Understanding the relationship of these formal approaches to approaches inspired by practical applications, as in the work presented in this article, is a key area for future research.
Reference: 32. <author> B. Ward. ET-Soar: </author> <title> Toward an ITS for Theory-Based Representations. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon Univ., </institution> <year> 1991. </year>
Reference-contexts: Examples of such environments include applications in arenas such as education, entertainment, and training. For instance, in the education arena, intelligent tutoring systems need to interact with students in real-time <ref> [32] </ref>. In the arena of entertainment, recent work has focused on real-time, dynamic interactivity among multiple agents within virtual reality environments [5, 12, 17]. Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations [24, 26, 33]. <p> Tracking other agents' activities in real-time, while resolving ambiguities. Section 3 presents an approach to agent tracking that addresses the first item above: tracking flexible and reactive behaviors. The approach is based on the model tracing technique used in intelligent tutoring systems (ITS) for tracking student actions <ref> [1, 32] </ref>. To track the activities of a student, an ITS executes a model of that student to generate predictions. Tracking proceeds by matching these predictions with actual observations.
Reference: 33. <author> B. Webber and N. Badler. </author> <title> Virtual interactive collaborators for simulation and training. </title> <booktitle> In Proceedings of the Conference on Computer Generated Forces and Behavioral Representation. </booktitle> <address> Orlando, Florida: </address> <institution> Institute for Simulation and Training, University of Central Florida, </institution> <month> May </month> <year> 1993. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: In the arena of entertainment, recent work has focused on real-time, dynamic interactivity among multiple agents within virtual reality environments [5, 12, 17]. Similarly, in the arena of training, there is a recent thrust on dynamic, real-time interactive simulations <ref> [24, 26, 33] </ref>.
References-found: 33

