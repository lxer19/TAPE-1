URL: ftp://ftp.cs.toronto.edu/pub/kbms/cbr-iea-aie98.ps.Z
Refering-URL: http://www.cs.utoronto.ca/~juris/pub.html
Root-URL: 
Email: jurisica@fis.utoronto.ca  janice@qucis.queensu.ca  
Phone: 2  
Title: An Efficient Approach to Iterative Browsing and Retrieval for Case-Based Reasoning  
Author: Igor Jurisica and Janice Glasgow 
Address: 140 St. George Str., Toronto, ON M5S 3G6, Canada,  K7L 3N6, Canada,  
Affiliation: 1 Univ. of Toronto, Faculty of Information Studies,  Queen's Univ., Dept. of Computing and Inf. Sci., Kingston, ON  
Note: Lecture Notes in Computer Science, IEA/AIE*98, Springer-Verlag  
Abstract: A case base is a repository of past experiences that can be used for problem solving. Given a new problem, expressed in the form of a query, the case base is browsed in search of "similar" or "relevant" cases. One way to perform this search involves the iterative evaluation of a series of queries against the case base, where each query in the series is obtained by restricting or relaxing the preceding query. The paper considers alternative approaches for implementing iterative browsing in case-based reasoning systems, including a naive algorithm, which evaluates each query independent of earlier evaluations, and an incremental algorithm, which reuses the results of past query evaluations to minimize the computation required for subsequent queries. In particular, the paper proposes an efficient algorithm for case base browsing and retrieval using database techniques for view maintenance. In addition, the paper evaluates the performance of the proposed algorithm with respect to alternative approaches considering two perspectives: (i) experimental efficiency evaluation using diverse application domains, and (ii) scalabil ity evaluation using the performance model of the proposed system.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Bkgaard and L. Mark. </author> <title> Incremental computation of time-varying query expressions. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 7(4) </volume> <pages> 583-589, </pages> <year> 1995. </year>
Reference-contexts: Special counters are used to prevent repeating context restrictions and relaxations forever. Context transformations modify attributes of the least important category first. Only one category is transformed at a time. 4 Incremental Context Modifications Incremental algorithms have previously been successfully applied to database systems for view maintenance <ref> [1, 5, 9, 10] </ref>. In general, an incremental view maintenance algorithm handles deletions, negations, updates, aggregation and recursion. Various approaches have been proposed to tackle these problems. One well known incremental view maintenance algorithm is a counting algorithm, which supports delete and re-derive operations [11]. <p> Small updates to the query generally produce only small changes to the query result. Thus, an incremental approach requires only local changes to the query [10]. The basic idea of incremental query processing is to store query results and reuse them when related queries are computed <ref> [1] </ref>. Assuming that the number of attributes per case is significantly smaller than the total number of cases in the case base suggests that incremental context modification outperforms the process of re-computation of the answer from scratch.
Reference: 2. <author> F. Bancilhon. </author> <title> Naive evaluation of recursively defined relations. </title> <editor> In M.Brodie and J.Mylopoulos, editors, </editor> <booktitle> Knowledge Base Management Systems, </booktitle> <pages> pages 165-178. </pages> <year> 1986. </year>
Reference-contexts: A naive approach takes the new query and submits it to the system (see Figure 1). A more sophisticated approach could take advantage of an already processed query by incrementally modifying its result <ref> [2] </ref>.
Reference: 3. <author> R. Barletta and W. Mark. </author> <title> Explanation-based indexing of cases. </title> <booktitle> In Proc. AAAI, </booktitle> <pages> pages 541-546, </pages> <year> 1988. </year>
Reference-contexts: CBR has previously been successfully applied in various domains. However, in many of these studies, only small case bases were considered, often because the implemented system could not efficiently support retrieval for larger case bases. Various approaches, such as indexing <ref> [3, 20, 22] </ref> and selective forgetting [23, 27], have been proposed to improve the performance of CBR systems without decreasing competence. Parallel architectures have also been suggested as a way of increasing efficiency [24].
Reference: 4. <author> J. A. Blakeley, P.-A. Larson, and F. Wm. Tompa. </author> <title> Efficiently updating materialized views. </title> <booktitle> In ACM-SIGMOD, </booktitle> <pages> pages 61-71, </pages> <year> 1986. </year>
Reference-contexts: Determining satisfiability only requires testing if the case in the set of retrieved cases must be removed either because it needs excluded value to match or because it cannot match an added attribute. The idea of incremental context relaxation and restriction has evolved from the notion of differential queries <ref> [4] </ref>. First, parts of the context affected by the transformation are determined. Second, only those parts are recomputed. <p> Their methods for adapting the Where part of an SQL are similar to our context transformations; the difference lies in handling reduction and expansion, which is not supported or necessary in database view maintenance. Blakeley et al. <ref> [4] </ref> propose an approach where an incremental view maintenance is supported for base relations updates but not for updates to views, as in our system. FRANK is a case retrieval system, applied to the problem of back-injury diagnosis [21].
Reference: 5. <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In VLDB-91, </booktitle> <pages> pages 577-589, </pages> <address> Barcelona, Spain, </address> <year> 1991. </year>
Reference-contexts: Mylopoulos for comments and suggestions on an earlier draft. The research has been supported by IBM Centre for Advanced Studies, Canadian Software Engineering Research, and Information Technology Research Centre of Ontario. A naive approach to iterative browsing involves evaluating each query in-dependently. A more sophisticated approach involves incremental computation <ref> [5, 9, 10] </ref>, where the result of a query is reused to evaluate a subsequent query more efficiently. The amount of necessary modification to a query in an incremental approach can be, to some degree, controlled by collecting and using extra information produced during query evaluation. <p> Special counters are used to prevent repeating context restrictions and relaxations forever. Context transformations modify attributes of the least important category first. Only one category is transformed at a time. 4 Incremental Context Modifications Incremental algorithms have previously been successfully applied to database systems for view maintenance <ref> [1, 5, 9, 10] </ref>. In general, an incremental view maintenance algorithm handles deletions, negations, updates, aggregation and recursion. Various approaches have been proposed to tackle these problems. One well known incremental view maintenance algorithm is a counting algorithm, which supports delete and re-derive operations [11]. <p> It assumes universal materialization of predicates and stores counts of the number of derivations to be associated with each tuple. Another algorithm derives production rules to maintain selected SQL views, namely views without duplicates, aggregation and negation <ref> [5] </ref>. Because an incremental algorithm changes only relevant parts of the answer or view, instead of completely re-computing the answer, it is usually substantially more efficient than a naive one.
Reference: 6. <author> B. D'Ambrosio. </author> <title> Process, structure, and modularity in reasoning with uncertainty. </title> <editor> In R. Shachter, T. Levitt, L. Kanal, and J. Lemmer, editors, </editor> <booktitle> Uncertainty in Artificial Intelligence 4, </booktitle> <pages> pages 15-25. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: An approximate answer can be iteratively improved, so that the change between an approximate and an accurate answer is continuous. This is an important feature for bounded resource computation <ref> [6, 12] </ref>.
Reference: 7. <author> J. Frawley and G. Piatetsky-Shapiro. </author> <title> Knowledge Discovery in Databases. </title> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: Individual attributes and values are grouped into one or more categories. Category membership is defined either using domain knowledge (if available) or using a knowledge-discovery algorithm <ref> [7] </ref>. Different constraints may be ascribed to different categories, i.e. individual groups of attributes, which helps diminish the negative effect of irrelevant attributes. Context plays an important role during case retrieval.
Reference: 8. <author> T. Gaasterland. </author> <title> Cooperative answering through controlled query relaxation. </title> <journal> IEEE Expert, Intelligent Systems and their Applications, </journal> <volume> 12(5) </volume> <pages> 48-59, </pages> <year> 1997. </year>
Reference-contexts: This may lead to a decreased number of cases that satisfy the resulting context. 3.3 Transforming Context Iteratively The relaxation technique can advantageously be used for returning answers to a specific query as well as returning related answers <ref> [8] </ref>. Without an automatic query relaxation, users would need to submit alternative queries. The restriction technique works analogously, but is used mainly for controlling the amount of returned information, preventing information overload.
Reference: 9. <author> T. Griffin and L. Libkin. </author> <title> Incremental maintenance of views with duplicates. </title> <booktitle> In ACM SIGMOD, </booktitle> <pages> pages 328-339, </pages> <address> San Jose, CA, </address> <year> 1995. </year>
Reference-contexts: Mylopoulos for comments and suggestions on an earlier draft. The research has been supported by IBM Centre for Advanced Studies, Canadian Software Engineering Research, and Information Technology Research Centre of Ontario. A naive approach to iterative browsing involves evaluating each query in-dependently. A more sophisticated approach involves incremental computation <ref> [5, 9, 10] </ref>, where the result of a query is reused to evaluate a subsequent query more efficiently. The amount of necessary modification to a query in an incremental approach can be, to some degree, controlled by collecting and using extra information produced during query evaluation. <p> Special counters are used to prevent repeating context restrictions and relaxations forever. Context transformations modify attributes of the least important category first. Only one category is transformed at a time. 4 Incremental Context Modifications Incremental algorithms have previously been successfully applied to database systems for view maintenance <ref> [1, 5, 9, 10] </ref>. In general, an incremental view maintenance algorithm handles deletions, negations, updates, aggregation and recursion. Various approaches have been proposed to tackle these problems. One well known incremental view maintenance algorithm is a counting algorithm, which supports delete and re-derive operations [11].
Reference: 10. <author> A. Gupta, I. Mumick, and K. Ross. </author> <title> Adapting materialized views after redefinitions. </title> <booktitle> In ACM SIGMOD, </booktitle> <pages> pages 211-222, </pages> <address> San Jose, CA, </address> <year> 1995. </year>
Reference-contexts: Mylopoulos for comments and suggestions on an earlier draft. The research has been supported by IBM Centre for Advanced Studies, Canadian Software Engineering Research, and Information Technology Research Centre of Ontario. A naive approach to iterative browsing involves evaluating each query in-dependently. A more sophisticated approach involves incremental computation <ref> [5, 9, 10] </ref>, where the result of a query is reused to evaluate a subsequent query more efficiently. The amount of necessary modification to a query in an incremental approach can be, to some degree, controlled by collecting and using extra information produced during query evaluation. <p> Special counters are used to prevent repeating context restrictions and relaxations forever. Context transformations modify attributes of the least important category first. Only one category is transformed at a time. 4 Incremental Context Modifications Incremental algorithms have previously been successfully applied to database systems for view maintenance <ref> [1, 5, 9, 10] </ref>. In general, an incremental view maintenance algorithm handles deletions, negations, updates, aggregation and recursion. Various approaches have been proposed to tackle these problems. One well known incremental view maintenance algorithm is a counting algorithm, which supports delete and re-derive operations [11]. <p> Small updates to the query generally produce only small changes to the query result. Thus, an incremental approach requires only local changes to the query <ref> [10] </ref>. The basic idea of incremental query processing is to store query results and reuse them when related queries are computed [1]. <p> on respective case base sizes, case representation complexity, and context complexity, when using query relaxation and restriction during iterative browsing. size and size of the context using the performance model. 6 Discussion An incremental algorithm for adapting a view in response to changes in the view definition is presented in <ref> [10] </ref>. Authors consider an SQL Select-From-Where-GroupBy, Union views, Except views, and present local adaptation strategies that use old view materialization to compute changes in the view.
Reference: 11. <author> A. Gupta, I. Mumick, and V. Subrahmanian. </author> <title> Maintaining views incrementally. </title> <booktitle> In Proc. of the 12 th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 157-166, </pages> <year> 1993. </year>
Reference-contexts: In general, an incremental view maintenance algorithm handles deletions, negations, updates, aggregation and recursion. Various approaches have been proposed to tackle these problems. One well known incremental view maintenance algorithm is a counting algorithm, which supports delete and re-derive operations <ref> [11] </ref>. It assumes universal materialization of predicates and stores counts of the number of derivations to be associated with each tuple. Another algorithm derives production rules to maintain selected SQL views, namely views without duplicates, aggregation and negation [5].
Reference: 12. <author> E. Horvitz. </author> <title> Reasoning under varying and uncertain resource constraints. </title> <booktitle> In Proc. AAAI, </booktitle> <pages> pages 111-116, </pages> <year> 1988. </year>
Reference-contexts: An approximate answer can be iteratively improved, so that the change between an approximate and an accurate answer is continuous. This is an important feature for bounded resource computation <ref> [6, 12] </ref>.
Reference: 13. <author> I. Jurisica. </author> <title> A similarity-based retrieval tool for software repositories. </title> <booktitle> In The 3 rd Workshop on AI and Software Eng.: Breaking the Mold. IJCAI-95, </booktitle> <address> Montreal, </address> <year> 1995. </year>
Reference-contexts: in terms of two continuous gain settings and two discrete choices of mechanical linkages [15], (iii) prediction in medicine - suggesting a cost-effective treatment for in-vitro fertilization patients without compromising the probability for successful pregnancy [17], (iv) letter recognition [16] and (v) software reuse - similarity-based retrieval of software artifacts <ref> [13] </ref>. In [18] we show how a generic CBR system prototype TA3 can be custom-tailored to satisfy specific requirements in individual domains. Here we report on efficiency improvement due to using an incremental query modification.
Reference: 14. <author> I. Jurisica. </author> <title> Supporting flexibility. A case-based reasoning approach. </title> <booktitle> In The AAAI Fall Symposium. Flexible Computation in Intelligent Systems: Results, Issues, and Opportunities, </booktitle> <address> Cambridge, MA, </address> <year> 1996. </year>
Reference-contexts: The context transformation process controls the quality and quantity of retrieved cases and thus when transforming the context, the system may return an approximate answer quickly or may spend more resources to calculate a more accurate answer <ref> [14] </ref>. An approximate answer can be iteratively improved, so that the change between an approximate and an accurate answer is continuous. This is an important feature for bounded resource computation [6, 12].
Reference: 15. <author> I. Jurisica and J. Glasgow. </author> <title> A case-based reasoning approach to learning control. </title> <booktitle> In 5 th Int. Conf. on Data and Knowledge Systems for Manufacturing and Engineering, </booktitle> <address> DKSME-96, Phoenix, AZ, </address> <year> 1996. </year>
Reference-contexts: We have tested both the competence and scalability of the proposed system: (i) learning control solving the inverse kinematic task for a three-link spherical, angular robot <ref> [15] </ref>, (ii) classification into a continuous class predicting the rise time of a servomechanism in terms of two continuous gain settings and two discrete choices of mechanical linkages [15], (iii) prediction in medicine - suggesting a cost-effective treatment for in-vitro fertilization patients without compromising the probability for successful pregnancy [17], (iv) <p> the competence and scalability of the proposed system: (i) learning control solving the inverse kinematic task for a three-link spherical, angular robot <ref> [15] </ref>, (ii) classification into a continuous class predicting the rise time of a servomechanism in terms of two continuous gain settings and two discrete choices of mechanical linkages [15], (iii) prediction in medicine - suggesting a cost-effective treatment for in-vitro fertilization patients without compromising the probability for successful pregnancy [17], (iv) letter recognition [16] and (v) software reuse - similarity-based retrieval of software artifacts [13].
Reference: 16. <author> I. Jurisica and J. Glasgow. </author> <title> Case-based classification using similarity-based retrieval. </title> <journal> International Journal of Artificial Intelligence Tools. Speciall Issue of IEEE ICTAI-96 Best Papers, </journal> <volume> 6(4) </volume> <pages> 511-536, </pages> <year> 1997. </year>
Reference-contexts: Variable-context similarity-based retrieval is monotonic <ref> [16] </ref>. For the purpose of case retrieval, the similarity relation maps a context and a case base onto the set of cases SC in the case base that satisfy the context. <p> partial order (by relaxation) of contexts results in a partial order (by subset) of case sets: If 0 1 n ; then SC 0 SC 1 SC n : Previously we have shown that if 1 is a relaxation of 2 then all cases that satisfy 2 also satisfy 1 <ref> [16] </ref>: 8C 2 : (sat (C; 2 ) ^ 1 2 ) ! sat (C; 1 ): (3) A context can also be iteratively restricted by making it progressively more specific, i.e., allowing fewer cases to satisfy it. As for relaxation, expansion and specialization produce a partial order of contexts. <p> into a continuous class predicting the rise time of a servomechanism in terms of two continuous gain settings and two discrete choices of mechanical linkages [15], (iii) prediction in medicine - suggesting a cost-effective treatment for in-vitro fertilization patients without compromising the probability for successful pregnancy [17], (iv) letter recognition <ref> [16] </ref> and (v) software reuse - similarity-based retrieval of software artifacts [13]. In [18] we show how a generic CBR system prototype TA3 can be custom-tailored to satisfy specific requirements in individual domains. Here we report on efficiency improvement due to using an incremental query modification.
Reference: 17. <author> I. Jurisica, J. Mylopoulos, J. Glasgow, H. Shapiro, and R. Casper. </author> <title> Case-based reasoning in IVF: Prediction and knowledge mining. </title> <journal> AI in Medicine, </journal> <volume> 12(1) </volume> <pages> 1-24, </pages> <year> 1998. </year>
Reference-contexts: Individual categories are ordered according to the importance of their attributes. If no priority is assigned to a category, they are accessed sequentially. If the case has only one category, the matching is equivalent to x-of-n matching. 2 Relevant attributes can be located using a knowledge-discovery algorithm <ref> [17] </ref>. However, if more categories are defined, then important attributes may require n-of-n matching, less important attributes x-of-n matching (for x &lt; n) and irrelevant attributes may be eliminated from consideration altogether. Value constraints specify constraints on attribute values. <p> robot [15], (ii) classification into a continuous class predicting the rise time of a servomechanism in terms of two continuous gain settings and two discrete choices of mechanical linkages [15], (iii) prediction in medicine - suggesting a cost-effective treatment for in-vitro fertilization patients without compromising the probability for successful pregnancy <ref> [17] </ref>, (iv) letter recognition [16] and (v) software reuse - similarity-based retrieval of software artifacts [13]. In [18] we show how a generic CBR system prototype TA3 can be custom-tailored to satisfy specific requirements in individual domains. Here we report on efficiency improvement due to using an incremental query modification.
Reference: 18. <author> I. Jurisica and B. Nixon. </author> <title> Building quality into case-based reasoning systems. </title> <booktitle> In CAiSE*98, Lecutre Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: In <ref> [18] </ref> we show how a generic CBR system prototype TA3 can be custom-tailored to satisfy specific requirements in individual domains. Here we report on efficiency improvement due to using an incremental query modification.
Reference: 19. <author> J. Ortega. </author> <title> On the informativeness of the DNA promoter sequences domain theory. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 2 </volume> <pages> 361-367, </pages> <year> 1995. </year> <note> Research Note. </note>
Reference-contexts: Two types of constraints can be imposed on attributes and their values. Car-dinality constraints specify the number of attributes required to match for a particular category. This is an extension of an x-of-n matching algorithm <ref> [19] </ref>, since different categories may have different matching requirements, i.e., different x. Individual categories are ordered according to the importance of their attributes. If no priority is assigned to a category, they are accessed sequentially.
Reference: 20. <author> A. Ram. </author> <title> Indexing, elaboration and refinement: Incremental learning of explanatory cases. </title> <journal> Machine Learning, </journal> <volume> 10(3) </volume> <pages> 201-248, </pages> <year> 1993. </year>
Reference-contexts: CBR has previously been successfully applied in various domains. However, in many of these studies, only small case bases were considered, often because the implemented system could not efficiently support retrieval for larger case bases. Various approaches, such as indexing <ref> [3, 20, 22] </ref> and selective forgetting [23, 27], have been proposed to improve the performance of CBR systems without decreasing competence. Parallel architectures have also been suggested as a way of increasing efficiency [24].
Reference: 21. <author> E. L. Rissland, J. J. Daniels, Z. B. Rubinstein, and D. B. Skalak. </author> <title> Case-based diagnostic analysis in a blackboard architecture. </title> <booktitle> In Proc. of AAAI-93, </booktitle> <year> 1993. </year>
Reference-contexts: Blakeley et al. [4] propose an approach where an incremental view maintenance is supported for base relations updates but not for updates to views, as in our system. FRANK is a case retrieval system, applied to the problem of back-injury diagnosis <ref> [21] </ref>. The user provides a description of a patient's symptoms and selects from a hierarchy of report types. A flexible control mechanism filters user's top-level considerations through the system's processing. A plan is then selected based on the report type.
Reference: 22. <author> C. M. Seifert. et al. </author> <title> Case-based learning predictive features in indexing. </title> <booktitle> Machine Learning, </booktitle> <address> 16(1-2):37-56, </address> <year> 1994. </year>
Reference-contexts: CBR has previously been successfully applied in various domains. However, in many of these studies, only small case bases were considered, often because the implemented system could not efficiently support retrieval for larger case bases. Various approaches, such as indexing <ref> [3, 20, 22] </ref> and selective forgetting [23, 27], have been proposed to improve the performance of CBR systems without decreasing competence. Parallel architectures have also been suggested as a way of increasing efficiency [24].
Reference: 23. <author> B. Smyth and M. T. Keane. </author> <title> Remembering to forget: A competence-preserving case deletion policy for case-based reasoning systems. </title> <booktitle> In Proc. of the 14 th IJCAI, </booktitle> <pages> pages 377-382, </pages> <address> Montreal, Quebec, </address> <year> 1995. </year>
Reference-contexts: CBR has previously been successfully applied in various domains. However, in many of these studies, only small case bases were considered, often because the implemented system could not efficiently support retrieval for larger case bases. Various approaches, such as indexing [3, 20, 22] and selective forgetting <ref> [23, 27] </ref>, have been proposed to improve the performance of CBR systems without decreasing competence. Parallel architectures have also been suggested as a way of increasing efficiency [24]. Our approach to performance improvement is based on incremental context modification, an approach which has previously proven successful in database applications.
Reference: 24. <author> E. Sumita, N. Nisiyama, and H. Iida. </author> <title> The relationship between architectures and example-retrieval times. </title> <booktitle> In Proc. of AAAI, </booktitle> <pages> pages 478-483, </pages> <address> Seattle, </address> <year> 1994. </year>
Reference-contexts: Various approaches, such as indexing [3, 20, 22] and selective forgetting [23, 27], have been proposed to improve the performance of CBR systems without decreasing competence. Parallel architectures have also been suggested as a way of increasing efficiency <ref> [24] </ref>. Our approach to performance improvement is based on incremental context modification, an approach which has previously proven successful in database applications. The presented results support the claim that incremental context manipulation is generally more efficient then a naive approach.
Reference: 25. <author> P. R. Thagard, K. J. Holyoak, G. Nelson, and D. Gotchfeld. </author> <title> Analog retrieval by constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 46 </volume> <pages> 259-310, </pages> <year> 1990. </year>
Reference-contexts: The process of retrieving relevant cases can then be described as a constraint satisfaction process <ref> [25] </ref>. Two types of constraints can be imposed on attributes and their values. Car-dinality constraints specify the number of attributes required to match for a particular category. This is an extension of an x-of-n matching algorithm [19], since different categories may have different matching requirements, i.e., different x.
Reference: 26. <author> M. B. Twidale, D. M. Nichols, and C. D. Paice. </author> <title> Browsing is collaborative process. </title> <booktitle> Information Processing & Management, </booktitle> <volume> 33(6) </volume> <pages> 761-783, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction There are many applications where iterative browsing is an effective way of obtaining information and supporting collaboration <ref> [26] </ref>. It is particularly useful for exploratory search in complex domains and for problem solving tasks that involve considering alternative situations (e.g., examining "what-if" scenarios). Such applications include knowledge mining, on-line analytical processing, case-based reasoning (CBR), etc.
Reference: 27. <author> H. Watanabe, K.Okuda, and S.Fujiwara. </author> <title> A strategy for forgetting cases by restricting memory. </title> <journal> IEICE Trans. on Information and Systems, </journal> <volume> E78D(10):1324-1326, </volume> <year> 1995. </year>
Reference-contexts: CBR has previously been successfully applied in various domains. However, in many of these studies, only small case bases were considered, often because the implemented system could not efficiently support retrieval for larger case bases. Various approaches, such as indexing [3, 20, 22] and selective forgetting <ref> [23, 27] </ref>, have been proposed to improve the performance of CBR systems without decreasing competence. Parallel architectures have also been suggested as a way of increasing efficiency [24]. Our approach to performance improvement is based on incremental context modification, an approach which has previously proven successful in database applications.
Reference: 28. <author> D. Wettschereck and T.Dietterich. </author> <title> An experimental comparison of the nearest neighbor and nearest hyperrectangle algorithms. </title> <journal> Machine Learning, </journal> <volume> 19(1) </volume> <pages> 5-27, </pages> <year> 1995. </year> <title> This article was processed using the L a T E X macro package with LLNCS style Fig. 3. Cost of retrieval for naive and incremental reduction, generalization, expansion, and specialization as a function of case base size (j CB j) and size of the context (j Context j). </title>
Reference-contexts: Although this may require additional storage, overall performance is usually improved. This paper proposes an incremental retrieval algorithm for CBR systems. Retrieval is based on a nearest-neighbor matching algorithm <ref> [28] </ref>, which was modified as follows: (i) attributes are grouped into categories of different importance to help control the matching process and diminish the negative effect of irrelevant attributes on performance; (ii) an explicit context is used during similarity assessment to ensure that only relevant cases are retrieved; and (iii) incremental
References-found: 28

