URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-97-01.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Title: A Case Study on Tuning of Genetic Algorithms by Using Performance Evaluation Based on Experimental Design  
Author: Kazuo Sugihara 
Keyword: Genetic algorithms, performance evaluation, tuning, experi mental design, path planning, and mobile robot  
Address: Manoa  
Affiliation: Department of Information and Computer Sciences University of Hawaii at  
Pubnum: ICS-TR-97-01  
Email: sugihara@hawaii.edu  
Web: http://www.ics.hawaii.edu/~sugihara/  
Date: January 14, 1997  
Abstract: This paper proposes four performance measures of a genetic algorithm (GA) which enable us to compare different GAs for an op timization problem and different choices of their parameters' values. The performance measures are defined in terms of observations in simulation, such as the frequency of optimal solutions, fitness values, the frequency of evolution leaps, and the number of generations needed to reach an optimal solution. We present a case study in which parameters of a GA for robot path planning was tuned and its performance was optimized through performance evaluation by using the measures. Especially, one of the performance measures is used to demonstrate the adaptivity of the GA for robot path planning. We also propose a process of systematic tuning based on techniques for the design of experiments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. T. Alander, </author> <title> An indexed bibliography of genetic algorithms in engineering, </title> <type> Tech. Rep. </type> <institution> No. 94-1-ENG, Univ. of Vaasa, Finland, </institution> <year> (1996). </year> <note> ftp://ftp.uwasa.fi/cs/report94-1/ 23 </note>
Reference-contexts: 1 INTRODUCTION In recent years, genetic algorithms (GAs) [2, 3, 6] have been widely recognized as an effective solving technique for complex problems in the real world [7]. For example, a bibliography <ref> [1] </ref> on applications of GAs even limited to only engineering includes over 1,400 papers as of April 1996. As GAs are getting a larger spectrum of applications, it becomes more crucial to develop a methodology for the design of GAs.
Reference: [2] <author> D. Beasley, D. R. Bull and R. R. Martin, </author> <title> An overview of genetic algo-rithms: Part 1, fundamentals, </title> <note> University Computing 15(2), (1993). ftp://ralph.cs.cf.ac.uk/pub.papers/GAs/ga overview1.ps </note>
Reference-contexts: 1 INTRODUCTION In recent years, genetic algorithms (GAs) <ref> [2, 3, 6] </ref> have been widely recognized as an effective solving technique for complex problems in the real world [7]. For example, a bibliography [1] on applications of GAs even limited to only engineering includes over 1,400 papers as of April 1996. <p> Section 4 proposes the process of tuning and discusses applications of techniques for experimental design to the process. Finally, Section 5 summarizes the paper. 2 PRELIMINARIES 2.1 GENETIC ALGORITHMS A genetic algorithm (GA) <ref> [2, 3, 6] </ref> consists of a population and an evolutionary mechanism. The population is a collection of individuals which represent potential solutions through a mapping called a coding. The evolu 3 tionary mechanism repeatedly transforms the population by executing the following steps. 1. <p> Next, other configurations are examined. For the roulette selection and the roulette tournament selection, the following 4 options are considered as a fitness remapping method in the roulette procedure. 1. Scaling: It is the fitness scaling given in <ref> [2] </ref>. 2. Linear ranking: It assigns P opSize, P opSize 1, P opSize 2, , 2, 1 to individuals in nondecreasing order of their fitness values. 3. Geometric ranking: It assigns 1, 1/2, 1/3, , 1=(P opSize 1), 1=P opSize to individuals in nondecreasing order of their fitness values. 4.
Reference: [3] <author> D. Beasley, D. R. Bull and R. R. Martin, </author> <title> An overview of genetic algorithms: </title> <booktitle> Part 2, research topics, University Computing 15(4), (1993). </booktitle> <address> ftp://ralph.cs.cf.ac.uk/pub.papers/GAs/ga overview2.ps </address>
Reference-contexts: 1 INTRODUCTION In recent years, genetic algorithms (GAs) <ref> [2, 3, 6] </ref> have been widely recognized as an effective solving technique for complex problems in the real world [7]. For example, a bibliography [1] on applications of GAs even limited to only engineering includes over 1,400 papers as of April 1996. <p> Section 4 proposes the process of tuning and discusses applications of techniques for experimental design to the process. Finally, Section 5 summarizes the paper. 2 PRELIMINARIES 2.1 GENETIC ALGORITHMS A genetic algorithm (GA) <ref> [2, 3, 6] </ref> consists of a population and an evolutionary mechanism. The population is a collection of individuals which represent potential solutions through a mapping called a coding. The evolu 3 tionary mechanism repeatedly transforms the population by executing the following steps. 1. <p> The simulation results indicate that a GA without crossover (called the naive evolution <ref> [3] </ref>) works to some extent while a GA without mutation does not work at all. Therefore, they imply that mutation plays a crucial role in the robot path planning problem, although it does not work best without crossover.
Reference: [4] <author> S. K. Choi, J. Yuh and G. Y. Takashige, </author> <title> Design of an omni-directional intelligent navigator, in Underwater Robotic Vehicles: Design and Control, </title> <editor> J. Yuh (Ed.), </editor> <publisher> TSI Press (1995). </publisher>
Reference-contexts: Then, we present a case study in which a GA for robot path planning was tuned by using the measures in order to use it in motion planning of an underwater vehicle being developed at the University of Hawaii <ref> [4] </ref>. The performance of the GA was optimized through performance evaluation by using the proposed measures. With this experience in tuning of the GA by simulation, we propose a process of tuning based on techniques for experimental design. <p> Note that the GA tuned in this paper was designed for motion planning of an autonomous underwater vehicle being developed at the University of Hawaii <ref> [4] </ref>. 3.2 SIMULATION RESULTS This subsection presents results of the simulation of GAs for the path planning problem which we conducted by using our GA Toolkit on the Web [11, 12]. 1 All combinations (called configurations) of the following operators were investigated in the simulation. 1.
Reference: [5] <author> W. J. Diamond, </author> <title> Practical Experiment Designs for Engineers and Scientists, Second Edition, </title> <publisher> Van Norstrand Reinhold, </publisher> <year> (1989). </year>
Reference-contexts: Since every execution of a GA has random nature, its performance must be estimated on average from data measured in the simulation. We define the terminology as follows <ref> [5, 8, 9] </ref>. An experiment is a set of empirical tests performed to derive some conclusion. In the context of the performance evaluation of a GA, it is a set of simulation runs, each of which is a particular execution of the GA for a particular instance of input. <p> It decides choices of experimental units, factors of interest, levels of each factor, etc., for each run. There are the following major techniques for the design of the experiment <ref> [5, 9] </ref>. 1. Randomized Design: Treatments are randomly allocated to experi mental units. 2. Factorial Design: All distinct combinations of levels of factors are 6 chosen as treatments and applied to the same number of experimen-tal units. <p> Mutation Rate = 0:04: It is the probability that each bit is flipped. In the one-at-a-time experiment, 100 runs were executed for each treatment on the same input shown in Figure 1. Thus, we have 100 samples in Bernoulli trials with binomial distribution. Note that a 95% confidence interval <ref> [5] </ref> is about 0.096 when the probability of success in a Bernoulli trial is 0.4. The first configuration to be investigated consists of roulette tournament selection, 1-point crossover and mutation. The GA with the default parameter setting in this configuration is referred to as the standard GA in this paper. <p> In practice, tuning of a GA is commonly solved through extensive ex periments on the performance of the GA by simulation. However, "blind, brute-force" experiments waste time and resources. As mentioned in Section 3.2, techniques for the design of experiments <ref> [5, 9] </ref> should be employed in order to reduce the total number of runs in experiments without loosing the creditability of their results. There are two issues to be addressed in order to conduct experiments efficiently with sufficient accuracy. One issue is the number of treatments to be examined.
Reference: [6] <author> D. E. Goldberg, </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning, </title> <publisher> Addison-Wesley, </publisher> <year> (1989). </year>
Reference-contexts: 1 INTRODUCTION In recent years, genetic algorithms (GAs) <ref> [2, 3, 6] </ref> have been widely recognized as an effective solving technique for complex problems in the real world [7]. For example, a bibliography [1] on applications of GAs even limited to only engineering includes over 1,400 papers as of April 1996. <p> Section 4 proposes the process of tuning and discusses applications of techniques for experimental design to the process. Finally, Section 5 summarizes the paper. 2 PRELIMINARIES 2.1 GENETIC ALGORITHMS A genetic algorithm (GA) <ref> [2, 3, 6] </ref> consists of a population and an evolutionary mechanism. The population is a collection of individuals which represent potential solutions through a mapping called a coding. The evolu 3 tionary mechanism repeatedly transforms the population by executing the following steps. 1.
Reference: [7] <author> D. E. Goldberg, </author> <title> Genetic and evolutionary algorithms come of age, </title> <booktitle> Com-mun. ACM 37(3), </booktitle> <month> (Mar. </month> <year> 1994). </year>
Reference-contexts: 1 INTRODUCTION In recent years, genetic algorithms (GAs) [2, 3, 6] have been widely recognized as an effective solving technique for complex problems in the real world <ref> [7] </ref>. For example, a bibliography [1] on applications of GAs even limited to only engineering includes over 1,400 papers as of April 1996. As GAs are getting a larger spectrum of applications, it becomes more crucial to develop a methodology for the design of GAs.
Reference: [8] <author> H. Kobayashi, </author> <title> Modeling and Analysis, An Introduction to System Performance Evaluation Methodology, </title> <publisher> Addison-Wesley, </publisher> <year> (1981). </year>
Reference-contexts: Since every execution of a GA has random nature, its performance must be estimated on average from data measured in the simulation. We define the terminology as follows <ref> [5, 8, 9] </ref>. An experiment is a set of empirical tests performed to derive some conclusion. In the context of the performance evaluation of a GA, it is a set of simulation runs, each of which is a particular execution of the GA for a particular instance of input.
Reference: [9] <author> T. J. Lorenzen and V. L. Anderson, </author> <title> Design of Experiments: A No-Name Approach, </title> <publisher> Marcel Dekker, </publisher> <year> (1993). </year>
Reference-contexts: Since every execution of a GA has random nature, its performance must be estimated on average from data measured in the simulation. We define the terminology as follows <ref> [5, 8, 9] </ref>. An experiment is a set of empirical tests performed to derive some conclusion. In the context of the performance evaluation of a GA, it is a set of simulation runs, each of which is a particular execution of the GA for a particular instance of input. <p> It decides choices of experimental units, factors of interest, levels of each factor, etc., for each run. There are the following major techniques for the design of the experiment <ref> [5, 9] </ref>. 1. Randomized Design: Treatments are randomly allocated to experi mental units. 2. Factorial Design: All distinct combinations of levels of factors are 6 chosen as treatments and applied to the same number of experimen-tal units. <p> In practice, tuning of a GA is commonly solved through extensive ex periments on the performance of the GA by simulation. However, "blind, brute-force" experiments waste time and resources. As mentioned in Section 3.2, techniques for the design of experiments <ref> [5, 9] </ref> should be employed in order to reduce the total number of runs in experiments without loosing the creditability of their results. There are two issues to be addressed in order to conduct experiments efficiently with sufficient accuracy. One issue is the number of treatments to be examined.
Reference: [10] <author> R. Nakano, Y. Davidor and T. Yamada, </author> <title> Optimal population size under constant computation cost, </title> <booktitle> in Parallel Problem Solving from Nature | PPSN III, Lecture Notes in Computer Science, </booktitle> <volume> No. 866, </volume> <publisher> Springer-Verlag, </publisher> <year> (1994). </year>
Reference-contexts: In many applications of 2 optimization in practice (not necessarily real-time applications), however, a goal is to find a solution as good as possible "within a certain amount of time" <ref> [10] </ref>. With such a constraint on computational cost, it is not much critical to seek for convergence of a population. <p> Note that the result of Lopt (5000) has a 95% confidence interval 0.034. This is consistent with the observations in literature such that repeated runs improve the solution quality <ref> [10] </ref>. In order to make the above simulation results more convincing, we observed the average performance of the standard GA on 25 different grid patterns. The 25 grid patterns were randomly generated. The number of obstacles ranges from 10 to 30.
Reference: [11] <author> J. Smith and K. Sugihara, </author> <title> GA toolkit on the Web, </title> <booktitle> in Proc. First Online Workshop on Soft Computing, </booktitle> <month> (Aug. </month> <year> 1996). </year> <note> http://www.ics.hawaii.edu/~sugihara/research/wsc1/ </note>
Reference-contexts: The following briefly describe the GA to be investigated and optimized by using the performance measures. 1. Coding: A path is represented by a binary string consisting of blocks each of which denotes the direction and distance of a segment on the path (See details in <ref> [11, 13] </ref>). 2. Fitness Function: To transform minimization into maximization, it is defined as (4n 2 (the path length)) for a valid path and 1 for an invalid path which crosses a solid obstacle, where n is the size of a grid. <p> tuned in this paper was designed for motion planning of an autonomous underwater vehicle being developed at the University of Hawaii [4]. 3.2 SIMULATION RESULTS This subsection presents results of the simulation of GAs for the path planning problem which we conducted by using our GA Toolkit on the Web <ref> [11, 12] </ref>. 1 All combinations (called configurations) of the following operators were investigated in the simulation. 1. Selection: Roulette selection, tournament selection or roulette tourna ment selection. 2. Crossover: 1-point crossover, 2-point crossover or uniform crossover. 3. Mutation: Only multi-point mutation. 4.
Reference: [12] <author> J. Smith, </author> <title> Parallel genetic algorithm toolkit for the World Wide Web, </title> <type> Master Thesis, </type> <institution> Dept. of Information and Computer Sciences, Univ. of Hawaii at Manoa, </institution> <month> (Dec. </month> <year> 1996). </year> <month> file://ftp.ics.hawaii.edu/pub/tr/ics-tr-96-20.tar.Z </month>
Reference-contexts: tuned in this paper was designed for motion planning of an autonomous underwater vehicle being developed at the University of Hawaii [4]. 3.2 SIMULATION RESULTS This subsection presents results of the simulation of GAs for the path planning problem which we conducted by using our GA Toolkit on the Web <ref> [11, 12] </ref>. 1 All combinations (called configurations) of the following operators were investigated in the simulation. 1. Selection: Roulette selection, tournament selection or roulette tourna ment selection. 2. Crossover: 1-point crossover, 2-point crossover or uniform crossover. 3. Mutation: Only multi-point mutation. 4.
Reference: [13] <author> K. Sugihara and J. Smith, </author> <title> A genetic algorithm for 3-D path planning of a mobile robots, </title> <type> Tech. Rep., </type> <institution> Dept. of Information and Computer 24 Sciences, Univ. of Hawaii at Manoa, </institution> <month> (Sep. </month> <year> 1996). </year> <note> http://www.ics.hawaii.edu/~sugihara/research/ga-3Dpath.ps.gz 25 </note>
Reference-contexts: For a 95% confidence interval (i.e., ff = 0:05), z (ff=2) is 1.96. 3 A CASE STUDY As a case study, we present how the performance measures have been used to design a GA for path planning of an autonomous mobile robot <ref> [13] </ref>, evaluate its performance including the adaptivity, and tune its parameters. Techniques for experimental design are employed to conduct simulation efficiently and effectively. 3.1 ROBOT PATH PLANNING Consider an n fi n grid and obstacles (which are a collection of cells) on the grid. <p> The following briefly describe the GA to be investigated and optimized by using the performance measures. 1. Coding: A path is represented by a binary string consisting of blocks each of which denotes the direction and distance of a segment on the path (See details in <ref> [11, 13] </ref>). 2. Fitness Function: To transform minimization into maximization, it is defined as (4n 2 (the path length)) for a valid path and 1 for an invalid path which crosses a solid obstacle, where n is the size of a grid.
References-found: 13

