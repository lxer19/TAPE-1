URL: ftp://ftp.cs.ucsd.edu/pub/team/comparison.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Title: A Performance Comparison of Asynchronous Atomic Broadcast Protocols  
Author: Flaviu Cristian, Richard de Beijer and Shivakant Mishra 
Address: La Jolla, CA 920930114, USA  
Affiliation: Department of Computer Science Engineering University of California, San Diego  
Abstract: Atomic broadcast ensures that concurrent updates to replicated data maintained by a process group are consistently delivered to all group members despite random communication delays and failures. By simplifying the programming of applications that use replicated data, atomic broadcast provides basic support for implementing fault-tolerance in distributed systems. This paper reports discrete event simulation results that compare the performance of four asynchronous atomic broadcast protocols. We investigate five performance indexes: average delivery time, average stability time, average number of physical messages sent per update broadcast, maximum buffer size, and distribution of processing load among group members. These indexes are measured as a function of group size and update interarrival time, both in the absence of failures and in the presence of a single communication failure. Our comparison shows that there is no overall best protocol. We identify those application areas where a protocol dominates the other protocols and we discuss some protocol design techniques for achieving good performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: The broadcast stability time is the duration between the moment a broadcast server receives an update to be broadcast and the moment all broadcast servers learn that the update is stable. The goal of our study was to compare the performance of four atomic broadcast protocols [2], [5], <ref> [1] </ref>, [3] that belong to two broad classes: sequencer-based and train protocols. In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. <p> In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. Positive [2] or negative <ref> [5, 1] </ref> acknowledgements are used to ensure that broadcast updates are received by all group members. In a train protocol [3], there is a cyclic order among broadcast servers and a train of updates circulates between them in this order. <p> The trainmaster is also responsible for regenerating a lost train. Stability of an update is established when the train completes one more round after delivering the update to all group members. The atomic broadcast protocol (ABCAST) of Isis <ref> [1] </ref> is sequencer-based. To broadcast an update u, a sender s causally broadcasts messages containing the update u and a local vector of sequence numbers|or timestamp vector|l to all group members.
Reference: [2] <author> R. Carr. </author> <title> The Tandem global update protocol. </title> <journal> Tandem Systems Review, </journal> <month> Jun </month> <year> 1985. </year>
Reference-contexts: The broadcast stability time is the duration between the moment a broadcast server receives an update to be broadcast and the moment all broadcast servers learn that the update is stable. The goal of our study was to compare the performance of four atomic broadcast protocols <ref> [2] </ref>, [5], [1], [3] that belong to two broad classes: sequencer-based and train protocols. In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. Positive [2] or negative [5, 1] acknowledgements are used to ensure that broadcast updates are <p> of our study was to compare the performance of four atomic broadcast protocols <ref> [2] </ref>, [5], [1], [3] that belong to two broad classes: sequencer-based and train protocols. In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. Positive [2] or negative [5, 1] acknowledgements are used to ensure that broadcast updates are received by all group members. In a train protocol [3], there is a cyclic order among broadcast servers and a train of updates circulates between them in this order. <p> To simulate the message loss, the randomly chosen message is simply not sent. 3 Overview of Broadcast Protocols This section gives a basic overview of the protocols in chronological order of publication. We first started out with the simulation of the Tandem global update protocol <ref> [2] </ref>. However, the preliminary results showed that the performance of this protocol is notably worse than that of the other protocols, since it allows at most one update to be broadcast at a time per group.
Reference: [3] <author> F. Cristian. </author> <title> Asynchronous atomic broadcast. </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 33(9) </volume> <pages> 115-116, </pages> <month> Feb </month> <year> 1991. </year> <booktitle> Also presented at the First IEEE Workshop on Management of Replicated Data, </booktitle> <address> Houston, TX, </address> <month> (Nov </month> <year> 1990). </year>
Reference-contexts: members of the same group, hist (p) and hist (q) are the histories of updates delivered to p and q by the broadcast service since group creation, then either hist (p) is a prefix of hist (q) or hist (p)=hist (q) or hist (q) is a prefix of hist (p) <ref> [3] </ref>. fl This work was supported by grants from the Powell Foundation, the Airforce Office of Scientific Research, Sun Microsystems, and the Microelectronics Innovation and Computer Research Opportunities of California. <p> The broadcast stability time is the duration between the moment a broadcast server receives an update to be broadcast and the moment all broadcast servers learn that the update is stable. The goal of our study was to compare the performance of four atomic broadcast protocols [2], [5], [1], <ref> [3] </ref> that belong to two broad classes: sequencer-based and train protocols. In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. <p> In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. Positive [2] or negative [5, 1] acknowledgements are used to ensure that broadcast updates are received by all group members. In a train protocol <ref> [3] </ref>, there is a cyclic order among broadcast servers and a train of updates circulates between them in this order. <p> Concurrency is allowed among distinct broadcast servers, but in the protocol described in [5] each broadcast server handles only one broadcast request at a time. The stability of a broadcast is established in the same 4 manner as for the positive acknowledgement protocol. In the train protocol <ref> [3] </ref>, there is a cyclic order among group members. A train containing a sequence of updates circulates from one member to another in this order. A member (the sender) that wants to broadcast an update waits for the train to arrive.
Reference: [4] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the Fifteenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, MI, </address> <month> Jun </month> <year> 1985. </year> <month> 34 </month>
Reference-contexts: Atomic broadcast is a general group communication service that can be used by group members to disseminate replicated state updates. The properties of an atomic broadcast service depend on whether communication delays are bounded or unbounded. When they are bounded, the service is called synchronous <ref> [4] </ref>. In this paper we are interested in asynchronous atomic broadcast which does not assume any bounds on communication delays. For brevity, we refer to an asynchronous atomic broadcast service simply as a broadcast service in what follows.
Reference: [5] <author> M. F. Kaashoek, A. Tanenbaum, S. F. Hummel, and H. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: The broadcast stability time is the duration between the moment a broadcast server receives an update to be broadcast and the moment all broadcast servers learn that the update is stable. The goal of our study was to compare the performance of four atomic broadcast protocols [2], <ref> [5] </ref>, [1], [3] that belong to two broad classes: sequencer-based and train protocols. In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. <p> In a sequencer-based protocol, a unique broadcast server, the sequencer, imposes a total ordering on all updates originating from all broadcast servers. Positive [2] or negative <ref> [5, 1] </ref> acknowledgements are used to ensure that broadcast updates are received by all group members. In a train protocol [3], there is a cyclic order among broadcast servers and a train of updates circulates between them in this order. <p> Thus, an update u with sequence number n is stable when all members have received from the sequencer messages with piggybacked stability number ld all at least n. The broadcast protocol of Amoeba <ref> [5] </ref> is also sequencer-based. To initiate the broadcast of update u a sender sends a messages containing u to the sequencer. The sequencer attaches a sequence number n to u and sends messages (u,n) to all group members. <p> The sequencer re-transmits messages only upon receiving such negative acknowledgements. Concurrency is allowed among distinct broadcast servers, but in the protocol described in <ref> [5] </ref> each broadcast server handles only one broadcast request at a time. The stability of a broadcast is established in the same 4 manner as for the positive acknowledgement protocol. In the train protocol [3], there is a cyclic order among group members.
Reference: [6] <author> M. K. Molloy. </author> <title> Fundamentals of Performance Modelling. </title> <publisher> Macmillan Publishing Co., </publisher> <address> NewYork, NY, </address> <year> 1989. </year>
Reference-contexts: Since we are not interested in the group structure of the applications that use the broadcast service, we will refer to the group of broadcast servers implementing the broadcast service as `the group'. We make use of discrete event simulation <ref> [6] </ref> to explore the behavior of broadcast protocols. This yields a fair comparison between them, since their performance is measured under identical conditions. For failure free broadcasts, we simulated the sending of ten thousand updates, so that all group members process the same number of updates during the simulation.
References-found: 6

