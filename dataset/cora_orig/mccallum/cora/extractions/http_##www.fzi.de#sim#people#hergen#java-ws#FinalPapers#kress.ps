URL: http://www.fzi.de/sim/people/hergen/java-ws/FinalPapers/kress.ps
Refering-URL: http://www.fzi.de/sim/people/hergen/java-ws/FinalPapers/
Root-URL: http://www.fzi.de
Email: Josef.Fleischmann@ei.tum.de -Klaus.Buchenrieder|Rainer.Kress-@mchp.siemens.de  
Title: 67 Co-Design of Reconfigurable Embedded Systems based on JAVA Specification  
Author: Josef Fleischmann Klaus Buchenrieder, Rainer Kress 
Address: D-80290 Munich, Germany D-81730 Munich, Germany  
Affiliation: Technical University of Munich Siemens AG Inst. of Electronic Design Automation Corporate Technology  
Abstract: Traditionally, embedded systems are designed and optimized to perform a very limited range of functions within dedicated applications. Nowadays, such systems increasingly need to support multiple concurrent applications, changing workloads, and communication over networks. Therefore, besides existing requirements like low cost and high performance, new demands like adaptivity and reconfi-gurability arise. Traditional design methodologies do not support exploration and implementation of this avor of networked embedded systems. In this paper, we present a suitable methodology and a exible experimental environment which supports design exploration and prototyping of dynamically reconfigurable embedded systems based on Java specifications. Preliminary performance figures for sample applications including an algorithm for error detection and correction are given. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. </author> <type> Engberg: </type> <institution> GUAVAC home page; Internet URL: </institution> <address> http://http.cs.berkeley.edu/ ~eng-berg/guavac/, </address> <year> 1997. </year>
Reference: [2] <author> J. Fleischmann, K. Buchenrieder, R. Kress: </author> <title> Co-Design of Hardware/Software Systems based on Java Specifications. </title> <type> Tech. Report TUM-LRE-97-4, Tech. </type> <institution> Univ. of Munich, </institution> <year> 1997. </year>
Reference-contexts: Our initial implementation was based on an dedicated prototyping board containing four SRAM based FPGAs <ref> [2] </ref>. This solution was found to be inefficient for dynamically reconfigurable embedded systems. Chip reconfiguration requires too much time in traditional FPGA architecture, and partial reconfiguration during run-time is impossible. Furthermore, a rather sophisticated mechanism for interfacing between processor and FPGA hardware had to be developed.
Reference: [3] <author> J. Gosling, B. Joy, G. Steele: </author> <title> The Java TM Language Specification; Addison-Wesley, </title> <address> Reading Massachusetts, </address> <year> 1996. </year>
Reference-contexts: Therefore, the specification language must support constructs for expressing concurrency. Several languages have been proposed for describing embedded systems [4], [6]. We decided to use Java which was originally designed for the use in embedded electronic applications to overcome the major weaknesses of C and C++ <ref> [3] </ref>. Java is a multi-threaded language and supports system descriptions as sets of concurrent behaviors. As Java has certain built-in multi-threading primitives, expressing con-currency and management of different flows of control is greatly simplified. Threads also provide an efficient way for task distribution and multiprocessing.
Reference: [4] <author> D. Gajski, F. Vahid, S. Narayan, J. Gong: </author> <title> Specification and Design of Embedded Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: Our target architecture basically consists of a set of processing elements (processors, FPGAs) which execute concurrently. Therefore, the specification language must support constructs for expressing concurrency. Several languages have been proposed for describing embedded systems <ref> [4] </ref>, [6]. We decided to use Java which was originally designed for the use in embedded electronic applications to overcome the major weaknesses of C and C++ [3]. Java is a multi-threaded language and supports system descriptions as sets of concurrent behaviors.
Reference: [5] <author> R. W. </author> <title> Hamming: Coding and Information Theory. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: Therefore, another example, an algorithm for error detection and correction, which is important for communication of systems of a network, has been implemented. Hamming codes <ref> [5] </ref> are typically used in conjunction with other codes for detection and correction of single bit faults. Both the Hamming coder and decoder have been implemented on the XC6216 FPGA.
Reference: [6] <author> R. Helaihel, K. Olukotun: </author> <title> Java as a Specification Language for Hardware-Software Systems. </title> <booktitle> In Int. Conf. on Computer-Aided Design (ICCAD), </booktitle> <year> 1997. </year>
Reference-contexts: Our target architecture basically consists of a set of processing elements (processors, FPGAs) which execute concurrently. Therefore, the specification language must support constructs for expressing concurrency. Several languages have been proposed for describing embedded systems [4], <ref> [6] </ref>. We decided to use Java which was originally designed for the use in embedded electronic applications to overcome the major weaknesses of C and C++ [3]. Java is a multi-threaded language and supports system descriptions as sets of concurrent behaviors.
Reference: [7] <author> A. Kalavade and P. Moghe: </author> <title> On the Performance Verification of Embedded Systems with Concurrent Dynamic Applications. </title> <booktitle> In Asilomar Conf, </booktitle> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: But as soon as just-in-time compilation tools and native code compilers mature, the performance gap will be closed and Java will increasingly be adopted in the domain of embedded hardware/software systems. Related work concerning networked embedded systems concentrates on developing stochastic models for performance verification <ref> [7] </ref>. Our goal is to provide a semi-automated co-synthesis and co-simulation framework which supports fast prototyping of hardware/software systems specified in the Java language.
Reference: [8] <author> T. Kean, A. Duncan: </author> <title> A 800Mpixel/sec Reconfigurable Image Correlator on XC6216. </title> <booktitle> In Int. Workshop on Field-Programmable Logic and Applications, </booktitle> <year> 1997. </year>
Reference-contexts: For reading and writing to the onboard SRAM, only data transfer rates of about 4 and 7 MB/s respectively can be obtained (depending on board frequency) and this is significantly lower than in typical PCI applications. Related research <ref> [8] </ref> showed that with the XC6216 significant speedups for image processing applications can be obtained. For estimation of worst case behavior, we used an appli Fig. 4.
Reference: [9] <author> R. Macketanz: </author> <title> Hard und Softwarebasiertes Simulationssystem fr Applikationen in hochsprachlicher Beschreibung. </title> <type> Masters thesis. Tech. </type> <institution> Univ. of Munich, </institution> <year> 1997 </year>
Reference: [10] <author> Motorola Semiconductor Products, </author> <title> Product Brief: MPACF250 - MPAs CORE+ Reconfigurable System, Motorola, </title> <publisher> Inc., </publisher> <address> 3/98, http://mot-sps.com/fpga/crplus/ plus.html. </address>
Reference-contexts: Both are connected to a static random access memory (SRAM). Such a card can be seen as a prototype of a reconfigurable system on a chip which will be available in new future, e. g. from Motorola <ref> [10] </ref>.
Reference: [11] <author> S. Nisbet, S. A. </author> <title> Guccione: </title> <booktitle> The XC6200DS Development System. In Int. Workshop on Field-Programmable Logic and Applications, </booktitle> <year> 1997. </year>
Reference-contexts: We used the XC6200DS board which basically provides a PCI interface, and a reconfigurable processing unit XC6216. The card also includes two banks of memory, which may be accessed from either the FPGA or the PCI bus. For a more detailed description see <ref> [11] </ref>. Performance. For evaluating the performance of our platform and identifying bottlenecks, we used some small data-oriented examples specified in Java. The XC6216 reconfigurable processing unit that is currently used has a very limited gate capacity (approx. 16000 gate equiv.).
Reference: [12] <author> K. Nilsen: </author> <title> Embedded Real-Time Development in the Java Language. </title> <booktitle> In Embedded Systems Conf. </booktitle> <address> West, </address> <year> 1996. </year>
Reference: [13] <author> R. Passerone, et al.: </author> <title> Modeling Reactive Systems in Java. </title> <booktitle> In Int. High Level Design Validation and Test Workshop, </booktitle> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: The prospect of communicating with an embedded system from 68 anywhere on the Internet is pushing more and more designers towards Java [15]. For modeling real-time systems, language extensions have been proposed <ref> [13] </ref>, [13]. However, the major issue which currently hinders the wide-spread adoption of Java as a development language is its execution performance. <p> The prospect of communicating with an embedded system from 68 anywhere on the Internet is pushing more and more designers towards Java [15]. For modeling real-time systems, language extensions have been proposed <ref> [13] </ref>, [13]. However, the major issue which currently hinders the wide-spread adoption of Java as a development language is its execution performance.
Reference: [14] <editor> H. Schulzrinne, et al.: RTP: </editor> <title> A Transport Protocol for Real-Time Applications. RFC 1889, </title> <booktitle> Audio-Video Transport WG, </booktitle> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: For instance the frame rate of a video stream is changed by the video application manager if the network is congested. Thus a tradeoff between picture quality and bandwidth of the network becomes possible. In audio applications, completely different compression algorithms are employed depending on network load <ref> [14] </ref>. Combining programmable hardware, such as field-programmable gate arrays (FPGAs) with microcontrollers or even digital signal processors (DSPs) gives an entire adaptive system. However, a flexible, configurable hardware solution is also associated with costs in terms of area and timing performance when compared to ASIC designs.
Reference: [15] <author> T. Williams: </author> <title> Java goes to work controlling networked embedded systems.Computer Design 35, </title> <journal> No. </journal> <volume> 9, </volume> <month> Aug. </month> <year> 1996. </year> <month> 76 </month>
Reference-contexts: Java Beans), security and network programming (e.g. function shipping for maintenance and software updates) are of great importance. The prospect of communicating with an embedded system from 68 anywhere on the Internet is pushing more and more designers towards Java <ref> [15] </ref>. For modeling real-time systems, language extensions have been proposed [13], [13]. However, the major issue which currently hinders the wide-spread adoption of Java as a development language is its execution performance.
References-found: 15

