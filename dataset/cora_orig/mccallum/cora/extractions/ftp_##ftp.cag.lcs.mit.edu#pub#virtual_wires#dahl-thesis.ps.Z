URL: ftp://ftp.cag.lcs.mit.edu/pub/virtual_wires/dahl-thesis.ps.Z
Refering-URL: http://www.cag.lcs.mit.edu/vwires/papers/index.html
Root-URL: 
Title: An Implementation of the Virtual Wires Interconnect Scheme  
Author: by Matthew Lyle Dahl Anant Agarwal 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degrees of Bachelor of Science and Master of Science at the  All rights reserved The author hereby grants to MIT permission to reproduce and to distribute publicly paper and electronic copies of this thesis document in whole or in part. Signature of Author  Certified by  Associate Professor of Computer Science and Electrical Engineering Thesis Supervisor Accepted by Frederic R. Morgenthaler Chairman, Departmental Committee on Graduate Students  
Note: c Massachusetts Institute of Technology,  
Date: February 1994  1994  January 26, 1994  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Agarwal et al. </author> <title> The MIT Alewife machine: A large-scale distributed memory multiprocessor. In Scalable Shared Memory Multiprocessors. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: speed and resource statistics for the Sparcle simulation accelerator, as well as for the systolic circuit Palindrome-128 that was used in Section 3.5 for architecture comparison. 5.2 Hardware Emulation Methodology The Sparcle hardware emulator substitutes for the Sparcle CPU chip in a testbed board developed for the Alewife multiprocessor project <ref> [1] </ref>. The emulator system 34 Statistic Palindrome Sparcle LSI Gate Count 14,241 17,252 Element Count 4,623 4,802 Element Complexity 3.1 3.6 Memory Bit Count 0 4,352 Net Count 4,626 5,094 Pins per Net 2.900 3.484 FPGAs 16 20 Avg. Gates / partition 890 868 Avg.
Reference: [2] <author> A. Agarwal, J. Kubiatowicz, D. Kranz, B.-H. Lim, D. Yeung, G. D'Souza, and M. Parkin. Sparcle: </author> <title> An Evolutionary Processor Design for Multiprocessors. </title> <journal> IEEE Micro, </journal> <volume> 13(3) </volume> <pages> 48-61, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The compiler provides hardware and software support for an interface to popular logic simulators [7]. I describe additional features of the compiler, present details of its construction, and suggest future improvements. Finally, I present an example application of the Virtual Wires Compiler: emulation of Sparcle <ref> [2] </ref>, an 18K-gate ASIC implementation of the Sparc microprocessor with added multiprocessing support. The compiler has been used for both hardware-accelerated simulation and full hardware emulation of the Sparcle chip in a test bed system. <p> This capability has been instrumental in debugging the Virtual Wires embedder module and testing new embedded logic architectures. 32 Chapter 5 Virtual Wires Hardware Emulation I have used the Virtual Wires Compiler and hardware prototype to emulate several designs, including Sparcle <ref> [2] </ref>, an 18K-gate ASIC implementation of the Sparc microprocessor with enhanced multiprocessor support. I have demonstrated both hardware-accelerated simulation and full hardware emulation of the Sparcle chip in a test bed system.
Reference: [3] <author> J. Babb. </author> <title> Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators. </title> <type> Master's thesis, </type> <institution> EECS Department, MIT, </institution> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Multiple chips necessitate partitioning of the design into sections connected by at most the 50-200 pins available on standard FPGA packages. This interconnect limit frequently reduces the amount of logic that can be placed on each FPGA <ref> [3] </ref>. 13 1.2 The Use of Virtual Wires for Logic Emulation A recently proposed method, Virtual Wires [4], overcomes the pincount limitation that restricts the efficiency of current FPGA-based logic emulators. <p> Technology-mapping and FPGA place-and-route software reduce the networked partitions to FPGA programming data. The compilation process is automated by a set of scripts and control files that require little or no user intervention. The Virtual Wires Kernel uses an existing routing module <ref> [3] </ref> to generate high-level routing information. For this thesis, I have developed a Virtual Wires embedding module that synthesizes the necessary communications circuitry from this routing information. <p> The initial stages of this process have been discussed previously <ref> [3] </ref> [4]. Here I summarize these steps, then concentrate on the communication circuitry produced by the compiler. 2.1 Dependency Analysis In order to schedule the mapping of physical wires between partitions onto virtual wires, a dependency analysis of the partitioned netlist is performed. <p> Asynchronous set/reset inputs to registers are not currently supported and have not been required in designs tested to date, but this is a simple addition. 2.2 Global Placement The partition connectivity in the dependency graph is used by a global placement program <ref> [3] </ref> to arrange the partitions within the physical FPGA array to minimize the Virtual Wires communication distances and corresponding latency. The array characteristics are described by a physical topology file read by the placer and by other hardware-specific operations in the compilation process. <p> In addition, partitions containing hardware interface logic are placed in 18 fixed locations within the array to communicate with external interface hardware, SRAMs, and other localized resources. 2.3 Global Routing A global routing program <ref> [3] </ref> assigns inter-partition signals to Virtual Wires evaluation timeslots based on the dependency graph and determines the routing of Virtual Wires signals through the FPGA network. Signals are sorted by the depth of their dependency relationships such that the most critical signals are routed first.
Reference: [4] <author> J. Babb, R. Tessier, and A. Agarwal. </author> <title> Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators. </title> <booktitle> In Proceedings, IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <pages> pages 142-151, </pages> <address> Napa, CA, </address> <month> April </month> <year> 1993. </year> <note> IEEE. Also as MIT/LCS TM-491, </note> <month> January </month> <year> 1993. </year>
Reference-contexts: This interconnect limit frequently reduces the amount of logic that can be placed on each FPGA [3]. 13 1.2 The Use of Virtual Wires for Logic Emulation A recently proposed method, Virtual Wires <ref> [4] </ref>, overcomes the pincount limitation that restricts the efficiency of current FPGA-based logic emulators. Existing systems dedicate FPGA pins to individual emulated signals (hardwires), rapidly consuming pins and limiting utilization of available FPGA gates to typically 10 to 20 percent [16]. <p> The initial stages of this process have been discussed previously [3] <ref> [4] </ref>. Here I summarize these steps, then concentrate on the communication circuitry produced by the compiler. 2.1 Dependency Analysis In order to schedule the mapping of physical wires between partitions onto virtual wires, a dependency analysis of the partitioned netlist is performed.
Reference: [5] <author> D. Thomas and P. Moorby. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: The netlist format used is the LSI Logic Network Description Language [11]. The netlist primitives currently used are those of the LSI Logic LCA100K gate array technology [13]. Other system description formats (e.g. Verilog <ref> [5] </ref> or other hardware description languages) can be converted to LSI format by logic synthesis or simple format translation.
Reference: [6] <author> M. Gokhale, W. Holmes, A. Kopser, S. Lucas, R. Minnich, D. Sweeney, and D. Lopresti. </author> <title> Building and using a highly parallel programmable logic array. </title> <journal> Computer, </journal> <volume> 24(1), </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: For example, a variety of expensive and exotic packaging technologies have been developed to bridge the density gap between integrated circuit chips and the printed circuit boards on which they are mounted. The use of field-programmable gate arrays (FPGAs) [17] as a reconfigurable parallel computation resource <ref> [6] </ref> or for logic emulation [16] is one particular case where the interconnect density issue must be addressed.
Reference: [7] <author> S. Hanono. </author> <title> LSI and Verilog Serial Interface to FPGA Board. Alewife Systems Memo 39, </title> <institution> MIT Computer Architecture Group, </institution> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: This board contains an array of FPGAs connected by a simple mesh network. The compiler provides hardware and software support for an interface to popular logic simulators <ref> [7] </ref>. I describe additional features of the compiler, present details of its construction, and suggest future improvements. Finally, I present an example application of the Virtual Wires Compiler: emulation of Sparcle [2], an 18K-gate ASIC implementation of the Sparc microprocessor with added multiprocessing support. <p> Correct operation has been verified by executing multiprocessor system diagnostics. 5.1 Simulation Accelerator Support An interface has been implemented between the Virtual Wires emulator hardware and popular logic simulators (Verilog, LSI Logic) to support hardware-accelerated simulation <ref> [7] </ref> [15]. A serial link is currently being used to exchange vector data between the emulator hardware and a host computer. Client/server software modules permit the simulator to be run on a separate computer if desired. <p> In particular, the serial io shell files are netlists that you include in your simulation in place of the original netlist being emulated. The use of the simulation interface itself is described in Alewife Systems Memo 39 <ref> [7] </ref>. Its author, Silvina Hanono, can provide further support if necessary. A.3 Using the Virtual Wires Hardware The Virtual Wires emulation module [15] was designed by Russ Tessier. He can provide you with printsets and detailed configuration expertise as needed.
Reference: [8] <author> S. Hauck, G. Boriello, and C. Ebeling. </author> <title> Mesh Routing Topologies For FPGA Arrays (advance copy). </title> <booktitle> In Advance Proceedings, 1994 IEEE Workshop on FPGA-based Custom Computing Machines. IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: Low-level assignment of specific FPGA physical pins is made at this time. To 19 reduce the use of on-chip routing resources for Virtual Wires signals being routed across multiple FPGAs, a pin permutation algorithm <ref> [8] </ref> [15] is used. Groups of four adjacent FPGA pins are connected to each of the FPGA's north, south, east, and west neighbors. Thus a multi-chip path proceeding in any direction can be created by making local connections within each pin grouping.
Reference: [9] <author> InCA Inc. </author> <title> Concept Silicon Reference Manual, </title> <month> Nov. </month> <year> 1992. </year> <note> Version 1.1. </note>
Reference-contexts: Alternatively, a rough partition could be made, the more manageable pieces mapped, and the results merged into a full netlist for more accurate partitioning. 4.4 Partitioning After preliminary technology mapping, the emulated netlist is partitioned into per-FPGA sections. The InCA Concept Silicon partitioner <ref> [9] </ref> is currently used; it employs clustering and mincut methods to reduce connections between partitions while maintaining acceptable gate counts. The gate count limit used includes both the emulated logic in each partition and an estimate of the Virtual Wires logic that will be added later.
Reference: [10] <author> B. Landman and R. Russo. </author> <title> On a pin versus block relationship for partitions of logic graphs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20(12), </volume> <month> Dec. </month> <year> 1971. </year>
Reference-contexts: Introduction 1.1 Background The problem of interconnection density among components of a digital system has been studied for some time <ref> [10] </ref>. As component sizes continue to shrink, available interconnection capability grows more slowly than component density (due to linear versus quadratic scaling), so this problem becomes more severe.
Reference: [11] <institution> LSI Logic Corporation, 1551 McCarthy Blvd., Milpitas, California, </institution> <month> 95035. </month> <title> Network Description Language Reference, </title> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: The netlist format used is the LSI Logic Network Description Language <ref> [11] </ref>. The netlist primitives currently used are those of the LSI Logic LCA100K gate array technology [13]. Other system description formats (e.g. Verilog [5] or other hardware description languages) can be converted to LSI format by logic synthesis or simple format translation.
Reference: [12] <institution> LSI Logic Corporation, 1551 McCarthy Blvd., Milpitas, California, </institution> <month> 95035. </month> <title> User's Guide for The Multi-Chip Logic Simulation Programs, </title> <address> Oct. </address> <year> 1989. </year> <month> 51 </month>
Reference-contexts: These files permit the simulator interface to be built automatically without requiring the user to specify the I/O signal names of the emulated circuit. The Sparcle hardware simulation accelerator is driven via the simulation interface by a behavioral model test shell running in the LSI Logic MBSIM simulator <ref> [12] </ref>. The test shell includes a memory system and program loader so that standard Sparcle diagnostics can be executed by the accelerator.
Reference: [13] <institution> LSI Logic Corporation, 1551 McCarthy Blvd., Milpitas, California, 95035. LCA100K Products Databook, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Rapid reconfigurability for specific applications makes these devices interesting to the system designer, but their relatively low density (less than 20K logic gates/chip) versus non-programmable gate arrays (over 100K gates/chip) <ref> [13] </ref> often forces multiple interconnected FPGAs to be used. Multiple chips necessitate partitioning of the design into sections connected by at most the 50-200 pins available on standard FPGA packages. <p> The netlist format used is the LSI Logic Network Description Language [11]. The netlist primitives currently used are those of the LSI Logic LCA100K gate array technology <ref> [13] </ref>. Other system description formats (e.g. Verilog [5] or other hardware description languages) can be converted to LSI format by logic synthesis or simple format translation.
Reference: [14] <author> Synopsys, Inc. </author> <title> 4000 Series (Xilinx) Interface Using the FPGA Compiler, </title> <month> feb </month> <year> 1993. </year>
Reference-contexts: Logic minimization can also be done during the technology mapping process to further increase the packing density of emulated gates. Both mapping and 29 minimization can be performed simultaneously by tools such as the Synopsys FPGA Compiler <ref> [14] </ref>. In order to develop a working system as quickly as possible, I have chosen to defer technology mapping until after partitioning and the embedding of Virtual Wires communication logic.
Reference: [15] <author> R. Tessier, J. Babb, M. Dahl, S. Hanono, and A. Agarwal. </author> <title> The Virtual Wires Emulation System: A Gate-Efficient ASIC Prototyping Environment (advance copy). </title> <booktitle> In Advance Proceedings, 1994 ACM International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, 1994. </address> <publisher> ACM. </publisher>
Reference-contexts: Several possible implementations of the embedded Virtual Wires circuitry have been compared for speed and use of FPGA resources; results of the comparison are presented and discussed. The compiler has been used to configure a Virtual Wires emulation circuit board 14 <ref> [15] </ref> for use as an in-circuit hardware emulator and as a hardware accelerator of software logic simulation. This board contains an array of FPGAs connected by a simple mesh network. The compiler provides hardware and software support for an interface to popular logic simulators [7]. <p> Low-level assignment of specific FPGA physical pins is made at this time. To 19 reduce the use of on-chip routing resources for Virtual Wires signals being routed across multiple FPGAs, a pin permutation algorithm [8] <ref> [15] </ref> is used. Groups of four adjacent FPGA pins are connected to each of the FPGA's north, south, east, and west neighbors. Thus a multi-chip path proceeding in any direction can be created by making local connections within each pin grouping. <p> Correct operation has been verified by executing multiprocessor system diagnostics. 5.1 Simulation Accelerator Support An interface has been implemented between the Virtual Wires emulator hardware and popular logic simulators (Verilog, LSI Logic) to support hardware-accelerated simulation [7] <ref> [15] </ref>. A serial link is currently being used to exchange vector data between the emulator hardware and a host computer. Client/server software modules permit the simulator to be run on a separate computer if desired. <p> The use of the simulation interface itself is described in Alewife Systems Memo 39 [7]. Its author, Silvina Hanono, can provide further support if necessary. A.3 Using the Virtual Wires Hardware The Virtual Wires emulation module <ref> [15] </ref> was designed by Russ Tessier. He can provide you with printsets and detailed configuration expertise as needed. Multiple modules can be arrayed using edge connectors to extend the FPGA mesh and control connections.
Reference: [16] <author> S. Walters. </author> <title> Computer-aided prototyping for ASIC-based systems. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: The use of field-programmable gate arrays (FPGAs) [17] as a reconfigurable parallel computation resource [6] or for logic emulation <ref> [16] </ref> is one particular case where the interconnect density issue must be addressed. <p> Existing systems dedicate FPGA pins to individual emulated signals (hardwires), rapidly consuming pins and limiting utilization of available FPGA gates to typically 10 to 20 percent <ref> [16] </ref>. Virtual Wires intelligently multiplexes pins to allow each pin to support multiple emulated signals (virtual wires).
Reference: [17] <author> XILINX, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, California, </address> <month> 95214. </month> <title> The Programmable Gate Array Data Book, </title> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: For example, a variety of expensive and exotic packaging technologies have been developed to bridge the density gap between integrated circuit chips and the printed circuit boards on which they are mounted. The use of field-programmable gate arrays (FPGAs) <ref> [17] </ref> as a reconfigurable parallel computation resource [6] or for logic emulation [16] is one particular case where the interconnect density issue must be addressed.
Reference: [18] <author> XILINX, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, California, </address> <booktitle> 95214. The XC4000 Data Book, </booktitle> <month> Aug. </month> <year> 1992. </year> <month> 52 </month>
Reference-contexts: While small RAM/ROM structures (typically 16-256 bits) can be constructed from the lookup tables used in some FPGA architectures <ref> [18] </ref>, large register files and caches would be extremely expensive to implement using FPGA logic. These large arrays must be identified and their organization rearranged to fit in one or more of the 64K by 4 bit SRAMs available in 28 the hardware.
References-found: 18

