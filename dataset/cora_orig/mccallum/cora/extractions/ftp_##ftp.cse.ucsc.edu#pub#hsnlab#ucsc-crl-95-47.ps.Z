URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/ucsc-crl-95-47.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/projects/FAST.html
Root-URL: http://www.cse.ucsc.edu
Title: FAST: An FPGA-Based Simulation Testbed for ATM Networks  
Author: Dimitrios Stiliadis Anujan Varma 
Keyword: ATM switch scheduling, field-programmable gate array (FPGA), simulation testbed  
Note: This research is supported by NSF Young Investigator Award MIP-9257103, faculty research funds granted by the University of California, Santa Cruz, Altera Corporation and a software donation by Mentor Graphics.  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: September 8, 1995  
Pubnum: UCSC-CRL-95-47  
Abstract: Simulation of ATM switches and networks is a computationally demanding problem as compared to simulation of conventional packet-based networks, owing to the large number of cell events that need to be simulated in the former. To address this problem, we are developing a flexible hardware testbed for simulation of ATM-based networks. The testbed, called FAST (FPGA-based ATM simulation testbed), uses high-density field-programmable gate arrays (FPGAs) to allow implementation of the key simulation components such as traffic generators, switching fabric, buffer management, traffic scheduling, congestion control mechanisms, and statistics recording in hardware. In the first version of the testbed (FAST-1), each board consists of 13 Altera FLEX devices (including 4 multichip modules), providing a total of 336,000 usable gates. Each board can be used to simulate an ATM switch. Multiple boards may be interconnected to simulate large ATM networks. Software tools haven been developed for specifying the components of the underlying simulation model, such as the switch structure, traffic model, traffic scheduling algorithm, and congestion control mechanisms; synthesizing the specifications into the individual FPGAs; controlling and monitoring the simulation; and collecting and reporting statistics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.Demers, S. Keshav, and S.Shenker, </author> <title> "Analysis and simulation of a fair queueing algorithm," </title> <journal> Journal of Internetworking Research and Experience, </journal> <volume> vol. 1, </volume> <pages> pp. 3-26, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Implementation of these quality-of-service (QoS) guarantees requires the use of appropriate traffic scheduling algorithms in the switches so that the available resources are properly allocated to the individual traffic streams. A large number of such traffic scheduling algorithms have been proposed in recent literature <ref> [1, 2, 3] </ref>. In addition, congestion control mechanisms may need to be incorporated in the individual switches for the transport of best-effort traffic. A number of disparate approaches to congestion control in ATM networks have been proposed and are currently being discussed for standardization [4].
Reference: [2] <author> L. Zhang, "VirtualClock: </author> <title> a new traffic control algorithm for packet switching networks," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Implementation of these quality-of-service (QoS) guarantees requires the use of appropriate traffic scheduling algorithms in the switches so that the available resources are properly allocated to the individual traffic streams. A large number of such traffic scheduling algorithms have been proposed in recent literature <ref> [1, 2, 3] </ref>. In addition, congestion control mechanisms may need to be incorporated in the individual switches for the transport of best-effort traffic. A number of disparate approaches to congestion control in ATM networks have been proposed and are currently being discussed for standardization [4].
Reference: [3] <author> D. D. Clark, S. Shenker, and L. Zhang, </author> <title> "Supporting real-time applications in an integrated services packet network: Architecture and mechanism," </title> <booktitle> in Proc. ACM SIGCOMM '92, </booktitle> <pages> pp. 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Implementation of these quality-of-service (QoS) guarantees requires the use of appropriate traffic scheduling algorithms in the switches so that the available resources are properly allocated to the individual traffic streams. A large number of such traffic scheduling algorithms have been proposed in recent literature <ref> [1, 2, 3] </ref>. In addition, congestion control mechanisms may need to be incorporated in the individual switches for the transport of best-effort traffic. A number of disparate approaches to congestion control in ATM networks have been proposed and are currently being discussed for standardization [4].
Reference: [4] <author> P. Newman, </author> <title> "Traffic management for ATM local area networks," </title> <journal> IEEE Communications, </journal> <pages> pp. 34-50, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: In addition, congestion control mechanisms may need to be incorporated in the individual switches for the transport of best-effort traffic. A number of disparate approaches to congestion control in ATM networks have been proposed and are currently being discussed for standardization <ref> [4] </ref>. Evaluating the performance of traffic-scheduling algorithms and congestion control mechanisms in the ATM switches is a challenging problem. Although analytical techniques can provide valuable insight into the operation of the system, these are often inadequate for modeling the switch and the algorithms at the needed level of detail.
Reference: [5] <author> R. Fujimoto, </author> <title> "Parallel event-driven simulation," </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, </volume> <pages> pp. 30-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: One approach to improve the speed of the simulation is to resort to parallel or distributed simulation, but this is a relatively expensive option. In addition, the speedup obtained by parallelizing event-driven simulators may be small because of their inherently serial nature <ref> [5] </ref>. Communication and synchronization bottlenecks also limit the achievable speedup. To address this problem, we are developing a flexible hardware testbed for the simulation of 1 ATM switches and networks at the University of California, Santa Cruz.
Reference: [6] <author> Altera Corporation, </author> <title> FLEX 8000 Handbook, </title> <month> July </month> <year> 1994. </year>
Reference-contexts: For example, the Altera FLEX family currently offers devices with densities as high as 16,000 usable gates in a single chip. In addition, developments in the multichip-module and interconnection technologies have made available devices with as many as 48,000 usable gates, such as the Altera FLEX 8050 multichip module <ref> [6] </ref>. In the first version of the testbed (FAST-1), each board consists of 13 Altera FLEX devices (including 4 multichip modules), providing a total of 336,000 usable gates on each board. Each board can be used to simulate a single ATM switch with its associated algorithms. <p> FPGAs are ideally suited to building reconfigurable hardware systems. Devices such as the Altera FLEX family and the Xilinx FPGAs use RAM-based lookup tables as their basic logic element, thus allowing in-system configurability <ref> [6, 7] </ref>. FPGA-based prototyping aids are a valuable tool in hardware development. For example, the QuickTurn system, based on Xilinx FPGA devices, is widely used in the industry for hardware prototyping [8].
Reference: [7] <author> Xilinx, Inc., </author> <title> The Programmable Logic Data Book, </title> <year> 1994. </year>
Reference-contexts: FPGAs are ideally suited to building reconfigurable hardware systems. Devices such as the Altera FLEX family and the Xilinx FPGAs use RAM-based lookup tables as their basic logic element, thus allowing in-system configurability <ref> [6, 7] </ref>. FPGA-based prototyping aids are a valuable tool in hardware development. For example, the QuickTurn system, based on Xilinx FPGA devices, is widely used in the industry for hardware prototyping [8].
Reference: [8] <author> S. Walters, </author> <title> "Computer-aided prototyping of ASIC-based systems," </title> <booktitle> IEEE Design & Test of Computers, </booktitle> <pages> pp. 4-10, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: FPGA-based prototyping aids are a valuable tool in hardware development. For example, the QuickTurn system, based on Xilinx FPGA devices, is widely used in the industry for hardware prototyping <ref> [8] </ref>. Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures [9, 10], MIMD parallel processors [11], neural networks [12], accelerators for scientific computation [13], and general-purpose coprocessors [14, 15].
Reference: [9] <author> M. Gokhale, W. Holmes, A. Kopser, S. Lucas, R. Minnich, D. Sweely, and D. Lopresti, </author> <title> "Building and using a highly parallel programmable logic array," </title> <journal> IEEE Computer, </journal> <volume> no. 24, </volume> <pages> pp. 81-89, </pages> <year> 1991. </year>
Reference-contexts: For example, the QuickTurn system, based on Xilinx FPGA devices, is widely used in the industry for hardware prototyping [8]. Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures <ref> [9, 10] </ref>, MIMD parallel processors [11], neural networks [12], accelerators for scientific computation [13], and general-purpose coprocessors [14, 15]. In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping [16].
Reference: [10] <author> J. M. Arnold, D. A. Buell, and E. G. Davis, </author> <title> "Splash 2," </title> <booktitle> in Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pp. 316-324, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: For example, the QuickTurn system, based on Xilinx FPGA devices, is widely used in the industry for hardware prototyping [8]. Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures <ref> [9, 10] </ref>, MIMD parallel processors [11], neural networks [12], accelerators for scientific computation [13], and general-purpose coprocessors [14, 15]. In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping [16].
Reference: [11] <author> L. Barroso, S. Iman, J. Jeong, K. Oner, K. Ramamurthy, and M. Dubois, </author> <title> "The USC multiprocessor testbed project: Project overview," </title> <type> Tech. Rep. 15, </type> <institution> University of Southern California, </institution> <year> 1994. </year>
Reference-contexts: Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures [9, 10], MIMD parallel processors <ref> [11] </ref>, neural networks [12], accelerators for scientific computation [13], and general-purpose coprocessors [14, 15]. In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping [16]. The FAST-1 testbed plans to use VHDL as the high-level modeling language.
Reference: [12] <author> C. Cox and W. Blanz, </author> <title> "GANGLION a fast field-programmable gate array implementation of a connectionist classifier," </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> vol. 27, </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures [9, 10], MIMD parallel processors [11], neural networks <ref> [12] </ref>, accelerators for scientific computation [13], and general-purpose coprocessors [14, 15]. In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping [16]. The FAST-1 testbed plans to use VHDL as the high-level modeling language.
Reference: [13] <author> S. Monaghan and P. Noakes, </author> <title> "Reconfigurable special-purpose hardware for scientific computation and simulation," </title> <journal> Computer & Control Engineering Journal, </journal> <volume> vol. 3, </volume> <pages> pp. 225-234, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures [9, 10], MIMD parallel processors [11], neural networks [12], accelerators for scientific computation <ref> [13] </ref>, and general-purpose coprocessors [14, 15]. In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping [16]. The FAST-1 testbed plans to use VHDL as the high-level modeling language.
Reference: [14] <author> P. Bertin, D. Roncin, and J. Vuillemin, </author> <title> "Programmable active memories: a performance assessment," </title> <booktitle> in Proc. International ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 57-59, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures [9, 10], MIMD parallel processors [11], neural networks [12], accelerators for scientific computation [13], and general-purpose coprocessors <ref> [14, 15] </ref>. In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping [16]. The FAST-1 testbed plans to use VHDL as the high-level modeling language.
Reference: [15] <author> D. A. Thomas, T. Petersen, and D. Van den Bout, </author> <title> "The Anyboard rapid prototyping environment," </title> <booktitle> in Advanced Research in VLSI, Proceedings of the 1991 UC Santa Cruz Conference, </booktitle> <pages> pp. 356-370, </pages> <year> 1991. </year>
Reference-contexts: Several other efforts have been reported in the literature for building reconfigurable hardware systems for prototyping or emulation of complex systems such as SIMD architectures [9, 10], MIMD parallel processors [11], neural networks [12], accelerators for scientific computation [13], and general-purpose coprocessors <ref> [14, 15] </ref>. In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping [16]. The FAST-1 testbed plans to use VHDL as the high-level modeling language.
Reference: [16] <author> G. D. </author> <title> Micheli, Synthesis and Optimization of Digital Circuits, </title> <booktitle> McGraw-Hill Series in Electrical and Computer Engineering, </booktitle> <year> 1994. </year>
Reference-contexts: In addition, advances in high-level hardware description languages and synthesis tools have significantly reduced the time for hardware system prototyping <ref> [16] </ref>. The FAST-1 testbed plans to use VHDL as the high-level modeling language. Commercial hardware synthesis tools will then be 2 used for producing the final logic that is automatically mapped to the FPGAs.
Reference: [17] <author> F. A. Tobagi, </author> <title> "Fast packet switch architectures for broadband integrated services digital networks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 78, </volume> <pages> pp. 133-167, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Software tools control the programming of the FPGAs and the running of the simulations. Many different architectures for designing ATM switches have been proposed in the literature. These include shared memory, bus, crossbar, and multistage networks (for a survey, see <ref> [17] </ref>). The architecture and interconnection structure of the FAST-1 board have been chosen so that any 4 of these architectures can be mapped efficiently on the board. Different buffering approaches such as input and output buffering can be accommodated.
Reference: [18] <author> Altera Corporation, </author> <title> FLEX 8050M Data Sheet, </title> <month> August </month> <year> 1994. </year>
Reference-contexts: Each 8050 combines four FLEX 81188 FPGAs and an Aptix Field-Programmable Interconnect Chip (FPIC) in one package <ref> [18] </ref>. The FPIC is a passive device that can be programmed to interconnect the pins of the 81188 devices in a flexible manner, with a maximum of five pins being connected together [19]. All devices are SRAM-based allowing easy reconfiguration.
Reference: [19] <author> Aptix Corporation, </author> <title> Aptix System Data Book, </title> <year> 1993. </year>
Reference-contexts: Each 8050 combines four FLEX 81188 FPGAs and an Aptix Field-Programmable Interconnect Chip (FPIC) in one package [18]. The FPIC is a passive device that can be programmed to interconnect the pins of the 81188 devices in a flexible manner, with a maximum of five pins being connected together <ref> [19] </ref>. All devices are SRAM-based allowing easy reconfiguration. The use of FLEX 8050 devices allows more functions to be implemented in the output modules.
Reference: [20] <institution> Mentor Graphics Corporation, </institution> <note> QuickSim User's Manual, </note> <year> 1995 </year>
Reference-contexts: Higher level designs will use this library as a basic tool to accelerate the prototyping process. We are currently in the process of designing different schedulers and buffer management modules. A functional simulation of the design is performed using commercial tools <ref> [20] </ref>. High-level tools are also used for synthesizing the behavioral design into the target FPGA technology. Software interfaces between the tools are available from Altera and Mentor Graphics, and the whole design process is completed in a simple and efficient way [21, 22].
Reference: [21] <author> Mentor Graphics Corporation, </author> <title> Autologic II Reference Manual, </title> <year> 1995 </year>
Reference-contexts: High-level tools are also used for synthesizing the behavioral design into the target FPGA technology. Software interfaces between the tools are available from Altera and Mentor Graphics, and the whole design process is completed in a simple and efficient way <ref> [21, 22] </ref>. Furthermore, we have developed a graphical user interface that facilitates the programming of the FPGAs and provides the necessary mechanisms for debugging the designs.
Reference: [22] <author> Altera Corporation, </author> <title> Mentor Graphics & MaxPlus II Logic Design, 1994, Application Note 32. </title>
Reference-contexts: High-level tools are also used for synthesizing the behavioral design into the target FPGA technology. Software interfaces between the tools are available from Altera and Mentor Graphics, and the whole design process is completed in a simple and efficient way <ref> [21, 22] </ref>. Furthermore, we have developed a graphical user interface that facilitates the programming of the FPGAs and provides the necessary mechanisms for debugging the designs.
Reference: [23] <author> M. Katevenis, S. Sidiropoulos, and C. Courcoubetis, </author> <title> "Weighted round-robin cell multiplexing in a general-purpose ATM switch chip," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1265-79, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The model we 11 consider is that of a 4 fi 4 output-buffered ATM switch with weighted round robin scheduling <ref> [23] </ref>. Each output port in the model can support up to 32 virtual channels and has sufficient amount of memory for buffering up to 32K cells.
Reference: [24] <author> R. </author> <title> Tausworthe, "Random numbers generated by linear recurrence modulo two," </title> <journal> Mathematics of Computation, </journal> <volume> vol. 19, </volume> <pages> pp. 100-119, </pages> <year> 1965. </year>
Reference-contexts: In addition, the random-number generator needs to be invoked multiple times for generating cells from the different virtual channels sharing the same input port. The random number generator we used is based on the algorithm proposed by Taus-worthe <ref> [24] </ref>. Arbitrary long sequences of random numbers can be generated from linear shift-register sequences based on the primitive trinomials X p + X q + 1; over GF (2).
Reference: [25] <author> J. Saarinen, J. Tomberg, L. Vehmanen, and K. Kaski, </author> <title> "VLSI implementation of Tausworthe random number generator for parallel processing environment," </title> <journal> IEEE Proceedings-E, </journal> <volume> vol. 138, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: This approach, although simple, is relatively slow as it requires at least L cycles to generate a new random number. In our design we followed the method proposed in <ref> [25, 26] </ref> that parallelizes the L shifts by splitting the shift register into L smaller shift registers as shown in Figure 3.5. In our implementation, we used L = 16, p = 127, and q = 1, thus producing 16-bit random numbers.
Reference: [26] <author> M. Barel, </author> <title> "Fast hardware random number generator for the Tausworthe sequence," </title> <booktitle> in Proc. 16th Annual Simulation Symposium, </booktitle> <pages> pp. 121-135, </pages> <month> March </month> <year> 1983. </year>
Reference-contexts: This approach, although simple, is relatively slow as it requires at least L cycles to generate a new random number. In our design we followed the method proposed in <ref> [25, 26] </ref> that parallelizes the L shifts by splitting the shift register into L smaller shift registers as shown in Figure 3.5. In our implementation, we used L = 16, p = 127, and q = 1, thus producing 16-bit random numbers.
Reference: [27] <author> A. M. Law and W. </author> <title> Kelton, Simulation Modeling & Analysis. </title> <publisher> McGraw-Hill, Inc., </publisher> <year> 1991. </year>
Reference: [28] <author> A. Walker, </author> <title> "An efficient method for generating random variables with general distributions," </title> <journal> ACM Transactions on Math. Software, </journal> <volume> vol. 3, </volume> <pages> pp. 253-256, </pages> <year> 1977. </year>
Reference: [29] <author> R. Kronmal and A. Peterson, </author> <title> "On the alias method for generating random variables from a discrete distribution," </title> <journal> Am. Statistician, </journal> <volume> vol. 33, </volume> <pages> pp. 214-218, </pages> <year> 1979. </year>
Reference: [30] <author> R. Jain and S. Routhier, </author> <title> "Packet trains | measurements and a new model for computer network traffic," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 4, </volume> <pages> pp. 986-995, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: More complex traffic sources can be accommodated in the traffic generator modules. For example, an ON-OFF traffic source can be implemented using three lookup tables <ref> [30] </ref>. In this model, the ON and OFF intervals of the source are exponentially distributed. While in the ON state, it generates a burst of packets whose size is drawn from a geometrical distribution.
Reference: [31] <author> D. Heyman, A.Tabatabai, and T. Lakshman, </author> <title> "Statistical analysis and simulation study of video teleconference traffic in ATM networks," </title> <journal> IEEE Transactions on Circuits and Systems for Video Technology, </journal> <volume> vol. 2, </volume> <pages> pp. 49-59, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Two lookup tables are required to determine how long the source stays in each of the two states and one lookup table is required to determine the size of the burst. Models of video sources can be designed using Markov chains <ref> [31] </ref>. Implementation of these Markov chain models in hardware also involves the use of multiple lookup tables. A uniform random number is used to select the initial state of the Markov chain. Packets are sent at a rate determined 16 by the current state of the Markov chain.
Reference: [32] <author> H. Schwetman, </author> <title> "CSIM Reference Manual," </title> <type> Tech. Rep. ACT-ST-252-87, Rev. 16, </type> <institution> Microelectronics and Computer Technology Corporation, </institution> <year> 1992. </year>
Reference-contexts: The results are summarized in Table I. The table provides the actual times taken to simulate the switch for 1 million cell-times. The software simulations were run on a DEC Alpha 3000/400 workstation with 92 Mbytes of main memory using a simulator written in CSIM <ref> [32] </ref>. We then measured its running time by varying the number of virtual-channels used by the round-robin scheduling algorithm from 4 to 32.
Reference: [33] <author> L. Kalampoukas, A. Varma, D. Stiliadis and Q. Jacobson, </author> <title> "The CPU Design Kit: An Instructional Prototyping Platform for Teaching Processor Design," </title> <booktitle> Workshop on Computer Architecture Education, Int'l Symposium in Computer Architecture, </booktitle> <month> June </month> <year> 1995. </year> <month> 24 </month>
Reference-contexts: The local memory can now be used for temporary storage of incoming ATM cells before they are forwarded to the input modules. For this purpose we plan to utilize the "CPU Design Kit", that can be used as a general purpose interface to an ISA-based computer <ref> [33] </ref>. This board consists of six FLEX 81500 devices and can be programmed to provide a 20-bit interface to the FAST-1 board.
Reference: [34] <author> D. Stiliadis and A. Varma, </author> <title> "Providing bandwidth guarantees in an input-buffered crossbar switch," </title> <booktitle> in Proc. IEEE INFOCOM '95, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: The testbed would allow us to evaluate the algorithms by simulating them at speeds several orders of magnitude over software simulation, and will serve as a valuable tool in our ongoing research in traffic scheduling algorithms <ref> [34, 35] </ref> and congestion control [36]. In addition to estimating the performance of the different algorithms, the testbed enables us to evaluate the hardware complexity of the algorithms and the effect of any simplifications made during implementation.
Reference: [35] <author> D. Stiliadis and A. Varma, </author> <title> "Frame-based fair queueing: A new traffic scheduling algorithm for packet-switched networks," </title> <type> Tech. Rep. </type> <institution> UCSC-CRL-95-39, U.C. Santa Cruz, Dept. of Computer Engineering, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: The testbed would allow us to evaluate the algorithms by simulating them at speeds several orders of magnitude over software simulation, and will serve as a valuable tool in our ongoing research in traffic scheduling algorithms <ref> [34, 35] </ref> and congestion control [36]. In addition to estimating the performance of the different algorithms, the testbed enables us to evaluate the hardware complexity of the algorithms and the effect of any simplifications made during implementation.
Reference: [36] <author> L. Kalampoukas, A. Varma and K.K. Ramakrishnan, </author> <title> "An efficient rate allocation algorithm for packet-switched networks providing max-min fairness," </title> <booktitle> in Proc. High-Performance Networks, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: The testbed would allow us to evaluate the algorithms by simulating them at speeds several orders of magnitude over software simulation, and will serve as a valuable tool in our ongoing research in traffic scheduling algorithms [34, 35] and congestion control <ref> [36] </ref>. In addition to estimating the performance of the different algorithms, the testbed enables us to evaluate the hardware complexity of the algorithms and the effect of any simplifications made during implementation.
References-found: 36

