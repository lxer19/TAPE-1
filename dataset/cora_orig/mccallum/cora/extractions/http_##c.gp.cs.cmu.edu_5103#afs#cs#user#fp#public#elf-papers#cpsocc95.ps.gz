URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/fp/public/elf-papers/cpsocc95.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/fp/public/elf-papers/INDEX.html
Root-URL: http://www.cs.cmu.edu
Title: The Occurrence of Continuation Parameters in CPS Terms  
Author: Olivier Danvy Frank Pfenning 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: February 1995  
Pubnum: CMU-CS-95-121  
Abstract: We prove an occurrence property about formal parameters of continuations in Continuation-Passing Style (CPS) terms that have been automatically produced by CPS transformation of pure, call-by-value -terms. Essentially, parameters of continuations obey a stack-like discipline. This property was introduced, but not formally proven, in an earlier work on the Direct-Style transformation (the inverse of the CPS transformation). The proof has been implemented in Elf, a constraint logic programming language based on the logical framework LF. In fact, it was the implementation that inspired the proof. Thus this note also presents a case study of machine-assisted proof discovery. All the programs are available in ( ftp.daimi.aau.dk:pub/danvy/Programs/danvy-pfenning-Elf93.tar.gz ftp.cs.cmu.edu:user/fp/papers/cpsocc95.tar.gz Most of the research reported here was carried out while the first author visited Carnegie Mellon University in the Spring of 1993. Current address: Olivier Danvy, Ny Munkegade, Computer Science Department, Aarhus University, DK-8000 Aarhus C, Denmark; danvy@daimi.aau.dk This work was supported by NSF Grant CCR-93-03383 and by the DART project (Design, Analysis and Reasoning about Tools) of the Danish Research Councils. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> William Clinger, editor. </editor> <booktitle> Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, LISP Pointers, </booktitle> <volume> Vol. V, No. </volume> <pages> 1, </pages> <address> San Francisco, California, June 1992. </address> <publisher> ACM Press. </publisher>
Reference: [2] <author> Olivier Danvy. </author> <title> Back to direct style. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 22(3) </volume> <pages> 183-195, </pages> <year> 1994. </year>
Reference-contexts: CBV, right-to-left CPS transformation of this term yields k:k (x:k:g x v 2 :f x v 1 :v 1 v 2 v 3 :k v 3 ): In earlier work, the first author developed a textual inverse of the CPS transformation, i.e., a "direct-style transformation" <ref> [2] </ref>. To this end, it was necessary to characterize CPS terms that correspond to the output of Plotkin's CPS transformation, after administrative reductions [3, 16]. However this characterization was not formally proven. The goal of this note is to prove it. <p> Both specifications come from the earlier work on the DS transformation <ref> [2] </ref>. 3.1 BNF of CPS terms The BNF of CPS terms reads as follows. (NB: We distinguish between the original identifiers x coming from the DS term, and the fresh identifiers v and k introduced by C.) r 2 CRoot | CPS terms r ::= k:e e 2 CExp | CPS <p> Simply, they specify another evaluation order or another sequencing order than the one captured in the CPS transformation of Figures 1 and 2. Therefore, they cannot be mapped back to direct style navely <ref> [2, 7] </ref>. 4 The Proof Globally, we are interested in proving that if ` r DRoot ! r 0 then ` CRoot Var r 0 . <p> In their work on separating stages in the CPS transformation [7], Lawall and Danvy noticed that the sequencing order encoded in CPS terms is accounted for by the occurrences of parameters of continuations. In his work on the DS transformation <ref> [2] </ref>, Danvy characterized the ordering of Figure 4, but did not prove it formally. During spring 1993, Danvy and Pfenning carried out the work reported here.
Reference: [3] <author> Olivier Danvy and Andrzej Filinski. </author> <title> Representing control, a study of the CPS transformation. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2(4) </volume> <pages> 361-391, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: To this end, it was necessary to characterize CPS terms that correspond to the output of Plotkin's CPS transformation, after administrative reductions <ref> [3, 16] </ref>. However this characterization was not formally proven. The goal of this note is to prove it. The proof has been implemented in Elf [10], a constraint logic programming language based on the logical framework LF [5]. In fact, it was the implementation that inspired the proof. <p> DS terms r ::= e e 2 DExp | DS expressions e ::= e 0 e 1 j t t 2 DTriv | DS trivial expressions t ::= x j x:r x 2 Ide | identifiers is an optimized version of Plotkin's CPS transformer [13], derived in an earlier work <ref> [3] </ref>; it is slightly rephrased to match the syntactic domains. These equations can be read as a two-level specification a la Nielson and Nielson [8].
Reference: [4] <author> Olivier Danvy and Julia L. Lawall. </author> <title> Back to direct style II: First-class continuations. </title> <booktitle> In Clinger [1], </booktitle> <pages> pages 299-310. </pages>
Reference-contexts: This is captured in Figure 3 and proven in Appendix A. CPS terms that do not satisfy the occurrence conditions over continuation parameters correspond to DS terms that use a control operator such as call/cc. This point is investigated elsewhere <ref> [4, 6] </ref>. 3.3 Occurrences of formal parameters of continuations The occurrence conditions over the formal parameters of continuations are reproduced in Figure 4. This figure should be read as follows.
Reference: [5] <author> Robert Harper, Furio Honsell, and Gordon Plotkin. </author> <title> A framework for defining logics. </title> <journal> Journal of the ACM, </journal> <volume> 40(1) </volume> <pages> 143-184, </pages> <year> 1993. </year> <booktitle> A preliminary version appeared in the proceedings of the First IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 194-204, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: However this characterization was not formally proven. The goal of this note is to prove it. The proof has been implemented in Elf [10], a constraint logic programming language based on the logical framework LF <ref> [5] </ref>. In fact, it was the implementation that inspired the proof. LF turned out to be particularly suited for this problem, since two-level -terms and the CPS transformation can be encoded very naturally by using meta-level abstraction and application to model administrative reductions. <p> Familiarity with the LF logical framework <ref> [5] </ref>, its methodology, and it implementation in Elf [10] is assumed. Some implementation-specific details will be mentioned in the commentary. 9 5.1 Direct-style terms Recall the information definition of direct-style (DS) terms in BNF form.
Reference: [6] <author> Julia L. Lawall. </author> <title> Continuation Introduction and Elimination in Higher-Order Programming Languages. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Indiana University, Bloomington, Indiana, USA, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: This is captured in Figure 3 and proven in Appendix A. CPS terms that do not satisfy the occurrence conditions over continuation parameters correspond to DS terms that use a control operator such as call/cc. This point is investigated elsewhere <ref> [4, 6] </ref>. 3.3 Occurrences of formal parameters of continuations The occurrence conditions over the formal parameters of continuations are reproduced in Figure 4. This figure should be read as follows. <p> During spring 1993, Danvy and Pfenning carried out the work reported here. Later, in her PhD work on the inverseness of the CPS and the DS transformations, Lawall independently proved by hand a similar ordering <ref> [6, Appendix A.1.1] </ref>. 8 Conclusion and Issues We have formalized and proven the occurrences of continuation parameters and of formal parameters of continuations in CPS terms. This new knowledge about continuations parameters in CPS terms can enable their more efficient implementation. <p> For example, the transformation of conforming CPS terms back to direct style can be implemented using a stack to carry out substitutions (see Figures 6 and 7). This new formulation also makes it simpler to prove that the CPS and the DS transformations are inverses of each other <ref> [6] </ref> and to automate this proof. The implementation in Elf is small but non-trivial. It captures the computational content of the translations and the meta-theoretic reasoning in a declarative, yet executable way.
Reference: [7] <author> Julia L. Lawall and Olivier Danvy. </author> <title> Separating stages in the continuation-passing style transformation. </title> <editor> In Susan L. Graham, editor, </editor> <booktitle> Proceedings of the Twentieth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 124-136, </pages> <address> Charleston, South Carolina, </address> <month> January </month> <year> 1993. </year> <note> ACM Press. </note>
Reference-contexts: Simply, they specify another evaluation order or another sequencing order than the one captured in the CPS transformation of Figures 1 and 2. Therefore, they cannot be mapped back to direct style navely <ref> [2, 7] </ref>. 4 The Proof Globally, we are interested in proving that if ` r DRoot ! r 0 then ` CRoot Var r 0 . <p> In their work on reasoning about CPS programs, Sabry and Felleisen also rely on the unicity of continuations parameters in the pure -calculus [14, 15]. In their work on separating stages in the CPS transformation <ref> [7] </ref>, Lawall and Danvy noticed that the sequencing order encoded in CPS terms is accounted for by the occurrences of parameters of continuations. In his work on the DS transformation [2], Danvy characterized the ordering of Figure 4, but did not prove it formally.
Reference: [8] <author> Flemming Nielson and Hanne Riis Nielson. </author> <title> Two-Level Functional Languages, </title> <booktitle> volume 34 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: These equations can be read as a two-level specification a la Nielson and Nielson <ref> [8] </ref>.
Reference: [9] <author> Frank Pfenning. </author> <title> A proof of the Church-Rosser theorem and its representation in a logical framework. </title> <journal> Journal of Automated Reasoning. </journal> <note> To appear. A preliminary version is available as Carnegie Mellon Technical Report CMU-CS-92-186, </note> <month> September </month> <year> 1992. </year>
Reference-contexts: In unary form: A function is valid if it maps valid arguments to valid results. This kind of definition is pervasive in the application of logical frameworks to meta-theoretic reasoning (e.g., <ref> [9] </ref>). It works smoothly here. Four notions of validity arise: for root terms, for trivial expressions, for serious expressions, and for continuations. In their definitions, we must account for the context ~ in which an expression might occur.
Reference: [10] <author> Frank Pfenning. </author> <title> Logic programming in the LF logical framework. </title> <editor> In Gerard Huet and Gordon Plotkin, editors, </editor> <booktitle> Logical Frameworks, </booktitle> <pages> pages 149-181. </pages> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: To this end, it was necessary to characterize CPS terms that correspond to the output of Plotkin's CPS transformation, after administrative reductions [3, 16]. However this characterization was not formally proven. The goal of this note is to prove it. The proof has been implemented in Elf <ref> [10] </ref>, a constraint logic programming language based on the logical framework LF [5]. In fact, it was the implementation that inspired the proof. <p> Familiarity with the LF logical framework [5], its methodology, and it implementation in Elf <ref> [10] </ref> is assumed. Some implementation-specific details will be mentioned in the commentary. 9 5.1 Direct-style terms Recall the information definition of direct-style (DS) terms in BNF form.
Reference: [11] <author> Frank Pfenning and Conal Elliott. </author> <title> Higher-order abstract syntax. </title> <editor> In Mayer D. Schwartz, editor, </editor> <booktitle> Proceedings of the ACM SIGPLAN'88 Conference on Programming Languages Design and Implementation, SIGPLAN Notices, </booktitle> <volume> Vol. 23, No 7, </volume> <pages> pages 199-208, </pages> <address> Atlanta, Georgia, June 1988. </address> <publisher> ACM Press. </publisher>
Reference-contexts: DS (Root) Terms r ::= e DS (Serious) Expressions e ::= e 0 e 1 j t DS Trivial Expressions t ::= x j x:r We only remark that the representation uses higher-order abstract syntax <ref> [11] </ref> to represent object-level abstractions, and that the natural inclusions (e.g., every trivial expression is an expression) are modeled by explicit coercions (e.g., dtriv_dexp). droot : type. %name droot R dexp : type. %name dexp E dtriv : type. %name dtriv T dexp_droot : dexp -&gt; droot. dapp : dexp -&gt;
Reference: [12] <author> Frank Pfenning and Ekkehard Rohwedder. </author> <title> Implementing the meta-theory of deductive systems. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, </booktitle> <pages> pages 537-551, </pages> <address> Saratoga Springs, New York, June 1992. </address> <publisher> Springer-Verlag LNAI 607. </publisher> <pages> 20 </pages>
Reference-contexts: v)). ord_t_clam : (-Xi:stack- ord_t Xi (clam R) Xi) &lt; (-x:ctriv (-Xi':stack- ord_t Xi' x Xi') -&gt; ord_r (R x)). 5.5 The proof The informal proof in Section 4 that continuation parameters obey a stack-like discipline can be translated into Elf using the technique of higher-level judgments (see, for example, <ref> [12] </ref>). Our (constructive) proof may be seen as containing an algorithm for computing a derivation R 0 of ` CRoot Var r 0 from a derivation R of ` r DRoot ! r 0 .
Reference: [13] <author> Gordon D. Plotkin. </author> <title> Call-by-name, call-by-value and the -calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 1 </volume> <pages> 125-159, </pages> <year> 1975. </year>
Reference-contexts: 1 Introduction Continuation-Passing Style (CPS) -terms encode both evaluation order and sequencing order <ref> [13] </ref>. <p> introduced later. r 2 DRoot | DS terms r ::= e e 2 DExp | DS expressions e ::= e 0 e 1 j t t 2 DTriv | DS trivial expressions t ::= x j x:r x 2 Ide | identifiers is an optimized version of Plotkin's CPS transformer <ref> [13] </ref>, derived in an earlier work [3]; it is slightly rephrased to match the syntactic domains. These equations can be read as a two-level specification a la Nielson and Nielson [8].
Reference: [14] <author> Amr Sabry and Matthias Felleisen. </author> <title> Reasoning about programs in continuation-passing style. </title> <booktitle> In Clinger [1], </booktitle> <pages> pages 288-298. </pages>
Reference-contexts: Most authors (e.g., Wand and Oliva [18]) implicitly rely on conformant CPS terms to run them on a stack machine. In their work on reasoning about CPS programs, Sabry and Felleisen also rely on the unicity of continuations parameters in the pure -calculus <ref> [14, 15] </ref>. In their work on separating stages in the CPS transformation [7], Lawall and Danvy noticed that the sequencing order encoded in CPS terms is accounted for by the occurrences of parameters of continuations.
Reference: [15] <author> Amr Sabry and Matthias Felleisen. </author> <title> Reasoning about programs in continuation-passing style. </title> <journal> LISP and Symbolic Computation, </journal> 6(3/4):289-360, December 1993. 
Reference-contexts: Most authors (e.g., Wand and Oliva [18]) implicitly rely on conformant CPS terms to run them on a stack machine. In their work on reasoning about CPS programs, Sabry and Felleisen also rely on the unicity of continuations parameters in the pure -calculus <ref> [14, 15] </ref>. In their work on separating stages in the CPS transformation [7], Lawall and Danvy noticed that the sequencing order encoded in CPS terms is accounted for by the occurrences of parameters of continuations.
Reference: [16] <author> Guy L. Steele Jr. Rabbit: </author> <title> A compiler for Scheme. </title> <type> Technical Report AI-TR-474, </type> <institution> Artificial Intelligence Laboratory, Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> May </month> <year> 1978. </year>
Reference-contexts: To this end, it was necessary to characterize CPS terms that correspond to the output of Plotkin's CPS transformation, after administrative reductions <ref> [3, 16] </ref>. However this characterization was not formally proven. The goal of this note is to prove it. The proof has been implemented in Elf [10], a constraint logic programming language based on the logical framework LF [5]. In fact, it was the implementation that inspired the proof.
Reference: [17] <author> W. W. Tait. </author> <title> Intensional interpretation of functionals of finite type I. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 32 </volume> <pages> 198-212, </pages> <year> 1967. </year>
Reference-contexts: The critical issue is the property of continuations we must prove (in the inductive conclusion) and require (in the inductive hypothesis) for the translation of expressions under a continuation. A continuation is a (meta-level) function from trivial terms to expressions, which suggests the method of logical relations <ref> [17] </ref>. The idea behind binary logical relations is to consider two functions related if they map related arguments to related results. In unary form: A function is valid if it maps valid arguments to valid results.
Reference: [18] <author> Mitchell Wand and Dino Oliva. </author> <title> Proving the correctness of storage representations. </title> <booktitle> In Clinger [1], </booktitle> <pages> pages 151-160. 21 </pages>
Reference-contexts: Most authors (e.g., Wand and Oliva <ref> [18] </ref>) implicitly rely on conformant CPS terms to run them on a stack machine. In their work on reasoning about CPS programs, Sabry and Felleisen also rely on the unicity of continuations parameters in the pure -calculus [14, 15].
References-found: 18

