URL: http://www.cs.wisc.edu/~suan/Projects/PointerAnalysis/proposal.ps.gz
Refering-URL: http://www.cs.wisc.edu/~suan/Projects/PointerAnalysis/
Root-URL: http://www.cs.wisc.edu
Title: More Precise Pointer Analysis for Programs with Structures and Type Casting  
Author: Suan Hsi Yong Susan Horwitz, advisor 
Date: 23 March 1998  
Abstract: The effectiveness of static analyses of programs with pointers rely on the accuracy of points-to information provided by pointer analysis. The ability to type cast variables in a program complicates the analysis with regard to structured objects. As a result, approaches taken in the past have sacrificed precision for simplicity. The proposed research focuses on making the treatment of structures and type casting in pointer analysis more precise.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Andersen. </author> <title> "Program Analysis and Specialization for the C Programming Language." </title> <type> Ph.D. thesis, </type> <institution> DIKU, University of Copenhagen, Copenhagen, </institution> <address> Denmark (May 1994). </address>
Reference-contexts: In the presence of type casting some form of conservative approximation may be unavoidable. Approaches to handling other "unconventional" manipulations of pointers, like pointer arithmetic (e.g. using the offsetof macro in C), will also be investigated. Algorithms developed will largely be based on Andersen's flow-insensitive pointer analysis algorithm <ref> [1] </ref>. An approach that treats variables, including fields of structures, as memory offsets and sizes is currently being developed.
Reference: [2] <author> T. Reps. </author> <type> Personal communication. </type>
Reference-contexts: In a recent code-slicing trial that produced disappointing results, Reps identified the (imprecise) treatment of structures in the pointer analysis as a possible cause <ref> [2] </ref>. However, the extent to which a more precise analysis can affect subsequent static analyses has not been tested. The proposed research involves the development of pointer analysis algorithms that treat the fields of a struct separately whenever possible.
Reference: [3] <author> M. Shapiro and S. Horwitz. </author> <title> "Fast and Accurate Flow-insensitive Points-to Analysis." </title> <booktitle> Conference Record of the Twenty-Fourth ACM Symposium on Principles of Programming Languages, </booktitle> <address> Paris, France (January 1997). </address>
Reference-contexts: On the other hand, more precise pointer analyses also tend to be less space and time efficient <ref> [3] </ref>. The ability to cast pointers to structures in a programming language such as C introduces a degree of complexity that makes the treatment of fields of structures as separate entities a non-trivial task, since the layout of fields in structures are platform (and compiler) dependent.
Reference: [4] <author> B. Steensgaard. </author> <title> "Points-to Analysis by Type Inference of Programs with Structures and Unions" in Proceedings of the 1996 International Conference on Compiler Construction, No. </title> <booktitle> 1060 in Lecture Notes in Computer Science, </booktitle> <pages> pp. 136-150, </pages> <month> Springer-Verlag (April </month> <year> 1996). </year>
Reference-contexts: a more general but less precise algorithm that will work in the absense of this information will also be developed. (Steensgaard presented an extension to his flow-insensitive algorithm [5] that keeps the fields of structures distinct only when the types of all preceding fields in those structures are the same <ref> [4] </ref>. Ways of incorporating this safe and portable approach to our algorithm will be investigated.) After designing the pointer analysis algorithms, they will be implemented and evaluated to measure their effectiveness.
Reference: [5] <author> B. </author> <title> Steensgaard. </title> <booktitle> "Points-to Analysis in Almost Linear Time" in Proceedings of the 23rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pp. </pages> <month> 32-41 (January </month> <year> 1996). </year> <month> 3 </month>
Reference-contexts: Since this information may not be available in all program analysis environments, a more general but less precise algorithm that will work in the absense of this information will also be developed. (Steensgaard presented an extension to his flow-insensitive algorithm <ref> [5] </ref> that keeps the fields of structures distinct only when the types of all preceding fields in those structures are the same [4].
References-found: 5

