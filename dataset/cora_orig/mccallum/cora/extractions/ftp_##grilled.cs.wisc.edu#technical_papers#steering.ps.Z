URL: ftp://grilled.cs.wisc.edu/technical_papers/steering.ps.Z
Refering-URL: http://www.cs.wisc.edu/~paradyn/papers.html
Root-URL: 
Email: krishna@cs.wisc.edu  bart@cs.wisc.edu  
Title: Integrating a Debugger and a Performance Tool for Steering steering configuration allows fast prototyping of
Author: Krishna Kunchithapadam Barton P. Miller 
Note: The  
Address: Madison, WI USA 53706  
Affiliation: Computer Sciences Department University of Wisconsin  
Abstract: Steering is a performance optimization idiom applicable to many problem domains. It allows control and performance tuning to take place during program execution. Steering emphasizes the optimization and control of the performance of a program using mechanisms that are external to the program. Performance measurement tools and symbolic debuggers already independently provide some of the mechanisms needed to implement a steering tool. In this paper we describe a configuration that integrates a performance tool, Paradyn, and a debugger to build a steering environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kurt P. Brown, Manish Mehta, Michael J. Carey, and Miron Livny. </author> <title> Towards Automated Performance Tuning for Complex Workloads. </title> <booktitle> In Proceedings of the 20th International VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Performance knobs in databases: Some database servers are designed to have a set of tunable performance knobs that control the allocation of resources in the server <ref> [1] </ref>. The server periodically executes a tuning algorithm to choose setting for the performance knobs (and hence resource allocations) that improves the performance of the server or satisfies some goal-requirements of the transactions that arrive at the server.
Reference: [2] <author> G. Eisenhauer, Weiming Gu, Karsten Schwan, and Niru Mallavarupu. </author> <title> Falcon-toward interactive parallel programs: The online steering of a molecular dynamics application. </title> <booktitle> In Proceedings of the 3rd International Sym 11 posium on High-Performance Distributed Computing, </booktitle> <address> San Francisco, CA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Load balance, degree of parallelism: Load balance is an important determinant of performance in irregular applications <ref> [2] </ref>. It may also be possible to 5 modify the performance of an algorithm by changing the amount of parallelism that is used.
Reference: [3] <author> Jeffrey K. Hollingsworth, Jon Cargille, and Barton P. Miller. </author> <title> Dynamic Program Instrumentation for Scalable Performance Tools. </title> <booktitle> In Proceedings of the 1994 Scaleable Highe Performance Computing Conference, </booktitle> <pages> pages 841-850, </pages> <address> Knoxville, TN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: We then describe a steering configuration that uses the mechanisms of Paradyn and a symbolic debugger for performance steering. 2 Paradyn as a Performance Tool Paradyn [5] is a performance tool based on a novel mechanism for automating the search for performance bottlenecks and low-overhead instrumentation techniques <ref> [3] </ref>. Paradyn is also extensible|any tool external to Paradyn may access the performance information that Paradyn collects via a well-defined 6 visualization interface. The combination of the search mechanism, dynamic instrumentation, and the visualization interface allows us to use Paradyn as the performance measurement tool in a steering environment.
Reference: [4] <author> Krishna Kunchithapadam and Barton P. Miller. </author> <title> Optimizing Array Distributions in Data-Parallel Programs. </title> <editor> In A. Nicolau, D. Gelernter, D. Gross, and D. Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing, </booktitle> <publisher> LNCS. Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Array distributions: The performance of data-parallel programs is sensitive to the layout of array data across the nodes of a parallel machine <ref> [4] </ref>. Choosing good data layouts is non-trivial. A tool that measures array data related communication, presents such communication information to a programmer and accepts programmer hints for redistributing arrays into a more optimized layout performs steering.
Reference: [5] <author> Barton P. Miller, Jeffrey K. Hollingsworth, R. Bruce Irvin, Jonathan Cargille, Krishna Kunchithapadam, Karen Karavanic, Tia Newhall, and Mark Callaghan. </author> <title> The Paradyn Performance Measurement Tools. </title> <journal> In Review for the IEEE special issue on Parallel and Distributed Systems, </journal> <month> October </month> <year> 1994. </year>
Reference-contexts: In the next section we describe the mechanisms present in the Paradyn performance tool that are relevant to performance steering. We then describe a steering configuration that uses the mechanisms of Paradyn and a symbolic debugger for performance steering. 2 Paradyn as a Performance Tool Paradyn <ref> [5] </ref> is a performance tool based on a novel mechanism for automating the search for performance bottlenecks and low-overhead instrumentation techniques [3]. Paradyn is also extensible|any tool external to Paradyn may access the performance information that Paradyn collects via a well-defined 6 visualization interface.
References-found: 5

