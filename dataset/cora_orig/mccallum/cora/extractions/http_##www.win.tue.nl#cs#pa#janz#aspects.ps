URL: http://www.win.tue.nl/cs/pa/janz/aspects.ps
Refering-URL: http://www.win.tue.nl/cs/pa/janz/yarrow/liter.html
Root-URL: http://www.win.tue.nl
Email: e-mail janz@win.tue.nl  
Title: Aspects of the Proof-assistant  
Author: Yarrow Jan Zwanenburg 
Date: May 29, 1998  
Address: P.O.Box 513, 5600 MB Eindhoven, The Netherlands  
Affiliation: Department of Mathematics and Computing Science Eindhoven University of Technology  
Abstract: Yarrow is an interactive proof assistant based on the theory of Pure Type Systems, a family of typed lambda calculi. It offers both graphical and textual interfaces. It has been coded entirely in Haskell, making use of the Fudget library for the graphical interface. In this paper we concentrate on the software architecture of Yarrow, in particular the coupling of user interface and proof engine. We also treat the presentation of proofs in the flag-style format. 
Abstract-found: 1
Intro-found: 1
Reference: [Bar92] <author> H. Barendregt. </author> <title> Lambda calculi with types. </title> <editor> In D. M. Gabbai, S. Abramsky, and T. S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 1. </volume> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: The system Yarrow has been designed as a flexible environment for experimentation with PTSs, extended with a definition mechanism. It can handle a large class of PTSs, the so-called bijective PTSs [Pol93], which includes all systems of the lambda cube <ref> [Bar92] </ref>. A typical Yarrow session consists of: selecting a PTS and loading several modules of definitions and theorems based on this PTS, after which a number of proof tasks are carried out.
Reference: [CKT95] <author> Yann Coscoy, Gilles Kahn, and Laurent Thery. </author> <title> Extracting text from proofs. In Typed Lambda Calculi and Applications: </title> <booktitle> Proceedings of the Second International Conference, volume 902 of LNCS, </booktitle> <pages> pages 109-123. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1995. </year>
Reference-contexts: A very similar notation is used in Jape [SB96], where this layout is used to build proofs interactively. The algorithm that produces this presentation of a proof from a proof-object is quite similar to the ones described in <ref> [CKT95] </ref> and [Cos96], although they produce proofs in pseudo natural language. The basic algorithm is natural and simple: the presentation of a proof-term p is a composition of the presentations of the subterms of p. However, this produces quite lengthy proofs.
Reference: [Coq97] <author> Coq. </author> <title> The Coq proof assistant. </title> <note> In URL: http://pauillac.inria.fr/coq, 1997. </note>
Reference-contexts: These properties make typed lambda calculi well suited as formal basis of systems that support interactive construction of proofs, so-called proof assistants. Some well-known proof assistants of this kind are Coq <ref> [Coq97] </ref>, LEGO [LP92], and Alfa [Hal97]. The system Yarrow has been designed as a flexible environment for experimentation with PTSs, extended with a definition mechanism. It can handle a large class of PTSs, the so-called bijective PTSs [Pol93], which includes all systems of the lambda cube [Bar92].
Reference: [Cos96] <author> Yann Coscoy. </author> <title> A natural language explantation for formal proofs. </title> <booktitle> In Logical Aspects of Computational Linguistics: Proceedings of the First International Conference, volume 1328 of LNAI. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, New York, </address> <year> 1996. </year>
Reference-contexts: A very similar notation is used in Jape [SB96], where this layout is used to build proofs interactively. The algorithm that produces this presentation of a proof from a proof-object is quite similar to the ones described in [CKT95] and <ref> [Cos96] </ref>, although they produce proofs in pseudo natural language. The basic algorithm is natural and simple: the presentation of a proof-term p is a composition of the presentations of the subterms of p. However, this produces quite lengthy proofs. <p> A big improvement is the combination of similar steps into one step, e.g. in line 20 of figure 5, two steps are contracted into one (8E of line 9 with term b, and =)E of the result with line 19). Up to this improvement, the algorithm in <ref> [Cos96] </ref> and ours are similar. An important differnce is that their algorithm works for the Calculus of Inductive Constructions, whereas ours works for PTSs. 5 Conclusion The main contribution of this paper is the design of Yarrow, that allows several user interfaces to be used with one engine.
Reference: [Hal97] <institution> Thomas Hallgren. Alfa home page. </institution> <note> In URL: http://www.cs.chalmers.se/~hallgren/ Alfa/, </note> <year> 1997. </year>
Reference-contexts: These properties make typed lambda calculi well suited as formal basis of systems that support interactive construction of proofs, so-called proof assistants. Some well-known proof assistants of this kind are Coq [Coq97], LEGO [LP92], and Alfa <ref> [Hal97] </ref>. The system Yarrow has been designed as a flexible environment for experimentation with PTSs, extended with a definition mechanism. It can handle a large class of PTSs, the so-called bijective PTSs [Pol93], which includes all systems of the lambda cube [Bar92].
Reference: [HC95] <author> Thomas Hallgren and Magnus Carlsson. </author> <title> Programming with Fudgets. </title> <booktitle> In Spring School on Advanced Functional Programming in Bastad. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> LNCS 925, see also [HC97]. </note>
Reference-contexts: Two such interfaces have been developed. First, a simple command line interface, which can be used on any platform supporting Haskell, because this interface is based on the standard IO monads [Tho96]. Second, a graphical interface based on the Fudget system <ref> [HC95] </ref>, which is a Haskell library available for a limited number of platforms. The coupling between user interface and engine is very thin, consisting of just a single function. 2. <p> The first goal is to prove P in the local context shown; the second goal is to prove Q, but its local context is not shown. (In this case it is the same context as for P). Here we abort the proof. 3.3 Graphical user interface The Fudgets library <ref> [HC95] </ref> is used to implement the graphical user interface. Fudgets offers mechanisms to construct and combine windows, buttons, menus and other window gadgets. The implementation of the graphical user interface is described in detail in [Rai97].
Reference: [HC97] <author> Thomas Hallgren and Magnus Carlsson. </author> <note> The Fudgets home page. In URL: http:// www.cs.chalmers.se/Cs/Research/Functional/Fudgets/, 1997. </note>
Reference: [LP92] <author> Zhaohui Luo and Randy Pollack. </author> <title> Lego proof development system: User's manual. </title> <type> Technical Report ECS-LFCS-92-211, </type> <institution> Laboratory for Foundation of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: These properties make typed lambda calculi well suited as formal basis of systems that support interactive construction of proofs, so-called proof assistants. Some well-known proof assistants of this kind are Coq [Coq97], LEGO <ref> [LP92] </ref>, and Alfa [Hal97]. The system Yarrow has been designed as a flexible environment for experimentation with PTSs, extended with a definition mechanism. It can handle a large class of PTSs, the so-called bijective PTSs [Pol93], which includes all systems of the lambda cube [Bar92].
Reference: [Ned90] <author> R.P. </author> <title> Nederpelt. Presentation of natural deduction. In Symposium: Set theory, </title> <journal> foundations of mathematics, Recueil des travaux de l'Institut Mathematique, Nouv. serie, </journal> <volume> tome 2 (10), Beograd, </volume> <pages> pages 115-125, </pages> <year> 1990. </year>
Reference-contexts: The user of Yarrow with 5 the CLI has to count which occurrence he wants to unfold, and type in this number as parameter to the unfold tactic. 4 Flags Yarrow has the ability to print proofs in the flag-style format <ref> [Ned90] </ref>. This is a formal notation for proofs which makes it clear which hypotheses are valid at each point in the proof. Every hypothesis is written in a box. Connected to this box is a "flagpole", which indicates the scope of this hypothesis.
Reference: [Pet97] <author> John Peterson. </author> <title> The Haskell home page. </title> <note> In URL: http://haskell.org/, 1997. </note>
Reference-contexts: Besides a conventional command line interface, Yarrow also offers a graphical interface with windows for global context and proof tasks, menu and mouse selection of tactics and subterms. Yarrow has been coded entirely in the purely function language Haskell <ref> [Tho96, Pet97] </ref>. In this paper we discuss two interesting aspects of the Yarrow: 1. The architecture that supports for multiple interfaces: The Yarrow proof engine has been designed in such a way that it can cooperate with various user interfaces. Two such interfaces have been developed.
Reference: [Pol93] <author> Erik Poll. </author> <title> A typechecker for bijective pure type systems. </title> <type> Technical Report 93-22, </type> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: Some well-known proof assistants of this kind are Coq [Coq97], LEGO [LP92], and Alfa [Hal97]. The system Yarrow has been designed as a flexible environment for experimentation with PTSs, extended with a definition mechanism. It can handle a large class of PTSs, the so-called bijective PTSs <ref> [Pol93] </ref>, which includes all systems of the lambda cube [Bar92]. A typical Yarrow session consists of: selecting a PTS and loading several modules of definitions and theorems based on this PTS, after which a number of proof tasks are carried out.
Reference: [Rai97] <author> Eric Raijmakers. </author> <title> A graphical user interface for the proof assistant Yarrow. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1997. </year>
Reference-contexts: Here we abort the proof. 3.3 Graphical user interface The Fudgets library [HC95] is used to implement the graphical user interface. Fudgets offers mechanisms to construct and combine windows, buttons, menus and other window gadgets. The implementation of the graphical user interface is described in detail in <ref> [Rai97] </ref>. We treat again the example given in section 3.2, but now in the graphical user interface. The starting point is shown in figure 4. There are two windows, one for the global context (on the left), and one for the proof we are working on (on the right).
Reference: [SB96] <author> Bernard Sufrin and Richard Bornat. </author> <title> Jape a framework for building interactive proof editors. </title> <note> In URL: http://www.comlab.ox.ac.uk/oucl/users/bernard.sufrin /UNIXJAPEDOCHTML/jape.html, </note> <year> 1996. </year>
Reference-contexts: We prefer this more formal notation to a textual presentation, because the flag-style format is clearer, more concise, and the propositions are not embedded within English "prose". A very similar notation is used in Jape <ref> [SB96] </ref>, where this layout is used to build proofs interactively. The algorithm that produces this presentation of a proof from a proof-object is quite similar to the ones described in [CKT95] and [Cos96], although they produce proofs in pseudo natural language. <p> Another contribution of this paper is the presentation of proofs in the flag-style format, which is more formal than proofs in pseudo natural language. Future work could include interactive construction of proofs in this format, similar to Jape <ref> [SB96] </ref>.
Reference: [Tho96] <author> Simon Thompson. </author> <title> Haskell, The Craft of Functional Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Besides a conventional command line interface, Yarrow also offers a graphical interface with windows for global context and proof tasks, menu and mouse selection of tactics and subterms. Yarrow has been coded entirely in the purely function language Haskell <ref> [Tho96, Pet97] </ref>. In this paper we discuss two interesting aspects of the Yarrow: 1. The architecture that supports for multiple interfaces: The Yarrow proof engine has been designed in such a way that it can cooperate with various user interfaces. Two such interfaces have been developed. <p> Two such interfaces have been developed. First, a simple command line interface, which can be used on any platform supporting Haskell, because this interface is based on the standard IO monads <ref> [Tho96] </ref>. Second, a graphical interface based on the Fudget system [HC95], which is a Haskell library available for a limited number of platforms. The coupling between user interface and engine is very thin, consisting of just a single function. 2.
Reference: [Zwa97] <author> Jan Zwanenburg. </author> <note> The Yarrow home page. In URL: http://www.win.tue.nl/cs/pa/ janz/yarrow/, 1997. 8 </note>
Reference-contexts: Future work could include interactive construction of proofs in this format, similar to Jape [SB96]. Yarrow with a command line interface is electronically available from the world wide web <ref> [Zwa97] </ref>. 1 m : Nat hyp 2 Ordered (nil Nat) hyp 3 insert m (nil Nat) = singleton m 8E insert nil 4 Ordered (singleton m) 8E Ordered singleton 5 Ordered (insert m (nil Nat)) = 3,4 6 Ordered (nil Nat)=) Ordered (insert m (nil Nat)) =)I 2-5 7 9 a
References-found: 15

