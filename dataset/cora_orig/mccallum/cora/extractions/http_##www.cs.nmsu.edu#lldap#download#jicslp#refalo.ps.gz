URL: http://www.cs.nmsu.edu/lldap/download/jicslp/refalo.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/jicslp/ref.html
Root-URL: http://www.cs.nmsu.edu
Email: refalo@lim.univ-mrs.fr  
Title: Ask Tell Linear Constraints in Constraint Logic Programming  
Author: Philippe Refalo LIM, 
Keyword: constraint entailment, linear constraints, constraint logic programming, concurrent constraint language.  
Address: 13009 Marseille, France  
Affiliation: URA CNRS 1787 Faculte des sciences de Luminy  
Abstract: This article adresses the problem of linear constraint entailment in constraint logic programming. After a brief overview of linear constraint solving, two forms for ask constraints are introduced that simplifies the entailment test. The incremental algorithms are also described and has been integrated to a CLP language. Practical experiments with operation research problems show that substantial reductions of the search tree and of the computation time are obtained. 
Abstract-found: 1
Intro-found: 1
Reference: [BLV92] <author> P. Baptiste, B. Legeard, and C. Varnier. </author> <title> Hoist scheduling problem : an approach based on constraint logic programming. </title> <booktitle> In Proceedings of the 1992 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 1139-1144, </pages> <address> Nice, France, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: The behavior of these devices is easily represented by the high level operators using the implication operator. The hoist scheduling problem (HSP) is a cyclic scheduling problem with disjunctive constraints <ref> [BLV92] </ref>. The main difficulties of this problem come from the great number of disjunction and from the presence of the same variable (the period variable) in every disjunction. Two intances of this problem from industrial applications has been considered.
Reference: [BO96] <author> F. Benhamou and W. </author> <title> Older. Applying interval arithmetic to integer and boolean constraints. </title> <journal> Journal of Logic Programming, </journal> <note> 1996. To appear. </note>
Reference-contexts: 1. Introduction Constraint entailement is the basis of new generation constraint logic programming languages (CLP) such as cc (FD) [vHSD99] or CLP (BNR) <ref> [BO96] </ref>. It is also the fundamental aspect of concurrent constraint languages [Sar93] which consider (1) a constraint store that is monotonicaly increasing by the addition of tell constraints, and (2) a set of ask constraints.
Reference: [Chv83] <author> V. Chvatal. </author> <title> Linear Programming. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: the form x B = Ax N + b (2) and if, for every i, b i 0. 1996 Compulog Net Meeting on Parallelism and Implementation Technology 5 A system of linear equation over slack variables is solvable if and only if it can be mapped to this form (see <ref> [Chv83] </ref>). A solution of such a system can easily be constructed. <p> Note that there are various heuristics to select the entering and the leaving variable from the sets X E and X L (see <ref> [Chv83] </ref>). 3.1.2. Constraint Addition to Simplex Solved Form Let S be a system in simplex solved form x B = Ax N + b whose basic solution is oe and let c be an equation of the form ex + fl = 0.
Reference: [Col90] <author> A. Colmerauer. </author> <title> An introduction to Prolog III. </title> <journal> Communications of the ACM, </journal> <volume> 33(7) </volume> <pages> 69-91, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: In these domains, the approximate but sound algorithms provide an efficient but incomplete en 1 2 1996 Compulog Net Meeting on Parallelism and Implementation Technology tailment test. Linear constraints, althought integrated in first generation constraint programming languages such as Prolog III <ref> [Col90] </ref>, CLP (R) [JMSY92] and CHIP, has not really been considered for entailment. The existing theoretical works on this subject [Las90a, Las90b] did not lead to algorithms usable in a CLP language.
Reference: [DvHS88] <author> M. Dincbas, P. van Hentenryck, and H. Simonis. </author> <title> The constraint logic programming langage CHIP. </title> <booktitle> In FGCS-88, </booktitle> <address> Tokyo, Japan, </address> <year> 1988. </year> <booktitle> 16 1996 Compulog Net Meeting on Parallelism and Implementation Technology </booktitle>
Reference-contexts: Other high level operator has been integrated in CLP languages such as the cardinality operator [vHSD99], the if then else operator of CHIP <ref> [DvHS88] </ref> and the possibility to associate a boolean value to the satisfiability of the constraint in CLP (BNR). They are all operationaly equivalent to a conjunction of implication operators.
Reference: [JMSY92] <author> J. Jaffar, S. Michaylov, P. Stuckey, and R.H.C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> Transactions on Programming Languages and Systems, </journal> <volume> 14(3), </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: In these domains, the approximate but sound algorithms provide an efficient but incomplete en 1 2 1996 Compulog Net Meeting on Parallelism and Implementation Technology tailment test. Linear constraints, althought integrated in first generation constraint programming languages such as Prolog III [Col90], CLP (R) <ref> [JMSY92] </ref> and CHIP, has not really been considered for entailment. The existing theoretical works on this subject [Las90a, Las90b] did not lead to algorithms usable in a CLP language.
Reference: [Las90a] <author> J-L Lassez. </author> <title> Parametric queries, linear constraints and variable elimination. </title> <booktitle> In DISCO 90. Springer-Verlag Lecture Notes in Computer Science, </booktitle> <year> 1990. </year>
Reference-contexts: Linear constraints, althought integrated in first generation constraint programming languages such as Prolog III [Col90], CLP (R) [JMSY92] and CHIP, has not really been considered for entailment. The existing theoretical works on this subject <ref> [Las90a, Las90b] </ref> did not lead to algorithms usable in a CLP language. An application of linear constraint entailment in CHIP have been presented in [TGZ90] but the algorithms used are incomplete and were not described. <p> A modification of the simplex algorithm is also used for finding implicit equalities. Our method is based on the quasi-dual formulation of the set E S [ P <ref> [Las90a] </ref>. A detailed description of this method is beyond the scope of this paper and is not necessary to understand the following. See [RH96] for a complete description of the algorithms and for the proofs of the results presented in this section. 4.
Reference: [Las90b] <author> J-L Lassez. </author> <title> Querying constraints. </title> <booktitle> In Proceedings of the ACM Conference on Principles of Database Systems, </booktitle> <address> Nashville, </address> <year> 1990. </year>
Reference-contexts: Linear constraints, althought integrated in first generation constraint programming languages such as Prolog III [Col90], CLP (R) [JMSY92] and CHIP, has not really been considered for entailment. The existing theoretical works on this subject <ref> [Las90a, Las90b] </ref> did not lead to algorithms usable in a CLP language. An application of linear constraint entailment in CHIP have been presented in [TGZ90] but the algorithms used are incomplete and were not described.
Reference: [LM89] <author> J-L Lassez and K. McAloon. </author> <title> A canonical form for generalised linear constraints. </title> <type> Technical report, </type> <institution> IBM Research Report, T.J. Watson Research Center, </institution> <year> 1989. </year>
Reference-contexts: The associated problem of deciding if no solution of the constraint store is solution of an ask constraint (disen-tailment) is fully symmetric to the entailment problem in our case and it will not be discussed here. The starting point of this study is the canonical form introduced by <ref> [LM89] </ref> and the solved forms for linear constraints used in the languages mentioned above. We introduce a dereferenced form and a partial precise form for linear ask constraints and we show how to maintain incrementally ask constraints in these forms. <p> The proof of these result can be found in <ref> [LM89] </ref>. 4 1996 Compulog Net Meeting on Parallelism and Implementation Technology 3. Constraint Addition to Normal Form Adding a constraint to normal form requires the decomposition of every constraint to a set of equations and disequations over arbitrary and slack variables. <p> So when the disequation is not entailed it is possible to map the system S [ fax + fi = 0g to a system in normal form S 0 . This is very close to the precise form of a disequation introduced in <ref> [LM89] </ref> and for which the definition is recalled. Definition 4 (Precise Form) Let S be a system in normal form, let ax + fi 6= 0 be a disequation and let S 0 be the system S [ fax + fi = 0g in normal form 1. <p> form, let D = fd 1 ; : : : ; d n g be a set of disequations in precise form for S and let c be a disequation in precise form for S, S [ D j= c if and only if we have D j= c (see <ref> [LM89] </ref>). However, it is not clear how this entailment test can be performed efficiently and, as men-tionned before, in terms of space complexity, we cannot afford to maintain n + p systems in normal form when we have n disequations in the set D and p ask disequations.
Reference: [Nar94] <author> G.A. Narboni. </author> <title> Optimization of concentrator positioning in the design of private data networks. </title> <booktitle> In Conference on the Practical Applications of Prolog, </booktitle> <year> 1994. </year>
Reference-contexts: This is stated with the following expression: [t 2 + d 2 t 1 ] + [t 1 + d 1 t 2 ] = 1 The CNET problem <ref> [Nar94] </ref> is a 0-1 mixed integer optimisation problem which amounts to select the position of the concentrators on a network to minimize the distances between concentrators and plugs and the number of concentrators.
Reference: [Nil93] <author> M. Nilsson. </author> <title> Piecewise linear constraint and entailment. </title> <booktitle> In Constraint Logic Programming Workshop, </booktitle> <address> Marseille, France, </address> <year> 1993. </year>
Reference-contexts: Consider the entailment test described above, when the constraint is not entailed (i.e., in cases 1 and 2) there exists a solution of E S [ P which is not a solution of the ask constraint. In <ref> [Nil93] </ref> it is suggested to compute such a solution and to keep it with the ask inequality.
Reference: [RH96] <author> P. Refalo and P. Van Hentenryck. </author> <title> CLP(R lin ) revised. </title> <booktitle> In Joint International Conference and Symposium of Logic Programming, </booktitle> <address> Bonn, Germany, September 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: We also state several important properties of these forms for entailment and we describe the entailment algorithm for each type of constraints. These algorithms have been implemented in the CLP language Athena <ref> [RH96] </ref> and we present practical results showing that our algorithm improves the naive entailment test (i.e., S entails c iff S [ f:cg is unsolvable) and that a substantial reduction of the search space and of the computation time is achieved in comparison with standard backtracking. <p> Our method is based on the quasi-dual formulation of the set E S [ P [Las90a]. A detailed description of this method is beyond the scope of this paper and is not necessary to understand the following. See <ref> [RH96] </ref> for a complete description of the algorithms and for the proofs of the results presented in this section. 4. Linear Constraint Entailment Recall, first the basic defintion of constraint entailment. <p> Applications The entailment algorithms described in the previous section has been integrated to the CLP language Athena over rationals numbers in infinite precision, described in <ref> [RH96] </ref>. Even if the simplex algorithm used is a revised simplex over bounded variables, all the results presented in this paper also hold for bounded variables. The language includes the implication operator and the possibility to associate a boolean value to a constraint.
Reference: [Sar93] <author> V. A. Saraswat. </author> <title> Concurent Constraint Programming Langages. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1993. </year>
Reference-contexts: 1. Introduction Constraint entailement is the basis of new generation constraint logic programming languages (CLP) such as cc (FD) [vHSD99] or CLP (BNR) [BO96]. It is also the fundamental aspect of concurrent constraint languages <ref> [Sar93] </ref> which consider (1) a constraint store that is monotonicaly increasing by the addition of tell constraints, and (2) a set of ask constraints.
Reference: [TGZ90] <author> C. Pradelles-Lasserre T. Graf, P. Van Hantenryck and L. Zimmer. </author> <title> Simulation of hybrid circuits in constraint logic programming. </title> <journal> Computers Math. Applic., </journal> <volume> 20(9) </volume> <pages> 45-56, </pages> <year> 1990. </year>
Reference-contexts: The existing theoretical works on this subject [Las90a, Las90b] did not lead to algorithms usable in a CLP language. An application of linear constraint entailment in CHIP have been presented in <ref> [TGZ90] </ref> but the algorithms used are incomplete and were not described. The purpose of this article is to adress the problem of an efficient algorithm for linear constraint entailment in order to define high-level operators over linear constraints. <p> The 0-1 constraint over a variable x is expressed as follows 0 x 1; [x 0] + [1 x] = 1 Finaly the Circuit problem <ref> [TGZ90] </ref> is a simulation of the temporal behaviour of an hybrid circuit containing electro-mecanical and digital control devices. The behavior of these devices is easily represented by the high level operators using the implication operator. The hoist scheduling problem (HSP) is a cyclic scheduling problem with disjunctive constraints [BLV92].
Reference: [vH89] <author> P. van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, Mass., </address> <year> 1989. </year>
Reference-contexts: The Bridge problem is an optimisation problem with disjunctive constraints whose first CLP solution appears in <ref> [vH89] </ref>. The disjunctive constraints states that two task T 1 and T 2 , whose starting date are t 1 and t 2 and whose duration are d 1 and d 2 cannot overlap.
Reference: [vHSD99] <author> P. van Hentenryck, V. Saraswat, and Y. Deville. </author> <title> Design, implementation and evaluation of the constraint langage cc(FD). In Constraint Programming: Basic and Trends. </title> <publisher> Springer Verlag, </publisher> <year> 1999. </year>
Reference-contexts: 1. Introduction Constraint entailement is the basis of new generation constraint logic programming languages (CLP) such as cc (FD) <ref> [vHSD99] </ref> or CLP (BNR) [BO96]. It is also the fundamental aspect of concurrent constraint languages [Sar93] which consider (1) a constraint store that is monotonicaly increasing by the addition of tell constraints, and (2) a set of ask constraints. <p> Ask constraints arise naturaly form the use of high level operators such as the implication operator c ! B, where the goal B is delayed until the ask constraint c becomes entailed. Other high level operator has been integrated in CLP languages such as the cardinality operator <ref> [vHSD99] </ref>, the if then else operator of CHIP [DvHS88] and the possibility to associate a boolean value to the satisfiability of the constraint in CLP (BNR). They are all operationaly equivalent to a conjunction of implication operators.
References-found: 16

