URL: http://ptolemy.eecs.berkeley.edu/papers/97/tcltk-97/erl-9715.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/97/tcltk-97/
Root-URL: 
Email: email: cxh,eal,johnr@eecs.berkeley.edu  
Title: The Tycho User Interface System  
Author: Christopher Hylands, Edward A. Lee, H. John Reekie 
Date: March 12, 1997  
Address: Berkeley  
Affiliation: School of Electrical Engineering and Computer Sciences University of California  
Abstract: Tycho is the new-generation user-interface system we are building for the Ptolemy project. It is a complete [incr Tcl] application structured as an extensible class library. Our goal is to make it easy to extend this basic application with functionality and a user interface for specialized applications such as electronic design and simulation. The Tycho library includes a selection of general-purpose widgets, syntax-sensitive text editors, and graphical editing support. It incorporates architectural features that make it easy for different editors and viewers to share data and screen space. Finally, structured support for incorporating C and Java packages into this framework allows us to build on the strengths of those languages, which complement the scripting and user-interface features of Tcl/Tk. Tycho [7] has grown from our frustration with the user-interface facilities of the present version of Ptolemy, a large C++ software package that is used to design, simulate, and generate signal processing and communications systems [6, 8, 1]. In the summer of 1995, we began to explore [Incr Tcl]/[Incr Tk] [11] (then at version 1.5) as a potential candidate for replacement of the Ptolemy user interface. As the project evolved, the focus of the project has shifted away from merely a replacement user interface, towards providing a framework within which we can integrate Ptolemy, applications generated by Ptolemy, new simulation sub-systems coded in Java, new user-interface features, and documentation for all of these. Ptolemy, mostly written in C++, runs on a dozen flavors of Unix. It currently contains over 350,000 lines of code, and maintaining and building releases that support all of these platforms in a system this size is very resource-intensive (especially for an academic research group). And we still can't support Windows or Macintosh. [Incr Tcl]/[Incr Tk] (and Java), on the other hand, seem to provide an ideal opportunity to get out of the "binary-building business" and into the "platform-independent software business." The [Incr Tcl]/[Incr Tk] part of Tycho is structured as a reusable and extensible framework of classes. Tycho will run in a vanilla itkwish, although we also have binaries for Tycho-with-Java, and Tycho-with-Ptolemy. A small number of C-code packages provide support we need in specific applications, such as access to real-time timers. We have maintained a strong resistance to packages that require compilation to binaries, allowing this only if a) it is essential to gaining certain functionality and b) it is not going to significantly affect Tycho's cross-platform portability. The Tcl profiler from TclX [9], which we load into Tycho to work behind a graphical profile display, is a good example. Tycho has been developed on UNIX platforms and most of it works under Windows NT; the Macintosh port, unfortunately, is substantially broken. fl Published as: ERL memo 97/15, University of California - Berkeley, March 1997
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Joseph T. Buck, Soonhoi Ha, Edward A. Lee, and David. G. Messerschmitt. Ptolemy: </author> <title> A framework for simulating and prototyping heterogeneous systems. </title> <journal> Int. Journal of Computer Simulation, </journal> <volume> 4, </volume> <month> April </month> <year> 1994. </year> <title> Special issue on Simulation Software Development. </title>
Reference: [2] <author> Dave Collins. </author> <title> Designing Object-Oriented User Interfaces. </title> <address> Benjamin/Cummings, </address> <year> 1995. </year>
Reference-contexts: 4.1), we believe the visual hierarchy and interactors provide a powerful toolkit for building complex interactive graphical editors. 6 4 Architectural patterns 4.1 The Model-View pattern Model-view is a derivation of the well-known model-view-controller (MVC) architecture of Smalltalk; the model-view derivation combines MVC's view and controller into a single abstraction <ref> [2] </ref>. In Tycho, we have implemented a Model class that provides a publish-and-subscribe mechanism, unbounded history, a simple but flexible external structured file format called TIM (Tycho Information Models), and a simple serialization mechanism.
Reference: [3] <author> Sven Delmas and Juergen Nickelsen. </author> <note> Information on TkSteal. http://www.cimetrix.com/sven/tksteal.html. </note>
Reference-contexts: Preliminary timings using a simple factorial indicate that the Java bytecode interpreter has about a factor of ten performance advantage over [Incr Tcl]. As an alternative experiment, we used tksteal <ref> [3] </ref> to re-parent the Java applet viewer into 4 itkwish, but found that the applet viewer didn't have the proper command-line interface to make this work smoothly.
Reference: [4] <author> Lisa Friendly. </author> <title> The design of distributed hyperlinked programming documentation. </title> <booktitle> In International Workshop on Hypermedia Design '95. </booktitle> <publisher> Sun Microsystems, Inc, </publisher> <year> 1995. </year> <note> http://www.javasoft.com/doc/api documentation.html#javadoc. </note>
Reference-contexts: A class browser (shown in figure 1) provides on overview of and access to every class in the system. Any text editor can bring up a spell-checking interface. A great deal of Tycho's documentation is extracted from its source code. We use a similar scheme to Sun's Javadoc system <ref> [4] </ref>, which extracts documentation from comments preceding class and method declarations, and uses special tags to distinguish different fields of the comment text. Text within comments is formatted in HTML, as is the generated documentation and indexes.
Reference: [5] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reuse in Object Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: A small TIM (for a dataflow graph) is: vertex a - key out -tokencount 2 -type output - vertex b - key in-0 key out -type output - edge a out b in-0 -initialdelay 0 Models contain a straight-forward implementation of the publish-and-subscribe pattern (also known as the Observer pattern <ref> [5] </ref>: any view that is interested in a model can subscribe to it, and will be notified of any updates to the model. The prototype graph editor in figure 2, for example, has two models: one for the graph, and one for the canvas layout.
Reference: [6] <institution> The Ptolemy Group. The Ptolemy home page. </institution> <note> http://ptolemy.eecs.berkeley.edu/. </note>
Reference: [7] <institution> The Ptolemy Group. The Tycho home page. </institution> <note> http://ptolemy.eecs.berkeley.edu/tycho/. 9 </note>
Reference: [8] <author> Edward A. Lee and David G. Messerschmitt et al. </author> <title> An overview of the Ptolemy project. </title> <address> http://ptolemy.eecs.berkeley.edu/papers/overview/, March 1994. </address>
Reference: [9] <author> Karl Lehenbauer and Mark Diekhans. </author> <title> The TclX distribution. </title> <address> http://www.neosoft.com/tcl/ftparchive/TclX/. </address>
Reference-contexts: The second is a set of complete graphical editors. The editors are still early in development, 5 but already include a simple finite-state-machine editor, a graphical class hierarchy display, and a graphical interface to the Tcl profiler from the TclX package <ref> [9] </ref> (see figures 1 and 2). As much as possible, we have tried to capture functionality needed by typical graphical editors in Itcl classes. Tycho's enhanced canvas, which we call a slate, adds hierarchical items to Tk's standard canvas.
Reference: [10] <author> Udi Manber, Sun Wu, and Burra Gopal. Glimpse: </author> <title> A tool to search entire file systems. </title> <address> http://glimpse.cs.arizona.edu/. </address>
Reference-contexts: We have incorporated interfaces to a few of the "most useful" development tools into Tycho. All of Tycho and Ptolemy is indexed by Glimpse <ref> [10] </ref>, and this can be brought up from any Tycho window.
Reference: [11] <author> Michael J. McLennan. </author> <title> The [Incr Tcl] home page. </title> <address> http://www.tcltk.com/itcl/. </address>
Reference: [12] <author> Brad A. Myers. </author> <title> A new model for handling input. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 289-320, </pages> <month> July </month> <year> 1990. </year>
Reference: [13] <editor> Jan Nijtmans. Dashed and stippled outlines in Tk8.0a2 (Tk4.2p2, Itcl2.2). </editor> <address> http://www.cogsci.kun.nl/ nijtmans/tcl/patch.html. </address>
Reference-contexts: Tycho's enhanced canvas, which we call a slate, adds hierarchical items to Tk's standard canvas. The slate is implemented entirely in Itcl, and so should work with other canvas extensions such as the Dash patch <ref> [13] </ref>. The slate uses canvas tags to enable a collection of canvas items to be treated as a single complex item. All canvas commands functions correctly with single canvas items or complex slate items.
Reference: [14] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Models are based on TIM (Tycho Information Models), which is a meta-data format that is intended to encourage clean representations of data, both in in-memory objects and in an external file representation. It is loosely based on the concepts of Object Modeling Technique (OMT) <ref> [14] </ref>: a model is a collection of entities and links between entities. Each entity and link has a unique name, value, and a list of attributes. Entities can be nested, so TIM is naturally hierarchical.
Reference: [15] <author> Scott Stanton and Ken Corey. </author> <title> The TclJava demonstration. </title> <publisher> ftp://ftp.sunlabs.com/pub/tcl/tcljava0.4.tar.gz. </publisher>
Reference-contexts: This mechanism is simple but surprisingly effective. 2.2 Tycho and Java We generated a binary containing both Tycho and Java, based on version 0.4 of Sun's experimental Tcl-Java interface <ref> [15] </ref>. Not all features of Tcl work correctly in this implementation|exec, for example, is broken but it works well enough for us to explore the integration of Tcl and Java.
Reference: [16] <author> Sue Yockey, Mark Ulferts, Bret Schuhmacher, John Sigler, and Alfredo Jahn. </author> <note> [Incr Widgets]. http://www.tcltk.com/iwidgets/index.html/. 10 </note>
Reference-contexts: For example, a member of our group (Cliff Cordeiro) is working on a class browser that combines an HTML with a class index. We anticipate many more uses of this pattern in the future. 5 Comparison with other tools 5.1 [Incr Widgets] [Incr widgets], or Iwidgets <ref> [16] </ref>, is a library of widgets written in [Incr Tcl]. It includes labeled widgets, scrolled canvas and text widgets, dialog boxes, a tabbed notebook, button and radio boxes, and so on. Despite being written in the same language, Tycho does not currently use any of the IWidgets classes.
References-found: 16

