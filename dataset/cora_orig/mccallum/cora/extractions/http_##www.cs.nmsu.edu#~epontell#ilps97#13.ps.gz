URL: http://www.cs.nmsu.edu/~epontell/ilps97/13.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/ilps97/programme.html
Root-URL: http://www.cs.nmsu.edu
Email: fgupta,epontellg@cs.nmsu.edu  
Title: Extended Dynamic Dependent And-parallelism in ACE  
Author: Gopal Gupta and Enrico Pontelli 
Address: Box 30001,  Las Cruces, NM 88003  
Affiliation: Laboratory for Logic, Databases, and Advanced Programming New Mexico State University  Dept. CS  
Abstract: We present an extension of Dynamic Dependent And-parallel scheme in which deterministic consumer goals are allowed to bind the dependent variable. The extended scheme leads to: (i) improved efficiency due to pruning of program search space; and, (ii) exploitation of more parallelism due to increased overlapping of dependent executions. In dynamic dependent and-parallel execution, given a parallel conjunction with a shared variable X, the leftmost goal is normally designated as the producer of the binding for X, all others goals are designated as consumers. If the producer goal finishes execution without binding X, then the leftmost consumer goal becomes the next producer and so on. In the extended scheme a deterministic consumer goal is also allowed to bind the dependent variable. Our extension leads to incorporation of coroutining in a dynamic dependent and-parallel system. The extended dynamic dependent and-parallel scheme can be regarded as a weak form of the Extended Andorra Model. The implementation of the extended scheme has been realized, based on the Filtered Binding Model for implementing dependent and-parallelism, and has shown excellent results. Keywords: And Parallelism, Andorra Model, Optimizations 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ali, K., and Karlsson, R. </author> <title> The Muse Or-parallel Pro-log Model and its Performance. </title> <booktitle> In 1990 N. American Conf. on Logic Prog. (1990), </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: Or-parallelism: arises when more than a single rule define some relation and a procedure call unifies with more than one rule head|the corresponding bodies can then be executed in or-parallel fashion. Or-parallelism has been efficiently implemented in various systems, such as Aurora [15] and Muse <ref> [1] </ref>. 2. And-parallelism: arises when more than one goal is present in the query or in the body of a procedure, and the resolution of the different (sub)goals is attempted in parallel.
Reference: [2] <author> Bevemyr, J., Lindgren, T., and Millroth, H. </author> <title> Reform Prolog: the Language and its Implementation. </title> <booktitle> In Proc. of the 10th Int'l Conference on Logic Programming (1993), </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: Maintaining Prolog semantics during parallel execution also means supporting non-deterministic computations, i.e., computations that can potentially produce multiple solutions. In many approaches DAP has been restricted to only those cases where p and q are deterministic <ref> [25, 2] </ref>. This is largely due to the complexity of dealing with distributed backtracking. Nevertheless, it has been shown [27] that imposing this kind of restriction on DAP execution may severely limit the amount of parallelism exploited.
Reference: [3] <author> Conery, J. S. </author> <title> Parallel Execution of Logic Programs. </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> Ma 02061, </address> <year> 1987. </year>
Reference-contexts: In such a case, the leftmost consumer goal becomes the new producer. This way of realizing DAP is called Dynamic Dependent And-parallelism (DDAP) <ref> [26, 3] </ref>. In dynamic DAP, bindings can be communicated only from the left to the right, i.e., bindings are done in Prolog order. A consumer goal that attempts to bind a dependent variable, suspends.
Reference: [4] <author> Costa, V. S., Warren, D., and Yang, R. </author> <month> Andorra-I: </month>
Reference-contexts: Reordering of subgoals in the current goal-list adds considerable overhead to the implementation, as any reordering done should be backtrackable. It is our belief that it is a major source of overhead in the Andorra-I system, a system based on the Basic Andorra Model <ref> [4] </ref>. Also, deterministic goals are not allowed to execute in parallel with nondeterministic goals. The advantage that runtime reordering of subgoals has is that even if execution is done by a single processor, search space is still pruned.
References-found: 4

