URL: http://american.cs.ucdavis.edu/publications/cse-91-37.ps
Refering-URL: http://www.cs.ucdavis.edu/research/tech-reports/1991.html
Root-URL: http://www.cs.ucdavis.edu
Email: email: farrens@cs.ucdavis.edu, park@cs.ucdavis.edu  
Phone: tel: (916) 752-9678 fax: (916) 752-4767  
Title: d d A Partitioned Translation Lookaside Buffer Approach to Reducing Address Bandwidth  
Author: Matthew Farrens, Arvin Park Rob Fanfelle, Pius Ng, Gary Tyson 
Keyword: Base Registers, Caching, Compression, Microprocessor Design, Translation Loo-kaside Buffer, Virtual Memory, VLSI.  
Note: 1  
Address: Davis, CA 95616  
Affiliation: Division of Computer Science University of California  
Abstract: This paper presents a simple modification of a computing system's virtual memory hardware that can sharply reduce the number of pins required to transmit address information between a single chip processor and off-chip memory. By partitioning the virtual memory system's translation lookaside buffer (TLB) so that the virtual page numbers are stored in a cache on the processor chip and corresponding real page numbers are stored in a set of registers at the memory, it becomes possible to transmit a small index to the real page number from processor to memory instead of the real page number itself. Trace driven simulations indicate that this technique can significantly reduce the number of pins required to transmit address information between processor and memory. Because this technique makes use of existing virtual memory hardware, it can eliminate address pins without significantly changing computing system design, cost, or performance. 
Abstract-found: 1
Intro-found: 1
Reference: [AgSH86] <author> A. Agarwal, R. L. Sites and M. Horowitz, ``ATUM: </author> <title> A New Technique for Capturing Address Traces Using Microcode'', </title> <booktitle> Proceedings of the Thirteenth Annual International Symposium on Computer Architecture, </booktitle> <address> Tokyo, Japan (June 2-5, </address> <year> 1986), </year> <pages> pp. 119-127. </pages>
Reference-contexts: By using the offset lines in - 8 - d d conjunction with this reserved I/O index, a separate I/O address space can easily be supported. 4.1. The Simulation Model A total of 17 traces were used in the simulations. Nine of the traces were 500,000 reference ATUM traces <ref> [AgSH86] </ref>, and eight were 3,000,000 reference traces of the SPEC benchmark programs gathered using Pixie on a DECstation 5000/200. The SPEC traces were constructed by randomly selecting 50,000 reference samples of the SPEC benchmark program in execution.
Reference: [FaPa91a] <author> M. Farrens and A. Park, </author> <title> ``Dynamic Base Register Caching: A Technique for Reducing Address Bus Width'', </title> <booktitle> Proceedings of the Eighteenth Annual International Symposium on Computer Architecture, </booktitle> <address> Toronto, Canada (May 27-30, </address> <year> 1991), </year> <pages> pp. 198-207. </pages>
Reference-contexts: In order to eliminate the redundant information in the address stream (and reduce the address pin count), we developed a technique we refer to as Dynamic Base Register Caching (DBRC) <ref> [FaPa91a, PaFa90] </ref>. This technique will be briefly described below. 2.1. Dynamic Base Register Caching In Dynamic Base Register Caching (DBRC) hardware divides each address word into two components, a high order component (a base) and a low order component (an offset). <p> The new high order component is then transferred by the processor across the reduced address or data lines, and loaded into a corresponding base register at the memory. Extensive trace driven simulations of Dynamic Base Register Caching <ref> [FaPa91a, FaPa91b] </ref> have shown that DBRC is highly effective, and that on average over 99% of all address hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh Base Register Cache Index Base Register Array High Order Address Bits Address Bits Low Order High Order Address Bits Address Bits Low Order Processor Memory Address From Processor Address To Memory Overview <p> The focus of these simulations was to investigate the effects of TLB size, page size, and index pattern reservation on TLB hit rate. These simulations are similar to the ones performed in order to validate the concept of Dynamic Base Register Caching (DBRC) <ref> [FaPa91a] </ref>. However, the DBRC cache sizes studied in the previous simulations were much smaller than the size of a typical TLB. In addition, unlike a DBRC miss, a TLB miss requires multiple main memory accesses to retrieve page table entries. <p> Interaction between PTLB and System Caches Another issue to consider is the interaction of instruction and/or data caches with the partitioned TLB system. It has been shown <ref> [FaPa91a] </ref> that the presence of a virtual-addressed cache on the CPU chip does not impact the performance of the basic DBRC system, since cache and DBRC lookups can occur simultaneously.
Reference: [FaPa91b] <author> M. Farrens and A. Park, </author> <title> ``Workload and Implementation Considerations for Dynamic Base Register Caching'', </title> <booktitle> Proceedings of the 24th Annual International Symposium on Microarchitecture, </booktitle> <address> Albuquerque, New Mexico (November 18-20, </address> <year> 1991), </year> <pages> pp. 62-68. </pages>
Reference-contexts: The new high order component is then transferred by the processor across the reduced address or data lines, and loaded into a corresponding base register at the memory. Extensive trace driven simulations of Dynamic Base Register Caching <ref> [FaPa91a, FaPa91b] </ref> have shown that DBRC is highly effective, and that on average over 99% of all address hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh Base Register Cache Index Base Register Array High Order Address Bits Address Bits Low Order High Order Address Bits Address Bits Low Order Processor Memory Address From Processor Address To Memory Overview
Reference: [PaFa90] <author> A. Park and M. Farrens, </author> <title> ``Address Compression Through Base Register Caching'', </title> <booktitle> Proceedings of the 23rd Annual Symposium and Workshop on Microprogramming and Microarchitectures, </booktitle> <address> Orlando, Florida (November 27-29, </address> <year> 1990), </year> <pages> pp. 193-199. - 18 </pages> - 
Reference-contexts: In order to eliminate the redundant information in the address stream (and reduce the address pin count), we developed a technique we refer to as Dynamic Base Register Caching (DBRC) <ref> [FaPa91a, PaFa90] </ref>. This technique will be briefly described below. 2.1. Dynamic Base Register Caching In Dynamic Base Register Caching (DBRC) hardware divides each address word into two components, a high order component (a base) and a low order component (an offset).
References-found: 4

