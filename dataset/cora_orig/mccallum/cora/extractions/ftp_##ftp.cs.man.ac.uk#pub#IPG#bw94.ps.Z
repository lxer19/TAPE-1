URL: ftp://ftp.cs.man.ac.uk/pub/IPG/bw94.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Title: The Software Paradigm  
Author: Brian Warboys 
Date: August 31, 1995  
Affiliation: Department of Computer Science University of Manchester  
Pubnum: M13 9PL  
Abstract: The nature of modern computer systems is such that a single paradigm is an insufficient model. The paper attempts to show that what is required is for projects to create a design framework which tolerates change (and failure) in the design process. Within this framework the appropriate paradigm should be selected for appropriate design components. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> E.W.Dijkstra "Selected Writings on Computing: </institution> <note> A Personal Perspective" Springer-Verlag 1982 </note>
Reference-contexts: Djikstra remarked, as long ago as 1973 at the IBM Newcastle Conference on the Teaching of Computer Science <ref> [1] </ref>, that "Is Computer Science nearing its completion? Is computing practise settling down in a way beyond recovery? Or are, as a result of current circumstances, university professors tired and discouraged".
Reference: [2] <institution> S.Dasgupta "Design Theory and Computer Science" Cambridge University Press 1991 </institution>
Reference-contexts: Already signs that the wider problem is perhaps too difficult to solve? So what does an exploration of "The Software Paradigm" reveal about the limits on the application of this most malleable of technologies? 3 Software Crisis or Software A*iction Dasgupta in his book on "Design Theory and Computer Science" <ref> [2] </ref> introduces the notion that we are suffering not from a crisis but from an a*iction. Software Engineers have been talking about a "Software Crisis" virtually since the term "Software Engineering" was coined at the Nato Conferences of 1968/1969 [3]. Crisis is defined as a "turning point". <p> This leads us to the obvious conclusion that systems are hybrid in nature and that the appropriate paradigm is one which recognises this fact. Thus: 5.5 The Theory of Evolutionary Design Paradigm (TED) This is also referred to by Dasgupta <ref> [2] </ref> as "The Theory of Plausible Design" but I prefer the emphasis on evolution. This takes as its starting point that the software design process is evolutionary.
Reference: [3] <institution> P.Naur and B.Randell "Software Engineering: </institution> <note> Report on 1968 NATO Conference" Nato 1969 </note>
Reference-contexts: Software Engineers have been talking about a "Software Crisis" virtually since the term "Software Engineering" was coined at the Nato Conferences of 1968/1969 <ref> [3] </ref>. Crisis is defined as a "turning point". In particular the turning point of a desease when it becomes clear whether the patient will live or die. Yet we have had a crisis for nearly 30 years so the term is misplaced. <p> It derives from the desire to make software development "scientific"; essentially to define an Engineering Method. At the Nato conference in 1968 <ref> [3] </ref> Ross observed that "The most deadly thing in software is the concept, which almost universally seems to be followed, that you are going to specify what you are going to do, and then do it. ...The projects that are called successful, have met their specifications.
Reference: [4] <institution> T.S.Kuhn "The Structure of Scientific Revolutions" University of Chicago Press 1972 </institution>
Reference-contexts: The term is associated closely with the work of Kuhn which led to the formulation of the notion of Kuhnian Paradigms <ref> [4] </ref>. He identified them as having two related aspects. * A disciplinary matrix essentially a network of beliefs, techniques and theorems. They have three main properties: Symbolic generalisations: General formal assertions that are later taken for granted and employed without question. (e.g Ohm's Law).
Reference: [5] <institution> H.A.Simon "The Sciences of the Artificial" MIT Press 1981 </institution>
Reference-contexts: Therein lies the fallacy with this paradigm. Essentially Software Design: * Problems are incomplete * Requirements may be inconsistent * Acquires a "life of its own". Second order requirements arising from the design process itself. This leads us to the concept of "Bounded Rationality" expounded by Simon in 1976 <ref> [5] </ref>. In essence he pointed out that in such systems there are constraints on the cognitive and information processing capabilities of the decision making agent which means that the agent is not independent in a way which could possibly lead to a normal rational process.
Reference: [6] <institution> C.A.R.Hoare "The Mathematics of Programming" Inaugural Lecture, University of Oxford, </institution> <note> Clarendon Press 1986 8 </note>
Reference-contexts: Abstraction provides us with a more flexible tool. Further mathematics provides a tool for abstraction and further as Hoare reasoned in 1986 at his inaugural lecture at Oxford <ref> [6] </ref>: * Computers are mathematical machines (behaviour is mathematically defined) * Programs are mathematical expressions (describe precisely what) * A programming language is a mathematical theory (a formal system for programming) * Programming is a mathematical activity.
References-found: 6

