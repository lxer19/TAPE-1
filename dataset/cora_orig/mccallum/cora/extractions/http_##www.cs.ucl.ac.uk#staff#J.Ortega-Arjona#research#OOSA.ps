URL: http://www.cs.ucl.ac.uk/staff/J.Ortega-Arjona/research/OOSA.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/J.Ortega-Arjona/research_eng.html
Root-URL: http://www.cs.ucl.ac.uk
Title: Page 1 The Concept of Software Structure and its Relations with Software Architecture and Software Patterns  
Author: Jorge L. Ortega Arjona and Graham Roberts 
Date: May, 1998.  
Address: Gower Street London WC1E 6BT, U.K.  
Affiliation: Department of Computer Science University College London  
Abstract: In this paper, we introduce and analyse the definition of software structure as a fundamental concept for software design and construction. This has lead us to consider a more precise definition of software architecture, which contrasts the difference between software architecture and software structure after reviewing other definitions of software architecture provided by several authors. The goal is to define and clarify the concept of software structure, and to discuss or at least promote discussion about its relation with software architecture and software patterns for the design and construction of software programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Software Engineering Institute, Carnegie Mellon University. Software Architecture definitions. </institution> <note> URL: http://www.sei.cmu.edu/architecture/definitions.html. Last modified: </note> <month> 25 april </month> <year> 1998. </year>
Reference-contexts: A software program represents the organization of the activity of processing elements through time. 2.1. Another definition The concept of software architecture is difficult to deal with. It seems to be slippery. A large number of definitions have been provided by a similar number of authors <ref> [1] </ref>. After reading and analysing them, we propose a new one, based on the previously mentioned analogy. Following the analogy that building architecture is defined as "the art of planning, designing and constructing buildings"[2], we simply state: Software architecture is the art of planning, designing and constructing software programs. <p> A software program has a structure. Software architecture helps to define a software structure for a software program, but a software structure does not define either a complete software program, or a software architecture. Many of the definitions found in <ref> [1] </ref> do not consider this subtle difference. Probably, the previous statement could be clarified by appealing to the analogy. Consider a building as the result of the building architecture. <p> The software structure, then, is more than only an enumeration of components and connectors. A rationale about how they are ordered and organized is an important element of it. From this perspective, almost any definition contained in <ref> [1] </ref> can be taken to define software structure.
Reference: [2] <editor> Collins Cobuild English Dictionary. </editor> <publisher> HarperCollins Publishers. </publisher> <address> 1997 edition. </address>
Reference-contexts: Simply defined, "the structure is something that consists of parts connected together in an ordered way" <ref> [2] </ref>. Comparing this definition with those definitions of software architecture, it can be observed that in general, what has been defined as software architecture is more precisely software structure. The software structure, then, is more than only an enumeration of components and connectors.
Reference: [3] <author> Douglas E. Gordon and Stephanie Stubbs. </author> <title> How Architecture Works. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: our approach with an analogy to building architecture, specifically on a classical definition provided by Vitruvius, who when asked about the role of the architect replied: "the architect is a technically skilled and sensitive man, who is capable of imbuing a building with firmitas (firmness), utilitas (commodity), and venustas (delight)" <ref> [3] </ref>. Perhaps a more useful modern translation that is possible to apply as well to software program construction would be: structure, appropriateness and (why not?) aesthetics. Software structure. A software program first of all has to be structurally sound, keep out the elements and keep its occupants comfortable.
Reference: [4] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the Study of Software Architecture. </title> <booktitle> ACM SIGSOFT, Software Engineering Notes, </booktitle> <volume> Vol. 17 No. 4. </volume> <month> October </month> <year> 1992. </year>
Reference-contexts: 1. Introduction In order to define the concept of software structure, it is necessary to have a clear concept of software architecture, by analysing previous definitions and approaches. From these approaches, the more significant seems to be "The Foundation for the Study of Software Architecture" <ref> [4] </ref>, in which Perry and Wolf propose "a philosophical foundation for the model of software architecture, developing an intuition about software architecture through analogies to existing disciplines"[4]. In this paper, it is considered that the field of building architecture "provides some of the more interesting insights for software architecture" [4]. <p> Architecture" <ref> [4] </ref>, in which Perry and Wolf propose "a philosophical foundation for the model of software architecture, developing an intuition about software architecture through analogies to existing disciplines"[4]. In this paper, it is considered that the field of building architecture "provides some of the more interesting insights for software architecture" [4]. Probably building architecture has been chosen because it is the field of construction that may provide us with the necessary experience and insight about how to structure and construct systems. <p> This particular approach obeys intuitively philosophical and practical experiences with programming software programs. The temporal nature of software has being expressed over and over in most of the software architecture bibliography. An example of this is found in <ref> [4] </ref>, when Perry and Wolf address the process and data interdependence: "there are some properties that distinguish one state of data from another; and" "those properties are the result of some transformation produced by a processing element".
Reference: [5] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerland, Michael Stal. </author> <title> Pattern-Oriented Software Architecture. </title> <publisher> John Wiley & Sons, Ltd., </publisher> <year> 1996. </year>
Reference-contexts: A functional property is visible to users of the software program by means of a particular functionality or aspects of its implementation. Functional properties expose what the software program is capable and not capable of doing <ref> [5] </ref>. Non-functional properties deal with features of a software program that are not covered by its functional description. Typically, a non-functional property addresses aspects related to the reliability, compatibility, development effort, ease of use, maintenance, etc. of a software program. In general, non-functional properties reflect how the software program performs. <p> Typically, a non-functional property addresses aspects related to the reliability, compatibility, development effort, ease of use, maintenance, etc. of a software program. In general, non-functional properties reflect how the software program performs. These attributes are qualified, but difficult to quantify <ref> [5] </ref>. Software aesthetics. A software program must be pleasing to the senses, otherwise it is not a result of software architecture. However, aesthetics in terms of software is a difficult issue. By definition, beauty is in the eye of the beholder. <p> Software Patterns and Software Structure Software Patterns have been proposed as an important approach to support the development, construction and evolution of high-quality software programs, complementing exiting techniques, methods and processes of software architecture <ref> [5] </ref>. In this sense, they can help to identify, design and construct the structural and non-structural elements needed to compose a software program. The software patterns approach proposes a flexible design and construction order of elements of a software program. <p> at what point of development should patterns be used: during analysis, high or low-level design, or even during implementation? There is no single correct answer, but a rule of thumb is that you should use the high-level architectural patterns earlier than medium-level design patterns, which are themselves used before idioms" <ref> [5] </ref>. This statement expresses an order relation among pattern categories (architectural patterns, design patterns and idioms) that are related with the structural and non-structural elements Page 5 during different phases of software design.
Reference: [6] <author> James O. Coplien. </author> <title> Worth a Thousand Words. Column without a name, </title> <type> C++ Report. </type> <month> May, </month> <year> 1998. </year>
Reference-contexts: In a software program, elements that compose a structure are not defined as clearly as in a building. A possible solution may come from software patterns. 3.2.2. Composability Another interesting property that we consider software structure should accomplish has been addressed during the last few months by Coplien <ref> [6] </ref> when explaining the topic of sketch as a way to describe structure. <p> The proposal is then a sketch that depicts the temporal relations between the software structure components. Keeping key relations stable, and a structure in time seems to arise. Furthermore, composability is an important property for piecemeal growth <ref> [6] </ref>. 3.2.3. Geometry The development of building architecture in the way we know it nowadays is mainly due to an important relation between the development of geometry expressed in mathematical terms and its applications to building structures.
Reference: [7] <author> Dewayne Perry and Takuya Katayama. </author> <title> Critical Issues in Software Evolution. </title> <booktitle> Panel in the 20th International Conference on Software Architecture, </booktitle> <address> ICSE98. Kyoto, Japan. </address> <month> April, </month> <year> 1998. </year>
Reference-contexts: Software structure should be defined in a form that allows and supports software evolution. Software appropriateness and software aesthetics represent and reflect the changing properties that a software program experiments during software evolution. Dewayne Perry addressed this dependence when stated "Architectural Evolution is the fundamental challenge" <ref> [7] </ref>. 3. Software Structure 3.1. Definition of Software Structure - the difference between Software Architecture and Software Structure Typically, the term architecture is used, overused, and some times even abused when trying to define more precisely the structure of a software program.
References-found: 7

