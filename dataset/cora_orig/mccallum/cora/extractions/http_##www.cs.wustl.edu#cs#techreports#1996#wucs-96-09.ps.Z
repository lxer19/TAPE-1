URL: http://www.cs.wustl.edu/cs/techreports/1996/wucs-96-09.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Email: girish@cs.wustl.edu  varghese@askew.wustl.edu  wucs-96-09  
Phone: +1 314 935 4163  +1 314 935 4963  
Title: Reconsidering Fragmentation and  
Author: Reassembly Girish P. Chandranmenon George Varghese 
Abstract-found: 0
Intro-found: 1
Reference: [DKS89] <author> Alan Demers, Srinivasan Keshav, and Scott Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <booktitle> Proceedings of the Sigcomm '89 Symposium on Communications Archtectures and Protocols, </booktitle> <volume> 19(4) </volume> <pages> 1-12, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Thus the memory cost is also small. If support for QoS for flows in IPv6 becomes available, it is likely that per-flow buffering will be required to supported Weighted Fair Queuing Algorithms <ref> [DKS89] </ref>. The per-flow buffering that is required for QoS can then also be used for reassembly. Comparison with Hop-by-Hop Reassembly We compare the efficient Graceful Intermediate Reassembly (GIR) Algorithm with conventional Hop-by-Hop reassembly (HHR).
Reference: [Fel93] <author> D. C. Feldmeier. </author> <title> A Data Labelling Technique for High-Performance Protocol Processing and Its Consequences. </title> <journal> Computer Communications Review (SIGCOMM '93), </journal> <volume> 23(4) </volume> <pages> 170-181, </pages> <month> October </month> <year> 1993. </year>
Reference: [Hin94] <author> R. Hinden. </author> <title> Editor, Internet Protocol, Version 6 (IPv6) Specification. </title> <type> Draft, </type> <month> October </month> <year> 1994. </year>
Reference-contexts: Kent and Mogul, in a very influential paper [KM87], provide a perceptive analysis of the disadvantages of fragmentation. Many protocol designers consider fragmentation to be at best a necessary evil; for example, recent proposals for IP version 6 <ref> [Hin94] </ref> appear to disallow fragmentation by routers (unless hop-by-hop fragmentation is used for links with small MTU sizes). In this paper, we reexamine the advantages and disadvantages of fragmentation and reassembly.
Reference: [Jac88] <author> Van Jacobson. </author> <title> Congestion Avoidance and Control. </title> <journal> Computer Communications Review | Proceedings of SIGCOMM'88), </journal> <volume> 18(4), </volume> <month> August </month> <year> 1988. </year>
Reference-contexts: At the time [KM87] was written, congestion control <ref> [Jac88] </ref> was not implemented in TCP. There is a considerable analogy between dynamic segment sizing and congestion control algorithms. Both algorithms are characterized by an Increase Policy (when and how to increase) and a Decrease policy (when and how to decrease). <p> control scheme may increase its window size (or rate) when it has not observed any retransmissions for time T , and may increase the window size by a constant; it may also decrease its window, whenever a retransmission is done, and may decrease the window size by halving the window <ref> [Jac88, RJ88] </ref>. The RFC 1191 [MD81] for path MTU also provides a dynamic segment sizing policy by beginning with the MTU of the first link, and decreasing the MTU (using, for example, a table of common packet sizes) whenever an ICMP message is received.
Reference: [Jac90] <author> Van Jacobson. </author> <title> 4.3BSD TCP Header Prediction. </title> <journal> Computer Communications Review, </journal> <volume> 20(2) </volume> <pages> 13-15, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Optimized Reassembly IP reassembly has to handle lost, duplicate and out of order fragments. This makes the complete implementation complex. We apply a common case optimization to the reassembly algorithm in the same way header prediction <ref> [Jac90] </ref> has been applied to TCP processing. In the expected case, fragments arrive in order, without loss or duplication. In this case reassembly is simple: we coalesce fragments as they arrive, until the last fragment arrives, and then pass the reassembled packet to the higher layer. <p> There are striping algorithms that preserve FIFO order. However, if striping algorithms in future IP networks routinely misorder packets, a number of other algorithms will also work inefficiently. First, discovering MTU sizes will be much harder because packets routinely take different paths to the destination. Second, TCP Header prediction <ref> [Jac90] </ref> and UDP Header Prediction [PP93] will not work because they assume in-order delivery. Many other router and endnode caching optimizations rely on similar temporal locality. Thirdly, it will be hard to guarantee quality of service when datagrams are routed over multiple paths.
Reference: [KM87] <author> C. A. Kent and J. C. Mogul. </author> <title> Fragmentation Considered Harmful. </title> <journal> Computer Communications Review | Proceedings of SIGCOMM'87), </journal> <volume> 17(5) </volume> <pages> 390-401, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Although fragmentation and reassembly has been a key tool for IP in dealing with diversity, there has been a perception that fragmentation is harmful for performance and useful only for interoperability. Kent and Mogul, in a very influential paper <ref> [KM87] </ref>, provide a perceptive analysis of the disadvantages of fragmentation. Many protocol designers consider fragmentation to be at best a necessary evil; for example, recent proposals for IP version 6 [Hin94] appear to disallow fragmentation by routers (unless hop-by-hop fragmentation is used for links with small MTU sizes). <p> In this paper, we reexamine the advantages and disadvantages of fragmentation and reassembly. While the disadvantages cited in <ref> [KM87] </ref> remain valid, we describe mechanisms to avoid or alleviate the effect of these disadvantages. We also show (using a combination of analysis and measurement) that under certain circumstances fragmentation can improve performance. The performance improvement is aided by optimizing the fragmentation and reassembly code. <p> Finally, we describe mechanisms to avoid the disadvantages of fragmentation. In particular, we elaborate on and develop a scheme first suggested in <ref> [KM87] </ref>, that we call Dynamic Segment Sizing. This allows us to cope with the throughput reduction caused by the fact that a fragment loss leads to the loss of the entire packet. This paper is organized as follows. <p> We reconsider fragmentation in Section 4, where we describe performance measurements, a performance model, and Dynamic Segment Sizing. 2. Previous Work We review the arguments against fragmentation and the techniques suggested to avoid fragmentation or improve reassembly performance. 2.1. Disadvantages of Fragmentation The main arguments against fragmentation in <ref> [KM87] </ref> remain valid and are discussed below. Fragmentation causes inefficient resource usage: Bad choices of sender segment sizes can result in a large number of fragments which increases the number of packet headers to be processed. <p> Using Don't Fragment flag large delay in startup. Help from routing protocols does not work with hierarchical routing. Table 2: Problems with algorithms that try to avoid fragmentation. 2.2. Techniques for Avoiding Fragmentation To avoid the problems cited above, Kent and Mogul suggested a number of schemes <ref> [KM87] </ref> to avoid fragmentation. We discuss the drawbacks of these schemes below. The discussion is summarized in Table 2. There are two major techniques suggested in [KM87]: using a default MTU size or discovering (and using) the minimum MTU on the path. <p> Techniques for Avoiding Fragmentation To avoid the problems cited above, Kent and Mogul suggested a number of schemes <ref> [KM87] </ref> to avoid fragmentation. We discuss the drawbacks of these schemes below. The discussion is summarized in Table 2. There are two major techniques suggested in [KM87]: using a default MTU size or discovering (and using) the minimum MTU on the path. One proposed discovery method is to send a probe to the destination which each router updates to record the smallest MTU encountered. This requires router modifications. <p> One proposed discovery method is to send a probe to the destination which each router updates to record the smallest MTU encountered. This requires router modifications. A second approach, which has been specified and implemented by some systems, is outlined in <ref> [KM87] </ref> and elaborated in RFC 1191 [MD81]. This approach uses the "don't fragment" flag and uses the MTU of the first hop as the initial datagram size. <p> This translates into a larger number of packets sent and processed by the hosts and routers. If the bottleneck is host protocol processing, this can adversely affect performance (see Section 4 for a detailed argument). Despite these disadvantages, there are situations in which the schemes outlined in <ref> [KM87] </ref> and RFC 1191 are useful. The path discovery schemes are orthogonal to (and can be combined with) our main ideas; our dynamic segment sizing scheme is an elaboration of an idea suggested in [KM87]. 2 Routers that support this feature can also return the MTU of the outgoing link in <p> Despite these disadvantages, there are situations in which the schemes outlined in <ref> [KM87] </ref> and RFC 1191 are useful. The path discovery schemes are orthogonal to (and can be combined with) our main ideas; our dynamic segment sizing scheme is an elaboration of an idea suggested in [KM87]. 2 Routers that support this feature can also return the MTU of the outgoing link in the ICMP message so that the source can choose its segment size more intelligently. Reconsidering Fragmentation and Reassembly 4 2.3. <p> Then we describe a simple analysis that quantifies the advantage of using large packets. 4.1.1. How Super Fragmentation helps Performance. Super fragmentation is a technique by which we trade off small increase in IP processing due to fragmentation for larger reduction in TCP processing. This idea is suggested in <ref> [KM87] </ref> under the name "intentional fragmentation" and in [SGK + 85]. We use large TCP segment sizes and let IP fragment them. When the cost of fragmenting and reassemby is less than the TCP processing required for a large number 7 of segments, this technique will provide increased throughput. <p> Dynamic Segment Sizing The use of super-fragmentation can cause serious instability in the case of lossy links <ref> [KM87] </ref>. We have observed this by a simple experiment in which we did super-fragmentation and also dropped each fragment with probability p. We found, hardly surprisingly, that the throughput dropped down to 0 for small values of p. <p> In order to guard against this, we suggest that the Transport segment size should be dynamically adjusted. A wide range of dynamic segment sizing schemes are possible, based on how segment sizes are increased and decreased, as well as when they are done. <ref> [KM87] </ref> suggests such a scheme (detecting the problem using increased retransmission rates) but states that it will not work well unless coupled with a congestion control scheme. At the time [KM87] was written, congestion control [Jac88] was not implemented in TCP. <p> sizing schemes are possible, based on how segment sizes are increased and decreased, as well as when they are done. <ref> [KM87] </ref> suggests such a scheme (detecting the problem using increased retransmission rates) but states that it will not work well unless coupled with a congestion control scheme. At the time [KM87] was written, congestion control [Jac88] was not implemented in TCP. There is a considerable analogy between dynamic segment sizing and congestion control algorithms. Both algorithms are characterized by an Increase Policy (when and how to increase) and a Decrease policy (when and how to decrease). <p> Thus segment size reduction may be a further fallback mechanism for congestion control when losses are heavy and the window size is already reduced to 1. 4.3. Avoiding other Disadvantages of Fragmentation Dynamic Segment Sizing helps avoid or lessen the major disadvantage of fragmentation pointed out in <ref> [KM87] </ref> | i.e., poor performance under loss. We describe techniques to alleviate the other disadvantages of fragmentation. Reconsidering Fragmentation and Reassembly 16 Poor Choice of Fragment Size:. [KM87] points out that a packet of size x + * that is to be fragmented over a link of size x can cause <p> Avoiding other Disadvantages of Fragmentation Dynamic Segment Sizing helps avoid or lessen the major disadvantage of fragmentation pointed out in <ref> [KM87] </ref> | i.e., poor performance under loss. We describe techniques to alleviate the other disadvantages of fragmentation. Reconsidering Fragmentation and Reassembly 16 Poor Choice of Fragment Size:. [KM87] points out that a packet of size x + * that is to be fragmented over a link of size x can cause roughly twice the optimal number of fragments for small *. Thus it is necessary to have the source intelligently choose the segment size. <p> This idea is incorporated into the "plateau table" in RFC 1191. The same idea, however, can be used with Dynamic Segment Sizing (especially for off-LAN traffic) to avoid suboptimal fragmentation in most cases. Reassembly Deadlocks/Livelocks:. <ref> [KM87] </ref> points out that it is hard to have a reassembly algorithm that guarantees progress even if fragments are being delivered at some rate because buffers could fill up with partially reassembled fragments. Even though buffers are released after a time period, this could keep recurring, resulting in livelocks. <p> Interoperating among these diverse technologies is a challenge at which IP has been very successful, using fragmentation and reassembly and other techniques. Recent trends in the IP community have suggested <ref> [KM87] </ref> removing or limiting the need for IP fragmentation and reassembly by discovering the smallest MTU size. <p> Relation to Other Approaches and Other Protocols:. Our results are complementary to and build upon the analysis and proposals in <ref> [KM87] </ref>. All the disadvantages of fragmentation outlined in [KM87] remain valid; we have proposed additional mechanisms (e.g., dynamic segment sizing, separate reassembly buffers for in-order fragment reassembly) to combat these problems. We agree with [KM87], that fragmentation without these mechanisms would still be "considered harmful". <p> Relation to Other Approaches and Other Protocols:. Our results are complementary to and build upon the analysis and proposals in <ref> [KM87] </ref>. All the disadvantages of fragmentation outlined in [KM87] remain valid; we have proposed additional mechanisms (e.g., dynamic segment sizing, separate reassembly buffers for in-order fragment reassembly) to combat these problems. We agree with [KM87], that fragmentation without these mechanisms would still be "considered harmful". Our dynamic segment sizing algorithms are an elaboration of an idea in [KM87] and <p> Our results are complementary to and build upon the analysis and proposals in <ref> [KM87] </ref>. All the disadvantages of fragmentation outlined in [KM87] remain valid; we have proposed additional mechanisms (e.g., dynamic segment sizing, separate reassembly buffers for in-order fragment reassembly) to combat these problems. We agree with [KM87], that fragmentation without these mechanisms would still be "considered harmful". Our dynamic segment sizing algorithms are an elaboration of an idea in [KM87] and influenced by the dynamic MTU discovery algorithm in RFC 1191. <p> in <ref> [KM87] </ref> remain valid; we have proposed additional mechanisms (e.g., dynamic segment sizing, separate reassembly buffers for in-order fragment reassembly) to combat these problems. We agree with [KM87], that fragmentation without these mechanisms would still be "considered harmful". Our dynamic segment sizing algorithms are an elaboration of an idea in [KM87] and influenced by the dynamic MTU discovery algorithm in RFC 1191.
Reference: [MD81] <author> J. C. Mogul and S. E. Deering. </author> <title> Path mtu discovery. </title> <type> Technical Report RFC 791, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: One proposed discovery method is to send a probe to the destination which each router updates to record the smallest MTU encountered. This requires router modifications. A second approach, which has been specified and implemented by some systems, is outlined in [KM87] and elaborated in RFC 1191 <ref> [MD81] </ref>. This approach uses the "don't fragment" flag and uses the MTU of the first hop as the initial datagram size. Whenever a router cannot forward this datagram because of a smaller MTU on the outgoing link, it discards the datagram and sends an ICMP message back to the sender. <p> The RFC 1191 <ref> [MD81] </ref> for path MTU also provides a dynamic segment sizing policy by beginning with the MTU of the first link, and decreasing the MTU (using, for example, a table of common packet sizes) whenever an ICMP message is received.
Reference: [Mog92] <author> J. C. Mogul. </author> <title> IP Network Performance, in Internet System Handbook, </title> <editor> eds. D.C. Lynch and M.T. Rose. </editor> <publisher> Addison-Wesley, </publisher> <address> Reading,MA, </address> <year> 1992. </year>
Reference-contexts: When Larger Packet Sizes are Better: A Performance Model. In the last two subsections we have argued that allowing fragmentation can improve performance because it allows the use of larger packet sizes on the last link. This agrees with the findings of several researchers (e.g., <ref> [Mog92] </ref>).
Reference: [Mog95] <author> J. C. Mogul. </author> <title> The Case for Persistent HTTP Connections. </title> <booktitle> In In Proc. SIGCOMM '95, </booktitle> <pages> pages 299-313, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Round trip delays are increasingly significant for high speed networks and applications that care about latency (e.g., HTTP and RPC traffic). Caching can help but may not be applicable for HTTP like connections that are unlikely to exhibit significant locality <ref> [Mog95] </ref>. These problems are exacerbated when using multicast communication.
Reference: [osi] <institution> ISO 8073 Information Processing Systems Open Systems Interconnection Transport Protocol Specification. </institution> <type> Technical report. </type>
Reference-contexts: The OSI protocol suite [Per92] uses a very similar fragmentation scheme and thus the first two ideas apply directly. However, the OSI Transport Protocol, TP-4 <ref> [osi] </ref>, does not allow dynamic segment sizing because TP-4 numbers segments and not bytes as in TCP. Thus, without a change to the TP-4 mechanisms, segment size changes are not possible in TP-4 without setting up a new connection.
Reference: [Per92] <author> R. Perlman. </author> <title> Interconnections: Bridges and Routers. </title> <publisher> Addison-Wesley, </publisher> <address> Reading,MA, </address> <year> 1992. </year>
Reference-contexts: If all fragments arrive at the receiver, the common packet ID allows the receiver to associate the fragments with a single packet, and the length and offset fields are used to paste together the fragments in the right order. The same solution is used by the OSI Routing Protocol <ref> [Per92] </ref>. Although fragmentation and reassembly has been a key tool for IP in dealing with diversity, there has been a perception that fragmentation is harmful for performance and useful only for interoperability. Kent and Mogul, in a very influential paper [KM87], provide a perceptive analysis of the disadvantages of fragmentation. <p> The three ideas advocated in this paper: optimized reassembly based on FIFO fragment arrivals, Graceful Intermediate Reassembly, and Dynamic Segment Sizing are all orthogonal and can be applied either separately or together, and to other protocol suites. The OSI protocol suite <ref> [Per92] </ref> uses a very similar fragmentation scheme and thus the first two ideas apply directly. However, the OSI Transport Protocol, TP-4 [osi], does not allow dynamic segment sizing because TP-4 numbers segments and not bytes as in TCP.
Reference: [Pos81] <author> J. B. Postel. </author> <title> Internet protocol. </title> <type> Technical Report RFC 791, </type> <institution> Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: We use 16260 byte (1460 bytes of data in first fragment and 1480 bytes each in next 3 Mbufs are memory management structures used in NetBSD. 4 The IP specification <ref> [Pos81] </ref> says that a fragment is uniquely identified by source address, destination address, datagram identifier and protocol identifier. We assumed that sources use a unique global identifier for each IP datagram they send.
Reference: [PP93] <author> C. Partridge and S. Pink. </author> <title> A Faster UDP. </title> <journal> IEEE/ACM Tran. on Networking, </journal> <volume> 1(4), </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: However, if striping algorithms in future IP networks routinely misorder packets, a number of other algorithms will also work inefficiently. First, discovering MTU sizes will be much harder because packets routinely take different paths to the destination. Second, TCP Header prediction [Jac90] and UDP Header Prediction <ref> [PP93] </ref> will not work because they assume in-order delivery. Many other router and endnode caching optimizations rely on similar temporal locality. Thirdly, it will be hard to guarantee quality of service when datagrams are routed over multiple paths. Thus an optimization based on FIFO delivery of fragments seems reasonable. 4.
Reference: [RJ88] <author> K. K. Ramakrishnan and R. Jain. </author> <title> A Binary Feedback Scheme for Congestion Avoidance in Computer Networks with a Connectionless Network Layer. </title> <journal> Computer Communications Review | Proceedings of SIGCOMM'88), </journal> <volume> 18(4), </volume> <month> August </month> <year> 1988. </year>
Reference-contexts: control scheme may increase its window size (or rate) when it has not observed any retransmissions for time T , and may increase the window size by a constant; it may also decrease its window, whenever a retransmission is done, and may decrease the window size by halving the window <ref> [Jac88, RJ88] </ref>. The RFC 1191 [MD81] for path MTU also provides a dynamic segment sizing policy by beginning with the MTU of the first link, and decreasing the MTU (using, for example, a table of common packet sizes) whenever an ICMP message is received.
Reference: [SGK + 85] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> Proc. Summer USENIX Conference, </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: How Super Fragmentation helps Performance. Super fragmentation is a technique by which we trade off small increase in IP processing due to fragmentation for larger reduction in TCP processing. This idea is suggested in [KM87] under the name "intentional fragmentation" and in <ref> [SGK + 85] </ref>. We use large TCP segment sizes and let IP fragment them. When the cost of fragmenting and reassemby is less than the TCP processing required for a large number 7 of segments, this technique will provide increased throughput.

References-found: 15

