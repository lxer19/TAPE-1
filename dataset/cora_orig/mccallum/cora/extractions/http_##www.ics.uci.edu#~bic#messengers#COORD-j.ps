URL: http://www.ics.uci.edu/~bic/messengers/COORD-j.ps
Refering-URL: http://swarm.cs.wustl.edu/cs673/
Root-URL: 
Title: Distributed Coordination with Messengers  
Author: Munehiro Fukuda Lubomir F. Bic Michael B. Dillencourt Fehmina Merchant 
Date: July 24, 1997  
Affiliation: Department of Information and Computer Science University of California, Irvine  
Abstract: Messengers is a paradigm for the programming of distributed systems. It is based on the principles of autonomous messages, called Messengers, which carry their own behavior in the form of a program. This enables them to navigate freely in the underlying computational network, communicate with one another, and invoke compiled node-resident C functions in the nodes they visit. Hence a distributed application is viewed as a collection of C functions whose invocation and interoperation is orchestrated by Messengers. This provides for a clear separation between computations, as expressed by the individual node functions, and coordination, which is the order of function invocations and the transport of information among them as prescribed by Messengers. This separation allows each layer to be designed and implemented separately. It also supports the reuse of the coordination structures and the interactive and incremental development and use of distributed applications.
Abstract-found: 1
Intro-found: 1
Reference: [Arb96] <author> F. Arbab. </author> <title> The IWIM model for coordination of concurrent activities. </title> <editor> In P. Cian-carini and C. Hankin, editors, </editor> <booktitle> Coordination Languages and Models, </booktitle> <pages> pages 34-56, </pages> <address> Cesena, Italy, April 1996. </address> <publisher> Springer Verlag Lecture Notes in Computer Science 1061. </publisher>
Reference-contexts: The coordination requirements of a process, such as connecting its ports 1 to ports of other processes through channels are handled by other processes. Examples of the channel-based approach are the IWIM model <ref> [Arb96] </ref>, and the ConCoord programming environment [Hol96]. Another approach to coordination is medium-based coordination. At a very abstract level, all medium-based systems work on the same principle. There is a common medium, or state space, shared by the processes.
Reference: [BFD96] <author> L.F. Bic, M. Fukuda, and M. Dillencourt. </author> <title> Distributed computing using autonomous objects. </title> <journal> IEEE Computer, </journal> <volume> 29(8), </volume> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: Section 4 then discusses related research to put the present work in a larger context. 2 The Messengers Paradigm 2.1 Basic Philosophy of Messengers Messengers is a coordination paradigm for distributed systems based on the concept of autonomous messages <ref> [BFD96] </ref>, which we refer to as Messenger to differentiate them from ordinary passive messages. A Messenger is a self-contained object, consisting of a program and current state, including a program counter and local variables.
Reference: [BL93] <author> J-P. Ban^atre and D. Le Metayer. </author> <title> Programming by multiset transformation. </title> <journal> Comm. ACM, </journal> <volume> 36(1) </volume> <pages> 98-111, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Processes can modify the state space, and these modifications affect the behavior of other processes. Computation is performed by the processes, and coordination is achieved through the shared state space. One of the most prominent examples of the medium-based approach is Gamma <ref> [BL93] </ref>, based on a chemical reaction metaphor. The state space is a multiset of objects. Gamma programs consist of matched (reaction-conditions; action) pairs. Execution proceeds by replacing a collection of objects that satisfy a reaction condition by the result of applying the corresponding action.
Reference: [Car95] <author> L. Cardelli. Obliq: </author> <title> A language with distributed scope. </title> <journal> Computing Systems, </journal> <volume> 8(1) </volume> <pages> 27-59, </pages> <month> Winter </month> <year> 1995. </year>
Reference-contexts: This can be supported by the underlying operating system, i.e., by supporting the migration of address spaces and process states between machines, or at the object level. Emerald [RTL + 91] provides a number of specific primitives to efficiently locate and move fine-grain objects (including processes). Similarly, Obliq <ref> [Car95] </ref> permits threads to transfer themselves between physical sites while retaining their original semantics. These forms of migration differ from Messengers in two significant ways.
Reference: [CG89] <author> N. Carriero and D. Gelernter. </author> <title> Linda in context. </title> <journal> Comm. ACM, </journal> <volume> 32(4), </volume> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: 1 Coordination and the Messengers Model The notion of separating concurrent programming into computation and coordination was introduced in <ref> [CG89] </ref>. Coordination includes the synchronization, communication, and creation/destruction of computational activities required to orchestrate individual computations into a coherent system. One approach to coordination utilizes channel-based communication between processes. Processes communicate directly with each other by reading from and writing to ports . <p> As programs are executed, they may cause multiset transformations that create the reaction conditions necessary to allow other programs to execute. Another well-known example of coordination through a shared state space is the Linda system <ref> [CG89] </ref>. The state space is a pool of data called a tuple space. Processes may insert, read, and remove tuples from the tuple space using various primitives. They may also spawn new activities that leave new tuples in the tuple space upon their termination.
Reference: [Cia94] <author> P. Ciancarini. </author> <title> Distributed programming with logic tuple spaces. </title> <journal> New Generation Computing, </journal> <volume> 12(3) </volume> <pages> 251-284, </pages> <year> 1994. </year>
Reference-contexts: In Messengers, the state space is explicitly partitioned by its mapping onto the logical network, and this structuring is supported by the navigational features described in Section 2. Thus the Messengers model is most similar to variants of Linda, such as PoliS <ref> [Cia94] </ref>, that support explicit 1 We use small caps (Messengers) to denote the entire system, and mixed case (Messengers) to denote the individual processes. 2 partitioning of the tuple space into multiple tuple spaces. <p> One of the main differences is that in Messengers, the state space is explicitly partitioned. Here we compare Messengers to PoliS <ref> [Cia94] </ref>, an enhancement to the Linda model intended to simplify the design of distributed systems by incorporating explicit partitioning of the tuple space. PoliS allows multiple named tuple spaces, called places, such that each tuple belongs to exactly one tuple space.
Reference: [Com94] <author> DIS Steering Committee. </author> <title> The DIS vision: A map to the future of distributed simulation. </title> <institution> Institute for Simulation and Training, </institution> <year> 1994. </year>
Reference-contexts: Similarly, complex natural phenomena, like turbulence or heat conduction, can effectively be modeled by only describing the local interactions of neighboring particles. Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations <ref> [Com94] </ref>, particle-level simulations in physics [HE88], traffic modeling [Res94], evolution and behavior in biology/ecology [HDP88, Vil92, HW92], artificial life [Lan94], and advanced graphics and animation [Rey87]. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications.
Reference: [FMB + 96] <author> M. Fukuda, K.L. Morse, L.F. Bic, M. Dillencourt, E. Lee, and D. Menzel. </author> <title> A novel approach to toxicology simulation based on autonomous objects. </title> <booktitle> In SCS Western MultiConference, Simulation in the Medical Sciences, </booktitle> <month> Jan </month> <year> 1996. </year>
Reference-contexts: In Toxicology, research has produced a number of useful models that allow the distribution and metabolism of various chemical substances (e.g., drugs or environmental toxins) to be simulated. collaboration with UCI's College of Medicine <ref> [RA84, FMB + 96] </ref>. Under this model, the lung node consists of two compartments the Alveolar Space represents the area into which outside air is inhaled.
Reference: [Fuj90] <author> R.M. Fujimoto. </author> <title> Optimistic approaches to parallel discrete event simulation. </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> Vol.7(No.2):153 - 191, </volume> <year> 1990. </year>
Reference-contexts: Messengers supports both conservative and optimistic approaches to virtual time maintenance, which require periodic exchanges of timing information among all participating daemons, followed by possible roll-backs of local computations, to guarantee that the virtual time is consistent across all nodes <ref> [Jef85, Fuj90] </ref>. 3 Advantages of the Navigational Paradigm In this section, we address the advantages of the navigational paradigm. We first show how Messengers can be used to construct a Toxicology simulation model, and we discuss the advantages of this approach.
Reference: [HDP88] <author> M. Huston, D. DeAngelis, and W. Post. </author> <title> New computer models unify ecological theory. </title> <journal> BioScience, </journal> <volume> 38(10) </volume> <pages> 682-691, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations [Com94], particle-level simulations in physics [HE88], traffic modeling [Res94], evolution and behavior in biology/ecology <ref> [HDP88, Vil92, HW92] </ref>, artificial life [Lan94], and advanced graphics and animation [Rey87]. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications. Each entity type corresponds to a separate Messenger script, that defines its behavior and its potential interactions with other entities.
Reference: [HE88] <author> R.W. Hockney and J.W. Eastwood. </author> <title> Computer Simulations using Particles. </title> <publisher> IOP Publishing Ltd, </publisher> <address> Bristol, Great Britain, </address> <year> 1988. </year>
Reference-contexts: Similarly, complex natural phenomena, like turbulence or heat conduction, can effectively be modeled by only describing the local interactions of neighboring particles. Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations [Com94], particle-level simulations in physics <ref> [HE88] </ref>, traffic modeling [Res94], evolution and behavior in biology/ecology [HDP88, Vil92, HW92], artificial life [Lan94], and advanced graphics and animation [Rey87]. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications.
Reference: [Hol96] <author> A. A. Holzbacher. </author> <title> A software environment for concurrent coordinated programming. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> Coordination Languages and Models, </booktitle> <pages> pages 249-226, </pages> <address> Cesena, Italy, </address> <month> April </month> <year> 1996. </year> <booktitle> Springer Verlag Lecture Notes in Computer Science 1061. </booktitle> <pages> 23 </pages>
Reference-contexts: The coordination requirements of a process, such as connecting its ports 1 to ports of other processes through channels are handled by other processes. Examples of the channel-based approach are the IWIM model [Arb96], and the ConCoord programming environment <ref> [Hol96] </ref>. Another approach to coordination is medium-based coordination. At a very abstract level, all medium-based systems work on the same principle. There is a common medium, or state space, shared by the processes. Processes can modify the state space, and these modifications affect the behavior of other processes.
Reference: [HW92] <author> A. Huth and C. Wissel. </author> <title> The simulation of the movement of fish schools. </title> <journal> Journal of Theoretical Biology, </journal> <volume> 156 </volume> <pages> 365-385, </pages> <year> 1992. </year>
Reference-contexts: Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations [Com94], particle-level simulations in physics [HE88], traffic modeling [Res94], evolution and behavior in biology/ecology <ref> [HDP88, Vil92, HW92] </ref>, artificial life [Lan94], and advanced graphics and animation [Rey87]. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications. Each entity type corresponds to a separate Messenger script, that defines its behavior and its potential interactions with other entities.
Reference: [IEE96] <editor> IEE. </editor> <booktitle> IEE Colloquium on Intelligent Agents and Their Applications, </booktitle> <address> No.1996/101, London, UK, </address> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: One of the first and best known representatives of this paradigm is Telescript 20 [Whi94]. Different aspects of mobile agents have been explored in a multitude of recent projects <ref> [IEE96, MA997] </ref>. While Messengers uses the same basic principles of autonomous navigation, it differs from mobile agent systems in two significant ways. First, it uses C to express both computations and navigation. Hence Messengers is only a new programming paradigm, rather than a new programming language.
Reference: [Jef85] <author> D.R. Jefferson. </author> <title> Virtual time. </title> <journal> ACM TOPLAS, </journal> <volume> Vol.7(No.3):404 - 425, </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: Consequently, any collection of Messengers can interact with each other by hopping to a common node and reading/writing agreed-upon node variables. To support temporal interaction, Messengers provide support for virtual time, i.e., a global time line consistent over all physical nodes <ref> [Jef85] </ref>. Conceptually, this is a globally shared variable that simulates the passage of time. It allows any Messenger to suspend itself until a certain point in the virtual time has been reached. <p> Messengers supports both conservative and optimistic approaches to virtual time maintenance, which require periodic exchanges of timing information among all participating daemons, followed by possible roll-backs of local computations, to guarantee that the virtual time is consistent across all nodes <ref> [Jef85, Fuj90] </ref>. 3 Advantages of the Navigational Paradigm In this section, we address the advantages of the navigational paradigm. We first show how Messengers can be used to construct a Toxicology simulation model, and we discuss the advantages of this approach.
Reference: [Lan94] <editor> C. Langton, editor. </editor> <booktitle> Artificial Life III. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations [Com94], particle-level simulations in physics [HE88], traffic modeling [Res94], evolution and behavior in biology/ecology [HDP88, Vil92, HW92], artificial life <ref> [Lan94] </ref>, and advanced graphics and animation [Rey87]. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications. Each entity type corresponds to a separate Messenger script, that defines its behavior and its potential interactions with other entities.
Reference: [MA997] <author> MA '97: </author> <booktitle> First International Conference on Mobile Agents, Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <address> Berlin, Germany, </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: One of the first and best known representatives of this paradigm is Telescript 20 [Whi94]. Different aspects of mobile agents have been explored in a multitude of recent projects <ref> [IEE96, MA997] </ref>. While Messengers uses the same basic principles of autonomous navigation, it differs from mobile agent systems in two significant ways. First, it uses C to express both computations and navigation. Hence Messengers is only a new programming paradigm, rather than a new programming language.
Reference: [MB96] <editor> Susan L. Mabry and Lubomir F. Bic. </editor> <booktitle> Distributed biomedical simulation in speedes. In Proc. of SCS Simulation Multiconference, High Performance Computing Symposium, </booktitle> <pages> pages 36 - 41, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: These are then interconnected by directed links, which represent the flow of fluids, in particular, blood. The information exchanged along the links depends on the particular application. For example, in a cardio-vascular simulation, values such as blood pressure and volume would be exchanged <ref> [MB96] </ref>. In Toxicology, research has produced a number of useful models that allow the distribution and metabolism of various chemical substances (e.g., drugs or environmental toxins) to be simulated. collaboration with UCI's College of Medicine [RA84, FMB + 96].
Reference: [RA84] <author> J. C. Ramsey and M. E. Andersen. </author> <title> A physiologically based description of the inhalation pharmacokinetics of styrene in rats and humans. </title> <journal> Toxicology and Applied Pharmacology, </journal> <volume> 73 </volume> <pages> 159-175, </pages> <year> 1984. </year>
Reference-contexts: In Toxicology, research has produced a number of useful models that allow the distribution and metabolism of various chemical substances (e.g., drugs or environmental toxins) to be simulated. collaboration with UCI's College of Medicine <ref> [RA84, FMB + 96] </ref>. Under this model, the lung node consists of two compartments the Alveolar Space represents the area into which outside air is inhaled.
Reference: [Res94] <author> M. Resnick. </author> <title> Changing the centralized mind. </title> <journal> Technology Review, </journal> <pages> pages 33-40, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations [Com94], particle-level simulations in physics [HE88], traffic modeling <ref> [Res94] </ref>, evolution and behavior in biology/ecology [HDP88, Vil92, HW92], artificial life [Lan94], and advanced graphics and animation [Rey87]. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications.
Reference: [Rey87] <author> C.W. Reynolds. </author> <title> Flocks, herds, and schools: A distributed behavioral model. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 25-34, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations [Com94], particle-level simulations in physics [HE88], traffic modeling [Res94], evolution and behavior in biology/ecology [HDP88, Vil92, HW92], artificial life [Lan94], and advanced graphics and animation <ref> [Rey87] </ref>. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications. Each entity type corresponds to a separate Messenger script, that defines its behavior and its potential interactions with other entities.
Reference: [RTL + 91] <author> R.K. Raj, E Tempero, H.M. Levy, A.P. Black, et al. </author> <title> Emerald a general-purpose programming language. </title> <journal> Software-Practice & Experience, </journal> <volume> 21(1), </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: This can be supported by the underlying operating system, i.e., by supporting the migration of address spaces and process states between machines, or at the object level. Emerald <ref> [RTL + 91] </ref> provides a number of specific primitives to efficiently locate and move fine-grain objects (including processes). Similarly, Obliq [Car95] permits threads to transfer themselves between physical sites while retaining their original semantics. These forms of migration differ from Messengers in two significant ways.
Reference: [Vil92] <author> F. Villa. </author> <title> New computer architectures as tools for ecological thought. Trends in Ecology and Evolution (TREE), </title> <booktitle> 7(6) </booktitle> <pages> 179-183, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Such models are called individual-based and have been applied successfully in a number of different domains, including interactive battle simulations [Com94], particle-level simulations in physics [HE88], traffic modeling [Res94], evolution and behavior in biology/ecology <ref> [HDP88, Vil92, HW92] </ref>, artificial life [Lan94], and advanced graphics and animation [Rey87]. Messengers, due to their self-migrating capabilities, are a natural paradigm for these types of applications. Each entity type corresponds to a separate Messenger script, that defines its behavior and its potential interactions with other entities.
Reference: [Whi94] <author> J.E. White. </author> <title> Telescript technology. </title> <type> Technical report, </type> <institution> General Magic, Inc., Mountain View, </institution> <address> CA 94040, </address> <year> 1994. </year> <month> 24 </month>
Reference-contexts: One of the first and best known representatives of this paradigm is Telescript 20 <ref> [Whi94] </ref>. Different aspects of mobile agents have been explored in a multitude of recent projects [IEE96, MA997]. While Messengers uses the same basic principles of autonomous navigation, it differs from mobile agent systems in two significant ways. First, it uses C to express both computations and navigation.
References-found: 24

