URL: http://trantor.cse.psu.edu/~keefe/vpesati.ps
Refering-URL: http://trantor.cse.psu.edu/~keefe/star-dbs.html
Root-URL: http://www.cse.psu.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Mike Accetta, Robert Baron, William Bolosky, David Golub, Richard Rashid, Avadis Tevanian, and Michael Young. </author> <title> Mach: A New Kernel Foundation for Unix Development. </title> <booktitle> In Proceedings of the Summer 1986 USENIX Conference. USENIX, </booktitle> <year> 1986. </year>
Reference-contexts: It also supports the retrieval of log records for the purpose of recovery. 8 3.1 DTOS DTOS [7] is an experimental prototype operating system developed at Secure Computing Corporation consistent with the B3 level of assurance [5]. It provides mechanisms to implement multilevel security on the CMU Mach Microkernel <ref> [1] </ref> [9] and provides policy-based control over all Mach services [6]. The Security Enhanced Lites server provides a UNIX operating system environment and enforces the security decisions made in the Security Server. The file system is extended to attach security policy relevant labels to all files in the system.
Reference: [2] <author> Ashwin Baskaran. </author> <title> A Slot Stealing Based Multilevel Secure Database Buffer Manager. M.S. </title> <type> Thesis, </type> <institution> Dept. of Computer Science and Eng., The Pennsylvania State University, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: The RM implements a set of relational operators and provides a low level interface allowing access to tuples (tuple read, tuple insertion, tuple update). The RM makes pin requests to the level buffer manager (LBM). The LBM satisfies these requests by coordinating with the trusted buffer manager (TBM) [17] <ref> [2] </ref>. The TBM controls the movement of data between the persistent and volatile portions of the database for all the security levels. It also coordinates logging with page flushes to ensure recoverability. Each RM can service multiple clients concurrently. The log manager is a trusted component.
Reference: [3] <author> D.E. Bell and L.J. LaPadula. </author> <title> Secure computer systems: Unified exposition and multics interpretations. </title> <type> Technical Report MTR-2997, </type> <institution> Mitre Corp., </institution> <month> March </month> <year> 1976. </year>
Reference-contexts: If, given two levels l 1 and l 2 , neither l 1 dominates l 2 nor l 2 dominates l 1 holds, the two levels are said to be incomparable. 3 Mandatory security policy uses the The Bell and LaPadula model <ref> [3] </ref> which defines two conditions for multilevel security. Simple Security Property A subject S is allowed read access to an object O only if the clearance of the subject dominates the sensitivity level of the object.
Reference: [4] <author> P.A. Bernstein, V.Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: is one that can be granted rights beyond those prescribed by the security policy, but is trusted not to violate the policy by misusing the rights to allow information flows beyond those allowed by the policy. 4 2.2 Log Management Most of the terminology in this section is paraphrased from <ref> [4] </ref>. There are three types of failures that are important [4], known as transaction failures, system failures and media failures. A transaction failure is one which occurs on a transaction abort. A system failure refers to the loss of volatile memory. (for example, on a power outage). <p> by the security policy, but is trusted not to violate the policy by misusing the rights to allow information flows beyond those allowed by the policy. 4 2.2 Log Management Most of the terminology in this section is paraphrased from <ref> [4] </ref>. There are three types of failures that are important [4], known as transaction failures, system failures and media failures. A transaction failure is one which occurs on a transaction abort. A system failure refers to the loss of volatile memory. (for example, on a power outage). A media failure refers to the loss of stable storage.
Reference: [5] <institution> Department of Defense Computer Security Center. Department of Defense Trusted Computer Systems Evaluation Criteria, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: The log is stored on stable storage. Stable storage by definition remains intact and available across system failures (for example, Disk). Although much work has been done in the area of log management, this work has not addressed issues related to multilevel security (MLS) <ref> [5] </ref>. In this paper we address this case by extending the concept to multilevel secure databases. <p> Subjects are active entities that access the objects. Each object is assigned a security level called a sensitivity level. Also, each subject is assigned a security level called a clearance. The security level of a subject or object X is denoted by SC (X). The Multilevel security policy <ref> [5] </ref> for multilevel secure systems includes a mandatory and discretionary component. The Mandatory component restricts the access of subjects to objects on the basis of a subject clearance and an objects sensitivity. The discretionary component controls access based on the identity of the user making the request. <p> These communications paths are known as covert channels. The bandwidth of any such channel must be determined and limited depending upon the degree of assurance <ref> [5] </ref> required by the system. The principle of noninterference [8] imposes the constraint that system outputs visible to a subject should not depend on the presence or actions of non-dominated subjects. Any subject that requires privileges allowing it to violate the *-property is said to be trusted. <p> It also supports the retrieval of log records for the purpose of recovery. 8 3.1 DTOS DTOS [7] is an experimental prototype operating system developed at Secure Computing Corporation consistent with the B3 level of assurance <ref> [5] </ref>. It provides mechanisms to implement multilevel security on the CMU Mach Microkernel [1] [9] and provides policy-based control over all Mach services [6]. The Security Enhanced Lites server provides a UNIX operating system environment and enforces the security decisions made in the Security Server.
Reference: [6] <author> Spencer E.Minear. </author> <title> Providing Policy Control Over Object Operations in a Mach Based System. </title> <booktitle> In USENIX, </booktitle> <pages> pages 1-15. </pages> <institution> Secure Computing Corporation, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: It provides mechanisms to implement multilevel security on the CMU Mach Microkernel [1] [9] and provides policy-based control over all Mach services <ref> [6] </ref>. The Security Enhanced Lites server provides a UNIX operating system environment and enforces the security decisions made in the Security Server. The file system is extended to attach security policy relevant labels to all files in the system.
Reference: [7] <author> Spencer E.Minear. </author> <title> DTOS Kernel and Security Server Software Design Document. Secure Computing Corporation Software Design Document, </title> <month> January </month> <year> 1996. </year>
Reference-contexts: The prototypes platform is Distributed Trusted Operating System (DTOS) [16]. This paper deals with the design and implementation of a trusted log manager for the *-DBS prototype. The prototype adopts a client/server architecture and is hosted on a PC running Distributed Trusted Operating System (DTOS) <ref> [7] </ref>. Figure 2 shows the logical architecture of the prototype. The clients execute transaction programs. A transaction begins by contacting a transaction manager (TM). The trusted timestamp generator at the TM provides timestamps to transactions at all security levels. <p> It also supports the retrieval of log records for the purpose of recovery. 8 3.1 DTOS DTOS <ref> [7] </ref> is an experimental prototype operating system developed at Secure Computing Corporation consistent with the B3 level of assurance [5]. It provides mechanisms to implement multilevel security on the CMU Mach Microkernel [1] [9] and provides policy-based control over all Mach services [6].
Reference: [8] <author> J. Goguen and J. Meseguer. </author> <title> Security policies and security models. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 11-20. </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1982. </year>
Reference-contexts: These communications paths are known as covert channels. The bandwidth of any such channel must be determined and limited depending upon the degree of assurance [5] required by the system. The principle of noninterference <ref> [8] </ref> imposes the constraint that system outputs visible to a subject should not depend on the presence or actions of non-dominated subjects. Any subject that requires privileges allowing it to violate the *-property is said to be trusted.
Reference: [9] <author> David Golub, Randall Dean, Alessandro Forin, and Richard Rashid. </author> <title> Unix as an Application Program. </title> <booktitle> In Proceedings of the Summer 1990 USENIX Conference. USENIX, </booktitle> <year> 1990. </year> <month> 27 </month>
Reference-contexts: It provides mechanisms to implement multilevel security on the CMU Mach Microkernel [1] <ref> [9] </ref> and provides policy-based control over all Mach services [6]. The Security Enhanced Lites server provides a UNIX operating system environment and enforces the security decisions made in the Security Server. The file system is extended to attach security policy relevant labels to all files in the system.
Reference: [10] <author> J. N. Gray. </author> <booktitle> Notes on data base operating systems. In Operating Systems-an advanced course, </booktitle> <pages> pages 393 - 481. </pages> <publisher> Springer Verlag, </publisher> <year> 1978. </year>
Reference-contexts: The undo (redo) portion of the log record provides information on how to undo (redo) changes made by the transaction. A log record containing this information is called an undo-redo log record. We adopt the widely accepted write-ahead logging (WAL) protocol <ref> [10] </ref> [14] in our design.
Reference: [11] <author> Jim Gray, Paul McJones, Mike Blasgen, Bruce Lindsay, Raymond Lorie, Tom Price, Franco Putzolu, and Irving Traiger. </author> <title> The Recovery Manager of the System R Database Manager. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(2):223 - 242, </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: Even with 6 out considering multiple page updates, no-force is preferable over force because writing the pages updated by a transaction during commit involves expensive synchronous disk writes, as a consequence response time is increased significantly. The WAL technique <ref> [11] </ref> performs better compared to the simple approach described above for the reasons given below. A no-force policy can be used with WAL logging. With no-force, the only synchronous write operation goes to the log and the volume of data to be written is comparatively much less.
Reference: [12] <author> Jim Gray and Andreas Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: The log was originally used for transaction recovery but recently it is used for performance analysis, accounting and auditing <ref> [12] </ref>. 5 Each log record is assigned a monotonically increasing unique log sequence number (LSN) when that record is appended to the log. In a traditional approach the log is maintained using files provided by the operating system. <p> For example, the paths in the poset shown in Figure 1. are (l 1 , l 21 , l 3 , l 4 ) and (l 1 , l 22 , l 3 , l 4 ). We provide a set-oriented interface <ref> [12] </ref> for reading log records for performance and security reasons. This makes sure that only those log records that need to be seen by that security level and those that satisfy the filter predicate are passed. <p> In our implementation the log manager uses a mechanism provided by DTOS to identify the security level of the subject sending the message. 5.2 Movement of Log Records to Disk A typical (small) transaction lasts about two seconds and writes about 500 bytes of log records <ref> [12] </ref>. This indicates that the amount of log information generated is enormous. The log manager must map this into the finite file space provided by the operating sys 14 tem or raw disk partitions maintained by the log manager. For good performance, fast transfer of log records is important. <p> For good performance, fast transfer of log records is important. One technique for minimizing the latency of logging to disk is Write-Ahead Data Set (WADS) <ref> [12] </ref>. In this technique the log is transferred to stable storage right away, without having to wait for the disk to rotate to the point where the current log ends.
Reference: [13] <author> Paul A. Kareger and John C. Wray. </author> <title> Storage Channels in Disk Arm Optimization. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 52 - 60. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: He also describes a method for constructing all channels in a computer system having timing channel characteristics. A study of the covert storage channels found in disk I/O optimization schemes has been done in <ref> [13] </ref>. It examines the source of the problems in the context of various disk architectures and proposes several classes of generic solutions. They propose a set of schemes namely, Re-Ordering, Buffering, Batching and Synchronizing I/O Requests which when used in combination close the disk arm optimization channel.
Reference: [14] <author> C. Mohan, Don Haderle, Bruce Lindsay, Hamid Pirahesh, and Peter Schwarz. </author> <title> ARIES: A Transaction Recovery Method Supporting Fine-Granularity locking and Partial Rollbacks Using Write-Ahead Logging. </title> <journal> ACM Transactions on Database Systems, </journal> <month> January </month> <year> 1989. </year>
Reference-contexts: The undo (redo) portion of the log record provides information on how to undo (redo) changes made by the transaction. A log record containing this information is called an undo-redo log record. We adopt the widely accepted write-ahead logging (WAL) protocol [10] <ref> [14] </ref> in our design.
Reference: [15] <author> J. L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: The solution to this synchronization problem is modeled using a Petri net <ref> [15] </ref>. A state may be regarded as holding a certain set of conditions. A state change means the termination of some conditions and the beginning of others. An elementary state change is called an event.
Reference: [16] <institution> Secure Computing Corporation. </institution> <note> DTOS Users Manual, </note> <month> November </month> <year> 1995. </year>
Reference-contexts: This involves sequential writes to disk that can be significantly faster. 3 The Star-DBS Prototype In this section we describe the proposed system architecture for the experimental Star-DBS prototype being developed at Penn State. The prototypes platform is Distributed Trusted Operating System (DTOS) <ref> [16] </ref>. This paper deals with the design and implementation of a trusted log manager for the *-DBS prototype. The prototype adopts a client/server architecture and is hosted on a PC running Distributed Trusted Operating System (DTOS) [7]. Figure 2 shows the logical architecture of the prototype. <p> Permissions are specified in terms of low-level operations including communication primitives such as message sends and receives. The security policy is enforced by the security server, and DTOS ensures that subjects cannot violate the policy during their execution. DTOS also provides a way of creating new domains <ref> [16] </ref> in the sense that it determines the set of objects that a subject can access. New object permissions and subject-to-subject permissions can be associated with these domains which are not usually provided to the user domain.
Reference: [17] <author> Andrew Warner, Qiang Li, Thomas Keefe, and Shankar Pal. </author> <title> The Impact of Multilevel Security on Database Buffer Management. </title> <booktitle> In Proceedings of the European Symposium on Research in Computer Security. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The RM implements a set of relational operators and provides a low level interface allowing access to tuples (tuple read, tuple insertion, tuple update). The RM makes pin requests to the level buffer manager (LBM). The LBM satisfies these requests by coordinating with the trusted buffer manager (TBM) <ref> [17] </ref> [2]. The TBM controls the movement of data between the persistent and volatile portions of the database for all the security levels. It also coordinates logging with page flushes to ensure recoverability. Each RM can service multiple clients concurrently. The log manager is a trusted component.
Reference: [18] <author> John C. Wray. </author> <title> An Analysis of Covert Timing Channels. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 2-7. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year> <month> 28 </month>
Reference-contexts: This problem will be referred to as the flush channel in rest of the paper. Covert channels can be found anywhere shared resources are shared among different security levels. One of the primary reasons for a secure system is to share disk space. The reader is referred to <ref> [18] </ref>, for a discussion of covert channels using a shared disk drive. An example of a covert channel involving the placement of the disk arm from [18] is presented below. <p> One of the primary reasons for a secure system is to share disk space. The reader is referred to <ref> [18] </ref>, for a discussion of covert channels using a shared disk drive. An example of a covert channel involving the placement of the disk arm from [18] is presented below. Consider a shared disk drive containing adjacent cylinders 51 through 59 shared for reading by two servers HIGH and LOW operating at high and low security levels respectively. <p> This solves the flush channel problem. As we are using the same log for all the security levels there is a potential timing covert channel caused by disk writes <ref> [18] </ref>. A time slot refers to the time taken to write one block to disk. To keep the value of a time slot constant, we must eliminate seek and rotational latency for writes. <p> This discussion makes it easy to ensure isolation. 7 Related Work Work done in the past in the area of database logging have dealt only with single level databases. This section looks at issues that are relevant to our discussion on multilevel systems. In <ref> [18] </ref>, the author performs an analysis of covert channels involving the placement of the arm of a shared disk-drive. He also describes a method for constructing all channels in a computer system having timing channel characteristics.
References-found: 18

