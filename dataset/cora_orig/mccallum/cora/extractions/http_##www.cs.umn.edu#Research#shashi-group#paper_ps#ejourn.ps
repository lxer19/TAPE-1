URL: http://www.cs.umn.edu/Research/shashi-group/paper_ps/ejourn.ps
Refering-URL: http://www.cs.umn.edu/Research/shashi-group/abstract/ejourn.abs.html
Root-URL: http://www.cs.umn.edu
Email: (coyle,shekhar@cs.umn.edu) (yyz@sybase.com)  
Title: Evaluation of Disk Allocation Methods for Parallelizing Spatial Queries on Grid Files Mapping Algorithms on
Author: Mark Coyle,Shashi Shekhar,Yvonne Zhou 
Note: Areas:  
Address: 1650 65th Street Minneapolis, MN 55455 Emeryville, CA 94618  
Affiliation: Department of Computer Science Sybase Corporation University of Minnesota  
Abstract: Spatial Database Systems are characterized by large amounts of geometric and geographic data. Query response times in these systems are crucial, since these systems are often used interactively for decision support systems. The Grid file[1] is a well-known spatial access method that has great potential for parallelism, which reduces the response time of spatial queries for time-critical on-line applications of spatial databases. An important problem in parallelizing a grid file is the choice of a disk allocation method for mapping the data-blocks to multiple disks in the parallel secondary storage. This paper explores the disk allocation methods used to allocate the data pages of a grid file among a set of disks that can be accessed in parallel. In this environment, given N disks, a perfect allocation will speed up the processing of each query by a factor of N. The paper shows that no disk allocation is perfect for the set of all orthogonal range queries, even on uniformly distributed read-only data. We then introduce two families of allocation methods, namely the Linear allocation method and the Lattice allocation method, which are perfect for a large collection of interesting path queries (rows and columns) and range queries (small rectangles), on an interesting set of data distributions. We address the issues in extending disk allocation methods to general data distributions that are updated randomly. Finally, we provide experimental results on both the performance of the proposed methods and other well known disk allocation methods on different query sets, data distributions and data set sizes. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Nievergelt, H. Hinteberger, and K.D. Sevcik, </author> <title> The Grid File: An Adaptable, Symmetric Multi-Key File Structure, </title> <journal> ACM Transactions on Database Systems 9(1) pp. </journal> <pages> 38-71. </pages> <year> (1984). </year>
Reference-contexts: Cell size may be chosen on the basis of the capacity of the disk blocks, and the data contained in each cell may be mapped to distinct disk blocks. For many nonuniform distributions, multiple cells may share a disk block <ref> [1] </ref>. - 5 - Queries on multidimensional data represent various subsets of the data. To process a query, the database manager has to retrieve the data points contained inside each cell which intersects with the query. Two queries are similar if they intersect the same set of cells.
Reference: 2. <author> A. Kemper and M. Wallrath, </author> <title> An Analysis of Geometric Modelling in Databases, </title> <journal> Computing Surveys 19(1) pp. </journal> <month> 47-91 (March </month> <year> 1987). </year>
Reference-contexts: 1. INTRODUCTION Spatial databases are designed for a wide variety of observational spatial data such as cartography data <ref> [2] </ref> that represents urban planning data, demographic data, epidemiological data, forest covers and natural resource data, etc. The last decade has seen great progress in the design of spatial databases and access methods [3-9] for single disk systems.
Reference: 3. <author> A. Buchmann, O. Guenther, T.R. Smith, and Y.-F. Wang (Eds),, </author> <title> Design and Implementation of Large Spatial Databases,, </title> <booktitle> Proc. 1st Symp. Design and Implementation of Large Spatial Database (SSD'90), </booktitle> <publisher> Springer-Verlag, </publisher> <address> (1990.). Santa Bar-bara, CA. </address>
Reference: 4. <author> R.A. Finkel and J.L. Bentley, </author> <title> Quad trees -- a data structure for retrieval on composite keys, </title> <journal> Acta Inf. </journal> <pages> 4 pp. 1-9. </pages> <year> (1974). </year>
Reference: 5. <author> O. Guenther, </author> <title> The design of the cell tree: An object-oriented index structure for geometric databases, </title> <booktitle> Proc. 5th Int. Conf. on Data Engineering, </booktitle> <month> (Feb. </month> <year> 1989). </year>
Reference: 6. <author> K. Hinrichs, </author> <title> The grid file system: implementation and case studies for applications, Dissertation No. </title> <type> 7734, </type> <institution> Eidgenos-sische Technische Hochschule (ETH), </institution> <address> Zurich, </address> <year> (1985). </year>
Reference-contexts: The last decade has seen great progress in the design of spatial databases and access methods [3-9] for single disk systems. The Grid File <ref> [6] </ref> is a well-known access method for organizing spatial data due to the grid file's correspondence with popular geographic referencing systems such as latitude-longitude grids. However, designing a multi-disk database to process general spatial queries has not been well explored.
Reference: 7. <author> D.B. Lomet and B. Salzberg, </author> <title> The hB-Tree: A multiattribute Indexing Method with good guaranteed performance, </title> <journal> ACM Transactions on Database Systems 15(4)(Dec. 1990.). </journal>
Reference: 8. <author> A. Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proc. SIGMOD International Conf on Management of Data, </booktitle> <pages> pp. 47-57 ACM, </pages> <year> (1984). </year>
Reference: 9. <author> J.T. Robinson, </author> <title> The K-D-B-tree: a Search Structure for large multidimensional dynamic indexes, </title> <booktitle> Proc. SIGMOD, </booktitle> <pages> pp. 10-18. </pages> <publisher> ACM, </publisher> <year> (1981). </year>
Reference: 10. <author> H. C. Du, </author> <title> Disk allocation for product files on multiple disk systems, </title> <journal> Trans. on Database Systems 7ACM, </journal> <month> (March </month> <year> 1982). </year>
Reference-contexts: Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partitioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17]. <p> The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partitioning techniques include the Disk Modulo method <ref> [10] </ref> and the Coordinate Modulo Declustering Method (CMD)[17]. In CMD, data along the two dimensions is distributed to the multiple disks by the formula Disk-Id (x,y) = (x + y) Mod N, where N is the number of disks.
Reference: 11. <author> C. Faloutsos and D. Metaxas, </author> <title> Disk Allocation methods using error correcting codes, </title> <journal> Trans. on Computers 40(8)IEEE, </journal> <month> (August </month> <year> 1991). </year>
Reference: 12. <author> D.J. DeWitt and S. Ghandeharizadeh, </author> <title> Hybrid-range partitioning strategy: A new declustering strategy for multiprocessor database machine, </title> <booktitle> Proc. Intl. Conf. on Very Large Databases, VLDB, </booktitle> <year> (1990). </year>
Reference: 13. <author> I. Kamel and C. Faloutsos, </author> <title> Parallel R-Trees, </title> <booktitle> Intl. Conf. on Management of Data, ACM SIGMOD, </booktitle> <year> (1992). </year>
Reference-contexts: In processing interesting queries, the allocation method should be designed to satisfy the goals of a database manager. One of the these goals is to maximize throughput. This imposes two constraints on the allocation methods, namely fairness and efficiency <ref> [13] </ref>. A fair allocation method distributes the data pages that qualify under the same query as uniformly as pos sible among the various disks. An efficient allocation method imposes a light load on the database sys tem by activating as few disks as possible for small queries. <p> Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding [10, 15, 17, 18]. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees <ref> [13, 19] </ref>. The coordinate space-partitioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17]. In CMD, data along the two dimensions is distributed to the multiple disks by the formula Disk-Id (x,y) = (x + y) Mod N, where N is the number of disks. <p> The allocation method should be designed to satisfy the goals of a database manager in processing various queries. One of the important goals of the database is to maximize throughput, which imposes two constraints on the allocation methods, namely fairness and efficiency <ref> [13] </ref>. A fair allocation method distributes the cells that qualify under the same query as uniformly as possible among the various disks. An efficient allocation method imposes a light load on the database system by activating as few disks as possible for small queries.
Reference: 14. <author> K. Salem and H. Garcia-Molina, </author> <title> Disk Atriping, </title> <booktitle> IEEE Conference on Data Engineering, </booktitle> <year> (1986). </year>
Reference-contexts: Disk stripping [14-16] has been studied extensively as a disk allocation method in the context of disk interleaving and improving I/O bandwidth. Disk stripping is a general purpose facility for achieving parallel data I/O and fault tolerance <ref> [14] </ref>. A stripping unit (e.g. the number of consecutive units of data allocated to each disk) is used to distribute data among the disks. <p> Range queries over this dimension may be processed efficiently, but many range queries over the other dimension may exhibit poor speed-ups. We note that the allocation methods of disk stripping at bit or byte level <ref> [14] </ref> are fair, but may not be efficient, for spatial queries on multidimensional data. Furthermore, the choice of a data unit imposes a hard limit on the maximum possible parallelism via stripping. Many multi-disk systems with N disks provide an opportunity for N-way parallelism in disk opera tions. <p> Therefore, it is important to classify the interesting query sets in an application domain to determine if an allocation method is perfect for the interesting query set. Interesting query sets on traditional one-dimensional data have been explored in <ref> [14] </ref>. We examine interesting query sets on 2-dimensional data typical of geographical applications. The queries on multidimensional data can be separated into three classes: point queries, range queries and path queries.
Reference: 15. <author> M. Y. Kim, </author> <title> Synchronized disk interleaving, </title> <journal> Trans. on COmputers 35(11)IEEE, </journal> <year> (1986). </year>
Reference-contexts: Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partitioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17].
Reference: 16. <author> P.M. Chen and D.A. Patterson, </author> <title> Maximizing performance in a Striped Disk Array, </title> <booktitle> IEEE Conference on Computer Architecture, </booktitle> <year> (1990). </year>
Reference: 17. <author> J. Li, J. Srivastava, and D. Rotem, CMD: </author> <title> A Multidimensional Declustering Method for Parallel Database Systems, </title> <type> Tech. Report, </type> <institution> Univ. of Minnesota, </institution> <year> (1991). </year>
Reference-contexts: Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partitioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17].
Reference: 18. <author> C. T. Wu and W. A. Burkmard, </author> <title> Associative Searching in Multiple Storage Units, </title> <journal> Trans. on Database Systems 12ACM, </journal> <month> (January </month> <year> 1987). </year>
Reference-contexts: Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partitioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17].
Reference: 19. <author> Teradata Corporation, </author> <title> DBC/1012 Data Base Computer Concepts and Facilities, Terradata Document c02-001-05, </title> <year> (1988). </year>
Reference-contexts: Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding [10, 15, 17, 18]. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees <ref> [13, 19] </ref>. The coordinate space-partitioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17]. In CMD, data along the two dimensions is distributed to the multiple disks by the formula Disk-Id (x,y) = (x + y) Mod N, where N is the number of disks.
Reference: 20. <author> C. Faloutsos and P. Bhagwat, </author> <title> Declustering Using Fractals, </title> <booktitle> International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pp. 18-25 IEEE, </pages> <year> (1993). </year> <month> - 17 </month> - 
Reference-contexts: These methods are based on space-filling curves, and they provide reasonable parallelization of square-shaped range queries <ref> [20] </ref>. These methods, however, provide less than adequate parallelism for path queries such as rows and columns. 1.1. Contributions The performance of existing disk allocation methods depends on the query set. No method is perfect for all query sets. <p> We then describe the proposed Linear allocation methods and Lattice allocation methods. Finally, we provide an illustration of all the methods on a Grid-File with a non-sparse 8x8 grid directory using 8 disks. The Z-Curve Method : The Z-Curve Method <ref> [20, 21] </ref> is one of the space-filling curve methods that attempt to attain a one-dimensional ordering of multidimensional data. In the case of two-dimensional data, the Z-order of a pair (x,y) is obtained by alternating the bits of the binary representation of the coordinate pair.
Reference: 21. <author> H.V. Jagadish, </author> <title> Linear Clustering of Objects with Multiple Attributes, </title> <booktitle> Proc. Intl. Conf. on Management of Data, </booktitle> <pages> pp. </pages> <note> 332-342 ACM SIGMOD, </note> <year> (1990). </year>
Reference-contexts: We then describe the proposed Linear allocation methods and Lattice allocation methods. Finally, we provide an illustration of all the methods on a Grid-File with a non-sparse 8x8 grid directory using 8 disks. The Z-Curve Method : The Z-Curve Method <ref> [20, 21] </ref> is one of the space-filling curve methods that attempt to attain a one-dimensional ordering of multidimensional data. In the case of two-dimensional data, the Z-order of a pair (x,y) is obtained by alternating the bits of the binary representation of the coordinate pair. <p> From the figure, one would expect the Z-curve method to perform reasonably well on small rectangles, but to perform poorly on rows and columns. Hilbert Method : The Hilbert Curve is a space filling curve, and is described in detail in <ref> [21] </ref>. This method is similar to the Z-curve method in that it first constructs a one-dimensional ordering of the two-dimensional data. The Hilbert Method differs from the Z-curve method in that it includes rotations and direction changes to achieve the one-dimensional orderings. Readers are referred to [21] for a full description <p> described in detail in <ref> [21] </ref>. This method is similar to the Z-curve method in that it first constructs a one-dimensional ordering of the two-dimensional data. The Hilbert Method differs from the Z-curve method in that it includes rotations and direction changes to achieve the one-dimensional orderings. Readers are referred to [21] for a full description of the algorithm. Once the one dimensional ordering is obtained, the disk-id is again computed by taking the number modulo the number of disks. Figure 6 illustrates both the Hilbert mapping and the disk-id's for a grid of 8x8 cells.
Reference: 22. <author> D. Abel and D. Mark, </author> <title> A comparative analysis of some two-dimensional orderings, </title> <note> Int. Journal of GIS 4(1) pp. </note> <month> 21-31 </month> <year> (1990). </year>
Reference: 23. <author> S. Shekhar and M. Coyle, </author> <title> Disk Allocation Methods for Parallelizing Grid Files: Part 2, </title> <type> Tech. Report, </type> <institution> Univ. of Minnesota, </institution> <year> (1994). </year>
Reference-contexts: We first examine the case of periodic allocation methods before looking at the general theorem. Lemma 2: Any periodic allocation method using more than 5 disks is not perfect for orthogonal range queries (i.e. N &gt; 5). The proof can be found in <ref> [23] </ref>. Thus no allocation method is perfect for orthogonal range queries for N &gt; 5. Part of our future research will be to identify heuristics that will help us develop near-perfect allocation methods for several query sets when N is large. <p> After renaming, the Linear allocation methods are characterized by the values of their shift parameters. We outline several properties of Linear Allocation Methods below. Proofs of these properties can be found in <ref> [ 23] </ref>. Property: Linear Allocation Method Disk-Id (x,y) = (px +qy +r) mod N is equivalent to Linear Allocation Method Disk-ID (x,y)=(px + y) mod N % if GCD (q,n)=1 Property: Linear Allocation Method Disk-Id (x,y) = (px +qy +r) mod N is a Latin Square. <p> This results from using an odd power of 2 for N, which causes a 4x2 rectangle to be used as the allocation pattern. This observation has been used to prove that for some values of N, the Z-curve allocation method is in fact a lattice allocation method <ref> [23] </ref>. Query Set -&gt; COL (N) ROW (N) 2D-Lattice-X 2.18 2.60 Linear 1.60 1.90 CMD 1.60 1.90 Hilbert 2.55 2.20 Z_curve 4.45 2.90 Random 2.45 2.50 Table 4: Parallel Run-time for Path Queries with hot-spot distribution HS (500) 4.1.2. <p> Data-set size does not change the relative performance of various allocation methods. We finally note that linear, CMD, and Z-Curve methods are special cases of Lattice allocation method, as each of them is equivalent to a Lattice Allocation Method under disk-renumbering <ref> [23] </ref>. Thus, the performance of Lattice Allocation Method - 16 - should be assessed by examining the best of Linear, CMD, Z-Curve, and 2D-Lattice-X.
Reference: 24. <author> R. Krishnamurthy and K.-Y. Whang, </author> <title> Multilevel Grid Files, IBM Research Report, </title> <booktitle> (1985). </booktitle> <address> Yorktown Heights </address>
Reference-contexts: We generate and insert 3K/4 other points from the NN distribution, with a small standard deviation. We note that the hot-spot data-set is not factorizable and has been used in literature <ref> [24] </ref> to simulate skewed distri butions. Uniformly distributed data are generated with a maximum value of 1.00 and a minimum value of 0.00, normally distributed data are generated with mean of 0.50 and standard deviation of 0.20. Data sets with 500, 1000, 2000 and 4000 data points are used here.

Reference: 1. <institution> INTRODUCTION ........................................................................................................................... 1 1.1. </institution> <note> Contributions ........................................................................................................................... 3 1.2. Outline ...................................................................................................................................... 4 </note>
Reference-contexts: Cell size may be chosen on the basis of the capacity of the disk blocks, and the data contained in each cell may be mapped to distinct disk blocks. For many nonuniform distributions, multiple cells may share a disk block <ref> [1] </ref>. - 5 - Queries on multidimensional data represent various subsets of the data. To process a query, the database manager has to retrieve the data points contained inside each cell which intersects with the query. Two queries are similar if they intersect the same set of cells.
Reference: 2. <editor> BASIC CONCEPTS OF MULTI DIMENSIONAL DATA, </editor> <title> QUERIES & STORAGE ........... 4 2.1. Query Sets in Geographic Databases and their Properties .................................................. 5 2.2. Theoretical Constraints .......................................................................................................... 7 2.3. Positive Results: Perfect Methods for RowSet and ColSet .................................................. 7 </title>
Reference-contexts: 1. INTRODUCTION Spatial databases are designed for a wide variety of observational spatial data such as cartography data <ref> [2] </ref> that represents urban planning data, demographic data, epidemiological data, forest covers and natural resource data, etc. The last decade has seen great progress in the design of spatial databases and access methods [3-9] for single disk systems.
Reference: 3. <editor> ALTERNATIVE DISK ALLOCATION METHODS ................................................................. 8 3.1. </editor> <title> Lattice Allocation Method ...................................................................................................... 9 3.2. Extending allocation methods for general distributions with random updates .............. 11 3.3. Example Illustration of Methods ......................................................................................... 12 </title>
Reference: 4. <author> EXPERIMENTAL EVALUATION ............................................................................................ 12 4.1. </author> <title> Effect of Queries .................................................................................................................... 13 4.1.1. Path Queries ............................................................................................................... 13 4.1.2. Orthogonal Range Queries .......................................................................................... 13 4.2. Effect of Data Distribution .................................................................................................... 14 4.2.1. Type I Data .................................................................................................................... 14 4.2.2. Type II Distribution ...................................................................................................... 14 4.3. Effect of Data Set Size ............................................................................................................ 15 </title>
Reference: 5. <institution> CONCLUSIONS ............................................................................................................................ 15 </institution>
Reference: 6. <institution> ACKNOWLEDGMENTS ............................................................................................................ 16 </institution>
Reference-contexts: The last decade has seen great progress in the design of spatial databases and access methods [3-9] for single disk systems. The Grid File <ref> [6] </ref> is a well-known access method for organizing spatial data due to the grid file's correspondence with popular geographic referencing systems such as latitude-longitude grids. However, designing a multi-disk database to process general spatial queries has not been well explored.
Reference: 7. <institution> References .......................................................................................................................................... 16 </institution>
Reference: 8. <institution> APPENDIX .................................................................................................................................... 17 </institution>
References-found: 32

