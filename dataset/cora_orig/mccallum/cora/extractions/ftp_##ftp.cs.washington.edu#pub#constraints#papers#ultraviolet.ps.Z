URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/ultraviolet.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/solvers/ultraviolet-journal.html
Root-URL: 
Title: Ultraviolet: A Constraint Satisfaction Algorithm for Interactive Graphics  
Author: ALAN BORNING BJORN FREEMAN-BENSON 
Keyword: constraints, user interfaces, hybrid constraint satisfaction algorithms  
Address: Box 352350, Seattle, WA 98195-2350  201 506 Fort St., Victoria, BC,CANADA V8W 1E6  
Affiliation: Department of Computer Science Engineering, University of Washington,  Object Technology International Inc., R. Buckminster Fuller Laboratory,  
Note: Constraints: An International Journal,  c 1998 Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Email: borning@cs.washington.edu  bnfb@oti.com  
Date: 3, 1-26 (1998)  
Abstract: Ultraviolet is a constraint satisfaction algorithm intended for use in interactive graphical applications. It is capable of solving constraints over arbitrary domains using local propagation, and inequality constraints and simultaneous linear equations over the reals. To support this, Ultraviolet is a hybrid algorithm that allows different subsolvers to be used for different parts of the constraint graph, depending on graph topology and kind of constraints. In addition, Ultraviolet and its subsolvers support plan compilation, producing efficient compiled code that can be evaluated repeatedly to resatisfy a given collection of constraints for different input values. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Alan Borning, Richard Anderson, and Bjorn Freeman-Benson. Indigo: </author> <title> A local propagation algorithm for inequality constraints. </title> <booktitle> In Proceedings of the 1996 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 129-136, </pages> <address> Seattle, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: The most recent version of DETAIL [19] also includes an experimental solver for inequality constraints as well as functional constraints. Ultraviolet uses the Indigo algorithm <ref> [1] </ref> for acyclic collections of inequality constraints. Indigo is an interval propagation algorithm; there has been considerable work on interval constraints in other areas of computer science, particularly artificial 4 intelligence and constraint logic programming. <p> This continues until the queue is empty. We keep track of any variables whose bounds have been tightened in the changed variables set. A complete description of the algorithm is given in reference <ref> [1] </ref>; proofs of correctness theorems are given in [2]. 5.3. Purple Purple solves collections of constraints that can be represented as linear equations. Unlike Blue and Indigo, Purple is not troubled by cycles (i.e. simultaneous equations).
Reference: 2. <author> Alan Borning, Richard Anderson, and Bjorn Freeman-Benson. </author> <title> The Indigo algorithm. </title> <type> Technical Report 96-05-01, </type> <institution> Dept. of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: This continues until the queue is empty. We keep track of any variables whose bounds have been tightened in the changed variables set. A complete description of the algorithm is given in reference [1]; proofs of correctness theorems are given in <ref> [2] </ref>. 5.3. Purple Purple solves collections of constraints that can be represented as linear equations. Unlike Blue and Indigo, Purple is not troubled by cycles (i.e. simultaneous equations). <p> As noted in Section 5.3, normally this situation won't arise given very weak stays on each variable.) For a more detailed discussion of this issue see <ref> [2] </ref>. 16 Incompleteness manifests in Purple when a constraint cn must be delayed, and after subsequent assignments of values to its variables by weaker constraints, we find that cn is unsatisfied. For Deep Purple, incompleteness is manifested when the constraint graph cannot be transformed to an acyclic one.
Reference: 3. <author> Alan Borning and Bjorn Freeman-Benson. </author> <title> The OTI constraint solver: A constraint library for constructing interactive graphical user interfaces. </title> <booktitle> In Proceedings of the First International Conference on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 624-628, </pages> <address> Cassis, France, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno [28], Juno-2 [18], and Briar and Bramble, which use a differential solver [12, 13, 14]. An earlier version of Ultraviolet | which doesn't include support for inequality constraints | is described in <ref> [3] </ref>. 3. Constraint Hierarchy Solutions As described in the introduction, constraint hierarchies allow both required and preferential constraints. A solution to a constraint hierarchy is a mapping from variables to domain elements.
Reference: 4. <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: A constraint hierarchy is a set of constraints labelled by strengths. The constraints labelled as required must be satisfied, while those labelled with weaker strengths are merely preferences <ref> [4] </ref>. One important application of constraint hierarchies is in representing our desire that parts of a graphical object don't move unnecessarily, by placing weak stay constraints on them. This allows us to give a simple declarative semantics for constraint satisfaction in the presence of state and change over time. <p> (As an aside, while the specification for DeltaBlue and SkyBlue is that the algorithms produce locally-predicate-better solutions, in fact for these particular algorithms we can prove that the solutions produced are locally-error-better as well.) We give a brief, informal description of these comparators here; for a formal definition see reference <ref> [4] </ref>. We will need to consider the error in satisfying a constraint. This error is 0 if and only if the constraint is satisfied, and becomes larger the further away the solution is from a satisfying one.
Reference: 5. <author> Alan Borning, Richard Lin, and Kim Marriott. </author> <title> Constraints for the web. </title> <booktitle> In Proceedings of ACM MULTIMEDIA'97, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: A toolkit that uses the QOCA algorithm has been used in a diagram parser and editor [8] and for layout of trees and graphs [16], while Cassowary has been used in a web authoring tool <ref> [5] </ref>. Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno [28], Juno-2 [18], and Briar and Bramble, which use a differential solver [12, 13, 14]. <p> After executing line 1, c's bounds will be (1; 10]. After executing 2, a will have value 5, i.e. its bounds are <ref> [5; 5] </ref>. After executing 3, we will tighten b's bounds to (1; 5]. Executing 4 will set b to 5, that being the closest value within (1; 5] to the desired value of 8. Finally, executing 5 sets c to 10.
Reference: 6. <author> Alan Borning, Kim Marriott, Peter Stuckey, and Yi Xiao. </author> <title> Solving linear arithmetic constraints for user interface applications. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on User Interface Software and Technology, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Two algorithms that provide efficient support for simultaneous linear equality and inequality constraints are QOCA and a more recent variation named Cas-sowary <ref> [17, 6] </ref>. Both algorithms are derived from the simplex algorithm. They maintain the constraints in a solved form that allows new solutions to be computed rapidly as input variables are changed, and also allow efficient incremental addition and deletion of constraints. <p> See <ref> [6] </ref>.) Another candidate algorithm uses Fourier elimination to compile constraint-free, straight line code that solves simultaneous equalities and inequalities [15]. The resulting code is faster than using QOCA or Cassowary, and it also has uniform running time.
Reference: 7. <author> Jennifer Burg, Peter J. Stuckey, Jason C.H. Tai, and Roland H.C. Yap. </author> <title> Linear equation solving for constraint logic programming. </title> <booktitle> In Proceedings of the Twelfth International Conference on Logic Programming, </booktitle> <pages> pages 33-47, </pages> <address> Tokyo, June 1995. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Purple Purple solves collections of constraints that can be represented as linear equations. Unlike Blue and Indigo, Purple is not troubled by cycles (i.e. simultaneous equations). The algorithm is adapted from that used in CLP (R) [26] and other Constraint Logic Programming language implementations <ref> [7] </ref>, the only difference being provision for both required and preferential constraints. Variables are in one of three sets: parametric, nonparametric, and known. Parametric variables may take on any value. Nonparametric variables are defined by linear expressions involving parametric variables plus a constant.
Reference: 8. <author> S.S. Chok and K. Marriott. </author> <title> Automatic construction of user interfaces from constraint multiset grammars. </title> <booktitle> In IEEE Symposium on Visual Languages, </booktitle> <pages> pages 242-250, </pages> <year> 1995. </year>
Reference-contexts: A toolkit that uses the QOCA algorithm has been used in a diagram parser and editor <ref> [8] </ref> and for layout of trees and graphs [16], while Cassowary has been used in a web authoring tool [5]. Other systems that allow for inequality constraints and cycles often use numeric algorithms.
Reference: 9. <author> Ernest Davis. </author> <title> Constraint propagation with interval labels. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 281-331, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Ultraviolet uses the Indigo algorithm [1] for acyclic collections of inequality constraints. Indigo is an interval propagation algorithm; there has been considerable work on interval constraints in other areas of computer science, particularly artificial 4 intelligence and constraint logic programming. Davis <ref> [9] </ref> discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels.
Reference: 10. <author> Bjorn Freeman-Benson, John Maloney, and Alan Borning. </author> <title> An incremental constraint solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: The primary focus of this paper is the overall architecture of Ultraviolet and how the subsolvers communicate, rather than the details of each subsolver, so these are primarily outlines. 5.1. Blue Blue is the simplest of the current subsolvers; it is a batch version of our incremental DeltaBlue algorithm <ref> [10, 30] </ref>. It is a traditional local propagation solver, which handles acyclic constraint graphs containing functional constraints only. However, 12 it can process constraints over arbitrary domains, rather than just numeric constraints as with the other subsolvers.
Reference: 11. <author> Michel Gangnet and Burton Rosenberg. </author> <title> Constraint programming and graph algorithms. </title> <booktitle> In Second International Symposium on Artificial Intelligence and Mathematics, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: We can view the constraints and constrained variables as forming a bipartite graph. Each variable and each constraint is represented by a node, with an edge from a constraint node to a variable node if the variable is constrained by the constraint <ref> [11] </ref>. The constraint graph is acyclic iff this bipartite graph is acyclic. All of these properties are declarative attributes of the constraints or the constraint graph, rather than of the constraint satisfaction algorithm. Naturally, however, the different properties place different requirements on the algorithm.
Reference: 12. <author> Michael Gleicher. </author> <title> A graphics toolkit based on differential constraints. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 109-120, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno [28], Juno-2 [18], and Briar and Bramble, which use a differential solver <ref> [12, 13, 14] </ref>. An earlier version of Ultraviolet | which doesn't include support for inequality constraints | is described in [3]. 3. Constraint Hierarchy Solutions As described in the introduction, constraint hierarchies allow both required and preferential constraints.
Reference: 13. <author> Michael Gleicher. </author> <title> A Differential Approach to Constraint Satisfaction. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie-Mellon University, </institution> <year> 1994. </year>
Reference-contexts: Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno [28], Juno-2 [18], and Briar and Bramble, which use a differential solver <ref> [12, 13, 14] </ref>. An earlier version of Ultraviolet | which doesn't include support for inequality constraints | is described in [3]. 3. Constraint Hierarchy Solutions As described in the introduction, constraint hierarchies allow both required and preferential constraints.
Reference: 14. <author> Michael Gleicher. </author> <title> Practical issues in programming constraints. </title> <editor> In Vijay Saraswat and Pascal Van Hentenryck, editors, </editor> <booktitle> Principles and Practice of Constraint Programming: The Newport Papers, </booktitle> <pages> pages 407-426. </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno [28], Juno-2 [18], and Briar and Bramble, which use a differential solver <ref> [12, 13, 14] </ref>. An earlier version of Ultraviolet | which doesn't include support for inequality constraints | is described in [3]. 3. Constraint Hierarchy Solutions As described in the introduction, constraint hierarchies allow both required and preferential constraints.
Reference: 15. <author> Warwick Harvey, Peter Stuckey, and Alan Borning. </author> <title> Compiling constraint solving using projection. </title> <booktitle> In Proceedings of the 1997 Conference on Principles and Practice of Constraint Programming (CP97), </booktitle> <pages> pages 491-505, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: See [6].) Another candidate algorithm uses Fourier elimination to compile constraint-free, straight line code that solves simultaneous equalities and inequalities <ref> [15] </ref>. The resulting code is faster than using QOCA or Cassowary, and it also has uniform running time. However, the algorithm is batch, making it unsuitable for rapidly changing collections of constraints.
Reference: 16. <author> W. He and K. Marriott. </author> <title> Constrained graph layout. In Graph Drawing '96, </title> <booktitle> volume 1190 of LNCS, </booktitle> <pages> pages 217-232. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 26 </month>
Reference-contexts: A toolkit that uses the QOCA algorithm has been used in a diagram parser and editor [8] and for layout of trees and graphs <ref> [16] </ref>, while Cassowary has been used in a web authoring tool [5]. Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno [28], Juno-2 [18], and Briar and Bramble, which use a differential solver [12, 13, 14].
Reference: 17. <author> Richard Helm, Tien Huynh, Catherine Lassez, and Kim Marriott. </author> <title> A linear constraint technology for interactive graphic systems. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> pages 301-309, </pages> <year> 1992. </year>
Reference-contexts: presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Two algorithms that provide efficient support for simultaneous linear equality and inequality constraints are QOCA and a more recent variation named Cas-sowary <ref> [17, 6] </ref>. Both algorithms are derived from the simplex algorithm. They maintain the constraints in a solved form that allows new solutions to be computed rapidly as input variables are changed, and also allow efficient incremental addition and deletion of constraints.
Reference: 18. <author> Allan Heydon and Greg Nelson. </author> <title> The Juno-2 constraint-based drawing editor. </title> <type> Technical Report 131a, </type> <institution> DEC Systems Research Center, </institution> <address> Palo Alto, CA, </address> <year> 1994. </year>
Reference-contexts: Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno [28], Juno-2 <ref> [18] </ref>, and Briar and Bramble, which use a differential solver [12, 13, 14]. An earlier version of Ultraviolet | which doesn't include support for inequality constraints | is described in [3]. 3. Constraint Hierarchy Solutions As described in the introduction, constraint hierarchies allow both required and preferential constraints.
Reference: 19. <author> Hiroshi Hosobe, Satoshi Matsuoka, and Akinori Yonezawa. </author> <title> Generalized local propagation: A framework for solving constraint hierarchies. </title> <booktitle> In Proceedings of the Second International Conference on Principles and Practice of Constraint Programming, </booktitle> <address> Boston, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: It supports multi-way constraints and constraint hierarchies, using local propagation when possible, and grouping constraint cycles into cells, which are then solved by an appropriate subsolver. The most recent version of DETAIL <ref> [19] </ref> also includes an experimental solver for inequality constraints as well as functional constraints. Ultraviolet uses the Indigo algorithm [1] for acyclic collections of inequality constraints.
Reference: 20. <author> Hiroshi Hosobe, Ken Miyashita, Shin Takahashi, Satoshi Matsuoka, and Akinori Yonezawa. </author> <title> Locally simultaneous constraint satisfaction. </title> <booktitle> In Proceedings of the 1994 Workshop on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 51-62. </pages> <publisher> Springer-Verlag LLNCS 874, </publisher> <year> 1994. </year>
Reference-contexts: Recent examples include DeltaBlue [30], SkyBlue [29], and QuickPlan [32]; these three algorithms also support constraint hierarchies. The DETAIL system <ref> [20] </ref> is quite closely related to Ultraviolet. Like Ultraviolet, it is designed for user interface applications, and is a kind of meta-solver that supports different subsolvers.
Reference: 21. <author> Scott Hudson and Ian Smith. </author> <title> SubArctic UI toolkit user's manual. </title> <type> Technical report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: Sketchpad provided multi-way constraints and interactive response, and paved the way for many subsequent systems. Many constraint-based systems have employed one-way constraints; recent examples of toolkits and algorithms that use one-way constraints are Amulet [27], sub-Arctic <ref> [21] </ref>, and Hudson's ultra-lightweight constraint system [22]. The other most common sort of constraint satisfaction algorithm for interactive graphics is a local propagation algorithm for multi-way constraints (thus restricting the constraints to functional constraints only and acyclic constraint graphs).
Reference: 22. <author> Scott Hudson and Ian Smith. </author> <title> Ultra-lightweight constraints. </title> <booktitle> In Proceedings of the 1996 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 147-155, </pages> <address> Seattle, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: Sketchpad provided multi-way constraints and interactive response, and paved the way for many subsequent systems. Many constraint-based systems have employed one-way constraints; recent examples of toolkits and algorithms that use one-way constraints are Amulet [27], sub-Arctic [21], and Hudson's ultra-lightweight constraint system <ref> [22] </ref>. The other most common sort of constraint satisfaction algorithm for interactive graphics is a local propagation algorithm for multi-way constraints (thus restricting the constraints to functional constraints only and acyclic constraint graphs). Recent examples include DeltaBlue [30], SkyBlue [29], and QuickPlan [32]; these three algorithms also support constraint hierarchies.
Reference: 23. <author> Eero Hyvonen. </author> <title> Constraint reasoning based on interval arithmetic: The tolerance propagation approach. </title> <journal> Artificial Intelligence, </journal> <volume> 58(1-3):71-112, </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: Indigo is an interval propagation algorithm; there has been considerable work on interval constraints in other areas of computer science, particularly artificial 4 intelligence and constraint logic programming. Davis [9] discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels. Hyvonen <ref> [23, 25, 24] </ref> presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Two algorithms that provide efficient support for simultaneous linear equality and inequality constraints are QOCA and a more recent variation
Reference: 24. <author> Eero Hyvonen. </author> <title> Evaluation of cascaded interval function constraints. </title> <booktitle> In Proceedings of the International Workshop on Constraint-Based Reasoning (CONSTRAINT-95), </booktitle> <address> Melbourne Beach, Florida, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Indigo is an interval propagation algorithm; there has been considerable work on interval constraints in other areas of computer science, particularly artificial 4 intelligence and constraint logic programming. Davis [9] discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels. Hyvonen <ref> [23, 25, 24] </ref> presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Two algorithms that provide efficient support for simultaneous linear equality and inequality constraints are QOCA and a more recent variation
Reference: 25. <author> Eero Hyvonen, Stefano De Pascale, and Aarno Lehtola. </author> <title> Interval constraint programming in C++. </title> <editor> In Brian Mayoh, Enn Tyugu, and Jaan Penjam, editors, </editor> <booktitle> Constraint Programming, </booktitle> <pages> pages 350-366. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <booktitle> NATO Advanced Science Institute Series, Series F: Computer and System Sciences, </booktitle> <volume> Vol. </volume> <pages> 131. </pages>
Reference-contexts: Indigo is an interval propagation algorithm; there has been considerable work on interval constraints in other areas of computer science, particularly artificial 4 intelligence and constraint logic programming. Davis [9] discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels. Hyvonen <ref> [23, 25, 24] </ref> presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Two algorithms that provide efficient support for simultaneous linear equality and inequality constraints are QOCA and a more recent variation
Reference: 26. <author> Joxan Jaffar, Spiro Michaylov, Peter Stuckey, and Roland Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Purple Purple solves collections of constraints that can be represented as linear equations. Unlike Blue and Indigo, Purple is not troubled by cycles (i.e. simultaneous equations). The algorithm is adapted from that used in CLP (R) <ref> [26] </ref> and other Constraint Logic Programming language implementations [7], the only difference being provision for both required and preferential constraints. Variables are in one of three sets: parametric, nonparametric, and known. Parametric variables may take on any value.
Reference: 27. <author> Brad A. Myers, Richard G. McDaniel, Robert C. Miller, Alan S. Ferrency, Andrew Faulring, Bruce D. Kyle, Andrew Mickish, Alex Klimovitski, and Patrick Doane. </author> <title> The amulet environment: New models for effective user interface software development. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 23(6) </volume> <pages> 347-365, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: Sketchpad provided multi-way constraints and interactive response, and paved the way for many subsequent systems. Many constraint-based systems have employed one-way constraints; recent examples of toolkits and algorithms that use one-way constraints are Amulet <ref> [27] </ref>, sub-Arctic [21], and Hudson's ultra-lightweight constraint system [22]. The other most common sort of constraint satisfaction algorithm for interactive graphics is a local propagation algorithm for multi-way constraints (thus restricting the constraints to functional constraints only and acyclic constraint graphs).
Reference: 28. <author> Greg Nelson. Juno, </author> <title> a constraint-based graphics system. </title> <booktitle> In SIGGRAPH '85 Conference Proceedings, </booktitle> <pages> pages 235-243, </pages> <address> San Francisco, </address> <month> July </month> <year> 1985. </year> <note> ACM. </note>
Reference-contexts: Other systems that allow for inequality constraints and cycles often use numeric algorithms. Notable examples are Juno <ref> [28] </ref>, Juno-2 [18], and Briar and Bramble, which use a differential solver [12, 13, 14]. An earlier version of Ultraviolet | which doesn't include support for inequality constraints | is described in [3]. 3. Constraint Hierarchy Solutions As described in the introduction, constraint hierarchies allow both required and preferential constraints.
Reference: 29. <author> Michael Sannella. SkyBlue: </author> <title> A multi-way local propagation constraint solver for user interface construction. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 137-146, </pages> <year> 1994. </year>
Reference-contexts: The other most common sort of constraint satisfaction algorithm for interactive graphics is a local propagation algorithm for multi-way constraints (thus restricting the constraints to functional constraints only and acyclic constraint graphs). Recent examples include DeltaBlue [30], SkyBlue <ref> [29] </ref>, and QuickPlan [32]; these three algorithms also support constraint hierarchies. The DETAIL system [20] is quite closely related to Ultraviolet. Like Ultraviolet, it is designed for user interface applications, and is a kind of meta-solver that supports different subsolvers.
Reference: 30. <author> Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Borning. </author> <title> Multi-way versus one-way constraints in user interfaces: Experience with the DeltaBlue algorithm. </title> <journal> Software|Practice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The other most common sort of constraint satisfaction algorithm for interactive graphics is a local propagation algorithm for multi-way constraints (thus restricting the constraints to functional constraints only and acyclic constraint graphs). Recent examples include DeltaBlue <ref> [30] </ref>, SkyBlue [29], and QuickPlan [32]; these three algorithms also support constraint hierarchies. The DETAIL system [20] is quite closely related to Ultraviolet. Like Ultraviolet, it is designed for user interface applications, and is a kind of meta-solver that supports different subsolvers. <p> The primary focus of this paper is the overall architecture of Ultraviolet and how the subsolvers communicate, rather than the details of each subsolver, so these are primarily outlines. 5.1. Blue Blue is the simplest of the current subsolvers; it is a batch version of our incremental DeltaBlue algorithm <ref> [10, 30] </ref>. It is a traditional local propagation solver, which handles acyclic constraint graphs containing functional constraints only. However, 12 it can process constraints over arbitrary domains, rather than just numeric constraints as with the other subsolvers.
Reference: 31. <author> Ivan Sutherland. </author> <title> Sketchpad: A Man-Machine Graphical Communication System. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, MIT, </institution> <month> January </month> <year> 1963. </year>
Reference-contexts: Related Work There is a long history of using constraints for interactive graphics. The first constraint-based system, as well as the first interactive computer graphics system, was Ivan Sutherland's Sketchpad <ref> [31] </ref> from 1963, a constraint-based drawing system. Sketchpad provided multi-way constraints and interactive response, and paved the way for many subsequent systems. Many constraint-based systems have employed one-way constraints; recent examples of toolkits and algorithms that use one-way constraints are Amulet [27], sub-Arctic [21], and Hudson's ultra-lightweight constraint system [22].
Reference: 32. <author> Brad Vander Zanden. </author> <title> An incremental algorithm for satisfying hierarchies of multi-way dataflow constraints. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 18(1) </volume> <pages> 30-72, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: The other most common sort of constraint satisfaction algorithm for interactive graphics is a local propagation algorithm for multi-way constraints (thus restricting the constraints to functional constraints only and acyclic constraint graphs). Recent examples include DeltaBlue [30], SkyBlue [29], and QuickPlan <ref> [32] </ref>; these three algorithms also support constraint hierarchies. The DETAIL system [20] is quite closely related to Ultraviolet. Like Ultraviolet, it is designed for user interface applications, and is a kind of meta-solver that supports different subsolvers.
References-found: 32

