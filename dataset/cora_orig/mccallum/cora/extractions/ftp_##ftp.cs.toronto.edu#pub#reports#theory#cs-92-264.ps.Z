URL: ftp://ftp.cs.toronto.edu/pub/reports/theory/cs-92-264.ps.Z
Refering-URL: 
Root-URL: 
Title: Predicative Recursion and Computational Complexity  
Author: Stephen J. Bellantoni 
Degree: A thesis submitted in conformity with the requirements of the Degree of Doctor of Philosophy, Graduate Department of Computer Science, in the  
Note: Copyright 1992 Stephen J. Bellantoni 1  
Address: Toronto  
Affiliation: University of  
Date: 30 September 1992  
Abstract-found: 0
Intro-found: 1
Reference: [Al] <author> B. Allen, </author> <title> "Arithmetizing Uniform NC", </title> <journal> Annals of Pure and Applied Logic, v. </journal> <volume> 53, </volume> <booktitle> 1991, </booktitle> <publisher> North Holland. </publisher>
Reference-contexts: Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen <ref> [Al] </ref>; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU].
Reference: [BM] <author> J. Bell, M. Machover, </author> <title> A Course in Mathematical Logic, </title> <publisher> North-Holland (Elsevier Science Publishers) 1977, </publisher> <year> 1986. </year>
Reference-contexts: Nelson's work itself is in the "nominalist" philosophy which is highly formalist and, while not finitist, is much stricter than the intuitionistic view. For a general background in logic one can refer to [GG] or <ref> [BM] </ref>. 3 We use the graph of the function here because these systems only have a restricted set of function symbols. - 96 - Chapter 10 The system PV BC 10.1 Defining PV BC In this section, a quantifier-free classical logical system, PV BC , is developed using the class BC <p> The Henkin construction showing the completeness of the predicate calculus (by adding a witnessing constant for each existential formula; see Bell and Machover <ref> [BM] </ref> p. 117ff) can be carried out with trivial modifications for the two-sorted calculus. This gives us the following theorem. Soundness and Completeness of QPV 8QPV j= A , 8QPV ` A: As usual, this statement is relative to the expressiveness of the system. <p> Therefore hI; Ai j= 8x:(fi W ), which is identically (8x:fi) W . The cases of :, ^, and 8a (for safe a) are easier and are omitted. A simpler, one-sorted version of the following can be found in Bell and Machover <ref> [BM] </ref> pages 102-104. We need some additional manipulations to make sure the sorts are treated correctly, and we use the Convergence Theorem.
Reference: [BC] <author> S. Bellantoni and S. Cook, </author> <title> "A New Recursion-Theoretic Characterization of the Polytime Functions", </title> <note> to appear in computational complexity. Extended Abstract appeared in Proc. 24th Symposium on the Theory Of Computing, </note> <year> 1992. </year>
Reference: [Ben] <author> J. Bennett, </author> <title> On Spectra, </title> <type> Ph. D. Thesis, </type> <institution> Princeton University, </institution> <year> 1962. </year>
Reference: [Bl] <author> S. Bloch, </author> <title> "Functional Characterizations of Uniform Log-depth and Polylog-depth Circuit Families", in Annual Conference on Structure in Complexity Theory, </title> <note> 1992 (to appear). </note>
Reference: [Bl2] <author> S. Bloch, </author> <title> Divide and Conquer in Parallel Complexity and Proof Theory, </title> <type> Ph.D. Thesis, </type> <institution> Department of Mathematics, University of California at San Diego, </institution> <year> 1992. </year>
Reference: [Bi] <author> E. Bishop, </author> <title> "Mathematics as a numerical language", in Intuitionism and Proof Theory, </title> <editor> eds Myhill et al., </editor> <publisher> North-Holland, </publisher> <year> 1970. </year>
Reference-contexts: At a more general level, the idea of introducing feasibility considerations into logic is a radical extension of the program of constructive mathematics [H], <ref> [Bi] </ref>, [TD]. Nelson's work itself is in the "nominalist" philosophy which is highly formalist and, while not finitist, is much stricter than the intuitionistic view.
Reference: [B] <author> S. Buss, </author> <title> "Bounded Arithmetic", </title> <type> Ph.D. Dissertation, </type> <institution> Princeton University, </institution> <note> 1985; reprinted Bibliopolis, Naples, </note> <year> 1986. </year>
Reference-contexts: like to acknowledge Stephen Cook for laying the foundations of this part, and particularly for the use of the Herbrand Theorem. 9.2 Background One of the two lines of research into feasible logics examined below, that of bounded arithmetic, is exemplified in the work of Paris and Wilkie [PW], Buss <ref> [B] </ref>, [B3]; Cook and Urquhart [CU] and, earlier, the propositional work of Cook and Reckhow [CR]. Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. <p> The presence of the surjectivity principle in these second order systems is a binary-successors analogue to starting with Robinson's small subsystem Q of Peano Arithmetic [Ro]; as discussed by Nelson [N], this system has no induction rule. Buss comments <ref> [B, p. 210] </ref> that Wilkie and Nelson independently proved that the bounded arithmetic systems S i 2 are predicative in the sense that they can be interpreted in Q. <p> f (x; y) is provable in IS i 2 , f is in 2 i (<ref> [B] </ref>); in particular, provability in IPV corresponds to polytime (see [CU]). 3 ffi f is provable in I 0 [ f8x9y:2 x = yg , f is Kalmar elementary (folklore, noted in [CT]). Although Buss [B] does consider weak second-order systems, the development is in a different direction from that of Leivant; the induction axiom of S i 2 is retained and the primary focus is definability of functions. <p> This helps confirm the intuition that in some cases bounds which were present in P V can be eliminated in favor of statements concerning safe variables. Witnessing functions for existential QPV proofs If 8QPV ` 8x; a9b:ff <ref> [x; a; b] </ref>, where x, a, and b are all the variables in the quantifier free formula ff, then there are function symbols f such that ` PV BC ff [x; a; f (x; a)]. Proof. Assuming 8QPV ` 8x; a9b:ff [x; a; b], by soundness 8QPV [ f:8x; a9b:ff [x; <p> for existential QPV proofs If 8QPV ` 8x; a9b:ff <ref> [x; a; b] </ref>, where x, a, and b are all the variables in the quantifier free formula ff, then there are function symbols f such that ` PV BC ff [x; a; f (x; a)]. Proof. Assuming 8QPV ` 8x; a9b:ff [x; a; b], by soundness 8QPV [ f:8x; a9b:ff [x; a; b]g is unsatisfiable. <p> Proof. Assuming 8QPV ` 8x; a9b:ff [x; a; b], by soundness 8QPV <ref> [ f:8x; a9b:ff [x; a; b] </ref>g is unsatisfiable. <p> <ref> [x; a; b] </ref>, where x, a, and b are all the variables in the quantifier free formula ff, then there are function symbols f such that ` PV BC ff [x; a; f (x; a)]. Proof. Assuming 8QPV ` 8x; a9b:ff [x; a; b], by soundness 8QPV [ f:8x; a9b:ff [x; a; b]g is unsatisfiable. <p> Proof. Assuming 8QPV ` 8x; a9b:ff [x; a; b], by soundness 8QPV [ f:8x; a9b:ff [x; a; b]g is unsatisfiable. Introducing new constants x and a for the :8, we have that the set 8QPV <ref> [ f8b::ff [ x ; a ; b] </ref>g is unsatisfiable, and by Herbrand's theorem there is a finite set of closed instances Q of 8QPV and terms t i ( x ; a ) with no free variables, such that fQ i g [ f:ff [ x ; a ; t <p> Proof. Assuming 8QPV ` 8x; a9b:ff [x; a; b], by soundness 8QPV [ f:8x; a9b:ff [x; a; b]g is unsatisfiable. Introducing new constants x and a for the :8, we have that the set 8QPV [ f8b::ff <ref> [ x ; a ; b] </ref>g is unsatisfiable, and by Herbrand's theorem there is a finite set of closed instances Q of 8QPV and terms t i ( x ; a ) with no free variables, such that fQ i g [ f:ff [ x ; a ; t ( x <p> giving 8QPV ` ff [x; a; t (x; a)] _ . . . _ ff [x; a; t (x; a)] Now using eq and the propositional terms of the Appendix to define a function symbol ff such that ` PV BC ( ff (x; a; b) = 0) $ ff <ref> [x; a; b] </ref>, define f by f (x; a) = &gt; &gt; &gt; &gt; &gt; &lt; t (x; a) if ff (x; a; t (x; a)) 2 2 . . . k (x; a) otherwise The proof ` PV BC ff [x; a; f (x; a)] required for the Lemma is <p> In this sense, the witnessing theorem above implies a theorem like Parikh's: unbounded existential quantifiers can be replaced with poly-bounded quantifiers. The following shows that 9 -PIND is a derived rule of QPV. 9 induction in QPV Let ff [x; y; a] be a formula of the form 9b:fi <ref> [x; y; a; b] </ref>. If 8QPV ` ff [0; y; a] ^ 8x:(ff [x; y; a] ! (ff [x0; y; a] ^ ff [x1; y; a])) then 8QPV ` 8x:ff [x; y; a]: Proof. Consider ff [x; y; a] 9b:fi [x; y; a; b] and assume the antecedent. <p> [x; y; a] be a formula of the form 9b:fi <ref> [x; y; a; b] </ref>. If 8QPV ` ff [0; y; a] ^ 8x:(ff [x; y; a] ! (ff [x0; y; a] ^ ff [x1; y; a])) then 8QPV ` 8x:ff [x; y; a]: Proof. Consider ff [x; y; a] 9b:fi [x; y; a; b] and assume the antecedent. <p> Consider ff [x; y; a] 9b:fi [x; y; a; b] and assume the antecedent. Applying the preceding Theorem to the clause 8QPV ` 9b:fi <ref> [0; y; a; b] </ref>, we have function g such that ` PV BC fi [0; y; a; g (y; a)]. - 111 - For i 2 f0; 1g, from 8x:ff [x; y; a] ! ff [xi; y; a] we prove in QPV the equivalent form 8b 1 9b 2 :(fi [x; <p> By induction on the normal variable x, we have ` PV BC fi [x; y; a; f (x; y; a)]. This implies 8QPV ` 8x; y; a:9b:fi <ref> [x; y; a; b] </ref>, as required. - 112 - Chapter 12 The system L p (A) 12.1 A second-order system, L p In this section we develop a second-order system akin to Leivant's L 2 (QF + ) (see [L]). <p> This is true because they are all universal axioms, hence e.g. the image of fi <ref> [z; b] </ref> is W (z) ! fi [z; b] and follows from fi in L p 2 (A). This leaves the axiom of induction on normal variables, whose image in L p 2 (A) is for each quantifier-free first-order ff. <p> This is true because they are all universal axioms, hence e.g. the image of fi <ref> [z; b] </ref> is W (z) ! fi [z; b] and follows from fi in L p 2 (A). This leaves the axiom of induction on normal variables, whose image in L p 2 (A) is for each quantifier-free first-order ff.
Reference: [B2] <author> S. Buss, </author> <title> private communication, </title> <address> Hotel Mazanka, Prague, </address> <month> July </month> <year> 1991. </year> <month> - 159 </month> - 
Reference: [B3] <author> S. Buss, </author> <title> "The polynomial hierarchy and intuitionistic bounded arithmetic", </title> <booktitle> An--nual Conference on Structure in Complexity Theory, Springer-Verlag Lecture Notes in Computer Science 223, </booktitle> <year> 1986. </year>
Reference-contexts: to acknowledge Stephen Cook for laying the foundations of this part, and particularly for the use of the Herbrand Theorem. 9.2 Background One of the two lines of research into feasible logics examined below, that of bounded arithmetic, is exemplified in the work of Paris and Wilkie [PW], Buss [B], <ref> [B3] </ref>; Cook and Urquhart [CU] and, earlier, the propositional work of Cook and Reckhow [CR]. Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area.
Reference: [Cl] <author> P. Clote, </author> <title> "Sequential, machine-independent characterizations of the parallel complexity classes AlogTIME, AC k , N C k and N C." </title> <booktitle> in MSI Workshop on Feasible Mathematics, </booktitle> <publisher> Birkhauser, </publisher> <year> 1989. </year> <title> An earlier exposition appears as "A Sequential Programming Language for Parallel Complexity Classes", </title> <type> Technical Report BCCS-88-07, </type> <institution> Department of Computer Science, Boston College, </institution> <year> 1988. </year>
Reference: [CT] <author> P. Clote, G. Takeuti, </author> <title> "Exponential Time and Bounded Arithmetic", </title> <booktitle> in Annual Conference on Structure in Complexity Theory, v. </booktitle> <volume> 1, </volume> <year> 1986. </year>
Reference-contexts: Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote <ref> [CT] </ref>; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU]. <p> defined by a -term built from 0, +1, and Godel's higher type primitive recursion (see [Gi]). 2 Paraphrased from his talk at the Workshop on Feasible Mathematics II, Cornell University, May 1992. ffi f provable in Peano Arithmetic using induction on existential formulas , f is primitive recursive (see [LM], <ref> [CT] </ref>, for references). ffi f is provable in I 0 [ f8x9y:x jxj = yg , f is in [ i 2 p i ([B], cited in [CT]). ffi 8x9y: f (x; y) is provable in IS i 2 , f is in 2 i ([B]); in particular, provability in IPV <p> II, Cornell University, May 1992. ffi f provable in Peano Arithmetic using induction on existential formulas , f is primitive recursive (see [LM], <ref> [CT] </ref>, for references). ffi f is provable in I 0 [ f8x9y:x jxj = yg , f is in [ i 2 p i ([B], cited in [CT]). ffi 8x9y: f (x; y) is provable in IS i 2 , f is in 2 i ([B]); in particular, provability in IPV corresponds to polytime (see [CU]). 3 ffi f is provable in I 0 [ f8x9y:2 x = yg , f is Kalmar elementary (folklore, noted in [CT]). <p> <ref> [CT] </ref>). ffi 8x9y: f (x; y) is provable in IS i 2 , f is in 2 i ([B]); in particular, provability in IPV corresponds to polytime (see [CU]). 3 ffi f is provable in I 0 [ f8x9y:2 x = yg , f is Kalmar elementary (folklore, noted in [CT]). Although Buss [B] does consider weak second-order systems, the development is in a different direction from that of Leivant; the induction axiom of S i 2 is retained and the primary focus is definability of functions.
Reference: [Cob] <author> A. Cobham, </author> <title> "The intrinsic computational difficulty of functions". </title> <editor> In Y. Bar-Hillel ed., </editor> <booktitle> Proc. of the 1964 International Congress for Logic, Methodology, and the Philosophy of Science, p. </booktitle> <pages> 24-30. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1964. </year>
Reference: [CF] <author> K. Compton, C. LaFlamme, </author> <title> "An Algebra and a Logic for N C 1 ", in Information and Computation v. </title> <booktitle> 87, p. </booktitle> <pages> 241-263, </pages> <year> 1990. </year>
Reference: [C] <author> S. Cook, </author> <title> "Feasibly constructive proofs and the propositional calculus", </title> <booktitle> in Proc. 7th Symposium on the Theory Of Computing, </booktitle> <year> 1975. </year>
Reference: [C2] <author> S. Cook, </author> <title> "Computability and complexity of higher type functions." </title> <booktitle> In Proc. MSRI Workshop on Logic from Computer Science, </booktitle> <editor> Y. Moschovakis, ed., </editor> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference: [C3] <author> S. Cook, </author> <title> "The complexity of theorem proving procedures", </title> <booktitle> Proc. 3rd ACM Symposium on the Theory of Computing, </booktitle> <year> 1971. </year>
Reference: [C4] <author> S. Cook, </author> <title> "Computational Complexity of Higher Type Functions", </title> <booktitle> Proceedings of the International Congress of Mathematicians, </booktitle> <year> 1990. </year>
Reference: [C5] <author> S. Cook, </author> <title> "A Taxonomy of Problems with Fast Parallel Algorithms", in Information and Control, </title> <editor> v. </editor> <volume> 64, </volume> <editor> n. 1-3, p. </editor> <volume> 2, </volume> <year> 1985. </year>
Reference: [CK] <author> S. Cook and B. Kapron, </author> <title> "Characterizations of the Basic Feasible Functionals of Finite Type", in Feasible Mathematics, </title> <editor> S. R. Buss and P. J. Scott eds., </editor> <publisher> Birkhauser, </publisher> <year> 1990. </year>
Reference: [CR] <author> S. Cook, R Reckhow, </author> <title> "The Relative Efficiency of Propositional Proof Systems", </title> <journal> Journal of Symbolic Logic, v. </journal> <volume> 44, </volume> <editor> n. </editor> <volume> 1, </volume> <year> 1979. </year>
Reference-contexts: the use of the Herbrand Theorem. 9.2 Background One of the two lines of research into feasible logics examined below, that of bounded arithmetic, is exemplified in the work of Paris and Wilkie [PW], Buss [B], [B3]; Cook and Urquhart [CU] and, earlier, the propositional work of Cook and Reckhow <ref> [CR] </ref>. Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU].
Reference: [CU] <author> S. Cook and A. Urquhart, </author> <title> "Functional interpretations of feasibly constructive arithmetic", </title> <note> Annals of Pure and Applied Logic (to appear). Extended abstract appears in Proc. 21st STOC (1989). </note>
Reference-contexts: Introduction to Part II 9.1 Discussion The results of the first part of this thesis bear on the logic PV ([C], <ref> [CU] </ref>), an equational theory with a function symbol for each polytime function together with defining equations for the function based on Cobham's characterization. An alternative development of PV, based on the theorems of Part I rather than Cobham's theorem, should be simpler. <p> In the following chapters we develop three logics, PV BC , QPV, and L p 2 (A). The first is a quantifier-free system which, like P V of <ref> [CU] </ref>, arguably captures the notion of "feasible proof". The second is a quantified version of this, with a quantifier-free axiomatic basis. The third is a second-order system which is essentially a subsystem of Leivant's L 2 (QF + ) (see [L]) containing function symbols for the polytime functions. <p> for laying the foundations of this part, and particularly for the use of the Herbrand Theorem. 9.2 Background One of the two lines of research into feasible logics examined below, that of bounded arithmetic, is exemplified in the work of Paris and Wilkie [PW], Buss [B], [B3]; Cook and Urquhart <ref> [CU] </ref> and, earlier, the propositional work of Cook and Reckhow [CR]. Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. <p> Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart <ref> [CU] </ref>. <p> is provable in I 0 [ f8x9y:x jxj = yg , f is in [ i 2 p i ([B], cited in [CT]). ffi 8x9y: f (x; y) is provable in IS i 2 , f is in 2 i ([B]); in particular, provability in IPV corresponds to polytime (see <ref> [CU] </ref>). 3 ffi f is provable in I 0 [ f8x9y:2 x = yg , f is Kalmar elementary (folklore, noted in [CT]). <p> This system is a two-sorted analogue of the system P V developed by Cook [C77] and Cook & Urquhart <ref> [CU] </ref>. Terms and function symbols of PV BC Assume that ff, fi are type symbols in f-; g. S1. There are infinitely many variables of types and, and each variable is a term (of its given type). S2. The constants 0 and 0 are terms (of type and respectively). S3. <p> The system PV BC defined above is equal in power to the system P V discussed by Cook & Urquhart <ref> [CU] </ref>. <p> The slightly harder case is function symbols defined in P V using the construction R [g; h; k]; in P V the corresponding axiom is <ref> [CU, p. 20] </ref> R [g; h; k](x; y) = cond (x; g (y); cond (t : k (x; y); t; k (x; y))) where t h (x; y; R [g; h; k](b 1 2 xc; y)) Definition of mapping from P V to PV BC Given hereditarily normal g 0 , <p> The computations required for the initial functions are easily carried out using the results of <ref> [CU] </ref>; for example, we can use multi-variable recursion to define mod and then use multi-variable induction to prove facts about it. Lemma: P V is as strong as PV BC ` PV BC ff )` P V ff 00 Proof. <p> Lemma: P V is as strong as PV BC ` PV BC ff )` P V ff 00 Proof. As discussed above, the initial functions present no difficulty since the development in <ref> [CU] </ref> is quite extensive. The deduction rules of PV BC are also unproblematic since we have equality and induction rules in P V .
Reference: [FeShSt] <author> L. Fegaras, T. Sheard, D. Stemple, </author> <title> "Uniform Traversal Combinators: Definition, Use and Properties", </title> <booktitle> in 11th International Conference on Automated Deduction, </booktitle> <month> June </month> <year> 1992. </year>
Reference: [F] <author> S. Feferman, </author> <title> "Systems of Predicative Analysis", in The Philosophy of Mathematics, </title> <editor> J. Hintikka ed., </editor> <booktitle> series: "Oxford Readings in Philosophy", </booktitle> <publisher> Oxford University Press, </publisher> <year> 1969. </year>
Reference-contexts: Leivant, [L], [L3], [L4] in which comprehension is identified as the source both of computational complexity and impredicativity. 1 The philosophical motivation for this line of research is found in Nelson's predicative arithmetic [N], and before that in the ramified analysis of Russell, Weyl, Spector, and many others; see Feferman <ref> [F] </ref> for a discussion. These earlier works differ from Leivant's in being concerned only with the basic 1 The axiom scheme of comprehension is 9R8u:R (u) $ fl [u; v; Q]; it allows you to define a set R from a formula fl.
Reference: [Fe] <author> F. J. I. Ferreira, </author> <title> Polynomial Time Computable Arithmetic and Conservative Extensions, </title> <type> Ph.D. Thesis, </type> <institution> Department of Mathematics, Pennsylvania State University, </institution> <year> 1988. </year>
Reference-contexts: Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira <ref> [Fe] </ref> for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU].
Reference: [GG] <editor> D. Gabbay, F. Guenthner (eds.), </editor> <booktitle> Handbook of Philosophical Logic v. I, II, and III; D. </booktitle> <publisher> Reidel Publishing Company, </publisher> <year> 1984. </year>
Reference-contexts: Nelson's work itself is in the "nominalist" philosophy which is highly formalist and, while not finitist, is much stricter than the intuitionistic view. For a general background in logic one can refer to <ref> [GG] </ref> or [BM]. 3 We use the graph of the function here because these systems only have a restricted set of function symbols. - 96 - Chapter 10 The system PV BC 10.1 Defining PV BC In this section, a quantifier-free classical logical system, PV BC , is developed using the
Reference: [Ga] <author> J. W. Garson, </author> <title> "Quantification in Modal Logic", </title> <booktitle> in [GG] v.II. </booktitle>
Reference-contexts: On the logical end, one try to interpret 2 ff as meaning that ff is known to us through feasible (or predicative) reasoning. Even the ordinary use of modality in formulas containing first-order variables <ref> [Ga] </ref> is complex enough to raise tricky questions of intuition. Nevertheless, the idea of analyzing computational complexity by directly formalizing feasible or predicative knowledge has a powerful appeal. - 141 - Chapter 15 Appendix In this appendix we prove facts in PV BC .
Reference: [Gi] <author> Girard, </author> <title> Proof theory and logical complexity, series: Studies in Proof Theory, </title> <type> Monographs; Bibliopolis, </type> <year> 1987. </year>
Reference-contexts: For example, we can list the following correspondences, using "f is provable" to mean that 8x9y:y = f (x) is provable: ffi f provable in Peano Arithmetic , f defined by a -term built from 0, +1, and Godel's higher type primitive recursion (see <ref> [Gi] </ref>). 2 Paraphrased from his talk at the Workshop on Feasible Mathematics II, Cornell University, May 1992. ffi f provable in Peano Arithmetic using induction on existential formulas , f is primitive recursive (see [LM], [CT], for references). ffi f is provable in I 0 [ f8x9y:x jxj = yg ,
Reference: [Gu] <author> Y. Gurevich, </author> <title> "Algebras of Feasible Functions", </title> <booktitle> Proc. 24th IEEE Conference on Foundations of Computer Science, p. </booktitle> <pages> 210-214, </pages> <year> 1983. </year>
Reference: [Ha] <author> W. G. Handley, </author> <title> "Bellantoni and Cook's Characterization of Polynomial Time Functions", </title> <institution> typescript, Department of Pure Mathematics, University of Leeds, </institution> <month> August </month> <year> 1992. </year>
Reference: [H] <author> A. Heyting, </author> <title> Intuitionism: an introduction, </title> <publisher> North-Holland, </publisher> <year> 1966. </year>
Reference-contexts: At a more general level, the idea of introducing feasibility considerations into logic is a radical extension of the program of constructive mathematics <ref> [H] </ref>, [Bi], [TD]. Nelson's work itself is in the "nominalist" philosophy which is highly formalist and, while not finitist, is much stricter than the intuitionistic view. <p> The slightly harder case is function symbols defined in P V using the construction R <ref> [g; h; k] </ref>; in P V the corresponding axiom is [CU, p. 20] R [g; h; k](x; y) = cond (x; g (y); cond (t : k (x; y); t; k (x; y))) where t h (x; y; R [g; h; k](b 1 2 xc; y)) Definition of mapping from P <p> The slightly harder case is function symbols defined in P V using the construction R <ref> [g; h; k] </ref>; in P V the corresponding axiom is [CU, p. 20] R [g; h; k](x; y) = cond (x; g (y); cond (t : k (x; y); t; k (x; y))) where t h (x; y; R [g; h; k](b 1 2 xc; y)) Definition of mapping from P V to PV BC Given hereditarily normal g 0 , h 0 , and <p> is function symbols defined in P V using the construction R <ref> [g; h; k] </ref>; in P V the corresponding axiom is [CU, p. 20] R [g; h; k](x; y) = cond (x; g (y); cond (t : k (x; y); t; k (x; y))) where t h (x; y; R [g; h; k](b 1 2 xc; y)) Definition of mapping from P V to PV BC Given hereditarily normal g 0 , h 0 , and k 0 in PV BC corresponding to functions g, h, and k in P V , define f 0 corresponding to the P V function <p> k](b 1 2 xc; y)) Definition of mapping from P V to PV BC Given hereditarily normal g 0 , h 0 , and k 0 in PV BC corresponding to functions g, h, and k in P V , define f 0 corresponding to the P V function R <ref> [g; h; k] </ref> by using R to obtain the following predicative recursion axioms: f 0 (0; y; ) = g 0 (y) where t h 0 (xi; y; f (x; y; ) mod k 0 (xi; y; )) Now given formula ff in P V we obtain ff 0 in PV <p> For example, we have ` PV BC cond (s 0 (x); y; z; ) = cond (x; y; z; ) by the equations for cond in PV BC . Secondly, if f was defined by R <ref> [g; h; k] </ref> in P V , we need to prove the image of the P V axiom: f 0 (x; y) = cond (x; g 0 (y; ); cond (t : k 0 (x; y; ); t; k 0 (x; y; ))) where t h 0 (x; y; f 0 <p> Then ` PV BC fi $ (fi 00 ) 0 : The proofs, which are left as an exercise, essentially consist of checking that the mappings 0 and 00 do what they seem to do. For example, considering R <ref> [g; h; k] </ref> in P V one may write down the P V definitions of eq 00 , C 00 and mod 00 corresponding to the PV BC functions eq, C and mod, and then verify that P V proves x 6= 0 ! cond (x; g (y); cond (t : <p> t; k (x; y))) = C (t 00 00 eq t 00 mod k (x; y); t 00 ; k (x; y)) where t h (x; y; r) t 00 h (x; y; r) mod 00 k (x; y) (Here r is a free variable replacing the recursion term R <ref> [g; h; k] </ref>(b 1 2 xc; y). We have assumed by the induction hypothesis that (k 0 (x; y)) 00 = k (x; y) and (h 0 (x; y; r)) 00 = h (x; y; r) for all x; y; r.) Chapter 11 The system QPV 11.1 The system QPV.
Reference: [Ig] <author> A. Ignjatovic, </author> <title> "Delineating Classes of Computational Complexity via Second Order Theories with Weak Set Existence Principles (I)", </title> <type> manuscript, </type> <institution> Department of Philosophy, Carnegie Mellon University, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: Following the line of Leivant, Ignjatovic <ref> [Ig] </ref> defined the system BASIC ( b i ) and proved that a function f is in 2 p i (level i of the polytime function hierarchy) if and only if it is provable in BASIC ( b i ). We refer to the model-theoretic ideas of Ignjatovic [Ig] in one <p> Leivant, Ignjatovic <ref> [Ig] </ref> defined the system BASIC ( b i ) and proved that a function f is in 2 p i (level i of the polytime function hierarchy) if and only if it is provable in BASIC ( b i ). We refer to the model-theoretic ideas of Ignjatovic [Ig] in one of the proofs below. The presence of the surjectivity principle in these second order systems is a binary-successors analogue to starting with Robinson's small subsystem Q of Peano Arithmetic [Ro]; as discussed by Nelson [N], this system has no induction rule. <p> The reverse direction follows by a model-theoretic argument; the idea of using model theory for this is from Ignjatovic <ref> [Ig] </ref>. Definition of W W (u) Cl (Q) W (Q (0) ^ 8w 2 W; Q (w) ! Q (w0) ^ Q (w1)) Cl (Q) W is pronounced, "Q is closed in W ". The formula W w (u) is essentially W (u) relativized to W . <p> We also write down a proof of the reverse direction using a modification of Ignjatovic's model-theoretic argument <ref> [Ig] </ref>. An interpretation consists of a structure I (universes for the objects and sets of object, and interpretations for the function symbols and the constant 0) together with an assignment A for the variables of the language.
Reference: [I] <author> N. Immerman, </author> <title> "Descriptive and Computational Complexity", AMS Short Course in Complexity, </title> <booktitle> 1988. </booktitle> - <pages> 161 </pages> - 
Reference: [I2] <author> N. Immerman, </author> <title> "Languages That Capture Complexity Classes", </title> <journal> SIAM Journal of Computing, </journal> <volume> p. </volume> <pages> 760-778, </pages> <publisher> v. </publisher> <month> 16 </month> <year> (1987). </year>
Reference: [I3] <author> N. Immerman, </author> <title> "Expressibility as a Complexity Measure", </title> <booktitle> Annual Conference on Structure in Complexity Theory, </booktitle> <volume> 2, </volume> <year> 1987. </year>
Reference: [K] <author> B. Kapron, </author> <title> "Feasible Computation in Higher Types", </title> <type> Technical Report 249/91, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1991. </year>
Reference-contexts: The slightly harder case is function symbols defined in P V using the construction R <ref> [g; h; k] </ref>; in P V the corresponding axiom is [CU, p. 20] R [g; h; k](x; y) = cond (x; g (y); cond (t : k (x; y); t; k (x; y))) where t h (x; y; R [g; h; k](b 1 2 xc; y)) Definition of mapping from P <p> The slightly harder case is function symbols defined in P V using the construction R <ref> [g; h; k] </ref>; in P V the corresponding axiom is [CU, p. 20] R [g; h; k](x; y) = cond (x; g (y); cond (t : k (x; y); t; k (x; y))) where t h (x; y; R [g; h; k](b 1 2 xc; y)) Definition of mapping from P V to PV BC Given hereditarily normal g 0 , h 0 , and <p> is function symbols defined in P V using the construction R <ref> [g; h; k] </ref>; in P V the corresponding axiom is [CU, p. 20] R [g; h; k](x; y) = cond (x; g (y); cond (t : k (x; y); t; k (x; y))) where t h (x; y; R [g; h; k](b 1 2 xc; y)) Definition of mapping from P V to PV BC Given hereditarily normal g 0 , h 0 , and k 0 in PV BC corresponding to functions g, h, and k in P V , define f 0 corresponding to the P V function <p> k](b 1 2 xc; y)) Definition of mapping from P V to PV BC Given hereditarily normal g 0 , h 0 , and k 0 in PV BC corresponding to functions g, h, and k in P V , define f 0 corresponding to the P V function R <ref> [g; h; k] </ref> by using R to obtain the following predicative recursion axioms: f 0 (0; y; ) = g 0 (y) where t h 0 (xi; y; f (x; y; ) mod k 0 (xi; y; )) Now given formula ff in P V we obtain ff 0 in PV <p> For example, we have ` PV BC cond (s 0 (x); y; z; ) = cond (x; y; z; ) by the equations for cond in PV BC . Secondly, if f was defined by R <ref> [g; h; k] </ref> in P V , we need to prove the image of the P V axiom: f 0 (x; y) = cond (x; g 0 (y; ); cond (t : k 0 (x; y; ); t; k 0 (x; y; ))) where t h 0 (x; y; f 0 <p> Then ` PV BC fi $ (fi 00 ) 0 : The proofs, which are left as an exercise, essentially consist of checking that the mappings 0 and 00 do what they seem to do. For example, considering R <ref> [g; h; k] </ref> in P V one may write down the P V definitions of eq 00 , C 00 and mod 00 corresponding to the PV BC functions eq, C and mod, and then verify that P V proves x 6= 0 ! cond (x; g (y); cond (t : <p> t; k (x; y))) = C (t 00 00 eq t 00 mod k (x; y); t 00 ; k (x; y)) where t h (x; y; r) t 00 h (x; y; r) mod 00 k (x; y) (Here r is a free variable replacing the recursion term R <ref> [g; h; k] </ref>(b 1 2 xc; y). We have assumed by the induction hypothesis that (k 0 (x; y)) 00 = k (x; y) and (h 0 (x; y; r)) 00 = h (x; y; r) for all x; y; r.) Chapter 11 The system QPV 11.1 The system QPV.
Reference: [KC] <author> B. Kapron and S. Cook, </author> <title> "A New Characterization of Mehlhorn's Polynomial Time Functionals", </title> <booktitle> in Proceedings of the 32nd IEEE Conference on Foundations of Computer Science, </booktitle> <year> 1991. </year>
Reference: [KPT] <author> J. Krajicek, P. Pudlak, G. Takeuti, </author> <title> "Bounded Arithmetic and the Polynomial Hierarchy", </title> <journal> Annals of Pure and Applied Logic, </journal> <year> 1989. </year>
Reference-contexts: Further work in this area is by Krajicek, Pudlak, and Takeuti, for example <ref> [KPT] </ref>, [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU].
Reference: [KT] <author> J. Krajicek, G. Takeuti, </author> <title> "On Bounded 1 1 Polynomial Induction", in Feasible Mathematics, </title> <editor> S. Buss and P. Scott, eds., </editor> <publisher> Birkhauser 1990. </publisher>
Reference-contexts: Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], <ref> [KT] </ref>; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU]. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU].
Reference: [L] <author> D. Leivant, </author> <title> "A foundational delineation of computational feasibility", </title> <booktitle> in Sixth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <year> 1991. </year> <note> (Revised and expanded as "A foundational delineation of poly-time", submitted for publication, </note> <month> December </month> <year> 1991.) </year>
Reference-contexts: An alternative development of PV, based on the theorems of Part I rather than Cobham's theorem, should be simpler. On the other hand, the results can also be used within the second-order logical system defined by Leivant <ref> [L] </ref> to simplify certain results. Introducing such a function class into each of these two logical systems allows us to define and prove a direct correspondence between the two. <p> The second is a quantified version of this, with a quantifier-free axiomatic basis. The third is a second-order system which is essentially a subsystem of Leivant's L 2 (QF + ) (see <ref> [L] </ref>) containing function symbols for the polytime functions. We discuss the correspondence between PV BC and P V , and that QPV is conservative - 93 - over PV BC . We prove a "two sorted" version of a simplified witnessing theorem for QPV, using the Herbrand theorem. <p> See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU]. The other line of research into feasibility and logic explored here is essentially the project of of Leivant, <ref> [L] </ref>, [L3], [L4] in which comprehension is identified as the source both of computational complexity and impredicativity. 1 The philosophical motivation for this line of research is found in Nelson's predicative arithmetic [N], and before that in the ramified analysis of Russell, Weyl, Spector, and many others; see Feferman [F] for <p> This implies 8QPV ` 8x; y; a:9b:fi [x; y; a; b], as required. - 112 - Chapter 12 The system L p (A) 12.1 A second-order system, L p In this section we develop a second-order system akin to Leivant's L 2 (QF + ) (see <ref> [L] </ref>). The main difference between L p 2 (A) and L 2 (QF + ) is that in L p 2 (A) we have function symbols only for the polytime functions, where in L 2 (QF + ) we have function symbols for all computable functions.
Reference: [L2] <author> D. Leivant, </author> <title> "Subrecursion and lambda representation over free algebras (Preliminary summary)", in Feasible Mathematics, </title> <editor> S. Buss and P. Scott, eds., </editor> <publisher> Birkhauser 1990. </publisher>
Reference: [L3] <author> D. Leivant, </author> <title> "Semantic characterizations of number theories", </title> <type> Technical Report CMU-CS-90-169, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1990. </year>
Reference-contexts: See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU]. The other line of research into feasibility and logic explored here is essentially the project of of Leivant, [L], <ref> [L3] </ref>, [L4] in which comprehension is identified as the source both of computational complexity and impredicativity. 1 The philosophical motivation for this line of research is found in Nelson's predicative arithmetic [N], and before that in the ramified analysis of Russell, Weyl, Spector, and many others; see Feferman [F] for a
Reference: [L4] <author> D. Leivant, </author> <title> "Characterization of Complexity Classes in Higher-Order Logic", </title> <booktitle> in Second Annual IEEE Symposium on Logic in Computer Science, </booktitle> <year> 1987. </year> (?) 
Reference-contexts: See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU]. The other line of research into feasibility and logic explored here is essentially the project of of Leivant, [L], [L3], <ref> [L4] </ref> in which comprehension is identified as the source both of computational complexity and impredicativity. 1 The philosophical motivation for this line of research is found in Nelson's predicative arithmetic [N], and before that in the ramified analysis of Russell, Weyl, Spector, and many others; see Feferman [F] for a discussion.
Reference: [LM1] <author> D. Leivant, J.Y. Marion, </author> <title> "Capturing poly-time in a typed -calculus", </title> <type> Manuscript, </type> <institution> Department of Computer Science, Indiana University, </institution> <month> April </month> <year> 1992. </year>
Reference: [LM2] <author> D. Leivant, J.Y. Marion, </author> <title> "Purely applicative characterizations of complexity classes", </title> <type> Manuscript, </type> <institution> Department of Computer Science, Indiana University, </institution> <month> April </month> <year> 1992. </year>
Reference: [Ler] <author> M. Lerman, </author> <title> Degrees of Unsolvability, </title> <booktitle> Series: Perspectives in Mathematical Logic, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1983. </year> <month> - 162 </month> - 
Reference: [Li] <author> V. Lifschitz, </author> <title> "Calculable Natural Numbers" in Intensional Mathematics, </title> <editor> S. Shapiro, ed., </editor> <booktitle> series: Studies in Logic v. </booktitle> <volume> 113, </volume> <publisher> North-Holland, </publisher> <year> 1985. </year>
Reference-contexts: Indeed, the model N of the normal sort could be either standard or nonstandard. - 140 - that value x is known to us through predicative investigation. The notion of applying modalities directly to objects has been investigated somewhat <ref> [Li] </ref> but remains sufficiently controversial and undeveloped that a major research program would be required to carry out this suggestion. On the logical end, one try to interpret 2 ff as meaning that ff is known to us through feasible (or predicative) reasoning.
Reference: [Lin] <author> J. Lind, </author> <title> "Computing in logarithmic space", </title> <type> Project MAC Technical Report, 52, </type> <institution> 1974, Massachusetts Institute of Technology. </institution>
Reference: [M] <author> K. Mehlhorn, </author> <title> "Polynomial and abstract subrecursive classes", </title> <address> JCCS v.12, p.147-178, </address> <year> 1976. </year>
Reference: [N] <author> E. Nelson, </author> <title> Predicative Arithmetic, </title> <publisher> Princeton University Press, Princeton, </publisher> <year> 1986. </year>
Reference-contexts: The other line of research into feasibility and logic explored here is essentially the project of of Leivant, [L], [L3], [L4] in which comprehension is identified as the source both of computational complexity and impredicativity. 1 The philosophical motivation for this line of research is found in Nelson's predicative arithmetic <ref> [N] </ref>, and before that in the ramified analysis of Russell, Weyl, Spector, and many others; see Feferman [F] for a discussion. <p> We refer to the model-theoretic ideas of Ignjatovic [Ig] in one of the proofs below. The presence of the surjectivity principle in these second order systems is a binary-successors analogue to starting with Robinson's small subsystem Q of Peano Arithmetic [Ro]; as discussed by Nelson <ref> [N] </ref>, this system has no induction rule. Buss comments [B, p. 210] that Wilkie and Nelson independently proved that the bounded arithmetic systems S i 2 are predicative in the sense that they can be interpreted in Q.
Reference: [O] <author> J. Otto, </author> <title> "Categorical Characterization of Ptime I", </title> <type> manuscript, </type> <institution> Dept. of Mathematics, McGill University, </institution> <year> 1991. </year>
Reference: [Pa] <author> R. Parikh, </author> <title> "Existence and feasibility in arithmetic", </title> <journal> Journal of Symbolic Logic v. </journal> <volume> 36, </volume> <year> 1971. </year>
Reference: [PW] <author> J. Paris, A. Wilkie, </author> <title> "On the Scheme of Induction for Bounded Arithmetic Formulas", </title> <journal> Annals of Pure and Applied Logic 35, </journal> <volume> 3, </volume> <year> 1987. </year>
Reference-contexts: I would like to acknowledge Stephen Cook for laying the foundations of this part, and particularly for the use of the Herbrand Theorem. 9.2 Background One of the two lines of research into feasible logics examined below, that of bounded arithmetic, is exemplified in the work of Paris and Wilkie <ref> [PW] </ref>, Buss [B], [B3]; Cook and Urquhart [CU] and, earlier, the propositional work of Cook and Reckhow [CR]. Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], [PU].
Reference: [P] <author> R. Peter, </author> <title> Recursive Functions, </title> <publisher> Academic Press, </publisher> <year> 1967. </year>
Reference-contexts: It is evident that taking these steps would give a numeric system equivalent to the term algebra system L 2 (QF + ) [ <ref> [P ] </ref> [ surj where [P ] are equations for all polytime functions, and in this sense we are working in a subsystem of L 2 (QF + ) [ [P ] [ surj. Later we will show that L p 2 (A) proves the convergence of all polytime functions. <p> It is evident that taking these steps would give a numeric system equivalent to the term algebra system L 2 (QF + ) [ <ref> [P ] </ref> [ surj where [P ] are equations for all polytime functions, and in this sense we are working in a subsystem of L 2 (QF + ) [ [P ] [ surj. Later we will show that L p 2 (A) proves the convergence of all polytime functions. <p> taking these steps would give a numeric system equivalent to the term algebra system L 2 (QF + ) [ <ref> [P ] </ref> [ surj where [P ] are equations for all polytime functions, and in this sense we are working in a subsystem of L 2 (QF + ) [ [P ] [ surj. Later we will show that L p 2 (A) proves the convergence of all polytime functions. We do not have induction as a general rule or axiom in L p 2 (A), but we can express that induction holds up to a specific number, u.
Reference: [Pi] <author> T. Pitassi, </author> <title> "The Efficiency of Weak Formal Systems", </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1992. </year>
Reference: [PBI] <author> T. Pitassi, P. Beame, R. Impagliazzo, </author> <title> "Exponential Lower Bounds for the Pigeonhole Principle", </title> <type> TR 257/91, </type> <institution> Department of Computer Science, University of Toronto. </institution>
Reference-contexts: Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi <ref> [PBI] </ref>, [PU]. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU].
Reference: [PU] <author> T. Pitassi, A. Urquhart, </author> <title> "The Complexity of the Hajos Calculus", </title> <booktitle> presented at the Workshop on Feasible Mathematics II, </booktitle> <institution> Mathematical Sciences Institute, Cornell University, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Further work in this area is by Krajicek, Pudlak, and Takeuti, for example [KPT], [KT]; by Allen [Al]; Clote [CT]; and Pitassi [PBI], <ref> [PU] </ref>. See also Ferreira [Fe] for earlier work in this area. We specifically follow the work of Cook and Urquhart [CU].
Reference: [Ri] <author> R. W. Ritchie, </author> <title> "Classes of Predictably Computable Functions", </title> <journal> Transactions of the American Mathematical Society, v. </journal> <volume> 106, </volume> <year> 1963. </year>
Reference: [Ro] <author> R. M. Robinson, </author> <title> "An essentially undecidable axiom system", </title> <booktitle> Proceedings of the International Congress of Mathematicians v. 1, </booktitle> <address> Cambridge, MA, </address> <year> 1950. </year>
Reference-contexts: We refer to the model-theoretic ideas of Ignjatovic [Ig] in one of the proofs below. The presence of the surjectivity principle in these second order systems is a binary-successors analogue to starting with Robinson's small subsystem Q of Peano Arithmetic <ref> [Ro] </ref>; as discussed by Nelson [N], this system has no induction rule. Buss comments [B, p. 210] that Wilkie and Nelson independently proved that the bounded arithmetic systems S i 2 are predicative in the sense that they can be interpreted in Q.
Reference: [R] <author> H. E. Rose, Subrecursion: </author> <title> functions and hierarchies, Oxford Logic Guides 9, </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1984. </year> <month> - 163 </month> - 
Reference-contexts: For formula ff, write ff P for the proposition obtained by uniformly replacing atomic formulas of ff with propositional letters. (Propositional Implication) If ff P j= fi P and ` ff, then conclude fi. Here j= is propositional entailment. (Instantiation) If ` ff [x; a], then ` ff <ref> [r; t] </ref> for any terms r and t of the appropriate sort. 10.1.1 PV BC preliminaries We frequently introduce function symbols as in S7 and simultaneously state the relevant predicative recursion axioms directly as written in A6, avoiding the cumbersome notation R [g; h 0 ; h 1 ]. <p> The letters i, j, k, l, d are not symbols in the logic but are meta-symbols standing in for constant values in f0; 1g. As before, xi abbreviates s i (x). When we write ff <ref> [r; t] </ref> for a formula ff, we mean that the terms r and t are substituted for the free variables of ff (and all the free variables of ff are so replaced). 8A is the closure of formulas in A by universal quantifiers.
Reference: [S] <author> A. Seth, </author> <title> "There is no Recursive Axiomatization for Feasible Functionals of Type 2" in Proceedings of Logic in Computer Science, </title> <note> 1992 (to appear). </note>
Reference: [So] <author> R. Soare, </author> <title> Recursively Enumerable Sets and Degrees, </title> <booktitle> Series: Perspectives in Mathematical Logic, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: [T] <author> G. J. Tourlakis, </author> <title> Computability, </title> <address> Reston, </address> <year> 1984. </year>
Reference-contexts: For formula ff, write ff P for the proposition obtained by uniformly replacing atomic formulas of ff with propositional letters. (Propositional Implication) If ff P j= fi P and ` ff, then conclude fi. Here j= is propositional entailment. (Instantiation) If ` ff [x; a], then ` ff <ref> [r; t] </ref> for any terms r and t of the appropriate sort. 10.1.1 PV BC preliminaries We frequently introduce function symbols as in S7 and simultaneously state the relevant predicative recursion axioms directly as written in A6, avoiding the cumbersome notation R [g; h 0 ; h 1 ]. <p> The letters i, j, k, l, d are not symbols in the logic but are meta-symbols standing in for constant values in f0; 1g. As before, xi abbreviates s i (x). When we write ff <ref> [r; t] </ref> for a formula ff, we mean that the terms r and t are substituted for the free variables of ff (and all the free variables of ff are so replaced). 8A is the closure of formulas in A by universal quantifiers.
Reference: [TD] <author> A. Troelstra, D. van Dalen, </author> <title> Constructivism in Mathematics: an introduction, </title> <booktitle> Series: Studies in Logic and the Foundations of Mathematics, v. </booktitle> <volume> 121, </volume> <editor> ed. Barwise et al., </editor> <publisher> North-Holland. </publisher> - <pages> 164 </pages> - 
Reference-contexts: At a more general level, the idea of introducing feasibility considerations into logic is a radical extension of the program of constructive mathematics [H], [Bi], <ref> [TD] </ref>. Nelson's work itself is in the "nominalist" philosophy which is highly formalist and, while not finitist, is much stricter than the intuitionistic view.
References-found: 64

