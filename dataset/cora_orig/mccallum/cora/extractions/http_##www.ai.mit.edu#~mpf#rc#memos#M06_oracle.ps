URL: http://www.ai.mit.edu/~mpf/rc/memos/M06_oracle.ps
Refering-URL: 
Root-URL: 
Email: http://www.ai.mit.edu/~mpf  josie@ai.mit.edu  
Title: Relativized separation of reversible and irreversible space-time complexity classes WORKING DRAFT MANUSCRIPT Revision: 1.35  
Author: Michael P. Frank M. Josephine Ammer 
Note: Revision Date: 1997/04/16 17:28:15 GMT Typeset  A current version is available online at http://www.ai.mit.edu/~mpf/rc/memos/M06 oracle.html  
Date: Started February 28, 1997.  July 10, 1997.  
Address: 545 Technology Sq. Cambridge, MA 02139  
Affiliation: MIT AI Lab  
Pubnum: MIT Reversible Computing Project Memo #M6  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Theodore Baker, John Gill, and Robert Solovay. </author> <title> Relativizations of the P =?N P question. </title> <journal> SIAM J. Computing, </journal> <volume> 4(4) </volume> <pages> 431-442, </pages> <month> December </month> <year> 1975. </year>
Reference-contexts: Traditionally (as in <ref> [1] </ref>), one way to indicate that such an equivalence might be difficult to prove is to show that if the machine model defining each class is augmented with the ability to perform a new type of operation (a query to a so-called "oracle"), then the classes may become provably either equal <p> already have been stored, because either it was not pebbled in direction D in which case it was stored originally, or it was pebbled in direction D in which case the first query involving it must have 20 Given description d of the form described in the text, Let q <ref> [1] </ref> : : : q [t] be a table of node values, initially all NULL. Initialize all q [j]'s not pebbled in direction D, as given by d. <p> Acknowledgments Thanks to Dan Spielman for his lectures in the Advanced Complexity Theory course at MIT, especially for his excellent explanation of the Baker/Gill/Solovay relativized separation of P and NP <ref> [1] </ref>, from which our proof draws some ideas. Gratitude to Alain Tapp of the University of Montreal for visiting us, telling us about his own work on reversible computing theory including [10], and commenting on an early version of our proof idea.
Reference: [2] <author> C. H. Bennett. </author> <title> Logical reversibility of computation. </title> <journal> IBM J. Research and Development, </journal> <volume> 6 </volume> <pages> 525-532, </pages> <year> 1973. </year> <month> 26 </month>
Reference-contexts: But since we do not yet have much experience with algorithms for and analysis of 3-D parallel mesh models of computation, we start by considering the more traditional serial computational models, such as Turing machines and RAM machines. Previous work by Bennett <ref> [2] </ref> and Lange/McKenzie/Tapp [10] has shown that reversible machines can always imitate the time-efficiency or space-efficiency of traditional computing models, when the two kinds of efficiency are studied separately. However, when space and time requirements are taken into account simultaneously, we conjecture that reversibility necessarily incurs inefficiencies. <p> Reportedly, a paper by Lecerf '63 [11] first established that reversible Turing machines are universal. (Lecerf's paper was not cited in English-language reversible computing literature until recently.) Bennett '73 <ref> [2] </ref> rediscovered the universality result by describing a linear-time (but space-inefficient) simulation of irreversible Turing machines by reversible ones. Coppersmith and Grossman '75 [5] proved a result in group theory which implied that reversible circuits only 1 bit wider than their input can still compute arbitary boolean functions. <p> Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi [17, 16, 14] characterized the benefits of partial reversibility. Most recently, Lange, McKenzie, and Tapp [10] showed that linear-space reversible simulations of Turing machines are possible. Comparisons. Although the Bennett and Lange et al. results <ref> [2, 10] </ref> showed that linear time or space simulations of irreversible Turing machines by reversible ones are indeed possible, to our knowledge the current paper is the first to address the question of whether a general reversible simulation can take both 4 In the configuration graphs of irreversible machines, configurations may <p> The intuitive reason for the restriction that S &lt; o T is that for S 6&lt; o T , a reversible machine could simulate any irreversible one without increasing the space or time complexity, by using Bennett's <ref> [2] </ref> simple expedient of keeping a complete history of all irreversibly erased data. (Doing this efficiently on Turing machines requires an extra tape or stack on which to store the history, but if our model allows multi-tape Turing machines, that is acceptable.) This simulation applies equally well to models with permutation <p> This is done by simply copying the output bit and then running the original computation in reverse until everything but the copied output bit is back to its original state, as Bennett described in <ref> [2] </ref>. This reverse phase of the computation does not increase the order of S or T , but rather only doubles the size of the constant factor c i that is required in the time bound.
Reference: [3] <author> C. H. Bennett. </author> <title> The thermodynamics of computation, a review. </title> <journal> Int'l J. Theoretical Physics, </journal> <volume> 21(12) </volume> <pages> 905-940, </pages> <year> 1982. </year>
Reference-contexts: Continuing through the early 80's, Toffoli and Fredkin developed much reversible circuit theory [22, 8]. Pin '87 [20] showed that reversible finite automata cannot decide all regular languages. Bennett '89 <ref> [3] </ref> introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi [17, 16, 14] characterized the benefits of partial reversibility.
Reference: [4] <author> C. H. Bennett. </author> <title> Time/space trade-offs for reversible computation. </title> <journal> SIAM J. Computing, </journal> <volume> 18(4) </volume> <pages> 766-776, </pages> <year> 1989. </year>
Reference-contexts: To do this, we would like to show how M i can be interpreted as following the rules of Bennett's reversible "pebble game," introduced in <ref> [4] </ref> and analyzed by Li and Vitanyi in [17]. We briefly describe the game here. See fig. 5 for an illustration. In the pebble game there is a linear list of nodes, which we will identify with our query strings q 1 ; : : : ; q t . <p> We say "usually" because some such queries of this form may not actually correspond to changing a node's 15 A node can be pebbled or unpebbled only if it is node 1 or if the previous node is pebbled. The strategy invented by Bennett <ref> [4] </ref>, illustrated here, was shown by Li and Vitanyi to be optimal [17] in terms of the number of pebbles required. But even with this optimal strategy, to pebble node 2 k we must at some time have more than k nodes pebbled. <p> Except query string 0 is never pebbled, because it is not considered to be a node. The above example shows a pattern of queries similar to the one that would occur if one tried to apply Bennett's <ref> [4] </ref> pebble game strategy. Node 2 is pebbled at time (a) both because of the previous and next queries (triangles) involving node 2. Node 1 is not pebbled at times (b) because both the previous and next queries are of the wrong form.
Reference: [5] <author> Don Coppersmith and Edna Grossman. </author> <title> Generators for certain alternating groups with applications to cryptography. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 29(4) </volume> <pages> 624-627, </pages> <month> December </month> <year> 1975. </year>
Reference-contexts: Coppersmith and Grossman '75 <ref> [5] </ref> proved a result in group theory which implied that reversible circuits only 1 bit wider than their input can still compute arbitary boolean functions. Toffoli '77 [21] showed that reversible cellular automata can simulate irreversible ones in linear time by using an extra spatial dimension.
Reference: [6] <author> Pierluigi Crescenzi and Christos H. Papadimitriou. </author> <title> Reversible simulation of space-bounded computation. </title> <journal> Theoretical Computer Science, </journal> <volume> 143 </volume> <pages> 159-165, </pages> <year> 1995. </year>
Reference-contexts: Continuing through the early 80's, Toffoli and Fredkin developed much reversible circuit theory [22, 8]. Pin '87 [20] showed that reversible finite automata cannot decide all regular languages. Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 <ref> [6] </ref> extended this to nondeterministic machines. Li and Vitanyi [17, 16, 14] characterized the benefits of partial reversibility. Most recently, Lange, McKenzie, and Tapp [10] showed that linear-space reversible simulations of Turing machines are possible. Comparisons.
Reference: [7] <author> Michael P. Frank. </author> <title> Physically-motivated models of computation for complexity theory. Manuscript under development, </title> <month> March </month> <year> 1997. </year> <note> http://www.- ai.mit.edu/~mpf/rc/memos/M05_physical.html. </note>
Reference-contexts: The laws of both classical and quantum mechanics are reversible; the complete description of the microscopic state of a system uniquely determines what state the system was in at some earlier time. In contrast, most models of computation that computer scientists have studied are irreversible. In a separate paper <ref> [7] </ref>, we conjecture that any physically realizable computing architecture, so long as it does not utilize quantum superposition effects, can be simulated with at most constant factor slowdown by a reversible 3-dimensional parallel mesh architecture (like that described in [12], x1.9, pp. 222-236), which is equivalent to a reversible 3-D cellular
Reference: [8] <author> E. F. Fredkin and T. Toffoli. </author> <title> Conservative logic. </title> <journal> Int'l J. Theoretical Physics, </journal> 21(3/4):219-253, 1982. 
Reference-contexts: Toffoli '77 [21] showed that reversible cellular automata can simulate irreversible ones in linear time by using an extra spatial dimension. Continuing through the early 80's, Toffoli and Fredkin developed much reversible circuit theory <ref> [22, 8] </ref>. Pin '87 [20] showed that reversible finite automata cannot decide all regular languages. Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines.
Reference: [9] <author> R. Landauer. </author> <title> Irreversibility and heat generation in the computing process. </title> <journal> IBM J. Research and Development, </journal> <volume> 5 </volume> <pages> 183-191, </pages> <year> 1961. </year>
Reference-contexts: It seems likely that similar techniques might be used to show that a related problem without an oracle, such as searching through an incompressible graph, might allow a provable separation of reversible and irreversible space-time complexity classes. 2 Related Work Brief history of reversible computing theory. Rolf Landauer '61 <ref> [9] </ref> was probably the first to point out that irreversible computer operations cause unavoidable energy dissipation due to the laws of thermodynamics, a fact that has been the primary motivation for the study of reversible models.
Reference: [10] <author> Klaus-Jorn Lange, Pierre McKenzie, and Alain Tapp. </author> <title> Reversible space equals deterministic space. </title> <type> Manuscript, </type> <month> December </month> <year> 1996. </year> <note> To be published in proc. 12th Annual IEEE Conf. on Computational Complexity (CCC '97). </note>
Reference-contexts: But since we do not yet have much experience with algorithms for and analysis of 3-D parallel mesh models of computation, we start by considering the more traditional serial computational models, such as Turing machines and RAM machines. Previous work by Bennett [2] and Lange/McKenzie/Tapp <ref> [10] </ref> has shown that reversible machines can always imitate the time-efficiency or space-efficiency of traditional computing models, when the two kinds of efficiency are studied separately. However, when space and time requirements are taken into account simultaneously, we conjecture that reversibility necessarily incurs inefficiencies. <p> Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi [17, 16, 14] characterized the benefits of partial reversibility. Most recently, Lange, McKenzie, and Tapp <ref> [10] </ref> showed that linear-space reversible simulations of Turing machines are possible. Comparisons. <p> Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi [17, 16, 14] characterized the benefits of partial reversibility. Most recently, Lange, McKenzie, and Tapp [10] showed that linear-space reversible simulations of Turing machines are possible. Comparisons. Although the Bennett and Lange et al. results <ref> [2, 10] </ref> showed that linear time or space simulations of irreversible Turing machines by reversible ones are indeed possible, to our knowledge the current paper is the first to address the question of whether a general reversible simulation can take both 4 In the configuration graphs of irreversible machines, configurations may <p> Thus, whenever S 6&lt; o T , we can show that RST A = ST A for any permutation oracle A, so it would be impossible for our theorem to cover that case. Similarly, if T 6&lt; o 2 S , then the simulation technique of Lange et al. <ref> [10] </ref> can be used (with self-reversible oracles) without decreasing efficiency since its worst-case time for simulations that halt is O (2 S ), and so in that case also, the reversible and irreversible space-time classes are equal, and our theorem would not apply. <p> Also Lange et al. <ref> [10] </ref> have shown how to characterize reversible Turing machines by local restrictions on their transition function, so that in an enumeration of Turing machines one can effectively identify reversible ones. <p> Gratitude to Alain Tapp of the University of Montreal for visiting us, telling us about his own work on reversible computing theory including <ref> [10] </ref>, and commenting on an early version of our proof idea. Thanks very much to Michael Sipser for his expert guidance and repeated encouragement, and especially for suggesting the use of an incompressibility argument to make the proof go through.
Reference: [11] <author> Y. Lecerf. </author> <title> Machines de turing reversibles. insolubilite recursive en n 2 N de l'equation u = n , ou est un "isomorphisme de codes". </title> <journal> Comptes Rendus hebdomadaires des seances de l'academie des sciences, </journal> <volume> 257 </volume> <pages> 2597-2600, </pages> <year> 1963. </year>
Reference-contexts: Rolf Landauer '61 [9] was probably the first to point out that irreversible computer operations cause unavoidable energy dissipation due to the laws of thermodynamics, a fact that has been the primary motivation for the study of reversible models. Reportedly, a paper by Lecerf '63 <ref> [11] </ref> first established that reversible Turing machines are universal. (Lecerf's paper was not cited in English-language reversible computing literature until recently.) Bennett '73 [2] rediscovered the universality result by describing a linear-time (but space-inefficient) simulation of irreversible Turing machines by reversible ones.
Reference: [12] <author> F. Thomson Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays Trees Hypercubes. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, California, </address> <year> 1992. </year>
Reference-contexts: In a separate paper [7], we conjecture that any physically realizable computing architecture, so long as it does not utilize quantum superposition effects, can be simulated with at most constant factor slowdown by a reversible 3-dimensional parallel mesh architecture (like that described in <ref> [12] </ref>, x1.9, pp. 222-236), which is equivalent to a reversible 3-D cellular automaton. This model consists of a grid of finite processors that communicate locally with their immediate neighbors. See [18] for a discussion of the ability of reversible cellular automata to model physics.
Reference: [13] <author> Robert Y. Levine and Alan T. Sherman. </author> <title> A note on Bennett's time-space tradeoff for reversible computation. </title> <journal> SIAM J. Computing, </journal> <volume> 19(4) </volume> <pages> 673-677, </pages> <year> 1990. </year>
Reference-contexts: value of n i for which a given reversible machine M i necessarily fails if it takes space o (S log (T =S)). (But one must exist.) The most space-efficient general linear-time reversible simulation technique currently known was provided by Bennett ([4], p. 770), and analyzed by Levine and Sherman <ref> [13] </ref> to take space O (S (T =S) 1=(0:58 lg (T=S)) ). Bennett's technique relativizes easily to machines with self-reversible oracles. Thus we see there is still a gap between the known lower and upper bounds.
Reference: [14] <author> Ming Li, John Tromp, and Paul Vitanyi. </author> <title> Reversible simulation of irreversible computation by pebble games. </title> <note> Manuscript submitted to Physica D, 1997. http://www.cwi.nl/~paulv/physics.html. </note>
Reference-contexts: Pin '87 [20] showed that reversible finite automata cannot decide all regular languages. Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi <ref> [17, 16, 14] </ref> characterized the benefits of partial reversibility. Most recently, Lange, McKenzie, and Tapp [10] showed that linear-space reversible simulations of Turing machines are possible. Comparisons.
Reference: [15] <author> Ming Li and Paul Vitanyi. </author> <title> An Introduction to Kolmogorov Complexity and Its Applications. Graduate Texts in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> 2nd edition, </address> <year> 1997. </year> <month> 27 </month>
Reference-contexts: After an oracle call, the previous oracle tape contents can be uniquely determined by applying the inverse mapping A 1 . In self-reversible oracles, A = A 1 . was inspired by the discussions of incompressibility in Li and Vitanyi's excellent book on Kolmogorov complexity <ref> [15] </ref>. Description systems and compressibility. A description system s is a function s : f0; 1g fl ! f0; 1g fl from bit-strings to bit-strings, that is, from descriptions to the bit-strings that they describe. <p> Our appreciation to Ming Li and Paul Vitanyi for their earlier analysis of the pebble game [17] on which the present result depends, and for their excellent writings on the incompressibility method in their book on Kolmogorov complexity <ref> [15] </ref>, which we found extremely helpful. And finally, many thanks to Tom Knight, Norm Margolus and all my fellow students on the MIT Reversible Computing Project for providing a stimulating and supportive work environment.
Reference: [16] <author> Ming Li and Paul M. B. Vitanyi. </author> <title> Reversibility and adiabatic computation: trading time and space for energy. </title> <journal> Proc. Royal Society of London, Ser. A, </journal> <volume> 452 </volume> <pages> 1-21, </pages> <year> 1996. </year>
Reference-contexts: Pin '87 [20] showed that reversible finite automata cannot decide all regular languages. Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi <ref> [17, 16, 14] </ref> characterized the benefits of partial reversibility. Most recently, Lange, McKenzie, and Tapp [10] showed that linear-space reversible simulations of Turing machines are possible. Comparisons.
Reference: [17] <author> Ming Li and Paul M. B. Vitanyi. </author> <title> Reversible simulation of irreversible computation. </title> <booktitle> In Proc. 11th IEEE Conference on Computational Complexity, </booktitle> <address> Philadelphia, Pennsylvania, </address> <month> May 24-27, </month> <year> 1996. </year>
Reference-contexts: Pin '87 [20] showed that reversible finite automata cannot decide all regular languages. Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi <ref> [17, 16, 14] </ref> characterized the benefits of partial reversibility. Most recently, Lange, McKenzie, and Tapp [10] showed that linear-space reversible simulations of Turing machines are possible. Comparisons. <p> In the cases where the reversible machine takes too much space, we prove this by equating the machine's operation with the "pebble game" for which Li and Vitanyi <ref> [17] </ref> have already proven lower bounds, and by proving that if the machine does not take too much space, then we can build a shorter description of the chain of nodes using the machine's small intermediate configurations, thus contradicting our choice of an incompressible chain. 4.1 Special definitions. <p> To do this, we would like to show how M i can be interpreted as following the rules of Bennett's reversible "pebble game," introduced in [4] and analyzed by Li and Vitanyi in <ref> [17] </ref>. We briefly describe the game here. See fig. 5 for an illustration. In the pebble game there is a linear list of nodes, which we will identify with our query strings q 1 ; : : : ; q t . <p> The strategy invented by Bennett [4], illustrated here, was shown by Li and Vitanyi to be optimal <ref> [17] </ref> in terms of the number of pebbles required. But even with this optimal strategy, to pebble node 2 k we must at some time have more than k nodes pebbled. <p> Therefore, we can simply assume, without loss of generality, that M i does always halt in a clean state with all pebbles removed. Li and Vitanyi's analysis of the pebble game <ref> [17] </ref> showed that no strategy can win the game for 2 k nodes or more without at some time having more than k nodes pebbled at once. <p> Now, Li and Vitanyi have shown <ref> [17] </ref> that any system that obeys the rules of the pebble game and that eventually pebbles a node at or beyond node 2 k must at some time have at least k + 1 nodes pebbled at once. <p> Thanks very much to Michael Sipser for his expert guidance and repeated encouragement, and especially for suggesting the use of an incompressibility argument to make the proof go through. Our appreciation to Ming Li and Paul Vitanyi for their earlier analysis of the pebble game <ref> [17] </ref> on which the present result depends, and for their excellent writings on the incompressibility method in their book on Kolmogorov complexity [15], which we found extremely helpful.
Reference: [18] <author> N. H. Margolus. </author> <title> Physics and Computation. </title> <type> PhD thesis, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <year> 1988. </year>
Reference-contexts: This model consists of a grid of finite processors that communicate locally with their immediate neighbors. See <ref> [18] </ref> for a discussion of the ability of reversible cellular automata to model physics. Moreover, we expect that this model can be efficiently implemented physically on arbitrarily large scales, as technology improves, at least until gravity 2 or a lack of raw material prohibits further scaling.
Reference: [19] <author> Norman Margolus and Lev B. Levitin. </author> <title> The maximum speed of dynamical evolution. </title> <editor> In T. Toffoli, M. Biafore, and J. Le~ao, editors, </editor> <booktitle> PhysComp96, </booktitle> <pages> pages 208-211. </pages> <institution> New England Complex Systems Institute, </institution> <year> 1996. </year> <note> Also online in the InterJournal. </note>
Reference-contexts: It is expected that experience with such computing models will facilitate the eventual design of computers that approach the maximum speeds physically possible. See <ref> [19] </ref> for one kind of speed limit. The laws of both classical and quantum mechanics are reversible; the complete description of the microscopic state of a system uniquely determines what state the system was in at some earlier time.
Reference: [20] <author> J. E. Pin. </author> <title> On the languages accepted by finite reversible automata. </title> <editor> In Thomas Ottman, editor, </editor> <booktitle> Automata, Languages and Programming, Proc. 14th Int'l Colloq. (ICALP), volume 267 of Lecture Notes in Computer Science, </booktitle> <pages> pages 237-249. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Toffoli '77 [21] showed that reversible cellular automata can simulate irreversible ones in linear time by using an extra spatial dimension. Continuing through the early 80's, Toffoli and Fredkin developed much reversible circuit theory [22, 8]. Pin '87 <ref> [20] </ref> showed that reversible finite automata cannot decide all regular languages. Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines. Li and Vitanyi [17, 16, 14] characterized the benefits of partial reversibility.
Reference: [21] <author> Tommaso Toffoli. </author> <title> Computation and construction universality of reversible cellular automata. </title> <journal> J. Computer and System Sciences, </journal> <volume> 15 </volume> <pages> 213-231, </pages> <year> 1977. </year>
Reference-contexts: Coppersmith and Grossman '75 [5] proved a result in group theory which implied that reversible circuits only 1 bit wider than their input can still compute arbitary boolean functions. Toffoli '77 <ref> [21] </ref> showed that reversible cellular automata can simulate irreversible ones in linear time by using an extra spatial dimension. Continuing through the early 80's, Toffoli and Fredkin developed much reversible circuit theory [22, 8]. Pin '87 [20] showed that reversible finite automata cannot decide all regular languages.
Reference: [22] <author> Tommaso Toffoli. </author> <title> Reversible computing. </title> <type> Technical memo MIT/LCS/TM-151, </type> <institution> MIT Lab for Computer Science, </institution> <month> February </month> <year> 1980. </year> <note> Out of print; available from NTIS. </note>
Reference-contexts: Toffoli '77 [21] showed that reversible cellular automata can simulate irreversible ones in linear time by using an extra spatial dimension. Continuing through the early 80's, Toffoli and Fredkin developed much reversible circuit theory <ref> [22, 8] </ref>. Pin '87 [20] showed that reversible finite automata cannot decide all regular languages. Bennett '89 [3] introduced a new, more space-efficient reversible simulation technique for Turing machines. Crescenzi and Papadimitriou '95 [6] extended this to nondeterministic machines.
Reference: [23] <author> Carlin J. Vieri. Pendulum: </author> <title> A reversible computer architecture. </title> <type> Master's thesis, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <year> 1995. </year> <month> 28 </month>
Reference-contexts: Self-reversibility ensures that it is easy for a machine to undo an oracle operation, just as with the normal primitive operations of a typical reversible machine architecture, such as reversible Turing machines or the Pendulum RISC instruction set being developed in our project <ref> [23] </ref>. Thus, by using a self-reversible oracle, we maximize the chance that our result might carry over to normal reversible machine models, in which all primitive operations can be trivially undone. To make things more concrete, we will define our oracle-calling protocol as follows.
References-found: 23

