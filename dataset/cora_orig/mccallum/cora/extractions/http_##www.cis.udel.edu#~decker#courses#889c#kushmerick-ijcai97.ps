URL: http://www.cis.udel.edu/~decker/courses/889c/kushmerick-ijcai97.ps
Refering-URL: http://www.cis.udel.edu/~decker/courses/889c.html
Root-URL: http://www.cis.udel.edu
Email: fnick, weldg@cs.washington.edu  bobd@netbot.com  
Title: IJCAI-97 Wrapper Induction for Information Extraction  
Author: Nicholas Kushmerick Daniel S. Weld Robert Doorenbos 
Address: Box 352350 Seattle WA 98195-2350 USA  4530 Union Bay Pl. NE, Suite 208 Seattle WA 98105 USA  
Affiliation: Department of Computer Science Engineering University of Washington,  NETbot, Inc.  
Abstract: Many Internet information resources present relational data|telephone directories, product catalogs, etc. Because these sites are formatted for people, mechanically extracting their content is difficult. Systems using such resources typically use hand-coded wrappers, procedures to extract data from information resources. We introduce wrapper induction, a method for automatically constructing wrappers, and identify hlrt, a wrapper class that is efficiently learnable, yet expressive enough to handle 48% of a recently surveyed sample of Internet resources. We use PAC analysis to bound the problem's sample complexity, and show that the system degrades gracefully with imperfect labeling knowledge.
Abstract-found: 1
Intro-found: 1
Reference: [ Angluin, 1982 ] <author> D. Angluin. </author> <title> Inference of reversible languages. </title> <journal> J. ACM, </journal> <volume> 29(3) </volume> <pages> 741-65, </pages> <year> 1982. </year>
Reference-contexts: Though our focus is on Internet resources, these learned delim-iters need not be html tags, but can be arbitrary text. hlrt corresponds essentially to a class of finite-state automata, so wrapper induction is similar to FSA induction (e.g., <ref> [ Angluin, 1982 ] </ref> ). Since FSAs run in linear time, hlrt satisfies the desire that wrappers be fast. However, since wrappers are used for parsing (rather than just classification), the learned FSA must have a specific state topology.
Reference: [ Arens et al., 1996 ] <author> Y. Arens, C. Knoblock, C. Chee, & C. Hsu. SIMS: </author> <title> Single interface to multiple sources. </title> <type> TR RL-TR-96-118, </type> <institution> USC Rome Labs, </institution> <year> 1996. </year>
Reference-contexts: But because these sites are designed for people, the content is formatted for human browsing (e.g. an html page), rather than for use by a program. Therefore, software systems using such resources (e.g., heterogeneous database systems <ref> [ Chawathe et al., 1994; Arens et al., 1996 ] </ref> or software agents [ Etzioni & Weld, 1994; Kirk et al., 1995 ] ) must translate query responses to relational form. Wrappers are commonly used as such translators.
Reference: [ Ashish & Knoblock, 1997 ] <author> N. Ashish & C. Knoblock. </author> <title> Semiautomatic wrapper generation for Internet information sources. </title> <booktitle> In Proc. Cooperative Information Systems, </booktitle> <year> 1997. </year>
Reference-contexts: From a formal perspective, in Sec. 1 we discussed the relationship between hlrt and FSA induction. From an application perspective, our work is similar to <ref> [ Ashish & Knoblock, 1997 ] </ref> . Their system learns a more expressive wrapper class than hlrt, but relies on many heuristics that are specific to html. In contrast, our sys-tems treats html tags just as ordinary text.
Reference: [ Blumer et al., 1987 ] <author> A. Blumer, A. Ehrenfeucht, D. Haus-sler, & M. Warmuth. </author> <title> Occam's razor. </title> <journal> Information Processing, </journal> <volume> 24(6) </volume> <pages> 377-80, </pages> <year> 1987. </year>
Reference-contexts: This bound is relatively tight compared to typical PAC results. For example, the number of possible hlrt wrappers is infinite, but our bound does not depend on the number of wrappers. Thus clearly the stated bound is tighter than obtainable under simple PAC models (e.g., <ref> [ Valiant, 1984; Blumer et al., 1987 ] </ref> ), in which sample complexity grows with the number of hypotheses. The bound is also tighter than obtainable using Vapnik-Chervonenkis analysis [ Haussler, 1988 ] .
Reference: [ Chawathe et al., 1994 ] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ireland, Y. Papakonstantinou, J. Ullman, & J. Widom. </author> <title> The TSIMMIS project: Integration of heterogeneous information sources. </title> <booktitle> In Proc. IPSJ Conf, </booktitle> <year> 1994. </year>
Reference-contexts: But because these sites are designed for people, the content is formatted for human browsing (e.g. an html page), rather than for use by a program. Therefore, software systems using such resources (e.g., heterogeneous database systems <ref> [ Chawathe et al., 1994; Arens et al., 1996 ] </ref> or software agents [ Etzioni & Weld, 1994; Kirk et al., 1995 ] ) must translate query responses to relational form. Wrappers are commonly used as such translators.
Reference: [ Cowie & Lehnert, 1996 ] <author> J. Cowie & W. Lehnert. </author> <title> Information extraction. </title> <journal> C. ACM, </journal> <volume> 39(1) </volume> <pages> 80-101, </pages> <year> 1996. </year>
Reference-contexts: Wrappers are typically hand-coded; unfortunately, hand-coding is tedious and error-prone. We seek an automated solution to this problem of constructing wrappers. Natural language processing has been used for similar information-extraction tasks; see <ref> [ Cowie & Lehnert, 1996 ] </ref> for a recent summary. But many information resources do not exhibit the rich grammatical structure such techniques are designed to exploit. Moreover, linguistic approaches tend to be slow, while ideally wrappers should execute quickly, because they are used on-line to satisfy users' queries.
Reference: [ DARPA, 1995 ] <author> DARPA. </author> <booktitle> Proc. 6th Message Understanding Conference. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, </address> <year> 1995. </year>
Reference-contexts: A second related application is shopbot [ Doorenbos et al., 1997 ] . Though in many respects shopbot is more ambitious, its wrapper language is less expressive than hlrt. Finally, our recognition knowledge is similar to work on semantically labeling natural text, such as the MUC-6 "Named Entity" task <ref> [ DARPA, 1995 ] </ref> , though relatively little work has been done on corroborating multiple such knowledge sources. 9 Conclusions Wrapper induction is a new technique for automatically constructing wrappers. We have made three contributions. First, we have formalized the wrapper construction problem as induction.
Reference: [ Doorenbos et al., 1997 ] <author> R. Doorenbos, O. Etzioni, & D. Weld. </author> <title> A scalable comparison-shopping agent for the World-Wide Web. </title> <booktitle> In Proc. Autonomous Agents, </booktitle> <year> 1997. </year>
Reference-contexts: In contrast, our sys-tems treats html tags just as ordinary text. Moreover, their system requires human intervention to correct its mistakes, while our corroboration process is intended to correct mistakes automatically. A second related application is shopbot <ref> [ Doorenbos et al., 1997 ] </ref> . Though in many respects shopbot is more ambitious, its wrapper language is less expressive than hlrt.
Reference: [ Etzioni & Weld, 1994 ] <author> O. Etzioni & D. Weld. </author> <title> A softbot-based interface to the Internet. </title> <journal> C. ACM, </journal> <volume> 37(7) </volume> <pages> 72-6, </pages> <year> 1994. </year>
Reference-contexts: But because these sites are designed for people, the content is formatted for human browsing (e.g. an html page), rather than for use by a program. Therefore, software systems using such resources (e.g., heterogeneous database systems [ Chawathe et al., 1994; Arens et al., 1996 ] or software agents <ref> [ Etzioni & Weld, 1994; Kirk et al., 1995 ] </ref> ) must translate query responses to relational form. Wrappers are commonly used as such translators. A wrapper is a procedure, specific to a single information resource, that translates a query response to relational form.
Reference: [ Etzioni, 1996 ] <author> O. Etzioni. </author> <title> The World Wide Web: quagmire or gold mine? C. </title> <journal> ACM, </journal> <volume> 37(7) </volume> <pages> 65-8, </pages> <year> 1996. </year>
Reference-contexts: Wrapper induction is a new technique for automatically constructing wrappers. Our system learns a wrapper by generalizing from example query responses. A PAC model bounds the number of examples needed to generate a satisfactory wrapper. The inductive algorithm requires an oracle to label examples; we solve this labeling problem <ref> [ Etzioni, 1996 ] </ref> by composing oracles from heuristic knowledge, and we demonstrate that our system degrades gracefully with imperfect heuristics.
Reference: [ Finin et al., 1994 ] <author> T. Finin, R. Fritzson, D. McKay, & R. McEntire. </author> <title> KQML: A language and protocol for knowledge and information exchange. In Knowledge Building and Knowledge Sharing. </title> <publisher> Ohmsha and IOS Press, </publisher> <year> 1994. </year>
Reference-contexts: While data interchange protocols (e.g. kqml <ref> [ Finin et al., 1994 ] </ref> ) have been proposed to address these issues, they require cooperation on the part of information providers, and such cooperation is rare. From a formal perspective, in Sec. 1 we discussed the relationship between hlrt and FSA induction.
Reference: [ Haussler, 1988 ] <author> D. Haussler. </author> <title> Quantifying inductive bias. </title> <journal> Artificial Intelligence, </journal> <volume> 36(2) </volume> <pages> 177-221, </pages> <year> 1988. </year>
Reference-contexts: Thus clearly the stated bound is tighter than obtainable under simple PAC models (e.g., [ Valiant, 1984; Blumer et al., 1987 ] ), in which sample complexity grows with the number of hypotheses. The bound is also tighter than obtainable using Vapnik-Chervonenkis analysis <ref> [ Haussler, 1988 ] </ref> .
Reference: [ Kearns & Vazirani, 1994 ] <author> M. Kearns & U. Vazirani. </author> <title> An introduction to computational learning theory. </title> <publisher> MIT, </publisher> <year> 1994. </year>
Reference-contexts: Appendix A formally describes the conditions under which an hlrt wrapper is consistent with a labeled page. 5 PAC analysis PAC analysis answers the question, `How many examples must a learner see to be confident that its hypothesis is good enough|i.e., to be probably approximately correct ?'; see <ref> [ Kearns & Vazirani, 1994 ] </ref> for an introduction. A PAC model defines an error metric over hypothesis: E (w) is the probability that hypothesis w will incorrectly label the next instance.
Reference: [ Kirk et al., 1995 ] <author> T. Kirk, A. Levy, Y. Sagiv, & D. Srivas-tava. </author> <title> The Information Manifold. </title> <booktitle> In AAAI Spring Symposium: Information Gathering from Heterogeneous, Distributed Environments, </booktitle> <pages> pp. 85-91, </pages> <year> 1995. </year>
Reference-contexts: But because these sites are designed for people, the content is formatted for human browsing (e.g. an html page), rather than for use by a program. Therefore, software systems using such resources (e.g., heterogeneous database systems [ Chawathe et al., 1994; Arens et al., 1996 ] or software agents <ref> [ Etzioni & Weld, 1994; Kirk et al., 1995 ] </ref> ) must translate query responses to relational form. Wrappers are commonly used as such translators. A wrapper is a procedure, specific to a single information resource, that translates a query response to relational form.
Reference: [ Kushmerick, 1997 ] <author> N. Kushmerick. </author> <title> Wrapper Construction for Information Extraction. </title> <type> PhD thesis, </type> <institution> Univ. of Wash-ington, </institution> <year> 1997. </year> <note> In preparation. </note>
Reference-contexts: In the extreme, arbitrary finite-state automata could be used as wrappers. In <ref> [ Kushmerick, 1997 ] </ref> , we analyze this hierarchy in detail. 3 Constructing wrappers by induction The wrapper construction problem is the following: given a supply of example query responses, learn a wrapper for the information resource that generated them. <p> In <ref> [ Kushmerick, 1997 ] </ref> , we prove that: (1) BuildHLRT is sound (if BuildHLRT returns a wrapper, then it is con sistent) and complete (if a consistent wrapper exists, Bui-ldHLRT finds it); and (2) under reasonable assumptions, BuildHLRT runs in time O (KN M S 3 ), where each tuple has <p> The learning task is then analyzed in order to bound the number of examples which ensure that Pr [E (w) &gt; *] &lt; ffi, for any given accuracy parameter * and confidence parameter ffi. In <ref> [ Kushmerick, 1997 ] </ref> , we prove the following theorem. Theorem 1 (hlrt sample complexity) Suppose BuildHLRT (E) returns wrapper w, where E contains collectively T tuples, each with K attributes. <p> The bound is also tighter than obtainable using Vapnik-Chervonenkis analysis [ Haussler, 1988 ] . To understand these results, recall that BuildHLRT is essentially computing common prefixes and suffixes of sets of strings, which are highly constrained after relatively few examples; see <ref> [ Kushmerick, 1997 ] </ref> for a detailed discussion. 6 Composing oracles A key to induction is an oracle that labels examples. So far, we have assumed that LabelOracle is provided as in put. We now describe how to compose LabelOracle from modular heuristic knowledge, which we call recognizers . <p> These TPs are then used to categorize the remaining instances as either necessarily FPs (meaning they can be ignored), or possibly TPs (meaning they are inserted using `'). In <ref> [ Kushmerick, 1997 ] </ref> , we de scribe Corrob in more detail and prove that it is correct. Handling mistakes. Note that Corrob's output might contain attributes that are missing (`?' indicates attributes falsely rejected by their recognizers) or ambiguous (`' indicates under-constrained attributes). <p> In practice, we find that is extremely close to zero and R is relatively small, and thus ambiguity has a negligible effect on the PAC results. In <ref> [ Kushmerick, 1997 ] </ref> , we compare this noise model to others in the PAC literature. 7 Empirical evaluation In this section, we present preliminary evidence demonstrating the feasibility of hlrt learning.
Reference: [ Valiant, 1984 ] <author> L. Valiant. </author> <title> A theory of the learnable. </title> <journal> C. ACM, </journal> <volume> 27(11) </volume> <pages> 1134-42, </pages> <year> 1984. </year>
Reference-contexts: This bound is relatively tight compared to typical PAC results. For example, the number of possible hlrt wrappers is infinite, but our bound does not depend on the number of wrappers. Thus clearly the stated bound is tighter than obtainable under simple PAC models (e.g., <ref> [ Valiant, 1984; Blumer et al., 1987 ] </ref> ), in which sample complexity grows with the number of hypotheses. The bound is also tighter than obtainable using Vapnik-Chervonenkis analysis [ Haussler, 1988 ] .
References-found: 16

