URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-94-12-3.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-94-12-3.html
Root-URL: http://www.cs.man.ac.uk
Title: Variable Delay Timing Analysis of Logic Circuits  
Author: Behnam Bani-Eqbal 
Affiliation: Computer Science University of Manchester  
Pubnum: Technical Report UMCS-94-12-3  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. A. Breuer, A. A. Friedman, </author> <title> Diagnosis and Reliable Design of Digital Systems. </title> <publisher> Computer Science Press, </publisher> <year> 1976. </year>
Reference-contexts: The same algorithms can be used for the timing verification of asynchronous logic circuits, eg hazard detection of combinational circuits, race/oscillation of asynchronous sequential circuits, etc. In min/max logic simulation <ref> [1] </ref> gate delays are specified by a range where the output of a gate is treated as unknown. However, it is well known that the simulation results obtained from min/max are often too pessimistic due to the reconvergence in the circuit [1]. <p> In min/max logic simulation <ref> [1] </ref> gate delays are specified by a range where the output of a gate is treated as unknown. However, it is well known that the simulation results obtained from min/max are often too pessimistic due to the reconvergence in the circuit [1]. It is therefore important to develop algorithms which can accurately model gate delay uncertainty. The recent work in this area closest to our proposal is the Time-Symbolic Simulation work by Ishiura et al [2]. <p> However the unknown states will build up further in the circuit, resulting in pessimistic analysis. This is because the input to several gates may be fanned out from the same gate and therefore have the same delay element <ref> [1] </ref>. As in [2], we solve this problem by having a delay variable for each gate. we can have an expression for the precise time of the occurrence of each edge and we then propagate the edges through the circuit.
Reference: [2] <author> N. Ishiura, M. Takahashi, S. Yajima, </author> <title> Time-Symbolic Simulation for Accurate Timing Verification of Asynchronous Behaviour of Logic Circuits. </title> <booktitle> Proceeding of the 26th ACM/IEEE Design Automation Conference 1989. </booktitle>
Reference-contexts: It is therefore important to develop algorithms which can accurately model gate delay uncertainty. The recent work in this area closest to our proposal is the Time-Symbolic Simulation work by Ishiura et al <ref> [2] </ref>. As in that work, we assign a separate variable to each signal transition (edge) in the simulation. The gate delays translate to algebraic relations between the variables. Since the arrival order of the edges at a gate can be uncertain, so the simulation result of that gate can diverge. <p> The gate delays translate to algebraic relations between the variables. Since the arrival order of the edges at a gate can be uncertain, so the simulation result of that gate can diverge. In <ref> [2] </ref>, branching signal patterns are introduced to deal with this unavoidable problem. However this technique can be improved, as it is often the case that the simulation process further on may not depend on an earlier branching, ie that the some subtrees of the simulation result tree can be identical. <p> However the unknown states will build up further in the circuit, resulting in pessimistic analysis. This is because the input to several gates may be fanned out from the same gate and therefore have the same delay element [1]. As in <ref> [2] </ref>, we solve this problem by having a delay variable for each gate. we can have an expression for the precise time of the occurrence of each edge and we then propagate the edges through the circuit. <p> However we encounter our main problem: there is no queue of edges since their time is uncertain. So the conventional discrete event simulation method does not work. The algorithm used in <ref> [2] </ref> (the T-algorithm) tries all the orderings compatible with the available timing information. This is organised on a gate depth order and results in the branching of the simulation event tree. However nodes in the tree can be identical. <p> We shade in the portions of the waveform where the signal can be either 0 or 1. This displays looks exactly like the output of traditional min/max simulators. 4 Examples We apply our technique to the circuit example described in <ref> [2] </ref>, figure 5. <p> This is done by splicing the feedback lines into new input and output lines. The resulting combinational circuit is verified for the input stimuli by feeding the new input wires values from the state transition diagram. We have done this for the T-flip flop in <ref> [2] </ref> and obtained similar results. 5 5 Conclusions We have introduced a new approach to the accurate timing verification of logic circuits and have shown that the method can be used to detect correctly the presence of hazards in such circuits.
Reference: [3] <author> N. Ishiura, Y. Deguchi, S. Yajima, </author> <title> Coded Time-Symbolic Simulation Using Shared Binary Decision Diagram Proceedings of the 27th ACM/IEEE Design Automation Conference. </title>
Reference-contexts: We have also simulated the more difficult examples from <ref> [3] </ref>, namely the Kanehara-A and the Kanehara-O examples, and found our simulator to produce the correct results. The STSS algorithm can also be applied to the hazard detection of asynchronous circuits. This is done by splicing the feedback lines into new input and output lines.
Reference: [4] <author> B. Aspvall, Y. Shiloach, </author> <title> A Polynomial Algorithm for Solving Systems of Linear Inequalities with Two Variables per Inequality. </title> <journal> SIAM journal of Computing,Vol9,No 4, </journal> <month> Nov </month> <year> 1980. </year>
Reference-contexts: We notice that all the inequalities involve only two variables and are of the special form a &lt; t i t j &lt; b. We solve such a system by the special algorithms described in [5] or <ref> [4] </ref>. We have implemented the STSS algorithms in the `C' language on a SUN SparcSta-tion. We display the signal graphs as traditional signal waveforms. See figure 9 below for an example.
Reference: [5] <author> V. Pratt, </author> <title> Solving systems of inequalities of the form t i t j &lt; a. </title> <type> Unpublished Report, </type> <year> 1978. </year>
Reference-contexts: We notice that all the inequalities involve only two variables and are of the special form a &lt; t i t j &lt; b. We solve such a system by the special algorithms described in <ref> [5] </ref> or [4]. We have implemented the STSS algorithms in the `C' language on a SUN SparcSta-tion. We display the signal graphs as traditional signal waveforms. See figure 9 below for an example.
References-found: 5

