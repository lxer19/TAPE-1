URL: http://www.eecs.umich.edu/~qstout/pap/DMCC91ftcyc.ps
Refering-URL: http://www.eecs.umich.edu/~qstout/papers.html
Root-URL: http://www.cs.umich.edu
Title: Fault Tolerance of the Cyclic Buddy Subcube Location Scheme in Hypercubes (Preliminary Version)  
Author: Marilynn L. Livingston Quentin F. Stout 
Keyword: fault tolerance, subcube location, sub cube allocation, hypercube computer, buddy sys tem, gray-coded system, folded hypercube.  
Address: Edwardsville, IL 62026-1653 Ann Arbor, MI 48109-2122  
Affiliation: Department of Computer Science Elec. Eng. and Computer Science Southern Illinois University University of Michigan  
Note: In Proc. 6th Distributed Memory Computing Conference (1991), IEEE, pp. 34-41.  
Abstract: This paper examines the problem of locating large fault-free subcubes in multiuser hypercube systems. We analyze a new location strategy, the cyclic buddy system, and compare its performance to the buddy system, the gray-coded buddy system, and several variants of them. We show that the cyclic buddy system gives a striking improvement in expected fault tolerance over the above schemes and, since it can easily be implemented in parallel with little overhead, it provides an attractive alternative to these schemes. We also investigate the behavior of these location systems in the folded, or projective, hypercube, and find that the cyclic buddy system, which adapts naturally to this enhancement, significantly outperforms the other schemes. A combination of analytic techniques and simulation is used to examine both worst case and expected case performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Al-Bassam, H. El-Rewini, B. Bose, and T. Lewis, </author> <title> "Efficient serial and parallel subcube recognition in hypercubes", </title> <booktitle> Proc. 5th Distributed Memory Computing Conf. (DMCC5), (1990) pp. </booktitle> <pages> 324-332. </pages>
Reference: [2] <author> A. Al-Dhelaan and B. Bose, </author> <title> "A new strategy for processor allocation in an n-cube multiprocessor", </title> <booktitle> Proc. Int. Phoenix Conf. on Comp. and Comm. </booktitle> <month> (Mar. </month> <year> 1989). </year>
Reference-contexts: Chen and Shin [4] introduced a gray-coded buddy strategy for subcube location that improves upon the buddy strategy, and proposed a multiple gray-coded scheme using d gray codes to effect complete sub-cube recognition. Al-Dhelaan and Bose <ref> [2] </ref> introduced a modified buddy strategy which improves upon the single gray-coded buddy scheme. In [16], we examined several subcube location schemes including multiple buddy and gray-coded buddy schemes, and introduced a new family of location schemes which generalized and improved upon the earlier schemes.
Reference: [3] <author> B. Becker and H. Simon, </author> <title> "How robust is the n-cube?", </title> <journal> Info. and Comp. </journal> <volume> 77 (1988), </volume> <pages> pp. 162-178. </pages>
Reference-contexts: that, for d q = k, DG e (d; q) converges monotonically increasingly to DG fl (k) as d ! 1. (vi ) C e (d; d 1) = K e (d; d 1), (vii ) C e (d; q) = fi (lg d), for fixed d q, (viii ) <ref> [3] </ref>, K e (d; q) = fi (lg d), for fixed d q. 2 d Scheme 6 8 10 12 14 16 18 20 1 buddy 7.8 8.2 8.3 8.3 8.3 8.3 8.3 8.3 8.3 dbuddy 9.5 10.1 10.2 10.3 10.3 10.3 10.3 10.3 10.3 gray 9.3 9.9 10.0 10.1 10.1
Reference: [4] <author> M.S. Chen and K.G. Shin, </author> <title> "Processor allocation in an n-cube multiprocessor using Gray codes", </title> <journal> IEEE Trans. on Computers 36 (1987), </journal> <pages> pp. 1396-1407. </pages>
Reference-contexts: Several authors have studied strategies for the location of subcubes in hypercube multicomputers. Some approaches involve enlarging the set of sub-cubes recognized over that of the buddy system, other approaches involve computation- and/or memory-intensive algorithms for complete subcube recognition. Chen and Shin <ref> [4] </ref> introduced a gray-coded buddy strategy for subcube location that improves upon the buddy strategy, and proposed a multiple gray-coded scheme using d gray codes to effect complete sub-cube recognition. Al-Dhelaan and Bose [2] introduced a modified buddy strategy which improves upon the single gray-coded buddy scheme. <p> In dynamic allocation and de-allocation, however, it can perform quite poorly. Studies of the behavior of subcube allocation in a dynamic situation have been made in <ref> [4, 5, 10] </ref> for the purpose of evaluating various policies governing the selection of which subcube to allocate when there are several available subcubes. Variations of the single buddy system have been suggested which allocate the union of several single buddy systems. <p> The double gray-coded buddy system, first suggested in <ref> [4] </ref>, locates q-subcubes by a pair of gray-coded buddy systems, one which corresponds to the iden tity permutation, and the other which corresponds to the permutation which reverses the order of the bits. 2.3 The Cyclic Buddy System In contrast to the buddy and gray-coded buddy schemes, the location strategy which
Reference: [5] <author> S. Dutt and J.P. Hayes, </author> <title> "Subcube allocation in hypercube computers", </title> <journal> IEEE Trans. on Computers 40 (1991), </journal> <pages> pp. 341-352. </pages>
Reference-contexts: In dynamic allocation and de-allocation, however, it can perform quite poorly. Studies of the behavior of subcube allocation in a dynamic situation have been made in <ref> [4, 5, 10] </ref> for the purpose of evaluating various policies governing the selection of which subcube to allocate when there are several available subcubes. Variations of the single buddy system have been suggested which allocate the union of several single buddy systems.
Reference: [6] <author> N. Graham, F. Harary, </author> <note> M.L. Livingston and Q.F. Stout,"Subcube fault tolerance in hy-percubes", Jour. of Information and Computation (to appear). </note>
Reference-contexts: Theorem 3.1 For d q, (i ) C w (d; q) = 2 dq , DG w (d; q) = 2 dq , (iv ) <ref> [6] </ref>, K w (d; q) 2 dq1 lg (q + 3) (d q) 2 Exact analytic expressions for expected fault tolerance are extremely difficult to determine, particularly for dq &gt; 1.
Reference: [7] <author> A. Ghafoor, T.R. Bashkow, and I. Ghafoor, </author> <title> "Bisectional fault-tolerant communication architecture for supercomputer systems", </title> <journal> IEEE Trans. on Computers 38 (1989), </journal> <pages> pp. 1425-1446. </pages>
Reference-contexts: Recently, there has been considerable interest in an enhancement of the hypercube network in which an extra edge is included between each pair of diametrically opposed nodes <ref> [7, 8, 9, 11, 17] </ref>. This new structure, which has appeared under several different names (folded, twisted, enhanced, projective) will be referred to as a projective hypercube here. <p> This enhancement to Q d , which has been discussed informally since at least 1986, arose because many of the hypercubes in use at that time had at least one extra port on each node. Formal description of the projective hypercube has appeared in the literature in <ref> [7, 8, 9, 11, 17] </ref>, although under different names such as "twistd", "enhanced", or "folded" hypercubes. These names, as with the name "projective", are suggested by the following construction. Let A and B be two node-disjoint d-dimensional subcubes of Q d+1 .
Reference: [8] <author> C.-T. Ho, </author> <title> "Full bandwidth communications on folded hypercubes", </title> <booktitle> Proc. Int. Conf. on Parallel Processing, Vol. I (1990), </booktitle> <pages> pp. 276-280. </pages>
Reference-contexts: Recently, there has been considerable interest in an enhancement of the hypercube network in which an extra edge is included between each pair of diametrically opposed nodes <ref> [7, 8, 9, 11, 17] </ref>. This new structure, which has appeared under several different names (folded, twisted, enhanced, projective) will be referred to as a projective hypercube here. <p> This enhancement to Q d , which has been discussed informally since at least 1986, arose because many of the hypercubes in use at that time had at least one extra port on each node. Formal description of the projective hypercube has appeared in the literature in <ref> [7, 8, 9, 11, 17] </ref>, although under different names such as "twistd", "enhanced", or "folded" hypercubes. These names, as with the name "projective", are suggested by the following construction. Let A and B be two node-disjoint d-dimensional subcubes of Q d+1 .
Reference: [9] <author> C.-T. Ho, </author> <title> "Observation on the Bisec-tional Interconnection Network", </title> <type> Technical Report, </type> <institution> IBM Almaden Research Center (1989). </institution>
Reference-contexts: Recently, there has been considerable interest in an enhancement of the hypercube network in which an extra edge is included between each pair of diametrically opposed nodes <ref> [7, 8, 9, 11, 17] </ref>. This new structure, which has appeared under several different names (folded, twisted, enhanced, projective) will be referred to as a projective hypercube here. <p> This enhancement to Q d , which has been discussed informally since at least 1986, arose because many of the hypercubes in use at that time had at least one extra port on each node. Formal description of the projective hypercube has appeared in the literature in <ref> [7, 8, 9, 11, 17] </ref>, although under different names such as "twistd", "enhanced", or "folded" hypercubes. These names, as with the name "projective", are suggested by the following construction. Let A and B be two node-disjoint d-dimensional subcubes of Q d+1 .
Reference: [10] <author> J. Kim, C.R. Das, and W. Lin, </author> <title> "A processor allocation scheme for hypercube computers", </title> <booktitle> Proc. Int. Conf. on Parallel Processing, Vol. II (1989), </booktitle> <pages> pp. 231-238. </pages>
Reference-contexts: In dynamic allocation and de-allocation, however, it can perform quite poorly. Studies of the behavior of subcube allocation in a dynamic situation have been made in <ref> [4, 5, 10] </ref> for the purpose of evaluating various policies governing the selection of which subcube to allocate when there are several available subcubes. Variations of the single buddy system have been suggested which allocate the union of several single buddy systems.
Reference: [11] <author> S. Latifi, </author> <title> "The efficiency of the folded hypercube in subcube allocation", </title> <booktitle> Proc. Int. Conf. on Parallel Processing, Vol. I (1990), </booktitle> <pages> pp. 218-221. </pages>
Reference-contexts: Recently, there has been considerable interest in an enhancement of the hypercube network in which an extra edge is included between each pair of diametrically opposed nodes <ref> [7, 8, 9, 11, 17] </ref>. This new structure, which has appeared under several different names (folded, twisted, enhanced, projective) will be referred to as a projective hypercube here. <p> This enhancement to Q d , which has been discussed informally since at least 1986, arose because many of the hypercubes in use at that time had at least one extra port on each node. Formal description of the projective hypercube has appeared in the literature in <ref> [7, 8, 9, 11, 17] </ref>, although under different names such as "twistd", "enhanced", or "folded" hypercubes. These names, as with the name "projective", are suggested by the following construction. Let A and B be two node-disjoint d-dimensional subcubes of Q d+1 .
Reference: [12] <author> S. Latifi and A. El-Amawy, </author> <title> "On folded hy-percubes", </title> <booktitle> Proc. Int. Conf. on Parallel Processing, Vol. I (1989), </booktitle> <pages> pp. 180-187. </pages>
Reference: [13] <editor> M.L. Livingston and Q.F. Stout, </editor> <title> "Distributing resources in hypercube computers", </title> <booktitle> Proc. 3rd Conf. on Hypercube Concurrent Computers and Appl. </booktitle> <year> (1988), </year> <pages> pp. 222-231. </pages>
Reference: [14] <editor> M.L. Livingston and Q.F. Stout, </editor> <title> "On problems of distributing resources in parallel computers", </title> <note> in preparation. </note>
Reference: [15] <editor> M.L. Livingston and Q.F. Stout, </editor> <title> "Parallel allocation algorithms for hypercubes and meshes" in Proc. </title> <booktitle> 4th Conf. on Hypercube Concurrent Computers and Appl. </booktitle> <year> (1989), </year> <pages> pp. 59-66. </pages>
Reference-contexts: We contend that the cyclic buddy scheme, which we introduced in <ref> [15] </ref>, should be the method of choice for subcube location in hyper-cubes. This scheme can be implemented in parallel with almost no system overhead [15], and, as our results here will show, it yields a substantial improvement in fault-tolerance over the buddy and gray-coded buddy schemes. <p> We contend that the cyclic buddy scheme, which we introduced in <ref> [15] </ref>, should be the method of choice for subcube location in hyper-cubes. This scheme can be implemented in parallel with almost no system overhead [15], and, as our results here will show, it yields a substantial improvement in fault-tolerance over the buddy and gray-coded buddy schemes. In Section 2, we describe the subcube location schemes we will study. <p> We introduced this scheme, the cyclic buddy system, (CBS), in <ref> [15] </ref>. It locates q-subcubes of the form a 1 : : : a d , where a i through a i+q1 are fl for some i, with the subscripts calculated modulo d. <p> Thus, a CBS locates at least as many q-subcubes as the double buddy and the double gray-coded buddy systems, and locates strictly more than these systems when d &gt; 2. We showed in <ref> [15] </ref> that each of the buddy, gray-coded buddy, and the cyclic buddy schemes can be implemented in fi (d) time in parallel. 3 Furthermore, the implied constants are such that the CBS implementation time is less than that required by either the double buddy or the double gray-coded buddy schemes. 3 <p> From this, a set of bd=2c cyclic buddy schemes can be constructed whose union recognizes all subcubes of dimension d 2 or greater in a hypercube of dimension d. Furthermore, as we show in <ref> [15] </ref>, such a location strategy can be implemented in parallel in fi (d 2 ) time. In [15] there is a much more complicated algorithm that accomplishes complete location in fi (d) time, but the simplicity of the scheme using the cyclic buddy system might be more attractive to use, particularly <p> Furthermore, as we show in <ref> [15] </ref>, such a location strategy can be implemented in parallel in fi (d 2 ) time. In [15] there is a much more complicated algorithm that accomplishes complete location in fi (d) time, but the simplicity of the scheme using the cyclic buddy system might be more attractive to use, particularly for feasible sizes of d. 6 Conclusion Through our analytic results and computer simulations we have seen <p> As our results showed, the cyclic buddy system offers significant improvement over the most commonly used scheme: the buddy system. The cyclic buddy system proved to be significantly better, too, than suggested schemes such as the double buddy, 7 gray-coded buddy, and double gray-coded buddy. We have shown in <ref> [15] </ref> that the cyclic buddy scheme can be easily implemented in parallel, with no more overhead than the buddy strategy, and can locate a largest available subcube in fi (d) time.
Reference: [16] <editor> M.L. Livingston and Q.F. Stout, </editor> <title> "Fault tolerance of allocation schemes in massively parallel computers", </title> <booktitle> Proc. 2nd Symp. Frontiers of Massively Parallel Computation (1988), </booktitle> <pages> pp. 491-494. </pages>
Reference-contexts: Al-Dhelaan and Bose [2] introduced a modified buddy strategy which improves upon the single gray-coded buddy scheme. In <ref> [16] </ref>, we examined several subcube location schemes including multiple buddy and gray-coded buddy schemes, and introduced a new family of location schemes which generalized and improved upon the earlier schemes. <p> Further, if d q is held fixed, then it is strictly monotonically increasing in d. (ii ) <ref> [16] </ref>, For fixed dq = k, B e (d; q) converges mono tonically increasingly to B fl (k) as d ! 1. (iii ) [16], For fixed d q = k, G e (d; q) converges monotonically increasingly to G fl (k) as d ! 1. (iv ) For each k <p> Further, if d q is held fixed, then it is strictly monotonically increasing in d. (ii ) <ref> [16] </ref>, For fixed dq = k, B e (d; q) converges mono tonically increasingly to B fl (k) as d ! 1. (iii ) [16], For fixed d q = k, G e (d; q) converges monotonically increasingly to G fl (k) as d ! 1. (iv ) For each k there is a constant DB fl (k) such that, for d q = k, DB e (d; q) converges monotonically increasingly to DB fl <p> On the other hand, parts (vi); (vii); and (viii) show that for d q fixed, C e (d; q) has the same order of growth as K e (d; q), which is logarithmic in d. In <ref> [16] </ref>, a study was begun to compare the fault-tolerance of various location schemes for d = 20 and q = d 2. Here we have extended this simulation to include smaller dimensions and also to include the cyclic buddy scheme. <p> We also include a column labeled "1", which represents the limit as d ! 1. For the buddy, double buddy, and gray-coded buddy schemes all values shown are exact, utilizing a dynamic programming approach based on observations in <ref> [16] </ref>. For the double gray-coded buddy scheme, an approach was used which mixed Monte Carlo techniques with the dynamic programming approach in order to reduce the variance below that of a simple Monte Carlo approach. For the cyclic buddy and complete location schemes the values shown are based on simulation.
Reference: [17] <author> N.-F. Tzeng and S. Wei, </author> <title> "Enhanced hy-percubes", </title> <journal> IEEE Trans. on Computers 40 (1991). </journal> <pages> pp. 284-294. </pages>
Reference-contexts: Recently, there has been considerable interest in an enhancement of the hypercube network in which an extra edge is included between each pair of diametrically opposed nodes <ref> [7, 8, 9, 11, 17] </ref>. This new structure, which has appeared under several different names (folded, twisted, enhanced, projective) will be referred to as a projective hypercube here. <p> This enhancement to Q d , which has been discussed informally since at least 1986, arose because many of the hypercubes in use at that time had at least one extra port on each node. Formal description of the projective hypercube has appeared in the literature in <ref> [7, 8, 9, 11, 17] </ref>, although under different names such as "twistd", "enhanced", or "folded" hypercubes. These names, as with the name "projective", are suggested by the following construction. Let A and B be two node-disjoint d-dimensional subcubes of Q d+1 .
References-found: 17

