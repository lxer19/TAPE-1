URL: http://www.cs.rutgers.edu/~minsky/papers/coordination-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Email: Email: fminsky,ungureang@cs.rutgers.edu  
Phone: Phone: (908) 445-2085 Fax: (908) 445-0537  
Title: Regulated Coordination in Open Distributed Systems  
Author: Naftaly H. Minsky and Victoria Ungureanu 
Address: New Brunswick, NJ, 08903 USA  
Affiliation: Department of Computer Science Rutgers University  
Abstract: Modern distributed systems tend to be conglomerates of heterogeneous subsystems, which have been designed separately, by different people, with little, if any, knowledge of each other. A single agent operating within a hybrid system of this kind may have to coordinate its activities with members of several such subsystems, under different coordination policies. To support coordination in such hybrid systems, we introduce in this paper a new concept of coordination policy that allows a single agent to engage in several different activities, subject to disparate policies. Coordination policies are enforced to ensure compliance with them by all participants. We introduce a toolkit called Moses that can support a wide range of useful coordination policies of this kind, in an efficient and unified manner.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.-M. Andreoli. </author> <title> Coordination in LO. </title> <editor> In J.-M. Andreoli, C. Hankin, and D. Le Metayer, editors, </editor> <booktitle> Coordination Programming, </booktitle> <pages> pages 42-64. </pages> <institution> Imperial College Press, </institution> <year> 1996. </year>
Reference-contexts: Most coordination mechanisms use either virtually shared space, as in Linda [7,5], or some form of broadcasting <ref> [1] </ref>, for the interaction between the agents involved, and for the coordination of such interaction. Both means allow for very powerful coordination languages, but are difficult to scale up.
Reference: 2. <author> J.-M. Andreoli, P. Ciancarini, and R. Pareschi. </author> <title> Interaction abstract machines. </title> <editor> In G. Agha, P. Wegner, and A. Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 257-280. </pages> <year> 1993. </year>
Reference: 3. <author> J.-M. Andreoli, H. Gallaire, and R. Pareschi. </author> <title> Rule-based object coordination. </title> <editor> In P. Ciancarini, O. Nierstrasz, and A. Yonezawa, editors, </editor> <booktitle> Object-Based Models and Languages for Concurrent Systems, Lecture Notes in Computer Science, </booktitle> <pages> pages 1-13. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <title> Number 924. </title>
Reference-contexts: That is, it prescribes what should be done in response to certain events, but it cannot initiate any action on its own. To provide our model with certain pro-active capabilities, in some analogy with the pro-active capabilities proposed by Andreoli et al. <ref> [3] </ref>, we now introduce a concept of "obligation." This concept is based broadly on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky [13], and on the work of Maibaum [10] and of Feather [16], on formal specification of temporal constraints.
Reference: 4. <author> J.-P. Banatre and D. Le Metayer. </author> <title> Gamma and the chemical reaction model: Ten years after. </title> <editor> In J.-M. Andreoli, C. Hankin, and D. Le Metayer, editors, </editor> <booktitle> Coordination Programming, </booktitle> <pages> pages 3-41. </pages> <institution> Imperial College Press, </institution> <year> 1996. </year>
Reference: 5. <author> M. Banville. Sonia: </author> <title> an adaptation of Linda for coordination of activities in organizations. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> Coordination Languages and Models, Lecture Notes in Computer Science, </booktitle> <pages> pages 57-74. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <title> Number 1061. </title>
Reference: 6. <author> K.P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 36-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: These failures can be handled by well known methods. Failures of the secretary can be addressed by means of the state-machine approach [17], using a toolkit such as Isis <ref> [6] </ref> for the active replication of the secretary. Failures of controllers can be analogously handled by replication of each controller. Alternatively, given a reliable secretary, it may be sufficient for the controllers to notify the secretary of all state changes. Scalability.
Reference: 7. <author> N. Carriero and D. Gelernter. </author> <title> Coordination languages and their significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference: 8. <author> S. Castellani and P. Ciancarini. </author> <title> Enhancing coordination and modularity mechanisms for a language with objects-as-multisets. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> Coordination Languages and Models, Lecture Notes in Computer Science, </booktitle> <pages> pages 89-106. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <title> Number 1061. </title>
Reference-contexts: Consequently, Moses is easily scalable, and lends itself to efficient and fault tolerant implementation. The price is, of course, in expressive power, which is weaker than that of a language like LO <ref> [8] </ref>. Yet, we believe that the expressive power of Moses is sufficiently rich to be useful, as the examples in this paper hopefully demonstrate.
Reference: 9. <author> M. Cortes and P. Mishra. DCWPL: </author> <title> A programming language for describing collaborative work. </title> <booktitle> In Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 21-29, </pages> <year> 1996. </year>
Reference: 10. <author> S.J.H. Kent, T.S.E. Maibaum, and W.J. Quirk. </author> <title> Formally specifying temporal constraints and error recovery. </title> <booktitle> In Proceedings of the IEEE Int. Symp. on Requirement Engineering, </booktitle> <pages> pages 208-215, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: in some analogy with the pro-active capabilities proposed by Andreoli et al. [3], we now introduce a concept of "obligation." This concept is based broadly on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky [13], and on the work of Maibaum <ref> [10] </ref> and of Feather [16], on formal specification of temporal constraints.
Reference: 11. <author> N.H. Minsky. </author> <title> The imposition of protocols over open distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1991. </year>
Reference: 12. <author> N.H. Minsky and J. Leichter. </author> <title> Law-governed Linda as a coordination model. </title> <editor> In P. Ciancarini, O. Nierstrasz, and A. Yonezawa, editors, </editor> <booktitle> Object-Based Models and Languages for Concurrent Systems, number 924 in Lecture Notes in Computer Science, </booktitle> <pages> pages 125-146. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: 13. <author> N.H. Minsky and A. Lockman. </author> <title> Ensuring integrity by adding obligations to privi-leges. </title> <booktitle> In Proceedings of the 8th International Conference on Software Engineering, </booktitle> <pages> pages 92-102, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: provide our model with certain pro-active capabilities, in some analogy with the pro-active capabilities proposed by Andreoli et al. [3], we now introduce a concept of "obligation." This concept is based broadly on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky <ref> [13] </ref>, and on the work of Maibaum [10] and of Feather [16], on formal specification of temporal constraints.
Reference: 14. <author> N.H. Minsky and V. Ungureanu. </author> <title> Unified support for heterogeneous security policies. </title> <type> Technical report, </type> <institution> Rutgers University, LCSR, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: For the details of this formulation the reader is referred to <ref> [14] </ref>, here we will only illustrate it with the following example. 3.2 Example: Congestion Control Policy Let s be a server designed to provide certain services to an heterogeneous and open group of agents. <p> A presentation of how these requirements are met is outside the scope of this paper, but can be found in <ref> [14] </ref>. The essential aspect of this architecture is that all controllers have identical copies of the law. It is in this sense that the law is said to be global to the group. Implementation Status. An experimental prototype of the Moses toolkit has been implemented.
Reference: 15. <author> W. Morris. </author> <title> The American Heritage Dictionary of the English Language. </title> <publisher> Houghton Mi*in Company, </publisher> <year> 1981. </year>
Reference-contexts: Section 5 places this work in the context of current research on coordination; and we conclude with a thought about some broader implications of this work and directions for future research. 2 The Concept of a Coordination Policy The term "policy," according to the the American Heritage Dictionary <ref> [15] </ref>, means "a general principle that guides the actions taken by a person or group". According to this definition a policy has three elements: the actions guided by the policy, the participating group, and the guiding principles.
Reference: 16. <author> Feather Martin S. </author> <title> An implementation of bounded obligtions. </title> <booktitle> In Proceedings of the 8th Knowladge Based Software Engineering Conference, </booktitle> <pages> pages 114-122, </pages> <address> Chicago, Ill, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: the pro-active capabilities proposed by Andreoli et al. [3], we now introduce a concept of "obligation." This concept is based broadly on the societal notion of obligation, and more directly on the concept of enforced obligation introduced by Minsky [13], and on the work of Maibaum [10] and of Feather <ref> [16] </ref>, on formal specification of temporal constraints.
Reference: 17. <author> F.B. Schneider. </author> <title> Implementing fault tolerant services using the state machine approach. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 300-319, </pages> <year> 1990. </year>
Reference-contexts: These failures can be handled by well known methods. Failures of the secretary can be addressed by means of the state-machine approach <ref> [17] </ref>, using a toolkit such as Isis [6] for the active replication of the secretary. Failures of controllers can be analogously handled by replication of each controller. Alternatively, given a reliable secretary, it may be sufficient for the controllers to notify the secretary of all state changes. Scalability.
Reference: 18. <author> F. Schwenkreis. </author> <title> Workflow for the German Federal Government a position paper. </title> <booktitle> In NSF Workshop on Workflow and Process Automation in Information Systems, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: In this context, it was recently noted that "mechanism are needed which allow independent workflows to exchange information and influence each other control flow" <ref> [18] </ref>. In particular, we are working now on a concept of policy hierarchies, which would allow for a set of policies to coexist under a single "super-policy". And we would like to be able to evolve the laws of distinct sub-policies independently of each other.
Reference: 19. <author> A. Werner, M.Polze and M. Malek. </author> <title> The unstoppable orchestra: A responsive distributed application. </title> <booktitle> In Third International Conference on Configurable Distributed Systems, </booktitle> <pages> pages 154-160, </pages> <month> May </month> <year> 1996. </year>
References-found: 19

