URL: http://www.cs.rpi.edu/~musser/genprog.ps
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Generic Programming  
Author: David R. Musser Alexander A. Stepanov 
Address: Amos Eaton Hall Troy, New York 12180  Post Office Box 10490 Palo Alto, California 94303-0969  
Affiliation: Rensselaer Polytechnic Institute Computer Science Department  Hewlett-Packard Laboratories Software Technology Laboratory  
Abstract: Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software. For example, a class of generic sorting algorithms can be defined which work with finite sequences but which can be instantiated in different ways to produce algorithms working on arrays or linked lists. Four kinds of abstraction|data, algorithmic, structural, and representational| are discussed, with examples of their use in building an Ada library of software components. The main topic discussed is generic algorithms and an approach to their formal specification and verification, with illustration in terms of a partitioning algorithm such as is used in the quicksort algorithm. It is argued that generically programmed software component libraries offer important advantages for achieving software productivity and reliability. fl This paper was presented at the First International Joint Conference of ISSAC-88 and AAECC-6, Rome, Italy, July 4-8, 1988. (ISSAC stands for International Symposium on Symbolic and Algebraic Computation and AAECC for Applied Algebra, Algebraic Algorithms, and Error Correcting Codes). It was published in Lecture Notes in Computer Science 358, Springer-Verlag, 1989, pp. 13-25. y The first author's work was sponsored in part through a subcontract from Computational Logic, Inc., which was sponsored in turn by the Defense Advanced Research Projects Agency, ARPA order 9151. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency, the U.S. Government, or Computational Logic., Inc. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Booch, </author> <title> Software Components in Ada. </title> <address> Benjamin/Cummings, </address> <year> 1987. </year>
Reference-contexts: The notion of generic algorithms is not new, but we are unaware of any similar attempt to structure a software library founded on this idea. The Ada library developed by G. Booch <ref> [1] </ref>, for example, makes only very limited use of generic algorithms.
Reference: [2] <author> O.-J. Dahl, E. W. Dijkstra, and C. A. R. Hoare, </author> <title> Structured Programming, </title> <publisher> Academic Press, </publisher> <year> 1972. </year> <note> REFERENCES 17 </note>
Reference-contexts: In fact, most work on development of abstraction facilities for the past decade or more has focused on data abstraction <ref> [2] </ref>, [9]. Algorithmic abstraction has received little attention, even in the more recent work on object oriented programming. Most work on procedural abstraction has been language- rather than algorithm-oriented, attempting to find elegant and concise linguistic primitives; our goal is to find abstract representations of efficient algorithms.
Reference: [3] <author> E. W. Dijkstra, </author> <title> A Discipline of Programming, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1976. </year>
Reference-contexts: then Middle := First; Middle_OK := False; return; end if; end loop; Swap (S, First, Last); First := Next (First); if First = Last then Middle := First; Middle_OK := False; return; end if; Last := Prev (Last); end loop; end Partition; 10 5 ABSTRACT ALGORITHM SPECIFICATION AND VERIFICATION conditions <ref> [3] </ref>, in which one attempts to obtain a strong statement about the result of a computation while making as few assumptions as possible about its initial conditions.
Reference: [4] <author> J. Goguen, </author> <title> "Parameterized Programming," </title> <journal> Transactions on Software Engineering, </journal> <volume> SE-10(5):528-543, </volume> <month> September </month> <year> 1984. </year>
Reference-contexts: Some of our goals are in common with the "parameterized programming" approach advocated by J. Goguen <ref> [4] </ref>, but the most fundamental difference is that Goguen mainly addresses meta-issues|namely, how to manipulate theories|while our primary interest is in building useful theories to manipulate.
Reference: [5] <author> A. Kershenbaum, D. R. Musser and A. A. Stepanov, </author> <title> "Higher Order Imperative Programming," </title> <institution> Computer Science Dept. </institution> <type> Rep. No. 88-10, </type> <institution> Rensselaer Polytechnic Institute, </institution> <address> Troy, New York, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: For numerous examples of the use of generic programming techniques in the Scheme language, and a brief discussion of the relative merits of Ada and Scheme for this type of programming, see <ref> [5] </ref>. 2 Classification of Abstractions We discuss four classes of abstractions that we have found useful in generic programming, as shown in Table 1, which lists a few examples of packages in our Ada Generic library.
Reference: [6] <author> D. R. Musser and A. A. Stepanov, </author> <title> "A Library of Generic Algorithms in Ada," </title> <booktitle> Proc. of 1987 ACM SIGAda International Conference, </booktitle> <address> Boston, </address> <month> December, </month> <year> 1987. </year>
Reference-contexts: We present the issues relating to generic algorithms mainly in terms of a single example, a Partition algorithm such as is used in quicksort, but we will also allude to a large collection of examples we have developed in Ada as part of an Ada Generic Library project <ref> [6] </ref>, [7]. The structure of the library is designed to achieve a much higher degree of modularity than has been found in previous libraries, by completely separating data representations from algorithmic and other data abstraction issues. <p> Note that what one obtains is really a family of stack data abstractions, whereas the usual programming techniques give only a single data abstraction. The following sections give more detailed examples of algorithmic abstractions. Further discussion and examples of data, structural, and representational abstraction may be found in <ref> [6] </ref>. 3 Algorithmic Abstractions As an example of generic algorithms, we consider the sequence algorithmic abstraction: diverse data abstractions which can be sequentially traversed. These data abstractions belong to numerous different families: singly-linked lists, doubly-linked lists, vectors, trees, and many others.
Reference: [7] <author> D. R. Musser and A. A. Stepanov, </author> <title> The Ada Generic Library: Linear List Processing Packages, </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <title> (This book supercedes General Electric Corporate Research and Development Reports 88CRD112 and 88CRD113, </title> <month> April </month> <year> 1988). </year>
Reference-contexts: We present the issues relating to generic algorithms mainly in terms of a single example, a Partition algorithm such as is used in quicksort, but we will also allude to a large collection of examples we have developed in Ada as part of an Ada Generic Library project [6], <ref> [7] </ref>. The structure of the library is designed to achieve a much higher degree of modularity than has been found in previous libraries, by completely separating data representations from algorithmic and other data abstraction issues. Some of our goals are in common with the "parameterized programming" approach advocated by J.
Reference: [8] <author> G. L. Steele, </author> <title> Common LISP: The Language, </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: The solution that has been taken in Common Lisp <ref> [8] </ref> is to index all kinds of sequences by natural numbers. So the Common Lisp generic find function always returns a natural number, which is not particularly useful on linked lists. In the generic programming approach, we use generic indexing by a generic formal type, Coordinate.
Reference: [9] <author> N. Wirth, </author> <title> Algorithms + Data Structures = Programs, </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference-contexts: In fact, most work on development of abstraction facilities for the past decade or more has focused on data abstraction [2], <ref> [9] </ref>. Algorithmic abstraction has received little attention, even in the more recent work on object oriented programming. Most work on procedural abstraction has been language- rather than algorithm-oriented, attempting to find elegant and concise linguistic primitives; our goal is to find abstract representations of efficient algorithms.
References-found: 9

