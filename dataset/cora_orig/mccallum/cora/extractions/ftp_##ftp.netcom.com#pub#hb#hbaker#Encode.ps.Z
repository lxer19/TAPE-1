URL: ftp://ftp.netcom.com/pub/hb/hbaker/Encode.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Strategies for the Lossless Encoding of Strings as Ada Identifiers sort could be useful in
Author: Henry G. Baker 
Keyword: 2.Ada Identifiers 3.Desirable Characteristics of String-to-Identifier Mappings  
Address: 16231 Meadow Ridge Way, Encino, CA 91436  
Affiliation: Nimble Computer Corp.,  
Note: ACM Ada Letters XIII,5 (Sept./Oct.1993), 43-47. Copyright 1993 by Nimble Computer Corporation. 1  Mappings of this  If the  3 Thanks to Geoff Mendal for pointing this out, as well as for his other excellent suggestions.  
Pubnum: 1.Introduction  Ada-9X [Ploedereder92].  
Phone: (818) 501-4956(818) 986-1360 (FAX)  
Abstract: When translating software from other languages into Ada, it is necessary to translate foreign identifiers into Ada names. If the foreign language provides a richer syntax for identifiers than Adae.g., it allows non-alphanumeric charactersthen some encoding scheme will be required in order to provide a readable 1-1 mapping. Schemes for achieving such 1-1 mappings are discussed. During the translation of programs written in other languages into Ada, it becomes necessary to translate foreign identifiers into Ada identifiers. For a small program, an ad hoc approach will work, but for larger programs some automatic method must be used, or else the translator will run the risk of inadvertent name collisions. An automatic method has the additional advantage that the translator need no longer be imaginative, and translation productivity will therefore be enhanced. Although there have been several papers about translators of other languages into Ada [Albrecht80] [Wallis85] [Kaelbling86a,b], there has been little discussion of the particular problem of identifier translation. One must presume that the users of such translators were willing to put up with incomprehensible names, or were able to utilize relatively simple ad hoc schemese.g., Fortran-77 identifiers, which consist of 1-6 uppercase alphanumeric characters starting with an uppercase letter, map trivially 1 into Ada names [ANSI-Fortran]. Nimble Computer Corporation has developed an automatic translator from the Common Lisp programming language into Ada [Baker89], and hence has faced the problem of mechanically translating Common Lisp identifierscalled "symbols"into Ada. As Common Lisp symbols have spellings which consist of completely arbitrary character strings, it became necessary to devise a 1-1 mapping from ASCII strings into legal Ada identifiers. However, although a hexadecimal mapping of "Hello" into X_48_65_6C_6C_6F is simple and straightforward, it is also completely unreadable, and thus makes for a poor quality translation of Common Lisp into Ada. We discuss mappings which are both 1-1, and also readable. Ada identifiers are used both as names and as reserved words [AdaLRM, 2.3/1, 2.9/2]. Ada identifiers have the following syntax: letter[underline]letter_or_digit- [AdaLRM, 2.3/2]. In other words, Ada names: 1) must be comprised of letters, digits and underlines; 2) must start with a letter; 3) must not end with an underline; 4) must not have adjacent underlines; and 5) must not be one of the 63 reserved words. 2 Furthermore, Ada identifiers cannot be longer than one line, because "the end of line is always a separator" [AdaLRM, 2.2/3]; e.g., we are familiar with one validated Ada compiler which has a line length limitation (and hence an identifier length limitation) of 200 characters. Finally, Ada does not distinguish the alphabetic case of lettersi.e., the case of identifiers is usually normalized to upper case in Ada formatters ("pretty printers") and in the 'IMAGE attribute of enumerated types (Ada does, however, preserve the case of individually quoted enumerated characterse.g., 'a') 3 . Below, we list a number of desirable characteristics of any string-to-identifier mappings: 
Abstract-found: 1
Intro-found: 1
Reference: [AdaLRM] <institution> Reference Manual for the Ada Programming Language. ANSI/MIL-STD-1815A-1983, U.S. Gov't Printing Office, </institution> <address> Wash., DC, </address> <year> 1983. </year>
Reference-contexts: We discuss mappings which are both 1-1, and also readable. 2.Ada Identifiers Ada identifiers are used both as names and as reserved words <ref> [AdaLRM, 2.3/1, 2.9/2] </ref>. Ada identifiers have the following syntax: letter [underline]letter_or_digit- [AdaLRM, 2.3/2]. <p> We discuss mappings which are both 1-1, and also readable. 2.Ada Identifiers Ada identifiers are used both as names and as reserved words [AdaLRM, 2.3/1, 2.9/2]. Ada identifiers have the following syntax: letter [underline]letter_or_digit- <ref> [AdaLRM, 2.3/2] </ref>. <p> underlines; 2) must start with a letter; 3) must not end with an underline; 4) must not have adjacent underlines; and 5) must not be one of the 63 reserved words. 2 Furthermore, Ada identifiers cannot be longer than one line, because "the end of line is always a separator" <ref> [AdaLRM, 2.2/3] </ref>; e.g., we are familiar with one validated Ada compiler which has a line length limitation (and hence an identifier length limitation) of 200 characters.
Reference: [Albrecht80] <editor> Albrecht, P.F., et al. </editor> <title> "Source-to-source translation: Ada to Pascal and Pascal to Ada". </title> <booktitle> Proc. ACM Sigplan Symp. on Ada, Sigplan Not. </booktitle> <volume> 15, 12 (1980), </volume> <pages> 183-193. </pages>
Reference-contexts: Although there have been several papers about translators of other languages into Ada <ref> [Albrecht80] </ref> [Wallis85] [Kaelbling86a,b], there has been little discussion of the particular problem of identifier translation.
Reference: [ANSI-Fortran] <institution> American National Standard Programming Language FORTRAN. ANSI X3.9-1978, </institution> <address> NY, NY, </address> <year> 1978. </year>
Reference-contexts: One must presume that the users of such translators were willing to put up with incomprehensible names, or were able to utilize relatively simple ad hoc schemese.g., Fortran-77 identifiers, which consist of 1-6 uppercase alphanumeric characters starting with an uppercase letter, map trivially 1 into Ada names <ref> [ANSI-Fortran] </ref>. Nimble Computer Corporation has developed an automatic translator from the Common Lisp programming language into Ada [Baker89], and hence has faced the problem of mechanically translating Common Lisp identifierscalled "symbols"into Ada.
Reference: [Baker89] <author> Baker, H. </author> <title> "The NIMBLE ProjectReal-Time Common Lisp for Embedded Expert System Applications". </title> <booktitle> Proc. 1989 AIAA Computers in Aerospace Conf., </booktitle> <address> Monterey, CA, </address> <year> 1989. </year>
Reference-contexts: Nimble Computer Corporation has developed an automatic translator from the Common Lisp programming language into Ada <ref> [Baker89] </ref>, and hence has faced the problem of mechanically translating Common Lisp identifierscalled "symbols"into Ada. As Common Lisp symbols have spellings which consist of completely arbitrary character strings, it became necessary to devise a 1-1 mapping from ASCII strings into legal Ada identifiers.
Reference: [Kaelbling86a] <author> Kaelbling, </author> <title> L.P. "FORADA: A FORTRAN to Ada Translator". Ada Letters VI, </title> <booktitle> 6 (1986), </booktitle> <pages> 107-108. </pages>
Reference: [Kaelbling86b] <author> Kaelbling, </author> <title> L.P. "The Role of Translators in an Ada Environment". Ada Letters VI, </title> <booktitle> 6 (1986), </booktitle> <pages> 105-106. </pages>
Reference: [Martin86] <author> Martin, D.G. </author> <title> "Non-Ada to Ada Conversion". Ada Letters VI, </title> <month> 1 </month> <year> (1986). </year>
Reference: [Parsian88] <author> Parsian, M., et al. </author> <title> "Ada Translation Tools Development: Automatic Translation of FORTRAN to Ada". </title> <journal> Ada Letters VIII, </journal> <volume> 6 (Nov.-Dec.1988), </volume> <pages> 57-71. </pages>
Reference: [Ploedereder92] <author> Ploedereder, E. </author> <title> "How to Program in Ada9X, Using Ada83". Ada Letters XII, </title> <booktitle> 6 (Nov/Dec 1992), </booktitle> <pages> 50-58. </pages>
Reference-contexts: The range of any mapping must be the set of legal Ada identifiersi.e., only letters, digits and underlines, first character a letter, last character a letter or digit, and no adjacent underlines. 1 Except for Ada reserved words. 2 A few more reserved words are on the way with Ada-9X <ref> [Ploedereder92] </ref>. 3 Thanks to Geoff Mendal for pointing this out, as well as for his other excellent suggestions. ACM Ada Letters XIII,5 (Sept./Oct.1993), 43-47. Copyright 1993 by Nimble Computer Corporation. 2 2.
Reference: [Steele90] <author> Steele, G.L. </author> <title> Common Lisp: the Language, 2nd Ed. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1990. </year>
Reference-contexts: The mapping should be readable and intuitive, so that it may be computed by inspection. 4.Morphology of Lisp Symbol Names Since our primary purpose in translating strings into Ada names is translating Common Lisp <ref> [Steele90] </ref> symbol names, we review the typical structure of Common Lisp symbol names. Although any Common Lisp string may be used to name a Common Lisp symbol, the most common symbols have alphanumeric names, which look very similar to the identifiers used by other programming languages.
Reference: [Wallis85] <author> Wallis, P.J.L. </author> <title> "Automatic Language Conversion and Its Place in the Transition to Ada". </title> <booktitle> Proc. Ada Int'l. Conf. "Ada in Use", </booktitle> <editor> Barnes & Fisher, eds., Camb. </editor> <publisher> Univ. Press, </publisher> <year> 1985, </year> <month> pp.275-284. </month>
Reference-contexts: Although there have been several papers about translators of other languages into Ada [Albrecht80] <ref> [Wallis85] </ref> [Kaelbling86a,b], there has been little discussion of the particular problem of identifier translation.
References-found: 11

