URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-042.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: email: sharma@snapper.cis.ufl.edu  
Title: A New Perspective on Rule Support for Object-Oriented Databases  
Author: E. Anwar L. Maugis S. Chakravarthy 
Address: Building  Gainesville, Florida 32611  
Note: UF-CIS-TR-92-042 (Submited for publication) (This work was supported in part by the NSF Research Initiation Grant (IRI-9011216), by the Office of Naval Technology and the Navy Command, Control and Ocean Surveillance Center RDT&E Division and by Sofreavia  
Affiliation: University of Florida Computer and Information Sciences  Services, France.) Department of Computer and Information Sciences Computer Science Engineering  University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [Anw92] <author> E. Anwar. </author> <title> Supporting complex events and rules in an oodbms: A seamless approach. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one.
Reference: [BM91] <author> C. Beeri and T. </author> <title> Millo. A model for active object-oriented databases. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 337-349, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one. This warrants re-examination of the functionality as well as the mechanism by which reactive capability is incorporated into the object-oriented data model <ref> [BM91] </ref>. Furthermore, the differences between the two data models have an influence on how the concepts are carried over. Below, we enumerate some of the differences between the data models that led to the design choices presented in this paper: 1.
Reference: [Boo91] <author> Grady Booch. </author> <title> Object Oriented Design with Applications. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <address> Redwood City, California, </address> <year> 1991. </year>
Reference-contexts: An abstraction denotes the essential characteristics of an object that distinguish it from all other kinds of objects and thus provide crisply defined conceptual boundaries, relative to the perspective of the viewer <ref> [Boo91] </ref>. Rules defined on an object undoubtedly contribute to the essential characteristics, especially behavior of an object. In many applications, objects differ considerably in both structure and behavior from one another. Therefore, it is realistic to assume that different kinds of objects may have different rules applicable to them.
Reference: [BTA90a] <author> J. A. Blakeley, C. W. Thompson, and A. M. Alashqur. </author> <title> Oql[x] : Extending a programming language x with a query capability. </title> <type> Technical Report TR 90-07-01, </type> <institution> Texas Instruments, </institution> <month> July </month> <year> 1990. </year>
Reference: [BTA90b] <author> J. A. Blakeley, C. W. Thompson, and A. M. Alashqur. </author> <title> Strawman reference for object query languages. </title> <booktitle> Proceedings of the First OODB Standardization Workshop, </booktitle> <month> May </month> <year> 1990. </year>
Reference: [BTA90c] <author> J. A. Blakeley, C. W. Thompson, and A. M. Alashqur. </author> <title> Zeitgest query language (zql). </title> <type> Technical Report TR-90-03-01, </type> <institution> Texas Instruments, </institution> <month> March </month> <year> 1990. </year>
Reference: [C + 89] <author> S. Chakravarthy et al. HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Final Report. Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The need and the relevance of reactive capability as a unifying paradigm for handling a number of database features are well-established. Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems <ref> [C + 89, SHP88, WF90, DB87, Int90] </ref>. Recently, there have been a number of attempts [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] at incorporating event and rule support into an object-oriented database management system (OODBMS). <p> After creating the rule, it subscribes to the events generated by the IBM stock instance and the DowJones FinancialInfo instance. 6 Related Work Although a number of efforts have addressed incorporating active capability in the context of an OODBMS <ref> [SKL89, MP90, C + 89] </ref>, mostly Ode [GJ91, GJS92] and ADAM [DPG91] are pertinent to the material presented in this paper. Below, we briefly summarize them. 25 Ode provides active behavior by the incorporation of rules, in the form of constraints and triggers.
Reference: [CHS93] <author> S. Chakravarthy, E. Hanson, and S.Y.W. Su. </author> <title> Active Database Research at the University of Florida. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one.
Reference: [CM91] <author> S. Chakravathy and D. Mishra. </author> <title> An event specification language (snoop) for active databases and its detection. </title> <type> Technical Report UF-CIS TR-91-23, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Trigger bodies are executed in separate transactions after the commit (not necessarily immediately after) of the transaction firing them. More recently Ode [GJS92] has proposed a language for specifying composite events. They specify complex events using a set of operators similar to Snoop <ref> [CM91] </ref>; events are declared within a class at class definition time. Basic (primitive) events are defined and composite events are constructed by applying operators to basic events. The basic events supported are object state events, method execution events, timed events and transaction events.
Reference: [CN90] <author> U. S. Chakravarthy and S. Nesson. </author> <title> Making an Object-Oriented DBMS Active: Design, Implementation and Evaluation of a Prototype. </title> <booktitle> In Proc. of Int'l Conf. on Extended Database Technology (EDBT), </booktitle> <address> Kobe, Japan, </address> <pages> pages 482-490, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one.
Reference: [DB87] <author> M. Darnovsky and J. Bowman. </author> <title> TRANSACT-SQL USER'S GUIDE. Document 3231-2.1, </title> <publisher> Sybase Inc., </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction The need and the relevance of reactive capability as a unifying paradigm for handling a number of database features are well-established. Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems <ref> [C + 89, SHP88, WF90, DB87, Int90] </ref>. Recently, there have been a number of attempts [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] at incorporating event and rule support into an object-oriented database management system (OODBMS).
Reference: [DPG91] <author> O. Diaz, N. Paton, and P. Gray. </author> <title> Rule Management in Object-Oriented Databases: A Unified Approach. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one. <p> In this approach, it is cumbersome to make a rule applicable to only a small number of instances. To the best of our understanding, Ode [GJ91, GJS92] has taken the first approach and ADAM <ref> [DPG91] </ref> the second one. <p> Currently, three approaches are used: i) events as expressions declared within class definitions, e.g., Ode [GJ91, GJS92], ii) events as rule attributes, e.g., Bauz [MP90], and iii) events as first class objects, e.g., ADAM <ref> [DPG91] </ref>. Below, we discuss the advantages and disadvantages of each approach. Events as Expressions : This approach is motivated by runtime processing gains, since processing of event specification is performed primarily at compile time and little or none at runtime. <p> After creating the rule, it subscribes to the events generated by the IBM stock instance and the DowJones FinancialInfo instance. 6 Related Work Although a number of efforts have addressed incorporating active capability in the context of an OODBMS [SKL89, MP90, C + 89], mostly Ode [GJ91, GJS92] and ADAM <ref> [DPG91] </ref> are pertinent to the material presented in this paper. Below, we briefly summarize them. 25 Ode provides active behavior by the incorporation of rules, in the form of constraints and triggers. Both constraints and triggers consist of a condition and an action and are defined within class definitions. <p> Detection of events is accomplished by using a finite automata. Each event expression 26 maps an event history to another event history that contains only those events at which the event expression is satisfied and the trigger should fire. ADAM <ref> [DPG91] </ref> is an active OODB implemented in PROLOG. It focuses on providing a uniform approach to the treatment of rules in an object-oriented environment. Both events and rules are treated as first class objects which are created, deleted and modified in the same fashion as other objects.
Reference: [GJ91] <author> N. H. Gehani and H. V. Jagadish. </author> <title> Ode as an Active Database: Constraints and Triggers. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 327-336, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one. <p> On the other hand, the second approach tries to accomplish everything at runtime thereby incurring a reasonable amount of overhead. In this approach, it is cumbersome to make a rule applicable to only a small number of instances. To the best of our understanding, Ode <ref> [GJ91, GJS92] </ref> has taken the first approach and ADAM [DPG91] the second one. <p> Furthermore, they are not subject to the same transaction semantics. Finally, their persistence is dependent on the existence of other objects, and * Specification of events and the mechanism by which they are detected. Although Ode <ref> [GJ91] </ref> supports the specification and detection of complex events, the manner in which they are supported prevents expressing events spanning instances of the same as well as different classes. <p> Currently, three approaches are used: i) events as expressions declared within class definitions, e.g., Ode <ref> [GJ91, GJS92] </ref>, ii) events as rule attributes, e.g., Bauz [MP90], and iii) events as first class objects, e.g., ADAM [DPG91]. Below, we discuss the advantages and disadvantages of each approach. <p> Fourth, the structure and behavior of rules can be tailored to model the requirements of various applications. For example, it is possible to create subclasses of the rule class and define special attributes or operations on those subclasses. As an example, hard and soft constraints of Ode <ref> [GJ91, GJS92] </ref> can be modeled as subclasses of the rule class. Lastly, by treating rules as first class objects an extensible system is provided. This is due to the ease of introducing new rule attributes or operations on rules; this requires the modification of the rule class definition only. <p> After creating the rule, it subscribes to the events generated by the IBM stock instance and the DowJones FinancialInfo instance. 6 Related Work Although a number of efforts have addressed incorporating active capability in the context of an OODBMS [SKL89, MP90, C + 89], mostly Ode <ref> [GJ91, GJS92] </ref> and ADAM [DPG91] are pertinent to the material presented in this paper. Below, we briefly summarize them. 25 Ode provides active behavior by the incorporation of rules, in the form of constraints and triggers.
Reference: [GJS92] <author> N. H. Gehani, H. V. Jagadish, and O. Shmueli. </author> <title> Event Specification in an Object-Oriented Database. </title> <booktitle> In Proceedings International Conference on Management of Data, </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one. <p> On the other hand, the second approach tries to accomplish everything at runtime thereby incurring a reasonable amount of overhead. In this approach, it is cumbersome to make a rule applicable to only a small number of instances. To the best of our understanding, Ode <ref> [GJ91, GJS92] </ref> has taken the first approach and ADAM [DPG91] the second one. <p> Currently, three approaches are used: i) events as expressions declared within class definitions, e.g., Ode <ref> [GJ91, GJS92] </ref>, ii) events as rule attributes, e.g., Bauz [MP90], and iii) events as first class objects, e.g., ADAM [DPG91]. Below, we discuss the advantages and disadvantages of each approach. <p> Fourth, the structure and behavior of rules can be tailored to model the requirements of various applications. For example, it is possible to create subclasses of the rule class and define special attributes or operations on those subclasses. As an example, hard and soft constraints of Ode <ref> [GJ91, GJS92] </ref> can be modeled as subclasses of the rule class. Lastly, by treating rules as first class objects an extensible system is provided. This is due to the ease of introducing new rule attributes or operations on rules; this requires the modification of the rule class definition only. <p> After creating the rule, it subscribes to the events generated by the IBM stock instance and the DowJones FinancialInfo instance. 6 Related Work Although a number of efforts have addressed incorporating active capability in the context of an OODBMS [SKL89, MP90, C + 89], mostly Ode <ref> [GJ91, GJS92] </ref> and ADAM [DPG91] are pertinent to the material presented in this paper. Below, we briefly summarize them. 25 Ode provides active behavior by the incorporation of rules, in the form of constraints and triggers. <p> Triggers are checked at the end of each non-constant public method and if they evaluate to true are appended to a to-be-executed list. Trigger bodies are executed in separate transactions after the commit (not necessarily immediately after) of the transaction firing them. More recently Ode <ref> [GJS92] </ref> has proposed a language for specifying composite events. They specify complex events using a set of operators similar to Snoop [CM91]; events are declared within a class at class definition time. Basic (primitive) events are defined and composite events are constructed by applying operators to basic events.
Reference: [HLM88] <author> M. Hsu, R. Ladin, and D. McCarthy. </author> <title> An Execution Model for Active Data Base Management Systems. </title> <booktitle> In Proceedings 3rd International Conference on Data and Knowledge Bases, </booktitle> <month> Jun. </month> <year> 1988. </year>
Reference-contexts: Constraints are further classified into soft and hard constraints. Soft constraints allow temporal inconsistencies to exist within a transaction and thus are checked at the end (before commit) of a transaction, i.e., in deferred coupling mode of HiPAC <ref> [HLM88] </ref>. In contrast, hard constraints are checked at the end of each non-constant public method, i.e., the immediate coupling mode. Triggers in Ode are parameterized and are of two types: perpetual and once-only.
Reference: [Int90] <institution> InterBase Software Corporation, Bedford, </institution> <address> MA. </address> <note> InterBase DDL Reference Manual, InterBase Version 3.0, </note> <year> 1990. </year>
Reference-contexts: 1 Introduction The need and the relevance of reactive capability as a unifying paradigm for handling a number of database features are well-established. Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems <ref> [C + 89, SHP88, WF90, DB87, Int90] </ref>. Recently, there have been a number of attempts [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] at incorporating event and rule support into an object-oriented database management system (OODBMS).
Reference: [JQ92] <author> H. V. Jagadish and X. Qian. </author> <title> Integrity Maintenance in an Object-Oriented Database. </title> <booktitle> In Proceedings International Conference on Very Large Data Bases, </booktitle> <address> Vancouver, BC, Canada, </address> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: We consider this generalization extremely important as the expressiveness and the extensibility of the resulting system is significantly enhanced (Ode has tried to implement the functionality of inter-object rules in a straightforward manner by making the same set of rules applicable to more than one object class <ref> [JQ92] </ref>). This feature enables the seamless integration of rules as well. The remainder of this paper is structured as follows. Section 2 provides the motivation for our approach. In section 3 we provide the design overview and the rationale behind it. Section 4 provides implementation details.
Reference: [Mau92] <author> L. Maugis. </author> <title> Adequacy of active oodbms to flight data processing servers. </title> <type> Master's thesis, </type> <institution> National School of Civil Aviation / University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> August </month> <year> 1992. </year>
Reference: [Mis91] <author> D. Mishra. Snoop: </author> <title> An event specification language for active databases. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Aug. </month> <year> 1991. </year> <month> 29 </month>
Reference-contexts: We intend to transform a higher-level user specification of an active database to Sentinel, * Our work supports the specification and detection of complex events. However, we have only supported a subset of the events specified in Snoop <ref> [Mis91] </ref> and the most recent context for parameter computation.
Reference: [MP90] <author> C. B. Medeiros and P. Pfeffer. </author> <title> A Mechanism for Managing Rules in an Object-oriented Database. </title> <type> Technical report, </type> <institution> GIP Altair, </institution> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one. <p> Currently, three approaches are used: i) events as expressions declared within class definitions, e.g., Ode [GJ91, GJS92], ii) events as rule attributes, e.g., Bauz <ref> [MP90] </ref>, and iii) events as first class objects, e.g., ADAM [DPG91]. Below, we discuss the advantages and disadvantages of each approach. Events as Expressions : This approach is motivated by runtime processing gains, since processing of event specification is performed primarily at compile time and little or none at runtime. <p> After creating the rule, it subscribes to the events generated by the IBM stock instance and the DowJones FinancialInfo instance. 6 Related Work Although a number of efforts have addressed incorporating active capability in the context of an OODBMS <ref> [SKL89, MP90, C + 89] </ref>, mostly Ode [GJ91, GJS92] and ADAM [DPG91] are pertinent to the material presented in this paper. Below, we briefly summarize them. 25 Ode provides active behavior by the incorporation of rules, in the form of constraints and triggers.
Reference: [PP91] <author> Edward Perez and Robert W. Peterson. </author> <title> Zeitgeist Persistent C++ User Manual. </title> <institution> Information Technologies Laboratory Technical Report 90-07-02, </institution> <year> 1991. </year>
Reference-contexts: Lastly and more importantly, rules triggered by events spanning distinct classes can be expressed. This is accomplished by a rule subscribing to the events generated by instances of different classes. 4 Implementation Details The Sentinel system is being developed using Zeitgeist, an OODBMS developed at Texas Instruments, Dallas <ref> [PP91] </ref>. Zeitgeist is an open, modular, extensible architecture for object oriented database systems, implemented in C++ on Sun4 Unix platforms. In order to incorporate rules in Zeitgeist we modified the class hierarchy to include newly defined classes, namely, the Reactive, Notifiable, Event and Rule classes.
Reference: [SHP88] <author> M. Stonebraker, M. Hanson, and S. Potamianos. </author> <title> The POSTGRES rule manager. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(7) </volume> <pages> 897-907, </pages> <month> Jul. </month> <year> 1988. </year>
Reference-contexts: 1 Introduction The need and the relevance of reactive capability as a unifying paradigm for handling a number of database features are well-established. Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems <ref> [C + 89, SHP88, WF90, DB87, Int90] </ref>. Recently, there have been a number of attempts [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] at incorporating event and rule support into an object-oriented database management system (OODBMS).
Reference: [SKL89] <author> S. Y. W. Su, V. Krishnamurthy, and H. Lam. </author> <title> "An Object-Oriented Semantic Association Model (OSAM*)". </title> <booktitle> Theoretical Issues and Applications in Industrial Engineering and Manufacturing, </booktitle> <pages> pages 242-251, </pages> <year> 1989. </year>
Reference-contexts: Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems [C + 89, SHP88, WF90, DB87, Int90]. Recently, there have been a number of attempts <ref> [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] </ref> at incorporating event and rule support into an object-oriented database management system (OODBMS). Clearly, there is a paradigm shift when we move from the relational model to an object-oriented one. <p> After creating the rule, it subscribes to the events generated by the IBM stock instance and the DowJones FinancialInfo instance. 6 Related Work Although a number of efforts have addressed incorporating active capability in the context of an OODBMS <ref> [SKL89, MP90, C + 89] </ref>, mostly Ode [GJ91, GJS92] and ADAM [DPG91] are pertinent to the material presented in this paper. Below, we briefly summarize them. 25 Ode provides active behavior by the incorporation of rules, in the form of constraints and triggers.
Reference: [WF90] <author> J. Widom and S. Finkelstein. </author> <title> Set-Oriented Production Rules in Relational Database Systems. </title> <booktitle> In Proc. of ACM-SIGMOD, </booktitle> <pages> pages 259-270, </pages> <month> May </month> <year> 1990. </year> <month> 30 </month>
Reference-contexts: 1 Introduction The need and the relevance of reactive capability as a unifying paradigm for handling a number of database features are well-established. Most of the earlier research on active databases and commercial implementations have concentrated on the support for active capability in the context of relational database systems <ref> [C + 89, SHP88, WF90, DB87, Int90] </ref>. Recently, there have been a number of attempts [GJS92, GJ91, DPG91, MP90, SKL89, CHS93, Anw92, CN90] at incorporating event and rule support into an object-oriented database management system (OODBMS).
References-found: 24

