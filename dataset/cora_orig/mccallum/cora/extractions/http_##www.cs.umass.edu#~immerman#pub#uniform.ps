URL: http://www.cs.umass.edu/~immerman/pub/uniform.ps
Refering-URL: http://www.cs.umass.edu/~immerman/pub_immerman.html
Root-URL: 
Title: Time, Hardware, and Uniformity  
Author: David Mix Barrington Neil Immerman 
Note: This is page 1 Printer: Opaque this  
Abstract: We describe three orthogonal complexity measures: parallel time, amount of hardware, and degree of non-uniformity, which together parametrize most complexity classes. We show that the descriptive complexity framework neatly captures these measures using three parameters: quantifier depth, number of variables, and type of numeric predicates, respectively. A fairly simple picture arises in which the basic questions in complexity theory | solved and unsolved | can be understood as ques tions about tradeoffs among these three dimensions.
Abstract-found: 1
Intro-found: 1
Reference: [A] <author> E. Allender, </author> <title> "P-uniform circuit complexity," </title> <journal> JACM, </journal> <volume> 36 (1989), 912 - 928. </volume>
Reference-contexts: This resource forms the third axis of our parametrization of complexity classes. It exists in other models as well | "advice" given to Turing machines [KL], or precomputation in parallel machines <ref> [A] </ref>. At each point on our two-dimensional chart, we have a range of complexity classes obtained by varying the uniformity condition. For example, if both size and depth are polynomially bounded the chart indicates the class P of languages decided by polynomial-time Turing machines. <p> The following theorem gives two examples of a very general phenomenon. The idea of capturing polynomial-time uniformity via the unary form of an EXPTIME complete problem is from <ref> [A] </ref>. Theorem 5.2 Theorem 3.3 remains true in both the non-uniform and the polynomial-time uniform settings. More precisely, the classes mentioned in that theorem remain equal in the following cases: 1.
Reference: [AG] <author> E. Allender and V. Gore, </author> <title> "A uniform circuit lower bound for the permanent," </title> <journal> SIAM J. Comput., </journal> <volume> 23 (1994), </volume> <pages> 1026-1049. </pages>
Reference-contexts: In general our techniques for proving lower bounds on circuit complexity are combinatorial and algebraic and apply to the totally non-uniform versions of the circuit classes. A notable exception is the result by Allender and Gore <ref> [AG] </ref> that the integer permanent function is not in DPOLYLOGTIME-uniform qACC 0 , though for all we know it might be in LOGSPACE-uniform ACC 0 . There is a certain amount of oversimplification in thinking of each of our three parameters as a single axis. <p> It is then possible to speak of "logically uniform circuits", and the traditional uniformity conditions which happen to coincide with logical uniformity (such as DLOGTIME uniformity for constant-depth circuits) are thus better motivated. Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity <ref> [AG, B92] </ref> of the upper bounds on the power of ACC 0 [Y, BT, GKR] and the relationship between threshold circuits and algebraic circuits over GF (2 n ) [Re, BFS, FVB].
Reference: [B89] <author> D. Barrington, </author> <title> "Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 ," J. </title> <institution> Comp. Syst. Sci. </institution> <month> 38 </month> <year> (1989), </year> <pages> 150-164. </pages>
Reference-contexts: Though it is not entirely satisfactory, we do develop enough machinery to bring the constant-width char acterizations of NC 1 <ref> [B89] </ref> and PSPACE [CF] into the framework. 2 Background: Descriptive Complexity In this section we will give an overview of the basic definitions of descriptive complexity theory. For more detailed presentations of this same material, see [I87] or [I89]. <p> We then apply the construction of <ref> [B89] </ref> to get an exponential-length branching program of constant width (easily convertible into the desired circuit of constant width).
Reference: [B90] <author> D.A.M. Barrington, </author> <title> "Extensions of an idea of McNaughton," </title> <journal> Math. Systems Theory, </journal> <volume> 23 (1990), </volume> <pages> 147-164. </pages>
Reference-contexts: More recently (along with Straubing) <ref> [BIS, B90] </ref>, we have extended the framework to deal with the third dimension and with more general operations, in the context of first-order formulas (or constant-depth, poly-size circuits).
Reference: [B92] <author> D.A.M. Barrington, </author> <title> "Quasipolynomial size circuit classes," </title> <booktitle> 7th Structure in Complexity Theory Conference (1992), </booktitle> <pages> 86-93. </pages>
Reference-contexts: Blanks indicate classes where both are bounded below polynomially, and thus the resulting circuits cannot access the entire input. The named classes are fairly standard, except for the use of a prefix "q" to indicate a change from a polynomial to a quasipolynomial size bound <ref> [B92] </ref>. Thus qNC is the class of languages decidable by circuit families of poly-log depth and quasipolynomial size | it is a robust class which occurs several times on the chart. <p> It is then possible to speak of "logically uniform circuits", and the traditional uniformity conditions which happen to coincide with logical uniformity (such as DLOGTIME uniformity for constant-depth circuits) are thus better motivated. Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity <ref> [AG, B92] </ref> of the upper bounds on the power of ACC 0 [Y, BT, GKR] and the relationship between threshold circuits and algebraic circuits over GF (2 n ) [Re, BFS, FVB]. <p> This extends the treatment of quasipolynomial-size circuit classes in <ref> [B92] </ref>. * In Section 5 we show that adding new atomic predicates to the formalism corresponds to allowing the boolean circuits to be less uniform.
Reference: [BIS] <author> D. Barrington, N. Immerman, H. Straubing, </author> <title> "On uniformity within NC 1 ," JCSS 41(3 (1990), </title> <type> 274 - 306. </type>
Reference-contexts: This claim is true if the circuits are P-uniform (computable by a poly-time Turing machine), or if they are DLOGTIME uniform (direct connection language decidable by a random-access Turing machine in time O (log n), see <ref> [BIS] </ref>), or any uniformity condition in between. However, if we allow ourselves more than polynomial time to compute the circuit, we may be 1. Time, Hardware, and Uniformity 3 able to decide more languages. (If we allow ourselves enough extra time, we can definitely do so. <p> The distinction can be quite important, as we see in the case of the class NC 1 . As shown in <ref> [BIS] </ref>, we can define a very restrictive uniformity notion under which NC 1 becomes the class of regular languages. If our non-uniformity resource is between DLOGTIME and NC 1 itself, we get a robust class, equal to ALOGTIME. <p> More recently (along with Straubing) <ref> [BIS, B90] </ref>, we have extended the framework to deal with the third dimension and with more general operations, in the context of first-order formulas (or constant-depth, poly-size circuits). <p> turns out that this class is a familiar one from circuit complexity and parallel complexity | it equals the log-time uniform version of the circuit class AC 0 and also the problems solvable in constant time by a natural parallel machine (a version of a PRAM) with polynomially many processors <ref> [BIS] </ref>. All of our later descriptive complexity classes may be viewed as augmentations of this class FO. As a first example, consider adding a new quantifier to 9 and 8. <p> With this new tool in our first-order language, we can define a larger set of problems called FOM. This class is also familiar, as it is equal to the log-time uniform version of ThC 0 , the problems solvable by constant-depth, polynomial-size threshold circuits <ref> [BIS] </ref>. After building up some more machinery, we will describe a general method to produce new operators of this kind. First-Order Reductions In this section we define first-order reductions, which provide the most natural way to reduce one problem to another in the descriptive setting. <p> General Operators First-order reductions give us a mechanism for forming an operator out of any problem fi. The operator, which we will also call fi, acts rather like a quantifier (and in fact this construction extends the "generalized quantifiers" of <ref> [BIS] </ref>). A very similar construction is used in [MP] and in [KV], where the operator we call fi would be denoted Q fi . Definition 2.5 ([IL]) (Operator Form of a Problem) Let and t be vocabularies, and let fi STRUC [t ] be any problem. <p> We have already seen three special cases of this phenomenon | choosing fi to be the AND, OR, or MAJORITY languages gives the 8, 9, and M quantifiers respectively. The generalized quantifiers in <ref> [BIS] </ref>, corresponding to languages over larger alphabets, fit into this framework with t having a unary predicate for each letter of the language. We can repeat this process, applying the fi operator to a formula in which fi already appears. <p> Our main result in this section, generalizing basic results in <ref> [BIS] </ref> and [IL], is that the known relationships between first-order descriptive complexity classes and other standard parallel complexity classes are not affected by the introduction of the fi operators. This result will be the basis of all our discussions of uniformity in the remainder of the paper. <p> The uniformity condition, then, will constrain the difficulty of computing the predicate IN#(g; h; i), meaning that gate h is input number i of gate g. (This predicate is the natural generalization of the "direct connection language" of <ref> [Ru, BIS] </ref>.) A circuit is a directed, acyclic graph. The leaves of the circuit are the input nodes. Every other vertex is a gate. The edges of the circuit indicate connections between nodes. <p> Again, the proof from [I89b] goes through with the change that occurrences of fi in the inductive definition are copied into the quantifier block. (4 3): This is immediate since DLOGTIME is contained in FO <ref> [BIS] </ref>. (3 2): Here we are given the first-order uniform AC (fi)[t (n)] circuits. We produce an FO (fi) inductive definition of the value of each gate in the circuit. The depth of the induction will be equal to the depth of the circuit. <p> In <ref> [BIS] </ref> the weaker condition was used that the ordering of the inputs was given. Then the assumption that all operators were "monoidal" was used: the appropriate formula was constructed by entering benign identity elements between the valid inputs. <p> Fact 5.1 ([I87]) A problem S is in Non-uniform AC 0 iff for some numeric predicate N , S is expressible in the language FO (N ). It seems, after a fair amount of investigation and soul searching <ref> [I89b, BIS, L] </ref> that the "right" lowest level of uniformity corresponds to the numeric predicates ; BIT. (This is equivalent to the set ; +; fi.) Once we have a little bit of computation, such as a majority quantifier or the deterministic transitive closure operator, all that is needed is and <p> the "right" lowest level of uniformity corresponds to the numeric predicates ; BIT. (This is equivalent to the set ; +; fi.) Once we have a little bit of computation, such as a majority quantifier or the deterministic transitive closure operator, all that is needed is and BIT is superfluous <ref> [BIS, I87] </ref>. The following theorem gives two examples of a very general phenomenon. The idea of capturing polynomial-time uniformity via the unary form of an EXPTIME complete problem is from [A]. Theorem 5.2 Theorem 3.3 remains true in both the non-uniform and the polynomial-time uniform settings. <p> We then apply the construction of [B89] to get an exponential-length branching program of constant width (easily convertible into the desired circuit of constant width). Essentially (as explained in <ref> [BIS] </ref>) a gate number in the constant-width circuit encodes both a leaf node of the poly-depth circuit (and hence a pair of configurations of the original Turing machine) and an indication of which element of the group S 5 is to be computed by this level. <p> The values of the 2 r gates at level t of the circuit are determined in a DLOGTIME-definable way from t and the values at level t 1, and from the input. Recall that DLOGTIME is contained in FO <ref> [BIS] </ref>. Thus we can write this relationship in a first-order formula '(b 1 ; : : : ; b r ; G t1 ).
Reference: [BCH] <author> P. Beame, S. Cook, H.J. </author> <title> Hoover, "Log depth circuits for division and related problems," </title> <journal> SIAM J. Comput. </journal> <volume> 15(4) (1986), </volume> <pages> 994-1003. </pages>
Reference-contexts: If our non-uniformity resource is between DLOGTIME and NC 1 itself, we get a robust class, equal to ALOGTIME. And if we allow polynomial time to build our circuits, we can then do integer division and related problems <ref> [BCH] </ref> which (as far as we know) we couldn't do before. This may be an example of where non-uniformity can replace one of the other two resources. In some cases, we know of limits on the potential power of non-uniformity to do so, at least subject to complexity-theoretic assumptions.
Reference: [BT] <author> R. Beigel and J. Tarui, </author> <booktitle> "On ACC", Computational Complexity 4 (1994), </booktitle> <pages> 367-382. </pages>
Reference-contexts: Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity [AG, B92] of the upper bounds on the power of ACC 0 <ref> [Y, BT, GKR] </ref> and the relationship between threshold circuits and algebraic circuits over GF (2 n ) [Re, BFS, FVB]. In this paper we show that the descriptive complexity framework can deal with all three dimensions and with general operations, in virtually any possible combination.
Reference: [BFS] <author> J. Boyar, G. S. Frandsen, and C. Sturtivant, </author> <title> "An arithmetic model of computation equivalent to threshold circuits", </title> <booktitle> Theoretical Computer Science 93 (1992), </booktitle> <pages> 303-319. </pages>
Reference-contexts: Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity [AG, B92] of the upper bounds on the power of ACC 0 [Y, BT, GKR] and the relationship between threshold circuits and algebraic circuits over GF (2 n ) <ref> [Re, BFS, FVB] </ref>. In this paper we show that the descriptive complexity framework can deal with all three dimensions and with general operations, in virtually any possible combination.
Reference: [CF] <author> Jin-Yi Cai and Merrick Furst, </author> <title> "PSPACE survives three-bit bottlenecks", </title> <booktitle> International Journal on Foundations of Computer Science, </booktitle> <month> 2(1) </month> <year> (1991) </year> <month> 67-76. </month>
Reference-contexts: Though it is not entirely satisfactory, we do develop enough machinery to bring the constant-width char acterizations of NC 1 [B89] and PSPACE <ref> [CF] </ref> into the framework. 2 Background: Descriptive Complexity In this section we will give an overview of the basic definitions of descriptive complexity theory. For more detailed presentations of this same material, see [I87] or [I89]. <p> We have to prohibit explicit use of such variables, while retaining them in order to talk about the others. It is absolutely necessary that our formulas, like the "bottleneck machines" of <ref> [CF] </ref>, have access to a read-only clock. Thus we will allow the 20 David Mix Barrington, Neil Immerman formulas within the quantifier block to have access to a variable t, which will indicate which iteration of the quantifier block we are currently in.
Reference: [CS] <author> Jin-Yi Cai and D. Sivakumar, </author> <title> "The resolution of a Hartmanis conjecture", </title> <booktitle> 36th Annual Symposium on Foundations of Computer Science (1995), </booktitle> <pages> 362-371. </pages>
Reference-contexts: It would be interesting to have a parallel result for P and NC, and recent work of Ogihara, Cai, and Sivakumar <ref> [O, CS] </ref> has made progress toward this. One would like to derive unlikely complexity-theoretic consequences from, for example, the hypothesis that non-uniform NC 1 contains uniform P, or equivalently that there is a sparse set complete for P under NC 1 Turing reductions.
Reference: [FVB] <author> G. S. Frandsen, M. Valence, and D. A. M. Barrington, </author> <title> "Some results on uniform arithmetic circuit complexity", Math. </title> <booktitle> Systems Theory 27 (1994), </booktitle> <pages> 105-124. </pages>
Reference-contexts: Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity [AG, B92] of the upper bounds on the power of ACC 0 [Y, BT, GKR] and the relationship between threshold circuits and algebraic circuits over GF (2 n ) <ref> [Re, BFS, FVB] </ref>. In this paper we show that the descriptive complexity framework can deal with all three dimensions and with general operations, in virtually any possible combination.
Reference: [GKR] <author> F. Green, J. Kobler, K. Regan, T. Schwentick, and J. Toran, </author> <title> "The power of the middle bit of a #P function", </title> <journal> J. Comp. Syst. </journal> <note> Sci., to appear. </note>
Reference-contexts: Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity [AG, B92] of the upper bounds on the power of ACC 0 <ref> [Y, BT, GKR] </ref> and the relationship between threshold circuits and algebraic circuits over GF (2 n ) [Re, BFS, FVB]. In this paper we show that the descriptive complexity framework can deal with all three dimensions and with general operations, in virtually any possible combination.
Reference: [H] <author> Hong Jia-Wei, </author> <title> Computation: Computability, Similarity, and Duality, </title> <address> (New York: </address> <publisher> John Wiley & Sons, </publisher> <year> 1986). </year> <title> 1. Time, Hardware, and Uniformity 23 </title>
Reference-contexts: These two dimensions of complexity are identifiable in all the usual models: boolean circuits (width and depth), PRAMs or other explicit parallel machines (number of processors and parallel time), alternating Turing machines (space and alternations) or even deterministic Turing machines (space and reversals). Hong's book <ref> [H] </ref> gives an interesting general treatment of "similarity" between models and "duality" between these two complexity measures. well-known) complexity classes. To be precise about our axes, we have chosen (unbounded fan-in) circuit depth as our measure of "parallel time" and circuit width as our measure of "number of processes".
Reference: [I86] <author> N. Immerman, </author> <title> "Relational Queries Computable in Polynomial Time," </title> <booktitle> Information and Control 68 (1986), </booktitle> <pages> 86-104. </pages>
Reference-contexts: Here G t1 (b 0 1 ; : : : ; b 0 r ) is a relation that codes the state of the 2 r gates at time t 1. Using a standard, syntactic trick, (Corollary 5.3 in <ref> [I86] </ref>), we 1.
Reference: [I87] <author> N. Immerman, </author> <title> "Languages that capture complexity classes," </title> <journal> SIAM J. Comput. </journal> <volume> 16(4) (1987), </volume> <pages> 760-778. </pages>
Reference-contexts: Here we consider these three dimensions and the variety of operations in the framework of descriptive complexity, where we measure the complexity of a language by the syntactic resources (in a particular logical formalism) needed to express the property of membership in it <ref> [I87, I89, I89b] </ref>. (We review this framework in Section 2 below.) It has been known for some time that two parameters in descriptive complexity, number of variables and quantifier depth, correspond exactly to space and parallel time in either the circuit or PRAM models [I89b]. <p> For more detailed presentations of this same material, see <ref> [I87] </ref> or [I89]. We will closely follow the development in [IL], especially for the notions of reductions and operators. Any complexity theory starts with a formally defined set of problems, a model of computation, and a set of resource bounds. <p> There is an ff-path from hmin; mini to hmax; maxi iff every vertex in the graph is reachable from min. For undirected graphs, this is equivalent to connectivity, CONNECTIVITY REACH (I c ) (2.7) It is shown in <ref> [I87] </ref> and [I88] that the language FO (TC) is equal to NL and has the qfp normal form property. It thus follows that every problem in NL is expressible in the form of Equation 2.7, with I c replaced by other qfp's. <p> the "right" lowest level of uniformity corresponds to the numeric predicates ; BIT. (This is equivalent to the set ; +; fi.) Once we have a little bit of computation, such as a majority quantifier or the deterministic transitive closure operator, all that is needed is and BIT is superfluous <ref> [BIS, I87] </ref>. The following theorem gives two examples of a very general phenomenon. The idea of capturing polynomial-time uniformity via the unary form of an EXPTIME complete problem is from [A]. Theorem 5.2 Theorem 3.3 remains true in both the non-uniform and the polynomial-time uniform settings.
Reference: [I88] <author> Neil Immerman, </author> <title> "Nondeterministic Space is Closed Under Complementation," </title> <journal> SIAM J. Comput. </journal> <volume> 17(5) (1988), </volume> <pages> 935-938. </pages>
Reference-contexts: There is an ff-path from hmin; mini to hmax; maxi iff every vertex in the graph is reachable from min. For undirected graphs, this is equivalent to connectivity, CONNECTIVITY REACH (I c ) (2.7) It is shown in [I87] and <ref> [I88] </ref> that the language FO (TC) is equal to NL and has the qfp normal form property. It thus follows that every problem in NL is expressible in the form of Equation 2.7, with I c replaced by other qfp's.
Reference: [I89] <author> N. Immerman, </author> <title> "Descriptive and computational complexity," Computational Complexity Theory, </title> <editor> ed. J. Hartmanis, </editor> <booktitle> Proc. Symp. in Applied Math., 38, American Mathematical Society (1989), </booktitle> <pages> 75-91. </pages>
Reference-contexts: Here we consider these three dimensions and the variety of operations in the framework of descriptive complexity, where we measure the complexity of a language by the syntactic resources (in a particular logical formalism) needed to express the property of membership in it <ref> [I87, I89, I89b] </ref>. (We review this framework in Section 2 below.) It has been known for some time that two parameters in descriptive complexity, number of variables and quantifier depth, correspond exactly to space and parallel time in either the circuit or PRAM models [I89b]. <p> For more detailed presentations of this same material, see [I87] or <ref> [I89] </ref>. We will closely follow the development in [IL], especially for the notions of reductions and operators. Any complexity theory starts with a formally defined set of problems, a model of computation, and a set of resource bounds. <p> It is important to note that when we repeat a quantifier block the variables are not changed. Thus an FO [t (n)] formula uses only a bounded number of distinct variables. For more detail see <ref> [I89] </ref>. Definition 3.1 ([I89]) A set C of structures of vocabulary t is a member of F O [t (n)] iff there exist quantifier-free formulas M i , 0 i k, from L (t ), and a quantifier block, QB = (Q 1 v 1 :M 1 ) : : : <p> Time, Hardware, and Uniformity 13 Similarly, we define IND (fi)[t (n)] to be the set of problems definable by first-order inductive definitions with fi operators, with inductive depth at most t (n). Extending the argument in <ref> [I89] </ref>, this complexity class is equivalent to the restriction of FO (LFP; fi) in which all applications of LFP have depth of nesting at most t (n).
Reference: [I89b] <author> N. Immerman, </author> <title> "Expressibility and parallel complexity," </title> <journal> SIAM J. Comput. </journal> <volume> 18 (1989), </volume> <pages> 625-638. </pages>
Reference-contexts: Here we consider these three dimensions and the variety of operations in the framework of descriptive complexity, where we measure the complexity of a language by the syntactic resources (in a particular logical formalism) needed to express the property of membership in it <ref> [I87, I89, I89b] </ref>. (We review this framework in Section 2 below.) It has been known for some time that two parameters in descriptive complexity, number of variables and quantifier depth, correspond exactly to space and parallel time in either the circuit or PRAM models [I89b]. <p> the property of membership in it [I87, I89, I89b]. (We review this framework in Section 2 below.) It has been known for some time that two parameters in descriptive complexity, number of variables and quantifier depth, correspond exactly to space and parallel time in either the circuit or PRAM models <ref> [I89b] </ref>. More recently (along with Straubing) [BIS, B90], we have extended the framework to deal with the third dimension and with more general operations, in the context of first-order formulas (or constant-depth, poly-size circuits). <p> Specifically: * In Section 2 we review the descriptive complexity framework and define quantifiers for arbitrary operations. * In Section 3 we prove that the relationship of <ref> [I89b] </ref> between descriptive complexity, circuits, and PRAMs holds in the presence of these arbitrary operations | adding the new quantifiers to the logical formalism corresponds exactly to adding a new type of gate to the circuits or a new global operation to the PRAMs. If both circuit depth 1. <p> This result will be the basis of all our discussions of uniformity in the remainder of the paper. First, however, we must specify the exact definitions of our various parallel models. Following <ref> [I89b] </ref>, we choose as our parallel machine model the CRCW-PRAM with polynomially much hardware. The complexity class CRAM [t (n)] is the set of problems solvable by such a CRCW-PRAM in parallel time t (n). <p> FO (fi)[t (n)] 3. First-order uniform AC (fi)[t (n)] 4. DLOGTIME uniform AC (fi)[t (n)] 5. CRAM (fi)[t (n)] Proof (1 = 2 = 5): This is very similar to the proof of the same fact without fi <ref> [I89b] </ref>. The proof that IND (fi)[t (n)] contains CRAM (fi)[t (n)] is least different: we can inductively describe the entire configuration of the CRAM at some time t + 1 in terms of its configuration at time t. <p> Finally we show, by induction on the structure of the inductive definition, that FO (fi)[t (n)] contains IND (fi)[t (n)]. The idea is that we can rewrite any positive first-order inductive definition into a quantifier block as in Definition 3.2. Again, the proof from <ref> [I89b] </ref> goes through with the change that occurrences of fi in the inductive definition are copied into the quantifier block. (4 3): This is immediate since DLOGTIME is contained in FO [BIS]. (3 2): Here we are given the first-order uniform AC (fi)[t (n)] circuits. <p> With these points modified as above, Theorem 3.3 remains true when the restriction that t (n) be polynomially bounded is removed. 4 Variables That Are Longer Than log n Bits We know from <ref> [I89b, I91] </ref> that the number v of log n-bit variables in a formula corresponds approximately to the amount of hardware n v in a circuit or CRAM. Thus, a constant number of log n bit variables gives us the usual bound of polynomial hardware. <p> Fact 5.1 ([I87]) A problem S is in Non-uniform AC 0 iff for some numeric predicate N , S is expressible in the language FO (N ). It seems, after a fair amount of investigation and soul searching <ref> [I89b, BIS, L] </ref> that the "right" lowest level of uniformity corresponds to the numeric predicates ; BIT. (This is equivalent to the set ; +; fi.) Once we have a little bit of computation, such as a majority quantifier or the deterministic transitive closure operator, all that is needed is and
Reference: [I91] <author> N. Immerman, "DSPACE[n k ] = VAR[k+1]," </author> <booktitle> 6th Structure in Complexity Theory Conf. </booktitle> <year> (1991), </year> <pages> 334-340. </pages>
Reference-contexts: With these points modified as above, Theorem 3.3 remains true when the restriction that t (n) be polynomially bounded is removed. 4 Variables That Are Longer Than log n Bits We know from <ref> [I89b, I91] </ref> that the number v of log n-bit variables in a formula corresponds approximately to the amount of hardware n v in a circuit or CRAM. Thus, a constant number of log n bit variables gives us the usual bound of polynomial hardware.
Reference: [IL] <author> N. Immerman, S. Landau, </author> <title> "The complexity of iterated multiplication," </title> <booktitle> Information and Computation 116(1) (1995), </booktitle> <pages> 103-116. </pages>
Reference-contexts: For more detailed presentations of this same material, see [I87] or [I89]. We will closely follow the development in <ref> [IL] </ref>, especially for the notions of reductions and operators. Any complexity theory starts with a formally defined set of problems, a model of computation, and a set of resource bounds. Our central notion will be to replace deciding a problem by describing it. <p> Our main result in this section, generalizing basic results in [BIS] and <ref> [IL] </ref>, is that the known relationships between first-order descriptive complexity classes and other standard parallel complexity classes are not affected by the introduction of the fi operators. This result will be the basis of all our discussions of uniformity in the remainder of the paper.
Reference: [KL] <author> R. M. Karp and R. J. Lipton, </author> <title> "Turing machines that take advice", </title> <journal> Enseign. Math. </journal> <volume> 28 (1982), </volume> <pages> 191-209. </pages>
Reference-contexts: It is equally sensible to speak of nonuniformity as a resource, more of which allows a circuit family to decide more languages. This resource forms the third axis of our parametrization of complexity classes. It exists in other models as well | "advice" given to Turing machines <ref> [KL] </ref>, or precomputation in parallel machines [A]. At each point on our two-dimensional chart, we have a range of complexity classes obtained by varying the uniformity condition. For example, if both size and depth are polynomially bounded the chart indicates the class P of languages decided by polynomial-time Turing machines. <p> This may be an example of where non-uniformity can replace one of the other two resources. In some cases, we know of limits on the potential power of non-uniformity to do so, at least subject to complexity-theoretic assumptions. For example, Karp and Lipton <ref> [KL] </ref> have shown that no amount of non-uniformity can allow P to simulate all of (uniform) NP, unless the polynomial hierarchy collapses to the second level.
Reference: [KV] <author> Phokion Kolaitis and Jouko Vaananen, </author> <title> "Generalized Quantifiers and Pebble Games on Finite structures, </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 74(1) (1995), </volume> <pages> 23-75. </pages>
Reference-contexts: The operator, which we will also call fi, acts rather like a quantifier (and in fact this construction extends the "generalized quantifiers" of [BIS]). A very similar construction is used in [MP] and in <ref> [KV] </ref>, where the operator we call fi would be denoted Q fi . Definition 2.5 ([IL]) (Operator Form of a Problem) Let and t be vocabularies, and let fi STRUC [t ] be any problem. Let I be any first-order reduction with I : STRUC [] ! STRUC [t ].
Reference: [L] <author> S. Lindell, </author> <title> "A purely logical characterization of circuit uniformity," </title> <booktitle> 7th Structure in Complexity Theory Conf. </booktitle> <year> (1992), </year> <pages> 185-192. </pages>
Reference-contexts: Fact 5.1 ([I87]) A problem S is in Non-uniform AC 0 iff for some numeric predicate N , S is expressible in the language FO (N ). It seems, after a fair amount of investigation and soul searching <ref> [I89b, BIS, L] </ref> that the "right" lowest level of uniformity corresponds to the numeric predicates ; BIT. (This is equivalent to the set ; +; fi.) Once we have a little bit of computation, such as a majority quantifier or the deterministic transitive closure operator, all that is needed is and
Reference: [MP] <author> J.A. Makowsky and Y.B. Pnueli, </author> <title> "Computable quantifiers and logics over finite structures," to appear in Quantifiers: Generalizations, Extensions and Variants of Elementary Logic (Kluwer Academic Publishers, </title> <year> 1993). </year>
Reference-contexts: General Operators First-order reductions give us a mechanism for forming an operator out of any problem fi. The operator, which we will also call fi, acts rather like a quantifier (and in fact this construction extends the "generalized quantifiers" of [BIS]). A very similar construction is used in <ref> [MP] </ref> and in [KV], where the operator we call fi would be denoted Q fi . Definition 2.5 ([IL]) (Operator Form of a Problem) Let and t be vocabularies, and let fi STRUC [t ] be any problem.
Reference: [O] <author> Mitsunori Ogihara, </author> <title> "Sparse P-hard sets yield space-efficient algorithms", </title> <booktitle> 36th Annual Symposium on Foundations of Computer Science (1995), </booktitle> <pages> 354-361. </pages>
Reference-contexts: It would be interesting to have a parallel result for P and NC, and recent work of Ogihara, Cai, and Sivakumar <ref> [O, CS] </ref> has made progress toward this. One would like to derive unlikely complexity-theoretic consequences from, for example, the hypothesis that non-uniform NC 1 contains uniform P, or equivalently that there is a sparse set complete for P under NC 1 Turing reductions.
Reference: [Re] <author> J. Reif, </author> <title> "On threshold circuits and polynomial computation," </title> <booktitle> 2nd Structure in Complexity Theory Conf. </booktitle> <year> (1987), </year> <pages> 118-123. </pages>
Reference-contexts: Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity [AG, B92] of the upper bounds on the power of ACC 0 [Y, BT, GKR] and the relationship between threshold circuits and algebraic circuits over GF (2 n ) <ref> [Re, BFS, FVB] </ref>. In this paper we show that the descriptive complexity framework can deal with all three dimensions and with general operations, in virtually any possible combination.
Reference: [Ru] <author> L. Ruzzo, </author> <title> "On uniform circuit complexity," </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 21(2) (1981), </volume> <pages> 365-383. </pages>
Reference-contexts: The uniformity condition, then, will constrain the difficulty of computing the predicate IN#(g; h; i), meaning that gate h is input number i of gate g. (This predicate is the natural generalization of the "direct connection language" of <ref> [Ru, BIS] </ref>.) A circuit is a directed, acyclic graph. The leaves of the circuit are the input nodes. Every other vertex is a gate. The edges of the circuit indicate connections between nodes.
Reference: [SV] <author> Larry Stockmeyer and Uzi Vishkin, </author> <title> "Simulation of Parallel Random Access Machines by Circuits," </title> <journal> SIAM J. of Comp. </journal> <volume> 13(2) (1984), </volume> <pages> 409-422. </pages> <note> 24 David Mix Barrington, Neil Immerman </note>
Reference-contexts: In (4), the predicates of C n must all be computable in time DT IM E (log n), where n = jjAjj is the size of the input. In <ref> [SV] </ref>, the non-uniform versions of CRAM [t (n)] and AC [t (n)] were shown to be equal. Since then, many other connections have been estab 14 David Mix Barrington, Neil Immerman lished and they remain true in the uniform setting.
Reference: [V] <author> L.G. Valiant, </author> <title> "Reducibility by algebraic projections," </title> <journal> L'Enseigne-ment mathematique, </journal> <volume> 28 (1982), </volume> <pages> 253-268. </pages>
Reference-contexts: Furthermore, if the ' i 's are quantifier-free and do not include BIT then I is a quantifier-free reduction. 2 Valiant <ref> [V] </ref> defined a very low-level, non-uniform reduction called a pro jection.
Reference: [vM] <author> D. van Melkebeek, </author> <title> "Reducing P to a sparse set using a constant number of queries collapses P to L", </title> <note> Eleventh Annual IEEE Conference on Computational Complexity (formerly known as STRUCTURES) (1996), to appear. </note>
Reference-contexts: Cai and Sivakumar show that if there is a sparse set complete for P under (logspace uniform) NC 1 many-one reductions, then P is equal to (logspace uniform) NC 1 . D. van Melkebeek <ref> [vM] </ref> has subsequently shown a similar result for sparse sets complete under truth-table reductions. In general our techniques for proving lower bounds on circuit complexity are combinatorial and algebraic and apply to the totally non-uniform versions of the circuit classes.
Reference: [Y] <author> A. C. C. Yao, </author> <title> "On ACC and threshold circuits", </title> <booktitle> Proc. 31st Ann. IEEE Symp. Foundations of Computer Science (1990), </booktitle> <pages> 619-627. </pages>
Reference-contexts: Furthermore, proofs using logical uniformity are arguably simpler | two examples of this are the uniformity [AG, B92] of the upper bounds on the power of ACC 0 <ref> [Y, BT, GKR] </ref> and the relationship between threshold circuits and algebraic circuits over GF (2 n ) [Re, BFS, FVB]. In this paper we show that the descriptive complexity framework can deal with all three dimensions and with general operations, in virtually any possible combination.
References-found: 32

