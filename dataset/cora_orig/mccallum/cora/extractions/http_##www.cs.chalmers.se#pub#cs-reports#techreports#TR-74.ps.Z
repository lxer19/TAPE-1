URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/TR-74.ps.Z
Refering-URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/
Root-URL: 
Title: PROGRAMMING WITH BROADCASTS well with attempts to combine CCS with ML, including PFL [Hol83], Facile
Author: K. V. S. PRASAD 
Note: CBS compares  is unclear. All these  
Date: August 1993  
Abstract: Pra91, Pra92] develop CBS, a CCS-like calculus [Mil89] where processes communicate by broadcasting values along a single channel. These values are hidden or restricted by translation to noise. This paper types CBS and restricts it to processes with a unique response to each input. Non-determinism arises only if two processes in parallel both wish to transmit. These restrictions do not reduce the programming power of CBS. But strong and weak bisimulation can now be defined exactly as in CCS, yet capture observationally meaningful relations. Weak bisimulation is a congruence. This paper also shows how to program in CBS in a (lazy) ML framework. A simple CBS simulator is given, and a parallel implementation discussed. The simulator represents data evaluation, recursion and conditionals directly in Lazy ML. It implements an extended CBS with evaluation as well as com munication transitions. [Pra91, Pra92] develop a CCS-like [Mil89] calculus of broadcasting systems, CBS. This paper continues the development, restricting the calculus without losing programming power, and yet simplifying the semantics substantially. The new CBS is presented in Sections 1 to 4. [Pra91, Pra92] should be consulted for more motivation, discussion of design, and comparison with CCS. No knowledge of these papers is necessary, however. Familiarity with CCS will be helpful. This paper also describes a way to program in CBS in a (lazy) functional pro gramming framework [BW88], using a CBS simulator implemented in Lazy ML [AJ93] (LML for short). The resulting language is powerful, natural and well-typed. This part of the paper (Sections 5 to 7) is informal. It is not yet clear how to link proofs about the LML programs with proofs about CBS. Nonetheless, the programming concepts seem simple, and are now quite old; they are therefore reported here. The type system and many of the examples predate [Pra92]. The simplified CBS of this paper was inspired by programming experience. Key words and phrases. Broadcast communication, parallel computation, functional program ming, process calculi, bisimulation, observational equivalence. Author's address: Department of Computer Sciences, Chalmers University of Technology, S 412 96 Gothenburg, Sweden. E-mail: prasad@cs.chalmers.se. Reference: This paper was presented at CONCUR'93, Springer Verlag LNCS 715. 
Abstract-found: 1
Intro-found: 1
Reference: [AJ93] <author> Lennart Augustsson and Thomas Johnsson. </author> <title> Lazy ML user's manual. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year>
Reference-contexts: The process type, Proc *a, is given in Table 3. Recursion and conditionals are not part of it. These are taken from LML. The type system is that outlined earlier, and fits within the Lazy ML system. The constructor TRANS uses an existential type <ref> [Lau92, AJ93] </ref> *b that does not occur on the left hand side. The calculus implemented is PBS rather than CBS: there is no general guarded sum, only TALK. Example 9. rec P = LISTEN ("x.
Reference: [Ber93] <author> Bernard Berthomieu. </author> <title> Programming with behaviours in an ML framework; the syntax and semantics of LCS. </title> <type> Technical report, </type> <institution> LAAS-CNRS, Toulouse, </institution> <year> 1993. </year>
Reference: [BM91] <editor> J.-P. Ban^atre and D. Le Metayer, editors. </editor> <booktitle> Research Directions in High-Level Parallel Programming Languages. </booktitle> <publisher> Springer Verlag LNCS 574, </publisher> <year> 1991. </year>
Reference-contexts: More programming examples are needed to explore the applicability of CBS. Broadcast as a programming primitive has been neglected in the literature; among the few to deal with it are [HT92, YLC90, DK86]. The current version of CBS may be easier to relate to other models, of which GAMMA <ref> [BM91] </ref> and I/O automata [LT87] appear closest. Extensions. Include higher order CBS and timed CBS. 11. Acknowledgements Everyone in the concurrency and functional programming groups at Chalmers has been helpful and encouraging.
Reference: [BMT92] <author> Dave Berry, Robin Milner, and David Turner. </author> <title> A semantics for ML concurrency primitives. </title> <booktitle> In Symposium on Principles of Programming Languages. ACM, </booktitle> <year> 1992. </year>
Reference: [Bur88] <author> F. W. Burton. </author> <title> Nondeterminism with referential transparency in functional languages. </title> <journal> The Computer Journal, </journal> <volume> 31(3) </volume> <pages> 243-247, </pages> <year> 1988. </year>
Reference-contexts: But this is not enough for R def R 3! ! P j 5! Q R 5! ! 3! P j Q Clearly, say has to be nondeterministic. One way <ref> [Bur88] </ref> to achieve nondetermin-ism with functions, which have to be deterministic, is to put the nondeterminism in the data. say is given an extra boolean argument, an oracle, whose value will be determined at run time, but once fixed will not change. The oracle chooses between the parallel components.
Reference: [BW88] <author> Richard Bird and Philip Wadler. </author> <title> Introduction to Functional Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference: [CH88] <author> Rance Cleaveland and Matthew Hennessy. </author> <title> Priorities in process algebras. </title> <booktitle> In Symposium on Logic in Computer Science. IEEE, </booktitle> <year> 1988. </year>
Reference-contexts: Both ~ and are congruences, and capture the intuitively desired equivalences. The changes to CBS are minimal, yet the language gains significantly in power. For example, termination at one priority level is detected by the ability to transmit at a lower level. Adding priorities to CCS <ref> [CH88, CW91] </ref> is difficult because CCS makes an autonomous action out of two controlled ones. Both these papers need very much more involved transition systems. 10. Future work Correctness of implementation. A calculus with evaluation and communication rules, ECBS, has been developed and related to CBS.
Reference: [CW91] <author> Juanito Camilleri and Glynn Winskel. </author> <title> CCS with priority choice. </title> <booktitle> In Symposium on Logic in Computer Science. IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: Both ~ and are congruences, and capture the intuitively desired equivalences. The changes to CBS are minimal, yet the language gains significantly in power. For example, termination at one priority level is detected by the ability to transmit at a lower level. Adding priorities to CCS <ref> [CH88, CW91] </ref> is difficult because CCS makes an autonomous action out of two controlled ones. Both these papers need very much more involved transition systems. 10. Future work Correctness of implementation. A calculus with evaluation and communication rules, ECBS, has been developed and related to CBS.
Reference: [DK86] <author> Rina Dechter and Leonard Kleinrock. </author> <title> Broadcast communications and distributed algorithms. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 35(3):418, </volume> <month> Mar </month> <year> 1986. </year>
Reference-contexts: Axiomatisations for CBS have to be studied. Examples. More programming examples are needed to explore the applicability of CBS. Broadcast as a programming primitive has been neglected in the literature; among the few to deal with it are <ref> [HT92, YLC90, DK86] </ref>. The current version of CBS may be easier to relate to other models, of which GAMMA [BM91] and I/O automata [LT87] appear closest. Extensions. Include higher order CBS and timed CBS. 11.
Reference: [GMP89] <author> Alessandro Giacalone, Prateek Mishra, and Sanjiva Prasad. </author> <title> Facile: A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2), </volume> <year> 1989. </year>
Reference: [Hol83] <author> Soren Holmstrom. </author> <title> PFL: A functional language for parallel programming. </title> <type> Technical Report 7, </type> <institution> Dept. of Computer Sciences, Chalmers Univ. of Tech., </institution> <year> 1983. </year>
Reference: [HT92] <author> Tzung-Pei Hong and Shian-Shyong Tseng. </author> <title> Parallel perceptron learning on a single-channel broadcast communication model. </title> <journal> Parallel Computing, </journal> <volume> 18 </volume> <pages> 133-148, </pages> <year> 1992. </year>
Reference-contexts: Axiomatisations for CBS have to be studied. Examples. More programming examples are needed to explore the applicability of CBS. Broadcast as a programming primitive has been neglected in the literature; among the few to deal with it are <ref> [HT92, YLC90, DK86] </ref>. The current version of CBS may be easier to relate to other models, of which GAMMA [BM91] and I/O automata [LT87] appear closest. Extensions. Include higher order CBS and timed CBS. 11.
Reference: [Jon93] <author> Simon Jones. </author> <title> Translating CBS to LML. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year>
Reference: [Lau92] <author> Konstantin Laufer. </author> <title> Polymorphic Type Inference and Abstract Data Types. </title> <type> PhD thesis, </type> <address> New York University, </address> <year> 1992. </year>
Reference-contexts: The process type, Proc *a, is given in Table 3. Recursion and conditionals are not part of it. These are taken from LML. The type system is that outlined earlier, and fits within the Lazy ML system. The constructor TRANS uses an existential type <ref> [Lau92, AJ93] </ref> *b that does not occur on the left hand side. The calculus implemented is PBS rather than CBS: there is no general guarded sum, only TALK. Example 9. rec P = LISTEN ("x.
Reference: [LT87] <author> Nancy Lynch and Mark Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <type> Technical Report MIT/LCS/TR-387, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: Broadcast as a programming primitive has been neglected in the literature; among the few to deal with it are [HT92, YLC90, DK86]. The current version of CBS may be easier to relate to other models, of which GAMMA [BM91] and I/O automata <ref> [LT87] </ref> appear closest. Extensions. Include higher order CBS and timed CBS. 11. Acknowledgements Everyone in the concurrency and functional programming groups at Chalmers has been helpful and encouraging. CBS has been under development for several years now, and owes something to almost everyone I know in the field of concurrency.
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference: [Pet93] <author> Jenny Petersson. </author> <title> Tools for a calculus of broadcasting systems. </title> <type> Licentiate thesis, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year> <note> In preparation. </note>
Reference: [Pra87] <author> K. V. S. Prasad. </author> <title> Combinators and Bisimulation Proofs for Restartable Systems. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <month> December </month> <year> 1987. </year>
Reference-contexts: CBS does not have 3? P , only X. Thus CBS+ is strictly more expressive. This is no surprise since + does not respect , and therefore is not derivable <ref> [Pra87, Pra89] </ref> from the rest of CBS. However, examples suggest that CBS has the same programming power as CBS+. The latter is a slightly higher level calculus, the implementation taking on the task of filtering out lost values.
Reference: [Pra89] <author> K. V. S. Prasad. </author> <title> On the non-derivability of operators in CCS. </title> <type> Technical Report 55, </type> <institution> Dept. of Computer Sciences, Chalmers Univ. of Tech., </institution> <month> Dec </month> <year> 1989. </year>
Reference-contexts: CBS does not have 3? P , only X. Thus CBS+ is strictly more expressive. This is no surprise since + does not respect , and therefore is not derivable <ref> [Pra87, Pra89] </ref> from the rest of CBS. However, examples suggest that CBS has the same programming power as CBS+. The latter is a slightly higher level calculus, the implementation taking on the task of filtering out lost values.
Reference: [Pra91] <author> K. V. S. Prasad. </author> <title> A calculus of broadcasting systems. </title> <booktitle> In TAPSOFT'91 Volume 1: CAAP, </booktitle> <address> April 1991. </address> <publisher> Springer Verlag LNCS 493. </publisher>
Reference-contexts: Thus x? (x + 1) ! 0 is stuck until its environment transmits (8, say), when it will reply (9). CBS captures this formally via the synchronisation algebra used for parallel composition, and by the fact that transmission can only be hidden, while reception can only be restricted. See <ref> [Pra91] </ref> for a discussion. 2. The Syntax and Semantics of CBS The syntax and semantics of CBS are given in Table 1. Elements of type P roc ff are processes that transmit and receive values of type ff. <p> A more elaborate program could shield ACK from all but Send's by mapping other values to Noise, and similarly for SEND. 6.1. Other examples. [Pra92] gives two other examples, a broadcast sort algorithm, and Milner's scheduler, proving the correctness of both by strong bisimu-lation. <ref> [Pra91] </ref> formulates a simplified dining philosopher's problem in (an older version of) CBS. Here correctness is proved by a version of testing. Shortage of space prevents the inclusion here of these examples and others, notably algorithms for shortest paths, the eight queens problem, perceptron learning, etc. 7. <p> Then, a much stronger relation can be established between CBS and ECBS. Proposition 18. If evaluation is deterministic and P !! P 0 , then P ~ P 0 . 9. Conclusions and Related work From Pure CBS through CBS+ to CBS. <ref> [Pra91] </ref> had ports (channels), input guards, summation, restriction/hiding distinct from translation, and dealt with value passing only by encoding to the pure calculus. [Pra92] develops CBS+, freeing the calculus from most of these concepts, carried over from CCS and inappropriate to the broadcast model.
Reference: [Pra92] <author> K. V. S. Prasad. </author> <title> A calculus of value broadcasts. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1992. </year> <note> To be presented at PARLE'93. </note>
Reference-contexts: Correspondence between programming and calculus notation <ref> [Pra92] </ref> presents a version of CBS with a + operator (called "CBS+" below). In CBS+, loss is distinguished from reception, thus: 0 w: ! 0, e! P w: ! e! P and P t: ! P . <p> CBS has half as many operational rules as CBS+, permits standard definitions of bisimulation, and upgrades several weak bisimulation laws to strong. CBS+ has 0 x? 0, and instead of ~ in Law 3b of Proposition 7. The advantage with + is that it yields an axiomatisation <ref> [Pra92] </ref> of strong bisimulation, similar to that of CCS. Weak congruence has not been axiomatised for any version of CBS. It remains to be seen whether the guarded sum will suffice to axiomatise at least ~. 5. <p> A more elaborate program could shield ACK from all but Send's by mapping other values to Noise, and similarly for SEND. 6.1. Other examples. <ref> [Pra92] </ref> gives two other examples, a broadcast sort algorithm, and Milner's scheduler, proving the correctness of both by strong bisimu-lation. [Pra91] formulates a simplified dining philosopher's problem in (an older version of) CBS. Here correctness is proved by a version of testing. <p> Conclusions and Related work From Pure CBS through CBS+ to CBS. [Pra91] had ports (channels), input guards, summation, restriction/hiding distinct from translation, and dealt with value passing only by encoding to the pure calculus. <ref> [Pra92] </ref> develops CBS+, freeing the calculus from most of these concepts, carried over from CCS and inappropriate to the broadcast model. The use of CBS+ as a programming language led to CBS.
Reference: [Pra93] <author> K. V. S. Prasad. </author> <title> Broadcasting with priority. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year> <note> Extended abstract, submitted to CONCUR'93. </note>
Reference-contexts: CBS expresses concisely several programs that would be tedious in CCS. It suggests a new paradigm of programming. The inability to detect deadlock from within CBS is one reason to go back and forth between CBS and LML expressions. A prioritised calculus improves this situation in many cases. Priorities. <ref> [Pra93] </ref> develops a prioritised CBS by attaching priorities to transmis sions. The priority of an agent is that of its highest priority transmission. Agents receive all transmissions at priority greater than or equal to their own, and refuse others, which therefore cannot take place.
Reference: [Rep91] <author> J. H. Reppy. </author> <title> A higher order concurrent language. </title> <journal> SIGPLAN Notices, </journal> <volume> 26(6) </volume> <pages> 294-305, </pages> <year> 1991. </year> <booktitle> ACM SIGPLAN'91 Conference on Programming Language Design and Implementation. </booktitle>
Reference: [YLC90] <author> Chang-Biau Yang, R. C. T. Lee, and Wen-Tsuen Chen. </author> <title> Parallel graph algorithms based upon broadcast communications. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 39(12):1468, </volume> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Axiomatisations for CBS have to be studied. Examples. More programming examples are needed to explore the applicability of CBS. Broadcast as a programming primitive has been neglected in the literature; among the few to deal with it are <ref> [HT92, YLC90, DK86] </ref>. The current version of CBS may be easier to relate to other models, of which GAMMA [BM91] and I/O automata [LT87] appear closest. Extensions. Include higher order CBS and timed CBS. 11.
References-found: 24

