URL: ftp://ftp.cc.gatech.edu/pub/ai/goel/murdock/ijcai97fr.ps
Refering-URL: http://www.cs.gatech.edu/aimosaic/faculty/goel/ABSTRACTS-summary.html
Root-URL: 
Title: Functional Explanations in Design  Source: IJCAI-97 Workshop on Modeling and Reasoning about Function  
Author: Ashok K. Goel Andres Gomez de Silva Garza, Nathalie Grue, J. William Murdock, and Margaret M. Recker 
Affiliation: Intelligence and Design Group, College of Computing, Georgia Institute of Technology  
Abstract: A key step in explaining how something works is explaining what that thing was intended to do. This is equally true of physical devices and of abstract devices such as knowledge systems. In this paper, we consider the problem of providing functionally oriented explanations of a knowledge-based design system. In particular, we analyze the content of explanations of reasoning in the context of the design of physical devices. We describe a language for expressing explanations: task-method-knowledge models. Additionally, we describe the Interactive Kritik system, a computer program that makes use of these representations to visually illustrate the system's reasoning.
Abstract-found: 1
Intro-found: 1
Reference: [Chandrasekaran 1988] <author> B. Chandrasekaran. </author> <title> Generic Tasks as Building Blocks for Knowledge-Based Systems: The Diagnosis and Routine Design Examples. </title> <journal> Knowledge Engineering Review, </journal> <volume> 3(3) </volume> <pages> 183-219, </pages> <year> 1988. </year>
Reference: [Chandrasekaran 1989] <author> B. Chandrasekaran. </author> <title> Task Structures, </title> <journal> Knowledge Acquisition and Machine Learning. Machine Learning, </journal> <volume> 4 </volume> <pages> 341-347. </pages>
Reference-contexts: In the mid-eighties, Chandrasekaran [1988] proposed the language of Generic Tasks for analyzing and modeling knowledge-based problem solving, and showed that this language enables more perspicuous explanations [Chandrasekaran, Tanner, and Josephson 1989]. In the late eighties, Chandrasekaran [1990] related Generic Tasks with task structures: <ref> [Chandrasekaran 1989] </ref> describes a high-level task structure for design; [Goel and Chandrasekaran 1992] describe a fine-grained task structure for case-based design. In their work on the elevator design project called VT, McDermott and his colleagues [McDermott 1988, Marcus et al 1988] described a similar task-oriented language for analyzing knowledge-based design.
Reference: [Chandrasekaran 1990] <author> B. Chandrasekaran. </author> <title> Design Problem Solving: A Task Analysis. </title> <journal> AI Magazine, </journal> <pages> pp. 59-71, </pages> <month> Winter </month> <year> 1990. </year>
Reference: [Chandrasekaran, Tanner and Josephson 1989] <author> B. Chandrasekaran, M. Tanner, and J. Josephson. </author> <title> Explaining control strategies in problem solving. </title> <journal> IEEE Expert. </journal> <volume> 4(1) </volume> <pages> 9-24, </pages> <year> 1989. </year>
Reference: [Goel and Chandrasekaran 1989] <author> A. Goel and B. Chandrasekaran. </author> <title> Functional Representation of Designs and Redesign Problem Solving. </title> <booktitle> Proc. Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <pages> pp. 1388-1394, </pages> <year> 1989. </year>
Reference-contexts: In addition, Interactive Kritik can provide explanations and justifications of Kritik3's design reasoning and results, and enable the human user to explore the system's design knowledge. 3.1 Kritik3 Kritik3 2 evolves from Kritik, an early multi-strategy case-based design system. Since Kritik is described in detail elsewhere (see, for example, <ref> [Goel and Chandrasekaran 1989, 1992] </ref>), in this paper we only sketch the outlines of Kritik3. We do this by describing Kritik3's TMK model. Kritik3 is a multi-strategy process model of design in two senses.
Reference: [Goel and Chandrasekaran 1992] <author> A. Goel and B. Chandrasekaran. </author> <title> Case-Based Design: A Task Analysis. </title> <booktitle> In Artificial Intelligence Approaches to Engineering Design, Volume II: Innovative Design, </booktitle> <editor> Tong and D. Sriram (editors), </editor> <publisher> Academic Press, </publisher> <pages> pp. 165-184, </pages> <year> 1992. </year> <note> [Goel et al 1996] . Goel, </note> <author> A. Gomez de Silva Garza, N. Grue, J. W. Murdock, M. Recker, and T. Govindaraj. </author> <title> Explanatory Interface in Interactive Design Environments. </title> <booktitle> Fourth International Conference on Artificial Intelligence in Design, AID '96, </booktitle> <address> Stanford, California, June 24 - 27, </address> <year> 1996. </year> <editor> John S. Gero and Fay Sudweeks, eds. </editor> <address> Boston: </address> <publisher> Kluwer Academic Publishers, </publisher> <year> 1996. </year>
Reference-contexts: task is a specification of the desired functions, and the output is a specification of a structure that can deliver the desired functions. 1 Contact: Ashok Goel, 110 College of Computing Building, Georgia Institute of Technology, 801 Atlantic Drive, Atlanta, Georgia 30332-0280, goel@cc.gatech.edu 1 We use task-method-knowledge models (TMK models) <ref> [Goel and Chandrasekaran 1992; Stroulia and Goel 1994, 1995] </ref> for describing reasoning about a design problem. <p> In the late eighties, Chandrasekaran [1990] related Generic Tasks with task structures: [Chandrasekaran 1989] describes a high-level task structure for design; <ref> [Goel and Chandrasekaran 1992] </ref> describe a fine-grained task structure for case-based design. In their work on the elevator design project called VT, McDermott and his colleagues [McDermott 1988, Marcus et al 1988] described a similar task-oriented language for analyzing knowledge-based design.
Reference: [McDermott 1982] <author> J. McDermott. </author> <title> R1: A Rule-Based Configurer of Computer Systems. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 39-88, </pages> <year> 1982. </year>
Reference: [McDermott 1988] <author> J. McDermott. </author> <title> Preliminary Steps Towards a Taxonomy of Problem Solving Methods. Automating Knowledge Acquisition for Expert Systems, </title> <editor> S. Marcus (editor), </editor> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1988. </year>
Reference-contexts: In the late eighties, Chandrasekaran [1990] related Generic Tasks with task structures: [Chandrasekaran 1989] describes a high-level task structure for design; [Goel and Chandrasekaran 1992] describe a fine-grained task structure for case-based design. In their work on the elevator design project called VT, McDermott and his colleagues <ref> [McDermott 1988, Marcus et al 1988] </ref> described a similar task-oriented language for analyzing knowledge-based design. Our TMK models represent a generalization of task structures based on Generic Tasks. TMK models make the specific role played by a particular type of knowledge more explicit than earlier models.
Reference: [Marr 1977] <author> D. Marr. </author> <title> Artificial Intelligence | A Personal View. </title> <journal> Artificial Intelligence, </journal> <volume> 9(1), </volume> <year> 1977. </year>
Reference-contexts: But this language is much too specific to R1's method. This method-specificness of the language becomes a major problem for describing and explaining multi-strategy process models such as Kritik3. Task-level <ref> [Marr 1977] </ref> (or, equivalently, knowledge-level [Newell 1982]) accounts make a clearer separation between knowledge-based reasoning and its implementation in a knowledge system.
Reference: [Myers and Zanden 1992] <author> B. Myers and B. Zanden. </author> <title> Environment for rapidly creating interactive design tools. </title> <journal> Visual Computer, </journal> <volume> 8 </volume> <pages> 94-116, </pages> <year> 1992. </year>
Reference-contexts: It illustrates a deeper level of Kritik3's task-method decomposition. 4 Discussion Explanation of problem solving has received considerable attention in knowledge-systems research. One issue in explaining knowledge-based design is the language for representing the design process. For example, 3 The interface is built using the Garnet tool <ref> [Myers and Zanden 1992] </ref>. 6 7 8 McDermott [1982] describes R1's method for configuration design in the language of constraints of a design problem, components available in the design domain, heuristic associations pertaining to the constraints and the components, and selection and activation of the associations.
Reference: [Newell 1982] <author> A. Newell. </author> <title> The Knowledge Level. </title> <journal> Artificial Intelligence, </journal> <volume> 18(1) </volume> <pages> 87-127, </pages> <year> 1982. </year>
Reference-contexts: But this language is much too specific to R1's method. This method-specificness of the language becomes a major problem for describing and explaining multi-strategy process models such as Kritik3. Task-level [Marr 1977] (or, equivalently, knowledge-level <ref> [Newell 1982] </ref>) accounts make a clearer separation between knowledge-based reasoning and its implementation in a knowledge system. In the mid-eighties, Chandrasekaran [1988] proposed the language of Generic Tasks for analyzing and modeling knowledge-based problem solving, and showed that this language enables more perspicuous explanations [Chandrasekaran, Tanner, and Josephson 1989].
Reference: [Stroulia and Goel 1994b] <author> E. Stroulia and A. Goel. </author> <title> Reflective Self-Adaptive Problem Solvers. </title> <booktitle> In Proc. 1994 European Conference on Knowledge Acquisition, </booktitle> <address> Germany, </address> <note> September 1994; available as Lecture Notes in Artificial Intelligence A Future for Knowledge Acquisition, </note> <editor> L. Steels, G. Schreiber, and W. Van de Velde (editors), </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1994. </year> <editor> [Stroulia and Goel 1995] . E. Stroulia and A. Goel. </editor> <title> Functional Representation and Reasoning in Reflective Systems. </title> <journal> Journal of Applied Intelligence, Special Issue on Functional Reasoning, </journal> <volume> 9(1): </volume> <pages> 101-124, </pages> <year> 1995. </year> <month> 10 </month>
References-found: 12

