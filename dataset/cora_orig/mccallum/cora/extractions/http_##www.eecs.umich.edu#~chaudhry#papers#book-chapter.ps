URL: http://www.eecs.umich.edu/~chaudhry/papers/book-chapter.ps
Refering-URL: http://www.eecs.umich.edu/~chaudhry/publications.html
Root-URL: http://www.cs.umich.edu
Email: email: -chaudhry, moyne-@umich.edu, rundenst@cs.wpi.edu  
Title: 1 RULE INHERITANCE AND OVERRIDING IN ACTIVE OBJECTORIENTED DATABASES  
Author: Nauman Chaudhry James Moyne Elke Rundensteiner* 
Keyword: Active database; rule inheritance; rule overriding; formal object models.  
Address: Ann Arbor, MI 48109-2122  Worcester, MA 01609  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  *Computer Science Department Worcester Polytechnic Institute,  
Abstract: The concept of inheritance is among the most important features of objectoriented databases (OODBs). The different issues and tradeoffs regarding inheritance have been studied for a number of years for passive OODBs. However, no general treatment of rule inheritance and overriding has been undertaken for active OODBs. Such treatment is conspicuously missing for rules that are defined over multiple classes, even though most active OODBs support the definition of such rules. In this chapter, we fill this gap by developing a formal model for rule inheritance and overriding in active OODBs. We identify important features required in an active OODB model, such as support for rule inheritance and rule overriding, and provision of the notion of syntactic compatibility. We then define a formal model for active rules by adapting the concept of multi-methods for use in defining inheritance and overriding of active rules. We extend the notion of syntactic compatibility to active rules and show how it is enforced in our formal model. The support for rule inheritance in our model is uniformly applicable to all active rules, including those rules that span across multiple classes. The work presented here thus makes the important contributions of identifying essential features missing in inheritance models of active OODB systems and of providing a formal model that incorporates these missing features. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abiteboul, S., Hull, R. & Vianu, V. </author> <year> (1995). </year> <title> Foundations of Databases. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. 31 Agrawal, </publisher> <editor> R., DeMichiel, L. & Lindsay, B. </editor> <year> (1991). </year> <title> Static Type Checking in Multi-Methods. </title> <booktitle> Proc. of 6th Annual Conference on Objectoriented Programming, Systems, Languages and Applications, </booktitle> <pages> 113-128. </pages>
Reference-contexts: We then outline our approach, based on the concept of multi-methods, to provide analogous support in active OODBs. After this, we present a well-known passive object data model <ref> ( Abiteboul, Hull, & Vianu, 1995) </ref> that we use as a basis of our formal model for active rules. The formal OO model for active rules developed by us is then presented and is used to define inheritance, overriding, compatibility, and unambiguity of active rules in OODBs. <p> A BASE PASSIVE OBJECT MODEL We now develop a formal model for rule inheritance in active OODBs. As our base model, we adapt the well-known object model presented in <ref> (Abiteboul, Hull & Vianu, 1995) </ref>. This object model is presented in this section. In the next section, we will add appropriate constructs to this model to define active rule inheritance. 17 Informal Description of Base Object Model We first informally describe the basic entities of our base object model.
Reference: <author> America, P. </author> <year> (1991). </year> <editor> In M. Lenzerini, D. Nardi, & M. Simi (Eds.), </editor> <title> Inheritance Hierarchies in Knowledge Representation and Programming Languages. </title> <address> New York: </address> <publisher> John Wiley & Sons. </publisher>
Reference: <author> Amiel, E. et. al. </author> <year> (1996). </year> <title> Typesafe Relaxing of Schema Consistency Rules for Flexible Modelling in OODBMS. </title> <journal> The VLDB Journal, </journal> <volume> 5 (2), </volume> <pages> 133-150. </pages>
Reference: <author> Amiel, E. & Dujardin, E. </author> <year> (1996). </year> <title> Supporting Explicit Disambiguation of Multi-Methods. </title> <booktitle> Proc. of 10th European Conference on ObjectOriented Programming, </booktitle> <pages> 167-188. </pages>
Reference: <author> Bertino, E., Guerrini, G. & Merlo, I. </author> <year> (1997). </year> <title> Trigger Inheritance and Overriding in Active Object Database Systems. </title> <booktitle> Proc. of the 5th International Conference on Deductive and ObjectOriented Database, </booktitle> <pages> 193-210. </pages>
Reference-contexts: Overriding of rules is not supported. A recent work in rule inheritance and overriding in active OODBs, with particular reference to the Chimera active OODB (Ceri, et. al., 1996), is described in <ref> (Bertino, Guerrini & Merlo, 1997) </ref>. The focus of this work is on, what we have termed, semantic compatibility for class-specific rules. Inheritance of class-spanning rules or issues of syntactic compatibility though are not investigated.
Reference: <author> Buchmann, A. et. al. </author> <year> (1995). </year> <title> Building an Integrated Active OODBMS: Requirements, Architecture, and Design Decisions. </title> <booktitle> Proc. of 11th IEEE International Conference on Data Engineering, </booktitle> <pages> 117-128. </pages>
Reference-contexts: Issues related to rule overriding though are not discussed. In REACH <ref> (Buchmann, et. al., 1995, Zimmermann, et. al., 1996) </ref> rules are defined independently of class definitions and at the conceptual level are considered as nary relationships between classes involved in the ECA parts.
Reference: <author> Castagna, G. </author> <year> (1995). </year> <title> Covariance and Contravariance: Conflict without a Cause. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17 (3), </volume> <pages> 431-447. </pages>
Reference-contexts: Thus for each rule definition, the interface consists of the formal types of the classes on which the rule definition can be activated and the types of the parameters that can be passed to the rule definition. By adapting the definition of compatibility for multi-methods <ref> (Castagna, 1995) </ref>, we can see that signature compatibility requires that in all overridings of a rule r the class vector should become more specific (i.e., covariant) and the parameter overriding can only be made less specific (i.e., contravariant).
Reference: <author> Ceri, S. et. al. </author> <year> (1996). </year> <editor> In J. Widom & S. Ceri (Eds.). </editor> <title> Active Database Systems: Triggers and Rules for Advanced Database Processing. </title> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Rules are inherited by the subclasses. The semantics of inheritance for class-spanning rules and rule overriding though have not been discussed. The rule model for Sentinel (Chakravarthy, et. al., 1994) is fairly similar to the SAMOS rule model. In Chimera <ref> (Ceri, et. al., 1996, Meo, Psaila & Ceri, 1996) </ref> again a distinction is made between targeted rules (with events belonging to a single class, i.e., class-specific rules in our terminology) and un-targeted rules (class-spanning rules in our terminology). Issues related to rule overriding though are not discussed. <p> In Ode, rules are defined within the definition of a class and are inherited by subclasses (Lieuwen, et. al., 1996). Overriding of rules is not supported. A recent work in rule inheritance and overriding in active OODBs, with particular reference to the Chimera active OODB <ref> (Ceri, et. al., 1996) </ref>, is described in (Bertino, Guerrini & Merlo, 1997). The focus of this work is on, what we have termed, semantic compatibility for class-specific rules. Inheritance of class-spanning rules or issues of syntactic compatibility though are not investigated.
Reference: <author> Chakravarthy, S. et. al. </author> <year> (1994). </year> <title> ECA Rule Integration into an OODBMS: Architecture and Implementation (Report No. </title> <institution> UF-CIS-TR-94-023). Dept. of Computer & Information Science, University of Florida, </institution> <address> Gainesville, Florida. 32 Chambers, C. </address> <year> (1992). </year> <title> ObjectOriented Multi-Methods in Cecil. </title> <booktitle> Proc. of 6th European Conference on ObjectOriented Programming, </booktitle> <pages> 33-56. </pages>
Reference-contexts: When a passive OODB model is extended to support active rules, inheritance and overriding models must be adapted to also work with such active OODBs. While many active OODB systems support some form of rule inheritance (e.g., Ode (Lieuwen, Gehani & Arlien, 1996), SAMOS (Geppert, et. al., 1995), Sentinel <ref> (Chakravarthy, et. al., 1994) </ref>) and rule overriding is provided by (at-least) one system (TriGS (Kappel, et. al., 1994)), no general model of rule inheritance in active OODB systems has been established to-date. <p> Class-spanning rules (class-external rules in SAMOS terminology) are identified with event 14 definitions rather than class definitions. Rules are inherited by the subclasses. The semantics of inheritance for class-spanning rules and rule overriding though have not been discussed. The rule model for Sentinel <ref> (Chakravarthy, et. al., 1994) </ref> is fairly similar to the SAMOS rule model.
Reference: <author> Chambers, C. & Leavens, G. </author> <year> (1995). </year> <title> Typechecking and Modules for Multi-Methods. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17 (6), </volume> <pages> 805-843. </pages>
Reference: <author> Chaudhry, N., Moyne, J. & Rundensteiner, E. </author> <year> (1998). </year> <title> Active Controller: Utilizing Active Databases for Implementing Multi-Step Control of Semiconductor Manufacturing. </title> <journal> IEEE Transactions on Components, Packaging and Manufacturing Technology, Part C: Manufacturing Technology, </journal> <note> to appear. </note>
Reference-contexts: Motivating Example We introduce an example to motivate the need and define the scope of the problem of rule inheritance and overriding. This example is derived from semiconductor manufacturing environment <ref> (Chaudhry, Moyne & Rundensteiner, 1998) </ref>. We shall use this example to determine the features an OO rule model should support for rule inheritance and overriding. For our example, we assume that: In the specification of the active schema, the methods whose invocation raise events are identified.
Reference: <author> Collet, C., Coupaye, T. & Svensen, T. </author> <year> (1994). </year> <title> NAOS - Efficient and Modular Reactive Capabilities in an ObjectOriented Database System. </title> <booktitle> Proc. of 20th International Conference on Very Large Databases, </booktitle> <pages> 132-143. </pages>
Reference-contexts: To the best of our knowledge there has been no work on signature compatibility in active OODBs, and TriGS (Kappel, et. al., 1994) and NAOS <ref> (Collet, Coupaye & Svensen, 1994, Collet & Coupaye, 1996) </ref> are the only active OODB systems that discuss rule overriding. A key aim in TriGS is the seamless integration of active rules in an OO data model. Class-specific rules (local triggers in TriGS terminology) can be overridden. <p> However, based on the underlying dynamically-typed object model, the rule specialization is not required to be signature compatible. Class-spanning rules (global triggers in TriGS terminology) apply to all objects that have methods corresponding to the event in the rule. Overriding of such rules though is not considered. In NAOS <ref> (Collet, et. al., 1994, Collet & Coupaye, 1996) </ref>, rules are defined as part of the schema and do not belong to a class. It is noted that providing rules as part of a class definition leads to schema update problems when modifying rules.
Reference: <author> Collet, C. & Coupaye, T. </author> <year> (1996). </year> <title> Composite Events in NAOS. </title> <booktitle> Proc. of 7th International Conference on Database and Expert Systems Applications, </booktitle> <pages> 244-253. </pages>
Reference: <author> Gatziu, S., Geppert, A. & Dittrich, K. </author> <year> (1991). </year> <title> Integrating Active Concepts into an ObjectOriented Database System. </title> <booktitle> Proc. of 3rd International Workshop on Database Programming Languages, </booktitle> <pages> 399-415. </pages>
Reference-contexts: Similarly, there is no discussion of whether and how class-spanning rules may be overridden in NAOS. In the SAMOS system, both class-specific and class-spanning rules are supported <ref> (Gatziu, Geppert & Dittrich, 1991, Geppert, et. al., 1995) </ref>. Class-specific rules (class-internal rules in SAMOS terminology) can be encapsulated within the class and may not be visible to the user of the class. Events can be defined so that they have independent existence and can be reused in multiple rules. <p> If now another definition of Inform-Operator is specified with the class-vector &lt;Chemical, MXE&gt;, the set of overridings of Inform-Operator becomes well-formed. p DISCUSSION Our basic rule model, though formal, is similar to the informal model described for the SAMOS system in <ref> (Gatziu, et. al. 1991, Geppert, et. al., 1995) </ref>. In SAMOS events, conditions and actions can be defined independently of rules. Both class-specific and class-spanning rules are supported and are inherited by the subclasses.
Reference: <author> Geppert, A., Gatziu, S. & Dittrich, K. </author> <year> (1995). </year> <title> Rulebase Evolution in Active ObjectOriented Database Systems: Adapting the Past to Future Needs (Report No. </title> <institution> 95.13). Computer Science Department, University of Zurich, Switzerland. </institution>
Reference-contexts: When a passive OODB model is extended to support active rules, inheritance and overriding models must be adapted to also work with such active OODBs. While many active OODB systems support some form of rule inheritance (e.g., Ode (Lieuwen, Gehani & Arlien, 1996), SAMOS <ref> (Geppert, et. al., 1995) </ref>, Sentinel (Chakravarthy, et. al., 1994)) and rule overriding is provided by (at-least) one system (TriGS (Kappel, et. al., 1994)), no general model of rule inheritance in active OODB systems has been established to-date.
Reference: <author> Geppert, A. et. al. </author> <year> (1995). </year> <title> Architecture and Implementation of the Active ObjectOriented Database Management System SAMOS (Report No. </title> <institution> 95.29). Computer Science Department, University of Zurich, Switzerland. </institution>
Reference-contexts: When a passive OODB model is extended to support active rules, inheritance and overriding models must be adapted to also work with such active OODBs. While many active OODB systems support some form of rule inheritance (e.g., Ode (Lieuwen, Gehani & Arlien, 1996), SAMOS <ref> (Geppert, et. al., 1995) </ref>, Sentinel (Chakravarthy, et. al., 1994)) and rule overriding is provided by (at-least) one system (TriGS (Kappel, et. al., 1994)), no general model of rule inheritance in active OODB systems has been established to-date.
Reference: <author> Goldberg, A. & Robson, D. </author> <year> (1984). </year> <title> Smalltalk-80: the Interactive Programming Environment. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. 33 Kappel, </publisher> <editor> G. et. al. </editor> <year> (1994). </year> <title> TriGS - Making a Passive ObjectOriented Database System Active. </title> <journal> Journal of ObjectOriented Programming, </journal> <volume> 7 (4), </volume> <pages> 40-63. </pages>
Reference-contexts: Since for almost all conceivable software systems mutators are needed, a decision has to be made about tradeoffs among the desirable features. To provide unconstrained specialization, static typing may have to be given up <ref> (e.g., as done in Smalltalk, Goldberg & Robson, 1984) </ref>. On the other hand, statically typed languages, with their emphasis on typesafety, impose fairly strict limits on property overriding in subclasses. Some form of syntactic compatibility, though, is provided in most OODB models.
Reference: <author> Kemper, A. et. al. </author> <year> (1994). </year> <title> Autonomous Objects: A Natural Model for Complex Applications. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 3 (2), </volume> <pages> 133-150. </pages>
Reference-contexts: To ensure that instances of subclasses are indeed substitutable in a typesafe manner, one needs to observe certain subtyping constraints that will ensure that the interface of the subclass conforms with the interface of the superclass. These constraints include <ref> (Kemper & Moerkotte, 1994) </ref>: structure overriding in the subclass: invariance of attributes (for all attributes for which mutators are defined), method overriding in the subclass: co-variance (i.e., the type can be more specific) in return types, contravariance (i.e., the type can be more general) in arguments (that are not used for <p> the type can be more specific) in return types, contravariance (i.e., the type can be more general) in arguments (that are not used for method binding). 9 It can be easily shown that if the above rules are not observed, runtime errors can occur in a statically typed system 3 <ref> (Kemper & Moerkotte, 1994) </ref>. Motivating Example We introduce an example to motivate the need and define the scope of the problem of rule inheritance and overriding. This example is derived from semiconductor manufacturing environment (Chaudhry, Moyne & Rundensteiner, 1998). <p> and signature compatibility have not been investigated in SAMOS or any other active OODB system that we are cognizant of. 29 It should be noted here that it has been argued elsewhere that class-spanning rules violate the notion of encapsulation and hence do not match well with the OO paradigm <ref> (Kemper, et. al., 1994) </ref>. However, the utility of class-spanning rules is obvious and these rules are provided by almost all active OODBs 6 . In fact, this provision of class-spanning rules (which is analogous to multi-methods) need not completely violate encapsulation.
Reference: <author> Kemper, A. & Moerkotte, G. </author> <year> (1994). </year> <title> ObjectOriented Database Management: </title> <booktitle> Applications in Engineering and Computer Science. </booktitle> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall. </publisher>
Reference-contexts: To ensure that instances of subclasses are indeed substitutable in a typesafe manner, one needs to observe certain subtyping constraints that will ensure that the interface of the subclass conforms with the interface of the superclass. These constraints include <ref> (Kemper & Moerkotte, 1994) </ref>: structure overriding in the subclass: invariance of attributes (for all attributes for which mutators are defined), method overriding in the subclass: co-variance (i.e., the type can be more specific) in return types, contravariance (i.e., the type can be more general) in arguments (that are not used for <p> the type can be more specific) in return types, contravariance (i.e., the type can be more general) in arguments (that are not used for method binding). 9 It can be easily shown that if the above rules are not observed, runtime errors can occur in a statically typed system 3 <ref> (Kemper & Moerkotte, 1994) </ref>. Motivating Example We introduce an example to motivate the need and define the scope of the problem of rule inheritance and overriding. This example is derived from semiconductor manufacturing environment (Chaudhry, Moyne & Rundensteiner, 1998). <p> and signature compatibility have not been investigated in SAMOS or any other active OODB system that we are cognizant of. 29 It should be noted here that it has been argued elsewhere that class-spanning rules violate the notion of encapsulation and hence do not match well with the OO paradigm <ref> (Kemper, et. al., 1994) </ref>. However, the utility of class-spanning rules is obvious and these rules are provided by almost all active OODBs 6 . In fact, this provision of class-spanning rules (which is analogous to multi-methods) need not completely violate encapsulation.
Reference: <author> Lieuwen, D., Gehani, N. & Arlien, R. </author> <year> (1996). </year> <title> The Ode Active Database: Trigger Semantics and Implementation. </title> <booktitle> Proc. of the 12th International Conference on Data Engineering, </booktitle> <pages> 412-420. </pages>
Reference-contexts: When a passive OODB model is extended to support active rules, inheritance and overriding models must be adapted to also work with such active OODBs. While many active OODB systems support some form of rule inheritance (e.g., Ode <ref> (Lieuwen, Gehani & Arlien, 1996) </ref>, SAMOS (Geppert, et. al., 1995), Sentinel (Chakravarthy, et. al., 1994)) and rule overriding is provided by (at-least) one system (TriGS (Kappel, et. al., 1994)), no general model of rule inheritance in active OODB systems has been established to-date. <p> However, by considering rule inheritance only in relation to events, but not to rules as a unit, rule overriding is not considered (Zimmermann, et. al., 1996). In Ode, rules are defined within the definition of a class and are inherited by subclasses <ref> (Lieuwen, et. al., 1996) </ref>. Overriding of rules is not supported. A recent work in rule inheritance and overriding in active OODBs, with particular reference to the Chimera active OODB (Ceri, et. al., 1996), is described in (Bertino, Guerrini & Merlo, 1997).
Reference: <author> Melton, J. </author> <year> (1996). </year> <title> SQL-3 Update. </title> <booktitle> Proc. of the 12th International Conference on Data Engineering, </booktitle> <pages> 666-672. </pages>
Reference: <author> Meo, R., Psaila, G. & Ceri, S. </author> <year> (1996). </year> <title> Composite Events in Chimera. </title> <booktitle> Proc. of 5th International Conference on Extending Database Technology, </booktitle> <pages> 56-76. </pages>
Reference-contexts: Rules are inherited by the subclasses. The semantics of inheritance for class-spanning rules and rule overriding though have not been discussed. The rule model for Sentinel (Chakravarthy, et. al., 1994) is fairly similar to the SAMOS rule model. In Chimera <ref> (Ceri, et. al., 1996, Meo, Psaila & Ceri, 1996) </ref> again a distinction is made between targeted rules (with events belonging to a single class, i.e., class-specific rules in our terminology) and un-targeted rules (class-spanning rules in our terminology). Issues related to rule overriding though are not discussed.
Reference: <author> Paton, N. et. al. </author> <year> (1993). </year> <title> Dimensions Of Active Behaviour. </title> <booktitle> Proc. of the 1st International Workshop on Rules in Database Systems, </booktitle> <pages> 40-57. </pages> <editor> Ra, Y-G. & Rundensteiner, E. </editor> <year> (1995). </year> <title> A Transparent ObjectOriented Schema Change Approach Using View Evolution. </title> <booktitle> Proc. of 11th IEEE International Conference on Data Engineering, </booktitle> <pages> 165-172. </pages>
Reference: <author> Stroustrup, B. </author> <year> (1991). </year> <title> The C++ Programming Language. </title> <booktitle> (2nd ed.). </booktitle> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The key concept for encapsulation of rules is lexically restricted scope of access to a class. This can be achieved via constructs similar to the friend construct of C++, which gives access to private properties of a class to a function defined outside this class <ref> (Stroustrup, 1991) </ref>. For active rules specified using the model presented in the chapter, checking for ambiguous rule definition and resolving such ambiguities becomes an important task. Type checking of multi-methods can be carried out statically using polynomial-time algorithms presented in, e.g., Chambers & Leavens (1995).
Reference: <author> Taivalsaari, A. </author> <year> (1996). </year> <title> On the Notion of Inheritance. </title> <journal> ACM Computing Surveys, </journal> <volume> 28 (3), </volume> <pages> 438-479. </pages>
Reference-contexts: INTRODUCTION The concept of inheritance is one of the most important features of objectoriented (OO) systems. Though there are many varieties of inheritance models, inheritance fundamentally is a mechanism for sharing and incrementally modifying existing code to allow a child to inherit features (structure and behavior) from a parent <ref> (Taivalsaari, 1996) </ref>. These features can then be overridden in the child 2 thus facilitating evolutionary development of complex systems. In most models, inheritance is also viewed as a facility for conceptual modeling, where a child (called a subclass) specializes its parent (called a superclass) 1 . <p> This is followed by a review of current research in rule inheritance support in active OODBs. Inheritance and Overriding in Passive Object Models Inheritance is a mechanism for sharing and incrementally modifying existing code where a child inherits and possibly overrides properties (structure and behavior) from a parent <ref> (Taivalsaari, 1996) </ref>. In most models, inheritance is also viewed as a facility for conceptual modeling, where a child (called a subclass) specializes its parent (called superclass). An instance of the subclass is then said to be substitutable for an instance of the superclass.
Reference: <author> Wegner, P. </author> <year> (1990). </year> <title> Concepts and Paradigms of Objectoriented Programming. </title> <journal> ACM OOPS Messenger, </journal> <volume> 1 (1), </volume> <pages> 7-87. </pages> <note> 34 Wegner, </note> <author> P. & Zdonik, S. </author> <year> (1988). </year> <title> Inheritance as an Incremental Modification Mechanism or What Like Is and Isnt Like. </title> <booktitle> Proc. of the 2nd European Conference on ObjectOriented Programming, </booktitle> <pages> 55-77. </pages>
Reference: <editor> Zdonik, S. & Maier, D. (Eds.) </editor> <booktitle> (1990). Readings in ObjectOriented Databases. </booktitle> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This choice is consistent with most active OODB systems, since most of these are also based on a statically-typed object model (e.g., SAMOS, Sentinel, REACH, NAOS, Ode). BACKGROUND AND INFORMAL PROBLEM DESCRIPTION Since inheritance and overriding of properties has already been studied in passive OODBs <ref> (Zdonik & Maier, 1990) </ref>, we first review relevant research in passive OODBs. We then introduce an example to motivate the need and define the scope of the problem of rule inheritance and overriding for active OODBs. <p> Even though there is no agreed upon OO data model, the various choices in defining such a model, and the impact of these choices on inheritance and subtyping in the resulting data model, are fairly well-understood <ref> (Zdonik & Maier, 1990) </ref>. Decisions to have static/dynamic typing and to impose no/some constraints on the overriding of properties in the subclass are among these choices. <p> It has been observed that if the OO system allows the definition of mutators (i.e., functions that can update the value of instances) on the classes, the three features of typesafety, substitutability and unrestricted specialization cannot coexist <ref> (Zdonik & Maier, 1990) </ref>. Since for almost all conceivable software systems mutators are needed, a decision has to be made about tradeoffs among the desirable features. To provide unconstrained specialization, static typing may have to be given up (e.g., as done in Smalltalk, Goldberg & Robson, 1984).
Reference: <author> Zicari, R. </author> <year> (1992). </year> <editor> In F. Bancilhon, C. Delobel & P. Kanellakis (Eds.), </editor> <title> Building an ObjectOriented Database System, The Story of O2. </title> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: There has been little or no research for providing support for active schema evolution. The area of schema evolution has been researched in the context of passive OODB systems <ref> (Zicari, 1992, Ra & Rundensteiner, 1995) </ref>. There is a need for developing a corresponding framework to support schema evolution in active databases. Rule-base, and in particular event-base, modification has been studied in Geppert, Gatziu & Dittrich (1995).


References-found: 28

