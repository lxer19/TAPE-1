URL: http://www.cs.indiana.edu/database/Ode/doc/att-db-92-12.ps.Z
Refering-URL: http://www.cs.indiana.edu/database/Ode/doc/
Root-URL: http://www.cs.indiana.edu
Title: QUERIES IN AN OBJECT-ORIENTED GRAPHICAL INTERFACE  
Author: S. Dar N. H. Gehani H. V. Jagadish J. Srinivasan 
Address: Murray Hill, New Jersey 07974  Madison, WI 53706  Murray Hill, New Jersey 07974  Murray Hill, New Jersey 07974  NH 03062  
Affiliation: AT&T Bell Labs  University of Wisconsin  AT&T Bell Labs  AT&T Bell Labs  DEC Nashua,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Lotus 1-2-3 User Manual, Lotus Corporation, </author> <year> 1986. </year>
Reference-contexts: In summary, our model provides a framework and a uniform semantics for display of related objects in a type specific fashion. Synchronized browsing, the recursive propagation of values through the display forest, is based on a paradigm popularized by spreadsheet applications, such as LOTUS 1-2-3 <ref> [1] </ref>. We have combined this paradigm with the notions of binding-set, current object, and dependency between windows to obtain a model describing the semantics of sequencing and selection operations in the display forest. 4.
Reference: [2] <author> R. Agrawal and N. H. Gehani, </author> <title> ``Ode (Object Database and Environment): The Language and the Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1989 Int'l Conf. Management of Data, </booktitle> <address> Portland, Oregon, </address> <month> May-June </month> <year> 1989, </year> <pages> 36-45. </pages>
Reference-contexts: In this paper we address the problem of designing a simple intuitive GUI that can be used by database users - 2 - without having to resort to the textual database programming language of the OODBMS. OdeView is a GUI for the Ode object-oriented database system <ref> [2] </ref> that allows users to perform complex queries (including nested selections and updates) against sets of objects in the database. OdeView provides facilities for examining the database schema, browsing the database, and performing arbitrary queries on the database. <p> The object manager evaluates this predicate against objects in the database, and retrieves the objects for which the predicate returns true. OdeView then displays the selected objects using a display function associated with their type. OdeView is implemented using O++, the database programming language interface of Ode <ref> [2, Ode Manual 1991 ] </ref>, which is upward compatible with C++ [17]. OdeView and O++ are compatible in that each interface can be used to manipulate objects created or updated using the other. In an earlier paper [3], OdeView's browsing facilities were described (reflecting the implementation at that time).
Reference: [3] <author> R. Agrawal, N. H. Gehani and J. Srinivasan, </author> <title> ``OdeView: The Graphical Interface to Ode'', </title> <booktitle> Proc. ACM-SIGMOD 1990 Int'l Conf. on Management of Data, </booktitle> <year> 1990, </year> <pages> 34-43. </pages>
Reference-contexts: OdeView is implemented using O++, the database programming language interface of Ode [2, Ode Manual 1991 ], which is upward compatible with C++ [17]. OdeView and O++ are compatible in that each interface can be used to manipulate objects created or updated using the other. In an earlier paper <ref> [3] </ref>, OdeView's browsing facilities were described (reflecting the implementation at that time). Since then, OdeView has evolved from a browser to a sophisticated GUI giving the user considerable power to view and manipulate an object-oriented database. <p> For example, a member of T1 may be a set of, an array of, or a pointer to T2. This is a generalization of the notion of an aggregation hierarchy [16]. 3. Since the publication of <ref> [3] </ref>, the user interface has been redesigned. In particular, audio and text-to-speech capabilities have been incorporated into the display. - 4 - manager depend upon it. 3 The dependency relationship determines the default bindings of each window W in the display forest. 1. <p> We are already using the persistent type catalog to give OdeView the class-subclass information it requires to graphically display the class hierarchy <ref> [3] </ref>. 5.2 Query Translation As the user constructs a selection predicate by building a tree of operands and operators, OdeView maintains an equivalent textual representation of the predicate as an O++ expression. OdeView displays this expression at the bottom of the selection specification window. <p> As suggested in Section 5.1, we are investigating the use of a persistent type catalog to store information about types of objects in Ode. OdeView should probe this catalog for such information as type derivation (needed for examining the database schema <ref> [3] </ref>), and pointers to the display and member_list functions (needed for displaying - 16 - objects and type-specific menus). The design of such a catalog is an interesting open research problem. 8. ACKNOWLEDGMENTS We are grateful to Alex Biliris, Bala Krishnamurthy, and Oded Shmueli for their comments and suggestions.
Reference: [4] <author> D. M. Campbell, D. W. Embley and B. Czejdo, </author> <title> ``Graphical Query Formulation for an Entity-Relationship Model'', </title> <journal> Data and Knowledge Eng. </journal> <volume> 2, </volume> <year> (1986), </year> <pages> 89-121. </pages>
Reference-contexts: Pasta's querying capability supports all queries that are expressible in KB2's linear language, which include - complex logical queries, quantification, limited recursion, and mathematical formulas expressed as predicate calculus formulas. Pasta-3 and OdeView are similar in that both provide a graphical interface (environment) rather than a ``naked'' language <ref> [4] </ref>. However, OdeView supports an object-oriented data model, allowing a selection predicate to be built up of type-specific operators, function and data members (including nested members), and values.
Reference: [5] <author> G. Cockton, </author> <booktitle> in Engineering for Human-Computer Interaction Proceedings of the IFIP TC 2/WG 2.7 Working Conference on Engineering for Human-Computer Interaction, </booktitle> <publisher> Elsevier Science Publishers B.V. (North Holland), </publisher> <address> Napa Valley, California, </address> <month> Aug. </month> <year> 1989, </year> <pages> 63-86. </pages>
Reference-contexts: RELATED WORK Formal models for GUIs are usually built around some well understood formal concept such as state transition networks (several examples can be found in <ref> [5] </ref>). These models describe the different states of the system, the inputs to the system, and the resulting state transfers and outputs.
Reference: [6] <author> E. F. Codd, </author> <title> ``A Relational Model of Data for Large Shared Data Banks'', </title> <journal> Commun. ACM 13, </journal> <month> 6 (June </month> <year> 1970), </year> <pages> 377-387. </pages>
Reference-contexts: For example, in the relational model, the database supports only simple types such as integer and character and the operations of relational algebra <ref> [6] </ref> augmented by aggregate functions [12]. With the increasing popularity of object-oriented databases (OODBMS), there is a need for GUIs that provide friendly simplified interfaces to a database organized according to an object model. In OODBMSs, the classes (object types) defined can be arbitrarily complex.
Reference: [7] <author> S. Dar, N. H. Gehani and H. V. Jagadish, ``CQL++: </author> <title> An SQL for a C++ Based Object-Oriented DBMS'', </title> <booktitle> Proc. of Int'l Conf. on Extending Database Technology, </booktitle> <address> Vienna, Austria, </address> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: The type descriptors in the catalog will be filled in by the O++ compiler [8, Ode Manual 1991 ], and made available to the O++ programmer and to other interfaces to Ode, including CQL++ <ref> [7] </ref>, and OdeView.
Reference: [8] <author> S. Dar, R. Agrawal and N. H. Gehani, </author> <title> ``The O++ Database Programming Language: Implementation and Experience'', </title> <booktitle> Proc. IEEE 9th Int'l Conf. Data Engineering, </booktitle> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: In the future, we plan to provide this functionality using a persistent type catalog for the Ode database. The type descriptors in the catalog will be filled in by the O++ compiler <ref> [8, Ode Manual 1991 ] </ref>, and made available to the O++ programmer and to other interfaces to Ode, including CQL++ [7], and OdeView.
Reference: [9] <editor> O. Deux et al., </editor> <title> ``The O 2 System'', </title> <journal> Comm. ACM 34, </journal> <month> 10 (October </month> <year> 1991), </year> <pages> 34-49. </pages>
Reference-contexts: Recently, some simple GUIs for object-oriented database management systems have been designed. For instance, The O 2 user interface generator, O 2 Look, supports the display and manipulation of complex objects of user-defined types <ref> [9] </ref>. The user can customize the display through the use of masks, which perform projection, and resources which control properties of the display such as font, color, and layout. However, relationships between objects are not shown, and a query facility is not provided.
Reference: [10] <author> E. Kantorowitz and O. Sudarsky, </author> <title> ``The Adaptable User Interface'', </title> <journal> Communications of the ACM 23, </journal> <volume> 11 (Nov. </volume> <year> 1989), </year> <pages> 1352-1358. </pages>
Reference-contexts: Our concern is the flow of values, representing object ids, through this structure. Other work in GUI design theory studies the interaction with a user, using some dialog modes. Where possible, OdeView supports both the menu-type (MM) and command-language-type (CLM) dialog modes <ref> [10] </ref>. In particular, while constructing a query predicate, both representations are kept synchronized, and both are visible to the user and available for editing. Most of the reported work on GUI design for database concentrates on providing useful functionality.
Reference: [11] <author> H. J. Kim, H. F. Korth and A. Silberschatz, ``PICASSO: </author> <title> A Graphical Query Language'', </title> <journal> Software Practice and Experience 18, </journal> <month> 3 (March </month> <year> 1988), </year> <pages> 169-203. </pages>
Reference-contexts: Consequently, there is much interest in the design of good graphical user interfaces (GUI) for database systems. There have been several research efforts to develop graphical query languages (cf. <ref> [11, 13] </ref> ) as front-ends (user interfaces) to databases. However, the focus has been on graphical query languages for databases organized with traditional data models such as the entity-relationship model and the relational model. <p> Most of the reported work on GUI design for database concentrates on providing useful functionality. Several database GUIs that support more than relational functionality have been developed in recent years. For instance, Picasso <ref> [11] </ref> is a graphics based query language designed for use with a universal relational database system. It exploits the hypergraph semantics of the universal relation to help the user form queries.
Reference: [12] <author> A. Klug, </author> <title> ``Equivalence of Relational Algebra and Relational Calculus Query Languages Having Aggregate Functions'', </title> <journal> J. ACM 29, </journal> <month> 3 (July </month> <year> 1982), </year> <pages> 699-717. </pages>
Reference-contexts: For example, in the relational model, the database supports only simple types such as integer and character and the operations of relational algebra [6] augmented by aggregate functions <ref> [12] </ref>. With the increasing popularity of object-oriented databases (OODBMS), there is a need for GUIs that provide friendly simplified interfaces to a database organized according to an object model. In OODBMSs, the classes (object types) defined can be arbitrarily complex.
Reference: [13] <author> M. Kuntz and R. Melchert, </author> <title> ``Pasta-3's Graphical Query Language: Direct Manipulation, Cooperative Queries, Full Expressive Power'', </title> <booktitle> Proc. 15th Int'l Conf. Very Large Data Bases, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> Aug. </month> <year> 1989, </year> <pages> 97-105. </pages>
Reference-contexts: Consequently, there is much interest in the design of good graphical user interfaces (GUI) for database systems. There have been several research efforts to develop graphical query languages (cf. <ref> [11, 13] </ref> ) as front-ends (user interfaces) to databases. However, the focus has been on graphical query languages for databases organized with traditional data models such as the entity-relationship model and the relational model. <p> For instance, Picasso [11] is a graphics based query language designed for use with a universal relational database system. It exploits the hypergraph semantics of the universal relation to help the user form queries. The Pasta-3 graphical query language <ref> [13] </ref> interfaces a knowledge based system KB2, which uses an entity-relational model, extended with inheritance and deduction rules. Pasta's querying capability supports all queries that are expressible in KB2's linear language, which include - complex logical queries, quantification, limited recursion, and mathematical formulas expressed as predicate calculus formulas.
Reference: [14] <author> B. Liskov, A. Snyder, R. Atkinson and C. Schaffert, </author> <title> ``Abstraction Mechanisms in CLU'', </title> <journal> Commun. ACM 20, </journal> <month> 8 (Aug. </month> <year> 1977), </year> . 
Reference-contexts: An iterator is a control abstraction used for the production of a sequence of values <ref> [14] </ref>. - 15 - Ode. Our concern is the flow of values, representing object ids, through this structure. Other work in GUI design theory studies the interaction with a user, using some dialog modes. Where possible, OdeView supports both the menu-type (MM) and command-language-type (CLM) dialog modes [10].
Reference: [15] <author> D. Maier and J. Stein, </author> <title> ``Indexing in an Object-Oriented DBMS'', </title> <booktitle> Proc. Int'l Workshop Object-Oriented Database Systems, Asilomar, </booktitle> <address> California, </address> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: This is indicated to the user by an arrow on the right hand side of the member name. This mechanism allows the user to specify a path expression <ref> [15] </ref> (a.k.a ``implicit join'') of any length. Figure 6 shows the operand menu for employee with sliding menus for department and manager. - 8 - 4.1.2 Operators The Extend button is used for extending the specified query expression by applying some operator to it.
Reference: [16] <author> J. M. Smith and D. C. P. Smith, </author> <title> ``Database Abstractions: Aggregation and Generalisation'', </title> <journal> ACM Trans. Database Syst. </journal> <volume> 2, </volume> <month> 2 (June </month> <year> 1977), </year> <pages> 105-133. </pages>
Reference-contexts: For example, a member of T1 may be a set of, an array of, or a pointer to T2. This is a generalization of the notion of an aggregation hierarchy <ref> [16] </ref>. 3. Since the publication of [3], the user interface has been redesigned. In particular, audio and text-to-speech capabilities have been incorporated into the display. - 4 - manager depend upon it. 3 The dependency relationship determines the default bindings of each window W in the display forest. 1.
Reference: [17] <author> B. Stroustrup, </author> <title> The C++ Programming Language (2nd Ed.), </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: OdeView then displays the selected objects using a display function associated with their type. OdeView is implemented using O++, the database programming language interface of Ode [2, Ode Manual 1991 ], which is upward compatible with C++ <ref> [17] </ref>. OdeView and O++ are compatible in that each interface can be used to manipulate objects created or updated using the other. In an earlier paper [3], OdeView's browsing facilities were described (reflecting the implementation at that time). <p> This information must therefore be provided by the class interface, i.e. using member functions of the class. We now describe how OdeView obtains specific class information, and how it compiles and executes queries. We assume that the reader is familiar with C++ <ref> [17] </ref>. 5.1 Class Interface The class designer writes class definitions in O++ . OdeView expects the class designer to provide two member functions, display and member_list, so that objects of the class can be viewed and manipulated.

References-found: 17

