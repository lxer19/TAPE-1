URL: http://www.cs.duke.edu/~pankaj/spring97/term/luebke.ps.gz
Refering-URL: http://www.cs.duke.edu/~pankaj/spring97/cps234.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Survey of Polygonal Simplification Algorithms  
Author: David Luebke 
Abstract: 1. ABSTRACT 
Abstract-found: 1
Intro-found: 1
Reference: [Aliaga 97] <author> Aliaga, Daniel. </author> <title> SGI Performance Tips (Talk). </title> <note> For more information see: http://www.cs.unc.edu/~aliaga/IR-perf.html. </note>
Reference-contexts: Experiments on an SGI Onyx with InfiniteReality graphics, for example, indicate that Gouraud-shaded depth-buffered unlit triangles render two to three times faster in a display list than in a tightly optimized immediate mode display loop <ref> [Aliaga 97] </ref>.
Reference: [Clark 76] <author> Clark, James H. </author> <title> Hierarchical Geometric Models for Visible Surface Algorithms, </title> <journal> Communications of the ACM, </journal> <volume> Vol 19, No 10, </volume> <pages> pp 547-554. </pages>
Reference-contexts: As early as 1976 James Clark described the benefits of representing objects within a scene at several resolutions, and flight simulators have long used hand-crafted multi-resolution models of airplanes to guarantee a constant frame rate <ref> [Clark 76, Cosman 81] </ref>. Recent years have seen a flurry of research into generating such multi-resolution representations of objects automatically by simplifying the polygonal geometry of the object.
Reference: [Cohen 96] <author> Cohen, Jon, A. Varshney, D. Manocha, G. Turk, H. Weber, P. Agarwal, F. Brooks, W. Wright. </author> <title> Simplification Envelopes, </title> <journal> Computer Graphics, </journal> <volume> Vol 30 (SIGGRAPH 96). </volume>
Reference-contexts: which are perhaps the most likely models to have complex topologies. 4.7 Simplification Envelopes Simplification envelopes, presented by Jonathan Cohen, Amitabh Varshney, Dinesh Manocha, Greg Turk, Hans Weber, Pankaj Agrawal, Frederick Brooks, and William Wright, provide a method of guaranteeing fidelity bounds while enforcing global as well as local topology <ref> [Cohen 96] </ref>. Simplification envelopes per se are more of a framework than an individual algorithm, and the authors of this paper present two examples of algorithms within this framework.
Reference: [Cosman 81] <author> Cosman, M., and R. Schumacker. </author> <title> System Strategies to Optimize CIG Image Content. </title> <booktitle> Proceedings Image II Conference (Scotsdale, </booktitle> <address> Arizona), </address> <year> 1981. </year>
Reference-contexts: As early as 1976 James Clark described the benefits of representing objects within a scene at several resolutions, and flight simulators have long used hand-crafted multi-resolution models of airplanes to guarantee a constant frame rate <ref> [Clark 76, Cosman 81] </ref>. Recent years have seen a flurry of research into generating such multi-resolution representations of objects automatically by simplifying the polygonal geometry of the object.
Reference: [Eck 95] <author> Eck, Matthias, T. DeRose, T. Duchamp, H. Hoppe, M. Lounsbery, W. Stuetzle. </author> <title> Multiresolution Analysis of Arbitrary Meshes, </title> <journal> Computer Graphics, </journal> <volume> Vol 29 (SIGGRAPH 95). </volume>
Reference-contexts: independently developing a system similar in many ways to the Luebke-Erikson algorithm algorithm described above. 4.10 Multiresolution Analysis of Arbitrary Meshes This adaptive subdivision algorithm by Matthias Eck, Tony DeRose, Tom Duchamp, Hugues Hoppe, Michael Lounsbery, and Werner Stuetzle uses a compact wavelet representation to guide the recursive subdivision process <ref> [Eck 95] </ref>. By adding or subtracting wavelet coefficients the algorithm can smoothly interpolate between levels of detail. The algorithm provides fidelity-based simplification by using enough wavelet coefficients to guarantee that the simplified surface lies within a userspecified distance of the original model.
Reference: [Garland 94] <author> Garland, Michael, and P. Heckburt. </author> <title> Multiresolution Modeling for Fast Rendering. </title> <booktitle> In Proceedings of Graphics Interface 94 (1994). </booktitle>
Reference-contexts: As a starting point for such a metric, they suggest the sum of the squared distances in RGB color space between corresponding pixels. <ref> [Garland 94] </ref>. 5.3 View-dependence View-dependent algorithms are quite new to the field of general polygonal simplification, and possess some definite advantages over view-independent approaches. View-independent methods are less general, making some implicit assumptions regarding object size. To begin with, physically large objects must be subdivided.
Reference: [He 95] <author> Taosong He, L. Hong, A. Kaufman, A. Varshney, and S. Wang. </author> <title> Voxel-Based Object Simplification. </title> <booktitle> Proceedings Visualization 95, </booktitle> <publisher> IEEE Computer Society Press (Atlanta, </publisher> <address> GA), </address> <year> 1995, </year> <pages> pp. 296-303. </pages>
Reference: [Hoppe 93] <author> Hoppe, Hugues. </author> <title> Mesh Optimization, </title> <journal> Computer Graphics, </journal> <volume> Vol 27 (SIGGRAPH 93). </volume>
Reference-contexts: Writing a robust system based on simplification envelopes is a substantial undertaking. 4.8 Mesh Optimization This paper by Hugues Hoppe, Tony DeRose, Tom Duchamp, John McDonald, and Werner Stuetzle, describes a complex sampling approach which evolved out of the authors work on surface reconstruction of laserscanned datasets <ref> [Hoppe 93] </ref>. Surface reconstruction is the problem of creating a three-dimensional mesh from a collection of sample points. Mesh optimization, as the name suggests, treats simplification as an optimization problem.
Reference: [Hoppe 96] <author> Hoppe, Hugues. </author> <title> Progressive Meshes, </title> <journal> Computer Graphics, </journal> <volume> Vol 30 (SIGGRAPH 96). </volume>
Reference-contexts: Second, a recursive subdivision of the base model may not be able to capture the exact geometry of the original model, especially around sharp corners and creases in the mesh <ref> [Hoppe 96] </ref>. Decimation techniques iteratively remove vertices or faces from the mesh, retriangulating the resulting hole after each step. This process continues until it reaches a userspecified degree of simplification. <p> Among the contributions of this paper was the introduction of a method to smoothly interpolate between different levels of detail, a process for which Hugues Hoppe has since used the term geomorph <ref> [Hoppe 96] </ref>. 4.3 Multi-Resolution 3D Approximations for Rendering Complex Scenes This vertex-merging algorithm by Jarek Rossignac and Paul Borrel is one of the few schemes which neither requires nor preserves valid topology. The algorithm can therefore deal robustly with degenerate models with which other approaches have little or no success. <p> The fidelity of the resulting simplifications is quite high for smooth organic forms, but the algorithm has difficulty capturing sharp features in the original model unless the features happen to fall along a division in the base mesh <ref> [Hoppe 96] </ref>. 5. ISSUES AND TRENDS 5.1 Mechanism The field of polygonal simplification appears to be converging on vertex-merging as the underlying mechanism for polygon reduction. All four surface simplification papers in the SIGGRAPH 97 conference, for example, present algorithms based on merging vertices. <p> The simplicity and robust nature of such algorithms no doubt play a large part in this trend. Work by Hoppe and Guziec has probably played a part as well, demonstrating that high-quality simplification is possible with an algorithm based entirely on edge collapses <ref> [Hoppe 96, Guziec 95] </ref>. Representations such as progressive meshes and the HDS vertex tree provide a very general framework for experimenting with different simplification strategies, including the relatively new view-dependent criteria. <p> These algorithms transmit a coarse version of the data first, followed by a stream of refinements which the receiving process uses to reconstruct the original. The progressive mesh representation is by design wellsuited for progressive transmission of polygonal models <ref> [Hoppe 96] </ref>. If the mainstream debut of 3-D graphics occurs on the scale of the WWW, polygonal simplification algorithms may well be measured by their ability to support compression and progressive transmission. 6.
Reference: [Hoppe 97] <author> Hoppe, Hugues. </author> <title> View-Dependent Refinement of Progressive Meshes, </title> <note> to appear in Computer Graphics, Vol 31 (SIGGRAPH 97). </note>
Reference-contexts: Hoppe also describes how to model some of these attributes in the energy function, allowing normals, color, and material identifiers to guide the simplification process. Finally, Hoppe has recently extended progressive meshes to perform view-dependent simplification <ref> [Hoppe 97] </ref>, independently developing a system similar in many ways to the Luebke-Erikson algorithm algorithm described above. 4.10 Multiresolution Analysis of Arbitrary Meshes This adaptive subdivision algorithm by Matthias Eck, Tony DeRose, Tom Duchamp, Hugues Hoppe, Michael Lounsbery, and Werner Stuetzle uses a compact wavelet representation to guide the recursive subdivision <p> Again, view-dependent techniques can be designed to automatically merge objects without requiring the user to explicitly establish a hierarchy of objects to be merged [Luebke 97]. Finally, view-dependent methods offer the possibility of more sophisticated simplification criteria. Some examples include preservation of silhouettes <ref> [Hoppe 97, Luebke 97, Xia 96] </ref>, preservation of specular highlights [Xia 96], and aggressive simplification of backfacing regions [Hoppe 97]. None of these criteria can be addressed by view--independent algorithms. However, view-dependence also suffers some significant drawbacks. View-dependent methods inherently involve more runtime computation than view-independent approaches. <p> Finally, view-dependent methods offer the possibility of more sophisticated simplification criteria. Some examples include preservation of silhouettes [Hoppe 97, Luebke 97, Xia 96], preservation of specular highlights [Xia 96], and aggressive simplification of backfacing regions <ref> [Hoppe 97] </ref>. None of these criteria can be addressed by view--independent algorithms. However, view-dependence also suffers some significant drawbacks. View-dependent methods inherently involve more runtime computation than view-independent approaches. When the CPU rather than the graphics subsystem is the limiting factor in rendering performance, view-dependent approaches become less attractive.
Reference: [Lorenson 87] <author> Lorenson, William E., and H. Cline. </author> <title> Marching Cubes: A High Resolution 3D Surface Construction Algorithm, </title> <journal> Computer Graphics, </journal> <volume> Vol 21 (SIGGRAPH 87). </volume>
Reference-contexts: Schroeder, Jonathan A. Zarge, and William E. Lorenson [Schroeder 92] coined the term decimation for iterative removal of vertices. Schroders decimation scheme is designed to operate on the output of the Marching Cubes algorithm for extracting isosurfaces from volumetric data <ref> [Lorenson 87] </ref>, and is still the most commonly used algorithm for this purpose. Marching cubes output is often heavily overtesselated, with coplanar regions divided into many more polygons than necessary, and Schroeders algorithm excels at removing this redundant geometry.
Reference: [Low 97] <author> Low, Kok-Lim, and T.S. Tan. </author> <title> Model Simplification Using Vertex Clustering. </title> <booktitle> In 1997 Symposium on Interactive 3D Graphics (1995), ACM SIGGRAPH, </booktitle> <pages> pp. 75-82. </pages>
Reference-contexts: the only way to predict how many triangles an LOD will have using a specified grid resolution is to perform the simplification. 4.4 Model Simplification Using Vertex Clustering Kok-Lim Low and Tiow-Seng Tan have carefully examined the Rossignac-Borrel algorithm and invented a revised version that addresses some of these shortcomings <ref> [Low 97] </ref>. Observing that the spatial binning invoked by the 3-D grid is simply a form of vertex clustering, Low and Tan introduce a different clustering approach they call floating-cell clustering .
Reference: [Luebke 97] <author> Luebke, David, and C. Erikson. </author> <title> View-Dependent Simplification of Arbitrary Polygonal Environments, </title> <note> to appear in Computer Graphics, Vol 31 (SIGGRAPH 97). </note>
Reference-contexts: This obervation has been made elsewhere and forms the basis for Luebkes algorithm, described next. 4.5 View-Dependent Simplification Of Arbitrary Polygonal Environments This vertex merging algorithm by David Luebke and Carl Erikson is one of the first to provide interactive view-dependent simplification of arbitrary polygonal scenes <ref> [Luebke 97] </ref>. The algorithm, referred to as Hierarchical Dynamic Simplification or HDS, was designed for visualization of very complex CAD models and, like the Rossignac-Borrel approach, neither requires nor preserves manifold topology. <p> Again, view-dependent techniques can be designed to automatically merge objects without requiring the user to explicitly establish a hierarchy of objects to be merged <ref> [Luebke 97] </ref>. Finally, view-dependent methods offer the possibility of more sophisticated simplification criteria. Some examples include preservation of silhouettes [Hoppe 97, Luebke 97, Xia 96], preservation of specular highlights [Xia 96], and aggressive simplification of backfacing regions [Hoppe 97]. None of these criteria can be addressed by view--independent algorithms. <p> Again, view-dependent techniques can be designed to automatically merge objects without requiring the user to explicitly establish a hierarchy of objects to be merged [Luebke 97]. Finally, view-dependent methods offer the possibility of more sophisticated simplification criteria. Some examples include preservation of silhouettes <ref> [Hoppe 97, Luebke 97, Xia 96] </ref>, preservation of specular highlights [Xia 96], and aggressive simplification of backfacing regions [Hoppe 97]. None of these criteria can be addressed by view--independent algorithms. However, view-dependence also suffers some significant drawbacks. View-dependent methods inherently involve more runtime computation than view-independent approaches.
Reference: [Rossignac 92] <author> Rossignac, Jarek, and P. Borrel. </author> <title> Multi-Resolution 3D Approximations for Rendering Complex Scenes, pp. 455-465 in Geometric Modeling in Computer Graphics, </title> <publisher> Springer-Verlag, </publisher> <editor> Eds. B. Falcidieno and T.L. Kunii, </editor> <address> Genova, Italy, 6/28/93-7/2/93. </address> <note> Also published as IBM Research Report RC17697 (77951) 2/19/92. </note>
Reference: [Schroeder 92] <author> Schroeder, William, J. Zarge and W. Lorenson, </author> <title> Decimation of Triangle Meshes, </title> <journal> Computer Graphics, </journal> <volume> Vol 26 (SIGGRAPH 92) </volume>
Reference-contexts: This also limits the simplification possible with a topology-preserving algorithm, however, since objects of high genus cannot be simplified below a certain number of polygons without closing holes in the model. In addition, a topology-preserving approach requires a mesh with valid topology to begin with. Some algorithms, such as <ref> [Schroeder 92] </ref> ignore regions in the mesh with invalid local topology, leaving the regions unsimplified, while others simply crash. Topology-simplifying algorithms do not necessarily preserve local or global topology. <p> Most of the papers chosen represent influential advances in the field; a few provide more careful treatment of existing ideas. 4.1 Decimation of Triangle Meshes One of the first published algorithms to simplify general polygonal models, this paper by William J. Schroeder, Jonathan A. Zarge, and William E. Lorenson <ref> [Schroeder 92] </ref> coined the term decimation for iterative removal of vertices. Schroders decimation scheme is designed to operate on the output of the Marching Cubes algorithm for extracting isosurfaces from volumetric data [Lorenson 87], and is still the most commonly used algorithm for this purpose.
Reference: [Teller 91] <author> Teller, Seth, and C. Sequin. </author> <title> Visibility Preprocessing for Interactive Walkthroughs, </title> <journal> Computer Graphics, </journal> <volume> Vol 25 (SIGGRAPH 91). </volume>
Reference-contexts: Gouraud shading and texture mapping fall into this category. Using information about the model to cull away large portions of the model which are occluded from the current viewpoint. The visibility processing approach described by Seth Teller and Carlo Sequin is an excellent example <ref> [Teller 91] </ref>. Polygonal simplification methods simplify the polygonal geometry of small or distant objects to reduce the rendering cost without a significant loss in the visual content of the scene. These methods are the subject of this paper.
Reference: [Turk 92] <author> Turk, Greg. </author> <title> Retiling Polygonal Surfaces, </title> <journal> Computer Graphics, </journal> <volume> Vol 26 (SIGGRAPH 92). </volume>
Reference-contexts: The decimation algorithm accepts models with non-manifold vertices, but does not attempt to simplify those regions of the model. 4.2 ReTiling Polygonal Surfaces Another of the first papers to address simplification of arbitrary polyhedral objects, this algorithm by Greg Turk <ref> [Turk 92] </ref> combines elements of the sampling and decimation mechanisms. The retiling algorithm works best on smoothly curved surfaces without sharp edges or discontinuities, preferring organic forms such as people or animals to mechanical shapes such as furniture or machine parts.
Reference: [Xia 96] <author> Xia, Julie and A. Varshney. </author> <title> Dynamic View-Dependent Simplification for Polygonal Models, Visualization 96. </title>
Reference-contexts: Again, view-dependent techniques can be designed to automatically merge objects without requiring the user to explicitly establish a hierarchy of objects to be merged [Luebke 97]. Finally, view-dependent methods offer the possibility of more sophisticated simplification criteria. Some examples include preservation of silhouettes <ref> [Hoppe 97, Luebke 97, Xia 96] </ref>, preservation of specular highlights [Xia 96], and aggressive simplification of backfacing regions [Hoppe 97]. None of these criteria can be addressed by view--independent algorithms. However, view-dependence also suffers some significant drawbacks. View-dependent methods inherently involve more runtime computation than view-independent approaches. <p> Finally, view-dependent methods offer the possibility of more sophisticated simplification criteria. Some examples include preservation of silhouettes [Hoppe 97, Luebke 97, Xia 96], preservation of specular highlights <ref> [Xia 96] </ref>, and aggressive simplification of backfacing regions [Hoppe 97]. None of these criteria can be addressed by view--independent algorithms. However, view-dependence also suffers some significant drawbacks. View-dependent methods inherently involve more runtime computation than view-independent approaches.
References-found: 18

