URL: http://www.cs.sunysb.edu/~prashant/docs/infocomm.ps
Refering-URL: http://www.cs.sunysb.edu/~prashant/
Root-URL: http://www.cs.sunysb.edu
Email: @cs.sunysb.edu  
Title: High-Performance IP Routing Table Lookup Using CPU Caching  
Author: Tzi-cker Chiueh Prashant Pradhan chiueh, prashant 
Address: NY 11794-4400  
Affiliation: Computer Science Department State University of New York at Stony Brook Stony Brook,  
Abstract: Wire-speed IP (Internet Protocol) routers require very fast routing table lookup for incoming IP packets. The routing table lookup operation is time consuming because the part of an IP address used in the lookup, i.e., the network address portion, is variable in length. This paper describes the routing table lookup algorithm used in a cluster-based parallel IP router project called Suez. The innovative aspect of this algorithm is its ability to use CPU caching hardware to perform routing table caching and lookup directly by carefully mapping IP addresses to virtual addresses. By running a detailed simulation model that incorporates the performance effects of the CPU memory hierarchy against a packet trace collected from a major network router, we show that the overall performance of the proposed algorithm can reach 87.87 million lookups per second for a 500-MHz Alpha processor with a 16-KByte L1 cache and a 1-MByte L2 cache. This result is one to two orders of magnitude faster than previously reported results on software-based routing table lookup implementations. This paper also reports the performance impacts of various architectural parameters in the proposed scheme and its storage costs, together with the measurements of an implementation of the proposed scheme on a Pentium-II machine running Linux. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Szpankowski, W., </author> <title> "Patricia tries again revisited," </title> <journal> Journal of the Association for Computing Machinery, vol.37, no.4, </journal> <volume> p. </volume> <pages> 691-711. </pages>
Reference-contexts: Section 7 concludes this paper with a summary of the main results of this work, and a brief outline of on-going work. 2 Related Work The most popular search data structure for the longest prefix string match problem is the bit-by-bit Patricia trie <ref> [1] </ref>. A similar technique called reduced radix tree [11], has been implemented in the 4.3 version of Berkeley Unix [2]. Pei et al. [3] compared the VLSI implementation cost and the performance of content-addressable memory (CAM)-based and trie-based solutions to the routing table lookup problem.
Reference: [2] <author> Sklower, K., </author> <title> "A tree-based packet routing table for Berkeley UNIX," </title> <booktitle> Proceedings of the Winter 1991 USENIX Conference, p. </booktitle> <pages> 93-103, </pages> <address> Dallas, TX, USA 21-25 Jan. </address> <year> 1991. </year>
Reference-contexts: A similar technique called reduced radix tree [11], has been implemented in the 4.3 version of Berkeley Unix <ref> [2] </ref>. Pei et al. [3] compared the VLSI implementation cost and the performance of content-addressable memory (CAM)-based and trie-based solutions to the routing table lookup problem. McAuley and Francis [4] proposed several fast routing table lookup solutions for variable-length hierarchical network address based on binary and ternary CAMs.
Reference: [3] <author> Pei, T.-B.; Zukowski, C., </author> <title> "Putting routing tables in silicon," </title> <journal> IEEE Network, vol.6, no.1, </journal> <volume> p. </volume> <pages> 42-50, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: A similar technique called reduced radix tree [11], has been implemented in the 4.3 version of Berkeley Unix [2]. Pei et al. <ref> [3] </ref> compared the VLSI implementation cost and the performance of content-addressable memory (CAM)-based and trie-based solutions to the routing table lookup problem. McAuley and Francis [4] proposed several fast routing table lookup solutions for variable-length hierarchical network address based on binary and ternary CAMs.
Reference: [4] <author> McAuley, A.J.; Francis, P., </author> <title> "Fast routing table lookup using CAMs," </title> <booktitle> IEEE INFOCOMM '93, </booktitle> <address> p. 1382-91 vol.3, San Francisco, CA, USA 28 March-1 April 1993. </address>
Reference-contexts: A similar technique called reduced radix tree [11], has been implemented in the 4.3 version of Berkeley Unix [2]. Pei et al. [3] compared the VLSI implementation cost and the performance of content-addressable memory (CAM)-based and trie-based solutions to the routing table lookup problem. McAuley and Francis <ref> [4] </ref> proposed several fast routing table lookup solutions for variable-length hierarchical network address based on binary and ternary CAMs. Knox and Panchanathan [5] described a multiprocessor-based routing table lookup solution based on linear pipelined array implementation of the radix searching algorithm.
Reference: [5] <author> Knox, D.; Panchanathan, S., </author> <title> "Parallel searching techniques for routing table lookup," </title> <booktitle> IEEE INFOCOMM '93, </booktitle> <address> p. 1400-5 vol.3, San Francisco, CA, USA 28 March-1 April 1993. </address>
Reference-contexts: McAuley and Francis [4] proposed several fast routing table lookup solutions for variable-length hierarchical network address based on binary and ternary CAMs. Knox and Panchanathan <ref> [5] </ref> described a multiprocessor-based routing table lookup solution based on linear pipelined array implementation of the radix searching algorithm. More recently, Waldvogel et al. [9] developed a lookup scheme using multiple hash tables, each based on a distinct prefix length.
Reference: [6] <author> Feldmeier, </author> <title> D.C., "Improving gateway performance with a routing-table cache," </title> <booktitle> IEEE INFO-COMM '88, p. </booktitle> <pages> 298-307, </pages> <address> New Orleans, LA, USA 27-31 March 1988. </address>
Reference-contexts: None of previous works have reported detailed delay measurements that included CPU caching effects. Another way to speed up routing table lookup is to cache the lookup results. Feldmeier <ref> [6] </ref> studied the management policy for the routing-table cache, and showed that the routing-table lookup time can be reduced by up to 65%. Chen [7] investigated the validity and effectiveness of caching for routing-table lookup in multimedia environments.
Reference: [7] <author> Chen, X., </author> <title> "Effect of caching on routing-table lookup in multimedia environments," </title> <booktitle> IEEE INFOCOMM '91, </booktitle> <address> p. 1228-36 vol.3, Bal Harbour, FL, USA 7-11 April 1991. </address>
Reference-contexts: Another way to speed up routing table lookup is to cache the lookup results. Feldmeier [6] studied the management policy for the routing-table cache, and showed that the routing-table lookup time can be reduced by up to 65%. Chen <ref> [7] </ref> investigated the validity and effectiveness of caching for routing-table lookup in multimedia environments.
Reference: [8] <author> Estrin, D.; Mitzel, </author> <title> D.J., "An assessment of state and lookup overhead in routers," </title> <booktitle> IEEE INFOCOMM '92, </booktitle> <address> p. 2332-42 vol.3, Florence, Italy 4-8 May 1992. </address>
Reference-contexts: Feldmeier [6] studied the management policy for the routing-table cache, and showed that the routing-table lookup time can be reduced by up to 65%. Chen [7] investigated the validity and effectiveness of caching for routing-table lookup in multimedia environments. Estrin and Mitzel <ref> [8] </ref> derived the storage requirements for maintaining state and lookup information on the routers, and showed that locality exists by performing trace-driven simulations of an LRU routing table lookup cache, for different conversation granularities. None of the previous works exploited the CPU cache available in modern processors, as in Suez.
Reference: [9] <author> Waldvogel, M.; Varghese, G.; Turner, J.; Plattner, B., </author> <title> "Scalable High Speed IP Routing Lookups," </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <volume> Vol. 27, No. 4, </volume> <pages> p. 29-36, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: McAuley and Francis [4] proposed several fast routing table lookup solutions for variable-length hierarchical network address based on binary and ternary CAMs. Knox and Panchanathan [5] described a multiprocessor-based routing table lookup solution based on linear pipelined array implementation of the radix searching algorithm. More recently, Waldvogel et al. <ref> [9] </ref> developed a lookup scheme using multiple hash tables, each based on a distinct prefix length. The worst-case lookup time is shown to be log 2 (N o: of address bits). This work also introduced a Mutating Binary Search technique to further reduce the required number of hash table lookups.
Reference: [10] <author> Degermark, M.; Brodnik, A.; Carlsson, S.; Pink, S., </author> <title> "Small Forwarding tables for Fast Routing Lookups," </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <volume> Vol. 27, No. 4, </volume> <pages> p. 3-14, </pages> <month> October </month> <year> 1997. </year> <month> 17 </month>
Reference-contexts: The worst-case lookup time is shown to be log 2 (N o: of address bits). This work also introduced a Mutating Binary Search technique to further reduce the required number of hash table lookups. Degermark et al. <ref> [10] </ref> developed a compact routing table representation to ensure the entire representation be fit within typical L2 caches. They estimated each lookup can be completed within 100 instructions using 8 memory references.
Reference: [11] <author> Doeringer, W.; Karjoth, G.; Nassehi, M., </author> <title> "Routing on Longest Matching Prefixes," </title> <journal> IEEE Transactions on Networking, Vol.4, No.1, Feb.96. </journal>
Reference-contexts: A similar technique called reduced radix tree <ref> [11] </ref>, has been implemented in the 4.3 version of Berkeley Unix [2]. Pei et al. [3] compared the VLSI implementation cost and the performance of content-addressable memory (CAM)-based and trie-based solutions to the routing table lookup problem.
Reference: [12] <institution> Michigan University and Merit Network. Internet Performance Management and Analysis (IPMA) Project. </institution> <address> http://nic.merit.edu/ ipma. </address>
Reference-contexts: X means not applicable. 11 5 Performance Evaluation 5.1 Network Address Distribution To determine the storage cost of NART tables, we converted the routing tables of two major routers, one from BNL and one from Merit <ref> [12] </ref>, into the NART representation. We also did the conversion for the entire IP network address space as reported by IANA/ISI up until 11/1997. The results are shown in Table 1.
Reference: [13] <author> Gupta, P.; McKeown, N.; Lin, S., </author> <title> "Routing Lookups in Hardware at Memory Access Speeds," </title> <publisher> IEEE INFOCOMM, </publisher> <address> April 1998, San Francisco. </address> <month> 18 </month>
Reference-contexts: Compared to previous schemes, Suez's routing table organization is much simpler and the lookup operation is thus more efficient. Unlike tree-based search algorithms, Suez's routing table lookup algorithm does not require backtracking to support longest prefix match. Another work in <ref> [13] </ref> addresses routing table lookup in hardware by using a large amount of inexpensive DRAM to implement a two-level flat lookup table and pipelining the accesses.
References-found: 13

