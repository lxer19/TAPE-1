URL: ftp://coast.cs.purdue.edu/pub/COAST/papers/diego-zamboni/zamboni9805.ps
Refering-URL: http://www.cs.purdue.edu/coast/projects/autonomous-agents.html
Root-URL: http://www.cs.purdue.edu
Email: fbalasujs,jgarcia,isacoff,spaf,zambonig@cs.purdue.edu  
Title: An Architecture for Intrusion Detection using Autonomous Agents  
Author: Jai Sundar Balasubramaniyan, Jose Omar Garcia-Fernandez, David Isacoff, Eugene Spafford, Diego Zamboni 
Date: June 11, 1998  
Address: West Lafayette, IN 47907-1398  
Affiliation: COAST Laboratory Purdue University  COAST  
Pubnum: Technical Report 98/05  
Abstract: The Intrusion Detection System architectures commonly used in commercial and research systems have a number of problems that limit their configurability, scalability or efficiency. The most common shortcoming in the existing architectures is that they are built around a single monolithic entity that does most of the data collection and processing. In this paper, we review our architecture for a distributed Intrusion Detection System based on multiple independent entities working collectively. We call these entities Autonomous Agents. This approach solves some of the problems previously mentioned. We present the motivation and description of the approach, partial results obtained from an early prototype, a discussion of design and implementation issues, and directions for future work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jeffrey M. Bradshaw. </author> <title> An introduction to software agents. </title> <editor> In Jeffrey M. Bradshaw, editor, </editor> <booktitle> Software Agents, chapter 1. </booktitle> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: These systems solve most of the problems mentioned except for the reconfiguration or adding capabilities to the IDS, which are not described in either of the two designs. 1.4 Autonomous Agents A software agent can be defined as <ref> [1] </ref>: : : : a software entity which functions continuously and autonomously in a particular environment : : : able to carry out activities in a flexible and intelligent manner that is responsive to changes in the environment : : : Ideally, an agent that functions continuously : : : would
Reference: [2] <author> Mark Crosbie, Bryn Dole, Todd Ellis, Ivan Krsul, and Eugene Spafford. </author> <title> IDIOT| Users Guide. </title> <institution> COAST Laboratory, Purdue University, 1398 Computer Science Building, West Lafayette, </institution> <note> IN 47907-1398, September 1996. Available at http://www.cs.purdue. edu/coast/coast-library.html. </note>
Reference-contexts: Thus it may be a simple program that monitors a specific system variable or an event (for example, counting the number of telnet connections within the last 5 minutes), or a complex software system (for example, an instance of IDIOT <ref> [2] </ref> looking for a set of local intrusion patterns). As long as the agent produces its output in the appropriate format and sends it to the transceiver, it can be part of the AAFID system. Internally, agents are also allowed to perform any functions they need. <p> Another possibility is to embed the agents within a central audit server that passes appropriate records to appropriate agents. A version of this approach has successfully been used in the IDIOT IDS <ref> [2, 15] </ref>. One problem is that this model only supports the push mechanism of client-server interaction. This means that the server sends events to the agents as they become available.
Reference: [3] <author> Mark Crosbie and Eugene Spafford. </author> <title> Defending a computer system using autonomous agents. </title> <booktitle> In Proceedings of the 18th National Information Systems Security Conference, </booktitle> <month> Oct </month> <year> 1995. </year>
Reference-contexts: This idea is proposed in <ref> [3] </ref> and is also used in [24]. * The ability to start and stop agents independently of each other in the systems that are being monitored adds the possibility of reconfiguring the IDS (or parts of it) without having to restart it. <p> A distributed sensor system that performs central processing and that can be organized in a hierarchical fashion is described in [12]. This paper proposes a system that is almost identical to the original design of our system as done in <ref> [3] </ref>. It appeared several years later in the same conference, but [12] has little in the way of detail, and no citations to related work that would enable us to determine how their work may relate to ours. <p> Monitors can be programmed to perform any function. The EMERALD project is work in progress, and we expect it to provide some interesting results. The approach for using Autonomous Agents in ID that was the foundation for our work was proposed in <ref> [3, 4] </ref>. <p> Internally, agents are also allowed to perform any functions they need. Some possibilities are: * Agents may evolve over time using genetic pro gramming techniques, as suggested in <ref> [3] </ref>. * Agents may employ techniques to retain state between sessions, allowing them to detect long-term attacks or changes in behavior.
Reference: [4] <author> Mark Crosbie and Gene Spafford. </author> <title> Active defense of a computer system using autonomous agents. </title> <type> Technical Report 95-008, </type> <institution> COAST Group, Department of Computer Sciences, Purdue University, West Lafayette, </institution> <note> IN 47907-1398, </note> <month> Feb </month> <year> 1995. </year>
Reference-contexts: Notice that the definition of an IDS does not include preventing the intrusion from occurring, only detecting it and reporting the intrusion to an operator. 1.2 Desirable characteristics of an IDS In <ref> [4] </ref>, the following characteristics are identified as desirable for an IDS: * It must run continually with minimal human su pervision. * It must be fault tolerant in the sense that it must be able to recover from system crashes, either accidental or caused by malicious activity. <p> Monitors can be programmed to perform any function. The EMERALD project is work in progress, and we expect it to provide some interesting results. The approach for using Autonomous Agents in ID that was the foundation for our work was proposed in <ref> [3, 4] </ref>.
Reference: [5] <author> Dorothy E. Denning. </author> <title> An Intrusion-Detection Model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(2) </volume> <pages> 222-232, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: Anomaly detection model: Detection is performed by detecting changes in the patterns of utilization or behavior of the system. This is the type of intrusion detection described in <ref> [5] </ref>. It is performed by building a statistical model that contains metrics derived from system operation and flagging as intrusive any observed metrics that have a significant statistical deviation from the model.
Reference: [6] <author> William M. Farmer, Joshua D. Guttman, and Vipin Swarup. </author> <title> Security for mobile agents: Issues and requirements. </title> <booktitle> In Proceedings of the 19th National Information Systems Security Conference, </booktitle> <volume> volume 2, </volume> <pages> pages 591-597. </pages> <institution> National Institute of Standards and Technology, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: The topics of secure communications, secure distributed computation and security in autonomous agents have been already studied <ref> [6, 13] </ref>, and possibly 7 some previous work can be used in AAFID imple-mentations to obtain communication channels that provide the necessary characteristics. 2.4 Other ideas and possible compo nents In the course of designing our system architecture, we explored some alternate architectural components.
Reference: [7] <editor> Stephanie Forrest, Steven Hofmeyer, Anil So-mayaji, and Thomas Longstaff. </editor> <title> A sense of self for Unix processes. </title> <booktitle> In Proceedings of the 1996 IEEE Symposium on Security and Privacy. </booktitle> <publisher> IEEE, IEEE Computer Press, </publisher> <year> 1996. </year>
Reference-contexts: One promising area to explore is the development of agents that monitor patterns of system calls to identify anomalous behavior. It has been 15 shown <ref> [7] </ref> that is possible to detect several com-mon intrusions by performing short-range corre lations of a process's system calls. High-level implementations: The latest high-level prototype mentioned in Section 3 is currently in continuous development and improvement.
Reference: [8] <editor> Stephanie Forrest, Steven A. Hofmeyr, and Anil Somayaji. </editor> <title> Computer Immunology. </title> <journal> Communications of the ACM, </journal> <volume> 40(10) </volume> <pages> 88-96, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: The idea of employing widely distributed elements to perform intrusion detection, by emulating to some extent the biological immune systems, and by giving the system a sense of "self", has also been explored <ref> [8] </ref>. A distributed sensor system that performs central processing and that can be organized in a hierarchical fashion is described in [12]. This paper proposes a system that is almost identical to the original design of our system as done in [3].
Reference: [9] <author> R. Heady, G. Luger, A. Maccabe, and M. Servilla. </author> <title> The Architecture of a Network Level Intrusion Detection System. </title> <type> Technical report, </type> <institution> University of New Mexico, Department of Computer Science, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: Thus, our definition matches the one given in <ref> [9] </ref>, where an intrusion is defined as "any set of actions that attempt to compromise the integrity, confidentiality, or availability of a resource." We have received comments regarding the use of the word intrusion in the previous definition. <p> If a large number of hosts is being monitored, it becomes impractical to restart the IDS in all of them whenever a change has to be made. 1.3 Limitations of existing IDS Many of the existing network- and host-based IDSs <ref> [9, 10] </ref> perform data collection and analysis centrally using a monolithic architecture. By this we mean that the data is collected by a single host, either from audit trails or by monitoring packets in a network, and analyzed by a single module using different techniques.
Reference: [10] <author> L. Heberlein, G. Dias, K. Levitt, B. Mukherjee, J. Wood, and D. Wolber. </author> <title> A Network Security Monitor. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: If a large number of hosts is being monitored, it becomes impractical to restart the IDS in all of them whenever a change has to be made. 1.3 Limitations of existing IDS Many of the existing network- and host-based IDSs <ref> [9, 10] </ref> perform data collection and analysis centrally using a monolithic architecture. By this we mean that the data is collected by a single host, either from audit trails or by monitoring packets in a network, and analyzed by a single module using different techniques.
Reference: [11] <author> Judith Hochberg, Kathleen Jackson, Cathy Stallings, J. F. McClary, David DuBois, and Josephine Ford. NADIR: </author> <title> An automated system for detecting network intrusion and misuse. </title> <journal> Computers and Security, </journal> <volume> 12(3) </volume> <pages> 235-248, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: By this we mean that the data is collected by a single host, either from audit trails or by monitoring packets in a network, and analyzed by a single module using different techniques. Other IDSs <ref> [11, 22] </ref> perform distributed data collection (and some preprocessing) by using modules distributed in the hosts that are being monitored, but the collected data is still shipped to a central location where it is analyzed by a monolithic engine. <p> According to [24], GrIDS provides mechanisms to allow third-party security tools to be used as data sources, but it is not clear if and how data sources can be added, removed or updated. The NADIR system <ref> [11] </ref> performs distributed data collection by employing the existing service nodes in Los Alamos National Laboratory's Integrated Computer Network (ICN) to collect audit information, which is then analyzed by a central expert system. This work describes an IDS that runs in a real-world system, therefore [11] presents many interesting results and <p> The NADIR system <ref> [11] </ref> performs distributed data collection by employing the existing service nodes in Los Alamos National Laboratory's Integrated Computer Network (ICN) to collect audit information, which is then analyzed by a central expert system. This work describes an IDS that runs in a real-world system, therefore [11] presents many interesting results and considerations regarding the collection, storage, reduction and processing of data in a large computer network.
Reference: [12] <author> Willian Hunteman. </author> <title> Automated information system | (ais) alarm system. </title> <booktitle> In Proceedings of the 20th National Information Systems Security Conference. </booktitle> <institution> National Institute of Standards and Technology, </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: A distributed sensor system that performs central processing and that can be organized in a hierarchical fashion is described in <ref> [12] </ref>. This paper proposes a system that is almost identical to the original design of our system as done in [3]. It appeared several years later in the same conference, but [12] has little in the way of detail, and no citations to related work that would enable us to determine <p> distributed sensor system that performs central processing and that can be organized in a hierarchical fashion is described in <ref> [12] </ref>. This paper proposes a system that is almost identical to the original design of our system as done in [3]. It appeared several years later in the same conference, but [12] has little in the way of detail, and no citations to related work that would enable us to determine how their work may relate to ours.
Reference: [13] <institution> IEEE Journal on Selected Areas in Communications, </institution> <month> May </month> <year> 1989. </year> <note> Special issue on Secure Communications. </note>
Reference-contexts: The topics of secure communications, secure distributed computation and security in autonomous agents have been already studied <ref> [6, 13] </ref>, and possibly 7 some previous work can be used in AAFID imple-mentations to obtain communication channels that provide the necessary characteristics. 2.4 Other ideas and possible compo nents In the course of designing our system architecture, we explored some alternate architectural components.
Reference: [14] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> En-glewood Cliffs, NJ 07632, USA, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: IDSs. 3 Implementations We have developed two prototypes based on the AAFID architecture, and we are currently in the process of improving those implementations as well as developing new ones. 3.1 First prototype The first prototype we built was programmed in a combination of Perl [28], Tcl/Tk [18] and C <ref> [14] </ref>, and was intended as a proof of concept for the architecture. In this implementation, which we call AAFID 1 , much of the behavior of the components was hard-coded and it was not extremely configurable.
Reference: [15] <author> Sandeep Kumar. </author> <title> Classification and Detection of Computer Intrusions. </title> <type> PhD thesis, </type> <institution> Purdue University, West Lafayette, </institution> <note> IN 47907, </note> <year> 1995. </year>
Reference-contexts: Another possibility is to embed the agents within a central audit server that passes appropriate records to appropriate agents. A version of this approach has successfully been used in the IDIOT IDS <ref> [2, 15] </ref>. One problem is that this model only supports the push mechanism of client-server interaction. This means that the server sends events to the agents as they become available.
Reference: [16] <author> Biswanath Mukherjee, Todd L. Heberlein, and Karl N. Levitt. </author> <title> Network intrusion detection. </title> <journal> IEEE Network, </journal> <volume> 8(3) </volume> <pages> 26-41, </pages> <note> May/June 1994. [17] "intrusion". Merriam-Webster OnLine: WWWebster Dictionary. http://www.m-w. com/dictionary, 1998. Accessed on May 16, </note> <year> 1998. </year>
Reference-contexts: and motivation We start by introducing some concepts that are used throughout this paper, as well as describing the limitations that we see in existing Intrusion Detection Systems, and why a distributed approach using autonomous agents can help in overcoming those limitations. 1.1 Intrusion Detection Intrusion detection (ID) is defined <ref> [16] </ref> as "the problem of identifying individuals who are using a com fl Portions of this work were supported by contract MDA904-97-6-0176 from the Maryland Procurement Office, and by sponsors of the COAST Laboratory. y Main author and contact person for questions concerning this paper puter system without authorization (i.e., `crackers') <p> In this sense, a more proper term is Intrusion and Misuse Detection. Given our definition, we use the term intrusion to represent both intrusion and misuse. We also use the broad categorization of models of intrusion detection described in <ref> [16] </ref>: Misuse detection model: Detection is performed by looking for the exploitation of known weak points in the system, which can be described by a specific pattern or sequence of events or data (the "signature" of the intrusion). <p> An Intrusion Detection System (IDS) is a computer 1 program that attempts to perform ID by either mis-use or anomaly detection, or a combination of techniques. An IDS should preferably perform its task in real time <ref> [16] </ref>. IDSs are usually classified [16] as host-based or network-based. Host-based systems base their decisions on information obtained from a single host (usually audit trails), while network-based systems obtain data by monitoring the traffic of information in the network to which the hosts are connected. <p> An Intrusion Detection System (IDS) is a computer 1 program that attempts to perform ID by either mis-use or anomaly detection, or a combination of techniques. An IDS should preferably perform its task in real time <ref> [16] </ref>. IDSs are usually classified [16] as host-based or network-based. Host-based systems base their decisions on information obtained from a single host (usually audit trails), while network-based systems obtain data by monitoring the traffic of information in the network to which the hosts are connected. <p> A good review of systems that take both approaches is presented in <ref> [16] </ref>. There are a number of problems with these architectures: * The central analyzer is a single point of failure.
Reference: [18] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, USA, </address> <year> 1994. </year>
Reference-contexts: common to distributed IDSs. 3 Implementations We have developed two prototypes based on the AAFID architecture, and we are currently in the process of improving those implementations as well as developing new ones. 3.1 First prototype The first prototype we built was programmed in a combination of Perl [28], Tcl/Tk <ref> [18] </ref> and C [14], and was intended as a proof of concept for the architecture. In this implementation, which we call AAFID 1 , much of the behavior of the components was hard-coded and it was not extremely configurable.
Reference: [19] <author> Phillip A. Porras and Peter G. Neumann. </author> <title> EMERALD: Event monitoring enabling responses to anomalous live disturbances. </title> <booktitle> In Proceedings of the 20th National Information Systems Security Conference. </booktitle> <institution> National Institute of Standards and Technology, </institution> <year> 1997. </year>
Reference-contexts: It appeared several years later in the same conference, but [12] has little in the way of detail, and no citations to related work that would enable us to determine how their work may relate to ours. The EMERALD project <ref> [19] </ref> proposes a distributed architecture for intrusion detection that employs entities called service monitors which are deployed to hosts and perform monitoring functions similar to the functionality we propose for our agents. They also define several layers of monitors for performing data reduction in a hierarchical fashion.
Reference: [20] <author> Thomas H. Ptacek and Timothy N. Newsham. </author> <title> Insertion, evasion, and denial of service: Eluding network intrusion detection. </title> <type> Technical report, </type> <institution> Secure Networks, Inc., </institution> <month> January </month> <year> 1998. </year>
Reference-contexts: Changes and additions are usually done by editing a configuration file, adding an entry to a table or installing a new module. The IDS usually has to be restarted to make the changes take effect. * Analysis of network data can be flawed. As shown in <ref> [20] </ref>, performing collection of network data in a host other than the one to which the data is destined can provide the attacker the possibility of performing Insertion and Evasion attacks. <p> It apparently also allows us to build IDSs that are more resistant to insertion and evasion attacks <ref> [20] </ref> than existing architectures, although no tests have been performed to support this claim. Furthermore, the modular characteristics of the architecture allow it to be easily extended, configured and modified, either by adding new components, or by replacing components when they need to be updated.
Reference: [21] <author> Marshall Rose. </author> <title> The Simple Book: an introduction to management of TCP/IP based internets. </title> <publisher> Prentice Hall, </publisher> <address> NJ, </address> <year> 1993. </year> <month> 18 </month>
Reference-contexts: We also discuss the merits and demerits of employing them in our system. These components are not currently part of the AAFID architecture. 2.4.1 The Simple Network Management Pro tocol (SNMP) The Simple Network Management Protocol (SNMP ) <ref> [21] </ref> is a protocol designed to facilitate the exchange of management information between network devices. The SNMP model comprises a Network Management System (NMS) and Managed Devices.
Reference: [22] <author> S. R. Snapp, J. Brentano, G. V. Dias, T. L. Goan, L. T. Heberlein, C. Ho, K. N. Levitt, B. Mukherjee, S. E. Smaha, T. Grance, D. M. Teal, and D. Mansur. </author> <title> DIDS (Distributed Intrusion Detection System) Motivation, Architecture, and an early Prototype. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 167-176, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: By this we mean that the data is collected by a single host, either from audit trails or by monitoring packets in a network, and analyzed by a single module using different techniques. Other IDSs <ref> [11, 22] </ref> perform distributed data collection (and some preprocessing) by using modules distributed in the hosts that are being monitored, but the collected data is still shipped to a central location where it is analyzed by a monolithic engine.
Reference: [23] <author> Eugene Spafford and Diego Zamboni. </author> <title> A framework and prototype for a distributed intrusion detection system. </title> <type> Technical Report 98-06, </type> <institution> COAST Laboratory, Purdue University, West Lafayette, </institution> <note> IN 47907-1398, </note> <month> May </month> <year> 1998. </year>
Reference-contexts: Agents can be written in any programming language. Some functionalities (e.g., reporting, communication and synchronization mechanisms) are common to all the agents, and can be provided through shared libraries or similar mechanisms. Thus, a framework implementation (such as the one described in <ref> [23] </ref>) can provide most of the tools and mechanisms necessary to make writing new agents a relatively simple task. 2.2.2 Transceivers Transceivers are the external communications interface of each host. They have two roles: control and data processing. <p> This implementation is our current test bed for the architecture and is the one under which we are developing new agents and exploring new communication and data-reduction mechanisms. A much more detailed description of AAFID 2 can be found in <ref> [23] </ref>. 3.3 Low-level implementations The first two prototypes have helped us in refining the architecture as well as identifying needs and problems that have to be solved. <p> Further advantages and disadvantages of this low-level approach are described in Section 4.2. 4 Experiences, comments and design issues Through the experiences obtained with the design and implementations of the AAFID architecture (see Section 3 and <ref> [23] </ref>), we have identified a number of issues that should be subject of future work. <p> This can be at the agent, transceiver or monitor level. We have demonstrated the feasibility of this architecture by the implementation of working prototypes. The first such prototype is described in this paper, while the second is described in detail in <ref> [23] </ref> The AAFID architecture allows data to be collected from multiple sources, thus allowing us to combine the best characteristics of traditional host-based and network-based IDSs.
Reference: [24] <author> S. Staniford-Chen, S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland, K. Levitt, C. Wee, R. Yip, and D. Zerkle. </author> <title> GrIDS: A graph based intrusion detection system for large networks. </title> <booktitle> In Proceedings of the 19th National Information Systems Security Conference, </booktitle> <volume> volume 1, </volume> <pages> pages 361-370. </pages> <institution> National Institute of Standards and Technology, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: These attacks make use of mismatched assumptions in the network protocol stacks of dif 2 ferent hosts to hide the attacks or create denial- of-service attacks. Other IDSs have been designed to do distributed collection and analysis of information. A hierarchical system is described in <ref> [24] </ref>, and [29] describes a cooperative system without a central authority. <p> This idea is proposed in [3] and is also used in <ref> [24] </ref>. * The ability to start and stop agents independently of each other in the systems that are being monitored adds the possibility of reconfiguring the IDS (or parts of it) without having to restart it. <p> The GrIDS project at UC Davis <ref> [24] </ref> employs data source modules running in each host to report information to graph engines that build a graph representation of activity in the network and use it to detect possible intrusions. According to [24], GrIDS provides mechanisms to allow third-party security tools to be used as data sources, but it <p> The GrIDS project at UC Davis <ref> [24] </ref> employs data source modules running in each host to report information to graph engines that build a graph representation of activity in the network and use it to detect possible intrusions. According to [24], GrIDS provides mechanisms to allow third-party security tools to be used as data sources, but it is not clear if and how data sources can be added, removed or updated.
Reference: [25] <author> Stuart Staniford-Chen. </author> <title> Common intrusion detection framework. </title> <note> WWW page at http://seclab.cs.ucdavis.edu/cidf/. </note>
Reference-contexts: Furthermore, the modular characteristics of the architecture allow it to be easily extended, configured and modified, either by adding new components, or by replacing components when they need to be updated. For example, it should be possible to modify the system to produce messages in CIDF format <ref> [25] </ref>. The AAFID architecture faces many of the problems that have been traditionally in the realm of distributed systems research, such as scalability, performance and security.
Reference: [26] <author> W. Richard Stevens. </author> <title> TCP/IP Illustrated, volume Volume 1|The Protocols of Professional Computing Series. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The Management Information Base (MIB) is a database that specifies variables that are maintained by the agents, and that the manager can query or set <ref> [26] </ref>. There are four operations defined: get and getnext for information retrieval, set for information setting, and trap for handling of asynchronous events. The SNMP model can be used to implement the AAFID architecture.
Reference: [27] <author> Uresh Vahalia. </author> <title> UNIX Internals: The New Frontiers. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ 07632, USA, </address> <year> 1996. </year>
Reference-contexts: Pipes. In traditional Unix implementations , a pipe is a unidirectional, first-in first-out, unstructured data stream of fixed maximum size <ref> [27] </ref>. Data is written to the end of the pipe and read from the front of the pipe. The data is removed from the pipe after it is read. The read and write file descriptors that are returned by the pipe system call are inherited by any child processes.
Reference: [28] <author> Larry Wall, Tom Christiansen, and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> second edition edition, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: a problem common to distributed IDSs. 3 Implementations We have developed two prototypes based on the AAFID architecture, and we are currently in the process of improving those implementations as well as developing new ones. 3.1 First prototype The first prototype we built was programmed in a combination of Perl <ref> [28] </ref>, Tcl/Tk [18] and C [14], and was intended as a proof of concept for the architecture. In this implementation, which we call AAFID 1 , much of the behavior of the components was hard-coded and it was not extremely configurable.
Reference: [29] <author> Gregory B. White, Eric A. Fisch, and Udo W. Pooch. </author> <title> Cooperating security managers: A peer-based intrusion detection system. </title> <journal> IEEE Network, </journal> <pages> pages 20-23, </pages> <month> January/February </month> <year> 1996. </year> <month> 19 </month>
Reference-contexts: These attacks make use of mismatched assumptions in the network protocol stacks of dif 2 ferent hosts to hide the attacks or create denial- of-service attacks. Other IDSs have been designed to do distributed collection and analysis of information. A hierarchical system is described in [24], and <ref> [29] </ref> describes a cooperative system without a central authority. <p> This work describes an IDS that runs in a real-world system, therefore [11] presents many interesting results and considerations regarding the collection, storage, reduction and processing of data in a large computer network. A novel approach is presented in <ref> [29] </ref>, in which Cooperative Security Managers (CSM) are employed to perform distributed intrusion detection that does not need a hierarchical organization or a central coordinator.
References-found: 28

