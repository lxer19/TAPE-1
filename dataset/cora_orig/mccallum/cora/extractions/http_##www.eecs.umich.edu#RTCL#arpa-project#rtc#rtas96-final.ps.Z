URL: http://www.eecs.umich.edu/RTCL/arpa-project/rtc/rtas96-final.ps.Z
Refering-URL: http://www.eecs.umich.edu/RTCL/arpa-project/rtc/
Root-URL: http://www.eecs.umich.edu
Email: fashish,atri,kgshing@eecs.umich.edu  
Title: Resource Management for Real-Time Communication: Making Theory Meet Practice  
Author: Ashish Mehra, Atri Indiresan and Kang G. Shin 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: This paper focuses on bridging the gap between theory and practice in the management of host CPU and link resources for real-time communication. Using our implementation of real-time channels, a paradigm for real-time communication in packet-switched networks, we illustrate the tradeoff between resource capacity and channel admissibility, which determines the number and type of real-time channels that can be accepted for service and the performance delivered to best-effort traffic. We demonstrate that this tradeoff is affected significantly by the choice of implementation paradigms and the grain at which CPU and link resources are multiplexed amongst active channels. To account for this effect, we extend the admission control procedure for real-time channels originally proposed using idealized resource models. Our results show that practical considerations significantly reduce channel admissibility compared to idealized resource models. Further, the optimum choice of multiplexing grain depends on several factors such as resource preemption overheads, the relationship between CPU and link bandwidth, and the interaction between link bandwidth allocation and CPU bandwidth allocation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, S. Y. Tzou, R. Wahbe, R. Govindan, and M. Andrews. </author> <title> Support for continuous media in the DASH system. </title> <booktitle> In Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 54-61, </pages> <year> 1990. </year>
Reference-contexts: Data transfer on real-time channels has unreliable-datagram semantics, i.e., occurs without acknowledgements and retransmissions. 2.1. Traffic Generation and QoS Traffic generation on real-time channels is based on a linear bounded arrival process <ref> [7, 1] </ref> characterized by three parameters: maximum message size (S max bytes), maximum message rate (R max messages/second), and maximum burst size (B max messages). The notion of logical arrival time is used to enforce a minimum separation I min between messages on the same real-time channel.
Reference: [2] <author> C. M. Aras, J. F. Kurose, D. S. Reeves, and H. Schulzrinne. </author> <title> Real-time communication in packet-switched networks. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 82(1) </volume> <pages> 122-139, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: In this paper, we focus on bridging the gap between theory and practice in the management of host CPU and link resources for real-time communication. For this purpose we utilize real-time channels, a paradigm for real-time communication in packet-switched networks [12], similar to other proposals for guaranteed-QoS connections <ref> [2] </ref>. <p> The QoS on a real-time channel is specified as the desired deterministic, worst-case bound on the end-to-end delay experienced by a message. See [12] for more details. 2.2. Resource Management As with other proposals for guaranteed-QoS communication <ref> [2] </ref>, there are two related aspects to resource management for real-time channels: admission control and (run-time) scheduling. Admission control for real-time channels is provided by Algorithm D order [12], which uses fixed-priority scheduling for computing the worst-case delay experienced by a channel at a link. <p> We have implemented a QoS-sensitive architecture [16] that provides admission control and run-time support for real-time channels using the proposed extensions. Our implementation methodology and analysis is applicable to other proposals for guaranteed real-time communication in packet-switched networks, a survey of which can be found in <ref> [2] </ref>. Similar issues are being explored for provision of integrated services on the Internet [6, 4, 8]. The Tenet protocol suite [3] is an advanced implementation of real-time communication on wide-area networks; however, they have not considered incorporation of protocol processing overheads into network-level resource management policies. <p> The issues of simultaneous management of CPU and link bandwidth for real-time communication are of wide-ranging interest. Our present work is applicable to other proposals for real-time communication and QoS guarantees <ref> [2] </ref>. The proposed extensions are general and applicable to other host and network architectures. While we only considered management of communication resources, the present work can be extended to incorporate application scheduling as well.
Reference: [3] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. C. Verma, and H. Zhang. </author> <title> The Tenet real-time protocol suite: Design, implementation, and experiences. </title> <type> Technical Report TR-94-059, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Our implementation methodology and analysis is applicable to other proposals for guaranteed real-time communication in packet-switched networks, a survey of which can be found in [2]. Similar issues are being explored for provision of integrated services on the Internet [6, 4, 8]. The Tenet protocol suite <ref> [3] </ref> is an advanced implementation of real-time communication on wide-area networks; however, they have not considered incorporation of protocol processing overheads into network-level resource management policies. In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive.
Reference: [4] <author> R. Braden, D. Clark, and S. Shenker. </author> <title> Integrated services in the Internet architecture: An overview. Request for Comments RFC 1633, </title> <month> July </month> <year> 1994. </year> <note> Xerox PARC. </note>
Reference-contexts: Our implementation methodology and analysis is applicable to other proposals for guaranteed real-time communication in packet-switched networks, a survey of which can be found in [2]. Similar issues are being explored for provision of integrated services on the Internet <ref> [6, 4, 8] </ref>. The Tenet protocol suite [3] is an advanced implementation of real-time communication on wide-area networks; however, they have not considered incorporation of protocol processing overheads into network-level resource management policies. In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive.
Reference: [5] <author> A. Burns, K. Tindell, and A. Wellings. </author> <title> Effectice analysis for engineering real-time fixed priority schedulers. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 21(5) </volume> <pages> 475-480, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive. The gap between theory and practice for real-time systems has received significant attention in recent years <ref> [13, 5, 14] </ref>. Our work is complimentary to these efforts in that we focus on communication needs of distributed real-time systems. Scheduling of protocol processing at priority lev-els consistent with those of the communicating application was considered in [9].
Reference: [6] <author> D. D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting real-time applications in an integrated services packet network: Architecture and mechanism. </title> <booktitle> In Proc. of ACM SIGCOMM, </booktitle> <pages> pages 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Our implementation methodology and analysis is applicable to other proposals for guaranteed real-time communication in packet-switched networks, a survey of which can be found in [2]. Similar issues are being explored for provision of integrated services on the Internet <ref> [6, 4, 8] </ref>. The Tenet protocol suite [3] is an advanced implementation of real-time communication on wide-area networks; however, they have not considered incorporation of protocol processing overheads into network-level resource management policies. In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive.
Reference: [7] <author> R. L. Cruz. </author> <title> A Calculus for Network Delay and a Note on Topologies of Interconnection Networks. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1987. </year> <note> available as technical report UILU-ENG-87-2246. </note>
Reference-contexts: Data transfer on real-time channels has unreliable-datagram semantics, i.e., occurs without acknowledgements and retransmissions. 2.1. Traffic Generation and QoS Traffic generation on real-time channels is based on a linear bounded arrival process <ref> [7, 1] </ref> characterized by three parameters: maximum message size (S max bytes), maximum message rate (R max messages/second), and maximum burst size (B max messages). The notion of logical arrival time is used to enforce a minimum separation I min between messages on the same real-time channel.
Reference: [8] <author> S. Floyd and V. Jacobson. </author> <title> Link-sharing and resource management models for packet networks. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 3(4), </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: Our implementation methodology and analysis is applicable to other proposals for guaranteed real-time communication in packet-switched networks, a survey of which can be found in [2]. Similar issues are being explored for provision of integrated services on the Internet <ref> [6, 4, 8] </ref>. The Tenet protocol suite [3] is an advanced implementation of real-time communication on wide-area networks; however, they have not considered incorporation of protocol processing overheads into network-level resource management policies. In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive.
Reference: [9] <author> R. Govindan and D. P. Anderson. </author> <title> Scheduling and IPC mechanisms for continuous media. </title> <booktitle> In Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 68-80, </pages> <year> 1991. </year>
Reference-contexts: Our work is complimentary to these efforts in that we focus on communication needs of distributed real-time systems. Scheduling of protocol processing at priority lev-els consistent with those of the communicating application was considered in <ref> [9] </ref>. More recently, processor capacity reserves in RT-Mach [18] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [19]. Operating system support for multimedia communication is explored in [10] and [20].
Reference: [10] <author> O. Hagsand and P. Sjodin. </author> <title> Workstation support for real-time multimedia communication. </title> <booktitle> In Winter USENIX Conference, </booktitle> <pages> pages 133-142, </pages> <month> January </month> <year> 1994. </year> <note> Second Edition. </note>
Reference-contexts: More recently, processor capacity reserves in RT-Mach [18] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [19]. Operating system support for multimedia communication is explored in <ref> [10] </ref> and [20]. In [10] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [20] is on the scheduling architecture. 7. Conclusion and Future Work In this paper, we focused on management of host communication resources for real-time communication. <p> More recently, processor capacity reserves in RT-Mach [18] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [19]. Operating system support for multimedia communication is explored in <ref> [10] </ref> and [20]. In [10] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [20] is on the scheduling architecture. 7. Conclusion and Future Work In this paper, we focused on management of host communication resources for real-time communication.
Reference: [11] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 17(1) </volume> <pages> 1-13, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: As discussed in Section 3, it cannot be applied directly to CPU bandwidth management. 2.3. Implementation We have implemented a QoS-sensitive communication subsystem architecture featuring real-time channels [16]. Our implementation employs a communication executive derived from x-kernel 3.1 <ref> [11] </ref> exercising complete control over a Motorola 68040 CPU. QoS-Sensitive CPU and Link Scheduling: The implementation provides a process-per-channel model of protocol processing adapted from the process-per-message model provided by x-kernel.
Reference: [12] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari. </author> <title> Real-time communication in multi-hop networks. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 5(10) </volume> <pages> 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: In this paper, we focus on bridging the gap between theory and practice in the management of host CPU and link resources for real-time communication. For this purpose we utilize real-time channels, a paradigm for real-time communication in packet-switched networks <ref> [12] </ref>, similar to other proposals for guaranteed-QoS connections [2]. <p> This ensures that a channel does not use more resources than it reserved at the expense of other channels' QoS guarantees. The QoS on a real-time channel is specified as the desired deterministic, worst-case bound on the end-to-end delay experienced by a message. See <ref> [12] </ref> for more details. 2.2. Resource Management As with other proposals for guaranteed-QoS communication [2], there are two related aspects to resource management for real-time channels: admission control and (run-time) scheduling. Admission control for real-time channels is provided by Algorithm D order [12], which uses fixed-priority scheduling for computing the worst-case <p> See <ref> [12] </ref> for more details. 2.2. Resource Management As with other proposals for guaranteed-QoS communication [2], there are two related aspects to resource management for real-time channels: admission control and (run-time) scheduling. Admission control for real-time channels is provided by Algorithm D order [12], which uses fixed-priority scheduling for computing the worst-case delay experienced by a channel at a link. <p> Contrary to the approach for admission control, run-time link scheduling is governed by a variation of the multi-class earliest-deadline-first policy <ref> [12] </ref>. The overheads and effectiveness of link scheduling in our implementation are discussed in [16]. The above approach only accounts for management of link bandwidth at the host. As discussed in Section 3, it cannot be applied directly to CPU bandwidth management. 2.3. <p> However, this does not invalidate the trends observed and performance comparisons reported here. 3. Managing CPU and Link Bandwidth As mentioned earlier, Algorithm D order <ref> [12] </ref> computes the worst-case response time for a message. This response time has two components: the time spent waiting for resources and the time spent consuming resources. <p> To calculate the time spent waiting for resources, one must consider the preemption model used for resource access. The real-time channel model presented in <ref> [12] </ref> accounts for non-preemptive packet transmissions, but assumes an ideal preemption model for CPU access, i.e., the CPU can be allocated to a waiting higher-priority handler immediately at no extra cost. <p> Subsequently, throughput climbs because link utilization improves and CPU requirements continue to decrease. This effect is analyzed in Section 4. 4. Worst-Case Service and Wait Times For a channel requesting admission, D order can compute the worst-case message response time (the system time requirement in <ref> [12] </ref>) by accounting for three components: * worst-case waiting time (T w ) due to lower-priority han dlers or packets, * worst-case service time for the message (T s ), * worst-case waiting time due to message arrivals on all existing higher-priority channels (T hp We show below how T w <p> Thus, it is necessary to account for non-ideal characteristics (context switch overhead, cache miss penalty) of real systems. 6. Related Work This paper extends the policies proposed in <ref> [12] </ref>, focusing on CPU and link bandwidth management for admission control. We have implemented a QoS-sensitive architecture [16] that provides admission control and run-time support for real-time channels using the proposed extensions.
Reference: [13] <author> D. Katcher, H. Arakawa, and J. K. Strosnider. </author> <title> Engineering and analysis of fixed priority schedulers. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 19(9) </volume> <pages> 920-934, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive. The gap between theory and practice for real-time systems has received significant attention in recent years <ref> [13, 5, 14] </ref>. Our work is complimentary to these efforts in that we focus on communication needs of distributed real-time systems. Scheduling of protocol processing at priority lev-els consistent with those of the communicating application was considered in [9].
Reference: [14] <author> K. A. Kettler, D. I. Katcher, and J. K. Strosnider. </author> <title> A modeling methodology for real-time/multimedia operating systems. </title> <booktitle> In Proc. of the Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 15-26, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive. The gap between theory and practice for real-time systems has received significant attention in recent years <ref> [13, 5, 14] </ref>. Our work is complimentary to these efforts in that we focus on communication needs of distributed real-time systems. Scheduling of protocol processing at priority lev-els consistent with those of the communicating application was considered in [9].
Reference: [15] <author> C. Maeda and B. N. Bershad. </author> <title> Protocol service decomposition for high-performance networking. </title> <booktitle> In Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 244-255, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Scheduling of protocol processing at priority lev-els consistent with those of the communicating application was considered in [9]. More recently, processor capacity reserves in RT-Mach [18] have been combined with user-level protocol processing <ref> [15] </ref> to make protocol processing inside hosts predictable [19]. Operating system support for multimedia communication is explored in [10] and [20]. In [10] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [20] is on the scheduling architecture. 7.
Reference: [16] <author> A. Mehra, A. Indiresan, and K. Shin. </author> <title> Design and evaluation of a QoS-sensitive communication subsystem architecture. </title> <type> Technical Report CSE-TR-280-96, </type> <institution> University of Michigan, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: For this purpose we utilize real-time channels, a paradigm for real-time communication in packet-switched networks [12], similar to other proposals for guaranteed-QoS connections [2]. Using our implementation of real-time channels <ref> [16] </ref>, we illustrate the tradeoff between useful resource capacity, which is the pro 1 The issues involved in resource management at the receiving host are similar, but beyond the scope of this paper. portion of the raw resource capacity that can be utilized ef-fectively, and channel admissibility. <p> Contrary to the approach for admission control, run-time link scheduling is governed by a variation of the multi-class earliest-deadline-first policy [12]. The overheads and effectiveness of link scheduling in our implementation are discussed in <ref> [16] </ref>. The above approach only accounts for management of link bandwidth at the host. As discussed in Section 3, it cannot be applied directly to CPU bandwidth management. 2.3. Implementation We have implemented a QoS-sensitive communication subsystem architecture featuring real-time channels [16]. <p> of link scheduling in our implementation are discussed in <ref> [16] </ref>. The above approach only accounts for management of link bandwidth at the host. As discussed in Section 3, it cannot be applied directly to CPU bandwidth management. 2.3. Implementation We have implemented a QoS-sensitive communication subsystem architecture featuring real-time channels [16]. Our implementation employs a communication executive derived from x-kernel 3.1 [11] exercising complete control over a Motorola 68040 CPU. QoS-Sensitive CPU and Link Scheduling: The implementation provides a process-per-channel model of protocol processing adapted from the process-per-message model provided by x-kernel. <p> To support real-time communication on these adapters, link scheduling must be provided in software on the host processor. In our implementation, packets created by channel handlers are scheduled for transmission by a non-preemptive multi-class EDF link scheduler. See <ref> [16] </ref> for more details of the protocol stack and the real-time channel implementation. <p> Selecting a packet for transmission incurs some overhead in addition to that of initiating transmission on the link. Additional overhead may be involved if the link scheduler must transfer packets between link packet queues <ref> [16] </ref>. In O1, the scheduler is frequently invoked from the interrupt service routine (ISR) announcing completion of packet transmission. <p> Thus, it is necessary to account for non-ideal characteristics (context switch overhead, cache miss penalty) of real systems. 6. Related Work This paper extends the policies proposed in [12], focusing on CPU and link bandwidth management for admission control. We have implemented a QoS-sensitive architecture <ref> [16] </ref> that provides admission control and run-time support for real-time channels using the proposed extensions. Our implementation methodology and analysis is applicable to other proposals for guaranteed real-time communication in packet-switched networks, a survey of which can be found in [2].
Reference: [17] <author> A. Mehra, A. Indiresan, and K. Shin. </author> <title> Resource management for real-time communication: Making theory meet practice. </title> <type> Technical Report CSE-TR-281-96, </type> <institution> University of Michigan, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: We estimate T s for O1 and O2 separately. The reader is re ferred to <ref> [17] </ref> for explanations (omitted here due to space constraints) of the following derivations. <p> For this purpose, we parameterized the communication subsystem, including the protocol stack, extensively to determine the system parameter values listed in Table 1. We validated the implementation as a function of packet size, for different values of link speed; the main results are summarized below. See <ref> [17] </ref> for more details. Predicted throughput tracks measured throughput well for both O1 and O2. However, for O1 with medium link speeds, the predicted and measured throughputs diverge significantly; we attribute this to overly conservative estimates of C sw and C cm .
Reference: [18] <author> C. W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor capacity reserves for multimedia operating systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Our work is complimentary to these efforts in that we focus on communication needs of distributed real-time systems. Scheduling of protocol processing at priority lev-els consistent with those of the communicating application was considered in [9]. More recently, processor capacity reserves in RT-Mach <ref> [18] </ref> have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [19]. Operating system support for multimedia communication is explored in [10] and [20]. In [10] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. <p> While we only considered management of communication resources, the present work can be extended to incorporate application scheduling as well. Our analysis is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [18, 19] </ref>. As part of future work, we plan to conduct more extensive validation of the proposed extensions. This would involve relaxing some of the fairly-conservative assumptions about worst-case scenarios without compromising real-time guarantees. Lastly, we plan to extend the null device into a more sophisticated network device emulator.
Reference: [19] <author> C. W. Mercer, J. Zelenka, and R. Rajkumar. </author> <title> On predictable operating system protocol processing. </title> <type> Technical Report CMU-CS-94-165, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Scheduling of protocol processing at priority lev-els consistent with those of the communicating application was considered in [9]. More recently, processor capacity reserves in RT-Mach [18] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable <ref> [19] </ref>. Operating system support for multimedia communication is explored in [10] and [20]. In [10] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [20] is on the scheduling architecture. 7. <p> While we only considered management of communication resources, the present work can be extended to incorporate application scheduling as well. Our analysis is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [18, 19] </ref>. As part of future work, we plan to conduct more extensive validation of the proposed extensions. This would involve relaxing some of the fairly-conservative assumptions about worst-case scenarios without compromising real-time guarantees. Lastly, we plan to extend the null device into a more sophisticated network device emulator.
Reference: [20] <author> C. Vogt, R. G. Herrtwich, and R. Nagarajan. HeiRAT: </author> <title> The Heidelberg resource administration technique design philosophy and goals. </title> <institution> Research Report 43.9213, IBM European Networking Center, </institution> <address> Heidelberg, Germany, </address> <year> 1992. </year>
Reference-contexts: More recently, processor capacity reserves in RT-Mach [18] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [19]. Operating system support for multimedia communication is explored in [10] and <ref> [20] </ref>. In [10] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [20] is on the scheduling architecture. 7. Conclusion and Future Work In this paper, we focused on management of host communication resources for real-time communication. <p> Operating system support for multimedia communication is explored in [10] and <ref> [20] </ref>. In [10] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [20] is on the scheduling architecture. 7. Conclusion and Future Work In this paper, we focused on management of host communication resources for real-time communication. In particular, we identified the issues involved in extending and implementing resource management policies originally formulated using idealized resource models.
References-found: 20

