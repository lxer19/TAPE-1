URL: http://www.cs.umd.edu/users/urhan/cbscramb-camera.ps
Refering-URL: http://www.cs.umd.edu/users/urhan/papers.html
Root-URL: 
Email: urhan@cs.umd.edu  franklin@cs.umd.edu  Laurent.Amsaleg@irisa.fr  
Title: Cost-based Query Scrambling for Initial Delays  
Author: Tolga Urhan Michael J. Franklin Laurent Amsaleg 
Affiliation: University of Maryland  University of Maryland  IRISA  
Abstract: Remote data access from disparate sources across a wide-area network such as the Internet is problematic due to the unpredictable nature of the communications medium and the lack of knowledge about the load and potential delays at remote sites. Traditional, static, query processing approaches break down in this environment because they are unable to adapt in response to unexpected delays. Query scrambling has been proposed to address this problem. Scrambling modifies query execution plans on-the-fly when delays are encountered during runtime. In its original formulation, scrambling was based on simple heuristics, which although providing good performance in many cases, were also shown to be susceptible to problems resulting from bad scrambling decisions. In this paper we address these shortcomings by investigating ways to exploit query optimization technology to aid in making intelligent scrambling choices. We propose three different approaches to using query optimization for scrambling. These approaches vary, for example, in whether they optimize for total work or response-time, and whether they construct partial or complete alternative plans. Using a two-phase randomized query optimizer, a distributed query processing simulator, and a workload derived from queries of the TPC-D benchmark, we evaluate these different approaches and compare their ability to cope with initial delays in accessing remote sources. The results show that cost-based scrambling can effectively hide initial delays, but that in the absence of good predictions of expected delay durations, there are fundamental tradeoffs between risk aversion and effectiveness. 
Abstract-found: 1
Intro-found: 1
Reference: [ABF + 97] <author> L. Amsaleg, P. Bonnet, M. Franklin, A. Tomasic, and T. </author> <title> Urhan Improving Responsivenessfor Wide-Area Data Access. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> Vol. 20, No. </volume> <pages> 3. </pages>
Reference-contexts: As described in [AFT98] such delays introduce a number of scheduling and memory management issues that must be addressed by scrambling. In addition, we would like to investigate the use of delay prediction techniques in the scrambling approaches. Finally, as described in <ref> [ABF + 97] </ref>, additional techniques are required for dealing with very long periods of outage. Unlike scrambling, these techniques necessarily change the answer that is returned to the user, and thus, raise a number of interesting semantic questions in addition to the performance-oriented questions that we have addressed here.
Reference: [AFT98] <author> L. Amsaleg, M. J. .Franklin, and A. Tomasic. </author> <title> Dy namic Query Operator Scheduling for Wide-Area Remote Access. </title> <journal> Journal of Distributed and Parallel Databases, </journal> <volume> Vol. 6, No. 3, </volume> <month> July </month> <year> 1998. </year>
Reference-contexts: In general, the amount of delay that can be hidden by scrambling (in the absence of creating additional parallelism, as is discussed in <ref> [AFT98] </ref>) is limited by the normal response time of the query. This is because scrambling hides delays by performing other useful work, so its ability to hide delay is limited by the amount of useful work that can be done. <p> First, although not discussed in this paper, the scrambling techniques we have described here can be adapted for use with other types of delay, such as bursty arrival, in which sites repeatedly stall and recover. As described in <ref> [AFT98] </ref> such delays introduce a number of scheduling and memory management issues that must be addressed by scrambling. In addition, we would like to investigate the use of delay prediction techniques in the scrambling approaches.
Reference: [AFTU96] <author> L. Amsaleg, M. J. .Franklin, A. Tomasic, and T. Urhan. </author> <title> Scrambling Query Plans to Cope With Unexpected Delays. </title> <booktitle> PDIS Conf., </booktitle> <address> Miami, USA, </address> <year> 1996. </year>
Reference-contexts: statically optimized query plan is likely to be sub-optimal in the presence of the response time problems that will inevitably arise during the query run-time. 1.1 Query Scrambling To address the issue of unpredictable delays in the wide-area environment, we proposed a dynamic approach to query execution called query scrambling <ref> [AFTU96] </ref>. Query scrambling reacts to unexpected delays by rescheduling, on-the-fly, the operations of a query during its execution. <p> Query scrambling as defined in <ref> [AFTU96] </ref> consists of two different phases: a rescheduling phase, in which the scheduling of the operators of an active query plan is changed when a delay is detected, and an operator synthesis phase in which the query plan is restructured, typically by creating new operators that are not in the current <p> Likewise, if during scrambling, a delay arises when accessing a remote source, the current scrambling step is abandoned, and a new one is started. As discussed in Section 1.1, the original formulation of scrambling was heuristic-based <ref> [AFTU96] </ref>. In this paper, we address the shortcomings of that earlier approach by incorporating query optimization into the scrambling process. The focus of the paper is on Phase 2 of scrambling, but we also apply cost-based decision making in Phase 1. <p> This traversal picks up the other reducers in the query (the result computed in the first phase which contains the reducers REGION, and ORDER) before accessing the large LINEITEM relation. In contrast to the cost-based approaches, the original heuristic-based scrambling algorithm <ref> [AFTU96] </ref> follows the policy of executing the left-most runnable sub-tree of the query plan, which in this case, results in joining LINEITEM and ORDER in the absence of the other reducer, REGION (the heuristic-based algorithm is not shown in the figure).
Reference: [Ant93] <author> G. Antoshenkov. </author> <title> Dynamic Query Optimization in Rdb/VMS. </title> <booktitle> ICDE Conf., </booktitle> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: Neither of these approaches, however, can adapt to changes in the system parameters that occur during the query execution. Rdb/VMS uses a different approach as described in <ref> [Ant93] </ref>. In this approach, multiple different executions of the same logical operator are started at the same time. When one execution of an operator is determined to be better, the other execution is terminated, and the winner is executed to completion.
Reference: [Bro92] <author> K. Brown. Prpl: </author> <title> A database workload specification lan guage. </title> <type> Master's thesis, </type> <institution> University of Winsconsin, Madison, Winsconsin, </institution> <year> 1992. </year>
Reference-contexts: Disks are modeled using a detailed characterization and settings adapted from the ZetaSim model <ref> [Bro92] </ref>.
Reference: [CBTY89] <author> A. Chen, D. Brill, M. Templeton, and C. Yu. </author> <title> Dis tributed Query Processing in a Multiple Database System. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 7(3), </volume> <year> 1989. </year>
Reference-contexts: Bushy plans are generally less vulnerable to delays since different branches of tree can be found that are not directly affected by the delayed relations; such subtrees can be executed independently. The research prototype Mermaid <ref> [CBTY89] </ref> and its commercial successor InterViso [THMB95] are heterogeneous distributed databases that perform dynamic query optimization. Mermaid constructs its query plan entirely at run-time, thus each step in query optimization is based on dynamic information such as the intermediate relation cardinalities and system performance.
Reference: [CD96] <author> M. J. Carey, D. J. DeWitt. </author> <title> Of Objects and Databases: A Decade of Turmoil. </title> <booktitle> 22nd VLDB Conf., </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: The severity of such a limitation has been demonstrated before, most recently in the battle between object-oriented database (OODB) and object-relational database (ORDB) systems. To date, navigation-oriented OODB approaches have remained largely niche solutions, while the query-oriented ORDB approach has been embraced by most of the major database vendors <ref> [CD96] </ref>. Given the importance of declarative query processing for many applications, it is natural to investigate ways to provide such functionality over the wealth of data that is available across current wide-area networks. Query processing in wide-area distributed environments poses a number of difficult technical challenges.
Reference: [CG94] <author> R. Cole and G. Graefe. </author> <title> Optimization of Dynamic Query Execution Plans. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <year> 1994. </year>
Reference-contexts: We have also conducted experiments using more than one delayed relation on synthetically generated queries. We have found that when more relations are delayed, the risk associated with each scrambling decision is increased, favoring more conservative algorithms. 5 Related Work We now briefly discuss related work. The Volcano optimizer <ref> [CG94, Gra93] </ref> provides dynamic query scheduling by introducing choose-plan operators into a query plan above a set of alternative subplans in order to compensate for the lack of information about system parameters at compile time.
Reference: [DSD95] <author> W. Du, M. Shan, and U. Dayal. </author> <title> Reducing Multidatabase Query Response Time by Tree Balancing. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <year> 1995. </year>
Reference-contexts: The results are then composed incrementally by dynamically introducing operators that process them as the results arrive. As such, their algorithm resembles our Pair algorithm with a different set of heuristics that rely on statistical techniques in order to avoid bad decisions. In <ref> [DSD95] </ref> the response time of queries is improved by reordering left-deep join trees into bushy join trees and creating subtrees without increasing the cost. Several reordering algorithms are presented.
Reference: [GHK92] <author> S. Ganguly, W. Hasan, R. Krishnamurthy. </author> <title> Query Op timization for Parallel Execution. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> San Diego, CA, </address> <year> 1992. </year>
Reference-contexts: Likewise, the distributed extensions to this optimizer for the R* system added additional terms for message costs, but also did not model the overlap of such costs [ML86]. In contrast, a response time-based optimizer predicts the overlap of work in addition to the total amount of work <ref> [GHK92] </ref>. Thus, a response time optimizer might choose a plan with higher total work but more parallelism over a plan with less work but higher sequentiality. The notion of delay, as arises in wide-area remote access is inherently a response time issue. <p> We use two such functions in this study: one based on total work, and one based on response time. Our response time model is derived from the one defined in <ref> [GHK92] </ref>. It calculates expected response times by considering potential parallelism in addition to the work done by query operators.
Reference: [Gra93] <author> G. Graefe. </author> <title> Query Evaluation Techniques for Large Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2), </volume> <year> 1993. </year>
Reference-contexts: Using a static scheduling policy, a remote access query plan such as this is susceptible to delays that arise when accessing the remotely-stored data. For example, using an iterator approach <ref> [Gra93] </ref>, the first data access would be to request a tuple of Relation A (from site 2). If there is a delay in accessing that site then the scan of A, and hence the entire query execution, is blocked until the site recovers. <p> We have also conducted experiments using more than one delayed relation on synthetically generated queries. We have found that when more relations are delayed, the risk associated with each scrambling decision is increased, favoring more conservative algorithms. 5 Related Work We now briefly discuss related work. The Volcano optimizer <ref> [CG94, Gra93] </ref> provides dynamic query scheduling by introducing choose-plan operators into a query plan above a set of alternative subplans in order to compensate for the lack of information about system parameters at compile time.
Reference: [IK90] <author> Y. E. Ioannidis, and Y. Kang. </author> <title> Randomized algorithms for optimizing large join queries. </title> <booktitle> ACM SIGCOM Conf., </booktitle> <address> Atlantic City, NJ, </address> <year> 1990. </year>
Reference-contexts: Such delays could also be modeled by suspending processing at the source. Since we use point-to-point connections between the sources and the query site, these two methods are equivalent. 3.2 The Query Optimizer In the study, we use a two-phase randomized optimizer similar to the one described in <ref> [IK90, IW87] </ref>. The optimizer first runs Iterative Improvement (II) algorithm for some time, followed by Simulated Annealing (SA).
Reference: [INSS92] <author> Y. E. Ioannidis, R. T. Ng, K. Shim, and T. K. Sellis. </author> <title> Para metric Query Optimization. </title> <booktitle> 18th VLDB Conf., </booktitle> <address> Vancouver, BC, Canada, </address> <year> 1992. </year>
Reference-contexts: At query startup time the appropriate subplan is chosen depending on the current value of the parameters. <ref> [INSS92] </ref> proposes a related approach that generates multiple alternative plans, and chooses among them when the query is initialized. Neither of these approaches, however, can adapt to changes in the system parameters that occur during the query execution. Rdb/VMS uses a different approach as described in [Ant93].
Reference: [IW87] <author> Y. E. Wong, and E. Wong. </author> <title> Query optimization by simulated annealing. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> San Fransisco, CA, </address> <year> 1987. </year>
Reference-contexts: Such delays could also be modeled by suspending processing at the source. Since we use point-to-point connections between the sources and the query site, these two methods are equivalent. 3.2 The Query Optimizer In the study, we use a two-phase randomized optimizer similar to the one described in <ref> [IK90, IW87] </ref>. The optimizer first runs Iterative Improvement (II) algorithm for some time, followed by Simulated Annealing (SA).
Reference: [Kim95] <author> M. Kim. </author> <title> Modern Database Systems: the Object Model, Interoperability, and beyond. </title> <publisher> ACM Press, </publisher> <address> New York, NY, </address> <year> 1995. </year>
Reference-contexts: Query processing in wide-area distributed environments poses a number of difficult technical challenges. Issues such as semantic heterogeneity, manipulation of semi-structured data, and resource discovery (i.e., locating relevant sources) have been the subject of much research in recent years <ref> [Kim95, SAD + 95, TRV96] </ref>. While these problems are daunting in their most general forms, pragmatic approaches that provide useful functionality for many typical situations are starting to appear.
Reference: [MMM97] <author> A. O. Mendelzon, G. A. Mihaila, T. Milo. </author> <title> Querying the World Wide Web. </title> <booktitle> PDIS Conf., </booktitle> <address> Miami, USA, </address> <year> 1996. </year>
Reference-contexts: While these problems are daunting in their most general forms, pragmatic approaches that provide useful functionality for many typical situations are starting to appear. In particular, solutions based on the wrapper-mediator model and other non-traditional techniques (eg. <ref> [MMM97] </ref>), provide the abstractions necessary to implement applications that utilize multiple sources on the Internet. While significant effort has been placed on addressing the semantic issues of wide-area data access, relatively little effort has been put into solving the performance problems that are inherent in such access.
Reference: [ML86] <author> L. F. Mackert, G. M. </author> <title> Lohman R* Optimizer validation and Performance Evaluation for Distributed Queries 12th VLDB Conf., </title> <address> Kyoto, Japan, </address> <year> 1986. </year>
Reference-contexts: Likewise, the distributed extensions to this optimizer for the R* system added additional terms for message costs, but also did not model the overlap of such costs <ref> [ML86] </ref>. In contrast, a response time-based optimizer predicts the overlap of work in addition to the total amount of work [GHK92]. Thus, a response time optimizer might choose a plan with higher total work but more parallelism over a plan with less work but higher sequentiality.
Reference: [ONK + 97] <author> F. Ozcan, S. Nural, P. Koksal, C. Evrendilek, A. Dogac. </author> <title> Dynamic Query optimization in Multidatabases. </title> <journal> Data Engineering Bulletin, </journal> <volume> Vol. 20, No. 3, </volume> <month> September, </month> <year> 1997. </year>
Reference-contexts: When one execution of an operator is determined to be better, the other execution is terminated, and the winner is executed to completion. The work most closely related to ours is the MIND heterogeneous database project <ref> [ONK + 97] </ref>, which performs optimization during the query execution. A query is divided into subqueries and each subquery is sent to a participating site for execution. The results are then composed incrementally by dynamically introducing operators that process them as the results arrive.
Reference: [RAH + 96] <author> M. T. Roth, M. Arya, L. M. Haas, M. J. Carey, W. F. Cody, R. Fagin, P. M. Schwarz, J. Thomas, E. L. Wimmers. </author> <title> The Garlic Project. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: Initial delays typically arise when there is difficulty in establishing a connection to a remote source or the source is heavily loaded. Also, in the absence of global query optimization (i.e., optimization that considers costs at both the query site and the remote sources such as <ref> [RAH + 96, TRV96] </ref>), initial delays can arise if a remote source must perform a significant amount of work before it can return the first tuple. 1.2 Making Cost-based Decisions There are a number of fundamental issues that arise when trying to exploit database query optimization technology for scrambling.
Reference: [SAC + 79] <author> P. G. Selinger, M. M. Astrahan, D. D. Chamberlin, R. A. Lorie, and T. G. Price. </author> <title> Access Path Selection in a Relational Database Management System. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Boston, USA, </address> <year> 1979. </year>
Reference-contexts: Relational optimizers traditionally aim to reduce total work (or cost). For example, the cost model of the classic System R-type optimizer includes terms for cpu and disk usage, but does not model the possible overlap of cpu and disk processing <ref> [SAC + 79] </ref>. Likewise, the distributed extensions to this optimizer for the R* system added additional terms for message costs, but also did not model the overlap of such costs [ML86].
Reference: [SAD + 95] <author> M. Shan, R. Ahmen, J. Davis, W. Du, and W. Kent. </author> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, chapter Pegasus: A Heterogeneous Information Management System. </title> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: Query processing in wide-area distributed environments poses a number of difficult technical challenges. Issues such as semantic heterogeneity, manipulation of semi-structured data, and resource discovery (i.e., locating relevant sources) have been the subject of much research in recent years <ref> [Kim95, SAD + 95, TRV96] </ref>. While these problems are daunting in their most general forms, pragmatic approaches that provide useful functionality for many typical situations are starting to appear.
Reference: [Sha86] <author> L. D. Shapiro. </author> <title> Join Processing in Database Systems with Large Main Memories. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> Vol. 11, No. 3, </volume> <year> 1986. </year>
Reference-contexts: In this study, we used only a single join method, namely, hybrid hash <ref> [Sha86] </ref>. Table 1 shows the main parameters for configuring the simulator and the main settings used for this study. There are two types of sites. Data sources, which store base data that will be used in queries, and Query sites, which execute queries.
Reference: [SLR97] <author> P. Seshadri, M. Livny, R. Ramakrishnan. </author> <title> The Case for En hanced Abstract Data Types. </title> <booktitle> 23rd VLDB Conf., </booktitle> <address> Athens, Greece, </address> <year> 1997. </year>
Reference-contexts: Our current focus is on incorporating the cost based query scrambling into the query engine of PREDATOR <ref> [SLR97] </ref> and extending it by adding remote access capability. We plan to use this system as a test bed for query scrambling over the Internet.
Reference: [THMB95] <editor> M. Templeton, H. Henley, E. Maros, and D. Van Buer. InterViso: </editor> <title> Dealing with the Complexity of Federated Database Access. </title> <journal> VLDB Journal, </journal> <volume> 4(2), </volume> <year> 1995. </year>
Reference-contexts: Bushy plans are generally less vulnerable to delays since different branches of tree can be found that are not directly affected by the delayed relations; such subtrees can be executed independently. The research prototype Mermaid [CBTY89] and its commercial successor InterViso <ref> [THMB95] </ref> are heterogeneous distributed databases that perform dynamic query optimization. Mermaid constructs its query plan entirely at run-time, thus each step in query optimization is based on dynamic information such as the intermediate relation cardinalities and system performance.
Reference: [Tra97] <author> Transaction Processing Council. </author> <title> TPC Benchmark D Stan dard Specification, </title> <journal> Rev. 1.2.3. </journal>
Reference: [TRV96] <author> A. Tomasic, L. Raschid, and P. Valduriez. </author> <title> Scaling Het erogeneous Databases and the Design of DISCO. </title> <booktitle> ICDCS Conf., </booktitle> <address> Hong Kong, </address> <year> 1996. </year>
Reference-contexts: Query processing in wide-area distributed environments poses a number of difficult technical challenges. Issues such as semantic heterogeneity, manipulation of semi-structured data, and resource discovery (i.e., locating relevant sources) have been the subject of much research in recent years <ref> [Kim95, SAD + 95, TRV96] </ref>. While these problems are daunting in their most general forms, pragmatic approaches that provide useful functionality for many typical situations are starting to appear. <p> Initial delays typically arise when there is difficulty in establishing a connection to a remote source or the source is heavily loaded. Also, in the absence of global query optimization (i.e., optimization that considers costs at both the query site and the remote sources such as <ref> [RAH + 96, TRV96] </ref>), initial delays can arise if a remote source must perform a significant amount of work before it can return the first tuple. 1.2 Making Cost-based Decisions There are a number of fundamental issues that arise when trying to exploit database query optimization technology for scrambling.
References-found: 26

