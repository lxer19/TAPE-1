URL: http://www.cs.toronto.edu/~mes/papers/kr98correct.ps
Refering-URL: http://www.cs.toronto.edu/~mes/papers/printed.html
Root-URL: 
Email: degiacomo@dis.uniroma1.it  reiter@cs.toronto.edu  mes@cs.toronto.edu  
Title: Execution Monitoring of High-Level Robot Programs.  
Author: Giuseppe De Giacomo Ray Reiter Mikhail Soutchanski 
Address: Roma, I-00198, Italy  Toronto, M5S 3G4, Canada  Toronto, M5S 3G4, Canada  
Affiliation: Dip. di Informatica e Sistemistica Universita di Roma "La Sapienza"  Dept. of Computer Science University of Toronto  Dept. of Computer Science University of Toronto  
Abstract: We provide a situation calculus-based account of such on-line program executions, with monitoring. This account relies on a specification for a single-step interpreter for the logic programming language Golog . The theory is supported by an implementation that is illustrated by a standard blocks world in which a robot is executing a Golog program to build a suitable tower. The monitor makes use of a simple kind of planner for recovering from malicious exogenous actions performed by another agent. After performing the sequence of actions generated by the recovery procedure, the robot eliminates the discrepancy and resumes executing its tower-building program. We also indicate how, within the formalism, one can formulate various correctness prop erties for monitored systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Ambrose-Ingerson and S. Steel. </author> <title> Integrating planning, execution and monitoring. </title> <booktitle> In AAAI-88, p. </booktitle> <pages> 735-740. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1988. </year>
Reference-contexts: Moreover, because this framework is entirely within the situation calculus, such correctness proofs can be constructed totally within a classical logic. 7 Discussion There are several systems designed to interleave monitoring with plan execution: PLANEX [7], IPEM <ref> [1] </ref>, ROGUE [13], SPEEDY [3]. We differ from these and similar proposals, first by the formal neatness of our approach, secondly by the fact that ours is a story for monitoring arbitrary programs, not simply straight line or partially ordered plans.
Reference: [2] <author> C. Baral, T. and Son. </author> <title> Relating theories of actions and reactive control. In Robots, Softbots, Im-mobots: Theories of Action, Planning and Control, </title> <booktitle> working notes of the workshop held on July 27, 1997 in conjunction with the AAAI-97, </booktitle> <address> Providence, Rhode Island. </address>
Reference-contexts: The emphasis is on reactive programs, but their proposal does provide for replanning during execution. Several authors rely on formal theories of actions for the purposes of characterizing appropriate notions of action failures <ref> [2, 24] </ref>, but they do not consider execution monitoring per se. Perhaps the most sophisticated existing plan execution monitor is the XFRM system of Beetz and McDermott [4, 5].
Reference: [3] <author> C. Bastie and P. Regnier. </author> <title> SPEEDY : Monitoring the Execution in Dynamic Environments. In Reasoning about Actions and Planning in Complex Environments, </title> <booktitle> Proceedings of the Workshop at International Conference on Formal and Applied Practical Reasoning, </booktitle> <address> Bonn, Germany, </address> <note> on June 4, 1996. Available as: Technical Report AIDA-96-11, </note> <institution> Fachgebiet Intellektik, Technische Hochschule Darmstadt, Germany. </institution>
Reference-contexts: Moreover, because this framework is entirely within the situation calculus, such correctness proofs can be constructed totally within a classical logic. 7 Discussion There are several systems designed to interleave monitoring with plan execution: PLANEX [7], IPEM [1], ROGUE [13], SPEEDY <ref> [3] </ref>. We differ from these and similar proposals, first by the formal neatness of our approach, secondly by the fact that ours is a story for monitoring arbitrary programs, not simply straight line or partially ordered plans.
Reference: [4] <author> M. Beetz and D. McDermott. </author> <title> Improving robot plans during their execution. </title> <booktitle> In 2nd Int. Conf. on AI Planning Systems (AIPS-94), </booktitle> <editor> Kris Hammond (editor), p. </editor> <month> 3-12, </month> <year> 1994. </year>
Reference-contexts: Several authors rely on formal theories of actions for the purposes of characterizing appropriate notions of action failures [2, 24], but they do not consider execution monitoring per se. Perhaps the most sophisticated existing plan execution monitor is the XFRM system of Beetz and McDermott <ref> [4, 5] </ref>. This provides for the continual modification of robot plans (programs) during their execution, using a rich collection of failure models and plan repair strategies. Nothing in our proposal so far can rival the functionality of the XFRM system.
Reference: [5] <author> M. Beetz and D. McDermott. </author> <title> Expressing transformations of structured reactive plans. </title> <booktitle> In 4th European Conference on Planning (ECP'97), </booktitle> <editor> Sam Steel (editor), p. </editor> <address> 66-78, Toulouse, France, </address> <month> September 24-26, </month> <year> 1997. </year>
Reference-contexts: Several authors rely on formal theories of actions for the purposes of characterizing appropriate notions of action failures [2, 24], but they do not consider execution monitoring per se. Perhaps the most sophisticated existing plan execution monitor is the XFRM system of Beetz and McDermott <ref> [4, 5] </ref>. This provides for the continual modification of robot plans (programs) during their execution, using a rich collection of failure models and plan repair strategies. Nothing in our proposal so far can rival the functionality of the XFRM system.
Reference: [6] <author> S.-L. Chung, S.Lafortune, F. Ling. </author> <title> Limited looka-head policies in supervisory control of discrete event systems. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> volume 37, N 12, </volume> <pages> p. 1921-1935, </pages> <year> 1992. </year>
Reference-contexts: Just as we specified a semantics, via T rans, for Golog programs in Section 2.1, we want now to specify such 7 A similar idealization about the observability of all exogenous events is a common assumption in discrete event control theory (e.g. <ref> [20, 6] </ref>). On the face of it, this idealization seems dubious in practice. One can argue convincingly that agents never observe action occurrences - Fido ate the sandwich only their effects The sandwich is no longer on the table. <p> The approach has the advantage of being completely formal, and therefore is suitable for formulating, and ultimately proving, correctness properties for monitored systems. Plans for ongoing and future work include the following issues: 1. Draw closer parallels with the concept of controllable systems in discrete event control theory <ref> [20, 6, 14] </ref>. 2. Explore realizations of execution monitors differ ent than that presented in Section 4.2 [28]. 3. Investigate techniques for proving correctness properties of various monitors and monitored sys tems. 4. Investigate the concept of execution monitoring for non-terminating Golog programs [11]. 5.
Reference: [7] <author> R.E. Fikes, P.E. Hart, and N.J. Nilsson. </author> <title> Learning and executing generalized robot plans. </title> <journal> Artificial Intelligence, </journal> <volume> volume 3, N 4, </volume> <pages> p. 251-288, </pages> <year> 1972. </year>
Reference-contexts: Moreover, because this framework is entirely within the situation calculus, such correctness proofs can be constructed totally within a classical logic. 7 Discussion There are several systems designed to interleave monitoring with plan execution: PLANEX <ref> [7] </ref>, IPEM [1], ROGUE [13], SPEEDY [3]. We differ from these and similar proposals, first by the formal neatness of our approach, secondly by the fact that ours is a story for monitoring arbitrary programs, not simply straight line or partially ordered plans.
Reference: [8] <author> G. De Giacomo, Y. Lesperance, and H.J. Levesque. </author> <title> Reasoning about concurrent executions, prioritized interrupts, </title> <booktitle> and exogenous actions in the situation calculus. In 15th International Joint Conference on Artificial Intelligence (IJCAI-97), </booktitle> <address> p. </address> <month> 1221-1226 </month> <year> 1997. </year>
Reference-contexts: As presented in [17] and extended in <ref> [8] </ref>, Golog is a logic-programming language whose primitive actions are those of a background domain theory. Typically Golog programs are intended to be executed off-line, and then the sequence of actions returned by this off-line computation is executed on-line. <p> b 0 ) ; b 2 :r (b 2 )? ; move (b 2 ; b 1 ) ; b 3 :a (b 3 )? ; move (b 3 ; b 2 ) b 4 :p (b 4 )? ; move (b 4 ; b 3 ) endProc As in <ref> [8] </ref>, we associate to programs a transition semantics, i.e. a semantics based on single steps of program execution. Informally, this semantics declares that as a program proceeds, a program counter moves from the very beginning of the program along its intermediate states. <p> Observe that (ffi fl ; s) can also not evolve at all, because (ffi fl ; s) is final by definition (see below). To simplify the discussion, we have omitted axioms for procedures. These can be found in the extended version of <ref> [8] </ref>. Final The predicate Final is characterized by the following axioms: 1. Empty program: Final (nil; s) True 2. Primitive action: Final (a; s) False 3. Test action: Final (?; s) False 4. <p> In other words, just as for Schoppers, all required system reactions to possible contingencies are compiled into the controllable language. Our framework is different, but complementary; it favors the on-line generation of appropriate reactions to exogenous events, as opposed to precom-piling them into the Golog program. ConGolog <ref> [8, 9] </ref> is a much richer version of Golog that supports con-currency, prioritized interrupts and exogenous actions. Reactive behaviors are easily representable by Con-Golog's interrupt mechanism, so that a combination of reactive behaviors with "deliberative" execution monitoring is possible.
Reference: [9] <author> G. De Giacomo and H.J. Levesque. </author> <title> Congolog incremental interpreter. </title> <type> Technical report, </type> <institution> Computer Science Department, University of Toronto, </institution> <year> 1998. </year> <note> In preparation. </note>
Reference-contexts: Typically Golog programs are intended to be executed off-line, and then the sequence of actions returned by this off-line computation is executed on-line. Here we consider a variant of Golog that is intended to be executed entirely on-line <ref> [9] </ref>. <p> The following is such an interpreter: online (Prog,S0,Sf) :- final (Prog,S0), S0 = Sf ; trans (Prog,S0,Prog1,S1), /* Select a first action of Prog. */ !, /* Commit to this action. */ online (Prog1,S1,Sf). 4 An on-line interpreter based on T rans and F inal was originally proposed in <ref> [9] </ref> to give an account of Golog /Con-Golog programs with sensing actions. Here we make use of a simplified on-line interpreter that does not deal with sensing actions, but is suitable for coupling with an execution monitor. <p> In other words, just as for Schoppers, all required system reactions to possible contingencies are compiled into the controllable language. Our framework is different, but complementary; it favors the on-line generation of appropriate reactions to exogenous events, as opposed to precom-piling them into the Golog program. ConGolog <ref> [8, 9] </ref> is a much richer version of Golog that supports con-currency, prioritized interrupts and exogenous actions. Reactive behaviors are easily representable by Con-Golog's interrupt mechanism, so that a combination of reactive behaviors with "deliberative" execution monitoring is possible.
Reference: [10] <author> G. De Giacomo, R. Reiter, M. </author> <title> Soutchanski Execution Monitoring of High-Level Robot Programs. </title> <booktitle> In working notes of the 4th Symposium on Logical Formalizations of Common-sense Reasoning, </booktitle> <address> London, UK, </address> <month> Jan. 6 - Jan. 9, </month> <year> 1998. </year> <note> Electronic version is available at: www.ida.liu.se/ext/etai/nj/fcs-98/listing.html </note>
Reference-contexts: Therefore, our implementation inherits Prolog's Closed World Assumption, but this is a limitation of the implementation, not the general theory. The full version of the cautious on-line interpreter can be found in <ref> [10] </ref>. 4 Execution Monitoring of Golog Programs In this section we give a situation calculus specification for the behavior of a Golog program under the influence of an execution monitor. We first provide a very general framework, without committing to any particular details of the monitor. <p> We use the cautious on-line monitor of Section 4.1, and a straightforward implementation of M onitor and straightLineP rog (p). The Prolog code is provided in <ref> [10] </ref>. 5.1 A Blocks World Example In this section, the blocks world is axiomatized with successor state and action precondition axioms. We use the following function and predicate constants. <p> ; b 0 ; s) ^ On (b 2 ; b 1 ; s) ^ On (b 3 ; b 2 ; s) ^ On (b 4 ; b 3 ; s) ^ clear (b 4 ; s): r 1 m 1 An implementation, in Eclipse Prolog, is provided in <ref> [10] </ref>. 5.2 An Execution Trace The original procedure tower is very simple and was not designed to respond to external disturbances of any kind. However, as the trace demonstrates, the execution monitor is able to produce fairly sophisticated behavior in response to unforeseen exogenous events.
Reference: [11] <author> G. De Giacomo, R. Reiter, E. Ternovskaia. </author> <title> Non-terminating processes in the situation calculus. In Robots, Softbots, Immobots: Theories of Action, Planning and Control, </title> <booktitle> working notes of the workshop held on July 27, 1997 in conjunction with the AAAI-97, </booktitle> <address> Providence, Rhode Island. </address>
Reference-contexts: Explore realizations of execution monitors differ ent than that presented in Section 4.2 [28]. 3. Investigate techniques for proving correctness properties of various monitors and monitored sys tems. 4. Investigate the concept of execution monitoring for non-terminating Golog programs <ref> [11] </ref>. 5. Extend these ideas to temporal domains, for example, monitoring robot control programs written in sequential, temporal Golog [23]. 6. Implement these ideas on the Cognitive Robotics Group's RWI B21 autonomous robot at the Uni versity of Toronto.
Reference: [12] <author> F. Giunchiglia, P. Traverso, L. Spalazzi. </author> <title> Planning with failure. </title> <booktitle> In 2nd International Conference on AI Planning Systems (AIPS-94), </booktitle> <address> Chicago, IL, </address> <month> June 15-17, </month> <year> 1994. </year>
Reference-contexts: This would allow one to experiment with different mixtures of execution monitoring and reactivity, with the advantage of preserving the uni-fying formal framework of the situation calculus, but this remains an open research problem. The theory of embedded planning <ref> [29, 12, 30] </ref> introduces notions of planning with failure and has motivations very similar to ours. The authors propose several formal languages that, like Golog, include constructs for sequence, conditionals, loops and recursion. The emphasis is on reactive programs, but their proposal does provide for replanning during execution.
Reference: [13] <author> K.Z. Haigh and M. Veloso. </author> <title> Interleaving planning and robot execution for asynchronous user requests. </title> <booktitle> In Int. Conf. on Intelligent Robots and Systems (IROS-96), p. </booktitle> <pages> 148-155, </pages> <month> November </month> <year> 1996, </year> <institution> Osaka, </institution> <address> Japan. </address>
Reference-contexts: Moreover, because this framework is entirely within the situation calculus, such correctness proofs can be constructed totally within a classical logic. 7 Discussion There are several systems designed to interleave monitoring with plan execution: PLANEX [7], IPEM [1], ROGUE <ref> [13] </ref>, SPEEDY [3]. We differ from these and similar proposals, first by the formal neatness of our approach, secondly by the fact that ours is a story for monitoring arbitrary programs, not simply straight line or partially ordered plans.
Reference: [14] <author> J. Kosecka and R. </author> <title> Bajcsy. Discrete Event Systems for Autonomous Mobile Agents. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <volume> volume 12, </volume> <pages> p. 187-198, </pages> <year> 1994. </year>
Reference-contexts: The approach has the advantage of being completely formal, and therefore is suitable for formulating, and ultimately proving, correctness properties for monitored systems. Plans for ongoing and future work include the following issues: 1. Draw closer parallels with the concept of controllable systems in discrete event control theory <ref> [20, 6, 14] </ref>. 2. Explore realizations of execution monitors differ ent than that presented in Section 4.2 [28]. 3. Investigate techniques for proving correctness properties of various monitors and monitored sys tems. 4. Investigate the concept of execution monitoring for non-terminating Golog programs [11]. 5.
Reference: [15] <author> H.J. Levesque. </author> <title> What is planning in the presence of sensing? In AAAI-96, </title> <booktitle> volume 2, p. </booktitle> <pages> 1139-1145, </pages> <address> Portland, Oregon, </address> <year> 1996. </year>
Reference-contexts: A cautious on-line interpreter appeals to the offline execution of the robot's program (in the process of guaranteeing that after committing to a program action, the remainder of the program terminates). Therefore, this requirement precludes cautious interpretation of robot programs that appeal to sensing actions <ref> [15] </ref>, since such actions cannot be performed off-line. 6 Because the brave interpreter never looks ahead, it is suitable for programs with sense actions. The price it pays for this is a greater risk of following dead-end paths.
Reference: [16] <author> H.J. Levesque and R. Reiter. </author> <title> High-level robotic control: beyond planning. In: Integrating Robotics Research: Taking the Next Big Leap. </title> <note> Position paper. AAAI 1998 Spring Symposium, </note> <institution> Stanford University, </institution> <month> March 23-25, </month> <year> 1998. </year> <note> Available at http://www.cs.toronto.edu/~cogrobo/ </note>
Reference-contexts: The perspective being pursued by the Cognitive Robotics Group at the University of Toronto is to reduce the reliance on planning for eliciting inter esting robot behaviors, and instead provide the robot with programs written in a suitable high-level language <ref> [16] </ref>, in our case, Golog or ConGolog. As presented in [17] and extended in [8], Golog is a logic-programming language whose primitive actions are those of a background domain theory.
Reference: [17] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin and R. Scherl. </author> <title> Golog : A logic programming language for dynamic domains. </title> <journal> J. of Logic Programming, Special Issue on Actions, 1997, </journal> <volume> volume 31, </volume> <pages> N 1-3, </pages> <address> p. </address> <pages> 59-83. </pages>
Reference-contexts: As presented in <ref> [17] </ref> and extended in [8], Golog is a logic-programming language whose primitive actions are those of a background domain theory. Typically Golog programs are intended to be executed off-line, and then the sequence of actions returned by this off-line computation is executed on-line. <p> ffi; s) Trans (ffi; s; ffi 00 ; s 00 ) ^ T (ffi 00 ; s 00 ; ffi 0 ; s 0 ) T (ffi; s; ffi 0 ; s 0 ) Using Trans fl and Final we can give a new definition of the Do relation of <ref> [17] </ref> as: Do (ffi; s; s 0 ) 9ffi 0 :Trans fl (ffi; s; ffi 0 ; s 0 ) ^ Final (ffi 0 ; s 0 ): In other words, Do (ffi; s; s 0 ) holds iff it is possible to repeatedly single-step the program ffi, obtaining a program
Reference: [18] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <editor> In J. </editor> <booktitle> of Logic and Computation, special issue on actions and processes, 1994, </booktitle> <volume> volume 4, </volume> <pages> p. 655-678. </pages>
Reference-contexts: After the robot performs the sequence of actions generated by the recovery procedure, the discrepancy is eliminated and the robot can resume building its goal tower. 2 The Situation Calculus and Golog The version of the situation calculus that we use here has been described in <ref> [18] </ref>, [22], and elsewhere. The situation calculus is a second order language specifically designed for representing dynamically changing worlds. All changes to the world are the result of named actions.
Reference: [19] <author> J.McCarthy, </author> <title> P.Hayes Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In: B.Meltzer and D.Michie (editors), </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> p. 463-502, </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference: [20] <author> P.J. Ramadge and W.M. Wonham. </author> <title> The Control of Discrete Event Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1): </volume> <pages> 81-98, </pages> <year> 1989. </year>
Reference-contexts: Just as we specified a semantics, via T rans, for Golog programs in Section 2.1, we want now to specify such 7 A similar idealization about the observability of all exogenous events is a common assumption in discrete event control theory (e.g. <ref> [20, 6] </ref>). On the face of it, this idealization seems dubious in practice. One can argue convincingly that agents never observe action occurrences - Fido ate the sandwich only their effects The sandwich is no longer on the table. <p> These properties are intended to capture suitable concepts of controllability following the intuition behind similar concepts introduced for dis-crete event systems <ref> [20] </ref>. Informally, controllability is the property that characterizes a closed-loop system (a Golog program coupled with the execution monitor): this is the ability of a monitored program to behave correctly even if exogenous actions occur during the robot's execution of the program. <p> From our point of view, the notion of a universal plan is closely related to the notion of controllable languages developed for discrete event systems control <ref> [20] </ref>. There, a language (a set of linear plans) is controllable iff the effects of all possible uncontrollable events do not lead outside the set of plans that this language contains. <p> The approach has the advantage of being completely formal, and therefore is suitable for formulating, and ultimately proving, correctness properties for monitored systems. Plans for ongoing and future work include the following issues: 1. Draw closer parallels with the concept of controllable systems in discrete event control theory <ref> [20, 6, 14] </ref>. 2. Explore realizations of execution monitors differ ent than that presented in Section 4.2 [28]. 3. Investigate techniques for proving correctness properties of various monitors and monitored sys tems. 4. Investigate the concept of execution monitoring for non-terminating Golog programs [11]. 5.
Reference: [21] <author> R. </author> <title> Reiter The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In: Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, p. </booktitle> <pages> 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: Successor state axioms embody the solution to the frame problem of Reiter <ref> [21] </ref>. 3. Axioms describing the initial situation what is true initially, before any actions have occurred.
Reference: [22] <author> R. Reiter. </author> <title> KNOWLEDGE IN ACTION: Logical Foundations for Describing and Implementing Dynamical Systems. A draft of the first eight chapters of a book. </title> <note> Available at http://www.cs.toronto.edu/~ cogrobo/ </note>
Reference-contexts: After the robot performs the sequence of actions generated by the recovery procedure, the discrepancy is eliminated and the robot can resume building its goal tower. 2 The Situation Calculus and Golog The version of the situation calculus that we use here has been described in [18], <ref> [22] </ref>, and elsewhere. The situation calculus is a second order language specifically designed for representing dynamically changing worlds. All changes to the world are the result of named actions. A possible world history, which is simply a sequence of actions, is represented by a first order term called a situation.
Reference: [23] <author> R. Reiter. </author> <title> Sequential, temporal Golog. </title> <booktitle> In Principles of Knowledge Representation and Reasoning. Proceedings of the 6th International Conference (KR'98), </booktitle> <address> Trento, Italy, </address> <month> June 2-5, </month> <year> 1998, </year> <note> this volume. </note>
Reference-contexts: Investigate techniques for proving correctness properties of various monitors and monitored sys tems. 4. Investigate the concept of execution monitoring for non-terminating Golog programs [11]. 5. Extend these ideas to temporal domains, for example, monitoring robot control programs written in sequential, temporal Golog <ref> [23] </ref>. 6. Implement these ideas on the Cognitive Robotics Group's RWI B21 autonomous robot at the Uni versity of Toronto.
Reference: [24] <author> E. Sandewall. </author> <title> Logic-Based Modelling of Goal-Directed Behavior. </title> <booktitle> In Linkoping Electronic Articles in Computer and Information Science, </booktitle> <volume> volume 2, N 19, </volume> <year> 1997. </year> <note> Available at: http://www.ep.liu.se/ea/cis/1997/019/ </note>
Reference-contexts: The emphasis is on reactive programs, but their proposal does provide for replanning during execution. Several authors rely on formal theories of actions for the purposes of characterizing appropriate notions of action failures <ref> [2, 24] </ref>, but they do not consider execution monitoring per se. Perhaps the most sophisticated existing plan execution monitor is the XFRM system of Beetz and McDermott [4, 5].
Reference: [25] <editor> M.J. Schoppers. </editor> <booktitle> Universal plans for reactive robots in unpredictable environments In 10th International Joint Conference on Artificial Intelligence (IJCAI-87), p. </booktitle> <pages> 1039-1046, </pages> <year> 1987. </year>
Reference-contexts: Moreover, we do not assume that the monitored plan is generated automatically from scratch, but rather that it has been provided by a programmer. In a sequence of papers <ref> [25, 26, 27] </ref> Schoppers proposes and defends the idea of "universal plans", which "address the tension between reasoned behavior and timely response by caching reactions for classes of possible situations".
Reference: [26] <author> M.J. Schoppers. </author> <title> In defense of reaction plans as caches. </title> <journal> In AI Magazine, </journal> <volume> volume 10, N 4, </volume> <pages> p. 51-60, </pages> <year> 1989. </year>
Reference-contexts: Moreover, we do not assume that the monitored plan is generated automatically from scratch, but rather that it has been provided by a programmer. In a sequence of papers <ref> [25, 26, 27] </ref> Schoppers proposes and defends the idea of "universal plans", which "address the tension between reasoned behavior and timely response by caching reactions for classes of possible situations".
Reference: [27] <author> M.J. Schoppers. </author> <title> Building monitors to exploit open-loop and closed-loop dynamics. </title> <booktitle> In Proceedings of the 1st International Conference on Artificial Iintelligence Planning Systems (AIPS-92), </booktitle> <address> June 15-17, College Park, Maryland, p. 204-213, </address> <year> 1992 </year>
Reference-contexts: Moreover, we do not assume that the monitored plan is generated automatically from scratch, but rather that it has been provided by a programmer. In a sequence of papers <ref> [25, 26, 27] </ref> Schoppers proposes and defends the idea of "universal plans", which "address the tension between reasoned behavior and timely response by caching reactions for classes of possible situations".
Reference: [28] <author> M. Soutchanski. </author> <title> Execution monitoring of high-level robot programs. </title> <institution> University of Toronto, </institution> <type> PhD thesis, forthcoming. </type>
Reference-contexts: Plans for ongoing and future work include the following issues: 1. Draw closer parallels with the concept of controllable systems in discrete event control theory [20, 6, 14]. 2. Explore realizations of execution monitors differ ent than that presented in Section 4.2 <ref> [28] </ref>. 3. Investigate techniques for proving correctness properties of various monitors and monitored sys tems. 4. Investigate the concept of execution monitoring for non-terminating Golog programs [11]. 5. Extend these ideas to temporal domains, for example, monitoring robot control programs written in sequential, temporal Golog [23]. 6.
Reference: [29] <author> P. Traverso, A. Cimatti, L. Spalazzi. </author> <title> Beyond the single planning paradigm: introspective planning. </title> <booktitle> In 10th European Conference on Artificial Intelligence (ECAI-92), p. </booktitle> <pages> 643-647, </pages> <address> Vienna, </address> <month> August 3-7, </month> <year> 1992. </year>
Reference-contexts: This would allow one to experiment with different mixtures of execution monitoring and reactivity, with the advantage of preserving the uni-fying formal framework of the situation calculus, but this remains an open research problem. The theory of embedded planning <ref> [29, 12, 30] </ref> introduces notions of planning with failure and has motivations very similar to ours. The authors propose several formal languages that, like Golog, include constructs for sequence, conditionals, loops and recursion. The emphasis is on reactive programs, but their proposal does provide for replanning during execution.
Reference: [30] <author> P. Traverso and L. Spalazzi. </author> <title> A Logic for Acting, Sensing and Planning. </title> <booktitle> In 14th International Joint Conference on Artificial Intelligence, </booktitle> <volume> volume 2, </volume> <pages> p. 1941-1949, </pages> <year> 1995. </year>
Reference-contexts: This would allow one to experiment with different mixtures of execution monitoring and reactivity, with the advantage of preserving the uni-fying formal framework of the situation calculus, but this remains an open research problem. The theory of embedded planning <ref> [29, 12, 30] </ref> introduces notions of planning with failure and has motivations very similar to ours. The authors propose several formal languages that, like Golog, include constructs for sequence, conditionals, loops and recursion. The emphasis is on reactive programs, but their proposal does provide for replanning during execution.
References-found: 30

