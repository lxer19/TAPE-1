URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1994/TR20.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Impact of Message-Ordering in Wormhole-Routed Multicomputers  
Abstract: Dhabaleswar K. Panda and Vibha Dixit-Radiya Technical Report OSU-CISRC-9/94-TR20 A preliminary version of this paper was presented at Scalable High Performance Computing Conference (SHPCC '94). Manuscript is under review for Journal of Parallel and Distributed Computing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Balakrishnan and D. K. Panda. </author> <title> Impact of Multiple Consumption Channels on Wormhole Routed k-ary n-cube Networks. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <pages> pages 163-167, </pages> <year> 1993. </year>
Reference-contexts: However, it does not get eliminated completely because the number of outgoing messages at any time may be greater than the number of available injection ports. Similar contention due to limited number of consumption ports also degrade system performance significantly. This aspect has been studied separately in <ref> [1] </ref>. In this paper we focus on contention due to injection ports and determine best ways to utilize injection ports in a system together with its routing scheme. 2.3 Effect of Message-Ordering Consider an example multicast pattern of Fig. 4 in a 4x4 mesh.
Reference: [2] <author> S. W. Bollinger and S. F. Midkiff. </author> <title> Heursitic Technique for Processor and Link Assignment in Multicomputers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(3), </volume> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: The earliest and latest time estimates shown in the figure will be in the next section. statements indicate the number of consecutive instructions executed and size of message transferred, respectively. The TCG model is an improvement over the two existing models nontemporal interaction graph model <ref> [2, 3] </ref> used for explicitly-parallel programs, and temporal precedence graph model [16, 12, 20, 26] used for sequential programs. The TCG model has been successfully used in our previous study of clustering and assignment problems [9, 10]. Details of the model can be found in these references.
Reference: [3] <author> V. Chaudhary and J. K. Aggrawal. </author> <title> A Generalized Scheme for Mapping Parallel Algorithms. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(3) </volume> <pages> 328-346, </pages> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem <ref> [3, 7, 10, 16, 19, 25] </ref>. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time. <p> The earliest and latest time estimates shown in the figure will be in the next section. statements indicate the number of consecutive instructions executed and size of message transferred, respectively. The TCG model is an improvement over the two existing models nontemporal interaction graph model <ref> [2, 3] </ref> used for explicitly-parallel programs, and temporal precedence graph model [16, 12, 20, 26] used for sequential programs. The TCG model has been successfully used in our previous study of clustering and assignment problems [9, 10]. Details of the model can be found in these references.
Reference: [4] <author> A. A. Chien and J. H. Kim. </author> <title> Planar Adaptive Routing: Low-cost Adaptive Networks for Multiprocessors. </title> <booktitle> In 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 268-277, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: However, it does not make effective use of all communication links in a system. Fully adaptive algorithms [11] allow a message to be routed along any of the shortest paths from the source to the destination processor. Partially adaptive algorithms like planar <ref> [4] </ref> restrict routing freedom to two dimensions at a time. Higher adaptivity has potential to reduce link contention and hence is useful to reduce the overall execution time of a given program.
Reference: [5] <author> Cray Research, Inc. </author> <title> Cray T3D System Architecture Overview, </title> <year> 1993. </year>
Reference-contexts: The wormhole-routing switching technique is increasingly becoming popular in building massively parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead [21]. In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports. Intel Paragon [18], Cray T3D <ref> [5] </ref>, and Stanford DASH [13] are some early representative systems in this trend. These systems provide low-latency communication when the traffic in the system is low. However, with increase in communication traffic, messages undergo severe link contention and the system starts performing poorly.
Reference: [6] <author> W. J. Dally. </author> <title> Virtual-channel Flow Control. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3 </volume> <pages> 194-205, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: We discuss the operational principles of multiport wormhole systems and show situations which lead to port contention. Through an example, we show the significance of message-ordering by taking into account link contention, multiple ports and routing adaptivity. 2.1 Link Contention and Routing Adaptivity In wormhole-routed systems <ref> [6] </ref>, the header flit of a message establishes the path, the intermediate flits follow the path, and the tail flit releases the path. During the message propagation, if a desired link is already being used by another message, the current message gets blocked. <p> Such a phenomena is known as link contention. Link contention is closely related to the underlying routing scheme, topology of the system, and the communication traffic. To alleviate link contention, several routing schemes with varying adaptivity have been proposed in the literature. Deterministic or e-cube routing <ref> [6] </ref> defines a single path from a source to a destination node and thus has zero adaptivity. Such routing is simple to implement and deadlock free. However, it does not make effective use of all communication links in a system. <p> The source processor P 6 sends 6 messages, m 0 , m 1 , m 3 , m 12 , m 14 , and m 15 to 6 respective destinations. Assume ecube routing <ref> [6] </ref> is 5 being used for determining routing paths.
Reference: [7] <author> S. Darbha and D. P. Agrawal. </author> <title> A Task Duplication Based Optimal Scheduling Algorithm for Variable Execution Time Tasks. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages II:52-56, </pages> <month> Aug </month> <year> 1994. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem <ref> [3, 7, 10, 16, 19, 25] </ref>. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time.
Reference: [8] <author> M. Dikaiakos, A. Rogers, and K. Steiglitz. </author> <title> Message Ordering in Multiprocessors with Synchronous Communication. </title> <booktitle> In International Conference on Parallel Processing, volume III, </booktitle> <pages> pages 196-203, </pages> <year> 1992. </year>
Reference-contexts: The problem of message ordering is similar to that of instruction reordering in pipelined processors to minimize sequential program execution time [17]. The only known prior work on message ordering attempting to reduce program completion time is by Dikaiakos et al. <ref> [8] </ref>. They present an optimal message-ordering algorithm that achieves minimal program completion time for a given clustered, mapped, and scheduled task graph. The algorithm is based on criticality of messages. However, the algorithm assumes a fully-connected architecture and a single port communication model. <p> Besides utilization of ports, from an application perspective, there exists criticality in messages, i.e., some messages are more critical than others and the program completion time increases significantly <ref> [8, 9] </ref> if the critical messages get delayed. Hence, a good message-ordering algorithm should take into account factors such as criticality in messages, link contention, port contention, and routing scheme, to reduce program completion time as well as increasing the utilization of ports. <p> Hence, we focus more on the skewed model in our analysis. 4 Message-Ordering Algorithms In this section, we present our message-ordering schemes. First we explain the naive sequential ordering strategy. Next, we discuss the work done by Dikaiakos et al. <ref> [8] </ref> which presents a message-ordering scheme based on precedence graph model for 1-port fully-connected system (not a realistic architecture 10 Table 1: Summary of Notations Symbol Meaning T CG Temporal Communication Graph. T x Task x in TCG. V Set of nodes in TCG. E Set of edges in TCG. <p> This is equal to O (jV j + jEj), the complexity of topological sort, where jV j and jEj are the number of nodes and edges, respectively, in the TCG. In the algorithm by Dikaiakos et al. <ref> [8] </ref>, messages are ordered in decreasing order of Finish Times of the message's destination nodes. It turns out that Finish time of a node is same as the earliest completion time minus the node's Latest Start Time, when the topology is fully connected.
Reference: [9] <author> Vibha A. Dixit-Radiya and Dhabaleswar K. Panda. </author> <title> Task Assignment on Distributed-Memory Systems with Adaptive Wormhole Routing. </title> <booktitle> In Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 674-681, </pages> <year> 1993. </year>
Reference-contexts: Even though subproblems (c) and (d) also significantly affect program completion time, they have not received any attention in mapping literature. For distributed-memory systems, we have solved the clustering and intra-processor scheduling problems in [10] and the assignment problem in <ref> [9] </ref>. In this paper, we solve the message-ordering problem for task graphs for which clustering, assignment, and scheduling solutions have already been obtained. <p> Besides utilization of ports, from an application perspective, there exists criticality in messages, i.e., some messages are more critical than others and the program completion time increases significantly <ref> [8, 9] </ref> if the critical messages get delayed. Hence, a good message-ordering algorithm should take into account factors such as criticality in messages, link contention, port contention, and routing scheme, to reduce program completion time as well as increasing the utilization of ports. <p> The TCG model has been successfully used in our previous study of clustering and assignment problems <ref> [9, 10] </ref>. Details of the model can be found in these references. We solve the message-ordering problem assuming that clustering, assignment, and intra-processor scheduling solutions have already been obtained for the TCG. <p> Details of the occurrence time estimates can be found in our study of the mapping problem in <ref> [9, 10] </ref>. For the static LST-based message ordering, we order messages within a multicast in increasing order of the LST estimates of the message's destination nodes. <p> Details on random TCG generation can be found in our earlier work <ref> [9, 10] </ref>. For 16x16 meshes having 256 communication-bound tasks, the degree of multicast was chosen to be an exponential distribution with mean 16. The mean for 8x8 meshes with 64 computation-bound tasks was 3.
Reference: [10] <author> Vibha A. Dixit-Radiya and Dhabaleswar K. Panda. </author> <title> Clustering and Intra-Processor Scheduling for Explicitly-Parallel Programs on Distributed-Memory Systems. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <pages> pages 609-615, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem <ref> [3, 7, 10, 16, 19, 25] </ref>. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time. <p> Even though subproblems (c) and (d) also significantly affect program completion time, they have not received any attention in mapping literature. For distributed-memory systems, we have solved the clustering and intra-processor scheduling problems in <ref> [10] </ref> and the assignment problem in [9]. In this paper, we solve the message-ordering problem for task graphs for which clustering, assignment, and scheduling solutions have already been obtained. <p> We assume that clustering, intra--processor scheduling, and assignment solutions for the parallel program have already been obtained. 3.1 Temporal Communication Graph (TCG) We solve the message-ordering problem for distributed-memory systems for which programs are explicitly-parallel in nature <ref> [10] </ref>. The temporal dependencies in an explicitly-parallel program are modeled very well by a Temporal Communication Graph (TCG). Figure 6 shows an example explicitly-parallel program with 4 tasks and Fig. 7a shows its TCG model. <p> The TCG model has been successfully used in our previous study of clustering and assignment problems <ref> [9, 10] </ref>. Details of the model can be found in these references. We solve the message-ordering problem assuming that clustering, assignment, and intra-processor scheduling solutions have already been obtained for the TCG. <p> Details of the occurrence time estimates can be found in our study of the mapping problem in <ref> [9, 10] </ref>. For the static LST-based message ordering, we order messages within a multicast in increasing order of the LST estimates of the message's destination nodes. <p> Details on random TCG generation can be found in our earlier work <ref> [9, 10] </ref>. For 16x16 meshes having 256 communication-bound tasks, the degree of multicast was chosen to be an exponential distribution with mean 16. The mean for 8x8 meshes with 64 computation-bound tasks was 3.
Reference: [11] <author> J. Duato. </author> <title> Deadlock-Free Adaptive Routing Algorithms for Multicomputers: Evaluation of a New Algorithm. </title> <booktitle> In Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 840-847, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Deterministic or e-cube routing [6] defines a single path from a source to a destination node and thus has zero adaptivity. Such routing is simple to implement and deadlock free. However, it does not make effective use of all communication links in a system. Fully adaptive algorithms <ref> [11] </ref> allow a message to be routed along any of the shortest paths from the source to the destination processor. Partially adaptive algorithms like planar [4] restrict routing freedom to two dimensions at a time. <p> This is a poor utilization of ports. It can be noticed that a message-ordering of (m 0 ; m 3 ; : : :) will allow both m 0 and m 3 to propagate simultaneously by using the two ports. If the underlying routing scheme is fully-adaptive 6 <ref> [11] </ref>, then the original message-ordering (m 0 ; m 1 ; : : :) would have allowed both messages m 0 and m 1 to move simultaneously. <p> Thus, the Gaussian Elimination example is almost balanced with respect to computation and communication. Figures 12 and 13 show the performance of sequential, static and dynamic message-ordering algorithms for the Gaussian Elimination example for deterministic-ecube and fully-adaptive routing (algorithm described in <ref> [11] </ref> was used), respectively. Skewed model for communication startup cost with t s = 5 s was assumed for both cases. m fl m matrix A.
Reference: [12] <author> H. El-Rewini and T. G. Lewis. </author> <title> Scheduling Parallel Program Tasks onto Arbitrary Target Machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9 </volume> <pages> 138-153, </pages> <year> 1990. </year>
Reference-contexts: The TCG model is an improvement over the two existing models nontemporal interaction graph model [2, 3] used for explicitly-parallel programs, and temporal precedence graph model <ref> [16, 12, 20, 26] </ref> used for sequential programs. The TCG model has been successfully used in our previous study of clustering and assignment problems [9, 10]. Details of the model can be found in these references.
Reference: [13] <author> D. Lenoski et. al. </author> <title> The Stanford DASH Multiprocessor. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 63-79, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports. Intel Paragon [18], Cray T3D [5], and Stanford DASH <ref> [13] </ref> are some early representative systems in this trend. These systems provide low-latency communication when the traffic in the system is low. However, with increase in communication traffic, messages undergo severe link contention and the system starts performing poorly.
Reference: [14] <author> P. McKinley et al. </author> <title> Unicast-Based Multicast Communication in Wormhole-Routed Networks. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <volume> volume II, </volume> <pages> pages 10-19, </pages> <year> 1992. </year>
Reference-contexts: Personalized multicasts are common in scientific and numerical computations using scattering techniques. All-to-all personalized communication operation is used in parallel fast Fourier transform, matrix transpose, and parallel database join operations [15]. Sophisticated multicasting schemes using path-based routing [21, 22] and unicast-based schemes <ref> [14] </ref> have been shown to be efficient for non-personalized multicast. However, personalized multicasts cannot take advantage of these schemes.
Reference: [15] <author> Vipin Kumar et al. </author> <title> Introduction to Parallel Computing: Design and Analysis of Algorithms. </title> <publisher> Ben-jamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Multicasts are further classified into personalized (different data going to others) and non-personalized (same data going to different processors). Personalized multicasts are common in scientific and numerical computations using scattering techniques. All-to-all personalized communication operation is used in parallel fast Fourier transform, matrix transpose, and parallel database join operations <ref> [15] </ref>. Sophisticated multicasting schemes using path-based routing [21, 22] and unicast-based schemes [14] have been shown to be efficient for non-personalized multicast. However, personalized multicasts cannot take advantage of these schemes.
Reference: [16] <author> A. Gerasoulis and T. Yang. </author> <title> A Comparison of Clustering Heuristics for Scheduling Directed Acyclic Graphs on Multiprocessors. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 276-291, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem <ref> [3, 7, 10, 16, 19, 25] </ref>. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time. <p> The TCG model is an improvement over the two existing models nontemporal interaction graph model [2, 3] used for explicitly-parallel programs, and temporal precedence graph model <ref> [16, 12, 20, 26] </ref> used for sequential programs. The TCG model has been successfully used in our previous study of clustering and assignment problems [9, 10]. Details of the model can be found in these references.
Reference: [17] <author> J. L. Hennessy and D. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: For future machines, we also study the effect of adaptivity in routing on message-ordering. The problem of message ordering is similar to that of instruction reordering in pipelined processors to minimize sequential program execution time <ref> [17] </ref>. The only known prior work on message ordering attempting to reduce program completion time is by Dikaiakos et al. [8]. They present an optimal message-ordering algorithm that achieves minimal program completion time for a given clustered, mapped, and scheduled task graph. The algorithm is based on criticality of messages.
Reference: [18] <author> Intel Corp. </author> <title> Paragon XP/S Product Overview, </title> <booktitle> 1991. </booktitle> <pages> 29 </pages>
Reference-contexts: The wormhole-routing switching technique is increasingly becoming popular in building massively parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead [21]. In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports. Intel Paragon <ref> [18] </ref>, Cray T3D [5], and Stanford DASH [13] are some early representative systems in this trend. These systems provide low-latency communication when the traffic in the system is low. However, with increase in communication traffic, messages undergo severe link contention and the system starts performing poorly.
Reference: [19] <author> A. Kumar, S. Ramakrishnan, C. Deshpande, and L. Dunning. </author> <title> Performance Comparison of Two Algorithms for Task Assignment. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages III:83-87, </pages> <month> Aug </month> <year> 1994. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem <ref> [3, 7, 10, 16, 19, 25] </ref>. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time.
Reference: [20] <author> N. Mehdiratta and K. Ghose. </author> <title> A Bottom-up Approach to Task Scheduling on Distributed Memory Multiprocessors. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages II:151-154, </pages> <month> Aug </month> <year> 1994. </year>
Reference-contexts: The TCG model is an improvement over the two existing models nontemporal interaction graph model [2, 3] used for explicitly-parallel programs, and temporal precedence graph model <ref> [16, 12, 20, 26] </ref> used for sequential programs. The TCG model has been successfully used in our previous study of clustering and assignment problems [9, 10]. Details of the model can be found in these references.
Reference: [21] <author> L. M. Ni and P. K. McKinley. </author> <title> A Survey of Wormhole Routing Techniques in Direct Networks. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 62-76, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Personalized multicasts are common in scientific and numerical computations using scattering techniques. All-to-all personalized communication operation is used in parallel fast Fourier transform, matrix transpose, and parallel database join operations [15]. Sophisticated multicasting schemes using path-based routing <ref> [21, 22] </ref> and unicast-based schemes [14] have been shown to be efficient for non-personalized multicast. However, personalized multicasts cannot take advantage of these schemes. <p> The wormhole-routing switching technique is increasingly becoming popular in building massively parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead <ref> [21] </ref>. In addition to the basic wormhole-routing switching, systems are gradually incorporating multiple communication ports. Intel Paragon [18], Cray T3D [5], and Stanford DASH [13] are some early representative systems in this trend. These systems provide low-latency communication when the traffic in the system is low. <p> Any message originating at a processor must be sent via an injection port to the router <ref> [21] </ref>. This port remains busy till the message leaves the router. If the message gets blocked on its way due to link contention, the assigned port remains busy and cannot be allocated to any other message. This leads to messages being queued at the injection port (s) introducing port contention.
Reference: [22] <author> D. K. Panda, S. Singhal, and P. Prabhakaran. </author> <title> Multidestination Message Passing Mechanism Conforming to Base Wormhole Routing Scheme. </title> <booktitle> In Proceedings of the Parallel Computer Routing and Communication Workshop, </booktitle> <year> 1994. </year> <note> To appear in Lecture Notes in Computer Science, Springer-Verlag. </note>
Reference-contexts: Personalized multicasts are common in scientific and numerical computations using scattering techniques. All-to-all personalized communication operation is used in parallel fast Fourier transform, matrix transpose, and parallel database join operations [15]. Sophisticated multicasting schemes using path-based routing <ref> [21, 22] </ref> and unicast-based schemes [14] have been shown to be efficient for non-personalized multicast. However, personalized multicasts cannot take advantage of these schemes.
Reference: [23] <author> Dhabaleswar K. Panda and Vibha A. Dixit-Radiya. </author> <title> Message-Ordering for Wormhole-Routed Mul-tiport Systems with Link Contention and Routing Adaptivity. </title> <booktitle> In Scalable High Performance Computing Conference, </booktitle> <pages> pages 191-198, </pages> <year> 1994. </year>
Reference: [24] <author> H. Schwetman. </author> <title> Introduction to Process-Oriented Simulation and CSIM. </title> <booktitle> In Proceedings of Winter Simulation Conference, </booktitle> <year> 1990. </year>
Reference-contexts: To eliminate the effects of clustering and assignment, we assumed a single task per processor and identity task-processor assignment scheme. Experiments were performed using an event-driven simulator written in CSIM <ref> [24] </ref> for 16x16 and 8x8 wormhole-routed meshes.
Reference: [25] <author> B. Shirazi, M. Wang, and G. Pathak. </author> <title> Analysis and Evaluation of Heuristic Methods for Static Scheduling. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10 </volume> <pages> 222-232, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction One of the major problems in software development for parallel systems is the mapping problem <ref> [3, 7, 10, 16, 19, 25] </ref>. It is defined as allocation of the set of tasks of a parallel application onto available processors to obtain minimal program completion time.
Reference: [26] <author> G. C. Sih and E. A. Lee. </author> <title> A Compile-time Scheduling Heuristic for Interconnection-contrained Heterogeneous Processor Architectures. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(2) </volume> <pages> 175-187, </pages> <month> Feb. </month> <year> 1993. </year> <month> 30 </month>
Reference-contexts: The TCG model is an improvement over the two existing models nontemporal interaction graph model [2, 3] used for explicitly-parallel programs, and temporal precedence graph model <ref> [16, 12, 20, 26] </ref> used for sequential programs. The TCG model has been successfully used in our previous study of clustering and assignment problems [9, 10]. Details of the model can be found in these references.
References-found: 26

