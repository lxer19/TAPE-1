URL: ftp://st.cs.uiuc.edu/pub/papers/patterns/patterns-generate-archs.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/johnson/cs497/notes98/online-course.html
Root-URL: http://www.cs.uiuc.edu
Title: Patterns Generate Architectures  First Class Software, Inc.  
Author: Kent Beck Ralph Johnson 
Affiliation: University of Illinois at Urbana-Champaign  
Abstract: We need ways to describe designs that communicate the reasons for our design decisions, not just the results. Design patterns have been proposed as ways of communicating design information. This paper shows that patterns can be used to derive an architecture from its problem statement. The resulting description makes it easier to understand the purpose of the various architectural features. 
Abstract-found: 1
Intro-found: 1
Reference: [Alexander77] <author> Christopher Alexander, Sara Ishikawa and Murray Silverstein, with Max Jacobson, Ingrid Fiksdahl-King and Shlomo Angel. </author> <title> A Pattern Language. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Our original interest in patterns [Kerth88] was sparked by the work of an architect, Christopher Alexander, whose patterns encode knowledge of the design and construction of communities and buildings <ref> [Alexander77] </ref> [Alexander79]. His use of the word "pattern" takes on more meaning than the usual dictionary definition. Alexander's patterns are both a description of a recurring pattern of architectural elements and a rule for how and when to create that pattern.
Reference: [Alexander79] <author> Christopher Alexander. </author> <title> The Timeless Way of Building. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Our original interest in patterns [Kerth88] was sparked by the work of an architect, Christopher Alexander, whose patterns encode knowledge of the design and construction of communities and buildings [Alexander77] <ref> [Alexander79] </ref>. His use of the word "pattern" takes on more meaning than the usual dictionary definition. Alexander's patterns are both a description of a recurring pattern of architectural elements and a rule for how and when to create that pattern.
Reference: [Anderson93] <author> Bruce Anderson. </author> <booktitle> Workshop Report-Towards an Architecture Handbook. OOPSLA'92: Addendum to the Proceedings, printed as OOPSLA Messenger, </booktitle> <volume> 4(2): </volume> <pages> 109-114, </pages> <month> April </month> <year> 1993 </year>
Reference-contexts: Nevertheless, the two ideas overlap. Both are attempts to reuse design, and examples of one are sometimes used as examples of the other. Another approach to design in the object community is "patterns". There were OOPSLA workshops in 1991 and 1992 on "an architecture handbook" <ref> [Anderson93] </ref> and ones in 1992 and 1993 on "patterns"[Coad93], with an overlap between the two groups, which shows a link between architectures and patterns. Much of the work on patterns focuses on Authors' addresses: Kent Beck, First Class Software, Inc., P.O.
Reference: [Coad92] <author> Peter Coad, </author> <title> "Object-Oriented Patterns", </title> <journal> Communications of the ACM, </journal> <volume> 35(9) </volume> <pages> 153-159, </pages> <year> 1992. </year>
Reference-contexts: Box 226, Boulder Creek CA 96006 email: 70761.1216@compuserve.com, Ralph Johnson, Department of Computer Science, 1304 W. Springfield Ave., Urbana IL 61801 email: johnson @cs.uiuc.edu To be presented at ECOOP'94 2 patterns of relationships between objects as the building-blocks of larger architectures <ref> [Coad92] </ref> [Gamma93]. Our original interest in patterns [Kerth88] was sparked by the work of an architect, Christopher Alexander, whose patterns encode knowledge of the design and construction of communities and buildings [Alexander77] [Alexander79]. His use of the word "pattern" takes on more meaning than the usual dictionary definition.
Reference: [Coad93] <author> Peter Coad and Mark Mayfield. </author> <booktitle> Workshop Report-Patterns. OOPSLA'92: Addendum to the Proceedings, printed as OOPSLA Messenger, </booktitle> <volume> 4(2): </volume> <pages> 93-95, </pages> <month> April </month> <year> 1993 </year>
Reference: [Deutsch89] <author> L. Peter Deutsch, </author> <booktitle> Design Reuse and Frameworks in the Smalltalk-80 Programming System, </booktitle> <pages> pp 55-71, </pages> <booktitle> Software Reusability, </booktitle> <volume> Vol II, </volume> <editor> ed. Ted J. Biggerstaff and Alan J.Perlis, </editor> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: An architecture is the way the parts work together to make the whole. The way architectures are notated, applied, and discovered are all topics of active research. A closely related idea inside the object community is that of "framework" <ref> [Deutsch89] </ref> [Johnson88]. A framework is the reusable design of a system or a part of a system expressed as a set of abstract classes and the way instances of (subclasses of) those classes collaborate.
Reference: [Gamma93] <author> Erich Gamma, Richard Helm, Ralph Johnson,and John Vlissides, </author> <title> "Design patterns: Abstraction and reuse of objectoriented design". </title> <booktitle> In European Conference on Objectoriented Programming, Kaiserlauten, German, </booktitle> <month> July </month> <year> 1993. </year> <note> Published as Lecture notes in Computer Science #707, pp. 406-431, Springer-Verlag. </note>
Reference-contexts: Box 226, Boulder Creek CA 96006 email: 70761.1216@compuserve.com, Ralph Johnson, Department of Computer Science, 1304 W. Springfield Ave., Urbana IL 61801 email: johnson @cs.uiuc.edu To be presented at ECOOP'94 2 patterns of relationships between objects as the building-blocks of larger architectures [Coad92] <ref> [Gamma93] </ref>. Our original interest in patterns [Kerth88] was sparked by the work of an architect, Christopher Alexander, whose patterns encode knowledge of the design and construction of communities and buildings [Alexander77] [Alexander79]. His use of the word "pattern" takes on more meaning than the usual dictionary definition.
Reference: [Gamma94] <author> Erich Gamma, Richard Helm, Ralph Johnson,and John Vlissides. </author> <title> Design Patterns: </title> <booktitle> Elements of ObjectOriented Software Architecture Addison-Wesley, </booktitle> <year> 1994. </year>
Reference-contexts: The graphics patterns are Model-View-Controller, Collect Damage, and Update at User Speed. All of the other patterns except Editor are in the Design Pattern Catalog <ref> [Gamma94] </ref>. The versions of the patterns in this paper differ from the versions in the Catalog in two ways. The most obvious difference is that the versions in this paper are much shorter, but that is out of necessity, not preference.
Reference: [Garlan93] <author> David Garlan and Mary Shaw, </author> <title> "An Introduction to Software Architecture", </title> <booktitle> in Advances in Software Engineering and Knowledge Engineering Volume I, </booktitle> <publisher> World Scientific Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: We need ways of describing designs that communicate the reasons for our design decisions, not just the results. One approach to improving design, currently receiving interest primarily outside the object community, is the idea of "architecture" <ref> [Garlan93] </ref>. An architecture is the way the parts work together to make the whole. The way architectures are notated, applied, and discovered are all topics of active research. A closely related idea inside the object community is that of "framework" [Deutsch89] [Johnson88].
Reference: [Johnson88] <author> Ralph E. </author> <title> Johnson and Brian Foote,Designing Reusable Classes Journal of ObjectOriented Programming, </title> <booktitle> 1(2) </booktitle> <pages> 22-25, </pages> <year> 1988. </year>
Reference-contexts: An architecture is the way the parts work together to make the whole. The way architectures are notated, applied, and discovered are all topics of active research. A closely related idea inside the object community is that of "framework" [Deutsch89] <ref> [Johnson88] </ref>. A framework is the reusable design of a system or a part of a system expressed as a set of abstract classes and the way instances of (subclasses of) those classes collaborate.
Reference: [Johnson92] <author> Ralph E. Johnson, </author> <title> "Documenting Frameworks with Patterns" OOPSLA '92 Proceedings, </title> <journal> SIGPLAN Notices, </journal> <pages> 27(10): </pages> <address> 63-76,Vancouver BC, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: HotDraw The architecture that is derived is that of HotDraw, a framework for structured graphics editors. A previous paper presented a set of patterns for using HotDraw <ref> [Johnson92] </ref>. In contrast, this paper describes the patterns that create HotDraw. Patterns can be used at many levels, and what is derived at one level can be considered a basic pattern at another level.
Reference: [Kerth88] <author> Norman Kerth, John Hogg, Lynn Stein, and Harry Porter, </author> <title> "Summary of Discussions from OOPSLA-87's Methodology and OOP Workshop", OOPSLA'87: Addendum to the Proceedings, </title> <journal> printed as SIGPLAN Notices, </journal> <volume> 23(5), </volume> <pages> pp. 9-16, </pages> <year> 1988. </year>
Reference-contexts: Box 226, Boulder Creek CA 96006 email: 70761.1216@compuserve.com, Ralph Johnson, Department of Computer Science, 1304 W. Springfield Ave., Urbana IL 61801 email: johnson @cs.uiuc.edu To be presented at ECOOP'94 2 patterns of relationships between objects as the building-blocks of larger architectures [Coad92] [Gamma93]. Our original interest in patterns <ref> [Kerth88] </ref> was sparked by the work of an architect, Christopher Alexander, whose patterns encode knowledge of the design and construction of communities and buildings [Alexander77] [Alexander79]. His use of the word "pattern" takes on more meaning than the usual dictionary definition.
Reference: [Krasner88] <author> Glenn E. Krasner and Stephen T. </author> <title> Pope,A Cookbook for Using the Model-View Controller User Interface Paradigm in Smalltalk-80, </title> <journal> Journal of ObjectOriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <year> 1988. </year>
Reference-contexts: User interface The first problem to solve is getting the drawing on the screen so it can be displayed and manipulated. The following pattern tells us that we need to divide the responsibilities between three objects. Model-View-Controller <ref> [Krasner88] </ref> Preconditions A system is going to have a graphical user-interface. Problem Graphical user-interfaces can be hard to build. Users demand programs that are easy to use, easy to learn, and powerful, and a good user interface is necessary to achieve these goals.
Reference: [Helm90] <author> Richard Helm and Ian M. Holland and Dipayan Gangopadhyay, </author> <title> Contracts: Specifying Behavioral Compositions in ObjectOriented Systems, </title> <booktitle> OOPSLA '90 Proceedings, SIGPLAN Notices, 25(10), </booktitle> <address> pp.169-180,Vancouver BC, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: It explains exactly why each was created and what problem it solves. Presented this way, HotDraw becomes much easier to re-implement, or to modify should circumstances so warrant. This is a completely different approach to describing the design of a framework than more formal approaches like Contracts <ref> [Helm90] </ref> The more formal results only explain what the design is, but a pattern-based derivation explains why. We didn't choose these patterns by chance.
Reference: [Parnas86] <author> David L. </author> <title> Parnas and P.C. Clements "A Rational Design Process: How and Why to Fake It", </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> SE-12:2 February </month> <year> 1986. </year>
Reference-contexts: It gives reasons for the design decisions in HotDraw, which, as Parnas says, are not always the original reasons for these design decisions <ref> [Parnas86] </ref>. Thus, the derivation of HotDraw is a rationalization of HotDraw, and is only partly related to the history of its design. The purpose of this derivation, however, is not to show people how HotDraw was developed, but to let them understand it.
References-found: 15

