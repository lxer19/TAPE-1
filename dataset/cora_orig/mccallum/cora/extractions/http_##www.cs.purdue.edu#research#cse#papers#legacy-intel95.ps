URL: http://www.cs.purdue.edu/research/cse/papers/legacy-intel95.ps
Refering-URL: http://www.cs.purdue.edu/research/cse/pellpack/hrefs.html
Root-URL: http://www.cs.purdue.edu
Title: Parallel ELLPACK Elliptic PDE Solvers  
Author: E.N. Houstis, S.B. Kim, S. Markus, P. Wu, N.E. Houstis, A.C. Catlin, S. Weerawarana T. S. Papatheodorou 
Date: June 19, 1995  
Address: West Lafayette, IN 47907, USA.  Greece.  
Affiliation: Department of Computer Sciences Purdue University  CTI  
Abstract: Parallel ELLPACK [35, 61] is a machine independent problem solving environment (PSE) that supports PDE (partial differential equations) computing across many hardware platforms. In this paper we review parallel methodologies based on the "divide and conquer" computational paradigm and their infrastructure for solving general elliptic PDEs. Particularly, we describe those that have been implemented and tested in the parallel ELLPACK PSE. Moreover, we describe two parallel frameworks that allow the reuse of the discretization part of the sequential elliptic PDE solvers. Numerical results indicate the effectiveness of the reuse frameworks implemented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> A mimd implementation of a parallel euler solver for unstructured grids. </institution> <note> The Journal of Supercomputing, 6(0) 117-137, </note> <editor> V. Venkatakrishman and H. D. Simon and T. J. </editor> <publisher> Barth. </publisher>
Reference-contexts: Later, we review the proposed geometric and matrix decompositions to support this framework. This parallel framework has been used by many researchers to implement PDE based applications <ref> [1] </ref>, [20], [31], [46], [50], [58].
Reference: [2] <author> M. Al-Nasra and D. T. Nguyen. </author> <title> An algorithm for domain decomposition in finite element analysis. </title> <journal> Computers and Structures, </journal> 39(3/4):227-289, 1991. 
Reference-contexts: A well known such ordering scheme is the so called Reverse Cuthill-McKee [10], [25]. Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in <ref> [2] </ref>, [11], [12], [13], [17], [63]. Spectral Search Heuristics According to these search schemes the vertices V are visited (sorted) in the order defined by the size of the components of an eigenvector or combination of eigenvectors of the Laplacian matrix L (G) of the graph G.
Reference: [3] <author> C. Aykanat, F. Ozguner, F. Ercal, and P. Sadayappan. </author> <title> Iterative algorithms for solution of large sparse systems of linear equations on hypecubes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(12) </volume> <pages> 1554-1568, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: A comprehensive overview of the explicit matrix partitioning techniques and their performance evaluation can be found in [15]. Earlier results on the mapping of matrix system computations to parallel machines are reported in [27] and <ref> [3] </ref>. In section 4, we review a number of geometry partitioning strategies used to implicitly decompose the PDE matrix problem. 2.1.2 A Parallel Framework for Building New PDE Software pre-defined decomposed geometric and algebraic data structures and their interfaces. <p> One way to prevent this from happening is to follow a traversal order that is based on the degree of connectivity of the graph G. A well known such ordering scheme is the so called Reverse Cuthill-McKee [10], [25]. Other graph-based mapping heuristics and their performance are presented in <ref> [3] </ref> and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], [12], [13], [17], [63].
Reference: [4] <author> S. </author> <title> Baase. </title> <booktitle> Computer Algorithms: Introduction to design and analysis, </booktitle> <pages> pages 145-207. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year> <month> 9 </month>
Reference-contexts: For these schemes, the partitioning of G is equivalent to the construction of a traversal tree from graph G. Two well known neighborhood search schemes are based on depth-first search and breadth-first search <ref> [4] </ref>. If the traversal order scheme remains fixed for the entire mesh graph G, then the searching strategy is called strip-wise. In case the traversal order is allowed to change after the formulation of each subdomain D i , then the search is called domain-wise [17].
Reference: [5] <author> S. T. Barnard and H. D. Simon. </author> <title> A fast multilevel implementation of recursive spectral bisection for partitioning unstructured problems. </title> <booktitle> In Sixth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 711-718, </pages> <year> 1993. </year>
Reference-contexts: The elements L i;j (G) of L (G) are defined <ref> [5] </ref> to be +1 if (v i ; v j ) 2 E, d i if i = j, and 0 otherwise. These approaches depend on the choice of the eigenvector (s) of L (G). <p> RSB was found to be computationally very expensive. To improve its performance a multilevel version of RSB was developed [6]. Other spectral heuristics combining several eigenvectors with quadrisection and octasection implementations are proposed and discussed in [32]. The performance of spectral heuristics is presented in <ref> [5] </ref>, [6], [32], [63]. Coordinate Axis Splitting This is another class of enumerative schemes whose main characteristic is that they ignore the connectivity information of the mesh graph G. They are based on coordinate sorting and partitioning along cartesian, polar, and symmetric inertial axis of the graph G.
Reference: [6] <author> S.T. Barnard and H.D. Simon. </author> <title> A fast multilevel implementation of recursive spectral bisection for partiioning unstructures problems. </title> <type> Technical Report RNR-92-033, </type> <note> revised April 93, pp. 1-25., </note> <institution> NASA Ames Research Center, </institution> <year> 1993. </year>
Reference-contexts: A recursive implementation of this search scheme, referred to as recursive spectral bisection (RSB) based on Fiedler's eigenvector was introduced in [57]. RSB was found to be computationally very expensive. To improve its performance a multilevel version of RSB was developed <ref> [6] </ref>. Other spectral heuristics combining several eigenvectors with quadrisection and octasection implementations are proposed and discussed in [32]. The performance of spectral heuristics is presented in [5], [6], [32], [63]. <p> RSB was found to be computationally very expensive. To improve its performance a multilevel version of RSB was developed <ref> [6] </ref>. Other spectral heuristics combining several eigenvectors with quadrisection and octasection implementations are proposed and discussed in [32]. The performance of spectral heuristics is presented in [5], [6], [32], [63]. Coordinate Axis Splitting This is another class of enumerative schemes whose main characteristic is that they ignore the connectivity information of the mesh graph G. They are based on coordinate sorting and partitioning along cartesian, polar, and symmetric inertial axis of the graph G.
Reference: [7] <author> H. Byun, E. N. Houstis, </author> <note> and S.Kortesis. </note>
Reference-contexts: Their application and modification for the partitioning of finite element mesh graph has been studied by several authors <ref> [7] </ref>, [24], [47], [62]. Although these techniques tend to generate more accurate solutions to the mesh partitioning problem, they also tend to be computationally very intensive [47], [62]. Similar computational behavior has been observed for the neural based heuristics.
Reference: [8] <author> T. Chan and R. S. Tuminaro. </author> <title> A survey of parallel multigrid algorithms. </title> <editor> In A. Noor, editor, </editor> <title> Parallel Computations and their Impact on Mechanics, </title> <journal> volume AMD-Vol. </journal> <volume> 86, </volume> <pages> pages 155-170. </pages> <publisher> Amer. Soc. Mech. Engr., </publisher> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Some of the parallelization approaches presented here are easily applicable to multi-level elliptic PDE solvers. An overview of parallel multi-level methods can be found in <ref> [8] </ref>, [9], [48]. The parallelization of adaptive elliptic PDE solvers is a much harder problem. A discussion of the issues and results related to parallel adaptive techniques for elliptic, parabolic and hyperbolic problem can be found in [22] and [23].
Reference: [9] <author> T.F. Chan and Y. Saad. </author> <title> Multigrid algorithms on the hypercube multiprocessor. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-35(11):969-977, </volume> <month> November </month> <year> 1986. </year>
Reference-contexts: Some of the parallelization approaches presented here are easily applicable to multi-level elliptic PDE solvers. An overview of parallel multi-level methods can be found in [8], <ref> [9] </ref>, [48]. The parallelization of adaptive elliptic PDE solvers is a much harder problem. A discussion of the issues and results related to parallel adaptive techniques for elliptic, parabolic and hyperbolic problem can be found in [22] and [23].
Reference: [10] <author> W. M. Chan and A. George. </author> <title> A linear time implementation of the Reverse Cuthill-McKee algorithm. </title> <journal> BIT, </journal> <volume> 20(0) </volume> <pages> 8-14, </pages> <year> 1980. </year>
Reference-contexts: One way to prevent this from happening is to follow a traversal order that is based on the degree of connectivity of the graph G. A well known such ordering scheme is the so called Reverse Cuthill-McKee <ref> [10] </ref>, [25]. Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], [12], [13], [17], [63].
Reference: [11] <author> N. P. Chrisochoides, M. Aboelaze, E. N. Houstis, and C. E. Houstis. </author> <title> The parallelization of some level 2 and 3 blas operations on distributed-memory machines. </title> <booktitle> In Advances in Computer Methods for Partial Differential Equations, </booktitle> <pages> pages 127-133. IMACS, </pages> <year> 1992. </year>
Reference-contexts: An overview of the various parallel solution strategies proposed for handling the interface and interior equations can be found in [18].The simplest of these parallel strategies calls for the implementation of efficient sequential algebraic solvers on the framework data structures through the use of parallel sparse BLAS <ref> [11] </ref> that employ message passing primitives to exchange or accumulate interface quantities and carry out matrix-vector and vector-vector operations. The advantage of this approach is the fact that no new theory is required. <p> A well known such ordering scheme is the so called Reverse Cuthill-McKee [10], [25]. Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], <ref> [11] </ref>, [12], [13], [17], [63]. Spectral Search Heuristics According to these search schemes the vertices V are visited (sorted) in the order defined by the size of the components of an eigenvector or combination of eigenvectors of the Laplacian matrix L (G) of the graph G.
Reference: [12] <author> N. P. Chrisochoides, C. E. Houstis, S. K. Kortesis, E.N. Houstis, P. N. Papachiou, and J. R. Rice. </author> <title> Domain decomposer: A software tool for mapping pde computations to parallel machines. </title> <editor> In R.Glowinski et al., editor, </editor> <title> Domain decomposition methods for partial differential equations IV, </title> <address> pages 341-357. </address> <publisher> SIAM Publications, </publisher> <year> 1991. </year>
Reference-contexts: A well known such ordering scheme is the so called Reverse Cuthill-McKee [10], [25]. Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], <ref> [12] </ref>, [13], [17], [63]. Spectral Search Heuristics According to these search schemes the vertices V are visited (sorted) in the order defined by the size of the components of an eigenvector or combination of eigenvectors of the Laplacian matrix L (G) of the graph G. <p> The user can either modify interactively these decompositions or specify his own. A description of an earlier version of this system is presented in <ref> [12] </ref>. The current version supports both element and node wise partitionings using most of the heuristics described above. This tool is completely integrated with the parallel ELLPACK problem solving environment so it supports all the parallel discretization and solution modules currently available in //ELLPACK library.
Reference: [13] <author> N. P. Chrisochoides, C.E. Houstis, S.K. Kortesis E.N. Houstis, and J.R. Rice. </author> <title> Automatic Load Balanced Partitioning Strategies for PDE Computations. In E.N. </title> <editor> Houstis and D. Gannon, editors, </editor> <booktitle> Proceedings of International Conference on Supercomputing, </booktitle> <pages> pages 99-107, </pages> <address> Crete-Greece, 1989. </address> <publisher> ACM Press. </publisher>
Reference-contexts: A well known such ordering scheme is the so called Reverse Cuthill-McKee [10], [25]. Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], [12], <ref> [13] </ref>, [17], [63]. Spectral Search Heuristics According to these search schemes the vertices V are visited (sorted) in the order defined by the size of the components of an eigenvector or combination of eigenvectors of the Laplacian matrix L (G) of the graph G.
Reference: [14] <author> N. P. Chrisochoides, E. N. Houstis, and J. R Rice. </author> <title> Mapping algorithms and software environments for data parallel pde iterative solvers. </title> <journal> Journal of Distributed and Parallel Computing, </journal> <volume> 21(0) </volume> <pages> 75-95, </pages> <year> 1994. </year>
Reference-contexts: The mesh decomposition is usually defined in terms of several optimality criteria <ref> [14] </ref>, [18], [63]. <p> Several variation of this algorithm have been proposed in order to incorporate most of the mesh partitioning criteria. A detail review of these class of strategies together with the description of an efficient improvement of the K L algorithm for mesh/grid can be found in <ref> [14] </ref>. Some of these heuristics are available in the //ELLPACK system [36]. Stochastic optimization heuristics Another class of heuristics proposed for the approximation of the solution of the partitioning optimization problem is based on stochastic techniques such as simulated 8 annealing [42] and Hopfield neural networks [33].
Reference: [15] <author> C.Pommerell, M.Annaratone, and W. Fichtner. </author> <title> A set of new mapping and coloring heuristics for distributed-memory parallel processors. </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 13(1) </volume> <pages> 194-226, </pages> <year> 1992. </year>
Reference-contexts: The partitioning of the matrix problem can be obtained either explicitly by decomposing the matrix graph or implicitly by decomposing the discrete geometric data (i.e. mesh or grid). A comprehensive overview of the explicit matrix partitioning techniques and their performance evaluation can be found in <ref> [15] </ref>. Earlier results on the mapping of matrix system computations to parallel machines are reported in [27] and [3].
Reference: [16] <author> R.D. da Cunha and T.R. Hopkins. </author> <title> PIM 1.1: The parallel iterative methods package for systems of linear equations users guide (FORTRAN 77 version). </title> <type> Technical report, </type> <institution> Computing Laboratory, University of Kent at Canterbury, </institution> <year> 1993. </year>
Reference-contexts: A template for the implementation of PCG methods on a variety of machines is realized by the PIM 1.1 software system <ref> [16] </ref>.
Reference: [17] <author> C. Farhat. </author> <title> A simple and efficient automatic fem domain decomposer. </title> <journal> Computers and Structures, </journal> <volume> 28(5) </volume> <pages> 579-602, </pages> <year> 1988. </year>
Reference-contexts: If the traversal order scheme remains fixed for the entire mesh graph G, then the searching strategy is called strip-wise. In case the traversal order is allowed to change after the formulation of each subdomain D i , then the search is called domain-wise <ref> [17] </ref>. The optimality of these searching strategies depends on the starting vertex. It is usually selected as the one with minimum degree of connectivity that usually coincides with a boundary node or element. <p> Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], [12], [13], <ref> [17] </ref>, [63]. Spectral Search Heuristics According to these search schemes the vertices V are visited (sorted) in the order defined by the size of the components of an eigenvector or combination of eigenvectors of the Laplacian matrix L (G) of the graph G.
Reference: [18] <author> C. Farhat and H. D.Simon. </author> <title> TOP/DOMDEC a software tool for mesh partitioning and parallel processing. </title> <type> Technical Report RNR-93-011, </type> <institution> pp.1-28, NASA Ames Research Center, </institution> <year> 1993. </year>
Reference-contexts: The mesh decomposition is usually defined in terms of several optimality criteria [14], <ref> [18] </ref>, [63]. <p> The symmetry axis is obtained by computing the eigenvector corresponding to the largest eigenvalue of the inertia matrix I = A T A [62] where A is the matrix of the mesh coordinates. Implementations of these schemes and their variations are presented in <ref> [18] </ref>, [44] and [63]. Deterministic optimization heuristics The mesh partitioning problem can be formulated as a constrain or unconstrained optimization problem. This set of heuristics is applied to solve these associated optimization problems. The basis of most of them is the so called Kernighan and Lin algorithm (K L) [38]. <p> This tool is integrated with their own three dimensional finite element mesh generator and flow mechanics code. The Simulog tool allows the user to view the automatically obtained mesh decompositions and it uses primarily coordinate axis decomposition strategies. A third domain decomposition tool is the TOP/DOMDEC <ref> [18] </ref>. It offers several heuristic decomposition algorithms including Greedy, RCM, recursive RCM, principal inertial, recursive inertial, recursive graph bisection, RSB and MRB.
Reference: [19] <author> C. Farhat and M. Lesoinne. </author> <title> Automatic partitioning of unstructured meshes for the parallel solution of problems in computational mechanics. </title> <journal> International Journal for Numerical Methods in Engineering, </journal> <volume> 36(0) </volume> <pages> 745-764, </pages> <year> 1993. </year>
Reference-contexts: It is usually selected as the one with minimum degree of connectivity that usually coincides with a boundary node or element. It has been observed that this selection effects the bandwidth (w) of the coefficient of the associated finite element matrix. Moreover, it has been shown <ref> [19] </ref> that the maximum partitioning interface C is given by the relation C = (N s fl w)=N n . Another set of neighborhood search 7 heuristics are the ones used for bandwidth reduction of a matrix.
Reference: [20] <author> C. Farhat and E. Wilson. </author> <title> A new finite element concurrent computer program architecture. </title> <booktitle> Int. J. for Numerical Methods in engineering, </booktitle> <volume> 24(0) </volume> <pages> 1771-1792, </pages> <year> 1987. </year> <month> 10 </month>
Reference-contexts: Later, we review the proposed geometric and matrix decompositions to support this framework. This parallel framework has been used by many researchers to implement PDE based applications [1], <ref> [20] </ref>, [31], [46], [50], [58].
Reference: [21] <author> M. Fiedler. </author> <title> A property of eigenvectors of nonnegative symmetric matrices and its application to graph theory. </title> <journal> Czechoslovak Mathematical Journal, </journal> <volume> 25(100) </volume> <pages> 619-633, </pages> <year> 1975. </year>
Reference-contexts: The elements L i;j (G) of L (G) are defined [5] to be +1 if (v i ; v j ) 2 E, d i if i = j, and 0 otherwise. These approaches depend on the choice of the eigenvector (s) of L (G). Fiedler <ref> [21] </ref> observed that the second eigenvector of L represents a good measure of the connectivity of the graph G. A recursive implementation of this search scheme, referred to as recursive spectral bisection (RSB) based on Fiedler's eigenvector was introduced in [57]. RSB was found to be computationally very expensive.
Reference: [22] <author> J. Flaherty, M. Benantar, </author> <title> and M.S. Krishnamoorthy. Coloring Procedures for Finite Element Computation on Shared-Memory Parallel Computers. </title> <editor> In A. K. Noor, editor, </editor> <title> Adaptive, Multilevel, and Hierarchical Computational Strategies, </title> <booktitle> volume 157, </booktitle> <pages> pages 435-490, </pages> <address> New York, 1992. </address> <publisher> ASME. </publisher>
Reference-contexts: An overview of parallel multi-level methods can be found in [8], [9], [48]. The parallelization of adaptive elliptic PDE solvers is a much harder problem. A discussion of the issues and results related to parallel adaptive techniques for elliptic, parabolic and hyperbolic problem can be found in <ref> [22] </ref> and [23].
Reference: [23] <author> J. Flaherty, M. Benantar, C. Ozturan, M. S. Shephard, and B. K. Szymanski. </author> <title> Parallel computation in adaptive finite element analysis. In C.A. </title> <editor> Brebbia and M.H. Aliabadi, editors, </editor> <title> Chapter 7: Adaptive Finite Element and Boundary Element Methods, </title> <address> London, 1993. </address> <publisher> Elsevier Applied Science. </publisher>
Reference-contexts: An overview of parallel multi-level methods can be found in [8], [9], [48]. The parallelization of adaptive elliptic PDE solvers is a much harder problem. A discussion of the issues and results related to parallel adaptive techniques for elliptic, parabolic and hyperbolic problem can be found in [22] and <ref> [23] </ref>. The following discussion is focused on parallelization techniques that allow both to reuse existing ("legacy") PDE software parts and provide a template or framework to build new parallel PDE software. 2.1 Parallelization Methodologies for "Legacy" Elliptic PDE Software There is significant state-of-the-art "legacy" software for elliptic and parabolic PDEs.
Reference: [24] <author> G.C. Fox. </author> <title> A review of automatic load balancing and decomposition methods for the hypercube. </title> <editor> In M. Schultz, editor, </editor> <booktitle> IMA Institute, </booktitle> <pages> pages 63-76. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Their application and modification for the partitioning of finite element mesh graph has been studied by several authors [7], <ref> [24] </ref>, [47], [62]. Although these techniques tend to generate more accurate solutions to the mesh partitioning problem, they also tend to be computationally very intensive [47], [62]. Similar computational behavior has been observed for the neural based heuristics.
Reference: [25] <author> A. George and J. W. H. Liu. </author> <title> Algorithms for matrix partitioning and the numerical solution of finite element systems. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 15(2) </volume> <pages> 297-327, </pages> <year> 1978. </year>
Reference-contexts: One way to prevent this from happening is to follow a traversal order that is based on the degree of connectivity of the graph G. A well known such ordering scheme is the so called Reverse Cuthill-McKee [10], <ref> [25] </ref>. Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], [12], [13], [17], [63].
Reference: [26] <author> A. George and J. W. H. Liu. </author> <title> An implementation of a pseudoperipheral node finder. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 5(3) </volume> <pages> 284-295, </pages> <year> 1979. </year>
Reference-contexts: Moreover, it has been shown [19] that the maximum partitioning interface C is given by the relation C = (N s fl w)=N n . Another set of neighborhood search 7 heuristics are the ones used for bandwidth reduction of a matrix. They have been used by several re-searchers <ref> [26] </ref> ,[28], [45], [51] to solve the mesh partitioning problem. One of the common disadvantages of the neighborhood searching strategies is that they often produce disconnected subdomains.
Reference: [27] <author> A. George and J. W. H. Liu. </author> <title> Algorithms for matrix partitioning and the numerical solution of finite element systems. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 15(2) </volume> <pages> 297-327, </pages> <month> April </month> <year> 1978. </year>
Reference-contexts: A comprehensive overview of the explicit matrix partitioning techniques and their performance evaluation can be found in [15]. Earlier results on the mapping of matrix system computations to parallel machines are reported in <ref> [27] </ref> and [3]. In section 4, we review a number of geometry partitioning strategies used to implicitly decompose the PDE matrix problem. 2.1.2 A Parallel Framework for Building New PDE Software pre-defined decomposed geometric and algebraic data structures and their interfaces.
Reference: [28] <author> N. E. Gibbs and J. W. G. Poole. </author> <title> An algorithm for reducing the bandwidth and profile of a sparse matrix. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 13(2) </volume> <pages> 236-250, </pages> <year> 1976. </year>
Reference: [29] <author> W. Gropp, E. Lusk, and A. Skjellum. </author> <title> Using MPI: Portable Parallel Programming with the Message-Passing Interface. </title> <publisher> MIT Press,, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: The current version of the parallel ELLPACK system includes a software tool to support this methodology for the "legacy" software listed in Table 2. The tool is self contained and can be used for any PDE software and virtual parallel machines supported by standards such as MPI <ref> [29] </ref>. The input to this tool consists of the linear system and a partitioning of the associated matrix. The partitioning of the matrix problem can be obtained either explicitly by decomposing the matrix graph or implicitly by decomposing the discrete geometric data (i.e. mesh or grid).
Reference: [30] <author> L. Gross, C. Roll, and W. Schoenauer. </author> <title> Vecfem for mixed finite elements. </title> <type> Technical Report Interner Bericht Nr. 50/93, </type> <institution> Rechenzentrum der Universitat Karlsruhe, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK [34, 35] FIDISOL [55] VECFEM <ref> [30] </ref> CADSOL [54] PDEONE [60] PDECOL [43] PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [31] <author> G.Yagawa, N. Soneda, and S.Yoshimura. </author> <title> A large scale finite element alalysis using domain decomposition method on a prallel computer. </title> <journal> Computers and structures, </journal> 38(5/6):615-625, 1991. 
Reference-contexts: Later, we review the proposed geometric and matrix decompositions to support this framework. This parallel framework has been used by many researchers to implement PDE based applications [1], [20], <ref> [31] </ref>, [46], [50], [58].
Reference: [32] <author> B. Hendrickson and R. Leland. </author> <title> An improved spectral load balancing method. </title> <booktitle> In Sixth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 953-961, </pages> <year> 1993. </year>
Reference-contexts: RSB was found to be computationally very expensive. To improve its performance a multilevel version of RSB was developed [6]. Other spectral heuristics combining several eigenvectors with quadrisection and octasection implementations are proposed and discussed in <ref> [32] </ref>. The performance of spectral heuristics is presented in [5], [6], [32], [63]. Coordinate Axis Splitting This is another class of enumerative schemes whose main characteristic is that they ignore the connectivity information of the mesh graph G. <p> RSB was found to be computationally very expensive. To improve its performance a multilevel version of RSB was developed [6]. Other spectral heuristics combining several eigenvectors with quadrisection and octasection implementations are proposed and discussed in <ref> [32] </ref>. The performance of spectral heuristics is presented in [5], [6], [32], [63]. Coordinate Axis Splitting This is another class of enumerative schemes whose main characteristic is that they ignore the connectivity information of the mesh graph G. They are based on coordinate sorting and partitioning along cartesian, polar, and symmetric inertial axis of the graph G.
Reference: [33] <author> J. J. </author> <title> Hopfield. Neural networks and physical systems with emergent collective abilities. </title> <booktitle> Proc. </booktitle> <institution> Natl. Acad. Sci. USA, </institution> <month> 79 </month> <pages> 2554-2558, </pages> <year> 1982. </year>
Reference-contexts: Some of these heuristics are available in the //ELLPACK system [36]. Stochastic optimization heuristics Another class of heuristics proposed for the approximation of the solution of the partitioning optimization problem is based on stochastic techniques such as simulated 8 annealing [42] and Hopfield neural networks <ref> [33] </ref>. Their application and modification for the partitioning of finite element mesh graph has been studied by several authors [7], [24], [47], [62]. Although these techniques tend to generate more accurate solutions to the mesh partitioning problem, they also tend to be computationally very intensive [47], [62].
Reference: [34] <author> E. N. Houstis, T. S. Papatheodorou, and J. R. Rice. </author> <title> Parallel ELLPACK: An expert system for the parallel processing of partial differential equations. </title> <booktitle> In Intelligent Mathematical Software Systems, </booktitle> <pages> pages 63-73. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK <ref> [34, 35] </ref> FIDISOL [55] VECFEM [30] CADSOL [54] PDEONE [60] PDECOL [43] PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [35] <author> E. N. Houstis and J. R. Rice. </author> <title> Parallel ellpack: A development and problem solving environment for high performance computing machines. </title> <editor> In P. W. Gaffney and E. N. Houstis, editors, </editor> <booktitle> Programming Environments for High-Level Scientific Problem Solving, </booktitle> <pages> pages 229-241. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK <ref> [34, 35] </ref> FIDISOL [55] VECFEM [30] CADSOL [54] PDEONE [60] PDECOL [43] PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation. <p> The advantage of this approach is the fact that no new theory is required. Such parallel PDE solvers based on certain instances of finite difference and finite element schemes for elliptic PDEs can be found in //ELLPACK system [36], <ref> [35] </ref>. These PDE solvers are described in [40] together with their performance evaluation.
Reference: [36] <author> E. N. Houstis, J. R. Rice, N. P. Chrisochoides, H. C. Karathanasis, P. N. Papachiou, M. K. Samartzis, E. A. Vavalis, K. Y. Wang, and S. Weerawarana. </author> <title> Ellpack: A numerical simulation programming environment for parallel mimd machines. </title> <editor> In D. Marinescu and R. Frost, editors, </editor> <booktitle> International Conference on Supercomputing, </booktitle> <pages> pages 96-107, </pages> <address> Amsderdam, June 1990. </address> <publisher> ACM Press NY. </publisher>
Reference-contexts: In this article we review the parallelization techniques proposed for the second class of PDE software. Table 1 lists some of the public domain "legacy" software that is available in the parallel ELLPACK system <ref> [36] </ref>. It's worth reminding the reader that the majority of the code of each PDE system is implementing the geometric and the PDE model discretization phases. This tends to be the most knowledge intensive part of the code. <p> Solution graphical display O (N ) High Specialized hardware Table 2: The complexity of the elliptic PDE software parts and an estimate of the parallelization effort needed to implement them in some parallel environment, where N denotes the size of the discrete problem was used for developing general PDE software <ref> [36] </ref>. The parallel PDE solvers implemented on the above framework are distinguished primarily by the way they handle the interface equations and unknowns. <p> The advantage of this approach is the fact that no new theory is required. Such parallel PDE solvers based on certain instances of finite difference and finite element schemes for elliptic PDEs can be found in //ELLPACK system <ref> [36] </ref>, [35]. These PDE solvers are described in [40] together with their performance evaluation. <p> A detail review of these class of strategies together with the description of an efficient improvement of the K L algorithm for mesh/grid can be found in [14]. Some of these heuristics are available in the //ELLPACK system <ref> [36] </ref>. Stochastic optimization heuristics Another class of heuristics proposed for the approximation of the solution of the partitioning optimization problem is based on stochastic techniques such as simulated 8 annealing [42] and Hopfield neural networks [33].
Reference: [37] <author> W. Joubert and G. F. Carey. </author> <title> Pcg: A software package for the iterative solution of linear systems on scalar, vector and parallel computers. </title> <booktitle> In Proceedings of 14thIMACS World Congress on Computational and Applied Mathematics, </booktitle> <volume> volume 1, </volume> <pages> pages 247-250, </pages> <address> Atlanta, </address> <year> 1994. </year> <month> 11 </month>
Reference-contexts: It contains parallel PCG based solvers for symmetric and non-symmetric systems for MIMD machines.The system is integrated in //ELLPACK. Another PCG based software system for solving systems of sparse linear algebraic equations methods on a variety of computer architectures is reported in <ref> [37] </ref>. This software is designed to give high performance with nearly identical user interface across different scalar, vector and parallel platforms as well as across different programming models such as shared memory, data parallel and message passing programming interfaces.
Reference: [38] <author> B. W. Kernigham and S. Lin. </author> <title> An efficient heuristic procedure for partitioning graphs. </title> <journal> The Bell System Technical Journal, </journal> <volume> 49(2) </volume> <pages> 291-307, </pages> <month> February </month> <year> 1970. </year>
Reference-contexts: Deterministic optimization heuristics The mesh partitioning problem can be formulated as a constrain or unconstrained optimization problem. This set of heuristics is applied to solve these associated optimization problems. The basis of most of them is the so called Kernighan and Lin algorithm (K L) <ref> [38] </ref>. Several variation of this algorithm have been proposed in order to incorporate most of the mesh partitioning criteria. A detail review of these class of strategies together with the description of an efficient improvement of the K L algorithm for mesh/grid can be found in [14].
Reference: [39] <author> S. Kim, E. N. Houstis, and J. R. Rice. </author> <title> Parallel stationary iterative methods and their performance. </title> <editor> In D. Marinescu and R. Frost, editors, </editor> <booktitle> INTEL supercomputer users group conference, </booktitle> <address> San Diego, </address> <year> 1994. </year>
Reference-contexts: One class of such solvers consists of the classical stationary iterative methods. A software system realizing these solvers on portable message passing interface for solving sparse systems arising from finite element and difference approximations is the //ITPACK <ref> [39] </ref>. The system consists of seven modules implementing SOR, Jacobi-CG, Jacobi-SI, RSCG, RSSI, SSOR-CG and SSOR-SI under different indexing schemes [41] and it is integrated in the //ELLPACK system. <p> This problem was discretized by a linear finite element method (FEM) based on triangular meshes and the system of the discrete equations was solved by JACOBI-CG parallel ITPACK solver <ref> [39] </ref>.
Reference: [40] <author> Sang-Bae Kim. </author> <title> Parallel Numerical Methods for Partial Differential Equations. </title> <type> Ph.D. Thesis, </type> <institution> 1993, Department of Mathematics, Purdue University. </institution> <type> Technical Report CSD-TR-94-000, </type> <institution> pp.1-00, Purdue University, Computer Science, </institution> <year> 1993. </year>
Reference-contexts: The advantage of this approach is the fact that no new theory is required. Such parallel PDE solvers based on certain instances of finite difference and finite element schemes for elliptic PDEs can be found in //ELLPACK system [36], [35]. These PDE solvers are described in <ref> [40] </ref> together with their performance evaluation. <p> The system consists of seven modules implementing SOR, Jacobi-CG, Jacobi-SI, RSCG, RSSI, SSOR-CG and SSOR-SI under different indexing schemes [41] and it is integrated in the //ELLPACK system. The code is based on the sequential version of ITPACK which was parallelized by utilizing a subset of sparse BLAS routines <ref> [40] </ref>. The interfaces of the parallel modules, the assumed data structures and its performance on several MIMD machines are presented in [40]. The system has been proven to be very efficient for elliptic PDEs. Another class of iterative solvers are based on preconditioning 5 conjugate gradient (PCG) method. <p> The code is based on the sequential version of ITPACK which was parallelized by utilizing a subset of sparse BLAS routines <ref> [40] </ref>. The interfaces of the parallel modules, the assumed data structures and its performance on several MIMD machines are presented in [40]. The system has been proven to be very efficient for elliptic PDEs. Another class of iterative solvers are based on preconditioning 5 conjugate gradient (PCG) method. Several realizations exist in public domain. One such system is the MPPCGPACK. <p> The problem of graph partitioning based only on the first two criteria has been extensively studied and found to be "hard". Thus, most of the proposed partitioning strategies are approximate (i.e. heuristic) in nature. These heuristics have been found to be very costly even for moderate size PDE problems <ref> [40] </ref>. Two "fast" alternative strategies have been formulated for grid [40] and mesh [63] respectively which we review later. 5.1 General Mesh Partitioning Heuristics First, we discuss a set of well known and tested heuristics for the automatic partitioning of meshes subject to the above listed optimality criteria and review some <p> Thus, most of the proposed partitioning strategies are approximate (i.e. heuristic) in nature. These heuristics have been found to be very costly even for moderate size PDE problems <ref> [40] </ref>. Two "fast" alternative strategies have been formulated for grid [40] and mesh [63] respectively which we review later. 5.1 General Mesh Partitioning Heuristics First, we discuss a set of well known and tested heuristics for the automatic partitioning of meshes subject to the above listed optimality criteria and review some software tools available to assist the PDE geometric data decomposition. <p> The user interface includes three-dimensional graphics, a parallel simulator, and an output function with parallel I/O data structures. 5.2 Fast Grid/Mesh Partitioning Heuristics It has been observed that the decomposition of fine meshes can be very costly. In <ref> [40] </ref>, it is reported that a 64-way MRSB partitioning of 150x150 finite difference grid of an L-shaped domain requires half of the time to solve the corresponding 5-point difference equations obtained from the discretization of a model PDE problem using Jacobi-CG on a single processor. <p> Instead of solving the exact partitioning problem, it is proposed in <ref> [40] </ref> to extend the matrix problem in the entire rectangular overlaying grid used to generate the actual grid, by an identity matrix and solve the modified problem in parallel using the decomposition of the overlayed rectangular grid. This method is referred to as an encapsulation approach. <p> This method is referred to as an encapsulation approach. Numerical results indicate that this approach outperforms all the ones that are based on the partitioning of the exact grid <ref> [40] </ref>. Unfortunately, this approach can not be generalized for finite element meshes. A natural "fast" alternative for mesh decomposition is to integrate the mesh generation and the partitioning steps [63] and implement them in parallel.
Reference: [41] <author> D. Kinkaid, J. Respess, and R. Grimes. </author> <title> Algorithm 586: Itpack 2c: A fortran package for solving large linear systems by adaptive accelerated iterative methods. </title> <journal> ACM Tran. Math. Soft., </journal> <volume> 8(0) </volume> <pages> 302-322, </pages> <year> 1982. </year>
Reference-contexts: A software system realizing these solvers on portable message passing interface for solving sparse systems arising from finite element and difference approximations is the //ITPACK [39]. The system consists of seven modules implementing SOR, Jacobi-CG, Jacobi-SI, RSCG, RSSI, SSOR-CG and SSOR-SI under different indexing schemes <ref> [41] </ref> and it is integrated in the //ELLPACK system. The code is based on the sequential version of ITPACK which was parallelized by utilizing a subset of sparse BLAS routines [40].
Reference: [42] <author> S. Kirkpatrick, J. C. D. Gelatt, and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220(4598) </volume> <pages> 671-680, </pages> <year> 1983. </year>
Reference-contexts: Some of these heuristics are available in the //ELLPACK system [36]. Stochastic optimization heuristics Another class of heuristics proposed for the approximation of the solution of the partitioning optimization problem is based on stochastic techniques such as simulated 8 annealing <ref> [42] </ref> and Hopfield neural networks [33]. Their application and modification for the partitioning of finite element mesh graph has been studied by several authors [7], [24], [47], [62].
Reference: [43] <institution> N.K. Madsen (Lawrence Livermore Laboratories) and R.F. Sincovec (Kansas State University). </institution> <note> Algorithm 540: </note> <editor> Pdecol, </editor> <title> general sollocation software for partial differential equations. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 5(3) </volume> <pages> 326-351, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK [34, 35] FIDISOL [55] VECFEM [30] CADSOL [54] PDEONE [60] PDECOL <ref> [43] </ref> PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [44] <author> M. Loriot and L. Fezoui. </author> <title> Mesh-splitting preprocessor. </title> <type> Technical Report unpublished manuscript, </type> <institution> Simulog Inc, </institution> <year> 1989. </year>
Reference-contexts: Following we review the underlying ideas of these strategies. Cartesian axis splitting: In these schemes the cartesian coordinates of the mesh nodes or the element center of mass are sorted and split along each axis. There exist non-recursive and recursive implementations in both strip-wise and domain-wise form <ref> [44] </ref>, [63]. In the case of recursive schemes the bisection direction can vary for each recursive step. One can choose this direction by splitting along the longest expansion which can be easily determined [44]. <p> There exist non-recursive and recursive implementations in both strip-wise and domain-wise form <ref> [44] </ref>, [63]. In the case of recursive schemes the bisection direction can vary for each recursive step. One can choose this direction by splitting along the longest expansion which can be easily determined [44]. An alternative implementation is the one that compares the communication cost of the produced partitioning in both possible directions and chooses the one corresponding to less cost. Polar/spherical axis splitting: The basic idea is similar to cartesian axis splitting schemes. <p> In addition to the available options in cartesian axis splitting schemes, the origin point can be selected as either center of inertia or center of mass. An implementation of this scheme is described in <ref> [44] </ref>. Due to the periodicity of the cartesian to polar coordinates transformations, these schemes can produce, with high probability, disconnected subdomains. In [63] an implementation of this scheme is reported that avoids the above shortcoming by appropriate angle shifting. <p> In [63] an implementation of this scheme is reported that avoids the above shortcoming by appropriate angle shifting. Inertia axis splitting: This scheme first computes the main symmetry axis from the node coordinates of the mesh or the coordinates of element mass <ref> [44] </ref>. Then, it splits the domain into several subdomains along this axis. It repeats this step until the predefined number of subdomains is reached. <p> The symmetry axis is obtained by computing the eigenvector corresponding to the largest eigenvalue of the inertia matrix I = A T A [62] where A is the matrix of the mesh coordinates. Implementations of these schemes and their variations are presented in [18], <ref> [44] </ref> and [63]. Deterministic optimization heuristics The mesh partitioning problem can be formulated as a constrain or unconstrained optimization problem. This set of heuristics is applied to solve these associated optimization problems. The basis of most of them is the so called Kernighan and Lin algorithm (K L) [38]. <p> This tool is completely integrated with the parallel ELLPACK problem solving environment so it supports all the parallel discretization and solution modules currently available in //ELLPACK library. A similar tool has been developed by Simulog Inc. <ref> [44] </ref>. This tool is integrated with their own three dimensional finite element mesh generator and flow mechanics code. The Simulog tool allows the user to view the automatically obtained mesh decompositions and it uses primarily coordinate axis decomposition strategies. A third domain decomposition tool is the TOP/DOMDEC [18].
Reference: [45] <author> J. Malone. </author> <title> Automated mesh decomposition and concurrent finite element analysis for hypercube multiprocessor computers. </title> <booktitle> Computer Methods in Applied Mechanics and Engineering, </booktitle> <volume> 79(0) </volume> <pages> 27-58, </pages> <year> 1988. </year>
Reference-contexts: Another set of neighborhood search 7 heuristics are the ones used for bandwidth reduction of a matrix. They have been used by several re-searchers [26] ,[28], <ref> [45] </ref>, [51] to solve the mesh partitioning problem. One of the common disadvantages of the neighborhood searching strategies is that they often produce disconnected subdomains. One way to prevent this from happening is to follow a traversal order that is based on the degree of connectivity of the graph G.
Reference: [46] <author> J.G. Malone. </author> <title> Automated mesh decomposition and concurrent finite element analysis for hypercube multiprocessor computers. </title> <booktitle> Computer methods in applied mechanics and engineering, </booktitle> <volume> 70(0) </volume> <pages> 27-58, </pages> <year> 1988. </year>
Reference-contexts: Later, we review the proposed geometric and matrix decompositions to support this framework. This parallel framework has been used by many researchers to implement PDE based applications [1], [20], [31], <ref> [46] </ref>, [50], [58].
Reference: [47] <author> N. Mansur. </author> <title> Physical optimization algorithms for mapping data to distributed-memory multiprocessors, </title> <type> phd thesis. Technical Report CRPC-TR92229, </type> <institution> Syracuse University, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: Their application and modification for the partitioning of finite element mesh graph has been studied by several authors [7], [24], <ref> [47] </ref>, [62]. Although these techniques tend to generate more accurate solutions to the mesh partitioning problem, they also tend to be computationally very intensive [47], [62]. Similar computational behavior has been observed for the neural based heuristics. <p> Their application and modification for the partitioning of finite element mesh graph has been studied by several authors [7], [24], <ref> [47] </ref>, [62]. Although these techniques tend to generate more accurate solutions to the mesh partitioning problem, they also tend to be computationally very intensive [47], [62]. Similar computational behavior has been observed for the neural based heuristics. Software tools for mesh/grid decomposition Several tools have been developed to incorporate the above algorithmic infrastructure.
Reference: [48] <author> O. A. McBryan, P. O. Frederickson, J. Linden, A. Schueller, K. Solchenbach, K. Stueben, C.-A. Thole, and U. Trottenberg. </author> <title> Multigrid methods on parallel computers a survey of recent developments. Impact Comput. </title> <journal> Sci. Eng., </journal> <volume> 3 </volume> <pages> 1-75, </pages> <year> 1991. </year>
Reference-contexts: Some of the parallelization approaches presented here are easily applicable to multi-level elliptic PDE solvers. An overview of parallel multi-level methods can be found in [8], [9], <ref> [48] </ref>. The parallelization of adaptive elliptic PDE solvers is a much harder problem. A discussion of the issues and results related to parallel adaptive techniques for elliptic, parabolic and hyperbolic problem can be found in [22] and [23].
Reference: [49] <author> W. F. Mitchell. </author> <title> Adaptive refinement for arbitrary finite element spaces with hierarchical bases. </title> <journal> J. Computational and Applied Math., </journal> <volume> 36 </volume> <pages> 65-78, </pages> <year> 1991. </year>
Reference-contexts: The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK [34, 35] FIDISOL [55] VECFEM [30] CADSOL [54] PDEONE [60] PDECOL [43] PDETWO [59] MGGHAT <ref> [49] </ref> Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [50] <author> B. Nour-Omid, A. Raefsky, and G. Lyzenga. </author> <title> Solving finite element equations on concurrent computers. </title> <editor> In A. Noor, editor, </editor> <booktitle> Parallel computations and their impact on mechanics, </booktitle> <pages> pages 209-226, </pages> <year> 1987. </year>
Reference-contexts: Later, we review the proposed geometric and matrix decompositions to support this framework. This parallel framework has been used by many researchers to implement PDE based applications [1], [20], [31], [46], <ref> [50] </ref>, [58].
Reference: [51] <author> S. Pissanetsky. </author> <title> Ordering for Gauss elimination: Symmetry matrices, </title> <booktitle> Sparse Matrix Technology, </booktitle> <pages> pages 94-158. </pages> <publisher> Academic Press, </publisher> <address> Orlando, </address> <year> 1984. </year>
Reference-contexts: Another set of neighborhood search 7 heuristics are the ones used for bandwidth reduction of a matrix. They have been used by several re-searchers [26] ,[28], [45], <ref> [51] </ref> to solve the mesh partitioning problem. One of the common disadvantages of the neighborhood searching strategies is that they often produce disconnected subdomains. One way to prevent this from happening is to follow a traversal order that is based on the degree of connectivity of the graph G.
Reference: [52] <author> J. R. Rice and R. F. Boisvert. </author> <title> Solving elliptic problems using ELLPACK. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK <ref> [52] </ref> //ELLPACK [34, 35] FIDISOL [55] VECFEM [30] CADSOL [54] PDEONE [60] PDECOL [43] PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [53] <author> P. Sadayappan and F. Ercal. </author> <title> Nearest-neighbor mapping of finite element graphs onto processor meshes. </title> <journal> IEEE Transactions on computers, </journal> <volume> C-36(12):1408-1424, </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: A well known such ordering scheme is the so called Reverse Cuthill-McKee [10], [25]. Other graph-based mapping heuristics and their performance are presented in [3] and <ref> [53] </ref>. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], [12], [13], [17], [63].
Reference: [54] <author> M. Schmauder, R. Weiss, and W. Schoenauer. </author> <title> The cadsol program package. </title> <type> Technical Report Interner Bericht Nr. 46/92, </type> <institution> Rechenzentrum der Universitat Karlsruhe, </institution> <month> April </month> <year> 1992. </year> <month> 12 </month>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK [34, 35] FIDISOL [55] VECFEM [30] CADSOL <ref> [54] </ref> PDEONE [60] PDECOL [43] PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [55] <author> W. Schoenauer, E. Schnepf, and H. Mueller. </author> <title> The fidisol program package. </title> <type> Technical Report Interner Bericht Nr. 27/85, </type> <institution> Rechenzentrum der Universitat Karlsruhe, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK [34, 35] FIDISOL <ref> [55] </ref> VECFEM [30] CADSOL [54] PDEONE [60] PDECOL [43] PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [56] <author> J.N. </author> <title> Shadid and R.S. Tuminaro. Sparse iterative algorithm software for large scale MIMD machines: an initial discussion and implementation. </title> <journal> Concurrency: practice and experience, </journal> <volume> 4(6) </volume> <pages> 481-497, </pages> <year> 1992. </year>
Reference-contexts: The system has been proven to be very efficient for elliptic PDEs. Another class of iterative solvers are based on preconditioning 5 conjugate gradient (PCG) method. Several realizations exist in public domain. One such system is the MPPCGPACK. Its modules are described in <ref> [56] </ref> together with their performance evaluation on 1024 nCUBE II machine. The software is commercially available through Scientific Associates Inc. It contains parallel PCG based solvers for symmetric and non-symmetric systems for MIMD machines.The system is integrated in //ELLPACK.
Reference: [57] <author> H. D. Simon. </author> <title> Partioning of unstructured problems for parallel processing. </title> <journal> Computing Systems in Engineering, </journal> 2(2/3):135-148, 1991. 
Reference-contexts: Fiedler [21] observed that the second eigenvector of L represents a good measure of the connectivity of the graph G. A recursive implementation of this search scheme, referred to as recursive spectral bisection (RSB) based on Fiedler's eigenvector was introduced in <ref> [57] </ref>. RSB was found to be computationally very expensive. To improve its performance a multilevel version of RSB was developed [6]. Other spectral heuristics combining several eigenvectors with quadrisection and octasection implementations are proposed and discussed in [32]. The performance of spectral heuristics is presented in [5], [6], [32], [63].
Reference: [58] <author> P. Le Tallec, Y. H. De Roeck, and M. Vidrascu. </author> <title> Domain decomposition methods for large linearly elliptic three-dimensional problems. </title> <journal> J. Computational and Applied Math., </journal> <volume> 34 </volume> <pages> 93-117, </pages> <year> 1991. </year>
Reference-contexts: Later, we review the proposed geometric and matrix decompositions to support this framework. This parallel framework has been used by many researchers to implement PDE based applications [1], [20], [31], [46], [50], <ref> [58] </ref>.
Reference: [59] <author> David K. Melgaard (Kansas State University) and Richard F. </author> <title> Sincovec (Boeing Computer Services Company). General software for two-dimensional nonlinear partial differential equations. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 7(1) </volume> <pages> 106-125, </pages> <month> March </month> <year> 1981. </year>
Reference-contexts: The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK [34, 35] FIDISOL [55] VECFEM [30] CADSOL [54] PDEONE [60] PDECOL [43] PDETWO <ref> [59] </ref> MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [60] <editor> Richard F. Sincovec (Kansas State University) and Niel K. Madsen (Lawrence Livermore Laboratories). </editor> <title> Software for nonlinear partial differential equations. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 1(3) </volume> <pages> 232-260, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: Figure 1 depicts these three decompositions approaches for a two dimensional region and message passing computational paradigm. The two left most paths in Figure 1 depict methodologies that support the reuse requirement. 2 Name Reference ELLPACK [52] //ELLPACK [34, 35] FIDISOL [55] VECFEM [30] CADSOL [54] PDEONE <ref> [60] </ref> PDECOL [43] PDETWO [59] MGGHAT [49] Table 1: PDEpack: Public domain "legacy" PDE software The third path provides a framework to develop new customized parallel code for the discretization part of the PDE computation.
Reference: [61] <author> S. Weerawarana, E.N. Houstis, A.C. Catlin, and J.R. Rice. </author> <title> //ellpack: A system for simulating partial differential equations. </title> <booktitle> In Proceedings of IASTED International Conference on Modelling and Simulation, </booktitle> <year> 1995. </year> <note> to appear. </note>
Reference: [62] <author> R. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency: Practice and experience, </journal> <volume> 3(5) </volume> <pages> 457-481, </pages> <year> 1992. </year>
Reference-contexts: Then, it splits the domain into several subdomains along this axis. It repeats this step until the predefined number of subdomains is reached. The symmetry axis is obtained by computing the eigenvector corresponding to the largest eigenvalue of the inertia matrix I = A T A <ref> [62] </ref> where A is the matrix of the mesh coordinates. Implementations of these schemes and their variations are presented in [18], [44] and [63]. Deterministic optimization heuristics The mesh partitioning problem can be formulated as a constrain or unconstrained optimization problem. <p> Their application and modification for the partitioning of finite element mesh graph has been studied by several authors [7], [24], [47], <ref> [62] </ref>. Although these techniques tend to generate more accurate solutions to the mesh partitioning problem, they also tend to be computationally very intensive [47], [62]. Similar computational behavior has been observed for the neural based heuristics. <p> Their application and modification for the partitioning of finite element mesh graph has been studied by several authors [7], [24], [47], <ref> [62] </ref>. Although these techniques tend to generate more accurate solutions to the mesh partitioning problem, they also tend to be computationally very intensive [47], [62]. Similar computational behavior has been observed for the neural based heuristics. Software tools for mesh/grid decomposition Several tools have been developed to incorporate the above algorithmic infrastructure.
Reference: [63] <author> P. Wu and E. N. Houstis. </author> <title> Parallel mesh generation and decomposition. </title> <booktitle> Computer Systems in Engineering, (CSD-TR-93-075, </booktitle> <pages> pp. 1-49), </pages> <year> 1994. </year> <month> 13 </month>
Reference-contexts: The mesh decomposition is usually defined in terms of several optimality criteria [14], [18], <ref> [63] </ref>. <p> Thus, most of the proposed partitioning strategies are approximate (i.e. heuristic) in nature. These heuristics have been found to be very costly even for moderate size PDE problems [40]. Two "fast" alternative strategies have been formulated for grid [40] and mesh <ref> [63] </ref> respectively which we review later. 5.1 General Mesh Partitioning Heuristics First, we discuss a set of well known and tested heuristics for the automatic partitioning of meshes subject to the above listed optimality criteria and review some software tools available to assist the PDE geometric data decomposition. <p> Other graph-based mapping heuristics and their performance are presented in [3] and [53]. Various implementation of these heuristics for finite element meshes and grids together with their performance evaluation are reported in [2], [11], [12], [13], [17], <ref> [63] </ref>. Spectral Search Heuristics According to these search schemes the vertices V are visited (sorted) in the order defined by the size of the components of an eigenvector or combination of eigenvectors of the Laplacian matrix L (G) of the graph G. <p> RSB was found to be computationally very expensive. To improve its performance a multilevel version of RSB was developed [6]. Other spectral heuristics combining several eigenvectors with quadrisection and octasection implementations are proposed and discussed in [32]. The performance of spectral heuristics is presented in [5], [6], [32], <ref> [63] </ref>. Coordinate Axis Splitting This is another class of enumerative schemes whose main characteristic is that they ignore the connectivity information of the mesh graph G. They are based on coordinate sorting and partitioning along cartesian, polar, and symmetric inertial axis of the graph G. <p> They are based on coordinate sorting and partitioning along cartesian, polar, and symmetric inertial axis of the graph G. A comprehensive evaluation of these heuristics is reported in <ref> [63] </ref>. Following we review the underlying ideas of these strategies. Cartesian axis splitting: In these schemes the cartesian coordinates of the mesh nodes or the element center of mass are sorted and split along each axis. There exist non-recursive and recursive implementations in both strip-wise and domain-wise form [44], [63]. <p> in <ref> [63] </ref>. Following we review the underlying ideas of these strategies. Cartesian axis splitting: In these schemes the cartesian coordinates of the mesh nodes or the element center of mass are sorted and split along each axis. There exist non-recursive and recursive implementations in both strip-wise and domain-wise form [44], [63]. In the case of recursive schemes the bisection direction can vary for each recursive step. One can choose this direction by splitting along the longest expansion which can be easily determined [44]. <p> An implementation of this scheme is described in [44]. Due to the periodicity of the cartesian to polar coordinates transformations, these schemes can produce, with high probability, disconnected subdomains. In <ref> [63] </ref> an implementation of this scheme is reported that avoids the above shortcoming by appropriate angle shifting. Inertia axis splitting: This scheme first computes the main symmetry axis from the node coordinates of the mesh or the coordinates of element mass [44]. <p> The symmetry axis is obtained by computing the eigenvector corresponding to the largest eigenvalue of the inertia matrix I = A T A [62] where A is the matrix of the mesh coordinates. Implementations of these schemes and their variations are presented in [18], [44] and <ref> [63] </ref>. Deterministic optimization heuristics The mesh partitioning problem can be formulated as a constrain or unconstrained optimization problem. This set of heuristics is applied to solve these associated optimization problems. The basis of most of them is the so called Kernighan and Lin algorithm (K L) [38]. <p> Numerical results indicate that this approach outperforms all the ones that are based on the partitioning of the exact grid [40]. Unfortunately, this approach can not be generalized for finite element meshes. A natural "fast" alternative for mesh decomposition is to integrate the mesh generation and the partitioning steps <ref> [63] </ref> and implement them in parallel. This is natural, since most of the mesh generators already use some form of coarse domain decomposition as a starting point. The numerical results reported in [63] suggest that this parallel integrated approach can result in the significant reduction of the data partitioning overhead. <p> A natural "fast" alternative for mesh decomposition is to integrate the mesh generation and the partitioning steps <ref> [63] </ref> and implement them in parallel. This is natural, since most of the mesh generators already use some form of coarse domain decomposition as a starting point. The numerical results reported in [63] suggest that this parallel integrated approach can result in the significant reduction of the data partitioning overhead.
References-found: 63

