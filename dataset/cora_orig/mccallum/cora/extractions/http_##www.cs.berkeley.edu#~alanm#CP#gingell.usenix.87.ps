URL: http://www.cs.berkeley.edu/~alanm/CP/gingell.usenix.87.ps
Refering-URL: http://www.cs.berkeley.edu/~alanm/CP/bib.html
Root-URL: 
Title: Virtual Memory Architecture in SunOS  
Author: Robert A. Gingell Joseph P. Moran William A. Shannon 
Address: 2550 Garcia Ave. Mountain View, CA 94043  
Affiliation: Sun Microsystems, Inc.  
Abstract: A new virtual memory architecture for the Sun implementation of the UNIX operating system is described. Our goals included unifying and simplifying the concepts the system used to manage memory, as well as providing an implementation that fit well with the rest of the system. We discuss an architecture suitable for environments that (potentially) consist of systems of heterogeneous hardware and software architectures. The result is a page-based system in which the fundamental notion is that of mapping process addresses to files. 
Abstract-found: 1
Intro-found: 1
Reference: [ACCE 86] <author> Accetta, M., R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, M. Young, </author> <title> ``Mach: A New Kernel Foundation for UNIX Development'', </title> <booktitle> Summer Conference Proceedings, Atlanta 1986, USENIX Association, </booktitle> <year> 1986. </year>
Reference-contexts: Aggravating these situations were the variations on those interfaces being developed by a number of vendors that were incompatible with or extended the original proposals. Also, entirely new interfaces have been proposed and implemented, most notably in Carnegie-Mellon's MACH <ref> [ACCE 86] </ref>. There has been no market movement to suggest which, if any, of these would become dominant, and in some cases a specific interface lacked an important capability (such as System V's lack of file mapping).
Reference: [AT&T 86] <author> AT&T, </author> <title> System V Interface Definition, Volume I, </title> <year> 1986 </year>
Reference-contexts: We have also found ourselves faced with having to support a variety of interfaces. These included the partially implemented interfaces we have had in our 4.2BSD-derived kernel [JOY 83] and those specified by AT&T for System V <ref> [AT&T 86] </ref>. Aggravating these situations were the variations on those interfaces being developed by a number of vendors that were incompatible with or extended the original proposals. Also, entirely new interfaces have been proposed and implemented, most notably in Carnegie-Mellon's MACH [ACCE 86]. <p> However, at present, this revised interface has not been defined. Also unspecified is an interface for locking pages in memory. We envision either a new mlock system call, or a variation on madvise. 5.2. System V Shared Memory The ``System V Interface Definition'' <ref> [AT&T 86] </ref> defines a number of operations on entities called ``shared memory segments''. Early in our project, we had hoped to implement these operations not as system calls but rather as library routines which built the System V abstractions out of the basic mechanisms supplied by the kernel.
Reference: [BOBR 72] <author> Bobrow, D. G., J. D. Burchfiel, D. L. Murphy, and R. S. Tomlinson, ``TENEX, </author> <title> a Paged Time Sharing System for the PDP-10'', </title> <journal> Communications of the ACM, </journal> <volume> Volume 15, No. 3, </volume> <month> March </month> <year> 1972. </year>
Reference-contexts: Not all abstractions on which an application builds need be supplied by the ``operating system''. 4.4. Historical Acknowledgements Many of the concepts we have described are not new. MULTICS [ORGA 72] supported the notion of file/process memory integration that is fundamental to our system. TENEX <ref> [BOBR 72] </ref> [MURP 72] supported a page-based environment together with the notion of a process page map independent of the object being mapped. 5. External Interfaces: System Calls The applications programmer gains access to the facilities of the new VM system through several sets of system calls.
Reference: [GING 87] <author> Gingell, R. A., M. Lee, X. T. Dang, M. S. Weeks, </author> <title> ``Shared Libraries in SunOS'', </title> <booktitle> Summer Conference Proceedings, Phoenix 1987, USENIX Association, </booktitle> <year> 1987. </year>
Reference-contexts: Non-kernel implementation of many functions. Although we were disappointed that kernel support was required to implement System V shared memory segments, we believe that this goal has been largely satisfied. In particular, our implementation of shared libraries <ref> [GING 87] </ref> requires no specific kernel support. We believe the basic operations the interfaces provide will permit the construction of other useful abstractions with user-level programming. Improved portability.
Reference: [JOY 83] <author> Joy, W. N., R. S. Fabry, S. J. Leffler, M. K. McKusick, </author> <title> 4.2BSD System Manual, </title> <institution> Computer Systems Research Group, Computer Science Division, University of California, Berkeley, </institution> <year> 1983. </year>
Reference-contexts: We have also found ourselves faced with having to support a variety of interfaces. These included the partially implemented interfaces we have had in our 4.2BSD-derived kernel <ref> [JOY 83] </ref> and those specified by AT&T for System V [AT&T 86]. Aggravating these situations were the variations on those interfaces being developed by a number of vendors that were incompatible with or extended the original proposals. <p> The new system also impacted other system calls and facilities. These are described further below. Although these represent the initial interfaces we intend to support, others may be provided in the future in response to market demand. 5.1. 4.2BSD-based Interfaces The 4.2BSD UNIX specification <ref> [JOY 83] </ref> included the definition of a number of system calls for mapping files, although the system did not implement them. Earlier releases of SunOS included partial implementations of these calls to support mapping devices such as frame buffers into a process's address space.
Reference: [KEPE 85] <author> Kepecs, J. H., </author> <title> ``Lightweight Processes for UNIX Implementation and Applications'', </title> <booktitle> Summer Conference Proceedings, Portland 1985, USENIX Association, </booktitle> <year> 1985. </year>
Reference-contexts: Engineer for the future. We wanted to build an implementation that would be amenable to anticipated future requirements, such as kernel support for ``lightweight'' processes <ref> [KEPE 85] </ref> and multiprocessors. When engaging in a large project, it is often as important to know what one's goals are not. In the architectural arena, our principal ``non-goals'' were: New external interfaces. <p> An as exists independent of any of its uses, and may be shared by multiple processes, thus setting the stage for future integration of a multi-threaded address space capability as described in <ref> [KEPE 85] </ref>. The ``address space'' in which the kernel operates is also described by an as structure, and is the handle by which the kernel effects internal mapping operations using as_map. The operations permitted on an as generally correspond to the functions provided by the system call interface.
Reference: [KLEI 86] <author> Kleiman, S. R., ``Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX'', </title> <booktitle> Summer Conference Proceedings, Atlanta 1986, USENIX Association, </booktitle> <year> 1986. </year>
Reference-contexts: Although the most common form of object is the UNIX ``regular file'', previous work on SunOS has allowed for many different implementations of objects, which the system manipulates as an abstraction of the original UNIX inode, called a vnode <ref> [KLEI 86] </ref>. A process's address space is defined by mappings onto the address spaces of one or more objects in the system's virtual memory.
Reference: [MKCU 84] <author> McKusick, M. K., W. N. Joy, S. J. Leffler, R. S. Fabry, </author> <title> ``A Fast File System for UNIX'', </title> <journal> Transactions on Computer Systems, </journal> <volume> Volume 2, No. 3, </volume> <month> August </month> <year> 1984. </year>
Reference: [MURP 72] <author> Murphy, D. L., </author> <title> ``Storage organization and management in TENEX'', </title> <booktitle> Proceedings of the Fall Joint Computer Conference, AFIPS, </booktitle> <year> 1972. </year>
Reference-contexts: Not all abstractions on which an application builds need be supplied by the ``operating system''. 4.4. Historical Acknowledgements Many of the concepts we have described are not new. MULTICS [ORGA 72] supported the notion of file/process memory integration that is fundamental to our system. TENEX [BOBR 72] <ref> [MURP 72] </ref> supported a page-based environment together with the notion of a process page map independent of the object being mapped. 5. External Interfaces: System Calls The applications programmer gains access to the facilities of the new VM system through several sets of system calls.
Reference: [ORGA 72] <author> Organick, E. I., </author> <title> The Multics System: An Examination of Its Structure, </title> <publisher> MIT Press, </publisher> <year> 1972. </year>
Reference-contexts: Note that this design does not prohibit the creation of libraries that provide coherent abstractions for common application needs. Not all abstractions on which an application builds need be supplied by the ``operating system''. 4.4. Historical Acknowledgements Many of the concepts we have described are not new. MULTICS <ref> [ORGA 72] </ref> supported the notion of file/process memory integration that is fundamental to our system. TENEX [BOBR 72] [MURP 72] supported a page-based environment together with the notion of a process page map independent of the object being mapped. 5.
References-found: 10

