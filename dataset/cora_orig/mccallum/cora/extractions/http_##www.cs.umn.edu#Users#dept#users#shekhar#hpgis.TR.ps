URL: http://www.cs.umn.edu/Users/dept/users/shekhar/hpgis.TR.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/shekhar/
Root-URL: http://www.cs.umn.edu
Email: E-mail Phone/Fax  shekhar@cs.umn.edu siva@cs.umn.edu kumar@cs.umn.edu  gregt@adelphi  
Title: Declustering and Load-Balancing Methods for Parallelizing Geographic Information Systems  
Author: Shashi Shekhar Sivakumar Ravada Vipin Kumar Douglas Chubb Greg Turner Shashi Shekhar Sivakumar Ravada Vipin Kumar ()-/ Douglas Chubb Greg Turner 
Keyword: Declustering Methods, Geographic Information Systems, High Performance, Load-Balancing, Polygon Clipping, Range Query.  
Address: 4-192 EE/CS, 200 Union St. SE Minneapolis, MN 55455  Vint Hill Farms Station Warrenton, VA 22186-5100  Adelphi, MD  
Affiliation: Department of Computer Science University of Minnesota  Research and Technology Division U.S. Army CECOM, RDEC, IEWD  Army Research Laboratory  
Note: Author Address  assb01.army.mil This work was supported by the Army High Performance Computing Research Center under the agreement #DAAH04 95-2-0003/contract #DAAH04-95-C-0008.  
Abstract: Declustering and load-balancing are important issues in designing a high performance geographic information system (HPGIS) which is a central component of many interactive applications such as real-time terrain visualization. The current literature provides efficient methods for declustering spatial point-data. However, there has been little work towards developing efficient declustering methods for collections of extended objects like chains of line-segments and polygons. In this paper, we focus on the data-partitioning approach to parallelizing GIS operations. We provide a framework for declustering collections of extended spatial objects by identifying the following key issues: (i) the work-load metric, (ii) the spatial-extent of the work-load, (iii)the distribution of the work-load over the spatial-extent, and (iv) the declustering method. We identify and experimentally evaluate alternatives for each of these issues. In addition, we also provide a framework for dynamically balancing the load between different processors. We experimentally evaluate the proposed declustering and load-balancing methods on a distributed memory MIMD machine (Cray T3D). Experimental results show that the spatial-extent and the work-load metric are important issues in developing a declustering method. Experiments also show that replication of data is usually needed to facilitate dynamic load-balancing, as the cost of local processing is often less than the cost of data transfer for extended spatial objects. In addition, we also show that the effectiveness of dynamic load-balancing techniques can be improved by using declustering methods to determine the subsets of spatial objects to be transferred during run-time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> DIS Home Page. </institution> <note> http://dis.pica.army.mil. </note>
Reference-contexts: range-query operation for GIS data using the data-partitioning approach. 1.1 Application Domain: Real-Time Terrain Visualization A real-time terrain-visualization system is an environment that lets users navigate and interact with a three-dimensional computer generated geographic environment in real-time, like other virtual environments [16], visualization systems [28], and distributed interactive simulation systems <ref> [1] </ref>. This type of system has three major components: interaction, 3-D graphics, and GIS. Figure 1 shows the different components of a terrain visualization system for a typical flight simulator.
Reference: [2] <author> A. Aggarwal, B. Chazelle, L. Guibas, C. O'Dunlaing, and C. Yap. </author> <title> Parallel Computational Geometry. </title> <booktitle> In Proceedings of the 25th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 468-477, </pages> <year> 1985. </year>
Reference-contexts: The existing sequential methods for supporting the GIS operations do not meet the real-time requirements imposed by many interactive applications. Hence, parallelization of GIS is essential in meeting the high performance requirements of several real-time applications. A GIS operation can be parallelized either by function-partitioning <ref> [2, 3, 5, 30] </ref> or by data-partitioning [4, 8, 13, 17, 19, 25, 32, 33]. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts.
Reference: [3] <author> S. G. Akl and K. A. Lyons. </author> <title> Parallel Computational Geometry. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1993. </year>
Reference-contexts: The existing sequential methods for supporting the GIS operations do not meet the real-time requirements imposed by many interactive applications. Hence, parallelization of GIS is essential in meeting the high performance requirements of several real-time applications. A GIS operation can be parallelized either by function-partitioning <ref> [2, 3, 5, 30] </ref> or by data-partitioning [4, 8, 13, 17, 19, 25, 32, 33]. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts.
Reference: [4] <author> M. P. Armstrong, C. E. Pavlik, and R. Marciano. </author> <title> Experiments in the Measurement of Spatial Association Using a Parallel Supercomputer. </title> <journal> Geographical Systems, </journal> <volume> 1 </volume> <pages> 267-288, </pages> <year> 1994. </year>
Reference-contexts: Hence, parallelization of GIS is essential in meeting the high performance requirements of several real-time applications. A GIS operation can be parallelized either by function-partitioning [2, 3, 5, 30] or by data-partitioning <ref> [4, 8, 13, 17, 19, 25, 32, 33] </ref>. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts. Data-Partitioning techniques divide the data among different processors and independently execute the sequential algorithm on each processor. <p> Zhou et al. [33] describe mapping-function-based declustering methods for parallelizing the grid files in the context of traditional range queries. Brunetti et al. [8] used row-wise division of two-dimensional regular grids in parallel algorithms for characterizing terrain data. Armstrong et al. <ref> [4] </ref> used row-wise partitioning of 2-d grids for parallelizing an algorithm to determine the spatial association measures for point data. <p> In the case of uniformly distributed point data, it has been shown that the static declustering is often adequate for achieving a good load-balance, by formal methods [33] as well as by experimental studies <ref> [4, 8, 33] </ref>. However, the effective declustering of sets of extended objects has not received adequate attention in the literature. In the case of extended spatial objects, static-declustering methods alone might not be enough to achieve good load-balance.
Reference: [5] <author> M. J. Atallah and M. T. Goodrich. </author> <title> Efficient Plane Sweeping in Parallel. </title> <booktitle> In Proceedings of the 2nd Annual ACM Symposium on Computational Geometry, </booktitle> <pages> pages 216-225, </pages> <year> 1986. </year>
Reference-contexts: The existing sequential methods for supporting the GIS operations do not meet the real-time requirements imposed by many interactive applications. Hence, parallelization of GIS is essential in meeting the high performance requirements of several real-time applications. A GIS operation can be parallelized either by function-partitioning <ref> [2, 3, 5, 30] </ref> or by data-partitioning [4, 8, 13, 17, 19, 25, 32, 33]. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts.
Reference: [6] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for Reporting and Counting Geometric Intersections. </title> <journal> IEEE Transactions on Computers, </journal> <volume> c-28(9):643-647, </volume> <year> 1979. </year>
Reference-contexts: The existing sequential solutions <ref> [6, 15, 31] </ref> for the range-query problem cannot always be directly used as a solution to the GIS-range-query problem, due to the high performance requirements of many applications.
Reference: [7] <author> T. Bially. </author> <title> Space-Filling Curves: Their Generation and Their Application to Bandwidth Reduction. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-15(6):658-664, </volume> <year> 1969. </year>
Reference-contexts: For example, a mapping function can be based on the Hilbert Space-filling curve <ref> [7, 21] </ref>. (See [10] for a survey of other mapping functions.) The Hilbert curve gives a total ordering of points in 2-dimensional space. Polygons can be declustered using the Hilbert method as follows.
Reference: [8] <author> G. Brunetti, A. Clematis, B. Falcidieno, A. Sanguineti, and M. Spagnuolo. </author> <title> Parallel Processing of Spatial Data for Terrain Characterization. </title> <booktitle> In Proceedings of the ACM workshop in GIS, </booktitle> <year> 1994. </year>
Reference-contexts: Hence, parallelization of GIS is essential in meeting the high performance requirements of several real-time applications. A GIS operation can be parallelized either by function-partitioning [2, 3, 5, 30] or by data-partitioning <ref> [4, 8, 13, 17, 19, 25, 32, 33] </ref>. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts. Data-Partitioning techniques divide the data among different processors and independently execute the sequential algorithm on each processor. <p> Kamel and Faloutsos [22] used local load-balancing-based data declustering to maximize the throughput of range queries over 3 data-sets consisting of two-dimensional rectangles. Zhou et al. [33] describe mapping-function-based declustering methods for parallelizing the grid files in the context of traditional range queries. Brunetti et al. <ref> [8] </ref> used row-wise division of two-dimensional regular grids in parallel algorithms for characterizing terrain data. Armstrong et al. [4] used row-wise partitioning of 2-d grids for parallelizing an algorithm to determine the spatial association measures for point data. <p> In the case of uniformly distributed point data, it has been shown that the static declustering is often adequate for achieving a good load-balance, by formal methods [33] as well as by experimental studies <ref> [4, 8, 33] </ref>. However, the effective declustering of sets of extended objects has not received adequate attention in the literature. In the case of extended spatial objects, static-declustering methods alone might not be enough to achieve good load-balance.
Reference: [9] <author> H. C. Du and J. S. Sobolewski. </author> <title> Disk Allocation for Product Files on Multiple Disk Systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7, </volume> <month> March </month> <year> 1982. </year>
Reference-contexts: Armstrong et al. [4] used row-wise partitioning of 2-d grids for parallelizing an algorithm to determine the spatial association measures for point data. It has been shown that customized declustering techniques based on space-division mapping functions <ref> [9, 33] </ref>, proximity-based local load-balance [17, 19, 22, 27], and similarity graph-partitioning [27] are needed to effectively partition spatial data.
Reference: [10] <author> C. Faloutsos and D. Metaxas. </author> <title> Disk Allocation Methods Using Error Correcting Codes. </title> <journal> IEEE Transactions on Computers, </journal> <month> August </month> <year> 1991. </year>
Reference-contexts: For example, a mapping function can be based on the Hilbert Space-filling curve [7, 21]. (See <ref> [10] </ref> for a survey of other mapping functions.) The Hilbert curve gives a total ordering of points in 2-dimensional space. Polygons can be declustered using the Hilbert method as follows.
Reference: [11] <author> M. T. Fang, R. C. T. Lee, and C. C. Chang. </author> <title> The Idea of Declustering and its Applications. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <year> 1986. </year>
Reference-contexts: Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts. Data-Partitioning techniques divide the data among different processors and independently execute the sequential algorithm on each processor. Data-Partitioning in turn is achieved by declustering <ref> [11, 27] </ref> the spatial data. If the static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by redistributing parts of the data to idle processors using dynamic load-balancing (DLB) techniques.
Reference: [12] <author> Z. Fang, P.-C. Yew, P. Tang, and C.-Q.Zhu. </author> <title> Dynamic processor self-scheduling for general parallel nested loops. </title> <booktitle> In Proceedings of the International Conference in Parallel Processing, </booktitle> <month> August </month> <year> 1987. </year>
Reference-contexts: In such a case, both static partitioning and DLB techniques can be used. Wang [32] used dynamic allocation of work at different levels (e.g, polygons, edges) for map-overlay computation. In addition, several dynamic load-balancing methods have been developed <ref> [12, 20, 23, 25] </ref> for load-balancing in different applications. Data-Partitioning for map-overlay [32], spatial-join, and access methods [18, 19] is not related to the work presented in this paper. Declustering and dynamic load-balancing for extended spatial-data have not received adequate attention in the literature. <p> This granularity may depend on the size of the remaining work, the number of processors, the cost of the work transfer, and the accuracy in estimating the remaining work. Several strategies like self-scheduling <ref> [12] </ref>, factoring scheduling [20], and chunk scheduling [23] exist for determining the amount of work to be transferred. Also, the simplest case of transferring one piece of work at a time is also considered in some cases.
Reference: [13] <author> W. R. Franklin, C. Narayanaswami, M. Kankanahalli, D. Sun, M. Zhou, and P. Y. F. Wu. </author> <title> Uniform Grids: </title>
Reference-contexts: Hence, parallelization of GIS is essential in meeting the high performance requirements of several real-time applications. A GIS operation can be parallelized either by function-partitioning [2, 3, 5, 30] or by data-partitioning <ref> [4, 8, 13, 17, 19, 25, 32, 33] </ref>. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts. Data-Partitioning techniques divide the data among different processors and independently execute the sequential algorithm on each processor.
References-found: 13

