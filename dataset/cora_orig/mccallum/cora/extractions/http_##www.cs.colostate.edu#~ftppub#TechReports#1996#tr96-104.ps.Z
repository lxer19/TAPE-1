URL: http://www.cs.colostate.edu/~ftppub/TechReports/1996/tr96-104.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Title: Cohesion Measures: Derivation, Comparison, and Applications  
Author: Byung-Kyoo Kang James M. Bieman 
Address: Fort Collins, CO 80523-1873  
Affiliation: Publication  Computer Science Department Colorado State University  
Note: Design-level  Research partially supported by NASA Langley Research Center grant NAG1-1461.  
Pubnum: Technical Report CS-96-104  
Email: kang@cs.colostate.edu  bieman@cs.colostate.edu  
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Degree: Submitted for  
Web: WWW: http://www.cs.colostate.edu  
Date: January 29, 1996  
Abstract: Computer Science Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bieman and B-K Kang. </author> <title> Cohesion and reuse in an object-oriented system. </title> <booktitle> Proc. ACM Symp. Software Reusability. (SSR'94), </booktitle> <pages> pages 259-262, </pages> <month> April </month> <year> 1995. </year> <note> Reprinted in ACM Software Engineering Notes, </note> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Address correspondence to: J. Bieman, Computer Science Dept, Colorado State Univ., bieman@cs.colostate.edu, Fort Collins, CO 80523, USA. (970)491-7096, Fax: (970) 491-2466. 1 Class cohesion measures for object-oriented software have also been defined using a slice-based approach, and by analyzing the connectivity between methods through common references to instance variables <ref> [1, 5, 6] </ref>. Method bodies are needed to apply these code-level class cohesion measures. In this paper, we show that module cohesion can be objectively assessed using only design-level information.
Reference: [2] <author> J. Bieman and L. Ott. </author> <title> Measuring functional cohesion. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 20(8) </volume> <pages> 644-657, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: This method requires the analysis of code-level information and thus cannot be applied before code is written. The second approach, a slice-based approach, is used by Bieman and Ott <ref> [2] </ref>. They measure functional cohesion in terms of the connections between code data tokens on module output slices. This method also requires code level information. Research partially supported by NASA Langley Research Center grant NAG1-1461. Copyright c fl1996 by Byung-Kyoo Kang and James M. Bieman. <p> In developing cohesion measures, slices can be used to represent the functional components of a module. 3.1 Functional Cohesion (FC) Measures Bieman and Ott developed cohesion measures that indicate the extent to which a module approaches the ideal of functional cohesion <ref> [2] </ref>. They introduced three measures of functional cohesion as the relative number of "glue" or "adhesive" data tokens based on "data slices" of a module (procedure). The data slice of a variable is the sequence of data tokens which have a dependence relationship with the variable. <p> Our design-level cohesion measures also generally correspond to several existing code-level cohesion measures. We derived these cohesion measures using an association-based approach similar to that used by Stevens et al [7] and the slice-based approach used to derive code-level functional cohesion measures <ref> [2] </ref>. Each of our measures quantify different attributes of the notion of cohesion. Three slice based measures are sensitive to the number of connections, the number of isolated components, or the number of essential components (components connected with all procedure outputs).
Reference: [3] <author> B-K Kang and J. Bieman. </author> <title> Using design cohesion to visualize, quantify, and restructure software. </title> <type> Technical Report CS-96-103, </type> <institution> Colorado State University, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: Since cohesion refers to the degree to which module components belong together, cohesion measurement should prove to be a very useful restructuring tool <ref> [3] </ref>. Following the original guidelines [7], the assessment of module cohesion is conducted by skilled engineers. These engineers would apply a set of subjective criteria to analyze associations between "processing elements" and classify the nature of these associations. <p> Because the rules are formal, a tool can automatically perform the classification. However, the technique can be applied only after the coding stage since it is defined upon the implementation details. SMC Cohesion defines an intuitive notion of the cohesion attribute of design components. In a previous paper <ref> [3] </ref>, we used it as an empirical relation system to help us to define a cohesion measure that can be readily automated. This new measure can be applied to both the design and code of a module. <p> That is, the output pair with the weakest cohesion determines the cohesion of the module. We have shown that the DLC measure is on an ordinal scale as long as we accept the ordering implied by the association principles of SMC Cohesion <ref> [3] </ref>. An IODG can be displayed visually in an IODG diagram. In such a diagram, the caller-callee relationship is represented by including the IODG of the callee in the IODG diagram of the caller. <p> These modules may be poorly-designed and should be redesigned or restructured. The measures can be computed easily from the IODG information. * The IODG diagram and associated cohesion measures can be used to redesign software during the design process, and to restructure existing software <ref> [3] </ref>. The measures are criteria for determining whether or not a given module should be redesigned or restructured. An IODG diagram can help one to decide how a selected module will be restructured. the following process: 1. IODG's of programs of interest are generated. 2.
Reference: [4] <author> A. Lakhotia. </author> <title> Rule-based approach to computing module cohesion. </title> <booktitle> Proceedings. 15th International Conference on Software Engineering, </booktitle> <pages> pages 35-44, </pages> <year> 1993. </year>
Reference-contexts: Several approaches have been used to develop objective, automatable methods for measuring module cohesion. The first approach, an association-based approach, is used by Lakhotia <ref> [4] </ref> to formalize the notion of the associations between processing elements as a set of rules concerning data dependencies in module code. This method requires the analysis of code-level information and thus cannot be applied before code is written. <p> SMC Cohesion is determined by inspecting the association between all pairs of a module's processing elements. Lakhotia uses the output variables of a module as the processing elements of SMC Cohesion and defines rules for designating a cohesion level which preserve the intent of the SMC Cohesion <ref> [4] </ref>. The associative principles of SMC Cohesion are transformed to relate the output variables based on data dependence relationships. A variable dependence graph models the control and data dependences between module variables.
Reference: [5] <author> Bindu Mehra. </author> <title> Measuring data cohesion in the object-oriented paradigm. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, Michigan Technological University, </institution> <note> in preparation. </note>
Reference-contexts: Address correspondence to: J. Bieman, Computer Science Dept, Colorado State Univ., bieman@cs.colostate.edu, Fort Collins, CO 80523, USA. (970)491-7096, Fax: (970) 491-2466. 1 Class cohesion measures for object-oriented software have also been defined using a slice-based approach, and by analyzing the connectivity between methods through common references to instance variables <ref> [1, 5, 6] </ref>. Method bodies are needed to apply these code-level class cohesion measures. In this paper, we show that module cohesion can be objectively assessed using only design-level information.
Reference: [6] <author> L. Ott, J. Bieman, B-K. Kang, and B. Mehra. </author> <title> Developing measures of class cohesion for object-oriented software. </title> <booktitle> Proc. Annual Oregon Workshop on Software Metrics (AOWSM'95), </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Address correspondence to: J. Bieman, Computer Science Dept, Colorado State Univ., bieman@cs.colostate.edu, Fort Collins, CO 80523, USA. (970)491-7096, Fax: (970) 491-2466. 1 Class cohesion measures for object-oriented software have also been defined using a slice-based approach, and by analyzing the connectivity between methods through common references to instance variables <ref> [1, 5, 6] </ref>. Method bodies are needed to apply these code-level class cohesion measures. In this paper, we show that module cohesion can be objectively assessed using only design-level information.
Reference: [7] <author> W. Stevens, G. Myers, and L. Constantine. </author> <title> Structured design. </title> <journal> IBM Systems J., </journal> <volume> 13(2) </volume> <pages> 115-139, </pages> <year> 1974. </year>
Reference-contexts: Since cohesion refers to the degree to which module components belong together, cohesion measurement should prove to be a very useful restructuring tool [3]. Following the original guidelines <ref> [7] </ref>, the assessment of module cohesion is conducted by skilled engineers. These engineers would apply a set of subjective criteria to analyze associations between "processing elements" and classify the nature of these associations. <p> SMC Cohesion includes coincidental, logical, temporal, procedural, communicational, sequential, and functional cohesion where coincidental cohesion is the weakest and functional cohesion is strongest cohesion <ref> [7] </ref>. SMC Cohesion is determined by inspecting the association between all pairs of a module's processing elements. Lakhotia uses the output variables of a module as the processing elements of SMC Cohesion and defines rules for designating a cohesion level which preserve the intent of the SMC Cohesion [4]. <p> The IODG models dependencies between externally visible module components and can be generated from design-level information. The IODG forms the basis for a set of cohesion measures that can be applied prior to implementation. The behavior of these cohesion measures matches the original intuitive, informal definition of software cohesion <ref> [7] </ref>. Our design-level cohesion measures also generally correspond to several existing code-level cohesion measures. We derived these cohesion measures using an association-based approach similar to that used by Stevens et al [7] and the slice-based approach used to derive code-level functional cohesion measures [2]. <p> The behavior of these cohesion measures matches the original intuitive, informal definition of software cohesion <ref> [7] </ref>. Our design-level cohesion measures also generally correspond to several existing code-level cohesion measures. We derived these cohesion measures using an association-based approach similar to that used by Stevens et al [7] and the slice-based approach used to derive code-level functional cohesion measures [2]. Each of our measures quantify different attributes of the notion of cohesion.
Reference: [8] <author> M. Weiser. </author> <title> Program slicing. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-10(4):352-357, </volume> <year> 1984. </year>
Reference-contexts: Each arrow indicates the dependence between two components. Figure 1 shows six cohesion levels for six simple modules. 3 4 3 Slice-based Cohesion Measures A program slice is the portion of the program that might affect the value of a particular identifier at a specified point in the program <ref> [8] </ref>. In developing cohesion measures, slices can be used to represent the functional components of a module. 3.1 Functional Cohesion (FC) Measures Bieman and Ott developed cohesion measures that indicate the extent to which a module approaches the ideal of functional cohesion [2].
Reference: [9] <author> M. Woodward. </author> <title> Difficulties using cohesion and coupling as quality indicators. </title> <journal> Software Quality J., </journal> <volume> 2(2) </volume> <pages> 109-127, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Because of the subjective nature of the assessment, the measurement of module cohesion has been difficult to automate, and cohesion has not been effectively used as a software quality indicator <ref> [9] </ref>. Several approaches have been used to develop objective, automatable methods for measuring module cohesion. The first approach, an association-based approach, is used by Lakhotia [4] to formalize the notion of the associations between processing elements as a set of rules concerning data dependencies in module code.
Reference: [10] <author> E. Yourdon and L. Constantine. </author> <title> Structured Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1979. </year>
Reference-contexts: They describe cohesion as an attribute of designs, rather than code, and an attribute that can be used to predict properties of implementations such as "ease of debugging, ease of maintenance, and ease of modification" <ref> [10, p. 140] </ref>. Since cohesion refers to the degree to which module components belong together, cohesion measurement should prove to be a very useful restructuring tool [3]. Following the original guidelines [7], the assessment of module cohesion is conducted by skilled engineers. <p> DLC finds the weakest connection among module components. Finding the weakest connection is important, because "for debugging, maintenance, and modification purposes, a module behaves as if it were only as strong as its weakest link" <ref> [10, p. 132] </ref>. Also, the DLC measure computed using a labeled IODG (where dependence is classified) provides more precise information about the relationship between output components than the DFC measures.
Reference: [11] <author> H. Zima and B. Chapman. </author> <title> Supercompilers for Parallel and Vector Computers. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year> <month> 14 </month>
Reference-contexts: The term `component' refers to a static entity. An array, a linked list, a record, or a file is one component rather than a group of components. We define the data and control dependence informally; their formal definitions are given in compiler texts, for example, see reference <ref> [11] </ref>.
References-found: 11

