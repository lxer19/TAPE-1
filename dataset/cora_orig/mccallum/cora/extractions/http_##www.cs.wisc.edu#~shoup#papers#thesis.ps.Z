URL: http://www.cs.wisc.edu/~shoup/papers/thesis.ps.Z
Refering-URL: http://www.cs.wisc.edu/~shoup/papers/
Root-URL: 
Title: REMOVING RANDOMNESS FROM COMPUTATIONAL NUMBER THEORY  
Author: by VICTOR SHOUP 
Degree: A thesis submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy (Computer Sciences) at the  
Date: 1989  
Address: WISCONSIN MADISON  
Affiliation: UNIVERSITY OF  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> L. M. Adleman and H. W. Lenstra Jr. </author> <title> Finding irreducible polynomials over finite fields. </title> <booktitle> In 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 350-355, </pages> <year> 1986. </year>
Reference-contexts: Rabin [35] gives a probabilistic polynomial time algorithm. Adle-man and Lenstra <ref> [1] </ref> give a deterministic algorithm that runs in polynomial time assuming the Extended Riemann Hypothesis (ERH). They also give a deterministic polynomial time algorithm that generates an irreducible polynomial of degree only approximately n. <p> Our approach in this case follows that of Adleman and Lenstra <ref> [1] </ref>. We will show how to inductively construct a sequence of irreducible polynomials f 1 ; f 2 ; . . . ; f e over F p of degrees p; p 2 ; . . . ; p e . Lemma 3.3.
Reference: [2] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1974. </year>
Reference-contexts: For a comprehensive treatment of the theory of finite fields, see the book by Lidl and Niederreiter [30]. From the theory of computation, the reader should be familiar with the notions of computational complexity and polynomial time algorithms (see, e.g., <ref> [2] </ref>). Although this thesis does not attempt to be self-contained, in the remainder of this section we collect in one place some basic facts from algebra and computation theory that are extensively used throughout this thesis, but that may not be familiar to the reader. But first, some notation. <p> scheme (see [9, p. 95]). (4) follows from (3) by a divide and conquer method (see [9, p. 100]). (5) follows from (4) by computing f mod (X ff 1 ); . . . ; f mod (X ff n ). (6) follows from (1) by an algorithm described in <ref> [2, pp. 303-308] </ref>. (7) is proved using a simple repeated squaring algorithm. 8 Chapter 2 Factoring Polynomials over Finite Fields 2.1 Introduction In this chapter, we consider the problem of factoring univariate polynomials over finite fields.
Reference: [3] <author> N. C. Ankeny. </author> <title> The least quadratic nonresidue. </title> <journal> Ann. of Math., </journal> <volume> 55 </volume> <pages> 65-72, </pages> <year> 1952. </year>
Reference-contexts: This method uses the results of Section 3.2, but constructs nonresidues using a technique completely different from that in Section 3.3. It makes use of an analogue of Ankeny's theorem on the least quadratic nonresidue modulo a prime <ref> [3] </ref> and of an analogue of Pratt's primality certificate [33]. Unlike the algorithm in Section 3.3, the algorithm in this section can be easily recast as a fast parallel algorithm when p is small. <p> If 0 &lt; d &lt; m, then there exists a monic polynomial g 2 F p [X] of degree d such that g (ff) is a q-th nonresidue in F p (ff). This claim is roughly analogous to Ankeny's theorem on the least quadratic nonresidue modulo a prime <ref> [3] </ref>, except that our claim is unconditional, whereas Ankeny's theorem relies on the Extended Riemann Hypothesis. Our claim is a consequence of a theorem of Katz [23, Theorem 2].
Reference: [4] <author> E. Bach. </author> <title> Realistic analysis of some randomized algorithms. </title> <booktitle> In 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 453-461, </pages> <year> 1987. </year> <note> Final version to appear, J. Comput. Sys. Sci. </note>
Reference-contexts: The worst-case and average-case analysis of the dependence on p in the running time of our algorithm makes use of estimates of the number of solutions to equations over finite fields; similar techniques have been previously used in the analysis of various probabilistic algorithms <ref> [4, 5, 6] </ref>.
Reference: [5] <author> E. Bach and V. Shoup. </author> <title> Factoring polynomials with fewer random bits. </title> <type> Technical Report 757, </type> <institution> Computer Sciences Department, University of Wisconsin-Madison, </institution> <year> 1988. </year> <note> To appear in J. Symb. Comput. </note>
Reference-contexts: The worst-case and average-case analysis of the dependence on p in the running time of our algorithm makes use of estimates of the number of solutions to equations over finite fields; similar techniques have been previously used in the analysis of various probabilistic algorithms <ref> [4, 5, 6] </ref>.
Reference: [6] <author> M. Ben-Or. </author> <title> Probabilistic algorithms in finite fields. </title> <booktitle> In 22nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 394-398, </pages> <year> 1981. </year>
Reference-contexts: Currently, the best known upper-bound on M (n) is approximately O (n 2:4 ) [17]. There are also many probabilistic algorithms for this problem whose expected running time is polynomial, i.e. polynomial in n and log p. One of the asymptotically fastest probabilistic algorithms is due to Ben-Or <ref> [6] </ref>, which uses O ((log p)n 2+* ) F p -operations. The running time of a different proba 9 bilistic algorithm due to Cantor and Zassenhaus [15] is also O ((log p)n 2+* ) F p -operations. <p> The worst-case and average-case analysis of the dependence on p in the running time of our algorithm makes use of estimates of the number of solutions to equations over finite fields; similar techniques have been previously used in the analysis of various probabilistic algorithms <ref> [4, 5, 6] </ref>. <p> One can easily show that for fixed a 6= b and randomly chosen ffi, the probability that (a + ffi) = (b + ffi) is no more than 1=2. So with high probability, g i and g j can be quickly separated. This idea is more fully developed in <ref> [6] </ref> and [27]. Another search strategy is a simple brute-force deterministic search: examine ffi = 0; 1; 2, etc., until we find a value of ffi for which (a + ffi) 6= (b + ffi). In [8], Berlekamp suggested a strategy similar to this, but did not analyze its complexity. <p> Suppose p is fixed, and consider the problem of factoring a polynomial of degree n over an extension E of degree over F p . The probabilistic algorithm of Ben-Or 29 <ref> [6] </ref> runs in time O ((n-) 2+* ). It is natural to ask if this same bound can be achieved deterministically. The bottleneck is again the construction of a separating set. <p> To obtain an NC algorithm, a bound of (log p + log m) O (1) would be required. Remark 3. The probabilistic algorithms of Rabin [34] and Ben-Or <ref> [6] </ref> give rise to randomized NC algorithms for constructing irreducible polynomials (provided p is small). 3.6 Open Questions For fixed p, the probabilistic algorithm of Ben-Or for constructing an irreducible polynomial of degree n over F p runs in time O (n 2+* ), whereas our algorithm requires time O (n
Reference: [7] <author> E. R. Berlekamp. </author> <title> Algebraic Coding Theory. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1968. </year>
Reference-contexts: This problem arises in many applications, including the construction of error correcting codes <ref> [7] </ref>, the computation of discrete logarithms in finite fields [32], the factorization of multivariate polynomials over finite fields [46], and the factorization of polynomials over the integers [24, pp. 431-434]. Consider the problem of factoring a polynomial of degree n in F p [X] where p is prime. <p> Such polynomials are used to implement arithmetic in extension fields found in many applications, including coding theory <ref> [7] </ref>, cryptography [16], multivariate polynomial factoring [46], and parallel polynomial arithmetic [18]. Let n a positive integer. Consider the deterministic complexity of finding an irreducible polynomial of degree n in F p [X] where p is prime.
Reference: [8] <author> E. R. Berlekamp. </author> <title> Factoring polynomials over large finite fields. </title> <journal> Math. Comp., </journal> <volume> 24(111) </volume> <pages> 713-735, </pages> <year> 1970. </year>
Reference-contexts: There are several deterministic algorithms for this problem whose running time is polynomial for small p, more specifically, polynomial in n and p. One of the asymptotically fastest deterministic algorithms is based on a method of Berlekamp <ref> [8] </ref> as refined by von zur Gathen [45]. The Berlekamp-von zur Gathen algorithm requires O (M (n) + pn 2+* ) F p - operations, where M (n) is the number of F p -operations required to multiply two n by n matrices. <p> If we just search for an appropriate value of ffi by examining ffi = 0; 1; 2, etc., this can take time proportional to p, which is quite impractical if p is very large. One way to approach this problem, based on an idea originating in <ref> [8] </ref>, is to compute fi = (s + ffi) (p1)=2 for various choices of ffi. i (fi) is just (a + ffi), where is the quadratic character on F p ; likewise, j (fi) is (b + ffi). <p> This idea is more fully developed in [6] and [27]. Another search strategy is a simple brute-force deterministic search: examine ffi = 0; 1; 2, etc., until we find a value of ffi for which (a + ffi) 6= (b + ffi). In <ref> [8] </ref>, Berlekamp suggested a strategy similar to this, but did not analyze its complexity. We will prove that for some ffi, with 0 ffi p 1=2 log p, we have (a + ffi) 6= (b + ffi). <p> This fact will then be used to show that the average-case complexity of our algorithm is polynomial, assuming that the coefficients of the 15 input polynomial are chosen at random. We should also remark that in <ref> [8] </ref>, Berlekamp mentions the result of Burgess [10] that the maximum number of consecutive quadratic residues or nonresidues mod p is O (p 1=4+* ); unfortunately, this result by itself has no bearing on the complexity of factoring polynomials. <p> This algorithm requires time and space p 1=2 (n log p) O (1) even in the best case. We shall briefly describe this algorithm here. By results in <ref> [8] </ref>, the problem of factoring a polynomial deterministically reduces in time (n log p) O (1) to the problem of finding the zeros of a polynomial. Suppose we want to find the zeros of a polynomial f 2 F p [X] of degree n. Let t = b p pc. <p> So we have reduced the problem to finding roots of polynomials of the form X q c over F p m . Berlekamp <ref> [8] </ref> gives a reduction from factoring in F p m [X] to factoring in F p [X]. We give an explicit construction, tailoring Berlekamp's reduction to our particular application.
Reference: [9] <author> A. Borodin and I. Munro. </author> <title> The Computational Complexity of Algebraic and Numeric Problems. </title> <publisher> American Elsevier, </publisher> <year> 1975. </year> <month> 49 </month>
Reference-contexts: We note that the results of Schonhage [37] would actually be sufficient for our purposes. (2) follows from (1) by a divide and conquer method (see <ref> [9, p. 100] </ref>). (3) follows from (1) by a Newton iteration scheme (see [9, p. 95]). (4) follows from (3) by a divide and conquer method (see [9, p. 100]). (5) follows from (4) by computing f mod (X ff 1 ); . . . ; f mod (X ff n <p> We note that the results of Schonhage [37] would actually be sufficient for our purposes. (2) follows from (1) by a divide and conquer method (see [9, p. 100]). (3) follows from (1) by a Newton iteration scheme (see <ref> [9, p. 95] </ref>). (4) follows from (3) by a divide and conquer method (see [9, p. 100]). (5) follows from (4) by computing f mod (X ff 1 ); . . . ; f mod (X ff n ). (6) follows from (1) by an algorithm described in [2, pp. 303-308]. <p> the results of Schonhage [37] would actually be sufficient for our purposes. (2) follows from (1) by a divide and conquer method (see <ref> [9, p. 100] </ref>). (3) follows from (1) by a Newton iteration scheme (see [9, p. 95]). (4) follows from (3) by a divide and conquer method (see [9, p. 100]). (5) follows from (4) by computing f mod (X ff 1 ); . . . ; f mod (X ff n ). (6) follows from (1) by an algorithm described in [2, pp. 303-308]. (7) is proved using a simple repeated squaring algorithm. 8 Chapter 2 Factoring Polynomials
Reference: [10] <author> D. A. Burgess. </author> <title> On character sums and primitive roots. </title> <journal> Proc. London Math. Soc., </journal> <volume> 3(12) </volume> <pages> 179-192, </pages> <year> 1962. </year>
Reference-contexts: This fact will then be used to show that the average-case complexity of our algorithm is polynomial, assuming that the coefficients of the 15 input polynomial are chosen at random. We should also remark that in [8], Berlekamp mentions the result of Burgess <ref> [10] </ref> that the maximum number of consecutive quadratic residues or nonresidues mod p is O (p 1=4+* ); unfortunately, this result by itself has no bearing on the complexity of factoring polynomials.
Reference: [11] <author> D. A. Burgess. </author> <title> On Dirichlet characters of polynomials. </title> <journal> Proc. London Math. Soc., </journal> <volume> 3(13) </volume> <pages> 537-548, </pages> <year> 1963. </year>
Reference-contexts: The relevant question is: what is the maximum number of consecutive quadratic residues in the sequence f (a+ffi)(b+ffi)g ffi0 ? For fixed a 6= b, later results of Burgess <ref> [11] </ref> imply that the maximum number of consecutive quadratic residues or nonresidues in this sequence is O (p 1=4+* ); however, the "constant" implied by the big-"O" depends on a and b, and an examination of Burgess' proof reveals that this dependence is proportional to ja bj.
Reference: [12] <author> P. Camion. </author> <title> A deterministic algorithm for factorizing polynomials of F q [X]. </title> <journal> Ann. Discrete Math., </journal> <volume> 17 </volume> <pages> 149-157, </pages> <year> 1983. </year>
Reference-contexts: This bound on ffi is very crude|there are intuitive reasons to believe that (a + ffi) 6= (b + ffi) for much smaller values of ffi. But as a lower bound on ffi, Camion <ref> [12] </ref> shows (using an elementary counting argument) that for all p there exist a; b 2 F p , where a 6= b, such that (a + ffi) = (b + ffi) for all 0 ffi log p 2.
Reference: [13] <author> P. Camion. </author> <title> Improving an algorithm for factoring polynomials over a finite field and constructing large irreducible polynomials. </title> <journal> IEEE Trans. Inform. Theory, </journal> <volume> IT-29(3):378- 385, </volume> <year> 1983. </year>
Reference-contexts: Let f 2 F p [X] be a monic polynomial of degree n that we wish to factor. As a first step in factoring f , many algorithms perform what is called "distinct degree factorization" <ref> [13, 15] </ref>. That is, we construct polynomials f (1) ; . . . ; f (n) where f (d) (1 d n) is the product of all the distinct monic irreducible polynomials of degree d that divide f . <p> That is, we construct polynomials f (1) ; . . . ; f (n) where f (d) (1 d n) is the product of all the distinct monic irreducible polynomials of degree d that divide f . Using algorithms described in <ref> [13] </ref> and [15], distinct degree factorization can be performed using O ((log p)n 2+* ) F p -operations. These algorithms make use of the fact that X p d X is the product of all monic irreducible polynomials whose degree divides d. <p> By the Chinese Remainder Theorem, the map which takes ff 2 R to ( 1 (ff); . . . ; k (ff)) is an isomorphism of the F p -algebras R and F p [X]=(g 1 ) F p [X]=(g k ). Following Camion <ref> [13] </ref>, the Berlekamp subalgebra B of R is defined by B = fff 2 R : i (ff) 2 F p for each i = 1; . . . ; kg. Note that the Chinese Remainder Theorem gives an isomorphism between B and F p F p . <p> Another approach for computing a separating set is described by Camion <ref> [13] </ref>. Let T be the F p -linear map on R that takes ff to ff + ff p + + ff p d1 . Note that for any i, i (T (ff)) is just the trace from F p [X]=(g i ) down to F p of i (ff). <p> Making use of the algorithm described in <ref> [13] </ref>, one can compute S with 13 O ((log p)dm 1+* + d 2 m 1+* ) F p -operations. Therefore, the worst-case complex-ity of Camion's algorithm is O ((log p)m 2+* + m 3+* ).
Reference: [14] <author> D. G. Cantor and E. Kaltofen. </author> <title> Fast multiplication of polynomials over arbitrary rings. </title> <type> Technical Report 87-35, </type> <institution> Department of Computer Science, Rensselaer Polytechnic Institute, </institution> <year> 1987. </year>
Reference-contexts: Then for any integer m &gt; 0, ff m can be computed using O (log m) multiplications in R. (1) is proved in Cantor and Kaltofen <ref> [14] </ref>.
Reference: [15] <author> D. G. Cantor and H. Zassenhaus. </author> <title> A new algorithm for factoring polynomials over finite fields. </title> <journal> Math. Comp., </journal> <volume> 36(154) </volume> <pages> 587-592, </pages> <year> 1981. </year>
Reference-contexts: One of the asymptotically fastest probabilistic algorithms is due to Ben-Or [6], which uses O ((log p)n 2+* ) F p -operations. The running time of a different proba 9 bilistic algorithm due to Cantor and Zassenhaus <ref> [15] </ref> is also O ((log p)n 2+* ) F p -operations. We should also mention that if log p is large with respect to n, another probabilistic algorithm of Cantor and Zassenhaus, which uses O (M (n) + (log p)n 1+* ) F p -operations, might be preferable to Ben-Or's. <p> Let f 2 F p [X] be a monic polynomial of degree n that we wish to factor. As a first step in factoring f , many algorithms perform what is called "distinct degree factorization" <ref> [13, 15] </ref>. That is, we construct polynomials f (1) ; . . . ; f (n) where f (d) (1 d n) is the product of all the distinct monic irreducible polynomials of degree d that divide f . <p> That is, we construct polynomials f (1) ; . . . ; f (n) where f (d) (1 d n) is the product of all the distinct monic irreducible polynomials of degree d that divide f . Using algorithms described in [13] and <ref> [15] </ref>, distinct degree factorization can be performed using O ((log p)n 2+* ) F p -operations. These algorithms make use of the fact that X p d X is the product of all monic irreducible polynomials whose degree divides d.
Reference: [16] <author> B. Chor and R. L. Rivest. </author> <title> A knapsack type public key cryptosystem based on arithmetic in finite fields. </title> <booktitle> In Advances in Cryptology: Proceedings of Crypto 84 (Lecture Notes in Computer Science No. </booktitle> <volume> 196), </volume> <pages> pages 54-65. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Such polynomials are used to implement arithmetic in extension fields found in many applications, including coding theory [7], cryptography <ref> [16] </ref>, multivariate polynomial factoring [46], and parallel polynomial arithmetic [18]. Let n a positive integer. Consider the deterministic complexity of finding an irreducible polynomial of degree n in F p [X] where p is prime.
Reference: [17] <author> D. Coppersmith and S. Winograd. </author> <title> Matrix multiplication via Behrend's method. </title> <booktitle> In 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-6, </pages> <year> 1987. </year>
Reference-contexts: The Berlekamp-von zur Gathen algorithm requires O (M (n) + pn 2+* ) F p - operations, where M (n) is the number of F p -operations required to multiply two n by n matrices. Currently, the best known upper-bound on M (n) is approximately O (n 2:4 ) <ref> [17] </ref>. There are also many probabilistic algorithms for this problem whose expected running time is polynomial, i.e. polynomial in n and log p. One of the asymptotically fastest probabilistic algorithms is due to Ben-Or [6], which uses O ((log p)n 2+* ) F p -operations.
Reference: [18] <author> W. Eberly. </author> <title> Very fast parallel matrix and polynomial arithmetic. </title> <booktitle> In 25th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 21-30, </pages> <year> 1984. </year>
Reference-contexts: Such polynomials are used to implement arithmetic in extension fields found in many applications, including coding theory [7], cryptography [16], multivariate polynomial factoring [46], and parallel polynomial arithmetic <ref> [18] </ref>. Let n a positive integer. Consider the deterministic complexity of finding an irreducible polynomial of degree n in F p [X] where p is prime. For this problem, there is no known deterministic polynomial time algorithm, i.e., an algorithm that runs in time polynomial in n and log p.
Reference: [19] <author> S. A. Evdokimov. </author> <title> Efficient factorization of polynomials and generalized Riemann hypothesis. </title> <type> Preprint, </type> <year> 1986. </year>
Reference-contexts: We also mention two other results on constructing irreducible polynomials, of which our results were obtained independently. In a paper on factoring polynomials over finite fields, Evdokimov <ref> [19] </ref> gives another proof that irreducible polynomials of specified degree can be constructed deterministically 33 in polynomial time assuming the ERH.
Reference: [20] <author> F. Fich and M. Tompa. </author> <title> The parallel complexity of exponentiating polynomials over finite fields. </title> <journal> J. ACM, </journal> <volume> 35 </volume> <pages> 651-667, </pages> <year> 1988. </year> <month> 50 </month>
Reference-contexts: If the characteristic p is small (i.e., p = l O (1) ), NC algorithms are known for all of the basic operations on polynomials over finite fields we require: addition, subtraction, multiplication, quotient/remainder, and modular exponentiation (see [43] and <ref> [20] </ref>). In the algorithm in this section, the size of the recursive call tree|and therefore its depth|is O (log n), and we can search for q-th nonresidues among the O (m 2 p) candidates in parallel. Thus, we immediately obtain the following theorem. Theorem 3.8.
Reference: [21] <author> M.-D. A. Huang. </author> <title> Riemann hypothesis and finding roots over finite fields. </title> <booktitle> In 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 121-130, </pages> <year> 1985. </year>
Reference-contexts: Evdokimov's method of constructing irreducible polynomials is similar to ours in that Evdokimov essentially reduces this problem to the problem of finding various nonresidues in extension fields of F p ; however, Evdokimov constructs these nonresidues by appealing to the ERH (making use of results in <ref> [21] </ref> and [25]), and does not address the problem of constructing these nonresidues deterministically without relying on the ERH.
Reference: [22] <author> R. M. Karp and V. Ramachandran. </author> <title> A survey of parallel algorithms for shared memory machines. </title> <type> Technical Report 88/408, </type> <institution> Comp. Sci. Division, Univ. Calif., Berkeley, </institution> <year> 1988. </year> <note> To appear in Handbook of Theoretical Computer Science, North-Holland. </note>
Reference-contexts: A problem is in N C if there is a uniform family of Boolean circuits of size l O (1) and depth (log l) O (1) that solves it. For more information on parallel complexity, see the survey article of Karp and Ramachandran <ref> [22] </ref>. If the characteristic p is small (i.e., p = l O (1) ), NC algorithms are known for all of the basic operations on polynomials over finite fields we require: addition, subtraction, multiplication, quotient/remainder, and modular exponentiation (see [43] and [20]).
Reference: [23] <author> N. M. Katz. </author> <title> An estimate for character sums. </title> <note> To appear, </note> <editor> J. </editor> <publisher> AMS, </publisher> <year> 1989. </year>
Reference-contexts: This claim is roughly analogous to Ankeny's theorem on the least quadratic nonresidue modulo a prime [3], except that our claim is unconditional, whereas Ankeny's theorem relies on the Extended Riemann Hypothesis. Our claim is a consequence of a theorem of Katz <ref> [23, Theorem 2] </ref>. Let F p d be a finite field with p d elements, and consider the m-dimensional F p d-algebra F p d [X]=(f). Note that F p d [X]=(f ) is not a field, unless gcd (d; m) = 1.
Reference: [24] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> volume 2. </volume> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <note> second edition, </note> <year> 1981. </year>
Reference-contexts: This problem arises in many applications, including the construction of error correcting codes [7], the computation of discrete logarithms in finite fields [32], the factorization of multivariate polynomials over finite fields [46], and the factorization of polynomials over the integers <ref> [24, pp. 431-434] </ref>. Consider the problem of factoring a polynomial of degree n in F p [X] where p is prime. There are several deterministic algorithms for this problem whose running time is polynomial for small p, more specifically, polynomial in n and p. <p> We remark that the constant implicit "O" expression in this lemma is absolute (in particular, it does not depend on p). Proof. This lemma is an extension of results given in problems 4 and 5 of section 4:6:2 of volume 2 of Knuth <ref> [24] </ref>. Our proof is based on the proof found there, which uses generating functions. The generating functions that we use should be viewed strictly as formal power series, and all of 26 the operations we perform on them, e.g., differentiation and exponentiation, as formal operations. <p> The justification of the ordinary properties of these operations can be found in [31]. Let G p (z) = n1 a np z n , where a np is the number of monic irreducible polynomials of degree n over F p . An argument sketched by Knuth <ref> [24, p. 624] </ref> shows that X j1 Let a npr be the number of monic polynomials of degree n in F p with exactly r irreducible factors. Let U p (z; w) = P n;r0 a npr z n w r .
Reference: [25] <author> J. Lagarias, H. Montgomery, and A. Odlyzko. </author> <title> A bound for the least prime ideal in the Chebotarev density theorem. </title> <journal> Inv. Math., </journal> <volume> 54 </volume> <pages> 271-296, </pages> <year> 1979. </year>
Reference-contexts: Evdokimov's method of constructing irreducible polynomials is similar to ours in that Evdokimov essentially reduces this problem to the problem of finding various nonresidues in extension fields of F p ; however, Evdokimov constructs these nonresidues by appealing to the ERH (making use of results in [21] and <ref> [25] </ref>), and does not address the problem of constructing these nonresidues deterministically without relying on the ERH.
Reference: [26] <author> S. Lang. </author> <title> Algebra. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <note> second edition, </note> <year> 1984. </year>
Reference-contexts: By hypothesis, we are given an irreducible polynomial f of degree m over F p , and a q-th nonresidue a in K = F p (ff) where ff is a root of f. We will make use of the following result, which is proved in <ref> [26, p. 331] </ref>. Lemma 3.2. Let K be a field and d an integer 2. Let a 2 K; a 6= 0. <p> Proof. According to Artin-Schreier theory (see, e.g., <ref> [26, p. 325] </ref>), over any field L of characteristic p, the polynomial X p X c (where c 2 L) is either irreducible or splits completely. The first statement of the lemma follows immediately from this. <p> can show that the polynomial X p X a is irreducible over F p (#) if and only if T (a) 6= 0 where T is the trace from F p (#) down to F p (this follows from Hilbert's Theorem 90, and the Artin-Schreier Theorem on p. 325 of <ref> [26] </ref>).
Reference: [27] <author> D. Lazard. </author> <title> On polynomial factorization. </title> <editor> In J. Calmet, editor, </editor> <booktitle> Computer Algebra (Lecture Notes in Computer Science No. </booktitle> <volume> 144), </volume> <pages> pages 126-134. </pages> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: So with high probability, g i and g j can be quickly separated. This idea is more fully developed in [6] and <ref> [27] </ref>. Another search strategy is a simple brute-force deterministic search: examine ffi = 0; 1; 2, etc., until we find a value of ffi for which (a + ffi) 6= (b + ffi). In [8], Berlekamp suggested a strategy similar to this, but did not analyze its complexity.
Reference: [28] <author> A. K. Lenstra. </author> <title> Factorization of polynomials. </title> <editor> In H. W. Lenstra and R. Tijdeman, editors, </editor> <booktitle> Computational Methods in Number Theory, </booktitle> <pages> pages 169-198. </pages> <publisher> Mathematisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1982. </year>
Reference-contexts: For more complete surveys of this area, see [30, Chapter 4] and also <ref> [28] </ref>. The notation and terminology introduced in this section will be used in the remaining sections of this chapter. Let f 2 F p [X] be a monic polynomial of degree n that we wish to factor.
Reference: [29] <author> H. W. Lenstra, </author> <year> 1988. </year> <type> personal communication. </type>
Reference-contexts: We also mention another deterministic factoring algorithm (conveyed to the author by Lenstra <ref> [29] </ref>) that uses a "baby-step giant-step" method to obtain a p 1=2 (n log p) O (1) running time bound; however, the algorithm requires time and space p 1=2 (n log p) O (1) even in the best case. <p> Thus, this result also has no immediate bearing on the complexity of factoring polynomials. Another p 1=2 Factoring Algorithm Lenstra <ref> [29] </ref> describes a completely different method to factor polynomials in time p 1=2 (n log p) O (1) . This algorithm requires time and space p 1=2 (n log p) O (1) even in the best case. We shall briefly describe this algorithm here. <p> This algorithm, like that of Section 3.3, works by finding appropriate nonresidues in extension fields of F p , and then uses the construction of Section 3.2 to obtain an irreducible polynomial; however, the method used to construct these nonresidues is different, and was suggested to the author by Lenstra <ref> [29] </ref>. The algorithm in this section has the advantage that it is somewhat simpler than the algorithm in Section 3.3. It also has the advantage that it is easily recast as a fast parallel algorithm when p is small, whereas the algorithm in Section 3.3 is not.
Reference: [30] <author> R. Lidl and H. Niederreiter. </author> <title> Finite Fields. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1983. </year>
Reference-contexts: A knowledge of basic field theory|field extensions, norms and traces, Galois theory, finite fields|will be most helpful. For a comprehensive treatment of the theory of finite fields, see the book by Lidl and Niederreiter <ref> [30] </ref>. From the theory of computation, the reader should be familiar with the notions of computational complexity and polynomial time algorithms (see, e.g., [2]). <p> Algebraic Background We shall now give a brief synopsis of some of the basic algebraic facts we will need. For proofs of the facts stated below, see <ref> [30] </ref>. Let R be a commutative ring with unity. Then R fl denotes the multiplicative group of units in R, and R [X] denotes the ring of polynomials in one variable with coefficients in R. 3 Field Extensions Let F be a field (finite or infinite). <p> Finally, in Section 2.5, we close with some open questions. 11 2.2 A Brief Overview of Factoring Methods In this section, we briefly review some of the key ideas found in algorithms for factoring polynomials over F p . For more complete surveys of this area, see <ref> [30, Chapter 4] </ref> and also [28]. The notation and terminology introduced in this section will be used in the remaining sections of this chapter. Let f 2 F p [X] be a monic polynomial of degree n that we wish to factor. <p> Suppose further that has r distinct roots in its splitting field. Then fi fi X ((x)) fi fi (r 1)q 1=2 : For a proof of this lemma, see <ref> [30, p. 225] </ref> or [36, p. 43]. Lemma 2.3. Let p be an odd prime, and let a; b 2 F p , such that a 6= b and let be the quadratic character on F p .
Reference: [31] <author> I. Niven. </author> <title> Formal power series. </title> <journal> Amer. Math. Monthly, </journal> <volume> 76 </volume> <pages> 871-889, </pages> <year> 1969. </year>
Reference-contexts: The generating functions that we use should be viewed strictly as formal power series, and all of 26 the operations we perform on them, e.g., differentiation and exponentiation, as formal operations. The justification of the ordinary properties of these operations can be found in <ref> [31] </ref>. Let G p (z) = n1 a np z n , where a np is the number of monic irreducible polynomials of degree n over F p .
Reference: [32] <author> C. Pomerance. </author> <title> Fast, rigorous factorization and discrete logarithm algorithms. </title> <booktitle> In Discrete Algorithms and Complexity; Proceedings of the Japan-US Joint Seminar, </booktitle> <pages> pages 119-143. </pages> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: This problem arises in many applications, including the construction of error correcting codes [7], the computation of discrete logarithms in finite fields <ref> [32] </ref>, the factorization of multivariate polynomials over finite fields [46], and the factorization of polynomials over the integers [24, pp. 431-434]. Consider the problem of factoring a polynomial of degree n in F p [X] where p is prime.
Reference: [33] <author> V. R. Pratt. </author> <title> Every prime has a succinct certificate. </title> <journal> SIAM J. Comput., </journal> <volume> 4 </volume> <pages> 214-220, </pages> <year> 1975. </year>
Reference-contexts: This method uses the results of Section 3.2, but constructs nonresidues using a technique completely different from that in Section 3.3. It makes use of an analogue of Ankeny's theorem on the least quadratic nonresidue modulo a prime [3] and of an analogue of Pratt's primality certificate <ref> [33] </ref>. Unlike the algorithm in Section 3.3, the algorithm in this section can be easily recast as a fast parallel algorithm when p is small. <p> We will establish bounds for both of these quantities with the following two claims. Claim 1. No more than log n + 1 recursive calls are made. The call tree is reminiscent of the Pratt primality tree <ref> [33] </ref>. To prove the claim, note that it is the job of each recursive call, other than that associated with n, to construct the q-th cyclotomic extension field for an odd prime q.
Reference: [34] <author> M. O. Rabin. </author> <title> Probabilistic algorithms. In Algorithms and Complexity, </title> <booktitle> Recent Results and New Directions, </booktitle> <pages> pages 21-39. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: Typically, k will be quite small, but the author knows of no general bound on k other than the trivial one, O ((log p)m). To obtain an NC algorithm, a bound of (log p + log m) O (1) would be required. Remark 3. The probabilistic algorithms of Rabin <ref> [34] </ref> and Ben-Or [6] give rise to randomized NC algorithms for constructing irreducible polynomials (provided p is small). 3.6 Open Questions For fixed p, the probabilistic algorithm of Ben-Or for constructing an irreducible polynomial of degree n over F p runs in time O (n 2+* ), whereas our algorithm requires
Reference: [35] <author> M. O. Rabin. </author> <title> Probabilistic algorithms in finite fields. </title> <journal> SIAM J. Comput., </journal> <volume> 9(2) </volume> <pages> 273-280, </pages> <year> 1980. </year>
Reference-contexts: Rabin <ref> [35] </ref> gives a probabilistic polynomial time algorithm. Adle-man and Lenstra [1] give a deterministic algorithm that runs in polynomial time assuming the Extended Riemann Hypothesis (ERH). They also give a deterministic polynomial time algorithm that generates an irreducible polynomial of degree only approximately n.
Reference: [36] <author> W. Schmidt. </author> <title> Equations over Finite Fields (Lecture Notes in Mathematics No. 536). </title> <publisher> Springer-Verlag, </publisher> <year> 1976. </year>
Reference-contexts: Suppose further that has r distinct roots in its splitting field. Then fi fi X ((x)) fi fi (r 1)q 1=2 : For a proof of this lemma, see [30, p. 225] or <ref> [36, p. 43] </ref>. Lemma 2.3. Let p be an odd prime, and let a; b 2 F p , such that a 6= b and let be the quadratic character on F p .
Reference: [37] <author> A. Schonhage. </author> <title> Schnelle Multiplikation von Polynomen uber Korpern der Charakteristik 2. </title> <journal> Acta Inform., </journal> <volume> 7 </volume> <pages> 395-398, </pages> <year> 1977. </year>
Reference-contexts: Then for any integer m &gt; 0, ff m can be computed using O (log m) multiplications in R. (1) is proved in Cantor and Kaltofen [14]. We note that the results of Schonhage <ref> [37] </ref> would actually be sufficient for our purposes. (2) follows from (1) by a divide and conquer method (see [9, p. 100]). (3) follows from (1) by a Newton iteration scheme (see [9, p. 95]). (4) follows from (3) by a divide and conquer method (see [9, p. 100]). (5) follows
Reference: [38] <author> V. Shoup. </author> <title> New algorithms for finding irreducible polynomials over finite fields. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 283-290, </pages> <year> 1988. </year> <note> Final version to appear in Math. Comp. </note>
Reference: [39] <author> V. Shoup. </author> <title> On the deterministic complexity of factoring polynomials over finite fields. </title> <type> Technical Report 782, </type> <institution> Computer Sciences Department, University of Wisconsin-Madison, </institution> <year> 1988. </year> <note> To appear in Inform. Process. Lett. </note>
Reference: [40] <author> J. Uspensky. </author> <title> Theory of Equations. </title> <publisher> McGraw-Hill, </publisher> <year> 1948. </year>
Reference-contexts: This follows immediately from Newton's formulas for sums of powers of the roots of a polynomial <ref> [40, p. 261] </ref>. 2 14 In the next section, we will present a deterministic algorithm that con-structs a separating set of d elements that uses only O ((log p)dm 1+* ) F p - operations.
Reference: [41] <author> B. L. van der Waerden. </author> <booktitle> Algebra, </booktitle> <volume> volume 1. </volume> <pages> Ungar, </pages> <address> New York, </address> <year> 1970. </year>
Reference-contexts: From algebra, the reader should be familiar with the definitions and basic properties of groups, rings, and fields (see, e.g., <ref> [41] </ref>). A knowledge of basic field theory|field extensions, norms and traces, Galois theory, finite fields|will be most helpful. For a comprehensive treatment of the theory of finite fields, see the book by Lidl and Niederreiter [30]. <p> One can show that one of these resolvents, call it a, must be nonzero, and that a q is a q-th nonresidue in L (see page 179 of <ref> [41] </ref>). It follows easily from Lemma 3.2 that a is a q-th nonresidue in F p (#; ~), and that the polynomial X q e a is irreducible over F p (#; ~).
Reference: [42] <author> R. R. Varshamov. </author> <title> A general method of synthesizing irreducible polynomials over Galois fields. </title> <journal> Soviet Math. Dokl., </journal> <volume> 29(2) </volume> <pages> 334-336, </pages> <year> 1984. </year>
Reference-contexts: In another paper, Varshamov <ref> [42] </ref> describes a method for constructing irreducible polynomials of specified degree; however, in some cases the method either breaks down or appears to require time greater than a polynomial in n and p.
Reference: [43] <author> J. von zur Gathen. </author> <title> Parallel algorithms for algebraic problems. </title> <journal> SIAM J. Comput., </journal> <volume> 13(4) </volume> <pages> 802-824, </pages> <year> 1984. </year>
Reference-contexts: If the characteristic p is small (i.e., p = l O (1) ), NC algorithms are known for all of the basic operations on polynomials over finite fields we require: addition, subtraction, multiplication, quotient/remainder, and modular exponentiation (see <ref> [43] </ref> and [20]). In the algorithm in this section, the size of the recursive call tree|and therefore its depth|is O (log n), and we can search for q-th nonresidues among the O (m 2 p) candidates in parallel. Thus, we immediately obtain the following theorem. Theorem 3.8.
Reference: [44] <author> J. von zur Gathen. </author> <title> Irreducible polynomials over finite fields. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1986. </year>
Reference-contexts: Rabin [35] gives a probabilistic polynomial time algorithm. Adle-man and Lenstra [1] give a deterministic algorithm that runs in polynomial time assuming the Extended Riemann Hypothesis (ERH). They also give a deterministic polynomial time algorithm that generates an irreducible polynomial of degree only approximately n. Von zur Gathen <ref> [44] </ref> gives several deterministic algorithms that are efficient in practice, but his proofs of their running times rely on unproven conjectures, and they generate irreducible polynomials of degree only approximately n. We also mention two other results on constructing irreducible polynomials, of which our results were obtained independently.
Reference: [45] <author> J. von zur Gathen. </author> <title> Factoring polynomials and primitive elements for special primes. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 52 </volume> <pages> 77-89, </pages> <year> 1987. </year>
Reference-contexts: There are several deterministic algorithms for this problem whose running time is polynomial for small p, more specifically, polynomial in n and p. One of the asymptotically fastest deterministic algorithms is based on a method of Berlekamp [8] as refined by von zur Gathen <ref> [45] </ref>. The Berlekamp-von zur Gathen algorithm requires O (M (n) + pn 2+* ) F p - operations, where M (n) is the number of F p -operations required to multiply two n by n matrices.
Reference: [46] <author> J. von zur Gathen and E. Kaltofen. </author> <title> Factorization of multivariate polynomials over finite fields. </title> <journal> Math. Comp., </journal> <volume> 45(171) </volume> <pages> 251-261, </pages> <year> 1985. </year> <month> 52 </month>
Reference-contexts: This problem arises in many applications, including the construction of error correcting codes [7], the computation of discrete logarithms in finite fields [32], the factorization of multivariate polynomials over finite fields <ref> [46] </ref>, and the factorization of polynomials over the integers [24, pp. 431-434]. Consider the problem of factoring a polynomial of degree n in F p [X] where p is prime. <p> Such polynomials are used to implement arithmetic in extension fields found in many applications, including coding theory [7], cryptography [16], multivariate polynomial factoring <ref> [46] </ref>, and parallel polynomial arithmetic [18]. Let n a positive integer. Consider the deterministic complexity of finding an irreducible polynomial of degree n in F p [X] where p is prime.
References-found: 46

