URL: http://www.informatik.hu-berlin.de/~lenz/Papers95/ilps.ps.gz
Refering-URL: http://www.informatik.hu-berlin.de/~lenz/lenz.publications.html
Root-URL: 
Email: e-mail: ffenske,geske,lenzg@first.gmd.de  
Title: Generating Types is Better Than Programming Them  
Author: Rayk Fenske, Ulrich Geske, Mario Lenz 
Address: Rudower Chaussee 5 D-12489 Berlin Germany  
Affiliation: GMD National Research Center for Information Technology GMD-FIRST  
Abstract: Many frameworks have been proposed for deriving specific runtime properties, but there is still a lack of knowledge about how they all fit together. To fill this gap, we discuss various kinds of type information and the relations between them, and sketch a method for obtaining the required information. This method is used as part of an system for automatic translation of Prolog programs into strongly typed languages such as PROTOS-L or G odel. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Beierle, Ch., S. Bottcher, and G. Meyer: </author> <title> Draft of the Logic Programming Language PROTOS-L. </title> <type> IBM IWBS Report 175, </type> <year> 1991. </year>
Reference-contexts: Rather, we attempt to clarify the notion of types on a level that is independent of such restrictions. Our goal is to translate untyped Prolog programs into languages with type concepts, like PROTOS-L <ref> [1] </ref> or G odel [8], and we believe that the approach suggested is applicable to other logic-based languages, as well. fl The research described in this paper was funded by the "German Federal Ministry for Education, Science, Research and Technology" under grant 01 IN 507 (VERMEIL) 1 2 Different kinds of
Reference: [2] <author> Bruynooghe, Maurice and Janssens, Gerda: </author> <title> An Instance of Abstract Interpretation Integrating Type and Mode Inferencing. </title> <booktitle> In: Proc. 5th International Conference and Symposium on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference: [3] <author> Bruynooghe, Maurice and Janssens, Gerda and Callebaut, Alain and Demoen, Bart: </author> <title> Abstract Interpretation: Towards the Global Optimisation of Prolog Programs. </title> <booktitle> In: Proc. Symposium on Logic Programming, </booktitle> <year> 1987. </year>
Reference: [4] <author> Dietrich, Roland: </author> <title> Modes and Types for Prolog. </title> <institution> GMD, Arbeitspapiere der GMD, </institution> <address> 285, St. Augustin, Germany, </address> <year> 1988. </year>
Reference: [5] <author> Fruhwirth, Th.: </author> <title> Type Inference by Program Transformation and Partial Evaluation. </title> <editor> In: H. Abramson, M.H. Rogers (eds.), </editor> <booktitle> Meta-Programming in Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <pages> pp. 263-282, </pages> <year> 1989. </year>
Reference: [6] <author> Geske, U.; Goltz, H.-J. and Lenz, M.: </author> <title> Composing Type-Checked Programs. </title> <editor> In: A.Brogi, L.Monteneiro (eds.): </editor> <booktitle> Proc. ILPS'93 Post-Conference Workshop on Methodologies for Composing Large Programs. </booktitle> <year> 1993. </year>
Reference-contexts: When computing the RP-type and RC-type, free variables in some of the corresponding D-types are not expanded to the most general type (e.g. "any" for Prolog; see also <ref> [6] </ref>).
Reference: [7] <author> Geske, U. and Lenz, M.: </author> <title> A Type-Based Debugging Tool for Untyped Logic languages. </title> <editor> In: M.Fromherz, A.Kusalik, .Nytrt and St.Prestwich (eds.): </editor> <booktitle> Proc. ICLP'95 Workshop on Logic Programming Environments. </booktitle> <year> 1994. </year>
Reference-contexts: This information can be used for various purposes, e.g.: * optimization of Prolog programs, * debugging support, * automatic translation of Prolog programs into typed languages, * automatic generation of types for typed languages. In <ref> [7] </ref>, we demonstrated how to use derived types for debugging. By extending this approach, we are able to facilitate and automate the translation process of Prolog programs into typed languages. <p> However, there is still a lack of a clear and homogeneous concept: nearly every author uses the notion of type in a different way (see also the discussion in <ref> [7] </ref>). In this paper, we propose a framework that aims to fill this gap. In doing so, we focus on neither a single objective nor a particular method of type inference. Rather, we attempt to clarify the notion of types on a level that is independent of such restrictions.
Reference: [8] <author> Hill, P.M.; Lloyd J.: </author> <title> The Godel Programming Language., </title> <publisher> MIT Press 1994. </publisher>
Reference-contexts: Rather, we attempt to clarify the notion of types on a level that is independent of such restrictions. Our goal is to translate untyped Prolog programs into languages with type concepts, like PROTOS-L [1] or G odel <ref> [8] </ref>, and we believe that the approach suggested is applicable to other logic-based languages, as well. fl The research described in this paper was funded by the "German Federal Ministry for Education, Science, Research and Technology" under grant 01 IN 507 (VERMEIL) 1 2 Different kinds of types Given the above
Reference: [9] <author> Hill, </author> <title> P.M.: The Aplication of Abstract Interpretation to Occur-Check Analysis for Godel. </title> <editor> In: M.G. de la Banda, G.Janssens and P.Stucky (eds.): </editor> <booktitle> Proc. ICLP'95 Post-Conference Workshop on Abstract Interpretation of Logic Languages. </booktitle> <institution> Techn. Report IA-TR-95-02 (Science Univ. of Tokyo), </institution> <year> 1995. </year> <title> 2 Imagine, for example, procedures that may have nested lists as arguments: Here a type like list(list(list(:: </title> : ))) <note> might appear. 7 </note>
Reference: [10] <author> Kanamori, T. and T. Kawamura, T.: </author> <title> Abstract Interpretation based on OLDT Resolution. </title> <journal> The Journal of Logic Programming. </journal> <volume> Vol5(1993)1&2, </volume> <year> 1993. </year>
Reference-contexts: Fig. 2 : Clauses for the representation of the type hierarchy of Prolog 2.4 Implementation To illustrate our type framework, we implemented an extended abstract interpretation on the basis of OLDT-resolution as described by Kanamori and Kawamura <ref> [10] </ref> in Prolog. A re-implementation were just performed in G odel.
Reference: [11] <author> Meyer, G.: </author> <title> Well-typing for logic programs with subtypes and parametric polymorphism. </title> <note> Submitted to Logic Programming Workshop, Vienna, </note> <year> 1995. </year>
Reference-contexts: PREDICATE Append : List (a)*List (a)*List (a). Local file: Rev.loc ----------------LOCAL Reverse. Reverse ([],[]). Reverse ([x|l],m) &lt;- Reverse (l,n) & Append (n,[x],m). Append ([],k,k). Append ([y|n],k,[y|m]) &lt;- Append (n,k,m). 6 Transformation Prolog &gt; PROTOS-L If we have defined the procedure p0 (L) :- append ([1],[-1],L)., which Meyer mentioned in <ref> [11] </ref>, the question, which type should we give to p0/1? The described automatic type generation method derives the right type (we have chosen the type hierarchy and syntax of PROTOS-L): rel p0: list (int). % wrong is list (nat) p0 (L) &lt;-- append (1.nil, -1.nil, L).
Reference: [12] <author> Mishra, </author> <title> P: Towards a Theory of Types in Prolog. </title> <booktitle> Proc. IEEE International Symposium on Logic Programming, </booktitle> <year> 1984. </year>
Reference-contexts: go on to explain the different types in a little more detail. * The D-type expresses a kind of partial type information, i.e. the type information delivered by a single clause or fact of a procedure. * The P-type corresponds to the type of a procedure as defined by Mishra <ref> [12] </ref>, i.e. it expresses the type necessary for successful execution. <p> Using this approach, we are able to infer type information which is often closer to the intended type than that suggested by Mishra <ref> [12] </ref>, e.g. we manage to infer the intended type for findall/3 and its subprocedures, when defined in the usual way | whereas the P-type is much too general because of the anonymous variables. * The SC-type expresses the type of a single successful call to a procedure.
Reference: [13] <author> Mycroft, Alan and O'Keefe, Richard A: </author> <title> A Polymorphic Type System for Prolog. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 23 (295-307), </pages> <year> 1984. </year>
Reference: [14] <author> Naish, Lee: </author> <title> Types and Intended Meaning. </title> <editor> In: Pfenning, F. (Ed.): </editor> <booktitle> Types in Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: However, this information can not derived automatically, as shown in <ref> [14] </ref>. 2.1 Requirements for the derivation of useful type information * Type rules To allow type inference, a set of type rules must be given to the system. These rules describe a) which type a certain value in the program belongs to b) how the type hierarchy is built up.
Reference: [15] <author> Solnon, Christine and Rueher, Michel: </author> <title> Extracting Inheritance Hierarchies from Prolog Programs: A System Based on the Inference of Type Relations. </title> <booktitle> Proc. LPAR, </booktitle> <year> 1993. </year>
Reference: [16] <author> Tamaki, H. and T. Sato: </author> <title> OLD Resolution with Tabulation. </title> <booktitle> In Proc. of the 3. ICLP, </booktitle> <address> London, </address> <year> 1986. </year>
Reference: [17] <author> Warren, Richard and Hermenegildo, Manuel: </author> <title> On the Practicality of Global Flow Analysis of Logic Programs. </title> <booktitle> Proc. 6th International Conference and Symposium on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1988. </year>
References-found: 17

