URL: http://www.isi.edu/~gts/paps/fktt98.ps.gz
Refering-URL: http://www.isi.edu/~gts/pubs.html
Root-URL: http://www.isi.edu
Email: ffoster,tueckeg@mcs.anl.gov fcarl,gtsg@isi.edu  
Title: A Security Architecture for Computational Grids  
Author: Ian Foster Carl Kesselman Gene Tsudik Steven Tuecke 
Address: Argonne, IL 60439 Marina del Rey, CA 90292  
Affiliation: 1 Mathematics and Computer Science 2 Information Sciences Institute Argonne National Laboratory University of Southern California  
Abstract: State-of-the-art and emerging scientific applications require fast access to large quantities of data and commensurately fast computational resources. Both resources and data are often distributed in a wide-area network with components administered locally and independently. Computations may involve hundreds of processes that must be able to acquire resources dynamically and communicate efficiently. This paper analyzes the unique security requirements of large-scale distributed (grid) computing and develops a security policy and a corresponding security architecture. An implementation of the architecture within the Globus metacomputing toolkit is discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Belani, A. Vahdat, T. Anderson, and M. Dahlin. </author> <title> The CRISIS wide area security architecture. </title> <booktitle> In Usenix Security Symposium, </booktitle> <month> January </month> <year> 1998. </year>
Reference-contexts: However, we note that SSL allows authenticated, yet nonencrypted, communication. We now turn to more recent and more specialized solutions aimed at large-scale, wide-area distributed computing. CRISIS is the security component of Web-OS, an operating system developed for use in wide area distributed computing <ref> [21, 1] </ref>. Web-OS and Globus are similar in that both aim to provide seamless access to files and computational resources distributed throughout a wide-area network. CRISIS, like GSI, employs SSL for point-to-point secure data transfer and X.509 for certificates.
Reference: [2] <author> C. Catlett and L. </author> <title> Smarr. Metacomputing. </title> <journal> Communications of the ACM, </journal> <volume> 35(6) </volume> <pages> 44-52, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Large-scale distributed computing environments, or "computational grids" as they are sometimes termed [4], couple computers, storage systems, and other devices to enable advanced applications such as distributed supercomputing, teleimmersion, computer-enhanced instruments, and distributed data mining <ref> [2] </ref>. Grid applications are distinguished from traditional client-server applications by their simultaneous use of large numbers of resources, dynamic resource requirements, use of resources from multiple administrative domains, complex communication structures, and stringent performance requirements, among others.
Reference: [3] <author> K. Czajkowski, I. Foster, C. Kesselman, S. Martin, W. Smith, and S. Tuecke. </author> <title> A resource management architecture for metacomputing systems. </title> <type> Technical report, </type> <institution> Mathematics and Computer Science Division, Ar-gonne National Laboratory, </institution> <year> 1998. </year>
Reference-contexts: On some systems, this will involve interaction with a scheduler to obtain a reservation <ref> [3] </ref>.) We must define protocols that control UP-RP, P-RP, and P-P interactions. <p> This testbed has been used for a range of compute- and communication-intensive application experiments. As specified by our security architecture, GSI provides support for user proxies, resource proxies (the Globus resource allocation manager (GRAM) <ref> [3] </ref>), certification authorities, and implementations of the protocols described above.
Reference: [4] <author> I. Foster and C. Kesselman, </author> <title> editors. Computational Grids: The Future of High Performance Distributed Computing. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1998. </year>
Reference-contexts: 1 Introduction Large-scale distributed computing environments, or "computational grids" as they are sometimes termed <ref> [4] </ref>, couple computers, storage systems, and other devices to enable advanced applications such as distributed supercomputing, teleimmersion, computer-enhanced instruments, and distributed data mining [2]. <p> This example, although somewhat contrived, captures important elements of real applications, such as those discussed in Chapters 2-5 of <ref> [4] </ref>. 1 user initiates a computation that accesses data and computing resources at multiple locations. We imagine a scientist, a member of a multi-institutional scientific collaboration, who receives e-mail from a colleague regarding a new data set.
Reference: [5] <author> I. Foster and C. Kesselman. </author> <title> The Globus project: A progress report. </title> <booktitle> In Heterogeneous Computing Workshop, </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: Finally, we present a concrete implementation of this architecture and discuss our experiences deploying this architecture on a large grid testbed spanning a diverse collection of resources at some 20 sites around the world. This implementation is performed in the context of the Globus system <ref> [5] </ref>, which provides a toolkit, testbed, and set of applications that can be used to evaluate our approach. However, we believe that the proposed techniques are general enough to make them applicable outside the Globus context. <p> GSI was developed as part of the Globus project <ref> [5] </ref>, whose focus is to * understand the basic infrastructure required to support the execution of wide range of computational grid applications, * build prototype implementations of this infrastructure, and * evaluate applications on large-scale testbeds. <p> By combining GSS/SAP with TCP sockets, we can, in fact, reconstitute the entire SSL protocol. Consequently, a computation can use GSI to access not only Globus services, but also generic Web services. 6.3 Deployment GSI has been deployed in GUSTO, a grid testbed spanning some 20 sites <ref> [5] </ref> in four countries. GUSTO includes NSF supercomputer centers, DOE laboratories, DoD resource centers, NASA laboratories, universities, and companies.
Reference: [6] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus approach to integrating multithreading and communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 37 </volume> <pages> 70-82, </pages> <year> 1996. </year>
Reference-contexts: Transport independence means that GSS-API does not depend on a specific communication method or library. Rather, each GSS-API call produces a sequence of tokens that can be communicated via any communication method an application may choose. Currently, GSI uses raw TCP sockets and the Nexus communication library <ref> [6] </ref> to move tokens between processors, although other transports can be easily used as well. Mechanism independence means that the GSS does not specify the use of specific security protocols, such as Kerberos, SESAME, DES, or RSA public key cryptography.
Reference: [7] <author> M. Gasser and E. McDermott. </author> <title> An architecture for practical delegation in a distributed system. </title> <booktitle> In IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 20-30, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Protocol 1: User proxy creation The concept of a user proxy is not unique to our architecture. For example, Kerberos generates a limited-lifetime ticket to represent a user. Various public key systems <ref> [7, 12] </ref>, use techniques similar to ours in which temporary credentials (i.e., a public and private key pair) are used to generate a limited lifetime certificate which is then signed by the user to indicate that this certificate represents, or is a proxy for, the user. <p> The creation of process specific credentials in protocol 3 results in a delegation of a set of rights from the user to the process. The use of delegation for distributed authentication has been addressed in the security literature (e.g., <ref> [7] </ref>). What sets our approach apart from delegation-based authentication schemes is the role played by the resource proxy. Approaches such as those proposed by [7] require that additional inter-resource trust relationships be established to enable delegation between processes running on those resources. <p> The use of delegation for distributed authentication has been addressed in the security literature (e.g., <ref> [7] </ref>). What sets our approach apart from delegation-based authentication schemes is the role played by the resource proxy. Approaches such as those proposed by [7] require that additional inter-resource trust relationships be established to enable delegation between processes running on those resources. In our protocols, authentication is always between a user proxy and a resource proxy.
Reference: [8] <author> I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. </author> <title> A secure environment for untrusted helper applications | confining the wily hacker. </title> <booktitle> In Proc. 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: On the other hand, CRISIS encompasses more than just authentication; it also includes extensive access control provisions, caching of credentials, and a secure execution environment, Janus <ref> [8] </ref>. Unlike Globus, CRISIS does not treat a process as a resource or an entity. This is an important difference because our security architecture allows processes to act independently, for example, to request access to other resources or start another process elsewhere.
Reference: [9] <author> A. Grimshaw, W. Wulf, J. French, A. Weaver, and P. Reynolds, Jr. Legion: </author> <title> The next logical step toward a nationwide virtual computer. </title> <type> Technical Report CS-94-21, </type> <institution> University of Virginia, </institution> <year> 1994. </year>
Reference: [10] <author> K. Hickman and T. Elgamal. </author> <title> The SSL protocol. </title> <type> Internet draft, </type> <institution> Netscape Communications Corp., </institution> <month> June </month> <year> 1995. </year> <note> Version 3.0. </note>
Reference-contexts: Group context management is needed to support secure communication within a dynamic group of processes belonging to the same computation (or even the same user). 6.2 Support for Public Key Technology in GSI The GSI implementation currently uses the authentication protocols defined by the Secure Socket Library (SSL) protocol <ref> [10] </ref>. At first glance, this may seem like an odd choice, since SSL defines a communication layer while GSS explicitly does not. However, in principle, it is possible to separate the authentication and communication components of SSL.
Reference: [11] <author> T. Howes and M. Smith. </author> <title> A scalable, deployable directory service framework for the internet. </title> <type> Technical Report CITI TR-95-7, </type> <institution> CITI, University of Michigan, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Third, SSL is widely adopted as the method of choice for authentication and secure communication for a broad range of distributed services, including HTTP servers, Web browsers, and directory services <ref> [11] </ref>. By combining GSS/SAP with TCP sockets, we can, in fact, reconstitute the entire SSL protocol.
Reference: [12] <author> D. Huhnlein. </author> <title> Credential management and secure single login for SPKM. </title> <booktitle> In ISOC Network and Distributed System Security Symposium, </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: Protocol 1: User proxy creation The concept of a user proxy is not unique to our architecture. For example, Kerberos generates a limited-lifetime ticket to represent a user. Various public key systems <ref> [7, 12] </ref>, use techniques similar to ours in which temporary credentials (i.e., a public and private key pair) are used to generate a limited lifetime certificate which is then signed by the user to indicate that this certificate represents, or is a proxy for, the user.
Reference: [13] <author> W. Johnston and C. Larsen. </author> <title> A use-condition centered approach to authenticated global capabilities: Security architectures for large-scale distributed collaboratory environments. </title> <type> Technical Report 3885, </type> <institution> LBNL, </institution> <year> 1996. </year>
Reference-contexts: One major scalability issue that is not addressed is the number of users and resources. Clearly, other approaches to the establishment of global to local mappings will be required when the number of users and/or resources are large: on example is the use-condition approaches to authorization <ref> [13] </ref>. However, we believe the current approach can deal with this. We hope to develop the techniques described in this paper in four major directions: more flexible policy-based access control mechanisms, based for example on use conditions [13]; representation and implementation of interdo-main access control policies; secure group communication, building for <p> users and/or resources are large: on example is the use-condition approaches to authorization <ref> [13] </ref>. However, we believe the current approach can deal with this. We hope to develop the techniques described in this paper in four major directions: more flexible policy-based access control mechanisms, based for example on use conditions [13]; representation and implementation of interdo-main access control policies; secure group communication, building for example on work in the CLIQUES project [18]; and delegation mechanisms to support scalability to large numbers of resources and users.
Reference: [14] <author> J. Kohl and C. Neuman. </author> <title> The Kerberos network authentication service (v5). Internet RFC 1510, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: If acknowledgment is not received within MAP-TIMEOUT, re quest is considered to have failed. Protocol 4: Mapping global to local identifier. as secure as the local authentication method. Clearly, resources with strong authentication (for example based on Kerberos <ref> [14] </ref>, S/KEY, or Secure Shell [22]) will result in a more secure mapping. 6 An Implementation of the Grid Security Architecture In this section, we describe the Globus Security Infrastructure (GSI), an implementation of our proposed grid security architecture.
Reference: [15] <author> M. Lewis and A. Grimshaw. </author> <title> The core Legion object model. </title> <booktitle> In Proc. 5th IEEE Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 562-571. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference: [16] <author> J. Linn. </author> <title> Generic security service application program interface, </title> <type> version 2. </type> <institution> Internet RFC 2078, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: This separation of protocol and mechanism is a desirable property in an implementation as well, since it enhances the overall portability and flexibility of the resulting system. To achieve the desired separation, GSI is implemented on top of the Generic Security Services application programming interface (GSS-API) <ref> [16] </ref>. As the name implies, GSS-API provides security services to callers in a generic fashion. These services can be implemented by a range of underlying mechanisms and technologies, allowing source-level portability of applications to different environments.
Reference: [17] <author> A. Medvinsky and M. Hur. </author> <title> Public key utilizing tickets for application servers. </title> <type> Internet draft, </type> <month> January </month> <year> 1997. </year>
Reference-contexts: Recently, optional Kerberos extensions have been proposed to support the use of public key cryptography for certain tasks, including initial user login (PKINIT) [20], interdomain authentication and key distribution (PKCROSS) [19], and peer-to-peer authentication (PKTAPP) <ref> [17] </ref>. We note that the last two have not progressed past Internet Drafts (expired) and no implementations are available. Although these extensions make Kerberos more attractive (since public key cryptography lends itself to greater security and scalability), Kerberos still remains a fairly heavyweight solution best suited for in-tradomain security.
Reference: [18] <author> M. Steiner, G. Tsudik, and M. Waidner. </author> <title> CLIQUES: A new approach to group key agreement. </title> <booktitle> In IEEE ICDCS'98, </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: We hope to develop the techniques described in this paper in four major directions: more flexible policy-based access control mechanisms, based for example on use conditions [13]; representation and implementation of interdo-main access control policies; secure group communication, building for example on work in the CLIQUES project <ref> [18] </ref>; and delegation mechanisms to support scalability to large numbers of resources and users.
Reference: [19] <author> B. Tung, T. Ryutov, C. Neuman, G. Tsudik, B. Som-merfeld, A. Medvinsky, and M. Hur. </author> <title> Public key cryptography for cross-realm authentication in Kerberos. </title> <type> Internet draft, </type> <month> November </month> <year> 1997. </year>
Reference-contexts: Recently, optional Kerberos extensions have been proposed to support the use of public key cryptography for certain tasks, including initial user login (PKINIT) [20], interdomain authentication and key distribution (PKCROSS) <ref> [19] </ref>, and peer-to-peer authentication (PKTAPP) [17]. We note that the last two have not progressed past Internet Drafts (expired) and no implementations are available.
Reference: [20] <author> B. Tung, J. Wray, A. Medvinsky, M. Hur, and J. Tros-tle. </author> <title> Public key cryptography for initial authentication in Kerberos. </title> <type> Internet draft, </type> <month> November </month> <year> 1997. </year>
Reference-contexts: Although it has evolved considerably during that time, the current MIT release still relies heavily on conventional cryptography and the on-line AS/TGS combination. Recently, optional Kerberos extensions have been proposed to support the use of public key cryptography for certain tasks, including initial user login (PKINIT) <ref> [20] </ref>, interdomain authentication and key distribution (PKCROSS) [19], and peer-to-peer authentication (PKTAPP) [17]. We note that the last two have not progressed past Internet Drafts (expired) and no implementations are available.
Reference: [21] <author> A. Vahdat, P. Eastham, C. Yoshikawa, E. Belani, T. Anderson, D. Culler, and M. Dahlin. WebOS: </author> <title> Operating system services for wide area applications. </title> <type> Technical Report UCB CSD-97-938, </type> <institution> U.C. Berkeley, </institution> <year> 1997. </year>
Reference-contexts: However, we note that SSL allows authenticated, yet nonencrypted, communication. We now turn to more recent and more specialized solutions aimed at large-scale, wide-area distributed computing. CRISIS is the security component of Web-OS, an operating system developed for use in wide area distributed computing <ref> [21, 1] </ref>. Web-OS and Globus are similar in that both aim to provide seamless access to files and computational resources distributed throughout a wide-area network. CRISIS, like GSI, employs SSL for point-to-point secure data transfer and X.509 for certificates.
Reference: [22] <author> T. Ylonen, T. Kivinen, and M. Saarinen. </author> <title> SSH protocol architecture. </title> <type> Internet draft, </type> <month> November </month> <year> 1997. </year> <month> 10 </month>
Reference-contexts: If acknowledgment is not received within MAP-TIMEOUT, re quest is considered to have failed. Protocol 4: Mapping global to local identifier. as secure as the local authentication method. Clearly, resources with strong authentication (for example based on Kerberos [14], S/KEY, or Secure Shell <ref> [22] </ref>) will result in a more secure mapping. 6 An Implementation of the Grid Security Architecture In this section, we describe the Globus Security Infrastructure (GSI), an implementation of our proposed grid security architecture.
References-found: 22

