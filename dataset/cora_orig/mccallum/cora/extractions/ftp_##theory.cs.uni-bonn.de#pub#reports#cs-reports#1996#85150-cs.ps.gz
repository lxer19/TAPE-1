URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1996/85150-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1996-en.html
Root-URL: http://cs.uni-bonn.de
Title: A Fast Randomized Parallel Algorithm for Finding Simple Cycles in Planar Graphs  
Author: Carsten F. Dorgerloh 
Address: Romerstr. 164, D-53117 Bonn Germany  
Affiliation: Institut fur Informatik der Universitat Bonn  
Abstract: We show that if a planar graph has a simple cycle of length k, where k is a fixed integer, such a cycle may be computed in O(log n log fl n) expected time by a randomized EREW-PRAM with O(n) processors. 
Abstract-found: 1
Intro-found: 1
Reference: [AYZ 95] <author> Alon, N., Yuster, R., Zwick, U., Color-coding, </author> <booktitle> Proc. 42 nd Journal of the ACM (1995), </booktitle> <pages> pp. 844-856. </pages>
Reference-contexts: Hence finding a cycle of lenght k, for an arbitrary k, is N P -complete. This remains true if G is planar and under other restrictions. However, we are concerned only with the problem of finding simple cycles of a given length. Alon, Yuster and Zwick <ref> [AYZ 95] </ref> presented a randomized sequential algorithm for this task which uses O (n) expected time. Our randomized parallel algorithm for that problem, while using ideas from [JM 91], is largely a parallel implementation of the algorithm of [AYZ 95], with results of [CE 91] used crucially in the parallelization. <p> Alon, Yuster and Zwick <ref> [AYZ 95] </ref> presented a randomized sequential algorithm for this task which uses O (n) expected time. Our randomized parallel algorithm for that problem, while using ideas from [JM 91], is largely a parallel implementation of the algorithm of [AYZ 95], with results of [CE 91] used crucially in the parallelization. We achieve an expected running time of O (log n log fl n) on a randomized EREW-PRAM with O (n) processors. 2 Notations and definitions The terminology used in this paper follows that of Even [Ev 79].
Reference: [CE 91] <author> Chrobak, M., Eppstein, D., </author> <title> Planar orientations with low out-degree and compaction of adjacency matrices, </title> <booktitle> Theoretical Computer Science 86 (1991), </booktitle> <pages> pp. 243-266. </pages>
Reference-contexts: Alon, Yuster and Zwick [AYZ 95] presented a randomized sequential algorithm for this task which uses O (n) expected time. Our randomized parallel algorithm for that problem, while using ideas from [JM 91], is largely a parallel implementation of the algorithm of [AYZ 95], with results of <ref> [CE 91] </ref> used crucially in the parallelization. We achieve an expected running time of O (log n log fl n) on a randomized EREW-PRAM with O (n) processors. 2 Notations and definitions The terminology used in this paper follows that of Even [Ev 79]. <p> By deg ! (v) we will note the out-degree of v, under this orientation !. We say that ! is d-bounded if for each vertex v 2 V we have deg ! (v) d. The following lemma can be found in <ref> [CE 91] </ref>. Lemma 2 Let G be a planar graph. A 6-bounded acyclic orientation ! of G may be computed on an EREW-PRAM in time O (log n log fl n), using O (n=(log n log fl n)) processors.
Reference: [Co 88] <author> Cole, R., </author> <title> Parallel Merge Sort, </title> <journal> SIAM Journal on Computing 17(4) (1988), </journal> <pages> pp. 770-785. </pages>
Reference-contexts: Run standard list ranking on each edge-list to find the distance of each edge from the end of its list. Copy each edge-list in an array using the results of the list ranking as index. Sort the array using the parallel merge sort of Cole <ref> [Co 88] </ref> and use the results to form a sorted linked list.
Reference: [Ev 79] <author> Even, S., </author> <title> Graph Algorithms, </title> <publisher> Computer Science Press, </publisher> <year> 1979. </year>
Reference-contexts: We achieve an expected running time of O (log n log fl n) on a randomized EREW-PRAM with O (n) processors. 2 Notations and definitions The terminology used in this paper follows that of Even <ref> [Ev 79] </ref>. Let G = (V; E) be a graph. For each vertex v, N (v) denotes the set of neighbours of v. <p> In the literature, pointers of this type are often called cross links. 3.1 Parallel Graph Contraction Let G = (V; E) be the input graph with n = jV j vertices and m = jEj edges. Since G is planar, from Euler's formula <ref> [Ev 79] </ref> follows that m &lt; 3n. We will assume that there is one processor assigned to each vertex v 2 V and one processor to each edge (u; v) 2 E.
Reference: [GJ 79] <author> Garey, M. R., Johnson, D. S., Computers and Intractability, W. H. Freeman and Company, </author> <year> 1979. </year>
Reference-contexts: 1 Introduction It is well known that finding the longest cycle in a graph is a hard problem, since finding a Hamiltonian cycle is NP -complete <ref> [GJ 79] </ref>. Hence finding a cycle of lenght k, for an arbitrary k, is N P -complete. This remains true if G is planar and under other restrictions. However, we are concerned only with the problem of finding simple cycles of a given length.
Reference: [JM 91] <author> Johnson, D. B., Metaxas, P., </author> <title> Connected Components in O(log 3=2 jV j) Parallel Time for the CREW PRAM, </title> <booktitle> Proc. 32 nd IEEE FOCS (1991), </booktitle> <pages> pp. 688-697. </pages>
Reference-contexts: However, we are concerned only with the problem of finding simple cycles of a given length. Alon, Yuster and Zwick [AYZ 95] presented a randomized sequential algorithm for this task which uses O (n) expected time. Our randomized parallel algorithm for that problem, while using ideas from <ref> [JM 91] </ref>, is largely a parallel implementation of the algorithm of [AYZ 95], with results of [CE 91] used crucially in the parallelization. <p> In the course of the algorithm we will need to contract all edges incident to a given vertex u wich will be the representative. Some of the algorithmic techniques used in the proof of the following lemma were introduced by Johnson and Metaxas <ref> [JM 91] </ref>. Lemma 1 Let G = (V; E) be a graph and S ae V be a set of vertices such that for each pair u; v 2 S with u 6= v N (u) " N (v) = ; and (u; v) 62 E.
Reference: [KR 88] <author> Karp, R. M., Ramachandran, V., </author> <title> A Survey of Parallel Algorithms for Shared-Memory Machines, </title> <note> Research Report UCB/CSD 88/408, </note> <institution> University of Califor-nia, Berkeley, </institution> <year> 1988. </year> <month> 7 </month>
Reference-contexts: Furthermore, each processor fl email: carsten@cs.uni-bonn.de 1 has access to a random number generator which returns random numbers of log n bits in constant time. More details of the PRAM models can be found in the survey by Karp and Ramachandran <ref> [KR 88] </ref>. 3 The Algorithm Before we explain the technical details of the algorithm, we give our special view on the data structures which allows us to implement the algorithms efficiently.
References-found: 7

