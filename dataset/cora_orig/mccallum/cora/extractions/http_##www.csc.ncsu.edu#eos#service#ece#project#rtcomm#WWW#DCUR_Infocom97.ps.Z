URL: http://www.csc.ncsu.edu/eos/service/ece/project/rtcomm/WWW/DCUR_Infocom97.ps.Z
Refering-URL: http://www.csc.ncsu.edu/eos/service/ece/project/rtcomm/WWW/routing.html
Root-URL: http://www.csc.ncsu.edu
Email: hfsalama@eos.ncsu.edu reeves@eos.ncsu.edu candice@eos.ncsu.edu  
Title: A Distributed Algorithm for Delay-Constrained Unicast Routing  
Author: Hussein F. Salama Douglas S. Reeves Yannis Viniotis 
Address: Box 7911, Raleigh, NC 27695 Box 8206, Raleigh, NC 27695 Box 7911, Raleigh, NC 27695  
Affiliation: ECE Department CSC and ECE Departments ECE Deparmtent N.C. State University N.C State University N.C. State University  
Abstract: In this paper, we study the NP-hard delay-constrained least-cost path problem, and propose a simple, distributed heuristic solution: the delay-constrained unicast routing (DCUR) algorithm. DCUR requires limited network state information to be kept at each node: a cost vector and a delay vector. We prove DCUR's correctness by showing that it is always capable of constructing a loop-free delay-constrained path within finite time, if such a path exists. The worst case message complexity of DCUR is O(jV j 3 ) messages, where jV j is the number of nodes. However, simulation results show that, on the average, DCUR requires much fewer messages. Therefore, DCUR scales well to large networks. We also use simulation to compare DCUR to the optimal algorithm, and to the least-delay path algorithm. Our results show that DCUR's path costs are within 10% from those of the optimal solution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Hedrick, </author> <title> Routing Information Protocol. Internet RFC 1058, </title> <address> http://ds.internic.net/ rfc/rfc1058.txt, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Hence the need for routing mechanisms which are able to satisfy the delay requirements of real-time traffic and to manage the network resources efficiently. Unicast routing protocols can be classified into two categories: distance-vector protocols, e.g., the routing information protocol (RIP) <ref> [1] </ref>, and link-state protocols, e.g., the open shortest path first protocol (OSPF) [2]. Distance fl This work was supported in part by the Center for Advanced Computing and Communication at North Carolina State University, and by AFOSR grant F49620-96-1-0061. <p> The cost vectors and delay vectors are similar to the distance vectors of some existing routing protocols <ref> [1] </ref>. Distance-vector based protocols discuss in detail how to update the distance vectors in response to topology changes, and how to prevent instability. These procedures are simple and require the contents of the distance vector at each node to be periodically transmitted to direct neighbors of that node only.
Reference: [2] <author> J. Moy, </author> <note> OSPF Version 2. Internet RFC 1583, http://ds.internic.net/ rfc/rfc1583.txt, </note> <month> March </month> <year> 1994. </year>
Reference-contexts: Unicast routing protocols can be classified into two categories: distance-vector protocols, e.g., the routing information protocol (RIP) [1], and link-state protocols, e.g., the open shortest path first protocol (OSPF) <ref> [2] </ref>. Distance fl This work was supported in part by the Center for Advanced Computing and Communication at North Carolina State University, and by AFOSR grant F49620-96-1-0061.
Reference: [3] <author> D. Bertsekas and R. Gallager, </author> <title> Data Networks. </title> <booktitle> Prentice-Hall, 2nd ed., </booktitle> <year> 1992. </year>
Reference-contexts: Contact: Manager, Copyrights and Permissions / IEEE Service Center / 445 Hoes Lane / P.O. Box 1331 / Piscataway, NJ 08855-1331, USA. Telephone: + Intl. 908-562-3966. vector protocols are based on a distributed version of Bellman-Ford's shortest path (SP) algorithm <ref> [3] </ref>. Considering the message complexity, distance-vector routing protocols scale well to large networks, because each node sends periodical topology update messages only to its direct neighbors. Each node maintains only limited information about the shortest paths to all other nodes in the network. <p> In link-state protocols, on the other hand, each node maintains complete information about the network topology, and uses this information to compute the shortest path to a given destination centrally using Dijkstra's algorithm <ref> [3] </ref>. Link-state protocols have limited scalability, because flooding is used to update the nodes' topology information. They do not suffer from looping problems, however, because of their centralized nature.
Reference: [4] <author> J. Garcia-Luna-Aceves and J. Behrens, </author> <title> Distributed, Scalable Routing Based on Vectors of Link States, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 13, no. 8, </volume> <pages> pp. 1383-1395, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Link-state protocols have limited scalability, because flooding is used to update the nodes' topology information. They do not suffer from looping problems, however, because of their centralized nature. In 1995, Garcia-Luna-Aceves and Behrens <ref> [4] </ref> proposed a distributed protocol, based on link vectors, that avoids looping problems and scales well to large networks. Both Bellman-Ford's and Dijkstra's SP algorithms are exact and run in polynomial time.
Reference: [5] <author> M. Garey and D. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <address> New York: </address> <publisher> W.H. Freeman and Co., </publisher> <year> 1979. </year>
Reference-contexts: We study the problem of unicast routing of real-time traffic subject to an end-to-end delay constraint in connection-oriented networks. We formulate the problem as a Delay-Constrained LC (DCLC) path problem. This problem is NP-hard <ref> [5] </ref>. Therefore, we propose a distributed heuristic solution: the delay-constrained unicast routing (DCUR) algorithm. Widyono [6] proposed an optimal centralized delay-constrained algorithm to solve the DCLC problem. His algorithm, called the constrained Bellman-Ford (CBF) algorithm, performs a breadth-first search to find the optimal DCLC path. <p> Therefore P 0 (s; d) P (s; d). If P i 2 P (s; d) then P i 2 P 0 (s; d) if and only if Delay (P i ) D: (4) The DCLC problem is NP-hard <ref> [5] </ref>. It remains NP-hard in the case of undirected networks.
Reference: [6] <author> R. Widyono, </author> <title> The Design and Evaluation of Routing Algorithms for Real-Time Channels, </title> <type> Tech. Rep. </type> <institution> ICSI TR-94-024, University of California at Berkeley, International Computer Science Institute, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: We study the problem of unicast routing of real-time traffic subject to an end-to-end delay constraint in connection-oriented networks. We formulate the problem as a Delay-Constrained LC (DCLC) path problem. This problem is NP-hard [5]. Therefore, we propose a distributed heuristic solution: the delay-constrained unicast routing (DCUR) algorithm. Widyono <ref> [6] </ref> proposed an optimal centralized delay-constrained algorithm to solve the DCLC problem. His algorithm, called the constrained Bellman-Ford (CBF) algorithm, performs a breadth-first search to find the optimal DCLC path. Unfortunately, due to its optimality, CBF's worst case running times grow exponentially with the size of the network.
Reference: [7] <author> J. Jaffe, </author> <title> Algorithms for Finding Paths with Multiple Constraints, </title> <journal> Networks, </journal> <volume> vol. 14, no. 1, </volume> <pages> pp. 95-116, </pages> <month> Spring </month> <year> 1984. </year>
Reference-contexts: His algorithm, called the constrained Bellman-Ford (CBF) algorithm, performs a breadth-first search to find the optimal DCLC path. Unfortunately, due to its optimality, CBF's worst case running times grow exponentially with the size of the network. Jaffe <ref> [7] </ref> studied a variation of the problem in which the path cost and the path delay are defined as two constraints, and he proposed a pseudo-polynomial-time heuristic and a polynomial-time heuristic for solving the problem.
Reference: [8] <author> Z. Wang and J. Crowcroft, </author> <title> Quality-of-Service Routing for Supporting Multimedia Applications, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 14, no. 7, </volume> <pages> pp. 1228-1234, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: The path cost (and similarly the path delay) is an additive metric, i.e, it is equal to the sum of the costs of the links on the path. Wang and Crowcroft <ref> [8] </ref> investigated the routing problem subject to multiple quality of service constraints in datagram networks. They considered mul-tiplicative and concave constraints in addition to additive constraints. The remainder of this paper is organized as follows. In section 2, we formulate the DCLC problem.
Reference: [9] <author> H. Salama, </author> <title> Multicast Routing for Real-time Communication on High-Speed Networks. </title> <type> PhD thesis, </type> <institution> North Carolina State University, Department of Electrical and Computer Engineering, </institution> <year> 1996. </year> <note> Available from ftp://osl.csc.ncsu.edu/pub/rtcomm/rt-comm.html. </note>
Reference-contexts: The result would have been the same loop occurring twice. The description of DCUR is now complete. Complete pseudo code for the algorithm can be found in <ref> [9] </ref>. In the remainder of this section, we prove the correctness of DCUR and study its complexity. 4.2 Correctness of DCUR We verify the correctness of DCUR by proving that it can always construct a loop-free delay-constrained path within a finite time, if such a path exists. <p> The positions of the nodes were fixed in a rectangle of size 4000 fl 2400 Km 2 , roughly the area of the continental USA. A random generator was used to create links interconnecting the nodes <ref> [9] </ref>. The output of this random generator is always a connected network in which each node's degree is at least 2.
References-found: 9

