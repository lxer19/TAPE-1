URL: http://ptolemy.eecs.berkeley.edu/papers/96/jvlsi-dmm/jvlsi_dmm.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/96/jvlsi-dmm/
Root-URL: 
Email: Keywords  
Title: Complexity Management in System-level Design  
Author: Asawaree Kalavade Edward A. Lee 
Keyword: design space exploration, hardware-software codesign, design methodology management, design ow management, system-level design.  
Note: 1 of 22  To appear: Journal of VLSI Signal Processing.  
Abstract: The system-level design problem spans a large design space. Typically, the designer needs to explore possible target architectures, experiment with different tools, and work with a range of constraints and optimization criteria. This design process is quite complex and involves considerable bookkeeping and management, in addition to sophisticated design tools. We believe that managing the design process is an important (albeit often neglected) part of system-level design. The contribution of this paper is in two parts. First, we present a framework for systematically managing the design process. Secondly, we illustrate how this framework can be used to manage a realistic system-level design environment that consists of a suite of sophisticated hardware and software design tools. We begin by identifying some of the desirable features of system-level design methodology management. A candidate framework that manifests these features is presented. Complex design ows with iterative and conditional behavior can be specified within the framework. The framework also supports automated scheduling of tools in a well-defined design ow. It has been implemented as the DMM domain in Ptolemy. In the second part of the paper, we describe a system-level design environment case study that we have developed within this framework. The environment, called the Design Assistant, is a complete hardware-software codesign environment. It encapsulates various codesign tools for specification, partitioning, and synthesis; their interplay can be managed efficiently by the design methodology management framework. 
Abstract-found: 1
Intro-found: 1
Reference: <editor> Complexity Management in System-level Design 21 of 22 called Design Assistant, </editor> <title> consisting of a number of point tools (such as tools for estimation, hard ware-software partitioning, cosynthesis, and cosimulation) can be managed by the DMM frame work, making it possible to efficiently explore the system-level design space. 8.0 References </title>
Reference: [1] <author> J. Gong, D. D. Gajski, S. Narayan, </author> <title> Software Estimation from Executable Specifications, </title> <journal> Journal of Computer and Software Engineering, </journal> <note> 1994, vol.2, (no.3):239-58. </note>
Reference: [2] <author> Lisa Guerra, Miodrag Potkonjak, Jan Rabaey, </author> <title> System-level Design Guidance Using Algorithm Properties, </title> <booktitle> VLSI Signal Processing VII, </booktitle> <month> Oct. </month> <year> 1994, </year> <title> Edited by Jan Rabaey, </title> <editor> Paul M. Chau, John Eldon, </editor> <publisher> IEEE, </publisher> <address> New York. </address>
Reference: [3] <author> S. Kleinfelft, M. Guiney, J. K. Miller, and M. Barnes, </author> <title> Design Methodology Management, </title> <journal> Proc. of the IEEE, </journal> <volume> vol. 82, no. 2, </volume> <month> Feb. </month> <year> 1994, </year> <pages> pp. 231-250. </pages>
Reference-contexts: Design methodology is defined as the processes, techniques, or approaches employed in the solution of a problem. Design methodology management (DMM) is formally defined as definition, execution, and control of design methodologies in a exible and configurable way <ref> [3] </ref>. Design Methodology Management: Desirable Features 4 of 22 Complexity Management in System-level Design 2.0 Design Methodology Management: Desirable Features Our focus is primarily on design ow specification and management. We do not address issues of database management, multi-user operation, or distributed tool execution.
Reference: [4] <author> J. Buck, S. Ha, E. A. Lee, D. G. Messerschmitt, Ptolemy: </author> <title> a Framework for Simulating and Prototyping Heterogeneous Systems, </title> <journal> Intl. Journal of Computer Simulation, special issue on Simulation Software Development, Apr. 1994, </journal> <volume> vol. 4, </volume> <pages> pp. 155-182. </pages>
Reference-contexts: In Section 2.0, we identify the key requirements of a design methodology management framework. An infrastructure that supports these requirements is proposed in Section 3.0. We have implemented this framework within the Ptolemy <ref> [4] </ref> environment. Some details of the implementation are presented in Section 4.0. In the second part, we describe a system-level design environment case study that we have developed within this framework. In Section 5.0, we describe the Design Assistant, which is a complete hardware-software codesign environment.
Reference: [5] <author> S. Feldman, </author> <title> Make A Program for Maintaining Computer Programs, </title> <journal> Software Practice and Experience, 1979, </journal> <volume> Vol. 9, </volume> <pages> pp. 255-265. </pages>
Reference-contexts: Keeping track of the tools that need to be run is quite cumbersome. A mechanism that automatically determines the sequence of tool invocations is needed. This calls for a ow execution mechanism much like the make utility <ref> [5] </ref>. Design Flow Management Different types of tools, with varying input and output formats, are used in the system-level design process. In the very least, a mechanism to automatically detect incompatibilities between tools is required. Data translators could also be invoked automatically.
Reference: [6] <author> A. Kalavade, </author> <title> System-level Codesign of Mixed Hardware-Software Systems, </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Dissertation, University of California, Berkeley, </institution> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Ptolemy is an environment for the simulation and rapid prototyping of heterogeneous systems. The advantage of implementing the design methodology management framework as a domain within Ptolemy is that several other tools which we have developed (partitioning, synthesis, and simulation tools <ref> [6] </ref>) in Ptolemy can be accessed within the DMM framework in an integrated and seamless fashion. Stand-alone tools can also be integrated into the DMM framework. An additional advantage is that the existing Ptolemy data-structures, user-interface, database etc. are directly available to us. <p> The ow scheduler is essentially a dynamic dataow scheduler. We will not go into the details of the scheduler, which, along with issues of nondeterminacy, are described in <ref> [6] </ref>. Figure 5-c shows the control panel of DesignMaker. <p> We next describe this ow and the associated tools in some detail. Source (T1) outputs the SDF graph G specified by GraphName (say simple.sdf). G is then partitioned into hardware and software by the partitioning tool T2. The Design Assistant supports both manual and automated partitioning <ref> [6] </ref>. tion, which is to be partitioned, is automatically displayed by the partitioning tool (Figure 8-a). The partitioning tool also brings up a selection panel to aid in manual partitioning (Figure 8-b). The user can then select parts of the application and assign them to hardware or software. <p> Figure 9 shows the outputs generated by T3 for the graph simple.sdf shown in Figure 8. The outputs of T4 and T5 are shown in Figure 10. More details of the partitioning and hardware and software synthesis tools can be found in <ref> [6] </ref>. The Design Assistant thus contains a number of point tools for the various aspects of the codesign process. We have shown just one possible design ow for codesign.
Reference: [7] <author> D. Harrison, P. Moore, R. Spickelmier, A. R. </author> <title> Newton, Data Management and Graphics Editing in the Berkeley Design Environment, </title> <booktitle> Proc. of the Intl. Conference on Computer Aided Design (ICCAD), </booktitle> <address> Santa Clara, CA, USA, </address> <month> Nov. </month> <year> 1986, </year> <pages> pp. 24-27. </pages>
Reference-contexts: The ow shows the connectivity between tools and is constructed by instantiat ing tools from a library of design tools 6 . The design ow is stored internally in the Oct database <ref> [7] </ref> as a netlist. required. Note that this block is represented hierarchically in more detail in Figure 5-b. Also, note the use of optional ports (marked by the shaded rectangles) to express conditional behavior. The ow operates exactly like that described earlier in Section 3.1. <p> The DMM systems used in the physical VLSI design process focus primarily on data management (i.e., maintaining consistent versions of data) <ref> [7] </ref> and tool management (i.e., invoking a user-specified tool after ensuring that the preconditions for enabling it are satisfied) [11][12][13]. Commercial CAD frameworks such as the Falcon framework [14] also assist in tool and data management.
Reference: [8] <author> E. A. Lee, D. G. Messerschmitt, </author> <title> Synchronous Data Flow, </title> <booktitle> Proc. of the IEEE, Sept. 1987, </booktitle> <volume> vol. 75, no. 9, </volume> <pages> pp. 1235-1245. </pages>
Reference-contexts: Figure 7 shows a part of the Design Assistant implemented in the DMM domain. The design ow shown is targeted towards the design of signal processing applications specified in the synchronous dataow (SDF) model of computation <ref> [8] </ref>, running on an architecture consisting of a single programmable processor (in particular, the DSP 56000) and System-level Design using DMM Case Study Complexity Management in System-level Design 15 of 22 custom hardware (in particular, a standard-cell based hardware such as that synthesized by a high level synthesis tool like Hyper
Reference: [9] <author> J. M. Rabaey, C. Chu, P. Hoang, M. Potkonjak, </author> <title> Fast Prototyping of Datapath-Intensive Architectures, </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pp. 40-51, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: running on an architecture consisting of a single programmable processor (in particular, the DSP 56000) and System-level Design using DMM Case Study Complexity Management in System-level Design 15 of 22 custom hardware (in particular, a standard-cell based hardware such as that synthesized by a high level synthesis tool like Hyper <ref> [9] </ref>). Other variants in the architecture and design tools are possible by changing the appropriate parameters in the ow. We next describe this ow and the associated tools in some detail. Source (T1) outputs the SDF graph G specified by GraphName (say simple.sdf).
Reference: [10] <author> A. Kalavade, Jose Pino, E. A. Lee, </author> <title> Managing Complexity in Heterogeneous System Specification, Simulation, and Synthesis, </title> <booktitle> Proc. of Intl. Conference on Acoustics, Speech, and Signal Processing (ICASSP), </booktitle> <address> Detroit, Mich-igan, USA, </address> <month> May </month> <year> 1995, </year> <journal> vol. </journal> <volume> 5, </volume> <pages> pp. 2833-2836. </pages>
Reference-contexts: Note that this particular case study does not exhibit conditional ows unlike the multiprocessor example discussed in the paper. As mentioned earlier, though, DMM can handle conditional ows. The multiprocessor example has also been implemented as an independent environment using DMM <ref> [10] </ref>. 6.0 Related Work Design methodology management (DMM) as such is not new; traditional DMM systems Related Work Complexity Management in System-level Design 19 of 22 are used quite extensively in the physical VLSI design process.
Reference: [11] <author> T. Chiuch, R. Katz, </author> <title> A History Model for Managing the VLSI Design Process, </title> <booktitle> Proc. of the Intl. Conference on Computer Aided Design (ICCAD), </booktitle> <address> Santa Clara, CA, </address> <month> Nov. </month> <year> 1990, </year> <pages> pp. 358-361. </pages>
Reference: [12] <author> K. O. ten Bosch, P. Bingley, P. van der Wolf, </author> <title> Design Flow Management in the Nelsis CAD Framework, </title> <booktitle> Proc. of the 28th Design Automation Conference, </booktitle> <address> San Francisco, CA, USA, </address> <month> June </month> <year> 1991, </year> <pages> pp. 711-716. </pages>
Reference: [13] <author> Brockman, S. W. </author> <title> Director, The Hercules CAD Task Management System, </title> <booktitle> Proc. of the Intl. Conference on Computer Aided Design (ICCAD), </booktitle> <address> Santa Clara, CA, USA, </address> <month> Nov. </month> <year> 1991, </year> <pages> pp. 254-247. </pages>
Reference: [14] <institution> Falcon Framework Reference Manual, Mentor Graphics Corp., </institution> <address> 1001 Ridder Park Drive, San Jose, CA. </address>
Reference-contexts: The DMM systems used in the physical VLSI design process focus primarily on data management (i.e., maintaining consistent versions of data) [7] and tool management (i.e., invoking a user-specified tool after ensuring that the preconditions for enabling it are satisfied) [11][12][13]. Commercial CAD frameworks such as the Falcon framework <ref> [14] </ref> also assist in tool and data management. The NELSIS framework [12][15] provides a systematic representation and management mechanism for data and tools within a semantic database. CFI [16] defines standards for tool encapsulation and data models. Recent efforts address the ow management problem.
Reference: [15] <author> Pieter van der Wolf, </author> <title> Architecture of an Open and Efficient CAD Framework, </title> <type> Ph.D. Thesis, </type> <institution> Delft University of Technology, </institution> <month> May </month> <year> 1993. </year> <title> Acknowledgments 22 of 22 Complexity Management in System-level Design </title>
Reference: [16] <institution> CAD Framework Initiative. </institution>
Reference-contexts: Commercial CAD frameworks such as the Falcon framework [14] also assist in tool and data management. The NELSIS framework [12][15] provides a systematic representation and management mechanism for data and tools within a semantic database. CFI <ref> [16] </ref> defines standards for tool encapsulation and data models. Recent efforts address the ow management problem. The MMS framework [17] focuses on distributed tool execution and multi-user environments.
Reference: [17] <author> W. Allen, D. Rosenthal, K. Fidule, </author> <title> The MCC CAD Framework Methodology Management System, </title> <booktitle> Proc. of the 28th Design Automation Conference, </booktitle> <address> San Francisco, CA, USA, </address> <month> June </month> <year> 1991, </year> <pages> pp. 694-698. </pages>
Reference-contexts: The NELSIS framework [12][15] provides a systematic representation and management mechanism for data and tools within a semantic database. CFI [16] defines standards for tool encapsulation and data models. Recent efforts address the ow management problem. The MMS framework <ref> [17] </ref> focuses on distributed tool execution and multi-user environments. Some efforts approach the ow management problem from an AI angle [18][19], where the methodology and firing rules are stored in a knowledge-base and an inference engine determines the tool execution sequence.
Reference: [18] <author> D. W. Knapp, A. Parker, </author> <title> A Design Utility Manager: the ADAM Planning Engine, </title> <booktitle> Proc. of the 23rd Design Automation Conference, </booktitle> <address> Las Vegas, Nevada, USA, </address> <month> June </month> <year> 1986, </year> <pages> pp. 48-54. </pages>
Reference: [19] <author> M. Bushnell, S. W. </author> <title> Director, Automated Design Tool Execution in the Ulysses Design Environment, </title> <journal> IEEE Transactions on Computer Aided Design of Integrated Circuits and Systems, </journal> <month> March </month> <year> 1989, </year> <pages> pp. 279-287. </pages>
Reference: [20] <author> Allen Dewey, S. W. Director, Yoda: </author> <title> A Framework for the Conceptual Design of VLSI Systems, </title> <booktitle> Proc. of the Intl. Conference on Computer Aided Design (ICCAD), </booktitle> <address> Santa Clara, CA, USA, </address> <month> Nov. </month> <year> 1989, </year> <pages> pp 380-383. </pages>
Reference-contexts: The MMS framework [17] focuses on distributed tool execution and multi-user environments. Some efforts approach the ow management problem from an AI angle [18][19], where the methodology and firing rules are stored in a knowledge-base and an inference engine determines the tool execution sequence. Yoda <ref> [20] </ref>, a filter design system, has a knowledge-base of predictors (estimators). Predictors are used to determine the outcome of applying a particular tool and the results from such an exploration are used to construct a design plan (similar to a script), with feedback from the designer.
Reference: [21] <author> Andrea Casotto, A. R. </author> <title> Newton, Design Management Based on Design Traces, </title> <booktitle> Proc. of the 27th Design Automation Conference, </booktitle> <address> Orlando, Florida, USA, </address> <month> June </month> <year> 1990, </year> <pages> pp. 136-141. </pages>
Reference-contexts: The generated design plan is then automatically executed, where the actual tools are run. A trace-driven approach is proposed in <ref> [21] </ref>, where a sample design session (the sequence of tools run by the user) is saved and future design sessions can be automatically controlled by following this trace. We have attempted to extend some of these ideas to system-level design, where design space exploration and automated ow execution become important.
Reference: [22] <author> K. Buchenrieder, C. Veith, </author> <title> CoDES: A Practical Concurrent Design Environment, </title> <booktitle> Handouts of the 1st Intl. Workshop on Hardware/Software Codesign, </booktitle> <address> Estes Park, Colorado, USA, </address> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: We have attempted to extend some of these ideas to system-level design, where design space exploration and automated ow execution become important. We focus on design ow management. Our work bears some similarity with the CoDES <ref> [22] </ref> system. CoDES provides an open architecture for the integration of commercial and proprietary tools. A graphical representation of a design ow is translated to an internal Petri net representation. This is analyzed to determine firing rules. A codesign manager invokes the tools based on these firing rules.
Reference: [23] <author> P. Chou, E. A. Walkup, G. Borriello, </author> <title> Scheduling for Reactive Real-Time Systems, </title> <booktitle> IEEE Micro, </booktitle> <month> Aug. </month> <year> 1994, </year> <pages> pp. 37-47. </pages>
Reference: [24] <author> S. Kumar, J. H. Aylor, B. W. Johnson, W. A. Wulf, </author> <title> A Framework for Hardware/Software Codesign, Computer, Dec. </title> <booktitle> 1993, </booktitle> <volume> vol. 26, no. 12, </volume> <pages> pp. 39-45. </pages>
Reference: [25] <author> M. Theissinger, P. Stravers, H. Veit, </author> <title> Castle: An Interactive Environment for HW-SW Co-Design, </title> <booktitle> Proc. of the Third Intl. Workshop on Hardware/Software Codesign, </booktitle> <address> Grenoble, France, </address> <month> Sept. </month> <year> 1994, </year> <pages> pp. </pages> <month> 203-9. </month> <title> 9.0 Acknowledgments This research was part of the Ptolemy project, which is supported by the Advanced Research Projects Agency and the U.S. Air Force (under the RASSP program, </title> <booktitle> contract F33615 93-C-1317), </booktitle> <institution> the Semiconductor Research Corporation (SRC) (project 95-DC-324-016), the National Science Foundation (MIP-9201605), the State of California MICRO program, and the following companies: Bell Northern Research, Cadence, Dolby, Hitachi, Mentor Graphics, Mit subishi, Motorola, NEC, Pacific Bell, Philips, and Rockwell. </institution>
References-found: 26

