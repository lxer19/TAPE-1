URL: http://www-rfcc.cse.uconn.edu/www/Publications/Papers/McCartneyDefarge.ps
Refering-URL: http://www-rfcc.cse.uconn.edu/www/Cookie.html
Root-URL: 
Email: E-mail: robert@uconn.edu  
Title: DEFARGE: a real-time execution monitor for a case-based planner  
Author: Robert McCartney and Karl R. Wurst 
Address: Storrs, CT 06269-3155  
Affiliation: Department of Computer Science and Engineering University of Connecticut  
Abstract: In this paper we present the design and implementation of defarge, a real-time execution monitor designed to be part of an integrated case-based planning system. We discuss the role of such a monitor, its internal representation and control structure, and how this was implemented to be efficient enough for real time operation.
Abstract-found: 1
Intro-found: 1
Reference: [Abelson and Sussman, 1985] <author> Harold Abelson and Gerald Jay Sussman. </author> <title> Structure and interpretation of computer programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: Notably, this would not be possible using a singly-linked structure with front and end pointers (as in <ref> [Abelson and Sussman, 1985] </ref> Section 3.3.2, for example), since arbitrary deletions would require linear time to traverse to the point of deletion. For the pending state object, we use a modified priority queue with priorities corresponding to the expected time for the record.
Reference: [Aho et al., 1974] <author> Alfred V. Aho, John E. Hopcroft, and Jeffrey D. </author> <title> Ullmann. The design and analysis of computer algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: The structure we used could be called a "random-access adjustable priority queue"|one that supports the necessary functions as well as increasing or decreasing the priority of an arbitrary node. The algorithms are an extension of the algorithms given in <ref> [Aho et al., 1974] </ref>, which support insert and delete-min.
Reference: [Alterman, 1986] <author> Richard Alterman. </author> <title> An adaptive planner. </title> <booktitle> In Proceedings of the fifth national conference on artificial intelligence, </booktitle> <pages> pages 65-69, </pages> <address> Philadelphia, PA, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: Although that work used simulated execution, it made clear the underlying assumptions of non-projection and the role of the execution record in learning. Al-terman's adaptive planner <ref> [Alterman, 1986] </ref> discussed the use of execution-time repairs during plan execution based on experience. There is a good deal of recent work on integrating planning and execution, particularly as a response to uncertainty.
Reference: [Ambros-Ingerson and Steel, 1988] <author> Jose A. Ambros-Ingerson and Sam Steel. </author> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proceedings of the seventh national conference on artificial intelligence, </booktitle> <pages> pages 83-88, </pages> <address> Minneapolis, MN, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: The ipem system <ref> [Ambros-Ingerson and Steel, 1988] </ref>, extends the hierarchical planning model to include monitoring and execution. Although the approach is more flexible than ours, its reliance on hierarchical planning bodes ill for its performance.
Reference: [Firby, 1989] <author> R. James Firby. </author> <title> Adaptive execution in complex dynamic worlds. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Yale University, </institution> <year> 1989. </year>
Reference-contexts: Al-terman's adaptive planner [Alterman, 1986] discussed the use of execution-time repairs during plan execution based on experience. There is a good deal of recent work on integrating planning and execution, particularly as a response to uncertainty. Firby's robot planner <ref> [Firby, 1989] </ref> employs an execution system that chooses how to implement tasks in the plan based on the state of the world at execution time; the choice mechanism is set at execution time in "reactive action packages." A similarity between this and our work is the way computational effort (generating possible
Reference: [Georgeff and Lansky, 1987] <author> Michael P. Georgeff and Amy L. Lansky. </author> <title> Reactive reasoning and planning. </title> <booktitle> In Proceedings of the sixth national conference on artificial intelligence, </booktitle> <pages> pages 677-682, </pages> <address> Seattle, WA, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: The ipem system [Ambros-Ingerson and Steel, 1988], extends the hierarchical planning model to include monitoring and execution. Although the approach is more flexible than ours, its reliance on hierarchical planning bodes ill for its performance. The prs system <ref> [Georgeff and Lansky, 1987] </ref> gains efficiency by procedurally encoding its plans, and can reason about its own beliefs and intentions when faced with execution problems. While this may be lead to efficiency, the complexity is high, and a lot depends on the procedural encodings.
Reference: [Hammond, 1986] <author> Kristian J. Hammond. </author> <title> Case-based planning: an integrated theory of planning, learning, and memory. </title> <type> Technical Report YALEU/CSD/RR 488, </type> <institution> Department of Computer Science, Yale University, </institution> <year> 1986. </year> <type> (PhD Thesis). </type>
Reference-contexts: The total number of propagation updates, therefore, is limited to the number of propositions in the plan. 5 Related work in planning and execution The underlying model for integrated case-based planning and execution used here is modeled on chef <ref> [Hammond, 1986] </ref>. Although that work used simulated execution, it made clear the underlying assumptions of non-projection and the role of the execution record in learning. Al-terman's adaptive planner [Alterman, 1986] discussed the use of execution-time repairs during plan execution based on experience.
Reference: [McCartney, 1990] <author> Robert McCartney. </author> <title> Reasoning directly from cases in a case-based planner. </title> <booktitle> In Proceedings of the 12th annual conference of the Cognitive Science Society, </booktitle> <pages> pages 101-108, </pages> <address> Cambridge, MA, </address> <month> July </month> <year> 1990. </year> <month> 12 </month>
Reference-contexts: The system we present here, defarge, is designed to monitor executions as a part of the cookie system, a system that plans and prepares meals <ref> [McCartney, 1990] </ref>. Efficiency is of paramount concern: real-time operation is computationally demanding, especially if we want to support execution time plan repairs.
References-found: 8

