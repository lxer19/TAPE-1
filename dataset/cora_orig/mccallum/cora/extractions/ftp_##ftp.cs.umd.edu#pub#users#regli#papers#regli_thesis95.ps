URL: ftp://ftp.cs.umd.edu/pub/users/regli/papers/regli_thesis95.ps
Refering-URL: http://www.cs.umd.edu/~nau/students.html
Root-URL: 
Title: Geometric Algorithms for Recognition of Features from Solid Models  
Author: William C. Regli, III, Dana S. Nau 
Degree: Doctor of Philosophy, 1995  
Affiliation: Department of Computer Science  
Note: Abstract Title of Dissertation:  Dissertation directed by: Professor  
Abstract: Collaborative engineering has expanded the scope of traditional engineering design to include the identification and elimination of problems in the manufacturing process. Manufacturing features and feature-based representations have become an integral part of research on manufacturing systems, due to their ability to model the correspondence between design information and manufacturing activities. One necessary component of an integrated Computer Aided Design/Computer Aided Manufacturing (CAD/CAM) environment is a tool to automatically recognize manufacturing features from a CAD or solid model. In this thesis we present a methodology for recognizing a class of machining features and for addressing the computational issues involved in building tractable and scalable solutions for automated feature recognition. This approach is described for a class of volumetric features based on material removal volumes produced by operations on 3-axis vertical machining centers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ableson and Sussmann. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> MIT Press and McGraw-Hill, </publisher> <address> Cambridge, MA and New York, NY, </address> <year> 1985. </year> <note> ISBN 0-262-01077-1. </note>
Reference-contexts: The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler. The 3D Toolkit provides an extended set of higher-level API calls as well as Scheme <ref> [1] </ref> language interpreter based on the Elk Scheme [47] dialect. The Scheme language interface to ACIS includes both a separate development environment interpreter and an embeddable interpreter, so one can incorporate 3D Toolkit Scheme code into a C++ application.
Reference: [2] <author> Alfred Aho, Ravi Sethi, and Jeffery Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <address> MA, </address> <year> 1986. </year>
Reference-contexts: There may be a rule S ! ff that generates a specific type of feature or a rule T ! fl that generates a class of similar edge contours. The scene is then parsed much like a compiler parses a computer language <ref> [2] </ref>. During parsing the structural information embodied in the rules, such as the existence of a depression in the object, can be exploited. Utilizing these techniques, algorithms can recognize features and classify the shape of a solid. <p> To recognize the features, the grammar is used to parse the object. The grammar is used to produce the object in much the same way that a computer language compiler uses a grammar to determine if the program it has been given is in a specific computer language <ref> [2] </ref>: as the object is parsed, information about the features can be produced. Extensions of these concepts to the problem translation between differing feature representations can be found in [151].
Reference: [3] <author> Alfred V. Aho, John E. Hopcroft, and Jeffery D. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: An advantage of graph-based systems is the theoretical and algorithmic foundations of graph theory [75]. This affords the opportunity to exploit the mathematics of graph theory to define the problem and the opportunity to draw on the many algorithms that deal with searching, traversing, parsing, or matching graphs <ref> [3, 19, 145] </ref>. For a general reference on the combinatorial complexity of graph and grammatical approaches to feature recognition readers are referred to Peters [139]. Searching and Matching.
Reference: [4] <author> Seshagiri Rao Ala. </author> <title> Design methodology of boundary data structures. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 13-23, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: Woo [209] analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler [207] presents data structures for curved surfaces and their time and storage complexities. Ala <ref> [4, 5] </ref> builds on this work and introduces variations on the boundary representation data structure with advantages for certain applications.
Reference: [5] <author> Seshagiri Rao Ala. </author> <title> Performance anomalies in boundary data structures. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 12(2) </volume> <pages> 49-58, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Woo [209] analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler [207] presents data structures for curved surfaces and their time and storage complexities. Ala <ref> [4, 5] </ref> builds on this work and introduces variations on the boundary representation data structure with advantages for certain applications.
Reference: [6] <author> George Almasi, Raghu Karinthi, and Kankanahalli Srinivas. </author> <title> A parallel algorithm for computing set operations on loops. </title> <type> Technical Report TR 93-10, </type> <institution> 261 Department of Statistics and Computer Science, West Virginia University, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: In the domain of boundary representation modeling, Karinthi et al. [97] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al. <ref> [6] </ref>, these techniques are extended to more general loops of edges. Strip and Karasick [188] present techniques for performing solid modeling operations on a massively parallel SIMD (single instruction multiple data) computer.
Reference: [7] <author> J. Altemueller. </author> <title> Mapping from EXPRESS to physical file structure. Technical Report ISO TC184/SC4 Document N280, International Organization for Standardization, </title> <year> 1988. </year> <month> September. </month>
Reference-contexts: Once an information model is defined, data for representing a specific product can be represented using the STEP rules for mapping EXPRESS to a physical file <ref> [8, 7, 199] </ref>. The EXPRESS model defines the data entities that describe the class of objects in the domain. Defining Features in STEP. A means for describing generic classes of features for the purposes of data exchange has been evolving within the standardization community.
Reference: [8] <author> J. Altemueller. </author> <title> The STEP file structure. Technical Report ISO TC184/SC4 Document N279, International Organization for Standardization, </title> <year> 1988. </year> <month> September. </month>
Reference-contexts: Once an information model is defined, data for representing a specific product can be represented using the STEP rules for mapping EXPRESS to a physical file <ref> [8, 7, 199] </ref>. The EXPRESS model defines the data entities that describe the class of objects in the domain. Defining Features in STEP. A means for describing generic classes of features for the purposes of data exchange has been evolving within the standardization community.
Reference: [9] <author> L. Alting and H. Zhang. </author> <title> Computer aided process planning: The state of the art survey. </title> <journal> International Journal of Production Research, </journal> <volume> 27(4) </volume> <pages> 553-585, </pages> <year> 1989. </year>
Reference-contexts: This was the objective of one of the first feature recognition methodologies, that of Kyprianou [109]. More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing <ref> [9] </ref>. Numerous efforts have been made to automate process planning for machined components [35, 9, 20, 24, 130, 69, 206, 198]. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach. <p> More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach. <p> Although significant progress has been made in CAPP, there does not yet exist a completely automated planning system capable of handling moderately complex real-world parts. For more information on CAPP and a literature survey on plan generation, readers are referred to <ref> [9, 24, 206, 25] </ref>. 2.3.3 Manufacturability Evaluation Manufacturability evaluation and analysis involves the identification and diagnosis of manufacturing problems during the design phase.
Reference: [10] <author> Arlo L. Ames. </author> <title> Production ready feature recognition based automatic group technology part coding. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 161-169, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: This was the objective of one of the first feature recognition methodologies, that of Kyprianou [109]. More recently Ames <ref> [10] </ref> describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components [35, 9, 20, 24, 130, 69, 206, 198]. <p> Peters [139] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. Fields and Anderson [55] present a linear-time recognition algorithms for a variety of surface features. Other attempts to measure performance include timing results, most notably in <ref> [10, 109, 38] </ref>. Results of this type are highly dependent on the hardware, the software implementation, the domain of interest, and the particular test cases chosen for the timing tests. Further complicating matters is the fact that in many cases the feature recognition problems addressed vary greatly.
Reference: [11] <author> D. C. Anderson, M. R. Henderson, and S. M. Staley. </author> <title> Using syntactic pattern recognition to extract feature information from a solid geometric data base. </title> <booktitle> Computers in Mechanical Engineering, </booktitle> <month> September </month> <year> 1983. </year>
Reference-contexts: This work built on Jakubowski's, but many of the same limitations still exist: the class of shapes is limited and it does not allow for the reasoning about geometry and topology necessary for automated feature recognition. Henderson and Anderson <ref> [11] </ref> use a grammar to classify holes based on how they are manufactured. A 2D cross-section is obtained from a 3D CAD database. The grammar is then used to extract the holes from the cross-section, as illus trated in Figure 2.13.
Reference: [12] <author> Raja P. K. Banerjee, Vineet Goel, and Amar Mukherjee. </author> <title> Efficient parallel evaluation of CSG trees using fixed number of processors. </title> <editor> In Jaroslaw Rossignac, Joshua Turner, and George Allen, editors, </editor> <booktitle> Second Symposium 262 on Solid Modeling Foundations and CAD/CAM Applications, pages 313--322, </booktitle> <address> New York, NY 10036, USA, </address> <month> May </month> <year> 1993. </year> <booktitle> ACM SIGGRAPH, </booktitle> <publisher> ACM Press. </publisher> <address> Montreal, Canada. </address>
Reference-contexts: Banerjee et al. <ref> [12] </ref> have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory. In the domain of boundary representation modeling, Karinthi et al. [97] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes.
Reference: [13] <author> Carl Bass, Milton Capsimalis, Robert Covey, Azhar Kahn, Jeffrey Kowal-ski, Ron Levine, Brian Mathews, James Merry, Eve Podet, Scott Shep-paard, and Garry Wiegand. </author> <title> HOOPS Graphics System Reference Manual. Ithaca Software, </title> <address> 1301 Marina Village Parkway, Alameda CA 94501, v4.0 edition, </address> <month> June 30 </month> <year> 1994. </year> <note> Publication #05202-010000-5010. </note>
Reference-contexts: F-Rex uses a mixture of calls to the ACIS kernel and Scheme functions. HOOPS. Ithaca Software's HOOPS c fl <ref> [13] </ref> is a library of C-language routines for display and manipulation of 3D graphics. HOOPS is tightly integrated with ACIS to open display windows for ACIS solids and to control rendering. NIHCL.
Reference: [14] <author> Robert Berger. </author> <title> The undecidability of the domino problem. </title> <journal> Memoriors of the American Mathematical Society, </journal> <volume> (66), </volume> <year> 1966. </year> <institution> Providence, RI. </institution>
Reference-contexts: This means that a discrete version of the geometric problem must be devel 168 oped in which solid models and feature instances are parameterized from a countable set. With respect to (2) and (3), the feature recognition problem bears some resemblance to the problem of tiling the plane <ref> [100, 195, 14, 150] </ref>. Tiling describes the problem of asking, given templates for 2D tiles, whether the plane (or some subset of it) can be covered with instances of tiles.
Reference: [15] <author> G. Boothroyd and P. Dewhurst. </author> <title> Design for Assembly -A Designer's Handbook. </title> <institution> Department of Mechanical Engineering, University of Massachusetts at Amherst, </institution> <year> 1983. </year>
Reference-contexts: Figure 2.18 graphically presents the basic concepts behind DFMA. There have been a variety of approaches to implementing the DFMA methodology, ranging from building interdepartmental design teams to equipping designers with manufacturability checklists. The pioneering work of Boothroyd and Dewhurst <ref> [15] </ref> in establishing design-for-assembly guidelines has led to the development of several automated advisory systems [88, 83]. Boothroyd [16] 72 life-cycle considerations during the design phase. presents a review of DFMA methodologies in use at different companies.
Reference: [16] <author> Geoffrey Boothroyd. </author> <title> Product design for manufacture and assembly. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 26(9) </volume> <pages> 505-520, </pages> <year> 1994. </year>
Reference-contexts: There have been a variety of approaches to implementing the DFMA methodology, ranging from building interdepartmental design teams to equipping designers with manufacturability checklists. The pioneering work of Boothroyd and Dewhurst [15] in establishing design-for-assembly guidelines has led to the development of several automated advisory systems [88, 83]. Boothroyd <ref> [16] </ref> 72 life-cycle considerations during the design phase. presents a review of DFMA methodologies in use at different companies.
Reference: [17] <author> David A. Bourne and Cheng hua Wang. </author> <title> Design and manufacturing of sheet metal parts: Using features to resolve manufacturability problems. </title> <editor> In A. A. Busnaina, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 745-753, </pages> <address> New York, NY 10017, September 17-20, Boston, MA 1995. </address> <publisher> ASME. </publisher>
Reference-contexts: In the context of assembly planning, a feature might have to contain information about geometry, topology, and spatial motion. Similar feature types have been suggested for the domain of automated fixture planning to identify workpiece holding constraints [36]. Example: Sheet Metal Manufacturing. Recent work by Bourne and Wang <ref> [17] </ref> proposes several categories of features for sheet metal manufacturing.
Reference: [18] <author> Adrian Bowyer and John Woodwark. </author> <title> A Programmer's Geometry. </title> <address> Butter-worths, London, </address> <year> 1983. </year> <month> 263 </month>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla [116], Morten-son [128], Faux and Pratt [54] and Woodwark <ref> [211, 18] </ref>; as well as the proceedings from the recent conferences on solid modeling and applications [153, 154, 155]. For an overview of the architecture of solid modeling systems, readers are referred to [124].
Reference: [19] <author> Gilles Brassard and Paul Bratley. </author> <title> Algorithms: Theory and Practice. </title> <publisher> Pren--tice Hall Incorporated, </publisher> <address> NJ, </address> <year> 1988. </year>
Reference-contexts: An advantage of graph-based systems is the theoretical and algorithmic foundations of graph theory [75]. This affords the opportunity to exploit the mathematics of graph theory to define the problem and the opportunity to draw on the many algorithms that deal with searching, traversing, parsing, or matching graphs <ref> [3, 19, 145] </ref>. For a general reference on the combinatorial complexity of graph and grammatical approaches to feature recognition readers are referred to Peters [139]. Searching and Matching.
Reference: [20] <author> S. L. Brooks and M. L. Wolf. </author> <title> Overview of Allied Signal's XCUT system. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <title> Advances in Feature Based Manufacturing. </title> <publisher> Elsevier/North Holland, </publisher> <year> 1994. </year>
Reference-contexts: This work was survey-like in nature and did not provide any mathematical structure or definitions for the feature types; nor did it attempt to determine the relationship between features and manufacturing operations. In another industrial effort, Allied-Signal, as part of Brooks et al.'s <ref> [20] </ref> XCUT project, presented a classification of machining features for process planning. The two most mathematically comprehensive approaches for defining machining features are those of Chang [24] and Vandenbrande and Requicha [200]. Chang's feature definitions are based on the shape of the cutting tool and the cutting trajectory. <p> More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach.
Reference: [21] <author> C. M. Brown. PADL-2: </author> <title> A technical summary. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 2(2) </volume> <pages> 69-84, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester <ref> [21] </ref>. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models [116, 149]: 1. Decomposition approaches that model a solid as collections of primitive objects connected in some way.
Reference: [22] <author> W. Butterfield, M. Green, D. Scott, and W. Stoker. </author> <title> Part features for process planning. </title> <type> Technical Report R-86-PPP-01, </type> <institution> Computer Aided Manufacturing-International, Arlington, TX, USA, </institution> <month> November </month> <year> 1986. </year>
Reference-contexts: Precision: those representing tolerances, datums, and surface finishes. 4. Form: those for geometric entities, primitives, and boolean operations on primitives. 5. Manufacturing: those embodying domain specific-information about man ufacturing processes, process capabilities, and tooling requirements. A number of attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Although there are differences among these approaches, many of them share important similarities. For example, a machining feature usually corresponds to the volume of material that can be removed by a machining operation. <p> In this work, they provided a methodology for defining features and performing design in either boundary-representation or CSG-based solid modeling systems. Another CAM-I study conducted by the John Deere Company <ref> [22] </ref>, attempted to exhaustively enumerate all possible features that might be used for process planning of machined parts. This study attempted to produce a comprehensive list of all manufacturing features. <p> to implement a prototype of this parallel approach and some experimental results were presented to illustrate the potential payoffs resulting from the use of multi-processor computing techniques. 246 Chapter 10 Application to Other Domains As noted in Chapter 2, several attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Chapter 3 developed definitions for machining features, which in turn were used as the basis for developing the feature recognition algorithms presented in subsequent chapters.
Reference: [23] <author> Gene Bylinsky. </author> <title> The digital factory. </title> <booktitle> Fortune, </booktitle> <pages> pages 92-110, </pages> <month> November, 14 </month> <year> 1994. </year>
Reference-contexts: Introduction 1.1 Background and Motivation In the modern marketplace, computing is essential in all aspects of manufacturing activity. Computers have brought to life to terms like collaborative engineering and agile manufacturing, and have played a critical role in the re-invention of manufacturing in the United States <ref> [23] </ref>. In a continuing quest to decrease the time interval between the conceptualization of a product and first production, information technology has been fused with manufacturing practice: from design (graphics, visualization), to analysis (numerical methods, simulation), to synthesis (robotics, manufacturing planning). <p> The new world of highly Inter-networked collaborative engineering overflows with information|information of which until very recently human beings had been the sole custodians. This is changing as low-cost computational power and increasingly sophisticated software technologies are enabling development of intelligent systems for design and manufacturing <ref> [23, 205] </ref>. 1 Computers are essential tools for modern engineers, enhancing human abilities to bring better and more cost-effective products to market quickly and efficiently. Automation of design and manufacturing activities poses many difficult computational problems. As manufacturing activities are computerized, more fundamental computational issues emerge.
Reference: [24] <author> Tien-Chien Chang. </author> <title> Expert Process Planning for Manufacturing. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Precision: those representing tolerances, datums, and surface finishes. 4. Form: those for geometric entities, primitives, and boolean operations on primitives. 5. Manufacturing: those embodying domain specific-information about man ufacturing processes, process capabilities, and tooling requirements. A number of attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Although there are differences among these approaches, many of them share important similarities. For example, a machining feature usually corresponds to the volume of material that can be removed by a machining operation. <p> For manufacturing domains that involve discrete manufacturing operations (such as machining, sheet metal bending, forging, etc.), a feature can be thought of as a parameterized object. This notion of features is becoming increasingly common and is gaining widespread acceptance <ref> [152, 24] </ref>. 34 (a): form feature: hole (b): drilling features (c): form feature: shoulder (d): milling features Note that manufacturing features are not necessarily equivalent to the usual notion of form features. <p> In general, machining features model material removal operations. For example, a machining feature might be defined as the volume swept by a cutting tool during machining and can be represented as a parameterized solid <ref> [24, 131] </ref>. Machining features have been defined both as surface features and as volumetric features [144]. When defined as surfaces, machining features are collections of faces that are to be created by a machining operation. Historically, the dominant approach was to define machining features as collections of surfaces. <p> In another industrial effort, Allied-Signal, as part of Brooks et al.'s [20] XCUT project, presented a classification of machining features for process planning. The two most mathematically comprehensive approaches for defining machining features are those of Chang <ref> [24] </ref> and Vandenbrande and Requicha [200]. Chang's feature definitions are based on the shape of the cutting tool and the cutting trajectory. <p> Figure 2.12 provides an example of a typical design feature: a counter-sunk hole. There are several prototype systems based on this approach, including NEXT-Cut [35] and the Quick Turnaround Cell (QTC) <ref> [24] </ref>. They provided a feature-based design interface and model the part directly in terms of machining features. 44 In the commercial world, Parametric Technologies' Pro/ENGINEER and Bent--ley Systems' MicroStation (Figure 2.12) CAD packages are heavily dependent on the idea of designing with parametric features. <p> More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach. <p> Although significant progress has been made in CAPP, there does not yet exist a completely automated planning system capable of handling moderately complex real-world parts. For more information on CAPP and a literature survey on plan generation, readers are referred to <ref> [9, 24, 206, 25] </ref>. 2.3.3 Manufacturability Evaluation Manufacturability evaluation and analysis involves the identification and diagnosis of manufacturing problems during the design phase. <p> They presented a means of computing the alternate interpretations of parts using an algebra to operate on the features. * The AMPS process planning system <ref> [24] </ref> uses feature refinement heuristics to combine features into more complex configurations, or to divide features into multiple primitive features. <p> to implement a prototype of this parallel approach and some experimental results were presented to illustrate the potential payoffs resulting from the use of multi-processor computing techniques. 246 Chapter 10 Application to Other Domains As noted in Chapter 2, several attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Chapter 3 developed definitions for machining features, which in turn were used as the basis for developing the feature recognition algorithms presented in subsequent chapters.
Reference: [25] <author> Tien-Chien Chang and Richard A. Wysk. </author> <title> An Introduction to Automated Process Planning Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: The basic idea group technology is to develop a systematic means of categorizing things that are "similar" from a manufacturing point of view. By analogy, group technology attempts to do for manufacturing what the biological classifications genus/species/phylum do for the categorization of living things. As noted in <ref> [25] </ref>, group technology can be defined as the science of grouping similar problems with the objective that, by drawing on the knowledge of similarity, one can devise a single solution for sets of problems, thus saving time and effort. <p> Although significant progress has been made in CAPP, there does not yet exist a completely automated planning system capable of handling moderately complex real-world parts. For more information on CAPP and a literature survey on plan generation, readers are referred to <ref> [9, 24, 206, 25] </ref>. 2.3.3 Manufacturability Evaluation Manufacturability evaluation and analysis involves the identification and diagnosis of manufacturing problems during the design phase.
Reference: [26] <author> S. H. Chuang and M. R. Henderson. </author> <title> Three-dimensional shape pattern recognition using vertex classification and the vertex-edge graph. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: For example, if two features 55 share a volume, "filling in" when finding the first of them may render the other feature unrecognizable. Gavankar and Henderson <ref> [26, 60] </ref> explore graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. <p> For each of their feature classes, they present a linear-time algorithm. Graph Grammars. Methods based on graph grammars have been used both to recognize features and to translate between different feature representations. Chuang and Henderson <ref> [26] </ref> explored graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. In later work, Chuang and Henderson [27] were the first to note the need to address explicitly both computational complexity and de-cidability when defining the feature recognition problem.
Reference: [27] <author> S. H. Chuang and M. R. Henderson. </author> <title> Compound feature recognition by web grammar parsing. </title> <booktitle> Research in Engineering Design, </booktitle> <volume> 2(3) </volume> <pages> 147-158, </pages> <year> 1991. </year> <month> 264 </month>
Reference-contexts: Graph Grammars. Methods based on graph grammars have been used both to recognize features and to translate between different feature representations. Chuang and Henderson [26] explored graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. In later work, Chuang and Henderson <ref> [27] </ref> were the first to note the need to address explicitly both computational complexity and de-cidability when defining the feature recognition problem. This paper formalized the problem of recognizing features (including compound features) by parsing a graph-based representation of a part using a web grammar. grammar from CMU [141, 156].
Reference: [28] <author> J. K. Coles, R. H. Crawford, and K. L. Wood. </author> <title> Form feature recognition us-ing base volume decomposition. </title> <booktitle> In ASME Advances in Design Automation Conference, </booktitle> <pages> pages 281-297. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Efforts along similar lines have been undertaken at Arizona State University [169] and at the University of Texas at Austin <ref> [28] </ref>. The work at ASU 59 uses a decomposition approach based on half-space partitioning. The primi-tive cells created by this process are then categorized using a degrees-of-freedom (DOF) analysis, wherein each cell is considered relative to the possible machining directions on a three-axis machining center.
Reference: [29] <institution> Control Data Corporation. </institution> <note> ICEM PART Reference Manual, July 1994. Version 1.2. </note>
Reference-contexts: The basic idea is to have the computer aid the human process planner (for example) in choosing the features. Once a suitable set of features has been selected by the user, the process planning tool can generate operation sequences. This approach is adopted by Van Houten in the ICEM-PART <ref> [198, 29] </ref> process planning system. PART supports more than 30 feature types, each classified as face sets or face patterns. PART first makes an attempt to automatically identify features in the CAD model using a graph-based method.
Reference: [30] <author> J. Corney and D. E. R. Clark. </author> <title> Method for finding holes and pockets that connect multiple faces in 2 1 2 D objects. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 23(10) </volume> <pages> 658-668, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: In another related grammar-based effort, Kramer [105] presents a parser for converting a solid model representation of a design into a feature-based representation. 50 2.2.4.2 Graph-Based Methods Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search <ref> [39, 30] </ref> and those based on pattern matching [91, 141, 156]. A common difficulty for both categories of the graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Corney and Clark <ref> [30, 31, 34, 32, 33] </ref> have had success extending the capabilities of graph-based algorithms to more general 2 1 2 -dimensional parts. In particular, they built boundary-representation-based recognition procedures to find DP-features (depressions and protrusions) from CAD models for machined parts (similar to the feature types of [109]). <p> In this case the details of how the mass property routine has been implemented will be specific to the solid modeler and not part of the specification of the sorting problem. For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods <ref> [39, 91, 30, 31, 34, 32, 33] </ref>, the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters [139] uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself.
Reference: [31] <author> J. Corney and D. E. R. Clark. </author> <title> Face based feature recognition: Generalizing special cases. </title> <journal> International Journal of Computer Integrated Manufactur ing, </journal> <volume> 6(1 </volume> & 2):39-50, 1993. 
Reference-contexts: Corney and Clark <ref> [30, 31, 34, 32, 33] </ref> have had success extending the capabilities of graph-based algorithms to more general 2 1 2 -dimensional parts. In particular, they built boundary-representation-based recognition procedures to find DP-features (depressions and protrusions) from CAD models for machined parts (similar to the feature types of [109]). <p> In this case the details of how the mass property routine has been implemented will be specific to the solid modeler and not part of the specification of the sorting problem. For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods <ref> [39, 91, 30, 31, 34, 32, 33] </ref>, the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters [139] uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself.
Reference: [32] <author> J. Corney and D.E.R. Clark. </author> <title> A feature recognition algorithm for multiply connected depressions and protrusions in 2 1 2 D objects. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 161-169, </pages> <address> New York, NY 10036, USA, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher> <address> Austin, TX. </address>
Reference-contexts: Corney and Clark <ref> [30, 31, 34, 32, 33] </ref> have had success extending the capabilities of graph-based algorithms to more general 2 1 2 -dimensional parts. In particular, they built boundary-representation-based recognition procedures to find DP-features (depressions and protrusions) from CAD models for machined parts (similar to the feature types of [109]). <p> In this case the details of how the mass property routine has been implemented will be specific to the solid modeler and not part of the specification of the sorting problem. For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods <ref> [39, 91, 30, 31, 34, 32, 33] </ref>, the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters [139] uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself.
Reference: [33] <author> J. Corney and D.E.R. Clark. </author> <title> Efficient face-based feature recognition. </title> <editor> In Jaroslaw Rossignac, Joshua Turner, and George Allen, editors, </editor> <booktitle> Second Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 313-322, </pages> <address> New York, NY 10036, USA, </address> <month> May </month> <year> 1993. </year> <booktitle> ACM SIGGRAPH, </booktitle> <publisher> ACM Press. </publisher> <address> Montreal, Canada. </address>
Reference-contexts: Corney and Clark <ref> [30, 31, 34, 32, 33] </ref> have had success extending the capabilities of graph-based algorithms to more general 2 1 2 -dimensional parts. In particular, they built boundary-representation-based recognition procedures to find DP-features (depressions and protrusions) from CAD models for machined parts (similar to the feature types of [109]). <p> In this case the details of how the mass property routine has been implemented will be specific to the solid modeler and not part of the specification of the sorting problem. For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods <ref> [39, 91, 30, 31, 34, 32, 33] </ref>, the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters [139] uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself.
Reference: [34] <author> Jonathan R. Corney. </author> <title> Graph-Based Feature Recognition. </title> <type> PhD thesis, </type> <institution> Heriot-Watt University, Edinburgh, </institution> <address> England, </address> <month> October </month> <year> 1993. </year> <month> 265 </month>
Reference-contexts: Corney and Clark <ref> [30, 31, 34, 32, 33] </ref> have had success extending the capabilities of graph-based algorithms to more general 2 1 2 -dimensional parts. In particular, they built boundary-representation-based recognition procedures to find DP-features (depressions and protrusions) from CAD models for machined parts (similar to the feature types of [109]). <p> In this case the details of how the mass property routine has been implemented will be specific to the solid modeler and not part of the specification of the sorting problem. For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods <ref> [39, 91, 30, 31, 34, 32, 33] </ref>, the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters [139] uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself.
Reference: [35] <author> M. R. Cutkosky and J. M. Tenenbaum. </author> <title> Toward a framework for concur-rent design. </title> <journal> International Journal of Systems Automation: Research and Applications, </journal> <volume> 1(3) </volume> <pages> 239-261, </pages> <year> 1992. </year>
Reference-contexts: Stanford University's NEXT-Cut <ref> [35] </ref> used features for concurrent design of both the product and the manufacturing process while considering constraints imposed by a variety of manufacturing domains. <p> When the design is completed, the CAD model contains all the information about how the designer arrived at the final product. Figure 2.12 provides an example of a typical design feature: a counter-sunk hole. There are several prototype systems based on this approach, including NEXT-Cut <ref> [35] </ref> and the Quick Turnaround Cell (QTC) [24]. <p> More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach.
Reference: [36] <author> Diganta Das, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Estimation of setup time for machined parts: Accounting for work-holding constraints using a vise. </title> <editor> In A. A. Busnaina, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 619-631, </pages> <address> New York, NY 10017, September 17-20, Boston, MA 1995. </address> <publisher> ASME. </publisher>
Reference-contexts: In the context of assembly planning, a feature might have to contain information about geometry, topology, and spatial motion. Similar feature types have been suggested for the domain of automated fixture planning to identify workpiece holding constraints <ref> [36] </ref>. Example: Sheet Metal Manufacturing. Recent work by Bourne and Wang [17] proposes several categories of features for sheet metal manufacturing.
Reference: [37] <author> Diginta Das, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Reducing setup cost by automated generation of redesign suggestions. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 159-170. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Because of interactions among features, however, it is sometimes impossible to arrive at an improved design without carefully choosing a combination of modifications. Based on the manufacturability analysis methods of Gupta et al. [67], Das et al. <ref> [37, 65] </ref> have created an approach for suggesting improvements to a given design to reduce the number of setups required to machine a part. This involves using different machining operations to satisfy the geometric constraints put on 71 the part by the designer. <p> Redesign. This module formulates redesign suggestions based on plan information and the set of well-behaved features. By making modifications to the operations in the generated plans, it creates modified versions of the design that, in addition to satisfying design requirements, have improved manufactura-bility <ref> [65, 37] </ref>. The new designs are presented to the designer as alternative possibilities to be considered. At the current time, implementation of this module is in progress. 8.1.3 Integration of F-Rex with other Modules F-Rex communicates with the other IMACS modules using the well-behaved primary feature set, F .
Reference: [38] <author> Parag Dave and Hiroshi Sakurai. </author> <title> Maximal volume decomposition and recognition of intersecting features. </title> <editor> In A. A. Busnaina, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 553-568, </pages> <address> New York, NY 10017, September 17-20, Boston, MA 1995. </address> <publisher> ASME. </publisher>
Reference-contexts: However, it is limited to a domain of polyhedral parts with orthogonal faces and it does not provide a means of grouping features into feature-based models. More recently, Sakurai and his colleagues refined this cellular decomposition approach <ref> [158, 160, 159, 157, 38] </ref>. Such methods are computationally expensive, often producing a large number of cells with a large (often exponential) number of ways for them to be combined into features. <p> Peters [139] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. Fields and Anderson [55] present a linear-time recognition algorithms for a variety of surface features. Other attempts to measure performance include timing results, most notably in <ref> [10, 109, 38] </ref>. Results of this type are highly dependent on the hardware, the software implementation, the domain of interest, and the particular test cases chosen for the timing tests. Further complicating matters is the fact that in many cases the feature recognition problems addressed vary greatly. <p> Previous research on CAD/CAM and solid modeling applications lacks analyses of the complexity of the problems being solved. While there have been some notable efforts at measuring the complexity of individual approaches to feature recognition <ref> [40, 39, 55, 139, 38] </ref>, none have presented a general way of measuring the complexity of algorithms built on top of the existing infrastructure provided by a solid modeling system.
Reference: [39] <author> Leila De Floriani. </author> <title> Feature extraction from boundary models of three-dimensional objects. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 11(8), </volume> <month> August </month> <year> 1989. </year>
Reference-contexts: In another related grammar-based effort, Kramer [105] presents a parser for converting a solid model representation of a design into a feature-based representation. 50 2.2.4.2 Graph-Based Methods Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search <ref> [39, 30] </ref> and those based on pattern matching [91, 141, 156]. A common difficulty for both categories of the graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> These two types of interactions cover many, but not all, of the interactions possible for the six types of recognizable features. The drawbacks to this approach underscore the difficulty in developing an elegant and practical approach to automated feature recognition. De Floriani <ref> [39] </ref> introduces a graphical structure called a generalized edge-face adjacency graph (an example of which is shown in Figure 2.15) for recognition of features such as protrusions, depressions, through holes, and handles. <p> In this scheme, the features and the object are represented using the generalized face-edge adjacency graph in such a way that the features form biconnected and 53 object from De Floriani <ref> [39] </ref>. triconnected graphs. Hence, feature extraction becomes a problem of searching a graph for the biconnected and triconnected components and classifying them as one of the feature types. This approach uses graph theory and established, polynomial-time algorithms to produce a formal feature recognition system. <p> They define objects to be elements in a language generated by an augmented 57 topology graph grammar and then use their graph grammar to parse a rep-resentation of an object. The advantage of their graphical structure is that it contains both geometric and topological information (unlike the structures of <ref> [39, 53, 91, 161] </ref>). This graphical structure, as shown in Figure 2.16, can also be used to define general features. A grammar can then be defined to describe the class of objects that can be generated with a specific set of features. <p> Existing methods make mention of complexity but rarely attempt to classify it. As pointed out by Peters [139], both grammatical methods and some graph-based approaches are prone to combinatorial difficulties. Some of the approaches that have incorporated complexity measures <ref> [39, 55] </ref> are often representationally limited, covering a restricted domain of parts (e.g., polyhedra) and/or feature types (e.g., not manufacturing process features). <p> Many approaches have proven difficult to extend to the more complex surfaces and features found in realistic manufacturing problems. For example, graph-based approaches <ref> [39, 91] </ref> began appearing in great number nearly a decade ago, yet they continue to prove difficult to extend more complex feature types. Similarly, the feature instances encoded with rule-based and knowledge-based systems are often only those for simple isolated feature instances or those with easily described interactions. <p> Extensions to face-based representations are introduced in [40] and algorithms for their manipulation are analyzed. 153 Hoffmann [81] is an excellent source of worst-case complexity analysis for boolean operations on boundary data structures. In the feature recognition literature, De Floriani <ref> [39] </ref> presents an analysis of the complexity of her methodology. Peters [139] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. Fields and Anderson [55] present a linear-time recognition algorithms for a variety of surface features. <p> In this case the details of how the mass property routine has been implemented will be specific to the solid modeler and not part of the specification of the sorting problem. For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods <ref> [39, 91, 30, 31, 34, 32, 33] </ref>, the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters [139] uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself. <p> Previous research on CAD/CAM and solid modeling applications lacks analyses of the complexity of the problems being solved. While there have been some notable efforts at measuring the complexity of individual approaches to feature recognition <ref> [40, 39, 55, 139, 38] </ref>, none have presented a general way of measuring the complexity of algorithms built on top of the existing infrastructure provided by a solid modeling system.
Reference: [40] <author> Leila De Floriani and Bianca Falcidieno. </author> <title> A hierarchical boundary model for solid object representation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 7(1) </volume> <pages> 42-60, </pages> <month> January </month> <year> 1988. </year> <month> 266 </month>
Reference-contexts: The algorithm for recognizing the features defines the type of features that will be recognizable|those that form unique components in the generalized face-edge adjacency graph. Other work from the same research group <ref> [53, 40] </ref> uses an approach similar to this to generate a hierarchical feature structure to represent objects at higher levels of abstraction. Sakurai and Gossard [161] developed a system for recognition of user-defined features based on a similar graph search strategy. <p> Weiler [207] presents data structures for curved surfaces and their time and storage complexities. Ala [4, 5] builds on this work and introduces variations on the boundary representation data structure with advantages for certain applications. Extensions to face-based representations are introduced in <ref> [40] </ref> and algorithms for their manipulation are analyzed. 153 Hoffmann [81] is an excellent source of worst-case complexity analysis for boolean operations on boundary data structures. In the feature recognition literature, De Floriani [39] presents an analysis of the complexity of her methodology. <p> Previous research on CAD/CAM and solid modeling applications lacks analyses of the complexity of the problems being solved. While there have been some notable efforts at measuring the complexity of individual approaches to feature recognition <ref> [40, 39, 55, 139, 38] </ref>, none have presented a general way of measuring the complexity of algorithms built on top of the existing infrastructure provided by a solid modeling system.
Reference: [41] <author> Xin Dong. </author> <title> Geometric Feature Extraction for Computer-Aided Process Planning. </title> <type> PhD thesis, </type> <institution> Rensselaer Polytechnic Institute, </institution> <address> Troy, NY, USA, </address> <year> 1988. </year>
Reference-contexts: Recent work has applied Object-Oriented Design (OOD) methodologies to CAD tools to incorporate feature classes, customization, and recognition in a unified system [110]. In such systems, users can define classes of features relevant for individual applications. Another approach to customization is feature languages <ref> [41, 198] </ref>. <p> Expert systems perform well with limited sets of features and possible interactions but require large amounts of special-case information to be feasible for more realistic applications. Dong <ref> [41, 42, 43] </ref> pursued the development of feature recognition by frame-based reasoning to facilitate computer-aided process planning from a CAD system. To address this problem, he presented a prototype frame-based knowledge representation scheme for features and parts, along with a rudimentary feature description language. <p> Hence, it is often unclear what specific classes of parts and feature interactions can be handled by various existing approaches. The ability to handle interacting features has become an informal benchmark for feature recognition systems and has been the focus of numerous research efforts, among them <ref> [41, 58, 91, 117, 200] </ref>. What has emerged are several distinct types of feature interaction problems. One type is interaction during feature recognition, where an instance of one feature removes information require for the recognition of another. A second type 75 of feature interaction is dependent on the manufacturing process. <p> Some of the approaches that have incorporated complexity measures [39, 55] are often representationally limited, covering a restricted domain of parts (e.g., polyhedra) and/or feature types (e.g., not manufacturing process features). For those approaches which employ expert systems and knowledge-based reasoning <ref> [41, 91, 117, 200] </ref>, the inherent exponential nature of automated reasoning algorithms might impede their ability to scale to more complex problems. Further complicating matters is the fact that some approaches to feature recognition perform process planning "on the fly" as features are recognized. <p> The argument for the completeness of this thesis' approach serves to illustrate the utility of the general concept of completeness as developed in this chapter. 171 6.2.2 Feature Interactions The ability to recognize interacting features has been a stated goal of a number research efforts, among them <ref> [41, 58, 117, 91, 200] </ref>. While it is agreed upon as a problem of critical importance [210], however, the concept of feature interactions lies largely undefined in the general literature. In most cases, the definition for the term is implied, vague, or specific to one particular approach.
Reference: [42] <author> Xin Dong and Michael Wozny. FRAFES, </author> <title> a frame-based feature extraction system. </title> <booktitle> In International Conference on Computer Integrated Manufacturing, </booktitle> <pages> pages 296-305. </pages> <publisher> IEEE, </publisher> <address> May 23-25, Troy NY 1988. </address>
Reference-contexts: Expert systems perform well with limited sets of features and possible interactions but require large amounts of special-case information to be feasible for more realistic applications. Dong <ref> [41, 42, 43] </ref> pursued the development of feature recognition by frame-based reasoning to facilitate computer-aided process planning from a CAD system. To address this problem, he presented a prototype frame-based knowledge representation scheme for features and parts, along with a rudimentary feature description language.
Reference: [43] <author> Xin Dong and Michael Wozny. </author> <title> A method for generating volumetric features from surface features. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 161-169, </pages> <address> New York, NY 10036, USA, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher> <address> Austin, TX. </address>
Reference-contexts: Expert systems perform well with limited sets of features and possible interactions but require large amounts of special-case information to be feasible for more realistic applications. Dong <ref> [41, 42, 43] </ref> pursued the development of feature recognition by frame-based reasoning to facilitate computer-aided process planning from a CAD system. To address this problem, he presented a prototype frame-based knowledge representation scheme for features and parts, along with a rudimentary feature description language.
Reference: [44] <author> S. Drake and S. Sela. </author> <title> A foundation for features. </title> <journal> Mechanical Engineering, </journal> <volume> 111(1) </volume> <pages> 66-73, </pages> <year> 1989. </year>
Reference-contexts: One of the most successful efforts at unifying geometric representation, visualization, and manufacturing has been the ff 1 Project at the University of Utah <ref> [44, 192] </ref>. In ff 1 ("alpha one"), geometry is represented and visualized using NURBS. Mechanical designs can be created in ff 1 using a library of machining features|features that correspond directly to operations available in the ff 1 manufacturing cell.
Reference: [45] <author> D. D. Dunlop and V. R. Basili. </author> <title> A comparitive analysis of functional correctness. </title> <journal> Computing Surveys, </journal> <volume> 14(2) </volume> <pages> 229-244, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: Denver International Airport. 175 factorial ( integer m) s = 1; while m &gt; 0 do f m = m 1; return s; Readers interested in reading more on formal methods for program correctness (or verifying the proof in Figure 6.2) are referred to the extensive literature in this area <ref> [114, 126, 45, 59, 80, 125, 127] </ref>. This example is solely intended to show the complexity of generating formal proofs of program correctness; hence, we shall not present any description of the technique.
Reference: [46] <author> Mark Dunn. </author> <title> Industrial automation systems | product data representation and exchange | part 48: Integrated generic resources: Form features. </title> <type> Technical Report ISO/WD 10303-48, </type> <note> International Organization for Standardization, January 2 1992. Working draft. </note>
Reference-contexts: The EXPRESS model defines the data entities that describe the class of objects in the domain. Defining Features in STEP. A means for describing generic classes of features for the purposes of data exchange has been evolving within the standardization community. STEP Part 48 <ref> [46] </ref> deals with the characterization and rep 1 The organizations include: IGES/PDES Organization, a voluntary standards organization that participates in developing the STEP standards; many IPO/ISO committees including the Form Features Committee and the Manufacturing Technology Committee; PDES, Inc., a consortium of major companies whose goal is advancing the implementation of
Reference: [47] <author> R. Kent Dybvig. </author> <title> The Scheme Programming Language. </title> <publisher> Prentice Hall, </publisher> <year> 1987. </year>
Reference-contexts: The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler. The 3D Toolkit provides an extended set of higher-level API calls as well as Scheme [1] language interpreter based on the Elk Scheme <ref> [47] </ref> dialect. The Scheme language interface to ACIS includes both a separate development environment interpreter and an embeddable interpreter, so one can incorporate 3D Toolkit Scheme code into a C++ application. The 3D Toolkit also provides tools for extending and customizing this Scheme interface.
Reference: [48] <author> Ekstrom, Carlson & Co., Rockford, </author> <title> IL 61110. Cutting tools, </title> <note> 1992. Catalog #ST-92. </note>
Reference-contexts: An edge profile is an ordered collection of co-planar edges that, when joined end-to-end, form a closed, non-self-intersecting, continuous curve. Thus, the volume describing the 91 (a): ball end-mill (b): face mill a ball end-mill that could be used to create milling features with round bottom blends <ref> [48] </ref>; and (b) a face-milling tool [164]. milling feature can be modeled as a parameterized volume, as shown in In practice, it is impossible for a rotating cutting tool to sweep out a volume with convex corners. <p> While the parameters presented below are by no means exhaustive, they can be use to eliminate what are, with high probability, unrealistic feature instances. The values are based on a survey of common cutting tools as listed in cutting tool catalogs <ref> [48, 99, 164, 165, 194] </ref>. * For drilling features there are three parameters we consider: Flute length: Flute length refers to the length of the cutting surface of the tool. For the drilling tool in Figure 7.1 the flute length is l 4 . <p> H 3 is defined by the plane passing through point (p + v (128 + 32)) 2 The smallest radius tool assembly available from a survey of a variety of catalogs <ref> [48, 99, 164, 165, 194] </ref>. This value represents an approximate lower bound on the size of the tool assembly needed to hold a tool of a given radius.
Reference: [49] <author> J. L. Ellis, G. Kedem, T. C. Lyerly, D. G. Thielman, R. J. Marisa, P. J. Menon, and H. B. Voelcker. </author> <title> The RayCasting Engine and ray representations. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 255-267, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: Currently, most work has focused on parallel operations on CSG trees and other CSG representations of polygonal or polyhedral entities. Ellis et al. <ref> [49] </ref> have developed the RayCasting Engine: a hardware-implemented facility for sampling solids represented in CSG for a variety of purposes, including rendering and mass-property calculations.
Reference: [50] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: This feature set is used by the other subsystems for manufacturability analysis and redesign. 204 8.1.1 Software Tools Employed During the implementation of F-Rex and IMACS we employed a number of development tools. The majority of the code is written in the C++ language <ref> [101, 189, 191, 190, 113, 50] </ref> using version 3.0.1 of the AT&T C++ compiler from SUN Microsystems. The current system runs on SPARCStations model IPX, 2, 5, and 10-30 workstations under SUN OS 4.1.3.
Reference: [51] <author> H. A. ElMaraghy, K. F. Zhang, and H. Chu. </author> <title> A function-oriented modeler prototype. </title> <editor> In P. J. Guichelaar, editor, </editor> <booktitle> Design for Manufacturability, ASME Winter Annual Meeting, </booktitle> <pages> pages 57-62. </pages> <publisher> ASME, </publisher> <year> 1993. </year>
Reference-contexts: Hence, from a machining point of view, they can be considered to be instances of the same type of machining feature. Recently there has been interest in features for other manufacturing life-cycle considerations, such as features with associated functional engineering significance. El Maraghy et al. <ref> [51] </ref> proposed and implemented a design tool employing functional features. Functional features were also a key part of the work of Schulte et al. [168]. <p> Examples of advanced feature-based modeling systems capable of incorporating user-definable functional features include: The ASU Feature Testbed [173, 172], which includes a generic feature mapping shell that allows mapping features from one application to other; and the systems developed by Laakko and Mantyla [110] and El Maraghy et al. <ref> [51] </ref>. Some feature recognition systems have also incorporated the ability to have user-definable feature classes for the purposes of customization and extendibil-ity [161, 110]. Recent work has applied Object-Oriented Design (OOD) methodologies to CAD tools to incorporate feature classes, customization, and recognition in a unified system [110].
Reference: [52] <author> Hoda A. ElMaraghy and Waguih H. ElMaraghy. </author> <title> Computer-aided inspection planning. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <title> Advances in Feature Based Manufacturing. </title> <publisher> Elsevier/North Holland, </publisher> <year> 1994. </year>
Reference-contexts: Requirements and specifications for satisfactory manufacturing feature definitions in various domains have been addressed numerous times in previous work. Pratt [122] states that features should be capable of representing, among other things, component primitives, connectivity 33 between entities, and geometric, topological, and size constraints. As pointed out in <ref> [52] </ref>, some of the properties that features should be capable of encoding are: 1. Functional: those relating to application-specific functions and operations. 2. Assembly: those modeling the relations between design attributes and da tum hierarchies. 3. Precision: those representing tolerances, datums, and surface finishes. 4.
Reference: [53] <author> Bianca Falcidieno and Franca Giannini. </author> <title> Automatic recognition and representation of shape-based features in a geometric modeling system. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 48 </volume> <pages> 93-123, </pages> <year> 1989. </year>
Reference-contexts: Each such collection of features is an example of a feature model. In earlier literature, the term "feature model" meant different things to different researchers <ref> [53, 110] </ref>. This thesis synthesizes these concepts from earlier work in a definition of a feature-based model as a single, domain-specific feature-based representation of how to manufacture a given design. <p> The algorithm for recognizing the features defines the type of features that will be recognizable|those that form unique components in the generalized face-edge adjacency graph. Other work from the same research group <ref> [53, 40] </ref> uses an approach similar to this to generate a hierarchical feature structure to represent objects at higher levels of abstraction. Sakurai and Gossard [161] developed a system for recognition of user-defined features based on a similar graph search strategy. <p> They define objects to be elements in a language generated by an augmented 57 topology graph grammar and then use their graph grammar to parse a rep-resentation of an object. The advantage of their graphical structure is that it contains both geometric and topological information (unlike the structures of <ref> [39, 53, 91, 161] </ref>). This graphical structure, as shown in Figure 2.16, can also be used to define general features. A grammar can then be defined to describe the class of objects that can be generated with a specific set of features.
Reference: [54] <author> I. D. Faux and M. J. Pratt. </author> <title> Computational Geometry for Design and Manufacture. </title> <publisher> Ellis Horwood, </publisher> <year> 1979. </year>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla [116], Morten-son [128], Faux and Pratt <ref> [54] </ref> and Woodwark [211, 18]; as well as the proceedings from the recent conferences on solid modeling and applications [153, 154, 155]. For an overview of the architecture of solid modeling systems, readers are referred to [124].
Reference: [55] <author> M. C. Fields and D. C. Anderson. </author> <title> Fast feature extraction for machining applications. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 26(11), </volume> <month> November </month> <year> 1994. </year> <month> 268 </month>
Reference-contexts: Currently their approach only supports 2 1 2 -dimensional polyhedral objects and does not evaluate whether or not the DP-features are accessible for machining. Fields and Anderson <ref> [55] </ref> present an approach to feature recognition that overcomes some of the representation and efficiency problems common in previous work. Unlike pattern-based or decomposition-based recognition methodolo 56 gies, they categorize sets of faces on the surface of the part into classes of general machining features: protrusions, depressions, and passages. <p> Existing methods make mention of complexity but rarely attempt to classify it. As pointed out by Peters [139], both grammatical methods and some graph-based approaches are prone to combinatorial difficulties. Some of the approaches that have incorporated complexity measures <ref> [39, 55] </ref> are often representationally limited, covering a restricted domain of parts (e.g., polyhedra) and/or feature types (e.g., not manufacturing process features). <p> In the feature recognition literature, De Floriani [39] presents an analysis of the complexity of her methodology. Peters [139] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. Fields and Anderson <ref> [55] </ref> present a linear-time recognition algorithms for a variety of surface features. Other attempts to measure performance include timing results, most notably in [10, 109, 38]. <p> Previous research on CAD/CAM and solid modeling applications lacks analyses of the complexity of the problems being solved. While there have been some notable efforts at measuring the complexity of individual approaches to feature recognition <ref> [40, 39, 55, 139, 38] </ref>, none have presented a general way of measuring the complexity of algorithms built on top of the existing infrastructure provided by a solid modeling system.
Reference: [56] <author> James D. Foley, Andries van Dam, Steven K. Feiner, and John F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: For an overview of the architecture of solid modeling systems, readers are referred to [124]. The classic text on computer graphics of Foley and Van Dam <ref> [56] </ref> also covers solid modeling and its relationship to graphics and rendering. <p> In addition to operators common for handling 2D shapes in computer graphics <ref> [56] </ref> such as coordinate transformations, rotations, and scaling, there are additional functions specific to the nature of geometric modeling. Computer graphics is usually concerned with the production of images for display on a display device|the representation used to generate the picture is largely unimportant.
Reference: [57] <author> K. S. Fu. </author> <title> Syntactic Pattern Recognition and Applications. </title> <publisher> Prentice Hall Incorporated, </publisher> <address> NJ, </address> <year> 1982. </year>
Reference-contexts: This section presents an overview, by no means complete, of many existing approaches. For another summary of recent work readers are referred 47 to [98]. 2.2.4.1 Pattern Recognition Extracting features from a 3D solid model can be viewed as a problem of pattern recognition. Syntactic pattern recognition <ref> [57] </ref> uses structural information to create a description or a classification of the artifact. This approach to pattern recognition has widespread use in computer vision (picture recognition, scene analysis, classification of pictorial patterns), speech recognition, natural language processing, and recognition of written characters.
Reference: [58] <author> R. Gadh and F. B. Prinz. </author> <title> Recognition of geometric forms using the differential depth filter. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(11) </volume> <pages> 583-598, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The approach also provides for some forms of customizability by using of a feature-definition language to add new features into the system. To address the combinatorial complexities of feature recognition for realistic artifacts, recent work by Gadh and Prinz <ref> [58] </ref> describes techniques that abstract an approximation of the solid model and extract features from the approximation. They were the first to describe techniques for combating the combinatorial costs of handling complex and realistic industrial parts (i.e., those with thousands of topological entities). <p> Hence, it is often unclear what specific classes of parts and feature interactions can be handled by various existing approaches. The ability to handle interacting features has become an informal benchmark for feature recognition systems and has been the focus of numerous research efforts, among them <ref> [41, 58, 91, 117, 200] </ref>. What has emerged are several distinct types of feature interaction problems. One type is interaction during feature recognition, where an instance of one feature removes information require for the recognition of another. A second type 75 of feature interaction is dependent on the manufacturing process. <p> Complexity. Computational complexity is a problematic issue for many approaches to feature recognition. As with problems in computational intelligence, the computer time grows tremendously when dealing with realistic situations <ref> [58] </ref>. The expense required to maintain the rules or perform searches and geometric computations can be difficult to manage. Because these will eventually be desirable to represent, it is important to attempt to measure computational complexity. Existing methods make mention of complexity but rarely attempt to classify it. <p> The argument for the completeness of this thesis' approach serves to illustrate the utility of the general concept of completeness as developed in this chapter. 171 6.2.2 Feature Interactions The ability to recognize interacting features has been a stated goal of a number research efforts, among them <ref> [41, 58, 117, 91, 200] </ref>. While it is agreed upon as a problem of critical importance [210], however, the concept of feature interactions lies largely undefined in the general literature. In most cases, the definition for the term is implied, vague, or specific to one particular approach.
Reference: [59] <author> J. D. Gannon, R. B. Hamlet, and H. D. Mills. </author> <title> Theory of modules. </title> <journal> Transactions on Software Engineering, </journal> <volume> 13(7) </volume> <pages> 820-829, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Formally, program correctness is defined as showing that a given program is correct with respect to some functional specification f . For purely illustrative purposes, Figure 6.1 presents an example program and Figure 6.2 the formal proof of its correctness using Mills' functional semantics method <ref> [59, 125, 127] </ref>. <p> Denver International Airport. 175 factorial ( integer m) s = 1; while m &gt; 0 do f m = m 1; return s; Readers interested in reading more on formal methods for program correctness (or verifying the proof in Figure 6.2) are referred to the extensive literature in this area <ref> [114, 126, 45, 59, 80, 125, 127] </ref>. This example is solely intended to show the complexity of generating formal proofs of program correctness; hence, we shall not present any description of the technique.
Reference: [60] <author> P. Gavankar and M. R. Henderson. </author> <title> Graph-based extraction of protrusions and depressions from boundary representations. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(7) </volume> <pages> 442-450, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: For example, if two features 55 share a volume, "filling in" when finding the first of them may render the other feature unrecognizable. Gavankar and Henderson <ref> [26, 60] </ref> explore graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part.
Reference: [61] <author> W. Wayt Gibbs. </author> <title> Software's chronic crisis. </title> <journal> Scientific American, </journal> <volume> 271(3), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: This has been extensively documented in the mainstream as well as science media. For example, Petroski [140] describes some of the hazards caused by analysis software for civil engineering and a recent cover story 174 in Scientific American <ref> [61] </ref> describes some of the significant obstacles that still need to be overcome in the design and implementation of large software systems. 1 In the following two sections, we propose definitions for correctness and soundness of feature recognition systems and discuss how these issues can be addressed. 6.3.1 Correctness A program
Reference: [62] <author> N. N. Z. Gindy. </author> <title> A hierarchical structure for form features. </title> <journal> International Journal of Production Research, </journal> <volume> 27(12) </volume> <pages> 2089-2103, </pages> <year> 1989. </year>
Reference-contexts: Precision: those representing tolerances, datums, and surface finishes. 4. Form: those for geometric entities, primitives, and boolean operations on primitives. 5. Manufacturing: those embodying domain specific-information about man ufacturing processes, process capabilities, and tooling requirements. A number of attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Although there are differences among these approaches, many of them share important similarities. For example, a machining feature usually corresponds to the volume of material that can be removed by a machining operation. <p> Classifying machining features. There have been numerous attempts to classify machining features and devise feature hierarchies. In addition to the MRSEV Library for 3-axis machining features of Kramer [108, 107] mentioned in the next section, Nau et al. [130] developed a machining feature library for process planning. Similarly, Gindy <ref> [62] </ref> presented a feature hierarchy describing the geometric information required for a class of form features for process planning. Figure 2.10 presents a machining feature taxonomy developed by Laakko and Mantyla [110]. In addition to academic efforts, there have been numerous feature categorization attempts made in industry. <p> to implement a prototype of this parallel approach and some experimental results were presented to illustrate the potential payoffs resulting from the use of multi-processor computing techniques. 246 Chapter 10 Application to Other Domains As noted in Chapter 2, several attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Chapter 3 developed definitions for machining features, which in turn were used as the basis for developing the feature recognition algorithms presented in subsequent chapters.
Reference: [63] <author> Keith E. Gorlen. </author> <title> The NIH Class Library Reference Manual. </title> <booktitle> The National Institutes of Health, </booktitle> <address> Bethesda, Maryland, </address> <month> April </month> <year> 1990. </year> <note> Revision 3.10. </note>
Reference-contexts: HOOPS. Ithaca Software's HOOPS c fl [13] is a library of C-language routines for display and manipulation of 3D graphics. HOOPS is tightly integrated with ACIS to open display windows for ACIS solids and to control rendering. NIHCL. The NIH C++ Class Library <ref> [64, 63] </ref> (previously known as the "OOPS" Class Library) is a portable, UNIX-system-compatible C++ class library from the National Institutes of Health. The current IMACS implementation is based on version 3.14 of the library, which provides method functions for common data structures such as lists, sets, stacks, and arrays.
Reference: [64] <author> Keith E. Gorlen, Sanford M. Orlow, and Perry S. Plexico. </author> <title> Data Abstraction and Object Oriented Programming in C++. </title> <publisher> John Wiley & Sons, </publisher> <year> 1990. </year> <note> ISBN 0471 92346 X. 269 </note>
Reference-contexts: HOOPS. Ithaca Software's HOOPS c fl [13] is a library of C-language routines for display and manipulation of 3D graphics. HOOPS is tightly integrated with ACIS to open display windows for ACIS solids and to control rendering. NIHCL. The NIH C++ Class Library <ref> [64, 63] </ref> (previously known as the "OOPS" Class Library) is a portable, UNIX-system-compatible C++ class library from the National Institutes of Health. The current IMACS implementation is based on version 3.14 of the library, which provides method functions for common data structures such as lists, sets, stacks, and arrays.
Reference: [65] <author> Diganta Das Satyandra K. Gupta and Dana S. Nau. </author> <title> Generating redesign suggestions to reduce setup cost: A step towards automated redesign. </title> <booktitle> Computer Aided Design, </booktitle> <year> 1995. </year> <note> Also available as University of Maryland ISR TR 95:39,CS-TR-3439, UMIACS-TR-95-36. </note>
Reference-contexts: Because of interactions among features, however, it is sometimes impossible to arrive at an improved design without carefully choosing a combination of modifications. Based on the manufacturability analysis methods of Gupta et al. [67], Das et al. <ref> [37, 65] </ref> have created an approach for suggesting improvements to a given design to reduce the number of setups required to machine a part. This involves using different machining operations to satisfy the geometric constraints put on 71 the part by the designer. <p> Redesign. This module formulates redesign suggestions based on plan information and the set of well-behaved features. By making modifications to the operations in the generated plans, it creates modified versions of the design that, in addition to satisfying design requirements, have improved manufactura-bility <ref> [65, 37] </ref>. The new designs are presented to the designer as alternative possibilities to be considered. At the current time, implementation of this module is in progress. 8.1.3 Integration of F-Rex with other Modules F-Rex communicates with the other IMACS modules using the well-behaved primary feature set, F .
Reference: [66] <author> S. K. Gupta, Diganta Das, William C. Regli, and Dana S. Nau. </author> <title> Current trends and future challenges in automated manufacturability analysis. </title> <booktitle> In Proceedings of ASME International Computers in Engineering Conference, </booktitle> <year> 1995. </year> <note> Also available as University of Maryland ISR TR 95:16. </note>
Reference-contexts: can be found, then the given design is considered unmachinable; otherwise, the manufacturability rating for the design is the rating of the best operation plan. 70 For a survey of recent literature in the area of computer-aided manufactura--bility analysis for a wide variety of manufacturing domains, readers are referred to <ref> [66] </ref>. 2.3.4 Automated Redesign Automatic generation of suggestions for redesign goes hand in hand with manu-facturability evaluation. For a manufacturability evaluation tool to be effective, it is not adequate for the tool to simply produce a rating component and a list of manufacturing problems.
Reference: [67] <author> S. K. Gupta and D. S. Nau. </author> <title> A systematic approach for analyzing the manufacturability of machined parts. </title> <booktitle> Computer Aided Design, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: For example, there must be a set of features that can be used to generate a sequence of machining operations, meet the tolerance requirements of the design, and ensure that, at each step, the intermediate workpiece geometry is suitable for fixturing and setup. Gupta et al. <ref> [67] </ref> describe a methodology for early evaluation of manufac-turability for prismatic machining components. Their methodology identifies all machining operations that can be used to create a given design and, using those operations, generates different operation plans for machining the part. <p> Because of interactions among features, however, it is sometimes impossible to arrive at an improved design without carefully choosing a combination of modifications. Based on the manufacturability analysis methods of Gupta et al. <ref> [67] </ref>, Das et al. [37, 65] have created an approach for suggesting improvements to a given design to reduce the number of setups required to machine a part. This involves using different machining operations to satisfy the geometric constraints put on 71 the part by the designer. <p> Hence, the set of primary feature instances is suitable for performing many downstream applications (such as manufacturing planning or manufacturability analysis) [70]. The truncation operation will depend upon the other features used to generate the plan, and is discussed in greater detail in <ref> [67, 71, 70] </ref>. (a): part (b): maximal drilling feature (c): well-behaved primary drilling feature side views). <p> Such algorithms have been developed in the context of generating and evaluating alternative machining plans <ref> [68, 67, 70] </ref>, but are beyond the scope of feature recognition per se. In this section we develop criteria to eliminate obviously inaccessible features by calculating an approximation of a features accessibility volume acc (f ) from its removal volume rem (f ) and effective removal volume eff (f ). <p> The cost and time for machining plans that satisfy the design requirements are used to estimate a rating of the part's manufacturability <ref> [67, 70] </ref>. Redesign. This module formulates redesign suggestions based on plan information and the set of well-behaved features. By making modifications to the operations in the generated plans, it creates modified versions of the design that, in addition to satisfying design requirements, have improved manufactura-bility [65, 37].
Reference: [68] <author> S. K. Gupta, D. S. Nau, W. C. Regli, and G. Zhang. </author> <title> A methodology for systematic generation and evaluation of alternative operation plans. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <title> Advances in Feature Based Manufacturing. </title> <publisher> Elsevier/North Holland, </publisher> <year> 1994. </year>
Reference-contexts: Such algorithms have been developed in the context of generating and evaluating alternative machining plans <ref> [68, 67, 70] </ref>, but are beyond the scope of feature recognition per se. In this section we develop criteria to eliminate obviously inaccessible features by calculating an approximation of a features accessibility volume acc (f ) from its removal volume rem (f ) and effective removal volume eff (f ).
Reference: [69] <author> S. K. Gupta, P. N. Rao, and N. K. Tewari. </author> <title> Development of a CAPP system for prismatic parts using feature based design concepts. </title> <journal> The International Journal of Advanced Manufacturing Technology, </journal> <volume> 7 </volume> <pages> 306-313, </pages> <year> 1992. </year>
Reference-contexts: More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach.
Reference: [70] <author> Satyandra K. Gupta. </author> <title> Automated Manufacturability Analysis of Machined Parts. </title> <type> PhD thesis, </type> <institution> The University of Maryland, College Park, MD, </institution> <year> 1994. </year>
Reference-contexts: bounding the area swept by the milling tool. 1 Note that b (rem (f)) and b (P ) are both 2D entities; hence their regularized intersection will also be a uniformly 2D entity. 89 In illustrations and figures of features in this thesis we adopt the conventions used by Gupta <ref> [70] </ref>. <p> Otherwise, e is an open edge. Figure 3.8, from Gupta <ref> [70] </ref>, shows three examples of milling profiles along with the edge classifications of each profile. Intuitively, open and closed edges attempt to categorize the nature of machining a milling profile, during which the cutting tool cannot cross any closed edge. <p> Crossing a closed edge implies that the tool is gouging into the final part shape. Crossing an open edge, on the other hand, is usually permissible and amounts to tool motion outside the workpiece. In this thesis we adopt the convention used by Gupta <ref> [70] </ref> with regard to listing edges in an edge-loop: edges in an outer edge-loop are listed clockwise and the edges in any inner edge-loops are listed counter-clockwise. <p> Since each FBM is basically a volumetric set cover of the delta volume produced from the feature alternatives, models can be generated with variations on set covering techniques [147, 137], using pruning heuristics to discard unpromising FBMs. This was the approach taken to manufacturability by Gupta <ref> [70] </ref>. 3.3 Primary and Well-Behaved Machining Fea tures For arbitrary manufacturing domains, the set of all valid features V can be unmanageably large (even infinite). Hence it is necessary to isolate a set of representative feature instances from the set of possible valid features. <p> In particular, we define the set of primary features by imposing restrictions on the set of possible features. It has been shown that by manipulating primary features, one can generate and reason about the other feature instances of interest <ref> [70] </ref>. For an arbitrary part P there exists a set of valid features V. One immediate observation is that given two features f and g in V, if f 's effect on the workpiece is subsumed by g's effect on the workpiece, then f can be ignored. <p> When these surfaces occur on the boundary of a part P they can be considered a subset of 105 (a): stock S (b): part P (c): non-primary (d): non-primary (e): primary (from <ref> [70] </ref>). 106 (a): stock S (b): part P (c): not primary (too small) (d): not primary (too large) (f): primary with offsetting when the radius of a milling tool is taken into account. <p> Hence, the set of primary feature instances is suitable for performing many downstream applications (such as manufacturing planning or manufacturability analysis) <ref> [70] </ref>. The truncation operation will depend upon the other features used to generate the plan, and is discussed in greater detail in [67, 71, 70]. (a): part (b): maximal drilling feature (c): well-behaved primary drilling feature side views). <p> Hence, the set of primary feature instances is suitable for performing many downstream applications (such as manufacturing planning or manufacturability analysis) [70]. The truncation operation will depend upon the other features used to generate the plan, and is discussed in greater detail in <ref> [67, 71, 70] </ref>. (a): part (b): maximal drilling feature (c): well-behaved primary drilling feature side views). <p> Note that there exist situations where this yields an approximation of a primary feature; however, for purposes of machining <ref> [70] </ref>, this approximation produces satisfactory results. 3 6. Truncate [70] the features (in the example, truncate h max ) to get the instances of the primary drilling features, as shown in Figure 4.11 (d) for h 8 . <p> Note that there exist situations where this yields an approximation of a primary feature; however, for purposes of machining <ref> [70] </ref>, this approximation produces satisfactory results. 3 6. Truncate [70] the features (in the example, truncate h max ) to get the instances of the primary drilling features, as shown in Figure 4.11 (d) for h 8 . <p> If it does not extend beyond the stock, exit and return an empty list of features. 5. Determine a location for a maximal drilling feature h max , as shown in 6. Truncate <ref> [70] </ref> the feature (in the example, truncate h max ) to get the instance of the primary drilling feature, as shown in Figure 4.11 (d) for h 8 . 7. <p> In this step, the geometry of the profile is used to calculate an upper bound on the tool size. For this, we employ the algorithms developed by Gupta <ref> [70] </ref>. 2. Alteration of the profile. In some profiles, the estimation of tool size might reveal machinability problems. <p> The tool can move on or outside these edges during machining. Again, we have used algorithms developed by Gupta <ref> [70] </ref>. 7.3.1 Profile Alteration In some profiles, the estimation of tool size might reveal machinability problems. <p> Such algorithms have been developed in the context of generating and evaluating alternative machining plans <ref> [68, 67, 70] </ref>, but are beyond the scope of feature recognition per se. In this section we develop criteria to eliminate obviously inaccessible features by calculating an approximation of a features accessibility volume acc (f ) from its removal volume rem (f ) and effective removal volume eff (f ). <p> Tolerancing Module. This module is a prerequisite to the manufacturability analysis tool. The Tolerancing module allows the designer to associate a limited 208 number of ANSI Y14.5 tolerances with the solid model of the design. This tool is further described in <ref> [70] </ref>. Currently, F-Rex does not make use of this tolerance information when generating feature instances. Manufacturability Analysis. <p> The cost and time for machining plans that satisfy the design requirements are used to estimate a rating of the part's manufacturability <ref> [67, 70] </ref>. Redesign. This module formulates redesign suggestions based on plan information and the set of well-behaved features. By making modifications to the operations in the generated plans, it creates modified versions of the design that, in addition to satisfying design requirements, have improved manufactura-bility [65, 37]. <p> Example: Machining. As presented earlier in Chapter 3, machining features are volumes that correspond directly to the actions of individual cutting tools during a machining operation. The parameters of the feature volume can be used to calculate accessibility, tool size, tool path, and cutting speeds and feeds <ref> [70] </ref> for the machining operation that created it. Example: Automated Assembly Planning. One major aspect of the automated assembly planning problem is reasoning about how individual components can be configured using robotic manipulators. <p> The basic concept is that primary features, if defined properly for a given manufacturing domain, can be used and manipulated to generate and reason about all of the other feature instances of interest <ref> [70] </ref>. For an arbitrary part P there exists a set of valid features V; we define the set P (P V) of primary instances by building an equivalence relation: 250 1. <p> In the machining domain, one way to define primariness of features is by using a restricted form of volumetric maximality, as was done in this thesis. This is not the only way to define primary features for machining. The definition adopted in this thesis (and that of Gupta <ref> [70] </ref>) does have several intuitively appealing justifications of why these features are good for automated planning| in particular the fact that a primary feature volumetrically contains all features that might actually be used to produce reasonable machining plans.
Reference: [71] <author> Satyandra K. Gupta, Thomas R. Kramer, Dana S. Nau, William C. Regli, and Guangming Zhang. </author> <title> Building MRSEV models for CAM applications. </title> <booktitle> Advances in Engineering Software, </booktitle> 20(2/3):121-139, 1994. <volume> 270 </volume>
Reference-contexts: Hence, the set of primary feature instances is suitable for performing many downstream applications (such as manufacturing planning or manufacturability analysis) [70]. The truncation operation will depend upon the other features used to generate the plan, and is discussed in greater detail in <ref> [67, 71, 70] </ref>. (a): part (b): maximal drilling feature (c): well-behaved primary drilling feature side views).
Reference: [72] <author> Satyandra K. Gupta, William C. Regli, and Dana S. Nau. </author> <title> Manufacturing feature instances: Which ones to recognize? In Jaroslaw Rossignac, </title> <editor> Joshua Turner, and George Allen, editors, </editor> <booktitle> Third Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <address> New York, NY, USA, </address> <month> May 17-19 </month> <year> 1995. </year> <booktitle> ACM SIGGRAPH and the IEEE Computer Society, </booktitle> <publisher> ACM Press. </publisher> <address> Salt Lake City, Utah. </address>
Reference-contexts: Therefore, these 24 possible feature instances result in 24 3 different feature-based models that describe the notched regions of the part (when the through holes are taken into account the total number of FBMs is 24 3 2 8 ). An earlier version of this proof was presented in <ref> [72] </ref>; similar results have been reported by Han and Requicha [74]. In Definition 4.1.2, the feature recognition problem has been combined with the need to select an optimal set of features for some downstream application. <p> Given that validity is a term relative to the downstream application at hand, even within the context of individual applications validity is defined on a largely ad hoc basis. In machining, as pointed out by Gupta et al. <ref> [72] </ref>, a natural way of classifying the features is to partition them into those that we consider valid for manufacturing planning and those that we consider invalid|i.e., those unlikely to occur in any reasonable manufacturing plan.
Reference: [73] <author> JungHyun Han and Aristides A. G. Requicha. </author> <title> Incremental recognition of machining features. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 143-150. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: After filling frames with the trace information in the part, the system classifies the partial frames and attempts to complete the frame information for those that appear promising, using a variety of geometric reasoning and computational geometry techniques. At USC, recent work by Han and Requicha <ref> [73] </ref> has enhanced Vandenbrande's work and integrated it with feature-based design through an incremental approach. At Purdue, Trika has extended some of the results of Marefat. <p> As noted in Section 2.4, trace-based techniques have been addressed previously by a number of researchers <ref> [117, 200, 73] </ref>.
Reference: [74] <author> JungHyun Han and Aristides A. G. Requicha. </author> <title> Integration of feature-based design and feature recognition. </title> <editor> In A. A. Busnaina, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 569-578, </pages> <address> New York, NY 10017, September 17-20, Boston, MA 1995. </address> <publisher> ASME. </publisher>
Reference-contexts: This DOF approach has several computational drawbacks, among them that it appears to be computationally intensive, as pointed out by Han and Requicha <ref> [74] </ref>. Further, is it unclear as to how these degrees of freedom, often presenting infinitely many selections for possible operation setup directions, will be resolved into a finite number of tractable possibilities. <p> An earlier version of this proof was presented in [72]; similar results have been reported by Han and Requicha <ref> [74] </ref>. In Definition 4.1.2, the feature recognition problem has been combined with the need to select an optimal set of features for some downstream application. <p> Integration with downstream applications often implies the generation of alternative feature-based models and manufacturing plans. This search through the space of alternative feature-based models, as pointed out by <ref> [74] </ref>, is inherently exponential.
Reference: [75] <author> Frank Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1969. </year>
Reference-contexts: Recognition of features can be defined as a search or parse of the graphical structure. An advantage of graph-based systems is the theoretical and algorithmic foundations of graph theory <ref> [75] </ref>. This affords the opportunity to exploit the mathematics of graph theory to define the problem and the opportunity to draw on the many algorithms that deal with searching, traversing, parsing, or matching graphs [3, 19, 145].
Reference: [76] <author> C. C. Hayes, S. Desa, and P. K. Wright. </author> <title> Using process planning knowledge to make design suggestions concurrently. </title> <editor> In N. H. Chao and S. C. Y. Lu, editors, </editor> <title> Concurrent Product and Process Design, </title> <booktitle> ASME Winter Annual Meeting, </booktitle> <pages> pages 87-92. </pages> <publisher> ASME, </publisher> <year> 1989. </year>
Reference-contexts: Traditionally, the redesign process has been manual task, however automated systems are beginning to appear. Most existing approaches for automated generation of redesign suggestions [167, 84, 86] propose only local geometric design changes (e.g., changes to the parameters of individual features), and some <ref> [76] </ref> present completely redesigned parts. Because of interactions among features, however, it is sometimes impossible to arrive at an improved design without carefully choosing a combination of modifications.
Reference: [77] <author> Mark R. Henderson. </author> <title> Extraction of Feature Information from Three-Dimensional CAD Data. </title> <type> PhD thesis, </type> <institution> Purdue University, West Lafayette, IN, USA, </institution> <year> 1984. </year>
Reference-contexts: A Hole begins with an entrance face. 2. All subsequent faces of the hole share a common axis. 3. All faces of the hole are sequentially adjacent. 4. The hole terminates with a valid hole bottom. (b) Henderson <ref> [77] </ref> (b). metric features, in particular to describe the material removal volumes created by machining operations. Volumetric features have a variety of advantages over surface features [144]; primary among them is that manufacturing process information (in particular in the machining domain) is more easily described volu-metrically. <p> A mechanical engineer must analyze a solid object to determine how to manufacture it; therefore, feature recognition can be viewed as the creation of an expert system to reason about the manufacturability of a solid object. Henderson, in his 1984 Ph.D. thesis <ref> [77] </ref>, created an expert system in Prolog to perform feature recognition. In this system, rules are used to define feature instances.
Reference: [78] <author> Mark R. Henderson. </author> <title> Representing functionality and design intent in product models. </title> <editor> In Jaroslaw Rossignac, Joshua Turner, and George Allen, 271 editors, </editor> <booktitle> Proceedings of the Second Symposium on Solid Modeling and Ap--plications, </booktitle> <pages> pages 387-396. </pages> <publisher> ACM SIGGRAPH and IEEE computer Society, </publisher> <year> 1993. </year>
Reference-contexts: El Maraghy et al. [51] proposed and implemented a design tool employing functional features. Functional features were also a key part of the work of Schulte et al. [168]. Henderson and Taylor <ref> [78, 79, 193] </ref> developed a system for conceptual modeling in an effort to represent features, functionality, dimensions, and tolerances within a solid modeling system. 2.2.2 Manufacturing Features The feature concept had its beginning with the process planning of machined parts [122].
Reference: [79] <author> Mark R. Henderson and LeRoy E. Taylor. </author> <title> A meta-model for mechanical products based upon the mechanical design process. </title> <booktitle> Research in Engineering Design, </booktitle> <volume> 5(4) </volume> <pages> 140-160, </pages> <year> 1993. </year>
Reference-contexts: El Maraghy et al. [51] proposed and implemented a design tool employing functional features. Functional features were also a key part of the work of Schulte et al. [168]. Henderson and Taylor <ref> [78, 79, 193] </ref> developed a system for conceptual modeling in an effort to represent features, functionality, dimensions, and tolerances within a solid modeling system. 2.2.2 Manufacturing Features The feature concept had its beginning with the process planning of machined parts [122].
Reference: [80] <author> C. A. R. Hoare. </author> <title> Proof of correctness of data representations. </title> <journal> Acta In-formtica, </journal> <volume> 1(4) </volume> <pages> 271-281, </pages> <year> 1972. </year>
Reference-contexts: Denver International Airport. 175 factorial ( integer m) s = 1; while m &gt; 0 do f m = m 1; return s; Readers interested in reading more on formal methods for program correctness (or verifying the proof in Figure 6.2) are referred to the extensive literature in this area <ref> [114, 126, 45, 59, 80, 125, 127] </ref>. This example is solely intended to show the complexity of generating formal proofs of program correctness; hence, we shall not present any description of the technique.
Reference: [81] <author> Christoph M. Hoffman. </author> <title> Geometric and Solid Modeling: An Introduction. </title> <publisher> Morgan Kaufmann Publishers Incorporated, </publisher> <address> CA, </address> <year> 1989. </year>
Reference-contexts: Geometric modeling is concerned with the representation of surfaces (analytics, splines, etc.) and their manipulations. This is intimately related to solid modeling; however solid modeling is more concerned with those objects bounded by such surfaces. Conceptually, work in solid modeling has proceeded in three levels of abstraction <ref> [81] </ref>: 1. Symbolic and arithmetic foundations represent the lowest level of abstraction and are concerned with the computer hardware support of integer and floating point arithmetic as well as with the abilities of a programming language to express computations and manipulate memory. <p> For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann <ref> [81] </ref>, Mantyla [116], Morten-son [128], Faux and Pratt [54] and Woodwark [211, 18]; as well as the proceedings from the recent conferences on solid modeling and applications [153, 154, 155]. For an overview of the architecture of solid modeling systems, readers are referred to [124]. <p> An illustration of the distinction between geometric and topological information from the ACIS Solid Modeling Kernel is given in 21 within the ACIS Solid Modeler [184]. One of the most popular of these b-rep structures is the winged-edge representation <ref> [81] </ref> and its variations. For more information on boundary representation data structures, interested readers are referred to [81, 116, 207, 209]. Manifold and non-manifold solids. Operation on these data structures can give rise to many different configurations of solids. <p> One of the most popular of these b-rep structures is the winged-edge representation [81] and its variations. For more information on boundary representation data structures, interested readers are referred to <ref> [81, 116, 207, 209] </ref>. Manifold and non-manifold solids. Operation on these data structures can give rise to many different configurations of solids. Intuitively, a manifold solid is one whose boundary can be uniformly unfolded onto a 2-dimensional plane. The manifold condition excludes, for example, solids whose bounding surfaces are self-intersecting. <p> As illustrated in Figure 3.1 (d), the total removal volume is referred to as the delta volume (), and it is the regularized difference <ref> [81] </ref> of the initial workpiece and the design: = S fl P . Another design of a machined component is given in a later chapter (see Figure 8.7). <p> Ala [4, 5] builds on this work and introduces variations on the boundary representation data structure with advantages for certain applications. Extensions to face-based representations are introduced in [40] and algorithms for their manipulation are analyzed. 153 Hoffmann <ref> [81] </ref> is an excellent source of worst-case complexity analysis for boolean operations on boundary data structures. In the feature recognition literature, De Floriani [39] presents an analysis of the complexity of her methodology.
Reference: [82] <author> John E. Hopcroft and Jeffery D. Ullman. </author> <title> Intoduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> MA, </address> <year> 1979. </year>
Reference-contexts: This approach to pattern recognition has widespread use in computer vision (picture recognition, scene analysis, classification of pictorial patterns), speech recognition, natural language processing, and recognition of written characters. A variation or extension of a context free grammar <ref> [82, 111] </ref> forms the core of a syntactic pattern recognition algorithm. In such a grammar, the terminal symbols usually represent a primitive element of the application domain. For automated feature recognition, a primitive can be an edge or a face|because these are among the fundamental building blocks of every feature. <p> A specification for the feature recognition problem, such as the one given in Chapter 4. This definition expresses the input set and output set of a feature recognition "black box." 2. Given a specification for the problem, one must determine whether or not the problem is computable <ref> [82] </ref>; i.e., one must show there exists an algorithm such that for every instance of the problem it halts and returns the correct answer.
Reference: [83] <author> Wynne Hsu, C. S. George Lee, and S. F. Su. </author> <title> Feedback approach to design for assembly by evaluation of assembly plan. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 25(7) </volume> <pages> 395-410, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: There have been a variety of approaches to implementing the DFMA methodology, ranging from building interdepartmental design teams to equipping designers with manufacturability checklists. The pioneering work of Boothroyd and Dewhurst [15] in establishing design-for-assembly guidelines has led to the development of several automated advisory systems <ref> [88, 83] </ref>. Boothroyd [16] 72 life-cycle considerations during the design phase. presents a review of DFMA methodologies in use at different companies.
Reference: [84] <author> Yong-Jung Huh and Sang-Gook Kim. </author> <title> A knowledge-based CAD system for concurrent product design in injection molding. </title> <journal> International Journal of Computer Integrated Manufacturing, </journal> <volume> 4(4) </volume> <pages> 209-218, </pages> <year> 1991. </year>
Reference-contexts: To address such problems, it is emerging that manufacturability analysis systems will need the ability to generate redesign suggestions. Traditionally, the redesign process has been manual task, however automated systems are beginning to appear. Most existing approaches for automated generation of redesign suggestions <ref> [167, 84, 86] </ref> propose only local geometric design changes (e.g., changes to the parameters of individual features), and some [76] present completely redesigned parts. Because of interactions among features, however, it is sometimes impossible to arrive at an improved design without carefully choosing a combination of modifications.
Reference: [85] <author> K. Ishii, C. F. Eubanks, and D. Houser. </author> <title> Evaluation methodology for post manufacturing issues in life-cycle design. </title> <journal> International Journal of Concurrent Engineering: Research and Applications, </journal> <volume> 1(1) </volume> <pages> 61-68, </pages> <year> 1993. </year> <month> 272 </month>
Reference-contexts: In many respects, DFMA is leading the way toward design for "X," (DFX) where "X" might represent any potential product life-cycle consideration (i.e., any "-bility"). By taking into account other life-cycle considerations, more com 73 prehensive analysis of a product can be performed <ref> [87, 85] </ref>. One major obstacle to DFMA/DFX is the immense complexity and difficulty involved in building a single system that can handle all manufacturing domains and all life-cycle considerations.
Reference: [86] <author> Kosuke Ishii. </author> <title> Modeling of concurrent engineering design. </title> <editor> In Andrew Ku--siak, editor, </editor> <booktitle> Concurrent Engineering: Automation, Tools and Techniques, ASME Winter Annual Meeting, </booktitle> <pages> pages 19-39. </pages> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1993. </year>
Reference-contexts: To address such problems, it is emerging that manufacturability analysis systems will need the ability to generate redesign suggestions. Traditionally, the redesign process has been manual task, however automated systems are beginning to appear. Most existing approaches for automated generation of redesign suggestions <ref> [167, 84, 86] </ref> propose only local geometric design changes (e.g., changes to the parameters of individual features), and some [76] present completely redesigned parts. Because of interactions among features, however, it is sometimes impossible to arrive at an improved design without carefully choosing a combination of modifications.
Reference: [87] <author> Kosuke Ishii. </author> <title> Life-cycle engineering design: Research overview. </title> <booktitle> In Proceedings of the 1994 NSF Design and Manufacturing Grantees Conference, </booktitle> <pages> pages 41-42, </pages> <address> Cambridge, MA, </address> <month> January </month> <year> 1994. </year> <institution> NSF. </institution>
Reference-contexts: In many respects, DFMA is leading the way toward design for "X," (DFX) where "X" might represent any potential product life-cycle consideration (i.e., any "-bility"). By taking into account other life-cycle considerations, more com 73 prehensive analysis of a product can be performed <ref> [87, 85] </ref>. One major obstacle to DFMA/DFX is the immense complexity and difficulty involved in building a single system that can handle all manufacturing domains and all life-cycle considerations.
Reference: [88] <author> M. Jakiela and P. Papalambros. </author> <title> Design and implementation of a prototype intelligent CAD system. </title> <journal> ASME Journal of Mechanisms, Transmission, and Automation in Design, </journal> <volume> 111(2), </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: There have been a variety of approaches to implementing the DFMA methodology, ranging from building interdepartmental design teams to equipping designers with manufacturability checklists. The pioneering work of Boothroyd and Dewhurst [15] in establishing design-for-assembly guidelines has led to the development of several automated advisory systems <ref> [88, 83] </ref>. Boothroyd [16] 72 life-cycle considerations during the design phase. presents a review of DFMA methodologies in use at different companies.
Reference: [89] <author> Ryszard Jakubowski. </author> <title> Syntactic characterization of machine parts shapes. </title> <journal> Cybernetics and Systems: An International Journal, </journal> <volume> 13(1) </volume> <pages> 1-24, </pages> <year> 1982. </year>
Reference-contexts: Utilizing these techniques, algorithms can recognize features and classify the shape of a solid. Most approaches based on pattern recognition techniques address only 2D shapes or 2D cross-sections of solids. Ryszard Jakubowski <ref> [89, 90] </ref>, using edges as pattern primitives, generated group technology part codes for mechanical parts based on their 2D cross 48 sections. This approach is concerned only with mechanical part classification and is described for a restricted set of 2 1 2 -dimensional parts. <p> The goals of the work are shape classification for group technology process selection and representation of the volume that must be machined to create the object. Grammars for generating shape families are presented. These grammars, like those in Jakubowski <ref> [89, 90] </ref>, describe the outline of the part. This work built on Jakubowski's, but many of the same limitations still exist: the class of shapes is limited and it does not allow for the reasoning about geometry and topology necessary for automated feature recognition.
Reference: [90] <author> Ryszard Jakubowski. </author> <title> Extraction of shape features for syntactic recognition of mechanical parts. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> SMC-15(5), </volume> <month> September/October </month> <year> 1985. </year>
Reference-contexts: Utilizing these techniques, algorithms can recognize features and classify the shape of a solid. Most approaches based on pattern recognition techniques address only 2D shapes or 2D cross-sections of solids. Ryszard Jakubowski <ref> [89, 90] </ref>, using edges as pattern primitives, generated group technology part codes for mechanical parts based on their 2D cross 48 sections. This approach is concerned only with mechanical part classification and is described for a restricted set of 2 1 2 -dimensional parts. <p> The goals of the work are shape classification for group technology process selection and representation of the volume that must be machined to create the object. Grammars for generating shape families are presented. These grammars, like those in Jakubowski <ref> [89, 90] </ref>, describe the outline of the part. This work built on Jakubowski's, but many of the same limitations still exist: the class of shapes is limited and it does not allow for the reasoning about geometry and topology necessary for automated feature recognition.
Reference: [91] <author> S. Joshi and T. C. Chang. </author> <title> Graph-based heuristics for recognition of machined features from a 3D solid model. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 20(2) </volume> <pages> 58-66, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: These methods fall into two categories: those based on graph search [39, 30] and those based on pattern matching <ref> [91, 141, 156] </ref>. A common difficulty for both categories of the graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> The method has difficulty parsing objects for which necessary structural information is lost due to interactions among feature types. Kyprianou's thesis was one of the first in the area of automated feature recognition and it has served as a fundamental reference for later works. hole from Joshi and Chang <ref> [91] </ref>. Joshi and Chang [91] present a graphical structure called an attributed 52 adjacency graph and, based on this data structure, the develop algorithms for feature recognition based on subgraph isomorphism algorithms to match feature patterns to patterns in the topology of polyhedral parts. <p> Kyprianou's thesis was one of the first in the area of automated feature recognition and it has served as a fundamental reference for later works. hole from Joshi and Chang <ref> [91] </ref>. Joshi and Chang [91] present a graphical structure called an attributed 52 adjacency graph and, based on this data structure, the develop algorithms for feature recognition based on subgraph isomorphism algorithms to match feature patterns to patterns in the topology of polyhedral parts. <p> The features and the object are then represented with some variation of an attributed adjacency graph. The process of feature recognition is redefined to a graph search problem. This method is very similar to Joshi and Chang's <ref> [91] </ref> and shares many of its drawbacks. However, unlike Joshi and Chang, no attempt is made to characterize and deal with feature interactions. In fact, the approach characterizes features as collections of surfaces and then "fills in" the volumes when they are recognized. <p> They define objects to be elements in a language generated by an augmented 57 topology graph grammar and then use their graph grammar to parse a rep-resentation of an object. The advantage of their graphical structure is that it contains both geometric and topological information (unlike the structures of <ref> [39, 53, 91, 161] </ref>). This graphical structure, as shown in Figure 2.16, can also be used to define general features. A grammar can then be defined to describe the class of objects that can be generated with a specific set of features. <p> A key component 62 of their work is an aggressive approach to handling feature interactions and intersections as well as proofs of the completeness of their feature generation hypotheses. Marefat's method builds on the representation scheme of <ref> [91] </ref> and uses a novel combination of expert system and hypothesis testing techniques to extract surface features from polyhedral objects. <p> Hence, it is often unclear what specific classes of parts and feature interactions can be handled by various existing approaches. The ability to handle interacting features has become an informal benchmark for feature recognition systems and has been the focus of numerous research efforts, among them <ref> [41, 58, 91, 117, 200] </ref>. What has emerged are several distinct types of feature interaction problems. One type is interaction during feature recognition, where an instance of one feature removes information require for the recognition of another. A second type 75 of feature interaction is dependent on the manufacturing process. <p> Some of the approaches that have incorporated complexity measures [39, 55] are often representationally limited, covering a restricted domain of parts (e.g., polyhedra) and/or feature types (e.g., not manufacturing process features). For those approaches which employ expert systems and knowledge-based reasoning <ref> [41, 91, 117, 200] </ref>, the inherent exponential nature of automated reasoning algorithms might impede their ability to scale to more complex problems. Further complicating matters is the fact that some approaches to feature recognition perform process planning "on the fly" as features are recognized. <p> Many approaches have proven difficult to extend to the more complex surfaces and features found in realistic manufacturing problems. For example, graph-based approaches <ref> [39, 91] </ref> began appearing in great number nearly a decade ago, yet they continue to prove difficult to extend more complex feature types. Similarly, the feature instances encoded with rule-based and knowledge-based systems are often only those for simple isolated feature instances or those with easily described interactions. <p> In this case the details of how the mass property routine has been implemented will be specific to the solid modeler and not part of the specification of the sorting problem. For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods <ref> [39, 91, 30, 31, 34, 32, 33] </ref>, the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters [139] uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself. <p> The argument for the completeness of this thesis' approach serves to illustrate the utility of the general concept of completeness as developed in this chapter. 171 6.2.2 Feature Interactions The ability to recognize interacting features has been a stated goal of a number research efforts, among them <ref> [41, 58, 117, 91, 200] </ref>. While it is agreed upon as a problem of critical importance [210], however, the concept of feature interactions lies largely undefined in the general literature. In most cases, the definition for the term is implied, vague, or specific to one particular approach.
Reference: [92] <author> Frederick P. Brooks Jr. </author> <title> The Mythical Man-Month. </title> <publisher> Addison-Wesley, </publisher> <year> 1975. </year>
Reference-contexts: However, it appears that a formal proof of correctness is beyond the capabilities of existing mathematical tools. For an essential reference on the hazards of building large software systems, readers are referred to <ref> [92] </ref>. 6.3.2 Soundness In general, a program is said to be sound if it never produces incorrect results. By extension, a feature recognition procedure can be defined as sound if it always produces valid features.
Reference: [93] <author> Kevin K. Jurrens, James E. Fowler, and Mary Elizabeth A. Algeo. </author> <title> Modeling of manufacturing resource information: Requirements specification. </title> <type> Technical Report NISTIR 5707, </type> <institution> National Institute of Standards and Technology, Gaithersburg, MD, 20899, </institution> <month> July </month> <year> 1995. </year> <month> 273 </month>
Reference-contexts: Consideration of other cutting profiles (such as those with a combination of straight and curved edges) introduces additional complexity not addressed by the algorithms below. If additional tools are available, these algorithms can be modified to retrieve tool specifications from a manufacturing resource database <ref> [93] </ref> and then determine the existence of a feature that might have been created to match those particular parameters. Other tooling-specific constraints are also addressed in Section 7.2. Algorithm: Chamfering Trace 1. 1. Input a planar face f , part P , and stock S. 2. <p> Ideally, these parameters would be obtained from a manufacturing resource database that contains the cutting tools available in the context of the given application <ref> [93] </ref>. These parameters will vary greatly depending on the available set of cutting tools and machine tools, which in turn will vary greatly depending on the particular application.
Reference: [94] <author> R. Karinthi and D. Nau. </author> <title> An algebraic approach to feature interac-tions. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 14(4) </volume> <pages> 469-484, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: If a system produces all features in a given class C, then we say that the system is complete over C. In the existing literature, there have been several efforts at guaranteeing completeness. The feature algebra of Karinthi <ref> [94] </ref>, starting from a single initial feature interpretation, exhaustively generates alternative interpretations of the part by manipulating the features with algebraic operators, but does not include a methodology for recognizing the features.
Reference: [95] <author> R. Karinthi, D. Nau, and Q. Yang. </author> <title> Handling feature interactions in process planning. </title> <journal> Applied Artificial Intelligence, </journal> <note> 1992. Special issue on AI for manufacturing. </note>
Reference-contexts: For designs created using a feature-based design approach and represented with design features, there must exist some facility for translating these design features into feature viewpoints for use in the downstream applications [151]. 3. For many manufacturing domains the feature-based description of a design is not unique <ref> [115, 96, 98, 95] </ref>. Selecting which interpretation is most suitable to drive manufacturing planning requires that the designer be an expert in the relevant domain. 4. As noted in the previous points, a design may need to be analyzed for a number of different manufacturing and product life-cycle considerations. <p> Recently, generation of alternative interpretations has received a great deal of research attention: * Mantyla et al. [115] proposed the concept of feature relaxation to support the idea of design by least commitment. The feature relaxation groups 76 are pairs of geometric features that are interchangeable. * Karinthi <ref> [96, 98, 95] </ref> performed the first systematic work on the generation of alternative interpretations for an object as different collections of volumetric features.
Reference: [96] <author> R. R. Karinthi and D. S. Nau. </author> <title> An algebraic approach to feature interactions. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 14(4) </volume> <pages> 469-484, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: For designs created using a feature-based design approach and represented with design features, there must exist some facility for translating these design features into feature viewpoints for use in the downstream applications [151]. 3. For many manufacturing domains the feature-based description of a design is not unique <ref> [115, 96, 98, 95] </ref>. Selecting which interpretation is most suitable to drive manufacturing planning requires that the designer be an expert in the relevant domain. 4. As noted in the previous points, a design may need to be analyzed for a number of different manufacturing and product life-cycle considerations. <p> Recently, generation of alternative interpretations has received a great deal of research attention: * Mantyla et al. [115] proposed the concept of feature relaxation to support the idea of design by least commitment. The feature relaxation groups 76 are pairs of geometric features that are interchangeable. * Karinthi <ref> [96, 98, 95] </ref> performed the first systematic work on the generation of alternative interpretations for an object as different collections of volumetric features.
Reference: [97] <author> Raghu Karinthi, Kankanahalli Srinivas, and George Almasi. </author> <title> A parallel algorithm for computing polygon set operations. </title> <type> Technical Report TR 93-4, </type> <institution> Department of Statistics and Computer Science, West Virginia University, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Banerjee et al. [12] have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory. In the domain of boundary representation modeling, Karinthi et al. <ref> [97] </ref> have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al. [6], these techniques are extended to more general loops of edges.
Reference: [98] <author> Raghu R. Karinthi. </author> <title> An Algebraic Approach to Feature Interactions. </title> <type> PhD thesis, </type> <institution> The University of Maryland, College Park, MD, USA, </institution> <year> 1990. </year>
Reference-contexts: For designs created using a feature-based design approach and represented with design features, there must exist some facility for translating these design features into feature viewpoints for use in the downstream applications [151]. 3. For many manufacturing domains the feature-based description of a design is not unique <ref> [115, 96, 98, 95] </ref>. Selecting which interpretation is most suitable to drive manufacturing planning requires that the designer be an expert in the relevant domain. 4. As noted in the previous points, a design may need to be analyzed for a number of different manufacturing and product life-cycle considerations. <p> We classify these approaches based on the computer science techniques they employ. This section presents an overview, by no means complete, of many existing approaches. For another summary of recent work readers are referred 47 to <ref> [98] </ref>. 2.2.4.1 Pattern Recognition Extracting features from a 3D solid model can be viewed as a problem of pattern recognition. Syntactic pattern recognition [57] uses structural information to create a description or a classification of the artifact. <p> Recently, generation of alternative interpretations has received a great deal of research attention: * Mantyla et al. [115] proposed the concept of feature relaxation to support the idea of design by least commitment. The feature relaxation groups 76 are pairs of geometric features that are interchangeable. * Karinthi <ref> [96, 98, 95] </ref> performed the first systematic work on the generation of alternative interpretations for an object as different collections of volumetric features.
Reference: [99] <institution> Kennametal Inc., </institution> <address> P.O. Box 346, Latrobe, PA 15650-0346. Milling '87, </address> <year> 1986. </year>
Reference-contexts: While the parameters presented below are by no means exhaustive, they can be use to eliminate what are, with high probability, unrealistic feature instances. The values are based on a survey of common cutting tools as listed in cutting tool catalogs <ref> [48, 99, 164, 165, 194] </ref>. * For drilling features there are three parameters we consider: Flute length: Flute length refers to the length of the cutting surface of the tool. For the drilling tool in Figure 7.1 the flute length is l 4 . <p> For drilling and milling tools we use a value of 128mm. Hence the removal volume for any feature instance rem (f ) can be no deeper than 197 (a): components in a typical tool assembly (b): a milling tool assembly logs <ref> [164, 99] </ref>. 128mm. For chamfering and filleting tools this value is much less. We will use an estimated value of 20mm for both chamfering and filleting feature types based on the bounds on tools presented in Section 7.2. <p> H 3 is defined by the plane passing through point (p + v (128 + 32)) 2 The smallest radius tool assembly available from a survey of a variety of catalogs <ref> [48, 99, 164, 165, 194] </ref>. This value represents an approximate lower bound on the size of the tool assembly needed to hold a tool of a given radius.
Reference: [100] <author> Richard Kenyon. </author> <title> Tiling a polygon with parallelograms. </title> <journal> Algorithmica, </journal> <volume> 9(4) </volume> <pages> 382-397, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: This means that a discrete version of the geometric problem must be devel 168 oped in which solid models and feature instances are parameterized from a countable set. With respect to (2) and (3), the feature recognition problem bears some resemblance to the problem of tiling the plane <ref> [100, 195, 14, 150] </ref>. Tiling describes the problem of asking, given templates for 2D tiles, whether the plane (or some subset of it) can be covered with instances of tiles.
Reference: [101] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1988. </year>
Reference-contexts: This feature set is used by the other subsystems for manufacturability analysis and redesign. 204 8.1.1 Software Tools Employed During the implementation of F-Rex and IMACS we employed a number of development tools. The majority of the code is written in the C++ language <ref> [101, 189, 191, 190, 113, 50] </ref> using version 3.0.1 of the AT&T C++ compiler from SUN Microsystems. The current system runs on SPARCStations model IPX, 2, 5, and 10-30 workstations under SUN OS 4.1.3.
Reference: [102] <author> Y. S. Kim. </author> <title> Recognition of form features using convex decomposition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(9) </volume> <pages> 461-476, </pages> <month> September </month> <year> 1992. </year> <month> 274 </month>
Reference-contexts: The approach had several problems, including the existence of pathological cases in which the 58 procedure would not converge. The non-convergence of Woo's approach has been solved in recent work by Kim et al. <ref> [102, 103, 204, 136] </ref>, whose system produces a decomposition of the convex hull of a part into general form features. Kim's approach uses convex volume decompositions to produce alternating sums of volumes and techniques for partitioning the solid to avoid non-convergence.
Reference: [103] <author> Yong Se Kim and D. J. Wilde. </author> <title> A convergent convex decomposition of polyhedral objects. </title> <journal> Transactions of the ASME, </journal> <volume> 114 </volume> <pages> 468-476, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: The approach had several problems, including the existence of pathological cases in which the 58 procedure would not converge. The non-convergence of Woo's approach has been solved in recent work by Kim et al. <ref> [102, 103, 204, 136] </ref>, whose system produces a decomposition of the convex hull of a part into general form features. Kim's approach uses convex volume decompositions to produce alternating sums of volumes and techniques for partitioning the solid to avoid non-convergence.
Reference: [104] <author> Mark Klein. </author> <title> Capturing design rationale in concurrent engineering teams. </title> <journal> Computer, </journal> <volume> 26(1) </volume> <pages> 39-47, </pages> <year> 1993. </year>
Reference-contexts: At the very minimum, feature recognition is perhaps the only reasonable way to generate multiple feature-based descriptions. It is also believed that feature-based design provides an opportunity to capture other important manufacturing information, such as the designer's intent and the design rationale <ref> [104, 172] </ref>. For a recent review of research in the area feature-based design, readers are referred to [162]. 2.2.4 Feature Recognition Creating a survey of the field of automated feature recognition presents a difficulty because attempts span a wide variety of applications.
Reference: [105] <author> Thomas R. Kramer. </author> <title> A parser that converts a boundary representation into a features representation. </title> <journal> International Journal of Computer Integrated Manufacturing, </journal> <volume> 2(3) </volume> <pages> 154-163, </pages> <year> 1989. </year>
Reference-contexts: However, this communication consists of a small set of basic questions about an extremely restricted set of objects. In another related grammar-based effort, Kramer <ref> [105] </ref> presents a parser for converting a solid model representation of a design into a feature-based representation. 50 2.2.4.2 Graph-Based Methods Graph-based algorithms have proven useful for extracting some classes of features.
Reference: [106] <author> Thomas R. Kramer. </author> <title> An express schema for machining plugged into ALPS4. </title> <type> Technical report, </type> <institution> The National Institute of Standards and Technology, Gaithersburg, MD 20899, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: MRSEVs features are volumetric form features and the MRSEV hierarchy provides a framework for describing a large class of entities of interest to machining. Each entity type has a number of required and optional attributes. MRSEV instances have been used for applications such as process planning and NC-program generation <ref> [106] </ref>. Kramer's main MRSEV types include linear swept features, edge-cut features, ramps, and rotational pockets. Figure 2.11 provide an illustration of the feature subclasses in the MRSEV hierarchy. 42 2.2.3 Feature-Based Design While creating a design of a part, the designer interacts extensively with her or his CAD tool.
Reference: [107] <author> Thomas R. Kramer. </author> <title> Issues regarding material removal shape element volumes (MRSEVs). </title> <type> Technical Report NISTIR 4804, </type> <institution> The National Institute of Standards and Technology, Gaithersburg, MD 20899, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Classifying machining features. There have been numerous attempts to classify machining features and devise feature hierarchies. In addition to the MRSEV Library for 3-axis machining features of Kramer <ref> [108, 107] </ref> mentioned in the next section, Nau et al. [130] developed a machining feature library for process planning. Similarly, Gindy [62] presented a feature hierarchy describing the geometric information required for a class of form features for process planning. <p> While STEP does provide some mechanisms for representing geometric and topological form features, there exists no definitive structure for representing and exchanging all the relevant information associated with a manufacturing feature. Shah [174] describes his investigation of the STEP form features model. Example of a STEP-based Feature Library. Kramer <ref> [108, 107] </ref> developed a library of Material Removal Shape Element Volumes (MRSEVs) as a means of categorizing the shapes of volumes to be removed by machining operations on a 3-axis machining center. MRSEVs can be defined using the EXPRESS modeling language and STEP form features. <p> The features described in this thesis are based on Kramer's MRSEV Feature Library, in particular hole, pocket, and edge-cut feature types. For more information, including the full mathematical and EXPRESS language definitions for the MRSEV features interested readers are referred to <ref> [108, 107] </ref>. 1.
Reference: [108] <author> Thomas R. Kramer. </author> <title> A library of material removal shape element volumes (MRSEVs). </title> <type> Technical Report NISTIR 4809, </type> <institution> The National Institute of Standards and Technology, Gaithersburg, MD 20899, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: This thesis addresses these issues in several ways. First, the definitions and algorithms of Chapters 3 and 4 are based on a realistic class of machining features <ref> [108] </ref> that describe realistic manufacturing operations. The definition of the domain of parts and the recognition algorithm accommodates most realistic configurations of machined artifacts that can be created with these features. Chapter 5 presents an analysis of the complexity of the algorithms of Chapter 4. <p> Classifying machining features. There have been numerous attempts to classify machining features and devise feature hierarchies. In addition to the MRSEV Library for 3-axis machining features of Kramer <ref> [108, 107] </ref> mentioned in the next section, Nau et al. [130] developed a machining feature library for process planning. Similarly, Gindy [62] presented a feature hierarchy describing the geometric information required for a class of form features for process planning. <p> While STEP does provide some mechanisms for representing geometric and topological form features, there exists no definitive structure for representing and exchanging all the relevant information associated with a manufacturing feature. Shah [174] describes his investigation of the STEP form features model. Example of a STEP-based Feature Library. Kramer <ref> [108, 107] </ref> developed a library of Material Removal Shape Element Volumes (MRSEVs) as a means of categorizing the shapes of volumes to be removed by machining operations on a 3-axis machining center. MRSEVs can be defined using the EXPRESS modeling language and STEP form features. <p> The features described in this thesis are based on Kramer's MRSEV Feature Library, in particular hole, pocket, and edge-cut feature types. For more information, including the full mathematical and EXPRESS language definitions for the MRSEV features interested readers are referred to <ref> [108, 107] </ref>. 1. <p> a milling feature, we will sweep a milling tool (such as those shown in Figures 3.2 (b), 3.5 (a) and (b)) whose orientation vector is ~v, starting at a datum point p, and moving through a swept volume of depth d whose cross-sectional area is bounded by an edge profile <ref> [108] </ref> E = fe 1 ; e 2 ; : : : e n g, as shown in Figure 3.4. An edge profile is an ordered collection of co-planar edges that, when joined end-to-end, form a closed, non-self-intersecting, continuous curve.
Reference: [109] <author> Lycourgos K. Kyprianou. </author> <title> Shape Classification in Computer Aided Design. </title> <type> PhD thesis, </type> <institution> Christ College, University of Cambridge, </institution> <address> Cambridge, United Kingdom, </address> <year> 1980. </year>
Reference-contexts: Vandenbrande and Requicha [200] adopt a similar method and classify tool-swept volumes as different types of volumetric machining features. 2.2.2.2 Other Types Of Features Although much of the research work on features has dealt with machining, other recent work has employed features for inspection planning [119], part coding <ref> [109] </ref>, and other manufacturing processes, such as injection molding [141]. Stanford University's NEXT-Cut [35] used features for concurrent design of both the product and the manufacturing process while considering constraints imposed by a variety of manufacturing domains. <p> For a general reference on the combinatorial complexity of graph and grammatical approaches to feature recognition readers are referred to Peters [139]. Searching and Matching. In one of the most significant early works in feature recognition, Kyprianou <ref> [109] </ref> presented the first effort to automatically parse solid models of parts for group coding. His approach, as outlined in his doctoral dissertation [109], is often categorized as grammatical or syntactic pattern recog 51 nition; in actuality it was an early graph-based method to code parts for group technology classification. <p> Searching and Matching. In one of the most significant early works in feature recognition, Kyprianou <ref> [109] </ref> presented the first effort to automatically parse solid models of parts for group coding. His approach, as outlined in his doctoral dissertation [109], is often categorized as grammatical or syntactic pattern recog 51 nition; in actuality it was an early graph-based method to code parts for group technology classification. <p> In particular, they built boundary-representation-based recognition procedures to find DP-features (depressions and protrusions) from CAD models for machined parts (similar to the feature types of <ref> [109] </ref>). They point out that DP-features are basic elements in a number of feature hierarchies and taxonomies. They outline how procedures for DP-features can be used to find high-level shape information about a given part quickly and efficiently. <p> This was the objective of one of the first feature recognition methodologies, that of Kyprianou <ref> [109] </ref>. More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. <p> Peters [139] illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. Fields and Anderson [55] present a linear-time recognition algorithms for a variety of surface features. Other attempts to measure performance include timing results, most notably in <ref> [10, 109, 38] </ref>. Results of this type are highly dependent on the hardware, the software implementation, the domain of interest, and the particular test cases chosen for the timing tests. Further complicating matters is the fact that in many cases the feature recognition problems addressed vary greatly.
Reference: [110] <author> Timo Laakko and Martti Mantyla. </author> <title> Feature modelling by incremental feature recognition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 25(8) </volume> <pages> 479-492, </pages> <month> August </month> <year> 1993. </year> <month> 275 </month>
Reference-contexts: Each such collection of features is an example of a feature model. In earlier literature, the term "feature model" meant different things to different researchers <ref> [53, 110] </ref>. This thesis synthesizes these concepts from earlier work in a definition of a feature-based model as a single, domain-specific feature-based representation of how to manufacture a given design. <p> Similarly, Gindy [62] presented a feature hierarchy describing the geometric information required for a class of form features for process planning. Figure 2.10 presents a machining feature taxonomy developed by Laakko and Mantyla <ref> [110] </ref>. In addition to academic efforts, there have been numerous feature categorization attempts made in industry. One of the early efforts was that of the 36 Computer-Aided Manufacturing International consortium (CAM-I) [171]. <p> Examples of advanced feature-based modeling systems capable of incorporating user-definable functional features include: The ASU Feature Testbed [173, 172], which includes a generic feature mapping shell that allows mapping features from one application to other; and the systems developed by Laakko and Mantyla <ref> [110] </ref> and El Maraghy et al. [51]. Some feature recognition systems have also incorporated the ability to have user-definable feature classes for the purposes of customization and extendibil-ity [161, 110]. <p> Some feature recognition systems have also incorporated the ability to have user-definable feature classes for the purposes of customization and extendibil-ity <ref> [161, 110] </ref>. Recent work has applied Object-Oriented Design (OOD) methodologies to CAD tools to incorporate feature classes, customization, and recognition in a unified system [110]. In such systems, users can define classes of features relevant for individual applications. Another approach to customization is feature languages [41, 198]. <p> Some feature recognition systems have also incorporated the ability to have user-definable feature classes for the purposes of customization and extendibil-ity [161, 110]. Recent work has applied Object-Oriented Design (OOD) methodologies to CAD tools to incorporate feature classes, customization, and recognition in a unified system <ref> [110] </ref>. In such systems, users can define classes of features relevant for individual applications. Another approach to customization is feature languages [41, 198]. <p> The approach also produces some alternate feature interpretations; however, the generation of alternatives is not well controlled nor is the class of alternatives produced by OOFF specified. 2.2.4.5 Hybrid Approaches The recent work of Laakko and Mantyla <ref> [110] </ref> couples feature-based design with feature recognition to provide for incremental feature recognition. This type of approach recognizes changes in the geometric model as new or modified features while preserving the existing feature information.
Reference: [111] <author> Harry R. Lewis and Christos H. Papadimitriou. </author> <title> Elements of the Theory of Computation. </title> <publisher> Prentice Hall Incorporated, </publisher> <address> NJ, </address> <year> 1981. </year>
Reference-contexts: This approach to pattern recognition has widespread use in computer vision (picture recognition, scene analysis, classification of pictorial patterns), speech recognition, natural language processing, and recognition of written characters. A variation or extension of a context free grammar <ref> [82, 111] </ref> forms the core of a syntactic pattern recognition algorithm. In such a grammar, the terminal symbols usually represent a primitive element of the application domain. For automated feature recognition, a primitive can be an edge or a face|because these are among the fundamental building blocks of every feature.
Reference: [112] <author> Don Libes. </author> <title> Exploring Expect. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1994. </year>
Reference-contexts: Tcl is an embeddable tool command language devel-oped by Ousterhout at the University of California at Berkeley [132, 134, 135]. Tk [133] is a graphical user interface toolkit based on Tcl. Expect <ref> [112] </ref> is an extension to TCL that enables control of other interactive applications. Following a script, Expect knows what output is to be produced by a program and what the correct response should be. TCL provides structures for branching and control.
Reference: [113] <author> Stanley B. Lippman. </author> <title> C++ Primer. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1991. </year>
Reference-contexts: This feature set is used by the other subsystems for manufacturability analysis and redesign. 204 8.1.1 Software Tools Employed During the implementation of F-Rex and IMACS we employed a number of development tools. The majority of the code is written in the C++ language <ref> [101, 189, 191, 190, 113, 50] </ref> using version 3.0.1 of the AT&T C++ compiler from SUN Microsystems. The current system runs on SPARCStations model IPX, 2, 5, and 10-30 workstations under SUN OS 4.1.3.
Reference: [114] <author> Jacques Loeckx and Kurt Sieber. </author> <title> The Foundations of Program Verification. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, NY, USA, </address> <note> second edition, </note> <year> 1987. </year>
Reference-contexts: Denver International Airport. 175 factorial ( integer m) s = 1; while m &gt; 0 do f m = m 1; return s; Readers interested in reading more on formal methods for program correctness (or verifying the proof in Figure 6.2) are referred to the extensive literature in this area <ref> [114, 126, 45, 59, 80, 125, 127] </ref>. This example is solely intended to show the complexity of generating formal proofs of program correctness; hence, we shall not present any description of the technique.
Reference: [115] <author> M. Mantyla, J. Opas, and J. Puhakka. </author> <title> Generative process planning of prismatic parts by feature relaxation. </title> <type> Technical report, </type> <institution> Helsinki Institute of Technology, Laboratory of Information Processing Science, Finland, </institution> <month> Feb </month> <year> 1989. </year>
Reference-contexts: For designs created using a feature-based design approach and represented with design features, there must exist some facility for translating these design features into feature viewpoints for use in the downstream applications [151]. 3. For many manufacturing domains the feature-based description of a design is not unique <ref> [115, 96, 98, 95] </ref>. Selecting which interpretation is most suitable to drive manufacturing planning requires that the designer be an expert in the relevant domain. 4. As noted in the previous points, a design may need to be analyzed for a number of different manufacturing and product life-cycle considerations. <p> Most existing systems focus on generating the optimum plan for individual features and many have limited capability to identify and account for feature interactions. Recently, generation of alternative interpretations has received a great deal of research attention: * Mantyla et al. <ref> [115] </ref> proposed the concept of feature relaxation to support the idea of design by least commitment.
Reference: [116] <author> Martti Mantyla. </author> <title> An Introduction to Solid Modeling. </title> <publisher> Computer Science Press, </publisher> <address> College Park, MD, </address> <year> 1988. </year>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla <ref> [116] </ref>, Morten-son [128], Faux and Pratt [54] and Woodwark [211, 18]; as well as the proceedings from the recent conferences on solid modeling and applications [153, 154, 155]. For an overview of the architecture of solid modeling systems, readers are referred to [124]. <p> 183, 184, 185, 178, 180, 181, 120, 182, 179] as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <ref> [116, 149] </ref>: 1. Decomposition approaches that model a solid as collections of primitive objects connected in some way. Examples of these data structures include quad-trees and oct-trees [163], which represent space as collections of primitive cells (usually cuboidal). 2. <p> One of the most popular of these b-rep structures is the winged-edge representation [81] and its variations. For more information on boundary representation data structures, interested readers are referred to <ref> [81, 116, 207, 209] </ref>. Manifold and non-manifold solids. Operation on these data structures can give rise to many different configurations of solids. Intuitively, a manifold solid is one whose boundary can be uniformly unfolded onto a 2-dimensional plane. The manifold condition excludes, for example, solids whose bounding surfaces are self-intersecting. <p> Euler operators have a number of elegant mathematical and algorithmic properties, including the ability to describe all valid boundary data structures through a finite sequence of Euler operators. A number of solid modeling systems have been based on Euler operators, most notably Mantyla's Geometric WorkBench <ref> [116] </ref>. For a more detailed description 23 (a): Two blocks, A and B (b): Subtract, A B (c): Intersect, A " B of Euler operators, readers are referred to [116]. Boolean Operations. Solid models can be considered as bounded point sets. <p> A number of solid modeling systems have been based on Euler operators, most notably Mantyla's Geometric WorkBench <ref> [116] </ref>. For a more detailed description 23 (a): Two blocks, A and B (b): Subtract, A B (c): Intersect, A " B of Euler operators, readers are referred to [116]. Boolean Operations. Solid models can be considered as bounded point sets. Boolean operations union ( S ), intersection ( T ) and difference () can be defined on solid models based on their action on point sets. For example, Figures 2.3 and 2.4 illustrate boolean difference and intersection, respectively. <p> Regularized boolean operations correct these ambiguities. If A is a solid, i (A) is the interior of A (point set A minus its boundary) and c (A) is the closure of A (point set A plus its boundary); the regularized boolean operations are defined as follows <ref> [116] </ref>: 25 (a): Two blocks, A and B (b): Unite, A [ fl B (c): Subtract, A fl B (d): Intersect, A " fl B S fl , Union: A S fl B = c (i (A T fl , Intersection: A T fl B = c (i (A fl , <p> that they are capable of handling. 84 Chapter 3 Developing Feature Definitions This chapter introduces a class of machining features and presents definitions for feature-based models, primary features and well-behaved features. 3.1 Machined Parts and Machining Features A common class of solids are those described by r-sets with manifold boundaries <ref> [116, 149] </ref>. In the context of this thesis, a solid is an r-set whose boundary representation is a manifold consisting of analytic surfaces (e.g., planar, elliptical, toroidal, conical and spherical surfaces). <p> 4.1. 5.4 Summary This chapter outlined a general formula for calculating the complexity of the feature recognition problem and applied it to the feature recognition algorithms in Chapter 4. 164 Chapter 6 Completeness One of the fundamental problems in solid modeling is ensuring the accuracy and completeness of geometric representations <ref> [116] </ref>. Traditionally, geometric information was conveyed using line drawing and graphical models. Such representations prove quite adequate when human beings are the sole interpreters of the data but often fall very short of the requirements for machine interpretation.
Reference: [117] <author> M. Marefat and R. L. Kashyap. </author> <title> Geometric reasoning for recognition of three-dimensional object features. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 12(10) </volume> <pages> 949-965, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The frame-based approach is novel; however, it remains unclear how feature interactions would affect the system's ability to find adequate feature information to facilitate process planning. Marefat et al. <ref> [117] </ref> developed a formal feature recognition method based on Dempster-Schaffer theory and hypothesis-testing techniques. A key component 62 of their work is an aggressive approach to handling feature interactions and intersections as well as proofs of the completeness of their feature generation hypotheses. <p> Hence, it is often unclear what specific classes of parts and feature interactions can be handled by various existing approaches. The ability to handle interacting features has become an informal benchmark for feature recognition systems and has been the focus of numerous research efforts, among them <ref> [41, 58, 91, 117, 200] </ref>. What has emerged are several distinct types of feature interaction problems. One type is interaction during feature recognition, where an instance of one feature removes information require for the recognition of another. A second type 75 of feature interaction is dependent on the manufacturing process. <p> Further development of trace-based feature recognition. The work of Marefat and Kashyap <ref> [117] </ref> presented an early trace-based technique where information from the solid model is used to generate hypotheses about the existence of features. These hypotheses are tested to see if they give rise to valid feature instances. <p> Some of the approaches that have incorporated complexity measures [39, 55] are often representationally limited, covering a restricted domain of parts (e.g., polyhedra) and/or feature types (e.g., not manufacturing process features). For those approaches which employ expert systems and knowledge-based reasoning <ref> [41, 91, 117, 200] </ref>, the inherent exponential nature of automated reasoning algorithms might impede their ability to scale to more complex problems. Further complicating matters is the fact that some approaches to feature recognition perform process planning "on the fly" as features are recognized. <p> Completeness. Informally, when one speaks of the completeness of a feature recognition algorithm, one is referring to the algorithm's ability to produce all features instances from some well-defined class of features and parts. Discussion of completeness was initiated with the work of Marefat <ref> [117] </ref> From a devil's advocate point of view, one might claim that all feature recog 82 nition systems are complete over something; i.e., they are complete over the set of features they can handle. Unfortunately, such recursive definitions yield little information. <p> As noted in Section 2.4, trace-based techniques have been addressed previously by a number of researchers <ref> [117, 200, 73] </ref>. <p> In this chapter we argue that the algorithms presented in Chapter 4 are complete over the class of well-behaved features (as defined in Chapter 3). 6.1 Motivations and Computational Issues It has been pointed out by Marefat <ref> [117, 118] </ref> that existing feature recognition methodologies have had only limited success in identifying and describing alter 165 native feature interpretations. There are a variety of reasons for this shortcom-ing. <p> Sakurai [160] presents a system that decomposes the volume to be machined into disjoint cells and then recombines them to form compound feature instances. This method is complete over the class of features that can be built from compositions of these primitive cells. In another effort, Marefat <ref> [117] </ref> states that his hypothesis testing approach is complete over his class of hypothesis generators for features. All of these methods are prone to combinatorial obstacles and are limited to polyhedral models. <p> The argument for the completeness of this thesis' approach serves to illustrate the utility of the general concept of completeness as developed in this chapter. 171 6.2.2 Feature Interactions The ability to recognize interacting features has been a stated goal of a number research efforts, among them <ref> [41, 58, 117, 91, 200] </ref>. While it is agreed upon as a problem of critical importance [210], however, the concept of feature interactions lies largely undefined in the general literature. In most cases, the definition for the term is implied, vague, or specific to one particular approach.
Reference: [118] <author> Michael Marefat and R. L. Kashyap. </author> <title> Automatic construction of process plans from solid model representations. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 22(5) </volume> <pages> 1097-1115, </pages> <month> September/October </month> <year> 1992. </year>
Reference-contexts: In this chapter we argue that the algorithms presented in Chapter 4 are complete over the class of well-behaved features (as defined in Chapter 3). 6.1 Motivations and Computational Issues It has been pointed out by Marefat <ref> [117, 118] </ref> that existing feature recognition methodologies have had only limited success in identifying and describing alter 165 native feature interpretations. There are a variety of reasons for this shortcom-ing.
Reference: [119] <author> Michael M. Marefat. </author> <title> Feature-based computer integrated inspection. </title> <editor> In Fatih Kinoglu, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 145-152. </pages> <publisher> ASME, </publisher> <month> August </month> <year> 1993. </year> <month> 276 </month>
Reference-contexts: Vandenbrande and Requicha [200] adopt a similar method and classify tool-swept volumes as different types of volumetric machining features. 2.2.2.2 Other Types Of Features Although much of the research work on features has dealt with machining, other recent work has employed features for inspection planning <ref> [119] </ref>, part coding [109], and other manufacturing processes, such as injection molding [141]. Stanford University's NEXT-Cut [35] used features for concurrent design of both the product and the manufacturing process while considering constraints imposed by a variety of manufacturing domains.
Reference: [120] <author> Edward C. Martin. </author> <title> Getting Started with Scheme Using the ACIS 3D Toolkit. Spatial Technology Inc., 2425 55th Street, Building A, </title> <address> Boulder, CO 80301, v1.1 edition, </address> <month> Feburary </month> <year> 1994. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel [183, 184, 185, 178] and the 3D Toolkit <ref> [180, 181, 120, 182, 179] </ref>. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler. The 3D Toolkit provides an extended set of higher-level API calls as well as Scheme [1] language interpreter based on the Elk Scheme [47] dialect.
Reference: [121] <author> R. R. Martin and P. C. Stephenson. </author> <title> Sweeping of three-dimensional objects. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(4) </volume> <pages> 223-234, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Sweeping of 3D solids, as shown in Figures 2.6 (c) and (d) for a polyhedra, introduces additional mathematical 27 difficulties. In recent years, techniques have been developed for handling many of these situations <ref> [121] </ref>. Sweeping of solids has important uses in manufacturing applications. <p> Development of robust 3D projection and sweeping routines for the full class of solids described by ACIS (i.e., both manifold and non-manifold objects with boundaries that might consist of both analytic and b-spline surfaces) has been the subject of intensive research activity <ref> [121] </ref> and development of robust sweeping algorithms is beyond the scope of this thesis.
Reference: [122] <author> S. Meeran and M. J. Pratt. </author> <title> Automated feature recognition from 2d drawings. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 25(1) </volume> <pages> 7-17, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The reason for this increasing popularity is that for most CAD/CAM problems the design needs to be interpreted in terms of the needs of the particular application. Significant work has been directed toward defining sets of features to serve as a means of communication between design and manufacturing <ref> [172, 122] </ref>. At present, however, most researchers are convinced that no single set of features can satisfy the requirements of every possible design and manufacturing domain. 28 Feature-based characterization of design information has long been viewed as vital for design analysis and data exchange. <p> Henderson and Taylor [78, 79, 193] developed a system for conceptual modeling in an effort to represent features, functionality, dimensions, and tolerances within a solid modeling system. 2.2.2 Manufacturing Features The feature concept had its beginning with the process planning of machined parts <ref> [122] </ref>. Historically, process planning systems for machining have employed features to represent machining operations. Manufacturing features have grown to fill important roles in a variety of manufacturing application domains, such as assembly, inspection, etc. Each different manufacturing application domain has different requirements for its specific feature definitions. <p> Each different manufacturing application domain has different requirements for its specific feature definitions. Requirements and specifications for satisfactory manufacturing feature definitions in various domains have been addressed numerous times in previous work. Pratt <ref> [122] </ref> states that features should be capable of representing, among other things, component primitives, connectivity 33 between entities, and geometric, topological, and size constraints. As pointed out in [52], some of the properties that features should be capable of encoding are: 1.
Reference: [123] <author> Sreekumar Menon and Yong Se Kim. </author> <title> Handling blending features in form feature recognition using convex decomposition. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 79-92. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Kim further improved the approach by performing additional mapping of the found volumes to machining features. Extension of this method from polyhedra to the more general surfaces required for realistic parts is currently under investigation <ref> [123] </ref>. In other work on volumetric approaches, Sakurai and Chin [159] propose an algorithm for recognizing general protrusions and cavities through "spatial decomposition and composition." The method generates alternative features and, although able to handle intersecting features, is computationally expensive and may generate very large numbers of alternative features.
Reference: [124] <author> James R. Miller. </author> <title> Architectural issues in solid modelers. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(5) </volume> <pages> 72-87, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: For an overview of the architecture of solid modeling systems, readers are referred to <ref> [124] </ref>. The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering.
Reference: [125] <author> H. D. </author> <title> Mills. </title> <journal> The new math of computer programming. Communications of the ACM, </journal> <volume> 18(1) </volume> <pages> 43-48, </pages> <month> January </month> <year> 1975. </year>
Reference-contexts: Formally, program correctness is defined as showing that a given program is correct with respect to some functional specification f . For purely illustrative purposes, Figure 6.1 presents an example program and Figure 6.2 the formal proof of its correctness using Mills' functional semantics method <ref> [59, 125, 127] </ref>. <p> Denver International Airport. 175 factorial ( integer m) s = 1; while m &gt; 0 do f m = m 1; return s; Readers interested in reading more on formal methods for program correctness (or verifying the proof in Figure 6.2) are referred to the extensive literature in this area <ref> [114, 126, 45, 59, 80, 125, 127] </ref>. This example is solely intended to show the complexity of generating formal proofs of program correctness; hence, we shall not present any description of the technique.
Reference: [126] <author> H. D. Mills, V. R. Basili, J. D. Gannon, and R. G. Hamlet. </author> <title> Principles of Computer Programmings: A Mathematical Approach. </title> <publisher> Allyn and Bacon, </publisher> <year> 1987. </year>
Reference-contexts: Denver International Airport. 175 factorial ( integer m) s = 1; while m &gt; 0 do f m = m 1; return s; Readers interested in reading more on formal methods for program correctness (or verifying the proof in Figure 6.2) are referred to the extensive literature in this area <ref> [114, 126, 45, 59, 80, 125, 127] </ref>. This example is solely intended to show the complexity of generating formal proofs of program correctness; hence, we shall not present any description of the technique.
Reference: [127] <author> Harlan D. Mills. </author> <title> Software Productivity. </title> <publisher> Dorset House Publishing, </publisher> <address> New York, NY, USA, </address> <year> 1988. </year>
Reference-contexts: Formally, program correctness is defined as showing that a given program is correct with respect to some functional specification f . For purely illustrative purposes, Figure 6.1 presents an example program and Figure 6.2 the formal proof of its correctness using Mills' functional semantics method <ref> [59, 125, 127] </ref>. <p> Denver International Airport. 175 factorial ( integer m) s = 1; while m &gt; 0 do f m = m 1; return s; Readers interested in reading more on formal methods for program correctness (or verifying the proof in Figure 6.2) are referred to the extensive literature in this area <ref> [114, 126, 45, 59, 80, 125, 127] </ref>. This example is solely intended to show the complexity of generating formal proofs of program correctness; hence, we shall not present any description of the technique.
Reference: [128] <author> Michael E. Mortenson. </author> <title> Geometric Modeling. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, </address> <year> 1985. </year> <month> 277 </month>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla [116], Morten-son <ref> [128] </ref>, Faux and Pratt [54] and Woodwark [211, 18]; as well as the proceedings from the recent conferences on solid modeling and applications [153, 154, 155]. For an overview of the architecture of solid modeling systems, readers are referred to [124].
Reference: [129] <author> Chandrasekhar Narayanaswami and William R. Franklin. </author> <title> Determina--tion of mass properties of polygonal csg objects in parallel. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 255-267, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: They outline how this special-case hardware makes possible brute-force solutions to difficult computational problems, such as spatial sweeping and offsetting. 226 Narayanaswami and Franklin <ref> [129] </ref> present a parallel multi-processor method for calculating the mass properties of polygonal CSG objects and outline some extensions for applying the techniques to 3-D polyhedra. Banerjee et al. [12] have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory.
Reference: [130] <author> D. S. Nau. </author> <title> Automated process planning using hierarchical abstraction. </title> <journal> TI Technical Journal, </journal> <pages> pages 39-46, </pages> <month> Winter </month> <year> 1987. </year>
Reference-contexts: Classifying machining features. There have been numerous attempts to classify machining features and devise feature hierarchies. In addition to the MRSEV Library for 3-axis machining features of Kramer [108, 107] mentioned in the next section, Nau et al. <ref> [130] </ref> developed a machining feature library for process planning. Similarly, Gindy [62] presented a feature hierarchy describing the geometric information required for a class of form features for process planning. Figure 2.10 presents a machining feature taxonomy developed by Laakko and Mantyla [110]. <p> More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach.
Reference: [131] <author> D. S. Nau, G. Zhang, S. K. Gupta, and R. R. Karinthi. </author> <title> Evaluating product machinability for concurrent engineering. </title> <editor> In W. G. Sullivan and H. R. Parsaei, editors, </editor> <booktitle> Concurrent Engineering: Contemporary Issues and Modern Design Tools, </booktitle> <pages> pages 264-279. </pages> <publisher> Chapman and Hall, </publisher> <year> 1993. </year>
Reference-contexts: In general, machining features model material removal operations. For example, a machining feature might be defined as the volume swept by a cutting tool during machining and can be represented as a parameterized solid <ref> [24, 131] </ref>. Machining features have been defined both as surface features and as volumetric features [144]. When defined as surfaces, machining features are collections of faces that are to be created by a machining operation. Historically, the dominant approach was to define machining features as collections of surfaces.
Reference: [132] <author> John K. Ousterhout. </author> <title> Tcl: An embeddable command language. </title> <booktitle> In Winter USENIX Conference, </booktitle> <year> 1990. </year>
Reference-contexts: NIHCL was used to encapsulate many of the solid modeling functions by creating classes for solid models and features. 206 Tcl/Tk and Expect. Tcl is an embeddable tool command language devel-oped by Ousterhout at the University of California at Berkeley <ref> [132, 134, 135] </ref>. Tk [133] is a graphical user interface toolkit based on Tcl. Expect [112] is an extension to TCL that enables control of other interactive applications. Following a script, Expect knows what output is to be produced by a program and what the correct response should be.
Reference: [133] <author> John K. Ousterhout. </author> <title> An X11 toolkit based on the Tcl language. </title> <booktitle> In Winter USENIX Conference, </booktitle> <year> 1991. </year>
Reference-contexts: NIHCL was used to encapsulate many of the solid modeling functions by creating classes for solid models and features. 206 Tcl/Tk and Expect. Tcl is an embeddable tool command language devel-oped by Ousterhout at the University of California at Berkeley [132, 134, 135]. Tk <ref> [133] </ref> is a graphical user interface toolkit based on Tcl. Expect [112] is an extension to TCL that enables control of other interactive applications. Following a script, Expect knows what output is to be produced by a program and what the correct response should be.
Reference: [134] <author> John K. Ousterhout. </author> <title> Tcl/Tk tutorial. </title> <booktitle> In Winter USENIX Conference, </booktitle> <year> 1993. </year>
Reference-contexts: NIHCL was used to encapsulate many of the solid modeling functions by creating classes for solid models and features. 206 Tcl/Tk and Expect. Tcl is an embeddable tool command language devel-oped by Ousterhout at the University of California at Berkeley <ref> [132, 134, 135] </ref>. Tk [133] is a graphical user interface toolkit based on Tcl. Expect [112] is an extension to TCL that enables control of other interactive applications. Following a script, Expect knows what output is to be produced by a program and what the correct response should be.
Reference: [135] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: NIHCL was used to encapsulate many of the solid modeling functions by creating classes for solid models and features. 206 Tcl/Tk and Expect. Tcl is an embeddable tool command language devel-oped by Ousterhout at the University of California at Berkeley <ref> [132, 134, 135] </ref>. Tk [133] is a graphical user interface toolkit based on Tcl. Expect [112] is an extension to TCL that enables control of other interactive applications. Following a script, Expect knows what output is to be produced by a program and what the correct response should be.
Reference: [136] <author> Frederic Pariente and Yong Se Kim. </author> <title> Incremental and localized update of convex decomposition for form feature decomposition. </title> <editor> In A. A. Busnaina, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 587-598, </pages> <address> New York, NY 10017, September 17-20, Boston, MA 1995. </address> <publisher> ASME. </publisher> <pages> 278 </pages>
Reference-contexts: The approach had several problems, including the existence of pathological cases in which the 58 procedure would not converge. The non-convergence of Woo's approach has been solved in recent work by Kim et al. <ref> [102, 103, 204, 136] </ref>, whose system produces a decomposition of the convex hull of a part into general form features. Kim's approach uses convex volume decompositions to produce alternating sums of volumes and techniques for partitioning the solid to avoid non-convergence.
Reference: [137] <author> Yun Peng and James A. Reggia. </author> <title> Diagnostic problem-solving with causal chaining. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 2 </volume> <pages> 265-302, </pages> <year> 1987. </year>
Reference-contexts: Since each FBM is basically a volumetric set cover of the delta volume produced from the feature alternatives, models can be generated with variations on set covering techniques <ref> [147, 137] </ref>, using pruning heuristics to discard unpromising FBMs. This was the approach taken to manufacturability by Gupta [70]. 3.3 Primary and Well-Behaved Machining Fea tures For arbitrary manufacturing domains, the set of all valid features V can be unmanageably large (even infinite).
Reference: [138] <author> Thomas J. Peters. </author> <title> Encoding mechanical design features for recognition via neural nets. </title> <booktitle> Research in Engineering Design, </booktitle> <volume> 4(2) </volume> <pages> 67-74, </pages> <year> 1992. </year>
Reference-contexts: In particular, Peters <ref> [138] </ref> describes techniques for training neural networks to recognize feature classes that can be customized by the end user. Prabhakar and Henderson [142] described the use of neural networks to recognize and classify features for a domain of polyhedral objects.
Reference: [139] <author> Thomas J. Peters. </author> <title> Mechanical design heuristics to reduce the combinatorial complexity for feature recognition. </title> <booktitle> Research In Engineering Design, </booktitle> <volume> 4 </volume> <pages> 195-201, </pages> <year> 1993. </year>
Reference-contexts: For a general reference on the combinatorial complexity of graph and grammatical approaches to feature recognition readers are referred to Peters <ref> [139] </ref>. Searching and Matching. In one of the most significant early works in feature recognition, Kyprianou [109] presented the first effort to automatically parse solid models of parts for group coding. <p> Because these will eventually be desirable to represent, it is important to attempt to measure computational complexity. Existing methods make mention of complexity but rarely attempt to classify it. As pointed out by Peters <ref> [139] </ref>, both grammatical methods and some graph-based approaches are prone to combinatorial difficulties. Some of the approaches that have incorporated complexity measures [39, 55] are often representationally limited, covering a restricted domain of parts (e.g., polyhedra) and/or feature types (e.g., not manufacturing process features). <p> In the feature recognition literature, De Floriani [39] presents an analysis of the complexity of her methodology. Peters <ref> [139] </ref> illustrates some of the combinatorial difficulties inherent in many graph-theoretic approaches to the feature recognition problem. Fields and Anderson [55] present a linear-time recognition algorithms for a variety of surface features. Other attempts to measure performance include timing results, most notably in [10, 109, 38]. <p> For approaches based on data structures abstracted from a solid model of a part, such as graph-based methods [39, 91, 30, 31, 34, 32, 33], the computational cost is most easily calculated using the first method: counting the number of operations on the data structures. Peters <ref> [139] </ref> uses a similar approach to compute abstract complexity bounds on instances of the feature recognition problem itself. Other approaches to feature recognition, including the one described in this thesis, employ extensive queries to the solid modeling system to reason about geometry and to extract feature instances. <p> Previous research on CAD/CAM and solid modeling applications lacks analyses of the complexity of the problems being solved. While there have been some notable efforts at measuring the complexity of individual approaches to feature recognition <ref> [40, 39, 55, 139, 38] </ref>, none have presented a general way of measuring the complexity of algorithms built on top of the existing infrastructure provided by a solid modeling system.
Reference: [140] <author> Henry Petroski. </author> <title> Failed promises. </title> <journal> American Scientist, </journal> <volume> 82(1) </volume> <pages> 6-9, </pages> <month> January-February </month> <year> 1994. </year>
Reference-contexts: This has been extensively documented in the mainstream as well as science media. For example, Petroski <ref> [140] </ref> describes some of the hazards caused by analysis software for civil engineering and a recent cover story 174 in Scientific American [61] describes some of the significant obstacles that still need to be overcome in the design and implementation of large software systems. 1 In the following two sections, we
Reference: [141] <author> J. Miguel Pinilla, Susan Finger, and Friedrich B. Prinz. </author> <title> Shape feature description using an augmented topology graph grammar. </title> <booktitle> In Proceedings NSF Engineering Design Research Conference, </booktitle> <pages> pages 285-300. </pages> <institution> National Science Foundation, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: method and classify tool-swept volumes as different types of volumetric machining features. 2.2.2.2 Other Types Of Features Although much of the research work on features has dealt with machining, other recent work has employed features for inspection planning [119], part coding [109], and other manufacturing processes, such as injection molding <ref> [141] </ref>. Stanford University's NEXT-Cut [35] used features for concurrent design of both the product and the manufacturing process while considering constraints imposed by a variety of manufacturing domains. <p> These methods fall into two categories: those based on graph search [39, 30] and those based on pattern matching <ref> [91, 141, 156] </ref>. A common difficulty for both categories of the graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> This paper formalized the problem of recognizing features (including compound features) by parsing a graph-based representation of a part using a web grammar. grammar from CMU <ref> [141, 156] </ref>. Efforts at Carnegie Mellon University by Finger et al. [141, 156] have employed graph grammars for finding features in models of injection molded parts. <p> This paper formalized the problem of recognizing features (including compound features) by parsing a graph-based representation of a part using a web grammar. grammar from CMU <ref> [141, 156] </ref>. Efforts at Carnegie Mellon University by Finger et al. [141, 156] have employed graph grammars for finding features in models of injection molded parts. They define objects to be elements in a language generated by an augmented 57 topology graph grammar and then use their graph grammar to parse a rep-resentation of an object.
Reference: [142] <author> S. Prabhakar and M. R. Henderson. </author> <title> Automatic form-feature recognition using neural-network-based techniques on boundary representations of solid models. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(7) </volume> <pages> 381-393, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: In particular, Peters [138] describes techniques for training neural networks to recognize feature classes that can be customized by the end user. Prabhakar and Henderson <ref> [142] </ref> described the use of neural networks to recognize and classify features for a domain of polyhedral objects. A strength of this approach is that they exploit the trainability of a neural net to incorporate new feature types.
Reference: [143] <author> M. J. Pratt and P. R. Wilson. </author> <title> Requirements for support of form features in a solid modeling system. Technical Report R-85-ASPP-01, </title> <booktitle> Computer Aided Manufacturing International, </booktitle> <address> Arlington, TX, </address> <year> 1985. </year>
Reference-contexts: One of the early efforts was that of the 36 Computer-Aided Manufacturing International consortium (CAM-I) [171]. CAM-I produced numerous reports and studies of the technological issues relating to features in the context of automated manufacturing. Working with CAM-I, Pratt and Wilson <ref> [143] </ref> produced a study of the use of form features within a geometric modeling system. In this work, they provided a methodology for defining features and performing design in either boundary-representation or CSG-based solid modeling systems.
Reference: [144] <author> Michael J. Pratt. </author> <title> Tutorial paper on advanced topics in solid modeling: Form features and their application in solid modeling. </title> <booktitle> In SIGGRAPH 1987. The Association for Computing Machinery, </booktitle> <publisher> ACM Press, </publisher> <year> 1987. </year> <month> 279 </month>
Reference-contexts: All faces of the hole are sequentially adjacent. 4. The hole terminates with a valid hole bottom. (b) Henderson [77] (b). metric features, in particular to describe the material removal volumes created by machining operations. Volumetric features have a variety of advantages over surface features <ref> [144] </ref>; primary among them is that manufacturing process information (in particular in the machining domain) is more easily described volu-metrically. By way of an example, a machine tool moves a cutting tool through 3D space. <p> In general, machining features model material removal operations. For example, a machining feature might be defined as the volume swept by a cutting tool during machining and can be represented as a parameterized solid [24, 131]. Machining features have been defined both as surface features and as volumetric features <ref> [144] </ref>. When defined as surfaces, machining features are collections of faces that are to be created by a machining operation. Historically, the dominant approach was to define machining features as collections of surfaces. <p> In recent years, however, an increasing number of researchers are adopting the position that machining features should be defined as parameterized solids that model the volume removed by the machining operation. Volumetric machining features provide a more comprehensive representation of the actual machining operation <ref> [144] </ref> and are becoming the norm in the current generation of feature-based CAD/CAM systems. Classifying machining features. There have been numerous attempts to classify machining features and devise feature hierarchies.
Reference: [145] <author> Paul W. Purdom and Cynthia A. Brown. </author> <title> The Analysis of Algorithms. </title> <publisher> Holt, Rinehart, and Winston, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: An advantage of graph-based systems is the theoretical and algorithmic foundations of graph theory [75]. This affords the opportunity to exploit the mathematics of graph theory to define the problem and the opportunity to draw on the many algorithms that deal with searching, traversing, parsing, or matching graphs <ref> [3, 19, 145] </ref>. For a general reference on the combinatorial complexity of graph and grammatical approaches to feature recognition readers are referred to Peters [139]. Searching and Matching.
Reference: [146] <author> Valerie Quercia and Tim O'Reilly. </author> <title> X Window System User's Guide, volume 3. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> x11 r3 and r4 edition, </address> <year> 1990. </year>
Reference-contexts: The 3D Toolkit also provides tools for extending and customizing this Scheme interface. ACIS is the geometry engine of IMACS and F-Rex. In much the same way as the use of Motif, Xlib and X Windows <ref> [146] </ref> can speed the development of interactive graphical programs and interfaces, ACIS provides a large library of routines for creation, manipulation, and interrogation of geometric and topological entities with which to build applications. F-Rex uses a mixture of calls to the ACIS kernel and Scheme functions. HOOPS.
Reference: [147] <author> J.A. Reggia, D.S. Nau, and P.Y. Wang. </author> <title> A formal model of diagnostic inference. II. algorithmic solution and applications. </title> <journal> Information Sciences, </journal> <volume> 37 </volume> <pages> 257-285, </pages> <year> 1985. </year>
Reference-contexts: Since each FBM is basically a volumetric set cover of the delta volume produced from the feature alternatives, models can be generated with variations on set covering techniques <ref> [147, 137] </ref>, using pruning heuristics to discard unpromising FBMs. This was the approach taken to manufacturability by Gupta [70]. 3.3 Primary and Well-Behaved Machining Fea tures For arbitrary manufacturing domains, the set of all valid features V can be unmanageably large (even infinite).
Reference: [148] <author> William C. Regli, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Extracting alternative machining features: An algorithmic approach. </title> <booktitle> Research in Engineering Design, </booktitle> <volume> 7(3) </volume> <pages> 173-192, </pages> <year> 1995. </year>
Reference-contexts: Those not shown are additional drilling features that are entirely subsumed by one of the milling features. 214 215 216 8.3.3 Example: A Socket The example part in Figure 8.7 is a design of a socket taken from <ref> [148] </ref>. Figure 8.7 (a) shows the design for the socket and Figure 8.7 (b) a CAD model of the design. The initial workpiece, S, is a cylindrical object of raw stock material to be acted upon by a set of machining operations that generate features (Figure 8.7 (c)).
Reference: [149] <author> Aristides A. G. Requicha. </author> <title> Representation for rigid solids: Theory, methods, </title> <journal> and systems. Computing Surveys, </journal> <volume> 12(4) </volume> <pages> 437-464, </pages> <month> December </month> <year> 1980. </year>
Reference-contexts: 183, 184, 185, 178, 180, 181, 120, 182, 179] as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <ref> [116, 149] </ref>: 1. Decomposition approaches that model a solid as collections of primitive objects connected in some way. Examples of these data structures include quad-trees and oct-trees [163], which represent space as collections of primitive cells (usually cuboidal). 2. <p> that they are capable of handling. 84 Chapter 3 Developing Feature Definitions This chapter introduces a class of machining features and presents definitions for feature-based models, primary features and well-behaved features. 3.1 Machined Parts and Machining Features A common class of solids are those described by r-sets with manifold boundaries <ref> [116, 149] </ref>. In the context of this thesis, a solid is an r-set whose boundary representation is a manifold consisting of analytic surfaces (e.g., planar, elliptical, toroidal, conical and spherical surfaces).
Reference: [150] <author> Raphael M. Robinson. </author> <title> Undecidability and nonperiodicity for tilings of the plane. </title> <journal> Inventiones Mathematicae, </journal> <volume> 12 </volume> <pages> 177-209, </pages> <year> 1971. </year>
Reference-contexts: This means that a discrete version of the geometric problem must be devel 168 oped in which solid models and feature instances are parameterized from a countable set. With respect to (2) and (3), the feature recognition problem bears some resemblance to the problem of tiling the plane <ref> [100, 195, 14, 150] </ref>. Tiling describes the problem of asking, given templates for 2D tiles, whether the plane (or some subset of it) can be covered with instances of tiles.
Reference: [151] <author> David W. Rosen, John R. Dixon, and Susan Finger. </author> <title> Conversions of feature-based representations via graph grammar parsing. </title> <booktitle> In AMSE Design Theory Methodology Conference, </booktitle> <year> 1992. </year>
Reference-contexts: For designs created using a feature-based design approach and represented with design features, there must exist some facility for translating these design features into feature viewpoints for use in the downstream applications <ref> [151] </ref>. 3. For many manufacturing domains the feature-based description of a design is not unique [115, 96, 98, 95]. Selecting which interpretation is most suitable to drive manufacturing planning requires that the designer be an expert in the relevant domain. 4. <p> Extensions of these concepts to the problem translation between differing feature representations can be found in <ref> [151] </ref>. This approach has many attractive properties, among them the ability to define the needed features and the use of a formal graph grammar for describing a language of shapes.
Reference: [152] <author> D.W. Rosen and J.R. Dixon. </author> <title> Languages for feature-based design and man-ufacturability evaluation. </title> <journal> Systems Automation Research and Applications, </journal> <volume> 2(4) </volume> <pages> 353-373, </pages> <year> 1992. </year>
Reference-contexts: For manufacturing domains that involve discrete manufacturing operations (such as machining, sheet metal bending, forging, etc.), a feature can be thought of as a parameterized object. This notion of features is becoming increasingly common and is gaining widespread acceptance <ref> [152, 24] </ref>. 34 (a): form feature: hole (b): drilling features (c): form feature: shoulder (d): milling features Note that manufacturing features are not necessarily equivalent to the usual notion of form features.
Reference: [153] <author> Jaroslaw Rossignac and Joshua Turner, </author> <title> editors. </title> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <address> New York, NY, USA, June 5-7 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher> <address> Austin, Texas. </address> <month> 280 </month>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla [116], Morten-son [128], Faux and Pratt [54] and Woodwark [211, 18]; as well as the proceedings from the recent conferences on solid modeling and applications <ref> [153, 154, 155] </ref>. For an overview of the architecture of solid modeling systems, readers are referred to [124]. The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering.
Reference: [154] <author> Jaroslaw Rossignac, Joshua Turner, and George Allen, </author> <title> editors. </title> <booktitle> Second Symposium on Solid Modeling and Applications, </booktitle> <address> New York, NY, USA, </address> <month> May 19-21 </month> <year> 1993. </year> <booktitle> ACM SIGGRAPH and the IEEE Computer Society, </booktitle> <publisher> ACM Press. </publisher> <address> Montreal, Canada. </address>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla [116], Morten-son [128], Faux and Pratt [54] and Woodwark [211, 18]; as well as the proceedings from the recent conferences on solid modeling and applications <ref> [153, 154, 155] </ref>. For an overview of the architecture of solid modeling systems, readers are referred to [124]. The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering.
Reference: [155] <author> Jaroslaw Rossignac, Joshua Turner, and George Allen, </author> <title> editors. </title> <booktitle> Thrid Symposium on Solid Modeling and Applications, </booktitle> <address> New York, NY, USA, </address> <month> May 17-19 </month> <year> 1995. </year> <booktitle> ACM SIGGRAPH and the IEEE Computer Society, </booktitle> <publisher> ACM Press. </publisher> <address> Salt Lake City, Utah. </address>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla [116], Morten-son [128], Faux and Pratt [54] and Woodwark [211, 18]; as well as the proceedings from the recent conferences on solid modeling and applications <ref> [153, 154, 155] </ref>. For an overview of the architecture of solid modeling systems, readers are referred to [124]. The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering.
Reference: [156] <author> Scott A. Safier and Susan Finger. </author> <title> Parsing features in solid geometric models. </title> <booktitle> In European Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: These methods fall into two categories: those based on graph search [39, 30] and those based on pattern matching <ref> [91, 141, 156] </ref>. A common difficulty for both categories of the graph-based approach is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> This paper formalized the problem of recognizing features (including compound features) by parsing a graph-based representation of a part using a web grammar. grammar from CMU <ref> [141, 156] </ref>. Efforts at Carnegie Mellon University by Finger et al. [141, 156] have employed graph grammars for finding features in models of injection molded parts. <p> This paper formalized the problem of recognizing features (including compound features) by parsing a graph-based representation of a part using a web grammar. grammar from CMU <ref> [141, 156] </ref>. Efforts at Carnegie Mellon University by Finger et al. [141, 156] have employed graph grammars for finding features in models of injection molded parts. They define objects to be elements in a language generated by an augmented 57 topology graph grammar and then use their graph grammar to parse a rep-resentation of an object.
Reference: [157] <author> Hiroshi Sakurai. </author> <title> Generating volumes from faces of a solid model. </title> <booktitle> In NSF Design and Manufacturing Systems Conference, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: However, it is limited to a domain of polyhedral parts with orthogonal faces and it does not provide a means of grouping features into feature-based models. More recently, Sakurai and his colleagues refined this cellular decomposition approach <ref> [158, 160, 159, 157, 38] </ref>. Such methods are computationally expensive, often producing a large number of cells with a large (often exponential) number of ways for them to be combined into features.
Reference: [158] <author> Hiroshi Sakurai. </author> <title> Decomposing a delta volume into maximal convex volumes and sequencing them for machining. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 135-142. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: However, it is limited to a domain of polyhedral parts with orthogonal faces and it does not provide a means of grouping features into feature-based models. More recently, Sakurai and his colleagues refined this cellular decomposition approach <ref> [158, 160, 159, 157, 38] </ref>. Such methods are computationally expensive, often producing a large number of cells with a large (often exponential) number of ways for them to be combined into features.
Reference: [159] <author> Hiroshi Sakurai and Chia-Wei Chin. </author> <title> Defining and recognizing cavity and protrusion by volumes. </title> <editor> In Fatih Kinoglu, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 59-65, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Kim further improved the approach by performing additional mapping of the found volumes to machining features. Extension of this method from polyhedra to the more general surfaces required for realistic parts is currently under investigation [123]. In other work on volumetric approaches, Sakurai and Chin <ref> [159] </ref> propose an algorithm for recognizing general protrusions and cavities through "spatial decomposition and composition." The method generates alternative features and, although able to handle intersecting features, is computationally expensive and may generate very large numbers of alternative features. <p> However, it is limited to a domain of polyhedral parts with orthogonal faces and it does not provide a means of grouping features into feature-based models. More recently, Sakurai and his colleagues refined this cellular decomposition approach <ref> [158, 160, 159, 157, 38] </ref>. Such methods are computationally expensive, often producing a large number of cells with a large (often exponential) number of ways for them to be combined into features.
Reference: [160] <author> Hiroshi Sakurai and Chia-Wei Chin. </author> <title> Definition and recognition of volume features for process planning. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <booktitle> Advances in Feature Based Manufacturing, chapter 4, </booktitle> <pages> pages 65-80. </pages> <address> Elsevier/North Holland, </address> <year> 1994. </year> <month> 281 </month>
Reference-contexts: However, it is limited to a domain of polyhedral parts with orthogonal faces and it does not provide a means of grouping features into feature-based models. More recently, Sakurai and his colleagues refined this cellular decomposition approach <ref> [158, 160, 159, 157, 38] </ref>. Such methods are computationally expensive, often producing a large number of cells with a large (often exponential) number of ways for them to be combined into features. <p> Since the techniques are based on heuristics, it is not entirely clear when (and which) alternative inter pretations will be produced. * In feature recognition work by Sakurai <ref> [160] </ref>, the volume to be machined is decomposed into cells. Exhaustively, each combination of cells is then matched against user-defined feature templates. <p> The feature algebra of Karinthi [94], starting from a single initial feature interpretation, exhaustively generates alternative interpretations of the part by manipulating the features with algebraic operators, but does not include a methodology for recognizing the features. Sakurai <ref> [160] </ref> presents a system that decomposes the volume to be machined into disjoint cells and then recombines them to form compound feature instances. This method is complete over the class of features that can be built from compositions of these primitive cells.
Reference: [161] <author> Hiroshi Sakurai and David C. Gossard. </author> <title> Recognizing shape features in solid models. </title> <journal> IEEE Computer Graphics & Applications, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: Some feature recognition systems have also incorporated the ability to have user-definable feature classes for the purposes of customization and extendibil-ity <ref> [161, 110] </ref>. Recent work has applied Object-Oriented Design (OOD) methodologies to CAD tools to incorporate feature classes, customization, and recognition in a unified system [110]. In such systems, users can define classes of features relevant for individual applications. Another approach to customization is feature languages [41, 198]. <p> Other work from the same research group [53, 40] uses an approach similar to this to generate a hierarchical feature structure to represent objects at higher levels of abstraction. Sakurai and Gossard <ref> [161] </ref> developed a system for recognition of user-defined features based on a similar graph search strategy. An important contribution of this work is that it emphasizes the separation of the feature definitions from the feature recognition algorithm. <p> They define objects to be elements in a language generated by an augmented 57 topology graph grammar and then use their graph grammar to parse a rep-resentation of an object. The advantage of their graphical structure is that it contains both geometric and topological information (unlike the structures of <ref> [39, 53, 91, 161] </ref>). This graphical structure, as shown in Figure 2.16, can also be used to define general features. A grammar can then be defined to describe the class of objects that can be generated with a specific set of features.
Reference: [162] <author> Otto W. Salomons, Fred J. A. M. van Houten, and H. J. J. Kals. </author> <title> Review of research in feature-based design. </title> <journal> Journal of Manufacturing Systems, </journal> <volume> 12(2) </volume> <pages> 113-132, </pages> <year> 1993. </year>
Reference-contexts: It is also believed that feature-based design provides an opportunity to capture other important manufacturing information, such as the designer's intent and the design rationale [104, 172]. For a recent review of research in the area feature-based design, readers are referred to <ref> [162] </ref>. 2.2.4 Feature Recognition Creating a survey of the field of automated feature recognition presents a difficulty because attempts span a wide variety of applications. Research goals, application domain, and technique vary greatly over the works in the field and leave few bases for comparisons between methods.
Reference: [163] <author> H. Samet. </author> <title> The quadtree and related hierarchial data structures. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(3) </volume> <pages> 287-260, </pages> <year> 1984. </year>
Reference-contexts: Decomposition approaches that model a solid as collections of primitive objects connected in some way. Examples of these data structures include quad-trees and oct-trees <ref> [163] </ref>, which represent space as collections of primitive cells (usually cuboidal). 2. Constructive approaches that model a solid as a combination of primitive solid templates. For example, a common approach is constructive solid geometry (CSG), which represents a solid as a boolean expression on some set of primitive solids.
Reference: [164] <author> Sandvik Coromant, </author> <year> 1993. </year> <note> Catalog CMP90-R93.3. </note>
Reference-contexts: Thus, the volume describing the 91 (a): ball end-mill (b): face mill a ball end-mill that could be used to create milling features with round bottom blends [48]; and (b) a face-milling tool <ref> [164] </ref>. milling feature can be modeled as a parameterized volume, as shown in In practice, it is impossible for a rotating cutting tool to sweep out a volume with convex corners. <p> While the parameters presented below are by no means exhaustive, they can be use to eliminate what are, with high probability, unrealistic feature instances. The values are based on a survey of common cutting tools as listed in cutting tool catalogs <ref> [48, 99, 164, 165, 194] </ref>. * For drilling features there are three parameters we consider: Flute length: Flute length refers to the length of the cutting surface of the tool. For the drilling tool in Figure 7.1 the flute length is l 4 . <p> For drilling and milling tools we use a value of 128mm. Hence the removal volume for any feature instance rem (f ) can be no deeper than 197 (a): components in a typical tool assembly (b): a milling tool assembly logs <ref> [164, 99] </ref>. 128mm. For chamfering and filleting tools this value is much less. We will use an estimated value of 20mm for both chamfering and filleting feature types based on the bounds on tools presented in Section 7.2. <p> H 3 is defined by the plane passing through point (p + v (128 + 32)) 2 The smallest radius tool assembly available from a survey of a variety of catalogs <ref> [48, 99, 164, 165, 194] </ref>. This value represents an approximate lower bound on the size of the tool assembly needed to hold a tool of a given radius.
Reference: [165] <author> Sandvik Coromant, </author> <year> 1994. </year> <note> Catalog CMP90-R94.2. </note>
Reference-contexts: While the parameters presented below are by no means exhaustive, they can be use to eliminate what are, with high probability, unrealistic feature instances. The values are based on a survey of common cutting tools as listed in cutting tool catalogs <ref> [48, 99, 164, 165, 194] </ref>. * For drilling features there are three parameters we consider: Flute length: Flute length refers to the length of the cutting surface of the tool. For the drilling tool in Figure 7.1 the flute length is l 4 . <p> For this parameter we use a value of 32mm. Tool assembly radius: This is the radius of the tool assembly, r a , such as those shown in Figures 7.8 and 7.9 (a). In order to exclude only those 198 (a): A drilling tool assembly, from <ref> [165] </ref> (b): Drilling feature h and acc (h) features. obviously inaccessible features, we select a value of r a =10mm. 2 Given the above parameters, the accessibility volume for the features in M is calculated as follows: Drilling feature: Given a drilling feature f of radius r with location p and <p> H 3 is defined by the plane passing through point (p + v (128 + 32)) 2 The smallest radius tool assembly available from a survey of a variety of catalogs <ref> [48, 99, 164, 165, 194] </ref>. This value represents an approximate lower bound on the size of the tool assembly needed to hold a tool of a given radius.
Reference: [166] <author> D. Schenck. </author> <title> Exchange of product model data part 11: The EXPRESS language. Technical Report ISO TC184/SC4 Document N64, International Organization for Standardization, </title> <year> 1990. </year> <month> July. </month>
Reference-contexts: The organizations involved with PDES comprise many corporate, government, and standards development entities. 1 Description data in STEP is handled by defining an information model in the EXPRESS data modeling language <ref> [166, 186] </ref> for each type of data required. Once an information model is defined, data for representing a specific product can be represented using the STEP rules for mapping EXPRESS to a physical file [8, 7, 199].
Reference: [167] <author> J. M. Schmitz and S. Desa. </author> <title> The application of a design for producibility methodology to complex stamped products. </title> <editor> In N. H. Chao and S. C. Y. Lu, editors, </editor> <title> Concurrent Product and Process Design, </title> <booktitle> ASME Winter Annual Meeting, </booktitle> <pages> pages 169-174. </pages> <publisher> ASME, </publisher> <year> 1989. </year>
Reference-contexts: To address such problems, it is emerging that manufacturability analysis systems will need the ability to generate redesign suggestions. Traditionally, the redesign process has been manual task, however automated systems are beginning to appear. Most existing approaches for automated generation of redesign suggestions <ref> [167, 84, 86] </ref> propose only local geometric design changes (e.g., changes to the parameters of individual features), and some [76] present completely redesigned parts. Because of interactions among features, however, it is sometimes impossible to arrive at an improved design without carefully choosing a combination of modifications.
Reference: [168] <author> Michael Schulte, Christian Weber, and Rainer Stark. </author> <title> Functional features for design in mechanical engineering. </title> <booktitle> Computers in Industry, </booktitle> <volume> 23(1) </volume> <pages> 15-24, </pages> <year> 1993. </year>
Reference-contexts: Recently there has been interest in features for other manufacturing life-cycle considerations, such as features with associated functional engineering significance. El Maraghy et al. [51] proposed and implemented a design tool employing functional features. Functional features were also a key part of the work of Schulte et al. <ref> [168] </ref>. Henderson and Taylor [78, 79, 193] developed a system for conceptual modeling in an effort to represent features, functionality, dimensions, and tolerances within a solid modeling system. 2.2.2 Manufacturing Features The feature concept had its beginning with the process planning of machined parts [122].
Reference: [169] <author> J. Shah, Y. Shen, and A. Shirur. </author> <title> Determination of machining volumes from extensible sets of design features. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <booktitle> Advances in Feature Based Manufacturing, </booktitle> <pages> pages 129-157. </pages> <address> Elsevier/North Holland, </address> <year> 1994. </year> <month> 282 </month>
Reference-contexts: Efforts along similar lines have been undertaken at Arizona State University <ref> [169] </ref> and at the University of Texas at Austin [28]. The work at ASU 59 uses a decomposition approach based on half-space partitioning.
Reference: [170] <author> Jami Shah, Martti Mantyla, and Dana Nau, </author> <title> editors. Advances in Feature Based Manufacturing. </title> <publisher> Elsevier/North Holland, </publisher> <year> 1994. </year>
Reference-contexts: The remainder of this section reviews some of the basic concepts in features and feature-based modeling, with a special emphasis on work in automated feature recognition. A comprehensive overview of feature-based manufacturing can be found in <ref> [170] </ref>. 2.2.1 Typical Feature Types Independent of a manufacturing domain or a particular CAD/CAM application, there are several generic types of features that are common in the literature.
Reference: [171] <author> Jami Shah, Palat Sreevalsan, Mary Rogers, Rick Billo, and Abraham Mathew. </author> <title> Current status of features technology. </title> <type> Technical Report R-88-GM-04.1, </type> <institution> Computer Aided Manufacturing-International, Arlington, TX, USA, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: Figure 2.10 presents a machining feature taxonomy developed by Laakko and Mantyla [110]. In addition to academic efforts, there have been numerous feature categorization attempts made in industry. One of the early efforts was that of the 36 Computer-Aided Manufacturing International consortium (CAM-I) <ref> [171] </ref>. CAM-I produced numerous reports and studies of the technological issues relating to features in the context of automated manufacturing. Working with CAM-I, Pratt and Wilson [143] produced a study of the use of form features within a geometric modeling system. <p> One may argue that "producing a feature description of an object for manufacturing" serves as an adequate definition of the problem; however, as noted there is currently no clear definition of "manufacturing feature" <ref> [171] </ref>. Theoretically, there are infinitely many and in the absence of some formalization for the feature recognition problem it is difficult to characterize what systems actually do. Without a precise statement of the problem it is impossible to judge the effectiveness of any algorithm.
Reference: [172] <author> Jami J. Shah. </author> <title> Assessment of features technology. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 23(5) </volume> <pages> 331-343, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The reason for this increasing popularity is that for most CAD/CAM problems the design needs to be interpreted in terms of the needs of the particular application. Significant work has been directed toward defining sets of features to serve as a means of communication between design and manufacturing <ref> [172, 122] </ref>. At present, however, most researchers are convinced that no single set of features can satisfy the requirements of every possible design and manufacturing domain. 28 Feature-based characterization of design information has long been viewed as vital for design analysis and data exchange. <p> The basic premise of a feature definition language is to give the user flexibility in defining their own feature class tailored to suit the needs of their particular application. Examples of advanced feature-based modeling systems capable of incorporating user-definable functional features include: The ASU Feature Testbed <ref> [173, 172] </ref>, which includes a generic feature mapping shell that allows mapping features from one application to other; and the systems developed by Laakko and Mantyla [110] and El Maraghy et al. [51]. <p> At the very minimum, feature recognition is perhaps the only reasonable way to generate multiple feature-based descriptions. It is also believed that feature-based design provides an opportunity to capture other important manufacturing information, such as the designer's intent and the design rationale <ref> [104, 172] </ref>. For a recent review of research in the area feature-based design, readers are referred to [162]. 2.2.4 Feature Recognition Creating a survey of the field of automated feature recognition presents a difficulty because attempts span a wide variety of applications.
Reference: [173] <author> Jami J. Shah. </author> <title> Conceptual development of form features and feature modelers. </title> <booktitle> Research in Engineering Design, </booktitle> <volume> 3 </volume> <pages> 93-108, </pages> <year> 1991. </year>
Reference-contexts: The basic premise of a feature definition language is to give the user flexibility in defining their own feature class tailored to suit the needs of their particular application. Examples of advanced feature-based modeling systems capable of incorporating user-definable functional features include: The ASU Feature Testbed <ref> [173, 172] </ref>, which includes a generic feature mapping shell that allows mapping features from one application to other; and the systems developed by Laakko and Mantyla [110] and El Maraghy et al. [51].
Reference: [174] <author> Jami J. Shah. </author> <title> Experimental investigation of the STEP form-feature information model. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 23(4) </volume> <pages> 282-296, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: While STEP does provide some mechanisms for representing geometric and topological form features, there exists no definitive structure for representing and exchanging all the relevant information associated with a manufacturing feature. Shah <ref> [174] </ref> describes his investigation of the STEP form features model. Example of a STEP-based Feature Library. Kramer [108, 107] developed a library of Material Removal Shape Element Volumes (MRSEVs) as a means of categorizing the shapes of volumes to be removed by machining operations on a 3-axis machining center.
Reference: [175] <institution> Shape Data Limited and Electronic Data Systems Corporation, </institution> <address> Parker's House 46, Regent Street, Cambridge CB2 1DP England. </address> <booktitle> Parasolid v5.0 Functional Description, </booktitle> <year> 1992. </year>
Reference-contexts: For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel <ref> [176, 175] </ref> and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models [116, 149]: 1. Decomposition approaches that model a solid as collections of primitive objects connected in some way.
Reference: [176] <institution> Shape Data Limited and Electronic Data Systems Corporation, </institution> <address> Parker's House 46, Regent Street, Cambridge CB2 1DP England. </address> <note> Parasolid v5.0 Programming Reference Manual, </note> <year> 1992. </year>
Reference-contexts: For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel <ref> [176, 175] </ref> and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models [116, 149]: 1. Decomposition approaches that model a solid as collections of primitive objects connected in some way.
Reference: [177] <institution> Spatial Technology Inc., Boulder, </institution> <address> CO. ACIS c fl Geometric Modeler, </address> <year> 1993. </year> <note> Version 1.4.1. </note>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models
Reference: [178] <institution> Spatial Technology Inc., </institution> <address> 2425 55th Street, Building A, Boulder, CO 80301. </address> <note> ACIS Geometric Modeler Test Harness User's Guide, v1.6 edition, Novem-ber 1994. 283 </note>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel <ref> [183, 184, 185, 178] </ref> and the 3D Toolkit [180, 181, 120, 182, 179]. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler.
Reference: [179] <author> Spatial Technology Inc., </author> <title> 2425 55th Street, Building A, Boulder, CO 80301. ACIS 3D Toolkit Technical Overview, </title> <year> 1995. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel [183, 184, 185, 178] and the 3D Toolkit <ref> [180, 181, 120, 182, 179] </ref>. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler. The 3D Toolkit provides an extended set of higher-level API calls as well as Scheme [1] language interpreter based on the Elk Scheme [47] dialect.
Reference: [180] <author> Spatial Technology Inc. and 3D/EYE Inc., </author> <title> 2425 55th Street, Building A, Boulder, CO 80301. ACIS 3D Toolkit API Reference, </title> <address> v1.2 edition, </address> <month> Novem-ber </month> <year> 1994. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel [183, 184, 185, 178] and the 3D Toolkit <ref> [180, 181, 120, 182, 179] </ref>. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler. The 3D Toolkit provides an extended set of higher-level API calls as well as Scheme [1] language interpreter based on the Elk Scheme [47] dialect.
Reference: [181] <author> Spatial Technology Inc. and 3D/EYE Inc., </author> <title> 2425 55th Street, Building A, Boulder, CO 80301. ACIS 3D Toolkit Application Guide, </title> <address> v1.2 edition, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel [183, 184, 185, 178] and the 3D Toolkit <ref> [180, 181, 120, 182, 179] </ref>. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler. The 3D Toolkit provides an extended set of higher-level API calls as well as Scheme [1] language interpreter based on the Elk Scheme [47] dialect.
Reference: [182] <author> Spatial Technology Inc. and 3D/EYE Inc., </author> <title> 2425 55th Street, Building A, Boulder, CO 80301. ACIS 3D Toolkit Programmer's Reference, </title> <address> v1.2 edition, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel [183, 184, 185, 178] and the 3D Toolkit <ref> [180, 181, 120, 182, 179] </ref>. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler. The 3D Toolkit provides an extended set of higher-level API calls as well as Scheme [1] language interpreter based on the Elk Scheme [47] dialect.
Reference: [183] <institution> Spatial Technology Inc., Three-Space Ltd., and Applied Geometry Corp., </institution> <address> 2425 55th Street, Building A, Boulder, CO 80301. </address> <note> ACIS Geometric Modeler API Reference, v1.6 edition, </note> <month> November </month> <year> 1994. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> If I is empty and all of the edges in E are open, return "face-milling feature." 3. Else, if all of the edges in E are closed, return "pocket-milling feature." 4. Else, return "step-milling feature." Profiles for any islands can be obtained by covering <ref> [183] </ref> the edge profile E with a planar face and calculating its 2D intersection with the part P . Any interior edge loops will correspond to islands. 4.3.3 Recognition of Chamfering and Filleting Features. <p> Hence, measuring the number of solid modeling operations (and building algorithms that reduce the total number of solid modeling queries) is a reasonable and useful objective. * One can choose to treat the solid modeling operations (in the case of the ACIS Solid Modeler <ref> [183] </ref>, these operations are calls to the application protocol interface (API)) as taking O (c) time, for some constant c. <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel <ref> [183, 184, 185, 178] </ref> and the 3D Toolkit [180, 181, 120, 182, 179]. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler.
Reference: [184] <institution> Spatial Technology Inc., Three-Space Ltd., and Applied Geometry Corp., </institution> <address> 2425 55th Street, Building A, Boulder, CO 80301. </address> <note> ACIS Geometric Modeler Application Guide, v1.6 edition, </note> <month> November </month> <year> 1994. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> An illustration of the distinction between geometric and topological information from the ACIS Solid Modeling Kernel is given in 21 within the ACIS Solid Modeler <ref> [184] </ref>. One of the most popular of these b-rep structures is the winged-edge representation [81] and its variations. For more information on boundary representation data structures, interested readers are referred to [81, 116, 207, 209]. Manifold and non-manifold solids. <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel <ref> [183, 184, 185, 178] </ref> and the 3D Toolkit [180, 181, 120, 182, 179]. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler.
Reference: [185] <institution> Spatial Technology Inc., Three-Space Ltd., and Applied Geometry Corp., </institution> <address> 2425 55th Street, Building A, Boulder, CO 80301. </address> <note> ACIS Geometric Modeler Programmers Reference, v1.6 edition, </note> <month> November </month> <year> 1994. </year>
Reference-contexts: The classic text on computer graphics of Foley and Van Dam [56] also covers solid modeling and its relationship to graphics and rendering. For information regarding commercial solid modeling systems, readers are referred to the product and reference information for Spatial Technologies ACIS modeler <ref> [177, 183, 184, 185, 178, 180, 181, 120, 182, 179] </ref> as well as the EDS/UNIGRAPHICS Parasolid solid modeling kernel [176, 175] and the PADL-2 project from the University of Rochester [21]. 19 2.1.1 Representation of 3D Surfaces and Solids There are three broad classes of schemes for representation of solid models <p> Spatial Technologies' ACIS c fl is a solid modeling kernel, a C++ library of of routines and functions with which to develop applications. There are two basic components of the ACIS Solid Modeler: the ACIS Kernel <ref> [183, 184, 185, 178] </ref> and the 3D Toolkit [180, 181, 120, 182, 179]. The Kernel provides the core C++ library and application protocol interface 205 (API) for the modeler.
Reference: [186] <author> P. Spiby. </author> <title> Exchange of product model data part 11: The EXPRESS language. Technical Report ISO TC184/SC4 Document N14, International Organization for Standardization, </title> <year> 1991. </year> <month> April. 284 </month>
Reference-contexts: The organizations involved with PDES comprise many corporate, government, and standards development entities. 1 Description data in STEP is handled by defining an information model in the EXPRESS data modeling language <ref> [166, 186] </ref> for each type of data required. Once an information model is defined, data for representing a specific product can be represented using the STEP rules for mapping EXPRESS to a physical file [8, 7, 199].
Reference: [187] <author> R. Srinivasan, R. C. Liu, and K. S. Fu. </author> <title> Extraction of manufacturing details from geometric models. </title> <journal> Computers & Industrial Engineering, </journal> <volume> 9(2) </volume> <pages> 125-133, </pages> <year> 1985. </year>
Reference-contexts: These limitations and the fact that the method is presented as a formalism without demonstrated computational viability make this approach impractical for classification of complex parts and automated feature recognition. In Srinivasan, Liu and Fu <ref> [187] </ref>, an approach similar to Jakubowski's is investigated. The goals of the work are shape classification for group technology process selection and representation of the volume that must be machined to create the object. Grammars for generating shape families are presented.
Reference: [188] <author> D. Strip and M. Karasick. </author> <title> Solid modeling on a massively parallel processor. </title> <journal> International Journal of Supercomputing Applications, </journal> <volume> 6(2) </volume> <pages> 175-192, </pages> <month> Summer </month> <year> 1992. </year>
Reference-contexts: In the domain of boundary representation modeling, Karinthi et al. [97] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al. [6], these techniques are extended to more general loops of edges. Strip and Karasick <ref> [188] </ref> present techniques for performing solid modeling operations on a massively parallel SIMD (single instruction multiple data) computer. They provide a data structure for representation of solid models and a variety of parallel algorithms for implementing solid modeling operations.
Reference: [189] <author> Bjarne Stroustrup. </author> <booktitle> What is object-oriented programming? IEEE Software, </booktitle> <pages> pages 10-20, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: This feature set is used by the other subsystems for manufacturability analysis and redesign. 204 8.1.1 Software Tools Employed During the implementation of F-Rex and IMACS we employed a number of development tools. The majority of the code is written in the C++ language <ref> [101, 189, 191, 190, 113, 50] </ref> using version 3.0.1 of the AT&T C++ compiler from SUN Microsystems. The current system runs on SPARCStations model IPX, 2, 5, and 10-30 workstations under SUN OS 4.1.3.
Reference: [190] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1991. </year>
Reference-contexts: This feature set is used by the other subsystems for manufacturability analysis and redesign. 204 8.1.1 Software Tools Employed During the implementation of F-Rex and IMACS we employed a number of development tools. The majority of the code is written in the C++ language <ref> [101, 189, 191, 190, 113, 50] </ref> using version 3.0.1 of the AT&T C++ compiler from SUN Microsystems. The current system runs on SPARCStations model IPX, 2, 5, and 10-30 workstations under SUN OS 4.1.3.
Reference: [191] <author> Bjarne Stroustrup. </author> <title> A history of C++: </title> <type> 1979-1991. Technical report, </type> <institution> AT& T Bell Laboratories, </institution> <year> 1991. </year>
Reference-contexts: This feature set is used by the other subsystems for manufacturability analysis and redesign. 204 8.1.1 Software Tools Employed During the implementation of F-Rex and IMACS we employed a number of development tools. The majority of the code is written in the C++ language <ref> [101, 189, 191, 190, 113, 50] </ref> using version 3.0.1 of the AT&T C++ compiler from SUN Microsystems. The current system runs on SPARCStations model IPX, 2, 5, and 10-30 workstations under SUN OS 4.1.3.
Reference: [192] <author> Malgorzata Sturgill, Elaine Cohen, and Richard F. Riesenfeld. </author> <title> Feature-based 3-d sketching for early stage design. </title> <editor> In A. A. Busnaina, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 545-552, </pages> <address> New York, NY 10017, September 17-20, Boston, MA 1995. </address> <publisher> ASME. </publisher>
Reference-contexts: One of the most successful efforts at unifying geometric representation, visualization, and manufacturing has been the ff 1 Project at the University of Utah <ref> [44, 192] </ref>. In ff 1 ("alpha one"), geometry is represented and visualized using NURBS. Mechanical designs can be created in ff 1 using a library of machining features|features that correspond directly to operations available in the ff 1 manufacturing cell.
Reference: [193] <author> LeRoy E. Taylor. </author> <title> Meta-Physical Product Modelling. </title> <type> PhD thesis, </type> <institution> Arizona State University, </institution> <year> 1993. </year>
Reference-contexts: El Maraghy et al. [51] proposed and implemented a design tool employing functional features. Functional features were also a key part of the work of Schulte et al. [168]. Henderson and Taylor <ref> [78, 79, 193] </ref> developed a system for conceptual modeling in an effort to represent features, functionality, dimensions, and tolerances within a solid modeling system. 2.2.2 Manufacturing Features The feature concept had its beginning with the process planning of machined parts [122].
Reference: [194] <author> Teledyne Firth Sterling, </author> <title> One Teledyne Place, </title> <address> La Vergne, TN 37086, </address> <year> 1991. </year> <note> MP-92, Catalog #224, Rev. 11/91. </note>
Reference-contexts: While the parameters presented below are by no means exhaustive, they can be use to eliminate what are, with high probability, unrealistic feature instances. The values are based on a survey of common cutting tools as listed in cutting tool catalogs <ref> [48, 99, 164, 165, 194] </ref>. * For drilling features there are three parameters we consider: Flute length: Flute length refers to the length of the cutting surface of the tool. For the drilling tool in Figure 7.1 the flute length is l 4 . <p> H 3 is defined by the plane passing through point (p + v (128 + 32)) 2 The smallest radius tool assembly available from a survey of a variety of catalogs <ref> [48, 99, 164, 165, 194] </ref>. This value represents an approximate lower bound on the size of the tool assembly needed to hold a tool of a given radius.
Reference: [195] <author> William P. Thurston. </author> <title> Conway's tiling groups. </title> <journal> American Mathematematics Monthly, </journal> <pages> pages 757-773, </pages> <month> October </month> <year> 1990. </year> <month> 285 </month>
Reference-contexts: This means that a discrete version of the geometric problem must be devel 168 oped in which solid models and feature instances are parameterized from a countable set. With respect to (2) and (3), the feature recognition problem bears some resemblance to the problem of tiling the plane <ref> [100, 195, 14, 150] </ref>. Tiling describes the problem of asking, given templates for 2D tiles, whether the plane (or some subset of it) can be covered with instances of tiles.
Reference: [196] <author> Sanjeev N. Trika and Rangasami L. Kashyap. </author> <title> Geometric reasoning for extraction of manufacturing features in iso-oriented polyhedrons. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 16(11) </volume> <pages> 1087-1100, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: In a recent follow-up effort to the work of Marefat, Trika et al. <ref> [196] </ref> extend and improve some of Marefat's original results and address completeness over a domain of iso-oriented polyhedral parts. The most comprehensive approach to date for recognizing machining features and handling their interactions has been the OOFF system (Object-Oriented Feature Finder) of Vandenbrande and Requicha [200, 202, 201, 203].
Reference: [197] <author> Amjad Umar. </author> <title> Distributed Computing: A Practical Synthesis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ 07632, </address> <year> 1993. </year>
Reference-contexts: In addition, they present performance comparisons with serial implementations. 9.2 Distributed Algorithms for Feature Recog nition Existing work on feature recognition has dealt with exclusively serial computer architectures. In the distributed computing paradigm, collections of autonomous computational resources are interconnected on a network, as illustrated in Figure 9.1 <ref> [197] </ref>. While these resources do not share main memory, they may share access to common devices such as peripherals, file systems, output devices, etc.
Reference: [198] <author> F. J. A. M. van Houten. </author> <title> PART: A Computer Aided Process Planning System. </title> <type> PhD thesis, </type> <institution> University of Twente, </institution> <year> 1991. </year>
Reference-contexts: Recent work has applied Object-Oriented Design (OOD) methodologies to CAD tools to incorporate feature classes, customization, and recognition in a unified system [110]. In such systems, users can define classes of features relevant for individual applications. Another approach to customization is feature languages <ref> [41, 198] </ref>. <p> The basic idea is to have the computer aid the human process planner (for example) in choosing the features. Once a suitable set of features has been selected by the user, the process planning tool can generate operation sequences. This approach is adopted by Van Houten in the ICEM-PART <ref> [198, 29] </ref> process planning system. PART supports more than 30 feature types, each classified as face sets or face patterns. PART first makes an attempt to automatically identify features in the CAD model using a graph-based method. <p> More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach.
Reference: [199] <author> J. Van Maanen. </author> <title> Product data representation and exchange part 21: Clear text encoding of the exchange structure. Technical Report ISO TC184/SC4 Document N78, International Organization for Standardization, </title> <year> 1991. </year> <month> March. </month>
Reference-contexts: Once an information model is defined, data for representing a specific product can be represented using the STEP rules for mapping EXPRESS to a physical file <ref> [8, 7, 199] </ref>. The EXPRESS model defines the data entities that describe the class of objects in the domain. Defining Features in STEP. A means for describing generic classes of features for the purposes of data exchange has been evolving within the standardization community.
Reference: [200] <author> J. H. Vandenbrande and A. A. G. Requicha. </author> <title> Spatial reasoning for the automatic recognition of machinable features in solid models. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 15(12) </volume> <pages> 1269-1285, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Precision: those representing tolerances, datums, and surface finishes. 4. Form: those for geometric entities, primitives, and boolean operations on primitives. 5. Manufacturing: those embodying domain specific-information about man ufacturing processes, process capabilities, and tooling requirements. A number of attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Although there are differences among these approaches, many of them share important similarities. For example, a machining feature usually corresponds to the volume of material that can be removed by a machining operation. <p> In another industrial effort, Allied-Signal, as part of Brooks et al.'s [20] XCUT project, presented a classification of machining features for process planning. The two most mathematically comprehensive approaches for defining machining features are those of Chang [24] and Vandenbrande and Requicha <ref> [200] </ref>. Chang's feature definitions are based on the shape of the cutting tool and the cutting trajectory. Vandenbrande and Requicha [200] adopt a similar method and classify tool-swept volumes as different types of volumetric machining features. 2.2.2.2 Other Types Of Features Although much of the research work on features has dealt <p> The two most mathematically comprehensive approaches for defining machining features are those of Chang [24] and Vandenbrande and Requicha <ref> [200] </ref>. Chang's feature definitions are based on the shape of the cutting tool and the cutting trajectory. Vandenbrande and Requicha [200] adopt a similar method and classify tool-swept volumes as different types of volumetric machining features. 2.2.2.2 Other Types Of Features Although much of the research work on features has dealt with machining, other recent work has employed features for inspection planning [119], part coding [109], and other manufacturing processes, such <p> The most comprehensive approach to date for recognizing machining features and handling their interactions has been the OOFF system (Object-Oriented Feature Finder) of Vandenbrande and Requicha <ref> [200, 202, 201, 203] </ref>. Vanden-brande's thesis [201] advocates a sophisticated approach to feature recognition involving a variety of artificial intelligence and computational geometry techniques. <p> Hence, it is often unclear what specific classes of parts and feature interactions can be handled by various existing approaches. The ability to handle interacting features has become an informal benchmark for feature recognition systems and has been the focus of numerous research efforts, among them <ref> [41, 58, 91, 117, 200] </ref>. What has emerged are several distinct types of feature interaction problems. One type is interaction during feature recognition, where an instance of one feature removes information require for the recognition of another. A second type 75 of feature interaction is dependent on the manufacturing process. <p> Figure 1.3 (b) shows one feature instance that should be found to perform effective planning; however, it is unclear how to generate this volume from the information in the part. It has proven difficult to categorize and control which interactions are handled <ref> [200] </ref> and how; most current approaches rely on simple case-by-case or implementation-specific heuristics. A simpler and more general approach is needed. Finding alternative feature interpretations. For machined parts, quite often a part has more than one valid interpretation. <p> generating all alternative feature interpretations composed of the primitive cells, it does so at a large combinatorial cost. * Waco and Kim [204] have extended convex decomposition techniques to produce alternative decompositions of the removal volume through aggre gating and growing form feature primitives. * Vandenbrande and Requicha's OOFF System <ref> [200] </ref> produces alternative features in certain cases|however, there is no specific definition for this class of alternatives. <p> The work of Marefat and Kashyap [117] presented an early trace-based technique where information from the solid model is used to generate hypotheses about the existence of features. These hypotheses are tested to see if they give rise to valid feature instances. Vandenbrande and Requicha <ref> [200] </ref> were the first to formalize trace-based (or hint-based) techniques for constructing features from information in a solid model. In the work of Vandenbrande, the traces are used to fill "feature frames" in a frame-based reasoning system. <p> Some of the approaches that have incorporated complexity measures [39, 55] are often representationally limited, covering a restricted domain of parts (e.g., polyhedra) and/or feature types (e.g., not manufacturing process features). For those approaches which employ expert systems and knowledge-based reasoning <ref> [41, 91, 117, 200] </ref>, the inherent exponential nature of automated reasoning algorithms might impede their ability to scale to more complex problems. Further complicating matters is the fact that some approaches to feature recognition perform process planning "on the fly" as features are recognized. <p> A trace t M for a feature type M represents: 122 * the information contributed to the part by an instance of a feature of type M (similar to the notion of feature presence <ref> [200] </ref>). * sufficient information to calculate the parameters of one or more equivalent feature instances of type M that are also capable of creating the trace. <p> As noted in Section 2.4, trace-based techniques have been addressed previously by a number of researchers <ref> [117, 200, 73] </ref>. <p> Further complicating matters is the fact that in many cases the feature recognition problems addressed vary greatly. For example, most approaches for machining feature recognition do not perform an evaluation of feature accessibility for machining, Vandenbrande's <ref> [200] </ref> does and it incurs a cost to do so. Hence, plain timing results represent a weak basis for comparison between feature recognition methodologies. 5.2 Approach The algorithms presented in the previous chapter are defined in terms of calls to a solid modeling system. <p> Therefore, precise measurement of the complexity of these algorithms at the data structure level is not possible. * The consensus is that solid modeling operations account for the vast majority of the computational cost during feature recognition <ref> [200] </ref>. <p> The argument for the completeness of this thesis' approach serves to illustrate the utility of the general concept of completeness as developed in this chapter. 171 6.2.2 Feature Interactions The ability to recognize interacting features has been a stated goal of a number research efforts, among them <ref> [41, 58, 117, 91, 200] </ref>. While it is agreed upon as a problem of critical importance [210], however, the concept of feature interactions lies largely undefined in the general literature. In most cases, the definition for the term is implied, vague, or specific to one particular approach. <p> to implement a prototype of this parallel approach and some experimental results were presented to illustrate the potential payoffs resulting from the use of multi-processor computing techniques. 246 Chapter 10 Application to Other Domains As noted in Chapter 2, several attempts have been made to define and classify manufacturing features <ref> [22, 62, 200, 24] </ref>. Chapter 3 developed definitions for machining features, which in turn were used as the basis for developing the feature recognition algorithms presented in subsequent chapters. <p> Furthered the development of trace-based feature recognition. In the development of my traces and feature construction methods I have advanced the functionality and scope of trace-based recognition systems. In this area I have followed the lead of the research of Vandenbrande <ref> [200] </ref>, in particular focusing on extending some of the traces he outlined to include cases not covered by his original work as well as incorporating traces for new feature types. Presented feature-recognition as an interface to multiple downstream applications.
Reference: [201] <author> Jan H. Vandenbrande. </author> <title> Automatic Recognition of Machinable Features in Solid Models. </title> <type> PhD thesis, </type> <institution> University of Rochester, Rochester, </institution> <address> NY, USA, </address> <year> 1990. </year>
Reference-contexts: The most comprehensive approach to date for recognizing machining features and handling their interactions has been the OOFF system (Object-Oriented Feature Finder) of Vandenbrande and Requicha <ref> [200, 202, 201, 203] </ref>. Vanden-brande's thesis [201] advocates a sophisticated approach to feature recognition involving a variety of artificial intelligence and computational geometry techniques. <p> The most comprehensive approach to date for recognizing machining features and handling their interactions has been the OOFF system (Object-Oriented Feature Finder) of Vandenbrande and Requicha [200, 202, 201, 203]. Vanden-brande's thesis <ref> [201] </ref> advocates a sophisticated approach to feature recognition involving a variety of artificial intelligence and computational geometry techniques. <p> For instance, a cylindrical surface can be a hint for the existence of a hole; a slot hint can be two parallel surfaces as shown 63 of a rectangular slot as described by Vandenbrande <ref> [201] </ref>. in Figure 2.17. If the recognition algorithm finds a cylindrical surface, it may indicate the existence of a hole. The recognizer collects all the hints that exist in the object and categorizes them based on how promising they are.
Reference: [202] <author> Jan H. Vandenbrande and Aristides A. Requicha. </author> <title> Spatial reasoning for automatic recognition of interacting form features. </title> <booktitle> In ASME Computers in Engineering Conference, </booktitle> <month> August </month> <year> 1990. </year> <month> 286 </month>
Reference-contexts: The most comprehensive approach to date for recognizing machining features and handling their interactions has been the OOFF system (Object-Oriented Feature Finder) of Vandenbrande and Requicha <ref> [200, 202, 201, 203] </ref>. Vanden-brande's thesis [201] advocates a sophisticated approach to feature recognition involving a variety of artificial intelligence and computational geometry techniques.
Reference: [203] <author> Jan H. Vandenbrande and Aristides A. Requicha. </author> <title> Geometric computations for the recognition of spatially interacting manufacturing features. </title> <editor> In Jami Shah, Martti Mantyla, and Dana Nau, editors, </editor> <title> Advances in Feature Based Manufacturing. </title> <publisher> Elsevier/North Holland, </publisher> <year> 1994. </year>
Reference-contexts: The most comprehensive approach to date for recognizing machining features and handling their interactions has been the OOFF system (Object-Oriented Feature Finder) of Vandenbrande and Requicha <ref> [200, 202, 201, 203] </ref>. Vanden-brande's thesis [201] advocates a sophisticated approach to feature recognition involving a variety of artificial intelligence and computational geometry techniques.
Reference: [204] <author> Douglas L. Waco and Yong Se Kim. </author> <title> Geometric reasoning for machining features using convex decomposition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 26(6) </volume> <pages> 477-489, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The approach had several problems, including the existence of pathological cases in which the 58 procedure would not converge. The non-convergence of Woo's approach has been solved in recent work by Kim et al. <ref> [102, 103, 204, 136] </ref>, whose system produces a decomposition of the convex hull of a part into general form features. Kim's approach uses convex volume decompositions to produce alternating sums of volumes and techniques for partitioning the solid to avoid non-convergence. <p> Exhaustively, each combination of cells is then matched against user-defined feature templates. While the method is capable of generating all alternative feature interpretations composed of the primitive cells, it does so at a large combinatorial cost. * Waco and Kim <ref> [204] </ref> have extended convex decomposition techniques to produce alternative decompositions of the removal volume through aggre gating and growing form feature primitives. * Vandenbrande and Requicha's OOFF System [200] produces alternative features in certain cases|however, there is no specific definition for this class of alternatives.
Reference: [205] <author> Scott Wallace. </author> <title> Accelerating engineering design. </title> <journal> Byte, </journal> <month> July </month> <year> 1994. </year>
Reference-contexts: The new world of highly Inter-networked collaborative engineering overflows with information|information of which until very recently human beings had been the sole custodians. This is changing as low-cost computational power and increasingly sophisticated software technologies are enabling development of intelligent systems for design and manufacturing <ref> [23, 205] </ref>. 1 Computers are essential tools for modern engineers, enhancing human abilities to bring better and more cost-effective products to market quickly and efficiently. Automation of design and manufacturing activities poses many difficult computational problems. As manufacturing activities are computerized, more fundamental computational issues emerge.
Reference: [206] <author> H. P. Wang and J. K. Li. </author> <title> Computer Aided Process Planning. </title> <publisher> Elsevier Science Publishers, </publisher> <year> 1991. </year>
Reference-contexts: More recently Ames [10] describes a large-scale effort employing expert systems. 2.3.2 Process Planning Automated process planning is one of the key elements required to seamlessly integrate CAD and manufacturing [9]. Numerous efforts have been made to automate process planning for machined components <ref> [35, 9, 20, 24, 130, 69, 206, 198] </ref>. Over the course of this research, two dominant approaches to computer-aided process planning (CAPP) have emerged: the variant approach and the generative approach. <p> Although significant progress has been made in CAPP, there does not yet exist a completely automated planning system capable of handling moderately complex real-world parts. For more information on CAPP and a literature survey on plan generation, readers are referred to <ref> [9, 24, 206, 25] </ref>. 2.3.3 Manufacturability Evaluation Manufacturability evaluation and analysis involves the identification and diagnosis of manufacturing problems during the design phase.
Reference: [207] <author> Kevin Weiler. </author> <title> Edge-based data structures for solid modeling in curved-surface environments. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5(1) </volume> <pages> 21-40, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: One of the most popular of these b-rep structures is the winged-edge representation [81] and its variations. For more information on boundary representation data structures, interested readers are referred to <ref> [81, 116, 207, 209] </ref>. Manifold and non-manifold solids. Operation on these data structures can give rise to many different configurations of solids. Intuitively, a manifold solid is one whose boundary can be uniformly unfolded onto a 2-dimensional plane. The manifold condition excludes, for example, solids whose bounding surfaces are self-intersecting. <p> Existing work contains empirical and some theoretical analysis of the time and space costs for various data structures for representing solids. Woo [209] analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler <ref> [207] </ref> presents data structures for curved surfaces and their time and storage complexities. Ala [4, 5] builds on this work and introduces variations on the boundary representation data structure with advantages for certain applications. <p> In the scope of this thesis, n is roughly equivalent to the size of the data structure representing the delta volume. In general for edge-based boundary representation data structures <ref> [207, 209] </ref>, n will be n = O (jEj) where 157 E is the set of edges of the solid.
Reference: [208] <author> Tony C. Woo. </author> <title> Feature extraction by volume decomposition. </title> <booktitle> In Conference on CAD/CAM Technology in Mechanical Engineering, </booktitle> <pages> pages 76-94, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: Feature interactions are not addressed and the scope of the work is limited to injection molding. 2.2.4.3 Volume Decomposition Geometric algorithms for finding convex hulls have been employed to decompose polyhedral parts and identify form features. In an early effort along these lines, Woo <ref> [208] </ref> proposed a method for finding general depression and protrusion features on a part by decomposing the convex hull of the solid model. The approach had several problems, including the existence of pathological cases in which the 58 procedure would not converge.
Reference: [209] <author> Tony C. Woo. </author> <title> A combinatorial analysis of boundary data structure schemata. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 19-27, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: One of the most popular of these b-rep structures is the winged-edge representation [81] and its variations. For more information on boundary representation data structures, interested readers are referred to <ref> [81, 116, 207, 209] </ref>. Manifold and non-manifold solids. Operation on these data structures can give rise to many different configurations of solids. Intuitively, a manifold solid is one whose boundary can be uniformly unfolded onto a 2-dimensional plane. The manifold condition excludes, for example, solids whose bounding surfaces are self-intersecting. <p> Even when confined to boundary representation solid modeling, algorithms and data structures vary greatly among different systems. Existing work contains empirical and some theoretical analysis of the time and space costs for various data structures for representing solids. Woo <ref> [209] </ref> analyzes several types of boundary representation data structures and compares their time costs for a set of primitive operations and space requirements. Weiler [207] presents data structures for curved surfaces and their time and storage complexities. <p> In the scope of this thesis, n is roughly equivalent to the size of the data structure representing the delta volume. In general for edge-based boundary representation data structures <ref> [207, 209] </ref>, n will be n = O (jEj) where 157 E is the set of edges of the solid.
Reference: [210] <author> J. R. Woodwark. </author> <title> Some speculations on feature recognition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 20(4) </volume> <pages> 189-196, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: While it is agreed upon as a problem of critical importance <ref> [210] </ref>, however, the concept of feature interactions lies largely undefined in the general literature. In most cases, the definition for the term is implied, vague, or specific to one particular approach. Feature interactions pose a major challenge to the development of robust and reliable feature recognition systems.
Reference: [211] <author> J. R. Woodwark, </author> <title> editor. Geometric Reasoning. </title> <publisher> Clarendon Press, Oxford, </publisher> <address> UK, </address> <year> 1989. </year>
Reference-contexts: For more in-depth coverage of the of the field of solid modeling, interested readers are referred to the texts by Hoffmann [81], Mantyla [116], Morten-son [128], Faux and Pratt [54] and Woodwark <ref> [211, 18] </ref>; as well as the proceedings from the recent conferences on solid modeling and applications [153, 154, 155]. For an overview of the architecture of solid modeling systems, readers are referred to [124].
References-found: 211

