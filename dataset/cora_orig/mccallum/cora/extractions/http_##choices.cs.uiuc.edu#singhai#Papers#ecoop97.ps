URL: http://choices.cs.uiuc.edu/singhai/Papers/ecoop97.ps
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Title: Reflective ORBs: Supporting Robust, Time-critical Distribution  
Author: Ashish Singhai, Aamod Sane, and Roy Campbell 
Web: http://choices.cs.uiuc.edu  
Address: 1304 W. Springfield Ave., Urbana IL 61801 USA  
Affiliation: University of Illinois, Department of Computer Science  
Note: Appears in ECOOP'97 Workshop Proceedings  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Ozalp Babaoglu, Keith Marzullo, and Fred B. Schneider. </author> <title> A formalization of priority inversion. </title> <booktitle> Real-Time Systems, </booktitle> <pages> pages 285-303, </pages> <year> 1993. </year>
Reference-contexts: Timing: For all methods, we must know the estimates for the worst case execution time, memory requirements and I/O bandwidth requirements. For all method calls, clients must indicate start and end deadlines. Priority: The ORB must support prioritized use of resources. In particular, blocking and synchronization must preserve priorities <ref> [1] </ref>. These requirements mean changes to service registration, access to object refer ences and method execution. Service Registration: Services must express estimated resource requirements (memory, threads, I/O bandwidth) to the ORB. <p> To facilitate controlling resource utilization, the operating system should support page locking, thread and process priority control, real-time timers [3]. Operating system supported synchronization constructs within the server-side ORB require new queuing disciplines that prevent priority inversion <ref> [1] </ref>. Server scheduling policies such as rate monotonic scheduling [7] require op erating system support for fixed priorities and preemption. Our ORB accesses operating system services provided by the ACE [11] library.
Reference: 2. <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> A task scheduling problem. In Introduction to Algorithms, chapter 17.5. </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: In each phase, we have 10 clients, 5 of them requiring 3 seconds of processing time every t seconds, and the other 5 requiring 7 seconds of processing time every t seconds. We adjust t to change the targeted CPU utilization. EDF scheduling <ref> [2] </ref> performs the best. FIFO and NONE exhibit similar behavior at lower CPU utilizations since enough capacity is available. But with increasing contention, performance of the NONE scheme deteriorates. Fig. 4. Performance of various scheduling policies in our RT-ORB.
Reference: 3. <author> Bill O. Gallmeister. </author> <title> POSIX.4: Programming for the Real World. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1995. </year>
Reference-contexts: Server-side ORB architecture for our RT-ORB Operating System Interface Besides the changes in the external ORB interface, a real-time ORB also requires a different interface from the operating system. To facilitate controlling resource utilization, the operating system should support page locking, thread and process priority control, real-time timers <ref> [3] </ref>. Operating system supported synchronization constructs within the server-side ORB require new queuing disciplines that prevent priority inversion [1]. Server scheduling policies such as rate monotonic scheduling [7] require op erating system support for fixed priorities and preemption. Our ORB accesses operating system services provided by the ACE [11] library.
Reference: 4. <author> Y. Honda and M. Tokoro. </author> <title> Time-dependent programming and reflection: Experiences on R2. </title> <type> Technical Report SCSL-TR-93-017, Sony CSL, </type> <year> 1993. </year>
Reference-contexts: Takashio, et. al. [13], have mentioned Time Polymorphic Invocations (TPI) using their Distributed Real-Time Object (DRO) model. They assume existence of multiple implementations of the same method with different resource requirements and at run-time execute the one that is feasible according to the timing constraints. Honda and Tokoro <ref> [4] </ref> develop a language with timing specifications and schedulers at the meta level. This is similar to the way we reify marshaling, unmarshaling and scheduling using Invoker, Marshaler, and Dispatcher . Schmidt, et. al. [10], develop an architecture for real-time additions to CORBA.
Reference: 5. <author> Gregor Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proc. IMSA'92 Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year>
Reference-contexts: In this paper, we show how reflection enables the construction of a composable ORB that can be customized to support new features. After reviewing Common Request Broker Architecture (CORBA [9]), we discuss reflection <ref> [5] </ref> and its application to ORBs. Then we consider the requirements for a real-time ORB and show how we use reflection to build real-time support in our ORB. Later we address other services like fault-tolerance and show that systematic application of reflection can result in a plug and play system. <p> For instance, we must expose the synchronization structure of the ORB and allow users to change the queue disciplines. Fault-tolerance and load balancing required relatively benign changes. This mild form of reflection has been practised in many domains with considerable success <ref> [5] </ref>. It is interesting to speculate about language support for such limited reflection. A language with explicit support for frameworks might allow programmers to specify the parts of the framework structure and processing that would be reified. Support for Aspects [6] would achieve the same effect.
Reference: 6. <author> Gregor Kiczales, John Lamping, Anurag Mendhekar, Chris Maeda, Cristina Lopes, Jean-Marc Loingtier, and John Irwin. </author> <note> Aspect-oriented programming. Technical Report SPL97-008 P9710042, XEROX PARC, 1997. http://www.parc.xerox.com. </note>
Reference-contexts: It is interesting to speculate about language support for such limited reflection. A language with explicit support for frameworks might allow programmers to specify the parts of the framework structure and processing that would be reified. Support for Aspects <ref> [6] </ref> would achieve the same effect. Appears in ECOOP'97 Workshop Proceedings Acknowledgements We gratefully acknowledge the help provided by Mallikarjun Shankar, Amitabh Dave and Zhigang Chen.
Reference: 7. <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20 </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: To facilitate controlling resource utilization, the operating system should support page locking, thread and process priority control, real-time timers [3]. Operating system supported synchronization constructs within the server-side ORB require new queuing disciplines that prevent priority inversion [1]. Server scheduling policies such as rate monotonic scheduling <ref> [7] </ref> require op erating system support for fixed priorities and preemption. Our ORB accesses operating system services provided by the ACE [11] library.
Reference: 8. <author> Silvano Maffeis and Douglas C. Schmidt. </author> <title> Constructing reliable distributed communication systems with CORBA. </title> <journal> IEEE Communications Magazine, </journal> <volume> 14(2), </volume> <year> 1997. </year>
Reference-contexts: Appears in ECOOP'97 Workshop Proceedings 7 Related Work The OMG special interest group on Real-Time CORBA is studying the issues involved with real-time processing in CORBA; but there is no concrete specification from OMG yet. The Electra <ref> [8] </ref> ORB supports fault-tolerance using reliable multicast.
Reference: 9. <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, 1996. Document PTC/96-08-04, Revision 2.0. </title>
Reference-contexts: 1 Introduction Modern applications of computers such as video-on-demand require real-time response and need distributed implementations. Object Request Brokers (ORBs) <ref> [9] </ref> provide a solution to the distribution problem by allowing method invocation on remote objects. However, mere remote method invocation is not enough in a distributed setting: application programs also require features like fault-tolerance and load-balancing. <p> In this paper, we show how reflection enables the construction of a composable ORB that can be customized to support new features. After reviewing Common Request Broker Architecture (CORBA <ref> [9] </ref>), we discuss reflection [5] and its application to ORBs. Then we consider the requirements for a real-time ORB and show how we use reflection to build real-time support in our ORB.
Reference: 10. <author> Douglas C. Schmidt, Aniruddha Gokhale, Timothy H. Harrison, David Levine, and Chris Cleeland. TAO: </author> <title> a high-performance endsystem architecture for real-time CORBA. (RFI response to OMG-SIG Real-Time CORBA), </title> <year> 1997. </year>
Reference-contexts: Honda and Tokoro [4] develop a language with timing specifications and schedulers at the meta level. This is similar to the way we reify marshaling, unmarshaling and scheduling using Invoker, Marshaler, and Dispatcher . Schmidt, et. al. <ref> [10] </ref>, develop an architecture for real-time additions to CORBA. They discuss optimizations for high performance, the development of a real-time inter-orb protocol and real-time scheduling.
Reference: 11. <author> Douglas C. Schmidt and Tatsuya Suda. </author> <title> An Object-Oriented Framework for Dynamically Configuring Extensible Distributed Communication Systems. </title> <journal> IEE/BCS Distributed Systems Engineering Journal, </journal> <volume> 2 </volume> <pages> 280-293, </pages> <year> 1994. </year>
Reference-contexts: Operating system supported synchronization constructs within the server-side ORB require new queuing disciplines that prevent priority inversion [1]. Server scheduling policies such as rate monotonic scheduling [7] require op erating system support for fixed priorities and preemption. Our ORB accesses operating system services provided by the ACE <ref> [11] </ref> library. While our ORB is predictable in its memory and CPU usage, it can support real-time applications only if the operating system provides required facilities. 5 Supporting Fault-Tolerance and Load Balancing We implement fault-tolerance and load balancing using the same reflective interface developed for real-time support.
Reference: 12. <author> Ashish Singhai, Swee Lim, and Sanjay R. Radia. </author> <title> The SCALR framework for internet services. </title> <note> submitted for publication, </note> <year> 1997. </year>
Reference-contexts: Load Balancing Load balancing is implemented by distributing client requests among several servers <ref> [12, 14] </ref>. Recall that we changed the client-side ORB method dispatch to add deadlines (by changing the Invoker object, Sec. 4.) In the present case, we change the method dispatch to send the client requests to one among a group of compatible servers.
Reference: 13. <author> Kazunori Takashio and Mario Tokoro. </author> <title> Time polymorphic invocation: A real-time communication model for distributed systems. </title> <booktitle> In Proc. 1 st IEEE Workshop on Parallel and Distr. Real-Time Systems, </booktitle> <year> 1993. </year>
Reference-contexts: Real-time method invocations in CORBA has been considered by Wolfe, et. al. [15]. Their approach involves transmitting the timing information using the context field from the CORBA specification. Takashio, et. al. <ref> [13] </ref>, have mentioned Time Polymorphic Invocations (TPI) using their Distributed Real-Time Object (DRO) model. They assume existence of multiple implementations of the same method with different resource requirements and at run-time execute the one that is feasible according to the timing constraints.
Reference: 14. <author> Y. T. Wang and R. J. T. Morris. </author> <title> Load sharing in distributed systems. </title> <journal> IEEE Transaction on Comptuers, </journal> <volume> C-34(3):204-217, </volume> <year> 1985. </year>
Reference-contexts: Load Balancing Load balancing is implemented by distributing client requests among several servers <ref> [12, 14] </ref>. Recall that we changed the client-side ORB method dispatch to add deadlines (by changing the Invoker object, Sec. 4.) In the present case, we change the method dispatch to send the client requests to one among a group of compatible servers.
Reference: 15. <author> Victor Fay Wolfe, John K. Black, Bavani Thuraisingham, and Peter Krupp. </author> <title> Real-time method invocations in distributed environments. </title> <booktitle> In Proc. HiPC'95 Intl. Conf. on High-Performance Computing. IEEE, </booktitle> <year> 1995. </year>
Reference-contexts: Real-time method invocations in CORBA has been considered by Wolfe, et. al. <ref> [15] </ref>. Their approach involves transmitting the timing information using the context field from the CORBA specification. Takashio, et. al. [13], have mentioned Time Polymorphic Invocations (TPI) using their Distributed Real-Time Object (DRO) model.
References-found: 15

