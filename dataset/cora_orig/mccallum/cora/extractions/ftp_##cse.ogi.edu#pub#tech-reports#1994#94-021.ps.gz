URL: ftp://cse.ogi.edu/pub/tech-reports/1994/94-021.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Title: AutoCRAT: An Automated Tool to Support Conict Detection in a Concurrent Engineering Environment  
Author: Donald R. Schwartz Lois M. L. Delcambre 
Date: May 1994  
Pubnum: Technical Report No. CS/E 94-021  
Abstract-found: 0
Intro-found: 1
Reference: [AD87] <author> U. Aguero and S. Dasgupta. </author> <title> A Plausibility-Driven Approach to Computer Architecture Design. </title> <journal> Communications of the ACM, </journal> <volume> 30(11) </volume> <pages> 922-932, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: The question is: what is an appropriate generic framework for such a design environment? This research adopts the Theory of Plausible Design (TPD) <ref> [AD87] </ref> as the generic framework for a design environment. TPD represents the design, at any stage of the life cycle, as a set of constraints, and supports a design process of top-down refinement of those constraints.
Reference: [BdC85] <author> Alejandro P. Buchmann and Concepcion Perez de Celis. </author> <title> An Architecture and Data Model for CAD Databases. </title> <booktitle> In Proceedings of the Eleventh International Conference on Very Large Databases, </booktitle> <pages> pages 105-114, </pages> <year> 1985. </year>
Reference: [BG90] <author> K. L. Bellman and A. Gillam. </author> <title> Achieving Openness and Flexibility in VEHICLES. </title> <booktitle> Proceedings of the SCS Eastern Multiconference, Simulation Series, </booktitle> <volume> 21 Volume 22, Number 3, </volume> <booktitle> The Society for Computer Simulation, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: The key to successful concurrent engineering is in the seamless integration of design tools with the generic constraint statement, validation, and conict detection capabilities of AutoCRAT. As part of the pilot implementation, AutoCRAT was successfully integrated with VEHICLES, a knowledge-based system for spacecraft design <ref> [BG90] </ref>. The interface between the two 20 systems focused on the introduction of several additional predicates (in the VEHICLES Prolog program) that were asserted whenever a certain aspect of the design succeeded. In essence, VEHICLES was posting evidence to AutoCRAT automatically.
Reference: [BK85] <author> D. S. Batory and Won Kim. </author> <title> Modeling Concepts for VLSI CAD Objects. </title> <journal> ACM Tr ansactions on Database Systems, </journal> <volume> 10(3) </volume> <pages> 322-346, </pages> <month> Sept. </month> <year> 1985. </year>
Reference: [Das89] <author> Subrata Dasgupta. </author> <title> The Structure of Design Processes. </title> <booktitle> Advances in Computers, </booktitle> <volume> 28, </volume> <year> 1989. </year>
Reference-contexts: Refuted: If evidence against C's plausibility has been documented. The state of each leaf-level constraint is then systematically propagated upwards based on the and/or connections in the graph according to the laws of plausibility <ref> [Das89] </ref>. The plausibility state of a constraint is thus a function of the available evidence. TPD provides for the documentation of evidence, which can be of any type.
Reference: [DS92] <author> Lois Delcambre and Donald Schwartz. AutoCRAT: </author> <title> Automated Support for Design in a Concurrent Engineering Environment. </title> <booktitle> In Proceedings of the Euro-pean Joint Conference on Engineering Systems Design and Analysis, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: TPD can easily represent "The car must be cute and sporty" as well as "The car must deliver 140 hp." This paper focuses on AutoCRAT <ref> [DS92] </ref>, an automated tool that implements TPD.
Reference: [DSG92] <author> Lois Delcambre, Donald Schwartz, and April Gillam. </author> <title> AutoCRAT Templates for Design Knowledge Capture. </title> <booktitle> In Proceedings of the International Space Year Conference on Earth and Space Science Information Systems, </booktitle> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: Overview of AutoCRAT TPD was adopted as the formal framework for a design tool called AutoCRAT: the Automated Constraint Refinement and Assessment Tool. AutoCRAT has been implemented with inspiration provided by the early design stages for satellite and space systems. <ref> [DSG92] </ref> Space systems tend to be one-of-a-kind or at least few-of-a-kind, yet they require sophisticated functionality under the pressure of limited budgets and precise schedules.
Reference: [Kat90] <author> Randy Katz. </author> <title> Tow ard a Unified Framework for Version Modeling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: This integration provides the basis for a design environment which supports the top-down refinement of design constraints and the bottom-up configuration of the physical objects being designed <ref> [Kat90] </ref>. The integration of the generic CAD database with the power of AutoCRAT provides an environment that spans the design life-cycle from high-level, abstract requirements to actual, implemented design object.
Reference: [RWC91] <author> Ramana Reddy, Ralph Wood, and K. Cleetus. </author> <title> The Darpa Initiative: Encouraging New Industrial Practices. </title> <journal> IEEE Spectrum, </journal> <volume> Vol. 28, No. 7, </volume> <pages> pages 26-29, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: There are several challenges that must be addressed to support concurrent engineering. (1) The design environment must be able to simultaneously address all of the diverse aspects considered for concurrent engineering <ref> [RWC91] </ref>.
Reference: [Sch93] <author> Donald Schwartz. </author> <title> A Computer-Aided Design Database Integrated with a Generic, Formal Design Paradigm. </title> <type> Ph.D. Dissertation, </type> <institution> University of Southwestern Louisiana, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The AutoCRAT Structuring Facility In addition to the definition and maintenance of constraints within the constraint dependency graph, a structural facility has been provided in AutoCRAT that allows the designer to organize, retrieve, and further describe constraints that appear in the constraint dependency graph <ref> [Sch93] </ref>. The structuring facility provides a way to organize and annotate constraints. The query facility uses this structure as a basis for browsing and highlighting constraints. 3.1.
Reference: [SD93] <author> Donald Schwartz and Lois Delcambre. </author> <title> Credibility Assessment Using AutoCRAT. </title> <booktitle> In Proceedings of the 1993 Simulation MultiConference: Simulation in Military and Government, </booktitle> <pages> pages 67-72, </pages> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Thus, it is up to the user to enter the constraint-specific annotation whenever desirable. 3.2. The AutoCRAT Querying Facility The agging facility provides the framework for querying the design. The AutoCRAT querying facility allows the designer to browse and query against the constraint dependency graph, including the annotations <ref> [SD93] </ref>. AutoCRAT provides pre-defined queries for several commonly-used queries and a general query facility based on ags. The AutoCRAT predefined queries include such queries as "List all constraints and their states" and "List all ags associated with a particular constraint". <p> AutoCRAT has been implemented and initially tested in the satellite design arena <ref> [SD93] </ref>. The long-term research plan for AutoCRAT envisions an architecture where AutoCRAT provides the unified representation of design as a middle layer with various knowledge-based and other tools for automatic design layered on top of AutoCRAT.
Reference: [Shi91] <author> Sammy G. Shina. </author> <title> New Rules for Design. </title> <journal> IEEE Spectrum, </journal> <volume> Vol. 28, No. 7, </volume> <pages> pages 23-25, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: 1. Introduction Concurrent engineering refers to the collaborative effort of teams of specialists who each focus on a distinct aspect of the object (or system or product) under design <ref> [Shi91] </ref>. There are several challenges that must be addressed to support concurrent engineering. (1) The design environment must be able to simultaneously address all of the diverse aspects considered for concurrent engineering [RWC91].
Reference: [Tur91] <author> Jon Turino. </author> <title> Concurrent Engineering: Making It Work. </title> <journal> IEEE Spectrum, </journal> <volume> Vol. 28, No. 7, </volume> <pages> pages 30-31, </pages> <month> July </month> <year> 1991. </year> <month> 22 </month>
Reference-contexts: various aspects include: the cost of, the ability to manufacture, and the ability to repair or maintain the object, in addition to the usual aspects concerning form (e.g., weight, size) and function (e.g., gas mileage, power output). (2) The design environment must support the entire life cycle of the object <ref> [Tur91] </ref>. Each aspect considered during concurrent engineering has, historically, been considered at a particular stage in the life cycle. Aesthetics might be part of the earliest design (e.g., when design sketches are done). Form might be considered fairly early in order to set the physical dimensions of the object.
References-found: 13

