URL: ftp://ftp.cs.york.ac.uk/pub/realtime/papers/adaeurope92_BW.ps.Z
Refering-URL: http://www.csd.uu.se/~bjornfot/r2.html
Root-URL: 
Title: Designing Hard Real-time Systems  
Author: A. Burns and A.J. Wellings 
Address: York, Heslington, York, Y01 5DD, UK  
Affiliation: Real-time and Distributed Systems Research Group, Department of Computer Science University of  
Abstract: This paper presents a systems life cycle and a structured design method which are tailored towards the construction of real-time systems in general, and hard real-time systems in particular. The standard systems life cycle is modified to take into account the expression and satisfaction of nonfunctional requirements. The HOOD design method is extended to support abstractions which explicitly cater for the characteristics and properties of hard real-time systems. The new method is called HRT-HOOD (Hard Real time HOOD).
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> N.C. Audsley, A. Burns, M.F. Richardson and A.J. Wellings, </author> <title> ``Hard Real-Time Scheduling: The Deadline Monotonic Approach'', </title> <booktitle> Proceedings 8th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> Atlanta, GA, USA (15-17 May 1991). </address>
Reference-contexts: A number of formulae are available in the literature. If the system consists of mainly CYCLIC objects and they have period equal to deadline then the rate monotonic theories can be used [7]. A more flexible object structure is supported by deadline monotonic theory <ref> [1] </ref>. In summary, the schedulability analysis will add the following annotation to the terminal objects of the physical architecture: - 5 - g Priority of CYCLIC, SPORADIC threads (for each mode). g Ceiling priority of PROTECTED objects. <p> This priority is defined according to the scheduling theory being used (we are currently using deadline monotonic scheduling theory <ref> [1] </ref> ). g CEILING_PRIORITY Each PROTECTED, CYCLIC or SPORADIC object must have a defined ceiling priority. This priority is no lower than the maximum priority of all the threads that can call the object's constrained operations.
Reference: 2. <author> A. Burns and A. M. Lister, </author> <title> ``A Framework for Building Dependable Systems'', </title> <journal> Computer Journal 34(2), </journal> <pages> pp. </pages> <month> 173-181 </month> <year> (1991). </year> <month> - 9 </month> - 
Reference-contexts: Finally in section 4 we give our conclusions. 2. Overview of the Design Process It is increasingly recognised that the role and importance of nonfunctional requirements in the development of complex critical applications has hitherto been inadequately appreciated <ref> [2] </ref>. Specifically, it has been common practice for system developers, and the methods they use, to concentrate primarily on functionality and to consider nonfunctional requirements comparatively late in the development process. We believe that this approach fails to produce safety critical systems. <p> The Hard Real-time Life Cycle Our approach is to split the architectural design into two phases <ref> [2] </ref>: g logical architecture; g physical architecture. The logical architecture embodies commitments which can be made independently of the constraints imposed by the execution environment, and is primarily aimed at satisfying the functional requirements. The physical architecture takes these and other constraints into account, and embraces the nonfunctional requirements.
Reference: 3. <author> A. Burns and A.J. Wellings, </author> <title> Hard Real-time HOOD: A Design Method for Hard Real-time Ada 9X Systems, Towards Ada 9X, </title> <booktitle> Proceedings of 1991 Ada UK International Conference, </booktitle> <publisher> IOS Press (1992). </publisher>
Reference-contexts: The HRT-HOOD method has been influenced by the tasking model of Ada 9X, and programs designed by the method have a systematic mapping to the language (see Burns and Wellings <ref> [3] </ref> for details of the mapping). Acknowledgement The authors would like to thank Eric Fyfe and Chris Bailey of British Aerospace, Space Systems for their comments on the material presented in this paper.
Reference: 4. <author> A. Burns and A.J. Wellings, ``HRT-HOOD: </author> <title> A Design Method for Hard Real-time Ada'', </title> <booktitle> Real-Time Systems 6(1), </booktitle> <pages> pp. 73-114, </pages> <note> Also appears as YCS 199, </note> <institution> Department of Computer Science, University of York (1994). </institution>
Reference-contexts: Hard Real-time HOOD In this section we present the Hard Real-time HOOD (HRT-HOOD) design method which has been developed to support the ideas introduced above. HRT-HOOD is an extension of HOOD <ref> [4] </ref>, and directly represents the abstractions considered in Section 2. <p> ACTIVE ACTIVE objects which may control when invocations of their operations are executed, and may spontaneously invoke operations in other objects. An ACTIVE object has may have an OBCS and one or more THREADs. The operation available on ACTIVE objects are very similar to those provided by HOOD <ref> [4] </ref>. 3.1.3. PROTECTED PROTECTED objects are used to control access to resources which are used by hard real-time objects.
Reference: 5. <author> Intermetrics, </author> <title> ``Draft Ada 9X Mapping Document, Volume II, Mapping Specification'', Ada 9X Project Report (August 1991). </title>
Reference-contexts: Section 2 of this paper presents the modified systems life cycle, and section 3 then discusses HRT-HOOD which has been designed to support the new life cycle. HRT-HOOD has also been developed to be compatible with the Ada 9X real-time tasking model <ref> [5] </ref>. Finally in section 4 we give our conclusions. 2. Overview of the Design Process It is increasingly recognised that the role and importance of nonfunctional requirements in the development of complex critical applications has hitherto been inadequately appreciated [2]. <p> The intention is that their use should constrain the design so that the runtime blocking for resources can be bounded (for example by using priority inheritance [8], or some other limited blocking protocol such as the immediate priority ceiling inheritance associated with the Ada 9X <ref> [5] </ref> protected records). PROTECTED objects are objects which do not necessarily require independent threads of control. A PROTECTED object does have an OBCS but this is a monitor-like construct: operations are executed under mutually exclusive, and functional activation constraints may be placed on when operations can be invoked.
Reference: 6. <author> H. Kopetz, </author> <title> ``Design Principles for Fault Tolerant Real Time Systems'', </title> <type> MARS Report, </type> <institution> Institut f .. Technische Informatik, </institution> <month> 8/85/2 </month> <year> (1985 </year> ). 
Reference-contexts: During development an early binding of software function to hardware component is required so that the analysis of timing and reliability properties of a still unrefined design can be carried out <ref> [6] </ref>. Most traditional software development methods incorporate a life cycle model in which the - 2 - following phases are recognised: Requirements Definition, Architectural Design, Detailed Design, Coding, and Testing.
Reference: 7. <author> J.P. Lehoczky, L. Sha and V. Ding, </author> <title> ``The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior'', </title> <type> Tech Report, </type> <institution> Department of Statistics, Carnegie-Mellon (1987). </institution>
Reference-contexts: A number of formulae are available in the literature. If the system consists of mainly CYCLIC objects and they have period equal to deadline then the rate monotonic theories can be used <ref> [7] </ref>. A more flexible object structure is supported by deadline monotonic theory [1]. In summary, the schedulability analysis will add the following annotation to the terminal objects of the physical architecture: - 5 - g Priority of CYCLIC, SPORADIC threads (for each mode). g Ceiling priority of PROTECTED objects.
Reference: 8. <author> L. Sha, R. Rajkumar and J. P. Lehoczky, </author> <title> ``Priority Inheritance Protocols: An Approach to Real-Time Synchronisation'', </title> <journal> IEEE Transactions on Computers 39(9), </journal> <pages> pp. </pages> <month> 1175-1185 (September </month> <year> 1990). </year>
Reference-contexts: The intention is that their use should constrain the design so that the runtime blocking for resources can be bounded (for example by using priority inheritance <ref> [8] </ref>, or some other limited blocking protocol such as the immediate priority ceiling inheritance associated with the Ada 9X [5] protected records). PROTECTED objects are objects which do not necessarily require independent threads of control.
References-found: 8

