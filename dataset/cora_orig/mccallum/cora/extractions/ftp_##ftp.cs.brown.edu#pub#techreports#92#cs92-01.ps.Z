URL: ftp://ftp.cs.brown.edu/pub/techreports/92/cs92-01.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-92-01.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [BENT82] <author> Jon Louis Bentley, </author> <title> Writing Efficient Programs, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1982 </year>
Reference-contexts: To avoid such a waste of man-hours, it is essential to allow efficiency considerations to influence the design phase of the project. The usage patterns and scope of the project need therefore to be studied carefully, even before the design begins. Please refer to the book by Bentley <ref> [BENT82] </ref> for much more on efficient programming. 3.3 Portability The philosophy adapted for UGA is to be able to port the system to any architecture without modifying source code at all.
Reference: [DARW90] <author> Ian F. Darwin, </author> <title> Checking C Programs with lint, </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, California, </address> <year> 1990. </year>
Reference-contexts: By maintaining these dependencies, a source file will recompile only if a change affecting it has occurred since the last compilation. * gnumake lint This runs lint <ref> [DARW90] </ref> on all the source files. 4 All source code must pass lint quietly. 5 * gnumake Library This compiles the C files and makes an archived library out of the resulting object files. As with lint, the source code must compile cleanly. <p> Each major function is then implemented by first writing pseudo-code for it. This process will suggest possible subroutines to the programmer. After all the subroutines have been written and the pseudo-code is translated into a compilable form, lint <ref> [DARW90] </ref> should be run on the software. The programmer should compile and attempt to test the software only after it passes lint quietly. <p> instead of list_elem-&gt;next. * Type-conversions, including function parameter conversions, should be made explicit by the cast operator. * All variables should be initialized explicitly. * All constants should be named, i.e., code should not contain magic numbers. 12 General Coding Style A helpful tool to make programs portable is lint <ref> [DARW90] </ref>. A program that does not pass lint quietly, will most likely not be portable across architectures. For this reason, we require that all code passes lint. The lint tool will flag inconsistencies in a program even when those are unavoidable.
Reference: [GNUMAKE] <author> Richard M. Stallman and Roland McGrath, </author> <title> GNU Make, Free Software Foundation, </title> <publisher> Inc., </publisher> <address> Cambridge, MA, </address> <year> 1990 </year>
Reference-contexts: For a complete list of make targets as defined by UGA, see The UGA Programming Environment [STRA91]. UGA uses the gnumake program from the GNU Foundation. This allows the same mechanisms to be used on every architecture the Brown Graphics Group supports. See the gnumake manual <ref> [GNUMAKE] </ref> for information about how gnumake works. Each package's source directory contains a file Makefile.
Reference: [INDHILLS] <author> L. W. Cannon, R. A. Elliott, L. W. Kirchoff, J. H. Miller, J. M. Milner, R. W. Mitze, E. P. Schan, N. O. Whittington, Henry Spencer, David Keppel, and Mark Brader, </author> <title> Recommended C Style and Coding Standards. </title> <institution> Bell Labs and elsewhere. </institution> <note> Also known as the Indian Hills Guide. </note>
Reference: [KERN88] <author> Brian W. Kernighan and Dennis M. Ritchie, </author> <title> The C Programming Language, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <note> Second Edition, </note> <year> 1988. </year>
Reference-contexts: The reader is assumed to be familiar with the programming environment of the Brown Graphics Group [STRA91] and is expected to be able to program in C <ref> [KERN88] </ref>. This document is structured to resemble the software development process. We start by introducing existing software: the file opsys.h and the STD (STanDard) package. The general style of code written within the UGA system is discussed next, before guidelines on naming conventions and commenting style are presented. <p> Doing so should not violate any rules stated in the earlier subsections. 6.2 Indenting Patterns The indenting patterns to be used with common programming constructs are introduced here. In general, the indenting style used in the White Book <ref> [KERN88] </ref> was adopted. 6.2.1 Functions The general indenting pattern for functions is shown in Figure 6.3. The same style was illustrated earlier, refer to Figures 6.1 and 6.2. <p> All other functions have to use the return statement without enclosing parenthesis. 6.2.2 If-Statements An if-statement should be formatted as described in the White Book <ref> [KERN88] </ref>, i.e., if (a &gt; b) - d = a - b; else c = b; - or in the case of else-if statements if (a &lt; 0.0) - else if (a &lt; 1.0) - one_fct (a); else if (a &lt; 2.0) - two_fct (a); else big_fct (a); If-statements that have <p> used for the conditional expression ?:. a = (c == d) ? value1 : value2; a = (c == d) ? value1 : value2; 6.2.6 All Other Statements The indenting patterns for all programming constructs that were not mentioned in this section should be inferred from The C Programming Language <ref> [KERN88] </ref>. However, the use of some of these constructs is not common or desirable, since they are hard to read. In particular, block variables and do-while loops should be avoided. Chapter 7 Documentation Good documentation allows beginners to learn about and use available functionality.
Reference: [LAMP86] <author> Leslie Lamport, </author> <title> L A T E X: A Document Preparation System, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986 </year>
Reference-contexts: Long documents have the form of a report, should be written in English [STRU79], and need to be spell checked (spell (1)). The formatting language of these documents has to be L A T E X <ref> [LAMP86] </ref>. Familiarity with L A T E X is therefore expected, in particular, rules such as using "em instead of "bf or using "verb and "verbatim instead of "tt and "it should be obeyed.
Reference: [PYTH76] <author> Monty Python, </author> <title> Monty Python and the Holy Grail, </title> <address> MGM Studios, </address> <year> 1975. </year>
Reference-contexts: To quote from the movie Monty Python and the Holy Grail <ref> [PYTH76] </ref>: Second Brother: And the Lord spake, saying, `[. . . ] Then, shalt thou count to three, no more, no less. Three shalt be the number thou shalt count, and the number of the counting shalt be three.
Reference: [STRA91] <author> Paul S. Strauss, Michael J. Natkin, and Nate Huang, </author> <title> The Programming Environment for the Brown Computer Graphics Group, </title> <institution> Computer Graphics Group Documentation, Brown University, </institution> <address> Providence, RI 02912, </address> <month> July </month> <year> 1991 </year>
Reference-contexts: In addition, sponsors typically change their architecture over time. Therefore, software produced by the Brown Graphics Group needs to be portable. Currently, the UGA framework consists of more than 100,000 lines of C source code, making it a large software project. Even though safeguards are in place <ref> [STRA91] </ref>, it is clear that the UGA framework depends on the discipline of every single programmer, as every programmer is able to affect the work of everyone else. Frequently, UGA source code is shipped to other institutions. <p> The reader is assumed to be familiar with the programming environment of the Brown Graphics Group <ref> [STRA91] </ref> and is expected to be able to program in C [KERN88]. This document is structured to resemble the software development process. We start by introducing existing software: the file opsys.h and the STD (STanDard) package. <p> This file is automatically included when std.h is included. 2.3 Makefiles This section briefly describes the techniques used to actually compile code and generate man pages. For a complete list of make targets as defined by UGA, see The UGA Programming Environment <ref> [STRA91] </ref>. UGA uses the gnumake program from the GNU Foundation. This allows the same mechanisms to be used on every architecture the Brown Graphics Group supports. See the gnumake manual [GNUMAKE] for information about how gnumake works. Each package's source directory contains a file Makefile.
Reference: [STRU79] <author> William Strunk Jr. and E. B. White, </author> <title> The Elements of Style, </title> <publisher> Macmillan, </publisher> <address> New York, Third Edition 1979. </address>
Reference-contexts: For complicated or large packages, source code comments and man pages might not suffice. In these cases, additional long documents describing the project on a high level need to be provided. Long documents have the form of a report, should be written in English <ref> [STRU79] </ref>, and need to be spell checked (spell (1)). The formatting language of these documents has to be L A T E X [LAMP86].
Reference: [WIRT82] <author> Niklaus Wirth, </author> <title> Programming in MODULA-2, </title> <publisher> Springer Verlag, </publisher> <address> Berlin Heidelberg, </address> <year> 1982 </year>
Reference-contexts: Software standards do not prevent errors; they do, however, make it easier to correct errors. This is particularly true when programming in C, which is considered a low-level language that is far less stringent in all aspects of good programming style than, say, MODULA-2 <ref> [WIRT82] </ref>. 1.2 Software Standards in the UGA Environment In the Brown Graphics Group's programming environment, the above mentioned conditions are met: the group is large (more than 20 programmers), with everyone working within a single framework.
References-found: 10

