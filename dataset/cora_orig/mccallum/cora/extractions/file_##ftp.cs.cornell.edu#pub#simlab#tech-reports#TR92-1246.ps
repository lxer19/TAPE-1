URL: file://ftp.cs.cornell.edu/pub/simlab/tech-reports/TR92-1246.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/SimLab/papers.by.project.html
Root-URL: 
Title: SimLab: Automatically Creating Physical Systems Simulators than programming in a conventional programming language, a SimLab
Author: Richard S. Palmer James F. Cremer 
Note: Rather  
Affiliation: Cornell University  
Abstract: The benefits of the SimLab approach include: 1) reducing the time and effort required to create simulators, 2) providing more understandable and reliable simulators, and 3) support for more sophisticated simulators, e.g., for multiple domain problems, which have proved intractible in the past. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Donald C. Augustin, Mark S. Fineberg, Bruce C. Johnson, Robert N. Linebarger, F. John Sansom, and Jon C. Strauss. </author> <title> The csi continuous system simulation language (cssl). </title> <journal> Simulation, </journal> <volume> 9 </volume> <pages> 281-303, </pages> <year> 1967. </year>
Reference-contexts: This causes a shortage of physical systems simulation and analysis software. In particular, there is a significant time lag between development of hardware technology (such as new parallel architectures) and its use for physical systems simulation and analysis. Existing simulation languages <ref> [13, 1, 15] </ref> are typically a thin veneer over FORTRAN: they are often, in fact, preprocessors for FORTRAN. In addition to providing a high-level/FORTRAN syntax, such systems typically provide subroutines for performing a variety of simulation operations, such as ODE integration.
Reference: [2] <author> Jan F. Broenink. </author> <title> Computer-Aided Physical-Systems Modeling and Simulation: A Bond-Graph Approach. </title> <type> PhD thesis, </type> <institution> University of Twente, Enschede, </institution> <address> The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Section 2 develops a SimLab model of particle dynamics by comparing the SimLab syntax with a typical textbook derivation. Besides the simulation languages described above, the bond graph formalism, developed by Paynter in the late 1950's [14], has engendered a number of simulation systems <ref> [17, 2] </ref>. Bond graphs are essentially a generalization of electrical circuits. Analogs to electrical components, such as inductors, resistors, and capacitors are defined for various physical domains.
Reference: [3] <author> C. K. Brown. PADL-2: </author> <title> a technical summary. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 2(2) </volume> <pages> 69-84, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers <ref> [3, 22, 18] </ref>, ODE integrators [8], linear algebra packages [6], and symbolic algebra systems [20, 11, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [4] <author> Fran~ois E. </author> <title> Cellier. Continuous System Modeling. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference: [5] <author> James F. Cremer and A. James Stewart. </author> <title> The architecture of newton, a general-purpose dynamics simulator. </title> <booktitle> In Proceedings of the 1989 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 1806-1811, </pages> <month> May </month> <year> 1989. </year>
Reference: [6] <author> J. Dongarra, J. R. Bunch, Cleve B. Moler, and G. W. Stewart. </author> <title> LINPACK User's Guide. </title> <publisher> SIAM Publications, </publisher> <address> Philadelphia, PA, </address> <year> 1978. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 18], ODE integrators [8], linear algebra packages <ref> [6] </ref>, and symbolic algebra systems [20, 11, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [7] <institution> Gesellschaft fur Mathematik und Datenverarbeitung mbH (German National Research Center for Computer Science), D-5205 Sankt Augustin 1, Federal Republic of Germany. </institution> <note> CLM | A Language Binding of Common Lisp and OSF/Motif User Guide and Manual, </note> <year> 1991. </year>
Reference-contexts: The prototype implementation of SimLab is written using the Common Lisp Object System (CLOS)[19]: the standard object-oriented version of Common Lisp. SimLab generates simulators in conventional programming languages (currently Common Lisp, C, and FORTRAN). These simulators incorporate user interface and visualization tools based on X-windows and CLM <ref> [7] </ref>.
Reference: [8] <author> A. C. Hindmarsh. Odepack, </author> <title> a systematized collection of ODE solvers. </title> <editor> In R. S. Stepleman and et al., editors, </editor> <booktitle> Scientific Computing, </booktitle> <pages> pages 55-64. </pages> <publisher> North-Holland, Publ., </publisher> <address> Amsterdam, </address> <year> 1983. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 18], ODE integrators <ref> [8] </ref>, linear algebra packages [6], and symbolic algebra systems [20, 11, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. <p> Thus the state variables are identified, and all time derivatives of state variables are moved to the left hand side of the equations. 3. Since the symbolic algebraic manipulations are performed using the computer algebra system Weyl [23], and the simulator itself is in FORTRAN <ref> [8] </ref>, the resulting set of equations (from 2) is mapped into a single vector equation, and translated into a FORTRAN subroutine for computing the time derivative of the state vector. 4. The subroutine constructed in the previous step is loaded together with standard numerical codes for integrating ODEs [8], as well <p> in FORTRAN <ref> [8] </ref>, the resulting set of equations (from 2) is mapped into a single vector equation, and translated into a FORTRAN subroutine for computing the time derivative of the state vector. 4. The subroutine constructed in the previous step is loaded together with standard numerical codes for integrating ODEs [8], as well as visualization code and user interface components. 9 5. <p> As an example, the system could "know" that the LSODA <ref> [8] </ref> routine solves ODEs represented in a particular format, what parameters it requires, etc. The key is to explicitly represent the software components purpose, data conventions, and interfaces. This allows the system to reason about the code fragments it combines to create a simulator.
Reference: [9] <author> Christoph M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: In contrast, geometric modeling has various computational models of objects such as point sets (e.g., Boundary Representations (Brep) and Constructive Solid Geometry (CSG), etc.) and operations on these objects (e.g., boolean operations, Minkowski sums, and Euler operations). (For an introduction to geometric modeling and references see Hoff-mann <ref> [9] </ref>.) While much work remains in the process of unifying and expanding the computational theory of geometric modeling, the beginnings of a computational theory exist.
Reference: [10] <author> Cornelius Lanczos. </author> <title> The Variational Principles of Mechanics. </title> <publisher> Dover, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: As an example, we used the scene generator to create the following scene, represented textually below: time <ref> [0, 10] </ref> PARTICLE /* at time = 0 */ name particle-1 /* name is optional for any SimLab entity */ mass 1.0 position &lt;0.0, 0.0, 0.0&gt; velocity &lt;1.0, 0.0, 0.0&gt; 7 PARTICLE /* at time = 0 */ name particle-2 mass 1.0 position &lt;0.0, 0.0, 10.0&gt; velocity &lt;0.0, -10.0, 0.0&gt; FORALL <p> 0.0, 0.0&gt; velocity &lt;1.0, 0.0, 0.0&gt; 7 PARTICLE /* at time = 0 */ name particle-2 mass 1.0 position &lt;0.0, 0.0, 10.0&gt; velocity &lt;0.0, -10.0, 0.0&gt; FORALL UNORDERED-PAIRS (p1:particle, p2:particle) IN scene gravitation (p1,p2) This scene specifies that a system of two particles should be simulated in the time interval <ref> [0; 10] </ref>. The final two lines in the above scene specification declare that gravitational interaction occurs between all distinct pairs of particles in the scene. <p> object2) c2))))) This connection, in addition to the forces and torques (as well as object1 and object2) that it inherits from hk-constraint, this connection contains three quantities, c1, c2, and lambda. lambda will contain the value of the Lagrange multiplier associated with the Lagrange multiplier method of solving holonomic constraints <ref> [10] </ref>. The quantities c1 and c2 represent points on object1 and object2, respectively. The domain of c1 is (lcf object1), which is the local coordinate frame of object1, as described above. This means that if the coordinates of c1 are constant, c1 moves with object1.
Reference: [11] <institution> Maple Group, Waterloo, Canada. Maple, </institution> <year> 1987. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 18], ODE integrators [8], linear algebra packages [6], and symbolic algebra systems <ref> [20, 11, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> In particular, the mathematical domain of a quantity is represented using the Weyl computer algebra substrate. Weyl offers significant advantages over the traditional symbolic mathematics systems such as Macsyma [20], Maple <ref> [11] </ref> or Mathematica [21]. While these are large stand-alone programs, Weyl is an extensible toolbox for computational algebra, whose functionality is accessible at a variety of levels.
Reference: [12] <author> Leonard Meirovitch. </author> <title> Methods of Analytical Dynamics. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: As we have stated, SimLab creates simulators directly from models of physics. In developing this example we, in addition to introducing the constructs of the model specification language, compare the SimLab formulation of a mathematical model with the development in a standard textbook <ref> [12] </ref>. The differences are not significant, and arise mainly in making certain assumptions explicit. For instance, SimLab models specify mathematical domains of quantities. Unlike human readers, SimLab does not infer the mathematical domains of quantities.
Reference: [13] <author> Mitchell & Gauthier Assoc., </author> <title> Concord, Mass. ACSL: Advanced Continuous Simulation Language | User Guide and Reference Manual, </title> <year> 1986. </year>
Reference-contexts: This causes a shortage of physical systems simulation and analysis software. In particular, there is a significant time lag between development of hardware technology (such as new parallel architectures) and its use for physical systems simulation and analysis. Existing simulation languages <ref> [13, 1, 15] </ref> are typically a thin veneer over FORTRAN: they are often, in fact, preprocessors for FORTRAN. In addition to providing a high-level/FORTRAN syntax, such systems typically provide subroutines for performing a variety of simulation operations, such as ODE integration.
Reference: [14] <author> Henery M. Paynter. </author> <title> Analysis and Design of Engineering Systems. </title> <publisher> The M.I.T. Press, </publisher> <address> Cam-bridge, Massachusetts, </address> <year> 1961. </year>
Reference-contexts: Section 2 develops a SimLab model of particle dynamics by comparing the SimLab syntax with a typical textbook derivation. Besides the simulation languages described above, the bond graph formalism, developed by Paynter in the late 1950's <ref> [14] </ref>, has engendered a number of simulation systems [17, 2]. Bond graphs are essentially a generalization of electrical circuits. Analogs to electrical components, such as inductors, resistors, and capacitors are defined for various physical domains.
Reference: [15] <author> A.A.B. Pritsker. </author> <title> Introduction to Simulation and SLAM II. </title> <publisher> Systems Publishing Corporation, </publisher> <year> 1986. </year>
Reference-contexts: This causes a shortage of physical systems simulation and analysis software. In particular, there is a significant time lag between development of hardware technology (such as new parallel architectures) and its use for physical systems simulation and analysis. Existing simulation languages <ref> [13, 1, 15] </ref> are typically a thin veneer over FORTRAN: they are often, in fact, preprocessors for FORTRAN. In addition to providing a high-level/FORTRAN syntax, such systems typically provide subroutines for performing a variety of simulation operations, such as ODE integration.
Reference: [16] <author> Howard Reingold. </author> <title> Tools for Thought. </title> <publisher> Simon and Schuster, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Since their introduction almost fifty years ago, electronic computers have been used to simulate and analyze physical systems. ENIAC, widely regarded as the first digital electronic computer, was originally commissioned to generate ballistics tables <ref> [16] </ref>, i.e., simulating the dynamics of a rigid body in a fluid (a projectile moving through the air) in a gravitational field (that of the earth).
Reference: [17] <institution> RosenCode Associates, Inc., Lansing, </institution> <note> Mich. The ENPORT Reference Manual, </note> <year> 1989. </year>
Reference-contexts: Section 2 develops a SimLab model of particle dynamics by comparing the SimLab syntax with a typical textbook derivation. Besides the simulation languages described above, the bond graph formalism, developed by Paynter in the late 1950's [14], has engendered a number of simulation systems <ref> [17, 2] </ref>. Bond graphs are essentially a generalization of electrical circuits. Analogs to electrical components, such as inductors, resistors, and capacitors are defined for various physical domains. <p> While lumped systems are extensively used to model a variety of engineering design and analysis problems, and in fact form the basis for computer simulation systems based on bond graphs such as Enport <ref> [17] </ref>, incorporation of distributed phenomena into SimLab will allow it to fully support problem domains such as electrostatics, fluid flow and heat transfer. Distributed parameter models are topologically more complex than lumped systems: lumped systems are graphs, topologically, while distributed parameter systems are represented with higher dimensional cell complexes.
Reference: [18] <institution> Spatial Technology, Inc., Applied Geometry, Inc., and Three-Space, Ltd., Boulder, Colorado. ACIS Geometric Modeler Interface Guide, </institution> <year> 1990. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers <ref> [3, 22, 18] </ref>, ODE integrators [8], linear algebra packages [6], and symbolic algebra systems [20, 11, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [19] <author> Guy L. Steele, Jr. </author> <title> Common Lisp, the language. </title> <note> Digital Press, second edition, 1990. 37 </note>
Reference: [20] <author> Symbolics, Inc., </author> <title> Burlington, MA. MACSYMA Reference Manual, </title> <booktitle> 14th edition, </booktitle> <year> 1989. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 18], ODE integrators [8], linear algebra packages [6], and symbolic algebra systems <ref> [20, 11, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> In particular, the mathematical domain of a quantity is represented using the Weyl computer algebra substrate. Weyl offers significant advantages over the traditional symbolic mathematics systems such as Macsyma <ref> [20] </ref>, Maple [11] or Mathematica [21]. While these are large stand-alone programs, Weyl is an extensible toolbox for computational algebra, whose functionality is accessible at a variety of levels.
Reference: [21] <author> Steven Wolfram. </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley, </publisher> <address> Redwood City, CA, </address> <year> 1988. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 18], ODE integrators [8], linear algebra packages [6], and symbolic algebra systems <ref> [20, 11, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> In particular, the mathematical domain of a quantity is represented using the Weyl computer algebra substrate. Weyl offers significant advantages over the traditional symbolic mathematics systems such as Macsyma [20], Maple [11] or Mathematica <ref> [21] </ref>. While these are large stand-alone programs, Weyl is an extensible toolbox for computational algebra, whose functionality is accessible at a variety of levels.
Reference: [22] <author> XOX Corporation, </author> <title> Bloomington, MN. SHAPES Geometry Library Reference Manual, </title> <year> 1990. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers <ref> [3, 22, 18] </ref>, ODE integrators [8], linear algebra packages [6], and symbolic algebra systems [20, 11, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [23] <author> Richard E. Zippel. </author> <title> The Weyl computer algebra substrate. </title> <type> Technical Report 90-1077, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1990. </year> <month> 38 </month>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 18], ODE integrators [8], linear algebra packages [6], and symbolic algebra systems <ref> [20, 11, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> Thus the state variables are identified, and all time derivatives of state variables are moved to the left hand side of the equations. 3. Since the symbolic algebraic manipulations are performed using the computer algebra system Weyl <ref> [23] </ref>, and the simulator itself is in FORTRAN [8], the resulting set of equations (from 2) is mapped into a single vector equation, and translated into a FORTRAN subroutine for computing the time derivative of the state vector. 4. <p> This allows SimLab to automatically generate code that transforms elements of one representation to the other. For more details on the use of Weyl, see Zippel <ref> [23] </ref>.
References-found: 23

