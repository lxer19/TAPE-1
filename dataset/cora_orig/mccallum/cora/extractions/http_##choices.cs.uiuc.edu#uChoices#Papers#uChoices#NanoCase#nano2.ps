URL: http://choices.cs.uiuc.edu/uChoices/Papers/uChoices/NanoCase/nano2.ps
Refering-URL: http://choices.cs.uiuc.edu/choices/uChoices.html
Root-URL: http://www.cs.uiuc.edu
Email: fstan,raila,royg@cs.uiuc.edu  
Title: A Case for Nano-Kernels  
Author: See-Mong Tan David K. Raila Roy H. Campbell 
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: The Choices operating system splits the microkernel into a machine-independent part and a machine-dependent sub-microkernel. The sub-microkernel, called the nano-kernel in Choices, encapsulates the hardware and presents an idealized machine architecture to the rest of the system. Higher levels of the system access the nano-kernel through a single interface. Nano-kernels are useful because they significantly enhance portability of the entire microkernel. The interface provided by the idealized machine architecture of the Choices nano-kernel is a good match for constructing higher-level abstractions in the machine-independent microkernel. In the Choices nano-kernel, we have fully decoupled the nano-kernel from all higher-level abstractions. Thus, it should be possible to construct many different operating systems on top of the nano-kernel. The Choices nano-kernel is built as an object-oriented framework. The framework guides porting to new hardware platforms, and allows the specialization of its components for efficient, machine-specific implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Roy H. Campbell and Nayeem Islam. </author> " <title> Choices: A Parallel Object-Oriented Operating System". </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Related work and the conclusion is given in section 6 and section 7. 2 Nano-Kernel Choices is a redesign of the original Choices object-oriented operating system <ref> [1] </ref>. The operating system is composed of independent modules. Modules are implemented as independent object-oriented frameworks that interact through well defined interfaces. Within a framework, the subclassing of components provides the ability to customize its various parts to support different implementations and optimizations.[8]. Modules interact only through well-defined interfaces.
Reference: [2] <author> Roy H. Campbell and See-Mong Tan. </author> <title> Choices: An Object-Oriented Multimedia Operating System. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: The virtual memory subsystem requires machine-dependent code for handling the hardware memory management unit (MMU). The process subsystem requires both the MMU code and code for handling processor context saves and restores. Interrupt handling is another case in point. In the Choices operating system <ref> [2, 10] </ref>, we have split the kernel into two portions. The machine-dependent nano-kernel encapsulates the physical hardware and provides hardware support for the rest of the machine-independent microkernel. It provides the microkernel with the needed mechanisms for implementing higher-level abstractions, such as processes, timers, and virtual memory.
Reference: [3] <author> David Raila and Jishnu Mukerji. </author> <title> A Prototyping Environment for the Choices Operating Systems. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign and Advanced Architecture Department, Unix Systems Laboratories, </institution> <year> 1993. </year>
Reference-contexts: The second is a native port to the Sun SPARCstation. VirtualChoices is an implementation of the Choices nano-kernel that emulates a symmetric shared memory multiprocessor on top of Solaris. VirtualChoices provides a convenient and robust prototyping environment for testing and debugging design ideas in Choices similar to VirtualChoices <ref> [3] </ref>. It has a much faster edit-compile-test cycle, no need for dedicated hardware, and is compatible with native implementations of Choices. This section briefly presents the concrete subclasses that VirtualChoices supplies to implement Choices. The CPU subclass in VirtualChoices is programmed with a UNIX process.
Reference: [4] <author> D.R. Engler and M.F. Kaashoek. </author> <title> Exterminate All Operating System Abstractions. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, WA, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: The overhead is low for calling interface functions directly, and negligible for context switching, a higher level function composed out of nano-kernel primitives. 6 Related Work There have been many attempts at defining minimal kernel services in modern operating systems. MIT's Exokernel <ref> [4] </ref> is intended as a minimal kernel that directly exposes the hardware capabilities of the machine, leaving traditional OS abstractions up to implementations in user-level libraries. Lipto's [5] nugget is a "truly minimal kernel", managing low-level resource allocation mechanisms such as processor allocation, memory management and interrupt processing.
Reference: [5] <author> P. Druschel, L. L. Peterson, and N. C. Hutchinson. </author> <title> Beyond micro-kernel design: Decoupling modularity and protection in Lipto. </title> <booktitle> In Twelfth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 512-520, </pages> <address> Yokohama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: MIT's Exokernel [4] is intended as a minimal kernel that directly exposes the hardware capabilities of the machine, leaving traditional OS abstractions up to implementations in user-level libraries. Lipto's <ref> [5] </ref> nugget is a "truly minimal kernel", managing low-level resource allocation mechanisms such as processor allocation, memory management and interrupt processing. Spring's [7] nucleus is similar, supporting domains (virtual address spaces), threads and doors (which handle object-oriented calls between domains).
Reference: [6] <author> E. Gamma and R. Helm and R. Johnson and J.Vlissides. </author> <title> Design Patterns, Elements of Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The interface prevents the micro-level from manipulating nano-kernel objects in undesirable ways. Third, the interface may itself be extended to allow the aggregation in one interface call to multiple nano-kernel calls. This particular object-oriented design pattern is called the Facade <ref> [6] </ref>. The cost of an explicit interface is the overhead of one function call per invocation of the nano-kernel. 3.1 Suitability of the Interface We suggest that the above interface is suitable for a wide range of general purpose operating systems.
Reference: [7] <author> J. Mitchell et al. </author> <title> An Overview of the Spring System. </title> <booktitle> In Proceedings of Compcon 'Spring 1994, </booktitle> <month> February </month> <year> 1994. </year> <month> 10 </month>
Reference-contexts: Lipto's [5] nugget is a "truly minimal kernel", managing low-level resource allocation mechanisms such as processor allocation, memory management and interrupt processing. Spring's <ref> [7] </ref> nucleus is similar, supporting domains (virtual address spaces), threads and doors (which handle object-oriented calls between domains). The nano-kernel is at a lower level than all of these approaches.
Reference: [8] <author> N. Islam. </author> <title> Customized Message Passing and Scheduling for Parallel and Distributed Applications. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1994. </year>
Reference: [9] <author> B. W. Kernighan and D. M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1978. </year>
Reference-contexts: 1 Introduction A prime concern in modern operating systems is system portability across different hardware platforms. Operating system implementors have migrated from coding in pure assembler to writing most parts of an operating system in high level languages such as C <ref> [11, 9] </ref>. This enhances portability by reducing the amount of machine-dependent assembler that needs to be rewritten for every new port of the operating system. Coding in high level languages has indeed made modern operating systems code much clearer, more flexible, and easier to maintain.
Reference: [10] <author> See-Mong Tan, David Raila, and Roy H. Campbell. </author> <title> An Object-Oriented Nano-Kernel for Operating System Hardware Support. </title> <booktitle> In Fourth International Workshop on Object-Orientation in Operating Systems, Lund, </booktitle> <address> Sweden, </address> <month> August </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: The virtual memory subsystem requires machine-dependent code for handling the hardware memory management unit (MMU). The process subsystem requires both the MMU code and code for handling processor context saves and restores. Interrupt handling is another case in point. In the Choices operating system <ref> [2, 10] </ref>, we have split the kernel into two portions. The machine-dependent nano-kernel encapsulates the physical hardware and provides hardware support for the rest of the machine-independent microkernel. It provides the microkernel with the needed mechanisms for implementing higher-level abstractions, such as processes, timers, and virtual memory. <p> The code in the micro-levels of Choices is shared, unchanged, between both ports. The measured overhead of an explicit nano-kernel layer, compared to our previous Choices implementations on the same platforms, is marginal. 8 Acknowledgements A description of the Choices nano-kernel appeared as a short position paper <ref> [10] </ref>. We thank the excellent comments by our anonymous reviewers on that paper.
Reference: [11] <author> K. Thompson. </author> <title> Unix Implementation. </title> <journal> Bell System Technical Journal, </journal> <volume> 57(6) </volume> <pages> 1931-1946, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: 1 Introduction A prime concern in modern operating systems is system portability across different hardware platforms. Operating system implementors have migrated from coding in pure assembler to writing most parts of an operating system in high level languages such as C <ref> [11, 9] </ref>. This enhances portability by reducing the amount of machine-dependent assembler that needs to be rewritten for every new port of the operating system. Coding in high level languages has indeed made modern operating systems code much clearer, more flexible, and easier to maintain.
Reference: [12] <author> W. A. Christopher and S. J. Procter and T. E. Anderson. </author> <title> The Nachos Instructional Operating System. </title> <type> Technical Report UCB//CSD-93-739, </type> <institution> University of California, Berkeley, </institution> <month> April </month> <year> 1993. </year> <month> 11 </month>
Reference-contexts: In the nano-kernel interrupt processing is split between a machine-dependent part handled by the Exception class together with its concrete processor and machine-dependent subclasses, and a machine-independent part which the higher levels refer to via machine-independent exception types. The port of the nano-kernel to Solaris is similar to Nachos <ref> [12] </ref>. Nachos is a multithreaded operating system simulated as a regular Unix process. It was developed for pedagogical purposes. VirtualChoices is different in that we use real OS code that is not stripped or simplified. VirtualChoices also provides multiprocessor support, with physical processors simulated as separate Unix processes.
References-found: 12

