URL: ftp://ftp.cs.huji.ac.il/users/transis/lab-projects/mcast_services.ps.gz
Refering-URL: http://www.cs.huji.ac.il/~grishac/grishac.html
Root-URL: http://www.cs.huji.ac.il
Email: grishac@cs.huji.ac.il  
Title: An Implementation of Reliable Multicast Services in the Transis Group Communication System  
Author: Gregory V. Chockler 
Date: October 5, 1997  
Note: Submitted as a Lab Project  
Address: Jerusalem, Israel  
Affiliation: High Availability Lab Computer Science department The Hebrew University of Jerusalem  
Abstract-found: 0
Intro-found: 1
Reference: [AAS95] <author> A.Compagner, A.S.Berdnikov, and S.B.Turtia, </author> <title> MathLink program for high-quality random numbers, </title> <month> September </month> <year> 1995, </year> <title> Available from http://www.can.nl or ftp://ftp.can.nl (Computer Algebra Information Network) and http://wwwcpo.tn.tudelft.nl/bbs/cposis.htm (Charged Particle Optics Software Internet Services). </title>
Reference-contexts: The latter can be implemented using any available pseudo-random number generator (PRNG). In our implementation we used the MathLink <ref> [AAS95] </ref> program which generates pseudo random sequences of integers with extremely long period (10 16376 ) and with excellent correlation properties. A slightly simplified, the MathLink PRNG (and typically any other existing PRNG) provides the following interface: void init rand (intseed) initializes (resets) the PRNG to a random starting point.
Reference: [Ank94] <institution> Tal Anker, The Transis X-Console, Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: acknowledged by all the members of the current view and totally ordered relative to all the messages of other reliable multicast 1 Note that for testing and debugging purposes, all the book-keeper's parameters (e.g., N and T ) can be made available at the run time through the Transis Console <ref> [Ank94] </ref> interface. 26 types. Otherwise the Agreed and Safe multicast total order requirement can be violated at network partition times. In our implementation change-path messages are sent via RCME through a special internal reliable multicast service called Super Safe.
Reference: [Cho97] <author> Gregory V. Chockler, </author> <title> An adaptive totally ordered multicast protocol that tolerates partitions, </title> <type> Master's thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: In the consequent sections we will gradually improve the basic protocol, and finally end up with a dynamically adaptive protocol, called Adaptive Randomized Total Ordering Protocol (ARTOP) <ref> [Cho97] </ref>, that takes into account the distribution of process transmission rates at the delivery time. Several important issues concerning the group communication system design were left aside in this document. Among them are flow control and garbage collection issues that are inherent to any reliable communication substrate. <p> process in the current view, agreed ptr follows the same path at every current view member. void reset_agreed_pointer () f init_rand (agreed_state_handle, curview.id); g void advance_agreed_pointer () f agreed_ptr = next_rand (agreed_state_handle, 1, curview.procno); g 8.3 The Adaptive Randomized Total Ordering Protocol (ARTOP) The Adaptive Randomized Total Ordering Protocol (ARTOP) <ref> [Cho97] </ref> is a novel algorithm that takes the "pointer" protocol's idea of separating the Agreed (Safe) delivery mechanism and policy to its limit.
Reference: [DM96] <author> D. Dolev and D. Malki, </author> <title> The Transis Approach to High Availability Cluster Communication, </title> <journal> Communications of the ACM 39 (1996), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference-contexts: 1 Introduction In this document we describe the implementation of reliable multicast services in the Transis <ref> [DM96] </ref> group communication system. Transis provides the application programmer with a convenient framework for developing distributed fault-tolerant applications operating in asynchronous networking environments with failures. Services provided by Transis can be roughly divided in two categories: the group membership and the reliable multicast with different semantics. <p> to the Virtual Synchrony requirement below: 2 Virtual Synchrony: If two processes go through the same two consecutive views v and v 0 , then they deliver the same set of messages between v and v 0 . 4 The Transis System In its core, the Transis group communication system <ref> [DM96] </ref> consists of two basic components: the Membership service and the Reliable Causal Multicast Engine (RCME). The responsibility of the Membership service is to maintain a list of currently connected and operational processes.
Reference: [Mal94] <author> D. Malki, </author> <title> Multicast Communication for High Avalaibility, </title> <type> Ph.D. thesis, </type> <institution> Institute of Computer Science, The Hebrow University of Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: null) f if (mnptr-&gt;msg.type = CAUSAL) f deliver (mnptr-&gt;msg.data); update_CW (); tmp_no++; else if (mnptr-&gt;msg.type = AGREED) agreed_flag = true; else if (mnptr-&gt;msg.type = SAFE) safe_flag = true; g g while (delivered_no != tmp_no); return delivered_no; g 6.3 The Agreed Delivery The Agreed delivery is based on the "wave" (All-Ack <ref> [Mal94] </ref>) algorithm mentioned in Section 6.1.
Reference: [MSMA90] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala, </author> <title> Broadcast Protocols for Distributed Systems, </title> <journal> IEEE Trans. Parallel & Distributed Syst. </journal> <volume> 1 (1990), no. 1, </volume> <pages> 17-25. </pages>
Reference-contexts: RCME provides basic facilities for reliable dissemination of messages among the current view members. RCME overcomes message omission, duplication and transient network connectivity losses. The approach utilized by RCME is a variant of the negative acknowledgment technique and resembles those of the Trans <ref> [MSMA90] </ref> and Psync [PBS89] protocols. Views reported by the Membership service pass through RCME before being delivered to the application. RCME delays a new view installation until the "fate" of messages that were received by RCME in the current view but have not been delivered to the application is determined. <p> Some very brief discussion appears in Section 5.3 below. 5 The Transis Reliable Causal Multicast Engine (RCME) Imple mentation The main data structure of the Transis RCME is a directed acyclic graph, DAG, (see Figure 1) based on Trans <ref> [MSMA90] </ref> and Psync [PBS89]. Each new message emitted by a process p contains piggybacked acknowledgments (acks) for all the messages that p has received and inserted into the 3 DAG so far.
Reference: [PBS89] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting, </author> <title> Preserving and Using Context Information in Interprocess Communication, </title> <journal> ACM Trans. Comput. Syst. </journal> <volume> 7 (89), no. 3, </volume> <pages> 217-246. </pages>
Reference-contexts: RCME provides basic facilities for reliable dissemination of messages among the current view members. RCME overcomes message omission, duplication and transient network connectivity losses. The approach utilized by RCME is a variant of the negative acknowledgment technique and resembles those of the Trans [MSMA90] and Psync <ref> [PBS89] </ref> protocols. Views reported by the Membership service pass through RCME before being delivered to the application. RCME delays a new view installation until the "fate" of messages that were received by RCME in the current view but have not been delivered to the application is determined. <p> Some very brief discussion appears in Section 5.3 below. 5 The Transis Reliable Causal Multicast Engine (RCME) Imple mentation The main data structure of the Transis RCME is a directed acyclic graph, DAG, (see Figure 1) based on Trans [MSMA90] and Psync <ref> [PBS89] </ref>. Each new message emitted by a process p contains piggybacked acknowledgments (acks) for all the messages that p has received and inserted into the 3 DAG so far.
References-found: 7

