URL: http://www.cs.ucla.edu/~czdemo/tsur/wis.ps
Refering-URL: http://www.cs.ucla.edu/~czdemo/tsur/
Root-URL: http://www.cs.ucla.edu
Title: Weighted Association Rules: Model and Algorithm  
Author: G.D. Ramkumar, Sanjay Ranka, Shalom Tsur 
Date: October 16, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Agrawal, H. Mannila, R. Srikant, H. Toivonen, and A.I. Verkamo. </author> <title> Fast discovery of association rules. In U.M. </title> <editor> Fayyad, G. Piatetsky-Shapiro, P. Smith, and R. Uthurusamy, editors, </editor> <booktitle> Advances in Knowledge Discovery and Data Mining, </booktitle> <pages> pages 307-328. </pages> <publisher> AAAI/MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: We have developed a generalization of the itemset support problem which can incorporate item weights as well as transactions weights. However, the algorithm required to generate these "weighted" itemsets is more difficult than the DIC algorithm of [5] or the Apriori Algorithm <ref> [2, 4, 1, 3] </ref>. If only transaction weights are required for an application the solution is considerably simpler. In the following, we briefly describe some potential ways weights can be attached to items and/or transactions and explore the algorithms required to compute the weighted sets. <p> If a given transaction t* T contains an itemset J I then all subsets of the itemset J are also contained in the transaction t. Hence, if an itemset J is large then all its subsets K J are also large. Hence, the algorithms of [5] and <ref> [2, 4, 1, 3] </ref> can be applied with minor modifications to obtain all the large weighted itemsets. The only change required is to update the support of an itemset using the transaction weight, as opposed to incrementing it by 1 as earlier.
Reference: [2] <author> R. Agrawal, T. Imilienski, and A. Swami. </author> <title> Mining Association Rules between Sets of Items in Large Databases. </title> <booktitle> Proc. of the ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <pages> pages 207-216, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: We have developed a generalization of the itemset support problem which can incorporate item weights as well as transactions weights. However, the algorithm required to generate these "weighted" itemsets is more difficult than the DIC algorithm of [5] or the Apriori Algorithm <ref> [2, 4, 1, 3] </ref>. If only transaction weights are required for an application the solution is considerably simpler. In the following, we briefly describe some potential ways weights can be attached to items and/or transactions and explore the algorithms required to compute the weighted sets. <p> If a given transaction t* T contains an itemset J I then all subsets of the itemset J are also contained in the transaction t. Hence, if an itemset J is large then all its subsets K J are also large. Hence, the algorithms of [5] and <ref> [2, 4, 1, 3] </ref> can be applied with minor modifications to obtain all the large weighted itemsets. The only change required is to update the support of an itemset using the transaction weight, as opposed to incrementing it by 1 as earlier.
Reference: [3] <author> R. Agrawal and J.C. Shafer. </author> <title> Parallel mining of association rules: Design, implementation and experience. </title> <type> Technical Report RJ10004, </type> <institution> IBM Research Division, Almaden Research Center, </institution> <year> 1996. </year>
Reference-contexts: We have developed a generalization of the itemset support problem which can incorporate item weights as well as transactions weights. However, the algorithm required to generate these "weighted" itemsets is more difficult than the DIC algorithm of [5] or the Apriori Algorithm <ref> [2, 4, 1, 3] </ref>. If only transaction weights are required for an application the solution is considerably simpler. In the following, we briefly describe some potential ways weights can be attached to items and/or transactions and explore the algorithms required to compute the weighted sets. <p> If a given transaction t* T contains an itemset J I then all subsets of the itemset J are also contained in the transaction t. Hence, if an itemset J is large then all its subsets K J are also large. Hence, the algorithms of [5] and <ref> [2, 4, 1, 3] </ref> can be applied with minor modifications to obtain all the large weighted itemsets. The only change required is to update the support of an itemset using the transaction weight, as opposed to incrementing it by 1 as earlier.
Reference: [4] <author> R. Agrawal and R. Srikant. </author> <title> Fast algorithms for mining association rules. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference-contexts: We have developed a generalization of the itemset support problem which can incorporate item weights as well as transactions weights. However, the algorithm required to generate these "weighted" itemsets is more difficult than the DIC algorithm of [5] or the Apriori Algorithm <ref> [2, 4, 1, 3] </ref>. If only transaction weights are required for an application the solution is considerably simpler. In the following, we briefly describe some potential ways weights can be attached to items and/or transactions and explore the algorithms required to compute the weighted sets. <p> If a given transaction t* T contains an itemset J I then all subsets of the itemset J are also contained in the transaction t. Hence, if an itemset J is large then all its subsets K J are also large. Hence, the algorithms of [5] and <ref> [2, 4, 1, 3] </ref> can be applied with minor modifications to obtain all the large weighted itemsets. The only change required is to update the support of an itemset using the transaction weight, as opposed to incrementing it by 1 as earlier.
Reference: [5] <author> S. Brin, R. Motwani, J. D. Ullman, and S. Tsur. </author> <title> Dynamic itemset counting and implication rules for market basket data. </title> <booktitle> In Proc. of 1997 ACM-SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1997. </year>
Reference-contexts: We have developed a generalization of the itemset support problem which can incorporate item weights as well as transactions weights. However, the algorithm required to generate these "weighted" itemsets is more difficult than the DIC algorithm of <ref> [5] </ref> or the Apriori Algorithm [2, 4, 1, 3]. If only transaction weights are required for an application the solution is considerably simpler. In the following, we briefly describe some potential ways weights can be attached to items and/or transactions and explore the algorithms required to compute the weighted sets. <p> follows: Section 2 includes the formal definition of the problem and an introduction to the notation used; Section 3 describes the algorithms used; Section 4 presents some experimental results, and we conclude the paper in Section 5. 2 Definitions and Formal Notation We formalize the problem along the lines of <ref> [5] </ref>. Let I = i 1 ; i 2 ; : : : ; i n be the set of all distinct items. With each item i j we associate a weight w j . <p> If a given transaction t* T contains an itemset J I then all subsets of the itemset J are also contained in the transaction t. Hence, if an itemset J is large then all its subsets K J are also large. Hence, the algorithms of <ref> [5] </ref> and [2, 4, 1, 3] can be applied with minor modifications to obtain all the large weighted itemsets. The only change required is to update the support of an itemset using the transaction weight, as opposed to incrementing it by 1 as earlier.
Reference: [6] <author> R. Srikant, and R. </author> <booktitle> Argrawal Mining Quantitative Association Rules in Large Relational Tables In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Montral, Canada, </address> <month> June </month> <year> 1996. </year> <month> 13 </month>
Reference-contexts: While we do not know of any related work that attempts to use the item weights directly in the derivation of association rules we mention the 2 reasearch by Srikant and Agrawal <ref> [6] </ref> on the mining of quantitative asso-ciation rules. The approach taken there is to conceptually regard each (attrib u te; v alu e) pair as a distinct "item" and to employ clustering methods to control the very large number of rules generated thus.
References-found: 6

