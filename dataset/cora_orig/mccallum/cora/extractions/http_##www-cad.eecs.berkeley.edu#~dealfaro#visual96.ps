URL: http://www-cad.eecs.berkeley.edu/~dealfaro/visual96.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~dealfaro/vabs.html
Root-URL: 
Email: anca|luca|manna|sipma|uribe@cs.stanford.edu  
Title: Diagram-based Formalisms for the Verification of Reactive Systems In CADE-13 Workshop on Visual Reasoning,  
Author: Anca Browne, Luca de Alfaro, Zohar Manna, Henny B. Sipma and Tomas E. Uribe 
Date: July 1996.  
Address: Brunswick, NJ,  Stanford, CA. 94305  
Affiliation: New  Computer Science Department, Stanford University  
Abstract: Graphical formalisms are an increasingly important component of our research on the specification and verification of reactive systems. We briefly describe diagram-based verification methods we have developed for verifying temporal properties of infinite-state reactive systems, as well as for the incremental analysis and refinement of systems and specifications.
Abstract-found: 1
Intro-found: 1
Reference: [BBC + 96] <author> N. Bjtrner, A. Browne, E. Chang, M. Colon, A. Kapur, Z. Manna, H.B. Sipma, and T.E. Uribe. </author> <title> STeP: Deductive-algorithmic verification of reactive and real-time systems. </title> <booktitle> In Proc. 8 th Intl. Conference on Computer Aided Verification. </booktitle> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: Other classes of diagrams can be used to prove general safety or response properties [MP94]. We have implemented verification diagrams as part of the STeP (Stanford Temporal Prover) system <ref> [BBC + 96] </ref>, which includes an X-windows diagram editor. A verification diagram rule in STeP takes a temporal property ' and a diagram, checks that the diagram is well-formed with respect to ', and generates the corresponding set of verification conditions as subgoals.
Reference: [BBM95] <author> N. Bjtrner, A. Browne, and Z. Manna. </author> <title> Automatic generation of invariants and intermediate assertions. </title> <booktitle> In 1 st Intl. Conf. on Principles and Practice of Constraint Programming, volume 976 of LNCS, </booktitle> <pages> pages 589-623. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: In STeP, this diagram generates 38 verification conditions. All are automatically proven to be valid, given automatically generated local invariants <ref> [BBM95] </ref>. chain diagrams generalize to rank diagrams, where an unbounded number of steps may be necessary to reach the terminal node. The acyclicity requirement is dropped, and replaced by ranking functions, which define a well-founded order that is always decreased by the helpful transitions. <p> As in standard deductive verification, all our formalisms can use previously proven properties and automatically generated invariants <ref> [BBM95] </ref> in the course of a proof. Furthermore, propagation and approximation mechanisms similar to those used in the assertion graphs of [BBM95] can be adapted to our diagrams as well, resulting in more automatic verification tools. <p> As in standard deductive verification, all our formalisms can use previously proven properties and automatically generated invariants <ref> [BBM95] </ref> in the course of a proof. Furthermore, propagation and approximation mechanisms similar to those used in the assertion graphs of [BBM95] can be adapted to our diagrams as well, resulting in more automatic verification tools.
Reference: [BCM + 92] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill, and J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-170, </pages> <year> 1992. </year>
Reference-contexts: Since the state-space of the system needs to be generated explicitly, this approach is limited to finite-state systems only. (Symbolic model checking using BDDs <ref> [BCM + 92] </ref> is similarly restricted to the finite-state case.) We have generalized this classical model checking procedure to operate on an abstraction of the product graph, using first-order assertions to represent possibly infinite sets of states [SUM96].
Reference: [BMS95] <author> A. Browne, Z. Manna, and H.B. Sipma. </author> <title> Generalized verification diagrams. </title> <booktitle> In 15th Conference on the Foundations of Software Technology and Theoretical Computer Science, volume 1026 of LNCS, </booktitle> <pages> pages 484-498, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: Verification diagrams can be adapted to parameterized (N -component) designs [MP94], as well as real-time and hybrid systems [MP96]. Generalized and Modular Verification Diagrams: Similarly to verification rules, each class of Verification Diagrams in [MP94] is tailored to a particular class of temporal properties. Generalized Verification Diagrams <ref> [BMS95] </ref> extend the framework to arbitrary temporal formulas. The validity of an arbitrary temporal formula ' for a given system S can be established by constructing an appropriate generalized verification diagram . <p> This set is then shown to be a subset of L ('), the sequences satisfying the temporal formula '. Generalized verification diagrams offer a complete verification methodology: if an FTS S satisfies a formula ' then there is always a diagram such that L (S) L () L (') <ref> [BMS95] </ref>. 3 Modular Verification Diagrams [BMS96] allow the combination of several generalized verification diagrams into a single proof. The combined set represents the intersection of the languages described by each diagram. In this way, individual diagrams can be kept small, and diagrams can be re-used more conveniently.
Reference: [BMS96] <author> A. Browne, Z. Manna, and H.B. Sipma. </author> <title> Modular verification diagrams. </title> <type> Technical report, </type> <institution> Computer Science Department, Stanford University, </institution> <year> 1996. </year>
Reference-contexts: Generalized verification diagrams offer a complete verification methodology: if an FTS S satisfies a formula ' then there is always a diagram such that L (S) L () L (') [BMS95]. 3 Modular Verification Diagrams <ref> [BMS96] </ref> allow the combination of several generalized verification diagrams into a single proof. The combined set represents the intersection of the languages described by each diagram. In this way, individual diagrams can be kept small, and diagrams can be re-used more conveniently.
Reference: [dAM96] <author> L. de Alfaro and Z. Manna. </author> <title> Temporal verification by diagram transformations. </title> <booktitle> In Proc. 8 th Intl. Conference on Computer Aided Verification, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: The main graphical challenge is to present the abstracted state-space in a way where the user can easily choose what to do next. 4 Fairness Diagrams Fairness diagrams <ref> [dAM96] </ref> are graphical abstractions of system behavior, and can combine the direct and indirect proof approaches above. The diagram represents the possible system states and transitions; the progress and response properties of the system are encoded by fairness constraints, which generalize the usual notions of fairness.
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <journal> Sci. Comp. Prog., </journal> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: 4 m 5 m 6 fl s = 1 m 2 ` 4 - ' 2 : at m 3 ^ s = 1 * - ' 1 : s = 2 * fi ff To make diagrams more succinct, we use encapsu lation conventions, based on those of Statecharts <ref> [Har87] </ref>. The assertion labeling a compound node is added, as a conjunct, to its subnodes. Edges leaving (entering) a compound node are interpreted as leaving (entering) all of its subnodes. These graphical abbreviations greatly increase the readability of diagrams, and make them easier to draw.
Reference: [KMMP93] <author> Y. Kesten, Z. Manna, H. McGuire, and A. Pnueli. </author> <title> A decision algorithm for full propositional temporal logic. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> Proc. 5 th Intl. Conference on Computer Aided Verification, volume 697 of LNCS, </booktitle> <pages> pages 97-109. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Given a linear-time temporal logic formula ', the formula tableau for ' is a finite directed graph that represents all the models of ' (see e.g. <ref> [KMMP93] </ref>). Model checking verifies a system property ' by checking the emptiness of the product graph between the transition graph of S and the tableau for :'.
Reference: [MP91] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Reactive systems have an ongoing interaction with their environment. They include distributed and concurrent algorithms, hardware systems, and control programs. Linear-time temporal logic has proved to be a convenient language for expressing safety, progress and response properties of reactive systems <ref> [MP91, MP95] </ref>. We are interested in the formal verification of temporal properties of reactive systems by deductive and algorithmic means. <p> The necessary global properties of diagrams can be proved algorithmically. For details on our verification framework, see <ref> [MP91, MP95] </ref>. Appendix A summarizes the definitions and notation used in the following presentation. 2 Verification Diagrams Verification Diagrams , introduced by Manna and Pnueli [MP94], provide a graphical representation of the direct proof of temporal properties.
Reference: [MP94] <author> Z. Manna and A. Pnueli. </author> <title> Temporal verification diagrams. </title> <booktitle> In Proc. Int. Symp. on Theoretical Aspects of Computer Software, volume 789 of LNCS, </booktitle> <pages> pages 726-765. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The necessary global properties of diagrams can be proved algorithmically. For details on our verification framework, see [MP91, MP95]. Appendix A summarizes the definitions and notation used in the following presentation. 2 Verification Diagrams Verification Diagrams , introduced by Manna and Pnueli <ref> [MP94] </ref>, provide a graphical representation of the direct proof of temporal properties. A verification diagram is a directed graph, where nodes are labeled with assertions and edges are labeled with transitions. A single node can be selected as terminal , and should have not outgoing edges. <p> Other classes of diagrams can be used to prove general safety or response properties <ref> [MP94] </ref>. We have implemented verification diagrams as part of the STeP (Stanford Temporal Prover) system [BBC + 96], which includes an X-windows diagram editor. <p> The acyclicity requirement is dropped, and replaced by ranking functions, which define a well-founded order that is always decreased by the helpful transitions. Verification diagrams can be adapted to parameterized (N -component) designs <ref> [MP94] </ref>, as well as real-time and hybrid systems [MP96]. Generalized and Modular Verification Diagrams: Similarly to verification rules, each class of Verification Diagrams in [MP94] is tailored to a particular class of temporal properties. Generalized Verification Diagrams [BMS95] extend the framework to arbitrary temporal formulas. <p> Verification diagrams can be adapted to parameterized (N -component) designs <ref> [MP94] </ref>, as well as real-time and hybrid systems [MP96]. Generalized and Modular Verification Diagrams: Similarly to verification rules, each class of Verification Diagrams in [MP94] is tailored to a particular class of temporal properties. Generalized Verification Diagrams [BMS95] extend the framework to arbitrary temporal formulas. The validity of an arbitrary temporal formula ' for a given system S can be established by constructing an appropriate generalized verification diagram .
Reference: [MP95] <author> Z. Manna and A. Pnueli. </author> <title> Temporal Verification of Reactive Systems: Safety. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction Reactive systems have an ongoing interaction with their environment. They include distributed and concurrent algorithms, hardware systems, and control programs. Linear-time temporal logic has proved to be a convenient language for expressing safety, progress and response properties of reactive systems <ref> [MP91, MP95] </ref>. We are interested in the formal verification of temporal properties of reactive systems by deductive and algorithmic means. <p> The necessary global properties of diagrams can be proved algorithmically. For details on our verification framework, see <ref> [MP91, MP95] </ref>. Appendix A summarizes the definitions and notation used in the following presentation. 2 Verification Diagrams Verification Diagrams , introduced by Manna and Pnueli [MP94], provide a graphical representation of the direct proof of temporal properties.
Reference: [MP96] <author> Z. Manna and A. Pnueli. </author> <title> Clocked transition systems. </title> <type> Technical Report STAN-CS-TR-96-1566, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: The acyclicity requirement is dropped, and replaced by ranking functions, which define a well-founded order that is always decreased by the helpful transitions. Verification diagrams can be adapted to parameterized (N -component) designs [MP94], as well as real-time and hybrid systems <ref> [MP96] </ref>. Generalized and Modular Verification Diagrams: Similarly to verification rules, each class of Verification Diagrams in [MP94] is tailored to a particular class of temporal properties. Generalized Verification Diagrams [BMS95] extend the framework to arbitrary temporal formulas.
Reference: [SUM96] <author> H.B. Sipma, T.E. Uribe, and Z. Manna. </author> <title> Deductive model checking. </title> <booktitle> In Proc. 8 th Intl. Conference on Computer Aided Verification. </booktitle> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1996. </year> <month> 5 </month>
Reference-contexts: this approach is limited to finite-state systems only. (Symbolic model checking using BDDs [BCM + 92] is similarly restricted to the finite-state case.) We have generalized this classical model checking procedure to operate on an abstraction of the product graph, using first-order assertions to represent possibly infinite sets of states <ref> [SUM96] </ref>. This results in an interactive model checking procedure, where the user can choose the manner in which an abstraction of the state-space is explored.
References-found: 13

