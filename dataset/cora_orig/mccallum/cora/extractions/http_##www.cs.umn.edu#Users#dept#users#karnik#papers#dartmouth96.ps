URL: http://www.cs.umn.edu/Users/dept/users/karnik/papers/dartmouth96.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/karnik/papers/
Root-URL: http://www.cs.umn.edu
Email: (email: atripath@nsf.gov, karnik@cs.umn.edu  
Title: System-Level Issues for Agent Based Distributed Computing  
Author: Anand Tripathi and Neeran Karnik 
Date: May 10, 1997  
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Science University of Minnesota,  
Abstract: The primary focus of this paper is on the system-architecture and language level issues for agent-based distributed computing. It establishes interrelationships between the elements of an agent-based system and the components of a distributed object management system based on the CORBA model. An agent-based application system can be built as a collection of distributed objects, some of which are mobile. This paper identifies the system architecture components for supporting agent-based distributed computing. We also discuss the various issues and requirements in supporting the agent paradigm on such an object based distributed system. These requirements are identified based on the needs arising from several different viewpoints related to: object mobility, fault tolerance and status monitoring, client-level control and management of its mobile agents, mechanisms for parallel execution and coordination of agents, multithreading within an agent, and security and protection of information. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Sun Microsystems . Java Language Specification Version 1.0 Beta. </institution> <type> Technical report, </type> <month> October </month> <year> 1995. </year>
Reference-contexts: This is reflected in the development of programming languages such as Telescript [21] and Java <ref> [1] </ref>, which support program mobility. These systems are indicators of the emerging trend in transportable programs.
Reference: [2] <author> Gregory Andrews, Ronald Olsson, Michael Coffin, Irving Elshoff, Kelvin Nilsen, Titus Purdin, and Gregg Townsend. </author> <title> An overview of the SR language and implementation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(1) </volume> <pages> 51-86, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: some additional data or control information, or the children agents created by it may wish to send certain results back to it. 5 By creating a thread to handle an invocation request the code for the controlling thread is not complicated by in-line "accept" statements, as in Ada or SR <ref> [2] </ref>, for handling such calls. Moreover, such in-line handling of invocations can cause unnecessary delays in the acceptance and processing of an invocation. Supporting concurrency inside an agent requires intra-object synchronization mechanisms. Moreover, it also requires suitable support for concurrent execution and synchronization from the underlying OAM engine.
Reference: [3] <author> Krishna A. Bharat and Luca Cardelli. </author> <title> Migratory Applications. </title> <booktitle> In Proceedings of UIST '95: 8th ACM Symposium on User Interface and Software Technology, </booktitle> <pages> pages 133-142, </pages> <address> New York, NY, </address> <month> November </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: More recently, a number of system architectures and languages have been developed supporting the agent-based computing paradigm. General Magic's Telescript language [21], Tacoma [11], Agent Tcl [8] represent some of these efforts. Languages such as Telescript, Java and Obliq <ref> [3] </ref> support program mobility, which is necessary for building agent-based distributed computing applications. Harrison, Chess, and Kershenbaum [9] investigate the utility of the agent paradigm in comparison with 1 other widely used paradigms such as message-passing and remote procedure call. Agent-based computing offers two clear advantages.
Reference: [4] <author> A. Black, N. Hutchinson, E. Jul, H. Levy, and L. Carter. </author> <title> Distribution and abstract types in emerald. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13, No. 1 </volume> <pages> 65-76, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Later versions of that system did not support this feature. Emerald <ref> [4] </ref> supported the concept of object mobility in its computation model; an object, which is an active entity, could request migration to another site or co-location with another object. More recently, a number of system architectures and languages have been developed supporting the agent-based computing paradigm.
Reference: [5] <author> David Chess, Benjamin Grosof, Colin Harrison, David Levine, Colin Parris, and Gene Tsudik. </author> <title> Itinerant Agents for Mobile Computing. </title> <journal> IEEE Personal Communications, </journal> <pages> pages 34-49, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Secondly, it increases the degree of asynchrony between the client and the server a client may become inactive for an arbitrary time after initiating an agent-based computation. Chess et al. <ref> [5] </ref> provide a detailed exposition of many of the fundamental issues in building agent-based applications. The primary focus of this paper is on the system-architecture level issues and linguistic mechanisms for agent-based computing. <p> We shall refer to it as the Object Adaptor and Manager (OAM). For protection or performance reasons this may be implemented as a hierarchy or collection of system level processes. This entity with certain specialized features conceptually corresponds to an engine in Telescript [21] or Agent Meeting Place <ref> [5] </ref>. In the Nexus architecture the corresponding entity is called a class manager. In this paper we shall either use the term engine or OAM to refer to this component of the 2 system architecture. <p> It should therefore be able to use an encryption scheme and protocol which allows the different hosts to decrypt and use different parts of its code and data (e.g. "folders" in Tacoma [11] or "components" in <ref> [5] </ref>). This could be implemented by encrypting the parts using different public keys corresponding to the hosts on the itinerary.
Reference: [6] <author> Whitfield Diffie and Martin E. Hellman. </author> <title> Multiuser cryptographic techniques. </title> <booktitle> In Proceedings of the AFIPS National Computer Conference, </booktitle> <pages> pages 109-112, </pages> <year> 1976. </year>
Reference-contexts: This could be implemented using public-key cryptography <ref> [6] </ref>. The agent carries a unique owner identifier along with the owner's digital signature [16]. Whenever an agent enters a host, its digital signature must be verified and for this purpose, the host needs to be able to access the public key corresponding to the specified owner.
Reference: [7] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> Software Practice and Experience, </journal> <pages> pages 757-785, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: A migrating agent object can thus continue using such resources if required, even if it moves to another host. This alleviates some of the fundamental difficulties that are associated with OS-level process migration <ref> [7] </ref>. Agents can communicate with other agents on the same host by directly invoking their methods. The interpreter running the agent is then responsible for dynamically linking the appropriate class and running the method.
Reference: [8] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <editor> In Mark Diekhans and Mark Roseman, editors, </editor> <booktitle> Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL 96), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: More recently, a number of system architectures and languages have been developed supporting the agent-based computing paradigm. General Magic's Telescript language [21], Tacoma [11], Agent Tcl <ref> [8] </ref> represent some of these efforts. Languages such as Telescript, Java and Obliq [3] support program mobility, which is necessary for building agent-based distributed computing applications.
Reference: [9] <author> Colin G. Harrison, David M. Chess, and Aaron Kershenbaum. </author> <title> Mobile Agents: Are they a good idea? Technical report, </title> <institution> IBM Research Division, T.J.Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Available at http://www.research.ibm.com/massdist/mobag.ps. </note>
Reference-contexts: General Magic's Telescript language [21], Tacoma [11], Agent Tcl [8] represent some of these efforts. Languages such as Telescript, Java and Obliq [3] support program mobility, which is necessary for building agent-based distributed computing applications. Harrison, Chess, and Kershenbaum <ref> [9] </ref> investigate the utility of the agent paradigm in comparison with 1 other widely used paradigms such as message-passing and remote procedure call. Agent-based computing offers two clear advantages.
Reference: [10] <author> J. S. Banino. </author> <title> Parallelism and Fault-Tolerance in CHORUS. </title> <journal> The Journal of Systems and Software, </journal> <pages> pages 205-211, </pages> <year> 1986. </year>
Reference: [11] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System. </title> <type> Technical Report 95-23, </type> <institution> Department of Computer Science, University of Tromso, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: More recently, a number of system architectures and languages have been developed supporting the agent-based computing paradigm. General Magic's Telescript language [21], Tacoma <ref> [11] </ref>, Agent Tcl [8] represent some of these efforts. Languages such as Telescript, Java and Obliq [3] support program mobility, which is necessary for building agent-based distributed computing applications. <p> It should therefore be able to use an encryption scheme and protocol which allows the different hosts to decrypt and use different parts of its code and data (e.g. "folders" in Tacoma <ref> [11] </ref> or "components" in [5]). This could be implemented by encrypting the parts using different public keys corresponding to the hosts on the itinerary.
Reference: [12] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> Operating System Support for Mobile Agents. </title> <booktitle> In Proceedings of the fifth IEEE Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <pages> pages 42-45, </pages> <address> Los Alamitos, California, USA, May 1995. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 9 </pages>
Reference-contexts: Suitable system level mechanisms are needed to detect the appropriate failure conditions under which an agent is to be resurrected from its checkpointed state. Another option is to create rear-guard agents <ref> [12] </ref>. When an agent migrates, it leaves behind a rear-guard agent which is responsible for monitoring it, and recovering from failures.
Reference: [13] <author> Henry Lieberman. </author> <title> Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Sys--tems. </title> <booktitle> In Proceedings of ACM OOPSLA-86 Conference, </booktitle> <pages> pages 214-223, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: The latter point is somewhat tangential to the focus of the paper. The same effect could also be obtained using mechanisms such as delegation <ref> [13] </ref> or proxy. The client object can be allowed to specify whether it prefers co-residency or co-location with the server. When it visits an untrusted server for example, it may prefer not to share its address space, at a small performance penalty.
Reference: [14] <author> OMG. </author> <title> The Common Object Request Broker: Architecture and Specification . John-Wiley & Sons, 1992. OMG Document No. </title> <publisher> 91.12.1. </publisher>
Reference-contexts: The primary focus of this paper is on the system-architecture level issues and linguistic mechanisms for agent-based computing. We believe that the advances in distributed object technology over the past 10 years, such as the CORBA model <ref> [14] </ref>, provide an adequate system architecture basis for agent-based applications. <p> We elaborate on this point later in the paper. Each site (node) provides a service for locating objects in the system and transporting request and response messages between client and server. This corresponds to the object request broker (ORB) in OMG/CORBA framework <ref> [14] </ref> or the Nexus kernel in the distributed object management system that we built in the past. An object at a node is managed by an object adaptor in the CORBA model, which provides object management services together with an API for the objects.
Reference: [15] <author> E. Otzioni, H.M. Levy, R.B. Segal, and C.A. Thekkath. </author> <title> The Softbot Apporach to OS Interfaces. </title> <journal> IEEE Software, </journal> <pages> pages 42-51, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Inspired by intelligent machines and robots, the concept of software agents was introduced in the form of softbots <ref> [15] </ref>, which are mobile programs that can perform intelligent decision-making tasks in an information network on behalf of their owners.
Reference: [16] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: This could be implemented using public-key cryptography [6]. The agent carries a unique owner identifier along with the owner's digital signature <ref> [16] </ref>. Whenever an agent enters a host, its digital signature must be verified and for this purpose, the host needs to be able to access the public key corresponding to the specified owner. Easily accessible public key repositories are thus necessary.
Reference: [17] <author> Marc Rozier, Vadim Abrossimov, Francois Armand, Ivan Boule, Michel Gien, Marc Guillemont, Frederic Herrmann, Claude Kaiser, Sylvain Langlois, Pierre Leonard, and Will Neuhauser. </author> <title> CHORUS Distributed Operating System. </title> <journal> Computing Systems, </journal> <volume> 1(4) </volume> <pages> 305-370, </pages> <month> December </month> <year> 1988. </year>
Reference: [18] <author> Anand Tripathi. </author> <title> An Overview of the Nexus Distributed Operating System Design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6), </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: We believe that the advances in distributed object technology over the past 10 years, such as the CORBA model [14], provide an adequate system architecture basis for agent-based applications. This viewpoint is strengthened by our experience in building the Nexus distributed object management system <ref> [18] </ref> and its generic object management facility [19]. 2 Distributed Object Management Model An agent-based application system can be built as a collection of distributed objects. The object management architecture is assumed to support location-transparent invocation of operations on objects in the network.
Reference: [19] <author> Anand Tripathi, Richard Wolfe, and Prasad Koneru. </author> <title> Persistent Object Management in the Nexus Distributed System. </title> <booktitle> In IEEE International Workshop on Object-Orientation in Operating Systems, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: This viewpoint is strengthened by our experience in building the Nexus distributed object management system [18] and its generic object management facility <ref> [19] </ref>. 2 Distributed Object Management Model An agent-based application system can be built as a collection of distributed objects. The object management architecture is assumed to support location-transparent invocation of operations on objects in the network.
Reference: [20] <author> J. Vittal. </author> <title> Active message processing: Messages as messengers. Computer Message System, </title> <year> 1981. </year>
Reference-contexts: These systems are indicators of the emerging trend in transportable programs. Chorus [10][17] was one of the first systems to introduce in its initial versions a mechanism for mobile programs in the form of active messages <ref> [20] </ref> that could move from one object to another under program control, suspend their state in one object, and resume from the same state in a different object after migration. Later versions of that system did not support this feature.
Reference: [21] <author> James E. White. </author> <title> Telescript Technology: </title> <booktitle> Mobile Agents, </booktitle> <year> 1996. </year> <note> Available on the WWW at http://www.genmagic.com/Telescript/. 10 </note>
Reference-contexts: This is reflected in the development of programming languages such as Telescript <ref> [21] </ref> and Java [1], which support program mobility. These systems are indicators of the emerging trend in transportable programs. <p> More recently, a number of system architectures and languages have been developed supporting the agent-based computing paradigm. General Magic's Telescript language <ref> [21] </ref>, Tacoma [11], Agent Tcl [8] represent some of these efforts. Languages such as Telescript, Java and Obliq [3] support program mobility, which is necessary for building agent-based distributed computing applications. <p> We shall refer to it as the Object Adaptor and Manager (OAM). For protection or performance reasons this may be implemented as a hierarchy or collection of system level processes. This entity with certain specialized features conceptually corresponds to an engine in Telescript <ref> [21] </ref> or Agent Meeting Place [5]. In the Nexus architecture the corresponding entity is called a class manager. In this paper we shall either use the term engine or OAM to refer to this component of the 2 system architecture.
References-found: 21

