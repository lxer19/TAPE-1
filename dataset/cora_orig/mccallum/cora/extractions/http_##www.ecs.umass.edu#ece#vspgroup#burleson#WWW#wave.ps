URL: http://www.ecs.umass.edu/ece/vspgroup/burleson/WWW/wave.ps
Refering-URL: http://www.ecs.umass.edu/ece/vspgroup/burleson.html
Root-URL: 
Title: Wave-pipelining: A tutorial and survey of recent research  
Author: Wayne Burleson, Maciej Ciesielski Fabian Klass Wentai Liu 
Address: Amherst,  
Affiliation: University of Massachusetts at  SUN Microsystems Stanford University,  North Carolina State University  
Abstract: Wave-pipelining is a method of high-performance circuit design which implements pipelin-ing in logic without the use of intermediate latches or registers. This paper presents a tutorial of the principles of wave-pipelining and a survey of recent wave-pipelined VLSI chips and CAD tools for the synthesis and analysis of wave-pipelined circuits. Wave-pipelining has recently drawn considerable interest from both the academic and industrial communities. 2 The combination of high-performance IC technologies, pipelined architectures, and sophisticated CAD tools has converted wave-pipelining from a theoretical oddity into a realistic, although challenging, VLSI design method. In its crudest form, wave-pipelining is plagued with problems due to process variation, data-dependent delays, and two-sided clock period constraints. However, like clock skew in high-speed synchronous systems, these problems can be mitigated by innovative circuit structures, CAD tools and systematic design. The result is a higher performance circuit in exchange for an often acceptable increase in area. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Anderson, J. Earle, R. Goldschmidt, and D. </author> <title> Powers. The IBM system/360 model 91 floating point execution unit. </title> <journal> IBM Journal of Research and Development, </journal> <pages> pages 34-53, </pages> <month> January </month> <year> 1967. </year>
Reference-contexts: The theory presented in section 2, and in particular equations 4 and 10, clearly demonstrate that the valid clock period is determined by a single interval, <ref> [ D MAX N ; 1] </ref>, only when D MAX = D MIN , i.e., when all paths in the circuit are perfectly balanced (Assuming no constructive clock skew). <p> Prior to 1990, many designs of wave-pipelining systems have been done with bipolar technology, including a floating point unit <ref> [1] </ref>, an experimental computer [36], and a population counter [45]. In general, CMOS has been viewed unfavorably for wave-pipelining systems due to the data-dependent delay from serial and parallel transistor connections in static CMOS gates. However, recently several university research groups have shown the feasibility of CMOS implementations of wave-pipelining.
Reference: [2] <author> P. Bannon and A. </author> <month> Jan. </month> <title> Today's microprocessor aim for flexibility. </title> <booktitle> EE Times, </booktitle> <pages> pages 68-70, </pages> <year> 1994. </year>
Reference-contexts: Since S/DRAM already use a variety of exotic timing methods, wave-pipelining is an efficient way to reduce access/cycle time without additional registers. Along with the reduced access time, wave-pipelining provides the additional advantages of reduced latency and power dissipation. Several successful RAM designs using wave-pipelining have been reported <ref> [4, 26, 2, 32, 47, 16] </ref>. It is fair to say that the design of S/DRAM using wave-pipelining has become a trend in industry. Chappel et. al. designed a "bubble pipelined" RAM chip with 2ns access time. Wave-pipelining is used in the cache RAM access in the HP Snake workstation. <p> Hyundai has designed a 150MHz, 8-banks, 256Mb synchronous DRAM. All of these designs sustain from three to four waves. Table 3: Wave-pipelined Designs by Industry Campany Design DEC L3 Cache Memory for AXP 21164 <ref> [2] </ref> GTE SONET-OC12 switch [5]. (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS
Reference: [3] <author> W. Burleson, E. Tan, C. Lee. </author> <title> A 150 Mhz Wave-pipelined Adaptive Digital Filter in 2 CMOS. </title> <booktitle> VLSI Signal Processing Workshop, </booktitle> <year> 1994. </year>
Reference: [4] <author> T. I. Chappell, B. A. Chappell, S. E. Schuster, J. W. Allan, S. P. Klepner, R. V. Joshi, and R. L. Franch. </author> <title> A 2-ns cycle, 3.8 ns access 512-kb CMOS ECL SRAM with a fully pipelined architecture. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <pages> pages 1577-1585, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Since S/DRAM already use a variety of exotic timing methods, wave-pipelining is an efficient way to reduce access/cycle time without additional registers. Along with the reduced access time, wave-pipelining provides the additional advantages of reduced latency and power dissipation. Several successful RAM designs using wave-pipelining have been reported <ref> [4, 26, 2, 32, 47, 16] </ref>. It is fair to say that the design of S/DRAM using wave-pipelining has become a trend in industry. Chappel et. al. designed a "bubble pipelined" RAM chip with 2ns access time. Wave-pipelining is used in the cache RAM access in the HP Snake workstation. <p> Table 3: Wave-pipelined Designs by Industry Campany Design DEC L3 Cache Memory for AXP 21164 [2] GTE SONET-OC12 switch [5]. (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip <ref> [4] </ref> (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns) [16, 43] Hyundai DRAM (CMOS - 150MHz, 256Mb) [47] 23 7 Open Problems Despite recent research in wave-pipelining and other aggressive timing approaches, a
Reference: [5] <author> M. Cooperman and P. Andrade. </author> <title> CMOS gigabit-per-second switching. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <month> June </month> <year> 1993. </year>
Reference-contexts: Hyundai has designed a 150MHz, 8-banks, 256Mb synchronous DRAM. All of these designs sustain from three to four waves. Table 3: Wave-pipelined Designs by Industry Campany Design DEC L3 Cache Memory for AXP 21164 [2] GTE SONET-OC12 switch <ref> [5] </ref>. (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns)
Reference: [6] <author> L. W. Cotten. </author> <title> Maximum-rate pipeline systems. </title> <booktitle> In 1969 AFIPS Proc. Spring Joint Computer Conference, </booktitle> <pages> pages 581-586, </pages> <year> 1969. </year>
Reference-contexts: However it also questions some of the fundamental tenets of simplified VLSI design as popularized in the early '80's. The idea of wave-pipelining was originally introduced by Cotten <ref> [6] </ref>, who named it maximum rate pipelining. Cotten observed that the rate at which logic can propagate through the circuit depends not on the longest path delay but on the difference between the longest and the shortest path delays. <p> the two waveforms, scaled accordingly to account for different clock period, match closely. (a) Operating at 20ns clock cycle (b) Operating at 6ns clock cycle 20 6 Real Designs with Wave-pipelining Many attempts have been made at using wave-pipelining in digital systems since Cotten proposed the wavepipelined technique in 1969 <ref> [6] </ref>. Prior to 1990, many designs of wave-pipelining systems have been done with bipolar technology, including a floating point unit [1], an experimental computer [36], and a population counter [45].
Reference: [7] <author> W. M. Jr. Coughran, E. Grosse, and D. J Rose. CAzM: </author> <title> A Circuit Analyzer with Macromodeling. </title> <journal> IEEE Transactions on Electron Devices, </journal> <volume> ED-30(9):1207-1213, </volume> <month> April </month> <year> 1983. </year> <month> 25 </month>
Reference-contexts: The circuit was synthesized to allow for 3 waves, and TimberWolf [38] was used to generate the physical layout. The simulated value of the minimum clock period of the circuit is 2.78ns with latency 7.37ns. CAzM <ref> [7] </ref> was used for the circuit simulation. Table 1 compares the result of CAzM simulation for the synthesized circuit and the circuit extracted from the final layout.
Reference: [8] <author> R. K. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> MIS: A multiple-level logic optimization system. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> CAD-6(6):1062-1081, </volume> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: The subsequent decomposition transformation decomposes this node in such a way as to create a more balanced structure. The decomposition of the collapsed nodes is accomplished using the kernel division technique employed in MIS <ref> [8] </ref>. The logic expression of node n slated for kernel-based decomposition can be represented as n = p q + r; divisor p is a multiple-cube expression called the kernel, quotient q is a single cube (co-kernel), and r is the remainder.
Reference: [9] <author> B. Ekroot. </author> <title> Optimization of Pipelined Processors by Insertion of Combinational Logic Delay. </title> <type> Ph.D. Thesis, </type> <institution> Stanford University, </institution> <year> 1987. </year>
Reference-contexts: In an attempt to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically <ref> [37, 9, 10, 18, 12, 13, 27] </ref>, 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. <p> These signal separation constraints can be informally expressed as follows: The next earliest possible wave should not arrive at a node until the latest possible wave has propagated through. The signal separation constraints, also called internal node constraints, were derived, in slightly different forms, by Ekroot <ref> [9] </ref>, Wong et al. [46], Joy et al. [18], and Gray et al. [13]. Let x be an internal node (output of a gate) of the logic network, a point on the logic depth axis in Fig. 2. <p> Tables 2 and 3 list the design activities in both academia and industry. 6.1 Wave-pipelined Designs by Academia The main hurdle for designing a wave-pipelined system is the two-sided constraints on the timing. The problem becomes even more complicated if a system has multiple wave-pipelines with feedback <ref> [9, 13] </ref>. Thus, designers must address the various sources of delay imbalance in the design at the gate level, the circuit level, and at the detailed layout level. The delay imbalance must also be minimized for environmental variations such as voltage and temperature fluctuations.
Reference: [10] <author> J. Fishburn. </author> <title> Clock Skew Optimization. </title> <journal> In IEEE Trans. on Computers, </journal> <year> 1990. </year>
Reference-contexts: In an attempt to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically <ref> [37, 9, 10, 18, 12, 13, 27] </ref>, 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. <p> The LP approach minimizes T CK subject to both register constraints (2, 3) and the internal node constraints (6) for all nodes in the circuit, if needed. This approach, taken by Fishburn <ref> [10] </ref> and Joy et al. [18], seems to suggest that the circuit will operate correctly at any value of clock cycle above the computed minimum, that is, that the region of valid clock period is only bounded below. It has been shown, however, that this is not necessarily the case. <p> Finally, the results do not take clock skew into account. 13 A number of timing optimization tools were developed to minimize clock period by adjust-ing constructive clock skews. These techniques are based on the LP approach proposed by Fishburn <ref> [10] </ref> and Joy et al. [17], mentioned in Section 2.4. Joy et al. [17] developed an optimization technique and a layout synthesis tool for static CMOS in a standard cell layout environment.
Reference: [11] <author> D. Ghosh and S. Nandy. </author> <title> Design and realization of high-performance wave-pipelined 8x8 b multiplier in CMOS technology. </title> <journal> IEEE Trans. on VLSI, </journal> <pages> pages 37-48, </pages> <year> 1995. </year>
Reference-contexts: [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) [34] TI-India simulated 8-bit multiplier (CMOS) <ref> [11] </ref> U. of Colorado designed Optical computer with wave-pipelining [35] U. of Mass. fabricated/tested multiplier and parity generator (2 m CMOS) [28] 300MHz, 4Mb wave-pipelined CMOS SRAM. Moreover Hitachi proposed a concept of dual sensing latch circuit in order to achieve a shorter cycle time at 2.6ns.
Reference: [12] <author> C.T. Gray, T. Hughes, S. Arora, W. Liu, and R. Cavin III. </author> <title> Theoretical and Practical Issues in CMOS Wave Pipelining. </title> <booktitle> In Proc. of VLSI'91, </booktitle> <year> 1991. </year>
Reference-contexts: In an attempt to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically <ref> [37, 9, 10, 18, 12, 13, 27] </ref>, 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23].
Reference: [13] <author> C.T. Gray, W. Liu, and R. Cavin III. </author> <title> Timing Constraints for Wave-Pipelined Systems In IEEE Transactions on Computer-Aided Design, </title> <journal> Vol.13, </journal> <volume> No.8, </volume> <pages> pp. 987-1004, </pages> <month> Aug., </month> <year> 1994 </year>
Reference-contexts: In an attempt to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically <ref> [37, 9, 10, 18, 12, 13, 27] </ref>, 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. <p> For simplicity and without much loss of generality, we shall only consider edge-triggered registers. Timing constraints for other types of clocking, including clocking with transparent latches, can also be derived. 2.2 Circuit and Timing Models The phenomenon of wave-pipelining can be illustrated using the timing model presented in <ref> [13] </ref>, shown in Fig. 1. A synchronous logic block is clocked by a set of input and output registers, with the constructive clock skew equal to , Fig. 1 (a). Associated with each block is a pair of minimum and maximum propagation delays, D MIN ; D MAX . <p> For a simple logic network in Fig. 1 (b) the delay contours are shown in Fig. 1 (c). The exact contours depend on the logic and the delay characteristics of its elements. Following <ref> [13] </ref>, we shall simplify the delay contours by linearizing the delays along the logic block to obtain delay "cones", as shown in Fig. 1 (d). 4 Fig. 2 depicts a combined temporal and spacial diagram for a wave-pipelined circuit. <p> The signal separation constraints, also called internal node constraints, were derived, in slightly different forms, by Ekroot [9], Wong et al. [46], Joy et al. [18], and Gray et al. <ref> [13] </ref>. Let x be an internal node (output of a gate) of the logic network, a point on the logic depth axis in Fig. 2. <p> Tables 2 and 3 list the design activities in both academia and industry. 6.1 Wave-pipelined Designs by Academia The main hurdle for designing a wave-pipelined system is the two-sided constraints on the timing. The problem becomes even more complicated if a system has multiple wave-pipelines with feedback <ref> [9, 13] </ref>. Thus, designers must address the various sources of delay imbalance in the design at the gate level, the circuit level, and at the detailed layout level. The delay imbalance must also be minimized for environmental variations such as voltage and temperature fluctuations.
Reference: [14] <author> C. Gray, W. Liu, W. van Noije, T. Hughes, and R. Cavin. </author> <title> A sampling technique and its CMOS implementation with 1 Gb/s bandwidth and 25 ps resolution. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <pages> pages 340-349, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: 2: Wave-pipelined Designs by Academia Institution Status Design Chiao-Tung U. simulated CMOS wave-pipelined multiplier [19] Delft U. fabricated/tested 16x16 multiplier (CMOS - 3 waves) [25] NC State U. fabricated/tested 16-bit adder (2 m CMOS and 9 waves) [29], NC State U. fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) <ref> [14] </ref> NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3
Reference: [15] <author> S. Gupta. </author> <title> Private Communication. </title> <month> Nov </month> <year> 1994. </year>
Reference: [16] <author> K. Ishibashi et. al. </author> <title> A 300mhz 4-mb wave-pipelined CMOS SRAM using a multi-phase PLL. </title> <booktitle> In ISSCC95, </booktitle> <pages> pages 308 - 309, </pages> <year> 1995. </year>
Reference-contexts: Since S/DRAM already use a variety of exotic timing methods, wave-pipelining is an efficient way to reduce access/cycle time without additional registers. Along with the reduced access time, wave-pipelining provides the additional advantages of reduced latency and power dissipation. Several successful RAM designs using wave-pipelining have been reported <ref> [4, 26, 2, 32, 47, 16] </ref>. It is fair to say that the design of S/DRAM using wave-pipelining has become a trend in industry. Chappel et. al. designed a "bubble pipelined" RAM chip with 2ns access time. Wave-pipelining is used in the cache RAM access in the HP Snake workstation. <p> (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns) <ref> [16, 43] </ref> Hyundai DRAM (CMOS - 150MHz, 256Mb) [47] 23 7 Open Problems Despite recent research in wave-pipelining and other aggressive timing approaches, a number of open problems still exist, in particular related to manufacturability.
Reference: [17] <author> D.A. Joy and M.J. Ciesielski. </author> <title> Placement for Clock Period Minimization with Multiple Wave Propagation. </title> <booktitle> In Proc. 28th Design Automation COnference, </booktitle> <year> 1991. </year>
Reference-contexts: to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits <ref> [44, 46, 17, 21, 22, 39] </ref>, 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. A comparative study of existing methods in wave-pipelining can be found in [24]. <p> Finally, the results do not take clock skew into account. 13 A number of timing optimization tools were developed to minimize clock period by adjust-ing constructive clock skews. These techniques are based on the LP approach proposed by Fishburn [10] and Joy et al. <ref> [17] </ref>, mentioned in Section 2.4. Joy et al. [17] developed an optimization technique and a layout synthesis tool for static CMOS in a standard cell layout environment. <p> These techniques are based on the LP approach proposed by Fishburn [10] and Joy et al. <ref> [17] </ref>, mentioned in Section 2.4. Joy et al. [17] developed an optimization technique and a layout synthesis tool for static CMOS in a standard cell layout environment. This technique uses timing constraints and the optimum clock skew value to guide the placement of cells and clock distribution trees, including the insertion of delay buffers along clock lines.
Reference: [18] <author> D.A. Joy and M.J. Ciesielski. </author> <title> Clock Period Minimization with Wave Pipelin-ing In IEEE Transactions on Computer-Aided Design, </title> <month> April, </month> <year> 1993. </year>
Reference-contexts: In an attempt to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically <ref> [37, 9, 10, 18, 12, 13, 27] </ref>, 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. <p> The signal separation constraints, also called internal node constraints, were derived, in slightly different forms, by Ekroot [9], Wong et al. [46], Joy et al. <ref> [18] </ref>, and Gray et al. [13]. Let x be an internal node (output of a gate) of the logic network, a point on the logic depth axis in Fig. 2. <p> The LP approach minimizes T CK subject to both register constraints (2, 3) and the internal node constraints (6) for all nodes in the circuit, if needed. This approach, taken by Fishburn [10] and Joy et al. <ref> [18] </ref>, seems to suggest that the circuit will operate correctly at any value of clock cycle above the computed minimum, that is, that the region of valid clock period is only bounded below. It has been shown, however, that this is not necessarily the case.
Reference: [19] <author> S. T. Ju and C. W. Jen. </author> <title> A high speed multiplier design using wave pipelining technique. </title> <booktitle> In IEEE APCCAS, </booktitle> <pages> pages 502-506, </pages> <address> Australia, </address> <year> 1992. </year>
Reference-contexts: Wave-pipelining is used in the cache RAM access in the HP Snake workstation. NEC has designed a 220MHz, 16Mb BiCMOS wave-pipelined SRAM. Hitachi has designed a 22 Table 2: Wave-pipelined Designs by Academia Institution Status Design Chiao-Tung U. simulated CMOS wave-pipelined multiplier <ref> [19] </ref> Delft U. fabricated/tested 16x16 multiplier (CMOS - 3 waves) [25] NC State U. fabricated/tested 16-bit adder (2 m CMOS and 9 waves) [29], NC State U. fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) [14] NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State
Reference: [20] <author> J. Kang, W. Liu, and R. Cavin. </author> <title> A monolithic 625mb/s data recovery circuit in 1.2 m CMOS. </title> <booktitle> In Custom Integrated Circuit Conference, </booktitle> <pages> pages 625-628, </pages> <year> 1993. </year>
Reference-contexts: 3 waves) [25] NC State U. fabricated/tested 16-bit adder (2 m CMOS and 9 waves) [29], NC State U. fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) [14] NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State U. fabricated/tested data recovery (1.2 m CMOS) <ref> [20] </ref> NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS
Reference: [21] <author> T. S. Kim, W. Burleson, and M. Ciesielski. </author> <title> Logic Restructuring for Wave-pipelined Circuits. </title> <booktitle> In Proceedings of the International Workshop on Logic Synthesis, </booktitle> <year> 1993. </year>
Reference-contexts: to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits <ref> [44, 46, 17, 21, 22, 39] </ref>, 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. A comparative study of existing methods in wave-pipelining can be found in [24]. <p> The algorithm is implemented in the SIS logic synthesis environment [40]. The remainder of this section briefly describes the logic balancing method for CMOS circuits according to this scheme. The reader is referred to <ref> [21, 22] </ref> for details. 4.2.1 Logic balancing The goal of logic balancing is to equalize signal arrival times at the inputs of each gate of the circuit. It is accomplished by restructuring the logic and balancing the logic expression tree representing a given function. <p> This step is 15 then followed by a decomposition of the remaining collapsed nodes into two-input gates to achieve further balancing and facilitate a reliable delay computation. Fig. 4 (c) and (d) shows the result of such a decomposition. The details of the procedure can be found in <ref> [21] </ref>. 4.2.2 Delay buffer insertion Once the circuit is restructured, additional balancing can be achieved by means of delay buffer insertion. Delay buffers are inserted in appropriate places so as to further minimize the difference in signal arrival times at the gate inputs.
Reference: [22] <author> T-S. Kim, W. Burleson, M. Ciesielski, </author> <title> "Delay buffer insertion for Wave-pipelined Circuits," </title> <booktitle> Notes of IFIP International Workshop on Logic and Architecture Synthesis, </booktitle> <address> Grenoble, France, </address> <month> Dec. </month> <year> 1993. </year> <month> 26 </month>
Reference-contexts: to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits <ref> [44, 46, 17, 21, 22, 39] </ref>, 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. A comparative study of existing methods in wave-pipelining can be found in [24]. <p> In the case of CMOS circuits, the fanout load significantly affects the delay and its impact on timing cannot be ignored. For this reason, Kim et al. <ref> [22] </ref> developed a delay buffer insertion method using chains of buffers, thus eliminating the need for merging common buffers. The problem of delay buffer insertion on a multiple fanout net is simplified by assuming that only one size of delay buffer is to be used. <p> The algorithm is implemented in the SIS logic synthesis environment [40]. The remainder of this section briefly describes the logic balancing method for CMOS circuits according to this scheme. The reader is referred to <ref> [21, 22] </ref> for details. 4.2.1 Logic balancing The goal of logic balancing is to equalize signal arrival times at the inputs of each gate of the circuit. It is accomplished by restructuring the logic and balancing the logic expression tree representing a given function. <p> Notice that the arrival time at the end of the chain (8.0) is independent of how the inputs to G 2 and G 3 are connected to the chain. The details of the procedure, including the proper ordering of the gates for buffer chain construction, can be found in <ref> [22] </ref>. 5 Synthesis Example This section illustrates the use of CAD tools for wave-pipelining with two examples. The first example is a simple (4,2) compressor circuit (counter), whose synthesized design is compared with a manual design.
Reference: [23] <author> F. Klass, M.J. Flynn, and A.J. van de Goor. </author> <title> Pushing the Limits of CMOS Technology: A Wave-Pipelined Multiplier Hot Chips, </title> <year> 1992. </year>
Reference-contexts: models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips <ref> [28, 45, 23] </ref>. A comparative study of existing methods in wave-pipelining can be found in [24]. Wave-pipelining has suffered from a number of myths and the problems which need to be solved in a wave-pipelined design are not widely understood.
Reference: [24] <author> F. Klass and M.J. Flynn. </author> <title> Comparative Studies of Pipelined Circuits. </title> <type> Technical Report CSL-TR-93-579, </type> <institution> Stanford University, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: A comparative study of existing methods in wave-pipelining can be found in <ref> [24] </ref>. Wave-pipelining has suffered from a number of myths and the problems which need to be solved in a wave-pipelined design are not widely understood. This paper presents a tutorial with examples to demonstrate the type of design problems which arise in wave-pipelining.
Reference: [25] <author> F. Klass, M. Flynn, and A. van de Goor. </author> <title> Fast multiplication in vlsi using wave pipelining techniques. </title> <journal> Journal of VLSI Signal Processing, </journal> <volume> 7 </volume> <pages> 233-248, </pages> <year> 1994. </year>
Reference-contexts: The second example, with a much more complex design, shows some of the limitations of current algorithms for path balancing at the logic and circuit level. 17 5.1 (4,2) Compressor Fig. 6 (a) shows a manual design of a (4,2) compressor circuit, used as a basic multiplier cell in <ref> [25] </ref>. Fig.6 (b) is a synthesized version of the same function, obtained with logic balancing tools described in Section 4.2. A fair comparison of the two circuits is difficult to make since they were designed with different goals, they used different processing technology and performance was measured differently. <p> Klass et al. at Stanford University have designed and tested a 16x16 CMOS wave-pipelined multiplier. The multiplier is implemented by static gate with 1.0 m CMOS technology. It achieves 3.7 waves at the clock rates between 330 and 350 MHz despite the substantial effects of data-dependent delay <ref> [25] </ref>. Circuit level tools are also important for this design. Using 2 m CMOS domino gates, Lien and Burleson at the University of Massachusetts, have designed a 4x4 Wallace tree multiplier that achieves two waves in the multiplier circuit [28]. <p> NEC has designed a 220MHz, 16Mb BiCMOS wave-pipelined SRAM. Hitachi has designed a 22 Table 2: Wave-pipelined Designs by Academia Institution Status Design Chiao-Tung U. simulated CMOS wave-pipelined multiplier [19] Delft U. fabricated/tested 16x16 multiplier (CMOS - 3 waves) <ref> [25] </ref> NC State U. fabricated/tested 16-bit adder (2 m CMOS and 9 waves) [29], NC State U. fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) [14] NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State <p> State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) <ref> [25] </ref> Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) [34] TI-India simulated 8-bit multiplier (CMOS) [11] U. of Colorado designed Optical computer with wave-pipelining [35] U. of Mass. fabricated/tested multiplier and parity generator (2 m CMOS) [28] 300MHz, 4Mb wave-pipelined CMOS SRAM.
Reference: [26] <author> Charlie Kohlhardt. </author> <title> PA-RISC processor for "Snake" workstations. In Hot Chips Symposium, </title> <booktitle> pages 1.20-1.31, </booktitle> <year> 1991. </year>
Reference-contexts: Since S/DRAM already use a variety of exotic timing methods, wave-pipelining is an efficient way to reduce access/cycle time without additional registers. Along with the reduced access time, wave-pipelining provides the additional advantages of reduced latency and power dissipation. Several successful RAM designs using wave-pipelining have been reported <ref> [4, 26, 2, 32, 47, 16] </ref>. It is fair to say that the design of S/DRAM using wave-pipelining has become a trend in industry. Chappel et. al. designed a "bubble pipelined" RAM chip with 2ns access time. Wave-pipelining is used in the cache RAM access in the HP Snake workstation. <p> All of these designs sustain from three to four waves. Table 3: Wave-pipelined Designs by Industry Campany Design DEC L3 Cache Memory for AXP 21164 [2] GTE SONET-OC12 switch [5]. (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation <ref> [26] </ref> (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns) [16, 43] Hyundai DRAM (CMOS - 150MHz, 256Mb) [47] 23 7 Open Problems
Reference: [27] <author> W. K.C. Lam, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Valid Clocking in Wavepipelined Circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <year> 1992. </year>
Reference-contexts: In an attempt to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically <ref> [37, 9, 10, 18, 12, 13, 27] </ref>, 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. <p> It has been shown, however, that this is not necessarily the case. In particular, it has been independently demonstrated by Lam et. al, <ref> [27] </ref> and by Gray at al.[13] that the feasibility region of the valid clock period T CK is not continuous but is composed of a finite set of disjoint regions. <p> An alternative approach to clocking analysis of wave-pipelined systems was proposed by Lam et al. <ref> [27] </ref>, whereby the internal node constraints are taken into account implicitly and are represented in the same fashion as the register constraints. This approach is based on a Timed Boolean Function (TBF) representation of the circuit. <p> Now the condition for valid computation that satisfies internal node constraints can be expressed as follows <ref> [27] </ref>: if and only if all variables x i in the support of y j , for all j, have the same time argument [k N ], i.e., if f (kT CK ) = f [k N ]. <p> In this case the latency of the circuit, measured in the number of clock cycles is the same as the degree of wave-pipelining, N . Combining the above constraint with equation 10, results in the following theorem for valid clock period <ref> [27] </ref>: The clock period T CK in a circuit is valid if it satisfies equation 10 for some positive integer N , and the computed function at t = kT CK is f [k N ]. 9 In summary, the TBF approach provides a convenient way to express the condition for <p> The internal node constraints are simply accounted for by adding the requirement that all variables in the support of the logic function have the same discrete argument [k N ]. Lam et. al. <ref> [27] </ref> describe a procedure to compute all valid clock intervals for a circuit with given delay parameters and tolerances.
Reference: [28] <author> W. Lien and W. Burleson. </author> <title> Wave-domino logic: </title> <journal> Theory and applications. IEEE Transactions on Circuits and Systems - II Analog and Digital Signal Processing, </journal> <volume> 42(2) </volume> <pages> 78-91, </pages> <year> 1995. </year>
Reference-contexts: recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining <ref> [28] </ref>, and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. A comparative study of existing methods in wave-pipelining can be found in [24]. <p> models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips <ref> [28, 45, 23] </ref>. A comparative study of existing methods in wave-pipelining can be found in [24]. Wave-pipelining has suffered from a number of myths and the problems which need to be solved in a wave-pipelined design are not widely understood. <p> Circuit level tools are also important for this design. Using 2 m CMOS domino gates, Lien and Burleson at the University of Massachusetts, have designed a 4x4 Wallace tree multiplier that achieves two waves in the multiplier circuit <ref> [28] </ref>. Nowka and Flynn of Stanford University have designed a CMOS vector unit which includes a vector register file, an adder, and a multiplier [34]. The vector unit is implemented with 1 m CMOS technology and simulated at 300 MHz. <p> Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) [34] TI-India simulated 8-bit multiplier (CMOS) [11] U. of Colorado designed Optical computer with wave-pipelining [35] U. of Mass. fabricated/tested multiplier and parity generator (2 m CMOS) <ref> [28] </ref> 300MHz, 4Mb wave-pipelined CMOS SRAM. Moreover Hitachi proposed a concept of dual sensing latch circuit in order to achieve a shorter cycle time at 2.6ns. Hyundai has designed a 150MHz, 8-banks, 256Mb synchronous DRAM. All of these designs sustain from three to four waves.
Reference: [29] <author> W. Liu, C. Gray, D. Fan, T. Hughes, W. Farlow, and R. Cavin. </author> <title> A 250-mhz wave pipelined adder in 2-m CMOS. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <pages> pages 1117-1128, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: To overcome this problem, the use of biased-CMOS gates has been proposed, also known as pseudo-NMOS gates, where parallel devices are replaced by a single device whose gate is connected to a bias voltage <ref> [29] </ref>. Fig. 3 (b) shows a biased-CMOS 2-input NAND gate. <p> The counter achieves 2.5 waves and is the first bipolar LSI chip that uses wave-pipelining. Liu et al. at North Carolina State University have reported an architecture, circuit, layout, and testing techniques for achieving high speedup in a CMOS parallel adder using wave-pipelining <ref> [29] </ref>. The adder achieves nine waves at 250 MHz and is implemented by biased-CMOS gates with 2 m CMOS technology. The design depends very much upon the CAD tools at circuit level in order to carefully achieve delay balance. <p> Hitachi has designed a 22 Table 2: Wave-pipelined Designs by Academia Institution Status Design Chiao-Tung U. simulated CMOS wave-pipelined multiplier [19] Delft U. fabricated/tested 16x16 multiplier (CMOS - 3 waves) [25] NC State U. fabricated/tested 16-bit adder (2 m CMOS and 9 waves) <ref> [29] </ref>, NC State U. fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) [14] NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor
Reference: [30] <author> B. Lockyear and C. Ebeling. </author> <title> The practical application of retiming to the design of high-performance systems. </title> <booktitle> In ICCAD93, </booktitle> <pages> pages 288 - 295, </pages> <year> 1993. </year>
Reference: [31] <author> G. Moyer, M. Clements, W. Liu, T. Schaffer, and R. Cavin. </author> <title> A technique for high-speed, fine-resolution pattern generation and its CMOS implementation. </title> <booktitle> In 16th Conference on Advanced Research in VLSI, </booktitle> <pages> pages 131-145, </pages> <year> 1995. </year>
Reference-contexts: m CMOS and 9 waves) [29], NC State U. fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) [14] NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) <ref> [31] </ref> SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) [34] TI-India simulated 8-bit multiplier (CMOS) [11]
Reference: [32] <author> K. Nakamura, S. Kuhara, and et. al. </author> <title> A 220-mhz pipelined 16-mb BiCMOS SRAM with PLL proportional self-timing generator. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <pages> pages 1317-1322, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Since S/DRAM already use a variety of exotic timing methods, wave-pipelining is an efficient way to reduce access/cycle time without additional registers. Along with the reduced access time, wave-pipelining provides the additional advantages of reduced latency and power dissipation. Several successful RAM designs using wave-pipelining have been reported <ref> [4, 26, 2, 32, 47, 16] </ref>. It is fair to say that the design of S/DRAM using wave-pipelining has become a trend in industry. Chappel et. al. designed a "bubble pipelined" RAM chip with 2ns access time. Wave-pipelining is used in the cache RAM access in the HP Snake workstation. <p> DEC L3 Cache Memory for AXP 21164 [2] GTE SONET-OC12 switch [5]. (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip <ref> [32] </ref> (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns) [16, 43] Hyundai DRAM (CMOS - 150MHz, 256Mb) [47] 23 7 Open Problems Despite recent research in wave-pipelining and other aggressive timing approaches, a number of open problems still exist, in particular related to manufacturability.
Reference: [33] <author> V. Nguyen, W. Liu, C. T. Gray, and R. K. Cavin. </author> <title> A CMOS multiplier using wave pipelining. </title> <booktitle> In Custom Integrated Circuits Conference, pages 12.3.1-12.3.4, </booktitle> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: wave-pipelined multiplier [19] Delft U. fabricated/tested 16x16 multiplier (CMOS - 3 waves) [25] NC State U. fabricated/tested 16-bit adder (2 m CMOS and 9 waves) [29], NC State U. fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) [14] NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) <ref> [33] </ref> NC State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5
Reference: [34] <author> K. Nowka and M. Flynn. </author> <title> System design using wave-pipelining: A CMOS VLSI vector unit. </title> <booktitle> In ISCAS95, </booktitle> <pages> pages 2301 - 2304, </pages> <year> 1995. </year>
Reference-contexts: Nowka and Flynn of Stanford University have designed a CMOS vector unit which includes a vector register file, an adder, and a multiplier <ref> [34] </ref>. The vector unit is implemented with 1 m CMOS technology and simulated at 300 MHz. <p> fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) <ref> [34] </ref> TI-India simulated 8-bit multiplier (CMOS) [11] U. of Colorado designed Optical computer with wave-pipelining [35] U. of Mass. fabricated/tested multiplier and parity generator (2 m CMOS) [28] 300MHz, 4Mb wave-pipelined CMOS SRAM. <p> Dynamic power supply and clock tuning: One approach to process and environmental variation is the dynamic tuning of both power supplies and clock rates. This has been explored in <ref> [34] </ref> but is still far from being a widely used technique. 5. Physical design issues: Deep sub-micron technologies will continue to complicate abstractions of physical design.
Reference: [35] <author> J. Pratt and V. Heuring. </author> <title> Delay synchronization in time-of-flight optical systems. </title> <journal> Applied Optics, </journal> <volume> 31(14):2430 - 2437, </volume> <year> 1992. </year>
Reference-contexts: [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) [34] TI-India simulated 8-bit multiplier (CMOS) [11] U. of Colorado designed Optical computer with wave-pipelining <ref> [35] </ref> U. of Mass. fabricated/tested multiplier and parity generator (2 m CMOS) [28] 300MHz, 4Mb wave-pipelined CMOS SRAM. Moreover Hitachi proposed a concept of dual sensing latch circuit in order to achieve a shorter cycle time at 2.6ns. Hyundai has designed a 150MHz, 8-banks, 256Mb synchronous DRAM.
Reference: [36] <author> L. Qi and X. Peisu. </author> <title> The design and implementation of a very fast experimental pipelining computer. </title> <journal> Journal of Computer Science and Technology, </journal> <volume> 3(1) </volume> <pages> 1-6, </pages> <year> 1988. </year>
Reference-contexts: Prior to 1990, many designs of wave-pipelining systems have been done with bipolar technology, including a floating point unit [1], an experimental computer <ref> [36] </ref>, and a population counter [45]. In general, CMOS has been viewed unfavorably for wave-pipelining systems due to the data-dependent delay from serial and parallel transistor connections in static CMOS gates. However, recently several university research groups have shown the feasibility of CMOS implementations of wave-pipelining.
Reference: [37] <author> K.A. Sakallah, </author> <title> T.N. Mudge, T.M. Burks, and E.S. Davidson. Synchronisation of Pipelines. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <year> 1993. </year>
Reference-contexts: In an attempt to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically <ref> [37, 9, 10, 18, 12, 13, 27] </ref>, 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. <p> A notable example of such a tool is a pipeline scheduler, called pipeT C , developed by Sakallah et al <ref> [37] </ref>. Their work provides a unified formalism for describing the timing in pipelines, accounts for multi-phase synchronous clocking, handles both short and long path delays, and accommodates (to a certain extent) the effect of wave-pipelining.
Reference: [38] <author> C. Sechen and A. L. Sangiovanni-Vincentelli. Timber Wolf: </author> <title> A Placement System for Integrated Circuits. </title> <journal> Journal of Solid-State Circuits, </journal> <volume> SC-20(4):510-522, </volume> <month> April </month> <year> 1985. </year>
Reference-contexts: Using basic 2-input gates and inverters, and two types of delay buffers from the MSU standard cell library, version 2.2, gate delay 19 parameters were constructed for the SIS library and the MOSIS 2 p-well process. The circuit was synthesized to allow for 3 waves, and TimberWolf <ref> [38] </ref> was used to generate the physical layout. The simulated value of the minimum clock period of the circuit is 2.78ns with latency 7.37ns. CAzM [7] was used for the circuit simulation.
Reference: [39] <author> N. V. Shenoy, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Minimum Padding to Satisfy Short Path Constraints. </title> <booktitle> In Proceedings of the International Workshop on Logic Synthesis, </booktitle> <year> 1993. </year>
Reference-contexts: to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits <ref> [44, 46, 17, 21, 22, 39] </ref>, 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. A comparative study of existing methods in wave-pipelining can be found in [24]. <p> This method was tested on circuits with regular structures, such as adders and multipliers. A factor of 2.5 increase in throughput (number of waves) has been achieved at a cost of 10-50% increase in area [45]. Shenoy et al. <ref> [39] </ref> expressed the logic balancing problem as an optimization procedure with additional short path constraints. This technique was implemented as an experimental CAD tool that interfaces with the SIS system [40]. Both of these approaches aim at obtaining the maximum rate pipelining while using a minimum number of delay buffers.
Reference: [40] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoy, and R. K. Brayton. </author> <title> Sequential Circuit Design Using Synthesis and Optimization. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <year> 1992. </year>
Reference-contexts: Shenoy et al. [39] expressed the logic balancing problem as an optimization procedure with additional short path constraints. This technique was implemented as an experimental CAD tool that interfaces with the SIS system <ref> [40] </ref>. Both of these approaches aim at obtaining the maximum rate pipelining while using a minimum number of delay buffers. However, for multiple-fanout gates the delay buffers are inserted individually for each fanout. As a result a separate step is typically required to merge the common buffers for area recovery. <p> This method permits a quick estimation of the number of buffers needed to balance a circuit and can therefore be used in heuristics for logic restructuring. The algorithm is implemented in the SIS logic synthesis environment <ref> [40] </ref>. The remainder of this section briefly describes the logic balancing method for CMOS circuits according to this scheme.
Reference: [41] <author> H. Shin, J. Warnock, M. Immediato, K. Chin, C.-T. Chuang, M. Cribb, D. Heidel, Y.-C. Sun, N. Mazzeo, and S. Brodskyi. </author> <title> A 5Gb/s 16x16 Si-bipolar crosspoint switch. </title> <booktitle> In IEEE International Solid State Circuits Conference, </booktitle> <pages> pages 228-229, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: 3: Wave-pipelined Designs by Industry Campany Design DEC L3 Cache Memory for AXP 21164 [2] GTE SONET-OC12 switch [5]. (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch <ref> [41] </ref> (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns) [16, 43] Hyundai DRAM (CMOS - 150MHz, 256Mb) [47] 23 7 Open Problems Despite recent research in wave-pipelining and other aggressive timing approaches, a number of open problems still exist, in particular
Reference: [42] <author> R. Krishnamurthy, R. Sridhar. </author> <title> A CMOS Wave-pipelined Image Processor for Real-time Morphology. </title> <booktitle> IEEE Int'l Conf. on Computer Design, </booktitle> <pages> pages 638-643, </pages> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: fabricated/tested digital sampler (1.2 m CMOS and 25ps resolution) [14] NC State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) <ref> [42] </ref> Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) [45] Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) [34] TI-India simulated 8-bit multiplier (CMOS) [11] U. of Colorado designed Optical computer with wave-pipelining [35]
Reference: [43] <author> S. Tachibana and H. Higuchi et. al. </author> <title> A 2.6ns wave-pipelined CMOS SRAM with dual-sensing-latch circuits. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <pages> pages 487-490, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: (CMOS - 4 waves) HP Cache RAM in the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns) <ref> [16, 43] </ref> Hyundai DRAM (CMOS - 150MHz, 256Mb) [47] 23 7 Open Problems Despite recent research in wave-pipelining and other aggressive timing approaches, a number of open problems still exist, in particular related to manufacturability.
Reference: [44] <author> D. Wong, G. De Micheli, and M Flynn. </author> <title> Inserting active delay elements to achieve wave pipelining. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 270-273, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits <ref> [44, 46, 17, 21, 22, 39] </ref>, 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. A comparative study of existing methods in wave-pipelining can be found in [24]. <p> The most popular techniques for logic balancing are based on logic restructuring and delay buffer insertion along logic paths. Wong et al. <ref> [44, 46] </ref> developed a method and a CAD tool to minimize the variance of path delays in ECL logic circuits. Their method is based on inserting the delay buffers followed by device fine-tuning. <p> However, for multiple-fanout gates the delay buffers are inserted individually for each fanout. As a result a separate step is typically required to merge the common buffers for area recovery. For the balancing method developed 14 by <ref> [44] </ref> this is a simple task because the delay of ECL gates does not depend on the fanout. In the case of CMOS circuits, the fanout load significantly affects the delay and its impact on timing cannot be ignored.
Reference: [45] <author> D. Wong, G. De Micheli, M. Flynn, and R. </author> <title> Huston. A Bipolar Population Counter Using Wave Pipelining to Achieve 2.5 fi Normal Clock Frequency. </title> <journal> In IEEE Journal of Solid State Circuits, </journal> <volume> Vol. 27, </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits [44, 46, 17, 21, 22, 39], 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips <ref> [28, 45, 23] </ref>. A comparative study of existing methods in wave-pipelining can be found in [24]. Wave-pipelining has suffered from a number of myths and the problems which need to be solved in a wave-pipelined design are not widely understood. <p> This method was tested on circuits with regular structures, such as adders and multipliers. A factor of 2.5 increase in throughput (number of waves) has been achieved at a cost of 10-50% increase in area <ref> [45] </ref>. Shenoy et al. [39] expressed the logic balancing problem as an optimization procedure with additional short path constraints. This technique was implemented as an experimental CAD tool that interfaces with the SIS system [40]. <p> Prior to 1990, many designs of wave-pipelining systems have been done with bipolar technology, including a floating point unit [1], an experimental computer [36], and a population counter <ref> [45] </ref>. In general, CMOS has been viewed unfavorably for wave-pipelining systems due to the data-dependent delay from serial and parallel transistor connections in static CMOS gates. However, recently several university research groups have shown the feasibility of CMOS implementations of wave-pipelining. <p> Wong et al. at Stanford University have designed a 63 bit population counter in ECL/CML technology <ref> [45] </ref>. The counter achieves 2.5 waves and is the first bipolar LSI chip that uses wave-pipelining. Liu et al. at North Carolina State University have reported an architecture, circuit, layout, and testing techniques for achieving high speedup in a CMOS parallel adder using wave-pipelining [29]. <p> State U. fabricated/tested multiplier (1.2 m CMOS and 4 waves) [33] NC State U. fabricated/tested data recovery (1.2 m CMOS) [20] NC State U. fabricated/tested pattedern generator (1.2 mum CMOS) [31] SUNY (Buffalo) simulated image processor (1.2 mum CMOS) [42] Stanford U. fabricated/tested 63-bit population counter (ECL with 2.3 waves) <ref> [45] </ref> Stanford U. fabricated/tested 16x16 multiplier (1 m CMOS - 3.5 waves) [25] Stanford U. fabricated vector unit (1 m CMOS - 300 MHz) [34] TI-India simulated 8-bit multiplier (CMOS) [11] U. of Colorado designed Optical computer with wave-pipelining [35] U. of Mass. fabricated/tested multiplier and parity generator (2 m CMOS)
Reference: [46] <author> D. Wong, G. De Micheli, and M Flynn. </author> <title> Designing High Performance Digital Circuits Using Wave Pipelining: Algorithms and Practical Experiences. </title> <journal> In IEEE Trans. on Computer-Aided Design, </journal> <volume> Vol. 12, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: to understand the wave-pipelining phenomenon and turn it into a useful and reliable computer technology, recent research focused on the following aspects: 1) developing correct timing models and analyzing the problem mathematically [37, 9, 10, 18, 12, 13, 27], 2) developing logic synthesis techniques and CAD tools for wave-pipelined circuits <ref> [44, 46, 17, 21, 22, 39] </ref>, 3) developing new circuit techniques specifically devoted to wave-pipelining [28], and 4) testing the wave-pipelining ideas by building VLSI chips [28, 45, 23]. A comparative study of existing methods in wave-pipelining can be found in [24]. <p> The signal separation constraints, also called internal node constraints, were derived, in slightly different forms, by Ekroot [9], Wong et al. <ref> [46] </ref>, Joy et al. [18], and Gray et al. [13]. Let x be an internal node (output of a gate) of the logic network, a point on the logic depth axis in Fig. 2. <p> The second way consists of increasing short paths by adjusting gate-delays. Since this method allows for fine delay adjustments, it has been called fine tuning. In general, the two techniques are combined for optimality <ref> [46] </ref>. While in theory the path-delay equalization problem has been solved, in practice the real challenge is to accomplish it in the presence of a variety of static and dynamic delay tolerances, some of which are listed below. 1. <p> The most popular techniques for logic balancing are based on logic restructuring and delay buffer insertion along logic paths. Wong et al. <ref> [44, 46] </ref> developed a method and a CAD tool to minimize the variance of path delays in ECL logic circuits. Their method is based on inserting the delay buffers followed by device fine-tuning.
Reference: [47] <author> H. Yoo et. al. </author> <title> A 150mhz 8-banks 256m synchronous DRAM with wave pipelin-ing methods. </title> <booktitle> In ISSCC95, </booktitle> <pages> pages 250 - 251, </pages> <year> 1995. </year> <month> 28 </month>
Reference-contexts: Since S/DRAM already use a variety of exotic timing methods, wave-pipelining is an efficient way to reduce access/cycle time without additional registers. Along with the reduced access time, wave-pipelining provides the additional advantages of reduced latency and power dissipation. Several successful RAM designs using wave-pipelining have been reported <ref> [4, 26, 2, 32, 47, 16] </ref>. It is fair to say that the design of S/DRAM using wave-pipelining has become a trend in industry. Chappel et. al. designed a "bubble pipelined" RAM chip with 2ns access time. Wave-pipelining is used in the cache RAM access in the HP Snake workstation. <p> the HP Snake Workstation [26] (CMOS - 1.16 waves) IBM "Bubbled pipelining" in RAM chip [4] (CMOS - 4 waves) IBM Crosspoint switch [41] (ECL- 2 waves) NEC SRAM chip [32] (BiCMOS - 2 waves) Hitachi SRAM (CMOS - 330MHz and 2.6ns) [16, 43] Hyundai DRAM (CMOS - 150MHz, 256Mb) <ref> [47] </ref> 23 7 Open Problems Despite recent research in wave-pipelining and other aggressive timing approaches, a number of open problems still exist, in particular related to manufacturability. As with the research already surveyed in this paper, solutions to these problems may have broader application than just wave-pipelining. 1.
References-found: 47

