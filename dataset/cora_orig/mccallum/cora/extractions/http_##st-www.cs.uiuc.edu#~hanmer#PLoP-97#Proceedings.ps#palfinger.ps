URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Proceedings.ps/palfinger.ps
Refering-URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Workshops.html
Root-URL: http://www.cs.uiuc.edu
Email: (gp@sdm.de)  
Title: State Action Mapper In applications with graphical user interfaces (GUI), its very common that the
Author: Gnther Palfinger 
Note: Example  
Address: Thomas-Dehler-Strae 27 81737 Munich, Germany  
Affiliation: sd&m GmbH Co. KG  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [Alb96] <author> Gerhard Albers: </author> <title> Frammento Handbuch; sd&m, </title> <address> Munich 1996. </address>
Reference-contexts: The design decision For State Machine use Transition Methods gives some hints, on how to implement the finite state machine in conjunction with the previously discussed Owner-Driven Transitions pattern. 7 Known uses The application framework Frammento <ref> [Alb96] </ref> uses this pattern to implement the dialog control. The pattern solves two aspects of the dialog control: the one already mentioned here is control of dialog behavior and the second is the control of appearance (enabling and disabling of widgets).
Reference: [DaRT] <institution> Project DaRT: Datenbank fr Reisezugwagen und Triebfahrzeuge, </institution> <note> sd&m; information at http://www.sdm.de/e/www/aktuelles/ </note>
Reference-contexts: The pattern solves two aspects of the dialog control: the one already mentioned here is control of dialog behavior and the second is the control of appearance (enabling and disabling of widgets). The framework is actually used in two projects of the German railway company <ref> [DaRT] </ref> (database for locomotives and wagons) and TIV (locomotive maintenance and servicing). There are plans to use this pattern for an upcoming enterprise Java Framework. Acknowledgments This pattern was mined from the application framework Frammento written by Gerhard Albers.
Reference: [Dys+96] <author> Paul Dyson, Bruce Anderson: </author> <title> State Patterns; Proceedings of EuroPLoP 96. </title>
Reference-contexts: State Mapper delegates the execution, and hence the implementation, back to the StateDependent Object. A good choice for implementing a state transition strategy is a combination with Dysons state transition patterns described in State Patterns Language <ref> [Dys+96] </ref>. The StateDriven Transitions pattern deals with state objects (in our pattern the State Mapper objects ) being responsible for the transition from itself (the current state) to the new state object.
Reference: [Gam+95] <author> Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides: </author> <title> Design Patterns, Elements of Reusable Objectoriented Software; Addison-Wesley, </title> <year> 1995. </year>
Reference: [Ran95] <author> Alexander Ran: MOODS: </author> <booktitle> Models for ObjectOriented Design of State; Proceedings of PLoP 95. </booktitle>
Reference-contexts: This pattern enables you to share the State Mapper objects in case you have different state-transition profiles. Alexander Ran offers in his event-centered Architecture pattern MOOD <ref> [Ran95] </ref> a very good classification of Event patterns.
References-found: 5

