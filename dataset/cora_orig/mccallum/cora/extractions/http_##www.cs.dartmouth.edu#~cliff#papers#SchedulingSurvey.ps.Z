URL: http://www.cs.dartmouth.edu/~cliff/papers/SchedulingSurvey.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Scheduling Algorithms  
Author: David Karger, Cliff Stein, Joel Wein, 
Affiliation: Massachusetts Institute of Technology  Dartmouth College  Polytechnic University  
Abstract-found: 0
Intro-found: 1
Reference: [AMO93] <author> Ravindra K. Ahuja, Thomas L. Magnanti, and James B. Orlin. </author> <title> Network Flows : Theory, Algorithms, and Applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: As a result, for any basic solution, the structure of G is a forest of trees and 1-trees, which are trees with one additional edge added; for further details see <ref> [AMO93] </ref>.
Reference: [Bak74] <author> K. R. Baker. </author> <title> Introduction to Sequencing and Scheduling. </title> <publisher> Wiley, </publisher> <year> 1974. </year>
Reference: [BCS74] <author> J.L. Bruno, E.G. Coffman, and R. Sethi. </author> <title> Scheduling independent tasks to reduce mean finishing time. </title> <journal> Communications of the ACM, </journal> <volume> 17 </volume> <pages> 382-387, </pages> <year> 1974. </year> <month> 45 </month>
Reference-contexts: Based on this observation, Horn [Hor73] and Bruno, Coffman and Sethi <ref> [BCS74] </ref> proposed formulating the problem as a minimum-weight bipartite matching problem. We define a bipartite graph G = (V; E) with V = A [B as follows. A will contain n vertices v j , one for each of the n jobs j = 1; : : : ; n.
Reference: [BF82] <editor> I. Barany and T. Fiala. Tobbgepes utemezesi problemak kozel optimalis megoldasa. Szigma-Mat.-Kozgazdasagi Folyoirat, </editor> <volume> 15 </volume> <pages> 177-191, </pages> <year> 1982. </year>
Reference-contexts: Thus the total length of the schedule is at most P max + max , as claimed. Since P max + max 2 max (P max ; max ) 2C fl max , we obtain Theorem 2.11 (Racsmany, see <ref> [BF82] </ref>) List Scheduling is a 2-approximation algorithm for OjjC max . 2.4 Limitations of Priority Rules For many problems, simple scheduling rules do not yield good schedules, and thus given a scheduling problem, the algorithm designer should be careful about applying one of these rules without justification.
Reference: [CLR90] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: The necessary algorithm is a classical dynamic program that builds the solution out of solutions to smaller problems (a detailed introduction to dynamic programming can be found in many algorithms textbooks, see, for example <ref> [CLR90] </ref>). This immediately yields an O (n 2 ) algorithm for 1jj P U j problem-just take all weights to be 1.
Reference: [CMM67] <author> R.W. Conway, W.L. Maxwell, and L.W. Miller. </author> <title> Theory of Scheduling. </title> <publisher> Addison-Wesley, </publisher> <year> 1967. </year>
Reference: [GJ79] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of N P -Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: With preemption, it is possible to greedily construct an optimal schedule in polynomial time. In the non-preemptive setting, however, it is unlikely that there is an optimal polynomial time algorithm, since the problem is N P-complete via a simple reduction from the N P-complete Partition <ref> [GJ79] </ref>. We will thus focus on finding an approximately optimal solution. First, we will show that any busy schedule is a 2-approximation. We will then see how this can be improved with a slightly smarter algorithm, the Longest Processing Time (LPT) algorithm, which is a a 4=3-approximation algorithm.
Reference: [GLLK79] <author> R.L. Graham, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Optimization and approximation in deterministic sequencing and scheduling: a survey. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: The centrality of these models was reinforced by two influential surveys <ref> [GLLK79, LLKS93] </ref>, and they have received much attention. Algorithms for scheduling can be deployed in a variety of settings, as is illustrated by the following examples. <p> Although we are early in our discussion of scheduling models, we already have enough information to define a number of problems. We refer to various scheduling problems in the now-standard notation defined by Graham, Lawler, Lenstra, & Rinnooy Kan (1979) <ref> [GLLK79] </ref>. A problem is denoted by ffjfijfl, where (i) ff denotes the machine environment, (ii) fi denotes various side constraints and characteristics and (iii) fl denotes an optimality criterion. For the one-machine environment ff is 1.
Reference: [Goe96] <author> M. Goemans. </author> <title> A supermodular relaxation for scheduling with release dates. </title> <booktitle> In Proceedings of the 5th Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 288-300, </pages> <month> June </month> <year> 1996. </year> <note> Published as Lecture Notes in Computer Science 1084, Springer-Verlag. </note>
Reference-contexts: We also note that in the special case in which we just have release dates, a slightly strengthened version can (remarkably) be solved optimally in O (n log n) time <ref> [Goe96] </ref>. 5.3.2 Constructing a Schedule from a Solution to the Relaxation We now show that a solution to this relaxation can be converted efficiently to an approximately-optimal schedule.
Reference: [Gra66] <author> R.L. Graham. </author> <title> Bounds for certain multiprocessor anomalies. </title> <journal> Bell System Technical Journal, </journal> <volume> 45 </volume> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference: [Gra69] <author> R.L. Graham. </author> <title> Bounds on multiprocessing anomalies. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 17 </volume> <pages> 263-269, </pages> <year> 1969. </year>
Reference: [GS76] <author> T. Gonzalez and S. Sahni. </author> <title> Open shop scheduling to minimize finish time. </title> <journal> Journal of the ACM, </journal> <volume> 23 </volume> <pages> 665-679, </pages> <year> 1976. </year>
Reference-contexts: Corollary 4.2 ([CMM67]) SPT is an optimal algorithm for Pjj P 4.1.2 Matching Jobs to Machines: OjpmtnjC max For our second example of the utility of matching, we give an algorithm for OjpmtnjC max due to Gonzales and Sahni <ref> [GS76] </ref>. This algorithm will not find just one matching, but rather a sequence of matchings, each of which will correspond to a partial schedule, and then concatenate all of these partial schedules together.
Reference: [Hal97] <author> L. A. Hall. </author> <title> Approximation Algorithms for NP-hard problems, chapter 1. </title> <publisher> PWS Publishing Company, </publisher> <address> 1997. D. Hochbaum, </address> <publisher> editor. </publisher>
Reference-contexts: X p j + q c (24) (r c + q c ) + j = 2L fl where the last line follows by applying the two lower bounds (21) and (22). 2 6.3.2 Enumeration of large jobs:1jr j jL max The presentation of this section follows that of Hall <ref> [Hal97] </ref>. The original approximation scheme for this problem is due to Hall and Shmoys [HS89]. To obtain better bounds, we need to look more carefully at when Jackson's rule can go wrong.
Reference: [HLvdV97] <author> J.A. Hoogeveen, J.K. Lenstra, and S.L. van de Velde. </author> <title> Sequencing and scheduling. </title> <editor> In M. Dell'Amico, F. Maffioli, and S. Martello, editors, </editor> <title> Annotated Bibliographies in Combinatorial Optimization. </title> <publisher> Wiley, </publisher> <address> Chichester, </address> <year> 1997. </year> <note> To appear. 46 </note>
Reference: [Hoc97] <editor> Dorit Hochbaum, editor. </editor> <booktitle> Approximation Algorithms. </booktitle> <address> PWS, </address> <year> 1997. </year>
Reference-contexts: A polynomial-time -relaxed decision procedure can easily be converted into a -approximation algorithm for the problem via binary search for the optimum T ; see <ref> [HS87, Hoc97] </ref> for more details.
Reference: [Hor73] <author> W. Horn. </author> <title> Minimizing average flow time with parallel machines. </title> <journal> Operations Research, </journal> <volume> 21 </volume> <pages> 846-847, </pages> <year> 1973. </year>
Reference-contexts: Based on this observation, Horn <ref> [Hor73] </ref> and Bruno, Coffman and Sethi [BCS74] proposed formulating the problem as a minimum-weight bipartite matching problem. We define a bipartite graph G = (V; E) with V = A [B as follows.
Reference: [Hor74] <author> W. Horn. </author> <title> Some simple scheduling algorithms. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 21 </volume> <pages> 177-185, </pages> <year> 1974. </year>
Reference: [HS87] <author> D.S. Hochbaum and D.B. Shmoys. </author> <title> Using dual approximation algorithms for scheduling problems: theoretical and practical results. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 144-162, </pages> <year> 1987. </year>
Reference-contexts: A polynomial-time -relaxed decision procedure can easily be converted into a -approximation algorithm for the problem via binary search for the optimum T ; see <ref> [HS87, Hoc97] </ref> for more details. <p> It is polynomial in n, but the exponent is a polynomial in 1=*. While for very close to 1, the running time is prohibitively large, for larger, fixed values of , a modified algorithm yields good schedules with near-linear running times; see <ref> [HS87] </ref> for details. 6.3 1jr j jL max We now turn to the problem of minimizing the maximum lateness in the presence of release dates. Recall from Section 2.1 that without release dates EDD is an exact algorithm for this problem.
Reference: [HS89] <author> L. Hall and D. B. Shmoys. </author> <title> Approximation schemes for constrained scheduling problems. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 134-141. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: The original approximation scheme for this problem is due to Hall and Shmoys <ref> [HS89] </ref>. To obtain better bounds, we need to look more carefully at when Jackson's rule can go wrong.
Reference: [HSSW97] <author> L. A. Hall, A.S. Schulz, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and on-line algorithms. </title> <note> To appear in Math of OR, </note> <year> 1997. </year>
Reference: [Jac55] <author> J. ~ R. Jackson. </author> <title> Scheduling a production line to minimize maximum tardiness. </title> <institution> Management Science Research Project Research Report 43, University of California, </institution> <address> Los Angeles, </address> <year> 1955. </year>
Reference-contexts: This is often referred to as Jackson's rule. <ref> [Jac55] </ref>. Let L fl max be the optimum lateness.
Reference: [Joh54] <author> S. M. Johnson. </author> <title> Optimal two- and three-stage production schedules with setup times included. </title> <journal> Naval Research Logistics Quarterly, </journal> <pages> pages 61-68, </pages> <year> 1954. </year>
Reference-contexts: In general, this problem is N P-hard, even in the case of three machines. However, in the special case of the two-machine flow shop, F2jjC max a priority-based ordering approach due to Johnson <ref> [Joh54] </ref> yields an optimal algorithm.
Reference: [Kha79] <author> L./ G./ Khachiyan. </author> <title> A polynomial algorithm in linear programming (in russian). </title> <journal> Doklady Adademiia Nauk SSSR, </journal> <volume> 224 </volume> <pages> 1093-1096, </pages> <year> 1979. </year>
Reference-contexts: Many optimization problems can be formulated as linear programs, and thus solved efficiently, since a linear program can be solved in polynomial time <ref> [Kha79] </ref>. In this section we consider RjpmtnjC max . To model this problem as a linear program, we use nm variables x ij ; 1 i n; 1 j m.
Reference: [Law73] <author> E.L. Lawler. </author> <title> Optimal sequencing of a single machine subject to precedence constraints. </title> <journal> Management Science, </journal> <volume> 19 </volume> <pages> 544-546, </pages> <year> 1973. </year>
Reference: [Law76] <author> E.L. Lawler. </author> <title> Combinatorial Optimization: Networks and Matroids. </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1976. </year>
Reference-contexts: + jBj j2C p j + j=1 p j =m 2C fl max , where the last inequality follows by applying lower bounds (3) and (1). 2 For the case when all processing times are exactly one, PjprecjC max is solvable in polynomial time if there are only 2 machines <ref> [Law76] </ref>, and is N P-complete if there are an arbitrary number of machines [Ull75].
Reference: [LL78] <author> E.L. Lawler and J. Labetoulle. </author> <title> On preeemptive scheduling of of unrelated parallel processors by linear programming. </title> <journal> Journal of the ACM, </journal> <volume> 25 </volume> <pages> 612-619, </pages> <year> 1978. </year> <month> 47 </month>
Reference-contexts: Such a matching is referred to as a decrementing set. That it always exists is a nontrivial fact (about stochastic matrices) whose proof is beyond the scope of this survey; we refer the reader to Lawler and Labetoulle's presentation of this algorithm <ref> [LL78] </ref>. To find a decrementing set, we construct a (bipartite) graph with a node representing each job and machine, and include an edge between machine node i and job node j if job j requires a non-zero amount of processing on machine i.
Reference: [LLKS93] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinooy Kan, </author> <title> and D.B. Shmoys. Sequencing and scheduling: Algorithms and complexity. In S.C. Graves, </title> <editor> A.H.G. Rinnooy Kan, and P.H. Zipkin, editors, </editor> <booktitle> Handbooks in Operations Research and Management Science, </booktitle> <volume> Vol 4., </volume> <booktitle> Logistics of Production and Inventory, </booktitle> <pages> pages 445-522. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: The centrality of these models was reinforced by two influential surveys <ref> [GLLK79, LLKS93] </ref>, and they have received much attention. Algorithms for scheduling can be deployed in a variety of settings, as is illustrated by the following examples. <p> continue performing such swaps until there are none left to be done, implying that jobs on machine 2 are processed in the same order as those on machine 1. 2 Having limited our search for optimal schedules to permutation schedules, we present a clever argument given by Lawler et. al. <ref> [LLKS93] </ref> to establish the optimality of the permutation schedule specified by Johnson's rule. Renumber the jobs according to the Johnson ordering. <p> We admit that forcing d j to be negative is somewhat artificial and so we do not concentrate on this interpretation. We use instead the delivery time formulation, which in addition to modeling a number of applications, is a key subroutine in computational approaches to shop scheduling problems <ref> [LLKS93] </ref>. 6.3.1 Jackson's rule is a 2 approximation In the delivery-time model, EDD translates to Longest Delivery Time First. This is often referred to as Jackson's rule. [Jac55]. Let L fl max be the optimum lateness. <p> Scheduling is an old and therefore mature field, but important opportunities for research contributions remain. In addition to some of the outstanding open questions (see the survey by Lawler et al. <ref> [LLKS93] </ref>) it is our feeling that the most meaningful research contributions will be either new and innovative techniques for attacking old problems or new problem definitions that model more realistic applications.
Reference: [LM69] <author> E.L. Lawler and J. M. Moore. </author> <title> A functional equation and its application to resource allocation and sequencing problems. </title> <booktitle> Management Science, </booktitle> <pages> pages 77-84, </pages> <year> 1969. </year>
Reference: [LST90] <author> J.K. Lenstra, D.B. Shmoys, and E. Tardos. </author> <title> Approximation algorithms for scheduling unrelated parallel machines. </title> <journal> Mathematical Programming, </journal> <volume> 46 </volume> <pages> 259-271, </pages> <year> 1990. </year>
Reference-contexts: follows. 2 6 Polynomial approximation schemes For certain N P-hard scheduling problems there is a limit to our ability to approximate them in polynomial time; for example, Lenstra, Shmoys and Tardos proved that there is no - approximation algorithm, with &lt; 3=2, for RjjC max unless P = N P <ref> [LST90] </ref>. For certain problems, however, we can approximate their optimal solutions arbitrarily closely in polynomial time. In this section we present three polynomial approximation schemes; that is, polynomial time algorithms that, for any constant &gt; 1, deliver a solution whose objective value is at most times optimal.
Reference: [McN59] <author> R. McNaughton. </author> <title> Scheduling with deadlines and loss functions. </title> <journal> Management Science, </journal> <volume> 6 </volume> <pages> 1-12, </pages> <year> 1959. </year>
Reference-contexts: In this case, we show how to find a schedule that matches the maximum of the two lower bounds given above. We then use the lower bounds to establish approximation guarantees for the nonpreemptive case. 13 2.3.1 Minimizing C max with preemptions We give a simple algorithm, called McNaughton's <ref> [McN59] </ref> wrap-around rule, that creates an optimal schedule for PjjC max with at most m 1 preemptions. This algorithm is different from many scheduling algorithms in that it creates the schedule machine by machine, rather than over time.
Reference: [Moo68] <author> J. M. Moore. </author> <title> An n-job, one machine sequencing algorithm for minimizing the number of late jobs. </title> <journal> Management Science, </journal> <volume> 15 </volume> <pages> 102-109, </pages> <year> 1968. </year>
Reference-contexts: One job needs to finish last, and it immediately follows that we can do no better than executing all of that job last. Thus, our greedy algorithm continues to apply. Theorem 3.1 ([Law73]) Least-Cost-Last is an optimal algorithm for 1jprecjf max . 3.1.2 An alternative approach Moore <ref> [Moo68] </ref> gave a different approach to 1jjf max that may be faster in some cases. His scheme is based on a reduction to the maximum lateness problem and its solution by the EDD rule. <p> We also note that a quite simple greedy algorithm due to Moore <ref> [Moo68] </ref> can solve the unweighted 1jj U j problem in O (n log n) time. 3.3 Another dynamic program: PjjC max For a second example of the applicability of dynamic programming, we return to the N P-hard problem PjjC max , and focus on a special case that is solvable in
Reference: [Pin95] <author> M. Pinedo. </author> <title> Scheduling: Theory, Algorithms and Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference: [PSW95] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Minimizing average completion time in the presence of release dates. </title> <note> To appear in Math Programming, </note> <year> 1995. </year>
Reference: [QS94] <author> M. Queyranne and A.S. Schulz. </author> <title> Polyhedral approaches to machine scheduling. </title> <type> Technical Report Technical Report 474/1995, </type> <institution> Technical University of Berlin, </institution> <year> 1994. </year>
Reference: [Que93] <author> M. Queyranne. </author> <title> Structure of a simple scheduling polyhedron. </title> <journal> Mathematical Programming, </journal> <volume> 58 </volume> <pages> 263-285, </pages> <year> 1993. </year>
Reference-contexts: Instead, we use a class of valid inequalities, introduced by Wolsey [Wol85] and Queyranne <ref> [Que93] </ref>. Recall that we denote the entire set of jobs f1; : : :; ng as J , and, for any subset S J , we define p (S) = P and p 2 (S) = j2S p 2 j . <p> (15) and (16), we no longer have an exact formulation, but rather a linear-programming relaxation of 1jr j ; precj P We note that this formulation has an exponential number of constraints; however, it can be solved in polynomial time by the use of the ellipsoid algorithm for linear programming <ref> [Wol85, Que93] </ref>.
Reference: [Sga97] <author> J. Sgall. </author> <title> On-line scheduling a survey. </title> <editor> In A. Fiat and G. Woeginger, editors, </editor> <booktitle> On-Line Algorithms, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Finally, we note that SRPT and EDD are on-line algorithms their decisions about which job to schedule currently do not require any information about which jobs are to be released in the future. See <ref> [Sga97] </ref> for a comprehensive survey of on-line scheduling. 2.2 The Two-Machine Flow Shop We now consider a more complex machine environment in which we want to minimize the makespan in a flow shop. In general, this problem is N P-hard, even in the case of three machines.
Reference: [Smi56] <author> W.E. Smith. </author> <title> Various optimizers for single-stage production. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 3 </volume> <pages> 59-66, </pages> <year> 1956. </year>
Reference: [Ull75] <author> J. D. Ullman. </author> <title> NP-complete scheduling problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 10 </volume> <pages> 384-393, </pages> <year> 1975. </year> <month> 48 </month>
Reference-contexts: , where the last inequality follows by applying lower bounds (3) and (1). 2 For the case when all processing times are exactly one, PjprecjC max is solvable in polynomial time if there are only 2 machines [Law76], and is N P-complete if there are an arbitrary number of machines <ref> [Ull75] </ref>. The complexity of the problem in the case when there are a fixed constant number of machines, e.g. 3, is one of the more famous open problems in scheduling. 16 2.3.5 Open Shop Scheduling List Scheduling can also be applied to OjjC max .

References-found: 38

