URL: http://www.cs.princeton.edu/~durand/papers/SPAA95.ps
Refering-URL: http://www.cs.princeton.edu/~durand/
Root-URL: http://www.cs.princeton.edu
Email: fdurand,rjaing@bellcore.com  
Title: Applying Randomized Edge Coloring Algorithms to Distributed Communication: An Experimental Study  
Author: Dannie Durand, Ravi Jain, David Tseytlin 
Address: 445 South Street Morristown, NJ 07960  
Affiliation: Bellcore  
Abstract: We propose a parameterized, randomized edge coloring algorithm for use in coordinating data transfers in fully connected distributed architectures such as parallel I/O subsystems and multimedia information systems. Our approach is to preschedule I/O requests to eliminate contention for I/O ports while maintaining an efficient use of bandwidth. Request scheduling is equivalent to edge coloring a bipartite graph representing pending I/O requests. Although efficient optimal algorithms exist for centralized edge coloring where the global request graph is known, in distributed architectures heuristics must be used. We propose such heuristics and use experimental analysis to determine their ability to approach the centralized optimal. The performance of our algorithms is also compared with the work of other researchers experimentally. Our results show that our algorithms produce schedules within 5% of the optimal schedule, a substantial improvement over existing algorithms. The use of experimental analysis allows us to evaluate the appropriateness of each heuristic for a variety of different architectural models and applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. E. Anderson, S.S. Owicki, J. B. Saxe, and C. P. Thacker. </author> <title> High-Speed Switch Scheduling for Local-Area Networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 11(4) </volume> <pages> 319-352, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: We propose a parameterized algorithm which can be tuned for a particular set of communication and computational costs, since a wide variety of crossbar-based architectures with different performance characteristics exist (e.g. C.mmp [22], the Fujitsu VP500 [11], input queued packet switches <ref> [1] </ref>, crossbar-based workstation farms). We present an experimental analysis of our algorithms based on simulation and compare them with the work of other authors. Results show that our algorithm yields schedule lengths close to the optimum solution achieved in the centralized case; within 5% for some parameter choices. <p> Any processor can communicate with any other processor. Indirect routing is not possible in our model since there is no client-client or server-server communication. In a packet switching context, Anderson et al. <ref> [1] </ref> present a randomized, distributed algorithm for computing match-ings to route data cells from inputs to outputs in DEC's AN2 ATM communications switch. <p> However, in dynamic algorithms, the issues of fairness and starvation must be addressed. Some solutions include the use of time stamps and dividing traffic into priority classes (see, for example, <ref> [1] </ref>). The algorithms discussed in this paper are batch algorithms. It would be straightforward to make our algorithm dynamic by dispatching each matching as soon as it is colored and then adding new arrivals as edges to the current graph before computing the next matching.
Reference: [2] <author> R. J. Anderson andG. L. Miller. </author> <title> Optical Communication for Pointer-based Algorithms. </title> <type> Technical Report CRI-88-14, </type> <institution> Computer Science Department, University of Southern California, </institution> <year> 1988. </year>
Reference-contexts: Some related algorithms that route h-relations [21] in an optical computing (OCP) model <ref> [2] </ref> have also been presented. In this model, when two or more messages are sent to the same recipient, none of the messages are successfully transmitted. If a single message is sent to a recipient, it is received and acknowledged.
Reference: [3] <author> Claude Berge. </author> <title> Graphs. </title> <publisher> North Holland, </publisher> <year> 1985. </year>
Reference-contexts: We present randomized, distributed algorithms to schedule data transfers based on edge coloring the transfer request graph. In the centralized case, it has been shown that at least colors are required to edge color a bipartite graph with maximum degree <ref> [3] </ref>. Efficient centralized algorithms to obtain optimal edge colorings exist (see [14] for a survey). Because in many distributed architectures global information about I/O requests is not centrally available, we use heuristics to generate near optimal solutions.
Reference: [4] <author> E. G. Coffman, Jr., </author> <title> editor. Computer and Job-Shop Scheduling Theory. </title> <publisher> John Wiley, </publisher> <year> 1976. </year>
Reference-contexts: Work Much of the previous work on scheduling deals with tasks which each require only a single resource at any given time and is not relevant for I/O operations which each require a pre-assigned set of multiple resources (e.g. a processor, channel, and disk) simultaneously in order to execute (see <ref> [4, 6, 10, 15, 18, 14] </ref> for surveys). The relatively little previous work on simultaneous resource scheduling does not apply directly to our problem.
Reference: [5] <author> Thomas H. Corman. </author> <title> Fast Permuting on Disk Arrays. </title> <journal> Journal of Parallel and Distributed Computing, 17:41 -57, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: natural for applications where requests arrive in spurts such as "out of core" algorithms, where a program is manipulating a data set too large to fit in memory and must periodically perform a set of I/O operations to obtain the next chunk of data to work on (see, for example <ref> [5] </ref>). When these applications are run alone on a multiprocessor, no new requests should be scheduled until the current batch of requests is completed. . There are some problems associated with batch algorithms.
Reference: [6] <author> M.D. Durand, T. Montaut, L. Kervella, and W. Jalby. </author> <title> Impact of Memory Contention on Dynamic Scheduling on NUMA Multiprocessors. </title> <booktitle> In Proceedings of the 1993 International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Work Much of the previous work on scheduling deals with tasks which each require only a single resource at any given time and is not relevant for I/O operations which each require a pre-assigned set of multiple resources (e.g. a processor, channel, and disk) simultaneously in order to execute (see <ref> [4, 6, 10, 15, 18, 14] </ref> for surveys). The relatively little previous work on simultaneous resource scheduling does not apply directly to our problem.
Reference: [7] <author> Gereb-Graus and Tsantilas. </author> <title> Efficient Optical Communication in Parallel Computers. </title> <booktitle> In 1992 Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 41-48, </pages> <year> 1992. </year>
Reference-contexts: If we view clients as sending processors and servers as receiving processors and equate h with , the h-relation problem is similar to our communication problem with the added constraint that OCP states explicitly how collisions will be handled (failure of all messages). Gereb-Graus and Tsantilas <ref> [7] </ref> present a direct algorithm for completing an h-relation in the OCP model in fi (h + log log n) steps.
Reference: [8] <author> L. A. Goldberg, M. Jerrum, T. Leighton, and S. </author> <note> Rao. </note>
Reference-contexts: There is considerable evidence that it is hard to edge color a sparse graph. Gereb-Graus and Tsantilas posit that in order to achieve optimal coloring, h must be bounded below by log n log log n. In <ref> [8] </ref>, Goldberg et al. showed that for any random, direct algorithm, there exists a 2-relation that requires (log n) steps to route with success probability of 1=2. <p> In [9], Goldberg et al. showed that for any randomized, distributed algorithm, there exists a 2-relation which requires at least ( log log n) steps to route. To address this problem of routing sparse graphs, Gold-berg et al. <ref> [8] </ref> present indirect algorithms for routing h relations, where messages are first sent to intermediate nodes to reduce contention by balancing the communication load.
References-found: 8

