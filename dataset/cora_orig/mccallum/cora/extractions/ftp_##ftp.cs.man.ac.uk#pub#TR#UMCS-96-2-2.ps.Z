URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-96-2-2.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-96-2-2.html
Root-URL: http://www.cs.man.ac.uk
Title: Some Formal Musings on the Performance of Asynchronous Hardware.  
Author: C. Tofts 
Affiliation: Computer Science University of Manchester  
Pubnum: ISSN 1361 6161  
Abstract: Department of Computer Science University of Manchester Technical Report Series UMCS-96-2-2 
Abstract-found: 1
Intro-found: 1
Reference: [DIY91] <author> Y. Deguchi, N. Ishiura and S. Yajima, </author> <title> Probabilistic CTSS, analysis of timing error probability in asynchronous logic circuits, </title> <booktitle> 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp 650-655, </pages> <year> 1991. </year>
Reference-contexts: Most analyses [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have concentrated on their deterministic time behaviour. It is assumed that each processing stage takes some fixed time to perform its function, much as in a synchronous circuit. Recent simulation studies <ref> [DIY91, KB95] </ref> have examined the effects of variability on the performance of pipelines and concluded that whilst the performance of the pipestages will be that of the average case, the performance of the pipeline will not be.
Reference: [Fur93] <author> S.B. Furber, </author> <title> Breaking step the return of asynchronous logic, </title> <journal> IEE review, </journal> <month> July 159-162, </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Asynchronous design methods have become popular as a potential route to achieve low power/high performance <ref> [Fur93] </ref> devices. The analysis of the timing properties of these systems is complicated by two factors. Firstly, as a result of the synchrony the parallelism within the system must be carefully considered when analysing its performance. <p> In order to estimate its performance we model it as described by Figure 5. In the Amulet <ref> [Fur93] </ref> we can take the times L b and L f to be 6. So assuming that the final environment has a response time of better than 37:5 6 = 31:5. <p> In the case of the backward calculation a stall occurs when the system forces the environment to delay providing data. In this work we have examined the consequences of introducing forks into the computation pipeline. In the full Amulet processor <ref> [Fur93] </ref> there are many forms of composition between the units, including some which are in competition. In the longer term it would be interesting to characterise the performance of these more general forms of composition of asynchronous processors. <p> In the longer term it would be interesting to characterise the performance of these more general forms of composition of asynchronous processors. Of great importance in asynchronous systems is the exploitation of average case <ref> [Sut89, Fur93] </ref> performance, in further work [Tof95] we examine the effect on asynchronous pipeline performance of variability in component execution speed. 3 The effect of variability A major benefit claimed for asynchronous systems is that they permit designers to concentrate on the average rather than the worst case performance of their <p> performance, in further work [Tof95] we examine the effect on asynchronous pipeline performance of variability in component execution speed. 3 The effect of variability A major benefit claimed for asynchronous systems is that they permit designers to concentrate on the average rather than the worst case performance of their circuits <ref> [Fur93] </ref>. Most analyses [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have concentrated on their deterministic time behaviour. It is assumed that each processing stage takes some fixed time to perform its function, much as in a synchronous circuit. <p> In a synchronous system there is an obvious point at which this can be achieved but in an asynchronous system it is less clear when the flush can be executed. One method adopted is that of colour <ref> [Fur93] </ref>. In this paper we compare the effectiveness of 4 different types of flushing: 1. Colour (AMULET), 2. Global (Synchronous?), 3. Forward, 4. Backward. In each case we present the description of a 3 stage pipeline with the appropriate mechanism. <p> However, we have presented no analysis of competition for resources or components. In the design of real processors, such as Amulet <ref> [Fur93] </ref>, particular subcomponents are often used by more than one part of the processor, to save on area. An analysis of the effects of such contention would be highly complex.
Reference: [KB95] <author> D.A. Kearney and N.W. Bergmann, </author> <title> Performance evaluation of asynchronous logic pipelines with data dependant delays, </title> <booktitle> 2nd Working Conference om Asynchronous Design Methodologies, </booktitle> <year> 1995. </year> <month> 39 </month>
Reference-contexts: Most analyses [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have concentrated on their deterministic time behaviour. It is assumed that each processing stage takes some fixed time to perform its function, much as in a synchronous circuit. Recent simulation studies <ref> [DIY91, KB95] </ref> have examined the effects of variability on the performance of pipelines and concluded that whilst the performance of the pipestages will be that of the average case, the performance of the pipeline will not be. <p> Hence, the asynchronous design is at least doing no worse than a clocked design. Our results concur with simular observations in simulo by <ref> [KB95] </ref>. The processing time of most components is given by a function of the data presented to it. Our analysis has assumed random distributions of processing time independent of the data.
Reference: [Mil80] <author> R. Milner, </author> <title> Calculus of Communicating System, </title> <address> LNCS92, </address> <year> 1980. </year>
Reference-contexts: We call these two views forward and backward respectively. Our approach is to make use of timed extensions of Milner's <ref> [Mil80, Mil90] </ref> Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see [MT90, MT91, MT92, MT93]. <p> Our approach is to make use of timed extensions of Milner's <ref> [Mil80, Mil90] </ref> Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see [MT90, MT91, MT92, MT93]. <p> In the asynchronous calculus CCS 3 <ref> [Mil80, Mil90] </ref> a buffer element is described by the process: Buf f = in:out:Buf f and an n element buffer by the process: B (n) def = (Buf f [in 2 =out]jBuf f [in 2 =in; in 3 =out]j : : : jBuf f [in n =in])nfin 2 ; : :
Reference: [Mil83] <author> R. Milner, </author> <title> Calculi for Synchrony and Asynchrony, </title> <booktitle> Theoretical Computer Science 25(3), </booktitle> <pages> pp 267-310, </pages> <year> 1983. </year>
Reference-contexts: buffer by the process: B (n) def = (Buf f [in 2 =out]jBuf f [in 2 =in; in 3 =out]j : : : jBuf f [in n =in])nfin 2 ; : : : ; in n g We can give an analogous definition of a buffer element in SCCS 4 <ref> [Mil83] </ref>, as the following process: Buf f = $in : $out : Buf f however unlike the previous asynchronous definition this description insists that the in and out actions 5 are separated in time. That is to say the two events cannot occur simultaneously.
Reference: [Mil90] <author> R. Milner, </author> <title> Communication and Concurrency, </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Throughout we shall make use of formal description methods to present the systems understudy, and the results obtained have been derived directly from these formal descriptions. Throughout we make use of process algebraic notation <ref> [Mil90] </ref> to formally describe the systems under consideration. <p> We call these two views forward and backward respectively. Our approach is to make use of timed extensions of Milner's <ref> [Mil80, Mil90] </ref> Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see [MT90, MT91, MT92, MT93]. <p> Our approach is to make use of timed extensions of Milner's <ref> [Mil80, Mil90] </ref> Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see [MT90, MT91, MT92, MT93]. <p> In the asynchronous calculus CCS 3 <ref> [Mil80, Mil90] </ref> a buffer element is described by the process: Buf f = in:out:Buf f and an n element buffer by the process: B (n) def = (Buf f [in 2 =out]jBuf f [in 2 =in; in 3 =out]j : : : jBuf f [in n =in])nfin 2 ; : : <p> If we concentrate on the behaviour when the pipeline elements are full 6 , we obtain the following version of a processing element: 3 For brevity we omit an introduction to the notation of the process algebras used in this paper. We recommend that any reader makes us of <ref> [Mil90] </ref> for the basic calculi and [Tof94] for the extended probabilistic form. 4 $P = P + : $P is the asynchronisation operator of SCCS 5 The action in#out denotes the simultaneous performance on an in and an out action 6 As we are not using latches this does not cause
Reference: [MT90] <author> Moller, F. and C. Tofts, </author> <title> A Temporal Calculus of Communicating Systems, </title> <booktitle> Proceedings of CONCUR'90, Lecture Notes in Computer Science 458, </booktitle> <address> Amsterdam, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties <ref> [MT90, MT91, MT92, MT93] </ref> and probabilistic and priority properties [Tof90, Tof94]. 2 Deterministic costs Previous analyses of asynchronous pipelines [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. <p> We call these two views forward and backward respectively. Our approach is to make use of timed extensions of Milner's [Mil80, Mil90] Calculus of Communicating Systems (CCS) called TCCS <ref> [MT90] </ref> to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see [MT90, MT91, MT92, MT93]. <p> Our approach is to make use of timed extensions of Milner's [Mil80, Mil90] Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see <ref> [MT90, MT91, MT92, MT93] </ref>.
Reference: [MT91] <author> Moller, F. and C. Tofts, </author> <title> Relating Processes with Respect to Speed, </title> <booktitle> Proceedings of CONCUR'91, Lecture Notes in Computer Science 527, (Theories of Concurrency: Unification and Extension), </booktitle> <address> Amsterdam, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties <ref> [MT90, MT91, MT92, MT93] </ref> and probabilistic and priority properties [Tof90, Tof94]. 2 Deterministic costs Previous analyses of asynchronous pipelines [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. <p> Our approach is to make use of timed extensions of Milner's [Mil80, Mil90] Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see <ref> [MT90, MT91, MT92, MT93] </ref>.
Reference: [MT92] <author> Moller, F. and C. Tofts, </author> <booktitle> Behavioural Abstraction in TCCS Proceedings of ICALP'92, Lecture Notes in Computer Science, </booktitle> <address> Vienna, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties <ref> [MT90, MT91, MT92, MT93] </ref> and probabilistic and priority properties [Tof90, Tof94]. 2 Deterministic costs Previous analyses of asynchronous pipelines [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. <p> Our approach is to make use of timed extensions of Milner's [Mil80, Mil90] Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see <ref> [MT90, MT91, MT92, MT93] </ref>.
Reference: [MT93] <author> Moller, F. and C. Tofts, </author> <title> Reasoning about Resource Bounded Computations in Real Timed Process Calculi Proceedings of SofSem, </title> <year> 1993. </year>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties <ref> [MT90, MT91, MT92, MT93] </ref> and probabilistic and priority properties [Tof90, Tof94]. 2 Deterministic costs Previous analyses of asynchronous pipelines [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. <p> Our approach is to make use of timed extensions of Milner's [Mil80, Mil90] Calculus of Communicating Systems (CCS) called TCCS [MT90] to describe the behaviour of a micropipeline stage and its environment. 2.1 Introduction to TCCS For a full description of the timed extension to Milner's CCS [Mil80, Mil90] see <ref> [MT90, MT91, MT92, MT93] </ref>.
Reference: [RH80] <author> C.V. Ramamoorthy and G.S. Ho, </author> <title> Performance evaluation of asynchronous concurrent systems using Petri nets, </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE 6(5) </volume> <pages> 440-449, </pages> <year> 1980 </year>
Reference: [SS93] <author> J. Sparso and J. Staunstrup, </author> <title> Design and performance analysis of delay insensitive multi-ring structures, </title> <booktitle> IEEE 26th Hawaii Int. Conference on System Science, </booktitle> <address> pp349-358, </address> <year> 1993 </year>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties [MT90, MT91, MT92, MT93] and probabilistic and priority properties [Tof90, Tof94]. 2 Deterministic costs Previous analyses of asynchronous pipelines <ref> [Wil90, SS93, Wil94] </ref> of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. In this section we shall explicitly consider the parallelism within a Sutherland micropipeline [Sut89] stage and attempt to derive the performance of the system compositionally. <p> Most analyses <ref> [Wil90, SS93, Wil94] </ref> of the performance of asynchronous pipelines have concentrated on their deterministic time behaviour. It is assumed that each processing stage takes some fixed time to perform its function, much as in a synchronous circuit.
Reference: [Sut89] <author> I. Sutherland, </author> <title> Micropipelines, </title> <journal> CACM 32(6) </journal> <pages> 720-736, </pages> <year> 1989. </year>
Reference-contexts: Secondly, as a result of the self-timing properties, it is possible for the execution time of a computation stage to vary, thus requiring that we take account of such variability. One popular design style for asynchronous hardware is the use of Sutherland micropipelines <ref> [Sut89] </ref>, breaking the circuit up into processing stages which communicate via a small protocol. In the first part of this paper we concentrate on a timing analysis of this design style. <p> In this section we shall explicitly consider the parallelism within a Sutherland micropipeline <ref> [Sut89] </ref> stage and attempt to derive the performance of the system compositionally. That is to say, we shall derive the performance (time between request and acknowledgement) of each pipeline stage from the timing constraints of its environment. <p> To obey the environment rules <ref> [Sut89] </ref> for a two phase asynchronous system we cannot issue two rin actions unless we have received and ain action between them. We introduce the actions r and a to track the temporal behaviour of the complete system. <p> In the case of interruptible pipelines (as in execution units) latency can be helped by buffering between fast and slow stages, but in the long term this cannot improve pipeline performance. A further observation is the importance of the parallelism within a Sutherland <ref> [Sut89] </ref> pipeline stage. Ignoring this parallelism leads to an underestimate of both the occupancy and performance of the pipe system. 23 Since our approach is compositional it is straightforward to use it for calculating the performance of large systems. In particular we can identify when the system causes stalls. <p> In the longer term it would be interesting to characterise the performance of these more general forms of composition of asynchronous processors. Of great importance in asynchronous systems is the exploitation of average case <ref> [Sut89, Fur93] </ref> performance, in further work [Tof95] we examine the effect on asynchronous pipeline performance of variability in component execution speed. 3 The effect of variability A major benefit claimed for asynchronous systems is that they permit designers to concentrate on the average rather than the worst case performance of their
Reference: [Tof90] <author> C. Tofts, </author> <title> A Synchronous Calculus of Relative Frequency, </title> <booktitle> CONCUR '90, </booktitle> <publisher> Springer Verlag, LNCS 458. </publisher>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties [MT90, MT91, MT92, MT93] and probabilistic and priority properties <ref> [Tof90, Tof94] </ref>. 2 Deterministic costs Previous analyses of asynchronous pipelines [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. <p> A full introduction to this calculus can be found in <ref> [Tof90, Tof94] </ref>. <p> In the calculus WSCCS <ref> [Tof90, Tof94] </ref> we can describe the progress requirements by exploiting the priority constructs: Buf f = !:in : F Buf f + 1: : Buf f F buff def p in this case we insist that the process can perform either an input or an output, or both actions, as soon
Reference: [Tof94] <author> C. Tofts, </author> <title> Processes with Probabilities, Priorities and Time, </title> <booktitle> FACS 6(5): </booktitle> <pages> 536-564, </pages> <year> 1994. </year>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties [MT90, MT91, MT92, MT93] and probabilistic and priority properties <ref> [Tof90, Tof94] </ref>. 2 Deterministic costs Previous analyses of asynchronous pipelines [Wil90, SS93, Wil94] of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. <p> A full introduction to this calculus can be found in <ref> [Tof90, Tof94] </ref>. <p> In the calculus WSCCS <ref> [Tof90, Tof94] </ref> we can describe the progress requirements by exploiting the priority constructs: Buf f = !:in : F Buf f + 1: : Buf f F buff def p in this case we insist that the process can perform either an input or an output, or both actions, as soon <p> We recommend that any reader makes us of [Mil90] for the basic calculi and <ref> [Tof94] </ref> for the extended probabilistic form. 4 $P = P + : $P is the asynchronisation operator of SCCS 5 The action in#out denotes the simultaneous performance on an in and an out action 6 As we are not using latches this does not cause the same problems as the analysis
Reference: [Tof95] <author> C. Tofts, </author> <title> Analytic and locally approximate solutions to properties of probabilistic processes, </title> <institution> Department of Computer Science report, University of Manchester, UMCS-95-3-1, </institution> <year> 1995, </year> <note> also LNCS 1019. </note>
Reference-contexts: In the longer term it would be interesting to characterise the performance of these more general forms of composition of asynchronous processors. Of great importance in asynchronous systems is the exploitation of average case [Sut89, Fur93] performance, in further work <ref> [Tof95] </ref> we examine the effect on asynchronous pipeline performance of variability in component execution speed. 3 The effect of variability A major benefit claimed for asynchronous systems is that they permit designers to concentrate on the average rather than the worst case performance of their circuits [Fur93]. <p> The analytic methods and tools exploited to obtain performance measures for the systems are described in <ref> [Tof95] </ref>. <p> a comparison we present upper and lower bounds for the performance of a pipeline with: 3; 4; or 5 stages; f ast = 2, slow = 4 and p = 1 2 we obtain exact solutions to the performance of the pipeline from the process definitions using the tools in <ref> [Tof95] </ref>. The figures for the bounds are exact but presented as decimals for ease of comparison. <p> As an example from which others could be derived we present a performance analysis of a stage pipeline using the upper bound technique of Section 3 In the syntax of our tool <ref> [Tof95] </ref> the pipeline can be described as follows: bs Baf3 1@2.inf2^-1#ins#slow:Bas3 + 1@2.inf2^-1#inf#fast:Baf3 + 1.t:Baf3 bs Bas3 1@2.ins2^-1#ins#slow:Bas3 + 1@2.ins2^-1#inf#fast:Baf3 + 1.t:Bas3 bs Bbf3 1@2.inf3^-1#ins2#slow:Bbs3 + 1@2.inf3^-1#inf2#fast:Bbf3 + 1.t:Bbf3 bs Bbs3 1@2.ins3^-1#ins2#slow:Bbs3 + 1@2.ins3^-1#inf2#fast:Bbf3 + 1.t:Bbs3 bs Bcf3 1@2.ins3#slow:Bcs3 + 1@2.inf3#fast:Bcf3 + 1.t:Bcf3 bs Bcs3 1@2.ins3#slow:Bcs3 + 1@2.inf3#fast:Bcf3 + 1.t:Bcs3 basi
Reference: [Tof95a] <author> C. Tofts, </author> <title> A Compositional Analsysis of the Performance of Asynchronous Micropipelines proceedings ACM TAU'95, </title> <year> 1995. </year>
Reference: [Tof95b] <author> C. Tofts, </author> <title> The illusion of average case performance in asynchronous pipelines, </title> <note> submitted IEEE CAD, </note> <year> 1995. </year>
Reference: [Wil90] <author> T. E. Williams, </author> <title> Latency and throughput tradeoffs in self-timed asynchronous pipelines and rings, </title> <type> Stanford Technical Report CSL-TR-90-431, </type> <year> 1990. </year>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties [MT90, MT91, MT92, MT93] and probabilistic and priority properties [Tof90, Tof94]. 2 Deterministic costs Previous analyses of asynchronous pipelines <ref> [Wil90, SS93, Wil94] </ref> of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. In this section we shall explicitly consider the parallelism within a Sutherland micropipeline [Sut89] stage and attempt to derive the performance of the system compositionally. <p> Most analyses <ref> [Wil90, SS93, Wil94] </ref> of the performance of asynchronous pipelines have concentrated on their deterministic time behaviour. It is assumed that each processing stage takes some fixed time to perform its function, much as in a synchronous circuit.
Reference: [Wil94] <author> T. E. Williams, </author> <title> Performance of iterative computation in self-timed rings, </title> <journal> Journal of VLSI Signal Processing, </journal> <year> 1994. </year> <month> 40 </month>
Reference-contexts: Throughout we make use of process algebraic notation [Mil90] to formally describe the systems under consideration. In particular we use notations that permit the description of real time properties [MT90, MT91, MT92, MT93] and probabilistic and priority properties [Tof90, Tof94]. 2 Deterministic costs Previous analyses of asynchronous pipelines <ref> [Wil90, SS93, Wil94] </ref> of the performance of asynchronous pipelines have been holistic approaches to the determination of the circuit performance. In this section we shall explicitly consider the parallelism within a Sutherland micropipeline [Sut89] stage and attempt to derive the performance of the system compositionally. <p> We shall not assume that all of the stages of the pipeline have the same computation time. Since the performance of an asynchronous system can degrade if its environment makes unreasonable demands upon it <ref> [Wil94] </ref> we shall approach the calculation of performance from two perspectives. Initially we shall assume that the environment is always waiting for the pipeline and will always immediately launch another processing request on the termination signal of the previous one. <p> Initially we shall assume that the environment is always waiting for the pipeline and will always immediately launch another processing request on the termination signal of the previous one. Alternatively, there may be some delay between the acknowledgement and the next request, and this can actually improve pipeline performance <ref> [Wil94] </ref>, in which case an alternative view of performance is necessary. We call these two views forward and backward respectively. <p> Essentially the computation circuitry behaves as an extra pipeline stage, thus permitting a far greater level of pipeline occupancy than would be suspected <ref> [Wil94] </ref> (provided that subsequent pipeline stages can execute rapidly enough). 2.2.1 Adding a latch A possible method of improving performance when a `fast' stage is followed by a slow one is to introduce some buffering in the form of an extra latch stage between the units. <p> Most analyses <ref> [Wil90, SS93, Wil94] </ref> of the performance of asynchronous pipelines have concentrated on their deterministic time behaviour. It is assumed that each processing stage takes some fixed time to perform its function, much as in a synchronous circuit. <p> extended probabilistic form. 4 $P = P + : $P is the asynchronisation operator of SCCS 5 The action in#out denotes the simultaneous performance on an in and an out action 6 As we are not using latches this does not cause the same problems as the analysis of Williams <ref> [Wil94] </ref> would suggest 25 U buff def = (1 p)! 2 :out#in#slow : p : U buff + ! 2 :out#in#fast : U buff +1: : U buff Note, that in the above we have simply prevented it from performing unaccompanied in actions, and have added the extra tick caused by
References-found: 20

