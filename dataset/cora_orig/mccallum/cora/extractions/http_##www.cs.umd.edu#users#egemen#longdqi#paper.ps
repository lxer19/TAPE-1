URL: http://www.cs.umd.edu/users/egemen/longdqi/paper.ps
Refering-URL: http://www.cs.umd.edu/users/egemen/papers/paper.html
Root-URL: 
Title: Evaluation of Incremental Data Structures and Algorithms for Dynamic Query Interfaces  
Author: Egemen Tanin Richard Beigel Ben Shneiderman 
Keyword: Data Structure, Algorithm, Database, User Interface, Information Visualization, Direct Manipulation, and Dynamic Query.  
Affiliation: Human-Computer Interaction Laboratory 4 Department of Computer Science University of Maryland  
Note: Design and  
Abstract: Research Report Abstract Dynamic query interfaces (DQIs) are a recently developed database access mechanism that provides continuous real-time feedback to the user during query formulation. Previous work shows that DQIs are an elegant and powerful interface to small databases. Unfortunately, when applied to large databases, previous DQI algorithms slow to a crawl. We present a new incremental approach to DQI algorithms and display updates that works well with large databases, both in theory and in practice. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ahlberg, C. and Shneiderman, B., </author> <title> Visual Information Seeking: Tight Coupling of Dynamic Query Filters with Starfield Displays, </title> <booktitle> Proc. ACM SIGCHI '94, </booktitle> <year> 1994, </year> <pages> pp. 313-317. </pages>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated. <p> Auxiliary data structures We augment the active subset with data structures that facilitate continuous querying (users can tolerate a response time of about 0.1 seconds for continuous operations <ref> [1] </ref>). Reprocessing The auxiliary data structures change only when the user clicks on a widget. After such an action the user will accept a delay of approximately 1 second or less, during which we reconstruct the auxiliary data structures. <p> Setup occurs when the query previewer passes control to the DQI. During setup, the widgets, starfield display, bars, and charts are initially drawn on the display. The DQI reads the active subset. In addition, it makes a copy of the active subset and re-scales each attribute to the range <ref> [1; p] </ref> where p is the number of pixels in the attribute's range slider. This step is important because we need this re-scaled information frequently. Because setup occurs infrequently, we can allow several seconds for it. Selection occurs when the user clicks on a range slider. <p> For the purpose of timing, we say that a single query occurs each time the DQI detects a change in the position of the mouse on the range slider. Experiments show that DQIs must process each query in about 0.1 seconds in order to give a continuous response <ref> [1] </ref>. During the selection operation, the DQI computes the maximum hit set, which is the hit set determined by the extreme values for the selected attribute and the current ranges for the other attributes. <p> Thus the total time for querying is O (a p + u). 5 Experiments Preliminary experiments show that the incremental approach can deal with an active subset consisting of 100,000 records with 10 attributes each [13]. In comparison, the pioneering work in the area, the Film Finder program <ref> [1] </ref>, could handle a database of 10,000 records with 10 attributes, and some of the standard data structures analyzed in [10] and tested in [11] demonstrated scalability up to 20,000 records with 10 attributes.
Reference: [2] <author> Ahlberg, C. and Wistrand, E., IVEE: </author> <title> An Information Visualization and Exploration Environment, </title> <booktitle> Proc. IEEE Information Visualization, </booktitle> <year> 1995, </year> <pages> pp. 66-73. </pages>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated. <p> A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated. Experiments have shown that querying with DQIs is faster, easier, more pleasant, and less error-prone than with other querying interfaces <ref> [2, 14] </ref>. A sample DQI is presented in Figure 1 (created by [8]). Queries are made using widgets, such as range sliders (for continuous data attributes), alphanumeric sliders (for textual attributes), toggles (for binary attributes), and check boxes (for discrete multi-valued attributes), to specify each attribute (dimension) of the data.
Reference: [3] <author> Doan, K., Plaisant, C., and Shneiderman, B., </author> <title> Query Previews in Networked Information Systems, </title> <booktitle> Proc. Forum on Advances in Digital Libraries, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996, </year> <pages> pp. 120-129. </pages>
Reference-contexts: Incremental display Slight changes in the query tend to cause only slight changes in the output. By computing and displaying the difference, we can update the display continuously. We envision using the DQI algorithms in tandem with a query previewer <ref> [3] </ref> that allows the user to browse a huge database and select a manageably small subset to scan. Once the user selects such a subset, the query previewer passes its bounding rectangle to the DQI, which then takes control. <p> Instead, we will use an incremental approach where we compute the difference DH between consecutive hit sets, which in practice should take time only O (jDHj 11=a ).) * combine our DQIs with a query previewer <ref> [3] </ref> in order to produce a new state of the art in interactive dynamic database access.
Reference: [4] <author> Eick, S., </author> <title> Data Visualization Sliders, </title> <booktitle> Proc. ACM User Interface Software and Technology, </booktitle> <year> 1994, </year> <pages> pp. 119-120. </pages>
Reference: [5] <author> Fishkin, K. and Stone, M. C., </author> <title> Enhanced Dynamic Queries via Movable Filters, </title> <booktitle> Proc. ACM SIGCHI '95, </booktitle> <year> 1995, </year> <pages> pp. 415-420. </pages>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated.
Reference: [6] <author> Goldstein, J. and Roth, S. F., </author> <title> Using Aggregation and Dynamic Queries for Exploring Large Data Sets, </title> <booktitle> Proc. ACM SIGCHI '94, </booktitle> <year> 1994, </year> <pages> pp. 23-29. </pages>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated.
Reference: [7] <institution> Human-Computer Interaction Laboratory (HCIL), University of Maryland at College Park, Homefinder, </institution> <year> 1992. </year> <note> The down-loadable PC demonstration is available from ftp://ftp.cs.umd.edu/pub/hcil/Demos/DQ/dq-home.zip. </note>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated.
Reference: [8] <institution> Information Visualization and Exploration Environment (IVEE) Development AB, </institution> <note> http://www.ivee.com/. Online Java demo and down-loadable demos for various platforms. </note>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated. <p> Experiments have shown that querying with DQIs is faster, easier, more pleasant, and less error-prone than with other querying interfaces [2, 14]. A sample DQI is presented in Figure 1 (created by <ref> [8] </ref>). Queries are made using widgets, such as range sliders (for continuous data attributes), alphanumeric sliders (for textual attributes), toggles (for binary attributes), and check boxes (for discrete multi-valued attributes), to specify each attribute (dimension) of the data.
Reference: [9] <author> Ioannidis, Y., </author> <title> Dynamic Information Visualization, </title> <journal> ACM SIG-MOD Record, </journal> <volume> Vol. 25, No. 4, </volume> <year> 1996, </year> <pages> pp. 16-20. </pages>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated.
Reference: [10] <author> Jain, V. and Shneiderman, B., </author> <title> Data Structures for Dynamic Queries: An Analytical and Experimental Evaluation, </title> <booktitle> Proc. Advanced Visual Interfaces, Available from ACM, </booktitle> <address> New York, </address> <year> 1994, </year> <pages> pp. 1-11. </pages>
Reference-contexts: In comparison, the pioneering work in the area, the Film Finder program [1], could handle a database of 10,000 records with 10 attributes, and some of the standard data structures analyzed in <ref> [10] </ref> and tested in [11] demonstrated scalability up to 20,000 records with 10 attributes. The following subsections describe the experimentation on an implementation made by using our methods and show the results. First, we describe the implementations and the environment for the experiments. <p> This could be good for selection, because it is sub-linear. But it could be bad for querying, because it is close to linear, and prior work seems to confirm this doubt <ref> [10, 11, 13] </ref>.
Reference: [11] <author> Pointek, J., </author> <type> personal communication, </type> <note> reachable via email: pointek@cs.umd.edu, </note> <year> 1995. </year>
Reference-contexts: In comparison, the pioneering work in the area, the Film Finder program [1], could handle a database of 10,000 records with 10 attributes, and some of the standard data structures analyzed in [10] and tested in <ref> [11] </ref> demonstrated scalability up to 20,000 records with 10 attributes. The following subsections describe the experimentation on an implementation made by using our methods and show the results. First, we describe the implementations and the environment for the experiments. The experimentation method and the results are presented next. <p> Experiments show that this approach is faster than previous approaches and can deal with an order of magnitude of larger datasets (i.e., 100; 000 records with 10 attributes). The querying time is dominated by the starfield update time (also observed in <ref> [11, 13] </ref>). <p> This could be good for selection, because it is sub-linear. But it could be bad for querying, because it is close to linear, and prior work seems to confirm this doubt <ref> [10, 11, 13] </ref>.
Reference: [12] <author> Shneiderman, B., </author> <title> Dynamic Queries for Visual Information Seeking, </title> <journal> IEEE Software, </journal> <volume> Vol. 11, No. 6, </volume> <year> 1994, </year> <pages> pp. 70-77. </pages>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated.
Reference: [13] <author> Tanin, E., Beigel, R., and Shneiderman, B., </author> <title> Incremental Data Structures and Algorithms for Dynamic Query Interfaces, </title> <journal> ACM SIGMOD Record, </journal> <volume> Vol. 25, No. 4, </volume> <year> 1996, </year> <pages> pp. 21-24. </pages>
Reference-contexts: We propose a new approach to DQI algorithms that can handle larger databases than previous implementations. This paper expands our previous note <ref> [13] </ref> by providing a detailed explanation and evaluation of our DQI algorithms. We present our approach in general in Section 2. We give a detailed explanation of the data structures and algorithms in Section 3. We analyze the complexity of our algorithm in Section 4. <p> Computing histograms takes time O (a p). Updating the starfield takes time O (u). Thus the total time for querying is O (a p + u). 5 Experiments Preliminary experiments show that the incremental approach can deal with an active subset consisting of 100,000 records with 10 attributes each <ref> [13] </ref>. In comparison, the pioneering work in the area, the Film Finder program [1], could handle a database of 10,000 records with 10 attributes, and some of the standard data structures analyzed in [10] and tested in [11] demonstrated scalability up to 20,000 records with 10 attributes. <p> Experiments show that this approach is faster than previous approaches and can deal with an order of magnitude of larger datasets (i.e., 100; 000 records with 10 attributes). The querying time is dominated by the starfield update time (also observed in <ref> [11, 13] </ref>). <p> This could be good for selection, because it is sub-linear. But it could be bad for querying, because it is close to linear, and prior work seems to confirm this doubt <ref> [10, 11, 13] </ref>.
Reference: [14] <author> Williamson, C. and Shneiderman, B., </author> <title> The Dynamic Home-Finder: Evaluating Dynamic Queries in a Real-Estate Information Exploration System, </title> <booktitle> Proc. ACM SIGIR '92, </booktitle> <year> 1992, </year> <pages> pp. 339-346. </pages>
Reference-contexts: 1 Dynamic Querying Dynamic query interfaces (DQIs) are a recently developed mechanism for specifying queries and visualizing their results <ref> [1, 2, 5, 6, 7, 9, 8, 12, 14] </ref>. Unlike textual query languages such as SQL, DQIs are graphical. A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated. <p> A great advantage of DQIs is that they provide continuous feedback to the user as the query is being formulated. Experiments have shown that querying with DQIs is faster, easier, more pleasant, and less error-prone than with other querying interfaces <ref> [2, 14] </ref>. A sample DQI is presented in Figure 1 (created by [8]). Queries are made using widgets, such as range sliders (for continuous data attributes), alphanumeric sliders (for textual attributes), toggles (for binary attributes), and check boxes (for discrete multi-valued attributes), to specify each attribute (dimension) of the data.
References-found: 14

