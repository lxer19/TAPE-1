URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR385.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: Derivation of a DRAM Memory Interface by Sequential Decomposition  
Author: Kamlesh Rath, Bhaskar Bose, and Steven D. Johnson 
Note: To appear in the proceedings of the 1993 IEEE International Conference on Computer Design (ICCD '93), Cambridge, Massachusetts,  
Date: 385  june 1993  October, 1993.  
Affiliation: indiana university computer science department  
Pubnum: technical report no.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> W. A. Hunt, </author> <title> "A formal HDL and its use in the FM9001 verification," in Mechanized Reasoning in Hardware Design, </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: To appear in Proceedings of ICCD '93, IEEE. y Email: rathk@cs.indiana.edu A realization of the Nqthm FM9001 <ref> [1] </ref> specification, called DDD-FM9001 [2], was derived using the DDD [5] system. The derivation involved using system factorization to decompose the memory component. Factorization imposed restrictions on the design limiting the memory to a static RAM realization. <p> As an alternative to bottom-up verification techniques, our approach facilitates top-down design by factoring sequential components from designs using transformations. 1.2 DDD-FM9001 The DDD-FM9001 is a general purpose microprocessor realized in FPGAs, mechanically derived from Hunt's Nqthm FM9001 specification <ref> [1] </ref>. The FM9001 is a 32-bit microprocessor mechanically verified in the Nqthm theorem prover and implemented in LSI Logic's gate array technology. Details of the derivation of the DDD-FM9001 are reported in [2].
Reference: [2] <author> B. Bose and S. D. Johnson, "DDD-FM9001: </author> <title> Derivation of a verified microprocessor: An exercise in integrating verification with formal derivation," </title> <booktitle> in Proceedings of CHARME '93, </booktitle> <publisher> Springer, LNCS 683. </publisher>
Reference-contexts: To appear in Proceedings of ICCD '93, IEEE. y Email: rathk@cs.indiana.edu A realization of the Nqthm FM9001 [1] specification, called DDD-FM9001 <ref> [2] </ref>, was derived using the DDD [5] system. The derivation involved using system factorization to decompose the memory component. Factorization imposed restrictions on the design limiting the memory to a static RAM realization. <p> The FM9001 is a 32-bit microprocessor mechanically verified in the Nqthm theorem prover and implemented in LSI Logic's gate array technology. Details of the derivation of the DDD-FM9001 are reported in <ref> [2] </ref>. This paper shows the steps involved in the decomposition of a DRAM memory sub-system from the DDD-FM9001 system description.
Reference: [3] <author> S. D. Johnson, </author> <title> "Manipulating logical organization with system factorizations," in Hardware Specification, Verification and Synthesis: </title> <journal> Mathematical Aspects, </journal> <pages> pp. 260-281, </pages> <publisher> Springer, </publisher> <month> July </month> <year> 1989. </year> <note> LNCS 408. </note>
Reference-contexts: Our tools are a set of transformations that are used to engineer an implementation from a specification, with each transformation accumulating information about the implementation. In a functional framework, a transformation called system factorization <ref> [3] </ref> was used earlier to extract functional components with naive interaction schemes. As a generalization of system factorization, we have developed sequential decomposition based on a finite state machine model to decompose a system description into interacting sequential machines [4].
Reference: [4] <author> K. Rath and S. D. Johnson, </author> <title> "Toward a basis for protocol specification and process decomposition," </title> <booktitle> in Proceedings of CHDL '93, </booktitle> <publisher> Elsevier. </publisher>
Reference-contexts: In a functional framework, a transformation called system factorization [3] was used earlier to extract functional components with naive interaction schemes. As a generalization of system factorization, we have developed sequential decomposition based on a finite state machine model to decompose a system description into interacting sequential machines <ref> [4] </ref>. A description of the interaction of a component with its environment is a parameter in the decomposition. fl Research reported herein was supported, in part, by NSF, under grants numbered MIP 89-21842 and MIP 92-08745 and by NASA, under grant number NGT-50861. <p> This paper shows the steps involved in the decomposition of a DRAM memory sub-system from the DDD-FM9001 system description. Starting with specifications for DRAM and DDD-FM9001, we will derive the system organization shown in Figure 1. 2 Preliminaries We use Interface Specification Language (ISL) <ref> [4] </ref> to specify the interaction of a machine with its environment. All communication is modeled as values over connected ports. ISL is based on finite state machine semantics, details of which are discussed in [4]. The complementation operation on machines is briefly discussed. <p> derive the system organization shown in Figure 1. 2 Preliminaries We use Interface Specification Language (ISL) <ref> [4] </ref> to specify the interaction of a machine with its environment. All communication is modeled as values over connected ports. ISL is based on finite state machine semantics, details of which are discussed in [4]. The complementation operation on machines is briefly discussed. We discuss the notion of path implementation and show its use in the derivation exercise.
Reference: [5] <author> S. D. Johnson and B. Bose, </author> <title> "A system for mechanized digital design derivation," </title> <booktitle> in Proceedings of ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: To appear in Proceedings of ICCD '93, IEEE. y Email: rathk@cs.indiana.edu A realization of the Nqthm FM9001 [1] specification, called DDD-FM9001 [2], was derived using the DDD <ref> [5] </ref> system. The derivation involved using system factorization to decompose the memory component. Factorization imposed restrictions on the design limiting the memory to a static RAM realization.
Reference: [6] <author> G. Borriello, </author> <title> "Specification and synthesis of interface logic," High-Level VLSI Synthesis, </title> <year> 1991. </year>
Reference-contexts: Borriello uses timing diagrams to specify the interface of a circuit and synthesis tools to generate the interface automatically <ref> [6] </ref>. While Boriello develops these external interface specifications as a means to guide synthesis, our goal is to use them to guide design decomposition.
Reference: [7] <author> M. K. Yajnik and M. J. Ciesielski, </author> <title> "Finite state machine decomposition using multi-way partitioning," </title> <booktitle> in Proceedings of ICCD '92, </booktitle> <pages> pp. 320-323, </pages> <publisher> IEEE. </publisher>
Reference-contexts: Borriello uses timing diagrams to specify the interface of a circuit and synthesis tools to generate the interface automatically [6]. While Boriello develops these external interface specifications as a means to guide synthesis, our goal is to use them to guide design decomposition. Yajnik and Ciesielski <ref> [7] </ref> perform top-down machine decomposition by partitioning outputs and states in state graphs with the objective of performance and area optimization of synthesized PLA circuits.
Reference: [8] <author> A. Kuehlmann and R. A. Bergamaschi, </author> <title> "High-level state machine specification and synthesis," </title> <booktitle> in Proceedings of ICCD '92, </booktitle> <pages> pp. 536-539, </pages> <publisher> IEEE. </publisher>
Reference-contexts: Specification at different levels of abstraction and partitioning of control and data flow graphs for synthesis have been considered by Kuehlmann and Bergamaschi <ref> [8] </ref> to obtain smaller layouts. Our approach is to enable designers to decompose machines into logically and functionally distinct components. We do not use heuristics to partition a design based on layout constraints.
Reference: [9] <author> W. Wolf, A. Takach, and T.-C. Lee, </author> <title> "Architectural optimization methods for control-dominated machines," High-Level VLSI Synthesis, </title> <year> 1991. </year>
Reference-contexts: We do not use heuristics to partition a design based on layout constraints. Wolf et.al use a finite state machine model to specify a network of communicating machines and have control manipulation transformations to search the design space <ref> [9] </ref>. Drusinsky and Harel have used state-charts for bottom-up hierarchical specification [10] by embedding simpler state machines at a lower level of specification into states at a higher level of specification. The tree of state machines is then synthesized into a network of PLAs.
Reference: [10] <author> D. Drusinsky and D. Harel, </author> <title> "Using statecharts for hardware description and synthesis," </title> <journal> Transactions on CAD, </journal> <volume> vol. 8, </volume> <pages> pp. 798-807, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: We do not use heuristics to partition a design based on layout constraints. Wolf et.al use a finite state machine model to specify a network of communicating machines and have control manipulation transformations to search the design space [9]. Drusinsky and Harel have used state-charts for bottom-up hierarchical specification <ref> [10] </ref> by embedding simpler state machines at a lower level of specification into states at a higher level of specification. The tree of state machines is then synthesized into a network of PLAs.
Reference: [11] <author> R. P. Kurshan, </author> <title> "Analysis of discrete event simulation," </title> <booktitle> in Stepwise Refinement of Distributed Systems pp. </booktitle> <pages> 414-453, </pages> <publisher> Springer, </publisher> <month> July </month> <year> 1989. </year> <note> LNCS 430. </note>
Reference-contexts: Drusinsky and Harel have used state-charts for bottom-up hierarchical specification [10] by embedding simpler state machines at a lower level of specification into states at a higher level of specification. The tree of state machines is then synthesized into a network of PLAs. In related formal methods research, Kurshan <ref> [11] </ref> verifies reactive systems by stepwise reduction and refinement using L-automata with language and process homomorphism. Davie [12] has used constraints on the target architecture and the context of a design in CIRCAL to reduce the complexity of verification.
Reference: [12] <author> B. S. Davie, </author> <title> A Formal, Hierarchical Design and Validation Methodology for VLSI. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1988. </year>
Reference-contexts: The tree of state machines is then synthesized into a network of PLAs. In related formal methods research, Kurshan [11] verifies reactive systems by stepwise reduction and refinement using L-automata with language and process homomorphism. Davie <ref> [12] </ref> has used constraints on the target architecture and the context of a design in CIRCAL to reduce the complexity of verification.
Reference: [13] <author> Texas Instruments, </author> <title> MOS Memory Data Book, </title> <year> 1989. </year>
Reference-contexts: , where r 1 ; r 2 are the start states, and f 1 ; f 2 are the final states of M 1 ; M 2 . 3 DRAM Specification Simplified timing diagrams of the read and CAS-before-RAS refresh cycles adapted from the data-sheets of the 256K-bit DRAM, TI-TMS4256, <ref> [13] </ref> are shown in Figures 2 and 3.
References-found: 13

