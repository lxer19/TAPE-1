URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/Obliq.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/
Root-URL: http://www.cs.berkeley.edu
Email: luca@src.dec.com  
Title: A Language with Distributed Scope  
Author: Luca Cardelli 
Address: 130 Lytton Ave, Palo Alto, CA 94301, USA  
Affiliation: Digital Equipment Corporation, Systems Research Center  
Note: November 14, 1994 11:25 AM Page 1  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abadi, M. and L. Cardelli, </author> <title> A theory of primitive objects: untyped and first-order systems. </title> <booktitle> Proc. Theoretical Aspects of Computer Software . Springer-Verlag. </booktitle> <year> 1994. </year>
Reference-contexts: The Obliq object primitives were designed in parallel with work on the semantics and type theory of objects <ref> [1] </ref>; distributed scoping and distributed semantics, however, are not treated there. Influence of Modula-3 Network Objects The characteristics of Modula-3 Network Objects (M3NOs) had a major influence on the Obliq language design and implementation.
Reference: [2] <author> Apple, </author> <title> AppleScript Language Guide. </title> <publisher> Addison Wesley. </publisher> <year> 1993. </year>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript <ref> [2] </ref>, VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [3] <author> Bal, H.E., M.F. Kaashoek, </author> <title> and A.S. Tanenbaum, Orca: a language for parallel programming of distributed systems. </title> <journal> IEEE Transactions on Software Engineering 18(3), </journal> <pages> 190-205. </pages> <year> 1992. </year>
Reference-contexts: Note that requirement (2) does not contradict invariant (1). The obvious approach to implementing serialized objects, adopted by many concurrent languages, is to asso Page 6 November 14, 1994 11:25 AM ciate a mutex with each object (for example, see <ref> [3] </ref>). Such mutexes are acquired when a method of an object is invoked, and released when the method returns, guaranteeing condition (1). This way, however, we have a deadlock whenever a method calls a sibling, violating condition (2). <p> Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca <ref> [3] </ref>, Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects. Stamos and Gifford [29] eloquently describe remote execution as a generalization of remote procedure call, and survey previous work on remote execution mechanisms.
Reference: [4] <author> Bharat, K. and M.H. Brown, </author> <title> Building distributed applications by direct manipulation. </title> <booktitle> Proc. </booktitle> <month> UIST94 . </month> <year> 1994. </year>
Reference-contexts: net_export ("obj1", Namer, - serialized, protected, ... migrate =&gt; meth (self, engineName) net_export ("obj1", Namer, migrateProc (self, engineName)); end -; This way, old clients of obj1 go through aliasing indirections, but new clients acquiring obj1 from the name server operate directly on the migrated object. 4.7 Application Servers Visual Obliq <ref> [4] </ref> is an interactive distributed-applica - tion and user-interface generator, based on Obliq. All distributed applications built in Visual Obliq follow the same model, which we may call the application server model. <p> Status Obliq has been available at Digital SRC for about a year and a half. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [13] and 3D graphics [25], and as the basis of the Visual Obliq distributed-application builder <ref> [4] </ref>. The Obliq implementation provides access to many popular Modula-3 libraries [20], and to an extensive user interface toolkit [14] including digital video [18]. Obliq can be used as a standalone interactive interpeter.
Reference: [5] <author> Birrell, </author> <title> A.D., An introduction to programming with t h re a d s . In Systems Programming with Modula-3, Chapter 4, </title> <editor> G. Nelson, ed. </editor> <publisher> Prentice Hall. </publisher> <year> 1991. </year>
Reference-contexts: Condi - tional synchronization (where threads wait on a mutex and a condition) allows multiple threads to be simultaneously present inside an object, although at most one thread is active at any time. Producer-consumer behavior can be handled this way <ref> [5] </ref>. A watch statement is provided to wait on a condition in conjunction with the implicit mutex of an object. <p> In addition, conditional synchronization can be used for standard concurrency-control problems. More complex situations may require sophisticated uses of explicit mutexes; for this, Obliq supports the full spectrum of Modula-3 thread primitives <ref> [5, 20] </ref>. Explicit mutexes, conditions, and threads cannot be transmitted, since these values are strongly site-dependent. There is no automatic serialization for variables or arrays. If necessary, their access can be controlled through serialized objects or explicit mutexes.
Reference: [6] <author> Birrell, A.D., D. Evers, G. Nelson, S. Owicki, and E. Wobber, </author> <title> Distributed garbage collection for network objects. </title> <type> Report 116. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution> <year> 1993. </year>
Reference-contexts: The object is now available through the name server, as long as the site that exports it is alive. Objects are garbage collected at a site when they are no longer referenced, either locally or via the network <ref> [6] </ref>. We shall see soon that compute servers are definable via simple network objects. However, compute servers are so common and useful that we provide them as primitives, calling them execution engines . <p> The server simply returns a network reference to this object, and is no longer engaged. (Client resources at the server site are released when the client garbage collects the search agent, or when the client site dies <ref> [6] </ref>.) We show below an example of what the client can now do. The client starts a remote search via start from background thread, and periodically request a progress report via report . If the search is successful within a given time period, everything is fine.
Reference: [7] <author> Birrell, A.D., G. Nelson, S. Owicki, and E. Wobber, </author> <title> Network objects. </title> <booktitle> Proc. 14th Symposium on Operating Systems Principles. </booktitle> <year> 1993. </year>
Reference-contexts: Network services normally accept a variety of messages; it is then natural to see each service as a network object (or, more neutrally, as a network interface). Obliq supports objects in this spirit, relying for its implementation on Modula-3s network objects <ref> [7] </ref>. The Obliq object primitives are designed to be simple and powerful, with a coherent relationship between their local and distributed semantics. Obliq objects are collec - tions of named fields, with four basic operations: selection/invocation, updating/overriding, cloning, and aliasing. There are no class hierarchies, nor complex method-lookup strategies.
Reference: [8] <author> Birrell, A.D., G. Nelson, S. Owicki, and E. Wobber, </author> <title> Network objects . Report 115. </title> <institution> Digital Equipment Corporation, Systems Research Center. </institution> <year> 1994. </year>
Reference-contexts: Such channels are initially established by interaction with a name server. A name server for Obliq programs is an external process uniquely identified by an IP address; it simply maintains a table associating text strings with network references <ref> [8] </ref>. The connection protocol between two Obliq sites is as follows. The first site registers a local, or remote, object under a certain name with a known name server. The second site asks the name server for (the network reference to) the object registered under that name.
Reference: [9] <author> Blaschek, G., </author> <title> Typesafe OOP with prototypes: the concepts of Omega. </title> <booktitle> Structured Programming 12(12), </booktitle> <pages> 1-9. </pages> <year> 1991. </year>
Reference-contexts: In spirit, this model is close to Bornings original proto 2 The terms concatenation based and copy based have also been used. type-based proposal [10], and to recent languages that are not delegation-based <ref> [9, 30] </ref>. The embedding-based model is straightforward, and is well suited to network applications because of the self - contained nature of the objects. The delegation-based model, in contrast, maximizes sharing across objects; this is not always desirable in a distributed context.
Reference: [10] <author> Borning, A.H., </author> <title> Classes versus prototypes in object-oriented languages. </title> <booktitle> Proc. ACM/IEEE Fall Joint Computer Conference. </booktitle> <year> 1986. </year>
Reference-contexts: Objects Obliq is an objectoriented language based on objects, rather than classes. An object is a self-contained exemplar of behavior that can be either constructed directly or cloned from other objects. The Obliq language is therefore prototype-based <ref> [10] </ref>, but is not delegation-based [22]. Obliq belongs to a category of prototype-based languages that we may call embedding-based 2 [31]. <p> In spirit, this model is close to Bornings original proto 2 The terms concatenation based and copy based have also been used. type-based proposal <ref> [10] </ref>, and to recent languages that are not delegation-based [9, 30]. The embedding-based model is straightforward, and is well suited to network applications because of the self - contained nature of the objects.
Reference: [11] <author> Brewer, </author> <title> E.A. and C.A. Waldspurger, Preventing recursion deadlock in concurrent objectoriented systems. </title> <booktitle> Proc. 1992 International Parallel Processing Symposium, </booktitle> <address> Beverly Hills, California. </address> <note> (Also, Report MIT/LCS/TR-526.). </note> <year> 1992. </year>
Reference-contexts: We find this behavior unacceptable because it causes innocent programs to deadlock without good reason. In particular, an object that works well sequentially may suddenly deadlock when a mutex is added. Brewer and Waldspurger <ref> [11] </ref> give an overview of previous solutions to this serialization problem. A way to satisfy conditions (1) and (2) together is to use reentrant mutexes, that is, mutexes that do not deadlock when relocked by the same thread (for example, see [17]).
Reference: [12] <author> Brockschmidt, K., </author> <title> Inside OLE2. </title> <publisher> Microsoft Press. </publisher> <year> 1994. </year>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA <ref> [12, 23] </ref>, and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [13] <author> Brown, M.H., </author> <title> Report on the 1993 SRC algorithm animation festival. </title> <type> Report n.126. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution> <note> To appear. </note> <year> 1994. </year>
Reference-contexts: Status Obliq has been available at Digital SRC for about a year and a half. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation <ref> [13] </ref> and 3D graphics [25], and as the basis of the Visual Obliq distributed-application builder [4]. The Obliq implementation provides access to many popular Modula-3 libraries [20], and to an extensive user interface toolkit [14] including digital video [18]. Obliq can be used as a standalone interactive interpeter.
Reference: [14] <author> Brown, M.H. and J.R. Meehan, </author> <title> The FormsVBT Reference Manual. </title> <type> Unpublished. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution> <year> 1994. </year>
Reference-contexts: The Obliq implementation provides access to many popular Modula-3 libraries [20], and to an extensive user interface toolkit <ref> [14] </ref> including digital video [18]. Obliq can be used as a standalone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing them to interact remotely through Obliq scripts [16]. The implementation and documentation are available on the World Wide Web at http:-//www. research.- digital.-com/-SRC/-home.-html.
Reference: [15] <author> Cardelli, L., </author> <title> The Amber machine. </title> <booktitle> Proc. Combinators and Functional Programming Languages. Lecture Notes in Computer Science 242. </booktitle> <publisher> Springer-Verlag. </publisher> <year> 1986. </year>
Reference-contexts: Field lookup is based on a nearly constant-time caching technique that does not penalize large objects. A separate cache is used for each operation instance; the cache records the position where a field was last found in an object <ref> [15] </ref>. 2.2 Simple Examples Let us examine some simple examples, just to became familiar with the Obliq syntax and semantics. A full explanation of object operations is given in the next section. The following object has a single method that invokes itself through self (the s parameter).
Reference: [16] <author> Cardelli, L., Obliq: </author> <title> A language with distributed scope. </title> <type> Report n.122. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution> <year> 1994. </year>
Reference-contexts: Obliq can be used as a standalone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing them to interact remotely through Obliq scripts <ref> [16] </ref>. The implementation and documentation are available on the World Wide Web at http:-//www. research.- digital.-com/-SRC/-home.-html. Future Work Issues of authentication, security, authority delegation, and accounting are being explored. Acknowledgments The Network Objects project at Digital SRC provided the infrastructure without which Obliq would not have been conceived. <p> Future Work Issues of authentication, security, authority delegation, and accounting are being explored. Acknowledgments The Network Objects project at Digital SRC provided the infrastructure without which Obliq would not have been conceived. Alan Knaff implemented the metaparser layer of the Obliq parser. Appendix: Syntax Overview (See reference <ref> [16] </ref> for details.) TOP-LEVEL PHRASES a; any term or definition ended by ; DEFINITIONS (denoted by d; identifiers are denoted by x, terms are denoted by a) let x 1 =a 1 ,...,x n =a n definition of constant identifiers let rec x 1 =a 1 ,...,x n =a n definition
Reference: [17] <author> Fort, </author> <title> TOOL reference manual. Fort, </title> <publisher> Inc. </publisher> <year> 1994. </year> <month> November 14, </month> <note> 1994 11:25 AM Page 15 </note>
Reference-contexts: Brewer and Waldspurger [11] give an overview of previous solutions to this serialization problem. A way to satisfy conditions (1) and (2) together is to use reentrant mutexes, that is, mutexes that do not deadlock when relocked by the same thread (for example, see <ref> [17] </ref>). On the one hand, reentrant mutexes may be too liberal, because they allow a method to call a method of a different object, which then can call back a method of the present object without deadlocking. <p> Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort <ref> [17] </ref>, and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects. Stamos and Gifford [29] eloquently describe remote execution as a generalization of remote procedure call, and survey previous work on remote execution mechanisms.
Reference: [18] <author> Freeman, S.M.G. and M.S. Manasse, </author> <title> Adding digital video to an objectoriented user interface toolkit . Proc. </title> <publisher> ECOOP94. Springer-Verlag. </publisher> <year> 1994. </year>
Reference-contexts: The Obliq implementation provides access to many popular Modula-3 libraries [20], and to an extensive user interface toolkit [14] including digital video <ref> [18] </ref>. Obliq can be used as a standalone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing them to interact remotely through Obliq scripts [16]. The implementation and documentation are available on the World Wide Web at http:-//www. research.- digital.-com/-SRC/-home.-html.
Reference: [19] <author> Gosling, J., Sundew: </author> <title> a distributed and extensible window system. </title> <booktitle> Proc. Winter Usenix Technical Conference. Usenix Association. </booktitle> <year> 1986. </year>
Reference-contexts: The engine provides the database as an argument to client procedures: DataBase Server Site: net_exportEngine ("DBServer", Namer, dataBase); A database client could simply send over procedures performing queries on the database (which, for complex queries, would be more efficient than repeatedly querying the server remotely <ref> [19, 29] </ref>). <p> Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew <ref> [19] </ref>, Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [20] <author> Horning, J., B. Kalsow, P. McJones, and G. Nelson, </author> <title> Some useful Modula-3 interfaces. </title> <type> Report 113. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution> <year> 1993. </year>
Reference-contexts: In addition, conditional synchronization can be used for standard concurrency-control problems. More complex situations may require sophisticated uses of explicit mutexes; for this, Obliq supports the full spectrum of Modula-3 thread primitives <ref> [5, 20] </ref>. Explicit mutexes, conditions, and threads cannot be transmitted, since these values are strongly site-dependent. There is no automatic serialization for variables or arrays. If necessary, their access can be controlled through serialized objects or explicit mutexes. <p> In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [13] and 3D graphics [25], and as the basis of the Visual Obliq distributed-application builder [4]. The Obliq implementation provides access to many popular Modula-3 libraries <ref> [20] </ref>, and to an extensive user interface toolkit [14] including digital video [18]. Obliq can be used as a standalone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing them to interact remotely through Obliq scripts [16].
Reference: [21] <author> Jul, E., H. Levy, N. Hutchinson, and A. Black, </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> A C M Transactions on Computer Systems 6(1), </journal> <pages> 109-133. </pages> <year> 1988. </year>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald <ref> [21] </ref>, Orca [3], Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects. Stamos and Gifford [29] eloquently describe remote execution as a generalization of remote procedure call, and survey previous work on remote execution mechanisms.
Reference: [22] <author> Lieberman, H., </author> <title> Using prototypical objects to implement shared behavior in object oriented systems. </title> <booktitle> Proc. </booktitle> <address> OOPSLA86. </address> <publisher> ACM Press. </publisher> <year> 1986. </year>
Reference-contexts: Objects Obliq is an objectoriented language based on objects, rather than classes. An object is a self-contained exemplar of behavior that can be either constructed directly or cloned from other objects. The Obliq language is therefore prototype-based [10], but is not delegation-based <ref> [22] </ref>. Obliq belongs to a category of prototype-based languages that we may call embedding-based 2 [31]. <p> By doing this, we are able to put network redirection under flexible program control, as shown later in the case of object migration. For method invocation, aliasing redirections behave differently from the redirections typical of delegation-based languages <ref> [22] </ref>: in aliasing, self is bound to the redirection target; in delegation, self is bound to the redirection source.
Reference: [23] <author> Mansfield, R., </author> <title> Visual Basic for Applications . Ven-tana Press. </title> <year> 1994. </year>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA <ref> [12, 23] </ref>, and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [24] <author> Milner, R., M. Tofte, and R. Harper, </author> <title> The definition of Standard ML. </title> <publisher> MIT Press. </publisher> <year> 1989. </year>
Reference-contexts: In this spirit, for example, Obliq could be used to experiment in the design and implementation of agent/place paradigms [34], using the basic techniques of section 4. Related Work Obliqs features and application domains overlap with programming languages such as ML <ref> [24, 28] </ref> , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32].
Reference: [25] <author> Najork, M. and M.H. Brown, </author> <title> A library for visualizing combinatorial structures. </title> <booktitle> Proc. IEEE Visualiza-tion94. </booktitle> <year> 1994. </year>
Reference-contexts: Status Obliq has been available at Digital SRC for about a year and a half. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [13] and 3D graphics <ref> [25] </ref>, and as the basis of the Visual Obliq distributed-application builder [4]. The Obliq implementation provides access to many popular Modula-3 libraries [20], and to an extensive user interface toolkit [14] including digital video [18]. Obliq can be used as a standalone interactive interpeter.
Reference: [26] <author> Nelson, G., ed. </author> <title> Systems programming with Mod-ula-3. </title> <publisher> Prentice Hall. </publisher> <year> 1991. </year>
Reference-contexts: In this spirit, for example, Obliq could be used to experiment in the design and implementation of agent/place paradigms [34], using the basic techniques of section 4. Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 <ref> [26] </ref>, and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32].
Reference: [27] <author> Ousterhout, J.K., </author> <title> Tcl and the Tk toolkit . Addison-Wesley. </title> <year> 1994. </year>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl <ref> [27] </ref>, AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [28] <author> Reppy, </author> <title> A higher-order concurrent language. </title> <booktitle> Proc. SIGPLAN91 Conference on Programming Language Design and Implementation. </booktitle> <publisher> ACM Press. </publisher> <year> 1991. </year>
Reference-contexts: In this spirit, for example, Obliq could be used to experiment in the design and implementation of agent/place paradigms [34], using the basic techniques of section 4. Related Work Obliqs features and application domains overlap with programming languages such as ML <ref> [24, 28] </ref> , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32].
Reference: [29] <author> Stamos, J.W. and D.K. Gifford, </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems 12(4), </journal> <pages> 537-565. </pages> <year> 1990. </year>
Reference-contexts: An engine can be exported from a site via the primitive: Server Site: net_exportEngine ("Engine1@Site1", Namer, arg); The arg parameter is supplied to all the client procedures received by the engine. It may contain local data as well as sitespecific procedures (services <ref> [29] </ref>). Multiple engines can be exported from the same site under different names. An engine, once imported, behaves like a procedure of one argument. <p> The engine provides the database as an argument to client procedures: DataBase Server Site: net_exportEngine ("DBServer", Namer, dataBase); A database client could simply send over procedures performing queries on the database (which, for complex queries, would be more efficient than repeatedly querying the server remotely <ref> [19, 29] </ref>). <p> None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects. Stamos and Gifford <ref> [29] </ref> eloquently describe remote execution as a generalization of remote procedure call, and survey previous work on remote execution mechanisms. Their proposal, though, restricts the transmission of higher-order procedures and procedures with free identifiers, inhibiting the techniques of section 4.
Reference: [30] <author> Taivalsaari, A., Kevo, </author> <title> a prototype-based objectori-ented language based on concatenation and module operations. </title> <type> Report LACIR 92-02. </type> <institution> University of Victoria. </institution> <year> 1992. </year>
Reference-contexts: In spirit, this model is close to Bornings original proto 2 The terms concatenation based and copy based have also been used. type-based proposal [10], and to recent languages that are not delegation-based <ref> [9, 30] </ref>. The embedding-based model is straightforward, and is well suited to network applications because of the self - contained nature of the objects. The delegation-based model, in contrast, maximizes sharing across objects; this is not always desirable in a distributed context.
Reference: [31] <author> Taivalsaari, A., </author> <title> A critical view of inheritance and reusability in objectoriented programming . Jyvskyl Studies in computer science, </title> <institution> economics and statistics No.23, A. Salminen ed. University of Jyvskyl. </institution> <year> 1993. </year>
Reference-contexts: An object is a self-contained exemplar of behavior that can be either constructed directly or cloned from other objects. The Obliq language is therefore prototype-based [10], but is not delegation-based [22]. Obliq belongs to a category of prototype-based languages that we may call embedding-based 2 <ref> [31] </ref>. This name indicates that all the methods of an object, as well as its value fields, are embedded in the object itself (at least in principle) rather than being located in other objects or classes.
Reference: [32] <author> Thomsen, B., L. Leth, S. Prasad, T.-M. Kuo, A. Kramer, F. Knabe, and A. Giacalone, </author> <title> Facile Antigua Release Programming Guide . ECRC-93-20. </title> <institution> Euro-pean Computer-Industry Research Centre. </institution> <year> 1993. </year>
Reference-contexts: application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile <ref> [32] </ref>. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects. Stamos and Gifford [29] eloquently describe remote execution as a generalization of remote procedure call, and survey previous work on remote execution mechanisms.
Reference: [33] <author> Ungar, D. and R.B. Smith, </author> <title> Self: the power of simplicity. </title> <booktitle> Lisp and Symbolic Computation 4(3). </booktitle> <year> 1991. </year>
Reference-contexts: In a delegation-based model it would be more difficult to obtain the complete relocation of an object and its methods. Typically, this would require the coordinated migration of the objects parents <ref> [33] </ref>, and would affect other objects that share the same parents. 2.1 Fields An Obliq object is a collection of fields containing methods, aliases, or other values. A field containing a method is called a method field. A field containing an alias is called an alias field . <p> In this spirit, for example, Obliq could be used to experiment in the design and implementation of agent/place paradigms [34], using the basic techniques of section 4. Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self <ref> [33] </ref>; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32].
Reference: [34] <author> White, </author> <title> J.E., Telescript technology: the foundation for the electronic marketplace . White Paper. General Magic, </title> <publisher> Inc. </publisher> <year> 1994. </year>
Reference-contexts: This way, the application components can be (initially) distributed according to dynamic criteria. 4.5 Agent Migration In this example we consider the case of an untethered agent that moves from site to site carrying along some state <ref> [34] </ref>. <p> Where in doubt, we have given precedence to flexible mechanism over robust methodology, hoping that methodology will develop with experience. In this spirit, for example, Obliq could be used to experiment in the design and implementation of agent/place paradigms <ref> [34] </ref>, using the basic techniques of section 4. Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with <p> agent/place paradigms <ref> [34] </ref>, using the basic techniques of section 4. Related Work Obliqs features and application domains overlap with programming languages such as ML [24, 28] , Modula-3 [26], and Self [33]; with scripting languages such as Sun - dew [19], Tcl [27], AppleScript [2], VBA [12, 23], and Tele-script [34]; and with distributed languages such as Emerald [21], Orca [3], Fort [17], and Facile [32]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
References-found: 34

