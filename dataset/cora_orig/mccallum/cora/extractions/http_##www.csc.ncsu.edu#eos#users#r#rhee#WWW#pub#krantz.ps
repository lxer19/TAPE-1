URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/pub/krantz.ps
Refering-URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/publication.html
Root-URL: http://www.csc.ncsu.edu
Email: fatk,sal,hirsch,rhee,jules,vssg@mathcs.emory.edu  
Title: Design and Implementation of a Distributed X-Multiplexor  
Author: Alan T. Krantz Sarah E. Chodrow Michael D. Hirsch Injong Rhee Julie Sult Vaidy S. Sunderam 
Address: Atlanta, GA 30322  
Affiliation: Department of Mathematics and Computer Science Emory University  
Abstract: Application sharing is an important aspect of collaborative computing. One mechanism for sharing applications is a multiplexor, a tool that broadcasts input/output messages from a single client to multiple displays. We describe the design and implementation of a multiplexor for X windows that supports a heterogeneous environment and works effectively across both local and wide area networks. This X-multiplexor is composed of two distinct components, the Collaborative Computing Frameworks X-Multiplexor (CCFX) which acts as a pseudo-server for the client, and the Collaborative Computing Session Manager (CCSM) which renders the client images and supplies the user interface to the system. In effect, CCSM acts as a distributed window manager, ensuring that all participants have the same view of the shared clients. This two-headed approach offers significant gains in flexibility and resource usage. CCFX and CCSM can communicate using any reliable transport protocol. This can result in significant reduction of bandwidth, decreased latency, and avoids some TCP/IP communication required by the X protocol. In addition, this architecture facilitates the creation of a virtual X environment. Using this virtual environment, instead of an actual X server's environment, and then translating the virtual properties to a specific server's properties, allows for more robust support of heterogeneous systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Jones, </author> <title> "Multidisplay software in X: A survey of architectures," in The X Resource, </title> <journal> vol. </journal> <volume> 6, </volume> <pages> pp. 97-113, </pages> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1993. </year>
Reference-contexts: Background and Related Work. Though application sharing in the Unix environment is not new, motivation for developing CCFX/CCSM stems from limitations of previous work. Some previous work has been proprietary (e.g., Sun Microsystems' ShowMe), others used a centralized architecture (e.g., xmx <ref> [1] </ref>), or failed to function in a heterogeneous environment (e.g., xtv [2]). Furthermore, many systems for writing collaboration-aware applications (e.g., Group-Kit [3] and MMconf [4]) have no facility for sharing collaboration-unaware applications. The windowing system most commonly found on UNIX platforms is called X. <p> This pseudo-server can then send the instructions for rendering the client's image to multiple X-servers. This is known as X-multiplexing. In most X-multiplexors <ref> [2, 1, 5] </ref>, a client interacts with a central pseudo-server that then sends the X-requests to a number of X servers, as illustrated in passed to a single process, the X-multiplexor, via TCP/IP, and then are forwarded by this process to the appropriate X servers, again using TCP/IP [6].
Reference: [2] <author> H. Abdel-Wahab and M. Feit, "XTV: </author> <title> A framework for sharing X window clients in remote synchronous collaboration," </title> <booktitle> in IEEE TriComm `91, </booktitle> <pages> pp. 159-167, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Though application sharing in the Unix environment is not new, motivation for developing CCFX/CCSM stems from limitations of previous work. Some previous work has been proprietary (e.g., Sun Microsystems' ShowMe), others used a centralized architecture (e.g., xmx [1]), or failed to function in a heterogeneous environment (e.g., xtv <ref> [2] </ref>). Furthermore, many systems for writing collaboration-aware applications (e.g., Group-Kit [3] and MMconf [4]) have no facility for sharing collaboration-unaware applications. The windowing system most commonly found on UNIX platforms is called X. <p> This pseudo-server can then send the instructions for rendering the client's image to multiple X-servers. This is known as X-multiplexing. In most X-multiplexors <ref> [2, 1, 5] </ref>, a client interacts with a central pseudo-server that then sends the X-requests to a number of X servers, as illustrated in passed to a single process, the X-multiplexor, via TCP/IP, and then are forwarded by this process to the appropriate X servers, again using TCP/IP [6]. <p> A separate connection for communication between a CCSM and its local X server is established for each client CCSM han-dles. CCSM translates window identifiers in a fashion similar to <ref> [2] </ref>, by replacing the base portion of the ID assigned by CCFX with the one assigned by the local X server while keeping the client's offset.
Reference: [3] <author> M. Roseman and S. Greenberg, </author> <title> "Building real time groupware with GroupKit, a groupware toolkit," </title> <journal> ACM Transactions on CHI, </journal> <month> March </month> <year> 1996. </year>
Reference-contexts: Some previous work has been proprietary (e.g., Sun Microsystems' ShowMe), others used a centralized architecture (e.g., xmx [1]), or failed to function in a heterogeneous environment (e.g., xtv [2]). Furthermore, many systems for writing collaboration-aware applications (e.g., Group-Kit <ref> [3] </ref> and MMconf [4]) have no facility for sharing collaboration-unaware applications. The windowing system most commonly found on UNIX platforms is called X.
Reference: [4] <author> T. Crowley, P. Milazzo, E. Baker, H. Forsdick, and R. Tomlinson, "MMConf: </author> <title> An infrastructure for building shared multimedia applications," </title> <booktitle> Proceedings, CSCW 90, </booktitle> <pages> pp. 329-342, </pages> <year> 1990. </year>
Reference-contexts: Some previous work has been proprietary (e.g., Sun Microsystems' ShowMe), others used a centralized architecture (e.g., xmx [1]), or failed to function in a heterogeneous environment (e.g., xtv [2]). Furthermore, many systems for writing collaboration-aware applications (e.g., Group-Kit [3] and MMconf <ref> [4] </ref>) have no facility for sharing collaboration-unaware applications. The windowing system most commonly found on UNIX platforms is called X.
Reference: [5] <author> A. Nye, </author> <title> Volume One: Xlib Programming Manual for Version 11. </title> <address> Sebastopol, CA: </address> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1993. </year>
Reference-contexts: This pseudo-server can then send the instructions for rendering the client's image to multiple X-servers. This is known as X-multiplexing. In most X-multiplexors <ref> [2, 1, 5] </ref>, a client interacts with a central pseudo-server that then sends the X-requests to a number of X servers, as illustrated in passed to a single process, the X-multiplexor, via TCP/IP, and then are forwarded by this process to the appropriate X servers, again using TCP/IP [6]. <p> The selection of the virtual X server and the type of Visual a client uses is determined by the port that the client uses when connecting to CCFX. A complete description of TrueColor and PseudoColor modes can be found in <ref> [5] </ref>. The set of supported keycodes is static and arbitrarily chosen to be in the range of 8 to 167 to correspond to the virtual keyboard table we have constructed. Visual Translation. <p> CCFX directly processes all X-requests regarding color manipulation, including AllocColorCells, LookupColor, QueryColors, AllocColor, AllocNamedColor and CreateColormap. In TrueColor mode the processing of these requests is straightforward. In PseudoColor mode the processing of the X-request is somewhat more complicated. CCFX initially constructs a color cube <ref> [5] </ref>. &gt;From this color cube, it performs a best fit for AllocColor, AllocNamedColor, LookupColor and QueryColors by taking the requested rgb and finding the pixel with the closest preallocated rgb value.
Reference: [6] <author> H. Abdel-Wahab and K. Jeffay, </author> <title> "Issues, problems and solutions in sharing X clients on multiple displays," </title> <journal> Journal of Internetworking Research & Experience, </journal> <pages> pp. 1-15, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: most X-multiplexors [2, 1, 5], a client interacts with a central pseudo-server that then sends the X-requests to a number of X servers, as illustrated in passed to a single process, the X-multiplexor, via TCP/IP, and then are forwarded by this process to the appropriate X servers, again using TCP/IP <ref> [6] </ref>. The pseudo-server often chooses one X server as the "master" X server and then uses the master X server to supply characteristics such as Visual (type of graphical display supported), keyboard mapping (mapping of scan code to key type), and ID space for the client.
Reference: [7] <author> S. Cheung, S. Chodrow, T. Goddard, P. Gray, M. Grigni, M. Hirsch, P. Hutto, A. Krantz, S. Olesen, I. Rhee, J. Sult, and V. Sunderam, "CCF: </author> <title> Collaborative computing frameworks." </title> <note> In preparation., </note> <year> 1997. </year>
Reference-contexts: To address these limitations, we have designed and implemented the Collaborative Computing Frameworks X-Multiplexor (CCFX) and Collaborative Computing Session Manager (CCSM) as a distributed X-multiplexor that allows the sharing of existing X applications without modification on heterogeneous hardware. CCFX/CCSM also supports the development of collaboration-aware tools <ref> [7] </ref>, but that is beyond the scope of this paper. Implementation Objectives. In designing the CCSM and CCFX we focused on three objectives: the ability to share well-behaved 1 applications; support for heterogeneity; and efficiency over a WAN. We emphasize support of a heterogeneous environment. <p> We have implemented CCFX/CCSM on top of CCTL [10], a reliable multicast transport protocol developed in conjunction with the Collaborative Computing Frameworks project <ref> [7] </ref>. CCFX/CCSM could utilize any reliable multicast communication protocol. WYSIWIS. CCSM performs two major tasks. The first deals with translation of X protocol stream between the virtual machine (defined by CCFX) and the user's X server. The second function is session and window management for the collaborative session.
Reference: [8] <author> J. Fulton and C. Kantarjiev, </author> <title> "An update on low bandwidth X (LBX)," </title> <booktitle> in Proceedings of the 7th Annual X Technical Conference, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: This approach would either require that existing applications be relinked, which is not always possible, or the use of shared libraries which are not supported on all systems. To take further advantage of the CCFX/CCSM architecture we are exploring solutions for dynamic compression schemes similar to LBX <ref> [8] </ref> and FHBX [9] to reduce the overhead of WAN communications. We have implemented CCFX/CCSM on top of CCTL [10], a reliable multicast transport protocol developed in conjunction with the Collaborative Computing Frameworks project [7]. CCFX/CCSM could utilize any reliable multicast communication protocol. WYSIWIS. CCSM performs two major tasks.
Reference: [9] <author> J. Danskin, Q. Zhang, and D. Abrahams-Gessel, </author> <title> "Fast higher bandwidth X," </title> <booktitle> in International Multimedia Networking Conference, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: To take further advantage of the CCFX/CCSM architecture we are exploring solutions for dynamic compression schemes similar to LBX [8] and FHBX <ref> [9] </ref> to reduce the overhead of WAN communications. We have implemented CCFX/CCSM on top of CCTL [10], a reliable multicast transport protocol developed in conjunction with the Collaborative Computing Frameworks project [7]. CCFX/CCSM could utilize any reliable multicast communication protocol. WYSIWIS. CCSM performs two major tasks.
Reference: [10] <author> I. Rhee, S. Y. Cheung, P. W. Hutto, and V. S. Sunderam, </author> <title> "Group communication support for distributed multimedia and CSCW systems," </title> <booktitle> in 17th IEEE International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: To take further advantage of the CCFX/CCSM architecture we are exploring solutions for dynamic compression schemes similar to LBX [8] and FHBX [9] to reduce the overhead of WAN communications. We have implemented CCFX/CCSM on top of CCTL <ref> [10] </ref>, a reliable multicast transport protocol developed in conjunction with the Collaborative Computing Frameworks project [7]. CCFX/CCSM could utilize any reliable multicast communication protocol. WYSIWIS. CCSM performs two major tasks. <p> The current transport layer used by CCFX/CCSM is provided by the CCTL (collaborative computing transport layer) library <ref> [10] </ref>, which allows efficient communication among CCFXs and CCSMs in a session. CCTL uses reliable multicast when possible, and otherwise uses fast reliable unicast. The underlying transport mechanism is hidden from CCFX/CCSM through a programming model that allows both point--to-point and broadcast communication. <p> As the transport layer performance improves, collaboration performance improves considerably. More substantive user-based experiments are underway. 5.2 Quantitative Experiments Below we describe our preliminary results in evaluating the performance of CCFX/CCSM. Note that both CCFX/CCSM and the CCTL transport layer <ref> [10] </ref> over which the system is implemented are works in progress, and that these benchmarks do not systematically cover all aspects of the system. We ran a series of four benchmarks based on a slightly modified version of the standard X benchmark xbench [13]. <p> This X-multiplexor consists of two components, CCFX and CCSM, that communicate using the CCTL transport layer <ref> [10] </ref>. CCFX behaves as a pseudo-server to the client applications, translating local requests and events to the virtual environment. CCSM acts as a front end to each user's X server, translating the virtual environment events to the local display, and provides the desktop through which the collaboration occurs.
Reference: [11] <author> A. Krantz, I. Rhee, C. Breuker, S. Chodrow, and V. Sunderam, </author> <title> "Supporting input multiplexing in a heterogeneous environment," </title> <booktitle> in Third Joint Conference of Information Sciences, </booktitle> <year> 1997. </year>
Reference-contexts: It is designed to support shared applications in several modes by allowing, for example, input multiplex application to share the virtual machine <ref> [11] </ref> as well as CCF aware applications to place windows on the desktop. However, we concentrate in this paper on X-multiplexed applications. The Virtual Desktop. When CCSM begins, it appears as a standard X application.
Reference: [12] <author> G. Chung, </author> <title> "Accommodating latecomers in a system for synchronous collaboration," </title> <type> Tech. Rep. </type> <institution> TR91-038, Department of Computer Science, University of North Carolina at Chapel Hill, </institution> <year> 1991. </year>
Reference-contexts: How much memory an optimized solution using dependency graphs <ref> [12] </ref> would save is unclear, although one could construct an artificial application that would require an optimized solution to function. 5 Experimental Results In this section, we present the results from two classes of experiments: qualitative experiments in which we test the usability of CCFX/CCSM, and quantitative experiments in which we
Reference: [13] <editor> C. Gittinger, </editor> <address> "http://tecfa.unige.ch/pub /software/unix/xbench/," </address> <month> April </month> <year> 1995. </year>
Reference-contexts: We ran a series of four benchmarks based on a slightly modified version of the standard X benchmark xbench <ref> [13] </ref>. We compared CCFX/CCSM performance to the performance of a local client, a remote client, and xmx on a LAN, and measured CCFX/CCSM scalability. We chose to compare our system to xmx for two reasons.
References-found: 13

