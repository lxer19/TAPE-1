URL: http://delicias.dia.fi.upm.es/WORKSHOP/ECAI98/papers/talon.ps
Refering-URL: http://delicias.dia.fi.upm.es/WORKSHOP/ECAI98/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: 2  
Title: 1 Safeguard to control the behaviour of Task-Based Systems  
Author: Xavier Talon and Christine Pierret-Golbreich , 
Keyword: Mail Error! Marcador no definido. Error! Marcador no definido.  
Address: 91405 Orsay Cedex  35043 Rennes Cedex  
Affiliation: 1 L.R.I. URA CNRS University Paris-Sud Orsay  LARI, UFR Sciences Sociales University Rennes 2  
Abstract: First generation rule-based systems benefit of a lot of works and mathematical results. However they also have some limitations, often due to the implicit feature of their control. It is why, specific modelling primitives, like problemsolving methods and tasks, have been introduced in task-based frameworks in order to elicit the problem-solving process. However until now, no rigorous guaranties are offered about the dynamic behaviour of task-based systems. MetaTask is a knowledge-based system framework specially designed to provide an explicit representation of the control in knowledge-based systems, while ensuring right behavioural properties. MetaTask benefits of a formal specification and of a metalayer, which have made possible the proofs of termination, correctness and semi-completeness. This paper presents the basic principles of MetaTask and sketch these behavioural proofs. 
Abstract-found: 1
Intro-found: 1
Reference: [ARS94] <author> H. Andreka, M. Ryan, P.-Y. Schobbens, </author> <title> "Laws of Generalised Priority Operators" , Proceedings of the International Workshop on Information Systems - Correctness and Reusability (ISCORE94), </title> <editor> R. Wieringa, R.Feenstra (Eds.), </editor> <address> VUA IR-357, </address> <note> September 1994 (to be published by World Scientific Publishers). </note>
Reference: [BHK98] <author> J.A. Bergstra, J. Heering and P. </author> <title> Klint Algebraic Specification ACM Press, Frontier Series, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989 </year>
Reference: [Bid88] <institution> Michel Bidoit PLUSS, un langage pour le dveloppement de spcifications algbriques modulaires Thse de docteur dtat, Universit Paris-Sud Centre dOrsay, </institution> <year> 1988. </year>
Reference: [Cha92] <author> Chandrasekaran, B., Johnson, T. R., & Smith, J. W. </author> <year> (1992). </year> <title> "Task-structure analysis for knowledge modelling". </title> <journal> Communications of th ACM, </journal> <volume> 35(9), </volume> <pages> 124-137. </pages>
Reference-contexts: Each base (e.g. abstraction model, matching model etc.) is related to a particular inference step. The second idea is that a control flow can be defined between these elementary inferences. Problem Solving Methods or Tasks <ref> [Cha92] </ref> have been introduced to capture this knowledge. A Task specifies a problem to be reached and a Problem Solving Method specifies how to achieve a task i.e. its decomposition into inferences or subtasks and the control flow between them.
Reference: [Del93] <author> Delouis , I. </author> <type> LISA, </type> <institution> un language rflexif pour la modlisation du contrle , Doctorat de luniversity of Paris-Sud (1993). </institution>
Reference-contexts: The language and its control primitives MetaTask provides a powerful language, which allows to represent the different epistemological primitives needed to model explicitely the knowledge. MetaTask offers a real programming language with well defined syntax and semantics, opposed to other task languages, e.g. LISA <ref> [Del93] </ref>, which are only packages providing specific primitives, kinds of macro defined to capture the control knowledge. The detailed syntax of the MetaTask language and its semantics, defined thanks to ADTs, are presented in [Tal98] [PT96].
Reference: [Fen95] <author> Fensel, D. </author> <title> (1995) "The Knowledge Acquisition and Representation Language KARL" Boston Dordrecht London: </title> <publisher> Kluwer Academic Publishers. </publisher> <editor> [HB92] van Harmelen, F., Balder, J. </editor> <year> (1992). </year> <title> "ML 2 : a formal language for KADS models of expertise." </title> <journal> Knowledge Acquisition, </journal> <volume> 4, </volume> <pages> p. 127-161. </pages>
Reference-contexts: Correctness is difficult to prove because of the difficulty to capture the semantics of the different primitives. Completeness implies that the system do not abandon the solving-process before possibilities have been tried. Some systems have been formalised using different logical languages or new formal languages: K BS KARL <ref> [Fen95] </ref>, (ML)^2 [HB92], TFL [PT96] [TP97], etc. However, these forma lisations are so complex that the behaviour of these systems is difficult to be predicted or proved. - 2 - MetaTask, a framework dedicated to the control representation.
Reference: [HR85] <editor> Hayes-Roth, B. </editor> <booktitle> (1985) "A blackboard archite - cture for control" Artificial Intelligence, 26, p. </booktitle> <pages> 251-321. </pages>
Reference-contexts: This choice problem is the well-known control problem , defined by Barbara Hayes-Roth as: Which of its potential actions an AI system should use at each step of the solving process <ref> [HR85] </ref>. The inference engine handles rules in a uniform way, independently from their meaning. An advantage of this approach is its generality (e.g. GPS [EN69]).
Reference: [JS92] <author> Jonker, W, Spee, J. </author> <year> (1992), </year> <title> "Yet another formalisation of KADS Conceptual models." </title> <booktitle> Proceedings of the 6 th European Knowledge Acquisition for Knowledge-Based Systems Workshop, </booktitle> <pages> pp 211-229. </pages>
Reference: [New92] <author> Newell, A. </author> <year> (1982). </year> <title> "The knowledge level." </title> <journal> Artificial Intelligence, </journal> <volume> 18. </volume>
Reference: [Pie94] <author> Pierret-Golbreich, C. </author> <year> (1994). </year> <title> "TASK MODEL: a framework for the design of models of expertise and their operationalization" . In 8th Banff Knowledge Acquisition Workshop, </title> <type> Banff: </type> <institution> University of Calgary. </institution>
Reference: [PT96] <author> Pierret-Golbreich, C., Talon, X., "TFL, </author> <title> an algebraic language to specify the dynamic behavior of Knowledge-Based Systems." </title> <journal> The Knowledge Engineering Review, </journal> <volume> 11(3), </volume> <month> September </month> <year> 1996. </year>
Reference-contexts: Completeness implies that the system do not abandon the solving-process before possibilities have been tried. Some systems have been formalised using different logical languages or new formal languages: K BS KARL [Fen95], (ML)^2 [HB92], TFL <ref> [PT96] </ref> [TP97], etc. However, these forma lisations are so complex that the behaviour of these systems is difficult to be predicted or proved. - 2 - MetaTask, a framework dedicated to the control representation. MetaTask has been developed to tackle the control problem in a better way. <p> LISA [Del93], which are only packages providing specific primitives, kinds of macro defined to capture the control knowledge. The detailed syntax of the MetaTask language and its semantics, defined thanks to ADTs, are presented in [Tal98] <ref> [PT96] </ref>. We only give here an informal presentation of its primitives specific to the control: Problem, Method, Task-Module, and Strategy 1. Problems. MetaTask makes a clear distinction between what is expected to be achieved by the system, and how it should be achieved. <p> Elimination after elimination, this control knowledge loses its effect and all the not suited methods are progressively eliminated. The solving process will restart after the impasse is bypassed. An Algebraic Specification The whole MetaTask environment has been uniformly formalised with abstract data types [Bis88][BHK89]. This algebraic specification <ref> [PT96] </ref> provides formal semantics to the MetaTask language. Thus the semantics of MetaTask programs representing knowledge base systems is perfectly defined. This formal specification is a mathematical object, which enables relatively easily to make proofs.
Reference: [Rei91] <author> Reinders, M. et al. </author> <title> (1991) "A conceptual modelling framework for knowledge-level reflection" , AI Communications, </title> <type> 4(2-3), </type> <pages> 87-94. </pages>
Reference-contexts: The meta-reasoning is responsible of controlling the reasoning of the system. Its control decisions are based on the strategies. The strategic language and its formalisation by abstract data types are not described here (see [PT97a] for more details). The meta-control MetaTask approach is reflexive <ref> [Rei91] </ref>: a meta-system takes charge of the meta-reasoning. The knowledge of this meta-system is represented in the MetaTask language. Its dynamic knowledge is described like for any other system in terms of problems, task-modules and strategies, used respectively to represent the meta tasks, methods, strategies of this meta-system .
Reference: [Rya92] <author> M. D. </author> <title> Ryan "Representing defaults as sentences with reduced priority". </title> <editor> In B. Nebel and W. Swartout, editors, </editor> <booktitle> Proc. Third International Conference on Principles of Knowledge Representation and Reasoning (KR92). </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [Ste90] <author> Steels, L. </author> <year> (1990), </year> <title> "Components of expertise." </title> <journal> AI Magazine, </journal> <volume> p. </volume> <pages> 28-49. </pages>
Reference: [Tal98] <institution> Talon Xavier MtaTask : un langage ddi au contrle dans les systmes Base de Connaissances Phd thesis, Universit Paris-Sud Centre dOrsay, </institution> <note> to be defended in 1998. </note>
Reference-contexts: LISA [Del93], which are only packages providing specific primitives, kinds of macro defined to capture the control knowledge. The detailed syntax of the MetaTask language and its semantics, defined thanks to ADTs, are presented in <ref> [Tal98] </ref> [PT96]. We only give here an informal presentation of its primitives specific to the control: Problem, Method, Task-Module, and Strategy 1. Problems. MetaTask makes a clear distinction between what is expected to be achieved by the system, and how it should be achieved. <p> Input and output define the problem input/output concepts. Preconditions, post-conditions are assertions over the input/output that have to be satisfied before and after the problem resolution [Pie94][PT96]. The following syntax is used to define problems in the MetaTask language <ref> [Tal98] </ref>: characInput fi inputs : expr_set characOutput fi outputs : expr_set characPre fi pre : expr_bool characPost fi post : expr_bool characStruct fi structure : id_name characStructs fi structures : expr_set characMethod fi method : id_name characMethods fi methods : expr_set characProblem fi characInput | characOutput | characPre | characPost characProblems <p> The MetaTask language is a dedicated programming language with a clear syntax and semantics. This language allows easy writing of a knowledge base and a compiler has been written <ref> [Tal98] </ref>. A formal specification, based on Abstract Data Types, is associated with the MetaTask language. This specification provides clear semantics to the represented knowledge. This choice makes possible behavioural properties proofs. The novel contribution is the safeguard mechanism to control Task-Based Systems behaviour.
Reference: [TP97] <author> Talon, X., Pierret-Golbreich, C. </author> <year> (1997). </year> <title> A language to specify strategies for flexible problem-solving , 7th Workshop on Knowledge Engineering Methods and Languages </title>
Reference-contexts: Completeness implies that the system do not abandon the solving-process before possibilities have been tried. Some systems have been formalised using different logical languages or new formal languages: K BS KARL [Fen95], (ML)^2 [HB92], TFL [PT96] <ref> [TP97] </ref>, etc. However, these forma lisations are so complex that the behaviour of these systems is difficult to be predicted or proved. - 2 - MetaTask, a framework dedicated to the control representation. MetaTask has been developed to tackle the control problem in a better way. <p> This relatively simple language allows to compose in a generic way any level of preferences and to solve all the conflict problems that could arise. More details on the MetaTask strategic language can be found in <ref> [TP97] </ref>. 2. Task-modules. In T ASK , a task-module refers to an intelligent specialist of a problem type. A Task-module is composed of a "functional" part - 3 - and an "operational" part. The functional part states the module competence in terms of the problem type it is relevant to.
References-found: 16

