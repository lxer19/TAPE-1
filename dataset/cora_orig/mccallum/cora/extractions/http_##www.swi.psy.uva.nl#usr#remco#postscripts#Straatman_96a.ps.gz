URL: http://www.swi.psy.uva.nl/usr/remco/postscripts/Straatman:96a.ps.gz
Refering-URL: http://www.swi.psy.uva.nl/usr/remco/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: remco@swi.psy.uva.nl  
Phone: Telephone: +31-20-525.6787 Telefax: +31-20-525.6896  
Title: KIDS for KADS  
Author: Remco Straatman 
Address: Roetersstraat 15 1018 WB Amsterdam The Netherlands  
Affiliation: Department of Social Science Informatics (S.W.I.) University of Amsterdam  
Abstract: In order to give more support in the construction, adaptation, and use of problem-solving methods (PSM) an explicit representation of the relevant aspects of a PSM is necessary. In [Fensel & Straatman, 1996] we propose such a framework, based on the kads [Schreiber et al., 1994a] methodology. At this moment this framework has not been formally worked out. Existing formalisations of kads also are not directly applicable, because these do not support all necessary concepts and/or relations. kids [Smith, 1990], a transformational software development system, is based on a representation similar to our proposed framework. In this paper we investigate to what extent kids can be used as a basis for the development of representations and tools for PSM development.
Abstract-found: 1
Intro-found: 1
Reference: [Aben, 1995] <author> M. Aben. </author> <title> Formal Methods in Knowledge Engineering. </title> <type> PhD thesis, </type> <institution> SWI, University of Amsterdam, </institution> <month> februari </month> <year> 1995. </year> <month> forthcoming. </month>
Reference-contexts: Current languages such as (ml) 2 [vanHarmelen & Aben, 1996] and KARL [Fensel, 1995] do not include specific notations for elements of PSM's. Especially notations for goals, assumptions and costs are absent in these languages. Other attempts at formalising these concepts and/or parts of the construction process, such as <ref> [Akkermans et al., 1993, Wielinga et al., 1995, Aben, 1995] </ref> also are either too informal or describe only a subset of the concepts needed. <p> These assumptions can be related to available knowledge, the representation framework, the type of problems that will be encountered and so on. However this framework (and the development steps) remained largely informal. * Formalising inferences The work of Aben <ref> [Aben, 1995] </ref> concentrates on the formalisation of inferences. This work describes individual inferences by a precondition, a body and a postcondition, and the relation that should hold between these parts. <p> Most Mincer (ML 2 ) karl Inferences a Competence of PSM b Diagnosis c PSM functional - + + + PSM assumption - + -3 + PSM operationalisation + + -1 -3 - PSM cost + 2 - partial correctness (1) -1 - cost relation (2) + 2 - a. <ref> [Aben, 1995] </ref> b. [Wielinga et al., 1995] c. [vanHarmelen & tenTeije, 1995] 1. Composition of inference structures is possible, but without control. 2. By external cost model, not part of the (M L) 2 language. 3. <p> The work of Aben <ref> [Aben, 1995] </ref> concentrates on formalising inferences and properties of inference networks, but does not include control. <p> The translation of the expertise model to the kids formalism can either be done by automatic translation from a formal expertise model (e.g. from (M L) 2 ) or by semi-automatic translation from the informal CML-model (in a similar fashion to Aben's cml-to-fml translator <ref> [Aben, 1995] </ref>). If we want to even further improve the resulting program we could use the optimisations of kids on the whole specification. In this case, we also apply the optimisations to the specifications of task-control and roles. <p> What is necessary here is to devise a way to maintain this conceptual separation, without limiting the possibility for optimisations in the operationalisation. KIDS and formalising inferences We will now compare the work of Aben <ref> [Aben, 1995] </ref> on formal-ising kads-inferences to the work done in kids. <p> Also some of the postconditions of the inferences given in <ref> [Aben, 1995] </ref> do not fit into the kids. For instance, the inference schema of abstract (page 56.) specifies that the output instance will have less attributes than the input instance. These second-order properties cannot be expressed in kids.
Reference: [Akkermans et al., 1993] <author> J. M. Akkermans, B. J. Wielinga, and A. Th. Schreiber. </author> <title> Steps in constructing problem-solving methods. </title> <editor> In N. Aussenac, G. Boy, B. Gaines, M. Linster, J.-G. Ganascia, and Y. Kodratoff, editors, </editor> <title> Knowledge Acquisition for Knowledge-Based Systems. </title> <booktitle> Proceedings of the 7th European Workshop EKAW'93, Toulouse and Caylus, France, number 723 in Lecture Notes in Computer Science, </booktitle> <pages> pages 45-65, </pages> <address> Berlin Heidelberg, Germany, </address> <month> September </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference-contexts: Current languages such as (ml) 2 [vanHarmelen & Aben, 1996] and KARL [Fensel, 1995] do not include specific notations for elements of PSM's. Especially notations for goals, assumptions and costs are absent in these languages. Other attempts at formalising these concepts and/or parts of the construction process, such as <ref> [Akkermans et al., 1993, Wielinga et al., 1995, Aben, 1995] </ref> also are either too informal or describe only a subset of the concepts needed. <p> However, all these languages are limited to a description of the task-decomposition, inferences and domain-knowledge and do not include assumptions and task-goals. * Constructing problem-solving methods In <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> a framework is described for the development of PSM's. In this work, the construction of problem-solving methods is seen as a rational, justifiable, stepwise refinement process, starting with the initial competence statement and ending in a instantiated PSM. <p> The work of Aben [Aben, 1995] concentrates on formalising inferences and properties of inference networks, but does not include control. The work on competence theories of PSM's <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> includes a (semi-)formal notation for the competence and assumptions of PSM's, but does not include a formalism for realisations of the methods. <p> These second-order properties cannot be expressed in kids. KIDS and competence of PSMs There are some interesting links between the kids-framework and work on competence descriptions of PSM's [Van de Velde, 1988] and their construction <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref>. <p> For a specific problem p P , a solution s then is any s Sol for which solution (p; s) holds. In <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> a method for constructing PSM's is proposed that constructs the required PSM competence theory by stepwise refinement of the basic problem-space described above.
Reference: [Benjamins, 1993] <author> V. R. </author> <title> Benjamins. Problem Solving Methods for Diagnosis. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Structured informal representations such as CML [Schreiber et al., 1994b], the work of Benjamins on problem-solving methods <ref> [Benjamins, 1993] </ref> and GDM's [vanHeijst et al., 1992] have led to libraries of problem-solving method, together with the accompanying tools. <p> Libraries The kids system contains three libraries: a design tactic-library, a transformation-library, and a theory-library. Design tactic library The type of methods in the kids-library differs from these in PSM-libraries (such as <ref> [Benjamins, 1993, Breuker & Van de Velde, 1994] </ref>. In knowledge-acquisition terms the methods which are part of the kids library would be classified as "weak" problem-solving methods.
Reference: [Benjamins et al., 1996] <author> V.R. Benjamins, D. Fensel, and R. Straatman. </author> <title> Assumptions of problem-solving methods and their role in knowledge engineering. </title> <booktitle> In Proceedings of the 12th European Conference on Artificial Intelligence (ECAI-96), </booktitle> <year> 1996. </year>
Reference-contexts: When the library-PSM`s are known to be correct (by verification or construction as above) the resulting system will also be correct. This property makes the expense of proving library-elements worthwhile, whereas the verification of arbitrary systems may be too expensive. Also, in <ref> [Benjamins et al., 1996] </ref> we sketch how the framework can be used to close the gaps between task, PSM, and available domain knowledge. * Adaptation Also we can check whether an existing PSM is still applicable to a task, by looking at the functionality and assumptions of the method.
Reference: [Breuker & Van de Velde, 1994] <author> J. A. Breuker and W. Van de Velde, </author> <title> editors. The CommonKADS Library for Expertise Modelling. </title> <publisher> IOS Press, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1994. </year>
Reference-contexts: Libraries The kids system contains three libraries: a design tactic-library, a transformation-library, and a theory-library. Design tactic library The type of methods in the kids-library differs from these in PSM-libraries (such as <ref> [Benjamins, 1993, Breuker & Van de Velde, 1994] </ref>. In knowledge-acquisition terms the methods which are part of the kids library would be classified as "weak" problem-solving methods. <p> These two descriptions are then coupled by means of mappings. Normally, the next step would then be to select the appropriate problem solving method for this task from a library (e.g. <ref> [Breuker & Van de Velde, 1994] </ref>,[Benjamins, 1993]). In this case, we want to use kids to construct the method. <p> In this case, we want to use kids to construct the method. Therefore, we formalised the assignment task, the queens domain knowledge and their mapping in the kids formalism. 5.1 The assignment task The N-queens problem can be classified as an assignment task, as described in <ref> [Breuker & Van de Velde, 1994] </ref>, chapter 5.
Reference: [Causse, 1994] <author> K. Causse. </author> <title> A model for control knowledge. </title> <editor> In B. R. Gaines and M. Musen, editors, </editor> <booktitle> 8th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, volume 2, </booktitle> <address> Banff, Canada, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Given a way of representing domain-knowledge and high-level programs closer to kads-task-bodys, more knowledge-intensive methods can be added to the library as well. 5 Even though there is some discussion (see e.g. <ref> [Causse, 1994] </ref>) as to whether this is the "correct" place for such knowledge. The main points is however, is that such knowledge is explicitly represented. 13 Transformation library The second library of kids contains transformations, which can be applied to improve the efficiency of programs.
Reference: [Fensel & Groenboom, 1996] <author> D. Fensel and R. Groenboom. Mlpm: </author> <title> Defing a semantics and axiomatization for specifying the reasoning process of knowledge-based systems. </title> <booktitle> In In Proceedings of the 12th European Conference on Artificial Intelligence (ECAI-96), </booktitle> <address> Budapest, </address> <month> August 12-16 </month> <year> 1996. </year>
Reference-contexts: The formal specification of functions, methods and their assumptions seems to help the automatic development in the context of software engineering. One of the remaining issues is the development of a formalism that captures our proposed framework for PSMs. At the time of writing this report, <ref> [Fensel et al., 1996b, Fensel & Groenboom, 1996] </ref> have started developing a formal language based on the framework. Their language captures all aspects of the framework, except for costs. Another remaining question is exactly to what extent techniques as used in kids remain applicable when translated to our framework.
Reference: [Fensel & Straatman, 1996] <author> D. Fensel and R. Straatman. </author> <title> The essence of problem-solving methods: Making assumptions for efficiency reasons. </title> <editor> In Nigel Shadbolt, Kieron O'Hara, and Guus Schreiber, editors, </editor> <booktitle> Advances in knowledge acquisition: proceedings of the 9th European Knowledge Acquisition Workshop, EKAW-96, volume 1076 of Lecture notes in artificial intelligence, </booktitle> <pages> pages 17-32, </pages> <address> Berlin, </address> <month> may 14-17 </month> <year> 1996. </year> <note> Springer-Verlag. ISBN 3-540-61273-4. 18 </note>
Reference-contexts: The next sections discuss the framework we propose for this task, and compare it to current formalisms for kads PSMs. 2.1 A formal framework for PSM's In <ref> [Fensel & Straatman, 1996] </ref> we describe a representation framework for this purpose. Our framework does not drastically deviate from earlier work on PSM's, but rather clarifies the relations that hold between the ingredients of a PSM and presents some required extensions.
Reference: [Fensel, 1995] <author> D. Fensel. </author> <title> The Knowledge Acquisition And Representation Language KARL. </title> <publisher> Kluwer Academic Publisher, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: We also showed how this framework could be helpful in verification, construction and use of PSM's. One of the things missing in this work is a representation of all the aspects of the framework and their relations. Current languages such as (ml) 2 [vanHarmelen & Aben, 1996] and KARL <ref> [Fensel, 1995] </ref> do not include specific notations for elements of PSM's. Especially notations for goals, assumptions and costs are absent in these languages. <p> By external cost model, not part of the (M L) 2 language. 3. Suggested, but no formalisation provided. formalisations aim at formalising a part of the kads framework, and therefore also cannot give support for checking relations between different parts. (M L) 2 [vanHarmelen & Aben, 1996]and karl <ref> [Fensel, 1995] </ref> concentrate on the "body" of tasks, leaving out assumptions and goal specifications 1 . The work of Aben [Aben, 1995] concentrates on formalising inferences and properties of inference networks, but does not include control.
Reference: [Fensel et al., 1995] <author> D. Fensel, R. Straatman, and F. van Harmelen. </author> <title> The mincer metaphor: A new view on problem-solving methods for knowledge-based systems? Technical report, </title> <institution> Department SWI, University of Amsterdam, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: An example can be found in [Fensel et al., 1996b] where, using the framework, the missing assumptions of a PSM were found using the theorem prover kiv. Also the relations can guide the construction process. In <ref> [Fensel et al., 1995] </ref> we propose a construction process that starts with a functionally correct, general realisation (e.g. generate-and-test). In subsequent steps, the realisation is transformed into a more specific and efficient version, by introducing assumptions. The framework allows for the verification of each of the transformation steps.
Reference: [Fensel et al., 1996a] <author> D. Fensel, R. Straatman, and F. van Harmelen. </author> <title> The mincer metaphor for problem-solving methods: Making assumptions for reasons of efficiency. </title> <booktitle> In Proceedings of the Knowledge Engineering: Methods and Languages Workshop (KEML-96), </booktitle> <address> Paris-Orsay, </address> <month> January 15-16 </month> <year> 1996. </year>
Reference-contexts: Recently research has focussed on more explicit representations and development methods for problem-solving methods (PSM's) [Akkermans et al., 1993, Wielinga et al., 1995, Aben, 1995, Fensel et al., 1996a, Benjamins et al., 1996] to better facilitate automation of construction and adaptation. In <ref> [Fensel et al., 1996a] </ref> we proposed a formal framework for representing PSM's. This representation consists of a goal, a realisation of the goal, assumptions made by the realisation of the goal, and the cost of this realisation.
Reference: [Fensel et al., 1996b] <author> Dieter Fensel, Arno Schoenegge, Rix Groenboom, and Bob Wielinga. </author> <title> Specification and verification of knowledge-based systems. </title> <booktitle> In Proceedings of the Workshop on Validation, Verification and Refinement of Knowledge-Based Systems, 12th European Conference on Artificial Intelligence (ECAI-96), </booktitle> <address> Budapest, </address> <month> August 12-16 </month> <year> 1996. </year>
Reference-contexts: Some examples are given below: * Construction of a realisation with a given functionality and acceptable costs. Testing the function and cost relation of a constructed PSM can prove its validity. An example can be found in <ref> [Fensel et al., 1996b] </ref> where, using the framework, the missing assumptions of a PSM were found using the theorem prover kiv. Also the relations can guide the construction process. In [Fensel et al., 1995] we propose a construction process that starts with a functionally correct, general realisation (e.g. generate-and-test). <p> The formal specification of functions, methods and their assumptions seems to help the automatic development in the context of software engineering. One of the remaining issues is the development of a formalism that captures our proposed framework for PSMs. At the time of writing this report, <ref> [Fensel et al., 1996b, Fensel & Groenboom, 1996] </ref> have started developing a formal language based on the framework. Their language captures all aspects of the framework, except for costs. Another remaining question is exactly to what extent techniques as used in kids remain applicable when translated to our framework.
Reference: [Jones, 1990] <author> C. B. Jones. </author> <title> Systematic Software Development Using VDM. </title> <publisher> Prentice-Hall, </publisher> <address> London, </address> <year> 1990. </year> <note> Second Edition. </note>
Reference-contexts: Selection of methods and transformations is done manually by the user, as is the focus of these steps. The application of selected methods and transform is done 3 In fact, an experiment similar to this approach is described in [Ledru, 1996]. Here, a formal specification in VDM <ref> [Jones, 1990] </ref> that also contains functional parts is translated to the kids formalism, after which a program is developed using the kids system. 4 However, heuristic notions of expression cost are used in some operations 10 automatically, and makes use of various forms of logical inference, made possible by the formal
Reference: [Ledru, 1996] <author> Y. Ledru. </author> <title> Using kids as a tool support for vdm. </title> <booktitle> In 18th International Conference on Software Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Selection of methods and transformations is done manually by the user, as is the focus of these steps. The application of selected methods and transform is done 3 In fact, an experiment similar to this approach is described in <ref> [Ledru, 1996] </ref>.
Reference: [Schreiber et al., 1994a] <author> A. Th. Schreiber, P. Terpstra, P. Magni, and M. van Velzen. </author> <title> Analysing and implementing VT using COMMON-KADS. </title> <editor> In A. Th. Schreiber and W. P. Birmingham, editors, </editor> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop. Volume 3: Sisyphus II - VT Elevator Design Problem, </booktitle> <pages> pages 44-1 - 44-29, </pages> <address> Alberta, Canada, </address> <month> January </month> <year> 1994. </year> <institution> SRDG Publications, University of Calgary. </institution>
Reference: [Schreiber et al., 1994b] <author> A. Th. Schreiber, B. J. Wielinga, J. M. Akkermans, W. Van de Velde, and A. Anjewierden. </author> <title> CML: The CommonKADS conceptual modelling language. </title> <editor> In L. Steels, A. Th. Schreiber, and W. Van de Velde, editors, </editor> <title> A Future for Knowledge Acquisition. </title> <booktitle> Proceedings of the 8th European Knowledge Acquisition Workshop EKAW'94, volume 867 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 1-25, </pages> <address> Berlin/Heidelberg, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: We will now very briefly point at the current work on formalisation of kads-based KBS relevant for our framework. * Informal notations A lot of work already has been done on informal descriptions of problem-solving methods. Structured informal representations such as CML <ref> [Schreiber et al., 1994b] </ref>, the work of Benjamins on problem-solving methods [Benjamins, 1993] and GDM's [vanHeijst et al., 1992] have led to libraries of problem-solving method, together with the accompanying tools. <p> The following definition is given there (in the conceptual modeling language cml <ref> [Schreiber et al., 1994b] </ref>). function assign; conceptual-definition: input-roles: components: Set of objects that each should be assigned to a resource; resources: Set of objects to which components could be assigned; partial assignment: output-roles: assignment: A set of assignment-tuples constituting a subset of the Cartesian product of the set of components and
Reference: [Smith, 1987] <author> D. R. Smith. </author> <title> Structure and design of global search algorithms. </title> <type> Technical Report KES.U.87.12, </type> <institution> Kestrel Institute, </institution> <address> 3260 Hillview Avenue, Palo Alto, California 94304, </address> <month> November </month> <year> 1987. </year>
Reference-contexts: Thus, we want to make a problem-specific instantiation of an efficient method for this problem. In this case we choose to use the global search tactic from the library. After the application of this tactic the body of the program will contain a Queens-specific global search program. Global search <ref> [Smith, 1987] </ref> represents and manipulates sets of candidate solutions to find feasible solutions. The basic operators in global search are: extract candidate solutions from a set and to split a set into subsets. Global search starts with an initial set containing all solutions. <p> We can formalise this weaker filter as follows: 9 (z : R)(Satisf ies (z; ^r) ^ O (x; z)) ) (x; ^r). Given the above definitions, we can now show the program for global search. It has been proven <ref> [Smith, 1987] </ref> that given the global search theory and a necessary filter, the following specification is consistent (i.e. the body returns all feasible solutions, given the input condition). function F (x : D):set (R) where I (x) returns f z j O (x; z)g) = if (x; ^r 0 (x)) then
Reference: [Smith, 1990] <author> D. R. Smith. Kids: </author> <title> A semi-automatic program development system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(9) </volume> <pages> 1024-1043, </pages> <month> September </month> <year> 1990. </year> <note> Special Issue on Formal Methods. </note>
Reference-contexts: The only attempt in the direction of making the relation between a method's realisation and its cost explicit is described in [Straatman & Beys, 1995], however this is largely untested. 3 KIDS The kids system <ref> [Smith, 1990] </ref> is a software engineering tool for the semi-automatic construction of correct and efficient programs out of formal problem-specifications. <p> Thus the main use of the design tactics and transformations lies in gaining efficiency. We will now briefly explain the technology underlying the kids system. For a detailed explanation of the system the reader is referred to <ref> [Smith, 1990] </ref>, this section is a summary of that article and meant to make our paper more self-contained. 3.2 Problem statements Central to kids is the notion of problem statement. <p> Because of this kids can construct a problem specific program once it has found a substitution for the problem statement to the method theory. 3.3 An example: the N-Queens problem To illustrate this, we take the example from <ref> [Smith, 1990] </ref>. In this, a global search program is developed for the N-Queens problem. We first show the specification of the N-Queens problem, then the specification of the global search method, and finally the result of specialising this method to the N-Queens problem. <p> When the user is satisfied with the result, executable code can be generated from the program specification. For brevity reasons we will not completely describe the transformation steps, the reader is referred to <ref> [Smith, 1990] </ref> for this. One of the optimisation steps is simplification. Context-independent simplification uses a set of directed rewrite rules such as length (fg) = 0 and if true then P else Q = P. Context dependent simplification simplifies an expression with respect to its context. <p> We leave out the description of the data-type refinements here, since we do not think these are directly relevant to our purposes. However, when one plans to use kids as a tool for implementation generation, then these operators are relevant as well. For the N-Queens example, <ref> [Smith, 1990] </ref> states that the original N-Queens specification cannot be compiled, the unoptimized global search program results in an implementation spends O (k 2 ) time per node, and takes 60 minutes to generate all 92 solutions to the 8-Queens problem.
Reference: [Smith et al., 1995] <author> D. R. Smith, E. A. Parra, and S. J. Westfold. </author> <title> Synthesis of high-performance transportation schedulers. </title> <type> Technical report, </type> <institution> Kestrel Institute, </institution> <address> 3260 Hillview Avenue, Palo Alto, Califor-nia 94304, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: The kids system has been developed at the Kestrel Institute over the past years and has also been used to generate highly efficient programs for complex, real-world tasks (see <ref> [Smith et al., 1995] </ref> for an example of a planning system for large scale operations). The reason we focus on this system is because we see similarities in the underlying formalisation and our framework, and the system and our intended tools.
Reference: [Straatman & Beys, 1995] <author> R. Straatman and P. Beys. </author> <title> A performance model for knowledge-based systems. </title> <editor> In M. Ayel and M. C. Rousse, editors, </editor> <booktitle> EUROVAV-95 European Symposium on the Validation and Verification of Knowledge Based Systems, </booktitle> <pages> pages 253-263. </pages> <address> ADEIRAS, Universite de Savoie, Chambery, </address> <month> 26-28 June </month> <year> 1995. </year>
Reference-contexts: The work done by [vanHarmelen & tenTeije, 1995] formalises the functionality and assumptions of a wide-spectrum of diagnostic methods, but contains no link to realisations of the methods. The only attempt in the direction of making the relation between a method's realisation and its cost explicit is described in <ref> [Straatman & Beys, 1995] </ref>, however this is largely untested. 3 KIDS The kids system [Smith, 1990] is a software engineering tool for the semi-automatic construction of correct and efficient programs out of formal problem-specifications.
Reference: [tenTeije & vanHarmelen, 1996] <author> A. ten Teije and F. van Harmelen. </author> <title> Using reflection techniques for flexible problem solving (with examples from diagnosis). </title> <journal> Future Generation Computing Systems, </journal> <note> 1996. to appear, 1996. An earlier and shorter version of this appeared in the Proceedings of the IJCAI'95 Workshop on Reflection and Metalevel Architecture and their Applications in AI, </note> <institution> Montreal, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Furthermore it is described how inferences can be adapted, and how properties of inference-networks (without regard to control) can be derived. * Description of functionality of diagnosis-systems The work of ten Teije and van Harme-len <ref> [tenTeije & vanHarmelen, 1996] </ref> formalises the input-output behaviour (and assumptions) of diagnosis systems. This work is not specifically based on kads, but does provide formalisations of knowledge-based systems. Also knowledge with respect to adaptations of the input-output behaviour (such as approximations of diagnosis) are formalised.
Reference: [Terpstra & Schrooten, 1993] <author> Peter Terpstra and Ronald Schrooten. </author> <title> Commonkads specific design decisions and their notation. </title> <booktitle> Deliverable DM7.2b, </booktitle> <institution> ESPRIT Project P5248 KADS-II/M7.2/DD/UvA/043/1.1, University of Amsterdam and Free University of Brussels, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: There is no existing counterpart for this in work on the application of PSM`s. The transformations in the kidslibrary can be interesting in refinement of instantiated PSM's, but combined with a separation between domain-knowledge and task-descriptions they may be hard to realise. Work done on the kads design phase <ref> [Terpstra & Schrooten, 1993] </ref> also mentions similar transformations, and they may be more directly applicable there. Theory library The third library of kids consists of theories describing the basic data-types. For instance, there are theories which describe sets.
Reference: [Van de Velde, 1988] <author> W. Van de Velde. </author> <title> Inference stucture as a basis for problem solving. </title> <editor> In Y. Ko--dratoff, editor, </editor> <booktitle> Proceedings of the 8th European Conference on Artificial Intelligence, </booktitle> <pages> pages 202-207, </pages> <address> London, 1988. </address> <publisher> Pitman. </publisher>
Reference-contexts: These second-order properties cannot be expressed in kids. KIDS and competence of PSMs There are some interesting links between the kids-framework and work on competence descriptions of PSM's <ref> [Van de Velde, 1988] </ref> and their construction [Akkermans et al., 1993, Wielinga et al., 1995].
Reference: [vanHarmelen & Aben, 1996] <author> F. van Harmelen and M. Aben. </author> <title> Structure preserving specification languages for knowledge-based systems. </title> <journal> International Journal of Human Computer Studies, </journal> <volume> 44 </volume> <pages> 187-212, </pages> <year> 1996. </year> <journal> (Formerly Journal of Man Machine Studies). </journal>
Reference-contexts: We also showed how this framework could be helpful in verification, construction and use of PSM's. One of the things missing in this work is a representation of all the aspects of the framework and their relations. Current languages such as (ml) 2 <ref> [vanHarmelen & Aben, 1996] </ref> and KARL [Fensel, 1995] do not include specific notations for elements of PSM's. Especially notations for goals, assumptions and costs are absent in these languages. <p> By external cost model, not part of the (M L) 2 language. 3. Suggested, but no formalisation provided. formalisations aim at formalising a part of the kads framework, and therefore also cannot give support for checking relations between different parts. (M L) 2 <ref> [vanHarmelen & Aben, 1996] </ref>and karl [Fensel, 1995] concentrate on the "body" of tasks, leaving out assumptions and goal specifications 1 . The work of Aben [Aben, 1995] concentrates on formalising inferences and properties of inference networks, but does not include control.
Reference: [vanHarmelen & Fensel, 1995] <author> F. van Harmelen and D. Fensel. </author> <title> Formal methods in knowledge engineering. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 10(4) </volume> <pages> 345-360, </pages> <year> 1995. </year>
Reference-contexts: However, even apart from the informal nature of the representations, it was unclear what exactly the relations between the different parts of a PSM were. * Formal languages for expertise-models A large number of languages for the formalisation of expertise-models has been developed over the last couple of years (see <ref> [vanHarmelen & Fensel, 1995] </ref> for an overview of these languages).
Reference: [vanHarmelen & tenTeije, 1995] <author> F. van Harmelen and A. ten Teije. </author> <title> Approximations in diagnosis: motivations and techniques. </title> <editor> In A. Levy and P. Nayak, editors, </editor> <booktitle> Proceedings of SARA-95, Symposium on Abstraction, Reformulation, and Approximation, </booktitle> <pages> pages 149-155, </pages> <address> Quebec,Canada, </address> <month> Aug </month> <year> 1995. </year> <note> Also in: the Dutch Artificial Intelligence Conference 1995 (NAIC95). </note>
Reference-contexts: Competence of PSM b Diagnosis c PSM functional - + + + PSM assumption - + -3 + PSM operationalisation + + -1 -3 - PSM cost + 2 - partial correctness (1) -1 - cost relation (2) + 2 - a. [Aben, 1995] b. [Wielinga et al., 1995] c. <ref> [vanHarmelen & tenTeije, 1995] </ref> 1. Composition of inference structures is possible, but without control. 2. By external cost model, not part of the (M L) 2 language. 3. <p> The work on competence theories of PSM's [Akkermans et al., 1993, Wielinga et al., 1995] includes a (semi-)formal notation for the competence and assumptions of PSM's, but does not include a formalism for realisations of the methods. The work done by <ref> [vanHarmelen & tenTeije, 1995] </ref> formalises the functionality and assumptions of a wide-spectrum of diagnostic methods, but contains no link to realisations of the methods.
Reference: [vanHeijst et al., 1992] <author> G. van Heijst, P. Terpstra, B. J. Wielinga, and N. Shadbolt. </author> <title> Using generalised directive models in knowledge acquisition. </title> <editor> In Th. Wetter, K. D. Althoff, J. Boose, B. Gaines, M. Linster, and F. Schmalhofer, editors, </editor> <booktitle> Current Developments in Knowledge Acquisition: </booktitle> <address> EKAW-92, Berlin, Germany, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Structured informal representations such as CML [Schreiber et al., 1994b], the work of Benjamins on problem-solving methods [Benjamins, 1993] and GDM's <ref> [vanHeijst et al., 1992] </ref> have led to libraries of problem-solving method, together with the accompanying tools.
Reference: [Wielinga et al., 1995] <author> B. J. Wielinga, J. M. Akkermans, and A. Th. Schreiber. </author> <title> A formal analysis of parametric design problem solving. </title> <editor> In B. R. Gaines and M. A. Musen, editors, </editor> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, volume II, pages 37.1-37.15, </booktitle> <address> Alberta, Canada, </address> <year> 1995. </year> <institution> SRDG Publications, University of Calgary. </institution> <month> 20 </month>
Reference-contexts: Current languages such as (ml) 2 [vanHarmelen & Aben, 1996] and KARL [Fensel, 1995] do not include specific notations for elements of PSM's. Especially notations for goals, assumptions and costs are absent in these languages. Other attempts at formalising these concepts and/or parts of the construction process, such as <ref> [Akkermans et al., 1993, Wielinga et al., 1995, Aben, 1995] </ref> also are either too informal or describe only a subset of the concepts needed. <p> However, all these languages are limited to a description of the task-decomposition, inferences and domain-knowledge and do not include assumptions and task-goals. * Constructing problem-solving methods In <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> a framework is described for the development of PSM's. In this work, the construction of problem-solving methods is seen as a rational, justifiable, stepwise refinement process, starting with the initial competence statement and ending in a instantiated PSM. <p> 2 ) karl Inferences a Competence of PSM b Diagnosis c PSM functional - + + + PSM assumption - + -3 + PSM operationalisation + + -1 -3 - PSM cost + 2 - partial correctness (1) -1 - cost relation (2) + 2 - a. [Aben, 1995] b. <ref> [Wielinga et al., 1995] </ref> c. [vanHarmelen & tenTeije, 1995] 1. Composition of inference structures is possible, but without control. 2. By external cost model, not part of the (M L) 2 language. 3. <p> The work of Aben [Aben, 1995] concentrates on formalising inferences and properties of inference networks, but does not include control. The work on competence theories of PSM's <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> includes a (semi-)formal notation for the competence and assumptions of PSM's, but does not include a formalism for realisations of the methods. <p> These second-order properties cannot be expressed in kids. KIDS and competence of PSMs There are some interesting links between the kids-framework and work on competence descriptions of PSM's [Van de Velde, 1988] and their construction <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref>. <p> For a specific problem p P , a solution s then is any s Sol for which solution (p; s) holds. In <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> a method for constructing PSM's is proposed that constructs the required PSM competence theory by stepwise refinement of the basic problem-space described above.
References-found: 28

