URL: http://www.cse.ucsc.edu/~panzer/th/thesis.ps.gz
Refering-URL: http://www.cse.ucsc.edu/~panzer/th/index.html
Root-URL: http://www.cse.ucsc.edu
Title: Property Lists: An Experimental Comparison of New Property Editor Designs  
Author: Linda Werner Suresh Lodha Charlie McDowell Dean 
Degree: A thesis submitted in partial satisfaction of the requirements for the degree of Master of Science in Computer and Information Sciences by John Panzer  The thesis of John Panzer is approved:  
Date: December 1995  
Affiliation: University of California Santa Cruz  of Graduate Studies and Research  
Abstract-found: 0
Intro-found: 1
Reference: [App87] <author> Apple. </author> <title> Apple human interface guidelines: The Apple Desktop Interface. </title> <publisher> Addison-Wesley Pub. Co., </publisher> <year> 1987. </year>
Reference-contexts: detailed below. 8 switching between different kinds of objects. 2.3 Related Work 2.3.1 Property List Design Property lists are a type of property sheet; property sheets have been used at least since the Xerox Star interface [JRV + 89] and are a standard element in current direct manipulation interfaces [Mic95], <ref> [App87] </ref>. A property list can be considered a kind of menu; in both cases users select from a set of displayed options. Most of the work done with menus is applicable to property lists as well. Paap and Roske-Hofstrand [PRH88] give an overview which we summarize here.
Reference: [BE89] <author> D. Beck and J. Elkerton. </author> <title> Development and evaluation of direct manipulation lists. </title> <booktitle> In CHI '88, </booktitle> <pages> pages 72-8, </pages> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: Most menu studies deal with nonscrolling lists. Mills and Prime [MP90] compared scrolling versus nonscrolling menus of eight items. They found that selection time was lower with nonscrolling menus and that users preferred nonscrolling menus overall. Beck 10 and Elkerton <ref> [BE89] </ref> provide experimental data on scrolling lists of 25-100 items. They found that user familiarity with the contents of the lists and list size both have a significant effect on search time, and that even users familiar with the list contents had trouble estimating item positions.
Reference: [Bor95] <author> Borland International. </author> <title> Delphi User's Guide. </title> <booktitle> Borland International, </booktitle> <year> 1995. </year>
Reference-contexts: A property list displays an object's properties as a directly manipulable list of named values. Property lists are compact, simple, and extensible. In many current applications, however, the properties are organized alphabetically <ref> [Mic93a, Bor95, PYD91] </ref>. This can lead to usability problems when the number of properties grows large. Since property list contents change to reflect the currently selected object (s), users cannot take advantage of positional memory to find properties. <p> For example, an alphabetical list might have labels A-J, K-P, and Q-Z. 2.3.2 Other Interface Builder Property Lists Visual Basic [Mic93a] is a commercial rapid application development environment which uses an alphabetical property list. Event handlers (callbacks) are dealt with through a separate mechanism. A similar tool, Delphi <ref> [Bor95] </ref>, also uses an alphabetical property list. Certain compound attributes, such as Font, can expand into a hierarchical outline to show subfields. The property editor window is organized as a tabbed window; event handler procedure names are found on a separate property list located on a second page.
Reference: [CSS93] <author> A. Colebourne, P. Sawyer, and I. Sommerville. </author> <title> Mog user interface builder: a mechanism for integrating application and user interface. </title> <journal> Interacting with Computers, </journal> <pages> pages 315-31, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: In addition, considerations of extensibility and maintainability led to the adoption of a basic design object internal architecture. Design objects are Vtcl widgets augmented with a design-time interface compatible with the builder environment. (This approach is similar to that of the MOG user interface builder <ref> [CSS93] </ref>.) Among other things, the design objects tell the builder what their properties are. The builder is composed of these design objects, a utility library, and common user interface code. The builder coordinates between the objects, keeps track of low-level user actions and selections, and propagates updates through the system.
Reference: [JRV + 89] <author> J. Johnson, T.L. Roberts, W. Verplank, D.C. Smith, C.H. Irby, M. Beard, and K. Mackey. </author> <title> The Xerox Star: a retrospective. </title> <booktitle> Computer, </booktitle> <pages> pages 11-26, 28-29, </pages> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: The alphabetical organization, however, has disadvantages which are detailed below. 8 switching between different kinds of objects. 2.3 Related Work 2.3.1 Property List Design Property lists are a type of property sheet; property sheets have been used at least since the Xerox Star interface <ref> [JRV + 89] </ref> and are a standard element in current direct manipulation interfaces [Mic95], [App87]. A property list can be considered a kind of menu; in both cases users select from a set of displayed options. Most of the work done with menus is applicable to property lists as well. <p> Transient menus are cumbersome to use when changing multiple properties and do not provide a constantly available view of the current values [MT90]. Property dialogs (figure 2.4), the most common kind of property sheet, display editable properties in specialized dialogs <ref> [JRV + 89, Mic95] </ref>. They work well when there are a few predefined object types, but they require extensive dialog design. Since dialogs cannot usually be created or modified automatically, a property dialog system has limited extensibility.
Reference: [Kob91] <author> Shiz Kobara. </author> <title> Visual design with OSF/Motif. </title> <publisher> Addison-Wesley Pub. Co., </publisher> <year> 1991. </year>
Reference-contexts: It has been used within SCO to create system administration tools and other applications. Vtcl provides a toolkit to create and manipulate standard high-level widgets. The toolkit uses the Motif <ref> [Ope91, Kob91] </ref> library internally and so is consistent with other Motif applications. A designer can rapidly create a usable graphical interface by writing a Vtcl script that makes appropriate use of the Vtcl widgets. Vtcl allows designers to create and manipulate widgets using script commands.
Reference: [LM85] <author> E. Lee and J. MacGregor. </author> <title> [minimizing user search time in menu retrieval systems]. </title> <booktitle> Human Factors, </booktitle> <pages> pages 157-62, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: Initially only the root panel is visible; an option on one level leads to a panel on the next level. An important question is how many options to present in each panel. Lee and MacGregor <ref> [LM85] </ref> recommend 4-8 options in general. Paap and Roske-Hofstrand [PRH86] argue that panels can hold many more options (up to 64) if the options are grouped appropriately within the panel.
Reference: [Mic93a] <author> Microsoft Corp. </author> <title> Microsoft Visual Basic Programmer's Reference. </title> <publisher> Microsoft Press, </publisher> <year> 1993. </year>
Reference-contexts: A property list displays an object's properties as a directly manipulable list of named values. Property lists are compact, simple, and extensible. In many current applications, however, the properties are organized alphabetically <ref> [Mic93a, Bor95, PYD91] </ref>. This can lead to usability problems when the number of properties grows large. Since property list contents change to reflect the currently selected object (s), users cannot take advantage of positional memory to find properties. <p> In this design, the list is divided into sections, each of which is accessed by clicking on a label next to the list. For example, an alphabetical list might have labels A-J, K-P, and Q-Z. 2.3.2 Other Interface Builder Property Lists Visual Basic <ref> [Mic93a] </ref> is a commercial rapid application development environment which uses an alphabetical property list. Event handlers (callbacks) are dealt with through a separate mechanism. A similar tool, Delphi [Bor95], also uses an alphabetical property list. Certain compound attributes, such as Font, can expand into a hierarchical outline to show subfields.
Reference: [Mic93b] <author> Microsoft Corp. </author> <title> Microsoft Word User's Guide. </title> <institution> Microsoft Corp., </institution> <year> 1993. </year>
Reference-contexts: Natural categories "minimize the psychological distance within groups while maximizing the distances between groups," [PRH86]. Another possible menu organization is frequency order in which options are listed in decreasing order by frequency of use [PRH88]. Grouping options by frequency leads to split menus <ref> [SS94, Mic93b] </ref>, in which high-frequency options are grouped together at the top of a menu. Split menus provide the basis for the split property list. Macleod and Tillson [MT90] experiment with transient versus nontransient menus. Transient menus, such as pull-down menus, are visible only while the user interacts with them. <p> Users can access the high-frequency items quickly but are 17 still able to find any item by searching alphabetically in the main area. This scheme is also used in the Microsoft Word application <ref> [Mic93b] </ref> in the font selection menu; it caches the last seven font selections made, keeping them at the top of the menu. The same principle can be used to optimize access for property lists. There are three minor differences from split pulldown menus.
Reference: [Mic95] <author> Microsoft Corp. </author> <title> The Windows Interface Guidelines for Software Design. </title> <publisher> Microsoft Press, </publisher> <year> 1995. </year> <title> Microsoft Windows 95 interface guidelines. </title>
Reference-contexts: Editing property values is much like editing cells on a spreadsheet. The Vibe property list is a type of property inspector. A property inspector is typically a modeless window that displays the properties of the selected object or objects <ref> [Mic95] </ref>. A property inspector always reflects the current set of selected objects or selection; this allows users to view and edit properties for multiple objects simultaneously. <p> are detailed below. 8 switching between different kinds of objects. 2.3 Related Work 2.3.1 Property List Design Property lists are a type of property sheet; property sheets have been used at least since the Xerox Star interface [JRV + 89] and are a standard element in current direct manipulation interfaces <ref> [Mic95] </ref>, [App87]. A property list can be considered a kind of menu; in both cases users select from a set of displayed options. Most of the work done with menus is applicable to property lists as well. Paap and Roske-Hofstrand [PRH88] give an overview which we summarize here. <p> Transient menus are cumbersome to use when changing multiple properties and do not provide a constantly available view of the current values [MT90]. Property dialogs (figure 2.4), the most common kind of property sheet, display editable properties in specialized dialogs <ref> [JRV + 89, Mic95] </ref>. They work well when there are a few predefined object types, but they require extensive dialog design. Since dialogs cannot usually be created or modified automatically, a property dialog system has limited extensibility. <p> They work well when there are a few predefined object types, but they require extensive dialog design. Since dialogs cannot usually be created or modified automatically, a property dialog system has limited extensibility. Tabbed dialogs <ref> [Mic95] </ref>, in which multiple "pages" are placed in a single dialog, are more extensible (figure 2.5); however, tabbed dialogs hide most of the properties at any given time.
Reference: [MP90] <author> Z. Mills and M. </author> <title> Prime. Are all menus the same?-an empirical study. In Human-Computer Interaction. </title> <booktitle> INTERACT '90. Proceedings of the IFIP TC 13 Third International Conference, </booktitle> <pages> pages 423-7. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Search time increases with menu length; Sears [SS94] provides evidence that the relationship is linear for unfamiliar menu items. Crowded menus are also less readable [Nor91]. These problems are compounded by scrolling; Mills and Prime <ref> [MP90] </ref> find that scrolling or moving menu items cause confusion and slower item selection time. Given these problems, an alphabetical organization appears to be an optimal choice. This is a recommended approach for menus with the same characteristics [PRH88]. <p> In an experimental comparison, these alternatives were significantly faster than a pull-down menu for making multiple choices. They were also preferred by the users, in large part because of the increased state feedback of the less transient designs. Most menu studies deal with nonscrolling lists. Mills and Prime <ref> [MP90] </ref> compared scrolling versus nonscrolling menus of eight items. They found that selection time was lower with nonscrolling menus and that users preferred nonscrolling menus overall. Beck 10 and Elkerton [BE89] provide experimental data on scrolling lists of 25-100 items.
Reference: [MT90] <author> M. Macleod and P. Tillson. Pull-down, holddown, </author> <title> or staydown? a theoretical and empirical comparison of three menu designs. In Human-Computer Interaction. </title> <booktitle> INTERACT '90. Proceedings of the IFIP TC 13 Third International Conference, </booktitle> <pages> pages 429-34. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Grouping options by frequency leads to split menus [SS94, Mic93b], in which high-frequency options are grouped together at the top of a menu. Split menus provide the basis for the split property list. Macleod and Tillson <ref> [MT90] </ref> experiment with transient versus nontransient menus. Transient menus, such as pull-down menus, are visible only while the user interacts with them. This means that state information (such as checked items) is only visible part of the time. <p> Transient menus are cumbersome to use when changing multiple properties and do not provide a constantly available view of the current values <ref> [MT90] </ref>. Property dialogs (figure 2.4), the most common kind of property sheet, display editable properties in specialized dialogs [JRV + 89, Mic95]. They work well when there are a few predefined object types, but they require extensive dialog design.
Reference: [Mye91] <author> B.A. Myers. </author> <title> Graphical techniques in a spreadsheet for specifying user interfaces. In Human Factors in Computing Systems. Reaching Through Technology. </title> <booktitle> CHI '91. Conference Proceedings, </booktitle> <pages> pages 243-9. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: Similarly, a property list adapts to new properties and new types of objects automatically, making the system easily extensible. Value slots in property lists may be directly manipulable objects themselves; for example, users may drag items to value slots using a mouse <ref> [PYD91, Mye91] </ref>. This would be difficult in a command oriented system. <p> SUIT [PYD91], a simple, multiplatform interface builder tool, also uses an alphabetical organization, but divides the properties into global, class, and object property lists. Properties may be directly manipulated in a variety of ways. Only one object's properties may be edited at one time. C32 <ref> [Mye91] </ref>, part of an interface management system, uses property lists as the primary interface to objects. Instead of using a single window to browse multiple objects, each object is represented by a unique list placed within a spreadsheet-like window.
Reference: [Nor90] <author> Donald Norman. </author> <title> Why interfaces don't work. </title> <editor> In Brenda Laurel and S. Joy Mountford, editors, </editor> <booktitle> The Art of Human-Computer Interface Design, </booktitle> <pages> pages 209-19. </pages> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <title> Principle of transparency in user interface design. </title>
Reference-contexts: Below we describe the usability principles which were most relevant to the Vibe design process. These include transparency and direct manipulation, consistency, the object-action model, and learnability. Usable interfaces should be transparent, letting users concentrate on the task rather than the tool <ref> [Rut82, Nor90] </ref>. In many systems, users manipulate representations of familiar objects directly (using a mouse or other input device) in order to accomplish their tasks.
Reference: [Nor91] <author> Kent L. Norman. </author> <title> The psychology of menu selection : designing cognitive control ot the human/computer interface. </title> <publisher> Ablex Pub. Corp., </publisher> <year> 1991. </year>
Reference-contexts: list has a simple, easily described interface, which allows users to begin editing objects without learning a system of menus or dialogs. 2.2 Disadvantages of Property Lists Property lists do not keep properties at fixed positions; this means that users will not be able to take advantage of positional consistency <ref> [Nor91] </ref> when finding properties. This occurs when users are browsing objects of different types; the list mutates each time a different object is selected. Figure 2.2 shows the effects of changing the selection from a rectangle to a circle in an imaginary drawing application. <p> Even if two objects have a common property, the property will probably be at a different position for each object. Typical property lists, with dozens of items, suffer from the same navigational problems as long menus <ref> [Nor91] </ref>. Search time increases with menu length; Sears [SS94] provides evidence that the relationship is linear for unfamiliar menu items. Crowded menus are also less readable [Nor91]. <p> Typical property lists, with dozens of items, suffer from the same navigational problems as long menus <ref> [Nor91] </ref>. Search time increases with menu length; Sears [SS94] provides evidence that the relationship is linear for unfamiliar menu items. Crowded menus are also less readable [Nor91]. These problems are compounded by scrolling; Mills and Prime [MP90] find that scrolling or moving menu items cause confusion and slower item selection time. Given these problems, an alphabetical organization appears to be an optimal choice. This is a recommended approach for menus with the same characteristics [PRH88]. <p> These properties will be unfamiliar because they are seldom used. For unfamiliar items, randomly organized menus have consistently been shown <ref> [Shn92, Nor91] </ref> to have the slowest search times among various alternatives. These factors eliminated a frequency ordering from further consideration. Sears [SS94] proposes split menus as a way to take advantage of a skewed frequency distribution for menu items. <p> For example, it might be faster for very experienced users to type property names rather than search for them on a list. It is known that menu organization becomes less important as users gain experience with an application <ref> [Nor91] </ref>. The categorical list may become less useful as users gain experience with the property names. The results suggest that inexperienced users can benefit greatly from appropriate categorization of items on a direct manipulation list.
Reference: [Ope91] <author> Open Software Foundation. </author> <title> OSF/Motif style guide. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: It has been used within SCO to create system administration tools and other applications. Vtcl provides a toolkit to create and manipulate standard high-level widgets. The toolkit uses the Motif <ref> [Ope91, Kob91] </ref> library internally and so is consistent with other Motif applications. A designer can rapidly create a usable graphical interface by writing a Vtcl script that makes appropriate use of the Vtcl widgets. Vtcl allows designers to create and manipulate widgets using script commands.
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Similarly, it may be difficult for non-programmer interface designers to prototype new designs. SCO Visual Tcl (Vtcl) [You94, San94] was created to deal with this problem. Vtcl provides a high-level view of Motif widgets, allowing rapid development of Motif applications. It is based on Tcl <ref> [Ous94] </ref>, a flexible scripting language. Vtcl was developed by The Santa Cruz Operation (SCO) to allow people other than professional programmers to produce graphical interfaces quickly and easily. It has been used within SCO to create system administration tools and other applications.
Reference: [PRH86] <author> Kenneth R. Paap and Renate J. Roske-Hofstrand. </author> <title> The optimal number of menu options per panel. </title> <booktitle> Human Factors, </booktitle> <pages> pages 377-85, </pages> <year> 1986. </year> <month> 33 </month>
Reference-contexts: Initially only the root panel is visible; an option on one level leads to a panel on the next level. An important question is how many options to present in each panel. Lee and MacGregor [LM85] recommend 4-8 options in general. Paap and Roske-Hofstrand <ref> [PRH86] </ref> argue that panels can hold many more options (up to 64) if the options are grouped appropriately within the panel. For n options, they recommend a group size of p n; however, they stress that using natural categories is more important than optimizing group size. <p> For n options, they recommend a group size of p n; however, they stress that using natural categories is more important than optimizing group size. Natural categories "minimize the psychological distance within groups while maximizing the distances between groups," <ref> [PRH86] </ref>. Another possible menu organization is frequency order in which options are listed in decreasing order by frequency of use [PRH88]. Grouping options by frequency leads to split menus [SS94, Mic93b], in which high-frequency options are grouped together at the top of a menu. <p> For this to occur, the categories must be understandable, consistent, and task-oriented. To determine if a categorical list could be used, we conducted an experiment with experienced Vtcl users. The objective was to see if a set of natural categories <ref> [PRH86] </ref> could be found. 15 The property names for three representative widgets (FormDialog, List, and PushButton) were printed onto small cards, producing three sets of properties. Each widget type has between forty and sixty properties.
Reference: [PRH88] <author> Kenneth R. Paap and Renate J. Roske-Hofstrand. </author> <title> Design of menus. </title> <booktitle> In Handbook of human-computer interaction, </booktitle> <pages> pages 205-235, </pages> <year> 1988. </year>
Reference-contexts: These problems are compounded by scrolling; Mills and Prime [MP90] find that scrolling or moving menu items cause confusion and slower item selection time. Given these problems, an alphabetical organization appears to be an optimal choice. This is a recommended approach for menus with the same characteristics <ref> [PRH88] </ref>. <p> A property list can be considered a kind of menu; in both cases users select from a set of displayed options. Most of the work done with menus is applicable to property lists as well. Paap and Roske-Hofstrand <ref> [PRH88] </ref> give an overview which we summarize here. In comparison with command-based systems, menus give users more guidance by showing only appropriate choices and are easier for novices, but are less flexible and require more screen space. <p> Natural categories "minimize the psychological distance within groups while maximizing the distances between groups," [PRH86]. Another possible menu organization is frequency order in which options are listed in decreasing order by frequency of use <ref> [PRH88] </ref>. Grouping options by frequency leads to split menus [SS94, Mic93b], in which high-frequency options are grouped together at the top of a menu. Split menus provide the basis for the split property list. Macleod and Tillson [MT90] experiment with transient versus nontransient menus.
Reference: [PYD91] <author> R. Pausch, N. Young II, and R. DeLine. Suit: </author> <title> The pascal of user interface toolkits. </title> <booktitle> In UIST '91, </booktitle> <pages> pages 117-125, </pages> <year> 1991. </year>
Reference-contexts: A property list displays an object's properties as a directly manipulable list of named values. Property lists are compact, simple, and extensible. In many current applications, however, the properties are organized alphabetically <ref> [Mic93a, Bor95, PYD91] </ref>. This can lead to usability problems when the number of properties grows large. Since property list contents change to reflect the currently selected object (s), users cannot take advantage of positional memory to find properties. <p> Similarly, a property list adapts to new properties and new types of objects automatically, making the system easily extensible. Value slots in property lists may be directly manipulable objects themselves; for example, users may drag items to value slots using a mouse <ref> [PYD91, Mye91] </ref>. This would be difficult in a command oriented system. <p> Certain compound attributes, such as Font, can expand into a hierarchical outline to show subfields. The property editor window is organized as a tabbed window; event handler procedure names are found on a separate property list located on a second page. SUIT <ref> [PYD91] </ref>, a simple, multiplatform interface builder tool, also uses an alphabetical organization, but divides the properties into global, class, and object property lists. Properties may be directly manipulated in a variety of ways. Only one object's properties may be edited at one time.
Reference: [Rut82] <author> C. Rutkowski. </author> <title> An introduction to the human applications standard computer interface. i. theory and principles. </title> <journal> BYTE, </journal> <pages> pages 291-310, </pages> <month> Oct. </month> <year> 1982. </year>
Reference-contexts: Below we describe the usability principles which were most relevant to the Vibe design process. These include transparency and direct manipulation, consistency, the object-action model, and learnability. Usable interfaces should be transparent, letting users concentrate on the task rather than the tool <ref> [Rut82, Nor90] </ref>. In many systems, users manipulate representations of familiar objects directly (using a mouse or other input device) in order to accomplish their tasks.
Reference: [San94] <institution> Santa Cruz Operation. SCO Visual Tcl Reference Guide. Santa Cruz Operation, Inc., </institution> <year> 1994. </year> <note> Available at http://www.sco.com/Products/vtcl/. </note>
Reference-contexts: For example, system administrators and power users often automate tasks via Unix shell scripts, but cannot easily add direct manipulation interfaces to these programs. Similarly, it may be difficult for non-programmer interface designers to prototype new designs. SCO Visual Tcl (Vtcl) <ref> [You94, San94] </ref> was created to deal with this problem. Vtcl provides a high-level view of Motif widgets, allowing rapid development of Motif applications. It is based on Tcl [Ous94], a flexible scripting language.
Reference: [Shn92] <author> B. Shneiderman. </author> <title> Designing the user interface: Strategies for effective human-computer interaction. </title> <publisher> Addison-Wesley, 2nd ed. </publisher> <address> edition, </address> <year> 1992. </year>
Reference-contexts: In many systems, users manipulate representations of familiar objects directly (using a mouse or other input device) in order to accomplish their tasks. These interfaces employ the principles of direct manipulation, characterized by Shneiderman <ref> [Shn92] </ref> as continuous representation of the objects and actions of interest, physical actions or presses of labeled buttons instead of complex syntax, and rapid incremental reversible operations whose effect on the object of interest is immediately visible. <p> These properties will be unfamiliar because they are seldom used. For unfamiliar items, randomly organized menus have consistently been shown <ref> [Shn92, Nor91] </ref> to have the slowest search times among various alternatives. These factors eliminated a frequency ordering from further consideration. Sears [SS94] proposes split menus as a way to take advantage of a skewed frequency distribution for menu items.
Reference: [SS94] <author> Andrew Sears and Ben Shneiderman. </author> <title> Split menus: Effectively using selection frequency to organize menus. </title> <journal> ACM Transactions on Computer-Human Interaction, </journal> <pages> pages 27-51, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Even if two objects have a common property, the property will probably be at a different position for each object. Typical property lists, with dozens of items, suffer from the same navigational problems as long menus [Nor91]. Search time increases with menu length; Sears <ref> [SS94] </ref> provides evidence that the relationship is linear for unfamiliar menu items. Crowded menus are also less readable [Nor91]. These problems are compounded by scrolling; Mills and Prime [MP90] find that scrolling or moving menu items cause confusion and slower item selection time. <p> Natural categories "minimize the psychological distance within groups while maximizing the distances between groups," [PRH86]. Another possible menu organization is frequency order in which options are listed in decreasing order by frequency of use [PRH88]. Grouping options by frequency leads to split menus <ref> [SS94, Mic93b] </ref>, in which high-frequency options are grouped together at the top of a menu. Split menus provide the basis for the split property list. Macleod and Tillson [MT90] experiment with transient versus nontransient menus. Transient menus, such as pull-down menus, are visible only while the user interacts with them. <p> These properties will be unfamiliar because they are seldom used. For unfamiliar items, randomly organized menus have consistently been shown [Shn92, Nor91] to have the slowest search times among various alternatives. These factors eliminated a frequency ordering from further consideration. Sears <ref> [SS94] </ref> proposes split menus as a way to take advantage of a skewed frequency distribution for menu items. Split menus place a few high-frequency items at the top of a pull-down menu. <p> If the cache list were used for half of all selections, the average selection time would be approximately (5 + 18)=2 = 11:5 seconds. This represents a 43% reduction in time over the baseline of 20 seconds. (This would be in line with field study results <ref> [SS94] </ref> of 17 and 58% reductions in selection time for split versus normal menus.) Two of the novice users indicated that they thought the split list contained a "to do" list; that is, items which the user should always edit after creating a widget.
Reference: [You94] <author> D. Young. </author> <title> SCO Visual Tcl: A new tool to crack the Motif barrier! draft for SCO World Magazine, </title> <month> November </month> <year> 1994. </year>
Reference-contexts: For example, system administrators and power users often automate tasks via Unix shell scripts, but cannot easily add direct manipulation interfaces to these programs. Similarly, it may be difficult for non-programmer interface designers to prototype new designs. SCO Visual Tcl (Vtcl) <ref> [You94, San94] </ref> was created to deal with this problem. Vtcl provides a high-level view of Motif widgets, allowing rapid development of Motif applications. It is based on Tcl [Ous94], a flexible scripting language.
References-found: 25

