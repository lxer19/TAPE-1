URL: http://www.cs.rpi.edu/~ziantzl/Papers/97/pdpta/pdpta.ps
Refering-URL: http://www.cs.rpi.edu/~ziantzl/Papers/papers.html
Root-URL: http://www.cs.rpi.edu
Title: Predictive Load Balancing for Parallel Adaptive Finite Element Computation  
Author: J. E. Flaherty R. M. Loy M. S. Shephard B. K. Szymanski J. D. Teresco L. H. Ziantz 
Keyword: load balancing, parallel adaptive finite element methods, scientific computing  
Address: Troy, NY, U.S.A.  
Affiliation: Computer Science Department and Scientific Computation Research Center Rensselaer Polytechnic Institute  
Abstract: This paper describes two predictive load balancing schemes designed for use with parallel adaptive finite element methods. We also provide an overview of data structures suitable for distributed storage of finite element mesh data as well as software designed for mesh adaptation and load balancing. During the course of a parallel computation, processor load imbalances are introduced at adaptive enrichment steps. The predictive load balancing methods introduced here use a priori estimates of work load for adaptive refinement and subsequent computation to improve enrichment efficiency and reduce total balancing time. These components have been used to build a system for solving compressible flow problems. Computational results on an IBM SP2 computer are presented for transient solutions of the three-dimensional Euler equations of compressible flow. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. S. Shephard, J. E. Flaherty, H. L. de Cougny, C. Ozturan, C. L. Bot-tasso, and M. W. Beall. </author> <title> Parallel automated adaptive procedures for unstructured meshes. </title> <booktitle> In Parallel Computing in CFD, number R-807, pages 6.1-6.49. </booktitle> <address> Agard, Neuilly-Sur-Seine, </address> <year> 1995. </year>
Reference-contexts: These tools have been used in the construction of a parallel finite element code described in Section 3 which can solve three-dimensional conservation laws. Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) <ref> [1] </ref>. Refinement is also performed in time using a spatially dependent local refinement method [2]. The ability to handle heterogeneous element weights al lows us to balance processor loads based on the temporal as well as spatial refinement. Previously, balancing followed mesh refinement and coarsening. <p> Mesh entities are explicitly classified relative to a geometric model of the problem domain to allow for the appropriate representation of the geometry as the mesh is enriched. All entities can have attached attributes such as solution and error indicator data. A Parallel Mesh Database (PMDB) <ref> [1, 5] </ref>, which provides operators to create and manipulate distributed mesh data, is built on top of MDB. Using PMDB, each processor holds MDB data associated with a subset of the complete mesh. <p> Other enhancements to RSB [8, 9, 10] may make it more useful as a dynamic repartitioner, but doubts remain. Three dynamic load balancing schemes are available for use with PMDB. Iterative Tree Balancing <ref> [1, 5] </ref> (ITB) performs repeated local migrations to achieve balance. Lightly loaded processors request load from their most heavily loaded neighbors. The algorithm views the requests as forming a forest of trees. Each tree is then linearized, and a logarithmic-time scan operation is used to compute load flows. <p> Layers of elements on interprocessor boundaries are moved from heavily loaded to lightly loaded processors to achieve balance within each tree. This operation is iterated to achieve a global balance within a specified tolerance. Parallel Sort Inertial Recursive Bisection <ref> [1] </ref> (PSIRB) repeatedly bisects the domain in the direction orthogonal to its principal axis of inertia (inertial coordinates are sorted in parallel). Octree Partitioning [2] (OCT) uses octree topology to create a one-dimensional ordering of the octree nodes. <p> More details on the solver may be found in [2]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed. The SCOREC mesh enrichment procedure <ref> [1] </ref> performs spatial (h-) refinement and coarsening in parallel using error indicator information and threshold values provided by an application code. This information is used to mark mesh edges to be coarsened, refined, or unchanged.
Reference: [2] <author> J. E. Flaherty, R. M. Loy, M. S. Shep-hard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Adaptive local refinement with octree load-balancing for the parallel solution of three-dimensional conservation laws. </title> <note> Submitted for publication, </note> <year> 1997. </year>
Reference-contexts: Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) [1]. Refinement is also performed in time using a spatially dependent local refinement method <ref> [2] </ref>. The ability to handle heterogeneous element weights al lows us to balance processor loads based on the temporal as well as spatial refinement. Previously, balancing followed mesh refinement and coarsening. <p> This operation is iterated to achieve a global balance within a specified tolerance. Parallel Sort Inertial Recursive Bisection [1] (PSIRB) repeatedly bisects the domain in the direction orthogonal to its principal axis of inertia (inertial coordinates are sorted in parallel). Octree Partitioning <ref> [2] </ref> (OCT) uses octree topology to create a one-dimensional ordering of the octree nodes. The ordered list of nodes is divided into segments corresponding to nearly equal load. Members of any given segment tend to be spatially adjacent and, thus, form a good partition. <p> More details on the solver may be found in <ref> [2] </ref>. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed.
Reference: [3] <author> M. S. Shephard and M. K. Georges. </author> <title> Automatic three-dimensional mesh generation by the Finite Octree technique. </title> <journal> Int. J. Nu-mer. Meth. Engng., </journal> <volume> 32(4) </volume> <pages> 709-749, </pages> <year> 1991. </year>
Reference-contexts: This enables the programmer to concentrate on issues specific to the problem at hand rather than the details of the underlying mesh structures or parallelization concerns. Initial meshes are created using the SCOREC Finite Octree Automatic Mesh Generator <ref> [3] </ref>. The SCOREC Mesh Database (MDB) [4] provides an object-oriented hierarchical representation of a finite element mesh and a set of operators to query and update the mesh data structure.
Reference: [4] <author> M. W. Beall and M. S. Shephard. </author> <title> A general topology-based mesh data structure. </title> <note> To appear Int. J. Numer. Meth. Engng., </note> <year> 1997. </year>
Reference-contexts: This enables the programmer to concentrate on issues specific to the problem at hand rather than the details of the underlying mesh structures or parallelization concerns. Initial meshes are created using the SCOREC Finite Octree Automatic Mesh Generator [3]. The SCOREC Mesh Database (MDB) <ref> [4] </ref> provides an object-oriented hierarchical representation of a finite element mesh and a set of operators to query and update the mesh data structure. The basic mesh entity hierarchy consists of three-dimensional regions, and their bounding faces, edges, and vertices, with bidirectional links between mesh entities of consecutive dimensional order.
Reference: [5] <author> J. E. Flaherty, R. M. Loy, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Parallel structures and dynamic load balancing for adaptive finite element computation. </title> <type> SCOREC Report 22-1996, </type> <institution> Scientific Computation Research Center, Rensselaer Polytechnic Institute, Troy, </institution> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: Mesh entities are explicitly classified relative to a geometric model of the problem domain to allow for the appropriate representation of the geometry as the mesh is enriched. All entities can have attached attributes such as solution and error indicator data. A Parallel Mesh Database (PMDB) <ref> [1, 5] </ref>, which provides operators to create and manipulate distributed mesh data, is built on top of MDB. Using PMDB, each processor holds MDB data associated with a subset of the complete mesh. <p> Other enhancements to RSB [8, 9, 10] may make it more useful as a dynamic repartitioner, but doubts remain. Three dynamic load balancing schemes are available for use with PMDB. Iterative Tree Balancing <ref> [1, 5] </ref> (ITB) performs repeated local migrations to achieve balance. Lightly loaded processors request load from their most heavily loaded neighbors. The algorithm views the requests as forming a forest of trees. Each tree is then linearized, and a logarithmic-time scan operation is used to compute load flows. <p> This method of predictive balancing has been used successfully to balance a transient flow problem which was solved using the parallel Euler solver with the MOL <ref> [5] </ref>. When the workload per element in the computation phase is homogeneous, this technique will also balance the subsequent numerical calculations. Hence, it may be referred to as Uniform element workload Predictive balancing (UP).
Reference: [6] <author> A. Pothen, H. Simon, and K.-P. Liou. </author> <title> Partitioning sparse matrices with eigenvec-tors of graphs. </title> <journal> SIAM J. Mat. Anal. Appl., </journal> <volume> 11(3) </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: All interproces-sor communication is done using the Message Passing Interface (MPI). A dynamic load balancing scheme that operates on distributed mesh data is essential for adaptive computation. Recursive spectral bisection is perhaps the best static partitioner <ref> [6] </ref>. However, while Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB, its parallelization relies heavily on a shared memory architecture and is unlikely to be efficient in a true message passing environment [7].
Reference: [7] <author> S. T. Barnard. PMRSB: </author> <title> parallel multilevel recursive spectral bisection. </title> <editor> In Frank Baker and Janus Wehmer, editors, </editor> <booktitle> Proc. Supercomputing 95, </booktitle> <address> San Diego, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection is perhaps the best static partitioner [6]. However, while Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB, its parallelization relies heavily on a shared memory architecture and is unlikely to be efficient in a true message passing environment <ref> [7] </ref>. Other enhancements to RSB [8, 9, 10] may make it more useful as a dynamic repartitioner, but doubts remain. Three dynamic load balancing schemes are available for use with PMDB. Iterative Tree Balancing [1, 5] (ITB) performs repeated local migrations to achieve balance.
Reference: [8] <author> A. Sohn, R. Biswas, and H. D. Simon. </author> <title> Impact of load balancing on unstructured adaptive computations for distributed-memory multiprocessors. </title> <booktitle> In Proc. Eighth IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 26-33, </pages> <address> New Or-leans, LA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Recursive spectral bisection is perhaps the best static partitioner [6]. However, while Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB, its parallelization relies heavily on a shared memory architecture and is unlikely to be efficient in a true message passing environment [7]. Other enhancements to RSB <ref> [8, 9, 10] </ref> may make it more useful as a dynamic repartitioner, but doubts remain. Three dynamic load balancing schemes are available for use with PMDB. Iterative Tree Balancing [1, 5] (ITB) performs repeated local migrations to achieve balance. Lightly loaded processors request load from their most heavily loaded neighbors.
Reference: [9] <author> R. Van Driessche and D. Roose. </author> <title> An improved spectral bisection algorithm and its application to dynamic load balancing. </title> <journal> Parallel Computing, </journal> <volume> 21 </volume> <pages> 29-48, </pages> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection is perhaps the best static partitioner [6]. However, while Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB, its parallelization relies heavily on a shared memory architecture and is unlikely to be efficient in a true message passing environment [7]. Other enhancements to RSB <ref> [8, 9, 10] </ref> may make it more useful as a dynamic repartitioner, but doubts remain. Three dynamic load balancing schemes are available for use with PMDB. Iterative Tree Balancing [1, 5] (ITB) performs repeated local migrations to achieve balance. Lightly loaded processors request load from their most heavily loaded neighbors.
Reference: [10] <author> C. H. Walshaw and M. Berzins. </author> <title> Dynamic load balancing for PDE solvers on adaptive unstructured meshes. </title> <journal> Concur-rency: Practice and Experience, </journal> <volume> 7(1) </volume> <pages> 17-28, </pages> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection is perhaps the best static partitioner [6]. However, while Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB, its parallelization relies heavily on a shared memory architecture and is unlikely to be efficient in a true message passing environment [7]. Other enhancements to RSB <ref> [8, 9, 10] </ref> may make it more useful as a dynamic repartitioner, but doubts remain. Three dynamic load balancing schemes are available for use with PMDB. Iterative Tree Balancing [1, 5] (ITB) performs repeated local migrations to achieve balance. Lightly loaded processors request load from their most heavily loaded neighbors.
Reference: [11] <author> A. Patra and J. T. Oden. </author> <title> Problem decomposition for adaptive hp finite element methods. </title> <journal> Comp. Sys. Engng., </journal> <volume> 6(2):97, </volume> <year> 1995. </year>
Reference-contexts: The ordered list of nodes is divided into segments corresponding to nearly equal load. Members of any given segment tend to be spatially adjacent and, thus, form a good partition. The use of space-filling curves <ref> [11] </ref> would be another alternative that keeps neighboring elements of the ordering in close spatial proximity. With h-refinement, the cost function that reflects the computational load on each processor is generally chosen as the number of elements on a processor.
Reference: [12] <author> R. Biswas, K. D. Devine, and J. E. Fla-herty. </author> <title> Parallel, adaptive finite element methods for conservation laws. </title> <journal> Appl. Nu-mer. Math., </journal> <volume> 14 </volume> <pages> 255-283, </pages> <year> 1994. </year>
Reference-contexts: be used to address each of these needs, and both ITB and OCT have been extended to use this scheme. 3 Adaptive Techniques Results presented in Section 5 were obtained using a parallel adaptive Euler solver in which three-dimensional conservation laws are dis-cretized using a discontinuous Galerkin finite element method <ref> [12, 13, 14] </ref>. More details on the solver may be found in [2]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed.
Reference: [13] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws III: One-Dimensional systems. </title> <journal> J. Comput. Phys., </journal> <volume> 84 </volume> <pages> 90-113, </pages> <year> 1989. </year>
Reference-contexts: be used to address each of these needs, and both ITB and OCT have been extended to use this scheme. 3 Adaptive Techniques Results presented in Section 5 were obtained using a parallel adaptive Euler solver in which three-dimensional conservation laws are dis-cretized using a discontinuous Galerkin finite element method <ref> [12, 13, 14] </ref>. More details on the solver may be found in [2]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed.
Reference: [14] <author> B. Cockburn and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws II: General framework. </title> <journal> Math. Comp., </journal> <volume> 52 </volume> <pages> 411-435, </pages> <year> 1989. </year>
Reference-contexts: be used to address each of these needs, and both ITB and OCT have been extended to use this scheme. 3 Adaptive Techniques Results presented in Section 5 were obtained using a parallel adaptive Euler solver in which three-dimensional conservation laws are dis-cretized using a discontinuous Galerkin finite element method <ref> [12, 13, 14] </ref>. More details on the solver may be found in [2]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed.
Reference: [15] <author> L. Oliker, R. Biswas, and R. C. Strawn. </author> <title> Parallel implementaion of an adaptive scheme for 3D unstructured grids on the SP2. </title> <booktitle> In Proc. 3rd International Workshop on Parallel Algorithms for Irregularly Structured Problems, </booktitle> <address> Santa Barbara, </address> <year> 1996. </year>
Reference-contexts: We improve balance during the enrichment process by using error indicator data generated during the preceding computation phase to select element weightings and perform load balancing before the refinement stage of the enrichment process. A similar technique has also been used by Oliker, Biswas, and Strawn <ref> [15] </ref> in their enrichment procedure. This a priori load balancing reduces imbalance during the refinement stage of enrichment and results in fewer elements being migrated than the standard method.
Reference: [16] <author> R. E. Dillon Jr. </author> <title> A parametric study of perforated muzzle brakes. </title> <type> ARDC Technical Report ARLCB-TR-84015, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1984. </year>
Reference-contexts: This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [16] </ref>. We match flow con-ditions to those of shock tube studies of Dil-lon [16] and Nagamatsu et al. [17]. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time. The initial mesh contains 77,231 tetrahedral elements. <p> This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [16] </ref>. We match flow con-ditions to those of shock tube studies of Dil-lon [16] and Nagamatsu et al. [17]. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time. The initial mesh contains 77,231 tetrahedral elements.
Reference: [17] <author> H. T. Nagamatsu, K. Y. Choi, R. E. Duffy, and G. C. Carofano. </author> <title> An experimental and numerical study of the flow through a vent hole in a perforated muzzle brake. </title> <type> ARDEC Technical Report ARCCB-TR-87016, </type> <institution> Benet Weapons Laboratory, Wa-tervliet, </institution> <year> 1987. </year>
Reference-contexts: This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns [16]. We match flow con-ditions to those of shock tube studies of Dil-lon [16] and Nagamatsu et al. <ref> [17] </ref>. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time. The initial mesh contains 77,231 tetrahedral elements. The larger cylinder (the shock tube) initially contains air moving at Mach 1.23 while the smaller cylinder (the vent) is quiescent. <p> A Mach 1.23 flow is prescribed at the tube's inlet. Figure 2 illustrates the Mach number with velocity vectors at time t = 0:6 in the simulation. These flow features compare favorably with experimental and numerical results of Nagamatsu et al. <ref> [17] </ref>. All results were obtained using 16 processors of an IBM SP2 computer. velocity vectors onto the surfaces of a perforated cylinder at time 0.6. As previously indicated, the standard non-predictive method executes a few iterations of ITB between spatial enrichment stages followed by a global size-weighted repartition-ing after enrichment.
Reference: [18] <author> C. L. Bottasso, J. E. Flaherty, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> The quality of partitions produced by an iterative load balancer. </title> <editor> In Boleslaw K. Szyman-ski and Balaram Sinharoy, editors, </editor> <booktitle> Proc. Third Workshop on Languages, Compilers, and Runtime Systems, </booktitle> <pages> pages 265-277, </pages> <address> Troy, </address> <year> 1996. </year>
Reference-contexts: As previously indicated, the standard non-predictive method executes a few iterations of ITB between spatial enrichment stages followed by a global size-weighted repartition-ing after enrichment. Global repartitioners tend to maintain better partition quality than ITB <ref> [18] </ref>. Thus, OCT was used in balancing after enrichment for nonpredictive runs. For tests of the predictive methods, both ITB and OCT were used with UP (denoted UPITB and UPOCT).
References-found: 18

