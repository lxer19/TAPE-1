URL: http://www.cs.unc.edu/~menges/publications/XTech93.ps
Refering-URL: http://www.cs.unc.edu/~menges/abstracts/XTech93.html
Root-URL: http://www.cs.unc.edu
Title: The X Engine Library: A C++ Library for Constructing  
Author: X Pseudo-servers John Menges 
Abstract: A common technique for adding window sharing and tracking/replay capabilities to the X Window System is the use of an X Pseudo-server. An X Pseudo-server is a process placed between an X server and X clients. It adds capabilities to X by monitoring and manipulating the X protocol stream between X servers and clients. X Pseudo-servers are typically large, complex programs, and can be difficult to design, implement, and maintain. The X Engine Library described in this paper is a C++ library that greatly simplifies these tasks. 
Abstract-found: 1
Intro-found: 1
Reference: [AWF91] <author> H. M. Abdel-Wahab and Mark A. Feit. XTV: </author> <title> A Framework for Sharing X Window Clients in Remote Synchronous Collaboration. </title> <booktitle> In Proceedings of Tricomm '91, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: Introduction A common technique for adding window sharing and tracking/replay capabilities to the X Window System is the use of an X Pseudo-server (XPS) [Pat90] [Lau90] <ref> [AWF91] </ref> [Lin92]. An XPS is a process placed between an X server and X clients. Figure 1 shows a simple XPS and its relationships to X servers and clients. <p> In previous work here and at Old Dominion University, we have written two XPSs. The first, XTV <ref> [AWF91] </ref>, was originally based on the idea of sharing individual windows. The second, Virtual Screen [Lin92], was based on the idea of sharing a collection of windows within an encompassing "virtual" screen.
Reference: [Lau90] <author> J. Chris Lauwers. </author> <title> Collaboration Transparency in Desktop Teleconferencing Environments. </title> <type> Technical Report CSL-TR-90-435, </type> <institution> Computer Systems Laboratory, Departments of Electrical Engineering and Computer Science, Stanford University, Stanford, </institution> <address> California 94305-4055, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: Introduction A common technique for adding window sharing and tracking/replay capabilities to the X Window System is the use of an X Pseudo-server (XPS) [Pat90] <ref> [Lau90] </ref> [AWF91] [Lin92]. An XPS is a process placed between an X server and X clients. Figure 1 shows a simple XPS and its relationships to X servers and clients. <p> An XPS that supports, e.g., window sharing between users on different workstations, is more complex than one might at first expect. There are many difficult problems to be solved, as Patterson [Pat90] and Lauwers <ref> [Lau90] </ref>, among others, attest.
Reference: [Lin92] <author> Jin-Kun Lin. </author> <title> Virtual Screen: A Framework for Task Management. </title> <booktitle> In Proceedings of the Sixth Annual X Technical Conference, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: Introduction A common technique for adding window sharing and tracking/replay capabilities to the X Window System is the use of an X Pseudo-server (XPS) [Pat90] [Lau90] [AWF91] <ref> [Lin92] </ref>. An XPS is a process placed between an X server and X clients. Figure 1 shows a simple XPS and its relationships to X servers and clients. The XPS monitors and/or modifies the X protocol message streams between the server and clients to add capabilities to the window system. <p> In previous work here and at Old Dominion University, we have written two XPSs. The first, XTV [AWF91], was originally based on the idea of sharing individual windows. The second, Virtual Screen <ref> [Lin92] </ref>, was based on the idea of sharing a collection of windows within an encompassing "virtual" screen. Here, window positions within the virtual screen and a window manager for the virtual screen are shared, as well as the windows themselves.
Reference: [Ous90] <author> John K. Ousterhout. </author> <title> TCL: An Embeddable Command Language. </title> <booktitle> In Proceedings of the 1990 Winter USENIX Conference, </booktitle> <year> 1990. </year>
Reference-contexts: When a queue becomes empty, it is removed from the service queue. The X Control handler is an "input available" event handler that reads TCL <ref> [Ous90] </ref> commands from a socket and passes them to a TCL interpreter. Commands are registered with the interpreter by filters, handlers, or other objects in the XPS. Interpreting a command results in a method call on the object registering the command.
Reference: [Pat90] <author> J. F. Patterson. </author> <title> The Good, the Bad, and the Ugly of Window Sharing in X. </title> <booktitle> In Proceedings of the Fourth Annual X Technical Conference, </booktitle> <month> January </month> <year> 1990. </year>
Reference-contexts: Introduction A common technique for adding window sharing and tracking/replay capabilities to the X Window System is the use of an X Pseudo-server (XPS) <ref> [Pat90] </ref> [Lau90] [AWF91] [Lin92]. An XPS is a process placed between an X server and X clients. Figure 1 shows a simple XPS and its relationships to X servers and clients. <p> An XPS that supports, e.g., window sharing between users on different workstations, is more complex than one might at first expect. There are many difficult problems to be solved, as Patterson <ref> [Pat90] </ref> and Lauwers [Lau90], among others, attest.
Reference: [SS91] <author> J. B. Smith and F. D. Smith. </author> <title> ABC: A Hypermedia System for Artifact-Based Collaboration. </title> <booktitle> In Proceedings of Hypertext '91, </booktitle> <month> December </month> <year> 1991. </year> <month> 12 </month>
Reference-contexts: This paper appears in the Proceedings of the 7th Annual X Technical Conference, Boston MA (Jan 1993), published in The X Resource, Issue 5. 1 As part of our Artifact-Based Collaboration System (ABC) <ref> [SS91] </ref>, we are implementing window sharing and tracking/replay for X applications using an XPS. In previous work here and at Old Dominion University, we have written two XPSs. The first, XTV [AWF91], was originally based on the idea of sharing individual windows.
References-found: 6

