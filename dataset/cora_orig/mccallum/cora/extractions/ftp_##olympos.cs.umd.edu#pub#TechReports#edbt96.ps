URL: ftp://olympos.cs.umd.edu/pub/TechReports/edbt96.ps
Refering-URL: http://www.cs.umd.edu/class/spr96/cmsc724-s96/readinglist.html
Root-URL: 
Phone: 3  
Title: Declustering spatial databases on a multi-computer architecture  
Author: Nikos Koudas and Christos Faloutsos ? and Ibrahim Kamel 
Keyword: Parallel data bases, spatial access methods, shared nothing architecture.  
Address: Murray Hill, NJ  
Affiliation: 1 Computer Systems Research Institute University of Toronto 2 AT&T Bell Laboratories  Matsushita Information Technology Laboratory  
Abstract: We present a technique to decluster a spatial access method on a shared-nothing multi-computer architecture [DGS + 90]. We propose a software architecture with the R-tree as the underlying spatial access method, with its non-leaf levels on the `master-server' and its leaf nodes distributed across the servers. The major contribution of our work is the study of the optimal capacity of leaf nodes, or `chunk size' (or `striping unit'): we express the response time on range queries as a function of the `chunk size', and we show how to optimize it. We implemented our method on a network of workstations, using a real dataset, and we compared the experimental and the theoretical results. The conclusion is that our formula for the response time is very accurate (the maximum relative error was 29%; the typical error was in the vicinity of 10-15%). We illustrate one of the possible ways to exploit such an accurate formula, by examining several `what-if' scenarios. One major, practical conclusion is that a chunk size of 1 page gives either optimal or close to optimal results, for a wide range of the parameters. 
Abstract-found: 1
Intro-found: 1
Reference: [AS94] <author> Rakesh Agrawal and Ramakrishnan Srikant. </author> <title> Fast algorithms for mining association rules in large databases. </title> <booktitle> Proc. of VLDB Conf., </booktitle> <pages> pages 487-499, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Target applications are, for example, GIS applications (`retrieve the elevation data for a given region'); statistical queries (eg., `find the average salary in the state of Michigan, for a census database'); `data mining' applications <ref> [AS94] </ref> and decision support systems (eg., `find correlations/rules among demographic data and symptoms, for a collection of patient records' ). Given a spatial database, our first reaction would be to do declustering over the available machines. Thus, similar (=nearby) data rectangles should not be stored on the same machine.
Reference: [BB82] <author> D. Ballard and C. Brown. </author> <title> Computer Vision. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [Whi81], Computer-Aided Design (CAD) [OHM + 84], [Gut84a], computer vision and robotics <ref> [BB82] </ref>, traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [SSH86], temporal databases [SS88], where time can be treated as one more dimension [KS91], scientific databases, with spatial-temporal data, etc.
Reference: [Ben75] <author> J.L. Bentley. </author> <title> Multidimensional Binary Search Trees Used for Associative Searching. </title> <journal> CACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: methods that transform rectangles into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees <ref> [Ben75] </ref>, k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk.
Reference: [BFG + 95] <author> C. K. Baru, G. Fecteau, A. Goyal, H. Hsiao, A. Jhingran, S. Padmanabhan, G. P. Copeland, and W. G. Wilson. </author> <title> DB2 Parallel Edition. </title> <journal> IBM Systems Journal, </journal> <volume> 32(2) </volume> <pages> 292-322, </pages> <year> 1995. </year>
Reference-contexts: Both our implementation and our analysis can handle either case, with small modifications; however, we focus on the `selective activation', because it scales-up better. This is the typical approach that commercial parallel DBMSs follow (eg., the parallel version of IBM's DB2 <ref> [BFG + 95] </ref>). Fig. 2. The proposed architecture Each activated server fetches the relevant chunks from its local disk, processes them (to discard data rectangles that do not intersect the query rect angle), and ships the qualifying data back to the master server. Fig. 3.
Reference: [BKS93] <author> Thomas Brinkhoff, Hans-Peter Kriegel, and Bernhard Seeger. </author> <title> Efficient processing of spatial joins using r-trees. </title> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 237-246, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This conclusion is important from a practical point of view, because it provides a simple, intuitive rule for the optimal choice of the chunk size. Future work includes the design of parallel R-tree algorithms for other types of queries, such as spatial joins <ref> [BKS93] </ref>, and experimentation with other types of interconnects, such as ATM switches.
Reference: [BKSS90] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The r*-tree: an efficient and robust access method for points and rectangles. </title> <booktitle> ACM SIG-MOD, </booktitle> <pages> pages 322-331, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The R + -tree [SRF87] avoids the overlap between non-leaf nodes of the tree, by clipping data rectangles that cross node boundaries. Beckmann et. al. proposed the R fl -tree <ref> [BKSS90] </ref>, which seems to have very good performance.
Reference: [BMK88] <author> David Boggs, Jeffrey C. Mogul, and Christopher A. Kent. </author> <title> Measured capacity of an ethernet: Myths and reality. </title> <note> WRL Research Report 88/4, </note> <year> 1988. </year>
Reference-contexts: It is important to highlight how overhead from other users using the network can be represented in the formulas above. As analyzed in <ref> [BMK88] </ref>, the time to send a packet grows linearly with the number ff of active nodes transmitting, that is: CC = ff fi CC idle (9) where ff is the number of active (transmitting) nodes simultaneously with the node in question and CC idle is the time to transmit a message
Reference: [CR93] <author> Ling Tony Chen and Doron Rotem. </author> <title> Declustering objects for visualization. </title> <booktitle> Proc. VLDB Conf., </booktitle> <month> August </month> <year> 1993. </year> <note> to appear. </note>
Reference-contexts: Typical representatives include the `disk modulo allocation' method and its variants [DS82], [WYD87], methods using minimum spanning trees [FLC86], the field-wise exclusive-OR (`FX') method [KP88], methods using error correcting codes [FM89], methods based on the Hilbert curve [FB93], and methods using lattices <ref> [CR93] </ref>. The objective in all these methods is to maximize the parallelism for partial match or range queries. An adaptive algorithm to achieve dynamic re-declustering, to 'cool-off' hot spots is presented in [WZS91].
Reference: [DGS + 90] <author> D. DeWitt, S. Ghandeharizadeh, D. A. Schneider, A. Bricker, H. Hsiao, and R. Rasmussen. </author> <title> The gamma database machine project. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference: [DKL + 94] <author> David. J DeWitt, Navin Kabra, Jun Luo, Jignesh Patel, and Jie-Bing Yu. </author> <title> The client/server paradise. </title> <booktitle> Proceedings of the VLDB, 1994 Santiago, </booktitle> <address> Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Little work has been done on the parallelization of R-trees: In [KF92] we studied the multi-disk architecture, with no communication cost, and we proposed the so-called `proximity index' to measure the dis-similarity of two rectangles, in order to decide which unit to assign each rectangle to. DeWitt et al. <ref> [DKL + 94] </ref> discuss a client-server architecture for Geographical Information Systems, with a rich data model and a storage manager that uses a variation of R-trees.
Reference: [DS82] <author> H.C. Du and J.S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple disk systems. </title> <journal> ACM Trans. Database Systems (TODS), </journal> <volume> 7(1) </volume> <pages> 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: There is also much work on how to organize spatial access methods on multi-disk or multi-processor machines. The majority of them examine the paralleliza-tion of grid-based structures. Typical representatives include the `disk modulo allocation' method and its variants <ref> [DS82] </ref>, [WYD87], methods using minimum spanning trees [FLC86], the field-wise exclusive-OR (`FX') method [KP88], methods using error correcting codes [FM89], methods based on the Hilbert curve [FB93], and methods using lattices [CR93]. The objective in all these methods is to maximize the parallelism for partial match or range queries.
Reference: [FB93] <author> Christos Faloutsos and Pravin Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> In 2nd Int. Conference on Parallel and Distributed Information Systems (PDIS), </booktitle> <pages> pages 18-25, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: The majority of them examine the paralleliza-tion of grid-based structures. Typical representatives include the `disk modulo allocation' method and its variants [DS82], [WYD87], methods using minimum spanning trees [FLC86], the field-wise exclusive-OR (`FX') method [KP88], methods using error correcting codes [FM89], methods based on the Hilbert curve <ref> [FB93] </ref>, and methods using lattices [CR93]. The objective in all these methods is to maximize the parallelism for partial match or range queries. An adaptive algorithm to achieve dynamic re-declustering, to 'cool-off' hot spots is presented in [WZS91]. <p> We distinguish two cases: (a) a static database (no insertions/deletions/updates) and (b) a dynamic one. Fig. 4. Hilbert Curves of order 1,2 and 3 For a static database, following <ref> [FB93] </ref>, we propose to use Hilbert Curves to achieve good declustering. A Hilbert curve is a type of space filling curve that visits all points in a k-dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. <p> Thus, it can be used to linearize the points of a grid. In [FR89], it was shown experimentally that the Hilbert curve achieves better clustering than several other space-filling curves. We can achieve good declustering by using a variation of the Hilbert-based declustering method <ref> [FB93] </ref>, as applied in the so-called `Hilbert-packed R-trees' [KF93]).
Reference: [FBF + 94] <author> C. Faloutsos, R. Barber, M. Flickner, J. Hafner, W. Niblack, D. Petkovic, and W. Equitz. </author> <title> Efficient and effective querying by image content. </title> <journal> Journal of Intell. Inf. Systems, </journal> 3(3/4):231-262, July 1994. 
Reference-contexts: object-id several times (once for each piece of the qualifying object) the R-trees operate on the native address space, which is of lower dimension ality; in contrast, transforming rectangles into points in a higher-dimensionality space invites the `dimensionality curse' problems early on. - R-trees seem more robust for higher dimensionalities <ref> [FBF + 94] </ref>. Scientific, medical and statistical databases may involve several dimensions, eg., (x, y, z, time, pressure, wind velocity, temperature), or (gender, age, cholesterol level, blood-pressure, etc.). Thus, we mainly focus on the R-tree [Gut84b] and its variants. The R-tree is an extension of the B-tree for multidimensional objects.
Reference: [FK94] <author> Christos Faloutsos and Ibrahim Kamel. </author> <title> Beyond Uniformity and Irndepen-dence: Analysis of R-trees Using the Concept of Fractal Dimension. </title> <booktitle> Proc. ACM SIGACT-SIGMOD-SIGART PODS, </booktitle> <pages> pages 4-13, </pages> <month> May </month> <year> 1994. </year> <note> Also available as CS-TR-3198, UMIACS-TR-93-130. </note>
Reference-contexts: More accurate estimates require formulas that use the fractal dimension of the specific dataset <ref> [FK94] </ref>. However, as the experiments section shows, even the uniformity assumption gives satisfactory results because the fractal dimension of the specific data set was 1.7 [FK94], rather close to the value of 2, that corresponds to the uniformity assumption. <p> More accurate estimates require formulas that use the fractal dimension of the specific dataset <ref> [FK94] </ref>. However, as the experiments section shows, even the uniformity assumption gives satisfactory results because the fractal dimension of the specific data set was 1.7 [FK94], rather close to the value of 2, that corresponds to the uniformity assumption. Let T localperpage be the time that each server takes to process one disk page locally, including the disk access time and the CPU processing time.
Reference: [FLC86] <author> M.F. Fang, R.C.T. Lee, and C.C. Chang. </author> <title> The idea of de-clustering and its applications. </title> <booktitle> In Proc. 12th International Conference on VLDB, </booktitle> <pages> pages 181-188, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: There is also much work on how to organize spatial access methods on multi-disk or multi-processor machines. The majority of them examine the paralleliza-tion of grid-based structures. Typical representatives include the `disk modulo allocation' method and its variants [DS82], [WYD87], methods using minimum spanning trees <ref> [FLC86] </ref>, the field-wise exclusive-OR (`FX') method [KP88], methods using error correcting codes [FM89], methods based on the Hilbert curve [FB93], and methods using lattices [CR93]. The objective in all these methods is to maximize the parallelism for partial match or range queries.
Reference: [FM89] <author> C. Faloutsos and D. Metaxas. </author> <title> Declustering using error correcting codes. </title> <booktitle> Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 253-258, </pages> <month> March </month> <year> 1989. </year> <note> Also available as UMIACS-TR-88-91 and CS-TR-2157. </note>
Reference-contexts: The majority of them examine the paralleliza-tion of grid-based structures. Typical representatives include the `disk modulo allocation' method and its variants [DS82], [WYD87], methods using minimum spanning trees [FLC86], the field-wise exclusive-OR (`FX') method [KP88], methods using error correcting codes <ref> [FM89] </ref>, methods based on the Hilbert curve [FB93], and methods using lattices [CR93]. The objective in all these methods is to maximize the parallelism for partial match or range queries. An adaptive algorithm to achieve dynamic re-declustering, to 'cool-off' hot spots is presented in [WZS91].
Reference: [FR89] <author> C. Faloutsos and S. Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 247-252, </pages> <month> March </month> <year> 1989. </year> <note> also available as UMIACS-TR-89-47 and CS-TR-2242. </note>
Reference-contexts: This classification includes (a) methods that transform rectangles into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves <ref> [FR89] </ref> [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk. <p> A Hilbert curve is a type of space filling curve that visits all points in a k-dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. In <ref> [FR89] </ref>, it was shown experimentally that the Hilbert curve achieves better clustering than several other space-filling curves. We can achieve good declustering by using a variation of the Hilbert-based declustering method [FB93], as applied in the so-called `Hilbert-packed R-trees' [KF93]).
Reference: [Fre87] <author> Michael Freeston. </author> <title> The bang file: a new kind of grid file. </title> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 260-269, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file <ref> [Fre87] </ref>, hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk.
Reference: [Fre95] <author> Michael Freeston. </author> <title> A general solution of the n-dimensional b-tree problem. </title> <booktitle> Proc. of ACM-SIGMOD, </booktitle> <pages> pages 80-91, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees <ref> [Fre95] </ref> e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk. Among the above three approaches, we focus on the R-tree family, for the fol- lowing reasons: the R-trees do not cut data rectangles into pieces (unlike the linear-quadtree approach).
Reference: [Gar82] <author> I. </author> <title> Gargantini. An effective way to represent quadtrees. </title> <journal> Comm. of ACM (CACM), </journal> <volume> 25(12) </volume> <pages> 905-910, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: A recent survey and classification can be found in [Sam90]. This classification includes (a) methods that transform rectangles into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees <ref> [Gar82] </ref> or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b)
Reference: [GDQ92] <author> Shahram Ghandeharizadeh, David J. DeWitt, and W. Qureshi. </author> <title> A perfor-mance analysis of alternative multi-attribute declustering strategies. </title> <booktitle> SIG-MOD Conf., </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: An adaptive algorithm to achieve dynamic re-declustering, to 'cool-off' hot spots is presented in [WZS91]. However, the above methods try to do the best possible declustering without taking into account the communication cost. One of the exceptions is the work by Ghandeharizadeh et. al. <ref> [GDQ92] </ref>, which considers a grid file with a certain profile of range queries against it; a major contribution of this work is a formula to estimate the optimal number of activated processors for a given query. Here, we focus on the parallelization of R-trees.
Reference: [Gun86] <author> O. Gunther. </author> <title> The cell tree: an index for geometric data. </title> <note> Memorandum No. </note> <institution> UCB/ERL M86/89, Univ. of California, Berkeley, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees <ref> [Gun86] </ref>, the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk.
Reference: [Gut84a] <author> A. Guttman. </author> <title> New Features for Relational Database Systems to Support CAD Applications. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [Whi81], Computer-Aided Design (CAD) [OHM + 84], <ref> [Gut84a] </ref>, computer vision and robotics [BB82], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [SSH86], temporal databases [SS88], where time can be treated as one more dimension [KS91], scientific databases, with spatial-temporal data, etc.
Reference: [Gut84b] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: A special case of the range query is the point query or stabbing query, where the query rectangle degenerates to a point. We study the use of parallelism in order to improve the response time of spatial queries. We plan to use R-trees <ref> [Gut84b] </ref> as our underlying data structure, because they guarantee good space utilization, they treat geometric objects as a whole and they give good response time. We envision a shared-nothing architecture, with several workstations connected to a LAN. <p> Scientific, medical and statistical databases may involve several dimensions, eg., (x, y, z, time, pressure, wind velocity, temperature), or (gender, age, cholesterol level, blood-pressure, etc.). Thus, we mainly focus on the R-tree <ref> [Gut84b] </ref> and its variants. The R-tree is an extension of the B-tree for multidimensional objects. A geometric object is represented by its minimum bounding rectangle (MBR).
Reference: [HN83] <author> K. Hinrichs and J. Nievergelt. </author> <title> The grid file: a data structure to support proximity queries on spatial objects. </title> <booktitle> Proc. of the WG'83 (Intern. Workshop on Graph Theoretic Concepts in Computer Science), </booktitle> <pages> pages 100-113, </pages> <year> 1983. </year>
Reference-contexts: Section 6 lists the conclusions and highlights directions for future work. 2 Survey Several spatial access methods have been proposed. A recent survey and classification can be found in [Sam90]. This classification includes (a) methods that transform rectangles into points in a higher dimensionality space <ref> [HN83] </ref>, subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d
Reference: [Jag90] <author> H.V. Jagadish. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <pages> pages 332-342, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: This classification includes (a) methods that transform rectangles into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] <ref> [Jag90] </ref>, and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk.
Reference: [KF92] <author> Ibrahim Kamel and Christos Faloutsos. </author> <title> Parallel r-trees. </title> <booktitle> Proc. of ACM SIGMOD Conf., </booktitle> <pages> pages 195-204, </pages> <month> June </month> <year> 1992. </year> <note> Also available as Tech. Report UMIACS TR 92-1, CS-TR-2820. </note>
Reference-contexts: Moreover, the grid file is mainly designed for point data; if the data are rectangles, the R-tree is better equipped to handle them. Little work has been done on the parallelization of R-trees: In <ref> [KF92] </ref> we studied the multi-disk architecture, with no communication cost, and we proposed the so-called `proximity index' to measure the dis-similarity of two rectangles, in order to decide which unit to assign each rectangle to. <p> The only thing that needs to be added is that, during a split, we have to decide where to put the newly created chunk. There are several criteria, ranging from a random assignment, to elaborate methods such as the so-called proximity index <ref> [KF92] </ref>: This method tries to put a new chunk on a server that has the most un-similar chunks.
Reference: [KF93] <author> Ibrahim Kamel and Christos Faloutsos. </author> <title> On packing r-trees. </title> <booktitle> Second Int. Conf. on Information and Knowledge Management (CIKM), </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: The R-tree inspired much subsequent work, whose main focus was to improve the search time. A packing technique is proposed in [RL85] to minimize the overlap between different nodes in the R-tree for static data. An improved packing technique based on the Hilbert Curve is proposed in <ref> [KF93] </ref>; it is extended for dynamic environments in [KF94]. The R + -tree [SRF87] avoids the overlap between non-leaf nodes of the tree, by clipping data rectangles that cross node boundaries. Beckmann et. al. proposed the R fl -tree [BKSS90], which seems to have very good performance. <p> In [FR89], it was shown experimentally that the Hilbert curve achieves better clustering than several other space-filling curves. We can achieve good declustering by using a variation of the Hilbert-based declustering method [FB93], as applied in the so-called `Hilbert-packed R-trees' <ref> [KF93] </ref>). <p> Let Q be the expected number of data pages that a query of size q x fi q y will retrieve. There are various ways to estimate Q, with varying degrees of accuracy: Using the uniformity assumption <ref> [KF93] </ref>, we have Q = q x fiq y fiD where D is the total number of records in the database and P rec is the number of records per page. More accurate estimates require formulas that use the fractal dimension of the specific dataset [FK94].
Reference: [KF94] <author> Ibrahim Kamel and Christos Faloutsos. Hilbert R-tree: </author> <title> An Improved R-tree Using Fractals. </title> <booktitle> In Proceedings of VLDB Conference,, </booktitle> <pages> pages 500-509, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: A packing technique is proposed in [RL85] to minimize the overlap between different nodes in the R-tree for static data. An improved packing technique based on the Hilbert Curve is proposed in [KF93]; it is extended for dynamic environments in <ref> [KF94] </ref>. The R + -tree [SRF87] avoids the overlap between non-leaf nodes of the tree, by clipping data rectangles that cross node boundaries. Beckmann et. al. proposed the R fl -tree [BKSS90], which seems to have very good performance.
Reference: [KP88] <author> M.H. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match retrieval. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <pages> pages 173-182, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: The majority of them examine the paralleliza-tion of grid-based structures. Typical representatives include the `disk modulo allocation' method and its variants [DS82], [WYD87], methods using minimum spanning trees [FLC86], the field-wise exclusive-OR (`FX') method <ref> [KP88] </ref>, methods using error correcting codes [FM89], methods based on the Hilbert curve [FB93], and methods using lattices [CR93]. The objective in all these methods is to maximize the parallelism for partial match or range queries.
Reference: [KS91] <author> Curtis P. Kolovson and Michael Stonebraker. </author> <title> Segment indexes: Dynamic indexing techniques for multi-dimensional interval data. </title> <booktitle> Proc. ACM SIG-MOD, </booktitle> <pages> pages 138-147, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: including: Cartography [Whi81], Computer-Aided Design (CAD) [OHM + 84], [Gut84a], computer vision and robotics [BB82], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [SSH86], temporal databases [SS88], where time can be treated as one more dimension <ref> [KS91] </ref>, scientific databases, with spatial-temporal data, etc. In several of these applications the volume of data is huge, necessitating the use of multiple units. For example, NASA expects 1 Terabyte (=10 12 ) of data per day; this corresponds to 10 16 bytes per year of satellite data.
Reference: [LS90] <author> David B. Lomet and Betty Salzberg. </author> <title> The hb-tree: a multiattribute indexing method with good guaranteed performance. </title> <journal> ACM TODS, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees <ref> [LS90] </ref>, n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk.
Reference: [NHS84] <author> J. Nievergelt, H. Hinterberger, and K.C. Sevcik. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM TODS, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: A recent survey and classification can be found in [Sam90]. This classification includes (a) methods that transform rectangles into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file <ref> [NHS84] </ref> (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles)
Reference: [OHM + 84] <author> J. K. Ousterhout, G. T. Hamachi, R. N. Mayo, W. S. Scott, and G. S. Tay-lor. </author> <title> Magic: a vlsi layout system. </title> <booktitle> In 21st Design Automation Conference, </booktitle> <pages> pages 152 - 159, </pages> <address> Alburquerque, NM, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [Whi81], Computer-Aided Design (CAD) <ref> [OHM + 84] </ref>, [Gut84a], computer vision and robotics [BB82], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [SSH86], temporal databases [SS88], where time can be treated as one more dimension [KS91], scientific databases, with spatial-temporal data, etc.
Reference: [Ore86] <author> J. Orenstein. </author> <title> Spatial query processing in an object-oriented database system. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 326-336, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: A recent survey and classification can be found in [Sam90]. This classification includes (a) methods that transform rectangles into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering <ref> [Ore86] </ref> or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees [Rob81], cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk.
Reference: [RL85] <author> N. Roussopoulos and D. Leifker. </author> <title> Direct spatial search on pictorial databases using packed R-trees. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <month> May </month> <year> 1985. </year>
Reference-contexts: The R-tree inspired much subsequent work, whose main focus was to improve the search time. A packing technique is proposed in <ref> [RL85] </ref> to minimize the overlap between different nodes in the R-tree for static data. An improved packing technique based on the Hilbert Curve is proposed in [KF93]; it is extended for dynamic environments in [KF94].
Reference: [Rob81] <author> J.T. Robinson. </author> <title> The k-d-b-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 10-18, </pages> <year> 1981. </year>
Reference-contexts: transform rectangles into points in a higher dimensionality space [HN83], subsequently using a point access method, like a grid file [NHS84] (b) methods that use linear quadtrees [Gar82] or, equivalently, the z-ordering [Ore86] or other space filling curves [FR89] [Jag90], and finally, (c) methods based on trees (k-d-trees [Ben75], k-d-B-trees <ref> [Rob81] </ref>, cell-trees [Gun86], the BANG file [Fre87], hB-trees [LS90], n-d generalizations of B-trees [Fre95] e.t.c.) Fig. 1. (a) Data (dark rectangles) organized in an R-tree with fanout=3 (b) the resulting R-tree, on disk.
Reference: [Sam90] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Section 5 presents experimental results and validates the formulas derived from our analysis. Section 6 lists the conclusions and highlights directions for future work. 2 Survey Several spatial access methods have been proposed. A recent survey and classification can be found in <ref> [Sam90] </ref>.
Reference: [SRF87] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The r+ tree: a dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. 13th International Conference on VLDB, </booktitle> <pages> pages 507-518, </pages> <address> England,, </address> <month> September </month> <year> 1987. </year> <note> also available as SRC-TR-87-32, UMIACS-TR-87-3, CS-TR-1795. </note>
Reference-contexts: A packing technique is proposed in [RL85] to minimize the overlap between different nodes in the R-tree for static data. An improved packing technique based on the Hilbert Curve is proposed in [KF93]; it is extended for dynamic environments in [KF94]. The R + -tree <ref> [SRF87] </ref> avoids the overlap between non-leaf nodes of the tree, by clipping data rectangles that cross node boundaries. Beckmann et. al. proposed the R fl -tree [BKSS90], which seems to have very good performance.
Reference: [SS88] <author> R. Stam and Richard Snodgrass. </author> <title> A bibliography on temporal databases. </title> <journal> IEEE Bulletin on Data Engineering, </journal> <volume> 11(4), </volume> <month> December </month> <year> 1988. </year>
Reference-contexts: Spatial data arise in many applications, including: Cartography [Whi81], Computer-Aided Design (CAD) [OHM + 84], [Gut84a], computer vision and robotics [BB82], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [SSH86], temporal databases <ref> [SS88] </ref>, where time can be treated as one more dimension [KS91], scientific databases, with spatial-temporal data, etc. In several of these applications the volume of data is huge, necessitating the use of multiple units.
Reference: [SSH86] <author> M. Stonebraker, T. Sellis, and E. Hanson. </author> <title> Rule indexing implementations in database systems. </title> <booktitle> In Proceedings of the First International Conference on Expert Database Systems, </booktitle> <address> Charleston, SC, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: Spatial data arise in many applications, including: Cartography [Whi81], Computer-Aided Design (CAD) [OHM + 84], [Gut84a], computer vision and robotics [BB82], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems <ref> [SSH86] </ref>, temporal databases [SS88], where time can be treated as one more dimension [KS91], scientific databases, with spatial-temporal data, etc. In several of these applications the volume of data is huge, necessitating the use of multiple units.
Reference: [Whi81] <author> M. White. N-Trees: </author> <title> Large Ordered Indexes for Multi-Dimensional Space. Application Mathematics Research Staff, Statistical Research Division, </title> <type> U.S. </type> <institution> Bureau of the Census, </institution> <month> December </month> <year> 1981. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography <ref> [Whi81] </ref>, Computer-Aided Design (CAD) [OHM + 84], [Gut84a], computer vision and robotics [BB82], traditional databases, where a record with k attributes corresponds to a point in a k-d space, rule indexing in expert database systems [SSH86], temporal databases [SS88], where time can be treated as one more dimension [KS91], scientific databases,
Reference: [WYD87] <author> J.-H. Wang, T.-S. Yuen, and D.H.-C. Du. </author> <title> On multiple random accesses and physical data placement in dynamic files. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-13(8):977-987, </volume> <month> August </month> <year> 1987. </year>
Reference-contexts: There is also much work on how to organize spatial access methods on multi-disk or multi-processor machines. The majority of them examine the paralleliza-tion of grid-based structures. Typical representatives include the `disk modulo allocation' method and its variants [DS82], <ref> [WYD87] </ref>, methods using minimum spanning trees [FLC86], the field-wise exclusive-OR (`FX') method [KP88], methods using error correcting codes [FM89], methods based on the Hilbert curve [FB93], and methods using lattices [CR93]. The objective in all these methods is to maximize the parallelism for partial match or range queries.

References-found: 43

