URL: http://www.cs.umn.edu/Users/dept/users/wieckows/1.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/wieckows/
Root-URL: http://www.cs.umn.edu
Email: wieckows@cs.umn.edu)  
Title: Ideas for Intelligent User Interface Design  
Author: James R. Slagle, Zbigniew Wieckowski a.k.a. Bishak (slagle, 
Address: 200 Union St. SE Minneapolis, MN 55455  
Affiliation: Department of Computer Science University of Minnesota  
Abstract: A methodology for development of intelligent user interfaces is presented which allows for programming by correcting behavior, rather than writing programs or scripts. The importance of incremental knowledge accumulation with contributing individuals cooperating over the network is pointed out. The experience of the authors with the prototype of an interface builder and pre-limnary results are outlined. The project aims at utilizing the exibility, that Tcl/Tk offers, to allow for automatic creation of an interface on the basis of previous user interactions with applications. The possible role of the user as a tutor and cooperation of users is described. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> William J. </author> <title> Clancey - Heuristic Classification, </title> <booktitle> Artificial Intelligence 27 (1985). </booktitle>
Reference-contexts: The interaction recorded by the user is an action. An action that does not contain meta-activities is a macro. We search for meta-activities that would allow effective heuristic classification <ref> [1] </ref> of situations encountered.Whenever meta-activity of an invoked action fails, the user is contacted in order to improve the interaction, so that the current case is taken care of. This can be regarded as knowledge acquisition, or case-based reasoning.
Reference: [2] <author> Cypher A. </author> <title> Programming Repetitive Tasks by Example, </title> <booktitle> Proceedings CHI 91. </booktitle>
Reference-contexts: The prototype we have developed shows that it is possible to program by giving an example <ref> [2] </ref>, rather than writing scripts. For this approach to be a feasible way of accomplishing goals, however, there must be a mechanism for supplying additional knowledge, in cases that were not foreseen. Preferably, such a mechanism would be based on correcting the behavior, rather than editing accumulated knowledge.
Reference: [3] <author> Darragh, J.,J., Witten, I.H., and James, </author> <title> M.L. (1990) The Reactive Keyboard: A Predictive typing aid, </title> <booktitle> IEEE Computer 23(11): </booktitle> <pages> 41-49, </pages> <month> November. </month>
Reference-contexts: ExpecTerm is an extension of Expect that allows more exibility by adding terminal emulation, and also by allowing the user to specify rows and columns to be searched. TkEmacs is an emacs widget that is completely integrated with the Tk widget set. The Reactive Keyboard <ref> [3] </ref> is a program that tries to predict the next users command. Red Ryder is a Macintosh communication program with a watchme feature. 1. Unix is a trademark of USL, Inc., which employs Diego Baez - buyer of Bishaks giant schnauzer puppy. 2.
Reference: [4] <institution> Sven Delmas - XF - Design and Implementation of a Programming Environment for Interactive Construction of Graphical User Interfaces </institution>
Reference-contexts: It is also possible to extend ideas of the Reactive Keyboard. Instead of predicting just the next command, the user could be presented with several most likely choices. The user may also prepare interface support for specific applications by writing Tk scripts or using XF <ref> [4] </ref> for interactive design. 5. Conclusions The need for intelligent agents is tremendous. In this paper we have presented an approach that allows the user to record semantic threads of interaction for later reuse.
Reference: [5] <author> Raymond W. </author> <title> Johnson - Autonomous Knowledge Agents, </title> <booktitle> Tcl93 Workshop. </booktitle>
Reference-contexts: Red Ryder is a Macintosh communication program with a watchme feature. 1. Unix is a trademark of USL, Inc., which employs Diego Baez - buyer of Bishaks giant schnauzer puppy. 2. An Overview of the Intelligent User Interface Builder Like <ref> [5] </ref>, we agree that an agent should be autonomous and intelligent. However, we disagree that it can not expect to ask for help from the user when problems arise. Our method makes such a feedback from the user a rule. In fact, no scripting language is even required.
Reference: [6] <author> Don Libes - expect: </author> <title> Curing Those Uncontrollable Fits of Interaction, </title> <booktitle> Proceedings of the Summer 1990 USENIX Conference, </booktitle> <address> Anaheim, California, </address> <month> June, </month> <year> 1990. </year>
Reference-contexts: 1. Inspirations No matter how simple the ideas are, they come into being either as a synthesis, variation, or antithesis (like Unix 1 , and, to some degree, Linux) of previous work. Expect <ref> [6] </ref> makes it possible to write a script for an agent that sits in between the user and an application, allowing automation of tasks with executions that vary, but there is a pattern to the interaction.
Reference: [7] <editor> Don Libes - Kibitz - Connecting Multiple Interactive Programs Together - Software - practice and Experience, </editor> <publisher> John Wiley & Sons, </publisher> <address> New York, Vol.23, No.5, </address> <month> May 93. </month>
Reference-contexts: Expect [6] makes it possible to write a script for an agent that sits in between the user and an application, allowing automation of tasks with executions that vary, but there is a pattern to the interaction. An interesting application, written with the use of Expect, is kibitz <ref> [7] </ref>, which allows two people on different machines to control the same program. Kibitz can also be used in case a cron job needs to contact the user and ask a question.
Reference: [8] <author> John K. </author> <title> Ousterhout - Tcl and the Tk Toolkit. </title>
Reference-contexts: Each such application may require a different user interface to support it. We claim that Tcl/Tk provides a good support for enforcing seman-tic correctness by displaying only relevant part of the interface <ref> [8] </ref>. It is also possible to extend ideas of the Reactive Keyboard. Instead of predicting just the next command, the user could be presented with several most likely choices.

References-found: 8

