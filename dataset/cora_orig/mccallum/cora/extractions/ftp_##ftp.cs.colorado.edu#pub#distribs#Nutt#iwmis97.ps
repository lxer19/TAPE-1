URL: ftp://ftp.cs.colorado.edu/pub/distribs/Nutt/iwmis97.ps
Refering-URL: http://www.cs.colorado.edu/~nutt/Home.html
Root-URL: http://www.cs.colorado.edu
Email: nutt@cs.colorado.edu  
Title: Resource Management for a Virtual Planning Room  
Author: Gary Nutt, Toby Berk Scott Brandt, Marty Humphrey and Sam Siewert 
Note: Permanent address is  
Date: May, 1997  
Address: Boulder, CO 80309-0430  Denver, Denver, CO  
Affiliation: Department of Computer Science, CB 430 University of Colorado  School of Computer Science, Florida International University, Miami, FL Department of Computer Science and Engineering, University of Colorado at  
Abstract: In the last few years we have been prototyping a multiperson virtual environment using low-cost workstations interconnected with relatively high-speed networks. This domain makes use of interactive and on-demand continuous media in addition to a number of other tasks that fall on a spectrum between hard real-time and best-effort response. A brute force implementation of applications in this type of domain demands excessive system resources, even though the actual requirements by different parts of the application vary according to the way the virtual environment is being used at the moment. A more sophisticated approach would be to provide both the user and the applications with the ability to dynamically adjust resource requirements according to their current needs and the availability of system resources. This position paper summarizes the nature of the support required from the operating system, then describes our approaches to resource management based on these requirements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Denis Amselem. </author> <title> A window on shared virtual environments. Presence: </title> <booktitle> Teleoperators and Virtual Environments, </booktitle> <volume> 4(2) </volume> <pages> 130-145, </pages> <year> 1995. </year>
Reference-contexts: The virtual planning room (VPR) [19] is a multiperson virtual environment (VE) supporting free-form communication in a manner similar to electronic meeting rooms [7, 23] and other virtual environments <ref> [1, 3, 5] </ref>. It differs from most other virtual environments in that it is designed to be extended with "domain-specific tools." For example, in [17] we describe how a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination.
Reference: [2] <institution> Special Issue of AT&T Technical Journal on Multimedia, </institution> <note> September/October 1995. Nikil Jayant, Technical Reviewing Editor. 6 </note>
Reference-contexts: This has allowed us to explore the VPR design, implementation, and functionality, even though the performance of the prototypes is severely limited by the hardware resources. Despite the number of papers focusing on VE/VR functionality, design, and user interfaces, (e.g., see <ref> [2, 11, 12] </ref>) there is surprisingly little on the effect the operating system has on the VE's performance.
Reference: [3] <author> David A. Berkley and J. Robert Ensor. </author> <title> Multimedia research platforms. </title> <journal> AT&T Technical Journal, </journal> <volume> 74(5) </volume> <pages> 34-45, </pages> <month> September/October </month> <year> 1995. </year>
Reference-contexts: The virtual planning room (VPR) [19] is a multiperson virtual environment (VE) supporting free-form communication in a manner similar to electronic meeting rooms [7, 23] and other virtual environments <ref> [1, 3, 5] </ref>. It differs from most other virtual environments in that it is designed to be extended with "domain-specific tools." For example, in [17] we describe how a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination.
Reference: [4] <author> Geoff Coulson, Andrew Campbell, Philippe Robin, Gordon Blair, Michae Papathomas, and David Hutchinson. </author> <title> The design of a QoS controlled ATM based communication system. IEEE JSAC Special Issue on ATM Local Area Networks, </title> <year> 1994. </year>
Reference-contexts: Supporting continuous media. Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few OSs attempt to make guarantees regarding the throughput rate through the OS itself <ref> [4, 8, 9, 14, 15, 16] </ref>. We desire VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. VPR applications. <p> the remainder of this paper, we describe some of the approaches we are exploring for providing a dynamically negotiated QoS interface. 3 2 In-Kernel Pipes Continuous media support at the operating system level has focused on ways to provide application code with access and control of kernel-level data, e.g, see <ref> [4, 6, 8] </ref>. While we believe these mechanisms are necessary, they do not appear to be sufficient to ensure management of the deadline-sensitive aspects of continuous media processing; real-time techniques need to replace best-effort techniques in the mechanism. <p> Often, only a small amount of processing needs to be done to the incoming information before it can be written to the outgoing device. One approach is to map the kernel device buffers into the address space of user level threads (e.g., <ref> [4, 8] </ref>) then allow the user threads to filter the data prior to writing it to the source device. With in-kernel pipes, a set of modules is inserted into kernel space to be executed by a corresponding set of kernel threads.
Reference: [5] <author> Lennart E. Fahlen, Charles Grant Brown, Olov Stahl, and Christer Carlsson. </author> <title> A space based model for user interaction in shared synthetic environments. </title> <booktitle> In Proceedings of Interchi '93, </booktitle> <pages> pages 43-48, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The virtual planning room (VPR) [19] is a multiperson virtual environment (VE) supporting free-form communication in a manner similar to electronic meeting rooms [7, 23] and other virtual environments <ref> [1, 3, 5] </ref>. It differs from most other virtual environments in that it is designed to be extended with "domain-specific tools." For example, in [17] we describe how a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination.
Reference: [6] <author> Kevin Fall and Joseph Pasquale. </author> <title> Exploiting in-kernel data paths to improve i/o throughput and cpu availability. </title> <booktitle> In Proceedings of the Winter 1993 USENIX Conference, </booktitle> <pages> pages 327-333, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: the remainder of this paper, we describe some of the approaches we are exploring for providing a dynamically negotiated QoS interface. 3 2 In-Kernel Pipes Continuous media support at the operating system level has focused on ways to provide application code with access and control of kernel-level data, e.g, see <ref> [4, 6, 8] </ref>. While we believe these mechanisms are necessary, they do not appear to be sufficient to ensure management of the deadline-sensitive aspects of continuous media processing; real-time techniques need to replace best-effort techniques in the mechanism. <p> The EPA occasionally gets parameters from user-space applications, then computes a set of directives for how the modules should be processed vis-a-vis their real-time requirements. The RT-PCIP design is most similar to Fall's in-kernel pipe design <ref> [6] </ref>, the extensions being in the real-time management of the pipe stage execution. In continuous media applications, information arrives on one device (usually the network), and must be written to another device under relatively stringent isochronous deadlines.
Reference: [7] <author> Jania Gajewska, Jay Kistler, Mark S. Manasse, and David D. Redell. Argo: </author> <title> A system for distributed collaboration. </title> <booktitle> In Proceedings of the Second ACM International Conference on Multimedia, </booktitle> <pages> pages 433-440, </pages> <year> 1994. </year>
Reference-contexts: 1 The Application Domain To support collaboration among human users, computers need to provide an effective set of domain-specific tools embedded in a free-form communication environment [18]. The virtual planning room (VPR) [19] is a multiperson virtual environment (VE) supporting free-form communication in a manner similar to electronic meeting rooms <ref> [7, 23] </ref> and other virtual environments [1, 3, 5]. It differs from most other virtual environments in that it is designed to be extended with "domain-specific tools." For example, in [17] we describe how a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination.
Reference: [8] <author> Ramesh Govindan and David P. Anderson. </author> <title> Scheduling and IPC mechanisms for continuous media. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 68-80, </pages> <year> 1991. </year>
Reference-contexts: Supporting continuous media. Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few OSs attempt to make guarantees regarding the throughput rate through the OS itself <ref> [4, 8, 9, 14, 15, 16] </ref>. We desire VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. VPR applications. <p> the remainder of this paper, we describe some of the approaches we are exploring for providing a dynamically negotiated QoS interface. 3 2 In-Kernel Pipes Continuous media support at the operating system level has focused on ways to provide application code with access and control of kernel-level data, e.g, see <ref> [4, 6, 8] </ref>. While we believe these mechanisms are necessary, they do not appear to be sufficient to ensure management of the deadline-sensitive aspects of continuous media processing; real-time techniques need to replace best-effort techniques in the mechanism. <p> Often, only a small amount of processing needs to be done to the incoming information before it can be written to the outgoing device. One approach is to map the kernel device buffers into the address space of user level threads (e.g., <ref> [4, 8] </ref>) then allow the user threads to filter the data prior to writing it to the source device. With in-kernel pipes, a set of modules is inserted into kernel space to be executed by a corresponding set of kernel threads.
Reference: [9] <author> Pawan Goyal, Xingan Guo, and Harrick M. Vin. </author> <title> A hierarchical CPU scheduler for multimedia operating systems. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation (OSDI'96), </booktitle> <pages> pages 107-121, </pages> <year> 1996. </year>
Reference-contexts: Supporting continuous media. Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few OSs attempt to make guarantees regarding the throughput rate through the OS itself <ref> [4, 8, 9, 14, 15, 16] </ref>. We desire VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. VPR applications.
Reference: [10] <author> Marty Humphrey, Toby Berk, Scott Brandt, and Gary Nutt. </author> <title> Dynamic quality of service resource management for multimedia applications on general purpose operating systems. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Colorado, </institution> <month> June </month> <year> 1997. </year> <note> submitted for publication. </note>
Reference-contexts: See <ref> [10] </ref> for more information about this aspect of the project. A more comprehensive approach is for the application to provide even more information about its behavior, then to allow resource allocation to take advantage of this information.
Reference: [11] <institution> Special Issue of IEEE Computer on Virtual Environments, </institution> <month> July </month> <year> 1995. </year> <editor> David R. Pratt, Michael Zyda, </editor> <publisher> and Kristen Kelleher. </publisher>
Reference-contexts: This has allowed us to explore the VPR design, implementation, and functionality, even though the performance of the prototypes is severely limited by the hardware resources. Despite the number of papers focusing on VE/VR functionality, design, and user interfaces, (e.g., see <ref> [2, 11, 12] </ref>) there is surprisingly little on the effect the operating system has on the VE's performance.
Reference: [12] <institution> Special Issue of IEEE Computer on Multimedia Systems and Applications, </institution> <month> May </month> <year> 1995. </year> <editor> Arturo A. Rodriguez and Lawrence A. </editor> <title> Rowe, Guest Editors. </title>
Reference-contexts: This has allowed us to explore the VPR design, implementation, and functionality, even though the performance of the prototypes is severely limited by the hardware resources. Despite the number of papers focusing on VE/VR functionality, design, and user interfaces, (e.g., see <ref> [2, 11, 12] </ref>) there is surprisingly little on the effect the operating system has on the VE's performance.
Reference: [13] <author> E. Douglas Jensen, C. Douglass Locke, and Hideyuki Toduda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 112-122. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: We have been influenced by studies in which user-space software provides information beyond priority, WCET, and deadline as part of its resource request. Jensen et al. proposed that an application provide a value function to assist the scheduler to meet soft deadlines <ref> [13] </ref>. Mercer et al. carefully distinguish between admission and scheduling of resources with the reserve function in RT-Mach, essentially making harder guarantees at admission time than at scheduling time [15]. <p> A more comprehensive approach is for the application to provide even more information about its behavior, then to allow resource allocation to take advantage of this information. In this approach, the application provides a benefit curve (similar to the Alpha kernel value curve <ref> [13] </ref>) relating the value of a task's result with the time that the result is delivered. If a result is delivered within a deadline, it has a maximum benefit to the application; as time passes, the value decreases, potentially eventually causing damage.
Reference: [14] <author> M. B. Jones, P. Leach, R. Draves, and J. Barbera III. </author> <title> Support for user-centric modular real-time resource management in the Rialto operating system. </title> <booktitle> In Proceedings of the NOSSDAV'95, </booktitle> <year> 1995. </year> <month> 7 </month>
Reference-contexts: Supporting continuous media. Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few OSs attempt to make guarantees regarding the throughput rate through the OS itself <ref> [4, 8, 9, 14, 15, 16] </ref>. We desire VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. VPR applications. <p> The additional requirement on the "application" is to provide 4 execution time estimates with a range and a confidence; this is only a slightly more complex approach than is used in Rialto <ref> [14] </ref>. In [22] we elaborate on the RT-PCIP and EPA designs, including a more complete explanation of the EPA operation. For this position paper, we provide only the overview. <p> Rialto extends the RT-Mach approach by allowing the programmer to query the OS regarding its ability to meet a deadline for each phase of work <ref> [14] </ref>. Our approach is based on soft deadlines and QoS.
Reference: [15] <author> Cliff Mercer, Stephan Savage, and Hideyuki Tokuda. </author> <title> Processor capacity reserves: Op--erating system support for multimedia applications. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 90-99, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Supporting continuous media. Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few OSs attempt to make guarantees regarding the throughput rate through the OS itself <ref> [4, 8, 9, 14, 15, 16] </ref>. We desire VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. VPR applications. <p> Jensen et al. proposed that an application provide a value function to assist the scheduler to meet soft deadlines [13]. Mercer et al. carefully distinguish between admission and scheduling of resources with the reserve function in RT-Mach, essentially making harder guarantees at admission time than at scheduling time <ref> [15] </ref>. Rialto extends the RT-Mach approach by allowing the programmer to query the OS regarding its ability to meet a deadline for each phase of work [14]. Our approach is based on soft deadlines and QoS.
Reference: [16] <author> Jason Nieh and Monica S. Lam. </author> <title> The design of SMART: A scheduler for multimedia applications. </title> <type> Technical Report CSL-TR-92-697, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Supporting continuous media. Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few OSs attempt to make guarantees regarding the throughput rate through the OS itself <ref> [4, 8, 9, 14, 15, 16] </ref>. We desire VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. VPR applications.
Reference: [17] <author> Gary J. Nutt. </author> <title> Model-based virtual environments for collaboration. </title> <type> Technical Report CU-CS-799-95, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> De-cember </month> <year> 1995. </year>
Reference-contexts: It differs from most other virtual environments in that it is designed to be extended with "domain-specific tools." For example, in <ref> [17] </ref> we describe how a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination.
Reference: [18] <author> Gary J. Nutt. </author> <title> The evolution toward flexible workflow systems. </title> <journal> Distributed Systems Engineering, </journal> <volume> 3 </volume> <pages> 276-294, </pages> <year> 1996. </year>
Reference-contexts: 1 The Application Domain To support collaboration among human users, computers need to provide an effective set of domain-specific tools embedded in a free-form communication environment <ref> [18] </ref>. The virtual planning room (VPR) [19] is a multiperson virtual environment (VE) supporting free-form communication in a manner similar to electronic meeting rooms [7, 23] and other virtual environments [1, 3, 5].
Reference: [19] <author> Gary J. Nutt, Joe Antell, Scott Brandt, Chris Gantz, Adam Griff, and Jim Mankovich. </author> <title> Software support for a virtual planning room. </title> <type> Technical Report CU-CS-800-95, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 The Application Domain To support collaboration among human users, computers need to provide an effective set of domain-specific tools embedded in a free-form communication environment [18]. The virtual planning room (VPR) <ref> [19] </ref> is a multiperson virtual environment (VE) supporting free-form communication in a manner similar to electronic meeting rooms [7, 23] and other virtual environments [1, 3, 5]. <p> For each item, current OSs fail to adequately deliver the support we need. 1 This design implies the existence of a facility for distributed objects, described in <ref> [19] </ref>, but not considered further in this position paper. 2 High-performance graphic rendering of diverse types of artifacts. A client machine is normally expected to render 30 frames/second, independent of the nature of the VRML descriptions and of other load on the machine.
Reference: [20] <author> Shuichi Oikawa and Ragunathan Rajkumar. </author> <title> A resource centric approach to multimedia operating systems. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium Workshop on Resource Allocation Problems in Multimedia Systems. IEEE, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: We desire resource allocation policies based on a dynamically negotiated QoS. Others have also recognized that this kind of shift in the application-OS interface could substantially improve overall system performance for "single-application, multiprogrammed" domains such as the VPR e.g., see <ref> [20] </ref>.
Reference: [21] <author> Sam Siewert. </author> <title> Operating systems support for parametric control of isochronous and sporadic execution streams in multiple time frames, 1996. </title> <type> Ph.D. dissertation proposal. </type>
Reference-contexts: We are also currently building agent-based software to extend the VPR so that a group can navigate and control a blimp with its own onboard computer, navigation equipment, and videocamera ("FLOATERS") <ref> [21] </ref>. 1.1 The Virtual Planning Room A VPR world is defined by a collection of objects, with visual representations and behaviors of varying complexity. Domain-specific tools are added to the VPR by incorporating additional objects having "complex" behavior.
Reference: [22] <author> Sam Siewert, Gary J. Nutt, and Marty Humphrey. </author> <title> Real-time parametrically controlled in-kernel pipelines. </title> <booktitle> In Proceedings of the Third IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year> <note> to appear. </note>
Reference-contexts: We are building a real-time, parametrically-controlled in-kernel pipe (RT-PCIP) mechanism, used in conjunction with an execution-performance agent (EPA) tool, to manage tasks that can naturally be implemented in a pipeline architecture <ref> [22] </ref>. Our RT-PCIP allows pipe modules to be dynamically inserted into a device-device stream, operating under the control of the kernel-level EPA. The EPA occasionally gets parameters from user-space applications, then computes a set of directives for how the modules should be processed vis-a-vis their real-time requirements. <p> The additional requirement on the "application" is to provide 4 execution time estimates with a range and a confidence; this is only a slightly more complex approach than is used in Rialto [14]. In <ref> [22] </ref> we elaborate on the RT-PCIP and EPA designs, including a more complete explanation of the EPA operation. For this position paper, we provide only the overview.
Reference: [23] <author> Harrick M. Vin, Polle T. Zellweger, Daniel C. Swinehart, and P. Venkat Rangan. </author> <title> Multimedia conferencing in the etherphone environment. </title> <journal> IEEE Computer, </journal> <volume> 24(10):237|268, </volume> <month> October </month> <year> 1991. </year> <month> 8 </month>
Reference-contexts: 1 The Application Domain To support collaboration among human users, computers need to provide an effective set of domain-specific tools embedded in a free-form communication environment [18]. The virtual planning room (VPR) [19] is a multiperson virtual environment (VE) supporting free-form communication in a manner similar to electronic meeting rooms <ref> [7, 23] </ref> and other virtual environments [1, 3, 5]. It differs from most other virtual environments in that it is designed to be extended with "domain-specific tools." For example, in [17] we describe how a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination.
References-found: 23

