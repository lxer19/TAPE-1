URL: http://www.cs.helsinki.fi/~linden/extra_files/phdthesis.ps.gz
Refering-URL: http://www.cs.Helsinki.FI:80/research/rati/publications.html
Root-URL: 
Abstract-found: 0
Intro-found: 1
Reference: [ACM84] <editor> ACM. </editor> <booktitle> Proceedings of the ACM SIGPLAN '84 Symposium on Compiler Construction, SIGPLAN Notices 19(6), </booktitle> <address> Montreal, Canada, New York, 1984. </address> <publisher> ACM. </publisher>
Reference: [ACM88] <editor> ACM. </editor> <booktitle> Proceedings of the ACM Conference on Document Processing Systems, </booktitle> <address> Santa Fe, New Mexico, New York, 1988. </address> <publisher> ACM. </publisher>
Reference: [AFQ89a] <author> J. Andr, R. Furuta, and V. Quint. </author> <title> By way of an introduction. Structured documents: What and why? In Andr et al. </title> <booktitle> [AFQ89b], </booktitle> <pages> pages 16. </pages>
Reference-contexts: The document conforming to the html standard can be presented on dierent platforms and with dierent browsers as long as the browsers understand the standard. 1.1 Structured documents and transformations html documents are one example of structured documents [AFQ89b]. The structured document model <ref> [AFQ89a] </ref> decomposes the document into logical parts. Examples of structured documents are manuals, telephone directories, dictionaries, and computer programs. A structured document may in fact be any document where there is more information than just the text itself.
Reference: [AFQ89b] <author> J. Andr, R. Furuta, and V. Quint, </author> <title> editors. Structured documents. The Cambridge Series on Electronic Publishing. </title> <publisher> Cam-bridge University Press, </publisher> <address> Cambridge, </address> <year> 1989. </year>
Reference-contexts: The document conforming to the html standard can be presented on dierent platforms and with dierent browsers as long as the browsers understand the standard. 1.1 Structured documents and transformations html documents are one example of structured documents <ref> [AFQ89b] </ref>. The structured document model [AFQ89a] decomposes the document into logical parts. Examples of structured documents are manuals, telephone directories, dictionaries, and computer programs. A structured document may in fact be any document where there is more information than just the text itself.
Reference: [AHH + 96a] <author> H. Ahonen, B. Heikkinen, O. Heinonen, J. Jaakkola, P. Kilpelinen, G. Lindn, and H. Mannila. </author> <title> Intelligent assembly of structured documents. </title> <type> Report C199640, </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1996. </year>
Reference-contexts: The user may choose to combine several structured documents into one, by transforming them to use the same structure. Such transformations are needed especially in document assembly <ref> [AHH + 96a, AHH + 96b] </ref>, where the user needs to combine document fragments from dierent documents. <p> We have also gained experience in the use of TranSID from a project implementing document assembly <ref> [AHH + 96a, AHH + 96b] </ref>. In document assembly, new documents are constructed from a pool of documents. TranSID is used to locate and streamline document fragments and to form a new sgml document.
Reference: [AHH + 96b] <author> H. Ahonen, B. Heikkinen, O. Heinonen, J. Jaakkola, P. Kilpelinen, G. Lindn, and H. Mannila. </author> <title> Constructing tailored SGML documents. </title> <editor> In J. Saarela, editor, </editor> <booktitle> Proceedings of SGML Finland 1996, </booktitle> <pages> pages 106116, </pages> <address> Helsinki, </address> <year> 1996. </year> <title> SGML Users' Group Finland. </title>
Reference-contexts: The user may choose to combine several structured documents into one, by transforming them to use the same structure. Such transformations are needed especially in document assembly <ref> [AHH + 96a, AHH + 96b] </ref>, where the user needs to combine document fragments from dierent documents. <p> We have also gained experience in the use of TranSID from a project implementing document assembly <ref> [AHH + 96a, AHH + 96b] </ref>. In document assembly, new documents are constructed from a pool of documents. TranSID is used to locate and streamline document fragments and to form a new sgml document.
Reference: [Akp93] <author> E. K. A. Akpotsui. </author> <title> Transformations de types dans les systmes d'dition de documents structurs. </title> <type> PhD thesis, </type> <institution> L'Institut National Polytechnique de Grenoble, France, </institution> <year> 1993. </year>
Reference-contexts: For example, Cole and Brown [CB90, CB92] have studied this problem and recognized several problems like validating the structured document during creation and editing, dealing with incomplete and temporarily incorrect structures, and identifying allowable structure edits. Akpotsui, Quint, and Roisin <ref> [AQ92, AQR93, Akp93] </ref> have developed some solutions to this problem by identifying the kind of transformations needed in structured editing. Note that the source and the target grammars are in this case the same grammar.
Reference: [And86] <author> J. Andr. </author> <title> Manipulation de documents: bibliographie. </title> <type> T.S.I. </type> <institution> Techniques et Sciences Informatiques, 5(4):363365, </institution> <month> July August </month> <year> 1986. </year> <note> 109 110 References </note>
Reference-contexts: In this chapter we take a look at some transformation generators and tree transformation systems that are suitable for building transformations between structured documents. For extensive, if somewhat outdated bibliographies on the manipulation of structured documents, we refer to <ref> [FSS82, And86, vVW86, Fur92] </ref> and [KN94]. We concentrate on systems based on two grammars, a source grammar and target grammar, where the user is actually required to detne both the source and target representations. Multiple view editors are typical applications for transformations of structured documents.
Reference: [And93a] <author> Andersen Consulting. </author> <title> FOUNDATION Application Development, </title> <note> Version 2.0, </note> <year> 1993. </year>
Reference-contexts: The main alchemist application until now is the vital bridge [LTV95b] we built between the vital workbench [DMW93] and a commercial computer-aided software engineering (case) tool foundation by Andersen Consulting <ref> [And93a] </ref>. The vital workbench consists of several knowledge-based software development tools, such as knowledge acquisition and conceptual modelling tools. The case tool has similar components for detning concepts such as entity relationship modelling and data ow dia-grammers. <p> Entity types may also have attributes. A data ow diagram contains data collections and processes and their connections. A 74 6 Experience and evaluation procedure diagram shows in what order the processes and subprocesses of the data ow diagram are executed. It may contain iterative processes and conditional clauses <ref> [And93a] </ref>. an foundation er diagram. In our case bridge we chose to interface the ocml domain diagrams with entity relationship diagrams because of their close resemblance. Both describe concepts and their relations and properties. The concepts are also transformed into a data object table maintained by foundation.
Reference: [And93b] <author> Andersen Consulting. </author> <title> FOUNDATION Design, Analyze Application Requirements, </title> <note> Version 2.0, </note> <year> 1993. </year>
Reference-contexts: The workbench contains tools for knowledge acquisition and modeling as well as system design and visualization. On the other hand, the foundation case tools contains tools for software design such as dierent conceptual modeling tools and tools for detning user interfaces <ref> [And93b] </ref>. An alchemist interface between two development environments 73 There are several reasons for the bridge between the two development environments [Ver94]. Firstly, one of the design principles of the vital workbench was openness.
Reference: [AQ92] <author> E. K. A. Akpotsui and V. Quint. </author> <title> Type transformation in structured editing systems. </title> <editor> In C. Vanoirbeek and G. Coray, editors, </editor> <booktitle> EP92 Proceedings of Electronic Publishing, '92, International Conference on Electronic Publishing, Document Manipulation, </booktitle> <institution> and Typography, Swiss Federal Institute of Technology, Lausanne, </institution> <address> Switzerland, </address> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 2741, </pages> <address> Cambridge, 1992. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: For example, Cole and Brown [CB90, CB92] have studied this problem and recognized several problems like validating the structured document during creation and editing, dealing with incomplete and temporarily incorrect structures, and identifying allowable structure edits. Akpotsui, Quint, and Roisin <ref> [AQ92, AQR93, Akp93] </ref> have developed some solutions to this problem by identifying the kind of transformations needed in structured editing. Note that the source and the target grammars are in this case the same grammar.
Reference: [AQR93] <author> E. K. A. Akpotsui, V. Quint, and C. Roisin. </author> <title> Type modelling for document transformation in structured editing systems. </title> <type> Technical report, </type> <institution> INRIA, France, </institution> <year> 1993. </year>
Reference-contexts: For example, Cole and Brown [CB90, CB92] have studied this problem and recognized several problems like validating the structured document during creation and editing, dealing with incomplete and temporarily incorrect structures, and identifying allowable structure edits. Akpotsui, Quint, and Roisin <ref> [AQ92, AQR93, Akp93] </ref> have developed some solutions to this problem by identifying the kind of transformations needed in structured editing. Note that the source and the target grammars are in this case the same grammar.
Reference: [Arn93] <author> D. S. Arnon. Scrimshaw: </author> <title> A language for document queries and transformations. </title> <editor> In Hser et al. </editor> <booktitle> [HMQ93], </booktitle> <pages> pages 385396. </pages>
Reference-contexts: The system also requires the user to specify how the transformation between the documents of the two grammars are performed. In an extended version, the system has been augmented with attributes to give the logical grammar a air of attribute grammars [Fur87b]. The Scrimshaw language <ref> [Arn93] </ref> lets the user detne simple queries and transformations on a structured document. The rules consist of a matching part and a construction part. <p> * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * <ref> [Arn93] </ref> sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * *
Reference: [Ase87] <author> P. J. Asente. </author> <title> Editing Graphical Objects Using Procedural Representations. </title> <type> PhD thesis, Technical report No. </type> <institution> CSL-TR-87-343, Computer Systems Laboratory, Stanford University, USA, </institution> <year> 1987. </year>
Reference-contexts: The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle <ref> [Ase87] </ref>. Quill [CHL + 88, CHP88a, Cha88, Lun88, Cha90] supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator [RT89].
Reference: [ASU86] <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers. Principles, Techniques and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1986. </year>
Reference-contexts: Context-free grammars [Cho56] are frequently used in document management systems [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96]. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars <ref> [ASU86] </ref>. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars. Parsing is often used as a front-end in a transformation. <p> Those nodes that have no children are called leaves. All other nodes are interior nodes. We may associate a label with each node in the tree. Given a context-free grammar G = (N; ; P; S), we have that a parse tree is a tree, where <ref> [ASU86] </ref>: 1. The root is labeled by the start symbol. 2. Each leaf is labeled by a terminal or by *. 3. <p> If the next input symbol does not match the symbol in the production an error is reported. Recursive descent parsing is considered simple and easy to understand, but it can only be used for context-free grammars of a fairly restricted type <ref> [ASU86] </ref>. Bottom-up parsers can handle a larger class of grammars. One such parsing method is shift-reduce parsing. Shift-reduce parsing constructs the parse tree beginning with the leaves. The process tries to reduce the input string to the start symbol. <p> know how long, you little spaz. 20 2 Preliminaries [Knu65]. lr (k) parsing needs to look ahead only k symbols in the input to be able to perform the parsing process. lr parsers can be constructed to recognize almost all programming language constructs for which context-free grammars can be written <ref> [ASU86] </ref>. It is, however, dicult to construct an lr parser by hand. Fortunately there are several lr parser generators available. Again in both top-down and bottom-up parsing methods we detne special terminals, such as texts, identiters and numbers. The parser treats them as terminals.
Reference: [AU71] <author> A. V. Aho and J. D. Ullman. </author> <title> Translations of context-free grammars. </title> <journal> Information and Control, </journal> <volume> 19:439475, </volume> <year> 1971. </year>
Reference-contexts: If fi contains a nonterminal that is not present 3.3 TT-grammars 31 in ff, this part is added to the document (possibly with empty contents) [KP93]. sdtss have been extended with semantic rules <ref> [AU71, Bak78] </ref>, predicates that select a target production [PB78] or even small programs attached to the rules [Shi84], but these extensions do not support the correctness of the output and we thereby lose the main advantage of using sdtss. 3.3 TT-grammars Using an sdts achieves our main goal for a transformation <p> R T reference Transformation techniques simp sdts * [AU72] sdts * fl * * [AU72] esdts * * * * fl [KP93] pred sdts * * * * * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * <ref> [AU71] </ref> ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * *
Reference: [AU72] <author> A. V. Aho and J. D. Ullman. </author> <title> The theory of parsing, translation and compiling, Volume I: Parsing. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Clis, </address> <year> 1972. </year>
Reference-contexts: is a tnite set of rules of the form A ! ff; fi, where ff 2 (N [ ) fl and fi 2 (N [ ) fl and the nonterminals in fi are a permutation of the nonterminals in ff, and S is a distinguished nonterminal called the start symbol <ref> [AU72] </ref>. In each rule A ! ff; fi we associate occurrences of the same nonterminals in ff and fi. If a nonterminal appears only once in ff and fi, respectively, the association is obvious. Otherwise the nonterminals may be indexed to denote the associations. <p> The translation detned by T , denoted t (T ), is the set of pairs <ref> [AU72] </ref> f (x ; y)j (S ; S ) ) fl T (x ; y); where x 2 fl and y 2 fl g: Informally, we say that y is the translation of x under sdts T or that x is the translation of y. <p> Aho and Ullman give Algorithm 3.1 for performing a syntax-directed translation according to an sdts <ref> [AU72] </ref>. Algorithm 3.1 (Tree transformations via an sdts) Input. <p> The resulting tree is D 0 . 2 Aho and Ullman also prove that if x and y are the frontiers of D and D 0 , respectively, in Algorithm 3.1, then (x; y) is in t (T ) <ref> [AU72] </ref> . Example 3.3 Figure 3.3 shows an example of a syntax-directed translation schema. <p> By requiring that all associated nonterminals for every rule A ! ff; fi in R occur in the same order in ff and fi, we obtain a simple sdts <ref> [AU72] </ref>. With a simple sdts, we cannot change the order of the document parts, we can only remove and insert terminals. Some extensions allow that ff and fi contain dierent nonterminals that are not associated. <p> Static transformation Table 7.1: Properties of some syntax-directed transformation systems and techniques. 7.5 Summary of related systems 101 System Moditcations ID SA Useful A/D R T reference Transformation techniques simp sdts * <ref> [AU72] </ref> sdts * fl * * [AU72] esdts * * * * fl [KP93] pred sdts * * * * * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar <p> Static transformation Table 7.1: Properties of some syntax-directed transformation systems and techniques. 7.5 Summary of related systems 101 System Moditcations ID SA Useful A/D R T reference Transformation techniques simp sdts * <ref> [AU72] </ref> sdts * fl * * [AU72] esdts * * * * fl [KP93] pred sdts * * * * * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84]
Reference: [Bak78] <author> B. S. Baker. </author> <title> Generalized syntax directed translation, tree transducers, and linear space. </title> <journal> SIAM Journal of Computing, </journal> <volume> 7(3):376391, </volume> <year> 1978. </year>
Reference-contexts: If fi contains a nonterminal that is not present 3.3 TT-grammars 31 in ff, this part is added to the document (possibly with empty contents) [KP93]. sdtss have been extended with semantic rules <ref> [AU71, Bak78] </ref>, predicates that select a target production [PB78] or even small programs attached to the rules [Shi84], but these extensions do not support the correctness of the output and we thereby lose the main advantage of using sdtss. 3.3 TT-grammars Using an sdts achieves our main goal for a transformation
Reference: [BBT92] <author> G. E. Blake, T. Bray, and F. W. Tompa. </author> <title> Shortening the OED: Experience with a grammar-detned database. </title> <journal> ACM Transactions on Information Systems, </journal> <note> 10(3):213232, 1992. References 111 </note>
Reference-contexts: Example 1.1 In Figure 1.1 we see an example of a structured document. The document has been marked up with sgml and it also contains the document type detnition (dtd). The dtd is loosely based on the dictionary description presented in <ref> [BBT92] </ref>. The document contents (the dictionary entry for spaz) is based on an entry in the Oxford English Dictionary [Oxf96] but has been slightly modited and shortened. We base many of the following examples on this trst one and shall therefore explain the example in detail.
Reference: [Ber96] <author> Berger-Levrault/AIS. </author> <title> Balise Reference Manual, </title> <type> Release 3, </type> <year> 1996. </year>
Reference-contexts: The Metamorphosis system [MID95] instead, builds the parse tree of the sgml document. The user specites how each node in the parse tree should be modited and is allowed some more extensive references to the tree. Also Balise <ref> [Ber96] </ref> provides tree based transformations as an option. The user may choose between an event-driven or a tree-based approach. He/She must, however, explicitly state when he/she want the transformation to construct an internal parse (sub)tree of the source. <p> * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * <ref> [Ber96] </ref> CoST * * * * * [Har93] MetaMorphosis * * * * * [MID95] OmniMark * * * * * [Exo93] * yes, no, ? unknown, fl restricted/simplited AD Addition/deletion of T Addition/deletion nonterminals of tree levels R Reordering of nonterminals ID Identiter mapping SA semantic actions Table 7.1: Continued.
Reference: [BF61] <author> M. P. Barnett and R. P. Futrelle. </author> <title> Syntactic analysis by digital computer. </title> <journal> Communications of the ACM, </journal> <volume> 5(10):515526, </volume> <year> 1961. </year>
Reference-contexts: This means that there is a great stress on the user to produce the correct output instructions in the specitcations. A syntax-directed translation schema (sdts) <ref> [Iro61, BF61, LS68] </ref>, however, requires both a source grammar and a target grammar, even though the grammars must be very similar for the schema to work. Syntax-directed translation schemas (sdts) have been used in several document transformation systems [KLMN90, KP91, Kui96].
Reference: [BK94] <author> A. Brggemann-Klein. </author> <title> Compiler-construction tools and techniques for SGML parsers: Diculties and solutions. To appear in Electronic Publishing Origination, Dissemination and Design. </title> <note> Available from URL: ftp://ftp.informatik.uni-freiburg.de/documents/ reports/.index.html, </note> <year> 1994. </year>
Reference-contexts: In an extended version, alchemist could perform this conversion by itself. Another solution would be to have alchemist read sgml dtds directly. Direct understanding of dtds would require more substantial moditcations to alchemist, as alchemist is based on lr parsing while dtds are more suitable for top-down parsing <ref> [BK94] </ref>. On the other hand, it would be simple to extend alchemist to read and to write its internal documents as sgml documents, just as is done in the ica transformation generator. The user would receive a handy intermediate representation, easily portable to any sgml system.
Reference: [BR84] <author> F. Bancilhon and P. Richard. </author> <title> Managing texts and facts in a mixed database environment. </title> <editor> In G. Gardarin and E. Ge-lenbe, editors, </editor> <booktitle> New Applications of Data Bases, </booktitle> <pages> pages 87107. </pages> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars.
Reference: [Bro88] <author> K. P. Brooks. </author> <title> A two-view document editor with user-detnable document structure. </title> <type> Technical Report No. 33, </type> <institution> Digital Systems Research Center, USA, </institution> <year> 1988. </year>
Reference-contexts: It provides the user with two views of a document 98 7 Related work on two dierent screens. Other multiple-view editors are the V OR T E X [CCH86, Che88, CH88, CHM88] document preparation system showing both textual and formatted versions of T E X documents [Knu87], and Lilac <ref> [Bro88, Bro91] </ref>. The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87].
Reference: [Bro91] <author> K. P. Brooks. </author> <title> Lilac: A two-view document editor. </title> <journal> IEEE Computer, </journal> <volume> 24(6):719, </volume> <year> 1991. </year>
Reference-contexts: The user may also tlter out certain information, e.g., choosing to print only section titles or bibliographic references. He/She may even choose to add information to the document by allowing updatable views of the document. Many document preparation systems provide multiple views of a document <ref> [QV86, FS88, CH88, KLMN90, Bro91] </ref>. Especially, these systems often show a textual view and a formatted view of a document simultaneously. The paradigm also usually requires inverse transformations. <p> It provides the user with two views of a document 98 7 Related work on two dierent screens. Other multiple-view editors are the V OR T E X [CCH86, Che88, CH88, CHM88] document preparation system showing both textual and formatted versions of T E X documents [Knu87], and Lilac <ref> [Bro88, Bro91] </ref>. The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87].
Reference: [BSM96] <author> T. Bray and C. M. Speerberg-McQueen. </author> <title> Extensible Markup Language (XML). </title> <note> URL: http://www.w3.org/ pub/WWW/TR/ WD-xml-961114.html, 1996. Draft. </note>
Reference-contexts: For example, the possible complexity of sgml dtds makes it very hard to build ecient sgml parsers. Recently, an international expert group has designed a subset of sgml called xml that lacks the drawbacks of full sgml <ref> [BSM96] </ref>. There is hope that xml will become the de facto document markup standard. 24 2 Preliminaries Chapter 3 Transformation of structured documents In the following we attribute the name source to the input side of our transformations.
Reference: [CB90] <author> F. Cole and H. Brown. </author> <title> Editing structured documents with classes. </title> <type> Technical Report No. 73, </type> <institution> Computing Laboratory, University of Kent at Canterbury, UK, </institution> <year> 1990. </year>
Reference-contexts: Editing structured documents require dynamic translations of document parts. When the user moves or copies a document part to another place, the part must be transformed according to the structure of the target position. For example, Cole and Brown <ref> [CB90, CB92] </ref> have studied this problem and recognized several problems like validating the structured document during creation and editing, dealing with incomplete and temporarily incorrect structures, and identifying allowable structure edits.
Reference: [CB92] <author> F. Cole and H. Brown. </author> <title> Editing structured documents problems and solutions. Electronic Publishing Origination, Dissemination and Design, </title> <address> 5(4):209216, </address> <year> 1992. </year>
Reference-contexts: Editing structured documents require dynamic translations of document parts. When the user moves or copies a document part to another place, the part must be transformed according to the structure of the target position. For example, Cole and Brown <ref> [CB90, CB92] </ref> have studied this problem and recognized several problems like validating the structured document during creation and editing, dealing with incomplete and temporarily incorrect structures, and identifying allowable structure edits.
Reference: [CBG + 82] <author> D. D. Chamberlin, O. P. Bertrand, M. J. Goodfellow, J. C. King, D. R. Slutz, S. J. P. Todd, and B. W. Wade. </author> <title> JANUS: An interactive document formatter based on declarative tags. </title> <journal> IBM Systems Journal, </journal> <volume> 21(3):250271, </volume> <year> 1982. </year>
Reference-contexts: This problem arises in syntax-directed editors when the user decides to move a document part to another place within the document. If the structure of the part is not allowed in the new place, the part must be transformed dynamically to tt in. Janus <ref> [CKS + 81, CBG + 82] </ref> was one of the trst two-view text processing system. It provides the user with two views of a document 98 7 Related work on two dierent screens.
Reference: [CCH86] <author> P. Chen, J. Coker, and M. A. Harrison. </author> <title> The V OR T E X document preparation environment. </title> <booktitle> In Dsarmnien [Ds86], </booktitle> <pages> pages 45 55. 112 References </pages>
Reference-contexts: Janus [CKS + 81, CBG + 82] was one of the trst two-view text processing system. It provides the user with two views of a document 98 7 Related work on two dierent screens. Other multiple-view editors are the V OR T E X <ref> [CCH86, Che88, CH88, CHM88] </ref> document preparation system showing both textual and formatted versions of T E X documents [Knu87], and Lilac [Bro88, Bro91]. The Sam system [Tri81] was one of the trst two-view editors for graphical pictures.
Reference: [CH88] <author> P. Chen and M. A. Harrison. </author> <title> Multiple representation document development. </title> <journal> IEEE Computer, </journal> <volume> 21(1):1531, </volume> <year> 1988. </year>
Reference-contexts: The user may also tlter out certain information, e.g., choosing to print only section titles or bibliographic references. He/She may even choose to add information to the document by allowing updatable views of the document. Many document preparation systems provide multiple views of a document <ref> [QV86, FS88, CH88, KLMN90, Bro91] </ref>. Especially, these systems often show a textual view and a formatted view of a document simultaneously. The paradigm also usually requires inverse transformations. <p> Janus [CKS + 81, CBG + 82] was one of the trst two-view text processing system. It provides the user with two views of a document 98 7 Related work on two dierent screens. Other multiple-view editors are the V OR T E X <ref> [CCH86, Che88, CH88, CHM88] </ref> document preparation system showing both textual and formatted versions of T E X documents [Knu87], and Lilac [Bro88, Bro91]. The Sam system [Tri81] was one of the trst two-view editors for graphical pictures.
Reference: [Cha88] <author> D. D. Chamberlin. </author> <title> An adaptation of dataow methods for WYSIWYG document processing. </title> <booktitle> In Proceedings of the ACM Conference on Document Processing Systems, </booktitle> <address> Santa Fe, New Mexico [ACM88], </address> <pages> pages 101109. </pages>
Reference-contexts: The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87]. Quill <ref> [CHL + 88, CHP88a, Cha88, Lun88, Cha90] </ref> supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator [RT89].
Reference: [Cha90] <author> D. D. Chamberlin. </author> <title> Managing properties in a system of cooperating editors. </title> <booktitle> In Furuta [Fur90], </booktitle> <pages> pages 3146. </pages>
Reference-contexts: The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87]. Quill <ref> [CHL + 88, CHP88a, Cha88, Lun88, Cha90] </ref> supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator [RT89].
Reference: [Che88] <author> P. Chen. </author> <title> A Multiple-representation Paradigm for Document Development. </title> <type> PhD thesis, Report No. </type> <institution> UCB/CSD 88/436, Computer Science Division, University of California, Berkeley, USA, </institution> <year> 1988. </year>
Reference-contexts: Janus [CKS + 81, CBG + 82] was one of the trst two-view text processing system. It provides the user with two views of a document 98 7 Related work on two dierent screens. Other multiple-view editors are the V OR T E X <ref> [CCH86, Che88, CH88, CHM88] </ref> document preparation system showing both textual and formatted versions of T E X documents [Knu87], and Lilac [Bro88, Bro91]. The Sam system [Tri81] was one of the trst two-view editors for graphical pictures.
Reference: [CHL + 88] <author> D. D. Chamberlin, H. F. Hasselmeier, A. W. Luniewski, D. P. Paris, B. W. Wade, and M. L. Zolliker. </author> <title> Quill: An extensible system for editing documents of mixed type. </title> <booktitle> In Proceedings of the 21st Hawaii International Conference on System Sciences, Kailu-Kona, USA, </booktitle> <pages> pages 317325, </pages> <address> Los Alamitos, 1988. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87]. Quill <ref> [CHL + 88, CHP88a, Cha88, Lun88, Cha90] </ref> supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator [RT89].
Reference: [CHM88] <author> P. Chen, M. A. Harrison, and I. Minakata. </author> <title> Incremental document formatting. </title> <booktitle> In Proceedings of the ACM Conference on Document Processing Systems, </booktitle> <address> Santa Fe, New Mexico [ACM88], </address> <pages> pages 93100. </pages>
Reference-contexts: Janus [CKS + 81, CBG + 82] was one of the trst two-view text processing system. It provides the user with two views of a document 98 7 Related work on two dierent screens. Other multiple-view editors are the V OR T E X <ref> [CCH86, Che88, CH88, CHM88] </ref> document preparation system showing both textual and formatted versions of T E X documents [Knu87], and Lilac [Bro88, Bro91]. The Sam system [Tri81] was one of the trst two-view editors for graphical pictures.
Reference: [Cho56] <author> N. Chomsky. </author> <title> Three models for the description of language. </title> <journal> IRE Transactions on Information Control, </journal> <volume> 2(3):113124, </volume> <year> 1956. </year>
Reference-contexts: For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars <ref> [Cho56] </ref> are frequently used in document management systems [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96]. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. <p> We shall look at several syntax-directed translation methods that are suitable for document 13 14 2 Preliminaries transformation. 2.1 Context-free grammars With the help of context-free grammars <ref> [Cho56] </ref> we can precisely detne the structure of the strings in a document, or the documents in a class.
Reference: [CHP88a] <author> D. D. Chamberlin, H. F. Hasselmeier, and D. P. Paris. </author> <title> Detn-ing document styles for WYSIWYG processing. </title> <booktitle> In van Vliet [vV88], </booktitle> <pages> pages 121137. </pages>
Reference-contexts: The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87]. Quill <ref> [CHL + 88, CHP88a, Cha88, Lun88, Cha90] </ref> supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator [RT89].
Reference: [CHP88b] <author> J. R. Cordy, C. D. Halpern, and E. Promislow. TXL: </author> <title> A rapid prototyping system for programming language dialects. </title> <booktitle> In Proceedings of the 1988 IEEE International Conference on Computer Languages, </booktitle> <address> Miami Beach, USA, </address> <pages> pages 280285, </pages> <address> Los Alamitos, 1988. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The syntax-directed tree translation technique does not, however, support transformations dependent on the contents. The Turing Extender Language (txl) <ref> [CHP88b, Cor90] </ref> has been designed for providing extensions to existing programming languages. txl transforms programs in a language into dialects of the language where new language features have been inserted or a dierent notation is used. A txl transformation consists of three submodules.
Reference: [CIV86] <author> G. Coray, R. Ingold, and C. Vanoirbeek. </author> <title> Detning document styles for WYSIWYG processing. </title> <editor> In van Vliet [vV86], </editor> <volume> pages 154170. </volume> <pages> References 113 </pages>
Reference-contexts: For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars.
Reference: [CK95] <author> K. Chiba and M. Kyojima. </author> <title> Document transformation based on syntax-directed tree translation. Electronic Publishing Origination, Dissemination and Design, </title> <address> 8(1):1529, </address> <year> 1995. </year>
Reference-contexts: Chiba and Kyojima <ref> [CK95] </ref> use syntax-directed tree translation to perform structured document transformations. They encode trees into strings and then perform syntax-directed translation on the strings. <p> [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * <ref> [CK95] </ref> simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis *
Reference: [CKS + 81] <author> D. D. Chamberlin, J. C. King, D. R. Slutz, S. J. P. Todd, and B. W. Wade. </author> <title> JANUS: An interactive system for document composition. </title> <booktitle> In Proceedings of the ACM SIGPLAN SIGOA Symposium on Text Manipulation, Portland, USA, ACM SIG-PLAN Notices 16(6), </booktitle> <pages> pages 8291, </pages> <address> New York, 1981. </address> <publisher> ACM, ACM. </publisher>
Reference-contexts: This problem arises in syntax-directed editors when the user decides to move a document part to another place within the document. If the structure of the part is not allowed in the new place, the part must be transformed dynamically to tt in. Janus <ref> [CKS + 81, CBG + 82] </ref> was one of the trst two-view text processing system. It provides the user with two views of a document 98 7 Related work on two dierent screens.
Reference: [Cla96] <author> J. Clark. </author> <title> SP, An SGML System Contning to International Standard ISO 8879 Standard Generalized Markup Language, </title> <note> 1996. URL: http//www.jclark.com/sp/. </note>
Reference-contexts: The esis output can more easily be processed by other applications. Example 2.3 Figure 2.4 shows an example of a part of the esis output of the sgml parser nsgmls <ref> [Cla96] </ref> when it parses the document in Figure 1.1. The nsgmls parser states that the document is valid by printing the letter C at the end of the esis output. <p> We use the SP parser <ref> [Cla96] </ref> for parsing the document. The tree transformation is specited in a TranSID program that is parsed by its own parser. An internal rule base is formed of the TranSID program. It may contain rules for transformation and linearization as well as some import declarations. <p> The environment consists of the SP sgml parser <ref> [Cla96] </ref>, a TranSID parser implemented with yacc and lex, and an evaluator and a linearizer both implemented in C. All modules are independent and may call each other recursively. The source code of the current version contains about 15 000 lines of code. The implementation is fairly straight-forward.
Reference: [Cla97] <author> J. Clark. Jade James' DSSSL engine, </author> <year> 1997. </year> <note> URL: http://www.jclark.com/jade/. </note>
Reference-contexts: The standard 2.4 The Standard Generalized Markup Language 23 contains separate languages for specifying document transformations and formatting, and for structured searches in the documents. The trst prototypes based on the standard are beginning to emerge <ref> [Cla97] </ref>. A transformer/formatter based on dsssl may produce any output format. The only requirement is that it reads sgml documents and dsssl specitcations and that it interprets the dsssl specitcations correctly. Unfortunately, sgml is a very complex standard.
Reference: [Cor90] <author> J. R. Cordy. </author> <title> Specitcation and automatic prototype implementation of polymorphic objects in TURING using the TXL processor. </title> <booktitle> In Proceedings of the 1990 IEEE International Conference on Computer Languages, </booktitle> <address> New Orleans, USA, </address> <pages> pages 145154, </pages> <address> Los Alamitos, 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The syntax-directed tree translation technique does not, however, support transformations dependent on the contents. The Turing Extender Language (txl) <ref> [CHP88b, Cor90] </ref> has been designed for providing extensions to existing programming languages. txl transforms programs in a language into dialects of the language where new language features have been inserted or a dierent notation is used. A txl transformation consists of three submodules.
Reference: [Ds86] <author> J. Dsarmnien, </author> <title> editor. T E X for Scientitc Documentation. </title> <booktitle> Number 236 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1986. </year>
Reference: [DJL88] <author> P. Deransart, M. Jourdan, and B. Lorho, </author> <title> editors. Attribute Grammars. Detnitions, Systems and Bibliography. </title> <booktitle> Lecture Notes in Computer Science 323. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: In a decorated tree, all attributes have values that are consistent with their detnition. Attributes can be evaluated top-down or bottom-up, or through several passes <ref> [DJL88, Yel88] </ref>. Assuming that we do allow functions with side eects, we may include output actions or even tree construction operators and thereby obtain an attributed translation, typically used in program compiling. <p> * [AU72] sdts * fl * * [AU72] esdts * * * * fl [KP93] pred sdts * * * * * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * <ref> [DJL88] </ref> tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * *
Reference: [DMW93] <author> J. Domingue, E. Motta, and S. Watt. </author> <title> The emerging VITAL workbench. </title> <editor> In N. Aussenac, G. Boy, B. Gaines, M. Linster, J.-G. Ganascia, and Y. Kodrato, editors, </editor> <title> Knowledge Acquisition for Knowledge-Based Systems, </title> <booktitle> 7th European Knowledge Acquisition Workshop, EKAW '93, </booktitle> <pages> pages 320 339, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Especially, we have received feedback from other project partners, which we have been able to take into account in developing alchemist further. The main alchemist application until now is the vital bridge [LTV95b] we built between the vital workbench <ref> [DMW93] </ref> and a commercial computer-aided software engineering (case) tool foundation by Andersen Consulting [And93a]. The vital workbench consists of several knowledge-based software development tools, such as knowledge acquisition and conceptual modelling tools. The case tool has similar components for detning concepts such as entity relationship modelling and data ow dia-grammers. <p> Thereafter we take a look at TranSID applications and compare the usefulness of TranSID with alchemist. 6.1 An ALCHEMIST interface between two de velopment environments The vital workbench <ref> [DMW93] </ref> contains a set of tools for constructing a knowledge-based software system. The workbench is based on the vital methodology for building such systems [SMR93]. The workbench contains tools for knowledge acquisition and modeling as well as system design and visualization.
Reference: [Dra96] <author> N. Drakos. </author> <title> All about LaTeX2HTML. </title> <address> URL: http://cbl. leeds.ac.uk/nikos/tex2html/doc/latex2html/ latex2html.html, </address> <year> 1996. </year>
Reference-contexts: Many ad hoc transformations have been detned and implemented for some of the problematic transformations mentioned above. For example, the LaTeX2HTML and HTML2LaTeX <ref> [Dra96] </ref> set of transformation programs transform between the L A T E X document preparation system [Lam86] and the html format. Many commercial document preparation systems have similar extensions that allow the user to produce at least some non-proprietary formats such as html and sgml.
Reference: [Exo93] <author> Exoterica Corporation. </author> <title> OmniMark Programmer's Guide, 1993. </title> <type> 114 References </type>
Reference-contexts: Many sgml transformation languages are based on the idea of a parser with a well-specited front-end and an open back-end. In event-based languages such as OmniMark <ref> [Exo93] </ref> and CoST [Har93], the user may specify output actions to be performed for each event the parser encounters in the input stream. In both cases, general sgml parsers are used at the front end, producing a stream of events such as start section element and end list element. <p> Often, the parser does not construct a parse tree, but returns only the esis output [Gol90, Appendix B, Annex G], a list of tokens in the source like the start and end tags, or data elements. Languages that are based on such parsers, like OmniMark <ref> [Exo93] </ref> and CoST [Har93], work as syntax-directed translators. The user may add actions to be taken at any token but he/she may usually not refer (without diculty) to any other part in the source. Especially, it is dicult to make references to yet unparsed document parts. <p> [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis * * * * * [MID95] OmniMark * * * * * <ref> [Exo93] </ref> * yes, no, ? unknown, fl restricted/simplited AD Addition/deletion of T Addition/deletion nonterminals of tree levels R Reordering of nonterminals ID Identiter mapping SA semantic actions Table 7.1: Continued. 102 7 Related work Most systems copy identiter-like tokens from the source side to the target side.
Reference: [FQA88] <author> R. Furuta, V. Quint, and J. Andr. </author> <title> Interactively editing structured documents. Electronic Publishing Origination, Dissemination and Design, </title> <address> 1(1):944, </address> <year> 1988. </year>
Reference-contexts: For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars. <p> The transformation process is thereby augmented with two additional phases, transformation from the source tree to a basic tree, and transformation from the consistent tree to the result tree. The hag is specited manually. The Grif environment <ref> [QV86, QVB86a, QVB86b, FQA88] </ref> is an interactive system for editing structured documents. It is a structure-oriented editor which guides the user in accordance with the structure of the document. The user detnes a structure schema that corresponds to the generic logical structure of a document. <p> The user may insert formatting details into a logical document. The user may add or delete terminals and reorder nonterminals. In an extended version of the system [KP93, Kui96], the user may also add or delete nonterminals as well as rename nonterminals through simple semantic actions. The pedtnt system <ref> [Fur86, Fur87a, FQA88] </ref> is a testbed for the presentation and manipulation of structured documents. The system is based on context-free grammars and allows the user to detne transformations between dierent presentations [FS88]. The documents are described through a generic logical grammar.
Reference: [FS88] <author> R. Furuta and P. D. Stotts. </author> <title> Specifying structured document transformations. </title> <booktitle> In van Vliet [vV88], </booktitle> <pages> pages 109120. </pages>
Reference-contexts: The user may also tlter out certain information, e.g., choosing to print only section titles or bibliographic references. He/She may even choose to add information to the document by allowing updatable views of the document. Many document preparation systems provide multiple views of a document <ref> [QV86, FS88, CH88, KLMN90, Bro91] </ref>. Especially, these systems often show a textual view and a formatted view of a document simultaneously. The paradigm also usually requires inverse transformations. <p> The pedtnt system [Fur86, Fur87a, FQA88] is a testbed for the presentation and manipulation of structured documents. The system is based on context-free grammars and allows the user to detne transformations between dierent presentations <ref> [FS88] </ref>. The documents are described through a generic logical grammar. The transformation method lets the user alter the grammar by detning a set of grammar moditcation rules to alter the productions. <p> * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * <ref> [FS88] </ref> Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * *
Reference: [FSS82] <author> R. Furuta, J. Scoteld, and A. Shaw. </author> <title> Document formatting systems: Survey, concepts, and issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 14(3):417472, </volume> <year> 1982. </year>
Reference-contexts: In this chapter we take a look at some transformation generators and tree transformation systems that are suitable for building transformations between structured documents. For extensive, if somewhat outdated bibliographies on the manipulation of structured documents, we refer to <ref> [FSS82, And86, vVW86, Fur92] </ref> and [KN94]. We concentrate on systems based on two grammars, a source grammar and target grammar, where the user is actually required to detne both the source and target representations. Multiple view editors are typical applications for transformations of structured documents.
Reference: [Fur86] <author> R. Furuta. </author> <title> An integrated, but not exact-representation, </title> <booktitle> editor/formatter. In van Vliet [vV86], </booktitle> <pages> pages 246259. </pages>
Reference-contexts: The user may insert formatting details into a logical document. The user may add or delete terminals and reorder nonterminals. In an extended version of the system [KP93, Kui96], the user may also add or delete nonterminals as well as rename nonterminals through simple semantic actions. The pedtnt system <ref> [Fur86, Fur87a, FQA88] </ref> is a testbed for the presentation and manipulation of structured documents. The system is based on context-free grammars and allows the user to detne transformations between dierent presentations [FS88]. The documents are described through a generic logical grammar.
Reference: [Fur87a] <author> R. Furuta. </author> <title> Complexity in structured documents: User interface issues. </title> <editor> In J. J. H. Miller, editor, </editor> <booktitle> Protext IV Proceedings of the Fourth International Conference on Text Processing Systems, </booktitle> <address> Boston, USA, </address> <pages> pages 722, </pages> <address> Dublin, 1987. </address> <publisher> Boole Press. </publisher>
Reference-contexts: The user may insert formatting details into a logical document. The user may add or delete terminals and reorder nonterminals. In an extended version of the system [KP93, Kui96], the user may also add or delete nonterminals as well as rename nonterminals through simple semantic actions. The pedtnt system <ref> [Fur86, Fur87a, FQA88] </ref> is a testbed for the presentation and manipulation of structured documents. The system is based on context-free grammars and allows the user to detne transformations between dierent presentations [FS88]. The documents are described through a generic logical grammar.
Reference: [Fur87b] <author> R. Furuta. </author> <title> A grammar for representing documents. </title> <type> Technical Report UMIACS-TR-87-67 or CS-TR-1959, </type> <institution> Department of Computer Science, Institute for Advanced Computer Studies, University of Maryland, USA, </institution> <year> 1987. </year>
Reference-contexts: The system also requires the user to specify how the transformation between the documents of the two grammars are performed. In an extended version, the system has been augmented with attributes to give the logical grammar a air of attribute grammars <ref> [Fur87b] </ref>. The Scrimshaw language [Arn93] lets the user detne simple queries and transformations on a structured document. The rules consist of a matching part and a construction part.
Reference: [Fur90] <editor> R. Furuta, editor. </editor> <booktitle> EP90 Proceedings of the International Conference on Electronic Publishing, Document Manipulation & Typography, </booktitle> <address> Gaithersburg, Maryland, </address> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <address> Cambridge, 1990. </address> <publisher> Cambridge University Press. </publisher>
Reference: [Fur92] <author> R. Furuta. </author> <title> Important papers in the history of document preparation systems: basic sources. Electronic Publishing Origination, Dissemination and Design, </title> <address> 5(1):1944, </address> <year> 1992. </year>
Reference-contexts: In this chapter we take a look at some transformation generators and tree transformation systems that are suitable for building transformations between structured documents. For extensive, if somewhat outdated bibliographies on the manipulation of structured documents, we refer to <ref> [FSS82, And86, vVW86, Fur92] </ref> and [KN94]. We concentrate on systems based on two grammars, a source grammar and target grammar, where the user is actually required to detne both the source and target representations. Multiple view editors are typical applications for transformations of structured documents.
Reference: [FW93] <author> A. Feng and T. Wakayama. SIMON: </author> <title> A grammar-based transformation system for structured documents. </title> <editor> In Hser et al. </editor> <booktitle> [HMQ93], </booktitle> <pages> pages 361372. </pages>
Reference-contexts: In short, the transformer generates a parse tree over the base language from the dialect language parse tree. In order to maintain the structural integrity of the parse tree, the replacement subtree is reparsed before being added to the main tree. simon <ref> [FW93] </ref> is a system for restructuring documents that uses an 96 7 Related work intermediate representation in the transformation. simon requires a source grammar, a target grammar and a higher-order attribute grammar (hag). simon uses an extra pair of trees for describing the source and target parse trees in canonical form. <p> * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * <ref> [FW93] </ref> sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis * * * * * [MID95] OmniMark *
Reference: [GG84] <author> H. Ganzinger and R. Giegerich. </author> <title> Attribute coupled grammars. </title> <booktitle> In Proceedings of the ACM SIGPLAN '84 Symposium on Compiler Construction, SIGPLAN Notices 19(6), </booktitle> <address> Montreal, Canada [ACM84], </address> <pages> pages 157170. </pages>
Reference: [Gol90] <author> C. F. Goldfarb. </author> <title> The SGML Handbook. </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1990. </year> <note> References 115 </note>
Reference-contexts: This additional information is called the structure. 1 Computer programs and structured documents follow a well-specited standard of what is correct programming and what is not. Any structured document can be specited with the sgml (Standard Generalized Markup Language) <ref> [ISO86, Gol90] </ref> or the oda (Open Document Architecture) [ISO89] standards ensuring that the documents can be used on dierent platforms and in dierent applications in a standard way. Example 1.1 In Figure 1.1 we see an example of a structured document. <p> In both cases, general sgml parsers are used at the front end, producing a stream of events such as start section element and end list element. This stream of events is called the element information structure set (esis) <ref> [Gol90] </ref>. At each event, the user may specify how to process the current document fragment, but already processed parts or yet unseen parts are not accessible. <p> An sgml parser takes an sgml document as input and parses the instance according to the dtd. In the simple case it only outputs whether the instance is correct. Usually, however, it splits up the instance in an element information structure set (esis, <ref> [Gol90, 22 2 Preliminaries Appendix B, Annex G] </ref>) which is a list of all the components of the instance, e.g., tags, elements, attributes, etc., in the order they appear. The esis output can more easily be processed by other applications. <p> Many of these languages have been designed as back-ends to sgml parsers. An sgml parser parses an sgml document according to the corresponding document type detnition (dtd). Often, the parser does not construct a parse tree, but returns only the esis output <ref> [Gol90, Appendix B, Annex G] </ref>, a list of tokens in the source like the start and end tags, or data elements. Languages that are based on such parsers, like OmniMark [Exo93] and CoST [Har93], work as syntax-directed translators.
Reference: [Gra91] <author> J. O. Graver. </author> <title> T-gen user's guide. </title> <type> Technical Report SERC-TR-50-F, </type> <institution> Software Engineering Research Center, University of Florida, USA, </institution> <year> 1991. </year>
Reference-contexts: * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * <ref> [Gra91] </ref> sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis * * * * * [MID95] OmniMark * * * * * [Exo93] * yes, no, ? unknown, fl restricted/simplited AD Addition/deletion of T Addition/deletion nonterminals
Reference: [Gra92] <author> J. O. Graver. T-gen: </author> <title> a string-to-object translator generator. </title> <journal> Journal of Object-oriented Programming, </journal> <volume> 5(5):3542, </volume> <year> 1992. </year>
Reference-contexts: Note that the source and the target grammars are in this case the same grammar. Dynamic transformations are needed when a document part is transformed to satisfy a dierent subgrammar of the document grammar. There are several other tree transformation systems based on single grammars (see, e.g., <ref> [Gra92, LMW88, LMW91, Hec88] </ref>). However powerful these systems are, they can, of course, not support the correct target syntax. 7.5 Summary of related systems Some of the most important features of structured document transformation systems based on two grammars have been collected in Table 7.1.
Reference: [GT87] <author> G. H. Gonnet and F. W. Tompa. </author> <title> Mind your grammar: A new approach to modelling text. </title> <editor> In P. M. Stocker, W. Kent, and P. Hammersley, editors, </editor> <booktitle> Proceedings of the Thirteenth International Conference on Very Large Databases, Brighton, Eng-land, </booktitle> <pages> pages 339 346, </pages> <address> Los Altos, 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars.
Reference: [Har93] <author> K. Harbo. </author> <title> CoST Version 0.2 Copenhagen SGML Tool. </title> <type> Technical report, </type> <institution> Department of Computer Science & Euromath Center, University of Copenhagen, </institution> <year> 1993. </year>
Reference-contexts: Many sgml transformation languages are based on the idea of a parser with a well-specited front-end and an open back-end. In event-based languages such as OmniMark [Exo93] and CoST <ref> [Har93] </ref>, the user may specify output actions to be performed for each event the parser encounters in the input stream. In both cases, general sgml parsers are used at the front end, producing a stream of events such as start section element and end list element. <p> Above all, there is no restriction on the output the user may produce, and therefore also the transformations do not guarantee that the output representation is correct. Example 1.3 Figure 1.4 shows a small example of an event-based sgml transformation language CoST <ref> [Har93] </ref>. Each sgml element has its own rule, which states the actions to be taken when either a start or end tag, or the contents of an element, is encountered in the input stream. This transformation surrounds the headwords in the dictionary with the strings -"bf and -. <p> Often, the parser does not construct a parse tree, but returns only the esis output [Gol90, Appendix B, Annex G], a list of tokens in the source like the start and end tags, or data elements. Languages that are based on such parsers, like OmniMark [Exo93] and CoST <ref> [Har93] </ref>, work as syntax-directed translators. The user may add actions to be taken at any token but he/she may usually not refer (without diculty) to any other part in the source. Especially, it is dicult to make references to yet unparsed document parts. <p> * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * <ref> [Har93] </ref> MetaMorphosis * * * * * [MID95] OmniMark * * * * * [Exo93] * yes, no, ? unknown, fl restricted/simplited AD Addition/deletion of T Addition/deletion nonterminals of tree levels R Reordering of nonterminals ID Identiter mapping SA semantic actions Table 7.1: Continued. 102 7 Related work Most systems copy
Reference: [Hec88] <author> R. Heckmann. </author> <title> A functional language for the specitcation of complex tree transformations. </title> <editor> In H. Ganzinger, editor, </editor> <booktitle> Proceedings of the 2nd European Symposium on Programming (ESOP '88), Nancy, France, number 300 in Lecture Notes in Computer Science, </booktitle> <pages> pages 175190, </pages> <address> Berlin, 1988. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Note that the source and the target grammars are in this case the same grammar. Dynamic transformations are needed when a document part is transformed to satisfy a dierent subgrammar of the document grammar. There are several other tree transformation systems based on single grammars (see, e.g., <ref> [Gra92, LMW88, LMW91, Hec88] </ref>). However powerful these systems are, they can, of course, not support the correct target syntax. 7.5 Summary of related systems Some of the most important features of structured document transformation systems based on two grammars have been collected in Table 7.1.
Reference: [HMQ93] <editor> C. Hser, W. Mhr, and V. Quint, editors. </editor> <booktitle> EP94 Proceedings of the Fifth International Conference on Electronic Publishing, Document Manipulation & Typography, </booktitle> <address> Darmstadt, Germany, </address> <month> April </month> <year> 1994, </year> <title> Electronic Publishing Origination, Dissemination and Design, </title> <type> 6(4), </type> <address> Chichester, 1993. </address> <publisher> Wiley. </publisher>
Reference: [Iro61] <author> E. T. Irons. </author> <title> A syntax directed compiler for ALGOL 60. </title> <journal> Communications of the ACM, </journal> <volume> 4(1):5155, </volume> <year> 1961. </year>
Reference-contexts: Some syntax-directed techniques require that we also detne a target grammar. This guarantees that the constructed target parse tree and the target document are syntactically correct over the grammar. Examples of these techniques are syntax-directed translation schemas <ref> [Iro61] </ref> and tree transformation grammars [KPPM84]. 3.1 Syntax-directed translation and attribute grammars Syntax-directed translation is based on trst recognizing the structure of the document before performing the transformation. In the general case, it does not mean that we have to build the source parse tree. <p> This means that there is a great stress on the user to produce the correct output instructions in the specitcations. A syntax-directed translation schema (sdts) <ref> [Iro61, BF61, LS68] </ref>, however, requires both a source grammar and a target grammar, even though the grammars must be very similar for the schema to work. Syntax-directed translation schemas (sdts) have been used in several document transformation systems [KLMN90, KP91, Kui96].
Reference: [ISO86] <author> ISO International Standards Organization. </author> <title> Information Processing Text and Oce Systems Standard Generalized Markup Language (SGML), </title> <type> ISO 8879, </type> <year> 1986. </year>
Reference-contexts: This additional information is called the structure. 1 Computer programs and structured documents follow a well-specited standard of what is correct programming and what is not. Any structured document can be specited with the sgml (Standard Generalized Markup Language) <ref> [ISO86, Gol90] </ref> or the oda (Open Document Architecture) [ISO89] standards ensuring that the documents can be used on dierent platforms and in dierent applications in a standard way. Example 1.1 In Figure 1.1 we see an example of a structured document. <p> By using a standard markup, the document becomes more portable and there is a greater possibility to tnd tools for updating and formatting the document [Ml94] . The Standard Generalized Markup Language (sgml, <ref> [ISO86] </ref>) is a meta-language standard for detning markup languages. The markup language detnes a set of markup conventions used together for encoding texts.
Reference: [ISO89] <author> ISO International Standards Organization. </author> <title> Information Processing Text and Oce Systems Oce Document Architecture (ODA) and Interchange Format, </title> <type> ISO 8613, </type> <year> 1989. </year>
Reference-contexts: This additional information is called the structure. 1 Computer programs and structured documents follow a well-specited standard of what is correct programming and what is not. Any structured document can be specited with the sgml (Standard Generalized Markup Language) [ISO86, Gol90] or the oda (Open Document Architecture) <ref> [ISO89] </ref> standards ensuring that the documents can be used on dierent platforms and in dierent applications in a standard way. Example 1.1 In Figure 1.1 we see an example of a structured document. The document has been marked up with sgml and it also contains the document type detnition (dtd).
Reference: [ISO92] <institution> ISO International Standards Organization and IEC International Electrotechnical Commission. Information Technology Hypermedia Time-based Structuring Language (Hy-Time), </institution> <note> ISO/IEC DIS 10744, 1992. 116 References </note>
Reference-contexts: The condition may be an arbitrary orientation expression that references any part of the sgml trees. The locator sublist (n;m) locates a specited subset of the input nodes. The parameters of sublist are interpreted similarly to the dimension specitcations in the HyTime standard <ref> [ISO92] </ref>, which allows nodes to be located relative to either end of the list. Assume that m and n are positive integer values.
Reference: [ISO96] <author> ISO International Standards Organization and IEC International Electrotechnical Commission. </author> <title> Information technology Processing Languages Document Style Semantics and Spec-itcation Language (DSSSL) ISO/IEC DIS 10179, </title> <year> 1996. </year>
Reference-contexts: A tree-based sgml transformer may read the esis for constructing an internal parse tree for further processing. There is now a new standard for specifying the semantics of sgml documents, called the Document Style Semantics and Specitcation Language (dsssl) <ref> [ISO96] </ref>. This standard lets the user make exact specitcations of how certain structured sgml documents should be processed. The standard 2.4 The Standard Generalized Markup Language 23 contains separate languages for specifying document transformations and formatting, and for structured searches in the documents. <p> The TranSID language also includes high level declarative commands that frees the user from low-level programming. We have implemented an interpreter and an evaluator for TranSID, which are fully operational in unix environments [JKL96a, JKL96b]. The Document Style Semantics and Specitcation Language Standard (DSSSL, <ref> [ISO96] </ref>) detnes a related transformation language. DSSSL is, however, quite complex as it covers both tree transformation and document formatting. TranSID is mainly concerned with tree transformation even if some simple formatting is possible. <p> We present the language through examples. We conclude by giving an overview of the implementation. 59 60 5 The SGML transformation language TranSID 5.1 Overall control and data model The transformation process in the TranSID language is similar to the grove transformation process of the DSSSL standard <ref> [ISO96] </ref> and also to the spell process of alchemist. The basic environment consists of an sgml parser, a TranSID parser, a transformer and a linearizer (Figure 5.1).
Reference: [JKL96a] <author> J. Jaakkola, P. Kilpelinen, and G. Lindn. TranSID: </author> <title> A language for transforming SGML documents. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <year> 1996. </year>
Reference-contexts: "-""bf " Headword.Headword Pronunciation "- " PartofSpeech Pronunciation.Pronunciation PartofSpeech.PartofSpeech Headword -&gt; IDENTIFIER Headword.Headword -&gt; IDENTIFIER.IDENTIFIER 2 alchemist is now fully operational in unix environments with both a graphical and a textual interface. 1.4 TranSID an SGML transformer In addition to alchemist, we also present an sgml transformation language called TranSID <ref> [JKL96a, JKL96b, JKL97] </ref>, which is based on tree 10 1 Introduction transformations. TranSID requires a specitcation of the input representation, in the way that the input sgml document must have a dtd, but no output dtd is used. <p> The TranSID language also includes high level declarative commands that frees the user from low-level programming. We have implemented an interpreter and an evaluator for TranSID which are fully operational in Unix environments <ref> [JKL96a, JKL96b] </ref>. Example 1.5 Figure 1.6 shows an example of a TranSID program that performs the same transformation as in Example 1.3. The two trst rules modify the document as in the earlier example. <p> Chapter 5 The SGML transformation language TranSID The TranSID language is a tree-based transformation language <ref> [JKL96a, JKL96b, JKL97] </ref>. The language is targeted at sgml transformations, but the underlying technique is independent of the representation format. The transformation has full access to the entire parse tree of the sgml document. Design goals of the language included declarativeness, simpleness and implementability with reasonable eort. <p> The TranSID language also includes high level declarative commands that frees the user from low-level programming. We have implemented an interpreter and an evaluator for TranSID, which are fully operational in unix environments <ref> [JKL96a, JKL96b] </ref>. The Document Style Semantics and Specitcation Language Standard (DSSSL, [ISO96]) detnes a related transformation language. DSSSL is, however, quite complex as it covers both tree transformation and document formatting. TranSID is mainly concerned with tree transformation even if some simple formatting is possible. <p> * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * <ref> [JKL96a] </ref> Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis * * * * * [MID95] OmniMark * * * * * [Exo93] * yes, no, ? unknown, fl restricted/simplited AD Addition/deletion of T Addition/deletion nonterminals of tree levels R Reordering of nonterminals ID Identiter
Reference: [JKL96b] <author> J. Jaakkola, P. Kilpelinen, and G. Lindn. </author> <title> TranSID reference manual. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <year> 1996. </year>
Reference-contexts: "-""bf " Headword.Headword Pronunciation "- " PartofSpeech Pronunciation.Pronunciation PartofSpeech.PartofSpeech Headword -&gt; IDENTIFIER Headword.Headword -&gt; IDENTIFIER.IDENTIFIER 2 alchemist is now fully operational in unix environments with both a graphical and a textual interface. 1.4 TranSID an SGML transformer In addition to alchemist, we also present an sgml transformation language called TranSID <ref> [JKL96a, JKL96b, JKL97] </ref>, which is based on tree 10 1 Introduction transformations. TranSID requires a specitcation of the input representation, in the way that the input sgml document must have a dtd, but no output dtd is used. <p> TranSID requires a specitcation of the input representation, in the way that the input sgml document must have a dtd, but no output dtd is used. TranSID contains normal tree transformation operations <ref> [JKL96b] </ref> and it has been extended with powerful string operations and regular expressions [MPP + 97]. Design goals of the TranSID language included declarativeness, simpleness and implementability with reasonable eort. Special features include a bottom-up evaluation process and a possibility to restrain the transformation to the event-based strategy. <p> The TranSID language also includes high level declarative commands that frees the user from low-level programming. We have implemented an interpreter and an evaluator for TranSID which are fully operational in Unix environments <ref> [JKL96a, JKL96b] </ref>. Example 1.5 Figure 1.6 shows an example of a TranSID program that performs the same transformation as in Example 1.3. The two trst rules modify the document as in the earlier example. <p> Chapter 5 The SGML transformation language TranSID The TranSID language is a tree-based transformation language <ref> [JKL96a, JKL96b, JKL97] </ref>. The language is targeted at sgml transformations, but the underlying technique is independent of the representation format. The transformation has full access to the entire parse tree of the sgml document. Design goals of the language included declarativeness, simpleness and implementability with reasonable eort. <p> The TranSID language also includes high level declarative commands that frees the user from low-level programming. We have implemented an interpreter and an evaluator for TranSID, which are fully operational in unix environments <ref> [JKL96a, JKL96b] </ref>. The Document Style Semantics and Specitcation Language Standard (DSSSL, [ISO96]) detnes a related transformation language. DSSSL is, however, quite complex as it covers both tree transformation and document formatting. TranSID is mainly concerned with tree transformation even if some simple formatting is possible.
Reference: [JKL97] <author> J. Jaakkola, P. Kilpelinen, and G. Lindn. TranSID: </author> <title> An SGML tree transformation language. </title> <editor> In J. Paakki, editor, </editor> <booktitle> The Fifth Symposium on Programming Languages and Software Tools, Jyvskyl, Finland, </booktitle> <pages> pages 7283, </pages> <year> 1997. </year> <note> Available as Technical report C1997-37, </note> <institution> Department of Computer Science, University of Helsinki, </institution> <note> URL: http://ftp.cs.helsinki.fi/pub/Reports/. </note>
Reference-contexts: "-""bf " Headword.Headword Pronunciation "- " PartofSpeech Pronunciation.Pronunciation PartofSpeech.PartofSpeech Headword -&gt; IDENTIFIER Headword.Headword -&gt; IDENTIFIER.IDENTIFIER 2 alchemist is now fully operational in unix environments with both a graphical and a textual interface. 1.4 TranSID an SGML transformer In addition to alchemist, we also present an sgml transformation language called TranSID <ref> [JKL96a, JKL96b, JKL97] </ref>, which is based on tree 10 1 Introduction transformations. TranSID requires a specitcation of the input representation, in the way that the input sgml document must have a dtd, but no output dtd is used. <p> Chapter 5 The SGML transformation language TranSID The TranSID language is a tree-based transformation language <ref> [JKL96a, JKL96b, JKL97] </ref>. The language is targeted at sgml transformations, but the underlying technique is independent of the representation format. The transformation has full access to the entire parse tree of the sgml document. Design goals of the language included declarativeness, simpleness and implementability with reasonable eort. <p> These detnitions describe the overall semantics of TranSID, i.e., how 5.2 Semi-formal semantics 61 a TranSID program specites a mapping from source trees (or forests) to target trees (or forests). The following description is adapted from <ref> [JKL97] </ref>. During a TranSID execution there is always a current node at the focus of control. Intuitively, the current node is the node that is being transformed.
Reference: [Joh75] <author> S. C. Johnson. </author> <title> Yacc yet another compiler compiler. </title> <type> Technical Report Computer Science Technical Report No. 32, </type> <institution> AT & T Bell Laboratories, </institution> <address> Murray Hill, USA, </address> <year> 1975. </year>
Reference-contexts: A transformation generator lets the user specify a transformation, and the generator then produces program code for the corresponding transformation module. Instead of building a transformation from scratch, the user is able to produce a transformation of some specited representations. Examples of typical parser generators are yacc <ref> [Joh75] </ref> and pccts [PDC92]. These parser generators, also called compiler-compilers, tend to concentrate on the front-end of the transformation process. The user may specify the input representation in great detail, ensuring that no incorrect document is accepted by the transformation module.
Reference: [Kas80] <author> U. Kastens. </author> <title> Ordered attributed grammars. </title> <journal> Acta Informatica, </journal> <volume> 13:229256, </volume> <year> 1980. </year>
Reference-contexts: Somewhat more general is the single input production explicitly qualited (sipeq) tt-grammar [KPPM84]. The sipeq tt-grammar is also restricted to single production source subgrammars, but symbol associations may be established between any source and target symbols. A sipeq tt-grammar corresponds to ordered attribute grammars <ref> [Kas80] </ref>. The implementation of the sipeq tt-grammar also includes a simple case statement for choosing between target subgrammars, a copy instruction for multiplying target subtrees, and pseudoproductions for simplifying symbol associations. ssags has been used, among other things, in implementing an interface between the programming languages Ada and DIANA [PKPM83].
Reference: [Kil92] <author> P. Kilpelinen. </author> <title> Tree Matching Problems with Applications to Structured Text Databases. </title> <type> PhD thesis, Report A19926, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <year> 1992. </year>
Reference-contexts: The transformation is based on input and output tree templates. When an input template is matched in the parse tree, the matched nodes are replaced with the structure described in the output pattern. Tree template matching can be performed rather eciently, especially when the underlying context-free grammar is known <ref> [Kil92, KM95] </ref>. Some syntax-directed techniques require that we also detne a target grammar. This guarantees that the constructed target parse tree and the target document are syntactically correct over the grammar.
Reference: [KLMN90] <author> P. Kilpelinen, G. Lindn, H. Mannila, and E. Nikunen. </author> <title> A structured document database system. </title> <booktitle> In Furuta [Fur90], </booktitle> <pages> pages 139151. </pages>
Reference-contexts: The user may also tlter out certain information, e.g., choosing to print only section titles or bibliographic references. He/She may even choose to add information to the document by allowing updatable views of the document. Many document preparation systems provide multiple views of a document <ref> [QV86, FS88, CH88, KLMN90, Bro91] </ref>. Especially, these systems often show a textual view and a formatted view of a document simultaneously. The paradigm also usually requires inverse transformations. <p> Also several other document preparation 1.3 ALCHEMIST a powerful transformation generator 7 systems use the grammar concept for detning the structure of the documents. Examples include publicly or commercially available systems such as L A T E X [Lam86] and Grif [QV86] and many research prototypes such as hst <ref> [KLMN90] </ref> and Syndoc [KP91]. Applying then a strict front-end to document transformation is not a problem. The input documents follow a certain syntax and can be checked with a parser. All of these systems have a more or less open back-end. <p> 8 1 Introduction element Entry - start puts stdout "" - end - element HWGroup - start puts stdout "" - end - element Headword - start puts stdout "-"bf " nonewline - end puts stdout "-"- - TEXT puts stdout $data nonewline - CoST. ument transformation systems (e.g., hst <ref> [KLMN90] </ref>, ica [MBO93], and Syndoc [KP93, Kui96]), alchemist relies on context-free grammars for representation specitcation. Unlike many systems, however, the representation grammars may be totally unrelated. The actual transformation is specited based on these grammars. alchemist adds some other properties to transformation generation as well. <p> For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars. <p> A syntax-directed translation schema (sdts) [Iro61, BF61, LS68], however, requires both a source grammar and a target grammar, even though the grammars must be very similar for the schema to work. Syntax-directed translation schemas (sdts) have been used in several document transformation systems <ref> [KLMN90, KP91, Kui96] </ref>. <p> We also present some sgml transformation languages and other multiple-view editors. Finally, we give a summary of the dierent transfor 91 92 7 Related work mation systems. 7.1 A multiple-view editor The Helsinki Structured Text Database System (hst) <ref> [KLMN90] </ref> is an environment for reading, writing, and querying structured documents. The system provides multiple views of a document in a graphical interface. The logical document is described through a context-free grammar. The user needs at least one view to be able to read and/or modify a logical document. <p> * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * <ref> [KLMN90] </ref> ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml
Reference: [KM95] <author> P. Kilpelinen and H. Mannila. </author> <title> Ordered and unordered tree inclusion. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24(2):340 356, </volume> <year> 1995. </year>
Reference-contexts: The transformation is based on input and output tree templates. When an input template is matched in the parse tree, the matched nodes are replaced with the structure described in the output pattern. Tree template matching can be performed rather eciently, especially when the underlying context-free grammar is known <ref> [Kil92, KM95] </ref>. Some syntax-directed techniques require that we also detne a target grammar. This guarantees that the constructed target parse tree and the target document are syntactically correct over the grammar.
Reference: [KN94] <author> E. Kuikka and E. Nikunen. </author> <title> Rakenteisten tekstien ksittelyjrjestelmist (Processing systems for structured texts, in Finnish). </title> <type> Report A/1994/4, </type> <institution> Department of Computer Science and Applied Mathematics, University of Kuopio, Finland, </institution> <year> 1994. </year> <title> A summary and the References 117 system descriptions are available in English at URL http://www.cs.uku.fi/~kuikka/systems.html. </title>
Reference-contexts: In this chapter we take a look at some transformation generators and tree transformation systems that are suitable for building transformations between structured documents. For extensive, if somewhat outdated bibliographies on the manipulation of structured documents, we refer to [FSS82, And86, vVW86, Fur92] and <ref> [KN94] </ref>. We concentrate on systems based on two grammars, a source grammar and target grammar, where the user is actually required to detne both the source and target representations. Multiple view editors are typical applications for transformations of structured documents.
Reference: [Knu65] <author> D. E. Knuth. </author> <title> On the translation of languages from left to right. </title> <journal> Information and Control, </journal> <volume> 8(6):607639, </volume> <year> 1965. </year>
Reference-contexts: The term that American teen-agers now as opposite of `tough' is `spaz'. 1975 Amis Dead babies viii. 47 know how long, you little spaz. 20 2 Preliminaries <ref> [Knu65] </ref>. lr (k) parsing needs to look ahead only k symbols in the input to be able to perform the parsing process. lr parsers can be constructed to recognize almost all programming language constructs for which context-free grammars can be written [ASU86].
Reference: [Knu68] <author> D. E. Knuth. </author> <title> Semantics of context-free languages. </title> <journal> Mathematical Systems Theory, </journal> <volume> 2(2):127145, </volume> <year> 1968. </year> <title> Correction in Mathematical Systems Theory, </title> <address> 5(1):9596, </address> <month> March </month> <year> 1971. </year>
Reference-contexts: The user specites the source document with a context-free grammar and the output at each recognized substructure of the document. When the source document is parsed, the target document is written at the same time. With the help of attribute grammars <ref> [Knu68] </ref> we can perform syntax-directed translation of this kind. A more general transformation technique is based on subtree matching and replacement. This technique is similar to the string-based one, but before performing the transformation we need to parse the input to obtain a parse tree which can be modited. <p> Both event-driven transformations and tree-based transformations use sgml parsers. In a tree-based transformation an internal structure is built based upon the output of the parser. In some cases also event-based sgml transformations may benett from temporary constructs comparable to attribute grammars. An attribute grammar (ag) <ref> [Knu68, LRS74] </ref> is a context-free grammar where each production has associated with it a set of semantic rules of the form b := f (c 1 ; : : : ; c n ), where b and c i are variables or attributes and f is an n-ary function.
Reference: [Knu87] <author> D. E. Knuth. </author> <title> The T E Xbook. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1987. </year>
Reference-contexts: It provides the user with two views of a document 98 7 Related work on two dierent screens. Other multiple-view editors are the V OR T E X [CCH86, Che88, CH88, CHM88] document preparation system showing both textual and formatted versions of T E X documents <ref> [Knu87] </ref>, and Lilac [Bro88, Bro91]. The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87].
Reference: [KP91] <author> E. Kuikka and M. Penttonen. </author> <title> Designing a syntax-directed text processing system. </title> <editor> In K. Koskimies and K.-J. Rih, editors, </editor> <booktitle> Proceedings of the Second Symposium on Programming Languages and Software Tools, </booktitle> <institution> Pirkkala, Finland, </institution> <type> Technical Report A19915, </type> <institution> pages 191204, Finland, 1991. University of Tampere. </institution>
Reference-contexts: Examples include publicly or commercially available systems such as L A T E X [Lam86] and Grif [QV86] and many research prototypes such as hst [KLMN90] and Syndoc <ref> [KP91] </ref>. Applying then a strict front-end to document transformation is not a problem. The input documents follow a certain syntax and can be checked with a parser. All of these systems have a more or less open back-end. <p> A syntax-directed translation schema (sdts) [Iro61, BF61, LS68], however, requires both a source grammar and a target grammar, even though the grammars must be very similar for the schema to work. Syntax-directed translation schemas (sdts) have been used in several document transformation systems <ref> [KLMN90, KP91, Kui96] </ref>. <p> The transformation can both remove certain parts from a document and reorder elements in the document. A moditcation in a view propagates to other views. Grif recognizes the constraints between the modited part and other views, and updates can be done incrementally [QV87]. The Syndoc system <ref> [KP91] </ref> is based on sdtss. The user may insert formatting details into a logical document. The user may add or delete terminals and reorder nonterminals.
Reference: [KP93] <author> E. Kuikka and M. Penttonen. </author> <title> Transformation of structured documents with the use of grammar. </title> <editor> In Hser et al. </editor> <booktitle> [HMQ93], </booktitle> <pages> pages 373383. </pages>
Reference-contexts: - start puts stdout "" - end - element HWGroup - start puts stdout "" - end - element Headword - start puts stdout "-"bf " nonewline - end puts stdout "-"- - TEXT puts stdout $data nonewline - CoST. ument transformation systems (e.g., hst [KLMN90], ica [MBO93], and Syndoc <ref> [KP93, Kui96] </ref>), alchemist relies on context-free grammars for representation specitcation. Unlike many systems, however, the representation grammars may be totally unrelated. The actual transformation is specited based on these grammars. alchemist adds some other properties to transformation generation as well. <p> For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars. <p> If ff contains a nonterminal that is not present in fi, the corresponding document part is removed. If fi contains a nonterminal that is not present 3.3 TT-grammars 31 in ff, this part is added to the document (possibly with empty contents) <ref> [KP93] </ref>. sdtss have been extended with semantic rules [AU71, Bak78], predicates that select a target production [PB78] or even small programs attached to the rules [Shi84], but these extensions do not support the correctness of the output and we thereby lose the main advantage of using sdtss. 3.3 TT-grammars Using an <p> The Syndoc system [KP91] is based on sdtss. The user may insert formatting details into a logical document. The user may add or delete terminals and reorder nonterminals. In an extended version of the system <ref> [KP93, Kui96] </ref>, the user may also add or delete nonterminals as well as rename nonterminals through simple semantic actions. The pedtnt system [Fur86, Fur87a, FQA88] is a testbed for the presentation and manipulation of structured documents. <p> Static transformation Table 7.1: Properties of some syntax-directed transformation systems and techniques. 7.5 Summary of related systems 101 System Moditcations ID SA Useful A/D R T reference Transformation techniques simp sdts * [AU72] sdts * fl * * [AU72] esdts * * * * fl <ref> [KP93] </ref> pred sdts * * * * * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * <p> * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl <ref> [KP93] </ref> t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis * * * * * [MID95] OmniMark * * * * * [Exo93] * yes, no, ? unknown, fl restricted/simplited
Reference: [KP95] <author> E. Kuikka and M. Penttonen. </author> <title> Transformation of structured documents. Electronic Publishing Origination, Dissemination and Design, </title> <type> 8(4), </type> <year> 1995. </year> <note> To be published; the number 4 issue of volume 8 has not yet been published in June 1997. </note>
Reference-contexts: Here, we do not, however, try to categorize the systems; many of them could well be both document preparation systems and document 7.3 Other two-grammar systems 95 transformation systems. For another description of document transformation systems based on two grammars, see <ref> [KP95, Kui96] </ref>. The Syntax and Semantics Analysis and Generation System (ssags) [PKP + 82, Pay88] is based on tt-grammars just as alchemist. ssags implements two subsets of tt-grammars.
Reference: [KPPM84] <author> S. E. Keller, J. A. Perkins, T. F. Payton, and S. P. Mardinly. </author> <title> Tree transformation techniques and experiences. </title> <booktitle> In Proceedings of the ACM SIGPLAN '84 Symposium on Compiler Construction, SIGPLAN Notices 19(6), </booktitle> <address> Montreal, Canada [ACM84], pages 190201. </address>
Reference-contexts: Some syntax-directed techniques require that we also detne a target grammar. This guarantees that the constructed target parse tree and the target document are syntactically correct over the grammar. Examples of these techniques are syntax-directed translation schemas [Iro61] and tree transformation grammars <ref> [KPPM84] </ref>. 3.1 Syntax-directed translation and attribute grammars Syntax-directed translation is based on trst recognizing the structure of the document before performing the transformation. In the general case, it does not mean that we have to build the source parse tree. <p> Attribute grammars are often used as an underlying strategy when implementing higher level transformation techniques such as tree transformation grammars <ref> [KPPM84] </ref>. ags are somewhat tedious for using in ad hoc transformations, because it is again up to the user to control that the produced output follows the intended target grammar. Example 3.2 Figure 3.2 shows an example of a syntax-directed translation with attributes. The specitcation is written in yacc. <p> This is especially useful when the target document itself becomes a source document of another transformation. To solve these problems, we extend the sdtss and introduce tree transformation grammars or tt-grammars <ref> [KPPM84] </ref>. A tt-grammar is like an sdts without the implicit associations between nonterminals in the rules. On the contrary, the user must explicitly detne these associations. This means also that he/she can associate nonterminals with dierent names. <p> One such example is the ssags transformation generator <ref> [KPPM84] </ref>, but it only implements a subset of the tt-grammar technique. In this chapter we present a transformation generator called alchemist [TL94a, LTV96] which is based on the tt-grammar technique. alchemist also provides a graphical interface for specifying transformations. <p> These associations might be used perhaps as a short cut in linking the target subtrees together at the end of the mapping but it is unclear to the author how they are used in <ref> [KPPM84] </ref>. These minor restrictions to the tt-grammar technique in the implementation of alchemist do not much decrease the power of the transformation generator. In addition, several extensions have been made to the tt-grammars in alchemist. Firstly, identiter copying from the source to the target has been added. <p> For another description of document transformation systems based on two grammars, see [KP95, Kui96]. The Syntax and Semantics Analysis and Generation System (ssags) [PKP + 82, Pay88] is based on tt-grammars just as alchemist. ssags implements two subsets of tt-grammars. A dual grammar translation scheme (dgts) <ref> [KPPM84] </ref> restricts source subgrammars to single productions, where left hand side symbols may be associated only with left hand side symbols in the target subgrammar within the same production group association. A dgts corresponds to a syntax-directed translation scheme. <p> A dgts corresponds to a syntax-directed translation scheme. Somewhat more general is the single input production explicitly qualited (sipeq) tt-grammar <ref> [KPPM84] </ref>. The sipeq tt-grammar is also restricted to single production source subgrammars, but symbol associations may be established between any source and target symbols. A sipeq tt-grammar corresponds to ordered attribute grammars [Kas80]. <p> [AU72] esdts * * * * fl [KP93] pred sdts * * * * * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * <ref> [KPPM84] </ref> General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] <p> * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * <ref> [KPPM84] </ref> General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * <p> * *? <ref> [KPPM84] </ref> Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis * * * * * [MID95] OmniMark * * * * * [Exo93]
Reference: [Kui96] <author> E. Kuikka. </author> <title> Processing of Structured Documents Using a Syntax-Directed Approach. </title> <type> PhD thesis, </type> <institution> Publications C, Department of Computer Science and Applied Mathematics, University of Kuopio, </institution> <year> 1996. </year>
Reference-contexts: - start puts stdout "" - end - element HWGroup - start puts stdout "" - end - element Headword - start puts stdout "-"bf " nonewline - end puts stdout "-"- - TEXT puts stdout $data nonewline - CoST. ument transformation systems (e.g., hst [KLMN90], ica [MBO93], and Syndoc <ref> [KP93, Kui96] </ref>), alchemist relies on context-free grammars for representation specitcation. Unlike many systems, however, the representation grammars may be totally unrelated. The actual transformation is specited based on these grammars. alchemist adds some other properties to transformation generation as well. <p> For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars. <p> A syntax-directed translation schema (sdts) [Iro61, BF61, LS68], however, requires both a source grammar and a target grammar, even though the grammars must be very similar for the schema to work. Syntax-directed translation schemas (sdts) have been used in several document transformation systems <ref> [KLMN90, KP91, Kui96] </ref>. <p> Here, we do not, however, try to categorize the systems; many of them could well be both document preparation systems and document 7.3 Other two-grammar systems 95 transformation systems. For another description of document transformation systems based on two grammars, see <ref> [KP95, Kui96] </ref>. The Syntax and Semantics Analysis and Generation System (ssags) [PKP + 82, Pay88] is based on tt-grammars just as alchemist. ssags implements two subsets of tt-grammars. <p> The Syndoc system [KP91] is based on sdtss. The user may insert formatting details into a logical document. The user may add or delete terminals and reorder nonterminals. In an extended version of the system <ref> [KP93, Kui96] </ref>, the user may also add or delete nonterminals as well as rename nonterminals through simple semantic actions. The pedtnt system [Fur86, Fur87a, FQA88] is a testbed for the presentation and manipulation of structured documents.
Reference: [Lam86] <author> L. Lamport. </author> <title> A Document Preparation system. L A T E X User's Guide & Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1986. </year>
Reference-contexts: Example 1.2 In Figures 1.2 and 1.3, we see two views of the document in Example 1.1. Figure 1.2 shows a view of the document where the sgml tags have been removed and L A T E X <ref> [Lam86] </ref> formatting commands have been inserted in the text. Figure 1.3 shows a formatted view produced by L A T E X. spaz (spz) n. [Abbreviation of spastic n.] = spastic 1965 P. <p> Many ad hoc transformations have been detned and implemented for some of the problematic transformations mentioned above. For example, the LaTeX2HTML and HTML2LaTeX [Dra96] set of transformation programs transform between the L A T E X document preparation system <ref> [Lam86] </ref> and the html format. Many commercial document preparation systems have similar extensions that allow the user to produce at least some non-proprietary formats such as html and sgml. <p> Also several other document preparation 1.3 ALCHEMIST a powerful transformation generator 7 systems use the grammar concept for detning the structure of the documents. Examples include publicly or commercially available systems such as L A T E X <ref> [Lam86] </ref> and Grif [QV86] and many research prototypes such as hst [KLMN90] and Syndoc [KP91]. Applying then a strict front-end to document transformation is not a problem. The input documents follow a certain syntax and can be checked with a parser.
Reference: [Lin92] <author> M. Linster. Sisyphus'91, </author> <title> Part 2: Comparison of dierent knowledge engineering approaches each based upon models of 118 References problem-solving. </title> <editor> In M. Linster, editor, </editor> <booktitle> Sisyphus '92: Models of Problem Solving, Arbeitspapiere der GMD 663, </booktitle> <pages> pages 1 5. </pages> <institution> Gesellschaft fr Mathematik und Datenverarbeitung MBH, </institution> <year> 1992. </year>
Reference-contexts: In Figures 6.1 and 6.2 (from [LTV96]), we see examples of the graphical representations of the transformations performed by the spells dom2erd, task2dfd, and task2pd. The ocml digrams describe a simple room allocation problem called Sisyphus <ref> [Lin92] </ref> where a set of laboratory workers should be assigned rooms in an oce building. There are, however, several restrictions that say, e.g., that secretaries should be placed near the manager, and that a manager should get the biggest oce.
Reference: [Lin93] <author> G. Lindn. </author> <title> Incemental updates in structured documents. Phil. Lic. </title> <type> Thesis, Report C-1993-19, </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1993. </year>
Reference-contexts: Other opened views are updated from the logical document through their view detnitions and the frontier of the new view trees are shown as the updated views. This process has also been incrementalized in hst. In such a process only modited parts of a view are parsed and translated <ref> [Lin93] </ref>. modited view parse A A view tree 1 invert view A A logical document compute view A A view tree 2 -unparse updated view ment and other open views in the hst system. 7.2 A structured document transformation generator 93 hst is a typical example of a multiple-view editor, where <p> In order to fully take advantage of incremental-ity, all transformation phases in a spell process should be incrementalized. An incremental solution includes not only incremental parsing, translation, and unparsing, but also incremental pre- and postprocessing <ref> [Lin93] </ref>. The sgml interface of alchemist is currently rather limited. The user has to convert manually sgml dtds into alchemist source grammars to be able to perform sgml transformations. In an extended version, alchemist could perform this conversion by itself.
Reference: [LMQ + 95] <author> G. Lindn, L. Montero, J. M. Quesada, H. Tirri, and A. I. Verkamo. </author> <title> OCML to FND CASE integration transformations, Technical description. </title> <booktitle> Deliverable T444/DS/1, ESPRIT-II Project 5365 VITAL, </booktitle> <year> 1995. </year>
Reference-contexts: The user could trst start by specifying and building knowledge-based parts of the system and then completely change environment and tnish the system in the foundation environment [VL94]. The spells included in the vital bridge between the workbench and the foundation case tool are <ref> [LMQ + 95, LQV95] </ref> An alchemist interface between two development environments 75 * dom2erd, a spell for transforming ocml domain diagrams into foundation Design entity-relationship diagrams, * dom2objs, a spell for transforming ocml domain diagrams into foundation tables of data objects, * task2dfd, a spell for transforming ocml task diagrams into
Reference: [LMW88] <author> P. Lipps, U. Mncke, and R. Wilhelm. </author> <title> OPTRAN a language/system for the specitcation of program transformations: System overview and experiences. </title> <editor> In D. Hammer, editor, </editor> <booktitle> Proceedings of the 2nd Workshop on Compiler Compilers and High Speed Compilation (CCHSC), </booktitle> <address> Berlin, Germany, </address> <booktitle> number 371 in Lecture Notes in Computer Science (LNCS), </booktitle> <pages> pages 5265, </pages> <address> Berlin, 1988. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Note that the source and the target grammars are in this case the same grammar. Dynamic transformations are needed when a document part is transformed to satisfy a dierent subgrammar of the document grammar. There are several other tree transformation systems based on single grammars (see, e.g., <ref> [Gra92, LMW88, LMW91, Hec88] </ref>). However powerful these systems are, they can, of course, not support the correct target syntax. 7.5 Summary of related systems Some of the most important features of structured document transformation systems based on two grammars have been collected in Table 7.1.
Reference: [LMW91] <author> P. Lipps, U. Mncke, and R. Wilhelm. </author> <title> An overview of the OP-TRAN system. </title> <editor> In H. Alblas and B. Melichar, editors, </editor> <booktitle> Proceedings of the International Summer School on Attribute Grammars, Applications and System (SAGA), Prague, Czechoslo-vakia, number 545 in Lecture Notes in Computer Science, </booktitle> <pages> pages 505506, </pages> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Note that the source and the target grammars are in this case the same grammar. Dynamic transformations are needed when a document part is transformed to satisfy a dierent subgrammar of the document grammar. There are several other tree transformation systems based on single grammars (see, e.g., <ref> [Gra92, LMW88, LMW91, Hec88] </ref>). However powerful these systems are, they can, of course, not support the correct target syntax. 7.5 Summary of related systems Some of the most important features of structured document transformation systems based on two grammars have been collected in Table 7.1.
Reference: [LQV95] <author> G. Lindn, J. M. Quesada, and A. I. Verkamo. </author> <title> OCML to FND CASE integration transformations, User's guide. </title> <booktitle> Deliverable T444/DS/2, ESPRIT-II Project 5365 VITAL, </booktitle> <year> 1995. </year>
Reference-contexts: The user could trst start by specifying and building knowledge-based parts of the system and then completely change environment and tnish the system in the foundation environment [VL94]. The spells included in the vital bridge between the workbench and the foundation case tool are <ref> [LMQ + 95, LQV95] </ref> An alchemist interface between two development environments 75 * dom2erd, a spell for transforming ocml domain diagrams into foundation Design entity-relationship diagrams, * dom2objs, a spell for transforming ocml domain diagrams into foundation tables of data objects, * task2dfd, a spell for transforming ocml task diagrams into <p> Only through a very concentrated detailed work were we able to describe the representations exactly. The descriptions of the four spells of the vital bridge take about 180 pages <ref> [LQV95] </ref>! On the other hand, when the representations had been elucidated, building 82 6 Experience and evaluation the transformations with alchemist was a more straightforward thing. Instead of months we were soon down to weeks and days for implementing a particular spell.
Reference: [LRS74] <author> P. M. Lewis, D. J. Rosenkrantz, and R. E. Stearns. </author> <title> Attributed translations. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 9(3):279307, </volume> <year> 1974. </year>
Reference-contexts: Both event-driven transformations and tree-based transformations use sgml parsers. In a tree-based transformation an internal structure is built based upon the output of the parser. In some cases also event-based sgml transformations may benett from temporary constructs comparable to attribute grammars. An attribute grammar (ag) <ref> [Knu68, LRS74] </ref> is a context-free grammar where each production has associated with it a set of semantic rules of the form b := f (c 1 ; : : : ; c n ), where b and c i are variables or attributes and f is an n-ary function.
Reference: [LS68] <author> P. M. Lewis and R. E. Stearns. </author> <title> Syntax-directed transduction. </title> <journal> Journal of the ACM, </journal> <volume> 15(3):465488, </volume> <year> 1968. </year>
Reference-contexts: This means that there is a great stress on the user to produce the correct output instructions in the specitcations. A syntax-directed translation schema (sdts) <ref> [Iro61, BF61, LS68] </ref>, however, requires both a source grammar and a target grammar, even though the grammars must be very similar for the schema to work. Syntax-directed translation schemas (sdts) have been used in several document transformation systems [KLMN90, KP91, Kui96].
Reference: [LT95] <author> G. Lindn and H. Tirri. </author> <note> ALCHEMIST The handbook. Version 1.08. Deliverable T416/DS/2, ESPRIT-II Project 5365 VITAL, 1995. References 119 </note>
Reference-contexts: The alchemist environment is shown in Figure 4.3. 4.3 ALCHEMIST use As mentioned earlier, alchemist divides the transformation or spell construction into several phases. In this section we take a closer look at these phases together with examples and see how alchemist implements the tt-grammar technique (see also <ref> [LT95, LTV95a] </ref>).
Reference: [LTV95a] <author> G. Lindn, H. Tirri, and A. I. Verkamo. ALCHEMIST: </author> <title> A general purpose transformation generator. </title> <type> Technical Report C199543, </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1995. </year>
Reference-contexts: The alchemist environment is shown in Figure 4.3. 4.3 ALCHEMIST use As mentioned earlier, alchemist divides the transformation or spell construction into several phases. In this section we take a closer look at these phases together with examples and see how alchemist implements the tt-grammar technique (see also <ref> [LT95, LTV95a] </ref>).
Reference: [LTV95b] <author> G. Lindn, H. Tirri, and A. I. Verkamo. </author> <title> The VITAL transformation assistant. </title> <editor> In A. Rouge, editor, </editor> <title> VITAL Project Final Report, </title> <booktitle> Chapter 4. Deliverable SYSECA/DD71.5, ESPRIT Project 5365 VITAL, </booktitle> <year> 1995. </year>
Reference-contexts: We have had numerous possibilities of testing and evaluating alchemist in this project. Especially, we have received feedback from other project partners, which we have been able to take into account in developing alchemist further. The main alchemist application until now is the vital bridge <ref> [LTV95b] </ref> we built between the vital workbench [DMW93] and a commercial computer-aided software engineering (case) tool foundation by Andersen Consulting [And93a]. The vital workbench consists of several knowledge-based software development tools, such as knowledge acquisition and conceptual modelling tools.
Reference: [LTV96] <author> G. Lindn, H. Tirri, and A. I. Verkamo. ALCHEMIST: </author> <title> A general purpose transformation generator. </title> <journal> Software Practice and Experience, </journal> <volume> 26(6):653675, </volume> <year> 1996. </year>
Reference-contexts: In CoST, the instruction puts automatically prints a newline character where it is not explicitly prohibited by the nonewline instruction. 2 1.3 ALCHEMIST a powerful transformation generator In this thesis we present a simple and powerful tool alchemist <ref> [TL94a, LTV96] </ref> for specifying and generating transformations of structured documents. alchemist requires the user to specify both the input and output document representations. The tool then generates transformation modules that accept only correct input documents and produce only correct output documents according to the specitcations. <p> One such example is the ssags transformation generator [KPPM84], but it only implements a subset of the tt-grammar technique. In this chapter we present a transformation generator called alchemist <ref> [TL94a, LTV96] </ref> which is based on the tt-grammar technique. alchemist also provides a graphical interface for specifying transformations. <p> In Figures 6.1 and 6.2 (from <ref> [LTV96] </ref>), we see examples of the graphical representations of the transformations performed by the spells dom2erd, task2dfd, and task2pd. The ocml digrams describe a simple room allocation problem called Sisyphus [Lin92] where a set of laboratory workers should be assigned rooms in an oce building. <p> sdts * * * * * [PB78] ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * <ref> [LTV96] </ref> dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq *
Reference: [Lun88] <author> A. W. Luniewski. </author> <title> Intent-based page modelling using blocks in the Quill document editor. </title> <editor> In van Vliet [vV88], </editor> <publisher> pages 205221. </publisher>
Reference-contexts: The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87]. Quill <ref> [CHL + 88, CHP88a, Cha88, Lun88, Cha90] </ref> supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator [RT89].
Reference: [LV95] <author> G. Lindn and A. I. Verkamo. </author> <title> An interface between dier-ent software development environments. </title> <booktitle> In Proceedings of the Tenth Annual Knowledge Based Software Engineering Conference (KBSE '95), </booktitle> <address> Boston, USA, </address> <pages> pages 7987, </pages> <address> Los Alamitos, 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A C++ tle for user detned procedures has been included. alchemist is fully operational in the way as has been explained in this chapter. alchemist has been extensively used for building transfor mations, especially for providing an interface between two development environments <ref> [LV95] </ref>. Chapter 5 The SGML transformation language TranSID The TranSID language is a tree-based transformation language [JKL96a, JKL96b, JKL97]. The language is targeted at sgml transformations, but the underlying technique is independent of the representation format. The transformation has full access to the entire parse tree of the sgml document. <p> The vital methodology expects and depends on the user to use other external tools as well for building kbs systems. For the bridge between the vital workbench and the foundation case tool, we tnally chose some very specitc tools to interface <ref> [LV95] </ref>. In the vital workbench we chose the Operationalizable Conceptual Modelling Language (ocml) editor and in foundation we chose several diagram tools, such as an entity-relationship diagram tool, a data ow diagram tool, a procedure diagram tool and a data objects speciter tool.
Reference: [MBO93] <author> S. A. Mamrak, J. Barnes, and C. S. O'Connell. </author> <title> Benetts of automating data translation. </title> <journal> IEEE Software, </journal> <volume> 10(4):8288, </volume> <year> 1993. </year>
Reference-contexts: Introduction element Entry - start puts stdout "" - end - element HWGroup - start puts stdout "" - end - element Headword - start puts stdout "-"bf " nonewline - end puts stdout "-"- - TEXT puts stdout $data nonewline - CoST. ument transformation systems (e.g., hst [KLMN90], ica <ref> [MBO93] </ref>, and Syndoc [KP93, Kui96]), alchemist relies on context-free grammars for representation specitcation. Unlike many systems, however, the representation grammars may be totally unrelated. The actual transformation is specited based on these grammars. alchemist adds some other properties to transformation generation as well. <p> Additionally, alchemist automatically generates the transformation code and calls a compiler that links and compiles the code into an executable transformation. alchemist is similar to many other transformation generators such as ica <ref> [MBO93] </ref>. The motivation behind alchemist lies in the fact that we wanted to provide a general transformation generator where the user does not have to bother about the similarity of the source and target grammars. <p> The main advantage with hst is, that it also detnes the inverse transformations of a transformation. alchemist produces only one-way transformations, even if the inverse transformation may be detned by swapping the source and target grammars. 7.2 A structured document transformation gen erator The Integrated Chameleon Architecture (ica) <ref> [MKNS89, MBO93, MOB94] </ref> is a transformation generator that consists of several tools for building transformations. ica relies on the detnition of an intermediate representation that always lies between the source and target representations. <p> * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * * * <ref> [MBO93] </ref> pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * *
Reference: [MID95] <institution> MID/Information Logistics Group GmbH. </institution> <note> MetaMorphosis Reference Manual, </note> <year> 1995. </year>
Reference-contexts: The evaluation of the expression proceeds from left to right. Every locator returns a list of nodes that are used as input for the next locator in the expression. In this sense TranSID expressions resemble expressions in the MetaMorphosis transformation language <ref> [MID95] </ref>, which was an important source of inspiration for the design of TranSID. The relative locator having selects the nodes that satisfy the condition expressed as a parameter of the 64 5 The SGML transformation language TranSID having locator. <p> The user may add actions to be taken at any token but he/she may usually not refer (without diculty) to any other part in the source. Especially, it is dicult to make references to yet unparsed document parts. The Metamorphosis system <ref> [MID95] </ref> instead, builds the parse tree of the sgml document. The user specites how each node in the parse tree should be modited and is allowed some more extensive references to the tree. Also Balise [Ber96] provides tree based transformations as an option. <p> * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen * * * * [Gra91] sgml transformers TranSID * * * * * [JKL96a] Balise * * * * * [Ber96] CoST * * * * * [Har93] MetaMorphosis * * * * * <ref> [MID95] </ref> OmniMark * * * * * [Exo93] * yes, no, ? unknown, fl restricted/simplited AD Addition/deletion of T Addition/deletion nonterminals of tree levels R Reordering of nonterminals ID Identiter mapping SA semantic actions Table 7.1: Continued. 102 7 Related work Most systems copy identiter-like tokens from the source side to
Reference: [MKNS89] <author> S. A. Mamrak, M. J. Kaelbling, C. K. Nicholas, and M. </author> <title> Share. Chameleon: A system for solving the data-translation problem. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(9):1090 1108, </volume> <month> sep </month> <year> 1989. </year>
Reference-contexts: The main advantage with hst is, that it also detnes the inverse transformations of a transformation. alchemist produces only one-way transformations, even if the inverse transformation may be detned by swapping the source and target grammars. 7.2 A structured document transformation gen erator The Integrated Chameleon Architecture (ica) <ref> [MKNS89, MBO93, MOB94] </ref> is a transformation generator that consists of several tools for building transformations. ica relies on the detnition of an intermediate representation that always lies between the source and target representations.
Reference: [MOB94] <author> S. A. Mamrak, C. S. O'Connell, and J. Barnes. </author> <title> Integrated Chameleon Architecture. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Clis, USA, </address> <year> 1994. </year>
Reference-contexts: The main advantage with hst is, that it also detnes the inverse transformations of a transformation. alchemist produces only one-way transformations, even if the inverse transformation may be detned by swapping the source and target grammars. 7.2 A structured document transformation gen erator The Integrated Chameleon Architecture (ica) <ref> [MKNS89, MBO93, MOB94] </ref> is a transformation generator that consists of several tools for building transformations. ica relies on the detnition of an intermediate representation that always lies between the source and target representations.
Reference: [Ml94] <author> A. Mller. </author> <title> SGML en introduktion till Standard Generalized Markup Language. </title> <institution> Studentlitteratur, Lund, </institution> <year> 1994. </year>
Reference-contexts: A structural component of a document is in sgml called an element. The document type detnition (dtd) that describes this document tells us 1 A related view is that all documents have (implicit) structure, but in some documents it has been marked explicitly <ref> [Ml94] </ref>. 1.1 Structured documents and transformations 3 &lt;!DOCTYPE Dictionary [ &lt;!ELEMENT Dictionary - (Entry)+&gt; &lt;!ELEMENT Entry - (HWGroup,Etymology?, Sense+)&gt; &lt;!ELEMENT HWGroup - (Headword,Pronunciation, PartofSpeech)&gt; &lt;!ELEMENT Headword - (#PCDATA)&gt; &lt;!ELEMENT Pronunciation - (#PCDATA)&gt; &lt;!ELEMENT PartofSpeech - (#PCDATA)&gt; &lt;!ELEMENT Etymology - (#PCDATA)&gt; &lt;!ELEMENT Sense - (Definition,Quotation+)&gt; &lt;!ELEMENT Definition - (#PCDATA)&gt; &lt;!ELEMENT Quotation - <p> By marking the structure explicitly in the document, applications may take advantage of the structure as well as the contents. By using a standard markup, the document becomes more portable and there is a greater possibility to tnd tools for updating and formatting the document <ref> [Ml94] </ref> . The Standard Generalized Markup Language (sgml, [ISO86]) is a meta-language standard for detning markup languages. The markup language detnes a set of markup conventions used together for encoding texts.
Reference: [MPP + 97] <author> O.-P. Mahlamki, K. Paasiala, S. Pienimki, T. Sarajisto, and J. Sievnen. </author> <title> SGML-muunnoskielen toteutus (Implementation of an SGML transformation language, in Finnish). Project 120 References work report, </title> <institution> Department of Computer Science, University of Helsinki, </institution> <year> 1997. </year>
Reference-contexts: TranSID requires a specitcation of the input representation, in the way that the input sgml document must have a dtd, but no output dtd is used. TranSID contains normal tree transformation operations [JKL96b] and it has been extended with powerful string operations and regular expressions <ref> [MPP + 97] </ref>. Design goals of the TranSID language included declarativeness, simpleness and implementability with reasonable eort. Special features include a bottom-up evaluation process and a possibility to restrain the transformation to the event-based strategy. The event-based or top-down strategy is sucient for simple formatting of the sgml document.
Reference: [MR90] <author> N. Major and H. Reichgelt. </author> <title> ALTO An automated laddering tool. </title> <editor> In B. Wielinga, J. Boose, B. Gaines, G. Schrieber, and M. van Someren, editors, </editor> <booktitle> Current Trends in Knowedge Acquisition, Volume 8 of Frontiers in Artitcial Intelligence and Applications. </booktitle> <publisher> IOS Press, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Therefore, alchemist is highly suitable in building transformations between the representations. 71 72 6 Experience and evaluation alchemist has also been used in another bridge from the vital workbench. We have also built a spell from a hierarchy laddering tool called alto <ref> [MR90] </ref> to C++. The user specites a graphical hierarchy of concepts with attributes in alto and can automatically transform the hierarchy into C++ detnitions, which provides an easy and fast way of producing a consistent set of C++ class and object descriptions. Additionally, we have experimented with some smaller applications. <p> Among others, we detned and implemented a spell alto2c++ from a laddering tool called alto <ref> [MR90] </ref> to C++ definitions [TL94b]. With alto, which is part of the vital workbench, the user may draw conceptual hierarchies of the problem domain. In a hierarchy, a concept may have subconcepts and there may be instances of a 80 6 Experience and evaluation concept.
Reference: [Nel85] <author> G. Nelson. Juno, </author> <title> a constraint-based graphics systems. </title> <booktitle> In SIGGRAPH '85 Conference Proceedings, SIGGRAPH Computer Graphics 19(3), </booktitle> <address> San Fransisco, USA, </address> <pages> pages 235243, </pages> <address> New York, 1985. </address> <publisher> ACM. </publisher>
Reference-contexts: The Sam system [Tri81] was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno <ref> [Nel85] </ref> and Tweedle [Ase87]. Quill [CHL + 88, CHP88a, Cha88, Lun88, Cha90] supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator [RT89].
Reference: [Nik90] <author> E. Nikunen. </author> <title> Views in structured text databases. Phil. Lic. </title> <type> Thesis, Report C-1990-60, </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1990. </year>
Reference-contexts: Updates are performed through syntax-directed translation from the modited view to the logical document, and from there to all other open views. Therefore, a view detnition describes not only view computation from the logical document to a view, but also the inverse transformation <ref> [NM89, Nik90] </ref> of the view to the logical document. The moditcation of a view leads to quite an extensive process of updates in the system (Figure 7.1). The modited view is trst parsed.
Reference: [NM89] <author> E. Nikunen and H. Mannila. </author> <title> Detning and inverting textual views of structured texts. </title> <editor> In T. Gyimthy, editor, </editor> <booktitle> Proceedings of the First Finnish-Hungarian Workshop Symposium on Programming Languages and Software Tools, Szeged, Hungary, </booktitle> <pages> pages 108120, </pages> <address> Szeged, </address> <year> 1989. </year> <title> Research Group on the Theory of Automata, </title> <institution> Hungarian Academy of Sciences. </institution>
Reference-contexts: Updates are performed through syntax-directed translation from the modited view to the logical document, and from there to all other open views. Therefore, a view detnition describes not only view computation from the logical document to a view, but also the inverse transformation <ref> [NM89, Nik90] </ref> of the view to the logical document. The moditcation of a view leads to quite an extensive process of updates in the system (Figure 7.1). The modited view is trst parsed.
Reference: [Oxf96] <institution> The Oxford English Dictionary Online, </institution> <year> 1996. </year> <note> URL: http://www.oed.com/. </note>
Reference-contexts: The document has been marked up with sgml and it also contains the document type detnition (dtd). The dtd is loosely based on the dictionary description presented in [BBT92]. The document contents (the dictionary entry for spaz) is based on an entry in the Oxford English Dictionary <ref> [Oxf96] </ref> but has been slightly modited and shortened. We base many of the following examples on this trst one and shall therefore explain the example in detail.
Reference: [Pay88] <editor> T. F. Payton. SSAGS. In Deransart et al. </editor> <booktitle> [DJL88], </booktitle> <pages> pages 125127. </pages>
Reference-contexts: For another description of document transformation systems based on two grammars, see [KP95, Kui96]. The Syntax and Semantics Analysis and Generation System (ssags) <ref> [PKP + 82, Pay88] </ref> is based on tt-grammars just as alchemist. ssags implements two subsets of tt-grammars.
Reference: [PB78] <author> A. Pyster and H. W. Buttelmann. </author> <title> Semantic-syntax-directed translation. </title> <journal> Information and Control, </journal> <volume> 36:320361, </volume> <year> 1978. </year>
Reference-contexts: If fi contains a nonterminal that is not present 3.3 TT-grammars 31 in ff, this part is added to the document (possibly with empty contents) [KP93]. sdtss have been extended with semantic rules [AU71, Bak78], predicates that select a target production <ref> [PB78] </ref> or even small programs attached to the rules [Shi84], but these extensions do not support the correctness of the output and we thereby lose the main advantage of using sdtss. 3.3 TT-grammars Using an sdts achieves our main goal for a transformation technique for structured documents. <p> 7.1: Properties of some syntax-directed transformation systems and techniques. 7.5 Summary of related systems 101 System Moditcations ID SA Useful A/D R T reference Transformation techniques simp sdts * [AU72] sdts * fl * * [AU72] esdts * * * * fl [KP93] pred sdts * * * * * <ref> [PB78] </ref> ssdt * * * * * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif
Reference: [PDC92] <author> T. J. Parr, H. G. Dietz, and W. E. Cohen. </author> <title> PCCTS reference manual, Version 1.0. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(2):88165, </volume> <year> 1992. </year>
Reference-contexts: Instead of building a transformation from scratch, the user is able to produce a transformation of some specited representations. Examples of typical parser generators are yacc [Joh75] and pccts <ref> [PDC92] </ref>. These parser generators, also called compiler-compilers, tend to concentrate on the front-end of the transformation process. The user may specify the input representation in great detail, ensuring that no incorrect document is accepted by the transformation module.
Reference: [PKP + 82] <author> T. F. Payton, S. Keller, J. A. Perkins, S. Rowan, and S. P. Mardinly. SSAGS: </author> <title> A syntax and semantics analysis and generation system. </title> <booktitle> In Proceedings of the IEEE Computer Society's Sixth International Computer Software and Applications Conference (COMPSAC '82), </booktitle> <address> Chicago, USA, </address> <pages> pages 424432, </pages> <address> Los Alamitos, 1982. </address> <publisher> IEEE Computer Society Press. </publisher> <address> References 121 </address>
Reference-contexts: For another description of document transformation systems based on two grammars, see [KP95, Kui96]. The Syntax and Semantics Analysis and Generation System (ssags) <ref> [PKP + 82, Pay88] </ref> is based on tt-grammars just as alchemist. ssags implements two subsets of tt-grammars.
Reference: [PKPM83] <author> T. F. Payton, S. Keller, J. A. Perkins, and S. P. Mardinly. </author> <title> The DIANA interfacer. </title> <editor> In P. J. L. Wallis, editor, </editor> <booktitle> Proceedings of the Workshop on Ada Software Tools Interfaces, Bath, UK, number 180 in Lecture Notes in Computer Sciences, </booktitle> <pages> pages 88 103, </pages> <address> Berlin, 1983. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The implementation of the sipeq tt-grammar also includes a simple case statement for choosing between target subgrammars, a copy instruction for multiplying target subtrees, and pseudoproductions for simplifying symbol associations. ssags has been used, among other things, in implementing an interface between the programming languages Ada and DIANA <ref> [PKPM83] </ref>. Chiba and Kyojima [CK95] use syntax-directed tree translation to perform structured document transformations. They encode trees into strings and then perform syntax-directed translation on the strings.
Reference: [QV86] <author> V. Quint and I. Vatton. GRIF: </author> <title> An interactive system for structured document manipulation. </title> <booktitle> In van Vliet [vV86], </booktitle> <pages> pages 200 213. </pages>
Reference-contexts: The user may also tlter out certain information, e.g., choosing to print only section titles or bibliographic references. He/She may even choose to add information to the document by allowing updatable views of the document. Many document preparation systems provide multiple views of a document <ref> [QV86, FS88, CH88, KLMN90, Bro91] </ref>. Especially, these systems often show a textual view and a formatted view of a document simultaneously. The paradigm also usually requires inverse transformations. <p> Also several other document preparation 1.3 ALCHEMIST a powerful transformation generator 7 systems use the grammar concept for detning the structure of the documents. Examples include publicly or commercially available systems such as L A T E X [Lam86] and Grif <ref> [QV86] </ref> and many research prototypes such as hst [KLMN90] and Syndoc [KP91]. Applying then a strict front-end to document transformation is not a problem. The input documents follow a certain syntax and can be checked with a parser. All of these systems have a more or less open back-end. <p> For example, we see how dierent sections of the document are related to each other structurally. We can even use several dierent grammars for one single document type, thereby achieving dierent structural views of one document. Context-free grammars [Cho56] are frequently used in document management systems <ref> [BR84, CIV86, GT87, FQA88, QV86, KLMN90, KP93, Kui96] </ref>. Context-free grammars constitute a restricted set of all possible grammars and are easier to process than general grammars [ASU86]. In this chapter, we detne context-free grammars and we also briey review dierent parsing techniques for context-free grammars. <p> The transformation process is thereby augmented with two additional phases, transformation from the source tree to a basic tree, and transformation from the consistent tree to the result tree. The hag is specited manually. The Grif environment <ref> [QV86, QVB86a, QVB86b, FQA88] </ref> is an interactive system for editing structured documents. It is a structure-oriented editor which guides the user in accordance with the structure of the document. The user detnes a structure schema that corresponds to the generic logical structure of a document. <p> * [Shi84] pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * <ref> [QV86] </ref> hst * * * [KLMN90] ica * * * [MBO93] pedtnt * * * * * [FS88] Scrimshaw * * * * * [Arn93] sdtt * * * [CK95] simon * * * * * [FW93] sipeq * * *? [KPPM84] Syndoc * * * * fl [KP93] t-gen *
Reference: [QV87] <author> V. Quint and I. Vatton. </author> <title> An abstract model for interactive pictures. </title> <editor> In H.-J. Bullinger and B. Shackel, editors, </editor> <booktitle> Human Computer Interaction INTERACT '87, </booktitle> <pages> pages 643647, </pages> <address> Am-sterdam, 1987. </address> <publisher> IFIP, Elsevier Science Publishers. </publisher>
Reference-contexts: The transformation can both remove certain parts from a document and reorder elements in the document. A moditcation in a view propagates to other views. Grif recognizes the constraints between the modited part and other views, and updates can be done incrementally <ref> [QV87] </ref>. The Syndoc system [KP91] is based on sdtss. The user may insert formatting details into a logical document. The user may add or delete terminals and reorder nonterminals.
Reference: [QVB86a] <author> V. Quint, I. Vatton, and H. Bedor. Grif: </author> <title> An interactive environment for T E X. </title> <booktitle> In Dsarmnien [Ds86], </booktitle> <pages> pages 145158. </pages>
Reference-contexts: The transformation process is thereby augmented with two additional phases, transformation from the source tree to a basic tree, and transformation from the consistent tree to the result tree. The hag is specited manually. The Grif environment <ref> [QV86, QVB86a, QVB86b, FQA88] </ref> is an interactive system for editing structured documents. It is a structure-oriented editor which guides the user in accordance with the structure of the document. The user detnes a structure schema that corresponds to the generic logical structure of a document.
Reference: [QVB86b] <author> V. Quint, I. Vatton, and H. Bedor. Le systme Grif. </author> <title> T.S.I Technique et Science Informatiques, </title> <address> 5(4):337341, </address> <month> July August </month> <year> 1986. </year>
Reference-contexts: The transformation process is thereby augmented with two additional phases, transformation from the source tree to a basic tree, and transformation from the consistent tree to the result tree. The hag is specited manually. The Grif environment <ref> [QV86, QVB86a, QVB86b, FQA88] </ref> is an interactive system for editing structured documents. It is a structure-oriented editor which guides the user in accordance with the structure of the document. The user detnes a structure schema that corresponds to the generic logical structure of a document.
Reference: [Rei83] <author> S. T. Reiss. </author> <title> PECAN: Program development systems that support multiple views. </title> <type> Technical Report CS8329, </type> <institution> Brown University, </institution> <year> 1983. </year>
Reference-contexts: Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87]. Quill [CHL + 88, CHP88a, Cha88, Lun88, Cha90] supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment <ref> [Rei83] </ref> and the Synthesizer Generator [RT89]. Editing structured documents require dynamic translations of document parts. When the user moves or copies a document part to another place, the part must be transformed according to the structure of the target position.
Reference: [RT89] <author> T. Reps and T. Teitelbaum. </author> <title> The Synthesizer Generator. A System for Constructing Language-Based Editors. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Quill [CHL + 88, CHP88a, Cha88, Lun88, Cha90] supports full integration of various sorts of graphical editing together with text editing. Multiple views have also been implemented in program development environments, two of them being pecan environment [Rei83] and the Synthesizer Generator <ref> [RT89] </ref>. Editing structured documents require dynamic translations of document parts. When the user moves or copies a document part to another place, the part must be transformed according to the structure of the target position.
Reference: [Shi84] <author> Q. Y. Shi. </author> <title> Semantic-syntax-directed translation and its application to image processing. </title> <journal> Information Sciences, </journal> <volume> 32:7590, </volume> <year> 1984. </year>
Reference-contexts: If fi contains a nonterminal that is not present 3.3 TT-grammars 31 in ff, this part is added to the document (possibly with empty contents) [KP93]. sdtss have been extended with semantic rules [AU71, Bak78], predicates that select a target production [PB78] or even small programs attached to the rules <ref> [Shi84] </ref>, but these extensions do not support the correctness of the output and we thereby lose the main advantage of using sdtss. 3.3 TT-grammars Using an sdts achieves our main goal for a transformation technique for structured documents. <p> and techniques. 7.5 Summary of related systems 101 System Moditcations ID SA Useful A/D R T reference Transformation techniques simp sdts * [AU72] sdts * fl * * [AU72] esdts * * * * fl [KP93] pred sdts * * * * * [PB78] ssdt * * * * * <ref> [Shi84] </ref> pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst <p> 101 System Moditcations ID SA Useful A/D R T reference Transformation techniques simp sdts * [AU72] sdts * fl * * [AU72] esdts * * * * fl [KP93] pred sdts * * * * * [PB78] ssdt * * * * * <ref> [Shi84] </ref> pssdt * * * * * [Shi84] gsdt * * * * * [AU71] ag * * * * * [DJL88] tt-grammar * * * * * [KPPM84] General transformers alchemist * * * * * [LTV96] dgts * * *? [KPPM84] Grif * * ? * * [QV86] hst * * * [KLMN90] ica * *
Reference: [SMB93] <author> C. M. Speerberg-McQueen and L. Burnard, </author> <title> editors. Guidelines for Electronic Text Encoding and Interchange, Chapter 2: A Gentle Introduction to SGML. Text Encoding Initiative (TEI), </title> <address> Chicago, </address> <year> 1993. </year> <note> Draft Version 2. </note>
Reference-contexts: The markup language detnes a set of markup conventions used together for encoding texts. It specites what markup is allowed, what markup is required, how markup is distinguished from text, and what the markup means <ref> [SMB93] </ref>. sgml enforces descriptive markup which provides names to categorize parts of a document. By contrast a procedural markup system detnes what processing is to be carried out at particular points in a document.
Reference: [SMR93] <author> N. Shadbolt, E. Motta, and A. </author> <title> Rouge. Constructing knowledge-based systems. </title> <journal> IEEE Software, </journal> <volume> 10(6):3439, </volume> <year> 1993. </year>
Reference-contexts: We start by describing dierent applications built by alchemist, and then move on to applications of TranSID. We tnish by making comparisons between the two systems. alchemist has been developed during several years as a part of a project called vital <ref> [SMR93] </ref>. The vital project detned and implemented a methodology for building knowledge-based software systems. We have had numerous possibilities of testing and evaluating alchemist in this project. Especially, we have received feedback from other project partners, which we have been able to take into account in developing alchemist further. <p> The workbench is based on the vital methodology for building such systems <ref> [SMR93] </ref>. The workbench contains tools for knowledge acquisition and modeling as well as system design and visualization. On the other hand, the foundation case tools contains tools for software design such as dierent conceptual modeling tools and tools for detning user interfaces [And93b].
Reference: [TL94a] <author> H. Tirri and G. Lindn. </author> <title> ALCHEMIST an object-oriented tool to build transformations between heterogeneous data representations. </title> <booktitle> In Proceedings of the Twenty-Seventh Annual 122 References Hawaii International Conference on System Sciences (HICSS '94), Volume II: Software Technology, </booktitle> <pages> pages 226235, </pages> <address> Los Alamitos, 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In CoST, the instruction puts automatically prints a newline character where it is not explicitly prohibited by the nonewline instruction. 2 1.3 ALCHEMIST a powerful transformation generator In this thesis we present a simple and powerful tool alchemist <ref> [TL94a, LTV96] </ref> for specifying and generating transformations of structured documents. alchemist requires the user to specify both the input and output document representations. The tool then generates transformation modules that accept only correct input documents and produce only correct output documents according to the specitcations. <p> One such example is the ssags transformation generator [KPPM84], but it only implements a subset of the tt-grammar technique. In this chapter we present a transformation generator called alchemist <ref> [TL94a, LTV96] </ref> which is based on the tt-grammar technique. alchemist also provides a graphical interface for specifying transformations.
Reference: [TL94b] <author> H. Tirri and G. Lindn. </author> <title> VITAL transformation approach. </title> <booktitle> Deliverable UH/DD415, ESPRIT-II Project 5365 VITAL, </booktitle> <year> 1994. </year>
Reference-contexts: Among others, we detned and implemented a spell alto2c++ from a laddering tool called alto [MR90] to C++ definitions <ref> [TL94b] </ref>. With alto, which is part of the vital workbench, the user may draw conceptual hierarchies of the problem domain. In a hierarchy, a concept may have subconcepts and there may be instances of a 80 6 Experience and evaluation concept.
Reference: [Tri81] <author> S. Trimberger. </author> <title> Combining graphics and a layout language in a single interactive system. </title> <booktitle> In Proceedings of the 18th ACM/IEEE Design Automation Conference, </booktitle> <address> Nashville, USA, </address> <pages> pages 234239, </pages> <address> Los Alamitos, 1981. </address> <publisher> IEEE Computer Science Press. </publisher>
Reference-contexts: Other multiple-view editors are the V OR T E X [CCH86, Che88, CH88, CHM88] document preparation system showing both textual and formatted versions of T E X documents [Knu87], and Lilac [Bro88, Bro91]. The Sam system <ref> [Tri81] </ref> was one of the trst two-view editors for graphical pictures. It combines graphics and a layout language; the user can edit a picture in two views. Other two-view editors for graphical pictures are Juno [Nel85] and Tweedle [Ase87].
Reference: [Ver94] <author> A. I. Verkamo. </author> <title> Cooperation of KBS development environments and CASE environments. </title> <booktitle> In Proceedings of the Sixth International Conference on Software Engineering and Knowledge Engineering (SEKE '94), Jurmala, Latvia, </booktitle> <pages> pages 358 365, </pages> <address> Skokie, USA, </address> <year> 1994. </year> <institution> Knowledge Systems Institute. </institution>
Reference-contexts: On the other hand, the foundation case tools contains tools for software design such as dierent conceptual modeling tools and tools for detning user interfaces [And93b]. An alchemist interface between two development environments 73 There are several reasons for the bridge between the two development environments <ref> [Ver94] </ref>. Firstly, one of the design principles of the vital workbench was openness. The user of the workbench should be able to import as well as export design schemas and models to and from the workbench.
Reference: [VL94] <author> A. I. Verkamo and G. Lindn. </author> <title> CASE tool interface. Internal deliverable UH/T443/ID003, ESPRIT-II Project 5365 VITAL, </title> <year> 1994. </year>
Reference-contexts: It was obvious that the need in this direction was greater. The user could trst start by specifying and building knowledge-based parts of the system and then completely change environment and tnish the system in the foundation environment <ref> [VL94] </ref>.
Reference: [VL95] <author> A. I. Verkamo and G. Lindn. </author> <title> Problems in interfacing tools of dierent development environments. </title> <booktitle> In Proceedings of the Seventh International Conference on Software Engineering and Knowledge Engineering (SEKE '95), </booktitle> <address> Rockville, USA, </address> <pages> pages 429437, </pages> <address> Skokie, </address> <year> 1995. </year> <institution> Knowledge Systems Institute. </institution>
Reference-contexts: The target subgrammar contains the detnition of a data ow process where the task name is copied several times into the constructed process. The problem list that had to be solved in the spells is quite extensive <ref> [VL95] </ref>, ranging from simple identiter moditcations and checking to global computation of object order and numbers. We saw that alchemist was very suitable for handling local transformations, where one source object corresponds to one or several task objects. All identiter requirements could be met through semantic actions.
Reference: [vV86] <editor> J. C. van Vliet, editor. </editor> <booktitle> EP86 Proceedings of the International Conference on Text Processing and Document Manipulation, Nottingham, UK, British Computer Society Workshop Series, </booktitle> <address> Cambridge, 1986. </address> <publisher> Cambridge University Press. </publisher>
Reference: [vV88] <editor> J. C. van Vliet, editor. </editor> <booktitle> EP88 Proceedings of the International Conference on Document Manipulation, and Typography, Nice, France, The Cambridge Series on Electronic Publishing, </booktitle> <address> Cambridge, 1988. </address> <publisher> Cambridge University Press. </publisher>
Reference: [vVW86] <author> H. van Vliet and J. B. Warmer. </author> <title> An annotated biography on document processing. </title> <booktitle> In van Vliet [vV86], </booktitle> <pages> pages 261277. </pages>
Reference-contexts: In this chapter we take a look at some transformation generators and tree transformation systems that are suitable for building transformations between structured documents. For extensive, if somewhat outdated bibliographies on the manipulation of structured documents, we refer to <ref> [FSS82, And86, vVW86, Fur92] </ref> and [KN94]. We concentrate on systems based on two grammars, a source grammar and target grammar, where the user is actually required to detne both the source and target representations. Multiple view editors are typical applications for transformations of structured documents.
Reference: [Yel88] <author> D. M. Yellin. </author> <title> Attribute Grammar Inversion and Source-to-Source Translation. </title> <booktitle> Lecture Notes in Computer Science 302. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, 1988. ISSN 1238-8645 ISBN 951-45-7766-3 Helsinki 1997 Helsinki University Printing House Greger Lindn: </address> <institution> Structured Do cumen t ransformations A-1997-2 </institution>
Reference-contexts: In a decorated tree, all attributes have values that are consistent with their detnition. Attributes can be evaluated top-down or bottom-up, or through several passes <ref> [DJL88, Yel88] </ref>. Assuming that we do allow functions with side eects, we may include output actions or even tree construction operators and thereby obtain an attributed translation, typically used in program compiling.
References-found: 139

