URL: http://www.cs.colostate.edu/~ftppub/TechReports/1997/tr97-112.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Email: e-mail: fhowe,dahlmang@cs.colostate.edu  
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Characterizing Domain Specific Effects in Flaw Selection for Partial Order Planners  
Author: Adele E. Howe Eric Dahlman 
Note: This research was supported in part by NSF Career Award IRI-9624058 and DARPA contract F30602-95-0257.  
Web: WWW: http://www.cs.colostate.edu  
Date: June 1997  
Address: Fort Collins, CO 80523  Fort Collins, CO 80523-1873  
Affiliation: Computer Science Department Colorado State University  Computer Science Department Colorado State University  
Pubnum: Technical Report CS-97-112  
Abstract: Computer Science Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: [Gerevini and Schubert, 1996] <author> Gerevini, A. and Schubert, L. </author> <year> 1996. </year> <title> Accelerating partial-order planners: Some techniques for effective search control and pruning. </title> <journal> Journal of Artificial Intelligence Research 5 </journal> <pages> 95-137. </pages>
Reference-contexts: 1 Introduction As has been shown several times [Joslin and Pollack, 1994], [Srinivasan and Howe, 1995], <ref> [Gerevini and Schubert, 1996] </ref>, [Pollack et al., 1996], the flaw selection strategy is integral to good performance in a partial order planner. A bad flaw selection strategy can make an apparently simple partial order planning problem practically unsolvable. <p> The problems were modified to include new goal orderings. 1 The problem set was somewhat limited by the strategies explored. Some of them do not currently handle facts. 2 Overall, we tested 10 different flaw selection strategy algorithms. The LIFO based algo-rithms were: UCPOP and ZLIFO <ref> [Gerevini and Schubert, 1996] </ref>; both come with the UCPOP distribution. The LC based algorithms were: three variants on LCFR 2 [Joslin and Pollack, 1994] and two variants on LCOC (Least Cost Open Conditions).
Reference: [Joslin and Pollack, 1994] <author> Joslin, David and Pollack, Martha E. </author> <year> 1994. </year> <title> Least-cost flaw repair: A plan refinement strategy for partial-order planning. </title> <booktitle> In Proceedings 12th National Conference on Artificial Intelligence (AAAI-94), </booktitle> <volume> volume 2. </volume> <publisher> AAAI, AAAI Press/MIT Press. </publisher> <pages> 1004-1015. </pages>
Reference-contexts: 1 Introduction As has been shown several times <ref> [Joslin and Pollack, 1994] </ref>, [Srinivasan and Howe, 1995], [Gerevini and Schubert, 1996], [Pollack et al., 1996], the flaw selection strategy is integral to good performance in a partial order planner. A bad flaw selection strategy can make an apparently simple partial order planning problem practically unsolvable. <p> Some of them do not currently handle facts. 2 Overall, we tested 10 different flaw selection strategy algorithms. The LIFO based algo-rithms were: UCPOP and ZLIFO [Gerevini and Schubert, 1996]; both come with the UCPOP distribution. The LC based algorithms were: three variants on LCFR 2 <ref> [Joslin and Pollack, 1994] </ref> and two variants on LCOC (Least Cost Open Conditions). Like ZLIFO, LCOC addresses non-separable threats first and delays separable threat, making it easier to compare with ZLIFO.
Reference: [Knoblock and Yang, 1995] <author> Knoblock, Craig A. and Yang, </author> <title> Qiang 1995. Relating performance of partial-order planning algorithms to domain features. </title> <journal> SIGART Bulletin 6(1). </journal>
Reference-contexts: Although some principles of flaw selection strategies have been proven (e.g., effect of delaying separable threats when using FIFO and LIFO strategies [Peot and Smith, 1993]), no proposed solution has been shown superior on all problems; indeed, a general search algorithm for partial order planning may not be possible <ref> [Knoblock and Yang, 1995] </ref>. In fact, strategies appear quite sensitive to seemingly minor changes in domain and problem definition [Srinivasan and Howe, 1995]. Two strategies, ZLIFO and LCFR, have performed well, but differently on problems. In fact, neither seems to have a consistent edge over the other.
Reference: [Langley, 1992] <author> Langley, </author> <title> Pat 1992. Systematic and nonsystematic search strategies. </title> <booktitle> In Proceedings of the First International Conference on Artificial Intelligence Planning Systems. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher> <pages> 145-152. </pages>
Reference-contexts: This strategy exploits information available at that point in the search; unfortunately, the ordering based on cost is not always right. Iterative sampling <ref> [Langley, 1992] </ref> follows paths randomly until a solution is found; this strategy is effective when the solution density is high. A contributor to the success of LCFR may be its dynamic nature.
Reference: [Peot and Smith, 1993] <author> Peot, Mark A. and Smith, David E. </author> <year> 1993. </year> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> Menlo Park. </address> <publisher> AAAI, AAAI Press/MIT Press. </publisher> <pages> 492-499. </pages>
Reference-contexts: A bad flaw selection strategy can make an apparently simple partial order planning problem practically unsolvable. Although some principles of flaw selection strategies have been proven (e.g., effect of delaying separable threats when using FIFO and LIFO strategies <ref> [Peot and Smith, 1993] </ref>), no proposed solution has been shown superior on all problems; indeed, a general search algorithm for partial order planning may not be possible [Knoblock and Yang, 1995]. In fact, strategies appear quite sensitive to seemingly minor changes in domain and problem definition [Srinivasan and Howe, 1995].
Reference: [Pollack et al., 1996] <author> Pollack, Martha; Joslin, David; Paolucci, Massimo; and DeLeon, </author> <month> Yazmine </month> <year> 1996. </year> <title> Flaw selection strategies for partial-order planning. </title> <type> Technical Report 96-20, </type> <institution> Univ. of Pittsburgh, Computer Science Dept. </institution>
Reference-contexts: 1 Introduction As has been shown several times [Joslin and Pollack, 1994], [Srinivasan and Howe, 1995], [Gerevini and Schubert, 1996], <ref> [Pollack et al., 1996] </ref>, the flaw selection strategy is integral to good performance in a partial order planner. A bad flaw selection strategy can make an apparently simple partial order planning problem practically unsolvable. <p> However, a recent study suggests that ZLIFO's sometimes advantage over LCFR is actually due to its delay of separable threats <ref> [Pollack et al., 1996] </ref>. Our purpose is to tease apart some of the observable domain specific factors leading to differential performance of the two key flaw ordering strategies: least cost and LIFO. <p> The LC versions differ on how equal cost ties are broken; LCFR-L uses a different method of calculating costs which results in a different LIFO ordering. We also included three strategies that substitute random selections at key junctures. The 10 algorithms are listed in Table 1 using notation from <ref> [Pollack et al., 1996] </ref>. o, n, and s refer to the three types of flaws: open conditions, non-separable (threats that can only be resolved by re-ordering plan steps) and separable threats, respectively. Flaw types are ordered by LIFO, FIFO, R (Random) or New (favor new steps over initial conditions). <p> Diff counts the distinct values found for plans created. An entry of "-" indicates that it timed out at a search limit of 50,000. The problems have been numbered to save space on later tables. One hypothesis is that sensitivity should increase with the number of open conditions <ref> [Pollack et al., 1996] </ref>. Such sensitivity would explain why LIFO does not appear to do as well on larger problems; the more sensitive, the more careful the programmer needs to be. If the hypothesis held, then diff should increase with perms. <p> So ZLIFO, which uses LIFO for a subset of open conditions, should vary less than UCPOP across different precondition ordering; in fact, as Table 2 shows, ZLIFO exhibits less difference between best and worst performance. The LC based strategies require LIFO as a tie breaking strategy. Previous results <ref> [Pollack et al., 1996] </ref> showed LCFR-DSep to be less sensitive to precondition ordering than ZLIFO on the trains2 problem. <p> As with preconditions, we expect all strategies to some extent to be susceptible to changes in goal ordering. It starts off search and leads it further at critical junctures. To determine how 3 Most of the LCFR results do not agree with the results published in <ref> [Pollack et al., 1996] </ref>; while we are using the same basic Lisp code, we are using a different version of UCPOP. 5 Problem UCPOP ZLIFO LCOC LCFR best orig worst best orig worst best orig worst best orig worst 2 28 38 38 27 31 31 28 31 31 30 30
Reference: [Srinivasan and Howe, 1995] <author> Srinivasan, Raghavan and Howe, Adele E. </author> <year> 1995. </year> <title> Comparison of methods for improving search efficiency in a partial-order planner. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <address> Montreal, CA. </address> <pages> 1620-1626. </pages>
Reference-contexts: 1 Introduction As has been shown several times [Joslin and Pollack, 1994], <ref> [Srinivasan and Howe, 1995] </ref>, [Gerevini and Schubert, 1996], [Pollack et al., 1996], the flaw selection strategy is integral to good performance in a partial order planner. A bad flaw selection strategy can make an apparently simple partial order planning problem practically unsolvable. <p> In fact, strategies appear quite sensitive to seemingly minor changes in domain and problem definition <ref> [Srinivasan and Howe, 1995] </ref>. Two strategies, ZLIFO and LCFR, have performed well, but differently on problems. In fact, neither seems to have a consistent edge over the other. The strategies at the core of each are Least Cost and LIFO ordering of plan flaws.
Reference: [Williamson and Hanks, 1996] <author> Williamson, Mike and Hanks, </author> <title> Steve 1996. Flaw selection strategies for value-directed planning. </title> <booktitle> In Proceedings of the Third International Conference on Artificial Intelligence Planning Systems. </booktitle> <pages> 237-244. 11 </pages>
Reference-contexts: However, LIFO based strategies have done better on some of the problems tested previously (e.g., TRAINS2 and the briefcase problems); some have argued that the LIFO approach exploits programmer knowledge better <ref> [Williamson and Hanks, 1996] </ref>. However, a recent study suggests that ZLIFO's sometimes advantage over LCFR is actually due to its delay of separable threats [Pollack et al., 1996].
References-found: 8

