URL: http://www.cs.wisc.edu/ZOO/PAPERS/zoo.ps
Refering-URL: http://www.cs.wisc.edu/ZOO/papers.html
Root-URL: 
Email: fyannis,miron,shivani,vamsig@cs.wisc.edu  
Title: ZOO: A Desktop Experiment Management Environment  
Author: Yannis E. Ioannidis Miron Livny Shivani Gupta Nagavamsi Ponnekanti 
Address: Wisconsin, Madison, WI 53706  
Affiliation: Department of Computer Sciences, University of  
Abstract: Over the last decade, a dramatic increase has been observed in the ability of individual experimental scientists to generate and store data, which has not been matched by an equivalent development of adequate data management tools. In this paper, we present the results of our efforts to develop a Desktop Experiment Management Environment that many experimental scientists would like to have on their desk. The environment is called ZOO and is developed in collaboration with domain scientists from Soil Sciences and Biochemistry. We first describe the overall architecture of ZOO, and then focus on key features of its various components. We specifically emphasize aspects of the object-oriented database server that is at the core of the system, the experimentation manager that initiates the execution of experiments as a result of scientists' requests, and the mechanisms that the modules of the system use to communicate between them. Finally, we briefly discuss our experiences with the use of the current ZOO prototype in the context of plant-growth simulation ex periments and NMR spectroscopy experiments.
Abstract-found: 1
Intro-found: 1
Reference: [AIL96] <author> V. Anjur, Y. Ioannidis, and M. Livny. Frog and Turtle: </author> <title> Visual bridges between files and object-oriented data. </title> <booktitle> In Proc. 8th International Conference on Scientific and Statistical Database Management, </booktitle> <pages> pages 76-85, </pages> <address> Stock-holm, Sweden, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: some of the Zoo modules emphasizing user interfaces have already been discussed elsewhere: the role of schemas in Zoo [IL92], the theoretical framework used for schema visualization [HIL94] and the resulting prototype schema manager [HIL95, ILBH96], the data model and query language of the system [WI93], and the object-to-file translator <ref> [AIL96] </ref>. This paper concentrates on the internal engines of the system, which have not been presented earlier. <p> Therefore, experiment design includes the following activity as well: * Frog is used to specify mappings between the designed Moose schema and the input and output files required by each external system. The resulting map-files are then stored and used as Turtle input <ref> [AIL96] </ref>.
Reference: [BCVZ88] <author> R. Brun, O. Couet, C. Vandoni, and P. Za-narini. </author> <title> Physics analysis workstation. </title> <type> Technical Report Program Library Q121, </type> <institution> CERN Computer Center, </institution> <year> 1988. </year>
Reference-contexts: Finally, in some cases, scientists use specialized software tools developed just for experiments in their field. For example, CERN (European Center for Nuclear Physics) has developed PAW <ref> [BCVZ88] </ref> and HEPDB [Shi93], which are currently used by high-energy physicists to deal with data from accelerator experiments.
Reference: [C + 94] <author> M. Carey et al. </author> <title> Shoring up persistent applications. </title> <booktitle> In Proc. of the 1994 ACM-SIGMOD Conference on the Management of Data, </booktitle> <pages> pages 383-394, </pages> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Moreover, thanks to the layered implementation of Horse, we can easily port the system to use as a storage server any other relational or non-relational system. (We have taken some initial steps in this direction, to port Horse on top of Shore <ref> [C + 94] </ref>.) The most significant function of Horse is to translate Moose and Fox into the Relational model and SQL, respectively. Most aspects of these translations are quite straightforward and similar to other efforts. <p> In addition to completing its implementation based on this papers' description, some of the other important issues are porting Zoo from on top of Informix to on top of Shore <ref> [C + 94] </ref> (so that the use of our tool does not depend on the purchase of a commercial DBMS), porting Opossum and Squid to Tcl/Tk or Java, and providing the ability to express arbitrarily complex experiment protocols that may involve communicating with several external systems as part of a single
Reference: [CM95] <author> I-M. Chen and V. Markowitz. </author> <title> An overview of the object protocol model (opm) and the opm data management tools. </title> <journal> Information Systems, </journal> <volume> 20(5) </volume> <pages> 393-418, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: These include the Laboratory Notebook effort at Los Alamos [Nel90], the Chromosome Information System (CIS) database at LBL supported by the SDT [MF91] and ERDRAW [SM91] design tools, the OPM model and tools at LBL as well <ref> [CM95] </ref>, the Computational Chemistry Database project at OGI [CMR + 94], the Software Testpilot project on DBMS performance assessment at CWI [KK93], and others. The focus of each project is different, so comparisons with Zoo are not always meaningful. <p> With respect to experimentation management, the OPM data model <ref> [CM95] </ref> employs special protocol classes to capture the flow of experiments, something that Zoo is capturing indirectly through the derived relationships in Moose. The relative expressibility of the two approaches is a question that we plan to investigate in the future.
Reference: [CMR + 94] <author> J. Cushing, D. Maier, M. Rao, D. Abel, D. Feller, and D. DeVaney. </author> <title> Computational proxies: Modeling scientific applications in object databases. </title> <booktitle> In Proc. 7th International Conference on Statistical and Scientific Database Management, </booktitle> <address> Charlottesville, VA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: These include the Laboratory Notebook effort at Los Alamos [Nel90], the Chromosome Information System (CIS) database at LBL supported by the SDT [MF91] and ERDRAW [SM91] design tools, the OPM model and tools at LBL as well [CM95], the Computational Chemistry Database project at OGI <ref> [CMR + 94] </ref>, the Software Testpilot project on DBMS performance assessment at CWI [KK93], and others. The focus of each project is different, so comparisons with Zoo are not always meaningful. <p> The relative expressibility of the two approaches is a question that we plan to investigate in the future. The computational proxies mechanism <ref> [CMR + 94] </ref> addresses the issue of finding out what input objects are the output objects of an experiment associated with. Within Zoo, this is handled by the translation mechanisms of Turtle. Finally, with respect to data management independent of experiment management, Horse offers some unique char-acteristics not found elsewhere.
Reference: [FJP90] <author> J. C. French, A. K. Jones, and J. L. Pfaltz. </author> <title> Summary of the final report of the NSF workshop on scientific database management. </title> <journal> ACM-SIGMOD record, </journal> <volume> 19(4) </volume> <pages> 32-40, </pages> <month> Decem-ber </month> <year> 1990. </year>
Reference-contexts: Managing this surge of scientific data poses significant challenges, many of which cannot be effectively addressed by existing database technology. This has resulted in much research activity in the area of Scientific Database Systems <ref> [FJP90, SOW84] </ref>. Despite the renewed interest in the area, still little attention has been devoted to the needs of small teams of scientists who perform individual experimental studies in their laboratories.
Reference: [HIL94] <author> E. Haber, Y. Ioannidis, and M. Livny. </author> <title> Foundations of visual metaphors for schema display. </title> <journal> Journal of Intelligent Information Systems, </journal> 3(3/4):263-298, July 1994. 
Reference-contexts: Some aspects of the project and some of the Zoo modules emphasizing user interfaces have already been discussed elsewhere: the role of schemas in Zoo [IL92], the theoretical framework used for schema visualization <ref> [HIL94] </ref> and the resulting prototype schema manager [HIL95, ILBH96], the data model and query language of the system [WI93], and the object-to-file translator [AIL96]. This paper concentrates on the internal engines of the system, which have not been presented earlier. <p> Opossum is a schema manager [HIL95] and Squid is a query/update manager. Opossum and Squid have been built following a visualization framework that we have developed that separates the data domain from its visualization <ref> [HIL94] </ref> for maximum flexibility. In particular, they are generic visual systems whose inputs are files with specifications of a data model or query language (which are always Moose and Fox for Zoo, respectively), a visual model, and a metaphor that indicates the correspondence between visualizations and underlying schemas or queries.
Reference: [HIL95] <author> E. Haber, Y. Ioannidis, and M. Livny. Opossum: </author> <title> Desk-top schema management through customizable visualization. </title> <booktitle> In Proc. 21st International VLDB Conference, </booktitle> <pages> pages 527-538, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Some aspects of the project and some of the Zoo modules emphasizing user interfaces have already been discussed elsewhere: the role of schemas in Zoo [IL92], the theoretical framework used for schema visualization [HIL94] and the resulting prototype schema manager <ref> [HIL95, ILBH96] </ref>, the data model and query language of the system [WI93], and the object-to-file translator [AIL96]. This paper concentrates on the internal engines of the system, which have not been presented earlier. <p> Opossum (Obtaining Presentations Of Semantic Sche--mas Using Metaphors) and Squid (System for Queries Updates Insertions Deletions) make up the user interface of Zoo. Opossum is a schema manager <ref> [HIL95] </ref> and Squid is a query/update manager. Opossum and Squid have been built following a visualization framework that we have developed that separates the data domain from its visualization [HIL94] for maximum flexibility. <p> Meta-model and metaphor files that are manually constructed for this bootstrapping process are used as input to Opossum. The resulting meta-schemas are then stored in files and used as Opossum and Squid inputs <ref> [HIL95] </ref>. New visual models and metaphors can also be designed dynamically.
Reference: [IL89a] <author> Y. Ioannidis and M. Livny. </author> <title> Data model mapper generators in observation dbmss. </title> <booktitle> In Proc. Workshop on Heterogeneous Database Systems, </booktitle> <address> Chicago, IL, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: For uniformity, genericity, and extensibility of storage by Horse and of communication between the various Zoo modules, Zoo views any piece of information of any of the above flavors as an object in a Moose database <ref> [IL89a] </ref>. This is done recursively, in the sense that the schema of each one of these databases is also an object in a different, higher-level meta-database, until some root databases are reached, whose schemas are known to all modules (Horse in particular) in a hardwired fashion.
Reference: [IL89b] <author> Y. Ioannidis and M. Livny. MOOSE: </author> <title> Modeling objects in a simulation environment. </title> <editor> In G. X. Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 821-826. </pages> <publisher> North Holland, </publisher> <month> August </month> <year> 1989. </year>
Reference-contexts: It is based on the Moose (Modeling Objects Of Scientific Environments) object-oriented data model and the Fox (Finding Objects of eXperiments) query language <ref> [IL89b, WI93] </ref>, which we have designed for Zoo. Understanding the rest of the paper requires some familiarity with the Moose data model, so its salient features are briefly described below. There are various kinds of object classes in Moose. The primitive classes are integer, real, boolean, and character-string.
Reference: [IL92] <author> Y. Ioannidis and M. Livny. </author> <title> Conceptual schemas: Multi-faceted tools for desktop scientific experiment management. </title> <journal> Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(3) </volume> <pages> 451-474, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Some aspects of the project and some of the Zoo modules emphasizing user interfaces have already been discussed elsewhere: the role of schemas in Zoo <ref> [IL92] </ref>, the theoretical framework used for schema visualization [HIL94] and the resulting prototype schema manager [HIL95, ILBH96], the data model and query language of the system [WI93], and the object-to-file translator [AIL96]. This paper concentrates on the internal engines of the system, which have not been presented earlier. <p> In particular, we have identified the following stages in the typical experiment life-cycle (we have given more details elsewhere <ref> [IL92] </ref>): * Design of Experiment: The experimental frame (i.e., the experiment structure) of a study is laid out [Zei76], specifying which variables will be controlled and what will be measured as output. This is typically done on paper. * Data Collection: Experiments are actually conducted.
Reference: [ILBH96] <author> Y. Ioannidis, M. Livny, J. Bao, and E. Haber. </author> <title> User-oriented visual layout at multiple granu-larities. </title> <booktitle> In Proc. 3rd International Workshop on Advanced Visual Interfaces, pages 184--193, </booktitle> <address> Gubbio, Italy, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Some aspects of the project and some of the Zoo modules emphasizing user interfaces have already been discussed elsewhere: the role of schemas in Zoo [IL92], the theoretical framework used for schema visualization [HIL94] and the resulting prototype schema manager <ref> [HIL95, ILBH96] </ref>, the data model and query language of the system [WI93], and the object-to-file translator [AIL96]. This paper concentrates on the internal engines of the system, which have not been presented earlier.
Reference: [KK93] <author> M. L. Kersten and F. Kwakkel. </author> <title> Design and implementation of a dbms performance assessment tool. </title> <booktitle> In Proc. 4th International DEXA Conference, </booktitle> <pages> pages 265-276, </pages> <address> Prague, Czech Republic, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Alamos [Nel90], the Chromosome Information System (CIS) database at LBL supported by the SDT [MF91] and ERDRAW [SM91] design tools, the OPM model and tools at LBL as well [CM95], the Computational Chemistry Database project at OGI [CMR + 94], the Software Testpilot project on DBMS performance assessment at CWI <ref> [KK93] </ref>, and others. The focus of each project is different, so comparisons with Zoo are not always meaningful.
Reference: [KLK91] <author> R. Krishnamurthy, W. Litwin, and W. Kent. </author> <title> Language features for interoperability of databases with semantic discrepancies. </title> <booktitle> In Proc. ACM-SIGMOD Conference on the Management of Data, </booktitle> <pages> pages 40-49, </pages> <address> Den-ver, CO, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: This can be seen as a simple special case of schema/database merging in heterogeneous databases <ref> [KLK91] </ref> where there are no semantic inconsistencies in the merged schemas, all of them are in the same data model, and they are reused without any transformation. Expanding this notion of database sharing, Horse permits scientists to pose requests that span multiple databases.
Reference: [Liv88] <author> M. Livny. </author> <note> DeNet User's Guide, Version 1.0. </note> <institution> Computer Sciences Dept., University of Wis-consin, Madison, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: Although these sciences have very little in common, typical experimental studies in any of them (and even in experimental computer science, as we have experienced it in our own work on DeNet <ref> [Liv88] </ref> and Condor [LLM88]) seem to go through very similar life-cycles.
Reference: [LLM88] <author> M. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor a hunter of idle workstations. </title> <booktitle> In Proc. of the 8th International Conference on Distributed Computing Systems, </booktitle> <address> San Jose, CA, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Although these sciences have very little in common, typical experimental studies in any of them (and even in experimental computer science, as we have experienced it in our own work on DeNet [Liv88] and Condor <ref> [LLM88] </ref>) seem to go through very similar life-cycles. <p> The agent is registered with Zoo and information about it is stored in a system-defined class (Section 6). For example, our soil-science collaborators want to execute the Cupid simulator under Condor <ref> [LLM88] </ref>, so the corresponding agent takes care of all the Condor communication.
Reference: [MF91] <author> V. M. Markowitz and W. Fang. </author> <title> SDT a database schema design and translation tool. </title> <type> Technical Report LBL-27843, </type> <institution> Lawrence Berkeley Laboratory, Berkeley, </institution> <address> CA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: There are a few other projects that share some of the goals of Zoo. These include the Laboratory Notebook effort at Los Alamos [Nel90], the Chromosome Information System (CIS) database at LBL supported by the SDT <ref> [MF91] </ref> and ERDRAW [SM91] design tools, the OPM model and tools at LBL as well [CM95], the Computational Chemistry Database project at OGI [CMR + 94], the Software Testpilot project on DBMS performance assessment at CWI [KK93], and others.
Reference: [NC83] <author> J. M. Norman and G. S. Campbell. </author> <title> Application of a plant-environment model to problems in irrigation. </title> <editor> In D. I. Hillel, editor, </editor> <booktitle> Advances in Irrigation, </booktitle> <volume> volume II, </volume> <pages> pages 155-168. </pages> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1983. </year>
Reference-contexts: To illustrate the above life-cycle, we discuss experiments in the area of soil sciences, conducted by a group of domain scientists with whom we have been collaborating the longest. They have developed the Cupid model <ref> [NC83, NC89] </ref>, which represents an attempt to define collective plant-environment interactions by combining knowledge from the disciplines of meteorology, soil physics, plant physiology, microbiology, entomology, and plant pathology into a single manageable package.
Reference: [NC89] <author> J. M. Norman and G. S. Campbell. </author> <title> Canopy structure. </title> <editor> In R.W. Pearcy et al., editors, </editor> <title> Physiological plant ecology: </title> <booktitle> Field methods and instrumentation, </booktitle> <pages> pages 301-325. </pages> <publisher> Chapman Hall, Ltd., </publisher> <address> London, UK, </address> <year> 1989. </year>
Reference-contexts: To illustrate the above life-cycle, we discuss experiments in the area of soil sciences, conducted by a group of domain scientists with whom we have been collaborating the longest. They have developed the Cupid model <ref> [NC83, NC89] </ref>, which represents an attempt to define collective plant-environment interactions by combining knowledge from the disciplines of meteorology, soil physics, plant physiology, microbiology, entomology, and plant pathology into a single manageable package.
Reference: [Nel90] <author> D. Nelson. </author> <title> The laboratory notebook technical manual. </title> <type> Technical Report LA-UR 88-1256, </type> <institution> Los Alamos National Laboratory, </institution> <address> Los Alamos, NM, </address> <year> 1990. </year>
Reference-contexts: There are a few other projects that share some of the goals of Zoo. These include the Laboratory Notebook effort at Los Alamos <ref> [Nel90] </ref>, the Chromosome Information System (CIS) database at LBL supported by the SDT [MF91] and ERDRAW [SM91] design tools, the OPM model and tools at LBL as well [CM95], the Computational Chemistry Database project at OGI [CMR + 94], the Software Testpilot project on DBMS performance assessment at CWI [KK93], and
Reference: [Shi93] <author> J. Shiers. </author> <title> High-energy physics data base. </title> <type> Technical Report Program Library Q180, </type> <institution> CERN Computer Center, </institution> <year> 1993. </year>
Reference-contexts: Finally, in some cases, scientists use specialized software tools developed just for experiments in their field. For example, CERN (European Center for Nuclear Physics) has developed PAW [BCVZ88] and HEPDB <ref> [Shi93] </ref>, which are currently used by high-energy physicists to deal with data from accelerator experiments.
Reference: [SM91] <author> E. Szeto and V. M. Markowitz. </author> <title> ERDRAW - a graphical schema specification tool. </title> <type> Technical Report LBL-PUB-3084, </type> <institution> Lawrence Berke-ley Laboratory, Berkeley, </institution> <address> CA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: There are a few other projects that share some of the goals of Zoo. These include the Laboratory Notebook effort at Los Alamos [Nel90], the Chromosome Information System (CIS) database at LBL supported by the SDT [MF91] and ERDRAW <ref> [SM91] </ref> design tools, the OPM model and tools at LBL as well [CM95], the Computational Chemistry Database project at OGI [CMR + 94], the Software Testpilot project on DBMS performance assessment at CWI [KK93], and others.
Reference: [SOW84] <author> A. Shoshani, F. Olken, and H. K. T. Wong. </author> <title> Characteristics of scientific databases. </title> <booktitle> In Proc. 10th International VLDB Conference, </booktitle> <pages> pages 147-160, </pages> <address> Singapore, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: Managing this surge of scientific data poses significant challenges, many of which cannot be effectively addressed by existing database technology. This has resulted in much research activity in the area of Scientific Database Systems <ref> [FJP90, SOW84] </ref>. Despite the renewed interest in the area, still little attention has been devoted to the needs of small teams of scientists who perform individual experimental studies in their laboratories.
Reference: [WI93] <author> J. Wiener and Y. Ioannidis. </author> <title> A Moose and a Fox can aid scientists with data management problems. </title> <booktitle> In Proc. 4th International Workshop on Database Programming Languages, </booktitle> <pages> pages 376-398, </pages> <address> New York, NY, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: aspects of the project and some of the Zoo modules emphasizing user interfaces have already been discussed elsewhere: the role of schemas in Zoo [IL92], the theoretical framework used for schema visualization [HIL94] and the resulting prototype schema manager [HIL95, ILBH96], the data model and query language of the system <ref> [WI93] </ref>, and the object-to-file translator [AIL96]. This paper concentrates on the internal engines of the system, which have not been presented earlier. <p> It is based on the Moose (Modeling Objects Of Scientific Environments) object-oriented data model and the Fox (Finding Objects of eXperiments) query language <ref> [IL89b, WI93] </ref>, which we have designed for Zoo. Understanding the rest of the paper requires some familiarity with the Moose data model, so its salient features are briefly described below. There are various kinds of object classes in Moose. The primitive classes are integer, real, boolean, and character-string. <p> Within Zoo, this is handled by the translation mechanisms of Turtle. Finally, with respect to data management independent of experiment management, Horse offers some unique char-acteristics not found elsewhere. In addition to the novel features of Moose and Fox <ref> [WI93] </ref>, the view of schemas as commodity objects, separate from their instantiations, opens up many new opportunities for information sharing and system communication. This also holds for all the other commodity objects discussed in Section 4 enabling varied visualizations for the same information, experiment result sharing, etc.
Reference: [Zei76] <author> B. P. Zeigler. </author> <title> Theory of Modeling and Simulation. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, N.Y., </address> <year> 1976. </year>
Reference-contexts: In particular, we have identified the following stages in the typical experiment life-cycle (we have given more details elsewhere [IL92]): * Design of Experiment: The experimental frame (i.e., the experiment structure) of a study is laid out <ref> [Zei76] </ref>, specifying which variables will be controlled and what will be measured as output. This is typically done on paper. * Data Collection: Experiments are actually conducted. The scientist specifies the experiment set-up and the values of the input parameters, and the relevant output data is then collected.
References-found: 25

