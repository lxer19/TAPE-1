URL: ftp://ftp.eecs.umich.edu/people/durfee/Agents97-TAIPE.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/durfee/vita.html
Root-URL: http://www.eecs.umich.edu
Email: durfee@umich.edu  -marcush mkurnow jaeho-@orincon.com  
Title: TAIPE: Tactical Assistants for Interaction Planning and Execution  
Author: Edmund H. Durfee Marcus J. Huber, Michael Kurnow, Jaeho Lee 
Address: Ann Arbor, MI 48109  9363 Towne Center Drive San Diego, CA 92121  
Affiliation: EECS Department University of Michigan  Orincon Corporation  
Abstract: Downsizing the number of operators controlling complex systems can increase the decision-making demands on remaining operators, particularly in crisis situations. An answer to this problem is to offload decision-making tasks from people to computational processes, and to use these processes to focus and expedite human decision making. In this paper, we describe a system comprised of multiple computational agents that has demonstrated an ability to help operators prioritize their tasks better, process their tasks faster, and enlist the aid of other operators more transparently. In developing this system, we have of course encountered challenges, particularly in devising content languages that adequately convey the right information (to be interpreted correctly) across the heterogeneous agents. We here summarize our work that addresses this challenge, and illustrate how our system improves performance for operators in naval situations. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barbenceau, M. and Fox, M. S., </author> <year> 1995. </year> <title> COOL: A language describing coordination in multi-agent systems. </title> <booktitle> In Proceedings of the First International Conf. on Multi-Agent Systems, </booktitle> <pages> pages 17-24, </pages> <month> June. </month>
Reference-contexts: Interagent Protocol and Performatives The notion of using message typing and discourse protocols as a means of flagging the intended processing that should be done on received messages is nothing new. Examples range from the venerable Contract Net (Smith 1980) to recent multiagent languages such as COOL <ref> (Barbenceau and Fox, 1995) </ref>. While several speech-act-based languages have been proposed over the years, we have adopted and adapted KQML (Finin et al 1994).
Reference: <author> Coury, B. </author> <title> (editor) 1995. Intelligent Systems Interface (IS) Functional Specification Document (Draft). Produced for the ARPA/MSTO Ship Systems Automation Program, </title> <month> April </month> <year> 1995. </year>
Reference-contexts: The active operator processes can expand and decrease in response to the load on the overall ship system. Intelligent System Interface The Intelligent Systems Interface (ISI) is the interface between a human operator and the ship systems that that operator is controlling <ref> (Coury 1995) </ref>. To be accepted, the ISI must fit within the existing hierarchical command structure of a ship, where responsibilities are divided into several domains: Tactical Scene (TS) manages sensor resources to gather, fuse, and interpret data to detect, identify, locate, track, and assess threats for the entire tactical scene.
Reference: <author> Durfee, E. H. and Montgomery, T. A., </author> <year> 1991. </year> <title> Coordination as distributed search in a hierarchical behavior space. </title> <journal> IEEE Trans. on Sys., Man, and Cyber. </journal> <volume> 21(6) </volume> <pages> 1363-1378. </pages>
Reference-contexts: But this language will evolve, and the identification of the different task classifications above will play an important role in identifying the degree to which task-passing resolves temporary load imbalances versus accomplishing more permanent organizational redesign <ref> (Durfee & Montgomery 1991) </ref>.
Reference: <author> Ephrati, E., and Rosenschein, J. S., </author> <year> 1992. </year> <title> Constrained Intelligent Action: Planning under the influence of a master agent. </title> <booktitle> In Proceedings of the Tenth National Conference on AI, </booktitle> <pages> pages 263-268, </pages> <month> July. </month>
Reference: <author> Fikes, R. E. and Nilsson, N. J. </author> <year> 1971. </year> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, 2(3-4):189-208. </journal>
Reference-contexts: They also need to know how to change the plan in ways that will be interpreted correctly by other agents and lead to desirable effects. To date, there are few standards for specifying plans for computer-based agents. Some conventions certainly exist (such as the STRIPS operator format <ref> (Fikes & Nilsson 1971) </ref>), but these lack the expressiveness needed by plan generation and execution systems that explicitly consider features such as resource needs and real-time deadlines.
Reference: <author> Finin, T., Weber, J., Wiederhold, G., Genesereth, M. Fritzson, R., McKay, D., McGuire, J., Pelavin, R., Shapiro, S., and Beck, C., </author> <year> 1994. </year> <title> Specification of the KQML Agent-Communication Language (DRAFT). </title> <address> URL: http://www.cs.umbc.edu/kqml/papers/kqmlspec.ps. </address>
Reference-contexts: Examples range from the venerable Contract Net (Smith 1980) to recent multiagent languages such as COOL (Barbenceau and Fox, 1995). While several speech-act-based languages have been proposed over the years, we have adopted and adapted KQML <ref> (Finin et al 1994) </ref>. Within the Intelligent Systems Interface (ISI), a protocol such as KQML can be adopted as a standard means that agents can use to encode their communications in an unambiguous manner.
Reference: <author> Kambhampati, S., Cutkosky, M., Tenenbaum, M., Lee, S. H., </author> <year> 1991. </year> <title> Combining Specialized Reasoners and General Purpose Planners: A case study. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 199-205, </pages> <month> July. </month>
Reference-contexts: A planning content language needs to satisfy all of the constituencies that would use the plan. While limited work has been done on plan representations that admit to having specialized agents act as demons to fill in particular features <ref> (Kambhampati et al, 1991) </ref>, the problem that we face is that different combinations of agents will need to generate, modify, and execute different overlapping combinations of plan features.
Reference: <author> Lee, J. and Durfee, E. H., </author> <year> 1994. </year> <title> Structured Circuit Semantics for Reactive Plan Execution Systems. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence , pages 1232-1237, </booktitle> <month> July </month> . 
Reference-contexts: A plan generation system, SIPE-2 (Wilkins 1988) from SRI International, for automatically formulating interaction plans given a description of what the operator needs to understand in a scene. A plan execution system, UMPRS <ref> (Lee et. al 1994) </ref>, for controlling the sequencing and execution of interaction plans, as well as for executing plans for operator load management and for alert prioritization. <p> Using this language, Michigan, with SRI and Orincon, has developed a translator that can convert this specification into the internal representation used by C-based UMPRS <ref> (Lee et al 1994) </ref>, highlighting greater interlingual characteristics than the original ACT formalism. Explicit Elaboration of Implicitly Declared Information. ACTs allow a terse representation of planned procedures by relying heavily on the ACT interpreter having global domain knowledge that spans many of the ACTs. <p> In developing an ACT translator for UMPRS, therefore, we have had to encode directly executable function in special (degenerate) procedures to unify the invocation style. Extensions to ACT still need to be done, to give it a clean, explicit semantics <ref> (Lee & Durfee 1994) </ref>. Extended Meta-Predicate Suite. <p> While this yields quite a bit of flexibility, it also can potentially make larger constructs in a plot difficult to extract or modularize. The more strict use of structuring constructs has been advocated in UMPRS, and in the subsequent development of Structured Circuit Semantics <ref> (Lee & Durfee 1994) </ref>. It is important to reiterate that ACT is intended to be broadly applicable, and so are these improvements.
Reference: <author> Lee, J., Huber, M. J., Durfee, E. H., and Kenny, P. G., </author> <year> 1994. </year> <title> UM-PRS: An Implementation of the Procedural Reasoning System for Multirobot Applications. </title> <booktitle> In Proceedings of the AIAA/NASA Conference on Intelligent Robotics in Field, Factory, Service, and Space, </booktitle> <pages> pages 842-849, </pages> <month> March. </month>
Reference-contexts: A plan generation system, SIPE-2 (Wilkins 1988) from SRI International, for automatically formulating interaction plans given a description of what the operator needs to understand in a scene. A plan execution system, UMPRS <ref> (Lee et. al 1994) </ref>, for controlling the sequencing and execution of interaction plans, as well as for executing plans for operator load management and for alert prioritization. <p> Using this language, Michigan, with SRI and Orincon, has developed a translator that can convert this specification into the internal representation used by C-based UMPRS <ref> (Lee et al 1994) </ref>, highlighting greater interlingual characteristics than the original ACT formalism. Explicit Elaboration of Implicitly Declared Information. ACTs allow a terse representation of planned procedures by relying heavily on the ACT interpreter having global domain knowledge that spans many of the ACTs. <p> In developing an ACT translator for UMPRS, therefore, we have had to encode directly executable function in special (degenerate) procedures to unify the invocation style. Extensions to ACT still need to be done, to give it a clean, explicit semantics <ref> (Lee & Durfee 1994) </ref>. Extended Meta-Predicate Suite. <p> While this yields quite a bit of flexibility, it also can potentially make larger constructs in a plot difficult to extract or modularize. The more strict use of structuring constructs has been advocated in UMPRS, and in the subsequent development of Structured Circuit Semantics <ref> (Lee & Durfee 1994) </ref>. It is important to reiterate that ACT is intended to be broadly applicable, and so are these improvements.
Reference: <author> Lowrance, J. D., </author> <year> 1994. </year> <title> Evidential Reasoning with Gister-CL: A Manual. </title> <booktitle> Artificial Intelligence Center, SRI International, </booktitle> <address> 333 Ravenswood Avenue, Menlo Park, CA, </address> <month> February. </month>
Reference-contexts: A plan execution system, UMPRS (Lee et. al 1994), for controlling the sequencing and execution of interaction plans, as well as for executing plans for operator load management and for alert prioritization. An uncertain reasoning system, GISTER <ref> (Lowrance 1994) </ref> from SRI International, for combining evidence as to the global scene and the specifics of an alert condition to determine prioritization of operator attention direction and associated tasking.
Reference: <author> Smith, R. G., </author> <year> 1980. </year> <title> The Contract Net Protocol: High-level communication and control in a distributed problem solver. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 29(12) </volume> <pages> 1104-1113, </pages> <month> December. </month>
Reference-contexts: Interagent Protocol and Performatives The notion of using message typing and discourse protocols as a means of flagging the intended processing that should be done on received messages is nothing new. Examples range from the venerable Contract Net <ref> (Smith 1980) </ref> to recent multiagent languages such as COOL (Barbenceau and Fox, 1995). While several speech-act-based languages have been proposed over the years, we have adopted and adapted KQML (Finin et al 1994).
Reference: <author> Wilkins, D. E., Myers, K. L., Lowrance, J. D., and Wesley, L. P., </author> <year> 1995. </year> <title> Planning and reacting in uncertain and dynamic environments. </title> <journal> Journal of Experimental and Theoretical AI , 7(1) </journal> <pages> 197-227. </pages>
Reference-contexts: One effort for formulating a more general description of a plan has been undertaken by SRI, in the development of their Cypress system <ref> (Wilkins et al 1995) </ref>. In a nutshell, Cypress combined existing systems for plan generation and for plan execution. <p> Formalism as a Plan Content Language The outcome of this endeavor has included a formalism for expressing plans that satisfies the needs of Cypresss two planning systems, and appears to capture the needs of both generative planning (as embodied by SIPE-2 (Wilkins 1988)) and plan execution (as embodied by PRS-CL <ref> (Wilkins et al 1995) </ref>). In their formalism, an ACT is composed of the following fields: name, cue, precondition, setting, resources, properties, plot, and comment. Each of these fields has content expressed in some form. <p> This is done in the ACT framework, through the use of declarations which define and classify the entities in the world that the plans are manipulating, the methods for doing the manipulations, the outcomes of the manipulations, and so on, captured in a domainspecific ontology.. See <ref> (Wilkins & Myers 1995) </ref> for more details. The ACT Formalism as a Standard Planning Content Language The ACT formalism has provided an excellent starting framework for defining a planning content language.
Reference: <author> Wilkins, D. E. and Myers, K. L., </author> <year> 1995. </year> <title> A common knowledge representation for plan generation and reactive execution. </title> <journal> Journal of Logic and Computation, </journal> <volume> 5(6) </volume> <pages> 731-761. </pages>
Reference-contexts: One effort for formulating a more general description of a plan has been undertaken by SRI, in the development of their Cypress system <ref> (Wilkins et al 1995) </ref>. In a nutshell, Cypress combined existing systems for plan generation and for plan execution. <p> Formalism as a Plan Content Language The outcome of this endeavor has included a formalism for expressing plans that satisfies the needs of Cypresss two planning systems, and appears to capture the needs of both generative planning (as embodied by SIPE-2 (Wilkins 1988)) and plan execution (as embodied by PRS-CL <ref> (Wilkins et al 1995) </ref>). In their formalism, an ACT is composed of the following fields: name, cue, precondition, setting, resources, properties, plot, and comment. Each of these fields has content expressed in some form. <p> This is done in the ACT framework, through the use of declarations which define and classify the entities in the world that the plans are manipulating, the methods for doing the manipulations, the outcomes of the manipulations, and so on, captured in a domainspecific ontology.. See <ref> (Wilkins & Myers 1995) </ref> for more details. The ACT Formalism as a Standard Planning Content Language The ACT formalism has provided an excellent starting framework for defining a planning content language.
Reference: <author> Wilkins , D. E., </author> <year> 1988. </year> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo. </address>
Reference-contexts: Specifically, TAIPE employs the following general architectural and problemsolving technologies to realize a variety of specialized agents: Graphical editing tools for specifying interaction plans by actual end users. A plan generation system, SIPE-2 <ref> (Wilkins 1988) </ref> from SRI International, for automatically formulating interaction plans given a description of what the operator needs to understand in a scene. <p> The Act Formalism as a Plan Content Language The outcome of this endeavor has included a formalism for expressing plans that satisfies the needs of Cypresss two planning systems, and appears to capture the needs of both generative planning (as embodied by SIPE-2 <ref> (Wilkins 1988) </ref>) and plan execution (as embodied by PRS-CL (Wilkins et al 1995)). In their formalism, an ACT is composed of the following fields: name, cue, precondition, setting, resources, properties, plot, and comment. Each of these fields has content expressed in some form.
References-found: 14

