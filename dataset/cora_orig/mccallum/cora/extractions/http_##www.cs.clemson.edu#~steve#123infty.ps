URL: http://www.cs.clemson.edu/~steve/123infty.ps
Refering-URL: http://www.cs.clemson.edu/~steve/CourseWork/455/455index.html
Root-URL: http://www.cs.clemson.edu
Title: One, Two, Three, 1?  
Author: D. E. Stevenson and D. D. Warner 
Note: Figure 1: The Parallax Triangle  
Date: January 6, 1999  
Abstract: The purpose of this module is to examine the effects of finiteness on mathematical computations. The effects are known as errors, which may be a bit prejudicial. These errors occur due to the following sources: * Truncation errors. Using the computer requires that we use an approximate formulation for an exact but infinite formulation. For example, we often use a finite Taylor series instead of the infinite one. The requirement is that an unending process is replace by one that finitely terminates. * Discretization errors. Descretization occurs when an infinite set is replaced by one that is finitely parametrizable. This is not the same thing as truncation. For example, an infinite function space is replaced by a finite one. * Perturbation errors. Because of the approximation errors, we end up with a solution slightly perturbed version of the problem. Thus, the inputs and functions are not computed exactly, causing the program to be slightly altered. * Inferential structure errors. An algorithm has its own unique behavior. Two formulas which are algebraically equivalent may not produce the same answer and therefore cause different decisions to be made. * Rounding errors. Rounding errors are the response the machine to the exact instance at hand. * Bugs. Bugs are a type of error caused by humans. Our goal in this module is to concentrate on two types of errors: (1) trucation errors that occur by changing an infinite formulation to a finite one rounding errors and (2) rounding errors caused by using finite arithmetic. This module also illustrates a particular style of teaching calld problem based learning or PBL. In PBL, we use a problem to direct out investigation; this is in contrast to lecturing, where the instructor gives out 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. H. Wilkinson. </author> <title> Rounding Errors in Algebraic Processes. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1963. </year> <month> 24 </month>
Reference-contexts: This will take us through the mathematical as well as the engineering aspects of computer arithmetic. We (and most other workers) call this system the Wilkinson model after J. H. Wilkinson whose pioneering working was done in the 1950s <ref> [1] </ref>. We use, as everyone knows, the arabic notation 2 . We write numbers in a positional way. Suppose N = d n1 d n2 : : : d 0 d 1 : : : d m represents a number.
References-found: 1

