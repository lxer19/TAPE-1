URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/vis/doc/stcheng_M94_37.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/vis/usrDoc.html
Root-URL: http://www.cs.berkeley.edu
Title: Compiling Verilog into Automata  
Author: Szu-Tsung Cheng Robert K. Brayton 
Note: 1 Supported by Siemens, CA Micro,  
Date: May 18, 1994  
Address: Berkeley, CA 94720  Berkeley, CA 94720  
Affiliation: Computer Science Division Department of Electrical Engineering and Computer Sciences University of California,  Department of Electrical Engineering and Computer Sciences University of California,  Cadence, and Fujitsu  
Abstract-found: 0
Intro-found: 1
Reference: [ABB + 94] <author> Adnan Aziz, Felice Balarin, Robert K. Brayton, Szu-Tsung Cheng, Ramin Ho-jati, Sriram C. Krishnan, Rajeev K. Ranjan, Alberto L. Sangiovanni-Vincentelli, Thomas R. Shiple, Vigyan Singhal, Serdar Tasiran, and Huey-Yih Wang. HSIS: </author> <title> A BDD-based environment for formal verification. </title> <booktitle> In DAC94, </booktitle> <address> San Diego, CA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Verilog also has decorators facilitating the quantitative description of time. This makes it easy to specify delays associated with statements, gates, or modules. blif-mv [BCH + 91], a multi-valued extension of blif, is the input format used by HSIS <ref> [ABB + 94] </ref>, an integrated interactive hierarchical verification/synthesis system. Basic constructs in blif-mv consist of module declaration/instantiation, tables which allow descriptions of nondeterminism, and symbolic latches. At each "clock" cycle, each table updates its outputs according to the inputs it sees until a fix-point is reached.
Reference: [BBC + ] <author> Felice Balarin, Robert K. Brayton, Szu-Tsung Cheng, Desmond A. Kirkpatrick, Alberto L. Sangiovanni-Vincentelli, and Ephrem Wu. </author> <title> A verification tool for real-time systems. </title> <note> Submitted to ICCAD'95. </note>
Reference-contexts: Not only can vl2mv handle un-timed Verilog models, but it can also extract quantitative timing information from a timed Verilog program. The generated timed automata is in blif-mvt <ref> [BBC + ] </ref>, an extension of blif-mv with timing constructs. The organization of the report is as follows. Section 2.1 gives terminology used throughout this report. Section 2.2 describes the synthesizable subset of Verilog that can be handled by vl2mv.
Reference: [BCH + 91] <author> R. K. Brayton, M. Chiodo, R. Hojati, T. Kam, K. Kodandapani, R. P. Kurshan, S. Malik, A. Sangiovanni-Vincentelli, E. M. Sentovich, T. Shiple, K. J. Singh, and H.-Y. Wang. BLIF-MV: </author> <title> An interchange format for design verification and synthesis. </title> <institution> Memorandum UCB/ERL M91/97, University of California at Berkeley, </institution> <year> 1991. </year>
Reference-contexts: Verilog also has decorators facilitating the quantitative description of time. This makes it easy to specify delays associated with statements, gates, or modules. blif-mv <ref> [BCH + 91] </ref>, a multi-valued extension of blif, is the input format used by HSIS [ABB + 94], an integrated interactive hierarchical verification/synthesis system. Basic constructs in blif-mv consist of module declaration/instantiation, tables which allow descriptions of nondeterminism, and symbolic latches.
Reference: [BRB90] <author> K. S. Brace, R. L. Rudell, and R. E. Bryant. </author> <title> Efficient implementation of a bdd package. </title> <booktitle> In Proceedings of the 27th Design Automation Conference. IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: However, huge number of intermediate variables may also decrease the performance of HSIS when reading in blif-mv. 5.2.4 HSIS System Calls For some functions like and, or, add, etc., it is well-known how to build BDDs [Bry86], <ref> [BRB90] </ref> for them efficiently. Users can call supported MDD [KB90] functions directly to speedup the BDD building process. vl2mv can compile and, nand, or, nor, xor, xnor, add, and minus into MDD calls of the form _hsis_&lt;function_name&gt; by giving the compiler option -h.
Reference: [Bry86] <author> R. E. Bryant. </author> <title> Graph based algorithms for boolean function manipulation. </title> <journal> In IEEE Transaction on Computers, C-35(8). IEEE, </journal> <year> 1986. </year>
Reference-contexts: However, huge number of intermediate variables may also decrease the performance of HSIS when reading in blif-mv. 5.2.4 HSIS System Calls For some functions like and, or, add, etc., it is well-known how to build BDDs <ref> [Bry86] </ref>, [BRB90] for them efficiently. Users can call supported MDD [KB90] functions directly to speedup the BDD building process. vl2mv can compile and, nand, or, nor, xor, xnor, add, and minus into MDD calls of the form _hsis_&lt;function_name&gt; by giving the compiler option -h.
Reference: [BY93] <author> Felice Balarin and Gary York. </author> <title> Verilog HDL modeling styles for formal verification. In CHDL. </title> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: Without changing the variable on the left hand side, program execution continues. Variables are updated simultaneously at the 15 very beginning of the next time slot. Non-blocking assignments also provide a way to introduce nondeterminism <ref> [BY93] </ref> on reg variables.
Reference: [Eme90] <author> E. A. Emerson. </author> <title> Temporal and modal logic. </title> <booktitle> In Handbook of Theoretical Computer Science. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: If it can be shown formally that a design satisfies the specifications (which can be expressed in CTL formulae <ref> [Eme90] </ref>, or a set of automata using Verilog + pif), then it can be used as input to a synthesis system to minimize it. Not only can vl2mv handle un-timed Verilog models, but it can also extract quantitative timing information from a timed Verilog program.
Reference: [KB90] <author> Timothy Kam and Robert K. Brayton. </author> <title> Multi-valued decision diagrams. </title> <institution> Memorandum UCB/ERL M90/125, University of California at Berkeley, </institution> <year> 1990. </year>
Reference-contexts: However, huge number of intermediate variables may also decrease the performance of HSIS when reading in blif-mv. 5.2.4 HSIS System Calls For some functions like and, or, add, etc., it is well-known how to build BDDs [Bry86], [BRB90] for them efficiently. Users can call supported MDD <ref> [KB90] </ref> functions directly to speedup the BDD building process. vl2mv can compile and, nand, or, nor, xor, xnor, add, and minus into MDD calls of the form _hsis_&lt;function_name&gt; by giving the compiler option -h.
Reference: [KR78] <author> Brian W. Kernighan and Dennis M Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1978. </year>
Reference-contexts: not known yet, it might be desirable to specify and examine the value of some variables symbolically instead of hard-code them in the first place. vl2mv extends Verilog to allow users to declare symbolic variables using an enumerated type mechanism similar to the enumerated type in the C programming language <ref> [KR78] </ref>. The syntax of an enumerated type declaration is as follows (words enclosed by angle brackets represent nonterminals, + indicates one or more repetitions of the preceding terminal/nonterminal): enum &lt;enum_name&gt; - &lt;enumerator_name&gt;+ - It declares an enumeration name &lt;enum_name&gt;.
Reference: [LB93] <author> William Lam and Robert K. Brayton. </author> <title> Alternating RQ timed automata. </title> <booktitle> In International Conference on Computer Aided Verification, </booktitle> <year> 1993. </year> <month> 50 </month>
Reference-contexts: In addition, how and when to activate each timer for that particular statement raises another problem. Further research is required to address the feasibility of compiling such constructs. RQ timed automata <ref> [LB93] </ref>, [LB94] is a subclass of timed automata which imply the simple path property that makes it efficient to rule out paths which can not meet timing constraints. A lot of practical examples are known to have the simple path property.
Reference: [LB94] <author> William Lam and Robert K. Brayton. </author> <title> Criteria for the simple path property in timed automata. </title> <booktitle> In Computer Aided Verification, </booktitle> <year> 1994. </year>
Reference-contexts: In addition, how and when to activate each timer for that particular statement raises another problem. Further research is required to address the feasibility of compiling such constructs. RQ timed automata [LB93], <ref> [LB94] </ref> is a subclass of timed automata which imply the simple path property that makes it efficient to rule out paths which can not meet timing constraints. A lot of practical examples are known to have the simple path property.
Reference: [Sea92] <author> Ellen M. Sentovish and et al. </author> <title> Sequential circuit design using synthesis and optimization. </title> <booktitle> In Proceedings of IEEE ICCD. IEEE, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: The extracted FSMs are not guaranteed to be "optimal" in any sense (area, speed, or a combination of the two). If it is desired to get an optimal implementation (e.g., a real circuit), then an advanced synthesis system like SIS <ref> [Sea92] </ref> can be applied to the generated FSMs to get a more compact design. Target blif-mv code can also be used for verification against desired properties. We also extend Verilog to make it possible to describe nondeterministic transitions.
Reference: [TM91] <author> Donald E. Thomas and Philip R. Moorby. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer Academic Publishers, Nowell, </publisher> <address> Massachusetts, </address> <year> 1991. </year>
Reference-contexts: Introduction The Verilog <ref> [TM91] </ref> Hardware Description Language (Verilog HDL) is one of the most popular and widely used languages for digital design. Verilog allows mixed-level descriptions of hardware in terms of their static structures as well as dynamic behaviors. <p> For the syntax and more details of Verilog, refer to <ref> [TM91] </ref>. The syntax of the complete synthesizable subset of Verilog for vl2mv can be found in appendix A. 3.1.1 Variable Declaration and Usage Net Variables Net variables are declared through wire declarations. <p> For example, the left hand side Verilog program below is compiled into the right hand side blif-mv table: assign a = x; assign a = y; ) .names x y a - =x 9 In Verilog <ref> [TM91] </ref>, nets cannot be used at the left hand side of procedural assignments (assignments in procedural blocks). However, vl2mv extends Verilog to allow non-blocking procedural assignments with wires as their left hand side variables. This extension is made for two purposes. <p> For example, `include /usr/lib/vl2mv/vlr.h includes file /usr/lib/vl2mv/vlr.h in place where the directive occurs. 5.2 Other vl2mv Features 5.2.1 Compatibility Checking Option -C makes vl2mv accept only those programs using the syntax defined in <ref> [TM91] </ref>. It rejects Verilog extensions defined in section 3.1.1 (e.g. enumerated type declaration for symbolic variable). 5.2.2 Abstraction of Operators By default, high level operators like addition (+), subtraction (-), greater than (&gt;), etc. are compiled into a flattened circuit in place, in the modules where they are used.
Reference: [Ver] <author> Berkeley Verifiers. </author> <title> A property interchange format for verification using hsis. A part of HSIS document. </title> <type> 51 </type>
Reference-contexts: We also extend Verilog to make it possible to describe nondeterministic transitions. This allows us to specify both system and task processes using the same HDL (however, at this point, we still need the help of pif files, Property Interchange Format <ref> [Ver] </ref>, to exclude undesired behavior introduced by abstraction and to specify desired "sink" states and transitions).
References-found: 14

