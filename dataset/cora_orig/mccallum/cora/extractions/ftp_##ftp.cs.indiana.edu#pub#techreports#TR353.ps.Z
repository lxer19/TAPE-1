URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR353.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: Average Time for the Full Pure Literal Rule  
Author: Paul Walton Purdom, Jr., 
Affiliation: Indiana University  
Abstract: The simplified pure literal algorithm solves satisfiability problems by choosing variables in a fixed order and then generating subproblems for various values of the chosen variable. If some value satisfies every relation that depends on the chosen variable, then only the subproblem for that preferred value is generated. Otherwise, a subproblem is generated for every value of the variable. The full pure literal algorithm chooses variables that have a preferred value before choosing those that do not. A recurrence equation is found for the average time used by the full pure literal rule algorithm when solving random conjunctive normal form satisfiability problems. The random problems are characterized by the number of variables (v), the number of clauses (t), and the probability that a literal is in a clause (p). An asymptotic lower bound analysis shows that running time is more than polynomial in v when t increases more rapidly than (ln v) 2 (when p is set to maximize the running time). A numerical study indicates that the results of the lower bound analysis are close to the true results. Thus, the full pure literal rule is faster than the simple pure literal rule (where the polynomial time boundary occurs at t = fi(ln v)) but slower than Franco's infrequent variable algorithm (where the time is polynomial for all p when t = O(v 1=6 )). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Angluin and L. G. Valiant, </author> <title> Fast Probabilistic Algorithms for Hamiltonian Circuits and Matchings, </title> <journal> Journal of Comput. </journal> <note> and System Sciences 18 (1979) pp 155-193. </note>
Reference-contexts: If k is selected so that the sum starts a little before the peak of the binomial distribution (which is at w = pu), then the sum is close to 1 (1 p) u . Using Chernoff bounds <ref> [1] </ref> one has for for any small fi &gt; 0 and k = up (1 + fi) To obtain a simpler lower bound, drop the first term on the right side of the equation for W except at the boundary u = u 0 , v = v 0 .
Reference: 2. <author> Cynthia A. Brown and Paul Walton Purdom Jr. </author> <title> An Average Time Analysis of Backtracking, </title> <note> SIAM J. Comput. 10 (1981) pp 583-593. </note>
Reference-contexts: Both searching and resolution methods can be used on any problem that is formed by the logical and of relations. Previous research on random CNF problems has indicated that search methods are fast when solutions are rare <ref> [2, 15, 18] </ref> or common [3]. Resolution methods are fast when the number of clauses is small [4, 5, 11, 12, 13, 17]. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. <p> Since the analysis was an upper bound analysis, one might wonder whether some simplier combination of techniques would also be fast. Previous analyses show that neither the pure literal rule with fixed search order [4, 11, 12, 13, 17] nor the unit clause rule <ref> [2, 15] </ref> with dynamic search order have all of the good running time properties that he found. There is, however, no previous study of the full pure literal rule algorithm.
Reference: 3. <author> Khaled Bugrara and Paul Walton Purdom, Jr., </author> <title> Average Time Analysis of Clause Order Backtracking (1991). </title>
Reference-contexts: Both searching and resolution methods can be used on any problem that is formed by the logical and of relations. Previous research on random CNF problems has indicated that search methods are fast when solutions are rare [2, 15, 18] or common <ref> [3] </ref>. Resolution methods are fast when the number of clauses is small [4, 5, 11, 12, 13, 17]. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. <p> As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed. <p> See <ref> [3] </ref> for a full proof of a similar result.) If one assumes that V (u; v) is an increasing function of u, then V (u; v) W (u; v), where W is the solution of the recurrence W (u; v) = 2 [1 (1 p) u ] 2v + 2 [1
Reference: 4. <author> Khaled Bugrara, Youfang Pan, and Paul Purdom, </author> <title> Exponential Average Time for the Pure Literal Rule, </title> <note> SIAM J. Comput. 18 (1988) pp 409-418. </note>
Reference-contexts: Previous research on random CNF problems has indicated that search methods are fast when solutions are rare [2, 15, 18] or common [3]. Resolution methods are fast when the number of clauses is small <ref> [4, 5, 11, 12, 13, 17] </ref>. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. The performances of several simple satisfiability algorithms are compared in [16]. <p> The performance of searching combined with the pure literal rule has been carefully studied <ref> [4, 11, 12, 13, 17] </ref>. These studies all assume a fixed order of assigning values to the variables. <p> Since the analysis was an upper bound analysis, one might wonder whether some simplier combination of techniques would also be fast. Previous analyses show that neither the pure literal rule with fixed search order <ref> [4, 11, 12, 13, 17] </ref> nor the unit clause rule [2, 15] with dynamic search order have all of the good running time properties that he found. There is, however, no previous study of the full pure literal rule algorithm. <p> As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed.
Reference: 5. <author> Vasek Chvatal and Endre Szemeredi, </author> <title> Many Hard Examples for Resolution, </title> <note> JACM 35 (1988) pp 759-770. </note>
Reference-contexts: Previous research on random CNF problems has indicated that search methods are fast when solutions are rare [2, 15, 18] or common [3]. Resolution methods are fast when the number of clauses is small <ref> [4, 5, 11, 12, 13, 17] </ref>. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. The performances of several simple satisfiability algorithms are compared in [16].
Reference: 6. <author> Stephen A. Cook, </author> <title> The complexity of Theorem-Proving Procedures, </title> <booktitle> Proc. 3rd ACM Symp. on Theory of Computing, ACM, </booktitle> <address> New York (1971) pp 151-158. </address>
Reference-contexts: 1 Introduction The CNF satisfiability problem <ref> [6] </ref> is the first problem that was proved to be NP-complete is. For this problem set, a problem instance is a predicate. A predicate is the logical and of a series of clauses. A clause is the logical or of a series of literals.
Reference: 7. <author> Martin Davis, George Logemann, and Donald Loveland, </author> <title> A Machine Program for Theorem Proving, </title> <editor> C. </editor> <booktitle> ACM 5 (1962), </booktitle> <pages> pp. 394-397. </pages>
Reference-contexts: The performances of several simple satisfiability algorithms are compared in [16]. Many of the ideas for rapidly solving satisfiability problems are contained in the Davis-Putnam procedure. See [8] for the resolution version and <ref> [7] </ref> for the search version.
Reference: 8. <author> Martin Davis and Hilary Putnam, </author> <title> A Computing Procedure for Quantification Theory, </title> <journal> JACM, </journal> <note> 7 (1960) pp 201-215. </note>
Reference-contexts: The performances of several simple satisfiability algorithms are compared in [16]. Many of the ideas for rapidly solving satisfiability problems are contained in the Davis-Putnam procedure. See <ref> [8] </ref> for the resolution version and [7] for the search version.
Reference: 9. <author> John Franco, </author> <title> On the Occurrence of Null Clauses in Random Instances of Satisfiability, </title> <institution> Indiana University Computer Science Tech. </institution> <note> Report 291 (1989). </note>
Reference-contexts: As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed.
Reference: 10. <author> John Franco, </author> <title> Elimination of Infrequent Variables Improves Average Case Performance of Satisfiability algorithms, </title> <note> SIAM J. Comput. 20 (1991) pp 1119-1127. </note>
Reference-contexts: It is shown that the full version is indeed much faster than the simple version (which uses a fixed search order) when the number of clauses is not too large. Franco <ref> [10] </ref> considered an algorithm whose first phase uses the pure literal rule, the unit clause rule, and a limited form of resolution. Resolution is done on those variables that have exactly one positive occurrence and exactly one negative occurrence. <p> As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed.
Reference: 11. <author> Allen Goldberg, </author> <title> On the Complexity of the Satisfiability Problem, </title> <institution> Courant Computer Science Report No. </institution> <address> 16, New York University, New York. </address>
Reference-contexts: Previous research on random CNF problems has indicated that search methods are fast when solutions are rare [2, 15, 18] or common [3]. Resolution methods are fast when the number of clauses is small <ref> [4, 5, 11, 12, 13, 17] </ref>. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. The performances of several simple satisfiability algorithms are compared in [16]. <p> The performance of searching combined with the pure literal rule has been carefully studied <ref> [4, 11, 12, 13, 17] </ref>. These studies all assume a fixed order of assigning values to the variables. <p> Since the analysis was an upper bound analysis, one might wonder whether some simplier combination of techniques would also be fast. Previous analyses show that neither the pure literal rule with fixed search order <ref> [4, 11, 12, 13, 17] </ref> nor the unit clause rule [2, 15] with dynamic search order have all of the good running time properties that he found. There is, however, no previous study of the full pure literal rule algorithm.
Reference: 12. <author> Allen Goldberg, </author> <title> Average Case Complexity of the Satisfiability Problem, </title> <booktitle> Proc. Fourth Workshop on automated Deduction, </booktitle> <year> 1979, </year> <pages> pp 1-6. </pages>
Reference-contexts: Previous research on random CNF problems has indicated that search methods are fast when solutions are rare [2, 15, 18] or common [3]. Resolution methods are fast when the number of clauses is small <ref> [4, 5, 11, 12, 13, 17] </ref>. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. The performances of several simple satisfiability algorithms are compared in [16]. <p> The performance of searching combined with the pure literal rule has been carefully studied <ref> [4, 11, 12, 13, 17] </ref>. These studies all assume a fixed order of assigning values to the variables. <p> Since the analysis was an upper bound analysis, one might wonder whether some simplier combination of techniques would also be fast. Previous analyses show that neither the pure literal rule with fixed search order <ref> [4, 11, 12, 13, 17] </ref> nor the unit clause rule [2, 15] with dynamic search order have all of the good running time properties that he found. There is, however, no previous study of the full pure literal rule algorithm.
Reference: 13. <author> Allen Goldberg, Paul Purdom, Cynthia Brown, </author> <title> Average Time Analyses of Simplified Davis-Putnam Procedures, </title> <journal> Information Processing Letters, </journal> <note> 15 (1982) pp 72-75. Printing errors corrected in 16 (1983) pp 213. </note>
Reference-contexts: Previous research on random CNF problems has indicated that search methods are fast when solutions are rare [2, 15, 18] or common [3]. Resolution methods are fast when the number of clauses is small <ref> [4, 5, 11, 12, 13, 17] </ref>. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. The performances of several simple satisfiability algorithms are compared in [16]. <p> The performance of searching combined with the pure literal rule has been carefully studied <ref> [4, 11, 12, 13, 17] </ref>. These studies all assume a fixed order of assigning values to the variables. <p> Since the analysis was an upper bound analysis, one might wonder whether some simplier combination of techniques would also be fast. Previous analyses show that neither the pure literal rule with fixed search order <ref> [4, 11, 12, 13, 17] </ref> nor the unit clause rule [2, 15] with dynamic search order have all of the good running time properties that he found. There is, however, no previous study of the full pure literal rule algorithm.
Reference: 14. <author> Kazuo Iwama, </author> <title> CNF Satisfiability Test by Counting and Polynomial Average Time, </title> <note> SIAM J. Comput. 18 (1989) pp 385-391. </note>
Reference-contexts: As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed.
Reference: 15. <author> Paul W. Purdom, </author> <title> Search Rearrangement Backtracking and Polynomial Average Time, </title> <note> Artificial Intelligence 21 (1983) pp 117-133. </note>
Reference-contexts: Both searching and resolution methods can be used on any problem that is formed by the logical and of relations. Previous research on random CNF problems has indicated that search methods are fast when solutions are rare <ref> [2, 15, 18] </ref> or common [3]. Resolution methods are fast when the number of clauses is small [4, 5, 11, 12, 13, 17]. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. <p> Since the analysis was an upper bound analysis, one might wonder whether some simplier combination of techniques would also be fast. Previous analyses show that neither the pure literal rule with fixed search order [4, 11, 12, 13, 17] nor the unit clause rule <ref> [2, 15] </ref> with dynamic search order have all of the good running time properties that he found. There is, however, no previous study of the full pure literal rule algorithm. <p> As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed.
Reference: 16. <author> Paul W. Purdom, </author> <title> A Survey of Average Time Analyses of Satisfiability Algorithms, Journal of Information Processing 13 (1990) pp 449-455. This originally appeared as Random Satisfiability Problems, </title> <booktitle> Proc. of the International Workshop on Discrete Algorithms and Complexity, The Institute of Electronics, Information and Communication Engineers, </booktitle> <address> Tokyo (1989) pp 253-259. </address>
Reference-contexts: Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. The performances of several simple satisfiability algorithms are compared in <ref> [16] </ref>. Many of the ideas for rapidly solving satisfiability problems are contained in the Davis-Putnam procedure. See [8] for the resolution version and [7] for the search version. <p> As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed. <p> Figure 1 shows the results of these calculations. Figure 2 shows the results of similar calculations for the version of the full pure literal rule that ignores tautological clauses. The reader may wish to compare this figure with the figures in <ref> [16] </ref>, where the same data is given for other algorithms. The simple pure literal algorithm has similarly shaped contours, but the full versions of the algorithm remains fast for much large values of t. 11 p 10 10 10 v = 50 t Fig. 1. <p> When the number of variables is large, Franco's improvement to the pure literal rule is much faster. For random problems where the probability is not near the value that results in hard problems and t is large backtracking algorithms are fast <ref> [16] </ref>. In practice, the user does not need to decide between these various algorithms. One can include backtracking, the full pure literal rule, and Franco's limited resolution all in one algorithm. The resulting 14 p 15 10 5 v = 50 t Fig. 3.
Reference: 17. <author> Paul Walton Purdom, Jr. and Cynthia A. Brown, </author> <title> The Pure Literal Rule and Polynomial Average Time, </title> <note> SIAM J. Comput. 14 (1985) pp 943-953. </note>
Reference-contexts: Previous research on random CNF problems has indicated that search methods are fast when solutions are rare [2, 15, 18] or common [3]. Resolution methods are fast when the number of clauses is small <ref> [4, 5, 11, 12, 13, 17] </ref>. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. The performances of several simple satisfiability algorithms are compared in [16]. <p> The performance of searching combined with the pure literal rule has been carefully studied <ref> [4, 11, 12, 13, 17] </ref>. These studies all assume a fixed order of assigning values to the variables. <p> Since the analysis was an upper bound analysis, one might wonder whether some simplier combination of techniques would also be fast. Previous analyses show that neither the pure literal rule with fixed search order <ref> [4, 11, 12, 13, 17] </ref> nor the unit clause rule [2, 15] with dynamic search order have all of the good running time properties that he found. There is, however, no previous study of the full pure literal rule algorithm. <p> As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed. <p> They are V (0; a) = 0; V (u; 0) = 0: (57) This recurrence is similar to the recurrence for the simple pure literal rule algorithm <ref> [17] </ref>. The recursive term is identical, but for the full algorithm, the nonrecursive term, 2 [1 (1 p) u ] 2v , is small for certain values of v, p, and u. <p> The analysis of the simple pure literal rule algorithm combined with the fact that the full algorithm has less nodes shows that the t value is (n ln v) <ref> [17] </ref>. In particular, a t value of fi (n (ln v) b ) for b near 1, would be expected to give coefficients in Table 2 that approached 0.
Reference: 18. <author> Paul W. Purdom and Cynthia A. Brown, </author> <title> Polynomial-Average-Time Satisfiability Problems, </title> <note> Information Sciences 41 (1987) pp 23-42. 16 </note>
Reference-contexts: Both searching and resolution methods can be used on any problem that is formed by the logical and of relations. Previous research on random CNF problems has indicated that search methods are fast when solutions are rare <ref> [2, 15, 18] </ref> or common [3]. Resolution methods are fast when the number of clauses is small [4, 5, 11, 12, 13, 17]. Both types of methods are fast when solutions are extremely rare or extremely common, or when the number of clauses is extremely small. <p> As a result more satisfiability algorithms have been analyzed with this model than with any other. The problems generated by this model can be either easy or hard (for the algorithms that have been analyzed so far) depending on how the parameters are set <ref> [3, 4, 9, 10, 14, 15, 16, 17, 18] </ref>. The model is useful for comparing strengths and weaknesses of various satisfiability algorithms. 4 Probabilistic Analysis In this section, a recurrence equation for the average running time of the Full Pure Literal Algorithm is developed.
References-found: 18

