URL: http://www.cs.utah.edu/~ganesh/asyncpapers/iccd94.ps.Z
Refering-URL: http://www.cs.utah.edu/~ganesh/asyncpapers.html
Root-URL: 
Title: Peephole Optimization of Asynchronous Macromodule Networks  
Author: Ganesh C. Gopalakrishnan Prabhakar N. Kudva, Erik L. Brunvand 
Address: Salt Lake City, UT 84112  
Affiliation: Dept. of Computer Science, University of Utah,  
Abstract: Most high level synthesis tools for asynchronous circuits take descriptions in concurrent hardware description languages and generate networks of macromodules or handshake components. In this paper we describe a peephole optimizer for such macromodule networks that often effects area and/or time improvements. Our optimizer first deduces an equivalent black-box behavior for the given network of macromodules using Dill's trace-theoretic parallel composition operator. It then applies a new procedure called Burst-mode reduction to obtain burst-mode machines, which can be synthesized into gate networks using available tools. Since burst-mode reduction can be applied to any macromodule network that is delay-insensitive as well as deterministic, our optimizer covers a significant number of asynchronous circuits, especially those generated by asynchronous high level synthesis tools. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ivan Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1989. </year> <note> The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: 1 Introduction Asynchronous systems have been shown to exhibit a number of inherent advantages <ref> [1] </ref>. In order to facilitate the design of asynchronous circuits, several groups [2, 3, 4] have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules [5, 1, 6] or handshake components [7]. <p> 1 Introduction Asynchronous systems have been shown to exhibit a number of inherent advantages [1]. In order to facilitate the design of asynchronous circuits, several groups [2, 3, 4] have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules <ref> [5, 1, 6] </ref> or handshake components [7]. The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks). Our optimizer synthesizes custom replacements for these subnetworks. <p> Consider the example shown in Figure 1. This subnetwork accepts a four-cycle handshake sequence <ref> [1] </ref> on r4 and a4 and generates a two-cycle handshake sequence [1] on r2 and a2, with the property that some of the events in these handshake sequences can overlap in order to provide a high degree of concurrency, as shown by the Petri-net in with. <p> Consider the example shown in Figure 1. This subnetwork accepts a four-cycle handshake sequence <ref> [1] </ref> on r4 and a4 and generates a two-cycle handshake sequence [1] on r2 and a2, with the property that some of the events in these handshake sequences can overlap in order to provide a high degree of concurrency, as shown by the Petri-net in with.
Reference: [2] <author> Jaco Haans, Kees van Berkel, Ad Peeters, and Frits Schalij. </author> <title> Asynchronous multipliers as combinational handshake circuits. </title> <booktitle> In Proceedings of the IFIP Working Conference on Asynchronous Design Methods, </booktitle> <address> Manchester, England, 31 March - 2 April, </address> <year> 1993, 1993. </year> <note> Participant's edition. </note>
Reference-contexts: 1 Introduction Asynchronous systems have been shown to exhibit a number of inherent advantages [1]. In order to facilitate the design of asynchronous circuits, several groups <ref> [2, 3, 4] </ref> have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules [5, 1, 6] or handshake components [7]. The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks).
Reference: [3] <author> Erik Brunvand and Robert F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In International Conference on Computer Design (IC-CAD), IEEE, </booktitle> <pages> pages 262-265, </pages> <month> nov </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Asynchronous systems have been shown to exhibit a number of inherent advantages [1]. In order to facilitate the design of asynchronous circuits, several groups <ref> [2, 3, 4] </ref> have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules [5, 1, 6] or handshake components [7]. The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks).
Reference: [4] <author> Venkatesh Akella and Ganesh Gopalakrishnan. SHILPA: </author> <title> A High-Level Synthesis System for Self-Timed Circuits. </title> <booktitle> In International Conference on Computer-aided Design, </booktitle> <volume> ICCAD 92, </volume> <pages> pages 587-591, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Asynchronous systems have been shown to exhibit a number of inherent advantages [1]. In order to facilitate the design of asynchronous circuits, several groups <ref> [2, 3, 4] </ref> have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules [5, 1, 6] or handshake components [7]. The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks).
Reference: [5] <author> S. M. Ornstein, M. J. Stucki, and W. A. Clark. </author> <title> A functional description of macromodules. </title> <booktitle> In Spring Joint Computer Conference. AFIPS, </booktitle> <year> 1967. </year>
Reference-contexts: 1 Introduction Asynchronous systems have been shown to exhibit a number of inherent advantages [1]. In order to facilitate the design of asynchronous circuits, several groups [2, 3, 4] have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules <ref> [5, 1, 6] </ref> or handshake components [7]. The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks). Our optimizer synthesizes custom replacements for these subnetworks.
Reference: [6] <author> Erik Brunvand. </author> <title> A cell set for self-timed design using actel FPGAs. </title> <type> Technical Report 91-013, </type> <institution> Dept. of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Asynchronous systems have been shown to exhibit a number of inherent advantages [1]. In order to facilitate the design of asynchronous circuits, several groups [2, 3, 4] have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules <ref> [5, 1, 6] </ref> or handshake components [7]. The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks). Our optimizer synthesizes custom replacements for these subnetworks.
Reference: [7] <author> Kees van Berkel. </author> <title> Handshake Circuits: An Asynchronous Architecture for VLSI Programming. </title> <publisher> Cam-bridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: In order to facilitate the design of asynchronous circuits, several groups [2, 3, 4] have developed high level synthesis tools that translate concurrent program-like descriptions (semi-) automatically into a network of macromodules [5, 1, 6] or handshake components <ref> [7] </ref>. The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks). Our optimizer synthesizes custom replacements for these subnetworks. The peephole optimization problem for macromodule networks has been studied by Brunvand [8] as well as van Berkel [9].
Reference: [8] <author> Erik Brunvand. </author> <title> Translating Concurrent Communicating Programs into Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks). Our optimizer synthesizes custom replacements for these subnetworks. The peephole optimization problem for macromodule networks has been studied by Brunvand <ref> [8] </ref> as well as van Berkel [9]. Both Brunvand and van Berkel propose optimization rules to translate macromodule networks into more area- and time-efficient macromodule networks that are refinements of the original networks in a formal sense [10, 9].
Reference: [9] <author> Kees van Berkel. </author> <title> Handshake circuits: an intermediary between communicating processes and VLSI. </title> <type> PhD thesis, </type> <institution> Philips Research Laboratories, Eindhoven, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: The macromodule networks generated by these tools often contain repeated occurrences of the same macromodule subnetwork (also observed in hand-designed macromodule networks). Our optimizer synthesizes custom replacements for these subnetworks. The peephole optimization problem for macromodule networks has been studied by Brunvand [8] as well as van Berkel <ref> [9] </ref>. Both Brunvand and van Berkel propose optimization rules to translate macromodule networks into more area- and time-efficient macromodule networks that are refinements of the original networks in a formal sense [10, 9]. <p> The peephole optimization problem for macromodule networks has been studied by Brunvand [8] as well as van Berkel [9]. Both Brunvand and van Berkel propose optimization rules to translate macromodule networks into more area- and time-efficient macromodule networks that are refinements of the original networks in a formal sense <ref> [10, 9] </ref>. In this paper, we take the different approach of translating macromodule networks into burst-mode machinesa sub-class of multiple-input change machines.
Reference: [10] <author> Ganesh Gopalakrishnan, Nick Michell, Erik Brun-vand, and Steven M. Nowick. </author> <title> A correctness criterion for asynchronous circuit verification and optimization. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <note> 1992. Accepted for Publication. </note>
Reference-contexts: The peephole optimization problem for macromodule networks has been studied by Brunvand [8] as well as van Berkel [9]. Both Brunvand and van Berkel propose optimization rules to translate macromodule networks into more area- and time-efficient macromodule networks that are refinements of the original networks in a formal sense <ref> [10, 9] </ref>. In this paper, we take the different approach of translating macromodule networks into burst-mode machinesa sub-class of multiple-input change machines.
Reference: [11] <author> Al Davis, Bill Coates, and Ken Stevens. </author> <title> The Post Office Experience: Designing a Large Asynchronous Chip. In T.N. </title> <editor> Mudge, V. Milutinovic, and L. Hunter, editors, </editor> <booktitle> Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, </booktitle> <volume> Volume 1, </volume> <pages> pages 409-418, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: In recent years, numerous automatic synthesis tools 1fl Supported in part by NSF Award MIP-9215878 to translate burst-mode machine descriptions into hazard-free gate-level networks have been developed by a number of researchers including Davis et. al. <ref> [11] </ref>, Nowick et. al. [12, 13], and Yun et. al. [14]. <p> After power-up, the network must be quiescenti.e., it must not produce any output signal transitions without first consuming input signal transitions. Whenever quiescent, the network must first await a collection of one or more high-going or low-going input signal transitions (i.e., an input burst <ref> [11, 12] </ref>) to arrive in some order. After absorbing the input-burst, the network should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [11, 12]) in some order. <p> a collection of one or more high-going or low-going input signal transitions (i.e., an input burst <ref> [11, 12] </ref>) to arrive in some order. After absorbing the input-burst, the network should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [11, 12]) in some order. The production of all the transitions of an output-burst should be an indication that the network has attained quiescence. This mode of interaction between the network and its environment is called the burst-mode behavior, which is a special case of fundamental-mode [15] operation. <p> Finally, the optimizer converts the EISG into a burst-mode machine using our algorithm `Burst-mode reduction' (detailed later), and synthesizes the resulting burst-mode machine using an already available tool (e.g., see <ref> [13, 14, 11] </ref>). <p> Burst-mode machines are Mealy-style machines in which every transition is labeled with pairs I=O where I is a non-empty set of polarized signal transitions called the input burst, and O is the output burst. Contrary to the original definition <ref> [11] </ref>, we require that O be non-empty, which is consistent with our assumption of delay insensitivity of macromodules. The environment can also be given a burst-mode specification by mirroring [16]. The network should also be initially quiescent, and should attain quiescence after processing every successive input burst.
Reference: [12] <author> Stephen Nowick. </author> <title> Automatic Synthesis of Burst-mode Asynchronous Controllers. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1993. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: In recent years, numerous automatic synthesis tools 1fl Supported in part by NSF Award MIP-9215878 to translate burst-mode machine descriptions into hazard-free gate-level networks have been developed by a number of researchers including Davis et. al. [11], Nowick et. al. <ref> [12, 13] </ref>, and Yun et. al. [14]. <p> After power-up, the network must be quiescenti.e., it must not produce any output signal transitions without first consuming input signal transitions. Whenever quiescent, the network must first await a collection of one or more high-going or low-going input signal transitions (i.e., an input burst <ref> [11, 12] </ref>) to arrive in some order. After absorbing the input-burst, the network should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [11, 12]) in some order. <p> a collection of one or more high-going or low-going input signal transitions (i.e., an input burst <ref> [11, 12] </ref>) to arrive in some order. After absorbing the input-burst, the network should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [11, 12]) in some order. The production of all the transitions of an output-burst should be an indication that the network has attained quiescence. This mode of interaction between the network and its environment is called the burst-mode behavior, which is a special case of fundamental-mode [15] operation.
Reference: [13] <author> Steven M. Nowick, Kenneth Y. Yun, and David L. Dill. </author> <title> Practical Asynchronous Controller Design. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <pages> pages 341-345, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In recent years, numerous automatic synthesis tools 1fl Supported in part by NSF Award MIP-9215878 to translate burst-mode machine descriptions into hazard-free gate-level networks have been developed by a number of researchers including Davis et. al. [11], Nowick et. al. <ref> [12, 13] </ref>, and Yun et. al. [14]. <p> Finally, the optimizer converts the EISG into a burst-mode machine using our algorithm `Burst-mode reduction' (detailed later), and synthesizes the resulting burst-mode machine using an already available tool (e.g., see <ref> [13, 14, 11] </ref>).
Reference: [14] <author> Kenneth Y. Yun, David L. Dill, and Steven M. Now-ick. </author> <title> Synthesis of 3d asynchronous state machines. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <pages> pages 346-350, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In recent years, numerous automatic synthesis tools 1fl Supported in part by NSF Award MIP-9215878 to translate burst-mode machine descriptions into hazard-free gate-level networks have been developed by a number of researchers including Davis et. al. [11], Nowick et. al. [12, 13], and Yun et. al. <ref> [14] </ref>. We pick burst-mode machines as the target primarily based on their demonstrated high efficiency in large applications. 2 Illustration of Our Approach In order for our peephole-optimizer to be applicable on a network, the joint behavior of the unoptimized network and its environment must obey the following restrictions. <p> Finally, the optimizer converts the EISG into a burst-mode machine using our algorithm `Burst-mode reduction' (detailed later), and synthesizes the resulting burst-mode machine using an already available tool (e.g., see <ref> [13, 14, 11] </ref>). <p> Now we can perform Burst-mode reduction, which retains only the heavy arrows in Figure 2, and constructs the Burst-mode machine shown. We can ignore the dashed arrows because of the assumption of delay insensitivity (for reasons given later). Finally, we can synthesize the burst-mode machine (using Yun's tool <ref> [14] </ref>, in our case) to obtain logic equations shown in the figure. Burst-mode machines are Mealy-style machines in which every transition is labeled with pairs I=O where I is a non-empty set of polarized signal transitions called the input burst, and O is the output burst. <p> To obtain the gate count of an un-optimized network, the gate counts of the macromodules used in that network were added up. The gate count of the optimized network was obtained from the AND/OR realization that Yun's tool <ref> [14] </ref> produces. In this table, the circuits Call-C Idiom, Simple GVT (part 1 and 2), Control-Block Sharing, and Call3-Merge are various networks produced by the Occam or SHILPA compilers, and decision-wait is a primitive similar to a generalized C-element. Notice that our optimizer achieves significant optimization for completion trees.
Reference: [15] <author> Stephen H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> John-Wiley, </publisher> <year> 1969. </year>
Reference-contexts: The production of all the transitions of an output-burst should be an indication that the network has attained quiescence. This mode of interaction between the network and its environment is called the burst-mode behavior, which is a special case of fundamental-mode <ref> [15] </ref> operation. The optimizer first obtains the overall behavior of the macromodule subnetwork being optimized using the composition operator on trace structures [16]. The behavior inferred in this fashion leaves out combinations of behaviors of the submodules that can never arise, or can lead to internal hazards.
Reference: [16] <author> David L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-independent Circuits. </title> <publisher> MIT Press, </publisher> <year> 1989. </year> <note> An ACM Distinguished Dissertation. </note>
Reference-contexts: This mode of interaction between the network and its environment is called the burst-mode behavior, which is a special case of fundamental-mode [15] operation. The optimizer first obtains the overall behavior of the macromodule subnetwork being optimized using the composition operator on trace structures <ref> [16] </ref>. The behavior inferred in this fashion leaves out combinations of behaviors of the submodules that can never arise, or can lead to internal hazards. The inferred behavior is converted into an Encoded Interface State Graph (EISG) [17]. <p> Contrary to the original definition [11], we require that O be non-empty, which is consistent with our assumption of delay insensitivity of macromodules. The environment can also be given a burst-mode specification by mirroring <ref> [16] </ref>. The network should also be initially quiescent, and should attain quiescence after processing every successive input burst. Finally, the network must be DI. Udding [18] has provided four necessary and sufficient conditions that characterize delay insensitivity.
Reference: [17] <author> Ivan Sutherland and Bob Sproull. </author> <title> Chapter 6 and chapter 7 of ssa notes # 4702 and # 4703, volume 1, on interface state graphs. </title> <type> Technical memo, Sutherland, </type> <institution> Sproull, and Associates, </institution> <year> 1986. </year>
Reference-contexts: The behavior inferred in this fashion leaves out combinations of behaviors of the submodules that can never arise, or can lead to internal hazards. The inferred behavior is converted into an Encoded Interface State Graph (EISG) <ref> [17] </ref>. EISGs are automata that label their state transitions with polarized signal transitions (e.g., a rising (a+), b falling (b-), etc.).
Reference: [18] <author> Jan Tijmen Udding. </author> <title> A formal model for defining and classifying delay-insensitive circuits and systems. </title> <journal> Distributed Computing, </journal> (1):197-204, 1986. 
Reference-contexts: The environment can also be given a burst-mode specification by mirroring [16]. The network should also be initially quiescent, and should attain quiescence after processing every successive input burst. Finally, the network must be DI. Udding <ref> [18] </ref> has provided four necessary and sufficient conditions that characterize delay insensitivity.
Reference: [19] <author> Steven Burns and Alain Martin. </author> <title> Performance analysis and optimization of asynchronous circuits. </title> <editor> In Carlo Sequin, editor, </editor> <booktitle> Advanced Research in VLSI : Proceedings of the 1991 University of California Santa Cruz Conference, </booktitle> <pages> pages 71-86. </pages> <publisher> The MIT Press, </publisher> <year> 1991. </year> <note> ISBN 0-262-19308-6. </note>
Reference-contexts: Notice that our optimizer achieves significant optimization for completion trees. In obtaining speed estimates, we focussed on cycle time <ref> [19] </ref>, measured by closing off the I/O ports of the asynchronous circuit (modulo the burst-mode behavior) thus turning it into an oscillator, and measuring the speed using a unit-delay simulator. More realistic examples as well as measurement techniques are under exploration.
References-found: 19

