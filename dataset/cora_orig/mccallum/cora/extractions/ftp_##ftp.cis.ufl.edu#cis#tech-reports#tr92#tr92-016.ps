URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-016.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: The Interval Skip List: A Data Structure for Finding All Intervals That Overlap a Point  
Author: Eric N. Hanson Theodore Johnson 
Date: 16 June 1992  
Address: Gainesville, FL 32611  
Affiliation: Computer and Information Sciences Department University of Florida  
Pubnum: UF-CIS-92-016  
Abstract: A problem that arises in computational geometry, pattern matching, and other applications is the need to quickly determine which of a collection of intervals overlap a point. Requests of this type are called stabbing queries. A recently discovered randomized data structure called the skip list can maintain ordered sets efficiently, just as balanced binary search trees can, but is much simpler to implement than balanced trees. This paper introduces an extension of the skip list called the interval skip list, or IS-list, to support interval indexing. The IS-list allows stabbing queries and dynamic insertion and deletion of intervals. A stabbing query using an IS-list containing n intervals takes an expected time of O(log n). Inserting or deleting an interval in an IS-list takes an expected time of O(log 2 n) if the interval endpoints are chosen from a continuous distribution. Moreover, the IS-list inherits much of the simplicity of the skip list it can be implemented in a relatively small amount of high-level language code compared with dynamic interval indexes based on balanced trees.
Abstract-found: 1
Intro-found: 1
Reference: [AVL62] <author> G. M. Adel'son-Vel'skii and E. M. Landis. </author> <title> An algorithm for the organization of information. </title> <journal> Soviet Math. Dokl., </journal> <volume> 3, </volume> <year> 1962. </year> <month> 15 </month>
Reference-contexts: The variance of the search times is also quite low, making the probability that a search will take significantly longer than log n time vanishingly small. Comparing actual implementations of skip lists and AVL trees <ref> [AVL62] </ref>, skip lists perform as well as or better than highly-tuned non-recursive implementations of AVL trees, yet programmers tend to agree that skip lists are significantly easier to implement than AVL trees [Pug90].
Reference: [Ede83a] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections: Part I. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 13(3-4):209-219, </volume> <year> 1983. </year>
Reference-contexts: The segment tree works well in a static environment, but is not adequate when it is necessary to dynamically add and delete intervals in the tree while processing queries. Another data structure that can be used to process stabbing queries is the interval tree <ref> [Ede83a, Ede83b] </ref>. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. A data structure that can index intervals dynamically is the R-tree [Gut84].
Reference: [Ede83b] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections: Part II. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 13(3-4):221-229, </volume> <year> 1983. </year>
Reference-contexts: The segment tree works well in a static environment, but is not adequate when it is necessary to dynamically add and delete intervals in the tree while processing queries. Another data structure that can be used to process stabbing queries is the interval tree <ref> [Ede83a, Ede83b] </ref>. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. A data structure that can index intervals dynamically is the R-tree [Gut84].
Reference: [Fel70] <author> W. Feller. </author> <title> An Introduction to Probability Theory and Its Applications, Vol. II. </title> <publisher> John Wiley, </publisher> <year> 1970. </year>
Reference-contexts: The endpoints of the interval are uniformly randomly chosen, so that the joint distribution of (a; b) has the distribution of a two element order statistic. The theory of order statistics <ref> [Fel70] </ref> tells us that the density of the joint distribution g (a; b) is a constant 2 in the region b 2 [0; 1], a 2 [0; b]. Let us define w 1 and w 2 to be the lower and higher endpoints of e w .
Reference: [GMW83] <author> Gaston H. Gonnet, J. Ian Munro, and Derick Wood. </author> <title> Direct dynamic strucutures for some line segment problems. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 23, </volume> <year> 1983. </year>
Reference-contexts: A data structure closely related to the IBS-tree called the stabbing tree has been developed to find the stabbing number for a point given a collection of intervals <ref> [GMW83] </ref>. The stabbing number is the number of intervals that overlap a point. In contrast, the IBS-tree and the IS-list return a stabbing set containing all the intervals overlapping the query point, not just the number.
Reference: [Gut84] <author> A. Guttman. R-trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proceedings of the 1984 ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1984. </year>
Reference-contexts: Another data structure that can be used to process stabbing queries is the interval tree [Ede83a, Ede83b]. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. A data structure that can index intervals dynamically is the R-tree <ref> [Gut84] </ref>. R-trees are a multidimensional extension of B-trees in which each tree node contains a set of possibly overlapping n-dimensional rectangles. Subtrees of each index node contain only data that lies within a containing rectangle in the index node.
Reference: [HC90] <author> Eric N. Hanson and Moez Chaabouni. </author> <title> The IBS tree: A data structure for finding all intervals that overlap a point. </title> <type> Technical Report WSU-CS-90-11, </type> <institution> Wright State University, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: The interval binary search tree (IBS-tree) can handle stabbing queries, and can be balanced more easily and is easier to implement than the priority search tree, although it requires O (n log n) storage <ref> [HC90] </ref>. We conjecture that balanced IBS-trees require O (log n) time for searching and O (log 2 n) average time for insertion and deletion, though a definitive performance analysis has not been done.
Reference: [McC85] <author> Edward M. McCreight. </author> <title> Priority search trees. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(2) </volume> <pages> 257-278, </pages> <year> 1985. </year>
Reference-contexts: Another data structure which solves the stabbing query problem efficiently (among others), and does allow dynamic insertion and deletion of intervals is the priority search tree <ref> [McC85] </ref>. An advantage of the priority search tree is that it requires only O (n) space to index n intervals. However, the priority search tree in its balanced form is very complex to implement [Wir86].
Reference: [Pug89] <author> William Pugh. </author> <title> A skip list cookbook. </title> <type> Technical Report CS-TR-2286, </type> <institution> Dept. of Computer Science, Univ. of Maryland, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: For a full description of the algorithms for maintaining skip lists and skip lists extended to support additional capabilities such as searching with fingers, efficient merging, finding the kth item in a list etc. the reader is referred to <ref> [Pug90, Pug89] </ref>. The performance of skip lists is quite similar to that of balanced binary search trees. The expected value of times for searching, insertion and deletion in a skip list with n elements are all O (log n).
Reference: [Pug90] <author> William Pugh. </author> <title> Skip lists: A probabilistic alternative to balanced trees. </title> <journal> Communications of the ACM, </journal> <volume> 33(6), </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: Queries of this kind are called stabbing queries [Sam90]. This paper introduces a data structure called the interval skip list (IS-list), which is designed to handle stabbing queries efficiently. The IS-list is an extension of the randomized list structure known as the skip list recently discovered by Pugh <ref> [Pug90] </ref>. In Section 2, other methods for solving stabbing queries are discussed. Section 3 describes the interval skip list data structure and methods for searching and updating it. Section 4 gives an analysis of the complexity of algorithms for manipulating IS-lists. <p> The IS-list can accommodate points as well as open and closed intervals with inclusive and exclusive boundaries. We will review the skip list data structure <ref> [Pug90] </ref> and then discuss the extensions needed to index intervals. 3.1 Review of Skip Lists The skip list is similar to a linked list, except that each node on the list can have one or more forward pointers instead of just one forward pointer. <p> For a full description of the algorithms for maintaining skip lists and skip lists extended to support additional capabilities such as searching with fingers, efficient merging, finding the kth item in a list etc. the reader is referred to <ref> [Pug90, Pug89] </ref>. The performance of skip lists is quite similar to that of balanced binary search trees. The expected value of times for searching, insertion and deletion in a skip list with n elements are all O (log n). <p> Comparing actual implementations of skip lists and AVL trees [AVL62], skip lists perform as well as or better than highly-tuned non-recursive implementations of AVL trees, yet programmers tend to agree that skip lists are significantly easier to implement than AVL trees <ref> [Pug90] </ref>. <p> The next step is to start at A, search for B, and place markers for (A,B) in a way that satisfies the marker invariant. To place an interval end-point A into the list, the first step is to use the standard interval skip list insertion algorithm <ref> [Pug90] </ref> to insert A. During this step one must save a pointer to the new IS-list node containing A (call this N ) and save the updated array containing pointers to the nodes with pointers to N that had to be adjusted when A was inserted.
Reference: [Sam90] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addision Wesley, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction An important problem that arises in a number of computer applications is the need to find all members of a set of intervals that overlap a particular point. Queries of this kind are called stabbing queries <ref> [Sam90] </ref>. This paper introduces a data structure called the interval skip list (IS-list), which is designed to handle stabbing queries efficiently. The IS-list is an extension of the randomized list structure known as the skip list recently discovered by Pugh [Pug90]. <p> This algorithm has a search complexity of O (n). A more sophisticated approach is based on the segment tree <ref> [Sam90] </ref>. To form a segment tree, the set of all end points of intervals in Q is formed, and an ordered complete binary tree is built that has the end points as its leaves.
Reference: [Wir86] <author> Nicklaus Wirth. </author> <title> Algorithms + Data Structures = Programs. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year> <month> 16 </month>
Reference-contexts: An advantage of the priority search tree is that it requires only O (n) space to index n intervals. However, the priority search tree in its balanced form is very complex to implement <ref> [Wir86] </ref>. In addition, for a priority search tree to handle a set of intervals with non-unique lower bounds, a special transformation must be used to transform the set of intervals into one where the intervals have unique lower bounds.
References-found: 12

