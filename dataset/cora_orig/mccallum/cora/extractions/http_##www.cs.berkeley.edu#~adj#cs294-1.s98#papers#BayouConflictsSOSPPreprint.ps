URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/papers/BayouConflictsSOSPPreprint.ps
Refering-URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/plan.html
Root-URL: 
Note: Preprint of paper to appear in the Proceedings of the 15th ACM Symposium on Operating Systems Principles, December 3-6, 1995, Copper Mountain Resort, Colorado. Copyright 1995 Association for Computing Machinery. Abstract  
Abstract: Bayou is a replicated, weakly consistent storage system designed for a mobile computing environment that includes portable machines with less than ideal network connectivity. To maximize availability, users can read and write any accessible replica. Bayous design has focused on supporting application-specific mechanisms to detect and resolve the update conicts that naturally arise in such a system, ensuring that replicas move towards eventual consistency, and defining a protocol by which the resolution of update conicts stabilizes. It includes novel methods for conict detection, called dependency checks, and per-write con-ict resolution based on client-provided merge procedures. To guarantee eventual consistency, Bayou servers must be able to rollback the effects of previously executed writes and redo them according to a global serialization order. Furthermore, Bayou permits clients to observe the results of all writes received by a server, including tentative writes whose conicts have not been ultimately resolved. This paper presents the motivation for and design of these mechanisms and describes the experiences gained with an initial implementation of the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso and H. F. Korth. </author> <title> Database system issues in nomadic computing. </title> <booktitle> Proceedings ACM SIGMOD International Conference on Management of Data , Washington, </booktitle> <address> D.C., </address> <month> May </month> <year> 1993, </year> <pages> pages 388-392. 12 </pages>
Reference-contexts: Thus, the Bayou design requires only occasional, pair-wise communication between computers. This model takes into consideration characteristics of mobile computing such as expensive connection time, frequent or occasional disconnections, and that collaborating computers may never be all connected simultaneously <ref> [1, 13, 16] </ref>. The Bayou architecture does not include the notion of a disconnected mode of operation because, in fact, various degrees of connectedness are possible. Groups of computers may be partitioned away from the rest of the system yet remain connected to each other.
Reference: [2] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight, causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems 9(3) </journal> <pages> 272-314, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: This means that the server has already received and executed any Writes that could possibly be ordered before the given Write. Bayous notion of stability is similar to that in ordered multicast protocols, such as those provided in the ISIS toolkit <ref> [2] </ref>. In many cases, an application can be designed with a notion of confirmation or commitment that corresponds to the Bayou notion of stability. As an example, in the Bayou meeting room scheduling application, two users may try to schedule separate meetings for the same time in the same room.
Reference: [3] <author> A. Birrell, R. Levin, R. M. Needham, and M. D. Schroeder . Grapevine: </author> <title> An exercise in distributed computing. </title> <booktitle> Communi cations of the ACM 25(4) </booktitle> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: In particular, the client does not wait for the Write to propagate to other servers. In other words, Bayou presents a weakly consistent replication model with a read-any/write-any style of access. Weakly consistent replication has been used previously for availability, simplicity and scalability in a variety of systems <ref> [3, 7, 10, 12, 15, 19] </ref>. 3 While individual Read and Write operations are performed at a single server, clients need not confine themselves to interacting with a single server.
Reference: [4] <author> M. J. Carey and M. Livny. </author> <title> Conflict detection tradeoffs for replicated data. </title> <journal> ACM Transactions on Database Systems 16(4) </journal> <pages> 703-746, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Specifically, each Write operation can explicitly specify the expected values of any data items on which the update depends, including data items that have been read but are not being updated. Thus, Bayou clients can emulate the optimistic style of concurrency control employed in some distributed database systems <ref> [4, 6] </ref>. For example, a Write operation that installs a new program binary file might only include a dependency check of the sources, including version stamps, from which it was derived. Since the binary does not depend on its previous value, this need not be included.
Reference: [5] <author> B. A. Coan, B. M. Oki, and E. K. </author> <title> Kolodner . Limitations on database availability when networks partition. </title> <booktitle> Proceedings Fifth ACM Symposium on Principles of Distributed Comput ing, </booktitle> <address> Calgary, Alberta, Canada, </address> <month> August </month> <year> 1986, </year> <pages> pages 187-194. </pages>
Reference-contexts: Weak consistency is desired since any replication scheme providing one copy serializability [6], such as requiring clients to access a quorum of replicas or to acquire exclusive locks on data that they wish to update, yields unacceptably low write availability in partitioned networks <ref> [5] </ref>. For these reasons, Bayou adopts a model in which clients can read and write to any replica without the need for explicit coordination with other replicas. Every computer eventually receives updates from every other, either directly or indirectly, through a chain of pair-wise interactions.
Reference: [6] <author> S. Davidson, H. Garcia-Molina, and D. Skeen. </author> <title> Consistency in a partitioned network: A survey. </title> <journal> ACM Computing Surveys 17(3) </journal> <pages> 341-370, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: A weak connectivity networking model can be accommodated only with weakly consistent, replicated data. Replication is required since a single storage site may not be reachable from mobile clients or within disconnected workgroups. Weak consistency is desired since any replication scheme providing one copy serializability <ref> [6] </ref>, such as requiring clients to access a quorum of replicas or to acquire exclusive locks on data that they wish to update, yields unacceptably low write availability in partitioned networks [5]. <p> Specifically, each Write operation can explicitly specify the expected values of any data items on which the update depends, including data items that have been read but are not being updated. Thus, Bayou clients can emulate the optimistic style of concurrency control employed in some distributed database systems <ref> [4, 6] </ref>. For example, a Write operation that installs a new program binary file might only include a dependency check of the sources, including version stamps, from which it was derived. Since the binary does not depend on its previous value, this need not be included.
Reference: [7] <author> A. Demers, D. Greene, C. Hauser , W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <booktitle> Proceedings Sixth Symposium on Principles of Distributed Computing , Vancouver, </booktitle> <address> B.C., Canada, </address> <month> August </month> <year> 1987, </year> <pages> pages 1-12. </pages>
Reference-contexts: In particular, the client does not wait for the Write to propagate to other servers. In other words, Bayou presents a weakly consistent replication model with a read-any/write-any style of access. Weakly consistent replication has been used previously for availability, simplicity and scalability in a variety of systems <ref> [3, 7, 10, 12, 15, 19] </ref>. 3 While individual Read and Write operations are performed at a single server, clients need not confine themselves to interacting with a single server. <p> A server immediately makes the effects of all known Writes available for reading. In keeping with the goal of requiring as little of the network as possible, Bayou servers propagate Writes among themselves during pair-wise contacts, called anti-entropy sessions <ref> [7] </ref>. The two servers involved in a session exchange Write operations so that when they are finished they agree on the set of Bayou Writes they have seen and the order in which to perform them. <p> The theory of epidemic algorithms assures that as long as the set of servers is not permanently partitioned each Write will eventually reach all servers <ref> [7] </ref>. This holds even for communication patterns in which at most one pair of servers is ever connected at once. In the absence of new Writes from clients, all servers will eventually hold the same data.
Reference: [8] <author> A. Downing. </author> <title> Conflict resolution in symmetric replication. </title> <booktitle> Proceedings European Oracle User Group Conference, </booktitle> <address> Flo rence, Italy, </address> <month> April </month> <year> 1995, </year> <pages> pages 167-175. </pages>
Reference-contexts: To this end, Bayou provides system support for application-specific conict detection and resolution. Previous systems, such as Locus [30] and Coda [17], have proven the value of semantic conict detection and resolution for file directories, and several systems are exploring conict resolution for file and database contents <ref> [8, 18, 26] </ref>. Bayous mechanisms extend this work by letting applications exploit domain-specific knowledge to achieve automatic conict resolution at the granularity of individual update operations without compromising security or eventual consistency. Automatic conict resolution is highly desirable because it enables a Bayou replica to remain available. <p> More recently, some of these systems have also incorporated support for resolver programs that reduce the need for human intervention when resolving other types of file conicts [18, 26]. Oracles symmetric replication product also includes the notion of application-selected resolvers for relational databases <ref> [8] </ref>. <p> Such conicts can be detected by having the dependency check query the current values of any data items being updated and ensure that they have not changed from the values they had at the time the Write was submitted, as is done in Oracles replicated database <ref> [8] </ref>. Bayous dependency checking mechanism is more powerful than the traditional use of version vectors since it can also be used to detect Read-Write conicts. <p> Bayous management of update conicts differs significantly from previous replicated systems, including file systems like Coda [18] and Ficus [26] as well as Oracles recent commercial database offering <ref> [8] </ref>, in the following main areas: Non-transparency. Previous systems have tried to support existing file and database applications by detecting and resolving con-icts without the applications knowledge. In contrast, Bayou adopts the philosophy that applications must be aware of and integrally involved in conict detection and resolution.
Reference: [9] <author> C. Ellis and S. Gibbs. </author> <title> Concurrency control in groupware systems. </title> <booktitle> Proceedings ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Portland, Oregon, </address> <month> June </month> <year> 1989, </year> <pages> pages 399-407. </pages>
Reference-contexts: In practice, because Bayou's Write operations include arbitrary merge procedures, it is effectively impossible either to determine whether two Writes commute or to transform two Writes so they can be reordered as has been suggested for some systems <ref> [9] </ref>. When a Write is accepted by a Bayou server from a client, it is initially deemed tentative. Tentative Writes are ordered according to timestamps assigned to them by their accepting servers. Eventually, each Write is committed, by a process described in the next section.
Reference: [10] <author> R. A. Golding. </author> <title> A weak-consistency architecture for distributed information services. </title> <booktitle> Computing Systems 5(4) </booktitle> <pages> 379-405, </pages> <month> Fall </month> <year> 1992. </year>
Reference-contexts: In particular, the client does not wait for the Write to propagate to other servers. In other words, Bayou presents a weakly consistent replication model with a read-any/write-any style of access. Weakly consistent replication has been used previously for availability, simplicity and scalability in a variety of systems <ref> [3, 7, 10, 12, 15, 19] </ref>. 3 While individual Read and Write operations are performed at a single server, clients need not confine themselves to interacting with a single server.
Reference: [11] <author> R. Golding, D. Long, and J. W ilkes. </author> <title> The refdbms distributed bibliographic database system. </title> <booktitle> Proceedings Winter USENIX Conference, </booktitle> <address> San Francisco, California, </address> <month> January </month> <year> 1994, </year> <pages> pages 47-62. </pages>
Reference-contexts: The next steps in the implementation will include the development of other applications, such as an e-mail reader, porting refdbms <ref> [11] </ref>, a widely used shared bibliographic database manager, to run on the Bayou storage system, and experimenting with wireless connectivity for servers and clients running on a laptop. 11.
Reference: [12] <author> R.G. Guy, J.S. Heidemann, W. Mak, T.W. Page, Jr., G.J. Popek, and D. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> Proceedings Summer USENIX Conference, </booktitle> <month> June </month> <year> 1990, </year> <pages> pages 63-71. </pages>
Reference-contexts: For these reasons, Bayou adopts a model in which clients can read and write to any replica without the need for explicit coordination with other replicas. Every computer eventually receives updates from every other, either directly or indirectly, through a chain of pair-wise interactions. Unlike many previous systems <ref> [12, 27] </ref>, our goal in designing the Bayou system was not to provide transparent replicated data support for existing file system and database applications. <p> In particular, the client does not wait for the Write to propagate to other servers. In other words, Bayou presents a weakly consistent replication model with a read-any/write-any style of access. Weakly consistent replication has been used previously for availability, simplicity and scalability in a variety of systems <ref> [3, 7, 10, 12, 15, 19] </ref>. 3 While individual Read and Write operations are performed at a single server, clients need not confine themselves to interacting with a single server. <p> Techniques for semantic-based conict detection and resolution have previously been incorporated into some systems to handle special cases such as file directory updates. For example, the Locus [30], Ficus <ref> [12] </ref>, and Coda [17] distributed file systems all include mechanisms for automatically resolving certain classes of conicting directory operations. More recently, some of these systems have also incorporated support for resolver programs that reduce the need for human intervention when resolving other types of file conicts [18, 26]. <p> It expects the query to return an empty set. 5 Bayous dependency checks, like the version vectors and times-tamps traditionally used in distributed systems <ref> [12, 19, 25, 27] </ref>, can be used to detect Write-Write conicts. That is, they can be used to detect when two users update the same data item without one of them first observing the others update.
Reference: [13] <author> T. Imielinski and B. R. Badrinath. </author> <title> Mobile wireless computing: </title> <booktitle> Challenges in data management. Communications of the ACM 37(10) </booktitle> <pages> 18-28, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Thus, the Bayou design requires only occasional, pair-wise communication between computers. This model takes into consideration characteristics of mobile computing such as expensive connection time, frequent or occasional disconnections, and that collaborating computers may never be all connected simultaneously <ref> [1, 13, 16] </ref>. The Bayou architecture does not include the notion of a disconnected mode of operation because, in fact, various degrees of connectedness are possible. Groups of computers may be partitioned away from the rest of the system yet remain connected to each other.
Reference: [14] <author> B. Janssen and M. Spreitzer. </author> <title> Inter-Language Unification - ILU. </title> <publisher> ftp://ftp.parc.xerox.com/pub/ilu/ilu.html. </publisher>
Reference-contexts: Bayous implementation is Posix compliant and developed in ANSI C so that the same sources run on Intel-based laptops with Linux and on our regular development platform of Sun SPARCstations with SunOS. In the current implementation, ILU <ref> [14] </ref>, a language-independent RPC package developed at Xerox PARC, is used for communication between Bayou clients and servers, as well as between servers.
Reference: [15] <author> L. Kalwell Jr., S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif. </author> <title> Replicated document management in a group communication system. In Groupware: Software for ComputerSup-ported Cooperative Work, </title> <editor> edited by D. Marca and G. Bock, </editor> <publisher> IEEE Computer Society Press, </publisher> <year> 1992, </year> <pages> pages 226-235. </pages>
Reference-contexts: In particular, the client does not wait for the Write to propagate to other servers. In other words, Bayou presents a weakly consistent replication model with a read-any/write-any style of access. Weakly consistent replication has been used previously for availability, simplicity and scalability in a variety of systems <ref> [3, 7, 10, 12, 15, 19] </ref>. 3 While individual Read and Write operations are performed at a single server, clients need not confine themselves to interacting with a single server. <p> More recently, some of these systems have also incorporated support for resolver programs that reduce the need for human intervention when resolving other types of file conicts [18, 26]. Oracles symmetric replication product also includes the notion of application-selected resolvers for relational databases [8]. Other systems, like Lotus Notes <ref> [15] </ref>, do not Bayou_Write (update, dependency_check, mergeproc) - IF (DB_Eval (dependency_check.query) &lt;&gt; dependency_check.expected_result) resolved_update = Interpret (mergeproc); ELSE resolved_update = update; DB_Apply (resolved_update); - Bayou_Write ( update = -insert, Meetings, 12/18/95, 1:30pm, 60min, Budget Meeting-, dependency_check = - query = SELECT key FROM Meetings WHERE day = 12/18/95 AND start &lt;
Reference: [16] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Sys tems 10(1): </journal> <pages> 3-25, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Thus, the Bayou design requires only occasional, pair-wise communication between computers. This model takes into consideration characteristics of mobile computing such as expensive connection time, frequent or occasional disconnections, and that collaborating computers may never be all connected simultaneously <ref> [1, 13, 16] </ref>. The Bayou architecture does not include the notion of a disconnected mode of operation because, in fact, various degrees of connectedness are possible. Groups of computers may be partitioned away from the rest of the system yet remain connected to each other.
Reference: [17] <author> P. Kumar and M. Satyanarayanan. </author> <title> Log-based directory resolution in the Coda file system. </title> <booktitle> Proceedings Second International Conference on Parallel and Distributed Information Systems, </booktitle> <address> San Diego, California, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Moreover, applications must be involved in the detection and resolution of conicts since these naturally depend on the semantics of the application. To this end, Bayou provides system support for application-specific conict detection and resolution. Previous systems, such as Locus [30] and Coda <ref> [17] </ref>, have proven the value of semantic conict detection and resolution for file directories, and several systems are exploring conict resolution for file and database contents [8, 18, 26]. <p> Techniques for semantic-based conict detection and resolution have previously been incorporated into some systems to handle special cases such as file directory updates. For example, the Locus [30], Ficus [12], and Coda <ref> [17] </ref> distributed file systems all include mechanisms for automatically resolving certain classes of conicting directory operations. More recently, some of these systems have also incorporated support for resolver programs that reduce the need for human intervention when resolving other types of file conicts [18, 26].
Reference: [18] <author> P. Kumar and M. Satyanarayanan. </author> <title> Flexible and safe resolution of file conflicts. </title> <booktitle> Proceedings USENIX Technical Confer ence, </booktitle> <address> New Orleans, Louisiana, </address> <month> January </month> <year> 1995, </year> <pages> pages 95-106. </pages>
Reference-contexts: To this end, Bayou provides system support for application-specific conict detection and resolution. Previous systems, such as Locus [30] and Coda [17], have proven the value of semantic conict detection and resolution for file directories, and several systems are exploring conict resolution for file and database contents <ref> [8, 18, 26] </ref>. Bayous mechanisms extend this work by letting applications exploit domain-specific knowledge to achieve automatic conict resolution at the granularity of individual update operations without compromising security or eventual consistency. Automatic conict resolution is highly desirable because it enables a Bayou replica to remain available. <p> More recently, some of these systems have also incorporated support for resolver programs that reduce the need for human intervention when resolving other types of file conicts <ref> [18, 26] </ref>. Oracles symmetric replication product also includes the notion of application-selected resolvers for relational databases [8]. <p> By convention, most Bayou data collections include an error log for unresolvable conicts. Such conventions, however, are outside the domain of the Bayou storage system and may vary according to the application. In contrast to systems like Coda <ref> [18] </ref> or Ficus [26] that lock individual files or complete file volumes when conicts have been detected but not yet resolved, Bayou allows replicas to always remain accessible. This permits clients to continue to Read previously written data and to continue to issue new Writes. <p> Bayous merge procedures resemble the previously mentioned resolver programs, for which support has been added to a number of replicated file systems <ref> [18, 26] </ref>. In these systems, a file-type-specific resolver program is run when a version vector mismatch is detected for a file. This program is presented with both the current and proposed file contents and it can do whatever it wishes in order to resolve the detected conict. <p> Bayous management of update conicts differs significantly from previous replicated systems, including file systems like Coda <ref> [18] </ref> and Ficus [26] as well as Oracles recent commercial database offering [8], in the following main areas: Non-transparency. Previous systems have tried to support existing file and database applications by detecting and resolving con-icts without the applications knowledge.
Reference: [19] <author> R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Transactions on Computer Systems 10(4) </journal> <pages> 360-391, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: In particular, the client does not wait for the Write to propagate to other servers. In other words, Bayou presents a weakly consistent replication model with a read-any/write-any style of access. Weakly consistent replication has been used previously for availability, simplicity and scalability in a variety of systems <ref> [3, 7, 10, 12, 15, 19] </ref>. 3 While individual Read and Write operations are performed at a single server, clients need not confine themselves to interacting with a single server. <p> It expects the query to return an empty set. 5 Bayous dependency checks, like the version vectors and times-tamps traditionally used in distributed systems <ref> [12, 19, 25, 27] </ref>, can be used to detect Write-Write conicts. That is, they can be used to detect when two users update the same data item without one of them first observing the others update.
Reference: [20] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM 21(7) </journal> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: However, keeping servers clocks reasonably close is desirable so that the induced Write order is consistent with a users perception of the order in which Writes are submitted. Bayou servers maintain logical clocks <ref> [20] </ref> to timestamp new Writes. A servers logical clock is generally synchronized with its real-time system clock, but, to preserve the causal ordering of Write operations, the server may need to advance its logical clock when Writes are received during anti-entropy.
Reference: [21] <author> L. Lamport. </author> <title> LaTeX a document pr eparation system. </title> <publisher> Addi son-Wesley Publishing Company, </publisher> <year> 1986. </year>
Reference-contexts: This section shows how Bayou performs for a particular instance of the system: a server and client for the bibliographic database described in Section 2. The database is composed of a single table containing 1550 tuples, obtained from a bibtex source <ref> [21] </ref>. Each tuple was inserted into the database with a single Bayou Write operation. Results are presented for five different configurations of the database characterized by the number of Writes that are tentative.
Reference: [22] <author> J. P. Munson and P. Dewan. </author> <title> A exible object merging framework. </title> <booktitle> Proceedings ACM Conference on Computer Supported Cooperative Work (CSCW), </booktitle> <address> Chapel Hill, North Carolina, </address> <month> October </month> <year> 1994, </year> <pages> pages 231-242. </pages>
Reference-contexts: To enable manual resolution, perhaps using an interactive merge tool <ref> [22] </ref>, the conicting updates must be presented to a user in a manner that allows him to understand what has happened. By convention, most Bayou data collections include an error log for unresolvable conicts. <p> A number of shared databases, such as phone books and bulletin boards, meet these characteristics, as do many asynchronous collaborative applications <ref> [22] </ref>. We have built an initial version of the Bayou system and our measurements indicate that its performance and overhead are acceptable. In particular, running Bayou servers and applications on todays laptop computers is reasonable.
Reference: [23] <author> R. M. Needham and M. D. </author> <title> Schroeder . Using encryption for authentication in large networks of computers. </title> <booktitle> Communica tions of the ACM 21(12): </booktitle> <pages> 993-999, </pages> <month> December </month> <year> 1978. </year>
Reference-contexts: Access Control Providing access control and authentication in Bayou posed interesting challenges because of our minimal connectivity assumptions. In particular, the design cannot rely on an online, trusted authentication server <ref> [23] </ref> to mediate the establishment of 9 secure channels between a client and server or between two Bayou servers. As an example, suppose two users holding Bayou replicas on their portable computers are in a meeting together.
Reference: [24] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Pub lishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Server location, by both clients and other servers, uses a simple decentralized registration and lookup service for key-value pairs that are made visible across a network via multicast. Bayou merge procedures are Tcl programs <ref> [24] </ref> that are run in a Tcl interpreter modified to enforce the limits described in Section 5. We foresee that these components may change as the system evolves. The two running applications have demonstrated how to use Bayous conict detection and resolution mechanisms effectively.
Reference: [25] <author> D. S. Parker, G. J. Popek, G. Rudisin, A. Stoughton, B. J. Walker, E. Walton, J. M. Chow, D. Edwards, S. Kiser, and C. Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering SE 9(3) </journal> <pages> 240-246, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: It expects the query to return an empty set. 5 Bayous dependency checks, like the version vectors and times-tamps traditionally used in distributed systems <ref> [12, 19, 25, 27] </ref>, can be used to detect Write-Write conicts. That is, they can be used to detect when two users update the same data item without one of them first observing the others update.
Reference: [26] <author> P. Reiher, J. Heidemann, D. Ratner, G. Skinner, and G. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> Proceedings Summer USENIX Conference, </booktitle> <month> June </month> <year> 1994, </year> <pages> pages 183-195. </pages>
Reference-contexts: To this end, Bayou provides system support for application-specific conict detection and resolution. Previous systems, such as Locus [30] and Coda [17], have proven the value of semantic conict detection and resolution for file directories, and several systems are exploring conict resolution for file and database contents <ref> [8, 18, 26] </ref>. Bayous mechanisms extend this work by letting applications exploit domain-specific knowledge to achieve automatic conict resolution at the granularity of individual update operations without compromising security or eventual consistency. Automatic conict resolution is highly desirable because it enables a Bayou replica to remain available. <p> More recently, some of these systems have also incorporated support for resolver programs that reduce the need for human intervention when resolving other types of file conicts <ref> [18, 26] </ref>. Oracles symmetric replication product also includes the notion of application-selected resolvers for relational databases [8]. <p> By convention, most Bayou data collections include an error log for unresolvable conicts. Such conventions, however, are outside the domain of the Bayou storage system and may vary according to the application. In contrast to systems like Coda [18] or Ficus <ref> [26] </ref> that lock individual files or complete file volumes when conicts have been detected but not yet resolved, Bayou allows replicas to always remain accessible. This permits clients to continue to Read previously written data and to continue to issue new Writes. <p> Bayous merge procedures resemble the previously mentioned resolver programs, for which support has been added to a number of replicated file systems <ref> [18, 26] </ref>. In these systems, a file-type-specific resolver program is run when a version vector mismatch is detected for a file. This program is presented with both the current and proposed file contents and it can do whatever it wishes in order to resolve the detected conict. <p> Bayous management of update conicts differs significantly from previous replicated systems, including file systems like Coda [18] and Ficus <ref> [26] </ref> as well as Oracles recent commercial database offering [8], in the following main areas: Non-transparency. Previous systems have tried to support existing file and database applications by detecting and resolving con-icts without the applications knowledge.
Reference: [27] <author> M. Satyanarayanan, J.J. Kistler, P. Kumar, </author> <title> M.E. Okasaki, E.H. Siegel, and D.C. Steere. Coda: a highly available f ile system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers 39(4) </journal> <pages> 447-459, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: For these reasons, Bayou adopts a model in which clients can read and write to any replica without the need for explicit coordination with other replicas. Every computer eventually receives updates from every other, either directly or indirectly, through a chain of pair-wise interactions. Unlike many previous systems <ref> [12, 27] </ref>, our goal in designing the Bayou system was not to provide transparent replicated data support for existing file system and database applications. <p> It expects the query to return an empty set. 5 Bayous dependency checks, like the version vectors and times-tamps traditionally used in distributed systems <ref> [12, 19, 25, 27] </ref>, can be used to detect Write-Write conicts. That is, they can be used to detect when two users update the same data item without one of them first observing the others update.
Reference: [28] <author> M. Stonebraker. </author> <title> Concurrency control and consistency of multiple copies of data in distributed INGRES. </title> <journal> IEEE Transac tions on Software Engineering SE-5(3):188-194, </journal> <month> May </month> <year> 1979. </year>
Reference-contexts: Committed Writes, in commit order, are placed ahead of any tentative Writes in each servers Write log. This, along with Bayous anti-entropy protocol ensuring that servers learn of committed Writes in the order that they were committed, provides stability. In the Bayou system, we use a primary commit scheme <ref> [28] </ref>. That is, one server designated as the primary takes responsibility for committing updates. Knowledge of which Writes have committed and in which order they were committed then propagates to other servers during anti-entropy. In all other respects, the primary behaves exactly like any other server.
Reference: [29] <author> D. B. Terry, A. J. Demers, K. Petersen, M. J. Spreitzer, M. M. Theimer and B. B. Welch. </author> <title> Session guarantees for weakly consistent replicated data. </title> <booktitle> Proceedings Third International Conference on Parallel and Distributed Information Systems , Austin, </booktitle> <address> Texas, </address> <month> September </month> <year> 1994, </year> <pages> pages 140-149. </pages>
Reference-contexts: Indeed, in a mobile computing environment, switching between servers is often desirable, and Bayou provides session guarantees to reduce client-observed inconsistencies when accessing different servers. The description of session guarantees has been presented elsewhere <ref> [29] </ref>. To support application-specific conict detection and resolution, Bayou Writes must contain more than a typical file system write or database update.
Reference: [30] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The LOCUS distributed operating system. </title> <booktitle> Proceedings Ninth Symposium on Operating Systems Principles, </booktitle> <address> Bretton Woods, New Hampshire, </address> <month> October </month> <year> 1983, </year> <pages> pages 49-70. </pages>
Reference-contexts: Moreover, applications must be involved in the detection and resolution of conicts since these naturally depend on the semantics of the application. To this end, Bayou provides system support for application-specific conict detection and resolution. Previous systems, such as Locus <ref> [30] </ref> and Coda [17], have proven the value of semantic conict detection and resolution for file directories, and several systems are exploring conict resolution for file and database contents [8, 18, 26]. <p> Techniques for semantic-based conict detection and resolution have previously been incorporated into some systems to handle special cases such as file directory updates. For example, the Locus <ref> [30] </ref>, Ficus [12], and Coda [17] distributed file systems all include mechanisms for automatically resolving certain classes of conicting directory operations. More recently, some of these systems have also incorporated support for resolver programs that reduce the need for human intervention when resolving other types of file conicts [18, 26].
References-found: 30

