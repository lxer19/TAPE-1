URL: http://www.research.microsoft.com/~ymwang/papers/newPCSR.ps
Refering-URL: http://www.research.microsoft.com/~ymwang/papers/newPCSRCR.htm
Root-URL: http://www.research.microsoft.com
Title: Tight Upper Bound on Useful Distributed System Checkpoints  
Author: Yi-Min Wang Pi-Yu Chung W. Kent Fuchs 
Keyword: fault tolerance, distributed systems  
Address: Murray Hill, New Jersey Murray Hill, New Jersey Urbana, Illinois  
Affiliation: AT&T Bell Laboratories AT&T Bell Laboratories University of Illinois  
Abstract: In this paper, we give an alternative proof of the necessary and sufficient condition for achieving optimal checkpoint garbage collection in distributed systems [9]. We show that, by formulating the recovery line calculation problem as a reachability analysis problem on a rollback-dependency graph, the proof can be greatly simplified. We also present a polynomial-time optimal garbage collection algorithm based on a graph search. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Bhargava and S. R. Lian. </author> <title> Independent checkpointing and concurrent rollback for recovery An optimistic approach. </title> <booktitle> In Proc. IEEE Symp. Reliable Distributed Syst., </booktitle> <pages> pages 3-12, </pages> <year> 1988. </year>
Reference-contexts: Optimal garbage collection is a hard problem because one in general cannot predict future message dependencies, checkpoints and recoveries. Over the past decade, a simple sufficient condition based on the notion of obsolete checkpoints has been used <ref> [1, 5, 6] </ref>: the most recent set of consistent checkpoints, C, is calculated; all the checkpoints taken before C are obsolete and can be discarded; all nonobsolete checkpoints taken after C (including checkpoints of C) are retained because they may be combined with some future checkpoints to form a better set
Reference: [2] <author> V. Hadzilacos. </author> <title> An algorithm for minimizing roll back cost. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 93-97, </pages> <year> 1982. </year>
Reference-contexts: The main contribution of our work is to prove that it suffices to consider a finite number of immediate failure scenarios [9]. We formulate recovery 1 More generally, the unique set minimizes all reasonable cost functions <ref> [2] </ref>. 1 line calculation as a reachability analysis problem on a rollback dependency graph [8].
Reference: [3] <author> L. Lamport. </author> <title> Time, clocks and the ordering of events in a distributed system. </title> <journal> Commun. ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: In a distributed system, two checkpoints c 1 and c 2 of two processes p 1 and p 2 are inconsistent if a message was sent from p 1 after c 1 and received by p 2 before c 2 , i.e., c 1 happened-before c 2 <ref> [3, 7] </ref>, or vice versa. When a failure occurs, the unique best consistent set of states which minimizes the amount of rollbacks 1 needs to be calculated based on the recorded dependencies so that the state of the entire system can be restored to a state that could have happened.
Reference: [4] <author> B. Randell. </author> <title> System structure for software fault tolerance. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> SE-1(2):220-232, </volume> <month> June </month> <year> 1975. </year>
Reference-contexts: If processes are allowed to take their checkpoints independently without any coordination with each other, it has been shown that <ref> [4] </ref> C may always consist of the same set of old checkpoints no matter how many new checkpoints have been taken. Therefore, the number of nonobsolete checkpoints and hence the space overhead for storing them are unbounded.
Reference: [5] <author> R. E. Strom and S. Yemini. </author> <title> Optimistic recovery in distributed systems. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Optimal garbage collection is a hard problem because one in general cannot predict future message dependencies, checkpoints and recoveries. Over the past decade, a simple sufficient condition based on the notion of obsolete checkpoints has been used <ref> [1, 5, 6] </ref>: the most recent set of consistent checkpoints, C, is calculated; all the checkpoints taken before C are obsolete and can be discarded; all nonobsolete checkpoints taken after C (including checkpoints of C) are retained because they may be combined with some future checkpoints to form a better set
Reference: [6] <author> K. Tsuruoka, A. Kaneko, and Y. Nishihara. </author> <title> Dynamic recovery schemes for distributed processes. </title> <booktitle> In Proc. IEEE 2nd Symp. on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 124-130, </pages> <year> 1981. </year>
Reference-contexts: Optimal garbage collection is a hard problem because one in general cannot predict future message dependencies, checkpoints and recoveries. Over the past decade, a simple sufficient condition based on the notion of obsolete checkpoints has been used <ref> [1, 5, 6] </ref>: the most recent set of consistent checkpoints, C, is calculated; all the checkpoints taken before C are obsolete and can be discarded; all nonobsolete checkpoints taken after C (including checkpoints of C) are retained because they may be combined with some future checkpoints to form a better set
Reference: [7] <author> Y. M. Wang. </author> <title> Space Reclamation for Uncoordinated Checkpointing in Message-Passing Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical and Computer Engineering, University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: In a distributed system, two checkpoints c 1 and c 2 of two processes p 1 and p 2 are inconsistent if a message was sent from p 1 after c 1 and received by p 2 before c 2 , i.e., c 1 happened-before c 2 <ref> [3, 7] </ref>, or vice versa. When a failure occurs, the unique best consistent set of states which minimizes the amount of rollbacks 1 needs to be calculated based on the recorded dependencies so that the state of the entire system can be restored to a state that could have happened.
Reference: [8] <author> Y. M. Wang. </author> <title> Maximum and minimum consistent global checkpoints and their applications. </title> <booktitle> In Proc. IEEE Symp. Reliable Distributed Syst., </booktitle> <pages> pages 86-95, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: We formulate recovery 1 More generally, the unique set minimizes all reasonable cost functions [2]. 1 line calculation as a reachability analysis problem on a rollback dependency graph <ref> [8] </ref>.
Reference: [9] <author> Y. M. Wang, P. Y. Chung, I. J. Lin, and W. K. Fuchs. </author> <title> Checkpoint space reclamation for uncoordinated checkpointing in message-passing systems. </title> <journal> IEEE Trans. Parallel and Distributed Syst., </journal> <volume> 6(5) </volume> <pages> 546-554, </pages> <month> May </month> <year> 1995. </year> <month> 9 </month>
Reference-contexts: The main contribution of our work is to prove that it suffices to consider a finite number of immediate failure scenarios <ref> [9] </ref>. We formulate recovery 1 More generally, the unique set minimizes all reasonable cost functions [2]. 1 line calculation as a reachability analysis problem on a rollback dependency graph [8].
References-found: 9

