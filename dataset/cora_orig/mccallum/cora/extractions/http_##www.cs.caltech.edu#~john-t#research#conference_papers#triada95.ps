URL: http://www.cs.caltech.edu/~john-t/research/conference_papers/triada95.ps
Refering-URL: http://www.cs.caltech.edu/~john-t/research/conference_papers/
Root-URL: http://www.cs.caltech.edu
Email: john-t@cs.caltech.edu  
Title: Performance of a High-Level Parallel Programming Layer Defined on Top of the Ada Tasking Model  
Author: John Thornley 
Web: http://www.cs.caltech.edu/~john-t/  
Address: Pasadena, California 91125, U.S.A.  
Affiliation: Computer Science Department California Institute of Technology  
Abstract: In earlier work, we proposed extending Ada with a high-level parallel programming layer consisting of three prag-mas that indicate where standard sequential constructs can be executed in parallel without changing the sequential semantics of a program. The three pragmas specify: (i) parallelizable sequences of statements, (ii) paral-lelizable for-loop statements, and (iii) single-assignment types for synchronization. A precise definition of these pragmas was given by means of transformations to standard Ada tasking constructs. In this paper, we improve our definition of the parallel programming layer and demonstrate that the pragmas can be implemented efficiently on top of an existing Ada compiler by straightforward preprocessing using the defining transformations. We present three simple parallel programs that exhibit good speedups over sequential programs, when executed on a multiprocessor computer. Development of these programs was considerably easier than the direct use of Ada tasking, because the parallel programs are identical to equivalent sequential programs except for the added pragmas. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ada 95 Reference Manual. </author> <title> International Organization for Standardization, </title> <month> January </month> <year> 1995. </year> <note> International Standard ANSI/ISO/IEC-8652:1995. </note>
Reference-contexts: 1 Introduction Parallel programming for performance is becoming increasingly important as multiprocessor computers become more widely available. The Ada tasking model <ref> [1] </ref> provides a powerful collection of parallel programming constructs. However, parallel programs that use tasking directly are considerably more complicated and more difficult to develop than equivalent sequential programs. Our goal is to build an efficient, high-level parallel programming layer on top of Ada tasking.
Reference: [2] <author> John Thornley. </author> <title> Integrating parallel dataflow programming with the Ada tasking model. </title> <booktitle> In Proceedings of ACM TRI-Ada '94, </booktitle> <pages> pages 417-428, </pages> <address> Balti-more, Maryland, </address> <month> November 6-11 </month> <year> 1994. </year>
Reference-contexts: However, parallel programs that use tasking directly are considerably more complicated and more difficult to develop than equivalent sequential programs. Our goal is to build an efficient, high-level parallel programming layer on top of Ada tasking. In earlier work <ref> [2] </ref>, we presented a proposal to extend Ada with three well-known structured parallel programming constructs: 1. Parallelizable sequences of statements: sequences of statements that can be executed in parallel. 2. Parallelizable for-loop statements: for-loop statements in which the iterations can be executed in parallel. 3. <p> The definitions are slightly different from those given in <ref> [2] </ref>. We have enhanced the constructs with respect to exception handling and we now take advantage of Ada 95 features in the transformations. Since the primary purpose of this paper is to investigate performance, we are intentionally brief in this section. The reader is referred to [2] for additional discussion. 2.1 <p> from those given in <ref> [2] </ref>. We have enhanced the constructs with respect to exception handling and we now take advantage of Ada 95 features in the transformations. Since the primary purpose of this paper is to investigate performance, we are intentionally brief in this section. The reader is referred to [2] for additional discussion. 2.1 Parallelizable Sequence of Statements A parallelizable sequence of statements has the following form: pragma Parallelizable Sequence; statement 1 : : : statement n Parallelizable sequences of statements are subject to the following restrictions: * It is illegal to transfer control out of a parallelizable sequence of <p> definition; pragma Single Assignment (S); X, Y : S; is transformed to: type S Value is type definition; package S is new Single Assignment (S Value); X, Y : S.Variable; S.Assign (To =&gt; X, From =&gt; S.Read (Y)); The transformations for single-assignment types occurring in other contexts are covered in <ref> [2] </ref>.
Reference: [3] <author> Edmond Schonberg and Bernard Banner. </author> <title> The GNAT project: A GNU-Ada 9X compiler. </title> <booktitle> In Proceedings of ACM TRI-Ada '94, </booktitle> <pages> pages 48-57, </pages> <address> Balti-more, Maryland, </address> <month> November 6-11 </month> <year> 1994. </year>
Reference-contexts: The complete parallel and sequential programs appear in the author's World-Wide Web page. 3.2 Transformation and Compilation The parallel programs were manually transformed into standard Ada programs, then compiled using the SGI release of GNAT version 2.07. GNAT <ref> [3] </ref> is the GNU-NYU Ada Translator|an Ada front-end integrated with the GCC (GNU C Compiler) system. GNAT implements Ada tasking on top of POSIX threads. All programs were compiled with the -O2 optimization option.
References-found: 3

