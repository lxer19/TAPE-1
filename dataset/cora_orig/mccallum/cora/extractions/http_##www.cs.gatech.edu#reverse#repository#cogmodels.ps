URL: http://www.cs.gatech.edu/reverse/repository/cogmodels.ps
Refering-URL: http://www.cs.gatech.edu/reverse/repos.html
Root-URL: 
Title: Cognitive Models of Program Comprehension some implications of the information presented. Finally, a section describing
Author: S Tim Tiemens m 
Note: uggests  Before a software system can be correctly maintained, it first must be understood. Yet even though aintenance work consists of 50% of the total effort involved in software development, [12] and under-t standing consists of approximately 50% of the total maintenance effort, [4] few tools are available tha irectly support the task of understanding. It is the purpose of this research to develop such a tool. e This tool, which will be part of a set of maintenance support tools, is known as th  to be comprehended. This consists of all the information sources available t  This knowledge base is either internal (i.e. in the understander's 3 mind) or external (e.g. on paper, or in  
Date: December 8, 1989  
Affiliation: oftware Engineering Research Center  
Abstract: e This paper describes some cognitive models in program comprehension. Th oal is to use this knowledge about cognitive models to produce a tool (the Cognitive a Support Tool, CST) which can reduce the amount of effort needed to understand rogram. The models discussed here were derived from both a human perspective and n omprehension Support Tool (CST). The elements of this tool are derived from models of human pro gram comprehension in order to aid the maintainer in the understanding process. This paper deals with two basic concepts: models of human program comprehension (by g Brooks and by Soloway), and current work being done in the representation of program understandin nowledge (such as Programmer's Apprentice and Cognitive Program Understander.) In this paper, c each model or system is first described, then the implications the model or system carries toward the apabilities of the CST are discussed. This paper's summary is a synthesis section which extracts glo from a source code perspective. After reviewing these models, a synthesis sectio
Abstract-found: 1
Intro-found: 1
Reference: 0. <author> S. Letovsky and E. Soloway, </author> <title> ``Delocalized Plans and Program Comprehension,'' </title> <journal> IEEE Software, </journal> <volume> 1 vol. 3, no. 3, </volume> <pages> pp. 41-49, </pages> <month> May </month> <year> 1986. </year>

Reference: 7. <author> E. Soloway and K. Ehrlich, </author> <title> ``Empirical Studies of Programming Knowledge,'' </title> <journal> IEEE Transactions . on Software Engineering, </journal> <volume> vol. SE-10, no. 5, </volume> <pages> pp. 595-609, </pages> <month> September, </month> <year> 1984. </year> <editor> C. Rich and R.C aters, editors, </editor> <booktitle> Readings in Artificial Intelligence and Software Engineering, </booktitle> <publisher> Morgan Kaufmann, </publisher> <pages> 1 </pages>
Reference-contexts: It has applicability to the entire comprehension process: from locating faulty urface plans, to locating incorrect beacons, to locating incorrect algorithms. 3.2.2. CPU The CPU program (Cognitive Program Understander) is an analysis tool that converts pro t grams into formal specifications. <ref> [7, 9] </ref> The CPU was targeted specifically for the maintenance task, bu dopted a more restrictive view of the tasks that maintainers do when understanding a program. CPU is 1 used to analyze a program to: ) Generate summaries of the code.
Reference: 8. <author> Richard C. Waters, </author> <title> ``A Method for Analyzing Loop Programs,'' </title> <journal> IEEE Transactions on Software 1 Engineering, </journal> <volume> vol. SE-5, no. 3, </volume> <pages> pp. 237-247, </pages> <year> 1979. </year>
Reference-contexts: Also, this query/response model fits in well with the low level actions that 3 Letovsky have observed of experts trying to understand programs. <ref> [8] </ref> .2. Plan Recognition Systems The next two systems are similar because they both approach understanding from the f bottom-up, by scanning from the source code level and matching the code to a higher level o pecification.
Reference: 9. <author> Richard C. Waters, </author> <title> ``The Programmer's Apprentice: Knowledge Based Program Editing,'' </title> <journal> IEEE 2 Transactions on Software Engineering, </journal> <volume> vol. SE-8, no. 1, </volume> <pages> pp. 1-12, </pages> <year> 1982. </year>
Reference-contexts: It has applicability to the entire comprehension process: from locating faulty urface plans, to locating incorrect beacons, to locating incorrect algorithms. 3.2.2. CPU The CPU program (Cognitive Program Understander) is an analysis tool that converts pro t grams into formal specifications. <ref> [7, 9] </ref> The CPU was targeted specifically for the maintenance task, bu dopted a more restrictive view of the tasks that maintainers do when understanding a program. CPU is 1 used to analyze a program to: ) Generate summaries of the code.
Reference: 0. <author> Susan Wiedenbeck, </author> <title> ``Processes in Computer Program Comprehension,'' in Empirical Studies of , Programmers, </title> <editor> ed. </editor> <booktitle> Eliot Soloway and Sitharama Iyengar, </booktitle> <pages> pp. 48-57, </pages> <publisher> Ablex Publishing, </publisher> <address> Norwood ew Jersey, </address> <year> 1986. </year> - <note> 17 - s21. </note> <author> Linda M. Wills, </author> <title> ``Automated Program Recognition,'' </title> <type> AI-TR-904 (Masters Thesis), </type> <institution> Massachusett Institute of Technology, </institution> <month> January </month> <year> 1987. </year>
References-found: 5

