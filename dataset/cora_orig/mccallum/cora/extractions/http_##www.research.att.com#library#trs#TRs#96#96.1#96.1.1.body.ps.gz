URL: http://www.research.att.com/library/trs/TRs/96/96.1/96.1.1.body.ps.gz
Refering-URL: http://www.research.att.com/library/trs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fdalia,reiterg@research.att.com  
Title: A High-Throughput Secure Reliable Multicast Protocol  
Author: Dalia Malki Michael Reiter 
Note: L AT&T Laboratories-Research TR 96-1-1  
Date: July 24, 1996  
Address: Murray Hill, NJ 07974  
Affiliation: AT&T Laboratories,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Atkins, M. Graff, A. K. Lenstra, and P. C. Leyland. </author> <title> The magic words are squeamish ossifrage. </title> <booktitle> In Proceedings of Asiacrypt '94, </booktitle> <pages> pages 219-229, </pages> <year> 1994. </year>
Reference-contexts: 0 ), (ii) if D (M 0 )! fl D (M 00 ), then M 00 is direct or delivered, and (iii) M 0 did not appear in B 2 in a previous execution of C-mcast. resources used in the factorization of the largest general RSA modulus factored to date <ref> [1] </ref> (A. Odlyzko, private communication, May 1994). A 300-bit modulus should therefore be used in our protocol only if it is changed frequently, as in [12]. 9 4.
Reference: [2] <author> K. P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM 36(12) </journal> <pages> 37-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: In particular, using techniques similar to those of [11], our protocol naturally extends to support a virtually synchronous communication environment, which has been shown to simplify the development of distributed programs <ref> [2] </ref>. These extensions also support more effective failure 2 handling and garbage collection than we describe in this paper. The rest of this abstract is structured as follows. In Section 2 we briefly describe our assumptions about the system.
Reference: [3] <author> D. Dolev and D. Malki. </author> <title> The Transis approach to high availability cluster communication. </title> <journal> Communications of the ACM, </journal> <note> 1996. To appear. </note>
Reference-contexts: This method of chaining acknowledgements was influenced by prior work in benignly fault-tolerant systems, notably the Trans-Total [9] and Transis <ref> [3] </ref> systems. Chaining (or linking) was also used in [5] for timestamping documents by establishing their place among a sequence of similarly timestamped documents. The second principle behind our protocol is intended to limit the latency of multicasts given this chaining technique. <p> The chain multicast protocol takes its name from the technique of acknowledgement chaining that was developed in prior work on benignly fault-tolerant systems such as Trans-Total [9] and Transis <ref> [3] </ref>. We outline this technique in Section 4.1 and describe the full protocol in Section 4.2. 4.1 Acknowledgement chaining The chain multicast protocol works by processes sending messages to the group of processes.
Reference: [4] <author> M. K. Franklin and M. Yung. </author> <title> The varieties of secure distributed computation. </title> <booktitle> In Proceedings of Sequences II, Methods in Communications, Security and Computer Science, </booktitle> <pages> pages 392-417, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Reliable multicast has been shown to be central to techniques for constructing systems that can operate correctly despite the malicious penetration of some components by an attacker, and specifically for developing secure distributed services [12] and multiparty cryptographic protocols <ref> [4] </ref>. In this paper we present a new, practical reliable multicast protocol that is suitable for use in asynchronous distributed systems and that can tolerate the malicious (Byzantine) behavior of up to fewer than one-third of the destination group members.
Reference: [5] <author> D. Bayer, S. Haber and W.S. Stornetta. </author> <title> Improving the efficiency and reliability of digital time-stamping. </title> <journal> Journal of Cryptology 3(2) </journal> <pages> 99-111, </pages> <year> 1991. </year>
Reference-contexts: This method of chaining acknowledgements was influenced by prior work in benignly fault-tolerant systems, notably the Trans-Total [9] and Transis [3] systems. Chaining (or linking) was also used in <ref> [5] </ref> for timestamping documents by establishing their place among a sequence of similarly timestamped documents. The second principle behind our protocol is intended to limit the latency of multicasts given this chaining technique.
Reference: [6] <author> M. F. Kaashoek and A. S. Tanenbaum. </author> <title> Group communication in the Amoeba distributed operating system. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 222-230, </pages> <month> May </month> <year> 1991. </year>
Reference: [7] <author> J. B. Lacy, D. P. Mitchell and W. M. </author> <title> Schell. </title> <booktitle> CryptoLib: Cryptography in software. In Proceedings of the 4th USENIX Security Workshop, </booktitle> <pages> pages 1-17, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: In today's computing environments, signature generation is a costly operation that is typically an order of magnitude slower than authenticated message transmission for most reasonable message sizes. For instance, the generation of an RSA [14] signature on a 50 MHz Sparcstation 20 using the CryptoLib software package <ref> [7] </ref> ranges from roughly 15 milliseconds (ms) for a (insecure) 300-bit RSA modulus, 1 to roughly 42ms for a (somewhat more 1 A 300-bit RSA modulus should be secure for roughly an hour against an adversary with the computational 8 secure) 512-bit modulus.
Reference: [8] <author> L. Lamport, R. Shostak, and M. Pease. </author> <title> The Byzantine generals problem. </title> <journal> ACM Transactions on Programming Languages and Systems 4(3) </journal> <pages> 328-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: The above semantics distinguish the problem we are attempting to solve &gt;from other problems studied in the scientific literature on secure and fault-tolerant distributed computing. In particular, our specification is weaker than Byzantine Agreement <ref> [8] </ref>, in that Byzantine Agreement requires a stronger termination condition. Similarly, our specification is weaker than atomic (totally-ordered) multicast (e.g., [10, 11, 12]); these protocols implement an ordering requirement that is stronger than Source Order, i.e., that honest processes execute the same sequence of R-deliveries.
Reference: [9] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1(1) </journal> <pages> 17-25, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: This method of chaining acknowledgements was influenced by prior work in benignly fault-tolerant systems, notably the Trans-Total <ref> [9] </ref> and Transis [3] systems. Chaining (or linking) was also used in [5] for timestamping documents by establishing their place among a sequence of similarly timestamped documents. The second principle behind our protocol is intended to limit the latency of multicasts given this chaining technique. <p> The chain multicast protocol takes its name from the technique of acknowledgement chaining that was developed in prior work on benignly fault-tolerant systems such as Trans-Total <ref> [9] </ref> and Transis [3]. We outline this technique in Section 4.1 and describe the full protocol in Section 4.2. 4.1 Acknowledgement chaining The chain multicast protocol works by processes sending messages to the group of processes.
Reference: [10] <author> L. E. Moser and P. M. Melliar-Smith. </author> <title> Total ordering algorithms for asynchronous Byzantine systems. </title> <booktitle> In Proceedings of the 9th International Workshop on Distributed Algorithms, </booktitle> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: In particular, our specification is weaker than Byzantine Agreement [8], in that Byzantine Agreement requires a stronger termination condition. Similarly, our specification is weaker than atomic (totally-ordered) multicast (e.g., <ref> [10, 11, 12] </ref>); these protocols implement an ordering requirement that is stronger than Source Order, i.e., that honest processes execute the same sequence of R-deliveries.
Reference: [11] <author> M. K. Reiter. </author> <title> Secure agreement protocols: Reliable and atomic group multicast in Rampart. </title> <booktitle> In Proceedings of the 2nd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 68-80, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: The main contributions of this protocol are two mechanisms for maximizing multicast throughput (i.e., multicast deliveries per second) in the case of no failures, which should be the common case in most systems. These mechanisms significantly improve the message complexity of previously known techniques for reliable multicast (e.g., <ref> [15, 11] </ref>), and can potentially achieve high message throughputs. Preliminary performance measurements conducted in our laboratory on a prototype implementation of this protocol show encouraging results: Our prototype sustains a steady throughput of 250 1-kilobyte messages per second among eight Sparcstation 20s, using hardware broadcast on a 10 Mbit/s Ethernet. <p> It is possible, however, to use known techniques to extend our protocol to operate in a dynamic environment in which processes may leave or join the set of destination processes and in which processes may fail and recover. In particular, using techniques similar to those of <ref> [11] </ref>, our protocol naturally extends to support a virtually synchronous communication environment, which has been shown to simplify the development of distributed programs [2]. These extensions also support more effective failure 2 handling and garbage collection than we describe in this paper. <p> In particular, our specification is weaker than Byzantine Agreement [8], in that Byzantine Agreement requires a stronger termination condition. Similarly, our specification is weaker than atomic (totally-ordered) multicast (e.g., <ref> [10, 11, 12] </ref>); these protocols implement an ordering requirement that is stronger than Source Order, i.e., that honest processes execute the same sequence of R-deliveries.
Reference: [12] <author> M. K. Reiter. </author> <title> The Rampart toolkit for building high-integrity services. </title> <booktitle> In Theory and Practice in Distributed Systems (Lecture Notes in Computer Science 938), </booktitle> <pages> pages 99-110, </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Reliable multicast has been shown to be central to techniques for constructing systems that can operate correctly despite the malicious penetration of some components by an attacker, and specifically for developing secure distributed services <ref> [12] </ref> and multiparty cryptographic protocols [4]. In this paper we present a new, practical reliable multicast protocol that is suitable for use in asynchronous distributed systems and that can tolerate the malicious (Byzantine) behavior of up to fewer than one-third of the destination group members. <p> In addition, while here we present our protocol in a way that allows multicasts only from the processes p 0 ; : : : ; p n1 , it is possible to extend the protocol to allow multicasts from outside the destination group (e.g., in the manner of <ref> [12] </ref>). The above semantics distinguish the problem we are attempting to solve &gt;from other problems studied in the scientific literature on secure and fault-tolerant distributed computing. In particular, our specification is weaker than Byzantine Agreement [8], in that Byzantine Agreement requires a stronger termination condition. <p> In particular, our specification is weaker than Byzantine Agreement [8], in that Byzantine Agreement requires a stronger termination condition. Similarly, our specification is weaker than atomic (totally-ordered) multicast (e.g., <ref> [10, 11, 12] </ref>); these protocols implement an ordering requirement that is stronger than Source Order, i.e., that honest processes execute the same sequence of R-deliveries. <p> Odlyzko, private communication, May 1994). A 300-bit modulus should therefore be used in our protocol only if it is changed frequently, as in <ref> [12] </ref>. 9 4. When token = i, dequeue the first message m in pending, and execute C-mcast (m; B 1 ; p where p )B 2 is already prepared, and B 1 contains (unsigned) message digests of messages that currently satisfy requisites (i)-(iii) above. 5.
Reference: [13] <author> R. L. Rivest. </author> <title> RFC 1321: The MD5 message digest algorithm. </title> <institution> Internet Activities Board, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Thus, for all practical purposes, the digest D (m) uniquely identifies m. Several efficient message digest functions have been proposed (e.g., MD5 <ref> [13] </ref>). B 1 and B 2 can be viewed as acknowledgements of other messages, i.e., if D (M 0 ) 2 B 1 [ B 2 (and p is honest) then p has received M 0 , and we say that p (directly) acknowledges M 0 .
Reference: [14] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosys-tems. </title> <journal> Communications of the ACM 21(2) </journal> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: The novel mechanisms by which we achieve high throughput in our protocol are based on two principles. The factor limiting performance in previous, practical reliable multicast protocols is the cost of computing digital signatures <ref> [14] </ref> on message acknowledgements. Our first principle thus attempts to amortize the cost of computing a digital signature over many multicasts by a technique called acknowledgement chaining. <p> However, communication is asynchronous, in the sense that there is no known finite bound on message transmission times. Each process p possesses a private key known only to itself, with which it can digitally sign sets of messages (e.g., <ref> [14] </ref>). A set B of messages signed by p is denoted p )B. We often use p abbreviation for p )B where M 2 B, i.e., for the signature of a set containing M . <p> In today's computing environments, signature generation is a costly operation that is typically an order of magnitude slower than authenticated message transmission for most reasonable message sizes. For instance, the generation of an RSA <ref> [14] </ref> signature on a 50 MHz Sparcstation 20 using the CryptoLib software package [7] ranges from roughly 15 milliseconds (ms) for a (insecure) 300-bit RSA modulus, 1 to roughly 42ms for a (somewhat more 1 A 300-bit RSA modulus should be secure for roughly an hour against an adversary with the
Reference: [15] <author> S. Toueg. </author> <title> Randomized Byzantine agreements. </title> <booktitle> In Proceedings of the 3rd ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 163-178, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: The main contributions of this protocol are two mechanisms for maximizing multicast throughput (i.e., multicast deliveries per second) in the case of no failures, which should be the common case in most systems. These mechanisms significantly improve the message complexity of previously known techniques for reliable multicast (e.g., <ref> [15, 11] </ref>), and can potentially achieve high message throughputs. Preliminary performance measurements conducted in our laboratory on a prototype implementation of this protocol show encouraging results: Our prototype sustains a steady throughput of 250 1-kilobyte messages per second among eight Sparcstation 20s, using hardware broadcast on a 10 Mbit/s Ethernet.
Reference: [16] <author> V. L. Voydock and S. T. Kent. </author> <title> Security mechanisms in high-level network protocols. </title> <journal> ACM Computing Surveys 15(2) </journal> <pages> 135-171, </pages> <month> June </month> <year> 1983. </year> <month> 11 </month>
Reference-contexts: Processes communicate exclusively via a completely connected, point-to-point network. Communication channels between honest processes are FIFO and authenticated, and protect the integrity of communication using, e.g., well-known cryptographic techniques <ref> [16] </ref>. Communication is reliable, in the sense that if the sender and destination of a message are honest, then the destination eventually receives the message. However, communication is asynchronous, in the sense that there is no known finite bound on message transmission times.
References-found: 16

