URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-94-02.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Email: wilhelms@cs.ucsc.edu avg@cs.ucsc.edu  
Title: Multi-Dimensional Trees for Controlled Volume Rendering and Compression  
Author: Jane Wilhelms and Allen Van Gelder 
Date: Jan. 21, 1994 (rev.)  
Address: Santa Cruz 95064  
Affiliation: Baskin Center for Computer Engineering and Information Sciences University of California,  
Pubnum: UCSC-CRL-94-02  
Abstract: This paper explores the use of multi-dimensional trees to provide spatial and temporal efficiencies in imaging large data sets. Each node of the tree contains a model of the data in terms of a fixed number of basis functions, a measure of the error in that model, and a measure of the importance of the data in the region covered by the node. A divide-and-conquer algorithm permits efficient computation of these quantities at all nodes of the tree. The flexible design permits various sets of basis functions, error criteria, and importance criteria to be implemented easily. Selective traversal of the tree provides images in acceptable time, by drawing nodes that cover a large volume as single objects when the approximation error and/or importance are low, and descending to finer detail otherwise. Trees over very large datasets can be pruned by the same criterion to provide data representations of acceptable size and accuracy. Compression and traversal are controlled by a user-defined combination of modeling error and data importance. For imaging decisions additional parameters are considered, including grid location, allowed time, and projected screen area. To analyse results, two evaluation metrics are used: the first compares the hierarchical model to actual data values, and the second compares the pixel values of images produced by different parameter settings. fl Draft; earlier version was submitted to SIGGRAPH 1994; subject to revision.
Abstract-found: 1
Intro-found: 1
Reference: [Cha93] <author> Judy Challinger. </author> <title> Scalable parallel volume raycasting for nonrectilinear computational grids. </title> <booktitle> In IEEE Parallel Visualization Workshop, </booktitle> <month> October </month> <year> 1993. </year> <note> (to appear). 16 </note>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection [ST90, LH91, WVG91], and preprocessing <ref> [Cha93, DFM87, Wil92, VGW93] </ref>. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis [Mal89, Chu92, Mur93, GSCH93], but it has several significant differences: 1.
Reference: [Chu92] <author> C. K. Chui. </author> <title> An Introduction to Wavelets. </title> <publisher> Academic Press, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis <ref> [Mal89, Chu92, Mur93, GSCH93] </ref>, but it has several significant differences: 1. When a region is divided in two, the two subdivisions are not necessarily of the same length. Lengths that are not powers of two are handled naturally. 2. <p> For 3D data, there are about n=7 nodes for n data points; for 4D, the figure is about n=15. The model is easily compressed by truncating the tree and discarding data in its region where desired. Incidentally, the mean model could be represented with Haar wavelets <ref> [Chu92] </ref>, and, indeed, we first implemented the model in that form. The advantage of the Haar wavelet method is that the tree becomes a complete representation of the data, which is discarded.
Reference: [DFM87] <author> Robert A. Drebin, Elliot K. Fishman, and Donna Magid. </author> <title> Volumetric three-dimensional image rendering: Thresholding vs. non-thresholding techniques. </title> <type> Radiology, </type> <institution> 165:131, </institution> <year> 1987. </year>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection [ST90, LH91, WVG91], and preprocessing <ref> [Cha93, DFM87, Wil92, VGW93] </ref>. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis [Mal89, Chu92, Mur93, GSCH93], but it has several significant differences: 1.
Reference: [FS93] <author> Thomas Funkhouser and Carlo Sequin. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environments. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 27(4) </volume> <pages> 247-254, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Errors can be weighted by an "importance" function (Section 5). 5. We have quantified image differences (Section 8.2). 2 Funkhauser and Sequin used a hierarchy for gaining consistent frame rate for complex viewing environment <ref> [FS93] </ref>. They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection [ST90, LH91, WVG91], and preprocessing [Cha93, DFM87, Wil92, VGW93].
Reference: [GSCH93] <author> Steven J. Gortler, Peter Schroeder, Michael F. Cohen, and Pat Hanrahan. </author> <title> Wavelet radiosity. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 27(4) </volume> <pages> 221-230, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis <ref> [Mal89, Chu92, Mur93, GSCH93] </ref>, but it has several significant differences: 1. When a region is divided in two, the two subdivisions are not necessarily of the same length. Lengths that are not powers of two are handled naturally. 2.
Reference: [Lev89] <author> Marc Levoy. </author> <title> Design for a real-time high-quality volume rendering workstation. </title> <booktitle> In Volume Visualization Workshop, </booktitle> <pages> pages 85-90, </pages> <address> Chapel Hill, NC, </address> <month> May </month> <year> 1989. </year> <institution> Dept. of Computer Science, University of North Carolina. </institution>
Reference-contexts: Meagher did some of the earliest work in representing 3D data using octrees [Mea82], and many variations have appeared over the years. Levoy used a binary octree to avoid regions whose data was transparent <ref> [Lev89, Lev90] </ref>. Wilhelms and Van Gelder used a max-min octree to avoid regions not intersecting the desired isosurface, and presented a space-efficient subdivision strategy, called branch on need (BON) [WVG92]. This paper extends octrees and the BON strategy to k dimensions.
Reference: [Lev90] <author> Marc Levoy. </author> <title> A hybrid ray tracer for rendering polygon and volume data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(2) </volume> <pages> 33-40, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Meagher did some of the earliest work in representing 3D data using octrees [Mea82], and many variations have appeared over the years. Levoy used a binary octree to avoid regions whose data was transparent <ref> [Lev89, Lev90] </ref>. Wilhelms and Van Gelder used a max-min octree to avoid regions not intersecting the desired isosurface, and presented a space-efficient subdivision strategy, called branch on need (BON) [WVG92]. This paper extends octrees and the BON strategy to k dimensions.
Reference: [Lev92] <author> Marc Levoy. </author> <title> Volume rendering using the fourier projection-slice theorem. </title> <booktitle> In Proceedings of Graphics Interface '92, </booktitle> <address> Vancouver, B.C., </address> <year> 1992. </year> <note> Also Stanford University Technical Report CSL-TR-92-521. </note>
Reference-contexts: In constrast to our method, basis functions overlapped, and the calculation of one function value involved as many as 2000 basis functions. Malzbender described efficient volume rendering through the use of Fourier transforms [Mal93]. Levoy described a variation that included a lighting model <ref> [Lev92] </ref>. Neither method can model opacity. Ning and Hesselink [NH92, NH93] used vector quantization to produce compressed data sets that could be rendered directly.
Reference: [LH91] <author> David Laur and Pat Hanrahan. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: This paper extends octrees and the BON strategy to k dimensions. Laur and Hanrahan build an octree over voxels, and compute the data mean and root mean square error (RME2) at each node <ref> [LH91] </ref>. This permits volume rendering by progressive refinement, with the user specifying an error tolerance. Nodes with RME2 within the tolerance are rendered as single "splats". Our work builds upon that paper, and extends it in several ways: 1. <p> They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection <ref> [ST90, LH91, WVG91] </ref>, and preprocessing [Cha93, DFM87, Wil92, VGW93]. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. <p> We have A = A L +A R . The scaled coefficient is the (possibly weighted) mean value of g, and is given by a = h1; 1i This case is essentially the one considered by Laur and Hanrahan, using the voxel model <ref> [LH91] </ref>. Example 3.3: Suppose k = 3 or 4 and B is the trilinear or quadlinear basis. <p> For some data sets, the extra compression that may be possible for a given amount of error may justify such a model. This can again provide continuity when imaging at a single level, as well as easy compressibility. 2 Splatting ameliorates discontinutities, but introduces other rendering inaccuracies involving opacity <ref> [LH91] </ref>. 9 However, even if continuity between regions on a particular hierarchy level is maintained, when imaging is done on different tree levels, discontinuities will result. 4.3 Evaluation Information The two types of evaluation information stored in the hierarchy are nodal error and data importance. 4.3.1 Nodal Error The nodal error <p> Cell trilinear draws (r x 1) fl (r y 1) fl (r z 1) cells. Thus, the voxel models and cell models do not align exactly. Constant value coherent projection is approximately twice as fast as when corner values vary, due to reduced amounts of interpolation. Splatting <ref> [Wes90, LH91] </ref> provides a fast, reasonable alternative to rendering constant value voxels. We preferred coherent projection because the region projections fit more continuously than do splats, particularly when neighboring regions are of different sizes, due to compression.
Reference: [Mal89] <author> S. G. Mallat. </author> <title> A theory for multiresolution signal decomposition: The wavelet representation. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 11(7) </volume> <pages> 674-693, </pages> <year> 1989. </year>
Reference-contexts: Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis <ref> [Mal89, Chu92, Mur93, GSCH93] </ref>, but it has several significant differences: 1. When a region is divided in two, the two subdivisions are not necessarily of the same length. Lengths that are not powers of two are handled naturally. 2.
Reference: [Mal93] <author> Tom Malzbender. </author> <title> Fourier volume rendering. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(3) </volume> <pages> 233-250, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: For example, Muraki used multi-resolution analysis to represent 3D volumes [Mur93]. In constrast to our method, basis functions overlapped, and the calculation of one function value involved as many as 2000 basis functions. Malzbender described efficient volume rendering through the use of Fourier transforms <ref> [Mal93] </ref>. Levoy described a variation that included a lighting model [Lev92]. Neither method can model opacity. Ning and Hesselink [NH92, NH93] used vector quantization to produce compressed data sets that could be rendered directly.
Reference: [Mea82] <author> Donald J. Meagher. </author> <title> Geometric modeling using octree encoding. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 19 </volume> <pages> 129-147, </pages> <year> 1982. </year>
Reference-contexts: Meagher did some of the earliest work in representing 3D data using octrees <ref> [Mea82] </ref>, and many variations have appeared over the years. Levoy used a binary octree to avoid regions whose data was transparent [Lev89, Lev90].
Reference: [Mur93] <author> Shigeru Muraki. </author> <title> Volume data and wavelet transforms. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(4) </volume> <pages> 50-56, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis <ref> [Mal89, Chu92, Mur93, GSCH93] </ref>, but it has several significant differences: 1. When a region is divided in two, the two subdivisions are not necessarily of the same length. Lengths that are not powers of two are handled naturally. 2. <p> Basis functions at the same level have either identical supports, or disjoint supports; there is no overlapping. For example, Muraki used multi-resolution analysis to represent 3D volumes <ref> [Mur93] </ref>. In constrast to our method, basis functions overlapped, and the calculation of one function value involved as many as 2000 basis functions. Malzbender described efficient volume rendering through the use of Fourier transforms [Mal93]. Levoy described a variation that included a lighting model [Lev92]. Neither method can model opacity.
Reference: [NH92] <author> Paul Ning and Lambertus Hesselink. </author> <title> Vector quantization for volume rendering. </title> <booktitle> In 1992 Workshop on Volume Visualization, </booktitle> <pages> pages 69-74, </pages> <address> Boston, Mass., </address> <month> October </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: Malzbender described efficient volume rendering through the use of Fourier transforms [Mal93]. Levoy described a variation that included a lighting model [Lev92]. Neither method can model opacity. Ning and Hesselink <ref> [NH92, NH93] </ref> used vector quantization to produce compressed data sets that could be rendered directly.
Reference: [NH93] <author> Paul Ning and Lambertus Hesselink. </author> <title> Vector quantization for volume rendering. In Visualization '93, </title> <address> San Jose, Ca, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Malzbender described efficient volume rendering through the use of Fourier transforms [Mal93]. Levoy described a variation that included a lighting model [Lev92]. Neither method can model opacity. Ning and Hesselink <ref> [NH92, NH93] </ref> used vector quantization to produce compressed data sets that could be rendered directly.
Reference: [ST90] <author> Peter Shirley and Allan Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection <ref> [ST90, LH91, WVG91] </ref>, and preprocessing [Cha93, DFM87, Wil92, VGW93]. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here.
Reference: [VGW93] <author> Allen Van Gelder and Jane Wilhelms. </author> <title> Rapid exploration of curvilinear grids using direct volume rendering. </title> <booktitle> In Visualization 93 Conference, </booktitle> <address> San Jose, CA, </address> <month> October </month> <year> 1993. </year> <note> IEEE. to appear. </note>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection [ST90, LH91, WVG91], and preprocessing <ref> [Cha93, DFM87, Wil92, VGW93] </ref>. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis [Mal89, Chu92, Mur93, GSCH93], but it has several significant differences: 1.
Reference: [Wes89] <author> Lee Westover. </author> <title> Interactive volume rendering. </title> <booktitle> In Volume Visualization Workshop, </booktitle> <pages> pages 9-16, </pages> <address> Chapel Hill, NC, </address> <month> May </month> <year> 1989. </year> <institution> Dept. of Computer Science, University of North Carolina. </institution>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting <ref> [Wes89, Wes90] </ref>, hardware-assisted projection [ST90, LH91, WVG91], and preprocessing [Cha93, DFM87, Wil92, VGW93]. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here.
Reference: [Wes90] <author> Lee Westover. </author> <title> Footprint evaluation for volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 367-76, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting <ref> [Wes89, Wes90] </ref>, hardware-assisted projection [ST90, LH91, WVG91], and preprocessing [Cha93, DFM87, Wil92, VGW93]. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. <p> Cell trilinear draws (r x 1) fl (r y 1) fl (r z 1) cells. Thus, the voxel models and cell models do not align exactly. Constant value coherent projection is approximately twice as fast as when corner values vary, due to reduced amounts of interpolation. Splatting <ref> [Wes90, LH91] </ref> provides a fast, reasonable alternative to rendering constant value voxels. We preferred coherent projection because the region projections fit more continuously than do splats, particularly when neighboring regions are of different sizes, due to compression.
Reference: [Wil92] <author> Peter Williams. </author> <title> Interactive splatting of nonrectilinear volumes. </title> <booktitle> In Visualization '92, </booktitle> <pages> pages 37-44. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection [ST90, LH91, WVG91], and preprocessing <ref> [Cha93, DFM87, Wil92, VGW93] </ref>. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. Our method of hierarchical data representation has some similarities to wavelets and multi-resolution analysis [Mal89, Chu92, Mur93, GSCH93], but it has several significant differences: 1.
Reference: [WVG91] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> A coherent projection approach for direct volume rendering. </title> <booktitle> Computer Graphics (Proceedings ACM Siggraph), </booktitle> <volume> 25(4) </volume> <pages> 275-284, </pages> <year> 1991. </year>
Reference-contexts: They also used a weighted combination of parameters to control imaging. Other than using hierarchies, speed gains for direct volume rendering have been achieved by using voxel splatting [Wes89, Wes90], hardware-assisted projection <ref> [ST90, LH91, WVG91] </ref>, and preprocessing [Cha93, DFM87, Wil92, VGW93]. Preprocessing, however, often involves creating large auxiliary data structures, which we are particularly trying to avoid in the research presented here. <p> For such a use, the hierarchy must be retained because future more accurate images may require it. 6 Rendering Methods Our hierarchical approach is not restricted to any particular rendering method. The implementation performs direct volume rendering using the coherent projection approach <ref> [WVG91] </ref>. This method calculates information concerning the projection of a rectilinear cell and uses hardware Gouraud-shading for rapid rendering. It is generally used with orthogonal projection on rectilinear cells. While the method does not produce the highest quality images, it does produce quite good images rapidly.

References-found: 21

