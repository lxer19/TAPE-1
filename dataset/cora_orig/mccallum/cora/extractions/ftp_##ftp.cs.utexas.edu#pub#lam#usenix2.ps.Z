URL: ftp://ftp.cs.utexas.edu/pub/lam/usenix2.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/seminar/mypapers.html
Root-URL: 
Title: SNP: An Interface for Secure Network Programming  
Author: Thomas Y.C. Woo, Raghuram Bindignavle, Shaowen Su and Simon S. Lam 
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: SNP provides a high-level abstraction for secure end-to-end network communications. It supports both stream and datagram semantics with security guarantees (e.g., data origin authenticity, data integrity and data confidentiality). It is designed to resemble the Berkeley sockets interface so that security can be easily retrofitted into existing socket programs with only minor modifications. SNP is built on top of GSS-API, thus making it relatively portable across different authentication mechanisms conforming to GSS-API. SNP hides the details of GSS-API (e.g., credentials and contexts management), the communication sublayer as well as the cryptographic sublayer from the application programmers. It also encapsulates security sensitive information, thus preventing accidental or intentional disclosure by an application program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> CCITT Recommendation X.208 Specification of Abstract Syntax Notation one (ASN.1), </institution> <year> 1988. </year> <note> See also ISO/IEC 8824, 1989. 14 And also prefixing socket calls with snp </note> . 
Reference-contexts: Besides, there are far more existing socket programs than TLI programs, though TLI is quickly gaining popularity. * SNP should work in a heterogeneous environment. This entails careful considerations of message encoding and processing. We have chosen XDR [16] for this purpose, mainly for its simplicity. ASN.1 <ref> [1] </ref> is used in other authentication systems (e.g., Kerberos, SPX); we find it to be overly complicated and not suitable as a prototyping tool. From our experience, XDR has been adequate, though not as flexible as we would like. * SNP should be independent of particular cryptosys-tems.
Reference: [2] <author> A.D. Birrell. </author> <title> Secure communication using remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(1) </volume> <pages> 1-14, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: The work most relevant to ours includes several secure RPC systems: the secure RPC package in <ref> [2] </ref>, Sun secure RPC [18] and DCE secure RPC [14]. The goals of these systems are similar to ours: to provide applications transparent access to secure communication. However, the models of communication adopted are different. RPC assumes an implicit communication model. <p> The same difference exists between sockets/TLI and RPC styles of network programming. Apart from this, the implementation of these RPC systems is totally different from ours. For example, they tend to be tightly coupled to the underlying protocol (e.g., a modified Needham-Schroeder protocol [11] is used in <ref> [2] </ref>, Kerberos is used in DCE). Our use of GSS-API provides protocol independence. A recent paper by Wobber et al. [19] describes an operating system interface for supporting authentication. The interface is based on a formal theory of a speaks for relation [7].
Reference: [3] <author> J. Ioannidis and M. </author> <title> Blaze. The architecture and implementation of network-layer security under unix. </title> <booktitle> In Proceedings of 4th Usenix Unix Security Workshop, </booktitle> <address> Santa Clara, Cali-fornia, </address> <month> October 4-6 </month> <year> 1993. </year>
Reference-contexts: We expect a streamlined implementation to perform even better. 8 Related Work Most existing work on secure network communication is focused on the protocol or architecture aspects <ref> [3, 9, 15, 17] </ref>; not much has been done concerning a general secure application network programming interface. The work most relevant to ours includes several secure RPC systems: the secure RPC package in [2], Sun secure RPC [18] and DCE secure RPC [14].
Reference: [4] <author> RSA Laboratories. RSAREF: </author> <title> A cryptographic toolkit for privacy-enhanced mail. </title> <month> January 5 </month> <year> 1993. </year>
Reference-contexts: The resolution of the system clock is in the order of microseconds. 12 We first calibrate the performance of our cryptographic packages. Our DES package is a generic public domain one, while our RSA/MD5 package is from RSAREF <ref> [4] </ref>. Both packages are relatively portable, and are not optimized. The calibration allows us to determine the overhead introduced by the SNP layer, excluding cryptographic cost.
Reference: [5] <author> J.B. Lacy, D.P. Mitchell, and W.M. </author> <title> Schell. </title> <booktitle> Cryptolib: Cryptography in software. In Proceedings of Usenix Unix Security Workshop IV, </booktitle> <pages> pages 1-17, </pages> <address> Santa Clara, California, </address> <month> October 4-6 </month> <year> 1993. </year>
Reference-contexts: One of the other impediments is performance. With rapidly improving cryptographic software and hardware, this should be a diminishing problem. As demonstrated in <ref> [5] </ref>, the speed of a modern RISC-based workstation is already quite adequate for most cryptographic computation, provided the right algorithms and optimizations are used. We are also considering several interesting extensions to the SNP interface. First, delegation can be added.
Reference: [6] <author> B. Lampson, M. Abadi, M. Burrows, and T. Wobber. </author> <title> Authentication in distributed systems: Theory and practice. </title> <booktitle> In Proceedings of 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 165-182, </pages> <booktitle> Asilomar Conference Center, </booktitle> <address> Pacific Grove, California, </address> <month> October 13-16 </month> <year> 1991. </year>
Reference: [7] <author> B. Lampson, M. Abadi, M. Burrows, and T. Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <month> November </month> <year> 1992. </year> <note> A preliminary version of this paper appeared as [6]. </note>
Reference-contexts: Our use of GSS-API provides protocol independence. A recent paper by Wobber et al. [19] describes an operating system interface for supporting authentication. The interface is based on a formal theory of a speaks for relation <ref> [7] </ref>. Its concrete implementation contains several interesting abstract datatypes, e.g., a Prin type that represents principals, and an Auth type that represents principals a process can speak for. In relating to our work, their interface can be used as an alternate lower interface for SNP.
Reference: [8] <author> J. Linn. </author> <title> Generic Security Service Application Program Interface, </title> <month> September </month> <year> 1993. </year> <note> RFC 1508. </note>
Reference-contexts: For example, it often takes a considerable amount of effort to kerberize an existing distributed service. Besides, the interface provided is not portable, making the switch from one authentication system to another a non-trivial task. The recently published Internet draft standard Generic Security Service Application Program Interface (GSS-API) <ref> [8] </ref> alleviates the problem somewhat. In fact, both SPX and KryptoKnight 1 have already implemented a small subset of GSS-API. 2 However, the GSS-API interface is still too low-level to be practical for typical network application programming. <p> It is valid to say that GSS-API is more suited for use in system software than in regular application programming. Indeed, it is intended that a typical caller of GSS-API be a communication protocol, e.g., telnet, ftp <ref> [8, p. 2] </ref>. We believe that what is needed is an abstraction for secure network programming that can hide most of the details of GSS-API while retaining the same ease of use as most existing abstractions for network programming.
Reference: [9] <author> R. Molva, G. Tsudik, E. Van Herreweghen, and S. Zatti. </author> <title> KryptoKnight authentication and key distribution system. </title> <booktitle> In Proceedings of 2nd European Symposium on Research in Computer Security, </booktitle> <pages> pages 155-174, </pages> <address> Toulouse, France, November 23-25 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: MDA 904-91-C7046 and MDA 904-93-C4089, and in part by National Science Foundation grant no. NCR-9004464. Published in Proceedings USENIX Summer Technical Conference, Boston, MA, June 1994. Postscript files of this and other papers of the Networking Research Laboratory are available from http://www.cs.utexas.edu/~lam/NRL. <ref> [9] </ref>) have been designed and implemented. Although these systems do provide an adequate solution for typical network security concerns, they suffer a major common drawback, namely, it is difficult to integrate them into an application. <p> The use of GSS-API is mentioned in <ref> [9] </ref>. But it is not clear to what extent the interface has been implemented. 2 A recent article in comp.protocols.kerberos states that implementations of GSS-API for Kerberos will also be available. 3 In fact, Berkeley sockets have often been touted as a major contributing factor to the popularity of TCP/IP. <p> We expect a streamlined implementation to perform even better. 8 Related Work Most existing work on secure network communication is focused on the protocol or architecture aspects <ref> [3, 9, 15, 17] </ref>; not much has been done concerning a general secure application network programming interface. The work most relevant to ours includes several secure RPC systems: the secure RPC package in [2], Sun secure RPC [18] and DCE secure RPC [14].
Reference: [10] <institution> National Bureau of Standards, Washingtion, D.C. </institution> <note> Data Encryption Standarad FIPS Pub 46, January 15 1977. </note>
Reference-contexts: We achieve this by encapsulating all cryptographic functions using a generic cryptographic interface. In our current implementation, we use the de facto standard cryptosystem trio, i.e., DES <ref> [10] </ref> for symmetric encryption, RSA [13] for asymmetric en cryption and MD5 [12] for message digest. 7 Reserved ports are a matter of conventiononly, there is no permanent binding. 4 Services Provided Security is only well-defined with respect to a threat model.
Reference: [11] <author> R.M. Needham and M.D. Schroeder. </author> <title> Using encryption for authentication in large networks of computers. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 993-999, </pages> <month> December </month> <year> 1978. </year>
Reference-contexts: The same difference exists between sockets/TLI and RPC styles of network programming. Apart from this, the implementation of these RPC systems is totally different from ours. For example, they tend to be tightly coupled to the underlying protocol (e.g., a modified Needham-Schroeder protocol <ref> [11] </ref> is used in [2], Kerberos is used in DCE). Our use of GSS-API provides protocol independence. A recent paper by Wobber et al. [19] describes an operating system interface for supporting authentication. The interface is based on a formal theory of a speaks for relation [7].
Reference: [12] <author> R. Rivest. </author> <title> The MD5 Message-Digest Algorithm, </title> <month> April </month> <year> 1992. </year> <note> RFC 1321. </note>
Reference-contexts: We achieve this by encapsulating all cryptographic functions using a generic cryptographic interface. In our current implementation, we use the de facto standard cryptosystem trio, i.e., DES [10] for symmetric encryption, RSA [13] for asymmetric en cryption and MD5 <ref> [12] </ref> for message digest. 7 Reserved ports are a matter of conventiononly, there is no permanent binding. 4 Services Provided Security is only well-defined with respect to a threat model. In this paper, we assume the standard threat model.
Reference: [13] <author> R.L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosys-tems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> Febru-ary </month> <year> 1978. </year>
Reference-contexts: We achieve this by encapsulating all cryptographic functions using a generic cryptographic interface. In our current implementation, we use the de facto standard cryptosystem trio, i.e., DES [10] for symmetric encryption, RSA <ref> [13] </ref> for asymmetric en cryption and MD5 [12] for message digest. 7 Reserved ports are a matter of conventiononly, there is no permanent binding. 4 Services Provided Security is only well-defined with respect to a threat model. In this paper, we assume the standard threat model.
Reference: [14] <author> W. Rosenberry, D. Kenny, and G. Fisher. </author> <title> Understanding DCE. </title> <publisher> O'Reilley & Associates, Inc., </publisher> <year> 1992. </year>
Reference-contexts: The work most relevant to ours includes several secure RPC systems: the secure RPC package in [2], Sun secure RPC [18] and DCE secure RPC <ref> [14] </ref>. The goals of these systems are similar to ours: to provide applications transparent access to secure communication. However, the models of communication adopted are different. RPC assumes an implicit communication model.
Reference: [15] <author> J.G. Steiner, C. Neuman, and J.I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Proceedings of USENIX Winter Conference, </booktitle> <pages> pages 191-202, </pages> <address> Dallas, TX, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: An important element of such a infrastructure is a convenient abstraction for secure application network programming. In recent years, distributed systems security has received a great deal of attention. For example, a number of authentication systems (e.g., Kerberos from MIT <ref> [15] </ref>, SPX from DEC [17] and KryptoKnight from IBM fl Research supported in part by NSA INFOSEC University Research Program under contract no. MDA 904-91-C7046 and MDA 904-93-C4089, and in part by National Science Foundation grant no. NCR-9004464. Published in Proceedings USENIX Summer Technical Conference, Boston, MA, June 1994. <p> We expect a streamlined implementation to perform even better. 8 Related Work Most existing work on secure network communication is focused on the protocol or architecture aspects <ref> [3, 9, 15, 17] </ref>; not much has been done concerning a general secure application network programming interface. The work most relevant to ours includes several secure RPC systems: the secure RPC package in [2], Sun secure RPC [18] and DCE secure RPC [14].
Reference: [16] <author> Sun Microsystems, Inc. XDR: </author> <title> External Data Representation Standard, </title> <month> June </month> <year> 1987. </year> <note> RFC 1057. </note>
Reference-contexts: Besides, there are far more existing socket programs than TLI programs, though TLI is quickly gaining popularity. * SNP should work in a heterogeneous environment. This entails careful considerations of message encoding and processing. We have chosen XDR <ref> [16] </ref> for this purpose, mainly for its simplicity. ASN.1 [1] is used in other authentication systems (e.g., Kerberos, SPX); we find it to be overly complicated and not suitable as a prototyping tool.
Reference: [17] <author> J.J. Tardo and K. Alagappan. SPX: </author> <title> Global authentication using public key certificates. </title> <booktitle> In Proceedings of 12th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 232-244, </pages> <address> Oakland, California, </address> <month> May 20-22 </month> <year> 1991. </year>
Reference-contexts: An important element of such a infrastructure is a convenient abstraction for secure application network programming. In recent years, distributed systems security has received a great deal of attention. For example, a number of authentication systems (e.g., Kerberos from MIT [15], SPX from DEC <ref> [17] </ref> and KryptoKnight from IBM fl Research supported in part by NSA INFOSEC University Research Program under contract no. MDA 904-91-C7046 and MDA 904-93-C4089, and in part by National Science Foundation grant no. NCR-9004464. Published in Proceedings USENIX Summer Technical Conference, Boston, MA, June 1994. <p> We expect a streamlined implementation to perform even better. 8 Related Work Most existing work on secure network communication is focused on the protocol or architecture aspects <ref> [3, 9, 15, 17] </ref>; not much has been done concerning a general secure application network programming interface. The work most relevant to ours includes several secure RPC systems: the secure RPC package in [2], Sun secure RPC [18] and DCE secure RPC [14].
Reference: [18] <author> B. Taylor and D. Goldberg. </author> <title> Secure networking in the Sun environment. </title> <booktitle> In Proceedings of Summer Usenix Conference, </booktitle> <pages> pages 28-37, </pages> <address> Atlanta, Georgia, </address> <month> June </month> <year> 1986. </year>
Reference-contexts: The work most relevant to ours includes several secure RPC systems: the secure RPC package in [2], Sun secure RPC <ref> [18] </ref> and DCE secure RPC [14]. The goals of these systems are similar to ours: to provide applications transparent access to secure communication. However, the models of communication adopted are different. RPC assumes an implicit communication model.
Reference: [19] <author> E. Wobber, M. Abadi, M. Burrows, and B. Lampson. </author> <booktitle> Au--thentication in the Taos operating system. In Proceedings of 14th ACM Symposium on Operating Systems Principles, </booktitle> <address> Ashville, North Carolina, </address> <year> 1993. </year>
Reference-contexts: For example, they tend to be tightly coupled to the underlying protocol (e.g., a modified Needham-Schroeder protocol [11] is used in [2], Kerberos is used in DCE). Our use of GSS-API provides protocol independence. A recent paper by Wobber et al. <ref> [19] </ref> describes an operating system interface for supporting authentication. The interface is based on a formal theory of a speaks for relation [7]. Its concrete implementation contains several interesting abstract datatypes, e.g., a Prin type that represents principals, and an Auth type that represents principals a process can speak for. <p> In relating to our work, their interface can be used as an alternate lower interface for SNP. In other words, instead of translating SNP-API calls to GSS-API calls, they can be translated to calls to the interface in <ref> [19] </ref>. Such a translation should be quite straightforward because of the high level of abstraction supported. A major disadvantage of their interface, though, is the lack of compatibility with other security mechanisms, e.g., Kerberos. <p> Some of these issues are: the development of a security infrastructure that provides uniform management and distribution of credentials (particularly for interdomain authentication), and operating system support for basic security concepts such as identity (see <ref> [19] </ref>). One of the other impediments is performance. With rapidly improving cryptographic software and hardware, this should be a diminishing problem. As demonstrated in [5], the speed of a modern RISC-based workstation is already quite adequate for most cryptographic computation, provided the right algorithms and optimizations are used.
Reference: [20] <author> T.Y.C. Woo. </author> <title> Authentication and Authorization in Distributed Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: This provides cryptosystem independence and facilitates easy substitution when new (implementations of) cryptosystems are available. Further discussion of our GSS-API implementation and the underlying authentication protocol is beyond the scope of this paper; interested readers can consult <ref> [23, 20] </ref> for more details. The main function of the SNP layer is context and credential management. It initiates the acquisition of credentials, monitors the status of contexts and credentials, and initiates renegotiation (of contexts) and/or reacquisition (of credentials), if necessary. <p> The authentication protocol underlying our GSS-API implementation is shown in Figure 6 (I denotes the initiator, R the responder and AS the authentication server). The protocol was initially published in [22], and later verified in <ref> [20, 23] </ref>. The mapping of this protocol to GSS-API is quite straightforward, and is described in [23]. The key point to note is that the communications with AS (steps (CE4)-(CE6)) are completely encapsulated within GSS-API, and are not observable by the SNP layer.
Reference: [21] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authentication for distributed systems. </title> <journal> Computer, </journal> <volume> 25(1) </volume> <pages> 39-52, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: It should be noted, however, that the actual storage of contexts and credentials is internal to GSS-API. 2.3 SNP in Context SNP is part of a larger project of ours that concerns the design and implementation of an authentication framework for distributed systems <ref> [21] </ref>. The framework addresses a range of authentication needs that includes bootstrapping, user logins and peer communications. SNP is designed as an interface for accessing the peer authentication protocol in our framework.
Reference: [22] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authentication revisited. </title> <booktitle> Computer, </booktitle> <address> 25(3):10, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: The authentication protocol underlying our GSS-API implementation is shown in Figure 6 (I denotes the initiator, R the responder and AS the authentication server). The protocol was initially published in <ref> [22] </ref>, and later verified in [20, 23]. The mapping of this protocol to GSS-API is quite straightforward, and is described in [23]. The key point to note is that the communications with AS (steps (CE4)-(CE6)) are completely encapsulated within GSS-API, and are not observable by the SNP layer.

References-found: 22

