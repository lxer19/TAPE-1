URL: http://www.cs.wisc.edu/~condon/papers/cfls95.ps
Refering-URL: http://www.cs.wisc.edu/~condon/condon.html
Root-URL: 
Title: Probabilistically Checkable Debate Systems and Nonapproximability of PSPACE-Hard Functions  
Author: Anne Condon Joan Feigenbaum Carsten Lund Peter Shor 
Date: May 12, 1995  
Abstract: We initiate an investigation of probabilistically checkable debate systems (PCDS's), a natural generalization of probabilistically checkable proof systems. A PCDS for a language L consists of a probabilistic polynomial-time verifier V and a debate between player 1, who claims that the input x is in L, and player 0, who claims that the input x is not in L. We show that there is a PCDS for L in which V flips O(log n) random coins and reads O(1) bits of the debate if and only if L is in PSPACE. This characterization of PSPACE is used to show that certain PSPACE-hard functions are as hard to approximate closely as they are to compute exactly.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proc. 33rd Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1992. </year>
Reference-contexts: The class PCP (r (n); q (n)) consists of those languages recognizable by PCPS's in which the verifier uses O (r (n)) coin flips and looks at O (q (n)) bits. It is known that PCP (log n; 1) = NP (cf. <ref> [1, 2] </ref>). Results on the power of classes PCP (r (n); q (n)) can be used to show that many approximation problems are hard, unless there is some unexpected collapse of complexity classes. The first result along these lines was proven by Condon [7]. <p> The result of [11] has been improved several times, and it is now known that there is an * such that approximating MAX-CLIQUE within a factor of n * is as difficult as solving NP-complete problems exactly <ref> [1] </ref>. <p> optimization problems, those hard for the class MAX-SNP defined in [21], that do not have polynomial-time approximation schemes unless P = NP; that is, for each of these problems, there is an * such that approximating the optimal solution within ratio * is as hard as solving NP-complete problems exactly <ref> [1] </ref>. This result on MAX-SNP shows that many well-known optimization problems are hard to approximate closely, including Traveling Salesman with Triangle Inequality, MAX-SAT, and MAX-CUT. A PCDS is a generalization of a PCPS. <p> Surprisingly, for r (n) = (log n), the answer is no. This result relies heavily on the following fact about probabilistically checkable proofs. Theorem 3.1 (Arora et al. <ref> [1] </ref>) Let k, n 1 , n 2 , : : :, and n k be integers and '(x 1 ; x 2 ; : : : ; x k ) be an NP predicate, where jx i j = n i , for i = 1; 2; : : : <p> We let MAX QSAT (resp. MAX Q3SAT) be the function whose domain is the set of quantified formulas that maps a quantified formula (resp. quantified 3CNF formula) to the maximum number of simultaneously satisfiable clauses. The results in <ref> [1, 2] </ref> shows that MAX QSAT is NP-hard to approximate within certain ratios. Theorem 4.1 There is a constant 0 &lt; * &lt; 1 such that approximating MAX Q3SAT within ratio * is PSPACE-hard. Proof: Let L be a language in PSPACE.
Reference: [2] <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs. </title> <booktitle> In Proc. 33rd Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-13. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1992. </year>
Reference-contexts: The class PCP (r (n); q (n)) consists of those languages recognizable by PCPS's in which the verifier uses O (r (n)) coin flips and looks at O (q (n)) bits. It is known that PCP (log n; 1) = NP (cf. <ref> [1, 2] </ref>). Results on the power of classes PCP (r (n); q (n)) can be used to show that many approximation problems are hard, unless there is some unexpected collapse of complexity classes. The first result along these lines was proven by Condon [7]. <p> We let MAX QSAT (resp. MAX Q3SAT) be the function whose domain is the set of quantified formulas that maps a quantified formula (resp. quantified 3CNF formula) to the maximum number of simultaneously satisfiable clauses. The results in <ref> [1, 2] </ref> shows that MAX QSAT is NP-hard to approximate within certain ratios. Theorem 4.1 There is a constant 0 &lt; * &lt; 1 such that approximating MAX Q3SAT within ratio * is PSPACE-hard. Proof: Let L be a language in PSPACE.
Reference: [3] <author> R. Aumann and S. Hart, </author> <title> editors. </title> <booktitle> Handbook of Game Theory, </booktitle> <volume> volume 1. </volume> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference-contexts: Allowing the players to use randomization would not change the class PCD (r (n); q (n)); this follows from the standard game-theoretic result that, in perfect information games, players always have deterministic strategies that are optimal <ref> [3] </ref>. With the above definition in hand, we can state our main results about the language-recognition power of PCDS's. Theorem: PSPACE = PCD (log n; 1). This result is best possible, because one can show that PCD (log n; q (n)) is contained in PSPACE, for any function q.
Reference: [4] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin games: A randomized proof system and a hierarchy of complexity classes. </title> <journal> J. Computer and System Sciences, </journal> <volume> 36 </volume> <pages> 254-276, </pages> <year> 1988. </year>
Reference-contexts: A polynomial-round Arthur-Merlin game with a polynomial-time verifier <ref> [4] </ref> can be thought of as a PCDS in which r (n) and q (n) are both arbitrary polynomials and one of the debaters simply makes random moves. Let AM (poly (n)) denote the class of languages accepted by such Arthur-Merlin games.
Reference: [5] <author> H. Bodlaender. </author> <title> Private communication. </title> <type> 27 </type>
Reference-contexts: We were thus led to ask in [8, 9] whether there is a natural PSPACE-hard function that has a PTAS. A positive answer to this question is provided in [19]. Bodlaender <ref> [5] </ref> has extended our results by showing that MAX-Q-3SAT can be approximated within some 0 &lt; * &lt; 1 and by providing a simpler proof of the fact that MAX GGEOG is PSPACE-hard to approximate; his proof that approximating MAX GGEOG is hard does not involve PCDS's.
Reference: [6] <author> A. Cohen and A. Wigderson. Dispersers, </author> <title> deterministic amplification, and weak random sources. </title> <booktitle> In Proc. 30th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-19. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1989. </year>
Reference-contexts: Let (log n)-MAX-Q-FORMULA be the function whose domain is the set of quantified formulas in which the "clauses" are general formulas with at most log n variables instead of being in CNF. The above result can be extended (using standard pseudorandom sampling techniques <ref> [6, 15] </ref>) to prove the following. Theorem 4.2 There is a constant * &gt; 0 such that approximating (log n)-MAX-Q-FORMULA within ratio n * is PSPACE-hard. We next consider a variant of Q3SAT called Balanced Q3SAT.
Reference: [7] <author> A. Condon. </author> <title> The complexity of the max word problem and the power of one-way interactive proof systems. </title> <journal> Computational Complexity, </journal> <volume> 3 </volume> <pages> 292-305, </pages> <year> 1993. </year>
Reference-contexts: Results on the power of classes PCP (r (n); q (n)) can be used to show that many approximation problems are hard, unless there is some unexpected collapse of complexity classes. The first result along these lines was proven by Condon <ref> [7] </ref>. In a seminal paper, Feige et al. [11] showed that MAX-CLIQUE is difficult to approximate.
Reference: [8] <author> A. Condon, J. Feigenbaum, C. Lund, and P. Shor. </author> <title> Probabilistically checkable debate systems and approximation algorithms for PSPACE-hard functions. </title> <type> Technical memorandum, </type> <institution> AT&T Bell Laboratories, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: Voter V is too busy to catch more than a very small number of bits of the debate. How does V decide which of B or C won the debate? In this paper, we show that if fl These results first appeared in our Technical Memorandum <ref> [8] </ref>. <p> The paths from the nodes y 0 k to u n+1 are longer than before and depend on *. 5 Subsequent Related Work This section contains a brief discussion of related work that has been done since our results first appeared in <ref> [8, 9] </ref>. A polynomial-round Arthur-Merlin game with a polynomial-time verifier [4] can be thought of as a PCDS in which r (n) and q (n) are both arbitrary polynomials and one of the debaters simply makes random moves. <p> We have described PSPACE-hard functions that do not have PTAS's, unless some unexpected collapse occurs. It is not hard to define a PSPACE-hard 26 function that does have a PTAS, but the straightforward examples are artificial. We were thus led to ask in <ref> [8, 9] </ref> whether there is a natural PSPACE-hard function that has a PTAS. A positive answer to this question is provided in [19].
Reference: [9] <author> A. Condon, J. Feigenbaum, C. Lund, and P. Shor. </author> <title> Probabilistically checkable debate systems and approximation algorithms for PSPACE-hard functions (extended abstract). </title> <booktitle> In Proc. 25th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 305-314. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: They were presented in preliminary form at the 25th Annual ACM Symposium on Theory of Computing, San Diego CA, May 1993, under the title "Probabilistically Checkable Debate Systems and Approximation Algorithms for PSPACE-Hard Functions" <ref> [9] </ref>. y University of Wisconsin, Computer Sciences Department, 1210 West Dayton Street, Madi-son, WI 57306 USA, condon@cs.wisc.edu. Supported in part by NSF grants CCR-9100886 and CCR-9257241. z AT&T Bell Laboratories, Room 2C473, 600 Mountain Avenue, P. O. <p> The paths from the nodes y 0 k to u n+1 are longer than before and depend on *. 5 Subsequent Related Work This section contains a brief discussion of related work that has been done since our results first appeared in <ref> [8, 9] </ref>. A polynomial-round Arthur-Merlin game with a polynomial-time verifier [4] can be thought of as a PCDS in which r (n) and q (n) are both arbitrary polynomials and one of the debaters simply makes random moves. <p> We have described PSPACE-hard functions that do not have PTAS's, unless some unexpected collapse occurs. It is not hard to define a PSPACE-hard 26 function that does have a PTAS, but the straightforward examples are artificial. We were thus led to ask in <ref> [8, 9] </ref> whether there is a natural PSPACE-hard function that has a PTAS. A positive answer to this question is provided in [19].
Reference: [10] <author> A. Condon, J. Feigenbaum, C. Lund, and P. Shor. </author> <title> Random debaters and the hardness of approximating stochastic functions. </title> <booktitle> In Proc. 9th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 280-293. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1994. </year> <note> Final version to appear in SIAM Journal on Computing. </note>
Reference-contexts: In this context, the fact that AM (poly (n)) = PSPACE (cf. [18, 23]) means that, if r (n) and q (n) are both arbitrary polynomials, then the universal debater in a PCDS can be replaced by a random debater without loss of generality. In <ref> [10] </ref>, we show that, even if r (n) = log n and q (n) = 1, one can replace the universal debater by a random debater and still retain the power to recognize any language in PSPACE.
Reference: [11] <author> U. Feige, S. Goldwasser, L. Lovasz, M. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In Proc. 32nd Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-12. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1991. </year>
Reference-contexts: Results on the power of classes PCP (r (n); q (n)) can be used to show that many approximation problems are hard, unless there is some unexpected collapse of complexity classes. The first result along these lines was proven by Condon [7]. In a seminal paper, Feige et al. <ref> [11] </ref> showed that MAX-CLIQUE is difficult to approximate. The result of [11] has been improved several times, and it is now known that there is an * such that approximating MAX-CLIQUE within a factor of n * is as difficult as solving NP-complete problems exactly [1]. <p> The first result along these lines was proven by Condon [7]. In a seminal paper, Feige et al. <ref> [11] </ref> showed that MAX-CLIQUE is difficult to approximate. The result of [11] has been improved several times, and it is now known that there is an * such that approximating MAX-CLIQUE within a factor of n * is as difficult as solving NP-complete problems exactly [1].
Reference: [12] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractibility: A guide to the theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> San Fran-sisco, </address> <year> 1979. </year>
Reference-contexts: If algorithm A computes the function g, we also say that g approximates f within ratio *. The function f has a polynomial-time approximation scheme, or PTAS, if for each *; 0 &lt; * &lt; 1, there is a polynomial-time algorithm A that approximates f within ratio * <ref> [12] </ref>. We say that a function g is PSPACE-hard if PSPACE P g , i.e., if every language in PSPACE is polynomial-time reducible to g. By "approximating f within ratio *(n) is PSPACE-hard," we mean that, if g approximates f within ratio *(n), then g is PSPACE-hard.
Reference: [13] <author> P. Gemmell and M. Sudan. </author> <title> Highly resilient correctors for polynomials. </title> <journal> Inf. Proc. Letters, </journal> <volume> 43 </volume> <pages> 169-174, </pages> <year> 1992. </year>
Reference-contexts: This defines a function g : Z l p ! Z p . It is easy to see that the multivariate polynomial self-corrector due to Gem-mell and Sudan <ref> [13] </ref> can be used to construct a decoding function H such that, for any g; x: The self-corrector in [13] is randomized, but in our context it uses O (log n) random bits and can therefore be made deterministic at the expense of a polynomial factor in running time. <p> This defines a function g : Z l p ! Z p . It is easy to see that the multivariate polynomial self-corrector due to Gem-mell and Sudan <ref> [13] </ref> can be used to construct a decoding function H such that, for any g; x: The self-corrector in [13] is randomized, but in our context it uses O (log n) random bits and can therefore be made deterministic at the expense of a polynomial factor in running time. Assume that E (z) 1=12. Thus there exists x such that (z; E (x)) &lt; 1=12.
Reference: [14] <author> H. Hunt III, M. Marathe, and R. Stearns. </author> <title> Generalized CNF satisfiability problems and non-efficient approximability. </title> <booktitle> In Proc. 9th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 356-366. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1994. </year>
Reference-contexts: Hunt et al. <ref> [14] </ref> showed, also using direct reduction arguments, that it is PSPACE-hard to approximate several other constrained optimization problems within certain factors. These problems include MAX-Q-FORMULA, a generalization of (log n)-MAX-Q-FORMULA, where the "clauses" are general formulas (with no restrictions on the number of variables per "clause").
Reference: [15] <author> R. Impagliazzo and D. Zuckerman. </author> <title> How to recycle random bits. </title> <booktitle> In Proc. 30th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 248-253. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1989. </year>
Reference-contexts: Let (log n)-MAX-Q-FORMULA be the function whose domain is the set of quantified formulas in which the "clauses" are general formulas with at most log n variables instead of being in CNF. The above result can be extended (using standard pseudorandom sampling techniques <ref> [6, 15] </ref>) to prove the following. Theorem 4.2 There is a constant * &gt; 0 such that approximating (log n)-MAX-Q-FORMULA within ratio n * is PSPACE-hard. We next consider a variant of Q3SAT called Balanced Q3SAT.
Reference: [16] <author> D. S. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> J. Computer and System Sciences, </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year> <month> 28 </month>
Reference-contexts: Let 0 be the formula obtained from by eliminating all universally quantified variables. Since is balanced, note that the number of clauses of 0 is equal to the number of clauses of (however, clauses may now have only one literal). Johnson <ref> [16] </ref> showed that a truth assignment to the variables of 0 that satisfies at least 1=2 of the clauses can be found in polynomial time.
Reference: [17] <author> D. Kozen. </author> <title> Lower bounds for natural proof systems. </title> <booktitle> In Proc. 18rd Sympo--sium on Foundations of Computer Science, </booktitle> <pages> pages 254-266. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1977. </year>
Reference-contexts: Thus MAX Q3SAT is as hard to approximate closely as it is to compute exactly. We use reductions to prove that certain other PSPACE-hard functions are PSPACE-hard to approximate in a stronger sense. These include maximization versions of the Finite Automata Intersection problem, shown PSPACE-complete 3 by Kozen <ref> [17] </ref>, and the Generalized Geography problem, shown PSPACE-com-plete by Schaefer [22]. We show that there is a constant * such that approximating these problems within ratio n * is PSPACE-hard. The rest of this paper is organized as follows. <p> We prove even stronger results for the maximization versions of several other PSPACE-complete problems. For example, there is a constant * &gt; 0 such that approximating Finite Automata Intersection (cf. Kozen <ref> [17] </ref>) and Generalized Geography (cf. Schaefer [22]) within ratio n * is PSPACE-hard. We first consider variants of a well-known PSPACE-complete problem, that of deciding whether a quantified Boolean formula is true. <p> Let FA-INT be the set of sequences A 1 ; A 2 ; : : : ; A m of deterministic finite-state automata having the same input alphabet such that there exists a string w that is accepted by all the automata. Kozen <ref> [17] </ref> showed the problem to be PSPACE-complete.
Reference: [18] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <journal> J. ACM, </journal> <volume> 39 </volume> <pages> 859-868, </pages> <year> 1992. </year>
Reference-contexts: Let AM (poly (n)) denote the class of languages accepted by such Arthur-Merlin games. In this context, the fact that AM (poly (n)) = PSPACE (cf. <ref> [18, 23] </ref>) means that, if r (n) and q (n) are both arbitrary polynomials, then the universal debater in a PCDS can be replaced by a random debater without loss of generality.
Reference: [19] <author> M. Marathe, H. Hunt III, R. Stearns, and V. Radhakrishnan. </author> <title> Hierarchical specifications and polynomial-time approximation schemes for PSPACE-complete problems. </title> <booktitle> In Proc. 26th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 468-477. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: We were thus led to ask in [8, 9] whether there is a natural PSPACE-hard function that has a PTAS. A positive answer to this question is provided in <ref> [19] </ref>. Bodlaender [5] has extended our results by showing that MAX-Q-3SAT can be approximated within some 0 &lt; * &lt; 1 and by providing a simpler proof of the fact that MAX GGEOG is PSPACE-hard to approximate; his proof that approximating MAX GGEOG is hard does not involve PCDS's.
Reference: [20] <author> C. Papadimitriou. </author> <title> Games against nature. </title> <journal> J. Computer and System Sciences, </journal> <volume> 31 </volume> <pages> 288-301, </pages> <year> 1985. </year>
Reference-contexts: This fact has implications for the hardness of approximating stochastic PSPACE-hard functions, of the type studied by Papadimitriou <ref> [20] </ref>. We have described PSPACE-hard functions that do not have PTAS's, unless some unexpected collapse occurs. It is not hard to define a PSPACE-hard 26 function that does have a PTAS, but the straightforward examples are artificial.
Reference: [21] <author> C. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> J. Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, there is a large class of natural optimization problems, those hard for the class MAX-SNP defined in <ref> [21] </ref>, that do not have polynomial-time approximation schemes unless P = NP; that is, for each of these problems, there is an * such that approximating the optimal solution within ratio * is as hard as solving NP-complete problems exactly [1].
Reference: [22] <author> T. J. Schaefer. </author> <title> On the complexity of some two-person perfect-information games. </title> <journal> J. Computer and System Sciences, </journal> <volume> 16 </volume> <pages> 185-225, </pages> <year> 1978. </year>
Reference-contexts: We use reductions to prove that certain other PSPACE-hard functions are PSPACE-hard to approximate in a stronger sense. These include maximization versions of the Finite Automata Intersection problem, shown PSPACE-complete 3 by Kozen [17], and the Generalized Geography problem, shown PSPACE-com-plete by Schaefer <ref> [22] </ref>. We show that there is a constant * such that approximating these problems within ratio n * is PSPACE-hard. The rest of this paper is organized as follows. We define PCDS's, and all of our other terms, precisely in Section 2. <p> We prove even stronger results for the maximization versions of several other PSPACE-complete problems. For example, there is a constant * &gt; 0 such that approximating Finite Automata Intersection (cf. Kozen [17]) and Generalized Geography (cf. Schaefer <ref> [22] </ref>) within ratio n * is PSPACE-hard. We first consider variants of a well-known PSPACE-complete problem, that of deciding whether a quantified Boolean formula is true. <p> A marker is initially placed on s, and two players, 0 and 1, alternately move it along an edge, with the constraint that player 1 starts and each edge can be used only once. The first player unable to move loses. Schaefer <ref> [22] </ref> defines GGEOG to be the set of pairs (G; s) such that player 1 has a winning strategy. Informally, a natural optimization version of GGEOG is to compute how long player 1 can keep the game going, even if player 1 does not eventually win the game. <p> Theorem 4.6 There is a constant * &gt; 0 such that it is PSPACE-hard to approximate MAX GGEOG within ratio n * . Proof: We first modify Schaefer's reduction <ref> [22] </ref> to obtain a reduction from MAX Q3SAT to MAX GGEOG. We later describe a simple modification of our construction, to obtain a reduction from log n-MAX-Q-FORMULA to MAX GGEOG.
Reference: [23] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <journal> J. ACM, </journal> <volume> 39 </volume> <pages> 869-877, </pages> <year> 1992. </year> <month> 29 </month>
Reference-contexts: Let AM (poly (n)) denote the class of languages accepted by such Arthur-Merlin games. In this context, the fact that AM (poly (n)) = PSPACE (cf. <ref> [18, 23] </ref>) means that, if r (n) and q (n) are both arbitrary polynomials, then the universal debater in a PCDS can be replaced by a random debater without loss of generality.
References-found: 23

