URL: ftp://ftp.cc.gatech.edu/pub/ai/goel/eleni/ecml.ps
Refering-URL: http://www.cs.gatech.edu/aimosaic/faculty/goel/ABSTRACTS-summary.html
Root-URL: 
Email: eleni@cc.gatech.edu  
Title: Learning Problem-Solving Concepts by Reflecting on Problem Solving  
Author: Eleni Stroulia and Ashok K. Goel 
Date: 287-306. 5-8 April 1994,  
Note: In the Proceedings of the ECML-94, 7th European Conference on Machine Learning, F. Bergadano and L. DeRaedt (Eds.), pp:  
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  Catania, Sicily (Italy).  
Abstract: Learning and problem solving are intimately related: problem solving determines the knowledge requirements of the reasoner which learning must fulfill, and learning enables improved problem-solving performance. Different models of problem solving, however, recognize different knowledge needs, and, as a result, set up different learning tasks. Some recent models analyze problem solving in terms of generic tasks, methods, and subtasks. These models require the learning of problem-solving concepts such as new tasks and new task decompositions. We view reflection as a core process for learning these problem-solving concepts. In this paper, we identify the learning issues raised by the task-structure framework of problem solving. We view the problem solver as an abstract device, and represent how it works in terms of a structure-behavior-function model which specifies how the knowledge and reasoning of the problem solver results in the accomplishment of its tasks. We describe how this model enables reflection, and how model-based reflection enables the reasoner to adapt its task structure to produce solutions of better quality. The Autognostic system illustrates this reflection process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Allemang: </author> <title> Understanding Programs as Devices, </title> <type> PhD Thesis, </type> <institution> The Ohio State University (1990) </institution>
Reference-contexts: Functional models, similar to SBF models, have also been used for software program verification <ref> [1] </ref>, knowledge-base validation [31], and student modeling in the context of a tutoring system [16]. Both Router and Autognostic are operational systems.
Reference: [2] <author> L. Baker, A.L. Brown: </author> <title> Metacognitive skills of reading. </title> <editor> In: D. Pearson (ed.): </editor> <title> A Handbook of reading research, </title> <address> New York: </address> <note> Longman (1984) 13 </note>
Reference-contexts: The main results of this research are that reflection upon own's problem solving enables the problem solver to select particular strategies in particular situations [9], reformulate the course of its own thinking to improve performance and meet the varying demands of the task at hand <ref> [2] </ref>, and improve its performance capabilities by monitoring and careful evaluation of its own thinking 11 [17]. Our work on Autognostic is inspired by these results and is consistent with them.
Reference: [3] <author> A. Barr: </author> <title> Meta-Knowledge and Cognition. </title> <booktitle> Proceedings of the Sixth International Joint Conference on AI 31:33 (1979) </booktitle>
Reference-contexts: Our work on Autognostic is inspired by these results and is consistent with them. In parallel with research in psychology, AI researchers recognized the usefulness of meta-knowledge, that is knowledge about what they know and how they reason, in intelligent systems <ref> [3] </ref>. Many AI systems have used descriptions of their own problem solving for several different tasks. These descriptions have taken a variety of forms depending on the view they adopt for problem-solving and on the task they are used for.
Reference: [4] <author> B. Chandrasekaran: </author> <title> Towards a functional architecture for intelligence based on generic information processing tasks. </title> <booktitle> In Proceedings of Tenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1183-1192, </pages> <address> Milan (1987) </address>
Reference-contexts: The task structure of a problem solver thus provides a recursive decomposition of its overall task in terms of methods and subtasks. The tasks and subtasks in the task structure of a problem solver may be instances of generic tasks <ref> [4] </ref>. A generic task is a task instances of which can be encountered in several domains, such as classification and plan synthesis, and whose methods are applicable to all its instantiations.
Reference: [5] <author> B. Chandrasekaran: </author> <title> Task Structures, Knowledge Acquisition and Machine Learning. </title> <booktitle> Machine Learning 4 </booktitle> <month> 341-347 </month> <year> (1989) </year>
Reference-contexts: Recent work on problem solving has led to a family of theories <ref> [6, 33, 19, 5, 29] </ref> that describe problem solving at a level higher than that of states, operators, heuristics etc. These theories analyze problem solving in terms of different kinds of generic tasks and generic methods.
Reference: [6] <author> W.J. Clancey: </author> <title> Heuristic Classification, </title> <booktitle> Artificial Intelligence 27:289:350 (1985) </booktitle>
Reference-contexts: Recent work on problem solving has led to a family of theories <ref> [6, 33, 19, 5, 29] </ref> that describe problem solving at a level higher than that of states, operators, heuristics etc. These theories analyze problem solving in terms of different kinds of generic tasks and generic methods.
Reference: [7] <author> R. Davis: </author> <title> Interactive transfer of expertise: Acquisition of new inference rules, </title> <booktitle> Artificial Intelligence 12 </booktitle> <month> 121-157 </month> <year> (1977) </year>
Reference-contexts: Many AI systems have used descriptions of their own problem solving for several different tasks. These descriptions have taken a variety of forms depending on the view they adopt for problem-solving and on the task they are used for. Teiresias <ref> [7, 8] </ref>, for example, views problem solving as recursive rule activation. It models its rule base in terms of meta-rules that describe which rules can be used as evidence for or against inferences on domain objects.
Reference: [8] <author> R. Davis: </author> <title> Meta-Rules: Reasoning about Control. </title> <booktitle> Artificial Intelligence 15 </booktitle> <month> 179-222 </month> <year> (1980) </year>
Reference-contexts: Many AI systems have used descriptions of their own problem solving for several different tasks. These descriptions have taken a variety of forms depending on the view they adopt for problem-solving and on the task they are used for. Teiresias <ref> [7, 8] </ref>, for example, views problem solving as recursive rule activation. It models its rule base in terms of meta-rules that describe which rules can be used as evidence for or against inferences on domain objects.
Reference: [9] <author> J.H. Flavell: </author> <title> First discussant's comments: What is memory development the development of? Human Development 14 </title> <month> 272-278 </month> <year> (1971) </year>
Reference-contexts: The main results of this research are that reflection upon own's problem solving enables the problem solver to select particular strategies in particular situations <ref> [9] </ref>, reformulate the course of its own thinking to improve performance and meet the varying demands of the task at hand [2], and improve its performance capabilities by monitoring and careful evaluation of its own thinking 11 [17].
Reference: [10] <author> M. Freed, B. Krulwich, L. Birnbaum, G. Collins: </author> <title> Reasoning about performance intentions. </title> <booktitle> In Proceedings of the Fourteenth Annual Conference of the Cognitive Science Society, </booktitle> <month> 7-12 </month> <year> (1992) </year>
Reference-contexts: Teiresias uses its meta-rules to guide the domain expert in identifying erroneous rules in the rule base and acquiring new ones. Castle and Meta-Aqua are recent systems that use reflection for failure-drive learning. Castle <ref> [10] </ref> views problem solving as a sequence of interacting components. For each of its components it has a description of its correct performance and a set of intended behavior properties which are important to the effectiveness of this component in the overall architecture. Castle's components are similar to Autognostic's tasks.
Reference: [11] <author> D. Fisher, M. Pazzani: </author> <title> Computational Models of Concept Learning. </title> <editor> In D.H. Fisher, M.J. Pazzani, and P. Langley (eds.): </editor> <title> Concept Formation: Knowledge and Experience in Unsupervised Learning. </title> <publisher> Morgan Kaufmann. </publisher> <year> (1991) </year>
Reference-contexts: Similarly, research on learning often views the learner as an entity unto itself, and focuses on developing strategies to learn simple concepts without much regard to their usefulness in reasoning. For example, much of learning research has focused on the issue of acquisition of domain concepts, e.g., <ref> [32, 11, 20] </ref>. The task most commonly used for evaluating the products of concept learning has been classification. While the learning of new concepts may expand the range of objects a classification system may recognize, it has little or no effect on the internal mechanism of classification.
Reference: [12] <author> A. Goel: </author> <title> Integration of Case-Based Reasoning and Model-Based Reasoning for Adaptive Design Problem Solving, </title> <type> PhD Thesis, </type> <institution> The Ohio State University (1989) </institution>
Reference-contexts: To enable reflection, we need a well-defined language for representing the task structure of the problem solver. We have adapted the language of structure-behavior-function (SBF) models for describing how physical devices work <ref> [12] </ref> for this purpose. Adapting the SBF language for modeling how a problem solver works, we express tasks as transitions between information states: the input and output information states of a task describe the types of information that the task takes as input and produces as output correspondingly.
Reference: [13] <author> A. Goel, T. Callantine, M. Shankar, B. Chandrasekaran: </author> <title> Representation, Organization, and Use of Topographic Models of Physical Spaces for Route Planning. </title> <booktitle> In Proceedings of the Seventh IEEE Conference on AI Applications. </booktitle> <pages> 308-314, </pages> <publisher> IEEE Computer Society Press (1991) </publisher>
Reference-contexts: The latter assumes a model of the reflection process: reflection is a reasoning task, and it too can be modeled in terms of SBF models just like any other task. 4 Router: A Case-Study Problem Solver In our work, we use Router, <ref> [13] </ref>, a path planning system, as a case-study problem solver. Router's task is to find a path from an initial location to a goal location in a physical space.
Reference: [14] <author> A. Goel, T. Callantine: </author> <title> An Experience-Based Approach to Navigational Route Planning. </title> <booktitle> In Proceedings of the IEEE/RSJ International Conference on Intelligent Robotics and Systems (1992) </booktitle>
Reference-contexts: Since the example we discuss in this paper involves the model-based method only, we do not describe in detail Router's case-based method <ref> [14] </ref>. In the language of SBF models, problem-solving process is viewed as a sequence of transformations between information states.
Reference: [15] <author> A. Howe: </author> <title> Analyzing Failure Recovery to Improve Planner Design. </title> <booktitle> In Proceedings of the Tenth National Confrence on AI, </booktitle> <month> 387-392 </month> <year> (1992) </year>
Reference-contexts: In NOOS reasoning and learning are modeled in a framework similar to task structures. MAX [18] uses a explicit description of a robot's capabilities to enable deliberative, and consequently more effective, integration of these capabilities. It focuses on self-monitoring rather than recovery from failure. Failure recovery analysis <ref> [15] </ref> is another technique for planner modification. It uses statistical analysis of long traces of the planner actions to infer correlation between action patterns and failures.
Reference: [16] <author> K. Johnson: </author> <title> Exploiting a Functional Model of Problem Solving for Error Detection in Tutoring, </title> <type> PhD Thesis, </type> <institution> The Ohio State University (1993) </institution>
Reference-contexts: Functional models, similar to SBF models, have also been used for software program verification [1], knowledge-base validation [31], and student modeling in the context of a tutoring system <ref> [16] </ref>. Both Router and Autognostic are operational systems. We have evaluated Autognostic for several learning tasks in Router's task domain, for example, the acquisition of new world knowledge, certain kinds of reorganization of the world knowledge, and some kinds of modifications to the task structure along the lines described above.
Reference: [17] <author> R.H. Kluwe: </author> <title> Cognitive Knowledge and Executive Control: </title> <editor> Metacognition. In D. R. Griffin (ed.): </editor> <title> Animal Mind Human Mind. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin (1982) </address>
Reference-contexts: problem solving enables the problem solver to select particular strategies in particular situations [9], reformulate the course of its own thinking to improve performance and meet the varying demands of the task at hand [2], and improve its performance capabilities by monitoring and careful evaluation of its own thinking 11 <ref> [17] </ref>. Our work on Autognostic is inspired by these results and is consistent with them. In parallel with research in psychology, AI researchers recognized the usefulness of meta-knowledge, that is knowledge about what they know and how they reason, in intelligent systems [3].
Reference: [18] <author> D.R. Kuokka: </author> <title> The Deliberative Integration of Planning, Execution, and Learning, </title> <institution> Carnegie Mellon, Computer Science, </institution> <note> Technical Report CMU-CS-90-135 (1990) </note>
Reference-contexts: XP-instantiation, case-interpretation). NOOS [25] views reasoning as transfer from precedents and uses reflection for learning by memorization of episodes. In NOOS reasoning and learning are modeled in a framework similar to task structures. MAX <ref> [18] </ref> uses a explicit description of a robot's capabilities to enable deliberative, and consequently more effective, integration of these capabilities. It focuses on self-monitoring rather than recovery from failure. Failure recovery analysis [15] is another technique for planner modification.
Reference: [19] <author> J. McDermott: </author> <title> Preliminary steps toward a taxonomy of problem-solving methods, In Sandra Marcus (ed.): Automating Knowledge Acquisition for Expert Systems, </title> <publisher> Kluwer Academic Publishers (1988) </publisher>
Reference-contexts: Recent work on problem solving has led to a family of theories <ref> [6, 33, 19, 5, 29] </ref> that describe problem solving at a level higher than that of states, operators, heuristics etc. These theories analyze problem solving in terms of different kinds of generic tasks and generic methods.
Reference: [20] <author> R.S. Michalski: </author> <title> Inferential learning theory as a basis for multi-strategy adaptive learning. In R.S. </title> <editor> Michalski and G. Tecuci (eds.): </editor> <booktitle> Proceedings of the First International Workshop on Multistrategy Learning, </booktitle> <pages> 3-18, </pages> <address> Harpers Ferry, WV (1991) </address>
Reference-contexts: Similarly, research on learning often views the learner as an entity unto itself, and focuses on developing strategies to learn simple concepts without much regard to their usefulness in reasoning. For example, much of learning research has focused on the issue of acquisition of domain concepts, e.g., <ref> [32, 11, 20] </ref>. The task most commonly used for evaluating the products of concept learning has been classification. While the learning of new concepts may expand the range of objects a classification system may recognize, it has little or no effect on the internal mechanism of classification.
Reference: [21] <author> S. Minton: </author> <title> Qualitative results concerning the utility of explanation-based learning. </title> <booktitle> Artificial Intelligence 42 </booktitle> <month> 363-392 </month> <year> (1990) </year>
Reference-contexts: When learning research has aimed towards improving the performance of a problem solver, it has adopted a narrow view of problem-solving. For example, some studies have investigated learning in the context of tasks such as game-playing [27], automatic programming [28], symbolic integration [22], and scheduling <ref> [21] </ref>. These systems view problem solving as search in a problem space. The search begins at either the initial or the goal state in the problem space, and ends with a sequence of operators that connects the two states. These systems assume the availability of a complete set of operators.
Reference: [22] <author> T.M. Mitchell, P.E. Utgoff, B. Nudel, R.B. </author> <title> Banerji Learning problem-solving heuristics through practice. </title> <booktitle> In Proceedings of the Seventh International Joint Conference on AI 127-134 (1981) </booktitle>
Reference-contexts: When learning research has aimed towards improving the performance of a problem solver, it has adopted a narrow view of problem-solving. For example, some studies have investigated learning in the context of tasks such as game-playing [27], automatic programming [28], symbolic integration <ref> [22] </ref>, and scheduling [21]. These systems view problem solving as search in a problem space. The search begins at either the initial or the goal state in the problem space, and ends with a sequence of operators that connects the two states.
Reference: [23] <author> T. Mitchell, J. Allen, P. Chalasani, J. Cheng, O. Etzioni, M. Ringuette, J. Schlimmer: Theo: </author> <title> A Framework for Self-Improving Systems. </title> <editor> In K. VanLehn (ed.): </editor> <booktitle> Architectures for Intelligence, </booktitle> <publisher> Lawrence Erlbaum (1989) 14 </publisher>
Reference: [24] <author> J. Piaget: </author> <title> Biology and Knowledge. </title> <publisher> University of Chicago Press (1971) </publisher>
Reference: [25] <author> E. Plaza, J.L. Arcos: </author> <title> Reflection and Analogy in Memory-based Learning. </title> <editor> In R. S. Michalski and G. Tecuci (eds.): </editor> <booktitle> Proceedings of the Second International Workshop on Multistrategy Learning (1993) </booktitle>
Reference-contexts: It uses a set of special explanation patterns, IMXPs (introspective meta XPs), to parse its trace of reasoning and recognize reasoning failures. Unlike Autognostic, Meta-Aqua does not have explicit descriptions for the correct behavior of its reasoning elements (i.e. XP-instantiation, case-interpretation). NOOS <ref> [25] </ref> views reasoning as transfer from precedents and uses reflection for learning by memorization of episodes. In NOOS reasoning and learning are modeled in a framework similar to task structures.
Reference: [26] <author> A. Ram, </author> <title> M.T. Cox: Introspective Reasoning Using Meta-Explanations for Multistrategy Learning. </title> <editor> In R. S. Michalski and G. Tecuci (eds.): </editor> <title> Machine Learning: A Multistrategy Approach IV. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA (1992) </address>
Reference-contexts: In addition, this limits Castle's blame-assignment task to finding a fault in a single linear component sequence. Moreover, Castle lacks the concept of generic (prototypical) tasks which enables Autognostic to transfer the results of its learning from one point of its task structure to another. Meta-Aqua <ref> [26] </ref> views understanding as a cycle of explaining its input using XPs, cases and domain knowledge, and modifying its knowledge when anomalies are encountered. It uses a set of special explanation patterns, IMXPs (introspective meta XPs), to parse its trace of reasoning and recognize reasoning failures.
Reference: [27] <author> A. Samuel: </author> <title> Some studies in machine learning using the game of checkers. IBM Journal of R&D. </title> <editor> (1959) Reprinted in Feigenbaum and Feldman (eds.): </editor> <booktitle> Computers and Thought (1963) </booktitle>
Reference-contexts: When learning research has aimed towards improving the performance of a problem solver, it has adopted a narrow view of problem-solving. For example, some studies have investigated learning in the context of tasks such as game-playing <ref> [27] </ref>, automatic programming [28], symbolic integration [22], and scheduling [21]. These systems view problem solving as search in a problem space. The search begins at either the initial or the goal state in the problem space, and ends with a sequence of operators that connects the two states.
Reference: [28] <author> J.G. Sussman: </author> <title> A Computational Model of Skill Acquisition, </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> (1975) </year>
Reference-contexts: When learning research has aimed towards improving the performance of a problem solver, it has adopted a narrow view of problem-solving. For example, some studies have investigated learning in the context of tasks such as game-playing [27], automatic programming <ref> [28] </ref>, symbolic integration [22], and scheduling [21]. These systems view problem solving as search in a problem space. The search begins at either the initial or the goal state in the problem space, and ends with a sequence of operators that connects the two states.
Reference: [29] <author> L. Steels: </author> <title> Components of Expertise. </title> <journal> AI Magazine 11 </journal> <month> 30-49 </month> <year> (1990). </year>
Reference-contexts: Recent work on problem solving has led to a family of theories <ref> [6, 33, 19, 5, 29] </ref> that describe problem solving at a level higher than that of states, operators, heuristics etc. These theories analyze problem solving in terms of different kinds of generic tasks and generic methods.
Reference: [30] <author> E. Stroulia, A. Goel: </author> <title> Functional Representation and Reasoning for Reflective Systems. </title> <journal> Applied Artificial Intelligence: </journal> <note> An International Journal (to appear). </note> <year> (1993) </year>
Reference-contexts: The task-structure view of problem solving gives rise to a taxonomy of learning tasks each one corresponding to a different type of potential cause of failure that the problem solver can identify <ref> [30] </ref>. In this paper we focus on the learning tasks that involve learning of a new problem-solving concept. One possible cause for the failure of the problem solver to produce the desired solution to the given problem may be that it did not use the appropriate method to solve it. <p> We discuss the first adaptation in <ref> [30] </ref>; in this paper we describe how the insertion of a selection task affects Router's problem solving.
Reference: [31] <author> M. Weintraub: </author> <title> An Explanation-Based Approach to Assigning Credit, </title> <type> PhD Thesis, </type> <institution> The Ohio State University (1991) </institution>
Reference-contexts: Functional models, similar to SBF models, have also been used for software program verification [1], knowledge-base validation <ref> [31] </ref>, and student modeling in the context of a tutoring system [16]. Both Router and Autognostic are operational systems.
Reference: [32] <author> P. Winston: </author> <title> Learning New Principles from Precedents and Exercises. </title> <booktitle> Artificial Intelligence 19 (1982) </booktitle>
Reference-contexts: Similarly, research on learning often views the learner as an entity unto itself, and focuses on developing strategies to learn simple concepts without much regard to their usefulness in reasoning. For example, much of learning research has focused on the issue of acquisition of domain concepts, e.g., <ref> [32, 11, 20] </ref>. The task most commonly used for evaluating the products of concept learning has been classification. While the learning of new concepts may expand the range of objects a classification system may recognize, it has little or no effect on the internal mechanism of classification.
Reference: [33] <author> B.J. Wielinga, A.Th. Schreiber, J.A. Breuker: KADS: </author> <title> A modelling approach to knowledge engineering. In Knowledge Acquisition 4(1). </title> <note> Special issue The KADS approach to knowledge engineering (1992) 15 </note>
Reference-contexts: Recent work on problem solving has led to a family of theories <ref> [6, 33, 19, 5, 29] </ref> that describe problem solving at a level higher than that of states, operators, heuristics etc. These theories analyze problem solving in terms of different kinds of generic tasks and generic methods.
References-found: 33

