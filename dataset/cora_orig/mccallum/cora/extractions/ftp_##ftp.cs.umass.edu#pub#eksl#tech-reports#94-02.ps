URL: ftp://ftp.cs.umass.edu/pub/eksl/tech-reports/94-02.ps
Refering-URL: http://eksl-www.cs.umass.edu/~oates/home.html
Root-URL: 
Title: Toward a Plan Steering Agent: Experiments with Schedule Maintenance  
Author: Tim Oates and Paul R. Cohen 
Note: 0 This research is supported by ARPA-AFOSR contract F30602-91-C-0076.  
Address: Amherst, MA 01003  
Affiliation: Computer Science  Experimental Knowledge Systems Laboratory Department of Computer Science University of Massachusetts  
Pubnum: Technical Report 94-02  
Abstract: When a plan involves hundreds or thousands of events over time it can be difficult or impossible to tell whether those events are unfolding "according to plan" and to assess the impact of dynamic plan modifications. Pathological states may arise in which goals cannot be attained or are attained too slowly. Plan steering is an agent-based approach to this problem. The agent monitors an unfolding plan, detects and predicts pathological situations, and develops dynamic plan modifications that will steer the plan around the problem. We present results for such a system that performs the related task of schedule maintenance in the transportation planning domain. The agent uses limited domain knowledge and simple heuristics and is able to improve throughput significantly. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Muscetolla and S.F. Smith, </author> <title> "A Probabilistic Framework for Resource-Constrained Multi-Agent Planning", </title> <booktitle> in Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1063-1066, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Combining this distribution with the current state of each port, the demon arrives at a predicted docking queue length. The model is similar to that used in <ref> [1] </ref> for exploring the effects of resource allocation decisions. Long docking queues indicate the presence of a bottleneck. Several factors affect the accuracy of the demon's predictions.
Reference: [2] <author> P.S. Ow, S.F. Smith, and A. Thiriez, </author> <title> "Reactive Plan Revision", </title> <booktitle> in Pro ceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 77-82, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: The agent then uses simple heuristics to generate advice that, when implemented, will either alleviate or avoid the predicted bottleneck. This may be contrasted with reactive approaches, such as <ref> [2] </ref>, that respond to unexpected events at the time that they occur. Currently, the only advice the agent offers is based on a simple rerouting heuristic.
Reference: [3] <author> N. Sadeh, </author> <title> "Micro-Opportunistic Scheduling: The Micro-Boss Factory Scheduler", to appear in Intelligent Scheduling, edited by M. </title> <editor> Zweben and M. Fox, </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Artificial intelligence technology currently exists to repair plans automatically and to recover from plan failures automatically. Some technology exists to automate prediction and avoidance of failures while plans execute. <ref> [3] </ref> Plan steering addresses the problem of predicting and avoiding, in real time, pathological states that make it difficult or impossible to achieve goals.
Reference: [4] <author> S.F. Smith, P.S. Ow, N. Muscetolla, J. Potvin, </author> <title> and D.C. Matthys, "An Integrated Framework for Generating and Revising Factory Schedules", </title> <journal> Journal of the Operational Research Society, </journal> <volume> Vol. 41. No. 6, </volume> <year> 1990. </year> <month> 15 </month>
Reference-contexts: That is, the demon only uses information local to a given port. Resource-based schedule revision with local information was used successfully in <ref> [4] </ref>. The schedule maintenance agent combines the demon's predictions for multiple days in the future to determine which ports are likely to become substantial problems. The agent then uses simple heuristics to generate advice that, when implemented, will either alleviate or avoid the predicted bottleneck.
References-found: 4

