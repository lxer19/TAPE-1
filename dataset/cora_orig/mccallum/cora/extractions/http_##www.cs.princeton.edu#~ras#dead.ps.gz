URL: http://www.cs.princeton.edu/~ras/dead.ps.gz
Refering-URL: http://www.cs.princeton.edu/~ras/
Root-URL: http://www.cs.princeton.edu
Title: Dead Code Elimination Original C code written by  
Author: Preston Briggs, 
Note: Extended by Robert Shillingsburg,  Rewritten and extended by Taylor Simpson,  0 This work has been supported by ARPA, through ONR grant N00014-91-J-1989.  
Date: October 1991  June 1992  June 1993 October 12, 1993  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ron Cytron, Jeanne Ferrante, Barry K. Rosen, Mark N. Wegman, and F. Kenneth Zadeck. </author> <title> Efficiently computing static single assignment form and the control dependence graph. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(4) </volume> <pages> 451-490, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Macro referenced in scrap 4. Chapter 2 Convert to SSA Form The following code is a modification of the algorithm given in <ref> [1] </ref> to convert a routine into static single assignment (SSA) form. The primary feature of SSA is to have only one definition point for each register or tag in the routine. This property allows easy construction of use-def chains for each item in a routine. <p> As arguments are added to the -node (see section 2.4.3.4), argCount is incremented. hType Declarations 16bi typedef struct phiNode - struct phiNode *next; Unsigned_Int2 oldName; Unsigned_Int2 argCount; Unsigned_Int2 args <ref> [1] </ref>; /* extensible */ - PhiNode, *PhiNodePtr; 3 Macro defined by scraps 9a, 16b, 22a, 23a, 24b. Macro referenced in scrap 4. 2.3. INSERT THE NECESSARY -NODES 17 Notice that the args array is declared with a size of 1. <p> We assume that the frame pointer argument to the RTN is valid, and the return value is not valid. For this reason, we copy the frame pointer argument into the return value. hCopy the frame pointer argument into the return value 30ci currOper-&gt;arguments <ref> [1] </ref> = currOper-&gt;arguments [0]; 3 Macro referenced in scrap 30a. 2.4. RENAME THE ITEMS TO SATISFY THE SSA PROPERTY 31 To throw away an operation, we must not only change its opcode field to NOP, we must also set the constants, referenced, and defined fields to zero.
Reference: [2] <author> Ken Kennedy. </author> <title> A survey of data flow analysis techniques. </title> <editor> In Steven S. Muchnick and Neil D. Jones, editors, </editor> <title> Program Flow Analysis: Theory and Applications. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year> <month> 50 </month>
Reference-contexts: Few source programs contain dead code, but many optimizations may create dead code. Consider the following example: 1) X 5 3) print Y The program in figure 1.2 contains no dead code. However, if value numbering (refer to <ref> [2] </ref>) is applied to the program, the result will be: 1) X 5 3) print X If the value of Y computed in statement 2 is not used elsewhere in the program, statement 2 has become dead. <p> This will simplify many optimizations by moving the task of dead code 1 2 CHAPTER 1. INTRODUCTION elimination to a single place. 1.1 Basic Algorithm We use a work list algorithm similar to the one described in <ref> [2] </ref> to eliminate the dead code from an ILOC routine. The process begins with a set of critical operations which directly affect the routine's output (e.g. procedure calls and returns). Initially, only these operations are marked critical and all other operations are marked not critical.
References-found: 2

