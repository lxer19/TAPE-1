URL: ftp://ftp.cs.ucla.edu/pub/ficus/geoff/ucla_csd_970041.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/geoff/pubs.html
Root-URL: http://www.cs.ucla.edu
Title: Cooperative Chaos  
Author: Geoffrey H. Kuenning David H. Ratner Peter Reiher Gerald J. Popek Richard G. Guy 
Date: November 14, 1997  
Pubnum: Technical Report UCLA-CSD-970041  
Abstract: Future computers will be smaller, more targeted to special applications, more ubiquitous, and more willing to communicate than existing machines. This will lead to a dynamic environment where thousands or even millions of computers will be able to share information with nearby devices, and significant new applications will become possible by doing so. Such a situation is potentially chaotic, yet these machines will benefit from cooperation. We propose a new paradigm, called Cooperative Chaos, that recognizes the inevitability of this development and provides mechanisms to deal with it. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 1-12, </pages> <address> Vancou-ver, B.C., </address> <month> August </month> <year> 1987. </year> <note> ACM. </note>
Reference-contexts: At the same time, there must be support for transferring targeted messages to remote machines regardless of the intervening path, and for mechanisms that will allow far-away machines to develop a global overview as well as local details. Our proposal is related to epidemic algorithms <ref> [1] </ref>, but differs from that work in the proposed scale and in our increased willingness to tolerate inconsistency between replicas. 1.2 Inaccuracy and Inconsistency A critical difference between prior systems and Cooperative Chaos is that earlier research concentrated on providing all machines with a consistent global view of their shared data.
Reference: [2] <author> Mark R. Horton. </author> <title> Standard for interchange of usenet messages. RFC 850, Internet Request For Comments, </title> <month> June </month> <year> 1983. </year>
Reference-contexts: However, Usenet depends heavily on unique identification and on a lack of updates. Every message (new Usenet article) is assigned a unique identifier at the source (the Message-ID) <ref> [2, 3] </ref>. This allows a receiving site to detect and discard duplicate messages, so that the flooding algorithm does not result in explosive message growth.
Reference: [3] <author> Brian Kantor and Phil Lapsley. </author> <title> Network News Transfer Protocol: A proposed standard for the stream-based transmission of news. RFC 977, Internet Request For Comments, </title> <month> February </month> <year> 1986. </year>
Reference-contexts: However, Usenet depends heavily on unique identification and on a lack of updates. Every message (new Usenet article) is assigned a unique identifier at the source (the Message-ID) <ref> [2, 3] </ref>. This allows a receiving site to detect and discard duplicate messages, so that the flooding algorithm does not result in explosive message growth.
Reference: [4] <author> James J. Kistler and Mahadev Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: Optimistic systems such as Ficus [7] and Coda <ref> [4] </ref> are designed to tolerate temporary inconsistencies, but their correctness depends on making progress toward an eventual globally consistent state. Ficus was designed so that although the underlying network may be partially unavailable, eventual global consistency will be achieved (barring permanent network partitions).
Reference: [5] <author> Puneet Kumar and Mahadev Satyanarayanan. </author> <title> Flexible and safe resolution of file conflicts. </title> <booktitle> In Proceedings of the USENIX Conference Proceedings, </booktitle> <pages> page xxx, </pages> <address> New Orleans, LA, </address> <month> January </month> <year> 1995. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: On the battlefield, for example, multiple soldiers may submit their observations regarding an enemy position. Some of these observations may be incomplete or inaccurate. An application-specific algorithm, similar to the application-specific resolvers used in distributed file systems <ref> [5, 9] </ref>, must attempt to determine the best approximation to the true situation. A third difficulty is the need to select only a relevant subset of the available information, or to summarize information into a higher-level picture.
Reference: [6] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: In the past, the standard approach to updates has been to tag every datum with a summary of its entire update history, usually via some form of version vector [8], which are themselves a refined form of Lam-port's clocks <ref> [6] </ref>. Using the summary, an incoming message can be compared against the current value of a datum to determine whether it is newer, outdated, or conflicting (updated by a parallel thread), and appropriate action can then be taken.
Reference: [7] <author> Thomas W. Page, Jr., Richard G. Guy, Gerald J. Popek, and John S. Heidemann. </author> <title> Architecture of the Ficus scalable replicated file system. </title> <type> Technical Report CSD-910005, </type> <institution> University of Califor-nia, </institution> <address> Los Angeles, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Optimistic systems such as Ficus <ref> [7] </ref> and Coda [4] are designed to tolerate temporary inconsistencies, but their correctness depends on making progress toward an eventual globally consistent state. Ficus was designed so that although the underlying network may be partially unavailable, eventual global consistency will be achieved (barring permanent network partitions).
Reference: [8] <author> D. Stott Parker, Jr., Gerald Popek, Gerard Ru-disin, Allen Stoughton, Bruce J. Walker, Eve-lyn Walton, Johanna M. Chow, David Edwards, Stephen Kiser, and Charles Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 9(3) </volume> <pages> 240-247, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Furthermore, an individual site must be able, without extensive computation or communication, to resolve conflicting information received from different neighbors. In the past, the standard approach to updates has been to tag every datum with a summary of its entire update history, usually via some form of version vector <ref> [8] </ref>, which are themselves a refined form of Lam-port's clocks [6]. Using the summary, an incoming message can be compared against the current value of a datum to determine whether it is newer, outdated, or conflicting (updated by a parallel thread), and appropriate action can then be taken.
Reference: [9] <author> Peter Reiher, John S. Heidemann, David Rat-ner, Gregory Skinner, and Gerald J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 183-195. </pages> <institution> University of California, Los Angeles, USENIX, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: On the battlefield, for example, multiple soldiers may submit their observations regarding an enemy position. Some of these observations may be incomplete or inaccurate. An application-specific algorithm, similar to the application-specific resolvers used in distributed file systems <ref> [5, 9] </ref>, must attempt to determine the best approximation to the true situation. A third difficulty is the need to select only a relevant subset of the available information, or to summarize information into a higher-level picture.
Reference: [10] <author> Douglas B. Terry, Marvin M. Theimer, Karin Petersen, Alan J. Demers, Mike J. Spreitzer, and Carl H. Hauser. </author> <title> Managing update conflicts in Bayou, a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> December </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: At the same time, communication capabilities are becoming common and even expected. Most portable computers are able to exchange data with larger static machines and networks, and there is even a wristwatch that can download calendar data from another computer. Various researchers <ref> [10, 11] </ref> have built systems to allow laptop and palmtop machines to share data dynamically and opportunistically. The average computer user today depends on communication, and becomes frustrated or crippled when it is unavailable.
Reference: [11] <author> Roy Want, Bill N. Schilit, Norman I. Adams, Rich Gold, Karin Petersen, David Goldberg, John R. Ellis, and Mark Weiser. </author> <title> An overview of the ParcTab ubiquitous computing experiment. </title> <journal> IEEE Personal Communications Magazine, </journal> <volume> 2(6) </volume> <pages> 28-43, </pages> <month> December </month> <year> 1995. </year> <month> 6 </month>
Reference-contexts: At the same time, communication capabilities are becoming common and even expected. Most portable computers are able to exchange data with larger static machines and networks, and there is even a wristwatch that can download calendar data from another computer. Various researchers <ref> [10, 11] </ref> have built systems to allow laptop and palmtop machines to share data dynamically and opportunistically. The average computer user today depends on communication, and becomes frustrated or crippled when it is unavailable.
References-found: 11

