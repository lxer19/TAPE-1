URL: ftp://ftp.cs.wpi.edu/pub/techreports/96-2.ps.gz
Refering-URL: http://cs.wpi.edu/Resources/techreports/index.html
Root-URL: 
Title: A 3-level Atomicity Model for Decentralized Workflow Management Systems  
Author: by Israel Z. Ben-Shaul George T. Heineman 
Address: 100 Institute Road, Worcester, Massachusetts 01609-2280  
Affiliation: WORCESTER POLYTECHNIC INSTITUTE Computer Science Department  
Date: September 1996  
Pubnum: WPI-CS-TR-96-2  
Abstract: Computer Science Technical Report Series 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alonso, D. Agrawal, A. El Abbadi, M. Kamath, R. Gunthor, and C. Mohan. </author> <title> Advanced transaction models in workflow contexts. </title> <booktitle> In 12th International Conference on Data Engineering, </booktitle> <pages> pages 574-581, </pages> <address> New Orleans, USA, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: As a result, various advanced transaction models have been proposed or adapted to workflow management (see for example <ref> [1, 39] </ref>). Another dimension in which workflow technology has been rapidly evolving is scalability and decentralization. <p> The transaction managers in a DWFMS should be concerned with managing atomic units, and cooperation is needed when these units spread across multiple sites. ETMs themselves do not necessarily solve the many problems of workflows, and some now view workflow as a superset of transaction models <ref> [1] </ref>. The architecture we propose for DWFMSs is most similar to a hybrid multidatabase system [40], a solution from the database community for managing multiple, heterogeneous database repositories. The four aspects to autonomy discussed in [40] also apply to DWFMSs.
Reference: [2] <author> G. Alonso, D. Agrawal, A. El Abbadi, C. Mohan, R. Gunthor, and Mohan U. Kamath. Exotica/fmqm: </author> <title> A persistent message-based architecture for distributed workflow management. </title> <booktitle> In IFIP WG 8.1 Workgroup Conference on Information Systems Development for Decentralized Organizations, </booktitle> <address> Trondheim, Norway, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Decentralized WFMSs (DWFMSs) must provide mechanisms to enable cooperation among individuals, teams, or organizations while preserving the privacy and autonomy regarding access to the local workflows and their artifacts and activities. There have been various research efforts in large-scale workflow management (e.g., <ref> [2, 3, 11, 25, 34] </ref>), and a Workflow Coalition [17] has been established to promote, among other issues, standards for WFMS-interoperability [42]. A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs.
Reference: [3] <author> G. Alonso and H. Schek. </author> <title> Research issues in large workflow management systems. </title> <booktitle> In NSF Workshop on Workflow and Automation in Information Systems, </booktitle> <pages> pages 126-131, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Decentralized WFMSs (DWFMSs) must provide mechanisms to enable cooperation among individuals, teams, or organizations while preserving the privacy and autonomy regarding access to the local workflows and their artifacts and activities. There have been various research efforts in large-scale workflow management (e.g., <ref> [2, 3, 11, 25, 34] </ref>), and a Workflow Coalition [17] has been established to promote, among other issues, standards for WFMS-interoperability [42]. A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs. <p> DWFMSs are a possible solution to the problem of applying workflow 4 technology on a large scale. Alonso and Schek <ref> [3] </ref> cite Scalability, Correctness, and Interop--erability as three (of five) of the most important limitations of existing workflow technology. We now summarize and compare existing approaches to autonomy and atomicity with our proposed 3-level atomicity model. <p> We now summarize and compare existing approaches to autonomy and atomicity with our proposed 3-level atomicity model. There is a clear consensus that existing database technology is not suitable for WFMSs for many reasons <ref> [3, 19, 37] </ref>; for example, Serializability as a correctness model is considered too restrictive [5]. Many extended transaction models (ETMs) have been developed [24, 32, 33] to define advanced transaction behavior as needed by WFMSs.
Reference: [4] <author> Roger Barga and Calton Pu. </author> <title> A practical and modular method to implement extended transaction models. </title> <booktitle> In 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <year> 1995. </year>
Reference-contexts: Our mediator-based approach [29] shows how a TM can be extended to augment its behavior (in this case, implement 2PC on a centralized TM), similar to the transaction adapters proposed in <ref> [4] </ref>. In short, mediator code can be inserted between the WM and TM to insulate WM from the details of 2PC.
Reference: [5] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Concurrency Control in Advanced Database Applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3) </volume> <pages> 269-317, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: We now summarize and compare existing approaches to autonomy and atomicity with our proposed 3-level atomicity model. There is a clear consensus that existing database technology is not suitable for WFMSs for many reasons [3, 19, 37]; for example, Serializability as a correctness model is considered too restrictive <ref> [5] </ref>. Many extended transaction models (ETMs) have been developed [24, 32, 33] to define advanced transaction behavior as needed by WFMSs. Most ETMs retain atomicity | perhaps the primary objective of transactions | the property that all actions in a transaction occur or none happen.
Reference: [6] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling up rule-based development environments. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 59-78, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: This does not mean that the rule actually executes atomically, only that the outcome of its execution is all-or-nothing 2 . A chain of single-site rules can be bundled atomically. Such a chain is called atomicity chain and is due to Barghouti <ref> [6] </ref>. By default, rule chains are not atomic.
Reference: [7] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A configuration process for a distributed software development environment. </title> <booktitle> In 2nd International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 123-134, </pages> <address> Pittsburgh PA, March 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Each site employs a client-server architecture with multiple clients communicating to a single WM [12]. Across sites, Oz employs a multi-server "share-nothing" architecture, meaning that the workflows, schemas, and instantiated databases are kept separately and disjointly by each site, with no global repository or "shared memory" of any sort <ref> [8, 7, 10] </ref>. Human interaction with the DWFMS is provided through a client that is connected primarily to its local WM. Using the client's connection to its local WM, users can invoke local activities on local data items, under the local process.
Reference: [8] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Each site employs a client-server architecture with multiple clients communicating to a single WM [12]. Across sites, Oz employs a multi-server "share-nothing" architecture, meaning that the workflows, schemas, and instantiated databases are kept separately and disjointly by each site, with no global repository or "shared memory" of any sort <ref> [8, 7, 10] </ref>. Human interaction with the DWFMS is provided through a client that is connected primarily to its local WM. Using the client's connection to its local WM, users can invoke local activities on local data items, under the local process.
Reference: [9] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: Instead, each participating WFMS only knows about the multi-site activities of a task, and the coordinating site requests each site to carry out its local activities (in local mode). This model demands a high degree of freedom in balancing atomicity and autonomy, because as we show in <ref> [9] </ref>, one may need to limit the impact that (unknown) activities may have on the (local and multi-site) work performed at other sites. Each site can simultaneously be a coordinating site for several multi-site tasks and can be participating in several other multi-site tasks. <p> Each site can simultaneously be a coordinating site for several multi-site tasks and can be participating in several other multi-site tasks. A peer-based mechanism that actually establishes and maintains agreements over the execution of multi-site tasks among otherwise independent WFMSs is described in detail in <ref> [9] </ref> and is beyond the scope of this paper. S P has established an agreement with sites S B and S C over activities ip 1 , caf 8 , and pp 10 . Note how each site integrates these activities into their own workflow definitions. <p> However, declarative modeling paradigms that support implicit communication seem to be well-suited for interoperability (as shown in [38, 21]). We present here the realization of the 3-level atomicity model in the Oz DWFMS <ref> [9] </ref>, focusing more on the language modeling issues than on the underlying implementation of the transaction manager; for a discussion of the latter, see [29, 28]. 5.1 Oz Overview Oz is a multi-site DWFMS that supports definition and execution of multiple autonomous workflows. <p> The difference is that at run-time, a multi-site (Summit) rule is invoked with data from multiple sites, and it must have been agreed upon by a Treaty (hence internally in the WM it is marked properly along with the necessary information such as validation timestamp <ref> [9] </ref>).
Reference: [10] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> An architecture for federation of process-centered environments. </title> <type> Technical Report CUCS-015-96, </type> <institution> Columbia University Department of Computer Science, </institution> <month> May </month> <year> 1996. </year> <month> 23 </month>
Reference-contexts: Each site employs a client-server architecture with multiple clients communicating to a single WM [12]. Across sites, Oz employs a multi-server "share-nothing" architecture, meaning that the workflows, schemas, and instantiated databases are kept separately and disjointly by each site, with no global repository or "shared memory" of any sort <ref> [8, 7, 10] </ref>. Human interaction with the DWFMS is provided through a client that is connected primarily to its local WM. Using the client's connection to its local WM, users can invoke local activities on local data items, under the local process.
Reference: [11] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> Integrating groupware activities into work--flow management systems. </title> <booktitle> In 7th Israeli Conference on Computer Based Systems and Software Engineering, </booktitle> <pages> pages 140-149, </pages> <address> Tel Aviv, Israel, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Decentralized WFMSs (DWFMSs) must provide mechanisms to enable cooperation among individuals, teams, or organizations while preserving the privacy and autonomy regarding access to the local workflows and their artifacts and activities. There have been various research efforts in large-scale workflow management (e.g., <ref> [2, 3, 11, 25, 34] </ref>), and a Workflow Coalition [17] has been established to promote, among other issues, standards for WFMS-interoperability [42]. A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs. <p> In some cases (e.g., when independent organizations collaborate) autonomy is a given constraint, as opposed to being merely a design choice, and therefore cannot be avoided or compromised. Similarly, some activities (e.g., groupware activities <ref> [11] </ref>, or composite activities created on top of pre-existing activities) must access data from multiple sites simultaneously, thus requiring multi-site atomicity. This paper is focused entirely on atomicity of workflow tasks and autonomy of the individual WFMSs within a DWFMS.
Reference: [12] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Oz follows the generic architecture shown earlier in Section 3. Each site employs a client-server architecture with multiple clients communicating to a single WM <ref> [12] </ref>. Across sites, Oz employs a multi-server "share-nothing" architecture, meaning that the workflows, schemas, and instantiated databases are kept separately and disjointly by each site, with no global repository or "shared memory" of any sort [8, 7, 10].
Reference: [13] <author> Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1987. </year>
Reference-contexts: If the access request is granted, the remote TM creates a transaction, and a copy of the requested data item is transferred to, and cached by, the requesting WM. This is in contrast to distributed database systems <ref> [13] </ref> that employ a global transaction manager 6 that processes any request to access remote data. <p> If a multi-site activity expects to execute as an atomic unit, the commitment of the individual transactions must be synchronized, most likely by using a simple two-phase commit (2PC) protocol <ref> [13] </ref>. Each TM must then distinguish transactions for local activities from transactions that are part of a multi-site activity. The coordinating site that executes the multi-site activity coordinates the 2PC protocol.
Reference: [14] <author> Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1987. </year>
Reference-contexts: G Atomicity (Global) | This provides atomicity for a single multi-site activity. It requires an atomic-commitment protocol such as two phase commit <ref> [14] </ref>, since each multi-site activity has a subtransaction acting on its behalf at the coordinating site and each participating site. If any of these subtransactions abort, then to preserve atomicity, all subtransactions for the multi-site activity must abort. 2.
Reference: [15] <author> Y. Breitbart, A. Deacon, H.-J. Schek, A. Sheth, and G. Weikum. </author> <title> Merging application-centric and data-centric approaches to support transaction-oriented multi-system work-flows. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 22(3) </volume> <pages> 23-30, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: This division of a multi-site activity into local transactions retains the autonomy of the individual TMs in the DWFMS. 9 The TMs are not involved in the details of workflow management and are only concerned with the dependencies between transactions (see <ref> [15] </ref> for a supporting view). To implement the atomicity model presented in this paper, the TMs only need to support two types of dependencies: commit and abort.
Reference: [16] <author> Panos K. Chrysanthis and Krithi Ramamritham. </author> <title> Synthesis of Extended Transaction Models using ACTA. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(3) </volume> <pages> 450-491, </pages> <month> Septem-ber </month> <year> 1994. </year>
Reference-contexts: Since transactions have structure, most ETMs extend atomicity to be able to include multiple transactions and subtransactions, such as in nested transactions [36]. This is accomplished typically by commit and abort dependencies <ref> [16] </ref>, the building blocks of atomicity. ACTA [16] and the Transaction Specification and Management Environment (TSME) [26] allow for many more types of dependencies to be created (i.e., backward-commit-begin means that a transaction cannot begin before another transaction commits), but we view these as the responsibility of the workflow engine. <p> Since transactions have structure, most ETMs extend atomicity to be able to include multiple transactions and subtransactions, such as in nested transactions [36]. This is accomplished typically by commit and abort dependencies <ref> [16] </ref>, the building blocks of atomicity. ACTA [16] and the Transaction Specification and Management Environment (TSME) [26] allow for many more types of dependencies to be created (i.e., backward-commit-begin means that a transaction cannot begin before another transaction commits), but we view these as the responsibility of the workflow engine. <p> If T i has a commit dependency on T j , (T i CD T j ), then T i cannot commit until T j finishes (either commits or aborts) <ref> [16] </ref>. Each TM expects full autonomy over its transactions, therefore the set of transactions for a multi-site activity poses a problem.
Reference: [17] <institution> Workflow Management Coalition. </institution> <note> http://www.aiai.ed.ac.uk/WfMC. </note>
Reference-contexts: There have been various research efforts in large-scale workflow management (e.g., [2, 3, 11, 25, 34]), and a Workflow Coalition <ref> [17] </ref> has been established to promote, among other issues, standards for WFMS-interoperability [42]. A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs. <p> The atomicity model outlined in this paper provides these features. 3 A Decentralized Architecture and Execution Model Our generic DWFMS architecture, depicted in Figure 2a, is compatible with the Workflow Coalition's reference architecture in Figure 2b <ref> [17] </ref>. A DWFMS consists of a set of local WFMSs that share no resources and communicate via message passing. Each individual WFMS (or workflow engine, in [17]) consists of a local data manager (DM), local transaction manager (TM), and local workflow manager (WM). <p> Decentralized Architecture and Execution Model Our generic DWFMS architecture, depicted in Figure 2a, is compatible with the Workflow Coalition's reference architecture in Figure 2b <ref> [17] </ref>. A DWFMS consists of a set of local WFMSs that share no resources and communicate via message passing. Each individual WFMS (or workflow engine, in [17]) consists of a local data manager (DM), local transaction manager (TM), and local workflow manager (WM). The WM enacts (e.g., interprets or executes) workflow specifications that are defined using a workflow formalism loaded into each WM (Interface 1 in [17]). <p> Each individual WFMS (or workflow engine, in <ref> [17] </ref>) consists of a local data manager (DM), local transaction manager (TM), and local workflow manager (WM). The WM enacts (e.g., interprets or executes) workflow specifications that are defined using a workflow formalism loaded into each WM (Interface 1 in [17]). Each WFMS supports multiple users and applications through a client/server paradigm (Interface 2 in the reference model).
Reference: [18] <author> XSoft Marketing Communications. Inconcert: </author> <title> Workflow software from xsoft, </title> <month> October </month> <year> 1995. </year> <note> http://www.xerox.com/XSoft/DataSheets/InConcert.html. </note>
Reference: [19] <author> Umesh Dayal, Hector Garcia-Molina, Mei Hsu, Ben Kao, and Ming-Chien Shan. </author> <title> Third Generation TP Monitors: A Database Challenge. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 22(2) </volume> <pages> 393-397, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: We now summarize and compare existing approaches to autonomy and atomicity with our proposed 3-level atomicity model. There is a clear consensus that existing database technology is not suitable for WFMSs for many reasons <ref> [3, 19, 37] </ref>; for example, Serializability as a correctness model is considered too restrictive [5]. Many extended transaction models (ETMs) have been developed [24, 32, 33] to define advanced transaction behavior as needed by WFMSs.
Reference: [20] <author> W. Du, K. Elmagarmid, Y. Leu, and S. Ostermann. </author> <title> Effects of Local Autonomy on Global Concurrency Control in Heterogeneous Distributed Database Systems. </title> <booktitle> In Proc. of Second International Conference on Data and Knowledge Systems for manufacturing and Engineering, </booktitle> <address> Maryland, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: The four aspects to autonomy discussed in [40] also apply to DWFMSs. In the same way that local autonomy has implications on global concurrency control <ref> [20] </ref>, autonomy of each WFMS implies that the interoperating WFMSs must be willing to make compromises on local autonomy and global correctness. The Workflow Coalition standard for interoperability [42] does not yet address this issue.
Reference: [21] <author> Kenneth J. Goldman et al. </author> <title> The programmer's playground: I/O abstraction for user-configurable distributed applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 735-746, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In declarative languages with implicit and dynamically-determined control flow, as in rule-based languages, adding such support is less straightforward; specifying atomic units across sites (and workflows) seems even harder. However, declarative modeling paradigms that support implicit communication seem to be well-suited for interoperability (as shown in <ref> [38, 21] </ref>).
Reference: [22] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: WFMSs have gained popularity in recent years, as evidenced by the large number of research prototypes and products (e.g., InConcert [18],ActionWorkflow [23], ProcessWEAVER <ref> [22] </ref>). Many WFMSs have realized the need to complement their process-centric approach with database technology to store diverse information accessed as a workflow progresses, as well as to represent artifacts which are being manipulated by the workflow tasks.
Reference: [23] <author> Rodrigo F. Flores. </author> <title> The value of a methodology for workflow, </title> <note> 1995. http://www.actiontech.com/market/papers/method5.html. </note>
Reference-contexts: WFMSs have gained popularity in recent years, as evidenced by the large number of research prototypes and products (e.g., InConcert [18],ActionWorkflow <ref> [23] </ref>, ProcessWEAVER [22]). Many WFMSs have realized the need to complement their process-centric approach with database technology to store diverse information accessed as a workflow progresses, as well as to represent artifacts which are being manipulated by the workflow tasks.
Reference: [24] <author> Hector Garcia-Molina and Ken Salem. </author> <title> SAGAS. </title> <editor> In U. Dayal and I. Traiger, editors, </editor> <booktitle> ACM SIGMOD 1987 Annual Conference, </booktitle> <address> New York NY, </address> <month> May </month> <year> 1987. </year> <journal> ACM Press. SIGMOD Record, </journal> <volume> 16(3) </volume> <pages> 249-259. 24 </pages>
Reference-contexts: There is a clear consensus that existing database technology is not suitable for WFMSs for many reasons [3, 19, 37]; for example, Serializability as a correctness model is considered too restrictive [5]. Many extended transaction models (ETMs) have been developed <ref> [24, 32, 33] </ref> to define advanced transaction behavior as needed by WFMSs. Most ETMs retain atomicity | perhaps the primary objective of transactions | the property that all actions in a transaction occur or none happen. <p> Therefore, the atomicity of a i might be compromised in favor of retaining atomicity within a given 12 site S j . Such inconsistencies are easily detected, and may be tolerated, in cases where they make sense semantically, or fixed by a compensating operation (as in Sagas <ref> [24] </ref>). 3. GG Atomicity (Global to Global) | This level provides atomicity across several multi-site activities. When coupled with G and L, it enforces global atomicity, where any failure in a multi-site task forces it to fail at all sites, and therefore necessarily violates local autonomy.
Reference: [25] <author> Dimitrios Georgakopoulos, Mark Hornick, and Amit Sheth. </author> <title> An Overview of Workflow Management: From Process Modeling to Workflow Automation Infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3 </volume> <pages> 119-153, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Workflow management is a broad term for a technology that supports the reengineering of business and information processes <ref> [25] </ref>. Workflow Management Systems (WFMSs) provide the ability to define, evolve, and execute processes involving multiple human users, activities, and artifacts (e.g., documents). <p> Decentralized WFMSs (DWFMSs) must provide mechanisms to enable cooperation among individuals, teams, or organizations while preserving the privacy and autonomy regarding access to the local workflows and their artifacts and activities. There have been various research efforts in large-scale workflow management (e.g., <ref> [2, 3, 11, 25, 34] </ref>), and a Workflow Coalition [17] has been established to promote, among other issues, standards for WFMS-interoperability [42]. A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs. <p> A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs. This combination (which has also been advocated in <ref> [25] </ref>) introduces a new challenge: how to reconcile the inherent conflict between the single-site (transactional) autonomy and the multi-site (transactional) atomicity.
Reference: [26] <author> Dimitris Georgakopoulos, Mark Hornick, Piotr Krychniak, and Frank Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In 10th International Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <address> Houston TX, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Since transactions have structure, most ETMs extend atomicity to be able to include multiple transactions and subtransactions, such as in nested transactions [36]. This is accomplished typically by commit and abort dependencies [16], the building blocks of atomicity. ACTA [16] and the Transaction Specification and Management Environment (TSME) <ref> [26] </ref> allow for many more types of dependencies to be created (i.e., backward-commit-begin means that a transaction cannot begin before another transaction commits), but we view these as the responsibility of the workflow engine.
Reference: [27] <author> Volker Gruhn and Rudiger Jegelka. </author> <title> An evaluation of FUNSOFT nets. </title> <editor> In J.C. Derni-ame, editor, </editor> <booktitle> Software Process Technology Second European Workshop, number 635 in Lecture Notes in Computer Science, </booktitle> <pages> pages 196-214. </pages> <publisher> Springer-Verlag, </publisher> <address> Trondheim, Nor-way, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Each activity maps to a single step in the workflow, perhaps involving a user invoking some external tool, such as a spreadsheet application. Workflow formalisms typically guard activities with local constraints, as opposed to the global control flow imposed by the task. For example, FUNSOFT nets <ref> [27] </ref> (extended Petri nets) allow logical predicates to be attached to transitions (the equivalent of activities in our terminology), task graphs [35] provide predecessor and successor edges, and rules [30] provide pre-and post-conditions.
Reference: [28] <author> George T. Heineman. </author> <title> A Transaction Manager Component Supporting Extended Transaction Models. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <year> 1996. </year> <month> Forthcoming. </month>
Reference-contexts: We present here the realization of the 3-level atomicity model in the Oz DWFMS [9], focusing more on the language modeling issues than on the underlying implementation of the transaction manager; for a discussion of the latter, see <ref> [29, 28] </ref>. 5.1 Oz Overview Oz is a multi-site DWFMS that supports definition and execution of multiple autonomous workflows.
Reference: [29] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We present here the realization of the 3-level atomicity model in the Oz DWFMS [9], focusing more on the language modeling issues than on the underlying implementation of the transaction manager; for a discussion of the latter, see <ref> [29, 28] </ref>. 5.1 Oz Overview Oz is a multi-site DWFMS that supports definition and execution of multiple autonomous workflows. <p> This design reduces the amount of work that would be undone in case of failure. 5.4 Cross-Site Dependencies Given a TM that supports commit and abort dependencies, our model requires a mechanism for the cross-site dependencies that form as the Summit executes. Our mediator-based approach <ref> [29] </ref> shows how a TM can be extended to augment its behavior (in this case, implement 2PC on a centralized TM), similar to the transaction adapters proposed in [4]. In short, mediator code can be inserted between the WM and TM to insulate WM from the details of 2PC.
Reference: [30] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: For example, FUNSOFT nets [27] (extended Petri nets) allow logical predicates to be attached to transitions (the equivalent of activities in our terminology), task graphs [35] provide predecessor and successor edges, and rules <ref> [30] </ref> provide pre-and post-conditions. An activity, a j , emanates from another activity, a i , when the results of executing a i satisfies the logical guard for and triggers a j . The notion of emanating activities is also an important characteristic of workflows.
Reference: [31] <author> Gail E. Kaiser and Wenke Lee. </author> <title> Pay no attention to the man behind the curtain. In NSF Workshop on Workflow and Process Automation in Information Systems: State-of-the-Art and Future Directions, </title> <address> Athens GA, </address> <month> May </month> <year> 1996. </year> <note> Position paper. In press. </note>
Reference-contexts: element.report ?report ?mlm.input ?vital signs Activity 8 return ?report status ?mlm output g 9 (and (?care element.update time = CurrentTime) atomicity Effects 10 (?mlm.output = ?mlm output) 11 (link [?patient.track record ?care element]) 12 (link [?worker.track record ?care element])); recently shifted its focus to support general business processes (e.g., see <ref> [31] </ref> for a healthcare management application). Oz follows the generic architecture shown earlier in Section 3. Each site employs a client-server architecture with multiple clients communicating to a single WM [12].
Reference: [32] <author> Gail E. Kaiser and Calton Pu. </author> <title> Dynamic restructuring of transactions. </title> <editor> In Ahmed K. Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <address> San Ma-teo CA, </address> <year> 1992. </year> <note> Morgan Kaufmann. </note> <institution> Available as Columbia University Department of Computer Science, CUCS-012-91, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: There is a clear consensus that existing database technology is not suitable for WFMSs for many reasons [3, 19, 37]; for example, Serializability as a correctness model is considered too restrictive [5]. Many extended transaction models (ETMs) have been developed <ref> [24, 32, 33] </ref> to define advanced transaction behavior as needed by WFMSs. Most ETMs retain atomicity | perhaps the primary objective of transactions | the property that all actions in a transaction occur or none happen.
Reference: [33] <author> Henry F. Korth and Greg Speegle. </author> <title> Formal Aspects of Concurrency Control in Long-Duration Transactions Systems using the nt/pv Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(3) </volume> <pages> 492-535, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: There is a clear consensus that existing database technology is not suitable for WFMSs for many reasons [3, 19, 37]; for example, Serializability as a correctness model is considered too restrictive [5]. Many extended transaction models (ETMs) have been developed <ref> [24, 32, 33] </ref> to define advanced transaction behavior as needed by WFMSs. Most ETMs retain atomicity | perhaps the primary objective of transactions | the property that all actions in a transaction occur or none happen.
Reference: [34] <author> Narayanan Krishnakumar and Amit Sheth. </author> <title> Managing heterogeneous multi-system tasks to support enterprise-wide operations. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 119-152, </pages> <year> 1995. </year>
Reference-contexts: Decentralized WFMSs (DWFMSs) must provide mechanisms to enable cooperation among individuals, teams, or organizations while preserving the privacy and autonomy regarding access to the local workflows and their artifacts and activities. There have been various research efforts in large-scale workflow management (e.g., <ref> [2, 3, 11, 25, 34] </ref>), and a Workflow Coalition [17] has been established to promote, among other issues, standards for WFMS-interoperability [42]. A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs.
Reference: [35] <author> Peiwei Mi and Walt Scacchi. </author> <title> Process integration in CASE environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Workflow formalisms typically guard activities with local constraints, as opposed to the global control flow imposed by the task. For example, FUNSOFT nets [27] (extended Petri nets) allow logical predicates to be attached to transitions (the equivalent of activities in our terminology), task graphs <ref> [35] </ref> provide predecessor and successor edges, and rules [30] provide pre-and post-conditions. An activity, a j , emanates from another activity, a i , when the results of executing a i satisfies the logical guard for and triggers a j .
Reference: [36] <author> J. Eliot B. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. Information Systems. </title> <publisher> The MIT Press, </publisher> <address> Cambridge MA, </address> <year> 1985. </year> <month> 25 </month>
Reference-contexts: Most ETMs retain atomicity | perhaps the primary objective of transactions | the property that all actions in a transaction occur or none happen. Since transactions have structure, most ETMs extend atomicity to be able to include multiple transactions and subtransactions, such as in nested transactions <ref> [36] </ref>. This is accomplished typically by commit and abort dependencies [16], the building blocks of atomicity.
Reference: [37] <editor> Erich Neuhold and Michael Stonebraker (editors). </editor> <booktitle> Future Directions in DBMS Research. SIGMOD Record, </booktitle> <volume> 18(1) </volume> <pages> 17-26, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: We now summarize and compare existing approaches to autonomy and atomicity with our proposed 3-level atomicity model. There is a clear consensus that existing database technology is not suitable for WFMSs for many reasons <ref> [3, 19, 37] </ref>; for example, Serializability as a correctness model is considered too restrictive [5]. Many extended transaction models (ETMs) have been developed [24, 32, 33] to define advanced transaction behavior as needed by WFMSs.
Reference: [38] <author> Steven P. Reiss. </author> <title> Connecting tools using message passing in the field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: In declarative languages with implicit and dynamically-determined control flow, as in rule-based languages, adding such support is less straightforward; specifying atomic units across sites (and workflows) seems even harder. However, declarative modeling paradigms that support implicit communication seem to be well-suited for interoperability (as shown in <ref> [38, 21] </ref>).
Reference: [39] <author> Marek Rusinkiewicz and Amit Sheth. </author> <title> Specification and execution of transactional work-flows. </title> <editor> In Won Kim, editor, </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, </title> <booktitle> chapter 29, </booktitle> <pages> pages 592-620. </pages> <publisher> ACM Press, </publisher> <address> New York NY, </address> <year> 1994. </year>
Reference-contexts: As a result, various advanced transaction models have been proposed or adapted to workflow management (see for example <ref> [1, 39] </ref>). Another dimension in which workflow technology has been rapidly evolving is scalability and decentralization.
Reference: [40] <author> Amit P. Sheth and James A. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: ETMs themselves do not necessarily solve the many problems of workflows, and some now view workflow as a superset of transaction models [1]. The architecture we propose for DWFMSs is most similar to a hybrid multidatabase system <ref> [40] </ref>, a solution from the database community for managing multiple, heterogeneous database repositories. The four aspects to autonomy discussed in [40] also apply to DWFMSs. <p> The architecture we propose for DWFMSs is most similar to a hybrid multidatabase system <ref> [40] </ref>, a solution from the database community for managing multiple, heterogeneous database repositories. The four aspects to autonomy discussed in [40] also apply to DWFMSs. In the same way that local autonomy has implications on global concurrency control [20], autonomy of each WFMS implies that the interoperating WFMSs must be willing to make compromises on local autonomy and global correctness.
Reference: [41] <author> Nandit Soparkar, Henry F. Korth, and Abraham Silberschatz. </author> <title> Failure-resilient transaction management in multidatabases. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Each site maintains its own private workflow and we assume operational autonomy with respect to access to data (more specifically execution and control autonomy as defined in <ref> [41] </ref>), but we assume throughout the paper design homogeneity, i.e., similar WM, TM, and DM components. Each WFMS is managed by a workflow administrator who defines the particular workflow that the WFMS executes on its data, involving its own users and tools.
Reference: [42] <editor> Workflow Management Coalition Draft Workflow Standard: </editor> <title> Interoperability Abstract Specification. </title> <journal> ftp://ftp.aiai.ed.ac.uk/pub/projects/WfMC/if4-a.ps.gz. </journal> <volume> 26 </volume>
Reference-contexts: There have been various research efforts in large-scale workflow management (e.g., [2, 3, 11, 25, 34]), and a Workflow Coalition [17] has been established to promote, among other issues, standards for WFMS-interoperability <ref> [42] </ref>. A natural evolution in workflow technology is then to explore the combination of both directions, i.e, decentralized and transactional WFMSs. This combination (which has also been advocated in [25]) introduces a new challenge: how to reconcile the inherent conflict between the single-site (transactional) autonomy and the multi-site (transactional) atomicity. <p> In the same way that local autonomy has implications on global concurrency control [20], autonomy of each WFMS implies that the interoperating WFMSs must be willing to make compromises on local autonomy and global correctness. The Workflow Coalition standard for interoperability <ref> [42] </ref> does not yet address this issue.
References-found: 42

