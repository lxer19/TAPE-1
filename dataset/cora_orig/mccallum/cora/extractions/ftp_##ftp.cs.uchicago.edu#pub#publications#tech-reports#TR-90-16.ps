URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-90-16.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: Algebraic Methods for Interactive Proof Systems  
Author: Carsten Lund Lance Fortnow Howard Karloff Noam Nisan 
Note: [BFL].  
Affiliation: University of Chicago  Hebrew University  
Abstract: We present a new algebraic technique for the construction of interactive proof systems. We use our technique to prove that every language in the polynomial-time hierarchy has an interactive proof system. This technique played a pivotal role in the recent proofs that IP=PSPACE [S] and that MIP=NEXP 
Abstract-found: 1
Intro-found: 1
Reference: [AGH] <author> W. Aiello, S. Goldwasser, and J. H-astad. </author> <title> On the power of interaction. </title> <journal> Combinatorica, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1990. </year>
Reference-contexts: Corollary 6. If every language in IP has a bounded-round interactive proof system, then the polynomial-time hierarchy collapses. This is immediate from Boppana, H-astad and Zachos [BHZ]. Previously Aiello, Goldwasser and H-astad <ref> [AGH] </ref> constructed an oracle relative to which the class of languages with unbounded-round interactive proof systems differs from those with bounded-round interactive proof systems. Our theorem also has applications to program checking, verification and self-correction.
Reference: [B] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In Proc. of the 17th ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 421-429, </pages> <year> 1985. </year>
Reference-contexts: Vanna to flip coins and by requiring instead that if x is in L, with probability at least 2=3 Pat persuades Vanna that x is in L, and if x is not in L, no prover can convince Vanna that x is in L with probability more than 1=3: Babai <ref> [B] </ref> and Goldwasser, Micali and Rackoff [GMR] developed this interactive proof system model. A summary of previous results on interactive proof systems can be found in [BM]. <p> We can think of this class as the set of "publishable proofs," "proofs" that can be written down now and randomly verified years later without any help from the prover. Babai has proven that MA P 2 " P 2 <ref> [B] </ref>. Corollary 8 implies that if #P has polynomial-size circuits, then P #P , and hence the polynomial-time hierarchy, lies in MA. Corollary 8. If #P has polynomial-size circuits then P #P MA. Proof. The prover gives the verifier a circuit computing the permanent.
Reference: [BeF] <author> D. Beaver and J. Feigenbaum. </author> <title> Hiding instances in multioracle queries. </title> <booktitle> In Proc. 7th Symp. on Theoretical Aspects of Comp. Sci. </booktitle> <volume> LNCS 415 </volume> <pages> 37-48, </pages> <year> 1990. </year>
Reference-contexts: Previously Aiello, Goldwasser and H-astad [AGH] constructed an oracle relative to which the class of languages with unbounded-round interactive proof systems differs from those with bounded-round interactive proof systems. Our theorem also has applications to program checking, verification and self-correction. Lipton [L], using ideas of Beaver and Feigenbaum <ref> [BeF] </ref>, showed that the permanent function can be "tested." Our protocols extend this idea and show the permanent has a self-testing/correcting pair [BLR], a pair of functions the first of which verifies that a program computes the permanent correctly on most inputs and the second of which converts a program that
Reference: [BF] <author> L. Babai and L. Fortnow. Arithmetization: </author> <title> a new method in structural complexity theory. </title> <journal> Computational Complexity, </journal> <volume> 1 </volume> <pages> 41-66, </pages> <year> 1991. </year>
Reference-contexts: To our knowledge this is the first example of an interactive proof system that appears to require an unbounded number of rounds. Babai and Fortnow <ref> [BF] </ref> and Shamir [S] have provided alternate interactive proof systems for verifying the values of #P functions by counting the number of assignments satisfying a CNF formula, thus circumventing the need for Valiant's result on the completeness of the permanent. <p> Babai, Fortnow and Lund have proven that any language computable in nondeterministic exponential time has a multiple-prover interactive proof system. Their proof uses ideas similar to those of <ref> [BF] </ref> and [S] in order to reduce the problem to that of testing the multilinearity of a function. Cai, Condon and Lipton [CCL] have used the protocols of this paper and of Shamir [S] to prove that every PSPACE language has a bounded-round multiple-prover interactive proof system. <p> One simple answer is that we have exhibited an interactive proof system for a very specific #P-complete function|the permanent|which is not #P-complete relative to any sufficiently complex oracle (since the permanent does not depend on the oracle). Babai and Fortnow <ref> [BF] </ref> have exhibited a simple characterization of #P functions by polynomials and have used this characterization to prove the main theorem of this paper without any reference to permanents. This algebraic formulation of #P does not hold in relativized worlds.
Reference: [BFL] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1 </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: Shamir [S] has used this technique to prove that all languages in PSPACE have interactive proof systems. From the fact that IPPSPACE [F], it follows that IP=PSPACE. Babai, Fortnow and Lund <ref> [BFL] </ref> have also used this technique in their proof that every language in nondeterministic exponential time has a two-prover interactive proof system in which the provers cannot communicate with one another. <p> Using a protocol similar to that in Section 3, he then proves that every language in PSPACE has an interactive proof system. Shen [Sh] later provided a "degree-reduction operator" as an alternate technique to keep the degree low. Babai, Fortnow and Lund <ref> [BFL] </ref> have applied the techniques of this paper to multiple-prover interactive 6 proof systems, defined by Ben-Or, Goldwasser, Kilian and Wigderson [BGKW] as interactive proof systems having a polynomial number of provers unable to communicate among themselves or to see the conversation between any other prover and the verifier. <p> In the proof of Theorem 1 the prover need only answer questions about the permanents of various matrices. We can have M simulate the verifier and use P as the prover. A further discussion of the relationship between interactive proof systems and program testing can be found in <ref> [BFL] </ref>. MA is the class of languages accepted by an interactive proof system consisting of a single message from the prover to the verifier followed by probabilistic verification by the verifier. <p> Corollary 8. If #P has polynomial-size circuits then P #P MA. Proof. The prover gives the verifier a circuit computing the permanent. She uses this circuit as the prover in the protocol in Section 3. A general discussion of Corollary 8 appears in <ref> [BFL] </ref> where it is shown that a similar result holds for PSPACE and EXP.
Reference: [BGGHKMR] <author> M. Ben-Or, O. Goldreich, S. Goldwasser, J. H-astad, J. Kilian, S. Micali, and P. Rogaway. </author> <title> Everything provable is provable in zero-knowledge. </title> <booktitle> In Proc. Crypto 88, </booktitle> <pages> pages 37-56, </pages> <year> 1988. </year>
Reference-contexts: Some simple corollaries that follow from these results: Corollary 5. If cryptographic one-way functions exist then every language in the polynomial-time hierarchy has a zero-knowledge interactive proof system. Proof. Every language with an interactive proof system has a zero-knowledge interactive proof system if one-way functions exist <ref> [BGGHKMR, IY] </ref>. From Shamir [S], we infer that all languages computable in polynomial space have zero-knowledge interactive proof systems if cryptographic one-way functions exist. Corollary 6. If every language in IP has a bounded-round interactive proof system, then the polynomial-time hierarchy collapses.
Reference: [BGKW] <author> M. Ben-Or, S. Goldwasser, J. Kilian, and A. Wigderson. </author> <title> Multi-prover interactive proofs: How to remove intractability assumptions. </title> <booktitle> In Proc. of the 20th ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 113-131, </pages> <year> 1988. </year>
Reference-contexts: Shen [Sh] later provided a "degree-reduction operator" as an alternate technique to keep the degree low. Babai, Fortnow and Lund [BFL] have applied the techniques of this paper to multiple-prover interactive 6 proof systems, defined by Ben-Or, Goldwasser, Kilian and Wigderson <ref> [BGKW] </ref> as interactive proof systems having a polynomial number of provers unable to communicate among themselves or to see the conversation between any other prover and the verifier. Babai, Fortnow and Lund have proven that any language computable in nondeterministic exponential time has a multiple-prover interactive proof system.
Reference: [BHZ] <author> R. Boppana, J. H-astad, and S. Zachos. </author> <title> Does co-NP have short interactive proofs? Information Processing Letters, </title> <booktitle> 25(2) </booktitle> <pages> 127-132, </pages> <year> 1987. </year>
Reference-contexts: A bounded-round protocol for the permanent would imply that the polynomial-time hierarchy collapses, since Boppana, H-astad and Zachos <ref> [BHZ] </ref> have shown that if all co-NP languages have bounded-round protocols, then the hierarchy collapses. To our knowledge this is the first example of an interactive proof system that appears to require an unbounded number of rounds. <p> From Shamir [S], we infer that all languages computable in polynomial space have zero-knowledge interactive proof systems if cryptographic one-way functions exist. Corollary 6. If every language in IP has a bounded-round interactive proof system, then the polynomial-time hierarchy collapses. This is immediate from Boppana, H-astad and Zachos <ref> [BHZ] </ref>. Previously Aiello, Goldwasser and H-astad [AGH] constructed an oracle relative to which the class of languages with unbounded-round interactive proof systems differs from those with bounded-round interactive proof systems. Our theorem also has applications to program checking, verification and self-correction.
Reference: [BK] <author> M. Blum and S. Kannan. </author> <title> Designing programs that check their work. </title> <booktitle> In Proc. of the 21st ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 86-97, </pages> <year> 1989. </year>
Reference-contexts: Our results also have implications for program checking, verification and self-correction in the context of Blum and Kannan <ref> [BK] </ref>, Blum, Luby and Rubinfeld [BLR] and Lipton [L]. In fact, the Blum-Luby-Rubinfeld and Lipton papers inspired our result. Our result does not relativize. Fortnow and Sipser [FS] have created an oracle under which co-NP does not have an interactive proof system. <p> Theorem 1 also provides a program correctness checker <ref> [BK] </ref> for the permanent: 7 Corollary 7.
Reference: [BLR] <author> M. Blum, M. Luby, and R. Rubinfeld. </author> <title> Self-testing and self-correcting programs, with applications to numerical programs. </title> <booktitle> In Proc. of the 22nd ACM Symp. on the Theory of Computing, </booktitle> <year> 1990. </year>
Reference-contexts: Our results also have implications for program checking, verification and self-correction in the context of Blum and Kannan [BK], Blum, Luby and Rubinfeld <ref> [BLR] </ref> and Lipton [L]. In fact, the Blum-Luby-Rubinfeld and Lipton papers inspired our result. Our result does not relativize. Fortnow and Sipser [FS] have created an oracle under which co-NP does not have an interactive proof system. <p> Our theorem also has applications to program checking, verification and self-correction. Lipton [L], using ideas of Beaver and Feigenbaum [BeF], showed that the permanent function can be "tested." Our protocols extend this idea and show the permanent has a self-testing/correcting pair <ref> [BLR] </ref>, a pair of functions the first of which verifies that a program computes the permanent correctly on most inputs and the second of which converts a program that passes the first test into one that correctly computes the permanent on all inputs with high probability.
Reference: [BM] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin games: a randomized proof system, and a hierarchy of complexity classes. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 36(2) </volume> <pages> 254-276, </pages> <year> 1988. </year>
Reference-contexts: A summary of previous results on interactive proof systems can be found in <ref> [BM] </ref>. <p> Because the number of rounds of an interactive proof system can be reduced by a constant factor <ref> [BM] </ref>, for any * &gt; 0 there is a variant of our permanent protocol running in at most *N rounds.
Reference: [C] <author> S. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Proc. of the 3rd ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <year> 1971. </year>
Reference: [CCL] <author> J. Cai, A. Condon, and R. J. Lipton. </author> <title> PSPACE is provable by two provers in one round. </title> <booktitle> In Proc. of the 6th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 110-115, </pages> <year> 1991. </year>
Reference-contexts: Their proof uses ideas similar to those of [BF] and [S] in order to reduce the problem to that of testing the multilinearity of a function. Cai, Condon and Lipton <ref> [CCL] </ref> have used the protocols of this paper and of Shamir [S] to prove that every PSPACE language has a bounded-round multiple-prover interactive proof system.
Reference: [CGH] <author> B. Chor, O. Goldreich, and J. H-astad. </author> <title> The random oracle hypothesis is false. </title> <type> Manuscript, </type> <institution> Technion, Haifa, Israel, </institution> <year> 1990. </year>
Reference-contexts: Our result does not relativize. Fortnow and Sipser [FS] have created an oracle under which co-NP does not have an interactive proof system. To our knowledge this is the first result to "go contrary" to a previously-published oracle. Subsequent to the announcement of our result, Chor, Goldreich and H-astad <ref> [CGH] </ref> proved the same relativized result for a random oracle. 2 Definitions A verifier V is a polynomial-time, probabilistic Turing machine with a special communication tape.
Reference: [F] <author> P. Feldman. </author> <title> The optimum prover lives in PSPACE. </title> <type> Manuscript, </type> <institution> M.I.T., </institution> <year> 1986. </year>
Reference-contexts: Shamir [S] has used this technique to prove that all languages in PSPACE have interactive proof systems. From the fact that IPPSPACE <ref> [F] </ref>, it follows that IP=PSPACE. Babai, Fortnow and Lund [BFL] have also used this technique in their proof that every language in nondeterministic exponential time has a two-prover interactive proof system in which the provers cannot communicate with one another.
Reference: [FGMSZ] <author> M. Furer, O. Goldreich, Y. Mansour, M. Sipser, and S. Zachos. </author> <title> On completeness and soundness in interactive proof systems. </title> <editor> In S. Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <pages> pages 429-442. </pages> <publisher> JAI Press, </publisher> <year> 1989. </year>
Reference-contexts: Furer, Goldreich, Mansour, Sipser and Zachos <ref> [FGMSZ] </ref> have shown how to modify an interactive proof system so that for true instances the verifier is convinced with probability one. Both of these properties already hold for our protocol. Some simple corollaries that follow from these results: Corollary 5.
Reference: [FL] <author> L. Fortnow and C. Lund. </author> <title> Interactive proof systems and alternating time-space complexity. </title> <booktitle> In Proc. 8th Symp. on Theoretical Aspects of Comp. Sci. </booktitle> <volume> LNCS 480 </volume> <pages> 263-274, </pages> <year> 1991. </year> <note> To appear in Theoretical Computer Science. </note>
Reference-contexts: Cai, Condon and Lipton [CCL] have used the protocols of this paper and of Shamir [S] to prove that every PSPACE language has a bounded-round multiple-prover interactive proof system. Fortnow and Lund <ref> [FL] </ref> have extended the techniques from this and Shamir's paper [S] to exhibit a polynomial equivalence between time-space complexity of alternating Turing machines and the time-space complexity of the verifier in a public-coin interactive proof system.
Reference: [FRS] <author> L. Fortnow, J. Rompel, and M. Sipser. </author> <title> On the power of multi-prover interactive protocols. </title> <booktitle> In Proc. of the 3rd Conference on Structure in Complexity Theory, </booktitle> <pages> pages 156-161, </pages> <year> 1988. </year> <month> 9 </month>
Reference: [FS] <author> L. Fortnow and M. Sipser. </author> <title> Are there interactive protocols for co-NP languages? Information Processing Letters, </title> <booktitle> 28 </booktitle> <pages> 249-251, </pages> <year> 1988. </year>
Reference-contexts: Our results also have implications for program checking, verification and self-correction in the context of Blum and Kannan [BK], Blum, Luby and Rubinfeld [BLR] and Lipton [L]. In fact, the Blum-Luby-Rubinfeld and Lipton papers inspired our result. Our result does not relativize. Fortnow and Sipser <ref> [FS] </ref> have created an oracle under which co-NP does not have an interactive proof system. To our knowledge this is the first result to "go contrary" to a previously-published oracle.
Reference: [GMR] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof-systems. </title> <journal> SIAM J. on Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <year> 1989. </year>
Reference-contexts: requiring instead that if x is in L, with probability at least 2=3 Pat persuades Vanna that x is in L, and if x is not in L, no prover can convince Vanna that x is in L with probability more than 1=3: Babai [B] and Goldwasser, Micali and Rackoff <ref> [GMR] </ref> developed this interactive proof system model. A summary of previous results on interactive proof systems can be found in [BM].
Reference: [GMW] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that yield nothing but their validity and a methodology of cryptographic protocol design. </title> <booktitle> In Proc. of the 27th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 174-187, </pages> <year> 1986. </year>
Reference-contexts: A summary of previous results on interactive proof systems can be found in [BM]. While certain problems such as graph non-isomorphism which are not known to be in NP were known to have interactive proof systems <ref> [GMW] </ref>, theoretical computer scientists generally believed that the class fl Supported by a fellowship from the University of -Arhus. y Supported by NSF grant CCR-9009936. z Supported by NSF grant CCR-8807534. x Some of this work was performed at MIT and supported by NSF grant CCR-865727 and ARO grant DLL03-86-K-017. 1
Reference: [GS] <author> S. Goldwasser and M. Sipser. </author> <title> Private coins versus public coins in interactive proof systems. </title> <editor> In S. Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <pages> pages 73-90. </pages> <publisher> JAI Press, </publisher> <year> 1989. </year>
Reference-contexts: In particular, they prove that every language in NC has a interactive proof system with a public-coin, polynomial-time, logarithmic-space verifier. 5 Implications Goldwasser and Sipser <ref> [GS] </ref> have shown that one can convert any interactive proof system to one in which the verifier uses public coins, i.e., the verifier juxtaposes her coin tosses and her query message q i on her communication tape.
Reference: [IY] <author> R. Impagliazzo and M. Yung. </author> <title> Direct minimum-knowledge computation. </title> <booktitle> In Proc. Crypto 87, </booktitle> <pages> pages 40-51. </pages> <note> LNCS 293, </note> <year> 1987. </year>
Reference-contexts: Some simple corollaries that follow from these results: Corollary 5. If cryptographic one-way functions exist then every language in the polynomial-time hierarchy has a zero-knowledge interactive proof system. Proof. Every language with an interactive proof system has a zero-knowledge interactive proof system if one-way functions exist <ref> [BGGHKMR, IY] </ref>. From Shamir [S], we infer that all languages computable in polynomial space have zero-knowledge interactive proof systems if cryptographic one-way functions exist. Corollary 6. If every language in IP has a bounded-round interactive proof system, then the polynomial-time hierarchy collapses.
Reference: [KL] <author> R. Karp and R. Lipton. </author> <title> Some connections between nonuniform and uniform complexity classes. </title> <booktitle> In Proc. of the 12th ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 302-309, </pages> <year> 1980. </year>
Reference-contexts: She uses this circuit as the prover in the protocol in Section 3. A general discussion of Corollary 8 appears in [BFL] where it is shown that a similar result holds for PSPACE and EXP. Contrast Corollary 8 with the result of Karp and Lipton <ref> [KL] </ref> that if NP has polynomial size circuits, then the polynomial-time hierarchy collapses to P 2 . 6 Further Research We have proven that every language reducible to a #P-complete problem has an interactive proof system, and thus so does every language in the polynomial-time hierarchy.
Reference: [L] <author> R. Lipton. </author> <title> New directions in testing. </title> <editor> In J. Feigenbaum and M. Merritt, editors, </editor> <booktitle> Distributed Computing and Cryptography, volume 2 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pages 191-202. </pages> <publisher> American Mathematical Society, </publisher> <year> 1991. </year>
Reference-contexts: Our results also have implications for program checking, verification and self-correction in the context of Blum and Kannan [BK], Blum, Luby and Rubinfeld [BLR] and Lipton <ref> [L] </ref>. In fact, the Blum-Luby-Rubinfeld and Lipton papers inspired our result. Our result does not relativize. Fortnow and Sipser [FS] have created an oracle under which co-NP does not have an interactive proof system. To our knowledge this is the first result to "go contrary" to a previously-published oracle. <p> Previously Aiello, Goldwasser and H-astad [AGH] constructed an oracle relative to which the class of languages with unbounded-round interactive proof systems differs from those with bounded-round interactive proof systems. Our theorem also has applications to program checking, verification and self-correction. Lipton <ref> [L] </ref>, using ideas of Beaver and Feigenbaum [BeF], showed that the permanent function can be "tested." Our protocols extend this idea and show the permanent has a self-testing/correcting pair [BLR], a pair of functions the first of which verifies that a program computes the permanent correctly on most inputs and the
Reference: [NZ] <author> I. Niven and H. S. Zuckerman. </author> <title> An introduction to the theory of numbers. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <booktitle> 4th edition, </booktitle> <pages> pages 224-225, </pages> <year> 1980. </year>
Reference-contexts: Throughout most of this paper we will work with the permanent over ZZ p of an N fi N matrix A with entries in ZZ p , where p is a prime in (N !; 2N !). (Bertrand's Postulate <ref> [NZ] </ref> guarantees the existence of such a prime.) If A is 0-1, then the permanent of A over ZZ p coincides with its permanent as an integer matrix, since the permanent of an N fi N 0-1 matrix cannot exceed N !.
Reference: [Pr] <author> V. Pratt. </author> <title> Every prime has a succinct certificate. </title> <journal> SIAM J. Comp, </journal> <volume> 4 </volume> <pages> 214-220, </pages> <year> 1975. </year>
Reference-contexts: A is an N fi N 0-1 matrix and 0 s N !. begin Let L =&lt;(A; s)&gt;. Pat picks an integer p in (N !; 2N !) and provides a short proof to Vanna that p is prime <ref> [Pr] </ref>. All arithmetic in this protocol is done mod p. Repeat until L =&lt;(B; q)&gt; for some 1 fi 1 matrix B: If L =&lt;(B; q)&gt; then do Expand: Suppose that B = (b ij ) is r fi r.
Reference: [S] <author> A. Shamir. IP=PSPACE. </author> <booktitle> In Proc. of the 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference-contexts: For the proof we develop a new technique for reducing the problem of verifying the value of a low-degree polynomial at two given points to verifying the value at one new point. Shamir <ref> [S] </ref> has used this technique to prove that all languages in PSPACE have interactive proof systems. From the fact that IPPSPACE [F], it follows that IP=PSPACE. <p> To our knowledge this is the first example of an interactive proof system that appears to require an unbounded number of rounds. Babai and Fortnow [BF] and Shamir <ref> [S] </ref> have provided alternate interactive proof systems for verifying the values of #P functions by counting the number of assignments satisfying a CNF formula, thus circumventing the need for Valiant's result on the completeness of the permanent. <p> They have shown how to "arithmetize" a formula as a low-degree polynomial so that Pat and Vanna can use a protocol similar to that of Section 3 to verify the number of satisfying assignments. Shamir <ref> [S] </ref> has shown how to arithmetize a QBF formula, using dummy variables to keep the degree low. Using a protocol similar to that in Section 3, he then proves that every language in PSPACE has an interactive proof system. <p> Babai, Fortnow and Lund have proven that any language computable in nondeterministic exponential time has a multiple-prover interactive proof system. Their proof uses ideas similar to those of [BF] and <ref> [S] </ref> in order to reduce the problem to that of testing the multilinearity of a function. Cai, Condon and Lipton [CCL] have used the protocols of this paper and of Shamir [S] to prove that every PSPACE language has a bounded-round multiple-prover interactive proof system. <p> Their proof uses ideas similar to those of [BF] and <ref> [S] </ref> in order to reduce the problem to that of testing the multilinearity of a function. Cai, Condon and Lipton [CCL] have used the protocols of this paper and of Shamir [S] to prove that every PSPACE language has a bounded-round multiple-prover interactive proof system. Fortnow and Lund [FL] have extended the techniques from this and Shamir's paper [S] to exhibit a polynomial equivalence between time-space complexity of alternating Turing machines and the time-space complexity of the verifier in a public-coin interactive <p> Cai, Condon and Lipton [CCL] have used the protocols of this paper and of Shamir <ref> [S] </ref> to prove that every PSPACE language has a bounded-round multiple-prover interactive proof system. Fortnow and Lund [FL] have extended the techniques from this and Shamir's paper [S] to exhibit a polynomial equivalence between time-space complexity of alternating Turing machines and the time-space complexity of the verifier in a public-coin interactive proof system. <p> If cryptographic one-way functions exist then every language in the polynomial-time hierarchy has a zero-knowledge interactive proof system. Proof. Every language with an interactive proof system has a zero-knowledge interactive proof system if one-way functions exist [BGGHKMR, IY]. From Shamir <ref> [S] </ref>, we infer that all languages computable in polynomial space have zero-knowledge interactive proof systems if cryptographic one-way functions exist. Corollary 6. If every language in IP has a bounded-round interactive proof system, then the polynomial-time hierarchy collapses. This is immediate from Boppana, H-astad and Zachos [BHZ].
Reference: [Sh] <author> A. Shen. IP=PSPACE: </author> <title> simplified proof. </title> <type> Manuscript, </type> <institution> Institute of Problems of Information Transmission, Moscow, USSR, </institution> <year> 1990. </year>
Reference-contexts: Shamir [S] has shown how to arithmetize a QBF formula, using dummy variables to keep the degree low. Using a protocol similar to that in Section 3, he then proves that every language in PSPACE has an interactive proof system. Shen <ref> [Sh] </ref> later provided a "degree-reduction operator" as an alternate technique to keep the degree low.
Reference: [Si] <author> J. Simon. </author> <title> On some central problems in computational complexity. </title> <type> PhD thesis, </type> <institution> Cornell University, Computer Science, </institution> <year> 1975. </year> <type> Tech Report TR 75-224. </type>
Reference: [SS] <author> R. Solovay and V. Strassen. </author> <title> A fast Monte-Carlo test for primality. </title> <journal> SIAM J. of Computing, </journal> <volume> 6 </volume> <pages> 84-85, </pages> <year> 1977. </year> <note> See also erratum 7:118, </note> <year> 1978. </year>
Reference: [T] <author> S. </author> <title> Toda. </title> <booktitle> On the computational power of PP and P. In Proc. of the 30th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 514-519, </pages> <year> 1989. </year>
Reference-contexts: Our main result is an interactive proof system for the language f (A; s)js is the permanent of 0-1 matrix Ag. When combined with the fact that the permanent of 0-1 matrices is #P-complete [V] and the fact that #P is hard for the polynomial-time hierarchy <ref> [T] </ref>, the existence of an interactive proof system for the permanent implies that every language in the polynomial-time hierarchy has an interactive proof system. In particular, this means that every language in co-NP has an interactive proof system, even the complement of 3-COLORABILITY, for example. <p> Every language in P #P has an interactive proof system. Together with Toda's result that P #P contains all the languages of the polynomial-time hierarchy <ref> [T] </ref>, Theorem 1 implies Corollary 2. Every language in the polynomial-time hierarchy has an interactive proof system. In particular, every language in co-NP has an interactive proof system. We list some facts about the permanent of a matrix A that will be crucial in the proof of Theorem 1.
Reference: [V] <author> L. Valiant. </author> <title> The complexity of computing the permanent. </title> <journal> Theoretical Computer Science, </journal> <volume> 8 </volume> <pages> 189-201, </pages> <year> 1979. </year>
Reference-contexts: We prove that interactive proof systems have far greater power than originally believed. Our main result is an interactive proof system for the language f (A; s)js is the permanent of 0-1 matrix Ag. When combined with the fact that the permanent of 0-1 matrices is #P-complete <ref> [V] </ref> and the fact that #P is hard for the polynomial-time hierarchy [T], the existence of an interactive proof system for the permanent implies that every language in the polynomial-time hierarchy has an interactive proof system. <p> Lemma 3. If L = f (A; s)jA is a 0-1 matrix and per (A) = sg has an interactive proof system, then every language in P #P has an interactive proof system. Proof Sketch. From the fact that computing the permanent of 0-1 matrices is #P-complete <ref> [V] </ref>, we can reduce the membership problem for a language L 0 2 P #P to that of verifying the permanents of 0-1 matrices. Given an interactive proof system for L, it is easy to construct one for L 0 .
References-found: 33

