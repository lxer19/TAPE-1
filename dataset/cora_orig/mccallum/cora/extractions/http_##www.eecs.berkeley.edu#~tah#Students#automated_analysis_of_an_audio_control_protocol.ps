URL: http://www.eecs.berkeley.edu/~tah/Students/automated_analysis_of_an_audio_control_protocol.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Students/automated_analysis_of_an_audio_control_protocol.html
Root-URL: 
Email: (hojhoward)@cs.cornell.edu  
Title: Automated Analysis of an Audio Control Protocol  
Author: Pei-Hsin Ho and Howard Wong-Toi 
Address: Ithaca, NY 14853  
Affiliation: Computer Science Department, Cornell University,  
Abstract: We show how HyTech, a symbolic model checker for linear hybrid systems, can be used to analyze an audio control protocol. This protocol [BPV94] was first verified by Bosscher et al. without computer support. In this paper, we demonstrate that algorithmic methods can not only verify the protocol, but can also automatically synthesize the bound on the maximum clock drift, and suggest design modification for a more robust protocol. We believe the techniques we used | finite state encodings, automata transformations, strengthening of specifications | provide insight to the practictioner interested in modeling and analyzing similar real-world applications.
Abstract-found: 1
Intro-found: 1
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This case study is particularly interesting because it is not immediately clear how to use an automatic tool to analyze this protocol. We show how arbitrary length data streams can be finitely encoded using linear hybrid automata <ref> [ACHH93] </ref>. The verification analysis not only establishes the correctness of the hybrid automaton, but also justifies our finite encoding of the infinite data streams. Synthesizing the critical bound is more delicate, and requires a number of steps. <p> We verify for arbitrary length bit streams that the receiver correctly receives all bits, and realizes the bit stream has finished in a timely fashion. 3 Analysis by hybrid automata Our system modeling language is linear hybrid automata. Informally, a linear hybrid automaton <ref> [ACHH93] </ref> consists of a finite set X of real-valued variables and a labeled multigraph (V; E). The edges E represent discrete system actions and are labeled with nondeterministic guarded assignments to X. The vertices V represent different control modes and are labeled with constraints on the slopes of X.
Reference: [AHH93] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> In Proceedings of the 14th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: Their analysis is entirely mathematical and does not use computer support. They remark that it would be interesting to see how other methods, particularly algorithmic techniques, could handle their example. Successful automated analysis. We accept their proposal, and demonstrate that HyTech <ref> [AHH93] </ref>, a symbolic model checker for linear hybrid systems, can not only verify the protocol's correctness for Philip's tolerance specification of 1=20, but can also automatically synthesize the critical bound of 1=17. Indeed HyTech even suggests a revision in the protocol to enable wider clock drifts of 1=15. <p> We obviate this difficulty by proving instead a stronger property that can be checked without the need to track an arbitrarily large timer. Synthesizing error tolerances. Automatic parametric analysis is introduced in [CH78], and applied to the analysis of real-time and hybrid systems in <ref> [AHH93, AHV93, HH95] </ref>. In order to synthesize a parameter for a system's behavior we introduce a new variable, a parameter, whose value remains unchanged. HyTech can then detect for which values of the parameter error traces are present. <p> We say that the reachability problem has answer yes, if R (A) " [[ ]] = ;; and no, otherwise. HyTech (The Cornell Hybrid Technology Tool) 2 is a symbolic model checker for linear hybrid systems <ref> [AHH93] </ref>. State sets (regions) are represented symbolically, as polyhedra. The existing version is limited to reachability analysis. The core of HyTech is a semidecision procedure, which may not terminate on all inputs.
Reference: [AHV93] <author> R. Alur, T.A. Henzinger, and M.Y. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 592-601. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: We obviate this difficulty by proving instead a stronger property that can be checked without the need to track an arbitrarily large timer. Synthesizing error tolerances. Automatic parametric analysis is introduced in [CH78], and applied to the analysis of real-time and hybrid systems in <ref> [AHH93, AHV93, HH95] </ref>. In order to synthesize a parameter for a system's behavior we introduce a new variable, a parameter, whose value remains unchanged. HyTech can then detect for which values of the parameter error traces are present.

Reference: [CH78] <author> P. Cousot and N. Halbwachs. </author> <title> Automatic discovery of linear restraints among variables of a program. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1978. </year>
Reference-contexts: We obviate this difficulty by proving instead a stronger property that can be checked without the need to track an arbitrarily large timer. Synthesizing error tolerances. Automatic parametric analysis is introduced in <ref> [CH78] </ref>, and applied to the analysis of real-time and hybrid systems in [AHH93, AHV93, HH95]. In order to synthesize a parameter for a system's behavior we introduce a new variable, a parameter, whose value remains unchanged. HyTech can then detect for which values of the parameter error traces are present.
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 333-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The existing version is limited to reachability analysis. The core of HyTech is a semidecision procedure, which may not terminate on all inputs. The current stable version consists of a main control program in Mathematica which calls C ++ subroutines that make use of Halbwachs' polyhedron manipulation library <ref> [Hal93, HRP94] </ref>. The tool is undergoing reimplementation entirely in C/C ++ .
Reference: [HH95] <author> T.A. Henzinger and P.-H. Ho. HyTech: </author> <title> The Cornell Hybrid Technology Tool. </title> <note> To appear, </note> <year> 1995. </year>
Reference-contexts: We obviate this difficulty by proving instead a stronger property that can be checked without the need to track an arbitrarily large timer. Synthesizing error tolerances. Automatic parametric analysis is introduced in [CH78], and applied to the analysis of real-time and hybrid systems in <ref> [AHH93, AHV93, HH95] </ref>. In order to synthesize a parameter for a system's behavior we introduce a new variable, a parameter, whose value remains unchanged. HyTech can then detect for which values of the parameter error traces are present. <p> In his thesis, 1 100 1 Fig. 1. Timing diagram for Manchester encoding of 10011 Wong-Toi [WT94] verified correctness and timing properties by applying his real-time system verification tool to the timed automaton obtained by transforming a linear hybrid system model. In <ref> [HH95] </ref>, HyTech is used to verify the correctness of the audio control protocol with inputs up to a fixed length only. 2 Audio control protocol We describe the timing-based communication protocol using Manchester encoding, as presented by Bosscher et al. [BPV94].
Reference: [HRP94] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <booktitle> In Proceedings of the First Static Analysis Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: The existing version is limited to reachability analysis. The core of HyTech is a semidecision procedure, which may not terminate on all inputs. The current stable version consists of a main control program in Mathematica which calls C ++ subroutines that make use of Halbwachs' polyhedron manipulation library <ref> [Hal93, HRP94] </ref>. The tool is undergoing reimplementation entirely in C/C ++ .
Reference: [LV92] <author> N.A. Lynch and F. Vaandrager. </author> <title> Action transducers and timed automata. </title> <editor> In R.J. Cleaveland, editor, </editor> <booktitle> CONCUR 92: Theories of Concurrency, Lecture Notes in Computer Science 630, </booktitle> <pages> pages 436-455. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The protocol uses timing-based Manchester encoding to transmit arbitrary length bit sequences between a single sender and receiver whose clocks are subject to a bounded error. Their modeling used an extension to timed I/O automata <ref> [LV92] </ref>, and enabled them to verify its correctness using proof rules. Furthermore, they show that for correct operation, 1=17 is a tight bound on the error tolerance on the sender's and receiver's clocks. Their analysis is entirely mathematical and does not use computer support.
Reference: [OSY94] <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 81-94. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: To overcome this, we must transform the automaton by translating all skewed clocks into perfect clocks with rate 1 with the information on variable rates transfered into the timing constraints on transitions and location invariants <ref> [OSY94, WT94] </ref>. A second difficulty arises: the resulting system would still be non-linear, having timing constraints with variables in the denominators. We apply a further clock transformation that eliminates this problem. <p> The following two transformations are applied to each A (*). Transformation I: eliminating parameterized slopes. We first move the constant * from the slopes of the clock variables into constraints on the clocks' values. The automaton transformation, for constant bounded slopes, was reported in <ref> [OSY94] </ref>. It applies to automata where there are no constraints explicitly enforced on the relative differences between variables.

References-found: 9

