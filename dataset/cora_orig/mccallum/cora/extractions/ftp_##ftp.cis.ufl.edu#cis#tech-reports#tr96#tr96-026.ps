URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr96/tr96-026.ps
Refering-URL: http://www.cis.ufl.edu/~fishwick/tr/tr96-026.html
Root-URL: http://www.cis.ufl.edu
Email: E-mail: fishwick@cise.ufl.edu  
Phone: Phone  FAX: (352) 392-1414  
Title: SUBMISSION FOR SPECIAL ISSUE ON MODEL SPECIFICATION REPRESENTATION for ACM Transactions on Modeling and Computer
Author: Paul A. Fishwick 
Date: July 12, 1996  
Web: WWW: http://www.cise.ufl.edu/~fishwick  
Note: and  
Address: Bldg. CSE, Room 301 Gainesville, FL 32611  
Affiliation: Dept. of Computer Information Science and Engineering University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> Osman Balci and Richard E. Nance. </editor> <title> Simulation Model Development Environments: A Research Prototype. </title> <journal> Journal of the Operational Research Society, </journal> <volume> 38(8):753 - 763, </volume> <year> 1987. </year>
Reference-contexts: Other more recent simulation thrusts in the object-oriented arena include SCS conferences [41] as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective <ref> [44, 57, 22, 1] </ref>. We specify two contributions: 1) a comprehensive methodology for constructing physical objects that encapsulate both geometric and dynamical models, and 2) a new taxonomy for dynamic models. <p> This class can be used to create a rectangular space hierarchy of any dimension. Let's first create a space object called cell by defining Rect cell. If we wish to structure this space into a quadtree, for instance, we can then create four new objects cell [0], cell <ref> [1] </ref>, cell [2] and cell [3]. Since we used the same name cell, there is an automatic aggregation relation with cell composed of cell [0], cell [1], cell [2] and cell [3]. Specifically, aggregation rules come into play as previously described. <p> If we wish to structure this space into a quadtree, for instance, we can then create four new objects cell [0], cell <ref> [1] </ref>, cell [2] and cell [3]. Since we used the same name cell, there is an automatic aggregation relation with cell composed of cell [0], cell [1], cell [2] and cell [3]. Specifically, aggregation rules come into play as previously described. The actual quadtree would be stored as a static model of cell. The explicit creation of aggregation hierarchies within the conceptual model is dictated by a heterogeneous aggregation relation.
Reference: [2] <author> Jerry Banks and John S. Carson. </author> <title> Discrete Event System Simulation. </title> <publisher> Prentice Hall, </publisher> <year> 1984. </year>
Reference-contexts: While there has been significant coverage in the simulation literature for analysis methods <ref> [2, 25] </ref>, the general area of modeling for simulation has lacked uniformity and in-depth coverage. Two areas of modeling termed "discrete event" and "continuous" are defined in the simulation literature. For discrete event models, the field is sub-divided into event-oriented, process and activity-based modeling. <p> Two areas of modeling termed "discrete event" and "continuous" are defined in the simulation literature. For discrete event models, the field is sub-divided into event-oriented, process and activity-based modeling. To choose one of these sub-categories, we might ask "What is an event-oriented model?" There is no clear definition <ref> [2, 25] </ref> other than to state that a discrete event model is one where discrete events predominate. There is no attempt to further categorize or classify the form taken on by an event-oriented model. In mentioning form, we need to address the differences between syntax (form) and semantics (execution). <p> As to how we might refer to populations or groups versus individuals, we consider the motor example. The set of motors can be called motor which points to a data structure specifying motor objects, while an individual motor requires an index such as motor <ref> [2] </ref>. When an object is created that uses the same root name for an object that already exists, such as when one created object motor [2] after having created motor, then the a hierarchy is assumed and aggregation occurs as a result. <p> of motors can be called motor which points to a data structure specifying motor objects, while an individual motor requires an index such as motor <ref> [2] </ref>. When an object is created that uses the same root name for an object that already exists, such as when one created object motor [2] after having created motor, then the a hierarchy is assumed and aggregation occurs as a result. This mechanism allows one to attach recursive, 12 hierarchical properties to any class in the conceptual model without explicitly specifying these properties at the time of conceptual model formation. <p> Let's first create a space object called cell by defining Rect cell. If we wish to structure this space into a quadtree, for instance, we can then create four new objects cell [0], cell [1], cell <ref> [2] </ref> and cell [3]. Since we used the same name cell, there is an automatic aggregation relation with cell composed of cell [0], cell [1], cell [2] and cell [3]. Specifically, aggregation rules come into play as previously described. <p> If we wish to structure this space into a quadtree, for instance, we can then create four new objects cell [0], cell [1], cell <ref> [2] </ref> and cell [3]. Since we used the same name cell, there is an automatic aggregation relation with cell composed of cell [0], cell [1], cell [2] and cell [3]. Specifically, aggregation rules come into play as previously described. The actual quadtree would be stored as a static model of cell. The explicit creation of aggregation hierarchies within the conceptual model is dictated by a heterogeneous aggregation relation.
Reference: [3] <author> G. M. Birtwistle. </author> <title> Discrete Event Modelling on SIMULA. </title> <publisher> Macmillan, </publisher> <year> 1979. </year>
Reference-contexts: For other types of multimodels, one can devise additional formalisms [39]. Object-oriented methodology in simulation has a long history, as with the introduction of the Simula language <ref> [3] </ref>, which can be considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software <p> Let's first create a space object called cell by defining Rect cell. If we wish to structure this space into a quadtree, for instance, we can then create four new objects cell [0], cell [1], cell [2] and cell <ref> [3] </ref>. Since we used the same name cell, there is an automatic aggregation relation with cell composed of cell [0], cell [1], cell [2] and cell [3]. Specifically, aggregation rules come into play as previously described. The actual quadtree would be stored as a static model of cell. <p> to structure this space into a quadtree, for instance, we can then create four new objects cell [0], cell [1], cell [2] and cell <ref> [3] </ref>. Since we used the same name cell, there is an automatic aggregation relation with cell composed of cell [0], cell [1], cell [2] and cell [3]. Specifically, aggregation rules come into play as previously described. The actual quadtree would be stored as a static model of cell. The explicit creation of aggregation hierarchies within the conceptual model is dictated by a heterogeneous aggregation relation.
Reference: [4] <author> Grady Booch. </author> <title> On the Concepts of Object-Oriented Design. </title> <editor> In Peter A. Ng and Ray-mond T. Yeh, editors, </editor> <booktitle> Modern Software Engineering, chapter 6, </booktitle> <pages> pages 165 - 204. </pages> <publisher> Van Nostrand Reinhold, </publisher> <year> 1990. </year>
Reference-contexts: The motivation for the first contribution is that there currently exists no method that uses object-oriented design and specifies an enhancement of this design to accommodate static and dynamic models. We have taken the existing visual object-oriented design approaches reflected in texts such as Rumbaugh [45] and Booch <ref> [4] </ref> and extended these approaches. Regarding the motivation for deriving a new method for dynamic modeling, we offer the following reasons: 1. Object-Oriented Design: The new taxonomy is one based on object-oriented design methodology since it is developed as an extension to object-oriented design.
Reference: [5] <author> Grady Booch. </author> <title> Object Oriented Design. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software engineering 4 texts <ref> [45, 5, 18] </ref>. As we shall see in model design, the visual orientation is critical since it represents the way most scientists and engineers reason about physical problems and, therefore, must be made explicit in modeling. <p> on a discussion of object-oriented physical design for robots within spaces, we present Table 1 to illustrate how, through mappings from one discipline to another, different areas fit into this general scenario scheme. 4 Model Engineering Our basis for physical modeling begins with object-oriented design concepts as described in textbooks <ref> [5, 45] </ref> as well as object-oriented modeling as applied specifically for simulation of discrete event systems [57]. Model engineering is the process of building static and dynamic models for a physical scenario using our extended object-oriented framework.
Reference: [6] <author> Alan H. Borning. </author> <title> THINGLAB A Constraint-Oriented Simulation Laboratory. </title> <type> Technical report, </type> <note> Xerox PARC, </note> <year> 1979. </year>
Reference-contexts: The languages Lisp [51] and ML [37] are two example functional languages. Lisp has some declarative features (side effects) whereas other functional languages attempt to be "pure." Finally, with regard to computer science metaphors, constraint languages <ref> [6, 29] </ref> reflect a way of programming where procedures and declarations are insufficient. The constraint language CLP (R) [21] (Constraint Logic Programming) represents this type of language. Also, the next generation Prolog (Prolog III) is constraint oriented.
Reference: [7] <author> Peter C. Breedveld. </author> <title> A Systematic Method to Derive Bond Graph Models. </title> <booktitle> In Second European Simulation Congress, </booktitle> <address> Antwerp, Belgium, </address> <year> 1986. </year>
Reference-contexts: An example constraint graph is an analog electrical circuit or a bond graph <ref> [7] </ref>. The extra model type not previously discussed here (but found in Fig. 1 and [13]) is spatial model. In our discussion, a spatial model is a static model whose dynamics take on one of three primitive types. <p> Constraint: Constraint models are equational in nature, and reflect non-directional constraints among object attributes. A class C with a constraint equational model contains an equation with terms containing attributes of ^ C i . Equations can be represented in graph form as well as with bond graphs <ref> [7, 43, 50] </ref>. Models of non-directional behavior, such as general hydrodynamic models are constraint-based.
Reference: [8] <author> Timothy Budd. </author> <title> An Introduction to Object Oriented Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: The object oriented concepts of re-use and encapsulation will help greatly in this endeavor. Also, we are trying to create a bridge between the use of modeling in simulation and general purpose programming. As various authors have noted <ref> [8, 14] </ref>, if one liberally applies the concept of metaphor to software engineering, the differences between software and systems engineering begin to dwindle to the point where software engineering can be considered a modeling process.
Reference: [9] <author> Robert M. Cubert and Paul A. Fishwick. </author> <title> OOSIM User's Manual. </title> <type> Technical report, </type> <institution> University of Florida, Department of Computer and Information Science and Engineering, </institution> <year> 1996. </year>
Reference-contexts: A sample scenario window for an air force mission application was constructed along with a simulation built on top of SimPack <ref> [12, 13, 9] </ref>. We draw a dividing line between the actual implementation and the logical design which is used as a basis for code implementation. Our focus in this article has been on this logical design.
Reference: [10] <author> Donald L. DeAngelis and K. A. Rose. </author> <title> Which Individual-Based Approach is Most Appropriate For a Given Problem? In Donald L. </title> <editor> DeAngelis and Louis J. Gross, editors, </editor> <booktitle> Individual-Based Models and Approaches in Ecology, </booktitle> <pages> pages 67-87. </pages> <publisher> Chapman and Hall, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: For the sake of the biological metaphor, we choose Panther as the class of predator and Bird and Deer as sample prey classes. The Lotka-Volterra model is an example of a general population model that can be characterized as a p-state ecological model <ref> [10] </ref>. The designation of p-state is positioned in Fig. 19 within the Population class where it belongs. <p> The Lotka-Volterra model is an example of a general population model that can be characterized as a p-state ecological model [10]. The designation of p-state is positioned in Fig. 19 within the Population class where it belongs. For completeness, we have included other types of ecological models <ref> [10, 19] </ref> and where they fit within the class hierarchy: * General Population Model (p-state): a model that specifies the dynamics of single or inter-species populations. * Structured Population Model (i-state distribution): a population model where other independent variables such as size or age are used to "structure" the population into
Reference: [11] <author> Paul A. Fishwick. </author> <title> Heterogeneous Decomposition and Coupling for Combined Modeling. </title> <booktitle> In 1991 Winter Simulation Conference, </booktitle> <pages> pages 1199 - 1208, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: So, for example, one may take a state of r and refine this into a functional model containing two coupled functions. This sort of model decomposition is called heterogeneous model decomposition <ref> [11, 32, 13] </ref> since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In [13], multimodels were visualized outside of an object-oriented framework.
Reference: [12] <author> Paul A. Fishwick. Simpack: </author> <title> Getting Started with Simulation Programming in C and C++. </title> <booktitle> In 1992 Winter Simulation Conference, </booktitle> <address> Arlington, VA, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: A sample scenario window for an air force mission application was constructed along with a simulation built on top of SimPack <ref> [12, 13, 9] </ref>. We draw a dividing line between the actual implementation and the logical design which is used as a basis for code implementation. Our focus in this article has been on this logical design.
Reference: [13] <author> Paul A. Fishwick. </author> <title> Simulation Model Design and Execution: Building Digital Worlds. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Models are devices used by scientists and engineers to communicate with one another using a concise|often visual|representation of a physical system. Models are visual high-level constructs that we use to communicate system dynamics without the need for frequent communication of low-level formalism, semantics and computer code. In our methodology <ref> [13] </ref>, a model is defined as one of the following: 1) a graph consisting of nodes, arcs and labels, 2) a set of rules, or 3) a set of equations. Computer code and programs are not considered to be models since code semantics are specified at too low a level. <p> By providing an "event-oriented" model category, it is not clear whether this includes only those models which have explicitly surfaced "events" in their forms (as in event graphs [48] or animation scripts <ref> [13] </ref>) or whether a GPSS or Simscript program [34] could be considered an event-oriented model. Our approach is to clearly separate model design (syntax) from execution (semantics). Moreover, as stated earlier, programs are not considered to be models at least for most textually-based programming languages. <p> A key part of conceptual modeling is identifying the classes. For the most part, this procedure is ill-defined but some rules and approaches do exist <ref> [13, 18] </ref> to help in the model engineering process. Natural language provides one basis on which to base choices for classes, attributes and methods. <p> An example constraint graph is an analog electrical circuit or a bond graph [7]. The extra model type not previously discussed here (but found in Fig. 1 and <ref> [13] </ref>) is spatial model. In our discussion, a spatial model is a static model whose dynamics take on one of three primitive types. <p> So, for example, one may take a state of r and refine this into a functional model containing two coupled functions. This sort of model decomposition is called heterogeneous model decomposition <ref> [11, 32, 13] </ref> since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In [13], multimodels were visualized outside of an object-oriented framework. <p> This sort of model decomposition is called heterogeneous model decomposition [11, 32, 13] since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In <ref> [13] </ref>, multimodels were visualized outside of an object-oriented framework. In OOPM, a multimodel may be embedded in several physical objects; however, the individual multimodel layers can still be abstracted by refining dynamic model components. <p> A sample scenario window for an air force mission application was constructed along with a simulation built on top of SimPack <ref> [12, 13, 9] </ref>. We draw a dividing line between the actual implementation and the logical design which is used as a basis for code implementation. Our focus in this article has been on this logical design.
Reference: [14] <author> Paul A. Fishwick. </author> <title> Toward a Convergence of Systems and Software Engineering. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <month> May </month> <year> 1996. </year> <note> Submitted for review. </note>
Reference-contexts: The object oriented concepts of re-use and encapsulation will help greatly in this endeavor. Also, we are trying to create a bridge between the use of modeling in simulation and general purpose programming. As various authors have noted <ref> [8, 14] </ref>, if one liberally applies the concept of metaphor to software engineering, the differences between software and systems engineering begin to dwindle to the point where software engineering can be considered a modeling process.
Reference: [15] <author> Paul A. Fishwick and Kangsun Lee. </author> <title> Two Methods for Exploiting Abstraction in Systems. </title> <booktitle> AI, Simulation and Planning in High Autonomous Systems, </booktitle> <pages> pages 257-264, </pages> <year> 1996. </year> <month> 35 </month>
Reference-contexts: For static models, we may decide to subdivide each cell of s using quadtrees. This represents a shift in model type: from an array to a quadtree. Recent work on multimodeling and a new taxonomy for structural and behavioral abstraction is found in <ref> [15, 28] </ref>. Every dynamic model obj:M () has model components. For multimodeling, the following three model components are important: 1) attribute reference, 2) attribute value, and 3) method. Refinements can be made for each of these model component types. 1.
Reference: [16] <author> Paul A. Fishwick and Bernard P. Zeigler. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 2(1) </volume> <pages> 52-81, </pages> <year> 1992. </year>
Reference-contexts: Models exist to allow humans to communicate about the dynamics and geometry of real world objects. Our definition of modeling is described at a level where models are translated into executable programs and formal specifications. Fishwick and Zeigler <ref> [16] </ref> demonstrated this translation using the DEVS [56] formalism for one particular type of visual multimodel (finite state machine model controlling a set of constraint models). For other types of multimodels, one can devise additional formalisms [39].
Reference: [17] <author> James D. Foley, Andries van Dam, Steven K. Feiner, and John F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <note> Second Edition. </note>
Reference-contexts: For 3D spaces, octrees provide a related structure. Likewise, for the robot depicted in Fig. 2, there are methods 16 described in the literature on computer aided design and computer graphics <ref> [17, 20] </ref>. Fig. 9 displays two static models: the first model is a quadtree of space s and the second model is a constructive solid geometry model of robot r. The quadtree is composed entirely of objects, which when aggregated, form s.
Reference: [18] <author> Ian Graham. </author> <title> Object Oriented Methods. </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software engineering 4 texts <ref> [45, 5, 18] </ref>. As we shall see in model design, the visual orientation is critical since it represents the way most scientists and engineers reason about physical problems and, therefore, must be made explicit in modeling. <p> A key part of conceptual modeling is identifying the classes. For the most part, this procedure is ill-defined but some rules and approaches do exist <ref> [13, 18] </ref> to help in the model engineering process. Natural language provides one basis on which to base choices for classes, attributes and methods.
Reference: [19] <author> Thomas G. Hallam, Ray R. Lassiter, Jia Li, and William KcKinney. </author> <title> Modeling Populations with Continuous Structured Models. </title> <editor> In Donald L. DeAngelis and Louis J. Gross, editors, </editor> <booktitle> Individual-Based Models and Approaches in Ecology, </booktitle> <pages> pages 312-337. </pages> <publisher> Chapman and Hall, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: The Lotka-Volterra model is an example of a general population model that can be characterized as a p-state ecological model [10]. The designation of p-state is positioned in Fig. 19 within the Population class where it belongs. For completeness, we have included other types of ecological models <ref> [10, 19] </ref> and where they fit within the class hierarchy: * General Population Model (p-state): a model that specifies the dynamics of single or inter-species populations. * Structured Population Model (i-state distribution): a population model where other independent variables such as size or age are used to "structure" the population into
Reference: [20] <author> Donald Hearn and M. Pauline Baker. </author> <title> Computer Graphics. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: For 3D spaces, octrees provide a related structure. Likewise, for the robot depicted in Fig. 2, there are methods 16 described in the literature on computer aided design and computer graphics <ref> [17, 20] </ref>. Fig. 9 displays two static models: the first model is a quadtree of space s and the second model is a constructive solid geometry model of robot r. The quadtree is composed entirely of objects, which when aggregated, form s.
Reference: [21] <author> Nevin Heintze, Joxan Jaffar, Spiro Michaylov, Peter Stuckey, and Roland Yap. </author> <title> The CLP(R) Programmer's Manual: </title> <note> Version 1.1, </note> <month> November </month> <year> 1991. </year>
Reference-contexts: Lisp has some declarative features (side effects) whereas other functional languages attempt to be "pure." Finally, with regard to computer science metaphors, constraint languages [6, 29] reflect a way of programming where procedures and declarations are insufficient. The constraint language CLP (R) <ref> [21] </ref> (Constraint Logic Programming) represents this type of language. Also, the next generation Prolog (Prolog III) is constraint oriented. In constraint models, the focus is on a model structure, which involves basic balances of units such as momentum and energy. Fig. 11 illustrates the dynamic modeling taxonomy.
Reference: [22] <author> David R. C. Hill. </author> <title> Object-Oriented Analysis and Simulation. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Other more recent simulation thrusts in the object-oriented arena include SCS conferences [41] as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective <ref> [44, 57, 22, 1] </ref>. We specify two contributions: 1) a comprehensive methodology for constructing physical objects that encapsulate both geometric and dynamical models, and 2) a new taxonomy for dynamic models. <p> Without this explicit constraint, a Room can be composed of any number of walls. This approach is consistent with several existing OO approaches <ref> [45, 22] </ref> to aggregation specification. While we are on the subject of classes, we define an object to be an instance of a class. A particular wheel is an instance of the class called Wheel. A class is a set of objects, which are related through the class definition.
Reference: [23] <author> John A. Jacquez. </author> <title> Compartmental Analysis in Biology and Medicine. </title> <publisher> University of Michigan Press, </publisher> <year> 1985. </year> <note> Second edition. </note>
Reference-contexts: Both methods can be found in ^ C i . The block model is function-based since functions are made explicit as nodes. Variable-based models such as System Dynamics [42] or compartmental models <ref> [23] </ref> are the duals of function-based models since variables are placed at the nodes. For a C with this type of method, the variables are attributes of ^ C i .
Reference: [24] <author> Robert Kowalski. </author> <title> Logic for Problem Solving. </title> <publisher> Elsevier North Holland, </publisher> <year> 1979. </year>
Reference-contexts: A declarative simulation model is one where states and event transitions (individually or in groups) are specified in the model directly. Production rule languages and logic-based languages based on Horn clauses (such as Prolog <ref> [24] </ref>) create a mirror image of the declarative model for simulation. Moreover, declarative semantics are used to define the interpretation of programming language statements. A functional model is one where there is directionality in flow of a signal (whether discrete or continuous).
Reference: [25] <author> Averill M. Law and David W. </author> <title> Kelton. Simulation Modeling & Analysis. </title> <publisher> McGraw-Hill, </publisher> <year> 1991. </year> <note> Second edition. </note>
Reference-contexts: While there has been significant coverage in the simulation literature for analysis methods <ref> [2, 25] </ref>, the general area of modeling for simulation has lacked uniformity and in-depth coverage. Two areas of modeling termed "discrete event" and "continuous" are defined in the simulation literature. For discrete event models, the field is sub-divided into event-oriented, process and activity-based modeling. <p> Two areas of modeling termed "discrete event" and "continuous" are defined in the simulation literature. For discrete event models, the field is sub-divided into event-oriented, process and activity-based modeling. To choose one of these sub-categories, we might ask "What is an event-oriented model?" There is no clear definition <ref> [2, 25] </ref> other than to state that a discrete event model is one where discrete events predominate. There is no attempt to further categorize or classify the form taken on by an event-oriented model. In mentioning form, we need to address the differences between syntax (form) and semantics (execution).
Reference: [26] <author> Jin Joo Lee. </author> <title> A Simulation-Based Approach for Decision Making and Route Planning. </title> <type> PhD thesis, </type> <month> June </month> <year> 1996. </year>
Reference-contexts: For those attributes and methods that are defined as models, there is a model window that permits visual editing. As the model is executed, the simulation output is shown on a scenario window. Our progress to date has illustrated the use of simulation to the planning process <ref> [27, 26] </ref>; however, we are still building the graphical user interface utilities for the model window. A sample scenario window for an air force mission application was constructed along with a simulation built on top of SimPack [12, 13, 9].
Reference: [27] <author> Jin Joo Lee and Paul A. Fishwick. </author> <title> Real-Time Simulation-Based Planning for Computer Generated Force Simulation. </title> <journal> Simulation, </journal> <volume> 63(5) </volume> <pages> 299-315, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: For those attributes and methods that are defined as models, there is a model window that permits visual editing. As the model is executed, the simulation output is shown on a scenario window. Our progress to date has illustrated the use of simulation to the planning process <ref> [27, 26] </ref>; however, we are still building the graphical user interface utilities for the model window. A sample scenario window for an air force mission application was constructed along with a simulation built on top of SimPack [12, 13, 9].
Reference: [28] <author> Kangsun Lee and Paul A. Fishwick. </author> <title> A Methodology for Dynamic Model Abstraction. </title> <journal> SCS Transactions on Simulation, </journal> <note> 1996. Submitted August 1996. </note>
Reference-contexts: For static models, we may decide to subdivide each cell of s using quadtrees. This represents a shift in model type: from an array to a quadtree. Recent work on multimodeling and a new taxonomy for structural and behavioral abstraction is found in <ref> [15, 28] </ref>. Every dynamic model obj:M () has model components. For multimodeling, the following three model components are important: 1) attribute reference, 2) attribute value, and 3) method. Refinements can be made for each of these model component types. 1.
Reference: [29] <author> William Leler. </author> <title> Constraint Programming Languages: Their Specification and Generation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The languages Lisp [51] and ML [37] are two example functional languages. Lisp has some declarative features (side effects) whereas other functional languages attempt to be "pure." Finally, with regard to computer science metaphors, constraint languages <ref> [6, 29] </ref> reflect a way of programming where procedures and declarations are insufficient. The constraint language CLP (R) [21] (Constraint Logic Programming) represents this type of language. Also, the next generation Prolog (Prolog III) is constraint oriented.
Reference: [30] <author> Aristid Lindenmeyer. </author> <title> Mathematical Models for Cellular Interaction in Development. </title> <journal> Journal of Theoretical Biology, </journal> <volume> 18 </volume> <pages> 280-315, </pages> <year> 1968. </year>
Reference-contexts: But, what if the dynamics cause a change in the static model of an object? This is what happens in biological systems and what we call morphogenesis [33]|a temporal change in structure. Lindenmeyer Systems <ref> [30] </ref> (L-Systems) capture a dynamic way of modeling that falls under the declarative class of dynamic models: rules are specified to model change of object structure.
Reference: [31] <author> Greg Michaelson. </author> <title> An Introduction to Functional Programming through Lambda Calculus. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: A functional model is one where there is directionality in flow of a signal (whether discrete or continuous). The flow has a source, several possible sinks, and contains coupled components through which material flows. Functional languages, often based on the lambda calculus <ref> [31, 40] </ref>, are similar in principle. If programming language statements are not viewed declaratively, they usually are defined using functional semantics. The languages Lisp [51] and ML [37] are two example functional languages.
Reference: [32] <author> Victor T. Miller and Paul A. Fishwick. </author> <title> Heterogeneous Hierarchical Models. In Artificial Intelligence X: Knowledge Based Systems, </title> <address> Orlando, FL, </address> <month> April </month> <year> 1992. </year> <booktitle> SPIE. </booktitle> <pages> 36 </pages>
Reference-contexts: So, for example, one may take a state of r and refine this into a functional model containing two coupled functions. This sort of model decomposition is called heterogeneous model decomposition <ref> [11, 32, 13] </ref> since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In [13], multimodels were visualized outside of an object-oriented framework.
Reference: [33] <author> J. D. Murray. </author> <title> Mathematical Biology. </title> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: This model must be placed in an aggregate object that contains both o1 and o2. 6.5 Predator-Prey Model Consider that some robots act like predators and some act like prey. In this case, an applicable dynamic model to create is along the lines of the Lotka-Volterra model <ref> [33] </ref>. A conceptual model is shown in Fig. 19. This model suggests that we have a physical scenario composed of an environment (weather), landscape and a population of organisms. There are two types of populations: predator and prey.
Reference: [34] <author> Richard E. Nance. </author> <title> Simulation Programming Languages: An Abridged History. </title> <booktitle> In 1995 Winter Simulation Conference, </booktitle> <pages> pages 1307 - 1313, </pages> <address> Washington, DC, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: By providing an "event-oriented" model category, it is not clear whether this includes only those models which have explicitly surfaced "events" in their forms (as in event graphs [48] or animation scripts [13]) or whether a GPSS or Simscript program <ref> [34] </ref> could be considered an event-oriented model. Our approach is to clearly separate model design (syntax) from execution (semantics). Moreover, as stated earlier, programs are not considered to be models at least for most textually-based programming languages. One can attach semantics to syntax, but they remain orthogonal concepts.
Reference: [35] <author> Donald A. Norman. </author> <title> The Design of Everyday Things. </title> <publisher> Currency Doubleday, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: The act of coding in an object-oriented language is not a substitute for doing good design. As an example, C++ provides many object oriented capabilities, but does not enforce object oriented design. Norman <ref> [35] </ref> points out the need for good visual, conceptual models in general design for improved user-interfaces to physical instruments and devices. The importance of design extends to all scientific endeavors with a focus on models.
Reference: [36] <author> Louis Padulo and Michael A. Arbib. </author> <title> Systems Theory: A Unified State Space Approach to Continuous and Discrete Systems. </title> <editor> W. B. </editor> <publisher> Saunders, </publisher> <address> Philadelphia, PA, </address> <year> 1974. </year>
Reference-contexts: Computer code and programs are not considered to be models since code semantics are specified at too low a level. Likewise, formal methods <ref> [36, 56] </ref> associate the formal semantics with models but do not focus on representing the kind of high-level form needed for modeling. <p> There are internal and external events. An external event is one from "outside the system" whereas an internal event is one "inside the system" (but from a lower abstraction level). Further explanation and variations of the system formalism can be found in the systems <ref> [36] </ref> and simulation [55] literature; however, the above definition suffices for our purpose. The first key observation of OOPM is that we are encapsulating behavior (dynamic models) and structure (static models) within objects.
Reference: [37] <author> L. C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: Functional languages, often based on the lambda calculus [31, 40], are similar in principle. If programming language statements are not viewed declaratively, they usually are defined using functional semantics. The languages Lisp [51] and ML <ref> [37] </ref> are two example functional languages. Lisp has some declarative features (side effects) whereas other functional languages attempt to be "pure." Finally, with regard to computer science metaphors, constraint languages [6, 29] reflect a way of programming where procedures and declarations are insufficient.
Reference: [38] <author> James L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: In mentioning form, we need to address the differences between syntax (form) and semantics (execution). A program or model may be of a particular form; however, the semantics of this form may have a variety of possibilities. A Petri net <ref> [38] </ref> has a particular form regardless of the way in which it is executed. Ideally, then, we would like to create a model category that classifies the form of the Petri net, apart from its potential execution characteristics.
Reference: [39] <author> Herbert Praehofer. </author> <title> Systems Theoretic Formalisms for Combined Discrete-Continuous System Simulation. </title> <journal> International Journal of General Systems, </journal> <volume> 19(3) </volume> <pages> 219-240, </pages> <year> 1991. </year>
Reference-contexts: The importance of design extends to all scientific endeavors with a focus on models. Models need to provide a map between the physical world and what we wish to design and subsequently implement either as a program or a physical construction. Programs and formal specifications <ref> [54, 56, 39] </ref> are a vital ingredient in the simulation process since, without these methods, modeling approaches lack precision and cohesion. However, formal specifications should not take the place of models since they serve two different purposes. <p> Fishwick and Zeigler [16] demonstrated this translation using the DEVS [56] formalism for one particular type of visual multimodel (finite state machine model controlling a set of constraint models). For other types of multimodels, one can devise additional formalisms <ref> [39] </ref>.
Reference: [40] <author> G. Revesz. </author> <title> Lambda Calculus Combinators and Functional Programming. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: A functional model is one where there is directionality in flow of a signal (whether discrete or continuous). The flow has a source, several possible sinks, and contains coupled components through which material flows. Functional languages, often based on the lambda calculus <ref> [31, 40] </ref>, are similar in principle. If programming language statements are not viewed declaratively, they usually are defined using functional semantics. The languages Lisp [51] and ML [37] are two example functional languages.
Reference: [41] <author> Chell A. Roberts, Terrence Beaumariage, Charles Herring, and Jeffrey Wallace. </author> <title> Object Oriented Simulation. </title> <booktitle> Society for Computer Simulation International, </booktitle> <year> 1995. </year>
Reference-contexts: As we shall see in model design, the visual orientation is critical since it represents the way most scientists and engineers reason about physical problems and, therefore, must be made explicit in modeling. Other more recent simulation thrusts in the object-oriented arena include SCS conferences <ref> [41] </ref> as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective [44, 57, 22, 1].
Reference: [42] <author> Nancy Roberts, David Andersen, Ralph Deal, Michael Garet, and William Shaffer. </author> <title> Introduction to Computer Simulation: A Systems Dynamics Approach. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: A node is a method of C, and the arc represents a directed connection from one method to another. Both methods can be found in ^ C i . The block model is function-based since functions are made explicit as nodes. Variable-based models such as System Dynamics <ref> [42] </ref> or compartmental models [23] are the duals of function-based models since variables are placed at the nodes. For a C with this type of method, the variables are attributes of ^ C i .
Reference: [43] <author> Ronald C. Rosenberg and Dean C. Karnopp. </author> <title> Introduction to Physical System Dynamics. </title> <publisher> McGraw-Hill, </publisher> <year> 1983. </year>
Reference-contexts: Constraint: Constraint models are equational in nature, and reflect non-directional constraints among object attributes. A class C with a constraint equational model contains an equation with terms containing attributes of ^ C i . Equations can be represented in graph form as well as with bond graphs <ref> [7, 43, 50] </ref>. Models of non-directional behavior, such as general hydrodynamic models are constraint-based.
Reference: [44] <author> Jeff Rothenberg. </author> <title> Object-Oriented Simulation: Where do we go from here? Technical report, </title> <publisher> RAND Corporation, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: Other more recent simulation thrusts in the object-oriented arena include SCS conferences [41] as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective <ref> [44, 57, 22, 1] </ref>. We specify two contributions: 1) a comprehensive methodology for constructing physical objects that encapsulate both geometric and dynamical models, and 2) a new taxonomy for dynamic models.
Reference: [45] <author> James Rumbaugh, Michael Blaha, William Premerlani, Eddy Frederick, and William Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software engineering 4 texts <ref> [45, 5, 18] </ref>. As we shall see in model design, the visual orientation is critical since it represents the way most scientists and engineers reason about physical problems and, therefore, must be made explicit in modeling. <p> The motivation for the first contribution is that there currently exists no method that uses object-oriented design and specifies an enhancement of this design to accommodate static and dynamic models. We have taken the existing visual object-oriented design approaches reflected in texts such as Rumbaugh <ref> [45] </ref> and Booch [4] and extended these approaches. Regarding the motivation for deriving a new method for dynamic modeling, we offer the following reasons: 1. Object-Oriented Design: The new taxonomy is one based on object-oriented design methodology since it is developed as an extension to object-oriented design. <p> on a discussion of object-oriented physical design for robots within spaces, we present Table 1 to illustrate how, through mappings from one discipline to another, different areas fit into this general scenario scheme. 4 Model Engineering Our basis for physical modeling begins with object-oriented design concepts as described in textbooks <ref> [5, 45] </ref> as well as object-oriented modeling as applied specifically for simulation of discrete event systems [57]. Model engineering is the process of building static and dynamic models for a physical scenario using our extended object-oriented framework. <p> Without this explicit constraint, a Room can be composed of any number of walls. This approach is consistent with several existing OO approaches <ref> [45, 22] </ref> to aggregation specification. While we are on the subject of classes, we define an object to be an instance of a class. A particular wheel is an instance of the class called Wheel. A class is a set of objects, which are related through the class definition.
Reference: [46] <author> Hanan Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: For modeling geometry and space, there are a number of representational techniques, many of which are discussed by Samet in two volumes <ref> [47, 46] </ref>. We will not create any extensions of static modeling methods. Instead, for our scenario conceptual model in Fig. 2, we'll discuss our alternatives with an example or two. In Fig. 2 we have two items: a space s where robots behave.
Reference: [47] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: For modeling geometry and space, there are a number of representational techniques, many of which are discussed by Samet in two volumes <ref> [47, 46] </ref>. We will not create any extensions of static modeling methods. Instead, for our scenario conceptual model in Fig. 2, we'll discuss our alternatives with an example or two. In Fig. 2 we have two items: a space s where robots behave.
Reference: [48] <author> Lee W. Schruben. </author> <title> Simulation Modeling with Event Graphs. </title> <journal> Communications of the ACM, </journal> <volume> 26(11), </volume> <year> 1983. </year>
Reference-contexts: By providing an "event-oriented" model category, it is not clear whether this includes only those models which have explicitly surfaced "events" in their forms (as in event graphs <ref> [48] </ref> or animation scripts [13]) or whether a GPSS or Simscript program [34] could be considered an event-oriented model. Our approach is to clearly separate model design (syntax) from execution (semantics). Moreover, as stated earlier, programs are not considered to be models at least for most textually-based programming languages.
Reference: [49] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison Wesley, </publisher> <address> 2 edition, </address> <year> 1991. </year>
Reference-contexts: A method can be code, whose form depends on the programming language, or a dynamic model. The structure of a class is seen in Fig. 6. Variables and code are described in OO languages such as C++ <ref> [49] </ref>. We define a static model as a graph of objects and a dynamic model as a graph of attributes and methods. The model types of interest here are dynamic.
Reference: [50] <author> Jean Thoma. </author> <title> Bond Graphs: Introduction and Application. </title> <publisher> Pergamon Press, </publisher> <year> 1975. </year> <month> 37 </month>
Reference-contexts: Constraint: Constraint models are equational in nature, and reflect non-directional constraints among object attributes. A class C with a constraint equational model contains an equation with terms containing attributes of ^ C i . Equations can be represented in graph form as well as with bond graphs <ref> [7, 43, 50] </ref>. Models of non-directional behavior, such as general hydrodynamic models are constraint-based.
Reference: [51] <author> Patrick Henry Winston and Berthold Klaus Paul Horn. </author> <title> LISP. </title> <publisher> Addison Wesley, </publisher> <address> second edition, </address> <year> 1984. </year>
Reference-contexts: The flow has a source, several possible sinks, and contains coupled components through which material flows. Functional languages, often based on the lambda calculus [31, 40], are similar in principle. If programming language statements are not viewed declaratively, they usually are defined using functional semantics. The languages Lisp <ref> [51] </ref> and ML [37] are two example functional languages. Lisp has some declarative features (side effects) whereas other functional languages attempt to be "pure." Finally, with regard to computer science metaphors, constraint languages [6, 29] reflect a way of programming where procedures and declarations are insufficient.
Reference: [52] <author> Wilfried F. Wolff. </author> <title> An Individual-Oriented Model of a Wading Bird Nesting Colony. </title> <journal> Ecological Modelling, </journal> <volume> 72 </volume> <pages> 75-114, </pages> <year> 1994. </year>
Reference-contexts: If one chooses a discrete event-type approach, using rules for the model type for example, other model types are possible. Wolff <ref> [52] </ref> refers to a rule-based model as an individual-oriented model (IOM) to differentiate it from the i-state configuration model, termed an individual-based model (IBM). Let's note the rules for generalization and aggregation: * Aggregation: 31 1.
Reference: [53] <author> William A. Woods. </author> <title> What's in a Link: Foundations for Semantic Networks. </title> <editor> In Daniel Bobrow and Allan Collins, editors, </editor> <booktitle> Representation and Understanding. </booktitle> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: For physical modeling, our primary type of static model is one that specifies the topology or geometry of a physical object such as r. However, a semantic net <ref> [53] </ref>, would be an equally valid static model. Dynamic models (ref. Sec. 6.2) have the ability to change static models over time. The previously discussed conceptual model, composed of classes and relations, can also be seen as dynamically changing with class relations changing over time.
Reference: [54] <author> Bernard P. Zeigler. </author> <title> Towards a Formal Theory of Modelling and Simulation: Structure Preserving Morphisms. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 19(4):742 - 764, </volume> <year> 1972. </year>
Reference-contexts: The importance of design extends to all scientific endeavors with a focus on models. Models need to provide a map between the physical world and what we wish to design and subsequently implement either as a program or a physical construction. Programs and formal specifications <ref> [54, 56, 39] </ref> are a vital ingredient in the simulation process since, without these methods, modeling approaches lack precision and cohesion. However, formal specifications should not take the place of models since they serve two different purposes.
Reference: [55] <author> Bernard P. Zeigler. </author> <title> Theory of Modelling and Simulation. </title> <publisher> John Wiley and Sons, </publisher> <year> 1976. </year>
Reference-contexts: There are internal and external events. An external event is one from "outside the system" whereas an internal event is one "inside the system" (but from a lower abstraction level). Further explanation and variations of the system formalism can be found in the systems [36] and simulation <ref> [55] </ref> literature; however, the above definition suffices for our purpose. The first key observation of OOPM is that we are encapsulating behavior (dynamic models) and structure (static models) within objects.
Reference: [56] <author> Bernard P. Zeigler. </author> <title> DEVS Representation of Dynamical Systems: Event-Based Intelligent Control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1):72 - 80, </volume> <month> January </month> <year> 1989. </year>
Reference-contexts: Computer code and programs are not considered to be models since code semantics are specified at too low a level. Likewise, formal methods <ref> [36, 56] </ref> associate the formal semantics with models but do not focus on representing the kind of high-level form needed for modeling. <p> The importance of design extends to all scientific endeavors with a focus on models. Models need to provide a map between the physical world and what we wish to design and subsequently implement either as a program or a physical construction. Programs and formal specifications <ref> [54, 56, 39] </ref> are a vital ingredient in the simulation process since, without these methods, modeling approaches lack precision and cohesion. However, formal specifications should not take the place of models since they serve two different purposes. <p> Models exist to allow humans to communicate about the dynamics and geometry of real world objects. Our definition of modeling is described at a level where models are translated into executable programs and formal specifications. Fishwick and Zeigler [16] demonstrated this translation using the DEVS <ref> [56] </ref> formalism for one particular type of visual multimodel (finite state machine model controlling a set of constraint models). For other types of multimodels, one can devise additional formalisms [39].

References-found: 56

