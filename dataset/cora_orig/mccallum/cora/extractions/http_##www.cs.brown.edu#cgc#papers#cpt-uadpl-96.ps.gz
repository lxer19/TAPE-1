URL: http://www.cs.brown.edu/cgc/papers/cpt-uadpl-96.ps.gz
Refering-URL: http://www.cs.brown.edu/people/rt/papers/recent-papers/recent-papers.html
Root-URL: http://www.cs.brown.edu
Title: A UNIFIED APPROACH TO DYNAMIC POINT LOCATION, RAY SHOOTING, AND SHORTEST PATHS IN PLANAR MAPS  
Author: YI-JEN CHIANG FRANCO P. PREPARATA AND ROBERTO TAMASSIA 
Keyword: Key words. point location, ray shooting, shortest path, computational geometry, dynamic algorithm.  
Note: AMS subject classifications. 68U05, 68Q25, 68P05, 68P10  
Abstract: We describe a new technique for dynamically maintaining the trapezoidal decomposition of a connected planar map M with n vertices, and apply it to the development of a unified dynamic data structure that supports point-location, ray-shooting, and shortest-path queries in M. The space requirement is O(n log n). Point-location queries take time O(log n). Ray-shooting and shortest-path queries take time O(log 3 n) (plus O(k) time if the k edges of the shortest path are reported in addition to its length). Updates consist of insertions and deletions of vertices and edges, and take O(log 3 n) time (amortized for vertex updates). This is the first polylog-time dynamic data structure for shortest-path and ray-shooting queries. It is also the first dynamic point-location data structure for connected planar maps that achieves optimal query time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and M. Sharir, </author> <title> Applications of a new partition scheme, </title> <journal> Discrete Comput. Geom., </journal> <volume> 9 (1993), </volume> <pages> pp. 11-38. </pages>
Reference-contexts: TAMASSIA a dynamic environment is restricted to monotone maps [8]. For a survey of dynamic point-location techniques and other dynamic algorithms in computational geometry, see Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest-path queries, respectively, in a simple polygon with n vertices. <p> No polylog-time method was previously known in a dynamic setting, although a polylog-time ray-shooting technique by Reif and Sen [28], designed for monotone polygons, may be extensible to the general case. Sublinear-time techniques are known only for ray-shooting queries <ref> [1, 7] </ref>, with O ( p n polylog (n)) query/update time; they support ray-shooting in a set of possibly intersecting segments without taking advantage of the structure of planar maps. A property that appears to greatly facilitate the development of dynamic point-location techniques is monotonicity ([8, 15, 25]).
Reference: [2] <author> H. Baumgarten, H. Jung, and K. Mehlhorn, </author> <title> Dynamic point location in general subdivisions, </title> <booktitle> in Proc. 3rd ACM-SIAM Sympos. on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 250-258. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known. <p> The best results to-date for dynamic point-location in an n-vertex connected map are due to Cheng-Janardan [6] and Baumgarten-Jung-Mehlhorn <ref> [2] </ref>. The technique of [6] achieves O (log 2 n) query time, O (log n) update time, and O (n) space. The data structure of [2] has query and insertion time O (log n log log n), deletion time O (log n), using O (n) space, where the time bounds are <p> The best results to-date for dynamic point-location in an n-vertex connected map are due to Cheng-Janardan [6] and Baumgarten-Jung-Mehlhorn <ref> [2] </ref>. The technique of [6] achieves O (log 2 n) query time, O (log n) update time, and O (n) space. The data structure of [2] has query and insertion time O (log n log log n), deletion time O (log n), using O (n) space, where the time bounds are amortized for the updates.
Reference: [3] <author> S. W. Bent, D. D. Sleator, and R. E. Tarjan, </author> <title> Biased search trees, </title> <journal> SIAM J. Comput., </journal> <volume> 14 (1985), </volume> <pages> pp. 545-568. </pages>
Reference-contexts: In particular, a simple rotation can be viewed as a sequence of four elementary splits and joins. Three special types of data structures will be used in this paper: biased binary trees <ref> [3] </ref>, BB [ff]-trees [20], and dynamic trees [30]. A biased binary tree [3] is a binary search tree whose leaves store weighted items. Let w be the sum of all weights. <p> In particular, a simple rotation can be viewed as a sequence of four elementary splits and joins. Three special types of data structures will be used in this paper: biased binary trees <ref> [3] </ref>, BB [ff]-trees [20], and dynamic trees [30]. A biased binary tree [3] is a binary search tree whose leaves store weighted items. Let w be the sum of all weights. <p> the depth of a leaf with weight w i is at most log (w=w i ) + 2, and each of the following update operations can be done in O (log w) time: change of the weight of an item, insertion/deletion of an item, and split/splice of two biased trees <ref> [3] </ref>. <p> Each arc of the trees is classified as solid or dashed, so that each tree is partitioned into a collection of solid paths, connected by dashed arcs. A solid path is maintained by a data structure called a path tree. Using biased binary trees <ref> [3] </ref> as the standard implementation of path trees, each of the above operations takes O (log n) time, where n is the size of the tree (s) in the forest involved. 3. The dynamics of trapezoidal decompositions. <p> Each solid path is associated with a path tree, implemented as a biased search tree <ref> [3] </ref>. Note that the sequence of nodes of a solid path of T identifies a sequence of nested trapezoids. <p> The left-to-right leaves of T (P i ) represent bottom-to-top nodes of P i , which in turn correspond to smaller-to-bigger nested trapezoids. Using biased search trees <ref> [3] </ref> as the standard implementation of path trees, we have Lemma 5.1. The time complexity for a point location query is O (log n). Proof.
Reference: [4] <author> G. Bilardi and F. P. Preparata, </author> <title> Probabilistic analysis of a new geometric searching technique, </title> <type> unpublished manuscript, </type> <year> 1981. </year>
Reference-contexts: In this paper we combine the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory <ref> [4, 23] </ref> and practice [11] is well-established. This leads to the adoption of horizontal normalizing diagonals, called lids. The method rests on three major components: 1.
Reference: [5] <author> B. Chazelle and L. J. Guibas, </author> <title> Visibility and intersection problems in plane geometry, </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 (1989), </volume> <pages> pp. 551-581. </pages>
Reference-contexts: TAMASSIA a dynamic environment is restricted to monotone maps [8]. For a survey of dynamic point-location techniques and other dynamic algorithms in computational geometry, see Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest-path queries, respectively, in a simple polygon with n vertices. <p> Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19]. In particular, the linear-space data structures of Chazelle-Guibas <ref> [5] </ref> and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest-path queries, respectively, in a simple polygon with n vertices.
Reference: [6] <author> S. W. Cheng and R. Janardan, </author> <title> New results on dynamic planar point location, </title> <journal> SIAM J. Comput., </journal> <volume> 21 (1992), </volume> <pages> pp. </pages> <month> 972-999. </month> <title> [7] , Space efficient ray shooting and intersection searching: algorithms, </title> <booktitle> dynamizations, and applications, in Proc. 2nd ACM-SIAM Sympos. on Discrete Algorithms, </booktitle> <year> 1991, </year> <pages> pp. 7-16. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known. <p> The best results to-date for dynamic point-location in an n-vertex connected map are due to Cheng-Janardan <ref> [6] </ref> and Baumgarten-Jung-Mehlhorn [2]. The technique of [6] achieves O (log 2 n) query time, O (log n) update time, and O (n) space. <p> The best results to-date for dynamic point-location in an n-vertex connected map are due to Cheng-Janardan <ref> [6] </ref> and Baumgarten-Jung-Mehlhorn [2]. The technique of [6] achieves O (log 2 n) query time, O (log n) update time, and O (n) space.
Reference: [8] <author> Y.-J. Chiang and R. Tamassia, </author> <title> Dynamization of the trapezoid method for planar point location in monotone subdivisions, </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 2 (1992), </volume> <pages> pp. 311-333. </pages> <note> [9] , Dynamic algorithms in computational geometry, Proc. </note> <editor> IEEE, G. Toussaint, ed., </editor> <month> 80 </month> <year> (1992), </year> <pages> pp. 1412-1434. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known. <p> E-mail ad dresses: fyjc,franco,rtg@cs.brown.edu. 1 2 Y.-J. CHIANG, F. P. PREPARATA AND R. TAMASSIA a dynamic environment is restricted to monotone maps <ref> [8] </ref>. For a survey of dynamic point-location techniques and other dynamic algorithms in computational geometry, see Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19]. <p> If q is on an vertex or edge, then return that vertex or edge. Our dynamic point-location data structure is inspired by the static trapezoid method [23] and its dynamic version for monotone maps <ref> [8] </ref>. It uses the normalization and hull structures as the underpinning of update operations. Queries are instead performed in a location structure, a binary tree called trapezoid tree. The trapezoid tree defines a binary partition of the plane obtained by means of vertical and horizontal cuts. <p> Queries are instead performed in a location structure, a binary tree called trapezoid tree. The trapezoid tree defines a binary partition of the plane obtained by means of vertical and horizontal cuts. It differs in many substantial aspects from the trapezoid trees used in <ref> [8, 23] </ref>, the most striking difference being that it is not balanced. The trapezoid tree T for map M is based on the Y-tree Y (see Section 4) and on the normalization of M as reflected by the normalization structure (see Section 3).
Reference: [10] <author> D. P. Dobkin and R. Lipton, </author> <title> Multidimensional searching problems, </title> <journal> SIAM J. Comput., </journal> <volume> 5 (1976), </volume> <pages> pp. 181-186. </pages>
Reference-contexts: First and foremost among these operations is planar point-location, i.e., the identification of the map region containing a given query point; but also shortest-path and ray-shooting queries have been considered very prominently. Starting with the pioneering work in planar point-location of the seventies <ref> [10, 18] </ref>, over the years several techniques have been developed, culminating in asymptotically time- and space-optimal methods [12, 17, 29] that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [11] <author> M. I. Edahiro, I. Kokubo and T. Asano, </author> <title> A new point-location algorithm and its practical efficiency|comparison with existing algorithms, </title> <journal> ACM Trans. Graphics, </journal> <volume> 3 (1984), </volume> <pages> pp. 86-109. </pages>
Reference-contexts: In this paper we combine the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory [4, 23] and practice <ref> [11] </ref> is well-established. This leads to the adoption of horizontal normalizing diagonals, called lids. The method rests on three major components: 1.
Reference: [12] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi, </author> <title> Optimal point location in a monotone DYNAMIC POINT LOCATION, RAY SHOOTING AND SHORTEST PATHS 29 subdivision, </title> <journal> SIAM J. Comput., </journal> <volume> 15 (1986), </volume> <pages> pp. 317-340. </pages>
Reference-contexts: Starting with the pioneering work in planar point-location of the seventies [10, 18], over the years several techniques have been developed, culminating in asymptotically time- and space-optimal methods <ref> [12, 17, 29] </ref> that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [13] <author> O. Fries, </author> <title> Zerlegung einer planaren unterteilung der ebene und ihre anwendungen, M.S. </title> <type> thesis, </type> <institution> Inst. Angew. Math. and Inform., Univ. Saarlandes, Saarbrucken, Germany, </institution> <year> 1985. </year>
Reference-contexts: The same approach, when attempted for the dynamic setting, could lead to onerous updates, such as when the insertion of an edge causes the removal of a very large number of normalizing diagonals. A rather complicated and only partially documented technique due to Fries <ref> [13] </ref>, is reported to assure that only a logarithmic number of normalizing diagonals be involved in any update. In this paper we combine the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory [4, 23] and practice [11] is well-established.
Reference: [14] <author> O. Fries, K. Mehlhorn, and S. N aher, </author> <title> Dynamization of geometric data structures, </title> <booktitle> in Proc. 1st ACM Sympos. on Computational Geometry, </booktitle> <year> 1985, </year> <pages> pp. 168-176. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known.
Reference: [15] <author> M. T. Goodrich and R. Tamassia, </author> <title> Dynamic trees and dynamic point location, </title> <booktitle> in Proc. 23rd ACM Sympos. on Theory of Computing, </booktitle> <year> 1991, </year> <pages> pp. 523-533. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known.
Reference: [16] <author> L. J. Guibas and J. Hershberger, </author> <title> Optimal shortest path queries in a simple polygon, </title> <institution> J. Comput. Syst. Sci., </institution> <month> 39 </month> <year> (1989), </year> <pages> pp. 126-152. </pages>
Reference-contexts: TAMASSIA a dynamic environment is restricted to monotone maps [8]. For a survey of dynamic point-location techniques and other dynamic algorithms in computational geometry, see Chiang and Tamassia [9]. Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting <ref> [1, 5, 7, 16, 19] </ref>. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger [16] support in O (log n) time ray-shooting and shortest-path queries, respectively, in a simple polygon with n vertices. <p> Algorithmic research on shortest-path and ray-shooting queries has also experienced steady progress, resulting in time-optimal techniques for the static setting [1, 5, 7, 16, 19]. In particular, the linear-space data structures of Chazelle-Guibas [5] and of Guibas-Hershberger <ref> [16] </ref> support in O (log n) time ray-shooting and shortest-path queries, respectively, in a simple polygon with n vertices. No polylog-time method was previously known in a dynamic setting, although a polylog-time ray-shooting technique by Reif and Sen [28], designed for monotone polygons, may be extensible to the general case. <p> CHIANG, F. P. PREPARATA AND R. TAMASSIA O (log 3 n + k), respectively, where k is the number of segments in the shortest path reported by path. The notion of hourglass is central to our current problem. We adopt the terminology proposed by Guibas and Hershberger <ref> [16] </ref>. <p> Let ff be the subchain of r counterclockwise from a 1 to a 2 , and define fi similarly for b 2 and b 1 . The hourglass has one of the following special structures (as analyzed by <ref> [16] </ref>): Open hourglass: If the convex hulls inside r of ff and fi do not intersect, then path (a 1 ; a 2 ; r) is the convex hull of the subchain of ff clockwise from a 1 to a 2 , and similarly for path (b 2 ; b 1 <p> We denote with Q a maximal monotone subpath of a solid path P and specify the implementation of ltree (Q) and rtree (Q). We use pruned trees augmented with chain-trees as secondary structures. Our scheme uses ideas from [22] and <ref> [16] </ref>. * Trees ltree (Q) and rtree (Q) are implemented by means of pruned trees with respect to Y. * Let be a node of ltree (Q) (nodes of rtree (Q) are handled identically) and the parent of .
Reference: [17] <author> D. G. Kirkpatrick, </author> <title> Optimal search in planar subdivisions, </title> <journal> SIAM J. Comput., </journal> <volume> 12 (1983), </volume> <pages> pp. 28-35. </pages>
Reference-contexts: Starting with the pioneering work in planar point-location of the seventies [10, 18], over the years several techniques have been developed, culminating in asymptotically time- and space-optimal methods <ref> [12, 17, 29] </ref> that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [18] <author> D. T. Lee and F. P. Preparata, </author> <title> Location of a point in a planar subdivision and its applications, </title> <journal> SIAM J. Comput., </journal> <volume> 6 (1977), </volume> <pages> pp. </pages> <month> 594-606. </month> <title> [19] , Euclidean shortest paths in the presence of rectilinear barriers, Networks, </title> <booktitle> 14 (1984), </booktitle> <pages> pp. 393-410. </pages>
Reference-contexts: First and foremost among these operations is planar point-location, i.e., the identification of the map region containing a given query point; but also shortest-path and ray-shooting queries have been considered very prominently. Starting with the pioneering work in planar point-location of the seventies <ref> [10, 18] </ref>, over the years several techniques have been developed, culminating in asymptotically time- and space-optimal methods [12, 17, 29] that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [20] <author> K. Mehlhorn, </author> <title> Data Structure and Algorithms 1: Sorting and Searching, </title> <journal> pp. </journal> <pages> 189-199, </pages> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, Germany, </address> <year> 1984. </year>
Reference-contexts: In particular, a simple rotation can be viewed as a sequence of four elementary splits and joins. Three special types of data structures will be used in this paper: biased binary trees [3], BB [ff]-trees <ref> [20] </ref>, and dynamic trees [30]. A biased binary tree [3] is a binary search tree whose leaves store weighted items. Let w be the sum of all weights. <p> A BB [ff]-tree <ref> [20] </ref> (where ff is a fixed real, with 1 4 &lt; ff 1 2 2 ) is a binary search tree and has the following important properties (among others): * A BB [ff]-tree with n nodes has height O (log n). * Assume that we augment a BB [ff]-tree with secondary
Reference: [21] <author> M. H. Overmars, </author> <title> Range searching in a set of line segments, </title> <booktitle> in Proc. 1st ACM Sympos. on Computational Geometry, </booktitle> <year> 1985, </year> <pages> pp. 177-185. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known.
Reference: [22] <author> M. H. Overmars and J. van Leeuwen, </author> <title> Maintenance of configurations in the plane, </title> <institution> J. Comput. Syst. Sci., </institution> <month> 23 </month> <year> (1981), </year> <pages> pp. 166-204. </pages>
Reference-contexts: We denote with Q a maximal monotone subpath of a solid path P and specify the implementation of ltree (Q) and rtree (Q). We use pruned trees augmented with chain-trees as secondary structures. Our scheme uses ideas from <ref> [22] </ref> and [16]. * Trees ltree (Q) and rtree (Q) are implemented by means of pruned trees with respect to Y. * Let be a node of ltree (Q) (nodes of rtree (Q) are handled identically) and the parent of .
Reference: [23] <author> F. P. Preparata, </author> <title> A new approach to planar point location, </title> <journal> SIAM J. Comput., </journal> <volume> 10 (1981), </volume> <pages> pp. 473-483. </pages>
Reference-contexts: In this paper we combine the feature just stated with the underpinnings of the trapezoid method, whose search efficiency both in theory <ref> [4, 23] </ref> and practice [11] is well-established. This leads to the adoption of horizontal normalizing diagonals, called lids. The method rests on three major components: 1. <p> Point location. In this section we consider the problem of answering point location queries: locate (q): Find the region containing query point q. If q is on an vertex or edge, then return that vertex or edge. Our dynamic point-location data structure is inspired by the static trapezoid method <ref> [23] </ref> and its dynamic version for monotone maps [8]. It uses the normalization and hull structures as the underpinning of update operations. Queries are instead performed in a location structure, a binary tree called trapezoid tree. <p> Queries are instead performed in a location structure, a binary tree called trapezoid tree. The trapezoid tree defines a binary partition of the plane obtained by means of vertical and horizontal cuts. It differs in many substantial aspects from the trapezoid trees used in <ref> [8, 23] </ref>, the most striking difference being that it is not balanced. The trapezoid tree T for map M is based on the Y-tree Y (see Section 4) and on the normalization of M as reflected by the normalization structure (see Section 3).
Reference: [24] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: The mechanics of the dynamic maintenance of a normalized map are described in Section 3, while Sections 4, 5, and 6 are respectively devoted to shortest-path, point-location, and ray-shooting queries. 2. Review of background. For the geometric terminology used in this paper, see <ref> [24] </ref>. A connected planar map M is a subdivision of the plane into polygonal regions whose underlying planar graph is connected. <p> With this representation, it is possible to find the two tangents from a point to a convex chain and the four common tangents between two convex chains in logarithmic time <ref> [24] </ref>. We now give the details of our representation of hourglasses. An open hourglass is represented by storing its two convex chains into chain trees. A closed hourglass is represented by storing into separate substructures the four convex chains forming the funnels, and the string between the apices.
Reference: [25] <author> F. P. Preparata and R. Tamassia, </author> <title> Fully dynamic point location in a monotone subdivision, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> pp. </pages> <month> 811-830. </month> <title> [26] , Dynamic planar point location with optimal query time, </title> <type> Theoret. </type> <institution> Comput. Sci., </institution> <month> 74 </month> <year> (1990), </year> <pages> pp. 95-114. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known.
Reference: [27] <author> F. P. Preparata, J. Vitter, and M. Yvinec, </author> <title> Computation of the axial view of a set of isothetic parallelepipeds, </title> <journal> ACM Trans. Graphics, </journal> <volume> 9 (1990), </volume> <pages> pp. 278-300. </pages>
Reference-contexts: Remark. In a concrete situation where vertices are a priori restricted to a fixed set of ordinates, tree Y is static; if we then implement the trees ltree and rtree by means of contracted binary trees <ref> [27] </ref> of depth &lt; log jY j (whose maintenance requires no rotation), then the update times become O (log 2 n log jY j), in the worst case.
Reference: [28] <author> J. H. Reif and S. Sen, </author> <title> An efficient output-sensitive hidden-surface removal algorithm and its parallelization, </title> <booktitle> in Proc. 4th ACM Sympos. on Computational Geometry, </booktitle> <year> 1988, </year> <pages> pp. 193-200. </pages>
Reference-contexts: No polylog-time method was previously known in a dynamic setting, although a polylog-time ray-shooting technique by Reif and Sen <ref> [28] </ref>, designed for monotone polygons, may be extensible to the general case. Sublinear-time techniques are known only for ray-shooting queries [1, 7], with O ( p n polylog (n)) query/update time; they support ray-shooting in a set of possibly intersecting segments without taking advantage of the structure of planar maps.
Reference: [29] <author> N. Sarnak and R. E. Tarjan, </author> <title> Planar point location using persistent search trees, </title> <journal> Commun. ACM, </journal> <volume> 29 (1986), </volume> <pages> pp. 669-679. </pages>
Reference-contexts: Starting with the pioneering work in planar point-location of the seventies [10, 18], over the years several techniques have been developed, culminating in asymptotically time- and space-optimal methods <ref> [12, 17, 29] </ref> that are also of sufficiently practical flavor. Such methods, however, refer to the static case where no alteration of the map is allowed during its use.
Reference: [30] <author> D. D. Sleator and R. E. Tarjan, </author> <title> A data structure for dynamic trees, </title> <institution> J. Comput. Syst. Sci., </institution> <month> 24 </month> <year> (1983), </year> <pages> pp. 362-381. </pages>
Reference-contexts: In particular, a simple rotation can be viewed as a sequence of four elementary splits and joins. Three special types of data structures will be used in this paper: biased binary trees [3], BB [ff]-trees [20], and dynamic trees <ref> [30] </ref>. A biased binary tree [3] is a binary search tree whose leaves store weighted items. Let w be the sum of all weights. <p> Then the amortized time of an update operation in a sequence of n insertions and deletions starting from an initially empty BB [ff]-tree is O (log 2 n). Dynamic trees <ref> [30] </ref> are designed to represent a forest of rooted trees, with each edge directed toward the root of its tree (and called an arc). <p> We first address the problem of normalization. Each region r of M is handled individually. We refer to a region r, bounded or unbounded. In the following, we denote by m the current number of vertices in r. We imagine to represent ffi (r) as a dynamic tree (r) <ref> [30] </ref> (see Fig. 1). We choose an arbitrary node of ffi (r) as the root, which immediately forces a direction on each edge, referred to hereafter as an arc and directed toward the root. <p> Primitive dynamic tree operations. We begin by considering some elementary dynamic tree operations expose, conceal and evert introduced in <ref> [30] </ref>, in terms of which the operations of the above repertory can be immediately expressed. 12 Y.-J. CHIANG, F. P. PREPARATA AND R. <p> PREPARATA AND R. TAMASSIA In the course of some updates, we may change a solid arc to dashed and vice versa and thus violate the weight invariant; so we need the capability to restore such weight invariant. Such actions are effected by the operation expose and conceal introduced in <ref> [30] </ref>. Operation expose (), for some node of (r), transforms the unique path P from node to the root of (r) into a solid path, by changing the dashed arcs in P to solid and the solid arcs incident to P to dashed. <p> So the main issue for performing conceal (P ) is how to find the topmost light arc. Before describing its adaptation to the double-thread data structure, we briefly review the standard implementation of operation conceal as proposed by Sleator and Tarjan <ref> [30] </ref>. Let the dynamic-tree-nodes of solid path P be stored left-to-right as the leaves of a balanced binary tree T (P ), called in [30] a path tree. <p> Before describing its adaptation to the double-thread data structure, we briefly review the standard implementation of operation conceal as proposed by Sleator and Tarjan <ref> [30] </ref>. Let the dynamic-tree-nodes of solid path P be stored left-to-right as the leaves of a balanced binary tree T (P ), called in [30] a path tree. Each leaf of T (P ) stores local weight (), defined as the sum of the local weights of all dashed-arc children (which are the roots of some other path trees) of , if any, plus one (to account for itself). <p> Indeed, the leaf reached identifies an edge that is first hit by a horizontal ray through q. Since we did not impose any balance requirement on T , the query time could be linear in the worst-case. To speed-up queries, we implement T as a dynamic tree <ref> [30] </ref>, i.e., T is decomposed into solid paths (which should not be confused with the solid paths in the normalization structure), connected by dashed arcs (see Fig. 11). Each solid path is associated with a path tree, implemented as a biased search tree [3].
Reference: [31] <author> R. Tamassia, </author> <title> An incremental reconstruction method for dynamic planar point location, </title> <journal> Information Processing Letters, </journal> <volume> 37 (1991), </volume> <pages> pp. 79-83. </pages>
Reference-contexts: Such methods, however, refer to the static case where no alteration of the map is allowed during its use. Due to the obvious importance of the dynamic setting, in recent years considerable attention has been devoted to the development of dynamic point-location algorithms <ref> [2, 6, 8, 14, 15, 21, 25, 26, 31] </ref>. All the known dynamic point location results are for connected maps, since maintaining region names in a disconnected map would require solving half-planar range searching in a dynamic environment, for which no polylog-time algorithm is known.
References-found: 27

