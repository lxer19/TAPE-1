URL: http://cs.jhu.edu/~baruch/PACKET/PACKET_ROUTING/DYNAMIC/PAPERS/FlowStoc94.ps
Refering-URL: http://cs.jhu.edu/~baruch/PACKET/PACKET_ROUTING/DYNAMIC/PAPERS/
Root-URL: http://www.cs.jhu.edu
Email: Email: baruch@blaze.cs.jhu.edu.  
Title: Improved Approximation Algorithms for the Multi-Commodity Flow Problem and Local Competitive Routing in Dynamic Networks
Author: Baruch Awerbuch Tom Leighton ion. 
Address: Baltimore, MD 21218-2694, and  Cambridge MA 02139.  Cambridge,  
Affiliation: Johns Hopkins University,  MIT Laboratory for Computer Science,  IBM. Department of Mathematics and Laboratory for Computer Science, Massachusetts Institute of Technology,  
Note: 1.  Supported by Air Force Contract AFOSR F49620-92-J-0125, NSF contract CCR-9114440, DARPA Contract N00014-92-J-1799, and a special grant from  MA 02139. This research was supported in part by Air Force Contract AFOSR F49620-92-J-0125 and DARPA Contracts N00014-91-J-1698 and N00014-92-J-1799.  
Abstract: In this paper, we describe a very simple bounded-queuesize local-control algorithm for routing multi-commodity flows in a dynamically-changing distributed network. The algorithm is based on the edge-balancing approach described in [AL93], but has the added benefits of: In fact, the sequential running time of the algorithm is now comparable to (and, in some cases, better than) the time of the best previously known approximation algorithms for the multi-commodity flow problem in a fixed network [LMP + 91]. The fact that the new algorithm works well in dynamically changing networks means that problems such as end-to-end communication and load balancing [AMS89, AGR92, AAMR93] can now be solved in 
Abstract-found: 1
Intro-found: 1
Reference: [AAMR93] <author> William Aiello, Baruch Awerbuch, Bruce Maggs, and Satish Rao. </author> <title> Approximate load balancing on dynamic and synchronous networks. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 632-641, </pages> <month> May </month> <year> 1993. </year>
Reference: [AE83] <author> Baruch Awerbuch and Shimon Even. </author> <title> A formal approach to a communication-network protocol; broadcast as a case study. </title> <type> Technical Report TR-459, </type> <institution> Electrical Engineering Department, Technion-I.I.T., Haifa, </institution> <month> Decem-ber </month> <year> 1983. </year>
Reference-contexts: For the single-receiver case, this problem has been extensively studied <ref> [AE83, AG88, AMS89, AG91, AGR92] </ref>; yet no upper bounds on throughput-competitiveness in this setting were known. The remainder of this paper is divided into sections as follows. In Section 2, we describe the general form of the algorithm for directed networks with dynamically changing edge capacities.
Reference: [AG88] <author> Yehuda Afek and Eli Gafni. </author> <title> End-to-end communication in unreliable networks. </title> <booktitle> In Proc. 7th ACM Symp. on Principles of Distrib. Computing, </booktitle> <pages> pages 131-148. </pages> <booktitle> ACM SIGACT and SIGOPS, ACM, </booktitle> <year> 1988. </year>
Reference-contexts: For the single-receiver case, this problem has been extensively studied <ref> [AE83, AG88, AMS89, AG91, AGR92] </ref>; yet no upper bounds on throughput-competitiveness in this setting were known. The remainder of this paper is divided into sections as follows. In Section 2, we describe the general form of the algorithm for directed networks with dynamically changing edge capacities.
Reference: [AG91] <author> Yehuda Afek and Eli Gafni. </author> <title> Bootstrap network resynchronization. </title> <booktitle> In Proc. 10th ACM Symp. on Principles of Distrib.Computing, </booktitle> <pages> pages 295-307, </pages> <year> 1991. </year>
Reference-contexts: For the single-receiver case, this problem has been extensively studied <ref> [AE83, AG88, AMS89, AG91, AGR92] </ref>; yet no upper bounds on throughput-competitiveness in this setting were known. The remainder of this paper is divided into sections as follows. In Section 2, we describe the general form of the algorithm for directed networks with dynamically changing edge capacities.
Reference: [AGR92] <author> Yehuda Afek, Eli Gafni, and Adi Rosen. </author> <title> Slide a technique for communication in unreliable networks. </title> <booktitle> In Proc. 11th ACM Symp. on Principles of Distrib. Computing, </booktitle> <pages> pages 35-46, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: For the single-receiver case, this problem has been extensively studied <ref> [AE83, AG88, AMS89, AG91, AGR92] </ref>; yet no upper bounds on throughput-competitiveness in this setting were known. The remainder of this paper is divided into sections as follows. In Section 2, we describe the general form of the algorithm for directed networks with dynamically changing edge capacities. <p> The specifications of the end-to-end communication problem require that every packet makes it to the destination. Even though some packets may be forever stuck in the network, standard error-correcting codes [MS78] or Rabin's information dispersal [Rab89] can be used to overcome this difficulty, as first suggested in <ref> [AGR92] </ref>, without deterioration in amortized bit rate. Applications to Min-cost flows. A modification of the gravitational approach of [AL93] and the current paper is considered in [KPP93], where the balancing algorithm is applied to the derivatives of queue heights rather than to the queue heights themselves.
Reference: [AL93] <author> Baruch Awerbuch and Tom Leighton. </author> <title> A simple local-control approximation algorithm for multicommodity flow. </title> <booktitle> In Proc. 34rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 459-46. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: Recently, Awerbuch and Leighton <ref> [AL93] </ref> proposed a much simpler approach to multicommodity flow that is based on a simple "edge balancing" technique that attempts to send a commodity across an edge e = (u; v) if there is more of the commodity queued at u than there is queued at v. <p> No attempt is made to find augmenting paths, shortest paths, min-cost paths, or even any path from a node to a sink. Commodities are simply entered at their respective sources, according to their demands, emptied from their sinks when present, and otherwise locally balanced across each edge. In <ref> [AL93] </ref>, it is shown that the simple edge-balancing approach to multicommodity flow leads to a (1 + *)-approximation algorithm that runs in O (M 3 K 5=2 L* 3 log K) steps, where L is the length of the longest flow path. <p> The potential increase during Phase 1 is not too large, and 2. if the potential is high, then the potential decrease during Phases 2-4 more than compensates for the potential increase during Phase 1. Our analysis is similar to that in <ref> [AL93] </ref> except that we use an exponential potential function and a more careful argument that exploits the use of the overflow buffers and queue height constraints (which were not present in the [AL93] algorithm). <p> Our analysis is similar to that in <ref> [AL93] </ref> except that we use an exponential potential function and a more careful argument that exploits the use of the overflow buffers and queue height constraints (which were not present in the [AL93] algorithm). <p> Even though some packets may be forever stuck in the network, standard error-correcting codes [MS78] or Rabin's information dispersal [Rab89] can be used to overcome this difficulty, as first suggested in [AGR92], without deterioration in amortized bit rate. Applications to Min-cost flows. A modification of the gravitational approach of <ref> [AL93] </ref> and the current paper is considered in [KPP93], where the balancing algorithm is applied to the derivatives of queue heights rather than to the queue heights themselves. <p> Running time in practice. We feel that the "packet-based" algorithm in Section 4 will perform very well in practice. Indeed, the bottleneck of the previous implementations as well as in <ref> [AL93] </ref> was the number of steps required to precisely optimize potential drop on every edge. In the packet-based approach, exact optimization is replaced by computationally-easier approximation. Further, rounding queue size means that we do not need to waste time with pushes of small amounts of flow over edges. Maximizing throughput.
Reference: [AMS89] <author> Baruch Awerbuch, Yishay Mansour, and Nir Shavit. </author> <title> End-to-end communication with polynomial overhead. </title> <booktitle> In Proc. 30th IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 358-363, </pages> <year> 1989. </year>
Reference-contexts: For the single-receiver case, this problem has been extensively studied <ref> [AE83, AG88, AMS89, AG91, AGR92] </ref>; yet no upper bounds on throughput-competitiveness in this setting were known. The remainder of this paper is divided into sections as follows. In Section 2, we describe the general form of the algorithm for directed networks with dynamically changing edge capacities.
Reference: [GT90] <author> A.V. Goldberg and R. E. Tarjan. </author> <title> Solving minimum-cost flow problems by successive approximation. </title> <journal> Mathematics of Operations Research, </journal> <volume> 15(3) </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: Much of the past work centers on the much simpler problem of 1-commodity flow (also known as the max-flow problem). A survey of the many 1-commodity algorithms can be found in <ref> [GT90] </ref>. Most of these algorithms rely on finding augmenting paths to increase the flow from source to sink. An exception is the recent algorithm of Gold-berg and Tarjan [GT90] (which is based on an algorithm of Karzanov [Kar74]). <p> A survey of the many 1-commodity algorithms can be found in <ref> [GT90] </ref>. Most of these algorithms rely on finding augmenting paths to increase the flow from source to sink. An exception is the recent algorithm of Gold-berg and Tarjan [GT90] (which is based on an algorithm of Karzanov [Kar74]). The latter algorithm maintains a preflow on the network and pushes local flow excess toward the sink along what is estimated to be a shortest path.
Reference: [Kar74] <author> A. V. Karzanov. </author> <title> Determining the maximal flow in a network by the method of preflows. </title> <journal> Soviet Math. Dokl., </journal> <volume> 15 </volume> <pages> 434-437, </pages> <year> 1974. </year>
Reference-contexts: A survey of the many 1-commodity algorithms can be found in [GT90]. Most of these algorithms rely on finding augmenting paths to increase the flow from source to sink. An exception is the recent algorithm of Gold-berg and Tarjan [GT90] (which is based on an algorithm of Karzanov <ref> [Kar74] </ref>). The latter algorithm maintains a preflow on the network and pushes local flow excess toward the sink along what is estimated to be a shortest path.
Reference: [KARR90] <author> P. Klein, A. Agrawal, R. Ravi, and S. Rao. </author> <title> Approximation through multicom-modity flow. </title> <booktitle> In Proc. 31st IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 726-727, </pages> <year> 1990. </year>
Reference-contexts: Multicommodity flow problems arise in a wide variety of contexts and have been extensively studied during the past several decades. For example, many product distribution, traffic planning, and scheduling problems can be expressed and solved as a mul-ticommodity flow problem. In addition, it has recently been discovered <ref> [LR88, KARR90] </ref> that a wide variety of N P -hard problems (such as graph partitioning, minimum feedback arc set, minimum cut linear arrangement, minimum 2D area layout, via minimization, and optimal matrix arrangement for nested disection) can be approximately solved using mul-ticommodity flow algorithms.
Reference: [KPP93] <author> Anil Kamath, Omri Palmon, and Serge Plotkin. </author> <title> Simple and fast distributedmulti-commondity flow algorithm. </title> <type> Unpublished manuscript, </type> <month> December </month> <year> 1993. </year>
Reference-contexts: Applications to Min-cost flows. A modification of the gravitational approach of [AL93] and the current paper is considered in <ref> [KPP93] </ref>, where the balancing algorithm is applied to the derivatives of queue heights rather than to the queue heights themselves. Incorporating edge costs into the potential function differences across the edges leads to local-control algorithms for the min-cost version of the multi-commodity flow problem. Running time in practice.
Reference: [LMP + 91] <author> T. Leighton, F. Makedon, S. Plotkin, C. Stein, E. Tardos, and S. Tragoudas. </author> <title> Fast approximation algorithms for multicommod-ity flow problem. </title> <booktitle> In Proc. 23rd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 101-111, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Subsequently, Leighton et al <ref> [LMP + 91] </ref> discovered a purely combinatorial (1 + *)-approximation algorithm based on 1-commodity min-cost flows that runs in O (K 2 N M * 2 log K log 3 N ) steps. (By using randomization, the running time of the latter algorithm can be improved by a factor of K). <p> The improved bound is competitive with (and in some cases, superior to) the best previous bound of O (K 2 N M * 2 log K log 3 N ) for deterministic algorithms <ref> [LMP + 91] </ref>. Indeed, if L is small, then the algorithm runs in nearly linear time (per commodity). <p> When L is small, this represents a substantial improvement over the deterministic O K 2 N M * 2 log K log 3 N step algorithm described in <ref> [LMP + 91] </ref>. Accounting for the rounding error. The preceding analysis assumed that we can approximate each queuesize for commodity i with a nearby integer multiple of d i (1 + *) without affecting the bound on maximum potential. This is not quite true.
Reference: [LR88] <author> F. T. Leighton and Satish Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommod ity flow problems with applications to approximation algorithms. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, IEEE, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: Multicommodity flow problems arise in a wide variety of contexts and have been extensively studied during the past several decades. For example, many product distribution, traffic planning, and scheduling problems can be expressed and solved as a mul-ticommodity flow problem. In addition, it has recently been discovered <ref> [LR88, KARR90] </ref> that a wide variety of N P -hard problems (such as graph partitioning, minimum feedback arc set, minimum cut linear arrangement, minimum 2D area layout, via minimization, and optimal matrix arrangement for nested disection) can be approximately solved using mul-ticommodity flow algorithms.
Reference: [MS78] <author> F.J. MacWilliams and N.J.A. Sloane. </author> <title> The Theory of Error-Correcting Codes. </title> <publisher> North Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1978. </year>
Reference-contexts: This requires sending a message over an edge for every flow packet that traverses an edge. The specifications of the end-to-end communication problem require that every packet makes it to the destination. Even though some packets may be forever stuck in the network, standard error-correcting codes <ref> [MS78] </ref> or Rabin's information dispersal [Rab89] can be used to overcome this difficulty, as first suggested in [AGR92], without deterioration in amortized bit rate. Applications to Min-cost flows.
Reference: [Rab89] <author> M.O. Rabin. </author> <title> Efficient dispersal of information for security, load balancing, and fault tolerance. </title> <journal> ACM, </journal> <volume> 36(2) </volume> <pages> 335-348, </pages> <year> 1989. </year>
Reference-contexts: The specifications of the end-to-end communication problem require that every packet makes it to the destination. Even though some packets may be forever stuck in the network, standard error-correcting codes [MS78] or Rabin's information dispersal <ref> [Rab89] </ref> can be used to overcome this difficulty, as first suggested in [AGR92], without deterioration in amortized bit rate. Applications to Min-cost flows.
Reference: [Vai89] <author> P.M. Vaidya. </author> <title> Speeding up linear programming using fast matrix multiplication. </title> <booktitle> In Proc. 30th IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 332-337, </pages> <year> 1989. </year>
Reference-contexts: All exact algorithms for multicommodity flow are based on linear programming, all have horrendous running times (even though polynomial), and none are used for large networks in practice. The situation is somewhat better for approximation algorithms, however. In particular, Vaidya <ref> [Vai89] </ref> developed a (1 + *)-approximation algorithm for the min-cost multicommodity flow problem based on linear programming that uses (roughly) O (K 2 N M 2 log (DU * 1 )) steps where K is the number of commodities, N and M are as before, D is the largest demand, and
References-found: 16

