URL: ftp://ftp.umiacs.umd.edu/pub/ONRrept/coopis95.ps
Refering-URL: http://www.umiacs.umd.edu/research/CLIP/DARPA/im.html
Root-URL: 
Email: firstname.lastname@inria.fr  louiqa@umiacs.umd.edu  
Title: Using Heterogeneous Equivalences for Query Rewriting in Multidatabase Systems  
Author: Daniela Florescu flfl Louiqa Raschid Patrick Valduriez flfl 
Note: Research Paper  
Address: 78153 Le Chesnay Cedex, France  College Park, MD 20742  
Affiliation: flfl INRIA, Rocquencourt  University of Maryland  
Abstract: In order to have significant practical impact on future information systems, multi- database management systems (MDBMS) must be both flexible and efficient. We consider a MDBMS with a common object-oriented model, based on the ODMG standard, and local databases that may be relational or object-oriented. In this context, query rewriting (for optimization) is made difficult by schematic discrepancy, and the need to model mapping information between the multidatabase and local schemas. We address the flexibility issue by representing the mappings from a local schema to the multidatabase schema, as a set of heterogeneous object equivalences, in a declarative language. Efficiency is obtained by exploiting these equivalences to rewrite multidatabase OQL queries into equivalent, simplified queries on the local schemas.
Abstract-found: 1
Intro-found: 1
Reference: [Ahmed91] <author> R. </author> <title> Ahmed et al ., "The Pegasus Heterogeneous Multidatabase System". </title> <journal> IEEE Computer, </journal> <volume> 24(12), </volume> <year> 1991. </year>
Reference-contexts: The mapping from each local schema to the global schema is often expressed in some common extended SQL-like data definition and manipulation language, eg. HOSQL in the Pegasus system <ref> [Ahmed91] </ref> or SQL/M in the UniSQL/M system [Kim93]. The federated approach [Sheth90] stresses autonomy and flexibility by relying on multiple import schemas, which can be combined as needed at various multidatabase levels.
Reference: [Bancilhon92] <editor> F. Bancilhon, C. Delobel, and P. Kannelakis (eds.), </editor> <title> Building an Object-oriented Database System the story of O2. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: The equivalences proposed in this paper have been validated in the Flora optimizer prototype. The Flora optimizer supports the ODMG data model and query language. It has been operational at INRIA since june 1994. The optimizer currently works on top of the O2 DBMS <ref> [Bancilhon92] </ref> which is used for local database support. A natural extension of this work will be the declarative definition of an execution space for heterogeneous query optimization. An heterogeneous execution space should specify the alternative executions for a given multidatabase query.
Reference: [Barsalou92] <author> T. Barsalou and D. Gangopadhay, </author> <title> "M(DM): An Open Framework for Interoperation of Multimodel Multidatabase Systems". </title> <booktitle> Int. Conf. on Data Engineering, </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: However, this approach trades flexibility and autonomy for efficiency. Other recent proposals for transforming multidatabase queries are based on higher-order query languages [Krishnamurthy91], higher-order logics [Lakshmanan93], or meta-models <ref> [Barsalou92] </ref>. Each of these depends on using a query language or model that is very different (and more complex), compared to the relational or object models and languages that are currently supported. A few projects have implemented multidatabase query processing.
Reference: [Cattell93] <author> R.G.G. </author> <title> Cattell et al ., The Object Database Standard - ODMG 93. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: This involves the definition of a common object model and common object language. The adoption of this approach as a common integration framework is also illustrated by standardization activities in the OMG [OMG92]. Of particular relevance for object-oriented database interoperability is the ODMG standard <ref> [Cattell93] </ref> which extends the OMG data model. Since an object model generalizes the relational model, this approach can effectively address interoperability of relational and object databases. In order to have significant practical impact on future information systems, multidatabase management must be both flexible and efficient. <p> The multidatabase model and language used to describe each local database is based on the ODMG standard <ref> [Cattell93] </ref>. We introduce the main elements of the object data model and query language (with minor changes) which are necessary for the rest of the paper. The object data model is based on a type system.
Reference: [Florescu94a] <author> D. Florescu and P. Valduriez, </author> <title> "Rule-based Query Processing in the IDEA System". </title> <booktitle> Int. Symp. on Advanced Database Technologies and Their Integration, </booktitle> <address> Nara, Japan, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Flexibility is obtained through a uniform definition of both the schema mappings (from the local schema into the multidatabase schema), and semantic knowledge based on integrity constraints in the local schema and the multidatabase schema, using equivalence rules, and written in a declarative language <ref> [Florescu94a, Florescu94b] </ref>. Efficiency in rewriting multidatabase queries into equivalent queries on the local schemas is obtained by performing, in a uniform way the syntactic simplifications, and the transformations based on semantic and heterogeneous object equivalences. <p> For flexibility, such knowledge is declared by means of semantic equivalences <ref> [Florescu94a] </ref>, which we define as follows: Definition 3.1 Semantic Equivalence A semantic equivalence is a first order logic formula of the form: [f orall &lt; var name &gt; of type &lt; type expression &gt;] fl expr 1 ~ expr 2 (1) where expr 1 and expr 2 are OQL expressions that <p> Heterogeneous equivalences and semantic equivalences are stored in the multidatabase catalog and used during the translation process. They can be used as rewriting rules in order to produce queries equivalent to an input query, using a type-based pattern-matching algorithm. More details on this algorithm can be found in <ref> [Florescu94a] </ref>.
Reference: [Florescu94b] <author> D. Florescu, J-R. Gruser, M. Novak, P. Valduriez and M. Ziane, </author> <title> "Design and Implementation of Flora, a Language for Object Algebra". </title> <journal> Information Science, </journal> <note> to appear, </note> <year> 1994. </year>
Reference-contexts: Flexibility is obtained through a uniform definition of both the schema mappings (from the local schema into the multidatabase schema), and semantic knowledge based on integrity constraints in the local schema and the multidatabase schema, using equivalence rules, and written in a declarative language <ref> [Florescu94a, Florescu94b] </ref>. Efficiency in rewriting multidatabase queries into equivalent queries on the local schemas is obtained by performing, in a uniform way the syntactic simplifications, and the transformations based on semantic and heterogeneous object equivalences.
Reference: [Kim93] <author> W. </author> <title> Kim et al ., "On Resolving Schematic Heterogeneity in Multidatabase Systems". Distributed and Parallel Databases, </title> <type> 1(3), </type> <year> 1993. </year>
Reference-contexts: The mapping from each local schema to the global schema is often expressed in some common extended SQL-like data definition and manipulation language, eg. HOSQL in the Pegasus system [Ahmed91] or SQL/M in the UniSQL/M system <ref> [Kim93] </ref>. The federated approach [Sheth90] stresses autonomy and flexibility by relying on multiple import schemas, which can be combined as needed at various multidatabase levels.
Reference: [Krishnamurthy91] <author> R. Krishnamurthy, W. Litwin and W. Kent, </author> <title> "Language Features for Interoperability of Databases with Schematic Discrepancies". </title> <booktitle> ACM SIGMOD Int. Conf., </booktitle> <address> Denver, CO, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Most of the work on multi- database query processing assumes a global schema which makes it possible to reuse distributed query processing techniques [ Ozsu91b]. However, this approach trades flexibility and autonomy for efficiency. Other recent proposals for transforming multidatabase queries are based on higher-order query languages <ref> [Krishnamurthy91] </ref>, higher-order logics [Lakshmanan93], or meta-models [Barsalou92]. Each of these depends on using a query language or model that is very different (and more complex), compared to the relational or object models and languages that are currently supported. A few projects have implemented multidatabase query processing.
Reference: [Lakshmanan93] <author> L.V.S. Lakshmanan, F. </author> <title> Sadri and I.N. Subramanian, "On the Logical Foundations of Schema Integration and Evolution in Heterogeneous Database Systems". </title> <booktitle> Int. Conf. on Deductive and Object-Oriented Databases, </booktitle> <address> Phoenix, AZ, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: However, this approach trades flexibility and autonomy for efficiency. Other recent proposals for transforming multidatabase queries are based on higher-order query languages [Krishnamurthy91], higher-order logics <ref> [Lakshmanan93] </ref>, or meta-models [Barsalou92]. Each of these depends on using a query language or model that is very different (and more complex), compared to the relational or object models and languages that are currently supported. A few projects have implemented multidatabase query processing.
Reference: [Litwin86] <author> W. Litwin and A. Abdelatif, </author> <title> "Multidatabase Interoperability". </title> <booktitle> IEEE Computer, </booktitle> <month> 19(12), December </month> <year> 1986. </year>
Reference-contexts: Similar approaches either specify a mediator knowledge base which has mapping knowledge among different schemas [Qian95, Raschid94], or use a common multidatabase language <ref> [Litwin86] </ref>. Another approach which can be used for MDBMS is distributed object management [Manola92, Ozsu93], which generalizes the federated approach. The idea is to model heterogeneous databases at the appropriate level of granularity as objects in a distributed object space and to provide the capabilities and protocols for object interoperation.
Reference: [Manola92] <author> F. </author> <title> Manola et al ., "Distributed Object management". </title> <journal> Int. Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(1), </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: Similar approaches either specify a mediator knowledge base which has mapping knowledge among different schemas [Qian95, Raschid94], or use a common multidatabase language [Litwin86]. Another approach which can be used for MDBMS is distributed object management <ref> [Manola92, Ozsu93] </ref>, which generalizes the federated approach. The idea is to model heterogeneous databases at the appropriate level of granularity as objects in a distributed object space and to provide the capabilities and protocols for object interoperation. This involves the definition of a common object model and common object language.
Reference: [Novak94] <author> M. Novak, G. Gardarin and P. Valduriez, "Flora: </author> <title> a Functional-style Language for Object and Relational Algebra", </title> <booktitle> Int. Conf. on Databases and Expert Systems Applications, </booktitle> <address> Athens, Greece, </address> <month> September </month> <year> 1994. </year> <month> 20 </month>
Reference: [OMG92] <author> Object Management Group, </author> <title> The Common Object Request Broker: </title> <booktitle> Architecture and Spec-ification. </booktitle> <address> Framingham, MA, </address> <year> 1992. </year>
Reference-contexts: This involves the definition of a common object model and common object language. The adoption of this approach as a common integration framework is also illustrated by standardization activities in the OMG <ref> [OMG92] </ref>. Of particular relevance for object-oriented database interoperability is the ODMG standard [Cattell93] which extends the OMG data model. Since an object model generalizes the relational model, this approach can effectively address interoperability of relational and object databases.
Reference: [ Ozsu91a] <author> T. Ozsu and P. Valduriez, </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: The heterogeneity typically stems from multiple data models (eg. relational, object-oriented), different DBMS and legacy applications. Multidatabase systems (MDBMS) will therefore contribute the necessary technology for interoperability of distributed, heterogeneous and autonomous databases <ref> [ Ozsu91a] </ref>. fl This research has been partially supported by the Advanced Research Project Agency under grant ARPA/ONR 92-J1929 and by the Commission of European Communities under Esprit project IDEA. 1 A MDBMS must provide transparent access to the participating databases, often called local databases, by hiding distribution and heterogeneity.
Reference: [ Ozsu91b] <author> T. Ozsu and P. Valduriez, </author> <title> "Distributed Databases : Where are we now?", </title> <journal> IEEE Computer, </journal> <volume> 24(8), </volume> <year> 1991. </year>
Reference-contexts: Efficiency in processing multidatabase queries is also getting increasingly important as MDBMS need to scale up to large numbers of local databases. Most of the work on multi- database query processing assumes a global schema which makes it possible to reuse distributed query processing techniques <ref> [ Ozsu91b] </ref>. However, this approach trades flexibility and autonomy for efficiency. Other recent proposals for transforming multidatabase queries are based on higher-order query languages [Krishnamurthy91], higher-order logics [Lakshmanan93], or meta-models [Barsalou92].
Reference: [ Ozsu93] <author> T. Ozsu, U. Dayal and P. Valduriez (eds.), </author> <title> Distributed Object Management. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: Similar approaches either specify a mediator knowledge base which has mapping knowledge among different schemas [Qian95, Raschid94], or use a common multidatabase language [Litwin86]. Another approach which can be used for MDBMS is distributed object management <ref> [Manola92, Ozsu93] </ref>, which generalizes the federated approach. The idea is to model heterogeneous databases at the appropriate level of granularity as objects in a distributed object space and to provide the capabilities and protocols for object interoperation. This involves the definition of a common object model and common object language.
Reference: [Qian95] <author> X. Qian and L. Raschid, </author> <title> "Query Interoperation among Object-oriented and Relational Databases". </title> <booktitle> Int. Conf. on Data Engineering, </booktitle> <address> Taipei, Taewan, </address> <month> February </month> <year> 1995. </year>
Reference-contexts: The difference from the global schema approach is that all conflicts are not resolved (within a global schema) and each local database is not a model for the global schema. Similar approaches either specify a mediator knowledge base which has mapping knowledge among different schemas <ref> [Qian95, Raschid94] </ref>, or use a common multidatabase language [Litwin86]. Another approach which can be used for MDBMS is distributed object management [Manola92, Ozsu93], which generalizes the federated approach.
Reference: [Raschid94] <author> L. Raschid, Y. Chang and B. Dorr, </author> <title> "Query Transformation Techniques for Interoperable Query Processing in Cooperative Information Systems". </title> <booktitle> Int. Conf. on Cooperative Information Systems, </booktitle> <address> Toronto, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The difference from the global schema approach is that all conflicts are not resolved (within a global schema) and each local database is not a model for the global schema. Similar approaches either specify a mediator knowledge base which has mapping knowledge among different schemas <ref> [Qian95, Raschid94] </ref>, or use a common multidatabase language [Litwin86]. Another approach which can be used for MDBMS is distributed object management [Manola92, Ozsu93], which generalizes the federated approach.
Reference: [Sheth90] <author> A. Sheth and J. Larson, </author> <title> "Federated Database Systems for Managing Distributed, Heterogeneous, and Autonomous Databases". </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <year> 1990. </year> <month> 21 </month>
Reference-contexts: The mapping from each local schema to the global schema is often expressed in some common extended SQL-like data definition and manipulation language, eg. HOSQL in the Pegasus system [Ahmed91] or SQL/M in the UniSQL/M system [Kim93]. The federated approach <ref> [Sheth90] </ref> stresses autonomy and flexibility by relying on multiple import schemas, which can be combined as needed at various multidatabase levels.
References-found: 19

