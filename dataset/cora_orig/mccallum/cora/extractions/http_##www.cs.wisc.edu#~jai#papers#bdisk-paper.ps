URL: http://www.cs.wisc.edu/~jai/papers/bdisk-paper.ps
Refering-URL: http://www.cs.wisc.edu/~jai/pubs.html
Root-URL: 
Email: jai@cs.wisc.edu  anithrak@us.oracle.com  sivasank@cs.umass.edu  krithi@cs.umass.edu  
Title: Efficient Concurrency Control for Broadcast Environments  
Author: Jayavel Shanmugasundaram Arvind Nithrakashyap Rajendran Sivasankaran Krithi Ramamritham 
Note: Currently at the  Currently at Oracle Corporation, 500 Oracle Parkway 4op1385a,  
Address: Amherst, MA 01002  Wisconsin, Madison, WI 53706  Redwood Shores, CA 94065  
Affiliation: Department of Computer Science University of Massachusetts  Department of Computer Sciences, University of  
Abstract: A crucial limitation in environments where data is broadcast to clients is the low bandwidth available for clients to communicate with servers. Advanced applications in such environments do need concurrency control support. However, given the asymmetric communication capabilities and the needs of clients in mobile environments, it is shown that serializability is too restrictive, unnecessary, and impractical in such environments. Hence weaker alternatives that are sufficient and practical for such environments are proposed. In particular, we propose a new correctness criterion that allows read-only transactions to read consistent data "off the air", i.e., without contacting the server, say, to obtain locks. Update transactions, however, need to validate their updates at the server. Even though the new correctness criterion is weaker than serializability, it is shown that determining legality of histories with respect to this consistency requirement is NP-Complete. So, APPROX, a polynomial time algorithm, to efficiently detect (a subset of) legal histories is outlined. F-Matrix, a protocol to implement APPROX in broadcast disk environments, is then proposed. Our protocol requires additional control information to be broadcast with the data in order to ensure correctness and so a key issue is how to minimize the overhead entailed by this additional information. To this end, we propose R-Matrix, a simpler version of F-Matrix, to implement APPROX. Experimental results confirm the hypothesis that the weaker correctness criterion leads to substantially lower response times compared to using serializability, as exemplified by the concurrency control algorithm used in the Datacycle architecture. Furthermore, even though F-Matrix and R-Matrix show comparable performance in many situations, overall, F-Matrix leads to better response times and is also more scalable than R-Matrix and Datacycle. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Acharya, M. Franklin and S. Zdonik, </author> <title> "Disseminating Updates on Broadcast Disks," </title> <booktitle> Proceedings of 22nd VLDB Conference, </booktitle> <address> Mumbai(Bombay), India, </address> <year> 1996. </year>
Reference-contexts: Hence, in this paper, we address issues related to the consistency of reads by clients and updates by the servers in broadcast based environments. [6] and <ref> [1] </ref> are among the few papers that deal with these issues. Herman et. al. [6] discuss transactional support in the Datacycle architecture, which is also an asymmetric bandwidth environment. However, they use serializability as the correctness criterion, which we show is very expensive to achieve in such environments. In [1], the <p> and <ref> [1] </ref> are among the few papers that deal with these issues. Herman et. al. [6] discuss transactional support in the Datacycle architecture, which is also an asymmetric bandwidth environment. However, they use serializability as the correctness criterion, which we show is very expensive to achieve in such environments. In [1], the authors discuss the tradeoffs between currency of data and performance issues when some of the broadcast data items are updated by processes running on the server. However, the updates do not have transactional semantics associated with them either at the server or at the clients.
Reference: [2] <author> R. Alonso, H. Korth, </author> <booktitle> "Database Systems Issues in Nomadic Computing," Proceedings of the ACM SIGMOD Conference, </booktitle> <address> Washington D.C, </address> <month> June </month> <year> 1993, </year> <pages> pp. 388-392. </pages>
Reference-contexts: In particular, we are concerned with the problem of providing readers with consistent data and allowing updates to also occur in a consistency preserving fashion. Broadcast-based data dissemination is also likely to be a major mode of communication in mobile computing environments <ref> [2, 7, 14] </ref>. As these continue to evolve, they will be used to run sophisticated applications, many of which will involve the use of large amounts of data whose consistency must be maintained in spite of updates, some of which may originate from mobile clients. <p> We first show that the general problem of determining legal histories (i.e., scheduler determinable histories satisfying the correctness criterion) is NP-Complete. We then propose a polynomial time approximation algorithm, APPROX, to efficiently determine legal histories. A mechanism to implement this approximation algorithm in broadcast disk <ref> [2] </ref> environments, F-Matrix, is then proposed.
Reference: [3] <author> P.A. Bernstein, V. Hadzilacos, N. Goodman, </author> <title> "Concurrency Control and Recovery in Database Systems," </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: Hence, achieving data consistency efficiently in such an environment is a challenging research issue. Even though a large amount of research has gone into the development of efficient concurrency control schemes <ref> [3] </ref>, given that the above applications are still in their nascent stages, it is not surprising that little research has been done on supporting the special requirements of such environments. <p> The final requirement ensures the prefix commit closed property of the correctness criterion, useful when we talk about the possibility of failures <ref> [3] </ref>. This requirement has been mentioned here just for completeness and we shall not worry about this requirement for the rest of this paper. This requirement, however, is satisfied by the mechanisms outlined in Section 3. <p> The following theorem 1 characterizes the set of histories that a scheduler can determine to satisfy requirements 1 to 3. Theorem 1 A scheduler can determine that a history H satisfies requirements 1 through 3 iff (a) H update is view serializable <ref> [13, 3, 10] </ref> and (b) for each read-only transaction t, the subhistory formed by the transactions in LIV E H (t) is also view serializable (ignoring the final state of the database). <p> However, because view serializability is NP-Complete, in practice, a stronger but polynomially checkable property, conflict serializability <ref> [3] </ref>, is enforced. Thus, in broadcast disk environments, we could realistically expect the server to enforce conflict serializability of the update transactions. <p> The exact information a client must provide along with its update transaction is discussed under client functionality. We do assume, however, that if a transaction commits, then all transactions from which that transaction reads from have previously committed. This is a reasonable assumption for recovery purposes <ref> [3] </ref>. 3. Transmits a control matrix during each cycle that helps clients determine whether read-only transactions read consistent values. The exact nature of the control matrix will be described shortly. <p> The control information matrix at any point in time is an n fi n matrix, C, where n is the 3 The maintenance of two versions of objects has some commonality with multiversion concurrency control <ref> [3] </ref>. However, serializability is still ensured in multiversion concurrency control while our mechanism exploits the weaker correctness criterion. 10 number of objects. If objects are assumed to be have ids ob 1 through ob n , each entry C (i; j) is set to a cycle number determined as follows.
Reference: [4] <author> T.H. Cormen, C.E. Leiserson, R.L. Rivest, </author> <title> "Introduction to Algorithms," </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1990. </year>
Reference: [5] <author> M.R. Garey, D.S. Johnson, </author> <title> "Computers and Intractability: A Guide to the Theory of NP-Completeness," </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: Theorem 3 Consider a history H such that H update is a serial history. Then the problem of determining whether H is legal is NP-Complete. This follows from a rather involved reduction from 3 SAT , which is known to be NP-Complete <ref> [5] </ref>. 3.2 A Simple Approximation Algorithm Given the intractability result of the previous section, we now propose a polynomial time algorithm that accepts a set of histories that is a proper subset of legal histories.
Reference: [6] <author> G. Herman, G. Gopal, K.C. Lee, A. Weinreb, </author> <title> "The Datacycle Architecture for Very High Throughput Database Systems," </title> <booktitle> Proceedings of the ACM SIGMOD Conference, </booktitle> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Hence, in this paper, we address issues related to the consistency of reads by clients and updates by the servers in broadcast based environments. <ref> [6] </ref> and [1] are among the few papers that deal with these issues. Herman et. al. [6] discuss transactional support in the Datacycle architecture, which is also an asymmetric bandwidth environment. However, they use serializability as the correctness criterion, which we show is very expensive to achieve in such environments. <p> Hence, in this paper, we address issues related to the consistency of reads by clients and updates by the servers in broadcast based environments. <ref> [6] </ref> and [1] are among the few papers that deal with these issues. Herman et. al. [6] discuss transactional support in the Datacycle architecture, which is also an asymmetric bandwidth environment. However, they use serializability as the correctness criterion, which we show is very expensive to achieve in such environments. <p> We also show that the space overhead for this algorithm may be high and propose a simpler algorithm that approximates APPROX but which is much more space efficient. We then qualitatively compare the simpler algorithm with the existing Datacycle concurrency control algorithm <ref> [6] </ref>, which is the only existing concurrency control algorithm that we are aware of that has been designed for broadcast environments. The mechanisms proposed in this section handle both read-only and update transactions. <p> In other words, a transaction can proceed to read an object only if no previously read value has been updated. This corresponds to the Datacycle approach for concurrency control <ref> [6] </ref> and ensures serializability. For the rest of this paper, we call this approach Datacycle. Optimizations can be done in this approach whereby the check to see whether a previously read value has been changed is done in hardware and the transaction aborted as soon as a change is detected. <p> An implementation of APPROX was discussed in this paper, that has a tunable parameter whose setting produces a protocol called F-Matrix at one end of the spectrum and the protocol used in the Datacycle architecture <ref> [6] </ref> at the other end. We also presented R-Matrix, an algorithm that lies within the spectrum of possibilities.
Reference: [7] <author> T. Imielinski and B. R. Badrinath, </author> <title> "Mobile wireless computing: challenges in data management," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 37, No. 10, </volume> <month> October </month> <year> 1994, </year> <pages> pp. 18-28. </pages>
Reference-contexts: In particular, we are concerned with the problem of providing readers with consistent data and allowing updates to also occur in a consistency preserving fashion. Broadcast-based data dissemination is also likely to be a major mode of communication in mobile computing environments <ref> [2, 7, 14] </ref>. As these continue to evolve, they will be used to run sophisticated applications, many of which will involve the use of large amounts of data whose consistency must be maintained in spite of updates, some of which may originate from mobile clients.
Reference: [8] <author> H. Garcia-Molina and G. Wiederhold, </author> <title> "Read-Only Transactions in a Distributed Database," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 7, No. 2, </volume> <month> June </month> <year> 1982, </year> <pages> pp. 209-234. </pages>
Reference-contexts: Update transactions, however, have 4 to be serializable in the traditional sense. The new correctness criterion is similar at a high level to the correctness criterion presented in <ref> [8] </ref> because the latter also allow different read-only transactions to see different serial orderings of update transactions. However, in [8], it is assumed that read-only transactions are those whose corresponding transaction programs do not write in any history of execution (we do not impose this restriction). <p> Update transactions, however, have 4 to be serializable in the traditional sense. The new correctness criterion is similar at a high level to the correctness criterion presented in <ref> [8] </ref> because the latter also allow different read-only transactions to see different serial orderings of update transactions. However, in [8], it is assumed that read-only transactions are those whose corresponding transaction programs do not write in any history of execution (we do not impose this restriction). More importantly, there, it is required that read-only transactions have to be serialized with respect to all update transactions.
Reference: [9] <author> C.H. Papadimitriou, </author> <title> "The Serializability of Concurrent Database Updates," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 26, No. 4, </volume> <month> October </month> <year> 1979, </year> <pages> pp. 631-653. </pages>
Reference-contexts: The following theorem characterizes the complexity of determining legal histories. Theorem 2 The problem of determining whether a history H is legal is NP-Complete. The above theorem (which follows from a simple reduction from view serializability, whose decidability is known to be NP-Complete <ref> [9] </ref>) in effect states that it is very unlikely that an efficient (practical) algorithm exists to determine all and only legal histories. However, because view serializability is NP-Complete, in practice, a stronger but polynomially checkable property, conflict serializability [3], is enforced.
Reference: [10] <author> C. H. Papadimitriou, </author> <title> "The Theory of Database Concurrency Control," </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: The following theorem 1 characterizes the set of histories that a scheduler can determine to satisfy requirements 1 to 3. Theorem 1 A scheduler can determine that a history H satisfies requirements 1 through 3 iff (a) H update is view serializable <ref> [13, 3, 10] </ref> and (b) for each read-only transaction t, the subhistory formed by the transactions in LIV E H (t) is also view serializable (ignoring the final state of the database).
Reference: [11] <author> J. Shanmugasundaram, A. Nithrakashyap, J. Padhye, R. Sivasankaran, M. Xiong, K. Ramamritham, </author> <title> "Transaction Processing in Broadcast Disk Environments," Advanced Transaction Models and Architectures, </title> <editor> S. Jajodia and L. Kerschnerg (eds.), </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference-contexts: Other applications of broadcasting, include stock trading, next generation road traffic management systems and automated industrial plants <ref> [11, 12] </ref>. Given the limited amount of bandwidth available for clients to communicate with the the broadcast server in such environments, careful consideration must be given when consistent reads and writes are realized. Hence, achieving data consistency efficiently in such an environment is a challenging research issue. <p> We first give the intuition behind the correctness criterion via examples before formally laying out the definition of the correctness criterion. More details on the development of the correctness criterion can be found in <ref> [11] </ref>. 2.2.1 Intuition Behind the Correctness Criterion The following example shows how serializability can be weakened by allowing different read transactions to see different serial orders of execution of update transactions. Example 2. <p> For further details on the formalization, see <ref> [11] </ref>. A history H of operation events and transaction management events satisfies the weakened requirements iff: 1. <p> This requirement, however, is satisfied by the mechanisms outlined in Section 3. It is easy to see that the new correctness criterion is weaker than serializability, i.e., every history that is serializable also satisfies the new correctness criterion (for a formal proof of this statement, see <ref> [11] </ref>). We now illustrate, through examples, that certain non-serializable histories also satisfy the new correctness criterion. Consider the history in Example 2. As mentioned earlier, this history is not serializable. However, this history satisfies the new correctness criterion. <p> We also plan to investigate methods in which the control matrix is transmitted incrementally, rather than as a whole. New approaches other than the matrix based approach, such as update lists <ref> [11] </ref>, can be used for transmitting control information. These approaches may be less expensive to transmit on average than the control matrix and we plan to study the effectiveness of such methods. The work presented in this paper has mainly concentrated on read-only transaction at clients.
Reference: [12] <author> P. Xuan, S. Sen, O.J.Gonzalez-Gomez, J. Fernandez and K. Ramamritham, </author> <title> "Broadcast on Demand Efficient and Timely Dissemination of Data in Mobile Environments," </title> <booktitle> IEEE Real-Time Technology and Applications Symposium, </booktitle> <pages> pp. 38-48, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: Other applications of broadcasting, include stock trading, next generation road traffic management systems and automated industrial plants <ref> [11, 12] </ref>. Given the limited amount of bandwidth available for clients to communicate with the the broadcast server in such environments, careful consideration must be given when consistent reads and writes are realized. Hence, achieving data consistency efficiently in such an environment is a challenging research issue.
Reference: [13] <author> M. Yannakakis, </author> <title> "Serializability by Locking," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 31, No. 2, </volume> <month> April </month> <year> 1984. </year>
Reference-contexts: The following theorem 1 characterizes the set of histories that a scheduler can determine to satisfy requirements 1 to 3. Theorem 1 A scheduler can determine that a history H satisfies requirements 1 through 3 iff (a) H update is view serializable <ref> [13, 3, 10] </ref> and (b) for each read-only transaction t, the subhistory formed by the transactions in LIV E H (t) is also view serializable (ignoring the final state of the database).

References-found: 13

