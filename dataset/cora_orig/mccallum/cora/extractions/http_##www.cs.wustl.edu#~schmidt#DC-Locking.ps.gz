URL: http://www.cs.wustl.edu/~schmidt/DC-Locking.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/rules.html
Root-URL: 
Email: schmidt@cs.wustl.edu harrison@cs.wustl.edu  
Title: Double-Checked Locking An Optimization Pattern for Efficiently Initializing and Accessing Thread-safe Objects  
Author: Douglas C. Schmidt Tim Harrison 
Address: Wash. U., St. Louis Wash. U., St. Louis  
Affiliation: Dept. of Computer Science Dept. of Computer Science  
Abstract: This paper appeared in a chapter in the book Pattern Languages of Program Design 3 ISBN, edited by Robert Martin, Frank Buschmann, and Dirke Riehle published by Addison-Wesley, 1997. Abstract This paper shows how the canonical implementation [1] of the Singleton pattern does not work correctly in the presence of preemptive multi-tasking or true parallelism. To solve this problem, we present the Double-Checked Locking optimization pattern. This pattern is useful for reducing contention and synchronization overhead whenever critical sections of code should be executed just once. In addition, Double-Checked Locking illustrates how changes in underlying forces (i.e., adding multi-threading and parallelism to the common Singleton use-case) can impact the form and content of patterns used to develop concurrent software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Programmers must learn new mechanisms (such as multi-threading and synchronization APIs) and techniques (such as concurrency control and deadlock avoidance algorithms). In addition, many familiar design patterns (such as Singleton or Iterator <ref> [1] </ref>) that work well for sequential programs contain subtle assumptions that do not apply in the context of concurrency. To illustrate this, consider how the canonical implementation [1] of the Singleton pattern behaves in multi-threaded environments. <p> In addition, many familiar design patterns (such as Singleton or Iterator <ref> [1] </ref>) that work well for sequential programs contain subtle assumptions that do not apply in the context of concurrency. To illustrate this, consider how the canonical implementation [1] of the Singleton pattern behaves in multi-threaded environments. The Singleton pattern ensures a class has only one instance and provides a global point of access to that instance [1]. <p> To illustrate this, consider how the canonical implementation <ref> [1] </ref> of the Singleton pattern behaves in multi-threaded environments. The Singleton pattern ensures a class has only one instance and provides a global point of access to that instance [1]. Dynamically allocating Singletons in C++ programs is common since the order of initialization of global static objects in C++ programs is not well-defined and is therefore non-portable. Moreover, dynamic allocation avoids the cost of initializing a Singleton if it is never used.
Reference: [2] <author> A. D. Birrell, </author> <title> An Introduction to Programming with Threads, </title> <type> Tech. Rep. </type> <institution> SRC-035, Digital Equipment Corporation, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: 1 Intent The Double-Checked Locking optimization pattern reduces contention and synchronization overhead whenever critical sections of code need to acquire locks just once, but must be thread-safe when they do acquire locks. 2 Also Known As Lock Hint <ref> [2] </ref> 3 Motivation 3.1 The Canonical Singleton Developing correct and efficient concurrent applications is hard. Programmers must learn new mechanisms (such as multi-threading and synchronization APIs) and techniques (such as concurrency control and deadlock avoidance algorithms). <p> pattern in the Sequent Dynix/PTX operating system. * The Double-Checked Locking Pattern can be used to implement POSIX once variables [7]. * The Double-Checked Locking pattern is used extensively throughout the ACE object-oriented network pro gramming toolkit [6]. * Andrew Birrell describes the use of the Double-Checked Locking optimization in <ref> [2] </ref>. Birrell refers to the first check of Flag as a lock hint. 11 Related Patterns The Double-Checked Locking pattern is a thread-safe variant of the First-Time-In idiom. The First-Time-In idiom is often used in programming languages (like C) that lack constructors.
Reference: [3] <author> A. S. Tanenbaum, </author> <title> Distributed Operating Systems. </title> <publisher> Prentice Hall, </publisher> <address> Enflewood Cliffs, New Jersey, </address> <year> 1995. </year>
Reference-contexts: multiple times because multiple threads will execute the new Singleton operation within the critical section shown above. 1 A critical section is a sequence of instructions that obeys the following invariant: while one thread/process is executing in the critical section, no other thread/process may be executing in the critical section <ref> [3] </ref>. In this example, the initialization of the Singleton is a critical section.
Reference: [4] <author> A. S. Tanenbaum, </author> <title> Modern Operating Systems. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: If multiple threads attempt to acquire the lock simultaneously, only one thread will suc ceed; the others will block <ref> [4] </ref>. - if (instance_ == 0) - Guard&lt;Mutex&gt; guard (lock_); // Only come here if instance_ // hasn't been initialized yet. instance_ = new Singleton; - return instance_; - This reduces locking overhead it, but doesn't provide thread-safe initialization.
Reference: [5] <author> Bjarne Stroustrup, </author> <title> The C++ Programming Language, 2 nd Edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: guard (lock_); // Only one thread in the // critical section at a time. if (instance_ == 0) instance_ = new Singleton; return instance_; // Destructor of guard releases // lock_ automatically. - private: static Mutex lock_; static Singleton *instance_; -; The Guard class employs a C++ idiom (described in <ref> [5] </ref>) that uses the constructor to acquire a resource automatically when an object of the class is created and uses the destructor to release the resource automatically when it goes out of scope.
Reference: [6] <author> D. C. Schmidt, </author> <title> ACE: an Object-Oriented Framework for Developing Distributed Applications, </title> <booktitle> in Proceedings of the 6 th USENIX C++ Technical Conference, </booktitle> <address> (Cambridge, Mas-sachusetts), </address> <publisher> USENIX Association, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Section 9 explains how to solve these problems by using the volatile keyword. 8 Implementation and Sample Code The ACE toolkit <ref> [6] </ref> uses the Double-Checked Locking pattern in several library components. For instance, to reduce code duplication, ACE uses a reusable adapter ACE Singleton to transform normal classes to have Singleton-like behavior. <p> The Doubled-Checked Locking pattern is a special case of a very widely used pattern in the Sequent Dynix/PTX operating system. * The Double-Checked Locking Pattern can be used to implement POSIX once variables [7]. * The Double-Checked Locking pattern is used extensively throughout the ACE object-oriented network pro gramming toolkit <ref> [6] </ref>. * Andrew Birrell describes the use of the Double-Checked Locking optimization in [2]. Birrell refers to the first check of Flag as a lock hint. 11 Related Patterns The Double-Checked Locking pattern is a thread-safe variant of the First-Time-In idiom.
Reference: [7] <author> IEEE, </author> <title> Threads Extension for Portable Operating Systems (Draft 10), </title> <month> February </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: that all access to Flag will be through memory, rather than through registers. 10 Known Uses * The Doubled-Checked Locking pattern is a special case of a very widely used pattern in the Sequent Dynix/PTX operating system. * The Double-Checked Locking Pattern can be used to implement POSIX once variables <ref> [7] </ref>. * The Double-Checked Locking pattern is used extensively throughout the ACE object-oriented network pro gramming toolkit [6]. * Andrew Birrell describes the use of the Double-Checked Locking optimization in [2].
References-found: 7

