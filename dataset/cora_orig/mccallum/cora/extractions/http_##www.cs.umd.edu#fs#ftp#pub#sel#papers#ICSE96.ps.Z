URL: http://www.cs.umd.edu/fs/ftp/pub/sel/papers/ICSE96.ps.Z
Refering-URL: http://www.cs.umd.edu/~melo/papers/ICSE96.html
Root-URL: 
Title: Understanding and Predicting the Process of Software Maintenance Releases promotional purposes or for creating new
Author: Victor Basili, Lionel Briand, Steven Condon, Yong-Mi Kim, Walclio L. Melo and Jon D. Valett s s u e s 
Keyword: software maintenance, measurement, experience factory, case studies, quality improvement and goal/question/metric paradigms.  
Note: Copyright 1996 IEEE. Published in the Proceedings of the 18th International Conference on Software Engineering (ICSE-18), March 25-29, 1996, Berlin, Germnay. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or  any copyrighted component of this work in other works, must be obtained from the IEEE. 1 Introduction 1 1 I  
Abstract: One of the major concerns of any maintenance organization is to understand and estimate the cost of maintenance releases of software systems. Planning the next release so as to maximize the increase in functionality and the improvement in quality are vital to successful maintenance management. The objective of this paper is to present the results of a case study in which an incremental approach was used to better understand the effort distribution of releases and build a predictive effort model for software maintenance releases. This study was conducted in the Flight Dynamics Division (FDD) of NASA Goddard Space Flight Center (GSFC). This paper presents three main results: 1) a predictive effort model developed for the FDDs software maintenance release process, 2) measurement-based lessons learned about the maintenance process in the FDD, 3) a set of lessons learned about the establishment of a measurement-based software maintenance improvement program. In addition, this study provides insights and guidelines for obtaining similar results in other maintenance organizations. Authors are listed in alphabetical order. V. Basili, Y.-M. Kim and W. Melo are with the University of Maryland, Institute for Advanced Computer Studies and Computer Science Dept., A. V. Williams Bldg., College Park, MD 20742, USA. S. Condon is with Computer Sciences Corporation, 10110 Aerospace Rd., Lanham-Seabrook, MD 20706, USA. L. Briand is with CRIM, Montreal, Canada. J. Valett is with NASA Goddard Space Flight Center, Software Engineering Branch, Greenbelt, MD 20771, USA. Email: -basili|kimy|melo-@cs.umd.edu, lbriand@crim.ca, Software maintenance is generally recognized to consume the majority of resources in many software organizations [Abran&Nguyenkim 1991; Harrison& Cook 1990]. As a result, planning releases so as to maximize functionality and quality within the boundaries of resource constraints (such as, budget, personnel, and time to market) is vital to the success of an organization. The software maintenance process is, however, still poorly understood and loosely managed worldwide. As described in [Haziza et al. 1992], numerous factors can affect software maintenance quality and productivity, such as process, organization, experience, and training. Unfortunately the complexity of the phenomena frequently obscures the identity and impact of such factors in any given maintenance organization. The resulting uncertainty about productivity and quality in the next software release gives rise to unreliable cost and schedule release estimates. To effectively manage the software release process, managers must be supplied with more accurate information and more useful guidelines to aid them in improving the decision-making process, planning and scheduling maintenance activities, foreseeing bottlenecks, allocating resources, optimizing the implementation of change requests by releases, etc. In order to accomplish this, we need to define and validate methodologies that take into account the specific characteristics of a software maintenance organization and its processes, e.g., the software maintenance release process. However, methods that help software maintainers change large software systems on schedule and within budget are scarce. Methods currently available for improving software processes, such as the Software Engineering Institute Capability Maturity Model (SEI CMM) [Paulk et al. 1993], have not been validated thoroughly. Even though a few methods have been demonstrated to be useful for software development (e.g., QIP [Basili&Rombach 1988]) they have only recently begun to be applied to software maintenance [Valett et al. 1994]. The work described in this paper is a further step in the application of these methods. steven_condon@cscmail.csc.com, jon.valett@gsfc.nasa.gov
Abstract-found: 1
Intro-found: 1
Reference: [Abran & Nguyenkim 1991] <author> Abran, A. and Nguyenkim, H. </author> <title> Analysis of Maintenance Work Categories Through Measurement, </title> <booktitle> Proc. Conf. on Software Maintenance 1991, </booktitle> <address> Sorrento, Italy, </address> <pages> pp. 104113. </pages>
Reference: [Basili & Rombach 1988] <author> Basili, V. R. and D. Rombach. </author> <title> "The TAME Project: Towards Improvement-Oriented Software Environments," </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14 (6), </volume> <month> June </month> <year> 1988, </year> <pages> pp. 758-773. </pages>
Reference: [Briand et al. 1994] <author> Briand, L., V. R. Basili, Y.-M. Kim and D. Squier. </author> <title> A Change Analysis Process to Characterize Software Maintenance Projects, </title> <booktitle> Proc. Intl. Conf. on Software Maintenance, </booktitle> <address> Victoria, </address> <publisher> B. </publisher> <address> C., Canada, </address> <year> 1994, </year> <pages> pp. 3849. </pages>
Reference-contexts: In the following paragraphs we provide an overview of this approach and show how it has helped us in the construction of a predictive model for software maintenance releases. This approach was tested and continuously refined through experience. Further details can be found in <ref> [Briand et al. 1994; 1995] </ref>. First, qualitative studies were performed in order to better comprehend organization and process-related issues. Here, the objective was to identify and understand, as objectively as possible, the real issues faced by the organization.
Reference: [Briand et al . 1995] <author> Briand, L., W. Melo, C. Seaman, and V. Basili. </author> <title> "Characterizing and Assessing a Large-Scale Software Maintenance Organization," </title> <booktitle> Proc. 17th Intl. Conf. on Software Engineering, </booktitle> <address> Seattle, WA, </address> <year> 1995, </year> <pages> pp. 133-143. </pages>
Reference: [Haziza et al. 1992] <author> Haziza, M., J. F. Voidrot, E. Minor, L. Pofelski and S. Blazy. </author> <title> "Software Maintenance: An Analysis of Industrial Needs and Constraints," </title> <booktitle> Proc. Conf. on Software Maintenance 1992, </booktitle> <address> Orlando, Florida, </address> <pages> pp. 18-26. </pages>
Reference-contexts: The software maintenance process is, however, still poorly understood and loosely managed worldwide. As described in <ref> [Haziza et al. 1992] </ref>, numerous factors can affect software maintenance quality and productivity, such as process, organization, experience, and training. Unfortunately the complexity of the phenomena frequently obscures the identity and impact of such factors in any given maintenance organization.
Reference: [Harrison & Cook 1990] <author> Harrison, W. and C. Cook. </author> <title> Insights on Improving the Maintenance Process Through Software Measurement, </title> <booktitle> Proc. Conf. on Software Maintenance 1990, </booktitle> <address> San Diego, CA, </address> <pages> pp. 37 4 5 </pages> . 
Reference: [Hinkle et al. 1995] <author> Hinkle, D. E., W. Wiersma and S. G. Jurs. </author> <booktitle> Applied Statistics for the Behavioral Sciences, </booktitle> <address> Boston: Houghton Mifflin, </address> <year> 1995. </year>
Reference-contexts: To do so, we used the Mann-Whitney U non-parametric tests <ref> [Hinkle et al. 1995] </ref>. We assumed significance at the 0.05 level, i.e., if the p value is greater than 0.05, then we assume there is no observable difference between tester and user SCRs. The results of these tests as well as other descriptive statistics are provided in Table 1.
Reference: [McGarry et al. 1994] <author> McGarry, F., G. Page, V. R. Basili, and M. Zelkowitz. </author> <title> An Overview of the Software Engineering Laboratory, </title> <address> SEL-94-005, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Since 1976, the SEL has been modeling and experimenting in the FDD with the goals of understanding the software development process in this environment; measuring the effect of software engineering methodologies, tools, and models on this process; and identifying and applying successful practices <ref> [McGarry et al. 1994] </ref>.
Reference: [Paulk et al. 1993] <author> Paulk, M., B. Curtis, M-B Chrissis, C. Weber. </author> <title> Capability Maturity Model, Version 1.1, </title> <journal> IEEE Software, </journal> <month> July </month> <year> 1993, </year> <pages> pp. 18-27. </pages>
Reference-contexts: However, methods that help software maintainers change large software systems on schedule and within budget are scarce. Methods currently available for improving software processes, such as the Software Engineering Institute Capability Maturity Model (SEI CMM) <ref> [Paulk et al. 1993] </ref>, have not been validated thoroughly. Even though a few methods have been demonstrated to be useful for software development (e.g., QIP [Basili&Rombach 1988]) they have only recently begun to be applied to software maintenance [Valett et al. 1994].
Reference: [Pigoski & Nelson 1994] <author> Pigoski, T. M. and L. E. Nelson. </author> <title> Software Maintenance Metrics: A Case Study, </title> <booktitle> Proc. Intl. Conf. on Software Maintenance, </booktitle> <address> Victoria, B.C., Canada, </address> <year> 1994, </year> <pages> pp. 392401. </pages>
Reference: [Rombach et al. 1992] <author> Rombach, H., B. Ulery and J. Valett. </author> <title> "Toward Full Life Cycle Control: Adding Maintenance Measurement to the SEL," </title> <journal> J. Systems and Software, </journal> <month> Nov. </month> <year> 1992, </year> <pages> pp. 125-138. </pages>
Reference-contexts: Such models will be incrementally refined when new information of either a qualitative or quantitative nature is available. 3 . A GQM for this study As pointed out in <ref> [Pigoski&Nelson 1994; Rombach et al. 1992; Schneidewind 1994] </ref>, the establishment of a measurement program integrated into the maintenance process, when well defined and established, can help us acquire an in-depth understanding of specific maintenance issues and thereby lay a solid foundation for the improvement of the software maintenance release processes.
Reference: [Schneidewind 1994] <author> Schneidewind, N. </author> <title> A Methodology for Software Quality: Metrics for Maintenance. </title> <booktitle> Tutorial presented at the Intl. Conf. on Software Maintenance, </booktitle> <address> Victoria, </address> <publisher> B. </publisher> <address> C., Canada, </address> <year> 1994. </year>
Reference-contexts: Such models will be incrementally refined when new information of either a qualitative or quantitative nature is available. 3 . A GQM for this study As pointed out in <ref> [Pigoski&Nelson 1994; Rombach et al. 1992; Schneidewind 1994] </ref>, the establishment of a measurement program integrated into the maintenance process, when well defined and established, can help us acquire an in-depth understanding of specific maintenance issues and thereby lay a solid foundation for the improvement of the software maintenance release processes.
Reference: [Valett et al. 1994] <author> Valett, J., S. Condon, L. Briand, Y.- M. Kim and V. Basili. </author> <title> Building an Experience Factory for Maintenance, </title> <booktitle> Proc. 19th Annual Software Eng. Workshop, </booktitle> <institution> NASA Goddard Space Flight Center, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: Even though a few methods have been demonstrated to be useful for software development (e.g., QIP [Basili&Rombach 1988]) they have only recently begun to be applied to software maintenance <ref> [Valett et al. 1994] </ref>.
Reference: [Waligora et al. 1995] <author> Waligora, S., J. Bailey and M. Stark. </author> <title> Impact of ADA and ObjectOriented Design in the Flight Dynamics Division at Goddard Space Flight Center, </title> <address> SEL-95-001, </address> <year> 1995. </year>
References-found: 14

