URL: http://www.win.tue.nl/cs/pa/research/networks/transput.ps
Refering-URL: http://www.win.tue.nl/cs/pa/research/networks/index.html
Root-URL: http://www.win.tue.nl
Title: The Transputer Pascal system  
Author: Johan J. Lukkien 
Date: 20th February 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Knuth, D.E., </author> <booktitle> The Art of Computer Programming. Vol.II (2nd ed.), </booktitle> <publisher> Addison-Wesley, </publisher> <address> Amsterdam, </address> <year> 1981. </year>
Reference-contexts: In general the process executing the select statement will be suspended until an output on one of the specified channels is pending. The implementation is such that the textually first channel is given preference if more choices are possible. In the next example, two channels, inp [0] and inp <ref> [1] </ref>, are merged into a single channel out. (The program does nothing sensible since no processes are running to use the channels.) program merger ; type textchannel = channel of char ; var inp: array [0 .. 1] of textchannel ; out: channel of char ; ch: char ; begin while <p> since no processes are running to use the channels.) program merger ; type textchannel = channel of char ; var inp: array [0 .. 1] of textchannel ; out: channel of char ; ch: char ; begin while true do begin select inp [0]: read (inp [0], ch) ; inp <ref> [1] </ref>: read (inp [1], ch) end ; write (out, ch) end In order to avoid writing explicitly all channel names for a large array of channels, it is possible to use a for construction within a select statement. <p> are running to use the channels.) program merger ; type textchannel = channel of char ; var inp: array [0 .. 1] of textchannel ; out: channel of char ; ch: char ; begin while true do begin select inp [0]: read (inp [0], ch) ; inp <ref> [1] </ref>: read (inp [1], ch) end ; write (out, ch) end In order to avoid writing explicitly all channel names for a large array of channels, it is possible to use a for construction within a select statement. <p> Thereafter, the call random (r) delivers a pseudo-random number in the interval [0; r). The random generator is based on <ref> [1] </ref>, pages 26/27. probe It is possible to use a select statement to determine whether a process is suspended on an output on a channel. However, this is a rather expensive way of checking and it is restricted to output only.
Reference: [2] <author> Hilbers, P.A.J., Lukkien, J.J., </author> <title> Deadlock-free message routing in multicomputer networks, </title> <journal> Distributed Computing, </journal> <volume> Vol. 3, Nr. 4, </volume> <year> 1989. </year>
Reference-contexts: First, it must be free of cycles 3 in the sense defined in <ref> [2] </ref>. This is the case for the above routing function. Notice that it does not actually use the entire ring. An alternative routing function that uses shortest path routing does contain cycles and may, therefore, cause the system to deadlock. <p> A pair (k; l) is an edge of the graph if a message received along link k can be routed onto l by the routing function. If A is free of cycles, RF is called cycle-free. In <ref> [2] </ref> it is proven that this is equivalent to the absence of deadlock. 38 Include files 3.4.1 Interfaces for the INMOS B007 The graphics board INMOS B007 implements two graphics screens of 512 fi 512 pixels each.
Reference: [3] <author> Huijgen, V.B., Lukkien, J.J., </author> <title> Installation of the Pascal system, </title> <institution> Computing Science (PA), Eindhoven University of Technology, </institution> <year> 1995. </year>
Reference-contexts: Chapter 1 is a tutorial which leads a new user briefly through the most important aspects of using the system. It draws upon chapters 2 and 3 for more detailed information. The loader is described in a separate document, <ref> [3] </ref>. The way to use this manual is as follows. Read chapter 1 and do the exercises. After that and whenever necessary read chapters 2 and 3. Throughout the manual we have the following notational convention.
Reference: [4] <author> Hoare, </author> <title> C.A.R., Communicating Sequential Processes, </title> <publisher> Prentice Hall International Series in Computer Science, </publisher> <address> London, </address> <year> 1984. </year>
Reference: [5] <author> Lukkien, J.J., </author> <title> The Construction of a Small Communication Library, </title> <type> Technical Report, 95-01, </type> <institution> Computing Science, Eindhoven University of Technology, </institution> <year> 1995. </year>
Reference-contexts: Some parallel computers already contain hardware to do this and it is to be foreseen that this will become more common in the future. Include file "rpc" provides the functionality of general routing (its implementation is described in <ref> [5] </ref>). The declarations in the file have to be embedded in some proper initialization which is done both in include file "initrpc ring" and in file "initrpc torus" using files "ring" and "torus" respectively. In the first case, processors are identified by variable ringid; in the second case by torid.
Reference: [6] <author> Nye, A., </author> <title> Xlib Programming Manual for version 11, The Definitive Guides to the X Window System, Volume One, </title> <publisher> O'Reily & Associates, Inc., </publisher> <address> Sebastapol (CA), </address> <year> 1990. </year>
Reference-contexts: arc0, arc1, f ) This function draws an arc just like the function XDrawArc (<ref> [6] </ref>). The parameter f may be one out of ARC EDGE, ARC CHORD, ARC PIESLICE. In the first case the arc is not filled. In the last two cases the arc is filled as described in [6], p149. * GDrawCircle (x, y, r, f ) This function uses GDrawArc to draw a circle with radius r and center (x; y). The boolean f determines whether the circle will be filled. * GSetMode (m) Sets the drawing mode.
Reference: [7] <author> INMOS Ltd., </author> <title> Occam Programming Manual, </title> <publisher> Prentice Hall International Series in Computer Science, </publisher> <address> London, </address> <year> 1984. </year>
Reference: [8] <author> INMOS Ltd., </author> <title> The Transputer Databook, INMOS document no. </title> <type> 72 TRN 203 00, </type> <institution> Bath Press Ltd., Bath, </institution> <year> 1989. </year>
Reference: [9] <author> INMOS Ltd., </author> <title> Transputer Instruction Set (A compiler writer's guide), </title> <publisher> Prentice Hall International, </publisher> <address> London, </address> <year> 1988. </year>
Reference: [10] <author> INMOS Ltd., </author> <title> Transputer Development System, </title> <publisher> Prentice Hall International, </publisher> <address> London, </address> <year> 1988. </year>

References-found: 10

