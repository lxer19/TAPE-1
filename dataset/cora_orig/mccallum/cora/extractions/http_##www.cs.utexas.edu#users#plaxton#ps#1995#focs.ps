URL: http://www.cs.utexas.edu/users/plaxton/ps/1995/focs.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Title: Tight Bounds for a Distributed Selection Game with Applications to Fixed-Connection Machines  
Author: C. Greg Plaxton 
Address: Austin, TX 78712  
Affiliation: Department of Computer Science University of Texas at Austin  
Abstract: We define a distributed selection game that generalizes a selection problem considered by Kosaraju [7]. We offer a tight analysis of our distributed selection game, and show that the lower bound for this abstract communication game directly implies near-tight lower bounds for certain selection problems on fixed-connection machines. For example, we prove that any deterministic comparison-based selection algorithm on an (n= log n)-processor bounded-degree hypercubic machine requires (log 3=2 n) steps in the worst case. This lower bound implies a non-trivial separation between the power of bounded-degree hy-percubic and expander-based machines. Furthermore, we show that the algorithm underlying our tight upper bound for the distributed selection game can be adapted to run in O((log 3=2 n) (log log n) 2 ) steps on any (n= log n)-processor hypercubic machine. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Berthome, A. Ferreira, B. M. Maggs, S. Perennes, and C. G. Plaxton. </author> <title> Sorting-based selection algorithms for hypercubic networks. </title> <booktitle> In Proceedings of the 7th International Parallel Processing Symposium, </booktitle> <pages> pages 89-95, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Previous work on this problem has addressed the following two "extreme" cases: * For n p, Berthome et al. <ref> [1] </ref> have proven that Cole's EREW PRAM algorithm [4] can be adapted to obtain a normal hypercube algorithm running in O ((log n) log fl n) time. This upper bound holds for any hypercubic machine.
Reference: [2] <author> M. Blum, R. W. Floyd, V. R. Pratt, R. L. Rivest, and R. E. Tarjan. </author> <title> Time bounds for selection. </title> <journal> JCSS, </journal> <volume> 7 </volume> <pages> 448-461, </pages> <year> 1973. </year>
Reference-contexts: CCR-9504145 and the Texas Advanced Research Program under Grant No. ARP-93-00365-461. Email: plaxton@cs.utexas.edu. taken to be bn=2c. We have eliminated k in this manner from all of our bounds. Since linear-time sequential algorithms are known for selection (see <ref> [2] </ref>, for example), it is natural to ask for what ranges of n and p it is possible to achieve work-optimal selection on a given model of parallel computation. <p> has rank r y greater than or equal to k i in L i (i.e., y is an upper approximation to the desired key), (iii) r y r x jL i j=c. (The technique is the same as that used in analyzing the linear-time selection algorithm of Blum et al. <ref> [2] </ref>.) During phase 1 of round 2 i + 1, each player reads the lower and upper approximation keys x and y. During phase 0 of round 2 i + 2, each player can determine the ranks r y and r x precisely.
Reference: [3] <author> D. Z.. Chen and A. K. Gupta. </author> <title> Weighted selections on coarse-grain hypercubes. </title> <booktitle> In Proceedings of the 7th IEEE Symposium on Parallel and Distributed Processing, </booktitle> <month> October </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: However, a (one item per processor) weighted selection algorithm is sufficient to determine this pair of keys. Chen and Gupta <ref> [3] </ref> have recently established an O ((log p) log fl p) upper bound for weighted selection.
Reference: [4] <author> R. Cole. </author> <title> An optimally efficient parallel selection algorithm. </title> <journal> IPL, </journal> <volume> 26 </volume> <pages> 295-299, </pages> <year> 1988. </year>
Reference-contexts: Since linear-time sequential algorithms are known for selection (see [2], for example), it is natural to ask for what ranges of n and p it is possible to achieve work-optimal selection on a given model of parallel computation. For example, Cole <ref> [4] </ref> has developed an EREW PRAM algorithm for selection that is work-optimal when n exceeds p by an ((log p) log fl p) factor. This result precisely characterizes the complexity of selection on the EREW PRAM, except for a tiny range in which an O (log fl p) gap remains. <p> Previous work on this problem has addressed the following two "extreme" cases: * For n p, Berthome et al. [1] have proven that Cole's EREW PRAM algorithm <ref> [4] </ref> can be adapted to obtain a normal hypercube algorithm running in O ((log n) log fl n) time. This upper bound holds for any hypercubic machine. While this algorithm is not work-optimal, it comes within a log fl n factor of the trivial diameter-based (log n) lower bound.
Reference: [5] <author> R. E. Cypher. </author> <title> Theoretical aspects of VLSI pin limitations. </title> <journal> SIAM J. Comput., </journal> <volume> 22 </volume> <pages> 58-63, </pages> <year> 1993. </year>
Reference-contexts: The lemma stated below is straightforward to prove for butterfly-like machines, but is quite non-trivial for shu*e-exchange-like machines. The proof for shu*e-exchange-like machines is due to Cypher <ref> [5] </ref>. Lemma 7.2 Every p-processor bounded-degree hy-percubic machine is (f (p); f (p)= log p)-partionable for all f (p) = O (p). For the following two theorems, let n = p (log p) ff , 0 ff 2.
Reference: [6] <author> R. E. Cypher and C. G. Plaxton. </author> <title> Deterministic sorting in nearly logarithmic time on the hypercube and related computers. </title> <journal> JCSS, </journal> <volume> 47 </volume> <pages> 501-548, </pages> <year> 1993. </year>
Reference-contexts: Remark: This algorithm makes use of the Share-sort sorting algorithm of Cypher and Plaxton <ref> [6] </ref>. Sharesort is a normal hypercube algorithm which, for n = p, runs in O ((log p) (log log p) 2 ) time on any hy-percubic machine.
Reference: [7] <author> S. R. Kosaraju. </author> <title> Pipelining computations in a tree of processors. </title> <booktitle> In Proceedings of the 30th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 184-189, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: We introduce a third parameter, c, to bound the communication allowed in each round of the game. The resulting game is formally defined in Section 2 as the (a; b; c)-selection game. The (a; b; c)-selection game generalizes a selection problem considered by Kosaraju <ref> [7] </ref>. Kosaraju observed that a lower bound for selection on an n processor tree can be derived by studying the problem of selection on a linear array where the two processors at the endpoints of the array each initially hold a sorted list. (Remark: The main result of [7] is not <p> by Kosaraju <ref> [7] </ref>. Kosaraju observed that a lower bound for selection on an n processor tree can be derived by studying the problem of selection on a linear array where the two processors at the endpoints of the array each initially hold a sorted list. (Remark: The main result of [7] is not this lower bound but rather a near-tight upper bound.) More formally, let processors 0; : : :; c be arranged in a linear array, assume that processor 0 (resp., c) initially holds a sorted list X (resp., Y ) of b keys, X " Y = ;, and <p> The following lemma is due to Kosaraju <ref> [7] </ref>. Lemma 5.2 For a 2, any deterministic algorithm for (a; b; c)-selection requires (log c b) rounds in the worst case. We now make use Lemmas 5.1 and 5.2 to prove Theorem 1, stated at the beginning of this section.
Reference: [8] <author> F. T. Leighton. </author> <title> Tight bounds on the complexity of parallel sorting. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34:344-354, </volume> <year> 1985. </year>
Reference-contexts: This paper focuses on determining the complexity of selection on certain classes of fixed-connection machines, especially the class of bounded-degree hyper-cubic machines (e.g., the butterfly, cube-connected cycles, and shu*e-exchange). As noted in [11], the sorting result of Leighton <ref> [8] </ref> and the token distribution result of Peleg and Upfal [10] imply that a selection algorithm designed for the PRAM by Vishkin [12] (which is work-optimal when n exceeds p by an ((log p) log log p) factor) can be implemented to run in O (n=p + (log p) log log
Reference: [9] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, and Hypercubes. </title> <publisher> Morgan-Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: The class of bounded-degree hypercubic machines can be divided into "butterfly-like" (e.g., butterfly, cube-connected cycles) and "shu*e-exchange-like" (e.g., shu*e-exchange, de Bruijn) machines <ref> [9] </ref>. The lemma stated below is straightforward to prove for butterfly-like machines, but is quite non-trivial for shu*e-exchange-like machines. The proof for shu*e-exchange-like machines is due to Cypher [5]. Lemma 7.2 Every p-processor bounded-degree hy-percubic machine is (f (p); f (p)= log p)-partionable for all f (p) = O (p).
Reference: [10] <author> D. Peleg and E. Upfal. </author> <title> The token distribution problem. </title> <journal> SIAM J. Comput., </journal> <volume> 18 </volume> <pages> 229-243, </pages> <year> 1989. </year>
Reference-contexts: This paper focuses on determining the complexity of selection on certain classes of fixed-connection machines, especially the class of bounded-degree hyper-cubic machines (e.g., the butterfly, cube-connected cycles, and shu*e-exchange). As noted in [11], the sorting result of Leighton [8] and the token distribution result of Peleg and Upfal <ref> [10] </ref> imply that a selection algorithm designed for the PRAM by Vishkin [12] (which is work-optimal when n exceeds p by an ((log p) log log p) factor) can be implemented to run in O (n=p + (log p) log log (n=p)) time on a certain class of bounded-degree expander networks.
Reference: [11] <author> C. G. Plaxton. </author> <title> On the network complexity of selection. </title> <booktitle> In Proceedings of the 30th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 396-401, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: This paper focuses on determining the complexity of selection on certain classes of fixed-connection machines, especially the class of bounded-degree hyper-cubic machines (e.g., the butterfly, cube-connected cycles, and shu*e-exchange). As noted in <ref> [11] </ref>, the sorting result of Leighton [8] and the token distribution result of Peleg and Upfal [10] imply that a selection algorithm designed for the PRAM by Vishkin [12] (which is work-optimal when n exceeds p by an ((log p) log log p) factor) can be implemented to run in O <p> Thus, the complexity of selection is all but completely determined for n p. (Furthermore, for n p 1* , * &gt; 0, the complexity of selection is known to be precisely fi (log n).) * For n p log 2 p, Plaxton <ref> [11] </ref> has proven that the complexity of normal hypercube algorithms for selection is fi ((n=p) log log p). This bound holds for any comparison-based algorithm running on any hypercubic machine (bounded-degree or otherwise). Thus, work-optimal selection algorithms are almost, but not quite, achievable for n p log 2 p. <p> Note that the ((n=p) log log p) lower bound established for selection on a wide class of fixed-connection machines (including all hypercubic machines) in <ref> [11] </ref> differs in the sense that only one local key comparison is allowed at each step. Definition 7.1 Fix n and p.
Reference: [12] <author> U. Vishkin. </author> <title> An optimal parallel algorithm for selection. </title> <booktitle> In Parallel and Distributed Computing, Volume 4 of Advances in Computing Research, </booktitle> <pages> pages 79-86. </pages> <publisher> JAI Press, </publisher> <address> Greenwich, CT, </address> <year> 1987. </year> <month> 9 </month>
Reference-contexts: As noted in [11], the sorting result of Leighton [8] and the token distribution result of Peleg and Upfal [10] imply that a selection algorithm designed for the PRAM by Vishkin <ref> [12] </ref> (which is work-optimal when n exceeds p by an ((log p) log log p) factor) can be implemented to run in O (n=p + (log p) log log (n=p)) time on a certain class of bounded-degree expander networks.
References-found: 12

