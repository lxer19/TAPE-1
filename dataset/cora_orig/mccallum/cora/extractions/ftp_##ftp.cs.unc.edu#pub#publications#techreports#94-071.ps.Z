URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/94-071.ps.Z
Refering-URL: http://www.cs.unc.edu/Info/Publications/PHDAbstracts.html
Root-URL: http://www.cs.unc.edu
Title: EFFICIENCY OF PARTIAL SYNCHRONY, AND RESOURCE ALLOCATION IN DISTRIBUTED SYSTEMS  
Author: by INJONG RHEE Dr. Jennifer L. Welch Dr. James H. Anderson (Member) Dr. Kevin Jeffay (Member) 
Degree: A dissertation submitted to the faculty of  in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the  Approved by:  (Advisor)  
Date: 1994  
Address: Chapel Hill,  
Affiliation: the University of North Carolina at Chapel Hill  Department of Computer Science.  
Abstract-found: 0
Intro-found: 1
Reference: [Aw85] <author> B. Awerbuch, </author> <title> "Complexity of Network Synchronization," </title> <journal> Journal of the ACM, </journal> <volume> vol. 32, no 4, </volume> <year> 1985, </year> <pages> pp. 804-823. </pages>
Reference: [AAT94] <author> R. Alur, H. Attiya and G. Taubenfeld, </author> <title> "Time-Adaptive Algorithms for Synchronization," </title> <booktitle> to appear in Proc. of ACM Symposium on Theory of Computing, </booktitle> <year> 1994. </year>
Reference: [AD93] <author> H. Attiya and T. Djerassi-Shintel, </author> <title> "Time Bounds for Decision Problems in the Presence of Timing Uncertainty and Failures," </title> <booktitle> Proc. of 7th International Workshop on Distributed Algorithms, </booktitle> <month> September </month> <year> 1993, </year> <pages> pp. 204-218. </pages>
Reference: [ADLS91] <author> H. Attiya, C. Dwork, N. Lynch and L. Stockmeyer, </author> <title> "Bounds on the Time to Reach Agreement in the Presence of Timing Uncertainty," </title> <booktitle> Proc. 23rd ACM Symp. on Theory of Computing, </booktitle> <year> 1991, </year> <pages> pp. 359-369. </pages>
Reference: [AFL83] <author> E. Arjomandi, M. Fischer and N. A. Lynch, </author> <title> "Efficiency of Synchronous versus Asynchronous Distributed Systems," </title> <journal> Journal of the ACM, </journal> <volume> vol. 30, no. 3, </volume> <year> 1983, </year> <pages> pp. 449-456. </pages>
Reference: [AL89] <author> H. Attiya and N. A. Lynch, </author> <title> "Time Bounds for Real-Time Process Control in the Presence of Timing Uncertainty," </title> <booktitle> Proc. 10th Real-Time Systems Symp., </booktitle> <address> Santa Monica, CA, </address> <month> Dec. </month> <year> 1989, </year> <pages> pp. 268-284. </pages>
Reference: [AM90] <author> H. Attiya and M. Mavronicolas, </author> <title> "Efficiency of Semi-Synchronous versus 179 Asynchronous Networks," </title> <booktitle> Proc. 28th Allerton Conf. on Communications, Control and Computing, </booktitle> <month> Oct. </month> <year> 1990, </year> <pages> pp. 578-587. </pages>
Reference: [AS90] <author> B. Awerbuch and M. Saks, </author> <title> "A dining philosophers algorithm with polynomial response time," </title> <booktitle> Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <address> St. Louis, MO, </address> <month> Oct. </month> <year> 1990, </year> <pages> pp. 65-74. </pages>
Reference-contexts: The dynamic resource allocation problem <ref> [AS90] </ref> is most general in that the process set may dynamically change over time and each process may need for its execution any set of resources and may need different sets of resources at different times (i.e., a process has no knowledge about its maximum resource requirement and its conflicting processes). <p> Ginat, Shankar and Agrawala [GSA89] proposed a drinking philosophers algorithm that solves the problem directly without using a dining philosophers subroutine, resulting in a more message efficient algorithm with the same time complexity as that of Chandy and Misra's algorithm. Awerbuch and Saks <ref> [AS90] </ref> first defined and solved the dynamic resource allocation problem. <p> Weidman, Page and Pervin [WPP91] developed a dynamic resource allocation algorithm using Chandy and Misra's drinking philosophers algorithm as a subroutine without the assumption that <ref> [AS90] </ref> made the assumption about a process having a priori knowledge about its conflicting processes. <p> It has worst case response time O (ffic+nd) and message complexity O (ffi 2 ). They have also conducted simulations of their algo 103 rithm and other algorithms including Chandy and Misra's algorithm [CM84] and Awerbuch and Saks' algorithm <ref> [AS90] </ref> Their simulation result showed that their algorithm performed better than Awerbuch and Saks' algorithm in terms of average response time, but worse than Chandy and Misra's. <p> (logffi+1) (c + d)) O (ffi (log ffi+1) ) Choy and Singh [CS92] dining O (ffi 2 (c + d)) O (ffi) Page et al. [PJC93] dining O (ffic + nd) O (ffi 2 ) Chandy and Misra [CM84] drinking O (n (c + d)) O (n) Awerbuch and Saks <ref> [AS90] </ref> dynamic O (ffic + ffi 2 log jU jd) O (ffi 2 log jU j) Weidman et al. [WPP91] dynamic O (nc + nd) O (d) Choy and Singh [CS93] dynamic O (ffi 2 c + (ffi 3 + ffi log fl jU j)d) O (ffi log jU j) Response <p> Only the obvious lower bound of (ffi (c + d)) is mentioned in the literature <ref> [AS90, BP92, CS92, PJC93] </ref>. The dining and drinking philosophers problems take as input the maximum resource requirements of all processes, from which we can construct the conflict graph (defined in Section 7.1). Note that ffi is the maximum degree of the conflict graph.
Reference: [AT92] <author> Rajeev Alur and Gadi Taubenfeld, </author> <title> "Results about Fast Mutual Exclusion," </title> <booktitle> Proceedings of the 13th Real-Time Systems Symposium, </booktitle> <address> Phoenix, AZ, </address> <pages> pp. 12-21, </pages> <year> 1992. </year>
Reference: [Ba78] <author> G. Baudet, </author> <title> "Asynchronous Interactive Methods for Multi-Processors," </title> <journal> Journal of the ACM, </journal> <volume> vol. 32, no. 4, </volume> <year> 1978, </year> <pages> pp. 226-244. </pages>
Reference: [BP92] <author> J. Bar-Ilan and D. Peleg, </author> <title> "Distributed resource allocation algorithms," </title> <booktitle> Proc. 6th International Workshop on Distributed Algorithms, </booktitle> <pages> pp. 277-291. </pages>
Reference-contexts: Welch and Lynch [WL93] generalized the modular construction of Chandy and Misra's drinking philosophers algorithm to come up with a drinking philosophers algorithm which uses as a subroutine any dining philosophers algorithm. Its response time and message complexity are equal to those of the subroutine. Bar-Ilan and Peleg <ref> [BP92] </ref> developed a synchronous algorithm that improves on Awerbuch and Saks' algorithm to have response time O (ffic + ffi (log jU j)d) in synchronous network systems. <p> It does not contain the work by [WL93], [GSA89] and [MS88] because they are not concerned with the worst case response times of resource allocation algorithms. It also doesn't 3 log fl n = minfi : log i n 1g: 104 contain the work by <ref> [BP92] </ref> because their work is on the synchronous network. <p> Only the obvious lower bound of (ffi (c + d)) is mentioned in the literature <ref> [AS90, BP92, CS92, PJC93] </ref>. The dining and drinking philosophers problems take as input the maximum resource requirements of all processes, from which we can construct the conflict graph (defined in Section 7.1). Note that ffi is the maximum degree of the conflict graph.
Reference: [BG87] <author> V. Barbosa and E. </author> <title> Gafni, </title> <booktitle> "Concurrency in systems in heavily loaded neighborhood-constrained systems," Proc. Conf. on Distributed Computing Systems, </booktitle> <year> 1987, </year> <pages> pp. 448-455. </pages>
Reference-contexts: However, we show that "a large amount of local computation" is (probably) inevitable because any dining philosophers algorithm with the optimal response time is transformable in polynomial time into a sequential algorithm for an NP-complete problem. A similar lower bound was presented by Barbosa and Gafni <ref> [BG87] </ref> on the maximum average number of times that a process runs in any given period, denoted by fl fl (G), in a synchronous system where conflicting processes need to run in an alternating order. <p> They proved that the inverse of fl fl (G) is bounded in between the multi-chromatic number and the chromatic number of G. The NP-completeness of 106 obtaining the optimal solution with respect to fl fl (G) is also shown in <ref> [BG87] </ref>. Note that this result doesn't obviously imply our results. It might seem that obtaining an optimal response time would be easier than obtaining optimal fl fl (G).
Reference: [BC84] <author> J. Banks and J. Carson, </author> <title> "Discrete-Event System Simulation," </title> <booktitle> Prentice Hall International Series in Industrial and Systems Engineering, </booktitle> <year> 1984. </year>
Reference-contexts: Discrete event simulation is the modeling of systems in which the state variable changes only at a discrete set of points in time <ref> [BC84] </ref>. We simulated only dining philosophers algorithms. <p> Given sampled response times r 1 ; r 2 ; : : : ; r N where N is the total number of users that enter their critical region, the estimated mean response time is : 164 1 N X r i The common technique <ref> [BC84] </ref> to increase the accuracy of the estimated mean response times is to adjust the run length of each simulation in such a way that the number of the sampled response times that are within the 95% confidence interval of the mean response time is less than 5% of the total
Reference: [BL80] <author> J. Burns and N. Lynch, </author> <title> "Mutual Exclusion Using Indivisible Reads and Writes," </title> <booktitle> Proceedings of 18th Annual Allerton Conference on Communication, Control, and Computing, </booktitle> <year> 1980, </year> <pages> pp. 833-842. 180 </pages>
Reference: [CASD86] <author> F. Cristian, H. Aghili, R. Strong and D. Dolev, </author> <title> "Atomic Broadcast: from simple message diffusion to Byzantine agreement," </title> <booktitle> Proceedings of 15th International Conference on Fault Tolerant Computing, </booktitle> <year> 1985, </year> <pages> pp. 1-7. </pages>
Reference: [CDS90] <author> F. Cristian, D. Dolev, H. </author> <title> Strong, "New Latency Bounds for Atomic Broadcast," </title> <booktitle> Proc. of 11th IEEE Real-Time Symposium, </booktitle> <address> Lake Buena Vista, FL, </address> <month> Dec. </month> <year> 1990, </year> <pages> pp. 156-165. </pages>
Reference: [CGL93] <author> Soma Chaudhuri, R. Gawlick and N. Lynch, </author> <title> "Designing Algorithms for Distributed Systems with Partially Synchronized Clocks," </title> <booktitle> Proc. of the 12th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August, </month> <year> 1993, </year> <pages> pp. 121-132. </pages>
Reference: [CM84] <author> K. Chandy and J. Misra, </author> <title> "The drinking philosophers problem," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 6, no. 4, </volume> <pages> pp. 632-646, </pages> <year> 1984 </year>
Reference-contexts: The dining philosophers problem [Di71] is a static resource allocation problem, where the process set is fixed and each process requests a fixed set of resources periodically. A more dynamic version of the dining philosophers, called drinking philosophers <ref> [CM84] </ref>, allows a process to request a different subset of its maximum resource requirement. Any two processes whose current resource requirements do not overlap may execute at the same time even though their maximum resource requirements 99 overlap. <p> The worst case response time is O (c ffi (c + d)) where c is the number of colors used in the coloring. The number of colors represents the maximum length of the partial order among resources. The message complexity is O (ffi). Chandy and Misra <ref> [CM84] </ref> presented a dining philosophers algorithm using an acyclic directed version of the conflict graph. Processes (i.e., nodes) in the critical region have their edges always directed outward and processes which have all of their 101 edges inward can enter the critical region. <p> Their algorithm has worst case response time O (ffi 2 (c + d)) and message complexity O (ffi). They also include a discussion of fault-tolerance. Page, Jacob and Chern [PJC93] presented a dining philosophers algorithm using the conflict resolution technique of <ref> [CM84] </ref>. It has worst case response time O (ffic+nd) and message complexity O (ffi 2 ). They have also conducted simulations of their algo 103 rithm and other algorithms including Chandy and Misra's algorithm [CM84] and Awerbuch and Saks' algorithm [AS90] Their simulation result showed that their algorithm performed better than <p> Page, Jacob and Chern [PJC93] presented a dining philosophers algorithm using the conflict resolution technique of <ref> [CM84] </ref>. It has worst case response time O (ffic+nd) and message complexity O (ffi 2 ). They have also conducted simulations of their algo 103 rithm and other algorithms including Chandy and Misra's algorithm [CM84] and Awerbuch and Saks' algorithm [AS90] Their simulation result showed that their algorithm performed better than Awerbuch and Saks' algorithm in terms of average response time, but worse than Chandy and Misra's. <p> (c + d)) O (ffi) Styer and Peterson [SP88] dining O (ffi (logffi+1) (c + d)) O (ffi (log ffi+1) ) Choy and Singh [CS92] dining O (ffi 2 (c + d)) O (ffi) Page et al. [PJC93] dining O (ffic + nd) O (ffi 2 ) Chandy and Misra <ref> [CM84] </ref> drinking O (n (c + d)) O (n) Awerbuch and Saks [AS90] dynamic O (ffic + ffi 2 log jU jd) O (ffi 2 log jU j) Weidman et al. [WPP91] dynamic O (nc + nd) O (d) Choy and Singh [CS93] dynamic O (ffi 2 c + (ffi 3
Reference: [CS92] <author> M. Choy and A. Singh, </author> <title> "Efficient Fault-Tolerant Algorithms for Resource Allocation in Distributed Systems," </title> <booktitle> Proc. 24th Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1992, </year> <pages> pp. 593-602. </pages>
Reference-contexts: This graph is used as an input for the underlying Chandy and Misra drinking philosophers algorithm. Choy and Singh <ref> [CS92] </ref> developed a dining philosophers algorithm that uses a node coloring scheme on the conflict graph to assign static priorities to processes to access the resources. Their algorithm used a concept of "double doors" where processes are blocked to enter each door if any conflicting processes are inside the door. <p> [CS93] developed a dynamic resource allocation algorithm with worst case response time O (ffi 2 c + (ffi 3 + log fl jU j)d) 3 with message complexity O (ffi 2 + ffi log fl jU j) Their algorithm uses an idea of snapshots to make their dining philosophers algorithm <ref> [CS92] </ref> work in a dynamic system where processes are created or terminated dynamically. Snapshots of process states at an instance of time are used to find out the set of conflicting processes for each process, which changes over time. <p> Authors Problem Time Message Lynch [Ly81] dining O (c ffi (c + d)) O (ffi) Styer and Peterson [SP88] dining O (ffi (logffi+1) (c + d)) O (ffi (log ffi+1) ) Choy and Singh <ref> [CS92] </ref> dining O (ffi 2 (c + d)) O (ffi) Page et al. [PJC93] dining O (ffic + nd) O (ffi 2 ) Chandy and Misra [CM84] drinking O (n (c + d)) O (n) Awerbuch and Saks [AS90] dynamic O (ffic + ffi 2 log jU jd) O (ffi 2 <p> Only the obvious lower bound of (ffi (c + d)) is mentioned in the literature <ref> [AS90, BP92, CS92, PJC93] </ref>. The dining and drinking philosophers problems take as input the maximum resource requirements of all processes, from which we can construct the conflict graph (defined in Section 7.1). Note that ffi is the maximum degree of the conflict graph. <p> Additionally, if the subroutine is a drinking philosophers algorithm or a dynamic resource allocation algorithm, so is the resulting algorithm. This is because our algorithm deals only with the current resource requirements of processes, but not with their maximums. So, when we use Choy and Singh's dining philosophers algorithm <ref> [CS92] </ref> as a subroutine, which has response time O (ffi 2 (c + d)), we obtain a drinking philosophers algorithm with better response time O (ffic+ffi 2 d) and message complexity O (r 2 ffi). This is the fastest known drinking philosophers algorithm with the stated message complexity. <p> This bound suggests that the optimal response time dining and drinking philosophers problems are NP-hard. We also gave an efficient modular resource allocation algorithm that uses another resource allocation algorithm of any kind as a subroutine. When our algorithm uses Choy and Singh's dining philosophers algorithm <ref> [CS92] </ref>, the combined algorithm gives worst case response time O (ffi 2 (c + d)) and O (r 2 ffi), which is the fastest known dining philosophers algorithm with the stated message complexity.
Reference: [CS93] <author> M. Choy and A. Singh, </author> <title> "Distributed Job Scheduling Using Snapshots," </title> <booktitle> Proc. of the 7th International Workshop on Distributed Algorithms, </booktitle> <month> Sept. </month> <year> 1993, </year> <pages> pp. 145-159. </pages>
Reference-contexts: Its response time and message complexity are equal to those of the subroutine. Bar-Ilan and Peleg [BP92] developed a synchronous algorithm that improves on Awerbuch and Saks' algorithm to have response time O (ffic + ffi (log jU j)d) in synchronous network systems. Choy and Singh <ref> [CS93] </ref> developed a dynamic resource allocation algorithm with worst case response time O (ffi 2 c + (ffi 3 + log fl jU j)d) 3 with message complexity O (ffi 2 + ffi log fl jU j) Their algorithm uses an idea of snapshots to make their dining philosophers algorithm [CS92] <p> nd) O (ffi 2 ) Chandy and Misra [CM84] drinking O (n (c + d)) O (n) Awerbuch and Saks [AS90] dynamic O (ffic + ffi 2 log jU jd) O (ffi 2 log jU j) Weidman et al. [WPP91] dynamic O (nc + nd) O (d) Choy and Singh <ref> [CS93] </ref> dynamic O (ffi 2 c + (ffi 3 + ffi log fl jU j)d) O (ffi log jU j) Response time and message complexities of previously known algorithms (c is the time that a process uses a resource, d is the upper bound on the message delay, c is the <p> This is the fastest known drinking philosophers algorithm with the stated message complexity. When we use Choy and Singh's dynamic resource allocation algorithm <ref> [CS93] </ref> as a subroutine, which has response O (ffi 2 c + (ffi 3 + ffi log fl jU j)d) 4 with message complexity O (ffi 2 + ffi log fl jU j), we obtain a dynamic resource allocation algorithm with response time O (ffic + (ffi 3 + ffi log <p> When Choy and Singh's dynamic resource allocation algorithm <ref> [CS93] </ref> is used, the combined dynamic resource allocation algorithm gives worst case response time O (ffic + (ffi 3 + log fl jU j)d) and message complexity O (r 2 ffi), which is the fastest known dining philosophers algorithm with the stated message complexity.
Reference: [CT90] <author> B. A. Coan and G. Thomas, </author> <title> "Agreeing on a Leader in Real-Time," </title> <booktitle> Pro 181 ceedings of the 11th Real-Time Systems Symposium, </booktitle> <address> Lake Buena Vista, FL, </address> <month> Dec. </month> <year> 1990, </year> <pages> pp. 1-7. </pages>
Reference: [CW90] <author> B. A. Coan and J. L. Welch, </author> <title> "Transaction Commit in a Realistic Timing Model," </title> <journal> Distributed Computing, </journal> <volume> vol. 4, </volume> <year> 1990, </year> <pages> pp. 87-103. </pages>
Reference: [DDS87] <author> D. Dolev, C. Dwork and L. Stockmeyer, </author> <title> "On the Minimal Synchronism Needed for Distributed Consensus," </title> <journal> Journal of the ACM, </journal> <volume> vol. 34, no. 1, </volume> <month> Jan. </month> <year> 1987, </year> <pages> pp. 77-97. </pages>
Reference: [Di65] <author> E. W. Dijkstra, </author> <title> "Solution of a Problem in Concurrent Programming Control," </title> <journal> Communications of the ACM, </journal> <volume> vol. 8, </volume> <month> September </month> <year> 1965, </year> <pages> pp. 569. </pages>
Reference: [Di71] <author> E. W. Dijkstra, </author> <title> "Hierarchical Ordering of Sequential Process," </title> <journal> Acta Infor-matica, </journal> <volume> vol. 1, no. 2, </volume> <year> 1971, </year> <pages> pp. 115-138. </pages>
Reference-contexts: If any two processes have overlapping resource requirements and they are either requesting the resources or using the resources, we say that the two processes are in conflict. No two conflicting processes can be in the critical region at the same time. The dining philosophers problem <ref> [Di71] </ref> is a static resource allocation problem, where the process set is fixed and each process requests a fixed set of resources periodically. A more dynamic version of the dining philosophers, called drinking philosophers [CM84], allows a process to request a different subset of its maximum resource requirement. <p> Dijkstra <ref> [Di71] </ref> first posed a resource allocation problem as a ring of 5 processes, called the dining philosophers, where each process shares a resource with each neighbor. Later, Lynch [Ly81] generalized the problem to an conflict arbitrary graph.
Reference: [DLS88] <author> C. Dwork, N. Lynch and L. Stockmeyer, </author> <title> "Consensus in the Presence of Partial Synchrony," </title> <journal> Journal of the ACM, </journal> <volume> vol. 35, no. 2, </volume> <year> 1988, </year> <pages> pp. 288-323. </pages>
Reference: [FLP85] <author> Michael Fischer, Nancy Lynch and Michael Paterson, </author> <title> "Impossibility of Distributed Consensus with One Faulty Process," </title> <journal> Journal of the ACM, </journal> <volume> vol. 32, no. 2, </volume> <pages> pp. 374-382. </pages>
Reference: [GSA89] <author> D. Ginat, A. Shankar and A. Agrawala, </author> <title> "An efficient solution to the drinking philosophers problem and its extensions," </title> <booktitle> Proc. 3rd International Workshop on Distributed Algorithms, </booktitle> <publisher> LNCS 392, Springer-Verlag, </publisher> <month> Septem-ber </month> <year> 1989, </year> <pages> pp. 83-93. 182 </pages>
Reference-contexts: Styer and Peterson [SP88] extended Lynch's algorithm to develop a dining philosophers algorithm with worst case response time O (ffi log ffi+1 (c + d)) and message complexity O (ffi log ffi+1 ). Ginat, Shankar and Agrawala <ref> [GSA89] </ref> proposed a drinking philosophers algorithm that solves the problem directly without using a dining philosophers subroutine, resulting in a more message efficient algorithm with the same time complexity as that of Chandy and Misra's algorithm. Awerbuch and Saks [AS90] first defined and solved the dynamic resource allocation problem. <p> Table 10 shows the worst case response time of the previous algorithms for dining/drinking philosopher problems and dynamic resource allocation problem. It does not contain the work by [WL93], <ref> [GSA89] </ref> and [MS88] because they are not concerned with the worst case response times of resource allocation algorithms. It also doesn't 3 log fl n = minfi : log i n 1g: 104 contain the work by [BP92] because their work is on the synchronous network.
Reference: [GVW89] <author> J. Goodman, M. Vernon, and P. Woest, </author> <title> "Efficient Synchronization Primitives for Large-Scale Cache Coherent Multiprocessors," </title> <booktitle> Proc. of the 3rd International Conference on Architectural Support for Programming Languages and Operating Systems 1989, </booktitle> <pages> pp. 64-75. </pages>
Reference: [Je91] <author> K. Jeffay, </author> <title> "The Real-Time Producer/Consumer Paradigm: A Paradigm for the Efficient, Predictable Real-Time System," </title> <booktitle> Proc. 1993 ACM/SIGAPP Symposium on Applied Computing, Indianapolis, IN, </booktitle> <publisher> ACM Press, </publisher> <month> February </month> <year> 1993, </year> <pages> pp. 796-804. </pages>
Reference: [JSM91] <author> K. Jeffay, D. F. Stanat and C. U. Martel, </author> <title> "On Optimal, no.-Preemptive Scheduling of Periodic and Sporadic Tasks," </title> <booktitle> Proceedings of 12th IEEE Real-Time Systems Symposium, </booktitle> <address> San Antonio, TX, </address> <month> Dec. </month> <year> 1991, </year> <pages> pp. 129-139. </pages>
Reference: [LA86] <author> Leslie Lamport, </author> <title> "Using Time Instead of Timeout for Fault-Tolerant Distributed Systems," </title> <journal> ACM Transactions on Programming Language and Systems, </journal> <volume> vol. 6, no. 2, </volume> <month> April </month> <year> 1984, </year> <pages> pp. 254-280. </pages>
Reference: [LA87] <author> Leslie Lamport, </author> <title> "A Fast Mutual Exclusion Algorithm," </title> <journal> ACM Transactions on Programming Language and Systems, </journal> <volume> vol. 5, no. 1, </volume> <year> 1987, </year> <pages> pp. 1-11. </pages>
Reference: [Ly81] <author> Nancy Lynch, </author> <title> "Upper Bounds for Static Resource Allocation in a Distributed System," </title> <journal> Journal of Computer and System Science, </journal> <volume> vol. 23, </volume> <year> 1981, </year> <pages> pp. 254-278. </pages>
Reference-contexts: Dijkstra [Di71] first posed a resource allocation problem as a ring of 5 processes, called the dining philosophers, where each process shares a resource with each neighbor. Later, Lynch <ref> [Ly81] </ref> generalized the problem to an conflict arbitrary graph. Lynch's solution uses an edge coloring algorithm to set a partial ordering on the shared resources, so that each process requests its needed resources in that order. <p> It also doesn't 3 log fl n = minfi : log i n 1g: 104 contain the work by [BP92] because their work is on the synchronous network. Authors Problem Time Message Lynch <ref> [Ly81] </ref> dining O (c ffi (c + d)) O (ffi) Styer and Peterson [SP88] dining O (ffi (logffi+1) (c + d)) O (ffi (log ffi+1) ) Choy and Singh [CS92] dining O (ffi 2 (c + d)) O (ffi) Page et al. [PJC93] dining O (ffic + nd) O (ffi 2 <p> A similar type of modularity was presented by Welch and Lynch [WL93], but one can get better performance by running the combined algorithm than by running the subroutine only unlike theirs. The system structure of our solution is similar to those of Lynch <ref> [Ly81] </ref> and Wei-dman et al. [WPP91], in that there is one designated process for each resource, called a resource manager, that doles out resources to the requesting processes or maintains information about conflicting processes. In our solution, the resource managers also participate in scheduling accesses of processes to resources.
Reference: [LL73] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogram 183 ming in a Hard Real-Time Environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <month> Jan. </month> <year> 1973, </year> <pages> pp. 46-61. </pages>
Reference: [LA92] <author> M. Loui and H. Abu-Amara, </author> <title> "Memory Requirements for Agreement among Unreliable Asynchronous Processes," </title> <booktitle> Advances in Computing Research, 1987, </booktitle> <volume> vol 4, </volume> <pages> pp. 163-183. </pages>
Reference: [LS92] <author> Nancy Lynch and Nir Shavit, </author> <title> "Timing-Based Mutual Exclusion," </title> <booktitle> Proceedings of the 13th Real-Time Systems Symposium, </booktitle> <address> San Antonio, TX, </address> <year> 1991, </year> <pages> pp. 2-11. </pages>
Reference: [LSP82] <author> L. Lamport, R. Shostak and M. Pease, </author> <title> "The Byzantine General Problem," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 4, no. 3, </volume> <month> July </month> <year> 1982, </year> <pages> pp. 382-401. </pages>
Reference: [Ma92] <author> M. Mavronicolas, </author> <title> "Efficiency of Semi-Synchronous versus Asynchronous Systems: Atomic Shared Memory," </title> <institution> TR-03-92, Aiken Computation Lab., Harvard University, </institution> <month> Jan. </month> <year> 1992. </year>
Reference: [MS88] <author> S. Murphy and A. Shankar, </author> <title> "A note on the drinking philosophers problem," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 10, no. 2, </volume> <year> 1988, </year> <pages> pp. 178-188 </pages>
Reference-contexts: The worst case response time for both of the solutions is O (n (c + d)) and the message complexity is O (ffi). Both of the Chandy and Misra's algorithms are proven correct assuming a strong fairness property on the execution of actions. Murphy and Shankar <ref> [MS88] </ref> consider weaker fairness properties and show what modifications have to be made to preserve correctness. Styer and Peterson [SP88] extended Lynch's algorithm to develop a dining philosophers algorithm with worst case response time O (ffi log ffi+1 (c + d)) and message complexity O (ffi log ffi+1 ). <p> Table 10 shows the worst case response time of the previous algorithms for dining/drinking philosopher problems and dynamic resource allocation problem. It does not contain the work by [WL93], [GSA89] and <ref> [MS88] </ref> because they are not concerned with the worst case response times of resource allocation algorithms. It also doesn't 3 log fl n = minfi : log i n 1g: 104 contain the work by [BP92] because their work is on the synchronous network.
Reference: [NT87] <author> G. Neiger and S. Toueg, </author> <title> "Simulating Synchronized Clocks and Common Knowledge in Distributed Systems," </title> <journal> Journal of the ACM, </journal> <volume> vol. 40, no. 3, </volume> <month> April </month> <year> 1993, </year> <pages> pp. 334-367. 184 </pages>
Reference: [Po91] <author> S. Ponzio, </author> <title> "Consensus in the Presence of Timing Uncertainty: Omission and Byzantine Failures," </title> <booktitle> Proc. ACM Symp. on Principles of Distributed Computing, </booktitle> <month> Oct. </month> <year> 1991, </year> <pages> pp. 125-137. </pages>
Reference: [PF77] <author> G. Peterson and M. Fischer, </author> <title> "Economical Solutions for the Critical Section Problem in a Distributed System," </title> <booktitle> Proc. 9th ACM Symp. on Theory of Computing, </booktitle> <year> 1977, </year> <pages> pp. 91-97. </pages>
Reference-contexts: Message delay is the time period between when a process executed a send step to send a message and when the message is delivered to the destination process's buffer. Note that this approach of measuring time complexity in an asynchronous system was first proposed in <ref> [PF77] </ref>. In addition, the response time is dependent on the degree of resource contention (i.e., the number of conflicting users) and possibly the number of resources that a user request at a time.
Reference: [PSL80] <author> M. Pease, R. Shostak and L. Lamport, </author> <title> "Reaching Agreement in the Presence of Faults," </title> <journal> Journal of the ACM, </journal> <volume> vol. 27, no. 2, </volume> <month> April </month> <year> 1980, </year> <pages> pp. 228-234. </pages>
Reference: [RW92] <author> I. Rhee and J. Welch, </author> <title> "The Impact of Time on the Session Problem," </title> <booktitle> Proc. of 11th ACM Sympo. on Principles of Distributed Computing, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992, </year> <pages> pp. 191-201. </pages>
Reference: [PJC93] <author> I. Page, R. Jacob and S. Chern, </author> <title> "Fast algorithms for distributed resource allocation," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, no. 2, </volume> <month> Feb, </month> <year> 1993, </year> <pages> pp. 632-646. </pages>
Reference-contexts: Conflicts among processes inside the door are resolved by the static priorities among processes. Their algorithm has worst case response time O (ffi 2 (c + d)) and message complexity O (ffi). They also include a discussion of fault-tolerance. Page, Jacob and Chern <ref> [PJC93] </ref> presented a dining philosophers algorithm using the conflict resolution technique of [CM84]. It has worst case response time O (ffic+nd) and message complexity O (ffi 2 ). <p> Authors Problem Time Message Lynch [Ly81] dining O (c ffi (c + d)) O (ffi) Styer and Peterson [SP88] dining O (ffi (logffi+1) (c + d)) O (ffi (log ffi+1) ) Choy and Singh [CS92] dining O (ffi 2 (c + d)) O (ffi) Page et al. <ref> [PJC93] </ref> dining O (ffic + nd) O (ffi 2 ) Chandy and Misra [CM84] drinking O (n (c + d)) O (n) Awerbuch and Saks [AS90] dynamic O (ffic + ffi 2 log jU jd) O (ffi 2 log jU j) Weidman et al. [WPP91] dynamic O (nc + nd) O <p> Only the obvious lower bound of (ffi (c + d)) is mentioned in the literature <ref> [AS90, BP92, CS92, PJC93] </ref>. The dining and drinking philosophers problems take as input the maximum resource requirements of all processes, from which we can construct the conflict graph (defined in Section 7.1). Note that ffi is the maximum degree of the conflict graph.
Reference: [S92] <author> J. Stankovic, </author> <title> "Editorial: Resource Allocation in Real-Time Systems," </title> <booktitle> Real Time Systems, </booktitle> <volume> vol 5, </volume> <pages> pp. 1-6, </pages> <year> 1992. </year>
Reference-contexts: In real-time systems, meeting time deadlines of processes is of more importance than shortening response time of processes. It is only recently that researchers have studied real-time processor scheduling in conjunction with resource allocation <ref> [S92] </ref>. In fact, without providing an efficient way to synchronize accesses to resources, scheduling only processors among processes is not an effective solution for real-time applications because the resource accesses may cause processes to block, and therefore to miss deadlines.
Reference: [SP88] <author> E. Styer and G. Peterson, </author> <title> "Improved algorithms for distributed resource allocation," </title> <booktitle> Proc. 7th ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Toronto, Canada, </address> <month> August </month> <year> 1988, </year> <pages> pp. 105-116 185 </pages>
Reference-contexts: Both of the Chandy and Misra's algorithms are proven correct assuming a strong fairness property on the execution of actions. Murphy and Shankar [MS88] consider weaker fairness properties and show what modifications have to be made to preserve correctness. Styer and Peterson <ref> [SP88] </ref> extended Lynch's algorithm to develop a dining philosophers algorithm with worst case response time O (ffi log ffi+1 (c + d)) and message complexity O (ffi log ffi+1 ). <p> It also doesn't 3 log fl n = minfi : log i n 1g: 104 contain the work by [BP92] because their work is on the synchronous network. Authors Problem Time Message Lynch [Ly81] dining O (c ffi (c + d)) O (ffi) Styer and Peterson <ref> [SP88] </ref> dining O (ffi (logffi+1) (c + d)) O (ffi (log ffi+1) ) Choy and Singh [CS92] dining O (ffi 2 (c + d)) O (ffi) Page et al. [PJC93] dining O (ffic + nd) O (ffi 2 ) Chandy and Misra [CM84] drinking O (n (c + d)) O (n)
Reference: [SWL88] <author> B. Simons, J. Welch and N. Lynch, </author> <title> "An Overview of Clock Synchronization," </title> <institution> IBM Computer Science Research Report RJ 6506 (63306), </institution> <month> Oct. </month> <year> 1988. </year>
Reference: [We87] <author> J. Welch, </author> <title> "Simulating Synchronous Processors," </title> <journal> Information and Computation, </journal> <volume> vol. 74, no. 2, </volume> <month> August </month> <year> 1987, </year> <pages> pp. 159-171. </pages>
Reference: [WL93] <author> J. Welch and N. Lynch, </author> <title> "A modular drinking philosophers algorithm," </title> <journal> Distributed Computing, </journal> <volume> vol. 6, </volume> <year> 1993, </year> <pages> pp. 233-244. </pages>
Reference-contexts: Welch and Lynch <ref> [WL93] </ref> generalized the modular construction of Chandy and Misra's drinking philosophers algorithm to come up with a drinking philosophers algorithm which uses as a subroutine any dining philosophers algorithm. Its response time and message complexity are equal to those of the subroutine. <p> Table 10 shows the worst case response time of the previous algorithms for dining/drinking philosopher problems and dynamic resource allocation problem. It does not contain the work by <ref> [WL93] </ref>, [GSA89] and [MS88] because they are not concerned with the worst case response times of resource allocation algorithms. It also doesn't 3 log fl n = minfi : log i n 1g: 104 contain the work by [BP92] because their work is on the synchronous network. <p> When log fl jU j is less than ffi, our dynamic algorithm is the fastest known dynamic resource allocation algorithm with the stated message 4 log fl n = minfi : log i n 1g: 108 complexity. A similar type of modularity was presented by Welch and Lynch <ref> [WL93] </ref>, but one can get better performance by running the combined algorithm than by running the subroutine only unlike theirs. <p> The same concurrency condition is given in <ref> [WL93] </ref>. The drinking philosophers problem is a system with a finite and fixed user set U . For each user i, there exists a fixed R i and R i (t) is a priori unknown to all processes. <p> This algorithm can be easily converted to a drinking philosophers algorithm using Welch and Lynch's drinking philosophers algorithm <ref> [WL93] </ref>. Their algorithm has the property that, given any arbitrary dining philosophers algorithm as a subroutine, it behaves as a drinking philosophers algorithm with only a constant factor increase to the response time of the subroutine.
Reference: [WPP91] <author> E. Weidman, I. Page, W. Pervin, </author> <title> "Explicit Dynamic Exclusion Algorithm," </title> <booktitle> Proceedings of the 3rd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <month> December </month> <year> 1991, </year> <pages> pp. 142-149. </pages>
Reference-contexts: The worst case response time of the algorithms is O (ffic + ffi 2 (log jU j)d) where U is the the universal set from which process IDs are drawn, and the message complexity is O (ffi 2 log jU j). Weidman, Page and Pervin <ref> [WPP91] </ref> developed a dynamic resource allocation algorithm using Chandy and Misra's drinking philosophers algorithm as a subroutine without the assumption that [AS90] made the assumption about a process having a priori knowledge about its conflicting processes. <p> d)) O (ffi) Page et al. [PJC93] dining O (ffic + nd) O (ffi 2 ) Chandy and Misra [CM84] drinking O (n (c + d)) O (n) Awerbuch and Saks [AS90] dynamic O (ffic + ffi 2 log jU jd) O (ffi 2 log jU j) Weidman et al. <ref> [WPP91] </ref> dynamic O (nc + nd) O (d) Choy and Singh [CS93] dynamic O (ffi 2 c + (ffi 3 + ffi log fl jU j)d) O (ffi log jU j) Response time and message complexities of previously known algorithms (c is the time that a process uses a resource, d <p> A similar type of modularity was presented by Welch and Lynch [WL93], but one can get better performance by running the combined algorithm than by running the subroutine only unlike theirs. The system structure of our solution is similar to those of Lynch [Ly81] and Wei-dman et al. <ref> [WPP91] </ref>, in that there is one designated process for each resource, called a resource manager, that doles out resources to the requesting processes or maintains information about conflicting processes. In our solution, the resource managers also participate in scheduling accesses of processes to resources.
References-found: 52

