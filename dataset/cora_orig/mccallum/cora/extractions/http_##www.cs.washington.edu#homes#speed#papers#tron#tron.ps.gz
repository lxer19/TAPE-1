URL: http://www.cs.washington.edu/homes/speed/papers/tron/tron.ps.gz
Refering-URL: http://www.cs.washington.edu/homes/speed/home.html
Root-URL: 
Title: TRON: ProcessSpecific File Protection for the UNIX Operating System  
Author: Andrew Berman, Virgil Bourassa and Erik Selberg 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: The file protection mechanism provided in UNIX is insufficient for current computing environments. While the UNIX file protection system attempts to protect users from attacks by other users, it does not directly address the agents of destruction executing processes. As computing environments become more interconnected and interdependent, there is increasing pressure and opportunity for users to acquire and test nonsecure, and possibly malicious, software. We introduce TRON, a processlevel discretionary access control system for UNIX. TRON allows users to specify capabilities for a process access to individual files, directories, and directory trees. These capabilities are enforced by system call wrappers compiled into the operating system kernel. No privileged system calls, special files, system administrator intervention, or changes to the file system are required. Existing UNIX programs can be run without recompilation under TRONenhanced UNIX. Thus, TRON improves UNIX security while maintaining current standards of exibility and openness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bershad, B. N. and Pinkerton, C. B., </author> <title> WatchdogsExtending the Unix File System, </title> <journal> Computing Systems, </journal> <volume> vol. 1, no. 2, </volume> <pages> pp. 169-88, </pages> <month> Spring </month> <year> 1988. </year>
Reference: [2] <author> Candia, T., </author> <title> Unix Security Myths and Truths, </title> <journal> EDPACS, </journal> <volume> vol. 20, no. 6, </volume> <pages> pp. 813, </pages> <month> December </month> <year> 1992. </year>
Reference: [3] <author> Carson, M. E. and Wen, Der Jiang, </author> <title> New Ideas in Discretionary Access Control, </title> <booktitle> Proceedings: UNIX Security Workshop, </booktitle> <address> Portland, OR, USA, </address> <pages> pp. 357, </pages> <publisher> USENIX, </publisher> <month> August 2930 </month> <year> 1988. </year>
Reference: [4] <author> Davida, G. I. and Matt, B. J., </author> <title> Unix Guardians: Delegating Security to the User, </title> <booktitle> USENIX, </booktitle> <address> Berkeley, CA, USA, </address> <year> 1988. </year>
Reference: [5] <author> Denning, Dorothy E., </author> <title> Cryptography and Data Security, </title> <publisher> AddisonWesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1982. </year>
Reference: [6] <author> Dennis, Jack B. and Van Horn, E. C., </author> <title> Programming Semantics for Multiprogrammed Computations, </title> <journal> Comm. ACM, </journal> <volume> vol. 9, no. 3, </volume> <pages> pp. 143 155, </pages> <month> March, </month> <year> 1966. </year>
Reference-contexts: Capabilities For protection, an agent requires access rights to a resource. A list of access rights associated with a resource is called an access control list [17]. Alternatively, a list of access rights associated with an agent is called a capability list <ref> [6] </ref>. The design of TRON is patterned after capabilitylist systems in that the access rights are associated with the agents of access, processes. Unfortunately, UNIX does not lend itself to a traditional capabilitybased approach [15], in which each resource is identified uniquely.
Reference: [7] <author> Duff, Tom, </author> <title> Viral Attacks On UNIX System Security, </title> <booktitle> Proceedings, 1989 Winter USENIX Technical Conference, </booktitle> <address> San Diego, CA, </address> <pages> pp. 165171, </pages> <publisher> USENIX, </publisher> <month> January 30February 3, </month> <year> 1989. </year>
Reference-contexts: Furthermore, program arguments are often not filenames, but in this system must be treated as such. Finally, the approach has no means of indicating that an argument specifies a directory tree, making it impossible to protect programs, such as ls, find and rm, that recursively access directories <ref> [7] </ref>. Programs that do not cooperate with the capability determination scheme must opt out of running in a protected domain.
Reference: [8] <author> Fernandez, G. and Allen, L., </author> <title> Extending the UNIX Protection Model with Access Control Lists, </title> <booktitle> Proceedings of USENIX, </booktitle> <address> San Francisco, CA, USA, </address> <publisher> USENIX Assoc., </publisher> <address> Berkeley, CA, USA, </address> <month> Summer </month> <year> 1988, </year> <pages> pp 119132. </pages>
Reference: [9] <author> Hardy, N., </author> <title> The Confused Deputy (or Why Capabilities Might Have Been Invented), </title> <journal> Operating Systems Review, </journal> <volume> vol. 22, no. 4, </volume> <pages> pp. 368, </pages> <month> October </month> <year> 1988. </year>
Reference: [10] <author> Heydon, A., and Tygar, J. D., </author> <title> Specifying and Checking UNIX Security Constraints, </title> <journal> Computing Systems, </journal> <volume> vol. 7, no. 1, </volume> <pages> pp. 91112, </pages> <month> Winter </month> <year> 1994. </year>
Reference: [11] <author> Howard, John H., Kazar, Michael L., Menees, Sherri G., Nichols, David A., Satyanarayanan, M., Sidebotham, Robert N., West, Michael J., </author> <title> Scale and Performance in a Distributed File System, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 6, no. 1, </volume> <pages> pp. 51-88, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Because tron_fork first verifies that the newly created TRON domain will contain a strict subset of rights prior to creating the child pro 1. Our set of rights is inspired by those of the An drew File System <ref> [11] </ref>. cess, failure of the domain creation does not result in a new child process with more rights than the parent process intended, nor does the parent process have to rely on this child process for notification of the failure.
Reference: [12] <author> Kaplan, R., </author> <title> SUID and SGID Based Attacks on UNIX: a Look at One Form of the Use and Abuse of Privileges, </title> <journal> Computer Security Journal, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 737, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: These commands allow a programs user to temporarily gain the rights of the programs owner. Such privileges have successfully been exploited to gain undesired access to user accounts and files by other users <ref> [12] </ref>. A common security technique to enhance UNIX file protection for programs such as ftp is to use the privileged command, chroot, to change the root, causing the visible directory hierarchy to be replaced by a safe subdirectory.
Reference: [13] <author> Lai, Nick, and Gray, Terence E., </author> <title> Strengthening Discretionary Access Controls to Inhibit Trojan Horses and Computer Viruses, </title> <booktitle> Proceedings of USENIX, </booktitle> <address> San Francisco, CA, USA, </address> <publisher> USENIX Assoc., </publisher> <address> Berkeley, CA, USA, </address> <month> Summer </month> <year> 1988, </year> <pages> pp. 27586. </pages>
Reference-contexts: the ability to completely opt out of the security mecha nisms can lead to reduced use of these mechanisms. test without TRON full rights stdtron (15 capabilities) 50 capabilities 80 capabilities forktest 3388 3438 3625 3699 3719 filetest 33726 33648 33730 33786 33717 Table 1: Performance Benchmarks Lai & Gray <ref> [13] </ref> propose a system that is similar to TRON. In their system, processes are granted rights to files. Processes reside in Untrusted Process Families (UPFs), which contain lists of capabilities. <p> We feel that the integration of TRON moves UNIX a long way towards meeting this goal. By using processbased capabilities we restrict the activities on files at a finer granularity than user or pro-grambased capabilities. As Lai and Gray point out in <ref> [13] </ref>, the goals of computer users are effected through process invocation, and therefore it is the users intended process accesses that should be delineated and enforced. Unlike Lai & Grays system, however, we leave it to the user to directly convey their intended process accesses.
Reference: [14] <author> Lampson, Butler W., </author> <title> Protection, </title> <booktitle> Proceedings of the Fifth Princeton Symposium on Information Sciences and Systems, </booktitle> <address> Princeton University, </address> <month> March </month> <year> 1971, </year> <pages> pp. 437443, </pages> <booktitle> reprinted in Operating Systems Review, </booktitle> <volume> vol. 8, no. 1, </volume> <month> January </month> <year> 1974, </year> <pages> pp. 1824 </pages>
Reference-contexts: Users are thus required to perform a lot of maintenance on their access control lists. Furthermore, these systems offer no protection for the user against programs owned by the user, which may contain errors, Trojan Horses, or viruses. Lampson <ref> [14] </ref> points out that users must be protected against activities by their own programs as much as by other users. Wichers, et.al. [20], propose an access control system, PACLs, in which rights are granted to programs rather than users.
Reference: [15] <author> Levy, Hank, </author> <title> Capability Based Computer Systems, </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference-contexts: Alternatively, a list of access rights associated with an agent is called a capability list [6]. The design of TRON is patterned after capabilitylist systems in that the access rights are associated with the agents of access, processes. Unfortunately, UNIX does not lend itself to a traditional capabilitybased approach <ref> [15] </ref>, in which each resource is identified uniquely. In UNIX, files and directories can have many names because of directory links and mounted file systems.
Reference: [16] <author> Low, Marie Rose, and Christianson, Bruce, </author> <title> Fine Grained Object Protection in Unix, </title> <journal> Operating Systems Review, </journal> <volume> vol. 27, no. 1, </volume> <pages> pp. 3350, </pages> <month> January </month> <year> 1993. </year>
Reference: [17] <author> Organick, E.I., </author> <title> The Multics System: An Examination of Its Structure. </title> <publisher> MIT Press, </publisher> <address> Cambridge MA, USA 1972 </address>
Reference-contexts: Conversely, even processes with superuser privileges are restricted when executing in a protected TRON domain. 3.1. Capabilities For protection, an agent requires access rights to a resource. A list of access rights associated with a resource is called an access control list <ref> [17] </ref>. Alternatively, a list of access rights associated with an agent is called a capability list [6]. The design of TRON is patterned after capabilitylist systems in that the access rights are associated with the agents of access, processes.
Reference: [18] <author> Seeley, Don, </author> <title> A Tour Of the Internet Worm, </title> <booktitle> Conference Proceedings 1989 USENIX Technical Conference, USENIX Assoc., </booktitle> <address> Berkeley, CA, USA, </address> <pages> pp. 287304. </pages>
Reference-contexts: Example D creates a TRON domain to hold the finger daemon, permitting normal execution of its functions. This would have prevented the Internet Worm from taking advantage of the bug in fingerd to infiltrate systems <ref> [18] </ref>. Similar TRON domains can be created for each daemon in /etc/inetd.conf.
Reference: [19] <author> Strack, H., </author> <title> Extended Access Control in UNIX System VACLs and Context, </title> <booktitle> USENIX Workshop Proceedings on UNIX Security II, </booktitle> <address> Portland, OR, USA, </address> <pages> pp. 87101, </pages> <publisher> USENIX Assoc., </publisher> <address> Berkeley, CA, USA, </address> <month> August 2728 </month> <year> 1990. </year>
Reference: [20] <author> Wichers, D. R., Cook, D. M., Olsson, R. A., Crossley, J., Kerchen P., Levitt, K. N., and Lo, R., PACLs: </author> <title> An Access Control List Approach to Anti Viral Security, </title> <publisher> USENIX Assoc., </publisher> <address> Berkeley, CA, USA. </address>
Reference-contexts: Furthermore, these systems offer no protection for the user against programs owned by the user, which may contain errors, Trojan Horses, or viruses. Lampson [14] points out that users must be protected against activities by their own programs as much as by other users. Wichers, et.al. <ref> [20] </ref>, propose an access control system, PACLs, in which rights are granted to programs rather than users. This method protects somewhat against viruses and Trojan Horses, since they must have the correct program name to work their effects. However, their system requires extensive effort by the user.

References-found: 20

