URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/jacm94.ps
Refering-URL: http://www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/papers.html
Root-URL: 
Title: Biconnectivity Approximations and Graph Carvings  
Author: Samir Khuller Uzi Vishkin 
Note: k (with an increased running time though).  
Abstract: A spanning tree in a graph is the smallest connected spanning subgraph. Given a graph, how does one find the smallest (i.e., least number of edges) 2-connected spanning subgraph (connectivity refers to both edge and vertex connectivity, if not specified) ? Unfortunately, the problem is known to be N P -hard. We consider the problem of finding a better approximation to the smallest 2-connected subgraph, by an efficient algorithm. For 2-edge connectivity our algorithm guarantees a solution that is no more than 3 2 times the optimal. For 2-vertex connectivity our algorithm guarantees a solution that is no more than 5 3 times the optimal. The previous best approximation factor is 2 for each of these problems. The new algorithms (and their analyses) depend upon a structure called a carving of a graph, which is of independent interest. We show that approximating the optimal solution to within an additive constant is N P -hard as well. We also consider the case where the graph has edge weights. For this case we show that an approximation factor of 2 is possible in polynomial time for finding a k-edge connected spanning subgraph. This improves an approximation factor of 3 for k = 2 due to [FJ81], and extends it for any
Abstract-found: 1
Intro-found: 1
Reference: [BR92] <author> P. Berman and V. Ramaiyer, </author> <title> "An approximation algorithm for the steiner tree problem," </title> <booktitle> 3 rd Annual Symposium on Discrete Algorithms, </booktitle> <pages> pp. 325-334, </pages> <year> (1992). </year>
Reference-contexts: For example, Johnson [Jo82] reports a series of 8 papers that give such improvements for bin packing, starting from an approximation factor of 2 down to 1.18333, and recently to (1 + *). For steiner trees, a similar series exists <ref> [KMB81, TM80, Ze93, BR92] </ref>. Outline of Paper: Section 2 gives basic definitions related to edge and vertex connectivity. Section 3 describes the algorithm for the edge connectivity case (this section is very simple and gives the flavor of the results and analysis for the vertex case, which is more involved).
Reference: [CT91] <author> J. Cheriyan and R. Thurimella, </author> <title> "Algorithms for parallel k-vertex connectivity and sparse certificates," </title> <booktitle> 23 rd Annual Symposium on Theory of Computing, </booktitle> <pages> pp. 391-401, </pages> <year> (1991). </year>
Reference-contexts: This gives a 2-connected spanning subgraph with at most 2n 2 edges, while n is a trivial lower bound on any optimal solution. Other schemes for obtaining approximation factors of 2 follow as simple consequences of <ref> [Wh32, CT91, NI90] </ref>. Related Work: The question of finding minimum cost k-connected spanning subgraphs can be posed in the context of weighted graphs as well. For the case k = 1, the problem reduces to that of finding a minimum spanning tree.
Reference: [Ed79] <author> J. Edmonds, </author> <title> "Matroid intersection," </title> <journal> Annals of Discrete Mathematics, </journal> <volume> No. 4, </volume> <pages> pp. 185-204, </pages> <year> (1979). </year>
Reference-contexts: For the case of weighted graphs we observe that an approximation factor of 2 is possible in O (nk log n (m + n log n)) time for finding the smallest weight k-edge connected subgraph based on al gorithms by <ref> [G91a, FT89, Ed79] </ref>. This improves upon the approximation factor of 3 due to [FJ81] for k = 2. In designing the approximation algorithms we identified the carving and tree-carving of a graph as structures that are useful for establishing lower bounds on the optimal solution. <p> the cheapest directed subgraph H D that has k edge-disjoint paths from a fixed root r to each vertex v ? Gabow [G91a] gives the fastest implementation of a weighted matroid intersection algorithm to solve this problem in O (kn (m + n log n) log n) time. (See also <ref> [Ed79, FT89] </ref>.) To solve our problem (approximation algorithm) take the undirected graph G, and replace each undirected edge (u; v) by two directed edges (u; v) and (v; u) with each edge having weight w (u; v) (the weight of the undirected edge). Call this graph G D .
Reference: [ET76] <author> K. P. Eswaran and R. E. Tarjan, </author> <title> "Augmentation problems," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 5, No. 4, </volume> <pages> pp. 653-665, </pages> <year> (1976). </year>
Reference-contexts: Naor, Gusfield and Martel [NGM90] use a clever extension of the basic DFS approach of <ref> [ET76] </ref> to generalize the technique to work for any k. (Eswaran and Tarjan solved the case of increasing connectivity from 1 to 2 in their seminal paper, where the problem was 2 first introduced.) For the case of vertex connectivity, for k = 2; 3 the best algorithms are due to <p> to generalize the technique to work for any k. (Eswaran and Tarjan solved the case of increasing connectivity from 1 to 2 in their seminal paper, where the problem was 2 first introduced.) For the case of vertex connectivity, for k = 2; 3 the best algorithms are due to <ref> [ET76, RG77, HR91b] </ref> and [HR91a] respectively.
Reference: [FJ81] <author> G. N. Frederickson and J. JaJa, </author> <title> "Approximation algorithms for several graph augmentation problems," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 10, No. 2, </volume> <pages> pp. 270-283, </pages> <year> (1981). </year>
Reference-contexts: This improves upon the approximation factor of 3 due to <ref> [FJ81] </ref> for k = 2. In designing the approximation algorithms we identified the carving and tree-carving of a graph as structures that are useful for establishing lower bounds on the optimal solution. These notions might be of independent interest for understanding graph connectivity issues. <p> For the case k = 1, the problem reduces to that of finding a minimum spanning tree. For k = 2, the problem is N P -hard and a scheme that gave an approximation factor of 3 was given by <ref> [FJ81] </ref> in O (n 2 ) time. <p> The problem is known to be N P -hard [GJ78]. An algorithm that achieves an approximation factor of 3 for k = 2 is implied by <ref> [FJ81] </ref> as follows. Find the minimum spanning tree. Consider the problem of adding the least weight set of edges to add to the tree to obtain a 2-edge connected subgraph. Not surprisingly, this is N P -hard as well [GJ78].
Reference: [FJ82] <author> G. N. Frederickson and J. JaJa, </author> <title> "On the relationship between the biconnectivity augmentation and traveling salesman problems," </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 19, No. 2, </volume> <pages> pp. 189-201, </pages> <year> (1982). </year>
Reference-contexts: O (m + n log n) time by [KT93]. (Actually, the problem solved is of increasing the connectivity of an existing network from 1 to 2, but it can be used for an approximation factor of 3 as well.) There is extensive literature on the k-edge connected spanning subgraph problem <ref> [FJ82, GB93, GMS92, MK89, SWK69] </ref>, for the case where the edge weights satisfy the triangle inequality (and the underlying feasibility graph is a clique), For the case of edge or vertex connectivity when the underlying feasibility graph is a clique (any edge can be added at unit cost), one can solve
Reference: [Fr92] <author> A. Frank, </author> <title> "Augmenting graphs to meet edge-connectivity requirements," </title> <journal> Siam Journal on Discrete Mathematics, </journal> <volume> Vol. 5, No. 1, </volume> <pages> pp. 25-53, </pages> <year> (1992). </year>
Reference-contexts: A more general edge connectivity problem was considered by Frank <ref> [Fr92] </ref> when the feasibility graph is a clique, and shown to be solvable in polynomial time. (Specifically, one is required to find a minimum spanning subgraph where specific connectivity requirements are given for each pair of vertices.) This result has recently been improved by Gabow [G91b].
Reference: [Fr91] <author> G. N. Frederickson, </author> <title> "Ambivalent data structures for dynamic 2-edge connectivity and k smallest spanning trees," </title> <booktitle> 32 nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 632-641, </pages> <year> (1991). </year>
Reference-contexts: Its use as a general technique for parallel graph algorithms came at a later stage. The fact that EDS yields an alternative biconnectivity algorithm is noted in [MR86] as well. (4) Application of Graph Decompositions <ref> [GI91, Fr91] </ref> to dynamic 2-edge and 3-edge connectivity. Improving approximation factors: Considerable attention has been given to improving constant approximation factors.
Reference: [FT89] <author> A. Frank and E. Tardos, </author> <title> "An application of submodular flows," </title> <journal> Linear Algebra and its Applications, </journal> <volume> 114/115, </volume> <pages> pp. 320-348, </pages> <year> (1989). </year>
Reference-contexts: For the case of weighted graphs we observe that an approximation factor of 2 is possible in O (nk log n (m + n log n)) time for finding the smallest weight k-edge connected subgraph based on al gorithms by <ref> [G91a, FT89, Ed79] </ref>. This improves upon the approximation factor of 3 due to [FJ81] for k = 2. In designing the approximation algorithms we identified the carving and tree-carving of a graph as structures that are useful for establishing lower bounds on the optimal solution. <p> the cheapest directed subgraph H D that has k edge-disjoint paths from a fixed root r to each vertex v ? Gabow [G91a] gives the fastest implementation of a weighted matroid intersection algorithm to solve this problem in O (kn (m + n log n) log n) time. (See also <ref> [Ed79, FT89] </ref>.) To solve our problem (approximation algorithm) take the undirected graph G, and replace each undirected edge (u; v) by two directed edges (u; v) and (v; u) with each edge having weight w (u; v) (the weight of the undirected edge). Call this graph G D .
Reference: [G91a] <author> H. N. Gabow, </author> <title> "A matroid approach to finding edge connectivity and packing arborescences," </title> <booktitle> 23 rd Annual Symposium on Theory of Computing, </booktitle> <pages> pp. 112-122, </pages> <year> (1991). </year>
Reference-contexts: For the case of weighted graphs we observe that an approximation factor of 2 is possible in O (nk log n (m + n log n)) time for finding the smallest weight k-edge connected subgraph based on al gorithms by <ref> [G91a, FT89, Ed79] </ref>. This improves upon the approximation factor of 3 due to [FJ81] for k = 2. In designing the approximation algorithms we identified the carving and tree-carving of a graph as structures that are useful for establishing lower bounds on the optimal solution. <p> How does one find the cheapest directed subgraph H D that has k edge-disjoint paths from a fixed root r to each vertex v ? Gabow <ref> [G91a] </ref> gives the fastest implementation of a weighted matroid intersection algorithm to solve this problem in O (kn (m + n log n) log n) time. (See also [Ed79, FT89].) To solve our problem (approximation algorithm) take the undirected graph G, and replace each undirected edge (u; v) by two directed
Reference: [G91b] <author> H. N. Gabow, </author> <title> "Applications of a poset representation to edge connectivity and graph rigidity," </title> <booktitle> 32 nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 812-822, </pages> <year> (1991). </year>
Reference-contexts: For the case of increasing the edge connectivity of an existing network from any to k, when the underlying feasibility graph is a clique (any edge can be added at unit cost), the problem can be solved optimally <ref> [WN87, NGM90, G91b] </ref>. <p> problem was considered by Frank [Fr92] when the feasibility graph is a clique, and shown to be solvable in polynomial time. (Specifically, one is required to find a minimum spanning subgraph where specific connectivity requirements are given for each pair of vertices.) This result has recently been improved by Gabow <ref> [G91b] </ref>.
Reference: [GB93] <author> M. X. Goemans and D. J. Bertsimas, </author> <title> "Survivable networks, linear programming relaxations and the parsimonious property," </title> <journal> Mathematical Programming, </journal> <volume> Vol. 60, No. 2, </volume> <pages> pp. 145-166, </pages> <year> (1993). </year>
Reference-contexts: O (m + n log n) time by [KT93]. (Actually, the problem solved is of increasing the connectivity of an existing network from 1 to 2, but it can be used for an approximation factor of 3 as well.) There is extensive literature on the k-edge connected spanning subgraph problem <ref> [FJ82, GB93, GMS92, MK89, SWK69] </ref>, for the case where the edge weights satisfy the triangle inequality (and the underlying feasibility graph is a clique), For the case of edge or vertex connectivity when the underlying feasibility graph is a clique (any edge can be added at unit cost), one can solve
Reference: [GI91] <author> Z. Galil and G. </author> <title> Italiano, "Fully dynamic algorithms for edge connectivity problems," </title> <booktitle> 23 rd Annual Symposium on Theory of Computing, </booktitle> <pages> pp. 317-327, </pages> <year> (1991). </year>
Reference-contexts: Its use as a general technique for parallel graph algorithms came at a later stage. The fact that EDS yields an alternative biconnectivity algorithm is noted in [MR86] as well. (4) Application of Graph Decompositions <ref> [GI91, Fr91] </ref> to dynamic 2-edge and 3-edge connectivity. Improving approximation factors: Considerable attention has been given to improving constant approximation factors.
Reference: [GJ78] <author> M. R. Garey and D. S. Johnson, </author> <title> "Computers and Intractability: A guide to the theory of N P - completeness", </title> <publisher> Freeman, </publisher> <address> San Francisco (1978). </address>
Reference-contexts: Weighted Graphs Consider the following problem: Given a graph G = (V; E) with weights on the edges, find the smallest weight spanning subgraph H = (V; E H ) that is k edge connected (for any k). The problem is known to be N P -hard <ref> [GJ78] </ref>. An algorithm that achieves an approximation factor of 3 for k = 2 is implied by [FJ81] as follows. Find the minimum spanning tree. Consider the problem of adding the least weight set of edges to add to the tree to obtain a 2-edge connected subgraph. <p> Find the minimum spanning tree. Consider the problem of adding the least weight set of edges to add to the tree to obtain a 2-edge connected subgraph. Not surprisingly, this is N P -hard as well <ref> [GJ78] </ref>.
Reference: [GMS92] <author> M. Groetschel, C. L. Monma and M. Stoer, </author> <title> "Computational results with a cutting plane algorithm for designing communication networks with low-connectivity constraints," </title> <journal> Operations Research, </journal> <volume> Vol. 40, No. 2, </volume> <pages> pp. 309-330, </pages> <year> (1992). </year>
Reference-contexts: O (m + n log n) time by [KT93]. (Actually, the problem solved is of increasing the connectivity of an existing network from 1 to 2, but it can be used for an approximation factor of 3 as well.) There is extensive literature on the k-edge connected spanning subgraph problem <ref> [FJ82, GB93, GMS92, MK89, SWK69] </ref>, for the case where the edge weights satisfy the triangle inequality (and the underlying feasibility graph is a clique), For the case of edge or vertex connectivity when the underlying feasibility graph is a clique (any edge can be added at unit cost), one can solve
Reference: [Ha62] <author> F. Harary, </author> <title> "The maximum connectivity of a graph," </title> <journal> Proc. Nat. Acad. Sci., </journal> <volume> 48, </volume> <pages> pp. 1142-1146, </pages> <year> (1962). </year>
Reference-contexts: edge weights satisfy the triangle inequality (and the underlying feasibility graph is a clique), For the case of edge or vertex connectivity when the underlying feasibility graph is a clique (any edge can be added at unit cost), one can solve the problem of the smallest k-connected spanning subgraph optimally <ref> [Ha62] </ref>. For the case of increasing the edge connectivity of an existing network from any to k, when the underlying feasibility graph is a clique (any edge can be added at unit cost), the problem can be solved optimally [WN87, NGM90, G91b].
Reference: [HKRT92] <author> X. Han, P. Kelsen, V. Ramachandran and R. E. Tarjan, </author> <title> "Computing minimal spanning subgraphs in linear time," </title> <booktitle> 3 rd Annual Symposium on Discrete Algorithms, </booktitle> <pages> pp. 146-156, </pages> <year> (1992). </year> <month> 21 </month>
Reference-contexts: The problem of finding a minimal (not minimum) 2-connected (edge and vertex) spanning subgraph was studied by [KR91] and <ref> [HKRT92] </ref>. (A graph with property P is minimal with respect to property P if it loses property P on deletion of any edge.) The relationship to this paper is that any minimal biconnected graph has at most 2 (n 1) edges, which gives an approximation factor of 2.
Reference: [HR91a] <author> T. S. Hsu and V. Ramachandran, </author> <title> "A linear time algorithm for triconnectivity augmentation," </title> <booktitle> 32 nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 548-559, </pages> <year> (1991). </year>
Reference-contexts: to work for any k. (Eswaran and Tarjan solved the case of increasing connectivity from 1 to 2 in their seminal paper, where the problem was 2 first introduced.) For the case of vertex connectivity, for k = 2; 3 the best algorithms are due to [ET76, RG77, HR91b] and <ref> [HR91a] </ref> respectively.
Reference: [HR91b] <author> T. S. Hsu and V. Ramachandran, </author> <title> "On finding a smallest augmentation to biconnect a graph," </title> <booktitle> 2 nd Annual International Symposium on Algorithms, </booktitle> <publisher> Springer Verlag LNCS 557, </publisher> <pages> pp. 326-335, </pages> <year> (1991). </year>
Reference-contexts: to generalize the technique to work for any k. (Eswaran and Tarjan solved the case of increasing connectivity from 1 to 2 in their seminal paper, where the problem was 2 first introduced.) For the case of vertex connectivity, for k = 2; 3 the best algorithms are due to <ref> [ET76, RG77, HR91b] </ref> and [HR91a] respectively.
Reference: [Jo82] <author> D. S. Johnson, </author> <title> "The NP-completeness column: An ongoing guide," </title> <journal> Journal of Algorithms, </journal> <volume> Vol. 3, </volume> <pages> pp. 288-300, </pages> <year> (1982). </year>
Reference-contexts: The fact that EDS yields an alternative biconnectivity algorithm is noted in [MR86] as well. (4) Application of Graph Decompositions [GI91, Fr91] to dynamic 2-edge and 3-edge connectivity. Improving approximation factors: Considerable attention has been given to improving constant approximation factors. For example, Johnson <ref> [Jo82] </ref> reports a series of 8 papers that give such improvements for bin packing, starting from an approximation factor of 2 down to 1.18333, and recently to (1 + *). For steiner trees, a similar series exists [KMB81, TM80, Ze93, BR92].
Reference: [KMB81] <author> L. Kou, G. Markowsky and L. Berman, </author> <title> "A fast algorithm for steiner trees," </title> <journal> Acta Informatica, </journal> <volume> 15, </volume> <pages> pp. 141-145, </pages> <year> (1981). </year>
Reference-contexts: For example, Johnson [Jo82] reports a series of 8 papers that give such improvements for bin packing, starting from an approximation factor of 2 down to 1.18333, and recently to (1 + *). For steiner trees, a similar series exists <ref> [KMB81, TM80, Ze93, BR92] </ref>. Outline of Paper: Section 2 gives basic definitions related to edge and vertex connectivity. Section 3 describes the algorithm for the edge connectivity case (this section is very simple and gives the flavor of the results and analysis for the vertex case, which is more involved).
Reference: [KR91] <author> P. Kelsen and V. Ramachandran, </author> <title> "On Finding Minimal Two-Connected Subgraphs," </title> <booktitle> 2 nd Annual Symposium on Discrete Algorithms, </booktitle> <pages> pp. 178-187, </pages> <year> (1991). </year>
Reference-contexts: The problem of finding a minimal (not minimum) 2-connected (edge and vertex) spanning subgraph was studied by <ref> [KR91] </ref> and [HKRT92]. (A graph with property P is minimal with respect to property P if it loses property P on deletion of any edge.) The relationship to this paper is that any minimal biconnected graph has at most 2 (n 1) edges, which gives an approximation factor of 2.
Reference: [KT93] <author> S. Khuller and R. Thurimella, </author> <title> "Approximation Algorithms for Graph Augmentation," </title> <journal> Journal of Algorithms, </journal> <volume> Vol. 14, No. 2, </volume> <pages> pp. 214-225, </pages> <year> (1993). </year>
Reference-contexts: This was made simpler and improved to obtain the same approximation factor in O (m + n log n) time by <ref> [KT93] </ref>. (Actually, the problem solved is of increasing the connectivity of an existing network from 1 to 2, but it can be used for an approximation factor of 3 as well.) There is extensive literature on the k-edge connected spanning subgraph problem [FJ82, GB93, GMS92, MK89, SWK69], for the case where
Reference: [MK89] <author> C. L. Monma and C. W. Ko, </author> <title> "Methods for designing survivable communication networks," </title> <booktitle> NATO Advanced Research Workshop, </booktitle> <address> Denmark, </address> <year> (1989). </year>
Reference-contexts: O (m + n log n) time by [KT93]. (Actually, the problem solved is of increasing the connectivity of an existing network from 1 to 2, but it can be used for an approximation factor of 3 as well.) There is extensive literature on the k-edge connected spanning subgraph problem <ref> [FJ82, GB93, GMS92, MK89, SWK69] </ref>, for the case where the edge weights satisfy the triangle inequality (and the underlying feasibility graph is a clique), For the case of edge or vertex connectivity when the underlying feasibility graph is a clique (any edge can be added at unit cost), one can solve
Reference: [MR86] <author> G. Miller and V. Ramachandran, </author> <title> "Efficient parallel ear decomposition with applications," </title> <type> manuscript, </type> <year> (1986). </year>
Reference-contexts: Its use as a general technique for parallel graph algorithms came at a later stage. The fact that EDS yields an alternative biconnectivity algorithm is noted in <ref> [MR86] </ref> as well. (4) Application of Graph Decompositions [GI91, Fr91] to dynamic 2-edge and 3-edge connectivity. Improving approximation factors: Considerable attention has been given to improving constant approximation factors.
Reference: [MSV86] <author> Y. Maon, B. Schieber, and U. Vishkin. </author> <title> "Parallel Ear Decomposition Search (EDS) and st-numbering in graphs," </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 47, </volume> <pages> pp. 277-298, </pages> <year> (1986). </year>
Reference-contexts: Studying biconnectivity properties of graphs has led to a few fundamental graph algorithmic techniques. (1) The power of Depth First Search was illustrated through biconnectivity [Ta72]. (2) The Tree Euler Tour technique for a parallel biconnectivity algorithm [TV85]. (3) The design of the Ear Decomposition Search (EDS) algorithm in <ref> [MSV86] </ref> was originally motivated by extending [Vi85] from a strong orientation algorithm into an alternative biconnectivity algorithm. Its use as a general technique for parallel graph algorithms came at a later stage.
Reference: [NGM90] <author> D. Naor, D. Gusfield and C. Martel, </author> <title> "A fast algorithm for optimally increasing the edge-connectivity," </title> <booktitle> 31 st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 698-707, </pages> <year> (1990). </year>
Reference-contexts: For the case of increasing the edge connectivity of an existing network from any to k, when the underlying feasibility graph is a clique (any edge can be added at unit cost), the problem can be solved optimally <ref> [WN87, NGM90, G91b] </ref>. <p> For the case of increasing the edge connectivity of an existing network from any to k, when the underlying feasibility graph is a clique (any edge can be added at unit cost), the problem can be solved optimally [WN87, NGM90, G91b]. Naor, Gusfield and Martel <ref> [NGM90] </ref> use a clever extension of the basic DFS approach of [ET76] to generalize the technique to work for any k. (Eswaran and Tarjan solved the case of increasing connectivity from 1 to 2 in their seminal paper, where the problem was 2 first introduced.) For the case of vertex connectivity,
Reference: [NI90] <author> H. Nagamochi and T. Ibaraki, </author> <title> "Linear time algorithms for finding a sparse k-connected spanning subgraph of a k-connected graph," </title> <journal> Algorithmica, </journal> <volume> Vol. 7, No. 5/6, </volume> <pages> pp. 583-596, </pages> <year> (1992). </year>
Reference-contexts: This gives a 2-connected spanning subgraph with at most 2n 2 edges, while n is a trivial lower bound on any optimal solution. Other schemes for obtaining approximation factors of 2 follow as simple consequences of <ref> [Wh32, CT91, NI90] </ref>. Related Work: The question of finding minimum cost k-connected spanning subgraphs can be posed in the context of weighted graphs as well. For the case k = 1, the problem reduces to that of finding a minimum spanning tree.
Reference: [RG77] <author> A. Rosenthal and A. Goldner, </author> <title> "Smallest augmentations to biconnect a graph," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 6, No. 1, </volume> <pages> pp. 55-66, </pages> <year> (1977). </year>
Reference-contexts: to generalize the technique to work for any k. (Eswaran and Tarjan solved the case of increasing connectivity from 1 to 2 in their seminal paper, where the problem was 2 first introduced.) For the case of vertex connectivity, for k = 2; 3 the best algorithms are due to <ref> [ET76, RG77, HR91b] </ref> and [HR91a] respectively.
Reference: [SWK69] <author> K. Steiglitz, P. Weiner and D. J. Kleitman, </author> <title> "The design of minimum-cost survivable networks," </title> <journal> IEEE Transactions on Circuit Theory, CT-16, </journal> <volume> 4, </volume> <pages> pp. 455-460, </pages> <year> (1969). </year>
Reference-contexts: O (m + n log n) time by [KT93]. (Actually, the problem solved is of increasing the connectivity of an existing network from 1 to 2, but it can be used for an approximation factor of 3 as well.) There is extensive literature on the k-edge connected spanning subgraph problem <ref> [FJ82, GB93, GMS92, MK89, SWK69] </ref>, for the case where the edge weights satisfy the triangle inequality (and the underlying feasibility graph is a clique), For the case of edge or vertex connectivity when the underlying feasibility graph is a clique (any edge can be added at unit cost), one can solve
Reference: [Ta72] <author> R. E. Tarjan, </author> <title> "Depth-first search and linear graph algorithms," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 1, No. 4, </volume> <pages> pp. 146-159, </pages> <year> (1972). </year>
Reference-contexts: Studying biconnectivity properties of graphs has led to a few fundamental graph algorithmic techniques. (1) The power of Depth First Search was illustrated through biconnectivity <ref> [Ta72] </ref>. (2) The Tree Euler Tour technique for a parallel biconnectivity algorithm [TV85]. (3) The design of the Ear Decomposition Search (EDS) algorithm in [MSV86] was originally motivated by extending [Vi85] from a strong orientation algorithm into an alternative biconnectivity algorithm.
Reference: [TM80] <author> H. Takahashi and A. </author> <title> Matsuyama, "An approximate solution for the steiner tree problem in graphs," </title> <journal> Math. Japonica, </journal> <volume> 24, </volume> <pages> pp. 573-577, </pages> <year> (1980). </year>
Reference-contexts: For example, Johnson [Jo82] reports a series of 8 papers that give such improvements for bin packing, starting from an approximation factor of 2 down to 1.18333, and recently to (1 + *). For steiner trees, a similar series exists <ref> [KMB81, TM80, Ze93, BR92] </ref>. Outline of Paper: Section 2 gives basic definitions related to edge and vertex connectivity. Section 3 describes the algorithm for the edge connectivity case (this section is very simple and gives the flavor of the results and analysis for the vertex case, which is more involved).
Reference: [TV85] <author> R. E. Tarjan and U. Vishkin, </author> <title> "An efficient parallel biconnectivity algorithm," </title> <journal> SIAM Journal on Computing, </journal> <volume> 14, </volume> <pages> pp. 862-874, </pages> <year> (1985). </year>
Reference-contexts: Studying biconnectivity properties of graphs has led to a few fundamental graph algorithmic techniques. (1) The power of Depth First Search was illustrated through biconnectivity [Ta72]. (2) The Tree Euler Tour technique for a parallel biconnectivity algorithm <ref> [TV85] </ref>. (3) The design of the Ear Decomposition Search (EDS) algorithm in [MSV86] was originally motivated by extending [Vi85] from a strong orientation algorithm into an alternative biconnectivity algorithm. Its use as a general technique for parallel graph algorithms came at a later stage.
Reference: [Vi85] <author> U. Vishkin, </author> <title> "On efficient parallel strong orientation," </title> <journal> Information Processing Letters, </journal> <volume> Vol. 20, </volume> <pages> pp. 235-240, </pages> <year> (1985). </year>
Reference-contexts: has led to a few fundamental graph algorithmic techniques. (1) The power of Depth First Search was illustrated through biconnectivity [Ta72]. (2) The Tree Euler Tour technique for a parallel biconnectivity algorithm [TV85]. (3) The design of the Ear Decomposition Search (EDS) algorithm in [MSV86] was originally motivated by extending <ref> [Vi85] </ref> from a strong orientation algorithm into an alternative biconnectivity algorithm. Its use as a general technique for parallel graph algorithms came at a later stage.
Reference: [Wh32] <author> H. Whitney, </author> <title> "Non-separable and planar graphs," </title> <journal> Trans. Amer. Math Soc., </journal> <volume> 34, </volume> <pages> pp. 339-362, </pages> <year> (1932). </year>
Reference-contexts: This gives a 2-connected spanning subgraph with at most 2n 2 edges, while n is a trivial lower bound on any optimal solution. Other schemes for obtaining approximation factors of 2 follow as simple consequences of <ref> [Wh32, CT91, NI90] </ref>. Related Work: The question of finding minimum cost k-connected spanning subgraphs can be posed in the context of weighted graphs as well. For the case k = 1, the problem reduces to that of finding a minimum spanning tree.
Reference: [WN87] <author> T. Watanabe and A. Nakamura, </author> <title> "Edge-connectivity augmentation problems," </title> <journal> J. of Comp. and Sys. Sciences, </journal> <volume> 35 (1), </volume> <pages> pp. 96-144, </pages> <year> (1987). </year>
Reference-contexts: For the case of increasing the edge connectivity of an existing network from any to k, when the underlying feasibility graph is a clique (any edge can be added at unit cost), the problem can be solved optimally <ref> [WN87, NGM90, G91b] </ref>.
Reference: [Ze93] <author> A. Zelikovsky, </author> <title> "An 11/6-approximation algorithm for the network steiner problem," </title> <journal> Algorithmica, </journal> <volume> Vol. 9, No. 5, </volume> <pages> pp. 463-470, </pages> <year> (1993). </year> <month> 23 </month>
Reference-contexts: For example, Johnson [Jo82] reports a series of 8 papers that give such improvements for bin packing, starting from an approximation factor of 2 down to 1.18333, and recently to (1 + *). For steiner trees, a similar series exists <ref> [KMB81, TM80, Ze93, BR92] </ref>. Outline of Paper: Section 2 gives basic definitions related to edge and vertex connectivity. Section 3 describes the algorithm for the edge connectivity case (this section is very simple and gives the flavor of the results and analysis for the vertex case, which is more involved).
References-found: 37

