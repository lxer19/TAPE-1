URL: http://www.cs.tamu.edu/research/robotics/Wolter/papers/enum.ps
Refering-URL: http://www.cs.tamu.edu/research/robotics/Wolter/papers.html
Root-URL: http://www.cs.tamu.edu
Title: A Combinatorial Analysis of Enumerative Data Structures for Assembly Planning  
Author: Jan D. Wolter 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science Texas A&M University  
Abstract: An assembly planner is a program designed to generate high-level plans for the manufacture of mechanical assemblies. At this time several experimental assembly planning systems have been developed. However each has defined the problem differently, using different definitions of an assembly plan and applying different restrictions to the planning process. This report surveys, analyzes and evaluates several key aspects of assembly planning systems. First the most common restrictions applied to assembly plans are defined and discussed. These include sequentiality, monotonicity, and coherence. Next, three distinct definitions of what constitutes an assembly plan are described and compared. Finally, several enumerative data structures designed to represent large sets of assembly plans are described. The limitations of each structure are discussed and exact upper bounds on their size under a variety of coherence constraints are computed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. D. Wolter, </author> <title> "On the automatic generation of assembly plans," </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 62-68, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: For example, we might say the partial assembly fA; B; Cg can be built from the partial assemblies fA; Bg and fCg or from fAg and fB; Cg. Some systems operate wholely with constraint-based representations <ref> [1] </ref>, some operate wholely on enumerative representations [2], while others use both [3]. This paper will study enumerative data structures in detail. It will begin with a brief survey of enumerative data structures, including three based on state sequences and three based on partial assembly trees.
Reference: [2] <author> L. S. Homem de Mello and A. C. Sanderson, </author> <title> "A correct and complete algorithm for the generation of mechanical assembly sequences," </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 56-61, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: For example, we might say the partial assembly fA; B; Cg can be built from the partial assemblies fA; Bg and fCg or from fAg and fB; Cg. Some systems operate wholely with constraint-based representations [1], some operate wholely on enumerative representations <ref> [2] </ref>, while others use both [3]. This paper will study enumerative data structures in detail. It will begin with a brief survey of enumerative data structures, including three based on state sequences and three based on partial assembly trees. <p> A contact graph has an 3 graph. edge connecting the vertices for any two parts that touch each other in the goal assembly. Contact graphs were first used by Jentsch and Kaden [6]. Similar structures have since been used by a variety of authors <ref> [7, 2, 8] </ref>. Bourjault and De Fazio and Whitney [3, 9] use a user generated "liaison graph" which can be seen as a generalization of a contact graph that may contain some non-contact edges. <p> So the recurrence is: N fl AOT (n 1)) if n &gt; 1 These last three expressions solve to the formulas given in the theorem. 2 15 Star-coherent Plans constraint. 5.2 AND/OR Graph Representation Homem de Mello and Sanderson <ref> [2] </ref> have described an AND/OR graph representation which holds the same relationship to AND/OR trees as state lattices hold to state trees. By introducing an assumption of history independence, it becomes possible to merge all instances of the same partial assembly into a single node.
Reference: [3] <author> T. L. De Fazio and D. E. Whitney, </author> <title> "Simplified generation of all mechanical assembly sequences," </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> vol. RA-3, no. 6, </volume> <pages> pp. 640-658, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: For example, we might say the partial assembly fA; B; Cg can be built from the partial assemblies fA; Bg and fCg or from fAg and fB; Cg. Some systems operate wholely with constraint-based representations [1], some operate wholely on enumerative representations [2], while others use both <ref> [3] </ref>. This paper will study enumerative data structures in detail. It will begin with a brief survey of enumerative data structures, including three based on state sequences and three based on partial assembly trees. <p> Contact graphs were first used by Jentsch and Kaden [6]. Similar structures have since been used by a variety of authors [7, 2, 8]. Bourjault and De Fazio and Whitney <ref> [3, 9] </ref> use a user generated "liaison graph" which can be seen as a generalization of a contact graph that may contain some non-contact edges. If G is a contact graph, plans which are coherent for G will be called contact coherent. <p> They start at the top with all parts separate, and end at the bottom all combined. The five transitions in the state sequence correspond to the five operations in the tree. This model of an assembly plan has been used by, among others, DeFazio and Whitney <ref> [3, 9] </ref> and Huang and Lee [13]. Normally when two sets of parts are mated, one set is moved while the other is held in place. <p> In this section two other, more compact, representations for sets of state sequences will be considered: state trees and state lattices. 4.1 State Trees Bourjault represented sets of plans by merging them into a single tree <ref> [3] </ref>. The root of his tree was the initial state, in which all parts are separate. Each state would have children corresponding to the states that could be reached from there. <p> join operations that can be applied to a set of n separate parts, there are O (2 n ) ways to split an assembly of n parts, so the branching factors are typically larger in inverted state trees. 4.2 State Lattices DeFazio and Whitney introduced several improvements on Bourjault's methods <ref> [3, 9] </ref>. One of these was to replace Bourjault's state trees with a more compact structure they called a "directed graph," but which we will give the more descriptive name of state lattice. In a state lattice only one copy of each possible state is kept.
Reference: [4] <author> U. Roy, P. Bannerjee, and C. R. Liu, </author> <title> "Design of an automated assembly environment," </title> <booktitle> Computer-Aided Design, </booktitle> <volume> vol. 21, no. 9, </volume> <pages> pp. 561-569, </pages> <month> Nov </month> <year> 1989. </year> <month> 19 </month>
Reference-contexts: Such plans, which could never be executed by a one-handed robot, are called nonsequential. Little research has been done on nonsequential assembly planning, though simple cases can be handled by treating the whole thing as one complex operation involving more than two parts <ref> [4] </ref>.
Reference: [5] <author> R. L. Hoffman, </author> <title> "Assembly planning for CSG objects," </title> <type> Technical Report 8916, </type> <institution> Automation Sciences Lab, Northrop Research and Technology Center, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: Generating non-monotone plans is challenging because of the difficulty of finding appropriate temporary positions for parts. Only Hoffman's assembly planning system has significant capabilities in this respect <ref> [5] </ref>. If only monotone plans are considered, then it becomes possible to characterize an assembly state by identifying those sets of parts already in their goal positions relative to each other.
Reference: [6] <author> W. Jentsch and F. Kaden, </author> <title> "Automatic generation of assembly sequence," </title> <booktitle> In Artificial Intelligence and Information-Control Systems of Robots, </booktitle> <editor> I. Plander, </editor> <booktitle> editor, </booktitle> <pages> pp. 197-200, </pages> <publisher> Elsevier Science Publishers, North-Holland, </publisher> <year> 1984. </year>
Reference-contexts: The most commonly used form of coherence graph is a contact graph. A contact graph has an 3 graph. edge connecting the vertices for any two parts that touch each other in the goal assembly. Contact graphs were first used by Jentsch and Kaden <ref> [6] </ref>. Similar structures have since been used by a variety of authors [7, 2, 8]. Bourjault and De Fazio and Whitney [3, 9] use a user generated "liaison graph" which can be seen as a generalization of a contact graph that may contain some non-contact edges.
Reference: [7] <author> L. De Floriani and G. Nagy, </author> <title> "A graph model for face-to-face assembly," </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 75-78, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: A contact graph has an 3 graph. edge connecting the vertices for any two parts that touch each other in the goal assembly. Contact graphs were first used by Jentsch and Kaden [6]. Similar structures have since been used by a variety of authors <ref> [7, 2, 8] </ref>. Bourjault and De Fazio and Whitney [3, 9] use a user generated "liaison graph" which can be seen as a generalization of a contact graph that may contain some non-contact edges.
Reference: [8] <author> Y. F. Huang and C. S. G. Lee, </author> <title> "Precedence knowledge in feature mating operation assembly planning," </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 216-221, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: A contact graph has an 3 graph. edge connecting the vertices for any two parts that touch each other in the goal assembly. Contact graphs were first used by Jentsch and Kaden [6]. Similar structures have since been used by a variety of authors <ref> [7, 2, 8] </ref>. Bourjault and De Fazio and Whitney [3, 9] use a user generated "liaison graph" which can be seen as a generalization of a contact graph that may contain some non-contact edges.
Reference: [9] <author> T. L. De Fazio and D. E. Whitney, </author> <title> "Correction to "simplified generation of all mechanical assembly sequences"," </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> vol. RA-4, no. 6, </volume> <pages> pp. 705-708, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Contact graphs were first used by Jentsch and Kaden [6]. Similar structures have since been used by a variety of authors [7, 2, 8]. Bourjault and De Fazio and Whitney <ref> [3, 9] </ref> use a user generated "liaison graph" which can be seen as a generalization of a contact graph that may contain some non-contact edges. If G is a contact graph, plans which are coherent for G will be called contact coherent. <p> They start at the top with all parts separate, and end at the bottom all combined. The five transitions in the state sequence correspond to the five operations in the tree. This model of an assembly plan has been used by, among others, DeFazio and Whitney <ref> [3, 9] </ref> and Huang and Lee [13]. Normally when two sets of parts are mated, one set is moved while the other is held in place. <p> join operations that can be applied to a set of n separate parts, there are O (2 n ) ways to split an assembly of n parts, so the branching factors are typically larger in inverted state trees. 4.2 State Lattices DeFazio and Whitney introduced several improvements on Bourjault's methods <ref> [3, 9] </ref>. One of these was to replace Bourjault's state trees with a more compact structure they called a "directed graph," but which we will give the more descriptive name of state lattice. In a state lattice only one copy of each possible state is kept.
Reference: [10] <author> L. Homem de Mello, </author> <title> Task Sequence Planning for Robotic Assembly, </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, Electrical and Computer Engineering Dept, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: This is the type of plan generated by Homem de Mello and Sanderson's system <ref> [10, 11, 12] </ref>. These plans can be depicted as a binary tree, such as the one shown in figure 5a.
Reference: [11] <author> A. C. Sanderson, L. S. Homem de Mello, and H. Zhang, </author> <title> "Assembly sequence planning," </title> <journal> AI Magazine, </journal> <volume> vol. 11, no. 1, </volume> <pages> pp. 62-81, </pages> <month> Spring </month> <year> 1990. </year>
Reference-contexts: This is the type of plan generated by Homem de Mello and Sanderson's system <ref> [10, 11, 12] </ref>. These plans can be depicted as a binary tree, such as the one shown in figure 5a.
Reference: [12] <author> L. Homem de Mello and A. Sanderson, </author> <title> "A correct and complete algorithm for the generations of mechanical assembly sequences," </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> vol. 7, no. 2, </volume> <pages> pp. 228-240, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: This is the type of plan generated by Homem de Mello and Sanderson's system <ref> [10, 11, 12] </ref>. These plans can be depicted as a binary tree, such as the one shown in figure 5a.
Reference: [13] <author> Y. F. Huang and C. S. G. Lee, </author> <title> "A framework of knowledge-based assembly planning," </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 599-604, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The five transitions in the state sequence correspond to the five operations in the tree. This model of an assembly plan has been used by, among others, DeFazio and Whitney [3, 9] and Huang and Lee <ref> [13] </ref>. Normally when two sets of parts are mated, one set is moved while the other is held in place.
Reference: [14] <author> J. D. Wolter, </author> <title> "A constraint-based approach to planning with subassemblies," </title> <booktitle> In IEEE Intl. Conf. on Systems Engineering, </booktitle> <pages> pp. 412-415, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: These types of plans are more usually drawn as shown on the right of figure 5d and are called subassembly trees. Plans of this type have been discussed by Wolter <ref> [14, 15] </ref>. Obviously other possible combinations of information are possible. For example, Hoffman generates plans with ordering and insertion information, but without fixturing information (that is he does not include non-assembly operations which move a set of parts from one fixture to another in his plans)[16, 17].
Reference: [15] <author> J. D. Wolter, </author> <title> "Representing subassembly trees by deepest common ancestor relations," </title> <type> Technical Report 90-009, </type> <institution> Texas A&M University, Computer Science Dept., </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: These types of plans are more usually drawn as shown on the right of figure 5d and are called subassembly trees. Plans of this type have been discussed by Wolter <ref> [14, 15] </ref>. Obviously other possible combinations of information are possible. For example, Hoffman generates plans with ordering and insertion information, but without fixturing information (that is he does not include non-assembly operations which move a set of parts from one fixture to another in his plans)[16, 17].
Reference: [16] <author> J. M. Miller and R. L. Hoffman, </author> <title> "Automatic assembly planning with fasteners," </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 69-74, </pages> <month> May </month> <year> 1989. </year>
Reference: [17] <author> R. L. Hoffman, </author> <title> "Automated assembly in a CSG domain," </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 210-215, </pages> <month> May </month> <year> 1989. </year>
Reference: [18] <author> R. L. Graham, D. E. Knuth, and O. Patashnik, </author> <title> Concrete Mathmatics, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: The first operation may cut the graph at any of n 1 places. Thus, the maximum number of line-coherent plans is given by the following recurrence, which is the recurrence for the Catalan numbers <ref> [18] </ref>, and solves to the formula given above: P 8 &gt; : k=1 P AT (n k)P 1 if n = 1 Building a ring-coherent structure is just like building one of the n line-coherent structures that are formed by cutting the ring on one of its edges.
Reference: [19] <author> L. S. Homem de Mello and A. C. Sanderson, </author> <title> "Automatic generation of mechanical assembly sequences," </title> <type> Technical Report CMU-RI-TR-88-19, </type> <institution> Carnegie Mellon University, Robotics Institute, </institution> <month> December </month> <year> 1988. </year> <month> 20 </month>
Reference-contexts: + n) C 6 (n 3 n) AOG (n) = n 2 n + 1 C ffi 2 (n 3 2n 2 + n) AOG (n) = 2 n1 + n 1 C fl Proof: The non-coherent and line-coherent formula have been derived by Homem de Mello and Sander son <ref> [19] </ref>. State Lattices SL (n) = SL (n) for all n. In the star-coherent case, there are 2 n1 possible partial assemblies including the center part and n 1 singleton sets not containing the center part. Thus, N fl AOG (n) = 2 n1 + n 1.
References-found: 19

