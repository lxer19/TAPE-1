URL: http://www.ecsl.cs.sunysb.edu/~prashant/intvl.ps
Refering-URL: http://www.cs.sunysb.edu/~prashant/
Root-URL: http://www.cs.sunysb.edu
Title: Efficient Incremental Coloring of Interval Graphs  
Author: Prashant Pradhan 
Note: CSE 648 Advanced Algorithms Project  
Abstract: This work addresses the problem of incrementally coloring interval graphs [1]. The motivation behind the problem comes from finding and maintaining minimum track layouts of a set of DNA segments as segments are added to and deleted from the set. The problem reduces to min-coloring of interval graphs. Thus, we seek to efficiently maintain the min coloring of an interval graph as intervals are added and deleted. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Martin Charles Golumbic, </author> <title> "Algorithmic Graph Theory and Perfect Graphs", </title> <publisher> Academic Press. </publisher>
Reference-contexts: Then, the minimum track layout is obtained by min coloring the graph where each color represents a track and all vertices with the same color are assigned to the track represented by that color. As shown in <ref> [1] </ref>, interval graphs belong to the class of triangulated graphs, that can be colored in linear time (O (jV j + jEj)). Our task is to come up with an incremental algorithm to maintain the min coloring under addition and deletion of intervals.
Reference: [2] <author> Robert Endre Tarjan, </author> <title> "Data Structures and Network Algorithms", </title> <booktitle> CBMS-NSF Regional Conference Series in Applied Mathematics. </booktitle>
Reference-contexts: If we update this information for every interval in every move, it could take O (N ) time. To circumvent this, we represent the intervals on a track as a tree instead of a linked list, where the tree supports the operations of cutting off and joining subtrees efficiently. <ref> [2] </ref> proposes the data structures needed to support linking and cutting operations on trees that take amortized O (logN ) time using primitive operations on paths. <p> Paths are ordered lists of vertices which are kept as balanced trees and cuts and joins on trees are realized using cut, join and expose <ref> [2] </ref> operations on these paths. We still don't keep the identity of a track on each node but membership of a track (i.e. in the correspondig tree) can be figured out in time O (logN ).
Reference: [3] <author> Franco P. Preparata, Michael Ian Shamos, </author> <title> "Computational Geometry : An Introduction", </title> <note> Springer-Verlag Texts and Monographs in Computer Science . 7 </note>
Reference-contexts: Each step requires the same query operations on the data structures as in the case of insert. If a track becomes empty in the process, it is deallocated and correponds to one less color being required in the min coloring. 5 Data Structures and Complexity An Interval Tree <ref> [3] </ref> is a data structure that supports efficient queries of the form "find all intervals intersecting the line x = x 0 ", given a set of intervals in the x-y plane (We may disregard the y coordinate and consider queries on horizontal intervals using infinite lines parallel to the y-axis).
References-found: 3

