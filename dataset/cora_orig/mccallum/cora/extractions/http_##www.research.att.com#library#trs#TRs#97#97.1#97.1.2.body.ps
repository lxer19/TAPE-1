URL: http://www.research.att.com/library/trs/TRs/97/97.1/97.1.2.body.ps
Refering-URL: http://www.research.att.com/library/trs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: jf@research.att.com  kannan@central.cis.upenn.edu maheshv@gradient.cis.upenn.edu  vardi@cs.rice.edu  
Phone: 2  3  
Title: Complexity of Problems on Graphs Represented as OBDDs  
Author: J. Feigenbaum, S. Kannan, M. Y. Vardi, M. Viswanathan 
Address: Room C203, 180 Park Avenue Florham Park, NJ 07932 USA  Philadelphia, PA 19104 USA  Houston, TX 77251 USA  
Affiliation: 1 AT&T Labs Research  Computer and Information Sciences University of Pennsylvania  Computer Science Rice University  
Abstract: To analyze the complexity of decision problems on graphs, one normally assumes that the input size is polynomial in the number of vertices. Galperin and Wigderson [13] and, later, Papadimitriou and Yannakakis [18] investigated the complexity of these problems when the input graph is represented by a polylogarithmically succinct circuit. They showed that, under such a representation, certain trivial problems become intractable and that, in general, there is an exponential blow up in problem complexity. In this paper, we show that, when the input graph is represented by a small ordered binary decision diagram (OBDD), there is an exponential blow up in the complexity of most graph problems. In particular, we show that the GAP and AGAP problems become complete for PSPACE and EXP, respectively, when the graphs are succinctly represented by OBDDs. ? An extended abstract of this paper appears in the Proceedings of the 1998 Sympo sium on Theoretical Aspects of Computer Science. ?? Work done in part as a consultant to AT&T and supported in part by NSF grant CCR96-19910 and ONR Grant N00014-97-1-0505. ? ? ? Work done as a visitor to DIMACS and Bell Laboratories as part of the DIMACS Special Year on Logic and Algorithms and supported in part by NSF grants CCR 9628400 and CCR-9700061 and by a grant from the Intel Corporation. y Supported by grants NSF CCR-9415346, NSF CCR-9619910, AFOSR F49620-95-1 0508, ARO DAAH04-95-1-0092, and ONR Grant N00014-97-1-0505. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. L. Balcazar, </author> <title> The Complexity of Searching Implicit Graphs, </title> <booktitle> Aritificial Intelligence, 86 (1996), </booktitle> <pages> pp. 171-188. </pages>
Reference: 2. <author> J. L. Balcazar and A. Lozano, </author> <title> The complexity of graph problems for succinctly represented graphs, </title> <booktitle> in Proc. Graph-Theoretic Concepts in Computer Science, Springer-Verlag, Lecture Notes in Computer Science 411, </booktitle> <year> 1989, </year> <pages> pp. 277-285. </pages>
Reference: 3. <author> J. L. Balcazar, A. Lozano, and J. Toran, </author> <title> The complexity of Algorithmic Problems on Succinct Instances, </title> <editor> Computer Science (R. Baeza-Yates and U. Manber, Eds.), </editor> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1992, </year> <pages> pp. 351-377. </pages>
Reference: 4. <author> I. Beer, S. Ben-David, D. Geist, R. Gewirtzman, and M. Yoeli, </author> <title> Methodology and system for practical formal verification of reactive hardware, </title> <booktitle> in Proc. 6th Int'l Conf. on Computer-Aided Verification, Springer-Verlag, Lecture Notes in Computer Science 818, </booktitle> <year> 1994, </year> <pages> pp. 182-193. </pages>
Reference-contexts: Because of their favorable algorithmic properties, they are widely used in the areas of digital design, verification, and testing [8,9,17]. Experience has shown that OBDD-based algorithmic techniques scale up to industrial-sized designs [10], and tools based on such techniques are gaining acceptance in industry <ref> [4] </ref>.
Reference: 5. <author> C. L. Berman, </author> <title> Ordered Binary Decision Diagrams and Circuit Structure, </title> <booktitle> in Proc. IEEE International Conf. on Computer Design, </booktitle> <year> 1989, </year> <pages> pp. 392-395., </pages>
Reference-contexts: Similarly, the reverse width of the circuit under order L, denoted by w r , is the maximum, over all gates g, of the reverse cross section at g. Theorem 9 (Berman <ref> [5] </ref>). For a circuit and gate-ordering with w r = 0, there exists a variable ordering such that the OBDD size is bounded by n2 w f , where n is the number of inputs to the circuit.
Reference: 6. <author> R. Brayton, A. Emerson, and J. Feigenbaum, </author> <title> Workshop Summary: Computational and Complexity Issues in Automated Verification, </title> <type> DIMACS Technical Report 96-15, </type> <institution> Rutgers University, </institution> <address> Piscataway NJ, </address> <month> June </month> <year> 1996. </year>
Reference: 7. <author> R. Bryant, </author> <title> Graph-Based Algorithms for Boolean Function Manipulation, </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35 (1986), </volume> <pages> pp. 677-691. </pages>
Reference-contexts: canonical succinct representations in many practical situations, they are exponentially less powerful than Boolean circuits in the formal sense that there are Boolean functions that have polynomial-sized circuit representations but do not have subexponential-sized OBDD representations [19,20]. (On the other hand, the translation from OBDDs to Boolean circuits is linear <ref> [7] </ref>.) Thus, the results of [2,3,13,18,22-24] do not apply to OBDD-represented graphs. Furthermore, even though Boolean formulae are, in terms of representation size, less powerful than circuits, they are still more succinct than OBDDs. <p> Indeed, while the satisfiability problem is NP-complete for Boolean formulae, it is in nondeterministic logspace for OBDDs <ref> [7] </ref>. Therefore, the results in [23,24] do not apply to our case. In this paper, we show that, despite these theoretical limitations on the power of OBDDs to encode inputs succinctly, using them to represent graphs nonetheless causes an exponential blow-up in problem complexity. <p> An OBDD O represents the graph G = (V; E) if O represents the Boolean function adj, where adj (v 1 ; v 2 ) = 1 if and only if &lt; v 1 ; v 2 &gt;2 E 0 otherwise Theorem 5 (Bryant <ref> [7] </ref>). For each Boolean function f and ordering (X; &lt;) of the set of variables X, there is a unique (up to isomorphism) OBDD over (X; &lt;) that represents f . Theorem 6 (Bryant [7]). Let F and G be OBDDs over (X; &lt;) representing functions f and g, respectively. <p> and only if &lt; v 1 ; v 2 &gt;2 E 0 otherwise Theorem 5 (Bryant <ref> [7] </ref>). For each Boolean function f and ordering (X; &lt;) of the set of variables X, there is a unique (up to isomorphism) OBDD over (X; &lt;) that represents f . Theorem 6 (Bryant [7]). Let F and G be OBDDs over (X; &lt;) representing functions f and g, respectively. Let the size of F be m, the size of G be n, and &lt; op &gt; be any Boolean operation.
Reference: 8. <author> R. Bryant, </author> <title> Symbolic Manipulation with Ordered Binary Decision Diagrams, </title> <journal> ACM Computing Surveys, </journal> <volume> 24 (1992), </volume> <pages> pp. 293-318. </pages>
Reference: 9. <author> J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. J. Hwang, </author> <title> Symbolic model checking: 10 20 states and beyond, </title> <journal> Information and Computation, </journal> <volume> 98 (1992), </volume> <pages> pp. 142-170. </pages>
Reference: 10. <author> E. M. Clarke, O. Grumberg, H. Hiraishi, S. Jha, D. E. Long, K. L. McMillan, and L. A. Ness, </author> <title> Verification of the Futurebus+ Cache Coherence Protocol, Formal Methods in System Design, </title> <booktitle> 6 (1995), </booktitle> <pages> pp. 217-232. </pages>
Reference-contexts: OBDDs are special kinds of rooted, directed acyclic graphs that are used to represent Boolean circuits. Because of their favorable algorithmic properties, they are widely used in the areas of digital design, verification, and testing [8,9,17]. Experience has shown that OBDD-based algorithmic techniques scale up to industrial-sized designs <ref> [10] </ref>, and tools based on such techniques are gaining acceptance in industry [4].
Reference: 11. <author> T. Cormen, C. Leiserson, and R. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The M.I.T. Press, </publisher> <address> Cambridge, MA (1989). </address>
Reference-contexts: 1 Introduction The efficiency of algorithms is generally measured as a function of input size <ref> [11] </ref>. In analyses of graph-theoretic algorithms, graphs are usually assumed to be represented either by adjacency matrices or by adjacency lists. However, many problem domains, most notably computer-aided verification [7,9,16], involve extremely large graphs that have regular, repetitive structure.
Reference: 12. <author> E. A. Emerson and C. L. Lei, </author> <title> Efficient Model Checking in Fragments of the Propo--sitional mu-Calculus, </title> <booktitle> Proc. 1st IEEE Symp. on Logic in Computer Science, </booktitle> <year> 1986, </year> <pages> pp. 267-278. </pages>
Reference: 13. <author> H. Galperin and A. Wigderson, </author> <title> Succinct Representations of Graphs, </title> <journal> Information and Control, </journal> <volume> 56 (1983), </volume> <pages> pp. 183-198. </pages>
Reference-contexts: This regularity can yield very succinct encodings of the input graphs, and hence one expects a change in the time- or space-complexity of the graph problems. The effect of succinct input representations on the complexity of graph problems was first formalized and studied by Galperin and Wigderson <ref> [13] </ref>. They discovered that, when adjacency matrices are represented by polylogarithmically-sized circuits, many computationally tractable problems become intractable. Pa-padimitriou and Yannakakis [18] later showed that such representations generally have the effect of exponentiating the complexity (time or space) of graph problems.
Reference: 14. <author> O. Kupferman and M. Y. Vardi, </author> <title> Module checking, </title> <booktitle> Proc. 8th Int'l. Conf. on Computer-Aided Verification, Springer-Verlag, Lecture Notes in Computer Science 1102, </booktitle> <year> 1996, </year> <pages> pp. 75-86. </pages>
Reference: 15. <author> R. Kurshan, </author> <title> Computer-Aided Verification of Coordinating Processes: The Automata-Theoretic Approach, </title> <publisher> Princeton University Press, </publisher> <address> Princeton NJ, </address> <year> 1994. </year>
Reference: 16. <author> R. Kurshan, </author> <title> The Complexity of Verification, </title> <booktitle> Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <address> Montreal, </address> <year> 1994, </year> <pages> pp. 365-371. </pages>
Reference: 17. <author> K. McMillan, </author> <title> Symbolic Model Checking, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Amster-dam, </address> <year> 1993. </year>
Reference: 18. <author> C. Papadimitriou and M. Yannakakis, </author> <title> A Note on Succinct Representations of Graphs, </title> <journal> Information and Control, </journal> <volume> 71 (1986), </volume> <pages> pp. 181-185. </pages>
Reference-contexts: The effect of succinct input representations on the complexity of graph problems was first formalized and studied by Galperin and Wigderson [13]. They discovered that, when adjacency matrices are represented by polylogarithmically-sized circuits, many computationally tractable problems become intractable. Pa-padimitriou and Yannakakis <ref> [18] </ref> later showed that such representations generally have the effect of exponentiating the complexity (time or space) of graph problems. <p> For an n-bit number x, we will refer to the i th bit by x (i) , where x (n) is the most significant bit. 3 Problem Statement Papadimitriou and Yannakakis <ref> [18] </ref> show that any NP-complete graph property to which satisfiability is reducible by a projection, in the sense of Skyum and Valiant [21], becomes NEXP-complete when problem instances are encoded as circuits. <p> Hence, the INDEPENDENT SET problem for graphs represented by OBDDs is NEXP-complete. Papadimitriou and Yannakakis <ref> [18] </ref> prove the general theorem that, if the reduction from SAT to an NP-complete problem is a projection, then becomes NEXP-complete when the input is represented by a circuit. The fact that the reduction is a projection is a sufficient condition for their result, but it appears far from necessary.
Reference: 19. <author> S. Ponzio, </author> <title> A lower bound for integer multiplication with read-once branching programs, </title> <booktitle> Proc. 27th ACM Symp. on Theory of Computation, </booktitle> <address> Las Vegas, </address> <year> 1995, </year> <pages> pp. 130-139. </pages>
Reference: 20. <author> S. Ponzio, </author> <title> Restricted Branching Programs and Hardware Verification, </title> <type> PhD Thesis, </type> <institution> MIT, </institution> <year> 1995. </year>
Reference: 21. <author> S. Skyum and L. Valiant, </author> <title> A Complexity Theory Based on Boolean Algebra, </title> <booktitle> in Proc. 23rd IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1982, </year> <pages> pp. 244-253. </pages>
Reference-contexts: number x, we will refer to the i th bit by x (i) , where x (n) is the most significant bit. 3 Problem Statement Papadimitriou and Yannakakis [18] show that any NP-complete graph property to which satisfiability is reducible by a projection, in the sense of Skyum and Valiant <ref> [21] </ref>, becomes NEXP-complete when problem instances are encoded as circuits.
Reference: 22. <author> J. Toran, </author> <title> Succinct representations of counting problems, </title> <booktitle> Proc. 6th International Conf. on Applied Algebra, Algebraic Algorithms, and Error-Correcting Codes, Springer-Verlag, Lecture Notes in Computer Science 357, </booktitle> <year> 1988, </year> <pages> pp. 415-426. </pages>
Reference: 23. <author> H. Veith, </author> <title> Languages Represented by Boolean Formulas, </title> <type> TU Vienna, TR CD 85/95, </type> <year> 1995. </year>
Reference: 24. <author> H. Veith, </author> <title> Succinct Representation, Leaf Languages, and Projection Reductions, </title> <booktitle> in Proc. 11th IEEE Conf. on Computational Complexity, </booktitle> <year> 1996, </year> <pages> pp. 118-126. </pages> <address> Fig. </address> <month> 1. </month> <title> Circuit that computes the quotient and remainder of two numbers x and y </title>
References-found: 24

