URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/96-13.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Title: A Multithreaded Client-Server Architecture for Distributed Multimedia Systems  
Author: Sreenivas Gollapudi 
Degree: A Thesis submitted to the Faculty of the  in partial fulfillment of the requirements for the degree of Master of Science.  
Date: July 1996  
Affiliation: Department of Computer Science of State University of New York at Buffalo  
Abstract-found: 0
Intro-found: 1
Reference: [AD90] <author> A.Dan and D.Towsley. </author> <title> An Approximate Analysis of the LRU and FIFO Buffer Re placement Strategies. </title> <booktitle> In ACM SIGMETRICS, </booktitle> <pages> pages 143-152, </pages> <address> Denver, CO, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: i can be calculated by max i = maxf ij j 1 j n r g; (5.1) where n r is the number of rounds completed to date. 5.3 Buffer Management Traditional buffer management strategies have addressed the idea of a hot set of data to retain in the buffer <ref> [AD90] </ref>. The LRD strategy [GZ96a] uses the least recently displayed object to be replaced by the new object in case of a buffer miss (similar to a page miss). This is based on the following observation.
Reference: [AGM88] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling real-time transactions: a performance evaluation. </title> <booktitle> In 14th international conference on very large data bases, </booktitle> <pages> pages 1-12, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Real-time concurrency control has been an active research topic for several years and deals with similar issues <ref> [AGM88, BMHD89, ZRS87a, ZRS87b, SRL88, DBB + 88, TCG + 93] </ref>. However, the issues which arise in a multimedia context differ from those in real-time concurrency control, since the preservation of database consistency is not of primary concern to the continuous and synchronized 2.3.
Reference: [AH91] <author> David P. Anderson and George Homsy. </author> <title> A Communication Media I/O Server and Its Synchronization Mechanisms. </title> <journal> IEEE Computer, </journal> <volume> 24(10) </volume> <pages> 51-57, </pages> <year> 1991. </year>
Reference-contexts: Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development [LG90b, Ste90]. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures <ref> [RV93, Ste90, AH91, RRK93, GR93, ZF93] </ref>. Through this research, new behavioral concepts required for multimedia data have been identified and mechanisms have been proposed to enhance such conventional storage, synchronization, and communication mecha 9 10 2. Scheduling in Multimedia Systems nisms as random disk allocation, semaphores, monitors, or RPC. <p> Scheduling in Multimedia Systems nisms as random disk allocation, semaphores, monitors, or RPC. However, the techniques proposed at these levels are insufficient to address the problems encountered at the transaction management level in database systems. For example, Anderson et al. <ref> [AH91] </ref> describe techniques for recovering from loss of synchronization between interrupt-driven media I/O devices, and Rangan et al. [RRK93] devise techniques for inter-media synchronization during on-demand multimedia retrieval from a server to multiple destinations over integrated networks.
Reference: [All83] <author> James F. Allen. </author> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> Communications of ACM, </journal> <volume> 26(11), </volume> <year> 1983. </year>
Reference-contexts: It may, for example, be necessary to display two distinct slide objects jointly within a single slide presentation stream. In general, the temporal relationship between two atomic objects in a single stream may conform to any of the thirteen temporal relationships described in <ref> [All83] </ref>. In our representation, each atomic object is associated with a relative start time and a time interval which specifies the duration of its retrieval, with the initial atomic objects in the media stream assumed to start at time zero. <p> For example, in slide presentation applications, an audio object must be played along with a slide object. The temporal relationship between two atomic objects from different media streams may also conform to any of the thirteen temporal relationships described in <ref> [All83] </ref>. Inter-synchronization requirements may be specified as meta-data or specified in transaction programs. In some cases, the relative time and time interval associated with an atomic object may need to be adjusted to conform with these inter-synchronization requirements. <p> Scheduling in Multimedia Systems constraints on objects. The synchronization relationship between any two objects in either a single media stream or two media streams follows the thirteen temporal relationships outlined in <ref> [All83] </ref>; these are given in Figure 2.2. Inverse relationships are not listed in the figure. In general, these synchronization relationships can be easily generalized to the synchronization relationships among n media objects [DDI + 95]. <p> Intra-synchronization within the audio stream requires only that objects be sequentialized. Additional inter-synchronization requirements between the two media streams are specified among slides and audio objects. These requirements 14 2. Scheduling in Multimedia Systems between the slides and audio objects follow the thirteen temporal relationships outlined in <ref> [All83] </ref>. Let a multimedia transaction contain two transactions, one of which accesses the slide stream and the other the audio stream. <p> Thus, synchronization points specify nodes in media streams at which the synchrony of presentation must be checked and maintained. In general, the temporal relationship between two atomic objects from different media streams may conform to any of the thirteen temporal relationships described in <ref> [All83] </ref>, which is demonstrated in Figure 3.3. We specifically introduce three types of synchronization points among media objects; these are intra-synchronization point, inter-synchronization point, and middle-synchronization point. Intra-synchronization points specify sequential time-constraints among two media objects. Inter-synchronization points specify exact parallel start and end relationships among objects.
Reference: [BMHD89] <author> A.P. Buchmann, D.R. McCarthy, M. Hsu, and U. Dayal. </author> <title> Time-Critical Database Scheduling: A Framework for Integrating Real-Time Scheduling and Concurrency Control. </title> <booktitle> In Proceedings of the 5th Internatonal Conference on Data Engineering, </booktitle> <pages> pages 470-480, </pages> <year> 1989. </year>
Reference-contexts: Real-time concurrency control has been an active research topic for several years and deals with similar issues <ref> [AGM88, BMHD89, ZRS87a, ZRS87b, SRL88, DBB + 88, TCG + 93] </ref>. However, the issues which arise in a multimedia context differ from those in real-time concurrency control, since the preservation of database consistency is not of primary concern to the continuous and synchronized 2.3.
Reference: [CGS95] <author> S. Chaudhuri, S. Ghandeharizadeh, and C. Shahabi. </author> <title> Avoiding Retrival Contention for Composite Multimedia Objects. </title> <booktitle> In Proceedings of the 21th VLDB conference, </booktitle> <address> Zurich, Swizerland, </address> <year> 1995. </year>
Reference-contexts: Moser et al [MKK95] have proposed a buffer strategy termed "least/most relevant for presentation." This buffer strategy investigates the effects of such user interactions as "rewind" and "fast forward" on buffer design. A mechanism is proposed which reduces the ensuing delay after user interactions. Chaudhuri et al <ref> [CGS95] </ref> have investigated the problem of continuously displaying composite objects that are dynamically specified at the server level. Techniques based on simple sliding and buffered sliding are proposed which support continuous display by partial prefetching of overlapping media objects. <p> Buffer Management in Multimedia Systems media data presentation in object-oriented database environments. Media streams are stored as sets of media objects coupled with specified synchronization requirements. Complementary to the work proposed by Chaudhuri et al <ref> [CGS95] </ref>, we investigate the minimum buffering requirements that are necessary to guarantee the continuity and synchrony of the presentation of multimedia data. This is accomplished by first determining the minimum consuming times of media objects following their loading times, while guaranteeing the hiccup-free presentation of the media streams.
Reference: [DBB + 88] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ledin, D. Mc Carthy, A. Rosenthal, and S. Sarin. </author> <title> The HIPAC Project: Combining Active Databases and Timing Constraints. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 17(1) </volume> <pages> 51-70, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Real-time concurrency control has been an active research topic for several years and deals with similar issues <ref> [AGM88, BMHD89, ZRS87a, ZRS87b, SRL88, DBB + 88, TCG + 93] </ref>. However, the issues which arise in a multimedia context differ from those in real-time concurrency control, since the preservation of database consistency is not of primary concern to the continuous and synchronized 2.3.
Reference: [DDI + 95] <author> Y.F. Day, S. Dagtas, M. Iino, A. Khokhar, and A. Ghafoor. </author> <title> Spatio-Temporal Modeling of Video Data for On-Line Object-Oriented Query Processing. </title> <type> Technical report, </type> <institution> School of Electrical Engineering, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: Inverse relationships are not listed in the figure. In general, these synchronization relationships can be easily generalized to the synchronization relationships among n media objects <ref> [DDI + 95] </ref>. Three relationships, namely before, after, and equal, are used to define the temporal ordering of one object with respect to another.
Reference: [GC92a] <author> Jim Gemmell and Stavros Christodoulakis. </author> <title> Principles of delay-sensitive multimedia data storage and retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <month> January </month> <year> 1992. </year> <note> 69 70 BIBLIOGRAPHY </note>
Reference-contexts: must be the minimum start time such that C m (t; t m Given D m max , B m (t min ; t m l s ) can be determined, where B m (t min ; t m l s ) has the minimum value at t m min <ref> [GC92a] </ref>. Thus, k can be determined in advance. Consequently, x can be determined when the consuming function is given. This start time assumes that the entire stream will be continuously consumed. <p> In fact, it can be shown that the maximum number of client requests can be serviced simultaneously by the server when the amount of data retrieved for each client is proportional to the consumption rate of the client <ref> [GC92a, LD93, HGP94] </ref>. 47 48 5. Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past [RV91, GC92b, LD93, VR93]. Neufeld and co-workers [GDN95] propose a scheme that employs a scheduling policy based on rounds.
Reference: [GC92b] <author> J. Gimmell and S. Christodoulakis. </author> <title> Principles of Delay Sensitive Multimedia Data Storage and Retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past <ref> [RV91, GC92b, LD93, VR93] </ref>. Neufeld and co-workers [GDN95] propose a scheme that employs a scheduling policy based on rounds. A new client request is admitted if the additional number of blocks that are read do not exceed the maximum blocks that can be read in each round.
Reference: [GDN95] <author> G.Neufeld, D.Makaroff, and N.Hutchinson. </author> <title> The Design of a Variable Bit Rate Contin uous Media Server. </title> <type> Technical Report TR-95-06, </type> <institution> Dept. of Computer Science, University of British Columbia, Vancouver, Canada, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past [RV91, GC92b, LD93, VR93]. Neufeld and co-workers <ref> [GDN95] </ref> propose a scheme that employs a scheduling policy based on rounds. A new client request is admitted if the additional number of blocks that are read do not exceed the maximum blocks that can be read in each round. <p> Upper bound values for new requests (for example, max ) can be determined by running a calibration program. The minimum number of segments retrieved in a round can be calculated by uniformly spacing the segments across the disk, thereby maximizing the seek times <ref> [GDN95] </ref>. Calculation of m proceeds as follows. Let R = fR 1 ; : : : ; R n g denote the set of current requests being serviced. Each request R i has a maximum seek time max i calculated as described in Section 4.1.
Reference: [GR93] <author> Shahram Ghandeharizadeh and Luis Ramos. </author> <title> Continuous Retrievals of Multimedia Data Using Parallelism. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 658-669, </pages> <year> 1993. </year>
Reference-contexts: Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development [LG90b, Ste90]. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures <ref> [RV93, Ste90, AH91, RRK93, GR93, ZF93] </ref>. Through this research, new behavioral concepts required for multimedia data have been identified and mechanisms have been proposed to enhance such conventional storage, synchronization, and communication mecha 9 10 2. Scheduling in Multimedia Systems nisms as random disk allocation, semaphores, monitors, or RPC.
Reference: [GZ96a] <author> Sreenivas Gollapudi and Aidong Zhang. </author> <title> Buffer Management in Multimedia Database Systems. </title> <booktitle> In the Third IEEE International Conference on Multimedia Computing and Systems (ICMCS'96), </booktitle> <address> Hiroshima, Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: The LRD strategy <ref> [GZ96a] </ref> uses the least recently displayed object to be replaced by the new object in case of a buffer miss (similar to a page miss). This is based on the following observation.
Reference: [GZ96b] <author> Sreenivas Gollapudi and Aidong Zhang. NetMedia: </author> <title> A Client-Server Distributed Mul timedia Database Environment. </title> <booktitle> In Proc. of IW-MMDBMS '96, </booktitle> <address> Blue Mountain Lake, New York, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The multimedia server, henceforth referred as the server, sits on top of an object-oriented database system. The server is an event driven process that uses a time-ordered prioritized query queue to service requests <ref> [GZ96b] </ref>. Figure 1.2 shows the organization of the server. The server is client-driven [LD93], that is, all data transmitted from the server to the client is explicitly requested. It is the job of the server to guarantee sufficient bandwidth.
Reference: [HGP94] <author> H.M.Vin, A. Goyal, and P.Goyal. </author> <title> Algorithms for Designing Multimedia Servers. </title> <booktitle> In First IEEE Intl. Conf. Multimedia Computing and Systems (ICMCS'94), </booktitle> <pages> pages 234-243, </pages> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: On the server side, the system must control client admissions, schedule client requests, and manage a shared buffer for all admitted clients. The scheduling of client requests should exploit the periodic nature of media data playback by processing client requests in intervals of time (or rounds, as defined in <ref> [HGP94] </ref>). Within each interval, all currently admitted clients are serviced in rounds, so that the retrieval of a portion of the data for each client will not result in jitter. Following the best-effort approach, the service time allocation of the client rounds in each interval 4.2. <p> In fact, it can be shown that the maximum number of client requests can be serviced simultaneously by the server when the amount of data retrieved for each client is proportional to the consumption rate of the client <ref> [GC92a, LD93, HGP94] </ref>. 47 48 5. Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past [RV91, GC92b, LD93, VR93]. Neufeld and co-workers [GDN95] propose a scheme that employs a scheduling policy based on rounds. <p> This strategy does not consider the fact that each client request can have different QoS parameters. Moreover, delays due to network and bounds on buffer sizes are not addressed by their strategy. Vin and co-workers <ref> [HGP94] </ref> propose admission control algorithms to determine whether a client should be admitted for service by a server. However, they do not consider buffer management while calculating the admission control criteria. <p> The processing time at the server is divided into intervals of fixed size. Each interval is then dynamically divided into n rounds. The server processes these n current requests via periodic rounds <ref> [HGP94] </ref>, retrieving a fraction of the segments for each client request in each round. Thus, interval I k consists of round ik ; i = 1; : : :; n: The number of segments to be retrieved in each round can be calculated as follows. <p> Due to differences in media data compression techniques and in the relative placement of segments on the disk, the actual time t ik taken to retrieve N ik segments in round ik could be different in any two rounds. Overflow and underflow rounds <ref> [HGP94] </ref> occur if t act ik &gt; t ik and t act respectively. In an underflow round, the server can read additional segments into the buffer up to a maximum round duration. This capability, termed read-ahead, helps to reduce delays in the retrieval of objects in future rounds. <p> A multimedia server can organize the storage of media data from the disk in terms of fixed size media blocks <ref> [HGP94] </ref> that correspond to the media segments. Thus, the buffer can be segmented into slots to hold the media blocks. Without loss of generality, let us assume that the size of media segments is equal to the size of a buffer slot.
Reference: [KSS96] <author> Steve Kleiman, Devang Shah, and Bart Smaalders. </author> <title> Programming with Threads. </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1996. </year>
Reference-contexts: and Experimental Results This chapter will detail our implementation and present our experimental results based on the approaches proposed in the previous sections. 6.1 System Implementation 6.1.1 Multithreaded Systems A thread is a user level entity and is an independent sequence of execution of program code inside a Unix process <ref> [KSS96, LB96] </ref>. A traditional Unix process has a single thread of control that has sole possession of the process' memory and other resources. The threads share all of the process' memory. When one thread writes to the memory, other threads can read the results. <p> In addition, the inherent separation between processes may require a major programming effort to communicate between the threads in different processes or to synchronize their actions <ref> [KSS96] </ref>. Some of the other advantages of multithreaded systems are [LB96] * Performance gains from multiprocessing hardware. Multiple threads are an efficient way for application developers to exploit the parallelism of the hardware. * Increased application throughput.
Reference: [LB96] <author> Bil Lewis and Daniel J. Berg. </author> <title> Threads Primer. </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1996. </year>
Reference-contexts: and Experimental Results This chapter will detail our implementation and present our experimental results based on the approaches proposed in the previous sections. 6.1 System Implementation 6.1.1 Multithreaded Systems A thread is a user level entity and is an independent sequence of execution of program code inside a Unix process <ref> [KSS96, LB96] </ref>. A traditional Unix process has a single thread of control that has sole possession of the process' memory and other resources. The threads share all of the process' memory. When one thread writes to the memory, other threads can read the results. <p> In addition, the inherent separation between processes may require a major programming effort to communicate between the threads in different processes or to synchronize their actions [KSS96]. Some of the other advantages of multithreaded systems are <ref> [LB96] </ref> * Performance gains from multiprocessing hardware. Multiple threads are an efficient way for application developers to exploit the parallelism of the hardware. * Increased application throughput. Multiple threads can run in an asynchronous manner maximizing processor utilization. * Increased responsiveness.
Reference: [LD93] <author> P. Lougher and D.Shepherd. </author> <title> The Design of a Storage Server for Continuous Media. </title> <journal> The Computer Journal, </journal> <volume> 36(1) </volume> <pages> 32-42, </pages> <year> 1993. </year>
Reference-contexts: The multimedia server, henceforth referred as the server, sits on top of an object-oriented database system. The server is an event driven process that uses a time-ordered prioritized query queue to service requests [GZ96b]. Figure 1.2 shows the organization of the server. The server is client-driven <ref> [LD93] </ref>, that is, all data transmitted from the server to the client is explicitly requested. It is the job of the server to guarantee sufficient bandwidth. The client has to read data at the same rate as the transfer rate to minimize the buffer requirements at the client. <p> In fact, it can be shown that the maximum number of client requests can be serviced simultaneously by the server when the amount of data retrieved for each client is proportional to the consumption rate of the client <ref> [GC92a, LD93, HGP94] </ref>. 47 48 5. Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past [RV91, GC92b, LD93, VR93]. Neufeld and co-workers [GDN95] propose a scheme that employs a scheduling policy based on rounds. <p> Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past <ref> [RV91, GC92b, LD93, VR93] </ref>. Neufeld and co-workers [GDN95] propose a scheme that employs a scheduling policy based on rounds. A new client request is admitted if the additional number of blocks that are read do not exceed the maximum blocks that can be read in each round. <p> The server is an event driven process that uses a time-ordered prioritized query queue to service requests. The server is client-driven <ref> [LD93] </ref>, that is, all data transmitted from the server to the client is explicitly requested. It is the job of the server to guarantee sufficient bandwidth. The server has three components, viz a communication manager, a buffer manager, and a service manager.
Reference: [LG90a] <author> Thomas D.C. Little and Arif Ghafoor. </author> <title> Network Considerations for Distributed Mul timedia Object Composition and Communication. </title> <journal> IEEE Network Magazine, </journal> <pages> pages 32-49, </pages> <year> 1990. </year>
Reference-contexts: However, in the transaction management level, a generic scheduling strategy is needed to enforce the synchronization constraints on multiple media streams. Furthermore, several parameters such as average delay, speed ratio, utilization, jitter, and skew <ref> [LG90a] </ref> must be considered in scheduling in order to offer effective synchronization maintenance for the presentation of multiple media streams. In the proposed framework, we use the multimedia data model described in Chapter 1 for the purpose of scheduling media data operations. <p> In the previous section, a simple solution was presented in which delays are simply propagated to the ensuing delivery operations. We will now systematically investigate a novel and more effective delay recovery approach. Little and Ghafoor <ref> [LG90a] </ref> have proposed several parameters to measure the Quality of Service (QOS) for multimedia data presentation. The following parameters have been listed: (1) average delay, (2) speed ratio, (3) utilization, (4) jitter, and (5) skew. A detailed discussion of these parameters will be taken up in Chapter 4. <p> Algorithm 3 minimizes the total buffer requirement by minimizing max 0in B i where n is the total number of intervals in the presentation and ensures both continuity and synchronization in the presentation. We have shown a buffer prefetching algorithm that maintains synchronization constraints thereby minimizing skew and jitter <ref> [LG90a] </ref> in a presentation while minimizing the buffer requirements. Furthermore, the algorithm handle delays in the presentation more gracefully by using an LRC replacement strategy for buffer replacement. <p> In particular, the tools must be able to handle various types of delays and to support user interactions such as skip, pause, and fast forward/backward in a manner that is acceptable to on-line users. To effectively and efficiently support these functions, a flexibly adjustable quality of service (QoS) <ref> [LG90a] </ref> must be supported. <p> We must thus formulate new correctness criteria for the executions of multimedia tasks which define acceptable 41 42 4. QoS Management in Multimedia Systems quality in real-time. Several important QoS parameters must be considered in these correctness criteria. Little and Ghafoor <ref> [LG90a] </ref> have proposed several parameters to measure the QoS for multimedia data presentation. The following parameters have been listed: (1) average delay, (2) speed ratio, (3) utilization, (4) jitter, and (5) skew. The average delay is the average presentation delay of each object in a time interval.
Reference: [LG90b] <author> Thomas D.C. Little and Arif Ghafoor. </author> <title> Synchronization and Storage Models for Mul timedia Objects. </title> <journal> IEEE Journal on Selected Arears in Communications, </journal> <volume> 8(3) </volume> <pages> 413-427, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development <ref> [LG90b, Ste90] </ref>. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures [RV93, Ste90, AH91, RRK93, GR93, ZF93].
Reference: [MKK95] <author> Frank Moser, Achim Kraib, and Wolfgang Klas. L/MRP: </author> <title> A Buffer Management Strat egy for Interactive Continuous Data Flow in a Multimedia DBMS. </title> <booktitle> In Proceedings of the 21th VLDB conference, </booktitle> <address> Zurich, Swizerland, </address> <year> 1995. </year> <note> BIBLIOGRAPHY 71 </note>
Reference-contexts: Thus, the central issues in this context involve the provision of efficient preloading and replacement mechanisms for caching media objects. 3.1 Previous Work Research involving buffer management in multimedia database systems is still in its infancy [TK95]. Moser et al <ref> [MKK95] </ref> have proposed a buffer strategy termed "least/most relevant for presentation." This buffer strategy investigates the effects of such user interactions as "rewind" and "fast forward" on buffer design. A mechanism is proposed which reduces the ensuing delay after user interactions.
Reference: [NY94] <author> R. T. Ng and J. Yang. </author> <title> Maximizing Buffer and Disk Utlilizations for News On-Demand. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <pages> pages 451-462, </pages> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference-contexts: Techniques based on simple sliding and buffered sliding are proposed which support continuous display by partial prefetching of overlapping media objects. Such an approach is preferable to the naive strategy of prefetching the entirety of overlapped media objects. Ng and Yang <ref> [NY94] </ref> have attempted to maximize buffer and disk utilization within the constraints of a fixed amount of buffer space and disk bandwidth, both of which are pre-determined in the design phase. Prefetching strategies that are applicable to database systems are proposed which maximize the throughput of the system.
Reference: [NY96] <author> R. T. Ng and J. Yang. </author> <title> An analysis of buffer sharing and prefectching techniques for multimedia systems. </title> <journal> ACM Multimedia Systems, </journal> <volume> 4(6) </volume> <pages> 55-69, </pages> <year> 1996. </year>
Reference-contexts: Figure 6.10 illustrates the buffer consumption profile involving three media streams. We find that the savings in buffer size with buffer sharing is close to 50%. Ng and Yang <ref> [NY96] </ref> reported this to be the maximum buffer reduction possible using buffer sharing. In the second case, we randomly set the consumption rates of streams in the range [100, 500] KB/s and calculated the minimum buffer requirement in the interval.
Reference: [RRK93] <author> P. Venkat Rangan, Srinivas Ramanathan, and Thomas Kaeppner. </author> <title> Performance of Inter-Media Synchronization in Distributed and Heterogeneous Multimedia Systems. </title> <booktitle> Computer Networks and ISDN Systems, </booktitle> <year> 1993. </year>
Reference-contexts: Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development [LG90b, Ste90]. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures <ref> [RV93, Ste90, AH91, RRK93, GR93, ZF93] </ref>. Through this research, new behavioral concepts required for multimedia data have been identified and mechanisms have been proposed to enhance such conventional storage, synchronization, and communication mecha 9 10 2. Scheduling in Multimedia Systems nisms as random disk allocation, semaphores, monitors, or RPC. <p> However, the techniques proposed at these levels are insufficient to address the problems encountered at the transaction management level in database systems. For example, Anderson et al. [AH91] describe techniques for recovering from loss of synchronization between interrupt-driven media I/O devices, and Rangan et al. <ref> [RRK93] </ref> devise techniques for inter-media synchronization during on-demand multimedia retrieval from a server to multiple destinations over integrated networks. Both research efforts are directed toward the synchronization of two types of media streams: master and slave streams.
Reference: [RV91] <author> P. V. Rangan and H. M. Vin. </author> <title> Designing File Systems for Digital Video and Audio. </title> <booktitle> In 13th Symposium on Operating System Principles (SOSP'91). Operating Systems Review, </booktitle> <volume> Vol. 25, No. 5, </volume> <pages> pages 81-94, </pages> <year> 1991. </year>
Reference-contexts: Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past <ref> [RV91, GC92b, LD93, VR93] </ref>. Neufeld and co-workers [GDN95] propose a scheme that employs a scheduling policy based on rounds. A new client request is admitted if the additional number of blocks that are read do not exceed the maximum blocks that can be read in each round.
Reference: [RV93] <author> P. Venkat Rangan and Harrick M. Vin. </author> <title> Efficient Storage Techniques for Digital Contin uous Multimedia. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 564-573, </pages> <year> 1993. </year>
Reference-contexts: Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development [LG90b, Ste90]. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures <ref> [RV93, Ste90, AH91, RRK93, GR93, ZF93] </ref>. Through this research, new behavioral concepts required for multimedia data have been identified and mechanisms have been proposed to enhance such conventional storage, synchronization, and communication mecha 9 10 2. Scheduling in Multimedia Systems nisms as random disk allocation, semaphores, monitors, or RPC.
Reference: [SRL88] <author> Lui Sha, Ragunathan Rajkumar, and John P. Lehoczky. </author> <title> Concurrency Control for Distributed Real-Time Databases. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 17(1) </volume> <pages> 82-98, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Real-time concurrency control has been an active research topic for several years and deals with similar issues <ref> [AGM88, BMHD89, ZRS87a, ZRS87b, SRL88, DBB + 88, TCG + 93] </ref>. However, the issues which arise in a multimedia context differ from those in real-time concurrency control, since the preservation of database consistency is not of primary concern to the continuous and synchronized 2.3.
Reference: [Ste90] <author> Ralf Steinmetz. </author> <title> Synchronization Properties in Multimedia Systems. </title> <journal> IEEE Journal on Selected Arears in Communications, </journal> <volume> 8(3) </volume> <pages> 401-412, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development <ref> [LG90b, Ste90] </ref>. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures [RV93, Ste90, AH91, RRK93, GR93, ZF93]. <p> Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development [LG90b, Ste90]. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures <ref> [RV93, Ste90, AH91, RRK93, GR93, ZF93] </ref>. Through this research, new behavioral concepts required for multimedia data have been identified and mechanisms have been proposed to enhance such conventional storage, synchronization, and communication mecha 9 10 2. Scheduling in Multimedia Systems nisms as random disk allocation, semaphores, monitors, or RPC.
Reference: [SZ94] <author> S.W. Smoliar and H.J. Zhang. </author> <title> Content-Based Video Indexing and Retrieval. </title> <journal> IEEE Multimedia, </journal> <volume> 1(2) </volume> <pages> 62-72, </pages> <year> 1994. </year>
Reference-contexts: The video clips are MPEG encoded streams <ref> [SZ94, ZTSY95, ZLS95] </ref>. The nominal presentation schedule is shown in Figure 6.5 (a). Unlike the slide presentation, the presentation of both the streams is continuous. The allowable skip for both the video and audio stream is set to 0.50 seconds.
Reference: [TCG + 93] <author> A.U. Tansel, J. Clifford, S. Gadia, S. Jajodia, A. Segev, and R. Snodgrass. </author> <title> Temporal Databases: Theory, design, and Implementation. </title> <publisher> The Benjamin/Cummings Publishing, </publisher> <year> 1993. </year>
Reference-contexts: Real-time concurrency control has been an active research topic for several years and deals with similar issues <ref> [AGM88, BMHD89, ZRS87a, ZRS87b, SRL88, DBB + 88, TCG + 93] </ref>. However, the issues which arise in a multimedia context differ from those in real-time concurrency control, since the preservation of database consistency is not of primary concern to the continuous and synchronized 2.3.
Reference: [TK95] <author> Heiko Thimm and Wolfgang Klas. </author> <title> Playout Management An Integrated Service of a Multimedia Database Management System, 1995. </title> <type> (Technical Report, </type> <institution> GMD-IPSI). </institution>
Reference-contexts: The main function of each client at a workstation is to display multiple media data to the user in the specified format. Such an architecture can provide adequate database support for multimedia applications demanding script-based interactive multimedia presentations <ref> [TK95] </ref>. A client-server model wherein the client performs the playout management locally is an ideal candidate for implementing the playout management service. The integration of the multimedia playout management and database systems make it possible to efficient interplay between playout management components and database management system components. <p> Thus, the central issues in this context involve the provision of efficient preloading and replacement mechanisms for caching media objects. 3.1 Previous Work Research involving buffer management in multimedia database systems is still in its infancy <ref> [TK95] </ref>. Moser et al [MKK95] have proposed a buffer strategy termed "least/most relevant for presentation." This buffer strategy investigates the effects of such user interactions as "rewind" and "fast forward" on buffer design. A mechanism is proposed which reduces the ensuing delay after user interactions.
Reference: [VR93] <author> H. M. Vin and P. V. Rangan. </author> <title> Desigining a Multi-User HDTV Storage Server. </title> <journal> IEEE Journal on Selected Areas on Communication, </journal> <volume> 11(1) </volume> <pages> 153-164, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Multimedia Server Functionalities 5.1 Previous Work The low-level design of multimedia servers has become the focus of several research projects in the recent past <ref> [RV91, GC92b, LD93, VR93] </ref>. Neufeld and co-workers [GDN95] propose a scheme that employs a scheduling policy based on rounds. A new client request is admitted if the additional number of blocks that are read do not exceed the maximum blocks that can be read in each round.
Reference: [ZF93] <author> T.F. Znati and B. </author> <title> Field. A Network Level Channel Abstraction for Multimedia Com munication in Real-time Networks. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 590-599, </pages> <year> 1993. </year>
Reference-contexts: Such synchronizations are usually termed intra-synchronization and inter-synchronization respectively. For these reasons, synchronization has been recognized as one of the central problems in multimedia system development [LG90b, Ste90]. 2.1 Previous Work Substantial research has been directed toward the support of synchronization within operating systems and network architectures <ref> [RV93, Ste90, AH91, RRK93, GR93, ZF93] </ref>. Through this research, new behavioral concepts required for multimedia data have been identified and mechanisms have been proposed to enhance such conventional storage, synchronization, and communication mecha 9 10 2. Scheduling in Multimedia Systems nisms as random disk allocation, semaphores, monitors, or RPC.
Reference: [ZG95a] <author> Aidong Zhang and Sreenivas Gollapudi. </author> <title> Multimedia Transaction Management in Database Systems. </title> <type> Technical Report CS-TR-95-44, </type> <institution> Dept. of Computer Science, State University of New York at Buffalo, </institution> <month> October </month> <year> 1995. </year> <note> 72 BIBLIOGRAPHY </note>
Reference-contexts: The detailed discussion on synchronization can be found in <ref> [ZG95a] </ref>. <p> Thus, each GROUP includes all events occurring at the same time in the presentation and corresponds to a synchronization point in the presentation. Enforcing synchronous delivery of objects at every synchronization point will generate a synchronous presentation <ref> [ZG95a] </ref>. The presentation is segmented into time intervals corresponding to the synchronization points. Thus, interval [t 0 ; t 1 ] is constructed from the first two synchronization points p 0 and p 1 , occurring at t = t 0 and t = t 1 , respectively.
Reference: [ZG95b] <author> Aidong Zhang and Sreenivas Gollapudi. </author> <title> QoS Management in Educational Digital Li brary Environments. </title> <type> Technical Report CS-TR-95-53, </type> <institution> State University of New York at Buffalo, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: We will then define correctness criteria for the executions of multimedia tasks. As illustrated below, QoS parameters must be considered in the definitions of these correctness criteria. The reader is referred to <ref> [ZG95b] </ref> for a detailed discussion on QoS management in multimedia systems. The scheduling of multimedia tasks includes the scheduling of time-dependent delivery operations, synchronized delivery enforcement among multiple media streams in a multimedia task, concurrent execution of multimedia tasks, and delivery delay recovery.
Reference: [ZLS95] <author> H.J. Zhang, C.Y. </author> <title> Low, and S.W. Smoliar. Video Parsing and Browsing Using Com pressed Data. </title> <booktitle> Multimedia Tools and Applications, </booktitle> <volume> 1(1) </volume> <pages> 89-111, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: The video clips are MPEG encoded streams <ref> [SZ94, ZTSY95, ZLS95] </ref>. The nominal presentation schedule is shown in Figure 6.5 (a). Unlike the slide presentation, the presentation of both the streams is continuous. The allowable skip for both the video and audio stream is set to 0.50 seconds.
Reference: [ZRS87a] <author> W. Zhao, K. Ramamritham, and J.A. Stankovic. </author> <title> Preemptive Scheduling Under Time and Resource Constraints. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(8) </volume> <pages> 949-960, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Real-time concurrency control has been an active research topic for several years and deals with similar issues <ref> [AGM88, BMHD89, ZRS87a, ZRS87b, SRL88, DBB + 88, TCG + 93] </ref>. However, the issues which arise in a multimedia context differ from those in real-time concurrency control, since the preservation of database consistency is not of primary concern to the continuous and synchronized 2.3.
Reference: [ZRS87b] <author> W. Zhao, K. Ramamritham, and J.A. Stankovic. </author> <title> Scheduling Tasks with Resource Re quirements in Hard Real-Time Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(5) </volume> <pages> 564-576, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Real-time concurrency control has been an active research topic for several years and deals with similar issues <ref> [AGM88, BMHD89, ZRS87a, ZRS87b, SRL88, DBB + 88, TCG + 93] </ref>. However, the issues which arise in a multimedia context differ from those in real-time concurrency control, since the preservation of database consistency is not of primary concern to the continuous and synchronized 2.3.
Reference: [ZTSY95] <author> H.J. Zhang, S.Y. Tan, S.W. Smoliar, and G. Yihong. </author> <title> Automatic Parsing and Indexing of News Video. </title> <journal> Multimedia Systems, </journal> <volume> 2(6) </volume> <pages> 256-266, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: The video clips are MPEG encoded streams <ref> [SZ94, ZTSY95, ZLS95] </ref>. The nominal presentation schedule is shown in Figure 6.5 (a). Unlike the slide presentation, the presentation of both the streams is continuous. The allowable skip for both the video and audio stream is set to 0.50 seconds.
References-found: 39

