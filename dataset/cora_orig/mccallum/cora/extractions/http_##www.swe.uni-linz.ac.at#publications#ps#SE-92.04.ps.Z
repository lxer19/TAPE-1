URL: http://www.swe.uni-linz.ac.at/publications/ps/SE-92.04.ps.Z
Refering-URL: http://infosoft.soft.uni-linz.ac.at/Info/Publications.html
Root-URL: 
Title: ProcessTalk: An Object Oriented Framework for Distributed Automation Software  
Author: Pirklbauer K., Plsch R., Weinreich R. Christian 
Address: Altenbergerstr. 69, A-4040 Linz, Austria  
Affiliation: Doppler Laboratory for Software Engineering Johannes Kepler University of Linz  
Abstract: The objectoriented programming paradigm has already proven its usefulness in numerous projects, most of them dealing with graphical user interfaces or visualization in general. But this programming paradigm is undoubtedly more than a mere programming technique for user interfaces. Thus we initiated a project with the major aim to examine the impact objectoriented programming can have on the design and implementation of auto - mation software. The basis for our study is the implementation of an application framework for process automation software, which we already used in the implementation of process control software for a ladle furnace (part of a steel plant). The framework was implemented on SUN SPARCstations using ET++ (a user interface application framework) and C++. 
Abstract-found: 1
Intro-found: 1
Reference: [Dahl68] <author> Dahl O.J., Myhrhaug B., Nygaard K.: </author> <title> SIMULA 67 Common Base Language, </title> <institution> Norwegian Computing Center No S-2, </institution> <year> 1968 </year>
Reference-contexts: Especially the OOP concepts of inheritance, polymorphism and dynamic binding enable the development of more flexible, more easily maintainable, and less error-prone software. OOP was introduced with the programming language Simula-67 by Dahl et al. <ref> [Dahl68] </ref>. The Smalltalk system [Gold85] first demonstrated the power of this new programming paradigm in the area of highly interactive graphical user interfaces. But there is no reason to suppose that OOPs facilitating power should be limited to the implementation of user inter faces.
Reference: [Gold85] <author> Goldberg A., Robson D.: </author> <title> Smalltalk-80The Language and its Implementation, </title> <publisher> Addison Wesley, </publisher> <year> 1985 </year>
Reference-contexts: Especially the OOP concepts of inheritance, polymorphism and dynamic binding enable the development of more flexible, more easily maintainable, and less error-prone software. OOP was introduced with the programming language Simula-67 by Dahl et al. [Dahl68]. The Smalltalk system <ref> [Gold85] </ref> first demonstrated the power of this new programming paradigm in the area of highly interactive graphical user interfaces. But there is no reason to suppose that OOPs facilitating power should be limited to the implementation of user inter faces.
Reference: [Schmu86] <author> Schmucker K.: </author> <title> ObjectOriented Programming for the Macintosh, </title> <publisher> Hayden Book Company, </publisher> <address> Hasbrouck Heights, N.J., </address> <year> 1986 </year>
Reference-contexts: processes process control classes (in our case, the classes for the ladle furnace auto mation as mentioned above) visualization of process data in conjunction with the design of a modern graphical user interface for a control panel Components of the Application Framework ProcessTalk is an application framework as defined in <ref> [Schmu86] </ref>. It is in fact an extension of the application framework ET++ [Wein89], which was developed for applications with highly interactive graphical user interfaces.
Reference: [Serv90] <author> Servio Corporation: </author> <title> GemStone C++ Interface, </title> <publisher> Servio Corporation, </publisher> <year> 1990 </year>
Reference-contexts: The class GemStoneOServer provides an interface to the objectoriented database GemStone <ref> [Serv90] </ref>. The class ProcessOServer is an interface to object managers, which we implemented ourselves. Object managers are processes managing objects in memory. They are lightweight and provide a higher degree of performance than an objectoriented database.
Reference: [Sun90] <author> Sun Microsystems Inc.: </author> <title> SunOS Reference Manuals, </title> <publisher> Sun Microsystems Inc., </publisher> <year> 1990 </year>
Reference-contexts: The underlying communication model is simple and was tailored to the special requirements of process automation. Nevertheless, it can easily be extended to meet further requirements. In the current implementation, each process may maintain one mailbox, which can be addressed by one UNIX interprocess communication (IPC) service <ref> [Sun90] </ref>. A communi - cation manager, which is implemented as a class, manages the communication relationships among processes.
Reference: [Wein89] <author> Weinand A., Gamma E., Marty R.: </author> <title> Design and Implementation of ET++, a Seamless ObjectOriented Application Framework, in: </title> <journal> Structured Programming, </journal> <volume> Vol. 10., No. 2, </volume> <publisher> Springer-Verlag, </publisher> <year> 1989 </year>
Reference-contexts: It is in fact an extension of the application framework ET++ <ref> [Wein89] </ref>, which was developed for applications with highly interactive graphical user interfaces. ProcessTalk consists of class libraries for communication, data management, and visualization of process data, classes for process management (including the classes for the application frame) and process control, and tools for testing and debugging. Communication Library Requirements.
References-found: 6

