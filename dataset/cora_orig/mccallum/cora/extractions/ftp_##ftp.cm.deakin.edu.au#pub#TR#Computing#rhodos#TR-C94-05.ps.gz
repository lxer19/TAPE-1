URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C94-05.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: ang-@deakin.edu.au  
Title: Research into the Development of the RHODOS Multi-threaded Microkernel  
Author: G. Wickham, M. Hobbs, A. Goscinski -gjw, mick, 
Note: *This work was partly supported by Australian Research Council under Grants A48831034 and A49232429, and the Deakin University Research Grant 0504010151.  
Address: Geelong Victoria 3217, Australia.  
Affiliation: School of Computing and Mathematics Deakin University,  
Date: September 8, 1994  
Pubnum: RHODOS  
Abstract: An important factor contributing to an operating systems performance is the design and efficiency of the kernel code. This is especially true for microkernel based operating systems where the microkernel and kernel provides support for system servers. RHODOS is a microkernel based distributed operating system designed as a testbed for the study of the numerous research topics available in this area. The current version of RHODOS uses a single threaded microkernel, which fulfilled our requirements of providing a stable platform. A significant drawback of a single threaded architecture is the difficulty with which paging can be implemented. This report details the current state of the RHODOS single threaded microkernel and provides justification for the implementation of a multi threaded microkernel. 
Abstract-found: 1
Intro-found: 1
Reference: [Accetta et al. 86] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian and M. Young. </author> <title> Mach: A New Kernel Foundation For UNIX Development. </title> <booktitle> Summer USENIX Conference, </booktitle> <address> Atlanta, </address> <year> 1986. </year>
Reference-contexts: RHODOS has been designed with the microkernel architecture forming an abstract machine on which kernel and system servers provide the bulk of the services and facilities expected from any operating system [Toomey et al. 92], [De Paoli et al. 94]. Other systems based on the microkernel approach include MACH <ref> [Accetta et al. 86] </ref>, QNX [Hilderbrand 92] and Chorus [Rozier et al. 88]. The current implementation of the RHODOS microkernel has a simple restriction that process scheduling cannot be performed whilst executing any system calls within the microkernel. This mode of operation is termed single-threaded.
Reference: [De Paoli et al. 94] <author> D. De Paoli, A. Goscinski, M. Hobbs and G. Wickham. </author> <title> RHODOS A Microkernel based Distributed Operating System: An Overview of the 1993 Version. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference-contexts: RHODOS has been designed with the microkernel architecture forming an abstract machine on which kernel and system servers provide the bulk of the services and facilities expected from any operating system [Toomey et al. 92], <ref> [De Paoli et al. 94] </ref>. Other systems based on the microkernel approach include MACH [Accetta et al. 86], QNX [Hilderbrand 92] and Chorus [Rozier et al. 88].
Reference: [Gerrity et al. 91] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey and Z. Zhu. </author> <title> RHODOS A Test Bed for the Studying Design Issues in Distributed Operating Systems. </title> <booktitle> Proceedings of the 2nd Singapore International Conference on Networks (SINCON91). </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: One such system is RHODOS, a high performance distributed operating system designed to act as a test bed for studying the many components which go to form a distributed operating system <ref> [Gerrity et al. 91] </ref>. A current trend in modern operating system design is to build the system as a set of cooperating kernel server processes supported by a lightweight kernel, commonly known as a microkernel.
Reference: [Hilderbrand 92] <author> D. Hildebrand. </author> <title> An Architectural Overview of QNX. </title> <booktitle> Proceedings of Workshop on Microkernel and other Kernel Architectures. </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: Other systems based on the microkernel approach include MACH [Accetta et al. 86], QNX <ref> [Hilderbrand 92] </ref> and Chorus [Rozier et al. 88]. The current implementation of the RHODOS microkernel has a simple restriction that process scheduling cannot be performed whilst executing any system calls within the microkernel. This mode of operation is termed single-threaded.
Reference: [Motorola 85] <author> MC68020 32Bit Microprocessor Users Manual. </author> <title> Second Edition. </title> <publisher> Prentice Hall, Inc., </publisher> <address> Englewood Cliffs, N.J. </address> <month> 07632. </month>
Reference-contexts: A simple implementation of privilege modes would include two levels (as is used with the RHODOS implementation platform <ref> [Motorola 85] </ref>), generally known as User and Supervisor modes. Where the User mode is the general working mode used by normal user and server processes, whilst the Supervisor mode is the higher privileged mode that allows access to privileged memory locations and instructions. <p> Each process is allocated its own private stack which is termed a user stack. While on processors with hardware support for more than one level of privilege there is usually support for multiple stacks. RHODOS is currently being implemented on a Sun 3/50 which uses a Motorola 68020 <ref> [Motorola 85] </ref> as a central processing unit. This processor supports three separate stacks, which are the: user stack, interrupt stack and master stack. Whenever the processor is in the lower privilege mode it uses the user stack. <p> To achieve this goal it is necessary for each process to have its own private privilege stack, which is called a master stack on the M68020 <ref> [Motorola 85] </ref>. This concept is shown in Figure 3. The separate system stack for each process will be used only for the processing of system calls (software traps) invoked from a user process.
Reference: [Rozier et al. 88] <author> M. Rozier, V. Abrossimov, F. Armand, M. Gien, M. Guillemont, F. Hermann and C. </author> <title> Kaiser Overview of the Chorus Distributed Operating System. </title> <address> Montigny-le-Bretonneux (France), </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Other systems based on the microkernel approach include MACH [Accetta et al. 86], QNX [Hilderbrand 92] and Chorus <ref> [Rozier et al. 88] </ref>. The current implementation of the RHODOS microkernel has a simple restriction that process scheduling cannot be performed whilst executing any system calls within the microkernel. This mode of operation is termed single-threaded.
Reference: [Toomey et al. 92] <author> W. Toomey, A. Goscinski and G. Gerrity. </author> <title> The Nucleus Microkernel for the RHODOS Distributed Operating System. </title> <booktitle> Proceedings of the 1992 IEEE Conference in Computers, Communications and Automation Towards the 21 st Century TENCON92. </booktitle>
Reference-contexts: RHODOS has been designed with the microkernel architecture forming an abstract machine on which kernel and system servers provide the bulk of the services and facilities expected from any operating system <ref> [Toomey et al. 92] </ref>, [De Paoli et al. 94]. Other systems based on the microkernel approach include MACH [Accetta et al. 86], QNX [Hilderbrand 92] and Chorus [Rozier et al. 88].
Reference: [Wickham et al. 94] <author> G. Wickham, D. De Paoli, M. Hobbs. </author> <title> Implementation of the RHODOS Space Manager. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
References-found: 8

