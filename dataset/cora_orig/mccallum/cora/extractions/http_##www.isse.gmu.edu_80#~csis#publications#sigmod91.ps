URL: http://www.isse.gmu.edu:80/~csis/publications/sigmod91.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Title: TOWARD A MULTILEVEL SECURE RELATIONAL DATA MODEL  
Author: Sushil Jajodia and Ravi Sandhu 
Address: Fairfax, VA 22030-4444  
Affiliation: Center for Secure Information Systems and Department of Information and Software Systems Engineering George Mason University,  
Date: May 1991, pages 50-59.  
Note: Proc. ACM SIGMOD International Conference on Management Data, Denver, Colarado,  
Abstract: Although there are several efforts underway to build multilevel secure relational database management systems, there is no clear consensus regarding what a multilevel secure relational data model exactly is. In part this lack of consensus on fundamental issues reflects the subtleties involved in extending the classical (single-level) relational model to a multilevel environment. Our aim in this paper is to discuss the most fundamental aspects of the multilevel secure relational model. Specifically, we consider two requirements: entity integrity and update semantics. Our overall goal is to preserve as much as possible the simplicity and flexibility of the relational model without sacrificing security in the process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dorothy E. Denning, </author> <title> Cryptography and Data Security. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> (1982). </year>
Reference-contexts: These so-called discretionary access controls do not provide adequate mechanisms for preventing unauthorized disclosure of information. Therefore, commercial DBMSs are not suitable for use in multilevel environments. Multilevel systems require additional mechanisms for enforcing mandatory (or nondiscretionary) access controls <ref> [1] </ref>. As a result, there are several efforts underway to build multilevel secure relational DBMSs. These efforts are following the same path taken by object-oriented databases. <p> Sections 4 and 5 discuss entity integrity and relation updates in a multilevel context as outlined above. The last section concludes the paper. 2 BASIC CONCEPTS Below we give a brief description of the relevant multilevel security concepts. For a more detailed discussion, we refer the reader to <ref> [1] </ref> or [9]. The way in which a secure DBMS controls access to data is known as the system's security policy. In the context of multilevel databases, a secure DBMS must enforce a suitable interpretation of the mandatory access controls employed in manual systems.
Reference: [2] <author> Dorothy E. Denning, Teresa F. Lunt, Roger R. Schell, Mark Heckman, and William R. Shock-ley, </author> <title> "A multilevel relational data model." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <month> 220-234 </month> <year> (1987). </year>
Reference-contexts: As a result, there are several efforts underway to build multilevel secure relational DBMSs. These efforts are following the same path taken by object-oriented databases. On one hand, several database vendors (e.g, Oracle, Sybase, Trudata, to name a few) are busy building commercial products, and others (e.g, SRI <ref> [2, 10] </ref>, SCTC [4]) are building research prototypes. On the other hand, there is no clear consensus regarding what a multilevel secure relational data model exactly is. This has led to continuing arguments about basic principles such as integrity requirements and update semantics. <p> In general AK will consist of multiple attributes. Entity integrity from the standard relational model prohibits null values for any of the attributes in AK. This property, taken from <ref> [2] </ref>, extends to multilevel relations as follows. Property 1 [Entity Integrity] Let AK be the apparent key of R. A multilevel relation R satisfies entity integrity if and only if for all instance R c of R and t 2 R c 1. <p> Each instance at an access class c is intended to represent the version of reality appropriate for the access class c. The next property is concerned with consistency between the different relation instances. The need for such a property was identified in <ref> [2] </ref>. However the formulations of [2] were incorrect. The correct formulation was first given in [5] and adopted by SeaView researchers in [10]. <p> Each instance at an access class c is intended to represent the version of reality appropriate for the access class c. The next property is concerned with consistency between the different relation instances. The need for such a property was identified in <ref> [2] </ref>. However the formulations of [2] were incorrect. The correct formulation was first given in [5] and adopted by SeaView researchers in [10]. <p> Therefore, in this case, PI amounts to saying that AK ! A R , which is precisely the definition of the primary key in relational theory. Property 4 was originally proposed in <ref> [2] </ref>. However it was coupled with an additional multivalued dependency requirement AK; C AK !! A i ; C i to be satisfied by every instance. There are unpleasant consequences of this multivalued dependency, as pointed out in [5].
Reference: [3] <author> Patricia P. Griffiths and Bradford W. Wade, </author> <title> "An authorization mechanism for a relational database system." </title> <journal> ACM Trans. on Database Systems, </journal> (1)3:242-255, (September 1976). 
Reference-contexts: Most commercial DBMSs provide some form of data security by controlling modes of access privileges fl This work was partially supported by the U.S. Air Force, Rome Air Development Center through subcontract #C/UB-49;D.O.No.0042 of prime contract 5#F-30602-88-D-0026, Task B-O-3610 with CALSPAN-UB Research Center. of users to data <ref> [3, 12] </ref>. These so-called discretionary access controls do not provide adequate mechanisms for preventing unauthorized disclosure of information. Therefore, commercial DBMSs are not suitable for use in multilevel environments. Multilevel systems require additional mechanisms for enforcing mandatory (or nondiscretionary) access controls [1].
Reference: [4] <author> J. T. Haigh, R. C. O'Brien, and D. J. Thom-sen, </author> <title> "The LDV Secure Relational DBMS Model." Database Security IV: Status and Prospects, </title> <editor> Ja-jodia, S. and Landwehr, C. (editors), </editor> <publisher> North-Holland, </publisher> <year> 1991, </year> <note> to appear. </note>
Reference-contexts: These efforts are following the same path taken by object-oriented databases. On one hand, several database vendors (e.g, Oracle, Sybase, Trudata, to name a few) are busy building commercial products, and others (e.g, SRI [2, 10], SCTC <ref> [4] </ref>) are building research prototypes. On the other hand, there is no clear consensus regarding what a multilevel secure relational data model exactly is. This has led to continuing arguments about basic principles such as integrity requirements and update semantics. <p> Because of the inter-instance property these changes must be properly reflected in the instances R c 0 &gt;c . The latter effect is only partly determined by the core integrity properties of section 4 leaving room for different interpretations (see <ref> [4, 5, 7, 11, 13] </ref>). Strictly speaking in all cases we should speak of operations being performed by a c-subject (or c-process) rather than a c-user. It is however easier to intuitively consider the semantics by visualizing a human being interactively carrying out these operations. <p> This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [4, 7, 10, 11] </ref>.
Reference: [5] <author> Sushil Jajodia and Ravi Sandhu, </author> <title> "Polyinstan-tiation integrity in multilevel relations." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <month> 104-115 (May </month> <year> 1990). </year>
Reference-contexts: The null integrity requirement was first identified in <ref> [5] </ref>. Consider the relation instance for SOD given in figure 5. <p> The next property is concerned with consistency between the different relation instances. The need for such a property was identified in [2]. However the formulations of [2] were incorrect. The correct formulation was first given in <ref> [5] </ref> and adopted by SeaView researchers in [10]. <p> Property 4 was originally proposed in [2]. However it was coupled with an additional multivalued dependency requirement AK; C AK !! A i ; C i to be satisfied by every instance. There are unpleasant consequences of this multivalued dependency, as pointed out in <ref> [5] </ref>. Thereafter our position has been that polyinstantiation integrity should only require the functional dependency stated in property 4. 5 THE UPDATE OPERATIONS In this section, we discuss in detail the three update (insert, update, and delete) operations. We keep the syntax for these operations identical to the standard SQL. <p> Because of the inter-instance property these changes must be properly reflected in the instances R c 0 &gt;c . The latter effect is only partly determined by the core integrity properties of section 4 leaving room for different interpretations (see <ref> [4, 5, 7, 11, 13] </ref>). Strictly speaking in all cases we should speak of operations being performed by a c-subject (or c-process) rather than a c-user. It is however easier to intuitively consider the semantics by visualizing a human being interactively carrying out these operations.
Reference: [6] <author> Sushil Jajodia and Ravi Sandhu, </author> <title> "Database security: Current status and key issues," </title> <journal> ACM SIG-MOD Record, </journal> (19)4:123-126 (December 1990). 
Reference-contexts: This paper points out clearly how subtle this interaction can be. We believe that there is much more interesting work that remains to be done in this area (see, for example, <ref> [6] </ref>). In particular we would like to give a complete and formal set of principles that can help with design and implementation of multilevel secure relational DBMSs. Initial steps have been taken in this direction in the present paper, but more remains to be done.
Reference: [7] <author> Sushil Jajodia, Ravi Sandhu, and Edgar Sib-ley, </author> <title> "Update semantics of multilevel relations." </title> <booktitle> Proc. 6th Annual Computer Security Applications Conf., </booktitle> <month> December </month> <year> 1990, </year> <pages> pages 103-112. </pages>
Reference-contexts: Because of the inter-instance property these changes must be properly reflected in the instances R c 0 &gt;c . The latter effect is only partly determined by the core integrity properties of section 4 leaving room for different interpretations (see <ref> [4, 5, 7, 11, 13] </ref>). Strictly speaking in all cases we should speak of operations being performed by a c-subject (or c-process) rather than a c-user. It is however easier to intuitively consider the semantics by visualizing a human being interactively carrying out these operations. <p> This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [4, 7, 10, 11] </ref>. <p> Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed [4, 7, 10, 11]. In this paper we will adopt the minimal propagation rule <ref> [7] </ref> which introduces exactly those tuples in R c 0 &gt;c that are needed to preserve inter-instance property, i.e., put t 0 and t 00 (if t 00 exists and survives subsumption) in each R c 0 &gt;c and nothing else.
Reference: [8] <author> B. W. Lampson, </author> <title> "A note on the confinement problem." </title> <journal> CACM, </journal> (16)10:613-615, (Octo-ber 1973). 
Reference-contexts: A secure system must additionally guard against covert channels <ref> [8] </ref>. Covert channels provide indirect means by which information by subjects at high security classes can be passed down to subjects at lower security classes. To illustrate, consider once again the multilevel relation given in figure 1.
Reference: [9] <author> Carl E. Landwehr, </author> <title> "Formal models for computer security." </title> <journal> ACM Computing Surveys, </journal> (13)3:247-278 (September 1981). 
Reference-contexts: The last section concludes the paper. 2 BASIC CONCEPTS Below we give a brief description of the relevant multilevel security concepts. For a more detailed discussion, we refer the reader to [1] or <ref> [9] </ref>. The way in which a secure DBMS controls access to data is known as the system's security policy. In the context of multilevel databases, a secure DBMS must enforce a suitable interpretation of the mandatory access controls employed in manual systems.
Reference: [10] <author> Teresa F. Lunt, Dorothy E. Denning, Roger R. Schell, Mark Heckman, and William R. Shock-ley, </author> <title> "The SeaView security model." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(6) </volume> <month> 593-607 </month> <year> (1990). </year>
Reference-contexts: As a result, there are several efforts underway to build multilevel secure relational DBMSs. These efforts are following the same path taken by object-oriented databases. On one hand, several database vendors (e.g, Oracle, Sybase, Trudata, to name a few) are busy building commercial products, and others (e.g, SRI <ref> [2, 10] </ref>, SCTC [4]) are building research prototypes. On the other hand, there is no clear consensus regarding what a multilevel secure relational data model exactly is. This has led to continuing arguments about basic principles such as integrity requirements and update semantics. <p> The next property is concerned with consistency between the different relation instances. The need for such a property was identified in [2]. However the formulations of [2] were incorrect. The correct formulation was first given in [5] and adopted by SeaView researchers in <ref> [10] </ref>. Property 3 [Inter-Instance Integrity] R satisfies inter-instance integrity if and only if for all c 0 c we have R c 0 = (R c ; c 0 ) where the filter function produces the c 0 -instance R c 0 from R c as follows: 1. <p> This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [4, 7, 10, 11] </ref>.
Reference: [11] <author> Teresa F. Lunt and Donovan Hsieh, </author> <title> "Update semantics for a multilevel relational database." Database Security IV: Status and Prospects, </title> <editor> Ja-jodia, S. and Landwehr, C. (editors), </editor> <publisher> North-Holland, </publisher> <year> 1991, </year> <note> to appear. </note>
Reference-contexts: Because of the inter-instance property these changes must be properly reflected in the instances R c 0 &gt;c . The latter effect is only partly determined by the core integrity properties of section 4 leaving room for different interpretations (see <ref> [4, 5, 7, 11, 13] </ref>). Strictly speaking in all cases we should speak of operations being performed by a c-subject (or c-process) rather than a c-user. It is however easier to intuitively consider the semantics by visualizing a human being interactively carrying out these operations. <p> This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [4, 7, 10, 11] </ref>.
Reference: [12] <author> Fausto Rabitti, Darrell Woelk, and Won Kim, </author> <title> "A model of authorization for object-oriented and semantic databases." </title> <booktitle> Proc Conf. on Extending Database Technology, </booktitle> <pages> 231-250, </pages> <month> (March </month> <year> 1988). </year>
Reference-contexts: Most commercial DBMSs provide some form of data security by controlling modes of access privileges fl This work was partially supported by the U.S. Air Force, Rome Air Development Center through subcontract #C/UB-49;D.O.No.0042 of prime contract 5#F-30602-88-D-0026, Task B-O-3610 with CALSPAN-UB Research Center. of users to data <ref> [3, 12] </ref>. These so-called discretionary access controls do not provide adequate mechanisms for preventing unauthorized disclosure of information. Therefore, commercial DBMSs are not suitable for use in multilevel environments. Multilevel systems require additional mechanisms for enforcing mandatory (or nondiscretionary) access controls [1].
Reference: [13] <author> Ravi Sandhu, Sushil Jajodia, and Teresa Lunt, </author> <title> "A new polyinstantiation integrity constraint for multilevel relations." </title> <booktitle> Proc. IEEE Workshop on Computer Security Foundations, </booktitle> <month> 159-165 (June </month> <year> 1990). </year>
Reference-contexts: Because of the inter-instance property these changes must be properly reflected in the instances R c 0 &gt;c . The latter effect is only partly determined by the core integrity properties of section 4 leaving room for different interpretations (see <ref> [4, 5, 7, 11, 13] </ref>). Strictly speaking in all cases we should speak of operations being performed by a c-subject (or c-process) rather than a c-user. It is however easier to intuitively consider the semantics by visualizing a human being interactively carrying out these operations.
References-found: 13

