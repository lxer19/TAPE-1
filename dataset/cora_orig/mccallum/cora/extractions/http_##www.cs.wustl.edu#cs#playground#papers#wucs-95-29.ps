URL: http://www.cs.wustl.edu/cs/playground/papers/wucs-95-29.ps
Refering-URL: http://www.cs.wustl.edu/cs/playground/papers/wucs-95-29-abstract.html
Root-URL: http://www.cs.wustl.edu
Title: EUPHORIA: End-User Construction of Direct Manipulation User Interfaces for Distributed Applications  
Author: T. Paul McCartney, Kenneth J. Goldman, and David E. Saff 
Date: August 1995  
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Pubnum: WUCS-95-29  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Amir Aboueinaga. TRW Sr. </author> <title> Staff Engineer and FAA Consultant. </title> <type> Personal Communication. </type>
Reference-contexts: The length of the wedge is used to represent the relative speed of the airplane (i.e., the longer the wedge, the faster the airplane is moving). Over time, the position and length of the airplanes are updated to display the current state <ref> [1] </ref>. An aggregate mapping for the air traffic control GUI could be created as follows. The prototype instance, a widget of an airplane, is created (Figure 11a) with three published attributes: current position, last position, and ight ID.
Reference: [2] <author> A. Borning. </author> <title> Thinglab - A Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Extensive work has been done in the area of user interface construction. Thinglab <ref> [2] </ref> uses constraints to specify relationships between parts of a simulation graphical display. Thinglab represents early work in graphical constraint systems and provided the foundation for many later systems. Garnet [23] provides a toolkit which allows the user to construct interactive graphical user interfaces using an object oriented constraint-based library.
Reference: [3] <author> Jerome R. Cox, Jr., Mike Gaddis, and Jonathan S. Turner. </author> <title> Project Zeus: Design of a Broadband Network and its Application on a University Campus. </title> <journal> IEEE Network, </journal> <pages> pages 20-30, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: This work is part of a project on construction of distributed multimedia applications on top of an ATM testbed <ref> [3] </ref>. 7.3 Module abstractions The module visual abstraction described in Section 2 is an intuitive mechanism for configuring Playground applications. However, for large applications it can become cumbersome to deal with many interconnected modules in this way. We have a number of enhancements to the module visual abstraction planned.
Reference: [4] <author> B. Freeman-Benson, J. Maloney, Alan Borning. </author> <title> An Incremental Constraint Solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <year> 1990. </year>
Reference-contexts: We developed a constraint algorithm called UltraBlue [20] to serve as the constraint engine of EUPHORIA. UltraBlue inherits ideas from a well known constraint algorithm called DeltaBlue <ref> [4] </ref>. Like DeltaBlue, UltraBlue is a graph-based constraint algorithm for maintaining and solving a set of constraint relationships. Constraints are multi-way, meaning that the computation direction of a constraint graph can be changed dynamically based on the incremental addition or deletion of constraints.
Reference: [5] <author> David Gelernter and Nicholas Carriero. </author> <title> Coordinations Languages and their Significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: In this section we highlight some of the related work in each of these areas. The purpose of a coordination language <ref> [5] </ref> is to separate communication from computation in order to offer programmers a uniform communication abstraction that is independent of a particular programming language or operating system.
Reference: [6] <author> Kenneth J. Goldman, et. al. </author> <note> Welcome to the Programmers Playground! http://www.cs.wustl.edu/cs/playground/. </note>
Reference-contexts: The Process Control Simulation and Medical Image Processing application described previously were among the assignments from the course. The Playground World Wide Web site <ref> [6] </ref> contains general information, live interactive demonstrations of both the Programmers Playground and EUPHORIA, and course materials from CS333. ACKNOWLEDGMENTS We thank EUPHORIA users, including the students in CS333 for their useful comments. We thank 17 Bala Swaminathan and Ram Sethuraman for their work in developing the Playground library.
Reference: [7] <author> Kenneth J. Goldman, T. Paul McCartney, Ram Sethuraman, and Bala Swaminathan. </author> <title> The Programmers Playground: A Demonstration. </title> <booktitle> In Proceedings of the 1995 ACM International Conference on Multimedia, </booktitle> <month> November </month> <year> 1995. </year> <note> To appear. See also the conference CD-ROM proceedings for a longer version. </note>
Reference-contexts: Another use of aggregate mappings is to create tabular displays (e.g., a spreadsheet). A multimedia Flight ID (a) Flight ID Set of Plane tuples (b) USAir-186 TWA-578 USAir-193 (c) 16 teleconferencing application GUI that we have previously developed <ref> [7] </ref> could also be created using tables defined by aggregate mappings (e.g., each participant of a conference is represented as a picture in an interactive table). <p> Modules will be configured within EUPHORIA rather than in a separate user interface (see For example, the filter module described in Section 5.2 could be implemented as a number of communicating modules in a distributed image processing pipeline <ref> [7] </ref>. This would speed up computation, since frames of a movie could be processed on two or more computers in parallel. A series of several pipeline modules would make Figure 6 quite difficult to comprehend.
Reference: [8] <author> Kenneth J. Goldman, T. Paul McCartney, Ram Sethuraman, Bala Swaminathan, and Todd Rodgers. </author> <title> Building Interactive Distributed Applications in C++ with The Programmers Playground. </title> <institution> Washington University Department of Computer Science technical report WUCS-95-20, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: It con sists of approximately 1000 lines of code. 11 intervals of time, the set of changes to the published variables is propagated simultaneously into the constraint graph of EUPHORIA. Output changes to published variables are also produced within an atomic step operation <ref> [8] </ref> at regular intervals. These synchronizations and simultaneous updates are necessary to keep values consistent in the presence of asynchronously running modules and interprocess communication delays.
Reference: [9] <author> Kenneth J. Goldman, Bala Swaminathan, T. Paul McCartney, Michael D. Anderson, and Ram Sethuraman. </author> <title> The Programmers Playground: I/O Abstraction for User-Configurable Distributed Applications. </title> <journal> IEEE Transactions on Software Engineering. </journal> <note> To appear. </note>
Reference-contexts: This section provides some background on Playground and the I/O abstraction model on which it is based. We limit this background discussion to concepts necessary for this paper. Details on Playground may be found elsewhere <ref> [9] </ref>. In the I/O abstraction model, each module in a distributed system has a data boundary 2 containing published variables that may be externally observed and/or manipulated. Modules are written in a standard programming language (e.g., C++) using the Playground library.
Reference: [10] <author> Michael M. Gorlick and Rami R. Razouk. </author> <title> Using Weaves for Software Construction and Analysis. </title> <booktitle> In Proceedings of the 13th International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: However, the modules of the system must still be concerned with when to send or receive messages on these ports. In Polylith [25], a configuration is expressed using module interconnection constructs that establish procedure call bindings among modules in a distributed system. The Weaves system <ref> [10] </ref> provides a configuration mechanism based on dataow. The ViewStation system [27] provides support for interactive media-based applications, where modules perform explicit communication using send and receive primitives.
Reference: [11] <author> Brent Hailpern and Gail E. Kaiser. </author> <title> Dynamic Reconfiguration in an Object-Based Programming Language with Distributed Shared Data. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 73-80, </pages> <month> May </month> <year> 1991. </year>
Reference: [12] <author> Tyson R. Henry and Scott E. Hudson. </author> <title> Using Active Data in a UIMS. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software, </booktitle> <pages> pages 167-178, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Whenever one or more constraint variables change, the changes are propagated through the graph, updating all connected constraint variables according to the established constraint relationships. Other types of constraints include stay constraints and active value constraints <ref> [12] </ref>. Stay constraints serve to keep a constraint variable constant, in the absence of other constraints. These constraints are usually specified with a low preference level. When other constraints with higher preference levels are specified, the stay constraints are overridden, becoming unenforced.
Reference: [13] <author> Ralph D. Hill. </author> <title> Abstraction-Link-View Paradigm: Using Constraints to Connect User Interfaces to Applications. </title> <booktitle> In ACM Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 335-342, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Our graphical tools are then used to define relationships among the states of modules in a distributed system and the state of the GUI, as well as relationships among graphics objects within the GUI. The Rendezvous project <ref> [13] </ref> concentrates on the separation of user interfaces from their applications through the use of interprocess communication. Rendezvous is a transition from purely user interface oriented systems to systems that decouple the construction of the graphical user interface from their applications.
Reference: [14] <author> Dan Ingalls, Scott Wallace, et. al. Fabrik: </author> <title> A Visual Programming Environment. </title> <booktitle> In OOPSLA Conference Proceedings, </booktitle> <pages> pages 176-190, </pages> <month> September </month> <year> 1988. </year>
Reference: [15] <author> J. Jagadeesh and Y. Wang. </author> <title> LabVIEW. Product Review, </title> <booktitle> Computer, </booktitle> <month> February </month> <year> 1993. </year>
Reference-contexts: Garnet [23] provides a toolkit which allows the user to construct interactive graphical user interfaces using an object oriented constraint-based library. Garnet does not provide end-users with graphical mechanisms for establishing relationships between the user interface and the application that it controls. Fabrik [14][19] and LabVIEW <ref> [15] </ref> provide self-contained visual programming environments for sequential computation. Fabrik represents visual programs as data ow graphs of connected component icons. Pins are used as part of an overall electronics store metaphor, representing data ports used in connecting the components of a visual program.
Reference: [16] <author> T. D. Kimura, J. W. Choi, and J. M. Mack. </author> <title> A Visual Language for Keyboardless Programming. </title> <institution> Washington University Department of Computer Science technical report WUCS-86-6, </institution> <month> June </month> <year> 1986. </year>
Reference-contexts: A promising approach to this problem would be the integration of Playground with a general purpose visual computation language based on dataow concepts, such as the Show and Tell system <ref> [16] </ref>. 7.2 Aggregate mappings An aggregate is a collection of homogeneous data structures. Playground supports a number of aggregate data types including arrays and groupings. We plan to implement aggregate mappings in EUPHORIA, allowing end-users to create interactive visualizations of an aggregate through the use of declarative mapping rules.
Reference: [17] <author> Jeff Kramer, Jeff Magee, and Keng Ng. </author> <title> Graphical Configuration Programming. </title> <journal> IEEE Computer, </journal> <volume> 22(10) </volume> <pages> 53-65, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Processes are expressed in a separate computation language that allows ports to be declared for interconnection within Darwin. Conic, the predecessor of Darwin, provides a graphical configuration mechanism for establishing bindings among the ports <ref> [17] </ref>. However, the modules of the system must still be concerned with when to send or receive messages on these ports. In Polylith [25], a configuration is expressed using module interconnection constructs that establish procedure call bindings among modules in a distributed system.
Reference: [18] <author> Jeff Kramer, Jeff Magee, and Morris Sloman. </author> <title> Configuring Distributed Systems. </title> <booktitle> In Proceedings of the 5th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: The separation of computation from communication permits local reasoning about functional components in terms of well-defined interfaces and allows systems to be designed by assembling collections of individually verified components. Coordination languages typically provide a structured configuration mechanism for specifying relationships among program modules. For example, Darwin <ref> [18] </ref> is a configuration language for managing message-passing connections between process ports in a dynamic system. Processes are expressed in a separate computation language that allows ports to be declared for interconnection within Darwin.
Reference: [19] <editor> Frank Ludolph, Yu-Ying Chow, et. al. </editor> <booktitle> The Fabrik Programming Environment. In Proceedings of the IEEE 18 Workshop on Visual Languages, </booktitle> <pages> pages 222-230, </pages> <year> 1988. </year>
Reference: [20] <author> T. Paul McCartney. </author> <title> User Interface Applications of a Multi-way Constraint Solver. </title> <institution> Washington University Department of Computer Science technical report WUCS-95-22, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: We developed a constraint algorithm called UltraBlue <ref> [20] </ref> to serve as the constraint engine of EUPHORIA. UltraBlue inherits ideas from a well known constraint algorithm called DeltaBlue [4]. Like DeltaBlue, UltraBlue is a graph-based constraint algorithm for maintaining and solving a set of constraint relationships.
Reference: [21] <author> T. Paul McCartney and Kenneth J. Goldman. </author> <title> EUPHORIA Reference Manual. </title> <institution> Washington University Department of Computer Science technical report WUCS-95-19, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: EUPHORIA supports all Playground base types (e.g., integer, string) and tuples. Each published variable is represented as a color-coded rectangle with a variable name and read/write permissions. Tuple variables containing a number of heterogeneous fields can be created interactively and viewed hierarchically <ref> [21] </ref>. 4.7 Alternatives A space can have multiple representations called alternatives. For example, a simulation GUI might consist of an alternative that shows the simulation state graphically, allowing direct manipulation, and an alternative that shows expanded information in a more text and button type representation.
Reference: [22] <author> T. Paul McCartney and Kenneth J. Goldman. </author> <title> Visual Specification of Interprocess and Intraprocess Communication. </title> <booktitle> In Proceedings of the 10th International Symposium on Visual Languages, </booktitle> <month> October </month> <year> 1994, </year> <pages> pp. 80-87. </pages>
Reference-contexts: in a distributed system; Playground modules communicate asynchronously without the need for a centralized constraint solver. 4 EUPHORIA USER INTERFACE MANAGEMENT SYSTEM The EUPHORIA user interface management system is based on a visual language for describing communication among modules in a distributed system and graphics components of a user interface <ref> [22] </ref>. This section describes how users create simple and compound objects of a user interface and define relationships among those objects. Relationships include constraints and encapsulation of graphics object groups by means of a data boundary. EUPHORIAs graphics editor consists of three parts (see Figure 2).
Reference: [23] <author> B. A. Myers, et al. Garnet: </author> <title> Comprehensive Support for Graphical, Highly Interactive User Interfaces. </title> <journal> IEEE Computer, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Extensive work has been done in the area of user interface construction. Thinglab [2] uses constraints to specify relationships between parts of a simulation graphical display. Thinglab represents early work in graphical constraint systems and provided the foundation for many later systems. Garnet <ref> [23] </ref> provides a toolkit which allows the user to construct interactive graphical user interfaces using an object oriented constraint-based library. Garnet does not provide end-users with graphical mechanisms for establishing relationships between the user interface and the application that it controls.
Reference: [24] <author> J. K. Ousterhout. </author> <title> TCL: An Embedded Command Language. </title> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <address> CA, </address> <month> January, </month> <year> 1990. </year>
Reference-contexts: The Weaves system [10] provides a configuration mechanism based on dataow. The ViewStation system [27] provides support for interactive media-based applications, where modules perform explicit communication using send and receive primitives. The VuSystem programming environment includes a set of programming conventions, media processing elements and a TCL-based <ref> [24] </ref> GUI for specifying both in-band media communication and out-of-band control communication. 4 User interfaces to these applications are typically constructed by writing TCL scripts. Extensive work has been done in the area of user interface construction.
Reference: [25] <author> J. M. Purtilo. </author> <title> The Polylith Software Bus. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(1) </volume> <pages> 151-174, </pages> <year> 1994. </year>
Reference-contexts: Conic, the predecessor of Darwin, provides a graphical configuration mechanism for establishing bindings among the ports [17]. However, the modules of the system must still be concerned with when to send or receive messages on these ports. In Polylith <ref> [25] </ref>, a configuration is expressed using module interconnection constructs that establish procedure call bindings among modules in a distributed system. The Weaves system [10] provides a configuration mechanism based on dataow.
Reference: [26] <author> Robert W. Scheier and Jim Gettys. </author> <title> The X Window System. </title> <type> Technical Report MIT/LCS/TR-368, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: At regular 3 Due to communication delays over the Internet, the two movie displays may not be precisely synchronized. 4 Currently, the tiny graphics package is written using only a small subset of the X window systems Xlib library <ref> [26] </ref>. It con sists of approximately 1000 lines of code. 11 intervals of time, the set of changes to the published variables is propagated simultaneously into the constraint graph of EUPHORIA. Output changes to published variables are also produced within an atomic step operation [8] at regular intervals.
Reference: [27] <author> David L. Tennenhouse, et. al. </author> <title> A Software-Oriented Approach to the Design of Media Processing Environments. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing Systems, </booktitle> <pages> pp. 435-444, </pages> <address> Boston MA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In Polylith [25], a configuration is expressed using module interconnection constructs that establish procedure call bindings among modules in a distributed system. The Weaves system [10] provides a configuration mechanism based on dataow. The ViewStation system <ref> [27] </ref> provides support for interactive media-based applications, where modules perform explicit communication using send and receive primitives.
References-found: 27

