URL: ftp://dirleton.csres.utexas.edu/pub/reports/066.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: (512) 322-9951  
Title: Mechanically Verifying Safety and Liveness Properties of Delay Insensitive Circuits  
Author: David M. Goldschlag 
Note: This work was supported in part at Computational Logic, Inc., by the Defense Advanced Research Projects Agency, ARPA Order 7406, and ONR Contract N00014-88-C-0454. The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Defense Advanced Research Projects Agency, the Office of Naval Research, or the U.S. Government.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Date: 66 March, 1991  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity [3, 6, 7, 8] on the Boyer-Moore prover <ref> [1] </ref>. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. <p> Section 3 defines the FIFO circuit. Section 4 presents the correctness theorems, which are proved in section 5. Section 6 discusses related work and offers concluding remarks. 2. The Proof System Mechanized Unity is implemented in the Nqthm version of the Boyer-Moore logic <ref> [1] </ref> enhanced with a facility for defining fully quantified definitions [10] and the Kaufmann proof checker [9]. Nqthm is a quantifier-free first order logic with a prefix syntax and semantics similar to pure Lisp.
Reference: 2. <author> Jerry R. Burch. </author> <title> Combining CTL, Trace Theory, and Timing Models. In Automatic Verification Methods for Finite State Systems, </title> <editor> J. Sifakis, Eds., </editor> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 334-348. </pages>
Reference-contexts: The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15]. Synchronized Transitions does provide a nice composition mechanism for hierarchical circuit design. Other research has produced promising techniques for fully automatic verification of certain safety [4] and liveness properties <ref> [2] </ref> using trace theory and model checking. These systems check whether a finite state machine satisfies a formula by, essentially, completely simulating the machine. If the machine does not satisfy the formula, the system can return an offending trace; this facility is useful for debugging.
Reference: 3. <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison Wesley, </publisher> <address> Massachusetts, </address> <year> 1988. </year>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity <ref> [3, 6, 7, 8] </ref> on the Boyer-Moore prover [1]. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. <p> In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. Many researchers have used the interleaved model of concurrency as a basis for modeling delay insensitive circuits <ref> [11, 14, 3] </ref>. By restricting the power of program statements and assuming a non-deterministic yet weakly fair scheduling paradigm, interleaving adequately models circuit behavior. Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications.
Reference: 4. <author> David L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1988. </year>
Reference-contexts: The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15]. Synchronized Transitions does provide a nice composition mechanism for hierarchical circuit design. Other research has produced promising techniques for fully automatic verification of certain safety <ref> [4] </ref> and liveness properties [2] using trace theory and model checking. These systems check whether a finite state machine satisfies a formula by, essentially, completely simulating the machine. If the machine does not satisfy the formula, the system can return an offending trace; this facility is useful for debugging.
Reference: 5. <author> S.J. Garland, J.V. Guttag, J.J. Horning. </author> <title> "Debugging Larch Shared Language Specifications". </title> <journal> IEEE Transactions on Software Engineering SE-16, </journal> <month> 9 (September </month> <year> 1990). </year>
Reference-contexts: Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications. Programs in the Synchronized Transitions [14, 15] notation are similar to Unity programs and have been mechanically verified using LP <ref> [5] </ref>. However, Synchronized Transitions only provides for the verification of invariance properties. This paper does not propose criteria for determining whether a circuit is truly delay insensitive. Rather, given a delay insensitive circuit, it describes how to verify its correctness properties under the interleaved model of concurrency. <p> This specification of the queue formalizes the assumptions about its environment. Mechanized Unity permits the mechanically verified proof of circuits of arbitrary size. This work is similar to Synchronized Transitions [14], especially the later work [15] which was 11 mechanized on the Larch Prover <ref> [5] </ref>. Synchronized Transitions uses a syntax similar to Unity for specifying hardware. It can only be used, however, to prove invariance properties. The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15].
Reference: 6. <author> David M. Goldschlag. </author> <title> Mechanizing Unity. In Programming Concepts and Methods, </title> <editor> M. Broy and C. B. Jones, Eds., </editor> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity <ref> [3, 6, 7, 8] </ref> on the Boyer-Moore prover [1]. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings.
Reference: 7. <author> David M. Goldschlag. </author> <title> "Mechanically Verifying Concurrent Programs with the Boyer-Moore Prover". </title> <journal> IEEE Transactions on Software Engineering SE-16, </journal> <month> 9 (September </month> <year> 1990). </year>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity <ref> [3, 6, 7, 8] </ref> on the Boyer-Moore prover [1]. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings.
Reference: 8. <author> David Goldschlag. </author> <title> A Mechanical Formalization of Several Fairness Notions. </title> <type> Tech. </type> <institution> Rept. </institution> <month> 65, </month> <title> Computational Logic, </title> <publisher> Inc. </publisher> <address> Austin Texas 78703, </address> <month> March, </month> <year> 1991. </year>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity <ref> [3, 6, 7, 8] </ref> on the Boyer-Moore prover [1]. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings.
Reference: 9. <author> M. Kaufmann. </author> <title> A User's Manual for an Interactive Enhancement to the Boyer-Moore Theorem Prover. </title> <type> Tech. </type> <institution> Rept. ICSCA-CMP-60, Institute for Computing Science, University of Texas at Austin, Austin, </institution> <address> TX 78712, </address> <year> 1987. </year> <note> Also available through Computational Logic, </note> <institution> Inc., </institution> <address> Suite 290, 1717 West Sixth Street, Austin, TX 78703. </address>
Reference-contexts: Section 6 discusses related work and offers concluding remarks. 2. The Proof System Mechanized Unity is implemented in the Nqthm version of the Boyer-Moore logic [1] enhanced with a facility for defining fully quantified definitions [10] and the Kaufmann proof checker <ref> [9] </ref>. Nqthm is a quantifier-free first order logic with a prefix syntax and semantics similar to pure Lisp. Mechanized Unity defines most of its specification predicates with respect to an operational semantics characterizing an arbitrary fair execution of a concurrent program.
Reference: 10. <author> Matt Kaufmann. DEFN-SK: </author> <title> An Extension of the Boyer-Moore Theorem Prover to Handle First-Order Quantifiers. </title> <type> Tech. </type> <institution> Rept. </institution> <month> 43, </month> <title> Computational Logic, </title> <publisher> Inc., </publisher> <month> May, </month> <year> 1989. </year> <note> Draft. </note>
Reference-contexts: Section 4 presents the correctness theorems, which are proved in section 5. Section 6 discusses related work and offers concluding remarks. 2. The Proof System Mechanized Unity is implemented in the Nqthm version of the Boyer-Moore logic [1] enhanced with a facility for defining fully quantified definitions <ref> [10] </ref> and the Kaufmann proof checker [9]. Nqthm is a quantifier-free first order logic with a prefix syntax and semantics similar to pure Lisp. Mechanized Unity defines most of its specification predicates with respect to an operational semantics characterizing an arbitrary fair execution of a concurrent program.
Reference: 11. <author> Alain J. Martin. </author> <title> "Compiling Communicating Processes into Delay-Insensitive VLSI Circuits". </title> <booktitle> Distributed Computing 1 (1986), </booktitle> <pages> 226-234. </pages>
Reference-contexts: In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. Many researchers have used the interleaved model of concurrency as a basis for modeling delay insensitive circuits <ref> [11, 14, 3] </ref>. By restricting the power of program statements and assuming a non-deterministic yet weakly fair scheduling paradigm, interleaving adequately models circuit behavior. Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications. <p> Many researchers have used the interleaved model of concurrency as a basis for modeling delay insensitive circuits [11, 14, 3]. By restricting the power of program statements and assuming a non-deterministic yet weakly fair scheduling paradigm, interleaving adequately models circuit behavior. Martin's production rules <ref> [11] </ref> are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications. Programs in the Synchronized Transitions [14, 15] notation are similar to Unity programs and have been mechanically verified using LP [5]. However, Synchronized Transitions only provides for the verification of invariance properties. <p> We take these forks to be isochronic <ref> [11] </ref> (assume that the signal propagates simultaneously to the gates at the end of each fork). Each node behaves in the following way: A bit is encoded by double-rail coding. TRUE is represented by the C-element [13] CT being TRUE, and the other C-element CF being FALSE.
Reference: 12. <author> Alain J. Martin. </author> <title> Self-Timed FIFO: An Exercise in Compiling Programs into VLSI Circuits. In From HDL Descriptions to Guaranteed Correct Circuit Designs, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1987, </year> <pages> pp. 133-153. </pages>
Reference-contexts: Rather, given a delay insensitive circuit, it describes how to verify its correctness properties under the interleaved model of concurrency. The example here formalizes an n-node (FIFO) queue and presents the verification of its safety and the liveness properties. The basic element in this circuit is described in <ref> [12] </ref>. This paper is organized in the following way. Section 2 briefly describes the Boyer-Moore logic, its prover, and the mechanized implementation of Unity. Section 3 defines the FIFO circuit. Section 4 presents the correctness theorems, which are proved in section 5.
Reference: 13. <author> R. E. Miller. </author> <title> Switching Theory. </title> <publisher> Wiley, </publisher> <year> 1965. </year>
Reference-contexts: An N node queue has N-2 internal nodes, indexed N-1, . . . , 1. The I'th internal node in the FIFO circuit has the following components: 4 The labels on the wires are wire names; notice that each of the output wires from the C-elements <ref> [13] </ref> actually fork; one branch connects to the input of the successor node's corresponding C-element; the other connects to the predecessor's NOR gate. We take these forks to be isochronic [11] (assume that the signal propagates simultaneously to the gates at the end of each fork). <p> We take these forks to be isochronic [11] (assume that the signal propagates simultaneously to the gates at the end of each fork). Each node behaves in the following way: A bit is encoded by double-rail coding. TRUE is represented by the C-element <ref> [13] </ref> CT being TRUE, and the other C-element CF being FALSE. FALSE is represented by the opposite configuration. If the node is empty, both C-elements are FALSE; never will both C-elements be TRUE simultaneously.
Reference: 14. <author> J. </author> <title> Staunstrup and M.R. Greenstreet. Designing Delay Insensitive Circuits using ``Synchronized Transitions''. </title> <booktitle> In Proceedings of the IMEC-IFIP International Workshop on Applied Formal Methods for Correct VLSI Design, </booktitle> <editor> Dr. Luc Claesen, Eds., </editor> <publisher> Elsevier Science Publishers B.V., </publisher> <address> Amsterdam, </address> <year> 1989, </year> <pages> pp. 741-758. </pages>
Reference-contexts: In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. Many researchers have used the interleaved model of concurrency as a basis for modeling delay insensitive circuits <ref> [11, 14, 3] </ref>. By restricting the power of program statements and assuming a non-deterministic yet weakly fair scheduling paradigm, interleaving adequately models circuit behavior. Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications. <p> By restricting the power of program statements and assuming a non-deterministic yet weakly fair scheduling paradigm, interleaving adequately models circuit behavior. Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications. Programs in the Synchronized Transitions <ref> [14, 15] </ref> notation are similar to Unity programs and have been mechanically verified using LP [5]. However, Synchronized Transitions only provides for the verification of invariance properties. This paper does not propose criteria for determining whether a circuit is truly delay insensitive. <p> This specification of the queue formalizes the assumptions about its environment. Mechanized Unity permits the mechanically verified proof of circuits of arbitrary size. This work is similar to Synchronized Transitions <ref> [14] </ref>, especially the later work [15] which was 11 mechanized on the Larch Prover [5]. Synchronized Transitions uses a syntax similar to Unity for specifying hardware. It can only be used, however, to prove invariance properties.
Reference: 15. <author> Jorgen Staunstrup, Stephen J. Garland, and John V. Guttag. </author> <title> Localized Verification of Circuit Descriptions. In Automatic Verification Methods for Finite State Systems, </title> <editor> J. Sifakis, Eds., </editor> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 348-364. </pages>
Reference-contexts: By restricting the power of program statements and assuming a non-deterministic yet weakly fair scheduling paradigm, interleaving adequately models circuit behavior. Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications. Programs in the Synchronized Transitions <ref> [14, 15] </ref> notation are similar to Unity programs and have been mechanically verified using LP [5]. However, Synchronized Transitions only provides for the verification of invariance properties. This paper does not propose criteria for determining whether a circuit is truly delay insensitive. <p> This specification of the queue formalizes the assumptions about its environment. Mechanized Unity permits the mechanically verified proof of circuits of arbitrary size. This work is similar to Synchronized Transitions [14], especially the later work <ref> [15] </ref> which was 11 mechanized on the Larch Prover [5]. Synchronized Transitions uses a syntax similar to Unity for specifying hardware. It can only be used, however, to prove invariance properties. The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15]. <p> the later work <ref> [15] </ref> which was 11 mechanized on the Larch Prover [5]. Synchronized Transitions uses a syntax similar to Unity for specifying hardware. It can only be used, however, to prove invariance properties. The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15]. Synchronized Transitions does provide a nice composition mechanism for hierarchical circuit design. Other research has produced promising techniques for fully automatic verification of certain safety [4] and liveness properties [2] using trace theory and model checking.
Reference: 16. <author> G. L. Steele, Jr. </author> <title> Common Lisp The Language. </title> <publisher> Digital Press, </publisher> <address> 30 North Avenue, Burlington, MA 01803, </address> <year> 1984. </year> <title> Table of Contents </title>
Reference-contexts: For example, the function APPEND, which appends two lists, is defined as: Definition: Append (APPEND X Y) = (IF (LISTP X) (CONS (CAR X) (APPEND (CDR X) Y)) Y) 1 Actually, this quote mechanism is a facility of the Lisp reader <ref> [16] </ref>. 3 This function terminates because the measure (LENGTH X) decreases in each recursive call. A program in Mechanized Unity is a list of statements, where each statement has the form '(LIST FUNCTION-NAME ARG-1 . . . ARG-N). <p> The legal state predicate is encoded as a backquoted <ref> [16] </ref> term, in the following way: The first element of the term is the function symbol PROPER-NODES, so PROPER-NODES is the function that is invariant.
Reference: 1. <institution> Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity [3, 6, 7, 8] on the Boyer-Moore prover <ref> [1] </ref>. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. <p> Section 3 defines the FIFO circuit. Section 4 presents the correctness theorems, which are proved in section 5. Section 6 discusses related work and offers concluding remarks. 2. The Proof System Mechanized Unity is implemented in the Nqthm version of the Boyer-Moore logic <ref> [1] </ref> enhanced with a facility for defining fully quantified definitions [10] and the Kaufmann proof checker [9]. Nqthm is a quantifier-free first order logic with a prefix syntax and semantics similar to pure Lisp.
Reference: 2. <institution> The Proof System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15]. Synchronized Transitions does provide a nice composition mechanism for hierarchical circuit design. Other research has produced promising techniques for fully automatic verification of certain safety [4] and liveness properties <ref> [2] </ref> using trace theory and model checking. These systems check whether a finite state machine satisfies a formula by, essentially, completely simulating the machine. If the machine does not satisfy the formula, the system can return an offending trace; this facility is useful for debugging.
Reference: 3. <institution> The FIFO Circuit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 </institution>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity <ref> [3, 6, 7, 8] </ref> on the Boyer-Moore prover [1]. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. <p> In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings. Many researchers have used the interleaved model of concurrency as a basis for modeling delay insensitive circuits <ref> [11, 14, 3] </ref>. By restricting the power of program statements and assuming a non-deterministic yet weakly fair scheduling paradigm, interleaving adequately models circuit behavior. Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications.
Reference: 4. <institution> The Correctness Specifications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 </institution>
Reference-contexts: The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15]. Synchronized Transitions does provide a nice composition mechanism for hierarchical circuit design. Other research has produced promising techniques for fully automatic verification of certain safety <ref> [4] </ref> and liveness properties [2] using trace theory and model checking. These systems check whether a finite state machine satisfies a formula by, essentially, completely simulating the machine. If the machine does not satisfy the formula, the system can return an offending trace; this facility is useful for debugging.
Reference: 5. <institution> The Correctness Proof . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 </institution>
Reference-contexts: Martin's production rules [11] are statements in a non-deterministic program, and are obtained by correct refinements from higher level specifications. Programs in the Synchronized Transitions [14, 15] notation are similar to Unity programs and have been mechanically verified using LP <ref> [5] </ref>. However, Synchronized Transitions only provides for the verification of invariance properties. This paper does not propose criteria for determining whether a circuit is truly delay insensitive. Rather, given a delay insensitive circuit, it describes how to verify its correctness properties under the interleaved model of concurrency. <p> This specification of the queue formalizes the assumptions about its environment. Mechanized Unity permits the mechanically verified proof of circuits of arbitrary size. This work is similar to Synchronized Transitions [14], especially the later work [15] which was 11 mechanized on the Larch Prover <ref> [5] </ref>. Synchronized Transitions uses a syntax similar to Unity for specifying hardware. It can only be used, however, to prove invariance properties. The invariance property of a high level specification of a FIFO circuit was mechanically verified in [15].
Reference: 6. <institution> Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 i </institution>
Reference-contexts: Mechanical verification increases the trustworthiness of a proof. This paper describes the verification of an n-node first in first out (FIFO) queue. The proof system used here is a version of a mechanized implementation of Unity <ref> [3, 6, 7, 8] </ref> on the Boyer-Moore prover [1]. The Unity logic is suitable for reasoning about programs under the interleaved model of concurrency. In this model, statements in a program run sequentially, but in an unknown order. Correctness properties are true only if they hold for all possible orderings.
References-found: 22

