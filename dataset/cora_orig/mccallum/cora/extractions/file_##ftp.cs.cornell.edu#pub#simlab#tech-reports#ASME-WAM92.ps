URL: file://ftp.cs.cornell.edu/pub/simlab/tech-reports/ASME-WAM92.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/SimLab/papers.by.project.html
Root-URL: 
Email: Email: rick@cs.cornell.edu  Email: cremer@cs.uiowa.edu  
Title: SimLab: Automatically Creating Physical Systems Simulators than programming in a conventional programming language, a SimLab
Author: Richard S. Palmer James F. Cremer 
Note: Rather  
Address: Iowa  
Affiliation: Computer Science Department Cornell University  Computer Science Department University of  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Donald C. Augustin, Mark S. Fineberg, Bruce C. Johnson, Robert N. Linebarger, F. John Sansom, and Jon C. Strauss. </author> <title> The csi continuous system simulation language (cssl). </title> <journal> Simulation, </journal> <volume> 9 </volume> <pages> 281-303, </pages> <year> 1967. </year>
Reference-contexts: This causes a shortage of physical systems simulation and analysis software. In particular, there is a significant time lag between development of hardware technology (such as new parallel architectures) and its use for physical systems simulation and analysis. Existing simulation languages <ref> [12, 1, 14] </ref> are typically a thin veneer over FORTRAN: they are often, in fact, preprocessors for FORTRAN. In addition to providing a high-level/FORTRAN syntax, such systems typically provide subroutines for performing a variety of simulation operations, such as ODE integration.
Reference: [2] <author> Jan F. Broenink. </author> <title> Computer-Aided Physical-Systems Modeling and Simulation: A Bond-Graph Approach. </title> <type> PhD thesis, </type> <institution> University of Twente, Enschede, </institution> <address> The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Thus, SimLab can be used to create special purpose simulators for a wide range of problems. Besides the simulation languages described above, the bond graph formalism, developed by Paynter in the late 1950's [13], has engendered a number of simulation systems <ref> [16, 2] </ref>. Bond graphs are essentially a generalization of electrical circuits. Analogs to electrical components, such as inductors, resistors, and capacitors are defined for various physical domains.
Reference: [3] <author> C. K. Brown. PADL-2: </author> <title> a technical summary. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 2(2) </volume> <pages> 69-84, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers <ref> [3, 22, 17] </ref>, ODE integrators [7], linear algebra packages [6], and symbolic algebra systems [20, 9, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [4] <author> Fran~ois E. </author> <title> Cellier. Continuous System Modeling. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference: [5] <author> James F. Cremer and A. James Stewart. </author> <title> The architecture of newton, a general-purpose dynamics simulator. </title> <booktitle> In Proceedings of the 1989 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 1806-1811, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: For example, an event that causes a simple jump discontinuity in the state vector just requires reinitializing the integration routines. cremental updates to state equations and the corresponding code. Our previous work on the Newton system <ref> [5] </ref>, for example, demonstrated the value of incremental equation updates and code compilation for handling formation and breakage of contacts in rigid-body dynamics simulation.
Reference: [6] <author> J. Dongarra, J. R. Bunch, Cleve B. Moler, and G. W. Stewart. </author> <title> LINPACK User's Guide. </title> <publisher> SIAM Publications, </publisher> <address> Philadelphia, PA, </address> <year> 1978. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 17], ODE integrators [7], linear algebra packages <ref> [6] </ref>, and symbolic algebra systems [20, 9, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [7] <author> A. C. Hindmarsh. Odepack, </author> <title> a systematized collection of ODE solvers. </title> <editor> In R. S. Stepleman and et al., editors, </editor> <booktitle> Scientific Computing, </booktitle> <pages> pages 55-64. </pages> <publisher> North-Holland, Publ., </publisher> <address> Amsterdam, </address> <year> 1983. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 17], ODE integrators <ref> [7] </ref>, linear algebra packages [6], and symbolic algebra systems [20, 9, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. <p> As an example, the system could "know" that the LSODA <ref> [7] </ref> routine solves ODEs represented in a particular format, what parameters it requires, etc. The key is to explicitly represent the software components purpose, data conventions, and interfaces. This allows the system to reason about the code fragments it combines to create a simulator.
Reference: [8] <author> Christoph M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Cali-fornia, </address> <year> 1989. </year>
Reference-contexts: In contrast, geometric modeling has various computational models of objects such as point sets (e.g., Boundary Representations (Brep) and Constructive Solid Geometry (CSG), etc.) and operations on these objects (e.g., boolean operations, Minkowski sums, and Euler operations). (For an introduction to geometric modeling and references see Hoffmann <ref> [8] </ref>.) While much work remains in the process of unifying and expanding the Page 1 computational theory of geometric modeling, the be-ginnings of a computational theory exist.
Reference: [9] <institution> Maple Group, Waterloo, Canada. Maple, </institution> <year> 1987. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 17], ODE integrators [7], linear algebra packages [6], and symbolic algebra systems <ref> [20, 9, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> In particular, the mathematical domain of a quantity is represented using the Weyl computer algebra substrate. Weyl offers significant advantages over the traditional symbolic mathematics systems such as Macsyma [20], Maple <ref> [9] </ref> or Mathematica [21]. While these are large stand-alone programs, Weyl is an extensible toolbox for computational algebra, whose functionality is accessible at a variety of levels.
Reference: [10] <author> Leonard Meirovitch. </author> <title> Methods of Analytical Dynamics. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: As we have stated, SimLab creates simulators directly from models of physics. In developing this example we, in addition to introducing the constructs of the model specification language, compare the SimLab formulation of a mathematical model with the development in a standard textbook <ref> [10] </ref>. The differences are not significant, and arise mainly in making certain assumptions explicit. For instance, SimLab models specify mathematical domains of quantities. Unlike human readers, SimLab does not infer the mathematical domains of quantities. <p> As an example, we used the scene generator to create the following scene, represented textually below: Page 5 time <ref> [0, 10] </ref> PARTICLE /* at time = 0 */ name particle-1 charge .02 mass 1.0 position &lt;0.0, 0.0, 0.0&gt; velocity &lt;1.0, 0.0, 0.0&gt; PARTICLE /* at time = 0 */ name particle-2 charge .03 mass 1.0 position &lt;0.0, 0.0, 10.0&gt; velocity &lt;0.0, -10.0, 0.0&gt; FORALL UNORDERED-PAIRS (p1:particle, p2:particle) IN scene electrostatic-force <p> 0.0&gt; velocity &lt;1.0, 0.0, 0.0&gt; PARTICLE /* at time = 0 */ name particle-2 charge .03 mass 1.0 position &lt;0.0, 0.0, 10.0&gt; velocity &lt;0.0, -10.0, 0.0&gt; FORALL UNORDERED-PAIRS (p1:particle, p2:particle) IN scene electrostatic-force (p1,p2) This scene specifies that a system of two particles should be simulated in the time interval <ref> [0; 10] </ref>. The final two lines in the above scene specification declare that electrostatic interaction occurs between all distinct pairs of particles in the scene.
Reference: [11] <editor> Mitchell & Gauthier Assoc., </editor> <address> Concord, Mass. AU-TOSIM. </address>
Reference-contexts: The input to SimLab looks much like the models of physics described in textbooks. Section 2 develops a SimLab model of particle dynamics by comparing the SimLab syntax with a typical textbook derivation. Existing special purpose simulation tools such as AUTOSIM <ref> [11] </ref> and SD/FAST [19] generate simulation code for a particular physics model (rigid body dynamics in this case) using a particular formulation method (Kane's method). In contrast, the SimLab environment allows a user to define the physics model and formulation method.
Reference: [12] <author> Mitchell & Gauthier Assoc., </author> <title> Concord, Mass. ACSL: Advanced Continuous Simulation Language | User Guide and Reference Manual, </title> <year> 1986. </year>
Reference-contexts: This causes a shortage of physical systems simulation and analysis software. In particular, there is a significant time lag between development of hardware technology (such as new parallel architectures) and its use for physical systems simulation and analysis. Existing simulation languages <ref> [12, 1, 14] </ref> are typically a thin veneer over FORTRAN: they are often, in fact, preprocessors for FORTRAN. In addition to providing a high-level/FORTRAN syntax, such systems typically provide subroutines for performing a variety of simulation operations, such as ODE integration.
Reference: [13] <author> Henry M. Paynter. </author> <title> Analysis and Design of Engineering Systems. </title> <publisher> The M.I.T. Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1961. </year>
Reference-contexts: In contrast, the SimLab environment allows a user to define the physics model and formulation method. Thus, SimLab can be used to create special purpose simulators for a wide range of problems. Besides the simulation languages described above, the bond graph formalism, developed by Paynter in the late 1950's <ref> [13] </ref>, has engendered a number of simulation systems [16, 2]. Bond graphs are essentially a generalization of electrical circuits. Analogs to electrical components, such as inductors, resistors, and capacitors are defined for various physical domains.
Reference: [14] <author> A.A.B. Pritsker. </author> <title> Introduction to Simulation and SLAM II. </title> <publisher> Systems Publishing Corporation, </publisher> <year> 1986. </year>
Reference-contexts: This causes a shortage of physical systems simulation and analysis software. In particular, there is a significant time lag between development of hardware technology (such as new parallel architectures) and its use for physical systems simulation and analysis. Existing simulation languages <ref> [12, 1, 14] </ref> are typically a thin veneer over FORTRAN: they are often, in fact, preprocessors for FORTRAN. In addition to providing a high-level/FORTRAN syntax, such systems typically provide subroutines for performing a variety of simulation operations, such as ODE integration.
Reference: [15] <author> Howard Reingold. </author> <title> Tools for Thought. </title> <publisher> Simon and Schuster, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Since their introduction almost fifty years ago, electronic computers have been used to simulate and analyze physical systems. ENIAC, widely regarded as the first digital electronic computer, was originally commissioned to generate ballistics tables <ref> [15] </ref>, i.e., simulating the dynamics of a rigid body in a fluid (a projectile moving through the air) in a gravitational field (that of the earth).
Reference: [16] <institution> RosenCode Associates, Inc., Lansing, </institution> <note> Mich. The ENPORT Reference Manual, </note> <year> 1989. </year>
Reference-contexts: Thus, SimLab can be used to create special purpose simulators for a wide range of problems. Besides the simulation languages described above, the bond graph formalism, developed by Paynter in the late 1950's [13], has engendered a number of simulation systems <ref> [16, 2] </ref>. Bond graphs are essentially a generalization of electrical circuits. Analogs to electrical components, such as inductors, resistors, and capacitors are defined for various physical domains. <p> While lumped systems are extensively used to model a variety of engineering design and analysis problems, and in fact form the basis for computer simulation systems based on bond graphs such as Enport <ref> [16] </ref>, incorporation of distributed phenomena into SimLab will allow it to fully support problem domains such as electrostatics, fluid flow and heat transfer. Distributed parameter models are topologically more complex than lumped systems: lumped systems are graphs, topologically, while distributed parameter systems are represented with higher dimensional cell complexes.
Reference: [17] <institution> Spatial Technology, Inc., Applied Geometry, Inc., and Three-Space, Ltd., Boulder, Colorado. ACIS Geometric Modeler Interface Guide, </institution> <year> 1990. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers <ref> [3, 22, 17] </ref>, ODE integrators [7], linear algebra packages [6], and symbolic algebra systems [20, 9, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [18] <author> Guy L. Steele, Jr. </author> <title> Common Lisp, the language. </title> <note> Digital Press, second edition, </note> <year> 1990. </year>
Reference: [19] <institution> Symbolic Dynamics, Inc., Mountain View ,CA. </institution> <note> SD/FAST User's Manual, </note> <year> 1990. </year>
Reference-contexts: The input to SimLab looks much like the models of physics described in textbooks. Section 2 develops a SimLab model of particle dynamics by comparing the SimLab syntax with a typical textbook derivation. Existing special purpose simulation tools such as AUTOSIM [11] and SD/FAST <ref> [19] </ref> generate simulation code for a particular physics model (rigid body dynamics in this case) using a particular formulation method (Kane's method). In contrast, the SimLab environment allows a user to define the physics model and formulation method.
Reference: [20] <author> Symbolics, Inc., </author> <title> Burlington, MA. MACSYMA Reference Manual, </title> <booktitle> 14th edition, </booktitle> <year> 1989. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 17], ODE integrators [7], linear algebra packages [6], and symbolic algebra systems <ref> [20, 9, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> In particular, the mathematical domain of a quantity is represented using the Weyl computer algebra substrate. Weyl offers significant advantages over the traditional symbolic mathematics systems such as Macsyma <ref> [20] </ref>, Maple [9] or Mathematica [21]. While these are large stand-alone programs, Weyl is an extensible toolbox for computational algebra, whose functionality is accessible at a variety of levels.
Reference: [21] <author> Steven Wolfram. </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley, </publisher> <address> Redwood City, CA, </address> <year> 1988. </year>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 17], ODE integrators [7], linear algebra packages [6], and symbolic algebra systems <ref> [20, 9, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> In particular, the mathematical domain of a quantity is represented using the Weyl computer algebra substrate. Weyl offers significant advantages over the traditional symbolic mathematics systems such as Macsyma [20], Maple [9] or Mathematica <ref> [21] </ref>. While these are large stand-alone programs, Weyl is an extensible toolbox for computational algebra, whose functionality is accessible at a variety of levels.
Reference: [22] <author> XOX Corporation, </author> <title> Bloomington, MN. SHAPES Geometry Library Reference Manual, </title> <year> 1990. </year>
Reference-contexts: First, simulator implementers have often worked in isolation, mainly because they have tended to be practitioners in their respective fields. Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers <ref> [3, 22, 17] </ref>, ODE integrators [7], linear algebra packages [6], and symbolic algebra systems [20, 9, 21, 23] are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions.
Reference: [23] <author> Richard Eliot Zippel. </author> <title> The Weyl computer algebra substrate. </title> <type> Technical Report 90-1077, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1990. </year> <pages> Page 16 </pages>
Reference-contexts: Second, it is only recently that the software base capable of providing the required functionality has matured. Functionally, software components such as geometric modelers [3, 22, 17], ODE integrators [7], linear algebra packages [6], and symbolic algebra systems <ref> [20, 9, 21, 23] </ref> are well developed. However, these components are not constructed using a software architecture that supports closely coupled integration. Numerical packages such as Linpack are notable exceptions. Linpack provides linear algebra functionality at a variety of levels, using a variety of data structures. <p> Thus the state variables are identified, and all time derivatives of state variables are moved to the left hand side of the equations. 5. Since the symbolic algebraic manipulations are performed using the computer algebra system Weyl <ref> [23] </ref>, and the simulator itself is in FORTRAN, the set of equations is mapped into a single vector equation and translated into FORTRAN subroutines, which are used by ODEPACK integrators to compute the time derivative of the state vector. The routines generated depend on the integration method being used. <p> This allows SimLab to automatically generate code that transforms elements of 3 Domains can be viewed as sets of elements together with additional algebraic structure. one representation to the other. For more details on the use of Weyl, see Zippel <ref> [23] </ref>.
References-found: 23

