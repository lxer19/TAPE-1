URL: http://cairo.cs.uiuc.edu/papers/MMCS98-Adapt.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Email: Email: n-tran1, nahrstedt@cs.uiuc.edu  
Title: Active Adaptation by Program Delegation in Video on Demand  
Author: Nancy Tran, Klara Nahrstedt 
Address: USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign,  
Abstract: In order to realize a more flexible structure and achieve a richer set of capabilities in the adaptive control of QoS for distributed multimedia systems, this paper seeks to complement the conventionally used passive data passing paradigm with the newer active program passing approach. By timely delegating and redelegating adaptation programs to encapsulate desired feedback control intelligence and data, a fine-grained, dynamic and customizable adaptation to quality of service variations becomes realizable. We describe an experimental prototype that utilizes the above active adaptation approach to regulate video flow for video on demand. Preliminary results show a viable system which has much greater flexibility for adaptation than is traditionally possible, and exhibits a smooth, graceful improvement/degradation in perceptual QoS during speedup or slowdown. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Goldszmidt, Y. Yemini, </author> <title> Distributed Management by Delegation. </title> <booktitle> Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <month> Jun. </month> <year> 1995. </year>
Reference-contexts: Such programs are referred to as mobile programs or mobile agents <ref> [1] </ref>. Dispatching a program to another computer is known as remote delegation because the computational responsibility of the program is passed to another machine that carries out the actual execution. <p> The architecture in [7] also calls for an execution environment at each network node to support safe execution of program instructions. 2.3 Elastic Server Following a similar line of thoughts, but applied to support mobile program computing at end systems, another kind of execution environment can be found in <ref> [1] </ref>. There, Goldszmidt and Yemini proposed an elastic server, composed of an execution environment, a remote delegation protocol and a runtime environment. Figure 1 shows the layout of these environments in an elastic server. <p> Figure 1 shows the layout of these environments in an elastic server. Since our active adaptation system is built on top of this server, in the following paragraphs, we will give a brief overview of its architectural components. Further details can be found in <ref> [1] </ref>. 3 * The execution environment is used to support on-demand loading and execution of all mobile programs. It is an application-layer process, known as 'elastic process'.
Reference: [2] <author> J.-C. Bolot, T. Turletti, I. Wakeman, </author> <title> Scalable Feedback Control for Multicast Video Distribution in the Internet. </title> <booktitle> Proceedings of ACM SIGCOMM, Oct. 1994, </booktitle> <volume> Vol. </volume> <pages> 24. </pages>
Reference-contexts: Experiments and results follow in section six. Finally, the conclusions section includes a summary of advantages and future research directions. 2 Related Work 2.1 Adaptation Examples of distributed multimedia systems, which utilized adaptive QoS feedback control based on the passive data passing model, can be found in <ref> [2] </ref> and [3]. There, all feedback information are passive in the sense that they represent the values or states of some adaptation parameters and variables such as network state, frame loss rate and negative acknowledgment to signal packet loss. <p> Our approach differs from the above in its dynamic deployment of active feedback programs and data to adaptively control QoS. The INRIA Video Conferencing System (IVS) <ref> [2] </ref> targeted their feedback control design towards multicast distribution of real time streams. At a receiver, the average frame loss experienced during a time period is measured and is used to derive the congestion level of the network for that period.
Reference: [3] <author> Z. Chen, S. Tan, R. Campbell, Y. Li. </author> <title> Real Time Video and Audio in the World Wide Web. World Wide Web Journal, Jan. </title> <booktitle> 1996, </booktitle> <volume> Vol. </volume> <pages> 1. </pages>
Reference-contexts: Experiments and results follow in section six. Finally, the conclusions section includes a summary of advantages and future research directions. 2 Related Work 2.1 Adaptation Examples of distributed multimedia systems, which utilized adaptive QoS feedback control based on the passive data passing model, can be found in [2] and <ref> [3] </ref>. There, all feedback information are passive in the sense that they represent the values or states of some adaptation parameters and variables such as network state, frame loss rate and negative acknowledgment to signal packet loss. <p> If we could delegate to the server various active feedback programs which include different adaptation policies to control a video coder's effective output rates, then different subgroups of receivers in the multicast tree would receive images with different qualities, matching the characteristics of different subgroups. In Vosaic's adaptation algorithm <ref> [3] </ref>, receivers send 2 passive feedback messages to the server. These mes-sages contain values of adaptation parameters that indicate the frame loss rates: frames that are either lost in the network due to congestion or discarded by the receivers due to insufficient local host processing power. <p> Although the learning period is seemingly long, users hardly perceive the delay because frames are displayed while their processing times are collected. This is in contrast with protocols that require users to wait for a large buffer to fill up before the first frame is displayed <ref> [3] </ref>. However, frames arrive slower because, during learning, acknowledgment is engaged. In total, 13 frames are processed. They belong to roughly 2 complete groups plus one I frame. <p> However, the client does not get overrun. Instead, immediately after the initial phases (learning and delegation) which last around 9 and a half seconds in total, it enters stable state. Stability is maintained until the video terminates. Our results are different from <ref> [3] </ref>. There, a client, in the presence of high quality videos, experienced disequi-librium: severe frame loss was observed soon after the first set of frames in the buffer were displayed. Only then adaptation was performed.
Reference: [4] <author> T. Kamba, K. Bharat, M.C. Albers, </author> <title> The Krakatoa Chronicle An Interactive Personalized Newspaper on the Web, </title> <address> http://www.w3.org/pub/Conferences/WWW4/ Papers/93/. </address>
Reference-contexts: In contrast, our scheme offers greater flexibility for customized adaptation by allowing individual receivers to specify their characteristics to individually influence the server's behavior dynamically, without interfering upon other receivers' QoS demands. Similar to our objective of applying mobile programs to perform adaptation, the Krakatoa Chronicle <ref> [4] </ref> provides news-on-demand services on the World Wide Web through launching Java applets from the server to the clients. By executing locally at the receivers on behalf of the server, the applets can timely adapt to their local user preferences in personalizing the formatting and presentation of news articles. <p> No support for multimedia traffic is provided. In contrast, this paper proposes a receiver-initiated adaptation scheme to satisfy feedback control requirements for the transport of video data. 2.2 Active Networks Today, mobile programs are not only deployed in end-systems as in <ref> [4] </ref> and our work, but also in intermediary network nodes. This results in recent emergence of novel network designs and architectures, known as 'active networks', a term coined by Tennenhouse and Wetherall in [7].
Reference: [5] <author> J. Gecsei, </author> <title> Adaptation in Distributed Multimedia Systems, </title> <booktitle> IEEE Multimedia, </booktitle> <month> Apr.-June </month> <year> 1997. </year>
Reference-contexts: This type of server-initiated program dispatching fits well with the nature of the application where no feedback control mechanisms are required. However, its scope for adaptivity is limited to serve local user preferences <ref> [5] </ref> in the context of newspaper text delivery. No support for multimedia traffic is provided.
Reference: [6] <author> S. Bhattacharjee, K. Calvert, E. Zegura, </author> <title> An Architecture for Active Networking, High Performance Networking (HPN'97), </title> <address> White Plains, NY, </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: The traditional view of a router/switch as being a passive 'store and forward' machine is replaced by a highly flexible engine, one that can dynamically accept and perform customized computations on various packets/cells according to individual applications' requirements. Examples of active networks can be found in <ref> [6] </ref> and [7]. The architecture proposed in [6] for packet and cell-switched networks supplies an interface which comprises a pool of pre-defined network functions stored at intermediary nodes. These functions (e.g. Ethernet function, IP forwarding function) make up the core of available network protocols and services. <p> Examples of active networks can be found in <ref> [6] </ref> and [7]. The architecture proposed in [6] for packet and cell-switched networks supplies an interface which comprises a pool of pre-defined network functions stored at intermediary nodes. These functions (e.g. Ethernet function, IP forwarding function) make up the core of available network protocols and services.
Reference: [7] <author> D. Tennenhouse, D. Wetherall, </author> <title> Towards an Active Network Architecture. </title> <journal> pp. 5-18, Computer Communication Review, ACM SIGCOMM 1996. </journal>
Reference-contexts: This results in recent emergence of novel network designs and architectures, known as 'active networks', a term coined by Tennenhouse and Wetherall in <ref> [7] </ref>. The traditional view of a router/switch as being a passive 'store and forward' machine is replaced by a highly flexible engine, one that can dynamically accept and perform customized computations on various packets/cells according to individual applications' requirements. Examples of active networks can be found in [6] and [7]. <p> in <ref> [7] </ref>. The traditional view of a router/switch as being a passive 'store and forward' machine is replaced by a highly flexible engine, one that can dynamically accept and perform customized computations on various packets/cells according to individual applications' requirements. Examples of active networks can be found in [6] and [7]. The architecture proposed in [6] for packet and cell-switched networks supplies an interface which comprises a pool of pre-defined network functions stored at intermediary nodes. These functions (e.g. Ethernet function, IP forwarding function) make up the core of available network protocols and services. <p> One major advantage with this approach lies in enabling incremental extension of network functions, thereby facilitating the deployment of new network services and protocols. However, the scope of flexibility is still confined within the set of available functions. Tennenhouse and Wetherall envisioned another kind of active networks <ref> [7] </ref>, one that can afford greater degrees of flexibility for customization in an object-oriented programming environment. Programs (classes and methods) are not restricted to be pre-defined or preloaded. Rather, they can be timely tailored to specific demands of applications, dynamically loaded into network nodes, and execute there. <p> As a result, capsule programs provide the ability to dynamically modify the behavior and state of a network node. Furthermore, they can be saved in the node's storage for future use, building up a collection of highly customized and extensible services, ready to be invoked. The architecture in <ref> [7] </ref> also calls for an execution environment at each network node to support safe execution of program instructions. 2.3 Elastic Server Following a similar line of thoughts, but applied to support mobile program computing at end systems, another kind of execution environment can be found in [1].
Reference: [8] <author> N. Tran. </author> <title> Mobile Agent Assisted Adaptation in Video on Demand. pp. </title> <type> 18-19, Master Thesis 1997. </type> <institution> University of Illinois at Urbana-Champaign. </institution>
Reference-contexts: However, one must be cautious in choosing the length of the interval over which averages are computed. In particular, the traditional global averaging method can generate long intervals that could cancel out temporal fluctuations, yielding poor estimates. A brief discussion on global averaging can be found in <ref> [8] </ref>. To capture temporal characteristics of time-sensitive data, we propose obtaining local averages through a moving window. This window confines the averaging interval over which sampled values are accumulated and averaged. It moves forward as time progresses, replacing old samples with new values on a FIFO basis.
Reference: [9] <author> V. Jacobson, </author> <title> Congestion Avoidance and Control. </title> <booktitle> Proceedings of ACM SIGCOMM Aug. 1988, </booktitle> <address> Stan-ford, California. </address>
Reference-contexts: The adaptation protocol orchestrates interactions between these four entities. It has four phases: learning, delegation, adaptation and re-adaptation. Here, the principle of conservation <ref> [9] </ref> is applied to control video flow. I.e., a new frame is not sent out to the network until an old frame is processed by the receiver. This leads to two requirements: 1) at startup, a receiver must attempt to reach stable state.
Reference: [10] <institution> X Imaging Library Reference Manual. Sun Mi-crosystems Corp. Sunnyvale, California. </institution>
Reference-contexts: Experimenting with the redelegation of feedback programs will be our future work. 6 Experiments & Results Experiments are conducted on a cluster of four Sparc IPX workstations running Solaris 5.5.1 and connected to a 10 Mbps Ethernet LAN. The VoD system is built using XIL <ref> [10] </ref> toolkit. The active adaptation system invokes delegation services provided by the SOS server. One workstation is dedicated to the video server and the SOS server, the rest are for video clients.
Reference: [11] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, D. Zappala, RSVP: </author> <title> A New Resource Reservation Protocol. </title> <journal> pp. 9-11, IEEE Network, </journal> <month> September </month> <year> 1993. </year> <month> 14 </month>
Reference-contexts: Interprocess communication (IPC) in the same machine between components of the VoD system and the adaptation sys tem is achieved through shared memory. We follow a receiver-initiated adaptation approach. It is drawn from a design principle for the IETF's Resource Reservation Protocol (RSVP) <ref> [11] </ref> although in this paper, we do not use reservations. Each receiver is responsible for specifying its processing and QoS requirements, 4 based on its hardware/software processing capabilities, constraints and workload. These specifications can then be placed in an adaptation program, delegated over to the server machine.
References-found: 11

