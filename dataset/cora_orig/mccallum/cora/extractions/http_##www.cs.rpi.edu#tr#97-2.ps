URL: http://www.cs.rpi.edu/tr/97-2.ps
Refering-URL: http://www.cs.rpi.edu/tr/
Root-URL: http://www.cs.rpi.edu
Email: mcnaught@cs.rpi.edu  
Title: THE FINITENESS OF FINITELY PRESENTED MONOIDS  
Author: Robert McNaughton 
Date: April, 1997  
Address: Troy, NY 12180-3590, U.S.A.  
Affiliation: Department of Computer Science Rensselaer Polytechnic Institute  
Abstract: Introduction. It is undecidable whether a monoid given by a finite presentation is finite (see, e.g., [1], pp. 157-160). On the other hand, with the mere knowledge that the monoid is finite, one can effectively construct the multiplication table of the monoid, and thus obtain a complete understanding of its structure. This paper will present this construction method in detail (Section 2) and offer some remarks about its computational complexity (Section 3). The notation here will be based on [1], whose final chapter furnishes much of the background and will be referenced frequently. It is convenient to think of a finite monoid presentation as a Thue system, i.e., an ordered pair (; R), where is a finite alphabet (or set of generators) and R is a finite set of unordered pairs of strings over , called the "set of rules." For (y 1 ; y 2 ) 2 R and x; z 2 fl one writes xy 1 z $ xy 2 z and xy 2 z $ xy 1 z; thus the rules operate symmetrically. One writes x $ fl y to assert the existence of a derivation of y from x, i.e., a sequence When x $ fl y holds one says that x and y are congruent. For brevity, the $ fl relation is written as . It is clearly a congruence relation, since it is reflexive, symmetric and transitive, and since, for all x; y 1 ; y 2 ; z 2 fl , y 1 y 2 implies xy 1 z xy 2 z. fl This paper is dedicated to the memory of Marco Schutzenberger, the one most responsible for impressing upon me the importance of monoids. y Supported by Grant No. CCR-9500182 from the National Science Foundation. I am grateful for the crucial guidance of Friedrich Otto in this research, and also for his critical reading of this paper. x 0 = x; x 1 ; : : : ; x p = y (p 0); where x i $ x i+1 for each i p 1
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.V. Book and F. Otto, </author> <title> String-rewriting systems, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Introduction. It is undecidable whether a monoid given by a finite presentation is finite (see, e.g., <ref> [1] </ref>, pp. 157-160). On the other hand, with the mere knowledge that the monoid is finite, one can effectively construct the multiplication table of the monoid, and thus obtain a complete understanding of its structure. <p> This paper will present this construction method in detail (Section 2) and offer some remarks about its computational complexity (Section 3). The notation here will be based on <ref> [1] </ref>, whose final chapter furnishes much of the background and will be referenced frequently. <p> Our theorem is proved by proving in the next paragraph that the existence of such a function f would imply the decidability of the following problem: (P3) Given a presentation, is the monoid so presented finite? This problem is known to be undecidable (see <ref> [1] </ref>, pp. 157-160). We assume the existence of the function f . Let P be any presentation. Apply A as a procedure to P and stop it, if it has not already stopped, after f (jP j) + 1 time units. <p> Theorem 3.2. It is undecidable for a given positive integer q and presentation P (including those for which M (P ) is infinite) (1) whether s (P ) &lt; q, and (2) whether jM (P )j &lt; q. Proof: (1) The following problem is known to be undecidable (see <ref> [1] </ref>, pp. 157-159): given P , is M (P ) the trivial monoid? But this problem is reducible to problem (1) as follows: Determine whether s (P ) &lt; s 0 + 1. <p> The undecidability of the word problem for monoids is well known (see, e.g., <ref> [1] </ref>, pp. 57ff). Thus there is no effective way of testing whether x y in M (P ), for any given words x and y and interpretation P . However, there is an effective way of testing whether x i y.
Reference: [2] <author> D. Kapur and P. Narendran, </author> <title> The Knuth-Bendix completion procedure and Thue systems, </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 14 (1985), </volume> <pages> pp. 1052-1072. </pages>
Reference-contexts: Indeed the Knuth-Bendix completion procedure ([3], see also <ref> [2] </ref>) is a semi-algorithm for this problem: it terminates with an equivalent confluent system if there is one, but fails to terminate if there is none. <p> Thus every finite monoid has a presentation that is a confluent Thue system. (In <ref> [2] </ref> it is shown further how to simplify the Thue system to a unique minimal equivalent confluent Thue system.) Hence, if the Knuth-Bendix completion procedure is applied to a presentation of a monoid that happens to be finite (using the length-lexicographic ordering relation), it will terminate with an equivalent presentation that <p> And M (T ) is finite if and only if I is finite. Indeed, the elements of M (P ) can be represented by the words of I, as is proved in <ref> [2] </ref>.) So the Knuth-Bendix completion procedure is a competitor to the procedure of this section. Its advantage is that it can tell us in many interesting instances that the monoid is infinite. 3. Complexity considerations. To discuss algorithmic complexity, we must begin with a precise statement of the problem.
Reference: [3] <author> D.E. Knuth and P.B. Bendix, </author> <title> Simple word problems in universal algebras, in Computational problems in abstract algebras (J. </title> <editor> Leech, ed.), </editor> <publisher> Pergammon Press, </publisher> <year> 1970, </year> <pages> pp. 263-297. </pages>
Reference-contexts: In Section 3 more general things will be said about the size of n 0 relative to P and relative to M (P ). This section closes with the observation that the Knuth-Bendix completion procedure <ref> [3] </ref> can also be used as a semi-algorithm for the problem of whether a given finitely presented monoid is finite.
Reference: [4] <author> N.S. Mendelsohn, </author> <title> An algorithmic solution for a word problem in group theory, </title> <journal> Canadian J. Math., </journal> <volume> Vol. 16 (1964), </volume> <pages> pp 509-516; Correction, </pages> <note> Vol. 17 (1965), p. 505. </note>
Reference-contexts: A proof that the procedure does terminate and produce all the cosets, in cases where the subgroup H is of finite index in G, can be found in <ref> [4] </ref>. In the remainder of this paper the word "presentation" will always mean a finite monoid presentation. 2. The construction. This section puts forth a procedure that, from a given presentation, terminates if and only if the monoid is finite; upon termination it yields the multiplication table of the monoid.
Reference: [5] <author> C.C. Sims, </author> <title> Computation with finitely presented groups, </title> <publisher> Cambridge Univ. Press, </publisher> <year> 1994. </year>
Reference-contexts: Coset enumeration in general, including the Todd-Coxeter procedure in particular, plays a prominent role in computational group theory (see, e.g., <ref> [5] </ref>, especially, pp. 175-196). A proof that the procedure does terminate and produce all the cosets, in cases where the subgroup H is of finite index in G, can be found in [4]. In the remainder of this paper the word "presentation" will always mean a finite monoid presentation. 2.
Reference: [6] <author> J.A. Todd and H.S.M. Coxeter, </author> <title> A practical method for enumerating cosets of a finite abstract group, </title> <journal> Proc. Edinburgh Math. Soc., </journal> <volume> Vol. 5 (1936), </volume> <pages> pp. 26-34. 15 </pages>
Reference-contexts: Furthermore, the Knuth-Bendix procedure could be used as a semi-algorithm for the finiteness problem of finitely presented monoids, as will be explained at the end of Section 2. The Todd-Coxeter procedure <ref> [6] </ref>, which has as its goal the enumeration of the cosets of a subgroup in a group, can be used to construct the multiplication table of a finite group from a given finite presentation.
References-found: 6

