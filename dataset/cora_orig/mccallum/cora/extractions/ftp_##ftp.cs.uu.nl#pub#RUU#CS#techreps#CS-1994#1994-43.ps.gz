URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1994/1994-43.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: H.R.Walters@cwi.nl hansz@cs.ruu.nl  
Title: Rewrite systems for integer arithmetic  
Author: H.R.Walters H.Zantema 
Date: October 4, 1994  
Address: P.O. Box 94079, 1090 GB Amsterdam P.O. Box 80.089, 3508 TB Utrecht  Netherlands  
Affiliation: Centre for Math. and Comp. Sc. Utrecht University, Comp. Sc. Dept.  The  
Abstract: We present three term rewrite systems for integer arithmetic with addition, multiplication, and, in two cases, subtraction. All systems are ground confluent and terminating; termination is proved by semantic labelling and recursive path order. The first system represents numbers by successor and predecessor. In the second, which defines non-negative integers only, digits are represented as unary operators. In the third, digits are represented as constants. The first and the second system are complete; the second and the third system have logarithmic space and time complexity, and are parameterized for an arbitrary radix (binary, decimal, or other radices). Choosing the largest machine representable single precision integer as radix, results in unbounded arithmetic with machine efficiency. Key Words & Phrases: integers, term rewriting, specification languages, formal semantics, confluence, termination. 1991 CR Categories: D.1.1 [Programming Techniques]: Applicative (Functional) Programming; F.3.2 [Logics and Meanings of Programs]: Semantics of Programming Languages, Algebraic approaches to semantics. 1991 Mathematics Subject Classification: 68Q40: Symbolic computation, 68Q42: Rewriting Systems and 68Q65: Algebraic specification. Note: Partial support was received from the European Communities under ESPRIT project 5399 (Com piler Generation for Parallel Machines COMPARE).
Abstract-found: 1
Intro-found: 1
Reference: [AHU84] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison Wesley, </publisher> <year> 1984. </year>
Reference-contexts: This coincides with common algorithms (<ref> [AHU84] </ref> p. 62). In [AHU84] two algorithms are given with better asymptotical behavior. Firstly, the divide-and-conquer algorithm ([AHU84] pp. 62|65) is O [b log 3 ]. Detailed inspection of the algorithm, however, reveals that the implicit constants render our specification and the divide and conquer algorithm comparable for b &lt; ~ 32 bits.
Reference: [BW89] <author> L.G. Bouma and H.R. Walters. </author> <title> Implementing algebraic specifications. In J.A. Bergstra, </title> <editor> J. Heering, and P. Klint, editors, </editor> <title> Algebraic Specification, </title> <publisher> ACM Press Frontier Series, </publisher> <pages> pages 199-282. </pages> <note> The ACM Press in co-operation with Addison-Wesley, 1989. Chapter 5. 1 Thanks to J.F.Th.Kamperman. 13 </note>
Reference-contexts: This rewrite system is proved to be locally confluent modulo associative-commutative multiplication and addition. Termination is not established and seems to be very hard to prove; it is listed as an open problem in [DJK93]. The system does not easily generalize to arbitrary number base. In <ref> [BW89] </ref> a rewrite system is presented of non-negative binary integers with addition, which is shown to be ground confluent and terminating. Both systems have logarithmic space and time complexity.
Reference: [CW91] <author> D. Cohen and P. Watson. </author> <title> An efficient representation of arithmetic for term rewrit-ing. </title> <editor> In R. Book, editor, </editor> <booktitle> Proceeding of the Fourth International Conference on Rewriting Techniques and Application (Como, Italy), </booktitle> <volume> LNCS 488, </volume> <pages> pages 240-251. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction In <ref> [CW91] </ref> a term rewrite system is presented of base four integers with addition and multiplication. This rewrite system is proved to be locally confluent modulo associative-commutative multiplication and addition. Termination is not established and seems to be very hard to prove; it is listed as an open problem in [DJK93]. <p> Standard techniques like recursive path order do not provide a termination proof. Even termination of only the rules 2, 12 and 13 is already hard to prove; these rules also occur in the system of <ref> [CW91] </ref>. <p> We have included the system from <ref> [CW91] </ref> since the four systems are to some degree complementary. system range conf. term. compl. readability radix [CW91] Int modulo ac f+; flg unproved log n reasonable 4 SP Int yes yes n poor DA Nat yes yes log n good any JP Int ground yes log n good any We <p> We have included the system from <ref> [CW91] </ref> since the four systems are to some degree complementary. system range conf. term. compl. readability radix [CW91] Int modulo ac f+; flg unproved log n reasonable 4 SP Int yes yes n poor DA Nat yes yes log n good any JP Int ground yes log n good any We have presented three rewrite systems for integer arithmetic with addition, multiplica tion, and in two cases subtraction.
Reference: [Der87] <author> N. Dershowitz. </author> <title> Termination of rewriting. </title> <journal> J. Symbolic Computation, </journal> 3(1&2):69-115, Feb./April 1987. Corrigendum: <volume> 4, </volume> 3, Dec. 1987, <pages> 409-410. </pages>
Reference: [DJK93] <author> N. Dershowitz, J.-P. Jouannaud, and J.W. Klop. </author> <title> More Problems in Rewriting. </title> <editor> In C.Kirchner, editor, </editor> <booktitle> Proceeding of the Fifth International Conference on Rewriting Techniques and Application (Montreal, </booktitle> <address> Canada), </address> <publisher> LNCS 690. Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: This rewrite system is proved to be locally confluent modulo associative-commutative multiplication and addition. Termination is not established and seems to be very hard to prove; it is listed as an open problem in <ref> [DJK93] </ref>. The system does not easily generalize to arbitrary number base. In [BW89] a rewrite system is presented of non-negative binary integers with addition, which is shown to be ground confluent and terminating. Both systems have logarithmic space and time complexity.
Reference: [GG91] <author> S.J. Garland and J.V. Guttag. </author> <title> A Guide to LP, The Larch Prover. </title> <publisher> MIT, </publisher> <month> November </month> <year> 1991. </year>
Reference: [Klo92] <author> J.W. Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. Gabbay, and T. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> Volume 2., </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: Then, in Section 4 we present the system DA and in Section 5 the system JP. In Section 7 we present an overview of the various rewrite systems, and we discuss some conclusions. Our notation and terminology are consistent with <ref> [Klo92] </ref>.
Reference: [Wal90] <author> H.R. Walters. </author> <title> Hybrid implementations of algebraic specifications. </title> <editor> In H. Kirchner and W. Wechler, editors, </editor> <booktitle> Proceedings of the Second International Conference on Algebraic and Logic Programming, volume 463 of Lecture Notes in Computer Science, </booktitle> <pages> pages 40-54. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: External functions. Every computer supports fixed precision integer arithmetic, which could be used to compute all needed instances of rule schemata on the fly. Clearly, this requires additional capabilities in the implementation. One framework for the correct use of external functions in term rewrite systems is discussed in <ref> [Wal90] </ref>. We will discuss this third alternative in some more detail.
Reference: [Zan93] <author> H. Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <type> Technical Report RUU-CS-93-24, </type> <institution> Utrecht University, </institution> <month> July </month> <year> 1993. </year> <note> Accepted for publication in Fundamenta Informaticae. 14 </note>
Reference-contexts: Let R and Decr be as above for any choice of S f and f . Then R is terminating if and only if R [ Decr is terminating. For the proof we refer to <ref> [Zan93] </ref>.
References-found: 9

