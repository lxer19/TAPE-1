URL: http://choices.cs.uiuc.edu/Security/Papers/mobile.ps
Refering-URL: http://choices.cs.uiuc.edu/Security/index.html
Root-URL: http://www.cs.uiuc.edu
Email: roy@cs.uiuc.edu  sturman@cs.uiuc.edu  theron@eng.sun.com  
Title: Mobile Computing, Security and Delegation  
Author: Roy Campbell Daniel Sturman Theron Tock 
Date: October 28, 1994  
Abstract: Portable computers may operate in a variety of environments with different security and encryption schemes. Further, disconnection should not interfere with secure application communication. We present the design of a customizable framework for secure mobile communications. This framework incorporates authenticated message passing without the restructuring of applications: through the use of inheritance, communication classes preserve interfaces while adding security. A subframework supports secure communication. Each service determines the security measures it will use and the system ensures clients communicate using the correct protocol. To support disconnection, we present a subframework that permits the delegation of authority. We describe our implementation of this framework for Choices, an object-oriented operating system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Peter Deutsch. </author> <title> Design Reuse and Frameworks in the Smalltalk-80 Programming System. </title> <editor> In Ted J. 5 Biggerstaff and Alan J. Perlis, editors, </editor> <booktitle> Software Reusability, </booktitle> <volume> volume II, </volume> <pages> pages 55-71. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: Besides being complex, such generality would be inefficient. Furthermore, augmenting the protocol to accommodate additional features would be difficult: distribution of the new version would have to be made world-wide. Instead, our solution involves the use of a general object-oriented framework <ref> [1] </ref> for authentication and delegation. A framework is a collection of abstract classes that defines the design of the system through informal specification of class interactions. Each abstract class has one or more concrete implementations that provide specific performance or functionality. <p> New functionality can be introduced into the system by extending the framework. An extended framework must preserve the interfaces and interactions of the old framework, but is free to add new interactions or interfaces either as new abstract classes or as subclasses of existing classes <ref> [1] </ref>. Thus, much as class inheritance extends class functionality, framework inheritance extends system functionality. We specify the components required for secure communication as a set of abstract classes. Specifically, we have classes for the application interface and a class which adds authentication information to a message.
Reference: [2] <author> Amos Fiat and Adi Shamir. </author> <title> How to Prove Yourself: Practical Solutions to Identification and Signature Problems. </title> <editor> In G. Goos and J. Hartmanis, editors, </editor> <booktitle> Lecture Notes in Computer Science 263, </booktitle> <pages> pages 186-194. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Subclasses of the abstract port and container specialize the message passing interface for authentication. An abstract class authentication protocol captures the behavior of different authentication protocols. Choices includes protocol objects implementing RSA public-key authentication [6], Kerberos [8, 5], and Fiat-Shamir zero-knowledge proofs <ref> [2] </ref> and these are implemented as specializations of the basic authentication classes. Once an appropriate authentication protocol is selected, the system guarantees, through the DNS and Con-tainerCreator attributes and typing, that the correct authentication subclasses and provisions are applied to messages sent to ports and retrieved from containers. <p> This permits the delegation protocol to function regardless of the particular implementation used to communicate with the delegates or services. An authentication protocol may be chosen to suit the environment of the mobile host. For example, Kerberos has high startup but low per-message costs, while a zero-knowledge proof <ref> [2] </ref> has no startup but high per-message costs. The proper protocol can be chosen for the frequency of messages exchanged without affecting the delegation protocol. Most of the restrictions placed on delegations are interpreted solely by the service being delegated.
Reference: [3] <author> Morrie Gasser and Ellen McDermott. </author> <title> An architecture for practical delegation in a distributed system. </title> <booktitle> In Proceedings of the Symposium on Security and Privacy, </booktitle> <pages> pages 20-30. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: The combination of delegations and restrictions provides a powerful mechanism to transfer user's "identities" while maintaining strict control of user's priviledges. Delegation is a well understood problem <ref> [7, 8, 3] </ref> but there are special considerations for mobile systems that these existing approachs do not address. The requirements for a general delegation scheme include: * Revocation: the delegator must have the ability to cancel delegations it has issued. <p> In Kerberos [8] with its centralized authentication service, managing the many revoked delegations for a large system may be problematic. A failing of delegation protocols based on certificates, such as the Distributed System Security Architecture <ref> [3] </ref> and Passports [7], is the very high computational and bandwidth requirements. This is due to the public-key nature of these systems. One final problem with most delegation protocols is their dependence on a particular authentication protocol, limiting them to systems that support that style of authentication.
Reference: [4] <author> Nayeem Islam and Roy H. Campbell. </author> <title> Design considerations for shared memory multiprocessor message systems. </title> <journal> In IEEE Transactions on Parallel and Distributed Systems, </journal> <pages> pages 702-712, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Applications may choose to use delegation by simply changing the type declaration of their communication objects. Choices applications access the message passing communication framework through abstract classes. These abstract classes present interfaces for message fragmentation and reassembly, flow control, reliability, and message transport <ref> [4] </ref>. A message container is a receptacle for retrieving messages, and a message port is a send-only channel to a specific container. Multiple ports may refer to a single container. Applications obtain ports from a Distributed Name Server (DNS).
Reference: [5] <author> J. Kohl and C. Neuman. </author> <title> RFC 1510: The Kerberos Network Authentication Service (V5), </title> <month> September </month> <year> 1993. </year>
Reference-contexts: Subclasses of the abstract port and container specialize the message passing interface for authentication. An abstract class authentication protocol captures the behavior of different authentication protocols. Choices includes protocol objects implementing RSA public-key authentication [6], Kerberos <ref> [8, 5] </ref>, and Fiat-Shamir zero-knowledge proofs [2] and these are implemented as specializations of the basic authentication classes.
Reference: [6] <author> RSA Laboratories. RSAREF: </author> <title> A Cryptographic Toolkit for Privacy-Enhanced Mail: Library Reference Manual. Distributed with RSAREF source code, </title> <month> March </month> <year> 1992. </year>
Reference-contexts: Subclasses of the abstract port and container specialize the message passing interface for authentication. An abstract class authentication protocol captures the behavior of different authentication protocols. Choices includes protocol objects implementing RSA public-key authentication <ref> [6] </ref>, Kerberos [8, 5], and Fiat-Shamir zero-knowledge proofs [2] and these are implemented as specializations of the basic authentication classes.
Reference: [7] <author> Karen R. Sollins. </author> <title> Cascaded authentication. </title> <booktitle> In Proceedings of the Symposium on Security and Privacy, </booktitle> <pages> pages 156-163. </pages> <publisher> IEEE, </publisher> <year> 1988. </year>
Reference-contexts: The combination of delegations and restrictions provides a powerful mechanism to transfer user's "identities" while maintaining strict control of user's priviledges. Delegation is a well understood problem <ref> [7, 8, 3] </ref> but there are special considerations for mobile systems that these existing approachs do not address. The requirements for a general delegation scheme include: * Revocation: the delegator must have the ability to cancel delegations it has issued. <p> In Kerberos [8] with its centralized authentication service, managing the many revoked delegations for a large system may be problematic. A failing of delegation protocols based on certificates, such as the Distributed System Security Architecture [3] and Passports <ref> [7] </ref>, is the very high computational and bandwidth requirements. This is due to the public-key nature of these systems. One final problem with most delegation protocols is their dependence on a particular authentication protocol, limiting them to systems that support that style of authentication.
Reference: [8] <author> Jennifer G. Steiner, Clifford Neuman, and Jeffrey I. Schiller. </author> <title> Kerberos: An Authentication Service for Open Network Systems. </title> <booktitle> In Proceedings of the Winter USENIX Conference, </booktitle> <pages> pages 191-202, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The combination of delegations and restrictions provides a powerful mechanism to transfer user's "identities" while maintaining strict control of user's priviledges. Delegation is a well understood problem <ref> [7, 8, 3] </ref> but there are special considerations for mobile systems that these existing approachs do not address. The requirements for a general delegation scheme include: * Revocation: the delegator must have the ability to cancel delegations it has issued. <p> Revocation is commonly handled by using fairly short lifetimes for delegations and "hot listing" revoked delegations that have not yet expired. In Kerberos <ref> [8] </ref> with its centralized authentication service, managing the many revoked delegations for a large system may be problematic. A failing of delegation protocols based on certificates, such as the Distributed System Security Architecture [3] and Passports [7], is the very high computational and bandwidth requirements. <p> Subclasses of the abstract port and container specialize the message passing interface for authentication. An abstract class authentication protocol captures the behavior of different authentication protocols. Choices includes protocol objects implementing RSA public-key authentication [6], Kerberos <ref> [8, 5] </ref>, and Fiat-Shamir zero-knowledge proofs [2] and these are implemented as specializations of the basic authentication classes.
References-found: 8

