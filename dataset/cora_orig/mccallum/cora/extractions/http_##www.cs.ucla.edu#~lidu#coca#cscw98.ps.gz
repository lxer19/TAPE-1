URL: http://www.cs.ucla.edu/~lidu/coca/cscw98.ps.gz
Refering-URL: http://www.cs.ucla.edu/~lidu/coca/
Root-URL: http://www.cs.ucla.edu
Email: lidu@cs.ucla.edu  muntz@cs.ucla.edu  
Title: COCA: Collaborative Objects Coordination Architecture  
Author: Du Li Richard Muntz 
Keyword: CSCW, Groupware, Collaboration, Coordination Languages, Logic Programming, Distributed Systems  
Address: Los Angeles Los Angeles, CA 90024  Los Angeles Los Angeles, CA 90024  
Affiliation: Dept. of Computer Science University of California,  Dept. of Computer Science University of California,  
Abstract: Coordination policies vary from collaboration to collaboration and are even subject to evolution in different phases of the same collaboration. It is vital for collaborative systems to be flexible enough to accommodate changes to the coordination policies during development and the lifetime of the collaboration. Motivated by previous work of separating coordination and computation, we propose COCA as a generic framework for developing collaborative systems and modeling the coordination policies. Participants explicitly adopt roles, and coordination policies are specified in terms of roles in a logic-based specification language. Policies are interpreted at runtime at each collaboration site by a COCA virtual machine. It is easy to change the coordination policies both during development and at runtime. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Cortes, Mauricio and Mishra, Prateek. DCWPL: </author> <title> A Programming Language for Describing Collaborative Work. </title> <booktitle> ACM CSCW96 Proceedings </booktitle>
Reference-contexts: More recently, researchers [11] in coordination languages advocate separation of coordination and computation in the design of concurrent systems. This principle is echoed in the CSCW literature. Cortes <ref> [1] </ref> proposed a declarative language DCWPL, and Furuta [10] used a variant of Petri Nets, CTN or colored timed nets, respectively, to separate implementation of coordination policies from other computation components and specify coordination policies in a declarative way. Languages introduced therein vary in expressive power. <p> In this way, the controller can monitor messages arriving at multiple different gates instead of just one to and one from the tuple space as defined in Moses. Our work is related to Trellis [10] and DCWPL <ref> [1] </ref> in that we all advocate separating implementation of the coordination part from other computation parts, so that the coordination policies can be specified in a more declarative way, interpreted at runtime, and allowing easy evolution of coordination policies.
Reference: 2. <author> Deering, S. </author> <title> Multicast Routing in Datagram Internetworks and Extended LANs. </title> <journal> ACM Trans. On Computer Systems, </journal> <volume> 8, 2, </volume> <month> May </month> <year> 1990 </year>
Reference-contexts: COCA and Its Contribution We favor the idea of separating coordination and computation, and propose COCA (Collaborative Object Coordination Architecture) as a generic framework for developing evolvable collaborative systems. Based on IP multicast <ref> [2] </ref> as its group communication model, COCA provides the groupware developers a dual-bus collaboration architecture and a logic-based specification language for modeling coordination policies. We divide participants in a collaboration by roles, and define active rules for each role to guard its interactions with other collaborators. <p> This approach incurs tremendous overhead on both the message senders and the communication paths, and latency increases with the size of the receiver population. Especially for time-critical data delivery, its performance is not acceptable. Deering <ref> [2] </ref> proposed IP multicast as a better solution to this problem. In this model, multicast messages are delivered along the minimum spanning tree built from the sender to all the receivers. Overlapping paths are utilized and scalability is achieved.
Reference: 3. <author> Dommel, H.-P. and Garcia-Luna-Aceves, J.J. </author> <title> Floor Control for Multimedia Conferencing and Collaboration. </title> <journal> ACM Multimedia97, </journal> <volume> 5, 1, </volume> <year> Jan.1997 </year>
Reference-contexts: To support group collaboration more effectively with the help of networked computer systems, these social policies must be somehow translated into rules in the supporting software, called coordination policies. Apart from rules for access control [18], concurrency control [7] and floor control <ref> [3] </ref>, we also include as coordination policies the following design considerations commonly seen in the literature: process architecture and data distribution schemes, role and session constraints, exception handling, etc. Process architecture and data distribution schemes are often critical to the performance and functioning of the whole collaboration.
Reference: 4. <author> Dourish, Paul and Bellotti, Victoria. </author> <title> Awareness and Coordination in Shared Workspaces. </title> <booktitle> ACM CSCW92 Proceedings, </booktitle> <month> November </month> <year> 1992 </year>
Reference: 5. <author> Edwards, W. Keith. </author> <title> Session Management for Collaborative Applications. </title> <publisher> ACM CSCW94, Oct.1994 </publisher>
Reference: 6. <author> Edwards, W. K. </author> <title> Policies and Roles in Collaborative Applications. </title> <booktitle> ACM CSCW96 Proceedings </booktitle>
Reference-contexts: It is also not clear, at least in the paper, how CTN models the collaboration of large groups whose participants are highly fluid, and how exceptions, such as floor loss and unexpected loss of the current floor holder, are handled in a Trellis specification. Intermezzo <ref> [6] </ref> is also related in that it used the concepts of roles and policies in a manner quite similar to COCA. However, the difference between Intermezzo and COCA is evident. In Intermezzo, roles are limited to the definition of access control groups.
Reference: 7. <author> Ellis, </author> <title> C.A. and Gibbs, S.J. Concurrency Control in Groupware Systems. </title> <booktitle> ACM SIGMOD89 Proceedings, </booktitle> <address> Portland Oregon, </address> <year> 1989 </year>
Reference-contexts: INTRODUCTION Motivation Social groups are governed by particular policies. To support group collaboration more effectively with the help of networked computer systems, these social policies must be somehow translated into rules in the supporting software, called coordination policies. Apart from rules for access control [18], concurrency control <ref> [7] </ref> and floor control [3], we also include as coordination policies the following design considerations commonly seen in the literature: process architecture and data distribution schemes, role and session constraints, exception handling, etc.
Reference: 8. <author> Ellis, C.A, Gibbs, S.J. and Rein, G.L. </author> <title> Groupware: Some Issues and Experiences. </title> <journal> Comm. ACM, </journal> <volume> 34, 1, </volume> <month> January </month> <year> 1991 </year>
Reference: 9. <author> Floyd, S., Jacobson, V., Liu, S., McCanne, S., and Zhang, L., </author> <title> A Reliable Multicast Framework for Lightweight Sessions and Application-Level Framing. </title> <booktitle> ACM SIGCOMM95 Proceedings </booktitle>
Reference-contexts: If the moderator is lost, another participant can take this role and grant the slide floor to itself. A similar algorithm can be found in the implementation of wb <ref> [9] </ref>. We can extend the coordination policies specified above in several ways. For example, we can replace the centralized floor control policy with other policies, like round robin, first come first served, etc. This can be done without changing the tool sv.
Reference: 10. <author> Furuta, Richard and Stotts, David. </author> <title> Interpreted Collaboration Protocols and Their Use in Groupware Prototyping. </title> <booktitle> ACM CSCW94 Proceedings </booktitle>
Reference-contexts: More recently, researchers [11] in coordination languages advocate separation of coordination and computation in the design of concurrent systems. This principle is echoed in the CSCW literature. Cortes [1] proposed a declarative language DCWPL, and Furuta <ref> [10] </ref> used a variant of Petri Nets, CTN or colored timed nets, respectively, to separate implementation of coordination policies from other computation components and specify coordination policies in a declarative way. Languages introduced therein vary in expressive power. Choices between them are usually a matter of individual taste or convenience. <p> In this way, the controller can monitor messages arriving at multiple different gates instead of just one to and one from the tuple space as defined in Moses. Our work is related to Trellis <ref> [10] </ref> and DCWPL [1] in that we all advocate separating implementation of the coordination part from other computation parts, so that the coordination policies can be specified in a more declarative way, interpreted at runtime, and allowing easy evolution of coordination policies. <p> The language we propose in COCA, however, is self-contained. The users can specify whatever coordination policies they want without constantly resorting to a procedural language, assuming the tools have the required functionality. In this way the declarative feature is reserved. Trellis <ref> [10] </ref> used a variant of Petri Nets, CTN or colored timed nets, to specify group interaction protocols. Trellis is a client/server architecture in which a centralized controller processes service requests from clients according to the specification.
Reference: 11. <author> Gelernter, David and Carriero, Nicholas. </author> <title> Coordination Languages and Their Significance. </title> <journal> Comm. ACM, </journal> <volume> 35, 2, </volume> <year> Feb.1992 </year>
Reference-contexts: Tools developed in this way are generally not compatible with each other and cannot interoperate. This results in a plethora of experimental systems while it is still hard for the users to find the right systems to meet their particular needs. More recently, researchers <ref> [11] </ref> in coordination languages advocate separation of coordination and computation in the design of concurrent systems. This principle is echoed in the CSCW literature. <p> We replace the parallel composition operators in LOTOS with the collaboration bus and the conference bus, synchronization among communicating components are achieved by explicit message passing. Moses [13] was originally intended to make the Linda <ref> [11] </ref> communication safer by ensuring that the interaction of each process with the shared tuple space be managed by a controller.
Reference: 12. <author> Logrippo, L. Faci, M. and Haj-Hussein, M. </author> <title> An Introduction to LOTOS: Learning by Examples. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 23, 5, </volume> <month> February </month> <year> 1992 </year>
Reference-contexts: A simple example is elaborated in a progressive way. Current status of the COCA prototype is also discussed. Finally some conclusions are presented. RELATED WORK Reker etc. [16] attempted to use LOTOS <ref> [12] </ref> to specify a group drawing tool. LOTOS is a formal description technique used in specifying telecommunication systems. However, our observation is that LOTOS and other process algebra based formal methods are not convenient for specifying collaborations. In LOTOS, communicating components must be explicitly connected by parallel composition operators. <p> Note that channels in the collaboration bus and the conference bus may be multiplexed and thus are not necessarily mapped in a one-toone manner. This is decided by the coordination policies. Following the conventions of LOTOS <ref> [12] </ref>, we call the interfaces or service access points to these communication channels gates. <p> It is important for a collaboration specifier to know what commands a tool sends out and what it accepts. We are attempting to somehow specify these protocols in a rather standardized way. LOTOS <ref> [12] </ref> seems a candidate model for this purpose since the users typically only care about the observable behavior of a collaboration tool and this is exactly what LOTOS is good at modeling. Heterogeneous tools could there be easily orchestrated in the same collaboration. Many collaborations are structured.
Reference: 13. <author> Minsky, Naftaly and Ungureanu, Victoria. </author> <title> Regulated Coordination in Open Distributed Systems. </title> <booktitle> 2 nd Intl. Conference on Coordination Languages and Models, </booktitle> <address> Berlin, Germany, </address> <note> Sept.1997 Proceedings </note>
Reference-contexts: We replace the parallel composition operators in LOTOS with the collaboration bus and the conference bus, synchronization among communicating components are achieved by explicit message passing. Moses <ref> [13] </ref> was originally intended to make the Linda [11] communication safer by ensuring that the interaction of each process with the shared tuple space be managed by a controller.
Reference: 14. <author> McCanne, S. and Jacobson, V. </author> <title> vic: A Flexible Framework for Packet Video. </title> <booktitle> ACM Multimedia95 Proceedings </booktitle>
Reference: 15. <author> McCanne, S., Brewer, E., Katz, R., </author> <title> etc., Toward a Common Infrastructure for Multimedia-Networking Middleware. </title> <booktitle> Proc. 7 th Intl. Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> St. Louis, Missouri, </address> <month> May </month> <year> 1997 </year>
Reference-contexts: Later, designers extracted some of the basic services required by certain domain of groupware systems and provided them to the application developers in the form of groupware toolkits, such as GroupKit [17] and MASH <ref> [15] </ref>. Groupware toolkits usually provide a library of programming interfaces for building multiuser interfaces, and a few programming abstractions such as those for group communication and those for separating data views from representation and keeping them consistent.
Reference: 16. <author> Rekers, J. and Sprinkhuizen, I. </author> <title> A LOTOS Specification of a CSCW Tool. </title> <booktitle> Proc. of Design of Computer Supported Cooperative Work and Groupware Systems, </booktitle> <address> Schearding, Austria, </address> <year> 1993 </year>
Reference-contexts: Then we describe the COCA architecture, and proceed to present the syntax and semantics of our specification language in a semiformal manner. A simple example is elaborated in a progressive way. Current status of the COCA prototype is also discussed. Finally some conclusions are presented. RELATED WORK Reker etc. <ref> [16] </ref> attempted to use LOTOS [12] to specify a group drawing tool. LOTOS is a formal description technique used in specifying telecommunication systems. However, our observation is that LOTOS and other process algebra based formal methods are not convenient for specifying collaborations.
Reference: 17. <author> Roseman, Mark and Greenberg, Saul. </author> <title> Building Real-time Groupware with GroupKit, A Groupware Toolkit. </title> <journal> ACM SIGCHI96, </journal> <volume> 3, 1, </volume> <month> March </month> <year> 1996 </year>
Reference-contexts: Later, designers extracted some of the basic services required by certain domain of groupware systems and provided them to the application developers in the form of groupware toolkits, such as GroupKit <ref> [17] </ref> and MASH [15]. Groupware toolkits usually provide a library of programming interfaces for building multiuser interfaces, and a few programming abstractions such as those for group communication and those for separating data views from representation and keeping them consistent.
Reference: 18. <author> Shen, Honghai and Dewan, Prasun. </author> <title> Access Control for Collaborative Environments. </title> <booktitle> ACM CSCW92 Proceedings, </booktitle> <month> November </month> <year> 1992 </year>
Reference-contexts: INTRODUCTION Motivation Social groups are governed by particular policies. To support group collaboration more effectively with the help of networked computer systems, these social policies must be somehow translated into rules in the supporting software, called coordination policies. Apart from rules for access control <ref> [18] </ref>, concurrency control [7] and floor control [3], we also include as coordination policies the following design considerations commonly seen in the literature: process architecture and data distribution schemes, role and session constraints, exception handling, etc.
References-found: 18

