URL: http://bungee.cpsc.ucalgary.ca/Publications/recover.ps
Refering-URL: http://bungee.cpsc.ucalgary.ca/Publications/telesim.html
Root-URL: 
Title: LANGUAGE BASED STATE SAVING EXTENSIONS FOR OPTIMISTIC PARALLEL SIMULATION  
Author: Fabian Gomes Brian Unger John Cleary Te Whare Wananga o 
Address: 2500 University Drive N.W. Calgary, Alberta T2N 1N4 CANADA  Private Bag 3105 Hamilton NEW ZEALAND  
Affiliation: Department of Computer Science The University of Calgary  Department of Computer Science University of Waikato  Waikato  
Abstract: One of the greatest challenges in making optimistic synchronization techniques such as Time Warp practical tools is making state saving efficient and easy to use. State saving is necessary so that when optimistic execution is found to be out of order, rollback can be used to recover an earlier execution state. Previous work has shown that the most robust and efficient technique for saving state is to incrementally save copies of small parts of the state at the point that they are modified. Unfortunately, this requires significant programmer intervention to insert additional code. In this paper, C ++ language extensions for transparent incremental state saving are presented. Operator overloading and type parameterization are used to incrementally save basic data types. Building on this, two new type-specifiers, "recover" and "nonrecover" are described. They allow a single declaration to specify, for example, that all the member variables of a class are to be state saved, and for all the resulting state saving calls to be automatically generated. Issues, including how these specifiers interact with class inheritance and function declarations are examined and solved. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bauer, H., and C. Sporer. </author> <year> 1993. </year> <title> Reducing rollback overhead in Time Warp based distributed simulation with optimized incremental state saving. </title> <booktitle> In Proceedings of the 26th Annual Simulation Symposium, </booktitle> <editor> ed. J. Miller, </editor> <address> 12-20. Arlington, Virginia. </address>
Reference: <author> Bruce, D. </author> <year> 1995. </year> <title> Treatment of state in optimistic systems. </title> <booktitle> In Proceedings of the 9th Workshop on Parallel and Distributed Simulation (PADS95), </booktitle> <editor> ed. Y B. Lin, and M. Bailey, </editor> <address> 40-49. Lake Placid, New York. </address>
Reference: <author> Cleary, J., F. Gomes, B. Unger, X. Zhonge, and R. Thudt. </author> <year> 1994. </year> <title> Cost of state saving and rollback. </title> <booktitle> In Proceedings of the 8th Workshop on Parallel and Distributed Simulation (PADS94), </booktitle> <editor> ed. D. Arvind, R. Bagrodia, and Y-B. Lin, </editor> <volume> 24(1) </volume> <pages> 94-101. </pages> <address> Edin-burgh, Scotland, U.K. </address>
Reference: <author> Ellis, M., and B. Stroustrup. </author> <year> 1990. </year> <title> The annotated C ++ reference manual. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: A parameterized type defines a new type in terms of (or parameterized by) another unspecified type. The following design uses the template construct, to define specialized state types from basic data types <ref> (Ellis and Stroustrup 1990, Stroustrup 1988) </ref>. State variables declared using the state type templates are said to be recoverable. Each of these specialized recoverable types need to have the same semantics as the base data type but are extended to include state saving. <p> The first context is in association with a class-key. A class-key can be one of the class, struct or union keywords <ref> (Ellis and Stroustrup 1990) </ref>. By default all variables do not have a state saving attribute.
Reference: <author> Fleischmann, J., and P. Wilsey. </author> <year> 1995. </year> <title> Comparative analysis of periodic state saving techniques in Time Warp simulators. </title> <booktitle> In Proceedings of the 9th Workshop on Parallel and Distributed Simulation (PADS95), </booktitle> <editor> ed. Y-B. Lin, and M. Bailey, </editor> <address> 50-58. Lake Placid, New York. </address>
Reference: <author> Fujimoto, R. </author> <year> 1989. </year> <title> Time Warp on a shared memory multiprocessor. </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> 6(3) </volume> <pages> 211-239. </pages>
Reference-contexts: The cost of rollback is proportional to the distance rolled-back, and in principle this can be arbitrarily large. Practical experience however shows that in most Time Warp executions rollbacks are limited to a few events, so that this is not a problem <ref> (Fujimoto 1989, Gomes and Unger 1994, Xiao and Unger 1995) </ref>. The major difficulty with ISS is the need for programmer intervention, in explicitly saving a state prior to its modification.
Reference: <author> Fujimoto, R. </author> <year> 1990. </year> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 30-53. </pages>
Reference-contexts: However, the simulation of many important systems requires massive amounts of processor time and memory. The goal of parallel discrete event simulation is the acceleration of sequential simulation execution through concurrent execution on multiple processors <ref> (Fujimoto 1990) </ref>. Optimistic synchronization has been proposed to maximally exploit the inherent parallelism within systems. Time Warp, a well known optimistic synchronization technique based on the virtual time paradigm (Jefferson 1985), has been shown to be capable of attaining impressive speedup.
Reference: <author> Gomes, F., S. Franks, B. Unger, Z. Xiao, J. Cleary, and A. Covington. SimKit: </author> <title> A high performance logical process simulation class library in C ++ . In Proceedings of the 1995 Winter Simulation Conference, </title> <editor> ed. C. Alexopoulos, K. Kang, W. Lilegdon, and D. </editor> <booktitle> Goldsman, </booktitle> <pages> 706-713. </pages> <address> Arlington, Virginia. </address>
Reference-contexts: This uses two new keywords "recover" and "nonrecover" to enable a type-safe declaration of which state is to be saved. Finally, a summary is presented in section 5. 2 SIMKIT SYSTEM SimKit is a C ++ class library that is designed for very fast discrete event simulation <ref> (Gomes et al. 1995) </ref>. The primary goal of SimKit is to provide an event-oriented logical process modeling interface that facilitates building application models for sequential and parallel simulation with high performance execution capabilities. The parallel SimKit implementation is atop a Time Warp executive interface called WarpKit.
Reference: <author> Gomes, F., and B. Unger. </author> <year> 1994. </year> <title> Benchmarking Shared Memory Time Warp with Signalling System No. 7 Performance Model - 3. </title> <institution> Project Report CPSC 601.24, Department of Computer Science, University of Calgary, Canada. </institution>
Reference: <author> Jefferson, D. </author> <year> 1985. </year> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425. </pages>
Reference-contexts: The goal of parallel discrete event simulation is the acceleration of sequential simulation execution through concurrent execution on multiple processors (Fujimoto 1990). Optimistic synchronization has been proposed to maximally exploit the inherent parallelism within systems. Time Warp, a well known optimistic synchronization technique based on the virtual time paradigm <ref> (Jefferson 1985) </ref>, has been shown to be capable of attaining impressive speedup. Optimistic methods are characterized by logical processes executing aggressively and independently of others. A causality error detection and recovery scheme based on rollback is used to assure causality in the asynchronous parallel execution.
Reference: <author> Lin, Y-B., B. Preiss, W. Loucks, and E. Lazowska. </author> <year> 1993. </year> <title> Selecting the checkpoint interval in Time Warp simulation. </title> <booktitle> In Proceedings of the 7th Workshop on Parallel and Distributed Simulation (PADS93), </booktitle> <editor> ed. R. Bagrodia, and D. Jefferson, </editor> <volume> 23(1) </volume> <pages> 3-10. </pages> <address> San Diego, California. </address>
Reference: <author> Preiss, B., W. Loucks, and I. MacIntyre. </author> <year> 1992. </year> <title> Effects of the checkpoint interval on time and space in Time Warp. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 4(3) </volume> <pages> 223-253. </pages>
Reference: <author> Ronngren, R. and R. Ayani. </author> <year> 1994. </year> <title> Adaptive check-pointing in Time Warp. </title> <booktitle> In Proceedings of the 8th Workshop on Parallel and Distributed Simulation (PADS94), </booktitle> <editor> ed. D. Arvind, R. Bagrodia, and Y-B. Lin, </editor> <volume> 24(1) </volume> <pages> 110-117. </pages> <address> Edinburgh, Scotland, U.K. </address>
Reference: <author> Steinman, J. </author> <year> 1993. </year> <title> Incremental state saving in SPEEDES using C ++ . In Proceedings of the 1993 Winter Simulation Conference, </title> <editor> ed. G. Evans, M. Mollaghasemi, E. Russell, and W. </editor> <booktitle> Biles, </booktitle> <pages> 687-696. </pages> <address> Los Angeles, California. </address>
Reference: <author> Stroustrup, B. </author> <year> 1988. </year> <booktitle> Parameterized types for C ++ . In Proceedings of the 1988 USENIX C ++ Conference, </booktitle> <pages> 1-18. </pages>
Reference: <author> Unger, B., F. Gomes, Z. Xiao, P. Gburzynski, T. Ono-Tesfaye, S. Ramaswamy, C. Williamson, and A. Covington. </author> <year> 1995. </year> <title> A high fidelity ATM traffic and network simulator. </title> <booktitle> In Proceedings of the 1995 Winter Simulation Conference, </booktitle> <editor> ed. C. Alex-opoulos, K. Kang, W. Lilegdon, and D. </editor> <booktitle> Goldsman, </booktitle> <pages> 996-1003. </pages> <address> Arlington, Virginia. </address>
Reference-contexts: For instance, typedef recover int SIntType; SIntType SInt1, SInt2; 4.2 Sample State Declaration An example using recover is shown in Figure 1. class nm_output defines an output buffered logical process in an ATM switch in the ATM-TN simulation model <ref> (Unger et al. 1995) </ref>. It is a typical example of the modifications necessary to ensure correct state saving in this extensive body of software. Note that recover is used only once in the example.
Reference: <author> Xiao, Z. and B. Unger. </author> <year> 1995. </year> <title> Performance of ATM-TN Wnet model. </title> <institution> TeleSim Project Report ATM1.1-PR, Department of Computer Science, University of Calgary, Canada: WurcNet Inc. </institution> <note> AUTHOR BIOGRAPHIES FABIAN GOMES is a post doctorate fellow in the Department of Computer Science at the University of Calgary. </note> <editor> He received his Ph.D. </editor> <title> degree in Computer Science from the University of Calgary in 1996. His research interests are in parallel simulation, modeling ATM broadband networks, distributed systems and rollback based computing. </title>
Reference: <institution> BRIAN UNGER is a professor in the Department of Computer Science at the University of Calgary and is the President of WurcNet Inc. His current interests include the modeling and simulation of ATM broadband networks, parallel and distributed simulation, and simulation in Java. JOHN CLEARY is a professor in the Department of Computer Science at Waikato University. </institution> <note> His research interests include parallel and distributed systems, logic programming, complexity theory applied to adaptive and learning systems, and parallel discrete event simulation. </note>
References-found: 18

