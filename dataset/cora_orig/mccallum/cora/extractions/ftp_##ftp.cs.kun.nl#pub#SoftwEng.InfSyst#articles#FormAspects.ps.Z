URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/FormAspects.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Formalisation of Techniques: Chopping down the Methodology Jungle of techniques: chopping down the methodology jungle.
Author: A.H.M. ter Hofstede Th.P. van der Weide A.H.M. ter Hofstede and Th.P. van der Weide. Formalisa-tion 
Note: Published as:  
Date: April 28, 1993  January 1992.  
Pubnum: 34(1):57-65,  
Abstract: In this article we discuss formalisation of techniques in the context of Information System Development methodologies. When such methodologies are developed, the primary goal is applicability. After the methodology has proven itself in practice, the methodology will be applied in more sophisticated situations, pushing the methodology to its limits. In those cases, informal definitions are known to be inappropriate. We will go into some typical problems. After that, we describe a procedure for proper formalisation. The Predicator Model ([3] and [24]) is presented as an extended example. Finally, we describe some experiences with this approach to formalisation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.E. Avison and G. Fitzgerald. </author> <title> Information System Development: Methodologies, Techniques and Tools. </title> <publisher> Blackwell Scientific Publications, </publisher> <year> 1988. </year>
Reference-contexts: Dept. of Information Systems, Faculty of Mathematics and Informatics, University of Nijmegen, Toernooiveld 1, 6525 ED Nijmegen, The Netherlands, E-mail: tvdw@cs.kun.nl 1 decades this resulted in a tremendous number of new methodologies to be used in the development process of information systems. In <ref> [1] </ref> this situation is referred to as the methodology jungle. A recent estimate [5] speaks about hundreds if not thousands of information system development methodologies. After [1] we think of a methodology (informally) as a collection of procedures, techniques, tools and documentation aids which help the system developers in their efforts <p> In <ref> [1] </ref> this situation is referred to as the methodology jungle. A recent estimate [5] speaks about hundreds if not thousands of information system development methodologies. After [1] we think of a methodology (informally) as a collection of procedures, techniques, tools and documentation aids which help the system developers in their efforts to imple ment a new information system.
Reference: [2] <author> J.A. Bergstra and G.P.A.J. Delen. Van dataflowdiagrammen via petrinetten naar systeemmatrixnotatie. </author> <type> Technical report, </type> <institution> Mathematical Centre, </institution> <address> Amsterdam, The Netherlands, </address> <year> 1982. </year>
Reference: [3] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and verification of object-role models. </title> <journal> Information Systems, </journal> <volume> 16(5), </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: Also properties of specific Well Formed Diagrams (models) according to some technique can be formulated and proved. An example of a schema property for a data model is structural identifiability, the question whether every entity type is identifiable (see [6] or <ref> [3] </ref>). An example of a property for a process model could be the fact whether deadlock or starvation can occur. We see that properties can be proved for models in a technique and for a technique itself. <p> In NIAM for example uniqueness constraints over less than n 1 roles in an n-ary fact type do not make sense, as these fact types are considered to be non-elementary. Nevertheless they can be attached a sensible meaning (see <ref> [3] </ref>). 3.4 Example: The Predicator Model The Predicator Model was introduced as a formalisation of NIAM (see [3]). We discuss the four important steps for formalisation, as discussed at the beginning of this section. 1. <p> Nevertheless they can be attached a sensible meaning (see <ref> [3] </ref>). 3.4 Example: The Predicator Model The Predicator Model was introduced as a formalisation of NIAM (see [3]). We discuss the four important steps for formalisation, as discussed at the beginning of this section. 1. The Predicator Model has been built upon the following system of concepts: (a) a set P of predicators, with intended meaning a connection between an object type and a fact type. <p> The meaning of a Well Formed Diagram is the set of instantiations (populations) that can be assigned to the diagram. Note that these populations are restricted by the (static) constraints. 4. A (machine friendly) representation language for the Predicator Model has been described in <ref> [3] </ref>, in the style of Relational Algebra. User friendly representation languages are currently under development. 3.5 Semantics of Process Modelling Techniques In this section, we outline the interpretation of Well Formed Diagrams in terms of an underlying operational model. <p> The graphical notation should make it possible to indicate an ordering on the predicators involved in constraints. This would make it also possible for example to express quite elegantly the fact that a certain relation is symmetric, see figure 16 taken from <ref> [3] </ref>. ~ X q ffi A second example of graphical ambiguity is shown in figure 17, again taken from [3]. In this figure a uniqueness constraint is shown which leaves room for alternative join conditions. <p> This would make it also possible for example to express quite elegantly the fact that a certain relation is symmetric, see figure 16 taken from <ref> [3] </ref>. ~ X q ffi A second example of graphical ambiguity is shown in figure 17, again taken from [3]. In this figure a uniqueness constraint is shown which leaves room for alternative join conditions. Should the join condition state that p = s, q = s or p = s ^ q = s? This can not be derived from reference books on NIAM (e.g. [14]). <p> It is important that good heuristics or incremental algorithms are found. In our experience, formalisation provides for valuable insight in a technique. This makes it possible to construct teaching material based upon the formalisation. The Uniquest algorithm as presented in <ref> [3] </ref> and more elaborately in [24] can be considered for example as a very powerful way of deriving the (formal) semantics of a large class of uniqueness constraints, which can also be easily applied by novices.
Reference: [4] <author> P.D. Bruza and Th. P. van der Weide. </author> <title> The semantics of data flow diagrams. </title> <booktitle> In Proceedings of the International Conference on Management of Data, </booktitle> <pages> pages 66-78, </pages> <address> 1989. Hyderabad, India. </address>
Reference-contexts: Petri-nets as underlying operational model (<ref> [4] </ref>, [22]). Well known variants are Predicate-Transition nets ([9] and [26]) and PT-nets ([2]). The semantics of the dynamic behaviour of activity models then is described as a mapping from activity models into the underlying operational model. We illustrate this by an example taken from [4]. In this paper, PT-nets are used as underlying operational model. The Dataflow Diagram of figure 13 is interpreted as the PT-net of figure 14. Another approach is followed in [26], where a schema interpeter for task structures is introduced as a Predicate-Transition net.
Reference: [5] <author> J.A. Bubenko. </author> <title> Information system methodologies a research view. </title> <editor> In T.W. Olle, H.G. Sol, and A.A. Verrijn Stuart, editors, </editor> <booktitle> Information System Design Methodologies: Improving the Practice, </booktitle> <pages> pages 289-318. </pages> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: In [1] this situation is referred to as the methodology jungle. A recent estimate <ref> [5] </ref> speaks about hundreds if not thousands of information system development methodologies. After [1] we think of a methodology (informally) as a collection of procedures, techniques, tools and documentation aids which help the system developers in their efforts to imple ment a new information system.
Reference: [6] <author> P.P. Chen. </author> <title> The entity-relationship model: toward a unified view of data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <year> 1976. </year>
Reference-contexts: example, is the meaning of the uniqueness constraints in figures 6 and 7? For yet another example, see figure 17. ~ Supplier s ~ Part p q Project used in supplied by planned at t u Date ffi Note that ER has not enough expressive power for these examples (see <ref> [6] </ref>, [20] and [27]). Due to its simplicity, complex cases where ambiguity may arise can not be specified. <p> Also properties of specific Well Formed Diagrams (models) according to some technique can be formulated and proved. An example of a schema property for a data model is structural identifiability, the question whether every entity type is identifiable (see <ref> [6] </ref> or [3]). An example of a property for a process model could be the fact whether deadlock or starvation can occur. We see that properties can be proved for models in a technique and for a technique itself.
Reference: [7] <author> E.D. Falkenberg, R. van der Pols, and Th. P. van der Weide. </author> <title> Understanding process structure diagrams. </title> <journal> Information Systems, </journal> <volume> 16(4) </volume> <pages> 417-428, </pages> <month> Sept </month> <year> 1991. </year>
Reference-contexts: This is typically done at a low ambition level, without 17 pretentions about the meaning of such a model. In <ref> [7] </ref> these modelling tech- niques are compared to each other by transformation of diagrams. r f p ? m 2 @ @I m 3 ? H H H -m 7 Generally, a process description defines a class or set of objects related to each other by virtue of the fact that
Reference: [8] <author> C. Gane and T. Sarson. </author> <title> Structured System Analysis: Tools and techniques. IST Databooks. </title> <publisher> MacDonald Douglas Corporation, </publisher> <address> St. Louis, </address> <year> 1986. </year>
Reference-contexts: In some cases the syntax for communicating a specification is defined, for example, it is reasonably clear what constitutes a well formed Dataflow Diagram, see <ref> [8] </ref>. Hardly ever attention is paid to semantics, in terms of an underlying operational model, for example, the meaning of a Dataflow Diagram in terms of a set of cooperating processes.
Reference: [9] <editor> H. Genrich. Predicate/transition nets. In W. Brauer, W. Reisig, and G. Rozenberg, editors, </editor> <booktitle> Petri Nets: Central Models and their Properties, </booktitle> <pages> pages 207-247. </pages> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference: [10] <author> D. Harel. </author> <title> On visual formalisms. </title> <journal> CACM, </journal> <volume> 31(5) </volume> <pages> 514-530, </pages> <year> 1988. </year>
Reference-contexts: In <ref> [10] </ref> the importance of visual formalisms is stressed: Visual, because they are to be generated, comprehended and communicated by humans, and formal, because they are to be manip ulated, maintained, and analyzed by computers.
Reference: [11] <author> C.B. Jones. </author> <title> Systematic Software Development using VDM. </title> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: The often overemphasised distinction between informal methods and formal methods (with the latter, usually formal specification methods are meant, as e.g. VDM <ref> [11] </ref> or Z [19]), suggesting a dichotomy between formal and informal, then becomes an artificial distinction: informal methods can become formal by formalisation. By formalising existing techniques no new technique has to be introduced. As a consequence, this results in conservation (no loss) of investment.
Reference: [12] <author> H.R. Lewis and C.H. Papadimitriou. </author> <title> Elements of the theory of computation. </title> <publisher> Prentice Hall, Inc, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1981. </year>
Reference-contexts: So in order to validate D we would have to construct a formal description F of the Universe of Discourse, and then prove the equivalence of D and F. That leaves us with the problem of validating F, etc. This argument is known as Church's Thesis (see for example <ref> [12] </ref>). In contrast to validation, verification can be performed automatically. Verification is checking whether a model, specified according to a certain technique, conforms to the rules of that technique. These rules can be checked automatically upon entry in the system. 11 A limited form of validity is testing on plausibility.
Reference: [13] <author> M. Lundeberg, G. Goldkuhl, and A. Nilsson. </author> <title> Information Systems Development A Systematic Approach. </title> <publisher> Prentice Hall, </publisher> <year> 1981. </year> <month> 23 </month>
Reference: [14] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual schema and Relational Database Design: A fact oriented approach. </title> <publisher> Prentice Hall of Australia Pty Ltd, </publisher> <year> 1989. </year>
Reference-contexts: For NIAM a detailed procedure exists to support inexperienced information analysts to construct NIAM schemas. The appendix contains an overview of the graphical symbols of NIAM. ~ X 3 s ~ X 1 ~ X 2 ffi In figure 4 a simple NIAM schema, taken from <ref> [14] </ref>, is shown. In this figure a uniqueness constraint is expressed over a so-called objectified fact type (f ). Obviously the diagram of figure 4 is a Well Formed Diagram according to NIAM (see [14]). The meaning of the diagram requires knowledge of the meaning of the uniqueness constraint. <p> ~ X 1 ~ X 2 ffi In figure 4 a simple NIAM schema, taken from <ref> [14] </ref>, is shown. In this figure a uniqueness constraint is expressed over a so-called objectified fact type (f ). Obviously the diagram of figure 4 is a Well Formed Diagram according to NIAM (see [14]). The meaning of the diagram requires knowledge of the meaning of the uniqueness constraint. The semantics of this constraint is explained in [14] by stating that it expresses a key on the ternary relation that is the result of flattening objectified fact type f . <p> Obviously the diagram of figure 4 is a Well Formed Diagram according to NIAM (see <ref> [14] </ref>). The meaning of the diagram requires knowledge of the meaning of the uniqueness constraint. The semantics of this constraint is explained in [14] by stating that it expresses a key on the ternary relation that is the result of flattening objectified fact type f . This key is shown in figure 5. <p> Schema equivalence is not more than obliquely mentioned in <ref> [14] </ref>, but the reader might have some intuition. But even then the situation is still not clear only from an example. <p> In this figure a uniqueness constraint is shown which leaves room for alternative join conditions. Should the join condition state that p = s, q = s or p = s ^ q = s? This can not be derived from reference books on NIAM (e.g. <ref> [14] </ref>). Note that the graphical notation does not provide means for the formulation of alternative join conditions. ~ X 1 ~ X 2 f p r t u As stated in section 2.3, formalisation of a method/technique enables the proof of properties of that method/technique.
Reference: [15] <author> T. W. Olle, J. Hagelstein, I. G. McDonald, C. Roland, H. G. Sol, F. J.M. Van Assche, and A. A. Verrijn-Stuart. </author> <title> Information System Methodologies: A Framework for Understanding. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: As a consequence, this results in conservation (no loss) of investment. Furthermore, similarities between different methods will become clear. This gives a clue for integrating methods by making minimal extensions (rather than the more usual top hat (hotchpotch) method for integration, see for example <ref> [15] </ref>). Finally, a proper formalisation forms a solid base, and offers useful guidelines for the construction of teaching material. Resulting courses will have a broad scope, and will be of a more generic nature, which make them generally applicable.
Reference: [16] <author> L. Osterweil. </author> <title> Software processes are software too. </title> <booktitle> In Proceedings of the 9th International Conference on Software Engineering, Moterey, USA, </booktitle> <pages> pages 2-13, </pages> <year> 1987. </year>
Reference: [17] <editor> G. Scheschonk. Eine auf Petri-Netzen basierende Konstruktions, </editor> <title> Analyse und (Teil)Verificationsmethode zur Modellierungsunterstutzung bei der Entwicklung von Informationssystemen. </title> <type> PhD thesis, </type> <institution> Berlin University of Technology, </institution> <year> 1984. </year>
Reference: [18] <author> P.S. Seligmann, G.M. Wijers, and H.G. Sol. </author> <title> Analyzing the structure of I.S. methodologies, an alternative approach. </title> <booktitle> In Proceedings of the First Dutch Conference on Information Systems, </booktitle> <year> 1989. </year>
Reference-contexts: A more structured view on methodologies is given in figure 1 taken from [25]. This framework is based on the original framework of <ref> [18] </ref> and captures the different aspects of methodologies. It makes a distinction between a way of thinking, a way of control, a way of modelling, a way of working and a way of support.
Reference: [19] <author> J.M. Spivey. </author> <title> Understanding Z: A Specification Language and its formal Semantics. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: The often overemphasised distinction between informal methods and formal methods (with the latter, usually formal specification methods are meant, as e.g. VDM [11] or Z <ref> [19] </ref>), suggesting a dichotomy between formal and informal, then becomes an artificial distinction: informal methods can become formal by formalisation. By formalising existing techniques no new technique has to be introduced. As a consequence, this results in conservation (no loss) of investment. Furthermore, similarities between different methods will become clear.
Reference: [20] <author> T.J. Teory, D. Yang, and J.P. Fry. </author> <title> A logical design methodology for relational databases using the extended entity-relationship model. </title> <journal> Computing Surveys, </journal> <volume> 18(2) </volume> <pages> 197-222, </pages> <year> 1986. </year>
Reference-contexts: is the meaning of the uniqueness constraints in figures 6 and 7? For yet another example, see figure 17. ~ Supplier s ~ Part p q Project used in supplied by planned at t u Date ffi Note that ER has not enough expressive power for these examples (see [6], <ref> [20] </ref> and [27]). Due to its simplicity, complex cases where ambiguity may arise can not be specified. <p> From [27] it is not clear whether these cyclic structures are allowed. They can be instantiated, but identification might be a problem. Identification is an important fundamental concept for information systems (see for example <ref> [20] </ref>). 2.2 Automated Support A second reason for the need of formalisation is that a formal model gives a good clue for implementation. The better the formalism, the easier to implement.
Reference: [21] <author> O. de Troyer, R. Meersman, and P. Verlinden. </author> <title> RIDL* on the CRIS Case: A Workbench for NIAM. </title> <editor> In T.W. Olle, A.A. Verrijn-Stuart, and L. Bhabuta, editors, </editor> <booktitle> Proceedings of the IFIP WG 8.1 Working Conference on Computerized Assistence during the Information Systems Life Cycle, </booktitle> <pages> pages 375 - 459, </pages> <year> 1988. </year>
Reference: [22] <author> T.H. Tse and L. Pong. </author> <title> Toward a formal definition for DeMarco Data Flow Diagrams. </title> <journal> The Computer Journal, </journal> <volume> 32(1) </volume> <pages> 1-12, </pages> <year> 1989. </year>
Reference-contexts: An accepted method to assign meaning to activity models is to use some variant of Petri-nets as underlying operational model ([4], <ref> [22] </ref>). Well known variants are Predicate-Transition nets ([9] and [26]) and PT-nets ([2]). The semantics of the dynamic behaviour of activity models then is described as a mapping from activity models into the underlying operational model. We illustrate this by an example taken from [4].
Reference: [23] <author> W.M. Waite and G.Goos. </author> <title> Compiler Construction. </title> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Again we can not indicate an error in this program, but it is not very likely (plausible) that this program fragment properly relates to its intended meaning. For more information on static plausibilities see <ref> [23] </ref>. 2.3 Properties A third reason in favour of formalism is that a formal definition makes it possible to formulate and prove properties of techniques. One could for example look at the expressive power of a technique and compare it with other techniques.
Reference: [24] <author> Th.P. van der Weide, A.H.M. ter Hofstede, and P. van Bommel. </author> <title> The uniquest algorithm: A formal semantics of complex uniqueness constraints. </title> <type> Technical Report 90-19, </type> <institution> Department of Information Systems, 24 University of Nijmegen, </institution> <address> The Netherlands, </address> <month> October </month> <year> 1990. </year> <note> To be pub-lished. </note>
Reference-contexts: In figure 5: h = fp; q; rg. (b) the constraints are properly formed, for example, each uniqueness constraint is a non-empty set of predicators that is joinable via common descendants (for more information on this, see <ref> [24] </ref>). Note that the diagram of figure 11 is not included as a Well Formed Diagram. This class of diagrams is larger than for example ER ([6]). 3. The meaning of a Well Formed Diagram is the set of instantiations (populations) that can be assigned to the diagram. <p> It is important that good heuristics or incremental algorithms are found. In our experience, formalisation provides for valuable insight in a technique. This makes it possible to construct teaching material based upon the formalisation. The Uniquest algorithm as presented in [3] and more elaborately in <ref> [24] </ref> can be considered for example as a very powerful way of deriving the (formal) semantics of a large class of uniqueness constraints, which can also be easily applied by novices. In [24] the Uniquest algorithm was applied on the uniqueness constraints of figures 6 and 7. <p> The Uniquest algorithm as presented in [3] and more elaborately in <ref> [24] </ref> can be considered for example as a very powerful way of deriving the (formal) semantics of a large class of uniqueness constraints, which can also be easily applied by novices. In [24] the Uniquest algorithm was applied on the uniqueness constraints of figures 6 and 7. Naturally this algorithm can also be implemented straightforwardly, which is a more positive result for CASE-tool developers. 5 Conclusions In this paper the formalisation of techniques was discussed.
Reference: [25] <author> G.M. Wijers and H. Heijes. </author> <title> Automated support of the modelling process: A view based on experiments with expert information engineers. </title> <editor> In B. Steinholz, A. Stlvberg, and L. Bergman, editors, </editor> <booktitle> Advanced Information Systems Engineering, </booktitle> <pages> pages 88-108, </pages> <year> 1990. </year>
Reference-contexts: A technique can be seen as ([15]) part of an information systems methodology which may employ a well-defined set of concepts and a way of handling them in a step of the work. A more structured view on methodologies is given in figure 1 taken from <ref> [25] </ref>. This framework is based on the original framework of [18] and captures the different aspects of methodologies. It makes a distinction between a way of thinking, a way of control, a way of modelling, a way of working and a way of support.
Reference: [26] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <booktitle> Proceedings of the Second Workshop on the Next Generation of CASE Tools, </booktitle> <pages> pages 159 - 217, </pages> <address> Trondheim, Norway, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: An accepted method to assign meaning to activity models is to use some variant of Petri-nets as underlying operational model ([4], [22]). Well known variants are Predicate-Transition nets ([9] and <ref> [26] </ref>) and PT-nets ([2]). The semantics of the dynamic behaviour of activity models then is described as a mapping from activity models into the underlying operational model. We illustrate this by an example taken from [4]. In this paper, PT-nets are used as underlying operational model. <p> We illustrate this by an example taken from [4]. In this paper, PT-nets are used as underlying operational model. The Dataflow Diagram of figure 13 is interpreted as the PT-net of figure 14. Another approach is followed in <ref> [26] </ref>, where a schema interpeter for task structures is introduced as a Predicate-Transition net.
Reference: [27] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year> <month> 25 </month>
Reference-contexts: meaning of the uniqueness constraints in figures 6 and 7? For yet another example, see figure 17. ~ Supplier s ~ Part p q Project used in supplied by planned at t u Date ffi Note that ER has not enough expressive power for these examples (see [6], [20] and <ref> [27] </ref>). Due to its simplicity, complex cases where ambiguity may arise can not be specified. However, in figure 8 we see an example of an ER di 8 ~ C Q Q r t p q f u agram with an unclear meaning, expressed in the ER dialect from [27]. <p> and <ref> [27] </ref>). Due to its simplicity, complex cases where ambiguity may arise can not be specified. However, in figure 8 we see an example of an ER di 8 ~ C Q Q r t p q f u agram with an unclear meaning, expressed in the ER dialect from [27]. In this dialect, an arrow from a relation type to an entity type indicates objectification of this relation type, thus enabling to use this relation type as an entity type. From [27] it is not clear whether these cyclic structures are allowed. <p> Q r t p q f u agram with an unclear meaning, expressed in the ER dialect from <ref> [27] </ref>. In this dialect, an arrow from a relation type to an entity type indicates objectification of this relation type, thus enabling to use this relation type as an entity type. From [27] it is not clear whether these cyclic structures are allowed. They can be instantiated, but identification might be a problem.
References-found: 27

