URL: http://www.cs.umn.edu/Users/dept/users/gini/icra96.ps.gz
Refering-URL: http://www.cs.umn.edu/Users/dept/users/gini/
Root-URL: http://www.cs.umn.edu
Title: Parallel Search Algorithms for Robot Motion Planning  
Author: Maria Gini 
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Science University of Minnesota  
Abstract: We show how paths for dexterous robots can be generated in a few seconds or less using parallel informed randomized search on multicomputers. The experimental results we present have been obtained for a variety of robots with six or more joints operating in realistic 3D workspaces. 
Abstract-found: 1
Intro-found: 1
Reference: [ Adolphs and Tolle, 1992 ] <author> P. Adolphs and H. Tolle. </author> <title> Collision-free real-time path-planning in time varying environment. </title> <booktitle> In Proc. IEEE/RSJ Int'l Conf. on Intelligent Robots and Systems, </booktitle> <pages> pages 445-452, </pages> <year> 1992. </year>
Reference-contexts: Other methods make assumptions on the type of robot (for instance, <ref> [ Adolphs and Tolle, 1992 ] </ref> takes advantage of the symmetry of the workspace with respect to the first axis of the robot), or use a coarse discretization of C-Space.
Reference: [ Barraquand and Latombe, 1991 ] <author> J. Barraquand and J. C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> Int'l Journal of Robotics Research, </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: The method places landmarks in free space until it is able to generate a path using local methods. Our method is a parallel formulation of the Randomized Path Planner proposed by Barraquand and Latombe <ref> [ Barraquand and Latombe, 1991 ] </ref> . Space is represented with bitmap arrays. The configuration space is discretized and searched using heuristic search with random walks to escape local minima. The C-space is searched but not stored, because of memory reasons.
Reference: [ Bessiere et al., 1993 ] <author> Pierre Bessiere, Juan-Manuel Ahuactzin, El-Ghazali Talbi, and Emmanuel Mazer. </author> <title> The Ariadne's Clew algorithm: Global planning with local methods. </title> <booktitle> In Proc. IEEE/RSJ Int'l Conf. on Intelligent Robots and Systems, </booktitle> <year> 1993. </year>
Reference-contexts: and the Center for Advanced Manufacturing, Design and Control of the University of Minnesota. 1 To obtain acceptable performance, some methods do a significant amount of preprocessing of the config-uration space (C-space) [ Kavraki, 1994 ] , or place landmarks in C-space that are then used by a local planner <ref> [ Bessiere et al., 1993, Chen and Hwang, 1992 ] </ref> . <p> This method works well, but it is limited to relatively coarse C-space discretizations due to memory limitations. A genetic based approach has been implemented using 128 T800 transputers with excellent performance <ref> [ Bessiere et al., 1993 ] </ref> . The method places landmarks in free space until it is able to generate a path using local methods. Our method is a parallel formulation of the Randomized Path Planner proposed by Barraquand and Latombe [ Barraquand and Latombe, 1991 ] .
Reference: [ Challou et al., 1993 ] <author> D. Challou, M. Gini, and V. Kumar. </author> <title> Parallel search algorithms for robot motion planning. </title> <booktitle> In Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: The table show data for at least 64 runs on a CM-5 multicomputer. All times are in seconds. 4.3 A very difficult example planar robot with one control point operating in a 256 x 256 cell workspace <ref> [ Challou et al., 1993 ] </ref> . Each joint has up to 256 discrete positions. The algorithm reduces the average computation time from 34411 seconds (over 9 hours) on one processor to an average of 180 seconds (3 minutes) on 1024 processors.
Reference: [ Challou et al., 1995a ] <author> D. Challou, D. Boley, M. Gini, and V. Kumar. </author> <title> A parallel formulation of informed randomized search for for robot motion planning problems. </title> <booktitle> In Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 709-714, </pages> <year> 1995. </year>
Reference-contexts: All times are in seconds. For the problem illustrated in Figure 3, just 32 processors are required to cut the average solution time to under ten seconds, and 128 processors deliver solutions ten times faster than the sequential version of the system (on average) <ref> [ Challou et al., 1995a ] </ref> . In our tests, 512 processors insured that the solution was found in under three and one half seconds.
Reference: [ Challou et al., 1995b ] <author> D. Challou, M. Gini, V. Kumar, and C. Olson. </author> <title> Very fast motion planning for dexterous robots. </title> <booktitle> In Proc. IEEE International Symposium on Assembly and Task Planning (ISATP), </booktitle> <pages> pages 201-206, </pages> <year> 1995. </year>
Reference-contexts: and using different parallel architectures. 4.1 Experiments with a Robotics Research K-1207i arm For the problem shown in Figure 1 just 16 processors are required to cut the average solution an order of magnitude to under ten seconds, and 64 processors cut the average solution time to under five seconds <ref> [ Challou et al., 1995b ] </ref> . In addition to delivering paths in shorter time frames, another important property of the parallel formulation is that, when it is executed with a larger number of processors, it tends to produce better solutions.
Reference: [ Challou, 1995 ] <author> D. Challou. </author> <title> Parallel search algorithms for robot motion planning. </title> <type> Ph.D. dissertation, </type> <institution> The University of Minnesota, </institution> <year> 1995. </year>
Reference-contexts: We have shown that our parallel formulation is capable of generating plans in very short time frames on various parallel architectures <ref> [ Challou, 1995 ] </ref> , including a 1024 processor nCUBE2 1 , a 512-processor CM5 2 , and a 16-processor network of Sun workstations. One might argue that massively parallel machines are not a viable platform for path planning systems due to their prohibitive cost. <p> Then a 32 processor system has over a 96% probability of finding a solution within t 10% , and a 64 processor system has over a 99% chance of doing so. Space does not permit a more detailed analysis, which can be found in <ref> [ Challou, 1995 ] </ref> . We define speedup as: S = E [T k ] where E [T 1 ] is the average uniprocessor solution time, and E [T k ] the average k processor solution time. <p> Our parallel formulation of randomized heuristic search has proved extremely effective in solving motion planning problems. The formulation has yielded impressive performance gains on every problem we have employed it on, sometimes delivering superlinear speedup <ref> [ Challou, 1995 ] </ref> . We have observed superlinear speedup when using a small number of processors in the majority of our experiments. This shows that it pays to use our parallel algorithm, even when only 4 or 8 processors are available.
Reference: [ Chen and Hwang, 1992 ] <author> Pang C. Chen and Yong K. Hwang. SANDROS: </author> <title> a motion planner with performance proportional to task difficulty. </title> <booktitle> In Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pages 2346-2353, </pages> <year> 1992. </year>
Reference-contexts: and the Center for Advanced Manufacturing, Design and Control of the University of Minnesota. 1 To obtain acceptable performance, some methods do a significant amount of preprocessing of the config-uration space (C-space) [ Kavraki, 1994 ] , or place landmarks in C-space that are then used by a local planner <ref> [ Bessiere et al., 1993, Chen and Hwang, 1992 ] </ref> .
Reference: [ Hwang and Ahuja, 1992 ] <author> Y.K. Hwang and N. Ahuja. </author> <title> Gross motion planning a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 219-291, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Motion planning is the process of computing paths that will allow a robot to move to different positions in its environment without hitting obstacles. Many algorithms have been developed [ Latombe, 1991 ] , but most are never used in practice because of their computational complexity <ref> [ Hwang and Ahuja, 1992 ] </ref> . The intent of this paper is to show that plans for multi-jointed dexterous robot arms which operate in realistic environments can be synthesized very quickly by parallel algorithms.
Reference: [ Kavraki, 1994 ] <author> L. Kavraki. </author> <title> Randomized preprocessing of C-space for fast path planning. </title> <booktitle> In Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pages 2138-2145, </pages> <year> 1994. </year>
Reference-contexts: Additional support was furnished by NSF/CDA-9022509, NSF/CCR-9405380, and the Center for Advanced Manufacturing, Design and Control of the University of Minnesota. 1 To obtain acceptable performance, some methods do a significant amount of preprocessing of the config-uration space (C-space) <ref> [ Kavraki, 1994 ] </ref> , or place landmarks in C-space that are then used by a local planner [ Bessiere et al., 1993, Chen and Hwang, 1992 ] .
Reference: [ Laliberte and Gosselin, 1994 ] <author> Thierry Laliberte and Clement Gosselin. </author> <title> Efficient algorithms for the trajectory planning of redundant manipulators with obstacle avoidance. </title> <booktitle> In Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pages 2044-2049, </pages> <year> 1994. </year>
Reference-contexts: The ability to plan paths quickly is important to make motion planning useful in application areas, such as industrial robotics, teleoperation [ Lumelsky and Cheng, 1993 ] , control of redundant robots <ref> [ Laliberte and Gosselin, 1994 ] </ref> . Real-time motion planning coupled with real-time sensing will allow robots to adapt their planned paths to take into account the uncertainties of the real world. <p> First, parallel formulations of randomized search can easily be developed using randomized allocation schemes. Second, the grid-based representation of the workspace is especially convenient when sensors are used to construct it, as shown, for instance, by [ Moravec, 1988 ] , <ref> [ Laliberte and Gosselin, 1994 ] </ref> .
Reference: [ Langley, 1992 ] <author> Pat Langley. </author> <title> Systematic and nonsystematic search strategies. </title> <booktitle> In Proc. Int'l Conf. on AI Planning Systems, </booktitle> <pages> pages 145-152, </pages> <address> College Park, Md, </address> <year> 1992. </year>
Reference-contexts: Recent advances in networks will soon make parallel computing on clusters of workstations a viable option for high performance computing. 3 Parallel Motion Planning Many methods have been developed for searching a state-space graph or tree. We categorize them into the two broad classes proposed by Langley <ref> [ Langley, 1992 ] </ref> called systematic and nonsystematic search. Systematic search methods enumerate each node in the search space according to a particular strategy. Systematic search methods produce each possible path only once, thus they minimize the amount of redundant work. <p> Nonsystematic searches are particularly effective on tasks whose solutions are many and deep, and though purely randomized search methods can be successful, they can often benefit from heuristic knowledge <ref> [ Langley, 1992 ] </ref> . To date, most parallel implementations have focused on systematic search methods. <p> Randomized schemes have been shown to outperform uninformed methods under certain criteria [ Mehrotra and Gehringer, 1985 ] . Randomized search methods can often benefit from heuristic knowledge <ref> [ Langley, 1992 ] </ref> . To implement the randomized motion planning algorithm on parallel architectures, we broadcast the workspace bitmap and desired goal location to all processors, and check for a message indicating that a processor has found a solution. Each processor runs the same basic program.
Reference: [ Latombe, 1991 ] <author> J. C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publ., Norwell, </publisher> <address> MA, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Motion planning is the process of computing paths that will allow a robot to move to different positions in its environment without hitting obstacles. Many algorithms have been developed <ref> [ Latombe, 1991 ] </ref> , but most are never used in practice because of their computational complexity [ Hwang and Ahuja, 1992 ] . <p> Over the last few years the theoretical and practical understanding of the issues has increased rapidly, and a variety of solutions have been proposed. Latombe <ref> [ Latombe, 1991 ] </ref> provides an extensive overview. There are two different spaces associated with motion planning algorithms, the workspace and the configuration space (C-space). The workspace is the world that the robot must move through, the C-space is the set of all robot configurations.
Reference: [ Lozano-Perez, 1991 ] <author> T. Lozano-Perez. </author> <title> Parallel robot motion planning. </title> <booktitle> In Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pages 1000-1007, </pages> <year> 1991. </year>
Reference-contexts: Real time has been achieved in detection of imminent collisions [ Shaffer, 1992, Wikman et al., 1993 ] , but not for path planning. In an effort to decrease the computation time, some researchers have devised parallel methods. Lozano-Perez <ref> [ Lozano-Perez, 1991 ] </ref> was the first to develop a parallel algorithm to compute the discretized C-space for the first three links of a six dof manipulator. This method works well, but it is limited to relatively coarse C-space discretizations due to memory limitations.
Reference: [ Lumelsky and Cheng, 1993 ] <author> V. Lumelsky and Edward Cheng. </author> <title> Real-time collision avoidance in teleoperated whole sensitive robot arm manipulators. </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> SMC-23(1):194-203, </volume> <month> Jan/Feb </month> <year> 1993. </year>
Reference-contexts: The intent of this paper is to show that plans for multi-jointed dexterous robot arms which operate in realistic environments can be synthesized very quickly by parallel algorithms. The ability to plan paths quickly is important to make motion planning useful in application areas, such as industrial robotics, teleoperation <ref> [ Lumelsky and Cheng, 1993 ] </ref> , control of redundant robots [ Laliberte and Gosselin, 1994 ] . Real-time motion planning coupled with real-time sensing will allow robots to adapt their planned paths to take into account the uncertainties of the real world.
Reference: [ Mehrotra and Gehringer, 1985 ] <author> R. Mehrotra and E. F. Gehringer. </author> <title> Superlinear speedup through randomized algorithms. </title> <booktitle> In Proc. Int'l Conf. on Parallel Processing, </booktitle> <pages> pages 291-300, </pages> <year> 1985. </year>
Reference-contexts: The latter formulations are commonly referred to as randomized search methods. In both formulations the first processor to find a solution sends a termination signal to the remaining processors, and then reports its solution. Randomized schemes have been shown to outperform uninformed methods under certain criteria <ref> [ Mehrotra and Gehringer, 1985 ] </ref> . Randomized search methods can often benefit from heuristic knowledge [ Langley, 1992 ] .
Reference: [ Moravec, 1988 ] <author> H. P. Moravec. </author> <title> Sensor fusion in certainty grids for mobile robots. </title> <journal> AI Magazine, </journal> <volume> 9(2) </volume> <pages> 61-74, </pages> <year> 1988. </year>
Reference-contexts: There are many reasons for our selection of the algorithm to parallelize. First, parallel formulations of randomized search can easily be developed using randomized allocation schemes. Second, the grid-based representation of the workspace is especially convenient when sensors are used to construct it, as shown, for instance, by <ref> [ Moravec, 1988 ] </ref> , [ Laliberte and Gosselin, 1994 ] .
Reference: [ Shaffer, 1992 ] <author> Clifford A. Shaffer. </author> <title> A real-time robot arm collision avoidance system. </title> <journal> IEEE Trans. Robotics and Automation, </journal> <volume> RA-8(2):149-160, </volume> <year> 1992. </year>
Reference-contexts: Real time has been achieved in detection of imminent collisions <ref> [ Shaffer, 1992, Wikman et al., 1993 ] </ref> , but not for path planning. In an effort to decrease the computation time, some researchers have devised parallel methods.
Reference: [ Wikman et al., 1993 ] <author> Thomas S. Wikman, Michael Branicky, and Wyatt S. Newman. </author> <title> Reflexive collision avoidance: a generalized approach. </title> <booktitle> In Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <volume> volume 3, </volume> <pages> pages 31-36, </pages> <year> 1993. </year>
Reference-contexts: Real time has been achieved in detection of imminent collisions <ref> [ Shaffer, 1992, Wikman et al., 1993 ] </ref> , but not for path planning. In an effort to decrease the computation time, some researchers have devised parallel methods.
References-found: 19

