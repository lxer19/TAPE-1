URL: http://nugget.cs.ucla.edu:8001/~shek/publications/cs960039.ps
Refering-URL: http://nugget.cs.ucla.edu:8001/~shek/publications/index.html
Root-URL: http://www.cs.ucla.edu
Email: fshek, muntz, larryg@cs.ucla.edu  
Title: The Design of the FALCON Framework for Application Level Communication Optimization  
Author: Eddie C. Shek, Richard R. Muntz, Larry Fillion 
Date: November 14, 1996  
Address: Los Angeles, CA 90024  
Affiliation: Data Mining Laboratory Computer Science Department University of California  
Abstract: There exist a wide-variety of communication-intensive applications which run in networks and platforms of greatly varying characteristics. This implies the need for application level communication optimization, which is the optimization of network communication by exploiting application semantics as well as network and compute node characteristics. In this paper, we propose a flexible object-oriented framework called FALCON for application level communication optimization by allowing complementary network communication optimization techniques to be combined in the form of matching stack layers at the endpoints of a communication channel. Each stack layer is composed of a pair of matching modules, executed in the sender and receiver endpoints respectively. To exploit application knowledge that is only available to one of the communicating peers, the framework allows an executable stack layer module to be supplied by either of the communication peers and provides for safe transport to and execution at the other end of the channel. Automatic rule-based optimization techniques similar to those used for extensible database query optimization are developed to optimize the communication channel stacks based on the characteristics of available stack layers, required properties of the channel, and an application-dependent cost model. In addition to providing architectural support for optimizing network communication, FALCON can also be used to introduce support for new communication and computing paradigms in high-level distributed computing environments. For example, while OMG's CORBA distributed object management architecture adopts remote method invocation as its primary communication mechanism, data streaming and service migration can be easily accommodated within the FALCON framework. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Arnold and J. Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: On the other hand, the receiver can register a complex, procedurally defined function on the sender-side to filter out irrelevant data not filtered by sender-side queries. As a result, stack layer module objects should be implemented in languages supporting code mobility, such as Java <ref> [1] </ref> and safe-Tcl [2], so they can be safely migrated from one node to another. 3.2 FALCON Channel Manager The FALCON channel manager (see Figure 4) controls the channel optimizer which determines the optimal choice of stack layers to be instantiated in the endpoints of a communication channel.
Reference: [2] <author> N.S. Borenstein. </author> <title> Email with a mind of its own: The safe-tcl language for enabled mail. </title> <booktitle> In Proc. IFIP working Group 6.5 ULPAA (Upper Layer Protocols, Architectures, and Applications) '94 Conference, </booktitle> <year> 1994. </year>
Reference-contexts: On the other hand, the receiver can register a complex, procedurally defined function on the sender-side to filter out irrelevant data not filtered by sender-side queries. As a result, stack layer module objects should be implemented in languages supporting code mobility, such as Java [1] and safe-Tcl <ref> [2] </ref>, so they can be safely migrated from one node to another. 3.2 FALCON Channel Manager The FALCON channel manager (see Figure 4) controls the channel optimizer which determines the optimal choice of stack layers to be instantiated in the endpoints of a communication channel.
Reference: [3] <author> D. Clark and D. Tennenhouse. </author> <title> Architectural considerations for a new generation of protocols. </title> <booktitle> In Proceedings of ACM SIGCOMM '90, </booktitle> <pages> pages 200-208, </pages> <year> 1990. </year>
Reference-contexts: In other words, this prototype implementation trades off safety and platform-independence for higher performance. 5 Related Work The motivation for application level communication optimization is similar to that for Application Level Framing <ref> [3] </ref> which emphasizes the fact that a lot of knowledge about an application is oblivious to the network.
Reference: [4] <author> I. Foster, J. Giesler, C. Kesselman, and S. Tuecke. </author> <title> Managing multiple communication methods in high-performance networked computing systems. </title> <note> To appear in Journal of Parallel and Distributed Computing, </note> <year> 1997. </year>
Reference-contexts: Techniques developed to allow multiple network protocols to be used given a uniform interface such as multimethod communication <ref> [4] </ref> can be supported transparently in FALCON at the network layer in conjunction with distributed computing environments (especially those with suboptimal networking implementation such as CORBA) for the cases where optimized networking support significantly improves overall system performance. 6 3 Framework Design FALCON is a collection of objects that together support <p> Many of the design issues involved are similar to those in developing a multimethod communication architecture <ref> [4] </ref> which involves implementing a high-level communication abstraction in a diverse collection of actual low-level communication methods. In multimethod communication, to initialize communication, a receiver creates a global pointer which contains communication end points for all communication methods ranked in some order.
Reference: [5] <author> G. Graefe. </author> <title> Volcano an extensible and parallel query evaluation system. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 6(1) </volume> <pages> 120-135, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: To prevent this from occurring, we need to combine data-driven pipelining with a mechanism that regulates the rate of data flow. For example, the Volcano extensible query processing system <ref> [5] </ref> proposed a stream buffer control protocol in the context of the exchange operator. A buffer is created in the receiver into which the sender continuously deposits data until it is full. The receiver application on the other hand retrieves data from the buffer rather than from the communication endpoint.
Reference: [6] <author> G. Graefe and W.J. McKenna. </author> <title> The Volcano optimizer generator: Extensibility and efficient search. </title> <booktitle> In Proc. 9th Int'l Conf. on Data Engineering, </booktitle> <pages> pages 209-218, </pages> <year> 1993. </year>
Reference-contexts: This flexibility introduces an exponential explosion of valid combinations that have to be inspected by the optimizer in order for an optimal stack to be generated. As a result, the FALCON channel optimizer employs an efficient top-down, goal-oriented directed dynamic programming <ref> [6] </ref> search algorithm that is primarily directed by the need to select a stack layer that can satisfy the required properties, instead of being completely driven by possibilities like dynamic programming based techniques. Figure 7 shows the pseudocode that outlines the FALCON channel optimizer's search algorithm. <p> However, stacks in these systems are constructed in an "ad-hoc" manner and are not systematically optimized. On the other hand, the FALCON optimizer adapts well-studied rule-based database query optimization techniques <ref> [6] </ref> to handle an extensible set of stack layer implementations that can be introduced at run-time by clients and servers in an environment supporting FALCON.
Reference: [7] <author> J. S. Heidemann. </author> <title> Stackable Design of File Systems. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1995. </year>
Reference-contexts: The idea of stacking simple protocols to simplify the development and encourage reuse is motivated by Horus Protocol Stack composition [13] and Stackable file system <ref> [7] </ref>. However, stacks in these systems are constructed in an "ad-hoc" manner and are not systematically optimized.
Reference: [8] <author> V.E. Jones and M. Winslett. </author> <title> JaDE: Access control in a java-based object database. </title> <booktitle> In Proceedings OOPSLA'95 Workshop on Object Database Behavior, Benchmarks, and Performance, </booktitle> <year> 1995. </year>
Reference-contexts: In addition to being a fundamental building block of our dynamic communication framework, the support for transportable executable module (passed from a process to another as a parameter to remote procedure call or remote method invocation) also has very significant application to the construction of extensible systems such as OODBMSs <ref> [8] </ref>. As a proof of concept, we have prototyped FALCON in CORBA to support data streaming and application-level communication optimization.
Reference: [9] <author> I. Pyarali, T. H. Harrison, and D. C. Schmidt. </author> <title> Design and performance of an object-oriented framework for high-speed electronic medical imaging. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Technologies and Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Examples of such applications include telemedicine, and geoscientific information systems. The goal of supporting streams in CORBA in this prototype is similar to that of blob streaming in CORBA <ref> [9] </ref>. However, blob streaming aims mainly to push data through a TCP/IP connection as fast as possible by and it does not support application level optimization of communication which we have motivated in earlier sections.
Reference: [10] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: A FALCON communication channel optimizes communication by transparently stacking different application level communication optimization layers on top of a network protocol layer in each of the endpoints. Figure 2 shows, in OMT object model notation <ref> [10] </ref>, the object aggregation/composition relationships between objects that constitute communication channels in FALCON. A FALCON channel behaves like a connection-oriented network link at initialization time which has an explicit connection phase during which the optimization stacks in the endpoints in a communication channel are configured.
Reference: [11] <author> R. M. Soley, </author> <title> editor. Object Management Architecture Guide (2nd Edition). </title> <booktitle> Object Management Group, </booktitle> <year> 1992. </year>
Reference-contexts: We also outline the interface of the main components of the framework in IDL, as well as the major algorithms that govern the operation of the framework. Section 4 describes the prototyp-ing of our proposed framework in the CORBA <ref> [11] </ref> distributed object computing environment to provide optimized data streaming support. We take advantage of CORBA to simplify the channel 3 configuration process, and use Java as a safe and platform-independent language to allow a sender--side stack layer implementation to be supplied by the receiver (and vice versa).
Reference: [12] <author> C.J. Turner and L.L. Peterson. </author> <title> Image transfer: An end-to-end design. </title> <booktitle> In Proceedings of ACM SIGCOMM '92, </booktitle> <pages> pages 258-268, </pages> <year> 1992. </year>
Reference-contexts: However, there are often cases where lossy data transfer combined with a synchronous communication protocol is acceptable. For example, given a lossy communication protocol, special multimedia compression and encoding algorithms can be used that allow the receiver to recover from dropped network packets without requiring the sender to retransmit <ref> [12] </ref>. * Network Quality of Service. The quality of service classification scheme of ATM can be adopted to specify bandwidth requirement. In particular, we can allow for the following quality of service specification: CBR (Constant BitRate) vs. VBR (Variable BitRate) vs. ABR (Available BitRate) vs. UBR (Unspecified BitRate).
Reference: [13] <author> R. van Renesse, K. Birman, R. Friedman, M. Hayden, and D. Karr. </author> <title> A framework for protocol composition in horus. </title> <booktitle> In Proceedings of Principles of Distributed Computing Conference, </booktitle> <year> 1995. </year> <month> 24 </month>
Reference-contexts: The idea of stacking simple protocols to simplify the development and encourage reuse is motivated by Horus Protocol Stack composition <ref> [13] </ref> and Stackable file system [7]. However, stacks in these systems are constructed in an "ad-hoc" manner and are not systematically optimized.
References-found: 13

