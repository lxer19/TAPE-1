URL: http://charm.cs.uiuc.edu/manuals/yaddes-perf.ps.gz
Refering-URL: http://charm.cs.uiuc.edu/manuals/
Root-URL: http://www.cs.uiuc.edu
Title: Performance of Discrete Event Simulation on a Multiprocessor using Optimistic and Conservative Synchronization  
Author: Bruno R. Preiss 
Address: Waterloo, Ontario, Canada, N2L 3G1  
Affiliation: Pennsylvania State University  Department of Electrical and Computer Engineering University of Waterloo,  
Note: Copyright (c) 1990 by The  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Preiss, B. R., Loucks, W. M., and Hamacher, V. C., </author> <title> ``A Unified Modeling Methodology for Performance Evaluation of Distributed Discrete Event Simulation Mechanisms,'' </title> <booktitle> Proc. 1988 Winter Simulation Conf., </booktitle> <pages> pp. 315-324, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: The number of outputs that a node has affects the number of null messages that must be sent when using the CM synchronization method. The size of the smallest loop affects the rate of feedback which impacts on the performance of the synchronization method <ref> [1, 12] </ref>. 4.2. Communication and Computation Loads The number of customers in each queue at simulation time zero is a measure of the communication and computation load of the benchmark. In this paper, we present results for loads of one, four, and eight customers in each queue at time zero.
Reference: 2. <author> Preiss, B. R., </author> <title> ``The Yaddes Distributed Discrete Event Simulation Specification Language and Execution Environments,'' </title> <booktitle> Proc. SCS Multiconf. Distributed Simulation, </booktitle> <volume> Vol. 21, No. 2, </volume> <pages> pp. 139-144, </pages> <month> March </month> <year> 1989. </year>
Reference: 3. <author> Loucks, W. M. and Preiss, B. R., </author> <title> ``The Role of Knowledge in Distributed Simulation,'' </title> <booktitle> Proc. SCS Multiconf. Distributed Simulation, </booktitle> <pages> pp. 9-16, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: The degree to which an LP can predict depends on the system being simulated and on the implementation of the simulation. The simulation programmer can affect the latter by incorporating more ``knowledge'' into the implementation of the simulation <ref> [3, 15, 16] </ref>. 5.1. Epsilon Lookahead The smallest possible lookahead is zero. However, distributed simulation using conservative synchronization will immediately deadlock if all processes have zero lookahead. To avoid this deadlock, the epsilon lookahead model uses a lookahead equal to the smallest possible non-zero simulation time increment, e.
Reference: 4. <author> Preiss, B. R. and Loucks, W. M., </author> <title> ``Prediction and Lookahead in Distributed Simulation,'' </title> <type> CCNG Technical Report E-191, </type> <institution> Computer Communications Networks Group, University of Waterloo, Waterloo, </institution> <address> Ontario, CANADA, </address> <year> 1989. </year>
Reference: 5. <author> Reed, D. A., Malony, A. D., and McCredie, B. D., </author> <title> ``Parallel Discrete Event Simulation Using Shared Memory,'' </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 14, No. 4, </volume> <pages> pp. 541-553, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Furthermore, this means that the most appropriate algorithms for event sequencing can be applied to the uniprocessor and multiprocessor simulations leading to more meaningful speedup data. Specifically, the uniprocessor and multiprocessor algorithms need not be the same. (See also <ref> [5] </ref> and [6]. ) 2. The Yaddes Simulation System The Yaddes system is a tool for constructing discrete event simulations. The user prepares a specification of the desired simulation. The Yaddes compiler translates the specification into a C language program.
Reference: 6. <author> Fujimoto, R. M., </author> <title> ``Time Warp on a Shared Memory Multiprocessor,'' </title> <booktitle> Proc. Int. Conf. on Parallel Processing, </booktitle> <volume> Vol. III, </volume> <pages> pp. 242-249, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Furthermore, this means that the most appropriate algorithms for event sequencing can be applied to the uniprocessor and multiprocessor simulations leading to more meaningful speedup data. Specifically, the uniprocessor and multiprocessor algorithms need not be the same. (See also [5] and <ref> [6] </ref>. ) 2. The Yaddes Simulation System The Yaddes system is a tool for constructing discrete event simulations. The user prepares a specification of the desired simulation. The Yaddes compiler translates the specification into a C language program.
Reference: 7. <author> Misra, J., </author> <title> ``Distributed Discrete-Event Simulation,'' </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 18, No. 1, </volume> <pages> pp. 39-66, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: The advantage of the Yaddes system is that it uses a programming model that supports several different simulation synchronization methods. In particular, Yaddes supports sequential simulation using an event list and three distributed simulation synchronization methods distributed simulation using multiple event lists; conservative (Chandy-Misra-Bryant) distributed simulation <ref> [7] </ref>; and, optimistic (virtual-time-based) distributed simulation [8]. The programming model used in the Yaddes system is derived from Chandy-Misra-Bryant distributed discrete event simulation. The real-world system is modeled by a collection of physical processes (PPs) that periodically exchange information.
Reference: 8. <author> Jefferson, D. R., </author> <title> ``Virtual Time,'' </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 7, No. 3, </volume> <pages> pp. 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: In particular, Yaddes supports sequential simulation using an event list and three distributed simulation synchronization methods distributed simulation using multiple event lists; conservative (Chandy-Misra-Bryant) distributed simulation [7]; and, optimistic (virtual-time-based) distributed simulation <ref> [8] </ref>. The programming model used in the Yaddes system is derived from Chandy-Misra-Bryant distributed discrete event simulation. The real-world system is modeled by a collection of physical processes (PPs) that periodically exchange information.
Reference: 9. <author> Brown, R., </author> <title> ``Calendar Queues: A Fast O(1) Priority Queue Implementation of the Simulation Event Set Problem,'' </title> <journal> Communications of the ACM, </journal> <volume> Vol. 31, No. 10, </volume> <pages> pp. 1220-1227, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The current implementation of the EL method uses a linear linked list to hold the future events. It is well known that this is not an optimal data structure for this application. To obtain uninflated speedup figures, a more efficient data structure such as calendar queues <ref> [9] </ref> should be used. 3.2. Distributed Simulation Using Multiple Event Lists The multiple list synchronization method (ML) is a simple extension of the EL method to a multiprocessor. The EL method uses a serial algorithm in which event combinations are processed one at a time.
Reference: 10. <author> Jefferson, D., Beckman, B., Wieland, F., Blume, L., DiLoreto, M., Hontalas, P., Laroche, P., Sturdevant, K., Tupman, J., Warren, V., Wedel, J., Younger, H., and Bellenot, S., </author> <title> ``Distributed Simulation and the Time Warp Operating System,'' </title> <booktitle> Proc. 12th SIGOPS Symposium on Operating Systems Principles, </booktitle> <pages> pp. 77-93, </pages> <year> 1987. </year>
Reference-contexts: Hence, a simulation written for CM can be executed using the other synchronization methods without change. 3.4. Distributed Simulation Using Optimistic Synchronization The optimistic synchronization method (VT) is based on the virtual-time concept used in the Time Warp Operating System <ref> [10] </ref>. As in the CM method, each Yaddes LP runs as a separate task and is managed by an envelope. However, the VT method differs from CM in that it uses an event synchronization method that does not deadlock. Every envelope has a local clock.
Reference: 11. <author> Nicol, D. M., </author> <title> ``High Performance Parallelized Discrete Event Simulation of Stochastic Queueing Networks,'' </title> <booktitle> Proc. 1988 Winter Simulation Conf., </booktitle> <pages> pp. 306-314, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: The envelope has buffers that save past inputs, past states, and antimessages. Copyright (c) 1990 by The Pennsylvania State University 5 4. Queueing Network Benchmarks The suite of benchmark programs used in this study was adapted from Nicol <ref> [11] </ref>. The suite consists of simulations of four different closed stochastic queueing networks. Each queueing network contains a fixed number of nodes (64 in all cases). A node consists of a single queue and server. The network is populated with a fixed number of customers. <p> This model presamples the random number generator to ``predict'' service times and routing for customers that have not yet arrived. This model is implemented using a futurelist <ref> [11] </ref>. The presampling lookahead model treats customer-bearing messages exactly the same as the system-time lookahead model. The presam-pling of the random number generator to predict service times and routing only affects the timestamps on the null messages.
Reference: 12. <author> Leung, E., Cleary, J., Lomow, G., Baezner, D., and Unger, B., </author> <title> ``The Effects of Feedback on the Performance of Conservative Algorithms,'' </title> <booktitle> Proc. SCS Multiconf. Distributed Simulation, </booktitle> <volume> Vol. 21, </volume> <booktitle> Copyright (c) 1990 by The Pennsylvania State University 11 No. </booktitle> <volume> 2, </volume> <pages> pp. 44-49, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: The number of outputs that a node has affects the number of null messages that must be sent when using the CM synchronization method. The size of the smallest loop affects the rate of feedback which impacts on the performance of the synchronization method <ref> [1, 12] </ref>. 4.2. Communication and Computation Loads The number of customers in each queue at simulation time zero is a measure of the communication and computation load of the benchmark. In this paper, we present results for loads of one, four, and eight customers in each queue at time zero.
Reference: 13. <author> Fujimoto, R. M., </author> <title> ``Performance Measurements of Distributed Simulation Strategies,'' </title> <journal> Trans. Society for Computer Simulation, </journal> <volume> Vol. 6, No. 2, </volume> <pages> pp. 89-132, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: The four implementations differ in the degree of lookahead used. Lookahead for an LP is the largest value, t, such that if an LP knows all events up to and including some simulation time T, it can predict all actions that the LP will take up to time T+t <ref> [13, 14] </ref>. The degree to which an LP can predict depends on the system being simulated and on the implementation of the simulation. The simulation programmer can affect the latter by incorporating more ``knowledge'' into the implementation of the simulation [3, 15, 16]. 5.1.
Reference: 14. <author> Wagner, D. B. and Lazowska, E. D., </author> <title> ``Parallel Simulation of Queueing Networks: Limitations and Potentials,'' </title> <journal> Performance Evaluation Review, </journal> <volume> Vol. 17, No. 1, </volume> <pages> pp. 146-155, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: The four implementations differ in the degree of lookahead used. Lookahead for an LP is the largest value, t, such that if an LP knows all events up to and including some simulation time T, it can predict all actions that the LP will take up to time T+t <ref> [13, 14] </ref>. The degree to which an LP can predict depends on the system being simulated and on the implementation of the simulation. The simulation programmer can affect the latter by incorporating more ``knowledge'' into the implementation of the simulation [3, 15, 16]. 5.1.
Reference: 15. <author> Chandy, K. M. and Misra, J., </author> <title> ``Conditional Knowledge as a Basis for Distributed Simulation,'' </title> <type> Technical Report 5251:TR:87, </type> <institution> Computer Science Department, California Institute of Technology, Pasadena, California, </institution> <year> 1987. </year>
Reference-contexts: The degree to which an LP can predict depends on the system being simulated and on the implementation of the simulation. The simulation programmer can affect the latter by incorporating more ``knowledge'' into the implementation of the simulation <ref> [3, 15, 16] </ref>. 5.1. Epsilon Lookahead The smallest possible lookahead is zero. However, distributed simulation using conservative synchronization will immediately deadlock if all processes have zero lookahead. To avoid this deadlock, the epsilon lookahead model uses a lookahead equal to the smallest possible non-zero simulation time increment, e.

References-found: 15

