URL: ftp://ftp.cs.umn.edu/users/konstan/TclStream.ps
Refering-URL: http://www.cs.umn.edu/Research/GIMME/tclstream.html
Root-URL: http://www.cs.umn.edu
Title: Abstract  
Abstract: This paper discusses the design and implementation of a command stream based on Tcl. A command stream is a series of arbitrary commands that can be tightly synchronized with other media in a distributed multimedia presentation. In TclStream, we represent an arbitrary command as a collection of fragments of Tcl code. The command stream medium supports the standard manipulation functions of multimedia environments: reverse, fast-forward, random access, and variable speed. The ability to specify arbitrary actions, combined with fine playback control, make TclStream an extremely exible and powerful presentation medium. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <address> Addi-son-Wesley, Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: Introduction Conventional multimedia applications focus on audio, video, image, and text media. In this paper, we introduce a more exible and more powerful medium--a stream of commands. This stream of commands--Tcl <ref> [1] </ref> commands in particular-can be used to implement animation, device control, user-interfaces, and many other less-conventional media types. A command stream is a real-time medium composed of discrete commands. The commands may reside anywhere on the network, but they are executed locally on the machine where other medias are displayed. <p> Therefore a command stream must support the following operations: Playback in reverse. Playback at variable speeds (normal, fast-for ward, fast-rewind). * This work was supported in part by grants from the National Science Foundation <ref> (IRI-9410470) </ref> and the Graduate School of the University of Minnesota. Random access to any point of the stream. Synchronization with discrete elements of other media streams, such as video frames and audio samples. Tcl commands are particularly useful as the basis for the command stream. <p> Tcl commands are particularly useful as the basis for the command stream. They are general, placing few restrictions on the actions we can perform. Tcl also provides a ready-to-use interpreter and integration into a net-worked environment [2]. Tcl commands can be used to access powerful libraries such as Tk <ref> [1] </ref>, to generate user interfaces, and Expect [3], to operate interactive processes. We implemented the Tcl command stream as a new medium for the Berkeley Continuous Media Toolkit (CMT) [4].
Reference: 2. <author> Brian C. Smith, Lawrence A. Rowe, Stephen C. Yen. </author> <title> Tcl Distributed Programming, </title> <booktitle> Proc. of the 1993 Tcl/TK Workshop, </booktitle> <address> Berkeley, CA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Tcl commands are particularly useful as the basis for the command stream. They are general, placing few restrictions on the actions we can perform. Tcl also provides a ready-to-use interpreter and integration into a net-worked environment <ref> [2] </ref>. Tcl commands can be used to access powerful libraries such as Tk [1], to generate user interfaces, and Expect [3], to operate interactive processes. We implemented the Tcl command stream as a new medium for the Berkeley Continuous Media Toolkit (CMT) [4]. <p> It is implemented in a combination of C and Tcl, with the API being in Tcl. CMT runs with a Tcl interpreter whose core has been augmented to better support real time scheduling, as well as the TclDP <ref> [2] </ref> and CMT command extensions. Tcl Commands as Media in a Distributed Multimedia Toolkit * Jonathan L. Herlocker Joseph A. Konstan Department of Computer Science University of Minnesota Minneapolis, MN 55455 -herlocke,konstan-@cs.umn.edu ting the offset to (SystemClock - NewLogicalTime).
Reference: 3. <author> Don Libes. </author> <title> Expect: Scripts for Controlling Interactive Processes. </title> <journal> Computing Systems: the Journal of the USENIX Association. </journal> <volume> Volume 4, Number 2. </volume> <month> Spring </month> <year> 1991. </year>
Reference-contexts: They are general, placing few restrictions on the actions we can perform. Tcl also provides a ready-to-use interpreter and integration into a net-worked environment [2]. Tcl commands can be used to access powerful libraries such as Tk [1], to generate user interfaces, and Expect <ref> [3] </ref>, to operate interactive processes. We implemented the Tcl command stream as a new medium for the Berkeley Continuous Media Toolkit (CMT) [4]. CMT provides support for several media types (including audio & video), network transmission of media, and a timeline based synchronization mechanism (shared logical clock).
Reference: 4. <author> Lawrence A. Rowe and Brian C. Smith. </author> <title> A continuous media player. </title> <booktitle> Proceedings of the Third International Workshop on Network and Operating Systems Support for Digital Audio and Video, p. x+416, </booktitle> <pages> 376-86. </pages>
Reference-contexts: Tcl commands can be used to access powerful libraries such as Tk [1], to generate user interfaces, and Expect [3], to operate interactive processes. We implemented the Tcl command stream as a new medium for the Berkeley Continuous Media Toolkit (CMT) <ref> [4] </ref>. CMT provides support for several media types (including audio & video), network transmission of media, and a timeline based synchronization mechanism (shared logical clock). By adding the Tcl stream to CMT, we are able to integrate Tcl streams with other media in presentations.
Reference: 5. <author> Frank Gadegast. </author> <note> The MPEG-FAQ. Version 3.2, </note> <month> Aug </month> <year> 1994. </year> <note> http://www.cs.tu-berlin.de/~phade/ mpeg/faq/mpegfa32.zip. </note>
Reference-contexts: This should allow for considerable speedups when a large number of chunks are skipped and rush-ahead actions need to be played. Another possible solution was inspired by an observation of the MPEG encoding standard for video <ref> [5] </ref>. The basic idea is to designate certain time spots as key points and to pre-compute the easiest way to jump from each key point to the next and the previous one.
References-found: 5

