URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-91-12.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: Polygon Scan Conversion Derivations Caltech-CS-TR-91-12  
Author: Kurt Fleischer 
Address: Library, Caltech MS 256-80, Pasadena, CA, 91125.  Pasadena, CA, 91125.  
Affiliation: Computer Science  Dept of Computation and Neural Systems, Mail Stop 350-74, California Inst of Technology,  
Note: For copies, contact the  
Date: October 27, 1995  
Abstract: This report is a supplement to Accurate Polygon Scan Conversion Using Half-Open Intervals [Fleischer & Salesin]. It is assumed that the reader is familiar with that Graphics Gems III article, and the code included in its appendix. The material here is meant to be read in that context, and may be difficult to understand without it. Note: the Graphics Gems code is available via anonymous ftp [C Code]. This report includes: * a more detailed derivation of the EdgeScan algorithm (for both integer and subpixel vertices), * some explanatory diagrams, * and short discussions concerning underflow and overflow in the fixpoint arithmetic for the subpixel version of the algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [Bresenham] <author> Bresenham, J. E., </author> <title> Algorithm for Computer Control of a Digital Plotter, </title> <journal> IBM Systems Journal 4(1), </journal> <pages> 25-30, </pages> <year> 1965. </year>
Reference-contexts: The EdgeScan algorithm is used in our polygon scan conversion routines. It is closely related to Bresenham's line drawing algorithm <ref> [Bresenham] </ref>. The derivation closely follows Sproull's paper [Sproull]. Successive steps in developing the algorithm are presented in C, with the addition of a variable type real to describe unimplementable real numbers in the initial algorithm definitions. In the Graphics Gem, we showed the algorithm as two routines: EdgeSetup and EdgeScan.
Reference: [Fleischer & Salesin] <author> Fleischer, Kurt and David Salesin, </author> <title> Accurate Polygon Scan Conversion Using Half-Open Intervals, Graphics Gems III, </title> <publisher> Academic Press 1992. </publisher>
Reference-contexts: I was unable to find a public domain fixed point package that served my purposes, so I cooked this one up. I'd like to thank David Salesin (co-author of the Graphics Gem <ref> [Fleischer & Salesin] </ref>) for his contributions towards a simple and clear form for the EdgeScan algorithm. <p> To compute the an edge, we call the setup routine once, and then repeatedly call the EdgeScan () to iterate along the edge. This code is identical to that in the Graphics Gem <ref> [Fleischer & Salesin, C Code] </ref>. A usage example is given in Section 5.3, and also in the Graphics Gems code. For clarity in the final code, we substitute the names ymin, ymax for y0int-1, y1int-1. <p> - dy; e-&gt;si = fp_integer (si); e-&gt;inc = sf; - e-&gt;xi = fp_integer (xi); - e-&gt;ymin = fp_integer (ymin); e-&gt;ymax = fp_integer (ymax); return (e); - 20 Caltech CS-TR-91-12, c flKurt Fleischer 1991-5 7 Fixed Point Arithmetic Package (fixpoint) The code for the fixpoint package is in the Graphics Gem <ref> [Fleischer & Salesin] </ref>, and is available with the rest of the code [C Code]. However, it is not a particularly lovely implementation and is provided only to complete the presentation of the subpixel triangle algorithm.
Reference: [C Code] <author> Fleischer, Kurt. </author> <note> Code for the Graphics Gem [Fleischer & Salesin] is available via anonymous ftp from ftp.princeton.edu in pub/Graphics/GraphicsGems/GemsIII/*. Caltech CS-TR-91-12, c flKurt Fleischer 1991-5 23 </note>
Reference-contexts: To compute the an edge, we call the setup routine once, and then repeatedly call the EdgeScan () to iterate along the edge. This code is identical to that in the Graphics Gem <ref> [Fleischer & Salesin, C Code] </ref>. A usage example is given in Section 5.3, and also in the Graphics Gems code. For clarity in the final code, we substitute the names ymin, ymax for y0int-1, y1int-1. <p> fp_integer (xi); - e-&gt;ymin = fp_integer (ymin); e-&gt;ymax = fp_integer (ymax); return (e); - 20 Caltech CS-TR-91-12, c flKurt Fleischer 1991-5 7 Fixed Point Arithmetic Package (fixpoint) The code for the fixpoint package is in the Graphics Gem [Fleischer & Salesin], and is available with the rest of the code <ref> [C Code] </ref>. However, it is not a particularly lovely implementation and is provided only to complete the presentation of the subpixel triangle algorithm. For maximum efficiency in production code (or hardware), you should write an appropriate machine-specific implementation of fixed point arithmetic.
Reference: [Lathrop, Kirk, & Voorhies] <author> Lathrop, Olin, Kirk, David, and Voorhies, </author> <title> Doug Accurate Rendering by Subpixel Addressing, </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pp 45-53, 10(5), </pages> <year> 1990. </year>
Reference-contexts: This truncation of underflow corresponds to subpixel quantization in computing the x-intersection of the edge with the scanline, and can't be avoided. However, it only produces artifacts for degenerate databases, in which adjacent polygons don't necessarily have coincident vertices (see <ref> [Lathrop, Kirk, & Voorhies] </ref> for a discussion).
Reference: [Sproull] <author> Sproull, Robert F., </author> <title> Using Program Transformations to Derive Line-Drawing Algorithms, </title> <journal> ACM Transactions on Graphics </journal> (1)4:257-273, October 1982. 
Reference-contexts: The EdgeScan algorithm is used in our polygon scan conversion routines. It is closely related to Bresenham's line drawing algorithm [Bresenham]. The derivation closely follows Sproull's paper <ref> [Sproull] </ref>. Successive steps in developing the algorithm are presented in C, with the addition of a variable type real to describe unimplementable real numbers in the initial algorithm definitions. In the Graphics Gem, we showed the algorithm as two routines: EdgeSetup and EdgeScan. <p> Figure (d). Caltech CS-TR-91-12, c flKurt Fleischer 1991-5 7 4 Derivation of the EdgeScan Algorithm I strongly encourage the reader to take a look at Sproull's paper <ref> [Sproull] </ref>, which shows how to use program transformations to derive scan conversion algorithms. We use these techniques below.
References-found: 6

