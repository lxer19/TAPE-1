URL: http://www.cs.umn.edu/Research/softeng/paper/omega.ps
Refering-URL: http://www.cs.umn.edu/Research/softeng/
Root-URL: http://www.cs.umn.edu
Title: Omega An Integrated Environment For C++ Program Maintenance  
Author: Xiaoping Chen, Wei-Tek Tsai, Hai Huang, Mustafa Poonawala, Sanjai Rayadurgam, Yamin Wang W.T. Tsai 
Keyword: ObjectOriented Pro gra ms, Software maintenance, Software reengineering, Program understanding, Dependence analysis, Slicing, Ripple effect analysis, Regression testing.  
Note: Corresponding Author:  
Address: 200, Union Street S.E., Minneapolis, MN 55455, U.S.A.  4-192, EE-CS Building, 200 Union Street,  Minneapolis, MN 55455, USA.  
Affiliation: Department of Computer Science, University of Minnesota,  Department of Computer Science,  University of Minnesota,  
Email: email: tsai@cs.umn.edu  
Phone: Phone: 612-625-6371 Fax: 612-625-0572  
Abstract: This paper proposes several techniques that are useful in the maintenance of OO software in general and C++ programs in particular. It discusses how dependence analysis and slicing can be extended to be applicable for C++ programs. In case of OO software, data and control dependence alone are insufficient for program maintenance even though they are sufficient for procedural languages such as COBOL. This paper proposes several new dependence relations such as class, message and declaration dependence between various OO program entities. These dependencies are required in addition to traditional data and control dependencies to perform maintenance activities. This paper also proposes a hierarchical C++ dependence graph (C++DG) to capture these dependencies and provides algorithms to construct C++DG from the source code. It also introduces several new slicing techniques such as class, message, constrained and recursive slicing, besides the existing slicing techniques such as program, variable and condition slicing for OO programs. Next the paper discusses the application of the dependence and slicing concepts to other maintenance phase activities such as Ripple Effect Analysis (REA) and regression testing. Finally the paper presents the design of an integrated environment, Omega, that implements many of these techniques for C++ program maintenance. Omega has been demonstrated in various industrial sites in the US and Japan since May 1995. 
Abstract-found: 1
Intro-found: 1
Reference: [Arnold 93] <editor> R . S . A r n o l d a n d S h a w n A . B o h n e r , Impact Analysis - Towards a Framework for Comparison, </editor> <booktitle> Proceedings of International Conference on Software Maintenance, </booktitle> <year> 1993, </year> <pages> pp. 292-301. </pages>
Reference-contexts: This paper defines several new slicing techniques for OO programs. These slicing operations can be performed using a C++DG constructed from the source program. 3 This paper also discusses two important applications of the techniques described: REA <ref> [Yau 78, Arnold 93, Joiner 93, Wang 96] </ref> and Regression Testing [Leung 89, Rothermel 94, Onoma 96]. REA is an iterative process used in the software maintenance phase to locate and fix the parts of the code that are affected due to an initial change in the software. <p> Applications This section discusses two important applications of dependence analysis and program slicing. 4.1. Ripple Effect Analysis REA is an iterative process used to ensure consistency and integrity after changes are made to software <ref> [Yau 78, Arnold 93, Joiner 93, Joiner 94, Wang 96] </ref>. Once a change is performed, it is necessary to locate all the potential side effects in other parts of the program. Each additional change to the affected parts will lead to another repetition of the REA process.
Reference: [Chen 94] <author> X. P. Chen, W. T. Tsai, J. K. Joiner, H. Gandamaneni and J. Sun, </author> <title> Automatic Variable Classification for COBOL Programs , Pr oce edi ngs o f IE EE COMPSAC, </title> <booktitle> 1994, </booktitle> <pages> pp 432-437. </pages>
Reference-contexts: Variable Classification Tool The variable classification tool is activated during the parsing stage. It classifies each variable encountered during parsing following the classification rules outlined in <ref> [Chen 94] </ref>. A variable can be in several orthogonal categories. For example course_list is an input variable and a domain variable. The tool also performs automatic reclassification as more information about the variable is obtained as parsing progresses.
Reference: [Ferrante 87] <author> J. Ferrante, K. J. Ottenstein and J. D. Warren, </author> <title> The Program Dependence Graph and its Use in Optimization, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 9, </volume> <month> July </month> <year> 1987, </year> <pages> pp. 319-349. </pages>
Reference-contexts: Early research [Subramanian 92, Tsai 9 4, Kirani 94, Kung 94] has shown that many issues in maintenance of OO software are yet to be unraveled. Many maintenance activities involve analyzing the relationships or dependencies that exist among various components of a program. Program dependence analysis <ref> [Ottenstein 84, Ferrante 87] </ref> is used to identify various types of relationships among the components. The presence of new features to support OO paradigm in C++ programs gives rise to new types of dependencies. Apart from data and control dependencies, this paper defines class, message and declaration dependencies.
Reference: [Gopal 91] <author> R. Gopal, </author> <title> Dynamic Program Slicing Based on Dependence Relations, </title> <booktitle> Proceedings of the IEEE Conference of Software Maintenance 91, </booktitle> <pages> pp. 191-200, </pages> <year> 1991 </year>
Reference: [Gallagher 91] <editor> K . B . G a l l a g h e r a n d J . R . L y l e , Using Program Slicing in Software Maintenance, </editor> <booktitle> IEEE Transactions on Software Engineering, </booktitle> <volume> Vol. 17, </volume> <year> 1991, </year> <pages> pp. 751-761. </pages>
Reference: [Horwitz 90] <editor> S . H o r w i t z , T . R e p s a n d D . B i n k l e y , Interprocedural Slicing Using Dependence Graphs, </editor> <booktitle> ACM Transactions on Programming Languages and Systems, </booktitle> <volume> Vol. 12, </volume> <year> 1990, </year> <pages> pp. 26-60. </pages>
Reference-contexts: C++DG is used by dependence analysis, program slicing, Ripple Effect Analysis (REA) and regression testing. Program slicing [Weiser 84] is an important technique used in software maintenance. It is used to extract input-output relationships in a program. It is also used in REA [Joiner 93]. <ref> [Horwitz 90] </ref> proposed a variant called forward slicing. [Huang 95] introduced the notion of generalized program slicing that includes hierarchical, constraint and recursive slicing among others. This paper defines several new slicing techniques for OO programs. <p> Figure 10 provides an example of intra-module control dependence edges. List&lt;Type&gt;::operator++(int) main () head The list... 3. Slicing Techniques for C++ Slicing and its extensions <ref> [Weiser 84, Horwitz 90, Joiner 94, Huang 96] </ref> are important and useful for software maintenance. They provide a software maintainer an easy and organized way of locating and analyzing the impacts of changes to the program. OO C++ programs have more complex relationships among software entities than procedure-oriented programs.
Reference: [Huang 95] <author> H. Huang, W. T. Tsai, S. Bhattacharya, X. P. Chen, Y. Wang, and J. Sun, </author> <title> Business Rule Extraction from Legacy Code, </title> <type> TR 95-034, </type> <institution> Computer Science Dept., University of Minnesota, </institution> <year> 1995. </year>
Reference-contexts: Program slicing [Weiser 84] is an important technique used in software maintenance. It is used to extract input-output relationships in a program. It is also used in REA [Joiner 93]. [Horwitz 90] proposed a variant called forward slicing. <ref> [Huang 95] </ref> introduced the notion of generalized program slicing that includes hierarchical, constraint and recursive slicing among others. This paper defines several new slicing techniques for OO programs.
Reference: [Huang 96] <author> H. Huang, W. T. Tsai and S. Subramanian, </author> <title> Generalized Program Slicing for Software Maintenance, </title> <institution> Computer Science Department, University of Minnesota, </institution> <year> 1996. </year>
Reference-contexts: Figure 10 provides an example of intra-module control dependence edges. List&lt;Type&gt;::operator++(int) main () head The list... 3. Slicing Techniques for C++ Slicing and its extensions <ref> [Weiser 84, Horwitz 90, Joiner 94, Huang 96] </ref> are important and useful for software maintenance. They provide a software maintainer an easy and organized way of locating and analyzing the impacts of changes to the program. OO C++ programs have more complex relationships among software entities than procedure-oriented programs. <p> class slice S of a program P on a given slicing criterion C, is a set of classes that are involved in the computation that affect or are affected by the given slicing criterion. 14 Rationale: Slices at statement level can be huge and detailed, and hence difficult to understand <ref> [Huang 96] </ref>. A class slice can be considered as a condensed program slice that preserves useful class interaction information involved in some computation. This condensed information provides software engineers a high-level abstract view of the computations under investigation.
Reference: [Joiner 93] <author> J. K. Joiner and W. T. Tsai, </author> <title> Ripple Effect Analysis, Program Slicing and Dependence Analysis, </title> <institution> TR-93-84, Computer Science Department, University of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: C++DG is used by dependence analysis, program slicing, Ripple Effect Analysis (REA) and regression testing. Program slicing [Weiser 84] is an important technique used in software maintenance. It is used to extract input-output relationships in a program. It is also used in REA <ref> [Joiner 93] </ref>. [Horwitz 90] proposed a variant called forward slicing. [Huang 95] introduced the notion of generalized program slicing that includes hierarchical, constraint and recursive slicing among others. This paper defines several new slicing techniques for OO programs. <p> This paper defines several new slicing techniques for OO programs. These slicing operations can be performed using a C++DG constructed from the source program. 3 This paper also discusses two important applications of the techniques described: REA <ref> [Yau 78, Arnold 93, Joiner 93, Wang 96] </ref> and Regression Testing [Leung 89, Rothermel 94, Onoma 96]. REA is an iterative process used in the software maintenance phase to locate and fix the parts of the code that are affected due to an initial change in the software. <p> Applications This section discusses two important applications of dependence analysis and program slicing. 4.1. Ripple Effect Analysis REA is an iterative process used to ensure consistency and integrity after changes are made to software <ref> [Yau 78, Arnold 93, Joiner 93, Joiner 94, Wang 96] </ref>. Once a change is performed, it is necessary to locate all the potential side effects in other parts of the program. Each additional change to the affected parts will lead to another repetition of the REA process.
Reference: [Joiner 94] <author> J. K. Joiner, W. T. Tsai, X. P. Chen, S. Subramanian, J. Sun and H. Gandamaneni, </author> <title> Data-Centered Program Understanding, P r o c . o f I E E E Software Maintenance, </title> <booktitle> 1994, </booktitle> <pages> pp. 272-281. </pages>
Reference-contexts: Figure 10 provides an example of intra-module control dependence edges. List&lt;Type&gt;::operator++(int) main () head The list... 3. Slicing Techniques for C++ Slicing and its extensions <ref> [Weiser 84, Horwitz 90, Joiner 94, Huang 96] </ref> are important and useful for software maintenance. They provide a software maintainer an easy and organized way of locating and analyzing the impacts of changes to the program. OO C++ programs have more complex relationships among software entities than procedure-oriented programs. <p> Category 1 Kinds of Slicing 13 In this category, slicing is classified in terms of the type of software artifacts in a slice. Five types of slicing are considered as presented in Table 3, each of which can be performed in either the forward or backward direction <ref> [Joiner 94] </ref>. Type of Slicing Type of Slices Class Slicing A slice produced by class slicing is a set of class names. Message Slicing A slice produced by message slicing is a set of messages. Condition Slicing A slice produced by condition slicing is a set of predicates. <p> Variable Slicing A slice produced by variable slicing is a set of variables. Program Slicing A slice produced by p rogram slicing is a set o f prog ram statements. Table 3. Types of Slicing in Category 1 Condition slicing <ref> [Joiner 94] </ref>, variable slicing [Joiner 94] and program slicing [Weiser 84] are also applicable to procedure-oriented programs and have been treated elsewhere. Thus, this paper focuses on only class slicing and message slicing which are new and specific for C++ programs. <p> Variable Slicing A slice produced by variable slicing is a set of variables. Program Slicing A slice produced by p rogram slicing is a set o f prog ram statements. Table 3. Types of Slicing in Category 1 Condition slicing <ref> [Joiner 94] </ref>, variable slicing [Joiner 94] and program slicing [Weiser 84] are also applicable to procedure-oriented programs and have been treated elsewhere. Thus, this paper focuses on only class slicing and message slicing which are new and specific for C++ programs. Sections 3.1 and 3.2 discuss class slicing and message slicing respectively. <p> Applications This section discusses two important applications of dependence analysis and program slicing. 4.1. Ripple Effect Analysis REA is an iterative process used to ensure consistency and integrity after changes are made to software <ref> [Yau 78, Arnold 93, Joiner 93, Joiner 94, Wang 96] </ref>. Once a change is performed, it is necessary to locate all the potential side effects in other parts of the program. Each additional change to the affected parts will lead to another repetition of the REA process.
Reference: [Joiner 96] <author> J. Joiner and W. T. Tsai, </author> <title> Reengineering Legacy COBOL Code, </title> <note> to appear in Communications of the ACM, </note> <year> 1996. </year>
Reference-contexts: The C++ language in particular is popular. With the current trend in migration from mainframe-based legacy systems to clientserver architecture, many large programs written in older languages like COBOL are being reengineered and implemented in C++ <ref> [Ong 93, Joiner 96] </ref>. New technologies for software development bring up new maintenance issues for systems developed using such technologies. This paper proposes several techniques that can be used in maintenance of OO programs written in C++.
Reference: [Kirani 94] <author> S. Kirani, </author> <title> Specification and Verification of ObjectOriented Programs, </title> <type> Ph.D. Thesis, </type> <institution> Univerisity of Minnesota, </institution> <address> Minneapolis, MN 55455, </address> <year> 1994. </year> <month> 26 </month>
Reference-contexts: Lack of encapsulation is a reason for many maintenance problems. C++ provides features like data encapsulation that effectively address many existing maintenance problems. But new features like polymorphism, dynamic binding, message passing and overloading pose new problems for maintainers. Early research <ref> [Subramanian 92, Tsai 9 4, Kirani 94, Kung 94] </ref> has shown that many issues in maintenance of OO software are yet to be unraveled. Many maintenance activities involve analyzing the relationships or dependencies that exist among various components of a program. <p> Message Dependence In OO programs, functionality is realized primarily by the exchange of messages between objects. Method and message sequences are important aspects of the control flow of OO programs <ref> [Kirani 94] </ref>. Hence, it is important to capture the dependence among objects and methods. Message dependence represents calling relations between methods in the same object or among different objects. <p> Rationale: Tracking and extracting method and message sequences has been shown to be useful in testing C++ programs <ref> [Kirani 94] </ref>. It is also useful for program understanding because method and message sequences describe an important aspect of the state-transition view of C++ programs. <p> Therefore all the test cases that were used to test Dlist will be selected for retesting. Test Selection Using Message Slicing Message and method sequences represent the functionality of the program <ref> [Kirani 94] </ref>. Whenever a method of an object is modified, all the message and method sequences in which this method participates must be retested as these sequences are potentially affected. Message slicing can be used to determine all such potentially affected sequences. <p> This information is useful in determining the potentially affected sequences to be retested. Message slicing can be either single class, or multi-class. Single class message slicing is used to determine method sequences <ref> [Kirani 94] </ref> that are affected due to modification to a class method. This can be used for selecting test cases associated with a single class. Multi-class message slicing can be used to determine the potentially affected message sequences that need retesting.
Reference: [Kung 94] <author> D. Kung, J. Gao, P. Hsia, F. Wen, Y. Toyoshima and C. Chen, </author> <title> Change Impact Identification in OO Software Maintenance, </title> <booktitle> Proc. of IEEE Software Maintenance Conference, </booktitle> <year> 1994, </year> <pages> pp 202-211. </pages>
Reference-contexts: Lack of encapsulation is a reason for many maintenance problems. C++ provides features like data encapsulation that effectively address many existing maintenance problems. But new features like polymorphism, dynamic binding, message passing and overloading pose new problems for maintainers. Early research <ref> [Subramanian 92, Tsai 9 4, Kirani 94, Kung 94] </ref> has shown that many issues in maintenance of OO software are yet to be unraveled. Many maintenance activities involve analyzing the relationships or dependencies that exist among various components of a program.
Reference: [Leung 89] <author> H. K. N. Leung and L. White, </author> <title> "Insights into Regression Testing", </title> <booktitle> Proc. of IEEE Software Maintenance Conference, </booktitle> <year> 1989, </year> <pages> pp. 60-69. </pages>
Reference-contexts: This paper defines several new slicing techniques for OO programs. These slicing operations can be performed using a C++DG constructed from the source program. 3 This paper also discusses two important applications of the techniques described: REA [Yau 78, Arnold 93, Joiner 93, Wang 96] and Regression Testing <ref> [Leung 89, Rothermel 94, Onoma 96] </ref>. REA is an iterative process used in the software maintenance phase to locate and fix the parts of the code that are affected due to an initial change in the software. Program slicing and dependence analysis techniques are used to locate the affected parts.
Reference: [Ning 94] <author> J. Q. Ning, A. Engberts and W. Kozaczynski, </author> <title> Automated Support for Legacy Code Understanding, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 37, No. 5, </volume> <month> May </month> <year> 1994, </year> <pages> pp. 50-57. </pages>
Reference: [Ong 93] <author> C. L. Ong and W. T. Tsai, </author> <title> Class and Object Extraction From Imperative Code, </title> <journal> Journal of ObjectOriented Programming, </journal> <month> March/April </month> <year> 1993, </year> <pages> pp. 58 68. </pages>
Reference-contexts: The C++ language in particular is popular. With the current trend in migration from mainframe-based legacy systems to clientserver architecture, many large programs written in older languages like COBOL are being reengineered and implemented in C++ <ref> [Ong 93, Joiner 96] </ref>. New technologies for software development bring up new maintenance issues for systems developed using such technologies. This paper proposes several techniques that can be used in maintenance of OO programs written in C++.
Reference: [Onoma 96] <author> A. K. Onoma, W. T. Tsai, M. Poonawala, H. Suganuma, </author> <title> Regression Testing in an Industrial Environment, </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: This paper defines several new slicing techniques for OO programs. These slicing operations can be performed using a C++DG constructed from the source program. 3 This paper also discusses two important applications of the techniques described: REA [Yau 78, Arnold 93, Joiner 93, Wang 96] and Regression Testing <ref> [Leung 89, Rothermel 94, Onoma 96] </ref>. REA is an iterative process used in the software maintenance phase to locate and fix the parts of the code that are affected due to an initial change in the software. Program slicing and dependence analysis techniques are used to locate the affected parts.
Reference: [Ottenstein 84] <author> K. J. Ottenstein, and L. M. </author> <title> Ottenstein The Program Dependence Graph in a Software Development Environment. P r o c e e d i n g s o f t h e A C M SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments (Pittsburgh, </title> <address> Pa., </address> <month> April 23-25, </month> <year> 1984). </year> <journal> ACM SIGPLAN Not. </journal> <volume> 19, </volume> <month> 5 (May </month> <year> 1984), </year> <pages> 177-184. </pages>
Reference-contexts: Early research [Subramanian 92, Tsai 9 4, Kirani 94, Kung 94] has shown that many issues in maintenance of OO software are yet to be unraveled. Many maintenance activities involve analyzing the relationships or dependencies that exist among various components of a program. Program dependence analysis <ref> [Ottenstein 84, Ferrante 87] </ref> is used to identify various types of relationships among the components. The presence of new features to support OO paradigm in C++ programs gives rise to new types of dependencies. Apart from data and control dependencies, this paper defines class, message and declaration dependencies.
Reference: [Rothermel 94] <author> G. Rothermel and M. J. Harrold, </author> <title> "Selecting Regression Tests for Object-Oriented Software", </title> <booktitle> Proc. of IEEE Software Maintenance Conference, </booktitle> <year> 1994, </year> <pages> pp. 4-25. </pages>
Reference-contexts: This paper defines several new slicing techniques for OO programs. These slicing operations can be performed using a C++DG constructed from the source program. 3 This paper also discusses two important applications of the techniques described: REA [Yau 78, Arnold 93, Joiner 93, Wang 96] and Regression Testing <ref> [Leung 89, Rothermel 94, Onoma 96] </ref>. REA is an iterative process used in the software maintenance phase to locate and fix the parts of the code that are affected due to an initial change in the software. Program slicing and dependence analysis techniques are used to locate the affected parts.
Reference: [Subramanian 92] <author> S. Subramanian, W. T. Tsai and S. Kirani, </author> <title> Hierarchical Data Flow Analysis for OO Programs, </title> <journal> Journal of ObjectOriented Programming, </journal> <month> May </month> <year> 1994, </year> <pages> pp 36-46. </pages>
Reference-contexts: Lack of encapsulation is a reason for many maintenance problems. C++ provides features like data encapsulation that effectively address many existing maintenance problems. But new features like polymorphism, dynamic binding, message passing and overloading pose new problems for maintainers. Early research <ref> [Subramanian 92, Tsai 9 4, Kirani 94, Kung 94] </ref> has shown that many issues in maintenance of OO software are yet to be unraveled. Many maintenance activities involve analyzing the relationships or dependencies that exist among various components of a program.
Reference: [Tsai 94] <author> W. T. Tsai, H. Gandamaneni, J. Sun, X. P. Chen. S. Subramanian and J. Joiner, </author> <title> Software Maintenance for ObjectOriented Prrgrams, </title> <type> TR 94-07. </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1994. </year>
Reference: [Wang 96] <author> Y. Wang, W. T. Tsai, X. P. Chen and S. Rayadurgam, </author> <title> The Role of Program Slicing in Ripple Effect Analysis, </title> <type> TR 96-014, </type> <institution> University of Minnesota, </institution> <month> Jan. 96. </month>
Reference-contexts: This paper defines several new slicing techniques for OO programs. These slicing operations can be performed using a C++DG constructed from the source program. 3 This paper also discusses two important applications of the techniques described: REA <ref> [Yau 78, Arnold 93, Joiner 93, Wang 96] </ref> and Regression Testing [Leung 89, Rothermel 94, Onoma 96]. REA is an iterative process used in the software maintenance phase to locate and fix the parts of the code that are affected due to an initial change in the software. <p> Applications This section discusses two important applications of dependence analysis and program slicing. 4.1. Ripple Effect Analysis REA is an iterative process used to ensure consistency and integrity after changes are made to software <ref> [Yau 78, Arnold 93, Joiner 93, Joiner 94, Wang 96] </ref>. Once a change is performed, it is necessary to locate all the potential side effects in other parts of the program. Each additional change to the affected parts will lead to another repetition of the REA process. <p> For different kinds of changes, such as a define change (a change 17 on the LHS of an assignment statement) or a use change (a change on the RHS of an assignment statement), different slicing techniques are needed to recognize the potential ripples <ref> [Wang 96] </ref>. OO programs can be viewed from different levels of granularity. The highest level is the class level. A program can be viewed as a collection of classes. The next level is the method level, which can be clustered into different classes. The lowest level is the statement level.
Reference: [Weiser 84] <author> M. Weiser, </author> <title> Program Slicing, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 10, </volume> <month> July </month> <year> 1994, </year> <pages> pp. 352-357. </pages>
Reference-contexts: C++DG for a program can be automatically constructed from its source code using a set of construction rules for vertices and edges of the dependence graph. C++DG is used by dependence analysis, program slicing, Ripple Effect Analysis (REA) and regression testing. Program slicing <ref> [Weiser 84] </ref> is an important technique used in software maintenance. It is used to extract input-output relationships in a program. <p> Figure 10 provides an example of intra-module control dependence edges. List&lt;Type&gt;::operator++(int) main () head The list... 3. Slicing Techniques for C++ Slicing and its extensions <ref> [Weiser 84, Horwitz 90, Joiner 94, Huang 96] </ref> are important and useful for software maintenance. They provide a software maintainer an easy and organized way of locating and analyzing the impacts of changes to the program. OO C++ programs have more complex relationships among software entities than procedure-oriented programs. <p> Variable Slicing A slice produced by variable slicing is a set of variables. Program Slicing A slice produced by p rogram slicing is a set o f prog ram statements. Table 3. Types of Slicing in Category 1 Condition slicing [Joiner 94], variable slicing [Joiner 94] and program slicing <ref> [Weiser 84] </ref> are also applicable to procedure-oriented programs and have been treated elsewhere. Thus, this paper focuses on only class slicing and message slicing which are new and specific for C++ programs. Sections 3.1 and 3.2 discuss class slicing and message slicing respectively.
Reference: [Yau 78] <author> S. S. Yau, J. S. Collofello and T. MacGregor, </author> <title> Ripple Effect Analysis of Software Maintenance, </title> <booktitle> Proceedings of IEEE COMPSAC, </booktitle> <year> 1978, </year> <pages> pp. 60-65. </pages>
Reference-contexts: This paper defines several new slicing techniques for OO programs. These slicing operations can be performed using a C++DG constructed from the source program. 3 This paper also discusses two important applications of the techniques described: REA <ref> [Yau 78, Arnold 93, Joiner 93, Wang 96] </ref> and Regression Testing [Leung 89, Rothermel 94, Onoma 96]. REA is an iterative process used in the software maintenance phase to locate and fix the parts of the code that are affected due to an initial change in the software. <p> Applications This section discusses two important applications of dependence analysis and program slicing. 4.1. Ripple Effect Analysis REA is an iterative process used to ensure consistency and integrity after changes are made to software <ref> [Yau 78, Arnold 93, Joiner 93, Joiner 94, Wang 96] </ref>. Once a change is performed, it is necessary to locate all the potential side effects in other parts of the program. Each additional change to the affected parts will lead to another repetition of the REA process.
References-found: 24

