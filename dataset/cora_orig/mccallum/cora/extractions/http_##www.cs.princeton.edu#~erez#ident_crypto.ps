URL: http://www.cs.princeton.edu/~erez/ident_crypto.ps
Refering-URL: http://www.cs.princeton.edu/~erez/publications.html
Root-URL: http://www.cs.princeton.edu
Title: Identity Escrow  
Author: Joe Kilian Erez Petrank 
Abstract: We introduce the concept of escrowed identity, an application of key-escrow ideas to the problem of authentication. In escrowed identity, one party A does not give his identity to another party B, but rather gives him information that would allow an authorized third party E to determine A's identity. However, B receives a guarantee that E can indeed determine A's identity. We consider a number of possible features of escrowed identity schemes, and describe a variety of implementations that achieve various subsets of these features. In particular, we observe that group signature schemes can be used to escrow identities, achieving most (though not all) of the desired features. The most interesting feature we consider is separability. The escrow agency is not involved in the day to day operation of the identification system, but is only called in when anonymity must be revoked. In the extreme case, there exist identity escrow schemes in which an arbitrary party (possessing a public key) can be designated an escrow agent without any knowledge or participation on their part until they are asked to revoke someone's anonymity.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Asokan, Shoup and Waidner. </author> <title> Optimistic Fair Exchange of Digital Signatures. </title> <institution> IBM Research Report RZ2973, </institution> <month> November 17, </month> <year> 1997. </year>
Reference-contexts: Again, these proofs are are not completely applicable to our setting, but suggest that dramatically more efficient identity escrow schemes may be possible. The notion of keeping a trusted agency dormant except for "emergencies" has been proposed in a number of contexts. Asokan, Shoup and Waidner <ref> [1] </ref> show how to use a dormant third party for a variety of applications related to the exchange of digital signatures. Young and Yung [33] show how to use a dormant escrow agent for key escrow. <p> A useful tool in our system is a zero knowledge test which verifies that a given pair of numbers a 1 ; a 2 2 <ref> [0; 1; : : : ; pq 1] </ref> satisfies that a 1 a 2 mod pq is a number in the range [0::p 1].
Reference: [2] <author> M. Bellare and S. Goldwasser. </author> <title> Verifiable partial key escrow. </title> <booktitle> Proceedings of the Fourth Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1997. </year> <note> Preliminary version appeared as Technical Report CS95-447, </note> <institution> Dept. of CS and Engineering, UCSD, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: A solution to this problem, for a general range, is given by Bellare and Goldwasser <ref> [2] </ref>; for greatest efficiency they use an improvement due to Cramer based on the techniques of [9]. In their scenario, the prover commits on the value a (which has to be in the right range) by committing on each of the bits in its binary representation.
Reference: [3] <author> M. Bellare and S. Goldwasser. </author> <title> Encapsulated key escrow. </title> <institution> MIT Laboratory for Computer Science Technical Report 688, </institution> <month> April </month> <year> 1996. </year>
Reference: [4] <author> M. Ben-Or, S. Goldwasser and A. Wigderson. </author> <title> Completeness theorems for noncryptographic fault-tolerant distributed computations. </title> <booktitle> In Proc. of the 20th Annu. Symposium on the Theory of Computing, </booktitle> <pages> pages 1-10, </pages> <year> 1988. </year>
Reference: [5] <author> E. Brickell, P. Gemmel and D. Kravitz. </author> <title> Trustee-based tracing extensions to anonymous cash and the making of anonymous change. </title> <booktitle> In Proc. 6th Symposium on Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 457-466 </pages>
Reference-contexts: Asokan, Shoup and Waidner [1] show how to use a dormant third party for a variety of applications related to the exchange of digital signatures. Young and Yung [33] show how to use a dormant escrow agent for key escrow. Brickell, Gemmel and Kravitz <ref> [5] </ref> and Stadler, Piveteau and Camenisch [32] show how to use a dormant escrow agent in electronic cash systems (more efficient schemes are presented in [29, 17]).
Reference: [6] <author> D. Boneh and M. Franklin. </author> <title> Efficient generation of shared RSA keys. </title> <booktitle> Advances in Cryptology - CRYPTO '97 Proceedings, </booktitle> <pages> pp. 425-439. </pages> <booktitle> Lecture notes in Computer Science #1294, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1997. </year>
Reference: [7] <author> G. Brassard, D. Chaum and C. Crepeau. </author> <title> Minimum Disclosure Proofs of Knowledge. </title> <booktitle> In JCSS, </booktitle> <pages> pages 156-189. </pages> <year> 1988. </year>
Reference-contexts: In Section 5 we show an implementation of an escrowed identity scheme based on the El-Gamal encryption and signature schemes. 2 Preliminaries We describe some of the basic building blocks we use in our protocol. 2.1 Bit Commitments We work in the argument framework of Brassard, Chaum and Crepeau <ref> [7] </ref>. In this paradigm, all parties are assumed to be computationally bounded. It is shown in [7] how to commit to bits in statistical zero-knowledge, based on the intractability of certain number-theoretic problems. <p> El-Gamal encryption and signature schemes. 2 Preliminaries We describe some of the basic building blocks we use in our protocol. 2.1 Bit Commitments We work in the argument framework of Brassard, Chaum and Crepeau <ref> [7] </ref>. In this paradigm, all parties are assumed to be computationally bounded. It is shown in [7] how to commit to bits in statistical zero-knowledge, based on the intractability of certain number-theoretic problems. D-amgard, Pedersen and Pfitzmann [14] give a protocol for efficiently committing to and revealing strings of bits in statistical zero-knowledge, relying only on the existence of collision-intractable hash functions.
Reference: [8] <author> D. Chaum, C. Crepau, and I. D-amgard. </author> <title> Multiparty unconditionally secure protocols. </title> <booktitle> In Proc. of the 20th Annu. ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 11-19, </pages> <year> 1988. </year>
Reference: [9] <author> R. Cramer, I. Damg-ard and B. Schoenmakers. </author> <title> Proofs of partial knowledge and simplified design of witness hiding protocols. </title> <booktitle> Advances in Cryptology - CRYPTO '94 Proceedings, </booktitle> <pages> pp. 174-187. </pages> <booktitle> Lecture Notes in Computer Science #839, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A solution to this problem, for a general range, is given by Bellare and Goldwasser [2]; for greatest efficiency they use an improvement due to Cramer based on the techniques of <ref> [9] </ref>. In their scenario, the prover commits on the value a (which has to be in the right range) by committing on each of the bits in its binary representation.
Reference: [10] <author> Camenisch. </author> <title> Efficient and generalized group signatures. </title> <booktitle> Advances in Cryptology | EUROCRYPT '97, volume 1233 of Lecture Notes in Computer Science, </booktitle> <pages> pages 465-479. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst [12], and subsequently developed in <ref> [13, 10, 28, 11] </ref>. Independently and concurrently with [20], Camenisch and Stadler [11] developed new schemes for efficient group signatures, one of which can quite efficiently achieve most of our goals; we describe this solution in Section 3.
Reference: [11] <author> J. Camenisch and M. Stadler. </author> <title> Efficient Group Signature Schemes for Large Groups. </title> <booktitle> Advances in Cryptology - CRYPTO '97 Proceedings, </booktitle> <pages> pp. 410-424. </pages> <booktitle> Lecture notes in Computer Science #1294, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1997. </year>
Reference-contexts: The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst [12], and subsequently developed in <ref> [13, 10, 28, 11] </ref>. Independently and concurrently with [20], Camenisch and Stadler [11] developed new schemes for efficient group signatures, one of which can quite efficiently achieve most of our goals; we describe this solution in Section 3. <p> The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst [12], and subsequently developed in [13, 10, 28, 11]. Independently and concurrently with [20], Camenisch and Stadler <ref> [11] </ref> developed new schemes for efficient group signatures, one of which can quite efficiently achieve most of our goals; we describe this solution in Section 3. At the heart of escrowed identity and group signatures is an efficient proof that an encrypted value possesses some property. <p> Given d, it is easy to generate a pair (a; b) with given value of a e by computing a = (a e ) d and b = (a e ffi) d . Camenisch and Stadler <ref> [11] </ref> use essentially the same assumption, and have pointed out that the system is not secure for very small e (2 or 3); the pairs (a; b) fall on a low degree curve, which can be used as a basis for an attack. <p> However, a large e doesn't seem vulnerable to such an attack. 3 Using group signatures to escrow identity Borrowing freely from the exposition in <ref> [11] </ref>, we describe the basics of group signatures. We then proceed to describe how a particular implementation can be used to give an escrowed identity system with most of the desired features. Group signatures A group signature system consists of a group manager that oversees a group of signers. <p> To revoke anonymity the group manager determines who actually signed the message. 8 However, in the reduction outlined above, the group manager plays two roles: the issuer and the escrow agency. To obtain an escrowed identity system, we need to split these roles. As noted in <ref> [11] </ref>, one of their implementations ([11], Section 6) allows for a considerable, though not complete separation between these roles. <p> Given d, one can easily generate a certificate, even if a or a e is fixed, since b = (a e ffi) d mod n. We assume that a and b are relatively prime to n. The structure of these certificates follows closely the methodology of <ref> [11] </ref> (and was independently put forth in [20]). 4.1.1 Initializing the system To set up the system, the issuer chooses n; e; d and ffi as above, and publishes (n; e; d). Note that unlike the previous scheme, the escrow agency has no part in setting up the system. <p> The last condition is implied by the first one, since it is easy to produce a e for any arbitrary a. Further discussion of this assumption is given in <ref> [11] </ref>. It appears difficult for an outsider to mimic a group member. The interactive proof does imply that the intruder has a valid certificate. Assuming 13 that these are hard to generate (given all the side information available to an attacker), valid first-tier identification appears to hold. <p> We believe we can modify the above protocol, with some loss of efficiency, to make it resistant to impersonation. We briefly describe the basic tricks involved. First, one can achieve resistance to impersonation in a similar manner as in <ref> [11] </ref> by having a be g r for some element g 2 Z fl n , where the random r is chosen by the identifier. Care must be taken so that this discrete log problem is hard.
Reference: [12] <author> D. Chaum and E. van Heyst. </author> <title> Group signatures. </title> <booktitle> Advances in Cryptology | EUROCRYPT '91, volume 547 of Lecture Notes in Computer Science, pages 257- 265. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <month> 21 </month>
Reference-contexts: The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst <ref> [12] </ref>, and subsequently developed in [13, 10, 28, 11]. Independently and concurrently with [20], Camenisch and Stadler [11] developed new schemes for efficient group signatures, one of which can quite efficiently achieve most of our goals; we describe this solution in Section 3.
Reference: [13] <author> L. Chen and T. P. Pedersen. </author> <title> New group signature schemes. </title> <booktitle> Advances in Cryptology | EUROCRYPT '94, volume 950 of Lecture Notes in Computer Science, </booktitle> <pages> pages 171-181. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst [12], and subsequently developed in <ref> [13, 10, 28, 11] </ref>. Independently and concurrently with [20], Camenisch and Stadler [11] developed new schemes for efficient group signatures, one of which can quite efficiently achieve most of our goals; we describe this solution in Section 3.
Reference: [14] <author> I. D-amgard, T. Pedersen and B. Pfitzmann. </author> <title> On the Existence of Statistically Hiding Bit Commitment Schemes and Fail-Stop Signatures. </title> <booktitle> Advances in Cryptology - CRYPTO '93 Proceedings, </booktitle> <pages> pp. 250-265. </pages> <booktitle> Lecture Notes in Computer Science #773, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In this paradigm, all parties are assumed to be computationally bounded. It is shown in [7] how to commit to bits in statistical zero-knowledge, based on the intractability of certain number-theoretic problems. D-amgard, Pedersen and Pfitzmann <ref> [14] </ref> give a protocol for efficiently committing to and revealing strings of bits in statistical zero-knowledge, relying only on the existence of collision-intractable hash functions. This scheme is quite practical. For simplicity, we will simply speak of committing to and revealing bits when referring to the protocols of [14]. <p> and Pfitzmann <ref> [14] </ref> give a protocol for efficiently committing to and revealing strings of bits in statistical zero-knowledge, relying only on the existence of collision-intractable hash functions. This scheme is quite practical. For simplicity, we will simply speak of committing to and revealing bits when referring to the protocols of [14]. In some implementations we also commit to strings by probabilistic encryption [19] using the public key of the escrow agency. These commitments are only computationally secure.
Reference: [15] <author> Yvo Desmedt and Yair Frankel. </author> <title> Theshold cryptosystems. </title> <booktitle> Advances in Cryptology - CRYPTO '89 Proceedings, </booktitle> <pages> pp. 307-315. </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Thus, the possibilities for widespread abuse are greater than with our scenario. Nevertheless, it is only prudent to allow for multiple escrow agents; the escrow agents in most of our protocols can be made to work using simple group cryptography (e.g. <ref> [15, 30] </ref>). 1.2 History and related work An earlier version of this work appeared in [20], using cut-and-choose techniques for the zero-knowledge proofs. The current version describes much more efficient implementations based on group signature schemes.
Reference: [16] <author> T. El Gamal. </author> <title> A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. </title> <booktitle> Advances in Cryptology - CRYPTO '89 Proceedings, </booktitle> <pages> pp. 10-18. </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: they allow for the escrow 6 agents to recover the values of these commitments in addition to those re-vealed by the identifier in the course of the zero-knowledge proofs. 2.2 The El-Gamal signature and encryption schemes We base one implementation of escrowed identity on the El-Gamal signature and encryption schemes <ref> [16] </ref>, which we summarize, following [31], with slight modifications to suit our purposes. In both schemes, there is a common prime p, which for our purposes is of the form 2q + 1 where q is a prime. Let g 2 Z fl p have order q.
Reference: [17] <author> Y. Frankel, Y. Tsiounis and M. Yung. </author> <title> "Indirect Discourse Proofs": Achieving Efficient Fair Off-Line E-Cash. </title> <booktitle> Advances in Cryptology-ASIACRYPT '96 proceedings, </booktitle> <pages> pp. 286-300. </pages> <booktitle> Lecture Notes in Computer Science #1163. </booktitle> <publisher> Springer-Verlag, 19851996. </publisher>
Reference-contexts: At the heart of escrowed identity and group signatures is an efficient proof that an encrypted value possesses some property. Frankel, Tsiounis and Yung <ref> [17] </ref> and Young and Yung [33] give very efficient protocols of this 5 type. Again, these proofs are are not completely applicable to our setting, but suggest that dramatically more efficient identity escrow schemes may be possible. <p> Young and Yung [33] show how to use a dormant escrow agent for key escrow. Brickell, Gemmel and Kravitz [5] and Stadler, Piveteau and Camenisch [32] show how to use a dormant escrow agent in electronic cash systems (more efficient schemes are presented in <ref> [29, 17] </ref>). Quite recently, Micali [26] has shown how to use a dormant agent for certified mail. 1.3 Road map In Section 2 we describe some of the building blocks we use for our protocols. In Section 3 we discuss how to implement identity escrow using group signature schemes.
Reference: [18] <author> Y. Frankel and M. Yung. </author> <title> Escrow Encryption Systems Visited: Attacks, Analysis and Designs. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We describe identity escrow schemes in Section 1.1 below. Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [24, 25, 22, 18, 21, 23, 27] </ref>).
Reference: [19] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic Encryption. </title> <booktitle> In JCSS Vol 28(2), </booktitle> <pages> pages 270-299, </pages> <year> 1984. </year>
Reference-contexts: This scheme is quite practical. For simplicity, we will simply speak of committing to and revealing bits when referring to the protocols of [14]. In some implementations we also commit to strings by probabilistic encryption <ref> [19] </ref> using the public key of the escrow agency. These commitments are only computationally secure.
Reference: [20] <author> J. Kilian and E. Petrank. </author> <title> Identity Escrow. Theory of Cryptography Library, </title> <address> ftp://theory.lcs.mit.edu/pub/tcryptol/97-11.ps, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: Nevertheless, it is only prudent to allow for multiple escrow agents; the escrow agents in most of our protocols can be made to work using simple group cryptography (e.g. [15, 30]). 1.2 History and related work An earlier version of this work appeared in <ref> [20] </ref>, using cut-and-choose techniques for the zero-knowledge proofs. The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst [12], and subsequently developed in [13, 10, 28, 11]. Independently and concurrently with [20], Camenisch and Stadler [11] developed new schemes <p> earlier version of this work appeared in <ref> [20] </ref>, using cut-and-choose techniques for the zero-knowledge proofs. The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst [12], and subsequently developed in [13, 10, 28, 11]. Independently and concurrently with [20], Camenisch and Stadler [11] developed new schemes for efficient group signatures, one of which can quite efficiently achieve most of our goals; we describe this solution in Section 3. At the heart of escrowed identity and group signatures is an efficient proof that an encrypted value possesses some property. <p> We assume that a and b are relatively prime to n. The structure of these certificates follows closely the methodology of [11] (and was independently put forth in <ref> [20] </ref>). 4.1.1 Initializing the system To set up the system, the issuer chooses n; e; d and ffi as above, and publishes (n; e; d). Note that unlike the previous scheme, the escrow agency has no part in setting up the system. <p> U proves to A that a 1 a 2 mod pq is a number in the range 1::p1. See Section 5.1.4 for the details of implementing this test (which consists of 9 basic tests). A discussion of why this is a crucial test appears in the appendix of <ref> [20] </ref>. 5. For i = 1; 2 and for j = 1; 2 the user U opens the commitments on a i on b j and on (a i ) b j and A checks that indeed the value of the exponentiation is correct. (These are 4 basic tests.) 6. <p> However, these and other such protocols depend intimately on how the value is committed to; the commitment method we use (a is committed to as a product of committed values, a 1 and a 2 ) precludes the direct use of this solution. In <ref> [20] </ref>, we give a simple cut-and-choose type proof for this commitment format; which is omitted here due to space limitations. 5.2 Features of the identification system The interactive proof establishes that the identifier has a valid certificate (a; b) and that he has escrowed the value of a.
Reference: [21] <author> J. Kilian and F. T. Leighton. </author> <title> Fair Cryptosystems, Revisited. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We describe identity escrow schemes in Section 1.1 below. Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [24, 25, 22, 18, 21, 23, 27] </ref>).
Reference: [22] <author> F. T. Leighton. </author> <title> Failsafe key escrow systems. </title> <type> Technical Memo 483, </type> <institution> MIT Lab. for Computer Science, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: We describe identity escrow schemes in Section 1.1 below. Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [24, 25, 22, 18, 21, 23, 27] </ref>).
Reference: [23] <author> A. Lenstra, P. Winkler and Y. Yacobi. </author> <title> A Key Escrow System with Warrant Bounds. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We describe identity escrow schemes in Section 1.1 below. Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [24, 25, 22, 18, 21, 23, 27] </ref>).
Reference: [24] <author> S. </author> <title> Micali Fair public-key cryptosystems. </title> <booktitle> Advances in Cryptology - CRYPTO '92 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We describe identity escrow schemes in Section 1.1 below. Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [24, 25, 22, 18, 21, 23, 27] </ref>).
Reference: [25] <author> S. Micali. </author> <title> Fair public-key cryptosystems. </title> <type> Technical Report 579, </type> <institution> MIT Lab. for Computer Science, </institution> <month> September </month> <year> 1993. </year> <month> 22 </month>
Reference-contexts: We describe identity escrow schemes in Section 1.1 below. Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [24, 25, 22, 18, 21, 23, 27] </ref>).
Reference: [26] <author> S. Micali. </author> <title> Certified E-Mail With Invisible Post Offices. Talk at Workshop on Secure Computation, </title> <institution> Weizmann Institute, </institution> <month> June, </month> <year> 1998. </year>
Reference-contexts: Young and Yung [33] show how to use a dormant escrow agent for key escrow. Brickell, Gemmel and Kravitz [5] and Stadler, Piveteau and Camenisch [32] show how to use a dormant escrow agent in electronic cash systems (more efficient schemes are presented in [29, 17]). Quite recently, Micali <ref> [26] </ref> has shown how to use a dormant agent for certified mail. 1.3 Road map In Section 2 we describe some of the building blocks we use for our protocols. In Section 3 we discuss how to implement identity escrow using group signature schemes.
Reference: [27] <author> S. Micali and R. </author> <title> Sydney. A Simple Method for Generating and Sharing Pseudo-Random Functions, with Applications to Clipper-like Key Escrow Systems. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We describe identity escrow schemes in Section 1.1 below. Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [24, 25, 22, 18, 21, 23, 27] </ref>).
Reference: [28] <author> H. Petersen. </author> <title> How to convert any digital signature scheme into a group signature scheme. Security Protocols Workshop, </title> <address> Paris, </address> <year> 1997. </year>
Reference-contexts: The current version describes much more efficient implementations based on group signature schemes. Group signature schemes were introduced by Chaum and Heyst [12], and subsequently developed in <ref> [13, 10, 28, 11] </ref>. Independently and concurrently with [20], Camenisch and Stadler [11] developed new schemes for efficient group signatures, one of which can quite efficiently achieve most of our goals; we describe this solution in Section 3.
Reference: [29] <author> J. Camenisch, U. Maurer, and M. Stadler. </author> <title> Digital payment systems with passive anonymity-revoking trustees. </title> <booktitle> In proceedings, ESORICS: European Symposium on Research in Computer Security", </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Young and Yung [33] show how to use a dormant escrow agent for key escrow. Brickell, Gemmel and Kravitz [5] and Stadler, Piveteau and Camenisch [32] show how to use a dormant escrow agent in electronic cash systems (more efficient schemes are presented in <ref> [29, 17] </ref>). Quite recently, Micali [26] has shown how to use a dormant agent for certified mail. 1.3 Road map In Section 2 we describe some of the building blocks we use for our protocols. In Section 3 we discuss how to implement identity escrow using group signature schemes.
Reference: [30] <author> A. De Santis, Y. Desmedt, Y. Frankel and M. Yung. </author> <title> How to Share a Function Securely (Extended Summary). </title> <booktitle> Proceedings of the Twenty-Sixth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 522-533, </pages> <address> Montreal, Quebec, </address> <month> May 23-25, </month> <year> 1994. </year>
Reference-contexts: Thus, the possibilities for widespread abuse are greater than with our scenario. Nevertheless, it is only prudent to allow for multiple escrow agents; the escrow agents in most of our protocols can be made to work using simple group cryptography (e.g. <ref> [15, 30] </ref>). 1.2 History and related work An earlier version of this work appeared in [20], using cut-and-choose techniques for the zero-knowledge proofs. The current version describes much more efficient implementations based on group signature schemes.
Reference: [31] <author> Schneier, B. </author> <year> (1993). </year> <title> Applied Cryptography. </title> <publisher> John Wiley. </publisher>
Reference-contexts: 6 agents to recover the values of these commitments in addition to those re-vealed by the identifier in the course of the zero-knowledge proofs. 2.2 The El-Gamal signature and encryption schemes We base one implementation of escrowed identity on the El-Gamal signature and encryption schemes [16], which we summarize, following <ref> [31] </ref>, with slight modifications to suit our purposes. In both schemes, there is a common prime p, which for our purposes is of the form 2q + 1 where q is a prime. Let g 2 Z fl p have order q.
Reference: [32] <author> M. Stadler, J.-M. Piveteau and J. </author> <title> Camenisch Fair blind signatures. </title> <booktitle> In Proc. Eurocrypt 95, 1995, </booktitle> <volume> LNCS 921, </volume> <pages> pp. 209 - 219 </pages>
Reference-contexts: Young and Yung [33] show how to use a dormant escrow agent for key escrow. Brickell, Gemmel and Kravitz [5] and Stadler, Piveteau and Camenisch <ref> [32] </ref> show how to use a dormant escrow agent in electronic cash systems (more efficient schemes are presented in [29, 17]).
Reference: [33] <author> Adam Young and Moti Yung. Auto-Recoverable Auto-Certifiable Cryptosys-tems. </author> <note> Eurocrypt 98, LNCS 1403 (Ed. </note> <editor> K. </editor> <booktitle> Nyberg), </booktitle> <pages> pp. 17-32. 23 </pages>
Reference-contexts: At the heart of escrowed identity and group signatures is an efficient proof that an encrypted value possesses some property. Frankel, Tsiounis and Yung [17] and Young and Yung <ref> [33] </ref> give very efficient protocols of this 5 type. Again, these proofs are are not completely applicable to our setting, but suggest that dramatically more efficient identity escrow schemes may be possible. <p> The notion of keeping a trusted agency dormant except for "emergencies" has been proposed in a number of contexts. Asokan, Shoup and Waidner [1] show how to use a dormant third party for a variety of applications related to the exchange of digital signatures. Young and Yung <ref> [33] </ref> show how to use a dormant escrow agent for key escrow. Brickell, Gemmel and Kravitz [5] and Stadler, Piveteau and Camenisch [32] show how to use a dormant escrow agent in electronic cash systems (more efficient schemes are presented in [29, 17]).
References-found: 33

