URL: ftp://ftp.cs.utexas.edu/pub/predator/products.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/schwartz/pub.htm
Root-URL: 
Email: batory@cs.utexas.edu  
Title: Products of Domain Models  
Author: Don Batory 
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences The University of Texas  
Abstract: We argue that domain models should produce four basic products: identification of reusable software components, definition of software architectures that explain how components can be composed, a demonstration of architecture scalability, and a direct relationship of these results to software generation of target systems.
Abstract-found: 1
Intro-found: 1
Reference: [Bat92] <author> D. Batory and S. OMalley, </author> <title> The Design and Implementation of Hierarchical Software Systems with Reusable Components, </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> October </month> <year> 1992. </year>
Reference: [Bat93] <author> D. Batory, L. Coglianese, M. Goodwin, and S. Shafer. </author> <title> Creating Reference Architectures: An Example from Avionics, </title> <type> ADAGE Tech. Rep. </type> <institution> UT-93-06, </institution> <year> 1993. </year>
Reference-contexts: Software system generators are among the most visible and concrete products that can come from domain modeling; a generator is often the centerpiece for other analysis tools that are critical to applications development <ref> [Bat93] </ref>. 3 Recap We have an admittedly narrow focus on what should be the products of domain modeling; we concur that a broader vision should be adopted by the software engineering community.
Reference: [Bat94] <author> D. Batory, V. Singhal, J. Thomas, S. Dasari, B. Geraci, and M. Sirkin, </author> <title> The GenVoca Model of Software-System Generators, </title> <note> to appear in IEEE Software, </note> <month> September </month> <year> 1994. </year>
Reference: [Big93] <author> T. Biggerstaff, </author> <title> An Assessment and Analysis of Software Reuse, </title> <booktitle> in Advances in Computers, </booktitle> <volume> Vol. 34, </volume> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference: [Big94] <author> T. Biggerstaff, </author> <title> The Library Scaling Problem and the Limits of Concrete Component Reuse, </title> <booktitle> 3rd Conference on Software Reuse, </booktitle> <address> Rio de Janerio, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The ability to add new features to systems is the driving force for modeling families of systems; the need for new features will always be present. Domain models must clearly demonstrate the capability of scaling to ever larger families of systems without requiring significant revisions <ref> [Big94] </ref>. Domain models should be detailed enough to be used as blue-prints for software system generators; i.e., tools that can produce a target system from a domain directly from specifications.
Reference: [Gar94] <author> D. Garlan and M. Shaw, </author> <title> An Introduction to Software Architecture, </title> <booktitle> in Adances in Software Engineering and Knowledge Engineering, Volume I, </booktitle> <publisher> World Scientific Publishing Company, </publisher> <year> 1993. </year>
Reference: [Pou94] <author> J. Poulin and W. Tracz, </author> <title> WISR93 Reuse Workshop Summary, </title> <journal> ACM Software Engineering Notes, </journal> <volume> Vol. 19 #1, </volume> <month> January </month> <year> 1994. </year>
Reference-contexts: Specifications may express high-level constraints to be satisfied, thereby entailing a degree of automatic programming on the part of the generator to fill in the gaps, or it could rely exclusively on the domain analyst for specific selections and compositions of components <ref> [Pou94] </ref>.
References-found: 7

