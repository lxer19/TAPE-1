URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1997/tr-97-058.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1997.html
Root-URL: http://www.icsi.berkeley.edu
Email: Email: ablayev@cs.uni-bonn.de.  
Title: A Lower Bound for Integer Multiplication on Randomized Read-Once Branching Programs  
Author: Farid Ablayev Marek Karpinski 
Note: Visiting from University of Kazan. Research partially supported by the Volkswagen-Stiftung and Russia Fund for Basic Research 96-01-01962  
Address: Bonn.  
Affiliation: Dept. of Computer Science University of  
Date: December 1997  
Pubnum: TR-97-058  
Abstract: We prove an exponential lower bound 2 (n= logn) on the size of any randomized ordered read-once branching program computing integer multiplication. Our proof depends on proving a new lower bound on Yao's randomized one-way communication complexity of certain boolean functions. It generalizes to some other common models of randomized branching programs. In contrast, we prove that testing integer multiplication, contrary even to nondeterministic situation, can be computed by randomized ordered read-once branching program in polynomial size. It is also known that computing the latter problem with deterministic read-once branching programs is as hard as factoring integers. y Dept. of Computer Science University of Bonn, and International Computer Science Institute, Berkeley, California. Research partially supported by DFG Grant KA 673/4-1, by the ESPRIT BR Grants 7097, and EC-US 030, DIMACS, and by the Max-Planck Research Prize. Email: marek@cs.bonn.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Ablayev, </author> <title> Lower bounds for one-way probabilistic communication complexity in Proceedings of the ICALP'93, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> 700, </address> <year> (1993), </year> <pages> 241-252. </pages>
Reference-contexts: That is P can read variables from R only after reading variables from L and does not read variables from L after starting reading variables from R. Then size (P ) 2 P C U p (h)1 : Now use the theorem proved in <ref> [1] </ref> which states that the randomized one-way communication complexity cannot be too "small" for a function with a "large" data set and a "small" control set. <p> The set Z is called the control set for the matrix CM . Denote by ts (CM ) the minimum size of a control set for matrix CM and nrow (CM ) the number of different rows of matrix CM . 5 For a number p 2 <ref> [1=2; 1] </ref>, define (probabilistic communication characteristic (cf. [1])) pcc U ts (CM) log nrow (CM) H (p), where H (p) = p log p (1 p) log (1 p) is the Shannon entropy [10]. Theorem 4 ([1]) Let " 2 [0; 1=2] and p = 1=2+". <p> Denote by ts (CM ) the minimum size of a control set for matrix CM and nrow (CM ) the number of different rows of matrix CM . 5 For a number p 2 [1=2; 1], define (probabilistic communication characteristic (cf. <ref> [1] </ref>)) pcc U ts (CM) log nrow (CM) H (p), where H (p) = p log p (1 p) log (1 p) is the Shannon entropy [10]. Theorem 4 ([1]) Let " 2 [0; 1=2] and p = 1=2+".
Reference: [2] <author> F. Ablayev, </author> <title> Randomization and nondeterminism are incomparable for ordered read-once branching programs, </title> <booktitle> in Proceedings of the ICALP'97, Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> 1256, </address> <year> (1997), </year> <pages> 195-202. </pages>
Reference-contexts: For example, clique-only function is hard for nondeterministic syntactic read-k-times branching programs [5] but is simple for randomized OBDDs [18, 20]. See [21] for another example. It was proved that randomized and nondeterministic models of OBDD are incomparable <ref> [2] </ref>. So there was still hope (note that multiplication is hard for nondeterministic OBDD [11]) that randomized OBDDs can compute integer multiplication in polynomial size. Our results show that randomized OBDDs can test integer multiplication in polynomial size but integer multiplication itself requires exponential size. <p> We use now Yao's standard randomized one-way communication computation [23, 24] (see also [13]) for boolean functions. The following lemma is proved in <ref> [2] </ref>. It states the connection between the size of OBDDs and the one-way communication complexity. Consider a boolean function h : f0; 1g m ! f0; 1g. Let U = V fi R be partition of a set of variables of h into two parts. <p> when values of proper variables are fixed) construct a randomized one-way communication protocol for computing the function g defined in [19], and iii) finally we prove the lower bound of the theorem, using the fact | that randomized one-way communication complexity gives the lower bound for ran domized OBDD size <ref> [2] </ref> and | that g is hard for randomized one-way communication computation [2]. Let t be an ordering of variables of randomized OBDD P . <p> protocol for computing the function g defined in [19], and iii) finally we prove the lower bound of the theorem, using the fact | that randomized one-way communication complexity gives the lower bound for ran domized OBDD size <ref> [2] </ref> and | that g is hard for randomized one-way communication computation [2]. Let t be an ordering of variables of randomized OBDD P . <p> See <ref> [2] </ref> for the proof of the lower bound of the lemma. 4 Generalization and concluding remarks Note that in the proof technique used in the section above for ordered read-once branching programs we used the following essential fact.
Reference: [3] <author> F. Ablayev and M. Karpinski, </author> <title> On the power of randomized branching programs, </title> <booktitle> in Proceedings of the ICALP'96, Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> 1099, </address> <year> (1996), </year> <pages> 348-356. </pages>
Reference: [4] <author> F. Ablayev and M. Karpinski, </author> <title> On the power of randomized ordered branching programs, </title> <institution> Research Report 85181-CS, University of Bonn, </institution> <year> 1997. </year> <month> 10 </month>
Reference-contexts: An interesting open problem remained whether randomization can help in computation of these functions by OBDDs. In this paper we show, firstly, that the method of <ref> [4] </ref> yields polynomial size (O (n 6 log 4 n)) bound for the latter function for randomized OBDDs. Interestingly, it is known that computing this function with deterministic read-once branching programs is as hard as integer factoring [22, 15]. <p> During last decade there were several attempts to find generalizations of OBDDs model for hardware verification, strong enough to compute efficiently integer multiplication. But again the results showed that multiplication remained hard for these models ([11, 15]). In <ref> [4] </ref>, a randomized model of branching programs was introduced. The importance of this model was highlighted by the fact that there is a function which is hard for deterministic OBDDs but is easy for randomized OBDDs [4]. <p> In <ref> [4] </ref>, a randomized model of branching programs was introduced. The importance of this model was highlighted by the fact that there is a function which is hard for deterministic OBDDs but is easy for randomized OBDDs [4]. During the last couple of years new examples of such function were presented by different authors. For example, clique-only function is hard for nondeterministic syntactic read-k-times branching programs [5] but is simple for randomized OBDDs [18, 20]. See [21] for another example. <p> We define a randomized branching program <ref> [4] </ref> as a program having in addition specially designated random ("coin-toss") inputs. When values of these random inputs are chosen from the uniform distribution, the output of the branching program is a random variable. <p> If ab = c then accept 2 an input else reject. Chinese reminder theorem provides the correctness of such computa-tion and fingerprinting arguments of <ref> [4] </ref> provide a correct result of testing XY = Z mod p by randomized OBDDs with high probability. All these manipulations can be done by a polynomial size randomized OBDD P constructed below. Phase 1. (randomized).
Reference: [5] <author> A. Borodin, A. Razborov, and R. Smolensky, </author> <title> On lower bounds for read-k-times branch-ing programs, Computational Complexity, </title> <type> 3, </type> <year> (1993), </year> <pages> 1-18 </pages>
Reference-contexts: During the last couple of years new examples of such function were presented by different authors. For example, clique-only function is hard for nondeterministic syntactic read-k-times branching programs <ref> [5] </ref> but is simple for randomized OBDDs [18, 20]. See [21] for another example. It was proved that randomized and nondeterministic models of OBDD are incomparable [2].
Reference: [6] <author> R. Bryant, </author> <title> Graph-based algorithms for boolean function manipulation IEEE Trans. </title> <journal> Comput., </journal> <volume> C-35, (8), </volume> <year> (1986), </year> <pages> 677-691. </pages>
Reference: [7] <author> R. Bryant, </author> <title> On the complexity of VLSI implementations and graph representations of boolean functions with applications to integer multiplication, </title> <journal> IEEE Trans. Comput., </journal> <volume> 40 (2), </volume> <year> (1991), </year> <pages> 205-213. </pages>
Reference-contexts: In these fields they are also known as "OBDDs" (ordered binary decision diagrams). There are some important practical functions which are hard for OBDDs. One of such functions is integer multiplication <ref> [7] </ref>. The other function is testing multiplication for which there is an exponential lower bound (2 (n 1=4 ) ) known for nondeterministic OBDDs [12]. An interesting open problem remained whether randomization can help in computation of these functions by OBDDs. <p> It is based on proving lower bound for the polynomial projection function of M U LT k ([6]). The proof of the theorem 3 itself is based on proving lower bound for another polynomial projection of M U LT <ref> [7, 11] </ref> using randomized binary search communication game. See [14, 13] for more information. <p> above we get that size (P ) 2 t (1H (p)) : Using (1) and the inequality above we get the lower bound of the theorem. 3.2 Proof of the theorem 3 The proof consists of 3 steps: i) we construct a polynomial projection f of M U LT (cf. <ref> [7, 11] </ref>), ii) using randomized OBDD P for M U LT (which is turned to a randomized OBDD for f when values of proper variables are fixed) construct a randomized one-way communication protocol for computing the function g defined in [19], and iii) finally we prove the lower bound of the
Reference: [8] <author> R. Bryant, </author> <title> Symbolic boolean manipulation with ordered binary decision diagrams, </title> <journal> ACM Computing Surveys, </journal> <volume> 24, No. 3, </volume> <year> (1992), </year> <pages> 293-318. </pages>
Reference-contexts: 1 Preliminaries Oblivious (or ordered) read-once branching programs become an important tool in the field of digital design and verification (see, for example, <ref> [8] </ref> and [22]). In these fields they are also known as "OBDDs" (ordered binary decision diagrams). There are some important practical functions which are hard for OBDDs. One of such functions is integer multiplication [7].
Reference: [9] <author> R. Buss, </author> <title> The graph of multiplication is equivalent to counting, </title> <journal> Information Processing Letters, </journal> <volume> 41, </volume> <year> (1992), </year> <pages> 199-201. </pages>
Reference-contexts: It is known that DM U LT (testing multiplication) is hard for syntactic nondeterministic read-k-times branching programs [12]. Note that DM U LT function is AC 0 equivalent to M U LT <ref> [9] </ref>. Our result answers also to the open problem raised in [22] about succinct representations for functions DM U LT and M U LT . We recall now basic definitions ([17]).
Reference: [10] <author> R. Gallager, </author> <title> Information theory and reliable communication, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1968. </year>
Reference-contexts: (CM ) the number of different rows of matrix CM . 5 For a number p 2 [1=2; 1], define (probabilistic communication characteristic (cf. [1])) pcc U ts (CM) log nrow (CM) H (p), where H (p) = p log p (1 p) log (1 p) is the Shannon entropy <ref> [10] </ref>. Theorem 4 ([1]) Let " 2 [0; 1=2] and p = 1=2+". Let U f0; 1g n be such that U = V fiR, where V and R are defined in according to partition of inputs of function h : f0; 1g n ! f0; 1g.
Reference: [11] <author> J. Gergov, </author> <title> Time-space tradeoffs for integer multiplication on various types of input oblivious sequential machines, </title> <journal> Information Processing Letters, </journal> <volume> 51, </volume> <year> (1994), </year> <pages> 265-269. </pages>
Reference-contexts: See [21] for another example. It was proved that randomized and nondeterministic models of OBDD are incomparable [2]. So there was still hope (note that multiplication is hard for nondeterministic OBDD <ref> [11] </ref>) that randomized OBDDs can compute integer multiplication in polynomial size. Our results show that randomized OBDDs can test integer multiplication in polynomial size but integer multiplication itself requires exponential size. <p> It is based on proving lower bound for the polynomial projection function of M U LT k ([6]). The proof of the theorem 3 itself is based on proving lower bound for another polynomial projection of M U LT <ref> [7, 11] </ref> using randomized binary search communication game. See [14, 13] for more information. <p> above we get that size (P ) 2 t (1H (p)) : Using (1) and the inequality above we get the lower bound of the theorem. 3.2 Proof of the theorem 3 The proof consists of 3 steps: i) we construct a polynomial projection f of M U LT (cf. <ref> [7, 11] </ref>), ii) using randomized OBDD P for M U LT (which is turned to a randomized OBDD for f when values of proper variables are fixed) construct a randomized one-way communication protocol for computing the function g defined in [19], and iii) finally we prove the lower bound of the <p> That is all the elements above 6 the second diagonal are 0 and all elements in the second diagonal and below it | are 1 <ref> [11] </ref>. Formally, function f (L; W ) can be described as follows. View L and W as a binary presentation of numbers. Numbers presented in the reverse order (first bits of L and W represent the lowest bits and last bits | the highest bit of a number). <p> Numbers presented in the reverse order (first bits of L and W represent the lowest bits and last bits | the highest bit of a number). Then f (L; W ) = 1 iff L + W 2 l (n)+1 <ref> [11] </ref>. We assume in the remaining part of the proof the variables from (Y [ X)n (L [ W ) been fixed as needed. So P is turned to the randomized OBDD that p-computes f . Below, using P we construct a randomized one-way communication protocol for a "pointer" function.
Reference: [12] <author> S. Jukna, </author> <title> The graph of integer multiplication is hard for read-k-times networks, </title> <institution> TR 95-10 Mathematik/Informatik University of Trier, </institution> <year> 1995. </year>
Reference-contexts: There are some important practical functions which are hard for OBDDs. One of such functions is integer multiplication [7]. The other function is testing multiplication for which there is an exponential lower bound (2 (n 1=4 ) ) known for nondeterministic OBDDs <ref> [12] </ref>. An interesting open problem remained whether randomization can help in computation of these functions by OBDDs. In this paper we show, firstly, that the method of [4] yields polynomial size (O (n 6 log 4 n)) bound for the latter function for randomized OBDDs. <p> Up to now it was not clear what is harder to multiply or to test the multiplication (see [16] for more information). It is known that DM U LT (testing multiplication) is hard for syntactic nondeterministic read-k-times branching programs <ref> [12] </ref>. Note that DM U LT function is AC 0 equivalent to M U LT [9]. Our result answers also to the open problem raised in [22] about succinct representations for functions DM U LT and M U LT . We recall now basic definitions ([17]).
Reference: [13] <author> E. Kushilevitz and N. Nisan, </author> <title> Communication complexity, </title> <publisher> Cambridge University Press, </publisher> <year> 1997. </year>
Reference-contexts: It is based on proving lower bound for the polynomial projection function of M U LT k ([6]). The proof of the theorem 3 itself is based on proving lower bound for another polynomial projection of M U LT [7, 11] using randomized binary search communication game. See <ref> [14, 13] </ref> for more information. <p> We use now Yao's standard randomized one-way communication computation [23, 24] (see also <ref> [13] </ref>) for boolean functions. The following lemma is proved in [2]. It states the connection between the size of OBDDs and the one-way communication complexity. Consider a boolean function h : f0; 1g m ! f0; 1g.
Reference: [14] <author> R. Motwani and P. Raghavan, </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: It is based on proving lower bound for the polynomial projection function of M U LT k ([6]). The proof of the theorem 3 itself is based on proving lower bound for another polynomial projection of M U LT [7, 11] using randomized binary search communication game. See <ref> [14, 13] </ref> for more information. <p> = P r ( 1 ) : : : P r ( l (n) ): The probability 1 P r (fl) of getting error is no more than (1=c (p)) t (n) for some constant c (p) &gt; 1 depending on probability p of correct computation of P (see, e.g., <ref> [14] </ref>).
Reference: [15] <author> S. Ponzio, </author> <title> A lower bound for integer multiplication with read-once branching programs, </title> <booktitle> Proceedings of the 27-th STOC, </booktitle> <year> (1995), </year> <pages> 130-139. </pages>
Reference-contexts: In this paper we show, firstly, that the method of [4] yields polynomial size (O (n 6 log 4 n)) bound for the latter function for randomized OBDDs. Interestingly, it is known that computing this function with deterministic read-once branching programs is as hard as integer factoring <ref> [22, 15] </ref>. Further we prove an exponential lower bound 2 (n= log n) on the size of any randomized OBBD computing integer multiplication. During last decade there were several attempts to find generalizations of OBDDs model for hardware verification, strong enough to compute efficiently integer multiplication. <p> It is known that the middle bit is the "hardest" bit (see, for example <ref> [15] </ref>). For p 2 (1=2; 1), k 2 f0; : : :; 2n 1g, and a permutation t of f1; : : :; 2ng let P p (k; t ) be a randomized OBDD with the ordering t that p-computes M U LT k .
Reference: [16] <author> S. Ponzio, </author> <title> Restricted branching programs and hardware verification, </title> <type> Technical Report, </type> <institution> MIT/LCS-TR-633, MIT, </institution> <year> 1995 </year>
Reference-contexts: Our results show that randomized OBDDs can test integer multiplication in polynomial size but integer multiplication itself requires exponential size. Up to now it was not clear what is harder to multiply or to test the multiplication (see <ref> [16] </ref> for more information). It is known that DM U LT (testing multiplication) is hard for syntactic nondeterministic read-k-times branching programs [12]. Note that DM U LT function is AC 0 equivalent to M U LT [9].
Reference: [17] <author> A. Razborov, </author> <title> Lower bounds for deterministic and nondeterministic branching programs, </title> <booktitle> in Proceedings of the FCT'91, Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> 529, </address> <year> (1991), </year> <pages> 47-60. </pages>
Reference: [18] <author> T. Thierauf, </author> <type> personal communication, </type> <year> 1997. </year>
Reference-contexts: During the last couple of years new examples of such function were presented by different authors. For example, clique-only function is hard for nondeterministic syntactic read-k-times branching programs [5] but is simple for randomized OBDDs <ref> [18, 20] </ref>. See [21] for another example. It was proved that randomized and nondeterministic models of OBDD are incomparable [2]. So there was still hope (note that multiplication is hard for nondeterministic OBDD [11]) that randomized OBDDs can compute integer multiplication in polynomial size.
Reference: [19] <author> P. Savicky, S. Zak, </author> <title> A large lower bound for 1-branching programs, </title> <booktitle> Electronic Colloquium on Computational Complexity, Revision 01 of TR96-036, </booktitle> <year> (1996), </year> <note> available at http:==www.eccc.uni-trier.de=eccc= 11 </note>
Reference-contexts: construct a polynomial projection f of M U LT (cf. [7, 11]), ii) using randomized OBDD P for M U LT (which is turned to a randomized OBDD for f when values of proper variables are fixed) construct a randomized one-way communication protocol for computing the function g defined in <ref> [19] </ref>, and iii) finally we prove the lower bound of the theorem, using the fact | that randomized one-way communication complexity gives the lower bound for ran domized OBDD size [2] and | that g is hard for randomized one-way communication computation [2].
Reference: [20] <author> M. Sauerhoff, </author> <type> personal communication, </type> <year> 1997. </year>
Reference-contexts: During the last couple of years new examples of such function were presented by different authors. For example, clique-only function is hard for nondeterministic syntactic read-k-times branching programs [5] but is simple for randomized OBDDs <ref> [18, 20] </ref>. See [21] for another example. It was proved that randomized and nondeterministic models of OBDD are incomparable [2]. So there was still hope (note that multiplication is hard for nondeterministic OBDD [11]) that randomized OBDDs can compute integer multiplication in polynomial size.
Reference: [21] <author> M. Sauerhoff, </author> <title> On nondeterminism versus randomness for read-once branching programs Electronic Colloquium on Computational Complexity, </title> <address> TR97-030, </address> <year> (1997), </year> <note> available at http:==www.eccc.uni-trier.de=eccc= </note>
Reference-contexts: During the last couple of years new examples of such function were presented by different authors. For example, clique-only function is hard for nondeterministic syntactic read-k-times branching programs [5] but is simple for randomized OBDDs [18, 20]. See <ref> [21] </ref> for another example. It was proved that randomized and nondeterministic models of OBDD are incomparable [2]. So there was still hope (note that multiplication is hard for nondeterministic OBDD [11]) that randomized OBDDs can compute integer multiplication in polynomial size.
Reference: [22] <author> I. Wegener, </author> <title> Efficient data structure for Boolean functions, </title> <journal> Discrete Mathematics, </journal> <volume> 136, </volume> <year> (1994), </year> <pages> 347-372. </pages>
Reference-contexts: 1 Preliminaries Oblivious (or ordered) read-once branching programs become an important tool in the field of digital design and verification (see, for example, [8] and <ref> [22] </ref>). In these fields they are also known as "OBDDs" (ordered binary decision diagrams). There are some important practical functions which are hard for OBDDs. One of such functions is integer multiplication [7]. <p> In this paper we show, firstly, that the method of [4] yields polynomial size (O (n 6 log 4 n)) bound for the latter function for randomized OBDDs. Interestingly, it is known that computing this function with deterministic read-once branching programs is as hard as integer factoring <ref> [22, 15] </ref>. Further we prove an exponential lower bound 2 (n= log n) on the size of any randomized OBBD computing integer multiplication. During last decade there were several attempts to find generalizations of OBDDs model for hardware verification, strong enough to compute efficiently integer multiplication. <p> It is known that DM U LT (testing multiplication) is hard for syntactic nondeterministic read-k-times branching programs [12]. Note that DM U LT function is AC 0 equivalent to M U LT [9]. Our result answers also to the open problem raised in <ref> [22] </ref> about succinct representations for functions DM U LT and M U LT . We recall now basic definitions ([17]).
Reference: [23] <author> A.C. Yao, </author> <title> Some Complexity Questions Related to Distributive Computing, </title> <booktitle> in Proc. of the 11th Annual ACM Symposium on the Theory of Computing, </booktitle> <year> (1979), </year> <pages> 209-213. </pages>
Reference-contexts: The communication matrix CM of f k;t for a partition (L k ; W k ) of inputs has the following property: 1) it is 2 t fi t boolean matrix and 2) all rows of CM are different. We use now Yao's standard randomized one-way communication computation <ref> [23, 24] </ref> (see also [13]) for boolean functions. The following lemma is proved in [2]. It states the connection between the size of OBDDs and the one-way communication complexity. Consider a boolean function h : f0; 1g m ! f0; 1g.
Reference: [24] <author> A.C. Yao, </author> <title> Lower bounds by probabilistic arguments, </title> <booktitle> in Proc. of the 27th Annual IEEE Symposium on Foundations of Computer Science (1983), </booktitle> <pages> 420-428. 12 </pages>
Reference-contexts: The communication matrix CM of f k;t for a partition (L k ; W k ) of inputs has the following property: 1) it is 2 t fi t boolean matrix and 2) all rows of CM are different. We use now Yao's standard randomized one-way communication computation <ref> [23, 24] </ref> (see also [13]) for boolean functions. The following lemma is proved in [2]. It states the connection between the size of OBDDs and the one-way communication complexity. Consider a boolean function h : f0; 1g m ! f0; 1g.
References-found: 24

