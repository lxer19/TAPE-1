URL: http://www.cs.indiana.edu/l/www/ftp/pierce/pict/old/pict-3.8e-export/Doc/defn.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/pict/old/pict-3.8e-export/Doc/
Root-URL: http://www.cs.indiana.edu
Email: benjamin.pierce@cl.cam.ac.uk  dnt@dcs.gla.ac.uk  
Title: Pict Language Definition Pict 3.8d  
Author: Benjamin C. Pierce David N. Turner 
Date: July 10, 1996  
Address: New Museums Site Pembroke Street Cambridge CB2 3QG United Kingdom  Glasgow G12 8QQ United Kingdom  
Affiliation: Computer Laboratory  Department of Computing Science University of Glasgow  
Abstract: This version of the Language Definition corresponds to an interim release of Pict. The derived forms and typing rules are not quite complete (they omit some subtleties of record manipulation, which in any case will be changing in future releases). The lexer and parser documentation is accurate. 
Abstract-found: 1
Intro-found: 1
Reference: [Ama94] <author> Roberto M. Amadio. </author> <title> Translating core facile. </title> <type> Technical Report ECRC-TR-3-94, </type> <institution> European Computer-Industry Research Center, GmbH, Munich, </institution> <year> 1994. </year> <note> Also available as a technical report from CRIN(CNRS)- Inria (Nancy). </note>
Reference: [AP94] <author> Roberto M. Amadio and Sanjiva Prasad. </author> <title> Localities and failures. </title> <type> Technical Report ECRC-M2-R10, </type> <institution> European Computer-Industry Research Center, GmbH, Munich, </institution> <year> 1994. </year>
Reference: [Ber93] <author> Bernard Berthomieu. </author> <title> Programming with behaviours in an ML framework. the syntax and semantics of LCS. </title> <type> Technical Report 93133, </type> <institution> LAAS-CNRS, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: By analogy, then, one may wonder what kind of high-level programming language can be constructed from the -calculus. ML, Haskell, : : : -calculus = -calculus A number of programming language designs have combined -calculus-like communication with a functional core language <ref> [Rep91, BMT92, Mat91, GMP89, Hol83, Car86, Ber93, etc.] </ref>, but none have gone so far as to take communication as the sole mechanism of computation.
Reference: [BMT92] <author> Dave Berry, Robin Milner, and David N. Turner. </author> <title> A semantics for ML concurrency primitives. </title> <booktitle> In ACM Principles of Programming Languages, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: By analogy, then, one may wonder what kind of high-level programming language can be constructed from the -calculus. ML, Haskell, : : : -calculus = -calculus A number of programming language designs have combined -calculus-like communication with a functional core language <ref> [Rep91, BMT92, Mat91, GMP89, Hol83, Car86, Ber93, etc.] </ref>, but none have gone so far as to take communication as the sole mechanism of computation.
Reference: [BS94] <author> M. Boreale and D. Sangiorgi. </author> <title> A fully abstract semantics for causality in the -calculus. </title> <type> Technical Report ECS-LFCS-94-297, </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, </institution> <year> 1994. </year>
Reference: [Car86] <author> Luca Cardelli. </author> <title> Amber. </title> <editor> In Guy Cousineau, Pierre-Louis Curien, and Bernard Robinet, editors, </editor> <booktitle> Combinators and Functional Programming Languages, </booktitle> <pages> pages 21-47. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year> <note> Lecture Notes in Computer Science No. 242. </note>
Reference-contexts: By analogy, then, one may wonder what kind of high-level programming language can be constructed from the -calculus. ML, Haskell, : : : -calculus = -calculus A number of programming language designs have combined -calculus-like communication with a functional core language <ref> [Rep91, BMT92, Mat91, GMP89, Hol83, Car86, Ber93, etc.] </ref>, but none have gone so far as to take communication as the sole mechanism of computation.
Reference: [EN86] <author> U. Engberg and M. Nielsen. </author> <title> A calculus of communicating systems with label-passing. </title> <type> Report DAIMI PB-208, </type> <institution> Computer Science Department, University of Aarhus, Denmark, </institution> <year> 1986. </year>
Reference-contexts: Introduction Milner, Parrow, and Walker's -calculus <ref> [EN86, MPW92, Mil91] </ref> generalizes the channel-based communication of CCS and its relatives [Mil80, Mil89, etc.] by allowing channels to be passed as data along other channels. This extension introduces an element of mobility, enabling the specification and verification of concurrent systems with dynamically evolving communication topologies.
Reference: [GMP89] <author> Alessandro Giacalone, Prateek Mishra, and Sanjiva Prasad. </author> <title> FACILE: A Symmetric Integration of Concurrent and Functional Programming. </title> <booktitle> In Theory and Practice of Software Development (TAPSOFT), </booktitle> <pages> pages 184-209. </pages> <publisher> Springer, </publisher> <year> 1989. </year> <note> LNCS 352. </note>
Reference-contexts: By analogy, then, one may wonder what kind of high-level programming language can be constructed from the -calculus. ML, Haskell, : : : -calculus = -calculus A number of programming language designs have combined -calculus-like communication with a functional core language <ref> [Rep91, BMT92, Mat91, GMP89, Hol83, Car86, Ber93, etc.] </ref>, but none have gone so far as to take communication as the sole mechanism of computation.
Reference: [Hol83] <author> Soren Holmstrom. </author> <title> PFL: A functional language for parallel programming, and its implementation. Programming Methodology Group, </title> <type> Report 7, </type> <institution> University of Goteborg and Chalmers University of Technology, </institution> <month> September </month> <year> 1983. </year>
Reference-contexts: By analogy, then, one may wonder what kind of high-level programming language can be constructed from the -calculus. ML, Haskell, : : : -calculus = -calculus A number of programming language designs have combined -calculus-like communication with a functional core language <ref> [Rep91, BMT92, Mat91, GMP89, Hol83, Car86, Ber93, etc.] </ref>, but none have gone so far as to take communication as the sole mechanism of computation.
Reference: [Jon93] <author> Cliff B. Jones. </author> <title> A pi-calculus semantics for an object-based design notation. </title> <editor> In E. Best, editor, </editor> <booktitle> Proceedings of CONCUR'93, </booktitle> <volume> LNCS 715, </volume> <pages> pages 158-172. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [Mat91] <author> David Matthews. </author> <title> A distributed concurrent implementation of Standard ML. </title> <type> Technical Report ECS-LFCS-91-174, </type> <institution> University of Edinburgh, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: By analogy, then, one may wonder what kind of high-level programming language can be constructed from the -calculus. ML, Haskell, : : : -calculus = -calculus A number of programming language designs have combined -calculus-like communication with a functional core language <ref> [Rep91, BMT92, Mat91, GMP89, Hol83, Car86, Ber93, etc.] </ref>, but none have gone so far as to take communication as the sole mechanism of computation.
Reference: [Mil80] <author> Robin Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Introduction Milner, Parrow, and Walker's -calculus [EN86, MPW92, Mil91] generalizes the channel-based communication of CCS and its relatives <ref> [Mil80, Mil89, etc.] </ref> by allowing channels to be passed as data along other channels. This extension introduces an element of mobility, enabling the specification and verification of concurrent systems with dynamically evolving communication topologies.
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Introduction Milner, Parrow, and Walker's -calculus [EN86, MPW92, Mil91] generalizes the channel-based communication of CCS and its relatives <ref> [Mil80, Mil89, etc.] </ref> by allowing channels to be passed as data along other channels. This extension introduces an element of mobility, enabling the specification and verification of concurrent systems with dynamically evolving communication topologies.
Reference: [Mil90] <author> Robin Milner. </author> <title> Functions as processes. </title> <type> Research Report 1154, </type> <institution> INRIA, Sofia Antipolis, </institution> <year> 1990. </year> <note> Final version in Journal of Mathematical Structures in Computer Science 2(2) 119-141, </note> <year> 1992. </year>
Reference: [Mil91] <author> Robin Milner. </author> <title> The polyadic -calculus: a tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, UK, </institution> <month> October </month> <year> 1991. </year> <booktitle> Proceedings of the International Summer School on Logic and Algebra of Specification, Marktoberdorf, </booktitle> <month> August </month> <year> 1991. </year> <title> Reprinted in Logic and Algebra of Specification, </title> <editor> ed. F. L. Bauer, W. Brauer, and H. Schwichtenberg, </editor> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Introduction Milner, Parrow, and Walker's -calculus <ref> [EN86, MPW92, Mil91] </ref> generalizes the channel-based communication of CCS and its relatives [Mil80, Mil89, etc.] by allowing channels to be passed as data along other channels. This extension introduces an element of mobility, enabling the specification and verification of concurrent systems with dynamically evolving communication topologies.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: Introduction Milner, Parrow, and Walker's -calculus <ref> [EN86, MPW92, Mil91] </ref> generalizes the channel-based communication of CCS and its relatives [Mil80, Mil89, etc.] by allowing channels to be passed as data along other channels. This extension introduces an element of mobility, enabling the specification and verification of concurrent systems with dynamically evolving communication topologies.
Reference: [Pie96] <author> Benjamin C. Pierce. </author> <title> Programming in the pi-calculus: An experiment in concurrent language design. Tutorial notes on the Pict language. </title> <note> Available electronically, </note> <year> 1996. </year> <title> 18 Pict Language Definition 19 </title>
Reference-contexts: This report describes the syntax and formal sematics of the Pict language. This document is not intended as a tutorial on Pict programming, and makes no attempt to explain or motivate the Pict language design. Interested readers should consult the following documents: the Pict tuturial <ref> [Pie96] </ref>, the Pict compiler documentation [PT96a], the Pict standard libraries manual [PT96c], and a high-level survey of the Pict language design [PT96b]. Pict is an experimental language, and we welcome any comments or suggestions as to how we might improve the language itself or our presentation of its formal semantics.
Reference: [PT96a] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict: A programming language based on the pi-calculus, 1996. Compiler, documentation, demonstration programs, and standard libraries; available electronically. </title>
Reference-contexts: This document is not intended as a tutorial on Pict programming, and makes no attempt to explain or motivate the Pict language design. Interested readers should consult the following documents: the Pict tuturial [Pie96], the Pict compiler documentation <ref> [PT96a] </ref>, the Pict standard libraries manual [PT96c], and a high-level survey of the Pict language design [PT96b]. Pict is an experimental language, and we welcome any comments or suggestions as to how we might improve the language itself or our presentation of its formal semantics.
Reference: [PT96b] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict: A programming language based on the pi-calculus. </title> <note> To appear, </note> <year> 1996. </year>
Reference-contexts: Interested readers should consult the following documents: the Pict tuturial [Pie96], the Pict compiler documentation [PT96a], the Pict standard libraries manual [PT96c], and a high-level survey of the Pict language design <ref> [PT96b] </ref>. Pict is an experimental language, and we welcome any comments or suggestions as to how we might improve the language itself or our presentation of its formal semantics.
Reference: [PT96c] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict standard libraries manual. </title> <note> Available electronically, </note> <year> 1996. </year>
Reference-contexts: This document is not intended as a tutorial on Pict programming, and makes no attempt to explain or motivate the Pict language design. Interested readers should consult the following documents: the Pict tuturial [Pie96], the Pict compiler documentation [PT96a], the Pict standard libraries manual <ref> [PT96c] </ref>, and a high-level survey of the Pict language design [PT96b]. Pict is an experimental language, and we welcome any comments or suggestions as to how we might improve the language itself or our presentation of its formal semantics.
Reference: [Rep91] <author> John Reppy. </author> <title> CML: A higher-order concurrent language. </title> <booktitle> In Programming Language Design and Implementation, </booktitle> <pages> pages 293-259. </pages> <booktitle> SIGPLAN, ACM, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: By analogy, then, one may wonder what kind of high-level programming language can be constructed from the -calculus. ML, Haskell, : : : -calculus = -calculus A number of programming language designs have combined -calculus-like communication with a functional core language <ref> [Rep91, BMT92, Mat91, GMP89, Hol83, Car86, Ber93, etc.] </ref>, but none have gone so far as to take communication as the sole mechanism of computation.
Reference: [San92] <author> Davide Sangiorgi. </author> <title> Expressing Mobility in Process Algebras: First-Order and Higher-Order Paradigms. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <year> 1992. </year>
Reference: [San93] <author> Davide Sangiorgi. </author> <title> An investigation into functions as processes. </title> <booktitle> In Proc. Ninth International Conference on the Mathematical Foundations of Programming Semantics (MFPS'93), volume 802 of Lecture Notes in Computer Science, </booktitle> <pages> pages 143-159. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference: [San94a] <author> Davide Sangiorgi. </author> <title> The lazy lambda calculus in a concurrency scenario. </title> <journal> Information and Computation, </journal> <volume> 111(1) </volume> <pages> 120-153, </pages> <year> 1994. </year>
Reference: [San94b] <author> Davide Sangiorgi. </author> <title> Locality and non-interleaving semantics in calculi for mobile processes. </title> <type> Technical Report ECS-LFCS-94-282, </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, </institution> <year> 1994. </year> <title> An extract appeared in Proc. </title> <booktitle> TACS '94, Lecture Notes in Computer Science 789, </booktitle> <publisher> Springer Verlag. </publisher>
Reference: [Wal94] <author> David Walker. </author> <title> Algebraic proofs of properties of objects. </title> <booktitle> In Proceedings of European Symposium on Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [Wal95] <author> David Walker. </author> <title> Objects in the -calculus. </title> <journal> Information and Computation, </journal> <volume> 116 </volume> <pages> 253-271, </pages> <year> 1995. </year>
References-found: 27

