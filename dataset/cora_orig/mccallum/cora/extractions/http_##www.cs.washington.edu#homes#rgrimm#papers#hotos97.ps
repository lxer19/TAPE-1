URL: http://www.cs.washington.edu/homes/rgrimm/papers/hotos97.ps
Refering-URL: http://www.cs.washington.edu/homes/rgrimm/
Root-URL: http://www.cs.washington.edu
Email: frgrimm, bershadg@cs.washington.edu  
Title: Security for Extensible Systems  
Author: Robert Grimm Brian N. Bershad 
Address: Seattle, WA 98195, U.S.A.  
Affiliation: Dept. of Computer Science and Engineering University of Washington  
Abstract: The recent trend towards dynamically extensible systems, such as Java, SPIN or VINO, promises more powerful and flexible systems. At the same time, the impact of extensibility on overall system security and, specifically, on access control is still ill understood, and protection mechanisms in these extensible systems are rudimentary at best. In this position paper, we identify the structure of extensible systems as it relates to system security and postulate an initial model for access control. This model extends the discretionary access control of traditional operating systems to encompass extensions and, by using ideas explored by the security community, introduces a notion of mandatory access control. While a new access control model does not address all aspects of system security, we believe that it can serve as a solid foundation for developing a fully featured and flexible security model for extensible systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Elliott Bell and Leonard J. La Padula. </author> <title> Secure Computer System: Unified Exposition and Multics Interpretation. </title> <type> Technical Report MTR-2997 Rev. 1, </type> <institution> The MITRE Corporation, Bedford, Massachusetts, </institution> <month> March </month> <year> 1976. </year> <note> Also ADA023588, National Technical Information Service. </note>
Reference-contexts: We base mandatory access control in extensible systems on the lattice model of information flow <ref> [1, 5, 3] </ref>. In this model, each subject and object have a security class associated with them that controls which subject can access which objects and how.
Reference: [2] <author> Brian N. Bershad, Stefan Savage, Przemysaw Pardyak, Emin Gun Sirer, Marc Fiuczynski, David Becker, Susan Eg-gers, and Craig Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 267284, </pages> <address> Copper Mountain, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Problem and Motivation The recent trend towards dynamically extensible systems is probably best exemplified by the Java system [11, 9, 12]. Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN <ref> [2] </ref> and VINO [21] address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services. And, Juice [6], which utilizes slim binary technology [7, 10] originally developed for the Oberon system, provides a faster and leaner alternative to Java on the world-wide web.
Reference: [3] <author> K. J. Biba. </author> <title> Integrity Considerations for Secure Computer Systems. </title> <type> Technical Report MTR-3153 Rev. 1, </type> <institution> The MITRE Corporation, Bedford, Massachusetts, </institution> <month> April </month> <year> 1977. </year> <note> Also ADA039324, National Technical Information Service. </note>
Reference-contexts: We base mandatory access control in extensible systems on the lattice model of information flow <ref> [1, 5, 3] </ref>. In this model, each subject and object have a security class associated with them that controls which subject can access which objects and how.
Reference: [4] <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 190200, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: At the same time, the impact of extensibility on overall system security and specifically access control is still ill understood. And, the protection mechanisms in these extensible systems are rudimentary at best, as illustrated by the continuous string of security breaches in the Java system <ref> [4, 15] </ref>. Mainstream operating and file systems use access control mechanisms that are familiar and widely accepted by users. Their use of individuals and groups in combination with fully featured access control lists has the potential to offer a flexible and powerful mechanism to protect files and other system objects. <p> This design makes it unnecessarily hard to reason about the security properties of Java and a design or implementation error in any one of the three prongs can break the entire security system, as has been repeatedly demonstrated <ref> [4, 15] </ref>. In SPIN, system services are partitioned into several domains [22], where each domain is a collection of Modula-3 interfaces. An extension is linked against one or more domains and can only access and extend those system services that are in the domains it has been linked against.
Reference: [5] <author> Dorothy E. Denning. </author> <title> A Lattice Model of Secure Information Flow. </title> <journal> Communications of the ACM, </journal> <volume> 19(5):236243, </volume> <month> May </month> <year> 1976. </year>
Reference-contexts: We base mandatory access control in extensible systems on the lattice model of information flow <ref> [1, 5, 3] </ref>. In this model, each subject and object have a security class associated with them that controls which subject can access which objects and how.
Reference: [6] <author> Michael Franz and Thomas Kistler. </author> <note> Introducing Juice. http://www.ics.uci.edu/~juice/intro.html, Octo-ber 1996. </note>
Reference-contexts: Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO [21] address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services. And, Juice <ref> [6] </ref>, which utilizes slim binary technology [7, 10] originally developed for the Oberon system, provides a faster and leaner alternative to Java on the world-wide web. At the same time, the impact of extensibility on overall system security and specifically access control is still ill understood.
Reference: [7] <author> Michael Franz and Thomas Kistler. </author> <title> Slim Binaries. </title> <type> Technical Report 96-24, </type> <institution> Department of Information and Computer Science, University of California, Irvine, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO [21] address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services. And, Juice [6], which utilizes slim binary technology <ref> [7, 10] </ref> originally developed for the Oberon system, provides a faster and leaner alternative to Java on the world-wide web. At the same time, the impact of extensibility on overall system security and specifically access control is still ill understood.
Reference: [8] <author> J. Steven Fritzinger and Marianne Mueller. </author> <title> Java Security. Sun Microsystems, </title> <publisher> Inc., </publisher> <address> White Paper, http://www. javasoft.com/security/whitepaper.ps, </address> <year> 1996. </year>
Reference-contexts: However, access control in existing extensible systems is rudimentary at best. 1.2 The State of Affairs The current Java security model <ref> [8, 15] </ref> distinguishes between trusted extensions (code stored on the local file system), which have access to the full functionality of the Java system, and untrusted extensions (all remote code).
Reference: [9] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: 1 Problem and Motivation The recent trend towards dynamically extensible systems is probably best exemplified by the Java system <ref> [11, 9, 12] </ref>. Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO [21] address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services.
Reference: [10] <author> Thomas Kistler and Michael Franz. </author> <title> A Tree-Based Alternative to Java Byte-Codes. </title> <type> Technical Report 96-58, </type> <institution> Department of Information and Computer Science, University of California, Irvine, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO [21] address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services. And, Juice [6], which utilizes slim binary technology <ref> [7, 10] </ref> originally developed for the Oberon system, provides a faster and leaner alternative to Java on the world-wide web. At the same time, the impact of extensibility on overall system security and specifically access control is still ill understood.
Reference: [11] <author> Douglas Kramer, Bill Joy, and David Spenhoff. </author> <title> The Java PlatformA White Paper. </title> <type> JavaSoft White Paper, </type> <note> ftp: //ftp.javasoft.com/docs/JavaPlatform.ps, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: 1 Problem and Motivation The recent trend towards dynamically extensible systems is probably best exemplified by the Java system <ref> [11, 9, 12] </ref>. Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO [21] address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services.
Reference: [12] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: 1 Problem and Motivation The recent trend towards dynamically extensible systems is probably best exemplified by the Java system <ref> [11, 9, 12] </ref>. Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO [21] address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services.
Reference: [13] <institution> Lucent Technologies Inc. Inferno: la Commedia In-terattiva. </institution> <address> http://inferno.bell-labs.com/inferno/ infernosum.html, </address> <year> 1996. </year>
Reference-contexts: Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO [21] address extensibility in the context of operating systems. Inferno <ref> [13] </ref> focuses on extensibility for distributed services. And, Juice [6], which utilizes slim binary technology [7, 10] originally developed for the Oberon system, provides a faster and leaner alternative to Java on the world-wide web.
Reference: [14] <institution> Lucent Technologies Inc. Security in Inferno. </institution> <address> http://inferno.bell-labs. com/inferno/security.html, </address> <year> 1997. </year>
Reference-contexts: Little or no information is available on system security for other extensible systems: VINO distinguishes between regular and privileged users, and uses dynamic privilege checks before accessing sensitive data [20]. Inferno uses encryption for the mutual authentication of communicating parties and their messages <ref> [14] </ref>. No information is available on security in Juice. While these systems ensure the basic safety of the system by relying on either programming language support or software fault isolation, no security model and specifically no access control model is discussed in the publicly available literature.
Reference: [15] <author> Gary McGraw and Edward W. Felten. </author> <title> Java Security: Hostile Applets, Holes and Antidotes. </title> <publisher> Wiley Computer Publishing, John Wiley & Sons, Inc., </publisher> <address> New York, New York, </address> <year> 1997. </year>
Reference-contexts: At the same time, the impact of extensibility on overall system security and specifically access control is still ill understood. And, the protection mechanisms in these extensible systems are rudimentary at best, as illustrated by the continuous string of security breaches in the Java system <ref> [4, 15] </ref>. Mainstream operating and file systems use access control mechanisms that are familiar and widely accepted by users. Their use of individuals and groups in combination with fully featured access control lists has the potential to offer a flexible and powerful mechanism to protect files and other system objects. <p> However, access control in existing extensible systems is rudimentary at best. 1.2 The State of Affairs The current Java security model <ref> [8, 15] </ref> distinguishes between trusted extensions (code stored on the local file system), which have access to the full functionality of the Java system, and untrusted extensions (all remote code). <p> Untrusted extensions are placed into a so-called sandbox which limits extensions from using some system services (such as accessing the local file system) and ideally would also isolate extensions from each other (see <ref> [15] </ref> for a counter example: the ThreadMurder applet kills the threads of all other applets that are running in the same sandbox, including those applets that are loaded and linked after the ThreadMurder applet itself has been linked in). <p> Furthermore, the security of the Java system, instead of relying on one central facility to enforce security (which is good design practice for secure systems [18]), relies on three facilities, or prongs (a term introduced by <ref> [15] </ref>). This design makes it unnecessarily hard to reason about the security properties of Java and a design or implementation error in any one of the three prongs can break the entire security system, as has been repeatedly demonstrated [4, 15]. <p> This design makes it unnecessarily hard to reason about the security properties of Java and a design or implementation error in any one of the three prongs can break the entire security system, as has been repeatedly demonstrated <ref> [4, 15] </ref>. In SPIN, system services are partitioned into several domains [22], where each domain is a collection of Modula-3 interfaces. An extension is linked against one or more domains and can only access and extend those system services that are in the domains it has been linked against.
Reference: [16] <author> Marshall Kirk McKusick, Keith Bostic, Michael J. Karels, and John S. Quarterman. </author> <title> The Design and Implementation of the 4.4BSD Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: Even so, they do not fully exploit this potential, nor do they address the issue of protecting extensible systems: The access control mechanisms in Unix <ref> [16] </ref> are primitive and, barely, offer adequate security to protect file access. The access control mechanisms in the Andrew File System [19] and Windows NT [23] are more flexible than in Unix, but do not address the specific problems of protection in dynamically extensible systems as well. <p> However, current implementations do not have sufficient power to provide access control for extensible systems: The access control in Unix, which associates an individual and a group owner with each file <ref> [16] </ref>, is primitive and barely sufficient for controlling file access, let alone for controlling an extensible system.
Reference: [17] <author> Przemysaw Pardyak and Brian N. Bershad. </author> <title> Dynamic Binding for an Extensible System. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, pages 201212, </booktitle> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Both mechanisms are usually provided by a central facility, by either building on programming language support (for example, the use of inheritance in Java or VINO) or a dynamic dispatch model (for example, the event-dispatch model in SPIN, see <ref> [17] </ref>). While seemingly similar, the two mechanisms represent different semantics: In the first case, an extension invokes other services, while in the second case, an extension is invoked by another service.
Reference: [18] <author> Jerome H. Saltzer and Michael D. Schroeder. </author> <title> The Protection of Information in Computer Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 63(9):12781308, </address> <month> September </month> <year> 1975. </year>
Reference-contexts: However, no clear and flexible access control model, detailing how this finer grain of access control will be provided, has been presented. Furthermore, the security of the Java system, instead of relying on one central facility to enforce security (which is good design practice for secure systems <ref> [18] </ref>), relies on three facilities, or prongs (a term introduced by [15]). <p> This economy of mechanism and the resulting psychological acceptability (the protection of extensible systems, to the user, does not appear to be that different from protection in conventional operating systems) are examples of using design principles that are particularly important for the design of protection mechanisms <ref> [18] </ref>. It is our hope that this model and its careful structuring according to security concerns can provide a good basis for future work on the security of extensible systems. Further information on our research on the security of extensible systems can be found on the worldwide web at http://www.cs.washington.edu/homes/ rgrimm/research/security.html.
Reference: [19] <author> M. Satyanarayanan, John H. Howard, David A. Nichols, Robert N. Sidebotham, Alfred Z. Spector, and Michael J. West. </author> <title> The ITC Distributed File System: </title> <booktitle> Principles and Design. In Proceedings of the 10th Symposium on Operating Systems Principles, </booktitle> <pages> pages 3550, </pages> <address> Orcas Island, Washington, </address> <month> December </month> <year> 1985. </year>
Reference-contexts: Even so, they do not fully exploit this potential, nor do they address the issue of protecting extensible systems: The access control mechanisms in Unix [16] are primitive and, barely, offer adequate security to protect file access. The access control mechanisms in the Andrew File System <ref> [19] </ref> and Windows NT [23] are more flexible than in Unix, but do not address the specific problems of protection in dynamically extensible systems as well. In this position paper, we identify the structure of extensible systems as it relates to access control and describe the current state of affairs. <p> The Andrew File System uses full-blown access control lists, but does so only at the granularity of entire directories <ref> [19] </ref>, which we believe is at too high a grain (see the discussion in section 2.3).
Reference: [20] <author> Margo I. Seltzer. </author> <type> Personal Communication, </type> <month> January </month> <year> 1997. </year>
Reference-contexts: Little or no information is available on system security for other extensible systems: VINO distinguishes between regular and privileged users, and uses dynamic privilege checks before accessing sensitive data <ref> [20] </ref>. Inferno uses encryption for the mutual authentication of communicating parties and their messages [14]. No information is available on security in Juice.
Reference: [21] <author> Margo I. Seltzer, Yasuhiro Endo, Christopher Small, and Keith A. Smith. </author> <title> Dealing With Disaster: Surviving Misbehaved Kernel Extensions. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 213227, </pages> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: 1 Problem and Motivation The recent trend towards dynamically extensible systems is probably best exemplified by the Java system [11, 9, 12]. Several other projects are also pursuing extensible systems motivated by the promise of more powerful and flexible systems: SPIN [2] and VINO <ref> [21] </ref> address extensibility in the context of operating systems. Inferno [13] focuses on extensibility for distributed services. And, Juice [6], which utilizes slim binary technology [7, 10] originally developed for the Oberon system, provides a faster and leaner alternative to Java on the world-wide web.
Reference: [22] <author> Emin Gun Sirer, Marc Fiuczynski, Przemysaw Pardyak, and Brian Bershad. </author> <title> Safe Dynamic Linking in an Extensible Operating System. </title> <booktitle> Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: This design makes it unnecessarily hard to reason about the security properties of Java and a design or implementation error in any one of the three prongs can break the entire security system, as has been repeatedly demonstrated [4, 15]. In SPIN, system services are partitioned into several domains <ref> [22] </ref>, where each domain is a collection of Modula-3 interfaces. An extension is linked against one or more domains and can only access and extend those system services that are in the domains it has been linked against. Other system services are inaccessible to an extension.
Reference: [23] <author> Karanjit S. Siyan. </author> <title> Windows NT Server Professional Reference. </title> <publisher> New Riders Publishing, </publisher> <address> Indianapolis, Indiana, </address> <year> 1995. </year>
Reference-contexts: The access control mechanisms in the Andrew File System [19] and Windows NT <ref> [23] </ref> are more flexible than in Unix, but do not address the specific problems of protection in dynamically extensible systems as well. In this position paper, we identify the structure of extensible systems as it relates to access control and describe the current state of affairs. <p> Windows NT uses access control lists at the granularity of individual files and presents a rich, though unnecessarily complicated access control model <ref> [23] </ref> (objects can be associated with three types of access permissions, called specific, standard and generic types, but several of the individual permissions within the different types do not offer any real semantic difference).
References-found: 23

