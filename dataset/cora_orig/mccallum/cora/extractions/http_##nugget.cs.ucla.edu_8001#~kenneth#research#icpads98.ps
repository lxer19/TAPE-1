URL: http://nugget.cs.ucla.edu:8001/~kenneth/research/icpads98.ps
Refering-URL: http://nugget.cs.ucla.edu:8001/~kenneth/personal/research.html
Root-URL: http://www.cs.ucla.edu
Email: fkenneth, zwang, muntzg@cs.ucla.edu shek@hrl.com  
Title: On Reconfiguring Query Execution Plans in Distributed Object-Relational DBMS  
Author: Kenneth W. Ng Zhenghao Wang Richard R. Muntz Eddie C. Shek 
Address: Los Angeles, CA 90095-1596, USA Malibu, CA 90265-4799, USA  
Affiliation: Computer Science Department Information Sciences Laboratory University of California HRL Laboratories, LLC  
Abstract: Massive database sizes and growing demands for decision support and data mining result in long-running queries in extensible Object-Relational DBMS, particularly in decision support and data warehousing analysis applications. Parallelization of query evaluation is often required for acceptable performance. Yet queries are frequently processed suboptimally due to (1) only coarse or inaccurate estimates of the query characteristics and database statistics available prior to query evaluation; (2) changes in system configuration and resource availability during query evaluation. In a distributed environment, dynamically reconfiguring query execution plans (QEPs), which adapts QEPs to the environment as well as the query characteristics, is a promising means to significantly improve query evaluation performance. Based on an operator classification, we propose an algorithm to coordinate the steps in a reconfiguration and introduce alternatives for execution context checkpointing and restoring. A syntactic extension of SQL to expose the relevant characteristics of user defined functions in support of dynamic reconfiguration is proposed. An example from the experimental system is presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Antoshenkov. </author> <title> Dynamic query optimization in Rdb/VMS. </title> <booktitle> In Proc. of ICDE, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: Related Work There is some related work in this area (<ref> [1] </ref>, [14], [20]). Yet none of the existing work is completely satisfactory for our purposes | either only limited changes are allowed to QEPs or changes are restricted to built-in functions. For example, [1] allows only the replacement of built-in scan operators. [14] proposed re-optimizing QEPs in relational database to address the inaccurate estimation of data selectivity. Collecting statistics at run-time, the system reconfigures the unprocessed portion of a QEP, hence improving the performance. There are major differences between our work and theirs.
Reference: [2] <author> A. Bricker, M. Litzkow, and M. Livny. </author> <type> Condor technical report. Technical Report CS-TR-92-1069, </type> <institution> Department of Computer Science, University of Wisconsin, Madison, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: In this paper, we focus our discussion on the operator coordination and state capture/restoration. 2.3. Reconfiguration Forms We consider the following forms of plan modification. Operator relocation re-assigns an operator instance from one processor to another. It is similar to process migration (e.g. Condor <ref> [2] </ref>, Utopia [21]). The major difference is that the semantics of operators may be exploited in the context of data processing to more efficiently implement migration.
Reference: [3] <author> D. DeWitt. </author> <title> Parallel object-relational database systems: Challenges and opportunities. In Invited Talk, </title> <address> PDIS, </address> <year> 1996. </year>
Reference-contexts: First, they only reconfigure a QEP at points where no operation is partially done, i.e., no pipelined parallelism, or data flow structure, is considered in their work. We considered the dynamic reconfiguration of QEPs in a parallel execution environment, which is expected for ADT extensions in ORDBMSs <ref> [3] </ref>. Thus more reconfiguration options are considered in our research. Further, not only the built-in operators but also UDFs are considered in our research. Lastly, intermediate results are materialized for plan modification in their work. This may not be practical in the case of the large volume data sets.
Reference: [4] <author> F. Fabbrocino, E. Shek, and R. Muntz. </author> <title> The design and implementation of the conquest query execution environment. </title> <type> Technical Report CSD-970029, </type> <institution> UCLA, </institution> <month> June </month> <year> 1997. </year>
Reference: [5] <author> P. Gassner, G.M. Lohman, K.B. Schiefer, and Y. Wang. </author> <title> Query optimization in the IBM DB2 family. </title> <journal> Data Engineering Bulletin, </journal> <volume> 16(4), </volume> <year> 1993. </year>
Reference-contexts: An operator may be cloned for data parallelism, where each instance (or clone) processes a portion of input data (Figure 1). Knowledge about an operation and input ordering has great impact in optimizing performance. A simple example from <ref> [5] </ref> SELECT MAX (ORDER NUMBER) FROM SALES illustrates a case in which only the first record needs to be retrieved by using a descending index on ORDER NUMBER.
Reference: [6] <author> G. Graefe and et al. </author> <title> Extensible Query Optimization and Parallel Execution in Volcano. In Query Processing for Advanced Database Systems, </title> <year> 1994. </year>
Reference: [7] <author> G. Graefe and W.J. McKenna. </author> <title> The Volcano Optimizer Generator: Extensibility and Efficient Search. </title> <booktitle> In Proceedings of ICDE, </booktitle> <month> April </month> <year> 1993. </year>
Reference: [8] <author> L.M. Haas and et al. </author> <title> Starburst Mid-Flight: As the Dust Clears. </title> <journal> IEEE TKDE, </journal> <volume> 2(1), </volume> <year> 1990. </year>
Reference-contexts: Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization. User-Defined Functions are widely studied in recent years ([10], [9], <ref> [8] </ref>, [18], [17], [15], [13]). Yet most published work focuses on the optimization before the query evaluation. [13] studied the UDFs execution using data parallelism. It is interesting to compare our classification for reconfiguration to their classification for parallelization. Similar reasoning approaches were used.
Reference: [9] <author> J.M. Hellerstein and J.F. Naughton. </author> <title> Query execution techniques for caching expensive methods. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <year> 1996. </year>
Reference-contexts: Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization. User-Defined Functions are widely studied in recent years ([10], <ref> [9] </ref>, [8], [18], [17], [15], [13]). Yet most published work focuses on the optimization before the query evaluation. [13] studied the UDFs execution using data parallelism. It is interesting to compare our classification for reconfiguration to their classification for parallelization. Similar reasoning approaches were used.
Reference: [10] <author> J.M. Hellerstein and M. Stonebraker. </author> <title> Predicate migration: Optimizing queries with expensive predicates. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <year> 1993. </year>
Reference: [11] <author> IBM. </author> <title> SQL Reference. </title> <address> http://www.software.ibm. com/data/db2/library, </address> <year> 1998. </year>
Reference-contexts: An ORDBMS provides a number of built-in functions that can be used in query expressions. Abstract Data Types (ADTs) and associated UDFs are introduced for expressing complex data structures and query requirements. In DB2 <ref> [11] </ref>, for example, a user can define a minima UDF that operates on a two dimension array (i.e., an ADT) to find "local minima" (each grid point with a value smaller than its neighbors) as shown in Figure 2.
Reference: [12] <author> Informix. </author> <title> Illustra User Manual. </title> <address> http://www. in-formix.com/answers, </address> <month> February </month> <year> 1998. </year>
Reference-contexts: It allows the summary information concerning previously processed data items to be carried forward to the next execution of the same UDF, and influence the behavior of future computations. Further, an ORDBMS such as Informix Illustra supports operators that compute a function in an object-at-a-time fashion <ref> [12] </ref>. This design resembles the Open-Next-Close query evaluation paradigm [6][7][4][19] that supports data stream processing. In this paper, we assume that all operators run in a stream processing environment and each operator execution is called an iteration.
Reference: [13] <author> M. Jaedicke and B. Mitschang. </author> <title> On parallel processing of aggregate and scalar functions in object-relational dbms. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <year> 1998. </year>
Reference-contexts: Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization. User-Defined Functions are widely studied in recent years ([10], [9], [8], [18], [17], [15], <ref> [13] </ref>). Yet most published work focuses on the optimization before the query evaluation. [13] studied the UDFs execution using data parallelism. It is interesting to compare our classification for reconfiguration to their classification for parallelization. Similar reasoning approaches were used. <p> Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization. User-Defined Functions are widely studied in recent years ([10], [9], [8], [18], [17], [15], <ref> [13] </ref>). Yet most published work focuses on the optimization before the query evaluation. [13] studied the UDFs execution using data parallelism. It is interesting to compare our classification for reconfiguration to their classification for parallelization. Similar reasoning approaches were used.
Reference: [14] <author> N. Kabra and D.J. DeWitt. </author> <title> Efficient mid-query re-optimization of sub-optimal query execution plans. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <year> 1998. </year>
Reference-contexts: We note that the plan search cost and configuration estimation cost are relatively fixed for all QEPs and reconfiguration forms. Keeping the plan modification cost as low as possible makes the dynamic recon-figuring QEPs more beneficial. 5. Related Work There is some related work in this area ([1], <ref> [14] </ref>, [20]). Yet none of the existing work is completely satisfactory for our purposes | either only limited changes are allowed to QEPs or changes are restricted to built-in functions. For example, [1] allows only the replacement of built-in scan operators. [14] proposed re-optimizing QEPs in relational database to address the <p> There is some related work in this area ([1], <ref> [14] </ref>, [20]). Yet none of the existing work is completely satisfactory for our purposes | either only limited changes are allowed to QEPs or changes are restricted to built-in functions. For example, [1] allows only the replacement of built-in scan operators. [14] proposed re-optimizing QEPs in relational database to address the inaccurate estimation of data selectivity. Collecting statistics at run-time, the system reconfigures the unprocessed portion of a QEP, hence improving the performance. There are major differences between our work and theirs.
Reference: [15] <author> A.P. Marathe and K. Salem. </author> <title> A language for manipulating arrays. </title> <booktitle> In Proc. of VLDB, </booktitle> <year> 1997. </year>
Reference-contexts: Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization. User-Defined Functions are widely studied in recent years ([10], [9], [8], [18], [17], <ref> [15] </ref>, [13]). Yet most published work focuses on the optimization before the query evaluation. [13] studied the UDFs execution using data parallelism. It is interesting to compare our classification for reconfiguration to their classification for parallelization. Similar reasoning approaches were used.
Reference: [16] <author> K. Ng, Z. Wang, and R.R. Muntz. </author> <title> Dynamic reconfiguration of sub-optimal parallel query execution plans. </title> <type> Technical Report CSD-980033, </type> <institution> Department of Computer Science, UCLA, </institution> <month> September </month> <year> 1998. </year>
Reference-contexts: In the following, we discuss the design issues of the coordination algorithm in brief (the details can be found in <ref> [16] </ref>). Deadlock and livelock situations may occur during coordination. As an example of the issues involved, when a consumer with empty input buffer is in the middle of an iteration (therefore more input data may be required), but its producer has already been suspended. <p> First, not all operator instances are involved in a recon figuration. By identifying involved operators, the co-ordination algorithm can apply to only those involved but not others such that the evaluation can continue while modifying the QEP <ref> [16] </ref>. Second, once all of an operator's producers come to their suspendable points, this operator is in a state where other reconfiguration actions on this operator can be performed, e.g., saving the buffered records, | there is no need to wait for all operators have been coordinated. <p> Learning Different from check-point operation, context learning builds up a UDF scratchpad context by processing records (Figure 3). We describe how the re-configurator uses the learning method in a reconfiguration of operator replacement as follows. The extension to other forms of reconfiguration is straightforward and can be found in <ref> [16] </ref>. To replace operator instance M , a new operator instance N , which is semantically equivalent to M , is created. Once the coordination algorithm is complete, N is connected to the producers and the consumers to which M was connected.
Reference: [17] <author> P. Seshadri, M. Livny, and R. Ramakrishnan. </author> <title> The case for enhanced abstract data types. </title> <booktitle> In Proc. of VLDB, </booktitle> <year> 1997. </year>
Reference-contexts: Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization. User-Defined Functions are widely studied in recent years ([10], [9], [8], [18], <ref> [17] </ref>, [15], [13]). Yet most published work focuses on the optimization before the query evaluation. [13] studied the UDFs execution using data parallelism. It is interesting to compare our classification for reconfiguration to their classification for parallelization. Similar reasoning approaches were used.
Reference: [18] <author> P. Seshadri and M. Paskin. </author> <title> Predator: An OR-DBMS with Enhanced Data Types. </title> <booktitle> In Proc. of ACM SIGMOD, </booktitle> <year> 1997. </year>
Reference-contexts: Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization. User-Defined Functions are widely studied in recent years ([10], [9], [8], <ref> [18] </ref>, [17], [15], [13]). Yet most published work focuses on the optimization before the query evaluation. [13] studied the UDFs execution using data parallelism. It is interesting to compare our classification for reconfiguration to their classification for parallelization. Similar reasoning approaches were used.
Reference: [19] <author> E. Shek, R.R. Muntz, M. Mesrobian, and K. Ng. </author> <title> Scalable exploratory data mining of distributed geoscientific data. </title> <booktitle> In Proc. of CKDDM, </booktitle> <year> 1996. </year>
Reference: [20] <author> T. Urhan, M.J. Franklin, and L. Amsaleg. </author> <title> Cost-based query scrambling for initial delays. </title> <booktitle> In Proceedings of ACM SIGMOD, </booktitle> <year> 1998. </year>
Reference-contexts: We note that the plan search cost and configuration estimation cost are relatively fixed for all QEPs and reconfiguration forms. Keeping the plan modification cost as low as possible makes the dynamic recon-figuring QEPs more beneficial. 5. Related Work There is some related work in this area ([1], [14], <ref> [20] </ref>). Yet none of the existing work is completely satisfactory for our purposes | either only limited changes are allowed to QEPs or changes are restricted to built-in functions. <p> Lastly, intermediate results are materialized for plan modification in their work. This may not be practical in the case of the large volume data sets. Other methods for capturing/restoring execution context are desired. With intermediate results materialization, <ref> [20] </ref> proposed a two-phase algorithm (plan rescheduling and operator synthesis) to scramble a sub-optimal query plan due to data arrival delays from network. Compared to that, our work considers more generic cases and provides methods for context capturing and restoring other than intermediate results materialization.
Reference: [21] <author> S. Zhou, J. Wang, X. Zheng, and P. Delisle. </author> <title> Utopia: A load sharing facility for large, heterogeneous distributed computer systems. </title> <type> Technical Report CSRI-257, </type> <institution> U. of Toronto, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: In this paper, we focus our discussion on the operator coordination and state capture/restoration. 2.3. Reconfiguration Forms We consider the following forms of plan modification. Operator relocation re-assigns an operator instance from one processor to another. It is similar to process migration (e.g. Condor [2], Utopia <ref> [21] </ref>). The major difference is that the semantics of operators may be exploited in the context of data processing to more efficiently implement migration.
References-found: 21

