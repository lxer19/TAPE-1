URL: http://theory.lcs.mit.edu/tds/papers/Lynch/IC96.ps
Refering-URL: http://theory.lcs.mit.edu/tds/papers/Lynch/IC96.html
Root-URL: 
Email: lynch@theory.lcs.mit.edu  fritsv@cwi.nl  
Title: Forward and Backward Simulations Part II: Timing-Based Systems  
Author: Nancy Lynch Frits Vaandrager 
Date: April 26, 1995  
Address: Cambridge, MA 02139, USA  P.O. Box 94079, 1090 GB Amsterdam The Netherlands  
Affiliation: MIT Laboratory for Computer Science  CWI  
Abstract: A general automaton model for timing-based systems is presented and is used as the context for developing a variety of simulation proof techniques for such systems. These techniques include (1) refinements, (2) forward and backward simulations, (3) hybrid forward-backward and backward-forward simulations, and (4) history and prophecy relations. Relationships between the different types of simulations, as well as soundness and completeness results, are stated and proved. These results are (with one exception) analogous to the results for untimed systems in Part I of this paper. In fact, many of the results for the timed case are obtained as consequences of the analogous results for the untimed case. 1991 Mathematics Subject Classification: 68Q60, 68Q68. 1991 CR Categories: C.3, D.2.4, F.1.1, F.3.1. Keywords and Phrases: Timing-based systems, real-time, timed automata, trajectories, safety properties, verification, simulations, refinement mappings, forward simulations, backward simulations, forward-backward simulations, backward-forward simulations, history relations, prophecy relations, invariants. Notes: This work was supported by ONR contracts N00014-85-K-0168 and N00014-91-J-1988, by AFOSR-ONR contract F49620-94-1-0199, by NSF grants CCR-8915206 and 9225124-CCR, and by ARPA contracts N00014-89-J-1988 and N00014-92-J-4033. Part of this work took place while the second author was employed by the Ecole des Mines, CMA, Sophia Antipolis, France. The second author also received partial support from ESPRIT Basic Research Action 7166, CONCUR2. Earlier versions of this paper appeared as [42] (Part I+II) and as [43]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport. </author> <title> The existence of refinement mappings. </title> <journal> Theoretical Computer Science, </journal> <volume> 82(2) </volume> <pages> 253-284, </pages> <year> 1991. </year> <month> 44 </month>
Reference-contexts: A t iP C t Proof: Similar to the proof of Theorem 7.8, using timed backward simulations instead of timed forward simulations. We finish this subsection with a dual version of Sistla's completeness result [57] and variants of the completeness results of Abadi and Lamport <ref> [1] </ref>. Theorem 7.11 (Completeness of timed prophecy relations and timed forward simulations) A t P C t Proof: Analogous to the proof of Theorem 5.17 in Part I. Theorem 7.12 (Completeness of timed history/prophecy relations and refinements) Suppose A t flT B. <p> Then D is semi-timed, but not timed. Proof: One can easily check that D is semi-timed. However, it is not timed: D does not satisfy the trajectory axiom S2 because that would imply, for instance, that the interval <ref> [0; 1] </ref> of reals can be injectively mapped into the rationals. In the context of the present paper, there is no compelling technical reason why one should use S2 instead of S2 0 .
Reference: [2] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(5) </volume> <pages> 1543-1571, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., <ref> [7, 2, 9, 25, 48, 53, 61] </ref>, but still distinguishes our model from many others, e.g., [11, 17, 20, 50, 52, 55, 62]. <p> In models based on linear time semantics, however, internal (or stuttering) actions have largely been ignored. Abadi and Lamport <ref> [2] </ref> advocate the use of untimed trace inclusion (logical implication in TLA) as an implementation relation for timed systems. Although this "old-fashioned recipe" works in many practical cases, the two systems of Example 1.1, which can easily be translated to the state-based setting of [2], indicate that it cannot be used <p> Abadi and Lamport <ref> [2] </ref> advocate the use of untimed trace inclusion (logical implication in TLA) as an implementation relation for timed systems. Although this "old-fashioned recipe" works in many practical cases, the two systems of Example 1.1, which can easily be translated to the state-based setting of [2], indicate that it cannot be used in general, and that a serious effort is required to fully adapt existing formalisms for untimed systems to the timed setting. Simulation methods have long been used successfully for the verification of untimed concurrent systems. <p> Let p and p 0 be timed sequence pairs over K with p finite. Then define p p 0 to be the timed sequence pair (p:seq ffi; p:ltime +p 0 :ltime), where ffi is the modification of p 0 :seq obtained 2 This property is called nonZenoness in <ref> [2] </ref>. 10 by adding p:ltime to all the time components.
Reference: [3] <author> S. Aggarwal. </author> <title> Time optimal self-stabilizing spanning tree algorithms. </title> <type> Master's thesis, </type> <institution> MIT Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Some work on integrating live-ness into the present model appears in [16], and work on integrating probabilistic transitions appears in <ref> [39, 3, 56] </ref>. Both liveness and probabilities introduce their own sets of additional proof methods, e.g., temporal logic and Markov analysis. In [12], it has been shown how linear hybrid systems can be defined in terms of our timed automata.
Reference: [4] <author> R. Alur. </author> <title> Techniques for Automatic Verification of Real-time Systems. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1991. </year>
Reference-contexts: For convenience, we use R + as our domain of times in this paper. The need for dense-time models has been well discussed in <ref> [4] </ref>. However, for the purpose of generality we could have parameterized our timed automata by an arbitrary (possibly discrete) time domain in the sense of [27, 53, 28].
Reference: [5] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Oliv ero, J.Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: Lynch and Vaandrager [41] show how a whole class of process algebraic operators can be defined on timed automata using the general notion of action transducers. Bosscher, Polak and Vaandrager [12] define a language of linear hybrid systems, inspired by the work of <ref> [5, 8] </ref>, and provide it with a semantics in terms of timed automata. Our timed automata can also be used to define the semantics of the timed safety automata of Alur and Dill [7, 26].
Reference: [6] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algo rithmic approach to the specification and verification of hybrid systems. </title> <editor> In Grossman et al. </editor> <volume> [21], </volume> <pages> pages 209-229. </pages>
Reference-contexts: In such cases, each trajectory w is describable as a continuous function of time. Several models for hybrid systems <ref> [47, 6] </ref> include the assumption that trajectories are continuous. However, besides the model of this paper there are also models that do not include such an assumption [51], and in fact we do not need continuity of trajectories for our results.
Reference: [7] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., <ref> [7, 2, 9, 25, 48, 53, 61] </ref>, but still distinguishes our model from many others, e.g., [11, 17, 20, 50, 52, 55, 62]. <p> Our timed automata can also be used to define the semantics of the timed safety automata of Alur and Dill <ref> [7, 26] </ref>. In the latter model a finite state restriction is used in order to enable the use of effective model-checking methods, something which is of course not possible in our much more general model.
Reference: [8] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> In Proceedings of the 14th Annual IEEE Real-time Systems Symposium, </booktitle> <year> 1993. </year>
Reference-contexts: Lynch and Vaandrager [41] show how a whole class of process algebraic operators can be defined on timed automata using the general notion of action transducers. Bosscher, Polak and Vaandrager [12] define a language of linear hybrid systems, inspired by the work of <ref> [5, 8] </ref>, and provide it with a semantics in terms of timed automata. Our timed automata can also be used to define the semantics of the timed safety automata of Alur and Dill [7, 26].
Reference: [9] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Real time process algebra. </title> <journal> Journal of Formal Aspects of Computing Science, </journal> <volume> 3(2) </volume> <pages> 142-188, </pages> <year> 1991. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., <ref> [7, 2, 9, 25, 48, 53, 61] </ref>, but still distinguishes our model from many others, e.g., [11, 17, 20, 50, 52, 55, 62].
Reference: [10] <editor> J.C.M. Baeten and J.W. Klop, editors. </editor> <booktitle> Proceedings CONCUR 90, Amsterdam, volume 458 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [11] <author> G. Berry and L. Cosserat. </author> <title> The Esterel synchronous programming language and its mathematical semantics. In S.D. </title> <editor> Brookes, A.W. Roscoe, and G. Winskel, editors, </editor> <booktitle> Seminar on Concurrency, volume 197 of Lecture Notes in Computer Science, </booktitle> <pages> pages 389-448. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., [7, 2, 9, 25, 48, 53, 61], but still distinguishes our model from many others, e.g., <ref> [11, 17, 20, 50, 52, 55, 62] </ref>. The cost of this generality is that our timed automata may produce some annoying "Zeno executions", i.e., infinite executions in which the sum of the time-passage actions is bounded.
Reference: [12] <author> D.J.B. Bosscher, I. Polak, and F.W. Vaandrager. </author> <title> Verification of an audio control proto col. </title> <editor> In Langmaack et al. </editor> <volume> [33], </volume> <pages> pages 170-192. </pages> <note> Full version available as Report CS-R9445, </note> <institution> CWI, </institution> <address> Amsterdam, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> Lynch and Vaandrager [41] show how a whole class of process algebraic operators can be defined on timed automata using the general notion of action transducers. Bosscher, Polak and Vaandrager <ref> [12] </ref> define a language of linear hybrid systems, inspired by the work of [5, 8], and provide it with a semantics in terms of timed automata. Our timed automata can also be used to define the semantics of the timed safety automata of Alur and Dill [7, 26]. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples. <p> Some work on integrating live-ness into the present model appears in [16], and work on integrating probabilistic transitions appears in [39, 3, 56]. Both liveness and probabilities introduce their own sets of additional proof methods, e.g., temporal logic and Markov analysis. In <ref> [12] </ref>, it has been shown how linear hybrid systems can be defined in terms of our timed automata. It remains to develop the treatment of general hybrid systems, and to integrate all three extensions, with their proof tools, into a sensibly coordinated whole. <p> In our timed automaton model we do not require the axiom TD: we find it unnatural to allow for nondeterminism for discrete actions but not for time-passage actions. As pointed out in <ref> [12] </ref>, time nondeterministic timed automata arise naturally in the semantics of linear hybrid systems, for instance in the modelling of drifting clocks. Also, several of the constructions in this paper, like the f-power, b-power and superposition construction, introduce time nondeterminism.
Reference: [13] <editor> W.R. Cleaveland, editor. </editor> <booktitle> Proceedings CONCUR 92, </booktitle> <address> Stony Brook, NY, USA, </address> <booktitle> volume 630 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [14] <author> J. Davies and S. Schneider. </author> <title> A brief history of Timed CSP. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 243-271, </pages> <year> 1995. </year>
Reference-contexts: Internal actions have received proper attention in the context of process algebras based on bisimulation or failures, and thus the two systems of Example 1.1 are identified in the approaches of (for instance) <ref> [30, 55, 14] </ref>. In models based on linear time semantics, however, internal (or stuttering) actions have largely been ignored. Abadi and Lamport [2] advocate the use of untimed trace inclusion (logical implication in TLA) as an implementation relation for timed systems.
Reference: [15] <editor> J.W. de Bakker, C. Huizing, W.P. de Roever, and G. Rozenberg, editors. </editor> <booktitle> Proceedings REX Workshop on Real-Time: Theory in Practice, Mook, </booktitle> <address> The Netherlands, </address> <month> June </month> <year> 1991, </year> <booktitle> volume 600 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <month> 45 </month>
Reference: [16] <author> R. Gawlick, R. Segala, J.F. Stgaard-Andersen, and N. Lynch. </author> <title> Liveness in timed and untimed systems. </title> <editor> In S. Abiteboul and E. Shamir, editors, </editor> <booktitle> Proceedings 21 th ICALP, Jerusalem, volume 820 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> A full version appears as MIT Technical Report number MIT/LCS/TR-587. </note>
Reference-contexts: Second, as the infinite behaviors, we take the admissible timed traces, each of which consists of a sequence of timed visible actions that occurs in some execution in which the time grows unboundedly (i.e., a "non-Zeno" infinite execution). In <ref> [16] </ref> it is argued that inclusion of finite and admissible timed traces is a good notion of implementation, provided that the implementation automaton has a sufficiently rich collection of admissible executions. <p> A similar reduction is not possible in untimed models that incorporate fairness. One could extend the timed automaton model presented here by adding other liveness properties. Such an extended model is defined, and its properties explored, in <ref> [32, 58, 16] </ref>. In [32; 58], the extended model is also applied to substantial communication examples. Zeno timed executions are a technical anomaly; they represent an infinite amount of activity occurring in a finite amount of time, which is (we believe) impossible in reality. <p> Some work on integrating live-ness into the present model appears in <ref> [16] </ref>, and work on integrating probabilistic transitions appears in [39, 3, 56]. Both liveness and probabilities introduce their own sets of additional proof methods, e.g., temporal logic and Markov analysis. In [12], it has been shown how linear hybrid systems can be defined in terms of our timed automata.
Reference: [17] <author> R. Gerber and I. Lee. </author> <title> The formal treatment of priorities in real-time computation. </title> <booktitle> In Proceedings 6th IEEE Workshop on Real-Time Software and Operating Systems, </booktitle> <year> 1989. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., [7, 2, 9, 25, 48, 53, 61], but still distinguishes our model from many others, e.g., <ref> [11, 17, 20, 50, 52, 55, 62] </ref>. The cost of this generality is that our timed automata may produce some annoying "Zeno executions", i.e., infinite executions in which the sum of the time-passage actions is bounded.
Reference: [18] <author> R.J. van Glabbeek. </author> <title> Comparative Concurrency Semantics and Refinement of Actions. </title> <type> PhD thesis, </type> <institution> Free University, </institution> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Moreover, since they also play a central role in the "comparative semantics" of untimed discrete event systems <ref> [18] </ref>, they provide a basis for comparing timed and untimed formalisms. In this paper, we define a formal transition system model for timing-based systems and use it to develop a variety of simulation proof techniques.
Reference: [19] <author> W.O.D. Griffioen. </author> <title> Proof-checking an audio control protocol with LP. </title> <type> Report CS R95XX, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: In this way, the power of simulation techniques seems to be much greater in the timed setting than in the untimed setting. Also, the systems verified are typically parameterized by arbitrary parameters representing process speeds, message delivery times, clock rates, etc., so that the results are very general. In <ref> [35, 19] </ref>, three of the proofs are automated using the Larch Prover [22].
Reference: [20] <author> J.F. Groote. </author> <title> Specification and verification of real time systems in ACP. </title> <type> Report CS R9015, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1990. </year> <note> An extended abstract appeared in L. </note> <editor> Logrippo, R.L. Probert and H. Ural, editors, </editor> <title> Protocol Specification, Testing and Verification, X, </title> <booktitle> Ot-tawa, </booktitle> <pages> Canada pages 261-274, </pages> <year> 1990. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., [7, 2, 9, 25, 48, 53, 61], but still distinguishes our model from many others, e.g., <ref> [11, 17, 20, 50, 52, 55, 62] </ref>. The cost of this generality is that our timed automata may produce some annoying "Zeno executions", i.e., infinite executions in which the sum of the time-passage actions is bounded.
Reference: [21] <editor> R.L. Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors. </editor> <booktitle> Hybrid Systems, volume 736 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Also, the appealing local characterisation of t-forests of Lemma 3.4 does not hold for t-forests as defined in [42]. Trajectories play a vital role in the theory of hybrid systems <ref> [21] </ref>.
Reference: [22] <author> J.V. Guttag and J.J. Horning. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Also, the systems verified are typically parameterized by arbitrary parameters representing process speeds, message delivery times, clock rates, etc., so that the results are very general. In [35, 19], three of the proofs are automated using the Larch Prover <ref> [22] </ref>.
Reference: [23] <author> C. Heitmeyer and N.A. Lynch. </author> <title> The generalized railroad crossing | a case study in formal verification of real-time systems. </title> <booktitle> In Proceedings 15th IEEE Real-Time Systems Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <pages> pages 120-131, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [24] <author> T.A. Henzinger. </author> <title> Sooner is safer than later. </title> <journal> Information Processing Letters, </journal> <volume> 43 </volume> <pages> 135-141, </pages> <year> 1992. </year>
Reference-contexts: The absence of liveness considerations makes our model simpler; moreover, we do not lose much power because many properties of practical interest for timing-based systems can be expressed as safety properties, given the admissibility assumption that time increases without bound (cf. <ref> [24] </ref>). Lynch and Attiya [38] also extend simulation techniques to timing-based systems. That work, however, only considers forward simulations. The extra task structure of the model of Lynch and Attiya supports the development of a useful progress measure proof method, which we do not develop here.
Reference: [25] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Timed transition systems. </title> <editor> In de Bakker et al. </editor> <volume> [15], </volume> <pages> pages 226-251. </pages>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., <ref> [7, 2, 9, 25, 48, 53, 61] </ref>, but still distinguishes our model from many others, e.g., [11, 17, 20, 50, 52, 55, 62].
Reference: [26] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111 </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: Our timed automata can also be used to define the semantics of the timed safety automata of Alur and Dill <ref> [7, 26] </ref>. In the latter model a finite state restriction is used in order to enable the use of effective model-checking methods, something which is of course not possible in our much more general model.
Reference: [27] <author> A. Jeffrey. </author> <title> A linear time process algebra. </title> <editor> In K.G. Larsen and A. Skou, editors, </editor> <booktitle> Pro ceedings of the 3rd International Workshop on Computer Aided Verification, Aalborg, Denmark, volume 575 of Lecture Notes in Computer Science, </booktitle> <pages> pages 432-442. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: For convenience, we use R + as our domain of times in this paper. The need for dense-time models has been well discussed in [4]. However, for the purpose of generality we could have parameterized our timed automata by an arbitrary (possibly discrete) time domain in the sense of <ref> [27, 53, 28] </ref>. <p> In this paper, we have chosen elements of the set R 0 of nonnegative real numbers as time-passage actions for timed automata. Instead, we could have proved all our results for automata parametrized with an arbitrary time domain as in <ref> [27, 53, 28] </ref>. <p> Axiom T5 implies that is total on each interval. This last axiom does not occur in <ref> [27, 53, 28] </ref>, but we fail to have a clear intuition about trajectories without it. Examples of time domains are the nonnegative reals, rationals and integers with addition and 0, but also the sets of finite sequences with concatenation and the empty sequence.
Reference: [28] <author> A.S.A. Jeffrey, S.A. Schneider, and F.W. Vaandrager. </author> <title> A comparison of additivity axioms in timed transition systems. </title> <type> Report CS-R9366, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: For convenience, we use R + as our domain of times in this paper. The need for dense-time models has been well discussed in [4]. However, for the purpose of generality we could have parameterized our timed automata by an arbitrary (possibly discrete) time domain in the sense of <ref> [27, 53, 28] </ref>. <p> A Other Axioms for Timed Automata We consider the relationship between axioms S2 and S2 0 , as defined in Section 2.1. The relationship between the two axioms is also investigated in <ref> [28] </ref>. Define a semi-timed automaton to be a timed automaton, except that it does not have to satisfy S2, but only the weaker (and simpler) axiom S2 0 . It is immediate from the definition of a trajectory that each timed automaton is semi-timed. <p> In this paper, we have chosen elements of the set R 0 of nonnegative real numbers as time-passage actions for timed automata. Instead, we could have proved all our results for automata parametrized with an arbitrary time domain as in <ref> [27, 53, 28] </ref>. <p> Axiom T5 implies that is total on each interval. This last axiom does not occur in <ref> [27, 53, 28] </ref>, but we fail to have a clear intuition about trajectories without it. Examples of time domains are the nonnegative reals, rationals and integers with addition and 0, but also the sets of finite sequences with concatenation and the empty sequence.
Reference: [29] <author> N. Klarlund and F.B. Schneider. </author> <title> Proving nondeterministically specified safety properties using progress measures. </title> <journal> Information and Computation, </journal> <volume> 107(1) </volume> <pages> 151-170, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: untimed systems to the timed setting. (c) The unified presentation of all the simulation techniques together with their basic soundness and completeness properties. (d) The presentation of many auxiliary definitions and results, for instance about sampling of computations, timed forests, timed unfolding, a timed version of the historization construction of <ref> [29] </ref>, etc. (e) The fact that our presentation parallels, and is based closely on, a similar development for untimed systems. The rest of the paper is organized as follows. Section 2 contains the definitions for timed automata and their executions and traces. <p> In order to prove these results, we use variants of the classic subset construction from automata theory, and a variant of the dual historization construction of Klarlund and Schneider <ref> [29] </ref>.
Reference: [30] <author> A.S. Klusener. </author> <title> The silent step in time. </title> <booktitle> In Cleaveland [13], </booktitle> <pages> pages 421-435. </pages>
Reference-contexts: Internal actions have received proper attention in the context of process algebras based on bisimulation or failures, and thus the two systems of Example 1.1 are identified in the approaches of (for instance) <ref> [30, 55, 14] </ref>. In models based on linear time semantics, however, internal (or stuttering) actions have largely been ignored. Abadi and Lamport [2] advocate the use of untimed trace inclusion (logical implication in TLA) as an implementation relation for timed systems.
Reference: [31] <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <journal> ACM Transactions on Programming Lan guages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Similarly, we denote by t-execs fl (A), t-execs 1 (A) and t-execs (A) the sets of finite, admissible and all timed executions of A. The notion of admissibility is the only notion of liveness that we include in our model. Many untimed automaton models (e.g., <ref> [40, 46, 31] </ref>) include facilities for describing rich classes of liveness properties, for example, various notions of fairness. In the timed setting, it is often possible to replace liveness notions with corresponding timing restrictions.
Reference: [32] <author> B.W. Lampson, N.A. Lynch, and J.F. Stgaard-Andersen. </author> <title> Correctness of at-most-once message delivery protocols. </title> <booktitle> In FORTE'93 Sixth International Conference on Formal Description Techniques, </booktitle> <address> Boston, MA, </address> <month> October </month> <year> 1993, </year> <pages> pages 387-402, </pages> <year> 1993. </year>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> A similar reduction is not possible in untimed models that incorporate fairness. One could extend the timed automaton model presented here by adding other liveness properties. Such an extended model is defined, and its properties explored, in <ref> [32, 58, 16] </ref>. In [32; 58], the extended model is also applied to substantial communication examples. Zeno timed executions are a technical anomaly; they represent an infinite amount of activity occurring in a finite amount of time, which is (we believe) impossible in reality. <p> A similar reduction is not possible in untimed models that incorporate fairness. One could extend the timed automaton model presented here by adding other liveness properties. Such an extended model is defined, and its properties explored, in [32, 58, 16]. In <ref> [32; 58] </ref>, the extended model is also applied to substantial communication examples. Zeno timed executions are a technical anomaly; they represent an infinite amount of activity occurring in a finite amount of time, which is (we believe) impossible in reality. Nevertheless, our definition of timed automata does admit Zeno executions. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples. <p> More work is needed in applying timed simulations to additional practical verification examples. In particular, nearly all of the examples that have been carried out so far involve refinements, forward simulations and history variables. Only <ref> [58, 32] </ref> involve backward simulations and combinations of forward and backward simulations.
Reference: [33] <editor> H. Langmaack, W.-P. de Roever, and J. Vytopil, editors. </editor> <booktitle> Proceedings of the Third International School and Symposium on Formal Techniques in Real Time and Fault Tolerant Systems, Lubeck, </booktitle> <address> Germany, </address> <month> September </month> <year> 1994, </year> <booktitle> volume 863 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [34] <author> V. Luchangco. </author> <title> Using simulation techiniques to prove timing properties. </title> <type> Master's thesis, </type> <institution> MIT Electrical Engineering and Computer Science, </institution> <year> 1994. </year>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [35] <author> V. Luchangco, E. Soylemez, S. Garland, and N.A. Lynch. </author> <title> Verifying timing properties of concurrent algorithms. </title> <booktitle> In Proceedings of the Seventh International Conference on Formal Description Techniques for Distributed Systems and Communications Protocols, </booktitle> <pages> pages 239-259, </pages> <address> Berne, Switzerland, </address> <month> October </month> <year> 1994. </year> <booktitle> IFIP WG6.1, </booktitle> <publisher> Elsevier Science Publishers B. V. </publisher> <address> (North Holland). </address> <note> Preliminary version. Final version to be published by Chapman and Hall. </note>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> In this way, the power of simulation techniques seems to be much greater in the timed setting than in the untimed setting. Also, the systems verified are typically parameterized by arbitrary parameters representing process speeds, message delivery times, clock rates, etc., so that the results are very general. In <ref> [35, 19] </ref>, three of the proofs are automated using the Larch Prover [22]. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [36] <author> N.A. Lynch. </author> <title> Simulation techniques for proving properties of real-time systems. </title> <editor> In J.W. de Bakker, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proceedings REX School/Symposium: A Decade of Concurrency, </booktitle> <address> Noordwijkerhout, The Netherlands, </address> <month> June </month> <year> 1993, </year> <booktitle> volume 803 of Lecture Notes in Computer Science, </booktitle> <pages> pages 375-424. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [37] <author> N.A. Lynch. </author> <title> Distributed Algorithms. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [38] <author> N.A. Lynch and H. Attiya. </author> <title> Using mappings to prove timing properties. </title> <journal> Distributed Computing, </journal> <volume> 6(2) </volume> <pages> 121-139, </pages> <year> 1992. </year>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> This approach is analogous to that followed for Milner's CCS [49] where the problem of establishing a weak bisimulation is reduced to the problem of finding a strong bisimulation. Another example of this approach appears in <ref> [38] </ref>, where the problem of showing inclusion of timed behaviors of certain kinds of timed automata is reduced to that of proving inclusion between sets of admissible behaviors of certain derived I/O automata. However, this is not the approach we emphasize in this paper. <p> Our notion of timed automaton is related to the models of Merritt, Modugno and Tuttle [48] and of Lynch and Attiya <ref> [38] </ref>. However, these models have more structure than ours, since they assume that the system being modelled is describable in terms of a collection of separate tasks, each with associated upper and lower bounds on its speed. <p> The absence of liveness considerations makes our model simpler; moreover, we do not lose much power because many properties of practical interest for timing-based systems can be expressed as safety properties, given the admissibility assumption that time increases without bound (cf. [24]). Lynch and Attiya <ref> [38] </ref> also extend simulation techniques to timing-based systems. That work, however, only considers forward simulations. The extra task structure of the model of Lynch and Attiya supports the development of a useful progress measure proof method, which we do not develop here. <p> That work, however, only considers forward simulations. The extra task structure of the model of Lynch and Attiya supports the development of a useful progress measure proof method, which we do not develop here. On the other hand, the basic theorems about forward simulations that appear in <ref> [38] </ref> are stated in a setting that has more structure than is really necessary for those theorems. Lynch and Vaandrager [41] show how a whole class of process algebraic operators can be defined on timed automata using the general notion of action transducers. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [39] <author> N.A. Lynch, I. Saias, and R. Segala. </author> <title> Proving time bounds for randomized distributed algorithms. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on the Principles of Distributed Computing, </booktitle> <pages> pages 314-323, </pages> <address> Los Angeles, CA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Some work on integrating live-ness into the present model appears in [16], and work on integrating probabilistic transitions appears in <ref> [39, 3, 56] </ref>. Both liveness and probabilities introduce their own sets of additional proof methods, e.g., temporal logic and Markov analysis. In [12], it has been shown how linear hybrid systems can be defined in terms of our timed automata.
Reference: [40] <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the 6 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151, </pages> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: Similarly, we denote by t-execs fl (A), t-execs 1 (A) and t-execs (A) the sets of finite, admissible and all timed executions of A. The notion of admissibility is the only notion of liveness that we include in our model. Many untimed automaton models (e.g., <ref> [40, 46, 31] </ref>) include facilities for describing rich classes of liveness properties, for example, various notions of fairness. In the timed setting, it is often possible to replace liveness notions with corresponding timing restrictions. <p> These can be expressed by restrictions on time-passage steps, so they do not require any special machinery. The notion of admissibility is in some sense more tractable mathematically than some other liveness notions, e.g., the notion of a "fair execution" in the I/O automaton model <ref> [40] </ref>. This is because the admissible timed executions of a timed automaton can be expressed as the limits of infinite sequences of finite timed executions.
Reference: [41] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Action transducers and timed automata. </title> <booktitle> In Cleave land [13], </booktitle> <pages> pages 436-455. </pages> <note> Full version available as CWI Report CS-R9460, </note> <institution> Amsterdam, </institution> <month> November </month> <year> 1994, </year> <note> and as Technical Memo MIT/LCS/TM-480.b, </note> <institution> MIT LCS, </institution> <address> Cambridge, MA, </address> <month> October </month> <year> 1994. </year> <month> 47 </month>
Reference-contexts: One can turn the automata from this counterexample into feasible timed automata via the patient construction of <ref> [41] </ref>. <p> In order to show that all the inclusions are strict, one can use essentially the same counterexamples as in the untimed setting. Again one can turn these untimed counterexamples into feasible timed automata via the patient construction of <ref> [41] </ref>, i.e., by introducing arbitrary time delays at each state by attaching, for each d, steps s d ! s to each state s. We close this section with three more results that are derived from the analogous results for the untimed case using the correspondences. <p> On the other hand, the basic theorems about forward simulations that appear in [38] are stated in a setting that has more structure than is really necessary for those theorems. Lynch and Vaandrager <ref> [41] </ref> show how a whole class of process algebraic operators can be defined on timed automata using the general notion of action transducers. <p> These methods are usable individually or in combination. It remains to further develop the various proof methods for timed automata. In particular, we are interested in extending the methods of process algebra to our timed automaton model. Our paper <ref> [41] </ref> contains the beginning of such work, including definitions of interesting operators on timed automata, and proofs of substitutivity results for the 39 timed trace semantics, but it remains to provide useful algebraic laws for reasoning about the operators.
Reference: [42] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. </title> <editor> In de Bakker et al. </editor> <volume> [15], </volume> <pages> pages 397-446. </pages>
Reference-contexts: However, we would like to distinguish the discrete action t from the time-passage action 0, both for conceptual and technical reasons: the definitions of several process algebraic operations on timed automata, as discussed in <ref> [42] </ref>, become much more involved if t 's are treated as time-passage actions. 6 In the modelling of hybrid systems, trajectories are often used to describe the evolution of physical parameters such as position, velocity, acceleration, temperature, and pressure. <p> However, besides the model of this paper there are also models that do not include such an assumption [51], and in fact we do not need continuity of trajectories for our results. Axiom S2 is a strengthening of a similar axiom proposed by Wang [61] and used in <ref> [42, 53] </ref>, which, rephrased in our terminology, reads: S2 0 If s 0 d ! s and 0 &lt; d 0 &lt; d, then there is an s 00 such that s 0 d 0 ! s 00 and s 00 dd 0 The stronger condition seems natural to us | <p> In fact, in an earlier version of this paper (<ref> [42] </ref>) we have developed a 42 theory of simulations for semi-timed automata. However, we find the theory for semi-timed automata less natural. For instance, the semi-timed automaton D of Theorem A.3 is a t-forest according to the definitions of [42], which is strange since an execution that ends in (1; 1) may pass through state ( 1 2 ; 1 3 ) or through state ( 1 2 ; 2 3 ), but not through both. <p> Also, the appealing local characterisation of t-forests of Lemma 3.4 does not hold for t-forests as defined in <ref> [42] </ref>. Trajectories play a vital role in the theory of hybrid systems [21].
Reference: [43] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations part II: Timing based systems. </title> <type> Report CS-R9314, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <month> March </month> <year> 1993. </year> <note> Also, </note> <institution> MIT/LCS/TM-487.b, Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cam-bridge, MA. </address>
Reference-contexts: Most choices either lead to longer proofs (see for instance an earlier version of this paper <ref> [43] </ref> in which time-passage was represented absolutely) or do not yield all the properties in this paper. Our notion of timed automaton is related to the models of Merritt, Modugno and Tuttle [48] and of Lynch and Attiya [38].
Reference: [44] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations part I: </title> <journal> Untimed systems. </journal> <note> Technical Memo MIT/LCS/TM-486.b (new version of TM-486), </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technolog, </institution> <address> Cambridge, MA, </address> <month> August </month> <year> 1994. </year> <note> To appear in Information and Computation. </note>
Reference-contexts: Simulation methods have long been used successfully for the verification of untimed concurrent systems. In Part I of this paper <ref> [44] </ref>, we gave a unified, comprehensive presentation of simulation techniques for untimed systems, including refinements, forward simulations, backward simulations, forward-backward and backward-forward simulations, history and prophecy relations. We showed relationships among the different types of simulations and soundness and completeness theorems. <p> Finally, Section 9 contains some conclusions. Appendix A contains a discussion of some alternative axioms for timed automata, and Appendix B gives a glossary of notational conventions that we use. Because of the strong dependence of this paper on Part I <ref> [44] </ref>, we have not tried to write this paper in a self-contained manner. Thus, we employ freely the notation and definitions of Part I, and refer in many places to the results from Part I. 2 Timed Automata and Their Behaviors In this section, we present the timed automaton model. <p> A timed execution includes information about discrete changes to the automaton's state, plus information about the evolution of the state as time passes continuously. Since timed automata are a special case of the (untimed) automata defined in Part I of this paper <ref> [44] </ref>, the notions of "execution" and "trace" for untimed automata also make sense for timed automata. <p> These include timed refinements, timed forward and backward simulations and combinations thereof, and timed history and prophecy relations. These techniques are analogous to those described in Part I, <ref> [44] </ref>, for untimed systems. As in that paper, we present basic results for all of the 38 simulations, including soundness and completeness results. The development is organized so that the proofs are based on the results of Part I. <p> Acknowledgements We thank the referees, Alan Jeffrey, David Griffioen, Albert Meyer, Jeff Sanders, Roberto Segala, Steve Schneider, Jtrgen Stgaard-Andersen, Eugene Stark and George Varghese for their valuable criticism and useful comments on this paper and on <ref> [44] </ref>. We also thank the organizers of the 1991 REX Workshop for providing the environment for an active research interchange that led to many improvements in our work. A Other Axioms for Timed Automata We consider the relationship between axioms S2 and S2 0 , as defined in Section 2.1.
Reference: [45] <author> N.A. Lynch and H.B. Weinberg. </author> <title> Proving correctness of a vehicle maneuver: </title> <address> Decelera tion, </address> <month> June </month> <year> 1995. </year> <booktitle> In Proceedings Second European Workshop on Real-Time and Hybrid Systems, </booktitle> <address> Grenoble, France. </address> <note> To appear. </note>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [46] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Similarly, we denote by t-execs fl (A), t-execs 1 (A) and t-execs (A) the sets of finite, admissible and all timed executions of A. The notion of admissibility is the only notion of liveness that we include in our model. Many untimed automaton models (e.g., <ref> [40, 46, 31] </ref>) include facilities for describing rich classes of liveness properties, for example, various notions of fairness. In the timed setting, it is often possible to replace liveness notions with corresponding timing restrictions.
Reference: [47] <author> Z. Manna and A. Pnueli. </author> <title> Verifying hybrid systems. </title> <editor> In Grossman et al. </editor> <volume> [21], </volume> <pages> pages 4-35. </pages>
Reference-contexts: In such cases, each trajectory w is describable as a continuous function of time. Several models for hybrid systems <ref> [47, 6] </ref> include the assumption that trajectories are continuous. However, besides the model of this paper there are also models that do not include such an assumption [51], and in fact we do not need continuity of trajectories for our results. <p> We define the first state of W , W:fstate, to be w 0 :fstate. A timed execution is a timed execution fragment W for which W:fstate is a start state. Note that the super-dense computations of <ref> [47] </ref> correspond closely to our timed executions. 2.2.2 Finite, Admissible and Zeno Timed Executions In this paper, we will be interested in certain subclasses of the set of timed executions: the finite, admissible and Zeno timed executions.
Reference: [48] <author> M. Merritt, F. Modugno, and M. Tuttle. </author> <title> Time constrained automata. </title> <editor> In J.C.M. Baeten and J.F. Groote, editors, </editor> <booktitle> Proceedings CONCUR 91, Amsterdam, volume 527 of Lecture Notes in Computer Science, </booktitle> <pages> pages 408-423. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., <ref> [7, 2, 9, 25, 48, 53, 61] </ref>, but still distinguishes our model from many others, e.g., [11, 17, 20, 50, 52, 55, 62]. <p> Most choices either lead to longer proofs (see for instance an earlier version of this paper [43] in which time-passage was represented absolutely) or do not yield all the properties in this paper. Our notion of timed automaton is related to the models of Merritt, Modugno and Tuttle <ref> [48] </ref> and of Lynch and Attiya [38]. However, these models have more structure than ours, since they assume that the system being modelled is describable in terms of a collection of separate tasks, each with associated upper and lower bounds on its speed. Also, the model of [48] includes treatment of <p> Modugno and Tuttle <ref> [48] </ref> and of Lynch and Attiya [38]. However, these models have more structure than ours, since they assume that the system being modelled is describable in terms of a collection of separate tasks, each with associated upper and lower bounds on its speed. Also, the model of [48] includes treatment of liveness, whereas our model does not.
Reference: [49] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, </address> <year> 1989. </year>
Reference-contexts: Similarly, Corollary 6.10 provides a method for proving that all the timed traces of A are included among those of B, in case B has t-fin. This approach is analogous to that followed for Milner's CCS <ref> [49] </ref> where the problem of establishing a weak bisimulation is reduced to the problem of finding a strong bisimulation.
Reference: [50] <author> F. Moller and C. Tofts. </author> <title> A temporal calculus of communicating systems. </title> <booktitle> In Baeten and Klop [10], </booktitle> <pages> pages 401-415. </pages>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., [7, 2, 9, 25, 48, 53, 61], but still distinguishes our model from many others, e.g., <ref> [11, 17, 20, 50, 52, 55, 62] </ref>. The cost of this generality is that our timed automata may produce some annoying "Zeno executions", i.e., infinite executions in which the sum of the time-passage actions is bounded.
Reference: [51] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. </title> <editor> In Grossman et al. </editor> <volume> [21], </volume> <pages> pages 149-178. </pages>
Reference-contexts: In such cases, each trajectory w is describable as a continuous function of time. Several models for hybrid systems [47, 6] include the assumption that trajectories are continuous. However, besides the model of this paper there are also models that do not include such an assumption <ref> [51] </ref>, and in fact we do not need continuity of trajectories for our results.
Reference: [52] <author> X. Nicollin, J.-L. Richier, J. Sifakis, and J. Voiron. </author> <title> ATP: An algebra for timed processes. </title> <editor> In M. Broy and C.B. Jones, editors, </editor> <booktitle> Proceedings IFIP TC2 Working Conference on Programming Concepts and Methods, Sea of Gallilea, Israel, </booktitle> <pages> pages 402-429, </pages> <year> 1990. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., [7, 2, 9, 25, 48, 53, 61], but still distinguishes our model from many others, e.g., <ref> [11, 17, 20, 50, 52, 55, 62] </ref>. The cost of this generality is that our timed automata may produce some annoying "Zeno executions", i.e., infinite executions in which the sum of the time-passage actions is bounded.
Reference: [53] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> From ATP to timed graphs and hybrid systems. </title> <journal> Acta Informatica, </journal> <volume> 30(2) </volume> <pages> 181-202, </pages> <year> 1993. </year>
Reference-contexts: For convenience, we use R + as our domain of times in this paper. The need for dense-time models has been well discussed in [4]. However, for the purpose of generality we could have parameterized our timed automata by an arbitrary (possibly discrete) time domain in the sense of <ref> [27, 53, 28] </ref>. <p> We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., <ref> [7, 2, 9, 25, 48, 53, 61] </ref>, but still distinguishes our model from many others, e.g., [11, 17, 20, 50, 52, 55, 62]. <p> However, besides the model of this paper there are also models that do not include such an assumption [51], and in fact we do not need continuity of trajectories for our results. Axiom S2 is a strengthening of a similar axiom proposed by Wang [61] and used in <ref> [42, 53] </ref>, which, rephrased in our terminology, reads: S2 0 If s 0 d ! s and 0 &lt; d 0 &lt; d, then there is an s 00 such that s 0 d 0 ! s 00 and s 00 dd 0 The stronger condition seems natural to us | <p> In this paper, we have chosen elements of the set R 0 of nonnegative real numbers as time-passage actions for timed automata. Instead, we could have proved all our results for automata parametrized with an arbitrary time domain as in <ref> [27, 53, 28] </ref>. <p> Axiom T5 implies that is total on each interval. This last axiom does not occur in <ref> [27, 53, 28] </ref>, but we fail to have a clear intuition about trajectories without it. Examples of time domains are the nonnegative reals, rationals and integers with addition and 0, but also the sets of finite sequences with concatenation and the empty sequence.
Reference: [54] <author> A. Pnueli. </author> <title> Development of hybrid systems. </title> <editor> In Langmaack et al. </editor> <volume> [33], </volume> <pages> pages 77-85. </pages>
Reference: [55] <author> G.M. Reed and A.W. Roscoe. </author> <title> A timed model for communicating sequential processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 58 </volume> <pages> 249-261, </pages> <year> 1988. </year>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., [7, 2, 9, 25, 48, 53, 61], but still distinguishes our model from many others, e.g., <ref> [11, 17, 20, 50, 52, 55, 62] </ref>. The cost of this generality is that our timed automata may produce some annoying "Zeno executions", i.e., infinite executions in which the sum of the time-passage actions is bounded. <p> Internal actions have received proper attention in the context of process algebras based on bisimulation or failures, and thus the two systems of Example 1.1 are identified in the approaches of (for instance) <ref> [30, 55, 14] </ref>. In models based on linear time semantics, however, internal (or stuttering) actions have largely been ignored. Abadi and Lamport [2] advocate the use of untimed trace inclusion (logical implication in TLA) as an implementation relation for timed systems.
Reference: [56] <author> R. Segala. </author> <title> Modeling and Verification of Randomized Distributed Real-Time Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachu-setts Institute of Technology, </institution> <year> 1995. </year> <booktitle> In progress. </booktitle> <pages> 48 </pages>
Reference-contexts: Some work on integrating live-ness into the present model appears in [16], and work on integrating probabilistic transitions appears in <ref> [39, 3, 56] </ref>. Both liveness and probabilities introduce their own sets of additional proof methods, e.g., temporal logic and Markov analysis. In [12], it has been shown how linear hybrid systems can be defined in terms of our timed automata.
Reference: [57] <author> A.P. Sistla. </author> <title> Proving correctness with respect to nondeterministic safety specifications. </title> <journal> Information Processing Letters, </journal> <volume> 39(1) </volume> <pages> 45-49, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Thus, :lstate 1 is a timed history relation from A to t-unfold (A). We are now in a position to prove a timed version of Sistla's <ref> [57] </ref> completeness result. Theorem 7.7 (Completeness of timed history relations and timed backward simulations) Suppose A t flT B. <p> Theorem 7.10 1. A t P C t 35 2. A t iP C t Proof: Similar to the proof of Theorem 7.8, using timed backward simulations instead of timed forward simulations. We finish this subsection with a dual version of Sistla's completeness result <ref> [57] </ref> and variants of the completeness results of Abadi and Lamport [1]. Theorem 7.11 (Completeness of timed prophecy relations and timed forward simulations) A t P C t Proof: Analogous to the proof of Theorem 5.17 in Part I.
Reference: [58] <author> J. Stgaard-Andersen. </author> <title> Correctness of Protocols in Distributed Systems. </title> <type> PhD thesis, </type> <institution> Technical University of Denmark, Lyngby, Denmark, </institution> <month> December </month> <year> 1993. </year> <note> ID-TR: 1993-131. Also, [59]. </note>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> A similar reduction is not possible in untimed models that incorporate fairness. One could extend the timed automaton model presented here by adding other liveness properties. Such an extended model is defined, and its properties explored, in <ref> [32, 58, 16] </ref>. In [32; 58], the extended model is also applied to substantial communication examples. Zeno timed executions are a technical anomaly; they represent an infinite amount of activity occurring in a finite amount of time, which is (we believe) impossible in reality. <p> A similar reduction is not possible in untimed models that incorporate fairness. One could extend the timed automaton model presented here by adding other liveness properties. Such an extended model is defined, and its properties explored, in [32, 58, 16]. In <ref> [32; 58] </ref>, the extended model is also applied to substantial communication examples. Zeno timed executions are a technical anomaly; they represent an infinite amount of activity occurring in a finite amount of time, which is (we believe) impossible in reality. Nevertheless, our definition of timed automata does admit Zeno executions. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples. <p> More work is needed in applying timed simulations to additional practical verification examples. In particular, nearly all of the examples that have been carried out so far involve refinements, forward simulations and history variables. Only <ref> [58, 32] </ref> involve backward simulations and combinations of forward and backward simulations.
Reference: [59] <author> J.F. Stgaard-Andersen, B.W. Lampson, and N.A. Lynch. </author> <title> Correctness of communication protocols a case study. </title> <type> Technical Report MIT/LCS/TR-589, </type> <institution> Laboratory for Computer Science, MIT, </institution> <address> Cambridge, MA, </address> <month> November </month> <year> 1993. </year>
Reference: [60] <author> E. Soylemez. </author> <title> Automatic verification of the timing properties of MMT automata. </title> <type> Mas ter's thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: The problem to develop a theory of timed transition systems and timed simulations with analogues of all results of Part I is still open. This paper does not contain examples of verifications carried out using timed simulations. However, our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref>. <p> Our timed simulations have already been used extensively elsewhere <ref> [12, 23, 32, 34, 35, 36, 37, 38, 45, 58, 60] </ref> for verification of timed algorithms and systems. More work is needed in applying timed simulations to additional practical verification examples.
Reference: [61] <author> Wang Yi. </author> <title> Real-time behaviour of asynchronous agents. </title> <booktitle> In Baeten and Klop [10], </booktitle> <pages> pages 502-520. </pages>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., <ref> [7, 2, 9, 25, 48, 53, 61] </ref>, but still distinguishes our model from many others, e.g., [11, 17, 20, 50, 52, 55, 62]. <p> However, besides the model of this paper there are also models that do not include such an assumption [51], and in fact we do not need continuity of trajectories for our results. Axiom S2 is a strengthening of a similar axiom proposed by Wang <ref> [61] </ref> and used in [42, 53], which, rephrased in our terminology, reads: S2 0 If s 0 d ! s and 0 &lt; d 0 &lt; d, then there is an s 00 such that s 0 d 0 ! s 00 and s 00 dd 0 The stronger condition seems <p> It is immediate from the definition of a trajectory that each timed automaton is semi-timed. In this appendix, we consider the reverse implication. A.1 Time Determinism In the original paper <ref> [61] </ref> of Wang in which the axiom S2 0 is proposed, also the axiom of time determinacy is introduced. In our setting this axiom can be formulated as follows: TD If s d ! s 0 and s d ! s 00 , then s 0 = s 00 .
Reference: [62] <author> A. Zwarico. </author> <title> Timed Acceptance: An Algebra of Time Dependent Computing. </title> <type> PhD thesis, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <year> 1988. </year> <month> 49 </month>
Reference-contexts: We do not assume a general lower bound on the time between events, or an upper bound on the number of instantaneous actions; this choice is also made in e.g., [7, 2, 9, 25, 48, 53, 61], but still distinguishes our model from many others, e.g., <ref> [11, 17, 20, 50, 52, 55, 62] </ref>. The cost of this generality is that our timed automata may produce some annoying "Zeno executions", i.e., infinite executions in which the sum of the time-passage actions is bounded.
References-found: 62

