URL: http://bungee.cpsc.ucalgary.ca/Publications/simkit.ps
Refering-URL: http://bungee.cpsc.ucalgary.ca/Publications/telesim.html
Root-URL: 
Email: gomes,franks,unger,xiao@cpsc.ucalgary.ca  jcleary@waikato.ac.nz alan@jade.ab.ca  
Title: SimKit: A High Performance Logical Process Simulation Class Library in C++  
Author: F. Gomes, S. Franks, B. Unger and Z. Xiao J. Cleary A. Covington 
Address: 2500 University Drive N.W. Calgary, Alberta, Canada T2N 1N4  Private Bag 3105 1422 Kensington Road N.W. Hamilton Calgary, Alberta New Zealand Canada T2N 3P9  
Affiliation: Dept. of Computer Science The University of Calgary  University of Waikato Jade Simulations International Corporation  
Abstract: SimKit is a C++ class library that is designed for very fast discrete event simulation. SimKit presents a simple, elegant Logical Process View of simulation enabling both sequential and parallel execution without code changes to application models. The sequential executive performs well on a variety of UNIX platforms and facilitates debugging and testing. The parallel executive (WarpKit) is based on the Time Warp paradigm and supports efficient parallel execution on shared memory multiprocessor hardware such as the Silicon Graphics Power Challenge and the Sun Sparc-Server 1000/2000. This paper describes the design features of the SimKit System. A brief overview of the Logical Process Modeling View commonly used in Parallel Discrete Event Simulation (PDES) is presented. The SimKit classes are then introduced followed by a brief tutorial on how to build and simulate object oriented models using SimKit. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr88] <author> M. Abrams. </author> <title> The object library for parallel simulation (OLPS). </title> <editor> In M. A. Abrams, P. L. Haigh, and Comfort J. C., editors, </editor> <booktitle> Winter Simulation Conference Proceedings, </booktitle> <pages> pages 210-219, </pages> <address> San Diego, Califor-nia, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: A separate synchronization mechanism should be provided to support consistent shared variables in PDES [GF91, MH93]. 3 SimKit Design Philosophy A plethora of parallel simulation languages have appeared in the last decade, each with differing design considerations. The languages include Common Interface of OLPS <ref> [Abr88, Abr89] </ref>, Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [Abr89] <author> M. Abrams. </author> <title> A common interface for Chandy-Misra, Time-Warp, and sequential simulators. </title> <booktitle> In Winter Simulation Conference Proceedings, </booktitle> <address> Washington, D.C., </address> <month> December </month> <year> 1989. </year>
Reference-contexts: A separate synchronization mechanism should be provided to support consistent shared variables in PDES [GF91, MH93]. 3 SimKit Design Philosophy A plethora of parallel simulation languages have appeared in the last decade, each with differing design considerations. The languages include Common Interface of OLPS <ref> [Abr88, Abr89] </ref>, Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [AL90] <author> M. Abrams and G. Lomow. </author> <title> Issues in languages for parallel simulation. </title> <editor> In D. Nicol, editor, </editor> <booktitle> Proceedings of the 1990 SCS Multi-conference on Distributed Simulation, </booktitle> <volume> volume 22(2), </volume> <pages> pages 227-228, </pages> <address> San Diego, California, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: The major differences between these languages are their approach towards * programming paradigm employed and language constructs * underlying synchronization protocol and trans parency * modeling world view * run time configuration * determinism, and * efficiency The desired characteristics of a parallel simulation language <ref> [RA92, AL90] </ref> include Simplicity, Modularity, Portability, Transparency, Evolvability, Efficiency, Scalability, Determinism, and Generality. The primary goal of the SimKit System was to provide an event-oriented logical process modeling interface that facilitates the effortless building of application models for sequential and parallel simulation with high performance execution capabilities.
Reference: [BL90] <author> R. Bagrodia and W.T. Liao. Maisie: </author> <title> A language and optimizing environment for distributed simulation. </title> <editor> In D. Nicol, editor, </editor> <booktitle> Proceedings of the 1990 SCS Multi-conference on Distributed Simulation, </booktitle> <volume> volume 22(2), </volume> <pages> pages 205-210, </pages> <address> San Diego, California, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: A separate synchronization mechanism should be provided to support consistent shared variables in PDES [GF91, MH93]. 3 SimKit Design Philosophy A plethora of parallel simulation languages have appeared in the last decade, each with differing design considerations. The languages include Common Interface of OLPS [Abr88, Abr89], Maisie <ref> [BL90] </ref>, ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [BLU90] <author> D. Baezner, G. Lomow, and B. Unger. </author> <title> Sim++: The transition to distributed simulation. </title> <editor> In D. Nicol, editor, </editor> <booktitle> Proceedings of the 1990 SCS Multiconfer-ence on Distributed Simulation, </booktitle> <volume> volume 22(2), </volume> <pages> pages 211-218, </pages> <address> San Diego, Califor-nia, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade <ref> [BLU90, BLU94] </ref>, SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [BLU94] <author> D. Baezner, G. Lomow, and B. Unger. </author> <title> A parallel simulation environment based on Time Warp. </title> <journal> International Journal in Computer Simulation, </journal> <volume> 4(2) </volume> <pages> 183-207, </pages> <year> 1994. </year>
Reference-contexts: The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade <ref> [BLU90, BLU94] </ref>, SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [CGU + 94] <author> J. Cleary, F. Gomes, B. Unger, X. Zhonge, and R. Thudt. </author> <title> Cost of state saving and rollback. </title> <editor> In D. K. Arvind, R. Bagro-dia, and Lin J. Y., editors, </editor> <booktitle> Proceedings of the 8th Workshop on Parallel and Distributed Simulation (PADS94), </booktitle> <volume> volume 24(1), </volume> <pages> pages 94-101, </pages> <address> Edinburgh, Scot-land, U.K., </address> <month> July </month> <year> 1994. </year>
Reference-contexts: State Saving calls must be explicitly programmed with the LP's process function. A grab bag of state savers are provided within the sk_lp class for saving basic data types, variable length data sizes and block state incrementally <ref> [CGU + 94] </ref>. Options of using Copy State Saving instead of Incremental State Saving mechanisms allows simulations programs to be debugged for correctness before optimizing using ISS mechanisms.
Reference: [CM79] <author> K. M. Chandy and J. Misra. </author> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(5):440-452, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Simulation modeling for parallel execution can be a very painstaking process. PDES assumes a Logical Process Modeling methodology for simulation software development. The system to be simulated is conceptualized as a network of interacting physical sub-systems <ref> [CM79, CM81] </ref>. The physical concurrency in these subsystems translates into computational concurrency in the simulation, which may be utilized through parallel execution.
Reference: [CM81] <author> K. M. Chandy and J. Misra. </author> <title> Asynchronous distributed simulation via a sequence of parallel computations. </title> <journal> Communications of the ACM, </journal> <volume> 24(11) </volume> <pages> 198-206, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: Simulation modeling for parallel execution can be a very painstaking process. PDES assumes a Logical Process Modeling methodology for simulation software development. The system to be simulated is conceptualized as a network of interacting physical sub-systems <ref> [CM79, CM81] </ref>. The physical concurrency in these subsystems translates into computational concurrency in the simulation, which may be utilized through parallel execution.
Reference: [FN92] <author> R. Fujimoto and D. Nicol. </author> <title> State of the art in parallel simulation. </title> <editor> In J. Swain, D. Goldsman, R. C. Crain, and J. R. Wil-son, editors, </editor> <booktitle> Proceedings of the 1992 Winter Simulation Conference, </booktitle> <volume> volume 25, </volume> <pages> pages 246-254, </pages> <address> Arlington, Virginia, </address> <month> De-cember </month> <year> 1992. </year>
Reference-contexts: Time Warp, essentially non blocking, does not strictly adhere to the local causality constraint. It relies upon a causality error detection and recovery scheme based on a rollback technique. In the last fifteen years, research endeavors in the field of PDES <ref> [FN92, FT94] </ref> have primarily focused on attainable simulation execution speedups. The main reason why PDES is not embraced by the general simulation community is the lack of research contributions toward simplifying the development of simulation models for concurrent execution [PN94].
Reference: [FT94] <author> A. Ferscha and S. K. Tripathi. </author> <title> Parallel and distributed simulation of discrete event systems. </title> <type> Technical Report CS-TR-3336, </type> <institution> Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Time Warp, essentially non blocking, does not strictly adhere to the local causality constraint. It relies upon a causality error detection and recovery scheme based on a rollback technique. In the last fifteen years, research endeavors in the field of PDES <ref> [FN92, FT94] </ref> have primarily focused on attainable simulation execution speedups. The main reason why PDES is not embraced by the general simulation community is the lack of research contributions toward simplifying the development of simulation models for concurrent execution [PN94].
Reference: [Fuj90] <author> R. M. Fujimoto. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 33-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: 1 Introduction In the future, the suitability of simulation as a viable tool to analyze large, complex and elaborate systems relies on the concurrent execution of the simulation program in parallel or distributed multiprocessing environments. The motivation for PDES <ref> [Fuj90] </ref> is the decreased simulation time by the exploitation of potential concurrency in applications highly irregular in their temporal behavior. Physical systems fitting this application domain [Fuj93] include transport systems, communication networks, computer systems, and logic circuits, to name a few.
Reference: [Fuj93] <author> R. Fujimoto. </author> <title> Parallel and distributed discrete event simulation: Algorithms and applications. </title> <editor> In G. W. Evans, M. Mol-laghasemi, E. C. Russell, and W. E. Biles, editors, </editor> <booktitle> Winter Simulation Conference Proceedings, </booktitle> <pages> pages 106-114, </pages> <address> Los An-geles, California, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: The motivation for PDES [Fuj90] is the decreased simulation time by the exploitation of potential concurrency in applications highly irregular in their temporal behavior. Physical systems fitting this application domain <ref> [Fuj93] </ref> include transport systems, communication networks, computer systems, and logic circuits, to name a few. PDES systems, in general, eliminate the globally shared event list and resort to a synchronization protocol to insure causality between events being executed in the parallel system.
Reference: [GF91] <author> K. Ghosh and R. Fujimoto. </author> <title> Parallel discrete event simulation using Space-Time memory. </title> <booktitle> Proceedings of the International Conference on Parallel Processing, </booktitle> <volume> 3 </volume> <pages> 201-208, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: A synchronization algorithm is used to insure that the local causality constraint is maintained at each LP. Extraneous to the logical process modeling methodology is that the sharing of state between LPs is not possible. A separate synchronization mechanism should be provided to support consistent shared variables in PDES <ref> [GF91, MH93] </ref>. 3 SimKit Design Philosophy A plethora of parallel simulation languages have appeared in the last decade, each with differing design considerations.
Reference: [GMRR89] <author> D. H. Gill, F. X. Maginnis, S. R. Rainier, and T. P. Reagan. </author> <title> An interface for programming parallel simulations. </title> <editor> In B. Unger and R. Fujimoto, editors, </editor> <booktitle> Proceedings of the SCS Multiconference on Distributed Simulation, </booktitle> <volume> volume 21(2), </volume> <pages> pages 151-154, </pages> <address> Tampa, Florida, </address> <month> March </month> <year> 1989. </year>
Reference-contexts: The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE <ref> [GMRR89] </ref>, Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [Has91] <author> R. Hassam. SIMA: </author> <title> A parallel simulation environment. </title> <type> Technical Report TRITA-TCS-91007, </type> <institution> Dept. of Telecomm. and Computer Science, The Royal Institute of Technology, S-10044, Stockholm, Sweden, </institution> <year> 1991. </year> <type> Technical Report. </type>
Reference-contexts: The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA <ref> [Has91] </ref>, RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [Jef85] <author> D. Jefferson. </author> <title> Virtual Time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: The principle distinguishing features of the synchronization approach are the degree of aggressivenes and the risk employed. Synchronization algorithms have been broadly classified as Conservative or Optimistic [Rey88]. The Time Warp mechanism is a well known optimistic approach based upon the Virtual Time paradigm <ref> [Jef85] </ref>. Time Warp, essentially non blocking, does not strictly adhere to the local causality constraint. It relies upon a causality error detection and recovery scheme based on a rollback technique.
Reference: [Mar88] <author> J. Marti. </author> <title> RISE: The RAND Integrated Simulation Environment. </title> <editor> In B. Unger and D. Jefferson, editors, </editor> <booktitle> Proceedings of the 1988 SCS Multiconference on Distributed Simulation, </booktitle> <volume> volume 19(3), </volume> <pages> pages 68-72, </pages> <address> San Diego, California, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND <ref> [Mar88] </ref> and Yad-des [Pre89].
Reference: [MH93] <author> H. Mehl and S. Hammes. </author> <title> Shared variables in distributed simulation. </title> <editor> In R. Bagro-dia and R. Jefferson, editors, </editor> <booktitle> Proceedings of the 7th Workshop on Parallel and Distributed Simulation (PADS93), </booktitle> <volume> volume 23(1), </volume> <pages> pages 68-75, </pages> <address> San Diego, California, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: A synchronization algorithm is used to insure that the local causality constraint is maintained at each LP. Extraneous to the logical process modeling methodology is that the sharing of state between LPs is not possible. A separate synchronization mechanism should be provided to support consistent shared variables in PDES <ref> [GF91, MH93] </ref>. 3 SimKit Design Philosophy A plethora of parallel simulation languages have appeared in the last decade, each with differing design considerations.
Reference: [PN94] <author> E. H. Page and R. E. Nance. </author> <title> Parallel discrete event simulation: A modeling methodological percspective. </title> <editor> In D. K. Arvind, R. Bagrodia, and Lin J. Y., editors, </editor> <booktitle> Proceedings of the 8th Workshop on Parallel and Distributed Simulation (PADS94), </booktitle> <volume> volume 24(1), </volume> <pages> pages 88-93, </pages> <address> Edinburgh, Scotland, U.K., </address> <month> July </month> <year> 1994. </year>
Reference-contexts: The main reason why PDES is not embraced by the general simulation community is the lack of research contributions toward simplifying the development of simulation models for concurrent execution <ref> [PN94] </ref>. Simulation modeling for parallel execution can be a very painstaking process. PDES assumes a Logical Process Modeling methodology for simulation software development. The system to be simulated is conceptualized as a network of interacting physical sub-systems [CM79, CM81].
Reference: [Pre89] <author> B. R. Preiss. </author> <title> The yaddes distributed discrete event simulation specification language. </title> <editor> In B. Unger and R. Fujimoto, editors, </editor> <booktitle> Proceedings of the SCS Multiconfer-ence on Distributed Simulation, </booktitle> <volume> volume 21(2), </volume> <pages> pages 139-144, </pages> <address> Tampa, Florida, </address> <month> March </month> <year> 1989. </year>
Reference-contexts: The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim [WM88, RM91], MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des <ref> [Pre89] </ref>.
Reference: [RA92] <author> H. Rajaei and R. Ayani. </author> <title> Language support for parallel simulation. </title> <editor> In Abrams M. and Reynolds P. F., editors, </editor> <booktitle> Proceedings of the 6th Workshop on Parallel and Distributed Simulation (PADS92), </booktitle> <volume> volume 24(3), </volume> <pages> pages 191-192, </pages> <address> New Port Beach, California, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: The major differences between these languages are their approach towards * programming paradigm employed and language constructs * underlying synchronization protocol and trans parency * modeling world view * run time configuration * determinism, and * efficiency The desired characteristics of a parallel simulation language <ref> [RA92, AL90] </ref> include Simplicity, Modularity, Portability, Transparency, Evolvability, Efficiency, Scalability, Determinism, and Generality. The primary goal of the SimKit System was to provide an event-oriented logical process modeling interface that facilitates the effortless building of application models for sequential and parallel simulation with high performance execution capabilities.
Reference: [Rey88] <author> Jr. P. Reynolds. </author> <title> A spectrum of options for parallel simulation. </title> <editor> In M. A. Abrams, P. L. Haigh, and Comfort J. C., editors, </editor> <booktitle> Winter Simulation Conference Proceedings, </booktitle> <pages> pages 325-332, </pages> <address> San Diego, Califor-nia, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: The principle distinguishing features of the synchronization approach are the degree of aggressivenes and the risk employed. Synchronization algorithms have been broadly classified as Conservative or Optimistic <ref> [Rey88] </ref>. The Time Warp mechanism is a well known optimistic approach based upon the Virtual Time paradigm [Jef85]. Time Warp, essentially non blocking, does not strictly adhere to the local causality constraint. It relies upon a causality error detection and recovery scheme based on a rollback technique.
Reference: [RM91] <author> D. O. Rich and R. E. Michelsen. </author> <title> An assessment of the ModSim/TWOS parallel simulation environment. </title> <editor> In B. L. Nel-son, W. D. Kelton, and G. M. Clark, editors, </editor> <booktitle> Winter Simulation Conference Proceedings, </booktitle> <pages> pages 509-517, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: A separate synchronization mechanism should be provided to support consistent shared variables in PDES [GF91, MH93]. 3 SimKit Design Philosophy A plethora of parallel simulation languages have appeared in the last decade, each with differing design considerations. The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim <ref> [WM88, RM91] </ref>, MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [WB94] <author> J. Waldorf and R. Bagrodia. MOOSE: </author> <title> A concurrent object-oriented language for simulation. </title> <journal> International Journal in Computer Simulation, </journal> <volume> 4(2) </volume> <pages> 235-257, </pages> <year> 1994. </year>
Reference-contexts: The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim [WM88, RM91], MOOSE <ref> [WB94] </ref>, SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
Reference: [WM88] <author> J. West and A. Mullarney. ModSim: </author> <title> A language for distributed simulation. </title> <editor> In B. Unger and D. Jefferson, editors, </editor> <booktitle> Proceedings of the 1988 SCS Multiconfer-ence on Distributed Simulation, </booktitle> <volume> volume 19(3), </volume> <pages> pages 155-159, </pages> <address> San Diego, Califor-nia, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: A separate synchronization mechanism should be provided to support consistent shared variables in PDES [GF91, MH93]. 3 SimKit Design Philosophy A plethora of parallel simulation languages have appeared in the last decade, each with differing design considerations. The languages include Common Interface of OLPS [Abr88, Abr89], Maisie [BL90], ModSim <ref> [WM88, RM91] </ref>, MOOSE [WB94], SCE from MITRE [GMRR89], Sim++ from Jade [BLU90, BLU94], SIMA [Has91], RISE from RAND [Mar88] and Yad-des [Pre89].
References-found: 26

