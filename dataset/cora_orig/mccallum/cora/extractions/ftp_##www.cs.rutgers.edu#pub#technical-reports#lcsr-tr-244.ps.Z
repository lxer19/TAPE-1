URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-244.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Title: Function Pointers in C An Empirical Study  
Author: Anand Shah and Barbara G. Ryder 
Date: May 24, 1995  
Abstract: Interprocedural analysis requires a statically determinable call multigraph to represent the program. Programs that use function pointers or function-valued variables present a difficult problem for static analysis. In C, function pointers can be formal parameters, actual arguments to functions, or global/local variables. The difficulty of precisely determining the call multigraph of a program or statically determining the aliases of a function pointer at a call site depends on the types of function pointers used (i.e., local or global) [ZR94]. In this study, we have statically gathered empirical information on C function pointer usage to better predict appropriate interprocedural analyses required for C programs. 
Abstract-found: 1
Intro-found: 1
Reference: [PWC91] <author> Michael Platoff, Michael Wagner, and Joseph Camaratta. </author> <title> An integrated program representation and toolkit for the maintenance of C programs. </title> <booktitle> In Proceedings of the Conference on Software Maintenance. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Table 1 lists the 24 programs in our study. 4 Implementation Our tool, developed to extract relevant function pointer information, was based on a tool developed at Siemens Corporate Research called ptt <ref> [PWC91] </ref>. ptt is a C language analysis tool which parses a C program, creates a parse tree with a symbol table, generates an intermediate representation and performs various data flow analyses on the program. We used ptt as the front-end of our system.
Reference: [ZR94] <author> Sean Zhang and Barbara G. Ryder. </author> <title> Complexity of single level function pointer aliasing analysis. </title> <type> Technical Report LCSR-TR-233, </type> <institution> Laboratory for Computer Science Research, Rutgers University, </institution> <month> October </month> <year> 1994. </year> <month> 11 </month>
Reference-contexts: C allows very general function pointer usage; a C program can contain function pointers as formals, globals or local variables, arrays of function pointers, pointers to function pointers, functions that return function pointers and function pointers as fields of structs and unions. In <ref> [ZR94] </ref> we showed that the problem of statically determining the functions that may be aliased to a function pointer at a call site is often provably N P hard except in special cases. <p> Section 6 draws conclusions based on the results of the study. 2 Study focus We have a theoretical categorization of the kind of programs that can easily be analyzed to construct a call multigraph in the presence of function pointers <ref> [ZR94] </ref>. The results of this work show that: * there is a polynomial time aliasing algorithm which can analyze some programs with single level, non-global function pointers. Here, single level refers to the allowed level of indirection of pointer usage.
References-found: 2

