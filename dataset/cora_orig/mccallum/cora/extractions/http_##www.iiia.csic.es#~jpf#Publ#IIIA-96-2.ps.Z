URL: http://www.iiia.csic.es/~jpf/Publ/IIIA-96-2.ps.Z
Refering-URL: http://www.iiia.csic.es/Reports/1996/IIIA-RR-96.html
Root-URL: 
Email: e-mail: fjpf,agustig@iiia.csic.es  
Phone: Tel. +34 (9)3 5809570 Fax. +34 (9)3 5809661  
Title: Using a Visual Syntax in Logic Programming 1  
Author: Jordi PUIGSEGUR i FIGUERAS Jaume AGUST I i CULLELL 
Date: Abstract  
Address: 08193 Bellaterra, CATALONIA (Spain)  
Affiliation: en Intellig encia Artificial (CSIC)  Institut d'Investigacio en IA (CSIC),  
Note: o  
Abstract: Research Report IIIA-96-2 Institut d'Investigaci It is commonly accepted that non-logicians have difficulty in expressing themselves in first order logic (FOL). Obviously, a similar problem can be found in the majority of existing logic programming languages. Part of the visual language community is concerned with providing visual notations which use visual cues to make the structuring of logical expressions more intuitive. One of the more successful metaphors used in such languages is that of set inclusion, making use of the graphical intuitions which most of us are taught at school. However, existing declarative diagrammatic languages do not make full use of such set-based intuitions. We present a more uniform use of sets, which allows simple but highly expressive diagrams to be constructed from a small number of primitive components. These diagrams |we think| provide a good alternative notation for the Horn clauses subset of FOL, and can easily be transformed into a visual notation for logic programming. Finally, we suggest an heterogeneous environment integrating both the visual notation described in the paper and the usual textual syntax in a way that each part can contribute to the final result where it is superior. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jaume Agust, Dave Robertson, and Jordi Puigsegur. </author> <title> GraSp: A GRAphical SPecification Language for the Preliminary Specification of Logic Programs. </title> <type> Technical Report IIIA 95/13, </type> <institution> Institut d'Investigacio en Intelligencia Artificial, Bellaterra, Catalonia, </institution> <year> 1995. </year>
Reference-contexts: We are encouraged to find that our visual syntax allows a compact description of some standard problems from the formal specification literature. For instance, in <ref> [1] </ref> we have graphically specified the example proposed in [14] using an earlier version of this visual syntax. <p> Finally, the ideas present in this paper could be extended and applied to logic programming languages more expressive than Prolog. For instance, we have in mind the visualization of LIFE (see [2]). Acknowledgements We thank Dave Robertson for his collaboration in the design of a graphical preliminary specification language <ref> [1] </ref>, from which the idea of this work came out.
Reference: [2] <author> Hassan At-Kaci and Andreas Podelski. </author> <title> Towards a Meaning of LIFE. </title> <journal> Journal of Logic Programming, </journal> <volume> 16 </volume> <pages> 195-234, </pages> <year> 1993. </year>
Reference-contexts: We plan to use our visual logic in the representation of conceptual schemas in deductive databases. Finally, the ideas present in this paper could be extended and applied to logic programming languages more expressive than Prolog. For instance, we have in mind the visualization of LIFE (see <ref> [2] </ref>). Acknowledgements We thank Dave Robertson for his collaboration in the design of a graphical preliminary specification language [1], from which the idea of this work came out.
Reference: [3] <author> Jon Barwise and John Etchemendy. </author> <title> Heterogeneous Logic. </title> <booktitle> In Diagrammatic Logics: Cognitive and Computational Perspectives. </booktitle> <publisher> AAAI Press and MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Our main principle in devising such visual representations for logic, is to keep the notations close to the concepts they are representing |what in <ref> [3] </ref> is referred to as homomorphic representations| thus allowing the notation to contain implicitly those concepts. In our case, we will use one of the more successful graphical metaphors used in mathematics, the set inclusion, combined with other well known methods of representing relations graphically, like the graph formalism. <p> Our work has also been directed towards the study of the real use of the visual notation in logic and logic programming. As it has been argued in <ref> [3] </ref> and [7], we do not think that there exists a perfect notation, better than the others for all domains. We believe that it is always more profitable to have in hand different representations and, at any point, to be able to use the most adequate to our needs. <p> For instance |as argued in [10] and [11]| it may make first-order inference more efficient, because of its close relationship with natural language syntax under compositional semantics. Barwise's proposal for an heterogeneous logic in <ref> [3] </ref> gave us the motivation to integrate our visual notation in an heterogeneous environment. However, one of Barwise's important claims has not been yet fully assumed by us: the non-existence of an interlingua.
Reference: [4] <author> Margaret M. Burnett, Marla J. Baker, Carisa Bohus, Paul Carlson, Sherry Yang, and Pieter van Zee. </author> <title> Scaling Up Visual Programming Languages. </title> <booktitle> IEEE Computer, </booktitle> <month> March </month> <year> 1995. </year>
Reference: [5] <author> Margaret M. Burnett, Adele Goldberg, and Ted G. Lewis, </author> <title> editors. Visual Object-Oriented Programming, Concepts and Environments. </title> <publisher> Prentice Hall/Manning Publications, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1995. </year>
Reference: [6] <author> Wayne Citrin, Richard Hall, and Benjamin Zorn. </author> <title> Programming with Visual Expressions. </title> <booktitle> In Proceedings of the 11th IEEE Symposium on Visual Languages, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: Not directly related but in the same spirit is the work in <ref> [6] </ref>, where a visual notation is used to support a mathematical formalism in order to ease its understanding and therefore its use. The work in [6] |a visual notation for -calculus| opens for us a question whether we could visualize higher order logic, i.e. -Prolog. <p> Not directly related but in the same spirit is the work in <ref> [6] </ref>, where a visual notation is used to support a mathematical formalism in order to ease its understanding and therefore its use. The work in [6] |a visual notation for -calculus| opens for us a question whether we could visualize higher order logic, i.e. -Prolog. As shown in Section 2, the intuitive interpretation of diagrams is based on sets and set inclusion.
Reference: [7] <author> Martin Erwig and Bernd Meyer. </author> <title> Heterogeneous Visual Languages -Integrating Visual and Textual Programming-. </title> <booktitle> In Proceedings of the 11th IEEE Symposium on Visual Languages, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: Our work has also been directed towards the study of the real use of the visual notation in logic and logic programming. As it has been argued in [3] and <ref> [7] </ref>, we do not think that there exists a perfect notation, better than the others for all domains. We believe that it is always more profitable to have in hand different representations and, at any point, to be able to use the most adequate to our needs.
Reference: [8] <author> Eric Hammer. </author> <title> Representing Relations Diagrammatically. </title> <editor> In Gerard Alwein and Jon Barwise, editors, </editor> <booktitle> Working Papers on Diagrams and Logic, </booktitle> <institution> Indiana University Logic Group Preprint Series IULG-93-24. Indiana University, </institution> <year> 1993. </year>
Reference-contexts: However, its concrete starting point was diagrammatic reasoning (DR) as presented by Eric Hammer in <ref> [8] </ref>. The main goal of DR is to reason |formally| using diagrammatic representations because they correspond more closely to our intuitions than the usual mathematical notations. <p> Our ultimate goal is to have an expressive representation of FOL which makes as much use as possible of simple visual cues in its description. For this purpose the visual notation of <ref> [8] </ref>, although it has a close correspondence to FOL, it still provides too much detail and is therefore difficult to use. To be able to use this notation properly, a user must know about predicates and arguments, variable matching, simple lambda expressions and implicit implication. <p> We consider this to be too much of an overhead for an unexperienced user. In the next section we describe a visual notation which does not require users to deal with some of this concepts directly. The resulting visual language is simpler and more concise than that of <ref> [8] </ref> and |we claim| provides a much "softer" route into FOL. Our work has also been directed towards the study of the real use of the visual notation in logic and logic programming. <p> Our choice has been a customization of higraphs |Hammer's diagrams (in <ref> [8] </ref>) are also based on higraphs|, a topological formalism developed by David Harel (see [9]) that combines VENN diagrams together with graphs. <p> are specially interested in developing a diagrammatic editor directed by the syntax and semantics of the diagrams (see [13]) that can guide the user in the construction of correct diagrams. 4 Other Related Work We already commented in the introduction the relationship of this work with diagrammatic reasoning work in <ref> [8] </ref>. Not directly related but in the same spirit is the work in [6], where a visual notation is used to support a mathematical formalism in order to ease its understanding and therefore its use.
Reference: [9] <author> David Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5) </volume> <pages> 514-530, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Our choice has been a customization of higraphs |Hammer's diagrams (in [8]) are also based on higraphs|, a topological formalism developed by David Harel (see <ref> [9] </ref>) that combines VENN diagrams together with graphs. Higraphs actually are graphs where some nodes are related by a partial order relation: Graphical inclusion; or from the other point of view, Venn diagrams where the sets are related by a binary relation, graphically shown by means of arrows.
Reference: [10] <author> David McAllester and Robert Givan. </author> <title> Natural language syntax and first-order inference. </title> <journal> Artificial Intelligence, </journal> <volume> 56 </volume> <pages> 1-20, </pages> <year> 1992. </year>
Reference-contexts: A similar syntax, called taxonomic syntax, was designed by McAllester in <ref> [10, 11] </ref>. In this type of syntax we have class terms (also set terms), referring to the fact that these terms constructed from predicates represent sets of elements. <p> As shown in Section 2, the intuitive interpretation of diagrams is based on sets and set inclusion. Set terms and set term inclusions provide an alternative syntax for FOL that is very near to McAllester's taxonomic syntax (see <ref> [10] </ref> and [11]). However, McAllester's work is directed towards the study of possible benefits of this non-standard syntax for FOL, different than facilitating visualization as shown here. For instance |as argued in [10] and [11]| it may make first-order inference more efficient, because of its close relationship with natural language syntax <p> set term inclusions provide an alternative syntax for FOL that is very near to McAllester's taxonomic syntax (see <ref> [10] </ref> and [11]). However, McAllester's work is directed towards the study of possible benefits of this non-standard syntax for FOL, different than facilitating visualization as shown here. For instance |as argued in [10] and [11]| it may make first-order inference more efficient, because of its close relationship with natural language syntax under compositional semantics. Barwise's proposal for an heterogeneous logic in [3] gave us the motivation to integrate our visual notation in an heterogeneous environment.
Reference: [11] <author> David McAllester, Robert Givan, and T. Fatima. </author> <title> Taxonomic Syntax for First Order Inference. </title> <journal> Journal of the ACM, </journal> <volume> 40(2) </volume> <pages> 246-283, </pages> <year> 1993. </year>
Reference-contexts: A similar syntax, called taxonomic syntax, was designed by McAllester in <ref> [10, 11] </ref>. In this type of syntax we have class terms (also set terms), referring to the fact that these terms constructed from predicates represent sets of elements. <p> As shown in Section 2, the intuitive interpretation of diagrams is based on sets and set inclusion. Set terms and set term inclusions provide an alternative syntax for FOL that is very near to McAllester's taxonomic syntax (see [10] and <ref> [11] </ref>). However, McAllester's work is directed towards the study of possible benefits of this non-standard syntax for FOL, different than facilitating visualization as shown here. For instance |as argued in [10] and [11]| it may make first-order inference more efficient, because of its close relationship with natural language syntax under compositional <p> inclusions provide an alternative syntax for FOL that is very near to McAllester's taxonomic syntax (see [10] and <ref> [11] </ref>). However, McAllester's work is directed towards the study of possible benefits of this non-standard syntax for FOL, different than facilitating visualization as shown here. For instance |as argued in [10] and [11]| it may make first-order inference more efficient, because of its close relationship with natural language syntax under compositional semantics. Barwise's proposal for an heterogeneous logic in [3] gave us the motivation to integrate our visual notation in an heterogeneous environment.
Reference: [12] <author> Marian Petre. </author> <title> Why Looking Isn't Always Seeing: Readership Skills and Graphical Programming. </title> <journal> Communications of the ACM, </journal> <volume> 38(6), </volume> <month> June </month> <year> 1995. </year>
Reference: [13] <author> J. Artur Serrano. </author> <title> The Use of Semantic Constraints on Diagram Editors. </title> <booktitle> In Proceedings of the 11th IEEE Symposium on Visual Languages, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: Currently, we are implementing the visual language and the heterogeneous environment proposed in this section, on a Unix platform using X-Windows and Sicstus Prolog. We are specially interested in developing a diagrammatic editor directed by the syntax and semantics of the diagrams (see <ref> [13] </ref>) that can guide the user in the construction of correct diagrams. 4 Other Related Work We already commented in the introduction the relationship of this work with diagrammatic reasoning work in [8].
Reference: [14] <editor> Jan Treur and Thomas Wetter, editors. </editor> <title> Formal Specification of Complex Reasoning Systems. </title> <publisher> Ellis Horwood, </publisher> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: We are encouraged to find that our visual syntax allows a compact description of some standard problems from the formal specification literature. For instance, in [1] we have graphically specified the example proposed in <ref> [14] </ref> using an earlier version of this visual syntax. We have also observed that description in our system normally follows one of a small number standard pattern of definition |similar to the standard patterns classified by the "techniques editing" section of the logic programming community.
References-found: 14

