URL: ftp://cdr.stanford.edu/pub/CDR/Publications/Reports/pareto.ps.gz
Refering-URL: http://cdr.stanford.edu/NextLink/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Using Pareto Optimality to Coordinate Distributed Agents  on conflict management  
Author: Charles J. Petrie Teresa A. Webster Mark R. Cutkosky 
Keyword: [Design Coordination], [Pareto Optimality], [Change Management], [Distributed Engineering], [Network Agents]  
Note: To appear in the AIEDAM special issue  
Address: 560 Panama Street Stanford, CA 94305-2232  
Affiliation: Center for Design Research Stanford University  
Email: petrie@cdr.stanford.edu  
Phone: 415/725-0162  
Date: March 31, 1995  
Abstract: Pareto optimality is a domain-independent property that can be used to coordinate distributed engineering agents. Within a model of design called Redux, some aspects of dependency-directed backtracking can be interpreted as tracking Pareto optimality. These concepts are implemented in a framework, called Next-Link, that coordinates legacy engineering systems. This framework allows existing software tools to communicate with each other and a Redux agent over the Internet. The functionality is illustrated with examples from the domain of electrical cable harness design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Conklin, J. & Begeman, M. </author> <year> (1988).gIBIS: </year> <title> A Hypertext Tool for Exploratory Policy Discussion. </title> <booktitle> Proc. of CSCW '88 (Computer Supported Cooperative Work), </booktitle> <month> September. </month>
Reference-contexts: Such conflicts are likely to be resolved by intervention of a manager or simply the give and take of normal engineering discussion. An objective function is simply not an appropriate tool for support of such conflicts. There are decision support tools for providing argumentation in such a situation <ref> [1, 15] </ref> and for attempting to optimize multiple objective decisions [7]. It is sometimes feasible to at least perform local optimization over weighted objectives [2].
Reference: [2] <author> Descotte, Y. & Latombe, J. </author> <year> (1985). </year> <title> Making Compromises among Antagonist Constraints in a Planner. </title> <booktitle> Artificial Intelligence 27, </booktitle> <pages> pp. 183-217. </pages>
Reference-contexts: There are decision support tools for providing argumentation in such a situation [1, 15] and for attempting to optimize multiple objective decisions [7]. It is sometimes feasible to at least perform local optimization over weighted objectives <ref> [2] </ref>. We do not here address all of the problems in these approaches beyond noting that there seems to be no general solution to multiple objective optimization. <p> This is even more important when multiple agents participate in a conflict: each would like the freedom to schedule conflict resolution. This is not possible with approaches that depend upon numerical tracking, such as <ref> [2] </ref>. This approach also ensures that at the least agents will be notified if they attempt to revisit a problem solving state known to be bad, thus avoiding thrashing. And they are guaranteed that a proposed set of decision rejections will resolve the given constraint. <p> Together, these properties ensure that the combined set of users will not generate the same conflict over and over, perhaps in a cycle that is not easily predicted. This guarantee is unique to Redux: it is not true of systems such as that 16 of <ref> [2] </ref> or [16] or any other that supports this kind of revision capability. 4.2 The AI Substrate Redux represents work from artificial intelligence in two major ways. One is the model ontology.
Reference: [3] <author> Dhar, V. & Raganathan, N. </author> <year> (1990). </year> <title> An Experiment in Integer Programming. </title> <journal> Communications of the ACM, </journal> <month> March </month> . 
Reference-contexts: For example, how should the cost of the artifact be weighted with respect to its time to market, weight, or various features? The difficulty of generating an "objective" function is increased by the fact that even small numeric changes in weights can generate very different solutions <ref> [3] </ref>. When problem solving is distributed over multiple agents with expertise in different domains, the difficulty is exacerbated. For example, an electronics engineer may want to use a position sensor that the mechanical engineer finds too heavy for the gimbal and motors of an artifact they are collaboratively designing.
Reference: [4] <author> Doyle, J. </author> <year> (1985). </year> <title> Reasoned Assumptions and Pareto Optimality. </title> <booktitle> Proc. of the 9th IJCAI, </booktitle> <pages> pp. 87-90. </pages>
Reference-contexts: The behavior of this rejection rationale is what is needed with dependency-directed backtracking to eliminate search thrashing and incompleteness. And, in the Re-dux model interpretation, it is also the mechanism needed to track Pareto optimality. Though Pareto optimality has been previously connected to a kind of truth maintenance <ref> [4] </ref>, this mapping between dependency-directed backtracking and Pareto 19 optimality is novel. 5 The Next-Link Framework How is such a model to be practically implemented for distributed engineering? As with other systems that provide some sort of design rationale service, it is important that the user not be overly burdened with
Reference: [5] <author> Feldman, Allan M. </author> <year> (1980). </year> <title> Welfare Economics and Social Choice Theory. </title> <publisher> Kluwer, </publisher> <address> Boston. </address>
Reference-contexts: 1 Introduction Coordination of distributed engineering agents frequently involves globally conflicting solutions to multiple local objectives. While much computer research on support of collaborative engineering concerns global metrics for optimization, decision support, and negotiation, a basic coordination function is support of Pareto optimality <ref> [5] </ref>. It is frequently difficult to find a global objective function even for problems that otherwise can be easily mapped into integer programming (IP), a general technique for satisfying multiple objectives with constraints. This is because it is difficult to assign a metric to different objectives. <p> These properties are especially important when problem solving is distributed. We also show how this tracking function is implemented with novel artificial intelligence techniques. 2 Pareto Optimality Pareto optimality <ref> [5] </ref> is an economics term for describing a solution for multiple objectives. No part of a Pareto optimal solution can be improved without making some other part worse. Figure 1 shows four geometric examples of Pareto optimality.
Reference: [6] <author> James G. McGuire et al. </author> <year> (1993). </year> <title> SHADE: A Medium for SHaring Design Knowledge among Engineering Tools. </title> <journal> Journal of Concurrent Engineering: Applications and Research (CERA), </journal> <volume> 1(2), </volume> <month> September. </month>
Reference-contexts: The architecture of the current Next-Link system is shown in Figure 13. Each agent in the architecture has a basic API for communication. In the current implementation, this is KAPI: the KQML API from the SHADE project <ref> [6] </ref>. This basic 22 agent communications protocol allows each agent to be located anywhere on the Internet.
Reference: [7] <author> Korhonen, P. & Wallenius, J. </author> <year> (1990). </year> <title> A Multiple Objective Linear Programming Decision Support System. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 6, </volume> <pages> pp 243-251. </pages>
Reference-contexts: An objective function is simply not an appropriate tool for support of such conflicts. There are decision support tools for providing argumentation in such a situation [1, 15] and for attempting to optimize multiple objective decisions <ref> [7] </ref>. It is sometimes feasible to at least perform local optimization over weighted objectives [2]. We do not here address all of the problems in these approaches beyond noting that there seems to be no general solution to multiple objective optimization.
Reference: [8] <author> Lee, Jintae & Lai, </author> <month> Kum-Yew </month> <year> (1991). </year> <title> A Comparative Analysis of Design Rationale Representations. </title> <type> MIT Sloan School TR CCS TR 121, </type> <month> May. </month>
Reference-contexts: We will briefly discuss the first two but emphasize the last in this paper. To this end, we now suppose that the restricted zone 3 The system described accommodates the usual sort of design rationale <ref> [8] </ref> but provides additional important information about the history of the design process. 7 in the upper right part of the environment has been removed.
Reference: [9] <author> Park, H. et al. </author> <year> (1994). </year> <title> An Agent-Based Approach to Concurrent Cable Harness Design. </title> <journal> Artificial Intelligence for Engineering Design, Analysis and Manufacturing (AIEDAM), </journal> <volume> Vol. 8, </volume> <pages> pp. 45-61, </pages> <month> March. 25 </month>
Reference-contexts: By pressing a "button" on the interface, the user sees the message. This was easy to add to the existing interface because a message mechanism already existed in the interface. 10 See WWW URL http://cdr.stanford.edu/html/NextLink/NextLink.html. In addition, the general problem domain has been studied in a project called First-Link <ref> [9] </ref>. Here we briefly remark that the original research has spawned four separate projects. There is a commercial version of the First-Link system being used at Lockheed Missile Systems, which supported the original research.
Reference: [10] <author> Park, H. </author> <year> (1995). </year> <title> Modeling of Collaborative Design Processes for Agent-Assisted Product Design. </title> <type> Dissertation, </type> <institution> Center for Design Research, Stanford U., </institution> <month> January. </month>
Reference: [11] <author> Petrie, C. </author> <year> (1991). </year> <title> Context Maintenance. </title> <booktitle> Proc. 9th Nat. Conf. on AI, </booktitle> <pages> pp. 288-295, </pages> <publisher> AAAI Press, </publisher> <month> July. </month>
Reference-contexts: However, it implies a search mechanism that ensures that one does not jump back to a search state previously visited nor omit a new possible state <ref> [11] </ref>. To elaborate briefly on the rationale to be constructed for a rejected decision, given a constraint C that is violated by the conjunction of a set of assignments fA 1 : : : A n g, there is a corresponding disjunct of conjuncts of decisions.
Reference: [12] <author> Petrie, C. </author> <year> (1992). </year> <title> Constrained Decision Revision. </title> <booktitle> Proc. 10th Nat. Conf. on AI, </booktitle> <pages> pp. 393-400, </pages> <publisher> AAAI Press, </publisher> <month> July. </month>
Reference-contexts: The Redux model of design problem solving <ref> [12] </ref> provides such formality. Only a subset of this model is needed to perform the bookkeeping duties described above. We call this subset Redux 0 and have implemented it as a coordination service agent [13] that performs a number of useful functions for distributed design [14]. <p> If a goal is invalid, there is no valid reason to work on it. If an assignment is invalid, it is no longer a design feature supported by a valid design decision. Apart from these ontological concerns, Redux is based upon work in truth maintenance as detailed in <ref> [12] </ref>. Here we simply note that the implementation of the model is not conceptually important. It could have been implemented in Prolog: the implementation decisions are about whether to cache or not and how to detect change computationally. <p> In particular, the sort of "no-good" justification for the rejection that is automatically generated by the truth maintenance system during dependency-directed backtracking will become invalid exactly when Pareto optimality is lost <ref> [12] </ref>. Dependency 9 It is important that subgoals be associated with a supergoal through decisions since each decision may generate a unique set of subgoals. 18 directed backtracking means jumping back to any one of the contributing decisions, as opposed to, say, chronological backtracking. <p> Goal blocks are similarly treated: some decision must be revised to resolve the goal block. Decisions creating the blocked goal as well as inputs to rejected decisions must also be included in the rationale. Implementation details have been previously described <ref> [12] </ref>. Rather than repeat them, it is more important here to note that this rejection rationale can be used to prevent thrashing and incompleteness. Whenever one of the other conflicting assignments or contributing facts, or the constraint, is no longer the case, the decision rejection rationale is no longer valid.
Reference: [13] <author> Petrie, C. </author> <year> (1993). </year> <title> The Redux' Server. </title> <booktitle> Proc. Internat. Conf. on Intelligent and Cooperative Information Systems (ICICIS), </booktitle> <address> Rotterdam, </address> <month> May. </month>
Reference-contexts: The Redux model of design problem solving [12] provides such formality. Only a subset of this model is needed to perform the bookkeeping duties described above. We call this subset Redux 0 and have implemented it as a coordination service agent <ref> [13] </ref> that performs a number of useful functions for distributed design [14]. In this section, we describe this model and show how in particular it supports the tracking of Pareto optimality. <p> A new route may render the current work on selecting parts and refining spline fits useless. Redux can make this and similar notifications because of the links in the model as detailed in <ref> [13] </ref>. A good example of this capability is a Goal Block, illustrated in Figure 12. Suppose that Jane cannot find another way to route her cable if the first way is blocked by Joe's cable. Obviously this should be Joe's problem as well.
Reference: [14] <author> Petrie, C.et al. </author> <year> (1994). </year> <title> Design Space Navigation as a Collaborative Aid. </title> <booktitle> Proc. AI in Design: 3rd Internat. Conf., </booktitle> <pages> pp. 611-623. </pages> <address> Lausanne. </address>
Reference-contexts: Only a subset of this model is needed to perform the bookkeeping duties described above. We call this subset Redux 0 and have implemented it as a coordination service agent [13] that performs a number of useful functions for distributed design <ref> [14] </ref>. In this section, we describe this model and show how in particular it supports the tracking of Pareto optimality. To simplify matters, we do not distinguish further the complete problem-solving Redux model and the dependency tracking subset Redux 0 in this paper. <p> Next-Link is a framework for the distributed application of generic engineering services to cable design and similar routine engineering and configuration tasks 10 The legacy system in this case is a set of design tools with user interfaces, already exchanging a simple set of messages. In <ref> [14] </ref>, we detail how these existing messages are translated into messages about decisions in the Redux formalism. In the current Next-Link system, we use these messages and additional ones to coordinate the design.
Reference: [15] <author> Ramesh, B. &Dhar, V. </author> <year> (1994). </year> <title> Representing and Maintaining Process Knowledge for Large-Scale Systems Development. </title> <journal> IEEE Expert, </journal> <volume> 9,2, </volume> <pages> pp. 54-59. </pages>
Reference-contexts: Such conflicts are likely to be resolved by intervention of a manager or simply the give and take of normal engineering discussion. An objective function is simply not an appropriate tool for support of such conflicts. There are decision support tools for providing argumentation in such a situation <ref> [1, 15] </ref> and for attempting to optimize multiple objective decisions [7]. It is sometimes feasible to at least perform local optimization over weighted objectives [2].

References-found: 15

