URL: http://www.cs.washington.edu/research/jair/volume6/pollack97a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/contents/complete-with-abstracts.html
Root-URL: http://www.cs.washington.edu
Email: pollack@cs.pitt.edu  joslin@cirl.uoregon.edu  Massimo Paolucci paolucci@pitt.edu  
Title: Flaw Selection Strategies For Partial-Order Planning  
Author: Martha E. Pollack David Joslin 
Address: Pittsburgh, Pittsburgh, PA 15260 USA  OR 97403 USA  Pittsburgh, Pittsburgh, PA 15260 USA  
Affiliation: Department of Computer Science and Intelligent Systems Program, University of  Computational Intelligence Research Laboratory, University of Oregon, Eugene,  Intelligent Systems Program, University of  
Note: Journal of Artificial Intelligence Research 6 (1997) 223-262 Submitted 2/97; published 6/97  
Abstract: Several recent studies have compared the relative efficiency of alternative flaw selection strategies for partial-order causal link (POCL) planning. We review this literature, and present new experimental results that generalize the earlier work and explain some of the discrepancies in it. In particular, we describe the Least-Cost Flaw Repair (LCFR) strategy developed and analyzed by Joslin and Pollack (1994), and compare it with other strategies, including Gerevini and Schubert's (1996) ZLIFO strategy. LCFR and ZLIFO make very different, and apparently conflicting claims about the most effective way to reduce search-space size in POCL planning. We resolve this conflict, arguing that much of the benefit that Gerevini and Schubert ascribe to the LIFO component of their ZLIFO strategy is better attributed to other causes. We show that for many problems, a strategy that combines least-cost flaw selection with the delay of separable threats will be effective in reducing search-space size, and will do so without excessive computational overhead. Although such a strategy thus provides a good default, we also show that certain domain characteristics may reduce its effectiveness. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J. F., Schubert, L. K., Ferguson, G. M., Heeman, P. A., Hwant, C. H., Kato, T., Light, M., Margin, N. G., Miller, B. W., Poesio, M., & Traum, B. R. </author> <year> (1995). </year> <title> The TRAINS project: A case study in building a conversational planning agent. </title> <journal> Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7, </volume> <pages> 7-48. </pages>
Reference-contexts: The Trains Problems, three problems taken from the TRAINS transportation domain <ref> (Allen, Schubert, & et al., 1995) </ref>. 3. The Tileworld Problems, seven problems taken from the Tileworld domain (Pollack & Ringuette, 1990). We ran each strategy on each problem twice.
Reference: <author> Chapman, D. </author> <year> (1987). </year> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 (3), </volume> <pages> 333-378. </pages>
Reference-contexts: What made these comparisons possible was the development of a set of clear algorithms with provable formal properties, notably TWEAK <ref> (Chapman, 1987) </ref>, and SNLP (McAllester & Rosenblitt, 1991). These algorithms were not intended to add functionality to known planning methods, but rather to capture the essential elements of these known methods in a readily analyzable fashion.
Reference: <author> Currie, K., & Tate, A. </author> <year> (1991). </year> <title> O-plan: The open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52, </volume> <pages> 49-86. </pages>
Reference-contexts: This is perhaps not surprising, given that flaw selection in POCL planning corresponds in some 5. The LCFR strategy is similar to the branch-1/branch-n search heuristics included in the O-Plan system <ref> (Currie & Tate, 1991) </ref>. The contribution of our original work on this topic was to isolate this strategy and examine it in detail. 229 Pollack, Joslin, & Paolucci fairly strong ways to variable selection in constraint programming. <p> The difficulty that LCFR-DSep encounters by greedily picking low-cost flaws might be reduced by doing a lookahead of several planning steps, to determine a more accurate repair cost. This is the approach taken in the branch-n mechanism in O-Plan <ref> (Currie & Tate, 1991) </ref>. Significant overhead can be involved in such a strategy, however. 251 Pollack, Joslin, & Paolucci The key decision for the Get-Paid/Uget-Paid domain|and, as it turns out, for the Trains domain|is related to, but subtly different from the key decision in the Tileworld domain.
Reference: <author> Etzioni, O., Hanks, S., Weld, D., Draper, D., Lesh, N., & Williamson, M. </author> <year> (1992). </year> <title> An approach to planning with incomplete information. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pp. 115-125. </pages>
Reference: <author> Gerevini, A. </author> <year> (1997). </year> <type> Personal communication. </type>
Reference-contexts: However the difference was apparently not dramatic, and Gerevini believes this to be an implementation detail, though is open to the possibility that further study might show this preference to be significant <ref> (Gerevini, 1997) </ref>. Gerevini and Schubert make three primary claims about ZLIFO: 1. A POCL planner using ZLIFO will tend to generate a smaller search space than one using a pure LIFO strategy. 2. <p> This appears to be largely due to the fact that UCPOP v.4 puts the elements of a new set of open conditions onto the flaw list in the reverse order of the way in which UCPOP v.2 does <ref> (Gerevini, 1997) </ref>. As discussed below in Sections 4.3-4.5, we studied the influence of this ordering change by also collecting data using a modified version of UCPOP v.4 in which we reversed the order of conditions entered in the open list.
Reference: <author> Gerevini, A., & Schubert, L. </author> <year> (1996). </year> <title> Accelerating partial-order planners: Some techniques for effective search control and pruning. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 5, </volume> <pages> 95-137. </pages>
Reference: <author> Joslin, D. </author> <year> (1996). </year> <title> Passive and Active Decision Postponement in Plan Generation. </title> <type> Ph.D. thesis, </type> <institution> Intelligent Systems Program, University of Pittsburgh. </institution>
Reference: <author> Joslin, D., & Pollack, M. E. </author> <year> (1994). </year> <title> Least-cost flaw repair: A plan refinement strategy for partial-order planning. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> pp. </pages> <address> 1004-1009 Seattle, WA. </address>
Reference-contexts: Consequently, all flaw selection strategies should give highest priority to such flaws (Joslin & Pollack, 1996; Joslin, 1996). 3.2 Least-Cost Flaw Repair Peot and Smith's work provided the foundation for our subsequent exploration of the least-cost flaw repair (LCFR) strategy <ref> (Joslin & Pollack, 1994) </ref>. We hypothesized that the power of the DUnf strategy might come not from its relative ordering of threats and open conditions, but instead from the fact that DUnf has the effect of imposing a partial preference for least-cost flaw selection. <p> In those experiments, we compared LCFR against four other strategies: UCPOP, DUnf, and DUnf-LC, as defined above, and a new strategy, UCPOP-LC which we previously called LCOS <ref> (Joslin & Pollack, 1994) </ref>: UCPOP-LC fn,sgLIFO / fogLC We included UCPOP-LC to help verify that search-space reduction results from a preference for flaws with minimal repair costs. If this is true, then UCPOP-LC ought to generate a smaller search space then DUnf, even though it does not delay any threats. <p> The puzzle for us was not why ZLIFO was faster, but why it generated smaller search spaces. Second, we believe that understanding the effect of search control strategies on search-space size can lead to development of approximation techniques that produce speed-up as well; the QLCFR strategy <ref> (Joslin & Pollack, 1994) </ref> and Srinivasan and Howe's strategies (1995) are examples of this. However, a secondary goal was to analyze the time requirements of the strategies we compared, and we therefore collected timing data for all our experiments. <p> Except for LCFR-DSep and DUnf-Gen, which are discussed later, all the implemented strategies were described in Section 3. We tested all the strategies on three problem sets, also used in our earlier work <ref> (Joslin & Pollack, 1994) </ref> and in Gerevini and Schubert's (1996): 1. The Basic Problems, 33 problems taken from the test suite distributed with the UCPOP system. These include problems from a variety of domains, including the 7. Note that the experiments in both our earlier LCFR paper (Joslin & Pollack, 1994) <p> our earlier work <ref> (Joslin & Pollack, 1994) </ref> and in Gerevini and Schubert's (1996): 1. The Basic Problems, 33 problems taken from the test suite distributed with the UCPOP system. These include problems from a variety of domains, including the 7. Note that the experiments in both our earlier LCFR paper (Joslin & Pollack, 1994) and Gerevini and Schubert's (1996) ZLIFO paper were run using an earlier version (v.2) of UCPOP. As a result, the number of nodes produced in our experiments sometimes differs from what is reported in these other two papers.
Reference: <author> Joslin, D., & Pollack, M. E. </author> <year> (1996). </year> <title> Is "early commitment" in plan generation ever a good idea?. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> pp. </pages> <address> 1188-1193 Portland, OR. </address>
Reference: <author> Kambhampati, S., Knoblock, C. A., & Yang, Q. </author> <year> (1995). </year> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76 (1-2), </volume> <pages> 167-238. </pages>
Reference: <author> Kumar, V. </author> <year> (1992). </year> <title> Algorithms for constraint-satisfaction problems: A survey. </title> <journal> AI Magazine, </journal> <volume> 13 (1), </volume> <pages> 32-44. </pages>
Reference-contexts: planner represent decisions that are yet to be made, and that must be made before the plan will be complete; unbound variables play a similar role in constraint satisfaction problems (CSPs). 6 Although there exist a number of heuristics for selecting a variable to branch on in solving a CSP <ref> (Kumar, 1992) </ref>, one well-known heuristic that is often quite effective is the fail first principle, which picks the variable that is the "most constrained" when selecting a variable to branch on. A simple and common implementation of the fail first principle selects the variable with the smallest domain (Tsang, 1993).
Reference: <author> McAllester, D., & Rosenblitt, D. </author> <year> (1991). </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 634-639 Anaheim, CA. </address>
Reference-contexts: What made these comparisons possible was the development of a set of clear algorithms with provable formal properties, notably TWEAK (Chapman, 1987), and SNLP <ref> (McAllester & Rosenblitt, 1991) </ref>. These algorithms were not intended to add functionality to known planning methods, but rather to capture the essential elements of these known methods in a readily analyzable fashion. <p> We therefore describe a preference using the following notation fflaw typesg repair cost range tie-breaking strategy 2. An alternative approach also treats cases in which E j F as threats; this is required to make the planner systematic, i.e., guaranteed never to generate the same node more than once <ref> (McAllester & Rosenblitt, 1991) </ref>. 3. Conditional planners make use of an additional method of threat resolution|confrontation|but we ignore that within this paper (Peot & Smith, 1992; Etzioni, Hanks, Weld, Draper, Lesh, & Williamson, 1992). <p> Flaw Selection Strategies We begin by reviewing the flaw selection strategies that have been proposed and studied in the literature to date. 3.1 Threat Preference and Delay The original SNLP algorithm <ref> (McAllester & Rosenblitt, 1991) </ref> adopted a flaw selection strategy in which threats are resolved before open conditions, and early versions of the widely used UCPOP planning system (Penberthy & Weld, 1992) did the same. 4 SNLP does not specify a principle for selecting among multiple threats or multiple opens; UCPOP used
Reference: <author> Pednault, E. P. D. </author> <year> (1988). </year> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4 (4), </volume> <pages> 356-372. </pages>
Reference: <author> Penberthy, J. S., & Weld, D. </author> <year> (1992). </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Proceedings of the Third International Conference on Knowledge Representation and Reasoning, </booktitle> <pages> pp. </pages> <address> 103-114 Cambridge, MA. </address> <note> 261 Pollack, </note> <author> Joslin, & Paolucci Peot, M., & Smith, D. E. </author> <year> (1992). </year> <title> Conditional nonlinear planning. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems (AIPS-92), </booktitle> <pages> pp. </pages> <address> 189-197 College Park, MD. </address>
Reference-contexts: flaw selection strategies that have been proposed and studied in the literature to date. 3.1 Threat Preference and Delay The original SNLP algorithm (McAllester & Rosenblitt, 1991) adopted a flaw selection strategy in which threats are resolved before open conditions, and early versions of the widely used UCPOP planning system <ref> (Penberthy & Weld, 1992) </ref> did the same. 4 SNLP does not specify a principle for selecting among multiple threats or multiple opens; UCPOP used LIFO for this purpose. Employing the notation above, we can describe the basic UCPOP strategy as: 4.
Reference: <author> Peot, M., & Smith, D. E. </author> <year> (1993). </year> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 492-499 Washington, D.C. </address>
Reference: <author> Pollack, M. E., & Ringuette, M. </author> <year> (1990). </year> <title> Introducing the Tileworld: Experimentally evaluating agent architectures. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 183-189 Boston, MA. </address>
Reference-contexts: The Trains Problems, three problems taken from the TRAINS transportation domain (Allen, Schubert, & et al., 1995). 3. The Tileworld Problems, seven problems taken from the Tileworld domain <ref> (Pollack & Ringuette, 1990) </ref>. We ran each strategy on each problem twice. The first time, we imposed a node limit, of 10,000 nodes for the basic problems, and of 100,000 nodes for the Trains and Tileworld problems.
Reference: <author> Russell, S., & Norvig, P. </author> <year> (1995). </year> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference: <author> Russell, S. J. </author> <year> (1992). </year> <title> Efficient memory-bounded search algorithms. </title> <booktitle> In Proceedings of the Tenth European Conference on Artificial Intelligence, </booktitle> <pages> pp. 1-5. </pages>
Reference: <author> Smith, D. E., & Peot, M. A. </author> <year> (1994). </year> <title> A note on the DMIN strategy. </title> <type> Unpublished manuscript. </type>
Reference: <author> Srinivasan, R., & Howe, A. E. </author> <year> (1995). </year> <title> Comparison of methods for improving search efficiency in a partial-order planner. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1620-1626. </pages>
Reference: <author> Tate, A., Drabble, B., & Dalton, J. </author> <year> (1994). </year> <title> Reasoning with constraints within O-plan2. </title> <type> Tech. rep. </type> <institution> ARPA-RL/O-Plan2/TP/6 V. 1, AIAI, Edinburgh. </institution>
Reference: <author> Tsang, E. </author> <year> (1993). </year> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press. </publisher>
Reference-contexts: A simple and common implementation of the fail first principle selects the variable with the smallest domain <ref> (Tsang, 1993) </ref>. The intuition behind the fail first principle is that one should prune dead-end regions of the search as early as possible.
Reference: <author> Tsuneto, R., Erol, K., Hendler, J., & Nau, D. </author> <year> (1996). </year> <title> Commitment strategies in hierarchical task network planning. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> pp. </pages> <address> 526-542 Portland, OR. </address>
Reference-contexts: A similar heuristic has also been adopted in recent work on controlling search in hierarchical task network (HTN) planning, in the Dynamic Variable Commitment Strategy (DVCS). DVCS, like LCFR, is based on a minimal-branching heuristic. Experimental analyses demonstrate that DVCS generally produces a well-focused search <ref> (Tsuneto, Erol, Hendler, & Nau, 1996) </ref>. Our own initial experimental results, presented in Joslin and Pollack (1994), similarly supported the hypothesis that a uniform least-cost flaw repair strategy could be highly effective in reducing the size of the search space in POCL planning.
Reference: <author> Weld, D. S. </author> <year> (1994). </year> <title> An introduction to least commitment planning. </title> <journal> AI Magazine, </journal> <volume> 15 (4), </volume> <pages> 27-61. </pages>
Reference: <author> Wilkins, D. E. </author> <year> (1988). </year> <title> Practical Planning: Extending the Classical AI Paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference: <author> Wilkins, D. E., & Desimone, R. V. </author> <year> (1994). </year> <title> Applying an AI planner to military operations planning. </title> <editor> In Fox, M., & Zweben, M. (Eds.), </editor> <booktitle> Intelligent Scheduling, </booktitle> <pages> pp. 685-708. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA. </address>
Reference: <author> Williamson, M., & Hanks, S. </author> <year> (1996). </year> <title> Flaw selection strategies for value-directed planning. </title> <booktitle> In Proceedings of the Third International Conference on Artificial Intelligence Planning Systems, </booktitle> <pages> pp. 237-244. 262 </pages>
Reference-contexts: Indeed, other researchers have suggested that one reason a LIFO-based strategy may perform well is because it can exploit the decisions made by the system designers in writing the domain operators, since it is in some sense natural to list the most constraining preconditions of an operator first <ref> (Williamson & Hanks, 1996) </ref>. We therefore also collected data for a modified version of UCPOP, in which the preconditions for each step are entered onto the open condition in the reverse of the order in which they would normally be entered.
References-found: 27

