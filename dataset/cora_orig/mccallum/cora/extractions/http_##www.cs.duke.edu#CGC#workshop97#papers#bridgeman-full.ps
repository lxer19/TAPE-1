URL: http://www.cs.duke.edu/CGC/workshop97/papers/bridgeman-full.ps
Refering-URL: http://www.cs.duke.edu/CGC/workshop97/schedule.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fssb,jrf,rt,lvg@cs.brown.edu  agarg@cs.buffalo.edu  
Phone: 2  
Title: InteractiveGiotto: An Algorithm for Interactive Orthogonal Graph Drawing  
Author: Stina S. Bridgeman Jody Fanto Ashim Garg Roberto Tamassia Luca Vismara 
Address: USA  New York at Buffalo, USA  
Affiliation: 1 Center for Geometric Computing, Department of Computer Science Brown University,  Department of Computer Science State University of  
Abstract: We present InteractiveGiotto, an interactive algorithm for orthogonal graph drawing based on the network flow approach to bend minimization.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. C. Biedl and M. Kaufmann. </author> <title> Area-efficient static and incremental graph dar-wings. </title> <editor> In R. Burkard and G. Woeginger, editors, </editor> <booktitle> Algorithms (Proc. ESA '97), volume 1284 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 37-52. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, <ref> [1, 2, 4, 6, 8, 9, 13] </ref>. We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments. <p> Papakostas and Tollis [12] describe four scenarios for interactive orthogonal graph drawing, and present algorithms for two of them. The results of an extensive experimental study comparing the performances of two of those scenarios are reported in [10]. Biedl and Kaufmann <ref> [1] </ref> present a linear time incremental algorithm for orthogonal drawings, where the vertices are given one at a time and their position cannot be changed after the initial placement.
Reference: 2. <author> R. F. Cohen, G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> Dynamic graph drawings: Trees, series-parallel digraphs, and planar ST -digraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 24(5) </volume> <pages> 970-1001, </pages> <year> 1995. </year>
Reference-contexts: Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, <ref> [1, 2, 4, 6, 8, 9, 13] </ref>. We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments.
Reference: 3. <author> P. Eades, W. Lai, K. Misue, and K. Sugiyama. </author> <title> Preserving the mental map of a diagram. </title> <booktitle> In Proceedings of Compugraphics 91, </booktitle> <pages> pages 24-33, </pages> <year> 1991. </year>
Reference-contexts: It is important that the new drawing be as similar as possible to the current one, in order to preserve the mental map the user has of the drawing <ref> [3, 7] </ref>. Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, [1, 2, 4, 6, 8, 9, 13]. We focus our attention on interactive orthogonal graph drawing algorithms.
Reference: 4. <author> W. He and K. Marriott. </author> <title> Constrained graph layout. </title> <editor> In S. North, editor, </editor> <booktitle> Graph Drawing (Proc. GD '96), volume 1190 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 217-232. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, <ref> [1, 2, 4, 6, 8, 9, 13] </ref>. We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments.
Reference: 5. <author> K. Mehlhorn and S. Naher. LEDA: </author> <title> a platform for combinatorial and geometric computing. </title> <journal> Commun. ACM, </journal> <volume> 38 </volume> <pages> 96-102, </pages> <year> 1995. </year>
Reference-contexts: The embedding and the edge crossings of the current drawing are preserved in this step. In the implementation we make use of LEDA, the Library of Efficient Data Structures and Algorithms <ref> [5] </ref>. Orthogonalization This step takes the embedded planar graph produced during the planarization and constructs an orthogonal representation preserving the edge bends, the type of the 90 ffi edge bends, and the number of corners between consecutive edges around each non-fictitious vertex.
Reference: 6. <author> K. Miriyala, S. W. Hornick, and R. Tamassia. </author> <title> An incremental approach to aesthetic graph layout. </title> <booktitle> In Proc. Internat. Workshop on Computer-Aided Software Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, <ref> [1, 2, 4, 6, 8, 9, 13] </ref>. We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments.
Reference: 7. <author> K. Misue, P. Eades, W. Lai, and K. Sugiyama. </author> <title> Layout adjustment and the mental map. </title> <journal> J. Visual Lang. Comput., </journal> <volume> 6 </volume> <pages> 183-210, </pages> <year> 1995. </year>
Reference-contexts: It is important that the new drawing be as similar as possible to the current one, in order to preserve the mental map the user has of the drawing <ref> [3, 7] </ref>. Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, [1, 2, 4, 6, 8, 9, 13]. We focus our attention on interactive orthogonal graph drawing algorithms.
Reference: 8. <author> S. Moen. </author> <title> Drawing dynamic trees. </title> <journal> IEEE Softw., </journal> <volume> 7 </volume> <pages> 21-28, </pages> <year> 1990. </year>
Reference-contexts: Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, <ref> [1, 2, 4, 6, 8, 9, 13] </ref>. We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments.
Reference: 9. <author> S. </author> <title> North. Incremental layout in DynaDAG. </title> <editor> In F. J. Brandenburg, editor, </editor> <booktitle> Graph Drawing (Proc. GD '95), volume 1027 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 409-418. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, <ref> [1, 2, 4, 6, 8, 9, 13] </ref>. We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments.
Reference: 10. <author> A. Papakostas, J. M. Six, and I. G. Tollis. </author> <title> Experimental and theoretical results in interactive orthogonal graph drawing. </title> <editor> In S. North, editor, </editor> <booktitle> Graph Drawing (Proc. GD '96), volume 1190 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 371-386. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Papakostas and Tollis [12] describe four scenarios for interactive orthogonal graph drawing, and present algorithms for two of them. The results of an extensive experimental study comparing the performances of two of those scenarios are reported in <ref> [10] </ref>. Biedl and Kaufmann [1] present a linear time incremental algorithm for orthogonal drawings, where the vertices are given one at a time and their position cannot be changed after the initial placement.
Reference: 11. <author> A. Papakostas and I. G. Tollis. </author> <title> Interactive orthogonal graph drawing. </title> <type> Technical report, </type> <institution> The University of Texas at Dallas, </institution> <year> 1996. </year> <note> http://www.utdallas.edu/~tollis/papers/interactive J.ps. </note>
Reference-contexts: Compaction Same as in Giotto. 3 Using InteractiveGiotto In this section we illustrate the main features of InteractiveGiotto through two examples, shown in Figs. 1 and 2. In the first example, the user incrementally constructs the graph in Fig. 3 of <ref> [11] </ref>. The initial graph drawn by the user is shown in Fig. 1a using grey vertices and non-orthogonal polylines. InteractiveGiotto is executed and the new drawing is shown in Fig. 1b using white vertices. <p> In the next step, the vertices shown in grey in Fig. 2b are deleted by the user. In Fig. 2c, the user, without having redrawn the graph, (a) (b) (e) (f) Fig. 1. Example of use of InteractiveGiotto: an incremental construction of the graph in Fig. 3 of <ref> [11] </ref>. moves the subgraph induced by the five vertices show in grey on the outside of the current drawing, reroutes the two existing edges connecting the subgraph to the rest of the graph, and adds one new edge.
Reference: 12. <author> A. Papakostas and I. G. Tollis. </author> <title> Issues in interactive orthogonal graph drawing. </title> <editor> In F. J. Brandenburg, editor, </editor> <booktitle> Graph Drawing (Proc. GD '95), volume 1027 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 419-430. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments. Papakostas and Tollis <ref> [12] </ref> describe four scenarios for interactive orthogonal graph drawing, and present algorithms for two of them. The results of an extensive experimental study comparing the performances of two of those scenarios are reported in [10]. <p> Army Research Office under grant DAAH04-96-1-0013, by the National Science Foundation under grant CCR-9423847, and by a National Science Foundation Graduate Fellowship. mization. Our algorithm does not appear to fit into any of the scenarios de-scribed in <ref> [12] </ref>; in particular, the general shape of the drawing is preserved, as in the Relative-Coordinates scenario, but the coordinates of some vertices and/or edges may change by more than a small constant after each update.
Reference: 13. <author> K. Ryall, J. Marks, and S. Shieber. </author> <title> An interactive system for drawing graphs. </title> <editor> In S. North, editor, </editor> <booktitle> Graph Drawing (Proc. GD '96), volume 1190 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 387-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Motivated by this type of application, various results on interactive graph drawing algorithms have been recently presented. See, for example, <ref> [1, 2, 4, 6, 8, 9, 13] </ref>. We focus our attention on interactive orthogonal graph drawing algorithms. We recall that in an orthogonal drawing, each vertex is represented as a rectangle and each edge is represented as a chain of alternating horizontal and vertical segments.
Reference: 14. <author> R. Tamassia. </author> <title> New layout techniques for entity-relationship diagrams. </title> <booktitle> In Proc. 4th Internat. Conf. on Entity-Relationship Approach, </booktitle> <pages> pages 304-311, </pages> <year> 1985. </year>
Reference-contexts: This goal is achieved through a new algorithm inspired by that described in <ref> [14] </ref>. The orthogonal representation of the current graph is given by the optimal solution of a minimum cost flow problem in a particular network associated with the current graph.
Reference: 15. <author> R. Tamassia. </author> <title> On embedding a graph in the grid with the minimum number of bends. </title> <journal> SIAM J. Comput., </journal> <volume> 16(3) </volume> <pages> 421-444, </pages> <year> 1987. </year>
Reference-contexts: Orthogonalization In this step, Giotto constructs an orthogonal representation of the planarized graph. This representation consists of a description of the bends along each edge and of the angles between consecutive edges around each vertex. In particular, Giotto uses the algorithm described in <ref> [15] </ref>, which produces an orthogonal representation with the minimum number of edge bends by means of a reduction to a minimum cost flow problem. Compaction In this step an orthogonal drawing is constructed out of the orthogonal representation.
Reference: 16. <author> R. Tamassia, G. Di Battista, and C. Batini. </author> <title> Automatic graph drawing and readability of diagrams. </title> <journal> IEEE Trans. Syst. Man Cybern., </journal> <volume> SMC-18(1):61-79, </volume> <year> 1988. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Giotto <ref> [16] </ref> is a successful general-purpose algorithm for producing orthogonal drawings of graphs, and has been widely used in software visualization systems. It is composed of three steps: Planarization The input graph is, in general, non-planar, i.e., it cannot be drawn in the plane without edge crossings.
References-found: 16

