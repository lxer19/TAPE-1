URL: http://www.cs.huji.ac.il/course/advenv/Guide/tkUsenix91.ps
Refering-URL: http://www.cs.huji.ac.il/course/advenv/Guide/tclguide.html
Root-URL: http://www.cs.huji.ac.il
Title: An X11 Toolkit Based on the Tcl Language  
Author: John K. Ousterhout 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division Electrical Engineering and Computer Sciences University of California  
Abstract: This paper describes a new toolkit for X11 called Tk. The overall functions provided by Tk are similar to those of the standard toolkit Xt. However, Tk is implemented using Tcl, a lightweight interpretive command language. This means that Tk's functions are available not just from C code compiled into the application but also via Tcl commands issued dynamically while the application runs. Tcl commands are used for binding keystrokes and other events to applicationspecific actions, for creating and configuring widgets, and for dealing with geometry managers and the selection. The use of an interpretive language means that any aspect of the user interface may be changed dynamically while an application executes. It also means that many interesting applications can be created without writing any new C code, simply by writing Tcl scripts for existing applications. Furthermore, Tk provides a special send command that allows any Tk-based application to invoke Tcl commands in any other Tk-based application. Send allows applications to communicate in more powerful ways than a selection mechanism and makes it possible to replace monolithic applications with collections of reusable tools. This paper will appear in the Proceedings of the 1991 Winter USENIX Conference. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Asente, P. and Swick, R., with McCormack, J. </author> <title> X Window System Toolkit: The Complete Programmer's Guide and Specification. </title> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference-contexts: 1. Introduction Tk is a new toolkit for the X11 window system [10]. Like other X11 toolkits such as Xt <ref> [1] </ref> or the Andrew toolkit [9], Tk consists of a set of C library procedures intended to simplify the task of constructing windowing applications. The Tk library procedures, like those of other toolkits, serve two general purposes: framework and convenience. <p> In the bottom measurement of the table, about half of the elapsed time was spent executing in the client and about half in the X server. 8. Comparisons Of the existing X11 toolkits, Tk is most similar to Xt <ref> [1] </ref>. The major facilities provided by Tk were inspired by Xt and are similar to the corresponding facilities of Xt. There are also similarities between Tk and the InterViews and Andrew toolkits [5,9] in that all support some sort of widget-like notion to decompose applications.
Reference: [2] <author> Birrell, A. and Nelson, B. </author> <title> ``Implementing Remote Procedure Calls.'' </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 2, No. 1, </volume> <month> February </month> <year> 1986, </year> <pages> pp. 39-59. </pages>
Reference-contexts: Any command that could be invoked within an application may be invoked by other applications using send, including commands to manipulate the application's interface and also commands to manipulate the application itself. Send is a form of remote procedure call <ref> [2] </ref>; as such it provides a more general and powerful form of communication than the selection. For example, Tk-based debuggers and editors can be built as separate programs.
Reference: [3] <author> Hansen, W. </author> <title> ``Enhancing Documents With Embedded Programs: How Ness Extends Insets in the Andrew Toolkit.'' </title> <booktitle> Proc. 1990 International Conference on Computer Languages, </booktitle> <month> March </month> <year> 1990. </year>
Reference-contexts: The most significant difference between Tk and the other toolkits is the presence of Tcl in Tk. Run-time languages are starting to appear in other systems, such as Ness, which is used to embed executable programs into documents in the Andrew toolkit <ref> [3] </ref>, and UIL, which is used to specify interfaces in Motif [7]. However, these languages have three disadvantages relative to Tcl. First, they are less dynamic.
Reference: [4] <author> Libes, D. </author> <title> ``expect: Curing Those Uncontrollable Fits of Interaction.'' </title> <booktitle> Proc. USENIX Summer Conference, </booktitle> <month> June </month> <year> 1990, </year> <pages> pp. 11-15. </pages>
Reference-contexts: An application need only implement a few basic Tcl commands related to the application; when these are combined with the Tcl library a fully-programmable command language results. The paragraphs below summarize a few of the key features of Tcl; see <ref> [4] </ref> and [8] for more information on Tcl and how it has been used. set a 1000 print foo; print bar a command name and the additional fields are arguments for the command.
Reference: [5] <author> Linton, M., Vlissides, J., and Calder, P. </author> <title> ``Composing User Interfaces with InterViews.'' </title> <journal> IEEE Computer, </journal> <volume> Vol. 22, No. 2, </volume> <month> February </month> <year> 1989, </year> <pages> pp. 8-22. </pages>
Reference-contexts: Further support for this view comes from the InterViews system: although it is written in C++ and claims to be object-oriented, the primary benefit claimed for the system is its support for composition <ref> [5] </ref>. 9. Conclusions I believe that Tk provides a large increase in power and flexibility over existing windowing toolkits. Tk's power comes from two sources: the power of programming and the power of building interchangeable tools.
Reference: [6] <institution> Microsoft Windows Software Development Kit, </institution> <note> Guide To Programming, Version 3.0. </note> <institution> Microsoft Corporation, </institution> <year> 1990. </year>
Reference-contexts: I know of no equivalent construct in other X toolkits. The closest existing facility is Microsoft Windows' Dynamic Data Exchange protocol (DDE), which allows applications to communicate in several ways including passing commands for remote execution <ref> [6] </ref>. However, for remote execution to be most useful it must allow access to all the internals of the remote application.
Reference: [7] <editor> OSF/Motif Programmer's Guide, Revision 1.0. </editor> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: Run-time languages are starting to appear in other systems, such as Ness, which is used to embed executable programs into documents in the Andrew toolkit [3], and UIL, which is used to specify interfaces in Motif <ref> [7] </ref>. However, these languages have three disadvantages relative to Tcl. First, they are less dynamic. For example, UIL programs must be compiled before being processed by a running application, and Ness appears to require many decisions to be made statically.
Reference: [8] <author> Ousterhout, J. </author> <title> ``Tcl: An Embeddable Command Language.'' </title> <booktitle> Proc. USENIX Winter Conference, </booktitle> <month> January </month> <year> 1990, </year> <pages> pp. 133-146. </pages>
Reference-contexts: Although Tk's overall purpose is similar to that of other toolkits, its implementation has the unusual property that it is based around the Tcl command language. Tcl is a simple interpretive programming language designed to be embedded in applications and to work cooperatively with C code in the applications <ref> [8] </ref>. Tcl programs can be created and executed dynamically, and all of the functionality of Tk (and of Tk-based applications) is available through Tcl. This gives Tk a greater degree of flexibility, dynamic control, and power than other toolkits. <p> An application need only implement a few basic Tcl commands related to the application; when these are combined with the Tcl library a fully-programmable command language results. The paragraphs below summarize a few of the key features of Tcl; see [4] and <ref> [8] </ref> for more information on Tcl and how it has been used. set a 1000 print foo; print bar a command name and the additional fields are arguments for the command.
Reference: [9] <author> Palay, A., et al. </author> <title> ``The Andrew Toolkit An Overview.'' </title> <booktitle> Proc. USENIX Winter Conference, </booktitle> <month> February </month> <year> 1988, </year> <pages> pp. 9-21. </pages>
Reference-contexts: 1. Introduction Tk is a new toolkit for the X11 window system [10]. Like other X11 toolkits such as Xt [1] or the Andrew toolkit <ref> [9] </ref>, Tk consists of a set of C library procedures intended to simplify the task of constructing windowing applications. The Tk library procedures, like those of other toolkits, serve two general purposes: framework and convenience.
Reference: [10] <author> Scheifler, R., and Gettys, J., with Flowers, J., Newman, R., and Rosenthal, D. </author> <title> X Window System: The Complete Guide to Xlib, X Protocol, ICCCM, XLFD (Second Edition). </title> <publisher> Digital Press, </publisher> <year> 1990. </year> <month> - 18 </month> - 
Reference-contexts: 1. Introduction Tk is a new toolkit for the X11 window system <ref> [10] </ref>. Like other X11 toolkits such as Xt [1] or the Andrew toolkit [9], Tk consists of a set of C library procedures intended to simplify the task of constructing windowing applications. The Tk library procedures, like those of other toolkits, serve two general purposes: framework and convenience. <p> The Selection The X11 Inter-Client Communications Conventions Manual (ICCCM) specifies a complex set of protocols that applications must use to manipulate the selection <ref> [10] </ref>. Tk provides mechanisms to implement the ICCCM protocols and hide as many of their details as possible. If a widget supports the notion of a selection, it registers a C procedure that Tk may call to retrieve the selection when it is in that widget.
References-found: 10

