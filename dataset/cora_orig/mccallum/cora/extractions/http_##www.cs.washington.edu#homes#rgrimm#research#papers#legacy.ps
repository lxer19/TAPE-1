URL: http://www.cs.washington.edu/homes/rgrimm/research/papers/legacy.ps
Refering-URL: http://www.cs.washington.edu/homes/rgrimm/research/papers.html
Root-URL: 
Title: Domain and Type Enforcement for Legacy File Systems  
Author: Robert Grimm 
Abstract: This report describes how to integrate domain and type enforcement (DTE), a form of mandatory access control, with legacy file systems within the SPIN extensible operating system. The design intends to minimize changes to legacy file systems and, at the same time, minimize the performance overhead of the added access control checks. It relies on a secondary file system tree which maps the global file system name space into DTE types and which is linked into from the primary file system tree. The secondary tree is sparse in the sense that it only represents file system nodes that are required by the mapping or that have been visited by file system operations. The design has been implemented as part of the NFS client in SPIN. The measured overhead of expanding the secondary tree and providing access control on directory traversal is up to 19.3% as compared to the insecure implementation. Small file reads incur a minimal access control overhead of less than 3%. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Lee Badger, Karen A. Oostendorp, Wayne G. Mor-rison, Kenneth M. Walker, Christopher D. Vance, David L. Sherman, and Daniel F. Sterne. </author> <title> DTE Firewalls|Initial Measurement and Evaluation Report. </title> <type> Technical Report 0632R, </type> <institution> Trusted Information Systems, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: It is hard to quantitatively compare the two designs since we only have results from micro-benchmarks available, while Badger et al. present a detailed performance analysis of their design in <ref> [1] </ref> based on end-to-end tests. Furthermore, their analysis includes more elaborate setups (spanning clients, servers and firewalls) and uses DTE on the server-side as well. At the same time, their results show a performance overhead from a few percent points up to a factor of two.
Reference: [2] <author> Lee Badger, Daniel F. Sterne, David L. Sherman, Ken-neth M. Walker, and Sheila A. Haghighat. </author> <title> Practical Domain and Type Enforcement for UNIX. </title> <booktitle> In Proceed-igns of the 1995 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 66-77, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: 1 Introduction As part of our effort to address the security issues raised by extensible systems [7], we are currently exploring the use of domain and type enforcement (DTE) <ref> [5, 2, 3] </ref> within the SPIN extensible operating system [4, 10]. DTE, unlike the discretionary access control mechanisms found in Unix-like file systems [9], is a form of mandatory access control. As such, it allows for the specification and enforcement of systemwide security policies.
Reference: [3] <author> Lee Badger, Daniel F. Sterne, David L. Sherman, Ken-neth M. Walker, and Sheila A. Haghighat. </author> <title> A Domain and Type Enforcement UNIX Prototype. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <pages> pages 127-140, </pages> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: 1 Introduction As part of our effort to address the security issues raised by extensible systems [7], we are currently exploring the use of domain and type enforcement (DTE) <ref> [5, 2, 3] </ref> within the SPIN extensible operating system [4, 10]. DTE, unlike the discretionary access control mechanisms found in Unix-like file systems [9], is a form of mandatory access control. As such, it allows for the specification and enforcement of systemwide security policies. <p> Ideally, there should be one central exception framework that is extensible as well (in a straight-forward manner) to meet the needs of different extensions. 3 The file system core interfaces provide a common framework for all file systems within SPIN 4 Related Work Badger et al. <ref> [3] </ref> use a similar design to provide DTE-based access control on a NFS client in the Unix operating system. Their system differs from the system described in this paper in three aspects.
Reference: [4] <author> Brian N. Bershad, Stefan Savage, Przemys law Pardyak, Emin Gun Sirer, Marc Fiuczynski, David Becker, Susan Eggers, and Craig Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction As part of our effort to address the security issues raised by extensible systems [7], we are currently exploring the use of domain and type enforcement (DTE) [5, 2, 3] within the SPIN extensible operating system <ref> [4, 10] </ref>. DTE, unlike the discretionary access control mechanisms found in Unix-like file systems [9], is a form of mandatory access control. As such, it allows for the specification and enforcement of systemwide security policies.
Reference: [5] <author> W. E. Boebert and R. Y. Kain. </author> <title> A Practical Alternative to Hierarchical Integrity Policies. </title> <booktitle> In Proceedings of the 17th National Computer Security Conference, </booktitle> <pages> pages 18-27, </pages> <address> Gaithersburg, Maryland, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction As part of our effort to address the security issues raised by extensible systems [7], we are currently exploring the use of domain and type enforcement (DTE) <ref> [5, 2, 3] </ref> within the SPIN extensible operating system [4, 10]. DTE, unlike the discretionary access control mechanisms found in Unix-like file systems [9], is a form of mandatory access control. As such, it allows for the specification and enforcement of systemwide security policies.
Reference: [6] <author> Robert Grimm and Brian N. Bershad. </author> <title> Access Control in Extensible Systems. </title> <type> Technical report, </type> <institution> University of Washington, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: The entire core security services based on DTE, i.e. the design of access control for extensible systems and the implementation within the SPIN extensible operating system, are described in detail in <ref> [6] </ref>. <p> The implementation directly follows from above design with one notable difference: Instead of simply storing the DTE type at each node in the secondary tree, the implementation also maintains a pointer to a reduced DTE access matrix entry <ref> [6] </ref>. The reduced DTE access matrix entry represents that part of the global DTE access matrix that, for a given DTE type, maps a DTE domain to an access mode.
Reference: [7] <author> Robert Grimm and Brian N. Bershad. </author> <title> Security for Extensible Systems. </title> <booktitle> In Proceedings of the 6th Workshop on Hot Topics in Operating Systems (HotOS-VI), </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: 1 Introduction As part of our effort to address the security issues raised by extensible systems <ref> [7] </ref>, we are currently exploring the use of domain and type enforcement (DTE) [5, 2, 3] within the SPIN extensible operating system [4, 10]. DTE, unlike the discretionary access control mechanisms found in Unix-like file systems [9], is a form of mandatory access control.
Reference: [8] <author> John H. Howard, Michael L. Kazar, Sherri G Menees, David A. Nichols, M. Satyanarayanan, Robert N. Side-botham, and Michael J. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: However, legacy file systems such as NFS [11] and AFS <ref> [12, 8] </ref> do not support DTE labels, nor do they perform the access checks required by DTE. At the same time, these network file systems are widely used for sharing persistent data, and should thus be fully integrated into SPIN.
Reference: [9] <author> Marshall Kirk McKusick, Keith Bostic, Michael J. Karels, and John S. Quarterman. </author> <title> The Design and Implementation of the 4.4BSD Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1996. </year>
Reference-contexts: DTE, unlike the discretionary access control mechanisms found in Unix-like file systems <ref> [9] </ref>, is a form of mandatory access control. As such, it allows for the specification and enforcement of systemwide security policies.
Reference: [10] <author> Przemys law Pardyak and Brian N. Bershad. </author> <title> Dynamic Binding for an Extensible System. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 201-212, </pages> <address> Seattle, Washing-ton, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: 1 Introduction As part of our effort to address the security issues raised by extensible systems [7], we are currently exploring the use of domain and type enforcement (DTE) [5, 2, 3] within the SPIN extensible operating system <ref> [4, 10] </ref>. DTE, unlike the discretionary access control mechanisms found in Unix-like file systems [9], is a form of mandatory access control. As such, it allows for the specification and enforcement of systemwide security policies.
Reference: [11] <author> Russel Sandberg, David Goldberg, Steve Kleiman, Dan Walsh, and Bob Lyon. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> In Proceedings of 1985 Summer USENIX, </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: However, legacy file systems such as NFS <ref> [11] </ref> and AFS [12, 8] do not support DTE labels, nor do they perform the access checks required by DTE. At the same time, these network file systems are widely used for sharing persistent data, and should thus be fully integrated into SPIN.
Reference: [12] <author> M. Satyanarayanan, John H. Howard, David A. Nichols, Robert N. Sidebotham, Alfred Z. Spector, and Michael J. West. </author> <title> The ITC Distributed File System: </title> <booktitle> Principles and Design. In Proceedings of the 10th Symposium on Operating Systems Principles, </booktitle> <pages> pages 35-50, </pages> <address> Orcas Island, Washington, </address> <month> December </month> <year> 1985. </year> <month> 6 </month>
Reference-contexts: However, legacy file systems such as NFS [11] and AFS <ref> [12, 8] </ref> do not support DTE labels, nor do they perform the access checks required by DTE. At the same time, these network file systems are widely used for sharing persistent data, and should thus be fully integrated into SPIN.
References-found: 12

