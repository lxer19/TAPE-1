URL: http://www.cse.ogi.edu/~lingliu/ActivityFlow/icde98-submit.ps
Refering-URL: http://www.cse.ogi.edu/~lingliu/courses/cse515/plan.html
Root-URL: http://www.cse.ogi.edu
Email: lingliu@cs.ualberta.ca  calton@cse.ogi.edu  
Title: Methodical Restructuring of Complex Workflow Activities  
Author: Ling Liu Calton Pu 
Keyword: Cooperative information systems, complex activities, enterprise-wide workflow applica tions.  
Note: Supported partially by NSERC grant OGP-0172859 and NSERC grant STR-0181014 Supported partially by ARPA grant N00014-94-1-0845, NSF grant IRI-9510112, and grants from the Hewlett-Packard Company and Tektronix.  
Address: GSB 615, Edmonton, Alberta T6G 2H1 Canada  P.O.Box 91000 Portland Oregon 97291-1000 USA  
Affiliation: Dept. of Computing Science University of Alberta  Dept. of Computer Science Oregon Graduate Institute  
Abstract: In this paper, we describe a family of activity-split and activity-join operations with a notion of validity. The key idea of introducing the set of activity-split and activity-join operations is to allow users to restructure ongoing activities in anticipation of uncertainty so that any significant performance loss due to unexpected unavailablity or delay of shared resources can be avoided or reduced through release of early committed resources or transferring ownership of uncommitted resources. To guarantee the correctness of new activities generated by activity-split or activity- join operations, we define the notion of validity of activity restructuring operations and identify the cases where the correctness is ensured and the cases where activity-split or activity-join are illegal due to the inconsistency incurred. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ansari, L. Ness, M. Rusinkiewicz, and A. Sheth. </author> <title> Using flexible transactions to support multi-system telecommunication applications. </title> <booktitle> In Proceedings of the 18th International Conference on Very Large Data Bases, </booktitle> <pages> pages 65-76, </pages> <year> 1992. </year>
Reference: [2] <author> F. Bancilhon, W. Kim, and H. Korth. </author> <title> A model for cad transactions. </title> <booktitle> In Proceeding of the 11th International Conference on Very Large Databases, </booktitle> <pages> pages 25-33. </pages> <publisher> Morgan Kauffman, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Since 1985 <ref> [2] </ref> significant results have been produced in the area of database support for collaborative applications. At the same time, the continual expansion of network bandwidth and the increase in computing speed have raised both the quantity and complexity of data types. <p> Similarly, AJoin operations are specialized into join-by-group and join-by-merge. Comparing with the early research on split-transactions [25] and Cooperative Transactions <ref> [2, 23] </ref>, these activity restructuring meta operations are novel in at least two aspects. First, a formal notion of the validity of activity restructuring operations is introduced to guarantee the correctness of new activities generated by activity-split or activity-join operations. <p> A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. <p> The demand for defining new ETMs and redefining existing ETMs as needed becomes increasingly critical towards supporting for a variety of workflow applications with diverse or possibly conflicting business requirements [15, 21]. The TAM development is mostly inspired by the early work on split-transactions [25], Cooperative Transactions <ref> [2] </ref>, and Transaction Groups [24]. <p> The TAM development is mostly inspired by the early work on split-transactions [25], Cooperative Transactions [2], and Transaction Groups [24]. Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups <ref> [2, 25, 24] </ref>, the interactions among siblings are either limited to static and one-shot design of transaction groups [24, 2], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [25]. <p> Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups [2, 25, 24], the interactions among siblings are either limited to static and one-shot design of transaction groups <ref> [24, 2] </ref>, or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [25].
Reference: [3] <author> R. Barga. </author> <title> A Reflective Framework for the Implementation of Extended Transactions. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, Expected, </institution> <year> 1996. </year>
Reference-contexts: Fortunately, some recent results in implementation of extended transaction models <ref> [4, 3] </ref> and their hand-on experience with the Transarc Encina show that it is practically possible to add semantic concurrency control adaptors on top of commercial OLTP monitors to allow application-specific dependencies to be incorporated into the existing transaction management systems. <p> We are currently working towards building a TAM adapter based on the micro-protocols developed by <ref> [4, 3, 28] </ref> on top of the Transarc Encina. The third component is the support for specializations of the activity-split and activity-join meta operations (e.g., ASplit and AJoin).
Reference: [4] <author> R. Barga and C. Pu. </author> <title> A practical and modular implementation technique of extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Fortunately, some recent results in implementation of extended transaction models <ref> [4, 3] </ref> and their hand-on experience with the Transarc Encina show that it is practically possible to add semantic concurrency control adaptors on top of commercial OLTP monitors to allow application-specific dependencies to be incorporated into the existing transaction management systems. <p> We are currently working towards building a TAM adapter based on the micro-protocols developed by <ref> [4, 3, 28] </ref> on top of the Transarc Encina. The third component is the support for specializations of the activity-split and activity-join meta operations (e.g., ASplit and AJoin). <p> On the practical side, we are looking into possibilities of building value-added adapters to support TAM on top of existing on-line transaction processing systems <ref> [4] </ref> or other activity-based operational systems.
Reference: [5] <author> P. A. Bernstein, J. Rothnie, N. Goodman, and C. Papadimitriou. </author> <title> The concurrency control mechanism of sdd-1: A system for distributed databases (the full redundant case). </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 4(3), </volume> <month> May </month> <year> 1978. </year>
Reference-contexts: The new version of the object is written back to the parent activity's access set when the subactivity that initiated the access to the object commits or comes to a breakpoint. A breakpoint <ref> [5, 13] </ref> of an activity is a point in its execution where it can interleave with other activities.
Reference: [6] <author> P. Chrysanthis and K. Ramamritham. </author> <title> Acta: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <year> 1990. </year>
Reference-contexts: Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions <ref> [6] </ref>. Furthermore, most of the ETMs proposed so far are system supporting built-in ETMs, rather than system supporting user-defined ETMs.
Reference: [7] <author> P. Chrysanthis and K. Ramamritham. </author> <title> Acta: The saga continues. </title> <booktitle> In Elmagarmid [11], </booktitle> <pages> pages 349-397, </pages> <year> 1992. </year>
Reference-contexts: In other words, the activity T may commit even if one of its 2 component activities is aborted. Similar to the saga transactions <ref> [14, 7] </ref>, the commit of a subactivity in TAM is independent of the commit of its parent activity. If an activity aborts, then all its children that are in begin state are aborted; and its committed children, however, are compensated for.
Reference: [8] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing long-running activities with triggers and transactions. </title> <booktitle> In Proceedings of the ACM SIGMOD, </booktitle> <year> 1991. </year>
Reference-contexts: activities of a ASplit by utilizing the access sets (recall Section 2.3) of both the input activity of ASplit and its parent activity, the specialization type of the split, and the additional activity dependencies 18 added through programmer-guided split-activities. 6 Comparison with Related Work Several activity models have been proposed <ref> [9, 8, 26] </ref> to support declarative specification of control flows within activities. Features of long running activities [9, 8] include an automatic compensation capability and the use of ECA-rules for monitoring activities. <p> Features of long running activities <ref> [9, 8] </ref> include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [26] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. <p> Features of long running activities [9, 8] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [26] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., <ref> [9, 8, 26] </ref>) and workflow systems (e.g., [15, 21]) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities. For example, the ECA-rules are very powerful tools.
Reference: [9] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transactional model for long-running activities. </title> <booktitle> In Proceedings of the 17th Very Large Databases, </booktitle> <pages> pages 113-122, </pages> <year> 1991. </year>
Reference-contexts: activities of a ASplit by utilizing the access sets (recall Section 2.3) of both the input activity of ASplit and its parent activity, the specialization type of the split, and the additional activity dependencies 18 added through programmer-guided split-activities. 6 Comparison with Related Work Several activity models have been proposed <ref> [9, 8, 26] </ref> to support declarative specification of control flows within activities. Features of long running activities [9, 8] include an automatic compensation capability and the use of ECA-rules for monitoring activities. <p> Features of long running activities <ref> [9, 8] </ref> include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [26] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. <p> Features of long running activities [9, 8] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [26] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., <ref> [9, 8, 26] </ref>) and workflow systems (e.g., [15, 21]) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities. For example, the ECA-rules are very powerful tools.
Reference: [10] <author> A. Deacon, H. Schek, and G. Weikum. </author> <title> Semantic-based multilevel transaction management in federated systems. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <pages> pages 452-461, </pages> <year> 1994. </year>
Reference-contexts: A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments.
Reference: [11] <author> A. Elmagarmid. </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Calif.), </address> <year> 1992. </year>
Reference-contexts: A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments.
Reference: [12] <author> A. Elmagarmid, Y. Leu, W. Litwin, and M. Rusinkiewicz. </author> <title> A multidatabase transaction model for interbase. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <year> 1990. </year>
Reference-contexts: A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments.
Reference: [13] <author> H. Garcia-Molina. </author> <title> Using semantic knowledge for transaction processing in a distributed database. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 8(3), </volume> <month> June </month> <year> 1983. </year>
Reference-contexts: The new version of the object is written back to the parent activity's access set when the subactivity that initiated the access to the object commits or comes to a breakpoint. A breakpoint <ref> [5, 13] </ref> of an activity is a point in its execution where it can interleave with other activities.
Reference: [14] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of ACM SIGMOD Int. Conference on Management of Data, </booktitle> <pages> pages 462-473, </pages> <year> 1987. </year>
Reference-contexts: In other words, the activity T may commit even if one of its 2 component activities is aborted. Similar to the saga transactions <ref> [14, 7] </ref>, the commit of a subactivity in TAM is independent of the commit of its parent activity. If an activity aborts, then all its children that are in begin state are aborted; and its committed children, however, are compensated for. <p> A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments.
Reference: [15] <author> D. Georgakopoulos and M. Hornick. </author> <title> An overview of workflow management: From process modeling to workflow automation infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> (3):119-153, 1995. 
Reference-contexts: The cooperative model [26] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., [9, 8, 26]) and workflow systems (e.g., <ref> [15, 21] </ref>) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities. For example, the ECA-rules are very powerful tools. <p> Furthermore, most of the ETMs proposed so far are system supporting built-in ETMs, rather than system supporting user-defined ETMs. The demand for defining new ETMs and redefining existing ETMs as needed becomes increasingly critical towards supporting for a variety of workflow applications with diverse or possibly conflicting business requirements <ref> [15, 21] </ref>. The TAM development is mostly inspired by the early work on split-transactions [25], Cooperative Transactions [2], and Transaction Groups [24].
Reference: [16] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings of the 1994 IEEE Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <month> Feb </month> <year> 1994. </year>
Reference: [17] <author> G. Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/on.html for updates. </note>
Reference: [18] <author> L. Liu and R. Meersman. </author> <title> The basic building blocks for modeling communication behavior of complex objects: an activity-driven approach. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 21(3) </volume> <pages> 157-207, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Section 5 considers implementation issues, and Section 6 summarizes the related work. We conclude 1 the paper in Section 7. 2 The Reference Activity Model TAM In this section, we briefly introduce the transactional activity model (TAM) <ref> [18, 20] </ref> which is used as the reference activity model in this paper to define the semantics and validity of activity-split and activity-join meta operations. 2.1 Activities, Activity Patterns, and Activity Composition Hierarchy Activities in TAM are specified by activity templates or so called parameterized activity patterns. <p> An activity pattern describes concrete activities occurring in a particular organization. Each concrete activity can be seen as an instantiation of its activity pattern. Informally, an activity pattern consists of objects, messages, message exchange constraints, preconditions, postconditions, and triggering conditions <ref> [18] </ref>. TAM distinguishes two types of activity patterns: elementary activity patterns and composite activity patterns. An elementary activity pattern is a program that consists of transaction operations such as Begin, a sequence of Read and Write operations, and Commit or Abort [20]. <p> The first component is the support for specification and certification of activity dependencies. We have shown the flavor of TAM activity specification language for capturing application-specific activity dependencies of composite activities in this paper (recall Section 2). The formalism developed in <ref> [18] </ref> can be employed to capture and manage the interaction semantics involved in an elementary activity. We are currently exploring the possibility of using or adapting production software, such as Caprera from Tactica (see URL http://www.tactica.com/) for managing and maintaining the activity dependency specifications.
Reference: [19] <author> L. Liu and C. Pu. </author> <title> Correctness issues for composition and restructuring of activities. </title> <type> Technical Report TR97, </type> <institution> University of Alberta, Department of Computing Science. </institution>
Reference-contexts: Unfortunately, as shown in Figure 7, only serial split, serial-alternative split, and unnesting-split operations are valid for internal node splitting. 2 A formal proof of this proposition is omitted in this paper due to the space restriction. Readers may refer to our technical report <ref> [19] </ref> for detail. 11 3.3 Activity-join Operations The inverse operation of activity-split, called activity-join, can combine results of several ongoing sub-activities together and release them atomically, as if they had always been a single activity. <p> To ensure the correctness criteria of activity-join operations, the merged or grouped activities must preserve all application-specific activity dependencies, such as subactivity execution dependencies, sub-activity interleaving dependencies and user-defined state dependency dependencies. Due to the space limitation, we here omit the algorithms <ref> [19] </ref> for correctness ensurance of activity-join operations. We provide a concrete example in Section 4.4. <p> U ser 2 accepts the work being delegated by U ser 1 and merges the work of U ser 1 into his history, since both histories belong to the same pattern TeleConnect and thus are mergeable <ref> [19] </ref>. In this case the merge is trivial because the history of U ser 2 at the starting point is empty. U ser 2 then executes a6 of A 6 :AllocateLine2, a7 of A 7 :AllocateSpan, and a9 of A 9 :AllocateSwitch2. <p> The formal definition of the notion of activity history (complete and partial) and the correctness proof of merging multiple user activities by using activity-join operations are beyond of the scope of this paper and are reported in <ref> [19] </ref>. 1 Given an activity T , an activity history of T is a sequence of executions of subactivities of T 17 5 Implementation Issues In this section we outline the key implementation issues and our approach to supporting TAM and its activity restructuring meta operations in real applications. <p> We have done some initial study on the correctness properties of concurrent activity executions, such as compatibility and mergeability, using user-defined activity dependencies <ref> [19] </ref>.
Reference: [20] <author> L. Liu and C. Pu. </author> <title> A transactional activity model for organizing open-ended cooperative activities. </title> <type> Technical Report TR96-11, </type> <institution> Department of Computer Science, University of Alberta. </institution>
Reference-contexts: Section 5 considers implementation issues, and Section 6 summarizes the related work. We conclude 1 the paper in Section 7. 2 The Reference Activity Model TAM In this section, we briefly introduce the transactional activity model (TAM) <ref> [18, 20] </ref> which is used as the reference activity model in this paper to define the semantics and validity of activity-split and activity-join meta operations. 2.1 Activities, Activity Patterns, and Activity Composition Hierarchy Activities in TAM are specified by activity templates or so called parameterized activity patterns. <p> TAM distinguishes two types of activity patterns: elementary activity patterns and composite activity patterns. An elementary activity pattern is a program that consists of transaction operations such as Begin, a sequence of Read and Write operations, and Commit or Abort <ref> [20] </ref>. We refer to an execution of an elementary activity pattern as an elementary activity. A composite activity pattern consists of a tree of composite or elementary activity patterns and a set of user-defined activity dependencies. <p> They capture complex interaction dependencies between activities that have no hierarchical composition relationship with each other. Examples include constraints on the occurrence of a subactivity execution and the temporal precedence of execution of subactivities at the same abstraction level and across different levels in the activity composition hierarchy <ref> [20] </ref>. TAM provides four constructs for specification of user-defined activity dependencies. They are precede, enable, disable, and compatible. The construct precede is designed to capture the temporary precedence dependencies and the existence dependencies between two activities.
Reference: [21] <author> C. Mohan. </author> <title> Advanced Transaction Models Survey and Critique. </title> <booktitle> Tutorial presented at the ACM SIGMOD international conference, </booktitle> <year> 1994. </year>
Reference-contexts: The cooperative model [26] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., [9, 8, 26]) and workflow systems (e.g., <ref> [15, 21] </ref>) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities. For example, the ECA-rules are very powerful tools. <p> Furthermore, most of the ETMs proposed so far are system supporting built-in ETMs, rather than system supporting user-defined ETMs. The demand for defining new ETMs and redefining existing ETMs as needed becomes increasingly critical towards supporting for a variety of workflow applications with diverse or possibly conflicting business requirements <ref> [15, 21] </ref>. The TAM development is mostly inspired by the early work on split-transactions [25], Cooperative Transactions [2], and Transaction Groups [24].
Reference: [22] <author> C. Mohan, G. Alonso, R. Gunthor, and M. Kamath. Exotica: </author> <title> A research prespective on workflow management systems. </title> <journal> In IEEE Bulletin of the Technical Committee on Data Engineering, </journal> <pages> pages 19-26, </pages> <month> March </month> <year> 1995, </year> <note> Vol.18, No.1. </note>
Reference-contexts: A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments.
Reference: [23] <author> M. Nodine, S. Ramaswamy, and S. Zdonik. </author> <title> A cooperative transaction model for design databases. </title> <booktitle> In Elmagarmid [11], </booktitle> <pages> pages 53-85, </pages> <note> Chapter 3, </note> <year> 1992. </year>
Reference-contexts: Similarly, AJoin operations are specialized into join-by-group and join-by-merge. Comparing with the early research on split-transactions [25] and Cooperative Transactions <ref> [2, 23] </ref>, these activity restructuring meta operations are novel in at least two aspects. First, a formal notion of the validity of activity restructuring operations is introduced to guarantee the correctness of new activities generated by activity-split or activity-join operations.
Reference: [24] <author> M. Nodine and S. Zdonik. </author> <title> Cooperative transaction hierarchies: a transaction model to support design applications. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <pages> pages 83-94, </pages> <year> 1990. </year>
Reference-contexts: In TAM, the visibility of an activity is defined in terms of the object access set of its parent activity, which forms a visibility dependency between the given activity and its parent activity. TAM uses the multiple object version scheme <ref> [24] </ref> to define the notion of visibility in the presence of concurrent execution of activities, that is, object versions are created and maintained at different points in the activity hierarchy. <p> A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. <p> The TAM development is mostly inspired by the early work on split-transactions [25], Cooperative Transactions [2], and Transaction Groups <ref> [24] </ref>. <p> The TAM development is mostly inspired by the early work on split-transactions [25], Cooperative Transactions [2], and Transaction Groups [24]. Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups <ref> [2, 25, 24] </ref>, the interactions among siblings are either limited to static and one-shot design of transaction groups [24, 2], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [25]. <p> Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups [2, 25, 24], the interactions among siblings are either limited to static and one-shot design of transaction groups <ref> [24, 2] </ref>, or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [25].
Reference: [25] <author> C. Pu, G. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year> <month> 21 </month>
Reference-contexts: In addition, the growing sophistication and intricacy of collaborative applications, such as CASE tool designs, CAD/CAM projects, and business workflow information systems, pushed the limits of previous results on transactional support for open-ended cooperative activities. Of the three main characteristics <ref> [25] </ref> of the cooperative activities, the first two, uncertain duration and unpredictable development , are aggravated by the increased necessity of accessing and sharing data over widely distributed information sources, and the third characteristics, flexible interaction among concurrent activities, has become an increasingly higher challenge due to the growing complexity of <p> ASplit operations are specialized into: (1) a serial split by a precede dependency, which requires a serial execution, (2) a parallel split by a compatible dependency, and (3) an unnesting split otherwise. Similarly, AJoin operations are specialized into join-by-group and join-by-merge. Comparing with the early research on split-transactions <ref> [25] </ref> and Cooperative Transactions [2, 23], these activity restructuring meta operations are novel in at least two aspects. First, a formal notion of the validity of activity restructuring operations is introduced to guarantee the correctness of new activities generated by activity-split or activity-join operations. <p> We are currently looking into methods and algorithms to build activity restructuring adapters that can map activity-split meta operations into the split-transactions <ref> [25] </ref> that handle only the leaf nodes that are atomic transactions. For example, the split-transactions require the explicit provision of readsets and writesets in a call to split a transaction into two atomic transactions, which is more difficult for programmers to use when splitting activities of deeply nested composition hierarchy. <p> A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. <p> The demand for defining new ETMs and redefining existing ETMs as needed becomes increasingly critical towards supporting for a variety of workflow applications with diverse or possibly conflicting business requirements [15, 21]. The TAM development is mostly inspired by the early work on split-transactions <ref> [25] </ref>, Cooperative Transactions [2], and Transaction Groups [24]. <p> The TAM development is mostly inspired by the early work on split-transactions [25], Cooperative Transactions [2], and Transaction Groups [24]. Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups <ref> [2, 25, 24] </ref>, the interactions among siblings are either limited to static and one-shot design of transaction groups [24, 2], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [25]. <p> is supported by Cooperative Transactions or transaction groups [2, 25, 24], the interactions among siblings are either limited to static and one-shot design of transaction groups [24, 2], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call <ref> [25] </ref>. TAM differs from these models by three distinct features: (1) TAM activity specification language allows the users to specify activity composition hierarchy and activity dependencies declaratively and incrementally.
Reference: [26] <author> M. Rusinkiewicz, W. Klas, T. Tesch, J. Wasch, and P.Muth. </author> <title> Towards a cooperative activity model the coopertive activity model. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <pages> pages 194-205, </pages> <year> 1995. </year>
Reference-contexts: activities of a ASplit by utilizing the access sets (recall Section 2.3) of both the input activity of ASplit and its parent activity, the specialization type of the split, and the additional activity dependencies 18 added through programmer-guided split-activities. 6 Comparison with Related Work Several activity models have been proposed <ref> [9, 8, 26] </ref> to support declarative specification of control flows within activities. Features of long running activities [9, 8] include an automatic compensation capability and the use of ECA-rules for monitoring activities. <p> Features of long running activities [9, 8] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model <ref> [26] </ref> achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. <p> Features of long running activities [9, 8] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [26] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., <ref> [9, 8, 26] </ref>) and workflow systems (e.g., [15, 21]) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities. For example, the ECA-rules are very powerful tools.
Reference: [27] <author> J. Wasch and A. Reuter. </author> <title> The contract model. </title> <booktitle> In Elmagarmid [11], </booktitle> <pages> pages 219-264, </pages> <note> Chapter 7, </note> <year> 1992. </year>
Reference-contexts: A number of extended transaction models (ETMs) <ref> [10, 11, 12, 14, 2, 22, 24, 25, 27] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments.
Reference: [28] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> Adaptable, efficient, and modular coordination of distributed extended transactions. </title> <booktitle> In Proceeding of the International Conference on Parallel and Distributed Databases, </booktitle> <year> 1996. </year> <month> 22 </month>
Reference-contexts: We are currently working towards building a TAM adapter based on the micro-protocols developed by <ref> [4, 3, 28] </ref> on top of the Transarc Encina. The third component is the support for specializations of the activity-split and activity-join meta operations (e.g., ASplit and AJoin).
References-found: 28

