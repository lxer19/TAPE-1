URL: http://www.cs.ucla.edu/classes/cs219/NS/tcl-debug-1.7/tcl-debug.ps
Refering-URL: http://www.cs.ucla.edu/classes/cs219/NS/tcl-debug-1.7/
Root-URL: http://www.cs.ucla.edu
Address: CA 3  
Affiliation: Berkeley,  
Date: June 10-11, 1993  
Note: Tcl/Tk Workshop  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ousterhout, John, </author> <title> Tcl: An Embeddable Command Language, </title> <booktitle> Proceedings of the Winter 1990 USENIX Conference, </booktitle> <address> Washington, D.C., </address> <month> January 22-26, </month> <year> 1990. </year>
Reference-contexts: The third part describes the design and implementation of the debugger. View by the Application User This section of the paper is a debugger tutorial which shows the application users view of the debugger. For the sake of concreteness, Expect <ref> [1] </ref> will be used as the application. However, any other application using the debugger will work similarly. Starting the Debugger The debugger is initially invoked in an application-dependent way. In Expect, the debugger is started by using the ag -D 1.
Reference: [2] <author> Ousterhout, John, </author> <title> Tcl(3) Overview of Tool Command Language Facilities, unpublished manual page, </title> <institution> University of California at Berkeley, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: For instance, Expect evaluates the Tcl procedure prompt1 each time it prepares to prompt the user and prompt2 if the user has entered a partial command. Expects procedure to ignore functions is defined as: static int ignore_procs (char *s) - return ( (s [0] == 'p') && (s <ref> [2] </ref> == 'o') && (s [4] == 'p') && ((s [6] == '1') || (s [7] == '"0')); While avoiding strcmp may be excessive, this function should nonetheless be written efficient ly since it is called very frequently.
Reference: [3] <author> Libes, Don, </author> <title> Expect: Curing Those Uncontrollable Fits of Interaction, </title> <booktitle> Proceedings of the Summer 1990 USENIX Conference, </booktitle> <pages> pp. 183-192, </pages> <address> Anaheim, CA, </address> <month> June 11-15, </month> <year> 1990. </year>
Reference: [4] <author> Libes, Don, </author> <title> Expect: Scripts for Controlling Interactive Programs, </title> <journal> Computing Systems, pp. </journal> <volume> 99-126, Vol. 4, No. 2, </volume> <publisher> University of California Press Journals, </publisher> <address> CA, </address> <month> Spring </month> <year> 1991. </year>
Reference-contexts: Expects procedure to ignore functions is defined as: static int ignore_procs (char *s) - return ( (s [0] == 'p') && (s [2] == 'o') && (s <ref> [4] </ref> == 'p') && ((s [6] == '1') || (s [7] == '"0')); While avoiding strcmp may be excessive, this function should nonetheless be written efficient ly since it is called very frequently. Implementation This section describes some of the more interesting parts of the debugger.
Reference: [5] <author> Lehenbauer, Karl, </author> <title> A Source Level Debugger for Tcl, Usenet Message-ID: </title> <address> &lt;1992Jan03.220658.22059@NeoSo-ft.com&gt;, </address> <month> January 3, </month> <year> 1992. </year>
Reference-contexts: However, since the output is destined only for user viewing, the debugger can afford to err in cases that users are unlikely to notice. The debugger uses heuristics for reconstructing the program output. Other Debuggers This debugger can be compared to Karl Lehen-bauers debugger <ref> [5] </ref> (from hereon referred to as KD). Besides KD and the debugger described in this paper (from hereon referred to as DD) no other Tcl debuggers have been constructed. This comparison will be brief because KD was never completed although it is functional.
Reference: [6] <author> Libes, Don, Expectk, </author> <note> unpublished manual page, </note> <institution> National Institute of Standards and Technology, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: Expects procedure to ignore functions is defined as: static int ignore_procs (char *s) - return ( (s [0] == 'p') && (s [2] == 'o') && (s [4] == 'p') && ((s <ref> [6] </ref> == '1') || (s [7] == '"0')); While avoiding strcmp may be excessive, this function should nonetheless be written efficient ly since it is called very frequently. Implementation This section describes some of the more interesting parts of the debugger. <p> While the debugger can be used with graphic applications (e.g., Tk applications), the debugger is currently intended only to interact with the user in a dumb terminal window. It should be possible to use Expectk <ref> [6] </ref> to write a GUI for the debugger using only Tk and Expect commands. Building a GUI-based debugger without using Expectk or one of the Expect libraries may require significant rewriting to remove the emphasis on line-oriented interaction.
References-found: 6

