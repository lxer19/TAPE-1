URL: http://www.robotics.stanford.edu/~murali/papers/rects-bsp-implementation.ps.gz
Refering-URL: http://www.robotics.stanford.edu/~murali/papers/papers.html
Root-URL: http://www.robotics.stanford.edu
Email: Email: fpankaj,tmax,jsvg@cs.duke.edu  
Title: Practical Techniques for Constructing Binary Space Partitions for Orthogonal Rectangles  
Author: Pankaj K. Agarwal T. M. Murali Jeffrey Scott Vitter 
Address: Box 90129, Durham, NC 27708-0129  
Affiliation: Center for Geometric Computing Department of Computer Science, Duke University  
Abstract: We present the first systematic comparison of the performance of algorithms that construct Binary Space Partitions for orthogonal rectangles in R 3 . We compare known algorithms with our implementation of a variant of a recent algorithm of Agarwal et al. [1]. We show via an empirical study that their algorithm constructs BSPs of near-linear size in practice and performs better than most of the other algorithms in the literature. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, E. F. Grove, T. M. Murali, and J. S. Vit-ter, </author> <title> Binary space partitions for fat rectangles, </title> <booktitle> Proceedings of the 37th IEEE Annual Symposium on foundations of Computer Science (FOCS '96), </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) [3, 5] is a versatile and popular data structure, with applications in many problems|hidden-surface removal, global illumination, shadow generation, solid geometry, geometric data repair, ray tracing, network design, and surface simplification; see <ref> [1] </ref> for a detailed list of references. The efficiency of most BSP-based algorithms depends on the size and/or the depth of the BSP (we formally define the size of a BSP later). Therefore, several algorithms have been developed to construct BSPs of small size and depth; see [1] for a list <p> surface simplification; see <ref> [1] </ref> for a detailed list of references. The efficiency of most BSP-based algorithms depends on the size and/or the depth of the BSP (we formally define the size of a BSP later). Therefore, several algorithms have been developed to construct BSPs of small size and depth; see [1] for a list of references. Recently, Agarwal et al. [1] developed an algorithm that constructs a BSP for orthogonal rectangles in R 3 when most rectangles have aspect ratio bounded by a constant. We have implemented their algorithm to study its performance on "real" data sets. <p> Therefore, several algorithms have been developed to construct BSPs of small size and depth; see <ref> [1] </ref> for a list of references. Recently, Agarwal et al. [1] developed an algorithm that constructs a BSP for orthogonal rectangles in R 3 when most rectangles have aspect ratio bounded by a constant. We have implemented their algorithm to study its performance on "real" data sets. We have also systematically compared its performance to that of various existing algorithms. <p> Algorithm In this section, we describe a variant of the algorithm of Agarwal et al. <ref> [1] </ref> that we have implemented. In our im plementation, we have modified their algorithm slightly in order to improve its performance. We call this algorithm Rounds. A box B in R 3 has six faces|top, bottom, front, back, right, and left.
Reference: [2] <author> J. M. Airey, </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic Model-space Subdivision and Potentially Visible Set Calculations, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of North Carolina, Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: This algorithm performs better than not only Paterson and Yao's algorithm [4] but also most heuristics described in the literature <ref> [2, 3, 7] </ref>. To compare the different algorithms, we measure the size of the BSP each algorithm constructs and the total number of pieces into which the rectangles are partitioned by the BSP. <p> Pick a plane the minimizes the func tion jf + f 2. Maximize the measure f + f 2 Only Paterson and Yao's algorithm [4] originally incorporated the notion of free cuts. In our experiments, we use w = 8, as suggested by Thibault and Naylor [7]. Airey: Airey <ref> [2] </ref> proposes a measure function that is a linear combination of a plane's occlusion factor, its balance, and its split factor: 0:5ff + 0:3fi + 0:2oe : Teller: Let 0 o 1 be a real number.
Reference: [3] <author> H. Fuchs, Z. M. Kedem, and B. Naylor, </author> <title> On visible surface generation by a priori tree structures, Comput. Graph., </title> <booktitle> 14 (1980), </booktitle> <pages> 124-133. </pages> <note> Proc. SIGGRAPH '80. </note>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) <ref> [3, 5] </ref> is a versatile and popular data structure, with applications in many problems|hidden-surface removal, global illumination, shadow generation, solid geometry, geometric data repair, ray tracing, network design, and surface simplification; see [1] for a detailed list of references. <p> This algorithm performs better than not only Paterson and Yao's algorithm [4] but also most heuristics described in the literature <ref> [2, 3, 7] </ref>. To compare the different algorithms, we measure the size of the BSP each algorithm constructs and the total number of pieces into which the rectangles are partitioned by the BSP.
Reference: [4] <author> M. S. Paterson and F. F. Yao, </author> <title> Optimal binary space partitions for orthogonal objects, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 99-113. </pages>
Reference-contexts: This algorithm performs better than not only Paterson and Yao's algorithm <ref> [4] </ref> but also most heuristics described in the literature [2, 3, 7]. To compare the different algorithms, we measure the size of the BSP each algorithm constructs and the total number of pieces into which the rectangles are partitioned by the BSP. <p> Below, w is a positive weight that can be changed to tune the performance of the heuristics. 1. Pick a plane the minimizes the func tion jf + f 2. Maximize the measure f + f 2 Only Paterson and Yao's algorithm <ref> [4] </ref> originally incorporated the notion of free cuts. In our experiments, we use w = 8, as suggested by Thibault and Naylor [7].
Reference: [5] <author> R. A. Shumacker, R. Brand, M. Gilliland, and W. Sharp, </author> <title> Study for applying computer-generated images to visual simulation, </title> <type> Report AFHRL-TR-69-14, U.S. </type> <institution> Air Force Human Resources Lab., </institution> <year> 1969. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP) <ref> [3, 5] </ref> is a versatile and popular data structure, with applications in many problems|hidden-surface removal, global illumination, shadow generation, solid geometry, geometric data repair, ray tracing, network design, and surface simplification; see [1] for a detailed list of references.
Reference: [6] <author> S. J. Teller, </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Airey: Airey [2] proposes a measure function that is a linear combination of a plane's occlusion factor, its balance, and its split factor: 0:5ff + 0:3fi + 0:2oe : Teller: Let 0 o 1 be a real number. Teller <ref> [6] </ref> chooses the plane with the maximum occlusion factor ff , provided ff o . If there is no such plane, he chooses the plane with the minimum value of f . We use the value o = 0:5 in our implementation, as suggested by Teller.
Reference: [7] <author> W. C. Thibault and B. F. Naylor, </author> <title> Set operations on polyhedra using binary space partitioning trees, Com-put. Graph., </title> <booktitle> 21 (1987), </booktitle> <pages> 153-162. </pages> <note> Proc. SIGGRAPH '87. </note>
Reference-contexts: This algorithm performs better than not only Paterson and Yao's algorithm [4] but also most heuristics described in the literature <ref> [2, 3, 7] </ref>. To compare the different algorithms, we measure the size of the BSP each algorithm constructs and the total number of pieces into which the rectangles are partitioned by the BSP. <p> We now discuss how each algorithm measures how good a plane is. ThibaultNaylor: We discuss two of the three heuristics that Thibault and Naylor <ref> [7] </ref> present (the third performed poorly in our experiments). Below, w is a positive weight that can be changed to tune the performance of the heuristics. 1. Pick a plane the minimizes the func tion jf + f 2. <p> Pick a plane the minimizes the func tion jf + f 2. Maximize the measure f + f 2 Only Paterson and Yao's algorithm [4] originally incorporated the notion of free cuts. In our experiments, we use w = 8, as suggested by Thibault and Naylor <ref> [7] </ref>. Airey: Airey [2] proposes a measure function that is a linear combination of a plane's occlusion factor, its balance, and its split factor: 0:5ff + 0:3fi + 0:2oe : Teller: Let 0 o 1 be a real number.
References-found: 7

