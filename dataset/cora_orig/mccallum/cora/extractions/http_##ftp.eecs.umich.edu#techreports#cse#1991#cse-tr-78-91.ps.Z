URL: http://ftp.eecs.umich.edu/techreports/cse/1991/cse-tr-78-91.ps.Z
Refering-URL: http://ftp.eecs.umich.edu/techreports/cse/1991/
Root-URL: http://www.eecs.umich.edu
Title: Attribute-Based Naming of Files  
Author: Stuart Sechrest 
Date: January 1991  
Address: Ann Arbor, Michigan  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan  
Pubnum: CSE-TR-78-91  
Abstract: Most current file systems organize a set of files as a graph and view naming as graph traversal. We present an alternative relational approach. Attributes are assigned values expressing information about given files. Naming is then viewed as disambiguation through the specification of allowable attribute values. These queries, however, must be constrained to make this approach tractable. We store attribute information for sets of logically related files. A user or process selects a domain of concern from among these file sets. Attribute constraint rules preserve order within these file sets. The major advantage of this approach is that files can be named much more flexibly. Current naming schemes make it difficult to reorganize sets of files, to encode enough information about them, or to explore unfamiliar sets of files. Flexible naming simplifies the management of large sets of files over long periods of time and makes collaboration easier. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. D. Birrell and R. M. Needham. </author> <title> A universal file server. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-6(5):450-453, </volume> <month> September </month> <year> 1980. </year>
Reference-contexts: one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) [3, 7] or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) <ref> [1, 19, 20, 21, 5, 10] </ref>. The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes [16, 4, 12, 14].
Reference: [2] <author> M. Bowman, L. Peterson, and H. Rao. Univers: </author> <title> A name sever for the next generation internet. </title> <type> Technical Report TR 88-17, </type> <institution> University of Arizona, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: Combinations of property values can be registered as uniquely identifying a subtree within the hierarchy. The domain of concern of a selection expression can be determined by finding the lengthiest registered name within the expression. Other attribute-based naming schemes have been proposed for name services <ref> [13, 2, 15] </ref> that do not attempt to restrict queries to a particular domain of concern.
Reference: [3] <author> D. R. Brownbridge, L. F. Marshall, and B. Randell. </author> <title> The Newcastle Connection or UNIXes of the world unite. </title> <journal> Software-Practice and Experience, </journal> <volume> 12(12) </volume> <pages> 1147-1162, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: extremes, can be summed up by the slogans "ONE WORLD, ONE FILE SYSTEM! " and "ONE PROCESS, ONE FILE SYSTEM!" The one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) <ref> [3, 7] </ref> or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) [1, 19, 20, 21, 5, 10].
Reference: [4] <author> L. F. Cabrera and J. Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year> <month> 22 </month>
Reference-contexts: The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes <ref> [16, 4, 12, 14] </ref>. These groups point out that there are many portions of a large file system in which the user is not interested.
Reference: [5] <author> D. R. Cheriton and T. P. Mann. </author> <title> Decentralized global naming service for improved performance and fault tolerance. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(2) </volume> <pages> 147-183, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) [3, 7] or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) <ref> [1, 19, 20, 21, 5, 10] </ref>. The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes [16, 4, 12, 14].
Reference: [6] <author> R. C. Daley and P. G. Neumann. </author> <title> A general purpose file system for secondary storage. </title> <booktitle> In Proc. AFIPS Fall Joint Computer Conference, </booktitle> <pages> pages 213-229, </pages> <year> 1965. </year>
Reference: [7] <author> D. K. Gifford, R. M. Needham, and M. D. Schroeder. </author> <title> The Cedar file system. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 288-298, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: extremes, can be summed up by the slogans "ONE WORLD, ONE FILE SYSTEM! " and "ONE PROCESS, ONE FILE SYSTEM!" The one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) <ref> [3, 7] </ref> or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) [1, 19, 20, 21, 5, 10].
Reference: [8] <author> ISO. </author> <title> Information processing systems: Open systems interconnection-the directory- overview of concepts, models and service. Draft International Standard ISO 9594-1:1988(E), ISO, </title> <year> 1988. </year>
Reference-contexts: In this scheme properties were distinct from file names. Neufeld [11] proposed the use of attribute-based names within the X.500 directory service. X.500 allows the augmentation 20 of a hierarchical name space with additional property information to facili-tate browsing <ref> [8] </ref>. Neufeld allows these additional properties to be used in names which, like those of the present model, allow the elision and reordering of properties needed for a graph traversal from the root. Combinations of property values can be registered as uniquely identifying a subtree within the hierarchy.
Reference: [9] <author> J. C. Mogul. </author> <title> Representing information about files. </title> <type> Report No. </type> <institution> STAN-CS-86-1103, Department of Computer Scince, Stanford University, Stan-ford, California, </institution> <month> March </month> <year> 1986. </year>
Reference-contexts: In the present model, a domain of concern to be selected at the granulatity of file sets. Attribute-based naming can be used within a hierarchical namespace, using a subtree within the hierarchy as a domain of concern. Mogul <ref> [9] </ref> proposed support for searches within a hierarchically organized filebase based on file properties. In this scheme properties were distinct from file names. Neufeld [11] proposed the use of attribute-based names within the X.500 directory service.
Reference: [10] <author> S. J. Mullender and A. S. Tanenbaum. </author> <title> The design of a capability-based distributed operating system. </title> <journal> The Computer Journal, </journal> <volume> 29(4) </volume> <pages> 289-300, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) [3, 7] or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) <ref> [1, 19, 20, 21, 5, 10] </ref>. The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes [16, 4, 12, 14].
Reference: [11] <author> Gerald W. Neufeld. </author> <title> Descriptive names in X.500. </title> <booktitle> In SIGCOMM '89 Symposium, Communications Architectures and Protocols, </booktitle> <pages> pages 64-71, </pages> <address> Austin, Texas, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: Attribute-based naming can be used within a hierarchical namespace, using a subtree within the hierarchy as a domain of concern. Mogul [9] proposed support for searches within a hierarchically organized filebase based on file properties. In this scheme properties were distinct from file names. Neufeld <ref> [11] </ref> proposed the use of attribute-based names within the X.500 directory service. X.500 allows the augmentation 20 of a hierarchical name space with additional property information to facili-tate browsing [8].
Reference: [12] <author> B. C. Neuman. </author> <title> The virtual system model for large distributed operating systems. </title> <type> Technical Report 89-01-07, </type> <institution> Dept. of Computer Science, University of Washington, </institution> <address> Seattle, Wash., </address> <month> April </month> <year> 1989. </year>
Reference-contexts: The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes <ref> [16, 4, 12, 14] </ref>. These groups point out that there are many portions of a large file system in which the user is not interested.
Reference: [13] <author> L. L. Peterson. </author> <title> The Profile naming service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Combinations of property values can be registered as uniquely identifying a subtree within the hierarchy. The domain of concern of a selection expression can be determined by finding the lengthiest registered name within the expression. Other attribute-based naming schemes have been proposed for name services <ref> [13, 2, 15] </ref> that do not attempt to restrict queries to a particular domain of concern.
Reference: [14] <author> R. Pike, D. Presotto, K. Thompson, and H. Trickey. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> In Proceedings of the United Kingdom Unix User's Group Meeting, </booktitle> <pages> pages 15-22, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes <ref> [16, 4, 12, 14] </ref>. These groups point out that there are many portions of a large file system in which the user is not interested.
Reference: [15] <author> C. V. Ravishankar and R. Chang. </author> <title> An attribute-based service request mechanism for heterogeneous distributed systems. </title> <type> Technical Report CSE-TR-08-88, </type> <institution> University of Michigan, </institution> <month> March </month> <year> 1988. </year> <month> 23 </month>
Reference-contexts: Combinations of property values can be registered as uniquely identifying a subtree within the hierarchy. The domain of concern of a selection expression can be determined by finding the lengthiest registered name within the expression. Other attribute-based naming schemes have been proposed for name services <ref> [13, 2, 15] </ref> that do not attempt to restrict queries to a particular domain of concern.
Reference: [16] <author> R. Sandberg, D. Goldberg, S. Kleinman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the sun network filesystem. </title> <booktitle> In Proceedings of the USENIX 1985 Summer Conference, </booktitle> <pages> pages 119-130, </pages> <address> Portland, Oregon, </address> <month> June </month> <year> 1985. </year> <institution> USENIX Association, Berkeley, Calif. (USA). </institution>
Reference-contexts: The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes <ref> [16, 4, 12, 14] </ref>. These groups point out that there are many portions of a large file system in which the user is not interested.
Reference: [17] <author> M. Satyanaranan, J. Howard, D. Nichols, R. Sidebotham, A. Spector, and M. West. </author> <title> The itc distributed file system: </title> <booktitle> Principles and design. In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 35-50, </pages> <address> Orcas Island, Washington, </address> <month> December </month> <year> 1985. </year>
Reference-contexts: This is analogous to the consistency maintained for directories by file systems such as AFS <ref> [17] </ref>. 5 Attributes Thus far, we have discussed attributes as if there were a fixed number available in a file set, providing a fixed schema for characterizing files. This is decidedly not the case in file systems. Users develop their filebase over long periods of time.
Reference: [18] <author> Stuart Sechrest, William Adamson, and Yoonho Park. </author> <title> The Hyperfile model and a Hyperfile service. </title> <type> Technical Report CSE-TR-79-91, </type> <institution> University of Michigan, </institution> <year> 1991. </year>
Reference: [19] <author> H. E. Sturgis, J. G. Mitchell, and J. Israel. </author> <title> Issues in the design and use of a distributed file system. </title> <journal> Operating Systems Review, </journal> <volume> 14(3) </volume> <pages> 55-69, </pages> <month> July </month> <year> 1980. </year>
Reference-contexts: one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) [3, 7] or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) <ref> [1, 19, 20, 21, 5, 10] </ref>. The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes [16, 4, 12, 14].
Reference: [20] <author> B. Walker, G. Popek, R. English, C. Klein, and G. Thiel. </author> <title> The LOCUS distributed operating system. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 49-70, </pages> <address> Bretton Woods, New Hampshire, </address> <month> October </month> <year> 1983. </year> <booktitle> ACM, </booktitle> <address> New York (USA). </address>
Reference-contexts: one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) [3, 7] or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) <ref> [1, 19, 20, 21, 5, 10] </ref>. The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes [16, 4, 12, 14].
Reference: [21] <author> B. Welch and J. Ousterhout. </author> <title> Prefix tables: A simple mechanism for locating files in a distributed filesystem. </title> <booktitle> In Proceedings of the 6th International Conference on Distribute Computing Systems, </booktitle> <pages> pages 184-189, </pages> <address> Cambridge, Mass. (USA), </address> <month> May </month> <year> 1986. </year> <booktitle> IEEE Computer Society, </booktitle> <address> New York (USA). </address> <month> 24 </month>
Reference-contexts: one-worlders attempt to provide a consistently organized file system to all processes on all client machines by joining local hierarchies through the introduction of a "superroot" (or similar constructions) [3, 7] or by (conceptually) sharing a single table indicating how the local hierarchies are joined (however this is actually implemented) <ref> [1, 19, 20, 21, 5, 10] </ref>. The opposing camp allows the construction of a distinct file system hierarchy for an individual machines, users, or even processes [16, 4, 12, 14].
References-found: 21

