URL: ftp://venera.isi.edu/sims/sss95/ellman.ps.Z
Refering-URL: 
Root-URL: 
Email: ellman@cs.rutgers.edu  
Title: Approximation and Abstraction Techniques for Generating Concise Answers to Database Queries Figure 1: Voluminous Detailed
Author: Thomas Ellman 
Keyword: Motivation take(S,C),math(C). S=``Tom Jones'', C=``Calculus''; S=``Susan Green'', C=``Linear Algebra''; S=``John Black'', C=``Dynamical Systems''; S=``Jane Davis'', C=``Abstract Algebra''; S=``Tony Gray'', C=``Precalculus''; S=``Karl Gauss'', C=``Math Anxiety Clinic'';  Approach  
Note: No.  
Affiliation: Department of Computer Science Rutgers University  
Abstract: Database queries can return voluminous answers that are time consuming to read and that provide information with too much detail. A solution to this problem is presented in this paper. The solution utilizes approximate domain abstraction to construct a hierarchy of databases. Each successive database utilizes a more abstract domain language than the previous one. Each successive database is also an approximation of the previous one. Users may interact with the system to gradually refine concise, abstract, approximate answers into detailed, lengthy, exact ones. Users may also utilize the system to construct concise hierarchically structured answers to database queries. Implementation of this method for datalog databases is in progress. Expected results include empirical tests of the method on real world databases. The problem of voluminous answers is illustrated in Figure 1. A user seeks information about students taking math courses. The system returns a long list of all pairs (S; C) such that S is taking C and C is a math course. The answer takes a long time to read. It also may provide more detail than the user desires. The user may not have wanted to know the individual course and student pairs. He may actually have wanted only a general characterization of types of students and the types of math courses they take. A more useful interaction is shown in Figure 2. The system initially responds with an answer stating that science majors take introductory math courses. The user is expected to take this answer to mean that all science majors take all introductory math courses, and no other students take any math courses. The answer is "abstract" because it is stated in terms of categories like "science-major" or "introductory-math", rather than individual students our courses. The answer is also approximate, since not all science majors take all introductory math courses, and in addition, other kinds The user may find a "hierarchically structured" answer to be even more useful. An answer of this type is shown in Figure 5. The answer has been refined down to the third level of the hierarchy. The answer is expressed in a nested format. Each level of nesting corresponds to one level of refinement. Each level of refinement is expressed as a modification of the previous level, rather than as simple list of pairs. The hierarchically structured answer in Figure 5 thus provides exactly the same information as the third refinement in Figure 2; however, the hierarchically structured answer is more concise. We are developing a technique called "approximate domain abstraction" combining ideas on domain abstraction in databases from (Imielinski 1987) with ideas on approximate symmetry in constraint satisfaction from (Ellman 1993a) and (Ellman 1993b). Approximate domain abstraction operates by collecting the constant 
Abstract-found: 1
Intro-found: 1
Reference: <author> T. </author> <title> Ellman. Abstraction via approximate symmetry. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year>
Reference: <author> T. </author> <title> Ellman. Synthesis of abstraction hierarchies for constraint satisfaction by clustering approximately equivalent objects. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning, </booktitle> <address> Amherst, MA, </address> <year> 1993. </year>
Reference: <author> F. Giunchiglia and T. Walsh. </author> <title> A theory of abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 323-389, </pages> <year> 1992. </year>
Reference: <author> T. Imielinski. </author> <title> Domain abstraction and limited reasoning. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Milan, Italy, </address> <year> 1987. </year>
Reference: <author> A. Levy and Y. Sagiv. </author> <title> Exploiting irrelevance reasoning to guide problem solving. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: Future Work In the future, we plan to enhance our system in several ways. We plan constrain the algorithm to generate equivalence classes that can be expressed in terms of particular query languages, e.g., CLASSIC. We plan to use relevance reasoning <ref> (Levy and Sagiv 1993) </ref> to construct abstraction hierarchies that are suited to partic ular classes of queries. We plan to extend the system to handle general first order logic databases. We plan to approximate versions abstraction techniques other than domain abstraction.
Reference: <author> D. Plaisted. </author> <title> Theorem proving with abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 16:47 - 108, </volume> <year> 1981. </year>
References-found: 6

