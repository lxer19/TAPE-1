URL: http://www.cs.berkeley.edu/Research/Projects/brass/documents/GarpProcessor.ps
Refering-URL: http://www.cs.berkeley.edu/Research/Projects/brass/documents/GarpProcessor.html
Root-URL: 
Title: Garp: A MIPS Processor with a Reconfigurable Coprocessor  
Author: John R. Hauser and John Wawrzynek 
Address: Berkeley  
Affiliation: University of California,  
Abstract: Typical reconfigurable machines exhibit shortcomings that make them less than ideal for general-purposecomputing. The Garp Architecture combines reconfigurable hardware with a standard MIPS processor on the same die to retain the better features of both. Novel aspects of the architecture are presented, as well as a prototype software environment and preliminary performance results. Compared to an UltraSPARC, a Garp of similar technology could achieve speedups ranging from a factor of 2 to as high as a factor of 24 for some useful applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter M. Athanas and Harvey F. Silverman, </author> <title> Processor reconfiguration through instruction-set metamorphosis, </title> <journal> Computer, </journal> <volume> vol. 26, no. 3, </volume> <pages> pp. 11-18, </pages> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction In recent years, reconfigurable hardwareusually in the guise of field-programmable gate arrays (FPGAs)has been touted as a new and better means of performing computation <ref> [1, 2, 3] </ref>. Promoters argue that FPGAs can be used to create fast, application-specific circuits for any problem. Impressive speedups have been documented for a number of tasks, including DNA sequence matching [4, 5], textual pattern searching [6], and RSA encryption [7], to name just a few.
Reference: [2] <author> Andre DeHon, </author> <title> DPGA-coupled microprocessors: </title> <booktitle> Commodity ICs for the early 21st century, in Proceedings of the IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1994, </year> <pages> pp. 31-39. </pages>
Reference-contexts: 1 Introduction In recent years, reconfigurable hardwareusually in the guise of field-programmable gate arrays (FPGAs)has been touted as a new and better means of performing computation <ref> [1, 2, 3] </ref>. Promoters argue that FPGAs can be used to create fast, application-specific circuits for any problem. Impressive speedups have been documented for a number of tasks, including DNA sequence matching [4, 5], textual pattern searching [6], and RSA encryption [7], to name just a few. <p> The current crop of FPGAs, on the other hand, must be reprogrammed for each new chip version, even within the same FPGA family. To address some of these concerns, various researchers have proposed building a machine that tightly couples reconfigurable hardware with a conventional microprocessor <ref> [2, 8, 9] </ref>. The organization of such a hybrid, however, remains an open topic. In this paper we outline a candidate hybrid architecture, which we call Garp, in which the FPGA is recast as a slave computational unit located on the same die as the processor.
Reference: [3] <author> Andre DeHon, </author> <title> Reconfigurable Architectures for General-Purpose Computing, </title> <type> Ph.D. thesis, </type> <institution> Mas-sachusetts Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: 1 Introduction In recent years, reconfigurable hardwareusually in the guise of field-programmable gate arrays (FPGAs)has been touted as a new and better means of performing computation <ref> [1, 2, 3] </ref>. Promoters argue that FPGAs can be used to create fast, application-specific circuits for any problem. Impressive speedups have been documented for a number of tasks, including DNA sequence matching [4, 5], textual pattern searching [6], and RSA encryption [7], to name just a few.
Reference: [4] <author> Maya Gokhale, William Holmes, Andrew Kopser, Sara Lucas, Ronald Minnich, and Douglas Sweely, </author> <title> Building and using a highly parallel programmable logic array, </title> <journal> Computer, </journal> <volume> vol. 24, no. 1, </volume> <pages> pp. 81-89, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Promoters argue that FPGAs can be used to create fast, application-specific circuits for any problem. Impressive speedups have been documented for a number of tasks, including DNA sequence matching <ref> [4, 5] </ref>, textual pattern searching [6], and RSA encryption [7], to name just a few. Despite these successes, any computer built wholy out of FPGAs must overcome some obstacles: - FPGA machines are rarely large enough to encode entire interesting programs all at once.
Reference: [5] <author> Eric Lemoine and David Merceron, </author> <title> Run time reconfiguration of FPGA for scanning genomic databases, </title> <booktitle> in Proceedings of the IEEE Symposium on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1995, </year> <pages> pp. 90-98. </pages>
Reference-contexts: Promoters argue that FPGAs can be used to create fast, application-specific circuits for any problem. Impressive speedups have been documented for a number of tasks, including DNA sequence matching <ref> [4, 5] </ref>, textual pattern searching [6], and RSA encryption [7], to name just a few. Despite these successes, any computer built wholy out of FPGAs must overcome some obstacles: - FPGA machines are rarely large enough to encode entire interesting programs all at once.
Reference: [6] <author> Bernard Gunther, George Milne, and Lakshmi Narasimhan, </author> <title> Assessing document relevance with run-time reconfigurable machines, </title> <booktitle> in Proceedings of the IEEE Symposium on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1996, </year> <pages> pp. 10-17. </pages>
Reference-contexts: Promoters argue that FPGAs can be used to create fast, application-specific circuits for any problem. Impressive speedups have been documented for a number of tasks, including DNA sequence matching [4, 5], textual pattern searching <ref> [6] </ref>, and RSA encryption [7], to name just a few. Despite these successes, any computer built wholy out of FPGAs must overcome some obstacles: - FPGA machines are rarely large enough to encode entire interesting programs all at once.
Reference: [7] <author> Jean E. Vuillemin, Patrice Bertin, Didier Roncin, Mark Shand, Herve H. Touati, and Philippe Boucard, </author> <title> Programmable active memories: Reconfigurable systems come of age, </title> <journal> IEEE Transactions on VLSI, </journal> <volume> vol. 4, no. 1, </volume> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: Promoters argue that FPGAs can be used to create fast, application-specific circuits for any problem. Impressive speedups have been documented for a number of tasks, including DNA sequence matching [4, 5], textual pattern searching [6], and RSA encryption <ref> [7] </ref>, to name just a few. Despite these successes, any computer built wholy out of FPGAs must overcome some obstacles: - FPGA machines are rarely large enough to encode entire interesting programs all at once. Smaller configurations handling different pieces of a program must be swapped in over time.
Reference: [8] <author> Rahul Razdan and Michael D. Smith, </author> <title> A high-performance microarchitecture with hardware-programmable functional units, </title> <booktitle> in Proceedings of the 27th Annual International Symposium on Microarchitec-ture, </booktitle> <month> Nov. </month> <year> 1994, </year> <pages> pp. 172-180. </pages>
Reference-contexts: The current crop of FPGAs, on the other hand, must be reprogrammed for each new chip version, even within the same FPGA family. To address some of these concerns, various researchers have proposed building a machine that tightly couples reconfigurable hardware with a conventional microprocessor <ref> [2, 8, 9] </ref>. The organization of such a hybrid, however, remains an open topic. In this paper we outline a candidate hybrid architecture, which we call Garp, in which the FPGA is recast as a slave computational unit located on the same die as the processor.
Reference: [9] <author> Ralph D. Wittig and Paul Chow, OneChip: </author> <title> An FPGA processor with reconfigurable logic, </title> <booktitle> in Proceedings of the IEEE Symposium on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1996, </year> <pages> pp. 126-135. </pages>
Reference-contexts: The current crop of FPGAs, on the other hand, must be reprogrammed for each new chip version, even within the same FPGA family. To address some of these concerns, various researchers have proposed building a machine that tightly couples reconfigurable hardware with a conventional microprocessor <ref> [2, 8, 9] </ref>. The organization of such a hybrid, however, remains an open topic. In this paper we outline a candidate hybrid architecture, which we call Garp, in which the FPGA is recast as a slave computational unit located on the same die as the processor.
Reference: [10] <author> Xilinx, </author> <title> The Programmable Logic Data Book, </title> <year> 1994. </year>
Reference-contexts: Garp's reconfigurable array is composed of entities called blocks (Fig. 2). One block on each row is known as a control block. The rest of the blocks in the array are logic blocks, which correspond roughly to the CLBs of the Xilinx 4000 series <ref> [10] </ref>. The Garp Architecture fixes the number of columns of blocks at 24. The number of rows is implementation-specific, but can be expected to be at least 32. The architecture is defined so that the number of rows can grow in an upward-compatible fashion.
Reference: [11] <author> Michael J. Wirthlin and Brad L. Hutchings, </author> <title> A dynamic instruction set computer, </title> <booktitle> in Proceedings of the IEEE Symposium on FPGAs for Custom Computing Machines, </booktitle> <month> Apr. </month> <year> 1995, </year> <pages> pp. 99-107. </pages>
Reference-contexts: Among other things, control blocks can interrupt the main processor and can initiate data memory accesses to and from the array. The division of the array into rows to simplify array management is a technique that was first reported for the Dynamic Instruction Set Computer (DISC) <ref> [11] </ref>.
Reference: [12] <author> Bruce Schneier, </author> <title> Applied Cryptography: Protocols, Algorithms, and Source Code in C, 2nd edition, </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: involved, the Garp numbers unfortunately must be considered rough; however, it is easy to see that Garp holds an advantage for at least some problems. 4.1 Data Encryption Standard (DES) One of the most important encryption methods over the last 20 years has been the Data Encryption Standard, or DES <ref> [12] </ref>. DES is a good application for reconfigurable hardware because normal processors have trouble implementing it efficiently. DES encrypts 64 bits of data at a time. Each 64 bits is run through an obfuscation loop 16 times; and it is in this loop that DES spends most of its time.
Reference: [13] <author> Robert Ulichney, </author> <title> Digital Halftoning, </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, Massachusetts, </address> <year> 1987. </year> <month> 33 </month>
Reference-contexts: This palette contains 216 = 6 3 colors in an orthogonal arrangement, with 6 levels each of red, green, and blue. To dither to this palette we employed Floyd-Steinberg error diffusion <ref> [13] </ref>, which is essentially the standard algorithm for this task. The dithering of an image proceeds from top to bottom in scan-line order. Dithering each pixel involves the following two steps: 1. Find the color in the target palette closest to the given pixel color. 2.
References-found: 13

