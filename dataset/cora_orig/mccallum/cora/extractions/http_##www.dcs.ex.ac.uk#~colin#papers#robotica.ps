URL: http://www.dcs.ex.ac.uk/~colin/papers/robotica.ps
Refering-URL: http://www.dcs.ex.ac.uk/~colin/pages/research.html
Root-URL: http://www.dcs.ex.ac.uk
Title: Modelling Robot Manipulators with Multivariate B-splines.  
Author: Colin G. Johnson and Duncan Marsh 
Date: September 23, 1998  
Abstract: In programming robot manipulators to carry out a wide variety of tasks it would be desirable to create a cad system in which these tasks can be programmed at the task level, leaving the fine-grained detail of path planning and collision detection to the system. This paper describes the theoretical background to such a system, by providing a model in which robot motions are represented using multivariate B-splines, a standard representation for free-form shapes in the cad environment. The paper also describes algorithms which take this representation and apply it to collision detection and path-planning.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> John Craig. </author> <title> Introduction to Robotics. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference-contexts: The second is to plan the motions using a robot programming language, possibly assisted by using a simulation package such as CimStation <ref> [1] </ref> in an iterative cycle of program-test-program-test- . fl Colin Johnson is a lecturer in the Department of Computer Science at the University of Exeter, The Old Library, Prince of Wales Road, Exeter, EX4 4PT, England. y Duncan Marsh is a lecturer in the Department of Mathematics at Napier University, 219 <p> Secondly, the physical geometry of the links is given by by a nurbs surface S l for each link l (it is simple to extend this to several surfaces per link). Finally, we specify how the links are connected together, using the Denavit-Hartenberg notation|the standard notation used in kinematics <ref> [1, 15] </ref>. We describe this briefly as follows (see figure 4). We begin by taking a line ` i through the axis of each joint of the mechanism, i.e. the axis that a link either rotates around (revolute joint) or slides along (prismatic joint). <p> Such advantages are not to be found in other swept-volume models of workspace such as [21]. 4 Application to collision detection. We now turn to applying this model to the collision detection problem. A robot executes a motion M : <ref> [0; 1] </ref> ! C, where C is the configuration space of the robot. We recall the workspace mapping i (M) : S i fi [0; 1] ! R 3 from above, where S i is the set of points on link i of the arm. <p> We now turn to applying this model to the collision detection problem. A robot executes a motion M : <ref> [0; 1] </ref> ! C, where C is the configuration space of the robot. We recall the workspace mapping i (M) : S i fi [0; 1] ! R 3 from above, where S i is the set of points on link i of the arm.
Reference: [2] <author> Nils J. Nilsson. </author> <title> A mobile automaton : An application of artificial intelligence techniques. </title> <booktitle> In First International Conference on Artificial Intelligence, </booktitle> <pages> pages 509-520, </pages> <address> Washington D.C., </address> <year> 1969. </year>
Reference-contexts: Robotica, in press. 2 Much work (beginning with <ref> [2] </ref> and surveyed in [3, 4, 5, 6]) has come out of the artificial intelligence community over the last thirty years in increasing the level of automation of robot programming|that is hiding details of the programming process such as collision detection and and calculating the fine details of velocity and acceleration,
Reference: [3] <author> J.T. Schwartz and M. Sharir. </author> <title> A survey of motion planning and related geometric algorithms. </title> <journal> Artificial Intelligence, </journal> <volume> 37 </volume> <pages> 157-169, </pages> <year> 1988. </year>
Reference-contexts: Robotica, in press. 2 Much work (beginning with [2] and surveyed in <ref> [3, 4, 5, 6] </ref>) has come out of the artificial intelligence community over the last thirty years in increasing the level of automation of robot programming|that is hiding details of the programming process such as collision detection and and calculating the fine details of velocity and acceleration, liberating the programmer to
Reference: [4] <author> M. Sharir. </author> <title> Algorithmic motion planning in robotics. </title> <journal> IEEE Computer, </journal> <volume> 22 </volume> <pages> 9-20, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Robotica, in press. 2 Much work (beginning with [2] and surveyed in <ref> [3, 4, 5, 6] </ref>) has come out of the artificial intelligence community over the last thirty years in increasing the level of automation of robot programming|that is hiding details of the programming process such as collision detection and and calculating the fine details of velocity and acceleration, liberating the programmer to
Reference: [5] <author> Y.K Hwang and N. Ahuja. </author> <title> Gross motion planning|a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 219-291, </pages> <year> 1992. </year>
Reference-contexts: Robotica, in press. 2 Much work (beginning with [2] and surveyed in <ref> [3, 4, 5, 6] </ref>) has come out of the artificial intelligence community over the last thirty years in increasing the level of automation of robot programming|that is hiding details of the programming process such as collision detection and and calculating the fine details of velocity and acceleration, liberating the programmer to
Reference: [6] <author> Stephen Cameron. </author> <title> Obstacle avoidance and path planning. Industrial Robot, </title> <booktitle> 21(5) </booktitle> <pages> 9-14, </pages> <year> 1994. </year>
Reference-contexts: Robotica, in press. 2 Much work (beginning with [2] and surveyed in <ref> [3, 4, 5, 6] </ref>) has come out of the artificial intelligence community over the last thirty years in increasing the level of automation of robot programming|that is hiding details of the programming process such as collision detection and and calculating the fine details of velocity and acceleration, liberating the programmer to
Reference: [7] <author> Colin G. Johnson and Duncan Marsh. </author> <title> Modelling robot manipulators in a cad environment using B-splines. </title> <editor> In N.G. Bourbakis, editor, </editor> <booktitle> Proceedings of the IEEE International Joint Symposia on Intelligence and Systems, </booktitle> <pages> pages 194-201. </pages> <publisher> IEEE Press, </publisher> <year> 1996. </year>
Reference-contexts: In this paper we look at the mathematical and algorithmic foundation of how we can embed this style of robot programming in a cad environment, and describe some algorithms which use these ideas to tackle collision detection and path-planning problems. This paper extends the work described in <ref> [7, 8] </ref>. 2 B-spline curves and surfaces. In this paper we make use of B-spline curve, surfaces and higher-dimensional shapes [9, 10]. These are a piecewise-polynomial representation used in freeform design, that is the design of arbitrary smooth shapes.
Reference: [8] <author> Colin G. Johnson and Duncan Marsh. </author> <title> A robot programming environment based on free-form cad modelling. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 194-199, </pages> <address> Leuven, Belgium, 1998. </address> <publisher> IEEE Press. </publisher> <editor> Johnson and Marsh: Manipulators and B-Splines. Robotica, </editor> <publisher> in press. </publisher> <pages> 21 </pages>
Reference-contexts: In this paper we look at the mathematical and algorithmic foundation of how we can embed this style of robot programming in a cad environment, and describe some algorithms which use these ideas to tackle collision detection and path-planning problems. This paper extends the work described in <ref> [7, 8] </ref>. 2 B-spline curves and surfaces. In this paper we make use of B-spline curve, surfaces and higher-dimensional shapes [9, 10]. These are a piecewise-polynomial representation used in freeform design, that is the design of arbitrary smooth shapes.
Reference: [9] <author> Les Piegl. </author> <title> On nurbs : A survey. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 55-71, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This paper extends the work described in [7, 8]. 2 B-spline curves and surfaces. In this paper we make use of B-spline curve, surfaces and higher-dimensional shapes <ref> [9, 10] </ref>. These are a piecewise-polynomial representation used in freeform design, that is the design of arbitrary smooth shapes. <p> This can be extended to the subdivision of a nurbs-shape of any dimensionality by an isoparametric hyperplane of codimension 1. Details of these algorithms can be found in [12, 10]. This section has given a brief introduction to this large subject. More details can be found in <ref> [9, 10, 12] </ref>. 3 A new model of workspace. In this section we give mathematical constructions which give multivariate B-spline mappings to describe the space swept out when a robot moves. <p> Secondly, we have to design a motion using something, and nurbs, with their properties of local control, control over their smoothness and their ability to incorporate many other kinds of motion such as straight-line interpolants and circles <ref> [9] </ref> offer an intuitive and geometrically elegant method for this. It can be seen that this can be extended to the case of creating a swept volume in four-dimensional space-time [17].
Reference: [10] <author> Les Piegl and Wayne Tiller. </author> <title> The N U RBS Book. </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: This paper extends the work described in [7, 8]. 2 B-spline curves and surfaces. In this paper we make use of B-spline curve, surfaces and higher-dimensional shapes <ref> [9, 10] </ref>. These are a piecewise-polynomial representation used in freeform design, that is the design of arbitrary smooth shapes. <p> This can be extended to the subdivision of a nurbs-shape of any dimensionality by an isoparametric hyperplane of codimension 1. Details of these algorithms can be found in <ref> [12, 10] </ref>. This section has given a brief introduction to this large subject. More details can be found in [9, 10, 12]. 3 A new model of workspace. In this section we give mathematical constructions which give multivariate B-spline mappings to describe the space swept out when a robot moves. <p> This can be extended to the subdivision of a nurbs-shape of any dimensionality by an isoparametric hyperplane of codimension 1. Details of these algorithms can be found in [12, 10]. This section has given a brief introduction to this large subject. More details can be found in <ref> [9, 10, 12] </ref>. 3 A new model of workspace. In this section we give mathematical constructions which give multivariate B-spline mappings to describe the space swept out when a robot moves. <p> If the ith joint is a revolute joint, we form a volume of revolution V i (u; v; t) by forming a tensor product of S i with an arc of a circle in nurbs form <ref> [10] </ref>. Similarly for a prismatic joint we tensor product the surface with a straight line along the axis to form a volume of extrusion. <p> For example we can extend the algorithms above to carry out collision detection and path-planning in a known dynamic environment, for example to plan the coordinated motion of multiple robots. This would require the use of extrusion operators, as described in <ref> [10] </ref> to create four-dimensional space-time workspaces akin to those described in [20, 17]. Other avenues may be worthy of exploration. Some of these are computational, for example the use of parallel processing to enable these algorithms to work quickly in complex, dynamic environments.
Reference: [11] <author> L. Piegl. </author> <title> Modifying the shape of rational B-splines. part 1 : curves. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 21(8) </volume> <pages> 509-518, </pages> <year> 1989. </year>
Reference-contexts: The w i are an additional set of control parameters called weights, which in an intuitive sense are used to allow different points to have a different amount of influence on the shape of the curve <ref> [11] </ref>. More formally the w i are the fourth coordinate in a homogeneous coordinate system, the three-dimensional curve being described mathematically Johnson and Marsh: Manipulators and B-Splines. Robotica, in press. 3 as the projection of a 4-dimensional non-rational curve into 3-dimensional space [12].
Reference: [12] <author> Gerald Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design. </title> <publisher> Academic Press, </publisher> <address> third edition, </address> <year> 1993. </year>
Reference-contexts: More formally the w i are the fourth coordinate in a homogeneous coordinate system, the three-dimensional curve being described mathematically Johnson and Marsh: Manipulators and B-Splines. Robotica, in press. 3 as the projection of a 4-dimensional non-rational curve into 3-dimensional space <ref> [12] </ref>. <p> There are two particular properties of B-spline shapes that we shall use here. The first is the convex hull theorem <ref> [12] </ref>, which states that all points on the B-spline shape lie within the convex hull of the control polygon. <p> This can be extended to the subdivision of a nurbs-shape of any dimensionality by an isoparametric hyperplane of codimension 1. Details of these algorithms can be found in <ref> [12, 10] </ref>. This section has given a brief introduction to this large subject. More details can be found in [9, 10, 12]. 3 A new model of workspace. In this section we give mathematical constructions which give multivariate B-spline mappings to describe the space swept out when a robot moves. <p> This can be extended to the subdivision of a nurbs-shape of any dimensionality by an isoparametric hyperplane of codimension 1. Details of these algorithms can be found in [12, 10]. This section has given a brief introduction to this large subject. More details can be found in <ref> [9, 10, 12] </ref>. 3 A new model of workspace. In this section we give mathematical constructions which give multivariate B-spline mappings to describe the space swept out when a robot moves. <p> That the placement of these surfaces at the control points is sufficient to describe the entire motion follows from the the affine invariance property of B-splines <ref> [12] </ref>. 3.3 Comments. This representation restricts the motions allowed to those which can be represented in nurbs form. It could be well argued that this is not a restriction Johnson and Marsh: Manipulators and B-Splines. Robotica, in press. 10 at all.
Reference: [13] <author> T. Lozano-Perez. </author> <title> A simple motion-planning algorithm for general robotic manipulators. </title> <journal> IEEE Journal on Robotics and Automation, </journal> <volume> RA-3(3):224-238, </volume> <year> 1987. </year>
Reference-contexts: These points can lie in a space of dimensionality less than k, and we use this idea below to embed the configuration space <ref> [13] </ref> of a manipulator into the physical space R 3 . There are two particular properties of B-spline shapes that we shall use here. The first is the convex hull theorem [12], which states that all points on the B-spline shape lie within the convex hull of the control polygon. <p> More precisely for a given motion M, specified as a nurbs path in configuration space <ref> [13] </ref>, we define a function for each link i (M ) : R 2 fi R ! R 3 . <p> Robotica, in press. 12 The advantage of this algorithm (over, say, <ref> [13] </ref>) is that the amount of subdivision is adaptive. <p> This allows us to use the algorithm of [30] to find a connected path through the various subdivided regions. One major advantage of this (compared with, for example, <ref> [13] </ref>) is that the same structure works on any scale. If a large amount of space is free then these regions are marked off as free near the beginning of the algorithm, rather than being pointlessly further subdivided.
Reference: [14] <author> Joseph O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: There are two particular properties of B-spline shapes that we shall use here. The first is the convex hull theorem [12], which states that all points on the B-spline shape lie within the convex hull of the control polygon. The convex hull is an easily computed object <ref> [14] </ref>, with an O (n log n) complexity algorithm for n 2-dimensional points, and at least an O (n 2 ) complexity for 3-dimensional points. Therefore we have a powerful techniques for approximating complex curved objects with simpler polyhedral objects for intersection testing. Johnson and Marsh: Manipulators and B-Splines.
Reference: [15] <author> J. Denavit and R.S. Hartenberg. </author> <title> A kinematics notation for lower-pair mechanisms based on matrices. </title> <journal> Journal of Applied Mechanics (Transactions of the ASME), </journal> <pages> pages 215-221, </pages> <month> June </month> <year> 1955. </year>
Reference-contexts: Secondly, the physical geometry of the links is given by by a nurbs surface S l for each link l (it is simple to extend this to several surfaces per link). Finally, we specify how the links are connected together, using the Denavit-Hartenberg notation|the standard notation used in kinematics <ref> [1, 15] </ref>. We describe this briefly as follows (see figure 4). We begin by taking a line ` i through the axis of each joint of the mechanism, i.e. the axis that a link either rotates around (revolute joint) or slides along (prismatic joint).
Reference: [16] <author> Michael G Wagner. </author> <title> Planar rational B-spline motions. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 27(2) </volume> <pages> 129-137, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: This has been used in planar kinematics, where the motion N was a multiplication of the control net of S (x; y) by control points in a of transformation matrices <ref> [16] </ref>. This allows us to calculate the volume swept out when we move the surface through space whilst Johnson and Marsh: Manipulators and B-Splines. Robotica, in press. 9 simultaneously transforming the shape with respect to a moving coordinate frame. We calculate these i (M ) in two stages.
Reference: [17] <author> Stephen Cameron. </author> <title> Using space-time for collision detection : solving the general case. </title> <editor> In Kevin Warwick, editor, </editor> <booktitle> Robotics, Applied Mathematics and Computational Aspects, </booktitle> <pages> pages 403-415. </pages> <address> Clarendon/IMA, </address> <year> 1993. </year>
Reference-contexts: It can be seen that this can be extended to the case of creating a swept volume in four-dimensional space-time <ref> [17] </ref>. This is important for studying the interaction of a robot with other moving obstacles [18, 19, 20, 17], or attempting to detect self-intersections. <p> It can be seen that this can be extended to the case of creating a swept volume in four-dimensional space-time [17]. This is important for studying the interaction of a robot with other moving obstacles <ref> [18, 19, 20, 17] </ref>, or attempting to detect self-intersections. <p> This would require the use of extrusion operators, as described in [10] to create four-dimensional space-time workspaces akin to those described in <ref> [20, 17] </ref>. Other avenues may be worthy of exploration. Some of these are computational, for example the use of parallel processing to enable these algorithms to work quickly in complex, dynamic environments.
Reference: [18] <author> M. Erdmann and T. Lozano-Perez. </author> <title> On multiple moving objects. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 1419-1424, </pages> <year> 1986. </year>
Reference-contexts: It can be seen that this can be extended to the case of creating a swept volume in four-dimensional space-time [17]. This is important for studying the interaction of a robot with other moving obstacles <ref> [18, 19, 20, 17] </ref>, or attempting to detect self-intersections.
Reference: [19] <author> Stephen Cameron. </author> <title> A study of the clash-detection problem in robotics. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 488-493. </pages> <publisher> IEEE Press, </publisher> <month> March </month> <year> 1985. </year>
Reference-contexts: It can be seen that this can be extended to the case of creating a swept volume in four-dimensional space-time [17]. This is important for studying the interaction of a robot with other moving obstacles <ref> [18, 19, 20, 17] </ref>, or attempting to detect self-intersections.
Reference: [20] <author> Stephen Cameron. </author> <title> Collision detection by four-dimensional intersection testing. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 6(3) </volume> <pages> 291-302, </pages> <month> June </month> <year> 1990. </year> <editor> Johnson and Marsh: Manipulators and B-Splines. Robotica, </editor> <publisher> in press. </publisher> <pages> 22 </pages>
Reference-contexts: It can be seen that this can be extended to the case of creating a swept volume in four-dimensional space-time [17]. This is important for studying the interaction of a robot with other moving obstacles <ref> [18, 19, 20, 17] </ref>, or attempting to detect self-intersections. <p> This would require the use of extrusion operators, as described in [10] to create four-dimensional space-time workspaces akin to those described in <ref> [20, 17] </ref>. Other avenues may be worthy of exploration. Some of these are computational, for example the use of parallel processing to enable these algorithms to work quickly in complex, dynamic environments.
Reference: [21] <author> Z.-K. Ling and Z.-J. Hu. </author> <title> Use of swept volumes in the design of interference free spatial mechanisms. </title> <journal> Mechanism and Machine Theory, </journal> <volume> 32(4) </volume> <pages> 459-476, </pages> <year> 1997. </year>
Reference-contexts: Such advantages are not to be found in other swept-volume models of workspace such as <ref> [21] </ref>. 4 Application to collision detection. We now turn to applying this model to the collision detection problem. A robot executes a motion M : [0; 1] ! C, where C is the configuration space of the robot.
Reference: [22] <author> A.P. del Pobil and M.A. Serna. </author> <title> Spatial Representation and Motion Planning. </title> <booktitle> Number 1014 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphics|see <ref> [22, 23, 24, 25, 26] </ref> for details. 5 Path planning and accessibility checking. In this section we describe two algorithms which can be used for path-planning. That is instead of using the computer to test human designed Johnson and Marsh: Manipulators and B-Splines. <p> The basic idea is illustrated in figure 6. Essentially our algorithm works like this. Find the region ! 1 (C), and carry out intersection tests using bounding-boxes as in section 4 (see also <ref> [22, 23, 24, 25, 26] </ref>).
Reference: [23] <author> R. Featherstone. </author> <title> A hierarchical representation of the space occupancy of a robot mechanism. </title> <editor> In J.-P. Merlet and B. Ravani, editors, </editor> <booktitle> Computational Kinematics (INRIA, </booktitle> <month> September </month> <year> 1995), </year> <pages> pages 183-192. </pages> <publisher> Kluwer, </publisher> <year> 1995. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphics|see <ref> [22, 23, 24, 25, 26] </ref> for details. 5 Path planning and accessibility checking. In this section we describe two algorithms which can be used for path-planning. That is instead of using the computer to test human designed Johnson and Marsh: Manipulators and B-Splines. <p> The basic idea is illustrated in figure 6. Essentially our algorithm works like this. Find the region ! 1 (C), and carry out intersection tests using bounding-boxes as in section 4 (see also <ref> [22, 23, 24, 25, 26] </ref>).
Reference: [24] <author> Q.S. Peng. </author> <title> An algorithm for finding the intersection lines between two B-spline surfaces. Computer Aided Design, </title> <type> 16(4) </type> <institution> 191-196 and C1, </institution> <month> July </month> <year> 1984. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphics|see <ref> [22, 23, 24, 25, 26] </ref> for details. 5 Path planning and accessibility checking. In this section we describe two algorithms which can be used for path-planning. That is instead of using the computer to test human designed Johnson and Marsh: Manipulators and B-Splines. <p> The basic idea is illustrated in figure 6. Essentially our algorithm works like this. Find the region ! 1 (C), and carry out intersection tests using bounding-boxes as in section 4 (see also <ref> [22, 23, 24, 25, 26] </ref>).
Reference: [25] <author> Thomas W. Sederberg and Scott R. Parry. </author> <title> Comparison of three curve intersection algorithms. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 18(1) </volume> <pages> 58-63, </pages> <month> Jan-uary/February </month> <year> 1986. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphics|see <ref> [22, 23, 24, 25, 26] </ref> for details. 5 Path planning and accessibility checking. In this section we describe two algorithms which can be used for path-planning. That is instead of using the computer to test human designed Johnson and Marsh: Manipulators and B-Splines. <p> The basic idea is illustrated in figure 6. Essentially our algorithm works like this. Find the region ! 1 (C), and carry out intersection tests using bounding-boxes as in section 4 (see also <ref> [22, 23, 24, 25, 26] </ref>).
Reference: [26] <author> Jonathan Yen, Susan Sprach, Mark Smith, and Ronald Pulleyblank. </author> <title> Parallel boxing in B-spline intersection. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 72-79, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphics|see <ref> [22, 23, 24, 25, 26] </ref> for details. 5 Path planning and accessibility checking. In this section we describe two algorithms which can be used for path-planning. That is instead of using the computer to test human designed Johnson and Marsh: Manipulators and B-Splines. <p> The basic idea is illustrated in figure 6. Essentially our algorithm works like this. Find the region ! 1 (C), and carry out intersection tests using bounding-boxes as in section 4 (see also <ref> [22, 23, 24, 25, 26] </ref>).
Reference: [27] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Robotica, in press. 13 paths, we specify the robot and its environment and the algorithm automatically finds a free-space path between desired start and end points, or reports that this is not possible. 5.1 Using a genetic algorithm. The first algorithm uses a kind of genetic algorithm <ref> [27, 28] </ref> for path planning. The algorithm begins by creating at random a large set of possible paths without considering whether these paths cause collisions or not.
Reference: [28] <author> Melanie Mitchell. </author> <title> An Introduction to Genetic Algorithms. Series in Complex Adaptive Systems. </title> <publisher> Bradford Books/MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Robotica, in press. 13 paths, we specify the robot and its environment and the algorithm automatically finds a free-space path between desired start and end points, or reports that this is not possible. 5.1 Using a genetic algorithm. The first algorithm uses a kind of genetic algorithm <ref> [27, 28] </ref> for path planning. The algorithm begins by creating at random a large set of possible paths without considering whether these paths cause collisions or not.
Reference: [29] <author> Hanan Samet. </author> <title> The quadtree and related hierarchical data-structures. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 187-259, </pages> <year> 1984. </year>
Reference-contexts: Robotica, in press. 16 initialized to (! i+1 ; obs list; 1) EndIf EndWhile End We have used a tree-structure <ref> [29] </ref> to store information about the patches as we continue subdividing (see figure 7).
Reference: [30] <author> Hanan Samet. </author> <title> Connected component labeling using quadtrees. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(3) </volume> <pages> 487-501, </pages> <year> 1981. </year>
Reference-contexts: This allows us to use the algorithm of <ref> [30] </ref> to find a connected path through the various subdivided regions. One major advantage of this (compared with, for example, [13]) is that the same structure works on any scale.
Reference: [31] <author> Y.F. Wang and J.F. Wang. </author> <title> On 3D model construction by fusing heterogeneous sensor data. </title> <booktitle> CVGIP-Image Understanding, </booktitle> <volume> 60(2) </volume> <pages> 210-229, </pages> <year> 1994. </year> <editor> Johnson and Marsh: Manipulators and B-Splines. Robotica, </editor> <publisher> in press. </publisher> <pages> 23 </pages>
Reference-contexts: One promising method here is to combine our model of robot workspace with a nurbs-based surface reconstruction method such as those described in <ref> [31, 32] </ref>, which take visual or range data and interpret it to produce a model of the world in terms of nurbs-surfaces. Another exploration in this direction would be to consider ways of representing uncertainty about the environment in a geometrically intuitive way.
Reference: [32] <author> S. Lavallee and P. Szeliski. </author> <title> Recovering the position and orientation of free-form objects from image contours using 3D distance maps. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 17(4) </volume> <pages> 378-390, </pages> <year> 1995. </year>
Reference-contexts: One promising method here is to combine our model of robot workspace with a nurbs-based surface reconstruction method such as those described in <ref> [31, 32] </ref>, which take visual or range data and interpret it to produce a model of the world in terms of nurbs-surfaces. Another exploration in this direction would be to consider ways of representing uncertainty about the environment in a geometrically intuitive way.
Reference: [33] <author> A. McLean and S. Cameron. </author> <title> The virtual springs method|path planning and collision-avoidance for redundant manipulators. </title> <journal> International Journal of Robotics Research, </journal> <volume> 15(4) </volume> <pages> 300-319, </pages> <year> 1996. </year>
Reference-contexts: An example could be the graphical representation of attractive and repulsive forces within the environment using pictures of springs (using the algorithms in <ref> [33] </ref> to compute the resultant motions). Virtual walls (appearing as translucent walls in the system) could represent no-go areas for the robot.
Reference: [34] <author> K.C. Gupta. </author> <title> On the nature of robot workspace. </title> <journal> International Journal of Robotics Research, </journal> <volume> 5(2) </volume> <pages> 112-121, </pages> <year> 1986. </year>
Reference-contexts: Another direction would be to extend this modelling technique to encompass other mechanical problems, such as the design and analysis of closed-chain mechanical systems or carrying out more complex workspace analyses such as those described in <ref> [34] </ref>. Throughout all of this work the key concept is to remain within a small, closed set of representations which allow fundamental algorithms to be developed to a high level of efficiency and then applied to a wide range of problems.
Reference: [35] <author> Rida T. Farouki and John K. Hinds. </author> <title> A hierarchy of geometric forms. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 51-78, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: This has been emphasized by Farouki and Hinds in their landmark paper <ref> [35] </ref> on geometric design: "Since the unified approach (to geometric modeling) guarantees the functional equivalence of all geometric entities of a given type, geometric operations can be performed with equal facility on simple primitives and complex sculptured geometries.
References-found: 35

