URL: http://www.wi.leidenuniv.nl/home/joost/full.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: frob, joostg@cs.ruu.nl  
Title: Two Fully Abstract Models for UNITY  
Author: R.T. Udink and J.N. Kok 
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands.  
Affiliation: Utrecht University, Department of Computer Science,  
Abstract: We give two fully abstract models for UNITY. The models are compositional with respect to the parallel composition of UNITY programs (that is, with respect to the UNITY union operator). One model is fully abstract for stutter-free execution sequences and the other model is fully abstract for several property models. The two fully abstract models are different since the model based on properties is more abstract than the sequences model. The fully abstract models yield the best refinement notions for programs that can be used for refinement in context.
Abstract-found: 1
Intro-found: 1
Reference: [AL88] <author> M. Abadi and L. Lamport. </author> <title> The existence of refinement mappings. </title> <booktitle> In Proc. of the 3rd Annual IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 165-175, </pages> <address> Washington D.C., July 1988. </address> <publisher> Computer Society Press. </publisher>
Reference-contexts: We often consider z to be a function in N ! , and use hh:ii-brackets for denoting sequences. To abstract from stutterings, we use the operator " : ! ! ! (see <ref> [AL88] </ref>) that removes stutterings from sequences. It replaces all maximal finite segments of identical states by the single state. We call a sequence z stutter-free if "(z ) = z . A stutter-free sequence z may contain stutterings but only as an infinite suffix.
Reference: [BKPR91] <author> F.S. de Boer, J.N. Kok, C Palamidessi, and J.J.M.M. Rutten. </author> <title> The failure of failures in a paradigm of asynchronous communication. </title> <editor> In J.C.M. Baeten and J.F. Groote, editors, </editor> <booktitle> CONCUR '91, Proceedings of the 2nd International Conference on Concurrency Theory, volume 527 of Lecture Notes in Computer Science, </booktitle> <pages> pages 111-126. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1991. </year>
Reference-contexts: Since O only models the behavior in states that can be reached during isolated program execution and does not allow for interleaving, the model is not compositional. Therefore, we construct a semantic model that is compositional. (The model is inspired by the compositional model in <ref> [BKPR91] </ref>, but we need different closure conditions.) The first step towards a compositional model is to allow for interleaving by introducing extended sequences. Extended sequences are infinite sequences of pairs of states (v 2)ESeq = P (( fi ) ! ).
Reference: [CM88] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design A Foundation. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction The UNITY formalism of Chandy and Misra <ref> [CM88] </ref> consists of a programming language and proof system for deriving parallel and distributed programs. In their book, Chandy and Misra derive a large number of programs by stepwise refinement in UNITY. The programming language is simple to make proofs in the UNITY logic feasible. <p> On the right-hand side the property based models are given, where U are unless properties, E are ensures properties and L are leadsto properties (the subscripts CM and S indicate whether the model is based on properties as defined by Chandy and Misra <ref> [CM88] </ref> or by Sanders [San91]). The models above the dotted line are compositional, in contrast to the models below the line. The arrows in the figure indicate abstractions, and the thick arrows indicate full abstraction. We will give a precise definition of the models later. <p> In section 7 is indicated how the results can be used for defining program refinement. 2 The UNITY Programming Language In this section, a brief overview of the UNITY programming language, introduced by Chandy and Misra in <ref> [CM88] </ref>, is given. The UNITY logic is introduced later. UNITY programs are denoted by F and G. A UNITY program has several parts that are called sections. We will only consider a subset of UNITY programs, namely, programs that are made up of the following sections. <p> This operational semantics yields sequences of states without stutterings. Statements are not visible in this model. In <ref> [CM88] </ref>, Chandy and Misra have defined an execution model for UNITYprograms in terms of sequences of tuples. Each tuple consists of a state and a (label of a) statement that is executed in that state. We use the operational view that only states can be observed. <p> introduce the effect of statement t: if fill (t; v 0 (i); v 0 (i +1)), then :(v 0 &lt;2&gt; (i ) ! i ) because t is deterministic. ut 5 UNITY Logics In this section, we give two logics for the UNITY programs: the logic of Chandy and Misra <ref> [CM88] </ref> and the logic given by Sanders in [San91]. Both logics are based on a small set of temporal properties that are defined in terms of the statements of a program. <p> In the sequel, state-predicates are modeled as functions from states to booleans, however, we sometimes interpret them as sets of states. Now we define the logics for UNITY programs. We start with the logic given by Chandy and Misra in <ref> [CM88] </ref>. This logic is based on three temporal properties: unless, ensures, and leadsto. The properties are attached to an entire program and they are defined in terms of the set of statements. Because we introduce the Sanders logic later, we subscript the properties by CM . <p> The model IU E CM is the strongest model, and the other models are abstractions from it (see figure 1). This follows directly from definition of the Sanders properties. The model IU E CM is the only compositional model. Its compositionality follows from theorems given in <ref> [CM88] </ref>. 6 Full Abstraction of the Property Model Now we will prove the full abstraction of IU E CM above IU E S , IU L S , and IU L CM . Theorem 13. IU E CM is the fully abstract model above IU L S . Proof.
Reference: [DS90] <author> E.W. Dijkstra and C.S. Scholten. </author> <title> Predicate Calculus and Program Semantics. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: This logic is based on three temporal properties: unless, ensures, and leadsto. The properties are attached to an entire program and they are defined in terms of the set of statements. Because we introduce the Sanders logic later, we subscript the properties by CM . Following Dijkstra and Scholten <ref> [DS90] </ref>, we use square brackets to denote universal quantification over all states. Definition 8. (Chandy-Misra Logic) Let p; q be arbitrary state predicates and F a UNITY program.
Reference: [Pac90] <author> J. Pachl. </author> <title> Three definitions of leads-to for UNITY. </title> <booktitle> Notes on UNITY, </booktitle> <pages> 23-90, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Thirdly, for the Sanders logic the interpretation of the properties can be given in terms of normal sequences and corresponds to the intuition associated with the properties, as shown in <ref> [UK93, Pac90] </ref>. Lemma 11.
Reference: [San91] <author> B.A. Sanders. </author> <title> Eliminating the substitution axiom from UNITY logic. </title> <journal> Formal Aspects of Computing, </journal> <volume> 3(2) </volume> <pages> 189-205, </pages> <year> 1991. </year>
Reference-contexts: On the right-hand side the property based models are given, where U are unless properties, E are ensures properties and L are leadsto properties (the subscripts CM and S indicate whether the model is based on properties as defined by Chandy and Misra [CM88] or by Sanders <ref> [San91] </ref>). The models above the dotted line are compositional, in contrast to the models below the line. The arrows in the figure indicate abstractions, and the thick arrows indicate full abstraction. We will give a precise definition of the models later. <p> (t; v 0 (i); v 0 (i +1)), then :(v 0 &lt;2&gt; (i ) ! i ) because t is deterministic. ut 5 UNITY Logics In this section, we give two logics for the UNITY programs: the logic of Chandy and Misra [CM88] and the logic given by Sanders in <ref> [San91] </ref>. Both logics are based on a small set of temporal properties that are defined in terms of the statements of a program. To provide intuition for the properties, we give an interpretation of the properties in terms of the sequence models given in the previous section. <p> :q)(v &lt;1&gt; (i)) ) (p _ q)(v &lt;2&gt; (i ))i; - p ensures CM q in F ) h8v : v 2 V :: h8i :: (p ^ :q)(v &lt;1&gt; (i )i ) h9i : q (v &lt;2&gt; (i ))ii: Next, we give (a characterization of) the logic of Sanders <ref> [San91] </ref>. She restricts all UNITY properties to the set of reachable states of a program F : Definition 10.
Reference: [UK93] <author> R.T. Udink and J.N. Kok. </author> <title> On the relation between Unity properties and sequences of states. </title> <editor> In J.W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Semantics: Foundations and Applications, volume 666 of Lecture Notes in Computer Science, </booktitle> <pages> pages 594-608. </pages> <booktitle> REX Workshop, </booktitle> <address> June 1992, </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year> <note> A full version is available as Technical Report RUU-CS-93-07 of Utrecht University. </note>
Reference-contexts: The programming language is simple to make proofs in the UNITY logic feasible. The UNITY logic is based on a small set of temporal properties that are closely related to programs. In a previous paper <ref> [UK93] </ref> we gave two different notions of refinement for UNITY programs. One is based on a model of execution sequences, that are sequences of states without stutterings. <p> It is surprising that UNITY properties are not powerful enough to describe execution sequences, that is, there are UNITY programs with the same properties, but with different execution sequences <ref> [UK93] </ref>. In this paper, the question of doing refinements in context is addressed. For UNITY programs contexts are formed by putting the program in parallel with other UNITY programs. The parallel composition in UNITY is the union []. <p> The properties are powerful enough to express other temporal properties like stable and until . Chandy and Misra properties are closely related to extended sequences <ref> [UK93] </ref>. Lemma 9. <p> Thirdly, for the Sanders logic the interpretation of the properties can be given in terms of normal sequences and corresponds to the intuition associated with the properties, as shown in <ref> [UK93, Pac90] </ref>. Lemma 11.
References-found: 7

