URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-035.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Constant Time Computational Geometry On Reconfigurable Meshes With Buses*  
Note: This research was supported, in part, by the National Science Foundation under grant MIP-9103379.  
Abstract: Madhusudan Nigam and Sartaj Sahni University of Florida Gainesville, FL 32611 Technical Report 92-35 ABSTRACT We develop O(1) time algorithms for the following computational geometry problems: convex hull, smallest enclosing box, ECDF search, and triangulation. Our algorithms are for the reconfigurable mesh with buses architecture and run on the RMESH, PARBUS, and MRN models. Keywords And Phrases Convex hull, enclosing box, ECDF search, triangulation, reconfigurable mesh with buses. hhhhhhhhhhhhhhh
Abstract-found: 1
Intro-found: 1
Reference: [BENA91] <author> Y. Ben-Asher, D. Peleg, R. Ramaswami, and A. Schuster, </author> <title> "The power of reconfiguration," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 13, </volume> <pages> 139-153, </pages> <year> 1991. </year>
Reference-contexts: processor (CAAP) of Weems et al. [WEEM87,89], the polymorphic torus of Li and Maresca [LI89ab, MARE89], the reconfigurable mesh with buses (RMESH) of Miller et al. [MILL88abc], the processor array with a reconfigurable bus system (PARBUS) of Wang and Chen [WANG90ab], and the reconfigurable network (RN) of Ben-Asher et al. <ref> [BENA91] </ref>. The CAAP [WEEM87,89] and RMESH [MILL88abc] architectures appear to be quite similar. So, we shall describe the RMESH only. In this, we have a bus grid with an n n arrangement of processors at the grid points (see Figure 1 for a 4x4 RMESH ). <p> In a reconfigurable network (RN) <ref> [BENA91] </ref> no restriction is placed on the bus segments that connect pairs of processors or on the relative placement of the processors. I.e., processors may not lie at grid points and a bus segment may join an arbitrary pair of processors. <p> Like the PARBUS and polymorphic torus, each processor has an internal switch that is able to connect together arbitrary subsets of the bus segments that connect to the processor. Ben-asher et al. <ref> [BENA91] </ref> also define a mesh restriction (MRN) of their reconfigurable network . In this, the processor and bus segment arrangement is exactly as for the PARBUS (Figure 4).
Reference: [FREE75] <author> H. Freeman and R. Shapira, </author> <title> "Determining the minimal-area encasing rectangle foran arbitrary closed curve," </title> <journal> Communications of ACM, </journal> <volume> 18, </volume> <pages> 409-413, </pages> <year> 1975. </year>
Reference-contexts: For step R3, the points of E may be sorted by polar angle about an interior point as in steps 10 and 11 of Figure 2. - 19 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh . . . b d . d a hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 3. Smallest Enclosing Rectangle It is well known <ref> [FREE75] </ref> that the smallest enclosing rectangle of a set of N planar points has at least one side that is an extension of an edge of the convex hull.
Reference: [JANG92a] <author> J. Jang and V. Prasanna, </author> <title> "An optimal sorting algorithm on reconfigurable meshes," </title> <booktitle> Proceddings 6th International Parallel Processing Symposium, </booktitle> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> CA, 130-137, </address> <month> March </month> <year> 1992. </year> <month> - 33 </month> - 
Reference: [JANG92b] <author> J. Jang, and V. K. Prasanna, </author> <title> "A fast sorting algorithm on higher dimension reconfigurable mesh," </title> <booktitle> Proceedings 26th Conference on Information Sciences and Systems, </booktitle> <year> 1992. </year>
Reference: [JANG92c] <author> J. Jang, H. Park, and V. K. Prasanna, </author> <title> "A fast algorithm for computing histogram on reconfigurable mesh," </title> <institution> Department of EE-Systems, </institution> <type> Technical Report IRIS-290, </type> <institution> University of Southern California, LosAngeles, </institution> <month> Feb </month> <year> 1992. </year>
Reference: [JANG92d] <author> J. Jang, H. Park, and V. K. Prasanna, </author> <title> "An optimal multiplication algorithm on reconfigurable mesh," </title> <institution> Department of EE-Systems, Technical Report IRIS-291,University of Southern California, LosAngeles, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Their algorithm for the nearest neighbor problem is easily run on an N N RMESH and MRN in constant time. Jang and Prasanna [JANG92e] state that their 2-set dominance counting algorithm can be simulated by an RMESH using the switch simulation of <ref> [JANG92d] </ref>. However the simulation of [JANG92e] requires 16 RMESH processors for each PARBUS processor simulated. Hence a 4N 4N RMESH is needed for the simulation.
Reference: [JANG92e] <author> J. Jang and V. K. Prasanna, </author> <title> "Efficient Parallel Algorithms for Some Geometric Problems on Reconfigurable Mesh," </title> <booktitle> Proceedings of 1992 International Conference on Parallel Processing, </booktitle> <publisher> CRC Press, </publisher> <address> Boca Raton, FL, 127-130, </address> <month> Aug </month> <year> 1992. </year>
Reference-contexts: While we have defined the above reconfigurable bus architectures as square two dimensional meshes, it is easy to see how these may be extended to obtain non square architectures and architectures with more dimensions than two. RMB algorithms for computational geometry problems has been explored in <ref> [MILL87, JANG92e, REIS92] </ref>. In [MILL87] RMESH algorithms for several geometric - 5 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh problems on digitized images were developed. These include closest figure, extreme points of every figure, diameter, smallest enclosing box, and smallest enclosing circle. <p> Unfortunatley, the algorithm of [REIS92] is flawed. In section 2, we give a corrected constant time RMESH convex hull algorithm. This may also be run on an N N PARBUS and MRN. Jang and Prasanna <ref> [JANG92e] </ref> develop constant time PARBUS algorithms for the all pairs nearest neighbor problem on a set of N planar points, 2-set dominance counting for N planar points, and the 3-dimensional maxima problem. All these algorithms are for N N PARBUS configuration. <p> All these algorithms are for N N PARBUS configuration. Their algorithm for the nearest neighbor problem is easily run on an N N RMESH and MRN in constant time. Jang and Prasanna <ref> [JANG92e] </ref> state that their 2-set dominance counting algorithm can be simulated by an RMESH using the switch simulation of [JANG92d]. However the simulation of [JANG92e] requires 16 RMESH processors for each PARBUS processor simulated. Hence a 4N 4N RMESH is needed for the simulation. <p> Their algorithm for the nearest neighbor problem is easily run on an N N RMESH and MRN in constant time. Jang and Prasanna <ref> [JANG92e] </ref> state that their 2-set dominance counting algorithm can be simulated by an RMESH using the switch simulation of [JANG92d]. However the simulation of [JANG92e] requires 16 RMESH processors for each PARBUS processor simulated. Hence a 4N 4N RMESH is needed for the simulation. <p> In section 4, we consider the ECDF search problem which is closely related to the 2-set dominance counting problem and develop a constant time algorithm that requires only an - 6 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh N N RMESH. The third geometry problem considered in <ref> [JANG92e] </ref> is the 3-dimensional maxima problem. <p> The algorithm suggested in <ref> [JANG92e] </ref> is a modification of their 2-set dominance counting algorithm and is unnecessarily complicated. We observe that the problem is trivially solved in constant time using the algorithm of Figure 9. The input N points are in row 1 of the N N PARBUS/RMESH/MRN. <p> Stojmenovic [STOJ86] provides an N (N = c S c) processor, O (log 2 N) time hypercube algorithm for this problem. On an N N RMB, D (p,S) for each point p S, may be computed using a strategy similar to that used in <ref> [JANG92e] </ref> to solve the 2-set dominance counting problem on a PARBUS in O (1) time. A high level description of the strategy is given in Figure 22.
Reference: [JENQ91a] <author> J. Jenq and S. Sahni, </author> <title> "Reconfigurable mesh algorithms for image shrinking, expanding, clustering, and template matching," </title> <booktitle> Proceedings 5th International Parallel Processing Symposium, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, 208-215, </address> <year> 1991. </year>
Reference-contexts: T is set to zero otherwise. The Ts in each N 1/2 N 1/2 partition may be summed in O (1) time using the RMESH ranking algorithm of <ref> [JENQ91a] </ref>. The result is DX (p). The computation of DX (p) is best done after Step 1 of in a similar way following Step 2. <p> For this, the points p and p k - 26 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh Step 2: (c) The one's in row 1 of the N 3/4 N 1/2 submesh are prefix summed using the RMESH ranking algorithm of <ref> [JENQ91a] </ref>. Let the overall sum for each group of N 1/4 as be stored in variable A of the [1,1] PE of the N 3/4 N 1/4 submesh. (d) [Prefix sum the As] We now have N 1/4 A values to be prefix summed.
Reference: [JENQ91b] <author> J. Jenq and S. Sahni, </author> <title> "Reconfigurable mesh algorithms for the Hough transform," </title> <booktitle> Proc. 1991 International Conference on Parallel Processing, </booktitle> <publisher> CRC Press, </publisher> <address> Boca Raton, FL, 34-41, </address> <year> 1991. </year>
Reference: [JENQ91c] <author> J. Jenq and S. Sahni, </author> <title> "Reconfigurable mesh algorithms for the area and perimeter of image components," </title> <booktitle> Proc. 1991 International Conference on Parallel Processing, </booktitle> <publisher> CRC Press, </publisher> <address> Boca Raton, FL, 280-281, </address> <year> 1991. </year>
Reference: [JEON90] <author> C.S. Jeong, and D.T. Lee, </author> <title> "Parallel Geometric Algorithms on Mesh-connected Computers," </title> <journal> Algorithmica, </journal> <volume> 5, </volume> <pages> 155-177, </pages> <year> 1990. </year>
Reference-contexts: Miller and Stout [MILL89] also develop optimal mesh algorithms for the convex hull of N planar points and for several other computational geometry problems. Mesh algorithms for some other computational geometry problem are considered in <ref> [JEON90, LU85,86] </ref>. 2. Convex Hull In this section, we consider the problem of determining the Convex Hull of a set of N planar points on N N Reconfigurable Meshes with Buses (RMBs).
Reference: [LI89a] <author> H. Li and M. Maresca, </author> <title> "Polymorphic-torus architecture for computer vision," </title> <journal> IEEE Trans. on Pattern & Machine Intelligence, </journal> <volume> 11, 3, </volume> <pages> 133-143, </pages> <year> 1989. </year>
Reference: [LI89b] <author> H. Li and M. Maresca, </author> <title> "Polymorphic-torus network," </title> <journal> IEEE Trans. on Computers, C-38, </journal> <volume> 9, </volume> <pages> 1345-1351, </pages> <year> 1989. </year> <month> - 34 </month> - 
Reference: [LU85] <author> M. Lu and P. Varman, </author> <title> "Solving geometric proximity problems on mesh-connected computers," </title> <booktitle> Proceedings 1985 Workshop on Computer Architecture, Pattern Analysis, Image Database Management, </booktitle> <pages> 248-255, </pages> <year> 1985. </year>
Reference: [LU86] <author> M. Lu, </author> <title> "Constructing the Voronoi diagram on a Mesh-Connected Computer," </title> <booktitle> Proceedings 1986 International Conference on Parallel Processing, </booktitle> <institution> The Pennsylvania State University Press, University Park, </institution> <address> PA, 806-809, </address> <year> 1986. </year>
Reference: [MILL87b] <author> R. Miller, V. K. Prasanna Kumar, D. Reisis and Q. Stout, </author> <title> "Parallel Computation on Reconfigurable meshes," </title> <institution> Department of EE-systems, </institution> <type> Technical Report IRIS#229, </type> <institution> University of Southern California, LosAngeles, </institution> <year> 1987. </year>
Reference: [MILL88] <author> R. Miller, and Q. F. Stout, </author> <title> "Efficient Parallel Convex Hull Algorithms," </title> <journal> IEEE Transactions on Computers, </journal> <volume> c-37, 12, </volume> <pages> 1605-1618, </pages> <month> Dec </month> <year> 1988. </year>
Reference-contexts: An O (1) time convex hull algorithm for a set of N planar points is given in [REIS92]. The algorithm uses an N N configuration and is based on the grid convex hull algorithm of <ref> [MILL88] </ref>. Unfortunatley, the algorithm of [REIS92] is flawed. In section 2, we give a corrected constant time RMESH convex hull algorithm. This may also be run on an N N PARBUS and MRN.
Reference: [MILL89] <author> R. Miller, and Q.F. Stout, </author> <title> "Mesh Computer Algorithms for Computational Geometry," </title> <journal> IEEE Transaction on Computers, </journal> <volume> 38, 3, </volume> <pages> 321-340, </pages> <year> 1989. </year>
Reference-contexts: While these problems have not been considered before for the RMB architecture, parallel algorithms for other architectures have been developed. For example, Miller and Stout <ref> [MILL89] </ref> show how to find the smallest enclosing - 7 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh - 8 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh S N EW N S W E S NN S S N N S EW W E hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh rectangle of a set of N planar points in O (N 1/2 ) on <p> Miller and Stout <ref> [MILL89] </ref> also develop optimal mesh algorithms for the convex hull of N planar points and for several other computational geometry problems. Mesh algorithms for some other computational geometry problem are considered in [JEON90, LU85,86]. 2.
Reference: [MILL91a] <author> R. Miller, V. K. Prasanna Kumar, D. Reisis and Q. Stout, </author> <title> "Efficient parallel algorithms for intermediate level vision analysis on the reconfigurable mesh", Parallel Architectures and Algorithms for Image Understanding, </title> <editor> Viktor K. Prasanna ed., </editor> <address> 185-207, </address> <publisher> Academic Press, </publisher> <address> NewYork, </address> <year> 1991 </year>
Reference: [MILL91b] <author> R. Miller, V. K. Prasanna Kumar, D. Reisis and Q. Stout, </author> <title> "Image processing on reconfigurable meshes", From Pixels to Features II, </title> <editor> H. Burkhardt ed., </editor> <publisher> Elsevier Science Publishing, </publisher> <address> Amsterdam, </address> <year> 1991. </year>
Reference: [NIGA92] <author> M. Nigam, and S. Sahni, </author> <title> "Sorting n Numbers on n n Reconfigurable Meshes with Buses, </title> <type> CIS, </type> <institution> University of Florida, </institution> <type> Technical Report TR-92-04, </type> <year> 1992 </year>
Reference-contexts: The algorithm for an N N PARBUS/MRN is similar. Step R0 can be done using the O (1) sorting algorithm for N data items on an N N RMESH <ref> [NIGA92] </ref>. Step R1 is done using the O (1) N 3 processor algorithm of the preceding section on each N N 1/2 sub RMESH. For R2, we use the i th N N 1/2 sub RMESH to determine which points of E i are also in E. <p> Each of these points computes the polar angle made* by the point using the centroid as the origin. Step 11: The points of E (S) are sorted by polar angle using the O (1) RMESH/PARBUS?MRN sort algorithm of <ref> [NIGA92] </ref>. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh (continued from previous page) Theorem 1: The extreme points algorithm of Figure 13 is correct. <p> Step 1 can be done by sorting the N points in O (1) time by x-coordinate <ref> [NIGA92] </ref>. The point in PE [1, j] belongs to partition X u where u = Q N 1/2 j - 1 hhhhh P + 1. Step 2 is simi larly accomplished by another sort (this time by y-coordinate). <p> This partitioning is possible because of our assumption that the x-coordinates are distinct. To accomplish the partitioning, the N points are sorted by x-coordinate using the O (1) sorting algorithm of <ref> [NIGA92] </ref>. In step 2, the Voronoi diagram of each S i is computed. For this, each point P S i computes its voronoi polygon which defines all points in the plane that are closer to p than to any of the other points in S i . <p> Once the B (u) s have been computed, the convex hull points of all the S i s are sorted by their B (u) values. This brings points in the same polygon next to each other. The sort is accomplished in O (1) time using the algorithm of <ref> [NIGA92] </ref>. To triangulate each polygon, it is desirable to have the polygon points ordered by the S i s from which they came and within S i , ordered in convex hull order. This can be incorporated into the sort by B (u).
Reference: [PREP85] <author> F.P. Preparata and M.I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: The extreme points problem is that of finding E (S) while in the convex hull problem, we are to find the ordered set CH (S). Our algorithms to find E (S) and CH (S) make use of the following known results: Lemma 1: [Theorem 3.8, <ref> [PREP85] </ref>, p104] The line segment l defined by two points is an edge of the convex hull iff all other points lie on l or to one side of it. ` Lemma 2: [[PREP85], p105] Let p 1 and p 2 , respectively, be the lexicographically lowest and the highest points <p> In case they do, then j and k are in E (S) and j immediately precedes or immediately follows k in CH (S). The correctness of Figure 2 is a direct consequence of Lemma 1 and the fact <ref> [PREP85, p100] </ref> that an ordering of the points of E by polar angle about an internal point yields the convex hull. The complexity of the algorithm is readily seen to be O (1). <p> It is easy to see hhhhhhhhhhhhhhh * An alternative to using the polar angle is discussed on p100 of <ref> [PREP85] </ref>. - 13 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh R0: Sort S by x-coordinate and within x by y-coordinate. R1: Partition S into N 1/2 subsets, S i , 1 i N 1/2 using the ordering just obtained. Each subset is of size N 1/2 . <p> In step 2, the Voronoi diagram of each S i is computed. For this, each point P S i computes its voronoi polygon which defines all points in the plane that are closer to p than to any of the other points in S i . As noted in <ref> [PREP85] </ref>, for any two points p and q, the set of points that are closer to p than to q is the half plane containing p that is defined by the perpendicular bisector of the line joining p and q. <p> N 2/3 N 1/3 hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh The purpose of computing the straight line dual in step 3 is to obtain the triangulation of the regions defined by the convex hull of each of the S i s. Theorem 5.11 of <ref> [PREP85] </ref> states that the straight line dual of the Voronoi diagram of S is a triangulation of S (Strictly speaking, this is true only if no four points of S are cocircular.
Reference: [REIS92] <author> D.I. Reisis, </author> <title> "An Efficient Convex Hull Computation on the Reconfigurable Mesh," </title> <booktitle> Proceedings 1992 International Parallel Processing Symposium, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, 142-145, </address> <year> 1992. </year> <month> - 35 </month> - 
Reference-contexts: While we have defined the above reconfigurable bus architectures as square two dimensional meshes, it is easy to see how these may be extended to obtain non square architectures and architectures with more dimensions than two. RMB algorithms for computational geometry problems has been explored in <ref> [MILL87, JANG92e, REIS92] </ref>. In [MILL87] RMESH algorithms for several geometric - 5 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh problems on digitized images were developed. These include closest figure, extreme points of every figure, diameter, smallest enclosing box, and smallest enclosing circle. <p> These include closest figure, extreme points of every figure, diameter, smallest enclosing box, and smallest enclosing circle. An O (1) time convex hull algorithm for a set of N planar points is given in <ref> [REIS92] </ref>. The algorithm uses an N N configuration and is based on the grid convex hull algorithm of [MILL88]. Unfortunatley, the algorithm of [REIS92] is flawed. In section 2, we give a corrected constant time RMESH convex hull algorithm. <p> An O (1) time convex hull algorithm for a set of N planar points is given in <ref> [REIS92] </ref>. The algorithm uses an N N configuration and is based on the grid convex hull algorithm of [MILL88]. Unfortunatley, the algorithm of [REIS92] is flawed. In section 2, we give a corrected constant time RMESH convex hull algorithm. This may also be run on an N N PARBUS and MRN.
Reference: [WANG87] <author> C.A. Wang, and Y.H. Tsin, </author> <title> "An O(logn) time parallel algorithm for triangulating a set of points in the plane," </title> <journal> Information Processing Letters, </journal> <volume> 25, 1, </volume> <pages> 15-47, </pages> <year> 1988. </year>
Reference-contexts: 7 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh - 8 - hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh S N EW N S W E S NN S S N N S EW W E hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh rectangle of a set of N planar points in O (N 1/2 ) on an N N mesh and Wang and Tsin <ref> [WANG87] </ref> develop an O (logN) time CREW PRAM algorithm to triangulate a set of N planar points. Miller and Stout [MILL89] also develop optimal mesh algorithms for the convex hull of N planar points and for several other computational geometry problems. <p> Each processor in row 1 gets atmost 3 edges. Following step 3, the regions enclosed by the convex hulls of the S i s, has been tri-angualted (Figure 30) and we need to triangulate the region outside. For this, we use the technique of Wang and Tsin <ref> [WANG87] </ref>. The exterior region is partitioned into `simple polygons' (Figure 30) which are then triangulated independently. The algorithm of [WANG87] to partition the external region is given in Figure 31. <p> For this, we use the technique of Wang and Tsin <ref> [WANG87] </ref>. The exterior region is partitioned into `simple polygons' (Figure 30) which are then triangulated independently. The algorithm of [WANG87] to partition the external region is given in Figure 31. This has been modified to account for the fact that we have N 2/3 S i s while Wang and Tsin have only N 1/2 . <p> Hence, step 4 is also easy to do in O (1) time. Wang and Tsin <ref> [WANG87] </ref> have shown that the algorithm of Figure 32 correctly identifies the exterior polygon to which each point of the convex hull of the S i s belongs. <p> Each polygon can now be triangulated using an N d i (where d i is the size of the polygon) submesh. This triangulation is fairly straightforward as each polygon is comprised of two monotone segments. The steps are given in <ref> [WANG87] </ref> for a PRAM and are easily performed on an RMESH or PARBUS of size N d i (N d i ) in O (1) time. 6. Conclusions We have developed constant time RMB algorithms for the convex hull, the smallest enclosing rectangle, ECDF searching, and triangulation problems.
Reference: [WANG90a] <author> B. Wang and G. Chen, </author> <title> "Constant time algorithms for the transitive closure and some related graph problems on processor arrays with reconfigurable bus systems," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 1, 4, </volume> <pages> 500-507, </pages> <year> 1990. </year>
Reference: [WANG90b] <author> B. Wang, G. Chen, and F. Lin, </author> <title> "Constant time sorting on a processor array with a reconfigurable bus system," </title> <journal> Information Processing Letters, </journal> <volume> 34, 4, </volume> <pages> 187-190, </pages> <year> 1990. </year>
Reference: [WEEM87] <author> C. C. Weems, S. P. Levitan, A. R. Hanson, E. M. Riseman, J. G. Nash, and D. B. Sheu, </author> <title> "The image understanding architecture," </title> <type> COINS Technical Report 87-76, </type> <institution> University of Massachusetts at Amherst, </institution> <year> 1987. </year>
Reference: [WEEM89] <author> C. C. Weems, S. P. Levitan, A. R. Hanson, E. M. Riseman, J. G. Nash, and D. B. Sheu, </author> <title> "The image understanding architecture, </title> " <journal> International Journal of Computer Vision, </journal> <volume> 2, </volume> <pages> 251-282, </pages> <year> 1989. </year>
References-found: 28

