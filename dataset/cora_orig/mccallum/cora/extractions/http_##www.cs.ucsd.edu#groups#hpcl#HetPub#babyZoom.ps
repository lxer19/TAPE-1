URL: http://www.cs.ucsd.edu/groups/hpcl/HetPub/babyZoom.ps
Refering-URL: http://www.cs.ucsd.edu/users/jenny/cv.html
Root-URL: http://www.cs.ucsd.edu
Title: Developing Heterogeneous Applications Using Zoom and HeNCE  
Author: Richard Wolski Cosimo Anglano Jennifer Schopf and Francine Berman 
Address: Torino  
Affiliation: 1 Department of Computer Science and Engineering, University of California, San Diego 2 Dipartimento di Informatica, Universita di  
Abstract: Heterogeneous network computing enables the development of a single complex application using a distributed network of possibly dissimilar machines. While heterogeneous networks promise cost-effective compute cycles, almost no software is available to aid in the design and implementation of their applications. In this paper, we couple the Zoom representation, designed to facilitate development of heterogeneous applications, with the HeNCE graphical language and tool, designed as a representation for an execution model of heterogeneous programs targeted to PVM. The combination of Zoom and HeNCE provides a hierarchical representation which exposes performance issues, and provides a means of automatically translating that representation into code executable on a heterogeneous network of computers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anglano, C., Schopf, J., Wolski, R., and Berman, F. Zoom: </author> <title> A hierarchical representation for heterogeneous applications. </title> <note> submitted to the Journal of Parallel and Distributed Computing. </note>
Reference-contexts: Currently, there are few tools available for heterogeneous programming that assist in the design and implementation of these complex applications. In this paper, we outline a methodology through which heterogeneous applications can be designed, specified, and implemented. Applications are first described using the Zoom representation <ref> [1] </ref>. Zoom captures application structure hierarchically, serving both to facilitate human communication and as an interface to programming tools. We then describe how the Zoom representation of an application can be translated to HeNCE [2], a graphical language for heterogeneous computing. <p> Level 1 provides a simple structural description of the application while more details of the algorithm-machine mapping are given in Level 2. Level 3 adds data conversions and more detail about communication for the purpose of assessing performance trade-offs. While <ref> [1] </ref> includes a detailed description of the Zoom representation, we review the basic components in the following subsections for completeness. 2.1 Zoom Level 1 Components The structure level (Level 1) of the Zoom representation depicts an application as a linear sequence of phases 1 .
Reference: [2] <author> Beguelin, A., Dongarra, J., Geist, G., Manchek, R., Plank, J., and Sunderam, V. </author> <title> Hence: A user's guide version 1.2. </title> <type> Tech. Rep. </type> <institution> CS-92-157, University of Tennessee, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: Applications are first described using the Zoom representation [1]. Zoom captures application structure hierarchically, serving both to facilitate human communication and as an interface to programming tools. We then describe how the Zoom representation of an application can be translated to HeNCE <ref> [2] </ref>, a graphical language for heterogeneous computing. HeNCE provides a rich set of programming primitives and an execution model designed to assist the programmer in developing programs for execution on a networked group of heterogeneous machines [3]. Together, Zoom and HeNCE provide a powerful tool for heterogeneous program development. <p> Only a single structure conversion is shown in the example between A/M1 and B/M2. The S indicates that the conversion should be computed by the source machine M1. 2.4 HeNCE HeNCE was developed by Beguelin, Dongarra, Geist, Manchek, Plank, and Sunderam <ref> [2] </ref>. Under the HeNCE paradigm, the programmer explicitly specifies parallelism by depicting data and control dependencies in the form of a graph. The HeNCE programming tool provides an editor so that these graphs may be entered directly using a point and click interface.
Reference: [3] <author> Beguelin, A., Dongarra, J., Geist, G., Manchek, R., and Sunderam, V. </author> <title> Graphical development tools for network-based concurrent supercomputing. </title> <booktitle> In Proceedings of Supercomputing '91 (1991), </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 435-44. </pages>
Reference-contexts: HeNCE provides a rich set of programming primitives and an execution model designed to assist the programmer in developing programs for execution on a networked group of heterogeneous machines <ref> [3] </ref>. Together, Zoom and HeNCE provide a powerful tool for heterogeneous program development. The Zoom representation of an application is intended to allow scientists and programmers working at various levels of the development hierarchy to communicate and reason about their application. <p> The user only need supply a valid HeNCE program graph. We take the following description and Figure 4 from <ref> [3] </ref> where a more complete discussion of the HeNCE representation and programming tool can be found. Denoted by a circle, each node within a HeNCE program represents a subroutine written in some external programming language, such as Fortran or C. <p> Currently, HeNCE programs are statically mapped according to the cost matrix. The mapping occurs just before the application is executed, but no dynamic system load information is consulted, nor does the mapping change once execution has been started. In <ref> [3] </ref>, the authors describe the incorporation of dynamic system information as part of future HeNCE development. Similarly, dynamic mapping information currently is not included as part of the Zoom representation.
Reference: [4] <author> Bergman, L., Braun, H.-W., Chinoy, B., Kolawa, A., Kuppermann, A., Lyster, P., Mechoso, C. R., Messina, P., Morrison, J., Stanfill, D., St.John, W., and Tenbrick, S. </author> <title> Casa gigabit testbed : 1993 annual report; a testbed for distributed computing. </title> <type> Tech. Rep. </type> <institution> CCSF-33, Caltech Concurrent Supercomputing Facilities, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: To do so, we use an enhancement of Cal-crust, a heterogeneous application currently under development at JPL <ref> [4] </ref>. The purpose of Calcrust is to combine USGS survey data, NASA satellite data, and sounding data taken from oil company archives to produce a 3-D rendering of the earth's surface and crust. Two coupling units, each targeted to a single architectural type, make up the actual application.
Reference: [5] <author> Flower, J., and Kowala, A. </author> <title> Express is not just a message passing system: Current and fu-rure directions in express. </title> <booktitle> Parallel Computing 20 (1994), </booktitle> <pages> 597-614. </pages>
Reference-contexts: Floating point numbers are stored differently on Cray computers than on most workstations, for example. Many communication libraries such as PVM [10], Express <ref> [5] </ref>, and XDR [9] will translate one machine's data format to another as the data is moved between machines. These format conversion are represented under Zoom at Level 3 in the f-matrix associated with each wire or edge.
Reference: [6] <author> Khokhar, A., Prasanna, V. K., Shaaban, M., and Wang, C.-L. </author> <title> Heterogeneous Supercomputing: Problems and Issues. </title> <booktitle> In Proceedings of the 1992 Heterogeneous Workshop (1992), </booktitle> <publisher> IEEE CS Press. </publisher>
Reference-contexts: We don't anticipate that this sort of transformation can be done automatically for the general case, however. 3.4 Structure Conversions An important execution cost incurred by some heterogeneous applications comes from the need to convert data as it is passed from one machine to another <ref> [6] </ref>. Floating point numbers are stored differently on Cray computers than on most workstations, for example. Many communication libraries such as PVM [10], Express [5], and XDR [9] will translate one machine's data format to another as the data is moved between machines.
Reference: [7] <author> Mechoso, C. R., Ma, C.-C., Farrara, J. D., Spahr, J. A., and Moore, R. W. </author> <title> Paralleliza-tion and distribution of a coupled atmosphere-ocean general circulation model. </title> <journal> Monthly Weather Review 121, </journal> <month> 7 (July </month> <year> 1993), </year> <pages> 2062-76. </pages>
Reference-contexts: Frequently, however, the producing computation is generating pieces of a larger data structure and sending them to the consumer one-at-a-time where they are used to compute another aggregate data structure. For example, in the GCM code developed at UCLA <ref> [7] </ref>, the atmospheric model passes "bands" of a grid representing the earth's atmosphere to the ocean model. The ocean code then uses each band to compute its effect on a corresponding region of the ocean. <p> Since HeNCE uses PVM, however, format con-versions are automatically performed as part of any communication. Therefore, there is no corresponding Zoom-to-HeNCE translation. However, different routines within an application may also require conversion of higher-level data structures. For example, in the heterogeneous GCM implementation discussed in <ref> [7] </ref>, the atmospheric models use a different grid density than does the ocean model. In Zoom, the structure conversion computation is represented as a square.
Reference: [8] <author> Snyder, L. </author> <title> Phase Abstractions for Portable and Scalable Parallel Programming. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Phases that are executed once are enclosed by a set of single lines. 1 The decomposition of heterogeneous applications into phases represents the structure of typical heterogeneous pro grams and follows <ref> [8] </ref>. for a fictitious application. It consists of two coupling units, A and B, which are linked sequentially and are executed multiple times as a series of iterations. 2.2 Zoom Level 2 Components The tasks of a heterogeneous application can typically be implemented on multiple machines.
Reference: [9] <author> Sun Microsystems Inc. </author> <title> Network Programming Guide External Data Representation Standard: Protocol Specification, </title> <year> 1990. </year>
Reference-contexts: Floating point numbers are stored differently on Cray computers than on most workstations, for example. Many communication libraries such as PVM [10], Express [5], and XDR <ref> [9] </ref> will translate one machine's data format to another as the data is moved between machines. These format conversion are represented under Zoom at Level 3 in the f-matrix associated with each wire or edge. Since HeNCE uses PVM, however, format con-versions are automatically performed as part of any communication.
Reference: [10] <author> Sunderam, V. S., Geist, G. A., Dongarra, J., and Manchek, R. </author> <title> The pvm concurrent computing system: evolution, experiences, </title> <booktitle> and trends. Parallel Computing 20, </booktitle> <month> 4 (April </month> <year> 1994), </year> <pages> 531-45. </pages>
Reference-contexts: Alternatively, HeNCE programs may be entered textually to allow the use of conventional program editors. Once written and compiled, the HeNCE system maps a program to a user-defined collection of machines. Both the programmer and the system can control the mapping of each program component. PVM (Parallel Virtual Machine) <ref> [10] </ref> is used to implement communication between program components, and to control execution, and the HeNCE system automatically inserts the necessary PVM primitives into the program at compile time. The user only need supply a valid HeNCE program graph. <p> Floating point numbers are stored differently on Cray computers than on most workstations, for example. Many communication libraries such as PVM <ref> [10] </ref>, Express [5], and XDR [9] will translate one machine's data format to another as the data is moved between machines. These format conversion are represented under Zoom at Level 3 in the f-matrix associated with each wire or edge.
References-found: 10

