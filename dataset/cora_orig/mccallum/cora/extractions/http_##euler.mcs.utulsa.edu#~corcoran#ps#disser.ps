URL: http://euler.mcs.utulsa.edu/~corcoran/ps/disser.ps
Refering-URL: http://euler.mcs.utulsa.edu/~corcoran/pubs.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: TECHNIQUES FOR REDUCING THE DISRUPTION OF SUPERIOR BUILDING BLOCKS IN GENETIC ALGORITHMS  
Author: T H E U N I V E R S I T Y O F T U L S A by Arthur Leo Corcoran III 
Degree: A dissertation submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the Discipline of Computer Science The Graduate School  
Date: 1994  
Affiliation: THE GRADUATE SCHOOL  The University of Tulsa  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Baiardi, D. Ciuffolini, A. M. Lomartire, D. Montanari, and G. Pesce. </author> <title> Nested hybrid genetic algorithms for system configuration and program mapping in massively parallel systems. </title> <note> In Forrest [25]. </note>
Reference-contexts: Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. <ref> [1] </ref>. The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53].
Reference: [2] <author> S. Baluja. </author> <title> Structure and performance of fine-grain parallelism in genetic search. </title> <note> In Forrest [25]. </note>
Reference-contexts: Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja <ref> [2] </ref>. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory. The following is a brief overview of the idea of implicit parallelism, the underlying theory needed to understand it, and its implications for GAs.
Reference: [3] <editor> R. K. Belew and L. B. Booker, editors. </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <address> San Diego, California, 1991. </address> <publisher> Mor-gan Kaufmann. </publisher>
Reference-contexts: The number of solutions in each class was found to obey the following cost distribution: <ref> [3] </ref>:###########.......................................: 144 (20%) [5]:###...............................................: 32 (4.44444%) The majority of the solutions, 544 out of 720 or 76%, require 4 bins. There are 144 optimal solutions, representing 20% of the total number. Only 32 solutions or 4% require 5 bins. <p> Only 32 solutions or 4% require 5 bins. The average cost for this data set is 3.84 bins and the standard deviation is 0.469. Using reduction, the solutions ranged from 3 to 4 bins with the following cost distribution: <ref> [3] </ref>:############################################......: 624 (86.6667%) The overwhelming majority of the cases, 624 out of 720 or 87%, are optimal with 3 bins. There are 96 solutions or 13% which require 4 bins. This distribution has an average cost of 3.13 bins and a standard deviation of 0.340.
Reference: [4] <author> J. L. Blanton and R. L. Wainwright. </author> <title> Vehicle routing with time windows using genetic algorithms. </title> <editor> In W. A. Coberly, editor, </editor> <booktitle> Proceedings of the Sixth Okla-homa Symposium on Artificial Intelligence, </booktitle> <pages> pages 242-251, </pages> <institution> Tulsa, Oklahoma, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: In this case, the vector or matrix can be removed from the chromosomes and be used as a global data structure. This is very similar to the global precedence vector used by Blanton and Wainwright <ref> [4] </ref> for the Vehicle Routing Problem, which they developed with great success. 6.2 Representative Problems In this section, a genetic permutation sorting problem and the traveling salesman problem are introduced as representative problems that are ideal candidates for bonding. 6.2.1 The Permutation Sorting Problem The problem of sorting a set of <p> Examples include bank deliveries, refuse collection, school bus routing, postal deliveries, overnight deliveries, and most routing and scheduling problems. For more details using GAs with VRP see <ref> [4] </ref>. In order to simplify this problem, consider a single vehicle with no time window or capacity constraints. This degenerates to the Traveling Salesman Problem (TSP). Consider the ten customers A through J depicted in Figure 6.3. The customers were placed randomly in a 50 by 50 grid.
Reference: [5] <author> D. E. Brown, C. L. Huntley, and A. R. Spillane. </author> <title> A parallel genetic heuristic for the quadratic assignment problem. </title> <note> In Schaffer [62]. </note>
Reference-contexts: Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. [1]. The Intel Hypercube has been used for global models by Brown et al. <ref> [5] </ref>, Mansour and Fox [50], and Merkle and Lamont [53]. <p> The number of solutions in each class was found to obey the following cost distribution: [3]:###########.......................................: 144 (20%) <ref> [5] </ref>:###...............................................: 32 (4.44444%) The majority of the solutions, 544 out of 720 or 76%, require 4 bins. There are 144 optimal solutions, representing 20% of the total number. Only 32 solutions or 4% require 5 bins. <p> Each of the data sets has the same pattern of cost distribution behavior as the original 6 package data set. For example, the 11 package data set has the following distribution without reduction: <ref> [5] </ref>:##................................................: 836352 (2.09524%) [7]:##################................................: 13825440 (34.6356%) After reduction, the cost distribution was as follows: [5]:######################............................: 17319648 (43.3894%) [7]:###...............................................: 1818120 (4.55477%) Note the dramatic shift towards the optimal solution. Table 4.2 shows the average costs with and without reduction for a two dimensional bin packing problem. <p> Each of the data sets has the same pattern of cost distribution behavior as the original 6 package data set. For example, the 11 package data set has the following distribution without reduction: <ref> [5] </ref>:##................................................: 836352 (2.09524%) [7]:##################................................: 13825440 (34.6356%) After reduction, the cost distribution was as follows: [5]:######################............................: 17319648 (43.3894%) [7]:###...............................................: 1818120 (4.55477%) Note the dramatic shift towards the optimal solution. Table 4.2 shows the average costs with and without reduction for a two dimensional bin packing problem. In this case, the fitness is obtained by using a level-oriented next fit on a single open-ended bin.
Reference: [6] <author> R.-J. Chen, R. R. Meyer, and J. Yackel. </author> <title> A genetic algorithm for diversity minimization and its parallel implementation. </title> <note> In Forrest [25]. </note>
Reference-contexts: Ironically, the global models have not received as much attention as the others because of machine dependency considerations. Global models have been used on a variety of architectures. They have been implemented on the connection machine (CM) by Robertson [60], Kosak et al. [44], and Chen et al. <ref> [6] </ref>. Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. [1].
Reference: [7] <author> E. G. Coffman, M. R. Garey, D. S. Johnson, and R. E. Tarjan. </author> <title> Performance bounds for level-oriented two-dimensional packing algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 9(4) </volume> <pages> 808-826, </pages> <month> Nov. </month> <year> 1980. </year>
Reference-contexts: This is called a level-oriented technique. With this modification to the packing model, traditional 46 one dimensional packing strategies can be used to pack each level. In fact, when all of the packages have the same height, this degenerates into the one dimensional problem. Note, Coffman et al. <ref> [7] </ref> have shown that level-oriented techniques have at least as good asymptotic bounds as any other technique on the two-dimensional problem. The two dimensional version of NFD is Next Fit Decreasing Height (NFDH). In NFDH, the objects are presorted by decreasing height. <p> Subsequent objects are placed in the bin with their bottom side on this new level. First Fit Decreasing Height (FFDH) works analogously, except it scans all previous levels to place the current object. As reported by Coffman et al. <ref> [7] </ref>, NFDH can guarantee no worse than twice optimal with O (n log n) effort. FFDH guarantees no worse than 1.7 times optimal with the same effort. Coffman describes a much more complex heuristic, called Split Fit (SF), which has a bound of 1.5 times optimal. <p> Each of the data sets has the same pattern of cost distribution behavior as the original 6 package data set. For example, the 11 package data set has the following distribution without reduction: [5]:##................................................: 836352 (2.09524%) <ref> [7] </ref>:##################................................: 13825440 (34.6356%) After reduction, the cost distribution was as follows: [5]:######################............................: 17319648 (43.3894%) [7]:###...............................................: 1818120 (4.55477%) Note the dramatic shift towards the optimal solution. Table 4.2 shows the average costs with and without reduction for a two dimensional bin packing problem. <p> For example, the 11 package data set has the following distribution without reduction: [5]:##................................................: 836352 (2.09524%) <ref> [7] </ref>:##################................................: 13825440 (34.6356%) After reduction, the cost distribution was as follows: [5]:######################............................: 17319648 (43.3894%) [7]:###...............................................: 1818120 (4.55477%) Note the dramatic shift towards the optimal solution. Table 4.2 shows the average costs with and without reduction for a two dimensional bin packing problem. In this case, the fitness is obtained by using a level-oriented next fit on a single open-ended bin. <p> This research is described in Corcoran and Wainwright [12, 13, 15]. The genetic algorithm package, LibGA [14], was used to implement reduction on a two dimensional bin packing problem. Recall, Coffman et al. <ref> [7] </ref> reports the best deterministic algorithm in this case is split-fit (SF), which guarantees performance bounds of 1.5 times optimal. Other algorithms include first fit decreasing height (FFDH) with bound of 1.7 times optimal and next fit decreasing height (NFDH) with bound of 2.0 times optimal.
Reference: [8] <author> J. P. Cohoon, S. U. Hegde, W. N. Martin, and D. S. Richards. </author> <title> Punctuated equilibria: A parallel genetic algorithm. </title> <note> In Grefenstette [35]. </note>
Reference-contexts: The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67]. Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. <ref> [8] </ref>, Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures.
Reference: [9] <author> J. P. Cohoon, W. N. Martin, and D. S. Richards. </author> <title> A multi-population genetic algorithm for solving the K-partition problem on hypercubes. </title> <editor> In Belew and Booker [3]. </editor> <volume> 115 116 </volume>
Reference-contexts: It is no surprise that most island model GAs have been implemented on coarse grained parallel architectures. Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze [57], Tanese [76, 77], Cohoon et al. <ref> [9] </ref>, Muhlenbein and Born [55], and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67].
Reference: [10] <author> R. J. Collins and D. R. Jefferson. </author> <title> Selection in massively parallel genetic algorithms. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: Implementations of the cellular model have been reported on various architectures. Implementations on the INMOS Transputer are reported by Von Laszewski [82], Kitano et al. [42], and Tamaki and Nishikawa [75]. The connection machine has been used to implement the cellular model by Collins and Jefferson <ref> [10] </ref> and Thearling [78].
Reference: [11] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A genetic algorithm for packing in three dimensions. </title> <editor> In H. Berghel, E. Deaton, G. Hedrick, D. Roach, and R. Wainwright, editors, </editor> <booktitle> Proceedings of the 1992 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 1021-1030, </pages> <address> New York, 1992. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Smith [69] used a GA on a two dimensional problem using a bottom left packing strategy. Corcoran and Wainwright [14] used a GA on a two dimensional problem using a level-oriented strategy. Corcoran and Wainwright <ref> [11] </ref> also applied a GA to a three dimensional problem. However, as Corcoran and Wainwright [14] report, the GA fails to find the optimal on a contrived two dimensional problem with as few as 75 packages. <p> to the optimum. 4.4 Experimental Analysis This section contains a summary of experimental results of the implementation of chromosome reduction as applied to the bin packing problem. 4.4.1 Preliminary Experiments Genetic algorithms have been used with great success in both two dimensional bin packing [14] and three dimensional bin packing <ref> [11] </ref>. These results show that genetic algorithms greatly improve packing performance over the traditional algorithms. <p> These results show that genetic algorithms greatly improve packing performance over the traditional algorithms. My research to date <ref> [11, 14] </ref> has investigated the possibility of getting even better results for the genetic bin packing algorithm by incorporating tech 53 Steady-State Generational Best Data Set TRAD MOS TRAD MOS Optimal *OPT L25 24.8 22.6 22.3 20.3 20 1.015 L100 102.9 101.9 94.5 91.1 80 1.139 R50 56.0 55.2 50.8 49.9
Reference: [12] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A heuristic for improved genetic bin packing. </title> <journal> Information Processing Letters, </journal> <month> May </month> <year> 1993. </year> <note> Submitted. </note>
Reference-contexts: This research is described in Corcoran and Wainwright <ref> [12, 13, 15] </ref>. The genetic algorithm package, LibGA [14], was used to implement reduction on a two dimensional bin packing problem. Recall, Coffman et al. [7] reports the best deterministic algorithm in this case is split-fit (SF), which guarantees performance bounds of 1.5 times optimal.
Reference: [13] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A heuristic for improved genetic bin packing. </title> <type> Technical Report UTULSA-MCS-93-8, </type> <institution> The University of Tulsa, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: This research is described in Corcoran and Wainwright <ref> [12, 13, 15] </ref>. The genetic algorithm package, LibGA [14], was used to implement reduction on a two dimensional bin packing problem. Recall, Coffman et al. [7] reports the best deterministic algorithm in this case is split-fit (SF), which guarantees performance bounds of 1.5 times optimal.
Reference: [14] <author> A. L. Corcoran and R. L. Wainwright. LibGA: </author> <title> A user-friendly workbench for order-based genetic algorithm research. </title> <editor> In E. Deaton, K. M. George, H. Berghel, and G. Hedrick, editors, </editor> <booktitle> Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 111-118, </pages> <address> New York, 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Goldberg's textbook includes a generational GA written in Pascal called the "simple genetic algorithm" (SGA). The generational model is also available in the GA package developed as part of this research, LibGA <ref> [14] </ref>. 2.3.2.2 Steady-State Population Model The steady-state model is a more recent development. It is the model used in Gen-itor [86]. The steady-state model uses a single pool for both parents and offspring. Parents are selected from the pool and children are generated. <p> Smith [69] used a GA on a two dimensional problem using a bottom left packing strategy. Corcoran and Wainwright <ref> [14] </ref> used a GA on a two dimensional problem using a level-oriented strategy. Corcoran and Wainwright [11] also applied a GA to a three dimensional problem. However, as Corcoran and Wainwright [14] report, the GA fails to find the optimal on a contrived two dimensional problem with as few as 75 <p> Corcoran and Wainwright <ref> [14] </ref> used a GA on a two dimensional problem using a level-oriented strategy. Corcoran and Wainwright [11] also applied a GA to a three dimensional problem. However, as Corcoran and Wainwright [14] report, the GA fails to find the optimal on a contrived two dimensional problem with as few as 75 packages. <p> cost and shifting the cost closer to the optimum. 4.4 Experimental Analysis This section contains a summary of experimental results of the implementation of chromosome reduction as applied to the bin packing problem. 4.4.1 Preliminary Experiments Genetic algorithms have been used with great success in both two dimensional bin packing <ref> [14] </ref> and three dimensional bin packing [11]. These results show that genetic algorithms greatly improve packing performance over the traditional algorithms. <p> These results show that genetic algorithms greatly improve packing performance over the traditional algorithms. My research to date <ref> [11, 14] </ref> has investigated the possibility of getting even better results for the genetic bin packing algorithm by incorporating tech 53 Steady-State Generational Best Data Set TRAD MOS TRAD MOS Optimal *OPT L25 24.8 22.6 22.3 20.3 20 1.015 L100 102.9 101.9 94.5 91.1 80 1.139 R50 56.0 55.2 50.8 49.9 <p> This research is described in Corcoran and Wainwright [12, 13, 15]. The genetic algorithm package, LibGA <ref> [14] </ref>, was used to implement reduction on a two dimensional bin packing problem. Recall, Coffman et al. [7] reports the best deterministic algorithm in this case is split-fit (SF), which guarantees performance bounds of 1.5 times optimal. <p> To illustrate the effectiveness of chromosome reduction, further experimental tests were run with the contrived 75 package data set of Corcoran and Wainwright <ref> [14] </ref> and described above. This data set is composed of 75 two-dimensional packages which can be optimally packed in a single open-ended bin using a level-oriented packing strategy. The optimal packing height for this data set is 60.
Reference: [15] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> Reducing disruption of superior building blocks in genetic algorithms. </title> <type> Technical Report UTULSA-MCS-93-1-1, </type> <institution> The University of Tulsa, </institution> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: This research is described in Corcoran and Wainwright <ref> [12, 13, 15] </ref>. The genetic algorithm package, LibGA [14], was used to implement reduction on a two dimensional bin packing problem. Recall, Coffman et al. [7] reports the best deterministic algorithm in this case is split-fit (SF), which guarantees performance bounds of 1.5 times optimal.
Reference: [16] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A parallel island model genetic algorithm for the multiprocessor scheduling problem. </title> <editor> In E. Deaton, K. M. George, H. Berghel, and G. Hedrick, editors, </editor> <booktitle> Proceedings of the 1994 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 111-118, </pages> <address> New York, 1994. </address> <publisher> ACM Press. </publisher>
Reference-contexts: results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright <ref> [16] </ref>. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures. Cellular models (a term used by Whitley [85]) similarly arose from the desire to exploit the fine grained, massively parallel architectures.
Reference: [17] <author> Y. Davidor. </author> <title> A naturally occuring niche and species phenomenon: The model and first results. </title> <editor> In Belew and Booker [3]. </editor> <volume> 117 </volume>
Reference-contexts: The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor <ref> [17] </ref>, Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [18] <author> Y. Davidor, T. Yamada, and R. Nakano. </author> <title> The ECOlogical framework II: Improving GA performance at virtually zero cost. </title> <note> In Forrest [25]. </note>
Reference-contexts: Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. <ref> [18] </ref>, Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [19] <editor> L. Davis, editor. </editor> <booktitle> Handbook of Genetic Algorithms. </booktitle> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: The crossover could create children as it normally does, and the postprocessing operation could undo any damage created. This is especially useful in single and multipoint crossover techniques. * The uniform order crossover (UOX) operator of Davis <ref> [19] </ref> uses randomly generated bit masks. These could easily be replaced by the user defined bit mask from each parent chromosome. An element of randomness could be preserved by performing a logical OR between the random and user defined masks. I define this operator as UOX/MASK.
Reference: [20] <author> P. S. de Souza and S. N. Talukdar. </author> <title> Genetic algorithms in asynchronous teams. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. Other global model GAs are reported by Maruyama et al. [51, 52], Shonkwiler [68], De Souza and Talukdar <ref> [20] </ref>, Mahfoud and Goldberg [47], Gordon et al. [31], Gordon and Whitley [30], and Elketroussi and Fan [22]. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures.
Reference: [21] <author> M. Dorigo and E. Sirtori. </author> <title> ALECSYS: A parallel laboratory for learning classifier systems. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: Global models have been used on a variety of architectures. They have been implemented on the connection machine (CM) by Robertson [60], Kosak et al. [44], and Chen et al. [6]. Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori <ref> [21] </ref>, Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. [1]. The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53].
Reference: [22] <author> M. Elketroussi and D. Fan. </author> <title> GADELO: A multi-population genetic algorithm based on dynamic exploration of local optima. </title> <note> In Forrest [25]. </note>
Reference-contexts: Other global model GAs are reported by Maruyama et al. [51, 52], Shonkwiler [68], De Souza and Talukdar [20], Mahfoud and Goldberg [47], Gordon et al. [31], Gordon and Whitley [30], and Elketroussi and Fan <ref> [22] </ref>. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures. While global models use a panmictic mating strategy, island models use a strategy usually found in a polytypic species, which evolve in isolated subgroups with more interaction within subgroups than between them. <p> Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan <ref> [22] </ref>, Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures. Cellular models (a term used by Whitley [85]) similarly arose from the desire to exploit the fine grained, massively parallel architectures.
Reference: [23] <author> J. M. Fitzpatrick and J. J. Grefenstette. </author> <title> Genetic algorithms in noisy environments. </title> <journal> Machine Learning, </journal> <volume> 3(2) </volume> <pages> 101-120, </pages> <year> 1988. </year>
Reference-contexts: The idea was first introduced by Holland [37], who gave a rigorous mathematical argument to support it. Goldberg [29] provides a more gentle treatment. An alternative derivation was provided by Fitzpatrick and Grefenstette <ref> [23] </ref>. Further development of the theory was presented by Grefen-stette and Baker [36]. To understand implicit parallelism, one must first understand the idea of a schema.
Reference: [24] <author> L. Fogel, A. Owens, and M. Walsh. </author> <title> Artificial Intelligence through Simulated Evolution. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1966. </year>
Reference-contexts: After this phase, the members are all reevaluated and a set of `survivors' is selected for the next generation. In a sense, this is just like a GA with no crossover, and only mutation. More information can be found in the book by Fogel <ref> [24] </ref>, the father of EP. 2.4.3 Evolution Strategies Evolution strategies actually were developed independently at the same time Hol-land was formulating his adaptation ideas.
Reference: [25] <editor> S. Forrest, editor. </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <address> Urbana-Champaign, Illinois, July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [26] <author> S. Forrest and M. Mitchell. </author> <title> Relative building-block fitness and the building-block hypothesis. </title> <editor> In D. Whitley, editor, </editor> <booktitle> Foundations of Genetic Algorithms 2. </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference-contexts: This is an ideal situation for the use of masking to tell the GA which parameters are good and which are bad. 5.2.2 Hitchhiking and the Royal Road Functions The Royal Road functions are a class of bit string based fitness landscapes introduced by Forrest and Mitchell <ref> [26] </ref>. These functions explicitly define intermediate order schemata called `stepping stones' which lay out a path to the optimum solution. Figures 5.2 and 5.3 below are adapted from Forrest and Mitchell [26]. 66 s 2 = ********11111111************************************************ s 4 = ************************11111111******************************** s 6 = ****************************************11111111**************** s 8 = ********************************************************11111111 s 9 <p> Functions The Royal Road functions are a class of bit string based fitness landscapes introduced by Forrest and Mitchell <ref> [26] </ref>. These functions explicitly define intermediate order schemata called `stepping stones' which lay out a path to the optimum solution. Figures 5.2 and 5.3 below are adapted from Forrest and Mitchell [26]. 66 s 2 = ********11111111************************************************ s 4 = ************************11111111******************************** s 6 = ****************************************11111111**************** s 8 = ********************************************************11111111 s 9 = 1111111111111111************************************************ s 11 = ********************************1111111111111111**************** s 13 = 11111111111111111111111111111111******************************** s opt = 1111111111111111111111111111111111111111111111111111111111111111 schemata define disjoint sequences of bits. <p> This results in a total contribution of 32. Thus, the maximum possible fitness attainable is 192, as represented by s opt . One would expect the presence of the additional schemata in R2 to accelerate 67 convergence to the optimum. However, Forrest and Mitchell <ref> [26] </ref> have reported that the GA converges faster on R1 than R2. Forrest and Mitchell concluded that the GA's efficient processing of building blocks depends on the relative fitness of those building blocks in addition to their mere presence. <p> Note, the average results for R1 under the conservative policy are 92.5% of optimal and those for R2 are only 87.1% of optimal. This is the same effect found by Forrest and Mitchell <ref> [26] </ref>. Recall, they observed that R2 had higher weight on the intermediate stepping stones than R1. They theorized that the GA on R2 should therefore have quicker convergence than on R1. They concluded that the relatively poor performance on R2 by the GA was caused by hitchhiking.
Reference: [27] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The bin packing problem is a representative reducible problem. 4.2.1 Introduction The Bin Packing Problem is a representative reducible problem which is both order-based and has a rugged fitness landscape. The bin packing problem can be briefly stated as follows (based on the definition by Garey and Johnson <ref> [27] </ref>): Given a finite collection U = fu 1 ; u 2 ; :::; u n g of items, a positive integer size s (u) for each u 2 U , a positive integer bin capacity B, and a posi tive integer K, is there a partition of U into disjoint <p> is there a partition of U into disjoint sets U 1 ; U 2 ; :::; U K such that the sum of the sizes of the items in each U i is B or less? The bin packing problem has been shown to be NP-complete in the strong sense <ref> [27] </ref>. The proof is based on the fact that it is a generalization of the partition problem. The bin packing problem has many important applications.
Reference: [28] <author> M. R. Garey and D. S. Johnson. </author> <title> Approximation algorithms for bin packing problems: A survey. </title> <editor> In G. Ausiello and M. Lucertini, editors, </editor> <booktitle> Analysis and Design of Algorithms in Combinatorial Optimization, </booktitle> <pages> pages 147-172. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1981. </year> <month> 118 </month>
Reference-contexts: When NF, FF, and BF are augmented with this step they are known as Next Fit Decreasing (NFD), First Fit Decreasing (FFD), and Best Fit Decreasing (BFD), respectively. The advantage of these algorithms is that they have guaranteed packing performance bounds. As reported by Garey and Johnson <ref> [28] </ref>, NF never packs worse than twice optimal using an O (n) algorithm. FF and BF can improve this to no worse than 1.7 times optimal using an O (n log n) algorithm.
Reference: [29] <author> D. E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: At first, Holland's artificial adaptive systems were an arcane subject studied by Holland and a few of his students. However, this soon changed after one of his students, David Goldberg, published a practical, readable text on genetic algorithms <ref> [29] </ref>. Since that time, research in genetic algorithms and other evolutionary algorithms has increased tremendously. Goldberg characterized the genetic algorithm as a search and optimization technique. As such, the GA differs from traditional search and optimization techniques in four fundamental ways. <p> Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [29, 37] </ref> or a `steady-state' [86] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. <p> When enough offspring have been generated, the current population is discarded and the offspring become the next generation. The generational population model is the model used by Holland [37] when he first introduced genetic algorithms. It is also the model used by Goldberg <ref> [29] </ref> in his textbook. As the first proposed population model, the generational model is the most commonly used population model. This is evident by the large number of software packages found to be using this model in Schraudolph's GA Software Survey [63]. <p> This is not a valid permutation! Consequently, order-based crossover operators have been developed which maintain the ordering information. These operators actually grew out of the idea of the inversion operator described in Goldberg's <ref> [29] </ref> textbook. These operators include order1 crossover, order2 crossover, cycle crossover, position based crossover, partially mapped crossover (PMX), uniform order crossover (UOX), and relative order crossover (ROX). Asexual crossover is a swapping of two randomly chosen genes in a chromosome. <p> For example, if the chromosome is encoded using the binary alphabet, f0; 1g, the schema is defined by the augmented alphabet, f0; 1; flg. Goldberg <ref> [29] </ref> provides the following examples for chromosomes of length 5: the schema fl0000 matches two strings, f10000; 00000g, and the schema fl111fl matches f01110; 01111; 11110; 11111g. The schema allows similarities to be expressed in a concise and powerful way. The genetic algorithm, however, does not directly manipulate schemata. <p> The growth or decline of H is proportional to its relative fitness in the population, f r (H), and is governed by m (H; t + 1) = m (H; t)f r (H) (2:1) Goldberg <ref> [29] </ref> gives a slightly less general, yet more specific form of this equation: let f (H) represent the average fitness of the chromosomes containing schema H, and f represent the average fitness of the entire population calculated using f = i=1 f i : 21 Without loss of generality, assume a <p> The following is a brief overview of the idea of implicit parallelism, the underlying theory needed to understand it, and its implications for GAs. The idea was first introduced by Holland [37], who gave a rigorous mathematical argument to support it. Goldberg <ref> [29] </ref> provides a more gentle treatment. An alternative derivation was provided by Fitzpatrick and Grefenstette [23]. Further development of the theory was presented by Grefen-stette and Baker [36]. To understand implicit parallelism, one must first understand the idea of a schema. <p> That is, while n structures are processed each generation, n 3 schemata are being operated upon. Implicit parallelism is at work with no need for special bookkeeping or memory other than the population itself. Shown below is an overview of Goldberg's <ref> [29] </ref> rederivation of Holland's estimate. Consider a population of n binary strings of length l. Also, consider the set of schemata that survive crossover and mutation with a probability greater than p s , a constant. <p> Recall that Goldberg <ref> [29] </ref> showed the growth and decline of schemata in a maximizing genetic algorithm using simple one-point crossover and simple mutation to be governed by the following equation: m (H; t + 1) m (H; t) f 1 p c l 1 # In the above equation, m (H; t) denotes the
Reference: [30] <author> V. S. Gordon and D. Whitley. </author> <title> Serial and parallel genetic algorithms as function optimizers. </title> <note> In Forrest [25]. </note>
Reference-contexts: Other global model GAs are reported by Maruyama et al. [51, 52], Shonkwiler [68], De Souza and Talukdar [20], Mahfoud and Goldberg [47], Gordon et al. [31], Gordon and Whitley <ref> [30] </ref>, and Elketroussi and Fan [22]. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley <ref> [30] </ref>, Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley <ref> [30] </ref>, and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [31] <author> V. S. Gordon, D. Whitley, and A. P. W. Bohm. </author> <title> Dataflow parallelism in genetic algorithms. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. Other global model GAs are reported by Maruyama et al. [51, 52], Shonkwiler [68], De Souza and Talukdar [20], Mahfoud and Goldberg [47], Gordon et al. <ref> [31] </ref>, Gordon and Whitley [30], and Elketroussi and Fan [22]. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. <ref> [31] </ref>, Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. <ref> [31] </ref>, Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [32] <author> M. Gorges-Schleuter. </author> <title> ASPARAGOS: An asynchronous parallel genetic optimization strategy. </title> <note> In Schaffer [62]. </note>
Reference-contexts: The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter <ref> [32, 33] </ref>, Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [33] <author> M. Gorges-Schleuter. </author> <title> Comparison of local mating strategies in massively parallel genetic algorithms. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter <ref> [33] </ref>, Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter <ref> [32, 33] </ref>, Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [34] <author> J. J. Grefenstette. </author> <title> GENESIS: A system for using genetic search procedures. </title> <booktitle> In Proceedings of the Conference on Intelligent Systems and Machines, </booktitle> <pages> pages 161-165, </pages> <year> 1984. </year>
Reference-contexts: This is evident by the large number of software packages found to be using this model in Schraudolph's GA Software Survey [63]. One of the first widely used generational GA packages was GENESIS, written by John Grefenstette <ref> [34] </ref>. Many other generational GA packages were developed based on GENESIS, including Schraudolph and Grefenstette's GAucsd [64], and Thomas Back's GENEsYs. Goldberg's textbook includes a generational GA written in Pascal called the "simple genetic algorithm" (SGA).
Reference: [35] <editor> J. J. Grefenstette, editor. </editor> <booktitle> Genetic Algorithms and Their Applications: Proceedings of the Second International Conference on Genetic Algorithms, </booktitle> <address> Hills-dale, New Jersey, 1987. </address> <publisher> Lawrence Erlbaum. </publisher>
Reference: [36] <author> J. J. Grefenstette. </author> <title> How genetic algorithms work: A critical look at implicit parallelism. </title> <note> In Schaffer [62]. </note>
Reference-contexts: The idea was first introduced by Holland [37], who gave a rigorous mathematical argument to support it. Goldberg [29] provides a more gentle treatment. An alternative derivation was provided by Fitzpatrick and Grefenstette [23]. Further development of the theory was presented by Grefen-stette and Baker <ref> [36] </ref>. To understand implicit parallelism, one must first understand the idea of a schema. Recall from Section 2.3.6 above, Holland [37] first introduced the schema as a type of similarity template with which different genetic strings could be compared. <p> Consequently, short, highly fit schemata are allocated trials at an exponentially increasing rate while less fit schemata rapidly decline in number. This is what Holland termed implicit parallelism. 2.3.10 The Argument for Implicit Parallelism Grefenstette and Baker <ref> [36] </ref> showed implicit parallelism to be true using the following argument. Let the target sampling rate tsr (x; t) define the expected number of offspring to be generated from an individual x at time t. <p> fitness function, for any two short defining length schemata H i and H j , such that the observed performance of H i is consistently higher than the observed performance of H j , H i grows at an exponentially greater rate than H j . 28 Grefenstette and Baker <ref> [36] </ref> generalize Theorem 2 as follows. Let u be a monotonic fitness function if the following condition holds: u (x i ) u (x j ) iff fff (x i ) fff (x j ) (2:7) where ff is defined as before.
Reference: [37] <author> J. H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, Michigan, </address> <year> 1975. </year>
Reference-contexts: The history and inner workings of the GA are presented, as well as the theory behind the GA. 2.3.1 Introduction John Holland's monograph <ref> [37] </ref> on adaptive systems was the first to combine ideas from mathematics, computer science, and systems theory to build artificial adaptive systems. These artificial adaptive systems are used to solve complex problems 10 in a manner analogous to that used in natural adaptive systems. <p> Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [29, 37] </ref> or a `steady-state' [86] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. <p> Parents are selected from the current population, recombined, and the resulting offspring are saved in a temporary location. When enough offspring have been generated, the current population is discarded and the offspring become the next generation. The generational population model is the model used by Holland <ref> [37] </ref> when he first introduced genetic algorithms. It is also the model used by Goldberg [29] in his textbook. As the first proposed population model, the generational model is the most commonly used population model. <p> It is this exact process happening in 20 parallel over many hyperplanes which is responsible for the GA's success. This is more formally defined by the Schema Theorem, which is based on the idea of schemata. 2.3.6 Schema Holland <ref> [37] </ref> first introduced the schema as a type of similarity template with which different genetic strings could be compared. The schema includes the alphabet used to encode the chromosome and adds a wild card or `don't care' symbol, which is arbitrarily denoted with `fl'. <p> The following is a brief overview of the idea of implicit parallelism, the underlying theory needed to understand it, and its implications for GAs. The idea was first introduced by Holland <ref> [37] </ref>, who gave a rigorous mathematical argument to support it. Goldberg [29] provides a more gentle treatment. An alternative derivation was provided by Fitzpatrick and Grefenstette [23]. Further development of the theory was presented by Grefen-stette and Baker [36]. <p> Goldberg [29] provides a more gentle treatment. An alternative derivation was provided by Fitzpatrick and Grefenstette [23]. Further development of the theory was presented by Grefen-stette and Baker [36]. To understand implicit parallelism, one must first understand the idea of a schema. Recall from Section 2.3.6 above, Holland <ref> [37] </ref> first introduced the schema as a type of similarity template with which different genetic strings could be compared. While the genetic algorithm does not directly manipulate schemata, its behavior is governed by the Schema Theorem. <p> Note that this statement is independent of the particular representatives of the two schemata at time t. 2.3.11 How Many Schemata are Usefully Processed? Holland <ref> [37] </ref> has estimated that O (n 3 ) schemata are processed usefully in a genetic algorithm. That is, while n structures are processed each generation, n 3 schemata are being operated upon. Implicit parallelism is at work with no need for special bookkeeping or memory other than the population itself.
Reference: [38] <author> P. Husbands and F. Mill. </author> <title> Simulated co-evolution as the mechanism for emergent planning and scheduling. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: Global models have been used on a variety of architectures. They have been implemented on the connection machine (CM) by Robertson [60], Kosak et al. [44], and Chen et al. [6]. Implementations on the INMOS Transputer have been reported by Husbands and Mill <ref> [38] </ref>, Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. [1]. The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. <p> Table 4.2 clearly indicates that chromosome reduction is just as effective on the two dimensional problem as it is for the one dimensional problem. For example, the two dimensional 11 package data set has the following distribution without reduction: <ref> [38] </ref>:#######...........................................: 4959360 (12.4242%) 52 [41]:####..............................................: 2452320 (6.14358%) [43]:##................................................: 1123200 (2.81385%) [46]:#.................................................: 432000 (1.08225%) Note, in this case there is no solution with 45 as the packing height. After reduction, the cost distribution is as follows: [38]:##########........................................: 7233600 (18.1217%) [40]:#####################.............................: 16072320 (40.2646%) [42]:############......................................: 9039360 (22.6455%) [44]:####..............................................: 2455200 (6.15079%) Note, the two dimensional <p> For example, the two dimensional 11 package data set has the following distribution without reduction: <ref> [38] </ref>:#######...........................................: 4959360 (12.4242%) 52 [41]:####..............................................: 2452320 (6.14358%) [43]:##................................................: 1123200 (2.81385%) [46]:#.................................................: 432000 (1.08225%) Note, in this case there is no solution with 45 as the packing height. After reduction, the cost distribution is as follows: [38]:##########........................................: 7233600 (18.1217%) [40]:#####################.............................: 16072320 (40.2646%) [42]:############......................................: 9039360 (22.6455%) [44]:####..............................................: 2455200 (6.15079%) Note, the two dimensional problem has a non-Gaussian cost distribution which should make it harder for the GA to find the optimal.
Reference: [39] <author> P. Jog and D. Van Gucht. </author> <title> Parallelisation of probabalistic sequential search algorithms. </title> <booktitle> In Grefenstette [35]. </booktitle> <pages> 119 </pages>
Reference-contexts: The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67]. Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht <ref> [39] </ref>, Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures.
Reference: [40] <author> S. A. Kauffman. </author> <title> Adaptation on rugged fitness landscapes. </title> <booktitle> In Lectures in the Sciences of Complexity: Volume I in the Santa Fe Institute Studies in the Sciences of Complexity. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Redwood City, California, </address> <year> 1989. </year>
Reference-contexts: Other problems, which have rugged fitness landscapes marked by numerous local optima, degenerate the GAs adaptive search into a random walk. The renewed interest in fitness landscapes was spawned by Kauffman <ref> [40, 41] </ref> with his ideas on tunable ruggedness. He defined a class of landscapes called NK landscapes where the genomes consist of binary strings with fixed length N. <p> After reduction, the cost distribution is as follows: [38]:##########........................................: 7233600 (18.1217%) <ref> [40] </ref>:#####################.............................: 16072320 (40.2646%) [42]:############......................................: 9039360 (22.6455%) [44]:####..............................................: 2455200 (6.15079%) Note, the two dimensional problem has a non-Gaussian cost distribution which should make it harder for the GA to find the optimal.
Reference: [41] <author> S. A. Kauffman. </author> <title> The Origins of Order: Self-Organization and Selection in Evolution. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Other problems, which have rugged fitness landscapes marked by numerous local optima, degenerate the GAs adaptive search into a random walk. The renewed interest in fitness landscapes was spawned by Kauffman <ref> [40, 41] </ref> with his ideas on tunable ruggedness. He defined a class of landscapes called NK landscapes where the genomes consist of binary strings with fixed length N. <p> Table 4.2 clearly indicates that chromosome reduction is just as effective on the two dimensional problem as it is for the one dimensional problem. For example, the two dimensional 11 package data set has the following distribution without reduction: [38]:#######...........................................: 4959360 (12.4242%) 52 <ref> [41] </ref>:####..............................................: 2452320 (6.14358%) [43]:##................................................: 1123200 (2.81385%) [46]:#.................................................: 432000 (1.08225%) Note, in this case there is no solution with 45 as the packing height.
Reference: [42] <author> H. Kitano, S. F. Smith, and T. Higuchi. </author> <title> GA-1: A parallel associative memory processor for rule learning with genetic algorithms. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: They have been implemented on the connection machine (CM) by Robertson [60], Kosak et al. [44], and Chen et al. [6]. Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. <ref> [42] </ref>, Verhoeven et al. [80], and Baiardi et al. [1]. The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. <p> Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze [57], Tanese [76, 77], Cohoon et al. [9], Muhlenbein and Born [55], and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. <ref> [42] </ref>, Voigt et al. [81], and Seredynski [67]. <p> The cellular model also avoids the problems associated with the panmictic approach, such as synchronization for example. Implementations of the cellular model have been reported on various architectures. Implementations on the INMOS Transputer are reported by Von Laszewski [82], Kitano et al. <ref> [42] </ref>, and Tamaki and Nishikawa [75]. The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. <p> After reduction, the cost distribution is as follows: [38]:##########........................................: 7233600 (18.1217%) [40]:#####################.............................: 16072320 (40.2646%) <ref> [42] </ref>:############......................................: 9039360 (22.6455%) [44]:####..............................................: 2455200 (6.15079%) Note, the two dimensional problem has a non-Gaussian cost distribution which should make it harder for the GA to find the optimal.
Reference: [43] <author> L. Knight and R. Wainwright. </author> <title> HYPERGEN a distributed genetic algorithm on a hypercube. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference, </booktitle> <address> Williamsburg, Virginia, </address> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: It is no surprise that most island model GAs have been implemented on coarse grained parallel architectures. Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze [57], Tanese [76, 77], Cohoon et al. [9], Muhlenbein and Born [55], and Knight and Wainwright <ref> [43] </ref>. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67]. <p> Table 4.2 clearly indicates that chromosome reduction is just as effective on the two dimensional problem as it is for the one dimensional problem. For example, the two dimensional 11 package data set has the following distribution without reduction: [38]:#######...........................................: 4959360 (12.4242%) 52 [41]:####..............................................: 2452320 (6.14358%) <ref> [43] </ref>:##................................................: 1123200 (2.81385%) [46]:#.................................................: 432000 (1.08225%) Note, in this case there is no solution with 45 as the packing height.
Reference: [44] <author> C. Kosak, J. Marks, and S. Shieber. </author> <title> A parallel genetic algorithm for network-diagram layout. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: Ironically, the global models have not received as much attention as the others because of machine dependency considerations. Global models have been used on a variety of architectures. They have been implemented on the connection machine (CM) by Robertson [60], Kosak et al. <ref> [44] </ref>, and Chen et al. [6]. Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. [1]. <p> After reduction, the cost distribution is as follows: [38]:##########........................................: 7233600 (18.1217%) [40]:#####################.............................: 16072320 (40.2646%) [42]:############......................................: 9039360 (22.6455%) <ref> [44] </ref>:####..............................................: 2455200 (6.15079%) Note, the two dimensional problem has a non-Gaussian cost distribution which should make it harder for the GA to find the optimal.
Reference: [45] <author> J. Koza. </author> <title> Genetic Programming: On the Programming of Computers by means of Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: The function set is the list of allowable operators, and the terminal set is the list of allowable operands. GP is very powerful, yet it is also rather computing intensive. More information can be found in the book by Koza <ref> [45] </ref>, the father of GP. CHAPTER III DISRUPTION OF BENEFICIAL SCHEMATA This chapter discusses problems which are difficult for the genetic algorithm: rugged fitness landscapes and order-based problems. The Schema Theorem is examined in search of clues to why the genetic algorithm performs poorly on these problems.
Reference: [46] <author> K. Li and K. H. Cheng. </author> <title> On three-dimensional packing. </title> <journal> SIAM Journal of Computing, </journal> <volume> 19(5) </volume> <pages> 847-867, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Coffman describes a much more complex heuristic, called Split Fit (SF), which has a bound of 1.5 times optimal. While these bounds are very good, they are not as good as the one dimensional problem. This is also true for the three dimensional packing problem where Li and Cheng <ref> [46] </ref> report NFDH and FFDH are unbounded, and the best alternative has a bound of 3.25 times optimal. 4.2.3 Genetic Algorithms for Bin Packing Genetic algorithms have been used to obtain improvements over the approximation methods. <p> Table 4.2 clearly indicates that chromosome reduction is just as effective on the two dimensional problem as it is for the one dimensional problem. For example, the two dimensional 11 package data set has the following distribution without reduction: [38]:#######...........................................: 4959360 (12.4242%) 52 [41]:####..............................................: 2452320 (6.14358%) [43]:##................................................: 1123200 (2.81385%) <ref> [46] </ref>:#.................................................: 432000 (1.08225%) Note, in this case there is no solution with 45 as the packing height.
Reference: [47] <author> S. W. Mahfoud and D. E. Goldberg. </author> <title> A genetic algorithm for parallel simulated annealing. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. Other global model GAs are reported by Maruyama et al. [51, 52], Shonkwiler [68], De Souza and Talukdar [20], Mahfoud and Goldberg <ref> [47] </ref>, Gordon et al. [31], Gordon and Whitley [30], and Elketroussi and Fan [22]. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures.
Reference: [48] <author> B. Manderick and P. Spiessens. </author> <title> Fine-grained parallel genetic algorithms. </title> <note> In Schaffer [62]. </note>
Reference-contexts: The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens <ref> [48] </ref>, Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the
Reference: [49] <editor> R. Manner and B. Manderick, editors. </editor> <title> Parallel Problem Solving from Nature, 2. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference: [50] <author> N. Mansour and G. C. Fox. </author> <title> A hybrid genetic algorithm for task allocation in multicomputers. </title> <editor> In Belew and Booker [3]. </editor> <volume> 120 </volume>
Reference-contexts: Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. [1]. The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox <ref> [50] </ref>, and Merkle and Lamont [53].
Reference: [51] <author> T. Maruyama, T. Hirose, and A. Konagaya. </author> <title> A fine-grained parallel genetic algorithm for distributed parallel systems. </title> <note> In Forrest [25]. </note>
Reference-contexts: The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. Other global model GAs are reported by Maruyama et al. <ref> [51, 52] </ref>, Shonkwiler [68], De Souza and Talukdar [20], Mahfoud and Goldberg [47], Gordon et al. [31], Gordon and Whitley [30], and Elketroussi and Fan [22]. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67]. Other island model results are reported by Maruyama et al. <ref> [51, 52] </ref>, Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out <p> The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. <ref> [51, 52] </ref>, Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [52] <author> T. Maruyama, A. Konagaya, and K. Konishi. </author> <title> An asynchronous fine-grained parallel genetic algorithm. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. Other global model GAs are reported by Maruyama et al. <ref> [51, 52] </ref>, Shonkwiler [68], De Souza and Talukdar [20], Mahfoud and Goldberg [47], Gordon et al. [31], Gordon and Whitley [30], and Elketroussi and Fan [22]. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67]. Other island model results are reported by Maruyama et al. <ref> [51, 52] </ref>, Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out <p> The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. <ref> [51, 52] </ref>, Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [53] <author> L. D. Merkle and G. B. Lamont. </author> <title> Comparison of parallel messy genetic algorithm data distribution strategies. </title> <note> In Forrest [25]. </note>
Reference-contexts: The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont <ref> [53] </ref>.
Reference: [54] <author> H. Muhlenbein. </author> <title> Parallel genetic algorithms, population genetics and combinatorial optimization. </title> <note> In Schaffer [62]. </note>
Reference-contexts: Implementations on the INMOS Transputer are reported by Von Laszewski [82], Kitano et al. [42], and Tamaki and Nishikawa [75]. The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein <ref> [54] </ref>, Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism)
Reference: [55] <author> H. Muhlenbein, M. Schomisch, and J. Born. </author> <title> The parallel genetic algorithm as function optimizer. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: It is no surprise that most island model GAs have been implemented on coarse grained parallel architectures. Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze [57], Tanese [76, 77], Cohoon et al. [9], Muhlenbein and Born <ref> [55] </ref>, and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67].
Reference: [56] <author> M. Munetomo, Y. Takai, and Y. Sato. </author> <title> An efficient migration scheme for subpopulation-based asynchronously parallel genetic algorithms. </title> <note> In Forrest [25]. </note>
Reference-contexts: Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. <ref> [56] </ref>, and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures. Cellular models (a term used by Whitley [85]) similarly arose from the desire to exploit the fine grained, massively parallel architectures.
Reference: [57] <author> C. C. Pettey and M. R. Leuze. </author> <title> A theoretical investigation of a parallel genetic algorithm. </title> <note> In Schaffer [62]. </note>
Reference-contexts: The island model strategy eliminates the global synchronization that is required in the panmictic approach. It is no surprise that most island model GAs have been implemented on coarse grained parallel architectures. Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze <ref> [57] </ref>, Tanese [76, 77], Cohoon et al. [9], Muhlenbein and Born [55], and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67].
Reference: [58] <author> C. C. Pettey, M. R. Leuze, and J. J. Grefenstette. </author> <title> A parallel genetic algorithm. </title> <note> In Grefenstette [35]. </note>
Reference-contexts: The island model strategy eliminates the global synchronization that is required in the panmictic approach. It is no surprise that most island model GAs have been implemented on coarse grained parallel architectures. Implementations on various hypercubes are reported by Pettey et al. <ref> [58] </ref>, Pettey and Leuze [57], Tanese [76, 77], Cohoon et al. [9], Muhlenbein and Born [55], and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67].
Reference: [59] <author> I. Rechenberg. </author> <title> Evolutionsstrategie: Optimierung technischer Systeme nach Prinzipien der biologischen Evolution. </title> <address> Fromman-Holzboog, Stuttgart, Ger-many, </address> <year> 1973. </year>
Reference-contexts: This technique is similar to the evolutionary pro 32 gramming idea, except a direct representation is used. The only genetic operator used is mutation. There is actually quite a bit of theory developed for evolution strategies. For more information, see the original work by Rechenberg <ref> [59] </ref> and Schwefel [65, 66]. 2.4.4 Genetic Programming Genetic programming is an extension of the genetic algorithm which operates on programs. Rather than fixed length character strings, GP uses variable length computer programs. The actual data type manipulated is the parse tree, and Lisp is naturally the most common choice.
Reference: [60] <author> G. G. Robertson. </author> <title> Parallel implementation of genetic algorithms in a classifier system. </title> <note> In Grefenstette [35]. </note>
Reference-contexts: Some work has been done in parallelizing these algorithms directly. Ironically, the global models have not received as much attention as the others because of machine dependency considerations. Global models have been used on a variety of architectures. They have been implemented on the connection machine (CM) by Robertson <ref> [60] </ref>, Kosak et al. [44], and Chen et al. [6]. Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. [80], and Baiardi et al. [1].
Reference: [61] <author> A. V. Sannier and E. D. Goodman. </author> <title> Genetic learning procedures in distributed environments. </title> <booktitle> In Grefenstette [35]. </booktitle> <pages> 121 </pages>
Reference-contexts: The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick [70], Maruyama et al. [51, 52], Sannier and Goodman <ref> [61] </ref>, Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic algorithm theory.
Reference: [62] <editor> J. D. Schaffer, editor. </editor> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <address> Arlington, Virginia, 1989. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [63] <author> N. N. Schraudolph. </author> <title> Genetic algorithm software survey. </title> <note> Available by anonymous ftp from cs.ucsd.edu as /pub/GAucsd/GAsoft.txt, </note> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: It is also the model used by Goldberg [29] in his textbook. As the first proposed population model, the generational model is the most commonly used population model. This is evident by the large number of software packages found to be using this model in Schraudolph's GA Software Survey <ref> [63] </ref>. One of the first widely used generational GA packages was GENESIS, written by John Grefenstette [34]. Many other generational GA packages were developed based on GENESIS, including Schraudolph and Grefenstette's GAucsd [64], and Thomas Back's GENEsYs.
Reference: [64] <author> N. N. Schraudolph and J. J. Grefenstette. </author> <title> A user's guide to GAucsd 1.4. </title> <type> Technical Report CS 92-249, </type> <institution> University of California, </institution> <address> San Diego, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: One of the first widely used generational GA packages was GENESIS, written by John Grefenstette [34]. Many other generational GA packages were developed based on GENESIS, including Schraudolph and Grefenstette's GAucsd <ref> [64] </ref>, and Thomas Back's GENEsYs. Goldberg's textbook includes a generational GA written in Pascal called the "simple genetic algorithm" (SGA). The generational model is also available in the GA package developed as part of this research, LibGA [14]. 2.3.2.2 Steady-State Population Model The steady-state model is a more recent development.
Reference: [65] <author> H.-P. Schwefel. </author> <title> Numerische Optimierung von Computermodellen mittels der Evolutionsstrategie. </title> <address> Birhaeuser, Basel, Germany, </address> <year> 1977. </year>
Reference-contexts: This technique is similar to the evolutionary pro 32 gramming idea, except a direct representation is used. The only genetic operator used is mutation. There is actually quite a bit of theory developed for evolution strategies. For more information, see the original work by Rechenberg [59] and Schwefel <ref> [65, 66] </ref>. 2.4.4 Genetic Programming Genetic programming is an extension of the genetic algorithm which operates on programs. Rather than fixed length character strings, GP uses variable length computer programs. The actual data type manipulated is the parse tree, and Lisp is naturally the most common choice.
Reference: [66] <editor> H.-P. Schwefel. </editor> <booktitle> Collective phaenomena in evolutionary systems. In Proceedings of the 31st Annual Meeting of the International Society for General System Research, </booktitle> <pages> pages 1025-1033, </pages> <address> Budapest, Hungary, </address> <year> 1987. </year>
Reference-contexts: This technique is similar to the evolutionary pro 32 gramming idea, except a direct representation is used. The only genetic operator used is mutation. There is actually quite a bit of theory developed for evolution strategies. For more information, see the original work by Rechenberg [59] and Schwefel <ref> [65, 66] </ref>. 2.4.4 Genetic Programming Genetic programming is an extension of the genetic algorithm which operates on programs. Rather than fixed length character strings, GP uses variable length computer programs. The actual data type manipulated is the parse tree, and Lisp is naturally the most common choice.
Reference: [67] <author> F. Seredynski. </author> <title> Mapping by migrating boltzmann machine. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski <ref> [67] </ref>.
Reference: [68] <author> R. Shonkwiler. </author> <title> Parallel genetic algorithms. </title> <note> In Forrest [25]. </note>
Reference-contexts: The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53]. Other global model GAs are reported by Maruyama et al. [51, 52], Shonkwiler <ref> [68] </ref>, De Souza and Talukdar [20], Mahfoud and Goldberg [47], Gordon et al. [31], Gordon and Whitley [30], and Elketroussi and Fan [22]. 24 2.3.8.2 Island Models Island models arose out of the desire to exploit coarse grained parallel architectures. <p> The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67]. Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler <ref> [68] </ref>, Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire
Reference: [69] <author> D. Smith. </author> <title> Bin packing with adaptive search. </title> <editor> In J. J. Grefenstette, editor, </editor> <booktitle> Proceedings of the First International Conference on Genetic Algorithms and Their Applications, </booktitle> <pages> pages 202-207, </pages> <address> Hillsdale, New Jersey, 1985. </address> <publisher> Lawrence Erlbaum. </publisher>
Reference-contexts: Smith <ref> [69] </ref> used a GA on a two dimensional problem using a bottom left packing strategy. Corcoran and Wainwright [14] used a GA on a two dimensional problem using a level-oriented strategy. Corcoran and Wainwright [11] also applied a GA to a three dimensional problem.
Reference: [70] <author> P. Spiessens and B. Manderick. </author> <title> A massively parallel genetic algorithm implementation and first analysis. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78]. Other cellular model research is reported by Muhlenbein [54], Man-derick and Spiessens [48], Spiessens and Manderick <ref> [70] </ref>, Maruyama et al. [51, 52], Sannier and Goodman [61], Gorges-Schleuter [32, 33], Davidor [17], Davidor et al. [18], Gordon et al. [31], Gordon and Whitley [30], and Baluja [2]. 2.3.9 Implicit Parallelism The idea of implicit parallelism (also known as intrinsic parallelism) is one of the basic tenets of genetic
Reference: [71] <author> P. F. Stadler. </author> <title> Correlation in landscapes of combinatorial optimization problems. </title> <journal> Europhys. Lett., </journal> <volume> 20(6) </volume> <pages> 479-482, </pages> <year> 1992. </year>
Reference-contexts: Kauffman's work was extended by Weinberger [83, 84] in an analysis of several NK landscape features. Weinberger's work was applied to several combinatorial problems: by Stadler and Schnabl [73] on the Traveling Salesman Problem, by Stadler and Happel [72] on the Graph Bi-Partitioning Problem, and by Stadler <ref> [71] </ref> on the Matching Problem. 3.2 Order-Based Problems Order-based problems are another difficult area for the GA. The goal of these problems is to find an optimal ordering of a set of distinct items. Traditional binary representations and operators often cannot be used in these problems.
Reference: [72] <author> P. F. Stadler and R. Happel. </author> <title> Correlation structure of the landscape of the graph-bipartitioning problem. </title> <journal> J. Phys. A: Math. Gen., </journal> <volume> 25 </volume> <pages> 3103-3110, </pages> <year> 1992. </year> <month> 122 </month>
Reference-contexts: Kauffman's work was extended by Weinberger [83, 84] in an analysis of several NK landscape features. Weinberger's work was applied to several combinatorial problems: by Stadler and Schnabl [73] on the Traveling Salesman Problem, by Stadler and Happel <ref> [72] </ref> on the Graph Bi-Partitioning Problem, and by Stadler [71] on the Matching Problem. 3.2 Order-Based Problems Order-based problems are another difficult area for the GA. The goal of these problems is to find an optimal ordering of a set of distinct items.
Reference: [73] <author> P. F. Stadler and W. Schnabl. </author> <title> The landscape of the travelling salesman problem. </title> <journal> Physics Letters A, </journal> <volume> 161 </volume> <pages> 337-344, </pages> <year> 1992. </year>
Reference-contexts: When K = N, the landscape becomes completely rugged, causing the GAs performance to approach that of a random search. Kauffman's work was extended by Weinberger [83, 84] in an analysis of several NK landscape features. Weinberger's work was applied to several combinatorial problems: by Stadler and Schnabl <ref> [73] </ref> on the Traveling Salesman Problem, by Stadler and Happel [72] on the Graph Bi-Partitioning Problem, and by Stadler [71] on the Matching Problem. 3.2 Order-Based Problems Order-based problems are another difficult area for the GA.
Reference: [74] <author> T. Starkweather, S. McDaniel, K. Mathias, D. Whitley, and C. Whitley. </author> <title> A comparison of genetic sequencing operators. </title> <booktitle> In Belew and Booker [3], </booktitle> <pages> pages 69-76. </pages>
Reference-contexts: That is, the number of bits set in the random mask is inversely proportional to the number of set bits in the user mask. * For order based crossovers, such as those described by Starkweather et al. <ref> [74] </ref>, the above methods may prove impractical. In these cases the crossover operator may need to be rewritten in order to take advantage of the user defined bit mask. 64 The mask concept is not limited to just bit masks. Integers or real values could be used just as easily.
Reference: [75] <author> H. Tamaki and Y. Nishikawa. </author> <title> A paralleled genetic algorithm based on a neighborhood model and its application to the jobshop scheduling. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: The cellular model also avoids the problems associated with the panmictic approach, such as synchronization for example. Implementations of the cellular model have been reported on various architectures. Implementations on the INMOS Transputer are reported by Von Laszewski [82], Kitano et al. [42], and Tamaki and Nishikawa <ref> [75] </ref>. The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78].
Reference: [76] <author> R. Tanese. </author> <title> Parallel genetic algorithm for a hypercube. </title> <note> In Grefenstette [35]. </note>
Reference-contexts: The island model strategy eliminates the global synchronization that is required in the panmictic approach. It is no surprise that most island model GAs have been implemented on coarse grained parallel architectures. Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze [57], Tanese <ref> [76, 77] </ref>, Cohoon et al. [9], Muhlenbein and Born [55], and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67].
Reference: [77] <author> R. Tanese. </author> <title> Distributed genetic algorithms. </title> <note> In Schaffer [62]. </note>
Reference-contexts: The island model strategy eliminates the global synchronization that is required in the panmictic approach. It is no surprise that most island model GAs have been implemented on coarse grained parallel architectures. Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze [57], Tanese <ref> [76, 77] </ref>, Cohoon et al. [9], Muhlenbein and Born [55], and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67].
Reference: [78] <author> K. Thearling. </author> <title> Putting artificial life to work. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: Implementations of the cellular model have been reported on various architectures. Implementations on the INMOS Transputer are reported by Von Laszewski [82], Kitano et al. [42], and Tamaki and Nishikawa [75]. The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling <ref> [78] </ref>.
Reference: [79] <author> S. Tsutsui and Y. Fujimoto. </author> <title> Forking genetic algorithm with blocking and shrinking modes (fGA). </title> <note> In Forrest [25]. </note>
Reference-contexts: Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim [88], Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto <ref> [79] </ref>, Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained parallel architectures.
Reference: [80] <author> M. G. A. Verhoeven, E. H. L. Aarts, E. van de Sluis, and R. J. M. Vaessens. </author> <title> Parallel local search and the travelling salesman problem. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: They have been implemented on the connection machine (CM) by Robertson [60], Kosak et al. [44], and Chen et al. [6]. Implementations on the INMOS Transputer have been reported by Husbands and Mill [38], Dorigo and Sirtori [21], Kitano et al. [42], Verhoeven et al. <ref> [80] </ref>, and Baiardi et al. [1]. The Intel Hypercube has been used for global models by Brown et al. [5], Mansour and Fox [50], and Merkle and Lamont [53].
Reference: [81] <author> H.-M. Voigt, I. Santiba~nez-Koref, and J. Born. </author> <title> Hierarchically structured distributed genetic algorithms. </title> <note> In Manner and Manderick [49]. </note>
Reference-contexts: Implementations on various hypercubes are reported by Pettey et al. [58], Pettey and Leuze [57], Tanese [76, 77], Cohoon et al. [9], Muhlenbein and Born [55], and Knight and Wainwright [43]. The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. <ref> [81] </ref>, and Seredynski [67].
Reference: [82] <author> G. von Laszewski. </author> <title> Intelligent structural operators for the k-way graph partitioning problem. </title> <note> In Belew and Booker [3]. </note>
Reference-contexts: The cellular model also avoids the problems associated with the panmictic approach, such as synchronization for example. Implementations of the cellular model have been reported on various architectures. Implementations on the INMOS Transputer are reported by Von Laszewski <ref> [82] </ref>, Kitano et al. [42], and Tamaki and Nishikawa [75]. The connection machine has been used to implement the cellular model by Collins and Jefferson [10] and Thearling [78].
Reference: [83] <author> E. D. Weinberger. </author> <title> Correlated and uncorrelated fitness landscapes and how to tell the difference. </title> <journal> Biol. Cybern., </journal> <volume> 63 </volume> <pages> 325-336, </pages> <year> 1990. </year>
Reference-contexts: As K approaches N, the landscape becomes progressively more rugged. When K = N, the landscape becomes completely rugged, causing the GAs performance to approach that of a random search. Kauffman's work was extended by Weinberger <ref> [83, 84] </ref> in an analysis of several NK landscape features.
Reference: [84] <author> E. D. Weinberger. </author> <title> Local properties of Kauffman's N-k model: A tunably rugged energy landscape. </title> <journal> Pysical Rev. A, </journal> <volume> 44(6399), </volume> <year> 1991. </year>
Reference-contexts: As K approaches N, the landscape becomes progressively more rugged. When K = N, the landscape becomes completely rugged, causing the GAs performance to approach that of a random search. Kauffman's work was extended by Weinberger <ref> [83, 84] </ref> in an analysis of several NK landscape features.
Reference: [85] <author> D. Whitley. </author> <title> Cellular genetic algorithms. </title> <booktitle> In Forrest [25]. </booktitle> <pages> 123 </pages>
Reference-contexts: Cellular models (a term used by Whitley <ref> [85] </ref>) similarly arose from the desire to exploit the fine grained, massively parallel architectures. These machines consist of a huge number of simple processors typically connected in a ring or torus topology.
Reference: [86] <author> D. Whitley and J. Kauth. </author> <title> GENITOR: A different genetic algorithm. </title> <booktitle> In Proceedings of the Rocky Mountain Conference on Artificial Intelligence, </booktitle> <pages> pages 118-130, </pages> <address> Denver, Colorado, </address> <year> 1988. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' [29, 37] or a `steady-state' <ref> [86] </ref> genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. <p> The generational model is also available in the GA package developed as part of this research, LibGA [14]. 2.3.2.2 Steady-State Population Model The steady-state model is a more recent development. It is the model used in Gen-itor <ref> [86] </ref>. The steady-state model uses a single pool for both parents and offspring. Parents are selected from the pool and children are generated. The children are 14 placed back in the pool, replacing weaker members of the pool. <p> The pool size was 100 in every case. A steady-state GA and a generational GA were tested. The steady-state algorithm used a rank-biased selection similar 54 to that in Genitor <ref> [86] </ref>, with replacement by rank. The generational GA used typical parameters including roulette selection with elitism. The crossover used in both types of GAs was Asexual Crossover. Recall, asexual crossover is simply a swap of two randomly selected genes in the chromosome.
Reference: [87] <author> S. Wright. </author> <title> The roles of mutation, inbreeding, crossbreeding, and selection in evolution. </title> <booktitle> In Proceedings of the Sixth International Congress on Genetics, </booktitle> <volume> volume 1, </volume> <pages> pages 356-366, </pages> <year> 1932. </year>
Reference-contexts: These new techniques are accompanied by an alternative Schema Theorem which applies to these difficult problems. Finally, the related issue of hitchhiking and allele loss is discussed. 3.1 Rugged Fitness Landscapes The idea of a fitness landscape was first introduced by Wright <ref> [87] </ref>. It is a mapping from the genomes in a population of individuals to their respective fitness values. It also refers to the visualization of that mapping.
Reference: [88] <author> B. P. Zeigler and J. Kim. </author> <title> Asynchronous genetic algorithms on parallel computers. </title> <note> In Forrest [25]. </note>
Reference-contexts: The INMOS Transputer has been used for the island model by Kitano et al. [42], Voigt et al. [81], and Seredynski [67]. Other island model results are reported by Maruyama et al. [51, 52], Shonkwiler [68], Zeigler and Kim <ref> [88] </ref>, Cohoon et al. [8], Jog and Van Gucht [39], Gordon et al. [31], Gordon and Whitley [30], Gorges-Schleuter [33], Tsutsui and Fujimoto [79], Elketroussi and Fan [22], Munetomo et al. [56], and Corcoran and Wainwright [16]. 2.3.8.3 Cellular Models Island models arose out of the desire to exploit coarse grained
References-found: 88

