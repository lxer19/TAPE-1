URL: http://www.eecis.udel.edu/~agrawal/papers/srds92.ps
Refering-URL: http://www.eecis.udel.edu/~agrawal/pub.html
Root-URL: http://www.cis.udel.edu
Title: Availability of Coding Based Replication Schemes  
Author: Gagan Agrawal 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland  
Abstract: Data is often replicated in distributed systems to improve availability and performance. This replication is expensive in terms of disk storage requirements since the existing schemes require full files to be stored at each site. The coding scheme suggested by Rabin can be used to reduce the storage requirements in the replication based systems. In this paper, we evaluate the availability of a coding based replication scheme where simple voting is used to maintain correctness of replicated data. We show that the storage requirement to maintain the data with a given availability is reduced significantly. We further present how some of the extensions of the voting scheme can be modified to manage this coding based replication. Again, we evaluate the availability of these and study the reduction in the storage space requirements achieved. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. El Abbadi, </author> <title> "Integrating security with fault tolerance in distributed databases", </title> <journal> in Computer Journal, </journal> <volume> vol. 33, no. 2, </volume> <pages> pp. 71-78, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: If the file is replicated at N nodes, the disk storage requirement increases N fold (using witnesses may reduce it to some extent). The coding scheme suggested by Rabin [11] can be used to reduce the storage requirements of replicated systems <ref> [1, 8] </ref>. This coding has also been used for reliable storage of files in single node systems [3]. In this coding a file F is encoded and broken into n parts, each of size jF j=m (n &gt; m).
Reference: [2] <author> G.Agrawal and P. Jalote, </author> <title> "An efficient protocol for voting in dist. </title> <booktitle> systems", in proc. of 12 th Int. Conf. on Dist. Computing Sys., </booktitle> <month> June </month> <year> 1992. </year>
Reference: [3] <author> W. A. Burkhard and P. D. Stojadivonic, </author> <title> "Storage efficient reliable files", </title> <booktitle> in proc. of Winter Usenix Conf., </booktitle> <year> 1992. </year>
Reference-contexts: The coding scheme suggested by Rabin [11] can be used to reduce the storage requirements of replicated systems [1, 8]. This coding has also been used for reliable storage of files in single node systems <ref> [3] </ref>. In this coding a file F is encoded and broken into n parts, each of size jF j=m (n &gt; m). Only one such part of the file, called Coded Partial File (CPF), is stored at each node.
Reference: [4] <author> G. Ciardo and J.K. Muppala, </author> <title> "Manual for the SPNP package version 3.0", </title> <institution> Duke University, </institution> <year> 1990. </year>
Reference-contexts: We perform the analysis under this assumption using a stochastic model. The exact model that we use is Generalized Stochastic Petri Nets (GSPN) [9]. We use the Stochastic Petri Net Package (SPNP) <ref> [4] </ref> to solve the GSPN we use for our analysis. can be drawn from them are from plotting graphs at the various A marking is a set of two-tuples describing the number of tokens at each place in the net.
Reference: [5] <author> J.B.Dugan, A. Bobbio, G. Ciardo, </author> <title> and K.S. Trivedi, "The design of a unified package for the solution of Stochastic Petri Net models", </title> <booktitle> in Proc. of Int. Workshop on Timed Petri Nets, </booktitle> <month> July </month> <year> 1985. </year>
Reference: [6] <author> D.K.Gifford, </author> <title> "Weighted voting", </title> <booktitle> in proc. of 7th ACM sym. on OS principles, </booktitle> <pages> pp. 150-162, </pages> <year> 1979. </year>
Reference-contexts: This data replication requires a replica control protocol to maintain consistency of the data. One such method for replica control is the weighted voting scheme suggested by Gifford <ref> [6] </ref>. In this algorithm, each node is assigned a number of votes. <p> When coding is used to store replicated data, proper read and write mechanisms are required such that data consistency is maintained and high availability is supported. Here, we briefly describe the modifications required to voting scheme <ref> [6] </ref> to manage this replication. In our (m; n; N ) system, we assume that n N . Exactly one CPF is stored at each node. We consider only the simple voting, in which each node is assigned one vote each.
Reference: [7] <author> S. Jajodia and D. Mutchler, </author> <title> "Dynamic voting algorithms for maintaining consistency in replicated databases", </title> <journal> in ACM trans. on Database Systems, </journal> <volume> vol. 15, no. 2, </volume> <pages> pp. 231-280, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Two major extensions to the voting are dynamic voting <ref> [7] </ref> and voting with witnesses [10]. In dynamic voting, the quorum (for both read and write operations) needs to include only the majority of the sites that participated in the last update rather than the majority of all the sites. In [7], it has been shown that this approach improves upon <p> Two major extensions to the voting are dynamic voting <ref> [7] </ref> and voting with witnesses [10]. In dynamic voting, the quorum (for both read and write operations) needs to include only the majority of the sites that participated in the last update rather than the majority of all the sites. In [7], it has been shown that this approach improves upon the availability offered by the weighted voting scheme. In voting with witnesses, some of the sites may keep witnesses instead of regular copy of the file. A witness stores the version number but no data. <p> We refer to this assumption as the frequent update assumption . This assumption is actually true for many applications, otherwise, frequent polling can be used to make this true <ref> [7] </ref>. However, we do admit that, for certain applications, this assumption may give higher estimate of the availability offered by our system. <p> We then evaluate the availability offered (p = .80) ability = .999) by dynamic voting with coding and study the reduc-tions in the storage space achieved. 4.1 Dynamic voting protocols In the dynamic voting scheme suggested by Jajodia and Mutchler <ref> [7] </ref>, a majority of sites participating in the last update are required for performing any read or write operation. All sites participating in an update operation record the total number of sites participating in that update in a variable called Update Site Cardinality (SC).
Reference: [8] <author> P. Jalote and G. Agrawal, </author> <title> "Using Coding To Support Data Resiliency in Distributed Systems", </title> <booktitle> in proc. of 12th Int. Conf. on Data Engg., </booktitle> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: If the file is replicated at N nodes, the disk storage requirement increases N fold (using witnesses may reduce it to some extent). The coding scheme suggested by Rabin [11] can be used to reduce the storage requirements of replicated systems <ref> [1, 8] </ref>. This coding has also been used for reliable storage of files in single node systems [3]. In this coding a file F is encoded and broken into n parts, each of size jF j=m (n &gt; m). <p> Only one such part of the file, called Coded Partial File (CPF), is stored at each node. The file can be reconstructed by any m of such n CPFs. With the data being stored in the coded form, the read and write algorithms need to redesigned. In <ref> [8] </ref>, we have shown how the simple voting algorithm can be modified to manage such coding based replication. In this paper, we evaluate the availability of a coding based replication scheme in which simple voting is used to maintain the correctness of replicated data. <p> Splitting and recombining of files is done by using n vectors in m dimensional vector space, such that any m of these n are linearly independent. Details of how these files can be split and recombined can be seen from <ref> [11, 8] </ref>. We will refer to such a system of coding as an (m; n) system. In [8], we have shown how this coding can be used to store replicated data in distributed systems. <p> Details of how these files can be split and recombined can be seen from [11, 8]. We will refer to such a system of coding as an (m; n) system. In <ref> [8] </ref>, we have shown how this coding can be used to store replicated data in distributed systems. <p> This method of updating CPFs is called dynamic redistribution of CPFs. Note that the purpose of dynamic redistribution is to give high resiliency at lower values of n <ref> [8] </ref>. The read operation proceeds as follows. The site initiating the operation (initiator) first collects r 0 votes. It then checks if there are at least m distinct CPFs with the latest update.
Reference: [9] <author> M. Ajmone Marsan, G. Balbo and G. Conte, </author> <title> "A class of generalized stochastic petri nets for performance evaluation of multiprocessor systems", </title> <journal> ACM trans. on Computer Systems, </journal> <pages> pp. 93-122, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Hence, as soon as any failure or recovery takes place in the system, an update takes place with that topology. We perform the analysis under this assumption using a stochastic model. The exact model that we use is Generalized Stochastic Petri Nets (GSPN) <ref> [9] </ref>. We use the Stochastic Petri Net Package (SPNP) [4] to solve the GSPN we use for our analysis. can be drawn from them are from plotting graphs at the various A marking is a set of two-tuples describing the number of tokens at each place in the net.
Reference: [10] <author> J.F.Paris, </author> <title> "Voting with witnesses: a consistency scheme for replicated files", </title> <booktitle> in proc. of sixth IEEE Int. Conf. on Dist. Computing Sys. </booktitle> , <pages> pp. 606-612, </pages> <year> 1986. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Two major extensions to the voting are dynamic voting [7] and voting with witnesses <ref> [10] </ref>. In dynamic voting, the quorum (for both read and write operations) needs to include only the majority of the sites that participated in the last update rather than the majority of all the sites. <p> In voting with witnesses, some of the sites may keep witnesses instead of regular copy of the file. A witness stores the version number but no data. It therefore, takes very little storage space. In <ref> [10] </ref>, it has been shown that replacing some of the regular copies with witnesses may reduce the storage requirement with only a minor reduction in the availability offered. <p> Clearly, the storage space required decreases significantly with increase in m. 5 Voting With Witnesses In this section, we show how voting with witnesses can be used when coding is used to store replicated data. In voting with witnesses <ref> [10] </ref>, some of the sites store witnesses rather than storing the file being replicated. Witnesses store the version number and participate in operations by sending their version numbers, but they do not contain any data. The quorum requirements are as follows.
Reference: [11] <author> M.O.Rabin, </author> <title> "Efficient dispersal of information for security, load balancing and fault-tolerance", </title> <journal> Journal of the ACM, </journal> <volume> vol. 36, no. 2,pp. </volume> <pages> 335-348, </pages> <year> 1989. </year>
Reference-contexts: If the file is replicated at N nodes, the disk storage requirement increases N fold (using witnesses may reduce it to some extent). The coding scheme suggested by Rabin <ref> [11] </ref> can be used to reduce the storage requirements of replicated systems [1, 8]. This coding has also been used for reliable storage of files in single node systems [3]. <p> In section 5, we do the same exercise for voting with witnesses. 2 Using Coding for Replicated Files In the coding scheme suggested by Rabin <ref> [11] </ref>, a file F of size jF j is broken into n parts of size jF j=m such that any m of these n parts are sufficient to reconstruct the file, where n m. <p> Splitting and recombining of files is done by using n vectors in m dimensional vector space, such that any m of these n are linearly independent. Details of how these files can be split and recombined can be seen from <ref> [11, 8] </ref>. We will refer to such a system of coding as an (m; n) system. In [8], we have shown how this coding can be used to store replicated data in distributed systems.
References-found: 11

