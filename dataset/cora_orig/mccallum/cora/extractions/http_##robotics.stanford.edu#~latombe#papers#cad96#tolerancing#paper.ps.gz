URL: http://robotics.stanford.edu/~latombe/papers/cad96/tolerancing/paper.ps.gz
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.cs.stanford.edu
Title: Assembly Sequencing with Toleranced Parts  
Author: Jean-Claude Latombe Randall H. Wilson and Frederic Cazals 
Keyword: assembly planning, assembly sequencing, solid modeling, tolerancing, non directional blocking graph.  
Address: Stanford, CA 94305, USA  Albuquerque, NM 87185, USA  
Affiliation: Robotics Laboratory, Department of Computer Science, Stanford University,  Intelligent Systems and Robotics Center, Sandia National Laboratories,  
Abstract: The goal of assembly sequencing is to plan a feasible series of operations to construct a product from its individual parts. Previous research has investigated assembly sequencing under the assumption that parts have nominal geometry. This paper considers the case where parts have toleranced geometry. Its main contribution is an efficient procedure that decides if a product admits an assembly sequence with infinite translations (i.e., translations that can be extended arbitrarily far along a fixed direction) that is feasible for all possible instances of the components within the specified tolerances. If the product admits one such sequence, the procedure can also generate it. For the cases where there exists no such assembly sequence, another procedure is proposed which generates assembly sequences that are feasible only for some values of the toleranced dimensions. If this procedure produces no such sequence, then no instance of the product is assemblable. These two procedures are described for two-dimensional assemblies made of polygonal parts and for three-dimensional assemblies made of polyhedral parts. So far, only the first has been implemented (for the planar case). This work assumes a simple, but non-trivial tolerance language that falls short of capturing all imperfections of a manufacturing process. In particular, it assumes that faces and edges have perfect relative orientations. Thus, it is only one step toward dealing with tolerances in assembly sequencing. fl This paper is an extended version of an earlier paper presented at the Third Symposium on Solid Modeling and Applications, Salt Lake City, Utah, May 17-19, 1995 [27]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dimensioning and Tolerancing, </author> <title> ANSI Y14.5M-1982, </title> <type> ASME, </type> <institution> United Engineering Center, </institution> <address> New York, NY, </address> <year> 1982. </year>
Reference-contexts: Part tolerancing addresses the fact that manufacturing processes are inherently imprecise and produce parts of variable shapes [34, 38]. A large body of work has been devoted to the development of tolerance languages (e.g., Y14.5 <ref> [1, 39] </ref>) providing designers with symbolic means to specify acceptable variations. One important goal is to guarantee part interchangeability in an assembly product [38]: given any set of parts manufactured according to the specified tolerances, they should assemble satisfactorily. <p> The set of feasible infinite translations of P i relative to P j is a cone C ij that determines an arc in S 1 . Hence, all the cones C ij , i; j 2 <ref> [1; N ] </ref>, i 6= j, partition S 1 into O (N 2 ) arcs such that the dbg of A remains constant over each arc. The sequence of arcs and their dbgs form the non-directional blocking graph of A. Assume that there are no tight insertions in A. <p> This takes time exponential in the number of variables and polynomial in the maximal degree of the polynomials [6]. Here, this time is O (1). To get the extreme orientations of (v 1 ) when S intersects a face of V L of dimension p 2 <ref> [1; 5] </ref>, we must also solve a system of six polynomial equations.
Reference: [2] <institution> The CAS.CADE Software Factory. </institution> <note> Technical Overview, Version 1.2/Dec. 94, </note> <editor> CF100-1.2-GP-TEC-A-01-US, Matra Datavision, Les Ulis, </editor> <address> France, </address> <year> 1994. </year>
Reference-contexts: The algorithms described here are directly relevant to that case. Implementation: We have implemented an assembly sequencer that computes and queries the strong ndbg of a product, using the algorithms described above and in the next section. This implementation was done within the cas.cade environment of Matra-Datavision <ref> [2] </ref>, which offers an extensive C++ geometric library. Although this environment does not include Minkowski operations and ndbg computation, it provides more elementary data structures and operations that make their implementation easier than in plain C++. The implementation consists of 11000 lines of code. <p> Hence, the computation of the points of V L where (v 1 ) achieves extreme orientations while coinciding with (v 2 ) has constant complexity. Up to 6 vertex rays may coincide simultaneously. The alignment of m rays (m 2 <ref> [2; 6] </ref>) yields the intersection of m hyper-surfaces. The extremal orientations of these rays while they coincide are still solutions of systems each having 6 polynomial equations of constant degree in d 1 ; : : : ; d 6 . <p> Again, such a system can be solved in constant time. By considering all combinations of m 2 <ref> [2; 6] </ref> vertices of the regions kl , we obtain a set H 2 of size O ((q i q j ) 6 ). <p> So, if v and v 0 are two vertices of this subset and the rays (v) and (v 0 ) coincide, this coincidence cannot create a side of L ij . Therefore, to construct H 2 , it is sufficient to consider all combinations of m 2 <ref> [2; 6] </ref> vertices such that at most one belongs to the first subset. Posing q = maxfq i ; q j g, this remark reduces the size of H 2 and the time to compute it to O (q 7 ). We now have H 1 and H 2 .
Reference: [3] <author> Altschul, R.E. and Scholz, F.W., </author> <title> Statistical Tolerancing: A Case Study, </title> <booktitle> Proc. Intl. Forum on Dimensional Tolerancing and Metrology, ASME, </booktitle> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: But verifying part interchangeability is much harder, and previous work has focused on checking the geometric feasibility of the assembled state (i.e.: Does there exist an assembled state in which no two parts overlap?), using stack-up, optimization, constraint propagation, statistical analysis, and/or Monte Carlo techniques <ref> [3, 9, 11, 13, 31] </ref>. In this paper we go beyond the mere existence of an assembled state. We propose an efficient procedure that decides whether a product made of toleranced parts admits a guaranteed assembly sequence, i.e., a sequence that is feasible for all possible instances of the parts.
Reference: [4] <author> Arkin, E.M., Connelly, R., and Mitchell, J.S.B., </author> <title> On Monotone Paths Among Obstacles with Applications to Planning Assemblies, </title> <booktitle> Proc. 5th ACM Symp. on Computational Geometry, </booktitle> <pages> 334-343, </pages> <year> 1989. </year>
Reference-contexts: Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test <ref> [4, 41] </ref>. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37]. <p> This requires adapting the definition of a feasible motion of P i relative to P j . Another planning approach, based on "monotone paths," has been proposed to avoid the combinatorial trap of generate-and-test for assemblies of polygons in the plane <ref> [4] </ref>. But, so far, this approach has only been introduced to generate translational assembly sequences for planar polygonal assemblies.
Reference: [5] <author> Baldwin, D.F., </author> <title> Algorithmic Methods and Software Tools for the Generation of Mechanical Assembly Sequences, </title> <type> Master's Thesis, </type> <institution> MIT, </institution> <year> 1990. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. <p> Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically <ref> [5, 20, 44] </ref>. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. <p> This takes time exponential in the number of variables and polynomial in the maximal degree of the polynomials [6]. Here, this time is O (1). To get the extreme orientations of (v 1 ) when S intersects a face of V L of dimension p 2 <ref> [1; 5] </ref>, we must also solve a system of six polynomial equations.
Reference: [6] <author> Canny, J.F. </author> <title> The Complexity of Robot Motion Planning, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: This takes time exponential in the number of variables and polynomial in the maximal degree of the polynomials <ref> [6] </ref>. Here, this time is O (1). To get the extreme orientations of (v 1 ) when S intersects a face of V L of dimension p 2 [1; 5], we must also solve a system of six polynomial equations. <p> Hence, the computation of the points of V L where (v 1 ) achieves extreme orientations while coinciding with (v 2 ) has constant complexity. Up to 6 vertex rays may coincide simultaneously. The alignment of m rays (m 2 <ref> [2; 6] </ref>) yields the intersection of m hyper-surfaces. The extremal orientations of these rays while they coincide are still solutions of systems each having 6 polynomial equations of constant degree in d 1 ; : : : ; d 6 . <p> Again, such a system can be solved in constant time. By considering all combinations of m 2 <ref> [2; 6] </ref> vertices of the regions kl , we obtain a set H 2 of size O ((q i q j ) 6 ). <p> So, if v and v 0 are two vertices of this subset and the rays (v) and (v 0 ) coincide, this coincidence cannot create a side of L ij . Therefore, to construct H 2 , it is sufficient to consider all combinations of m 2 <ref> [2; 6] </ref> vertices such that at most one belongs to the first subset. Posing q = maxfq i ; q j g, this remark reduces the size of H 2 and the time to compute it to O (q 7 ). We now have H 1 and H 2 .
Reference: [7] <author> Chase, K.W. and Greenwood, </author> <title> W.H., Design Issues in Mechanical Tolerance Analysis, </title> <journal> Manufacturing Review, </journal> <volume> 1, </volume> <pages> 50-59, </pages> <year> 1988. </year>
Reference-contexts: The basic tolerance analysis problem determining where the boundary of a part might be located in a given coordinate system has attracted considerable interest (e.g., <ref> [7, 12, 16, 31] </ref>).
Reference: [8] <author> Chazelle, B., Ottmann, T.A., Soisalon-Soininen, E., and Wood, D., </author> <title> The Complexity and Decidability of separation, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 172, </volume> <publisher> Springer Verlag, </publisher> <address> New York, NY, 119-127, </address> <year> 1984. </year>
Reference-contexts: This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing <ref> [8, 32, 35, 37] </ref>. Assembly sequencing has been shown to be intractable [21, 22, 23, 29, 44], leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies.
Reference: [9] <author> Clement, A., Desrochers, A., and Riviere, A., </author> <title> Theory and Practice of 3D Tolerancing for Assembly, </title> <booktitle> Proc. CIRP Seminar on Computer Aided Tolerancing, </booktitle> <institution> Penn State Univ., </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: But verifying part interchangeability is much harder, and previous work has focused on checking the geometric feasibility of the assembled state (i.e.: Does there exist an assembled state in which no two parts overlap?), using stack-up, optimization, constraint propagation, statistical analysis, and/or Monte Carlo techniques <ref> [3, 9, 11, 13, 31] </ref>. In this paper we go beyond the mere existence of an assembled state. We propose an efficient procedure that decides whether a product made of toleranced parts admits a guaranteed assembly sequence, i.e., a sequence that is feasible for all possible instances of the parts.
Reference: [10] <author> De Fazio, T.L. and Whitney, D.E., </author> <title> Simplified Generation of All Mechanical Assembly Sequences, </title> <journal> IEEE J. on Robotics and Automation, </journal> <volume> 3(6), </volume> <pages> 640-658, </pages> <year> 1987. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. <p> There has been considerable research in assembly sequencing during the past decade (e.g., [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44]). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system <ref> [10] </ref>. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41].
Reference: [11] <author> Fleming, A., </author> <title> Analysis of Uncertainties and Geometric Tolerances in Assemblies of Parts, </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, Univ. of Edinburgh, </institution> <year> 1987. </year>
Reference-contexts: But verifying part interchangeability is much harder, and previous work has focused on checking the geometric feasibility of the assembled state (i.e.: Does there exist an assembled state in which no two parts overlap?), using stack-up, optimization, constraint propagation, statistical analysis, and/or Monte Carlo techniques <ref> [3, 9, 11, 13, 31] </ref>. In this paper we go beyond the mere existence of an assembled state. We propose an efficient procedure that decides whether a product made of toleranced parts admits a guaranteed assembly sequence, i.e., a sequence that is feasible for all possible instances of the parts.
Reference: [12] <author> Frants, L., </author> <title> Automating Tolerance Analysis in Computer Aided Design, </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, Stanford Univ., </institution> <year> 1995. </year>
Reference-contexts: The basic tolerance analysis problem determining where the boundary of a part might be located in a given coordinate system has attracted considerable interest (e.g., <ref> [7, 12, 16, 31] </ref>).
Reference: [13] <author> Giordano, M. and Duret, D., </author> <title> Clearance Space and Deviation Space, Application to Three-Dimensional Chain of Dimensions and Positions, </title> <booktitle> Proc. 3rd CIRP Seminar on Computer Aided Tolerancing, </booktitle> <publisher> Editions Eyrolles, </publisher> <address> Paris, </address> <month> April </month> <year> 1993. </year> <month> 27 </month>
Reference-contexts: But verifying part interchangeability is much harder, and previous work has focused on checking the geometric feasibility of the assembled state (i.e.: Does there exist an assembled state in which no two parts overlap?), using stack-up, optimization, constraint propagation, statistical analysis, and/or Monte Carlo techniques <ref> [3, 9, 11, 13, 31] </ref>. In this paper we go beyond the mere existence of an assembled state. We propose an efficient procedure that decides whether a product made of toleranced parts admits a guaranteed assembly sequence, i.e., a sequence that is feasible for all possible instances of the parts.
Reference: [14] <author> Guibas, L., Halperin, D., Hirukawa, H., Latombe, J.C., and Wilson, </author> <title> R.H., A Simple and Efficient Procedure for Polyhedral Assembly Partitioning under Infinitesimal Motions, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, Nagoya, </booktitle> <pages> 2553-2560, </pages> <year> 1995. </year>
Reference-contexts: In the worst case, however, the number of these sequences is exponential in N . Remark: The above presentation has focused on planar assemblies and infinite translations. However, ndbgs have been successfully extended both to deal with 3D assemblies and to generate more complicated motions (e.g., rotational motions <ref> [14, 42] </ref> and multiple extended translations [17, 43]). This requires adapting the definition of a feasible motion of P i relative to P j . Another planning approach, based on "monotone paths," has been proposed to avoid the combinatorial trap of generate-and-test for assemblies of polygons in the plane [4].
Reference: [15] <author> Guibas, L. and Seidel, R., </author> <title> Computing Convolution by Reciprocal Search, </title> <booktitle> Proc. ACM Symp. on Computational Geometry, </booktitle> <address> Yorktown Heights, NY, 90-99, </address> <year> 1986. </year>
Reference-contexts: We need only project its edges into S 2 , as follows: first, we compute the Minkowski difference of every pair of faces of P i and P j using the algorithm given in <ref> [15] </ref>; next, we project the edges of all computed differences into S 2 . We get more arcs than actually needed, but in the worst case their asymptotic number is the same. Let q be the maximal number of vertices in a part of A.
Reference: [16] <author> Guilford, J. and Turner, J., </author> <title> Advanced Analysis and Synthesis for Geometric Tolerances, </title> <journal> Manufacturing Review, </journal> <volume> 6(4), </volume> <pages> 305-313, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: The basic tolerance analysis problem determining where the boundary of a part might be located in a given coordinate system has attracted considerable interest (e.g., <ref> [7, 12, 16, 31] </ref>).
Reference: [17] <author> Halperin, D. and Wilson, </author> <title> R.H., Assembly Partitioning Along Simple Paths: The Case of Multiple Translations, </title> <booktitle> Proc. IEEE Int. Conf.on Robotics and Automation, Nagoya, </booktitle> <pages> 1585-1592, </pages> <year> 1995. </year>
Reference-contexts: Remark: The above presentation has focused on planar assemblies and infinite translations. However, ndbgs have been successfully extended both to deal with 3D assemblies and to generate more complicated motions (e.g., rotational motions [14, 42] and multiple extended translations <ref> [17, 43] </ref>). This requires adapting the definition of a feasible motion of P i relative to P j . Another planning approach, based on "monotone paths," has been proposed to avoid the combinatorial trap of generate-and-test for assemblies of polygons in the plane [4].
Reference: [18] <author> Hoffman, </author> <title> R.L., A Common Sense Approach to Assembly Sequence Planning, </title> <booktitle> in [19], </booktitle> <pages> 289-314, </pages> <year> 1991. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44].
Reference: [19] <author> Homem de Mello, L.S. and Lee, S. (eds.), </author> <title> Computer-Aided Mechanical Assembly Planning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44].
Reference: [20] <author> Homem de Mello, </author> <title> L.S. and Sanderson, A.C., A Correct and Complete Algorithm for the Generation of Mechanical Assembly Sequences, </title> <journal> IEEE Tr. on Robotics and Automation, </journal> <volume> 7(2), </volume> <pages> 228-240, </pages> <year> 1991. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. <p> Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically <ref> [5, 20, 44] </ref>. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. <p> Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility <ref> [20, 40] </ref>. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37].
Reference: [21] <author> Hopcroft, J.E., Schwartz, J.T., and Sharir, M., </author> <title> On the Complexity of Motion Planning for Multiple Independent Objects: Pspace-Hardness of the `Warehouseman's Problem', </title> <journal> The Intl. J. of Robotics Research, </journal> <volume> 3(4), </volume> <pages> 76-88, </pages> <year> 1984. </year>
Reference-contexts: More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37]. Assembly sequencing has been shown to be intractable <ref> [21, 22, 23, 29, 44] </ref>, leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies. Often motions are also limited to translations.
Reference: [22] <author> Kavraki, L. </author> <title> and Kolountzakism M.N., Partitioning a Planar Assembly into Two Connected Parts is NP-Complete, </title> <journal> Information Processing Letters, </journal> <volume> 55, </volume> <pages> 159-165, </pages> <year> 1995. </year>
Reference-contexts: More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37]. Assembly sequencing has been shown to be intractable <ref> [21, 22, 23, 29, 44] </ref>, leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies. Often motions are also limited to translations.
Reference: [23] <author> Kavraki, L., Latombe, J.C., and Wilson, </author> <title> R.H., On the Complexity of Assembly Partitioning, </title> <journal> Information Processing letters, </journal> <volume> 48, </volume> <pages> 229-235, </pages> <year> 1993. </year>
Reference-contexts: More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37]. Assembly sequencing has been shown to be intractable <ref> [21, 22, 23, 29, 44] </ref>, leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies. Often motions are also limited to translations.
Reference: [24] <author> Khanna, S., Motwani, R., and Wilson, </author> <title> R.H., On Certificates and Lookahead in Dynamic Graph Problems, </title> <booktitle> Proc. 7th Annual ACM-SIAM Symp. on Discrete Algorithms (SODA), 1996 (to appear). </booktitle>
Reference-contexts: then return c and a feasible partition of S; return failure; Computing the strong components of a dbg takes time O (N 2 ). (A better bound, O (N 1:46 ), can be obtained by taking advantage of the fact that any two successive dbgs differ by a small amount <ref> [24] </ref>.) Hence, partition runs in time O (N 4 ) and disassemble generates an assembly sequence in time O (N 5 ). The procedures partition and disassemble can easily be modified to generate all feasible assembly sequences [41].
Reference: [25] <author> Krishnan, S.S. and Sanderson, </author> <title> A.C., Path Planning Algorithms for Assembly Sequence Planning, </title> <booktitle> Proc. IEEE Intl. Conf. on Intelligent Robotics, </booktitle> <pages> 428-439, </pages> <year> 1991. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44].
Reference: [26] <author> Latombe, J.C. and Wilson, </author> <title> R.H., Assembly Sequencing with Toleranced Parts, </title> <type> Technical Report SAND94-3124, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, NM, </address> <year> 1994. </year>
Reference-contexts: But using a single "central" coordinate system may be a limitation, since it often happens that datums in a single part are "chained" by distance specifications. In <ref> [26] </ref> we show that a simple preprocessing allows our algorithms to handle multiple coordinate systems per part. This consists of partitioning a part into a collection of subparts and assigning a distinct coordinate system to each part. <p> The fact that we only consider planar assemblies is one important limitation not directly related to tolerancing. In Section 7 we show that the algorithms of Sections 4 and 5 are easily generalized to 3D polyhedral assemblies. Another generalization of our algorithms discussed in <ref> [26] </ref> is the use of spatial relations linking more than two parts. 3 Background Let the assembly A be described as above, but with zero-length tolerance zones. Hence, all parts and subassemblies are nominal. In this section we review previous techniques that generate monotone two-handed assembly sequences for A. <p> It is crucial because the time complexity of the algorithms is exponential in this number. This observation remains valid in several generalizations presented in Section 7 and in <ref> [26] </ref>. The tolerance language used to describe assemblies is simple and falls short of modeling all imperfections of a manufacturing process. It nevertheless captures several important features of the Y14.5 standard. Its main limitation is that it assumes perfect angles between edges.
Reference: [27] <author> Latombe, J.C. and Wilson, </author> <title> R.H., Assembly Sequencing with Toleranced Parts, </title> <booktitle> Proc. 3rd Symp. on Solid Modeling and Applications, </booktitle> <pages> 83-94, </pages> <year> 1995. </year>
Reference: [28] <author> Lee, S. and Shin, Y.G., </author> <title> Assembly Planning Based on Geometric Reasoning, </title> <journal> Computation and Graphics, </journal> <volume> 14(2), </volume> <pages> 237-250, </pages> <year> 1990. </year> <month> 28 </month>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44].
Reference: [29] <author> Natarajan, B.K., </author> <title> On Planning Assemblies. </title> <booktitle> Proc. ACM Symp. on Computational Geom--etry, </booktitle> <pages> 299-308, </pages> <year> 1988. </year>
Reference-contexts: More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37]. Assembly sequencing has been shown to be intractable <ref> [21, 22, 23, 29, 44] </ref>, leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies. Often motions are also limited to translations.
Reference: [30] <author> O'Rourke, J., </author> <title> Computational Geometry in C, </title> <publisher> Cambridge Univ. Press, </publisher> <address> New York, NY, </address> <year> 1994. </year>
Reference-contexts: A trapezoidalization of P i and P j yields O (q i ) and O (q j ) components, each of constant complexity, in times O (q i log q i ) and O (q j log q j ) <ref> [30] </ref>. Each region P l j P k i is a convex polygon of constant complexity that takes constant time to compute. Let C kl ij be the cone formed by the two rays stemming from p i and tangent to P l j P k i .
Reference: [31] <author> Parratt, </author> <title> S.W., A Theory of One-Dimensional Tolerancing for Assembly, </title> <type> PhD Thesis, </type> <institution> Sibley School of Mechanical and Aerospace Eng., Cornell Univ., </institution> <year> 1993. </year>
Reference-contexts: The basic tolerance analysis problem determining where the boundary of a part might be located in a given coordinate system has attracted considerable interest (e.g., <ref> [7, 12, 16, 31] </ref>). <p> But verifying part interchangeability is much harder, and previous work has focused on checking the geometric feasibility of the assembled state (i.e.: Does there exist an assembled state in which no two parts overlap?), using stack-up, optimization, constraint propagation, statistical analysis, and/or Monte Carlo techniques <ref> [3, 9, 11, 13, 31] </ref>. In this paper we go beyond the mere existence of an assembled state. We propose an efficient procedure that decides whether a product made of toleranced parts admits a guaranteed assembly sequence, i.e., a sequence that is feasible for all possible instances of the parts. <p> The set of relations in the description of A must be complete and non-redundant. By complete, we mean that if one randomly picks a geometry for every component of A, the relations determine a unique geometry for A (such an assembly is said to be "static" <ref> [31] </ref>). By non-redundant, we mean that removing any one of the relations makes the set incomplete. <p> The most blatant assumption in our language is that edges are perfectly straight. Such edges are impossible to manufacture. However, the assumption is not really needed. Consider a part with imperfectly shaped edges as illustrated in Fig. 3.a. We can bring a straight line, 6 called a datum <ref> [31] </ref>, into two-point contact with each edge and replace the imperfect edges by the perfect ones defined by the datums (Fig. 3.b). Our algorithms apply to the parts defined by these virtual edges and the vertices created by these edges.
Reference: [32] <author> Pollack, R., Sharir, M., and Sifrony, S., </author> <title> Separating Two Polygons by a Sequence of Translations, </title> <journal> Discrete and Computational Geometry, </journal> <volume> 3, </volume> <pages> 123-136, </pages> <year> 1988. </year>
Reference-contexts: This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing <ref> [8, 32, 35, 37] </ref>. Assembly sequencing has been shown to be intractable [21, 22, 23, 29, 44], leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies.
Reference: [33] <author> Requicha, A.A.G., </author> <title> Mathematical Definition of Tolerance Specifications, </title> <journal> Manufacturing Review, </journal> <volume> 6(4), </volume> <pages> 269-274, </pages> <year> 1993. </year>
Reference-contexts: Nevertheless, we believe it contributes to the much-needed understanding of what sort of tolerance language is suitable for assembly sequencing. Such understanding is of major interest to the community of researchers who are trying to improve the mathematical foundations of tolerancing <ref> [33, 36] </ref>. As of today, we have only implemented the first procedure, for polygonal assemblies. Section 2 describes the assembly-description language accepted by our algorithms. Section 3 gives technical background for the rest of the paper.
Reference: [34] <author> Requicha, A.A.G, </author> <title> Representation of Tolerances in Solid Modeling: Issues and Alternative Approaches, in Solid Modeling by Computers: From Theory to Applications, </title> <editor> Pickett, M.S. and Boyse, J.W. (eds.), </editor> <publisher> Plenum Press, </publisher> <address> New York, 3-22, </address> <year> 1984. </year>
Reference-contexts: This work has been motivated by the fact that for many products, tolerances have crucial effect on assembly sequences and manufacturing costs. Part tolerancing addresses the fact that manufacturing processes are inherently imprecise and produce parts of variable shapes <ref> [34, 38] </ref>. A large body of work has been devoted to the development of tolerance languages (e.g., Y14.5 [1, 39]) providing designers with symbolic means to specify acceptable variations.
Reference: [35] <author> Snoeyink, J. and Stolfi, J., </author> <title> Objects that Cannot be Taken Apart with Two Hands, </title> <booktitle> Proc. 9th ACM Symp. on Computational Geometry, </booktitle> <pages> 247-256, </pages> <year> 1993. </year>
Reference-contexts: This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing <ref> [8, 32, 35, 37] </ref>. Assembly sequencing has been shown to be intractable [21, 22, 23, 29, 44], leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies.
Reference: [36] <author> Srinivasan, V., </author> <title> Recent Efforts in Mathematization of ASME/ANSI Y14.5M Standard, </title> <booktitle> Proc. 3rd CIRP Seminars on Computer Aided Tolerancing, </booktitle> <publisher> Editions Eyrolles, Paris, </publisher> <pages> 223-232, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Nevertheless, we believe it contributes to the much-needed understanding of what sort of tolerance language is suitable for assembly sequencing. Such understanding is of major interest to the community of researchers who are trying to improve the mathematical foundations of tolerancing <ref> [33, 36] </ref>. As of today, we have only implemented the first procedure, for polygonal assemblies. Section 2 describes the assembly-description language accepted by our algorithms. Section 3 gives technical background for the rest of the paper.
Reference: [37] <author> Toussaint, G.T., </author> <title> Movable Separability of Sets, in Computational Geometry, </title> <editor> Toussaint, G.T. (ed.), </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, 335-375, </address> <year> 1985. </year>
Reference-contexts: This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing <ref> [8, 32, 35, 37] </ref>. Assembly sequencing has been shown to be intractable [21, 22, 23, 29, 44], leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies.
Reference: [38] <author> Voelcker, H., </author> <title> A Current Perspective on Tolerancing and Metrology, </title> <journal> Manufacturing Review, </journal> <volume> 6(4), </volume> <pages> 258-268, </pages> <month> Dec. </month> <year> 1993, </year>
Reference-contexts: This work has been motivated by the fact that for many products, tolerances have crucial effect on assembly sequences and manufacturing costs. Part tolerancing addresses the fact that manufacturing processes are inherently imprecise and produce parts of variable shapes <ref> [34, 38] </ref>. A large body of work has been devoted to the development of tolerance languages (e.g., Y14.5 [1, 39]) providing designers with symbolic means to specify acceptable variations. <p> A large body of work has been devoted to the development of tolerance languages (e.g., Y14.5 [1, 39]) providing designers with symbolic means to specify acceptable variations. One important goal is to guarantee part interchangeability in an assembly product <ref> [38] </ref>: given any set of parts manufactured according to the specified tolerances, they should assemble satisfactorily. The basic tolerance analysis problem determining where the boundary of a part might be located in a given coordinate system has attracted considerable interest (e.g., [7, 12, 16, 31]).
Reference: [39] <author> Walker, R.K. and Srinivasan, V., </author> <title> Creation and Evolution of the ASME Y14.5.1 Standard, </title> <journal> Manufacturing Review, </journal> <volume> 7(1), </volume> <year> 1994. </year>
Reference-contexts: Part tolerancing addresses the fact that manufacturing processes are inherently imprecise and produce parts of variable shapes [34, 38]. A large body of work has been devoted to the development of tolerance languages (e.g., Y14.5 <ref> [1, 39] </ref>) providing designers with symbolic means to specify acceptable variations. One important goal is to guarantee part interchangeability in an assembly product [38]: given any set of parts manufactured according to the specified tolerances, they should assemble satisfactorily.
Reference: [40] <author> Wilson, R.H. and Rit, J.F., </author> <title> Maintaining Geometric Dependencies in an Assembly Planner. </title> <booktitle> Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <address> Cincinnati, OH, 890-895, </address> <year> 1990. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. <p> Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility <ref> [20, 40] </ref>. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37].
Reference: [41] <author> Wilson, </author> <title> R.H., On Geometric Assembly Planning. </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, Stanford Univ., </institution> <year> 1992. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. <p> Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test <ref> [4, 41] </ref>. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37]. <p> As of today, we have only implemented the first procedure, for polygonal assemblies. Section 2 describes the assembly-description language accepted by our algorithms. Section 3 gives technical background for the rest of the paper. It summarizes results previously reported in <ref> [41, 42] </ref>, including the concept of the non-directional blocking graph (ndbg) of a nominal product, an algorithm to compute ndbgs, and a procedure to generate assembly sequences from an ndbg. <p> But the number of candidate partitions is exponential in the number of parts in S, while the number of feasible partitions is usually much smaller. The ndbg was introduced to avoid this combinatorial trap <ref> [41, 42] </ref>. The idea is to precompute a structure, the ndbg, that represents all blocking interferences among the parts in A, and to query this structure to generate one, several, or all disassembly sequences. Consider two parts P i and P j in their relative position in A. <p> Thus, once a dbg has been computed, all other dbgs can be computed in total time O (N 2 ) by scanning the sequence of arcs in S 1 and, for each arc, modifying the dbg constructed for the previous arc <ref> [41] </ref>. The complete ndbg takes time O (N 2 (log N + q 2 )) to compute. Consider now the dbg G of A for some direction t. <p> The procedures partition and disassemble can easily be modified to generate all feasible assembly sequences <ref> [41] </ref>. In the worst case, however, the number of these sequences is exponential in N . Remark: The above presentation has focused on planar assemblies and infinite translations. <p> The arcs obtained with all the cones C ij create an arrangement of regions in S 2 such that the dbg of A remains constant over each one. This arrangement and the associated dbgs form the ndbg of A. A system implementing this computation is presented in <ref> [41] </ref>. The computation does not require the explicit construction of the 3D region defined by P j P i . <p> It describes algorithms to generate assembly sequences for products made of toleranced parts. These algorithms could be embedded in an interactive cad environment to assist designers in the selection of appropriate tolerance values. Our approach to assembly sequencing with toleranced parts derives from the ndbg-based approach previously proposed in <ref> [41] </ref>. Two non-directional blocking graphs, the strong and the weak, are precomputed. They respectively represent possible and necessary blocking interferences among parts in an assembly. These ndbgs are then exploited in a query phase to generate assembly sequences.
Reference: [42] <author> Wilson, R.H. and Latombe, </author> <title> J.C., Geometric Reasoning About Mechanical Assembly, </title> <journal> Artificial Intelligence, </journal> <volume> 71(2), </volume> <pages> 371-396, </pages> <year> 1994. </year>
Reference-contexts: As of today, we have only implemented the first procedure, for polygonal assemblies. Section 2 describes the assembly-description language accepted by our algorithms. Section 3 gives technical background for the rest of the paper. It summarizes results previously reported in <ref> [41, 42] </ref>, including the concept of the non-directional blocking graph (ndbg) of a nominal product, an algorithm to compute ndbgs, and a procedure to generate assembly sequences from an ndbg. <p> But the number of candidate partitions is exponential in the number of parts in S, while the number of feasible partitions is usually much smaller. The ndbg was introduced to avoid this combinatorial trap <ref> [41, 42] </ref>. The idea is to precompute a structure, the ndbg, that represents all blocking interferences among the parts in A, and to query this structure to generate one, several, or all disassembly sequences. Consider two parts P i and P j in their relative position in A. <p> In the worst case, however, the number of these sequences is exponential in N . Remark: The above presentation has focused on planar assemblies and infinite translations. However, ndbgs have been successfully extended both to deal with 3D assemblies and to generate more complicated motions (e.g., rotational motions <ref> [14, 42] </ref> and multiple extended translations [17, 43]). This requires adapting the definition of a feasible motion of P i relative to P j . Another planning approach, based on "monotone paths," has been proposed to avoid the combinatorial trap of generate-and-test for assemblies of polygons in the plane [4].
Reference: [43] <author> Wilson, R.H., Kavraki, L., Lozano-Perez, T., and Latombe, </author> <title> J.C., Two-Handed Assembly Sequencing, </title> <journal> Intl. J. of Robotics Research, </journal> <volume> 14(4), </volume> <pages> 335-350, </pages> <year> 1995. </year>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. <p> Remark: The above presentation has focused on planar assemblies and infinite translations. However, ndbgs have been successfully extended both to deal with 3D assemblies and to generate more complicated motions (e.g., rotational motions [14, 42] and multiple extended translations <ref> [17, 43] </ref>). This requires adapting the definition of a feasible motion of P i relative to P j . Another planning approach, based on "monotone paths," has been proposed to avoid the combinatorial trap of generate-and-test for assemblies of polygons in the plane [4].
Reference: [44] <author> Wolter, J.D., </author> <title> On the Automatic Generation of Plans for Mechanical Assembly, </title> <type> PhD Thesis, </type> <institution> Univ. of Michigan, </institution> <year> 1988. </year> <month> 29 </month>
Reference-contexts: Each operation generates a new subassembly by merging individual parts and/or subassemblies constructed by previous operations. It is specified by the subassemblies it merges and their relative motions. There has been considerable research in assembly sequencing during the past decade (e.g., <ref> [5, 10, 18, 19, 20, 25, 28, 40, 41, 43, 44] </ref>). Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically [5, 20, 44]. <p> Early assembly sequencers were mainly interactive sequence editors; geometric reasoning was supplied by a human who answered questions asked by the system [10]. Automated geometric reasoning was then added to answer these questions automatically <ref> [5, 20, 44] </ref>. This development first resulted in generate-and-test sequencers, with a module guessing candidate sequences and geometric reasoning modules checking their feasibility [20, 40]. More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. <p> More efficient techniques were later proposed to replace time-consuming generate-and-test [4, 41]. Research on "separability problems" in Computational Geometry is also related to assembly sequencing [8, 32, 35, 37]. Assembly sequencing has been shown to be intractable <ref> [21, 22, 23, 29, 44] </ref>, leading researchers to consider restricted, but still interesting subsets of assembly sequences, e.g.: monotone sequences, where each operation generates a final subassembly, and two-handed sequences, where every operation merges exactly two subassemblies. Often motions are also limited to translations.
References-found: 44

