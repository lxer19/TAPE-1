URL: ftp://ftp.sics.se/pub/SICS-reports/Reports/SICS-R--90-05--SE.ps.Z
Refering-URL: http://www.sics.se/libindex.html
Root-URL: 
Title: The Aurora Abstract Machine and its Emulator  
Author: Mats Carlsson Peter Szeredi 
Date: 19 October 1995  
Note: Draft version:  
Address: PO Box 1263, S-16428 KISTA, Sweden  Bristol BS8 1TR, U.K.  
Affiliation: Swedish Institute of Computer Science  Department of Computer Science University of Bristol  
Abstract-found: 0
Intro-found: 1
Reference: [Ali 89] <author> K. Ali, </author> <title> Incremental Garbage Collection for Aurora, </title> <booktitle> Proc. Gigalips Workshop, SICS, </booktitle> <address> Stockholm, </address> <year> 1989. </year> <editor> [Appleby et al. 88] K. Appleby, M. Carlsson, S. Haridi, D. Sahlin, </editor> <title> Garbage Collection for Prolog Based on WAM, </title> <journal> Communications of the ACM vol. </journal> <volume> 31 no. </volume> <pages> 6 pp. 719-741, </pages> <year> 1988. </year>
Reference-contexts: As a first step, Ali has suggested an extension for the SRI model of the sequential garbage collection algorithm [Appleby et al. 88] to make it applicable to local parts of the search tree <ref> [Ali 89] </ref>. Patrick Weemeeuw [Weemeeuw 89] has addressed the problem of garbage collection of the public parts of the tree. 4.4.2 Implementation Each memory block has a header part, represented as a struct blockheader record b, containing the fields: int b-&gt;size Block size in bytes. int b-&gt;used Bytes in use.

Reference: [Naish 85] <author> L. Naish, </author> <title> Negation and Control in Prolog, </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, University of Melbourne, </institution> <year> 1985. </year> <note> [O'Keefe 83] R. </note> <author> A. O'Keefe, SETOF.PL, </author> <title> file contributed to the public domain Prolog library in 1983. [Quintus 87] Quintus Prolog Reference Manual version 10, </title> <institution> Quintus Computer Systems, Inc., Mountain View CA, </institution> <month> February </month> <year> 1987. </year>
Reference-contexts: In this chapter we shall summarise some of these details. 7.1 Constrained Variables Aurora has inherited from SICStus Prolog the ability to block goals until their argument are sufficiently instantiated <ref> [Naish 85] </ref>. This ability is implemented by delay primitives, and involves a new kind of variable terms, constrained variables, which associate the variable with some goal to be executed when the variable is bound.

References-found: 2

