URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/fred_dissertation.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/publications/publications_sorted_by_subject.html
Root-URL: http://www.cse.ucsc.edu
Title: Multicast Routing in Point-to-Point Networks Under Constraints  approved:  
Author: Fred Bauer Fred Bauer Anujan Varma J.J. Garcia-Luna-Aceves Martine Schlag Dean 
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree of Doctor of Philosophy in Computer Engineering by  
Note: The dissertation of  Cruz is  
Date: June 1996  
Address: Santa Cruz  
Affiliation: University of California Santa Cruz  Computer Engineering University of California,  Computer Engineering University of California, Santa  of Graduate Studies and Research  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Ammar, S. Cheung, and C. Scoglio. </author> <title> "Routing multipoint connections using virtual paths in an ATM network," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Apr. </month> <year> 1993, </year> <pages> pp. 98-105. </pages>
Reference-contexts: This comparison is for both theoretical bounds and average-case behavior. The constraints considered are degree-constraints on nodes; geographically distributed, autonomous switches; dynamically changing multicast groups; and unidirectional networks. Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem <ref> [1] </ref>, as a Lagrangean relaxation problem [35], as an integer programming problem [36], as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks [7, 8, 9, 20, 50]. <p> In this chapter, we consider seven such directed Steiner heuristics. Before continuing, however, it is important to note that several other approaches to establishing multicast trees in directed networks exist. These include formulating the problem as a network flow problem <ref> [1] </ref>, a Lagrangean relaxation problem [35], and as an integer programming problem [36]. While these approaches may produce good multicast trees, they often involve substantial computational effort. Directed Steiner heuristics, by contrast, are relatively inexpensive and produce very good solutions.
Reference: [2] <author> Y.P. Aneja. </author> <title> "An integer linear programming approach to the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 10, </volume> <pages> pp. 167-178, </pages> <year> 1980. </year>
Reference-contexts: Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem [35], as an integer programming problem [36], as a minimum set cover problem <ref> [2] </ref>, and as the NP-complete Steiner tree problem (SPN) in networks [7, 8, 9, 20, 50]. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> Table 2.1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the competitiveness produced to that of an optimal solution. SPH-Z [38] A29 [46] ADH [38] Naive (Section 2.4) PDH Local Steinalization [11] Contraction [50] Set Cover <ref> [2] </ref> Dual Ascent [51] 12 Heuristic Time Complexity Solution Bound SPATH O (n 2 ) z PMST O (n 2 ) s KMB O (n 3 ) 2 Naive O (zn 2 ) z SPH O (zn 2 ) 2 K-SPH O (zn 2 ) 2 Dual Ascent | | Set <p> Each set of three components is connected through an optimal node determined as above. If, at the end, only two components remain, they are connected using the shortest path between them. We are aware of no published competitiveness or run-time bounds for this heuristic. 2.11 Set Cover Heuristic Aneja <ref> [2] </ref> describes an integer linear programming approach to the SPN by posing the SPN as the set cover problem. <p> For those heuristics with competitiveness bounds in both columns, the bound becomes worse except for SPATH which remains the same. Heuristics SPH, K-SPH and KMB jump from 2 to z for the directed case while PMST loses its finite bound altogether. Since both Aneja <ref> [2] </ref> and Ramanathan [37] have shown that the Steiner problem in networks may be reduced to the NP-complete minimum set cover problem, these bounds are consistent with Lund's observation that that no approximation algorithm can have a bound for competitiveness better than log (z) for 150 the minimum set cover problem
Reference: [3] <author> F. Bauer and A. Varma. </author> <title> "Degree-constrained multicasting in point-to-point networks," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Boston, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 369-376. </pages>
Reference-contexts: Supporting such applications efficiently requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static multicast tree in point-to-point networks <ref> [3, 8, 27] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Since many multicast applications are delay-sensitive, the efficiency of the algorithm used to maintain the multicast tree assumes special significance.
Reference: [4] <author> F. Bauer and A. Varma. </author> <title> "Distributed algorithms for multicast path setup in data networks," </title> <booktitle> in Proc. IEEE GLOBECOM, </booktitle> <address> Singapore, </address> <month> Nov. </month> <year> 1995, </year> <pages> pp. 1374-1378. </pages>
Reference: [5] <author> F. Bauer and A. Varma. </author> <title> "ARIES: A Rearrangeable Inexpensive Edge-based On-line Steiner Algor ithm," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, </address> <month> Mar. </month> <year> 1996, </year> <pages> pp. 361-368. </pages>
Reference: [6] <author> F. Bauer and A. Varma. </author> <title> "Distributed algorithms for multicast path setup in data networks," </title> <journal> IEEE Transactions on networking, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 181-191, </pages> <year> 1996. </year>
Reference: [7] <author> J. Beasley. </author> <title> "An SST-based algorithm for the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 19, </volume> <pages> pp. 1-16, </pages> <year> 1989. </year>
Reference-contexts: Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem [35], as an integer programming problem [36], as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks <ref> [7, 8, 9, 20, 50] </ref>. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> Third, since finding a feasible solution to the DCSP is NP-complete [44], a given DCSP heuristic may not be able to find a solution even though one exists. Consequently, all of our DCSP heuristics employ backtracking. Our backtracking strategy is inspired by Beasley's Lagrangean relaxation approach <ref> [7] </ref> in which Beasley applies a Steiner heuristic to each subgraph of G created by forcing every non-member node in or out of the solution. To force a non-member node to be in a solution, Beasley converts it temporarily to a member node.
Reference: [8] <author> L. Berry. </author> <title> "Graph theoretic models for multicast communications," in Traffic theories for new telecommunications services ITC Specialists Seminar, </title> <address> Adelaide, Australia, </address> <month> Sep. </month> <year> 1989, </year> <pages> pp. 95-99. </pages>
Reference-contexts: Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem [35], as an integer programming problem [36], as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks <ref> [7, 8, 9, 20, 50] </ref>. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> Supporting such applications efficiently requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static multicast tree in point-to-point networks <ref> [3, 8, 27] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Since many multicast applications are delay-sensitive, the efficiency of the algorithm used to maintain the multicast tree assumes special significance.
Reference: [9] <author> K. Bharath-Kumar and Jaffe. </author> <title> "Routing to multiple destinations in computer networks," </title> <journal> IEEE Transactions on Communications, </journal> <volume> vol. COM-31, no. 3, </volume> <pages> pp. 343-351, </pages> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem [35], as an integer programming problem [36], as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks <ref> [7, 8, 9, 20, 50] </ref>. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> Steiner tree heuristics, in contrast, are relatively inexpensive and produce very good solutions. For this reason, we focus on Steiner heuristics. A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [9, 20, 27, 40, 38, 46, 50] </ref>. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution [50]. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here.
Reference: [10] <author> G. Chen, M. Houle, and M. Kuo. </author> <title> "The Steiner problem in distributed computing systems," </title> <journal> Information Sciences, </journal> <volume> vol. 74, no. </volume> <pages> 1-2, pp. 73-96, </pages> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: In these algorithms, the computational effort to determine a multicast tree is distributed over the switch nodes. Most of the Steiner tree algorithms proposed in the literature for SPN are serial in nature. However, a few distributed heuristics exist <ref> [10, 30] </ref>. Many of these algorithms are based on reducing the SPN to the minimum spanning tree problem, referred to here as the MST, and using a distributed minimum spanning tree algorithm such as the one described by Gallager, Humblet, and Spira [17]. <p> A Steiner tree is created by pruning the minimum spanning tree by removing subtrees containing no multicast members. For example, Chen, et al. <ref> [10] </ref> find a Steiner tree by applying a distributed minimum spanning tree algorithm twice. First the algorithm is applied to the original graph. <p> We choose the distributed MST algorithm due to Gallager, Hum-blet, and Spira [17] as our baseline algorithm for comparison. This algorithm is perhaps the simplest of all pruned MST algorithms, yet produces Steiner trees that are representative of other, more elaborate pruned MST heuristics such as those described in <ref> [10, 30] </ref>. The distributed heuristics are compared on the basis of three criteria: competitiveness, number of messages exchanged, and convergence time. The remainder of this chapter is organized as follows. Section 4.1 introduces and analyzes our two distributed heuristics, based on the centralized Steiner heuristics K-SPH and SPH, respectively. <p> We choose the distributed MST algorithm due to Gallager, Humblet, and Spira [17] as our baseline algorithm because many previous distributed algorithms reviewed use minimal spanning trees <ref> [10, 30] </ref>. The distributed Steiner heuristics reviewed typically produced a minimum spanning tree of the network graph, which was then pruned to obtain a Steiner tree. <p> Among the two algorithms studied, distributed K-SPH emerged as the clear winner; in comparison to distributed SPH, it has substantially lower convergence time and slightly better competitiveness. The heuristics developed are an improvement over existing distributed Steiner heuristics based on the minimum spanning tree <ref> [10, 30] </ref> for two reasons: they produce solutions of superior quality in most cases and require the participation of only a subset of network nodes.
Reference: [11] <author> N. Chen. </author> <title> "New algorithms for Steiner tree on graphs," </title> <booktitle> in 1983 IEEE International Symposium on Circuits and Systems, </booktitle> <address> Newport Beach, CA, </address> <month> May </month> <year> 1983, </year> <pages> pp. 1217-1219. </pages>
Reference-contexts: Table 2.1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the competitiveness produced to that of an optimal solution. SPH-Z [38] A29 [46] ADH [38] Naive (Section 2.4) PDH Local Steinalization <ref> [11] </ref> Contraction [50] Set Cover [2] Dual Ascent [51] 12 Heuristic Time Complexity Solution Bound SPATH O (n 2 ) z PMST O (n 2 ) s KMB O (n 3 ) 2 Naive O (zn 2 ) z SPH O (zn 2 ) 2 K-SPH O (zn 2 ) 2 <p> Finally, prune all non-multicast group member leaves from T . The result is the final solution. We are aware of no published competitiveness or run-time bounds for this heuristic. 2.10 Local Steinalization Heuristic Chen <ref> [11] </ref> describes a method to determine the optimal node through which to connect three multicast group members. Using this method recursively, he outlines two heuristics, TPS1 and TPS2, which find Steiner solutions.
Reference: [12] <author> S. Deering and D. Cheriton. </author> <title> "Multicast routing in datagram internetworks and extended LANs," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 8, no. 2, </volume> <pages> pp. 85-110, </pages> <year> 1990. </year>
Reference-contexts: 1. Introduction Future applications such as distance education, remote collaboration, and teleconferencing are likely to rely on the ability of the underlying computer communications network to provide multicast services. Many well-known network architectures already incorporate support for multicast services, notably the Internet <ref> [12] </ref> and Asynchronous Transfer Mode (ATM) networks [18]. While multicast routing may be performed individually for each packet, an application or multicast service may require a predetermined multicast tree.
Reference: [13] <author> M. Doar and I. Leslie. </author> <title> "How bad is naive multicast routing?," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Apr. </month> <year> 1993, </year> <pages> pp. 82-89. </pages>
Reference-contexts: It supplies many of the basic graph manipulation routines common to the heuristics simulated such as adding edges, deleting edges, and computing shortest paths. 1.1.1 Network Model The random networks used in simulations were generated in a manner similar to that described by Doar <ref> [13] </ref>. The nodes are distributed across a Cartesian coordinate plane with minimum and maximum coordinates (0; 0) and (400; 400), creating a forest of 200 nodes spread across this plane. The nodes are then connected by a random spanning tree. <p> The weight of each edge is its rectilinear distance. We used the 5 probability function P (x; y) = fie 2ffn ; where d x;y is the rectilinear distance between nodes x and y <ref> [13] </ref>. The parameters ff and fi govern the density of the graph. Increasing ff increases the number of connections to nodes far away and increasing fi increases the number of edges from each node. <p> We expected this heuristic to give the worst results; as it sometimes does. However, we discovered that it often produces quite respectable results. This matches Doar's results <ref> [13] </ref>. We treat heuristic Naive as the baseline from which to compare other Steiner heuristics. We describe heuristic Naive as follows. 1. Initialize subtree T to an arbitrary Z-node. 2. Connect subtree T with an arbitrary node in the set Z T by the shortest path. 3. <p> The next least expensive heuristics K-SPH and ADH often gave better solutions at moderate, additional cost. Heuristic Naive, our expected worst Steiner heuristic, often did produce the worst solution; however, it also produced 50 many solutions of surprisingly high quality. This result matches that of Doar and Leslie <ref> [13] </ref>. The competitiveness of the more complex heuristics A29 and Dual Ascent rarely justified their additional effort. As expected, dense networks posed much less of a challenge to degree-constrained Steiner heuristics than sparse networks. In fact, our degree-constrained heuristics easily solved all the dense networks we tested without backtracking. <p> Both balanced the conflicting objectives of competitiveness and run-time. Even heuristic Naive, described in Section 2.4, produced many trees of surprisingly high quality. This is reassuring, and matches the result of Doar and Leslie <ref> [13] </ref>. The competitiveness of the other, more complex heuristics evaluated rarely justified their additional effort.
Reference: [14] <author> R. Douglas. </author> <title> "NP-completeness and degree restricted spanning trees," </title> <journal> Discrete Mathematics, </journal> <volume> vol. 105, </volume> <pages> pp. 41-47, </pages> <year> 1992. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers [21, 41, 43, 44]. The degree-constrained Steiner problem is NP-complete [44] and contains the NP-complete problem of determining a degree-constrained spanning tree <ref> [14, 24] </ref>. While we may be assured of always finding a (sub-optimal) solution to the original Steiner problem in networks, we are not assured of finding a solution at all for the DCSP [44].
Reference: [15] <author> C. Duin and A. Volgenant. </author> <title> "An edge elimination test for the Steiner problem in graphs," </title> <journal> Operations Research Letters, </journal> <volume> vol. 8, </volume> <pages> pp. 79-83, </pages> <year> 1989. </year>
Reference-contexts: The modifications reduce the size of the initial graph, reducing subsequent heuristic run-time. Our empirical evidence suggests that on sparse networks even simple graph reductions may reduce their size as much as 15%. Graph reductions have been extensively reviewed elsewhere <ref> [15, 16, 50] </ref>. A short list of such reductions follows. 1. S degree 1. A non-member node that is a leaf of graph G cannot be a part of the solution and may be deleted. <p> We restricted ourselves to graph reductions S degree 1, S degree 2, and Z degree 1 because these were of reasonable running time and could be applied to the degree-constrained case. We had to discard many other graph reductions <ref> [15, 16, 50] </ref> because they eliminated nodes and edges needed in the degree-constrained case. For example, some graph reductions identify shortest paths between multicast group members as solution edges, eliminating longer paths.
Reference: [16] <author> C. Duin and A. Volgenant. </author> <title> "Reduction tests for the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 19, no. 5, </volume> <pages> pp. 549-567, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The modifications reduce the size of the initial graph, reducing subsequent heuristic run-time. Our empirical evidence suggests that on sparse networks even simple graph reductions may reduce their size as much as 15%. Graph reductions have been extensively reviewed elsewhere <ref> [15, 16, 50] </ref>. A short list of such reductions follows. 1. S degree 1. A non-member node that is a leaf of graph G cannot be a part of the solution and may be deleted. <p> We restricted ourselves to graph reductions S degree 1, S degree 2, and Z degree 1 because these were of reasonable running time and could be applied to the degree-constrained case. We had to discard many other graph reductions <ref> [15, 16, 50] </ref> because they eliminated nodes and edges needed in the degree-constrained case. For example, some graph reductions identify shortest paths between multicast group members as solution edges, eliminating longer paths.
Reference: [17] <author> R. Gallager, P. Humblet, and P. Spira. </author> <title> "A distributed algorithm for minimum-weight spanning trees," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 5, no. 1, </volume> <pages> pp. 66-77, </pages> <month> Jan. </month> <year> 1983. </year>
Reference-contexts: However, a few distributed heuristics exist [10, 30]. Many of these algorithms are based on reducing the SPN to the minimum spanning tree problem, referred to here as the MST, and using a distributed minimum spanning tree algorithm such as the one described by Gallager, Humblet, and Spira <ref> [17] </ref>. A Steiner tree is created by pruning the minimum spanning tree by removing subtrees containing no multicast members. For example, Chen, et al. [10] find a Steiner tree by applying a distributed minimum spanning tree algorithm twice. First the algorithm is applied to the original graph. <p> We analyze their message and convergence-time complexities and compare their simulation results against those from a pruned MST algorithm. We choose the distributed MST algorithm due to Gallager, Hum-blet, and Spira <ref> [17] </ref> as our baseline algorithm for comparison. This algorithm is perhaps the simplest of all pruned MST algorithms, yet produces Steiner trees that are representative of other, more elaborate pruned MST heuristics such as those described in [10, 30]. <p> This path is symmetric in the sense that both paths consist of the same nodes and edges. This is because of the strict ordering we impose on 62 all shortest paths. As in <ref> [17] </ref>, we append the weight of an edge or path with the index of its destination node to determine unambiguous shortest paths between nodes. This ensures that nodes independently agree on the same "shortest" path among several equidistant paths. <p> We choose the distributed MST algorithm due to Gallager, Humblet, and Spira <ref> [17] </ref> as our baseline algorithm because many previous distributed algorithms reviewed use minimal spanning trees [10, 30]. The distributed Steiner heuristics reviewed typically produced a minimum spanning tree of the network graph, which was then pruned to obtain a Steiner tree. <p> Thus, the theoretical upper bound on the number of messages in the pruned MST heuristic is O (n log 2 n + e) <ref> [17] </ref>. In comparison, the upper bound on the number of messages for both SPH and K-SPH is O (zn). Thus, when the number of multicast nodes is large in comparison to log n, the pruned MST heuristic has a smaller upper bound on the number of messages.
Reference: [18] <author> M. Hillyard, E. Sykas, and K. Vlakos. </author> <title> "Overview of ATM networks: functions and procedures," </title> <journal> Computer Communications, </journal> <volume> vol. 14, no. 10, </volume> <pages> pp. 615-626, </pages> <month> Dec. </month> <year> 1991. </year> <month> 165 </month>
Reference-contexts: 1. Introduction Future applications such as distance education, remote collaboration, and teleconferencing are likely to rely on the ability of the underlying computer communications network to provide multicast services. Many well-known network architectures already incorporate support for multicast services, notably the Internet [12] and Asynchronous Transfer Mode (ATM) networks <ref> [18] </ref>. While multicast routing may be performed individually for each packet, an application or multicast service may require a predetermined multicast tree. For example, a network that guarantees quality of service to an application might do so by building a multicast tree with known link characteristics.
Reference: [19] <author> P. Humblet. </author> <title> "Another adaptive distributed shortest path algorithm," </title> <journal> IEEE/ACM Transactions on Communications, </journal> <volume> vol. 39, no. 6, </volume> <pages> pp. 995-1003, </pages> <month> Jun. </month> <year> 1991. </year>
Reference-contexts: The following discussion of the heuristics assumes the availability of shortest-path information. Such information can either be computed when necessary using a well-known 3 graph algorithm [33, 39], or updated dynamically as topology changes occur <ref> [19, 39] </ref>. 1.1 Evaluation Methodology In each of the following chapters describing new algorithms, we use simulation to verify average-case behavior. These simulations were performed on a large set of sparse, randomly-generated network topologies in which the weight of a network link is determined by the distance propagation delay model.
Reference: [20] <author> F. Hwang and D. Richards. </author> <title> "Steiner tree problems," </title> <journal> Networks, </journal> <volume> vol. 22, </volume> <pages> pp. 55-89, </pages> <year> 1992. </year>
Reference-contexts: Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem [35], as an integer programming problem [36], as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks <ref> [7, 8, 9, 20, 50] </ref>. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> Steiner tree heuristics, in contrast, are relatively inexpensive and produce very good solutions. For this reason, we focus on Steiner heuristics. A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [9, 20, 27, 40, 38, 46, 50] </ref>. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution [50]. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here. <p> Competitiveness is used here as defined in Section 1.1.2. Many Steiner heuristics have been proposed in the literature <ref> [20, 38, 46, 50] </ref>. In this section, we first describe eleven promising heuristics for the Steiner problem in networks as follows. 2.1 Merged Shortest Paths Heuristic (SPATH) We start with a popular Steiner heuristic known as the merged shortest paths heuristic (SPATH).
Reference: [21] <author> F. Hwang, D. Richards, and P. Winter. </author> <title> The Steiner Tree Problem. </title> <address> New York: </address> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [21, 41, 43, 44] </ref>. The degree-constrained Steiner problem is NP-complete [44] and contains the NP-complete problem of determining a degree-constrained spanning tree [14, 24].
Reference: [22] <author> M. Imase and B. Waxman. </author> <title> "Dynamic Steiner tree problem," </title> <journal> SIAM J. Disc. Math., </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 369-384, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman [48] and has received little attention since <ref> [22, 26, 49] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness. We derive analytical bounds on the competitiveness of the new heuristic. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [22, 48] </ref>. We summarize both heuristics below for the reader's convenience. 6.1.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [22, 48] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [22, 48] </ref>. We summarize both heuristics below for the reader's convenience. 6.1.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [22, 48] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. <p> For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. This continues until no non-member leaves remain. 6.1.2 The Edge-Bounded Algorithm (EBA) The rearrangement heuristic EBA (the edge-bounded algorithm) <ref> [22] </ref> enforces bounds on the distance between nodes in the tree after each change, and performs rearrangements 101 when the distance exceeds a set bound. EBA starts by converting the original graph to a corresponding distance graph. <p> The cost of the latter, in turn, is no more than twice that of an optimal Steiner tree. Since Imase and Waxman chose a value of 2 for the constant ffi in <ref> [22] </ref>, we also use ffi = 2 in our simulations. This ensures that the cost of the multicast tree found by EBA is always within 4ffi = 8 times that of an optimal Steiner tree for the multicast group. <p> For each delete request, GSDM behaves exactly as GREEDY does. 6.1.4 Bounds for On-Line Heuristics Waxman and Imase provide bounds for the competitiveness of all non-rearrangement heuristics in general and GREEDY in specific when only add requests are honored <ref> [22] </ref>. Here competitiveness is defined as the ratio between the cost of a multicast tree found by the heuristic and that of an optimal tree. <p> Imase and Waxman have shown that no such finite bound exists if delete requests are also honored <ref> [22] </ref>. A rearrangeable heuristic, however, can have a finite bound for competitiveness for both add and delete requests. For example, heuristic EBA's upper bound is 4ffi where ffi is EBA's constant as described in Section 6.1.2. <p> For example, heuristic EBA's upper bound is 4ffi where ffi is EBA's constant as described in Section 6.1.2. In both our simulations and Imase and Waxman's paper, ffi = 2 and the upper bound is therefore 8 <ref> [22] </ref>. <p> Our primary objective is to derive an upper bound on its competitiveness between rearrangements. Between rearrangements, ARIES behaves similar to GREEDY and shares its bounds. From Imase and Waxman <ref> [22] </ref>, we know that the upper bound considering only add requests is log 2 (n i ), where n i is the number of nodes in the tree T i after request r i . <p> Our primary objective is to derive an upper bound on its competitiveness between rearrangements. Between rearrangements, ARIES behaves similar to GREEDY and shares its bounds. From Imase and Waxman <ref> [22] </ref>, we know that the upper bound considering only add requests is log 2 (n i ), where n i is the number of nodes in the tree T i after request r i . However, no such finite bounds exist for GREEDY with respect to delete requests. <p> We will prove the theorem considering only the delete operations in the interval (0; t). Since a tighter bound of log 2 (n max ) is known for the hueristic GREEDY <ref> [22] </ref>, the bound in Theorem 6.3 also holds for arbitrary update sequences consisting of both add and delete operations. We assume that the optimization step of the algorithm has been applied, with the result that no deleted nodes appear as leaves in the tree T (t).
Reference: [23] <author> X. Jiang. </author> <title> "Path finding algorithms for broadband multicast," </title> <booktitle> in Third Int'l Conf. on High Speed Networking, </booktitle> <editor> O. Spaniol and A. Danthine, ed., </editor> <address> New York: </address> <publisher> North-Holland, </publisher> <year> 1991, </year> <pages> pp. 153-164. </pages>
Reference: [24] <author> D. Johnson. </author> <title> "The NP-completeness column: an ongoing guide," </title> <journal> Journal of Algorithms, </journal> <volume> vol. 6, no. 3, </volume> <pages> pp. 434-451, </pages> <month> Sep. </month> <year> 1985. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers [21, 41, 43, 44]. The degree-constrained Steiner problem is NP-complete [44] and contains the NP-complete problem of determining a degree-constrained spanning tree <ref> [14, 24] </ref>. While we may be assured of always finding a (sub-optimal) solution to the original Steiner problem in networks, we are not assured of finding a solution at all for the DCSP [44].
Reference: [25] <author> G. Polyzos K. Claffy and H. Braun. </author> <title> "Traffic characteristics of the T1 NSFNET backbone," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Mar. </month> <year> 1993, </year> <pages> pp. 885-892. </pages>
Reference-contexts: These asymmetric costs might exist because of unidirectional physical links such as satellite or microwave links or they might be associated with traffic characteristics such as congestion. An example of the latter is the asymmetric traffic loading observed by Claffy on NFSNET T1 links <ref> [25] </ref>. This chapter presents and compares heuristics suitable for building multicast trees for point-to-point networks with asymmetric link costs. Many of the heuristics already reviewed in Chapter 2 show promise since they produce good trees and can easily be modified to solve directed networks.
Reference: [26] <author> J. Kadirire. </author> <title> "Comparison of dynamic multicast routing algorithms for wide-area packet switched (asynchronous transfer mode) networks," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Boston, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 212-219. </pages>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman [48] and has received little attention since <ref> [22, 26, 49] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness. We derive analytical bounds on the competitiveness of the new heuristic. <p> This is repeated until no non-member nodes with degree 2 remain in ^ T . 6.1.3 The Geographic-Spread Dynamic Multicast Heuristic A second rearrangement heuristic is Kadirire's GSDM, the geographic-spread dynamic multicast routing algorithm <ref> [26] </ref>. When adding nodes, this heuristic relies on exploring four explicit connection configurations between the new member and three nearby nodes in the existing tree. For each add request, it identifies the tree node closest to the new member and its two closest multicast neighbors in the tree. <p> The heuristic then chooses the least-cost configuration among four possible ways to connect the new member to the three identified nodes. If more than one cheapest alternative exists, GSDM chooses the one with greatest geographic spread <ref> [26] </ref>. For each delete request, GSDM behaves exactly as GREEDY does. 6.1.4 Bounds for On-Line Heuristics Waxman and Imase provide bounds for the competitiveness of all non-rearrangement heuristics in general and GREEDY in specific when only add requests are honored [22].
Reference: [27] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Multicasting for multimedia applications," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1992, </year> <pages> pp. 2078-2085. </pages>
Reference-contexts: Steiner tree heuristics, in contrast, are relatively inexpensive and produce very good solutions. For this reason, we focus on Steiner heuristics. A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [9, 20, 27, 40, 38, 46, 50] </ref>. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution [50]. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here. <p> Supporting such applications efficiently requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static multicast tree in point-to-point networks <ref> [3, 8, 27] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Since many multicast applications are delay-sensitive, the efficiency of the algorithm used to maintain the multicast tree assumes special significance.
Reference: [28] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Multicast routing for multimedia communications," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 286-292, </pages> <month> Jun. </month> <year> 1993. </year>
Reference: [29] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Multicast routing for multimedia communications," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 286-292, </pages> <month> Jun. </month> <year> 1993. </year>
Reference-contexts: The distributed minimum spanning tree algorithm is then applied a second time to this subgraph. The solution is obtained by pruning unnecessary leaves and branches from this second minimum spanning tree. Likewise, Kompella, et al. [30] describe two distributed versions of earlier centralized heuristics proposed by the same authors <ref> [29] </ref>. Both of these distributed heuristics first build a constrained Steiner tree that reflects the combined criteria of cost and delay. A distributed MST algorithm is applied to this constrained Steiner tree and the solution tree is pruned.
Reference: [30] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Two distributed algorithms for the constrained Steiner tree problem," </title> <booktitle> in Proc. </booktitle> <institution> Comput. Commun. and Netw., </institution> <address> San Diego, CA, </address> <month> Jun. </month> <year> 1993. </year>
Reference-contexts: In these algorithms, the computational effort to determine a multicast tree is distributed over the switch nodes. Most of the Steiner tree algorithms proposed in the literature for SPN are serial in nature. However, a few distributed heuristics exist <ref> [10, 30] </ref>. Many of these algorithms are based on reducing the SPN to the minimum spanning tree problem, referred to here as the MST, and using a distributed minimum spanning tree algorithm such as the one described by Gallager, Humblet, and Spira [17]. <p> The distributed minimum spanning tree algorithm is then applied a second time to this subgraph. The solution is obtained by pruning unnecessary leaves and branches from this second minimum spanning tree. Likewise, Kompella, et al. <ref> [30] </ref> describe two distributed versions of earlier centralized heuristics proposed by the same authors [29]. Both of these distributed heuristics first build a constrained Steiner tree that reflects the combined criteria of cost and delay. <p> We choose the distributed MST algorithm due to Gallager, Hum-blet, and Spira [17] as our baseline algorithm for comparison. This algorithm is perhaps the simplest of all pruned MST algorithms, yet produces Steiner trees that are representative of other, more elaborate pruned MST heuristics such as those described in <ref> [10, 30] </ref>. The distributed heuristics are compared on the basis of three criteria: competitiveness, number of messages exchanged, and convergence time. The remainder of this chapter is organized as follows. Section 4.1 introduces and analyzes our two distributed heuristics, based on the centralized Steiner heuristics K-SPH and SPH, respectively. <p> We choose the distributed MST algorithm due to Gallager, Humblet, and Spira [17] as our baseline algorithm because many previous distributed algorithms reviewed use minimal spanning trees <ref> [10, 30] </ref>. The distributed Steiner heuristics reviewed typically produced a minimum spanning tree of the network graph, which was then pruned to obtain a Steiner tree. <p> Among the two algorithms studied, distributed K-SPH emerged as the clear winner; in comparison to distributed SPH, it has substantially lower convergence time and slightly better competitiveness. The heuristics developed are an improvement over existing distributed Steiner heuristics based on the minimum spanning tree <ref> [10, 30] </ref> for two reasons: they produce solutions of superior quality in most cases and require the participation of only a subset of network nodes.
Reference: [31] <author> L. Kou, G. Markowsky, and L. Berman. </author> <title> "A fast algorithm for Steiner trees," </title> <journal> ACTA Informatica, </journal> <volume> vol. 15, no. 2, </volume> <pages> pp. 141-145, </pages> <year> 1981. </year>
Reference-contexts: The bound for this heuristic's competitiveness is s [46]. PMST's run-time bound is O (n 2 ), the cost of a minimum spanning tree algorithm such as Prim's algorithm. 14 2.3 Kou, Markowsky, and Berman's Steiner Heuristic (KMB) A related heuristic is KMB <ref> [31] </ref>. This heuristic applies a minimum spanning tree algorithm to the complete distance graph derived from the original graph. A complete distance graph contains all the nodes of the original graph and has an edge between every pair of nodes representing the shortest path between them. <p> The heuristics compared are the shortest path heuristic (SPH) [38], heuristic Naive, the selective closest terminal first heuristic (SCTF) [37], the Kruskal-based shortest path heuristic (K-SPH) [38], heuristic Dual Ascent (DA) [51], the pruned minimum spanning tree heuristic (PMST)[50], and a heuristic proposed by Kou, Markowsky, and Berman (KMB) <ref> [31] </ref>. The undirected versions of all but one heuristic, heuristic SCTF, are described in Chapter 2. Formally, the directed Steiner problem in networks as used in this chapter is defined as follows.
Reference: [32] <author> J. Kruskal. </author> <title> "On the shortest spanning subtree of a graph and the traveling salesman problem," </title> <journal> Proc. Amer. Math. Soc., </journal> <volume> vol. 7, </volume> <pages> pp. 48-50, </pages> <year> 1956. </year>
Reference-contexts: SPH-Z shares SPH's competitiveness bound of 2. Its run-time bound is O (z 2 n 2 ), z times that of SPH. 2.7 Heuristic K-SPH Unlike the previous heuristics, the Kruskal-based Shortest-Path Heuristic (K-SPH) <ref> [32] </ref> starts with the forest F of multicast group member nodes. It repeatedly joins the two 18 closest multicast group member subtrees in F until a single tree spanning all multicast group members remains. The algorithm is described as follows. 1. Initialize F to be the forest of Z-nodes. 2.
Reference: [33] <author> H. Lau. </author> <title> Algorithms on graphs. Blue Ridge Summit, PA: TAB Professional and Reference Books, </title> <year> 1989. </year>
Reference-contexts: Finally, the distance between two trees is the minimum distance between a node in one tree and a node in the other tree. The following discussion of the heuristics assumes the availability of shortest-path information. Such information can either be computed when necessary using a well-known 3 graph algorithm <ref> [33, 39] </ref>, or updated dynamically as topology changes occur [19, 39]. 1.1 Evaluation Methodology In each of the following chapters describing new algorithms, we use simulation to verify average-case behavior.
Reference: [34] <author> C. Lund and M. Yannakakis. </author> <title> "On the hardness of approximating minimization problems," </title> <booktitle> in Proc. ACM Symposium on the Theory of Computing, </booktitle> <address> San Diego, CA, </address> <month> May </month> <year> 1993, </year> <pages> pp. 286-293. </pages>
Reference-contexts: and Ramanathan [37] have shown that the Steiner problem in networks may be reduced to the NP-complete minimum set cover problem, these bounds are consistent with Lund's observation that that no approximation algorithm can have a bound for competitiveness better than log (z) for 150 the minimum set cover problem <ref> [34] </ref>. 7.2 Evaluation Methodology From Table 7.1 we might conclude that average-case behavior for directed heuristics should also worsen. However, analytical upper bounds sometimes provide little insight into average behavior. To investigate average-case behavior directly, we implemented each heuristic on top of our Steiner problem simulation platform.
Reference: [35] <author> J. Choquette M. Dror, B. Gavish. </author> <title> "Directed Steiner tree problem on a graph: models, relaxations and algorithms," </title> <journal> INFOR, </journal> <volume> vol. 28, no. 3, </volume> <pages> pp. 266-281, </pages> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: The constraints considered are degree-constraints on nodes; geographically distributed, autonomous switches; dynamically changing multicast groups; and unidirectional networks. Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem <ref> [35] </ref>, as an integer programming problem [36], as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks [7, 8, 9, 20, 50]. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> In this chapter, we consider seven such directed Steiner heuristics. Before continuing, however, it is important to note that several other approaches to establishing multicast trees in directed networks exist. These include formulating the problem as a network flow problem [1], a Lagrangean relaxation problem <ref> [35] </ref>, and as an integer programming problem [36]. While these approaches may produce good multicast trees, they often involve substantial computational effort. Directed Steiner heuristics, by contrast, are relatively inexpensive and produce very good solutions. For this reason, we consider only directed Steiner heuristics in this chapter.
Reference: [36] <author> C. Noronha and F. Tobagi. </author> <title> "Evaluation of multicast routing algorithms for multimedia streams." </title> <type> Technical report, </type> <institution> Stanford, CSL-TR-94-619, </institution> <month> Apr. </month> <year> 1994. </year> <month> 166 </month>
Reference-contexts: The constraints considered are degree-constraints on nodes; geographically distributed, autonomous switches; dynamically changing multicast groups; and unidirectional networks. Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem [35], as an integer programming problem <ref> [36] </ref>, as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks [7, 8, 9, 20, 50]. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> Before continuing, however, it is important to note that several other approaches to establishing multicast trees in directed networks exist. These include formulating the problem as a network flow problem [1], a Lagrangean relaxation problem [35], and as an integer programming problem <ref> [36] </ref>. While these approaches may produce good multicast trees, they often involve substantial computational effort. Directed Steiner heuristics, by contrast, are relatively inexpensive and produce very good solutions. For this reason, we consider only directed Steiner heuristics in this chapter.
Reference: [37] <author> S. Ramanathan. </author> <title> "An algorithm for multicast tree generation in networks with asymmetric links," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Mar. </month> <year> 1996, </year> <pages> pp. 337-344. </pages>
Reference-contexts: In subsequent sections, we describe the seven directed Steiner heuristics, present theoretic bounds for their run-time and competitiveness, and compare their average-case behavior with respect to run-time and competitiveness. The heuristics compared are the shortest path heuristic (SPH) [38], heuristic Naive, the selective closest terminal first heuristic (SCTF) <ref> [37] </ref>, the Kruskal-based shortest path heuristic (K-SPH) [38], heuristic Dual Ascent (DA) [51], the pruned minimum spanning tree heuristic (PMST)[50], and a heuristic proposed by Kou, Markowsky, and Berman (KMB) [31]. The undirected versions of all but one heuristic, heuristic SCTF, are described in Chapter 2. <p> SPATH is described here both because of its relevance to heuristic SCTF described below and its low run-time bound. No heuristic that computes shortest path distance can have a lower run-time bound. However, we know its average-case behavior to be poor <ref> [37, 38, 46] </ref>, as demonstrated by heuristic variant SCTF-1's average-case behavior shown in Section 7.3. 7.1.2 Directed shortest path heuristic (SPH) Next we consider SPH. By choosing directed, shortest paths, we can easily extend SPH to directed networks. The competitiveness bound for this algorithm is O (z) [47]. <p> Likewise, we assume naive's run-time bound to be dominated by shortest path calculations, yielding a bound of O (zn 2 ). 7.1.4 Selective Closest Terminal First (SCTF) Another variant of SPH is one proposed by Ramanathan <ref> [37] </ref> named the Selective Closest Terminal First (SCTF). This variant trades off run-time for competitiveness. It does so by considering only a subset of the nodes in the tree as starting points when connecting a new member to the tree. <p> For those heuristics with competitiveness bounds in both columns, the bound becomes worse except for SPATH which remains the same. Heuristics SPH, K-SPH and KMB jump from 2 to z for the directed case while PMST loses its finite bound altogether. Since both Aneja [2] and Ramanathan <ref> [37] </ref> have shown that the Steiner problem in networks may be reduced to the NP-complete minimum set cover problem, these bounds are consistent with Lund's observation that that no approximation algorithm can have a bound for competitiveness better than log (z) for 150 the minimum set cover problem [34]. 7.2 Evaluation
Reference: [38] <author> M. Smith and P. Winter. </author> <title> "Path-distance heuristics for the Steiner problem in undirected networks," </title> <journal> Algorithmica, </journal> <volume> vol. 7, no. </volume> <pages> 2-3, pp. 309-327, </pages> <year> 1992. </year>
Reference-contexts: Steiner tree heuristics, in contrast, are relatively inexpensive and produce very good solutions. For this reason, we focus on Steiner heuristics. A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [9, 20, 27, 40, 38, 46, 50] </ref>. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution [50]. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here. <p> While modifications to suit specific constraints will be noted in each chapter, the heuristics used remain similar to the unconstrained, centralized versions described below. Smith and Winter <ref> [38] </ref> divide Steiner heuristics into a morphological structure similar to the one shown in Figure 2.1. At the highest level, heuristics are divided between those that are path-distance heuristics (PDH) and others. <p> Path-distance heuristics are further divided between variants of the shortest-path heuristic and other path-distance heuristics. Table 2.1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the competitiveness produced to that of an optimal solution. SPH-Z <ref> [38] </ref> A29 [46] ADH [38] Naive (Section 2.4) PDH Local Steinalization [11] Contraction [50] Set Cover [2] Dual Ascent [51] 12 Heuristic Time Complexity Solution Bound SPATH O (n 2 ) z PMST O (n 2 ) s KMB O (n 3 ) 2 Naive O (zn 2 ) z SPH <p> Table 2.1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the competitiveness produced to that of an optimal solution. SPH-Z <ref> [38] </ref> A29 [46] ADH [38] Naive (Section 2.4) PDH Local Steinalization [11] Contraction [50] Set Cover [2] Dual Ascent [51] 12 Heuristic Time Complexity Solution Bound SPATH O (n 2 ) z PMST O (n 2 ) s KMB O (n 3 ) 2 Naive O (zn 2 ) z SPH O (zn 2 ) <p> Competitiveness is used here as defined in Section 1.1.2. Many Steiner heuristics have been proposed in the literature <ref> [20, 38, 46, 50] </ref>. In this section, we first describe eleven promising heuristics for the Steiner problem in networks as follows. 2.1 Merged Shortest Paths Heuristic (SPATH) We start with a popular Steiner heuristic known as the merged shortest paths heuristic (SPATH). <p> No heuristic which computes shortest path distance can have a lower run-time bound. However, we know its average case behavior to be poor <ref> [38, 46] </ref>. 2.2 Pruned minimum spanning tree heuristic (PMST) Another popular Steiner heuristic is the pruned minimum spanning tree heuristic (PMST) [50]. This heuristic starts by finding a minimum spanning tree (MST) for the original graph using a minimum spanning tree algorithm. <p> Note that this algorithm differs from heuristic Naive because multicast group members join in the order determined by their distance to the multicast tree, rather than in random order. This solution may be improved even further using the technique illustrated in Figure 2.6 <ref> [38] </ref>. Find the graph induced by the nodes in the solution, derive the induced graph's minimum spanning tree using a method such as Prim's algorithm, and prune the minimum spanning tree of non-multicast group member leaves. The resulting tree is an improved solution. <p> Heuristic K-SPH's competitiveness bound is also 2 [50]. Its run-time bound is dominated by shortest path calculations between members, O (zn 2 ). 2.8 Heuristic ADH The average distance heuristic (ADH) <ref> [38] </ref> is a generalization of K-SPH. Like K-SPH, the algorithm starts with the forest of multicast group member nodes. It repeatedly connects the three closest multicast group member components through the most central node (defined to be the node with the least average distance to all multicast group members). <p> our counts and because the heuristics share many common simulator platform services, profiler statement counts provide a reasonably accurate measure of computational effort. 3.3.2 Simulation Results To verify and calibrate simulation results, we first compared our results obtained from running unconstrained versions of the heuristics with those published by Smith <ref> [38] </ref> and Voss [46]. Of the heuristics compared, only one | Dual Ascent | did not match the published results. That only one heuristic differed significantly from published results is interesting since our simulations focused on a much narrower range of networks than those considered by Smith or Voss. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (K-SPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [38, 50] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation as seen in Chapter 4. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations in Chapters 3 and 4. <p> In subsequent sections, we describe the seven directed Steiner heuristics, present theoretic bounds for their run-time and competitiveness, and compare their average-case behavior with respect to run-time and competitiveness. The heuristics compared are the shortest path heuristic (SPH) <ref> [38] </ref>, heuristic Naive, the selective closest terminal first heuristic (SCTF) [37], the Kruskal-based shortest path heuristic (K-SPH) [38], heuristic Dual Ascent (DA) [51], the pruned minimum spanning tree heuristic (PMST)[50], and a heuristic proposed by Kou, Markowsky, and Berman (KMB) [31]. <p> The heuristics compared are the shortest path heuristic (SPH) <ref> [38] </ref>, heuristic Naive, the selective closest terminal first heuristic (SCTF) [37], the Kruskal-based shortest path heuristic (K-SPH) [38], heuristic Dual Ascent (DA) [51], the pruned minimum spanning tree heuristic (PMST)[50], and a heuristic proposed by Kou, Markowsky, and Berman (KMB) [31]. The undirected versions of all but one heuristic, heuristic SCTF, are described in Chapter 2. <p> SPATH is described here both because of its relevance to heuristic SCTF described below and its low run-time bound. No heuristic that computes shortest path distance can have a lower run-time bound. However, we know its average-case behavior to be poor <ref> [37, 38, 46] </ref>, as demonstrated by heuristic variant SCTF-1's average-case behavior shown in Section 7.3. 7.1.2 Directed shortest path heuristic (SPH) Next we consider SPH. By choosing directed, shortest paths, we can easily extend SPH to directed networks. The competitiveness bound for this algorithm is O (z) [47]. <p> SPH's run-time bound is dominated by its shortest path calculations from tree nodes to multicast members. At a minimum, a shortest path algorithm must be run for z nodes, the number of multicast members. Thus, the run-time 142 bound is O (zn 2 ) <ref> [38] </ref>. 7.1.3 Directed Naive We next consider heuristic Naive. It too can be easily extended to the directed case. No published bound exists for Naive's competitiveness. However, because of its similarity 143 to SPH, we assume its competitiveness bound to be the same as that of SPH, O (z).
Reference: [39] <author> P. Spira and A. Pan. </author> <title> "On finding and updating spanning trees and shortest paths," </title> <journal> SIAM J. Comput., </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 375-380, </pages> <month> Sep. </month> <year> 1975. </year>
Reference-contexts: Finally, the distance between two trees is the minimum distance between a node in one tree and a node in the other tree. The following discussion of the heuristics assumes the availability of shortest-path information. Such information can either be computed when necessary using a well-known 3 graph algorithm <ref> [33, 39] </ref>, or updated dynamically as topology changes occur [19, 39]. 1.1 Evaluation Methodology In each of the following chapters describing new algorithms, we use simulation to verify average-case behavior. <p> The following discussion of the heuristics assumes the availability of shortest-path information. Such information can either be computed when necessary using a well-known 3 graph algorithm [33, 39], or updated dynamically as topology changes occur <ref> [19, 39] </ref>. 1.1 Evaluation Methodology In each of the following chapters describing new algorithms, we use simulation to verify average-case behavior. These simulations were performed on a large set of sparse, randomly-generated network topologies in which the weight of a network link is determined by the distance propagation delay model.
Reference: [40] <author> H. Takahashi and A. </author> <title> Matsuyama. "An approximate solution for the Steiner problem in graphs," </title> <journal> Math. Japonica, </journal> <volume> vol. 24, no. 6, </volume> <pages> pp. 573-577, </pages> <year> 1980. </year>
Reference-contexts: Steiner tree heuristics, in contrast, are relatively inexpensive and produce very good solutions. For this reason, we focus on Steiner heuristics. A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [9, 20, 27, 40, 38, 46, 50] </ref>. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution [50]. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here. <p> Likewise, we 16 assume Naive's run-time bound to be O (zn 2 ) since it is dominated by the z shortest-path calculations necessary to connect new members to the tree. 2.5 Shortest Path Heuristic (SPH) The Shortest-Path Heuristic (SPH) <ref> [40] </ref> produces surprisingly good results and has many variants as shown in Figure 2.1. SPH initializes the multicast tree to an arbitrary multicast group member. The next closest multicast group member is then added to the multicast tree by its shortest path to the tree.
Reference: [41] <author> H. Tode, Y. Sakai, M. Yamamoto, H. Okada, and Y. Tezuka. </author> <title> "Multicast routing algorithm for nodal load balancing," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1992, </year> <pages> pp. 2086-2095. </pages>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [21, 41, 43, 44] </ref>. The degree-constrained Steiner problem is NP-complete [44] and contains the NP-complete problem of determining a degree-constrained spanning tree [14, 24]. <p> It is easy to construct graphs for which unconstrained Steiner trees are trivial to find, but for which no degree-constrained tree can be shown to exist. Few DCSP heuristics exist in the literature <ref> [41, 44] </ref>. A previous paper by Tode, et al. [41] treats the DCSP as an optimization problem. It presents two DCSP heuristics that minimize the average degree of the multicast tree. <p> It is easy to construct graphs for which unconstrained Steiner trees are trivial to find, but for which no degree-constrained tree can be shown to exist. Few DCSP heuristics exist in the literature [41, 44]. A previous paper by Tode, et al. <ref> [41] </ref> treats the DCSP as an optimization problem. It presents two DCSP heuristics that minimize the average degree of the multicast tree. It also includes a discussion of how to modify the heuristics to limit the maximum degree in the multicast tree.
Reference: [42] <author> J. Turner. </author> <title> "An optimal nonblocking multicast virtual circuit switch," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Toronto, Canada, </address> <month> Jun. </month> <year> 1994, </year> <pages> pp. 298-305. </pages>
Reference-contexts: Even when the switches allow multicasting to an arbitrary number of destination ports, there are advantages in limiting the number of copies made by each switch. For example, some packet-switch architectures implement multicasting by circulating copies of packets through the switch fabric multiple times <ref> [42] </ref>. Thus, keeping the degree small reduces the number of passes needed through the switch fabric. In addition, reducing the degree of internal nodes in the multicast tree may also reduce the complexity of reconfiguring the multicast tree on a node or link failure.
Reference: [43] <author> S. Voss. </author> <title> "A survey of some generalizations of Steiner's problem," </title> <booktitle> in Proc. of the First Balkan Conference on Operational Research, </booktitle> <year> 1988. </year>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [21, 41, 43, 44] </ref>. The degree-constrained Steiner problem is NP-complete [44] and contains the NP-complete problem of determining a degree-constrained spanning tree [14, 24].
Reference: [44] <editor> S. Voss. Steiner-Probleme in Graphen. Frankfurt/Main: </editor> <publisher> Hain, </publisher> <year> 1990, </year> <pages> pp. 179-184. </pages>
Reference-contexts: The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers <ref> [21, 41, 43, 44] </ref>. The degree-constrained Steiner problem is NP-complete [44] and contains the NP-complete problem of determining a degree-constrained spanning tree [14, 24]. <p> The degree-constrained Steiner problem in networks is a relatively new problem and is addressed in only a handful of published papers [21, 41, 43, 44]. The degree-constrained Steiner problem is NP-complete <ref> [44] </ref> and contains the NP-complete problem of determining a degree-constrained spanning tree [14, 24]. While we may be assured of always finding a (sub-optimal) solution to the original Steiner problem in networks, we are not assured of finding a solution at all for the DCSP [44]. <p> degree-constrained Steiner problem is NP-complete <ref> [44] </ref> and contains the NP-complete problem of determining a degree-constrained spanning tree [14, 24]. While we may be assured of always finding a (sub-optimal) solution to the original Steiner problem in networks, we are not assured of finding a solution at all for the DCSP [44]. It is easy to construct graphs for which unconstrained Steiner trees are trivial to find, but for which no degree-constrained tree can be shown to exist. Few DCSP heuristics exist in the literature [41, 44]. <p> It is easy to construct graphs for which unconstrained Steiner trees are trivial to find, but for which no degree-constrained tree can be shown to exist. Few DCSP heuristics exist in the literature <ref> [41, 44] </ref>. A previous paper by Tode, et al. [41] treats the DCSP as an optimization problem. It presents two DCSP heuristics that minimize the average degree of the multicast tree. <p> This changed topology can alter the shortest path information for remaining steps. As a consequence, heuristics must constantly re-evaluate shortest paths between nodes. Third, since finding a feasible solution to the DCSP is NP-complete <ref> [44] </ref>, a given DCSP heuristic may not be able to find a solution even though one exists. Consequently, all of our DCSP heuristics employ backtracking. <p> Ultimately, it is doubtful whether the competitiveness of the heuristic would justify its cost. 3.1.2 Constrained Heuristics In addition to the above unconstrained heuristics, we simulate two DCSP-specific heuristics, A29 and SPH-R. Heuristic A29 was first proposed by Voss <ref> [44] </ref> and heuristic SPH-R is our own contribution. They are described below. A29: Heuristic A29 [44] is the only published DCSP heuristic of which we are aware. It is also a variant of SPH. <p> Heuristic A29 was first proposed by Voss <ref> [44] </ref> and heuristic SPH-R is our own contribution. They are described below. A29: Heuristic A29 [44] is the only published DCSP heuristic of which we are aware. It is also a variant of SPH. It first adds enough edges of infinite weight to make G a complete graph and then applies heuristic SPH. <p> Table 3.2 summarizes the success rates of the degree-constrained heuristics based on simulations on 2000 test networks. As expected, heuristics run on the sample networks with degree-constraints sometimes had difficulty in finding solutions. This is because finding a solution for the degree-constrained case is also NP-complete <ref> [44] </ref>. In practice, however, most of the degree-constrained graphs could be solved by the heuristics directly or through backtracking. In fact, each of the 2000 test networks could be solved by at least one of the heuristics. The maximum number of cases missed by any single heuristic was 7.
Reference: [45] <author> S. Voss. </author> <title> "Problems with generalized Steiner problems," </title> <journal> Algorithmica, </journal> <volume> vol. 7, no. </volume> <pages> 2-3, pp. 333-335, </pages> <year> 1992. </year>
Reference-contexts: The problem of how to create the multicast tree when switch multicast capabilities vary is hereafter referred to as the 30 degree-constrained multicast tree problem. We model the degree-constrained multicast tree problem as the degree-constrained Steiner problem in networks (DCSP), first described by S. Voss <ref> [45] </ref>. Formally, the DCSP as used in this chapter is defined as follows. GIVEN: A simple, undirected, connected graph G = (V; E) with a set of vertices V , a set of edges E, and a subset of vertices Z V corresponding to the multicast group.
Reference: [46] <author> S. Voss. </author> <title> "Steiner's problem in graphs: heuristic methods," </title> <journal> Discrete Applied Mathematics, </journal> <volume> vol. 40, </volume> <pages> pp. 45-72, </pages> <year> 1992. </year>
Reference-contexts: Steiner tree heuristics, in contrast, are relatively inexpensive and produce very good solutions. For this reason, we focus on Steiner heuristics. A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [9, 20, 27, 40, 38, 46, 50] </ref>. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution [50]. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here. <p> Path-distance heuristics are further divided between variants of the shortest-path heuristic and other path-distance heuristics. Table 2.1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the competitiveness produced to that of an optimal solution. SPH-Z [38] A29 <ref> [46] </ref> ADH [38] Naive (Section 2.4) PDH Local Steinalization [11] Contraction [50] Set Cover [2] Dual Ascent [51] 12 Heuristic Time Complexity Solution Bound SPATH O (n 2 ) z PMST O (n 2 ) s KMB O (n 3 ) 2 Naive O (zn 2 ) z SPH O (zn <p> Competitiveness is used here as defined in Section 1.1.2. Many Steiner heuristics have been proposed in the literature <ref> [20, 38, 46, 50] </ref>. In this section, we first describe eleven promising heuristics for the Steiner problem in networks as follows. 2.1 Merged Shortest Paths Heuristic (SPATH) We start with a popular Steiner heuristic known as the merged shortest paths heuristic (SPATH). <p> Thus if the shortest path to two or more multicast group members share an intermediate node, that intermediate node will become an internal node in the Steiner tree with degree greater than two. The bound for SPATH's competitiveness is z <ref> [46] </ref>. Likewise, since this heuristic needs to compute the shortest distance from the source to every multicast member once, its run-time is bounded by that of a shortest path algorithm such as Dijkstra's algorithm, O (n 2 ). <p> No heuristic which computes shortest path distance can have a lower run-time bound. However, we know its average case behavior to be poor <ref> [38, 46] </ref>. 2.2 Pruned minimum spanning tree heuristic (PMST) Another popular Steiner heuristic is the pruned minimum spanning tree heuristic (PMST) [50]. This heuristic starts by finding a minimum spanning tree (MST) for the original graph using a minimum spanning tree algorithm. <p> This heuristic starts by finding a minimum spanning tree (MST) for the original graph using a minimum spanning tree algorithm. The resulting directed spanning tree is pruned of all non-member leaves until none remains. The bound for this heuristic's competitiveness is s <ref> [46] </ref>. PMST's run-time bound is O (n 2 ), the cost of a minimum spanning tree algorithm such as Prim's algorithm. 14 2.3 Kou, Markowsky, and Berman's Steiner Heuristic (KMB) A related heuristic is KMB [31]. <p> Apply a minimum spanning tree algorithm to subgraph V , creating spanning tree T . 5. Prune T of non-multicast leaves until no non-multicast leaves remain. Unlike the simpler PMST, directed KMB's bound for competitiveness is z <ref> [46] </ref>. This is because the complete distance graph representation preserves shortest paths between members that might be lost by PMST. This bound, however, comes at increased run-time cost to consider all the edges of a complete graph. <p> We know this to be true since simply taking the spanning tree and pruning it to be the Steiner tree can, in the worst case, produce a solution whose cost is (jSj + 1) times that of an optimal one <ref> [46] </ref>. 5. Finally, prune all non-multicast group member leaves from T . The result is the final solution. <p> because the heuristics share many common simulator platform services, profiler statement counts provide a reasonably accurate measure of computational effort. 3.3.2 Simulation Results To verify and calibrate simulation results, we first compared our results obtained from running unconstrained versions of the heuristics with those published by Smith [38] and Voss <ref> [46] </ref>. Of the heuristics compared, only one | Dual Ascent | did not match the published results. That only one heuristic differed significantly from published results is interesting since our simulations focused on a much narrower range of networks than those considered by Smith or Voss. <p> Each of our networks is large, sparse and has a small multicast 37 group. In contrast, Smith and Voss simulated a mix of sparse and dense networks with small to large multicast groups. In Voss' simulations <ref> [46] </ref>, heuristic Dual Ascent found the best solution as much as 80% of the time. In our simulations, however, the algorithm rarely produced the best solution; in some cases the solutions were as much as 15% off when compared with the best solution among all the heuristics. <p> This is important because Dual Ascent uses a minimum spanning tree (MST) of the subgraph to find a Steiner tree. Previously published results have shown that the approach based on pruning the MST (heuristic PMST) works well for large multicast groups, but poorly for small groups <ref> [46] </ref>. The published worst-case ratio between a solution using the MST and an optimal solution is jSj + 1 where jSj is the number of non-multicast group members. Thus, it is not surprising that Dual Ascent's competitiveness was poor for sparse 200-node networks with 20 or 60 multicast group members. <p> Heuristic Frequency of best solution (%) SPH-Z 48.60 K-SPH 34.10 A29 29.75 Naive 3.10 Dual Ascent 0.00 Table 3.5: Frequency of best results produced by unconstrained heuristics on 2000 test networks. non-members) <ref> [46] </ref>, this difference is not surprising. The competitiveness for the unconstrained case in Figure 3.2 remained essentially unchanged for all the clusters except Naive and Dual Ascent. <p> This may be impractical in a large network with sparse multicast groups. Second, the theoretical upper bound on competitiveness of a pruned MST to that of an optimal Steiner tree has been shown to be s + 1, where s is the number of non-multicast nodes <ref> [46] </ref>. Thus the competitiveness of a multicast tree decreases with the size of the multicast group. In comparison, the equivalent theoretical upper bound for the shortest path heuristic (SPH) for the Steiner tree problem is 2 (1 1 z ) [50], where z is the size of the multicast group. <p> In contrast, the ratio between the cost of a solution produced by pruning a minimum spanning tree and that of an optimal solution can be as large as the number of non-multicast nodes <ref> [46] </ref>. In our case, the costs of pruned MST solutions were rarely worse than twice that of the best solution found, but were often significantly worse than those produced by shortest path heuristics. Figure 4.14 displays the complete cumulative distribution for the pruned minimum spanning tree algorithm. <p> This is because of the use of distance graphs in EBA. A Steiner trees produced by EBA resembles a merged shortest path tree when translated back to its real-world equivalent and we know merged shortest-path trees to be sub-optimal <ref> [46] </ref>. This disadvantage is exaggerated because EBA requires internal, non-member nodes to have degree greater than two. EBA's competitiveness distribution becomes superior to that of GREEDY for competitiveness greater than 1.05 because the former the tree when additions or deletions violate its constraints. CPU seconds. <p> SPATH is described here both because of its relevance to heuristic SCTF described below and its low run-time bound. No heuristic that computes shortest path distance can have a lower run-time bound. However, we know its average-case behavior to be poor <ref> [37, 38, 46] </ref>, as demonstrated by heuristic variant SCTF-1's average-case behavior shown in Section 7.3. 7.1.2 Directed shortest path heuristic (SPH) Next we consider SPH. By choosing directed, shortest paths, we can easily extend SPH to directed networks. The competitiveness bound for this algorithm is O (z) [47].
Reference: [47] <author> S. Voss. </author> <title> "Worst-case performance of some heuristics for Steiner's problem in direct graphs," </title> <journal> Information Processing Letters, </journal> <volume> vol. 48, no. 2, </volume> <pages> pp. 99-105, </pages> <year> 1993. </year>
Reference-contexts: Given the shortest path between the source and every multicast member, the merged shortest path heuristic combines these paths into one directed tree rooted at the source. Voss gives a tight bound for competitiveness of O (z) for SPATH <ref> [47] </ref>. The intuition for this bound is that the distance from the root to any member of the multicast group is bounded by the cost of the optimal tree. Thus, for z members, SPATH produces a solution no worse than z times that of the optimal tree. <p> By choosing directed, shortest paths, we can easily extend SPH to directed networks. The competitiveness bound for this algorithm is O (z) <ref> [47] </ref>. The intuition for Voss' proof is similar to that of SPATH. The distance from the root to a member is again bounded by the cost of the optimal tree. Thus for z members, the cost of SPH's tree is bounded by z times the cost of the optimal tree. <p> Return to Step 3. 148 7.1.7 Pruned directed minimum spanning tree heuristic (PMST) We next consider heuristic PMST. This heuristic can be extended to directed networks by using the directed minimum spanning tree algorithm described above. We know that this heuristic has no finite bound for its competitiveness <ref> [47] </ref>. The intuition here is that the directed minimum spanning tree may eliminate good, lower cost edges from consideration that might considerably lower the cost of the resulting tree. PMST does, however, have a finite run-time bound of O (n 2 ).
Reference: [48] <author> B. Waxman. </author> <title> "Routing of multipoint connections," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 6, no. 9, </volume> <pages> pp. 1617-1622, </pages> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman <ref> [48] </ref> and has received little attention since [22, 26, 49]. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness. We derive analytical bounds on the competitiveness of the new heuristic. <p> In his original paper on the on-line multicast problem (referred to as the dynamic multipoint problem), Waxman divides on-line heuristics into two types: those that allow rearrangement of the tree and those that do not <ref> [48] </ref>. In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type [22, 48]. We summarize both heuristics below for the reader's convenience. 6.1.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [22, 48] perturbs the existing tree as little as possible. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [22, 48] </ref>. We summarize both heuristics below for the reader's convenience. 6.1.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [22, 48] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [22, 48] </ref>. We summarize both heuristics below for the reader's convenience. 6.1.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [22, 48] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. <p> Each heuristic received 100 requests to add or delete a multicast member for each test network. The probability of an add request is related to N t , the number of nodes in the tree, by the function <ref> [48] </ref>: fl (200 N t ) : The value of fl determines the equilibrium point at which the probability of an add or delete is equally likely. In our simulations fl was set to 0:3, the fraction of multicast members.
Reference: [49] <author> J. Westbrook and D. Yan. </author> <title> "Greedy algorithms for the on-line Steiner tree and generalized Steiner problems," in Algorithms and data structures. </title> <booktitle> Third Workshop, WADS '93., </booktitle> <address> Montreal, Quebec, Canada, </address> <month> Aug. </month> <year> 1993, </year> <pages> pp. 621-633. </pages>
Reference-contexts: The problem of updating the multicast tree after each addition and deletion is known as the on-line multicast problem in networks. This chapter focuses on its Steiner equivalent, the on-line Steiner problem in networks <ref> [49] </ref>. <p> We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman [48] and has received little attention since <ref> [22, 26, 49] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness. We derive analytical bounds on the competitiveness of the new heuristic. <p> These bounds are shown in Figure 6.1. Westbrook <ref> [49] </ref> provides a tighter upper bound for heuristic GREEDY when only add requests are honored. This upper bound is 103 add requests.
Reference: [50] <author> P. Winter. </author> <title> "Steiner problem in networks: a survey," </title> <journal> Networks, </journal> <volume> vol. 17, no. 2, </volume> <pages> pp. 129-167, </pages> <year> 1987. </year>
Reference-contexts: Several approaches to establishing multicast trees in networks exist. These include formulating the problem as a network flow problem [1], as a Lagrangean relaxation problem [35], as an integer programming problem [36], as a minimum set cover problem [2], and as the NP-complete Steiner tree problem (SPN) in networks <ref> [7, 8, 9, 20, 50] </ref>. While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. <p> While these approaches may produce good, even optimal multicast trees, they often involve substantial computational effort. For example, two popular Steiner tree algorithms, the spanning 2 tree enumeration algorithm and the dynamic programming algorithm <ref> [50] </ref>, have algorithmic complexity of O (z 2 2 (nz) + n 3 ) and O (n3 z + n 2 2 z + n 3 ), respectively, where n is the number of nodes in the graph and z the number of multicast group members. <p> Steiner tree heuristics, in contrast, are relatively inexpensive and produce very good solutions. For this reason, we focus on Steiner heuristics. A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere <ref> [9, 20, 27, 40, 38, 46, 50] </ref>. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution [50]. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here. <p> A number of good, inexpensive heuristics exist for the SPN and have been reviewed extensively elsewhere [9, 20, 27, 40, 38, 46, 50]. Some have been shown through analysis to produce solutions whose cost is no worse than twice that of an optimal solution <ref> [50] </ref>. However, relatively little effort has been made to develop Steiner heuristics that satisfy the constraints considered here. We define the unconstrained Steiner problem in networks as follows. <p> Table 2.1 summarizes known results on the asymptotic time-complexities of these algorithms, together with the known upper bounds on the ratio of the competitiveness produced to that of an optimal solution. SPH-Z [38] A29 [46] ADH [38] Naive (Section 2.4) PDH Local Steinalization [11] Contraction <ref> [50] </ref> Set Cover [2] Dual Ascent [51] 12 Heuristic Time Complexity Solution Bound SPATH O (n 2 ) z PMST O (n 2 ) s KMB O (n 3 ) 2 Naive O (zn 2 ) z SPH O (zn 2 ) 2 K-SPH O (zn 2 ) 2 Dual Ascent <p> Competitiveness is used here as defined in Section 1.1.2. Many Steiner heuristics have been proposed in the literature <ref> [20, 38, 46, 50] </ref>. In this section, we first describe eleven promising heuristics for the Steiner problem in networks as follows. 2.1 Merged Shortest Paths Heuristic (SPATH) We start with a popular Steiner heuristic known as the merged shortest paths heuristic (SPATH). <p> No heuristic which computes shortest path distance can have a lower run-time bound. However, we know its average case behavior to be poor [38, 46]. 2.2 Pruned minimum spanning tree heuristic (PMST) Another popular Steiner heuristic is the pruned minimum spanning tree heuristic (PMST) <ref> [50] </ref>. This heuristic starts by finding a minimum spanning tree (MST) for the original graph using a minimum spanning tree algorithm. The resulting directed spanning tree is pruned of all non-member leaves until none remains. The bound for this heuristic's competitiveness is s [46]. <p> Let U be a minimum spanning tree of G 0 . (b) Repeatedly prune leaves of U that are not in Z. SPH's competitiveness bound is known to be 2 and its run-time bound is O (zn 2 ) <ref> [50] </ref>. 2.6 Heuristic SPH-Z This variant of SPH applies the basic SPH algorithm described in Section 2.5 once for each possible choice of the starting Z-node, returning the best solution found. SPH-Z shares SPH's competitiveness bound of 2. <p> If F is disconnected, go to step 2. 4. Improve the solution by constructing a minimum spanning tree of the subgraph induced by F 's vertices in G and pruning its leaves belonging to S. Heuristic K-SPH's competitiveness bound is also 2 <ref> [50] </ref>. Its run-time bound is dominated by shortest path calculations between members, O (zn 2 ). 2.8 Heuristic ADH The average distance heuristic (ADH) [38] is a generalization of K-SPH. Like K-SPH, the algorithm starts with the forest of multicast group member nodes. <p> Because of its complexity and because other, simpler heuristics produced good solutions, we elected to leave this heuristic out of our evaluation. We are aware of no published competitiveness or run-time bounds for this heuristic. 2.12 Contraction Heuristic The Contraction heuristic <ref> [50] </ref> recursively collapses neighborhood classes of multicast nodes into a single multicast super-node. A neighborhood of a node i is defined to be the nodes of G that lie within a given distance r from i. <p> The modifications reduce the size of the initial graph, reducing subsequent heuristic run-time. Our empirical evidence suggests that on sparse networks even simple graph reductions may reduce their size as much as 15%. Graph reductions have been extensively reviewed elsewhere <ref> [15, 16, 50] </ref>. A short list of such reductions follows. 1. S degree 1. A non-member node that is a leaf of graph G cannot be a part of the solution and may be deleted. <p> We restricted ourselves to graph reductions S degree 1, S degree 2, and Z degree 1 because these were of reasonable running time and could be applied to the degree-constrained case. We had to discard many other graph reductions <ref> [15, 16, 50] </ref> because they eliminated nodes and edges needed in the degree-constrained case. For example, some graph reductions identify shortest paths between multicast group members as solution edges, eliminating longer paths. <p> Second, the run time of heuristics also improves. Our results indicate an improvement of 10-20% in heuristic run-time for many cases. This fits the 17-20% improvement predicted using the time complexity for heuristics ADH, SPH and SPH-Z <ref> [50] </ref>. 3.4 Concluding Remarks In this chapter we studied the degree-constrained multicast tree problem as applied to point-to-point networks and evaluated the effectiveness of several heuristic algorithms based on modifications of algorithms for the unconstrained Steiner-tree problem. <p> Thus the competitiveness of a multicast tree decreases with the size of the multicast group. In comparison, the equivalent theoretical upper bound for the shortest path heuristic (SPH) for the Steiner tree problem is 2 (1 1 z ) <ref> [50] </ref>, where z is the size of the multicast group. Our empirical evidence suggests that pruned MST heuristics often produce solutions of inferior quality as compared to those produced by shortest path Steiner heuristics. In this chapter, we present two distributed algorithms for the Steiner problem in networks. <p> This result is 69 70 spanning tree heuristic. consistent with the known theoretical upper bounds on the heuristics. It has been shown that the cost of a solution produced by either SPH or K-SPH is within twice the cost of an optimal solution <ref> [50] </ref>. In contrast, the ratio between the cost of a solution produced by pruning a minimum spanning tree and that of an optimal solution can be as large as the number of non-multicast nodes [46]. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (K-SPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [38, 50] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation as seen in Chapter 4. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations in Chapters 3 and 4.
Reference: [51] <author> R. Wong. </author> <title> "A dual ascent approach for Steiner tree problems on a directed graph," </title> <journal> Mathematical Programming, </journal> <volume> vol. 28, </volume> <pages> pp. 271-287, </pages> <year> 1984. </year>
Reference-contexts: SPH-Z [38] A29 [46] ADH [38] Naive (Section 2.4) PDH Local Steinalization [11] Contraction [50] Set Cover [2] Dual Ascent <ref> [51] </ref> 12 Heuristic Time Complexity Solution Bound SPATH O (n 2 ) z PMST O (n 2 ) s KMB O (n 3 ) 2 Naive O (zn 2 ) z SPH O (zn 2 ) 2 K-SPH O (zn 2 ) 2 Dual Ascent | | Set Cover | | <p> If F is disconnected, go to step 2. 4. Improve the solution as discussed in step 4 of the SPH heuristic. Heuristic ADH shares its competitiveness and run-time bounds with K-SPH. 20 2.9 Heuristic Dual Ascent Wong <ref> [51] </ref> describes an exact solution and a heuristic to the SPN. The Dual Ascent heuristic finds a solution to the SPN in five steps: 1. <p> The heuristics compared are the shortest path heuristic (SPH) [38], heuristic Naive, the selective closest terminal first heuristic (SCTF) [37], the Kruskal-based shortest path heuristic (K-SPH) [38], heuristic Dual Ascent (DA) <ref> [51] </ref>, the pruned minimum spanning tree heuristic (PMST)[50], and a heuristic proposed by Kou, Markowsky, and Berman (KMB) [31]. The undirected versions of all but one heuristic, heuristic SCTF, are described in Chapter 2. Formally, the directed Steiner problem in networks as used in this chapter is defined as follows. <p> The directed minimum spanning tree algorithm we use in our simulations was proposed by Chu, Liu and Edmonds <ref> [51] </ref>. This algorithm for a directed graph G is described as follows. 1. Initialize matrix D with the edge weights of G. 8 (i; j) 2 E; D i;j = c i;j 2. Create auxiliary graph A = (V; ;). 3. Find root component R in A.
Reference: [52] <author> W. De Zhong, Y. Onozato, and J. Kaniyil. </author> <title> "A copy network with shared buffers for large-scale multicast ATM switching," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, no. 2, </volume> <pages> pp. 157-165, </pages> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: The characteristic we consider here is the ability to support multicasting. Some switches may not support multicasting at all; others may be limited in the number of multicast copies they can reasonably make <ref> [52] </ref>. A switch with no multicast capability would have a degree-constraint of two, while a switch with a finite multicast copy capability would have an integer degree-constraint greater than two as described below.
References-found: 52

