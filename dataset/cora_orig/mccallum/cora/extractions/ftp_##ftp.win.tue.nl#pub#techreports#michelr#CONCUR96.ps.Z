URL: ftp://ftp.win.tue.nl/pub/techreports/michelr/CONCUR96.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/sjouke/publications.html
Root-URL: http://www.win.tue.nl
Email: sjouke@win.tue.nl michelr@win.tue.nl  
Title: Refinement in Interworkings  
Author: S. Mauw and M.A. Reniers 
Address: Technology, P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands.  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of  
Abstract: Interworkings is a graphical language for displaying the interaction between system components. In this paper we give a formal semantics for Interworkings based on process algebra. A notion of refinement on Interworkings will be defined. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Global Renaming Operators in Concrete Process Algebra. </title> <journal> Information and Computation, </journal> <volume> 78(3) </volume> <pages> 205-245, </pages> <year> 1988. </year>
Reference-contexts: Let f : EID ,! EID be a partial function, then the renaming operator ae f related to f is defined by the axioms in Table 10. This renaming operator resembles the renaming operator ae f from <ref> [1] </ref>. Note that also the entity component of an entity-labeled process is renamed with respect to the mapping f . Table 10.
Reference: 2. <author> J.C.M. Baeten and C. Verhoef. </author> <title> Concrete Process Algebra. </title> <editor> In S. Abramsky, D.M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, volume IV: Semantic Modelling, </booktitle> <pages> pages 149-268. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Finally, there existed different interpretations of the meaning of even simple Interwork-ings. In order to solve above mentioned problems, a tool set was developed [10] and a formal semantics was proposed [9]. The semantics are given via a translation into process algebra <ref> [4, 3, 2] </ref>. The proposed semantics does not consider the notion of refinement between Interworkings. Furthermore, it has some minor shortcomings. The purpose of this paper is to extend and improve upon the semantics treated in [9] such that refinement can be defined. <p> The tools also support the refinement of Interworkings. This notion will be explained in Sect. 4. 3 Process Algebra for Interworkings 3.1 Basic Process Algebra with Deadlock and Empty Process We will give a brief introduction to the process algebra BPA ffi" (A) <ref> [2, 3] </ref>. This process algebra will be our starting point towards the more complex algebras which are introduced in the following sections. The parameter A of the process algebra represents the set of atomic actions. <p> For a formal definition of term deduction systems we refer to <ref> [2] </ref>. Definition 1 (Bisimulation). <p> Furthermore, IW " is a sound and complete axiomatization of bisimulation equivalence on closed IW " terms. In [8] these results are proven in more detail. These proofs are based on the meta-theory presented in <ref> [2, 12] </ref>. The Interworking-merge. Now that we have given the axioms and structured operational semantics of the E-Interworking merge we will define the Interworking-merge operator.
Reference: 3. <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1990. </year>
Reference-contexts: Finally, there existed different interpretations of the meaning of even simple Interwork-ings. In order to solve above mentioned problems, a tool set was developed [10] and a formal semantics was proposed [9]. The semantics are given via a translation into process algebra <ref> [4, 3, 2] </ref>. The proposed semantics does not consider the notion of refinement between Interworkings. Furthermore, it has some minor shortcomings. The purpose of this paper is to extend and improve upon the semantics treated in [9] such that refinement can be defined. <p> The tools also support the refinement of Interworkings. This notion will be explained in Sect. 4. 3 Process Algebra for Interworkings 3.1 Basic Process Algebra with Deadlock and Empty Process We will give a brief introduction to the process algebra BPA ffi" (A) <ref> [2, 3] </ref>. This process algebra will be our starting point towards the more complex algebras which are introduced in the following sections. The parameter A of the process algebra represents the set of atomic actions. <p> The closed BPA ffi" (A) terms x and y are bisimilar, notation x $ y, if and only if there exists a bisimulation relation R relating them. Finally, we would like to mention the following well-known result from literature, e.g. <ref> [3] </ref>. The process algebra BPA ffi" (A) is a sound and complete axiomatization of bisimulation equivalence on closed BPA ffi" (A) terms.
Reference: 4. <author> J.A. Bergstra and J.W. Klop. </author> <title> Process Algebra for Synchronous Communication. </title> <journal> Information & Control, </journal> 60(1/3):109-137, 1984. 
Reference-contexts: Finally, there existed different interpretations of the meaning of even simple Interwork-ings. In order to solve above mentioned problems, a tool set was developed [10] and a formal semantics was proposed [9]. The semantics are given via a translation into process algebra <ref> [4, 3, 2] </ref>. The proposed semantics does not consider the notion of refinement between Interworkings. Furthermore, it has some minor shortcomings. The purpose of this paper is to extend and improve upon the semantics treated in [9] such that refinement can be defined.
Reference: 5. <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.120: Message Sequence Chart (MSC). </title> <address> ITU-TS, Geneva, </address> <year> 1994. </year>
Reference-contexts: The Interworking language is a member of a large class of similar graphical notations, most of which are only informally defined, such as Signal Sequence Charts, Use Cases, Information Flow Diagrams, Message Flow and Arrow Diagrams. Interworkings are similar to Message Sequence Charts <ref> [5] </ref>, which are standardized by the International Telecommunication Union (ITU). The main difference is that Interworkings describe synchronous communication, whereas Message Sequence Charts describe asynchronous communication. The semantics of MSC as described in [7, 6] is also very similar to the semantics of IW. This paper is organized as follows.
Reference: 6. <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.120 Annex B: Algebraic semantics of Message Sequence Charts. </title> <address> ITU-TS, Geneva, </address> <year> 1995. </year>
Reference-contexts: Interworkings are similar to Message Sequence Charts [5], which are standardized by the International Telecommunication Union (ITU). The main difference is that Interworkings describe synchronous communication, whereas Message Sequence Charts describe asynchronous communication. The semantics of MSC as described in <ref> [7, 6] </ref> is also very similar to the semantics of IW. This paper is organized as follows. In Sect. 2 we give a short introduction to the Interworking language and the Interworking operators. Section 3 contains a formal definition of the Interworking operators and several properties.
Reference: 7. <author> S. Mauw and M.A. Reniers. </author> <title> An Algebraic Semantics of Basic Message Sequence Charts. </title> <journal> The Computer Journal, </journal> <volume> 37(4) </volume> <pages> 269-277, </pages> <year> 1994. </year>
Reference-contexts: Interworkings are similar to Message Sequence Charts [5], which are standardized by the International Telecommunication Union (ITU). The main difference is that Interworkings describe synchronous communication, whereas Message Sequence Charts describe asynchronous communication. The semantics of MSC as described in <ref> [7, 6] </ref> is also very similar to the semantics of IW. This paper is organized as follows. In Sect. 2 we give a short introduction to the Interworking language and the Interworking operators. Section 3 contains a formal definition of the Interworking operators and several properties.
Reference: 8. <author> S. Mauw and M.A. Reniers. </author> <title> Empty Interworkings and Refinement Semantics of Interworkings Revised. </title> <institution> Computing science report 95-12, Department of Computing Science, Eindhoven University of Technology, </institution> <year> 1995. </year>
Reference-contexts: This paper is organized as follows. In Sect. 2 we give a short introduction to the Interworking language and the Interworking operators. Section 3 contains a formal definition of the Interworking operators and several properties. Complete proofs can be found in <ref> [8] </ref>. The Interworking refinement is defined in Sect. 4. Acknowledgements. We would like to thank Thijs Winter and Mark van Wijk for cooperating on a preliminary, although never published, version of Inter-workings with refinement. <p> Furthermore, IW " is a sound and complete axiomatization of bisimulation equivalence on closed IW " terms. In <ref> [8] </ref> these results are proven in more detail. These proofs are based on the meta-theory presented in [2, 12]. The Interworking-merge. Now that we have given the axioms and structured operational semantics of the E-Interworking merge we will define the Interworking-merge operator. <p> Since IW " is a complete axiomatization of bisimulation equivalence on closed IW " terms, we have x = y, and hence hx; E 1 i = hy; E 2 i. ut The proofs of the following properties can be found in <ref> [8] </ref>. The Interworking-sequencing is commutative under the assumption that the active entities of the operands are disjoint. Furthermore, it is associative. The Interworking-merge is both commutative and associative. The Interworking-merge as defined in [9] did not have the associativity property. <p> The reformulation of the semantics has the following benefits. First, it is now possible to express an empty Interworking. Its semantics is simply the empty process. Next, by extending the processes to entity-labeled processes, the Interworking-merge became an associative operator. Further, we have solved an anomaly described in <ref> [8] </ref>. We will explain this in short and refer to [8] for an example. Consider Interworkings A and B, where B is an exact copy of A with the difference that B has one extra entity e without any behaviour. <p> First, it is now possible to express an empty Interworking. Its semantics is simply the empty process. Next, by extending the processes to entity-labeled processes, the Interworking-merge became an associative operator. Further, we have solved an anomaly described in <ref> [8] </ref>. We will explain this in short and refer to [8] for an example. Consider Interworkings A and B, where B is an exact copy of A with the difference that B has one extra entity e without any behaviour. In the old semantics there was no distinction between A and B.
Reference: 9. <author> S. Mauw, M. van Wijk, and T. Winter. </author> <title> A Formal Semantics of Synchronous Inter-workings. </title> <editor> In O. Faergemand and A. Sarma, editors, </editor> <title> SDL'93 Using Objects, </title> <booktitle> Proc. Sixth SDL Forum, </booktitle> <pages> pages 167-178, </pages> <address> Darmstadt, 1993. </address> <publisher> Elsevier, Amsterdam. </publisher>
Reference-contexts: Thus, diagrams may be a refinement of other diagrams. Finally, there existed different interpretations of the meaning of even simple Interwork-ings. In order to solve above mentioned problems, a tool set was developed [10] and a formal semantics was proposed <ref> [9] </ref>. The semantics are given via a translation into process algebra [4, 3, 2]. The proposed semantics does not consider the notion of refinement between Interworkings. Furthermore, it has some minor shortcomings. The purpose of this paper is to extend and improve upon the semantics treated in [9] such that refinement <p> semantics was proposed <ref> [9] </ref>. The semantics are given via a translation into process algebra [4, 3, 2]. The proposed semantics does not consider the notion of refinement between Interworkings. Furthermore, it has some minor shortcomings. The purpose of this paper is to extend and improve upon the semantics treated in [9] such that refinement can be defined. Thereto, we will extend the process algebra used and the bisimulation model. We will prove soundness and completeness of our theory and derive some useful properties. <p> The Interworking-sequencing operator is similar to the weak sequential composition operator from [11]. The axiomatization of ffi iw is basically the one presented in <ref> [9] </ref>, but extended with axioms for the empty process (see Table 4). We use the two auxiliary operators Lffi iw and Rffi iw . <p> The E-Interworking Merge. The axiomatization of the S-Interworking merge as presented in <ref> [9] </ref> uses the auxiliary operators left S-Interworking merge k S and synchronization Interworking-merge j S iw with S a set of atomic actions. We Table 5. <p> For the Interworking-merge operator it is necessary to determine the common entities of the operands. The entities of an operand cannot be obtained from the process term representing it (as was done in <ref> [9] </ref>), since empty entities are not represented in the process term. Therefore, we label every process term by a set of entity names over EID. For an Interworking x, this set represents the entities of the Interworking (including the empty entities). <p> Such a tuple hx; Ei will be called an entity-labeled process. On entity-labeled processes we define the operators Interworking-sequencing and Interworking-merge. The set of all entity-labeled processes is called LP. The definition of the Interworking-sequencing on entity-labeled processes is straightforward. As was done in <ref> [9] </ref> the Interworking-merge is expressed in terms of the E-Interworking merge operator and the common entities of the operands. Technically speaking, we can axiomatize the Interworking-merge without using the E-Interworking merge. But, to stay as close as possible to the existing axiomatization of the Interworking-merge, we use the E-Interworking merge. <p> The Interworking-sequencing is commutative under the assumption that the active entities of the operands are disjoint. Furthermore, it is associative. The Interworking-merge is both commutative and associative. The Interworking-merge as defined in <ref> [9] </ref> did not have the associativity property. This difference is a direct consequence of our decision to maintain the entities of an Interworking statically. Proposition 10 (Commutativity of ffi iw and k iw ).
Reference: 10. <author> S. Mauw and T. Winter. </author> <title> A Prototype Toolset for Interworkings. </title> <journal> Philips Telecommunication Review, </journal> <volume> 51(3) </volume> <pages> 41-45, </pages> <year> 1993. </year>
Reference-contexts: Thus, diagrams may be a refinement of other diagrams. Finally, there existed different interpretations of the meaning of even simple Interwork-ings. In order to solve above mentioned problems, a tool set was developed <ref> [10] </ref> and a formal semantics was proposed [9]. The semantics are given via a translation into process algebra [4, 3, 2]. The proposed semantics does not consider the notion of refinement between Interworkings. Furthermore, it has some minor shortcomings. <p> It indicates that in the description of a part of the system assumptions are made about another part of the system, which are not met. Among other things, the tool set described in <ref> [10] </ref> can be used to compose Interworkings both horizontally and vertically. It will report all inconsistencies with respect to horizontal composition. The next section contains a formal treat-ment of Interworking-sequencing and Interworking-merge operators. The tools also support the refinement of Interworkings.
Reference: 11. <author> A. Rensink and H. Wehrheim. </author> <title> Weak Sequential Composition in Process Algebras. </title> <editor> In B. Jonsson and J. Parrow, editors, CONCUR'94: </editor> <booktitle> Concurrency Theory, volume 836 of Lecture Notes in Computer Science, </booktitle> <pages> pages 226-241. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The Interworking-sequencing operator is similar to the weak sequential composition operator from <ref> [11] </ref>. The axiomatization of ffi iw is basically the one presented in [9], but extended with axioms for the empty process (see Table 4). We use the two auxiliary operators Lffi iw and Rffi iw .
Reference: 12. <author> C. Verhoef. </author> <title> A General Conservative Extension Theorem in Process Algebra. </title> <editor> In E.-R. Olderog, editor, </editor> <booktitle> Programming Concepts, Methods and Calculi (PROCOMET '94), volume 56 of IFIP Transactions A, </booktitle> <pages> pages 149-168. </pages> <publisher> North-Holland, </publisher> <year> 1994. </year>
Reference-contexts: Furthermore, IW " is a sound and complete axiomatization of bisimulation equivalence on closed IW " terms. In [8] these results are proven in more detail. These proofs are based on the meta-theory presented in <ref> [2, 12] </ref>. The Interworking-merge. Now that we have given the axioms and structured operational semantics of the E-Interworking merge we will define the Interworking-merge operator. <p> For both axioms relate the left-hand side to the right-hand side and additionally relate each term to itself. ut Theorem 6 (Conservativity). The process algebra IWE " is a conservative extension of the process algebra IW " . Proof. The proof of this theorem uses the approach of <ref> [12] </ref>. The conservativity follows from the following observations: 1. bisimulation is definable in terms of predicate and relation symbols only, 2. IW " is a complete axiomatization of bisimulation on closed IW " terms, 3.
Reference: 13. <author> J.L.M. Vrancken. </author> <title> Studies in Process Algebra, Algebraic Specifications and Parallelism. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1991. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: all internal actions with respect to the entities from E, notation Int (E), is defined as follows: Int (E) = fc (i; i; m) j i 2 EID; m 2 M IDg (10) Let I be a set of atomic actions, then we can define the operator " I (see <ref> [13] </ref>) that renames atomic actions from I into " as in Table 11. Table 11.
References-found: 13

