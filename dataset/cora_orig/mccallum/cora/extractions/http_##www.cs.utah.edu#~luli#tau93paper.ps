URL: http://www.cs.utah.edu/~luli/tau93paper.ps
Refering-URL: http://www.cs.utah.edu/~luli/tau93.html
Root-URL: 
Email: (ganesh@cs.utah.edu)  (luli@cs.utah.edu)  
Title: TOWARDS AMALGAMATING THE SYNCHRONOUS AND ASYNCHRONOUS STYLES  
Author: GANESH GOPALAKRISHNAN L ULI JOSEPHSON 
Keyword: Asynchronous/Self-timed Systems, High Level Synthesis, Mixed Synchronous/Asynchronous Design, Q-flops, Metastability  
Address: Salt Lake City, Utah 84112  
Affiliation: Department of Computer Science University of Utah  
Abstract: The verdict is still out on whether asynchronous circuits are "really better" than synchronous circuits. Realizing that asynchronous and synchronous design represent two extremes of a continuum of design styles, we would like to evolve a design methodology in which the best features of these two styles are amalgamated. This amalgamation makes the constituent synchronous sub-systems better able to deal with multi-cycle operations, operations with data-dependent timings, and asynchronous input/output (without the fear of failure due to metastability that lasts too long). It also makes the constituent asynchronous sub-systems better able to incorporate established data path designs from the synchronous world and to use off-the-shelf synchronous parts. Our ongoing efforts in this regard are based on stretchable clocks realized using Q-flops [1]. We argue that this scheme offers more advantages than related schemes for mixed-style design, most of which are based on pausable clocks ("escapement organization" [2]). After presenting the details of our proposed scheme, we discuss an example showing the synthesis of a mixed-style circuit using our asynchronous high-level synthesis tool, SHILPA [3]. We also include some test results for our Q-flop circuit implementation. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Fred U. Rosenberger, Charles E. Molnar, Thomas J. Chaney, and Ting-Pein Fang. Q-modules: </author> <title> Internally clocked delay-insensitive modules. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(9) </volume> <pages> 1005-1018, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: However, we would like to point out the following distinguishing features of recent asynchronous system work. The asynchronous design community has recently developed several formally based asynchronous circuit design methods. and has extensively researched several kinds of timing assumptions ranging from delay insensitive signaling <ref> [1, 20] </ref> to timed asynchronous circuits [21], and developed design methodologies centered around them. Many of of these asynchronous design methodologies have been automated (see [22]), for example. Very fast asynchronous state machines can now be automatically designed, and many of them exhibit very low latencies. <p> The synchronous system synthesis tool Olympus [29] uses asynchronous constructs (e.g., rendezvous) and asynchronous design methods (e.g., handshaking), but is otherwise realized using global clocking. Some work [30, 31] focuses on compiling interface circuitry satisfying timing specifications. In <ref> [1] </ref>, a methodology for designing large delay-insensitive systems ("Q-modules") is presented. <p> Our proposal (to be elaborated later) is an extension of the work of <ref> [1] </ref>. 2.1 Approaches Based on Minimizing the Metastable Failure Probability Traditional mixed-style designs are based on synchronizers [32] which sample data using clocks that have no time relationship to the data. This implies a non-zero probability of failure due to metastability. <p> In an implementation of the same protocol using stretchable clocks (the unsynchronous organization as defined by [2], which is the approach we take), a special kind of flip-flop called the Q-flop <ref> [1] </ref> is employed. 5 The circuit would actually go ahead and spin-wait on the acknowledge, but in case the sam-pling flip-flop lands itself into a metastable state, the Q-flop itself delays the occurrence of the next clock edge until the metastable state has been exited. <p> Since Q-flops form the foundation of this technique, we first discuss operation and testing results of one of our Q-flop circuit implementations. Then we present the block diagram for the mixed-design organization. 3.1 Overview of Q-flops A Q-flop <ref> [1] </ref> is a synchronizer that receives a single bit of data din and a signal called qclock (Figure 1 (a)). When an active transition is applied to qclock, it samples din which may possibly be changing. <p> pa and proceed in parallel with pa without having to wait for the multiplication operation to terminate: factpipe [n] &lt;= (n=0) -&gt; senda! -&gt; again?n -&gt; factpipe [n] | (not (n=0)) -&gt; mult!n -&gt; factpipe [n-1] || pa [a] &lt;= mult?n -&gt; pa [n*a] | senda? -&gt; result!a -&gt; pa <ref> [1] </ref> 4.2 An Asynchronous Circuit for factpipe Synthesizing factpipe using SHILPA we get the asynchronous circuit shown in Figure 3. The circuit works as follows. Initially, transition start is applied to the XOR. This triggers module ZERO to test whether n=0.
Reference: 2. <author> Daniel M. Chapiro. </author> <title> Globally-Asynchronous Locally-Synchronous Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> October </month> <year> 1984. </year>
Reference-contexts: Communications chips typically contain a number of loosely coupled subsystems. The systems listed above are "mostly synchronous" in that synchronous techniques are widely used and asynchronous techniques find only limited use. However, several other researchers have proposed schemes to mix the styles on a more equal basis. In <ref> [2] </ref>, mixed synchronous/asynchronous circuits based on stoppable clocks are proposed. Others [26, 1 A sentiment also expressed almost unanimously by the panelists of a recent mini-track on asynchronous design [23]. 4 27] also have presented similar ideas. <p> The uncertain arrival time of the acknowledge in relation to the system clock, as we argued above, invites metastability. In an implementation of the same protocol using stoppable clocks (the escapement organization as defined by <ref> [2] </ref>), after placing the external request, the synchronous system immediately stops its own clock, expecting the next acknowledge signal to re-start its clock. This scheme avoids sampling a changing signal, and hence metastability. <p> This scheme avoids sampling a changing signal, and hence metastability. Note that the decision to stop the clock is taken by the system itself, based solely on its internal state. In an implementation of the same protocol using stretchable clocks (the unsynchronous organization as defined by <ref> [2] </ref>, which is the approach we take), a special kind of flip-flop called the Q-flop [1] is employed. 5 The circuit would actually go ahead and spin-wait on the acknowledge, but in case the sam-pling flip-flop lands itself into a metastable state, the Q-flop itself delays the occurrence of the next <p> Note that with stretchable clocks, an external condition|the arrival of an external signal at an awkward moment with respect to the system clock|is responsible for delaying the occurrence of the next clock pulse. Generally, mixed style designs are organized in a globally asynchronous and locally synchronous (GALS, as <ref> [2] </ref> calls it) manner. The motivation for this organization primarily stems from the way the computational hierarchy builds up. At the fine grained level, most hardware units perform computations that can be captured through straight-line programs, which have largely predictable delays.
Reference: 3. <author> Venkatesh Akella. </author> <title> An Integrated Framework for High-Level Synthesis of Self-timed Circuits. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Utah, </institution> <year> 1992. </year>
Reference-contexts: between qclock and din to be somewhat variable. 8 to generate the system clock. 4 High Level Synthesis of Mixed-Style Circuits In this section, we take an example|the synthesis of a mixed-style pipelined factorial circuit|and show how this circuit can be synthesized by modifying our asynchronous high-level synthesis tool, SHILPA <ref> [3, 41] </ref>. SHILPA is closely related to other tools in this area (e.g., [17, 39, 42, 43]). SHILPA accepts input descriptions in hopCP, a mixed process and functional language tailored for hardware description with distributed shared variables, barrier synchronization, and broadcast communication.
Reference: 4. <author> Michael C. McFarland, Alice C. Parker, and Raul Camposano. </author> <title> The high-level synthesis of digital systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 78(2) </volume> <pages> 301-318, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: 1 Introduction High level synthesis tools hold considerable promise towards facilitating the rapid creation of error-free VLSI designs <ref> [4] </ref>. Most of today's high level synthesis tools are geared towards generating synchronous circuits from HDL descriptions. For many practical reasons [5], it is becoming increasingly difficult to manually build or automatically synthesize large synchronous circuits. As a partial answer to these problems, asynchronous circuits are being actively considered. <p> Although previously suggested uses for these blocks have been within asynchronous contexts, there is no reason that they cannot be used within synchronous contexts. Another possible advantage of stretchable clocks is that it can allow the use of chaining <ref> [4] </ref>. Suppose a few self-timed combinational units with completion detection are cascaded and used in a synchronous system. Under normal data distribution, the chain may finish evaluating before the normally scheduled clock period is over.
Reference: 5. <author> Ivan Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1989. </year> <note> The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: 1 Introduction High level synthesis tools hold considerable promise towards facilitating the rapid creation of error-free VLSI designs [4]. Most of today's high level synthesis tools are geared towards generating synchronous circuits from HDL descriptions. For many practical reasons <ref> [5] </ref>, it is becoming increasingly difficult to manually build or automatically synthesize large synchronous circuits. As a partial answer to these problems, asynchronous circuits are being actively considered. However, it is also possible to argue convincingly about advantages of synchronous circuits over asynchronous circuits. <p> A variety of asynchronous design styles have been proposed. (See [12] and [13], which are recent surveys, <ref> [5] </ref> and [14] which are two widely cited articles, and the papers in [15] and [16], which are recent forums exclusively devoted to asynchronous design.) This variety makes direct comparison between the synchronous methodology and all the asynchronous methodologies difficult. <p> SHILPA also consists of a collection of tools which allow the user to direct the outcome of the synthesis process through interactive commands. SHILPA synthesizes transition style circuits with data bundling <ref> [5] </ref>. Each hopCP description is internally represented through a flow graph (called the hopCP flow graph, or HFG).
Reference: 6. <author> C. A. Mead and L. Conway. </author> <title> An Introduction to VLSI Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1980. </year>
Reference-contexts: One can often find sequential submodules within a synchronous system that do not receive the global clock signal, but are, instead, clocked by the arrival of fresh data on a rhythmic basis (several pass-transistor structures, for example <ref> [6] </ref>). Following [7] and one of the authors' own work [8], synchronous systems can be defined to be a sub-class of asynchronous systems that are operated in the fundamental mode (e.g., the environment waits for the circuit to be stable before it can change the inputs).
Reference: 7. <author> Huub Schols. </author> <title> Delay-insensitive Communication. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1992. </year>
Reference-contexts: One can often find sequential submodules within a synchronous system that do not receive the global clock signal, but are, instead, clocked by the arrival of fresh data on a rhythmic basis (several pass-transistor structures, for example [6]). Following <ref> [7] </ref> and one of the authors' own work [8], synchronous systems can be defined to be a sub-class of asynchronous systems that are operated in the fundamental mode (e.g., the environment waits for the circuit to be stable before it can change the inputs).
Reference: 8. <author> Ganesh Gopalakrishnan. Hop: </author> <title> A formal model for synchronous circuits using communicating fundamental mode symbolic automata. </title> <type> Technical Report UU-CS-92-009, </type> <institution> Dept of Computer Science, University of Utah, </institution> <year> 1992. </year>
Reference-contexts: One can often find sequential submodules within a synchronous system that do not receive the global clock signal, but are, instead, clocked by the arrival of fresh data on a rhythmic basis (several pass-transistor structures, for example [6]). Following [7] and one of the authors' own work <ref> [8] </ref>, synchronous systems can be defined to be a sub-class of asynchronous systems that are operated in the fundamental mode (e.g., the environment waits for the circuit to be stable before it can change the inputs). The synchronous system clock happens to provide the primary excitation to the circuit.
Reference: 9. <author> Mark E. Dean. </author> <title> STRIP: A Self-Timed RISC Processor. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> July </month> <year> 1992. </year> <month> 12 </month>
Reference-contexts: The synchronous system clock is usually regarded to be a periodic signal, with the (fixed) period determined by an external time reference such as a crystal. Again, this is not required. Tracking cells <ref> [9] </ref> can be made to generate the next clock pulse after they detect the completion of the currently scheduled operations. In this case, the period can be variable, and circuit-determined. Thus, design techniques are emerging that deliberately blur the traditional boundaries dividing asynchronous and synchronous design. <p> Since most circuit instances of a circuit type will operate under "normal conditions", they waste a large percentage of their clock period providing this safety margin <ref> [9] </ref>. 1.0.2 Some Attractions of Asynchronous Designs As a partial answer to these problems, asynchronous circuits are being actively considered by several researchers. <p> This organization allows designers to avoid stopping the clock unnecessarily, and also avoids problems due to asynchronously arriving inputs. Tracking cells of the kind that might be used to detect the completion of the operations in the synchronous subsystems have already been experimented with by <ref> [37, 9] </ref> and several other techniques (e.g., dummy cells) have been explored in the literature. This mixed-style design organization extends the Q-module scheme in that it also allows synchronous and asynchronous subsystems to be used together with great flexibility.
Reference: 10. <institution> Information on the DEC Alpha Processor, </institution> <note> FTP-able from DEC; details are obtainable from hudson@tolkin.enet.dec.com. Also, the story "How DEC developed Alpha", IEEE Spectrum, </note> <month> July, </month> <year> 1992, </year> <pages> pages 26-31. </pages>
Reference-contexts: The capacitive loading of the clock driver is very high. Therefore, considerable power is taken to rapidly pump the clock high and low. Moreover, power is dissipated whether the circuit is doing any useful work or not. There is the additional design effort required for low clock-skew routing (e.g., <ref> [10] </ref>), or the complications of special clocking strategies [11] to avoid clock skew. All these are compounded if more than one clock phase has to be distributed globally. In synchronous controller synthesis. datapath modules with data-dependent timings pose particular difficulties.
Reference: 11. <author> Morteza Afghahi and Christer Svensson. </author> <title> Performance of synchronous and asynchronous schemes for VLSI systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(7) </volume> <pages> 858-872, </pages> <year> 1992. </year>
Reference-contexts: Therefore, considerable power is taken to rapidly pump the clock high and low. Moreover, power is dissipated whether the circuit is doing any useful work or not. There is the additional design effort required for low clock-skew routing (e.g., [10]), or the complications of special clocking strategies <ref> [11] </ref> to avoid clock skew. All these are compounded if more than one clock phase has to be distributed globally. In synchronous controller synthesis. datapath modules with data-dependent timings pose particular difficulties.
Reference: 12. <author> John Brzozowski and Carl-Johan Seger. </author> <title> Advances in Asynchronous Circuit Theory: Part I: Gate and Unbounded Intertial Delay Models; and Part II: Bounded Intertial Delay Models, MOS Circuits, Design Techniques. </title> <type> Technical report, </type> <institution> University of Waterloo, </institution> <year> 1990. </year>
Reference-contexts: A variety of asynchronous design styles have been proposed. (See <ref> [12] </ref> and [13], which are recent surveys, [5] and [14] which are two widely cited articles, and the papers in [15] and [16], which are recent forums exclusively devoted to asynchronous design.) This variety makes direct comparison between the synchronous methodology and all the asynchronous methodologies difficult.
Reference: 13. <author> Ganesh Gopalakrishnan and Prabhat Jain. </author> <title> Some recent asynchronous system design methodologies. </title> <type> Technical Report UUCS-TR-90-016, </type> <institution> Dept. of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1990. </year>
Reference-contexts: A variety of asynchronous design styles have been proposed. (See [12] and <ref> [13] </ref>, which are recent surveys, [5] and [14] which are two widely cited articles, and the papers in [15] and [16], which are recent forums exclusively devoted to asynchronous design.) This variety makes direct comparison between the synchronous methodology and all the asynchronous methodologies difficult.
Reference: 14. <author> C. A. Mead and L. Conway. </author> <title> An Introduction to VLSI Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1980. </year> <note> Chapter 7, entitled "System Timing". </note>
Reference-contexts: A variety of asynchronous design styles have been proposed. (See [12] and [13], which are recent surveys, [5] and <ref> [14] </ref> which are two widely cited articles, and the papers in [15] and [16], which are recent forums exclusively devoted to asynchronous design.) This variety makes direct comparison between the synchronous methodology and all the asynchronous methodologies difficult.
Reference: 15. <editor> Articles in the Minitrack "Asynchronous and Self-Timed Circuits and Systems," </editor> <booktitle> of the Computer Architecture Track of the 26th Hawaiian International Conference on System Sciences, </booktitle> <month> January, </month> <year> 1993. </year> <note> (Minitrack Organizers: Ganesh Gopalakrishnan and Erik Brunvand.). </note>
Reference-contexts: A variety of asynchronous design styles have been proposed. (See [12] and [13], which are recent surveys, [5] and [14] which are two widely cited articles, and the papers in <ref> [15] </ref> and [16], which are recent forums exclusively devoted to asynchronous design.) This variety makes direct comparison between the synchronous methodology and all the asynchronous methodologies difficult. We therefore compare aspects of synchronous circuits against common aspects of the various asynchronous design styles.
Reference: 16. <institution> Workshop on "Asynchronous and Self-Timed Systems," University of Manchester, </institution> <month> March </month> <year> 1993. </year> <note> (Organizer: Steve Furber). </note>
Reference-contexts: A variety of asynchronous design styles have been proposed. (See [12] and [13], which are recent surveys, [5] and [14] which are two widely cited articles, and the papers in [15] and <ref> [16] </ref>, which are recent forums exclusively devoted to asynchronous design.) This variety makes direct comparison between the synchronous methodology and all the asynchronous methodologies difficult. We therefore compare aspects of synchronous circuits against common aspects of the various asynchronous design styles.
Reference: 17. <author> Kees van Berkel. </author> <title> Handshake circuits: an intermediary between communicating processes and VLSI. </title> <type> PhD thesis, </type> <year> 1992. </year>
Reference-contexts: The power demands of asynchronous circuits often depend on the amount of useful work being done by the circuit; hence, it is believed that asynchronous circuits will typically consume less power than corresponding synchronous circuits <ref> [17] </ref>. Often, asynchronous circuits are designed to exploit data-dependent operation delays to gain average-case speed-up [18, 19]. The operating rate of an asynchronous circuit is determined by the values of the operating parameters (voltage, temperature, and fabrication variations) specific to the circuit. <p> SHILPA is closely related to other tools in this area (e.g., <ref> [17, 39, 42, 43] </ref>). SHILPA accepts input descriptions in hopCP, a mixed process and functional language tailored for hardware description with distributed shared variables, barrier synchronization, and broadcast communication.
Reference: 18. <author> Ted E.Williams and Mark Horowitz. </author> <title> A zero-overhead self-timed 160ns 54bit cmos divider. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 26(11) </volume> <pages> 1651-1661, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Often, asynchronous circuits are designed to exploit data-dependent operation delays to gain average-case speed-up <ref> [18, 19] </ref>. The operating rate of an asynchronous circuit is determined by the values of the operating parameters (voltage, temperature, and fabrication variations) specific to the circuit. Hence, the circuit tends to run as fast as it can. Asynchronous circuits are very modular.
Reference: 19. <author> Ted E. Williams. </author> <title> Self-Timed Rings and Their Applications to Division. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Often, asynchronous circuits are designed to exploit data-dependent operation delays to gain average-case speed-up <ref> [18, 19] </ref>. The operating rate of an asynchronous circuit is determined by the values of the operating parameters (voltage, temperature, and fabrication variations) specific to the circuit. Hence, the circuit tends to run as fast as it can. Asynchronous circuits are very modular. <p> One of the popular techniques in this direction is the use of ring structures [38]. Others have developed techniques whereby certain iterative computations can be performed in delays determined only by the raw combinational delay. In <ref> [19] </ref>, a divider unit that operates with a delay anywhere between 45nS to 160nS (depending on data) is proposed. Such dividers could be used in traditional synchronous circuits, provided the synchronous circuit controller can accommodate the variable delay and, in fact, exploit it.
Reference: 20. <author> Jan Tijmen Udding. </author> <title> A formal model for defining and classifying delay-insensitive circuits and systems. </title> <journal> Distributed Computing, </journal> (1):197-204, 1986. 
Reference-contexts: However, we would like to point out the following distinguishing features of recent asynchronous system work. The asynchronous design community has recently developed several formally based asynchronous circuit design methods. and has extensively researched several kinds of timing assumptions ranging from delay insensitive signaling <ref> [1, 20] </ref> to timed asynchronous circuits [21], and developed design methodologies centered around them. Many of of these asynchronous design methodologies have been automated (see [22]), for example. Very fast asynchronous state machines can now be automatically designed, and many of them exhibit very low latencies.
Reference: 21. <author> Chris Myers and Teresa H.-Y. Meng. </author> <title> Synthesis of timed asynchronous circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD-92), </booktitle> <pages> pages 279-284, </pages> <year> 1992. </year>
Reference-contexts: The asynchronous design community has recently developed several formally based asynchronous circuit design methods. and has extensively researched several kinds of timing assumptions ranging from delay insensitive signaling [1, 20] to timed asynchronous circuits <ref> [21] </ref>, and developed design methodologies centered around them. Many of of these asynchronous design methodologies have been automated (see [22]), for example. Very fast asynchronous state machines can now be automatically designed, and many of them exhibit very low latencies.
Reference: 22. <author> Bill Coates, Ken Stevens, and Alan Davis. </author> <title> The post office experience. </title> <booktitle> In 26th Hawaiian International Conference on System Sciences, </booktitle> <pages> pages 409-418, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Many of of these asynchronous design methodologies have been automated (see <ref> [22] </ref>), for example. Very fast asynchronous state machines can now be automatically designed, and many of them exhibit very low latencies. <p> When the completion of the external request is of interest, the asynchronous response signal that indicates the completion can be sampled using the Q-flop. Motivations for this design style also are latent in the proposal of "long arcs" in MEAT state machines <ref> [22, 35] </ref>, where the state machine not only processes localized I/O bursts, but also is capable of spawning concurrent computations. Using stretchable clocks also allows us to break away from the strict GALS organization, allowing the designer to set up arbitrary synchronous/asynchronous ensembles.
Reference: 23. <author> Panel Discussion. </author> <title> The future of asynchronous systems. Held during HICSS-26: </title> <booktitle> 26th Annual Hawaiian International Conference on System Sciences, </booktitle> <address> Maui, Hawaii, </address> <month> January 6-8, </month> <year> 1993. </year>
Reference-contexts: Many of of these asynchronous design methodologies have been automated (see [22]), for example. Very fast asynchronous state machines can now be automatically designed, and many of them exhibit very low latencies. A Case for Mixed-Style Designs As pointed out by many researchers <ref> [23, 24] </ref>, however, it is also possible to argue convincingly about some advantages of synchronous circuits over asynchronous circuits. <p> However, several other researchers have proposed schemes to mix the styles on a more equal basis. In [2], mixed synchronous/asynchronous circuits based on stoppable clocks are proposed. Others [26, 1 A sentiment also expressed almost unanimously by the panelists of a recent mini-track on asynchronous design <ref> [23] </ref>. 4 27] also have presented similar ideas. Others have proposed schemes which explicitly hint at mixed-style design without calling them such.
Reference: 24. <author> Panel Discussion. </author> <title> Why do asynchronous systems matter? Held during TAU '92: </title> <booktitle> 1992 Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <address> Princeton, NJ, March 18-20, </address> <year> 1992. </year>
Reference-contexts: Many of of these asynchronous design methodologies have been automated (see [22]), for example. Very fast asynchronous state machines can now be automatically designed, and many of them exhibit very low latencies. A Case for Mixed-Style Designs As pointed out by many researchers <ref> [23, 24] </ref>, however, it is also possible to argue convincingly about some advantages of synchronous circuits over asynchronous circuits.
Reference: 25. <author> Tom Verhoeff. </author> <title> Delay insensitive codes|an introduction. </title> <journal> Distributed Computing, </journal> <volume> 3(1) </volume> <pages> 1-8, </pages> <year> 1988. </year>
Reference-contexts: Increased area can also escalate the cost of the asynchronous chip by reducing its yield. Certain asynchronous design styles can also incur area overheads by encoding data using various delay-insensitive (DI) codes <ref> [25] </ref>, the most popular DI-code being the dual-rail code. Many of the advantages of synchronous circuits over asynchronous circuits stem from the decades of maturation the synchronous methodology has achieved compared to the asynchronous methodologies.
Reference: 26. <author> Cherrice Traver. </author> <title> A testable model for stoppable clock asics. </title> <booktitle> In Proceedings of the Fourth Annual IEEE International ASIC Conference and Exhibit, </booktitle> <pages> pages P6-3.1, </pages> <year> 1991. </year>
Reference-contexts: This view is well supported by asynchronous circuit techniques also. A GALS organization can be realized using stoppable clocks <ref> [26] </ref>. Each synchronous subregion places an external request, stops its own clock and waits for the external world to resurrect it by restarting the clock. Although simple, this method suffers from the drawback that the local system cannot proceed in parallel with the externally placed request.
Reference: 27. <author> Robert F. Sproull and Ivan E. Sutherland. </author> <title> Stoppable clock. </title> <type> Technical Memo 3438, Sutherland, </type> <institution> Sproull and Associates, </institution> <month> Jan. 9, </month> <year> 1986. </year>
Reference: 28. <author> Steven M. Nowick, Kenneth Y. Yun, and David L. Dill. </author> <title> Practical asynchronous controller design. </title> <booktitle> In Proceedings of the International Conference on Computer Design, 1992 (to appear). </booktitle>
Reference-contexts: Others [26, 1 A sentiment also expressed almost unanimously by the panelists of a recent mini-track on asynchronous design [23]. 4 27] also have presented similar ideas. Others have proposed schemes which explicitly hint at mixed-style design without calling them such. The asynchronous automaton model of <ref> [28] </ref> exhibits asynchronous behavior when viewed from outside, but employs a number of synchronous system ideas inside (for example, the next-state function is realized without hazard covers).
Reference: 29. <author> David Ku. </author> <title> Constrained Synthesis and Optimization of Digital Integrated Circuits from Behavioral Specifications. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> June </month> <year> 1991. </year> <month> 13 </month>
Reference-contexts: The asynchronous automaton model of [28] exhibits asynchronous behavior when viewed from outside, but employs a number of synchronous system ideas inside (for example, the next-state function is realized without hazard covers). The synchronous system synthesis tool Olympus <ref> [29] </ref> uses asynchronous constructs (e.g., rendezvous) and asynchronous design methods (e.g., handshaking), but is otherwise realized using global clocking. Some work [30, 31] focuses on compiling interface circuitry satisfying timing specifications. In [1], a methodology for designing large delay-insensitive systems ("Q-modules") is presented.
Reference: 30. <author> Gaetano Boriello. </author> <title> Synthesis of mixed synchronous/asynchronous control logic. </title> <booktitle> In International Sympo--sium on Circuits and Systems, </booktitle> <pages> pages 762-765, </pages> <year> 1989. </year>
Reference-contexts: The synchronous system synthesis tool Olympus [29] uses asynchronous constructs (e.g., rendezvous) and asynchronous design methods (e.g., handshaking), but is otherwise realized using global clocking. Some work <ref> [30, 31] </ref> focuses on compiling interface circuitry satisfying timing specifications. In [1], a methodology for designing large delay-insensitive systems ("Q-modules") is presented.
Reference: 31. <author> P.Vanbekbergen, C. Ykman, M.Sawasaki, b. Lin, and G. Gossens. </author> <title> Tutorial on IMEC's interface compiler. Slides from ACiD-WG/EXACT Workshop on Asynchronous Controllers and Interfacing, </title> <address> Leuven, Belgium, </address> <month> September, </month> <year> 1992. </year>
Reference-contexts: The synchronous system synthesis tool Olympus [29] uses asynchronous constructs (e.g., rendezvous) and asynchronous design methods (e.g., handshaking), but is otherwise realized using global clocking. Some work <ref> [30, 31] </ref> focuses on compiling interface circuitry satisfying timing specifications. In [1], a methodology for designing large delay-insensitive systems ("Q-modules") is presented.
Reference: 32. <author> Lindsay Kleeman and Antonio Cantoni. </author> <title> Metastable behavior in digital systems. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pages 4-19, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Our proposal (to be elaborated later) is an extension of the work of [1]. 2.1 Approaches Based on Minimizing the Metastable Failure Probability Traditional mixed-style designs are based on synchronizers <ref> [32] </ref> which sample data using clocks that have no time relationship to the data. This implies a non-zero probability of failure due to metastability. Typically, synchronous designers implement circuits to provide an "acceptable" level of probability of failure due to metastability [33].
Reference: 33. <author> Bryon I. Moyer. </author> <booktitle> Has the metastability world stabilized? In The Second Annual PLD Design Conference and Exhibit, </booktitle> <address> Santa Clara, </address> <pages> pages 1-5, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: This implies a non-zero probability of failure due to metastability. Typically, synchronous designers implement circuits to provide an "acceptable" level of probability of failure due to metastability <ref> [33] </ref>. However, metastability is easy to induce and observe in the lab [34]. In light of rapidly increasing system sizes, circuit speeds, and numbers of interface signals to be synchronized, the probability failure will increase.
Reference: 34. <author> Armin Liebchen and Ganesh Gopalakrishnan. </author> <title> Dynamic reordering of high latency transactions in time-warp simulation using a modified micropipeline. </title> <booktitle> In International Conference on Computer Design (ICCD), </booktitle> <pages> pages 336-340, </pages> <year> 1992. </year>
Reference-contexts: This implies a non-zero probability of failure due to metastability. Typically, synchronous designers implement circuits to provide an "acceptable" level of probability of failure due to metastability [33]. However, metastability is easy to induce and observe in the lab <ref> [34] </ref>. In light of rapidly increasing system sizes, circuit speeds, and numbers of interface signals to be synchronized, the probability failure will increase.
Reference: 35. <author> Ken Stevens. Meat: </author> <title> The most excellent asynchronous tool. </title> <institution> Software system developed by Ken Stevens of HP Labs (currently at the Department of Computer Science, University of Calgary). </institution>
Reference-contexts: When the completion of the external request is of interest, the asynchronous response signal that indicates the completion can be sampled using the Q-flop. Motivations for this design style also are latent in the proposal of "long arcs" in MEAT state machines <ref> [22, 35] </ref>, where the state machine not only processes localized I/O bursts, but also is capable of spawning concurrent computations. Using stretchable clocks also allows us to break away from the strict GALS organization, allowing the designer to set up arbitrary synchronous/asynchronous ensembles.
Reference: 36. <author> John F. Hurdle, Erik L. Brunvand, and Luli Josephson. </author> <title> Asynchronous VLSI design for neural system implementation. </title> <editor> In Jose Delgado-Frios and Will Moore, editors, </editor> <booktitle> VLSI for Neural Networks and Artificial Intelligence. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <month> September </month> <year> 1992. </year>
Reference-contexts: For example, often a sandwich structure where we have globally coarse-grained asynchronous control outside, medium-grained synchronous control in between, and fine-grained asynchronous control (and even analog/neural computations <ref> [36] </ref>) within, makes perfect sense. The intermediate synchronous organization is attractive if, for example, conventional datapaths (e.g., large cache arrays) prove to be superior than comparable asynchronous circuits. A motivation to employ fine-grained asynchronous circuits as data path elements in standard synchronous designs is the following.
Reference: 37. <author> Mark Santoro. </author> <title> Design and Clocking of VLSI Multipliers. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: For example, consider standard iterative multiplication/division algorithms. Many of these algorithms can be realized using array or tree 6 based combinational circuits. Since laying out full arrays is wasteful, several techniques have been discovered to fold these arrays and reuse them over time <ref> [37] </ref>. Since the latches used in these iterative structures introduce an overhead, several researchers have discovered ways to avoid this overhead. One of the popular techniques in this direction is the use of ring structures [38]. <p> This organization allows designers to avoid stopping the clock unnecessarily, and also avoids problems due to asynchronously arriving inputs. Tracking cells of the kind that might be used to detect the completion of the operations in the synchronous subsystems have already been experimented with by <ref> [37, 9] </ref> and several other techniques (e.g., dummy cells) have been explored in the literature. This mixed-style design organization extends the Q-module scheme in that it also allows synchronous and asynchronous subsystems to be used together with great flexibility.
Reference: 38. <author> Jens Sparso and Jorgen Staunstrup. </author> <title> Design and performance analysis of delay insensitive multi-ring structures. </title> <booktitle> In 26th Hawaiian International Conference on System Sciences, </booktitle> <pages> pages 349-358, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Since the latches used in these iterative structures introduce an overhead, several researchers have discovered ways to avoid this overhead. One of the popular techniques in this direction is the use of ring structures <ref> [38] </ref>. Others have developed techniques whereby certain iterative computations can be performed in delays determined only by the raw combinational delay. In [19], a divider unit that operates with a delay anywhere between 45nS to 160nS (depending on data) is proposed.
Reference: 39. <author> Christian Nielsen and Alain Martin. </author> <title> Design of a delay-insensitive multiply-accumulate unit. </title> <booktitle> In 26th Hawaiian International Conference on System Sciences, </booktitle> <pages> pages 379-388, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Such dividers could be used in traditional synchronous circuits, provided the synchronous circuit controller can accommodate the variable delay and, in fact, exploit it. The circuits that are reported in <ref> [39] </ref> also are of this nature; for instance, a multiplier that multiplies in anywhere from 37nS to (n fi 27 + 37)nS, where n is the size of the multiplier, is reported. <p> SHILPA is closely related to other tools in this area (e.g., <ref> [17, 39, 42, 43] </ref>). SHILPA accepts input descriptions in hopCP, a mixed process and functional language tailored for hardware description with distributed shared variables, barrier synchronization, and broadcast communication.
Reference: 40. <author> Erik Brunvand. Parts-r-us. </author> <title> a chip aparts(s): </title> : :. <type> Technical Report CMU-CS-87-119, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1987. </year>
Reference: 41. <author> Venkatesh Akella and Ganesh Gopalakrishnan. SHILPA: </author> <title> A High-Level Synthesis System for Self-Timed Circuits. </title> <booktitle> In International Conference on Computer-aided Design, </booktitle> <volume> ICCAD 92, </volume> <pages> pages 587-591, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: between qclock and din to be somewhat variable. 8 to generate the system clock. 4 High Level Synthesis of Mixed-Style Circuits In this section, we take an example|the synthesis of a mixed-style pipelined factorial circuit|and show how this circuit can be synthesized by modifying our asynchronous high-level synthesis tool, SHILPA <ref> [3, 41] </ref>. SHILPA is closely related to other tools in this area (e.g., [17, 39, 42, 43]). SHILPA accepts input descriptions in hopCP, a mixed process and functional language tailored for hardware description with distributed shared variables, barrier synchronization, and broadcast communication.
Reference: 42. <author> Alain J. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <editor> In editor C.A.R. Hoare, editor, </editor> <booktitle> UT Year of Programming Institute on Concurrent Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: SHILPA is closely related to other tools in this area (e.g., <ref> [17, 39, 42, 43] </ref>). SHILPA accepts input descriptions in hopCP, a mixed process and functional language tailored for hardware description with distributed shared variables, barrier synchronization, and broadcast communication.
Reference: 43. <author> Erik Brunvand. </author> <title> Translating Concurrent Communicating Programs into Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: SHILPA is closely related to other tools in this area (e.g., <ref> [17, 39, 42, 43] </ref>). SHILPA accepts input descriptions in hopCP, a mixed process and functional language tailored for hardware description with distributed shared variables, barrier synchronization, and broadcast communication.
Reference: 44. <author> Ganesh Gopalakrishnan and Venkatesh Akella. </author> <title> A transformational approach to asynchronous high-level synthesis. </title> <note> To be presented at VLSI'93, </note> <institution> Grenoble, France, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Process fact starts in state fact with suitably initialized values for n and a. It computes the factorial through standard tail-recursion, accumulating the partial products in a. Through program transformations <ref> [44] </ref>, one can rewrite the above description into two parallel processes shown below. Processes factpipe and pa when started in parallel with n holding the desired number and with a initialized to 1 calculates factorial of n.
Reference: 45. <author> Erik Brunvand. </author> <title> The nsr processor. </title> <booktitle> In 26th Hawaiian International Conference on System Sciences, </booktitle> <pages> pages 428-435, </pages> <month> January </month> <year> 1993. </year> <title> 14 transition diagram for controller 15 </title>
Reference-contexts: Our long range plans include several enhancements of our high level synthesis tool SHILPA that will further the work reported here. Other projects underway include (i) the design of a mixed-style FIR filter; and (ii) the attachment of a synchronous co-processor to an asynchronous RISC microprocessor called the "NSR" <ref> [45] </ref>. Both these are being pursued as part of the second author's Masters thesis. Acknowledgements: Helpful discussions with Erik Brunvand, Nick Michell, John Hurdle, and the rest of our ASIC seminar group are gratefully acknowledged.
References-found: 45

