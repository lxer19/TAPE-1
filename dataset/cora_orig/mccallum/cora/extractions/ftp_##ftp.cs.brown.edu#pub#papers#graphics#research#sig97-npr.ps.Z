URL: ftp://ftp.cs.brown.edu/pub/papers/graphics/research/sig97-npr.ps.Z
Refering-URL: http://www.cs.brown.edu/research/graphics/research/npr/home.html
Root-URL: http://www.cs.brown.edu
Title: Real-Time Nonphotorealistic Rendering  
Author: Lee Markosian Michael A. Kowalski Samuel J. Trychin Lubomir D. Bourdev Daniel Goldstein John F. Hughes 
Keyword: CR Categories and Subject Descriptors: I.3.3 [Computer Graphics]: Picture/Image Generation Display algorithms; Additional Key Words: non-photorealistic rendering  
Address: Providence, RI 02912  
Affiliation: Brown University site of the NSF Science and Technology Center for Computer Graphics and Scientific Visualization  
Abstract: Nonphotorealistic rendering (NPR) can help make comprehensible but simple pictures of complicated objects by employing an economy of line. But current nonphotorealistic rendering is primarily a batch process. This paper presents a real-time nonphotorealistic renderer that deliberately trades accuracy and detail for speed. Our renderer uses a method for determining visible lines and surfaces which is a modification of Appel's hidden-line algorithm, with improvements which are based on the topology of singular maps of a surface into the plane. The method we describe for determining visibility has the potential to be used in any NPR system that requires a description of visible lines or surfaces in the scene. The major contribution of this paper is thus to describe a tool which can significantly improve the performance of these systems. We demonstrate the system with several nonphotorealistic rendering styles, all of which operate on complex models at interactive frame rates. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Appel. </author> <title> The notion of quantitative invisibility and the machine rendering of solids. </title> <booktitle> In Proceedings of ACM National Conference, </booktitle> <pages> pp. 387393, </pages> <year> 1967. </year>
Reference-contexts: The key ideas that support this scheme are * rapid (probabilistic) identification of silhouette edges, * using interframe coherence of silhouette edges, and * fast visibility determination using improvements and simplifica tions in Appel's hidden-line algorithm <ref> [1] </ref>. We demonstrate the use of these techniques to support a variety of rendering styles, all of which are produced at interactive rates.
Reference: [2] <editor> J. Blinn. Jim Blinn's Corner, </editor> <volume> chapter 10, </volume> <pages> pp. 91102. </pages> <publisher> Morgan Kauf-mann, </publisher> <year> 1996. </year>
Reference-contexts: The algorithm is applied to the entire mesh of edges in a polyhedral model to determine QI at all points; those with QI = 0 are visible and are drawn. Good descriptions of the basic algorithm can be found in <ref> [5, 2, 18] </ref>. We summarize a few key ideas here. The algorithm first identifies all silhouette edges, because as we traverse the interior of an edge, QI changes only when the edge crosses behind a silhouette.
Reference: [3] <author> D. Dooley and M. Cohen. </author> <title> Automatic illustration of 3d geometric models: Lines. </title> <booktitle> In Proceedings of the 1990 Symposium on Interactive 3D Graphics, </booktitle> <pages> pp. 7782, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline).
Reference: [4] <author> G. Elber and E. Cohen. </author> <title> Hidden curve removal for free form surfaces. </title> <booktitle> In Proceedings of SIGGRAPH '90, </booktitle> <pages> pp. 95104, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Understanding this complicated case better allows us to avoid some unneeded computation. To this end, we first (following <ref> [4] </ref>) redefine QI to be the number of layers of surface (front- and back-facing) obscuring a point. <p> to show that a constant probability of detecting a silhouette is maintained while checking O ( p n) edges, where n is the number of edges in a given refinement of the object. 3 This case is necessary, as shown by figure 1 (c), which contradicts corol lary 5.1.5 of <ref> [4] </ref>. exotic cusp. (c) A border cusp (the two edges meeting at the center of the sheet are border edges). silhouette curves, so testing for changes in QI just at cusp vertices provides a significant savings in computation time. 4 4.3 Avoiding ray tests Next, we show how to avoid some
Reference: [5] <author> J. Foley, A. van Dam, S. Feiner, and J. F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice, chapter 15, </booktitle> <pages> pp. 666667. </pages> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: The algorithm is applied to the entire mesh of edges in a polyhedral model to determine QI at all points; those with QI = 0 are visible and are drawn. Good descriptions of the basic algorithm can be found in <ref> [5, 2, 18] </ref>. We summarize a few key ideas here. The algorithm first identifies all silhouette edges, because as we traverse the interior of an edge, QI changes only when the edge crosses behind a silhouette. <p> In a generic view, QI can also change at a vertex, but only when the vertex lies on a silhouette edge. This fact is characterized by several authors <ref> [18, 5] </ref> as a complication of the algorithm; we'll discuss this further below.
Reference: [6] <author> R. Galimberti and U. Montanari. </author> <title> An algorithm for hidden line elimination. </title> <journal> Communications of the ACM, </journal> <volume> 12(4):206211, </volume> <month> April </month> <year> 1969. </year>
Reference-contexts: (iii) their number is invariant under small changes in viewing direction. 1 Our method may fail for non-generic views, but we have not observed this in practice when computations are performed with double-precison (64 bit) floating point numbers. 3 Appel's Algorithm Appel's hidden-line algorithm, as well as those of Galimberti <ref> [6] </ref> and Loutrel [12], is based on a notion of quantitative invisibility (QI), which counts the number of front-facing polygons between a point of an object and the camera.
Reference: [7] <author> P. Haeberli. </author> <title> Paint by numbers: Abstract image representations. </title> <booktitle> In Proceedings of SIGGRAPH '90, </booktitle> <pages> pp. </pages> <address> 207214, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline).
Reference: [8] <author> H. Hoppe, T. DeRose, T. Duchamp, M. Halstead, H. Jin, J. McDonald, J. Schweitzer, and W. Stuetzle. </author> <title> Piecewise smooth surface reconstruction. </title> <booktitle> Proceedings of SIGGRAPH '94, </booktitle> <pages> pp. 295302, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Finally, we render the strokes using any of the artistic render ing methods described above. 6 Performance We treat our models as subdivision surfaces, which allows us to refine a given mesh so that it approximates a smooth surface with an arbitrary degree of accuracy. (See <ref> [8] </ref> for a description of the type of subdivision surfaces we use). The following tables list performance statistics for our renderer operating on models which have been subdivided to the indicated number of polygons.
Reference: [9] <author> C. Hornung. </author> <title> A method for solving the visibility problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pp. 2633, </pages> <year> 1984. </year>
Reference-contexts: Here, the principle of economy of line supports both the esthetic goals and that of maintaining interactive frame rates. We use an extension of the hidden line algorithm which allows us to derive visibility information across surface regions. This method was described by Hornung <ref> [9] </ref>. We place shading strokes (or particles) in world space (on the surface) rather than define them in screen space. This is the approach used by Meier [13] in her painterly rendering system. One advantage of this approach is that it maintains frame-to-frame coherence.
Reference: [10] <author> J. Lansdown and S. Schofield. </author> <title> Expressive rendering: A review of nonphotorealistic techniques. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 15(3):2937, </volume> <month> May </month> <year> 1995. </year>
Reference-contexts: But graphic designers have long understood that photographs are not always the best choice for presenting visual information. A simplified diagram is often preferred when an image is required to delineate and explain. Lansdown and Schofield <ref> [10] </ref> make this point in the context of a repair manual, asking, How much use is a photograph to mechanics when they already have the real thing in front of them? Strothotte et al. [17] note that architects often trace over computer renderings of their initial designs to create a sketchier <p> In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline).
Reference: [11] <author> W. Leister. </author> <title> Computer generated copper plates. </title> <journal> Computer Graphics Forum, </journal> <volume> 13(1):6977, </volume> <year> 1994. </year>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline).
Reference: [12] <author> P. Loutrel. </author> <title> A solution to the hidden-line problem for computer-drawn polyhedra. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-19(3):205 213, </volume> <month> March </month> <year> 1970. </year>
Reference-contexts: is invariant under small changes in viewing direction. 1 Our method may fail for non-generic views, but we have not observed this in practice when computations are performed with double-precison (64 bit) floating point numbers. 3 Appel's Algorithm Appel's hidden-line algorithm, as well as those of Galimberti [6] and Loutrel <ref> [12] </ref>, is based on a notion of quantitative invisibility (QI), which counts the number of front-facing polygons between a point of an object and the camera. <p> Border edges cause a change of 1 in QI of edges passing behind them. Other edges cause no change in QI of edges passing behind them. 4.5 Implementation details We follow Loutrel's <ref> [12] </ref> approach of projecting the silhouette edges into image space and finding their intersections there. This can be done with a sweep-line algorithm in O (k log k) time, where k is the number of silhouette edges (see e.g. [15]).
Reference: [13] <author> B. Meier. </author> <title> Painterly rendering for animation. </title> <booktitle> In Proceedings of SIG-GRAPH '96, </booktitle> <pages> pp. 477484, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline). <p> This method was described by Hornung [9]. We place shading strokes (or particles) in world space (on the surface) rather than define them in screen space. This is the approach used by Meier <ref> [13] </ref> in her painterly rendering system. One advantage of this approach is that it maintains frame-to-frame coherence. We make the simplifying assumption that lighting comes from a point source located at the camera position. This greatly simplifies the task of computing stroke placement and density to achieve a target tone.
Reference: [14] <author> K. Perlin. </author> <title> An image synthesizer. </title> <booktitle> In Proceedings of SIGGRAPH '85, </booktitle> <pages> pp. 287296, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: An alternative method for computing offsets is to use a spatially-coherent noise function indexed by screen-space location. We use a Perlin noise function <ref> [14] </ref> to define displacements along visible lines. 5 The third method builds a texture-mapped mesh using the polyline as a reference spine. Each texture map represents a single brush-stroke. We repeat the texture along the reference spine, approximately preserving its original aspect ratio.
Reference: [15] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction, chapter 7. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: This can be done with a sweep-line algorithm in O (k log k) time, where k is the number of silhouette edges (see e.g. <ref> [15] </ref>). We found it more convenient to use a spatial subdivision data structure which divides the image space bounding box of the silhouette edges into a grid of cells. Each silhouette edge is scan converted into the grid; only edges which share a cell need be tested for intersection.
Reference: [16] <author> T. Saito and T. Takahashi. </author> <title> Comprehensible rendering of 3d shapes. </title> <booktitle> In Proceedings of SIGGRAPH '90, </booktitle> <pages> pp. </pages> <address> 197206, </address> <month> aug </month> <year> 1990. </year>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline).
Reference: [17] <author> T. Strothotte, B. Preim, A. Raab, J. Schuman, and D. Forsey. </author> <title> How to render frames and influence people. </title> <journal> Computer Graphics Forum, </journal> <volume> 13(3):455466, </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: Lansdown and Schofield [10] make this point in the context of a repair manual, asking, How much use is a photograph to mechanics when they already have the real thing in front of them? Strothotte et al. <ref> [17] </ref> note that architects often trace over computer renderings of their initial designs to create a sketchier look, because they want to avoid giving their clients a false impression of completeness. In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. <p> In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline).
Reference: [18] <author> I. Sutherland, R. Sproull, and R. Schumacker. </author> <title> A characterization of ten hidden-surface algorithms. </title> <journal> Computing Surveys, </journal> <volume> 6(1):155, </volume> <month> March </month> <year> 1974. </year>
Reference-contexts: The algorithm is applied to the entire mesh of edges in a polyhedral model to determine QI at all points; those with QI = 0 are visible and are drawn. Good descriptions of the basic algorithm can be found in <ref> [5, 2, 18] </ref>. We summarize a few key ideas here. The algorithm first identifies all silhouette edges, because as we traverse the interior of an edge, QI changes only when the edge crosses behind a silhouette. <p> In a generic view, QI can also change at a vertex, but only when the vertex lies on a silhouette edge. This fact is characterized by several authors <ref> [18, 5] </ref> as a complication of the algorithm; we'll discuss this further below.
Reference: [19] <author> L. R. Williams. </author> <title> Topological reconstruction of a smooth manifold-solid from its occluding contour. </title> <type> Technical Report 94-04, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA, </address> <year> 1994. </year>
Reference-contexts: But the straightforward approach to finding silhouettes requires an exhaustive search, which conflicts with our goal of achieving interactive frame rates while rendering complex models. 1 This definition is adopted from <ref> [19] </ref>. We therefore compromise, and have developed a randomized algorithm for rapidly detecting silhouette edges. We examine a small fraction of the edges in the model, and if we find a silhouette edge, it is easy (by stepping along adjacent silhouette edges) to trace out the entire silhouette curve.
Reference: [20] <author> G. Winkenbach and D. Salesin. </author> <title> Computer-generated pen-and-ink illustration. </title> <booktitle> In Proceedings of SIGGRAPH '94, </booktitle> <pages> pp. 91100, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline).
Reference: [21] <author> G. Winkenbach and D. Salesin. </author> <title> Rendering parametric surfaces in pen and ink. </title> <booktitle> In Proceedings of SIGGRAPH '96, </booktitle> <pages> pp. 469476, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline). <p> Our test machine is a 200 MHz Sun Ultra TM 2 Model 2200 with Creator 3D graphics. 6 Our method performs particularly well on smooth meshes, since these have fewer cusps and intersecting silhouette edges than irreg ular or bumpy surfaces. In contrast, Winkenbach's <ref> [21] </ref> pen-and-ink rendering system produces decidedly finer images, but takes several minutes per frame to do so. (Over half that time is spent on visibility determination). 5 We thank Paul Haeberli for this rendering method and the source code for implementing it. 6 We use the graphics capabilities for rendering lines <p> The shaded stroke renderings would be further enhanced by the addition of cast shadows, which our visibility algorithm can easily be extended to find. (The technique for computing shadow regions is straightforward, and was used in <ref> [21] </ref>). More generally, we feel that our exploration of rendering styles can be developed much further.
Reference: [22] <author> R. Zeleznik, K. Herndon, and J. F. Hughes. </author> <title> Sketch: An interface for sketching 3d scenes. </title> <booktitle> In Proceedings of SIGGRAPH '96, </booktitle> <pages> pp. 163170, </pages> <month> August </month> <year> 1996. </year> <title> (a) (c) (e) charcoal-like rendering of terrain with texture-mapped strokes. (d) Human figure with expressive outline and shading strokes. (e) Mechanical part with hidden lines in varied styles. </title>
Reference-contexts: In general, the question of whether to use photorealistic imagery depends on the visual effect intended by the designer. A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery <ref> [21, 20, 13, 22, 10, 17, 11, 7, 16, 3] </ref>. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system [22], which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline). <p> A growing body of research in computer graphics has recognized the power and usefulness of nonphotorealistic imagery [21, 20, 13, 22, 10, 17, 11, 7, 16, 3]. Until now, though, nonphotorealistic rendering (NPR) methods have primarily been batch-oriented rather than interactive. (An exception is Zeleznik's SKETCH system <ref> [22] </ref>, which makes crude nonphotorealistic renderings using tricks in the standard polygon-rendering pipeline). One obstacle to achieving real-time nonphotorealistic rendering is the problem of determining visibility, since a straightforward use of z-buffering may give incorrect results.
References-found: 22

