URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-95-3.ps
Refering-URL: http://www.eecs.umich.edu/~kuno/
Root-URL: http://www.cs.umich.edu
Email: e-mail: kuno@umich.edu and rundenst@eecs.umich.edu  
Title: Materialized Object-Oriented Views in MultiView  
Author: H. A. Kuno and E. A. Rundensteiner 
Keyword: Materialized views, object-oriented databases, incremental updates, object-slicing.  
Address: Ann Arbor, MI 48109  
Affiliation: Dept. of Electrical Engineering and Computer Science, Software Systems Research Lab. The University of Michigan,  
Abstract: Object-oriented view mechanisms have received much attention in the literature in recent years, since they provide powerful mechanisms for addressing tasks such as customized tool interfacing to object-oriented databases (OODBs) and interoperability of heterogeneous databases. However, little progress has been made thus far on addressing the topic of view materialization in object-oriented databases. In the context of the MultiView project, we have developed an object model and an accompanying set of algorithms for the support of updatable materialized views in OODBs. We take advantage of unique features of the Multi-View model, including its support for object-preserving queries, the integration of base and virtual classes into a unified and consistent global class hierarchy, and an object-slicing approach. In this paper, we present the MultiView model of materialized views, supporting updates on both base and virtual classes. We also describe a set of efficient algorithms for incremental view maintenance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and A. Bonner. </author> <title> Objects and views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 238-247, </pages> <year> 1991. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. A number of researchers have proposed view systems for object-oriented databases (OODBs) <ref> [1, 9, 14, 21, 18, 19] </ref>, but little work has been done thus far on the support of materialized object-oriented views. <p> Otherwise, it will signal an error. Function 2 GainType (O i ; V j ) 1. Let QueueArray <ref> [1; n] </ref> be an array of queues of classes to be processed. 2. Set two variables, M AX and M IN . M AX := DerNum (V j ); M IN := DerNum (V j ). 3. MakeImpl (O i ; V j ). 4. <p> Our paper is also unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years <ref> [1, 9, 14, 21, 18, 19, 20] </ref>, materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions [8, 12]. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level.
Reference: [2] <author> T. Atwood, R. Cattell, J. Duhl, G. Ferran, and D. Wade. </author> <title> The ODMG object model. </title> <journal> Journal of Object Oriented Programming, </journal> <pages> pages 64-69, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: J. Kim [11]. Furthermore, the proposed ODMG standard <ref> [2] </ref> recently formulated by several key OODB vendors also follows this approach. root node, Object, has a global extent equal to all database instances and an empty type description. 2.2 Virtual class creation Let C be the set of all classes in the database.
Reference: [3] <author> J. Blakeley, P. Larson, and F. Tompa. </author> <title> Efficiently updating materialized views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 61-71, </pages> <year> 1986. </year>
Reference-contexts: Iris does not support view mechanisms, and does not address issues of classifica tion, inheritance for virtual classes, etc. Our research on view materialization in OODBs borrows several techniques from the relational arena. <ref> [3, 4] </ref> tests modified tuples to see if they fulfill view predicates, thereby detecting irrelevant and autonomously computable updates. This resembles our solution of filtering irrelevant updates by exploiting the generalization hierarchy and the derivation structure.
Reference: [4] <author> J. A. Blakeley, N. Coburn, and P-A Larson. </author> <title> Updating derived relations: Detecting irrelevant and autonomously computable updates. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 14(3) </volume> <pages> 369-400, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Iris does not support view mechanisms, and does not address issues of classifica tion, inheritance for virtual classes, etc. Our research on view materialization in OODBs borrows several techniques from the relational arena. <ref> [3, 4] </ref> tests modified tuples to see if they fulfill view predicates, thereby detecting irrelevant and autonomously computable updates. This resembles our solution of filtering irrelevant updates by exploiting the generalization hierarchy and the derivation structure.
Reference: [5] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: This resembles our solution of filtering irrelevant updates by exploiting the generalization hierarchy and the derivation structure. The system provided by <ref> [5] </ref> performs incremental view maintenance using production rules that are triggered by update operations. Similarly, we override generic-update operations with type-specific update operators for virtual classes. However, there are significant differences between view materialization in OODBs and relational systems.
Reference: [6] <author> D.H. Fishman. </author> <title> Iris: An object oriented database management system. </title> <journal> In ACM Transactions on Office Information Systems, </journal> <volume> volume 5, </volume> <pages> pages 48-69, </pages> <month> January </month> <year> 1987. </year> <note> 6 More specifically, we use GemStone version 4.0.1.1. GemStone is a registered trademark of Servio Corporation </note>
Reference-contexts: Rather than use contiguous storage for objects, a MultiView object is distributed among multiple object-slicing implementation objects. The Iris functional database system also stores data in noncontiguous storage <ref> [6] </ref>. However, because Iris is built on top of a relational engine, it distributes data over multiple relational tables. Iris does not support view mechanisms, and does not address issues of classifica tion, inheritance for virtual classes, etc.
Reference: [7] <author> E. N. Hanson. </author> <title> A performance analysis of view materialization strategies. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 440-453, </pages> <year> 1987. </year>
Reference-contexts: View materialization, i.e., the maintenance of derived data instead of recomputing it on demand, has been demonstrated in the relational model to improve query access times <ref> [7] </ref>.
Reference: [8] <author> M. Hardwick and B. R. Downie. </author> <title> On object-oriented databases, materialized views, </title> <booktitle> and concurrent engineering. In Proceedings of the 1991 ASME International Computers for Engineering Conference and Exposition. Engineering Databases: An Engineering Resource, </booktitle> <year> 1991. </year>
Reference-contexts: Object-preservation eliminates the duplicate row problem of relational views. Finally, an OODB's support for encapsulation and object-identifiers significantly eases the implementa tion of triggered incremental updates. Only a few published papers address issues of view materialization in OODBs. <ref> [8] </ref> provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions. However, [8] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. [12] address maintaining consistency for a particular type of join class formed along an <p> Only a few published papers address issues of view materialization in OODBs. <ref> [8] </ref> provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions. However, [8] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. [12] address maintaining consistency for a particular type of join class formed along an existing path in the aggregation graph. <p> unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years [1, 9, 14, 21, 18, 19, 20], materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions <ref> [8, 12] </ref>. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level. We also present algorithms for the incremental maintenance of materialized views [13, 17]. The proposed algorithms are efficient.
Reference: [9] <author> S. Heiler and S. B. Zdonik. </author> <title> Object views: Extending the vision. </title> <booktitle> In IEEE International Conference on Data Engineering, </booktitle> <pages> pages 86-93, </pages> <year> 1990. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. A number of researchers have proposed view systems for object-oriented databases (OODBs) <ref> [1, 9, 14, 21, 18, 19] </ref>, but little work has been done thus far on the support of materialized object-oriented views. <p> Our paper is also unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years <ref> [1, 9, 14, 21, 18, 19, 20] </ref>, materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions [8, 12]. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level.
Reference: [10] <institution> Itasca Systems, Inc. </institution> <note> Technical Summary Release, 2.0 edition, </note> <year> 1991. </year>
Reference-contexts: The designated 1 Although there is no general agreement on whether classes in OODBs should incorporate their own extents or require users to maintain their own collections of class-instances, several systems follow this philosophy, including Itasca <ref> [10] </ref> and the system proposed by H. J. Kim [11].
Reference: [11] <author> H. J. Kim. </author> <title> Issues in Object Oriented Database Systems. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: The designated 1 Although there is no general agreement on whether classes in OODBs should incorporate their own extents or require users to maintain their own collections of class-instances, several systems follow this philosophy, including Itasca [10] and the system proposed by H. J. Kim <ref> [11] </ref>. Furthermore, the proposed ODMG standard [2] recently formulated by several key OODB vendors also follows this approach. root node, Object, has a global extent equal to all database instances and an empty type description. 2.2 Virtual class creation Let C be the set of all classes in the database.
Reference: [12] <author> S. Konomi, T. Furukawa, and Y. Kambayashi. </author> <title> Super-key classes for updating materialized derived classes in object bases. </title> <booktitle> In International Conference on Deductive and Object-Oriented Databases, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: Only a few published papers address issues of view materialization in OODBs. [8] provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions. However, [8] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. <ref> [12] </ref> address maintaining consistency for a particular type of join class formed along an existing path in the aggregation graph. Our work instead focuses on the exploitation of the structure of the schema hierarchy and derivation dependency graph in order to reduce update propagations. <p> unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years [1, 9, 14, 21, 18, 19, 20], materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions <ref> [8, 12] </ref>. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level. We also present algorithms for the incremental maintenance of materialized views [13, 17]. The proposed algorithms are efficient.
Reference: [13] <author> H. A. Kuno. </author> <title> View management issues in object-oriented databases. Dissertation Proposal, </title> <year> 1994. </year>
Reference-contexts: In order to support the required features, we have developed a novel modeling approach based on the object-slicing paradigm [17]. We have successfully completed a prototype implementation of the MultiView system of materialized object-oriented views using this object-slicing representation <ref> [13, 17, 15] </ref>. Our implementation uses incremental update propagation algorithms, which are the topic of this paper. The proposed algorithms are efficient and can bring the database into a consistent state after any primitive update with a worst-case complexity linear in the number of classes in the schema. <p> In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level. We also present algorithms for the incremental maintenance of materialized views <ref> [13, 17] </ref>. The proposed algorithms are efficient. In fact, we can show that a materialized object-oriented database can be brought into a consistent state after any primitive update with a worst-case complexity that is linear in the number of classes in the schema.
Reference: [14] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Developing an object-oriented view management system. </title> <booktitle> In Centre for Advanced Studies Conference, </booktitle> <pages> pages 548-562, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. A number of researchers have proposed view systems for object-oriented databases (OODBs) <ref> [1, 9, 14, 21, 18, 19] </ref>, but little work has been done thus far on the support of materialized object-oriented views. <p> Here at the University of Michigan, we have an on-going NSF-funded project called MultiView, which has the goal of developing techniques as well as tools for the support of updatable object-oriented views <ref> [18, 14, 19, 20] </ref>. In the course of our research we have identified certain fundamental DBMS features as necessary for the support of views. <p> We use the term Derived-from-Sub-Graph of V i to refer to the schema DS (V i ) = (DV; DE) containing all the classes either directly or indirectly derived from V i . The virtual-class-forming queries currently supported by our model [18] and by our implemented MultiView prototype <ref> [14] </ref> are object-preserving, and includes the following algebra operators: hide, refine, select, union, intersect, and difference. These queries determine the methods, instance variables, and extent of the virtual classes. If a complex query is specified by nesting algebra operators, then each intermediate algebra operator generates a separate virtual class [18]. <p> In order to maintain this global class hierarchy, our view management system supports a flexible classification mechanism that is able to make dynamic changes to the class hierarchy, e.g., inserting a new class between two existing classes. We have proposed elsewhere <ref> [14, 20] </ref> algorithms and techniques to maintain the global class hierarchy. 2.4 Required OODB model features Introducing virtual classes and schemata requires the underlying data model to support certain features. <p> Our paper is also unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years <ref> [1, 9, 14, 21, 18, 19, 20] </ref>, materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions [8, 12]. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level.
Reference: [15] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Materialized object-oriented views in multiview. </title> <type> Technical report, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, </address> <month> De-cember </month> <year> 1994. </year>
Reference-contexts: In order to support the required features, we have developed a novel modeling approach based on the object-slicing paradigm [17]. We have successfully completed a prototype implementation of the MultiView system of materialized object-oriented views using this object-slicing representation <ref> [13, 17, 15] </ref>. Our implementation uses incremental update propagation algorithms, which are the topic of this paper. The proposed algorithms are efficient and can bring the database into a consistent state after any primitive update with a worst-case complexity linear in the number of classes in the schema. <p> how to update materialized views so as to keep their extents consistent with the rest of the database. 3 Materialized View Maintenance Because the extent of a materialized virtual class does not have to be computed upon access, accesses to materialized views can be substantially faster than to non-materialized views <ref> [15] </ref>. However, the effects of updates must now be propagated to both base and virtual class extents in order to keep them consistent. We identify two invariants that define the consistency requirements of our data model. <p> Create (C i ) creates a new object-instance of class C i 2 C. In this section we discuss our algorithms for the incremental propagation of these operations to both base and virtual classes. Due to space limitations, we omit discussion of our algorithm for the Modify () operation <ref> [15] </ref>. Most of our update algorithms invoke the ProcessDerivedClass (O i ; V k ) function in order to perform derivation-ordered propagation (Function 1). <p> This is because all values must be assigned to instance variables using accessing methods. No class is processed more than once, and that if none of a class's source classes are not processed, then neither will be the class. The worst-case complexity (detailed in <ref> [15] </ref>) of the GainType () function is O (jClasses in Global Schemaj). The algorithm for DropType (O i ; V j ) is very similar to Function 2 in that it uses the process-DerivedClass () function and the QueueArray and Queue2 data structures to control propagation. <p> The worst-case complexity of the DropType () function is O (jClasses in Global Schemaj). The algorithm and proof of complexity are presented in <ref> [15] </ref>. 4.2 Create object When a new object-instance of a class C i 2 C is created for the first time, it is equivalent to first creating a new empty conceptual object and then adding the type of C i .
Reference: [16] <author> J. Martin and J. Odell. </author> <title> Object-Oriented Analysis and Design. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1992. </year>
Reference-contexts: We adopt an object-slicing technique to provide a means of supporting these required features in an elegant fashion <ref> [16, 17] </ref>. In object-slicing, a real-world object corresponds to a hierarchy of implementation objects (one for each class whose type the object possesses) linked to a conceptual object (used to represent the object-itself) rather than associating one implementation with each conceptual object as is commonly assumed in OODB systems.
Reference: [17] <author> Y. G. Ra, H. A. Kuno, and E. A. Rundensteiner. </author> <title> A flexible object-oriented database model and implementation for capacity-augmenting views. </title> <type> Technical Report CSE-TR-215-94, </type> <institution> University of Michigan, </institution> <year> 1994. </year>
Reference-contexts: The object representation assumptions underlying most OODB systems|namely one most-specific type per object, object layout determined at object-creation time, fixed typing and upwards inheritance|conflict with these identified requirements. In order to support the required features, we have developed a novel modeling approach based on the object-slicing paradigm <ref> [17] </ref>. We have successfully completed a prototype implementation of the MultiView system of materialized object-oriented views using this object-slicing representation [13, 17, 15]. Our implementation uses incremental update propagation algorithms, which are the topic of this paper. <p> In order to support the required features, we have developed a novel modeling approach based on the object-slicing paradigm [17]. We have successfully completed a prototype implementation of the MultiView system of materialized object-oriented views using this object-slicing representation <ref> [13, 17, 15] </ref>. Our implementation uses incremental update propagation algorithms, which are the topic of this paper. The proposed algorithms are efficient and can bring the database into a consistent state after any primitive update with a worst-case complexity linear in the number of classes in the schema. <p> We adopt an object-slicing technique to provide a means of supporting these required features in an elegant fashion <ref> [16, 17] </ref>. In object-slicing, a real-world object corresponds to a hierarchy of implementation objects (one for each class whose type the object possesses) linked to a conceptual object (used to represent the object-itself) rather than associating one implementation with each conceptual object as is commonly assumed in OODB systems. <p> In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level. We also present algorithms for the incremental maintenance of materialized views <ref> [13, 17] </ref>. The proposed algorithms are efficient. In fact, we can show that a materialized object-oriented database can be brought into a consistent state after any primitive update with a worst-case complexity that is linear in the number of classes in the schema.
Reference: [18] <author> E. A. Rundensteiner. </author> <title> MultiView: A methodology for supporting multiple views in object-oriented databases. </title> <booktitle> In 18th VLDB Conference, </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. A number of researchers have proposed view systems for object-oriented databases (OODBs) <ref> [1, 9, 14, 21, 18, 19] </ref>, but little work has been done thus far on the support of materialized object-oriented views. <p> Here at the University of Michigan, we have an on-going NSF-funded project called MultiView, which has the goal of developing techniques as well as tools for the support of updatable object-oriented views <ref> [18, 14, 19, 20] </ref>. In the course of our research we have identified certain fundamental DBMS features as necessary for the support of views. <p> We use the term Derived-from-Sub-Graph of V i to refer to the schema DS (V i ) = (DV; DE) containing all the classes either directly or indirectly derived from V i . The virtual-class-forming queries currently supported by our model <ref> [18] </ref> and by our implemented MultiView prototype [14] are object-preserving, and includes the following algebra operators: hide, refine, select, union, intersect, and difference. These queries determine the methods, instance variables, and extent of the virtual classes. <p> These queries determine the methods, instance variables, and extent of the virtual classes. If a complex query is specified by nesting algebra operators, then each intermediate algebra operator generates a separate virtual class <ref> [18] </ref>. We define a materialized virtual class as a virtual class that stores data instances in its extent rather than computing it upon access. We do not replicate objects that belong to materialized virtual classes, but instead store references to them. We refer to this feature as membership materialization. <p> Our paper is also unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years <ref> [1, 9, 14, 21, 18, 19, 20] </ref>, materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions [8, 12]. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level.
Reference: [19] <author> E. A. Rundensteiner. </author> <title> Tools for view generation in OODBs. </title> <booktitle> In CIKM, </booktitle> <pages> pages 635-644, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. A number of researchers have proposed view systems for object-oriented databases (OODBs) <ref> [1, 9, 14, 21, 18, 19] </ref>, but little work has been done thus far on the support of materialized object-oriented views. <p> Here at the University of Michigan, we have an on-going NSF-funded project called MultiView, which has the goal of developing techniques as well as tools for the support of updatable object-oriented views <ref> [18, 14, 19, 20] </ref>. In the course of our research we have identified certain fundamental DBMS features as necessary for the support of views. <p> Our paper is also unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years <ref> [1, 9, 14, 21, 18, 19, 20] </ref>, materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions [8, 12]. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level.
Reference: [20] <author> E. A. Rundensteiner. </author> <title> A classification algorithm for supporting object-oriented views. </title> <booktitle> In CIKM, </booktitle> <pages> pages 18-25, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Here at the University of Michigan, we have an on-going NSF-funded project called MultiView, which has the goal of developing techniques as well as tools for the support of updatable object-oriented views <ref> [18, 14, 19, 20] </ref>. In the course of our research we have identified certain fundamental DBMS features as necessary for the support of views. <p> In order to maintain this global class hierarchy, our view management system supports a flexible classification mechanism that is able to make dynamic changes to the class hierarchy, e.g., inserting a new class between two existing classes. We have proposed elsewhere <ref> [14, 20] </ref> algorithms and techniques to maintain the global class hierarchy. 2.4 Required OODB model features Introducing virtual classes and schemata requires the underlying data model to support certain features. <p> Our paper is also unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years <ref> [1, 9, 14, 21, 18, 19, 20] </ref>, materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions [8, 12]. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level.
Reference: [21] <author> M. H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updat-able views in object-oriented databases. </title> <booktitle> In Proceedings of the Second DOOD Conference, </booktitle> <month> De-cember </month> <year> 1991. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. A number of researchers have proposed view systems for object-oriented databases (OODBs) <ref> [1, 9, 14, 21, 18, 19] </ref>, but little work has been done thus far on the support of materialized object-oriented views. <p> Our paper is also unique in studying incremental updates in the context of the object-slicing paradigm. 6 Conclusions While object-oriented view mechanisms have received much attention in recent years <ref> [1, 9, 14, 21, 18, 19, 20] </ref>, materialization strategies have thus far only been studied in the context of relational database systems-with only two exceptions [8, 12]. In this paper, we describe the object-slicing representation we have developed in order to provide object-oriented view support at the data model level.
References-found: 21

