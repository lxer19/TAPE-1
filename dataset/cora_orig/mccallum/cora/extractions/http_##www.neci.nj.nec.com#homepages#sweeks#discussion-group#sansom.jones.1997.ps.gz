URL: http://www.neci.nj.nec.com/homepages/sweeks/discussion-group/sansom.jones.1997.ps.gz
Refering-URL: http://www.neci.nj.nec.com/homepages/sweeks/discussion-group/index.html
Root-URL: http://www.neci.nj.nec.com
Title: Formally Based Profiling for Higher-Order Functional Languages Everyone knows the importance of profiling tools: the
Author: PATRICK M. SANSOM and SIMON L. PEYTON JONES 
Keyword: Categories and Subject Descriptors: D.2.5 [Software Engineering]: Testing and Debugging| debugging aids; D.3.2 [Programming Languages]: Language Classifications|applicative languages; D.3.4 [Programming Languages]: Processors|compilers; optimization; F.3.2 [Logics and Meanings of Programs]: Sematics of Programming Languages|operational semantics General Terms: Languages, Theory Additional Key Words and Phrases: Attribution of costs, cost centers, cost semantics, execution profiling, program transformation, space profiling, source-level profiling  
Address: G12 8QQ, U.K.;  
Note: are "eating the lion's share" of the machine resources [Bentley  An earlier version of this article appeared in Proceedings of the ACM Symposium on Principles of Programming Languages, 1995, under the title  This work was partly supported by the Commonwealth Scholarship Commission and the Engineering and Physical Sciences Research Council (grant GR/J12994). Authors' address:  Permission to make digital/hard copy of all or part of this material without fee is granted provided that the copies are not made or distributed for profit or commercial advantage, the ACM copyright/server notice, the title of the publication, and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery, Inc. (ACM). To copy otherwise, to republish, to post on servers, or to redistribute to lists requires prior specific permission and/or a fee. c 1997 ACM 0164-0925/97/0100-0000 $03.50 ACM Transactions on Programming Languages and Systems, Vol. 19, No.  
Affiliation: University of Glasgow  Department of Computer Science, The University of Glasgow, Glasgow  
Email: email: fsansom; simonpjg@dcs.glasgow.ac.uk.  
Date: 1982; Ingalls 1972;  1, January 1997, Pages 000-000.  
Abstract: We present the first source-level profiler for a compiled, nonstrict, higher-order, purely functional language capable of measuring time as well as space usage. Our profiler is implemented in a production-quality optimizing compiler for Haskell and can successfully profile large applications. A unique feature of our approach is that we give a formal specification of the attribution of execution costs to cost centers. This specification enables us to discuss our design decisions in a precise framework, prove properties about the attribution of costs, and examine the effects of different program transformations on the attribution of costs. Since it is not obvious how to map this specification onto a particular implementation, we also present an implementation-oriented operational semantics, and prove it equivalent to the specification. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Appel, A. W., Duba, B. F., and MacQueen, D. B. </author> <year> 1988. </year> <title> Profiling in the presence of optimization and garbage collection. </title> <type> Tech. Rep. </type> <institution> CS-TR-197-88, Dept. of Computer Science, Princeton Univ., Princeton, N.J. </institution>
Reference: <author> Augustsson, L. </author> <year> 1993. </year> <title> Implementing Haskell overloading. </title> <booktitle> In the Conference on Functional Programming Languages and Computer Architecture. ACM, </booktitle> <address> New York, </address> <pages> 65-73. </pages>
Reference: <author> Augustsson, L. and Johnsson, T. </author> <year> 1989. </year> <title> The Chalmers Lazy-ML compiler. </title> <journal> Comput. J. </journal> <volume> 32, 2, </volume> <pages> 127-141. </pages>
Reference: <author> Bentley, J. L. </author> <year> 1982. </year> <title> Writing Efficient Programs. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J. </address>
Reference: <author> Clack, C., Clayman, S., and Parrott, D. </author> <year> 1995. </year> <title> Lexical profiling: </title> <journal> Theory and practice. J. Funct. Program. </journal> <volume> 5, 2, </volume> <pages> 225-277. </pages>
Reference: <author> Fairbairn, J. and Wray, S. </author> <year> 1987. </year> <title> TIM | A simple lazy abstract machine to execute super-combinators. </title> <booktitle> In the Proceedings of the IFIP Conference on Functional Programming Languages and Computer Architecture, </booktitle> <editor> G. Kahn, </editor> <booktitle> Ed.,Lecture Notes in Computer Science, </booktitle> <volume> vol. 274. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 34-45. </pages>
Reference: <author> Graham, S. L., Kessler, P. B., and McKusick, M. K. </author> <year> 1983. </year> <title> An execution profiler for modular programs. </title> <journal> Softw. Pract. Exper. </journal> <volume> 13, 8, </volume> <pages> 671-685. </pages>
Reference: <author> Hall, C. V., Hammond, K., Peyton Jones, S. L., and Wadler, P. L. </author> <year> 1994. </year> <title> Type classes in Haskell. </title> <booktitle> In the European Symposium on Programming (ESOP'94), </booktitle> <editor> D. Sannella, </editor> <booktitle> Ed.,Lecture Notes in Computer Science, </booktitle> <volume> vol. 788. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 241-256. </pages>
Reference: <author> Hudak, P., Peyton Jones, S. L., Wadler, P. L., Arvind, Boutel, B., Fairbairn, J., Fasel, J., Guzman, M., Hammond, K., Hughes, J., Johnsson, T., Kieburtz, R., Nikhil, R. S., Par-tain, W., and Peterson, J. </author> <year> 1992. </year> <title> Report on the functional programming language Haskell, Version 1.2. </title> <journal> ACM SIGPLAN Not. </journal> <volume> 27, </volume> <pages> 5. </pages>
Reference: <author> Hutton, G. </author> <year> 1992. </year> <title> Higher-order functions for parsing. </title> <journal> J. Funct. Program. </journal> <volume> 2, 3, </volume> <pages> 323-343. </pages>
Reference: <author> Ingalls, D. </author> <year> 1972. </year> <title> The execution profile as a measurement tool. In Design and Optimization of Compilers, </title> <editor> R. Rustin, Ed. </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <pages> 107-128. </pages>
Reference: <author> Jones, M. P. </author> <year> 1992. </year> <title> Efficient implementation of type class overloading. </title> <institution> Dept. of Computer Science, Oxford Univ., Oxford, U.K. </institution>
Reference: <author> Knuth, D. E. </author> <year> 1971. </year> <title> An Empirical Study of FORTRAN Programs. </title> <journal> Softw. Pract. Exper. </journal> <volume> 1, </volume> <pages> 105-133. </pages>
Reference: <author> Kozato, Y. and Otto, G. P. </author> <year> 1993. </year> <title> Benchmarking real-life image processing programs in lazy functional languages. </title> <booktitle> In the Conference on Functional Programming Languages and Computer Architecture. ACM, </booktitle> <address> New York, </address> <pages> 18-27. </pages>
Reference: <author> Launchbury, J. </author> <year> 1993. </year> <title> A natural semantics for lazy evaluation. </title> <booktitle> In the 20th ACM Symposium on the Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 144-154. </pages>
Reference: <author> Morgan, R. G. and Jarvis, S. A. </author> <year> 1995. </year> <title> Profiling large-scale lazy functional programs. </title> <booktitle> In the Proceedings of the High Performance Functional Computing Workshop, </booktitle> <editor> A. P. Wim Bohm and J. T. </editor> <title> Feo, </title> <type> Eds. </type> <institution> Lawrence Livermore National Laboratory, Livermore, Calif., </institution> <month> 222-234. </month>
Reference: <author> Morgan, R. G., Garigliano, R., Jarvis, S. A., and Parker, B. S. </author> <year> 1994. </year> <title> Maintenance and development of large scale lazy functional programs. </title> <booktitle> In the Dagstuhl Workshop on Functional Programming in the Real World. Dagstuhl, Saarbrucken, </booktitle> <address> Germany. </address>
Reference: <author> Partain, W. D. </author> <year> 1993. </year> <title> The nofib benchmark suite of Haskell programs. </title> <booktitle> In Functional Programming, Glasgow 1992, </booktitle> <editor> J. Launchbury and P. M. Sansom, </editor> <booktitle> Eds.,Workshops in Computing. </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 195-202. </pages>
Reference: <author> Peyton Jones, S. L. </author> <year> 1992. </year> <title> Implementing lazy functional languages on stock hardware: </title> <journal> The Spineless Tagless G-machine. J. Funct. Program. </journal> <volume> 2, 2, </volume> <pages> 127-202. </pages>
Reference: <author> Peyton Jones, S. L., Hall, C. V., Hammond, K., Partain, W. D., and Wadler, P. L. </author> <year> 1993. </year> <title> The Glasgow Haskell compiler: A technical overview. </title> <booktitle> In the Joint Framework for Information Technology (JFIT) Technical Conference Digest. SERC, </booktitle> <address> Swindon, U.K., </address> <month> 249-257. </month> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 19, No. 1, </volume> <month> January </month> <year> 1997. </year> <note> 52 Patrick M. Sansom et. al. </note>
Reference: <author> R ojemo, N. </author> <year> 1995. </year> <title> Garbage collection and memory efficiency in lazy functional languages. </title> <type> Ph.D. thesis, </type> <institution> Dept. of Computing Science, Chalmers Univ., Chalmers, Sweden. </institution>
Reference: <author> R ojemo, N. and Runciman, C. </author> <year> 1996. </year> <title> Lag, drag, void, and use: Heap profiling and space-efficient compilation revisited. </title> <booktitle> In the International Conference on Functional Programming. ACM, </booktitle> <address> New York, </address> <pages> 34-41. </pages>
Reference: <author> Runciman, C. and R ojemo, N. </author> <year> 1996. </year> <title> New dimensions in heap profiling. </title> <journal> J. Funct. Program. </journal> <volume> 6, 4, </volume> <pages> 587-620. </pages>
Reference: <author> Runciman, C. and Wakeling, D. </author> <year> 1993. </year> <title> Heap profiling of lazy functional programs. </title> <journal> J. Funct. Program. </journal> <volume> 3, 2, </volume> <pages> 217-245. </pages>
Reference: <author> Sansom, P. M. </author> <year> 1994. </year> <title> Time profiling a lazy functional compiler. </title> <booktitle> In Functional Programming, Glasgow 1993, </booktitle> <editor> K. Hammond and J. O'Donnell, </editor> <booktitle> Eds.,Workshops in Computing. </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 252-264. </pages>
Reference: <author> Santos, A. </author> <year> 1995. </year> <title> Compilation by transformation in non-strict functional languages. </title> <type> Ph.D. thesis, </type> <institution> Res. </institution> <type> Rep. </type> <institution> FP-1995-17, Dept. of Computing Science, Univ. of Glasgow, </institution> <address> Scotland. </address>
Reference: <author> Sestoft, P. </author> <year> 1997. </year> <title> Deriving a lazy abstract machine. </title> <journal> J. Funct. Program. </journal> <volume> 7, </volume> <pages> 3. </pages> <note> To be published. </note>
Reference: <author> Wadler, P. L. and Blott, S. </author> <year> 1989. </year> <title> How to make ad-hoc polymorphism less ad hoc. </title> <booktitle> In the 16th ACM Symposium on the Principles of Programming Languages. ACM, </booktitle> <address> New York. </address> <note> Received February 1996; revised July 1996; accepted October 1996 ACM Transactions on Programming Languages and Systems, Vol. 19, No. 1, </note> <month> January </month> <year> 1997. </year>
References-found: 28

