URL: http://www.cs.iastate.edu/tech-reports/TR94-20.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Optimal Parametric Search on Graphs of Bounded Tree-width  
Author: David Fern andez-Baca and Giora Slutzki 
Date: October 13, 1994  
Address: Ames, IA 50011  
Affiliation: Department of Computer Science, Iowa State University,  
Abstract: We give linear-time algorithms for a class of parametric search problems on weighted graphs of bounded tree-width. We also discuss the implications of our results to approximate parametric search on planar graphs. 
Abstract-found: 1
Intro-found: 1
Reference: [AgFe92] <author> R. Agarwala and D. Fernandez-Baca. </author> <title> Weighted multidimensional search and its application to convex optimization. </title> <type> DIMACS Technical Report 92-51, </type> <month> 29 November, </month> <year> 1992. </year> <note> To appear in SIAM J. Comput. </note>
Reference-contexts: Since k is fixed, our earlier results imply that the search will take O (n) time. Furthermore, max F G will be at least k=(k + 1) times Z G ( fl ). Our results can also be used for multiparameter problems using the techniques of <ref> [CoMe93, AgFe92] </ref>. These methods rely on solutions constructed recursively for optimization problems in one lower dimension, with the recursion bottoming out when the dimension drops to zero. We can use our algorithm by changing the base case to be dimension one. <p> We can use our algorithm by changing the base case to be dimension one. This will result in an improvement from O (n log d n) to O (n log d1 n) in the running time, where d is the number of parameters | we refer the reader to <ref> [AgFe92] </ref> for details. It is an open problem, however, whether our approach can lead to linear-time algorithms for problems with two or more parameters.
Reference: [ALS91] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 308-340. </pages>
Reference-contexts: The basis of this technique is the observation that all our search problems can be solved quickly if we have constructed Z G over some interval I containing fl . Let A be the standard optimum subgraph algorithm (see Section 4 and <ref> [ALS91, BLW87, BPT92] </ref>). Algorithm A is easily adapted to evaluate Z G () for any fixed ; moreover, Z G can be constructed by simulating the behavior of A for all possible values of in a process that is called lifting (see Section 4). <p> Our focus is limited to only those characteristics of the method that are essential to understanding the parametric algorithm. Full discussions of regularity can be found elsewhere <ref> [ALS91, BPT92, BLW87, FeSl94] </ref>. Let R be a set of composition operators; we shall be primarily interested in sets R such that R fl = w , for some w.
Reference: [Bak83] <author> B.S. Baker. </author> <title> Approximation algorithms for NP-complete problems on planar graphs. </title> <booktitle> In Proceedings of 24th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 265-273, </pages> <year> 1983. </year>
Reference-contexts: We shall rely on an idea by Baker <ref> [Bak83] </ref>, who developed a scheme whereby several NP-hard optimization problems | including maximum independent set, partition into triangles, minimum dominating set, minimum edge dominating set, and minimum vertex cover | can be solved approximately on planar graphs. <p> Here we shall discuss how Baker's scheme can be extended to do approximate parametric search on planar graphs. We note that approximate parametric search algorithms have been discussed earlier by Toledo [Tol93]. For concreteness, like Baker <ref> [Bak83] </ref>, we use the maximum independent set problem to illustrate the technique. We assume that vertex weights are convex d-th degree polynomial functions; Z G () will describe the cost of the maximum-weight independent set in G.
Reference: [BLW87] <author> M.W. Bern, E.L. Lawler, and A.L. Wong. </author> <title> Linear time computation of optimal subgraphs of decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 216-235, </pages> <year> 1987. </year>
Reference-contexts: All of these problems, and many others, are known to be regular for graphs of bounded tree-width, implying that they can be solved in (optimal) linear time on such graphs using well-known dynamic programming techniques <ref> [BLW87, BPT92] </ref>. In parametric optimum subgraph problems, weights are assumed to be continuous functions of a parameter . <p> The basis of this technique is the observation that all our search problems can be solved quickly if we have constructed Z G over some interval I containing fl . Let A be the standard optimum subgraph algorithm (see Section 4 and <ref> [ALS91, BLW87, BPT92] </ref>). Algorithm A is easily adapted to evaluate Z G () for any fixed ; moreover, Z G can be constructed by simulating the behavior of A for all possible values of in a process that is called lifting (see Section 4). <p> Our focus is limited to only those characteristics of the method that are essential to understanding the parametric algorithm. Full discussions of regularity can be found elsewhere <ref> [ALS91, BPT92, BLW87, FeSl94] </ref>. Let R be a set of composition operators; we shall be primarily interested in sets R such that R fl = w , for some w. <p> The composition operators of R are extended to graph-subgraph pairs in the natural way: the underlying graphs are composed and the subgraphs are unioned (modulo vertex identification) <ref> [BLW87] </ref>. <p> If we know the z (k) u 's, we can combine this information in constant time via additions and comparisons to obtain z (i) v <ref> [BLW87, BPT92] </ref>.
Reference: [BPT92] <author> R.B. Borie, R.G. Parker, </author> <title> and C.A. Tovey. Automatic generation of linear-time algorithms from predicate-calculus descriptions of problems on recursively-constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 555-582, </pages> <year> 1992. </year>
Reference-contexts: All of these problems, and many others, are known to be regular for graphs of bounded tree-width, implying that they can be solved in (optimal) linear time on such graphs using well-known dynamic programming techniques <ref> [BLW87, BPT92] </ref>. In parametric optimum subgraph problems, weights are assumed to be continuous functions of a parameter . <p> The basis of this technique is the observation that all our search problems can be solved quickly if we have constructed Z G over some interval I containing fl . Let A be the standard optimum subgraph algorithm (see Section 4 and <ref> [ALS91, BLW87, BPT92] </ref>). Algorithm A is easily adapted to evaluate Z G () for any fixed ; moreover, Z G can be constructed by simulating the behavior of A for all possible values of in a process that is called lifting (see Section 4). <p> The terminals of G are obtained from the terminals of the composing graphs <ref> [Wim87, BPT92] </ref>. We shall write U [k; r] to denote the set of all k-terminal graph composition operators ' of arity at most r, and where, for each ' of arity zero, jV (')j k. <p> Our focus is limited to only those characteristics of the method that are essential to understanding the parametric algorithm. Full discussions of regularity can be found elsewhere <ref> [ALS91, BPT92, BLW87, FeSl94] </ref>. Let R be a set of composition operators; we shall be primarily interested in sets R such that R fl = w , for some w. <p> If we know the z (k) u 's, we can combine this information in constant time via additions and comparisons to obtain z (i) v <ref> [BLW87, BPT92] </ref>.
Reference: [Bod88] <author> H.L. Bodlaender. </author> <title> Some classes of graphs with bounded tree-width. </title> <journal> Bulletin of the EATCS, </journal> <volume> 36 (1988), </volume> <pages> 116-126. </pages>
Reference-contexts: The tree-width of a graph G is the minimum over all tree decompositions (T; X) of G of the width of (T; X). We write w to denote the set of all graphs of tree-width at most w. Classes of graphs of bounded tree-width have been surveyed by Bodlaender <ref> [Bod88] </ref> and van Leeuwen [vLe90]. Bodlaender [Bod93] has shown that the problem of determining whether a graph has tree-width at most w and, if so, constructing a tree decomposition of width at most w, can be solved in linear time for every fixed w. <p> It was shown by Bodlaender <ref> [Bod88] </ref> that k-outerplanar graphs have treewidth at most 3k 1.
Reference: [Bod93] <author> H.L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small tree-width. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 226-233, </pages> <year> 1993. </year>
Reference-contexts: We write w to denote the set of all graphs of tree-width at most w. Classes of graphs of bounded tree-width have been surveyed by Bodlaender [Bod88] and van Leeuwen [vLe90]. Bodlaender <ref> [Bod93] </ref> has shown that the problem of determining whether a graph has tree-width at most w and, if so, constructing a tree decomposition of width at most w, can be solved in linear time for every fixed w. <p> The preprocessing phase starts with the construction of a good decomposition for the input graph G. This can be done in linear time as follows. First, use Bodlaender's linear-time algorithm <ref> [Bod93] </ref> to obtain a tree decomposition of width w of G.
Reference: [CEGS92] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Diameter, width, closest line pair, and parametric searching. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Computational Geometry, </booktitle> <pages> pp. </pages> <month> 120-129 </month> <year> (1992). </year>
Reference-contexts: 1 Introduction Parametric search has been the center of a considerable amount of research in recent times due to its numerous applications to optimization and computational geometry <ref> [CoMe93, Tol93, CEGS92, MaSc93] </ref>. Much of this work stems from two fundamental papers by Megiddo [Meg79, Meg83], where he introduced a powerful tool for parametric search. In the context of optimization problems, the application of Megiddo's technique tends to follow a common pattern.
Reference: [CLR90] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: can be obtained by locating a centroid edge in a good tree decomposition of G. (A centroid edge e in a tree T is an edge such that every subtree in T e has at most 3jV (T )j=4 vertices | such an edge always exists in a binary tree <ref> [CLR90] </ref>.) We begin by proving some properties of good tree decompositions. In what follows, when no confusion can arise, a tree decomposition of a graph shall sometimes be referred to by mentioning only the underlying tree (e.g., we refer to (T; X) as just T ).
Reference: [CoMe93] <author> E. Cohen and N. Megiddo. </author> <title> Maximizing concave functions in fixed dimension. In Complexity in Numerical Computations, P.M. Pardalos, </title> <publisher> ed., </publisher> <pages> pp. 74-87, </pages> <publisher> World Scientific Press 1993. </publisher>
Reference-contexts: 1 Introduction Parametric search has been the center of a considerable amount of research in recent times due to its numerous applications to optimization and computational geometry <ref> [CoMe93, Tol93, CEGS92, MaSc93] </ref>. Much of this work stems from two fundamental papers by Megiddo [Meg79, Meg83], where he introduced a powerful tool for parametric search. In the context of optimization problems, the application of Megiddo's technique tends to follow a common pattern. <p> Since k is fixed, our earlier results imply that the search will take O (n) time. Furthermore, max F G will be at least k=(k + 1) times Z G ( fl ). Our results can also be used for multiparameter problems using the techniques of <ref> [CoMe93, AgFe92] </ref>. These methods rely on solutions constructed recursively for optimization problems in one lower dimension, with the recursion bottoming out when the dimension drops to zero. We can use our algorithm by changing the base case to be dimension one.
Reference: [Cole87] <author> R. Cole. </author> <title> Slowing down sorting networks to obtain faster sorting algorithms. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 34(1) </volume> <pages> 200-208, </pages> <year> 1987. </year>
Reference-contexts: The polylogarithmic slowdown in going from non-parametric to parametric algorithms remains even when using Cole's clever technique <ref> [Cole87] </ref>. In this paper, we show that the above-mentioned slowdown can be completely avoided for certain parametric optimum subgraph problems. In the non-parametric versions of these problems, one is given a vertex- and/or edge-weighted graph and is asked to find the "best" subgraph that satisfies a specified property.
Reference: [FeSl89] <author> D. Fernandez-Baca and G. Slutzki. </author> <title> Solving parametric problems on trees. </title> <journal> J. Algorithms, </journal> <volume> 10 </volume> <month> 381-402 </month> <year> (1989). </year>
Reference: [FeSl94] <author> D. Fernandez-Baca and G. Slutzki. </author> <title> Parametric problems on graphs of bounded tree-width. </title> <journal> J. Algorithms, </journal> <volume> 16 </volume> <month> 408-430 </month> <year> (1994). </year> <month> 30 </month>
Reference-contexts: The cost of the optimum solution is described by a real-valued function Z G () that subdivides the -axis into a sequence of intervals, where each interval is a maximal connected set of -values for which a particular subgraph is optimal <ref> [FeSl94] </ref>. The boundary points between intervals are called breakpoints. <p> The height of an *-balanced parse tree T is clearly O (log n). It is known that there exists a subset R 0 U [4w + 4; 5] such that every G 2 w has a O (log n)-height parse tree over R 0 (see <ref> [Lag90, FeSl94] </ref>; a similar result was independently proved by Frederickson 5 [Fre93]). Suppose we have a procedure Decompose, whose details will be supplied shortly, which obtains a 7=8-balanced decomposition with respect to U [5w + 5; 3] of any (5w+5)-terminal graph of tree-width w. <p> Our focus is limited to only those characteristics of the method that are essential to understanding the parametric algorithm. Full discussions of regularity can be found elsewhere <ref> [ALS91, BPT92, BLW87, FeSl94] </ref>. Let R be a set of composition operators; we shall be primarily interested in sets R such that R fl = w , for some w. <p> The size of the resulting circuit D will be O (n), since T is a linear-size parse tree of G. More details of the construction can be found elsewhere <ref> [FeSl94, page 425] </ref>. To determine the output of D, we process its elements in topological order; thus, when it is node w's turn to be processed, all its inputs will be known, and its output can be computed in O (1) time. <p> Since the cost of every subgraph is a d-th degree polynomial in , Z G is a d-ppf <ref> [FeSl94] </ref>. Furthermore, if weights are concave, Z G will be concave. Let f be a d-ppf and let I = [ L ; R ] be an interval. We can represent f within I by storing its breakpoints in a balanced binary search tree. <p> To do this, the search algorithm carries out the steps of A, manipulating dth degree concave polynomial functions of instead of numbers. Thus, additions of numbers become additions of d-ppf's and finding the minimum of two numbers translates into taking the lower envelope of two d-ppf's <ref> [FeSl94, Meg83] </ref>. Lifting the computation of A is, in general, time consuming. The purpose of a narrowing stage is to reduce the size of the interval I under consideration, so as to make the next lifting stage faster. <p> Suppose that 0 2 I. When weights are linear, oracles for problems (P1)-(P3) can be obtained by using A to evaluate Z G ( 0 ) and then doing some additional O (1)-time problem-specific work <ref> [FeSl94] </ref>. <p> Accessing the efficient representation of each level j function Z (i) w in step 1 takes time logarithmic in the number of breakpoints of that function. Results from an earlier paper <ref> [FeSl94] </ref> imply that this number is polynomial in r j , where the degree of the polynomial depends only on the regular problem in question (see also Lemma 4.1 below). Thus, the search time is O (log r j ) 22 per function. <p> Furthermore, given efficient representations of the level j 1 functions within I, we can construct efficient representations of all level j functions within I in O (nr fi fi+1 j1 ) time. To prove this fact, we need two lemmas, the first of which was given in <ref> [FeSl94] </ref>. Let us write b I (f ) to denote the number of breakpoints of a d-ppf f within an interval I. Lemma 4.2 Let f 1 ; : : : ; f m be d-ppf 's.
Reference: [FeSl94a] <author> D. Fernandez-Baca and G. Slutzki. </author> <title> Linear-time algorithms for paramet-ric minimum spanning tree problems on planar graphs. </title> <note> In preparation. </note>
Reference-contexts: We also introduce an idea that we have shown to have applications outside of the context of bounded tree-width graphs <ref> [FeSl94a] </ref>. The basis of this technique is the observation that all our search problems can be solved quickly if we have constructed Z G over some interval I containing fl . Let A be the standard optimum subgraph algorithm (see Section 4 and [ALS91, BLW87, BPT92]).
Reference: [Fis81] <author> M. L. Fisher. </author> <title> The Lagrangian relaxation method for solving integer programming problems. </title> <booktitle> Management Science 27(1) </booktitle> <pages> 1-18, </pages> <year> (1981). </year>
Reference-contexts: Problem (P1) arises in sensitivity analysis [Gus83], (P2) arises in minimum--ratio optimization [Meg79], and (P3) arises in Lagrangian relaxation <ref> [Fis81] </ref>. We shall show that, assuming the underlying non-parametric problem is regular, (P3) can be solved in linear time if weights are concave fixed-degree polynomial functions, and (P1) and (P2) can be solved in linear time if weights are linear.
Reference: [Fre90] <author> G.N. Frederickson. </author> <title> Optimal algorithms for partitioning trees and locating p-centers in trees. </title> <type> Technical Report CSD-TR 1029, </type> <institution> Department of Computer Science, Purdue University, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: These algorithms are optimal, to within a constant factor, since their run times match those of their non-parametric versions. Our work has been motivated by that of Frederickson <ref> [Fre90] </ref>, who showed that a number of location problems on trees can be solved in (optimal) linear time by a novel application of parametric search.
Reference: [Fre93] <author> G.N. Frederickson. </author> <title> Maintaining regular properties in k-terminal graphs. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: It is known that there exists a subset R 0 U [4w + 4; 5] such that every G 2 w has a O (log n)-height parse tree over R 0 (see [Lag90, FeSl94]; a similar result was independently proved by Frederickson 5 <ref> [Fre93] </ref>). Suppose we have a procedure Decompose, whose details will be supplied shortly, which obtains a 7=8-balanced decomposition with respect to U [5w + 5; 3] of any (5w+5)-terminal graph of tree-width w.
Reference: [GoTa91] <author> M.T. Goodrich and R. Tamassia. </author> <title> Dynamic trees and dynamic point location. </title> <booktitle> In Proceedings of the 23rd Annual Symposium on Theory of Computing, </booktitle> <year> 1991, </year> <pages> pp. 523-533. </pages>
Reference-contexts: It is easy to check that the final result satisfies (C1)-(C4). Good tree decompositions will be represented using Sleator and Tarjan's dynamic trees with partitioning by size [SlTa83]. Such a representation can be built in O (n) time <ref> [GoTa91] </ref>. Several useful operations can be done in logarithmic time on dynamic trees, among them cutting and linking trees and computing least common ancestors (lca's) of pairs of nodes [SlTa83]. <p> We leave the details to the reader. 2 Goodrich and Tamassia have proved that a dynamic tree representation allows one to locate a centroid edge in a binary tree in O (log n) time <ref> [GoTa91] </ref>. In combination with Lemma 2.3, this yields a O (log n) algorithm to find a 7=8-separator in G. This does not, however, complete the description of the vertex separator procedure, since we still need to obtain good decompositions and skeletons for the fragments.
Reference: [Gus83] <author> D. Gusfield. </author> <title> Parametric combinatorial computing and a problem in program module allocation. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 30(3) </volume> <pages> 551-563, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Problem (P1) arises in sensitivity analysis <ref> [Gus83] </ref>, (P2) arises in minimum--ratio optimization [Meg79], and (P3) arises in Lagrangian relaxation [Fis81].
Reference: [Lag90] <author> J. Lagergren. </author> <title> Efficient parallel algorithms for tree-decomposition and related problems. </title> <booktitle> In Proceedings of 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. </pages> <month> 173-182 </month> <year> (1990). </year>
Reference-contexts: The height of an *-balanced parse tree T is clearly O (log n). It is known that there exists a subset R 0 U [4w + 4; 5] such that every G 2 w has a O (log n)-height parse tree over R 0 (see <ref> [Lag90, FeSl94] </ref>; a similar result was independently proved by Frederickson 5 [Fre93]). Suppose we have a procedure Decompose, whose details will be supplied shortly, which obtains a 7=8-balanced decomposition with respect to U [5w + 5; 3] of any (5w+5)-terminal graph of tree-width w. <p> It can readily be shown that T (n) = O (n); hence, the total time for building the parse tree will be linear. 2.2 Implementation of Decompose Decompose is closely patterned after a procedure that Lagergren <ref> [Lag90] </ref> used to construct tree decompositions of graphs. Like Lagergren's method (and like a similar algorithm by Reed [Ree92]), it relies on the familiar notion of a separator. Let A; B; S V (G). Set S separates A and B if every path from A to B goes through S.
Reference: [MaSc93] <author> J. Matousek and O. Schwartzkopf. </author> <title> A deterministic algorithm for the three-dimensional diameter problem. </title> <booktitle> In Proceedings of 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pp. </pages> <month> 478-484 </month> <year> (1993). </year>
Reference-contexts: 1 Introduction Parametric search has been the center of a considerable amount of research in recent times due to its numerous applications to optimization and computational geometry <ref> [CoMe93, Tol93, CEGS92, MaSc93] </ref>. Much of this work stems from two fundamental papers by Megiddo [Meg79, Meg83], where he introduced a powerful tool for parametric search. In the context of optimization problems, the application of Megiddo's technique tends to follow a common pattern.
Reference: [Meg79] <author> N. Megiddo. </author> <title> Combinatorial optimization with rational objective functions. </title> <journal> Math. Oper. Res., </journal> <volume> 4 </volume> <month> 414-424 </month> <year> (1979). </year>
Reference-contexts: 1 Introduction Parametric search has been the center of a considerable amount of research in recent times due to its numerous applications to optimization and computational geometry [CoMe93, Tol93, CEGS92, MaSc93]. Much of this work stems from two fundamental papers by Megiddo <ref> [Meg79, Meg83] </ref>, where he introduced a powerful tool for parametric search. In the context of optimization problems, the application of Megiddo's technique tends to follow a common pattern. <p> Problem (P1) arises in sensitivity analysis [Gus83], (P2) arises in minimum--ratio optimization <ref> [Meg79] </ref>, and (P3) arises in Lagrangian relaxation [Fis81]. We shall show that, assuming the underlying non-parametric problem is regular, (P3) can be solved in linear time if weights are concave fixed-degree polynomial functions, and (P1) and (P2) can be solved in linear time if weights are linear. <p> For concreteness and brevity, we shall only discuss problems whose underlying non-parametric versions require finding a minimum-weight subgraph; all of our results are easily transferable to analogous problems involving maximization. Our search procedure is based on Megiddo's parametric search method <ref> [Meg79, Meg83] </ref>. This technique relies on simulating a non-parametric algorithm for evaluating Z G () (the function describing the cost of the optimum solution) for any fixed ; the goal is to determine the computation path followed by the algorithm at fl (the value being sought).
Reference: [Meg83] <author> N. Megiddo. </author> <title> Applying parallel computation algorithms in the design of serial algorithms. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 30(4) </volume> <pages> 852-865, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction Parametric search has been the center of a considerable amount of research in recent times due to its numerous applications to optimization and computational geometry [CoMe93, Tol93, CEGS92, MaSc93]. Much of this work stems from two fundamental papers by Megiddo <ref> [Meg79, Meg83] </ref>, where he introduced a powerful tool for parametric search. In the context of optimization problems, the application of Megiddo's technique tends to follow a common pattern. <p> For concreteness and brevity, we shall only discuss problems whose underlying non-parametric versions require finding a minimum-weight subgraph; all of our results are easily transferable to analogous problems involving maximization. Our search procedure is based on Megiddo's parametric search method <ref> [Meg79, Meg83] </ref>. This technique relies on simulating a non-parametric algorithm for evaluating Z G () (the function describing the cost of the optimum solution) for any fixed ; the goal is to determine the computation path followed by the algorithm at fl (the value being sought). <p> To do this, the search algorithm carries out the steps of A, manipulating dth degree concave polynomial functions of instead of numbers. Thus, additions of numbers become additions of d-ppf's and finding the minimum of two numbers translates into taking the lower envelope of two d-ppf's <ref> [FeSl94, Meg83] </ref>. Lifting the computation of A is, in general, time consuming. The purpose of a narrowing stage is to reduce the size of the interval I under consideration, so as to make the next lifting stage faster. <p> Narrow is implemented using a standard technique (see, e.g., <ref> [Meg83] </ref>): Choose a median element of P and apply B to it; depending on the outcome of the call, either resolve all elements of P larger than the median or all elements smaller than the median.
Reference: [Ree92] <author> B. Reed. </author> <title> Finding approximate separators and computing tree-width quickly. </title> <booktitle> Proceedings of 24th Annual Symposium on Theory of Computing, </booktitle> <pages> pp. 221-228, </pages> <year> 1992. </year>
Reference-contexts: Like Lagergren's method (and like a similar algorithm by Reed <ref> [Ree92] </ref>), it relies on the familiar notion of a separator. Let A; B; S V (G). Set S separates A and B if every path from A to B goes through S.
Reference: [RoSe86] <author> N. Robertson and P.D. Seymour. </author> <title> Graph minors II: Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year>
Reference-contexts: The existence of the desired separators is guaranteed by results of Robertson and Seymour <ref> [RoSe86] </ref>. Decompose (G) Step 1. Find a 7/8-separator S 1 of G and the associated partition (A 1 ; A 2 ; S 1 ) of V (G). <p> Then, jV (G 0 )j; jV (G 00 )j n=8. Furthermore, S = X i "X j separates V (G 0 ) from V (G 00 ). Proof: The fact that S is a separator follows from basic properties of tree decompositions (see, e.g., <ref> [RoSe86] </ref>). Let k = jV (T )j, k 0 = jV (T 0 )j, n 0 = jV (G 0 )j, k 00 = jV (T 00 )j, and n 00 = jV (G 00 )j.
Reference: [vLe90] <author> J. van Leeuwen. </author> <title> Graph Algorithms. </title> <editor> In J. van Leeuwen (ed.) </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year> <month> 31 </month>
Reference-contexts: We write w to denote the set of all graphs of tree-width at most w. Classes of graphs of bounded tree-width have been surveyed by Bodlaender [Bod88] and van Leeuwen <ref> [vLe90] </ref>. Bodlaender [Bod93] has shown that the problem of determining whether a graph has tree-width at most w and, if so, constructing a tree decomposition of width at most w, can be solved in linear time for every fixed w.
Reference: [SlTa83] <author> D.D. Sleator and R.E. Tarjan. </author> <title> A data structure for dynamic trees. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 26 </volume> <month> 362-391 </month> <year> (1983). </year>
Reference-contexts: All 8 steps in this procedure can be implemented to run in linear time. It is easy to check that the final result satisfies (C1)-(C4). Good tree decompositions will be represented using Sleator and Tarjan's dynamic trees with partitioning by size <ref> [SlTa83] </ref>. Such a representation can be built in O (n) time [GoTa91]. Several useful operations can be done in logarithmic time on dynamic trees, among them cutting and linking trees and computing least common ancestors (lca's) of pairs of nodes [SlTa83]. <p> using Sleator and Tarjan's dynamic trees with partitioning by size <ref> [SlTa83] </ref>. Such a representation can be built in O (n) time [GoTa91]. Several useful operations can be done in logarithmic time on dynamic trees, among them cutting and linking trees and computing least common ancestors (lca's) of pairs of nodes [SlTa83]. These properties will allow us to take a good decomposition of a graph and extract efficiently from it good tree decompositions for fragments resulting from separations. A skeleton for the vertices in Q = terms (G) is a tree T Q constructed as follows.
Reference: [Tol93a] <author> S. Toledo. </author> <title> Maximizing non-linear convex functions in fixed dimension. In Complexity in Numerical Computations, P.M. Pardalos, </title> <publisher> ed., </publisher> <pages> pp. 429-446. </pages> <publisher> World Scientific Press 1993. </publisher>
Reference: [Tol93] <author> S. Toledo. </author> <title> Approximate parametric searching. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: 1 Introduction Parametric search has been the center of a considerable amount of research in recent times due to its numerous applications to optimization and computational geometry <ref> [CoMe93, Tol93, CEGS92, MaSc93] </ref>. Much of this work stems from two fundamental papers by Megiddo [Meg79, Meg83], where he introduced a powerful tool for parametric search. In the context of optimization problems, the application of Megiddo's technique tends to follow a common pattern. <p> We should note that a different approach for implementing the oracle for (P3) was proposed by Toledo <ref> [Tol93] </ref>. 21 4.2 Building sublinear oracles Suppose we are given a balanced parse tree T of G in which levels have been identified, as described in Section 2.3. <p> Here we shall discuss how Baker's scheme can be extended to do approximate parametric search on planar graphs. We note that approximate parametric search algorithms have been discussed earlier by Toledo <ref> [Tol93] </ref>. For concreteness, like Baker [Bak83], we use the maximum independent set problem to illustrate the technique. We assume that vertex weights are convex d-th degree polynomial functions; Z G () will describe the cost of the maximum-weight independent set in G.
Reference: [Wim87] <author> T.V. Wimer. </author> <title> Linear algorithms on k-terminal graphs. </title> <type> Ph.D. Thesis, Report No. </type> <institution> URI-030, Clemson University (1987). </institution> <month> 32 </month>
Reference-contexts: The terminals of G are obtained from the terminals of the composing graphs <ref> [Wim87, BPT92] </ref>. We shall write U [k; r] to denote the set of all k-terminal graph composition operators ' of arity at most r, and where, for each ' of arity zero, jV (')j k. <p> It is well known (see, e.g., <ref> [Wim87] </ref>) that graphs of constant-bounded tree-width can be expressed as the composition of graphs with bounded number of terminals according to some finite set of rules. More precisely, there exists a set of operators R U [w + 1; 2] such that R fl = w .
References-found: 30

