URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/douglas-craig/Preprints/pub44.ps.gz
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/douglas-craig/ccd-preprints.html
Root-URL: http://www.cs.yale.edu
Title: Madpack: A Family of Abstract Multigrid or Multilevel Solvers theory and user feedback. Madpack now
Author: Craig C. Douglas 
Keyword: Key words: multigrid, iterative methods, solvers, computer languages  
Note: The general theory was motivated by a series of abstract solvers (Madpack). The latest version (5) was motivated by the  
Abstract: Multigrid can be formulated as an algorithm for an abstract problem that is independent of the partial differential equation, domain, discretization method, and number of processors. In such an abstract setting, problems not arising from partial differential equations can be treated also (c.f. aggregation-disaggregation methods). Quite general theory exists for linear problems, e.g., C. C. Douglas and J. Douglas, SIAM J. Numer. Anal., 30 (1993), pp. 136-158. The type of solvers and design decisions (including language, data structures, external library support, and call backs) are discussed here. Based on the author's experiences with two versions of Madpack, a better approach is proposed here. This is based on a mixed language formulation (C and Fortran+preprocessor). Reasons for not just using Fortran, C, or C++ are given. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. E. Bank and C. C. Douglas. </author> <title> An efficient implementation of the SSOR and ILU preconditionings. </title> <journal> Appl. Numer. Math., </journal> <volume> 1 </volume> <pages> 489-492, </pages> <year> 1985. </year>
Reference-contexts: This allows for only half of the row or column indices to be stored due to the symmetry of the nonzero structure. It also allows for numerous computational simplifications and some tricks in reducing costs in the direct and iterative solvers (see <ref> [1] </ref>). For restriction and prolongation matrices, two additional storage formats are supported. A general sparse matrix format, as implemented in the second Yale Sparse Matrix Package (see [16]) is useful on irregular grids. A stencil format is extremely efficient for uniform or tensor product grids.
Reference: [2] <author> R. E. Bank and R. K. Smith. </author> <title> General sparse elimination requires no permanent integer storage. </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> 8 </volume> <pages> 574-584, </pages> <year> 1987. </year>
Reference-contexts: Version 2 supports an odd flavor of sparse matrix storage (see <ref> [2] </ref>) in the solver routines. The matrices A j are assumed to have a symmetric nonzero structure, independent of whether or not A j = A T j .
Reference: [3] <author> F. Chatelin and W. L. Miranker. </author> <title> Acceleration by aggregation of successive approximation methods. </title> <journal> Lin. Alg. Appl., </journal> <volume> 43 </volume> <pages> 17-47, </pages> <year> 1982. </year>
Reference-contexts: Both theory and practical experience demonstrate rather conclusively that finding better Q j matrices is far superior to trying to find an optimal iterative method as the solver (e.g., see <ref> [3] </ref>). For partial differential equation problems, using better discretization methods usually makes a bigger impact on the convergence rate than searching for a slightly better interpolation scheme or iterative solver. <p> DAMG supports dense, stencil, and general sparse matrix formats (this time, the more common first Yale Sparse Matrix Package [17] format was used) in the computational kernels. The dense case rarely occurs in solving partial differential equations; it is more common when solving aggregation-disaggregation problems (see <ref> [3] </ref>). Table 1 contains a summary of the solvers and preconditioners supported in the IBM version. Unlike version 2, version 4 requires an external library of solvers (there are some solvers provided, but not many).
Reference: [4] <author> C. C. Douglas. </author> <title> Mgnet Digests and Code Repository. Monthly digests subscribed to by sending a message to mgnet-requests@cs.yale.edu and an anonymous ftp site (casper.cs.yale.edu) for codes and papers on multigrid and related topics. </title>
Reference-contexts: The first two versions were released in 1986 and the fourth in 1992. All versions have been written using numerous macros to hide data structures and improve the readability. Currently, version 2 is available through MGNet (see <ref> [4] </ref> and [9] for a description of MGNet). Version 2 is in the public domain. Version 4 is not really compatible with version 2 and is also owned by IBM. It is available through IBM's Internet anonymous ftp server and MGNet.
Reference: [5] <author> C. C. Douglas. </author> <title> Multi-grid algorithms for elliptic boundary-value problems. </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <month> May </month> <year> 1982. </year>
Reference-contexts: The latter uses the difference operator, similar to a Gauss-Seidel iteration with a three 9 Craig C. Douglas color ordering and a rotated operator, to improve the order of the interpolation (see [18]). Three restriction methods are based on stencils. These are described in detail in <ref> [5] </ref>. Two second order methods and a fourth order one are provided. Only Algorithms MGC and NIC are options. The solvers are sparse Gaussian elim ination and Gauss-Seidel with either the natural or red-black orderings. DPMG was designed to run very fast on four quite different architectures: 1.
Reference: [6] <author> C. C. Douglas. </author> <title> Multi-grid algorithms with applications to elliptic boundary-value problems. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 21 </volume> <pages> 236-254, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction The term abstract multigrid was coined in <ref> [6] </ref>. This refers to theory which is quasi-independent of the elliptic boundary value problem. The dependence is introduced by assuming that the (discretized) problem satisfies a very small number of hypotheses which contribute simple expressions to the convergence rate formula. The theory in [6] is general enough to apply to nonnested <p> The term abstract multigrid was coined in <ref> [6] </ref>. This refers to theory which is quasi-independent of the elliptic boundary value problem. The dependence is introduced by assuming that the (discretized) problem satisfies a very small number of hypotheses which contribute simple expressions to the convergence rate formula. The theory in [6] is general enough to apply to nonnested solution spaces and includes example boundary value problems on general domains, with variable coefficients, and finite difference and finite element discretizations. fl IBM Research Division, T. J. Watson Research Center, P. O.
Reference: [7] <author> C. C. Douglas. </author> <title> Madpack (version 2) users' guide. </title> <type> Technical Report 16169, </type> <institution> IBM Research Division, </institution> <address> Yorktown Heights, New York, </address> <year> 1990. </year> <note> The most up to date source code is available through anonymous ftp from casper.cs.yale.edu in the directory mgnet/madpack2. </note>
Reference-contexts: Version 2 is discussed in x3.1. Version 4 is discussed in x3.2. A number of issues that these two versions raise are discussed in x4. 4 Madpack: A Family of Abstract Multigrid or Multilevel Solvers 3.1 Madpack, Version 2 Version 2 <ref> [7] </ref> was originally written in an extended flavor of Ratfor. A translator converted this to Fortran-77. This, in turn, is compiled by whatever compiler is available on a given machine. <p> Three versions of the author's publically distributed multilevel codes (Madpack) were discussed. From the experience of these codes, a model of a better approach using a mixed language approach (C and Fortran+m4) was proposed. Implementing such a system, starting from having already working solvers (e.g., <ref> [7] </ref>, [11], and [12]) was a simple exercise. The end result is a much more general package (Madpack5) which is easily called from programs written in many common languages, including C, C++, Fortran, and Pascal. It would be straight forward to produce an interface to Mathematica or Matlab as well.
Reference: [8] <author> C. C. Douglas. </author> <title> A tupleware approach to domain decomposition methods. </title> <journal> Appl. Numer. Math., </journal> <volume> 8 </volume> <pages> 353-373, </pages> <year> 1991. </year>
Reference-contexts: G = General sparse matrices S = Stencil matrices D = Dense matrices any = any format A 500 line subset of Madpack2 was used to implement a highly efficient multiple coarse space nontelescoping multilevel solver for problems in two and three dimensions on a variety of parallel computers (see <ref> [8] </ref>, [15], and [14]). The compactness of this package made this easy to do. 3.2 Madpack, Version 4 This is a complete redesign and rewrite of Madpack. It is incompatible with version 2 in numerous ways. This is actually two quite distinct codes, DAMG [11] and DPMG [12].
Reference: [9] <author> C. C. Douglas. MGNet: </author> <title> a multigrid and domain decomposition network. </title> <journal> ACM SIGNUM Newsletter, </journal> <volume> 27 </volume> <pages> 2-8, </pages> <year> 1992. </year>
Reference-contexts: The first two versions were released in 1986 and the fourth in 1992. All versions have been written using numerous macros to hide data structures and improve the readability. Currently, version 2 is available through MGNet (see [4] and <ref> [9] </ref> for a description of MGNet). Version 2 is in the public domain. Version 4 is not really compatible with version 2 and is also owned by IBM. It is available through IBM's Internet anonymous ftp server and MGNet.
Reference: [10] <author> C. C. Douglas. </author> <title> Some remarks on completely vectorizing point Gauss-Seidel while using the natural ordering. </title> <booktitle> Advances in Computational Mathematics, </booktitle> <volume> 2 </volume> <pages> 215-222, </pages> <year> 1994. </year> <title> Madpack: A Family of Abstract Multigrid or Multilevel Solvers </title>
Reference-contexts: As an interesting aside, a version was produced that completely vectorizes by using an odd re-interpretation of how to compute the updates based on the trailing vector elements that normally do not vectorize. This is described in <ref> [10] </ref>. The trick does not work in Fortran, C, or C++ unfortunately. The usual philosophy for vectorizing Gauss-Seidel is to use a red-black ordering. In addition, this allows the interpolation subroutines to ignore half of the fine grid points. However, the red-black ordering has an unfavorable feature.
Reference: [11] <author> C. C. Douglas. DAMG: </author> <title> an abstract multilevel solver. </title> <type> Technical Report YALEU/DCS/TR-950, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, </address> <year> 1993. </year>
Reference-contexts: E-mail: na.cdouglas@na-net.ornl.gov. Craig C. Douglas The concept of abstract multigrid was pushed to the extreme in [13], where a general theory for linear problems is presented with virtually no constraints on the origin of the problems. Abstract multigrid is defined in x2. Two implementations of abstract multilevel methods (see <ref> [11] </ref> and [12]) are discussed in x3. A discussion of what might be the right set of languages to implement abstract multilevel methods is in x4. The current, object oriented implementation is discussed in x5. <p> The compactness of this package made this easy to do. 3.2 Madpack, Version 4 This is a complete redesign and rewrite of Madpack. It is incompatible with version 2 in numerous ways. This is actually two quite distinct codes, DAMG <ref> [11] </ref> and DPMG [12]. DAMG is an abstract solver for linear and mildly nonlinear problems (FAS is supported). DPMG is a fast Poisson solver for two and three dimensional problems on simple uniform or tensor product grids. <p> Three versions of the author's publically distributed multilevel codes (Madpack) were discussed. From the experience of these codes, a model of a better approach using a mixed language approach (C and Fortran+m4) was proposed. Implementing such a system, starting from having already working solvers (e.g., [7], <ref> [11] </ref>, and [12]) was a simple exercise. The end result is a much more general package (Madpack5) which is easily called from programs written in many common languages, including C, C++, Fortran, and Pascal. It would be straight forward to produce an interface to Mathematica or Matlab as well.
Reference: [12] <author> C. C. Douglas. DPMG: </author> <title> a multigrid solver for the poisson equation in two and three dimensions. </title> <type> Technical Report YALEU/DCS/TR-951, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, </address> <year> 1993. </year>
Reference-contexts: Craig C. Douglas The concept of abstract multigrid was pushed to the extreme in [13], where a general theory for linear problems is presented with virtually no constraints on the origin of the problems. Abstract multigrid is defined in x2. Two implementations of abstract multilevel methods (see [11] and <ref> [12] </ref>) are discussed in x3. A discussion of what might be the right set of languages to implement abstract multilevel methods is in x4. The current, object oriented implementation is discussed in x5. <p> The compactness of this package made this easy to do. 3.2 Madpack, Version 4 This is a complete redesign and rewrite of Madpack. It is incompatible with version 2 in numerous ways. This is actually two quite distinct codes, DAMG [11] and DPMG <ref> [12] </ref>. DAMG is an abstract solver for linear and mildly nonlinear problems (FAS is supported). DPMG is a fast Poisson solver for two and three dimensional problems on simple uniform or tensor product grids. <p> Three versions of the author's publically distributed multilevel codes (Madpack) were discussed. From the experience of these codes, a model of a better approach using a mixed language approach (C and Fortran+m4) was proposed. Implementing such a system, starting from having already working solvers (e.g., [7], [11], and <ref> [12] </ref>) was a simple exercise. The end result is a much more general package (Madpack5) which is easily called from programs written in many common languages, including C, C++, Fortran, and Pascal. It would be straight forward to produce an interface to Mathematica or Matlab as well.
Reference: [13] <author> C. C. Douglas and J. Douglas. </author> <title> A unified convergence theory for abstract multigrid or multilevel algorithms, serial and parallel. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 30 </volume> <pages> 136-158, </pages> <year> 1993. </year>
Reference-contexts: J. Watson Research Center, P. O. Box 218, Yorktown Heights, NY 10598, USA and Department of Computer Science, Yale University, P. O. Box 208285, New Haven, CT 06520-8285, USA. E-mail: na.cdouglas@na-net.ornl.gov. Craig C. Douglas The concept of abstract multigrid was pushed to the extreme in <ref> [13] </ref>, where a general theory for linear problems is presented with virtually no constraints on the origin of the problems. Abstract multigrid is defined in x2. Two implementations of abstract multilevel methods (see [11] and [12]) are discussed in x3.
Reference: [14] <author> C. C. Douglas and J. Mandel. </author> <title> A group theoretic approach to the domain reduction method. </title> <journal> Computing, </journal> <volume> 48 </volume> <pages> 73-96, </pages> <year> 1992. </year>
Reference-contexts: sparse matrices S = Stencil matrices D = Dense matrices any = any format A 500 line subset of Madpack2 was used to implement a highly efficient multiple coarse space nontelescoping multilevel solver for problems in two and three dimensions on a variety of parallel computers (see [8], [15], and <ref> [14] </ref>). The compactness of this package made this easy to do. 3.2 Madpack, Version 4 This is a complete redesign and rewrite of Madpack. It is incompatible with version 2 in numerous ways. This is actually two quite distinct codes, DAMG [11] and DPMG [12].
Reference: [15] <author> C. C. Douglas and W. L. Miranker. </author> <title> Constructive interference in parallel algorithms. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 25 </volume> <pages> 376-398, </pages> <year> 1988. </year>
Reference-contexts: = General sparse matrices S = Stencil matrices D = Dense matrices any = any format A 500 line subset of Madpack2 was used to implement a highly efficient multiple coarse space nontelescoping multilevel solver for problems in two and three dimensions on a variety of parallel computers (see [8], <ref> [15] </ref>, and [14]). The compactness of this package made this easy to do. 3.2 Madpack, Version 4 This is a complete redesign and rewrite of Madpack. It is incompatible with version 2 in numerous ways. This is actually two quite distinct codes, DAMG [11] and DPMG [12].
Reference: [16] <author> S. C. Eisenstat, H. E. Elman, M. H. Schultz, and A. H. Sherman. </author> <title> The (new) Yale sparse matrix package. </title> <editor> In A. L. Schoenstadt and G. Birkhoff, editors, </editor> <booktitle> Elliptic Problem Solvers II, </booktitle> <pages> pages 45-52. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: It also allows for numerous computational simplifications and some tricks in reducing costs in the direct and iterative solvers (see [1]). For restriction and prolongation matrices, two additional storage formats are supported. A general sparse matrix format, as implemented in the second Yale Sparse Matrix Package (see <ref> [16] </ref>) is useful on irregular grids. A stencil format is extremely efficient for uniform or tensor product grids. Typically, r j + c storage elements are used, where r j =Rows (R j ) and c is a small natural number. Only Algorithms MGC and NIC are included.
Reference: [17] <author> S. C. Eisenstat, M. C. Gursky, M. H. Schultz, and A. H. Sherman. </author> <title> Yale sparse matrix package: II. the nonsymmetric codes. </title> <type> Technical Report 114, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, </address> <year> 1977. </year>
Reference-contexts: DPMG is a fast Poisson solver for two and three dimensional problems on simple uniform or tensor product grids. DAMG supports dense, stencil, and general sparse matrix formats (this time, the more common first Yale Sparse Matrix Package <ref> [17] </ref> format was used) in the computational kernels. The dense case rarely occurs in solving partial differential equations; it is more common when solving aggregation-disaggregation problems (see [3]). Table 1 contains a summary of the solvers and preconditioners supported in the IBM version.
Reference: [18] <author> J. M. Hyman. </author> <title> Mesh refinement and local inversion of elliptic differential equations. </title> <journal> J. Comp. Phys., </journal> <volume> 23 </volume> <pages> 124-134, </pages> <year> 1977. </year> <month> 19 </month>
Reference-contexts: Interpolation is either bilinear, trilinear, or a fourth order method based on (3.1). The latter uses the difference operator, similar to a Gauss-Seidel iteration with a three 9 Craig C. Douglas color ordering and a rotated operator, to improve the order of the interpolation (see <ref> [18] </ref>). Three restriction methods are based on stencils. These are described in detail in [5]. Two second order methods and a fourth order one are provided. Only Algorithms MGC and NIC are options. The solvers are sparse Gaussian elim ination and Gauss-Seidel with either the natural or red-black orderings.
References-found: 18

