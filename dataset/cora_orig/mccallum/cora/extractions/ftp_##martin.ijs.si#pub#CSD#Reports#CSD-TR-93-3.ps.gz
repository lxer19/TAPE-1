URL: ftp://martin.ijs.si/pub/CSD/Reports/CSD-TR-93-3.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~anp/bibtex/kdd.bib.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: iztok.savnik@ijs.si  e-mail: flach@kub.nl  
Title: Bottom-up Induction of Functional Dependencies from Relations  
Author: Iztok Savnik Peter A. Flach 
Address: Jamova 39, 61000 Ljubljana, Slovenija  POBox 90153, 5000 LE Tilburg, the Netherlands  
Affiliation: Jozef Stefan Institute,  Institute for Language Technology Artificial Intelligence, Tilburg University,  
Abstract: Data dependencies express the presence of structure in database relations, that can be utilised in the database design process. The discovery of data dependencies can be viewed as an induction process. Like in induction, we can distinguish between top-down approaches and bottom-up approaches. In top-down approach, dependencies are generated and then tested against the given relation. Since each test requires O(n 2 ) comparisons, where n is the number of tuples in relation, this can be computationally costly. We propose an alternative approach which differs from the top-down approach in that it starts with an analysis of the tuples in the relation: a bottom-up approach.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.Angluin, C.H.Smith, </author> <title> Inductive inference: theory and methods, </title> <journal> Computing Surveys 15:3, </journal> <pages> 238-269 </pages>
Reference: [2] <author> Catriel Beeri, </author> <title> On the Membership Problem for Functional and Multivalued Dependencies in Relational Databases, </title> <journal> ACM Trans. on Database systems, Vol.5, </journal> <volume> No.3, </volume> <month> Septem-ber </month> <year> 1980 </year>
Reference: [3] <author> Peter A.Flach, </author> <title> Inductive characterisation of database relations. In Methodologies for Intelligent Systems 5, </title> <editor> Z.W.Ras, M.Zemankowa, M.L.Emrich (eds.), </editor> <publisher> North-Holland, Amsterdam, </publisher> <pages> 371-378. </pages> <note> Also ITK Research Report No.23, </note> <institution> Tilburg University, </institution> <month> November </month> <year> 1990 </year>
Reference-contexts: In particular, data dependencies are used for checking database consistency, and for eliminating redundancy by decomposing the relation into 1 smaller relations that still preserve the original information and obey the given set of data dependencies <ref> [8, 3] </ref>. In this paper, we concentrate on automating the construction of database dependencies from data. <p> Discovery of database dependencies can also be viewed as an induction process, where the tuples in a relation represent instances of that relation, and dependencies represent hypotheses about the relation. In <ref> [3] </ref> it was shown how inductive learning techniques can be applied to the discovery of functional and multivalued dependencies. In [4] it was described how such induced dependencies could improve the design of the database. In [3], both types of dependencies are induced by a similar algorithm that incorporates the notion <p> In <ref> [3] </ref> it was shown how inductive learning techniques can be applied to the discovery of functional and multivalued dependencies. In [4] it was described how such induced dependencies could improve the design of the database. In [3], both types of dependencies are induced by a similar algorithm that incorporates the notion of specialization of the data dependency, which can be compared to the refinement operator as defined in the MIS [7]. Briefly, the algorithm starts with the set of the most general dependencies. <p> The set of identified invalid dependencies can be represented by a cover for invalid dependencies, which includes only the most specific invalid dependencies. In comparison with the approach taken by Flach <ref> [3] </ref>, the advantages of using the cover for invalid dependencies for the induction of valid dependencies are twofold. First, the complexity for testing the contradiction of the functional dependencies is reduced. <p> The algorithm improves the performance of the algorithm proposed by Flach <ref> [3] </ref>, by improving the part of the algorithm that checks the functional dependency for contradiction. For this purpose, the notions of invalid dependency and of negative cover were introduced. The improved performance of the algorithm allows its use in the real database environment.
Reference: [4] <author> Peter A.Flach, </author> <title> Predicate invention in Inductive Data Engineering. </title> <booktitle> In Proc. Euro-pean Conference on Machine Learning, </booktitle> <editor> P.Brazdil (ed.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In [3] it was shown how inductive learning techniques can be applied to the discovery of functional and multivalued dependencies. In <ref> [4] </ref> it was described how such induced dependencies could improve the design of the database.
Reference: [5] <author> M.Kantola, H.Mannila, K.Raiha, H.Siirtola, </author> <title> Discovering Functional and Inclusion Dependencies in Relational Databases, </title> <journal> Int. Journal of Intelligent Systems, </journal> <volume> Vol.7, </volume> <pages> 591-607, </pages> <year> 1992 </year>
Reference-contexts: Much work on the discovery of functional dependencies has been done by Mannila and Raiha; see <ref> [5] </ref> for an overview. Discovery of database dependencies can also be viewed as an induction process, where the tuples in a relation represent instances of that relation, and dependencies represent hypotheses about the relation.
Reference: [6] <author> I.Savnik, </author> <title> Induction of Functional Dependencies from Relations, </title> <type> IJS Report 6681, </type> <institution> Jozef Stefan Institute, </institution> <year> 1993 </year>
Reference-contexts: The detailed description of the operation exists generalization can be found in <ref> [6] </ref>. The procedure exists specialization searches the F D-tree for the dependency Y ! A, that is more specific than the input dependency X ! A. <p> The position of the attribute X i in the ordering is denoted by p (X i ). Only the results of the time complexity analysis are presented. The complete analysis can be found in <ref> [6] </ref>.
Reference: [7] <author> E.Y.Shapiro, </author> <title> Algorithmic program debugging, </title> <publisher> MIT Press, </publisher> <year> 1983 </year>
Reference-contexts: In [3], both types of dependencies are induced by a similar algorithm that incorporates the notion of specialization of the data dependency, which can be compared to the refinement operator as defined in the MIS <ref> [7] </ref>. Briefly, the algorithm starts with the set of the most general dependencies. Each dependency that is contradicted by the relation is replaced by the set of its specializations. One could call such an approach a generate-and-test or top-down approach.
Reference: [8] <author> Jeffrey D.Ullman, </author> <booktitle> Principles of Database and Knowledge-Base Systems, </booktitle> <volume> Volume 1, </volume> <publisher> Computer Science Press, </publisher> <year> 1988 </year>
Reference-contexts: 1 Introduction Data dependencies are among the basic tools for modelling relational databases. They are used for the representation of constraints on the possible relations that can be instances of the relational scheme. Many types of data dependencies have been introduced and studied in the last two decades <ref> [8] </ref>. Of these types, functional and multivalued dependencies are the ones that are most commonly found in real environments. Consequently, functional and multivalued dependencies are quite extensively studied and applied in the database design process. Usually, data dependencies are invented by the designer during the database design process. <p> In particular, data dependencies are used for checking database consistency, and for eliminating redundancy by decomposing the relation into 1 smaller relations that still preserve the original information and obey the given set of data dependencies <ref> [8, 3] </ref>. In this paper, we concentrate on automating the construction of database dependencies from data. <p> Let r be a relation over the relational schema R and let F and G be the sets of dependencies that are satisfied by r. The sets F and G are equivalent, if any dependency in F can be deduced from the dependencies from G using Armstrong axioms <ref> [8] </ref> and vice versa. In other words, sets are equivalent, if the deductive closures of sets F and G are equal. <p> Therefore, any set of functional dependencies that are satisfied by the relation r can be represented by an equivalent set of dependencies that is called a cover of the set of dependencies. The cover is minimal <ref> [8] </ref> for the set of dependencies F , if it is equivalent to the set of dependencies F and there is no redundant dependency with respect to the Armstrong axioms. The more-general-then and the more-special-then relationships can be defined among functional dependencies with the equal right side of the dependency.
References-found: 8

