URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/vis/doc/fmcad96/paper.ps
Refering-URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/vis/usrDoc.html
Root-URL: http://www.cs.berkeley.edu
Phone: 2  3  4  
Title: VIS  
Author: Robert K. Brayton, Gary D. Hachtel, Alberto Sangiovanni-Vincentelli, Fabio Somenzi, Adnan Aziz, Szu-Tsung Cheng, Stephen A. Edwards, Sunil P. Khatri, Yuji Kukimoto, Abelardo Pardo, Shaz Qadeer, Rajeev K. Ranjan, Shaker Sarwary, Thomas R. Shiple, Gitanjali Swamy, Tiziano Villa 
Address: Berkeley, CA 94720  Boulder, CO 80309  Austin, TX 78712  CA 95035  
Affiliation: 1 Department of EECS, University of California,  Department of ECE, University of Colorado,  Department of ECE, University of Texas at  Lattice Semiconductor, Milpitas,  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Kenneth L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference: 2. <author> R. K. Brayton et al. HSIS: </author> <title> A BDD based system for formal verification. </title> <booktitle> Proc. of Design Automation Conference, </booktitle> <year> 1994. </year>
Reference-contexts: Note that certain types of CTL properties involving existential quantification are not expressible by !-automata. COSPAN, a system developed at Bell Labs, offers language containment. A combination of both approaches is offered by the HSIS <ref> [2] </ref> system, which was developed at the University of California, Berkeley. Our experience with verification tools (in particular HSIS) led to the conclusion that sometimes, the simpler and more limited the approach, the more efficient it can be.
Reference: 3. <author> S.-T. Cheng. </author> <title> Compiling Verilog into automata. </title> <type> Tech. Rep. </type> <institution> UCB/ERL M94/37, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: VIS includes a stand-alone compiler from Verilog to BLIF-MV, called vl2mv <ref> [3] </ref>, which supports a synthesizable subset of Verilog. vl2mv extracts a set of interacting finite state machines that preserves the behavior of the source Verilog program defined in terms of simulated results. Two new features have been added to Verilog: 1. Nondeterminism.
Reference: 4. <author> E.M. Sentovich et al. </author> <title> SIS: a system for sequential circuit synthesis. </title> <type> Tech. Rep. </type> <institution> M92/41, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Unlike existing logic optimization systems like SIS, VIS can support hierarchical synthesis. 2 Describing Designs for VIS VIS operates on an intermediate format called BLIF-MV, which is an extension of BLIF, the intermediate format for logic synthesis accepted by SIS <ref> [4] </ref>. VIS includes a stand-alone compiler from Verilog to BLIF-MV, called vl2mv [3], which supports a synthesizable subset of Verilog. vl2mv extracts a set of interacting finite state machines that preserves the behavior of the source Verilog program defined in terms of simulated results.
Reference: 5. <institution> VIS Home Page : http://www-cad.eecs.berkeley.edu/~vis This article was processed using the L a T E X macro package with LLNCS style </institution>
Reference-contexts: All functions adhere to a common naming convention so that it is easy to find functions in the documentation. For more information about VIS or to get a copy, visit the VIS home page <ref> [5] </ref>. Acknowledgments We would like to thank Adrian Isles, Sriram Rajamani, and Serdar Tasiran for their assistance in developing VIS. The development of VIS was supported in part by the SRC under contract 96-DC-324 and by generous financial contributions from BNR, Cadence, California Micro, Fujitsu, and Motorola.
References-found: 5

