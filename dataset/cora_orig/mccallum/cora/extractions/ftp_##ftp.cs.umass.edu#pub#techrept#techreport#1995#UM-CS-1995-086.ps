URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1995/UM-CS-1995-086.ps
Refering-URL: http://www-ccs.cs.umass.edu/~humphrey/home.html
Root-URL: 
Title: Multi-Level Scheduling for Flexible Manufacturing  
Abstract: Marty Humphrey and John A. Stankovic Technical Report 95-86 UMass Computer Science Technical Report 95-86 Jan 23, 1995 Abstract Most real-time scheduling has focused on a relatively small set of independent tasks directly invoked periodically or via interrupts. In many real-time applications such as flexible manufacturing, this system model is too simplistic. In flexible manufacturing two entirely different sets of resources must be scheduled and connected. At the highest level, there are raw materials, robot arms, platform space, etc., and at the lowest level there are computational resources. Upon ordering products, high level resources must be scheduled, and the associated computational resources to achieve the manufacturing of those products must also be scheduled. This gives rise to the need for high level Real-Time Artificial Intelligence (RTAI) planners, low level schedulers that can handle large numbers of precedence- and resource-constrained tasks, and a suitable interface between the two schedulers. This paper presents the initial stages of the design and implementation of a flexible manufacturing testbed that incorporates all of these elements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert St. Amant. </author> <title> Planner interaction with a real-time scheduler in a flexible manufacturing environment. </title> <note> To appear, </note> <year> 1994. </year>
Reference-contexts: In future research, we will change the AI Planner to use this information. In addition, in the near future, the scope and functionality of the AI Planner will be expanded to include the following <ref> [1] </ref>: Better planning time allocation. In addition to planning the execution of orders on the manufacturing system, the high level must realize that, because the system and environment are constantly changing, it does not have unlimited time in which to plan.
Reference: [2] <author> Alan Garvey, Keith Decker, and Victor Lesser. </author> <title> A negotiation-based interface between a real-time scheduler and a decision-maker. </title> <institution> Computer Science Technical Report 94-08, University of Massachusetts, </institution> <year> 1994. </year>
Reference-contexts: Another paradigm for meta-level control is to make the interactions more negotiation-based <ref> [2] </ref>. * The high level scheduler can ask hypothetical what if questions to the low level scheduler in order to better anticipate scheduling failures.
Reference: [3] <author> Alan Garvey, Marty Humphrey, and Victor Lesser. </author> <title> Task interdependencies in design-to-time real-time scheduling. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> Washington, D.C., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: To what extent the AI Planner needs to understand the functionality of the Spring scheduler remains an open issue. 6 Related Work The AI Planner is based in part on the design-to-time real-time scheduling policies <ref> [3, 4] </ref>, which are applicable in environments in which complex task interrelationships exist and can be exploited by the scheduling process.
Reference: [4] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 23(6) </volume> <pages> 1491-1502, </pages> <year> 1993. </year> <month> 16 </month>
Reference-contexts: To what extent the AI Planner needs to understand the functionality of the Spring scheduler remains an open issue. 6 Related Work The AI Planner is based in part on the design-to-time real-time scheduling policies <ref> [3, 4] </ref>, which are applicable in environments in which complex task interrelationships exist and can be exploited by the scheduling process.
Reference: [5] <author> Steve Hanks and R. James Firby. </author> <title> Issues and architectures for planning and execution. In Proceed--ings of the Workshop on Innovative Approaches to Planning, </title> <journal> Scheduling and Control, </journal> <pages> pages 59-70, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The question of direct feedback when some request by the AI can not be fulfilled by the real-time system is not addressed. Also, MARUTI assumes a single processor architecture, which greatly reduces the complexity of the issues. The general issues of deliberating versus acting are discussed in <ref> [5] </ref>. They note that neither thinking ahead nor acting at the last moment should be pursued to the exclusion of the other. The high level scheduler must be aware of this issue when it submits process groups to the low level scheduler.
Reference: [6] <author> James Hendler and Ashok Agrawala. </author> <title> Mission critical planning: </title> <booktitle> AI on the Maruti real-time operating system. In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pages 77-84, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The MARUTI real-time operating system has been used as a basis on which to build AI systems that integrate planning and reaction <ref> [6] </ref>. The goals of that work are similar to the goals of the two-level scheduling work of the FMT-that is, to schedule at multiple levels of abstraction in order to provide responsiveness while maintaining guarantees.
Reference: [7] <author> Robert C. Kohout. </author> <title> Representing reactive competences for use in hard real-time systems. </title> <type> Ph.D. Dissertation Proposal, </type> <institution> University of Maryland, College Park, </institution> <year> 1994. </year>
Reference-contexts: On the other hand, the high level scheduler cannot wait until the last moment to submit a process group, because resource utilization by the low level scheduler will inevitably suffer. An approach that allows the high level scheduler to reason about the low level capabilities is proposed in <ref> [7] </ref>. That work proposes a representational framework for describing that low level primitives, specifically what they accomplish when they execute.
Reference: [8] <author> David J. Musliner, Edmund H. Durfee, and Kang G. Shin. </author> <title> CIRCA: A cooperative intelligent real-time control architecture. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 23(6), </volume> <year> 1993. </year>
Reference-contexts: Ultimately, the goal is to modify the environmental characteristics of the FMT so that these principles can be studied further. The two-level scheduling hierarchy is also used in the CIRCA architecture <ref> [8, 9] </ref>.
Reference: [9] <author> David J. Musliner, Edmund H. Durfee, and Kang G. Shin. </author> <title> Integrating intelligence and real-time control into manufacturing systems. </title> <booktitle> In Working Notes of the SIGMAN Workshop on Intelligent Manufacturing Technology, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: Ultimately, the goal is to modify the environmental characteristics of the FMT so that these principles can be studied further. The two-level scheduling hierarchy is also used in the CIRCA architecture <ref> [8, 9] </ref>.
Reference: [10] <author> Krithi Ramamritham, John A. Stankovic, and Perng-Fei Shiah. </author> <title> Efficient scheduling algorithms for real-time multiprocessor systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(2) </volume> <pages> 184-195, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The system architecture is shown in Figure 2. The high level scheduling is performed by the AI Planner, the low level scheduling is done by the Spring scheduler <ref> [10] </ref>, and servicing of an order is done by the Spring kernel [13]. Orders arrive to the AI Planner from the outside world via a graphical user interface. <p> The interested reader should consult <ref> [13, 14, 10] </ref> for more details. After the Spring kernel has been reviewed, modifications to the Spring scheduler that are necessary for multilevel scheduling will be presented. The Spring kernel is a real-time reflective operating system.
Reference: [11] <author> Krithi Ramamritham, John A. Stankovic, and Wei Zhao. </author> <title> Meta-level control in distributed real-time systems. </title> <booktitle> In International Conference on Distributed Computer Systems, </booktitle> <address> West Berlin, </address> <month> September </month> <year> 1987. </year>
Reference-contexts: Far-term research in multi-level scheduling in the FMT includes designing, implementing, and evaluating some of the following: * The high level scheduler can exercise more meta-level control on the low level scheduler <ref> [11] </ref>. 15 For example, in some situations, the high level scheduler can instruct the low level scheduler that it is allowed more time in which to search for a schedule, for whatever reason the high level scheduler decides.
Reference: [12] <author> Chia Shen, Krithi Ramamritham, and John A. Stankovic. </author> <title> Resource reclaiming in multiprocessor real-time systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(4) </volume> <pages> 382-398, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Spring recognizes that tasks often take less than their WCET, and provides a general-purpose mechanism for reclaiming and reallocating resources when they do <ref> [12] </ref>. However, in some applications, instead of using this mechanism that reclaims by essentially starting the execution of tasks in the current schedule earlier than their scheduled start times, the SP can be configured to reschedule after every task finishes or some external interrupt is generated.
Reference: [13] <author> John A. Stankovic and Krithi Ramamritham. </author> <title> The Spring kernel: A new paradigm for real-time systems. </title> <journal> IEEE Software, </journal> <volume> 8(3) </volume> <pages> 62-72, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The high level scheduler in the FMT uses AI techniques to control the submission of orders to the low level. The low level scheduler is a modified version of the Spring scheduler, which is a component of the Spring kernel <ref> [13] </ref>. The design and implementation of the two-level scheduling system in the FMT has been an iterative process, generally driven by what communication we feel must exist between the two schedulers in order to accomplish system-level goals. <p> The system architecture is shown in Figure 2. The high level scheduling is performed by the AI Planner, the low level scheduling is done by the Spring scheduler [10], and servicing of an order is done by the Spring kernel <ref> [13] </ref>. Orders arrive to the AI Planner from the outside world via a graphical user interface. <p> Thus, when the Spring scheduler receives the task graph that represents the order, the task graph includes the precise steps, including which physical resources to use, required to service the order. The Spring kernel <ref> [13] </ref> executes the schedule generated by the Spring scheduler on the architecture shown in Figure 5, which is a Spring node connected to a Sun Sparc. The Spring node that we are using has a single System Processor (SP), and three Application Processors (AP1, AP2, and AP3). <p> The interested reader should consult <ref> [13, 14, 10] </ref> for more details. After the Spring kernel has been reviewed, modifications to the Spring scheduler that are necessary for multilevel scheduling will be presented. The Spring kernel is a real-time reflective operating system.
Reference: [14] <author> Wei Zhao and Krithi Ramamritham. </author> <title> Simple and integrated heuristic algorithms for scheduling tasks with time and resource constraints. </title> <journal> Journal of Systems and Software, </journal> <volume> 7(3) </volume> <pages> 195-205, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: The interested reader should consult <ref> [13, 14, 10] </ref> for more details. After the Spring kernel has been reviewed, modifications to the Spring scheduler that are necessary for multilevel scheduling will be presented. The Spring kernel is a real-time reflective operating system.
References-found: 14

