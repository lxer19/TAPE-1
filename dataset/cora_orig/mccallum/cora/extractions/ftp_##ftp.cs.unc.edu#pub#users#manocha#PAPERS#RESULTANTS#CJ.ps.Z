URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/RESULTANTS/CJ.ps.Z
Refering-URL: http://www.cs.unc.edu/~dm/resultants.html
Root-URL: http://www.cs.unc.edu
Author: Dinesh Manocha 
Date: February 1993, revised May 1993  
Note: Received  
Address: Chapel Hill, NC 27599, USA  
Affiliation: Department of Computer Science, University of North Carolina,  
Abstract: Efficient Algorithms for MultiPolynomial Resultant The multipolynomial resultant of a set of equations is fundamental in quantifier elimination over the elementary theory of real and algebraically closed fields. Earlier algorithms for resultant computation and symbolic elimination are considered slow in practice. In this paper we present efficient algorithms to compute multi-polynomial resultants and demonstrates their use for polynomial manipulation and symbolic applications. The algorithms utilize the linear algebra formulation of the resultants and combines it multivariate interpolation and modular arithmetic for fast computation. It is currently been implemented as part of a package and we discuss its performance as well. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. S. Abhyankar. </author> <title> Historical ramblings in algebraic geometry and related algebra. </title> <journal> American Mathematical Monthly, </journal> <volume> 83 </volume> <pages> 409-448, </pages> <year> 1976. </year>
Reference-contexts: Many special cases, corresponding to n = 2; 3; 4; 5; 6 when the resultant can be expressed as the determinant of a matrix, are given in [15, 24, 40, 35]. Historical accounts of resultants and elimination theory are presented in <ref> [1, 49] </ref>. Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems. In the last few decades, a number of results have appeared in the literature pertaining to the resultants of sparse polynomial systems [2, 18, 44].
Reference: [2] <author> D. N. Bernshtein. </author> <title> The number of roots of a system of equations. </title> <journal> Funktsional'nyi Analiz i Ego Prilozheniya, </journal> <volume> 9(3) </volume> <pages> 1-4, </pages> <year> 1975. </year>
Reference-contexts: Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems. In the last few decades, a number of results have appeared in the literature pertaining to the resultants of sparse polynomial systems <ref> [2, 18, 44] </ref>. This is very useful due to the fact that many polynomial systems encountered in applications are rather sparse [34]. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in [11, 45]. 3.
Reference: [3] <author> M. Ben-Or, D. Kozen, and Reif J. </author> <title> The complexity of elementary algebra and geometry. </title> <journal> Journal of Comp. and Sys. Sciences, </journal> <volume> 32 </volume> <pages> 251-264, </pages> <year> 1986. </year>
Reference-contexts: QUANTIFIER ELIMINATION Ever since Tarski's work [46] on the decidability of the theory of real closed fields, there have been improvements in the time and space bounds of algebraic algorithms. Collins presented a double-exponential time algorithm for the theory using cylindrical algebraic decomposition. Collins algorithm was improved by <ref> [3] </ref> to single-exponential space. The algorithm described in [3] is purely symbolic and does not require numeric root isolation as in Collins algorithm. The main lemma in [3] for the roots of a single univariate polynomial is generalized by Canny using multipolynomial resultants to common zeros of a system of multivariate <p> Collins presented a double-exponential time algorithm for the theory using cylindrical algebraic decomposition. Collins algorithm was improved by <ref> [3] </ref> to single-exponential space. The algorithm described in [3] is purely symbolic and does not require numeric root isolation as in Collins algorithm. The main lemma in [3] for the roots of a single univariate polynomial is generalized by Canny using multipolynomial resultants to common zeros of a system of multivariate polynomials [8] and thereby resulting in a PSPACE <p> Collins presented a double-exponential time algorithm for the theory using cylindrical algebraic decomposition. Collins algorithm was improved by <ref> [3] </ref> to single-exponential space. The algorithm described in [3] is purely symbolic and does not require numeric root isolation as in Collins algorithm. The main lemma in [3] for the roots of a single univariate polynomial is generalized by Canny using multipolynomial resultants to common zeros of a system of multivariate polynomials [8] and thereby resulting in a PSPACE algorithm for the existential theory of the reals.
Reference: [4] <author> M. Ben-or and P. Tiwari. </author> <title> A deterministic algorithm for sparse multivariate polynomial interpolation. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 301-309, </pages> <year> 1988. </year>
Reference-contexts: By choosing different substitutions for (x 1 ; . . . ; x n ) and computing the corresponding F (x 1 ; . . . ; x n ) (expressed as determinants of numeric matrices) the problem is reduced to that of multivari-ate interpolation <ref> [4, 52] </ref>. Since there are q monomials, we need to choose q distinct substitutions and solve the resulting q fi q system of linear equations using standard Gaussian elimination. The running time of the resulting algorithm is O (q 3 ) and takes O (q 2 ) space. <p> Furthermore, this approach becomes unattractive when the determinant is a sparse polynomial. A sparse interpolation algorithm for such problems has been presented by Ben-Or and Tiwari <ref> [4] </ref>. Its time and space complexity have been improved in [27]. 3.2. Sparse Interpolation Ben-Or and Tiwari's algorithm needs an upper bound T q on the number of non-zero monomials in F (x 1 ; . . . ; x n ). <p> These b i 's are used for defining the coefficient matrix of the Van dermonde system. The polynomial G (z) is defined as G (z) = i=1 Its coefficients, g i 's, are computed by solving a Toeplitz system of equations <ref> [4] </ref>. The Toeplitz system is formed by computing the a i 's and using the property G (b i ) = 0. Given G (z), the algorithm computes its integer roots to compute the corresponding to b i 's. The roots are computed using a p-adic root finder [30].
Reference: [5] <author> B. </author> <title> Buchberger. Grobner bases: An algorithmic method in ideal theory. In N.K. Bose, editor, </title> <booktitle> Multidimensional Systems Theory, </booktitle> <pages> pages 184-232. </pages> <address> D. </address> <publisher> Reidel Publishing Co., </publisher> <year> 1985. </year>
Reference-contexts: There are two other techniques known in the literture for eliminating a set of variables. They are Grobner bases and Ritt-Wu's algorithm. The algorithm for Grobner bases generates special bases for polynomial ideals and was originally formulated by Buchberger <ref> [5, 6] </ref>. Eliminating a set of variables is a special application of Grobner bases. Ritt-Wu's algorithm for variable elimination has been developed by Wu Wen-Tsun [51] using an idea proposed by Ritt [42].
Reference: [6] <author> B. </author> <title> Buchberger. Applications of Grobner bases in nonlinear computational geometry. </title> <editor> In D. Kapur and J. Mundy, editors, </editor> <booktitle> Geometric Reasoning, </booktitle> <pages> pages 415-447. </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: There are two other techniques known in the literture for eliminating a set of variables. They are Grobner bases and Ritt-Wu's algorithm. The algorithm for Grobner bases generates special bases for polynomial ideals and was originally formulated by Buchberger <ref> [5, 6] </ref>. Eliminating a set of variables is a special application of Grobner bases. Ritt-Wu's algorithm for variable elimination has been developed by Wu Wen-Tsun [51] using an idea proposed by Ritt [42].
Reference: [7] <author> T. Beelen and P. Van Dooren. </author> <title> An improved algorithm for the computation of Kronecker's canonical form of a singular pencil. </title> <journal> Lin. Alg. Appl., </journal> <volume> 105 </volume> <pages> 9-65, </pages> <year> 1988. </year>
Reference-contexts: Since we are performing our computations using finite fields and modular arithmetic, we do not have to worry numerical accuracy issues. Algorithms of complexity O (n 3 ) to compute the Kronecker canonical forms have been highlighted in <ref> [7] </ref>. The algorithm in [7] involves rank computation using singular value decompositions and orthogonal transformations. Since we are performing our computations using finite fields and modular arithmetic, we can use elementary row operations for rank computations. <p> Since we are performing our computations using finite fields and modular arithmetic, we do not have to worry numerical accuracy issues. Algorithms of complexity O (n 3 ) to compute the Kronecker canonical forms have been highlighted in <ref> [7] </ref>. The algorithm in [7] involves rank computation using singular value decompositions and orthogonal transformations. Since we are performing our computations using finite fields and modular arithmetic, we can use elementary row operations for rank computations.
Reference: [8] <author> J. Canny. </author> <title> Some algebraic and geometric computations in pspace. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 460-467, </pages> <year> 1988. </year>
Reference-contexts: The computation of the multi-polynomial resultant of a system of polynomial equations has an important application, among many others, in the quantifier elimination over the elementary theory of real and algebraically closed fields <ref> [8, 41, 23] </ref>. There are two other techniques known in the literture for eliminating a set of variables. They are Grobner bases and Ritt-Wu's algorithm. The algorithm for Grobner bases generates special bases for polynomial ideals and was originally formulated by Buchberger [5, 6]. <p> The algorithm described in [3] is purely symbolic and does not require numeric root isolation as in Collins algorithm. The main lemma in [3] for the roots of a single univariate polynomial is generalized by Canny using multipolynomial resultants to common zeros of a system of multivariate polynomials <ref> [8] </ref> and thereby resulting in a PSPACE algorithm for the existential theory of the reals. Renegar has also presented PSPACE decision procedures for the existential theory of real-closed fields [41]. Thus, the best theoretical algorithms for quantifier elimination and the theory of reals are based on multipolynomial resultants. 2.1.
Reference: [9] <author> J. Canny. </author> <title> The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: If all the polynomials have the same degrees, an improved formulation is given in [32]. Many a time both determinants evaluate to zero. To compute the resultant we need to perturb the equations and use limiting arguments. This corresponds to computing the characteristic polynomials of both the determinants <ref> [9] </ref>. The ratio of the two characteristic polynomials is termed the Generalized Characteristic Polynomial, and the resultant cor responds to its constant term [10]. <p> These transformations are used along with probabilistic and dense interpolation algorithms and as a result the interpolation problem is divided into smaller problems of lower complexity. They also lead to improved and faster algorithms for solving system of nonlinear equations based on u-resultants as highlighted in <ref> [9] </ref> and computing the generalized characteristic polynomials for a system of equations [10]. 4.1. Linear Algebra Algorithms for resultant computation deal with matrices and determinants. As a result, we utilize many properties from linear algebra for efficient resultant computation.
Reference: [10] <author> J. Canny. </author> <title> Generalized characteristic polynomials. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9 </volume> <pages> 241-250, </pages> <year> 1990. </year>
Reference-contexts: To compute the resultant we need to perturb the equations and use limiting arguments. This corresponds to computing the characteristic polynomials of both the determinants [9]. The ratio of the two characteristic polynomials is termed the Generalized Characteristic Polynomial, and the resultant cor responds to its constant term <ref> [10] </ref>. If the constant term is zero, its lowest degree term contains important information and can be used for computing the proper components in the presence of excess components. This formulation has advantages for both numeric and symbolic applications. <p> They also lead to improved and faster algorithms for solving system of nonlinear equations based on u-resultants as highlighted in [9] and computing the generalized characteristic polynomials for a system of equations <ref> [10] </ref>. 4.1. Linear Algebra Algorithms for resultant computation deal with matrices and determinants. As a result, we utilize many properties from linear algebra for efficient resultant computation. In this section we review some techniques from linear algebra and use them in the following sections.
Reference: [11] <author> J. Canny and I. Emiris. </author> <title> An efficient algorithm for the sparse mixed resultant. </title> <booktitle> In Proceedings of AAECC, </booktitle> <year> 1993. </year>
Reference-contexts: This is very useful due to the fact that many polynomial systems encountered in applications are rather sparse [34]. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in <ref> [11, 45] </ref>. 3. MULTIVARIATE INTERPOLATION The algorithms for resultant computation correspond to computing determinant of matrices. The entries of the matrices are the coefficients of the polynomial equations or polynomial functions of the coefficients. In [36], Manocha and Canny use algorithms based on multi-variate interpolation to compute the symbolic determinants.
Reference: [12] <author> J. Canny, E. Kaltofen, and Y. Laksman. </author> <title> Solving system of nonlinear polynomial equations faster. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <year> 1989. </year>
Reference: [13] <author> G.E. Collins. </author> <title> The calculation of multivariate polynomial resultant. </title> <journal> Journal of ACM, </journal> <volume> 18(4) </volume> <pages> 515-532, </pages> <year> 1971. </year>
Reference: [14] <author> G.E. Collins. </author> <title> Quantifier elimination for real closed fields by cylindrical algebraic decomposition. </title> <booktitle> In Lecture Notes in Computer Science, number 33, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference: [15] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: This formulation has advantages for both numeric and symbolic applications. Many special cases, corresponding to n = 2; 3; 4; 5; 6 when the resultant can be expressed as the determinant of a matrix, are given in <ref> [15, 24, 40, 35] </ref>. Historical accounts of resultants and elimination theory are presented in [1, 49]. Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems.
Reference: [16] <author> B.S. Garbow, J.M. Boyle, J. Dongarra, and C.B. Moler. </author> <title> Matrix Eigensystem Routines - EISPACK Guide Extension, </title> <booktitle> volume 51 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference: [17] <author> X.S. Gao and S.C. Chou. </author> <title> Implicitization of rational parametric equations. </title> <type> Technical report, </type> <institution> Department of Computer Science TR-90-34, University of Texas at Austin, </institution> <year> 1990. </year>
Reference-contexts: Symbolics 3650 Hoffmann [20] Ritt-Wu's algorithm 28,000 sec. Sun-3 Gao and Chou <ref> [17] </ref> Multipolynomial resultants 138 sec. IBM RS/6000 [36] Improved multipolynomial resultants 24 sec. IBM RS/6000 Section 4 TABLE 1. The performance of different implicitization algorithms on the bicubic parametrization n with base points [38].
Reference: [18] <author> I.M. Gelfand, </author> <title> M.M. Kapranov, and A.V. Zelevinsky. Discriminants of polynomials in several variables and triangulations of newton polytopes. </title> <journal> Algebra i analiz, </journal> <volume> 2 </volume> <pages> 1-62, </pages> <year> 1990. </year>
Reference-contexts: Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems. In the last few decades, a number of results have appeared in the literature pertaining to the resultants of sparse polynomial systems <ref> [2, 18, 44] </ref>. This is very useful due to the fact that many polynomial systems encountered in applications are rather sparse [34]. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in [11, 45]. 3.
Reference: [19] <author> I. Gohberg, P. Lancaster, and L. Rodman. </author> <title> Matrix Polynomials. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: Linear Algebra Algorithms for resultant computation deal with matrices and determinants. As a result, we utilize many properties from linear algebra for efficient resultant computation. In this section we review some techniques from linear algebra and use them in the following sections. More details are given in <ref> [19, 50] </ref>. <p> Let us consider the case when A k is a non-singular matrix. Let L () = A 1 k A i ; for 0 i &lt; k. L () is a monic matrix polynomial. According to The orem 1.1 <ref> [19] </ref>, the determinant of L () corresponds ex actly to the characteristic polynomial of C = 6 6 6 0 I m 0 . . . 0 . . . . . . 0 0 0 . . . <p> words, the eigenvalues of C correspond exactly to the roots of Determinant (L ()) = 0 or Determinant (L ()) = 0 In the case where A k is a singular matrix, the matrix polynomial L () is linearized into a companion polyno mial C L () of the form <ref> [19] </ref>: C L () = 6 6 6 I m 0 0 . . . 0 . . . . . . 0 0 . . .
Reference: [20] <author> C.M. Hoffmann. </author> <title> Algebraic and numeric techniques for offsets and blends. </title> <editor> In W. Dahmen, M. Gasca, and C. Micchelli, editors, </editor> <booktitle> Computations of Curves and Surfaces, </booktitle> <pages> pages 499-528. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Many a times the computation goes on until the machine runs out of all the virtual space (which is of the order of few gigabytes). This fact was highlighted in the context of implicitizing parametric surfaces in geometric modeling applications by Hoffmann <ref> [21, 20] </ref>. In general, it is regarded that no good algorithms and implementations are known for eliminating variables from a system of polynomial equations. In this paper we present efficient algorithms to compute multipolynomial resultants based on techniques from linear algebra. <p> Other algorithms for implicitization include Grobner bases and Ritt-Wu's algorithm. Hoffmann has surveyed these techniques in [22]. A particular benchmark for implicitization has been a bicubic parametric surface given by Hoffmann, <ref> [20] </ref>: y = 3s (s 1) 2 + t 3 + 3t (8) (2s 3 + 3s 2 6s + 1)t + s (s 1)): According to resultant algorithms, the problem of im-plicitization reduces to expanding a symbolic determinant whose order is equal to the degree of the implicit equation. <p> Symbolics 3650 Hoffmann <ref> [20] </ref> Ritt-Wu's algorithm 28,000 sec. Sun-3 Gao and Chou [17] Multipolynomial resultants 138 sec. IBM RS/6000 [36] Improved multipolynomial resultants 24 sec. IBM RS/6000 Section 4 TABLE 1. The performance of different implicitization algorithms on the bicubic parametrization n with base points [38].
Reference: [21] <author> C.M. Hoffmann. </author> <title> A dimensionality paradigm for surface interrogations. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 517-532, </pages> <year> 1990. </year>
Reference-contexts: Many a times the computation goes on until the machine runs out of all the virtual space (which is of the order of few gigabytes). This fact was highlighted in the context of implicitizing parametric surfaces in geometric modeling applications by Hoffmann <ref> [21, 20] </ref>. In general, it is regarded that no good algorithms and implementations are known for eliminating variables from a system of polynomial equations. In this paper we present efficient algorithms to compute multipolynomial resultants based on techniques from linear algebra.
Reference: [22] <author> C. Hoffmann. </author> <title> Implicit curves and surfaces in computer aided geometric design. </title> <type> Technical report, </type> <institution> Department of Computer Science CER-92-002, Purdue University, </institution> <year> 1992. </year>
Reference-contexts: Other algorithms for implicitization include Grobner bases and Ritt-Wu's algorithm. Hoffmann has surveyed these techniques in <ref> [22] </ref>.
Reference: [23] <author> D. Ierardi. </author> <title> Quantifier elimination in the theory of algebraically closed fields. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <volume> volume 21, </volume> <pages> pages 138-147, </pages> <year> 1989. </year>
Reference-contexts: The computation of the multi-polynomial resultant of a system of polynomial equations has an important application, among many others, in the quantifier elimination over the elementary theory of real and algebraically closed fields <ref> [8, 41, 23] </ref>. There are two other techniques known in the literture for eliminating a set of variables. They are Grobner bases and Ritt-Wu's algorithm. The algorithm for Grobner bases generates special bases for polynomial ideals and was originally formulated by Buchberger [5, 6].
Reference: [24] <author> Jean-Pierre Jouanolou. </author> <title> Le Formalisme du Resultant, </title> <booktitle> volume 90 of Advances in Mathematics. </booktitle> <year> 1991. </year>
Reference-contexts: This formulation has advantages for both numeric and symbolic applications. Many special cases, corresponding to n = 2; 3; 4; 5; 6 when the resultant can be expressed as the determinant of a matrix, are given in <ref> [15, 24, 40, 35] </ref>. Historical accounts of resultants and elimination theory are presented in [1, 49]. Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems.
Reference: [25] <author> M. Kalkbrener. </author> <title> Three Contributions to Elimination Theory. </title> <type> PhD thesis, </type> <institution> Johannes Kepler Universitat, Linz, Austria, </institution> <year> 1991. </year>
Reference-contexts: They also include the points at infinity. Direct applications of resultants or Grobner bases fail to implicitize such parametrizations. Modified algorithms using resultants and Grobner basis are presented by Manocha and Canny, [38] and Kalk-brener, <ref> [25] </ref>, respectively. In particular, the algorithm in [38] considers a perturbed system of the form: wX (s; t) xW (s; t) = 0 wZ (s; t) zW (s; t) + G (s; t) = 0; where G (s; t) is a random polynomial.
Reference: [26] <author> W. Keller-Gehrig. </author> <title> Fast algorithms for the characteristic polynomial. </title> <journal> Theoretical Computer Science, </journal> <volume> 36 </volume> <pages> 309-317, </pages> <year> 1985. </year> <journal> The Computer Journal, </journal> <volume> Vol. 36, No. </volume> <pages> 5, </pages> <note> 1993 496 Dinesh Manocha </note>
Reference: [27] <author> E. Kaltofen and Y.N. Lakshman. </author> <title> Improved sparse mul-tivariate polynomial interpolation algorithms. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 358, </volume> <pages> pages 467-474. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: As far as solving transposed Vandermonde systems is concerned, simple algorithms of time complexity O (q 2 ) and O (q) space requirements are known [52]. In Kaltofen and Laks-man <ref> [27] </ref>, an improved algorithm of time complexity O (M (q)log (q)) is presented, where M (q) is the time complexity of multiplying two univariate polynomials of degree q. <p> Furthermore, this approach becomes unattractive when the determinant is a sparse polynomial. A sparse interpolation algorithm for such problems has been presented by Ben-Or and Tiwari [4]. Its time and space complexity have been improved in <ref> [27] </ref>. 3.2. Sparse Interpolation Ben-Or and Tiwari's algorithm needs an upper bound T q on the number of non-zero monomials in F (x 1 ; . . . ; x n ). <p> This is followed by Vandermonde interpolation to compute the symbolic determinant. However, the running cost of the method is O (dm 3 + d 2 ) finite field operations, although the cost of interpolation can be improved by using Kaltofen and Laksman's algorithm <ref> [27] </ref>. In many applications of resultants, each entry of the matrix is a linear polynomial in the coefficients of the nonlinear equations and therefore, d m. As a result, the running time of the algorithm is O (d 4 ) finite field operations.
Reference: [28] <author> D. Kapur and Y.N. Laksman. </author> <title> Elimination methods: An introduction. </title> <editor> In D. Kapur B. Donald and J. Mundy, editors, </editor> <title> Symbolic and Numerical Computation: an Integration. </title> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: Ritt-Wu's algorithm for variable elimination has been developed by Wu Wen-Tsun [51] using an idea proposed by Ritt [42]. This approach is based on Ritt's characteristic set construction and successfully applied to automated geometry theorem proving by Wu. All these methods of elimination are surveyed in <ref> [28] </ref>. A great deal of work has been done in the literature on the theory, implementation and application of these methods for elimination. However, in the last decade most of the effort has been directed towards use of Grobner bases.
Reference: [29] <author> D. Knuth. </author> <title> The Art of Computer Programming: Seminumerical Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: Since the resultant can always be expressed as a ratio of determinants (or a single determinant), it is possible to use Hadamard's bound for determinants to compute a bound on the coefficients of the resultant <ref> [29] </ref>. In practice, we found such bounds rather loose and use a randomized version of the Chinese remainder algorithm to compute the actual bignums. <p> : Thus, the coefficients of various G i 's satisfy the relation c i;1 = c i mod p 1 c i;k = c i mod p k ; These c i;j 's are used for computing the bignum, r i;k using the Chinese remainder theorem, and satisfying the relations <ref> [29] </ref> r i;k mod p j = c i;j ; j = 1; k While using the Chinese remainder theorem it is assumed that r i;k are integers lying in the range ( p 1 p 2 ...p k 2 ).
Reference: [30] <author> R. Loos. </author> <title> Computing rational zeros of integral polynomials by p-adic expansion. </title> <journal> SIAM Journal on Computing, </journal> <volume> 7 </volume> <pages> 286-293, </pages> <year> 1983. </year>
Reference-contexts: The Toeplitz system is formed by computing the a i 's and using the property G (b i ) = 0. Given G (z), the algorithm computes its integer roots to compute the corresponding to b i 's. The roots are computed using a p-adic root finder <ref> [30] </ref>. The running time of the resulting algorithm for polynomial interpolation is (ndT 3 log (n) + m 3 T ). The dominating step is the polynomial root finder which takes O (T 3 log (B)), where B is an upper bound on the values of the roots.
Reference: [31] <author> F.S. </author> <title> Macaulay. On some formula in elimination. </title> <booktitle> Proceedings of London Mathematical Society, </booktitle> <pages> pages 3-27, </pages> <month> May </month> <year> 1902. </year>
Reference-contexts: In this case, the resultant can always be expressed as determinant of a matrix. However, a single determinant formulation may not exist for any arbitrary n and the most general formulation of resultant (to the best of our knowledge) expresses it as a ratio of two determinants <ref> [31] </ref>. If all the polynomials have the same degrees, an improved formulation is given in [32]. Many a time both determinants evaluate to zero. To compute the resultant we need to perturb the equations and use limiting arguments. This corresponds to computing the characteristic polynomials of both the determinants [9].
Reference: [32] <author> F.S. </author> <title> Macaulay. Note on the resultant of a number of polynomials of the same degree. </title> <booktitle> Proceedings of London Mathematical Society, </booktitle> <pages> pages 14-21, </pages> <month> June </month> <year> 1921. </year>
Reference-contexts: However, a single determinant formulation may not exist for any arbitrary n and the most general formulation of resultant (to the best of our knowledge) expresses it as a ratio of two determinants [31]. If all the polynomials have the same degrees, an improved formulation is given in <ref> [32] </ref>. Many a time both determinants evaluate to zero. To compute the resultant we need to perturb the equations and use limiting arguments. This corresponds to computing the characteristic polynomials of both the determinants [9].
Reference: [33] <author> F.S. </author> <title> Macaulay. The Algebraic Theory of Modular Systems. </title> <publisher> Stechert-Hafner Service Agency, </publisher> <address> New York, </address> <year> 1964. </year>
Reference-contexts: 1. INTRODUCTION The problem of eliminating a set of variables from a system of polynomial equations is fundamental in computer algebra. Given a system of polynomial equations, their multipolynomial resultant is a function of the coefficients of the equations obtained after eliminating the variables <ref> [33, 43, 48] </ref>. The computation of the multi-polynomial resultant of a system of polynomial equations has an important application, among many others, in the quantifier elimination over the elementary theory of real and algebraically closed fields [8, 41, 23].
Reference: [34] <author> D. Manocha. </author> <title> Algebraic and Numeric Techniques for Modeling and Robotics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berke-ley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: In the last few decades, a number of results have appeared in the literature pertaining to the resultants of sparse polynomial systems [2, 18, 44]. This is very useful due to the fact that many polynomial systems encountered in applications are rather sparse <ref> [34] </ref>. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in [11, 45]. 3. MULTIVARIATE INTERPOLATION The algorithms for resultant computation correspond to computing determinant of matrices.
Reference: [35] <author> F. Morley and A.B. Coble. </author> <title> New results in elimination. </title> <journal> American Journal of Mathematics, </journal> <volume> 49 </volume> <pages> 463-488, </pages> <year> 1927. </year>
Reference-contexts: This formulation has advantages for both numeric and symbolic applications. Many special cases, corresponding to n = 2; 3; 4; 5; 6 when the resultant can be expressed as the determinant of a matrix, are given in <ref> [15, 24, 40, 35] </ref>. Historical accounts of resultants and elimination theory are presented in [1, 49]. Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems.
Reference: [36] <author> D. Manocha and J. Canny. </author> <title> Efficient techniques for multipolynomial resultant algorithms. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 86-95, </pages> <year> 1991. </year>
Reference-contexts: We also describe its implementation and performance on the implicitization benchmark. The resulting algorithm is fast and it is possible to come up with tight bounds on its running time. This paper is a refined and completed version of some of the results presented in <ref> [36, 39] </ref>. The Computer Journal, Vol. 36, No. 5, 1993 486 Dinesh Manocha The rest of the paper is organized in the following manner: In Section 2, we briefly review the various resultant formulations for sparse and dense polynomial systems. <p> MULTIVARIATE INTERPOLATION The algorithms for resultant computation correspond to computing determinant of matrices. The entries of the matrices are the coefficients of the polynomial equations or polynomial functions of the coefficients. In <ref> [36] </ref>, Manocha and Canny use algorithms based on multi-variate interpolation to compute the symbolic determinants. In this section, we review various algorithms known in the literature for multivariate interpolation and use for them computing multipolynomial resultants in the following sections. 3.1. <p> If r i;j1 = r i;j for i = 1; q, then c i = r ij , else repeat the steps given above. The probability of error this algorithm has been analyzed in <ref> [36] </ref>. 5.2. Choice of Finite Fields The interpolation algorithm based on the randomized version of the Chinese remainder theorem is output sensitive. In other words the time complexity of the algorithm is directly proportional to k, the number of primes used in the finite field computation. <p> Symbolics 3650 Hoffmann [20] Ritt-Wu's algorithm 28,000 sec. Sun-3 Gao and Chou [17] Multipolynomial resultants 138 sec. IBM RS/6000 <ref> [36] </ref> Improved multipolynomial resultants 24 sec. IBM RS/6000 Section 4 TABLE 1. The performance of different implicitization algorithms on the bicubic parametrization n with base points [38].
Reference: [37] <author> D. Manocha and J. Canny. </author> <title> Algorithms for implicitizing rational parametric surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 9 </volume> <pages> 25-50, </pages> <year> 1992. </year>
Reference: [38] <author> D. Manocha and J. Canny. </author> <title> The implicit representation of rational parametric surfaces. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 13 </volume> <pages> 485-510, </pages> <year> 1992. </year>
Reference-contexts: t); Z (s; t); W (s; t)); we formulate the parametric equations wX (s; t) xW (s; t) = 0 wZ (s; t) zW (s; t) = 0 and the problem of implicitization corresponds to computing the resultant of these equations by considering them as polynomials in s and t <ref> [38] </ref>. Other algorithms for implicitization include Grobner bases and Ritt-Wu's algorithm. Hoffmann has surveyed these techniques in [22]. <p> They also include the points at infinity. Direct applications of resultants or Grobner bases fail to implicitize such parametrizations. Modified algorithms using resultants and Grobner basis are presented by Manocha and Canny, <ref> [38] </ref> and Kalk-brener, [25], respectively. In particular, the algorithm in [38] considers a perturbed system of the form: wX (s; t) xW (s; t) = 0 wZ (s; t) zW (s; t) + G (s; t) = 0; where G (s; t) is a random polynomial. <p> They also include the points at infinity. Direct applications of resultants or Grobner bases fail to implicitize such parametrizations. Modified algorithms using resultants and Grobner basis are presented by Manocha and Canny, <ref> [38] </ref> and Kalk-brener, [25], respectively. In particular, the algorithm in [38] considers a perturbed system of the form: wX (s; t) xW (s; t) = 0 wZ (s; t) zW (s; t) + G (s; t) = 0; where G (s; t) is a random polynomial. The resultant is a polynomial of the form R (x; y; z; ). <p> P (x; y; z) can be decomposed as P (x; y; z) = F (x; y; z)G (x; y), where F (x; y; z) is the implicit equation and G (x; y) corresponds to the projection of seam curves (images of base points) <ref> [38] </ref>. <p> Symbolics 3650 Hoffmann [20] Ritt-Wu's algorithm 28,000 sec. Sun-3 Gao and Chou [17] Multipolynomial resultants 138 sec. IBM RS/6000 [36] Improved multipolynomial resultants 24 sec. IBM RS/6000 Section 4 TABLE 1. The performance of different implicitization algorithms on the bicubic parametrization n with base points <ref> [38] </ref>. Using the improved interpolation algorithms presented in Section 4, computation of P (x; y; z) mod p takes about 58 sec. on IBM RS/6000 for the same parametrization. 7.
Reference: [39] <author> D. Manocha and J. Canny. </author> <title> Multipolynomial resultant algorithms and linear algebra. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 158-167, </pages> <year> 1992. </year>
Reference-contexts: We also describe its implementation and performance on the implicitization benchmark. The resulting algorithm is fast and it is possible to come up with tight bounds on its running time. This paper is a refined and completed version of some of the results presented in <ref> [36, 39] </ref>. The Computer Journal, Vol. 36, No. 5, 1993 486 Dinesh Manocha The rest of the paper is organized in the following manner: In Section 2, we briefly review the various resultant formulations for sparse and dense polynomial systems.
Reference: [40] <author> F. Morley. </author> <title> The eliminant of a net of curves. </title> <journal> American Journal of Mathematics, </journal> <volume> 47 </volume> <pages> 91-97, </pages> <year> 1925. </year>
Reference-contexts: This formulation has advantages for both numeric and symbolic applications. Many special cases, corresponding to n = 2; 3; 4; 5; 6 when the resultant can be expressed as the determinant of a matrix, are given in <ref> [15, 24, 40, 35] </ref>. Historical accounts of resultants and elimination theory are presented in [1, 49]. Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems.
Reference: [41] <author> J. Renegar. </author> <title> On the computational complexity and geometry of the first order theory of the reals. </title> <type> Technical Report 854, 856, 858, </type> <institution> Cornell University, </institution> <year> 1989. </year> <note> Parts I,II,III. </note>
Reference-contexts: The computation of the multi-polynomial resultant of a system of polynomial equations has an important application, among many others, in the quantifier elimination over the elementary theory of real and algebraically closed fields <ref> [8, 41, 23] </ref>. There are two other techniques known in the literture for eliminating a set of variables. They are Grobner bases and Ritt-Wu's algorithm. The algorithm for Grobner bases generates special bases for polynomial ideals and was originally formulated by Buchberger [5, 6]. <p> Renegar has also presented PSPACE decision procedures for the existential theory of real-closed fields <ref> [41] </ref>. Thus, the best theoretical algorithms for quantifier elimination and the theory of reals are based on multipolynomial resultants. 2.1. MultiPolynomial Resultants Given n homogeneous polynomials in n unknowns, the resultant of the given system of equations is a polynomial in the coefficients of the given equations.
Reference: [42] <author> J.F. Ritt. </author> <title> Differential Algebra. </title> <publisher> AMS Colloquium Publications, </publisher> <year> 1950. </year>
Reference-contexts: The algorithm for Grobner bases generates special bases for polynomial ideals and was originally formulated by Buchberger [5, 6]. Eliminating a set of variables is a special application of Grobner bases. Ritt-Wu's algorithm for variable elimination has been developed by Wu Wen-Tsun [51] using an idea proposed by Ritt <ref> [42] </ref>. This approach is based on Ritt's characteristic set construction and successfully applied to automated geometry theorem proving by Wu. All these methods of elimination are surveyed in [28].
Reference: [43] <author> G. Salmon. </author> <title> Lessons Introductory to the Modern Higher Algebra. G.E. </title> <publisher> Stechert & Co., </publisher> <address> New York, </address> <month> 1885. </month>
Reference-contexts: 1. INTRODUCTION The problem of eliminating a set of variables from a system of polynomial equations is fundamental in computer algebra. Given a system of polynomial equations, their multipolynomial resultant is a function of the coefficients of the equations obtained after eliminating the variables <ref> [33, 43, 48] </ref>. The computation of the multi-polynomial resultant of a system of polynomial equations has an important application, among many others, in the quantifier elimination over the elementary theory of real and algebraically closed fields [8, 41, 23].
Reference: [44] <author> B. Sturmfels. </author> <title> Sparse elimination theory. </title> <editor> In D. Eisen-bud and L. Robbiano, editors, </editor> <title> Computational Algebraic Geometry and Commutative Algebra. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems. In the last few decades, a number of results have appeared in the literature pertaining to the resultants of sparse polynomial systems <ref> [2, 18, 44] </ref>. This is very useful due to the fact that many polynomial systems encountered in applications are rather sparse [34]. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in [11, 45]. 3.
Reference: [45] <author> B. Sturmfels and A. Zelevinsky. </author> <title> Multigraded resultants of sylvester type. </title> <journal> Journal of Algebra, </journal> <year> 1992. </year>
Reference-contexts: This is very useful due to the fact that many polynomial systems encountered in applications are rather sparse [34]. Resultant formulations of sparse polynomial systems, expressed in terms of matrices and determinants, have appeared in <ref> [11, 45] </ref>. 3. MULTIVARIATE INTERPOLATION The algorithms for resultant computation correspond to computing determinant of matrices. The entries of the matrices are the coefficients of the polynomial equations or polynomial functions of the coefficients. In [36], Manocha and Canny use algorithms based on multi-variate interpolation to compute the symbolic determinants.
Reference: [46] <author> A. Tarski. </author> <title> A Decision Method for Elementary Algebra and Geometry. </title> <institution> University of California Press, Berkeley, </institution> <year> 1948. </year>
Reference-contexts: In Section 4, we improve the algorithms by combining the interpolation algorithm with matrix computations. Section 5 discusses the implementation and we highlight its performance on the problem of implicitizing rational parametric surfaces and compare it with other implementations in Section 6. 2. QUANTIFIER ELIMINATION Ever since Tarski's work <ref> [46] </ref> on the decidability of the theory of real closed fields, there have been improvements in the time and space bounds of algebraic algorithms. Collins presented a double-exponential time algorithm for the theory using cylindrical algebraic decomposition. Collins algorithm was improved by [3] to single-exponential space.
Reference: [47] <author> P. Van Dooren. </author> <title> The computation of Kronecker's canonical form of a singular pencil. </title> <journal> Lin. Alg. Appl., </journal> <volume> 27 </volume> <pages> 103-141, </pages> <year> 1979. </year>
Reference-contexts: The complexity of the algorithm highlighted can be as high as O (n 4 ) in the worst case. The method highlighted above is similar to the computation of Kronecker canonical forms in <ref> [47] </ref>. The algorithm in [47] is targeted towards finite precision arithmetic and deals with numerical issues as well. Since we are performing our computations using finite fields and modular arithmetic, we do not have to worry numerical accuracy issues. <p> The complexity of the algorithm highlighted can be as high as O (n 4 ) in the worst case. The method highlighted above is similar to the computation of Kronecker canonical forms in <ref> [47] </ref>. The algorithm in [47] is targeted towards finite precision arithmetic and deals with numerical issues as well. Since we are performing our computations using finite fields and modular arithmetic, we do not have to worry numerical accuracy issues.
Reference: [48] <author> B.L. Van Der Waerden. </author> <title> Modern Algebra (third edition). </title> <editor> F. </editor> <publisher> Ungar Publishing Co., </publisher> <address> New York, </address> <year> 1950. </year>
Reference-contexts: 1. INTRODUCTION The problem of eliminating a set of variables from a system of polynomial equations is fundamental in computer algebra. Given a system of polynomial equations, their multipolynomial resultant is a function of the coefficients of the equations obtained after eliminating the variables <ref> [33, 43, 48] </ref>. The computation of the multi-polynomial resultant of a system of polynomial equations has an important application, among many others, in the quantifier elimination over the elementary theory of real and algebraically closed fields [8, 41, 23].
Reference: [49] <author> H.S. White. </author> <title> Bezout's theory of resultants and its influence on geometry. </title> <journal> Bulletin of the American Mathematical Society, </journal> <volume> 112 </volume> <pages> 59-68, </pages> <year> 1909. </year>
Reference-contexts: Many special cases, corresponding to n = 2; 3; 4; 5; 6 when the resultant can be expressed as the determinant of a matrix, are given in [15, 24, 40, 35]. Historical accounts of resultants and elimination theory are presented in <ref> [1, 49] </ref>. Most of the formulation presented in the classical literature correspond to computing the resultants of dense polynomial systems. In the last few decades, a number of results have appeared in the literature pertaining to the resultants of sparse polynomial systems [2, 18, 44].
Reference: [50] <author> J.H. Wilkinson. </author> <title> The algebraic eigenvalue problem. </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1965. </year>
Reference-contexts: Linear Algebra Algorithms for resultant computation deal with matrices and determinants. As a result, we utilize many properties from linear algebra for efficient resultant computation. In this section we review some techniques from linear algebra and use them in the following sections. More details are given in <ref> [19, 50] </ref>. <p> The exact criterion for similarity is defined in The Computer Journal, Vol. 36, No. 5, 1993 490 Dinesh Manocha terms of the multiplicity of the eigenvalues of M and the structure of its Jordan canonical form <ref> [50] </ref>. A matrix is called derogatory if it is not similar to the companion matrix of its characteristic polynomial.
Reference: [51] <author> W. Wu. </author> <title> On the decision problem and the mechanization of theorem proving in elementary geometry. </title> <journal> Sci-entia Sinica, </journal> <volume> 21 </volume> <pages> 150-172, </pages> <year> 1978. </year> <note> Also in Bledsoe and Loveland, </note> <editor> eds. </editor> <title> Theorem Proving: After 25 years, </title> <journal> Contemporary Mathematics, </journal> <volume> 29, </volume> <pages> 213-234. </pages>
Reference-contexts: They are Grobner bases and Ritt-Wu's algorithm. The algorithm for Grobner bases generates special bases for polynomial ideals and was originally formulated by Buchberger [5, 6]. Eliminating a set of variables is a special application of Grobner bases. Ritt-Wu's algorithm for variable elimination has been developed by Wu Wen-Tsun <ref> [51] </ref> using an idea proposed by Ritt [42]. This approach is based on Ritt's characteristic set construction and successfully applied to automated geometry theorem proving by Wu. All these methods of elimination are surveyed in [28].
Reference: [52] <author> R. Zippel. </author> <title> Interpolating polynomials from their values. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9 </volume> <pages> 375-403, </pages> <year> 1990. </year> <journal> The Computer Journal, </journal> <volume> Vol. 36, No. 5, </volume> <year> 1993 </year>
Reference-contexts: By choosing different substitutions for (x 1 ; . . . ; x n ) and computing the corresponding F (x 1 ; . . . ; x n ) (expressed as determinants of numeric matrices) the problem is reduced to that of multivari-ate interpolation <ref> [4, 52] </ref>. Since there are q monomials, we need to choose q distinct substitutions and solve the resulting q fi q system of linear equations using standard Gaussian elimination. The running time of the resulting algorithm is O (q 3 ) and takes O (q 2 ) space. <p> As far as solving transposed Vandermonde systems is concerned, simple algorithms of time complexity O (q 2 ) and O (q) space requirements are known <ref> [52] </ref>. In Kaltofen and Laks-man [27], an improved algorithm of time complexity O (M (q)log (q)) is presented, where M (q) is the time complexity of multiplying two univariate polynomials of degree q. <p> As a result, Ben-Or and Tiwari's algorithm is not well suited for our application. 3.3. Probabilistic Interpolation Zippel has presented a probabilistic algorithm for interpolation which does not expect any bound on the nonzero terms of the polynomial being interpolated <ref> [52] </ref>. It expects a bound on the degree of each variable in any monomial. Such a bound is easy to compute for a symbolic determinant. In fact, this bound is tight for resultant applications. <p> As a result its performance is output sensitive and depends on the actual number of terms in the polynomial. We present a brief outline of the algorithm below. It has been explained in detail in <ref> [52] </ref>. Choose n random numbers r 1 ; . . . ; r n from the coefficient field used for defining the polynomial coefficients. The algorithm proceeds inductively and introduces a variable at each stage. <p> Let us assume that r i 's are chosen uniformly randomly from a set of size S, than the probability that this algorithm gives a wrong answer is less than nd 2 q 2 ; (3) where d = max (d 1 ; . . . ; d n ) <ref> [52] </ref>. Later on we use this probability bound for the choice of finite fields used for modular computation. The running time of the algorithm is O (ndq 2 + m 3 ndq). <p> The running time of the algorithm is O (ndq 2 + m 3 ndq). A deterministic version of this algorithm of complexity O (ndq 2 T + m 3 ndqT ) is given in <ref> [52] </ref> as well. T is an upper bound on the number of non-zero terms in the polynomial. In the worst case, T corresponds to q 1 or q 2 . However, the resulting algorithm has better average complexity than the deterministic sparse or dense interpolation algorithms.
References-found: 52

