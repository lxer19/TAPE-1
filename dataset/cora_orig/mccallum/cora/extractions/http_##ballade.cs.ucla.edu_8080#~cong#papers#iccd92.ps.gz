URL: http://ballade.cs.ucla.edu:8080/~cong/papers/iccd92.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: An Improved Graph-Based FPGA Technology Mapping Algorithm For Delay Optimization  
Author: Jason Cong, Yuzheng Ding, Andrew B. Kahng, Peter Trajmar Kuang-Chien Chen 
Address: Los Angeles, CA 90024  3055 Orchard Drive, San Jose, CA 95134  
Affiliation: Department of Computer Science University of California,  Fujitsu America, Inc.  
Abstract: We present a graph based technology mapping algorithm, called DAG-Map, for delay optimization in lookup-table based FPGA designs. Our algorithm carries out technology mapping and delay optimization on the entire Boolean network, instead of decomposing it into fanout-free trees and mapping each tree separately as in most previous algorithms. As a preprocessing step, we introduce a general algorithm which transforms an arbitrary n-input network into a two-input network with only O (1) factor increase in the network depth; previous transformation procedures may result in an W(logn) factor of increase. We also present a graph matching based technique used as a postprocessing step which optimizes the area without increasing the delay. We tested the DAG-Map algorithm on the MCNC logic synthesis benchmarks. Compared with previous algorithms (Chortle-d and MIS-pga), DAG-Map reduces both the network depth and the number of lookup-tables. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brayton, R. K., R. Rudell, and A. L. Sangiovanni-Vincentelli, </author> <title> ``MIS: A Multiple-Level Logic Optimization,'' </title> <journal> IEEE Transactions on CAD, </journal> <pages> pp. 1062-1081, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: We use the technology decomposition command tech_decomp -o 1000 -a 1000 in MIS <ref> [1] </ref> to realize such a transformation. A straightforward way to transform an n-node arbitrary network into a two-input network is to replace each m-input gate (m 3) by a balanced binary tree.
Reference: [2] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, ``DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization,'' </title> <journal> IEEE Design and Test of Computers , 1992, </journal> <note> to appear. </note>
Reference-contexts: We see that the level of v increases from 7 to 8. In general, such a straightforward transformation may increase the network depth by an W (logn) factor <ref> [2] </ref>. However, if we replace v by the binary tree shown in Fig. 1 (c), the level of v remains 7. <p> Then, we have depth (G) log (2d - 1) . (depth (G) - 1) + log2I where d is the maximum degree of fanout in G and I is the number of PI nodes in G. ` The proof is given in <ref> [2] </ref>. A similar result was obtained by Hoover et al. for bounding fanout in a Boolean network [9]. <p> practice d is bounded by a constant (the fanout limit of any output), the depth of the two-input network G is increased by just a small constant factor log (2d -1) away from depth (G). 4 A pathological example for the balanced binary tree based transformation can be found in <ref> [2] </ref>, where the balanced binary tree based transformation increases the network depth by an W (logn) factor even when d =1. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 4 Here we assume that depth (G) = W (log2I), which is true for most networks in practice. <p> Theorem 2 For any integer K, if the given Boolean network is a tree with fanin no more than K at each node, the DAG-Map algorithm produces a minimum depth mapping solution for K-LUT based FPGAs. ` The proof is included in <ref> [2] </ref>. Recall that a similar result was shown for Chortle-d in [6], but it holds only for K 6 since the bin-packing heuristics are no longer optimal for K &gt; 6. 6 Although the DAG-Map algorithm is optimal for trees, it may not be optimal for general networks. <p> For example, if we limit the number of gates a programmable logic block may cover, it will be a monotone constraint. Unfortunately, the constraint on the number of distinct inputs of each programmable logic block is monotone only for trees. Pathological examples can be found in <ref> [2] </ref>. 3.3. Area Optimization Without Increasing Delay After we obtain a mapping solution of minimum depth, we apply two operations for area optimization as a post-processing step. These operations reduce the number of K-LUTs in the mapping solution without increasing the network depth.

Reference: [4] <author> Detjens, E., G. Gannot, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang, </author> <title> ``Technology Mapping in MIS,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 116-119, </pages> <year> 1987. </year>
Reference-contexts: 1. Introduction The technology mapping problem is to implement a synthesized Boolean network using logic cells from a prescribed cell family. Much work has been done on the technology mapping problem for conventional gate array or standard cell designs (e.g. <ref> [12, 4] </ref>.) However, these methods do not apply immediately to the technology mapping problem for lookup-table based FPGAs [19] since a K-input lookup-table (K-LUT) can implement any one of 2 2 K K-input logic gates, and consequently the equivalent cell family is too large to be manipulated efficiently.
Reference: [5] <author> Francis, R. J., J. Rose, and K. Chung, ``Chortle: </author> <title> A Technology Mapping Program for Lookup Table-Based Field Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <year> 1990. </year>
Reference-contexts: Recently, a number of technology mapping algorithms have been proposed for area optimization in lookup-table based FPGA designs. These include the MIS-pga program developed by Murgai et al. [14] and its improved version MIS-pga (new) [16], the Chortle program and its successor Chortle-crf, developed by Francis et al. <ref> [5, 7] </ref>, the Xmap program developed by Karplus [11], and an algorithm proposed by Woo [18]. The objective of these algorithms is to minimize the number of programmable logic blocks in the mapping solution.
Reference: [6] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping of Lookup Table-Based FPGAs for Performance,'' </title> <booktitle> Proc. Int'l Conf. Computer-Aided Design, </booktitle> <pages> pp. 568-571, </pages> <month> Nov., </month> <year> 1991. </year>
Reference-contexts: The objective of these algorithms is to minimize the number of programmable logic blocks in the mapping solution. Previous work on FPGA mapping for delay optimization consists of Chortle-d, developed by Francis et al. <ref> [6] </ref>, and the MIS-pga (delay) extension, developed by Murgai et al. [15]. The Chortle-d algorithm first decomposes the network into fanout-free trees and then uses dynamic programming and bin-packing heuristics to map each tree independently. <p> Our algorithm carries out technology mapping and delay optimization on the entire Boolean network without decomposing it into trees. Our algorithm is optimal for trees for any K-LUTs while Chortle-d is optimal for trees only when K 6 <ref> [6] </ref>. Moreover, as a preprocessing step, we introduce a general algorithm for transforming an arbitrary n-node network into a two-input network with only an O (1) factor of increase in the network depth, while the previous transformation procedure may result in an W (logn) factor of increase. <p> The second step maps the two-input network into a K-LUT FPGA network for delay minimization. The third step performs area optimization of the FPGA network without increasing the network delay. 3.1. Transforming Arbitrary Networks into Two-Input Networks As in <ref> [7, 6] </ref>, we assume that each node in the given Boolean network is a simple gate (i.e. <p> Recall that a similar result was shown for Chortle-d in <ref> [6] </ref>, but it holds only for K 6 since the bin-packing heuristics are no longer optimal for K &gt; 6. 6 Although the DAG-Map algorithm is optimal for trees, it may not be optimal for general networks. <p> Experimental Results We have implemented the DAG-Map algorithm and tested it on a set of MCNC benchmark examples. We chose K = 5. For each benchmark example, we first used a standard MIS script (used by Chortle-d <ref> [6] </ref>) on the initial network to perform area minimization. Next, we applied the DMIG algorithm to transform the network into a two-input network. We then used DAG-map to map into a 5-LUT network. Finally, the matching based postprocessing step was performed. <p> We then used DAG-map to map into a 5-LUT network. Finally, the matching based postprocessing step was performed. Table 1 shows the comparison of the results of our algorithm with those of the Chortle-d algorithm (quoted from <ref> [6] </ref>) and those of the mapping phase of MIS-pga delay optimization algorithm (quoted from [15]). Overall, the solutions of Chortle-d used 59% more lookup-tables and had 2% larger network depth, and the solutions of MIS-pga (delay) used 3% more lookup-tables and had 6% larger network depth.
Reference: [7] <author> Francis, R. J., J. Rose, and Z. Vranesic, ``Chortle-crf: </author> <title> Fast Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <year> 1991. </year>
Reference-contexts: Recently, a number of technology mapping algorithms have been proposed for area optimization in lookup-table based FPGA designs. These include the MIS-pga program developed by Murgai et al. [14] and its improved version MIS-pga (new) [16], the Chortle program and its successor Chortle-crf, developed by Francis et al. <ref> [5, 7] </ref>, the Xmap program developed by Karplus [11], and an algorithm proposed by Woo [18]. The objective of these algorithms is to minimize the number of programmable logic blocks in the mapping solution. <p> The second step maps the two-input network into a K-LUT FPGA network for delay minimization. The third step performs area optimization of the FPGA network without increasing the network delay. 3.1. Transforming Arbitrary Networks into Two-Input Networks As in <ref> [7, 6] </ref>, we assume that each node in the given Boolean network is a simple gate (i.e. <p> These operations reduce the number of K-LUTs in the mapping solution without increasing the network depth. In this sub-section, each node is a K-LUT in the mapping solution. The first operation is gate decomposition, inspired by the gate decomposition concept used in Chortle-crf <ref> [7] </ref>. The basic idea is as follows.
Reference: [8] <author> Gabow, H., </author> <title> ``An Efficient Implementation of Edmonds' Algorithm for Maximum Matching on Graphs,'' </title> <journal> Journal of the ACM, </journal> <volume> Vol. 23, </volume> <pages> pp. 221-234, </pages> <month> Apr. </month> <year> 1976. </year>
Reference-contexts: The experimental results show that this matching based merging algorithm usually converges after only one or two iterations. The maximum graph matching problem can be solved in O (n 3 ) time <ref> [8] </ref>. 4. Experimental Results We have implemented the DAG-Map algorithm and tested it on a set of MCNC benchmark examples. We chose K = 5. For each benchmark example, we first used a standard MIS script (used by Chortle-d [6]) on the initial network to perform area minimization.
Reference: [9] <author> Hoover, H. J., M. M. Klawe, and N. J. Pippenger, </author> <title> ``Bounding Fan-out in Logic Networks,'' </title> <journal> Journal of the ACM, </journal> <volume> Vol. 31, </volume> <pages> pp. 13-18, </pages> <month> Jan. </month> <year> 1984. </year>
Reference-contexts: A similar result was obtained by Hoover et al. for bounding fanout in a Boolean network <ref> [9] </ref>.
Reference: [10] <author> Huffman, D. A., </author> <title> ``A method for the construction of minimum redundancy codes,'' </title> <booktitle> Proc. IRE 40, </booktitle> <pages> pp. 1098-1101, </pages> <year> 1952. </year>
Reference-contexts: We process all the nodes in G in topological order starting from PI nodes. For each multiple-input node v, we construct a binary tree T (v) to replace v using an algorithm similar to Huffman's algorithm for constructing a prefix code of minimum average length <ref> [10] </ref>. Writing input (v) = -u 1 , u 2 , ..., u m -, we note that nodes u 1 , u 2 , ..., u m have been processed before v and their levels in the new network G are fixed.
Reference: [11] <author> Karplus, K., ``Xmap: </author> <title> A Technology Mapper for Table-lookup Field-Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 240-243, </pages> <year> 1991. </year>
Reference-contexts: These include the MIS-pga program developed by Murgai et al. [14] and its improved version MIS-pga (new) [16], the Chortle program and its successor Chortle-crf, developed by Francis et al. [5, 7], the Xmap program developed by Karplus <ref> [11] </ref>, and an algorithm proposed by Woo [18]. The objective of these algorithms is to minimize the number of programmable logic blocks in the mapping solution.
Reference: [12] <author> Keutzer, K., ``DAGON: </author> <title> Technology Binding and Local Optimization by DAG Matching,'' </title> <booktitle> Proc. 24th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 341-347, </pages> <year> 1987. </year>
Reference-contexts: 1. Introduction The technology mapping problem is to implement a synthesized Boolean network using logic cells from a prescribed cell family. Much work has been done on the technology mapping problem for conventional gate array or standard cell designs (e.g. <ref> [12, 4] </ref>.) However, these methods do not apply immediately to the technology mapping problem for lookup-table based FPGAs [19] since a K-input lookup-table (K-LUT) can implement any one of 2 2 K K-input logic gates, and consequently the equivalent cell family is too large to be manipulated efficiently.
Reference: [13] <author> Lawler, E. L., K. N. Levitt, and J. Turner, </author> <title> ``Module Clustering to Minimize Delay in Digital Networks,'' </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. </volume> <pages> C-18(1) pp. 47-57, </pages> <month> January </month> <year> 1969. </year>
Reference-contexts: Technology Mapping for Delay Minimiza--tion After we obtain a two-input Boolean network, we carry out technology mapping directly on the entire network. We use a method similar to that of Lawler et al. for module clustering to minimize delay in Boolean networks <ref> [13] </ref>. The mapping is performed in two steps: we first label the network to determine the level of each node in the final mapping solution, and then we generate the logically equivalent network of K-LUTs. <p> In general, DAG-Map is optimal if the mapping constraint for each programmable logic block is monotone. A constraint X is monotone if a network H satisfying constraint X implies that any subgraph of H also satisfies X <ref> [13] </ref>. For example, if we limit the number of gates a programmable logic block may cover, it will be a monotone constraint. Unfortunately, the constraint on the number of distinct inputs of each programmable logic block is monotone only for trees. Pathological examples can be found in [2]. 3.3.
Reference: [14] <author> Murgai, R., et al, </author> <title> ``Logic Synthesis Algorithms for Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 620-625, </pages> <year> 1990. </year>
Reference-contexts: Recently, a number of technology mapping algorithms have been proposed for area optimization in lookup-table based FPGA designs. These include the MIS-pga program developed by Murgai et al. <ref> [14] </ref> and its improved version MIS-pga (new) [16], the Chortle program and its successor Chortle-crf, developed by Francis et al. [5, 7], the Xmap program developed by Karplus [11], and an algorithm proposed by Woo [18].
Reference: [15] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Performance Directed Synthesis for Table Look Up Programmable Gate Arrays,'' </title> <booktitle> Proc. Int'l Conf. Computer-Aided Design, </booktitle> <pages> pp. 572-575, </pages> <month> Nov., </month> <year> 1991. </year>
Reference-contexts: The objective of these algorithms is to minimize the number of programmable logic blocks in the mapping solution. Previous work on FPGA mapping for delay optimization consists of Chortle-d, developed by Francis et al. [6], and the MIS-pga (delay) extension, developed by Murgai et al. <ref> [15] </ref>. The Chortle-d algorithm first decomposes the network into fanout-free trees and then uses dynamic programming and bin-packing heuristics to map each tree independently. <p> Finally, the matching based postprocessing step was performed. Table 1 shows the comparison of the results of our algorithm with those of the Chortle-d algorithm (quoted from [6]) and those of the mapping phase of MIS-pga delay optimization algorithm (quoted from <ref> [15] </ref>). Overall, the solutions of Chortle-d used 59% more lookup-tables and had 2% larger network depth, and the solutions of MIS-pga (delay) used 3% more lookup-tables and had 6% larger network depth.
Reference: [16] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Improved Logic Synthesis Algorithms for Table Look Up Architectures ,'' Proc. </title> <booktitle> Int'l Conf. Computer-Aided Design, </booktitle> <pages> pp. 564-567, </pages> <month> Nov., </month> <year> 1991. </year>
Reference-contexts: Recently, a number of technology mapping algorithms have been proposed for area optimization in lookup-table based FPGA designs. These include the MIS-pga program developed by Murgai et al. [14] and its improved version MIS-pga (new) <ref> [16] </ref>, the Chortle program and its successor Chortle-crf, developed by Francis et al. [5, 7], the Xmap program developed by Karplus [11], and an algorithm proposed by Woo [18]. The objective of these algorithms is to minimize the number of programmable logic blocks in the mapping solution.
Reference: [17] <author> Roth, J. P. and R. M. Karp, </author> <title> ``Minimization Over Boolean Graphs,'' </title> <journal> IBM Journal of Research and Development, </journal> <pages> pp. 227-238, </pages> <month> April </month> <year> 1962. </year>
Reference-contexts: Moreover, the decomposed node v has one fewer input (which is beneficial to subsequent area optimization operations). Figure 3 illustrates the gate decomposition operation. This method can be generalized to the case where the decomposed node v implements a complex function. We use Roth-Karp decomposition <ref> [17] </ref> to determine if the node can be feasibly decomposed to v ij and v preceding paragraph. Although Roth-Karp decomposition runs in exponential time in general, it takes only constant time in our algorithm, since the number of fanins of a K-LUT is bounded by the small constant K.
Reference: [18] <author> Woo, N.-S., </author> <title> ``A Heuristic Method for FPGA Technology Mapping Based on the Edge Visibility,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 248-251, </pages> <year> 1991. </year>
Reference-contexts: These include the MIS-pga program developed by Murgai et al. [14] and its improved version MIS-pga (new) [16], the Chortle program and its successor Chortle-crf, developed by Francis et al. [5, 7], the Xmap program developed by Karplus [11], and an algorithm proposed by Woo <ref> [18] </ref>. The objective of these algorithms is to minimize the number of programmable logic blocks in the mapping solution. Previous work on FPGA mapping for delay optimization consists of Chortle-d, developed by Francis et al. [6], and the MIS-pga (delay) extension, developed by Murgai et al. [15].
Reference: [19] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <address> Xilinx, San Jose (1989). </address>
Reference-contexts: Much work has been done on the technology mapping problem for conventional gate array or standard cell designs (e.g. [12, 4].) However, these methods do not apply immediately to the technology mapping problem for lookup-table based FPGAs <ref> [19] </ref> since a K-input lookup-table (K-LUT) can implement any one of 2 2 K K-input logic gates, and consequently the equivalent cell family is too large to be manipulated efficiently. Recently, a number of technology mapping algorithms have been proposed for area optimization in lookup-table based FPGA designs.
References-found: 18

