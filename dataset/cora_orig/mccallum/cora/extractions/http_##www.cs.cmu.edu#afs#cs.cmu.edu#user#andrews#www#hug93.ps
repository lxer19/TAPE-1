URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/andrews/www/hug93.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/andrews/www/tps-papers.html
Root-URL: 
Email: Andrews@CS.CMU.EDU  
Title: TPS: An Interactive and Automatic Tool for Proving Theorems of Type Theory  
Author:  Peter B. Andrews Matthew Bishop Sunil Issar Dan Nesmith Frank Pfenning Hongwei Xi Contact: Peter B. Andrews 
Keyword: CATEGORY: Demonstration  
Date: 412-268-2554  
Address: Pittsburgh, PA 15213, U.S.A.  
Affiliation: Mathematics Department Carnegie Mellon University  
Abstract: This is a demonstration of TPS, a theorem proving system for classical type theory (Church's typed l-calculus). TPS can be used interactively or automatically, or in a combination of these modes. An important feature of TPS is the ability to translate between expansion proofs and natural deduction proofs. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Peter B. Andrews, </author> <title> "Transforming Matings into Natural Deduction Proofs," </title> <booktitle> in 5th Conference on Automated Deduction, </booktitle> <editor> edited by W. Bibel and R. Kowalski, Les Arcs, </editor> <booktitle> France, Lecture Notes in Computer Science 87, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980, </year> <pages> 281-292. </pages>
Reference-contexts: See <ref> [1] </ref> or [4] for more details about this formulation of natural deduction. Expansion proofs are concise Herbrand expansions of theorems of type theory.
Reference: 2. <author> Peter B. Andrews, </author> <title> Theorem Proving via General Matings, </title> <journal> Journal of the ACM 28 (1981), </journal> <pages> 193-214. </pages>
Reference-contexts: 1. Introduction This presentation is a demonstration of TPS, a theorem proving system for classical type theory (Church's typed 3 l-calculus [14]) which has been under development at Carnegie Mellon University for a number of years. TPS is based on an approach to automated theorem proving called the mating method <ref> [2] </ref>, which is essentially the same as the connection method developed independently by Bibel [13]. The mating method does not require reduction to clausal form. TPS handles two sorts of proofs, natural deduction proofs and expansion proofs. Natural deduction proofs are human-readable formal proofs. <p> When one asks TPS to find a proof automatically, it starts out by searching for an expansion proof, and then translates this into a natural deduction proof. Search procedures using outermost quantifier duplication <ref> [2] </ref> and path-focused quantifier duplication [18] [19] are implemented in TPS. TPS uses Huet's higher-order unification algorithm [17], and applies primitive substitutions [7] to introduce connectives and quantifiers in substitution terms for set variables.
Reference: 3. <author> Peter B. Andrews, Dale A. Miller, Eve Longini Cohen, Frank Pfenning, </author> <title> "Automating Higher-Order Logic," in Automated Theorem Proving: After 25 Years, edited by W. </title> <editor> W. Bledsoe and D. W. Loveland, </editor> <booktitle> Contemporary Mathematics series, </booktitle> <volume> vol. 29, </volume> <publisher> American Mathematical Society, </publisher> <year> 1984, </year> <pages> 169-192. </pages>
Reference-contexts: Considerable documentation [11], [12], [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and <ref> [3] </ref>. More information about TPS will appear in [10].
Reference: 4. <author> Peter B. Andrews, </author> <title> An Introduction to Mathematical Logic and Type Theory: To Truth Through Proof, </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: See [1] or <ref> [4] </ref> for more details about this formulation of natural deduction. Expansion proofs are concise Herbrand expansions of theorems of type theory. <p> The purely interactive facilities of TPS have been used under the name ETPS (Educational Theorem Proving System) by students in logic courses at Carnegie Mellon for a number of years to construct natural deduction proofs. ETPS contains exercises from the textbook <ref> [4] </ref>. Students quickly learn to use ETPS by reading the manual [30] (which contains several complete examples of how to construct proofs) and doing assigned exercises. ETPS was reviewed in [15].
Reference: 5. <author> Peter B. Andrews, Frank Pfenning, Sunil Issar, C. P. Klapper, </author> <title> "The TPS Theorem Proving System," </title> <booktitle> in 8th International Conference on Automated Deduction, edited by Jorg H. Siekmann, Oxford, England, Lecture Notes in Computer Science 230, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1986, </year> <pages> 663-664. 4 5 </pages>
Reference: 6. <author> Peter B. Andrews, Sunil Issar, Daniel Nesmith, Frank Pfenning, </author> <title> "The TPS Theorem Proving System," </title> <booktitle> in 9th International Conference on Automated Deduction, </booktitle> <editor> edited by Ewing Lusk and Ross Overbeek, </editor> <address> Argonne, Illinois, </address> <booktitle> Lecture Notes in Computer Science 310, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988, </year> <pages> 760-761. </pages>
Reference: 7. <author> Peter B. Andrews, </author> <title> On Connections and Higher-Order Logic, </title> <booktitle> Journal of Automated Reasoning 5 (1989), </booktitle> <pages> 257-291. </pages>
Reference-contexts: A brief explanation of them may be found in <ref> [7] </ref>, which provides an introduction to many ideas underlying TPS. [23], [24], [25], [27], [28], and [29] contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by these translations. <p> Search procedures using outermost quantifier duplication [2] and path-focused quantifier duplication [18] [19] are implemented in TPS. TPS uses Huet's higher-order unification algorithm [17], and applies primitive substitutions <ref> [7] </ref> to introduce connectives and quantifiers in substitution terms for set variables. Much must be done to explore these search procedures more thoroughly and to develop better search procedures. 3 4 3.
Reference: 8. <author> Peter B. Andrews, Sunil Issar, Dan Nesmith, Frank Pfenning, </author> <title> "The TPS Theorem Proving System," </title> <booktitle> in 10th International Conference on Automated Deduction, </booktitle> <editor> edited by M. E. Stickel, </editor> <booktitle> Kaiserslautern, FRG, Lecture Notes in Artificial Intelligence 449, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> 641-642. </pages>
Reference: 9. <author> Peter B. Andrews, Sunil Issar, Dan Nesmith, and Frank Pfenning, </author> <title> The TPS Theorem Proving System, </title> <journal> Journal of Symbolic Logic 57 (1992), </journal> <pages> 353-354. </pages> <note> (abstract) </note>
Reference: 10. <author> Peter B. Andrews, Matthew Bishop, Sunil Issar, Dan Nesmith, Frank Pfenning, Hongwei Xi. TPS: </author> <title> A Theorem Proving System for Classical Type Theory, </title> <note> 1993, unpublished. </note>
Reference-contexts: Considerable documentation [11], [12], [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in <ref> [10] </ref>.
Reference: 11. <author> Peter B. Andrews, Sunil Issar, Dan Nesmith, Frank Pfenning, Hongwei Xi, Matthew Bishop, </author> <title> TPS3 Facilities Guide for Programmers and Users, </title> <booktitle> 1993. </booktitle> <pages> 160+vii pp. </pages>
Reference-contexts: It is a large program whose uncompiled source code contains more than 100,000 lines (including comments) and occupies about 3.5 megabytes. The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation <ref> [11] </ref>, [12], [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10]. <p> The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation <ref> [11] </ref>, [12], [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10].
Reference: 12. <author> Peter B. Andrews, Sunil Issar, Dan Nesmith, Frank Pfenning, Hongwei Xi, Matthew Bishop, </author> <title> TPS3 Facilities Guide for Users, </title> <booktitle> 1993. </booktitle> <pages> 94+v pp. </pages>
Reference-contexts: It is a large program whose uncompiled source code contains more than 100,000 lines (including comments) and occupies about 3.5 megabytes. The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation [11], <ref> [12] </ref>, [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10]. <p> The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation [11], <ref> [12] </ref>, [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10].
Reference: 13. <author> Wolfgang Bibel, </author> <title> Automated Theorem Proving, </title> <publisher> Vieweg, </publisher> <address> Braunschweig, </address> <year> 1987. </year>
Reference-contexts: TPS is based on an approach to automated theorem proving called the mating method [2], which is essentially the same as the connection method developed independently by Bibel <ref> [13] </ref>. The mating method does not require reduction to clausal form. TPS handles two sorts of proofs, natural deduction proofs and expansion proofs. Natural deduction proofs are human-readable formal proofs. An example of such a proof which was produced automatically by TPS is given in Figure 1-1.
Reference: 14. <author> Alonzo Church, </author> <title> A Formulation of the Simple Theory of Types, </title> <journal> Journal of Symbolic Logic 5 (1940), </journal> <pages> 56-68. </pages>
Reference-contexts: 1. Introduction This presentation is a demonstration of TPS, a theorem proving system for classical type theory (Church's typed 3 l-calculus <ref> [14] </ref>) which has been under development at Carnegie Mellon University for a number of years. TPS is based on an approach to automated theorem proving called the mating method [2], which is essentially the same as the connection method developed independently by Bibel [13].
Reference: 15. <author> Doug Goldson and Steve Reeves, </author> <title> Using Programs to Teach Logic to Computer Scientists, </title> <journal> Notices of the American Mathematical Society 40 (1993), </journal> <pages> 143-148. </pages>
Reference-contexts: ETPS contains exercises from the textbook [4]. Students quickly learn to use ETPS by reading the manual [30] (which contains several complete examples of how to construct proofs) and doing assigned exercises. ETPS was reviewed in <ref> [15] </ref>. The basic tools in TPS for automatically applying rules of inference to construct natural deduction proofs are tactics, which can be combined using tacticals [16].
Reference: 16. <author> Michael J. Gordon, Arthur J. Milner, Christopher P. Wadsworth. </author> <title> Edinburgh LCF, </title> <booktitle> Lecture Notes in Computer Science 78, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: ETPS was reviewed in [15]. The basic tools in TPS for automatically applying rules of inference to construct natural deduction proofs are tactics, which can be combined using tacticals <ref> [16] </ref>. A tactic applies rules of inference forwards or backwards to derive new proof lines or to justify certain lines of the proof while introducing other lines which may still require justification.
Reference: 17. <author> Gerard P. Huet, </author> <title> A Unification Algorithm for Typed l-Calculus, </title> <booktitle> Theoretical Computer Science 1 (1975), </booktitle> <pages> 27-57. </pages>
Reference-contexts: Search procedures using outermost quantifier duplication [2] and path-focused quantifier duplication [18] [19] are implemented in TPS. TPS uses Huet's higher-order unification algorithm <ref> [17] </ref>, and applies primitive substitutions [7] to introduce connectives and quantifiers in substitution terms for set variables. Much must be done to explore these search procedures more thoroughly and to develop better search procedures. 3 4 3.
Reference: 18. <author> Sunil Issar, </author> <title> "Path-Focused Duplication: A Search Procedure for General Matings," </title> <booktitle> in AAAI-90. Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1990, </year> <pages> 221-226. </pages>
Reference-contexts: When one asks TPS to find a proof automatically, it starts out by searching for an expansion proof, and then translates this into a natural deduction proof. Search procedures using outermost quantifier duplication [2] and path-focused quantifier duplication <ref> [18] </ref> [19] are implemented in TPS. TPS uses Huet's higher-order unification algorithm [17], and applies primitive substitutions [7] to introduce connectives and quantifiers in substitution terms for set variables. Much must be done to explore these search procedures more thoroughly and to develop better search procedures. 3 4 3.
Reference: 19. <author> Sunil Issar. </author> <title> Operational Issues in Automated Theorem Proving Using Matings, </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year> <pages> 147 pp. </pages>
Reference-contexts: When one asks TPS to find a proof automatically, it starts out by searching for an expansion proof, and then translates this into a natural deduction proof. Search procedures using outermost quantifier duplication [2] and path-focused quantifier duplication [18] <ref> [19] </ref> are implemented in TPS. TPS uses Huet's higher-order unification algorithm [17], and applies primitive substitutions [7] to introduce connectives and quantifiers in substitution terms for set variables. Much must be done to explore these search procedures more thoroughly and to develop better search procedures. 3 4 3.
Reference: 20. <author> Sunil Issar, Peter B. Andrews, Frank Pfenning, Dan Nesmith, GRADER Manual, </author> <year> 1991. </year> <pages> 23+i pp. </pages>
Reference-contexts: It is a large program whose uncompiled source code contains more than 100,000 lines (including comments) and occupies about 3.5 megabytes. The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation [11], [12], <ref> [20] </ref>, [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10].
Reference: 21. <author> Sunil Issar, Dan Nesmith, Peter B. Andrews, Frank Pfenning, </author> <title> TPS3 Programmer's Guide, </title> <booktitle> 1992. </booktitle> <pages> 99+iii pp. </pages>
Reference-contexts: The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation [11], [12], [20], <ref> [21] </ref>, [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10].
Reference: 22. <author> Dale A. Miller, Eve Longini Cohen, Peter B. Andrews, </author> <title> "A Look at TPS," </title> <booktitle> in 6th Conference on Automated Deduction, </booktitle> <editor> edited by Donald W. Loveland, </editor> <address> New York, USA, </address> <booktitle> Lecture Notes in Computer Science 138, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1982, </year> <pages> 50-69. </pages>
Reference-contexts: Considerable documentation [11], [12], [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in <ref> [22] </ref> and [3]. More information about TPS will appear in [10].
Reference: 23. <author> Dale A. Miller. </author> <title> Proofs in Higher-Order Logic, </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1983. </year> <pages> 81 pp. </pages>
Reference-contexts: EquivWffs: 31 (33) |- lu lv [u = v] i i = lx ly "p .[lr REFLEXIVE r] p p x y i i oii oii Lambda: 32 (34) |- lu lv [u = v] i i = .lr REFLEXIVE r EquivWffs: 33 oii Expansion proofs were introduced by Miller <ref> [23] </ref>. A brief explanation of them may be found in [7], which provides an introduction to many ideas underlying TPS. [23], [24], [25], [27], [28], and [29] contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by <p> x y i i oii oii Lambda: 32 (34) |- lu lv [u = v] i i = .lr REFLEXIVE r EquivWffs: 33 oii Expansion proofs were introduced by Miller <ref> [23] </ref>. A brief explanation of them may be found in [7], which provides an introduction to many ideas underlying TPS. [23], [24], [25], [27], [28], and [29] contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by these translations.
Reference: 24. <author> Dale A. Miller, </author> <title> "Expansion Tree Proofs and Their Conversion to Natural Deduction Proofs," </title> <booktitle> in 7th International Conference on Automated Deduction, </booktitle> <editor> edited by R. E. Shostak, </editor> <address> Napa, California, USA, </address> <booktitle> Lecture Notes in Computer Science 170, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1984, </year> <pages> 375-393. </pages>
Reference-contexts: A brief explanation of them may be found in [7], which provides an introduction to many ideas underlying TPS. [23], <ref> [24] </ref>, [25], [27], [28], and [29] contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by these translations.
Reference: 25. <author> Dale A. Miller, </author> <title> A Compact Representation of Proofs, </title> <journal> Studia Logica 46 (1987), </journal> <pages> 347-370. </pages>
Reference-contexts: A brief explanation of them may be found in [7], which provides an introduction to many ideas underlying TPS. [23], [24], <ref> [25] </ref>, [27], [28], and [29] contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by these translations.
Reference: 26. <author> Dan Nesmith, Peter B. Andrews, Sunil Issar, Frank Pfenning, </author> <note> TPS User's Manual, 1991. 35+ii pp. </note>
Reference-contexts: The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation [11], [12], [20], [21], <ref> [26] </ref>, [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10].
Reference: 27. <author> Frank Pfenning, </author> <title> "Analytic and Non-analytic Proofs," </title> <booktitle> in 7th International Conference on Automated Deduction, </booktitle> <editor> edited by R. E. Shostak, </editor> <address> Napa, California, USA, </address> <booktitle> Lecture Notes in Computer Science 170, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1984, </year> <pages> 394-413. </pages>
Reference-contexts: A brief explanation of them may be found in [7], which provides an introduction to many ideas underlying TPS. [23], [24], [25], <ref> [27] </ref>, [28], and [29] contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by these translations.
Reference: 28. <author> Frank Pfenning. </author> <title> Proof Transformations in Higher-Order Logic, </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1987. </year> <pages> 156 pp. 6 </pages>
Reference-contexts: A brief explanation of them may be found in [7], which provides an introduction to many ideas underlying TPS. [23], [24], [25], [27], <ref> [28] </ref>, and [29] contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by these translations.
Reference: 29. <author> Frank Pfenning and Dan Nesmith, </author> <title> "Presenting Intuitive Deductions via Symmetric Simplification," </title> <booktitle> in 10th International Conference on Automated Deduction, </booktitle> <editor> edited by M. E. Stickel, </editor> <booktitle> Kaiserslautern, FRG, Lecture Notes in Artificial Intelligence 449, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> 336-350. </pages>
Reference-contexts: A brief explanation of them may be found in [7], which provides an introduction to many ideas underlying TPS. [23], [24], [25], [27], [28], and <ref> [29] </ref> contain extensive treatments of expansion proofs, translations between natural deduction proofs and expansion proofs, and ways of improving the natural deduction proofs obtained by these translations.
Reference: 30. <author> Frank Pfenning, Sunil Issar, Dan Nesmith, Peter B. Andrews, </author> <note> ETPS User's Manual, 1992. 48+ii pp. 6 i Table of Contents </note>
Reference-contexts: ETPS contains exercises from the textbook [4]. Students quickly learn to use ETPS by reading the manual <ref> [30] </ref> (which contains several complete examples of how to construct proofs) and doing assigned exercises. ETPS was reviewed in [15]. The basic tools in TPS for automatically applying rules of inference to construct natural deduction proofs are tactics, which can be combined using tacticals [16]. <p> The compiled core image for a Decstation 3100 occupies about 14.4 megabytes using Allegro Common Lisp, and about 31.4 megabytes using CMU Common Lisp. Considerable documentation [11], [12], [20], [21], [26], <ref> [30] </ref> has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and [3]. More information about TPS will appear in [10].
Reference: 1. <institution> Introduction 1 </institution>
Reference-contexts: See <ref> [1] </ref> or [4] for more details about this formulation of natural deduction. Expansion proofs are concise Herbrand expansions of theorems of type theory.
Reference: 2. <institution> Finding Proofs in TPS 3 </institution>
Reference-contexts: 1. Introduction This presentation is a demonstration of TPS, a theorem proving system for classical type theory (Church's typed 3 l-calculus [14]) which has been under development at Carnegie Mellon University for a number of years. TPS is based on an approach to automated theorem proving called the mating method <ref> [2] </ref>, which is essentially the same as the connection method developed independently by Bibel [13]. The mating method does not require reduction to clausal form. TPS handles two sorts of proofs, natural deduction proofs and expansion proofs. Natural deduction proofs are human-readable formal proofs. <p> When one asks TPS to find a proof automatically, it starts out by searching for an expansion proof, and then translates this into a natural deduction proof. Search procedures using outermost quantifier duplication <ref> [2] </ref> and path-focused quantifier duplication [18] [19] are implemented in TPS. TPS uses Huet's higher-order unification algorithm [17], and applies primitive substitutions [7] to introduce connectives and quantifiers in substitution terms for set variables.
Reference: 3. <institution> Features of TPS 4 </institution>
Reference-contexts: Considerable documentation [11], [12], [20], [21], [26], [30] has been written, though more is needed. The Facilities Guides [11] [12] are produced automatically. An earlier version of TPS, which contributed much to the present version, was described in [22] and <ref> [3] </ref>. More information about TPS will appear in [10].
Reference: 4. <institution> References 4 i ii </institution>
Reference-contexts: See [1] or <ref> [4] </ref> for more details about this formulation of natural deduction. Expansion proofs are concise Herbrand expansions of theorems of type theory. <p> The purely interactive facilities of TPS have been used under the name ETPS (Educational Theorem Proving System) by students in logic courses at Carnegie Mellon for a number of years to construct natural deduction proofs. ETPS contains exercises from the textbook <ref> [4] </ref>. Students quickly learn to use ETPS by reading the manual [30] (which contains several complete examples of how to construct proofs) and doing assigned exercises. ETPS was reviewed in [15].
References-found: 34

