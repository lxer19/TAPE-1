URL: http://www.cs.unc.edu/~bastos/i3d97.ps.gz
Refering-URL: http://www.cs.unc.edu/~zhangh/research.html
Root-URL: http://www.cs.unc.edu
Title: Efficient Radiosity Rendering using Textures and Bicubic Reconstruction  
Author: Rui Bastos Michael Goslin Hansong Zhang 
Keyword: CR Categories and Subject Descriptors: I.3.3 [Computer Graphics]: Picture/Image Generation Viewing Algorithm; I.3.6 [Computer Graphics]: Methodology and Techniques Interation Techniques. Additional Keywords: walkthrough, virtual world, radiosity, texture, bicubic reconstruction, unrestricted quadtree, T-vertex.  
Address: Chapel Hill  
Affiliation: Department of Computer Science University of North Carolina at  
Abstract: We present a method to speed up walkthroughs of static scenes. It involves the creation of a continuous C 1 radiosity reconstruction for adaptively sampled regions. This representation is a unified solution to handle unrestricted quadtrees and T-vertices, and allows for the generation of multiple different levels-of-detail of the radios-ity function, which are represented as texture maps. The method also involves the use of hardware bicubic filtering for the radiosity shading. Both techniques allow improvements in performance and memory usage while preserving visual appearance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> BASTOS, Rui; AUGUSTO DE SOUSA; and NUNES FERREIRA. </author> <title> Reconstruction of Illumination Functions using Bicubic Hermite Interpolation. </title> <booktitle> In 4 th Eurographics Workshop on Rendering, (Proceedings), </booktitle> <address> Paris, France, </address> <month> July </month> <year> 1993, </year> <pages> pp. 317-326. </pages>
Reference-contexts: One can see this is a good approximation inside any region between samples, except at the lines connecting neighboring samples [3] [13]. Our visual system is sensitive to derivative disconti-nuities [11] and the C 0 bilinear interpolation between neighboring regions leads to noticeable visual Mach band artifacts <ref> [1] </ref>. According to Bastos [1], a bicubic interpolation scheme can ensure up to C 1 continuity (first derivative) of the reconstructed function preventing visual Mach band artifacts that often result from bilinear interpolation. 1.1.2 Radiosity as Texture RAT The fairly regular sampling produced from an adaptive radiosity solution (figure 2) can <p> Our visual system is sensitive to derivative disconti-nuities [11] and the C 0 bilinear interpolation between neighboring regions leads to noticeable visual Mach band artifacts <ref> [1] </ref>. According to Bastos [1], a bicubic interpolation scheme can ensure up to C 1 continuity (first derivative) of the reconstructed function preventing visual Mach band artifacts that often result from bilinear interpolation. 1.1.2 Radiosity as Texture RAT The fairly regular sampling produced from an adaptive radiosity solution (figure 2) can be effectively represented as <p> Performance numbers were gathered using software developed using the Iris GL graphics library. 3.1 Continuous Representation of Radiosity We generate a continuous approximation to the radiosity function at each surface in the model using bicubic interpolation in order to ensure up to C 1 continuity. As in <ref> [1] </ref>, the bicubic Hermite form was chosen due to its use of derivative information and the relative ease of approximating these quantities from the radiosity samples. For a detailed description of the radiosity bicubic Hermite reconstruction see [1]. <p> As in <ref> [1] </ref>, the bicubic Hermite form was chosen due to its use of derivative information and the relative ease of approximating these quantities from the radiosity samples. For a detailed description of the radiosity bicubic Hermite reconstruction see [1]. Given a full quadtree data structure representing the radiosity values at the vertices of a regular subdivision of a polygon, we create a bicubic patch for the red, blue, and green color components of each leaf in the tree.
Reference: [2] <author> BASTOS, Rui; GOSLIN, Michael; and ZHANG, Hansong. </author> <title> Efficient Rendering of Radiosity using Textures and Bicubic Reconstruction. </title> <type> Technical Report TR96-025, </type> <institution> Department of Computer Science, University of North Carolina at Chapel Hill, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: increased number of geometrical primitives on contemporary graphics hardware. fl CB #3175, Sitterson Hall; Chapel Hill, NC 27599-3175 USA. email: bastos@cs.unc.edu www: http://www.cs.unc.edu/ bastos phone: +1 919 962 1703 Our method decouples shading from geometry and uses higher-order reconstruction schemes to minize the problems mentioned above without sacrificing visual appearance <ref> [2] </ref>. We first reconstruct a bicubic representation of the radiosity solution from which we can generate more efficient versions of the model. We then employ the concept of representing radiosity as texture maps in order to decouple geometry from shading. <p> We have observed comparable performance in the more restricted case of RAT models consisting mainly of large unlit 3-component textures with 12 bits per component <ref> [2] </ref>. Bilinear mode used 8 bits per component, while bicubic mode required the use of 12 bits per component. There are several disadvantagesto using bilinear interpolation for RAT models. <p> In addition, bicubic interpolation is slower than bilinear. Silicon Graphics claims fill rates of 54 million pixels per second [12], and we have observed similar performance in empirical tests with RAT models <ref> [2] </ref>. We can partially compensate for the slower performance by taking advantage of the smoother rendering of textures that comes from bicubic filtering. We can use bicubic filtered textures that are smaller than the bilinearly interpolated ones and that still have less artifacts.
Reference: [3] <author> COHEN, Michael and WALLACE, John. </author> <title> Radiosity and Realistic Image Synthesis. </title> <publisher> Academic Press, </publisher> <year> 1993. 1990. </year> <month> 1174p. </month>
Reference-contexts: This work concentrates on the use of the diffuse component by exploiting its off-line computation (prior to the walkthrough application), and view-independence. We choose to compute the diffuse interchanges between elements in a scene using the radiosity method <ref> [3] </ref> [13]. In order to obtain a very rich scene, the traditional radiosity adaptive subdivision greatly increases the number of polygons of the model. <p> In order to render a processed model, the radiosity function is reconstructed based on the computed samples. Usually, the reconstruction function is bilinear interpolation of neighboring samples. One can see this is a good approximation inside any region between samples, except at the lines connecting neighboring samples <ref> [3] </ref> [13]. Our visual system is sensitive to derivative disconti-nuities [11] and the C 0 bilinear interpolation between neighboring regions leads to noticeable visual Mach band artifacts [1]. <p> not waste texture memory, we scale every radiosity texture to have a power of 2 dimension and take full advantage of available texture memory on the RealityEngine 2 . 3.3 Unrestricted Quadtrees and T-vertices Radiosity adaptive subdivision can generate unbalanced quadtrees with nonconforming elements in regions with different mesh densities <ref> [3] </ref>, [13]. Figure 2 presents an example where neighboring elements have different levels of subdivision creating T-vertices in the mesh (vertices 9 and 10). <p> This generates a visual discontinuity along the edges supporting that vertex (6-10 and 10-8) [11]. Several solutions to the T-vertex problem have been proposed in the finite element literature and the most important are: replace computed value with interpolated value at that point <ref> [3] </ref>; or use restricted quadtrees and triangulate the larger element that neighbors the T-vertex. Our solution is based on a recursive bicubic reconstruction.
Reference: [4] <author> GOSLIN, Michael. </author> <title> Illumination As Texture Maps For Faster Rendering, </title> <type> Technical Report TR95-042, </type> <institution> Department of Computer Science, University of North Carolina at Chapel Hill, </institution> <year> 1995. </year>
Reference-contexts: This can significantly increase rendering performance on current graphics hardware that support advanced texture mapping capabilities <ref> [4] </ref>. Heckbert [5] proposed the use of texture mapping as an alternative to the mesh based radiosity approach in 1990. In his approach the energy arriving at a surface is computed using Monte Carlo ray tracing and stored at texels of radiosity textures (rexes).
Reference: [5] <author> HECKBERT, Paul. </author> <title> Adaptive Radiosity Textures for Bidirectional Ray Tracing. </title> <booktitle> In Computer Graphics Proceedings, </booktitle> <pages> pp. 145-154, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: This can significantly increase rendering performance on current graphics hardware that support advanced texture mapping capabilities [4]. Heckbert <ref> [5] </ref> proposed the use of texture mapping as an alternative to the mesh based radiosity approach in 1990. In his approach the energy arriving at a surface is computed using Monte Carlo ray tracing and stored at texels of radiosity textures (rexes).
Reference: [6] <author> LISCHINSKI, D.; TAMPIERI, F.; GREENBERG, D. </author> <title> Discontinuity Meshing for Accurate Radiosity. </title> <booktitle> In IEEE Computer Graphics and Applications, </booktitle> <address> 12:6, </address> <month> November </month> <year> 1992, </year> <pages> 25-39. </pages>
Reference-contexts: We start with a polygonal model that is processed using radiosity software from Lightscape c fl Technologies. As a preprocessing for the radiosity method we apply a discontinuity meshing <ref> [6] </ref> program in order to capture the main discontinuities in the radiosity function beforehand. The radiosity function is then reconstructed in two separated phases.
Reference: [7] <author> MITCHELL, Don; and NETTRAVALI, Arun. </author> <title> Reconstruction Filters in Computer Graphics. </title> <booktitle> In Computer Graphics Proceedings, </booktitle> <pages> pp. 221-228, </pages> <publisher> ACM SIG-GRAPH, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: This suggests the use of bicubic filtering [12] at the final rendering phase. Such a mode is available on current RealityEngine 2 systems. In order to render our textures smoothly, we replaced the default filter with a bicubic filter (1/3, 1/3) as described by Mitchell and Ne-travali <ref> [7] </ref>. Radiosity textures rendered with bicubic filtering do not show the Mach band artifacts that appear when the same textures are rendered using bilinear interpolation (figures 3.(g) and (f)). These textures appear smooth even when magnified greatly on screen. <p> These textures appear smooth even when magnified greatly on screen. However, the bicubic filtering is subject to ringing and blurring effects and it is often necessary to trade off one type of distortion for another <ref> [7] </ref>. Figure 3.(g) shows the blurring effect when compared to figures 3.(b) and 3.(e). Because the bicubic filter effectively blurs the image, we lose some of the contrast in exchange for elimination of the Mach band artifacts. <p> Because the bicubic filter effectively blurs the image, we lose some of the contrast in exchange for elimination of the Mach band artifacts. Results similar to the Hermite bicubic reconstruction of figure 3.(e) are possible to obtain with the same hardware resources <ref> [7] </ref>. However, they would be slower (two convolutions per pixel instead of only one) and would require twice the texture memory (radiosity samples and gradient samples). In addition, bicubic interpolation is slower than bilinear.
Reference: [8] <author> M OLLER, Tomas. </author> <title> Radiosity Techniques for Virtual Reality Faster Reconstruction and Support for Levels of Detail, </title> <address> WSCG'96, 12-16thFebruary 1996, Plzen, Czech Republic. </address>
Reference-contexts: In situations where there are mesh-based artifacts in the lighting solution, they re-calculate the solution directly to the texture map itself by applying radiosity sampling at locations corresponding to texels. Radiosity texture maps are rendered using bilinear texture interpolation on a Silicon Graphics RealityEngine. Moller <ref> [8] </ref> describes a method to replace radiosity solutions for NURBS (geometry) models with a single texture map. This allows for multiple different levels-of-detail of the model with the same illumination texture map. <p> However, when converting a nonfull quadtree into a texture, the nonsampled points in the quadtree have to be evaluated from the given surrounding points in order to produce a full quadtree. A simple solution is bilinear interpolation <ref> [8] </ref>, which produces almost the same results as the Gouraud shading of the mesh associated with the sparse quadtree and does not improve smoothness if resampled at higher rates.
Reference: [9] <author> MOLNAR, Steven; EYLES, John; POULTON, John. PixelFlow: </author> <title> High-Speed Rendering Using Image Composition, </title> <journal> SIGGRAPH'92, </journal> <volume> vol. 26, no. 2, </volume> <month> July </month> <year> 1992, </year> <pages> p. 231-240. </pages>
Reference-contexts: This implies hardware support for a polygonal primitive with an associated continuous function that describes its color value at every point. We present two solutions: PixelFlow: Such support is available using the deferred shading capability of the PixelFlow architecture <ref> [9] </ref>. We propose to investigate further implementations of rendering directly from the initial reconstruction of the radiosity function using this platform when it becomes available. Custom Hardware for Bicubic Interpolation: A hardware implementation of a graphics primitive that uses bicubic interpolation has been studied.
Reference: [10] <author> MYSZKOWSKI, Karol; and KUNII, Tosiyasu L. </author> <title> Texture Mapping as an Al ternative for Meshing During Walkthrough Animation. </title> <booktitle> In 5 th Eurographics Workshop on Rendering (Proceedings), </booktitle> <address> Darmstadt, Germany, </address> <month> June 13-15, </month> <year> 1994. </year>
Reference-contexts: Uniform adaptive sampling is supported that organizes rexes into quadtrees. During rendering, radiosity at any pixel in the final image is approximated using bilinear interpolation. Due to the Monte Carlo ray tracing and the bilinear reconstruction step, Heckbert's approach can generate noisy and discontinuous images. Myszowski and Kunii <ref> [10] </ref> describe a method to replace the most complex radiosity mesh areas with texture maps based on available texture memory and the number of mesh elements that would be eliminated. <p> We would clearly prefer not to introduce any new artifacts during this second reconstruction. A second disadvantage of bilinear interpolation are the same Mach band artifacts that appear when even very dense textures become magnified excessively, as described by Mys-zowski <ref> [10] </ref>. Since we assume the shading function is smoothly continuous inside each polygon (ensured by the discontinuity meshing), we want to have that same smoothness when rendering the radiosity texture. This suggests the use of bicubic filtering [12] at the final rendering phase.
Reference: [11] <author> RATLIFF, F. </author> <title> Contours and Contrast Scientific American, </title> <booktitle> 226(6) </booktitle> <pages> 91-101, </pages> <month> June </month> <year> 1972. </year>
Reference-contexts: Usually, the reconstruction function is bilinear interpolation of neighboring samples. One can see this is a good approximation inside any region between samples, except at the lines connecting neighboring samples [3] [13]. Our visual system is sensitive to derivative disconti-nuities <ref> [11] </ref> and the C 0 bilinear interpolation between neighboring regions leads to noticeable visual Mach band artifacts [1]. <p> This generates a visual discontinuity along the edges supporting that vertex (6-10 and 10-8) <ref> [11] </ref>. Several solutions to the T-vertex problem have been proposed in the finite element literature and the most important are: replace computed value with interpolated value at that point [3]; or use restricted quadtrees and triangulate the larger element that neighbors the T-vertex.
Reference: [12] <institution> SGI White Paper. </institution>
Reference-contexts: The usual reconstruction technique for rendering textures is bilinear interpolation. This type of interpolation is readily available and fast on current hardware such as RealityEngine 2 , with published fill rates of 320 million pixels per second <ref> [12] </ref>. We have observed comparable performance in the more restricted case of RAT models consisting mainly of large unlit 3-component textures with 12 bits per component [2]. Bilinear mode used 8 bits per component, while bicubic mode required the use of 12 bits per component. <p> Since we assume the shading function is smoothly continuous inside each polygon (ensured by the discontinuity meshing), we want to have that same smoothness when rendering the radiosity texture. This suggests the use of bicubic filtering <ref> [12] </ref> at the final rendering phase. Such a mode is available on current RealityEngine 2 systems. In order to render our textures smoothly, we replaced the default filter with a bicubic filter (1/3, 1/3) as described by Mitchell and Ne-travali [7]. <p> However, they would be slower (two convolutions per pixel instead of only one) and would require twice the texture memory (radiosity samples and gradient samples). In addition, bicubic interpolation is slower than bilinear. Silicon Graphics claims fill rates of 54 million pixels per second <ref> [12] </ref>, and we have observed similar performance in empirical tests with RAT models [2]. We can partially compensate for the slower performance by taking advantage of the smoother rendering of textures that comes from bicubic filtering.
Reference: [13] <author> SILLION, Francois X. and PUECH, Claude. </author> <title> Radiosity and Global Illumina tion, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year> <title> (software) bicubic reconstruction of image (a) with 8x8 resampling. (d) Bilinear software reconstruction of image (a) with 256x256 resampling. (e) Bicubic software reconstruction of image (a) with 256x256 resampling. (f) Bilinear hardware filtering of image (c) with 256x256 resampling. (g) Bicubic hardware filtering of image (c) with 256x256 resampling. </title>
Reference-contexts: This work concentrates on the use of the diffuse component by exploiting its off-line computation (prior to the walkthrough application), and view-independence. We choose to compute the diffuse interchanges between elements in a scene using the radiosity method [3] <ref> [13] </ref>. In order to obtain a very rich scene, the traditional radiosity adaptive subdivision greatly increases the number of polygons of the model. <p> In order to render a processed model, the radiosity function is reconstructed based on the computed samples. Usually, the reconstruction function is bilinear interpolation of neighboring samples. One can see this is a good approximation inside any region between samples, except at the lines connecting neighboring samples [3] <ref> [13] </ref>. Our visual system is sensitive to derivative disconti-nuities [11] and the C 0 bilinear interpolation between neighboring regions leads to noticeable visual Mach band artifacts [1]. <p> waste texture memory, we scale every radiosity texture to have a power of 2 dimension and take full advantage of available texture memory on the RealityEngine 2 . 3.3 Unrestricted Quadtrees and T-vertices Radiosity adaptive subdivision can generate unbalanced quadtrees with nonconforming elements in regions with different mesh densities [3], <ref> [13] </ref>. Figure 2 presents an example where neighboring elements have different levels of subdivision creating T-vertices in the mesh (vertices 9 and 10).
References-found: 13

