URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-94-1213/CS-TR-94-1213.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-94-1213/
Root-URL: http://www.cs.wisc.edu
Title: Experiments with Parallel Graph Coloring Heuristics five types of test data, three are easily colored
Author: Gary Lewandowski Anne Condon 
Note: Of the  appears to be very hard. However, it should not be concluded that coloring  This appears to be  lewandow@cs.wisc.edu. Work supported by NSF grants numbers CCR-9257241 and DCR-9208639 condon@cs.wisc.edu. Work supported by NSF grant number CCR-9257241  
Date: January 1994  
Address: Madison  
Affiliation: Computer Science Department University of Wisconsin at  
Abstract: We report on experiments with a new hybrid graph coloring algorithm, which combines a parallel version of Morgenstern's S-Impasse algorithm [20], with exhaustive search. We contribute new test data arising in five different application domains, including register allocation and class scheduling. We test our algorithms both on this test data and on several types of randomly generated graphs. We compare our parallel implementation, which is done on the CM-5, with two simple heuristics, the Saturation algorithm of Brelaz [4] and the Recursive Largest First (RLF) algorithm of Leighton [18]. We also compare our results with previous work reported by Morgenstern [20] and Johnson et al. [13]. Our main results are as follows. * On the randomly generated graphs, the performance of Hybrid is consistently better than the sequential algorithms, both in terms of speed and number of colorings produced. However, on large random graphs, our algorithms do not come close to the best colorings found by other time-intensive algorithms such as the XRLF algorithm of Johnson et al. [13] and Morgenstern's tuned S-Impasse algorithm. Overall, we are satisfied that our parallel algorithm effectively exploits the processing power of the CM-5, and that further work on a hybrid algorithm can lead to even better results. Since the performance of all the implemented algorithms on random graphs does not correlate well with their performance on application data, we conclude that further effort spent in collecting application data is well justified, and suggest that new generators, which model the structure of application data, be investigated. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Appel, K. I., W. Haken and J. Koch. </author> <title> Every planar map is four colorable, Part I: </title> <journal> Discharging, Illinois Journal of Mathematics, </journal> <volume> 21, </volume> <year> 1977, </year> <note> 429- 490. </note>
Reference-contexts: Subsequent work on that problem not only spurred the development of graph theory, but ultimately led to the famous four-color theorem of Appel and Haken <ref> [1] </ref>, based on an extensive computer search. Graph coloring has many uses beyond map coloring, and one would expect that computers can be used to solve not just the four-color problem, but general graph coloring problems.
Reference: [2] <author> R. Azencott, </author> <title> Editor. Simulated Annealing: Parallelization Techniques, </title> <address> New York, </address> <publisher> John Wiley and Sons, </publisher> <year> 1992. </year>
Reference-contexts: studies of simulated annealing algorithms for other applications indicate that if the number of processors is small, this is a reasonable approach to parallelizing the S-Impasse algorithm, because the more paths that are explored independently, the smaller the expected time for one to reach a new best coloring. (See Azencott <ref> [2] </ref>, for example.) We later show that this is in fact true for the S-Impasse algorithm on our test data. Another advantage of this parallel approach is that, since the computation of distinct processors is almost completely independent, the amount of interprocessor communication is kept to a minimum.
Reference: [3] <author> B. Bollobas and A. Thomason. </author> <title> Random Graphs of Small Order. </title> <journal> Ann. Discrete Math. </journal> <volume> 28 1985, </volume> <pages> 47-97. </pages>
Reference: [4] <author> Brelaz, D. </author> <title> New methods to color vertices of a graph, </title> <journal> Communications of the ACM, </journal> <volume> 22, </volume> <year> 1979, </year> <pages> 251-256. </pages>
Reference-contexts: There is a fairly extensive body of literature on experimental graph coloring algorithms. These have been tested primarily on random graphs, such as the G n;p graphs mentioned above. One of the simplest coloring algorithms is the Saturation algorithm of Brelaz <ref> [4] </ref>. It is based on the following principle: the vertex which is adjacent to the greatest number of differently-colored neighbors is colored first, with a new color if necessary.
Reference: [5] <author> G.J. Chaitin and M. Auslander and A.K. Chandra and J. Cocke and M.E. Hopkins and P. Markstein, </author> <title> Register Allocation via Coloring, </title> <journal> Computer Languages, </journal> <volume> 6, </volume> <year> 1981, </year> <pages> 47-57. </pages>
Reference-contexts: Garey, Johnson and So [8] showed that graph coloring can be used for short circuit testing for printed circuits. Chaitin <ref> [5, 6] </ref> reduced register allocation to graph coloring and used it in a compiler. Poole and Ortega [22] showed how to use graph coloring to decompose matrices used to solve sparse systems of linear equations; the decomposition gives a method for easy parallelization of the solution.
Reference: [6] <author> G.J. Chaitin, </author> <title> Register Allocation and Spilling via Graph Coloring, </title> <booktitle> Proceedings of the ACM SIGPLAN 82 Symposium on Compiler Construction, </booktitle> <year> 1982, </year> <pages> 98-105. </pages>
Reference-contexts: Garey, Johnson and So [8] showed that graph coloring can be used for short circuit testing for printed circuits. Chaitin <ref> [5, 6] </ref> reduced register allocation to graph coloring and used it in a compiler. Poole and Ortega [22] showed how to use graph coloring to decompose matrices used to solve sparse systems of linear equations; the decomposition gives a method for easy parallelization of the solution.
Reference: [7] <author> D. de Werra. </author> <title> An introduction to timetabling, </title> <journal> European Journal of Operations Research, </journal> <volume> 19, </volume> <year> 1985, </year> <pages> 151-162. </pages>
Reference-contexts: It is an abstraction of time-tabling problems, in which lists of courses desired by students are given, and the minimal number of class periods such that all students can take their desired courses must be determined (de Werra <ref> [7] </ref>, Leighton [18], Opsut and Roberts [21]). Garey, Johnson and So [8] showed that graph coloring can be used for short circuit testing for printed circuits. Chaitin [5, 6] reduced register allocation to graph coloring and used it in a compiler.
Reference: [8] <author> M. R. Garey and D. S. Johnson and H. C. </author> <title> So. An application of graph coloring to printed circuit testing, </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 23, </volume> <year> 1976, </year> <pages> 591-599. </pages>
Reference-contexts: It is an abstraction of time-tabling problems, in which lists of courses desired by students are given, and the minimal number of class periods such that all students can take their desired courses must be determined (de Werra [7], Leighton [18], Opsut and Roberts [21]). Garey, Johnson and So <ref> [8] </ref> showed that graph coloring can be used for short circuit testing for printed circuits. Chaitin [5, 6] reduced register allocation to graph coloring and used it in a compiler.
Reference: [9] <author> J.W. Greene and K. J. Supowit. </author> <title> Simulated annealing without rejected moves, </title> <journal> IEEE Transactions on Computer-aided Design, </journal> <volume> vol CAD-5, 1, </volume> <month> January </month> <year> 1986, </year> <pages> 221-228. </pages>
Reference: [10] <author> G.R. Grimmet and C.J.H. McDiarmid. </author> <title> On colouring random graphs, </title> <journal> Mathematical Proceedings of the Cam-bridge Philosophical Society, </journal> <volume> 77, </volume> <year> 1975, </year> <pages> 313-324. </pages>
Reference-contexts: On the other hand, the results of Grimmet and McDiarmid <ref> [10] </ref> on coloring algorithms for random graphs offer the algorithm designer some reason for optimism. They consider random graphs such as the G n;p graphs, which have n nodes, where each pair is connected with independent probability p.
Reference: [11] <author> F. Glover. </author> <title> Tabu search, part 1, </title> <journal> ORSA Journal on Computing, </journal> <volume> 1, </volume> <year> 1989, </year> <pages> 190-206. </pages>
Reference-contexts: A quite different approach has been taken with iterative improvement algorithms, which include the simulated annealing algorithm of Johnson et al. [13], the Tabu Search algorithm of Glover <ref> [11] </ref> and the S-Impasse algorithm of Morgenstern [20]. Briefly, iterative improvement algorithms differ from successive augmentation algorithms in that the colors of individual nodes may change several times over the course of the algorithm. Of the iterative improvement algorithms, Morgenstern reports the best results for the S-Impasse algorithm.
Reference: [12] <author> M. M. Halldorsson. </author> <title> A still better performance guarantee for approximate graph coloring, </title> <type> DIMACS Technical report 1990, </type> <pages> 91-35. </pages>
Reference-contexts: Lund and Yannakakis [19] proved that for some * &gt; 0, approximating the chromatic number within a factor of n * is NP-hard. The best known approximation algorithm, due to Halldorsson <ref> [12] </ref>, provides an extremely poor performance guarantee of O (n (log log n) 2 =(log n) 3 ) for an n-node graph. (The performance guarantee is the maximum ratio, taken over all inputs, of the number of colors used over the chromatic number).
Reference: [13] <author> D. S. Johnson, C. R. Aragon, L. A. McGeoch and C. Schevon. </author> <title> Optimization by simulated annealing: an experimental evaluation; part II, graph coloring and number partitioning, </title> <journal> Operations Research, </journal> <volume> 3, </volume> <year> 1991, </year> <pages> 378-406. </pages>
Reference-contexts: These two algorithms have very efficient implementations, but as we will see, do not produce very good colorings on standard test data. Johnson et al. <ref> [13] </ref> pushed the successive augmentation approach much further with the XRLF algorithm, which is essentially a semi-exhaustive version of Leighton's RLF 1 algorithm, based on ideas of Johri and Matula [14]. <p> A quite different approach has been taken with iterative improvement algorithms, which include the simulated annealing algorithm of Johnson et al. <ref> [13] </ref>, the Tabu Search algorithm of Glover [11] and the S-Impasse algorithm of Morgenstern [20]. Briefly, iterative improvement algorithms differ from successive augmentation algorithms in that the colors of individual nodes may change several times over the course of the algorithm. <p> This algorithm is a straightforward branch-and-bound procedure, as described by Johnson et al. <ref> [13] </ref>. A tree of partial colorings is expanded, using the size of the current best coloring to prune the tree. Each node in the tree represents a partial coloring and its children are all the possible extensions of that coloring obtained by coloring one more node. <p> In contrast to S-Impasse, the XRLF algorithm runs well on random G n;p graphs, given enough time; for example, an 86-coloring of a G 1000;0:5 graph is found in 68.3 hours <ref> [13] </ref>. (This was on a VAX 750, which is 20-100 times slower than current machines.) We already have a working parallel implementation of XRLF, but unfortunately, due to lack of time and competition for the CM-5, we have not yet been able to test this hybrid.
Reference: [14] <author> A. Johri and D. W. Matula. </author> <title> Probabilistic bounds and heuristic algorithms for coloring large random graphs, </title> <type> Technical report, </type> <institution> Southern Methodist University, Texas, </institution> <year> 1982. </year>
Reference-contexts: Johnson et al. [13] pushed the successive augmentation approach much further with the XRLF algorithm, which is essentially a semi-exhaustive version of Leighton's RLF 1 algorithm, based on ideas of Johri and Matula <ref> [14] </ref>. The XRLF algorithm finds better colorings than the simpler successive augmentation algorithms on random G n;p graphs, but takes significantly more time and is beaten by the simpler Saturation algorithm on other randomly generated classes of graphs.
Reference: [15] <author> R. M. Karp. </author> <title> Reducibility among combinatorial problems, in R.E. </title> <editor> Miller and J.W. Thatcher (ed.), </editor> <title> Complexity of computer computations, </title> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1972, </year> <pages> 85-103. </pages>
Reference-contexts: Given the practical importance of the graph coloring problem, it is unfortunate that, in theory at least, the cards are stacked against the designer of graph coloring algorithms. Not only is it NP-complete to determine if a graph can be colored with a given number of colors <ref> [15] </ref>, but it is also hard even to approximate the chromatic number of a graph. Lund and Yannakakis [19] proved that for some * &gt; 0, approximating the chromatic number within a factor of n * is NP-hard.
Reference: [16] <author> A. B. Kempe, </author> <title> On the geographical problem of the four-colors, </title> <journal> American Journal of Mathematics, </journal> <volume> 2, 1879, </volume> <pages> 193-200. </pages>
Reference-contexts: The sets V i have the property that placing set V i into the color class V (i+1)mods maintains a valid coloring. That is, the s-chain "shu*es" the coloring. (This is a generalization of Kempe chains, an idea used by Kempe <ref> [16] </ref> in his flawed proof of the four-color theorem.) A parameter, , is a scaling factor that determines how often the s-chain moves are performed. Morgenstern's version of the algorithm ran for a number of iterations before halting. Our algorithm runs until it has reached its time bound.
Reference: [17] <author> Kiaer, Lynn. </author> <title> Discrete Optimization Strategies for Timetabling, </title> <type> Ph.D. Dissertation, </type> <institution> Department of Applied Mathematics, Florida Institute of Technology, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Only fl-tech.3 was colored with the six colors needed to actually effectively schedule the exams. Kiaer has constructed heuristics to use the weights of the conflicts to find a 6 coloring with no severe (weight 3) conflicts, 5 medium (weight 2) conflicts and 42 small (weight 1) conflicts <ref> [17] </ref>. We see again with this application that coloring the graph itself is not difficult, but modifications are needed to graph coloring in order to actually solve the problem posed by the application. Latin Square Graph. All the algorithms perform poorly on this application.
Reference: [18] <author> F.T. Leighton. </author> <title> A graph coloring algorithm for large scheduling problems, </title> <journal> Journal of Research of the National Bureau of Standards, </journal> <volume> 84, </volume> <year> 1979, </year> <pages> 489-506. </pages>
Reference-contexts: It is an abstraction of time-tabling problems, in which lists of courses desired by students are given, and the minimal number of class periods such that all students can take their desired courses must be determined (de Werra [7], Leighton <ref> [18] </ref>, Opsut and Roberts [21]). Garey, Johnson and So [8] showed that graph coloring can be used for short circuit testing for printed circuits. Chaitin [5, 6] reduced register allocation to graph coloring and used it in a compiler. <p> Thus, if ever the color of a vertex is forced, that is, there is at most one possible choice from the current set of colors, that vertex is colored first. Another example of such a "successive augmentation" algorithm is the Recursive Largest First (RLF) algorithm, proposed by Leighton <ref> [18] </ref> when studying the exam scheduling problem at Princeton. This algorithm colors the vertices one color class at a time, adding vertices one at a time to the current color class so as to reduce as much as possible the number of edges left in the uncolored subgraph. <p> Below we give a brief description of each graph class. Leighton graphs. Leighton graphs <ref> [18] </ref> are random graphs with a fixed number of edges and predetermined chromatic number. The graphs are constructed by implanting cliques of sizes ranging from (G) to 2 into the graph.
Reference: [19] <author> C. Lund and M. Yannakakis. </author> <title> On the hardness of approximating minimization problems, </title> <booktitle> Proceedings 25th ACM Symposium on Theory of Computing, </booktitle> <year> 1993, </year> <pages> 286-293. </pages>
Reference-contexts: Not only is it NP-complete to determine if a graph can be colored with a given number of colors [15], but it is also hard even to approximate the chromatic number of a graph. Lund and Yannakakis <ref> [19] </ref> proved that for some * &gt; 0, approximating the chromatic number within a factor of n * is NP-hard.
Reference: [20] <author> C. A. Morgenstern. </author> <title> Algorithms for general graph coloring, </title> <type> Doctoral Dissertation, Technical report CS89-16, </type> <institution> Department of Computer Science, University of New Mexico, </institution> <address> Albuquerque, </address> <year> 1989. </year> <month> 13 </month>
Reference-contexts: A quite different approach has been taken with iterative improvement algorithms, which include the simulated annealing algorithm of Johnson et al. [13], the Tabu Search algorithm of Glover [11] and the S-Impasse algorithm of Morgenstern <ref> [20] </ref>. Briefly, iterative improvement algorithms differ from successive augmentation algorithms in that the colors of individual nodes may change several times over the course of the algorithm. Of the iterative improvement algorithms, Morgenstern reports the best results for the S-Impasse algorithm. <p> Our parallel algorithm outperforms the sequential algorithms, both in the quality of the colorings obtained and in the time spent to obtain the colorings, on all but the simplest test graphs, where all algorithms find an optimal coloring very quickly. However, both Morgenstern's tuned sequential implementation of S-Impasse <ref> [20] </ref> and Johnson et al.'s XRLF algorithm find better colorings than our algorithm on large G n;p graphs. (recall that our tests of Hybrid are untuned). <p> The quality of the colorings obtained for our test data, and the running times of our parallel algorithm are discussed in Section 4. A brief concluding summary and directions for future work are presented in Section 5. 2 Algorithm Description We first briefly review Morgenstern's S-Impasse algorithm <ref> [20] </ref>. We then describe a parallel version of the S-Impasse algorithm, a parallel exhaustive search algorithm, and finally our Hybrid algorithm. The S-Impasse Algorithm. This is an example of an iterative improvement algorithm, proposed by Morgenstern [20]. In the following description, the parameters of the algorithm are italicized. <p> presented in Section 5. 2 Algorithm Description We first briefly review Morgenstern's S-Impasse algorithm <ref> [20] </ref>. We then describe a parallel version of the S-Impasse algorithm, a parallel exhaustive search algorithm, and finally our Hybrid algorithm. The S-Impasse Algorithm. This is an example of an iterative improvement algorithm, proposed by Morgenstern [20]. In the following description, the parameters of the algorithm are italicized. Initially, a target number of color classes is chosen, and a naive coloring of the graph is quickly computed. All vertices from color classes beyond the target are placed in an impasse set. <p> Our algorithm runs until it has reached its time bound. We set our parameters to be the same for all graph classes. The initial target is simply set to be the number of nodes in the graph. For explanations of exactly how the other parameters are used, see <ref> [20] </ref>. In our implementation, the length s of a Kempe chain is set to 3; the temperature is 0:6 and the parameter is set to 10. This time bound on the algorithm was set to three hours. The Parallel S-Impasse Algorithm.
Reference: [21] <author> R.J. Opsut and Fred S. Roberts. </author> <title> On the fleet maintenance, mobile radio frequency, task assignment and traffic phasing problems, </title> <editor> in G. Chartrand, Y. Alavi, D.L. Goldsmith, L. Lesniak-Foster and D.R. Lick, </editor> <title> The Theory and Applications of Graphs, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1981, </year> <pages> 479-492. </pages>
Reference-contexts: It is an abstraction of time-tabling problems, in which lists of courses desired by students are given, and the minimal number of class periods such that all students can take their desired courses must be determined (de Werra [7], Leighton [18], Opsut and Roberts <ref> [21] </ref>). Garey, Johnson and So [8] showed that graph coloring can be used for short circuit testing for printed circuits. Chaitin [5, 6] reduced register allocation to graph coloring and used it in a compiler.
Reference: [22] <author> E. L. Poole and J. M. Ortega, </author> <title> Multicolor ICCG methods for vector computers, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 24, 6, </volume> <year> 1987, </year> <pages> 1394-1418. </pages>
Reference-contexts: Garey, Johnson and So [8] showed that graph coloring can be used for short circuit testing for printed circuits. Chaitin [5, 6] reduced register allocation to graph coloring and used it in a compiler. Poole and Ortega <ref> [22] </ref> showed how to use graph coloring to decompose matrices used to solve sparse systems of linear equations; the decomposition gives a method for easy parallelization of the solution.
Reference: [23] <author> D. C. Wood. </author> <title> A technique for coloring a graph applicable to large scale time-tabling problems, </title> <journal> Computer Journal, </journal> <volume> 12, </volume> <year> 1969, </year> <pages> 317-319. 14 </pages>
References-found: 23

