URL: http://www.cs.brown.edu/courses/cs227/papers/b3/access.ps
Refering-URL: http://www.cs.brown.edu/courses/cs227/readinglist.html
Root-URL: http://www.cs.brown.edu/
Email: kemper@informatik.rwth-aachen.de moer@ira.uka.de  
Title: Access Support Relations: An Indexing Method for Object Bases  
Author: Alfons Kemper Guido Moerkotte 
Address: D-5100 Aachen D-7500 Karlsruhe  
Affiliation: Lehrstuhl fur Informatik III Fakultat fur Informatik RWTH Aachen Universitat Karlsruhe  
Abstract: In this work access support relations are introduced as a means for optimizing query processing in object-oriented database systems. The general idea is to maintain separate structures (disassociated from the object representation) to redundantly store those object references that are frequently traversed in database queries. The proposed access support relation technique is no longer restricted to relate an object (tuple) to an atomic value (attribute value) as in conventional indexing. Rather, access support relations relate objects with each other and can span over reference chains which may contain collection-valued components in order to support queries involving path expressions. We present several alternative extensions and decompositions of access support relations for a given path expression, the best of which has to be determined according to the application-specific database usage profile. An analytical performance analysis of access support relations is developed. This analytical cost model is, in particular, used to determine the best access support relation extension and decomposition with respect to specific database configuration and usage characteristics.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Atkinson, F. Bancilhon, D. J. DeWitt, K. R. Dittrich, D. Maier, and S. Zdonik. </author> <title> The object-oriented database system manifesto. </title> <booktitle> In Proc. of the Intl. Conf. on Deductive and Object-Oriented Databases (DOOD), </booktitle> <pages> pages 40-57, </pages> <address> Kyoto, Japan, </address> <month> Dec </month> <year> 1989. </year> <month> 40 </month>
Reference: [2] <author> E. Bertino and W. Kim. </author> <title> Indexing techniques for queries on nested objects. </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> 1(2) </volume> <pages> 196-214, </pages> <month> Jun </month> <year> 1989. </year>
Reference-contexts: The index paths in GemStone [17] are restricted to chains that contain only single-valued attributes and their representation is limited to binary partitions of the access path. Similarly, the object-oriented access techniques described for the Orion model <ref> [2] </ref> are contained as a special case in our framework. [5] reports on an indexing technique for hierarchical object structures, i.e., nested relations, which is related to our access support relations.
Reference: [3] <author> P. Butterworth, A. Otis, and J. Stein. </author> <title> The GemStone object database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <year> 1991. </year>
Reference-contexts: A list of object-oriented models, to which our proposed indexing method can be applied in a straightforward manner is compiled as follows: GemStone <ref> [3] </ref>, O 2 [6], Orion [15], ObjectStore [16], EXTRA [4], and the Reference Model [24]. 3 2.1 Main Concepts of GOM GOM provides the following object-oriented concepts: object identity Each object instance has an identity that remains invariant throughout its lifetime.
Reference: [4] <author> M. J. Carey, D. J. DeWitt, and S. L. Vandenberg. </author> <title> A data model and query language for EXODUS. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 413-423, </pages> <address> Chicago, Il., </address> <month> Jun </month> <year> 1988. </year>
Reference-contexts: In object-oriented database systems with object references the join based on matching attribute values plays a less predominant role. More important are object accesses along reference chains leading from one object instance to another. Some authors, e.g., <ref> [4] </ref>, call this kind of object traversal also functional join. This work presents an indexing technique, called access support relations, which is designed to support the functional join along arbitrary long attribute chains where the chain may even contain collection-valued attributes. <p> A list of object-oriented models, to which our proposed indexing method can be applied in a straightforward manner is compiled as follows: GemStone [3], O 2 [6], Orion [15], ObjectStore [16], EXTRA <ref> [4] </ref>, and the Reference Model [24]. 3 2.1 Main Concepts of GOM GOM provides the following object-oriented concepts: object identity Each object instance has an identity that remains invariant throughout its lifetime. The object identifier is invisible for the database user; it is used by the system to reference objects. <p> As mentioned above, this conforms to (almost) all proposed object models. 2.4 The Query Language For our object model we developed a QUEL-like [21] query language along the lines of the EXCESS object query language that was designed as the declarative query language for the EXTRA object model <ref> [4] </ref>. Currently, our optimizer [12] supports only the declarative QUEL-like query language. In the future we intend to support other declarative query languages as well as the optimization of procedurally specified database access.
Reference: [5] <editor> U. Keler and P. Dadam. Auswertung komplexer Anfragen an hierarchisch strukturierte Objekte mittels Pfadindexen. </editor> <booktitle> In Proc. of the German Conference on Databases in Office, Engineering and Science (BTW), </booktitle> <pages> pages 218-237. </pages> <publisher> Informatik-Fachberichte No. 270, Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The index paths in GemStone [17] are restricted to chains that contain only single-valued attributes and their representation is limited to binary partitions of the access path. Similarly, the object-oriented access techniques described for the Orion model [2] are contained as a special case in our framework. <ref> [5] </ref> reports on an indexing technique for hierarchical object structures, i.e., nested relations, which is related to our access support relations.
Reference: [6] <author> O. </author> <title> Deux et al. </title> <journal> The story of O 2 . IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 91-108, </pages> <month> Mar </month> <year> 1990. </year>
Reference-contexts: A list of object-oriented models, to which our proposed indexing method can be applied in a straightforward manner is compiled as follows: GemStone [3], O 2 <ref> [6] </ref>, Orion [15], ObjectStore [16], EXTRA [4], and the Reference Model [24]. 3 2.1 Main Concepts of GOM GOM provides the following object-oriented concepts: object identity Each object instance has an identity that remains invariant throughout its lifetime.
Reference: [7] <author> T. </author> <title> Harder. Implementing a generalized access path structure for a relational database system. </title> <journal> ACM Trans. Database Syst., </journal> <volume> 3(3) </volume> <pages> 285-298, </pages> <month> Sep </month> <year> 1987. </year>
Reference-contexts: A lot of research effort has been spent on expediting the join, e.g., access structures to support the join, the sort-merge join, and the hash-join algorithm were developed. Recently, the binary join index structure [22] building on links <ref> [7] </ref> was designed as another optimization method for this operation. In object-oriented database systems with object references the join based on matching attribute values plays a less predominant role. More important are object accesses along reference chains leading from one object instance to another. <p> In addition we have developed techniques that allow the materialization of function results in an object base [9]. 2 The access support relations described in this paper constitute a generalization of two relational techniques: the links developed by Harder <ref> [7] </ref> and the binary join indices proposed by Valduriez [22]. Rather than relating only two relations (or object types) our technique allows to support access paths ranging over many types. Our indexing technique subsumes and extends several previously proposed strategies for access optimization in object bases.
Reference: [8] <author> A. Kemper. </author> <title> Zuverlassigkeit und Leistungsfahigkeit objektorientierter Datenbanken (in German), </title> <booktitle> Volume 298 of Informatik Fachberichte. </booktitle> <publisher> Springer Verlag, </publisher> <address> Heidelberg, </address> <year> 1992. </year>
Reference-contexts: * the data pages of the access support relation partition [[t 0 :A 1 : :A n ]] (i ff ;i ff+1 ) X that contain the RefBy (i; i ff ; 1) object identifiers of type t i ff The costs of a backward query are derived analogously (see <ref> [8] </ref>). 5.3 Sample Results 5.3.1 Query Costs in Comparison parameters shown below: application characteristics n 4 number of objects c 0 c 1 c 2 c 3 c 4 100 500 1000 5000 10000 number of objects with d 0 d 1 d 2 d 3 d 4 defined A i+1 <p> The backward search itself is only necessary if there does not already exist a complete path through o i1 . The derivation of the cost formulas is beyond the scope of this paper and can be found in <ref> [8] </ref>. 6.4 Sample Results 6.4.1 Update Costs for Fixed Application Characteristics We compare update costs for different access support relation extensions and decompositions on the basis of the following application profile: application characteristics n 4 number of objects c 0 c 1 c 2 c 3 c 4 1000 5000 10000
Reference: [9] <author> A. Kemper, C. Kilger, and G. Moerkotte. </author> <title> Materialization of functions in object bases. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 258-267, </pages> <address> Denver, CO, </address> <month> May 91. </month>
Reference-contexts: In this respect access support relations constitute materializations of frequently traversed reference chains. In addition we have developed techniques that allow the materialization of function results in an object base <ref> [9] </ref>. 2 The access support relations described in this paper constitute a generalization of two relational techniques: the links developed by Harder [7] and the binary join indices proposed by Valduriez [22].
Reference: [10] <author> A. Kemper, P. C. Lockemann, and M. Wallrath. </author> <title> An object-oriented database system for engineering applications. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 299-311, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Let x i be variables, T i set typed expressions or type names, and S a selection predicate. Then, a query has the following form: 2 This complex attribute is not further elaborated here. For more details see <ref> [10] </ref>. 5 ROBOT ARM TOOL MANUFACTURER id 0 Name: "R 2 D 2 " Arm: id 1 Kinematics: . . . MountedTool: id 2 id 2 Function: "welding" ManufacturedBy: id 3 id 3 Name: "RobClone" Location: "Utopia" id 5 Name: "X4D5" Arm: id 6 Kinematics: . . .
Reference: [11] <author> A. Kemper and G. Moerkotte. </author> <title> Access support in object bases. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 364-374, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: However, these systems are still not adequately optimized: they still have problems to keep up with the performance achieved by, for example, relational DBMSs. Yet it is fl This is a revised and extended version of "Access Support in Object Bases" <ref> [11] </ref>. 1 essential that the object-oriented systems will yield at least the same performance that rela-tional systems achieve: otherwise their acceptance in the engineering field is jeopardized even though they provide higher functionality than conventional DBMSs by, e.g., incorporation of type extensibility and object-specific behavior within the model.
Reference: [12] <author> A. Kemper and G. Moerkotte. </author> <title> Advanced query processing in object bases using access support relations. </title> <booktitle> In Proc. of The Conf. on Very Large Data Bases (VLDB), </booktitle> <pages> pages 290-301, </pages> <address> Brisbane, Australia, </address> <month> Aug </month> <year> 1990. </year>
Reference-contexts: Currently, our optimizer <ref> [12] </ref> supports only the declarative QUEL-like query language. In the future we intend to support other declarative query languages as well as the optimization of procedurally specified database access. Let x i be variables, T i set typed expressions or type names, and S a selection predicate. <p> For this purpose we developed a rule-based query optimizer for GOM that generates a query evaluation plan which exploits existing access support relations <ref> [12] </ref>. The analytical cost model is being incoporated into the query optimizer for comparing the evaluation costs of different alternative evaluation plans. Acknowledgements This work was partially supported by the German Research Council DFG under contract number SFB 346. Chin Chen's help in refining the original cost model is gratefully acknowledged.
Reference: [13] <author> A. Kemper, G. Moerkotte, H.-D. Walter, and A. Zachmann. GOM: </author> <title> a strongly typed, persistent object model with polymorphism. </title> <booktitle> In Proc. of the German Conference on Databases in Office, Engineering and Science (BTW), </booktitle> <pages> pages 198-217, </pages> <address> Kaiserslautern, </address> <month> Mar </month> <year> 1991. </year> <note> Springer-Verlag, Informatik-Fachberichte Nr. 270. </note>
Reference-contexts: Also the (separate) replication of object values as proposed for the Extra object model [19] and for the PostGres model [20, 18] are subsumed by our technique. The remainder of this paper is organized as follows. Section 2 introduces the Generic Object Model (GOM) <ref> [13] </ref>, which serves as the research vehicle for this work, and some simplified application examples to highlight the requirements on access support in object bases. Then, in Section 3 the access support relations are formally defined. <p> Section 8 concludes this paper. 2 GOM and its Declarative Query Language This research is based on an object-oriented model that unites the most salient features of many recently proposed models in one coherent framework. In this respect, the objective of GOM <ref> [13] </ref> can be seen as providing a syntactical framework of the essential object-oriented features identified in the "Manifesto" [1]|albeit the GOM model was developed much earlier. Independently|but with the same intention|Zdonik and Maier developed the so-called Reference Model in [24].
Reference: [14] <author> A. Kemper and M. Wallrath. </author> <title> An analysis of geometric modeling in database systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(1) </volume> <pages> 47-91, </pages> <month> Mar </month> <year> 1987. </year>
Reference-contexts: Rather, access support relations are geared towards support of associative search for objects on secondary storage. Despite the many computation-intensive engineering applications, such as CAD, our experience with mechanical engineering applications, e.g., <ref> [14] </ref>, suggests that there are numerous applications where the efficient retrieval of objects from secondary memory is essential. Examples include: * construction: in the construction phase engineers frequently search for similar artifacts that have been designed in the past.
Reference: [15] <author> W. Kim, J. F. Garza, N. Ballou, and D. Woelk. </author> <title> Architecture of the Orion next-generation database system. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 109-124, </pages> <month> Mar </month> <year> 1990. </year> <month> 41 </month>
Reference-contexts: A list of object-oriented models, to which our proposed indexing method can be applied in a straightforward manner is compiled as follows: GemStone [3], O 2 [6], Orion <ref> [15] </ref>, ObjectStore [16], EXTRA [4], and the Reference Model [24]. 3 2.1 Main Concepts of GOM GOM provides the following object-oriented concepts: object identity Each object instance has an identity that remains invariant throughout its lifetime.
Reference: [16] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <year> 1991. </year>
Reference-contexts: A list of object-oriented models, to which our proposed indexing method can be applied in a straightforward manner is compiled as follows: GemStone [3], O 2 [6], Orion [15], ObjectStore <ref> [16] </ref>, EXTRA [4], and the Reference Model [24]. 3 2.1 Main Concepts of GOM GOM provides the following object-oriented concepts: object identity Each object instance has an identity that remains invariant throughout its lifetime.
Reference: [17] <author> D. Maier and J. Stein. </author> <title> Indexing in an object-oriented DBMS. </title> <editor> In K. R. Dittrich and U. Dayal, editors, </editor> <booktitle> Proc. IEEE Intl. Workshop on Object-Oriented Database Systems, </booktitle> <address> Asilo-mar, Pacific Grove, CA, </address> <pages> pages 171-182. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Sep </month> <year> 1986. </year>
Reference-contexts: Rather than relating only two relations (or object types) our technique allows to support access paths ranging over many types. Our indexing technique subsumes and extends several previously proposed strategies for access optimization in object bases. The index paths in GemStone <ref> [17] </ref> are restricted to chains that contain only single-valued attributes and their representation is limited to binary partitions of the access path.
Reference: [18] <author> T. K. Sellis. </author> <title> Intelligent caching and indexing techniques for relational database systems. </title> <journal> Information Systems, </journal> <volume> 13(2) </volume> <pages> 175-186, </pages> <year> 1988. </year>
Reference-contexts: This allows the database designer to choose the best extension and partition according to the particular application characteristics. Also the (separate) replication of object values as proposed for the Extra object model [19] and for the PostGres model <ref> [20, 18] </ref> are subsumed by our technique. The remainder of this paper is organized as follows. Section 2 introduces the Generic Object Model (GOM) [13], which serves as the research vehicle for this work, and some simplified application examples to highlight the requirements on access support in object bases.
Reference: [19] <author> E. J. Shekita and M. J. Carey. </author> <title> Performance enhancement through replication in an object-oriented DBMS. </title> <booktitle> In Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 325-336, </pages> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: This allows the database designer to choose the best extension and partition according to the particular application characteristics. Also the (separate) replication of object values as proposed for the Extra object model <ref> [19] </ref> and for the PostGres model [20, 18] are subsumed by our technique. The remainder of this paper is organized as follows.
Reference: [20] <author> M. Stonebraker, J. Anton, and E. Hanson. </author> <title> Extending a database system with procedures. </title> <journal> ACM Trans. Database Systems, </journal> <volume> 12(3) </volume> <pages> 350-376, </pages> <month> Sep </month> <year> 1987. </year>
Reference-contexts: This allows the database designer to choose the best extension and partition according to the particular application characteristics. Also the (separate) replication of object values as proposed for the Extra object model [19] and for the PostGres model <ref> [20, 18] </ref> are subsumed by our technique. The remainder of this paper is organized as follows. Section 2 introduces the Generic Object Model (GOM) [13], which serves as the research vehicle for this work, and some simplified application examples to highlight the requirements on access support in object bases.
Reference: [21] <author> M. Stonebraker, E. Wong, P. Kreps, and G. </author> <title> Held. The design and implementation of INGRES. </title> <journal> ACM Trans. Database Syst., </journal> <volume> 1(3) </volume> <pages> 189-222, </pages> <month> Sep </month> <year> 1976. </year>
Reference-contexts: As indicated in Figure 1 references are uni-directional , i.e., they are maintained in one direction only. As mentioned above, this conforms to (almost) all proposed object models. 2.4 The Query Language For our object model we developed a QUEL-like <ref> [21] </ref> query language along the lines of the EXCESS object query language that was designed as the declarative query language for the EXTRA object model [4]. Currently, our optimizer [12] supports only the declarative QUEL-like query language.
Reference: [22] <author> P. Valduriez. </author> <title> Join indices. </title> <journal> ACM Trans. Database Syst., </journal> <volume> 12(2) </volume> <pages> 218-246, </pages> <month> Jun </month> <year> 1987. </year>
Reference-contexts: A lot of research effort has been spent on expediting the join, e.g., access structures to support the join, the sort-merge join, and the hash-join algorithm were developed. Recently, the binary join index structure <ref> [22] </ref> building on links [7] was designed as another optimization method for this operation. In object-oriented database systems with object references the join based on matching attribute values plays a less predominant role. More important are object accesses along reference chains leading from one object instance to another. <p> In addition we have developed techniques that allow the materialization of function results in an object base [9]. 2 The access support relations described in this paper constitute a generalization of two relational techniques: the links developed by Harder [7] and the binary join indices proposed by Valduriez <ref> [22] </ref>. Rather than relating only two relations (or object types) our technique allows to support access paths ranging over many types. Our indexing technique subsumes and extends several previously proposed strategies for access optimization in object bases. <p> Repeated application of this argument yields the theorem. 2 The storage structure of access support relations is borrowed from the binary join index proposal by Valduriez <ref> [22] </ref>. Each partition is redundantly stored in two B + -trees: the first being clustered (keyed) on the left-most attribute and the second being clustered on the right most attribute.
Reference: [23] <author> S. B. Yao. </author> <title> Approximating block accesses in database organizations. </title> <journal> Communications of the ACM, </journal> <volume> 20(4) </volume> <pages> 260-261, </pages> <month> Apr 77. </month>
Reference-contexts: This number is derived as a fraction of two binomial coefficients (see <ref> [23] </ref>): f i f i e i+1 f i = 1 e i+1 Note that 1 e i+1 shar i d i d i shar i d i shar i d i shar i (7) The probability that o i+1 is not hit by any of the references emanating from a <p> Yao <ref> [23] </ref> has determined the number of page accesses for retrieving k out of n objects distributed over m pages, where each page contains n=m objects.
Reference: [24] <author> S. Zdonik and D. Maier. </author> <title> Fundamentals of object-oriented databases. </title> <editor> In S. Zdonik and D. Maier, editors, </editor> <booktitle> Readings in Object-Oriented Databases, </booktitle> <pages> pages 1-32. </pages> <publisher> Morgan-Kaufman Publ. Co., </publisher> <pages> 89. 42 </pages>
Reference-contexts: In this respect, the objective of GOM [13] can be seen as providing a syntactical framework of the essential object-oriented features identified in the "Manifesto" [1]|albeit the GOM model was developed much earlier. Independently|but with the same intention|Zdonik and Maier developed the so-called Reference Model in <ref> [24] </ref>. The features that GOM provides are relatively generic (and basic) such that the results derived for this particular data model can be applied to a variety of other object-oriented models. <p> A list of object-oriented models, to which our proposed indexing method can be applied in a straightforward manner is compiled as follows: GemStone [3], O 2 [6], Orion [15], ObjectStore [16], EXTRA [4], and the Reference Model <ref> [24] </ref>. 3 2.1 Main Concepts of GOM GOM provides the following object-oriented concepts: object identity Each object instance has an identity that remains invariant throughout its lifetime. The object identifier is invisible for the database user; it is used by the system to reference objects.
References-found: 24

