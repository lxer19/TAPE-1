URL: http://www.cs.nyu.edu/cs/faculty/paige/courses/prolog/apt2.ps
Refering-URL: http://www.cs.nyu.edu/cs/faculty/paige/courses/prolog/course.html
Root-URL: http://www.cs.nyu.edu
Title: The Logic Programming Paradigm: A Tutorial  
Author: Krzysztof R. Apt and 
Date: March 11, 1997  
Address: P.O. Box 94079, 1090 GB Amsterdam, The Netherlands  Amsterdam, Plantage Muidergracht 24 1018 TV Amsterdam, The Netherlands  
Affiliation: CWI  Dept. of Mathematics, Computer Science, Physics Astronomy University of  
Abstract-found: 0
Intro-found: 1
Reference: [CW93] <author> M. Carlsson and J. Widen. </author> <title> SICStus Prolog User's Manual. </title> <address> P.O. Box 1263, S-164 28 Kista, Sweden, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Thus by definition each anonymous variable occurs in a query or a clause only once. Anonymous variables form a simple and elegant device and their use increases the readability of programs in a remarkable way. Modern versions of Prolog, like SICStus Prolog <ref> [CW93] </ref>, encourage the use of anonymous variables by issuing a warning if a non-anonymous variable that occurs only once in a clause is encountered. Strings starting with a lower-case letter are reserved for the names of function or relation symbols.
Reference: [Hoa62] <author> C.A.R. Hoare. </author> <title> Quicksort. </title> <journal> BCS Computer Journal, </journal> <volume> 5(1) </volume> <pages> 10-15, </pages> <year> 1962. </year>
Reference-contexts: Quicksort One of the most fundamental operations on the lists is sorting. The task is to sort a list of integers. We present here Prolog's version of the quicksort procedure proposed by Hoare <ref> [Hoa62] </ref>. According to this sorting procedure, a list is first partitioned into two sublists using an element X of it, one consisting of elements smaller than X and the other consisting of elements larger or equal than X.
Reference: [Kow74] <author> R.A. Kowalski. </author> <title> Predicate logic as a programming language. </title> <booktitle> In Proceedings IFIP'74, </booktitle> <pages> pages 569-574. </pages> <publisher> North-Holland, </publisher> <year> 1974. </year>
Reference-contexts: Unification was defined in Robinson [Rob65] in the context of automated theorem proving. Its use for computing is due to Kowalski <ref> [Kow74] </ref>. This computational interpretation of logic programs is called procedural interpretation. It explains how logic programs compute. While Prolog differs from logic programming, it can be naturally introduced by defining the computation mechanism of logic programs first and then by explaining the differences.
Reference: [Rob65] <author> J.A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> J. ACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference-contexts: So unification forms a basic mechanism by means of which logic programs compute. The use of unification to assign values to variables forms a distinguishing feature of logic programming and is one of the main differences between logic programming and other programming styles. Unification was defined in Robinson <ref> [Rob65] </ref> in the context of automated theorem proving. Its use for computing is due to Kowalski [Kow74]. This computational interpretation of logic programs is called procedural interpretation. It explains how logic programs compute. <p> They are not unifiable either because for any substitution the atom x has more symbols than p (x). 2 The problem of deciding whether two atoms are unifiable is called the unification problem. This problem was solved in Robinson <ref> [Rob65] </ref> where the following result was established.
Reference: [SS86] <author> L. Sterling and E. Shapiro. </author> <title> The Art of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1986. </year> <month> 19 </month>
Reference-contexts: Below, we use queries both to find one answer and to find all answers. Finally, typing "halt." finishes the interaction with the system. 2.5 First Example As a first example of a Prolog program consider the following example from Sterling and Shapiro <ref> [SS86] </ref> (in fact ftp-ed from ftp.cwru.edu, directory ArtOfProlog).
References-found: 5

