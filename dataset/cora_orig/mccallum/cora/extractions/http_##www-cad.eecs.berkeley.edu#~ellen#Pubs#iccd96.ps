URL: http://www-cad.eecs.berkeley.edu/~ellen/Pubs/iccd96.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~ellen/Html/pub.html
Root-URL: 
Title: Enhancing FSM Traversal by Temporary Re-Encoding  
Author: Gianpiero Cabodi Paolo Camurati Luciano Lavagno Enrico Macii Massimo Poncino Stefano Quer Ellen Sentovich 
Address: Torino, ITALY  Torino, ITALY  SophiaAntipolis, FRANCE  
Affiliation: Politecnico di Torino Dip. di Automatica e Informatica  Politecnico di Torino Dip. di Elettronica  Universit di Udine Dip. di Matematica e Informatica Udine, ITALY Ecole des Mines de Paris Centre de Mathmatiques Appliques  
Abstract: Synthesis and optimization of large tnitestate machines has improved dramatically over the last few years with the intro duction and rapid improvement of symbolicstate manipulation techniques. The algorithms eciently visit each reachable state in the machine while computing and storing information about these states. We propose a new technique for improving the ecacy of traversal algorithms: re-encoding the states of the machine to more eciently represent state sets or state transi tions, or to more eciently compute the next set of states. Our technique can be embedded in existing traversal algorithms. Ex periments reveal that re-encoding can indeed reduce the time and/or space required for traversal. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Cho, G. D. Hachtel, E. Macii, B. Plessier, F. Somenzi, </author> <title> Algo rithms for Approximate FSM Traversal, </title> <booktitle> DAC30, </booktitle> <pages> pp. 2530, </pages> <address> Dallas, TX, </address> <month> Jun. </month> <year> 1993. </year>
Reference-contexts: These algorithms have become invaluable for machine veritcation, optimization, and test generation. State-of-the-art traversal algorithms can be characterized as follows: * They are either exact (i.e., they visit precisely the reach able states) or approximate (i.e., they visit a superset <ref> [1] </ref> or a subset [2] of the states). * They traverse states in a forward, backward, or mixed forward/backward [3] fashion. * They carry out the computations using either the transi tion function or the transition relation (possibly in par titioned/clustered form [4, 5]) of the FSM. * They use sophisticated
Reference: [2] <author> K. Ravi, F. Somenzi, </author> <title> HighDensity Reachability Analysis, </title> <booktitle> ICCAD95, </booktitle> <pages> pp. 154158, </pages> <address> San Jose, CA, </address> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: These algorithms have become invaluable for machine veritcation, optimization, and test generation. State-of-the-art traversal algorithms can be characterized as follows: * They are either exact (i.e., they visit precisely the reach able states) or approximate (i.e., they visit a superset [1] or a subset <ref> [2] </ref> of the states). * They traverse states in a forward, backward, or mixed forward/backward [3] fashion. * They carry out the computations using either the transi tion function or the transition relation (possibly in par titioned/clustered form [4, 5]) of the FSM. * They use sophisticated symbolic algorithms based on <p> Unfortunately, a noticeable reduction in size of some sets usually corresponds to an even more re markable increase in the size of the BDDs representing other state sets involved in the computation. Alternative strategies, inspired by the subsetting technique of <ref> [2] </ref>, may also be used. <p> To the best of our knowledge, no results have been pub lished in the literature for circuit s1269, and nobody has gone beyond level 12 in traversing circuit s5378_Opt in an exact way <ref> [2] </ref>. We have been able to completely traverse these two examples. Experiments have shown that some intermediate image computations are dicult, as proved by the peak on the number of BDD nodes, though the tnal size of the reached set is small.
Reference: [3] <author> G. P. Cabodi, P. Camurati, S. Quer, </author> <title> Symbolic Exploration of Large Circuits with Enhanced Forward/Backward Traversals, </title> <booktitle> EURODAC94, </booktitle> <pages> pp. 2227, </pages> <address> Grenoble, France, </address> <month> Sep. </month> <year> 1994 </year>
Reference-contexts: State-of-the-art traversal algorithms can be characterized as follows: * They are either exact (i.e., they visit precisely the reach able states) or approximate (i.e., they visit a superset [1] or a subset [2] of the states). * They traverse states in a forward, backward, or mixed forward/backward <ref> [3] </ref> fashion. * They carry out the computations using either the transi tion function or the transition relation (possibly in par titioned/clustered form [4, 5]) of the FSM. * They use sophisticated symbolic algorithms based on BDDs for ecient stateset and transition relation rep resentation and manipulation (e.g., [6]). * They
Reference: [4] <author> H. Touati, H. Savoj, B. Lin, R. K. Brayton, A. Sangio vanniVincentelli, </author> <title> Implicit Enumeration of Finite State Ma chines Using BDDs, </title> <booktitle> ICCAD90, </booktitle> <pages> pp. 130133, </pages> <address> Santa Clara, CA, </address> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: states) or approximate (i.e., they visit a superset [1] or a subset [2] of the states). * They traverse states in a forward, backward, or mixed forward/backward [3] fashion. * They carry out the computations using either the transi tion function or the transition relation (possibly in par titioned/clustered form <ref> [4, 5] </ref>) of the FSM. * They use sophisticated symbolic algorithms based on BDDs for ecient stateset and transition relation rep resentation and manipulation (e.g., [6]). * They use a variety of techniques for reducing the size of the BDDs, e.g., Dynamic variable reordering [7] and truthtable permutations [8].
Reference: [5] <author> J. R. Burch, E. M. Clarke, D. E. </author> <title> Long: Representing Cir cuits More Eciently in Symbolic Model Checking, </title> <booktitle> DAC28, </booktitle> <pages> pp. 403407, </pages> <address> San Francisco, CA, </address> <month> Jun. </month> <year> 1991. </year>
Reference-contexts: states) or approximate (i.e., they visit a superset [1] or a subset [2] of the states). * They traverse states in a forward, backward, or mixed forward/backward [3] fashion. * They carry out the computations using either the transi tion function or the transition relation (possibly in par titioned/clustered form <ref> [4, 5] </ref>) of the FSM. * They use sophisticated symbolic algorithms based on BDDs for ecient stateset and transition relation rep resentation and manipulation (e.g., [6]). * They use a variety of techniques for reducing the size of the BDDs, e.g., Dynamic variable reordering [7] and truthtable permutations [8]. <p> is computed by existential quantitcation of Q joined or cofactored with from (s): to (y) = 9 u (from (u) Q n = 9 u ( i=1 i (u; y i ) # from (u)) Analyzing the sets of support of the functions involved in the conjunction, Burch et al. <ref> [5] </ref> determine whether exis tential quantitcation can migrate inside the conjunction (early quantitcation). This results in a simplitcation as the number of variables in the conjunction term is reduced.
Reference: [6] <author> G. P. Cabodi, P. Camurati, </author> <title> Exploiting Cofactoring for E cient Symbolic FSM Traversal Based on the Transition Rela tion, </title> <booktitle> ICCD93, </booktitle> <pages> pp. 299303, </pages> <address> Cambridge, MA, </address> <month> Oct. </month> <year> 1993. </year> <title> [7] R. Rudell, Dynamic Variable Ordering for Ordered Binary Decision Diagrams, </title> <booktitle> ICCAD93, </booktitle> <pages> pp. 4247, </pages> <address> Santa Clara, CA, </address> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: mixed forward/backward [3] fashion. * They carry out the computations using either the transi tion function or the transition relation (possibly in par titioned/clustered form [4, 5]) of the FSM. * They use sophisticated symbolic algorithms based on BDDs for ecient stateset and transition relation rep resentation and manipulation (e.g., <ref> [6] </ref>). * They use a variety of techniques for reducing the size of the BDDs, e.g., Dynamic variable reordering [7] and truthtable permutations [8].
Reference: [8] <author> M. Fujita, Y. Kukimoto, R. K. Brayton, </author> <title> BDD Minimiza tion by Truth Table Permutations, IWLS95, Paper 5c, </title> <address> Lake Tahoe, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: titioned/clustered form [4, 5]) of the FSM. * They use sophisticated symbolic algorithms based on BDDs for ecient stateset and transition relation rep resentation and manipulation (e.g., [6]). * They use a variety of techniques for reducing the size of the BDDs, e.g., Dynamic variable reordering [7] and truthtable permutations <ref> [8] </ref>. Even with the improvement these algorithms have made, traversing very large state machines is still limited by the size of the reachable state set and the size of intermediate data representations at each computation step. <p> Several heuristics have been presented to sort the partitions. Further improvements are obtained through clustering, that may be used to decrease the num ber of partitions by performing some products once forall before image computations. 3 Re-Encoding Several variants to the truth table permutation method of <ref> [8] </ref> have been tried to reduce the size of entire sets of states during traversal. Unfortunately, a noticeable reduction in size of some sets usually corresponds to an even more re markable increase in the size of the BDDs representing other state sets involved in the computation.
Reference: [9] <author> O. Coudert, C. Berthet, J. C. Madre, </author> <title> Veritcation of Sequen tial Machines Based on Symbolic Execution,, </title> <booktitle> LNCS, </booktitle> <volume> Vol. 407, </volume> <pages> pp. 365373, </pages> <address> SpringerVerlag, </address> <year> 1989. </year>
Reference-contexts: Generalized cofactors satisfy the Boole expansion theorem f = g f g + g f g 0 Since generalized cofactors are incompletely specited by detnition, we use the constrain operator <ref> [9] </ref>, denoted as #, to tnd a generalized cofactor with a small BDD represen tation. (f # g)(r) = f (r) if g (r) = 1 where s is the minterm such that g (s) = 1 and the distance between minterms r and s is minimum.
Reference: [10] <author> F. Somenzi, CUDD: </author> <title> University of Colorado Decision Dia gram Package Release 1.0.7, </title> <type> Technical Report, </type> <institution> Dept. of ECE, University of Colorado at Boulder, </institution> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: = f---g 1 = fg f 0 a (u 0 ; by 0 ; u 1 ; by 1 ) = fg c (u 0 ; by 0 ; u 1 ; by 1 ) = f0000g 5 Experimental Results We have implemented the re-encodingbased traversal al gorithm using CUDD <ref> [10] </ref> as underlying BDD package. We have used for the experiments some large examples taken from the Iscas'89 Addendum and the Mcnc'91 benchmark suites. In addition, some optimized circuits were considered. Their characteristics are summarized in Table 1.
Reference: [11] <author> H. Cho, G.D. Hachtel, E. Macii, M. Poncino, K. Ravi, F. Somenzi, </author> <title> Approximate Finite State Machine Traversal: Ex tensions and New Results, IWLS95, Paper 3a, </title> <address> Lake Tahoe, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Circuit s5378_Opt is an optimized version of the original s5378 Iscas'89 benchmark, which has been obtained by iterative application of the redundancy removal procedure of <ref> [11] </ref>, based on the approximate traversal of the state ma chine. The resulting circuit is sensibly smaller and contains 58 less latches than the original one.
References-found: 10

