URL: http://www-i2.informatik.rwth-aachen.de/hanus/publications/reports/MPI-I-94-224/paper10.ps.Z
Refering-URL: http://www.informatik.uni-trier.de/~ley/db/conf/iclp/iclp94-w8.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: tickg@cs.uoregon.edu  
Title: Compilation of Concurrent Declarative Languages  
Author: Z. M. Ariola, M. Sami, B. C. Massey, and E. Tick fariola, sami, bart, 
Address: Eugene OR, USA 97403  
Affiliation: Dept. of Computer Science University of Oregon  
Abstract: The plethora of concurrent declarative language families, each with subtly different semantics, makes the design and implementation of static analyses for these languages a demanding task. However, many of the languages share underlying structure. If this structure can be exploited, static analysis techniques can be shared across language families. These techniques can thus provide a common kernel for the implementation of quality compilers for this entire language class. The purpose of this paper is to exploit the similarities of non-strict functional and concurrent logic languages in the design of a common intermediate language (CIL). The CIL is introduced incrementally, giving at each step the rationale for its extension. As an application, we have analyzed some state-of-the-art static partitioning algorithms from the literature in terms of their action upon CIL programs. This allowed us to "uncover" the relative advantages and disadvantages of the analyses, and determine promising directions for improving static partitioning.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Z. M. Ariola. </author> <title> An Algebraic Approach to the Compilation and Operational Semantics of Functional Languages with I-Structures. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <month> June </month> <year> 1992. </year>
Reference: [2] <author> Z. M. Ariola and Arvind. P-TAC: </author> <title> A Parallel Intermediate Language. </title> <booktitle> In Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 230-242. </pages> <address> London, </address> <publisher> ACM Press, </publisher> <month> September </month> <year> 1989. </year>
Reference: [3] <author> Z. M. Ariola and Arvind. </author> <title> A Syntactic Approach to Program Transformation. </title> <booktitle> In ACM SIGPLAN Symposium on Parallel Evaluation and Semantics Based Program Manipulation, </booktitle> <address> New Haven, June 1991. </address> <publisher> Yale University, ACM Press. </publisher>
Reference: [4] <author> Z. M. Ariola and Arvind. </author> <title> Graph Rewriting Systems For Efficient Compilation. In Term Graph Rewriting: Theory and Practice. </title> <publisher> John Wiley and Sons, </publisher> <year> 1993. </year>
Reference: [5] <author> Arvind, L. Augusston, J. Hicks, R. S. Nikhil, S. Peyton-Jones, J. Stoy, and W. Williams. pH: </author> <title> a Parallel Haskell. </title> <type> Technical report, </type> <institution> MIT Laboratory for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, USA, </address> <month> September </month> <year> 1993. </year>
Reference: [6] <author> Arvind, R. S. Nikhil, and K. K. Pingali. I-Structures: </author> <title> Data Structures for Parallel Computing. In Workshop on Graph Reduction, </title> <booktitle> number 279 in Lecture Notes in Computer Science, </booktitle> <pages> pages 336-369, </pages> <address> Santa Fe, September/October 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference: [7] <author> P. S. Barth, R. S. Nikhil, and Arvind. M-Structures: </author> <title> Extending a Parallel, Non-Strict, Functional Language with State. </title> <booktitle> In Conference on Functional Programming Languages and Computer Architecture, Lecture Notes in Computer Science, </booktitle> <pages> pages 538-568. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [8] <author> K. L. Clark and S. Gregory. </author> <title> PARLOG: Parallel Programming in Logic. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(1) </volume> <pages> 1-49, </pages> <month> January </month> <year> 1986. </year>
Reference: [9] <author> S. Coorg. </author> <title> Partitioning Non-strict Functional Languages, 1994. MIT M.S. </title> <type> Thesis. Unpublished. </type>
Reference: [10] <author> S. K. Debray, N.-W. Lin, and M. V. Hermenegildo. </author> <title> Task Granularity Analysis in Logic Programs. </title> <booktitle> In SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 174-188, </pages> <address> White Plains, NY, June 1990. </address> <publisher> ACM Press. </publisher>
Reference: [11] <author> I. Foster and S. Taylor. Strand: </author> <title> New Concepts in Parallel Programming. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference: [12] <author> J. E. Hoch, D. M. Davenport, V. G. Grafe, and K. M. Steele. </author> <title> Compile-Time Partitioning of a Non-Strict Language into Sequential Threads. </title> <booktitle> In Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 180-189. </pages> <address> Dallas, </address> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1991. </year>
Reference: [13] <author> P. Hudak, S. Peyton-Jones, and P. Wadler. </author> <title> Report on Programming Language Haskell: a Non-strict, Purely Functional Language, Version 1.2. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference: [14] <author> R. A. </author> <title> Iannucci. Toward a Dataflow/von Neumann Hybrid Architecture. </title> <booktitle> In International Symposium on Computer Architecture, </booktitle> <pages> pages 131-140. </pages> <address> Honolulu, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: By way of evaluation of our technique, and because it is important in its own right, we consider a particular static analysis example, that of partitioning or threading concurrent programs. A good partitioning strategy has to address several sometimes conflicting goals <ref> [14] </ref>. The thread length has to be maximized in order to decrease thread switches, decrease explicit synchronization, and increase pipeline utilization and locality. This however should not be at the expense of exploitable parallelism, as the objective of partitioning is to create threads containing little or no easily exploitable parallelism.
Reference: [15] <editor> R. A. Iannucci. </editor> <booktitle> Parallel Machine Languages. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1990. </year>
Reference: [16] <author> A. King and P. Soper. </author> <title> Heuristics, Thresholding and a New Technique for Controlling the Granularity of Concurrent Logic Programs. </title> <type> Technical Report CSTR 92-08, </type> <institution> Department of Electronics and Computer Science, University of Southampton, </institution> <year> 1992. </year>
Reference-contexts: In an effort to conservatively derive safe information, the abstraction techniques used lose information, potentially resulting in less granularity than might theoretically be exploitable. The granularity analysis technique employed in coloring analysis to control the size of the threads (Section 4) is very imprecise. As King and Soper <ref> [16] </ref> themselves mention, a large collection of techniques are needed to analyze a small class of programs: thus, the difficulties of implementation in a compiler may outweigh the benefits achieved. The inclusion of multiple functions and synchronizing and long latency accesses in a thread does result in increased thread size.
Reference: [17] <author> A. King and P. Soper. </author> <title> Schedule Analysis: A Full Theory, A Pilot Implementation, And A Preliminary Assessment. </title> <type> Technical Report CSTR 92-06, </type> <institution> Department of Electronics and Computer Science, University of Southampton, </institution> <month> February </month> <year> 1992. </year>
Reference: [18] <author> A. King and P. Soper. </author> <title> Schedule Analysis of Concurrent Logic Programs. </title> <booktitle> In Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 478-492. </pages> <address> Washington D.C., </address> <publisher> MIT Press, </publisher> <month> November </month> <year> 1992. </year>
Reference: [19] <author> G. Lindstrom. </author> <title> Functional Programming and the Logic Variable. </title> <booktitle> In SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <pages> pages 266-280. </pages> <address> New Orleans, </address> <publisher> ACM Press, </publisher> <year> 1985. </year>
Reference: [20] <author> B. C. Massey. </author> <title> Sequentialization of Parallel Logic Programs with Mode Analysis. </title> <type> Master's thesis, </type> <institution> University of Oregon, </institution> <month> September </month> <year> 1992. </year> <note> Also available as Technical report CIS-TR-92-18. </note>
Reference: [21] <author> R. S. Nikhil. </author> <title> Id (Version 90.0) Reference Manual. </title> <type> Technical Report CSG Memo 284-a, </type> <institution> MIT Laboratory for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, USA, </address> <month> July </month> <year> 1990. </year>
Reference: [22] <author> R. S. Nikhil. </author> <title> A Multithreaded Implementation of Id Using P-RISC Graphs. </title> <booktitle> In Languages and Compilers for Parallel Computing, </booktitle> <year> 1993. </year>
Reference: [23] <author> R. S. Nikhil, Arvind, and J. Hicks. </author> <title> pH Language Proposal (Preliminary) | Draft. </title> <type> Technical report, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> September </month> <year> 1993. </year>
Reference: [24] <author> E. Y. Shapiro. </author> <title> The Family of Concurrent Logic Programming Languages. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 413-510, </pages> <year> 1989. </year>
Reference: [25] <author> R. Sundararajan. </author> <title> Data Flow and Control Flow Analysis of Logic Programs. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Oregon, </institution> <year> 1994. </year>
Reference: [26] <author> Z. Symogyi. </author> <title> A System of Precise Modes for Logic Programs. </title> <booktitle> In International Conference on Logic Programming, </booktitle> <pages> pages 769-787. </pages> <publisher> University of Melbourne, MIT Press, </publisher> <month> May </month> <year> 1987. </year>
Reference: [27] <author> E. Tick. </author> <title> The Deevolution of Concurrent Logic Programming Languages. </title> <journal> Journal of Logic Programming, </journal> <note> 1994. Invited for Tenth Anniversary Issue. Also available as University of Oregon Technical Report CIS-TR-94-07. </note>
Reference: [28] <author> E. Tick, B. C. Massey, F. Rakoczi, and P. Tulayathun. </author> <title> Concurrent Logic Programs a la Mode. </title> <editor> In E. Tick and G. Succi, editors, </editor> <booktitle> Implementations of Logic Programming Systems. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference: [29] <author> E. Tick and X. Zhong. </author> <title> A Compile-Time Granularity Analysis Algorithm and its Performance Evaluation. New Generation Computing, </title> <address> 11(3-4):271-295, </address> <month> June </month> <year> 1993. </year>
Reference: [30] <author> K. R. Traub, D. E. Culler, and K. E. Schauser. </author> <title> Global Analysis for Partitioning Non-Strict Programs into Sequential Threads. </title> <booktitle> In Conference on Lisp and Functional Programming, </booktitle> <pages> pages 324-334. </pages> <address> San Francisco, </address> <publisher> ACM Press, </publisher> <year> 1992. </year>
Reference: [31] <author> K. Ueda and M. Morita. </author> <title> Moded Flat GHC and Its Message-Oriented Implementation Technique. </title> <journal> New Generation Computing, </journal> <month> May </month> <year> 1994. </year>
Reference: [32] <author> P. Wadler. </author> <title> Strictness Analysis on Non-Flat Domains (by Abstract Interpretation Over Finite Domains). </title> <editor> In S. Abramsky and C. Hankin, editors, </editor> <booktitle> Abstract Interpretation of Declarative Languages, </booktitle> <pages> pages 181-198. </pages> <publisher> Ellis Horwood Ltd, </publisher> <address> Chichester, </address> <year> 1987. </year>
References-found: 32

