URL: http://www.eecs.umich.edu/~kuno/icde96.ps.Z
Refering-URL: http://www.eecs.umich.edu/~kuno/
Root-URL: http://www.cs.umich.edu
Email: e-mail: kuno@umich.edu, rundenst@eecs.umich.edu  
Title: Using Object-Oriented Principles to Optimize Update Propagation to Materialized Views  
Author: Harumi A. Kuno Elke A. Rundensteiner 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Dept. of Elect. Engin. and Computer Science, Software Systems Research Laboratory The University of Michigan,  
Abstract: View materialization is known to be a valuable technique for performance optimization in relational databases, and much work has been done addressing the problem of consistently maintaining relational views under update operations. However, little progress has been made thus far regarding the topic of view materialization in object-oriented databases (OODBs). In this paper, we demonstrate that there are several significant differences between the relational and object-oriented paradigms that can be exploited when addressing the object-oriented view materialization problem. We use the subsumption relationships between classes to identify branches of classes to which we do not need to propagate updates. Similarly, we use encapsulated interfaces combined with the fact that any unique database property is inherited from a single location to provide a registration/notification service for optimizing incremental view updates. We also report results from the experimental studies we have run on the MultiView system measuring the impact of these optimization strategies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. A. Blakeley, N. Coburn, and P-A Larson. </author> <title> Updating derived relations: Detecting irrelevant and autonomously computable updates. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 14(3) </volume> <pages> 369-400, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Our research on view materialization in OODBs borrows several techniques from the relational arena. Blakeley et al. test modified tuples to see if they fulfill view predicates, thereby detecting irrelevant and autonomously computable updates <ref> [1] </ref>, which resembles our solution of filtering irrelevant updates by exploiting the generalization hierarchy and the derivation structure. Ceri and Widom perform incremental view maintenance using production rules that are triggered by update operations [3]. Similarly, we override generic-update operations with type-specific update operators for virtual classes.
Reference: [2] <author> M. J. Carey, D. J. DeWitt, and J. F. Naughton. </author> <title> The OO7 benchmark. </title> <type> Technical report, </type> <institution> University of Wisconsin-Madison, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Each query thus requires an iteration through the view's extent retrieving a property from each object. For non-materialized views, we assume that query optimization will be performed during the query substitution process. 3 We employ the 10,000 object implementation of the OO7 benchmark schema for our tests <ref> [2] </ref>. 5.1 Materialization Cost and Benefit In order to evaluate the trade-off in basic costs/benefits between materialized and non-materialized views in our implementation, we performed an extensive set of tests based on the OO7 benchmark [2]. <p> 3 We employ the 10,000 object implementation of the OO7 benchmark schema for our tests <ref> [2] </ref>. 5.1 Materialization Cost and Benefit In order to evaluate the trade-off in basic costs/benefits between materialized and non-materialized views in our implementation, we performed an extensive set of tests based on the OO7 benchmark [2]. For example, we used selection queries to derive virtual classes from one of the OO7 benchmark's classes (AtomicPart), and performed multiple tests varying the update probability, view predicate selectivity, and number of query predicate components for various configurations of views.
Reference: [3] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Ceri and Widom perform incremental view maintenance using production rules that are triggered by update operations <ref> [3] </ref>. Similarly, we override generic-update operations with type-specific update operators for virtual classes. We, however, do not need to address some of the duplicate key elimination problems of the relational model. Only a few published papers address issues of view materialization in OODBs.
Reference: [4] <author> E. N. Hanson. </author> <title> A performance analysis of view materialization strategies. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 440-453, </pages> <year> 1987. </year>
Reference-contexts: Typically, the contents of a view are derived using the view's stored query, in which case each query upon the extent of a view must be translated into a query upon the view's source classes. In relational systems, this is known as query modification <ref> [4] </ref>. View materializationthe maintenance of derived extents of views as opposed to recomputing them upon demandhas been demonstrated in the relational model to improve query performance. If the view is materialized, then its contents must be maintained in the face of updates to the view's sources.
Reference: [5] <author> M. Hardwick and B. R. Downie. </author> <title> On object-oriented databases, materialized views, </title> <booktitle> and concurrent engineering. In Proc. of the 1991 ASME Int. Computers for Engin. Conf. and Exposition. Engineering Databases: An Engineering Resource, </booktitle> <year> 1991. </year>
Reference-contexts: Only a few published papers address issues of view materialization in OODBs. Hardwick and Downie provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions <ref> [5] </ref>. However, [5] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. Konomi et al. address maintaining consistency for a particular type of join class formed along an existing path in the aggregation graph [6]. <p> Only a few published papers address issues of view materialization in OODBs. Hardwick and Downie provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions <ref> [5] </ref>. However, [5] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. Konomi et al. address maintaining consistency for a particular type of join class formed along an existing path in the aggregation graph [6].
Reference: [6] <author> S. Konomi, T. Furukawa, and Y. Kambayashi. </author> <title> Super-key classes for updating materialized derived classes in object bases. </title> <booktitle> In International Conference on Deductive and Object-Oriented Databases, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: However, [5] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. Konomi et al. address maintaining consistency for a particular type of join class formed along an existing path in the aggregation graph <ref> [6] </ref>. Our work instead focuses on the exploitation of the structure of the schema hierarchy and derivation dependency graph in order to reduce update propagations. 3 The MultiView Object Model and System Let O be an infinite set of object instances.
Reference: [7] <author> H. A. Kuno, Y. G. Ra, and E. A. Rundensteiner. </author> <title> The object-slicing technique: A flexible object representation and its evaluation. </title> <type> Technical Report CSE-TR-241-95, </type> <institution> University of Michigan, </institution> <year> 1995. </year>
Reference-contexts: Space prohibits a description of the implementation in this paper. Instead, the reader is referred to <ref> [8, 7] </ref>. Although GemStone offers many features that greatly aided our implementation, it does not support several of the key object-model properties that are necessary for the realization of the design principles of our view model. <p> We therefore employ an object-slicing representational model to construct the MultiView object model on top of GemStone <ref> [7] </ref>. In object-slicing, a real-world object corresponds to a hierarchy of implementation objects (one for each class whose type the object possesses) linked to a conceptual object (used to represent the object-itself) rather than associating one implementation with each conceptual object as is commonly assumed in OODB systems. <p> The object-slicing architecture provides a flexible and powerful implementation base that can readily be configured to support all the properties we identified as necessary for the support of the MultiView model. For details about our object-slicing architecture and its impact on performance, readers are referred to <ref> [10, 7] </ref>. 4 OO Update Propagation MultiView supports the following update operations: creation, deletion, addition of a type, removal of a type, and modification of an instance variable. The first four operations alter the set-membership of a target class; the modification operation changes the value of an object's instance variable.
Reference: [8] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> The MultiView OODB view system: Design and implementation. </title> <note> Accepted by Special Issue of Theory and Practice of Object Systems (TAPOS) on Subjectivity in Object-Oriented Systems, </note> <year> 1995. </year>
Reference-contexts: Space prohibits a description of the implementation in this paper. Instead, the reader is referred to <ref> [8, 7] </ref>. Although GemStone offers many features that greatly aided our implementation, it does not support several of the key object-model properties that are necessary for the realization of the design principles of our view model. <p> New techniques we introduce include distributed registration, subsumption-based propagation termination, and derivation-ordered prevention of the self-cancelling effect. We have implemented a prototype (version 1.0) of the MultiView system <ref> [8] </ref>, which supports updatable materialized object-oriented views. Our system incorporates the incremental update propagation strategies introduced in this paper. We present experimental results that demonstrate the performance gains derived from our proposed view materialization strategies.
Reference: [9] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Incremental update propagation algorithms for materialized object-oriented views in MultiView. </title> <type> Technical report, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: For a more comprehensive description of the experiments we have performed, readers are referred to <ref> [9] </ref>. and a single retrieval of the contents of a virtual class derived using a select query (selectivity 10% of the Atomic-Part class, i.e., 1,000 objects) while increasing k from 0 to 5,000.
Reference: [10] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Materialized object-oriented views in MultiView. </title> <booktitle> In ACM Research Issues in Data Engineering Workshop, </booktitle> <pages> pages 78-85, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. agement system to support updatable materialized object-oriented views <ref> [12, 13, 14, 10] </ref>. In a previous paper [10], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation. <p> Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. agement system to support updatable materialized object-oriented views [12, 13, 14, 10]. In a previous paper <ref> [10] </ref>, we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation. <p> The object-slicing architecture provides a flexible and powerful implementation base that can readily be configured to support all the properties we identified as necessary for the support of the MultiView model. For details about our object-slicing architecture and its impact on performance, readers are referred to <ref> [10, 7] </ref>. 4 OO Update Propagation MultiView supports the following update operations: creation, deletion, addition of a type, removal of a type, and modification of an instance variable. The first four operations alter the set-membership of a target class; the modification operation changes the value of an object's instance variable.
Reference: [11] <author> O2 Technology. </author> <title> O2 Views User Manual, </title> <note> version 1 edition, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [15, 12, 11] </ref>, little work has been done on the support of materialized OODB views.
Reference: [12] <author> E. A. Rundensteiner. </author> <title> MultiView: A methodology for supporting multiple views in object-oriented databases. </title> <booktitle> In 18th VLDB Conf., </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [15, 12, 11] </ref>, little work has been done on the support of materialized OODB views. <p> Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. agement system to support updatable materialized object-oriented views <ref> [12, 13, 14, 10] </ref>. In a previous paper [10], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation.
Reference: [13] <author> E. A. Rundensteiner. </author> <title> Tools for view generation in OODBs. </title> <booktitle> In International Conference on Information and Knowledge Management, </booktitle> <pages> pages 635-644, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. agement system to support updatable materialized object-oriented views <ref> [12, 13, 14, 10] </ref>. In a previous paper [10], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation.
Reference: [14] <author> E. A. Rundensteiner. </author> <title> A classification algorithm for supporting object-oriented views. </title> <booktitle> In Int. Conf. on Information and Knowledge Management, </booktitle> <pages> pages 18-25, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program. agement system to support updatable materialized object-oriented views <ref> [12, 13, 14, 10] </ref>. In a previous paper [10], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation. <p> We have proposed elsewhere algorithms and techniques to automatically maintain the global class hierarchy <ref> [14] </ref>. Classification offers unique opportunities for optimizing update propagation to materialized views, as will be discussed in Section 4. 3.2 MultiView Implementation We have successfully completed a prototype implementation of the MultiView model as described in this paper using the commercial GemStone OODB system 1 .
Reference: [15] <author> M. H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updatable views in object-oriented databases. </title> <booktitle> In Proceedings of the Second DOOD Conference, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [15, 12, 11] </ref>, little work has been done on the support of materialized OODB views.
References-found: 15

